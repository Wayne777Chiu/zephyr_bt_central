
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002ce0 	.word	0x20002ce0

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001ae1 	.word	0x00001ae1
       8:	00001b35 	.word	0x00001b35
       c:	00001979 	.word	0x00001979
      10:	00001979 	.word	0x00001979
      14:	00001979 	.word	0x00001979
      18:	00001979 	.word	0x00001979
      1c:	00001979 	.word	0x00001979
      20:	00001979 	.word	0x00001979
      24:	00001979 	.word	0x00001979
      28:	00001979 	.word	0x00001979
      2c:	00001581 	.word	0x00001581
      30:	00001979 	.word	0x00001979
      34:	00001979 	.word	0x00001979
      38:	0000153d 	.word	0x0000153d
      3c:	00001979 	.word	0x00001979

00000040 <_irq_vector_table>:
      40:	00001aa5 000119cb 00001aa5 00001aa5     ................
      50:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      60:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      70:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      80:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      90:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      a0:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      b0:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      c0:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      d0:	00001aa5 00001aa5 00001aa5              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001279 00000000 000018f1     ....y...........
      ec:	00000000 000018f1 00000000 000018f1     ................
      fc:	00000000 000018f1 00000000 000018f1     ................
     10c:	00000000 00013a3d 00000000 000018f1     ....=:..........
     11c:	00000000 000018f1 00000000 000018f1     ................
     12c:	00000000 000018f1 00000000 00011991     ................
     13c:	00000000 000018f1 20003eb0 00013d41     .........>. A=..
     14c:	00000000 000018f1 00000000 000018f1     ................
     15c:	00000000 000018f1 00000000 000013a1     ................
     16c:	00000000 000018f1 00000000 000018f1     ................
     17c:	00000000 000018f1 00000000 000018f1     ................
     18c:	00000000 000018f1 00000000 000018f1     ................
     19c:	00000000 000119c5 00000000 000018f1     ................
     1ac:	00000000 000018f1 00000000 000018f1     ................
     1bc:	00000000 000018f1 00000000 000018f1     ................
     1cc:	00000000 000018f1 00000000 000018f1     ................
     1dc:	00000000 000018f1 00000000 000018f1     ................
     1ec:	00000000 000018f1 00000000 000018f1     ................
     1fc:	00000000 000018f1 00000000 000018f1     ................
     20c:	00000000 000018f1                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb3a 	bl	1be0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	000152c5 	.word	0x000152c5
     5b0:	000152ee 	.word	0x000152ee
     5b4:	000152cc 	.word	0x000152cc
     5b8:	000152d3 	.word	0x000152d3
     5bc:	000152dd 	.word	0x000152dd
     5c0:	000152e7 	.word	0x000152e7

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f004 fc98 	bl	4f00 <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f004 fd31 	bl	5060 <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	00015311 	.word	0x00015311
     604:	20000000 	.word	0x20000000
     608:	0001532f 	.word	0x0001532f

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f004 fc71 	bl	4f00 <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f004 fa9c 	bl	4b6c <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 fe4a 	bl	42e0 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	0001535a 	.word	0x0001535a
     664:	00015268 	.word	0x00015268
     668:	00000671 	.word	0x00000671
     66c:	00015378 	.word	0x00015378

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 fe75 	bl	4384 <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f004 fc2b 	bl	4f04 <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	0001533e 	.word	0x0001533e
     6bc:	0001526e 	.word	0x0001526e

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 fd98 	bl	41f8 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f003 ff10 	bl	4504 <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 fdf4 	bl	42e0 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	0001539b 	.word	0x0001539b
     70c:	000153bb 	.word	0x000153bb
     710:	20003a20 	.word	0x20003a20
     714:	00015276 	.word	0x00015276
     718:	00000671 	.word	0x00000671
     71c:	00015378 	.word	0x00015378
     720:	000153d2 	.word	0x000153d2

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003a54 	.word	0x20003a54
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f013 ff92 	bl	147cc <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8d6 	bl	1a58 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003a58 	.word	0x20003a58

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003a58 	.word	0x20003a58

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr

00000fe2 <syslog_hook_default>:
 */

#include <logging/sys_log.h>

void syslog_hook_default(const char *fmt, ...)
{
     fe2:	b40f      	push	{r0, r1, r2, r3}
	(void)(fmt);  /* Prevent warning about unused argument */
}
     fe4:	b004      	add	sp, #16
     fe6:	4770      	bx	lr

00000fe8 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe8:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fea:	4c11      	ldr	r4, [pc, #68]	; (1030 <sys_rand32_get+0x48>)
     fec:	f3bf 8f5b 	dmb	ish
     ff0:	6820      	ldr	r0, [r4, #0]
     ff2:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff6:	b960      	cbnz	r0, 1012 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff8:	480e      	ldr	r0, [pc, #56]	; (1034 <sys_rand32_get+0x4c>)
     ffa:	f012 ff0f 	bl	13e1c <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffe:	f3bf 8f5b 	dmb	ish
    1002:	e854 3f00 	ldrex	r3, [r4]
    1006:	e844 0200 	strex	r2, r0, [r4]
    100a:	2a00      	cmp	r2, #0
    100c:	d1f9      	bne.n	1002 <sys_rand32_get+0x1a>
    100e:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1012:	6843      	ldr	r3, [r0, #4]
    1014:	2204      	movs	r2, #4
    1016:	681b      	ldr	r3, [r3, #0]
    1018:	eb0d 0102 	add.w	r1, sp, r2
    101c:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101e:	2800      	cmp	r0, #0
    1020:	da02      	bge.n	1028 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1022:	f000 fa37 	bl	1494 <_timer_cycle_get_32>
    1026:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1028:	9801      	ldr	r0, [sp, #4]
    102a:	b002      	add	sp, #8
    102c:	bd10      	pop	{r4, pc}
    102e:	bf00      	nop
    1030:	20000004 	.word	0x20000004
    1034:	00015400 	.word	0x00015400

00001038 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1038:	280a      	cmp	r0, #10
{
    103a:	b538      	push	{r3, r4, r5, lr}
    103c:	4604      	mov	r4, r0
    103e:	4d07      	ldr	r5, [pc, #28]	; (105c <console_out+0x24>)
	if ('\n' == c) {
    1040:	d104      	bne.n	104c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    1042:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1044:	6843      	ldr	r3, [r0, #4]
    1046:	210d      	movs	r1, #13
    1048:	685b      	ldr	r3, [r3, #4]
    104a:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    104c:	6828      	ldr	r0, [r5, #0]
    104e:	6843      	ldr	r3, [r0, #4]
    1050:	b2e1      	uxtb	r1, r4
    1052:	685b      	ldr	r3, [r3, #4]
    1054:	4798      	blx	r3

	return c;
}
    1056:	4620      	mov	r0, r4
    1058:	bd38      	pop	{r3, r4, r5, pc}
    105a:	bf00      	nop
    105c:	20000008 	.word	0x20000008

00001060 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1060:	4801      	ldr	r0, [pc, #4]	; (1068 <uart_console_hook_install+0x8>)
    1062:	f7ff be4d 	b.w	d00 <__printk_hook_install>
    1066:	bf00      	nop
    1068:	00001039 	.word	0x00001039

0000106c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    106c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    106e:	4804      	ldr	r0, [pc, #16]	; (1080 <uart_console_init+0x14>)
    1070:	f012 fed4 	bl	13e1c <device_get_binding>
    1074:	4b03      	ldr	r3, [pc, #12]	; (1084 <uart_console_init+0x18>)
    1076:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1078:	f7ff fff2 	bl	1060 <uart_console_hook_install>

	return 0;
}
    107c:	2000      	movs	r0, #0
    107e:	bd08      	pop	{r3, pc}
    1080:	0001540a 	.word	0x0001540a
    1084:	20000008 	.word	0x20000008

00001088 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1088:	b510      	push	{r4, lr}
	__asm__ volatile(
    108a:	f04f 0320 	mov.w	r3, #32
    108e:	f3ef 8211 	mrs	r2, BASEPRI
    1092:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1096:	4c11      	ldr	r4, [pc, #68]	; (10dc <_m16src_stop+0x54>)
    1098:	7823      	ldrb	r3, [r4, #0]
    109a:	b923      	cbnz	r3, 10a6 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    109c:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    10a0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10a4:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10a6:	3b01      	subs	r3, #1
    10a8:	b2db      	uxtb	r3, r3
    10aa:	7023      	strb	r3, [r4, #0]
    10ac:	b123      	cbz	r3, 10b8 <_m16src_stop+0x30>
    10ae:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10b2:	f06f 000f 	mvn.w	r0, #15
    10b6:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10b8:	4b09      	ldr	r3, [pc, #36]	; (10e0 <_m16src_stop+0x58>)
    10ba:	7818      	ldrb	r0, [r3, #0]
    10bc:	2101      	movs	r1, #1
    10be:	b128      	cbz	r0, 10cc <_m16src_stop+0x44>
		m16src_ref++;
    10c0:	7021      	strb	r1, [r4, #0]
    10c2:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10c6:	f06f 000a 	mvn.w	r0, #10
    10ca:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10cc:	7019      	strb	r1, [r3, #0]
    10ce:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10d6:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10d8:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10da:	bd10      	pop	{r4, pc}
    10dc:	2000000e 	.word	0x2000000e
    10e0:	2000000d 	.word	0x2000000d

000010e4 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10e4:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10e6:	2200      	movs	r2, #0
    10e8:	4610      	mov	r0, r2
    10ea:	2101      	movs	r1, #1
    10ec:	f000 fbe8 	bl	18c0 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10f0:	2000      	movs	r0, #0
    10f2:	f000 fbb3 	bl	185c <_arch_irq_enable>

	return 0;
}
    10f6:	2000      	movs	r0, #0
    10f8:	bd08      	pop	{r3, pc}
	...

000010fc <_m16src_start>:
{
    10fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10fe:	f04f 0220 	mov.w	r2, #32
    1102:	f3ef 8311 	mrs	r3, BASEPRI
    1106:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    110a:	4a25      	ldr	r2, [pc, #148]	; (11a0 <_m16src_start+0xa4>)
    110c:	7810      	ldrb	r0, [r2, #0]
    110e:	1c44      	adds	r4, r0, #1
    1110:	7014      	strb	r4, [r2, #0]
    1112:	b160      	cbz	r0, 112e <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1114:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    111c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    1120:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1124:	bf14      	ite	ne
    1126:	2000      	movne	r0, #0
    1128:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    112c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    112e:	4d1d      	ldr	r5, [pc, #116]	; (11a4 <_m16src_start+0xa8>)
    1130:	782f      	ldrb	r7, [r5, #0]
    1132:	b12f      	cbz	r7, 1140 <_m16src_start+0x44>
		m16src_ref--;
    1134:	7010      	strb	r0, [r2, #0]
    1136:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    113a:	f06f 000a 	mvn.w	r0, #10
    113e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1140:	2601      	movs	r6, #1
    1142:	702e      	strb	r6, [r5, #0]
    1144:	f383 8811 	msr	BASEPRI, r3
    1148:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    114c:	b319      	cbz	r1, 1196 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    114e:	4638      	mov	r0, r7
    1150:	f000 fb94 	bl	187c <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1154:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1158:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    115c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1160:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1162:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1166:	b192      	cbz	r2, 118e <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1168:	2200      	movs	r2, #0
    116a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116e:	4a0e      	ldr	r2, [pc, #56]	; (11a8 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1170:	f013 0f01 	tst.w	r3, #1
    1174:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1178:	bf08      	it	eq
    117a:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    117e:	2000      	movs	r0, #0
    1180:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1184:	f000 fb6a 	bl	185c <_arch_irq_enable>
	m16src_grd = 0;
    1188:	2300      	movs	r3, #0
    118a:	702b      	strb	r3, [r5, #0]
    118c:	e7c4      	b.n	1118 <_m16src_start+0x1c>
			__WFE();
    118e:	bf20      	wfe
			__SEV();
    1190:	bf40      	sev
			__WFE();
    1192:	bf20      	wfe
    1194:	e7e5      	b.n	1162 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1196:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    119a:	6026      	str	r6, [r4, #0]
    119c:	e7f4      	b.n	1188 <_m16src_start+0x8c>
    119e:	bf00      	nop
    11a0:	2000000e 	.word	0x2000000e
    11a4:	2000000d 	.word	0x2000000d
    11a8:	e000e100 	.word	0xe000e100

000011ac <_k32src_start>:
{
    11ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ae:	4606      	mov	r6, r0
    11b0:	460c      	mov	r4, r1
	__asm__ volatile(
    11b2:	f04f 0220 	mov.w	r2, #32
    11b6:	f3ef 8311 	mrs	r3, BASEPRI
    11ba:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11be:	4a2c      	ldr	r2, [pc, #176]	; (1270 <_k32src_start+0xc4>)
    11c0:	7815      	ldrb	r5, [r2, #0]
    11c2:	b165      	cbz	r5, 11de <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11c4:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11cc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11d4:	bf0c      	ite	eq
    11d6:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11da:	2000      	movne	r0, #0
    11dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11de:	2701      	movs	r7, #1
    11e0:	7017      	strb	r7, [r2, #0]
    11e2:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11e6:	4628      	mov	r0, r5
    11e8:	f000 fb48 	bl	187c <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11f0:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11f2:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11f6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11fa:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11fe:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1202:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1204:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1208:	b371      	cbz	r1, 1268 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    120a:	0792      	lsls	r2, r2, #30
    120c:	4f19      	ldr	r7, [pc, #100]	; (1274 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    120e:	bf58      	it	pl
    1210:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1212:	f04f 0100 	mov.w	r1, #0
    1216:	f04f 0501 	mov.w	r5, #1
    121a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    121e:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1222:	bf58      	it	pl
    1224:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1228:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    122c:	f000 fb16 	bl	185c <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1234:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1236:	2218      	movs	r2, #24
    1238:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    123c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1240:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1244:	f014 0103 	ands.w	r1, r4, #3
    1248:	d1be      	bne.n	11c8 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    124a:	2010      	movs	r0, #16
    124c:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    1250:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1254:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1256:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    125a:	f7ff ff4f 	bl	10fc <_m16src_start>
		if (!err) {
    125e:	2800      	cmp	r0, #0
    1260:	d1b2      	bne.n	11c8 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1262:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1266:	e7af      	b.n	11c8 <_k32src_start+0x1c>
		__WFE();
    1268:	bf20      	wfe
		__SEV();
    126a:	bf40      	sev
		__WFE();
    126c:	bf20      	wfe
    126e:	e7c9      	b.n	1204 <_k32src_start+0x58>
    1270:	2000000c 	.word	0x2000000c
    1274:	e000e100 	.word	0xe000e100

00001278 <_power_clock_isr>:
{
    1278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    127a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    127e:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1280:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1284:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1288:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    128c:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1290:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1294:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1298:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    129c:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    12a0:	f1be 0f00 	cmp.w	lr, #0
    12a4:	d003      	beq.n	12ae <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12a6:	f04f 0e00 	mov.w	lr, #0
    12aa:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12ae:	b127      	cbz	r7, 12ba <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12b4:	2700      	movs	r7, #0
    12b6:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12ba:	b13a      	cbz	r2, 12cc <_power_clock_isr+0x54>
    12bc:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12be:	bf41      	itttt	mi
    12c0:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12c4:	2201      	movmi	r2, #1
    12c6:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12ca:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12cc:	b120      	cbz	r0, 12d8 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12d2:	2200      	movs	r2, #0
    12d4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12d8:	b149      	cbz	r1, 12ee <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12da:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12de:	2100      	movs	r1, #0
    12e0:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12e4:	4628      	mov	r0, r5
    12e6:	f7ff fecf 	bl	1088 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12ea:	2301      	movs	r3, #1
    12ec:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12ee:	b176      	cbz	r6, 130e <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f4:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f6:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f8:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12fc:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fe:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1302:	f7ff fefb 	bl	10fc <_m16src_start>
		if (!err) {
    1306:	b910      	cbnz	r0, 130e <_power_clock_isr+0x96>
    1308:	4b01      	ldr	r3, [pc, #4]	; (1310 <_power_clock_isr+0x98>)
    130a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    130e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1310:	e000e100 	.word	0xe000e100

00001314 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1314:	4b08      	ldr	r3, [pc, #32]	; (1338 <rtc_compare_set+0x24>)
    1316:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    131a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    131e:	1ac0      	subs	r0, r0, r3
    1320:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1324:	4b05      	ldr	r3, [pc, #20]	; (133c <rtc_compare_set+0x28>)
    1326:	3802      	subs	r0, #2
    1328:	4298      	cmp	r0, r3
    132a:	bf82      	ittt	hi
    132c:	4b04      	ldrhi	r3, [pc, #16]	; (1340 <rtc_compare_set+0x2c>)
    132e:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1332:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1336:	4770      	bx	lr
    1338:	40011000 	.word	0x40011000
    133c:	007ffffd 	.word	0x007ffffd
    1340:	e000e100 	.word	0xe000e100

00001344 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1344:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1346:	4b11      	ldr	r3, [pc, #68]	; (138c <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1348:	4c11      	ldr	r4, [pc, #68]	; (1390 <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    134a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134e:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1350:	4d10      	ldr	r5, [pc, #64]	; (1394 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1352:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1354:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1356:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    135a:	4298      	cmp	r0, r3
    135c:	d30f      	bcc.n	137e <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    135e:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    1362:	490d      	ldr	r1, [pc, #52]	; (1398 <rtc_announce_set_next+0x54>)
    1364:	6809      	ldr	r1, [r1, #0]
    1366:	4288      	cmp	r0, r1
    1368:	bf28      	it	cs
    136a:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    136c:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    1370:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1374:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1376:	4b09      	ldr	r3, [pc, #36]	; (139c <rtc_announce_set_next+0x58>)
    1378:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    137a:	f013 fa9f 	bl	148bc <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    137e:	6820      	ldr	r0, [r4, #0]
    1380:	682b      	ldr	r3, [r5, #0]
    1382:	4418      	add	r0, r3
}
    1384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1388:	f7ff bfc4 	b.w	1314 <rtc_compare_set>
    138c:	40011000 	.word	0x40011000
    1390:	20000014 	.word	0x20000014
    1394:	20003e70 	.word	0x20003e70
    1398:	20000010 	.word	0x20000010
    139c:	20003e6c 	.word	0x20003e6c

000013a0 <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    13a0:	4b02      	ldr	r3, [pc, #8]	; (13ac <rtc1_nrf5_isr+0xc>)
    13a2:	2200      	movs	r2, #0
    13a4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13a8:	f7ff bfcc 	b.w	1344 <rtc_announce_set_next>
    13ac:	40011000 	.word	0x40011000

000013b0 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13b0:	1e03      	subs	r3, r0, #0
    13b2:	4a0a      	ldr	r2, [pc, #40]	; (13dc <_timer_idle_enter+0x2c>)
    13b4:	480a      	ldr	r0, [pc, #40]	; (13e0 <_timer_idle_enter+0x30>)
    13b6:	db04      	blt.n	13c2 <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13b8:	6811      	ldr	r1, [r2, #0]
    13ba:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13be:	428b      	cmp	r3, r1
    13c0:	dd02      	ble.n	13c8 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13c2:	6813      	ldr	r3, [r2, #0]
    13c4:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13c8:	6810      	ldr	r0, [r2, #0]
    13ca:	4a06      	ldr	r2, [pc, #24]	; (13e4 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13cc:	4906      	ldr	r1, [pc, #24]	; (13e8 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ce:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13d0:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13d2:	fb00 2003 	mla	r0, r0, r3, r2
    13d6:	f7ff bf9d 	b.w	1314 <rtc_compare_set>
    13da:	bf00      	nop
    13dc:	20003e70 	.word	0x20003e70
    13e0:	007fffff 	.word	0x007fffff
    13e4:	20000014 	.word	0x20000014
    13e8:	20000010 	.word	0x20000010

000013ec <_timer_idle_exit>:
{
    13ec:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13ee:	4b07      	ldr	r3, [pc, #28]	; (140c <_timer_idle_exit+0x20>)
    13f0:	2200      	movs	r2, #0
    13f2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f6:	4b06      	ldr	r3, [pc, #24]	; (1410 <_timer_idle_exit+0x24>)
    13f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1400:	f7ff ffa0 	bl	1344 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1404:	4b03      	ldr	r3, [pc, #12]	; (1414 <_timer_idle_exit+0x28>)
    1406:	2201      	movs	r2, #1
    1408:	601a      	str	r2, [r3, #0]
    140a:	bd08      	pop	{r3, pc}
    140c:	40011000 	.word	0x40011000
    1410:	e000e100 	.word	0xe000e100
    1414:	20000010 	.word	0x20000010

00001418 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1418:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    141a:	4818      	ldr	r0, [pc, #96]	; (147c <_sys_clock_driver_init+0x64>)
    141c:	f012 fcfe 	bl	13e1c <device_get_binding>
	if (!clock) {
    1420:	b348      	cbz	r0, 1476 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1422:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1424:	4d16      	ldr	r5, [pc, #88]	; (1480 <_sys_clock_driver_init+0x68>)
    1426:	681b      	ldr	r3, [r3, #0]
    1428:	2101      	movs	r1, #1
    142a:	4798      	blx	r3
	rtc_past = 0;
    142c:	4b15      	ldr	r3, [pc, #84]	; (1484 <_sys_clock_driver_init+0x6c>)
    142e:	2400      	movs	r4, #0
    1430:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1432:	4b15      	ldr	r3, [pc, #84]	; (1488 <_sys_clock_driver_init+0x70>)
    1434:	2601      	movs	r6, #1
    1436:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1438:	4b14      	ldr	r3, [pc, #80]	; (148c <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    143a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1448:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    144c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1450:	4b0f      	ldr	r3, [pc, #60]	; (1490 <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1452:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1456:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    145a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    145e:	4631      	mov	r1, r6
    1460:	4622      	mov	r2, r4
    1462:	2011      	movs	r0, #17
    1464:	f000 fa2c 	bl	18c0 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1468:	2011      	movs	r0, #17
    146a:	f000 f9f7 	bl	185c <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    146e:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1470:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1472:	602e      	str	r6, [r5, #0]
	return 0;
    1474:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    147a:	bd70      	pop	{r4, r5, r6, pc}
    147c:	0001542c 	.word	0x0001542c
    1480:	40011000 	.word	0x40011000
    1484:	20000014 	.word	0x20000014
    1488:	20000010 	.word	0x20000010
    148c:	20003e70 	.word	0x20003e70
    1490:	e000e100 	.word	0xe000e100

00001494 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1494:	4a0a      	ldr	r2, [pc, #40]	; (14c0 <_timer_cycle_get_32+0x2c>)
{
    1496:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1498:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    149c:	4d09      	ldr	r5, [pc, #36]	; (14c4 <_timer_cycle_get_32+0x30>)
    149e:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    14a2:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14a6:	42a3      	cmp	r3, r4
    14a8:	d107      	bne.n	14ba <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14aa:	4a07      	ldr	r2, [pc, #28]	; (14c8 <_timer_cycle_get_32+0x34>)
    14ac:	6812      	ldr	r2, [r2, #0]
    14ae:	4350      	muls	r0, r2
    14b0:	1a1b      	subs	r3, r3, r0
    14b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14b6:	4418      	add	r0, r3
    14b8:	bd30      	pop	{r4, r5, pc}
    14ba:	4623      	mov	r3, r4
    14bc:	e7ef      	b.n	149e <_timer_cycle_get_32+0xa>
    14be:	bf00      	nop
    14c0:	40011000 	.word	0x40011000
    14c4:	20001980 	.word	0x20001980
    14c8:	20003e70 	.word	0x20003e70

000014cc <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14cc:	4807      	ldr	r0, [pc, #28]	; (14ec <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14ce:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14d0:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14d2:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14d4:	d008      	beq.n	14e8 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14d6:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14d8:	f013 f92a 	bl	14730 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14dc:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14e0:	4903      	ldr	r1, [pc, #12]	; (14f0 <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    14e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14e6:	600a      	str	r2, [r1, #0]

000014e8 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14e8:	4770      	bx	lr
    14ea:	0000      	.short	0x0000
    ldr r0, =_kernel
    14ec:	20001948 	.word	0x20001948
    ldr r1, =_SCS_ICSR
    14f0:	e000ed04 	.word	0xe000ed04

000014f4 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f4:	4804      	ldr	r0, [pc, #16]	; (1508 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    14f6:	2300      	movs	r3, #0
    14f8:	2120      	movs	r1, #32
    14fa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    14fc:	3301      	adds	r3, #1
    14fe:	2b27      	cmp	r3, #39	; 0x27
    1500:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1504:	d1f9      	bne.n	14fa <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1506:	4770      	bx	lr
    1508:	e000e100 	.word	0xe000e100

0000150c <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    150c:	4a08      	ldr	r2, [pc, #32]	; (1530 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    150e:	4909      	ldr	r1, [pc, #36]	; (1534 <__swap+0x28>)
	_current->arch.basepri = key;
    1510:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1512:	6809      	ldr	r1, [r1, #0]
    1514:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1516:	4908      	ldr	r1, [pc, #32]	; (1538 <__swap+0x2c>)
	_current->arch.basepri = key;
    1518:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    151a:	684b      	ldr	r3, [r1, #4]
    151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1520:	604b      	str	r3, [r1, #4]
    1522:	2300      	movs	r3, #0
    1524:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1528:	6893      	ldr	r3, [r2, #8]
}
    152a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    152c:	4770      	bx	lr
    152e:	bf00      	nop
    1530:	20001948 	.word	0x20001948
    1534:	00019430 	.word	0x00019430
    1538:	e000ed00 	.word	0xe000ed00

0000153c <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    153c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    153e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1542:	490d      	ldr	r1, [pc, #52]	; (1578 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1544:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1546:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1548:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    154a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    154e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    1552:	4f0a      	ldr	r7, [pc, #40]	; (157c <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1554:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1558:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    155a:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    155c:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    155e:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    1560:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1562:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1564:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1568:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    156c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    1570:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    1574:	4770      	bx	lr
    1576:	0000      	.short	0x0000
    ldr r1, =_kernel
    1578:	20001948 	.word	0x20001948
    ldr v4, =_SCS_ICSR
    157c:	e000ed04 	.word	0xe000ed04

00001580 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    1580:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1584:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1586:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    158a:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    158e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    1590:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1594:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    1598:	2902      	cmp	r1, #2
    beq _oops
    159a:	d0ff      	beq.n	159c <_oops>

0000159c <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    159c:	b500      	push	{lr}
    blx _do_kernel_oops
    159e:	f000 fa2b 	bl	19f8 <_do_kernel_oops>
    pop {pc}
    15a2:	bd00      	pop	{pc}

000015a4 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15a4:	b510      	push	{r4, lr}
    15a6:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15a8:	f013 f910 	bl	147cc <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15ac:	6822      	ldr	r2, [r4, #0]
    15ae:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15b4:	4801      	ldr	r0, [pc, #4]	; (15bc <_FaultThreadShow.isra.2+0x18>)
    15b6:	f7ff bce9 	b.w	f8c <printk>
    15ba:	bf00      	nop
    15bc:	00015585 	.word	0x00015585

000015c0 <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15c0:	b538      	push	{r3, r4, r5, lr}
    15c2:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15c4:	481a      	ldr	r0, [pc, #104]	; (1630 <_MpuFault+0x70>)
{
    15c6:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15c8:	f7ff fce0 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15cc:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d0:	4c18      	ldr	r4, [pc, #96]	; (1634 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15d2:	f7ff ffe7 	bl	15a4 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15d8:	06d9      	lsls	r1, r3, #27
    15da:	d502      	bpl.n	15e2 <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15dc:	4816      	ldr	r0, [pc, #88]	; (1638 <_MpuFault+0x78>)
    15de:	f7ff fcd5 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e4:	071a      	lsls	r2, r3, #28
    15e6:	d502      	bpl.n	15ee <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15e8:	4814      	ldr	r0, [pc, #80]	; (163c <_MpuFault+0x7c>)
    15ea:	f7ff fccf 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    15ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15f0:	079b      	lsls	r3, r3, #30
    15f2:	d50e      	bpl.n	1612 <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    15f4:	4812      	ldr	r0, [pc, #72]	; (1640 <_MpuFault+0x80>)
    15f6:	f7ff fcc9 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    15fa:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    15fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fe:	0618      	lsls	r0, r3, #24
    1600:	d507      	bpl.n	1612 <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    1602:	4810      	ldr	r0, [pc, #64]	; (1644 <_MpuFault+0x84>)
    1604:	f7ff fcc2 	bl	f8c <printk>
			if (fromHardFault) {
    1608:	b11d      	cbz	r5, 1612 <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    160a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    160c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1610:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    1612:	4c08      	ldr	r4, [pc, #32]	; (1634 <_MpuFault+0x74>)
    1614:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1616:	07d2      	lsls	r2, r2, #31
    1618:	d502      	bpl.n	1620 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    161a:	480b      	ldr	r0, [pc, #44]	; (1648 <_MpuFault+0x88>)
    161c:	f7ff fcb6 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    1620:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1622:	069b      	lsls	r3, r3, #26
    1624:	d502      	bpl.n	162c <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1626:	4809      	ldr	r0, [pc, #36]	; (164c <_MpuFault+0x8c>)
    1628:	f7ff fcb0 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    162c:	2000      	movs	r0, #0
    162e:	bd38      	pop	{r3, r4, r5, pc}
    1630:	000155cf 	.word	0x000155cf
    1634:	e000ed00 	.word	0xe000ed00
    1638:	000155e6 	.word	0x000155e6
    163c:	000155f8 	.word	0x000155f8
    1640:	0001560c 	.word	0x0001560c
    1644:	00015625 	.word	0x00015625
    1648:	00015636 	.word	0x00015636
    164c:	00015656 	.word	0x00015656

00001650 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    1650:	b510      	push	{r4, lr}
    1652:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1654:	481a      	ldr	r0, [pc, #104]	; (16c0 <_UsageFault+0x70>)
    1656:	f7ff fc99 	bl	f8c <printk>

	_FaultThreadShow(esf);
    165a:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    165e:	4c19      	ldr	r4, [pc, #100]	; (16c4 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    1660:	f7ff ffa0 	bl	15a4 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1664:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1666:	019a      	lsls	r2, r3, #6
    1668:	d502      	bpl.n	1670 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    166a:	4817      	ldr	r0, [pc, #92]	; (16c8 <_UsageFault+0x78>)
    166c:	f7ff fc8e 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    1670:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1672:	01db      	lsls	r3, r3, #7
    1674:	d502      	bpl.n	167c <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    1676:	4815      	ldr	r0, [pc, #84]	; (16cc <_UsageFault+0x7c>)
    1678:	f7ff fc88 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    167c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167e:	0318      	lsls	r0, r3, #12
    1680:	d502      	bpl.n	1688 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    1682:	4813      	ldr	r0, [pc, #76]	; (16d0 <_UsageFault+0x80>)
    1684:	f7ff fc82 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1688:	4c0e      	ldr	r4, [pc, #56]	; (16c4 <_UsageFault+0x74>)
    168a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    168c:	0359      	lsls	r1, r3, #13
    168e:	d502      	bpl.n	1696 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    1690:	4810      	ldr	r0, [pc, #64]	; (16d4 <_UsageFault+0x84>)
    1692:	f7ff fc7b 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1696:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1698:	039a      	lsls	r2, r3, #14
    169a:	d502      	bpl.n	16a2 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    169c:	480e      	ldr	r0, [pc, #56]	; (16d8 <_UsageFault+0x88>)
    169e:	f7ff fc75 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    16a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a4:	03db      	lsls	r3, r3, #15
    16a6:	d502      	bpl.n	16ae <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16a8:	480c      	ldr	r0, [pc, #48]	; (16dc <_UsageFault+0x8c>)
    16aa:	f7ff fc6f 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16ae:	4a05      	ldr	r2, [pc, #20]	; (16c4 <_UsageFault+0x74>)
    16b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16b2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16b6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16ba:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16bc:	2000      	movs	r0, #0
    16be:	bd10      	pop	{r4, pc}
    16c0:	00015686 	.word	0x00015686
    16c4:	e000ed00 	.word	0xe000ed00
    16c8:	0001569f 	.word	0x0001569f
    16cc:	000156b3 	.word	0x000156b3
    16d0:	000156ce 	.word	0x000156ce
    16d4:	000156ed 	.word	0x000156ed
    16d8:	00015713 	.word	0x00015713
    16dc:	0001572e 	.word	0x0001572e

000016e0 <_BusFault>:
{
    16e0:	b538      	push	{r3, r4, r5, lr}
    16e2:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16e4:	481d      	ldr	r0, [pc, #116]	; (175c <_BusFault+0x7c>)
{
    16e6:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16e8:	f7ff fc50 	bl	f8c <printk>
	_FaultThreadShow(esf);
    16ec:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f0:	4c1b      	ldr	r4, [pc, #108]	; (1760 <_BusFault+0x80>)
	_FaultThreadShow(esf);
    16f2:	f7ff ff57 	bl	15a4 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16f8:	04d8      	lsls	r0, r3, #19
    16fa:	d504      	bpl.n	1706 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    16fc:	4819      	ldr	r0, [pc, #100]	; (1764 <_BusFault+0x84>)
}
    16fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    1702:	f7ff bc43 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1706:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1708:	0519      	lsls	r1, r3, #20
    170a:	d501      	bpl.n	1710 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    170c:	4816      	ldr	r0, [pc, #88]	; (1768 <_BusFault+0x88>)
    170e:	e7f6      	b.n	16fe <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1710:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1712:	059a      	lsls	r2, r3, #22
    1714:	d514      	bpl.n	1740 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    1716:	4815      	ldr	r0, [pc, #84]	; (176c <_BusFault+0x8c>)
    1718:	f7ff fc38 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    171c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    171e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1720:	041b      	lsls	r3, r3, #16
    1722:	d507      	bpl.n	1734 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1724:	4812      	ldr	r0, [pc, #72]	; (1770 <_BusFault+0x90>)
    1726:	f7ff fc31 	bl	f8c <printk>
			if (fromHardFault) {
    172a:	b11d      	cbz	r5, 1734 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    172c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    172e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1732:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1734:	4b0a      	ldr	r3, [pc, #40]	; (1760 <_BusFault+0x80>)
    1736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1738:	0558      	lsls	r0, r3, #21
    173a:	d50e      	bpl.n	175a <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    173c:	480d      	ldr	r0, [pc, #52]	; (1774 <_BusFault+0x94>)
    173e:	e7de      	b.n	16fe <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1740:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1742:	0559      	lsls	r1, r3, #21
    1744:	d4fa      	bmi.n	173c <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1746:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1748:	05da      	lsls	r2, r3, #23
    174a:	d501      	bpl.n	1750 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    174c:	480a      	ldr	r0, [pc, #40]	; (1778 <_BusFault+0x98>)
    174e:	e7d6      	b.n	16fe <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1750:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1752:	049b      	lsls	r3, r3, #18
    1754:	d501      	bpl.n	175a <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1756:	4809      	ldr	r0, [pc, #36]	; (177c <_BusFault+0x9c>)
    1758:	e7d1      	b.n	16fe <_BusFault+0x1e>
    175a:	bd38      	pop	{r3, r4, r5, pc}
    175c:	0001544c 	.word	0x0001544c
    1760:	e000ed00 	.word	0xe000ed00
    1764:	000155e6 	.word	0x000155e6
    1768:	000155f8 	.word	0x000155f8
    176c:	00015463 	.word	0x00015463
    1770:	00015625 	.word	0x00015625
    1774:	0001547d 	.word	0x0001547d
    1778:	00015499 	.word	0x00015499
    177c:	00015656 	.word	0x00015656

00001780 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    1780:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1782:	4c27      	ldr	r4, [pc, #156]	; (1820 <_Fault+0xa0>)
    1784:	6863      	ldr	r3, [r4, #4]
    1786:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    178a:	1eda      	subs	r2, r3, #3
{
    178c:	4605      	mov	r5, r0
	switch (fault) {
    178e:	2a09      	cmp	r2, #9
    1790:	d83b      	bhi.n	180a <_Fault+0x8a>
    1792:	e8df f002 	tbb	[pc, r2]
    1796:	3405      	.short	0x3405
    1798:	3a3a3036 	.word	0x3a3a3036
    179c:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    17a0:	4820      	ldr	r0, [pc, #128]	; (1824 <_Fault+0xa4>)
    17a2:	f7ff fbf3 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17a8:	079a      	lsls	r2, r3, #30
    17aa:	d503      	bpl.n	17b4 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17ac:	481e      	ldr	r0, [pc, #120]	; (1828 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17ae:	f7ff fbed 	bl	f8c <printk>
    17b2:	e002      	b.n	17ba <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17b6:	005b      	lsls	r3, r3, #1
    17b8:	d401      	bmi.n	17be <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17ba:	2000      	movs	r0, #0
    17bc:	e009      	b.n	17d2 <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17be:	481b      	ldr	r0, [pc, #108]	; (182c <_Fault+0xac>)
    17c0:	f7ff fbe4 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17c4:	4b1a      	ldr	r3, [pc, #104]	; (1830 <_Fault+0xb0>)
    17c6:	781b      	ldrb	r3, [r3, #0]
    17c8:	b143      	cbz	r3, 17dc <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17ca:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17cc:	4628      	mov	r0, r5
    17ce:	f7ff fef7 	bl	15c0 <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17d2:	4629      	mov	r1, r5
}
    17d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17d8:	f000 b912 	b.w	1a00 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17dc:	4b15      	ldr	r3, [pc, #84]	; (1834 <_Fault+0xb4>)
    17de:	781b      	ldrb	r3, [r3, #0]
    17e0:	b123      	cbz	r3, 17ec <_Fault+0x6c>
			_BusFault(esf, 1);
    17e2:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17e4:	4628      	mov	r0, r5
    17e6:	f7ff ff7b 	bl	16e0 <_BusFault>
    17ea:	e7e6      	b.n	17ba <_Fault+0x3a>
		} else if (SCB_UFSR) {
    17ec:	4b12      	ldr	r3, [pc, #72]	; (1838 <_Fault+0xb8>)
    17ee:	881b      	ldrh	r3, [r3, #0]
    17f0:	b29b      	uxth	r3, r3
    17f2:	2b00      	cmp	r3, #0
    17f4:	d0e1      	beq.n	17ba <_Fault+0x3a>
		reason = _UsageFault(esf);
    17f6:	4628      	mov	r0, r5
    17f8:	f7ff ff2a 	bl	1650 <_UsageFault>
    17fc:	e7e9      	b.n	17d2 <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    17fe:	2100      	movs	r1, #0
    1800:	e7e4      	b.n	17cc <_Fault+0x4c>
		_BusFault(esf, 0);
    1802:	2100      	movs	r1, #0
    1804:	e7ee      	b.n	17e4 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1806:	480d      	ldr	r0, [pc, #52]	; (183c <_Fault+0xbc>)
    1808:	e7d1      	b.n	17ae <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    180a:	480d      	ldr	r0, [pc, #52]	; (1840 <_Fault+0xc0>)
    180c:	490d      	ldr	r1, [pc, #52]	; (1844 <_Fault+0xc4>)
    180e:	f1a3 0210 	sub.w	r2, r3, #16
    1812:	2b0f      	cmp	r3, #15
    1814:	bfd8      	it	le
    1816:	4601      	movle	r1, r0
    1818:	480b      	ldr	r0, [pc, #44]	; (1848 <_Fault+0xc8>)
    181a:	f7ff fbb7 	bl	f8c <printk>
    181e:	e7cc      	b.n	17ba <_Fault+0x3a>
    1820:	e000ed00 	.word	0xe000ed00
    1824:	000154e0 	.word	0x000154e0
    1828:	000154f8 	.word	0x000154f8
    182c:	0001551a 	.word	0x0001551a
    1830:	e000ed28 	.word	0xe000ed28
    1834:	e000ed29 	.word	0xe000ed29
    1838:	e000ed2a 	.word	0xe000ed2a
    183c:	0001553a 	.word	0x0001553a
    1840:	000154b2 	.word	0x000154b2
    1844:	000154c7 	.word	0x000154c7
    1848:	00015571 	.word	0x00015571

0000184c <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    184c:	4a02      	ldr	r2, [pc, #8]	; (1858 <_FaultInit+0xc>)
    184e:	6953      	ldr	r3, [r2, #20]
    1850:	f043 0310 	orr.w	r3, r3, #16
    1854:	6153      	str	r3, [r2, #20]
    1856:	4770      	bx	lr
    1858:	e000ed00 	.word	0xe000ed00

0000185c <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    185c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    185e:	2b00      	cmp	r3, #0
    1860:	db08      	blt.n	1874 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1862:	2201      	movs	r2, #1
    1864:	f000 001f 	and.w	r0, r0, #31
    1868:	fa02 f000 	lsl.w	r0, r2, r0
    186c:	095b      	lsrs	r3, r3, #5
    186e:	4a02      	ldr	r2, [pc, #8]	; (1878 <_arch_irq_enable+0x1c>)
    1870:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1874:	4770      	bx	lr
    1876:	bf00      	nop
    1878:	e000e100 	.word	0xe000e100

0000187c <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    187c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    187e:	2b00      	cmp	r3, #0
    1880:	db0d      	blt.n	189e <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1882:	2201      	movs	r2, #1
    1884:	095b      	lsrs	r3, r3, #5
    1886:	f000 001f 	and.w	r0, r0, #31
    188a:	fa02 f000 	lsl.w	r0, r2, r0
    188e:	3320      	adds	r3, #32
    1890:	4a03      	ldr	r2, [pc, #12]	; (18a0 <_arch_irq_disable+0x24>)
    1892:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1896:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    189a:	f3bf 8f6f 	isb	sy
    189e:	4770      	bx	lr
    18a0:	e000e100 	.word	0xe000e100

000018a4 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18a4:	0942      	lsrs	r2, r0, #5
    18a6:	4b05      	ldr	r3, [pc, #20]	; (18bc <_arch_irq_is_enabled+0x18>)
    18a8:	f000 001f 	and.w	r0, r0, #31
    18ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18b0:	2301      	movs	r3, #1
    18b2:	fa03 f000 	lsl.w	r0, r3, r0
}
    18b6:	4010      	ands	r0, r2
    18b8:	4770      	bx	lr
    18ba:	bf00      	nop
    18bc:	e000e100 	.word	0xe000e100

000018c0 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18c0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18c2:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18c4:	bfa8      	it	ge
    18c6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18ca:	f101 0101 	add.w	r1, r1, #1
    18ce:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18d2:	bfad      	iteet	ge
    18d4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d8:	f000 000f 	andlt.w	r0, r0, #15
    18dc:	4b03      	ldrlt	r3, [pc, #12]	; (18ec <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18de:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e0:	bfb6      	itet	lt
    18e2:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e4:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e8:	5419      	strblt	r1, [r3, r0]
    18ea:	4770      	bx	lr
    18ec:	e000ed14 	.word	0xe000ed14

000018f0 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    18f0:	f000 b842 	b.w	1978 <__bus_fault>

000018f4 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    18f4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    18f6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    18f8:	4b04      	ldr	r3, [pc, #16]	; (190c <_arch_isr_direct_pm+0x18>)
    18fa:	69d8      	ldr	r0, [r3, #28]
    18fc:	b118      	cbz	r0, 1906 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    18fe:	2200      	movs	r2, #0
    1900:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    1902:	f012 fab1 	bl	13e68 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1906:	b662      	cpsie	i
    1908:	bd08      	pop	{r3, pc}
    190a:	bf00      	nop
    190c:	20001948 	.word	0x20001948

00001910 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1912:	460c      	mov	r4, r1
    1914:	4616      	mov	r6, r2
    1916:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1918:	2204      	movs	r2, #4
    191a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    191c:	9909      	ldr	r1, [sp, #36]	; 0x24
    191e:	4605      	mov	r5, r0
    1920:	f013 f9e8 	bl	14cf4 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1924:	f1a6 0120 	sub.w	r1, r6, #32
    1928:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    192a:	4a0c      	ldr	r2, [pc, #48]	; (195c <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    192c:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    192e:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    1932:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1934:	f022 0201 	bic.w	r2, r2, #1
    1938:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    193a:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    193c:	662e      	str	r6, [r5, #96]	; 0x60
    193e:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    1940:	9a06      	ldr	r2, [sp, #24]
    1942:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1944:	9a07      	ldr	r2, [sp, #28]
    1946:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1948:	9a08      	ldr	r2, [sp, #32]
    194a:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    194c:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    194e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1952:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1954:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1956:	66ab      	str	r3, [r5, #104]	; 0x68
    1958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    195a:	bf00      	nop
    195c:	00000899 	.word	0x00000899

00001960 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    1960:	4901      	ldr	r1, [pc, #4]	; (1968 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1962:	2210      	movs	r2, #16
	str r2, [r1]
    1964:	600a      	str	r2, [r1, #0]
	bx lr
    1966:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1968:	e000ed10 	.word	0xe000ed10

0000196c <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    196c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    196e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1972:	bf30      	wfi

	bx lr
    1974:	4770      	bx	lr
    1976:	bf00      	nop

00001978 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1978:	4040      	eors	r0, r0
	msr BASEPRI, r0
    197a:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    197e:	f8df c01c 	ldr.w	ip, [pc, #28]	; 199c <__bus_fault+0x24>
	ldr ip, [ip]
    1982:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1986:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    198a:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    198c:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    1990:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1994:	b500      	push	{lr}
	bl _Fault
    1996:	f7ff fef3 	bl	1780 <_Fault>

	pop {pc}
    199a:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    199c:	e000ed04 	.word	0xe000ed04

000019a0 <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    19a0:	2804      	cmp	r0, #4
{
    19a2:	b538      	push	{r3, r4, r5, lr}
    19a4:	4604      	mov	r4, r0
    19a6:	460d      	mov	r5, r1
	switch (reason) {
    19a8:	d013      	beq.n	19d2 <_NanoFatalErrorHandler+0x32>
    19aa:	2805      	cmp	r0, #5
    19ac:	d013      	beq.n	19d6 <_NanoFatalErrorHandler+0x36>
    19ae:	2803      	cmp	r0, #3
    19b0:	d113      	bne.n	19da <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19b2:	480c      	ldr	r0, [pc, #48]	; (19e4 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    19b4:	f7ff faea 	bl	f8c <printk>
    19b8:	f012 ff08 	bl	147cc <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19bc:	69aa      	ldr	r2, [r5, #24]
    19be:	4601      	mov	r1, r0
    19c0:	4809      	ldr	r0, [pc, #36]	; (19e8 <_NanoFatalErrorHandler+0x48>)
    19c2:	f7ff fae3 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19c6:	4629      	mov	r1, r5
    19c8:	4620      	mov	r0, r4
}
    19ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19ce:	f000 b817 	b.w	1a00 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    19d2:	4806      	ldr	r0, [pc, #24]	; (19ec <_NanoFatalErrorHandler+0x4c>)
    19d4:	e7ee      	b.n	19b4 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    19d6:	4806      	ldr	r0, [pc, #24]	; (19f0 <_NanoFatalErrorHandler+0x50>)
    19d8:	e7ec      	b.n	19b4 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19da:	4601      	mov	r1, r0
    19dc:	4805      	ldr	r0, [pc, #20]	; (19f4 <_NanoFatalErrorHandler+0x54>)
    19de:	f7ff fad5 	bl	f8c <printk>
		break;
    19e2:	e7e9      	b.n	19b8 <_NanoFatalErrorHandler+0x18>
    19e4:	0001575a 	.word	0x0001575a
    19e8:	000157d8 	.word	0x000157d8
    19ec:	00015780 	.word	0x00015780
    19f0:	0001579a 	.word	0x0001579a
    19f4:	000157b5 	.word	0x000157b5

000019f8 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    19f8:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    19fa:	6800      	ldr	r0, [r0, #0]
    19fc:	f7ff bfd0 	b.w	19a0 <_NanoFatalErrorHandler>

00001a00 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a00:	2805      	cmp	r0, #5
{
    1a02:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a04:	d00c      	beq.n	1a20 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a06:	f013 f8a3 	bl	14b50 <k_is_in_isr>
    1a0a:	b160      	cbz	r0, 1a26 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a0c:	f013 f8a0 	bl	14b50 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a10:	4b0c      	ldr	r3, [pc, #48]	; (1a44 <_SysFatalErrorHandler+0x44>)
    1a12:	490d      	ldr	r1, [pc, #52]	; (1a48 <_SysFatalErrorHandler+0x48>)
    1a14:	2800      	cmp	r0, #0
    1a16:	bf08      	it	eq
    1a18:	4619      	moveq	r1, r3
    1a1a:	480c      	ldr	r0, [pc, #48]	; (1a4c <_SysFatalErrorHandler+0x4c>)
    1a1c:	f7ff fab6 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a20:	f7ff ffa4 	bl	196c <k_cpu_idle>
    1a24:	e7fc      	b.n	1a20 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a26:	f013 f8a3 	bl	14b70 <_is_thread_essential>
    1a2a:	2800      	cmp	r0, #0
    1a2c:	d1ee      	bne.n	1a0c <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a2e:	4c08      	ldr	r4, [pc, #32]	; (1a50 <_SysFatalErrorHandler+0x50>)
    1a30:	4808      	ldr	r0, [pc, #32]	; (1a54 <_SysFatalErrorHandler+0x54>)
    1a32:	68a1      	ldr	r1, [r4, #8]
    1a34:	f7ff faaa 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a38:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a3e:	f000 b80b 	b.w	1a58 <_impl_k_thread_abort>
    1a42:	bf00      	nop
    1a44:	00015818 	.word	0x00015818
    1a48:	00015814 	.word	0x00015814
    1a4c:	00015829 	.word	0x00015829
    1a50:	20001948 	.word	0x20001948
    1a54:	00015849 	.word	0x00015849

00001a58 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a58:	b538      	push	{r3, r4, r5, lr}
    1a5a:	4605      	mov	r5, r0
	__asm__ volatile(
    1a5c:	f04f 0320 	mov.w	r3, #32
    1a60:	f3ef 8411 	mrs	r4, BASEPRI
    1a64:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a68:	f013 f8da 	bl	14c20 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a6c:	4b0b      	ldr	r3, [pc, #44]	; (1a9c <_impl_k_thread_abort+0x44>)
    1a6e:	689b      	ldr	r3, [r3, #8]
    1a70:	429d      	cmp	r5, r3
    1a72:	d10d      	bne.n	1a90 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a74:	4b0a      	ldr	r3, [pc, #40]	; (1aa0 <_impl_k_thread_abort+0x48>)
    1a76:	685a      	ldr	r2, [r3, #4]
    1a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a7c:	b922      	cbnz	r2, 1a88 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1a7e:	f012 fe57 	bl	14730 <_update_time_slice_before_swap>

	return __swap(key);
    1a82:	4620      	mov	r0, r4
    1a84:	f7ff fd42 	bl	150c <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a88:	685a      	ldr	r2, [r3, #4]
    1a8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a8e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1a90:	4620      	mov	r0, r4
}
    1a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1a96:	f012 bd05 	b.w	144a4 <_reschedule>
    1a9a:	bf00      	nop
    1a9c:	20001948 	.word	0x20001948
    1aa0:	e000ed00 	.word	0xe000ed00

00001aa4 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1aa4:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1aa6:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1aa8:	4a0b      	ldr	r2, [pc, #44]	; (1ad8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1aaa:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1aac:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1aae:	bf1e      	ittt	ne
	movne	r1, #0
    1ab0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1ab2:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ab4:	f012 f9d8 	blne	13e68 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ab8:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1aba:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1abe:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1ac2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ac6:	4905      	ldr	r1, [pc, #20]	; (1adc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ac8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1aca:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1acc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1ace:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1ad2:	f7ff bcfb 	b.w	14cc <_ExcExit>
    1ad6:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ad8:	20001948 	.word	0x20001948
	ldr r1, =_sw_isr_table
    1adc:	000000dc 	.word	0x000000dc

00001ae0 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1ae0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ae2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1ae6:	4806      	ldr	r0, [pc, #24]	; (1b00 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1ae8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1aec:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1aee:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1af2:	2002      	movs	r0, #2
    msr CONTROL, r0
    1af4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1af8:	f3bf 8f6f 	isb	sy

    b _PrepC
    1afc:	f000 b806 	b.w	1b0c <_PrepC>
    ldr r0, =_interrupt_stack
    1b00:	20002e20 	.word	0x20002e20

00001b04 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b04:	bf30      	wfi
    b _SysNmiOnReset
    1b06:	f7ff bffd 	b.w	1b04 <_SysNmiOnReset>
    1b0a:	bf00      	nop

00001b0c <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b0c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b0e:	4b07      	ldr	r3, [pc, #28]	; (1b2c <_PrepC+0x20>)
    1b10:	4a07      	ldr	r2, [pc, #28]	; (1b30 <_PrepC+0x24>)
    1b12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b16:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b1c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b20:	f012 f9d2 	bl	13ec8 <_bss_zero>
	_data_copy();
    1b24:	f012 f9da 	bl	13edc <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b28:	f012 f9fc 	bl	13f24 <_Cstart>
    1b2c:	00000000 	.word	0x00000000
    1b30:	e000ed00 	.word	0xe000ed00

00001b34 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b34:	b508      	push	{r3, lr}
	handler();
    1b36:	f7ff ffe5 	bl	1b04 <_SysNmiOnReset>
	_ExcExit();
}
    1b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b3e:	f7ff bcc5 	b.w	14cc <_ExcExit>
	...

00001b44 <_region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void _region_init(u32_t index, u32_t region_addr,
			 u32_t region_attr)
{
    1b44:	b510      	push	{r4, lr}
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b46:	f021 031f 	bic.w	r3, r1, #31
	ARM_MPU_DEV->rnr = index;
    1b4a:	4c0c      	ldr	r4, [pc, #48]	; (1b7c <_region_init+0x38>)
				| REGION_VALID | index;
    1b4c:	4303      	orrs	r3, r0
    1b4e:	f043 0310 	orr.w	r3, r3, #16
	ARM_MPU_DEV->rnr = index;
    1b52:	60a0      	str	r0, [r4, #8]
{
    1b54:	b086      	sub	sp, #24
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b56:	60e3      	str	r3, [r4, #12]
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b58:	f042 0301 	orr.w	r3, r2, #1
    1b5c:	6123      	str	r3, [r4, #16]
	SYS_LOG_DBG("[%d] 0x%08x 0x%08x", index, region_addr, region_attr);
    1b5e:	4b08      	ldr	r3, [pc, #32]	; (1b80 <_region_init+0x3c>)
    1b60:	9304      	str	r3, [sp, #16]
    1b62:	9300      	str	r3, [sp, #0]
    1b64:	4b07      	ldr	r3, [pc, #28]	; (1b84 <_region_init+0x40>)
    1b66:	9203      	str	r2, [sp, #12]
    1b68:	9102      	str	r1, [sp, #8]
    1b6a:	9001      	str	r0, [sp, #4]
    1b6c:	681c      	ldr	r4, [r3, #0]
    1b6e:	4a06      	ldr	r2, [pc, #24]	; (1b88 <_region_init+0x44>)
    1b70:	4b06      	ldr	r3, [pc, #24]	; (1b8c <_region_init+0x48>)
    1b72:	4907      	ldr	r1, [pc, #28]	; (1b90 <_region_init+0x4c>)
    1b74:	4807      	ldr	r0, [pc, #28]	; (1b94 <_region_init+0x50>)
    1b76:	47a0      	blx	r4
}
    1b78:	b006      	add	sp, #24
    1b7a:	bd10      	pop	{r4, pc}
    1b7c:	e000ed90 	.word	0xe000ed90
    1b80:	00015359 	.word	0x00015359
    1b84:	20003a5c 	.word	0x20003a5c
    1b88:	0001587b 	.word	0x0001587b
    1b8c:	0001586e 	.word	0x0001586e
    1b90:	00015882 	.word	0x00015882
    1b94:	0001588a 	.word	0x0001588a

00001b98 <arm_mpu_init>:
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b9a:	4d0f      	ldr	r5, [pc, #60]	; (1bd8 <arm_mpu_init+0x40>)
    1b9c:	682b      	ldr	r3, [r5, #0]
    1b9e:	2b08      	cmp	r3, #8
    1ba0:	d80c      	bhi.n	1bbc <arm_mpu_init+0x24>
	ARM_MPU_DEV->ctrl = 0;
    1ba2:	4e0e      	ldr	r6, [pc, #56]	; (1bdc <arm_mpu_init+0x44>)
    1ba4:	2400      	movs	r4, #0
    1ba6:	6074      	str	r4, [r6, #4]
			     mpu_config.mpu_regions[r_index].base,
    1ba8:	270c      	movs	r7, #12
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1baa:	682b      	ldr	r3, [r5, #0]
    1bac:	429c      	cmp	r4, r3
    1bae:	d307      	bcc.n	1bc0 <arm_mpu_init+0x28>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1bb0:	2305      	movs	r3, #5
    1bb2:	6073      	str	r3, [r6, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1bb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bb8:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1bbc:	2000      	movs	r0, #0
    1bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			     mpu_config.mpu_regions[r_index].base,
    1bc0:	6869      	ldr	r1, [r5, #4]
    1bc2:	fb07 f304 	mul.w	r3, r7, r4
    1bc6:	18ca      	adds	r2, r1, r3
		_region_init(r_index,
    1bc8:	4620      	mov	r0, r4
    1bca:	6892      	ldr	r2, [r2, #8]
    1bcc:	58c9      	ldr	r1, [r1, r3]
    1bce:	f7ff ffb9 	bl	1b44 <_region_init>
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1bd2:	3401      	adds	r4, #1
    1bd4:	e7e9      	b.n	1baa <arm_mpu_init+0x12>
    1bd6:	bf00      	nop
    1bd8:	20003a34 	.word	0x20003a34
    1bdc:	e000ed90 	.word	0xe000ed90

00001be0 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1be0:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1be2:	4603      	mov	r3, r0
    1be4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1be8:	b90a      	cbnz	r2, 1bee <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1bea:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1bec:	4770      	bx	lr
		*d = *s;
    1bee:	f803 2b01 	strb.w	r2, [r3], #1
    1bf2:	e7f7      	b.n	1be4 <strcpy+0x4>

00001bf4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1bf4:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1bf6:	4603      	mov	r3, r0
    1bf8:	1a98      	subs	r0, r3, r2
    1bfa:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bfe:	2900      	cmp	r1, #0
    1c00:	d1fa      	bne.n	1bf8 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1c02:	4770      	bx	lr

00001c04 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1c04:	3801      	subs	r0, #1
    1c06:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1c08:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1c0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1c10:	4293      	cmp	r3, r2
    1c12:	d102      	bne.n	1c1a <strcmp+0x16>
    1c14:	2b00      	cmp	r3, #0
    1c16:	d1f7      	bne.n	1c08 <strcmp+0x4>
    1c18:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1c1a:	1a98      	subs	r0, r3, r2
    1c1c:	4770      	bx	lr

00001c1e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1c1e:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1c20:	b182      	cbz	r2, 1c44 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1c22:	3a01      	subs	r2, #1
    1c24:	460c      	mov	r4, r1
    1c26:	4603      	mov	r3, r0
    1c28:	d103      	bne.n	1c32 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1c2a:	781a      	ldrb	r2, [r3, #0]
    1c2c:	7820      	ldrb	r0, [r4, #0]
    1c2e:	1a10      	subs	r0, r2, r0
    1c30:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1c32:	781e      	ldrb	r6, [r3, #0]
    1c34:	7825      	ldrb	r5, [r4, #0]
    1c36:	42ae      	cmp	r6, r5
    1c38:	f100 0001 	add.w	r0, r0, #1
    1c3c:	f101 0101 	add.w	r1, r1, #1
    1c40:	d0ef      	beq.n	1c22 <memcmp+0x4>
    1c42:	e7f2      	b.n	1c2a <memcmp+0xc>
		return 0;
    1c44:	4610      	mov	r0, r2
}
    1c46:	bd70      	pop	{r4, r5, r6, pc}

00001c48 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c48:	ea81 0300 	eor.w	r3, r1, r0
    1c4c:	f013 0f03 	tst.w	r3, #3
{
    1c50:	b570      	push	{r4, r5, r6, lr}
    1c52:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c54:	d00b      	beq.n	1c6e <memcpy+0x26>
    1c56:	3b01      	subs	r3, #1
    1c58:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c5a:	4291      	cmp	r1, r2
    1c5c:	d11b      	bne.n	1c96 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c5e:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c60:	2a00      	cmp	r2, #0
    1c62:	d0fc      	beq.n	1c5e <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c64:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c68:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c6c:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c6e:	079c      	lsls	r4, r3, #30
    1c70:	d1f6      	bne.n	1c60 <memcpy+0x18>
    1c72:	1f1e      	subs	r6, r3, #4
    1c74:	460d      	mov	r5, r1
    1c76:	1b54      	subs	r4, r2, r5
    1c78:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c7a:	2c03      	cmp	r4, #3
    1c7c:	d806      	bhi.n	1c8c <memcpy+0x44>
    1c7e:	f022 0403 	bic.w	r4, r2, #3
    1c82:	4421      	add	r1, r4
    1c84:	4423      	add	r3, r4
    1c86:	f002 0203 	and.w	r2, r2, #3
    1c8a:	e7e4      	b.n	1c56 <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c8c:	f855 4b04 	ldr.w	r4, [r5], #4
    1c90:	f846 4f04 	str.w	r4, [r6, #4]!
    1c94:	e7ef      	b.n	1c76 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c96:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c9e:	e7dc      	b.n	1c5a <memcpy+0x12>

00001ca0 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1ca0:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1ca2:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1ca4:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1ca6:	079c      	lsls	r4, r3, #30
    1ca8:	d111      	bne.n	1cce <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1caa:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1cae:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1cb2:	461e      	mov	r6, r3
    1cb4:	1b95      	subs	r5, r2, r6
    1cb6:	441d      	add	r5, r3
    1cb8:	2d03      	cmp	r5, #3
    1cba:	d80e      	bhi.n	1cda <memset+0x3a>
    1cbc:	f022 0403 	bic.w	r4, r2, #3
    1cc0:	4423      	add	r3, r4
    1cc2:	f002 0203 	and.w	r2, r2, #3
    1cc6:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1cc8:	4293      	cmp	r3, r2
    1cca:	d109      	bne.n	1ce0 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1ccc:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1cce:	2a00      	cmp	r2, #0
    1cd0:	d0fc      	beq.n	1ccc <memset+0x2c>
		*(d_byte++) = c_byte;
    1cd2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1cd6:	3a01      	subs	r2, #1
    1cd8:	e7e5      	b.n	1ca6 <memset+0x6>
		*(d_word++) = c_word;
    1cda:	f846 4b04 	str.w	r4, [r6], #4
    1cde:	e7e9      	b.n	1cb4 <memset+0x14>
		*(d_byte++) = c_byte;
    1ce0:	f803 1b01 	strb.w	r1, [r3], #1
    1ce4:	e7f0      	b.n	1cc8 <memset+0x28>
	...

00001ce8 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1ce8:	b570      	push	{r4, r5, r6, lr}
    1cea:	f04f 0320 	mov.w	r3, #32
    1cee:	f3ef 8511 	mrs	r5, BASEPRI
    1cf2:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1cf6:	4c14      	ldr	r4, [pc, #80]	; (1d48 <bt_hex+0x60>)
    1cf8:	4e14      	ldr	r6, [pc, #80]	; (1d4c <bt_hex+0x64>)
    1cfa:	7823      	ldrb	r3, [r4, #0]
    1cfc:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1d00:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1d02:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1d06:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1d08:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1d0a:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1d0e:	2940      	cmp	r1, #64	; 0x40
    1d10:	bf28      	it	cs
    1d12:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1d14:	4d0e      	ldr	r5, [pc, #56]	; (1d50 <bt_hex+0x68>)
    1d16:	3801      	subs	r0, #1
    1d18:	4613      	mov	r3, r2
    1d1a:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1d1e:	42b3      	cmp	r3, r6
    1d20:	d104      	bne.n	1d2c <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1d22:	2300      	movs	r3, #0
    1d24:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1d28:	4610      	mov	r0, r2
    1d2a:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1d2c:	7844      	ldrb	r4, [r0, #1]
    1d2e:	0924      	lsrs	r4, r4, #4
    1d30:	3302      	adds	r3, #2
    1d32:	5d2c      	ldrb	r4, [r5, r4]
    1d34:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1d38:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1d3c:	f004 040f 	and.w	r4, r4, #15
    1d40:	5d2c      	ldrb	r4, [r5, r4]
    1d42:	f803 4c01 	strb.w	r4, [r3, #-1]
    1d46:	e7ea      	b.n	1d1e <bt_hex+0x36>
    1d48:	20000074 	.word	0x20000074
    1d4c:	20000075 	.word	0x20000075
    1d50:	000158cb 	.word	0x000158cb

00001d54 <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1d54:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d56:	4a0f      	ldr	r2, [pc, #60]	; (1d94 <bt_addr_str+0x40>)
    1d58:	4c0f      	ldr	r4, [pc, #60]	; (1d98 <bt_addr_str+0x44>)
    1d5a:	7813      	ldrb	r3, [r2, #0]
    1d5c:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1d60:	3301      	adds	r3, #1
{
    1d62:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1d64:	f003 0301 	and.w	r3, r3, #1
    1d68:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1d6a:	7802      	ldrb	r2, [r0, #0]
    1d6c:	7943      	ldrb	r3, [r0, #5]
    1d6e:	9204      	str	r2, [sp, #16]
    1d70:	7842      	ldrb	r2, [r0, #1]
    1d72:	9203      	str	r2, [sp, #12]
    1d74:	7882      	ldrb	r2, [r0, #2]
    1d76:	9202      	str	r2, [sp, #8]
    1d78:	78c2      	ldrb	r2, [r0, #3]
    1d7a:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1d7c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1d80:	7902      	ldrb	r2, [r0, #4]
    1d82:	9200      	str	r2, [sp, #0]
    1d84:	2112      	movs	r1, #18
    1d86:	4a05      	ldr	r2, [pc, #20]	; (1d9c <bt_addr_str+0x48>)
    1d88:	4620      	mov	r0, r4
    1d8a:	f7ff f90d 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1d8e:	4620      	mov	r0, r4
    1d90:	b006      	add	sp, #24
    1d92:	bd10      	pop	{r4, pc}
    1d94:	20000072 	.word	0x20000072
    1d98:	20000018 	.word	0x20000018
    1d9c:	000158ad 	.word	0x000158ad

00001da0 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1da0:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1da2:	4a1d      	ldr	r2, [pc, #116]	; (1e18 <bt_addr_le_str+0x78>)
    1da4:	491d      	ldr	r1, [pc, #116]	; (1e1c <bt_addr_le_str+0x7c>)
    1da6:	7813      	ldrb	r3, [r2, #0]
    1da8:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1dac:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1dae:	f003 0301 	and.w	r3, r3, #1
    1db2:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1db4:	7803      	ldrb	r3, [r0, #0]
{
    1db6:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1db8:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1dbc:	4604      	mov	r4, r0
	str = bufs[cur++];
    1dbe:	440e      	add	r6, r1
    1dc0:	ad07      	add	r5, sp, #28
    1dc2:	2b03      	cmp	r3, #3
    1dc4:	d821      	bhi.n	1e0a <bt_addr_le_str+0x6a>
    1dc6:	e8df f003 	tbb	[pc, r3]
    1dca:	1a02      	.short	0x1a02
    1dcc:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1dce:	4914      	ldr	r1, [pc, #80]	; (1e20 <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1dd0:	4628      	mov	r0, r5
    1dd2:	f7ff ff05 	bl	1be0 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1dd6:	7862      	ldrb	r2, [r4, #1]
    1dd8:	9204      	str	r2, [sp, #16]
    1dda:	78a2      	ldrb	r2, [r4, #2]
    1ddc:	9203      	str	r2, [sp, #12]
    1dde:	78e2      	ldrb	r2, [r4, #3]
    1de0:	9202      	str	r2, [sp, #8]
    1de2:	7922      	ldrb	r2, [r4, #4]
    1de4:	9201      	str	r2, [sp, #4]
    1de6:	7962      	ldrb	r2, [r4, #5]
    1de8:	9200      	str	r2, [sp, #0]
    1dea:	79a3      	ldrb	r3, [r4, #6]
    1dec:	9505      	str	r5, [sp, #20]
    1dee:	4a0d      	ldr	r2, [pc, #52]	; (1e24 <bt_addr_le_str+0x84>)
    1df0:	211b      	movs	r1, #27
    1df2:	4630      	mov	r0, r6
    1df4:	f7ff f8d8 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1df8:	4630      	mov	r0, r6
    1dfa:	b00a      	add	sp, #40	; 0x28
    1dfc:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1dfe:	490a      	ldr	r1, [pc, #40]	; (1e28 <bt_addr_le_str+0x88>)
    1e00:	e7e6      	b.n	1dd0 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1e02:	490a      	ldr	r1, [pc, #40]	; (1e2c <bt_addr_le_str+0x8c>)
    1e04:	e7e4      	b.n	1dd0 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1e06:	490a      	ldr	r1, [pc, #40]	; (1e30 <bt_addr_le_str+0x90>)
    1e08:	e7e2      	b.n	1dd0 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1e0a:	4a0a      	ldr	r2, [pc, #40]	; (1e34 <bt_addr_le_str+0x94>)
    1e0c:	210a      	movs	r1, #10
    1e0e:	4628      	mov	r0, r5
    1e10:	f7ff f8ca 	bl	fa8 <snprintk>
    1e14:	e7df      	b.n	1dd6 <bt_addr_le_str+0x36>
    1e16:	bf00      	nop
    1e18:	20000073 	.word	0x20000073
    1e1c:	2000003c 	.word	0x2000003c
    1e20:	000152c5 	.word	0x000152c5
    1e24:	000152ee 	.word	0x000152ee
    1e28:	000152cc 	.word	0x000152cc
    1e2c:	000152d3 	.word	0x000152d3
    1e30:	000152dd 	.word	0x000152dd
    1e34:	000152e7 	.word	0x000152e7

00001e38 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1e38:	b530      	push	{r4, r5, lr}
    1e3a:	b085      	sub	sp, #20
    1e3c:	4604      	mov	r4, r0
    1e3e:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1e40:	4668      	mov	r0, sp
    1e42:	2203      	movs	r2, #3
    1e44:	f7ff ff00 	bl	1c48 <memcpy>
	memset(res + 3, 0, 13);
    1e48:	220d      	movs	r2, #13
    1e4a:	2100      	movs	r1, #0
    1e4c:	f10d 0003 	add.w	r0, sp, #3
    1e50:	f7ff ff26 	bl	1ca0 <memset>

	err = bt_encrypt_le(irk, res, res);
    1e54:	4620      	mov	r0, r4
    1e56:	466a      	mov	r2, sp
    1e58:	4669      	mov	r1, sp
    1e5a:	f006 fc57 	bl	870c <bt_encrypt_le>
	if (err) {
    1e5e:	4604      	mov	r4, r0
    1e60:	b920      	cbnz	r0, 1e6c <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1e62:	2203      	movs	r2, #3
    1e64:	4669      	mov	r1, sp
    1e66:	4628      	mov	r0, r5
    1e68:	f7ff feee 	bl	1c48 <memcpy>

	return 0;
}
    1e6c:	4620      	mov	r0, r4
    1e6e:	b005      	add	sp, #20
    1e70:	bd30      	pop	{r4, r5, pc}

00001e72 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1e72:	b513      	push	{r0, r1, r4, lr}
    1e74:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1e76:	aa01      	add	r2, sp, #4
    1e78:	3103      	adds	r1, #3
    1e7a:	f7ff ffdd 	bl	1e38 <ah>
	if (err) {
    1e7e:	b948      	cbnz	r0, 1e94 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1e80:	2203      	movs	r2, #3
    1e82:	a901      	add	r1, sp, #4
    1e84:	4620      	mov	r0, r4
    1e86:	f7ff feca 	bl	1c1e <memcmp>
    1e8a:	fab0 f080 	clz	r0, r0
    1e8e:	0940      	lsrs	r0, r0, #5
}
    1e90:	b002      	add	sp, #8
    1e92:	bd10      	pop	{r4, pc}
		return false;
    1e94:	2000      	movs	r0, #0
    1e96:	e7fb      	b.n	1e90 <bt_rpa_irk_matches+0x1e>

00001e98 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1e98:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1e9a:	1ccd      	adds	r5, r1, #3
{
    1e9c:	4606      	mov	r6, r0
    1e9e:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1ea0:	4628      	mov	r0, r5
    1ea2:	2103      	movs	r1, #3
    1ea4:	f006 fc16 	bl	86d4 <bt_rand>
	if (err) {
    1ea8:	b960      	cbnz	r0, 1ec4 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1eaa:	7963      	ldrb	r3, [r4, #5]
    1eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1eb4:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1eb6:	4622      	mov	r2, r4
    1eb8:	4629      	mov	r1, r5
    1eba:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1ec0:	f7ff bfba 	b.w	1e38 <ah>
}
    1ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

00001ec8 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1ec8:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1eca:	7802      	ldrb	r2, [r0, #0]
    1ecc:	2a01      	cmp	r2, #1
{
    1ece:	4604      	mov	r4, r0
    1ed0:	460b      	mov	r3, r1
	switch (src->type) {
    1ed2:	d017      	beq.n	1f04 <uuid_to_uuid128+0x3c>
    1ed4:	d303      	bcc.n	1ede <uuid_to_uuid128+0x16>
    1ed6:	2a02      	cmp	r2, #2
    1ed8:	d02c      	beq.n	1f34 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1eda:	bcf0      	pop	{r4, r5, r6, r7}
    1edc:	4770      	bx	lr
		*dst = uuid128_base;
    1ede:	4a18      	ldr	r2, [pc, #96]	; (1f40 <uuid_to_uuid128+0x78>)
    1ee0:	460d      	mov	r5, r1
    1ee2:	f102 0710 	add.w	r7, r2, #16
    1ee6:	6810      	ldr	r0, [r2, #0]
    1ee8:	6851      	ldr	r1, [r2, #4]
    1eea:	462e      	mov	r6, r5
    1eec:	c603      	stmia	r6!, {r0, r1}
    1eee:	3208      	adds	r2, #8
    1ef0:	42ba      	cmp	r2, r7
    1ef2:	4635      	mov	r5, r6
    1ef4:	d1f7      	bne.n	1ee6 <uuid_to_uuid128+0x1e>
    1ef6:	7812      	ldrb	r2, [r2, #0]
    1ef8:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1efa:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1efc:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1efe:	0a12      	lsrs	r2, r2, #8
    1f00:	739a      	strb	r2, [r3, #14]
    1f02:	e7ea      	b.n	1eda <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1f04:	4a0e      	ldr	r2, [pc, #56]	; (1f40 <uuid_to_uuid128+0x78>)
    1f06:	460d      	mov	r5, r1
    1f08:	f102 0710 	add.w	r7, r2, #16
    1f0c:	6810      	ldr	r0, [r2, #0]
    1f0e:	6851      	ldr	r1, [r2, #4]
    1f10:	462e      	mov	r6, r5
    1f12:	c603      	stmia	r6!, {r0, r1}
    1f14:	3208      	adds	r2, #8
    1f16:	42ba      	cmp	r2, r7
    1f18:	4635      	mov	r5, r6
    1f1a:	d1f7      	bne.n	1f0c <uuid_to_uuid128+0x44>
    1f1c:	7812      	ldrb	r2, [r2, #0]
    1f1e:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1f20:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1f22:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1f24:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1f28:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1f2a:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1f2c:	0a12      	lsrs	r2, r2, #8
    1f2e:	7399      	strb	r1, [r3, #14]
    1f30:	741a      	strb	r2, [r3, #16]
    1f32:	e7d2      	b.n	1eda <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1f34:	4601      	mov	r1, r0
    1f36:	2211      	movs	r2, #17
    1f38:	4618      	mov	r0, r3
}
    1f3a:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1f3c:	f7ff be84 	b.w	1c48 <memcpy>
    1f40:	000158dc 	.word	0x000158dc

00001f44 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1f44:	b510      	push	{r4, lr}
    1f46:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1f48:	7801      	ldrb	r1, [r0, #0]
    1f4a:	7822      	ldrb	r2, [r4, #0]
    1f4c:	428a      	cmp	r2, r1
{
    1f4e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1f50:	d00e      	beq.n	1f70 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1f52:	4669      	mov	r1, sp
    1f54:	f7ff ffb8 	bl	1ec8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1f58:	a905      	add	r1, sp, #20
    1f5a:	4620      	mov	r0, r4
    1f5c:	f7ff ffb4 	bl	1ec8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1f60:	2210      	movs	r2, #16
    1f62:	f10d 0115 	add.w	r1, sp, #21
    1f66:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f6a:	f7ff fe58 	bl	1c1e <memcmp>
    1f6e:	e00a      	b.n	1f86 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1f70:	2a01      	cmp	r2, #1
    1f72:	d00a      	beq.n	1f8a <bt_uuid_cmp+0x46>
    1f74:	d304      	bcc.n	1f80 <bt_uuid_cmp+0x3c>
    1f76:	2a02      	cmp	r2, #2
    1f78:	d00a      	beq.n	1f90 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1f7a:	f06f 0015 	mvn.w	r0, #21
    1f7e:	e002      	b.n	1f86 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1f80:	8840      	ldrh	r0, [r0, #2]
    1f82:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f84:	1ac0      	subs	r0, r0, r3
}
    1f86:	b00a      	add	sp, #40	; 0x28
    1f88:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f8a:	6840      	ldr	r0, [r0, #4]
    1f8c:	6863      	ldr	r3, [r4, #4]
    1f8e:	e7f9      	b.n	1f84 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f90:	2210      	movs	r2, #16
    1f92:	1c61      	adds	r1, r4, #1
    1f94:	3001      	adds	r0, #1
    1f96:	e7e8      	b.n	1f6a <bt_uuid_cmp+0x26>

00001f98 <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    1f98:	4770      	bx	lr
	...

00001f9c <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    1f9c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    1f9e:	4d0b      	ldr	r5, [pc, #44]	; (1fcc <ver_str+0x30>)
{
    1fa0:	4606      	mov	r6, r0
	const char * const str[] = {
    1fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    1fa4:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    1fa6:	466c      	mov	r4, sp
    1fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1fae:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    1fb2:	2e09      	cmp	r6, #9
	const char * const str[] = {
    1fb4:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    1fb8:	bf9b      	ittet	ls
    1fba:	ab0a      	addls	r3, sp, #40	; 0x28
    1fbc:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    1fc0:	4803      	ldrhi	r0, [pc, #12]	; (1fd0 <ver_str+0x34>)
		return str[ver];
    1fc2:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    1fc6:	b00a      	add	sp, #40	; 0x28
    1fc8:	bd70      	pop	{r4, r5, r6, pc}
    1fca:	bf00      	nop
    1fcc:	0001527c 	.word	0x0001527c
    1fd0:	00016bd4 	.word	0x00016bd4

00001fd4 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1fd4:	2207      	movs	r2, #7
    1fd6:	f7ff be37 	b.w	1c48 <memcpy>

00001fda <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1fda:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1fdc:	f3bf 8f5b 	dmb	ish
    1fe0:	e850 3f00 	ldrex	r3, [r0]
    1fe4:	ea43 0201 	orr.w	r2, r3, r1
    1fe8:	e840 2e00 	strex	lr, r2, [r0]
    1fec:	f1be 0f00 	cmp.w	lr, #0
    1ff0:	d1f6      	bne.n	1fe0 <atomic_or+0x6>
    1ff2:	f3bf 8f5b 	dmb	ish
    1ff6:	4618      	mov	r0, r3
    1ff8:	f85d fb04 	ldr.w	pc, [sp], #4

00001ffc <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1ffc:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1ffe:	f3bf 8f5b 	dmb	ish
    2002:	e850 3f00 	ldrex	r3, [r0]
    2006:	ea03 0201 	and.w	r2, r3, r1
    200a:	e840 2e00 	strex	lr, r2, [r0]
    200e:	f1be 0f00 	cmp.w	lr, #0
    2012:	d1f6      	bne.n	2002 <atomic_and+0x6>
    2014:	f3bf 8f5b 	dmb	ish
    2018:	4618      	mov	r0, r3
    201a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00002020 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    2020:	78c3      	ldrb	r3, [r0, #3]
    2022:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    2024:	f241 3288 	movw	r2, #5000	; 0x1388
    2028:	f100 0170 	add.w	r1, r0, #112	; 0x70
    202c:	bf08      	it	eq
    202e:	2200      	moveq	r2, #0
    2030:	4801      	ldr	r0, [pc, #4]	; (2038 <update_conn_param+0x18>)
    2032:	f012 bf35 	b.w	14ea0 <k_delayed_work_submit_to_queue>
    2036:	bf00      	nop
    2038:	20001988 	.word	0x20001988

0000203c <hci_cmd_done>:
{
    203c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    2040:	4d30      	ldr	r5, [pc, #192]	; (2104 <hci_cmd_done+0xc8>)
    2042:	4f31      	ldr	r7, [pc, #196]	; (2108 <hci_cmd_done+0xcc>)
    2044:	682c      	ldr	r4, [r5, #0]
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2046:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 212c <hci_cmd_done+0xf0>
{
    204a:	b086      	sub	sp, #24
    204c:	4616      	mov	r6, r2
    204e:	4689      	mov	r9, r1
    2050:	4680      	mov	r8, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2052:	f012 fbbb 	bl	147cc <_impl_k_current_get>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    2056:	4b2d      	ldr	r3, [pc, #180]	; (210c <hci_cmd_done+0xd0>)
    2058:	9001      	str	r0, [sp, #4]
    205a:	4a2d      	ldr	r2, [pc, #180]	; (2110 <hci_cmd_done+0xd4>)
    205c:	492d      	ldr	r1, [pc, #180]	; (2114 <hci_cmd_done+0xd8>)
    205e:	482e      	ldr	r0, [pc, #184]	; (2118 <hci_cmd_done+0xdc>)
    2060:	9705      	str	r7, [sp, #20]
    2062:	9604      	str	r6, [sp, #16]
    2064:	f8cd 900c 	str.w	r9, [sp, #12]
    2068:	f8cd 8008 	str.w	r8, [sp, #8]
    206c:	9700      	str	r7, [sp, #0]
    206e:	47a0      	blx	r4
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2070:	79b0      	ldrb	r0, [r6, #6]
    2072:	f011 fa6d 	bl	13550 <net_buf_pool_get>
    2076:	4582      	cmp	sl, r0
    2078:	d013      	beq.n	20a2 <hci_cmd_done+0x66>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    207a:	79b4      	ldrb	r4, [r6, #6]
    207c:	682d      	ldr	r5, [r5, #0]
    207e:	4620      	mov	r0, r4
    2080:	f011 fa66 	bl	13550 <net_buf_pool_get>
    2084:	9705      	str	r7, [sp, #20]
    2086:	9003      	str	r0, [sp, #12]
    2088:	f8cd a010 	str.w	sl, [sp, #16]
    208c:	9402      	str	r4, [sp, #8]
    208e:	e88d 0180 	stmia.w	sp, {r7, r8}
    2092:	4b1e      	ldr	r3, [pc, #120]	; (210c <hci_cmd_done+0xd0>)
    2094:	4a21      	ldr	r2, [pc, #132]	; (211c <hci_cmd_done+0xe0>)
    2096:	491f      	ldr	r1, [pc, #124]	; (2114 <hci_cmd_done+0xd8>)
    2098:	4821      	ldr	r0, [pc, #132]	; (2120 <hci_cmd_done+0xe4>)
    209a:	47a8      	blx	r5
}
    209c:	b006      	add	sp, #24
    209e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (cmd(buf)->opcode != opcode) {
    20a2:	4630      	mov	r0, r6
    20a4:	f011 fa5a 	bl	1355c <net_buf_id>
    20a8:	4c1e      	ldr	r4, [pc, #120]	; (2124 <hci_cmd_done+0xe8>)
    20aa:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    20ae:	8843      	ldrh	r3, [r0, #2]
    20b0:	4543      	cmp	r3, r8
    20b2:	d00f      	beq.n	20d4 <hci_cmd_done+0x98>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    20b4:	4630      	mov	r0, r6
    20b6:	682d      	ldr	r5, [r5, #0]
    20b8:	f011 fa50 	bl	1355c <net_buf_id>
    20bc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    20c0:	9703      	str	r7, [sp, #12]
    20c2:	8843      	ldrh	r3, [r0, #2]
    20c4:	9302      	str	r3, [sp, #8]
    20c6:	e88d 0180 	stmia.w	sp, {r7, r8}
    20ca:	4b10      	ldr	r3, [pc, #64]	; (210c <hci_cmd_done+0xd0>)
    20cc:	4a13      	ldr	r2, [pc, #76]	; (211c <hci_cmd_done+0xe0>)
    20ce:	4911      	ldr	r1, [pc, #68]	; (2114 <hci_cmd_done+0xd8>)
    20d0:	4815      	ldr	r0, [pc, #84]	; (2128 <hci_cmd_done+0xec>)
    20d2:	47a8      	blx	r5
	if (cmd(buf)->sync) {
    20d4:	4630      	mov	r0, r6
    20d6:	f011 fa41 	bl	1355c <net_buf_id>
    20da:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    20de:	6843      	ldr	r3, [r0, #4]
    20e0:	2b00      	cmp	r3, #0
    20e2:	d0db      	beq.n	209c <hci_cmd_done+0x60>
		cmd(buf)->status = status;
    20e4:	4630      	mov	r0, r6
    20e6:	f011 fa39 	bl	1355c <net_buf_id>
    20ea:	f804 9030 	strb.w	r9, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    20ee:	4630      	mov	r0, r6
    20f0:	f011 fa34 	bl	1355c <net_buf_id>
    20f4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    20f8:	6840      	ldr	r0, [r0, #4]
}
    20fa:	b006      	add	sp, #24
    20fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2100:	f012 bb73 	b.w	147ea <_impl_k_sem_give>
    2104:	20003a5c 	.word	0x20003a5c
    2108:	00015359 	.word	0x00015359
    210c:	00015a3d 	.word	0x00015a3d
    2110:	0001587b 	.word	0x0001587b
    2114:	0001679c 	.word	0x0001679c
    2118:	0001679f 	.word	0x0001679f
    211c:	000167d7 	.word	0x000167d7
    2120:	000167de 	.word	0x000167de
    2124:	2000027c 	.word	0x2000027c
    2128:	00016823 	.word	0x00016823
    212c:	20003f6c 	.word	0x20003f6c

00002130 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2130:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2132:	f3bf 8f5b 	dmb	ish
    2136:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    213a:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    213e:	f001 011f 	and.w	r1, r1, #31
    2142:	4108      	asrs	r0, r1
}
    2144:	f000 0001 	and.w	r0, r0, #1
    2148:	4770      	bx	lr
	...

0000214c <bt_hci_cmd_create>:
{
    214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);
    2150:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 2204 <bt_hci_cmd_create+0xb8>
    2154:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 2208 <bt_hci_cmd_create+0xbc>
    2158:	f8db 4000 	ldr.w	r4, [fp]
    215c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 220c <bt_hci_cmd_create+0xc0>
    2160:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 2210 <bt_hci_cmd_create+0xc4>
    2164:	4d22      	ldr	r5, [pc, #136]	; (21f0 <bt_hci_cmd_create+0xa4>)
{
    2166:	b087      	sub	sp, #28
    2168:	4606      	mov	r6, r0
    216a:	460f      	mov	r7, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    216c:	f012 fb2e 	bl	147cc <_impl_k_current_get>
	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);
    2170:	4653      	mov	r3, sl
    2172:	464a      	mov	r2, r9
    2174:	9504      	str	r5, [sp, #16]
    2176:	9001      	str	r0, [sp, #4]
    2178:	9500      	str	r5, [sp, #0]
    217a:	4641      	mov	r1, r8
    217c:	9703      	str	r7, [sp, #12]
    217e:	9602      	str	r6, [sp, #8]
    2180:	481c      	ldr	r0, [pc, #112]	; (21f4 <bt_hci_cmd_create+0xa8>)
    2182:	47a0      	blx	r4
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2188:	481b      	ldr	r0, [pc, #108]	; (21f8 <bt_hci_cmd_create+0xac>)
    218a:	f011 fa75 	bl	13678 <net_buf_alloc_fixed>
	BT_DBG("buf %p", buf);
    218e:	f8db b000 	ldr.w	fp, [fp]
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2192:	4604      	mov	r4, r0
    2194:	f012 fb1a 	bl	147cc <_impl_k_current_get>
	BT_DBG("buf %p", buf);
    2198:	464a      	mov	r2, r9
    219a:	4653      	mov	r3, sl
    219c:	9503      	str	r5, [sp, #12]
    219e:	9001      	str	r0, [sp, #4]
    21a0:	9500      	str	r5, [sp, #0]
    21a2:	4641      	mov	r1, r8
    21a4:	9402      	str	r4, [sp, #8]
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    21a6:	f104 0808 	add.w	r8, r4, #8
	BT_DBG("buf %p", buf);
    21aa:	4814      	ldr	r0, [pc, #80]	; (21fc <bt_hci_cmd_create+0xb0>)
	cmd(buf)->opcode = opcode;
    21ac:	4d14      	ldr	r5, [pc, #80]	; (2200 <bt_hci_cmd_create+0xb4>)
	BT_DBG("buf %p", buf);
    21ae:	47d8      	blx	fp
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    21b0:	f04f 0900 	mov.w	r9, #0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    21b4:	2100      	movs	r1, #0
    21b6:	4640      	mov	r0, r8
    21b8:	f011 fa7d 	bl	136b6 <net_buf_simple_reserve>
    21bc:	f884 9014 	strb.w	r9, [r4, #20]
	cmd(buf)->opcode = opcode;
    21c0:	4620      	mov	r0, r4
    21c2:	f011 f9cb 	bl	1355c <net_buf_id>
    21c6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    21ca:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    21cc:	4620      	mov	r0, r4
    21ce:	f011 f9c5 	bl	1355c <net_buf_id>
    21d2:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    21d6:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    21d8:	f8c0 9004 	str.w	r9, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    21dc:	4640      	mov	r0, r8
    21de:	f011 faad 	bl	1373c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    21e2:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    21e4:	7087      	strb	r7, [r0, #2]
}
    21e6:	4620      	mov	r0, r4
    21e8:	b007      	add	sp, #28
    21ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21ee:	bf00      	nop
    21f0:	00015359 	.word	0x00015359
    21f4:	00015d57 	.word	0x00015d57
    21f8:	20003f6c 	.word	0x20003f6c
    21fc:	00015d87 	.word	0x00015d87
    2200:	2000027c 	.word	0x2000027c
    2204:	20003a5c 	.word	0x20003a5c
    2208:	000158ed 	.word	0x000158ed
    220c:	0001587b 	.word	0x0001587b
    2210:	0001679c 	.word	0x0001679c

00002214 <bt_hci_cmd_send_sync>:
{
    2214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2218:	4681      	mov	r9, r0
    221a:	b08c      	sub	sp, #48	; 0x30
    221c:	4615      	mov	r5, r2
	if (!buf) {
    221e:	460c      	mov	r4, r1
    2220:	b921      	cbnz	r1, 222c <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    2222:	f7ff ff93 	bl	214c <bt_hci_cmd_create>
		if (!buf) {
    2226:	4604      	mov	r4, r0
    2228:	2800      	cmp	r0, #0
    222a:	d059      	beq.n	22e0 <bt_hci_cmd_send_sync+0xcc>
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    222c:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 2308 <bt_hci_cmd_send_sync+0xf4>
    2230:	4e2d      	ldr	r6, [pc, #180]	; (22e8 <bt_hci_cmd_send_sync+0xd4>)
    2232:	f8da 7000 	ldr.w	r7, [sl]
    2236:	f012 fac9 	bl	147cc <_impl_k_current_get>
    223a:	9605      	str	r6, [sp, #20]
    223c:	89a3      	ldrh	r3, [r4, #12]
    223e:	9304      	str	r3, [sp, #16]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2240:	f10d 0818 	add.w	r8, sp, #24
    2244:	4b29      	ldr	r3, [pc, #164]	; (22ec <bt_hci_cmd_send_sync+0xd8>)
    2246:	9001      	str	r0, [sp, #4]
    2248:	4a29      	ldr	r2, [pc, #164]	; (22f0 <bt_hci_cmd_send_sync+0xdc>)
    224a:	492a      	ldr	r1, [pc, #168]	; (22f4 <bt_hci_cmd_send_sync+0xe0>)
    224c:	482a      	ldr	r0, [pc, #168]	; (22f8 <bt_hci_cmd_send_sync+0xe4>)
    224e:	f8cd 900c 	str.w	r9, [sp, #12]
    2252:	9402      	str	r4, [sp, #8]
    2254:	9600      	str	r6, [sp, #0]
    2256:	47b8      	blx	r7
    2258:	2201      	movs	r2, #1
    225a:	2100      	movs	r1, #0
    225c:	4640      	mov	r0, r8
    225e:	f012 fabb 	bl	147d8 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    2262:	4620      	mov	r0, r4
    2264:	f011 f97a 	bl	1355c <net_buf_id>
    2268:	4f24      	ldr	r7, [pc, #144]	; (22fc <bt_hci_cmd_send_sync+0xe8>)
    226a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    226e:	f8c0 8004 	str.w	r8, [r0, #4]
	net_buf_ref(buf);
    2272:	4620      	mov	r0, r4
    2274:	f011 fa5e 	bl	13734 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2278:	4621      	mov	r1, r4
    227a:	4821      	ldr	r0, [pc, #132]	; (2300 <bt_hci_cmd_send_sync+0xec>)
    227c:	f011 fa1f 	bl	136be <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2280:	f242 7110 	movw	r1, #10000	; 0x2710
    2284:	4640      	mov	r0, r8
    2286:	f012 fad8 	bl	1483a <_impl_k_sem_take>
	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);
    228a:	f8da 8000 	ldr.w	r8, [sl]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    228e:	f012 fa9d 	bl	147cc <_impl_k_current_get>
    2292:	4682      	mov	sl, r0
    2294:	4620      	mov	r0, r4
    2296:	f011 f961 	bl	1355c <net_buf_id>
    229a:	9604      	str	r6, [sp, #16]
    229c:	f817 3030 	ldrb.w	r3, [r7, r0, lsl #3]
    22a0:	9303      	str	r3, [sp, #12]
    22a2:	4a13      	ldr	r2, [pc, #76]	; (22f0 <bt_hci_cmd_send_sync+0xdc>)
    22a4:	4b11      	ldr	r3, [pc, #68]	; (22ec <bt_hci_cmd_send_sync+0xd8>)
    22a6:	4913      	ldr	r1, [pc, #76]	; (22f4 <bt_hci_cmd_send_sync+0xe0>)
    22a8:	4816      	ldr	r0, [pc, #88]	; (2304 <bt_hci_cmd_send_sync+0xf0>)
    22aa:	f8cd 9008 	str.w	r9, [sp, #8]
    22ae:	e88d 0440 	stmia.w	sp, {r6, sl}
    22b2:	47c0      	blx	r8
	if (cmd(buf)->status) {
    22b4:	4620      	mov	r0, r4
    22b6:	f011 f951 	bl	1355c <net_buf_id>
    22ba:	f817 0030 	ldrb.w	r0, [r7, r0, lsl #3]
    22be:	b138      	cbz	r0, 22d0 <bt_hci_cmd_send_sync+0xbc>
		net_buf_unref(buf);
    22c0:	4620      	mov	r0, r4
    22c2:	f011 fa09 	bl	136d8 <net_buf_unref>
		err = -EIO;
    22c6:	f06f 0004 	mvn.w	r0, #4
}
    22ca:	b00c      	add	sp, #48	; 0x30
    22cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (rsp) {
    22d0:	b10d      	cbz	r5, 22d6 <bt_hci_cmd_send_sync+0xc2>
			*rsp = buf;
    22d2:	602c      	str	r4, [r5, #0]
    22d4:	e7f9      	b.n	22ca <bt_hci_cmd_send_sync+0xb6>
			net_buf_unref(buf);
    22d6:	4620      	mov	r0, r4
    22d8:	f011 f9fe 	bl	136d8 <net_buf_unref>
		err = 0;
    22dc:	4628      	mov	r0, r5
    22de:	e7f4      	b.n	22ca <bt_hci_cmd_send_sync+0xb6>
			return -ENOBUFS;
    22e0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    22e4:	e7f1      	b.n	22ca <bt_hci_cmd_send_sync+0xb6>
    22e6:	bf00      	nop
    22e8:	00015359 	.word	0x00015359
    22ec:	0001590f 	.word	0x0001590f
    22f0:	0001587b 	.word	0x0001587b
    22f4:	0001679c 	.word	0x0001679c
    22f8:	00015dff 	.word	0x00015dff
    22fc:	2000027c 	.word	0x2000027c
    2300:	20003b24 	.word	0x20003b24
    2304:	00015e30 	.word	0x00015e30
    2308:	20003a5c 	.word	0x20003a5c

0000230c <set_le_scan_enable>:
{
    230c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    230e:	2102      	movs	r1, #2
{
    2310:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    2312:	f242 000c 	movw	r0, #8204	; 0x200c
    2316:	f7ff ff19 	bl	214c <bt_hci_cmd_create>
	if (!buf) {
    231a:	4604      	mov	r4, r0
    231c:	b330      	cbz	r0, 236c <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    231e:	2102      	movs	r1, #2
    2320:	3008      	adds	r0, #8
    2322:	f011 fa0b 	bl	1373c <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2326:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    2328:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    232a:	d116      	bne.n	235a <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    232c:	210b      	movs	r1, #11
    232e:	4811      	ldr	r0, [pc, #68]	; (2374 <set_le_scan_enable+0x68>)
    2330:	f7ff fefe 	bl	2130 <atomic_test_bit>
    2334:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    2336:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2338:	4621      	mov	r1, r4
    233a:	2200      	movs	r2, #0
    233c:	f242 000c 	movw	r0, #8204	; 0x200c
    2340:	f7ff ff68 	bl	2214 <bt_hci_cmd_send_sync>
	if (err) {
    2344:	4604      	mov	r4, r0
    2346:	b930      	cbnz	r0, 2356 <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2348:	2d01      	cmp	r5, #1
    234a:	d109      	bne.n	2360 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    234c:	f44f 7180 	mov.w	r1, #256	; 0x100
    2350:	4808      	ldr	r0, [pc, #32]	; (2374 <set_le_scan_enable+0x68>)
    2352:	f7ff fe42 	bl	1fda <atomic_or>
}
    2356:	4620      	mov	r0, r4
    2358:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    235a:	2300      	movs	r3, #0
    235c:	7043      	strb	r3, [r0, #1]
    235e:	e7ea      	b.n	2336 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2360:	f46f 7180 	mvn.w	r1, #256	; 0x100
    2364:	4803      	ldr	r0, [pc, #12]	; (2374 <set_le_scan_enable+0x68>)
    2366:	f7ff fe49 	bl	1ffc <atomic_and>
    236a:	e7f4      	b.n	2356 <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    236c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2370:	e7f1      	b.n	2356 <set_le_scan_enable+0x4a>
    2372:	bf00      	nop
    2374:	20003ad0 	.word	0x20003ad0

00002378 <set_random_address>:
{
    2378:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("%s", bt_addr_str(addr));
    237a:	4b1f      	ldr	r3, [pc, #124]	; (23f8 <set_random_address+0x80>)
{
    237c:	4605      	mov	r5, r0
	BT_DBG("%s", bt_addr_str(addr));
    237e:	681c      	ldr	r4, [r3, #0]
    2380:	f012 fa24 	bl	147cc <_impl_k_current_get>
    2384:	4606      	mov	r6, r0
    2386:	4628      	mov	r0, r5
    2388:	f7ff fce4 	bl	1d54 <bt_addr_str>
    238c:	4b1b      	ldr	r3, [pc, #108]	; (23fc <set_random_address+0x84>)
    238e:	9303      	str	r3, [sp, #12]
    2390:	e88d 0048 	stmia.w	sp, {r3, r6}
	return memcmp(a, b, sizeof(*a));
    2394:	4e1a      	ldr	r6, [pc, #104]	; (2400 <set_random_address+0x88>)
    2396:	9002      	str	r0, [sp, #8]
    2398:	4b1a      	ldr	r3, [pc, #104]	; (2404 <set_random_address+0x8c>)
    239a:	4a1b      	ldr	r2, [pc, #108]	; (2408 <set_random_address+0x90>)
    239c:	491b      	ldr	r1, [pc, #108]	; (240c <set_random_address+0x94>)
    239e:	481c      	ldr	r0, [pc, #112]	; (2410 <set_random_address+0x98>)
    23a0:	47a0      	blx	r4
    23a2:	2206      	movs	r2, #6
    23a4:	f106 0108 	add.w	r1, r6, #8
    23a8:	4628      	mov	r0, r5
    23aa:	f7ff fc38 	bl	1c1e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    23ae:	4604      	mov	r4, r0
    23b0:	b1d8      	cbz	r0, 23ea <set_random_address+0x72>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    23b2:	2106      	movs	r1, #6
    23b4:	f242 0005 	movw	r0, #8197	; 0x2005
    23b8:	f7ff fec8 	bl	214c <bt_hci_cmd_create>
	if (!buf) {
    23bc:	4604      	mov	r4, r0
    23be:	b1b8      	cbz	r0, 23f0 <set_random_address+0x78>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    23c0:	2206      	movs	r2, #6
    23c2:	4629      	mov	r1, r5
    23c4:	3008      	adds	r0, #8
    23c6:	f011 f9bf 	bl	13748 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    23ca:	4621      	mov	r1, r4
    23cc:	2200      	movs	r2, #0
    23ce:	f242 0005 	movw	r0, #8197	; 0x2005
    23d2:	f7ff ff1f 	bl	2214 <bt_hci_cmd_send_sync>
	if (err) {
    23d6:	4604      	mov	r4, r0
    23d8:	b938      	cbnz	r0, 23ea <set_random_address+0x72>
	memcpy(dst, src, sizeof(*dst));
    23da:	2206      	movs	r2, #6
    23dc:	4629      	mov	r1, r5
    23de:	f106 0008 	add.w	r0, r6, #8
    23e2:	f7ff fc31 	bl	1c48 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    23e6:	2301      	movs	r3, #1
    23e8:	71f3      	strb	r3, [r6, #7]
}
    23ea:	4620      	mov	r0, r4
    23ec:	b004      	add	sp, #16
    23ee:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    23f0:	f06f 0436 	mvn.w	r4, #54	; 0x36
    23f4:	e7f9      	b.n	23ea <set_random_address+0x72>
    23f6:	bf00      	nop
    23f8:	20003a5c 	.word	0x20003a5c
    23fc:	00015359 	.word	0x00015359
    2400:	20003a60 	.word	0x20003a60
    2404:	00015924 	.word	0x00015924
    2408:	0001587b 	.word	0x0001587b
    240c:	0001679c 	.word	0x0001679c
    2410:	00016adc 	.word	0x00016adc

00002414 <le_set_private_addr>:
{
    2414:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    2416:	2106      	movs	r1, #6
    2418:	4668      	mov	r0, sp
    241a:	f006 f95b 	bl	86d4 <bt_rand>
	if (err) {
    241e:	b940      	cbnz	r0, 2432 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    2420:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    2424:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    2426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    242a:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    242e:	f7ff ffa3 	bl	2378 <set_random_address>
}
    2432:	b003      	add	sp, #12
    2434:	f85d fb04 	ldr.w	pc, [sp], #4

00002438 <set_advertise_enable>:
{
    2438:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    243a:	2101      	movs	r1, #1
{
    243c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    243e:	f242 000a 	movw	r0, #8202	; 0x200a
    2442:	f7ff fe83 	bl	214c <bt_hci_cmd_create>
	if (!buf) {
    2446:	4604      	mov	r4, r0
    2448:	b1d8      	cbz	r0, 2482 <set_advertise_enable+0x4a>
    244a:	3008      	adds	r0, #8
	if (enable) {
    244c:	b18d      	cbz	r5, 2472 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    244e:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2450:	f011 f983 	bl	1375a <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    2454:	4621      	mov	r1, r4
    2456:	2200      	movs	r2, #0
    2458:	f242 000a 	movw	r0, #8202	; 0x200a
    245c:	f7ff feda 	bl	2214 <bt_hci_cmd_send_sync>
	if (err) {
    2460:	4604      	mov	r4, r0
    2462:	b920      	cbnz	r0, 246e <set_advertise_enable+0x36>
	if (enable) {
    2464:	b13d      	cbz	r5, 2476 <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2466:	2140      	movs	r1, #64	; 0x40
    2468:	4807      	ldr	r0, [pc, #28]	; (2488 <set_advertise_enable+0x50>)
    246a:	f7ff fdb6 	bl	1fda <atomic_or>
}
    246e:	4620      	mov	r0, r4
    2470:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2472:	4629      	mov	r1, r5
    2474:	e7ec      	b.n	2450 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2476:	f06f 0140 	mvn.w	r1, #64	; 0x40
    247a:	4803      	ldr	r0, [pc, #12]	; (2488 <set_advertise_enable+0x50>)
    247c:	f7ff fdbe 	bl	1ffc <atomic_and>
    2480:	e7f5      	b.n	246e <set_advertise_enable+0x36>
		return -ENOBUFS;
    2482:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2486:	e7f2      	b.n	246e <set_advertise_enable+0x36>
    2488:	20003ad0 	.word	0x20003ad0

0000248c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    248c:	8802      	ldrh	r2, [r0, #0]
    248e:	8843      	ldrh	r3, [r0, #2]
    2490:	429a      	cmp	r2, r3
{
    2492:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    2494:	d818      	bhi.n	24c8 <bt_le_conn_params_valid+0x3c>
    2496:	2a05      	cmp	r2, #5
    2498:	d916      	bls.n	24c8 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    249a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    249e:	d813      	bhi.n	24c8 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    24a0:	8884      	ldrh	r4, [r0, #4]
    24a2:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    24a6:	d20f      	bcs.n	24c8 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    24a8:	88c1      	ldrh	r1, [r0, #6]
    24aa:	f1a1 020a 	sub.w	r2, r1, #10
    24ae:	b292      	uxth	r2, r2
    24b0:	f640 4076 	movw	r0, #3190	; 0xc76
    24b4:	4282      	cmp	r2, r0
    24b6:	d807      	bhi.n	24c8 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    24b8:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    24bc:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    24c0:	bfb4      	ite	lt
    24c2:	2001      	movlt	r0, #1
    24c4:	2000      	movge	r0, #0
    24c6:	bd10      	pop	{r4, pc}
		return false;
    24c8:	2000      	movs	r0, #0
}
    24ca:	bd10      	pop	{r4, pc}

000024cc <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    24cc:	2301      	movs	r3, #1
{
    24ce:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    24d0:	2106      	movs	r1, #6
{
    24d2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    24d4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    24d8:	f006 f8fc 	bl	86d4 <bt_rand>
	if (err) {
    24dc:	b918      	cbnz	r0, 24e6 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    24de:	79a3      	ldrb	r3, [r4, #6]
    24e0:	f063 033f 	orn	r3, r3, #63	; 0x3f
    24e4:	71a3      	strb	r3, [r4, #6]
}
    24e6:	bd10      	pop	{r4, pc}

000024e8 <bt_set_static_addr>:
{
    24e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    24ea:	4c12      	ldr	r4, [pc, #72]	; (2534 <bt_set_static_addr+0x4c>)
    24ec:	7823      	ldrb	r3, [r4, #0]
    24ee:	2b01      	cmp	r3, #1
    24f0:	d104      	bne.n	24fc <bt_set_static_addr+0x14>
    24f2:	79a3      	ldrb	r3, [r4, #6]
    24f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    24f8:	2bc0      	cmp	r3, #192	; 0xc0
    24fa:	d00e      	beq.n	251a <bt_set_static_addr+0x32>
		BT_ERR("Only static random address supported as identity");
    24fc:	4b0e      	ldr	r3, [pc, #56]	; (2538 <bt_set_static_addr+0x50>)
    24fe:	9301      	str	r3, [sp, #4]
    2500:	9300      	str	r3, [sp, #0]
    2502:	4b0e      	ldr	r3, [pc, #56]	; (253c <bt_set_static_addr+0x54>)
    2504:	4a0e      	ldr	r2, [pc, #56]	; (2540 <bt_set_static_addr+0x58>)
    2506:	681c      	ldr	r4, [r3, #0]
    2508:	490e      	ldr	r1, [pc, #56]	; (2544 <bt_set_static_addr+0x5c>)
    250a:	4b0f      	ldr	r3, [pc, #60]	; (2548 <bt_set_static_addr+0x60>)
    250c:	480f      	ldr	r0, [pc, #60]	; (254c <bt_set_static_addr+0x64>)
    250e:	47a0      	blx	r4
    2510:	f06f 0515 	mvn.w	r5, #21
}
    2514:	4628      	mov	r0, r5
    2516:	b003      	add	sp, #12
    2518:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    251a:	1c60      	adds	r0, r4, #1
    251c:	f7ff ff2c 	bl	2378 <set_random_address>
	if (err) {
    2520:	4605      	mov	r5, r0
    2522:	2800      	cmp	r0, #0
    2524:	d1f6      	bne.n	2514 <bt_set_static_addr+0x2c>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2526:	2104      	movs	r1, #4
    2528:	f104 0070 	add.w	r0, r4, #112	; 0x70
    252c:	f7ff fd55 	bl	1fda <atomic_or>
	return 0;
    2530:	e7f0      	b.n	2514 <bt_set_static_addr+0x2c>
    2532:	bf00      	nop
    2534:	20003a60 	.word	0x20003a60
    2538:	00015359 	.word	0x00015359
    253c:	20003a5c 	.word	0x20003a5c
    2540:	00016754 	.word	0x00016754
    2544:	0001679c 	.word	0x0001679c
    2548:	00015b9b 	.word	0x00015b9b
    254c:	0001675b 	.word	0x0001675b

00002550 <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    2550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    2554:	4d20      	ldr	r5, [pc, #128]	; (25d8 <bt_dev_show_info+0x88>)
    2556:	f8df 909c 	ldr.w	r9, [pc, #156]	; 25f4 <bt_dev_show_info+0xa4>
    255a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 25f8 <bt_dev_show_info+0xa8>
    255e:	f8d9 a000 	ldr.w	sl, [r9]
    2562:	4f1e      	ldr	r7, [pc, #120]	; (25dc <bt_dev_show_info+0x8c>)
    2564:	4e1e      	ldr	r6, [pc, #120]	; (25e0 <bt_dev_show_info+0x90>)
    2566:	4c1f      	ldr	r4, [pc, #124]	; (25e4 <bt_dev_show_info+0x94>)
{
    2568:	b087      	sub	sp, #28
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    256a:	4628      	mov	r0, r5
    256c:	f7ff fc18 	bl	1da0 <bt_addr_le_str>
    2570:	4643      	mov	r3, r8
    2572:	463a      	mov	r2, r7
    2574:	4631      	mov	r1, r6
    2576:	9001      	str	r0, [sp, #4]
    2578:	9402      	str	r4, [sp, #8]
    257a:	9400      	str	r4, [sp, #0]
    257c:	481a      	ldr	r0, [pc, #104]	; (25e8 <bt_dev_show_info+0x98>)
    257e:	47d0      	blx	sl
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    2580:	f895 a00e 	ldrb.w	sl, [r5, #14]
    2584:	f8d9 b000 	ldr.w	fp, [r9]
    2588:	4650      	mov	r0, sl
    258a:	f7ff fd07 	bl	1f9c <ver_str>
    258e:	8aab      	ldrh	r3, [r5, #20]
    2590:	9304      	str	r3, [sp, #16]
    2592:	8a2b      	ldrh	r3, [r5, #16]
    2594:	9303      	str	r3, [sp, #12]
    2596:	463a      	mov	r2, r7
    2598:	4643      	mov	r3, r8
    259a:	4631      	mov	r1, r6
    259c:	f8cd a008 	str.w	sl, [sp, #8]
    25a0:	9001      	str	r0, [sp, #4]
    25a2:	9405      	str	r4, [sp, #20]
    25a4:	9400      	str	r4, [sp, #0]
    25a6:	4811      	ldr	r0, [pc, #68]	; (25ec <bt_dev_show_info+0x9c>)
    25a8:	47d8      	blx	fp
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    25aa:	f8d9 a000 	ldr.w	sl, [r9]
    25ae:	f895 900f 	ldrb.w	r9, [r5, #15]
    25b2:	4648      	mov	r0, r9
    25b4:	f7ff fcf2 	bl	1f9c <ver_str>
    25b8:	8a6b      	ldrh	r3, [r5, #18]
    25ba:	9303      	str	r3, [sp, #12]
    25bc:	9001      	str	r0, [sp, #4]
    25be:	9404      	str	r4, [sp, #16]
    25c0:	f8cd 9008 	str.w	r9, [sp, #8]
    25c4:	9400      	str	r4, [sp, #0]
    25c6:	4643      	mov	r3, r8
    25c8:	463a      	mov	r2, r7
    25ca:	4631      	mov	r1, r6
    25cc:	4808      	ldr	r0, [pc, #32]	; (25f0 <bt_dev_show_info+0xa0>)
    25ce:	47d0      	blx	sl
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    25d0:	b007      	add	sp, #28
    25d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25d6:	bf00      	nop
    25d8:	20003a60 	.word	0x20003a60
    25dc:	00015c59 	.word	0x00015c59
    25e0:	0001679c 	.word	0x0001679c
    25e4:	00015359 	.word	0x00015359
    25e8:	00015c60 	.word	0x00015c60
    25ec:	00015c7d 	.word	0x00015c7d
    25f0:	00015ccb 	.word	0x00015ccb
    25f4:	20003a5c 	.word	0x20003a5c
    25f8:	00015bbc 	.word	0x00015bbc

000025fc <bt_send>:

	return 0;
}

int bt_send(struct net_buf *buf)
{
    25fc:	b530      	push	{r4, r5, lr}
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));
    25fe:	4b0e      	ldr	r3, [pc, #56]	; (2638 <bt_send+0x3c>)
{
    2600:	b087      	sub	sp, #28
    2602:	4604      	mov	r4, r0
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));
    2604:	681d      	ldr	r5, [r3, #0]
    2606:	f012 f8e1 	bl	147cc <_impl_k_current_get>
    260a:	7d22      	ldrb	r2, [r4, #20]
    260c:	4b0b      	ldr	r3, [pc, #44]	; (263c <bt_send+0x40>)
    260e:	9204      	str	r2, [sp, #16]
    2610:	89a2      	ldrh	r2, [r4, #12]
    2612:	9305      	str	r3, [sp, #20]
    2614:	9203      	str	r2, [sp, #12]
    2616:	9001      	str	r0, [sp, #4]
    2618:	9300      	str	r3, [sp, #0]
    261a:	9402      	str	r4, [sp, #8]
    261c:	4b08      	ldr	r3, [pc, #32]	; (2640 <bt_send+0x44>)
    261e:	4a09      	ldr	r2, [pc, #36]	; (2644 <bt_send+0x48>)
    2620:	4909      	ldr	r1, [pc, #36]	; (2648 <bt_send+0x4c>)
    2622:	480a      	ldr	r0, [pc, #40]	; (264c <bt_send+0x50>)
    2624:	47a8      	blx	r5

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2626:	4b0a      	ldr	r3, [pc, #40]	; (2650 <bt_send+0x54>)
    2628:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    262c:	691b      	ldr	r3, [r3, #16]
    262e:	4620      	mov	r0, r4
}
    2630:	b007      	add	sp, #28
    2632:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return bt_dev.drv->send(buf);
    2636:	4718      	bx	r3
    2638:	20003a5c 	.word	0x20003a5c
    263c:	00015359 	.word	0x00015359
    2640:	00015be2 	.word	0x00015be2
    2644:	0001587b 	.word	0x0001587b
    2648:	0001679c 	.word	0x0001679c
    264c:	00016729 	.word	0x00016729
    2650:	20003a60 	.word	0x20003a60

00002654 <bt_hci_cmd_send>:
{
    2654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2658:	4605      	mov	r5, r0
    265a:	b086      	sub	sp, #24
	if (!buf) {
    265c:	460c      	mov	r4, r1
    265e:	b921      	cbnz	r1, 266a <bt_hci_cmd_send+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    2660:	f7ff fd74 	bl	214c <bt_hci_cmd_create>
		if (!buf) {
    2664:	4604      	mov	r4, r0
    2666:	2800      	cmp	r0, #0
    2668:	d02f      	beq.n	26ca <bt_hci_cmd_send+0x76>
	BT_DBG("opcode 0x%04x len %u", opcode, buf->len);
    266a:	4f19      	ldr	r7, [pc, #100]	; (26d0 <bt_hci_cmd_send+0x7c>)
    266c:	4e19      	ldr	r6, [pc, #100]	; (26d4 <bt_hci_cmd_send+0x80>)
    266e:	f8d7 8000 	ldr.w	r8, [r7]
    2672:	f012 f8ab 	bl	147cc <_impl_k_current_get>
    2676:	9604      	str	r6, [sp, #16]
    2678:	89a3      	ldrh	r3, [r4, #12]
    267a:	9303      	str	r3, [sp, #12]
    267c:	9001      	str	r0, [sp, #4]
    267e:	4b16      	ldr	r3, [pc, #88]	; (26d8 <bt_hci_cmd_send+0x84>)
    2680:	9502      	str	r5, [sp, #8]
    2682:	9600      	str	r6, [sp, #0]
    2684:	4a15      	ldr	r2, [pc, #84]	; (26dc <bt_hci_cmd_send+0x88>)
    2686:	4916      	ldr	r1, [pc, #88]	; (26e0 <bt_hci_cmd_send+0x8c>)
    2688:	4816      	ldr	r0, [pc, #88]	; (26e4 <bt_hci_cmd_send+0x90>)
    268a:	47c0      	blx	r8
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    268c:	f640 4335 	movw	r3, #3125	; 0xc35
    2690:	429d      	cmp	r5, r3
    2692:	d114      	bne.n	26be <bt_hci_cmd_send+0x6a>
		err = bt_send(buf);
    2694:	4620      	mov	r0, r4
    2696:	f7ff ffb1 	bl	25fc <bt_send>
		if (err) {
    269a:	4605      	mov	r5, r0
    269c:	b158      	cbz	r0, 26b6 <bt_hci_cmd_send+0x62>
			BT_ERR("Unable to send to driver (err %d)", err);
    269e:	9001      	str	r0, [sp, #4]
    26a0:	9602      	str	r6, [sp, #8]
    26a2:	9600      	str	r6, [sp, #0]
    26a4:	4810      	ldr	r0, [pc, #64]	; (26e8 <bt_hci_cmd_send+0x94>)
    26a6:	683e      	ldr	r6, [r7, #0]
    26a8:	4b0b      	ldr	r3, [pc, #44]	; (26d8 <bt_hci_cmd_send+0x84>)
    26aa:	4a10      	ldr	r2, [pc, #64]	; (26ec <bt_hci_cmd_send+0x98>)
    26ac:	490c      	ldr	r1, [pc, #48]	; (26e0 <bt_hci_cmd_send+0x8c>)
    26ae:	47b0      	blx	r6
			net_buf_unref(buf);
    26b0:	4620      	mov	r0, r4
    26b2:	f011 f811 	bl	136d8 <net_buf_unref>
}
    26b6:	4628      	mov	r0, r5
    26b8:	b006      	add	sp, #24
    26ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    26be:	4621      	mov	r1, r4
    26c0:	480b      	ldr	r0, [pc, #44]	; (26f0 <bt_hci_cmd_send+0x9c>)
    26c2:	f010 fffc 	bl	136be <net_buf_put>
	return 0;
    26c6:	2500      	movs	r5, #0
    26c8:	e7f5      	b.n	26b6 <bt_hci_cmd_send+0x62>
			return -ENOBUFS;
    26ca:	f06f 0536 	mvn.w	r5, #54	; 0x36
    26ce:	e7f2      	b.n	26b6 <bt_hci_cmd_send+0x62>
    26d0:	20003a5c 	.word	0x20003a5c
    26d4:	00015359 	.word	0x00015359
    26d8:	000158ff 	.word	0x000158ff
    26dc:	0001587b 	.word	0x0001587b
    26e0:	0001679c 	.word	0x0001679c
    26e4:	00015da3 	.word	0x00015da3
    26e8:	00015dcd 	.word	0x00015dcd
    26ec:	00016754 	.word	0x00016754
    26f0:	20003b24 	.word	0x20003b24

000026f4 <start_le_scan>:
{
    26f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    26f6:	4605      	mov	r5, r0
    26f8:	460e      	mov	r6, r1
    26fa:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    26fc:	2100      	movs	r1, #0
    26fe:	2207      	movs	r2, #7
    2700:	4668      	mov	r0, sp
    2702:	f7ff facd 	bl	1ca0 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    2706:	4821      	ldr	r0, [pc, #132]	; (278c <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    2708:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    270c:	2300      	movs	r3, #0
    270e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    2712:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    2714:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    2716:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    271a:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    271e:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    2722:	d10a      	bne.n	273a <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2724:	2106      	movs	r1, #6
    2726:	3070      	adds	r0, #112	; 0x70
    2728:	f7ff fd02 	bl	2130 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    272c:	b928      	cbnz	r0, 273a <start_le_scan+0x46>
			err = le_set_private_addr();
    272e:	f7ff fe71 	bl	2414 <le_set_private_addr>
			if (err) {
    2732:	4604      	mov	r4, r0
    2734:	b9f0      	cbnz	r0, 2774 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    2736:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    273a:	2107      	movs	r1, #7
    273c:	f242 000b 	movw	r0, #8203	; 0x200b
    2740:	f7ff fd04 	bl	214c <bt_hci_cmd_create>
	if (!buf) {
    2744:	4604      	mov	r4, r0
    2746:	b1f0      	cbz	r0, 2786 <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    2748:	2207      	movs	r2, #7
    274a:	4669      	mov	r1, sp
    274c:	3008      	adds	r0, #8
    274e:	f010 fffb 	bl	13748 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    2752:	4621      	mov	r1, r4
    2754:	f242 000b 	movw	r0, #8203	; 0x200b
    2758:	f7ff ff7c 	bl	2654 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    275c:	2001      	movs	r0, #1
    275e:	f7ff fdd5 	bl	230c <set_le_scan_enable>
	if (err) {
    2762:	4604      	mov	r4, r0
    2764:	b930      	cbnz	r0, 2774 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    2766:	2d01      	cmp	r5, #1
    2768:	d107      	bne.n	277a <start_le_scan+0x86>
    276a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    276e:	4808      	ldr	r0, [pc, #32]	; (2790 <start_le_scan+0x9c>)
    2770:	f7ff fc33 	bl	1fda <atomic_or>
}
    2774:	4620      	mov	r0, r4
    2776:	b002      	add	sp, #8
    2778:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    277a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    277e:	4804      	ldr	r0, [pc, #16]	; (2790 <start_le_scan+0x9c>)
    2780:	f7ff fc3c 	bl	1ffc <atomic_and>
    2784:	e7f6      	b.n	2774 <start_le_scan+0x80>
		return -ENOBUFS;
    2786:	f06f 0436 	mvn.w	r4, #54	; 0x36
    278a:	e7f3      	b.n	2774 <start_le_scan+0x80>
    278c:	20003a60 	.word	0x20003a60
    2790:	20003ad0 	.word	0x20003ad0

00002794 <bt_le_scan_update>:
{
    2794:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2796:	2109      	movs	r1, #9
{
    2798:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    279a:	4816      	ldr	r0, [pc, #88]	; (27f4 <bt_le_scan_update+0x60>)
    279c:	f7ff fcc8 	bl	2130 <atomic_test_bit>
    27a0:	4602      	mov	r2, r0
    27a2:	b108      	cbz	r0, 27a8 <bt_le_scan_update+0x14>
		return 0;
    27a4:	2000      	movs	r0, #0
    27a6:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    27a8:	2108      	movs	r1, #8
    27aa:	4812      	ldr	r0, [pc, #72]	; (27f4 <bt_le_scan_update+0x60>)
    27ac:	f7ff fcc0 	bl	2130 <atomic_test_bit>
    27b0:	b9d0      	cbnz	r0, 27e8 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    27b2:	2101      	movs	r1, #1
    27b4:	2000      	movs	r0, #0
    27b6:	f002 f9bb 	bl	4b30 <bt_conn_lookup_state_le>
		if (!conn) {
    27ba:	4604      	mov	r4, r0
    27bc:	2800      	cmp	r0, #0
    27be:	d0f1      	beq.n	27a4 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    27c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    27c4:	480b      	ldr	r0, [pc, #44]	; (27f4 <bt_le_scan_update+0x60>)
    27c6:	f7ff fc08 	bl	1fda <atomic_or>
		bt_conn_unref(conn);
    27ca:	4620      	mov	r0, r4
    27cc:	f002 f9ce 	bl	4b6c <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    27d0:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    27d2:	bf15      	itete	ne
    27d4:	2230      	movne	r2, #48	; 0x30
    27d6:	2212      	moveq	r2, #18
    27d8:	2160      	movne	r1, #96	; 0x60
    27da:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    27de:	2000      	movs	r0, #0
}
    27e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    27e4:	f7ff bf86 	b.w	26f4 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    27e8:	4610      	mov	r0, r2
    27ea:	f7ff fd8f 	bl	230c <set_le_scan_enable>
		if (err) {
    27ee:	2800      	cmp	r0, #0
    27f0:	d0df      	beq.n	27b2 <bt_le_scan_update+0x1e>
    27f2:	bd38      	pop	{r3, r4, r5, pc}
    27f4:	20003ad0 	.word	0x20003ad0

000027f8 <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    27f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    27fc:	4d75      	ldr	r5, [pc, #468]	; (29d4 <bt_init+0x1dc>)
    27fe:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    2802:	6899      	ldr	r1, [r3, #8]
    2804:	f011 0101 	ands.w	r1, r1, #1
{
    2808:	b08e      	sub	sp, #56	; 0x38
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    280a:	d132      	bne.n	2872 <bt_init+0x7a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    280c:	aa0c      	add	r2, sp, #48	; 0x30
    280e:	f640 4003 	movw	r0, #3075	; 0xc03
    2812:	f7ff fcff 	bl	2214 <bt_hci_cmd_send_sync>
		if (err) {
    2816:	4604      	mov	r4, r0
    2818:	2800      	cmp	r0, #0
    281a:	f040 80d7 	bne.w	29cc <bt_init+0x1d4>
	u8_t status = buf->data[0];
    281e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2820:	689b      	ldr	r3, [r3, #8]
    2822:	781c      	ldrb	r4, [r3, #0]
	BT_DBG("status %u", status);
    2824:	4b6c      	ldr	r3, [pc, #432]	; (29d8 <bt_init+0x1e0>)
    2826:	681e      	ldr	r6, [r3, #0]
    2828:	f011 ffd0 	bl	147cc <_impl_k_current_get>
    282c:	4b6b      	ldr	r3, [pc, #428]	; (29dc <bt_init+0x1e4>)
    282e:	9303      	str	r3, [sp, #12]
    2830:	9001      	str	r0, [sp, #4]
    2832:	9300      	str	r3, [sp, #0]
    2834:	9402      	str	r4, [sp, #8]
    2836:	4b6a      	ldr	r3, [pc, #424]	; (29e0 <bt_init+0x1e8>)
    2838:	4a6a      	ldr	r2, [pc, #424]	; (29e4 <bt_init+0x1ec>)
    283a:	496b      	ldr	r1, [pc, #428]	; (29e8 <bt_init+0x1f0>)
    283c:	486b      	ldr	r0, [pc, #428]	; (29ec <bt_init+0x1f4>)
    283e:	47b0      	blx	r6
	if (status) {
    2840:	b9a4      	cbnz	r4, 286c <bt_init+0x74>
	scan_dev_found_cb = NULL;
    2842:	4b6b      	ldr	r3, [pc, #428]	; (29f0 <bt_init+0x1f8>)
    2844:	601c      	str	r4, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2846:	462b      	mov	r3, r5
    2848:	f3bf 8f5b 	dmb	ish
    284c:	f853 2f70 	ldr.w	r2, [r3, #112]!
    2850:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2854:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2858:	f3bf 8f5b 	dmb	ish
    285c:	e853 1f00 	ldrex	r1, [r3]
    2860:	e843 2000 	strex	r0, r2, [r3]
    2864:	2800      	cmp	r0, #0
    2866:	d1f9      	bne.n	285c <bt_init+0x64>
    2868:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    286c:	980c      	ldr	r0, [sp, #48]	; 0x30
    286e:	f010 ff33 	bl	136d8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2872:	aa0c      	add	r2, sp, #48	; 0x30
    2874:	2100      	movs	r1, #0
    2876:	f241 0003 	movw	r0, #4099	; 0x1003
    287a:	f7ff fccb 	bl	2214 <bt_hci_cmd_send_sync>
	if (err) {
    287e:	4604      	mov	r4, r0
    2880:	2800      	cmp	r0, #0
    2882:	f040 80a3 	bne.w	29cc <bt_init+0x1d4>
    2886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    2888:	4e53      	ldr	r6, [pc, #332]	; (29d8 <bt_init+0x1e0>)
    288a:	f8d3 8008 	ldr.w	r8, [r3, #8]
    288e:	f8d6 9000 	ldr.w	r9, [r6]
    2892:	4f52      	ldr	r7, [pc, #328]	; (29dc <bt_init+0x1e4>)
    2894:	f011 ff9a 	bl	147cc <_impl_k_current_get>
    2898:	9703      	str	r7, [sp, #12]
    289a:	f818 3b01 	ldrb.w	r3, [r8], #1
    289e:	9302      	str	r3, [sp, #8]
    28a0:	9001      	str	r0, [sp, #4]
    28a2:	4b54      	ldr	r3, [pc, #336]	; (29f4 <bt_init+0x1fc>)
    28a4:	4a4f      	ldr	r2, [pc, #316]	; (29e4 <bt_init+0x1ec>)
    28a6:	4950      	ldr	r1, [pc, #320]	; (29e8 <bt_init+0x1f0>)
    28a8:	4850      	ldr	r0, [pc, #320]	; (29ec <bt_init+0x1f4>)
    28aa:	9700      	str	r7, [sp, #0]
    28ac:	47c8      	blx	r9
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    28ae:	2208      	movs	r2, #8
    28b0:	4641      	mov	r1, r8
    28b2:	4851      	ldr	r0, [pc, #324]	; (29f8 <bt_init+0x200>)
    28b4:	f7ff f9c8 	bl	1c48 <memcpy>
	net_buf_unref(rsp);
    28b8:	980c      	ldr	r0, [sp, #48]	; 0x30
    28ba:	f010 ff0d 	bl	136d8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    28be:	4621      	mov	r1, r4
    28c0:	aa0c      	add	r2, sp, #48	; 0x30
    28c2:	f241 0001 	movw	r0, #4097	; 0x1001
    28c6:	f7ff fca5 	bl	2214 <bt_hci_cmd_send_sync>
	if (err) {
    28ca:	4604      	mov	r4, r0
    28cc:	2800      	cmp	r0, #0
    28ce:	d17d      	bne.n	29cc <bt_init+0x1d4>
    28d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    28d2:	f8d6 8000 	ldr.w	r8, [r6]
    28d6:	689c      	ldr	r4, [r3, #8]
    28d8:	f011 ff78 	bl	147cc <_impl_k_current_get>
    28dc:	9703      	str	r7, [sp, #12]
    28de:	7823      	ldrb	r3, [r4, #0]
    28e0:	4941      	ldr	r1, [pc, #260]	; (29e8 <bt_init+0x1f0>)
    28e2:	9302      	str	r3, [sp, #8]
    28e4:	9001      	str	r0, [sp, #4]
    28e6:	4b45      	ldr	r3, [pc, #276]	; (29fc <bt_init+0x204>)
    28e8:	4a3e      	ldr	r2, [pc, #248]	; (29e4 <bt_init+0x1ec>)
    28ea:	4840      	ldr	r0, [pc, #256]	; (29ec <bt_init+0x1f4>)
    28ec:	9700      	str	r7, [sp, #0]
    28ee:	47c0      	blx	r8
	bt_dev.hci_version = rp->hci_version;
    28f0:	7863      	ldrb	r3, [r4, #1]
    28f2:	73ab      	strb	r3, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    28f4:	78e2      	ldrb	r2, [r4, #3]
    28f6:	78a3      	ldrb	r3, [r4, #2]
	net_buf_unref(rsp);
    28f8:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    28fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    28fe:	822b      	strh	r3, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2900:	7923      	ldrb	r3, [r4, #4]
    2902:	73eb      	strb	r3, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2904:	7a22      	ldrb	r2, [r4, #8]
    2906:	79e3      	ldrb	r3, [r4, #7]
    2908:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    290c:	826b      	strh	r3, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    290e:	79a2      	ldrb	r2, [r4, #6]
    2910:	7963      	ldrb	r3, [r4, #5]
    2912:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2916:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    2918:	f010 fede 	bl	136d8 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    291c:	2103      	movs	r1, #3
    291e:	4838      	ldr	r0, [pc, #224]	; (2a00 <bt_init+0x208>)
    2920:	f7ff fc06 	bl	2130 <atomic_test_bit>
    2924:	4601      	mov	r1, r0
    2926:	bb10      	cbnz	r0, 296e <bt_init+0x176>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2928:	aa0c      	add	r2, sp, #48	; 0x30
    292a:	f241 0009 	movw	r0, #4105	; 0x1009
    292e:	f7ff fc71 	bl	2214 <bt_hci_cmd_send_sync>
		if (err) {
    2932:	4604      	mov	r4, r0
    2934:	2800      	cmp	r0, #0
    2936:	d149      	bne.n	29cc <bt_init+0x1d4>
    2938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    293a:	f8d6 9000 	ldr.w	r9, [r6]
    293e:	f8d3 8008 	ldr.w	r8, [r3, #8]
    2942:	f011 ff43 	bl	147cc <_impl_k_current_get>
    2946:	9703      	str	r7, [sp, #12]
    2948:	f818 3b01 	ldrb.w	r3, [r8], #1
    294c:	9302      	str	r3, [sp, #8]
    294e:	9001      	str	r0, [sp, #4]
    2950:	4b2c      	ldr	r3, [pc, #176]	; (2a04 <bt_init+0x20c>)
    2952:	4a24      	ldr	r2, [pc, #144]	; (29e4 <bt_init+0x1ec>)
    2954:	4924      	ldr	r1, [pc, #144]	; (29e8 <bt_init+0x1f0>)
    2956:	4825      	ldr	r0, [pc, #148]	; (29ec <bt_init+0x1f4>)
    2958:	9700      	str	r7, [sp, #0]
    295a:	47c8      	blx	r9
    295c:	2206      	movs	r2, #6
    295e:	4641      	mov	r1, r8
    2960:	4829      	ldr	r0, [pc, #164]	; (2a08 <bt_init+0x210>)
    2962:	f7ff f971 	bl	1c48 <memcpy>
		net_buf_unref(rsp);
    2966:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    2968:	702c      	strb	r4, [r5, #0]
		net_buf_unref(rsp);
    296a:	f010 feb5 	bl	136d8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    296e:	aa0c      	add	r2, sp, #48	; 0x30
    2970:	2100      	movs	r1, #0
    2972:	f241 0002 	movw	r0, #4098	; 0x1002
    2976:	f7ff fc4d 	bl	2214 <bt_hci_cmd_send_sync>
	if (err) {
    297a:	4604      	mov	r4, r0
    297c:	bb30      	cbnz	r0, 29cc <bt_init+0x1d4>
    297e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    2980:	f8d6 9000 	ldr.w	r9, [r6]
    2984:	f8d3 8008 	ldr.w	r8, [r3, #8]
    2988:	f011 ff20 	bl	147cc <_impl_k_current_get>
    298c:	9703      	str	r7, [sp, #12]
    298e:	f818 3b01 	ldrb.w	r3, [r8], #1
    2992:	9302      	str	r3, [sp, #8]
    2994:	9001      	str	r0, [sp, #4]
    2996:	4b1d      	ldr	r3, [pc, #116]	; (2a0c <bt_init+0x214>)
    2998:	4a12      	ldr	r2, [pc, #72]	; (29e4 <bt_init+0x1ec>)
    299a:	4913      	ldr	r1, [pc, #76]	; (29e8 <bt_init+0x1f0>)
    299c:	4813      	ldr	r0, [pc, #76]	; (29ec <bt_init+0x1f4>)
    299e:	9700      	str	r7, [sp, #0]
    29a0:	47c8      	blx	r9
	memcpy(bt_dev.supported_commands, rp->commands,
    29a2:	2240      	movs	r2, #64	; 0x40
    29a4:	4641      	mov	r1, r8
    29a6:	481a      	ldr	r0, [pc, #104]	; (2a10 <bt_init+0x218>)
    29a8:	f7ff f94e 	bl	1c48 <memcpy>
	net_buf_unref(rsp);
    29ac:	980c      	ldr	r0, [sp, #48]	; 0x30
    29ae:	f010 fe93 	bl	136d8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    29b2:	7eab      	ldrb	r3, [r5, #26]
    29b4:	0658      	lsls	r0, r3, #25
    29b6:	d433      	bmi.n	2a20 <bt_init+0x228>
		BT_ERR("Non-LE capable controller detected!");
    29b8:	9701      	str	r7, [sp, #4]
    29ba:	9700      	str	r7, [sp, #0]
    29bc:	6834      	ldr	r4, [r6, #0]
    29be:	4b15      	ldr	r3, [pc, #84]	; (2a14 <bt_init+0x21c>)
    29c0:	4a15      	ldr	r2, [pc, #84]	; (2a18 <bt_init+0x220>)
    29c2:	4909      	ldr	r1, [pc, #36]	; (29e8 <bt_init+0x1f0>)
    29c4:	4815      	ldr	r0, [pc, #84]	; (2a1c <bt_init+0x224>)
    29c6:	47a0      	blx	r4
		return -ENODEV;
    29c8:	f06f 0412 	mvn.w	r4, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    29cc:	4620      	mov	r0, r4
    29ce:	b00e      	add	sp, #56	; 0x38
    29d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    29d4:	20003a60 	.word	0x20003a60
    29d8:	20003a5c 	.word	0x20003a5c
    29dc:	00015359 	.word	0x00015359
    29e0:	00015a2a 	.word	0x00015a2a
    29e4:	0001587b 	.word	0x0001587b
    29e8:	0001679c 	.word	0x0001679c
    29ec:	00015e84 	.word	0x00015e84
    29f0:	200002d8 	.word	0x200002d8
    29f4:	00015b59 	.word	0x00015b59
    29f8:	20003a76 	.word	0x20003a76
    29fc:	00015aba 	.word	0x00015aba
    2a00:	20003ad0 	.word	0x20003ad0
    2a04:	00015ad2 	.word	0x00015ad2
    2a08:	20003a61 	.word	0x20003a61
    2a0c:	00015b38 	.word	0x00015b38
    2a10:	20003a7e 	.word	0x20003a7e
    2a14:	00015b93 	.word	0x00015b93
    2a18:	00016754 	.word	0x00016754
    2a1c:	00015ea3 	.word	0x00015ea3
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2a20:	4621      	mov	r1, r4
    2a22:	aa0c      	add	r2, sp, #48	; 0x30
    2a24:	f242 0003 	movw	r0, #8195	; 0x2003
    2a28:	f7ff fbf4 	bl	2214 <bt_hci_cmd_send_sync>
	if (err) {
    2a2c:	4604      	mov	r4, r0
    2a2e:	2800      	cmp	r0, #0
    2a30:	d1cc      	bne.n	29cc <bt_init+0x1d4>
    2a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    2a34:	f8d6 9000 	ldr.w	r9, [r6]
    2a38:	f8d3 8008 	ldr.w	r8, [r3, #8]
    2a3c:	f011 fec6 	bl	147cc <_impl_k_current_get>
    2a40:	9703      	str	r7, [sp, #12]
    2a42:	f818 3b01 	ldrb.w	r3, [r8], #1
    2a46:	9302      	str	r3, [sp, #8]
    2a48:	9001      	str	r0, [sp, #4]
    2a4a:	4bb5      	ldr	r3, [pc, #724]	; (2d20 <bt_init+0x528>)
    2a4c:	4ab5      	ldr	r2, [pc, #724]	; (2d24 <bt_init+0x52c>)
    2a4e:	49b6      	ldr	r1, [pc, #728]	; (2d28 <bt_init+0x530>)
    2a50:	48b6      	ldr	r0, [pc, #728]	; (2d2c <bt_init+0x534>)
    2a52:	9700      	str	r7, [sp, #0]
    2a54:	47c8      	blx	r9
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2a56:	2208      	movs	r2, #8
    2a58:	4641      	mov	r1, r8
    2a5a:	48b5      	ldr	r0, [pc, #724]	; (2d30 <bt_init+0x538>)
    2a5c:	f7ff f8f4 	bl	1c48 <memcpy>
	net_buf_unref(rsp);
    2a60:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a62:	f010 fe39 	bl	136d8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2a66:	4621      	mov	r1, r4
    2a68:	aa0c      	add	r2, sp, #48	; 0x30
    2a6a:	f242 0002 	movw	r0, #8194	; 0x2002
    2a6e:	f7ff fbd1 	bl	2214 <bt_hci_cmd_send_sync>
	if (err) {
    2a72:	4604      	mov	r4, r0
    2a74:	2800      	cmp	r0, #0
    2a76:	d1a9      	bne.n	29cc <bt_init+0x1d4>
    2a78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    2a7a:	f8d6 8000 	ldr.w	r8, [r6]
    2a7e:	689c      	ldr	r4, [r3, #8]
    2a80:	f011 fea4 	bl	147cc <_impl_k_current_get>
    2a84:	9703      	str	r7, [sp, #12]
    2a86:	7823      	ldrb	r3, [r4, #0]
    2a88:	9302      	str	r3, [sp, #8]
    2a8a:	9001      	str	r0, [sp, #4]
    2a8c:	4ba9      	ldr	r3, [pc, #676]	; (2d34 <bt_init+0x53c>)
    2a8e:	9700      	str	r7, [sp, #0]
    2a90:	4aa4      	ldr	r2, [pc, #656]	; (2d24 <bt_init+0x52c>)
    2a92:	49a5      	ldr	r1, [pc, #660]	; (2d28 <bt_init+0x530>)
    2a94:	48a5      	ldr	r0, [pc, #660]	; (2d2c <bt_init+0x534>)
    2a96:	47c0      	blx	r8
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    2a98:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    2a9c:	f8a5 3088 	strh.w	r3, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    2aa0:	b1c3      	cbz	r3, 2ad4 <bt_init+0x2dc>
	BT_DBG("ACL LE buffers: pkts %u mtu %u", rp->le_max_num, bt_dev.le.mtu);
    2aa2:	f8d6 8000 	ldr.w	r8, [r6]
    2aa6:	f011 fe91 	bl	147cc <_impl_k_current_get>
    2aaa:	9704      	str	r7, [sp, #16]
    2aac:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2ab0:	9303      	str	r3, [sp, #12]
    2ab2:	78e3      	ldrb	r3, [r4, #3]
    2ab4:	9302      	str	r3, [sp, #8]
    2ab6:	9001      	str	r0, [sp, #4]
    2ab8:	4a9a      	ldr	r2, [pc, #616]	; (2d24 <bt_init+0x52c>)
    2aba:	499b      	ldr	r1, [pc, #620]	; (2d28 <bt_init+0x530>)
    2abc:	489e      	ldr	r0, [pc, #632]	; (2d38 <bt_init+0x540>)
    2abe:	9700      	str	r7, [sp, #0]
    2ac0:	4b9c      	ldr	r3, [pc, #624]	; (2d34 <bt_init+0x53c>)
    2ac2:	47c0      	blx	r8
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    2ac4:	78e2      	ldrb	r2, [r4, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2ac6:	489d      	ldr	r0, [pc, #628]	; (2d3c <bt_init+0x544>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    2ac8:	2a02      	cmp	r2, #2
    2aca:	bf28      	it	cs
    2acc:	2202      	movcs	r2, #2
    2ace:	4611      	mov	r1, r2
    2ad0:	f011 fe82 	bl	147d8 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2ad4:	980c      	ldr	r0, [sp, #48]	; 0x30
    2ad6:	f010 fdff 	bl	136d8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2ada:	7eac      	ldrb	r4, [r5, #26]
    2adc:	f014 0420 	ands.w	r4, r4, #32
    2ae0:	f000 8113 	beq.w	2d0a <bt_init+0x512>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2ae4:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    2ae8:	0719      	lsls	r1, r3, #28
    2aea:	d525      	bpl.n	2b38 <bt_init+0x340>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2aec:	aa0c      	add	r2, sp, #48	; 0x30
    2aee:	2100      	movs	r1, #0
    2af0:	f242 001c 	movw	r0, #8220	; 0x201c
    2af4:	f7ff fb8e 	bl	2214 <bt_hci_cmd_send_sync>
		if (err) {
    2af8:	4604      	mov	r4, r0
    2afa:	2800      	cmp	r0, #0
    2afc:	f47f af66 	bne.w	29cc <bt_init+0x1d4>
    2b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    2b02:	f8d6 8000 	ldr.w	r8, [r6]
    2b06:	689c      	ldr	r4, [r3, #8]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2b08:	f011 fe60 	bl	147cc <_impl_k_current_get>
    2b0c:	4b8c      	ldr	r3, [pc, #560]	; (2d40 <bt_init+0x548>)
    2b0e:	9303      	str	r3, [sp, #12]
    2b10:	7822      	ldrb	r2, [r4, #0]
    2b12:	9202      	str	r2, [sp, #8]
    2b14:	9001      	str	r0, [sp, #4]
    2b16:	9300      	str	r3, [sp, #0]
    2b18:	4a82      	ldr	r2, [pc, #520]	; (2d24 <bt_init+0x52c>)
    2b1a:	4b8a      	ldr	r3, [pc, #552]	; (2d44 <bt_init+0x54c>)
    2b1c:	4883      	ldr	r0, [pc, #524]	; (2d2c <bt_init+0x534>)
    2b1e:	4982      	ldr	r1, [pc, #520]	; (2d28 <bt_init+0x530>)
    2b20:	47c0      	blx	r8
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2b22:	4623      	mov	r3, r4
		net_buf_unref(rsp);
    2b24:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b26:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2b2a:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2b2c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    2b30:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    2b34:	f010 fdd0 	bl	136d8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    2b38:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2b3c:	069a      	lsls	r2, r3, #26
    2b3e:	f100 8129 	bmi.w	2d94 <bt_init+0x59c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2b42:	2108      	movs	r1, #8
    2b44:	f242 0001 	movw	r0, #8193	; 0x2001
    2b48:	f7ff fb00 	bl	214c <bt_hci_cmd_create>
	if (!buf) {
    2b4c:	4604      	mov	r4, r0
    2b4e:	2800      	cmp	r0, #0
    2b50:	f000 80e2 	beq.w	2d18 <bt_init+0x520>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2b54:	2108      	movs	r1, #8
    2b56:	4408      	add	r0, r1
    2b58:	f010 fdf0 	bl	1373c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2b5c:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
    2b60:	078b      	lsls	r3, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    2b62:	bf4c      	ite	mi
    2b64:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2b66:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2b68:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2b6a:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2b6e:	bf48      	it	mi
    2b70:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2b74:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2b78:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    2b7c:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2b80:	bf18      	it	ne
    2b82:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2b86:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2b88:	bf08      	it	eq
    2b8a:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    2b8e:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    2b90:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2b94:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    2b96:	2200      	movs	r2, #0
    2b98:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2b9a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2b9c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2b9e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2ba0:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2ba2:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2ba4:	4621      	mov	r1, r4
    2ba6:	f242 0001 	movw	r0, #8193	; 0x2001
    2baa:	f7ff fb33 	bl	2214 <bt_hci_cmd_send_sync>
	if (err) {
    2bae:	4604      	mov	r4, r0
    2bb0:	2800      	cmp	r0, #0
    2bb2:	f47f af0b 	bne.w	29cc <bt_init+0x1d4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2bb6:	7eab      	ldrb	r3, [r5, #26]
    2bb8:	069a      	lsls	r2, r3, #26
    2bba:	d447      	bmi.n	2c4c <bt_init+0x454>
	if (bt_dev.le.mtu) {
    2bbc:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    2bc0:	2900      	cmp	r1, #0
    2bc2:	d143      	bne.n	2c4c <bt_init+0x454>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2bc4:	aa0c      	add	r2, sp, #48	; 0x30
    2bc6:	f241 0005 	movw	r0, #4101	; 0x1005
    2bca:	f7ff fb23 	bl	2214 <bt_hci_cmd_send_sync>
	if (err) {
    2bce:	4604      	mov	r4, r0
    2bd0:	2800      	cmp	r0, #0
    2bd2:	f47f aefb 	bne.w	29cc <bt_init+0x1d4>
    2bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    2bd8:	f8d6 9000 	ldr.w	r9, [r6]
    2bdc:	689c      	ldr	r4, [r3, #8]
    2bde:	f8df 8160 	ldr.w	r8, [pc, #352]	; 2d40 <bt_init+0x548>
    2be2:	f011 fdf3 	bl	147cc <_impl_k_current_get>
    2be6:	f8cd 800c 	str.w	r8, [sp, #12]
    2bea:	7823      	ldrb	r3, [r4, #0]
    2bec:	9302      	str	r3, [sp, #8]
    2bee:	9001      	str	r0, [sp, #4]
    2bf0:	4b55      	ldr	r3, [pc, #340]	; (2d48 <bt_init+0x550>)
    2bf2:	f8cd 8000 	str.w	r8, [sp]
    2bf6:	4a4b      	ldr	r2, [pc, #300]	; (2d24 <bt_init+0x52c>)
    2bf8:	494b      	ldr	r1, [pc, #300]	; (2d28 <bt_init+0x530>)
    2bfa:	484c      	ldr	r0, [pc, #304]	; (2d2c <bt_init+0x534>)
    2bfc:	47c8      	blx	r9
	if (bt_dev.le.mtu) {
    2bfe:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2c02:	bb03      	cbnz	r3, 2c46 <bt_init+0x44e>
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2c04:	78a2      	ldrb	r2, [r4, #2]
    2c06:	7863      	ldrb	r3, [r4, #1]
	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);
    2c08:	f8d6 9000 	ldr.w	r9, [r6]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2c0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2c10:	f8a5 3088 	strh.w	r3, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    2c14:	88a4      	ldrh	r4, [r4, #4]
    2c16:	f011 fdd9 	bl	147cc <_impl_k_current_get>
	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);
    2c1a:	f8cd 8010 	str.w	r8, [sp, #16]
    2c1e:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2c22:	9303      	str	r3, [sp, #12]
    2c24:	9001      	str	r0, [sp, #4]
    2c26:	4a3f      	ldr	r2, [pc, #252]	; (2d24 <bt_init+0x52c>)
    2c28:	493f      	ldr	r1, [pc, #252]	; (2d28 <bt_init+0x530>)
    2c2a:	4848      	ldr	r0, [pc, #288]	; (2d4c <bt_init+0x554>)
    2c2c:	9402      	str	r4, [sp, #8]
    2c2e:	f8cd 8000 	str.w	r8, [sp]
    2c32:	4b45      	ldr	r3, [pc, #276]	; (2d48 <bt_init+0x550>)
    2c34:	47c8      	blx	r9
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2c36:	2c02      	cmp	r4, #2
    2c38:	4622      	mov	r2, r4
    2c3a:	bf28      	it	cs
    2c3c:	2202      	movcs	r2, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2c3e:	4611      	mov	r1, r2
    2c40:	483e      	ldr	r0, [pc, #248]	; (2d3c <bt_init+0x544>)
    2c42:	f011 fdc9 	bl	147d8 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2c46:	980c      	ldr	r0, [sp, #48]	; 0x30
    2c48:	f010 fd46 	bl	136d8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2c4c:	2108      	movs	r1, #8
    2c4e:	f640 4001 	movw	r0, #3073	; 0xc01
    2c52:	f7ff fa7b 	bl	214c <bt_hci_cmd_create>
	if (!buf) {
    2c56:	4604      	mov	r4, r0
    2c58:	2800      	cmp	r0, #0
    2c5a:	d05d      	beq.n	2d18 <bt_init+0x520>
	ev = net_buf_add(buf, sizeof(*ev));
    2c5c:	2108      	movs	r1, #8
    2c5e:	4408      	add	r0, r1
    2c60:	f010 fd6c 	bl	1373c <net_buf_simple_add>
	dst[0] = val;
    2c64:	2310      	movs	r3, #16
    2c66:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2c68:	2388      	movs	r3, #136	; 0x88
    2c6a:	7043      	strb	r3, [r0, #1]
    2c6c:	2302      	movs	r3, #2
	dst[0] = val;
    2c6e:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    2c70:	70c3      	strb	r3, [r0, #3]
    2c72:	2320      	movs	r3, #32
	dst[0] = val;
    2c74:	7082      	strb	r2, [r0, #2]
    2c76:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2c78:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2c7a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2c7c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2c7e:	4621      	mov	r1, r4
    2c80:	f640 4001 	movw	r0, #3073	; 0xc01
    2c84:	f7ff fac6 	bl	2214 <bt_hci_cmd_send_sync>
	if (err) {
    2c88:	4604      	mov	r4, r0
    2c8a:	2800      	cmp	r0, #0
    2c8c:	f47f ae9e 	bne.w	29cc <bt_init+0x1d4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2c90:	4601      	mov	r1, r0
    2c92:	aa0c      	add	r2, sp, #48	; 0x30
    2c94:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2c98:	f7ff fabc 	bl	2214 <bt_hci_cmd_send_sync>
    2c9c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2d40 <bt_init+0x548>
	if (err) {
    2ca0:	2800      	cmp	r0, #0
    2ca2:	f000 80a4 	beq.w	2dee <bt_init+0x5f6>
		BT_WARN("Vendor HCI extensions not available");
    2ca6:	f8cd 8004 	str.w	r8, [sp, #4]
    2caa:	f8cd 8000 	str.w	r8, [sp]
    2cae:	6834      	ldr	r4, [r6, #0]
    2cb0:	4b27      	ldr	r3, [pc, #156]	; (2d50 <bt_init+0x558>)
    2cb2:	4a28      	ldr	r2, [pc, #160]	; (2d54 <bt_init+0x55c>)
    2cb4:	491c      	ldr	r1, [pc, #112]	; (2d28 <bt_init+0x530>)
    2cb6:	4828      	ldr	r0, [pc, #160]	; (2d58 <bt_init+0x560>)
		BT_WARN("Failed to read supported vendor commands");
    2cb8:	47a0      	blx	r4
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2cba:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2cbc:	2207      	movs	r2, #7
    2cbe:	a90c      	add	r1, sp, #48	; 0x30
    2cc0:	4826      	ldr	r0, [pc, #152]	; (2d5c <bt_init+0x564>)
    2cc2:	930c      	str	r3, [sp, #48]	; 0x30
    2cc4:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    2cc8:	f7fe ffa9 	bl	1c1e <memcmp>
    2ccc:	2800      	cmp	r0, #0
    2cce:	f040 8111 	bne.w	2ef4 <bt_init+0x6fc>
		BT_DBG("No public address. Trying to set static random.");
    2cd2:	6834      	ldr	r4, [r6, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2cd4:	f011 fd7a 	bl	147cc <_impl_k_current_get>
    2cd8:	4b21      	ldr	r3, [pc, #132]	; (2d60 <bt_init+0x568>)
    2cda:	9001      	str	r0, [sp, #4]
    2cdc:	f8cd 8008 	str.w	r8, [sp, #8]
    2ce0:	f8cd 8000 	str.w	r8, [sp]
    2ce4:	4a0f      	ldr	r2, [pc, #60]	; (2d24 <bt_init+0x52c>)
    2ce6:	4910      	ldr	r1, [pc, #64]	; (2d28 <bt_init+0x530>)
    2ce8:	481e      	ldr	r0, [pc, #120]	; (2d64 <bt_init+0x56c>)
    2cea:	47a0      	blx	r4
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2cec:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2cf0:	07db      	lsls	r3, r3, #31
    2cf2:	f100 8120 	bmi.w	2f36 <bt_init+0x73e>
		BT_WARN("Read Static Addresses command not available");
    2cf6:	f8cd 8004 	str.w	r8, [sp, #4]
    2cfa:	f8cd 8000 	str.w	r8, [sp]
    2cfe:	6834      	ldr	r4, [r6, #0]
    2d00:	4b19      	ldr	r3, [pc, #100]	; (2d68 <bt_init+0x570>)
    2d02:	4a14      	ldr	r2, [pc, #80]	; (2d54 <bt_init+0x55c>)
    2d04:	4908      	ldr	r1, [pc, #32]	; (2d28 <bt_init+0x530>)
    2d06:	4819      	ldr	r0, [pc, #100]	; (2d6c <bt_init+0x574>)
    2d08:	e125      	b.n	2f56 <bt_init+0x75e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2d0a:	2102      	movs	r1, #2
    2d0c:	f640 406d 	movw	r0, #3181	; 0xc6d
    2d10:	f7ff fa1c 	bl	214c <bt_hci_cmd_create>
		if (!buf) {
    2d14:	4680      	mov	r8, r0
    2d16:	bb58      	cbnz	r0, 2d70 <bt_init+0x578>
		return -ENOBUFS;
    2d18:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2d1c:	e656      	b.n	29cc <bt_init+0x1d4>
    2d1e:	bf00      	nop
    2d20:	00015ae7 	.word	0x00015ae7
    2d24:	0001587b 	.word	0x0001587b
    2d28:	0001679c 	.word	0x0001679c
    2d2c:	00015e84 	.word	0x00015e84
    2d30:	20003ad8 	.word	0x20003ad8
    2d34:	00015b1b 	.word	0x00015b1b
    2d38:	00015ed7 	.word	0x00015ed7
    2d3c:	20003aec 	.word	0x20003aec
    2d40:	00015359 	.word	0x00015359
    2d44:	00015b76 	.word	0x00015b76
    2d48:	00015b01 	.word	0x00015b01
    2d4c:	00015f0b 	.word	0x00015f0b
    2d50:	00015bcd 	.word	0x00015bcd
    2d54:	000167d7 	.word	0x000167d7
    2d58:	00015f43 	.word	0x00015f43
    2d5c:	20003a60 	.word	0x20003a60
    2d60:	00015bd9 	.word	0x00015bd9
    2d64:	00016077 	.word	0x00016077
    2d68:	00015bae 	.word	0x00015bae
    2d6c:	00016125 	.word	0x00016125
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2d70:	2102      	movs	r1, #2
    2d72:	3008      	adds	r0, #8
    2d74:	f010 fce2 	bl	1373c <net_buf_simple_add>
		cp_le->le = 0x01;
    2d78:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2d7a:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2d7c:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2d7e:	4622      	mov	r2, r4
    2d80:	4641      	mov	r1, r8
    2d82:	f640 406d 	movw	r0, #3181	; 0xc6d
    2d86:	f7ff fa45 	bl	2214 <bt_hci_cmd_send_sync>
		if (err) {
    2d8a:	4604      	mov	r4, r0
    2d8c:	2800      	cmp	r0, #0
    2d8e:	f43f aea9 	beq.w	2ae4 <bt_init+0x2ec>
    2d92:	e61b      	b.n	29cc <bt_init+0x1d4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2d94:	aa0c      	add	r2, sp, #48	; 0x30
    2d96:	2100      	movs	r1, #0
    2d98:	f242 002f 	movw	r0, #8239	; 0x202f
    2d9c:	f7ff fa3a 	bl	2214 <bt_hci_cmd_send_sync>
		if (err) {
    2da0:	4604      	mov	r4, r0
    2da2:	2800      	cmp	r0, #0
    2da4:	f47f ae12 	bne.w	29cc <bt_init+0x1d4>
		rp = (void *)rsp->data;
    2da8:	980c      	ldr	r0, [sp, #48]	; 0x30
    2daa:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2dac:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2db0:	f8b3 9003 	ldrh.w	r9, [r3, #3]
		net_buf_unref(rsp);
    2db4:	f010 fc90 	bl	136d8 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2db8:	2104      	movs	r1, #4
    2dba:	f242 0024 	movw	r0, #8228	; 0x2024
    2dbe:	f7ff f9c5 	bl	214c <bt_hci_cmd_create>
		if (!buf) {
    2dc2:	4680      	mov	r8, r0
    2dc4:	2800      	cmp	r0, #0
    2dc6:	d0a7      	beq.n	2d18 <bt_init+0x520>
		cp = net_buf_add(buf, sizeof(*cp));
    2dc8:	2104      	movs	r1, #4
    2dca:	3008      	adds	r0, #8
    2dcc:	f010 fcb6 	bl	1373c <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2dd0:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2dd2:	f8a0 a000 	strh.w	sl, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2dd6:	f8a0 9002 	strh.w	r9, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2dda:	4641      	mov	r1, r8
    2ddc:	f242 0024 	movw	r0, #8228	; 0x2024
    2de0:	f7ff fa18 	bl	2214 <bt_hci_cmd_send_sync>
		if (err) {
    2de4:	4604      	mov	r4, r0
    2de6:	2800      	cmp	r0, #0
    2de8:	f43f aeab 	beq.w	2b42 <bt_init+0x34a>
    2dec:	e5ee      	b.n	29cc <bt_init+0x1d4>
	rp.info = (void *)rsp->data;
    2dee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    2df0:	f8d6 9000 	ldr.w	r9, [r6]
	rp.info = (void *)rsp->data;
    2df4:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    2df6:	4979      	ldr	r1, [pc, #484]	; (2fdc <bt_init+0x7e4>)
    2df8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    2dfc:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    2dfe:	2b03      	cmp	r3, #3
		return plat_str[platform];
    2e00:	bf96      	itet	ls
    2e02:	4a77      	ldrls	r2, [pc, #476]	; (2fe0 <bt_init+0x7e8>)
	return "unknown";
    2e04:	4a77      	ldrhi	r2, [pc, #476]	; (2fe4 <bt_init+0x7ec>)
		return plat_str[platform];
    2e06:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2e0a:	9201      	str	r2, [sp, #4]
    2e0c:	4b76      	ldr	r3, [pc, #472]	; (2fe8 <bt_init+0x7f0>)
    2e0e:	4a77      	ldr	r2, [pc, #476]	; (2fec <bt_init+0x7f4>)
    2e10:	f8cd 800c 	str.w	r8, [sp, #12]
    2e14:	f8cd 8000 	str.w	r8, [sp]
    2e18:	4875      	ldr	r0, [pc, #468]	; (2ff0 <bt_init+0x7f8>)
    2e1a:	47c8      	blx	r9
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2e1c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2e20:	f8d6 9000 	ldr.w	r9, [r6]
    2e24:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2e28:	2b02      	cmp	r3, #2
    2e2a:	d13d      	bne.n	2ea8 <bt_init+0x6b0>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2e2c:	2a02      	cmp	r2, #2
    2e2e:	d83b      	bhi.n	2ea8 <bt_init+0x6b0>
		return nordic_str[variant];
    2e30:	4b70      	ldr	r3, [pc, #448]	; (2ff4 <bt_init+0x7fc>)
    2e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2e36:	9202      	str	r2, [sp, #8]
    2e38:	9301      	str	r3, [sp, #4]
    2e3a:	4a6c      	ldr	r2, [pc, #432]	; (2fec <bt_init+0x7f4>)
    2e3c:	4b6a      	ldr	r3, [pc, #424]	; (2fe8 <bt_init+0x7f0>)
    2e3e:	4967      	ldr	r1, [pc, #412]	; (2fdc <bt_init+0x7e4>)
    2e40:	486d      	ldr	r0, [pc, #436]	; (2ff8 <bt_init+0x800>)
    2e42:	f8cd 800c 	str.w	r8, [sp, #12]
    2e46:	f8cd 8000 	str.w	r8, [sp]
    2e4a:	47c8      	blx	r9
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2e4c:	7963      	ldrb	r3, [r4, #5]
    2e4e:	f8d6 9000 	ldr.w	r9, [r6]
    2e52:	9706      	str	r7, [sp, #24]
    2e54:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2e58:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    2e5a:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2e5c:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
    2e60:	bf98      	it	ls
    2e62:	4a66      	ldrls	r2, [pc, #408]	; (2ffc <bt_init+0x804>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2e64:	9104      	str	r1, [sp, #16]
    2e66:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    2e68:	bf94      	ite	ls
    2e6a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2e6e:	4a5d      	ldrhi	r2, [pc, #372]	; (2fe4 <bt_init+0x7ec>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2e70:	9103      	str	r1, [sp, #12]
    2e72:	9302      	str	r3, [sp, #8]
    2e74:	4959      	ldr	r1, [pc, #356]	; (2fdc <bt_init+0x7e4>)
    2e76:	4b5c      	ldr	r3, [pc, #368]	; (2fe8 <bt_init+0x7f0>)
    2e78:	9201      	str	r2, [sp, #4]
    2e7a:	4861      	ldr	r0, [pc, #388]	; (3000 <bt_init+0x808>)
    2e7c:	4a5b      	ldr	r2, [pc, #364]	; (2fec <bt_init+0x7f4>)
    2e7e:	9700      	str	r7, [sp, #0]
    2e80:	47c8      	blx	r9
	net_buf_unref(rsp);
    2e82:	980c      	ldr	r0, [sp, #48]	; 0x30
    2e84:	f010 fc28 	bl	136d8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2e88:	aa0c      	add	r2, sp, #48	; 0x30
    2e8a:	2100      	movs	r1, #0
    2e8c:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2e90:	f7ff f9c0 	bl	2214 <bt_hci_cmd_send_sync>
	if (err) {
    2e94:	4604      	mov	r4, r0
    2e96:	b148      	cbz	r0, 2eac <bt_init+0x6b4>
		BT_WARN("Failed to read supported vendor features");
    2e98:	9701      	str	r7, [sp, #4]
    2e9a:	9700      	str	r7, [sp, #0]
    2e9c:	6834      	ldr	r4, [r6, #0]
    2e9e:	4b52      	ldr	r3, [pc, #328]	; (2fe8 <bt_init+0x7f0>)
    2ea0:	4a58      	ldr	r2, [pc, #352]	; (3004 <bt_init+0x80c>)
    2ea2:	494e      	ldr	r1, [pc, #312]	; (2fdc <bt_init+0x7e4>)
    2ea4:	4858      	ldr	r0, [pc, #352]	; (3008 <bt_init+0x810>)
    2ea6:	e707      	b.n	2cb8 <bt_init+0x4c0>
		return "unknown";
    2ea8:	4b4e      	ldr	r3, [pc, #312]	; (2fe4 <bt_init+0x7ec>)
    2eaa:	e7c4      	b.n	2e36 <bt_init+0x63e>
	rp.cmds = (void *)rsp->data;
    2eac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2eae:	4857      	ldr	r0, [pc, #348]	; (300c <bt_init+0x814>)
    2eb0:	6899      	ldr	r1, [r3, #8]
    2eb2:	2202      	movs	r2, #2
    2eb4:	3101      	adds	r1, #1
    2eb6:	f7fe fec7 	bl	1c48 <memcpy>
	net_buf_unref(rsp);
    2eba:	980c      	ldr	r0, [sp, #48]	; 0x30
    2ebc:	f010 fc0c 	bl	136d8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2ec0:	aa0c      	add	r2, sp, #48	; 0x30
    2ec2:	4621      	mov	r1, r4
    2ec4:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2ec8:	f7ff f9a4 	bl	2214 <bt_hci_cmd_send_sync>
	if (err) {
    2ecc:	b138      	cbz	r0, 2ede <bt_init+0x6e6>
		BT_WARN("Failed to read supported vendor commands");
    2ece:	9701      	str	r7, [sp, #4]
    2ed0:	9700      	str	r7, [sp, #0]
    2ed2:	6834      	ldr	r4, [r6, #0]
    2ed4:	4b44      	ldr	r3, [pc, #272]	; (2fe8 <bt_init+0x7f0>)
    2ed6:	4a4b      	ldr	r2, [pc, #300]	; (3004 <bt_init+0x80c>)
    2ed8:	4940      	ldr	r1, [pc, #256]	; (2fdc <bt_init+0x7e4>)
    2eda:	484d      	ldr	r0, [pc, #308]	; (3010 <bt_init+0x818>)
    2edc:	e6ec      	b.n	2cb8 <bt_init+0x4c0>
	rp.feat = (void *)rsp->data;
    2ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2ee0:	484c      	ldr	r0, [pc, #304]	; (3014 <bt_init+0x81c>)
    2ee2:	6899      	ldr	r1, [r3, #8]
    2ee4:	2201      	movs	r2, #1
    2ee6:	4411      	add	r1, r2
    2ee8:	f7fe feae 	bl	1c48 <memcpy>
	net_buf_unref(rsp);
    2eec:	980c      	ldr	r0, [sp, #48]	; 0x30
    2eee:	f010 fbf3 	bl	136d8 <net_buf_unref>
    2ef2:	e6e2      	b.n	2cba <bt_init+0x4c2>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2ef4:	4b48      	ldr	r3, [pc, #288]	; (3018 <bt_init+0x820>)
    2ef6:	6818      	ldr	r0, [r3, #0]
    2ef8:	889a      	ldrh	r2, [r3, #4]
    2efa:	900a      	str	r0, [sp, #40]	; 0x28
    2efc:	799b      	ldrb	r3, [r3, #6]
    2efe:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    2f02:	a90a      	add	r1, sp, #40	; 0x28
    2f04:	2207      	movs	r2, #7
    2f06:	4845      	ldr	r0, [pc, #276]	; (301c <bt_init+0x824>)
    2f08:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    2f0c:	f7fe fe87 	bl	1c1e <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2f10:	2800      	cmp	r0, #0
    2f12:	f43f aede 	beq.w	2cd2 <bt_init+0x4da>
		bt_dev_show_info();
    2f16:	f7ff fb1b 	bl	2550 <bt_dev_show_info>
		err = bt_conn_init();
    2f1a:	f002 fa93 	bl	5444 <bt_conn_init>
		if (err) {
    2f1e:	4604      	mov	r4, r0
    2f20:	2800      	cmp	r0, #0
    2f22:	f47f ad53 	bne.w	29cc <bt_init+0x1d4>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2f26:	2102      	movs	r1, #2
    2f28:	483d      	ldr	r0, [pc, #244]	; (3020 <bt_init+0x828>)
    2f2a:	f7ff f856 	bl	1fda <atomic_or>
	bt_le_scan_update(false);
    2f2e:	4620      	mov	r0, r4
    2f30:	f7ff fc30 	bl	2794 <bt_le_scan_update>
    2f34:	e54a      	b.n	29cc <bt_init+0x1d4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2f36:	aa09      	add	r2, sp, #36	; 0x24
    2f38:	2100      	movs	r1, #0
    2f3a:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2f3e:	f7ff f969 	bl	2214 <bt_hci_cmd_send_sync>
		if (err) {
    2f42:	b150      	cbz	r0, 2f5a <bt_init+0x762>
			BT_WARN("Failed to read static addresses");
    2f44:	f8cd 8004 	str.w	r8, [sp, #4]
    2f48:	f8cd 8000 	str.w	r8, [sp]
    2f4c:	6834      	ldr	r4, [r6, #0]
    2f4e:	4b35      	ldr	r3, [pc, #212]	; (3024 <bt_init+0x82c>)
    2f50:	4a2c      	ldr	r2, [pc, #176]	; (3004 <bt_init+0x80c>)
    2f52:	4922      	ldr	r1, [pc, #136]	; (2fdc <bt_init+0x7e4>)
    2f54:	4834      	ldr	r0, [pc, #208]	; (3028 <bt_init+0x830>)
		BT_WARN("Read Static Addresses command not available");
    2f56:	47a0      	blx	r4
    2f58:	e02a      	b.n	2fb0 <bt_init+0x7b8>
		rp = (void *)rsp->data;
    2f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f5c:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2f5e:	784b      	ldrb	r3, [r1, #1]
    2f60:	b1cb      	cbz	r3, 2f96 <bt_init+0x79e>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2f62:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2f64:	2206      	movs	r2, #6
    2f66:	3102      	adds	r1, #2
    2f68:	4830      	ldr	r0, [pc, #192]	; (302c <bt_init+0x834>)
    2f6a:	702b      	strb	r3, [r5, #0]
    2f6c:	f7fe fe6c 	bl	1c48 <memcpy>
			net_buf_unref(rsp);
    2f70:	9809      	ldr	r0, [sp, #36]	; 0x24
    2f72:	f010 fbb1 	bl	136d8 <net_buf_unref>
		return bt_set_static_addr();
    2f76:	f7ff fab7 	bl	24e8 <bt_set_static_addr>
    2f7a:	4604      	mov	r4, r0
		if (err) {
    2f7c:	2800      	cmp	r0, #0
    2f7e:	d0ca      	beq.n	2f16 <bt_init+0x71e>
			BT_ERR("Unable to set identity address");
    2f80:	f8cd 8004 	str.w	r8, [sp, #4]
    2f84:	f8cd 8000 	str.w	r8, [sp]
    2f88:	6835      	ldr	r5, [r6, #0]
    2f8a:	4b29      	ldr	r3, [pc, #164]	; (3030 <bt_init+0x838>)
    2f8c:	4a29      	ldr	r2, [pc, #164]	; (3034 <bt_init+0x83c>)
    2f8e:	4913      	ldr	r1, [pc, #76]	; (2fdc <bt_init+0x7e4>)
    2f90:	4829      	ldr	r0, [pc, #164]	; (3038 <bt_init+0x840>)
    2f92:	47a8      	blx	r5
    2f94:	e51a      	b.n	29cc <bt_init+0x1d4>
		BT_WARN("No static addresses stored in controller");
    2f96:	f8cd 8004 	str.w	r8, [sp, #4]
    2f9a:	f8cd 8000 	str.w	r8, [sp]
    2f9e:	4827      	ldr	r0, [pc, #156]	; (303c <bt_init+0x844>)
    2fa0:	6834      	ldr	r4, [r6, #0]
    2fa2:	4b20      	ldr	r3, [pc, #128]	; (3024 <bt_init+0x82c>)
    2fa4:	4a17      	ldr	r2, [pc, #92]	; (3004 <bt_init+0x80c>)
    2fa6:	490d      	ldr	r1, [pc, #52]	; (2fdc <bt_init+0x7e4>)
    2fa8:	47a0      	blx	r4
		net_buf_unref(rsp);
    2faa:	9809      	ldr	r0, [sp, #36]	; 0x24
    2fac:	f010 fb94 	bl	136d8 <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2fb0:	481a      	ldr	r0, [pc, #104]	; (301c <bt_init+0x824>)
    2fb2:	f7ff fa8b 	bl	24cc <bt_addr_le_create_static>
		if (err) {
    2fb6:	4604      	mov	r4, r0
    2fb8:	2800      	cmp	r0, #0
    2fba:	d1e1      	bne.n	2f80 <bt_init+0x788>
		BT_WARN("Using temporary static random address %s",
    2fbc:	481b      	ldr	r0, [pc, #108]	; (302c <bt_init+0x834>)
    2fbe:	6834      	ldr	r4, [r6, #0]
    2fc0:	f7fe fec8 	bl	1d54 <bt_addr_str>
    2fc4:	f8cd 8008 	str.w	r8, [sp, #8]
    2fc8:	9001      	str	r0, [sp, #4]
    2fca:	f8cd 8000 	str.w	r8, [sp]
    2fce:	4b15      	ldr	r3, [pc, #84]	; (3024 <bt_init+0x82c>)
    2fd0:	4a0c      	ldr	r2, [pc, #48]	; (3004 <bt_init+0x80c>)
    2fd2:	4902      	ldr	r1, [pc, #8]	; (2fdc <bt_init+0x7e4>)
    2fd4:	481a      	ldr	r0, [pc, #104]	; (3040 <bt_init+0x848>)
    2fd6:	47a0      	blx	r4
    2fd8:	e7cd      	b.n	2f76 <bt_init+0x77e>
    2fda:	bf00      	nop
    2fdc:	0001679c 	.word	0x0001679c
    2fe0:	00016acc 	.word	0x00016acc
    2fe4:	00016bd4 	.word	0x00016bd4
    2fe8:	00015bcd 	.word	0x00015bcd
    2fec:	00015c59 	.word	0x00015c59
    2ff0:	00015f77 	.word	0x00015f77
    2ff4:	00016ac0 	.word	0x00016ac0
    2ff8:	00015fa0 	.word	0x00015fa0
    2ffc:	00016bc4 	.word	0x00016bc4
    3000:	00015fc8 	.word	0x00015fc8
    3004:	000167d7 	.word	0x000167d7
    3008:	00016005 	.word	0x00016005
    300c:	20003abf 	.word	0x20003abf
    3010:	0001603e 	.word	0x0001603e
    3014:	20003abe 	.word	0x20003abe
    3018:	000152a4 	.word	0x000152a4
    301c:	20003a60 	.word	0x20003a60
    3020:	20003ad0 	.word	0x20003ad0
    3024:	00015bae 	.word	0x00015bae
    3028:	000160bc 	.word	0x000160bc
    302c:	20003a61 	.word	0x20003a61
    3030:	00015bd9 	.word	0x00015bd9
    3034:	00016754 	.word	0x00016754
    3038:	0001619a 	.word	0x0001619a
    303c:	000160ec 	.word	0x000160ec
    3040:	00016161 	.word	0x00016161

00003044 <init_work>:

static void init_work(struct k_work *work)
{
    3044:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    3046:	f7ff fbd7 	bl	27f8 <bt_init>
	if (ready_cb) {
    304a:	4b03      	ldr	r3, [pc, #12]	; (3058 <init_work+0x14>)
    304c:	681b      	ldr	r3, [r3, #0]
    304e:	b113      	cbz	r3, 3056 <init_work+0x12>
		ready_cb(err);
	}
}
    3050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    3054:	4718      	bx	r3
    3056:	bd10      	pop	{r4, pc}
    3058:	200002d4 	.word	0x200002d4

0000305c <hci_le_set_phy.isra.27>:
static int hci_le_set_phy(struct bt_conn *conn)
    305c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    305e:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    3060:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    3062:	f242 0032 	movw	r0, #8242	; 0x2032
    3066:	f7ff f871 	bl	214c <bt_hci_cmd_create>
	if (!buf) {
    306a:	4605      	mov	r5, r0
    306c:	b198      	cbz	r0, 3096 <hci_le_set_phy.isra.27+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    306e:	2107      	movs	r1, #7
    3070:	3008      	adds	r0, #8
    3072:	f010 fb63 	bl	1373c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3076:	8823      	ldrh	r3, [r4, #0]
    3078:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    307a:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    307c:	2302      	movs	r3, #2
	cp->all_phys = 0;
    307e:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3080:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3082:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    3084:	7144      	strb	r4, [r0, #5]
    3086:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    3088:	4629      	mov	r1, r5
    308a:	f242 0032 	movw	r0, #8242	; 0x2032
    308e:	f7ff fae1 	bl	2654 <bt_hci_cmd_send>
	return 0;
    3092:	4620      	mov	r0, r4
    3094:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    3096:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    309a:	bd38      	pop	{r3, r4, r5, pc}

0000309c <hci_le_set_data_len.isra.28>:
static int hci_le_set_data_len(struct bt_conn *conn)
    309c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    309e:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    30a0:	aa01      	add	r2, sp, #4
    30a2:	2100      	movs	r1, #0
    30a4:	f242 002f 	movw	r0, #8239	; 0x202f
    30a8:	f7ff f8b4 	bl	2214 <bt_hci_cmd_send_sync>
	if (err) {
    30ac:	b9d8      	cbnz	r0, 30e6 <hci_le_set_data_len.isra.28+0x4a>
	rp = (void *)rsp->data;
    30ae:	9801      	ldr	r0, [sp, #4]
    30b0:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    30b2:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    30b6:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    30ba:	f010 fb0d 	bl	136d8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    30be:	2106      	movs	r1, #6
    30c0:	f242 0022 	movw	r0, #8226	; 0x2022
    30c4:	f7ff f842 	bl	214c <bt_hci_cmd_create>
	if (!buf) {
    30c8:	4604      	mov	r4, r0
    30ca:	b170      	cbz	r0, 30ea <hci_le_set_data_len.isra.28+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    30cc:	2106      	movs	r1, #6
    30ce:	3008      	adds	r0, #8
    30d0:	f010 fb34 	bl	1373c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    30d4:	883b      	ldrh	r3, [r7, #0]
    30d6:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    30d8:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    30da:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    30dc:	4621      	mov	r1, r4
    30de:	f242 0022 	movw	r0, #8226	; 0x2022
    30e2:	f7ff fab7 	bl	2654 <bt_hci_cmd_send>
}
    30e6:	b003      	add	sp, #12
    30e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    30ea:	f06f 0036 	mvn.w	r0, #54	; 0x36
    30ee:	e7fa      	b.n	30e6 <hci_le_set_data_len.isra.28+0x4a>

000030f0 <le_enh_conn_complete>:
{
    30f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    30f4:	4f74      	ldr	r7, [pc, #464]	; (32c8 <le_enh_conn_complete+0x1d8>)
	u16_t handle = sys_le16_to_cpu(evt->handle);
    30f6:	f8b0 8001 	ldrh.w	r8, [r0, #1]
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    30fa:	f8d7 a000 	ldr.w	sl, [r7]
    30fe:	4e73      	ldr	r6, [pc, #460]	; (32cc <le_enh_conn_complete+0x1dc>)
{
    3100:	b08f      	sub	sp, #60	; 0x3c
    3102:	4605      	mov	r5, r0
    3104:	f011 fb62 	bl	147cc <_impl_k_current_get>
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    3108:	1d2c      	adds	r4, r5, #4
    310a:	782b      	ldrb	r3, [r5, #0]
    310c:	78ea      	ldrb	r2, [r5, #3]
    310e:	9309      	str	r3, [sp, #36]	; 0x24
    3110:	4683      	mov	fp, r0
    3112:	4620      	mov	r0, r4
    3114:	9208      	str	r2, [sp, #32]
    3116:	f7fe fe43 	bl	1da0 <bt_addr_le_str>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    311a:	fa1f f988 	uxth.w	r9, r8
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    311e:	9a08      	ldr	r2, [sp, #32]
    3120:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3122:	9005      	str	r0, [sp, #20]
    3124:	9204      	str	r2, [sp, #16]
    3126:	9302      	str	r3, [sp, #8]
    3128:	9606      	str	r6, [sp, #24]
    312a:	4b69      	ldr	r3, [pc, #420]	; (32d0 <le_enh_conn_complete+0x1e0>)
    312c:	f8cd 900c 	str.w	r9, [sp, #12]
    3130:	e88d 0840 	stmia.w	sp, {r6, fp}
    3134:	4a67      	ldr	r2, [pc, #412]	; (32d4 <le_enh_conn_complete+0x1e4>)
    3136:	4968      	ldr	r1, [pc, #416]	; (32d8 <le_enh_conn_complete+0x1e8>)
    3138:	4868      	ldr	r0, [pc, #416]	; (32dc <le_enh_conn_complete+0x1ec>)
    313a:	47d0      	blx	sl
	if (evt->status) {
    313c:	782b      	ldrb	r3, [r5, #0]
    313e:	b183      	cbz	r3, 3162 <le_enh_conn_complete+0x72>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    3140:	2102      	movs	r1, #2
    3142:	2000      	movs	r0, #0
    3144:	f001 fcf4 	bl	4b30 <bt_conn_lookup_state_le>
		if (!conn) {
    3148:	4604      	mov	r4, r0
    314a:	b138      	cbz	r0, 315c <le_enh_conn_complete+0x6c>
		conn->err = evt->status;
    314c:	782b      	ldrb	r3, [r5, #0]
    314e:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3150:	2100      	movs	r1, #0
    3152:	f001 fdcb 	bl	4cec <bt_conn_set_state>
		bt_conn_unref(conn);
    3156:	4620      	mov	r0, r4
    3158:	f001 fd08 	bl	4b6c <bt_conn_unref>
}
    315c:	b00f      	add	sp, #60	; 0x3c
    315e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    3162:	4621      	mov	r1, r4
    3164:	a80c      	add	r0, sp, #48	; 0x30
    3166:	f7fe ff35 	bl	1fd4 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    316a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    316e:	3b02      	subs	r3, #2
    3170:	b2db      	uxtb	r3, r3
    3172:	2b01      	cmp	r3, #1
    3174:	d828      	bhi.n	31c8 <le_enh_conn_complete+0xd8>
    3176:	2206      	movs	r2, #6
    3178:	f105 0111 	add.w	r1, r5, #17
    317c:	f10d 0029 	add.w	r0, sp, #41	; 0x29
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3180:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    3184:	f7fe fd60 	bl	1c48 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    3188:	2301      	movs	r3, #1
    318a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    318e:	2102      	movs	r1, #2
    3190:	a80c      	add	r0, sp, #48	; 0x30
    3192:	f001 fccd 	bl	4b30 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    3196:	78eb      	ldrb	r3, [r5, #3]
    3198:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    319a:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    319c:	d109      	bne.n	31b2 <le_enh_conn_complete+0xc2>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    319e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    31a2:	484f      	ldr	r0, [pc, #316]	; (32e0 <le_enh_conn_complete+0x1f0>)
    31a4:	f7fe ff2a 	bl	1ffc <atomic_and>
		if (!conn) {
    31a8:	b99c      	cbnz	r4, 31d2 <le_enh_conn_complete+0xe2>
			conn = bt_conn_add_le(&id_addr);
    31aa:	a80c      	add	r0, sp, #48	; 0x30
    31ac:	f001 fc10 	bl	49d0 <bt_conn_add_le>
    31b0:	4604      	mov	r4, r0
	if (!conn) {
    31b2:	b974      	cbnz	r4, 31d2 <le_enh_conn_complete+0xe2>
		BT_ERR("Unable to add new conn for handle %u", handle);
    31b4:	e88d 0240 	stmia.w	sp, {r6, r9}
    31b8:	9602      	str	r6, [sp, #8]
    31ba:	683c      	ldr	r4, [r7, #0]
    31bc:	4b44      	ldr	r3, [pc, #272]	; (32d0 <le_enh_conn_complete+0x1e0>)
    31be:	4a49      	ldr	r2, [pc, #292]	; (32e4 <le_enh_conn_complete+0x1f4>)
    31c0:	4945      	ldr	r1, [pc, #276]	; (32d8 <le_enh_conn_complete+0x1e8>)
    31c2:	4849      	ldr	r0, [pc, #292]	; (32e8 <le_enh_conn_complete+0x1f8>)
    31c4:	47a0      	blx	r4
		return;
    31c6:	e7c9      	b.n	315c <le_enh_conn_complete+0x6c>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    31c8:	4621      	mov	r1, r4
    31ca:	a80a      	add	r0, sp, #40	; 0x28
    31cc:	f7fe ff02 	bl	1fd4 <bt_addr_le_copy>
    31d0:	e7dd      	b.n	318e <le_enh_conn_complete+0x9e>
	conn->handle   = handle;
    31d2:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    31d4:	a90c      	add	r1, sp, #48	; 0x30
	conn->handle   = handle;
    31d6:	f820 8b44 	strh.w	r8, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    31da:	f7fe fefb 	bl	1fd4 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    31de:	7e2a      	ldrb	r2, [r5, #24]
    31e0:	7deb      	ldrb	r3, [r5, #23]
    31e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    31e6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    31ea:	7eaa      	ldrb	r2, [r5, #26]
    31ec:	7e6b      	ldrb	r3, [r5, #25]
    31ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    31f2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    31f6:	7eeb      	ldrb	r3, [r5, #27]
    31f8:	7f2a      	ldrb	r2, [r5, #28]
    31fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    31fe:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    3202:	78ee      	ldrb	r6, [r5, #3]
    3204:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    3206:	2e01      	cmp	r6, #1
    3208:	d11a      	bne.n	3240 <le_enh_conn_complete+0x150>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    320a:	4f38      	ldr	r7, [pc, #224]	; (32ec <le_enh_conn_complete+0x1fc>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    320c:	a90a      	add	r1, sp, #40	; 0x28
    320e:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    3212:	f7fe fedf 	bl	1fd4 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    3216:	4639      	mov	r1, r7
    3218:	f104 0052 	add.w	r0, r4, #82	; 0x52
    321c:	f7fe feda 	bl	1fd4 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3220:	2107      	movs	r1, #7
    3222:	f107 0070 	add.w	r0, r7, #112	; 0x70
    3226:	f7fe ff83 	bl	2130 <atomic_test_bit>
    322a:	b148      	cbz	r0, 3240 <le_enh_conn_complete+0x150>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    322c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    3230:	2200      	movs	r2, #0
    3232:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3236:	4313      	orrs	r3, r2
    3238:	d002      	beq.n	3240 <le_enh_conn_complete+0x150>
			set_advertise_enable(true);
    323a:	4630      	mov	r0, r6
    323c:	f7ff f8fc 	bl	2438 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    3240:	2103      	movs	r1, #3
    3242:	4620      	mov	r0, r4
    3244:	f001 fd52 	bl	4cec <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    3248:	7a63      	ldrb	r3, [r4, #9]
    324a:	2b03      	cmp	r3, #3
    324c:	d118      	bne.n	3280 <le_enh_conn_complete+0x190>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    324e:	78eb      	ldrb	r3, [r5, #3]
    3250:	b123      	cbz	r3, 325c <le_enh_conn_complete+0x16c>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    3252:	4b26      	ldr	r3, [pc, #152]	; (32ec <le_enh_conn_complete+0x1fc>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    3254:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3258:	0719      	lsls	r1, r3, #28
    325a:	d518      	bpl.n	328e <le_enh_conn_complete+0x19e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    325c:	2102      	movs	r1, #2
    325e:	f242 0016 	movw	r0, #8214	; 0x2016
    3262:	f7fe ff73 	bl	214c <bt_hci_cmd_create>
	if (!buf) {
    3266:	4605      	mov	r5, r0
    3268:	b188      	cbz	r0, 328e <le_enh_conn_complete+0x19e>
	cp = net_buf_add(buf, sizeof(*cp));
    326a:	2102      	movs	r1, #2
    326c:	3008      	adds	r0, #8
    326e:	f010 fa65 	bl	1373c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3272:	8823      	ldrh	r3, [r4, #0]
    3274:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    3276:	4629      	mov	r1, r5
    3278:	f242 0016 	movw	r0, #8214	; 0x2016
    327c:	f7ff f9ea 	bl	2654 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    3280:	4620      	mov	r0, r4
    3282:	f001 fc73 	bl	4b6c <bt_conn_unref>
	bt_le_scan_update(false);
    3286:	2000      	movs	r0, #0
    3288:	f7ff fa84 	bl	2794 <bt_le_scan_update>
    328c:	e766      	b.n	315c <le_enh_conn_complete+0x6c>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    328e:	4d17      	ldr	r5, [pc, #92]	; (32ec <le_enh_conn_complete+0x1fc>)
    3290:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    3294:	07d2      	lsls	r2, r2, #31
    3296:	d508      	bpl.n	32aa <le_enh_conn_complete+0x1ba>
		err = hci_le_set_phy(conn);
    3298:	4620      	mov	r0, r4
    329a:	f7ff fedf 	bl	305c <hci_le_set_phy.isra.27>
		if (!err) {
    329e:	b920      	cbnz	r0, 32aa <le_enh_conn_complete+0x1ba>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    32a0:	2180      	movs	r1, #128	; 0x80
    32a2:	1d20      	adds	r0, r4, #4
    32a4:	f7fe fe99 	bl	1fda <atomic_or>
    32a8:	e7ea      	b.n	3280 <le_enh_conn_complete+0x190>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    32aa:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    32ae:	069b      	lsls	r3, r3, #26
    32b0:	d506      	bpl.n	32c0 <le_enh_conn_complete+0x1d0>
		err = hci_le_set_data_len(conn);
    32b2:	4620      	mov	r0, r4
    32b4:	f7ff fef2 	bl	309c <hci_le_set_data_len.isra.28>
		if (!err) {
    32b8:	b910      	cbnz	r0, 32c0 <le_enh_conn_complete+0x1d0>
    32ba:	f44f 7180 	mov.w	r1, #256	; 0x100
    32be:	e7f0      	b.n	32a2 <le_enh_conn_complete+0x1b2>
	update_conn_param(conn);
    32c0:	4620      	mov	r0, r4
    32c2:	f7fe fead 	bl	2020 <update_conn_param>
    32c6:	e7db      	b.n	3280 <le_enh_conn_complete+0x190>
    32c8:	20003a5c 	.word	0x20003a5c
    32cc:	00015359 	.word	0x00015359
    32d0:	0001596e 	.word	0x0001596e
    32d4:	0001587b 	.word	0x0001587b
    32d8:	0001679c 	.word	0x0001679c
    32dc:	00016a34 	.word	0x00016a34
    32e0:	20003ad0 	.word	0x20003ad0
    32e4:	00016754 	.word	0x00016754
    32e8:	00016a68 	.word	0x00016a68
    32ec:	20003a60 	.word	0x20003a60

000032f0 <le_conn_param_neg_reply>:
{
    32f0:	b570      	push	{r4, r5, r6, lr}
    32f2:	4606      	mov	r6, r0
    32f4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    32f6:	f242 0021 	movw	r0, #8225	; 0x2021
    32fa:	2103      	movs	r1, #3
    32fc:	f7fe ff26 	bl	214c <bt_hci_cmd_create>
	if (!buf) {
    3300:	4604      	mov	r4, r0
    3302:	b160      	cbz	r0, 331e <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    3304:	2103      	movs	r1, #3
    3306:	3008      	adds	r0, #8
    3308:	f010 fa18 	bl	1373c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    330c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    330e:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    3310:	4621      	mov	r1, r4
    3312:	f242 0021 	movw	r0, #8225	; 0x2021
}
    3316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    331a:	f7ff b99b 	b.w	2654 <bt_hci_cmd_send>
}
    331e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3322:	bd70      	pop	{r4, r5, r6, pc}

00003324 <hci_tx_thread>:
{
    3324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("Started");
    3328:	4d82      	ldr	r5, [pc, #520]	; (3534 <hci_tx_thread+0x210>)
    332a:	4c83      	ldr	r4, [pc, #524]	; (3538 <hci_tx_thread+0x214>)
    332c:	682e      	ldr	r6, [r5, #0]
{
    332e:	b089      	sub	sp, #36	; 0x24
    3330:	f011 fa4c 	bl	147cc <_impl_k_current_get>
	BT_DBG("Started");
    3334:	9402      	str	r4, [sp, #8]
    3336:	9001      	str	r0, [sp, #4]
    3338:	9400      	str	r4, [sp, #0]
    333a:	4b80      	ldr	r3, [pc, #512]	; (353c <hci_tx_thread+0x218>)
    333c:	4a80      	ldr	r2, [pc, #512]	; (3540 <hci_tx_thread+0x21c>)
    333e:	4981      	ldr	r1, [pc, #516]	; (3544 <hci_tx_thread+0x220>)
    3340:	4881      	ldr	r0, [pc, #516]	; (3548 <hci_tx_thread+0x224>)
    3342:	47b0      	blx	r6
		events[0].state = K_POLL_STATE_NOT_READY;
    3344:	4b81      	ldr	r3, [pc, #516]	; (354c <hci_tx_thread+0x228>)
    3346:	4a81      	ldr	r2, [pc, #516]	; (354c <hci_tx_thread+0x228>)
    3348:	7b5b      	ldrb	r3, [r3, #13]
    334a:	f36f 1307 	bfc	r3, #4, #4
    334e:	7353      	strb	r3, [r2, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    3350:	f102 0014 	add.w	r0, r2, #20
    3354:	f001 fc54 	bl	4c00 <bt_conn_prepare_events>
		BT_DBG("Calling k_poll with %d events", ev_count);
    3358:	682e      	ldr	r6, [r5, #0]
			ev_count += bt_conn_prepare_events(&events[1]);
    335a:	f100 0901 	add.w	r9, r0, #1
    335e:	f011 fa35 	bl	147cc <_impl_k_current_get>
		BT_DBG("Calling k_poll with %d events", ev_count);
    3362:	4a77      	ldr	r2, [pc, #476]	; (3540 <hci_tx_thread+0x21c>)
    3364:	9001      	str	r0, [sp, #4]
    3366:	4977      	ldr	r1, [pc, #476]	; (3544 <hci_tx_thread+0x220>)
    3368:	4879      	ldr	r0, [pc, #484]	; (3550 <hci_tx_thread+0x22c>)
    336a:	9403      	str	r4, [sp, #12]
    336c:	f8cd 9008 	str.w	r9, [sp, #8]
    3370:	9400      	str	r4, [sp, #0]
    3372:	4b72      	ldr	r3, [pc, #456]	; (353c <hci_tx_thread+0x218>)
    3374:	47b0      	blx	r6

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    3376:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    337a:	4649      	mov	r1, r9
    337c:	4873      	ldr	r0, [pc, #460]	; (354c <hci_tx_thread+0x228>)
    337e:	f011 fe75 	bl	1506c <_impl_k_poll>
		BT_ASSERT(err == 0);
    3382:	b168      	cbz	r0, 33a0 <hci_tx_thread+0x7c>
    3384:	9401      	str	r4, [sp, #4]
    3386:	9400      	str	r4, [sp, #0]
    3388:	4b6c      	ldr	r3, [pc, #432]	; (353c <hci_tx_thread+0x218>)
    338a:	682c      	ldr	r4, [r5, #0]
    338c:	4a71      	ldr	r2, [pc, #452]	; (3554 <hci_tx_thread+0x230>)
    338e:	496d      	ldr	r1, [pc, #436]	; (3544 <hci_tx_thread+0x220>)
    3390:	4871      	ldr	r0, [pc, #452]	; (3558 <hci_tx_thread+0x234>)
	BT_ASSERT(buf);
    3392:	47a0      	blx	r4
    3394:	4040      	eors	r0, r0
    3396:	f380 8811 	msr	BASEPRI, r0
    339a:	f04f 0004 	mov.w	r0, #4
    339e:	df02      	svc	2
	BT_DBG("count %d", count);
    33a0:	682e      	ldr	r6, [r5, #0]
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    33a2:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 3594 <hci_tx_thread+0x270>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    33a6:	f011 fa11 	bl	147cc <_impl_k_current_get>
	BT_DBG("count %d", count);
    33aa:	9403      	str	r4, [sp, #12]
    33ac:	9001      	str	r0, [sp, #4]
    33ae:	f8cd 9008 	str.w	r9, [sp, #8]
    33b2:	9400      	str	r4, [sp, #0]
    33b4:	4b69      	ldr	r3, [pc, #420]	; (355c <hci_tx_thread+0x238>)
    33b6:	4a62      	ldr	r2, [pc, #392]	; (3540 <hci_tx_thread+0x21c>)
    33b8:	4962      	ldr	r1, [pc, #392]	; (3544 <hci_tx_thread+0x220>)
    33ba:	4869      	ldr	r0, [pc, #420]	; (3560 <hci_tx_thread+0x23c>)
    33bc:	47b0      	blx	r6
    33be:	4e63      	ldr	r6, [pc, #396]	; (354c <hci_tx_thread+0x228>)
	for (; count; ev++, count--) {
    33c0:	f1b9 0f00 	cmp.w	r9, #0
    33c4:	d102      	bne.n	33cc <hci_tx_thread+0xa8>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    33c6:	f011 f9d1 	bl	1476c <_impl_k_yield>
    33ca:	e7bb      	b.n	3344 <hci_tx_thread+0x20>
		BT_DBG("ev->state %u", ev->state);
    33cc:	682f      	ldr	r7, [r5, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    33ce:	f011 f9fd 	bl	147cc <_impl_k_current_get>
    33d2:	9403      	str	r4, [sp, #12]
    33d4:	7b73      	ldrb	r3, [r6, #13]
    33d6:	4a5a      	ldr	r2, [pc, #360]	; (3540 <hci_tx_thread+0x21c>)
    33d8:	9001      	str	r0, [sp, #4]
    33da:	091b      	lsrs	r3, r3, #4
    33dc:	9302      	str	r3, [sp, #8]
    33de:	9400      	str	r4, [sp, #0]
    33e0:	4b5e      	ldr	r3, [pc, #376]	; (355c <hci_tx_thread+0x238>)
    33e2:	4958      	ldr	r1, [pc, #352]	; (3544 <hci_tx_thread+0x220>)
    33e4:	485f      	ldr	r0, [pc, #380]	; (3564 <hci_tx_thread+0x240>)
    33e6:	47b8      	blx	r7
		switch (ev->state) {
    33e8:	7b73      	ldrb	r3, [r6, #13]
    33ea:	091b      	lsrs	r3, r3, #4
    33ec:	2b01      	cmp	r3, #1
    33ee:	f240 8083 	bls.w	34f8 <hci_tx_thread+0x1d4>
    33f2:	2b04      	cmp	r3, #4
    33f4:	f040 8094 	bne.w	3520 <hci_tx_thread+0x1fc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    33f8:	f896 b00c 	ldrb.w	fp, [r6, #12]
    33fc:	f1bb 0f00 	cmp.w	fp, #0
    3400:	d17e      	bne.n	3500 <hci_tx_thread+0x1dc>
	BT_DBG("calling net_buf_get");
    3402:	682f      	ldr	r7, [r5, #0]
    3404:	f011 f9e2 	bl	147cc <_impl_k_current_get>
    3408:	4b57      	ldr	r3, [pc, #348]	; (3568 <hci_tx_thread+0x244>)
    340a:	9001      	str	r0, [sp, #4]
    340c:	4a4c      	ldr	r2, [pc, #304]	; (3540 <hci_tx_thread+0x21c>)
    340e:	494d      	ldr	r1, [pc, #308]	; (3544 <hci_tx_thread+0x220>)
    3410:	4856      	ldr	r0, [pc, #344]	; (356c <hci_tx_thread+0x248>)
    3412:	9402      	str	r4, [sp, #8]
    3414:	9400      	str	r4, [sp, #0]
    3416:	47b8      	blx	r7
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3418:	4659      	mov	r1, fp
    341a:	4855      	ldr	r0, [pc, #340]	; (3570 <hci_tx_thread+0x24c>)
    341c:	f010 f932 	bl	13684 <net_buf_get>
	BT_ASSERT(buf);
    3420:	4682      	mov	sl, r0
    3422:	b938      	cbnz	r0, 3434 <hci_tx_thread+0x110>
    3424:	9401      	str	r4, [sp, #4]
    3426:	9400      	str	r4, [sp, #0]
    3428:	4b4f      	ldr	r3, [pc, #316]	; (3568 <hci_tx_thread+0x244>)
    342a:	682c      	ldr	r4, [r5, #0]
    342c:	4a49      	ldr	r2, [pc, #292]	; (3554 <hci_tx_thread+0x230>)
    342e:	4945      	ldr	r1, [pc, #276]	; (3544 <hci_tx_thread+0x220>)
    3430:	4850      	ldr	r0, [pc, #320]	; (3574 <hci_tx_thread+0x250>)
    3432:	e7ae      	b.n	3392 <hci_tx_thread+0x6e>
	BT_DBG("calling sem_take_wait");
    3434:	682f      	ldr	r7, [r5, #0]
    3436:	f011 f9c9 	bl	147cc <_impl_k_current_get>
    343a:	4b4b      	ldr	r3, [pc, #300]	; (3568 <hci_tx_thread+0x244>)
    343c:	9001      	str	r0, [sp, #4]
    343e:	4a40      	ldr	r2, [pc, #256]	; (3540 <hci_tx_thread+0x21c>)
    3440:	4940      	ldr	r1, [pc, #256]	; (3544 <hci_tx_thread+0x220>)
    3442:	484d      	ldr	r0, [pc, #308]	; (3578 <hci_tx_thread+0x254>)
    3444:	9402      	str	r4, [sp, #8]
    3446:	9400      	str	r4, [sp, #0]
    3448:	47b8      	blx	r7
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    344a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    344e:	484b      	ldr	r0, [pc, #300]	; (357c <hci_tx_thread+0x258>)
    3450:	f011 f9f3 	bl	1483a <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    3454:	f8d8 30c0 	ldr.w	r3, [r8, #192]	; 0xc0
    3458:	b16b      	cbz	r3, 3476 <hci_tx_thread+0x152>
		BT_ERR("Uncleared pending sent_cmd");
    345a:	4b43      	ldr	r3, [pc, #268]	; (3568 <hci_tx_thread+0x244>)
    345c:	4a3d      	ldr	r2, [pc, #244]	; (3554 <hci_tx_thread+0x230>)
    345e:	4939      	ldr	r1, [pc, #228]	; (3544 <hci_tx_thread+0x220>)
    3460:	4847      	ldr	r0, [pc, #284]	; (3580 <hci_tx_thread+0x25c>)
    3462:	9401      	str	r4, [sp, #4]
    3464:	9400      	str	r4, [sp, #0]
    3466:	682f      	ldr	r7, [r5, #0]
    3468:	47b8      	blx	r7
		net_buf_unref(bt_dev.sent_cmd);
    346a:	f8d8 00c0 	ldr.w	r0, [r8, #192]	; 0xc0
    346e:	f010 f933 	bl	136d8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3472:	f8c8 b0c0 	str.w	fp, [r8, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    3476:	4650      	mov	r0, sl
    3478:	f010 f95c 	bl	13734 <net_buf_ref>
	BT_DBG("Sending command 0x%04x (buf %p) to driver",
    347c:	682f      	ldr	r7, [r5, #0]
	bt_dev.sent_cmd = net_buf_ref(buf);
    347e:	f8c8 00c0 	str.w	r0, [r8, #192]	; 0xc0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3482:	f011 f9a3 	bl	147cc <_impl_k_current_get>
    3486:	9007      	str	r0, [sp, #28]
	BT_DBG("Sending command 0x%04x (buf %p) to driver",
    3488:	4650      	mov	r0, sl
    348a:	f010 f867 	bl	1355c <net_buf_id>
    348e:	f8df b108 	ldr.w	fp, [pc, #264]	; 3598 <hci_tx_thread+0x274>
    3492:	9404      	str	r4, [sp, #16]
    3494:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    3498:	f8cd a00c 	str.w	sl, [sp, #12]
    349c:	8842      	ldrh	r2, [r0, #2]
    349e:	9b07      	ldr	r3, [sp, #28]
    34a0:	9202      	str	r2, [sp, #8]
    34a2:	9301      	str	r3, [sp, #4]
    34a4:	4837      	ldr	r0, [pc, #220]	; (3584 <hci_tx_thread+0x260>)
    34a6:	9400      	str	r4, [sp, #0]
    34a8:	4b2f      	ldr	r3, [pc, #188]	; (3568 <hci_tx_thread+0x244>)
    34aa:	4a25      	ldr	r2, [pc, #148]	; (3540 <hci_tx_thread+0x21c>)
    34ac:	4925      	ldr	r1, [pc, #148]	; (3544 <hci_tx_thread+0x220>)
    34ae:	47b8      	blx	r7
	err = bt_send(buf);
    34b0:	4650      	mov	r0, sl
    34b2:	f7ff f8a3 	bl	25fc <bt_send>
	if (err) {
    34b6:	b1f8      	cbz	r0, 34f8 <hci_tx_thread+0x1d4>
		BT_ERR("Unable to send to driver (err %d)", err);
    34b8:	4b2b      	ldr	r3, [pc, #172]	; (3568 <hci_tx_thread+0x244>)
    34ba:	4a26      	ldr	r2, [pc, #152]	; (3554 <hci_tx_thread+0x230>)
    34bc:	4921      	ldr	r1, [pc, #132]	; (3544 <hci_tx_thread+0x220>)
    34be:	9001      	str	r0, [sp, #4]
    34c0:	9402      	str	r4, [sp, #8]
    34c2:	4831      	ldr	r0, [pc, #196]	; (3588 <hci_tx_thread+0x264>)
    34c4:	9400      	str	r4, [sp, #0]
    34c6:	682f      	ldr	r7, [r5, #0]
    34c8:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    34ca:	482c      	ldr	r0, [pc, #176]	; (357c <hci_tx_thread+0x258>)
    34cc:	f011 f98d 	bl	147ea <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    34d0:	4650      	mov	r0, sl
    34d2:	f010 f843 	bl	1355c <net_buf_id>
    34d6:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    34da:	2200      	movs	r2, #0
    34dc:	211f      	movs	r1, #31
    34de:	8840      	ldrh	r0, [r0, #2]
    34e0:	f7fe fdac 	bl	203c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    34e4:	f8d8 00c0 	ldr.w	r0, [r8, #192]	; 0xc0
    34e8:	f010 f8f6 	bl	136d8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    34ec:	2300      	movs	r3, #0
		net_buf_unref(buf);
    34ee:	4650      	mov	r0, sl
		bt_dev.sent_cmd = NULL;
    34f0:	f8c8 30c0 	str.w	r3, [r8, #192]	; 0xc0
		net_buf_unref(buf);
    34f4:	f010 f8f0 	bl	136d8 <net_buf_unref>
	for (; count; ev++, count--) {
    34f8:	3614      	adds	r6, #20
    34fa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    34fe:	e75f      	b.n	33c0 <hci_tx_thread+0x9c>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    3500:	f1bb 0f01 	cmp.w	fp, #1
    3504:	d104      	bne.n	3510 <hci_tx_thread+0x1ec>
					conn = CONTAINER_OF(ev->fifo,
    3506:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    3508:	3818      	subs	r0, #24
    350a:	f001 f953 	bl	47b4 <bt_conn_notify_tx>
    350e:	e7f3      	b.n	34f8 <hci_tx_thread+0x1d4>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    3510:	f1bb 0f02 	cmp.w	fp, #2
    3514:	d1f0      	bne.n	34f8 <hci_tx_thread+0x1d4>
					conn = CONTAINER_OF(ev->fifo,
    3516:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    3518:	3828      	subs	r0, #40	; 0x28
    351a:	f001 fed9 	bl	52d0 <bt_conn_process_tx>
    351e:	e7eb      	b.n	34f8 <hci_tx_thread+0x1d4>
		switch (ev->state) {
    3520:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    3522:	9402      	str	r4, [sp, #8]
    3524:	9400      	str	r4, [sp, #0]
    3526:	682f      	ldr	r7, [r5, #0]
    3528:	4b0c      	ldr	r3, [pc, #48]	; (355c <hci_tx_thread+0x238>)
    352a:	4a18      	ldr	r2, [pc, #96]	; (358c <hci_tx_thread+0x268>)
    352c:	4905      	ldr	r1, [pc, #20]	; (3544 <hci_tx_thread+0x220>)
    352e:	4818      	ldr	r0, [pc, #96]	; (3590 <hci_tx_thread+0x26c>)
    3530:	47b8      	blx	r7
    3532:	e7e1      	b.n	34f8 <hci_tx_thread+0x1d4>
    3534:	20003a5c 	.word	0x20003a5c
    3538:	00015359 	.word	0x00015359
    353c:	00015aac 	.word	0x00015aac
    3540:	0001587b 	.word	0x0001587b
    3544:	0001679c 	.word	0x0001679c
    3548:	00016866 	.word	0x00016866
    354c:	20003b38 	.word	0x20003b38
    3550:	00016883 	.word	0x00016883
    3554:	00016754 	.word	0x00016754
    3558:	000168b6 	.word	0x000168b6
    355c:	00015a9d 	.word	0x00015a9d
    3560:	000168e0 	.word	0x000168e0
    3564:	000168fe 	.word	0x000168fe
    3568:	00015a94 	.word	0x00015a94
    356c:	00016920 	.word	0x00016920
    3570:	20003b24 	.word	0x20003b24
    3574:	00016949 	.word	0x00016949
    3578:	0001696e 	.word	0x0001696e
    357c:	20003b08 	.word	0x20003b08
    3580:	00016999 	.word	0x00016999
    3584:	000169c4 	.word	0x000169c4
    3588:	00015dcd 	.word	0x00015dcd
    358c:	000167d7 	.word	0x000167d7
    3590:	00016a03 	.word	0x00016a03
    3594:	20003a60 	.word	0x20003a60
    3598:	2000027c 	.word	0x2000027c

0000359c <bt_recv>:
{
    359c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("buf %p len %u", buf, buf->len);
    35a0:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 384c <bt_recv+0x2b0>
    35a4:	4f93      	ldr	r7, [pc, #588]	; (37f4 <bt_recv+0x258>)
    35a6:	f8d8 5000 	ldr.w	r5, [r8]
{
    35aa:	b099      	sub	sp, #100	; 0x64
    35ac:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    35ae:	f011 f90d 	bl	147cc <_impl_k_current_get>
	BT_DBG("buf %p len %u", buf, buf->len);
    35b2:	9704      	str	r7, [sp, #16]
    35b4:	89a3      	ldrh	r3, [r4, #12]
    35b6:	9303      	str	r3, [sp, #12]
    35b8:	9001      	str	r0, [sp, #4]
    35ba:	9402      	str	r4, [sp, #8]
    35bc:	9700      	str	r7, [sp, #0]
    35be:	4b8e      	ldr	r3, [pc, #568]	; (37f8 <bt_recv+0x25c>)
    35c0:	4a8e      	ldr	r2, [pc, #568]	; (37fc <bt_recv+0x260>)
    35c2:	498f      	ldr	r1, [pc, #572]	; (3800 <bt_recv+0x264>)
    35c4:	488f      	ldr	r0, [pc, #572]	; (3804 <bt_recv+0x268>)
    35c6:	47a8      	blx	r5
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    35c8:	f894 9014 	ldrb.w	r9, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    35cc:	f1b9 0f01 	cmp.w	r9, #1
    35d0:	4646      	mov	r6, r8
    35d2:	463d      	mov	r5, r7
    35d4:	d060      	beq.n	3698 <bt_recv+0xfc>
    35d6:	f1b9 0f03 	cmp.w	r9, #3
    35da:	f040 845c 	bne.w	3e96 <bt_recv+0x8fa>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    35de:	68a6      	ldr	r6, [r4, #8]
	BT_DBG("buf %p", buf);
    35e0:	f8d8 9000 	ldr.w	r9, [r8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    35e4:	8875      	ldrh	r5, [r6, #2]
    35e6:	f011 f8f1 	bl	147cc <_impl_k_current_get>
	BT_DBG("buf %p", buf);
    35ea:	4a84      	ldr	r2, [pc, #528]	; (37fc <bt_recv+0x260>)
    35ec:	9001      	str	r0, [sp, #4]
    35ee:	4b86      	ldr	r3, [pc, #536]	; (3808 <bt_recv+0x26c>)
    35f0:	4983      	ldr	r1, [pc, #524]	; (3800 <bt_recv+0x264>)
    35f2:	4886      	ldr	r0, [pc, #536]	; (380c <bt_recv+0x270>)
    35f4:	9703      	str	r7, [sp, #12]
    35f6:	9402      	str	r4, [sp, #8]
    35f8:	9700      	str	r7, [sp, #0]
    35fa:	47c8      	blx	r9
	handle = sys_le16_to_cpu(hdr->handle);
    35fc:	8833      	ldrh	r3, [r6, #0]
	flags = bt_acl_flags(handle);
    35fe:	0b1e      	lsrs	r6, r3, #12
	acl(buf)->handle = bt_acl_handle(handle);
    3600:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3604:	82e3      	strh	r3, [r4, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    3606:	23ff      	movs	r3, #255	; 0xff
    3608:	7563      	strb	r3, [r4, #21]
	net_buf_pull(buf, sizeof(*hdr));
    360a:	2104      	movs	r1, #4
    360c:	f104 0008 	add.w	r0, r4, #8
    3610:	f010 f8b3 	bl	1377a <net_buf_simple_pull>
	BT_DBG("handle %u len %u flags %u", acl(buf)->handle, len, flags);
    3614:	f8d8 9000 	ldr.w	r9, [r8]
    3618:	f011 f8d8 	bl	147cc <_impl_k_current_get>
    361c:	9705      	str	r7, [sp, #20]
    361e:	9604      	str	r6, [sp, #16]
    3620:	9503      	str	r5, [sp, #12]
    3622:	8ae3      	ldrh	r3, [r4, #22]
    3624:	9302      	str	r3, [sp, #8]
    3626:	9001      	str	r0, [sp, #4]
    3628:	4b77      	ldr	r3, [pc, #476]	; (3808 <bt_recv+0x26c>)
    362a:	9700      	str	r7, [sp, #0]
    362c:	4a73      	ldr	r2, [pc, #460]	; (37fc <bt_recv+0x260>)
    362e:	4974      	ldr	r1, [pc, #464]	; (3800 <bt_recv+0x264>)
    3630:	4877      	ldr	r0, [pc, #476]	; (3810 <bt_recv+0x274>)
    3632:	47c8      	blx	r9
	if (buf->len != len) {
    3634:	89a3      	ldrh	r3, [r4, #12]
    3636:	429d      	cmp	r5, r3
    3638:	d00e      	beq.n	3658 <bt_recv+0xbc>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    363a:	9301      	str	r3, [sp, #4]
    363c:	9703      	str	r7, [sp, #12]
    363e:	9502      	str	r5, [sp, #8]
    3640:	9700      	str	r7, [sp, #0]
    3642:	f8d8 5000 	ldr.w	r5, [r8]
    3646:	4b70      	ldr	r3, [pc, #448]	; (3808 <bt_recv+0x26c>)
    3648:	4a72      	ldr	r2, [pc, #456]	; (3814 <bt_recv+0x278>)
    364a:	496d      	ldr	r1, [pc, #436]	; (3800 <bt_recv+0x264>)
    364c:	4872      	ldr	r0, [pc, #456]	; (3818 <bt_recv+0x27c>)
    364e:	47a8      	blx	r5
	net_buf_unref(buf);
    3650:	4620      	mov	r0, r4
    3652:	f010 f841 	bl	136d8 <net_buf_unref>
    3656:	e01b      	b.n	3690 <bt_recv+0xf4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    3658:	8ae0      	ldrh	r0, [r4, #22]
    365a:	f001 fa39 	bl	4ad0 <bt_conn_lookup_handle>
	if (!conn) {
    365e:	4605      	mov	r5, r0
    3660:	b958      	cbnz	r0, 367a <bt_recv+0xde>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    3662:	9702      	str	r7, [sp, #8]
    3664:	8ae3      	ldrh	r3, [r4, #22]
    3666:	9301      	str	r3, [sp, #4]
    3668:	9700      	str	r7, [sp, #0]
    366a:	f8d8 6000 	ldr.w	r6, [r8]
    366e:	4b66      	ldr	r3, [pc, #408]	; (3808 <bt_recv+0x26c>)
    3670:	4a68      	ldr	r2, [pc, #416]	; (3814 <bt_recv+0x278>)
    3672:	4963      	ldr	r1, [pc, #396]	; (3800 <bt_recv+0x264>)
    3674:	4869      	ldr	r0, [pc, #420]	; (381c <bt_recv+0x280>)
    3676:	47b0      	blx	r6
    3678:	e7ea      	b.n	3650 <bt_recv+0xb4>
	acl(buf)->id = bt_conn_get_id(conn);
    367a:	f001 fed7 	bl	542c <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    367e:	4632      	mov	r2, r6
	acl(buf)->id = bt_conn_get_id(conn);
    3680:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    3682:	4621      	mov	r1, r4
    3684:	4628      	mov	r0, r5
    3686:	f000 ff45 	bl	4514 <bt_conn_recv>
	bt_conn_unref(conn);
    368a:	4628      	mov	r0, r5
    368c:	f001 fa6e 	bl	4b6c <bt_conn_unref>
		return 0;
    3690:	2000      	movs	r0, #0
}
    3692:	b019      	add	sp, #100	; 0x64
    3694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3698:	f8d4 a008 	ldr.w	sl, [r4, #8]
	BT_DBG("event 0x%02x", hdr->evt);
    369c:	f8d8 b000 	ldr.w	fp, [r8]
    36a0:	f011 f894 	bl	147cc <_impl_k_current_get>
    36a4:	9703      	str	r7, [sp, #12]
    36a6:	f89a 3000 	ldrb.w	r3, [sl]
    36aa:	9302      	str	r3, [sp, #8]
    36ac:	9001      	str	r0, [sp, #4]
    36ae:	4b5c      	ldr	r3, [pc, #368]	; (3820 <bt_recv+0x284>)
    36b0:	9700      	str	r7, [sp, #0]
    36b2:	4a52      	ldr	r2, [pc, #328]	; (37fc <bt_recv+0x260>)
    36b4:	4952      	ldr	r1, [pc, #328]	; (3800 <bt_recv+0x264>)
    36b6:	485b      	ldr	r0, [pc, #364]	; (3824 <bt_recv+0x288>)
    36b8:	47d8      	blx	fp
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    36ba:	f89a 3000 	ldrb.w	r3, [sl]
    36be:	2b13      	cmp	r3, #19
    36c0:	f200 83fa 	bhi.w	3eb8 <bt_recv+0x91c>
    36c4:	fa09 f903 	lsl.w	r9, r9, r3
    36c8:	f419 2f0c 	tst.w	r9, #573440	; 0x8c000
    36cc:	f000 83f4 	beq.w	3eb8 <bt_recv+0x91c>
    36d0:	9701      	str	r7, [sp, #4]
    36d2:	9700      	str	r7, [sp, #0]
    36d4:	f8d8 4000 	ldr.w	r4, [r8]
    36d8:	4b51      	ldr	r3, [pc, #324]	; (3820 <bt_recv+0x284>)
    36da:	4a4e      	ldr	r2, [pc, #312]	; (3814 <bt_recv+0x278>)
    36dc:	4948      	ldr	r1, [pc, #288]	; (3800 <bt_recv+0x264>)
    36de:	4852      	ldr	r0, [pc, #328]	; (3828 <bt_recv+0x28c>)
    36e0:	47a0      	blx	r4
    36e2:	4040      	eors	r0, r0
    36e4:	f380 8811 	msr	BASEPRI, r0
    36e8:	f04f 0004 	mov.w	r0, #4
    36ec:	df02      	svc	2
    36ee:	f8d4 8008 	ldr.w	r8, [r4, #8]
	BT_DBG("status %u handle %u reason %u", evt->status, handle,
    36f2:	6837      	ldr	r7, [r6, #0]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    36f4:	f8b8 a001 	ldrh.w	sl, [r8, #1]
    36f8:	f011 f868 	bl	147cc <_impl_k_current_get>
	BT_DBG("status %u handle %u reason %u", evt->status, handle,
    36fc:	9505      	str	r5, [sp, #20]
    36fe:	f898 3003 	ldrb.w	r3, [r8, #3]
    3702:	9304      	str	r3, [sp, #16]
    3704:	f8cd a00c 	str.w	sl, [sp, #12]
    3708:	f898 3000 	ldrb.w	r3, [r8]
    370c:	9302      	str	r3, [sp, #8]
    370e:	9001      	str	r0, [sp, #4]
    3710:	9500      	str	r5, [sp, #0]
    3712:	4b46      	ldr	r3, [pc, #280]	; (382c <bt_recv+0x290>)
    3714:	4a39      	ldr	r2, [pc, #228]	; (37fc <bt_recv+0x260>)
    3716:	493a      	ldr	r1, [pc, #232]	; (3800 <bt_recv+0x264>)
    3718:	4845      	ldr	r0, [pc, #276]	; (3830 <bt_recv+0x294>)
    371a:	47b8      	blx	r7
	if (evt->status) {
    371c:	f898 9000 	ldrb.w	r9, [r8]
    3720:	f1b9 0f00 	cmp.w	r9, #0
    3724:	d194      	bne.n	3650 <bt_recv+0xb4>
	conn = bt_conn_lookup_handle(handle);
    3726:	4650      	mov	r0, sl
    3728:	f001 f9d2 	bl	4ad0 <bt_conn_lookup_handle>
	if (!conn) {
    372c:	4607      	mov	r7, r0
    372e:	b9c8      	cbnz	r0, 3764 <bt_recv+0x1c8>
		BT_ERR("Unable to look up conn with handle %u", handle);
    3730:	e88d 0420 	stmia.w	sp, {r5, sl}
    3734:	9502      	str	r5, [sp, #8]
    3736:	6835      	ldr	r5, [r6, #0]
    3738:	4b3c      	ldr	r3, [pc, #240]	; (382c <bt_recv+0x290>)
    373a:	4a36      	ldr	r2, [pc, #216]	; (3814 <bt_recv+0x278>)
    373c:	4930      	ldr	r1, [pc, #192]	; (3800 <bt_recv+0x264>)
    373e:	483d      	ldr	r0, [pc, #244]	; (3834 <bt_recv+0x298>)
    3740:	47a8      	blx	r5
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3742:	2107      	movs	r1, #7
    3744:	483c      	ldr	r0, [pc, #240]	; (3838 <bt_recv+0x29c>)
    3746:	f7fe fcf3 	bl	2130 <atomic_test_bit>
    374a:	2800      	cmp	r0, #0
    374c:	d080      	beq.n	3650 <bt_recv+0xb4>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    374e:	2106      	movs	r1, #6
    3750:	4839      	ldr	r0, [pc, #228]	; (3838 <bt_recv+0x29c>)
    3752:	f7fe fced 	bl	2130 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3756:	2800      	cmp	r0, #0
    3758:	f47f af7a 	bne.w	3650 <bt_recv+0xb4>
		set_advertise_enable(true);
    375c:	2001      	movs	r0, #1
    375e:	f7fe fe6b 	bl	2438 <set_advertise_enable>
    3762:	e775      	b.n	3650 <bt_recv+0xb4>
	conn->err = evt->reason;
    3764:	f898 3003 	ldrb.w	r3, [r8, #3]
    3768:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    376a:	4934      	ldr	r1, [pc, #208]	; (383c <bt_recv+0x2a0>)
    376c:	4834      	ldr	r0, [pc, #208]	; (3840 <bt_recv+0x2a4>)
    376e:	f011 f9ed 	bl	14b4c <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3772:	4649      	mov	r1, r9
    3774:	4638      	mov	r0, r7
    3776:	f001 fab9 	bl	4cec <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    377a:	78bd      	ldrb	r5, [r7, #2]
	conn->handle = 0;
    377c:	f8a7 9000 	strh.w	r9, [r7]
	if (conn->type != BT_CONN_TYPE_LE) {
    3780:	b10d      	cbz	r5, 3786 <bt_recv+0x1ea>
	bt_conn_unref(conn);
    3782:	4638      	mov	r0, r7
    3784:	e0ea      	b.n	395c <bt_recv+0x3c0>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    3786:	4629      	mov	r1, r5
    3788:	1d38      	adds	r0, r7, #4
    378a:	f7fe fcd1 	bl	2130 <atomic_test_bit>
    378e:	b130      	cbz	r0, 379e <bt_recv+0x202>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    3790:	4638      	mov	r0, r7
    3792:	2101      	movs	r1, #1
    3794:	f001 faaa 	bl	4cec <bt_conn_set_state>
		bt_le_scan_update(false);
    3798:	4628      	mov	r0, r5
    379a:	f7fe fffb 	bl	2794 <bt_le_scan_update>
	bt_conn_unref(conn);
    379e:	4638      	mov	r0, r7
    37a0:	f001 f9e4 	bl	4b6c <bt_conn_unref>
    37a4:	e7cd      	b.n	3742 <bt_recv+0x1a6>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    37a6:	68a7      	ldr	r7, [r4, #8]
	BT_DBG("subevent 0x%02x", evt->subevent);
    37a8:	f8d6 8000 	ldr.w	r8, [r6]
    37ac:	f011 f80e 	bl	147cc <_impl_k_current_get>
    37b0:	9503      	str	r5, [sp, #12]
    37b2:	783b      	ldrb	r3, [r7, #0]
    37b4:	9302      	str	r3, [sp, #8]
    37b6:	9001      	str	r0, [sp, #4]
    37b8:	4b22      	ldr	r3, [pc, #136]	; (3844 <bt_recv+0x2a8>)
    37ba:	4a10      	ldr	r2, [pc, #64]	; (37fc <bt_recv+0x260>)
    37bc:	4910      	ldr	r1, [pc, #64]	; (3800 <bt_recv+0x264>)
    37be:	4822      	ldr	r0, [pc, #136]	; (3848 <bt_recv+0x2ac>)
    37c0:	9500      	str	r5, [sp, #0]
    37c2:	47c0      	blx	r8
	net_buf_pull(buf, sizeof(*evt));
    37c4:	2101      	movs	r1, #1
    37c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    37c8:	f00f ffd7 	bl	1377a <net_buf_simple_pull>
	switch (evt->subevent) {
    37cc:	783f      	ldrb	r7, [r7, #0]
    37ce:	1e7b      	subs	r3, r7, #1
    37d0:	2b0b      	cmp	r3, #11
    37d2:	f200 834d 	bhi.w	3e70 <bt_recv+0x8d4>
    37d6:	e8df f013 	tbh	[pc, r3, lsl #1]
    37da:	003b      	.short	0x003b
    37dc:	0088023c 	.word	0x0088023c
    37e0:	034b00c4 	.word	0x034b00c4
    37e4:	01600101 	.word	0x01600101
    37e8:	022001f3 	.word	0x022001f3
    37ec:	034b0086 	.word	0x034b0086
    37f0:	0195      	.short	0x0195
    37f2:	bf00      	nop
    37f4:	00015359 	.word	0x00015359
    37f8:	00015bea 	.word	0x00015bea
    37fc:	0001587b 	.word	0x0001587b
    3800:	0001679c 	.word	0x0001679c
    3804:	000161c9 	.word	0x000161c9
    3808:	00015937 	.word	0x00015937
    380c:	00015d87 	.word	0x00015d87
    3810:	000161ec 	.word	0x000161ec
    3814:	00016754 	.word	0x00016754
    3818:	0001621b 	.word	0x0001621b
    381c:	0001624f 	.word	0x0001624f
    3820:	00015a8a 	.word	0x00015a8a
    3824:	00016281 	.word	0x00016281
    3828:	00016549 	.word	0x00016549
    382c:	00015959 	.word	0x00015959
    3830:	000162a3 	.word	0x000162a3
    3834:	000162d6 	.word	0x000162d6
    3838:	20003ad0 	.word	0x20003ad0
    383c:	0001630c 	.word	0x0001630c
    3840:	00001f99 	.word	0x00001f99
    3844:	00015a78 	.word	0x00015a78
    3848:	00016310 	.word	0x00016310
    384c:	20003a5c 	.word	0x20003a5c
    3850:	68a7      	ldr	r7, [r4, #8]
	BT_DBG("status %u role %u %s", evt->status, evt->role,
    3852:	f8d6 8000 	ldr.w	r8, [r6]
    3856:	f010 ffb9 	bl	147cc <_impl_k_current_get>
    385a:	1d3e      	adds	r6, r7, #4
    385c:	4681      	mov	r9, r0
    385e:	4630      	mov	r0, r6
    3860:	f897 a000 	ldrb.w	sl, [r7]
    3864:	f897 b003 	ldrb.w	fp, [r7, #3]
    3868:	f7fe fa9a 	bl	1da0 <bt_addr_le_str>
    386c:	4aad      	ldr	r2, [pc, #692]	; (3b24 <bt_recv+0x588>)
    386e:	9505      	str	r5, [sp, #20]
    3870:	9004      	str	r0, [sp, #16]
    3872:	e88d 0e20 	stmia.w	sp, {r5, r9, sl, fp}
    3876:	4bac      	ldr	r3, [pc, #688]	; (3b28 <bt_recv+0x58c>)
    3878:	49ac      	ldr	r1, [pc, #688]	; (3b2c <bt_recv+0x590>)
    387a:	48ad      	ldr	r0, [pc, #692]	; (3b30 <bt_recv+0x594>)
    387c:	47c0      	blx	r8
	enh.status         = evt->status;
    387e:	783b      	ldrb	r3, [r7, #0]
    3880:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	enh.handle         = evt->handle;
    3884:	f8b7 3001 	ldrh.w	r3, [r7, #1]
    3888:	f8ad 3041 	strh.w	r3, [sp, #65]	; 0x41
	enh.role           = evt->role;
    388c:	78fb      	ldrb	r3, [r7, #3]
    388e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	enh.interval       = evt->interval;
    3892:	f8b7 300b 	ldrh.w	r3, [r7, #11]
    3896:	f8ad 3057 	strh.w	r3, [sp, #87]	; 0x57
	enh.latency        = evt->latency;
    389a:	f8b7 300d 	ldrh.w	r3, [r7, #13]
    389e:	f8ad 3059 	strh.w	r3, [sp, #89]	; 0x59
	enh.supv_timeout   = evt->supv_timeout;
    38a2:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    38a6:	f8ad 305b 	strh.w	r3, [sp, #91]	; 0x5b
	enh.clock_accuracy = evt->clock_accuracy;
    38aa:	7c7b      	ldrb	r3, [r7, #17]
    38ac:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    38b0:	4631      	mov	r1, r6
    38b2:	a811      	add	r0, sp, #68	; 0x44
    38b4:	f7fe fb8e 	bl	1fd4 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    38b8:	2500      	movs	r5, #0
    38ba:	2206      	movs	r2, #6
    38bc:	a90c      	add	r1, sp, #48	; 0x30
    38be:	f10d 004b 	add.w	r0, sp, #75	; 0x4b
    38c2:	950c      	str	r5, [sp, #48]	; 0x30
    38c4:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    38c8:	f7fe f9be 	bl	1c48 <memcpy>
    38cc:	2206      	movs	r2, #6
    38ce:	a90e      	add	r1, sp, #56	; 0x38
    38d0:	f10d 0051 	add.w	r0, sp, #81	; 0x51
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    38d4:	950e      	str	r5, [sp, #56]	; 0x38
    38d6:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
    38da:	f7fe f9b5 	bl	1c48 <memcpy>
	le_enh_conn_complete(&enh);
    38de:	a810      	add	r0, sp, #64	; 0x40
		le_enh_conn_complete((void *)buf->data);
    38e0:	f7ff fc06 	bl	30f0 <le_enh_conn_complete>
    38e4:	e6b4      	b.n	3650 <bt_recv+0xb4>
    38e6:	68a0      	ldr	r0, [r4, #8]
    38e8:	e7fa      	b.n	38e0 <bt_recv+0x344>
    38ea:	68a7      	ldr	r7, [r4, #8]
	BT_DBG("status %u, handle %u", evt->status, handle);
    38ec:	f8d6 8000 	ldr.w	r8, [r6]
	handle = sys_le16_to_cpu(evt->handle);
    38f0:	f8b7 9001 	ldrh.w	r9, [r7, #1]
    38f4:	f010 ff6a 	bl	147cc <_impl_k_current_get>
	BT_DBG("status %u, handle %u", evt->status, handle);
    38f8:	9504      	str	r5, [sp, #16]
    38fa:	f8cd 900c 	str.w	r9, [sp, #12]
    38fe:	783b      	ldrb	r3, [r7, #0]
    3900:	9302      	str	r3, [sp, #8]
    3902:	9001      	str	r0, [sp, #4]
    3904:	4b8b      	ldr	r3, [pc, #556]	; (3b34 <bt_recv+0x598>)
    3906:	4a87      	ldr	r2, [pc, #540]	; (3b24 <bt_recv+0x588>)
    3908:	4988      	ldr	r1, [pc, #544]	; (3b2c <bt_recv+0x590>)
    390a:	488b      	ldr	r0, [pc, #556]	; (3b38 <bt_recv+0x59c>)
    390c:	9500      	str	r5, [sp, #0]
    390e:	47c0      	blx	r8
	conn = bt_conn_lookup_handle(handle);
    3910:	4648      	mov	r0, r9
    3912:	f001 f8dd 	bl	4ad0 <bt_conn_lookup_handle>
	if (!conn) {
    3916:	4680      	mov	r8, r0
    3918:	b948      	cbnz	r0, 392e <bt_recv+0x392>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    391a:	e88d 0220 	stmia.w	sp, {r5, r9}
    391e:	9502      	str	r5, [sp, #8]
    3920:	6835      	ldr	r5, [r6, #0]
    3922:	4b84      	ldr	r3, [pc, #528]	; (3b34 <bt_recv+0x598>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3924:	4a85      	ldr	r2, [pc, #532]	; (3b3c <bt_recv+0x5a0>)
    3926:	4981      	ldr	r1, [pc, #516]	; (3b2c <bt_recv+0x590>)
    3928:	4885      	ldr	r0, [pc, #532]	; (3b40 <bt_recv+0x5a4>)
    392a:	47a8      	blx	r5
    392c:	e690      	b.n	3650 <bt_recv+0xb4>
	if (!evt->status) {
    392e:	783b      	ldrb	r3, [r7, #0]
    3930:	b99b      	cbnz	r3, 395a <bt_recv+0x3be>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3932:	793a      	ldrb	r2, [r7, #4]
    3934:	78fb      	ldrb	r3, [r7, #3]
    3936:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    393a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    393e:	79ba      	ldrb	r2, [r7, #6]
    3940:	797b      	ldrb	r3, [r7, #5]
    3942:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3946:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    394a:	79fb      	ldrb	r3, [r7, #7]
    394c:	7a3a      	ldrb	r2, [r7, #8]
    394e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3952:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    3956:	f000 fda1 	bl	449c <notify_le_param_updated>
	bt_conn_unref(conn);
    395a:	4640      	mov	r0, r8
	bt_conn_unref(conn);
    395c:	f001 f906 	bl	4b6c <bt_conn_unref>
    3960:	e676      	b.n	3650 <bt_recv+0xb4>
    3962:	f8d4 8008 	ldr.w	r8, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3966:	f8b8 9001 	ldrh.w	r9, [r8, #1]
	conn = bt_conn_lookup_handle(handle);
    396a:	4648      	mov	r0, r9
    396c:	f001 f8b0 	bl	4ad0 <bt_conn_lookup_handle>
	if (!conn) {
    3970:	4607      	mov	r7, r0
    3972:	b928      	cbnz	r0, 3980 <bt_recv+0x3e4>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3974:	e88d 0220 	stmia.w	sp, {r5, r9}
    3978:	9502      	str	r5, [sp, #8]
    397a:	6835      	ldr	r5, [r6, #0]
    397c:	4b71      	ldr	r3, [pc, #452]	; (3b44 <bt_recv+0x5a8>)
    397e:	e7d1      	b.n	3924 <bt_recv+0x388>
	if (!evt->status) {
    3980:	f898 3000 	ldrb.w	r3, [r8]
    3984:	b92b      	cbnz	r3, 3992 <bt_recv+0x3f6>
		memcpy(conn->le.features, evt->features,
    3986:	2208      	movs	r2, #8
    3988:	f108 0103 	add.w	r1, r8, #3
    398c:	3064      	adds	r0, #100	; 0x64
    398e:	f7fe f95b 	bl	1c48 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    3992:	4d6d      	ldr	r5, [pc, #436]	; (3b48 <bt_recv+0x5ac>)
    3994:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    3998:	07d2      	lsls	r2, r2, #31
    399a:	d50c      	bpl.n	39b6 <bt_recv+0x41a>
    399c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
    39a0:	07db      	lsls	r3, r3, #31
    39a2:	d508      	bpl.n	39b6 <bt_recv+0x41a>
		err = hci_le_set_phy(conn);
    39a4:	4638      	mov	r0, r7
    39a6:	f7ff fb59 	bl	305c <hci_le_set_phy.isra.27>
		if (!err) {
    39aa:	b920      	cbnz	r0, 39b6 <bt_recv+0x41a>
    39ac:	2180      	movs	r1, #128	; 0x80
    39ae:	1d38      	adds	r0, r7, #4
    39b0:	f7fe fb13 	bl	1fda <atomic_or>
    39b4:	e6e5      	b.n	3782 <bt_recv+0x1e6>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    39b6:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    39ba:	069e      	lsls	r6, r3, #26
    39bc:	f140 80fc 	bpl.w	3bb8 <bt_recv+0x61c>
    39c0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    39c4:	069d      	lsls	r5, r3, #26
    39c6:	f140 80f7 	bpl.w	3bb8 <bt_recv+0x61c>
		err = hci_le_set_data_len(conn);
    39ca:	4638      	mov	r0, r7
    39cc:	f7ff fb66 	bl	309c <hci_le_set_data_len.isra.28>
		if (!err) {
    39d0:	2800      	cmp	r0, #0
    39d2:	f040 80f1 	bne.w	3bb8 <bt_recv+0x61c>
    39d6:	f44f 7180 	mov.w	r1, #256	; 0x100
    39da:	e7e8      	b.n	39ae <bt_recv+0x412>
    39dc:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    39de:	78d9      	ldrb	r1, [r3, #3]
    39e0:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    39e2:	f8b3 8000 	ldrh.w	r8, [r3]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    39e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    39ea:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    39ee:	7959      	ldrb	r1, [r3, #5]
    39f0:	791a      	ldrb	r2, [r3, #4]
    39f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    39f6:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
	param.latency = sys_le16_to_cpu(evt->latency);
    39fa:	799a      	ldrb	r2, [r3, #6]
    39fc:	79d9      	ldrb	r1, [r3, #7]
    39fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3a02:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3a06:	7a1a      	ldrb	r2, [r3, #8]
    3a08:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    3a0a:	fa1f f788 	uxth.w	r7, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3a0e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    3a12:	4638      	mov	r0, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3a14:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
	conn = bt_conn_lookup_handle(handle);
    3a18:	f001 f85a 	bl	4ad0 <bt_conn_lookup_handle>
	if (!conn) {
    3a1c:	4681      	mov	r9, r0
    3a1e:	b968      	cbnz	r0, 3a3c <bt_recv+0x4a0>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3a20:	e88d 00a0 	stmia.w	sp, {r5, r7}
    3a24:	9502      	str	r5, [sp, #8]
    3a26:	6835      	ldr	r5, [r6, #0]
    3a28:	4b48      	ldr	r3, [pc, #288]	; (3b4c <bt_recv+0x5b0>)
    3a2a:	4a44      	ldr	r2, [pc, #272]	; (3b3c <bt_recv+0x5a0>)
    3a2c:	493f      	ldr	r1, [pc, #252]	; (3b2c <bt_recv+0x590>)
    3a2e:	4844      	ldr	r0, [pc, #272]	; (3b40 <bt_recv+0x5a4>)
    3a30:	47a8      	blx	r5
		return le_conn_param_neg_reply(handle,
    3a32:	2102      	movs	r1, #2
    3a34:	4638      	mov	r0, r7
    3a36:	f7ff fc5b 	bl	32f0 <le_conn_param_neg_reply>
    3a3a:	e609      	b.n	3650 <bt_recv+0xb4>
	if (!le_param_req(conn, &param)) {
    3a3c:	a910      	add	r1, sp, #64	; 0x40
    3a3e:	f000 fd41 	bl	44c4 <le_param_req>
    3a42:	b928      	cbnz	r0, 3a50 <bt_recv+0x4b4>
		err = le_conn_param_neg_reply(handle,
    3a44:	211e      	movs	r1, #30
    3a46:	4638      	mov	r0, r7
    3a48:	f7ff fc52 	bl	32f0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    3a4c:	4648      	mov	r0, r9
    3a4e:	e785      	b.n	395c <bt_recv+0x3c0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    3a50:	210e      	movs	r1, #14
    3a52:	f242 0020 	movw	r0, #8224	; 0x2020
    3a56:	f7fe fb79 	bl	214c <bt_hci_cmd_create>
	if (!buf) {
    3a5a:	4606      	mov	r6, r0
    3a5c:	2800      	cmp	r0, #0
    3a5e:	d0f5      	beq.n	3a4c <bt_recv+0x4b0>
	cp = net_buf_add(buf, sizeof(*cp));
    3a60:	210e      	movs	r1, #14
    3a62:	3008      	adds	r0, #8
    3a64:	f00f fe6a 	bl	1373c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3a68:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    3a6a:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    3a6c:	2100      	movs	r1, #0
    3a6e:	f7fe f917 	bl	1ca0 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    3a72:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    3a76:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    3a78:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    3a7c:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    3a7e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    3a82:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    3a84:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
	cp->handle = sys_cpu_to_le16(handle);
    3a88:	f8a5 8000 	strh.w	r8, [r5]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    3a8c:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    3a8e:	4631      	mov	r1, r6
    3a90:	f242 0020 	movw	r0, #8224	; 0x2020
    3a94:	f7fe fdde 	bl	2654 <bt_hci_cmd_send>
    3a98:	e7d8      	b.n	3a4c <bt_recv+0x4b0>
    3a9a:	68a3      	ldr	r3, [r4, #8]
	u16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
    3a9c:	885f      	ldrh	r7, [r3, #2]
	u16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
    3a9e:	f8b3 9006 	ldrh.w	r9, [r3, #6]
	u16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
    3aa2:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	u16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
    3aa6:	f8b3 a008 	ldrh.w	sl, [r3, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3aaa:	881b      	ldrh	r3, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    3aac:	9309      	str	r3, [sp, #36]	; 0x24
    3aae:	4618      	mov	r0, r3
    3ab0:	f001 f80e 	bl	4ad0 <bt_conn_lookup_handle>
	if (!conn) {
    3ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3ab6:	4683      	mov	fp, r0
    3ab8:	b928      	cbnz	r0, 3ac6 <bt_recv+0x52a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3aba:	9301      	str	r3, [sp, #4]
    3abc:	9502      	str	r5, [sp, #8]
    3abe:	9500      	str	r5, [sp, #0]
    3ac0:	6835      	ldr	r5, [r6, #0]
    3ac2:	4b23      	ldr	r3, [pc, #140]	; (3b50 <bt_recv+0x5b4>)
    3ac4:	e72e      	b.n	3924 <bt_recv+0x388>
	BT_DBG("max. tx: %u (%uus), max. rx: %u (%uus)", max_tx_octets,
    3ac6:	6836      	ldr	r6, [r6, #0]
    3ac8:	f010 fe80 	bl	147cc <_impl_k_current_get>
    3acc:	4b20      	ldr	r3, [pc, #128]	; (3b50 <bt_recv+0x5b4>)
    3ace:	9001      	str	r0, [sp, #4]
    3ad0:	4a14      	ldr	r2, [pc, #80]	; (3b24 <bt_recv+0x588>)
    3ad2:	4916      	ldr	r1, [pc, #88]	; (3b2c <bt_recv+0x590>)
    3ad4:	481f      	ldr	r0, [pc, #124]	; (3b54 <bt_recv+0x5b8>)
    3ad6:	9506      	str	r5, [sp, #24]
    3ad8:	f8cd a014 	str.w	sl, [sp, #20]
    3adc:	f8cd 9010 	str.w	r9, [sp, #16]
    3ae0:	f8cd 800c 	str.w	r8, [sp, #12]
    3ae4:	9702      	str	r7, [sp, #8]
    3ae6:	9500      	str	r5, [sp, #0]
    3ae8:	47b0      	blx	r6
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3aea:	f46f 7180 	mvn.w	r1, #256	; 0x100
    3aee:	f10b 0004 	add.w	r0, fp, #4
    3af2:	f7fe fa83 	bl	1ffc <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    3af6:	05c0      	lsls	r0, r0, #23
    3af8:	d502      	bpl.n	3b00 <bt_recv+0x564>
	update_conn_param(conn);
    3afa:	4658      	mov	r0, fp
    3afc:	f7fe fa90 	bl	2020 <update_conn_param>
	bt_conn_unref(conn);
    3b00:	4658      	mov	r0, fp
    3b02:	e72b      	b.n	395c <bt_recv+0x3c0>
    3b04:	f8d4 8008 	ldr.w	r8, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3b08:	f8b8 9001 	ldrh.w	r9, [r8, #1]
	conn = bt_conn_lookup_handle(handle);
    3b0c:	4648      	mov	r0, r9
    3b0e:	f000 ffdf 	bl	4ad0 <bt_conn_lookup_handle>
	if (!conn) {
    3b12:	4607      	mov	r7, r0
    3b14:	bb10      	cbnz	r0, 3b5c <bt_recv+0x5c0>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3b16:	e88d 0220 	stmia.w	sp, {r5, r9}
    3b1a:	9502      	str	r5, [sp, #8]
    3b1c:	6835      	ldr	r5, [r6, #0]
    3b1e:	4b0e      	ldr	r3, [pc, #56]	; (3b58 <bt_recv+0x5bc>)
    3b20:	e700      	b.n	3924 <bt_recv+0x388>
    3b22:	bf00      	nop
    3b24:	0001587b 	.word	0x0001587b
    3b28:	00015983 	.word	0x00015983
    3b2c:	0001679c 	.word	0x0001679c
    3b30:	00016335 	.word	0x00016335
    3b34:	000159ef 	.word	0x000159ef
    3b38:	0001635f 	.word	0x0001635f
    3b3c:	00016754 	.word	0x00016754
    3b40:	00016389 	.word	0x00016389
    3b44:	0001599b 	.word	0x0001599b
    3b48:	20003a60 	.word	0x20003a60
    3b4c:	000159dd 	.word	0x000159dd
    3b50:	000159b3 	.word	0x000159b3
    3b54:	000163bd 	.word	0x000163bd
    3b58:	000159c6 	.word	0x000159c6
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    3b5c:	6836      	ldr	r6, [r6, #0]
    3b5e:	f010 fe35 	bl	147cc <_impl_k_current_get>
    3b62:	9505      	str	r5, [sp, #20]
    3b64:	f898 3004 	ldrb.w	r3, [r8, #4]
    3b68:	9304      	str	r3, [sp, #16]
    3b6a:	f898 3003 	ldrb.w	r3, [r8, #3]
    3b6e:	9303      	str	r3, [sp, #12]
    3b70:	f898 3000 	ldrb.w	r3, [r8]
    3b74:	9302      	str	r3, [sp, #8]
    3b76:	9001      	str	r0, [sp, #4]
    3b78:	9500      	str	r5, [sp, #0]
    3b7a:	4bac      	ldr	r3, [pc, #688]	; (3e2c <bt_recv+0x890>)
    3b7c:	4aac      	ldr	r2, [pc, #688]	; (3e30 <bt_recv+0x894>)
    3b7e:	49ad      	ldr	r1, [pc, #692]	; (3e34 <bt_recv+0x898>)
    3b80:	48ad      	ldr	r0, [pc, #692]	; (3e38 <bt_recv+0x89c>)
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3b82:	1d3d      	adds	r5, r7, #4
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    3b84:	47b0      	blx	r6
    3b86:	f06f 0180 	mvn.w	r1, #128	; 0x80
    3b8a:	4628      	mov	r0, r5
    3b8c:	f7fe fa36 	bl	1ffc <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3b90:	0601      	lsls	r1, r0, #24
    3b92:	f57f adf6 	bpl.w	3782 <bt_recv+0x1e6>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3b96:	4ba9      	ldr	r3, [pc, #676]	; (3e3c <bt_recv+0x8a0>)
    3b98:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3b9c:	069a      	lsls	r2, r3, #26
    3b9e:	d50b      	bpl.n	3bb8 <bt_recv+0x61c>
    3ba0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    3ba4:	069b      	lsls	r3, r3, #26
    3ba6:	d507      	bpl.n	3bb8 <bt_recv+0x61c>
		err = hci_le_set_data_len(conn);
    3ba8:	4638      	mov	r0, r7
    3baa:	f7ff fa77 	bl	309c <hci_le_set_data_len.isra.28>
		if (!err) {
    3bae:	b918      	cbnz	r0, 3bb8 <bt_recv+0x61c>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
    3bb4:	4628      	mov	r0, r5
    3bb6:	e6fb      	b.n	39b0 <bt_recv+0x414>
	update_conn_param(conn);
    3bb8:	4638      	mov	r0, r7
    3bba:	f7fe fa31 	bl	2020 <update_conn_param>
    3bbe:	e5e0      	b.n	3782 <bt_recv+0x1e6>
    3bc0:	68a7      	ldr	r7, [r4, #8]
	BT_DBG("status: 0x%x", evt->status);
    3bc2:	6836      	ldr	r6, [r6, #0]
    3bc4:	f010 fe02 	bl	147cc <_impl_k_current_get>
    3bc8:	9503      	str	r5, [sp, #12]
    3bca:	783b      	ldrb	r3, [r7, #0]
    3bcc:	9302      	str	r3, [sp, #8]
    3bce:	9001      	str	r0, [sp, #4]
    3bd0:	4b9b      	ldr	r3, [pc, #620]	; (3e40 <bt_recv+0x8a4>)
    3bd2:	4a97      	ldr	r2, [pc, #604]	; (3e30 <bt_recv+0x894>)
    3bd4:	4997      	ldr	r1, [pc, #604]	; (3e34 <bt_recv+0x898>)
    3bd6:	489b      	ldr	r0, [pc, #620]	; (3e44 <bt_recv+0x8a8>)
    3bd8:	9500      	str	r5, [sp, #0]
    3bda:	47b0      	blx	r6
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3bdc:	f06f 0120 	mvn.w	r1, #32
    3be0:	4899      	ldr	r0, [pc, #612]	; (3e48 <bt_recv+0x8ac>)
    3be2:	f7fe fa0b 	bl	1ffc <atomic_and>
	if (!evt->status) {
    3be6:	783b      	ldrb	r3, [r7, #0]
    3be8:	b943      	cbnz	r3, 3bfc <bt_recv+0x660>
		memcpy(pub_key, evt->key, 64);
    3bea:	1c79      	adds	r1, r7, #1
    3bec:	2240      	movs	r2, #64	; 0x40
    3bee:	4897      	ldr	r0, [pc, #604]	; (3e4c <bt_recv+0x8b0>)
    3bf0:	f7fe f82a 	bl	1c48 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3bf4:	2110      	movs	r1, #16
    3bf6:	4894      	ldr	r0, [pc, #592]	; (3e48 <bt_recv+0x8ac>)
    3bf8:	f7fe f9ef 	bl	1fda <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3bfc:	4b94      	ldr	r3, [pc, #592]	; (3e50 <bt_recv+0x8b4>)
    3bfe:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    3c00:	1c7e      	adds	r6, r7, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3c02:	2d00      	cmp	r5, #0
    3c04:	f43f ad24 	beq.w	3650 <bt_recv+0xb4>
		cb->func(evt->status ? NULL : evt->key);
    3c08:	783a      	ldrb	r2, [r7, #0]
    3c0a:	682b      	ldr	r3, [r5, #0]
    3c0c:	2a00      	cmp	r2, #0
    3c0e:	bf0c      	ite	eq
    3c10:	4630      	moveq	r0, r6
    3c12:	2000      	movne	r0, #0
    3c14:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3c16:	686d      	ldr	r5, [r5, #4]
    3c18:	e7f3      	b.n	3c02 <bt_recv+0x666>
    3c1a:	68a7      	ldr	r7, [r4, #8]
	BT_DBG("status: 0x%x", evt->status);
    3c1c:	6836      	ldr	r6, [r6, #0]
    3c1e:	f010 fdd5 	bl	147cc <_impl_k_current_get>
    3c22:	9503      	str	r5, [sp, #12]
    3c24:	783b      	ldrb	r3, [r7, #0]
    3c26:	9500      	str	r5, [sp, #0]
	if (dh_key_cb) {
    3c28:	4d8a      	ldr	r5, [pc, #552]	; (3e54 <bt_recv+0x8b8>)
	BT_DBG("status: 0x%x", evt->status);
    3c2a:	9302      	str	r3, [sp, #8]
    3c2c:	9001      	str	r0, [sp, #4]
    3c2e:	4a80      	ldr	r2, [pc, #512]	; (3e30 <bt_recv+0x894>)
    3c30:	4b89      	ldr	r3, [pc, #548]	; (3e58 <bt_recv+0x8bc>)
    3c32:	4980      	ldr	r1, [pc, #512]	; (3e34 <bt_recv+0x898>)
    3c34:	4883      	ldr	r0, [pc, #524]	; (3e44 <bt_recv+0x8a8>)
    3c36:	47b0      	blx	r6
	if (dh_key_cb) {
    3c38:	682a      	ldr	r2, [r5, #0]
    3c3a:	2a00      	cmp	r2, #0
    3c3c:	f43f ad08 	beq.w	3650 <bt_recv+0xb4>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3c40:	783b      	ldrb	r3, [r7, #0]
    3c42:	b923      	cbnz	r3, 3c4e <bt_recv+0x6b2>
    3c44:	1c78      	adds	r0, r7, #1
    3c46:	4790      	blx	r2
		dh_key_cb = NULL;
    3c48:	2300      	movs	r3, #0
    3c4a:	602b      	str	r3, [r5, #0]
    3c4c:	e500      	b.n	3650 <bt_recv+0xb4>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3c4e:	2000      	movs	r0, #0
    3c50:	e7f9      	b.n	3c46 <bt_recv+0x6aa>
	u8_t num_reports = net_buf_pull_u8(buf);
    3c52:	9809      	ldr	r0, [sp, #36]	; 0x24
    3c54:	f00f fd99 	bl	1378a <net_buf_simple_pull_u8>
	BT_DBG("Adv number of reports %u",  num_reports);
    3c58:	6837      	ldr	r7, [r6, #0]
	u8_t num_reports = net_buf_pull_u8(buf);
    3c5a:	900a      	str	r0, [sp, #40]	; 0x28
    3c5c:	f010 fdb6 	bl	147cc <_impl_k_current_get>
	BT_DBG("Adv number of reports %u",  num_reports);
    3c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3c62:	9302      	str	r3, [sp, #8]
    3c64:	9001      	str	r0, [sp, #4]
    3c66:	9503      	str	r5, [sp, #12]
    3c68:	9500      	str	r5, [sp, #0]
    3c6a:	4b7c      	ldr	r3, [pc, #496]	; (3e5c <bt_recv+0x8c0>)
    3c6c:	4a70      	ldr	r2, [pc, #448]	; (3e30 <bt_recv+0x894>)
    3c6e:	4971      	ldr	r1, [pc, #452]	; (3e34 <bt_recv+0x898>)
    3c70:	487b      	ldr	r0, [pc, #492]	; (3e60 <bt_recv+0x8c4>)
    3c72:	47b8      	blx	r7
	while (num_reports--) {
    3c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3c76:	2b00      	cmp	r3, #0
    3c78:	f43f acea 	beq.w	3650 <bt_recv+0xb4>
		info = (void *)buf->data;
    3c7c:	68a7      	ldr	r7, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3c80:	2109      	movs	r1, #9
    3c82:	f00f fd7a 	bl	1377a <net_buf_simple_pull>
		rssi = info->data[info->length];
    3c86:	7a3b      	ldrb	r3, [r7, #8]
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3c88:	f8d6 9000 	ldr.w	r9, [r6]
		rssi = info->data[info->length];
    3c8c:	443b      	add	r3, r7
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3c8e:	f107 0801 	add.w	r8, r7, #1
		rssi = info->data[info->length];
    3c92:	f993 3009 	ldrsb.w	r3, [r3, #9]
    3c96:	930b      	str	r3, [sp, #44]	; 0x2c
    3c98:	f010 fd98 	bl	147cc <_impl_k_current_get>
    3c9c:	4682      	mov	sl, r0
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3c9e:	4640      	mov	r0, r8
    3ca0:	f7fe f87e 	bl	1da0 <bt_addr_le_str>
    3ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3ca6:	9506      	str	r5, [sp, #24]
    3ca8:	9305      	str	r3, [sp, #20]
    3caa:	7a3b      	ldrb	r3, [r7, #8]
    3cac:	9304      	str	r3, [sp, #16]
    3cae:	783b      	ldrb	r3, [r7, #0]
    3cb0:	9303      	str	r3, [sp, #12]
    3cb2:	9002      	str	r0, [sp, #8]
    3cb4:	4b69      	ldr	r3, [pc, #420]	; (3e5c <bt_recv+0x8c0>)
    3cb6:	495f      	ldr	r1, [pc, #380]	; (3e34 <bt_recv+0x898>)
    3cb8:	486a      	ldr	r0, [pc, #424]	; (3e64 <bt_recv+0x8c8>)
    3cba:	4a5d      	ldr	r2, [pc, #372]	; (3e30 <bt_recv+0x894>)
    3cbc:	e88d 0420 	stmia.w	sp, {r5, sl}
    3cc0:	47c8      	blx	r9
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3cc2:	787b      	ldrb	r3, [r7, #1]
    3cc4:	3b02      	subs	r3, #2
    3cc6:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    3cc8:	4641      	mov	r1, r8
    3cca:	a810      	add	r0, sp, #64	; 0x40
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3ccc:	f200 8098 	bhi.w	3e00 <bt_recv+0x864>
			bt_addr_le_copy(&id_addr, &info->addr);
    3cd0:	f7fe f980 	bl	1fd4 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3cd4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    3cd8:	3b02      	subs	r3, #2
    3cda:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		if (scan_dev_found_cb) {
    3cde:	f8df b18c 	ldr.w	fp, [pc, #396]	; 3e6c <bt_recv+0x8d0>
    3ce2:	f8db 3000 	ldr.w	r3, [fp]
    3ce6:	b1a3      	cbz	r3, 3d12 <bt_recv+0x776>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
    3cea:	f00f fd5e 	bl	137aa <net_buf_simple_headroom>
			buf->len = info->length;
    3cee:	7a3b      	ldrb	r3, [r7, #8]
	state->len = buf->len;
    3cf0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    3cf4:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    3cf6:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    3cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3cfa:	f8db b000 	ldr.w	fp, [fp]
    3cfe:	783a      	ldrb	r2, [r7, #0]
    3d00:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3d02:	a810      	add	r0, sp, #64	; 0x40
    3d04:	47d8      	blx	fp
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3d06:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    3d08:	f8a4 a00c 	strh.w	sl, [r4, #12]
	buf->data = buf->__buf + state->offset;
    3d0c:	fa13 f389 	uxtah	r3, r3, r9
    3d10:	60a3      	str	r3, [r4, #8]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3d12:	2109      	movs	r1, #9
    3d14:	484c      	ldr	r0, [pc, #304]	; (3e48 <bt_recv+0x8ac>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    3d16:	783a      	ldrb	r2, [r7, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3d18:	f7fe fa0a 	bl	2130 <atomic_test_bit>
    3d1c:	4682      	mov	sl, r0
    3d1e:	2800      	cmp	r0, #0
    3d20:	d164      	bne.n	3dec <bt_recv+0x850>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    3d22:	2a01      	cmp	r2, #1
    3d24:	d862      	bhi.n	3dec <bt_recv+0x850>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    3d26:	2101      	movs	r1, #1
    3d28:	a810      	add	r0, sp, #64	; 0x40
    3d2a:	f000 ff01 	bl	4b30 <bt_conn_lookup_state_le>
	if (!conn) {
    3d2e:	4681      	mov	r9, r0
    3d30:	2800      	cmp	r0, #0
    3d32:	d05b      	beq.n	3dec <bt_recv+0x850>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3d34:	2108      	movs	r1, #8
    3d36:	4844      	ldr	r0, [pc, #272]	; (3e48 <bt_recv+0x8ac>)
    3d38:	f7fe f9fa 	bl	2130 <atomic_test_bit>
    3d3c:	2800      	cmp	r0, #0
    3d3e:	d162      	bne.n	3e06 <bt_recv+0x86a>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    3d40:	2102      	movs	r1, #2
    3d42:	4841      	ldr	r0, [pc, #260]	; (3e48 <bt_recv+0x8ac>)
    3d44:	f7fe f9f4 	bl	2130 <atomic_test_bit>
    3d48:	b110      	cbz	r0, 3d50 <bt_recv+0x7b4>
			set_random_address(&bt_dev.id_addr.a);
    3d4a:	4847      	ldr	r0, [pc, #284]	; (3e68 <bt_recv+0x8cc>)
    3d4c:	f7fe fb14 	bl	2378 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3d50:	493a      	ldr	r1, [pc, #232]	; (3e3c <bt_recv+0x8a0>)
    3d52:	f109 004b 	add.w	r0, r9, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3d56:	f109 0a52 	add.w	sl, r9, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3d5a:	f7fe f93b 	bl	1fd4 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3d5e:	4641      	mov	r1, r8
    3d60:	4650      	mov	r0, sl
    3d62:	f7fe f937 	bl	1fd4 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    3d66:	2119      	movs	r1, #25
    3d68:	f242 000d 	movw	r0, #8205	; 0x200d
    3d6c:	f7fe f9ee 	bl	214c <bt_hci_cmd_create>
	if (!buf) {
    3d70:	4683      	mov	fp, r0
    3d72:	2800      	cmp	r0, #0
    3d74:	d04c      	beq.n	3e10 <bt_recv+0x874>
	cp = net_buf_add(buf, sizeof(*cp));
    3d76:	2119      	movs	r1, #25
    3d78:	3008      	adds	r0, #8
    3d7a:	f00f fcdf 	bl	1373c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3d7e:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    3d80:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
    3d82:	2100      	movs	r1, #0
    3d84:	f7fd ff8c 	bl	1ca0 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3d88:	2200      	movs	r2, #0
    3d8a:	2360      	movs	r3, #96	; 0x60
    3d8c:	f888 3000 	strb.w	r3, [r8]
    3d90:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
    3d94:	f888 3002 	strb.w	r3, [r8, #2]
    3d98:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3d9c:	4651      	mov	r1, sl
    3d9e:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
    3da2:	920b      	str	r2, [sp, #44]	; 0x2c
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3da4:	f7fe f916 	bl	1fd4 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    3da8:	f899 304b 	ldrb.w	r3, [r9, #75]	; 0x4b
    3dac:	f888 300c 	strb.w	r3, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    3db0:	f8b9 305c 	ldrh.w	r3, [r9, #92]	; 0x5c
    3db4:	f8a8 300d 	strh.w	r3, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    3db8:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    3dbc:	f8a8 300f 	strh.w	r3, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    3dc0:	f8b9 3060 	ldrh.w	r3, [r9, #96]	; 0x60
    3dc4:	f8a8 3011 	strh.w	r3, [r8, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    3dc8:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
    3dcc:	f8a8 3013 	strh.w	r3, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3dd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3dd2:	4659      	mov	r1, fp
    3dd4:	f242 000d 	movw	r0, #8205	; 0x200d
    3dd8:	f7fe fa1c 	bl	2214 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    3ddc:	b9c0      	cbnz	r0, 3e10 <bt_recv+0x874>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    3dde:	4648      	mov	r0, r9
    3de0:	2102      	movs	r1, #2
    3de2:	f000 ff83 	bl	4cec <bt_conn_set_state>
	bt_conn_unref(conn);
    3de6:	4648      	mov	r0, r9
    3de8:	f000 fec0 	bl	4b6c <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    3dec:	7a39      	ldrb	r1, [r7, #8]
    3dee:	9809      	ldr	r0, [sp, #36]	; 0x24
    3df0:	3101      	adds	r1, #1
    3df2:	f00f fcc2 	bl	1377a <net_buf_simple_pull>
    3df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3df8:	3b01      	subs	r3, #1
    3dfa:	b2db      	uxtb	r3, r3
    3dfc:	930a      	str	r3, [sp, #40]	; 0x28
    3dfe:	e739      	b.n	3c74 <bt_recv+0x6d8>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    3e00:	f7fe f8e8 	bl	1fd4 <bt_addr_le_copy>
    3e04:	e76b      	b.n	3cde <bt_recv+0x742>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    3e06:	4650      	mov	r0, sl
    3e08:	f7fe fa80 	bl	230c <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3e0c:	2800      	cmp	r0, #0
    3e0e:	d097      	beq.n	3d40 <bt_recv+0x7a4>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    3e10:	231f      	movs	r3, #31
    3e12:	f889 3008 	strb.w	r3, [r9, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3e16:	2100      	movs	r1, #0
    3e18:	4648      	mov	r0, r9
    3e1a:	f000 ff67 	bl	4cec <bt_conn_set_state>
	bt_conn_unref(conn);
    3e1e:	4648      	mov	r0, r9
    3e20:	f000 fea4 	bl	4b6c <bt_conn_unref>
	bt_le_scan_update(false);
    3e24:	2000      	movs	r0, #0
    3e26:	f7fe fcb5 	bl	2794 <bt_le_scan_update>
    3e2a:	e7df      	b.n	3dec <bt_recv+0x850>
    3e2c:	000159c6 	.word	0x000159c6
    3e30:	0001587b 	.word	0x0001587b
    3e34:	0001679c 	.word	0x0001679c
    3e38:	000163f9 	.word	0x000163f9
    3e3c:	20003a60 	.word	0x20003a60
    3e40:	00015a07 	.word	0x00015a07
    3e44:	00016438 	.word	0x00016438
    3e48:	20003ad0 	.word	0x20003ad0
    3e4c:	20000290 	.word	0x20000290
    3e50:	200002d0 	.word	0x200002d0
    3e54:	2000028c 	.word	0x2000028c
    3e58:	00015a18 	.word	0x00015a18
    3e5c:	00015a6a 	.word	0x00015a6a
    3e60:	0001645a 	.word	0x0001645a
    3e64:	00016488 	.word	0x00016488
    3e68:	20003a61 	.word	0x20003a61
    3e6c:	200002d8 	.word	0x200002d8
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    3e70:	f8d6 8000 	ldr.w	r8, [r6]
    3e74:	89a6      	ldrh	r6, [r4, #12]
    3e76:	68a0      	ldr	r0, [r4, #8]
    3e78:	4631      	mov	r1, r6
    3e7a:	f7fd ff35 	bl	1ce8 <bt_hex>
    3e7e:	e88d 00a0 	stmia.w	sp, {r5, r7}
    3e82:	9003      	str	r0, [sp, #12]
    3e84:	4b1c      	ldr	r3, [pc, #112]	; (3ef8 <bt_recv+0x95c>)
    3e86:	4a1d      	ldr	r2, [pc, #116]	; (3efc <bt_recv+0x960>)
    3e88:	491d      	ldr	r1, [pc, #116]	; (3f00 <bt_recv+0x964>)
    3e8a:	481e      	ldr	r0, [pc, #120]	; (3f04 <bt_recv+0x968>)
    3e8c:	9504      	str	r5, [sp, #16]
    3e8e:	9602      	str	r6, [sp, #8]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3e90:	47c0      	blx	r8
    3e92:	f7ff bbdd 	b.w	3650 <bt_recv+0xb4>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    3e96:	e88d 0280 	stmia.w	sp, {r7, r9}
    3e9a:	9702      	str	r7, [sp, #8]
    3e9c:	4b1a      	ldr	r3, [pc, #104]	; (3f08 <bt_recv+0x96c>)
    3e9e:	4a1b      	ldr	r2, [pc, #108]	; (3f0c <bt_recv+0x970>)
    3ea0:	4917      	ldr	r1, [pc, #92]	; (3f00 <bt_recv+0x964>)
    3ea2:	481b      	ldr	r0, [pc, #108]	; (3f10 <bt_recv+0x974>)
    3ea4:	f8d8 5000 	ldr.w	r5, [r8]
    3ea8:	47a8      	blx	r5
		net_buf_unref(buf);
    3eaa:	4620      	mov	r0, r4
    3eac:	f00f fc14 	bl	136d8 <net_buf_unref>
		return -EINVAL;
    3eb0:	f06f 0015 	mvn.w	r0, #21
    3eb4:	f7ff bbed 	b.w	3692 <bt_recv+0xf6>
	net_buf_pull(buf, sizeof(*hdr));
    3eb8:	f104 0308 	add.w	r3, r4, #8
    3ebc:	2102      	movs	r1, #2
    3ebe:	4618      	mov	r0, r3
    3ec0:	9309      	str	r3, [sp, #36]	; 0x24
    3ec2:	f00f fc5a 	bl	1377a <net_buf_simple_pull>
	switch (hdr->evt) {
    3ec6:	f89a 7000 	ldrb.w	r7, [sl]
    3eca:	2f05      	cmp	r7, #5
    3ecc:	f43f ac0f 	beq.w	36ee <bt_recv+0x152>
    3ed0:	2f3e      	cmp	r7, #62	; 0x3e
    3ed2:	f43f ac68 	beq.w	37a6 <bt_recv+0x20a>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3ed6:	f8d6 8000 	ldr.w	r8, [r6]
    3eda:	89a6      	ldrh	r6, [r4, #12]
    3edc:	68a0      	ldr	r0, [r4, #8]
    3ede:	4631      	mov	r1, r6
    3ee0:	f7fd ff02 	bl	1ce8 <bt_hex>
    3ee4:	9504      	str	r5, [sp, #16]
    3ee6:	9003      	str	r0, [sp, #12]
    3ee8:	9602      	str	r6, [sp, #8]
    3eea:	e88d 00a0 	stmia.w	sp, {r5, r7}
    3eee:	4b09      	ldr	r3, [pc, #36]	; (3f14 <bt_recv+0x978>)
    3ef0:	4a02      	ldr	r2, [pc, #8]	; (3efc <bt_recv+0x960>)
    3ef2:	4903      	ldr	r1, [pc, #12]	; (3f00 <bt_recv+0x964>)
    3ef4:	4808      	ldr	r0, [pc, #32]	; (3f18 <bt_recv+0x97c>)
    3ef6:	e7cb      	b.n	3e90 <bt_recv+0x8f4>
    3ef8:	00015a78 	.word	0x00015a78
    3efc:	000167d7 	.word	0x000167d7
    3f00:	0001679c 	.word	0x0001679c
    3f04:	000164be 	.word	0x000164be
    3f08:	00015bea 	.word	0x00015bea
    3f0c:	00016754 	.word	0x00016754
    3f10:	00016525 	.word	0x00016525
    3f14:	00015a8a 	.word	0x00015a8a
    3f18:	000164f3 	.word	0x000164f3

00003f1c <bt_recv_prio>:
{
    3f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3f20:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3f22:	f8d0 8008 	ldr.w	r8, [r0, #8]
    3f26:	4e86      	ldr	r6, [pc, #536]	; (4140 <bt_recv_prio+0x224>)
    3f28:	4c86      	ldr	r4, [pc, #536]	; (4144 <bt_recv_prio+0x228>)
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3f2a:	2b01      	cmp	r3, #1
{
    3f2c:	b089      	sub	sp, #36	; 0x24
    3f2e:	4605      	mov	r5, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3f30:	d00d      	beq.n	3f4e <bt_recv_prio+0x32>
    3f32:	9401      	str	r4, [sp, #4]
    3f34:	9400      	str	r4, [sp, #0]
    3f36:	6834      	ldr	r4, [r6, #0]
    3f38:	4b83      	ldr	r3, [pc, #524]	; (4148 <bt_recv_prio+0x22c>)
    3f3a:	4a84      	ldr	r2, [pc, #528]	; (414c <bt_recv_prio+0x230>)
    3f3c:	4984      	ldr	r1, [pc, #528]	; (4150 <bt_recv_prio+0x234>)
    3f3e:	4885      	ldr	r0, [pc, #532]	; (4154 <bt_recv_prio+0x238>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3f40:	47a0      	blx	r4
    3f42:	4040      	eors	r0, r0
    3f44:	f380 8811 	msr	BASEPRI, r0
    3f48:	f04f 0004 	mov.w	r0, #4
    3f4c:	df02      	svc	2
    3f4e:	8982      	ldrh	r2, [r0, #12]
    3f50:	2a01      	cmp	r2, #1
    3f52:	d807      	bhi.n	3f64 <bt_recv_prio+0x48>
    3f54:	9401      	str	r4, [sp, #4]
    3f56:	9400      	str	r4, [sp, #0]
    3f58:	6834      	ldr	r4, [r6, #0]
    3f5a:	4b7b      	ldr	r3, [pc, #492]	; (4148 <bt_recv_prio+0x22c>)
    3f5c:	4a7b      	ldr	r2, [pc, #492]	; (414c <bt_recv_prio+0x230>)
    3f5e:	497c      	ldr	r1, [pc, #496]	; (4150 <bt_recv_prio+0x234>)
    3f60:	487d      	ldr	r0, [pc, #500]	; (4158 <bt_recv_prio+0x23c>)
    3f62:	e7ed      	b.n	3f40 <bt_recv_prio+0x24>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3f64:	f898 2000 	ldrb.w	r2, [r8]
    3f68:	2a13      	cmp	r2, #19
    3f6a:	f200 80e1 	bhi.w	4130 <bt_recv_prio+0x214>
    3f6e:	4093      	lsls	r3, r2
    3f70:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3f74:	f000 80dc 	beq.w	4130 <bt_recv_prio+0x214>
	net_buf_pull(buf, sizeof(*hdr));
    3f78:	f100 0708 	add.w	r7, r0, #8
    3f7c:	2102      	movs	r1, #2
    3f7e:	4638      	mov	r0, r7
    3f80:	f00f fbfb 	bl	1377a <net_buf_simple_pull>
	switch (hdr->evt) {
    3f84:	f898 3000 	ldrb.w	r3, [r8]
    3f88:	2b0f      	cmp	r3, #15
    3f8a:	d02d      	beq.n	3fe8 <bt_recv_prio+0xcc>
    3f8c:	2b13      	cmp	r3, #19
    3f8e:	d04c      	beq.n	402a <bt_recv_prio+0x10e>
    3f90:	2b0e      	cmp	r3, #14
    3f92:	f040 80c2 	bne.w	411a <bt_recv_prio+0x1fe>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    3f96:	68ab      	ldr	r3, [r5, #8]
	BT_DBG("opcode 0x%04x", opcode);
    3f98:	6836      	ldr	r6, [r6, #0]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3f9a:	f8b3 8001 	ldrh.w	r8, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    3f9e:	f893 9000 	ldrb.w	r9, [r3]
    3fa2:	f010 fc13 	bl	147cc <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    3fa6:	4b6d      	ldr	r3, [pc, #436]	; (415c <bt_recv_prio+0x240>)
    3fa8:	4a6d      	ldr	r2, [pc, #436]	; (4160 <bt_recv_prio+0x244>)
    3faa:	9001      	str	r0, [sp, #4]
    3fac:	4968      	ldr	r1, [pc, #416]	; (4150 <bt_recv_prio+0x234>)
    3fae:	486d      	ldr	r0, [pc, #436]	; (4164 <bt_recv_prio+0x248>)
    3fb0:	9403      	str	r4, [sp, #12]
    3fb2:	f8cd 8008 	str.w	r8, [sp, #8]
    3fb6:	9400      	str	r4, [sp, #0]
    3fb8:	47b0      	blx	r6
	net_buf_pull(buf, sizeof(*evt));
    3fba:	2103      	movs	r1, #3
    3fbc:	4638      	mov	r0, r7
    3fbe:	f00f fbdc 	bl	1377a <net_buf_simple_pull>
	status = buf->data[0];
    3fc2:	68ab      	ldr	r3, [r5, #8]
	hci_cmd_done(opcode, status, buf);
    3fc4:	462a      	mov	r2, r5
    3fc6:	7819      	ldrb	r1, [r3, #0]
    3fc8:	4640      	mov	r0, r8
    3fca:	f7fe f837 	bl	203c <hci_cmd_done>
	if (ncmd) {
    3fce:	f1b9 0f00 	cmp.w	r9, #0
    3fd2:	d002      	beq.n	3fda <bt_recv_prio+0xbe>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3fd4:	4864      	ldr	r0, [pc, #400]	; (4168 <bt_recv_prio+0x24c>)
    3fd6:	f010 fc08 	bl	147ea <_impl_k_sem_give>
	net_buf_unref(buf);
    3fda:	4628      	mov	r0, r5
    3fdc:	f00f fb7c 	bl	136d8 <net_buf_unref>
}
    3fe0:	2000      	movs	r0, #0
    3fe2:	b009      	add	sp, #36	; 0x24
    3fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    3fe8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	BT_DBG("opcode 0x%04x", opcode);
    3fec:	6836      	ldr	r6, [r6, #0]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3fee:	f8b8 9002 	ldrh.w	r9, [r8, #2]
	u8_t ncmd = evt->ncmd;
    3ff2:	f898 a001 	ldrb.w	sl, [r8, #1]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3ff6:	f010 fbe9 	bl	147cc <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    3ffa:	4a59      	ldr	r2, [pc, #356]	; (4160 <bt_recv_prio+0x244>)
    3ffc:	9001      	str	r0, [sp, #4]
    3ffe:	4b5b      	ldr	r3, [pc, #364]	; (416c <bt_recv_prio+0x250>)
    4000:	4953      	ldr	r1, [pc, #332]	; (4150 <bt_recv_prio+0x234>)
    4002:	4858      	ldr	r0, [pc, #352]	; (4164 <bt_recv_prio+0x248>)
    4004:	9403      	str	r4, [sp, #12]
    4006:	f8cd 9008 	str.w	r9, [sp, #8]
    400a:	9400      	str	r4, [sp, #0]
    400c:	47b0      	blx	r6
	net_buf_pull(buf, sizeof(*evt));
    400e:	2104      	movs	r1, #4
    4010:	4638      	mov	r0, r7
    4012:	f00f fbb2 	bl	1377a <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    4016:	462a      	mov	r2, r5
    4018:	f898 1000 	ldrb.w	r1, [r8]
    401c:	4648      	mov	r0, r9
    401e:	f7fe f80d 	bl	203c <hci_cmd_done>
	if (ncmd) {
    4022:	f1ba 0f00 	cmp.w	sl, #0
    4026:	d0d8      	beq.n	3fda <bt_recv_prio+0xbe>
    4028:	e7d4      	b.n	3fd4 <bt_recv_prio+0xb8>
    402a:	f8d5 b008 	ldr.w	fp, [r5, #8]
	BT_DBG("num_handles %u", evt->num_handles);
    402e:	6837      	ldr	r7, [r6, #0]
    4030:	f010 fbcc 	bl	147cc <_impl_k_current_get>
    4034:	9403      	str	r4, [sp, #12]
    4036:	f89b 3000 	ldrb.w	r3, [fp]
    403a:	9302      	str	r3, [sp, #8]
    403c:	9001      	str	r0, [sp, #4]
    403e:	9400      	str	r4, [sp, #0]
    4040:	4b4b      	ldr	r3, [pc, #300]	; (4170 <bt_recv_prio+0x254>)
    4042:	4a47      	ldr	r2, [pc, #284]	; (4160 <bt_recv_prio+0x244>)
    4044:	4942      	ldr	r1, [pc, #264]	; (4150 <bt_recv_prio+0x234>)
    4046:	484b      	ldr	r0, [pc, #300]	; (4174 <bt_recv_prio+0x258>)
    4048:	47b8      	blx	r7
	for (i = 0; i < evt->num_handles; i++) {
    404a:	f04f 0900 	mov.w	r9, #0
    404e:	f89b 3000 	ldrb.w	r3, [fp]
    4052:	4599      	cmp	r9, r3
    4054:	dac1      	bge.n	3fda <bt_recv_prio+0xbe>
    4056:	eb0b 0389 	add.w	r3, fp, r9, lsl #2
		BT_DBG("handle %u count %u", handle, count);
    405a:	f8d6 8000 	ldr.w	r8, [r6]
		handle = sys_le16_to_cpu(evt->h[i].handle);
    405e:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4062:	f8b3 7003 	ldrh.w	r7, [r3, #3]
    4066:	f010 fbb1 	bl	147cc <_impl_k_current_get>
		BT_DBG("handle %u count %u", handle, count);
    406a:	9404      	str	r4, [sp, #16]
    406c:	9001      	str	r0, [sp, #4]
    406e:	9703      	str	r7, [sp, #12]
    4070:	f8cd a008 	str.w	sl, [sp, #8]
    4074:	9400      	str	r4, [sp, #0]
    4076:	4b3e      	ldr	r3, [pc, #248]	; (4170 <bt_recv_prio+0x254>)
    4078:	4a39      	ldr	r2, [pc, #228]	; (4160 <bt_recv_prio+0x244>)
    407a:	4935      	ldr	r1, [pc, #212]	; (4150 <bt_recv_prio+0x234>)
    407c:	483e      	ldr	r0, [pc, #248]	; (4178 <bt_recv_prio+0x25c>)
    407e:	47c0      	blx	r8
	__asm__ volatile(
    4080:	f04f 0320 	mov.w	r3, #32
    4084:	f3ef 8211 	mrs	r2, BASEPRI
    4088:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    408c:	4650      	mov	r0, sl
    408e:	9207      	str	r2, [sp, #28]
    4090:	f000 fd1e 	bl	4ad0 <bt_conn_lookup_handle>
		if (!conn) {
    4094:	4680      	mov	r8, r0
    4096:	b970      	cbnz	r0, 40b6 <bt_recv_prio+0x19a>
			BT_ERR("No connection for handle %u", handle);
    4098:	e88d 0410 	stmia.w	sp, {r4, sl}
    409c:	9402      	str	r4, [sp, #8]
    409e:	6837      	ldr	r7, [r6, #0]
    40a0:	4b33      	ldr	r3, [pc, #204]	; (4170 <bt_recv_prio+0x254>)
    40a2:	4a2a      	ldr	r2, [pc, #168]	; (414c <bt_recv_prio+0x230>)
    40a4:	492a      	ldr	r1, [pc, #168]	; (4150 <bt_recv_prio+0x234>)
    40a6:	4835      	ldr	r0, [pc, #212]	; (417c <bt_recv_prio+0x260>)
    40a8:	47b8      	blx	r7
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    40aa:	9b07      	ldr	r3, [sp, #28]
    40ac:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < evt->num_handles; i++) {
    40b0:	f109 0901 	add.w	r9, r9, #1
    40b4:	e7cb      	b.n	404e <bt_recv_prio+0x132>
    40b6:	9b07      	ldr	r3, [sp, #28]
    40b8:	f383 8811 	msr	BASEPRI, r3
			k_fifo_put(&conn->tx_notify, node);
    40bc:	f100 0a18 	add.w	sl, r0, #24
		while (count--) {
    40c0:	b1f7      	cbz	r7, 4100 <bt_recv_prio+0x1e4>
	__asm__ volatile(
    40c2:	f04f 0320 	mov.w	r3, #32
    40c6:	f3ef 8011 	mrs	r0, BASEPRI
    40ca:	f383 8811 	msr	BASEPRI, r3
    40ce:	f8d8 1010 	ldr.w	r1, [r8, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    40d2:	b141      	cbz	r1, 40e6 <bt_recv_prio+0x1ca>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    40d4:	f8d8 2014 	ldr.w	r2, [r8, #20]
	return node->next;
    40d8:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    40da:	f8c8 3010 	str.w	r3, [r8, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    40de:	4291      	cmp	r1, r2
	list->tail = node;
    40e0:	bf08      	it	eq
    40e2:	f8c8 3014 	streq.w	r3, [r8, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    40e6:	f380 8811 	msr	BASEPRI, r0
    40ea:	3f01      	subs	r7, #1
    40ec:	b2bf      	uxth	r7, r7
			if (!node) {
    40ee:	b959      	cbnz	r1, 4108 <bt_recv_prio+0x1ec>
				BT_ERR("packets count mismatch");
    40f0:	9401      	str	r4, [sp, #4]
    40f2:	9400      	str	r4, [sp, #0]
    40f4:	6837      	ldr	r7, [r6, #0]
    40f6:	4b1e      	ldr	r3, [pc, #120]	; (4170 <bt_recv_prio+0x254>)
    40f8:	4a14      	ldr	r2, [pc, #80]	; (414c <bt_recv_prio+0x230>)
    40fa:	4915      	ldr	r1, [pc, #84]	; (4150 <bt_recv_prio+0x234>)
    40fc:	4820      	ldr	r0, [pc, #128]	; (4180 <bt_recv_prio+0x264>)
    40fe:	47b8      	blx	r7
		bt_conn_unref(conn);
    4100:	4640      	mov	r0, r8
    4102:	f000 fd33 	bl	4b6c <bt_conn_unref>
    4106:	e7d3      	b.n	40b0 <bt_recv_prio+0x194>
			k_fifo_put(&conn->tx_notify, node);
    4108:	4650      	mov	r0, sl
    410a:	f010 f8a9 	bl	14260 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    410e:	4640      	mov	r0, r8
    4110:	f000 f9c0 	bl	4494 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4114:	f010 fb69 	bl	147ea <_impl_k_sem_give>
    4118:	e7d2      	b.n	40c0 <bt_recv_prio+0x1a4>
		net_buf_unref(buf);
    411a:	4628      	mov	r0, r5
    411c:	f00f fadc 	bl	136d8 <net_buf_unref>
		BT_ASSERT(0);
    4120:	9401      	str	r4, [sp, #4]
    4122:	9400      	str	r4, [sp, #0]
    4124:	6834      	ldr	r4, [r6, #0]
    4126:	4b08      	ldr	r3, [pc, #32]	; (4148 <bt_recv_prio+0x22c>)
    4128:	4a08      	ldr	r2, [pc, #32]	; (414c <bt_recv_prio+0x230>)
    412a:	4909      	ldr	r1, [pc, #36]	; (4150 <bt_recv_prio+0x234>)
    412c:	4815      	ldr	r0, [pc, #84]	; (4184 <bt_recv_prio+0x268>)
    412e:	e707      	b.n	3f40 <bt_recv_prio+0x24>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    4130:	9401      	str	r4, [sp, #4]
    4132:	9400      	str	r4, [sp, #0]
    4134:	6834      	ldr	r4, [r6, #0]
    4136:	4b04      	ldr	r3, [pc, #16]	; (4148 <bt_recv_prio+0x22c>)
    4138:	4a04      	ldr	r2, [pc, #16]	; (414c <bt_recv_prio+0x230>)
    413a:	4905      	ldr	r1, [pc, #20]	; (4150 <bt_recv_prio+0x234>)
    413c:	4812      	ldr	r0, [pc, #72]	; (4188 <bt_recv_prio+0x26c>)
    413e:	e6ff      	b.n	3f40 <bt_recv_prio+0x24>
    4140:	20003a5c 	.word	0x20003a5c
    4144:	00015359 	.word	0x00015359
    4148:	00015bf2 	.word	0x00015bf2
    414c:	00016754 	.word	0x00016754
    4150:	0001679c 	.word	0x0001679c
    4154:	00016588 	.word	0x00016588
    4158:	000165cc 	.word	0x000165cc
    415c:	00015a4a 	.word	0x00015a4a
    4160:	0001587b 	.word	0x0001587b
    4164:	00016606 	.word	0x00016606
    4168:	20003b08 	.word	0x20003b08
    416c:	00015a5b 	.word	0x00015a5b
    4170:	0001593f 	.word	0x0001593f
    4174:	00016629 	.word	0x00016629
    4178:	0001664d 	.word	0x0001664d
    417c:	00016675 	.word	0x00016675
    4180:	000166a1 	.word	0x000166a1
    4184:	000166c8 	.word	0x000166c8
    4188:	000166eb 	.word	0x000166eb

0000418c <bt_hci_driver_register>:
{
    418c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (bt_dev.drv) {
    418e:	4b13      	ldr	r3, [pc, #76]	; (41dc <bt_hci_driver_register+0x50>)
    4190:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
    4194:	4605      	mov	r5, r0
	if (bt_dev.drv) {
    4196:	b9d4      	cbnz	r4, 41ce <bt_hci_driver_register+0x42>
	if (!drv->open || !drv->send) {
    4198:	68c2      	ldr	r2, [r0, #12]
    419a:	b1da      	cbz	r2, 41d4 <bt_hci_driver_register+0x48>
    419c:	6902      	ldr	r2, [r0, #16]
    419e:	b1ca      	cbz	r2, 41d4 <bt_hci_driver_register+0x48>
	bt_dev.drv = drv;
    41a0:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
	BT_DBG("Registered %s", drv->name ? drv->name : "");
    41a4:	4b0e      	ldr	r3, [pc, #56]	; (41e0 <bt_hci_driver_register+0x54>)
    41a6:	681e      	ldr	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    41a8:	f010 fb10 	bl	147cc <_impl_k_current_get>
    41ac:	4a0d      	ldr	r2, [pc, #52]	; (41e4 <bt_hci_driver_register+0x58>)
    41ae:	682b      	ldr	r3, [r5, #0]
    41b0:	9203      	str	r2, [sp, #12]
    41b2:	2b00      	cmp	r3, #0
    41b4:	bf08      	it	eq
    41b6:	4613      	moveq	r3, r2
    41b8:	9302      	str	r3, [sp, #8]
    41ba:	9001      	str	r0, [sp, #4]
    41bc:	9200      	str	r2, [sp, #0]
    41be:	480a      	ldr	r0, [pc, #40]	; (41e8 <bt_hci_driver_register+0x5c>)
    41c0:	4b0a      	ldr	r3, [pc, #40]	; (41ec <bt_hci_driver_register+0x60>)
    41c2:	4a0b      	ldr	r2, [pc, #44]	; (41f0 <bt_hci_driver_register+0x64>)
    41c4:	490b      	ldr	r1, [pc, #44]	; (41f4 <bt_hci_driver_register+0x68>)
    41c6:	47b0      	blx	r6
	return 0;
    41c8:	4620      	mov	r0, r4
}
    41ca:	b004      	add	sp, #16
    41cc:	bd70      	pop	{r4, r5, r6, pc}
		return -EALREADY;
    41ce:	f06f 0044 	mvn.w	r0, #68	; 0x44
    41d2:	e7fa      	b.n	41ca <bt_hci_driver_register+0x3e>
		return -EINVAL;
    41d4:	f06f 0015 	mvn.w	r0, #21
    41d8:	e7f7      	b.n	41ca <bt_hci_driver_register+0x3e>
    41da:	bf00      	nop
    41dc:	20003a60 	.word	0x20003a60
    41e0:	20003a5c 	.word	0x20003a5c
    41e4:	00015359 	.word	0x00015359
    41e8:	00015e61 	.word	0x00015e61
    41ec:	00015bff 	.word	0x00015bff
    41f0:	0001587b 	.word	0x0001587b
    41f4:	0001679c 	.word	0x0001679c

000041f8 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    41f8:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    41fa:	4d2b      	ldr	r5, [pc, #172]	; (42a8 <bt_enable+0xb0>)
    41fc:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    4200:	b086      	sub	sp, #24
    4202:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    4204:	b973      	cbnz	r3, 4224 <bt_enable+0x2c>
		BT_ERR("No HCI driver registered");
    4206:	4b29      	ldr	r3, [pc, #164]	; (42ac <bt_enable+0xb4>)
    4208:	9301      	str	r3, [sp, #4]
    420a:	9300      	str	r3, [sp, #0]
    420c:	4b28      	ldr	r3, [pc, #160]	; (42b0 <bt_enable+0xb8>)
    420e:	4a29      	ldr	r2, [pc, #164]	; (42b4 <bt_enable+0xbc>)
    4210:	681c      	ldr	r4, [r3, #0]
    4212:	4929      	ldr	r1, [pc, #164]	; (42b8 <bt_enable+0xc0>)
    4214:	4b29      	ldr	r3, [pc, #164]	; (42bc <bt_enable+0xc4>)
    4216:	482a      	ldr	r0, [pc, #168]	; (42c0 <bt_enable+0xc8>)
    4218:	47a0      	blx	r4
		return -ENODEV;
    421a:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    421e:	4620      	mov	r0, r4
    4220:	b006      	add	sp, #24
    4222:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4224:	2101      	movs	r1, #1
    4226:	f105 0070 	add.w	r0, r5, #112	; 0x70
    422a:	f7fd fed6 	bl	1fda <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    422e:	f010 0001 	ands.w	r0, r0, #1
    4232:	d135      	bne.n	42a0 <bt_enable+0xa8>
	ready_cb = cb;
    4234:	4b23      	ldr	r3, [pc, #140]	; (42c4 <bt_enable+0xcc>)

    4236:	4924      	ldr	r1, [pc, #144]	; (42c8 <bt_enable+0xd0>)
    4238:	601e      	str	r6, [r3, #0]
    423a:	f06f 0308 	mvn.w	r3, #8
    423e:	9005      	str	r0, [sp, #20]
    4240:	9004      	str	r0, [sp, #16]
    4242:	9303      	str	r3, [sp, #12]
    4244:	9002      	str	r0, [sp, #8]
    4246:	9001      	str	r0, [sp, #4]
    4248:	9000      	str	r0, [sp, #0]
    424a:	4b20      	ldr	r3, [pc, #128]	; (42cc <bt_enable+0xd4>)
    424c:	4820      	ldr	r0, [pc, #128]	; (42d0 <bt_enable+0xd8>)
    424e:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    4252:	f010 fcc7 	bl	14be4 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    4256:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    425a:	68db      	ldr	r3, [r3, #12]
    425c:	4798      	blx	r3
	if (err) {
    425e:	4604      	mov	r4, r0
    4260:	b158      	cbz	r0, 427a <bt_enable+0x82>
		BT_ERR("HCI driver open failed (%d)", err);
    4262:	4b12      	ldr	r3, [pc, #72]	; (42ac <bt_enable+0xb4>)
    4264:	9302      	str	r3, [sp, #8]
    4266:	e88d 0018 	stmia.w	sp, {r3, r4}
    426a:	4b11      	ldr	r3, [pc, #68]	; (42b0 <bt_enable+0xb8>)
    426c:	4a11      	ldr	r2, [pc, #68]	; (42b4 <bt_enable+0xbc>)
    426e:	681d      	ldr	r5, [r3, #0]
    4270:	4911      	ldr	r1, [pc, #68]	; (42b8 <bt_enable+0xc0>)
    4272:	4b12      	ldr	r3, [pc, #72]	; (42bc <bt_enable+0xc4>)
    4274:	4817      	ldr	r0, [pc, #92]	; (42d4 <bt_enable+0xdc>)
    4276:	47a8      	blx	r5
		return err;
    4278:	e7d1      	b.n	421e <bt_enable+0x26>
	if (!cb) {
    427a:	b926      	cbnz	r6, 4286 <bt_enable+0x8e>
}
    427c:	b006      	add	sp, #24
    427e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    4282:	f7fe bab9 	b.w	27f8 <bt_init>
    4286:	2101      	movs	r1, #1
    4288:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    428c:	f7fd fea5 	bl	1fda <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    4290:	07c3      	lsls	r3, r0, #31
    4292:	d4c4      	bmi.n	421e <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    4294:	f105 0164 	add.w	r1, r5, #100	; 0x64
    4298:	480f      	ldr	r0, [pc, #60]	; (42d8 <bt_enable+0xe0>)
    429a:	f00f ffe1 	bl	14260 <k_queue_append>
    429e:	e7be      	b.n	421e <bt_enable+0x26>
		return -EALREADY;
    42a0:	f06f 0444 	mvn.w	r4, #68	; 0x44
    42a4:	e7bb      	b.n	421e <bt_enable+0x26>
    42a6:	bf00      	nop
    42a8:	20003a60 	.word	0x20003a60
    42ac:	00015359 	.word	0x00015359
    42b0:	20003a5c 	.word	0x20003a5c
    42b4:	00016754 	.word	0x00016754
    42b8:	0001679c 	.word	0x0001679c
    42bc:	00015c16 	.word	0x00015c16
    42c0:	00015d02 	.word	0x00015d02
    42c4:	200002d4 	.word	0x200002d4
    42c8:	20001a08 	.word	0x20001a08
    42cc:	00003325 	.word	0x00003325
    42d0:	200002dc 	.word	0x200002dc
    42d4:	00015d2b 	.word	0x00015d2b
    42d8:	20001988 	.word	0x20001988

000042dc <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    42dc:	2000      	movs	r0, #0
    42de:	4770      	bx	lr

000042e0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    42e0:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    42e2:	7803      	ldrb	r3, [r0, #0]
    42e4:	2b01      	cmp	r3, #1
{
    42e6:	4605      	mov	r5, r0
    42e8:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    42ea:	d810      	bhi.n	430e <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    42ec:	7843      	ldrb	r3, [r0, #1]
    42ee:	2b01      	cmp	r3, #1
    42f0:	d80d      	bhi.n	430e <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    42f2:	8841      	ldrh	r1, [r0, #2]
    42f4:	1f0b      	subs	r3, r1, #4
    42f6:	b29b      	uxth	r3, r3
    42f8:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    42fc:	4283      	cmp	r3, r0
    42fe:	d806      	bhi.n	430e <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    4300:	88aa      	ldrh	r2, [r5, #4]
    4302:	1f13      	subs	r3, r2, #4
    4304:	b29b      	uxth	r3, r3
    4306:	4283      	cmp	r3, r0
    4308:	d801      	bhi.n	430e <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    430a:	4291      	cmp	r1, r2
    430c:	d22b      	bcs.n	4366 <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    430e:	f06f 0415 	mvn.w	r4, #21
    4312:	e00e      	b.n	4332 <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    4314:	2108      	movs	r1, #8
    4316:	4819      	ldr	r0, [pc, #100]	; (437c <bt_le_scan_start+0x9c>)
    4318:	f7fd ff0a 	bl	2130 <atomic_test_bit>
    431c:	b158      	cbz	r0, 4336 <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    431e:	4610      	mov	r0, r2
    4320:	f7fd fff4 	bl	230c <set_le_scan_enable>
		if (err) {
    4324:	4604      	mov	r4, r0
    4326:	b130      	cbz	r0, 4336 <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4328:	f46f 7100 	mvn.w	r1, #512	; 0x200
    432c:	4813      	ldr	r0, [pc, #76]	; (437c <bt_le_scan_start+0x9c>)
    432e:	f7fd fe65 	bl	1ffc <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    4332:	4620      	mov	r0, r4
    4334:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    4336:	786b      	ldrb	r3, [r5, #1]
    4338:	b17b      	cbz	r3, 435a <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    433a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    433e:	480f      	ldr	r0, [pc, #60]	; (437c <bt_le_scan_start+0x9c>)
    4340:	f7fd fe4b 	bl	1fda <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    4344:	88aa      	ldrh	r2, [r5, #4]
    4346:	8869      	ldrh	r1, [r5, #2]
    4348:	7828      	ldrb	r0, [r5, #0]
    434a:	f7fe f9d3 	bl	26f4 <start_le_scan>
	if (err) {
    434e:	4604      	mov	r4, r0
    4350:	2800      	cmp	r0, #0
    4352:	d1e9      	bne.n	4328 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    4354:	4b0a      	ldr	r3, [pc, #40]	; (4380 <bt_le_scan_start+0xa0>)
    4356:	601e      	str	r6, [r3, #0]
	return 0;
    4358:	e7eb      	b.n	4332 <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    435a:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    435e:	4807      	ldr	r0, [pc, #28]	; (437c <bt_le_scan_start+0x9c>)
    4360:	f7fd fe4c 	bl	1ffc <atomic_and>
    4364:	e7ee      	b.n	4344 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4366:	f44f 7100 	mov.w	r1, #512	; 0x200
    436a:	4804      	ldr	r0, [pc, #16]	; (437c <bt_le_scan_start+0x9c>)
    436c:	f7fd fe35 	bl	1fda <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4370:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    4374:	d0ce      	beq.n	4314 <bt_le_scan_start+0x34>
		return -EALREADY;
    4376:	f06f 0444 	mvn.w	r4, #68	; 0x44
    437a:	e7da      	b.n	4332 <bt_le_scan_start+0x52>
    437c:	20003ad0 	.word	0x20003ad0
    4380:	200002d8 	.word	0x200002d8

00004384 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    4384:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4386:	f46f 7100 	mvn.w	r1, #512	; 0x200
    438a:	4807      	ldr	r0, [pc, #28]	; (43a8 <bt_le_scan_stop+0x24>)
    438c:	f7fd fe36 	bl	1ffc <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4390:	0583      	lsls	r3, r0, #22
    4392:	d506      	bpl.n	43a2 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    4394:	4b05      	ldr	r3, [pc, #20]	; (43ac <bt_le_scan_stop+0x28>)
    4396:	2000      	movs	r0, #0
    4398:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    439a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    439e:	f7fe b9f9 	b.w	2794 <bt_le_scan_update>
}
    43a2:	f06f 0044 	mvn.w	r0, #68	; 0x44
    43a6:	bd08      	pop	{r3, pc}
    43a8:	20003ad0 	.word	0x20003ad0
    43ac:	200002d8 	.word	0x200002d8

000043b0 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    43b0:	b538      	push	{r3, r4, r5, lr}
    43b2:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    43b4:	4805      	ldr	r0, [pc, #20]	; (43cc <bt_buf_get_rx+0x1c>)
    43b6:	f00f f95f 	bl	13678 <net_buf_alloc_fixed>
#endif

	if (buf) {
    43ba:	4604      	mov	r4, r0
    43bc:	b120      	cbz	r0, 43c8 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    43be:	2100      	movs	r1, #0
    43c0:	3008      	adds	r0, #8
    43c2:	f00f f978 	bl	136b6 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    43c6:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    43c8:	4620      	mov	r0, r4
    43ca:	bd38      	pop	{r3, r4, r5, pc}
    43cc:	20003f8c 	.word	0x20003f8c

000043d0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    43d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    43d2:	4606      	mov	r6, r0
    43d4:	b085      	sub	sp, #20
	__asm__ volatile(
    43d6:	f04f 0320 	mov.w	r3, #32
    43da:	f3ef 8211 	mrs	r2, BASEPRI
    43de:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    43e2:	4b14      	ldr	r3, [pc, #80]	; (4434 <bt_buf_get_cmd_complete+0x64>)
	bt_dev.sent_cmd = NULL;
    43e4:	2500      	movs	r5, #0
	buf = bt_dev.sent_cmd;
    43e6:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    43ea:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    43ee:	f382 8811 	msr	BASEPRI, r2
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);
    43f2:	4b11      	ldr	r3, [pc, #68]	; (4438 <bt_buf_get_cmd_complete+0x68>)
    43f4:	681f      	ldr	r7, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    43f6:	f010 f9e9 	bl	147cc <_impl_k_current_get>
    43fa:	4b10      	ldr	r3, [pc, #64]	; (443c <bt_buf_get_cmd_complete+0x6c>)
    43fc:	9303      	str	r3, [sp, #12]
    43fe:	9001      	str	r0, [sp, #4]
    4400:	9300      	str	r3, [sp, #0]
    4402:	9402      	str	r4, [sp, #8]
    4404:	4b0e      	ldr	r3, [pc, #56]	; (4440 <bt_buf_get_cmd_complete+0x70>)
    4406:	4a0f      	ldr	r2, [pc, #60]	; (4444 <bt_buf_get_cmd_complete+0x74>)
    4408:	490f      	ldr	r1, [pc, #60]	; (4448 <bt_buf_get_cmd_complete+0x78>)
    440a:	4810      	ldr	r0, [pc, #64]	; (444c <bt_buf_get_cmd_complete+0x7c>)
    440c:	47b8      	blx	r7

	if (buf) {
    440e:	b934      	cbnz	r4, 441e <bt_buf_get_cmd_complete+0x4e>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4410:	4631      	mov	r1, r6
    4412:	2001      	movs	r0, #1
}
    4414:	b005      	add	sp, #20
    4416:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    441a:	f7ff bfc9 	b.w	43b0 <bt_buf_get_rx>
    441e:	2301      	movs	r3, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4420:	f104 0008 	add.w	r0, r4, #8
    4424:	7523      	strb	r3, [r4, #20]
		buf->len = 0;
    4426:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4428:	4629      	mov	r1, r5
    442a:	f00f f944 	bl	136b6 <net_buf_simple_reserve>
}
    442e:	4620      	mov	r0, r4
    4430:	b005      	add	sp, #20
    4432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4434:	20003a60 	.word	0x20003a60
    4438:	20003a5c 	.word	0x20003a5c
    443c:	00015359 	.word	0x00015359
    4440:	00015c20 	.word	0x00015c20
    4444:	0001587b 	.word	0x0001587b
    4448:	0001679c 	.word	0x0001679c
    444c:	00015c38 	.word	0x00015c38

00004450 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    4450:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    4452:	4b06      	ldr	r3, [pc, #24]	; (446c <notify_connected+0x1c>)
    4454:	681c      	ldr	r4, [r3, #0]
{
    4456:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    4458:	b904      	cbnz	r4, 445c <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    445a:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    445c:	6823      	ldr	r3, [r4, #0]
    445e:	b113      	cbz	r3, 4466 <notify_connected+0x16>
			cb->connected(conn, conn->err);
    4460:	7a29      	ldrb	r1, [r5, #8]
    4462:	4628      	mov	r0, r5
    4464:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    4466:	6924      	ldr	r4, [r4, #16]
    4468:	e7f6      	b.n	4458 <notify_connected+0x8>
    446a:	bf00      	nop
    446c:	2000034c 	.word	0x2000034c

00004470 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4470:	f3bf 8f5b 	dmb	ish
    4474:	6800      	ldr	r0, [r0, #0]
    4476:	f3bf 8f5b 	dmb	ish
}
    447a:	4770      	bx	lr

0000447c <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    447c:	8943      	ldrh	r3, [r0, #10]
{
    447e:	b510      	push	{r4, lr}
    4480:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    4482:	b12b      	cbz	r3, 4490 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    4484:	68c0      	ldr	r0, [r0, #12]
    4486:	f00f f927 	bl	136d8 <net_buf_unref>
	conn->rx = NULL;
    448a:	2300      	movs	r3, #0
    448c:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    448e:	8163      	strh	r3, [r4, #10]
    4490:	bd10      	pop	{r4, pc}
	...

00004494 <bt_conn_get_pkts>:
}
    4494:	4800      	ldr	r0, [pc, #0]	; (4498 <bt_conn_get_pkts+0x4>)
    4496:	4770      	bx	lr
    4498:	20003aec 	.word	0x20003aec

0000449c <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    449c:	4b08      	ldr	r3, [pc, #32]	; (44c0 <notify_le_param_updated+0x24>)
{
    449e:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    44a0:	681c      	ldr	r4, [r3, #0]
{
    44a2:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    44a4:	b904      	cbnz	r4, 44a8 <notify_le_param_updated+0xc>
}
    44a6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    44a8:	68e6      	ldr	r6, [r4, #12]
    44aa:	b13e      	cbz	r6, 44bc <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    44ac:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    44b0:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    44b4:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    44b8:	4628      	mov	r0, r5
    44ba:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    44bc:	6924      	ldr	r4, [r4, #16]
    44be:	e7f1      	b.n	44a4 <notify_le_param_updated+0x8>
    44c0:	2000034c 	.word	0x2000034c

000044c4 <le_param_req>:
{
    44c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44c6:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    44c8:	4608      	mov	r0, r1
{
    44ca:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    44cc:	f7fd ffde 	bl	248c <bt_le_conn_params_valid>
    44d0:	4605      	mov	r5, r0
    44d2:	b910      	cbnz	r0, 44da <le_param_req+0x16>
		return false;
    44d4:	2500      	movs	r5, #0
}
    44d6:	4628      	mov	r0, r5
    44d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    44da:	4b09      	ldr	r3, [pc, #36]	; (4500 <le_param_req+0x3c>)
    44dc:	681c      	ldr	r4, [r3, #0]
    44de:	2c00      	cmp	r4, #0
    44e0:	d0f9      	beq.n	44d6 <le_param_req+0x12>
		if (!cb->le_param_req) {
    44e2:	68a3      	ldr	r3, [r4, #8]
    44e4:	b90b      	cbnz	r3, 44ea <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    44e6:	6924      	ldr	r4, [r4, #16]
    44e8:	e7f9      	b.n	44de <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    44ea:	4631      	mov	r1, r6
    44ec:	4638      	mov	r0, r7
    44ee:	4798      	blx	r3
    44f0:	2800      	cmp	r0, #0
    44f2:	d0ef      	beq.n	44d4 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    44f4:	4630      	mov	r0, r6
    44f6:	f7fd ffc9 	bl	248c <bt_le_conn_params_valid>
    44fa:	2800      	cmp	r0, #0
    44fc:	d1f3      	bne.n	44e6 <le_param_req+0x22>
    44fe:	e7e9      	b.n	44d4 <le_param_req+0x10>
    4500:	2000034c 	.word	0x2000034c

00004504 <bt_conn_cb_register>:
	cb->_next = callback_list;
    4504:	4b02      	ldr	r3, [pc, #8]	; (4510 <bt_conn_cb_register+0xc>)
    4506:	681a      	ldr	r2, [r3, #0]
    4508:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    450a:	6018      	str	r0, [r3, #0]
    450c:	4770      	bx	lr
    450e:	bf00      	nop
    4510:	2000034c 	.word	0x2000034c

00004514 <bt_conn_recv>:
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    4514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_l2cap_hdr *hdr;
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    4518:	f8df 8208 	ldr.w	r8, [pc, #520]	; 4724 <bt_conn_recv+0x210>
    451c:	4e71      	ldr	r6, [pc, #452]	; (46e4 <bt_conn_recv+0x1d0>)
    451e:	f8d8 7000 	ldr.w	r7, [r8]
{
    4522:	b086      	sub	sp, #24
    4524:	4692      	mov	sl, r2
    4526:	460d      	mov	r5, r1
    4528:	4604      	mov	r4, r0
    452a:	f010 f94f 	bl	147cc <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    452e:	9605      	str	r6, [sp, #20]
    4530:	f8cd a010 	str.w	sl, [sp, #16]
    4534:	89ab      	ldrh	r3, [r5, #12]
    4536:	9303      	str	r3, [sp, #12]
    4538:	8823      	ldrh	r3, [r4, #0]
    453a:	9302      	str	r3, [sp, #8]
    453c:	9001      	str	r0, [sp, #4]
    453e:	9600      	str	r6, [sp, #0]
    4540:	4b69      	ldr	r3, [pc, #420]	; (46e8 <bt_conn_recv+0x1d4>)
    4542:	4a6a      	ldr	r2, [pc, #424]	; (46ec <bt_conn_recv+0x1d8>)
    4544:	496a      	ldr	r1, [pc, #424]	; (46f0 <bt_conn_recv+0x1dc>)
    4546:	486b      	ldr	r0, [pc, #428]	; (46f4 <bt_conn_recv+0x1e0>)
    4548:	47b8      	blx	r7

	/* Check packet boundary flags */
	switch (flags) {
    454a:	f1ba 0f01 	cmp.w	sl, #1
    454e:	46c1      	mov	r9, r8
    4550:	4637      	mov	r7, r6
    4552:	d040      	beq.n	45d6 <bt_conn_recv+0xc2>
    4554:	f1ba 0f02 	cmp.w	sl, #2
    4558:	f040 80a3 	bne.w	46a2 <bt_conn_recv+0x18e>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    455c:	68ab      	ldr	r3, [r5, #8]

		BT_DBG("First, len %u final %u", buf->len, len);
    455e:	f8d9 6000 	ldr.w	r6, [r9]
		len = sys_le16_to_cpu(hdr->len);
    4562:	f8b3 8000 	ldrh.w	r8, [r3]
    4566:	f010 f931 	bl	147cc <_impl_k_current_get>
		BT_DBG("First, len %u final %u", buf->len, len);
    456a:	9704      	str	r7, [sp, #16]
    456c:	f8cd 800c 	str.w	r8, [sp, #12]
    4570:	89ab      	ldrh	r3, [r5, #12]
    4572:	9302      	str	r3, [sp, #8]
    4574:	9001      	str	r0, [sp, #4]
    4576:	4b5c      	ldr	r3, [pc, #368]	; (46e8 <bt_conn_recv+0x1d4>)
    4578:	9700      	str	r7, [sp, #0]
    457a:	4a5c      	ldr	r2, [pc, #368]	; (46ec <bt_conn_recv+0x1d8>)
    457c:	495c      	ldr	r1, [pc, #368]	; (46f0 <bt_conn_recv+0x1dc>)
    457e:	485e      	ldr	r0, [pc, #376]	; (46f8 <bt_conn_recv+0x1e4>)
    4580:	47b0      	blx	r6

		if (conn->rx_len) {
    4582:	8963      	ldrh	r3, [r4, #10]
    4584:	b15b      	cbz	r3, 459e <bt_conn_recv+0x8a>
			BT_ERR("Unexpected first L2CAP frame");
    4586:	9701      	str	r7, [sp, #4]
    4588:	9700      	str	r7, [sp, #0]
    458a:	485c      	ldr	r0, [pc, #368]	; (46fc <bt_conn_recv+0x1e8>)
    458c:	f8d9 6000 	ldr.w	r6, [r9]
    4590:	4b55      	ldr	r3, [pc, #340]	; (46e8 <bt_conn_recv+0x1d4>)
    4592:	4a5b      	ldr	r2, [pc, #364]	; (4700 <bt_conn_recv+0x1ec>)
    4594:	4956      	ldr	r1, [pc, #344]	; (46f0 <bt_conn_recv+0x1dc>)
    4596:	47b0      	blx	r6
			bt_conn_reset_rx_state(conn);
    4598:	4620      	mov	r0, r4
    459a:	f7ff ff6f 	bl	447c <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    459e:	89ab      	ldrh	r3, [r5, #12]
		BT_DBG("rx_len %u", conn->rx_len);
    45a0:	f8d9 6000 	ldr.w	r6, [r9]
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    45a4:	eba8 0803 	sub.w	r8, r8, r3
    45a8:	f108 0804 	add.w	r8, r8, #4
    45ac:	f8a4 800a 	strh.w	r8, [r4, #10]
    45b0:	f010 f90c 	bl	147cc <_impl_k_current_get>
		BT_DBG("rx_len %u", conn->rx_len);
    45b4:	9703      	str	r7, [sp, #12]
    45b6:	8963      	ldrh	r3, [r4, #10]
    45b8:	9302      	str	r3, [sp, #8]
    45ba:	9001      	str	r0, [sp, #4]
    45bc:	4b4a      	ldr	r3, [pc, #296]	; (46e8 <bt_conn_recv+0x1d4>)
    45be:	9700      	str	r7, [sp, #0]
    45c0:	4a4a      	ldr	r2, [pc, #296]	; (46ec <bt_conn_recv+0x1d8>)
    45c2:	494b      	ldr	r1, [pc, #300]	; (46f0 <bt_conn_recv+0x1dc>)
    45c4:	484f      	ldr	r0, [pc, #316]	; (4704 <bt_conn_recv+0x1f0>)
    45c6:	47b0      	blx	r6
		if (conn->rx_len) {
    45c8:	8963      	ldrh	r3, [r4, #10]
    45ca:	2b00      	cmp	r3, #0
    45cc:	d057      	beq.n	467e <bt_conn_recv+0x16a>
			conn->rx = buf;
    45ce:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    45d0:	b006      	add	sp, #24
    45d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->rx_len) {
    45d6:	8963      	ldrh	r3, [r4, #10]
    45d8:	b98b      	cbnz	r3, 45fe <bt_conn_recv+0xea>
			BT_ERR("Unexpected L2CAP continuation");
    45da:	9601      	str	r6, [sp, #4]
    45dc:	9600      	str	r6, [sp, #0]
    45de:	f8d8 6000 	ldr.w	r6, [r8]
    45e2:	4b41      	ldr	r3, [pc, #260]	; (46e8 <bt_conn_recv+0x1d4>)
    45e4:	4a46      	ldr	r2, [pc, #280]	; (4700 <bt_conn_recv+0x1ec>)
    45e6:	4942      	ldr	r1, [pc, #264]	; (46f0 <bt_conn_recv+0x1dc>)
    45e8:	4847      	ldr	r0, [pc, #284]	; (4708 <bt_conn_recv+0x1f4>)
			BT_ERR("L2CAP data overflow");
    45ea:	47b0      	blx	r6
			bt_conn_reset_rx_state(conn);
    45ec:	4620      	mov	r0, r4
    45ee:	f7ff ff45 	bl	447c <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    45f2:	4628      	mov	r0, r5
}
    45f4:	b006      	add	sp, #24
    45f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			net_buf_unref(buf);
    45fa:	f00f b86d 	b.w	136d8 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    45fe:	89aa      	ldrh	r2, [r5, #12]
    4600:	429a      	cmp	r2, r3
    4602:	d908      	bls.n	4616 <bt_conn_recv+0x102>
			BT_ERR("L2CAP data overflow");
    4604:	9601      	str	r6, [sp, #4]
    4606:	9600      	str	r6, [sp, #0]
    4608:	f8d8 6000 	ldr.w	r6, [r8]
    460c:	4b36      	ldr	r3, [pc, #216]	; (46e8 <bt_conn_recv+0x1d4>)
    460e:	4a3c      	ldr	r2, [pc, #240]	; (4700 <bt_conn_recv+0x1ec>)
    4610:	4937      	ldr	r1, [pc, #220]	; (46f0 <bt_conn_recv+0x1dc>)
    4612:	483e      	ldr	r0, [pc, #248]	; (470c <bt_conn_recv+0x1f8>)
    4614:	e7e9      	b.n	45ea <bt_conn_recv+0xd6>
		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);
    4616:	f8d8 a000 	ldr.w	sl, [r8]
    461a:	f010 f8d7 	bl	147cc <_impl_k_current_get>
    461e:	9604      	str	r6, [sp, #16]
    4620:	8963      	ldrh	r3, [r4, #10]
    4622:	9303      	str	r3, [sp, #12]
    4624:	89ab      	ldrh	r3, [r5, #12]
    4626:	9302      	str	r3, [sp, #8]
    4628:	9001      	str	r0, [sp, #4]
    462a:	4b2f      	ldr	r3, [pc, #188]	; (46e8 <bt_conn_recv+0x1d4>)
    462c:	4a2f      	ldr	r2, [pc, #188]	; (46ec <bt_conn_recv+0x1d8>)
    462e:	4930      	ldr	r1, [pc, #192]	; (46f0 <bt_conn_recv+0x1dc>)
    4630:	4837      	ldr	r0, [pc, #220]	; (4710 <bt_conn_recv+0x1fc>)
    4632:	9600      	str	r6, [sp, #0]
    4634:	47d0      	blx	sl
		if (buf->len > net_buf_tailroom(conn->rx)) {
    4636:	68e0      	ldr	r0, [r4, #12]
    4638:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
    463c:	3008      	adds	r0, #8
    463e:	f00f f8b8 	bl	137b2 <net_buf_simple_tailroom>
    4642:	4582      	cmp	sl, r0
    4644:	d908      	bls.n	4658 <bt_conn_recv+0x144>
			BT_ERR("Not enough buffer space for L2CAP data");
    4646:	9601      	str	r6, [sp, #4]
    4648:	9600      	str	r6, [sp, #0]
    464a:	f8d8 6000 	ldr.w	r6, [r8]
    464e:	4b26      	ldr	r3, [pc, #152]	; (46e8 <bt_conn_recv+0x1d4>)
    4650:	4a2b      	ldr	r2, [pc, #172]	; (4700 <bt_conn_recv+0x1ec>)
    4652:	4927      	ldr	r1, [pc, #156]	; (46f0 <bt_conn_recv+0x1dc>)
    4654:	482f      	ldr	r0, [pc, #188]	; (4714 <bt_conn_recv+0x200>)
    4656:	e7c8      	b.n	45ea <bt_conn_recv+0xd6>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    4658:	68e0      	ldr	r0, [r4, #12]
    465a:	89aa      	ldrh	r2, [r5, #12]
    465c:	68a9      	ldr	r1, [r5, #8]
    465e:	3008      	adds	r0, #8
    4660:	f00f f872 	bl	13748 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    4664:	8963      	ldrh	r3, [r4, #10]
    4666:	89aa      	ldrh	r2, [r5, #12]
    4668:	1a9b      	subs	r3, r3, r2
    466a:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    466c:	4628      	mov	r0, r5
    466e:	f00f f833 	bl	136d8 <net_buf_unref>
		if (conn->rx_len) {
    4672:	8963      	ldrh	r3, [r4, #10]
    4674:	2b00      	cmp	r3, #0
    4676:	d1ab      	bne.n	45d0 <bt_conn_recv+0xbc>
		buf = conn->rx;
    4678:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    467a:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    467c:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    467e:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    4680:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    4682:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    4684:	1d19      	adds	r1, r3, #4
    4686:	4291      	cmp	r1, r2
    4688:	d016      	beq.n	46b8 <bt_conn_recv+0x1a4>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    468a:	9202      	str	r2, [sp, #8]
    468c:	9301      	str	r3, [sp, #4]
    468e:	9703      	str	r7, [sp, #12]
    4690:	9700      	str	r7, [sp, #0]
    4692:	f8d9 4000 	ldr.w	r4, [r9]
    4696:	4b14      	ldr	r3, [pc, #80]	; (46e8 <bt_conn_recv+0x1d4>)
    4698:	4a19      	ldr	r2, [pc, #100]	; (4700 <bt_conn_recv+0x1ec>)
    469a:	4915      	ldr	r1, [pc, #84]	; (46f0 <bt_conn_recv+0x1dc>)
    469c:	481e      	ldr	r0, [pc, #120]	; (4718 <bt_conn_recv+0x204>)
    469e:	47a0      	blx	r4
    46a0:	e7a7      	b.n	45f2 <bt_conn_recv+0xde>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    46a2:	e88d 0440 	stmia.w	sp, {r6, sl}
    46a6:	9602      	str	r6, [sp, #8]
    46a8:	f8d8 6000 	ldr.w	r6, [r8]
    46ac:	4b0e      	ldr	r3, [pc, #56]	; (46e8 <bt_conn_recv+0x1d4>)
    46ae:	4a14      	ldr	r2, [pc, #80]	; (4700 <bt_conn_recv+0x1ec>)
    46b0:	490f      	ldr	r1, [pc, #60]	; (46f0 <bt_conn_recv+0x1dc>)
    46b2:	481a      	ldr	r0, [pc, #104]	; (471c <bt_conn_recv+0x208>)
    46b4:	47b0      	blx	r6
    46b6:	e799      	b.n	45ec <bt_conn_recv+0xd8>
	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
    46b8:	f8d9 6000 	ldr.w	r6, [r9]
    46bc:	f010 f886 	bl	147cc <_impl_k_current_get>
    46c0:	9703      	str	r7, [sp, #12]
    46c2:	89ab      	ldrh	r3, [r5, #12]
    46c4:	9302      	str	r3, [sp, #8]
    46c6:	9001      	str	r0, [sp, #4]
    46c8:	9700      	str	r7, [sp, #0]
    46ca:	4b07      	ldr	r3, [pc, #28]	; (46e8 <bt_conn_recv+0x1d4>)
    46cc:	4a07      	ldr	r2, [pc, #28]	; (46ec <bt_conn_recv+0x1d8>)
    46ce:	4908      	ldr	r1, [pc, #32]	; (46f0 <bt_conn_recv+0x1dc>)
    46d0:	4813      	ldr	r0, [pc, #76]	; (4720 <bt_conn_recv+0x20c>)
    46d2:	47b0      	blx	r6
	bt_l2cap_recv(conn, buf);
    46d4:	4629      	mov	r1, r5
    46d6:	4620      	mov	r0, r4
}
    46d8:	b006      	add	sp, #24
    46da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_l2cap_recv(conn, buf);
    46de:	f001 b8f7 	b.w	58d0 <bt_l2cap_recv>
    46e2:	bf00      	nop
    46e4:	00015359 	.word	0x00015359
    46e8:	00016bf0 	.word	0x00016bf0
    46ec:	0001587b 	.word	0x0001587b
    46f0:	0001679c 	.word	0x0001679c
    46f4:	00016dba 	.word	0x00016dba
    46f8:	00016deb 	.word	0x00016deb
    46fc:	00016e17 	.word	0x00016e17
    4700:	00016754 	.word	0x00016754
    4704:	00016e44 	.word	0x00016e44
    4708:	00016e63 	.word	0x00016e63
    470c:	00016e91 	.word	0x00016e91
    4710:	00016eb5 	.word	0x00016eb5
    4714:	00016ee1 	.word	0x00016ee1
    4718:	00016f46 	.word	0x00016f46
    471c:	00016f18 	.word	0x00016f18
    4720:	00016f72 	.word	0x00016f72
    4724:	20003a5c 	.word	0x20003a5c

00004728 <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    4728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    472c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 47b0 <bt_conn_send_cb+0x88>
    4730:	4d18      	ldr	r5, [pc, #96]	; (4794 <bt_conn_send_cb+0x6c>)
    4732:	f8d8 9000 	ldr.w	r9, [r8]
{
    4736:	b087      	sub	sp, #28
    4738:	460c      	mov	r4, r1
    473a:	4606      	mov	r6, r0
    473c:	4617      	mov	r7, r2
    473e:	f010 f845 	bl	147cc <_impl_k_current_get>
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    4742:	89a3      	ldrh	r3, [r4, #12]
    4744:	9303      	str	r3, [sp, #12]
    4746:	8833      	ldrh	r3, [r6, #0]
    4748:	9302      	str	r3, [sp, #8]
    474a:	9001      	str	r0, [sp, #4]
    474c:	4b12      	ldr	r3, [pc, #72]	; (4798 <bt_conn_send_cb+0x70>)
    474e:	9505      	str	r5, [sp, #20]
    4750:	9704      	str	r7, [sp, #16]
    4752:	9500      	str	r5, [sp, #0]
    4754:	4a11      	ldr	r2, [pc, #68]	; (479c <bt_conn_send_cb+0x74>)
    4756:	4912      	ldr	r1, [pc, #72]	; (47a0 <bt_conn_send_cb+0x78>)
    4758:	4812      	ldr	r0, [pc, #72]	; (47a4 <bt_conn_send_cb+0x7c>)
    475a:	47c8      	blx	r9

	if (conn->state != BT_CONN_CONNECTED) {
    475c:	7a73      	ldrb	r3, [r6, #9]
    475e:	2b03      	cmp	r3, #3
    4760:	d010      	beq.n	4784 <bt_conn_send_cb+0x5c>
		BT_ERR("not connected!");
    4762:	9501      	str	r5, [sp, #4]
    4764:	9500      	str	r5, [sp, #0]
    4766:	4b0c      	ldr	r3, [pc, #48]	; (4798 <bt_conn_send_cb+0x70>)
    4768:	4a0f      	ldr	r2, [pc, #60]	; (47a8 <bt_conn_send_cb+0x80>)
    476a:	490d      	ldr	r1, [pc, #52]	; (47a0 <bt_conn_send_cb+0x78>)
    476c:	480f      	ldr	r0, [pc, #60]	; (47ac <bt_conn_send_cb+0x84>)
    476e:	f8d8 5000 	ldr.w	r5, [r8]
    4772:	47a8      	blx	r5
		net_buf_unref(buf);
    4774:	4620      	mov	r0, r4
    4776:	f00e ffaf 	bl	136d8 <net_buf_unref>
		return -ENOTCONN;
    477a:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    477e:	b007      	add	sp, #28
    4780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_put(&conn->tx_queue, buf);
    4784:	f106 0028 	add.w	r0, r6, #40	; 0x28
	conn_tx(buf)->cb = cb;
    4788:	6167      	str	r7, [r4, #20]
	net_buf_put(&conn->tx_queue, buf);
    478a:	4621      	mov	r1, r4
    478c:	f00e ff97 	bl	136be <net_buf_put>
	return 0;
    4790:	2000      	movs	r0, #0
    4792:	e7f4      	b.n	477e <bt_conn_send_cb+0x56>
    4794:	00015359 	.word	0x00015359
    4798:	00016bfd 	.word	0x00016bfd
    479c:	0001587b 	.word	0x0001587b
    47a0:	0001679c 	.word	0x0001679c
    47a4:	00016fd6 	.word	0x00016fd6
    47a8:	00016754 	.word	0x00016754
    47ac:	0001700b 	.word	0x0001700b
    47b0:	20003a5c 	.word	0x20003a5c

000047b4 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    47b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);
    47b8:	4b15      	ldr	r3, [pc, #84]	; (4810 <bt_conn_notify_tx+0x5c>)
    47ba:	4d16      	ldr	r5, [pc, #88]	; (4814 <bt_conn_notify_tx+0x60>)
    47bc:	681c      	ldr	r4, [r3, #0]
{
    47be:	4606      	mov	r6, r0
    47c0:	f010 f804 	bl	147cc <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    47c4:	4b14      	ldr	r3, [pc, #80]	; (4818 <bt_conn_notify_tx+0x64>)
    47c6:	9303      	str	r3, [sp, #12]
    47c8:	9001      	str	r0, [sp, #4]
    47ca:	9300      	str	r3, [sp, #0]
    47cc:	9602      	str	r6, [sp, #8]
    47ce:	4b13      	ldr	r3, [pc, #76]	; (481c <bt_conn_notify_tx+0x68>)
    47d0:	4a13      	ldr	r2, [pc, #76]	; (4820 <bt_conn_notify_tx+0x6c>)
    47d2:	4914      	ldr	r1, [pc, #80]	; (4824 <bt_conn_notify_tx+0x70>)
    47d4:	4814      	ldr	r0, [pc, #80]	; (4828 <bt_conn_notify_tx+0x74>)
    47d6:	47a0      	blx	r4

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    47d8:	f106 0718 	add.w	r7, r6, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    47dc:	f04f 0800 	mov.w	r8, #0
    47e0:	2100      	movs	r1, #0
    47e2:	4638      	mov	r0, r7
    47e4:	f00f fd60 	bl	142a8 <_impl_k_queue_get>
    47e8:	4604      	mov	r4, r0
    47ea:	b910      	cbnz	r0, 47f2 <bt_conn_notify_tx+0x3e>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    47ec:	b004      	add	sp, #16
    47ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    47f2:	6863      	ldr	r3, [r4, #4]
    47f4:	b10b      	cbz	r3, 47fa <bt_conn_notify_tx+0x46>
			tx->cb(conn);
    47f6:	4630      	mov	r0, r6
    47f8:	4798      	blx	r3
    47fa:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    47fc:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    47fe:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    4800:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    4804:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    4806:	2b00      	cmp	r3, #0
    4808:	d1ea      	bne.n	47e0 <bt_conn_notify_tx+0x2c>
	list->tail = node;
    480a:	606c      	str	r4, [r5, #4]
    480c:	e7e6      	b.n	47dc <bt_conn_notify_tx+0x28>
    480e:	bf00      	nop
    4810:	20003a5c 	.word	0x20003a5c
    4814:	200003f8 	.word	0x200003f8
    4818:	00015359 	.word	0x00015359
    481c:	00016c0d 	.word	0x00016c0d
    4820:	0001587b 	.word	0x0001587b
    4824:	0001679c 	.word	0x0001679c
    4828:	00016cf1 	.word	0x00016cf1

0000482c <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    482c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_acl_hdr *hdr;
	bt_conn_tx_cb_t cb;
	sys_snode_t *node;
	int err;

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    4830:	f8df 9198 	ldr.w	r9, [pc, #408]	; 49cc <send_frag+0x1a0>
    4834:	4e59      	ldr	r6, [pc, #356]	; (499c <send_frag+0x170>)
    4836:	f8d9 8000 	ldr.w	r8, [r9]
{
    483a:	b089      	sub	sp, #36	; 0x24
    483c:	460f      	mov	r7, r1
    483e:	4614      	mov	r4, r2
    4840:	4605      	mov	r5, r0
    4842:	469a      	mov	sl, r3
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4844:	f00f ffc2 	bl	147cc <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    4848:	9606      	str	r6, [sp, #24]
    484a:	9405      	str	r4, [sp, #20]
    484c:	89bb      	ldrh	r3, [r7, #12]
    484e:	4a54      	ldr	r2, [pc, #336]	; (49a0 <send_frag+0x174>)
    4850:	9304      	str	r3, [sp, #16]
    4852:	9001      	str	r0, [sp, #4]
    4854:	4b53      	ldr	r3, [pc, #332]	; (49a4 <send_frag+0x178>)
    4856:	4954      	ldr	r1, [pc, #336]	; (49a8 <send_frag+0x17c>)
    4858:	4854      	ldr	r0, [pc, #336]	; (49ac <send_frag+0x180>)
    485a:	9703      	str	r7, [sp, #12]
    485c:	9502      	str	r5, [sp, #8]
    485e:	9600      	str	r6, [sp, #0]
    4860:	47c0      	blx	r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4862:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4866:	4852      	ldr	r0, [pc, #328]	; (49b0 <send_frag+0x184>)
    4868:	f00f ffe7 	bl	1483a <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    486c:	4b51      	ldr	r3, [pc, #324]	; (49b4 <send_frag+0x188>)
    486e:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4872:	f7ff fdfd 	bl	4470 <atomic_get>
    4876:	46b0      	mov	r8, r6
    4878:	b130      	cbz	r0, 4888 <send_frag+0x5c>
		if (conns[i].state == BT_CONN_CONNECTED ||
    487a:	7a5a      	ldrb	r2, [r3, #9]
    487c:	3a03      	subs	r2, #3
    487e:	2a01      	cmp	r2, #1
    4880:	d802      	bhi.n	4888 <send_frag+0x5c>
			bt_conn_notify_tx(&conns[i]);
    4882:	4618      	mov	r0, r3
    4884:	f7ff ff96 	bl	47b4 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    4888:	7a6b      	ldrb	r3, [r5, #9]
    488a:	2b03      	cmp	r3, #3
    488c:	d168      	bne.n	4960 <send_frag+0x134>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    488e:	2104      	movs	r1, #4
    4890:	f107 0008 	add.w	r0, r7, #8
    4894:	f00e ff69 	bl	1376a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    4898:	882a      	ldrh	r2, [r5, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));

	cb = conn_tx(buf)->cb;
    489a:	f8d7 b014 	ldr.w	fp, [r7, #20]
    489e:	4e46      	ldr	r6, [pc, #280]	; (49b8 <send_frag+0x18c>)
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    48a0:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    48a4:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    48a6:	89bb      	ldrh	r3, [r7, #12]
	BT_DBG("conn %p cb %p", conn, cb);
    48a8:	f8d9 4000 	ldr.w	r4, [r9]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    48ac:	3b04      	subs	r3, #4
    48ae:	8043      	strh	r3, [r0, #2]
    48b0:	2302      	movs	r3, #2
    48b2:	753b      	strb	r3, [r7, #20]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    48b4:	f00f ff8a 	bl	147cc <_impl_k_current_get>
	BT_DBG("conn %p cb %p", conn, cb);
    48b8:	f8cd 8010 	str.w	r8, [sp, #16]
    48bc:	9001      	str	r0, [sp, #4]
    48be:	f8cd b00c 	str.w	fp, [sp, #12]
    48c2:	9502      	str	r5, [sp, #8]
    48c4:	f8cd 8000 	str.w	r8, [sp]
    48c8:	4b3c      	ldr	r3, [pc, #240]	; (49bc <send_frag+0x190>)
    48ca:	4a35      	ldr	r2, [pc, #212]	; (49a0 <send_frag+0x174>)
    48cc:	4936      	ldr	r1, [pc, #216]	; (49a8 <send_frag+0x17c>)
    48ce:	483c      	ldr	r0, [pc, #240]	; (49c0 <send_frag+0x194>)
    48d0:	47a0      	blx	r4
    48d2:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    48d4:	6872      	ldr	r2, [r6, #4]
	return node->next;
    48d6:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    48d8:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    48da:	4294      	cmp	r4, r2
	list->tail = node;
    48dc:	bf08      	it	eq
    48de:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    48e0:	f8c4 b004 	str.w	fp, [r4, #4]
	__asm__ volatile(
    48e4:	f04f 0320 	mov.w	r3, #32
    48e8:	f3ef 8211 	mrs	r2, BASEPRI
    48ec:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    48f0:	2300      	movs	r3, #0
    48f2:	6023      	str	r3, [r4, #0]
    48f4:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    48f6:	2b00      	cmp	r3, #0
    48f8:	d141      	bne.n	497e <send_frag+0x152>
	list->tail = node;
    48fa:	616c      	str	r4, [r5, #20]
	list->head = node;
    48fc:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    48fe:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    4902:	4638      	mov	r0, r7
    4904:	f7fd fe7a 	bl	25fc <bt_send>
	if (err) {
    4908:	2800      	cmp	r0, #0
    490a:	d044      	beq.n	4996 <send_frag+0x16a>
		BT_ERR("Unable to send to driver (err %d)", err);
    490c:	f8cd 8008 	str.w	r8, [sp, #8]
    4910:	9001      	str	r0, [sp, #4]
    4912:	f8cd 8000 	str.w	r8, [sp]
    4916:	4b23      	ldr	r3, [pc, #140]	; (49a4 <send_frag+0x178>)
    4918:	f8d9 8000 	ldr.w	r8, [r9]
    491c:	4a29      	ldr	r2, [pc, #164]	; (49c4 <send_frag+0x198>)
    491e:	4922      	ldr	r1, [pc, #136]	; (49a8 <send_frag+0x17c>)
    4920:	4829      	ldr	r0, [pc, #164]	; (49c8 <send_frag+0x19c>)
    4922:	47c0      	blx	r8
	__asm__ volatile(
    4924:	f04f 0320 	mov.w	r3, #32
    4928:	f3ef 8111 	mrs	r1, BASEPRI
    492c:	f383 8811 	msr	BASEPRI, r3
    4930:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4932:	2200      	movs	r2, #0
    4934:	b153      	cbz	r3, 494c <send_frag+0x120>
    4936:	429c      	cmp	r4, r3
    4938:	d12a      	bne.n	4990 <send_frag+0x164>
    493a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    493c:	bb12      	cbnz	r2, 4984 <send_frag+0x158>
    493e:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    4940:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    4942:	4294      	cmp	r4, r2
    4944:	d100      	bne.n	4948 <send_frag+0x11c>
	list->tail = node;
    4946:	616b      	str	r3, [r5, #20]
	parent->next = child;
    4948:	2300      	movs	r3, #0
    494a:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    494c:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    4950:	2300      	movs	r3, #0
    4952:	6063      	str	r3, [r4, #4]
    4954:	6833      	ldr	r3, [r6, #0]
    4956:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    4958:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    495a:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    495c:	b903      	cbnz	r3, 4960 <send_frag+0x134>
	list->tail = node;
    495e:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4960:	4813      	ldr	r0, [pc, #76]	; (49b0 <send_frag+0x184>)
    4962:	f00f ff42 	bl	147ea <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    4966:	f1ba 0f00 	cmp.w	sl, #0
    496a:	d004      	beq.n	4976 <send_frag+0x14a>
		net_buf_unref(buf);
    496c:	4638      	mov	r0, r7
    496e:	f00e feb3 	bl	136d8 <net_buf_unref>
	}
	return false;
    4972:	f04f 0a00 	mov.w	sl, #0
}
    4976:	4650      	mov	r0, sl
    4978:	b009      	add	sp, #36	; 0x24
    497a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	parent->next = child;
    497e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4980:	616c      	str	r4, [r5, #20]
    4982:	e7bc      	b.n	48fe <send_frag+0xd2>
	parent->next = child;
    4984:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    4986:	696b      	ldr	r3, [r5, #20]
    4988:	429c      	cmp	r4, r3
	list->tail = node;
    498a:	bf08      	it	eq
    498c:	616a      	streq	r2, [r5, #20]
    498e:	e7db      	b.n	4948 <send_frag+0x11c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4990:	461a      	mov	r2, r3
    4992:	681b      	ldr	r3, [r3, #0]
    4994:	e7ce      	b.n	4934 <send_frag+0x108>
	return true;
    4996:	f04f 0a01 	mov.w	sl, #1
    499a:	e7ec      	b.n	4976 <send_frag+0x14a>
    499c:	00015359 	.word	0x00015359
    49a0:	0001587b 	.word	0x0001587b
    49a4:	00016c2e 	.word	0x00016c2e
    49a8:	0001679c 	.word	0x0001679c
    49ac:	000170bc 	.word	0x000170bc
    49b0:	20003aec 	.word	0x20003aec
    49b4:	20000360 	.word	0x20000360
    49b8:	200003f8 	.word	0x200003f8
    49bc:	00016c1f 	.word	0x00016c1f
    49c0:	000170f4 	.word	0x000170f4
    49c4:	00016754 	.word	0x00016754
    49c8:	00015dcd 	.word	0x00015dcd
    49cc:	20003a5c 	.word	0x20003a5c

000049d0 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    49d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    49d2:	4c17      	ldr	r4, [pc, #92]	; (4a30 <bt_conn_add_le+0x60>)
    49d4:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    49d8:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    49da:	4630      	mov	r0, r6
    49dc:	f7ff fd48 	bl	4470 <atomic_get>
    49e0:	4605      	mov	r5, r0
    49e2:	b108      	cbz	r0, 49e8 <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    49e4:	2000      	movs	r0, #0
    49e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    49e8:	4601      	mov	r1, r0
    49ea:	2298      	movs	r2, #152	; 0x98
    49ec:	4620      	mov	r0, r4
    49ee:	f7fd f957 	bl	1ca0 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    49f2:	f3bf 8f5b 	dmb	ish
    49f6:	2301      	movs	r3, #1
    49f8:	e856 2f00 	ldrex	r2, [r6]
    49fc:	e846 3100 	strex	r1, r3, [r6]
    4a00:	2900      	cmp	r1, #0
    4a02:	d1f9      	bne.n	49f8 <bt_conn_add_le+0x28>
    4a04:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    4a08:	2207      	movs	r2, #7
    4a0a:	4639      	mov	r1, r7
    4a0c:	f104 0044 	add.w	r0, r4, #68	; 0x44
    4a10:	f7fd f91a 	bl	1c48 <memcpy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    4a14:	2318      	movs	r3, #24
    4a16:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4a1a:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4a1c:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    4a20:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4a22:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4a26:	4903      	ldr	r1, [pc, #12]	; (4a34 <bt_conn_add_le+0x64>)
    4a28:	f010 f9c6 	bl	14db8 <k_delayed_work_init>
			conn = &conns[i];
    4a2c:	4620      	mov	r0, r4

	return conn;
}
    4a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a30:	20000360 	.word	0x20000360
    4a34:	000051f9 	.word	0x000051f9

00004a38 <bt_conn_addr_le_cmp>:

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    4a38:	b538      	push	{r3, r4, r5, lr}
    4a3a:	460d      	mov	r5, r1
    4a3c:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    4a3e:	f100 0144 	add.w	r1, r0, #68	; 0x44
    4a42:	2207      	movs	r2, #7
    4a44:	4628      	mov	r0, r5
    4a46:	f7fd f8ea 	bl	1c1e <memcmp>
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    4a4a:	b160      	cbz	r0, 4a66 <bt_conn_addr_le_cmp+0x2e>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    4a4c:	78e3      	ldrb	r3, [r4, #3]
    4a4e:	2207      	movs	r2, #7
    4a50:	b933      	cbnz	r3, 4a60 <bt_conn_addr_le_cmp+0x28>
    4a52:	f104 0152 	add.w	r1, r4, #82	; 0x52
    4a56:	4628      	mov	r0, r5
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}
    4a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4a5c:	f7fd b8df 	b.w	1c1e <memcmp>
    4a60:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    4a64:	e7f7      	b.n	4a56 <bt_conn_addr_le_cmp+0x1e>
    4a66:	bd38      	pop	{r3, r4, r5, pc}

00004a68 <bt_conn_ref>:
		}
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
    4a68:	b570      	push	{r4, r5, r6, lr}
    4a6a:	4604      	mov	r4, r0
    4a6c:	b086      	sub	sp, #24
	atomic_inc(&conn->ref);
    4a6e:	f100 0540 	add.w	r5, r0, #64	; 0x40
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4a72:	f3bf 8f5b 	dmb	ish
    4a76:	e855 3f00 	ldrex	r3, [r5]
    4a7a:	3301      	adds	r3, #1
    4a7c:	e845 3200 	strex	r2, r3, [r5]
    4a80:	2a00      	cmp	r2, #0
    4a82:	d1f8      	bne.n	4a76 <bt_conn_ref+0xe>
    4a84:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    4a88:	4b0b      	ldr	r3, [pc, #44]	; (4ab8 <bt_conn_ref+0x50>)
    4a8a:	681e      	ldr	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4a8c:	f00f fe9e 	bl	147cc <_impl_k_current_get>
    4a90:	4602      	mov	r2, r0
    4a92:	4628      	mov	r0, r5
    4a94:	8821      	ldrh	r1, [r4, #0]
    4a96:	f7ff fceb 	bl	4470 <atomic_get>
    4a9a:	4b08      	ldr	r3, [pc, #32]	; (4abc <bt_conn_ref+0x54>)
    4a9c:	9304      	str	r3, [sp, #16]
    4a9e:	9003      	str	r0, [sp, #12]
    4aa0:	9102      	str	r1, [sp, #8]
    4aa2:	9201      	str	r2, [sp, #4]
    4aa4:	9300      	str	r3, [sp, #0]
    4aa6:	4a06      	ldr	r2, [pc, #24]	; (4ac0 <bt_conn_ref+0x58>)
    4aa8:	4b06      	ldr	r3, [pc, #24]	; (4ac4 <bt_conn_ref+0x5c>)
    4aaa:	4907      	ldr	r1, [pc, #28]	; (4ac8 <bt_conn_ref+0x60>)
    4aac:	4807      	ldr	r0, [pc, #28]	; (4acc <bt_conn_ref+0x64>)
    4aae:	47b0      	blx	r6

	return conn;
}
    4ab0:	4620      	mov	r0, r4
    4ab2:	b006      	add	sp, #24
    4ab4:	bd70      	pop	{r4, r5, r6, pc}
    4ab6:	bf00      	nop
    4ab8:	20003a5c 	.word	0x20003a5c
    4abc:	00015359 	.word	0x00015359
    4ac0:	0001587b 	.word	0x0001587b
    4ac4:	00016c7d 	.word	0x00016c7d
    4ac8:	0001679c 	.word	0x0001679c
    4acc:	00016fb0 	.word	0x00016fb0

00004ad0 <bt_conn_lookup_handle>:
{
    4ad0:	b508      	push	{r3, lr}
		if (!atomic_get(&conns[i].ref)) {
    4ad2:	4b0a      	ldr	r3, [pc, #40]	; (4afc <bt_conn_lookup_handle+0x2c>)
{
    4ad4:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    4ad6:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4ada:	f7ff fcc9 	bl	4470 <atomic_get>
    4ade:	b158      	cbz	r0, 4af8 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    4ae0:	7a5a      	ldrb	r2, [r3, #9]
    4ae2:	3a03      	subs	r2, #3
    4ae4:	2a01      	cmp	r2, #1
    4ae6:	d807      	bhi.n	4af8 <bt_conn_lookup_handle+0x28>
		if (conns[i].handle == handle) {
    4ae8:	881a      	ldrh	r2, [r3, #0]
    4aea:	428a      	cmp	r2, r1
    4aec:	d104      	bne.n	4af8 <bt_conn_lookup_handle+0x28>
			return bt_conn_ref(&conns[i]);
    4aee:	4618      	mov	r0, r3
}
    4af0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return bt_conn_ref(&conns[i]);
    4af4:	f7ff bfb8 	b.w	4a68 <bt_conn_ref>
}
    4af8:	2000      	movs	r0, #0
    4afa:	bd08      	pop	{r3, pc}
    4afc:	20000360 	.word	0x20000360

00004b00 <bt_conn_lookup_addr_le>:
{
    4b00:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    4b02:	4c0a      	ldr	r4, [pc, #40]	; (4b2c <bt_conn_lookup_addr_le+0x2c>)
{
    4b04:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    4b06:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4b0a:	f7ff fcb1 	bl	4470 <atomic_get>
    4b0e:	b150      	cbz	r0, 4b26 <bt_conn_lookup_addr_le+0x26>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4b10:	78a3      	ldrb	r3, [r4, #2]
    4b12:	b943      	cbnz	r3, 4b26 <bt_conn_lookup_addr_le+0x26>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    4b14:	4620      	mov	r0, r4
    4b16:	f7ff ff8f 	bl	4a38 <bt_conn_addr_le_cmp>
    4b1a:	b920      	cbnz	r0, 4b26 <bt_conn_lookup_addr_le+0x26>
			return bt_conn_ref(&conns[i]);
    4b1c:	4620      	mov	r0, r4
}
    4b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return bt_conn_ref(&conns[i]);
    4b22:	f7ff bfa1 	b.w	4a68 <bt_conn_ref>
}
    4b26:	2000      	movs	r0, #0
    4b28:	bd10      	pop	{r4, pc}
    4b2a:	bf00      	nop
    4b2c:	20000360 	.word	0x20000360

00004b30 <bt_conn_lookup_state_le>:
{
    4b30:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    4b32:	4c0d      	ldr	r4, [pc, #52]	; (4b68 <bt_conn_lookup_state_le+0x38>)
{
    4b34:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    4b36:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    4b3a:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    4b3c:	f7ff fc98 	bl	4470 <atomic_get>
    4b40:	b180      	cbz	r0, 4b64 <bt_conn_lookup_state_le+0x34>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4b42:	78a2      	ldrb	r2, [r4, #2]
    4b44:	b972      	cbnz	r2, 4b64 <bt_conn_lookup_state_le+0x34>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4b46:	b93b      	cbnz	r3, 4b58 <bt_conn_lookup_state_le+0x28>
		if (conns[i].state == state) {
    4b48:	7a63      	ldrb	r3, [r4, #9]
    4b4a:	42ab      	cmp	r3, r5
    4b4c:	d10a      	bne.n	4b64 <bt_conn_lookup_state_le+0x34>
			return bt_conn_ref(&conns[i]);
    4b4e:	4806      	ldr	r0, [pc, #24]	; (4b68 <bt_conn_lookup_state_le+0x38>)
}
    4b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_conn_ref(&conns[i]);
    4b54:	f7ff bf88 	b.w	4a68 <bt_conn_ref>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4b58:	4619      	mov	r1, r3
    4b5a:	4620      	mov	r0, r4
    4b5c:	f7ff ff6c 	bl	4a38 <bt_conn_addr_le_cmp>
    4b60:	2800      	cmp	r0, #0
    4b62:	d0f1      	beq.n	4b48 <bt_conn_lookup_state_le+0x18>
}
    4b64:	2000      	movs	r0, #0
    4b66:	bd38      	pop	{r3, r4, r5, pc}
    4b68:	20000360 	.word	0x20000360

00004b6c <bt_conn_unref>:

void bt_conn_unref(struct bt_conn *conn)
{
    4b6c:	b570      	push	{r4, r5, r6, lr}
    4b6e:	4605      	mov	r5, r0
    4b70:	b086      	sub	sp, #24
	atomic_dec(&conn->ref);
    4b72:	f100 0440 	add.w	r4, r0, #64	; 0x40
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4b76:	f3bf 8f5b 	dmb	ish
    4b7a:	e854 3f00 	ldrex	r3, [r4]
    4b7e:	3b01      	subs	r3, #1
    4b80:	e844 3200 	strex	r2, r3, [r4]
    4b84:	2a00      	cmp	r2, #0
    4b86:	d1f8      	bne.n	4b7a <bt_conn_unref+0xe>
    4b88:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    4b8c:	4b0a      	ldr	r3, [pc, #40]	; (4bb8 <bt_conn_unref+0x4c>)
    4b8e:	681e      	ldr	r6, [r3, #0]
    4b90:	f00f fe1c 	bl	147cc <_impl_k_current_get>
    4b94:	4602      	mov	r2, r0
    4b96:	4620      	mov	r0, r4
    4b98:	8829      	ldrh	r1, [r5, #0]
    4b9a:	f7ff fc69 	bl	4470 <atomic_get>
    4b9e:	4b07      	ldr	r3, [pc, #28]	; (4bbc <bt_conn_unref+0x50>)
    4ba0:	9304      	str	r3, [sp, #16]
    4ba2:	9003      	str	r0, [sp, #12]
    4ba4:	9102      	str	r1, [sp, #8]
    4ba6:	9201      	str	r2, [sp, #4]
    4ba8:	9300      	str	r3, [sp, #0]
    4baa:	4a05      	ldr	r2, [pc, #20]	; (4bc0 <bt_conn_unref+0x54>)
    4bac:	4b05      	ldr	r3, [pc, #20]	; (4bc4 <bt_conn_unref+0x58>)
    4bae:	4906      	ldr	r1, [pc, #24]	; (4bc8 <bt_conn_unref+0x5c>)
    4bb0:	4806      	ldr	r0, [pc, #24]	; (4bcc <bt_conn_unref+0x60>)
    4bb2:	47b0      	blx	r6
}
    4bb4:	b006      	add	sp, #24
    4bb6:	bd70      	pop	{r4, r5, r6, pc}
    4bb8:	20003a5c 	.word	0x20003a5c
    4bbc:	00015359 	.word	0x00015359
    4bc0:	0001587b 	.word	0x0001587b
    4bc4:	00016c89 	.word	0x00016c89
    4bc8:	0001679c 	.word	0x0001679c
    4bcc:	00016fb0 	.word	0x00016fb0

00004bd0 <conn_cleanup>:
{
    4bd0:	b538      	push	{r3, r4, r5, lr}
    4bd2:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    4bd4:	f100 0528 	add.w	r5, r0, #40	; 0x28
    4bd8:	2100      	movs	r1, #0
    4bda:	4628      	mov	r0, r5
    4bdc:	f00e fd52 	bl	13684 <net_buf_get>
    4be0:	b950      	cbnz	r0, 4bf8 <conn_cleanup+0x28>
	bt_conn_notify_tx(conn);
    4be2:	4620      	mov	r0, r4
    4be4:	f7ff fde6 	bl	47b4 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    4be8:	4620      	mov	r0, r4
    4bea:	f7ff fc47 	bl	447c <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    4bee:	4620      	mov	r0, r4
}
    4bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    4bf4:	f7ff bfba 	b.w	4b6c <bt_conn_unref>
		net_buf_unref(buf);
    4bf8:	f00e fd6e 	bl	136d8 <net_buf_unref>
    4bfc:	e7ec      	b.n	4bd8 <conn_cleanup+0x8>
	...

00004c00 <bt_conn_prepare_events>:
{
    4c00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	BT_DBG("");
    4c04:	4d2e      	ldr	r5, [pc, #184]	; (4cc0 <bt_conn_prepare_events+0xc0>)
    4c06:	4c2f      	ldr	r4, [pc, #188]	; (4cc4 <bt_conn_prepare_events+0xc4>)
    4c08:	682f      	ldr	r7, [r5, #0]
{
    4c0a:	4606      	mov	r6, r0
    4c0c:	f00f fdde 	bl	147cc <_impl_k_current_get>
	BT_DBG("");
    4c10:	4b2d      	ldr	r3, [pc, #180]	; (4cc8 <bt_conn_prepare_events+0xc8>)
    4c12:	9001      	str	r0, [sp, #4]
    4c14:	4a2d      	ldr	r2, [pc, #180]	; (4ccc <bt_conn_prepare_events+0xcc>)
    4c16:	492e      	ldr	r1, [pc, #184]	; (4cd0 <bt_conn_prepare_events+0xd0>)
    4c18:	482e      	ldr	r0, [pc, #184]	; (4cd4 <bt_conn_prepare_events+0xd4>)
    4c1a:	9402      	str	r4, [sp, #8]
    4c1c:	9400      	str	r4, [sp, #0]
    4c1e:	47b8      	blx	r7
	conn_change.signaled = 0;
    4c20:	4b2d      	ldr	r3, [pc, #180]	; (4cd8 <bt_conn_prepare_events+0xd8>)
    4c22:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4c24:	2101      	movs	r1, #1
    4c26:	4630      	mov	r0, r6
	conn_change.signaled = 0;
    4c28:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4c2a:	f010 fa0c 	bl	15046 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    4c2e:	4b2b      	ldr	r3, [pc, #172]	; (4cdc <bt_conn_prepare_events+0xdc>)
    4c30:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4c34:	f7ff fc1c 	bl	4470 <atomic_get>
    4c38:	462a      	mov	r2, r5
    4c3a:	461f      	mov	r7, r3
    4c3c:	4625      	mov	r5, r4
    4c3e:	b918      	cbnz	r0, 4c48 <bt_conn_prepare_events+0x48>
			continue;
    4c40:	2001      	movs	r0, #1
}
    4c42:	b004      	add	sp, #16
    4c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    4c48:	7a59      	ldrb	r1, [r3, #9]
    4c4a:	b999      	cbnz	r1, 4c74 <bt_conn_prepare_events+0x74>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4c4c:	f3bf 8f5b 	dmb	ish
    4c50:	1d19      	adds	r1, r3, #4
    4c52:	e851 0f00 	ldrex	r0, [r1]
    4c56:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    4c5a:	e841 4e00 	strex	lr, r4, [r1]
    4c5e:	f1be 0f00 	cmp.w	lr, #0
    4c62:	d1f6      	bne.n	4c52 <bt_conn_prepare_events+0x52>
    4c64:	f3bf 8f5b 	dmb	ish
    4c68:	0641      	lsls	r1, r0, #25
    4c6a:	d503      	bpl.n	4c74 <bt_conn_prepare_events+0x74>
			conn_cleanup(conn);
    4c6c:	4618      	mov	r0, r3
    4c6e:	f7ff ffaf 	bl	4bd0 <conn_cleanup>
    4c72:	e7e5      	b.n	4c40 <bt_conn_prepare_events+0x40>
		if (conn->state != BT_CONN_CONNECTED) {
    4c74:	7a7c      	ldrb	r4, [r7, #9]
    4c76:	2c03      	cmp	r4, #3
    4c78:	d1e2      	bne.n	4c40 <bt_conn_prepare_events+0x40>
		BT_DBG("Adding conn %p to poll list", conn);
    4c7a:	f8d2 8000 	ldr.w	r8, [r2]
    4c7e:	f00f fda5 	bl	147cc <_impl_k_current_get>
    4c82:	4b11      	ldr	r3, [pc, #68]	; (4cc8 <bt_conn_prepare_events+0xc8>)
    4c84:	9001      	str	r0, [sp, #4]
    4c86:	4a11      	ldr	r2, [pc, #68]	; (4ccc <bt_conn_prepare_events+0xcc>)
    4c88:	4911      	ldr	r1, [pc, #68]	; (4cd0 <bt_conn_prepare_events+0xd0>)
    4c8a:	4815      	ldr	r0, [pc, #84]	; (4ce0 <bt_conn_prepare_events+0xe0>)
    4c8c:	9503      	str	r5, [sp, #12]
    4c8e:	9702      	str	r7, [sp, #8]
    4c90:	9500      	str	r5, [sp, #0]
    4c92:	47c0      	blx	r8
		k_poll_event_init(&events[ev_count],
    4c94:	4b13      	ldr	r3, [pc, #76]	; (4ce4 <bt_conn_prepare_events+0xe4>)
    4c96:	2200      	movs	r2, #0
    4c98:	2104      	movs	r1, #4
    4c9a:	f106 0014 	add.w	r0, r6, #20
    4c9e:	f010 f9d2 	bl	15046 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    4ca2:	2301      	movs	r3, #1
    4ca4:	f886 3020 	strb.w	r3, [r6, #32]
		k_poll_event_init(&events[ev_count],
    4ca8:	f106 0028 	add.w	r0, r6, #40	; 0x28
    4cac:	4b0e      	ldr	r3, [pc, #56]	; (4ce8 <bt_conn_prepare_events+0xe8>)
    4cae:	2200      	movs	r2, #0
    4cb0:	2104      	movs	r1, #4
    4cb2:	f010 f9c8 	bl	15046 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    4cb6:	2302      	movs	r3, #2
    4cb8:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    4cbc:	4620      	mov	r0, r4
	return ev_count;
    4cbe:	e7c0      	b.n	4c42 <bt_conn_prepare_events+0x42>
    4cc0:	20003a5c 	.word	0x20003a5c
    4cc4:	00015359 	.word	0x00015359
    4cc8:	00016c41 	.word	0x00016c41
    4ccc:	0001587b 	.word	0x0001587b
    4cd0:	0001679c 	.word	0x0001679c
    4cd4:	00016d0e 	.word	0x00016d0e
    4cd8:	20003b88 	.word	0x20003b88
    4cdc:	20000360 	.word	0x20000360
    4ce0:	00016d24 	.word	0x00016d24
    4ce4:	20000378 	.word	0x20000378
    4ce8:	20000388 	.word	0x20000388

00004cec <bt_conn_set_state>:
{
    4cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4cf0:	4604      	mov	r4, r0
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    4cf2:	4e73      	ldr	r6, [pc, #460]	; (4ec0 <bt_conn_set_state+0x1d4>)
    4cf4:	f8df 8204 	ldr.w	r8, [pc, #516]	; 4efc <bt_conn_set_state+0x210>
    4cf8:	6835      	ldr	r5, [r6, #0]
{
    4cfa:	b087      	sub	sp, #28
    4cfc:	460f      	mov	r7, r1
    4cfe:	f00f fd65 	bl	147cc <_impl_k_current_get>
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    4d02:	7a63      	ldrb	r3, [r4, #9]
    4d04:	496f      	ldr	r1, [pc, #444]	; (4ec4 <bt_conn_set_state+0x1d8>)
    4d06:	9001      	str	r0, [sp, #4]
    4d08:	2b04      	cmp	r3, #4
    4d0a:	bf96      	itet	ls
    4d0c:	4a6e      	ldrls	r2, [pc, #440]	; (4ec8 <bt_conn_set_state+0x1dc>)
    4d0e:	4b6f      	ldrhi	r3, [pc, #444]	; (4ecc <bt_conn_set_state+0x1e0>)
    4d10:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    4d14:	9302      	str	r3, [sp, #8]
    4d16:	2f04      	cmp	r7, #4
    4d18:	bf96      	itet	ls
    4d1a:	4a6b      	ldrls	r2, [pc, #428]	; (4ec8 <bt_conn_set_state+0x1dc>)
    4d1c:	4a6b      	ldrhi	r2, [pc, #428]	; (4ecc <bt_conn_set_state+0x1e0>)
    4d1e:	f852 2027 	ldrls.w	r2, [r2, r7, lsl #2]
    4d22:	9203      	str	r2, [sp, #12]
    4d24:	f8cd 8010 	str.w	r8, [sp, #16]
    4d28:	f8cd 8000 	str.w	r8, [sp]
    4d2c:	4b68      	ldr	r3, [pc, #416]	; (4ed0 <bt_conn_set_state+0x1e4>)
    4d2e:	4a69      	ldr	r2, [pc, #420]	; (4ed4 <bt_conn_set_state+0x1e8>)
    4d30:	4869      	ldr	r0, [pc, #420]	; (4ed8 <bt_conn_set_state+0x1ec>)
    4d32:	47a8      	blx	r5
	if (conn->state == state) {
    4d34:	7a65      	ldrb	r5, [r4, #9]
    4d36:	42af      	cmp	r7, r5
    4d38:	46c1      	mov	r9, r8
    4d3a:	d10c      	bne.n	4d56 <bt_conn_set_state+0x6a>
		BT_WARN("no transition");
    4d3c:	f8cd 8004 	str.w	r8, [sp, #4]
    4d40:	f8cd 8000 	str.w	r8, [sp]
    4d44:	6834      	ldr	r4, [r6, #0]
    4d46:	4b62      	ldr	r3, [pc, #392]	; (4ed0 <bt_conn_set_state+0x1e4>)
    4d48:	4a64      	ldr	r2, [pc, #400]	; (4edc <bt_conn_set_state+0x1f0>)
    4d4a:	495e      	ldr	r1, [pc, #376]	; (4ec4 <bt_conn_set_state+0x1d8>)
    4d4c:	4864      	ldr	r0, [pc, #400]	; (4ee0 <bt_conn_set_state+0x1f4>)
    4d4e:	47a0      	blx	r4
}
    4d50:	b007      	add	sp, #28
    4d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn->state = state;
    4d56:	7267      	strb	r7, [r4, #9]
	switch (old_state) {
    4d58:	b195      	cbz	r5, 4d80 <bt_conn_set_state+0x94>
    4d5a:	2d02      	cmp	r5, #2
    4d5c:	d014      	beq.n	4d88 <bt_conn_set_state+0x9c>
	switch (conn->state) {
    4d5e:	7a63      	ldrb	r3, [r4, #9]
    4d60:	2b04      	cmp	r3, #4
    4d62:	f200 80a0 	bhi.w	4ea6 <bt_conn_set_state+0x1ba>
    4d66:	a201      	add	r2, pc, #4	; (adr r2, 4d6c <bt_conn_set_state+0x80>)
    4d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4d6c:	00004dcf 	.word	0x00004dcf
    4d70:	00004d51 	.word	0x00004d51
    4d74:	00004e8b 	.word	0x00004e8b
    4d78:	00004d99 	.word	0x00004d99
    4d7c:	00004d51 	.word	0x00004d51
		bt_conn_ref(conn);
    4d80:	4620      	mov	r0, r4
    4d82:	f7ff fe71 	bl	4a68 <bt_conn_ref>
		break;
    4d86:	e7ea      	b.n	4d5e <bt_conn_set_state+0x72>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4d88:	78a3      	ldrb	r3, [r4, #2]
    4d8a:	2b00      	cmp	r3, #0
    4d8c:	d1e7      	bne.n	4d5e <bt_conn_set_state+0x72>
			k_delayed_work_cancel(&conn->le.update_work);
    4d8e:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4d92:	f010 f821 	bl	14dd8 <k_delayed_work_cancel>
    4d96:	e7e2      	b.n	4d5e <bt_conn_set_state+0x72>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4d98:	78a3      	ldrb	r3, [r4, #2]
    4d9a:	2b02      	cmp	r3, #2
    4d9c:	d0d8      	beq.n	4d50 <bt_conn_set_state+0x64>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    4d9e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4da2:	f00f fa55 	bl	14250 <_impl_k_queue_init>
    4da6:	f104 0018 	add.w	r0, r4, #24
    4daa:	f00f fa51 	bl	14250 <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4dae:	2100      	movs	r1, #0
    4db0:	484c      	ldr	r0, [pc, #304]	; (4ee4 <bt_conn_set_state+0x1f8>)
    4db2:	f010 f9eb 	bl	1518c <_impl_k_poll_signal>
	list->head = NULL;
    4db6:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    4db8:	4620      	mov	r0, r4
    4dba:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    4dbc:	63e3      	str	r3, [r4, #60]	; 0x3c
    4dbe:	f000 fc1b 	bl	55f8 <bt_l2cap_connected>
		notify_connected(conn);
    4dc2:	4620      	mov	r0, r4
}
    4dc4:	b007      	add	sp, #28
    4dc6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		notify_connected(conn);
    4dca:	f7ff bb41 	b.w	4450 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4dce:	78a3      	ldrb	r3, [r4, #2]
    4dd0:	2b02      	cmp	r3, #2
    4dd2:	d105      	bne.n	4de0 <bt_conn_set_state+0xf4>
			bt_conn_unref(conn);
    4dd4:	4620      	mov	r0, r4
}
    4dd6:	b007      	add	sp, #28
    4dd8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			bt_conn_unref(conn);
    4ddc:	f7ff bec6 	b.w	4b6c <bt_conn_unref>
		if (old_state == BT_CONN_CONNECTED ||
    4de0:	1eeb      	subs	r3, r5, #3
    4de2:	2b01      	cmp	r3, #1
    4de4:	d844      	bhi.n	4e70 <bt_conn_set_state+0x184>
			bt_l2cap_disconnected(conn);
    4de6:	4620      	mov	r0, r4
    4de8:	f000 fc40 	bl	566c <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    4dec:	4b3e      	ldr	r3, [pc, #248]	; (4ee8 <bt_conn_set_state+0x1fc>)
    4dee:	681d      	ldr	r5, [r3, #0]
    4df0:	b9ed      	cbnz	r5, 4e2e <bt_conn_set_state+0x142>
    4df2:	4e3e      	ldr	r6, [pc, #248]	; (4eec <bt_conn_set_state+0x200>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4df4:	4f3e      	ldr	r7, [pc, #248]	; (4ef0 <bt_conn_set_state+0x204>)
	__asm__ volatile(
    4df6:	f04f 0320 	mov.w	r3, #32
    4dfa:	f3ef 8111 	mrs	r1, BASEPRI
    4dfe:	f383 8811 	msr	BASEPRI, r3
    4e02:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    4e04:	b12b      	cbz	r3, 4e12 <bt_conn_set_state+0x126>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4e06:	6960      	ldr	r0, [r4, #20]
	return node->next;
    4e08:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    4e0a:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4e0c:	4283      	cmp	r3, r0
	list->tail = node;
    4e0e:	bf08      	it	eq
    4e10:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4e12:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    4e16:	b18b      	cbz	r3, 4e3c <bt_conn_set_state+0x150>
    4e18:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    4e1a:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4e1c:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    4e1e:	605d      	str	r5, [r3, #4]
	list->head = node;
    4e20:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    4e22:	b902      	cbnz	r2, 4e26 <bt_conn_set_state+0x13a>
	list->tail = node;
    4e24:	6073      	str	r3, [r6, #4]
    4e26:	4638      	mov	r0, r7
    4e28:	f00f fcdf 	bl	147ea <_impl_k_sem_give>
    4e2c:	e7e3      	b.n	4df6 <bt_conn_set_state+0x10a>
		if (cb->disconnected) {
    4e2e:	686b      	ldr	r3, [r5, #4]
    4e30:	b113      	cbz	r3, 4e38 <bt_conn_set_state+0x14c>
			cb->disconnected(conn, conn->err);
    4e32:	7a21      	ldrb	r1, [r4, #8]
    4e34:	4620      	mov	r0, r4
    4e36:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    4e38:	692d      	ldr	r5, [r5, #16]
    4e3a:	e7d9      	b.n	4df0 <bt_conn_set_state+0x104>
			if (conn->type == BT_CONN_TYPE_LE) {
    4e3c:	78a3      	ldrb	r3, [r4, #2]
    4e3e:	b91b      	cbnz	r3, 4e48 <bt_conn_set_state+0x15c>
				k_delayed_work_cancel(&conn->le.update_work);
    4e40:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4e44:	f00f ffc8 	bl	14dd8 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4e48:	f3bf 8f5b 	dmb	ish
    4e4c:	3404      	adds	r4, #4
    4e4e:	e854 3f00 	ldrex	r3, [r4]
    4e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4e56:	e844 3200 	strex	r2, r3, [r4]
    4e5a:	2a00      	cmp	r2, #0
    4e5c:	d1f7      	bne.n	4e4e <bt_conn_set_state+0x162>
    4e5e:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4e62:	4820      	ldr	r0, [pc, #128]	; (4ee4 <bt_conn_set_state+0x1f8>)
    4e64:	2100      	movs	r1, #0
}
    4e66:	b007      	add	sp, #28
    4e68:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4e6c:	f010 b98e 	b.w	1518c <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    4e70:	2d02      	cmp	r5, #2
    4e72:	d103      	bne.n	4e7c <bt_conn_set_state+0x190>
			notify_connected(conn);
    4e74:	4620      	mov	r0, r4
    4e76:	f7ff faeb 	bl	4450 <notify_connected>
    4e7a:	e7ab      	b.n	4dd4 <bt_conn_set_state+0xe8>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    4e7c:	2d01      	cmp	r5, #1
    4e7e:	f47f af67 	bne.w	4d50 <bt_conn_set_state+0x64>
			if (conn->err) {
    4e82:	7a23      	ldrb	r3, [r4, #8]
    4e84:	2b00      	cmp	r3, #0
    4e86:	d0a5      	beq.n	4dd4 <bt_conn_set_state+0xe8>
    4e88:	e7f4      	b.n	4e74 <bt_conn_set_state+0x188>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4e8a:	78a3      	ldrb	r3, [r4, #2]
    4e8c:	2b00      	cmp	r3, #0
    4e8e:	f47f af5f 	bne.w	4d50 <bt_conn_set_state+0x64>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    4e92:	4818      	ldr	r0, [pc, #96]	; (4ef4 <bt_conn_set_state+0x208>)
    4e94:	f640 32b8 	movw	r2, #3000	; 0xbb8
    4e98:	f104 0170 	add.w	r1, r4, #112	; 0x70
}
    4e9c:	b007      	add	sp, #28
    4e9e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4ea2:	f00f bffd 	b.w	14ea0 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    4ea6:	f8cd 9008 	str.w	r9, [sp, #8]
    4eaa:	9701      	str	r7, [sp, #4]
    4eac:	f8cd 9000 	str.w	r9, [sp]
    4eb0:	6834      	ldr	r4, [r6, #0]
    4eb2:	4b07      	ldr	r3, [pc, #28]	; (4ed0 <bt_conn_set_state+0x1e4>)
    4eb4:	4a09      	ldr	r2, [pc, #36]	; (4edc <bt_conn_set_state+0x1f0>)
    4eb6:	4903      	ldr	r1, [pc, #12]	; (4ec4 <bt_conn_set_state+0x1d8>)
    4eb8:	480f      	ldr	r0, [pc, #60]	; (4ef8 <bt_conn_set_state+0x20c>)
    4eba:	47a0      	blx	r4
		break;
    4ebc:	e748      	b.n	4d50 <bt_conn_set_state+0x64>
    4ebe:	bf00      	nop
    4ec0:	20003a5c 	.word	0x20003a5c
    4ec4:	0001679c 	.word	0x0001679c
    4ec8:	00016bdc 	.word	0x00016bdc
    4ecc:	0001702a 	.word	0x0001702a
    4ed0:	00016c6b 	.word	0x00016c6b
    4ed4:	0001587b 	.word	0x0001587b
    4ed8:	00017034 	.word	0x00017034
    4edc:	000167d7 	.word	0x000167d7
    4ee0:	00017052 	.word	0x00017052
    4ee4:	20003b88 	.word	0x20003b88
    4ee8:	2000034c 	.word	0x2000034c
    4eec:	200003f8 	.word	0x200003f8
    4ef0:	20003aec 	.word	0x20003aec
    4ef4:	20001988 	.word	0x20001988
    4ef8:	00017070 	.word	0x00017070
    4efc:	00015359 	.word	0x00015359

00004f00 <bt_conn_get_dst>:

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    4f00:	3044      	adds	r0, #68	; 0x44
    4f02:	4770      	bx	lr

00004f04 <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    4f04:	b570      	push	{r4, r5, r6, lr}
    4f06:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    4f08:	4608      	mov	r0, r1
{
    4f0a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    4f0c:	f7fd fabe 	bl	248c <bt_le_conn_params_valid>
    4f10:	b908      	cbnz	r0, 4f16 <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    4f12:	2400      	movs	r4, #0
    4f14:	e01c      	b.n	4f50 <bt_conn_create_le+0x4c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4f16:	481d      	ldr	r0, [pc, #116]	; (4f8c <bt_conn_create_le+0x88>)
    4f18:	f7ff faaa 	bl	4470 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4f1c:	0583      	lsls	r3, r0, #22
    4f1e:	d4f8      	bmi.n	4f12 <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    4f20:	4630      	mov	r0, r6
    4f22:	f7ff fded 	bl	4b00 <bt_conn_lookup_addr_le>
	if (conn) {
    4f26:	4604      	mov	r4, r0
    4f28:	b1a0      	cbz	r0, 4f54 <bt_conn_create_le+0x50>
		switch (conn->state) {
    4f2a:	7a43      	ldrb	r3, [r0, #9]
    4f2c:	2b01      	cmp	r3, #1
    4f2e:	d006      	beq.n	4f3e <bt_conn_create_le+0x3a>
    4f30:	d301      	bcc.n	4f36 <bt_conn_create_le+0x32>
    4f32:	2b03      	cmp	r3, #3
    4f34:	d90c      	bls.n	4f50 <bt_conn_create_le+0x4c>
			bt_conn_unref(conn);
    4f36:	4620      	mov	r0, r4
    4f38:	f7ff fe18 	bl	4b6c <bt_conn_unref>
    4f3c:	e7e9      	b.n	4f12 <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    4f3e:	886b      	ldrh	r3, [r5, #2]
    4f40:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    4f44:	88ab      	ldrh	r3, [r5, #4]
    4f46:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4f4a:	88eb      	ldrh	r3, [r5, #6]
    4f4c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    4f50:	4620      	mov	r0, r4
    4f52:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    4f54:	4630      	mov	r0, r6
    4f56:	f7ff fd3b 	bl	49d0 <bt_conn_add_le>
	if (!conn) {
    4f5a:	4604      	mov	r4, r0
    4f5c:	2800      	cmp	r0, #0
    4f5e:	d0f7      	beq.n	4f50 <bt_conn_create_le+0x4c>
	memcpy(dst, src, sizeof(*dst));
    4f60:	2207      	movs	r2, #7
    4f62:	4631      	mov	r1, r6
    4f64:	3052      	adds	r0, #82	; 0x52
    4f66:	f7fc fe6f 	bl	1c48 <memcpy>
	conn->le.interval_max = param->interval_max;
    4f6a:	886b      	ldrh	r3, [r5, #2]
    4f6c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4f70:	88ab      	ldrh	r3, [r5, #4]
    4f72:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4f76:	88eb      	ldrh	r3, [r5, #6]
    4f78:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4f7c:	4620      	mov	r0, r4
    4f7e:	2101      	movs	r1, #1
    4f80:	f7ff feb4 	bl	4cec <bt_conn_set_state>
	bt_le_scan_update(true);
    4f84:	2001      	movs	r0, #1
    4f86:	f7fd fc05 	bl	2794 <bt_le_scan_update>
	return conn;
    4f8a:	e7e1      	b.n	4f50 <bt_conn_create_le+0x4c>
    4f8c:	20003ad0 	.word	0x20003ad0

00004f90 <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    4f90:	b570      	push	{r4, r5, r6, lr}
    4f92:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    4f94:	460d      	mov	r5, r1
    4f96:	2900      	cmp	r1, #0
    4f98:	d13b      	bne.n	5012 <bt_le_set_auto_conn+0x82>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    4f9a:	4630      	mov	r0, r6
    4f9c:	f7ff fdb0 	bl	4b00 <bt_conn_lookup_addr_le>
	if (!conn) {
    4fa0:	4604      	mov	r4, r0
    4fa2:	b928      	cbnz	r0, 4fb0 <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    4fa4:	4630      	mov	r0, r6
    4fa6:	f7ff fd13 	bl	49d0 <bt_conn_add_le>
		if (!conn) {
    4faa:	4604      	mov	r4, r0
    4fac:	2800      	cmp	r0, #0
    4fae:	d051      	beq.n	5054 <bt_le_set_auto_conn+0xc4>
    4fb0:	1d23      	adds	r3, r4, #4
			return -ENOMEM;
		}
	}

	if (param) {
    4fb2:	2d00      	cmp	r5, #0
    4fb4:	d035      	beq.n	5022 <bt_le_set_auto_conn+0x92>
	conn->le.interval_max = param->interval_max;
    4fb6:	886a      	ldrh	r2, [r5, #2]
    4fb8:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4fbc:	88aa      	ldrh	r2, [r5, #4]
    4fbe:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4fc2:	88ea      	ldrh	r2, [r5, #6]
    4fc4:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4fc8:	f3bf 8f5b 	dmb	ish
    4fcc:	e853 2f00 	ldrex	r2, [r3]
    4fd0:	f042 0101 	orr.w	r1, r2, #1
    4fd4:	e843 1000 	strex	r0, r1, [r3]
    4fd8:	2800      	cmp	r0, #0
    4fda:	d1f7      	bne.n	4fcc <bt_le_set_auto_conn+0x3c>
    4fdc:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    4fe0:	07d1      	lsls	r1, r2, #31
    4fe2:	d402      	bmi.n	4fea <bt_le_set_auto_conn+0x5a>
					     BT_CONN_AUTO_CONNECT)) {
			bt_conn_ref(conn);
    4fe4:	4620      	mov	r0, r4
    4fe6:	f7ff fd3f 	bl	4a68 <bt_conn_ref>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    4fea:	7a63      	ldrb	r3, [r4, #9]
    4fec:	b963      	cbnz	r3, 5008 <bt_le_set_auto_conn+0x78>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4fee:	481b      	ldr	r0, [pc, #108]	; (505c <bt_le_set_auto_conn+0xcc>)
    4ff0:	f7ff fa3e 	bl	4470 <atomic_get>
    4ff4:	0783      	lsls	r3, r0, #30
    4ff6:	d507      	bpl.n	5008 <bt_le_set_auto_conn+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    4ff8:	b11d      	cbz	r5, 5002 <bt_le_set_auto_conn+0x72>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4ffa:	2101      	movs	r1, #1
    4ffc:	4620      	mov	r0, r4
    4ffe:	f7ff fe75 	bl	4cec <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    5002:	2000      	movs	r0, #0
    5004:	f7fd fbc6 	bl	2794 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    5008:	4620      	mov	r0, r4
    500a:	f7ff fdaf 	bl	4b6c <bt_conn_unref>

	return 0;
    500e:	2000      	movs	r0, #0
    5010:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    5012:	4608      	mov	r0, r1
    5014:	f7fd fa3a 	bl	248c <bt_le_conn_params_valid>
    5018:	2800      	cmp	r0, #0
    501a:	d1be      	bne.n	4f9a <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    501c:	f06f 0015 	mvn.w	r0, #21
    5020:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5022:	f3bf 8f5b 	dmb	ish
    5026:	e853 2f00 	ldrex	r2, [r3]
    502a:	f022 0101 	bic.w	r1, r2, #1
    502e:	e843 1000 	strex	r0, r1, [r3]
    5032:	2800      	cmp	r0, #0
    5034:	d1f7      	bne.n	5026 <bt_le_set_auto_conn+0x96>
    5036:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    503a:	07d2      	lsls	r2, r2, #31
    503c:	d5d5      	bpl.n	4fea <bt_le_set_auto_conn+0x5a>
			bt_conn_unref(conn);
    503e:	4620      	mov	r0, r4
    5040:	f7ff fd94 	bl	4b6c <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    5044:	7a63      	ldrb	r3, [r4, #9]
    5046:	2b01      	cmp	r3, #1
    5048:	d1cf      	bne.n	4fea <bt_le_set_auto_conn+0x5a>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    504a:	4629      	mov	r1, r5
    504c:	4620      	mov	r0, r4
    504e:	f7ff fe4d 	bl	4cec <bt_conn_set_state>
    5052:	e7ca      	b.n	4fea <bt_le_set_auto_conn+0x5a>
			return -ENOMEM;
    5054:	f06f 000b 	mvn.w	r0, #11
}
    5058:	bd70      	pop	{r4, r5, r6, pc}
    505a:	bf00      	nop
    505c:	20003ad0 	.word	0x20003ad0

00005060 <bt_conn_disconnect>:
{
    5060:	b570      	push	{r4, r5, r6, lr}
    5062:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5064:	7881      	ldrb	r1, [r0, #2]
{
    5066:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5068:	b911      	cbnz	r1, 5070 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    506a:	3044      	adds	r0, #68	; 0x44
    506c:	f7ff ff90 	bl	4f90 <bt_le_set_auto_conn>
	switch (conn->state) {
    5070:	7a63      	ldrb	r3, [r4, #9]
    5072:	3b01      	subs	r3, #1
    5074:	2b03      	cmp	r3, #3
    5076:	d803      	bhi.n	5080 <bt_conn_disconnect+0x20>
    5078:	e8df f003 	tbb	[pc, r3]
    507c:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    5080:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    5084:	4628      	mov	r0, r5
    5086:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5088:	4620      	mov	r0, r4
		conn->err = reason;
    508a:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    508c:	2100      	movs	r1, #0
    508e:	f7ff fe2d 	bl	4cec <bt_conn_set_state>
		bt_le_scan_update(false);
    5092:	2000      	movs	r0, #0
    5094:	f7fd fb7e 	bl	2794 <bt_le_scan_update>
		return 0;
    5098:	2500      	movs	r5, #0
    509a:	e7f3      	b.n	5084 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    509c:	f104 0070 	add.w	r0, r4, #112	; 0x70
    50a0:	f00f fe9a 	bl	14dd8 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    50a4:	2100      	movs	r1, #0
    50a6:	f242 000e 	movw	r0, #8206	; 0x200e
}
    50aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    50ae:	f7fd bad1 	b.w	2654 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    50b2:	2103      	movs	r1, #3
    50b4:	f240 4006 	movw	r0, #1030	; 0x406
    50b8:	f7fd f848 	bl	214c <bt_hci_cmd_create>
	if (!buf) {
    50bc:	4605      	mov	r5, r0
    50be:	b198      	cbz	r0, 50e8 <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    50c0:	2103      	movs	r1, #3
    50c2:	3008      	adds	r0, #8
    50c4:	f00e fb3a 	bl	1373c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    50c8:	8823      	ldrh	r3, [r4, #0]
    50ca:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    50cc:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    50ce:	4629      	mov	r1, r5
    50d0:	f240 4006 	movw	r0, #1030	; 0x406
    50d4:	f7fd fabe 	bl	2654 <bt_hci_cmd_send>
	if (err) {
    50d8:	4605      	mov	r5, r0
    50da:	2800      	cmp	r0, #0
    50dc:	d1d2      	bne.n	5084 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    50de:	2104      	movs	r1, #4
    50e0:	4620      	mov	r0, r4
    50e2:	f7ff fe03 	bl	4cec <bt_conn_set_state>
    50e6:	e7cd      	b.n	5084 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    50e8:	f06f 0536 	mvn.w	r5, #54	; 0x36
    50ec:	e7ca      	b.n	5084 <bt_conn_disconnect+0x24>

000050ee <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    50ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50f0:	4607      	mov	r7, r0
    50f2:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    50f4:	f242 0013 	movw	r0, #8211	; 0x2013
    50f8:	210e      	movs	r1, #14
    50fa:	f7fd f827 	bl	214c <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    50fe:	4606      	mov	r6, r0
    5100:	b1c8      	cbz	r0, 5136 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    5102:	210e      	movs	r1, #14
    5104:	3008      	adds	r0, #8
    5106:	f00e fb19 	bl	1373c <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    510a:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    510c:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    510e:	220e      	movs	r2, #14
    5110:	f7fc fdc6 	bl	1ca0 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    5114:	883b      	ldrh	r3, [r7, #0]
    5116:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    5118:	882b      	ldrh	r3, [r5, #0]
    511a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    511c:	886b      	ldrh	r3, [r5, #2]
    511e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    5120:	88ab      	ldrh	r3, [r5, #4]
    5122:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    5124:	88eb      	ldrh	r3, [r5, #6]
    5126:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    5128:	4631      	mov	r1, r6
    512a:	f242 0013 	movw	r0, #8211	; 0x2013
}
    512e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    5132:	f7fd ba8f 	b.w	2654 <bt_hci_cmd_send>
}
    5136:	f06f 0036 	mvn.w	r0, #54	; 0x36
    513a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000513c <bt_conn_le_param_update>:
{
    513c:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    513e:	4b27      	ldr	r3, [pc, #156]	; (51dc <bt_conn_le_param_update+0xa0>)
{
    5140:	460d      	mov	r5, r1
    5142:	b08a      	sub	sp, #40	; 0x28
    5144:	4604      	mov	r4, r0
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    5146:	681e      	ldr	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    5148:	f00f fb40 	bl	147cc <_impl_k_current_get>
    514c:	88ea      	ldrh	r2, [r5, #6]
    514e:	9207      	str	r2, [sp, #28]
    5150:	88aa      	ldrh	r2, [r5, #4]
    5152:	9206      	str	r2, [sp, #24]
    5154:	886a      	ldrh	r2, [r5, #2]
    5156:	9205      	str	r2, [sp, #20]
    5158:	882a      	ldrh	r2, [r5, #0]
    515a:	4b21      	ldr	r3, [pc, #132]	; (51e0 <bt_conn_le_param_update+0xa4>)
    515c:	9204      	str	r2, [sp, #16]
    515e:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    5162:	9308      	str	r3, [sp, #32]
    5164:	9203      	str	r2, [sp, #12]
    5166:	9001      	str	r0, [sp, #4]
    5168:	9300      	str	r3, [sp, #0]
    516a:	4a1e      	ldr	r2, [pc, #120]	; (51e4 <bt_conn_le_param_update+0xa8>)
    516c:	4b1e      	ldr	r3, [pc, #120]	; (51e8 <bt_conn_le_param_update+0xac>)
    516e:	9402      	str	r4, [sp, #8]
    5170:	491e      	ldr	r1, [pc, #120]	; (51ec <bt_conn_le_param_update+0xb0>)
    5172:	481f      	ldr	r0, [pc, #124]	; (51f0 <bt_conn_le_param_update+0xb4>)
    5174:	47b0      	blx	r6
	if (conn->le.interval >= param->interval_min &&
    5176:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    517a:	882a      	ldrh	r2, [r5, #0]
    517c:	429a      	cmp	r2, r3
    517e:	d80c      	bhi.n	519a <bt_conn_le_param_update+0x5e>
    5180:	886a      	ldrh	r2, [r5, #2]
    5182:	429a      	cmp	r2, r3
    5184:	d309      	bcc.n	519a <bt_conn_le_param_update+0x5e>
	    conn->le.interval <= param->interval_max &&
    5186:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    518a:	88ab      	ldrh	r3, [r5, #4]
    518c:	429a      	cmp	r2, r3
    518e:	d104      	bne.n	519a <bt_conn_le_param_update+0x5e>
	    conn->le.latency == param->latency &&
    5190:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    5194:	88eb      	ldrh	r3, [r5, #6]
    5196:	429a      	cmp	r2, r3
    5198:	d01c      	beq.n	51d4 <bt_conn_le_param_update+0x98>
	k_delayed_work_cancel(&conn->le.update_work);
    519a:	f104 0070 	add.w	r0, r4, #112	; 0x70
    519e:	f00f fe1b 	bl	14dd8 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    51a2:	4b14      	ldr	r3, [pc, #80]	; (51f4 <bt_conn_le_param_update+0xb8>)
    51a4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    51a8:	079a      	lsls	r2, r3, #30
    51aa:	d503      	bpl.n	51b4 <bt_conn_le_param_update+0x78>
    51ac:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    51b0:	079b      	lsls	r3, r3, #30
    51b2:	d401      	bmi.n	51b8 <bt_conn_le_param_update+0x7c>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    51b4:	78e3      	ldrb	r3, [r4, #3]
    51b6:	b933      	cbnz	r3, 51c6 <bt_conn_le_param_update+0x8a>
		return bt_conn_le_conn_update(conn, param);
    51b8:	4629      	mov	r1, r5
    51ba:	4620      	mov	r0, r4
}
    51bc:	b00a      	add	sp, #40	; 0x28
    51be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_conn_le_conn_update(conn, param);
    51c2:	f7ff bf94 	b.w	50ee <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    51c6:	4629      	mov	r1, r5
    51c8:	4620      	mov	r0, r4
}
    51ca:	b00a      	add	sp, #40	; 0x28
    51cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_l2cap_update_conn_param(conn, param);
    51d0:	f000 bbc2 	b.w	5958 <bt_l2cap_update_conn_param>
}
    51d4:	f06f 0044 	mvn.w	r0, #68	; 0x44
    51d8:	b00a      	add	sp, #40	; 0x28
    51da:	bd70      	pop	{r4, r5, r6, pc}
    51dc:	20003a5c 	.word	0x20003a5c
    51e0:	00015359 	.word	0x00015359
    51e4:	0001587b 	.word	0x0001587b
    51e8:	00016c97 	.word	0x00016c97
    51ec:	0001679c 	.word	0x0001679c
    51f0:	00016caf 	.word	0x00016caf
    51f4:	20003a60 	.word	0x20003a60

000051f8 <le_conn_update>:
{
    51f8:	4603      	mov	r3, r0
    51fa:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    51fc:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    5200:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    5202:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5206:	d105      	bne.n	5214 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    5208:	2113      	movs	r1, #19
    520a:	f7ff ff29 	bl	5060 <bt_conn_disconnect>
}
    520e:	b003      	add	sp, #12
    5210:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    5214:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    5218:	f8ad 2000 	strh.w	r2, [sp]
    521c:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    5220:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    5224:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    5226:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    522a:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    522e:	f8ad 2004 	strh.w	r2, [sp, #4]
    5232:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    5236:	f7ff ff81 	bl	513c <bt_conn_le_param_update>
    523a:	e7e8      	b.n	520e <le_conn_update+0x16>

0000523c <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    523c:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    523e:	4b08      	ldr	r3, [pc, #32]	; (5260 <bt_conn_create_pdu+0x24>)
{
    5240:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    5242:	2800      	cmp	r0, #0
    5244:	bf08      	it	eq
    5246:	4618      	moveq	r0, r3
    5248:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    524c:	f00e fa14 	bl	13678 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    5250:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    5252:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    5254:	3008      	adds	r0, #8
    5256:	f00e fa2e 	bl	136b6 <net_buf_simple_reserve>

	return buf;
}
    525a:	4620      	mov	r0, r4
    525c:	bd38      	pop	{r3, r4, r5, pc}
    525e:	bf00      	nop
    5260:	20003f2c 	.word	0x20003f2c

00005264 <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    5264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5268:	4606      	mov	r6, r0
    526a:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    526c:	4816      	ldr	r0, [pc, #88]	; (52c8 <create_frag.isra.8+0x64>)
    526e:	2100      	movs	r1, #0
    5270:	f7ff ffe4 	bl	523c <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    5274:	7833      	ldrb	r3, [r6, #0]
    5276:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    5278:	4605      	mov	r5, r0
    527a:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    527e:	d005      	beq.n	528c <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    5280:	f00e fa2a 	bl	136d8 <net_buf_unref>
		return NULL;
    5284:	4635      	mov	r5, r6
}
    5286:	4628      	mov	r0, r5
    5288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    528c:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    528e:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    5292:	4e0e      	ldr	r6, [pc, #56]	; (52cc <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    5294:	4638      	mov	r0, r7
    5296:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    529a:	f00e fa8a 	bl	137b2 <net_buf_simple_tailroom>
    529e:	4580      	cmp	r8, r0
    52a0:	d20c      	bcs.n	52bc <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    52a2:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    52a6:	f854 1f08 	ldr.w	r1, [r4, #8]!
    52aa:	4632      	mov	r2, r6
    52ac:	4638      	mov	r0, r7
    52ae:	f00e fa4b 	bl	13748 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    52b2:	4631      	mov	r1, r6
    52b4:	4620      	mov	r0, r4
    52b6:	f00e fa60 	bl	1377a <net_buf_simple_pull>
    52ba:	e7e4      	b.n	5286 <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    52bc:	4638      	mov	r0, r7
    52be:	f00e fa78 	bl	137b2 <net_buf_simple_tailroom>
    52c2:	b286      	uxth	r6, r0
    52c4:	e7ef      	b.n	52a6 <create_frag.isra.8+0x42>
    52c6:	bf00      	nop
    52c8:	20003f4c 	.word	0x20003f4c
    52cc:	20003a60 	.word	0x20003a60

000052d0 <bt_conn_process_tx>:
{
    52d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BT_DBG("conn %p", conn);
    52d4:	4f49      	ldr	r7, [pc, #292]	; (53fc <bt_conn_process_tx+0x12c>)
    52d6:	4d4a      	ldr	r5, [pc, #296]	; (5400 <bt_conn_process_tx+0x130>)
    52d8:	683e      	ldr	r6, [r7, #0]
{
    52da:	b086      	sub	sp, #24
    52dc:	4604      	mov	r4, r0
    52de:	f00f fa75 	bl	147cc <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    52e2:	4b48      	ldr	r3, [pc, #288]	; (5404 <bt_conn_process_tx+0x134>)
    52e4:	9001      	str	r0, [sp, #4]
    52e6:	9503      	str	r5, [sp, #12]
    52e8:	9402      	str	r4, [sp, #8]
    52ea:	9500      	str	r5, [sp, #0]
    52ec:	4a46      	ldr	r2, [pc, #280]	; (5408 <bt_conn_process_tx+0x138>)
    52ee:	4947      	ldr	r1, [pc, #284]	; (540c <bt_conn_process_tx+0x13c>)
    52f0:	4847      	ldr	r0, [pc, #284]	; (5410 <bt_conn_process_tx+0x140>)
    52f2:	47b0      	blx	r6
	if (conn->state == BT_CONN_DISCONNECTED &&
    52f4:	7a63      	ldrb	r3, [r4, #9]
    52f6:	46b8      	mov	r8, r7
    52f8:	462e      	mov	r6, r5
    52fa:	bb0b      	cbnz	r3, 5340 <bt_conn_process_tx+0x70>
    52fc:	f3bf 8f5b 	dmb	ish
    5300:	1d23      	adds	r3, r4, #4
    5302:	e853 2f00 	ldrex	r2, [r3]
    5306:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    530a:	e843 1000 	strex	r0, r1, [r3]
    530e:	2800      	cmp	r0, #0
    5310:	d1f7      	bne.n	5302 <bt_conn_process_tx+0x32>
    5312:	f3bf 8f5b 	dmb	ish
    5316:	0653      	lsls	r3, r2, #25
    5318:	d512      	bpl.n	5340 <bt_conn_process_tx+0x70>
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
    531a:	683e      	ldr	r6, [r7, #0]
    531c:	f00f fa56 	bl	147cc <_impl_k_current_get>
    5320:	9503      	str	r5, [sp, #12]
    5322:	8823      	ldrh	r3, [r4, #0]
    5324:	9302      	str	r3, [sp, #8]
    5326:	9001      	str	r0, [sp, #4]
    5328:	9500      	str	r5, [sp, #0]
    532a:	4b36      	ldr	r3, [pc, #216]	; (5404 <bt_conn_process_tx+0x134>)
    532c:	4a36      	ldr	r2, [pc, #216]	; (5408 <bt_conn_process_tx+0x138>)
    532e:	4937      	ldr	r1, [pc, #220]	; (540c <bt_conn_process_tx+0x13c>)
    5330:	4838      	ldr	r0, [pc, #224]	; (5414 <bt_conn_process_tx+0x144>)
    5332:	47b0      	blx	r6
		conn_cleanup(conn);
    5334:	4620      	mov	r0, r4
}
    5336:	b006      	add	sp, #24
    5338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		conn_cleanup(conn);
    533c:	f7ff bc48 	b.w	4bd0 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    5340:	2100      	movs	r1, #0
    5342:	f104 0028 	add.w	r0, r4, #40	; 0x28
    5346:	f00e f99d 	bl	13684 <net_buf_get>
	BT_ASSERT(buf);
    534a:	4605      	mov	r5, r0
    534c:	b970      	cbnz	r0, 536c <bt_conn_process_tx+0x9c>
    534e:	9601      	str	r6, [sp, #4]
    5350:	9600      	str	r6, [sp, #0]
    5352:	f8d8 4000 	ldr.w	r4, [r8]
    5356:	4b2b      	ldr	r3, [pc, #172]	; (5404 <bt_conn_process_tx+0x134>)
    5358:	4a2f      	ldr	r2, [pc, #188]	; (5418 <bt_conn_process_tx+0x148>)
    535a:	492c      	ldr	r1, [pc, #176]	; (540c <bt_conn_process_tx+0x13c>)
    535c:	482f      	ldr	r0, [pc, #188]	; (541c <bt_conn_process_tx+0x14c>)
    535e:	47a0      	blx	r4
    5360:	4040      	eors	r0, r0
    5362:	f380 8811 	msr	BASEPRI, r0
    5366:	f04f 0004 	mov.w	r0, #4
    536a:	df02      	svc	2
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    536c:	f8d8 7000 	ldr.w	r7, [r8]
    5370:	f00f fa2c 	bl	147cc <_impl_k_current_get>
    5374:	9605      	str	r6, [sp, #20]
    5376:	89ab      	ldrh	r3, [r5, #12]
    5378:	9600      	str	r6, [sp, #0]
	return bt_dev.le.mtu;
    537a:	4e29      	ldr	r6, [pc, #164]	; (5420 <bt_conn_process_tx+0x150>)
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    537c:	9304      	str	r3, [sp, #16]
    537e:	9001      	str	r0, [sp, #4]
    5380:	4a21      	ldr	r2, [pc, #132]	; (5408 <bt_conn_process_tx+0x138>)
    5382:	4922      	ldr	r1, [pc, #136]	; (540c <bt_conn_process_tx+0x13c>)
    5384:	9503      	str	r5, [sp, #12]
    5386:	9402      	str	r4, [sp, #8]
    5388:	4b26      	ldr	r3, [pc, #152]	; (5424 <bt_conn_process_tx+0x154>)
    538a:	4827      	ldr	r0, [pc, #156]	; (5428 <bt_conn_process_tx+0x158>)
    538c:	47b8      	blx	r7
	if (buf->len <= conn_mtu(conn)) {
    538e:	89a9      	ldrh	r1, [r5, #12]
    5390:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    5394:	4291      	cmp	r1, r2
    5396:	d809      	bhi.n	53ac <bt_conn_process_tx+0xdc>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    5398:	2300      	movs	r3, #0
    539a:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    539c:	4629      	mov	r1, r5
    539e:	4620      	mov	r0, r4
    53a0:	f7ff fa44 	bl	482c <send_frag>
	if (!send_buf(conn, buf)) {
    53a4:	b150      	cbz	r0, 53bc <bt_conn_process_tx+0xec>
}
    53a6:	b006      	add	sp, #24
    53a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53ac:	f104 0709 	add.w	r7, r4, #9
	frag = create_frag(conn, buf);
    53b0:	4629      	mov	r1, r5
    53b2:	4638      	mov	r0, r7
    53b4:	f7ff ff56 	bl	5264 <create_frag.isra.8>
	if (!frag) {
    53b8:	4601      	mov	r1, r0
    53ba:	b928      	cbnz	r0, 53c8 <bt_conn_process_tx+0xf8>
		net_buf_unref(buf);
    53bc:	4628      	mov	r0, r5
}
    53be:	b006      	add	sp, #24
    53c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    53c4:	f00e b988 	b.w	136d8 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    53c8:	2301      	movs	r3, #1
    53ca:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    53cc:	4620      	mov	r0, r4
    53ce:	f7ff fa2d 	bl	482c <send_frag>
    53d2:	2800      	cmp	r0, #0
    53d4:	d0f2      	beq.n	53bc <bt_conn_process_tx+0xec>
	while (buf->len > conn_mtu(conn)) {
    53d6:	89aa      	ldrh	r2, [r5, #12]
    53d8:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    53dc:	429a      	cmp	r2, r3
    53de:	d802      	bhi.n	53e6 <bt_conn_process_tx+0x116>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    53e0:	2300      	movs	r3, #0
    53e2:	2201      	movs	r2, #1
    53e4:	e7da      	b.n	539c <bt_conn_process_tx+0xcc>
		frag = create_frag(conn, buf);
    53e6:	4629      	mov	r1, r5
    53e8:	4638      	mov	r0, r7
    53ea:	f7ff ff3b 	bl	5264 <create_frag.isra.8>
		if (!frag) {
    53ee:	4601      	mov	r1, r0
    53f0:	2800      	cmp	r0, #0
    53f2:	d0e3      	beq.n	53bc <bt_conn_process_tx+0xec>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    53f4:	2301      	movs	r3, #1
    53f6:	461a      	mov	r2, r3
    53f8:	e7e8      	b.n	53cc <bt_conn_process_tx+0xfc>
    53fa:	bf00      	nop
    53fc:	20003a5c 	.word	0x20003a5c
    5400:	00015359 	.word	0x00015359
    5404:	00016c58 	.word	0x00016c58
    5408:	0001587b 	.word	0x0001587b
    540c:	0001679c 	.word	0x0001679c
    5410:	00016cf1 	.word	0x00016cf1
    5414:	00016d55 	.word	0x00016d55
    5418:	00016754 	.word	0x00016754
    541c:	00016949 	.word	0x00016949
    5420:	20003a60 	.word	0x20003a60
    5424:	00016c38 	.word	0x00016c38
    5428:	00016d8f 	.word	0x00016d8f

0000542c <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    542c:	4b03      	ldr	r3, [pc, #12]	; (543c <bt_conn_get_id+0x10>)
    542e:	1ac0      	subs	r0, r0, r3
    5430:	4b03      	ldr	r3, [pc, #12]	; (5440 <bt_conn_get_id+0x14>)
    5432:	10c0      	asrs	r0, r0, #3
    5434:	4358      	muls	r0, r3
}
    5436:	b2c0      	uxtb	r0, r0
    5438:	4770      	bx	lr
    543a:	bf00      	nop
    543c:	20000360 	.word	0x20000360
    5440:	286bca1b 	.word	0x286bca1b

00005444 <bt_conn_init>:
	parent->next = child;
    5444:	4b12      	ldr	r3, [pc, #72]	; (5490 <bt_conn_init+0x4c>)
    5446:	4a13      	ldr	r2, [pc, #76]	; (5494 <bt_conn_init+0x50>)
    5448:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    544a:	b510      	push	{r4, lr}
    544c:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    544e:	6859      	ldr	r1, [r3, #4]
    5450:	b901      	cbnz	r1, 5454 <bt_conn_init+0x10>
	list->tail = node;
    5452:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    5454:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    5456:	6092      	str	r2, [r2, #8]
	list->head = node;
    5458:	4a0f      	ldr	r2, [pc, #60]	; (5498 <bt_conn_init+0x54>)
    545a:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    545c:	b901      	cbnz	r1, 5460 <bt_conn_init+0x1c>
	list->tail = node;
    545e:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    5460:	f001 fb8a 	bl	6b78 <bt_att_init>

	err = bt_smp_init();
    5464:	f002 f8ce 	bl	7604 <bt_smp_init>
	if (err) {
    5468:	4604      	mov	r4, r0
    546a:	b970      	cbnz	r0, 548a <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    546c:	f000 fa9c 	bl	59a8 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    5470:	480a      	ldr	r0, [pc, #40]	; (549c <bt_conn_init+0x58>)
    5472:	f7fe fffd 	bl	4470 <atomic_get>
    5476:	b140      	cbz	r0, 548a <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5478:	4809      	ldr	r0, [pc, #36]	; (54a0 <bt_conn_init+0x5c>)
    547a:	f7fe fff9 	bl	4470 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    547e:	07c3      	lsls	r3, r0, #31
    5480:	d503      	bpl.n	548a <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5482:	2101      	movs	r1, #1
    5484:	4807      	ldr	r0, [pc, #28]	; (54a4 <bt_conn_init+0x60>)
    5486:	f7ff fc31 	bl	4cec <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    548a:	4620      	mov	r0, r4
    548c:	bd10      	pop	{r4, pc}
    548e:	bf00      	nop
    5490:	200003f8 	.word	0x200003f8
    5494:	20000350 	.word	0x20000350
    5498:	20000358 	.word	0x20000358
    549c:	200003a0 	.word	0x200003a0
    54a0:	20000364 	.word	0x20000364
    54a4:	20000360 	.word	0x20000360

000054a8 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    54a8:	4770      	bx	lr
	...

000054ac <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    54ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    54ae:	4a0b      	ldr	r2, [pc, #44]	; (54dc <l2cap_accept+0x30>)
    54b0:	6813      	ldr	r3, [r2, #0]
    54b2:	b92b      	cbnz	r3, 54c0 <l2cap_accept+0x14>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    54b4:	480a      	ldr	r0, [pc, #40]	; (54e0 <l2cap_accept+0x34>)
    54b6:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    54b8:	600a      	str	r2, [r1, #0]

		return 0;
    54ba:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    54bc:	b004      	add	sp, #16
    54be:	bd10      	pop	{r4, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    54c0:	4b08      	ldr	r3, [pc, #32]	; (54e4 <l2cap_accept+0x38>)
    54c2:	9302      	str	r3, [sp, #8]
    54c4:	9300      	str	r3, [sp, #0]
    54c6:	4b08      	ldr	r3, [pc, #32]	; (54e8 <l2cap_accept+0x3c>)
    54c8:	9001      	str	r0, [sp, #4]
    54ca:	681c      	ldr	r4, [r3, #0]
    54cc:	4807      	ldr	r0, [pc, #28]	; (54ec <l2cap_accept+0x40>)
    54ce:	4b08      	ldr	r3, [pc, #32]	; (54f0 <l2cap_accept+0x44>)
    54d0:	4a08      	ldr	r2, [pc, #32]	; (54f4 <l2cap_accept+0x48>)
    54d2:	4909      	ldr	r1, [pc, #36]	; (54f8 <l2cap_accept+0x4c>)
    54d4:	47a0      	blx	r4
	return -ENOMEM;
    54d6:	f06f 000b 	mvn.w	r0, #11
    54da:	e7ef      	b.n	54bc <l2cap_accept+0x10>
    54dc:	20000400 	.word	0x20000400
    54e0:	20003ba4 	.word	0x20003ba4
    54e4:	00015359 	.word	0x00015359
    54e8:	20003a5c 	.word	0x20003a5c
    54ec:	00017201 	.word	0x00017201
    54f0:	00017192 	.word	0x00017192
    54f4:	00016754 	.word	0x00016754
    54f8:	0001679c 	.word	0x0001679c

000054fc <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    54fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54fe:	4607      	mov	r7, r0
    5500:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5502:	2000      	movs	r0, #0
    5504:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    5506:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5508:	f7ff fe98 	bl	523c <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    550c:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    550e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5510:	3008      	adds	r0, #8
    5512:	f00e f913 	bl	1373c <net_buf_simple_add>
	hdr->code = code;
    5516:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    5518:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    551a:	8045      	strh	r5, [r0, #2]
}
    551c:	4620      	mov	r0, r4
    551e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005520 <l2cap_connected>:
    5520:	4770      	bx	lr
	...

00005524 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    5524:	2300      	movs	r3, #0
    5526:	6083      	str	r3, [r0, #8]
    5528:	4b05      	ldr	r3, [pc, #20]	; (5540 <bt_l2cap_le_fixed_chan_register+0x1c>)
    552a:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    552c:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    5530:	b911      	cbnz	r1, 5538 <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    5532:	605a      	str	r2, [r3, #4]
	list->head = node;
    5534:	601a      	str	r2, [r3, #0]
    5536:	4770      	bx	lr
	parent->next = child;
    5538:	600a      	str	r2, [r1, #0]
	list->tail = node;
    553a:	605a      	str	r2, [r3, #4]
    553c:	4770      	bx	lr
    553e:	bf00      	nop
    5540:	20000498 	.word	0x20000498

00005544 <bt_l2cap_chan_remove>:
{
    5544:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5546:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5548:	b113      	cbz	r3, 5550 <bt_l2cap_chan_remove+0xc>
    554a:	3b08      	subs	r3, #8
    554c:	2200      	movs	r2, #0
    554e:	b903      	cbnz	r3, 5552 <bt_l2cap_chan_remove+0xe>
    5550:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    5552:	428b      	cmp	r3, r1
    5554:	f103 0408 	add.w	r4, r3, #8
    5558:	d10f      	bne.n	557a <bt_l2cap_chan_remove+0x36>
    555a:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    555c:	b93a      	cbnz	r2, 556e <bt_l2cap_chan_remove+0x2a>
    555e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    5560:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    5562:	4294      	cmp	r4, r2
    5564:	d100      	bne.n	5568 <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    5566:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    5568:	2200      	movs	r2, #0
    556a:	609a      	str	r2, [r3, #8]
    556c:	bd10      	pop	{r4, pc}
    556e:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    5570:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    5572:	428c      	cmp	r4, r1
	list->tail = node;
    5574:	bf08      	it	eq
    5576:	63c2      	streq	r2, [r0, #60]	; 0x3c
    5578:	e7f6      	b.n	5568 <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    557a:	4622      	mov	r2, r4
    557c:	2c00      	cmp	r4, #0
    557e:	d0e7      	beq.n	5550 <bt_l2cap_chan_remove+0xc>
	return node->next;
    5580:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5582:	2b00      	cmp	r3, #0
    5584:	d0e4      	beq.n	5550 <bt_l2cap_chan_remove+0xc>
    5586:	3b08      	subs	r3, #8
    5588:	e7e1      	b.n	554e <bt_l2cap_chan_remove+0xa>

0000558a <bt_l2cap_chan_del>:
	if (!chan->conn) {
    558a:	6803      	ldr	r3, [r0, #0]
{
    558c:	b510      	push	{r4, lr}
    558e:	4604      	mov	r4, r0
	if (!chan->conn) {
    5590:	b12b      	cbz	r3, 559e <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    5592:	6843      	ldr	r3, [r0, #4]
    5594:	685b      	ldr	r3, [r3, #4]
    5596:	b103      	cbz	r3, 559a <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    5598:	4798      	blx	r3
	chan->conn = NULL;
    559a:	2300      	movs	r3, #0
    559c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    559e:	68e3      	ldr	r3, [r4, #12]
    55a0:	b11b      	cbz	r3, 55aa <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    55a2:	4620      	mov	r0, r4
}
    55a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    55a8:	4718      	bx	r3
    55aa:	bd10      	pop	{r4, pc}

000055ac <l2cap_rtx_timeout>:
{
    55ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_ERR("chan %p timeout", chan);
    55ae:	4b0c      	ldr	r3, [pc, #48]	; (55e0 <l2cap_rtx_timeout+0x34>)
    55b0:	9302      	str	r3, [sp, #8]
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    55b2:	f1a0 0410 	sub.w	r4, r0, #16
	BT_ERR("chan %p timeout", chan);
    55b6:	e88d 0018 	stmia.w	sp, {r3, r4}
    55ba:	4b0a      	ldr	r3, [pc, #40]	; (55e4 <l2cap_rtx_timeout+0x38>)
    55bc:	4a0a      	ldr	r2, [pc, #40]	; (55e8 <l2cap_rtx_timeout+0x3c>)
    55be:	681e      	ldr	r6, [r3, #0]
    55c0:	490a      	ldr	r1, [pc, #40]	; (55ec <l2cap_rtx_timeout+0x40>)
    55c2:	4b0b      	ldr	r3, [pc, #44]	; (55f0 <l2cap_rtx_timeout+0x44>)
{
    55c4:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    55c6:	480b      	ldr	r0, [pc, #44]	; (55f4 <l2cap_rtx_timeout+0x48>)
    55c8:	47b0      	blx	r6
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    55ca:	f855 0c10 	ldr.w	r0, [r5, #-16]
    55ce:	4621      	mov	r1, r4
    55d0:	f7ff ffb8 	bl	5544 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    55d4:	4620      	mov	r0, r4
}
    55d6:	b004      	add	sp, #16
    55d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_chan_del(&chan->chan);
    55dc:	f7ff bfd5 	b.w	558a <bt_l2cap_chan_del>
    55e0:	00015359 	.word	0x00015359
    55e4:	20003a5c 	.word	0x20003a5c
    55e8:	00016754 	.word	0x00016754
    55ec:	0001679c 	.word	0x0001679c
    55f0:	0001713c 	.word	0x0001713c
    55f4:	00017355 	.word	0x00017355

000055f8 <bt_l2cap_connected>:
{
    55f8:	4b1a      	ldr	r3, [pc, #104]	; (5664 <bt_l2cap_connected+0x6c>)
    55fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    55fe:	681c      	ldr	r4, [r3, #0]
    5600:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5602:	b12c      	cbz	r4, 5610 <bt_l2cap_connected+0x18>
	parent->next = child;
    5604:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    5606:	f8df 8060 	ldr.w	r8, [pc, #96]	; 5668 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    560a:	3c08      	subs	r4, #8
    560c:	46b9      	mov	r9, r7
    560e:	b914      	cbnz	r4, 5616 <bt_l2cap_connected+0x1e>
}
    5610:	b003      	add	sp, #12
    5612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    5616:	6863      	ldr	r3, [r4, #4]
    5618:	a901      	add	r1, sp, #4
    561a:	4630      	mov	r0, r6
    561c:	4798      	blx	r3
    561e:	2800      	cmp	r0, #0
    5620:	db18      	blt.n	5654 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    5622:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    5624:	8823      	ldrh	r3, [r4, #0]
    5626:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    5628:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    562c:	4641      	mov	r1, r8
    562e:	f105 0010 	add.w	r0, r5, #16
    5632:	f00f fbc1 	bl	14db8 <k_delayed_work_init>
    5636:	60af      	str	r7, [r5, #8]
    5638:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	sys_slist_append(&conn->channels, &chan->node);
    563a:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    563e:	b972      	cbnz	r2, 565e <bt_l2cap_connected+0x66>
	list->tail = node;
    5640:	63f3      	str	r3, [r6, #60]	; 0x3c
	list->head = node;
    5642:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    5644:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    5646:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    5648:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    564a:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    564e:	681b      	ldr	r3, [r3, #0]
    5650:	b103      	cbz	r3, 5654 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    5652:	4798      	blx	r3
	return node->next;
    5654:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5656:	2c00      	cmp	r4, #0
    5658:	d0da      	beq.n	5610 <bt_l2cap_connected+0x18>
    565a:	3c08      	subs	r4, #8
    565c:	e7d7      	b.n	560e <bt_l2cap_connected+0x16>
	parent->next = child;
    565e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5660:	63f3      	str	r3, [r6, #60]	; 0x3c
    5662:	e7ef      	b.n	5644 <bt_l2cap_connected+0x4c>
    5664:	20000498 	.word	0x20000498
    5668:	000055ad 	.word	0x000055ad

0000566c <bt_l2cap_disconnected>:
{
    566c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    566e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5670:	b1a3      	cbz	r3, 569c <bt_l2cap_disconnected+0x30>
    5672:	f1b3 0008 	subs.w	r0, r3, #8
    5676:	d10a      	bne.n	568e <bt_l2cap_disconnected+0x22>
    5678:	bd10      	pop	{r4, pc}
    567a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    567c:	f7ff ff85 	bl	558a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5680:	b164      	cbz	r4, 569c <bt_l2cap_disconnected+0x30>
	return node->next;
    5682:	68a3      	ldr	r3, [r4, #8]
    5684:	b103      	cbz	r3, 5688 <bt_l2cap_disconnected+0x1c>
    5686:	3b08      	subs	r3, #8
{
    5688:	4620      	mov	r0, r4
    568a:	461c      	mov	r4, r3
    568c:	e7f6      	b.n	567c <bt_l2cap_disconnected+0x10>
    568e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5690:	2c00      	cmp	r4, #0
    5692:	d1f2      	bne.n	567a <bt_l2cap_disconnected+0xe>
}
    5694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    5698:	f7ff bf77 	b.w	558a <bt_l2cap_chan_del>
    569c:	bd10      	pop	{r4, pc}

0000569e <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    569e:	3104      	adds	r1, #4
    56a0:	f7ff bdcc 	b.w	523c <bt_conn_create_pdu>

000056a4 <bt_l2cap_send_cb>:
{
    56a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56a6:	4614      	mov	r4, r2
    56a8:	4605      	mov	r5, r0
    56aa:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    56ac:	f102 0008 	add.w	r0, r2, #8
    56b0:	2104      	movs	r1, #4
{
    56b2:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    56b4:	f00e f859 	bl	1376a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    56b8:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    56ba:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    56bc:	3904      	subs	r1, #4
    56be:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    56c0:	4632      	mov	r2, r6
    56c2:	4621      	mov	r1, r4
    56c4:	4628      	mov	r0, r5
}
    56c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    56ca:	f7ff b82d 	b.w	4728 <bt_conn_send_cb>
	...

000056d0 <l2cap_recv>:
{
    56d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    56d2:	898b      	ldrh	r3, [r1, #12]
    56d4:	2b03      	cmp	r3, #3
{
    56d6:	b087      	sub	sp, #28
    56d8:	4607      	mov	r7, r0
    56da:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    56dc:	d80a      	bhi.n	56f4 <l2cap_recv+0x24>
		BT_ERR("Too small L2CAP signaling PDU");
    56de:	4b5e      	ldr	r3, [pc, #376]	; (5858 <l2cap_recv+0x188>)
    56e0:	9301      	str	r3, [sp, #4]
    56e2:	9300      	str	r3, [sp, #0]
    56e4:	4b5d      	ldr	r3, [pc, #372]	; (585c <l2cap_recv+0x18c>)
    56e6:	4a5e      	ldr	r2, [pc, #376]	; (5860 <l2cap_recv+0x190>)
    56e8:	681c      	ldr	r4, [r3, #0]
    56ea:	495e      	ldr	r1, [pc, #376]	; (5864 <l2cap_recv+0x194>)
    56ec:	4b5e      	ldr	r3, [pc, #376]	; (5868 <l2cap_recv+0x198>)
    56ee:	485f      	ldr	r0, [pc, #380]	; (586c <l2cap_recv+0x19c>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    56f0:	47a0      	blx	r4
		return;
    56f2:	e015      	b.n	5720 <l2cap_recv+0x50>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    56f4:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    56f6:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    56f8:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    56fc:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    56fe:	f00e f83c 	bl	1377a <net_buf_simple_pull>
	if (buf->len != len) {
    5702:	89aa      	ldrh	r2, [r5, #12]
    5704:	4296      	cmp	r6, r2
    5706:	d00d      	beq.n	5724 <l2cap_recv+0x54>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    5708:	4b53      	ldr	r3, [pc, #332]	; (5858 <l2cap_recv+0x188>)
    570a:	9303      	str	r3, [sp, #12]
    570c:	9300      	str	r3, [sp, #0]
    570e:	4b53      	ldr	r3, [pc, #332]	; (585c <l2cap_recv+0x18c>)
    5710:	9201      	str	r2, [sp, #4]
    5712:	9602      	str	r6, [sp, #8]
    5714:	681c      	ldr	r4, [r3, #0]
    5716:	4a52      	ldr	r2, [pc, #328]	; (5860 <l2cap_recv+0x190>)
    5718:	4b53      	ldr	r3, [pc, #332]	; (5868 <l2cap_recv+0x198>)
    571a:	4952      	ldr	r1, [pc, #328]	; (5864 <l2cap_recv+0x194>)
    571c:	4854      	ldr	r0, [pc, #336]	; (5870 <l2cap_recv+0x1a0>)
    571e:	47a0      	blx	r4
}
    5720:	b007      	add	sp, #28
    5722:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    5724:	7861      	ldrb	r1, [r4, #1]
    5726:	b949      	cbnz	r1, 573c <l2cap_recv+0x6c>
		BT_ERR("Invalid ident value in L2CAP PDU");
    5728:	4b4b      	ldr	r3, [pc, #300]	; (5858 <l2cap_recv+0x188>)
    572a:	9301      	str	r3, [sp, #4]
    572c:	9300      	str	r3, [sp, #0]
    572e:	4b4b      	ldr	r3, [pc, #300]	; (585c <l2cap_recv+0x18c>)
    5730:	4a4b      	ldr	r2, [pc, #300]	; (5860 <l2cap_recv+0x190>)
    5732:	681c      	ldr	r4, [r3, #0]
    5734:	494b      	ldr	r1, [pc, #300]	; (5864 <l2cap_recv+0x194>)
    5736:	4b4c      	ldr	r3, [pc, #304]	; (5868 <l2cap_recv+0x198>)
    5738:	484e      	ldr	r0, [pc, #312]	; (5874 <l2cap_recv+0x1a4>)
    573a:	e7d9      	b.n	56f0 <l2cap_recv+0x20>
	switch (hdr->code) {
    573c:	7823      	ldrb	r3, [r4, #0]
    573e:	2b12      	cmp	r3, #18
    5740:	d02c      	beq.n	579c <l2cap_recv+0xcc>
    5742:	2b13      	cmp	r3, #19
    5744:	d01e      	beq.n	5784 <l2cap_recv+0xb4>
    5746:	2b01      	cmp	r3, #1
    5748:	d0ea      	beq.n	5720 <l2cap_recv+0x50>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    574a:	4a43      	ldr	r2, [pc, #268]	; (5858 <l2cap_recv+0x188>)
    574c:	9202      	str	r2, [sp, #8]
    574e:	e88d 000c 	stmia.w	sp, {r2, r3}
    5752:	4b42      	ldr	r3, [pc, #264]	; (585c <l2cap_recv+0x18c>)
    5754:	4a48      	ldr	r2, [pc, #288]	; (5878 <l2cap_recv+0x1a8>)
    5756:	681d      	ldr	r5, [r3, #0]
    5758:	4942      	ldr	r1, [pc, #264]	; (5864 <l2cap_recv+0x194>)
    575a:	4b43      	ldr	r3, [pc, #268]	; (5868 <l2cap_recv+0x198>)
    575c:	4847      	ldr	r0, [pc, #284]	; (587c <l2cap_recv+0x1ac>)
    575e:	47a8      	blx	r5
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5760:	2202      	movs	r2, #2
    5762:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    5764:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5766:	2001      	movs	r0, #1
    5768:	f7ff fec8 	bl	54fc <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    576c:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    576e:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    5770:	3008      	adds	r0, #8
    5772:	f00d ffe3 	bl	1373c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    5776:	2300      	movs	r3, #0
    5778:	7003      	strb	r3, [r0, #0]
    577a:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    577c:	4622      	mov	r2, r4
    577e:	2105      	movs	r1, #5
    5780:	4628      	mov	r0, r5
    5782:	e029      	b.n	57d8 <l2cap_recv+0x108>
	if (buf->len < sizeof(*rsp)) {
    5784:	2e01      	cmp	r6, #1
    5786:	d8cb      	bhi.n	5720 <l2cap_recv+0x50>
		BT_ERR("Too small LE conn param rsp");
    5788:	4b33      	ldr	r3, [pc, #204]	; (5858 <l2cap_recv+0x188>)
    578a:	9301      	str	r3, [sp, #4]
    578c:	9300      	str	r3, [sp, #0]
    578e:	4b33      	ldr	r3, [pc, #204]	; (585c <l2cap_recv+0x18c>)
    5790:	4a33      	ldr	r2, [pc, #204]	; (5860 <l2cap_recv+0x190>)
    5792:	681c      	ldr	r4, [r3, #0]
    5794:	4933      	ldr	r1, [pc, #204]	; (5864 <l2cap_recv+0x194>)
    5796:	4b3a      	ldr	r3, [pc, #232]	; (5880 <l2cap_recv+0x1b0>)
    5798:	483a      	ldr	r0, [pc, #232]	; (5884 <l2cap_recv+0x1b4>)
    579a:	e7a9      	b.n	56f0 <l2cap_recv+0x20>
	if (buf->len < sizeof(*req)) {
    579c:	2e07      	cmp	r6, #7
    579e:	d809      	bhi.n	57b4 <l2cap_recv+0xe4>
		BT_ERR("Too small LE conn update param req");
    57a0:	4b2d      	ldr	r3, [pc, #180]	; (5858 <l2cap_recv+0x188>)
    57a2:	9301      	str	r3, [sp, #4]
    57a4:	9300      	str	r3, [sp, #0]
    57a6:	4b2d      	ldr	r3, [pc, #180]	; (585c <l2cap_recv+0x18c>)
    57a8:	4a2d      	ldr	r2, [pc, #180]	; (5860 <l2cap_recv+0x190>)
    57aa:	681c      	ldr	r4, [r3, #0]
    57ac:	492d      	ldr	r1, [pc, #180]	; (5864 <l2cap_recv+0x194>)
    57ae:	4b36      	ldr	r3, [pc, #216]	; (5888 <l2cap_recv+0x1b8>)
    57b0:	4836      	ldr	r0, [pc, #216]	; (588c <l2cap_recv+0x1bc>)
    57b2:	e79d      	b.n	56f0 <l2cap_recv+0x20>
    57b4:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    57b6:	78e6      	ldrb	r6, [r4, #3]
    57b8:	b18e      	cbz	r6, 57de <l2cap_recv+0x10e>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    57ba:	2202      	movs	r2, #2
    57bc:	2001      	movs	r0, #1
    57be:	f7ff fe9d 	bl	54fc <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    57c2:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    57c4:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    57c6:	3008      	adds	r0, #8
    57c8:	f00d ffb8 	bl	1373c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    57cc:	2300      	movs	r3, #0
    57ce:	7003      	strb	r3, [r0, #0]
    57d0:	7043      	strb	r3, [r0, #1]
    57d2:	462a      	mov	r2, r5
    57d4:	2105      	movs	r1, #5
    57d6:	4620      	mov	r0, r4
    57d8:	f7ff ff64 	bl	56a4 <bt_l2cap_send_cb>
    57dc:	e7a0      	b.n	5720 <l2cap_recv+0x50>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    57de:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    57e0:	7858      	ldrb	r0, [r3, #1]
    57e2:	781a      	ldrb	r2, [r3, #0]
    57e4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    57e8:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    57ec:	78d8      	ldrb	r0, [r3, #3]
    57ee:	789a      	ldrb	r2, [r3, #2]
    57f0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    57f4:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    57f8:	7958      	ldrb	r0, [r3, #5]
    57fa:	791a      	ldrb	r2, [r3, #4]
    57fc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    5800:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    5804:	799a      	ldrb	r2, [r3, #6]
    5806:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5808:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    580a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    580e:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    5810:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5814:	f7ff fe72 	bl	54fc <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    5818:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    581a:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    581c:	4620      	mov	r0, r4
    581e:	f7fe fe51 	bl	44c4 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    5822:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    5824:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    5826:	f107 0008 	add.w	r0, r7, #8
    582a:	f00d ff87 	bl	1373c <net_buf_simple_add>
	if (accepted) {
    582e:	b17d      	cbz	r5, 5850 <l2cap_recv+0x180>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    5830:	7006      	strb	r6, [r0, #0]
    5832:	7046      	strb	r6, [r0, #1]
    5834:	2300      	movs	r3, #0
    5836:	463a      	mov	r2, r7
    5838:	2105      	movs	r1, #5
    583a:	4620      	mov	r0, r4
    583c:	f7ff ff32 	bl	56a4 <bt_l2cap_send_cb>
	if (accepted) {
    5840:	2d00      	cmp	r5, #0
    5842:	f43f af6d 	beq.w	5720 <l2cap_recv+0x50>
		bt_conn_le_conn_update(conn, &param);
    5846:	a904      	add	r1, sp, #16
    5848:	4620      	mov	r0, r4
    584a:	f7ff fc50 	bl	50ee <bt_conn_le_conn_update>
    584e:	e767      	b.n	5720 <l2cap_recv+0x50>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    5850:	2301      	movs	r3, #1
    5852:	7003      	strb	r3, [r0, #0]
    5854:	7045      	strb	r5, [r0, #1]
    5856:	e7ed      	b.n	5834 <l2cap_recv+0x164>
    5858:	00015359 	.word	0x00015359
    585c:	20003a5c 	.word	0x20003a5c
    5860:	00016754 	.word	0x00016754
    5864:	0001679c 	.word	0x0001679c
    5868:	00017179 	.word	0x00017179
    586c:	00017238 	.word	0x00017238
    5870:	00017266 	.word	0x00017266
    5874:	00017297 	.word	0x00017297
    5878:	000167d7 	.word	0x000167d7
    587c:	00017327 	.word	0x00017327
    5880:	0001714e 	.word	0x0001714e
    5884:	000172c8 	.word	0x000172c8
    5888:	00017160 	.word	0x00017160
    588c:	000172f4 	.word	0x000172f4

00005890 <bt_l2cap_le_lookup_tx_cid>:
{
    5890:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5892:	b100      	cbz	r0, 5896 <bt_l2cap_le_lookup_tx_cid+0x6>
    5894:	3808      	subs	r0, #8
    5896:	b900      	cbnz	r0, 589a <bt_l2cap_le_lookup_tx_cid+0xa>
}
    5898:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    589a:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    589e:	428b      	cmp	r3, r1
    58a0:	d0fa      	beq.n	5898 <bt_l2cap_le_lookup_tx_cid+0x8>
    58a2:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    58a4:	2000      	movs	r0, #0
    58a6:	2b00      	cmp	r3, #0
    58a8:	d0f6      	beq.n	5898 <bt_l2cap_le_lookup_tx_cid+0x8>
    58aa:	f1a3 0008 	sub.w	r0, r3, #8
    58ae:	e7f2      	b.n	5896 <bt_l2cap_le_lookup_tx_cid+0x6>

000058b0 <bt_l2cap_le_lookup_rx_cid>:
{
    58b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    58b2:	b100      	cbz	r0, 58b6 <bt_l2cap_le_lookup_rx_cid+0x6>
    58b4:	3808      	subs	r0, #8
    58b6:	b900      	cbnz	r0, 58ba <bt_l2cap_le_lookup_rx_cid+0xa>
}
    58b8:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    58ba:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    58bc:	428b      	cmp	r3, r1
    58be:	d0fb      	beq.n	58b8 <bt_l2cap_le_lookup_rx_cid+0x8>
    58c0:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    58c2:	2000      	movs	r0, #0
    58c4:	2b00      	cmp	r3, #0
    58c6:	d0f7      	beq.n	58b8 <bt_l2cap_le_lookup_rx_cid+0x8>
    58c8:	f1a3 0008 	sub.w	r0, r3, #8
    58cc:	e7f3      	b.n	58b6 <bt_l2cap_le_lookup_rx_cid+0x6>
	...

000058d0 <bt_l2cap_recv>:
{
    58d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    58d2:	898b      	ldrh	r3, [r1, #12]
    58d4:	2b03      	cmp	r3, #3
{
    58d6:	4606      	mov	r6, r0
    58d8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    58da:	d80f      	bhi.n	58fc <bt_l2cap_recv+0x2c>
		BT_ERR("Too small L2CAP PDU received");
    58dc:	4b16      	ldr	r3, [pc, #88]	; (5938 <bt_l2cap_recv+0x68>)
    58de:	9301      	str	r3, [sp, #4]
    58e0:	9300      	str	r3, [sp, #0]
    58e2:	4b16      	ldr	r3, [pc, #88]	; (593c <bt_l2cap_recv+0x6c>)
    58e4:	4a16      	ldr	r2, [pc, #88]	; (5940 <bt_l2cap_recv+0x70>)
    58e6:	681d      	ldr	r5, [r3, #0]
    58e8:	4916      	ldr	r1, [pc, #88]	; (5944 <bt_l2cap_recv+0x74>)
    58ea:	4b17      	ldr	r3, [pc, #92]	; (5948 <bt_l2cap_recv+0x78>)
    58ec:	4817      	ldr	r0, [pc, #92]	; (594c <bt_l2cap_recv+0x7c>)
    58ee:	47a8      	blx	r5
	net_buf_unref(buf);
    58f0:	4620      	mov	r0, r4
}
    58f2:	b004      	add	sp, #16
    58f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    58f8:	f00d beee 	b.w	136d8 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    58fc:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    58fe:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    5900:	f850 3f08 	ldr.w	r3, [r0, #8]!
    5904:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    5906:	f00d ff38 	bl	1377a <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    590a:	4629      	mov	r1, r5
    590c:	4630      	mov	r0, r6
    590e:	f7ff ffcf 	bl	58b0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    5912:	b958      	cbnz	r0, 592c <bt_l2cap_recv+0x5c>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    5914:	4b08      	ldr	r3, [pc, #32]	; (5938 <bt_l2cap_recv+0x68>)
    5916:	9302      	str	r3, [sp, #8]
    5918:	e88d 0028 	stmia.w	sp, {r3, r5}
    591c:	4b07      	ldr	r3, [pc, #28]	; (593c <bt_l2cap_recv+0x6c>)
    591e:	4a0c      	ldr	r2, [pc, #48]	; (5950 <bt_l2cap_recv+0x80>)
    5920:	681d      	ldr	r5, [r3, #0]
    5922:	4908      	ldr	r1, [pc, #32]	; (5944 <bt_l2cap_recv+0x74>)
    5924:	4b08      	ldr	r3, [pc, #32]	; (5948 <bt_l2cap_recv+0x78>)
    5926:	480b      	ldr	r0, [pc, #44]	; (5954 <bt_l2cap_recv+0x84>)
    5928:	47a8      	blx	r5
    592a:	e7e1      	b.n	58f0 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    592c:	6843      	ldr	r3, [r0, #4]
    592e:	4621      	mov	r1, r4
    5930:	691b      	ldr	r3, [r3, #16]
    5932:	4798      	blx	r3
    5934:	e7dc      	b.n	58f0 <bt_l2cap_recv+0x20>
    5936:	bf00      	nop
    5938:	00015359 	.word	0x00015359
    593c:	20003a5c 	.word	0x20003a5c
    5940:	00016754 	.word	0x00016754
    5944:	0001679c 	.word	0x0001679c
    5948:	00017184 	.word	0x00017184
    594c:	0001719f 	.word	0x0001719f
    5950:	000167d7 	.word	0x000167d7
    5954:	000171cc 	.word	0x000171cc

00005958 <bt_l2cap_update_conn_param>:
{
    5958:	b570      	push	{r4, r5, r6, lr}
	ident++;
    595a:	4b12      	ldr	r3, [pc, #72]	; (59a4 <bt_l2cap_update_conn_param+0x4c>)
    595c:	781a      	ldrb	r2, [r3, #0]
    595e:	3201      	adds	r2, #1
	if (!ident) {
    5960:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    5964:	bf08      	it	eq
    5966:	2201      	moveq	r2, #1
    5968:	701a      	strb	r2, [r3, #0]
{
    596a:	460c      	mov	r4, r1
    596c:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    596e:	7819      	ldrb	r1, [r3, #0]
    5970:	2208      	movs	r2, #8
    5972:	2012      	movs	r0, #18
    5974:	f7ff fdc2 	bl	54fc <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    5978:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    597a:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    597c:	4408      	add	r0, r1
    597e:	f00d fedd 	bl	1373c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    5982:	8823      	ldrh	r3, [r4, #0]
    5984:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    5986:	8863      	ldrh	r3, [r4, #2]
    5988:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    598a:	88a3      	ldrh	r3, [r4, #4]
    598c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    598e:	88e3      	ldrh	r3, [r4, #6]
    5990:	80c3      	strh	r3, [r0, #6]
    5992:	4632      	mov	r2, r6
    5994:	4628      	mov	r0, r5
    5996:	2300      	movs	r3, #0
    5998:	2105      	movs	r1, #5
    599a:	f7ff fe83 	bl	56a4 <bt_l2cap_send_cb>
}
    599e:	2000      	movs	r0, #0
    59a0:	bd70      	pop	{r4, r5, r6, pc}
    59a2:	bf00      	nop
    59a4:	20000494 	.word	0x20000494

000059a8 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    59a8:	4801      	ldr	r0, [pc, #4]	; (59b0 <bt_l2cap_init+0x8>)
    59aa:	f7ff bdbb 	b.w	5524 <bt_l2cap_le_fixed_chan_register>
    59ae:	bf00      	nop
    59b0:	20003b98 	.word	0x20003b98

000059b4 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    59b4:	2006      	movs	r0, #6
    59b6:	4770      	bx	lr

000059b8 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    59b8:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    59ba:	4a0a      	ldr	r2, [pc, #40]	; (59e4 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    59bc:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    59be:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    59c2:	4284      	cmp	r4, r0
    59c4:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    59c8:	d102      	bne.n	59d0 <att_op_get_type+0x18>
			return handlers[i].type;
    59ca:	440a      	add	r2, r1
    59cc:	7890      	ldrb	r0, [r2, #2]
    59ce:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    59d0:	3301      	adds	r3, #1
    59d2:	2b1b      	cmp	r3, #27
    59d4:	d1f3      	bne.n	59be <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    59d6:	f010 0f40 	tst.w	r0, #64	; 0x40
    59da:	bf14      	ite	ne
    59dc:	2000      	movne	r0, #0
    59de:	2006      	moveq	r0, #6
}
    59e0:	bd10      	pop	{r4, pc}
    59e2:	bf00      	nop
    59e4:	0001764c 	.word	0x0001764c

000059e8 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    59e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    59ea:	4d11      	ldr	r5, [pc, #68]	; (5a30 <bt_att_accept+0x48>)
    59ec:	682c      	ldr	r4, [r5, #0]
{
    59ee:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    59f0:	b984      	cbnz	r4, 5a14 <bt_att_accept+0x2c>
			continue;
		}

		memset(att, 0, sizeof(*att));
    59f2:	22e4      	movs	r2, #228	; 0xe4
    59f4:	4621      	mov	r1, r4
    59f6:	4628      	mov	r0, r5
    59f8:	f7fc f952 	bl	1ca0 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    59fc:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    59fe:	4b0d      	ldr	r3, [pc, #52]	; (5a34 <bt_att_accept+0x4c>)
    5a00:	606b      	str	r3, [r5, #4]
    5a02:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    5a06:	4611      	mov	r1, r2
    5a08:	f00e fee6 	bl	147d8 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    5a0c:	6035      	str	r5, [r6, #0]

		return 0;
    5a0e:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    5a10:	b004      	add	sp, #16
    5a12:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    5a14:	4b08      	ldr	r3, [pc, #32]	; (5a38 <bt_att_accept+0x50>)
    5a16:	9302      	str	r3, [sp, #8]
    5a18:	9300      	str	r3, [sp, #0]
    5a1a:	4b08      	ldr	r3, [pc, #32]	; (5a3c <bt_att_accept+0x54>)
    5a1c:	9001      	str	r0, [sp, #4]
    5a1e:	681c      	ldr	r4, [r3, #0]
    5a20:	4807      	ldr	r0, [pc, #28]	; (5a40 <bt_att_accept+0x58>)
    5a22:	4b08      	ldr	r3, [pc, #32]	; (5a44 <bt_att_accept+0x5c>)
    5a24:	4a08      	ldr	r2, [pc, #32]	; (5a48 <bt_att_accept+0x60>)
    5a26:	4909      	ldr	r1, [pc, #36]	; (5a4c <bt_att_accept+0x64>)
    5a28:	47a0      	blx	r4
	return -ENOMEM;
    5a2a:	f06f 000b 	mvn.w	r0, #11
    5a2e:	e7ef      	b.n	5a10 <bt_att_accept+0x28>
    5a30:	200004a0 	.word	0x200004a0
    5a34:	20003bc4 	.word	0x20003bc4
    5a38:	00015359 	.word	0x00015359
    5a3c:	20003a5c 	.word	0x20003a5c
    5a40:	00017504 	.word	0x00017504
    5a44:	000173f4 	.word	0x000173f4
    5a48:	00016754 	.word	0x00016754
    5a4c:	0001679c 	.word	0x0001679c

00005a50 <att_req_destroy>:
{
    5a50:	b510      	push	{r4, lr}
    5a52:	4604      	mov	r4, r0
	if (req->buf) {
    5a54:	6900      	ldr	r0, [r0, #16]
    5a56:	b108      	cbz	r0, 5a5c <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    5a58:	f00d fe3e 	bl	136d8 <net_buf_unref>
	if (req->destroy) {
    5a5c:	68a3      	ldr	r3, [r4, #8]
    5a5e:	b10b      	cbz	r3, 5a64 <att_req_destroy+0x14>
		req->destroy(req);
    5a60:	4620      	mov	r0, r4
    5a62:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    5a64:	4620      	mov	r0, r4
    5a66:	2214      	movs	r2, #20
    5a68:	2100      	movs	r1, #0
}
    5a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    5a6e:	f7fc b917 	b.w	1ca0 <memset>

00005a72 <att_notify>:
{
    5a72:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    5a74:	f101 0008 	add.w	r0, r1, #8
    5a78:	f00d fe8f 	bl	1379a <net_buf_simple_pull_le16>
}
    5a7c:	2000      	movs	r0, #0
    5a7e:	bd08      	pop	{r3, pc}

00005a80 <read_group_cb>:
{
    5a80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5a84:	680d      	ldr	r5, [r1, #0]
{
    5a86:	4606      	mov	r6, r0
    5a88:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5a8a:	f04f 0800 	mov.w	r8, #0
    5a8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5a92:	a902      	add	r1, sp, #8
    5a94:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    5a96:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5a98:	f88d 8008 	strb.w	r8, [sp, #8]
    5a9c:	f8ad 300a 	strh.w	r3, [sp, #10]
    5aa0:	f7fc fa50 	bl	1f44 <bt_uuid_cmp>
    5aa4:	b198      	cbz	r0, 5ace <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5aa6:	f642 0301 	movw	r3, #10241	; 0x2801
    5aaa:	a903      	add	r1, sp, #12
    5aac:	6830      	ldr	r0, [r6, #0]
    5aae:	f88d 800c 	strb.w	r8, [sp, #12]
    5ab2:	f8ad 300e 	strh.w	r3, [sp, #14]
    5ab6:	f7fc fa45 	bl	1f44 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5aba:	b140      	cbz	r0, 5ace <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    5abc:	6923      	ldr	r3, [r4, #16]
    5abe:	b123      	cbz	r3, 5aca <read_group_cb+0x4a>
    5ac0:	8a32      	ldrh	r2, [r6, #16]
    5ac2:	8859      	ldrh	r1, [r3, #2]
    5ac4:	4291      	cmp	r1, r2
    5ac6:	d200      	bcs.n	5aca <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5ac8:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    5aca:	2001      	movs	r0, #1
    5acc:	e012      	b.n	5af4 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5ace:	6861      	ldr	r1, [r4, #4]
    5ad0:	6830      	ldr	r0, [r6, #0]
    5ad2:	f7fc fa37 	bl	1f44 <bt_uuid_cmp>
    5ad6:	b110      	cbz	r0, 5ade <read_group_cb+0x5e>
		data->group = NULL;
    5ad8:	2300      	movs	r3, #0
    5ada:	6123      	str	r3, [r4, #16]
    5adc:	e7f5      	b.n	5aca <read_group_cb+0x4a>
	if (data->rsp->len &&
    5ade:	68e3      	ldr	r3, [r4, #12]
    5ae0:	68a0      	ldr	r0, [r4, #8]
    5ae2:	781a      	ldrb	r2, [r3, #0]
    5ae4:	b14a      	cbz	r2, 5afa <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    5ae6:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    5aea:	8981      	ldrh	r1, [r0, #12]
    5aec:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    5aee:	4293      	cmp	r3, r2
    5af0:	da03      	bge.n	5afa <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    5af2:	2000      	movs	r0, #0
}
    5af4:	b004      	add	sp, #16
    5af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5afa:	2104      	movs	r1, #4
    5afc:	3008      	adds	r0, #8
    5afe:	f00d fe1d 	bl	1373c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5b02:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5b04:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5b06:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5b08:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5b0a:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5b0c:	898a      	ldrh	r2, [r1, #12]
    5b0e:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    5b12:	6889      	ldr	r1, [r1, #8]
    5b14:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5b18:	1a9b      	subs	r3, r3, r2
    5b1a:	2500      	movs	r5, #0
    5b1c:	440a      	add	r2, r1
    5b1e:	9500      	str	r5, [sp, #0]
    5b20:	4631      	mov	r1, r6
    5b22:	b29b      	uxth	r3, r3
    5b24:	4638      	mov	r0, r7
    5b26:	47c0      	blx	r8
	if (read < 0) {
    5b28:	1e01      	subs	r1, r0, #0
    5b2a:	dbe2      	blt.n	5af2 <read_group_cb+0x72>
	if (!data->rsp->len) {
    5b2c:	68e0      	ldr	r0, [r4, #12]
    5b2e:	7802      	ldrb	r2, [r0, #0]
    5b30:	1d0b      	adds	r3, r1, #4
    5b32:	b92a      	cbnz	r2, 5b40 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    5b34:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    5b36:	68a0      	ldr	r0, [r4, #8]
    5b38:	3008      	adds	r0, #8
    5b3a:	f00d fdff 	bl	1373c <net_buf_simple_add>
    5b3e:	e7c4      	b.n	5aca <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    5b40:	429a      	cmp	r2, r3
    5b42:	d0f8      	beq.n	5b36 <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    5b44:	68a2      	ldr	r2, [r4, #8]
    5b46:	8993      	ldrh	r3, [r2, #12]
    5b48:	3b04      	subs	r3, #4
    5b4a:	8193      	strh	r3, [r2, #12]
    5b4c:	e7d1      	b.n	5af2 <read_group_cb+0x72>

00005b4e <find_info_cb>:
	if (!data->rsp) {
    5b4e:	688b      	ldr	r3, [r1, #8]
{
    5b50:	b570      	push	{r4, r5, r6, lr}
    5b52:	4605      	mov	r5, r0
    5b54:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    5b56:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    5b58:	b963      	cbnz	r3, 5b74 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5b5a:	6848      	ldr	r0, [r1, #4]
    5b5c:	2101      	movs	r1, #1
    5b5e:	3008      	adds	r0, #8
    5b60:	f00d fdec 	bl	1373c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5b64:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5b66:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5b68:	781b      	ldrb	r3, [r3, #0]
    5b6a:	2b00      	cmp	r3, #0
    5b6c:	bf0c      	ite	eq
    5b6e:	2301      	moveq	r3, #1
    5b70:	2302      	movne	r3, #2
    5b72:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    5b74:	68a3      	ldr	r3, [r4, #8]
    5b76:	781b      	ldrb	r3, [r3, #0]
    5b78:	2b01      	cmp	r3, #1
    5b7a:	d003      	beq.n	5b84 <find_info_cb+0x36>
    5b7c:	2b02      	cmp	r3, #2
    5b7e:	d01a      	beq.n	5bb6 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    5b80:	2000      	movs	r0, #0
}
    5b82:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    5b84:	682b      	ldr	r3, [r5, #0]
    5b86:	781b      	ldrb	r3, [r3, #0]
    5b88:	2b00      	cmp	r3, #0
    5b8a:	d1f9      	bne.n	5b80 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    5b8c:	6860      	ldr	r0, [r4, #4]
    5b8e:	2104      	movs	r1, #4
    5b90:	3008      	adds	r0, #8
    5b92:	f00d fdd3 	bl	1373c <net_buf_simple_add>
    5b96:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    5b98:	8a2b      	ldrh	r3, [r5, #16]
    5b9a:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    5b9c:	682b      	ldr	r3, [r5, #0]
    5b9e:	885b      	ldrh	r3, [r3, #2]
    5ba0:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    5ba2:	6863      	ldr	r3, [r4, #4]
    5ba4:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5ba8:	899b      	ldrh	r3, [r3, #12]
    5baa:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5bac:	2804      	cmp	r0, #4
    5bae:	bf94      	ite	ls
    5bb0:	2000      	movls	r0, #0
    5bb2:	2001      	movhi	r0, #1
    5bb4:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    5bb6:	682b      	ldr	r3, [r5, #0]
    5bb8:	781b      	ldrb	r3, [r3, #0]
    5bba:	2b02      	cmp	r3, #2
    5bbc:	d1e0      	bne.n	5b80 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    5bbe:	6860      	ldr	r0, [r4, #4]
    5bc0:	2112      	movs	r1, #18
    5bc2:	3008      	adds	r0, #8
    5bc4:	f00d fdba 	bl	1373c <net_buf_simple_add>
    5bc8:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5bca:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    5bcc:	8a2b      	ldrh	r3, [r5, #16]
    5bce:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5bd2:	2210      	movs	r2, #16
    5bd4:	3101      	adds	r1, #1
    5bd6:	f7fc f837 	bl	1c48 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    5bda:	6863      	ldr	r3, [r4, #4]
    5bdc:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5be0:	899b      	ldrh	r3, [r3, #12]
    5be2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5be4:	2812      	cmp	r0, #18
    5be6:	e7e2      	b.n	5bae <find_info_cb+0x60>

00005be8 <find_type_cb>:
{
    5be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5bec:	680e      	ldr	r6, [r1, #0]
{
    5bee:	b088      	sub	sp, #32
    5bf0:	4605      	mov	r5, r0
    5bf2:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5bf4:	2700      	movs	r7, #0
    5bf6:	f642 0301 	movw	r3, #10241	; 0x2801
    5bfa:	a902      	add	r1, sp, #8
    5bfc:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    5bfe:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5c02:	f88d 7008 	strb.w	r7, [sp, #8]
    5c06:	f8ad 300a 	strh.w	r3, [sp, #10]
    5c0a:	f7fc f99b 	bl	1f44 <bt_uuid_cmp>
    5c0e:	b928      	cbnz	r0, 5c1c <find_type_cb+0x34>
		data->group = NULL;
    5c10:	2300      	movs	r3, #0
    5c12:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    5c14:	2001      	movs	r0, #1
}
    5c16:	b008      	add	sp, #32
    5c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    5c1c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5c20:	a903      	add	r1, sp, #12
    5c22:	6828      	ldr	r0, [r5, #0]
    5c24:	f88d 700c 	strb.w	r7, [sp, #12]
    5c28:	f8ad 300e 	strh.w	r3, [sp, #14]
    5c2c:	f7fc f98a 	bl	1f44 <bt_uuid_cmp>
    5c30:	b140      	cbz	r0, 5c44 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    5c32:	68a3      	ldr	r3, [r4, #8]
    5c34:	2b00      	cmp	r3, #0
    5c36:	d0ed      	beq.n	5c14 <find_type_cb+0x2c>
    5c38:	8a2a      	ldrh	r2, [r5, #16]
    5c3a:	8859      	ldrh	r1, [r3, #2]
    5c3c:	4291      	cmp	r1, r2
    5c3e:	d2e9      	bcs.n	5c14 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5c40:	805a      	strh	r2, [r3, #2]
    5c42:	e7e7      	b.n	5c14 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    5c44:	6862      	ldr	r2, [r4, #4]
    5c46:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    5c4a:	8992      	ldrh	r2, [r2, #12]
    5c4c:	1a9b      	subs	r3, r3, r2
    5c4e:	2b03      	cmp	r3, #3
    5c50:	d9e1      	bls.n	5c16 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    5c52:	2310      	movs	r3, #16
    5c54:	9000      	str	r0, [sp, #0]
    5c56:	eb0d 0203 	add.w	r2, sp, r3
    5c5a:	686e      	ldr	r6, [r5, #4]
    5c5c:	4629      	mov	r1, r5
    5c5e:	4640      	mov	r0, r8
    5c60:	47b0      	blx	r6
	if (read < 0) {
    5c62:	1e02      	subs	r2, r0, #0
    5c64:	dbd4      	blt.n	5c10 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    5c66:	7c23      	ldrb	r3, [r4, #16]
    5c68:	429a      	cmp	r2, r3
    5c6a:	d1d1      	bne.n	5c10 <find_type_cb+0x28>
    5c6c:	a904      	add	r1, sp, #16
    5c6e:	68e0      	ldr	r0, [r4, #12]
    5c70:	f7fb ffd5 	bl	1c1e <memcmp>
    5c74:	2800      	cmp	r0, #0
    5c76:	d1cb      	bne.n	5c10 <find_type_cb+0x28>
	data->err = 0x00;
    5c78:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5c7a:	6860      	ldr	r0, [r4, #4]
    5c7c:	2104      	movs	r1, #4
    5c7e:	3008      	adds	r0, #8
    5c80:	f00d fd5c 	bl	1373c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5c84:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5c86:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5c88:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5c8a:	8043      	strh	r3, [r0, #2]
    5c8c:	e7c2      	b.n	5c14 <find_type_cb+0x2c>
	...

00005c90 <bt_att_connected>:
{
    5c90:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5c92:	2317      	movs	r3, #23
{
    5c94:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5c96:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5c9a:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    5c9c:	4906      	ldr	r1, [pc, #24]	; (5cb8 <bt_att_connected+0x28>)
    5c9e:	30a4      	adds	r0, #164	; 0xa4
    5ca0:	f00f f88a 	bl	14db8 <k_delayed_work_init>
	list->head = NULL;
    5ca4:	2300      	movs	r3, #0
    5ca6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    5caa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	bt_gatt_connected(ch->chan.conn);
    5cae:	6820      	ldr	r0, [r4, #0]
}
    5cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    5cb4:	f001 bc32 	b.w	751c <bt_gatt_connected>
    5cb8:	000061f1 	.word	0x000061f1

00005cbc <check_perm.isra.5>:
	if ((mask & BT_GATT_PERM_READ) &&
    5cbc:	f011 0f01 	tst.w	r1, #1
    5cc0:	7c83      	ldrb	r3, [r0, #18]
    5cc2:	d004      	beq.n	5cce <check_perm.isra.5+0x12>
    5cc4:	f013 0f15 	tst.w	r3, #21
    5cc8:	d012      	beq.n	5cf0 <check_perm.isra.5+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    5cca:	6842      	ldr	r2, [r0, #4]
    5ccc:	b182      	cbz	r2, 5cf0 <check_perm.isra.5+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    5cce:	078a      	lsls	r2, r1, #30
    5cd0:	d504      	bpl.n	5cdc <check_perm.isra.5+0x20>
    5cd2:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    5cd6:	d00d      	beq.n	5cf4 <check_perm.isra.5+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    5cd8:	6882      	ldr	r2, [r0, #8]
    5cda:	b15a      	cbz	r2, 5cf4 <check_perm.isra.5+0x38>
	mask &= attr->perm;
    5cdc:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    5cde:	f011 0f30 	tst.w	r1, #48	; 0x30
    5ce2:	d109      	bne.n	5cf8 <check_perm.isra.5+0x3c>
	return 0;
    5ce4:	f011 0f0c 	tst.w	r1, #12
    5ce8:	bf14      	ite	ne
    5cea:	200f      	movne	r0, #15
    5cec:	2000      	moveq	r0, #0
    5cee:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    5cf0:	2002      	movs	r0, #2
    5cf2:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    5cf4:	2003      	movs	r0, #3
    5cf6:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    5cf8:	2005      	movs	r0, #5
}
    5cfa:	4770      	bx	lr

00005cfc <read_type_cb>:
{
    5cfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    5d00:	680f      	ldr	r7, [r1, #0]
{
    5d02:	4606      	mov	r6, r0
    5d04:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5d06:	6800      	ldr	r0, [r0, #0]
    5d08:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    5d0a:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5d0e:	f7fc f919 	bl	1f44 <bt_uuid_cmp>
    5d12:	4680      	mov	r8, r0
    5d14:	2800      	cmp	r0, #0
    5d16:	d14d      	bne.n	5db4 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5d18:	2115      	movs	r1, #21
    5d1a:	4630      	mov	r0, r6
    5d1c:	f7ff ffce 	bl	5cbc <check_perm.isra.5>
    5d20:	4605      	mov	r5, r0
    5d22:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5d24:	b148      	cbz	r0, 5d3a <read_type_cb+0x3e>
		if (data->rsp->len) {
    5d26:	68e3      	ldr	r3, [r4, #12]
    5d28:	781d      	ldrb	r5, [r3, #0]
    5d2a:	b115      	cbz	r5, 5d32 <read_type_cb+0x36>
			data->err = 0x00;
    5d2c:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    5d30:	4645      	mov	r5, r8
}
    5d32:	4628      	mov	r0, r5
    5d34:	b003      	add	sp, #12
    5d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5d3a:	68a0      	ldr	r0, [r4, #8]
    5d3c:	2102      	movs	r1, #2
    5d3e:	3008      	adds	r0, #8
    5d40:	f00d fcfc 	bl	1373c <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5d44:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5d46:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5d48:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5d4a:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5d4c:	898a      	ldrh	r2, [r1, #12]
    5d4e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    5d52:	6889      	ldr	r1, [r1, #8]
    5d54:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5d58:	9500      	str	r5, [sp, #0]
    5d5a:	1a9b      	subs	r3, r3, r2
    5d5c:	b29b      	uxth	r3, r3
    5d5e:	440a      	add	r2, r1
    5d60:	4648      	mov	r0, r9
    5d62:	4631      	mov	r1, r6
    5d64:	47c0      	blx	r8
	if (read < 0) {
    5d66:	1e01      	subs	r1, r0, #0
    5d68:	da08      	bge.n	5d7c <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    5d6a:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5d6e:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5d70:	bf9a      	itte	ls
    5d72:	4249      	negls	r1, r1
    5d74:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    5d76:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5d78:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    5d7a:	e7da      	b.n	5d32 <read_type_cb+0x36>
	if (!data->rsp->len) {
    5d7c:	68e0      	ldr	r0, [r4, #12]
    5d7e:	7802      	ldrb	r2, [r0, #0]
    5d80:	1c8b      	adds	r3, r1, #2
    5d82:	b982      	cbnz	r2, 5da6 <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    5d84:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    5d86:	68a0      	ldr	r0, [r4, #8]
    5d88:	3008      	adds	r0, #8
    5d8a:	f00d fcd7 	bl	1373c <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    5d8e:	68a3      	ldr	r3, [r4, #8]
    5d90:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    5d94:	899b      	ldrh	r3, [r3, #12]
    5d96:	1aed      	subs	r5, r5, r3
    5d98:	68e3      	ldr	r3, [r4, #12]
    5d9a:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    5d9c:	429d      	cmp	r5, r3
    5d9e:	bfd4      	ite	le
    5da0:	2500      	movle	r5, #0
    5da2:	2501      	movgt	r5, #1
    5da4:	e7c5      	b.n	5d32 <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    5da6:	429a      	cmp	r2, r3
    5da8:	d0ed      	beq.n	5d86 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    5daa:	68a2      	ldr	r2, [r4, #8]
    5dac:	8993      	ldrh	r3, [r2, #12]
    5dae:	3b02      	subs	r3, #2
    5db0:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    5db2:	e7be      	b.n	5d32 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    5db4:	2501      	movs	r5, #1
    5db6:	e7bc      	b.n	5d32 <read_type_cb+0x36>

00005db8 <uuid_create>:
{
    5db8:	b510      	push	{r4, lr}
	switch (buf->len) {
    5dba:	898a      	ldrh	r2, [r1, #12]
    5dbc:	2a02      	cmp	r2, #2
{
    5dbe:	4604      	mov	r4, r0
	switch (buf->len) {
    5dc0:	d003      	beq.n	5dca <uuid_create+0x12>
    5dc2:	2a10      	cmp	r2, #16
    5dc4:	d00a      	beq.n	5ddc <uuid_create+0x24>
	return false;
    5dc6:	2000      	movs	r0, #0
}
    5dc8:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    5dca:	2300      	movs	r3, #0
    5dcc:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    5dce:	f101 0008 	add.w	r0, r1, #8
    5dd2:	f00d fce2 	bl	1379a <net_buf_simple_pull_le16>
    5dd6:	8060      	strh	r0, [r4, #2]
		return true;
    5dd8:	2001      	movs	r0, #1
    5dda:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    5ddc:	2302      	movs	r3, #2
    5dde:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    5de2:	6889      	ldr	r1, [r1, #8]
    5de4:	f7fb ff30 	bl	1c48 <memcpy>
    5de8:	e7f6      	b.n	5dd8 <uuid_create+0x20>
	...

00005dec <att_req_sent>:
{
    5dec:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5dee:	2104      	movs	r1, #4
    5df0:	f7ff fd4e 	bl	5890 <bt_l2cap_le_lookup_tx_cid>
    5df4:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5df6:	30cc      	adds	r0, #204	; 0xcc
    5df8:	f00e fcf7 	bl	147ea <_impl_k_sem_give>
	if (att->req) {
    5dfc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5e00:	b143      	cbz	r3, 5e14 <att_req_sent+0x28>
    5e02:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    5e06:	f247 5230 	movw	r2, #30000	; 0x7530
    5e0a:	4803      	ldr	r0, [pc, #12]	; (5e18 <att_req_sent+0x2c>)
}
    5e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e10:	f00f b846 	b.w	14ea0 <k_delayed_work_submit_to_queue>
    5e14:	bd10      	pop	{r4, pc}
    5e16:	bf00      	nop
    5e18:	20001988 	.word	0x20001988

00005e1c <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    5e1c:	6803      	ldr	r3, [r0, #0]
    5e1e:	7a5b      	ldrb	r3, [r3, #9]
    5e20:	2b03      	cmp	r3, #3
    5e22:	d10a      	bne.n	5e3a <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5e24:	f3bf 8f5b 	dmb	ish
    5e28:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    5e2c:	f3bf 8f5b 	dmb	ish
    5e30:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    5e34:	f000 0001 	and.w	r0, r0, #1
    5e38:	4770      	bx	lr
    5e3a:	2001      	movs	r0, #1
}
    5e3c:	4770      	bx	lr

00005e3e <att_prepare_write_req>:
    5e3e:	2006      	movs	r0, #6
    5e40:	4770      	bx	lr

00005e42 <att_pdu_sent>:
{
    5e42:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5e44:	2104      	movs	r1, #4
    5e46:	f7ff fd23 	bl	5890 <bt_l2cap_le_lookup_tx_cid>
}
    5e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5e4e:	30cc      	adds	r0, #204	; 0xcc
    5e50:	f00e bccb 	b.w	147ea <_impl_k_sem_give>

00005e54 <att_rsp_sent>:
{
    5e54:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5e56:	2104      	movs	r1, #4
    5e58:	f7ff fd1a 	bl	5890 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5e5c:	f3bf 8f5b 	dmb	ish
    5e60:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5e64:	e853 2f00 	ldrex	r2, [r3]
    5e68:	f022 0201 	bic.w	r2, r2, #1
    5e6c:	e843 2100 	strex	r1, r2, [r3]
    5e70:	2900      	cmp	r1, #0
    5e72:	d1f7      	bne.n	5e64 <att_rsp_sent+0x10>
    5e74:	f3bf 8f5b 	dmb	ish
    5e78:	30cc      	adds	r0, #204	; 0xcc
}
    5e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5e7e:	f00e bcb4 	b.w	147ea <_impl_k_sem_give>

00005e82 <att_cfm_sent>:
{
    5e82:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5e84:	2104      	movs	r1, #4
    5e86:	f7ff fd03 	bl	5890 <bt_l2cap_le_lookup_tx_cid>
    5e8a:	f3bf 8f5b 	dmb	ish
    5e8e:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5e92:	e853 2f00 	ldrex	r2, [r3]
    5e96:	f022 0202 	bic.w	r2, r2, #2
    5e9a:	e843 2100 	strex	r1, r2, [r3]
    5e9e:	2900      	cmp	r1, #0
    5ea0:	d1f7      	bne.n	5e92 <att_cfm_sent+0x10>
    5ea2:	f3bf 8f5b 	dmb	ish
    5ea6:	30cc      	adds	r0, #204	; 0xcc
}
    5ea8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5eac:	f00e bc9d 	b.w	147ea <_impl_k_sem_give>

00005eb0 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    5eb0:	7a43      	ldrb	r3, [r0, #9]
    5eb2:	2b03      	cmp	r3, #3
{
    5eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    5eb6:	d00c      	beq.n	5ed2 <att_chan_get+0x22>
		BT_WARN("Not connected");
    5eb8:	4b17      	ldr	r3, [pc, #92]	; (5f18 <att_chan_get+0x68>)
    5eba:	9301      	str	r3, [sp, #4]
    5ebc:	9300      	str	r3, [sp, #0]
    5ebe:	4b17      	ldr	r3, [pc, #92]	; (5f1c <att_chan_get+0x6c>)
    5ec0:	4a17      	ldr	r2, [pc, #92]	; (5f20 <att_chan_get+0x70>)
    5ec2:	681c      	ldr	r4, [r3, #0]
    5ec4:	4917      	ldr	r1, [pc, #92]	; (5f24 <att_chan_get+0x74>)
    5ec6:	4b18      	ldr	r3, [pc, #96]	; (5f28 <att_chan_get+0x78>)
    5ec8:	4818      	ldr	r0, [pc, #96]	; (5f2c <att_chan_get+0x7c>)
		BT_WARN("ATT context flagged as disconnected");
    5eca:	47a0      	blx	r4
		return NULL;
    5ecc:	2000      	movs	r0, #0
}
    5ece:	b003      	add	sp, #12
    5ed0:	bd30      	pop	{r4, r5, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    5ed2:	2104      	movs	r1, #4
    5ed4:	f7ff fcec 	bl	58b0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    5ed8:	4604      	mov	r4, r0
    5eda:	b958      	cbnz	r0, 5ef4 <att_chan_get+0x44>
		BT_ERR("Unable to find ATT channel");
    5edc:	4b0e      	ldr	r3, [pc, #56]	; (5f18 <att_chan_get+0x68>)
    5ede:	9301      	str	r3, [sp, #4]
    5ee0:	9300      	str	r3, [sp, #0]
    5ee2:	4b0e      	ldr	r3, [pc, #56]	; (5f1c <att_chan_get+0x6c>)
    5ee4:	4a12      	ldr	r2, [pc, #72]	; (5f30 <att_chan_get+0x80>)
    5ee6:	681d      	ldr	r5, [r3, #0]
    5ee8:	490e      	ldr	r1, [pc, #56]	; (5f24 <att_chan_get+0x74>)
    5eea:	4b0f      	ldr	r3, [pc, #60]	; (5f28 <att_chan_get+0x78>)
    5eec:	4811      	ldr	r0, [pc, #68]	; (5f34 <att_chan_get+0x84>)
    5eee:	47a8      	blx	r5
    5ef0:	4620      	mov	r0, r4
    5ef2:	e7ec      	b.n	5ece <att_chan_get+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5ef4:	f3bf 8f5b 	dmb	ish
    5ef8:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    5efc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    5f00:	075b      	lsls	r3, r3, #29
    5f02:	d5f5      	bpl.n	5ef0 <att_chan_get+0x40>
		BT_WARN("ATT context flagged as disconnected");
    5f04:	4b04      	ldr	r3, [pc, #16]	; (5f18 <att_chan_get+0x68>)
    5f06:	9301      	str	r3, [sp, #4]
    5f08:	9300      	str	r3, [sp, #0]
    5f0a:	4b04      	ldr	r3, [pc, #16]	; (5f1c <att_chan_get+0x6c>)
    5f0c:	4a04      	ldr	r2, [pc, #16]	; (5f20 <att_chan_get+0x70>)
    5f0e:	681c      	ldr	r4, [r3, #0]
    5f10:	4904      	ldr	r1, [pc, #16]	; (5f24 <att_chan_get+0x74>)
    5f12:	4b05      	ldr	r3, [pc, #20]	; (5f28 <att_chan_get+0x78>)
    5f14:	4808      	ldr	r0, [pc, #32]	; (5f38 <att_chan_get+0x88>)
    5f16:	e7d8      	b.n	5eca <att_chan_get+0x1a>
    5f18:	00015359 	.word	0x00015359
    5f1c:	20003a5c 	.word	0x20003a5c
    5f20:	000167d7 	.word	0x000167d7
    5f24:	0001679c 	.word	0x0001679c
    5f28:	000173c9 	.word	0x000173c9
    5f2c:	00017402 	.word	0x00017402
    5f30:	00016754 	.word	0x00016754
    5f34:	00017420 	.word	0x00017420
    5f38:	0001744b 	.word	0x0001744b

00005f3c <write_cb>:
{
    5f3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5f40:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5f42:	f8d1 8000 	ldr.w	r8, [r1]
    5f46:	212a      	movs	r1, #42	; 0x2a
{
    5f48:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5f4a:	f7ff feb7 	bl	5cbc <check_perm.isra.5>
    5f4e:	4605      	mov	r5, r0
    5f50:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5f52:	b9e0      	cbnz	r0, 5f8e <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    5f54:	8a62      	ldrh	r2, [r4, #18]
    5f56:	9001      	str	r0, [sp, #4]
    5f58:	9200      	str	r2, [sp, #0]
    5f5a:	7c23      	ldrb	r3, [r4, #16]
    5f5c:	68b7      	ldr	r7, [r6, #8]
    5f5e:	68e2      	ldr	r2, [r4, #12]
    5f60:	4631      	mov	r1, r6
    5f62:	4640      	mov	r0, r8
    5f64:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    5f66:	2800      	cmp	r0, #0
    5f68:	db02      	blt.n	5f70 <write_cb+0x34>
    5f6a:	7c23      	ldrb	r3, [r4, #16]
    5f6c:	4298      	cmp	r0, r3
    5f6e:	d00b      	beq.n	5f88 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    5f70:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    5f74:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5f76:	bf9a      	itte	ls
    5f78:	4240      	negls	r0, r0
    5f7a:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    5f7c:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    5f7e:	7520      	strb	r0, [r4, #20]
}
    5f80:	4628      	mov	r0, r5
    5f82:	b002      	add	sp, #8
    5f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    5f88:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    5f8a:	2501      	movs	r5, #1
    5f8c:	e7f8      	b.n	5f80 <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    5f8e:	2500      	movs	r5, #0
    5f90:	e7f6      	b.n	5f80 <write_cb+0x44>
	...

00005f94 <att_send_req>:
{
    5f94:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5f96:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    5f98:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    5f9c:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    5fa0:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5fa2:	4630      	mov	r0, r6
    5fa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5fa8:	f00e fc47 	bl	1483a <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    5fac:	4628      	mov	r0, r5
    5fae:	f7ff ff35 	bl	5e1c <att_is_connected>
    5fb2:	b980      	cbnz	r0, 5fd6 <att_send_req+0x42>
		BT_WARN("Disconnected");
    5fb4:	4b18      	ldr	r3, [pc, #96]	; (6018 <att_send_req+0x84>)
    5fb6:	9301      	str	r3, [sp, #4]
    5fb8:	9300      	str	r3, [sp, #0]
    5fba:	4b18      	ldr	r3, [pc, #96]	; (601c <att_send_req+0x88>)
    5fbc:	4a18      	ldr	r2, [pc, #96]	; (6020 <att_send_req+0x8c>)
    5fbe:	681c      	ldr	r4, [r3, #0]
    5fc0:	4918      	ldr	r1, [pc, #96]	; (6024 <att_send_req+0x90>)
    5fc2:	4b19      	ldr	r3, [pc, #100]	; (6028 <att_send_req+0x94>)
    5fc4:	4819      	ldr	r0, [pc, #100]	; (602c <att_send_req+0x98>)
    5fc6:	47a0      	blx	r4
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5fc8:	4630      	mov	r0, r6
    5fca:	f00e fc0e 	bl	147ea <_impl_k_sem_give>
		return -ENOTCONN;
    5fce:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    5fd2:	b002      	add	sp, #8
    5fd4:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    5fd6:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    5fd8:	f106 0008 	add.w	r0, r6, #8
    5fdc:	f00d fbe5 	bl	137aa <net_buf_simple_headroom>
	state->len = buf->len;
    5fe0:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    5fe2:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    5fe4:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5fe6:	6920      	ldr	r0, [r4, #16]
    5fe8:	682d      	ldr	r5, [r5, #0]
    5fea:	f00d fba3 	bl	13734 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    5fee:	6923      	ldr	r3, [r4, #16]
    5ff0:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5ff2:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    5ff4:	7818      	ldrb	r0, [r3, #0]
    5ff6:	f7ff fcdf 	bl	59b8 <att_op_get_type>
    5ffa:	3801      	subs	r0, #1
    5ffc:	b2c0      	uxtb	r0, r0
    5ffe:	2804      	cmp	r0, #4
    6000:	bf96      	itet	ls
    6002:	4b0b      	ldrls	r3, [pc, #44]	; (6030 <att_send_req+0x9c>)
    6004:	4b0b      	ldrhi	r3, [pc, #44]	; (6034 <att_send_req+0xa0>)
    6006:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    600a:	4632      	mov	r2, r6
    600c:	4628      	mov	r0, r5
    600e:	2104      	movs	r1, #4
    6010:	f7ff fb48 	bl	56a4 <bt_l2cap_send_cb>
	return 0;
    6014:	2000      	movs	r0, #0
    6016:	e7dc      	b.n	5fd2 <att_send_req+0x3e>
    6018:	00015359 	.word	0x00015359
    601c:	20003a5c 	.word	0x20003a5c
    6020:	000167d7 	.word	0x000167d7
    6024:	0001679c 	.word	0x0001679c
    6028:	0001738c 	.word	0x0001738c
    602c:	000174a6 	.word	0x000174a6
    6030:	00017378 	.word	0x00017378
    6034:	00005e43 	.word	0x00005e43

00006038 <att_handle_rsp>:
{
    6038:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    603c:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    603e:	30a4      	adds	r0, #164	; 0xa4
{
    6040:	461e      	mov	r6, r3
    6042:	460f      	mov	r7, r1
    6044:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    6046:	f00e fec7 	bl	14dd8 <k_delayed_work_cancel>
	if (!att->req) {
    604a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    604e:	b9e3      	cbnz	r3, 608a <att_handle_rsp+0x52>
		BT_WARN("No pending ATT request");
    6050:	4b1c      	ldr	r3, [pc, #112]	; (60c4 <att_handle_rsp+0x8c>)
    6052:	9301      	str	r3, [sp, #4]
    6054:	9300      	str	r3, [sp, #0]
    6056:	4b1c      	ldr	r3, [pc, #112]	; (60c8 <att_handle_rsp+0x90>)
    6058:	4a1c      	ldr	r2, [pc, #112]	; (60cc <att_handle_rsp+0x94>)
    605a:	681d      	ldr	r5, [r3, #0]
    605c:	491c      	ldr	r1, [pc, #112]	; (60d0 <att_handle_rsp+0x98>)
    605e:	4b1d      	ldr	r3, [pc, #116]	; (60d4 <att_handle_rsp+0x9c>)
    6060:	481d      	ldr	r0, [pc, #116]	; (60d8 <att_handle_rsp+0xa0>)
    6062:	47a8      	blx	r5
    6064:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    6068:	b159      	cbz	r1, 6082 <att_handle_rsp+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    606a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    606e:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    6070:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    6074:	4291      	cmp	r1, r2
	list->tail = node;
    6076:	bf08      	it	eq
    6078:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    607c:	4620      	mov	r0, r4
    607e:	f7ff ff89 	bl	5f94 <att_send_req>
}
    6082:	2000      	movs	r0, #0
    6084:	b003      	add	sp, #12
    6086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    608a:	6918      	ldr	r0, [r3, #16]
    608c:	b128      	cbz	r0, 609a <att_handle_rsp+0x62>
		net_buf_unref(att->req->buf);
    608e:	f00d fb23 	bl	136d8 <net_buf_unref>
		att->req->buf = NULL;
    6092:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    6096:	2200      	movs	r2, #0
    6098:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    609a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    609e:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    60a0:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    60a4:	2500      	movs	r5, #0
    60a6:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    60a8:	463a      	mov	r2, r7
    60aa:	9300      	str	r3, [sp, #0]
    60ac:	4631      	mov	r1, r6
    60ae:	4643      	mov	r3, r8
    60b0:	47c8      	blx	r9
	if (!att->req->func) {
    60b2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    60b6:	6843      	ldr	r3, [r0, #4]
    60b8:	b90b      	cbnz	r3, 60be <att_handle_rsp+0x86>
		att_req_destroy(att->req);
    60ba:	f7ff fcc9 	bl	5a50 <att_req_destroy>
	att->req = NULL;
    60be:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    60c2:	e7cf      	b.n	6064 <att_handle_rsp+0x2c>
    60c4:	00015359 	.word	0x00015359
    60c8:	20003a5c 	.word	0x20003a5c
    60cc:	000167d7 	.word	0x000167d7
    60d0:	0001679c 	.word	0x0001679c
    60d4:	00017399 	.word	0x00017399
    60d8:	0001747f 	.word	0x0001747f

000060dc <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    60dc:	898a      	ldrh	r2, [r1, #12]
    60de:	6889      	ldr	r1, [r1, #8]
    60e0:	2300      	movs	r3, #0
    60e2:	f7ff bfa9 	b.w	6038 <att_handle_rsp>

000060e6 <att_handle_exec_write_rsp>:
    60e6:	f7ff bff9 	b.w	60dc <att_confirm>

000060ea <att_handle_prepare_write_rsp>:
    60ea:	f7ff bff7 	b.w	60dc <att_confirm>

000060ee <att_handle_write_rsp>:
    60ee:	f7ff bff5 	b.w	60dc <att_confirm>

000060f2 <att_handle_read_mult_rsp>:
    60f2:	f7ff bff3 	b.w	60dc <att_confirm>

000060f6 <att_handle_read_blob_rsp>:
    60f6:	f7ff bff1 	b.w	60dc <att_confirm>

000060fa <att_handle_read_rsp>:
    60fa:	f7ff bfef 	b.w	60dc <att_confirm>

000060fe <att_handle_read_type_rsp>:
    60fe:	f7ff bfed 	b.w	60dc <att_confirm>

00006102 <att_handle_find_type_rsp>:
    6102:	f7ff bfeb 	b.w	60dc <att_confirm>

00006106 <att_handle_find_info_rsp>:
    6106:	f7ff bfe9 	b.w	60dc <att_confirm>

0000610a <att_mtu_rsp>:
{
    610a:	b410      	push	{r4}
    610c:	460a      	mov	r2, r1
	if (!att) {
    610e:	4603      	mov	r3, r0
    6110:	b180      	cbz	r0, 6134 <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    6112:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    6114:	880c      	ldrh	r4, [r1, #0]
    6116:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    6118:	bf83      	ittte	hi
    611a:	2417      	movhi	r4, #23
    611c:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    611e:	f8a3 405a 	strhhi.w	r4, [r3, #90]	; 0x5a
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    6122:	2200      	movls	r2, #0
    6124:	bf99      	ittee	ls
    6126:	2304      	movls	r3, #4
    6128:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    612a:	2300      	movhi	r3, #0
    612c:	8992      	ldrhhi	r2, [r2, #12]
}
    612e:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    6130:	f7ff bf82 	b.w	6038 <att_handle_rsp>
}
    6134:	bc10      	pop	{r4}
    6136:	4770      	bx	lr

00006138 <att_error_rsp>:
{
    6138:	b430      	push	{r4, r5}
	if (!att->req) {
    613a:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    613e:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    6140:	b16a      	cbz	r2, 615e <att_error_rsp+0x26>
	if (att->req->buf) {
    6142:	6913      	ldr	r3, [r2, #16]
    6144:	b12b      	cbz	r3, 6152 <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    6146:	8995      	ldrh	r5, [r2, #12]
    6148:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    614a:	89d2      	ldrh	r2, [r2, #14]
    614c:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    614e:	4429      	add	r1, r5
    6150:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    6152:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    6154:	2200      	movs	r2, #0
    6156:	4611      	mov	r1, r2
}
    6158:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    615a:	f7ff bf6d 	b.w	6038 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    615e:	230e      	movs	r3, #14
    6160:	e7f8      	b.n	6154 <att_error_rsp+0x1c>

00006162 <att_reset>:
{
    6162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6164:	f100 0394 	add.w	r3, r0, #148	; 0x94
    6168:	4605      	mov	r5, r0
    616a:	f3bf 8f5b 	dmb	ish
    616e:	e853 2f00 	ldrex	r2, [r3]
    6172:	f042 0204 	orr.w	r2, r2, #4
    6176:	e843 2100 	strex	r1, r2, [r3]
    617a:	2900      	cmp	r1, #0
    617c:	d1f7      	bne.n	616e <att_reset+0xc>
    617e:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    6182:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    6186:	4620      	mov	r0, r4
    6188:	f00e fb2f 	bl	147ea <_impl_k_sem_give>
    618c:	4620      	mov	r0, r4
    618e:	f00e fb2c 	bl	147ea <_impl_k_sem_give>
    6192:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    6196:	b98c      	cbnz	r4, 61bc <att_reset+0x5a>
	if (!att->req) {
    6198:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    619c:	2200      	movs	r2, #0
    619e:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    61a2:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    61a6:	b90b      	cbnz	r3, 61ac <att_reset+0x4a>
}
    61a8:	b003      	add	sp, #12
    61aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    61ac:	230e      	movs	r3, #14
    61ae:	4611      	mov	r1, r2
    61b0:	4628      	mov	r0, r5
}
    61b2:	b003      	add	sp, #12
    61b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    61b8:	f7ff bf3e 	b.w	6038 <att_handle_rsp>
	return node->next;
    61bc:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    61be:	6867      	ldr	r7, [r4, #4]
    61c0:	b12f      	cbz	r7, 61ce <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    61c2:	2300      	movs	r3, #0
    61c4:	9400      	str	r4, [sp, #0]
    61c6:	461a      	mov	r2, r3
    61c8:	210e      	movs	r1, #14
    61ca:	4618      	mov	r0, r3
    61cc:	47b8      	blx	r7
		att_req_destroy(req);
    61ce:	4620      	mov	r0, r4
    61d0:	f7ff fc3e 	bl	5a50 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    61d4:	2e00      	cmp	r6, #0
    61d6:	d0df      	beq.n	6198 <att_reset+0x36>
    61d8:	4634      	mov	r4, r6
    61da:	6836      	ldr	r6, [r6, #0]
    61dc:	e7ef      	b.n	61be <att_reset+0x5c>

000061de <bt_att_disconnected>:
{
    61de:	b510      	push	{r4, lr}
    61e0:	4604      	mov	r4, r0
	att_reset(att);
    61e2:	f7ff ffbe 	bl	6162 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    61e6:	6820      	ldr	r0, [r4, #0]
}
    61e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    61ec:	f001 b9a0 	b.w	7530 <bt_gatt_disconnected>

000061f0 <att_timeout>:
{
    61f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	BT_ERR("ATT Timeout");
    61f2:	4b0c      	ldr	r3, [pc, #48]	; (6224 <att_timeout+0x34>)
    61f4:	9301      	str	r3, [sp, #4]
    61f6:	9300      	str	r3, [sp, #0]
    61f8:	4b0b      	ldr	r3, [pc, #44]	; (6228 <att_timeout+0x38>)
    61fa:	4a0c      	ldr	r2, [pc, #48]	; (622c <att_timeout+0x3c>)
    61fc:	490c      	ldr	r1, [pc, #48]	; (6230 <att_timeout+0x40>)
    61fe:	681d      	ldr	r5, [r3, #0]
    6200:	4b0c      	ldr	r3, [pc, #48]	; (6234 <att_timeout+0x44>)
{
    6202:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    6204:	480c      	ldr	r0, [pc, #48]	; (6238 <att_timeout+0x48>)
    6206:	47a8      	blx	r5
	att_reset(att);
    6208:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
    620c:	f7ff ffa9 	bl	6162 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    6210:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    6214:	f001 f98c 	bl	7530 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    6218:	2300      	movs	r3, #0
    621a:	f844 3ca4 	str.w	r3, [r4, #-164]
}
    621e:	b003      	add	sp, #12
    6220:	bd30      	pop	{r4, r5, pc}
    6222:	bf00      	nop
    6224:	00015359 	.word	0x00015359
    6228:	20003a5c 	.word	0x20003a5c
    622c:	00016754 	.word	0x00016754
    6230:	0001679c 	.word	0x0001679c
    6234:	000173e8 	.word	0x000173e8
    6238:	000174e8 	.word	0x000174e8

0000623c <read_cb>:
{
    623c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6240:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6242:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    6244:	f8d1 9000 	ldr.w	r9, [r1]
{
    6248:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    624a:	3008      	adds	r0, #8
    624c:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    624e:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6252:	f00d fa73 	bl	1373c <net_buf_simple_add>
	data->err = 0x00;
    6256:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6258:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    625a:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    625c:	2115      	movs	r1, #21
    625e:	4630      	mov	r0, r6
    6260:	f7ff fd2c 	bl	5cbc <check_perm.isra.5>
    6264:	4605      	mov	r5, r0
    6266:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    6268:	bb08      	cbnz	r0, 62ae <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    626a:	68a1      	ldr	r1, [r4, #8]
    626c:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    6270:	898a      	ldrh	r2, [r1, #12]
    6272:	6889      	ldr	r1, [r1, #8]
    6274:	88a0      	ldrh	r0, [r4, #4]
    6276:	9000      	str	r0, [sp, #0]
    6278:	1a9b      	subs	r3, r3, r2
    627a:	6877      	ldr	r7, [r6, #4]
    627c:	440a      	add	r2, r1
    627e:	b29b      	uxth	r3, r3
    6280:	4631      	mov	r1, r6
    6282:	4640      	mov	r0, r8
    6284:	47b8      	blx	r7
	if (read < 0) {
    6286:	1e01      	subs	r1, r0, #0
    6288:	da0b      	bge.n	62a2 <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    628a:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    628e:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    6290:	bf9a      	itte	ls
    6292:	4249      	negls	r1, r1
    6294:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    6296:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    6298:	7421      	strb	r1, [r4, #16]
}
    629a:	4628      	mov	r0, r5
    629c:	b003      	add	sp, #12
    629e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    62a2:	68a0      	ldr	r0, [r4, #8]
    62a4:	3008      	adds	r0, #8
    62a6:	f00d fa49 	bl	1373c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    62aa:	2501      	movs	r5, #1
    62ac:	e7f5      	b.n	629a <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    62ae:	463d      	mov	r5, r7
    62b0:	e7f3      	b.n	629a <read_cb+0x5e>
	...

000062b4 <bt_att_create_pdu>:
{
    62b4:	b530      	push	{r4, r5, lr}
    62b6:	b085      	sub	sp, #20
    62b8:	460d      	mov	r5, r1
    62ba:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    62bc:	f7ff fdf8 	bl	5eb0 <att_chan_get>
	if (!att) {
    62c0:	b1f8      	cbz	r0, 6302 <bt_att_create_pdu+0x4e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    62c2:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
    62c6:	3401      	adds	r4, #1
    62c8:	428c      	cmp	r4, r1
    62ca:	d90f      	bls.n	62ec <bt_att_create_pdu+0x38>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    62cc:	4b0e      	ldr	r3, [pc, #56]	; (6308 <bt_att_create_pdu+0x54>)
    62ce:	9303      	str	r3, [sp, #12]
    62d0:	9300      	str	r3, [sp, #0]
    62d2:	4b0e      	ldr	r3, [pc, #56]	; (630c <bt_att_create_pdu+0x58>)
    62d4:	9101      	str	r1, [sp, #4]
    62d6:	9402      	str	r4, [sp, #8]
    62d8:	681c      	ldr	r4, [r3, #0]
    62da:	4a0d      	ldr	r2, [pc, #52]	; (6310 <bt_att_create_pdu+0x5c>)
    62dc:	4b0d      	ldr	r3, [pc, #52]	; (6314 <bt_att_create_pdu+0x60>)
    62de:	490e      	ldr	r1, [pc, #56]	; (6318 <bt_att_create_pdu+0x64>)
    62e0:	480e      	ldr	r0, [pc, #56]	; (631c <bt_att_create_pdu+0x68>)
    62e2:	47a0      	blx	r4
		return NULL;
    62e4:	2400      	movs	r4, #0
}
    62e6:	4620      	mov	r0, r4
    62e8:	b005      	add	sp, #20
    62ea:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    62ec:	2100      	movs	r1, #0
    62ee:	4608      	mov	r0, r1
    62f0:	f7ff f9d5 	bl	569e <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    62f4:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    62f6:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    62f8:	3008      	adds	r0, #8
    62fa:	f00d fa1f 	bl	1373c <net_buf_simple_add>
	hdr->code = op;
    62fe:	7005      	strb	r5, [r0, #0]
	return buf;
    6300:	e7f1      	b.n	62e6 <bt_att_create_pdu+0x32>
		return NULL;
    6302:	4604      	mov	r4, r0
    6304:	e7ef      	b.n	62e6 <bt_att_create_pdu+0x32>
    6306:	bf00      	nop
    6308:	00015359 	.word	0x00015359
    630c:	20003a5c 	.word	0x20003a5c
    6310:	000167d7 	.word	0x000167d7
    6314:	000173d6 	.word	0x000173d6
    6318:	0001679c 	.word	0x0001679c
    631c:	00017539 	.word	0x00017539

00006320 <att_indicate>:
{
    6320:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6322:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6324:	f101 0008 	add.w	r0, r1, #8
    6328:	f00d fa37 	bl	1379a <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    632c:	2200      	movs	r2, #0
    632e:	211e      	movs	r1, #30
    6330:	4620      	mov	r0, r4
    6332:	f7ff ffbf 	bl	62b4 <bt_att_create_pdu>
	if (!buf) {
    6336:	4602      	mov	r2, r0
    6338:	b120      	cbz	r0, 6344 <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    633a:	4b03      	ldr	r3, [pc, #12]	; (6348 <att_indicate+0x28>)
    633c:	2104      	movs	r1, #4
    633e:	4620      	mov	r0, r4
    6340:	f7ff f9b0 	bl	56a4 <bt_l2cap_send_cb>
}
    6344:	2000      	movs	r0, #0
    6346:	bd10      	pop	{r4, pc}
    6348:	00005e83 	.word	0x00005e83

0000634c <att_mtu_req>:
{
    634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    6350:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    6352:	881b      	ldrh	r3, [r3, #0]
    6354:	2b16      	cmp	r3, #22
{
    6356:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    6358:	d91c      	bls.n	6394 <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    635a:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    635e:	2202      	movs	r2, #2
    6360:	2103      	movs	r1, #3
    6362:	4640      	mov	r0, r8
    6364:	f7ff ffa6 	bl	62b4 <bt_att_create_pdu>
	if (!pdu) {
    6368:	4607      	mov	r7, r0
    636a:	b1b0      	cbz	r0, 639a <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    636c:	2102      	movs	r1, #2
    636e:	3008      	adds	r0, #8
    6370:	f00d f9e4 	bl	1373c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    6374:	2617      	movs	r6, #23
    6376:	2400      	movs	r4, #0
    6378:	7006      	strb	r6, [r0, #0]
    637a:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    637c:	4b08      	ldr	r3, [pc, #32]	; (63a0 <att_mtu_req+0x54>)
    637e:	4640      	mov	r0, r8
    6380:	463a      	mov	r2, r7
    6382:	2104      	movs	r1, #4
    6384:	f7ff f98e 	bl	56a4 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    6388:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    638a:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	return 0;
    638e:	4620      	mov	r0, r4
    6390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    6394:	2004      	movs	r0, #4
    6396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    639a:	200e      	movs	r0, #14
}
    639c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    63a0:	00005e55 	.word	0x00005e55

000063a4 <send_err_rsp.part.11>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    63a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63a8:	4688      	mov	r8, r1
    63aa:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    63ac:	2101      	movs	r1, #1
    63ae:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    63b0:	4605      	mov	r5, r0
    63b2:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    63b4:	f7ff ff7e 	bl	62b4 <bt_att_create_pdu>
	if (!buf) {
    63b8:	4604      	mov	r4, r0
    63ba:	b180      	cbz	r0, 63de <send_err_rsp.part.11+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    63bc:	2104      	movs	r1, #4
    63be:	3008      	adds	r0, #8
    63c0:	f00d f9bc 	bl	1373c <net_buf_simple_add>
	rsp->request = req;
    63c4:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    63c8:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    63ca:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    63ce:	4622      	mov	r2, r4
    63d0:	4628      	mov	r0, r5
    63d2:	4b04      	ldr	r3, [pc, #16]	; (63e4 <send_err_rsp.part.11+0x40>)
    63d4:	2104      	movs	r1, #4
}
    63d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    63da:	f7ff b963 	b.w	56a4 <bt_l2cap_send_cb>
    63de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    63e2:	bf00      	nop
    63e4:	00005e55 	.word	0x00005e55

000063e8 <bt_att_recv>:
{
    63e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    63ea:	898b      	ldrh	r3, [r1, #12]
{
    63ec:	b085      	sub	sp, #20
    63ee:	4604      	mov	r4, r0
    63f0:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    63f2:	b95b      	cbnz	r3, 640c <bt_att_recv+0x24>
		BT_ERR("Too small ATT PDU received");
    63f4:	4b4f      	ldr	r3, [pc, #316]	; (6534 <bt_att_recv+0x14c>)
    63f6:	9301      	str	r3, [sp, #4]
    63f8:	9300      	str	r3, [sp, #0]
    63fa:	4b4f      	ldr	r3, [pc, #316]	; (6538 <bt_att_recv+0x150>)
    63fc:	4a4f      	ldr	r2, [pc, #316]	; (653c <bt_att_recv+0x154>)
    63fe:	681c      	ldr	r4, [r3, #0]
    6400:	494f      	ldr	r1, [pc, #316]	; (6540 <bt_att_recv+0x158>)
    6402:	4b50      	ldr	r3, [pc, #320]	; (6544 <bt_att_recv+0x15c>)
    6404:	4850      	ldr	r0, [pc, #320]	; (6548 <bt_att_recv+0x160>)
			BT_WARN("Ignoring unexpected request");
    6406:	47a0      	blx	r4
}
    6408:	b005      	add	sp, #20
    640a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    640c:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    640e:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    6410:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    6414:	f00d f9b1 	bl	1377a <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    6418:	4a4c      	ldr	r2, [pc, #304]	; (654c <bt_att_recv+0x164>)
    641a:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    641c:	2300      	movs	r3, #0
    641e:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    6420:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    6424:	4286      	cmp	r6, r0
    6426:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    642a:	d11e      	bne.n	646a <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
    642c:	4472      	add	r2, lr
    642e:	7896      	ldrb	r6, [r2, #2]
    6430:	2e01      	cmp	r6, #1
    6432:	d139      	bne.n	64a8 <bt_att_recv+0xc0>
    6434:	f3bf 8f5b 	dmb	ish
    6438:	f104 0294 	add.w	r2, r4, #148	; 0x94
    643c:	e852 3f00 	ldrex	r3, [r2]
    6440:	f043 0001 	orr.w	r0, r3, #1
    6444:	e842 0c00 	strex	ip, r0, [r2]
    6448:	f1bc 0f00 	cmp.w	ip, #0
    644c:	d1f6      	bne.n	643c <bt_att_recv+0x54>
    644e:	f3bf 8f5b 	dmb	ish
    6452:	07da      	lsls	r2, r3, #31
    6454:	d545      	bpl.n	64e2 <bt_att_recv+0xfa>
			BT_WARN("Ignoring unexpected request");
    6456:	4b37      	ldr	r3, [pc, #220]	; (6534 <bt_att_recv+0x14c>)
    6458:	9301      	str	r3, [sp, #4]
    645a:	9300      	str	r3, [sp, #0]
    645c:	4b36      	ldr	r3, [pc, #216]	; (6538 <bt_att_recv+0x150>)
    645e:	4a3c      	ldr	r2, [pc, #240]	; (6550 <bt_att_recv+0x168>)
    6460:	681c      	ldr	r4, [r3, #0]
    6462:	4937      	ldr	r1, [pc, #220]	; (6540 <bt_att_recv+0x158>)
    6464:	4b37      	ldr	r3, [pc, #220]	; (6544 <bt_att_recv+0x15c>)
    6466:	483b      	ldr	r0, [pc, #236]	; (6554 <bt_att_recv+0x16c>)
    6468:	e7cd      	b.n	6406 <bt_att_recv+0x1e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    646a:	3301      	adds	r3, #1
    646c:	2b1b      	cmp	r3, #27
    646e:	d1d7      	bne.n	6420 <bt_att_recv+0x38>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    6470:	4b30      	ldr	r3, [pc, #192]	; (6534 <bt_att_recv+0x14c>)
    6472:	9302      	str	r3, [sp, #8]
    6474:	9300      	str	r3, [sp, #0]
    6476:	4b30      	ldr	r3, [pc, #192]	; (6538 <bt_att_recv+0x150>)
    6478:	9001      	str	r0, [sp, #4]
    647a:	681e      	ldr	r6, [r3, #0]
    647c:	4836      	ldr	r0, [pc, #216]	; (6558 <bt_att_recv+0x170>)
    647e:	4b31      	ldr	r3, [pc, #196]	; (6544 <bt_att_recv+0x15c>)
    6480:	4a33      	ldr	r2, [pc, #204]	; (6550 <bt_att_recv+0x168>)
    6482:	492f      	ldr	r1, [pc, #188]	; (6540 <bt_att_recv+0x158>)
    6484:	47b0      	blx	r6
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    6486:	782d      	ldrb	r5, [r5, #0]
    6488:	4628      	mov	r0, r5
    648a:	f7ff fa95 	bl	59b8 <att_op_get_type>
    648e:	2800      	cmp	r0, #0
    6490:	d0ba      	beq.n	6408 <bt_att_recv+0x20>
	if (!req) {
    6492:	2d00      	cmp	r5, #0
    6494:	d0b8      	beq.n	6408 <bt_att_recv+0x20>
    6496:	2306      	movs	r3, #6
    6498:	2200      	movs	r2, #0
    649a:	4629      	mov	r1, r5
    649c:	6820      	ldr	r0, [r4, #0]
}
    649e:	b005      	add	sp, #20
    64a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    64a4:	f7ff bf7e 	b.w	63a4 <send_err_rsp.part.11>
		} else if (handler->type == ATT_INDICATION &&
    64a8:	2e05      	cmp	r6, #5
    64aa:	d11a      	bne.n	64e2 <bt_att_recv+0xfa>
    64ac:	f3bf 8f5b 	dmb	ish
    64b0:	f104 0294 	add.w	r2, r4, #148	; 0x94
    64b4:	e852 3f00 	ldrex	r3, [r2]
    64b8:	f043 0002 	orr.w	r0, r3, #2
    64bc:	e842 0c00 	strex	ip, r0, [r2]
    64c0:	f1bc 0f00 	cmp.w	ip, #0
    64c4:	d1f6      	bne.n	64b4 <bt_att_recv+0xcc>
    64c6:	f3bf 8f5b 	dmb	ish
    64ca:	079b      	lsls	r3, r3, #30
    64cc:	d509      	bpl.n	64e2 <bt_att_recv+0xfa>
			BT_WARN("Ignoring unexpected indication");
    64ce:	4b19      	ldr	r3, [pc, #100]	; (6534 <bt_att_recv+0x14c>)
    64d0:	9301      	str	r3, [sp, #4]
    64d2:	9300      	str	r3, [sp, #0]
    64d4:	4b18      	ldr	r3, [pc, #96]	; (6538 <bt_att_recv+0x150>)
    64d6:	4a1e      	ldr	r2, [pc, #120]	; (6550 <bt_att_recv+0x168>)
    64d8:	681c      	ldr	r4, [r3, #0]
    64da:	4919      	ldr	r1, [pc, #100]	; (6540 <bt_att_recv+0x158>)
    64dc:	4b19      	ldr	r3, [pc, #100]	; (6544 <bt_att_recv+0x15c>)
    64de:	481f      	ldr	r0, [pc, #124]	; (655c <bt_att_recv+0x174>)
    64e0:	e791      	b.n	6406 <bt_att_recv+0x1e>
	if (buf->len < handler->expect_len) {
    64e2:	eb01 030e 	add.w	r3, r1, lr
    64e6:	89ba      	ldrh	r2, [r7, #12]
    64e8:	7859      	ldrb	r1, [r3, #1]
    64ea:	4291      	cmp	r1, r2
    64ec:	d911      	bls.n	6512 <bt_att_recv+0x12a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    64ee:	4b11      	ldr	r3, [pc, #68]	; (6534 <bt_att_recv+0x14c>)
    64f0:	9303      	str	r3, [sp, #12]
    64f2:	7829      	ldrb	r1, [r5, #0]
    64f4:	9300      	str	r3, [sp, #0]
    64f6:	4b10      	ldr	r3, [pc, #64]	; (6538 <bt_att_recv+0x150>)
    64f8:	9102      	str	r1, [sp, #8]
    64fa:	9201      	str	r2, [sp, #4]
    64fc:	681f      	ldr	r7, [r3, #0]
    64fe:	4a0f      	ldr	r2, [pc, #60]	; (653c <bt_att_recv+0x154>)
    6500:	4b10      	ldr	r3, [pc, #64]	; (6544 <bt_att_recv+0x15c>)
    6502:	490f      	ldr	r1, [pc, #60]	; (6540 <bt_att_recv+0x158>)
    6504:	4816      	ldr	r0, [pc, #88]	; (6560 <bt_att_recv+0x178>)
    6506:	47b8      	blx	r7
	if (handler->type == ATT_REQUEST && err) {
    6508:	2e01      	cmp	r6, #1
    650a:	f47f af7d 	bne.w	6408 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    650e:	2304      	movs	r3, #4
    6510:	e00a      	b.n	6528 <bt_att_recv+0x140>
		err = handler->func(att, buf);
    6512:	685b      	ldr	r3, [r3, #4]
    6514:	4639      	mov	r1, r7
    6516:	4620      	mov	r0, r4
    6518:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    651a:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    651c:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    651e:	f47f af73 	bne.w	6408 <bt_att_recv+0x20>
    6522:	2800      	cmp	r0, #0
    6524:	f43f af70 	beq.w	6408 <bt_att_recv+0x20>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    6528:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    652a:	2900      	cmp	r1, #0
    652c:	f43f af6c 	beq.w	6408 <bt_att_recv+0x20>
    6530:	2200      	movs	r2, #0
    6532:	e7b3      	b.n	649c <bt_att_recv+0xb4>
    6534:	00015359 	.word	0x00015359
    6538:	20003a5c 	.word	0x20003a5c
    653c:	00016754 	.word	0x00016754
    6540:	0001679c 	.word	0x0001679c
    6544:	000173bd 	.word	0x000173bd
    6548:	0001756e 	.word	0x0001756e
    654c:	0001764c 	.word	0x0001764c
    6550:	000167d7 	.word	0x000167d7
    6554:	00017599 	.word	0x00017599
    6558:	00017623 	.word	0x00017623
    655c:	000175c5 	.word	0x000175c5
    6560:	000175f4 	.word	0x000175f4

00006564 <att_read_group_req>:
{
    6564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6568:	898b      	ldrh	r3, [r1, #12]
    656a:	2b06      	cmp	r3, #6
{
    656c:	b08d      	sub	sp, #52	; 0x34
    656e:	4680      	mov	r8, r0
    6570:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6572:	d001      	beq.n	6578 <att_read_group_req+0x14>
    6574:	2b14      	cmp	r3, #20
    6576:	d168      	bne.n	664a <att_read_group_req+0xe6>
	req = (void *)buf->data;
    6578:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    657a:	2104      	movs	r1, #4
	req = (void *)buf->data;
    657c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    6580:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6584:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6586:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    6588:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    658a:	f00d f8f6 	bl	1377a <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    658e:	4621      	mov	r1, r4
    6590:	4638      	mov	r0, r7
    6592:	f7ff fc11 	bl	5db8 <uuid_create>
    6596:	2800      	cmp	r0, #0
    6598:	d059      	beq.n	664e <att_read_group_req+0xea>
	if (!start || !end) {
    659a:	2d00      	cmp	r5, #0
    659c:	d05a      	beq.n	6654 <att_read_group_req+0xf0>
    659e:	2400      	movs	r4, #0
    65a0:	2e00      	cmp	r6, #0
    65a2:	d056      	beq.n	6652 <att_read_group_req+0xee>
	if (start > end) {
    65a4:	42b5      	cmp	r5, r6
    65a6:	d855      	bhi.n	6654 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    65a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    65ac:	4669      	mov	r1, sp
    65ae:	4638      	mov	r0, r7
    65b0:	f88d 4000 	strb.w	r4, [sp]
    65b4:	f8ad 3002 	strh.w	r3, [sp, #2]
    65b8:	f7fb fcc4 	bl	1f44 <bt_uuid_cmp>
    65bc:	bb38      	cbnz	r0, 660e <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    65be:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    65c2:	2214      	movs	r2, #20
    65c4:	2100      	movs	r1, #0
    65c6:	a807      	add	r0, sp, #28
    65c8:	f7fb fb6a 	bl	1ca0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    65cc:	2201      	movs	r2, #1
    65ce:	2111      	movs	r1, #17
    65d0:	4648      	mov	r0, r9
    65d2:	f7ff fe6f 	bl	62b4 <bt_att_create_pdu>
    65d6:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    65d8:	2800      	cmp	r0, #0
    65da:	d038      	beq.n	664e <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    65dc:	2101      	movs	r1, #1
    65de:	3008      	adds	r0, #8
	data.uuid = uuid;
    65e0:	9708      	str	r7, [sp, #32]
	data.att = att;
    65e2:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    65e6:	f00d f8a9 	bl	1373c <net_buf_simple_add>
	data.rsp->len = 0;
    65ea:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    65ec:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    65ee:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    65f0:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    65f2:	4a1c      	ldr	r2, [pc, #112]	; (6664 <att_read_group_req+0x100>)
	data.group = NULL;
    65f4:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    65f6:	4631      	mov	r1, r6
    65f8:	4628      	mov	r0, r5
    65fa:	f000 fea3 	bl	7344 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    65fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6600:	781c      	ldrb	r4, [r3, #0]
    6602:	b9d4      	cbnz	r4, 663a <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    6604:	9809      	ldr	r0, [sp, #36]	; 0x24
    6606:	f00d f867 	bl	136d8 <net_buf_unref>
    660a:	230a      	movs	r3, #10
    660c:	e00c      	b.n	6628 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    660e:	f642 0301 	movw	r3, #10241	; 0x2801
    6612:	a901      	add	r1, sp, #4
    6614:	4638      	mov	r0, r7
    6616:	f88d 4004 	strb.w	r4, [sp, #4]
    661a:	f8ad 3006 	strh.w	r3, [sp, #6]
    661e:	f7fb fc91 	bl	1f44 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6622:	2800      	cmp	r0, #0
    6624:	d0cb      	beq.n	65be <att_read_group_req+0x5a>
    6626:	2310      	movs	r3, #16
    6628:	462a      	mov	r2, r5
    662a:	2110      	movs	r1, #16
    662c:	4648      	mov	r0, r9
    662e:	f7ff feb9 	bl	63a4 <send_err_rsp.part.11>
}
    6632:	4620      	mov	r0, r4
    6634:	b00d      	add	sp, #52	; 0x34
    6636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    663a:	4b0b      	ldr	r3, [pc, #44]	; (6668 <att_read_group_req+0x104>)
    663c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    663e:	2104      	movs	r1, #4
    6640:	4648      	mov	r0, r9
    6642:	f7ff f82f 	bl	56a4 <bt_l2cap_send_cb>
		return 0;
    6646:	2400      	movs	r4, #0
    6648:	e7f3      	b.n	6632 <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    664a:	2404      	movs	r4, #4
    664c:	e7f1      	b.n	6632 <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    664e:	240e      	movs	r4, #14
    6650:	e7ef      	b.n	6632 <att_read_group_req+0xce>
			*err = 0;
    6652:	4635      	mov	r5, r6
    6654:	2301      	movs	r3, #1
    6656:	462a      	mov	r2, r5
    6658:	2110      	movs	r1, #16
    665a:	4648      	mov	r0, r9
    665c:	f7ff fea2 	bl	63a4 <send_err_rsp.part.11>
    6660:	e7f1      	b.n	6646 <att_read_group_req+0xe2>
    6662:	bf00      	nop
    6664:	00005a81 	.word	0x00005a81
    6668:	00005e55 	.word	0x00005e55

0000666c <att_read_mult_req>:
{
    666c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6670:	6804      	ldr	r4, [r0, #0]
{
    6672:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    6674:	2214      	movs	r2, #20
{
    6676:	4606      	mov	r6, r0
    6678:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    667a:	a801      	add	r0, sp, #4
    667c:	2100      	movs	r1, #0
    667e:	f7fb fb0f 	bl	1ca0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    6682:	2200      	movs	r2, #0
    6684:	210f      	movs	r1, #15
    6686:	4620      	mov	r0, r4
    6688:	f7ff fe14 	bl	62b4 <bt_att_create_pdu>
    668c:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    668e:	b368      	cbz	r0, 66ec <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6690:	f8df 9060 	ldr.w	r9, [pc, #96]	; 66f4 <att_read_mult_req+0x88>
	data.att = att;
    6694:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    6696:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    669a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    669e:	89ab      	ldrh	r3, [r5, #12]
    66a0:	2b01      	cmp	r3, #1
    66a2:	d806      	bhi.n	66b2 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    66a4:	4b12      	ldr	r3, [pc, #72]	; (66f0 <att_read_mult_req+0x84>)
    66a6:	9a03      	ldr	r2, [sp, #12]
    66a8:	2104      	movs	r1, #4
    66aa:	4620      	mov	r0, r4
    66ac:	f7fe fffa 	bl	56a4 <bt_l2cap_send_cb>
    66b0:	e018      	b.n	66e4 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    66b2:	4638      	mov	r0, r7
    66b4:	f00d f871 	bl	1379a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    66b8:	ab01      	add	r3, sp, #4
    66ba:	464a      	mov	r2, r9
    66bc:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    66be:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    66c0:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    66c4:	f000 fe3e 	bl	7344 <bt_gatt_foreach_attr>
		if (data.err) {
    66c8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    66cc:	2b00      	cmp	r3, #0
    66ce:	d0e6      	beq.n	669e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    66d0:	9803      	ldr	r0, [sp, #12]
    66d2:	f00d f801 	bl	136d8 <net_buf_unref>
    66d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    66da:	4632      	mov	r2, r6
    66dc:	210e      	movs	r1, #14
    66de:	4620      	mov	r0, r4
    66e0:	f7ff fe60 	bl	63a4 <send_err_rsp.part.11>
	return 0;
    66e4:	2000      	movs	r0, #0
}
    66e6:	b007      	add	sp, #28
    66e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    66ec:	200e      	movs	r0, #14
    66ee:	e7fa      	b.n	66e6 <att_read_mult_req+0x7a>
    66f0:	00005e55 	.word	0x00005e55
    66f4:	0000623d 	.word	0x0000623d

000066f8 <att_read_rsp>:
{
    66f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66fc:	4607      	mov	r7, r0
    66fe:	b086      	sub	sp, #24
    6700:	460c      	mov	r4, r1
    6702:	4690      	mov	r8, r2
	if (!handle) {
    6704:	461d      	mov	r5, r3
    6706:	b3a3      	cbz	r3, 6772 <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    6708:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    670a:	2214      	movs	r2, #20
    670c:	2100      	movs	r1, #0
    670e:	a801      	add	r0, sp, #4
    6710:	f7fb fac6 	bl	1ca0 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    6714:	2200      	movs	r2, #0
    6716:	4641      	mov	r1, r8
    6718:	4630      	mov	r0, r6
    671a:	f7ff fdcb 	bl	62b4 <bt_att_create_pdu>
    671e:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    6720:	b348      	cbz	r0, 6776 <att_read_rsp+0x7e>
	data.offset = offset;
    6722:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    6726:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    672a:	2301      	movs	r3, #1
    672c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6730:	4a12      	ldr	r2, [pc, #72]	; (677c <att_read_rsp+0x84>)
	data.att = att;
    6732:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6734:	ab01      	add	r3, sp, #4
    6736:	4629      	mov	r1, r5
    6738:	4628      	mov	r0, r5
    673a:	f000 fe03 	bl	7344 <bt_gatt_foreach_attr>
	if (data.err) {
    673e:	f89d 7014 	ldrb.w	r7, [sp, #20]
    6742:	b17f      	cbz	r7, 6764 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    6744:	9803      	ldr	r0, [sp, #12]
    6746:	f00c ffc7 	bl	136d8 <net_buf_unref>
	if (!req) {
    674a:	b13c      	cbz	r4, 675c <att_read_rsp+0x64>
    674c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6750:	462a      	mov	r2, r5
    6752:	4621      	mov	r1, r4
    6754:	4630      	mov	r0, r6
    6756:	f7ff fe25 	bl	63a4 <send_err_rsp.part.11>
		return 0;
    675a:	2400      	movs	r4, #0
}
    675c:	4620      	mov	r0, r4
    675e:	b006      	add	sp, #24
    6760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6764:	4b06      	ldr	r3, [pc, #24]	; (6780 <att_read_rsp+0x88>)
    6766:	9a03      	ldr	r2, [sp, #12]
    6768:	2104      	movs	r1, #4
    676a:	4630      	mov	r0, r6
    676c:	f7fe ff9a 	bl	56a4 <bt_l2cap_send_cb>
    6770:	e7f3      	b.n	675a <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    6772:	2401      	movs	r4, #1
    6774:	e7f2      	b.n	675c <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    6776:	240e      	movs	r4, #14
    6778:	e7f0      	b.n	675c <att_read_rsp+0x64>
    677a:	bf00      	nop
    677c:	0000623d 	.word	0x0000623d
    6780:	00005e55 	.word	0x00005e55

00006784 <att_read_blob_req>:
{
    6784:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    6786:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    6788:	8813      	ldrh	r3, [r2, #0]
    678a:	8852      	ldrh	r2, [r2, #2]
    678c:	9200      	str	r2, [sp, #0]
    678e:	210c      	movs	r1, #12
    6790:	220d      	movs	r2, #13
    6792:	f7ff ffb1 	bl	66f8 <att_read_rsp>
}
    6796:	b003      	add	sp, #12
    6798:	f85d fb04 	ldr.w	pc, [sp], #4

0000679c <att_read_req>:
{
    679c:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    679e:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    67a0:	2200      	movs	r2, #0
    67a2:	881b      	ldrh	r3, [r3, #0]
    67a4:	9200      	str	r2, [sp, #0]
    67a6:	210a      	movs	r1, #10
    67a8:	220b      	movs	r2, #11
    67aa:	f7ff ffa5 	bl	66f8 <att_read_rsp>
}
    67ae:	b003      	add	sp, #12
    67b0:	f85d fb04 	ldr.w	pc, [sp], #4

000067b4 <att_read_type_req>:
{
    67b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    67b8:	898b      	ldrh	r3, [r1, #12]
    67ba:	2b06      	cmp	r3, #6
{
    67bc:	b08d      	sub	sp, #52	; 0x34
    67be:	4607      	mov	r7, r0
    67c0:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    67c2:	d001      	beq.n	67c8 <att_read_type_req+0x14>
    67c4:	2b14      	cmp	r3, #20
    67c6:	d152      	bne.n	686e <att_read_type_req+0xba>
	req = (void *)buf->data;
    67c8:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    67ca:	2104      	movs	r1, #4
	req = (void *)buf->data;
    67cc:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    67d0:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    67d4:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    67d6:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    67d8:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    67dc:	f00c ffcd 	bl	1377a <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    67e0:	4631      	mov	r1, r6
    67e2:	4640      	mov	r0, r8
    67e4:	f7ff fae8 	bl	5db8 <uuid_create>
    67e8:	b198      	cbz	r0, 6812 <att_read_type_req+0x5e>
	if (!start || !end) {
    67ea:	2d00      	cmp	r5, #0
    67ec:	d042      	beq.n	6874 <att_read_type_req+0xc0>
    67ee:	2c00      	cmp	r4, #0
    67f0:	d03f      	beq.n	6872 <att_read_type_req+0xbe>
	if (start > end) {
    67f2:	42a5      	cmp	r5, r4
    67f4:	d83e      	bhi.n	6874 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    67f6:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    67f8:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    67fa:	2100      	movs	r1, #0
    67fc:	eb0d 0002 	add.w	r0, sp, r2
    6800:	f7fb fa4e 	bl	1ca0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    6804:	2201      	movs	r2, #1
    6806:	2109      	movs	r1, #9
    6808:	4630      	mov	r0, r6
    680a:	f7ff fd53 	bl	62b4 <bt_att_create_pdu>
    680e:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    6810:	b908      	cbnz	r0, 6816 <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    6812:	240e      	movs	r4, #14
    6814:	e027      	b.n	6866 <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6816:	2101      	movs	r1, #1
    6818:	3008      	adds	r0, #8
	data.att = att;
    681a:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    681c:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6820:	f00c ff8c 	bl	1373c <net_buf_simple_add>
	data.rsp->len = 0;
    6824:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6826:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6828:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    682a:	4621      	mov	r1, r4
	data.rsp->len = 0;
    682c:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    682e:	4a14      	ldr	r2, [pc, #80]	; (6880 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6830:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6834:	4628      	mov	r0, r5
    6836:	ab06      	add	r3, sp, #24
    6838:	f000 fd84 	bl	7344 <bt_gatt_foreach_attr>
	if (data.err) {
    683c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    6840:	b15c      	cbz	r4, 685a <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    6842:	9808      	ldr	r0, [sp, #32]
    6844:	f00c ff48 	bl	136d8 <net_buf_unref>
    6848:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    684c:	462a      	mov	r2, r5
    684e:	2108      	movs	r1, #8
    6850:	4630      	mov	r0, r6
    6852:	f7ff fda7 	bl	63a4 <send_err_rsp.part.11>
		return 0;
    6856:	2400      	movs	r4, #0
    6858:	e005      	b.n	6866 <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    685a:	4b0a      	ldr	r3, [pc, #40]	; (6884 <att_read_type_req+0xd0>)
    685c:	9a08      	ldr	r2, [sp, #32]
    685e:	2104      	movs	r1, #4
    6860:	4630      	mov	r0, r6
    6862:	f7fe ff1f 	bl	56a4 <bt_l2cap_send_cb>
}
    6866:	4620      	mov	r0, r4
    6868:	b00d      	add	sp, #52	; 0x34
    686a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    686e:	2404      	movs	r4, #4
    6870:	e7f9      	b.n	6866 <att_read_type_req+0xb2>
			*err = 0;
    6872:	4625      	mov	r5, r4
    6874:	2301      	movs	r3, #1
    6876:	462a      	mov	r2, r5
    6878:	2108      	movs	r1, #8
    687a:	4648      	mov	r0, r9
    687c:	e7e9      	b.n	6852 <att_read_type_req+0x9e>
    687e:	bf00      	nop
    6880:	00005cfd 	.word	0x00005cfd
    6884:	00005e55 	.word	0x00005e55

00006888 <att_find_type_req>:
{
    6888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    688c:	f8d0 9000 	ldr.w	r9, [r0]
{
    6890:	4680      	mov	r8, r0
	req = (void *)buf->data;
    6892:	4608      	mov	r0, r1
{
    6894:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    6896:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    689a:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    689c:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    689e:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    68a0:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    68a2:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    68a4:	f00c ff69 	bl	1377a <net_buf_simple_pull>
    68a8:	4682      	mov	sl, r0
	if (!start || !end) {
    68aa:	2d00      	cmp	r5, #0
    68ac:	d057      	beq.n	695e <att_find_type_req+0xd6>
    68ae:	2400      	movs	r4, #0
    68b0:	2f00      	cmp	r7, #0
    68b2:	d053      	beq.n	695c <att_find_type_req+0xd4>
	if (start > end) {
    68b4:	42bd      	cmp	r5, r7
    68b6:	d852      	bhi.n	695e <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    68b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    68bc:	a902      	add	r1, sp, #8
    68be:	a801      	add	r0, sp, #4
    68c0:	f8ad 6006 	strh.w	r6, [sp, #6]
    68c4:	f88d 4004 	strb.w	r4, [sp, #4]
    68c8:	f88d 4008 	strb.w	r4, [sp, #8]
    68cc:	f8ad 300a 	strh.w	r3, [sp, #10]
    68d0:	f7fb fb38 	bl	1f44 <bt_uuid_cmp>
    68d4:	4606      	mov	r6, r0
    68d6:	b148      	cbz	r0, 68ec <att_find_type_req+0x64>
    68d8:	230a      	movs	r3, #10
    68da:	462a      	mov	r2, r5
    68dc:	2106      	movs	r1, #6
    68de:	4648      	mov	r0, r9
    68e0:	f7ff fd60 	bl	63a4 <send_err_rsp.part.11>
}
    68e4:	4620      	mov	r0, r4
    68e6:	b009      	add	sp, #36	; 0x24
    68e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    68ec:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    68f0:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    68f4:	2214      	movs	r2, #20
    68f6:	4631      	mov	r1, r6
    68f8:	a803      	add	r0, sp, #12
    68fa:	f7fb f9d1 	bl	1ca0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    68fe:	4632      	mov	r2, r6
    6900:	2107      	movs	r1, #7
    6902:	4648      	mov	r0, r9
    6904:	f7ff fcd6 	bl	62b4 <bt_att_create_pdu>
    6908:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    690a:	b328      	cbz	r0, 6958 <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    690c:	230a      	movs	r3, #10
    690e:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6912:	4a14      	ldr	r2, [pc, #80]	; (6964 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    6914:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6918:	ab03      	add	r3, sp, #12
    691a:	4639      	mov	r1, r7
    691c:	4628      	mov	r0, r5
	data.att = att;
    691e:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    6922:	9605      	str	r6, [sp, #20]
	data.value = value;
    6924:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6928:	f000 fd0c 	bl	7344 <bt_gatt_foreach_attr>
	if (data.err) {
    692c:	f89d 401d 	ldrb.w	r4, [sp, #29]
    6930:	b15c      	cbz	r4, 694a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    6932:	9804      	ldr	r0, [sp, #16]
    6934:	f00c fed0 	bl	136d8 <net_buf_unref>
    6938:	f89d 301d 	ldrb.w	r3, [sp, #29]
    693c:	462a      	mov	r2, r5
    693e:	2106      	movs	r1, #6
    6940:	4648      	mov	r0, r9
    6942:	f7ff fd2f 	bl	63a4 <send_err_rsp.part.11>
		return 0;
    6946:	2400      	movs	r4, #0
    6948:	e7cc      	b.n	68e4 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    694a:	4b07      	ldr	r3, [pc, #28]	; (6968 <att_find_type_req+0xe0>)
    694c:	9a04      	ldr	r2, [sp, #16]
    694e:	2104      	movs	r1, #4
    6950:	4648      	mov	r0, r9
    6952:	f7fe fea7 	bl	56a4 <bt_l2cap_send_cb>
    6956:	e7c5      	b.n	68e4 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    6958:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    695a:	e7c3      	b.n	68e4 <att_find_type_req+0x5c>
			*err = 0;
    695c:	463d      	mov	r5, r7
    695e:	2301      	movs	r3, #1
    6960:	e7ec      	b.n	693c <att_find_type_req+0xb4>
    6962:	bf00      	nop
    6964:	00005be9 	.word	0x00005be9
    6968:	00005e55 	.word	0x00005e55

0000696c <att_find_info_req>:
{
    696c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    696e:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    6970:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6972:	881d      	ldrh	r5, [r3, #0]
{
    6974:	b085      	sub	sp, #20
    6976:	4607      	mov	r7, r0
	if (!start || !end) {
    6978:	b375      	cbz	r5, 69d8 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    697a:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    697c:	b35c      	cbz	r4, 69d6 <att_find_info_req+0x6a>
	if (start > end) {
    697e:	42a5      	cmp	r5, r4
    6980:	d82a      	bhi.n	69d8 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    6982:	2210      	movs	r2, #16
    6984:	2100      	movs	r1, #0
    6986:	4668      	mov	r0, sp
    6988:	f7fb f98a 	bl	1ca0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    698c:	2200      	movs	r2, #0
    698e:	2105      	movs	r1, #5
    6990:	4630      	mov	r0, r6
    6992:	f7ff fc8f 	bl	62b4 <bt_att_create_pdu>
    6996:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    6998:	b910      	cbnz	r0, 69a0 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    699a:	200e      	movs	r0, #14
}
    699c:	b005      	add	sp, #20
    699e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    69a0:	4621      	mov	r1, r4
    69a2:	466b      	mov	r3, sp
    69a4:	4a0d      	ldr	r2, [pc, #52]	; (69dc <att_find_info_req+0x70>)
	data.att = att;
    69a6:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    69a8:	4628      	mov	r0, r5
    69aa:	f000 fccb 	bl	7344 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    69ae:	9c02      	ldr	r4, [sp, #8]
    69b0:	b94c      	cbnz	r4, 69c6 <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    69b2:	9801      	ldr	r0, [sp, #4]
    69b4:	f00c fe90 	bl	136d8 <net_buf_unref>
    69b8:	230a      	movs	r3, #10
    69ba:	462a      	mov	r2, r5
    69bc:	2104      	movs	r1, #4
    69be:	4630      	mov	r0, r6
    69c0:	f7ff fcf0 	bl	63a4 <send_err_rsp.part.11>
    69c4:	e005      	b.n	69d2 <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    69c6:	4b06      	ldr	r3, [pc, #24]	; (69e0 <att_find_info_req+0x74>)
    69c8:	9a01      	ldr	r2, [sp, #4]
    69ca:	2104      	movs	r1, #4
    69cc:	4630      	mov	r0, r6
    69ce:	f7fe fe69 	bl	56a4 <bt_l2cap_send_cb>
		return 0;
    69d2:	2000      	movs	r0, #0
    69d4:	e7e2      	b.n	699c <att_find_info_req+0x30>
			*err = 0;
    69d6:	4625      	mov	r5, r4
    69d8:	2301      	movs	r3, #1
    69da:	e7ee      	b.n	69ba <att_find_info_req+0x4e>
    69dc:	00005b4f 	.word	0x00005b4f
    69e0:	00005e55 	.word	0x00005e55

000069e4 <att_write_rsp.part.12.constprop.17>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    69e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69e8:	b086      	sub	sp, #24
    69ea:	4690      	mov	r8, r2
    69ec:	4605      	mov	r5, r0
    69ee:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    69f0:	2218      	movs	r2, #24
    69f2:	2100      	movs	r1, #0
    69f4:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    69f6:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    69f8:	f7fb f952 	bl	1ca0 <memset>
	if (rsp) {
    69fc:	f1b8 0f00 	cmp.w	r8, #0
    6a00:	d11f      	bne.n	6a42 <att_write_rsp.part.12.constprop.17+0x5e>
	data.offset = offset;
    6a02:	2300      	movs	r3, #0
    6a04:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    6a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6a0a:	9303      	str	r3, [sp, #12]
	data.len = len;
    6a0c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    6a10:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6a14:	2301      	movs	r3, #1
    6a16:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6a1a:	4a1b      	ldr	r2, [pc, #108]	; (6a88 <att_write_rsp.part.12.constprop.17+0xa4>)
	data.conn = conn;
    6a1c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6a1e:	466b      	mov	r3, sp
    6a20:	4639      	mov	r1, r7
    6a22:	4638      	mov	r0, r7
	data.op = op;
    6a24:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6a28:	f000 fc8c 	bl	7344 <bt_gatt_foreach_attr>
	if (data.err) {
    6a2c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6a30:	b98c      	cbnz	r4, 6a56 <att_write_rsp.part.12.constprop.17+0x72>
	if (data.buf) {
    6a32:	9a01      	ldr	r2, [sp, #4]
    6a34:	b1b2      	cbz	r2, 6a64 <att_write_rsp.part.12.constprop.17+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    6a36:	4b15      	ldr	r3, [pc, #84]	; (6a8c <att_write_rsp.part.12.constprop.17+0xa8>)
    6a38:	2104      	movs	r1, #4
    6a3a:	4628      	mov	r0, r5
    6a3c:	f7fe fe32 	bl	56a4 <bt_l2cap_send_cb>
    6a40:	e011      	b.n	6a66 <att_write_rsp.part.12.constprop.17+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    6a42:	2200      	movs	r2, #0
    6a44:	4641      	mov	r1, r8
    6a46:	4628      	mov	r0, r5
    6a48:	f7ff fc34 	bl	62b4 <bt_att_create_pdu>
    6a4c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    6a4e:	2800      	cmp	r0, #0
    6a50:	d1d7      	bne.n	6a02 <att_write_rsp.part.12.constprop.17+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    6a52:	240e      	movs	r4, #14
    6a54:	e007      	b.n	6a66 <att_write_rsp.part.12.constprop.17+0x82>
		if (rsp) {
    6a56:	f1b8 0f00 	cmp.w	r8, #0
    6a5a:	d00f      	beq.n	6a7c <att_write_rsp.part.12.constprop.17+0x98>
			net_buf_unref(data.buf);
    6a5c:	9801      	ldr	r0, [sp, #4]
    6a5e:	f00c fe3b 	bl	136d8 <net_buf_unref>
	if (!req) {
    6a62:	b926      	cbnz	r6, 6a6e <att_write_rsp.part.12.constprop.17+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6a64:	2400      	movs	r4, #0
}
    6a66:	4620      	mov	r0, r4
    6a68:	b006      	add	sp, #24
    6a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a6e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6a72:	463a      	mov	r2, r7
    6a74:	4631      	mov	r1, r6
    6a76:	4628      	mov	r0, r5
    6a78:	f7ff fc94 	bl	63a4 <send_err_rsp.part.11>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6a7c:	2e18      	cmp	r6, #24
    6a7e:	d1f1      	bne.n	6a64 <att_write_rsp.part.12.constprop.17+0x80>
    6a80:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6a84:	e7ef      	b.n	6a66 <att_write_rsp.part.12.constprop.17+0x82>
    6a86:	bf00      	nop
    6a88:	00005f3d 	.word	0x00005f3d
    6a8c:	00005e55 	.word	0x00005e55

00006a90 <att_signed_write_cmd>:
{
    6a90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    6a94:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    6a96:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    6a98:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    6a9c:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    6a9e:	4620      	mov	r0, r4
    6aa0:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    6aa2:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    6aa6:	f00c fe60 	bl	1376a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    6aaa:	4629      	mov	r1, r5
    6aac:	4630      	mov	r0, r6
    6aae:	f000 fda6 	bl	75fe <bt_smp_sign_verify>
	if (err) {
    6ab2:	4607      	mov	r7, r0
    6ab4:	b168      	cbz	r0, 6ad2 <att_signed_write_cmd+0x42>
		BT_ERR("Error verifying data");
    6ab6:	4b14      	ldr	r3, [pc, #80]	; (6b08 <att_signed_write_cmd+0x78>)
    6ab8:	9301      	str	r3, [sp, #4]
    6aba:	9300      	str	r3, [sp, #0]
    6abc:	4b13      	ldr	r3, [pc, #76]	; (6b0c <att_signed_write_cmd+0x7c>)
    6abe:	4814      	ldr	r0, [pc, #80]	; (6b10 <att_signed_write_cmd+0x80>)
    6ac0:	681c      	ldr	r4, [r3, #0]
    6ac2:	4a14      	ldr	r2, [pc, #80]	; (6b14 <att_signed_write_cmd+0x84>)
    6ac4:	4b14      	ldr	r3, [pc, #80]	; (6b18 <att_signed_write_cmd+0x88>)
    6ac6:	4915      	ldr	r1, [pc, #84]	; (6b1c <att_signed_write_cmd+0x8c>)
    6ac8:	47a0      	blx	r4
    6aca:	2000      	movs	r0, #0
}
    6acc:	b002      	add	sp, #8
    6ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    6ad2:	2101      	movs	r1, #1
    6ad4:	4620      	mov	r0, r4
    6ad6:	f00c fe50 	bl	1377a <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    6ada:	2102      	movs	r1, #2
    6adc:	4620      	mov	r0, r4
    6ade:	f00c fe4c 	bl	1377a <net_buf_simple_pull>
	if (!handle) {
    6ae2:	f1b8 0f00 	cmp.w	r8, #0
    6ae6:	d00c      	beq.n	6b02 <att_signed_write_cmd+0x72>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    6ae8:	7b2b      	ldrb	r3, [r5, #12]
    6aea:	3b0c      	subs	r3, #12
    6aec:	b2db      	uxtb	r3, r3
    6aee:	9301      	str	r3, [sp, #4]
    6af0:	68ab      	ldr	r3, [r5, #8]
    6af2:	9300      	str	r3, [sp, #0]
    6af4:	463a      	mov	r2, r7
    6af6:	4643      	mov	r3, r8
    6af8:	4639      	mov	r1, r7
    6afa:	4630      	mov	r0, r6
    6afc:	f7ff ff72 	bl	69e4 <att_write_rsp.part.12.constprop.17>
    6b00:	e7e4      	b.n	6acc <att_signed_write_cmd+0x3c>
		return BT_ATT_ERR_INVALID_HANDLE;
    6b02:	2001      	movs	r0, #1
    6b04:	e7e2      	b.n	6acc <att_signed_write_cmd+0x3c>
    6b06:	bf00      	nop
    6b08:	00015359 	.word	0x00015359
    6b0c:	20003a5c 	.word	0x20003a5c
    6b10:	000174c3 	.word	0x000174c3
    6b14:	00016754 	.word	0x00016754
    6b18:	000173a8 	.word	0x000173a8
    6b1c:	0001679c 	.word	0x0001679c

00006b20 <att_write_cmd>:
{
    6b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6b22:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6b24:	f101 0008 	add.w	r0, r1, #8
{
    6b28:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6b2a:	f00c fe36 	bl	1379a <net_buf_simple_pull_le16>
	if (!handle) {
    6b2e:	4603      	mov	r3, r0
    6b30:	b150      	cbz	r0, 6b48 <att_write_cmd+0x28>
    6b32:	7b22      	ldrb	r2, [r4, #12]
    6b34:	9201      	str	r2, [sp, #4]
    6b36:	68a2      	ldr	r2, [r4, #8]
    6b38:	9200      	str	r2, [sp, #0]
    6b3a:	2200      	movs	r2, #0
    6b3c:	4611      	mov	r1, r2
    6b3e:	4628      	mov	r0, r5
    6b40:	f7ff ff50 	bl	69e4 <att_write_rsp.part.12.constprop.17>
}
    6b44:	b003      	add	sp, #12
    6b46:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6b48:	2001      	movs	r0, #1
    6b4a:	e7fb      	b.n	6b44 <att_write_cmd+0x24>

00006b4c <att_write_req>:
{
    6b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6b4e:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6b50:	f101 0008 	add.w	r0, r1, #8
{
    6b54:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6b56:	f00c fe20 	bl	1379a <net_buf_simple_pull_le16>
	if (!handle) {
    6b5a:	4603      	mov	r3, r0
    6b5c:	b150      	cbz	r0, 6b74 <att_write_req+0x28>
    6b5e:	7b22      	ldrb	r2, [r4, #12]
    6b60:	9201      	str	r2, [sp, #4]
    6b62:	68a2      	ldr	r2, [r4, #8]
    6b64:	9200      	str	r2, [sp, #0]
    6b66:	2112      	movs	r1, #18
    6b68:	2213      	movs	r2, #19
    6b6a:	4628      	mov	r0, r5
    6b6c:	f7ff ff3a 	bl	69e4 <att_write_rsp.part.12.constprop.17>
}
    6b70:	b003      	add	sp, #12
    6b72:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6b74:	2001      	movs	r0, #1
    6b76:	e7fb      	b.n	6b70 <att_write_req+0x24>

00006b78 <bt_att_init>:

void bt_att_init(void)
{
    6b78:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6b7a:	4803      	ldr	r0, [pc, #12]	; (6b88 <bt_att_init+0x10>)
    6b7c:	f7fe fcd2 	bl	5524 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    6b80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    6b84:	f000 bbc8 	b.w	7318 <bt_gatt_init>
    6b88:	20003bb8 	.word	0x20003bb8

00006b8c <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    6b8c:	b510      	push	{r4, lr}
    6b8e:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    6b90:	b1d8      	cbz	r0, 6bca <bt_att_req_send+0x3e>
    6b92:	b1d1      	cbz	r1, 6bca <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6b94:	f7ff f98c 	bl	5eb0 <att_chan_get>
	if (!att) {
    6b98:	4603      	mov	r3, r0
    6b9a:	b1c8      	cbz	r0, 6bd0 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    6b9c:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    6ba0:	b172      	cbz	r2, 6bc0 <bt_att_req_send+0x34>
	parent->next = child;
    6ba2:	2000      	movs	r0, #0
    6ba4:	6020      	str	r0, [r4, #0]
    6ba6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    6baa:	b92a      	cbnz	r2, 6bb8 <bt_att_req_send+0x2c>
	list->tail = node;
    6bac:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    6bb0:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    6bb4:	4610      	mov	r0, r2
    6bb6:	bd10      	pop	{r4, pc}
	parent->next = child;
    6bb8:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6bba:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    6bbe:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    6bc0:	4621      	mov	r1, r4
}
    6bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    6bc6:	f7ff b9e5 	b.w	5f94 <att_send_req>
		return -EINVAL;
    6bca:	f06f 0015 	mvn.w	r0, #21
    6bce:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    6bd0:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    6bd4:	bd10      	pop	{r4, pc}

00006bd6 <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    6bd6:	4770      	bx	lr

00006bd8 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    6bd8:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    6bda:	2000      	movs	r0, #0
    6bdc:	4770      	bx	lr

00006bde <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    6bde:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    6be0:	2300      	movs	r3, #0
    6be2:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    6be4:	461a      	mov	r2, r3
    6be6:	42aa      	cmp	r2, r5
    6be8:	d107      	bne.n	6bfa <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    6bea:	890a      	ldrh	r2, [r1, #8]
    6bec:	429a      	cmp	r2, r3
    6bee:	d00d      	beq.n	6c0c <gatt_ccc_changed+0x2e>
		ccc->value = value;
    6bf0:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    6bf2:	68ca      	ldr	r2, [r1, #12]
	}
}
    6bf4:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    6bf6:	4619      	mov	r1, r3
    6bf8:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    6bfa:	680c      	ldr	r4, [r1, #0]
    6bfc:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    6c00:	3201      	adds	r2, #1
    6c02:	8924      	ldrh	r4, [r4, #8]
    6c04:	42a3      	cmp	r3, r4
    6c06:	bf38      	it	cc
    6c08:	4623      	movcc	r3, r4
    6c0a:	e7ec      	b.n	6be6 <gatt_ccc_changed+0x8>
}
    6c0c:	bc30      	pop	{r4, r5}
    6c0e:	4770      	bx	lr

00006c10 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    6c10:	b410      	push	{r4}
    6c12:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    6c14:	699c      	ldr	r4, [r3, #24]
    6c16:	460a      	mov	r2, r1
    6c18:	6959      	ldr	r1, [r3, #20]
    6c1a:	4623      	mov	r3, r4
}
    6c1c:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    6c1e:	4718      	bx	r3

00006c20 <gatt_register>:
{
    6c20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    6c22:	4a1f      	ldr	r2, [pc, #124]	; (6ca0 <gatt_register+0x80>)
    6c24:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    6c26:	e890 0022 	ldmia.w	r0, {r1, r5}
	if (sys_slist_is_empty(&db)) {
    6c2a:	b14b      	cbz	r3, 6c40 <gatt_register+0x20>
    6c2c:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    6c2e:	2b00      	cmp	r3, #0
    6c30:	d033      	beq.n	6c9a <gatt_register+0x7a>
	handle = last->attrs[last->attr_count - 1].handle;
    6c32:	e913 0018 	ldmdb	r3, {r3, r4}
    6c36:	2614      	movs	r6, #20
    6c38:	fb06 3304 	mla	r3, r6, r4, r3
    6c3c:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    6c40:	b2ad      	uxth	r5, r5
    6c42:	2414      	movs	r4, #20
    6c44:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    6c48:	b109      	cbz	r1, 6c4e <gatt_register+0x2e>
    6c4a:	42a9      	cmp	r1, r5
    6c4c:	d108      	bne.n	6c60 <gatt_register+0x40>
	parent->next = child;
    6c4e:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    6c50:	f100 0108 	add.w	r1, r0, #8
    6c54:	6083      	str	r3, [r0, #8]
    6c56:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    6c58:	b9d8      	cbnz	r0, 6c92 <gatt_register+0x72>
	list->tail = node;
    6c5a:	6051      	str	r1, [r2, #4]
	list->head = node;
    6c5c:	6011      	str	r1, [r2, #0]
    6c5e:	e016      	b.n	6c8e <gatt_register+0x6e>
		if (!attrs->handle) {
    6c60:	8a0c      	ldrh	r4, [r1, #16]
    6c62:	b92c      	cbnz	r4, 6c70 <gatt_register+0x50>
			attrs->handle = ++handle;
    6c64:	3301      	adds	r3, #1
    6c66:	b29c      	uxth	r4, r3
    6c68:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    6c6a:	3114      	adds	r1, #20
    6c6c:	4623      	mov	r3, r4
    6c6e:	e7eb      	b.n	6c48 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    6c70:	42a3      	cmp	r3, r4
    6c72:	d3fa      	bcc.n	6c6a <gatt_register+0x4a>
			BT_ERR("Unable to register handle 0x%04x",
    6c74:	4b0b      	ldr	r3, [pc, #44]	; (6ca4 <gatt_register+0x84>)
    6c76:	9302      	str	r3, [sp, #8]
    6c78:	e88d 0018 	stmia.w	sp, {r3, r4}
    6c7c:	4b0a      	ldr	r3, [pc, #40]	; (6ca8 <gatt_register+0x88>)
    6c7e:	480b      	ldr	r0, [pc, #44]	; (6cac <gatt_register+0x8c>)
    6c80:	681c      	ldr	r4, [r3, #0]
    6c82:	4a0b      	ldr	r2, [pc, #44]	; (6cb0 <gatt_register+0x90>)
    6c84:	4b0b      	ldr	r3, [pc, #44]	; (6cb4 <gatt_register+0x94>)
    6c86:	490c      	ldr	r1, [pc, #48]	; (6cb8 <gatt_register+0x98>)
    6c88:	47a0      	blx	r4
			return -EINVAL;
    6c8a:	f06f 0015 	mvn.w	r0, #21
}
    6c8e:	b004      	add	sp, #16
    6c90:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    6c92:	6001      	str	r1, [r0, #0]
	list->tail = node;
    6c94:	6051      	str	r1, [r2, #4]
	return 0;
    6c96:	4618      	mov	r0, r3
    6c98:	e7f9      	b.n	6c8e <gatt_register+0x6e>
	handle = last->attrs[last->attr_count - 1].handle;
    6c9a:	681b      	ldr	r3, [r3, #0]
    6c9c:	deff      	udf	#255	; 0xff
    6c9e:	bf00      	nop
    6ca0:	20000584 	.word	0x20000584
    6ca4:	00015359 	.word	0x00015359
    6ca8:	20003a5c 	.word	0x20003a5c
    6cac:	0001787e 	.word	0x0001787e
    6cb0:	00016754 	.word	0x00016754
    6cb4:	00017724 	.word	0x00017724
    6cb8:	0001679c 	.word	0x0001679c

00006cbc <gatt_notify>:
{
    6cbc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6cc0:	468a      	mov	sl, r1
    6cc2:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6cc4:	211b      	movs	r1, #27
    6cc6:	1c9a      	adds	r2, r3, #2
{
    6cc8:	4680      	mov	r8, r0
    6cca:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6ccc:	f7ff faf2 	bl	62b4 <bt_att_create_pdu>
	if (!buf) {
    6cd0:	4604      	mov	r4, r0
    6cd2:	b970      	cbnz	r0, 6cf2 <gatt_notify+0x36>
		BT_WARN("No buffer available to send notification");
    6cd4:	4b14      	ldr	r3, [pc, #80]	; (6d28 <gatt_notify+0x6c>)
    6cd6:	9301      	str	r3, [sp, #4]
    6cd8:	9300      	str	r3, [sp, #0]
    6cda:	4b14      	ldr	r3, [pc, #80]	; (6d2c <gatt_notify+0x70>)
    6cdc:	4814      	ldr	r0, [pc, #80]	; (6d30 <gatt_notify+0x74>)
    6cde:	681c      	ldr	r4, [r3, #0]
    6ce0:	4a14      	ldr	r2, [pc, #80]	; (6d34 <gatt_notify+0x78>)
    6ce2:	4b15      	ldr	r3, [pc, #84]	; (6d38 <gatt_notify+0x7c>)
    6ce4:	4915      	ldr	r1, [pc, #84]	; (6d3c <gatt_notify+0x80>)
    6ce6:	47a0      	blx	r4
    6ce8:	f06f 000b 	mvn.w	r0, #11
}
    6cec:	b002      	add	sp, #8
    6cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    6cf2:	f100 0708 	add.w	r7, r0, #8
    6cf6:	2102      	movs	r1, #2
    6cf8:	4638      	mov	r0, r7
    6cfa:	f00c fd1f 	bl	1373c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    6cfe:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    6d00:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    6d02:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    6d06:	4638      	mov	r0, r7
    6d08:	f00c fd18 	bl	1373c <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    6d0c:	4632      	mov	r2, r6
    6d0e:	4649      	mov	r1, r9
    6d10:	4628      	mov	r0, r5
    6d12:	f7fa ff99 	bl	1c48 <memcpy>
    6d16:	4640      	mov	r0, r8
    6d18:	2300      	movs	r3, #0
    6d1a:	4622      	mov	r2, r4
    6d1c:	2104      	movs	r1, #4
    6d1e:	f7fe fcc1 	bl	56a4 <bt_l2cap_send_cb>
	return 0;
    6d22:	2000      	movs	r0, #0
    6d24:	e7e2      	b.n	6cec <gatt_notify+0x30>
    6d26:	bf00      	nop
    6d28:	00015359 	.word	0x00015359
    6d2c:	20003a5c 	.word	0x20003a5c
    6d30:	00017845 	.word	0x00017845
    6d34:	000167d7 	.word	0x000167d7
    6d38:	00017760 	.word	0x00017760
    6d3c:	0001679c 	.word	0x0001679c

00006d40 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    6d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;
	u16_t value_handle = params->attr->handle;
    6d44:	694b      	ldr	r3, [r1, #20]
{
    6d46:	b087      	sub	sp, #28
    6d48:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    6d4a:	8a1d      	ldrh	r5, [r3, #16]

	/* Check if attribute is a characteristic then adjust the handle */
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6d4c:	6818      	ldr	r0, [r3, #0]
    6d4e:	2300      	movs	r3, #0
{
    6d50:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6d52:	f88d 3014 	strb.w	r3, [sp, #20]
    6d56:	a905      	add	r1, sp, #20
    6d58:	f642 0303 	movw	r3, #10243	; 0x2803
    6d5c:	f8ad 3016 	strh.w	r3, [sp, #22]
    6d60:	f7fb f8f0 	bl	1f44 <bt_uuid_cmp>
    6d64:	b930      	cbnz	r0, 6d74 <gatt_indicate+0x34>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    6d66:	6963      	ldr	r3, [r4, #20]

		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    6d68:	68db      	ldr	r3, [r3, #12]
    6d6a:	791b      	ldrb	r3, [r3, #4]
    6d6c:	069b      	lsls	r3, r3, #26
    6d6e:	d546      	bpl.n	6dfe <gatt_indicate+0xbe>
			return -EINVAL;
		}

		value_handle += 1;
    6d70:	3501      	adds	r5, #1
    6d72:	b2ad      	uxth	r5, r5
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    6d74:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    6d76:	211d      	movs	r1, #29
    6d78:	3202      	adds	r2, #2
    6d7a:	4648      	mov	r0, r9
    6d7c:	f7ff fa9a 	bl	62b4 <bt_att_create_pdu>
	if (!buf) {
    6d80:	4606      	mov	r6, r0
    6d82:	b978      	cbnz	r0, 6da4 <gatt_indicate+0x64>
		BT_WARN("No buffer available to send indication");
    6d84:	4b1f      	ldr	r3, [pc, #124]	; (6e04 <gatt_indicate+0xc4>)
    6d86:	9301      	str	r3, [sp, #4]
    6d88:	9300      	str	r3, [sp, #0]
    6d8a:	4b1f      	ldr	r3, [pc, #124]	; (6e08 <gatt_indicate+0xc8>)
    6d8c:	4a1f      	ldr	r2, [pc, #124]	; (6e0c <gatt_indicate+0xcc>)
    6d8e:	681c      	ldr	r4, [r3, #0]
    6d90:	491f      	ldr	r1, [pc, #124]	; (6e10 <gatt_indicate+0xd0>)
    6d92:	4b20      	ldr	r3, [pc, #128]	; (6e14 <gatt_indicate+0xd4>)
    6d94:	4820      	ldr	r0, [pc, #128]	; (6e18 <gatt_indicate+0xd8>)
    6d96:	47a0      	blx	r4
		return -ENOMEM;
    6d98:	f06f 040b 	mvn.w	r4, #11

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    6d9c:	4620      	mov	r0, r4
    6d9e:	b007      	add	sp, #28
    6da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    6da4:	f100 0708 	add.w	r7, r0, #8
    6da8:	2102      	movs	r1, #2
    6daa:	4638      	mov	r0, r7
    6dac:	f00c fcc6 	bl	1373c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    6db0:	4680      	mov	r8, r0
	net_buf_add(buf, params->len);
    6db2:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    6db4:	f828 5b02 	strh.w	r5, [r8], #2
	net_buf_add(buf, params->len);
    6db8:	4638      	mov	r0, r7
    6dba:	f00c fcbf 	bl	1373c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    6dbe:	8c22      	ldrh	r2, [r4, #32]
    6dc0:	69e1      	ldr	r1, [r4, #28]
    6dc2:	4640      	mov	r0, r8
    6dc4:	f7fa ff40 	bl	1c48 <memcpy>
		req->func = func;
    6dc8:	4b14      	ldr	r3, [pc, #80]	; (6e1c <gatt_indicate+0xdc>)
    6dca:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    6dcc:	2300      	movs	r3, #0
		req->buf = buf;
    6dce:	6126      	str	r6, [r4, #16]
		req->destroy = destroy;
    6dd0:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    6dd2:	4621      	mov	r1, r4
    6dd4:	4648      	mov	r0, r9
    6dd6:	f7ff fed9 	bl	6b8c <bt_att_req_send>
	if (err) {
    6dda:	4604      	mov	r4, r0
    6ddc:	2800      	cmp	r0, #0
    6dde:	d0dd      	beq.n	6d9c <gatt_indicate+0x5c>
		BT_ERR("Error sending ATT PDU: %d", err);
    6de0:	4b08      	ldr	r3, [pc, #32]	; (6e04 <gatt_indicate+0xc4>)
    6de2:	9302      	str	r3, [sp, #8]
    6de4:	e88d 0018 	stmia.w	sp, {r3, r4}
    6de8:	4b07      	ldr	r3, [pc, #28]	; (6e08 <gatt_indicate+0xc8>)
    6dea:	4a0d      	ldr	r2, [pc, #52]	; (6e20 <gatt_indicate+0xe0>)
    6dec:	681d      	ldr	r5, [r3, #0]
    6dee:	4908      	ldr	r1, [pc, #32]	; (6e10 <gatt_indicate+0xd0>)
    6df0:	4b0c      	ldr	r3, [pc, #48]	; (6e24 <gatt_indicate+0xe4>)
    6df2:	480d      	ldr	r0, [pc, #52]	; (6e28 <gatt_indicate+0xe8>)
    6df4:	47a8      	blx	r5
		net_buf_unref(buf);
    6df6:	4630      	mov	r0, r6
    6df8:	f00c fc6e 	bl	136d8 <net_buf_unref>
    6dfc:	e7ce      	b.n	6d9c <gatt_indicate+0x5c>
			return -EINVAL;
    6dfe:	f06f 0415 	mvn.w	r4, #21
    6e02:	e7cb      	b.n	6d9c <gatt_indicate+0x5c>
    6e04:	00015359 	.word	0x00015359
    6e08:	20003a5c 	.word	0x20003a5c
    6e0c:	000167d7 	.word	0x000167d7
    6e10:	0001679c 	.word	0x0001679c
    6e14:	00017776 	.word	0x00017776
    6e18:	000177e4 	.word	0x000177e4
    6e1c:	00006c11 	.word	0x00006c11
    6e20:	00016754 	.word	0x00016754
    6e24:	0001776c 	.word	0x0001776c
    6e28:	0001781b 	.word	0x0001781b

00006e2c <sc_indicate.constprop.19>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    6e2c:	b510      	push	{r4, lr}
    6e2e:	4b17      	ldr	r3, [pc, #92]	; (6e8c <sc_indicate.constprop.19+0x60>)
    6e30:	f3bf 8f5b 	dmb	ish
    6e34:	f103 0250 	add.w	r2, r3, #80	; 0x50
    6e38:	e852 4f00 	ldrex	r4, [r2]
    6e3c:	f044 0e01 	orr.w	lr, r4, #1
    6e40:	e842 ec00 	strex	ip, lr, [r2]
    6e44:	f1bc 0f00 	cmp.w	ip, #0
    6e48:	d1f6      	bne.n	6e38 <sc_indicate.constprop.19+0xc>
    6e4a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    6e4e:	07e2      	lsls	r2, r4, #31
    6e50:	d402      	bmi.n	6e58 <sc_indicate.constprop.19+0x2c>
		sc->start = start;
    6e52:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    6e54:	84d9      	strh	r1, [r3, #38]	; 0x26
    6e56:	e00a      	b.n	6e6e <sc_indicate.constprop.19+0x42>
	if (new_start >= *start && new_end <= *end) {
    6e58:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    6e5a:	4282      	cmp	r2, r0
    6e5c:	d803      	bhi.n	6e66 <sc_indicate.constprop.19+0x3a>
    6e5e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    6e60:	428a      	cmp	r2, r1
    6e62:	d301      	bcc.n	6e68 <sc_indicate.constprop.19+0x3c>
    6e64:	bd10      	pop	{r4, pc}
		*start = new_start;
    6e66:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    6e68:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    6e6a:	428a      	cmp	r2, r1
    6e6c:	d3f2      	bcc.n	6e54 <sc_indicate.constprop.19+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6e6e:	f3bf 8f5b 	dmb	ish
    6e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6e74:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    6e78:	079b      	lsls	r3, r3, #30
    6e7a:	d406      	bmi.n	6e8a <sc_indicate.constprop.19+0x5e>
    6e7c:	220a      	movs	r2, #10
    6e7e:	4904      	ldr	r1, [pc, #16]	; (6e90 <sc_indicate.constprop.19+0x64>)
    6e80:	4804      	ldr	r0, [pc, #16]	; (6e94 <sc_indicate.constprop.19+0x68>)
}
    6e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e86:	f00e b80b 	b.w	14ea0 <k_delayed_work_submit_to_queue>
    6e8a:	bd10      	pop	{r4, pc}
    6e8c:	2000058c 	.word	0x2000058c
    6e90:	200005b4 	.word	0x200005b4
    6e94:	20001988 	.word	0x20001988

00006e98 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6e98:	6882      	ldr	r2, [r0, #8]
    6e9a:	4b19      	ldr	r3, [pc, #100]	; (6f00 <connected_cb+0x68>)
    6e9c:	429a      	cmp	r2, r3
{
    6e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ea2:	4607      	mov	r7, r0
    6ea4:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    6ea6:	d125      	bne.n	6ef4 <connected_cb+0x5c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6ea8:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    6eaa:	2600      	movs	r6, #0
    6eac:	686b      	ldr	r3, [r5, #4]
    6eae:	429e      	cmp	r6, r3
    6eb0:	d220      	bcs.n	6ef4 <connected_cb+0x5c>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6eb2:	6829      	ldr	r1, [r5, #0]
    6eb4:	ea4f 1806 	mov.w	r8, r6, lsl #4
    6eb8:	4441      	add	r1, r8
    6eba:	4620      	mov	r0, r4
    6ebc:	f7fd fdbc 	bl	4a38 <bt_conn_addr_le_cmp>
    6ec0:	b9d8      	cbnz	r0, 6efa <connected_cb+0x62>
			continue;
		}

		if (ccc->cfg[i].value) {
    6ec2:	682b      	ldr	r3, [r5, #0]
    6ec4:	4443      	add	r3, r8
    6ec6:	891b      	ldrh	r3, [r3, #8]
    6ec8:	b1bb      	cbz	r3, 6efa <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    6eca:	4629      	mov	r1, r5
    6ecc:	4638      	mov	r0, r7
    6ece:	f7ff fe86 	bl	6bde <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    6ed2:	682c      	ldr	r4, [r5, #0]
    6ed4:	4b0b      	ldr	r3, [pc, #44]	; (6f04 <connected_cb+0x6c>)
    6ed6:	429c      	cmp	r4, r3
    6ed8:	d10c      	bne.n	6ef4 <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    6eda:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    6edc:	89a0      	ldrh	r0, [r4, #12]
    6ede:	89e1      	ldrh	r1, [r4, #14]
    6ee0:	b900      	cbnz	r0, 6ee4 <connected_cb+0x4c>
    6ee2:	b139      	cbz	r1, 6ef4 <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    6ee4:	f7ff ffa2 	bl	6e2c <sc_indicate.constprop.19>
	memset(cfg->data, 0, sizeof(cfg->data));
    6ee8:	2204      	movs	r2, #4
    6eea:	2100      	movs	r1, #0
    6eec:	f104 000c 	add.w	r0, r4, #12
    6ef0:	f7fa fed6 	bl	1ca0 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    6ef4:	2001      	movs	r0, #1
    6ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    6efa:	3601      	adds	r6, #1
    6efc:	e7d6      	b.n	6eac <connected_cb+0x14>
    6efe:	bf00      	nop
    6f00:	00007125 	.word	0x00007125
    6f04:	200005e0 	.word	0x200005e0

00006f08 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6f08:	490d      	ldr	r1, [pc, #52]	; (6f40 <sc_indicate_rsp+0x38>)
    6f0a:	f3bf 8f5b 	dmb	ish
    6f0e:	f101 0350 	add.w	r3, r1, #80	; 0x50
    6f12:	e853 2f00 	ldrex	r2, [r3]
    6f16:	f022 0202 	bic.w	r2, r2, #2
    6f1a:	e843 2000 	strex	r0, r2, [r3]
    6f1e:	2800      	cmp	r0, #0
    6f20:	d1f7      	bne.n	6f12 <sc_indicate_rsp+0xa>
    6f22:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6f26:	f3bf 8f5b 	dmb	ish
    6f2a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    6f2c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    6f30:	07db      	lsls	r3, r3, #31
    6f32:	d504      	bpl.n	6f3e <sc_indicate_rsp+0x36>
    6f34:	2200      	movs	r2, #0
    6f36:	3128      	adds	r1, #40	; 0x28
    6f38:	4802      	ldr	r0, [pc, #8]	; (6f44 <sc_indicate_rsp+0x3c>)
    6f3a:	f00d bfb1 	b.w	14ea0 <k_delayed_work_submit_to_queue>
    6f3e:	4770      	bx	lr
    6f40:	2000058c 	.word	0x2000058c
    6f44:	20001988 	.word	0x20001988

00006f48 <read_appearance>:
{
    6f48:	b513      	push	{r0, r1, r4, lr}
    6f4a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    6f4e:	4610      	mov	r0, r2
	if (offset > value_len) {
    6f50:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    6f52:	f04f 0200 	mov.w	r2, #0
    6f56:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    6f5a:	d80d      	bhi.n	6f78 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    6f5c:	f1c1 0402 	rsb	r4, r1, #2
    6f60:	429c      	cmp	r4, r3
    6f62:	bfa8      	it	ge
    6f64:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6f66:	f10d 0306 	add.w	r3, sp, #6
    6f6a:	4622      	mov	r2, r4
    6f6c:	4419      	add	r1, r3
    6f6e:	f7fa fe6b 	bl	1c48 <memcpy>
}
    6f72:	4620      	mov	r0, r4
    6f74:	b002      	add	sp, #8
    6f76:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6f78:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    6f7c:	e7f9      	b.n	6f72 <read_appearance+0x2a>
	...

00006f80 <disconnected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6f80:	6882      	ldr	r2, [r0, #8]
    6f82:	4b27      	ldr	r3, [pc, #156]	; (7020 <disconnected_cb+0xa0>)
    6f84:	429a      	cmp	r2, r3
{
    6f86:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6f8a:	4680      	mov	r8, r0
    6f8c:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    6f8e:	d127      	bne.n	6fe0 <disconnected_cb+0x60>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6f90:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    6f92:	8923      	ldrh	r3, [r4, #8]
    6f94:	b323      	cbz	r3, 6fe0 <disconnected_cb+0x60>
    6f96:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6f98:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    6f9c:	6863      	ldr	r3, [r4, #4]
    6f9e:	429e      	cmp	r6, r3
    6fa0:	d30b      	bcc.n	6fba <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    6fa2:	2202      	movs	r2, #2
    6fa4:	2100      	movs	r1, #0
    6fa6:	f104 0008 	add.w	r0, r4, #8
    6faa:	f7fa fe79 	bl	1ca0 <memset>
	if (ccc->cfg_changed) {
    6fae:	68e3      	ldr	r3, [r4, #12]
    6fb0:	b1b3      	cbz	r3, 6fe0 <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    6fb2:	8921      	ldrh	r1, [r4, #8]
    6fb4:	4640      	mov	r0, r8
    6fb6:	4798      	blx	r3
    6fb8:	e012      	b.n	6fe0 <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    6fba:	6821      	ldr	r1, [r4, #0]
    6fbc:	0135      	lsls	r5, r6, #4
    6fbe:	4429      	add	r1, r5
    6fc0:	890b      	ldrh	r3, [r1, #8]
    6fc2:	b19b      	cbz	r3, 6fec <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6fc4:	4648      	mov	r0, r9
    6fc6:	f7fd fd37 	bl	4a38 <bt_conn_addr_le_cmp>
    6fca:	b188      	cbz	r0, 6ff0 <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6fcc:	6820      	ldr	r0, [r4, #0]
    6fce:	4428      	add	r0, r5
    6fd0:	f7fd fd96 	bl	4b00 <bt_conn_lookup_addr_le>
			if (tmp) {
    6fd4:	b150      	cbz	r0, 6fec <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    6fd6:	7a43      	ldrb	r3, [r0, #9]
    6fd8:	2b03      	cmp	r3, #3
    6fda:	d105      	bne.n	6fe8 <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    6fdc:	f7fd fdc6 	bl	4b6c <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    6fe0:	2001      	movs	r0, #1
    6fe2:	b002      	add	sp, #8
    6fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    6fe8:	f7fd fdc0 	bl	4b6c <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    6fec:	3601      	adds	r6, #1
    6fee:	e7d5      	b.n	6f9c <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6ff0:	4650      	mov	r0, sl
    6ff2:	f7fd f973 	bl	42dc <bt_addr_le_is_bonded>
    6ff6:	4607      	mov	r7, r0
    6ff8:	6820      	ldr	r0, [r4, #0]
    6ffa:	b95f      	cbnz	r7, 7014 <disconnected_cb+0x94>
    6ffc:	4428      	add	r0, r5
    6ffe:	2207      	movs	r2, #7
    7000:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    7002:	9700      	str	r7, [sp, #0]
    7004:	f8cd 7003 	str.w	r7, [sp, #3]
    7008:	f7fa fe1e 	bl	1c48 <memcpy>
				ccc->cfg[i].value = 0;
    700c:	6823      	ldr	r3, [r4, #0]
    700e:	441d      	add	r5, r3
    7010:	812f      	strh	r7, [r5, #8]
    7012:	e7eb      	b.n	6fec <disconnected_cb+0x6c>
    7014:	2207      	movs	r2, #7
    7016:	4651      	mov	r1, sl
    7018:	4428      	add	r0, r5
    701a:	f7fa fe15 	bl	1c48 <memcpy>
    701e:	e7e5      	b.n	6fec <disconnected_cb+0x6c>
    7020:	00007125 	.word	0x00007125

00007024 <read_name>:
{
    7024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    7028:	4e0d      	ldr	r6, [pc, #52]	; (7060 <read_name+0x3c>)
{
    702a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    702e:	4630      	mov	r0, r6
{
    7030:	4698      	mov	r8, r3
    7032:	4617      	mov	r7, r2
				 strlen(gap_name));
    7034:	f7fa fdde 	bl	1bf4 <strlen>
	if (offset > value_len) {
    7038:	b283      	uxth	r3, r0
    703a:	42ab      	cmp	r3, r5
    703c:	d30d      	bcc.n	705a <read_name+0x36>
	len = min(buf_len, value_len - offset);
    703e:	1b5c      	subs	r4, r3, r5
    7040:	4544      	cmp	r4, r8
    7042:	4623      	mov	r3, r4
    7044:	bfa8      	it	ge
    7046:	4643      	movge	r3, r8
    7048:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    704a:	4622      	mov	r2, r4
    704c:	1971      	adds	r1, r6, r5
    704e:	4638      	mov	r0, r7
    7050:	f7fa fdfa 	bl	1c48 <memcpy>
}
    7054:	4620      	mov	r0, r4
    7056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    705a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    705e:	e7f9      	b.n	7054 <read_name+0x30>
    7060:	000178af 	.word	0x000178af

00007064 <bt_gatt_attr_read_ccc>:
{
    7064:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    7068:	68ce      	ldr	r6, [r1, #12]
{
    706a:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    706e:	4604      	mov	r4, r0
    7070:	4690      	mov	r8, r2
    7072:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    7074:	2500      	movs	r5, #0
    7076:	6873      	ldr	r3, [r6, #4]
    7078:	429d      	cmp	r5, r3
    707a:	d20e      	bcs.n	709a <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    707c:	6831      	ldr	r1, [r6, #0]
    707e:	ea4f 1905 	mov.w	r9, r5, lsl #4
    7082:	4449      	add	r1, r9
    7084:	4620      	mov	r0, r4
    7086:	f7fd fcd7 	bl	4a38 <bt_conn_addr_le_cmp>
    708a:	b108      	cbz	r0, 7090 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    708c:	3501      	adds	r5, #1
    708e:	e7f2      	b.n	7076 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    7090:	6832      	ldr	r2, [r6, #0]
    7092:	444a      	add	r2, r9
    7094:	8913      	ldrh	r3, [r2, #8]
    7096:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    709a:	6873      	ldr	r3, [r6, #4]
    709c:	429d      	cmp	r5, r3
		value = 0x0000;
    709e:	bf04      	itt	eq
    70a0:	2300      	moveq	r3, #0
    70a2:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    70a6:	2f02      	cmp	r7, #2
    70a8:	d80f      	bhi.n	70ca <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    70aa:	f1c7 0402 	rsb	r4, r7, #2
    70ae:	4554      	cmp	r4, sl
    70b0:	bfa8      	it	ge
    70b2:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    70b4:	f10d 0306 	add.w	r3, sp, #6
    70b8:	4622      	mov	r2, r4
    70ba:	19d9      	adds	r1, r3, r7
    70bc:	4640      	mov	r0, r8
    70be:	f7fa fdc3 	bl	1c48 <memcpy>
}
    70c2:	4620      	mov	r0, r4
    70c4:	b002      	add	sp, #8
    70c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    70ca:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    70ce:	e7f8      	b.n	70c2 <bt_gatt_attr_read_ccc+0x5e>

000070d0 <bt_gatt_attr_read_service>:
{
    70d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    70d2:	68c9      	ldr	r1, [r1, #12]
{
    70d4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    70d8:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    70da:	780a      	ldrb	r2, [r1, #0]
    70dc:	b992      	cbnz	r2, 7104 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    70de:	884a      	ldrh	r2, [r1, #2]
    70e0:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    70e4:	2d02      	cmp	r5, #2
    70e6:	d819      	bhi.n	711c <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    70e8:	f1c5 0402 	rsb	r4, r5, #2
    70ec:	429c      	cmp	r4, r3
    70ee:	bfa8      	it	ge
    70f0:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    70f2:	f10d 0306 	add.w	r3, sp, #6
    70f6:	4622      	mov	r2, r4
    70f8:	1959      	adds	r1, r3, r5
    70fa:	f7fa fda5 	bl	1c48 <memcpy>
}
    70fe:	4620      	mov	r0, r4
    7100:	b003      	add	sp, #12
    7102:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    7104:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    7106:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    710a:	d807      	bhi.n	711c <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    710c:	f1c5 0410 	rsb	r4, r5, #16
    7110:	429c      	cmp	r4, r3
    7112:	bfa8      	it	ge
    7114:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    7116:	4622      	mov	r2, r4
    7118:	4429      	add	r1, r5
    711a:	e7ee      	b.n	70fa <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    711c:	f06f 0406 	mvn.w	r4, #6
    7120:	e7ed      	b.n	70fe <bt_gatt_attr_read_service+0x2e>
	...

00007124 <bt_gatt_attr_write_ccc>:
{
    7124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7128:	b087      	sub	sp, #28
    712a:	4688      	mov	r8, r1
    712c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    7130:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    7134:	2902      	cmp	r1, #2
{
    7136:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    7138:	d860      	bhi.n	71fc <bt_gatt_attr_write_ccc+0xd8>
	if (offset + len > sizeof(u16_t)) {
    713a:	4419      	add	r1, r3
    713c:	2902      	cmp	r1, #2
    713e:	461f      	mov	r7, r3
    7140:	dc5f      	bgt.n	7202 <bt_gatt_attr_write_ccc+0xde>
	return ((u16_t)src[1] << 8) | src[0];
    7142:	7853      	ldrb	r3, [r2, #1]
    7144:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    7146:	2400      	movs	r4, #0
    7148:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    714c:	686b      	ldr	r3, [r5, #4]
    714e:	429c      	cmp	r4, r3
    7150:	d206      	bcs.n	7160 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    7152:	6829      	ldr	r1, [r5, #0]
    7154:	4648      	mov	r0, r9
    7156:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    715a:	f7fd fc6d 	bl	4a38 <bt_conn_addr_le_cmp>
    715e:	b9b8      	cbnz	r0, 7190 <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    7160:	686b      	ldr	r3, [r5, #4]
    7162:	429c      	cmp	r4, r3
    7164:	d130      	bne.n	71c8 <bt_gatt_attr_write_ccc+0xa4>
		if (!value) {
    7166:	b35e      	cbz	r6, 71c0 <bt_gatt_attr_write_ccc+0x9c>
    7168:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    716a:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    716c:	686b      	ldr	r3, [r5, #4]
    716e:	429c      	cmp	r4, r3
    7170:	d217      	bcs.n	71a2 <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    7172:	6828      	ldr	r0, [r5, #0]
    7174:	f8cd a008 	str.w	sl, [sp, #8]
    7178:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    717c:	2207      	movs	r2, #7
    717e:	a902      	add	r1, sp, #8
    7180:	4458      	add	r0, fp
    7182:	f8cd a00b 	str.w	sl, [sp, #11]
    7186:	f7fa fd4a 	bl	1c1e <memcmp>
    718a:	b118      	cbz	r0, 7194 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    718c:	3401      	adds	r4, #1
    718e:	e7ed      	b.n	716c <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    7190:	3401      	adds	r4, #1
    7192:	e7db      	b.n	714c <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    7194:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    7196:	2207      	movs	r2, #7
    7198:	f109 0144 	add.w	r1, r9, #68	; 0x44
    719c:	4458      	add	r0, fp
    719e:	f7fa fd53 	bl	1c48 <memcpy>
		if (i == ccc->cfg_len) {
    71a2:	686b      	ldr	r3, [r5, #4]
    71a4:	429c      	cmp	r4, r3
    71a6:	d10f      	bne.n	71c8 <bt_gatt_attr_write_ccc+0xa4>
			BT_WARN("No space to store CCC cfg");
    71a8:	4b17      	ldr	r3, [pc, #92]	; (7208 <bt_gatt_attr_write_ccc+0xe4>)
    71aa:	9301      	str	r3, [sp, #4]
    71ac:	9300      	str	r3, [sp, #0]
    71ae:	4b17      	ldr	r3, [pc, #92]	; (720c <bt_gatt_attr_write_ccc+0xe8>)
    71b0:	4a17      	ldr	r2, [pc, #92]	; (7210 <bt_gatt_attr_write_ccc+0xec>)
    71b2:	681c      	ldr	r4, [r3, #0]
    71b4:	4917      	ldr	r1, [pc, #92]	; (7214 <bt_gatt_attr_write_ccc+0xf0>)
    71b6:	4b18      	ldr	r3, [pc, #96]	; (7218 <bt_gatt_attr_write_ccc+0xf4>)
    71b8:	4818      	ldr	r0, [pc, #96]	; (721c <bt_gatt_attr_write_ccc+0xf8>)
    71ba:	47a0      	blx	r4
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    71bc:	f06f 0710 	mvn.w	r7, #16
}
    71c0:	4638      	mov	r0, r7
    71c2:	b007      	add	sp, #28
    71c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    71c8:	682b      	ldr	r3, [r5, #0]
    71ca:	0124      	lsls	r4, r4, #4
    71cc:	4423      	add	r3, r4
    71ce:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    71d0:	892b      	ldrh	r3, [r5, #8]
    71d2:	42b3      	cmp	r3, r6
    71d4:	d003      	beq.n	71de <bt_gatt_attr_write_ccc+0xba>
		gatt_ccc_changed(attr, ccc);
    71d6:	4629      	mov	r1, r5
    71d8:	4640      	mov	r0, r8
    71da:	f7ff fd00 	bl	6bde <gatt_ccc_changed>
	if (!value) {
    71de:	2e00      	cmp	r6, #0
    71e0:	d1ee      	bne.n	71c0 <bt_gatt_attr_write_ccc+0x9c>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    71e2:	6828      	ldr	r0, [r5, #0]
    71e4:	9604      	str	r6, [sp, #16]
    71e6:	4420      	add	r0, r4
    71e8:	2207      	movs	r2, #7
    71ea:	a904      	add	r1, sp, #16
    71ec:	f8cd 6013 	str.w	r6, [sp, #19]
    71f0:	f7fa fd2a 	bl	1c48 <memcpy>
		ccc->cfg[i].value = 0;
    71f4:	682b      	ldr	r3, [r5, #0]
    71f6:	441c      	add	r4, r3
    71f8:	8126      	strh	r6, [r4, #8]
    71fa:	e7e1      	b.n	71c0 <bt_gatt_attr_write_ccc+0x9c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    71fc:	f06f 0706 	mvn.w	r7, #6
    7200:	e7de      	b.n	71c0 <bt_gatt_attr_write_ccc+0x9c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    7202:	f06f 070c 	mvn.w	r7, #12
    7206:	e7db      	b.n	71c0 <bt_gatt_attr_write_ccc+0x9c>
    7208:	00015359 	.word	0x00015359
    720c:	20003a5c 	.word	0x20003a5c
    7210:	000167d7 	.word	0x000167d7
    7214:	0001679c 	.word	0x0001679c
    7218:	00017749 	.word	0x00017749
    721c:	000177ba 	.word	0x000177ba

00007220 <notify_cb>:
{
    7220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    7224:	f642 1302 	movw	r3, #10498	; 0x2902
{
    7228:	4605      	mov	r5, r0
    722a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    722c:	2400      	movs	r4, #0
    722e:	4669      	mov	r1, sp
    7230:	6800      	ldr	r0, [r0, #0]
    7232:	f88d 4000 	strb.w	r4, [sp]
    7236:	f8ad 3002 	strh.w	r3, [sp, #2]
    723a:	f7fa fe83 	bl	1f44 <bt_uuid_cmp>
    723e:	b178      	cbz	r0, 7260 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    7240:	f642 0303 	movw	r3, #10243	; 0x2803
    7244:	6828      	ldr	r0, [r5, #0]
    7246:	f88d 4004 	strb.w	r4, [sp, #4]
    724a:	a901      	add	r1, sp, #4
    724c:	f8ad 3006 	strh.w	r3, [sp, #6]
    7250:	f7fa fe78 	bl	1f44 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    7254:	1b00      	subs	r0, r0, r4
    7256:	bf18      	it	ne
    7258:	2001      	movne	r0, #1
}
    725a:	b003      	add	sp, #12
    725c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7260:	68aa      	ldr	r2, [r5, #8]
    7262:	4b2b      	ldr	r3, [pc, #172]	; (7310 <notify_cb+0xf0>)
    7264:	429a      	cmp	r2, r3
    7266:	d001      	beq.n	726c <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    7268:	2001      	movs	r0, #1
    726a:	e7f6      	b.n	725a <notify_cb+0x3a>
	ccc = attr->user_data;
    726c:	68ef      	ldr	r7, [r5, #12]
    726e:	4d29      	ldr	r5, [pc, #164]	; (7314 <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    7270:	4604      	mov	r4, r0
    7272:	46a8      	mov	r8, r5
    7274:	4681      	mov	r9, r0
    7276:	687b      	ldr	r3, [r7, #4]
    7278:	429c      	cmp	r4, r3
    727a:	d2f5      	bcs.n	7268 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    727c:	6838      	ldr	r0, [r7, #0]
    727e:	88b3      	ldrh	r3, [r6, #4]
    7280:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    7284:	8902      	ldrh	r2, [r0, #8]
    7286:	429a      	cmp	r2, r3
    7288:	d114      	bne.n	72b4 <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    728a:	f7fd fc39 	bl	4b00 <bt_conn_lookup_addr_le>
		if (!conn) {
    728e:	4683      	mov	fp, r0
    7290:	b9f8      	cbnz	r0, 72d2 <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    7292:	683b      	ldr	r3, [r7, #0]
    7294:	4543      	cmp	r3, r8
    7296:	d10d      	bne.n	72b4 <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    7298:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    729a:	a801      	add	r0, sp, #4
    729c:	8c1a      	ldrh	r2, [r3, #32]
    729e:	69d9      	ldr	r1, [r3, #28]
    72a0:	f7fa fcd2 	bl	1c48 <memcpy>
	if (!stored->start && !stored->end) {
    72a4:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    72a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    72aa:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    72ac:	b928      	cbnz	r0, 72ba <notify_cb+0x9a>
    72ae:	b942      	cbnz	r2, 72c2 <notify_cb+0xa2>
		*stored = data;
    72b0:	9801      	ldr	r0, [sp, #4]
    72b2:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    72b4:	3401      	adds	r4, #1
    72b6:	3510      	adds	r5, #16
    72b8:	e7dd      	b.n	7276 <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    72ba:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    72be:	4281      	cmp	r1, r0
    72c0:	d305      	bcc.n	72ce <notify_cb+0xae>
    72c2:	429a      	cmp	r2, r3
    72c4:	d2f6      	bcs.n	72b4 <notify_cb+0x94>
	if (*end < new_end) {
    72c6:	429a      	cmp	r2, r3
    72c8:	d2f4      	bcs.n	72b4 <notify_cb+0x94>
		*end = new_end;
    72ca:	81eb      	strh	r3, [r5, #14]
    72cc:	e7f2      	b.n	72b4 <notify_cb+0x94>
		*start = new_start;
    72ce:	81a9      	strh	r1, [r5, #12]
    72d0:	e7f9      	b.n	72c6 <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    72d2:	7a43      	ldrb	r3, [r0, #9]
    72d4:	2b03      	cmp	r3, #3
    72d6:	d002      	beq.n	72de <notify_cb+0xbe>
			bt_conn_unref(conn);
    72d8:	f7fd fc48 	bl	4b6c <bt_conn_unref>
    72dc:	e7ea      	b.n	72b4 <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    72de:	88b3      	ldrh	r3, [r6, #4]
    72e0:	2b02      	cmp	r3, #2
    72e2:	d10c      	bne.n	72fe <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    72e4:	6971      	ldr	r1, [r6, #20]
    72e6:	f7ff fd2b 	bl	6d40 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    72ea:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    72ec:	4658      	mov	r0, fp
    72ee:	f7fd fc3d 	bl	4b6c <bt_conn_unref>
		if (err < 0) {
    72f2:	f1ba 0f00 	cmp.w	sl, #0
    72f6:	db09      	blt.n	730c <notify_cb+0xec>
		data->err = 0;
    72f8:	f8c6 9000 	str.w	r9, [r6]
    72fc:	e7da      	b.n	72b4 <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    72fe:	68b1      	ldr	r1, [r6, #8]
    7300:	8a33      	ldrh	r3, [r6, #16]
    7302:	68f2      	ldr	r2, [r6, #12]
    7304:	8a09      	ldrh	r1, [r1, #16]
    7306:	f7ff fcd9 	bl	6cbc <gatt_notify>
    730a:	e7ee      	b.n	72ea <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    730c:	2000      	movs	r0, #0
    730e:	e7a4      	b.n	725a <notify_cb+0x3a>
    7310:	00007125 	.word	0x00007125
    7314:	200005e0 	.word	0x200005e0

00007318 <bt_gatt_init>:
{
    7318:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    731a:	4806      	ldr	r0, [pc, #24]	; (7334 <bt_gatt_init+0x1c>)
    731c:	f7ff fc80 	bl	6c20 <gatt_register>
	gatt_register(&gatt_svc);
    7320:	4805      	ldr	r0, [pc, #20]	; (7338 <bt_gatt_init+0x20>)
    7322:	f7ff fc7d 	bl	6c20 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    7326:	4905      	ldr	r1, [pc, #20]	; (733c <bt_gatt_init+0x24>)
    7328:	4805      	ldr	r0, [pc, #20]	; (7340 <bt_gatt_init+0x28>)
}
    732a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    732e:	f00d bd43 	b.w	14db8 <k_delayed_work_init>
    7332:	bf00      	nop
    7334:	20003c9c 	.word	0x20003c9c
    7338:	20003cf8 	.word	0x20003cf8
    733c:	000073c5 	.word	0x000073c5
    7340:	200005b4 	.word	0x200005b4

00007344 <bt_gatt_foreach_attr>:
{
    7344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7348:	4699      	mov	r9, r3
    734a:	4b12      	ldr	r3, [pc, #72]	; (7394 <bt_gatt_foreach_attr+0x50>)
    734c:	681c      	ldr	r4, [r3, #0]
    734e:	4606      	mov	r6, r0
    7350:	460f      	mov	r7, r1
    7352:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    7354:	b1dc      	cbz	r4, 738e <bt_gatt_foreach_attr+0x4a>
    7356:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    7358:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    735c:	b1bc      	cbz	r4, 738e <bt_gatt_foreach_attr+0x4a>
    735e:	2500      	movs	r5, #0
    7360:	e006      	b.n	7370 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    7362:	6820      	ldr	r0, [r4, #0]
    7364:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    7368:	8a03      	ldrh	r3, [r0, #16]
    736a:	42b3      	cmp	r3, r6
    736c:	d207      	bcs.n	737e <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    736e:	3501      	adds	r5, #1
    7370:	6863      	ldr	r3, [r4, #4]
    7372:	42ab      	cmp	r3, r5
    7374:	d8f5      	bhi.n	7362 <bt_gatt_foreach_attr+0x1e>
	return node->next;
    7376:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    7378:	b14c      	cbz	r4, 738e <bt_gatt_foreach_attr+0x4a>
    737a:	3c08      	subs	r4, #8
    737c:	e7ee      	b.n	735c <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    737e:	42bb      	cmp	r3, r7
    7380:	d8f5      	bhi.n	736e <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    7382:	4649      	mov	r1, r9
    7384:	47c0      	blx	r8
    7386:	2800      	cmp	r0, #0
    7388:	d1f1      	bne.n	736e <bt_gatt_foreach_attr+0x2a>
    738a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    738e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7392:	bf00      	nop
    7394:	20000584 	.word	0x20000584

00007398 <bt_gatt_indicate.part.10>:
int bt_gatt_indicate(struct bt_conn *conn,
    7398:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    739a:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    739e:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    73a0:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    73a2:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    73a4:	2302      	movs	r3, #2
    73a6:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    73aa:	4a05      	ldr	r2, [pc, #20]	; (73c0 <bt_gatt_indicate.part.10+0x28>)
    73ac:	8a00      	ldrh	r0, [r0, #16]
    73ae:	466b      	mov	r3, sp
    73b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    73b4:	f7ff ffc6 	bl	7344 <bt_gatt_foreach_attr>
}
    73b8:	9800      	ldr	r0, [sp, #0]
    73ba:	b007      	add	sp, #28
    73bc:	f85d fb04 	ldr.w	pc, [sp], #4
    73c0:	00007221 	.word	0x00007221

000073c4 <sc_process>:
{
    73c4:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    73c6:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    73ca:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    73ce:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    73d0:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    73d4:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    73d8:	3828      	subs	r0, #40	; 0x28
    73da:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    73de:	f3bf 8f5b 	dmb	ish
    73e2:	e854 2f00 	ldrex	r2, [r4]
    73e6:	f022 0201 	bic.w	r2, r2, #1
    73ea:	e844 2100 	strex	r1, r2, [r4]
    73ee:	2900      	cmp	r1, #0
    73f0:	d1f7      	bne.n	73e2 <sc_process+0x1e>
    73f2:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    73f6:	2200      	movs	r2, #0
    73f8:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    73fc:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    7400:	4a0e      	ldr	r2, [pc, #56]	; (743c <sc_process+0x78>)
    7402:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    7406:	4a0e      	ldr	r2, [pc, #56]	; (7440 <sc_process+0x7c>)
    7408:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    740c:	aa01      	add	r2, sp, #4
    740e:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    7412:	2204      	movs	r2, #4
    7414:	f823 2c08 	strh.w	r2, [r3, #-8]
    7418:	f7ff ffbe 	bl	7398 <bt_gatt_indicate.part.10>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    741c:	b958      	cbnz	r0, 7436 <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    741e:	f3bf 8f5b 	dmb	ish
    7422:	e854 3f00 	ldrex	r3, [r4]
    7426:	f043 0302 	orr.w	r3, r3, #2
    742a:	e844 3200 	strex	r2, r3, [r4]
    742e:	2a00      	cmp	r2, #0
    7430:	d1f7      	bne.n	7422 <sc_process+0x5e>
    7432:	f3bf 8f5b 	dmb	ish
}
    7436:	b002      	add	sp, #8
    7438:	bd10      	pop	{r4, pc}
    743a:	bf00      	nop
    743c:	20003cd0 	.word	0x20003cd0
    7440:	00006f09 	.word	0x00006f09

00007444 <bt_gatt_attr_next>:
{
    7444:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    7446:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    7448:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    744a:	3101      	adds	r1, #1
    744c:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    744e:	2200      	movs	r2, #0
    7450:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    7454:	4608      	mov	r0, r1
    7456:	4a03      	ldr	r2, [pc, #12]	; (7464 <bt_gatt_attr_next+0x20>)
    7458:	f7ff ff74 	bl	7344 <bt_gatt_foreach_attr>
}
    745c:	9801      	ldr	r0, [sp, #4]
    745e:	b003      	add	sp, #12
    7460:	f85d fb04 	ldr.w	pc, [sp], #4
    7464:	00006bd9 	.word	0x00006bd9

00007468 <bt_gatt_attr_read_chrc>:
{
    7468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    746c:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    7470:	b08b      	sub	sp, #44	; 0x2c
    7472:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    7474:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    7476:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    747a:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    747e:	f88d 3014 	strb.w	r3, [sp, #20]
{
    7482:	4688      	mov	r8, r1
    7484:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    7486:	f7ff ffdd 	bl	7444 <bt_gatt_attr_next>
	if (!next) {
    748a:	4605      	mov	r5, r0
    748c:	bb50      	cbnz	r0, 74e4 <bt_gatt_attr_read_chrc+0x7c>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    748e:	4b1d      	ldr	r3, [pc, #116]	; (7504 <bt_gatt_attr_read_chrc+0x9c>)
    7490:	9302      	str	r3, [sp, #8]
    7492:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    7496:	9300      	str	r3, [sp, #0]
    7498:	4b1b      	ldr	r3, [pc, #108]	; (7508 <bt_gatt_attr_read_chrc+0xa0>)
    749a:	9201      	str	r2, [sp, #4]
    749c:	f8d3 8000 	ldr.w	r8, [r3]
    74a0:	4a1a      	ldr	r2, [pc, #104]	; (750c <bt_gatt_attr_read_chrc+0xa4>)
    74a2:	4b1b      	ldr	r3, [pc, #108]	; (7510 <bt_gatt_attr_read_chrc+0xa8>)
    74a4:	491b      	ldr	r1, [pc, #108]	; (7514 <bt_gatt_attr_read_chrc+0xac>)
    74a6:	481c      	ldr	r0, [pc, #112]	; (7518 <bt_gatt_attr_read_chrc+0xb0>)
    74a8:	47c0      	blx	r8
		pdu.value_handle = 0x0000;
    74aa:	f88d 5015 	strb.w	r5, [sp, #21]
    74ae:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    74b2:	f8d9 1000 	ldr.w	r1, [r9]
    74b6:	780b      	ldrb	r3, [r1, #0]
    74b8:	b9c3      	cbnz	r3, 74ec <bt_gatt_attr_read_chrc+0x84>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    74ba:	884b      	ldrh	r3, [r1, #2]
    74bc:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    74c0:	2305      	movs	r3, #5
	if (offset > value_len) {
    74c2:	42b3      	cmp	r3, r6
    74c4:	d31a      	bcc.n	74fc <bt_gatt_attr_read_chrc+0x94>
	len = min(buf_len, value_len - offset);
    74c6:	1b9b      	subs	r3, r3, r6
    74c8:	42a3      	cmp	r3, r4
    74ca:	bfa8      	it	ge
    74cc:	4623      	movge	r3, r4
    74ce:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    74d0:	ab05      	add	r3, sp, #20
    74d2:	4622      	mov	r2, r4
    74d4:	1999      	adds	r1, r3, r6
    74d6:	4638      	mov	r0, r7
    74d8:	f7fa fbb6 	bl	1c48 <memcpy>
}
    74dc:	4620      	mov	r0, r4
    74de:	b00b      	add	sp, #44	; 0x2c
    74e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    74e4:	8a03      	ldrh	r3, [r0, #16]
    74e6:	f8ad 3015 	strh.w	r3, [sp, #21]
    74ea:	e7e2      	b.n	74b2 <bt_gatt_attr_read_chrc+0x4a>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    74ec:	2210      	movs	r2, #16
    74ee:	3101      	adds	r1, #1
    74f0:	f10d 0017 	add.w	r0, sp, #23
    74f4:	f7fa fba8 	bl	1c48 <memcpy>
		value_len += 16;
    74f8:	2313      	movs	r3, #19
    74fa:	e7e2      	b.n	74c2 <bt_gatt_attr_read_chrc+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    74fc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    7500:	e7ec      	b.n	74dc <bt_gatt_attr_read_chrc+0x74>
    7502:	bf00      	nop
    7504:	00015359 	.word	0x00015359
    7508:	20003a5c 	.word	0x20003a5c
    750c:	000167d7 	.word	0x000167d7
    7510:	00017732 	.word	0x00017732
    7514:	0001679c 	.word	0x0001679c
    7518:	00017784 	.word	0x00017784

0000751c <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    751c:	4603      	mov	r3, r0
    751e:	4a03      	ldr	r2, [pc, #12]	; (752c <bt_gatt_connected+0x10>)
    7520:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7524:	2001      	movs	r0, #1
    7526:	f7ff bf0d 	b.w	7344 <bt_gatt_foreach_attr>
    752a:	bf00      	nop
    752c:	00006e99 	.word	0x00006e99

00007530 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7530:	4603      	mov	r3, r0
    7532:	4a03      	ldr	r2, [pc, #12]	; (7540 <bt_gatt_disconnected+0x10>)
    7534:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7538:	2001      	movs	r0, #1
    753a:	f7ff bf03 	b.w	7344 <bt_gatt_foreach_attr>
    753e:	bf00      	nop
    7540:	00006f81 	.word	0x00006f81

00007544 <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    7544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;
	static struct bt_l2cap_chan_ops ops = {
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);
    7548:	4e14      	ldr	r6, [pc, #80]	; (759c <bt_smp_accept+0x58>)
    754a:	4c15      	ldr	r4, [pc, #84]	; (75a0 <bt_smp_accept+0x5c>)
    754c:	f8d6 8000 	ldr.w	r8, [r6]
{
    7550:	b086      	sub	sp, #24
    7552:	4605      	mov	r5, r0
    7554:	460f      	mov	r7, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    7556:	f00d f939 	bl	147cc <_impl_k_current_get>
	BT_DBG("conn %p handle %u", conn, conn->handle);
    755a:	882b      	ldrh	r3, [r5, #0]
    755c:	9303      	str	r3, [sp, #12]
    755e:	9001      	str	r0, [sp, #4]
    7560:	4b10      	ldr	r3, [pc, #64]	; (75a4 <bt_smp_accept+0x60>)
    7562:	4811      	ldr	r0, [pc, #68]	; (75a8 <bt_smp_accept+0x64>)
    7564:	9404      	str	r4, [sp, #16]
    7566:	9502      	str	r5, [sp, #8]
    7568:	9400      	str	r4, [sp, #0]
    756a:	4a10      	ldr	r2, [pc, #64]	; (75ac <bt_smp_accept+0x68>)
    756c:	4910      	ldr	r1, [pc, #64]	; (75b0 <bt_smp_accept+0x6c>)
    756e:	47c0      	blx	r8

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    7570:	4b10      	ldr	r3, [pc, #64]	; (75b4 <bt_smp_accept+0x70>)
    7572:	6818      	ldr	r0, [r3, #0]
    7574:	b928      	cbnz	r0, 7582 <bt_smp_accept+0x3e>
			continue;
		}

		smp->chan.ops = &ops;
    7576:	4a10      	ldr	r2, [pc, #64]	; (75b8 <bt_smp_accept+0x74>)
    7578:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    757a:	603b      	str	r3, [r7, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    757c:	b006      	add	sp, #24
    757e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    7582:	9402      	str	r4, [sp, #8]
    7584:	e88d 0030 	stmia.w	sp, {r4, r5}
    7588:	480c      	ldr	r0, [pc, #48]	; (75bc <bt_smp_accept+0x78>)
    758a:	6834      	ldr	r4, [r6, #0]
    758c:	4b05      	ldr	r3, [pc, #20]	; (75a4 <bt_smp_accept+0x60>)
    758e:	4a0c      	ldr	r2, [pc, #48]	; (75c0 <bt_smp_accept+0x7c>)
    7590:	4907      	ldr	r1, [pc, #28]	; (75b0 <bt_smp_accept+0x6c>)
    7592:	47a0      	blx	r4
	return -ENOMEM;
    7594:	f06f 000b 	mvn.w	r0, #11
    7598:	e7f0      	b.n	757c <bt_smp_accept+0x38>
    759a:	bf00      	nop
    759c:	20003a5c 	.word	0x20003a5c
    75a0:	00015359 	.word	0x00015359
    75a4:	000178b6 	.word	0x000178b6
    75a8:	000178c4 	.word	0x000178c4
    75ac:	0001587b 	.word	0x0001587b
    75b0:	0001679c 	.word	0x0001679c
    75b4:	200005f0 	.word	0x200005f0
    75b8:	20003d10 	.word	0x20003d10
    75bc:	000178eb 	.word	0x000178eb
    75c0:	00016754 	.word	0x00016754

000075c4 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    75c4:	2100      	movs	r1, #0
{
    75c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    75ca:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    75cc:	4608      	mov	r0, r1
    75ce:	f7fe f866 	bl	569e <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    75d2:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    75d6:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    75d8:	2101      	movs	r1, #1
    75da:	4630      	mov	r0, r6
    75dc:	f00c f8ae 	bl	1373c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    75e0:	2505      	movs	r5, #5
    75e2:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    75e4:	2101      	movs	r1, #1
    75e6:	4630      	mov	r0, r6
    75e8:	f00c f8a8 	bl	1373c <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    75ec:	7005      	strb	r5, [r0, #0]
    75ee:	4622      	mov	r2, r4
    75f0:	4638      	mov	r0, r7
    75f2:	2300      	movs	r3, #0
    75f4:	2106      	movs	r1, #6
}
    75f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    75fa:	f7fe b853 	b.w	56a4 <bt_l2cap_send_cb>

000075fe <bt_smp_sign_verify>:
    75fe:	f06f 0022 	mvn.w	r0, #34	; 0x22
    7602:	4770      	bx	lr

00007604 <bt_smp_init>:

int bt_smp_init(void)
{
    7604:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    7606:	4802      	ldr	r0, [pc, #8]	; (7610 <bt_smp_init+0xc>)
    7608:	f7fd ff8c 	bl	5524 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    760c:	2000      	movs	r0, #0
    760e:	bd08      	pop	{r3, pc}
    7610:	20003d04 	.word	0x20003d04

00007614 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    7614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    7616:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7618:	1dc3      	adds	r3, r0, #7
{
    761a:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    761c:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7620:	1e50      	subs	r0, r2, #1
{
    7622:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7624:	b280      	uxth	r0, r0
{
    7626:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7628:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    762a:	2100      	movs	r1, #0
    762c:	2204      	movs	r2, #4
    762e:	fb06 5000 	mla	r0, r6, r0, r5
    7632:	f7fa fb35 	bl	1ca0 <memset>
    7636:	3c02      	subs	r4, #2
    7638:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    763a:	f64f 77ff 	movw	r7, #65535	; 0xffff
    763e:	42bc      	cmp	r4, r7
    7640:	d101      	bne.n	7646 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    7642:	b003      	add	sp, #12
    7644:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    7646:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    764a:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    764c:	2204      	movs	r2, #4
    764e:	1b80      	subs	r0, r0, r6
    7650:	eb0d 0102 	add.w	r1, sp, r2
    7654:	4428      	add	r0, r5
    7656:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    7658:	9301      	str	r3, [sp, #4]
    765a:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    765c:	f7fa faf4 	bl	1c48 <memcpy>
    7660:	e7ed      	b.n	763e <mem_init+0x2a>

00007662 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    7662:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    7664:	6805      	ldr	r5, [r0, #0]
{
    7666:	4606      	mov	r6, r0
	if (*mem_head) {
    7668:	b195      	cbz	r5, 7690 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    766a:	1deb      	adds	r3, r5, #7
    766c:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    7670:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    7672:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    7674:	4629      	mov	r1, r5
    7676:	eb0d 0002 	add.w	r0, sp, r2
    767a:	f7fa fae5 	bl	1c48 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    767e:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    7680:	3c01      	subs	r4, #1
    7682:	b2a4      	uxth	r4, r4
		if (head) {
    7684:	b11b      	cbz	r3, 768e <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    7686:	1dda      	adds	r2, r3, #7
    7688:	f022 0203 	bic.w	r2, r2, #3
    768c:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    768e:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    7690:	4628      	mov	r0, r5
    7692:	b002      	add	sp, #8
    7694:	bd70      	pop	{r4, r5, r6, pc}

00007696 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    7696:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    7698:	680c      	ldr	r4, [r1, #0]
{
    769a:	4606      	mov	r6, r0
    769c:	460d      	mov	r5, r1
	if (*mem_head) {
    769e:	b11c      	cbz	r4, 76a8 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    76a0:	1de3      	adds	r3, r4, #7
    76a2:	f023 0303 	bic.w	r3, r3, #3
    76a6:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    76a8:	2204      	movs	r2, #4
    76aa:	4629      	mov	r1, r5
    76ac:	4630      	mov	r0, r6
    76ae:	f7fa facb 	bl	1c48 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    76b2:	1df2      	adds	r2, r6, #7
    76b4:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    76b8:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    76ba:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    76bc:	602e      	str	r6, [r5, #0]
    76be:	bd70      	pop	{r4, r5, r6, pc}

000076c0 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    76c0:	b118      	cbz	r0, 76ca <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    76c2:	3007      	adds	r0, #7
    76c4:	f020 0003 	bic.w	r0, r0, #3
    76c8:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    76ca:	4770      	bx	lr

000076cc <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    76cc:	fb02 0001 	mla	r0, r2, r1, r0
    76d0:	4770      	bx	lr

000076d2 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    76d2:	1a40      	subs	r0, r0, r1
    76d4:	b280      	uxth	r0, r0
}
    76d6:	fbb0 f0f2 	udiv	r0, r0, r2
    76da:	4770      	bx	lr

000076dc <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    76dc:	b510      	push	{r4, lr}
	src += len;
    76de:	4411      	add	r1, r2
    76e0:	3801      	subs	r0, #1
	while (len--) {
    76e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    76e6:	3a01      	subs	r2, #1
    76e8:	b292      	uxth	r2, r2
    76ea:	429a      	cmp	r2, r3
    76ec:	d100      	bne.n	76f0 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    76ee:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    76f0:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    76f4:	f800 4f01 	strb.w	r4, [r0, #1]!
    76f8:	e7f5      	b.n	76e6 <mem_rcopy+0xa>

000076fa <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    76fa:	4401      	add	r1, r0
	while (len--) {
    76fc:	4288      	cmp	r0, r1
    76fe:	d101      	bne.n	7704 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    7700:	2000      	movs	r0, #0
    7702:	4770      	bx	lr
		if (*src++) {
    7704:	f810 3b01 	ldrb.w	r3, [r0], #1
    7708:	2b00      	cmp	r3, #0
    770a:	d0f7      	beq.n	76fc <mem_nz+0x2>
			return 1;
    770c:	2001      	movs	r0, #1
}
    770e:	4770      	bx	lr

00007710 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    7710:	6010      	str	r0, [r2, #0]
    7712:	6008      	str	r0, [r1, #0]

	return link;
}
    7714:	4770      	bx	lr

00007716 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    7716:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    7718:	6814      	ldr	r4, [r2, #0]
    771a:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    771c:	6814      	ldr	r4, [r2, #0]
    771e:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    7720:	6010      	str	r0, [r2, #0]

	return link;
}
    7722:	bd10      	pop	{r4, pc}

00007724 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    7724:	4288      	cmp	r0, r1
    7726:	d003      	beq.n	7730 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    7728:	b11a      	cbz	r2, 7732 <memq_peek+0xe>
		*mem = head->mem;
    772a:	6843      	ldr	r3, [r0, #4]
    772c:	6013      	str	r3, [r2, #0]
    772e:	4770      	bx	lr
		return NULL;
    7730:	2000      	movs	r0, #0
	}

	return head;
}
    7732:	4770      	bx	lr

00007734 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    7734:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    7736:	4283      	cmp	r3, r0
    7738:	d009      	beq.n	774e <memq_dequeue+0x1a>
	if (mem) {
    773a:	b122      	cbz	r2, 7746 <memq_dequeue+0x12>
		*mem = head->mem;
    773c:	6858      	ldr	r0, [r3, #4]
    773e:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    7740:	681a      	ldr	r2, [r3, #0]
    7742:	600a      	str	r2, [r1, #0]

	return link;
    7744:	e001      	b.n	774a <memq_dequeue+0x16>
	if (!link) {
    7746:	2b00      	cmp	r3, #0
    7748:	d1fa      	bne.n	7740 <memq_dequeue+0xc>
}
    774a:	4618      	mov	r0, r3
    774c:	4770      	bx	lr
		return NULL;
    774e:	2300      	movs	r3, #0
    7750:	e7fb      	b.n	774a <memq_dequeue+0x16>
	...

00007754 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    7754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    7758:	4f11      	ldr	r7, [pc, #68]	; (77a0 <mayfly_init+0x4c>)
    775a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 77a4 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    775e:	2604      	movs	r6, #4
	while (callee_id--) {
    7760:	3e01      	subs	r6, #1
    7762:	b2f6      	uxtb	r6, r6
    7764:	2eff      	cmp	r6, #255	; 0xff
    7766:	d019      	beq.n	779c <mayfly_init+0x48>
    7768:	b233      	sxth	r3, r6
    776a:	ea4f 0883 	mov.w	r8, r3, lsl #2
    776e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7772:	011d      	lsls	r5, r3, #4
    7774:	2404      	movs	r4, #4
    7776:	f04f 0a0c 	mov.w	sl, #12
    777a:	e00a      	b.n	7792 <mayfly_init+0x3e>
    777c:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    7780:	1d0a      	adds	r2, r1, #4
    7782:	eb04 0008 	add.w	r0, r4, r8
    7786:	443a      	add	r2, r7
    7788:	4439      	add	r1, r7
    778a:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    778e:	f7ff ffbf 	bl	7710 <memq_init>
		while (caller_id--) {
    7792:	3c01      	subs	r4, #1
    7794:	b2e4      	uxtb	r4, r4
    7796:	2cff      	cmp	r4, #255	; 0xff
    7798:	d1f0      	bne.n	777c <mayfly_init+0x28>
    779a:	e7e1      	b.n	7760 <mayfly_init+0xc>
    779c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77a0:	20000704 	.word	0x20000704
    77a4:	20000684 	.word	0x20000684

000077a8 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    77a8:	b4f0      	push	{r4, r5, r6, r7}
    77aa:	4b12      	ldr	r3, [pc, #72]	; (77f4 <mayfly_enable+0x4c>)
    77ac:	4605      	mov	r5, r0
    77ae:	460f      	mov	r7, r1
    77b0:	260c      	movs	r6, #12
    77b2:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    77b4:	b172      	cbz	r2, 77d4 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    77b6:	4361      	muls	r1, r4
    77b8:	fb06 1400 	mla	r4, r6, r0, r1
    77bc:	4423      	add	r3, r4
    77be:	7a59      	ldrb	r1, [r3, #9]
    77c0:	7a18      	ldrb	r0, [r3, #8]
    77c2:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    77c4:	bf04      	itt	eq
    77c6:	3101      	addeq	r1, #1
    77c8:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    77ca:	4628      	mov	r0, r5
    77cc:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    77ce:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    77d0:	f00b bda0 	b.w	13314 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    77d4:	434c      	muls	r4, r1
    77d6:	fb06 4400 	mla	r4, r6, r0, r4
    77da:	4423      	add	r3, r4
    77dc:	7a9c      	ldrb	r4, [r3, #10]
    77de:	7ada      	ldrb	r2, [r3, #11]
    77e0:	42a2      	cmp	r2, r4
    77e2:	d104      	bne.n	77ee <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    77e4:	3201      	adds	r2, #1
    77e6:	729a      	strb	r2, [r3, #10]
}
    77e8:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    77ea:	f00b bdf9 	b.w	133e0 <mayfly_pend>
}
    77ee:	bcf0      	pop	{r4, r5, r6, r7}
    77f0:	4770      	bx	lr
    77f2:	bf00      	nop
    77f4:	20000704 	.word	0x20000704

000077f8 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    77f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77fa:	4605      	mov	r5, r0
    77fc:	460e      	mov	r6, r1
    77fe:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    7800:	b18a      	cbz	r2, 7826 <mayfly_enqueue+0x2e>
    7802:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    7804:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    7806:	7820      	ldrb	r0, [r4, #0]
    7808:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    780a:	f010 0703 	ands.w	r7, r0, #3
    780e:	d029      	beq.n	7864 <mayfly_enqueue+0x6c>
		if (chain) {
    7810:	b303      	cbz	r3, 7854 <mayfly_enqueue+0x5c>
			if (state != 1) {
    7812:	2f01      	cmp	r7, #1
    7814:	d039      	beq.n	788a <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    7816:	3201      	adds	r2, #1
    7818:	b2d2      	uxtb	r2, r2
    781a:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    781c:	4631      	mov	r1, r6
    781e:	4628      	mov	r0, r5
    7820:	f00b fdde 	bl	133e0 <mayfly_pend>
    7824:	e01c      	b.n	7860 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    7826:	f00b fdc9 	bl	133bc <mayfly_prio_is_equal>
    782a:	2800      	cmp	r0, #0
    782c:	d0e9      	beq.n	7802 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    782e:	4631      	mov	r1, r6
    7830:	4628      	mov	r0, r5
    7832:	f00b fd9b 	bl	1336c <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    7836:	2800      	cmp	r0, #0
    7838:	d0e3      	beq.n	7802 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    783a:	2330      	movs	r3, #48	; 0x30
    783c:	220c      	movs	r2, #12
    783e:	4373      	muls	r3, r6
    7840:	fb02 3305 	mla	r3, r2, r5, r3
    7844:	4a12      	ldr	r2, [pc, #72]	; (7890 <mayfly_enqueue+0x98>)
    7846:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    7848:	7a93      	ldrb	r3, [r2, #10]
    784a:	7ad2      	ldrb	r2, [r2, #11]
    784c:	1a9b      	subs	r3, r3, r2
    784e:	bf18      	it	ne
    7850:	2301      	movne	r3, #1
    7852:	e7d7      	b.n	7804 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    7854:	3202      	adds	r2, #2
    7856:	b2d2      	uxtb	r2, r2
    7858:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    785a:	68e3      	ldr	r3, [r4, #12]
    785c:	68a0      	ldr	r0, [r4, #8]
    785e:	4798      	blx	r3
		return 0;
    7860:	2000      	movs	r0, #0
    7862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    7864:	2b00      	cmp	r3, #0
    7866:	d0f8      	beq.n	785a <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    7868:	3201      	adds	r2, #1
    786a:	b2d2      	uxtb	r2, r2
    786c:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    786e:	2304      	movs	r3, #4
    7870:	2230      	movs	r2, #48	; 0x30
    7872:	fb12 3206 	smlabb	r2, r2, r6, r3
    7876:	230c      	movs	r3, #12
    7878:	fb13 2305 	smlabb	r3, r3, r5, r2
    787c:	4a04      	ldr	r2, [pc, #16]	; (7890 <mayfly_enqueue+0x98>)
    787e:	6860      	ldr	r0, [r4, #4]
    7880:	441a      	add	r2, r3
    7882:	4621      	mov	r1, r4
    7884:	f7ff ff47 	bl	7716 <memq_enqueue>
    7888:	e7c8      	b.n	781c <mayfly_enqueue+0x24>
			return 1;
    788a:	4638      	mov	r0, r7

	return 0;
}
    788c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    788e:	bf00      	nop
    7890:	20000704 	.word	0x20000704

00007894 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    7894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7898:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    789c:	b089      	sub	sp, #36	; 0x24
    789e:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    78a0:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    78a4:	4e43      	ldr	r6, [pc, #268]	; (79b4 <mayfly_run+0x120>)
    78a6:	9304      	str	r3, [sp, #16]
{
    78a8:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    78aa:	2404      	movs	r4, #4
	u8_t disable = 0;
    78ac:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    78b0:	3c01      	subs	r4, #1
    78b2:	b2e4      	uxtb	r4, r4
    78b4:	2cff      	cmp	r4, #255	; 0xff
    78b6:	d10b      	bne.n	78d0 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    78b8:	9b01      	ldr	r3, [sp, #4]
    78ba:	2b00      	cmp	r3, #0
    78bc:	d076      	beq.n	79ac <mayfly_run+0x118>
    78be:	f1b8 0f00 	cmp.w	r8, #0
    78c2:	d173      	bne.n	79ac <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    78c4:	4642      	mov	r2, r8
    78c6:	4629      	mov	r1, r5
    78c8:	4628      	mov	r0, r5
    78ca:	f00b fd23 	bl	13314 <mayfly_enable_cb>
    78ce:	e06d      	b.n	79ac <mayfly_run+0x118>
		struct mayfly *m = 0;
    78d0:	f10d 0b20 	add.w	fp, sp, #32
    78d4:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    78d6:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    78d8:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    78dc:	f04f 0930 	mov.w	r9, #48	; 0x30
    78e0:	fb07 f304 	mul.w	r3, r7, r4
    78e4:	fb09 3005 	mla	r0, r9, r5, r3
    78e8:	1831      	adds	r1, r6, r0
    78ea:	465a      	mov	r2, fp
    78ec:	6849      	ldr	r1, [r1, #4]
    78ee:	5830      	ldr	r0, [r6, r0]
    78f0:	9302      	str	r3, [sp, #8]
    78f2:	f7ff ff17 	bl	7724 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    78f6:	9b04      	ldr	r3, [sp, #16]
    78f8:	fb17 3704 	smlabb	r7, r7, r4, r3
    78fc:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    78fe:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    7900:	9303      	str	r3, [sp, #12]
		while (link) {
    7902:	f1ba 0f00 	cmp.w	sl, #0
    7906:	d119      	bne.n	793c <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    7908:	2230      	movs	r2, #48	; 0x30
    790a:	230c      	movs	r3, #12
    790c:	436a      	muls	r2, r5
    790e:	fb03 2204 	mla	r2, r3, r4, r2
    7912:	4432      	add	r2, r6
    7914:	7a91      	ldrb	r1, [r2, #10]
    7916:	7ad0      	ldrb	r0, [r2, #11]
    7918:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    791a:	bf1e      	ittt	ne
    791c:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    791e:	2201      	movne	r2, #1
    7920:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    7922:	2230      	movs	r2, #48	; 0x30
    7924:	436a      	muls	r2, r5
    7926:	fb03 2304 	mla	r3, r3, r4, r2
    792a:	4433      	add	r3, r6
    792c:	7a1a      	ldrb	r2, [r3, #8]
    792e:	7a59      	ldrb	r1, [r3, #9]
    7930:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    7932:	bf1c      	itt	ne
    7934:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    7936:	f04f 0801 	movne.w	r8, #1
    793a:	e7b9      	b.n	78b0 <mayfly_run+0x1c>
			req = m->_req;
    793c:	9b07      	ldr	r3, [sp, #28]
    793e:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    7940:	785a      	ldrb	r2, [r3, #1]
    7942:	1abf      	subs	r7, r7, r2
    7944:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    7948:	2f01      	cmp	r7, #1
    794a:	d104      	bne.n	7956 <mayfly_run+0xc2>
				m->_ack--;
    794c:	3a01      	subs	r2, #1
    794e:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    7950:	6898      	ldr	r0, [r3, #8]
    7952:	68da      	ldr	r2, [r3, #12]
    7954:	4790      	blx	r2
			req = m->_req;
    7956:	9a07      	ldr	r2, [sp, #28]
    7958:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    795a:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    795c:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    795e:	1a9a      	subs	r2, r3, r2
    7960:	f002 0203 	and.w	r2, r2, #3
    7964:	2a01      	cmp	r2, #1
    7966:	9305      	str	r3, [sp, #20]
    7968:	d00d      	beq.n	7986 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    796a:	9b02      	ldr	r3, [sp, #8]
    796c:	9903      	ldr	r1, [sp, #12]
    796e:	fb09 3005 	mla	r0, r9, r5, r3
    7972:	4430      	add	r0, r6
    7974:	2200      	movs	r2, #0
    7976:	6840      	ldr	r0, [r0, #4]
    7978:	f7ff fedc 	bl	7734 <memq_dequeue>
				m->_link = link;
    797c:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    797e:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    7980:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    7984:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    7986:	9b02      	ldr	r3, [sp, #8]
    7988:	fb09 3305 	mla	r3, r9, r5, r3
    798c:	18f1      	adds	r1, r6, r3
    798e:	465a      	mov	r2, fp
    7990:	6849      	ldr	r1, [r1, #4]
    7992:	58f0      	ldr	r0, [r6, r3]
    7994:	f7ff fec6 	bl	7724 <memq_peek>
			if (state == 1) {
    7998:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    799a:	4682      	mov	sl, r0
			if (state == 1) {
    799c:	d1b1      	bne.n	7902 <mayfly_run+0x6e>
				if (caller_id || link) {
    799e:	b90c      	cbnz	r4, 79a4 <mayfly_run+0x110>
    79a0:	2800      	cmp	r0, #0
    79a2:	d0b1      	beq.n	7908 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    79a4:	4629      	mov	r1, r5
    79a6:	4628      	mov	r0, r5
    79a8:	f00b fd1a 	bl	133e0 <mayfly_pend>
	}
}
    79ac:	b009      	add	sp, #36	; 0x24
    79ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    79b2:	bf00      	nop
    79b4:	20000704 	.word	0x20000704

000079b8 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    79b8:	b510      	push	{r4, lr}
    79ba:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    79bc:	2000      	movs	r0, #0

	while (octets_len--) {
    79be:	3901      	subs	r1, #1
    79c0:	b2c9      	uxtb	r1, r1
    79c2:	29ff      	cmp	r1, #255	; 0xff
    79c4:	d100      	bne.n	79c8 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    79c6:	bd10      	pop	{r4, pc}
		bite = *octets;
    79c8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    79cc:	2b00      	cmp	r3, #0
    79ce:	d0f6      	beq.n	79be <util_ones_count_get+0x6>
			bite &= (bite - 1);
    79d0:	1e5c      	subs	r4, r3, #1
			one_count++;
    79d2:	3001      	adds	r0, #1
			bite &= (bite - 1);
    79d4:	4023      	ands	r3, r4
			one_count++;
    79d6:	b2c0      	uxtb	r0, r0
    79d8:	e7f8      	b.n	79cc <util_ones_count_get+0x14>

000079da <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    79da:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    79dc:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    79de:	6805      	ldr	r5, [r0, #0]
	current = previous;
    79e0:	461a      	mov	r2, r3
	total = 0;
    79e2:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    79e4:	2aff      	cmp	r2, #255	; 0xff
    79e6:	d101      	bne.n	79ec <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    79e8:	2000      	movs	r0, #0
    79ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    79ec:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    79f0:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    79f2:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    79f6:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    79fa:	d004      	beq.n	7a06 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    79fc:	68b3      	ldr	r3, [r6, #8]
    79fe:	441c      	add	r4, r3
		current = ticker_current->next;
    7a00:	4613      	mov	r3, r2
    7a02:	463a      	mov	r2, r7
    7a04:	e7ee      	b.n	79e4 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    7a06:	4293      	cmp	r3, r2
    7a08:	d100      	bne.n	7a0c <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    7a0a:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    7a0c:	b21b      	sxth	r3, r3
    7a0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7a12:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    7a14:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    7a16:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    7a1a:	7833      	ldrb	r3, [r6, #0]
    7a1c:	2bff      	cmp	r3, #255	; 0xff
    7a1e:	d006      	beq.n	7a2e <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    7a20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7a24:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    7a28:	689a      	ldr	r2, [r3, #8]
    7a2a:	4402      	add	r2, r0
    7a2c:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    7a2e:	4420      	add	r0, r4
    7a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007a32 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    7a32:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7a34:	1a55      	subs	r5, r2, r1
    7a36:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    7a3a:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    7a3c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7a3e:	d109      	bne.n	7a54 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7a40:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    7a44:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    7a46:	42a2      	cmp	r2, r4
    7a48:	d90e      	bls.n	7a68 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    7a4a:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    7a4c:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    7a4e:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    7a50:	6144      	str	r4, [r0, #20]
    7a52:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7a54:	1a8a      	subs	r2, r1, r2
    7a56:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    7a5a:	4293      	cmp	r3, r2
    7a5c:	d901      	bls.n	7a62 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    7a5e:	1a9a      	subs	r2, r3, r2
    7a60:	e7f1      	b.n	7a46 <ticks_to_expire_prep+0x14>
    7a62:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    7a64:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    7a66:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    7a68:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    7a6a:	2200      	movs	r2, #0
    7a6c:	e7ef      	b.n	7a4e <ticks_to_expire_prep+0x1c>

00007a6e <ticker_job_op_cb>:
{
    7a6e:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7a70:	2200      	movs	r2, #0
    7a72:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    7a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    7a76:	6259      	str	r1, [r3, #36]	; 0x24
{
    7a78:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    7a7a:	b10a      	cbz	r2, 7a80 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    7a7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    7a7e:	4710      	bx	r2
    7a80:	4770      	bx	lr

00007a82 <ticker_worker>:
{
    7a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    7a86:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    7a88:	2301      	movs	r3, #1
{
    7a8a:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    7a8c:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    7a8e:	2d00      	cmp	r5, #0
    7a90:	d14c      	bne.n	7b2c <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    7a92:	7f43      	ldrb	r3, [r0, #29]
    7a94:	2bff      	cmp	r3, #255	; 0xff
    7a96:	d102      	bne.n	7a9e <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    7a98:	77c5      	strb	r5, [r0, #31]
		return;
    7a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    7a9e:	f00a ffa3 	bl	129e8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7aa2:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    7aa4:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    7aa6:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7aaa:	1bc7      	subs	r7, r0, r7
    7aac:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    7ab0:	2eff      	cmp	r6, #255	; 0xff
    7ab2:	d006      	beq.n	7ac2 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    7ab4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    7ab8:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7abc:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7abe:	429f      	cmp	r7, r3
    7ac0:	d218      	bcs.n	7af4 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    7ac2:	7aa2      	ldrb	r2, [r4, #10]
    7ac4:	7ae3      	ldrb	r3, [r4, #11]
    7ac6:	4293      	cmp	r3, r2
    7ac8:	d105      	bne.n	7ad6 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    7aca:	3301      	adds	r3, #1
    7acc:	b2db      	uxtb	r3, r3
			last = 0;
    7ace:	2b02      	cmp	r3, #2
    7ad0:	bf08      	it	eq
    7ad2:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    7ad4:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7ad6:	7ae3      	ldrb	r3, [r4, #11]
    7ad8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7adc:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7ade:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    7ae0:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7ae2:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    7ae4:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7ae6:	46ac      	mov	ip, r5
    7ae8:	4623      	mov	r3, r4
    7aea:	2104      	movs	r1, #4
    7aec:	2003      	movs	r0, #3
}
    7aee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7af2:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    7af4:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    7af6:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7af8:	788a      	ldrb	r2, [r1, #2]
    7afa:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    7afc:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7b00:	1a9b      	subs	r3, r3, r2
    7b02:	b2db      	uxtb	r3, r3
    7b04:	2b01      	cmp	r3, #1
    7b06:	d1d3      	bne.n	7ab0 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    7b08:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    7b0c:	3a01      	subs	r2, #1
    7b0e:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    7b10:	f1b9 0f00 	cmp.w	r9, #0
    7b14:	d0cc      	beq.n	7ab0 <ticker_worker+0x2e>
					   ticks_expired -
    7b16:	6948      	ldr	r0, [r1, #20]
    7b18:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    7b1a:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    7b1c:	1a28      	subs	r0, r5, r0
    7b1e:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    7b20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7b24:	690b      	ldr	r3, [r1, #16]
    7b26:	6a49      	ldr	r1, [r1, #36]	; 0x24
    7b28:	47c8      	blx	r9
    7b2a:	e7c1      	b.n	7ab0 <ticker_worker+0x2e>
    7b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007b30 <ticker_job>:
{
    7b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    7b34:	7fc2      	ldrb	r2, [r0, #31]
{
    7b36:	b095      	sub	sp, #84	; 0x54
    7b38:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    7b3a:	2a00      	cmp	r2, #0
    7b3c:	f040 83bf 	bne.w	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
	ticks_previous = instance->ticks_current;
    7b40:	6943      	ldr	r3, [r0, #20]
    7b42:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    7b44:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7b46:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    7b48:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7b4a:	7ac0      	ldrb	r0, [r0, #11]
    7b4c:	4298      	cmp	r0, r3
    7b4e:	f000 808f 	beq.w	7c70 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    7b52:	440b      	add	r3, r1
    7b54:	b2db      	uxtb	r3, r3
			first = 0;
    7b56:	2b02      	cmp	r3, #2
    7b58:	bf08      	it	eq
    7b5a:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    7b5c:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    7b60:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    7b64:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    7b66:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    7b6a:	9b07      	ldr	r3, [sp, #28]
    7b6c:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    7b6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7b72:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    7b76:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7b7a:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    7b7c:	f8db 3000 	ldr.w	r3, [fp]
    7b80:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    7b82:	f8db 3004 	ldr.w	r3, [fp, #4]
    7b86:	930d      	str	r3, [sp, #52]	; 0x34
    7b88:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7b8c:	3b01      	subs	r3, #1
    7b8e:	b2db      	uxtb	r3, r3
    7b90:	9304      	str	r3, [sp, #16]
	pending = 0;
    7b92:	2300      	movs	r3, #0
    7b94:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    7b96:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    7b9a:	9b04      	ldr	r3, [sp, #16]
    7b9c:	2bff      	cmp	r3, #255	; 0xff
    7b9e:	d16a      	bne.n	7c76 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7ba0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    7ba4:	9a05      	ldr	r2, [sp, #20]
    7ba6:	1a9b      	subs	r3, r3, r2
    7ba8:	bf18      	it	ne
    7baa:	2301      	movne	r3, #1
    7bac:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    7bae:	9b03      	ldr	r3, [sp, #12]
    7bb0:	b1e3      	cbz	r3, 7bec <ticker_job+0xbc>
	node = &instance->node[0];
    7bb2:	f8db 3000 	ldr.w	r3, [fp]
    7bb6:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    7bb8:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    7bbc:	f89b 601d 	ldrb.w	r6, [fp, #29]
    7bc0:	2eff      	cmp	r6, #255	; 0xff
    7bc2:	d00c      	beq.n	7bde <ticker_job+0xae>
		ticker = &node[id_expired];
    7bc4:	b237      	sxth	r7, r6
    7bc6:	9b06      	ldr	r3, [sp, #24]
    7bc8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    7bcc:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7bd0:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7bd2:	4545      	cmp	r5, r8
    7bd4:	f240 8136 	bls.w	7e44 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    7bd8:	eba5 0508 	sub.w	r5, r5, r8
    7bdc:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    7bde:	9b04      	ldr	r3, [sp, #16]
    7be0:	9a03      	ldr	r2, [sp, #12]
    7be2:	9905      	ldr	r1, [sp, #20]
    7be4:	42b1      	cmp	r1, r6
    7be6:	bf18      	it	ne
    7be8:	4613      	movne	r3, r2
    7bea:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    7bec:	f8db 3000 	ldr.w	r3, [fp]
    7bf0:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    7bf2:	f8db 3004 	ldr.w	r3, [fp, #4]
    7bf6:	9312      	str	r3, [sp, #72]	; 0x48
    7bf8:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7bfc:	3b01      	subs	r3, #1
    7bfe:	b2db      	uxtb	r3, r3
    7c00:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    7c02:	9b03      	ldr	r3, [sp, #12]
    7c04:	2bff      	cmp	r3, #255	; 0xff
    7c06:	f040 8170 	bne.w	7eea <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7c0a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7c0e:	9a05      	ldr	r2, [sp, #20]
    7c10:	4293      	cmp	r3, r2
	if (!pending) {
    7c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    7c14:	f040 834a 	bne.w	82ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ac>
	if (!pending) {
    7c18:	b95b      	cbnz	r3, 7c32 <ticker_job+0x102>
    7c1a:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    7c1e:	f8db 3004 	ldr.w	r3, [fp, #4]
    7c22:	9303      	str	r3, [sp, #12]
    7c24:	3c01      	subs	r4, #1
    7c26:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    7c28:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    7c2c:	2cff      	cmp	r4, #255	; 0xff
    7c2e:	f040 82a0 	bne.w	8172 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x172>
	instance->job_guard = 0;
    7c32:	2300      	movs	r3, #0
    7c34:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    7c38:	9b04      	ldr	r3, [sp, #16]
    7c3a:	b14b      	cbz	r3, 7c50 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    7c3c:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7c40:	2bff      	cmp	r3, #255	; 0xff
    7c42:	f040 82e9 	bne.w	8218 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x218>
		if (cntr_stop() == 0) {
    7c46:	f00a fe9f 	bl	12988 <cntr_stop>
    7c4a:	b908      	cbnz	r0, 7c50 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    7c4c:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    7c50:	f89b 301f 	ldrb.w	r3, [fp, #31]
    7c54:	2b00      	cmp	r3, #0
    7c56:	f000 8332 	beq.w	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7c5a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7c5e:	465b      	mov	r3, fp
    7c60:	2201      	movs	r2, #1
    7c62:	2103      	movs	r1, #3
    7c64:	2004      	movs	r0, #4
    7c66:	46a4      	mov	ip, r4
}
    7c68:	b015      	add	sp, #84	; 0x54
    7c6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7c6e:	4760      	bx	ip
		flag_elapsed = 0;
    7c70:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    7c72:	4690      	mov	r8, r2
    7c74:	e77f      	b.n	7b76 <ticker_job+0x46>
		user = &users[count_user];
    7c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7c78:	9a04      	ldr	r2, [sp, #16]
    7c7a:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    7c7e:	687b      	ldr	r3, [r7, #4]
    7c80:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    7c82:	78f9      	ldrb	r1, [r7, #3]
    7c84:	78be      	ldrb	r6, [r7, #2]
    7c86:	428e      	cmp	r6, r1
    7c88:	f000 80d7 	beq.w	7e3a <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    7c8c:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    7c8e:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    7c90:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    7c94:	0112      	lsls	r2, r2, #4
    7c96:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    7c98:	1c73      	adds	r3, r6, #1
    7c9a:	b2db      	uxtb	r3, r3
				middle = 0;
    7c9c:	4298      	cmp	r0, r3
    7c9e:	bf08      	it	eq
    7ca0:	2300      	moveq	r3, #0
			user->middle = middle;
    7ca2:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    7ca4:	9b08      	ldr	r3, [sp, #32]
    7ca6:	5c9a      	ldrb	r2, [r3, r2]
    7ca8:	2a03      	cmp	r2, #3
    7caa:	d9eb      	bls.n	7c84 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    7cac:	2a05      	cmp	r2, #5
    7cae:	d817      	bhi.n	7ce0 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    7cb0:	7869      	ldrb	r1, [r5, #1]
    7cb2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    7cb6:	930c      	str	r3, [sp, #48]	; 0x30
    7cb8:	980c      	ldr	r0, [sp, #48]	; 0x30
    7cba:	9b06      	ldr	r3, [sp, #24]
    7cbc:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    7cc0:	7863      	ldrb	r3, [r4, #1]
    7cc2:	78a0      	ldrb	r0, [r4, #2]
    7cc4:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    7cc6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7cca:	d009      	beq.n	7ce0 <ticker_job+0x1b0>
			    (state == 0) ||
    7ccc:	2a04      	cmp	r2, #4
    7cce:	d10c      	bne.n	7cea <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    7cd0:	686a      	ldr	r2, [r5, #4]
    7cd2:	b952      	cbnz	r2, 7cea <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    7cd4:	68aa      	ldr	r2, [r5, #8]
    7cd6:	b942      	cbnz	r2, 7cea <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    7cd8:	68ea      	ldr	r2, [r5, #12]
    7cda:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    7cde:	d104      	bne.n	7cea <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    7ce0:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    7ce2:	4628      	mov	r0, r5
    7ce4:	f7ff fec3 	bl	7a6e <ticker_job_op_cb>
    7ce8:	e7cb      	b.n	7c82 <ticker_job+0x152>
			if (state == 1) {
    7cea:	2b01      	cmp	r3, #1
    7cec:	f040 809b 	bne.w	7e26 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7cf0:	4658      	mov	r0, fp
    7cf2:	f7ff fe72 	bl	79da <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7cf6:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7cf8:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7cfa:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7cfc:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7cfe:	f040 8084 	bne.w	7e0a <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    7d02:	f8db 3014 	ldr.w	r3, [fp, #20]
    7d06:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    7d08:	f00a fe6e 	bl	129e8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    7d0e:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7d10:	1ac3      	subs	r3, r0, r3
    7d12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    7d16:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    7d18:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7d1a:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    7d1c:	bf9e      	ittt	ls
    7d1e:	6962      	ldrls	r2, [r4, #20]
    7d20:	1b92      	subls	r2, r2, r6
    7d22:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    7d24:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    7d26:	bf96      	itet	ls
    7d28:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    7d2a:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    7d2c:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    7d2e:	b18a      	cbz	r2, 7d54 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    7d30:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    7d32:	b179      	cbz	r1, 7d54 <ticker_job+0x224>
		user_op->params.update.lazy--;
    7d34:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    7d38:	fa1f fe8e 	uxth.w	lr, lr
    7d3c:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7d40:	429a      	cmp	r2, r3
    7d42:	d32b      	bcc.n	7d9c <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    7d44:	f8df 9324 	ldr.w	r9, [pc, #804]	; 806c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7d48:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    7d4c:	45e6      	cmp	lr, ip
    7d4e:	d847      	bhi.n	7de0 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    7d50:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    7d54:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    7d56:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    7d58:	4413      	add	r3, r2
    7d5a:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    7d5c:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    7d5e:	6963      	ldr	r3, [r4, #20]
    7d60:	4413      	add	r3, r2
    7d62:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    7d64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7d66:	4620      	mov	r0, r4
    7d68:	f7ff fe63 	bl	7a32 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    7d6c:	69a2      	ldr	r2, [r4, #24]
    7d6e:	892b      	ldrh	r3, [r5, #8]
    7d70:	4413      	add	r3, r2
    7d72:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    7d74:	896a      	ldrh	r2, [r5, #10]
    7d76:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    7d78:	bf8c      	ite	hi
    7d7a:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    7d7c:	2300      	movls	r3, #0
    7d7e:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    7d80:	7bab      	ldrb	r3, [r5, #14]
    7d82:	b103      	cbz	r3, 7d86 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    7d84:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    7d86:	9b06      	ldr	r3, [sp, #24]
    7d88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7d8a:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    7d8e:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    7d90:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    7d94:	3301      	adds	r3, #1
    7d96:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    7d98:	2100      	movs	r1, #0
    7d9a:	e7a2      	b.n	7ce2 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    7d9c:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7da0:	45e6      	cmp	lr, ip
    7da2:	d2cf      	bcs.n	7d44 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    7da4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7da6:	4eaf      	ldr	r6, [pc, #700]	; (8064 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64>)
    7da8:	48af      	ldr	r0, [pc, #700]	; (8068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68>)
    7daa:	198e      	adds	r6, r1, r6
    7dac:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    7dae:	bf81      	itttt	hi
    7db0:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    7db4:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    7db8:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    7dbc:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    7dbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7dc0:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    7dc2:	bf8c      	ite	hi
    7dc4:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    7dc8:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    7dcc:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    7dce:	4491      	add	r9, r2
			ticker->lazy_current--;
    7dd0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    7dd4:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    7dd6:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    7dda:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7dde:	e7af      	b.n	7d40 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    7de0:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7de2:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    7de4:	48a0      	ldr	r0, [pc, #640]	; (8068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68>)
	ticker->remainder_current += ticker->remainder_periodic;
    7de6:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7de8:	499e      	ldr	r1, [pc, #632]	; (8064 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64>)
    7dea:	1871      	adds	r1, r6, r1
    7dec:	4281      	cmp	r1, r0
	return 0;
    7dee:	bf8e      	itee	hi
    7df0:	2100      	movhi	r1, #0
		return 1;
    7df2:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    7df4:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    7df6:	4411      	add	r1, r2
			ticker->lazy_current++;
    7df8:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    7dfc:	bf8c      	ite	hi
    7dfe:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7e00:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    7e02:	440b      	add	r3, r1
			ticker->lazy_current++;
    7e04:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7e08:	e79e      	b.n	7d48 <ticker_job+0x218>
		ticker->req = ticker->ack;
    7e0a:	78a3      	ldrb	r3, [r4, #2]
    7e0c:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    7e0e:	786b      	ldrb	r3, [r5, #1]
    7e10:	f89b 201c 	ldrb.w	r2, [fp, #28]
    7e14:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    7e16:	bf01      	itttt	eq
    7e18:	23ff      	moveq	r3, #255	; 0xff
    7e1a:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    7e1e:	2300      	moveq	r3, #0
    7e20:	f8cb 3018 	streq.w	r3, [fp, #24]
    7e24:	e7b8      	b.n	7d98 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    7e26:	2104      	movs	r1, #4
    7e28:	465b      	mov	r3, fp
    7e2a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7e2e:	2201      	movs	r2, #1
    7e30:	4608      	mov	r0, r1
    7e32:	47a0      	blx	r4
				pending = 1;
    7e34:	2301      	movs	r3, #1
				user->middle = prev;
    7e36:	70be      	strb	r6, [r7, #2]
				pending = 1;
    7e38:	9309      	str	r3, [sp, #36]	; 0x24
    7e3a:	9b04      	ldr	r3, [sp, #16]
    7e3c:	3b01      	subs	r3, #1
    7e3e:	b2db      	uxtb	r3, r3
    7e40:	9304      	str	r3, [sp, #16]
    7e42:	e6aa      	b.n	7b9a <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    7e44:	f8db 3018 	ldr.w	r3, [fp, #24]
    7e48:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    7e4a:	bf29      	itett	cs
    7e4c:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    7e4e:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    7e50:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    7e54:	2300      	movcs	r3, #0
    7e56:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    7e5a:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    7e5c:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    7e5e:	b11b      	cbz	r3, 7e68 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    7e60:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    7e64:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    7e68:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    7e6a:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    7e6c:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    7e6e:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    7e72:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    7e76:	f8d4 e004 	ldr.w	lr, [r4, #4]
    7e7a:	f1be 0f00 	cmp.w	lr, #0
    7e7e:	d030      	beq.n	7ee2 <ticker_job+0x3b2>
    7e80:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    7e82:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68>
	ticker->remainder_current += ticker->remainder_periodic;
    7e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7e88:	6a21      	ldr	r1, [r4, #32]
    7e8a:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7e8c:	4975      	ldr	r1, [pc, #468]	; (8064 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64>)
    7e8e:	1859      	adds	r1, r3, r1
    7e90:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    7e92:	bf9f      	itttt	ls
    7e94:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    7e98:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    7e9c:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    7ea0:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    7ea2:	bf92      	itee	ls
    7ea4:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    7ea6:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    7ea8:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    7eaa:	4473      	add	r3, lr
			while (count--) {
    7eac:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    7eb0:	441a      	add	r2, r3
			while (count--) {
    7eb2:	d2e8      	bcs.n	7e86 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7eb4:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    7eb6:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7eb8:	f8db 1014 	ldr.w	r1, [fp, #20]
    7ebc:	eb03 0209 	add.w	r2, r3, r9
    7ec0:	4620      	mov	r0, r4
    7ec2:	f7ff fdb6 	bl	7a32 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    7ec6:	8ba3      	ldrh	r3, [r4, #28]
    7ec8:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    7eca:	2300      	movs	r3, #0
    7ecc:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    7ece:	9b06      	ldr	r3, [sp, #24]
    7ed0:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    7ed4:	7863      	ldrb	r3, [r4, #1]
    7ed6:	3301      	adds	r3, #1
    7ed8:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    7eda:	eba8 0805 	sub.w	r8, r8, r5
    7ede:	46b2      	mov	sl, r6
    7ee0:	e66c      	b.n	7bbc <ticker_job+0x8c>
			ticker->req = ticker->ack;
    7ee2:	78a3      	ldrb	r3, [r4, #2]
    7ee4:	7063      	strb	r3, [r4, #1]
    7ee6:	4656      	mov	r6, sl
    7ee8:	e7f7      	b.n	7eda <ticker_job+0x3aa>
		user = &users[count_user];
    7eea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7eec:	9a03      	ldr	r2, [sp, #12]
    7eee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7ef2:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    7ef4:	685b      	ldr	r3, [r3, #4]
    7ef6:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    7ef8:	9b06      	ldr	r3, [sp, #24]
    7efa:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    7efe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    7f02:	f000 808e 	beq.w	8022 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22>
				ticker = &node[id_insert];
    7f06:	fa0f f38a 	sxth.w	r3, sl
    7f0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7f0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    7f10:	46d0      	mov	r8, sl
    7f12:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    7f16:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    7f1a:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    7f1c:	f8db 3000 	ldr.w	r3, [fp]
    7f20:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    7f22:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7f24:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    7f26:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7f28:	8be3      	ldrh	r3, [r4, #30]
    7f2a:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    7f2c:	bf86      	itte	hi
    7f2e:	1a9b      	subhi	r3, r3, r2
    7f30:	b29b      	uxthhi	r3, r3
		skip = 0;
    7f32:	2300      	movls	r3, #0
    7f34:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    7f36:	fa0f f388 	sxth.w	r3, r8
    7f3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7f3e:	00db      	lsls	r3, r3, #3
    7f40:	9313      	str	r3, [sp, #76]	; 0x4c
    7f42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    7f44:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    7f48:	f8db 0018 	ldr.w	r0, [fp, #24]
    7f4c:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    7f4e:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    7f52:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    7f54:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    7f58:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    7f5c:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    7f5e:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    7f60:	2bff      	cmp	r3, #255	; 0xff
    7f62:	d007      	beq.n	7f74 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    7f64:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    7f68:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    7f6c:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    7f6e:	4281      	cmp	r1, r0
    7f70:	f200 80a9 	bhi.w	80c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc6>
				     ticks_to_expire + ticker_new->ticks_slot);
    7f74:	f8de 0018 	ldr.w	r0, [lr, #24]
    7f78:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    7f7a:	eb01 0c00 	add.w	ip, r1, r0
    7f7e:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    7f80:	2eff      	cmp	r6, #255	; 0xff
    7f82:	f040 80ae 	bne.w	80e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2>
	if ((ticker_new->ticks_slot == 0) ||
    7f86:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7f88:	b130      	cbz	r0, 7f98 <ticker_job+0x468>
    7f8a:	9807      	ldr	r0, [sp, #28]
    7f8c:	4281      	cmp	r1, r0
    7f8e:	f0c0 80bf 	bcc.w	8110 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x110>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    7f92:	2eff      	cmp	r6, #255	; 0xff
    7f94:	f040 818f 	bne.w	82b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b6>
		if (previous == current) {
    7f98:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    7f9a:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    7f9e:	4283      	cmp	r3, r0
			node[previous].next = id;
    7fa0:	bf18      	it	ne
    7fa2:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    7fa6:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    7faa:	bf16      	itet	ne
    7fac:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    7fb0:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    7fb4:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    7fb8:	2bff      	cmp	r3, #255	; 0xff
    7fba:	d006      	beq.n	7fca <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    7fbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7fc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7fc4:	689a      	ldr	r2, [r3, #8]
    7fc6:	1a51      	subs	r1, r2, r1
    7fc8:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    7fca:	78a3      	ldrb	r3, [r4, #2]
    7fcc:	3301      	adds	r3, #1
    7fce:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    7fd0:	2100      	movs	r1, #0
			if (user_op) {
    7fd2:	2d00      	cmp	r5, #0
    7fd4:	d093      	beq.n	7efe <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    7fd6:	4628      	mov	r0, r5
    7fd8:	f7ff fd49 	bl	7a6e <ticker_job_op_cb>
    7fdc:	e78f      	b.n	7efe <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    7fde:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    7fe2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7fe4:	011b      	lsls	r3, r3, #4
    7fe6:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    7fe8:	f109 0201 	add.w	r2, r9, #1
    7fec:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    7ff0:	9a06      	ldr	r2, [sp, #24]
    7ff2:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    7ff4:	454a      	cmp	r2, r9
    7ff6:	bf08      	it	eq
    7ff8:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    7ffc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7ffe:	5cd3      	ldrb	r3, [r2, r3]
    8000:	2b03      	cmp	r3, #3
    8002:	d10e      	bne.n	8022 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22>
				id_insert = user_op->id;
    8004:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    8008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    800a:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    800e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    8012:	7862      	ldrb	r2, [r4, #1]
    8014:	78a3      	ldrb	r3, [r4, #2]
    8016:	429a      	cmp	r2, r3
    8018:	d009      	beq.n	802e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e>
					ticker_job_op_cb(user_op,
    801a:	2101      	movs	r1, #1
    801c:	4628      	mov	r0, r5
    801e:	f7ff fd26 	bl	7a6e <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    8022:	9b06      	ldr	r3, [sp, #24]
    8024:	789b      	ldrb	r3, [r3, #2]
    8026:	454b      	cmp	r3, r9
    8028:	d1d9      	bne.n	7fde <ticker_job+0x4ae>
    802a:	9b03      	ldr	r3, [sp, #12]
    802c:	e5e6      	b.n	7bfc <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    802e:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    8030:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    8034:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    8036:	692b      	ldr	r3, [r5, #16]
    8038:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    803a:	8aab      	ldrh	r3, [r5, #20]
    803c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    803e:	69ab      	ldr	r3, [r5, #24]
    8040:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    8042:	69eb      	ldr	r3, [r5, #28]
    8044:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    8046:	6a2b      	ldr	r3, [r5, #32]
    8048:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    804a:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    804c:	68ab      	ldr	r3, [r5, #8]
    804e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    8050:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    8052:	686a      	ldr	r2, [r5, #4]
    8054:	4620      	mov	r0, r4
    8056:	f7ff fcec 	bl	7a32 <ticks_to_expire_prep>
	ticker->force = 1;
    805a:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    805c:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    805e:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    8060:	70e3      	strb	r3, [r4, #3]
    8062:	e75b      	b.n	7f1c <ticker_job+0x3ec>
    8064:	ff172b5a 	.word	0xff172b5a
    8068:	7f172b59 	.word	0x7f172b59
    806c:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    8070:	6860      	ldr	r0, [r4, #4]
    8072:	2800      	cmp	r0, #0
    8074:	d07b      	beq.n	816e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16e>
	ticker->remainder_current += ticker->remainder_periodic;
    8076:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8078:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    807a:	4b92      	ldr	r3, [pc, #584]	; (82c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c4>)
	ticker->remainder_current += ticker->remainder_periodic;
    807c:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    807e:	4992      	ldr	r1, [pc, #584]	; (82c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c8>)
    8080:	18d3      	adds	r3, r2, r3
    8082:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    8084:	bf9c      	itt	ls
    8086:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    808a:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    808e:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    8090:	bf8b      	itete	hi
    8092:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    8094:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    8098:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    809a:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    809c:	4403      	add	r3, r0
		return 1;
    809e:	bf98      	it	ls
    80a0:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    80a2:	4413      	add	r3, r2
			ticker->lazy_current++;
    80a4:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    80a6:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    80a8:	3201      	adds	r2, #1
    80aa:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    80ac:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    80ae:	4293      	cmp	r3, r2
    80b0:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    80b4:	bf89      	itett	hi
    80b6:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    80b8:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    80ba:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    80bc:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    80be:	bf9c      	itt	ls
    80c0:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    80c2:	60a1      	strls	r1, [r4, #8]
    80c4:	e73d      	b.n	7f42 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    80c6:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    80c8:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    80ca:	b946      	cbnz	r6, 80de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde>
			if (ticks_slot_previous > ticks_to_expire_current) {
    80cc:	9f07      	ldr	r7, [sp, #28]
    80ce:	42b8      	cmp	r0, r7
    80d0:	d200      	bcs.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
				ticks_slot_previous -= ticks_to_expire_current;
    80d2:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    80d4:	930b      	str	r3, [sp, #44]	; 0x2c
    80d6:	9607      	str	r6, [sp, #28]
    80d8:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    80dc:	e740      	b.n	7f60 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    80de:	9308      	str	r3, [sp, #32]
    80e0:	e7f8      	b.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
		ticker = &node[ticker_id_head];
    80e2:	b230      	sxth	r0, r6
    80e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    80e8:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    80ec:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    80ee:	68bf      	ldr	r7, [r7, #8]
    80f0:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    80f2:	4567      	cmp	r7, ip
    80f4:	d20a      	bcs.n	810c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10c>
		if (ticker->ticks_slot) {
    80f6:	9f10      	ldr	r7, [sp, #64]	; 0x40
    80f8:	69bf      	ldr	r7, [r7, #24]
    80fa:	2f00      	cmp	r7, #0
    80fc:	f47f af43 	bne.w	7f86 <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    8100:	9e11      	ldr	r6, [sp, #68]	; 0x44
    8102:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    8106:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    810a:	e739      	b.n	7f80 <ticker_job+0x450>
			return TICKER_NULL;
    810c:	26ff      	movs	r6, #255	; 0xff
    810e:	e73a      	b.n	7f86 <ticker_job+0x456>
	while (id_insert !=
    8110:	9b08      	ldr	r3, [sp, #32]
    8112:	4598      	cmp	r8, r3
    8114:	f43f af59 	beq.w	7fca <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    8118:	9b08      	ldr	r3, [sp, #32]
    811a:	2bff      	cmp	r3, #255	; 0xff
    811c:	d0a8      	beq.n	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
    811e:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    8120:	b233      	sxth	r3, r6
    8122:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8126:	9307      	str	r3, [sp, #28]
    8128:	9a07      	ldr	r2, [sp, #28]
    812a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    812c:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    8130:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    8132:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    8134:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    8136:	bf88      	it	hi
    8138:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    813a:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    813c:	bf8c      	ite	hi
    813e:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    8140:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    8142:	2a00      	cmp	r2, #0
    8144:	d094      	beq.n	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
    8146:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8148:	4293      	cmp	r3, r2
    814a:	d891      	bhi.n	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
			    skip_collide <= skip &&
    814c:	78fa      	ldrb	r2, [r7, #3]
    814e:	78e3      	ldrb	r3, [r4, #3]
    8150:	429a      	cmp	r2, r3
    8152:	d28d      	bcs.n	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
					ticker_dequeue(instance, id_collide);
    8154:	4631      	mov	r1, r6
    8156:	4658      	mov	r0, fp
    8158:	f7ff fc3f 	bl	79da <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    815c:	78bb      	ldrb	r3, [r7, #2]
    815e:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    8160:	9a07      	ldr	r2, [sp, #28]
    8162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    8164:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    8166:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    816a:	46b2      	mov	sl, r6
    816c:	e6e9      	b.n	7f42 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    816e:	2101      	movs	r1, #1
    8170:	e72f      	b.n	7fd2 <ticker_job+0x4a2>
		user = &users[count_user];
    8172:	9b03      	ldr	r3, [sp, #12]
    8174:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    8178:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    817a:	786b      	ldrb	r3, [r5, #1]
    817c:	78ea      	ldrb	r2, [r5, #3]
    817e:	429a      	cmp	r2, r3
    8180:	d102      	bne.n	8188 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x188>
    8182:	3c01      	subs	r4, #1
    8184:	b2e4      	uxtb	r4, r4
    8186:	e551      	b.n	7c2c <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    8188:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    818c:	011b      	lsls	r3, r3, #4
    818e:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    8190:	5cf3      	ldrb	r3, [r6, r3]
    8192:	2b01      	cmp	r3, #1
    8194:	d025      	beq.n	81e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e2>
    8196:	2b02      	cmp	r3, #2
    8198:	d12a      	bne.n	81f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f0>
		ticker_by_next_slot_get(instance,
    819a:	f8d2 c004 	ldr.w	ip, [r2, #4]
    819e:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    81a0:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    81a4:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    81a8:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    81ac:	28ff      	cmp	r0, #255	; 0xff
    81ae:	d004      	beq.n	81ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ba>
    81b0:	6819      	ldr	r1, [r3, #0]
    81b2:	f8db 7014 	ldr.w	r7, [fp, #20]
    81b6:	42b9      	cmp	r1, r7
    81b8:	d023      	beq.n	8202 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x202>
		*ticks_current = instance->ticks_current;
    81ba:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    81be:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    81c2:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    81c4:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    81c6:	29ff      	cmp	r1, #255	; 0xff
    81c8:	d007      	beq.n	81da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1da>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    81ca:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    81ce:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    81d2:	6987      	ldr	r7, [r0, #24]
    81d4:	6880      	ldr	r0, [r0, #8]
    81d6:	b1df      	cbz	r7, 8210 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x210>
		_ticks_to_expire += ticker->ticks_to_expire;
    81d8:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    81da:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    81de:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    81e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    81e4:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    81e8:	b113      	cbz	r3, 81f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f0>
		fp_op_func(uop->status, uop->op_context);
    81ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    81ec:	2000      	movs	r0, #0
    81ee:	4798      	blx	r3
			first = user->first + 1;
    81f0:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    81f2:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    81f4:	3301      	adds	r3, #1
    81f6:	b2db      	uxtb	r3, r3
				first = 0;
    81f8:	429a      	cmp	r2, r3
    81fa:	bf08      	it	eq
    81fc:	2300      	moveq	r3, #0
			user->first = first;
    81fe:	706b      	strb	r3, [r5, #1]
    8200:	e7bb      	b.n	817a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17a>
		ticker = &node[_ticker_id_head];
    8202:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    8206:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    820a:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    820e:	e7da      	b.n	81c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c6>
		_ticks_to_expire += ticker->ticks_to_expire;
    8210:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    8212:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    8216:	e7d6      	b.n	81c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c6>
	if (ticker_id_old_head == TICKER_NULL) {
    8218:	9b05      	ldr	r3, [sp, #20]
    821a:	2bff      	cmp	r3, #255	; 0xff
    821c:	d107      	bne.n	822e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22e>
		ticks_current = cntr_cnt_get();
    821e:	f00a fbe3 	bl	129e8 <cntr_cnt_get>
    8222:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    8224:	f00a fba2 	bl	1296c <cntr_start>
    8228:	b908      	cbnz	r0, 822e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22e>
			instance->ticks_current = ticks_current;
    822a:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    822e:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    8232:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    8236:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    823a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    823e:	260a      	movs	r6, #10
    8240:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    8242:	f00a fbd1 	bl	129e8 <cntr_cnt_get>
		cc = instance->ticks_current;
    8246:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    824a:	1b03      	subs	r3, r0, r4
    824c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    8250:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    8252:	42ab      	cmp	r3, r5
    8254:	bf2c      	ite	cs
    8256:	18e4      	addcs	r4, r4, r3
    8258:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    825a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    825e:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    8260:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    8264:	4620      	mov	r0, r4
    8266:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    8268:	f00a fbbe 	bl	129e8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    826c:	1bc0      	subs	r0, r0, r7
    826e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8272:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    8274:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8276:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    827a:	42a0      	cmp	r0, r4
    827c:	f67f ace8 	bls.w	7c50 <ticker_job+0x120>
		LL_ASSERT(i);
    8280:	3e01      	subs	r6, #1
    8282:	d1de      	bne.n	8242 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x242>
    8284:	4b11      	ldr	r3, [pc, #68]	; (82cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2cc>)
    8286:	9301      	str	r3, [sp, #4]
    8288:	9300      	str	r3, [sp, #0]
    828a:	4b11      	ldr	r3, [pc, #68]	; (82d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d0>)
    828c:	4a11      	ldr	r2, [pc, #68]	; (82d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d4>)
    828e:	681c      	ldr	r4, [r3, #0]
    8290:	4911      	ldr	r1, [pc, #68]	; (82d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d8>)
    8292:	4b12      	ldr	r3, [pc, #72]	; (82dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2dc>)
    8294:	4812      	ldr	r0, [pc, #72]	; (82e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e0>)
    8296:	47a0      	blx	r4
    8298:	4040      	eors	r0, r0
    829a:	f380 8811 	msr	BASEPRI, r0
    829e:	f04f 0004 	mov.w	r0, #4
    82a2:	df02      	svc	2
	instance->job_guard = 0;
    82a4:	2300      	movs	r3, #0
    82a6:	f88b 301e 	strb.w	r3, [fp, #30]
    82aa:	e4c7      	b.n	7c3c <ticker_job+0x10c>
	if (!pending) {
    82ac:	2b00      	cmp	r3, #0
    82ae:	d1f9      	bne.n	82a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a4>
		flag_compare_update = 1;
    82b0:	2301      	movs	r3, #1
    82b2:	9304      	str	r3, [sp, #16]
    82b4:	e4b1      	b.n	7c1a <ticker_job+0xea>
	while (id_insert !=
    82b6:	45b0      	cmp	r8, r6
    82b8:	f47f af32 	bne.w	8120 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x120>
    82bc:	e685      	b.n	7fca <ticker_job+0x49a>
}
    82be:	b015      	add	sp, #84	; 0x54
    82c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    82c4:	ff172b5a 	.word	0xff172b5a
    82c8:	7f172b59 	.word	0x7f172b59
    82cc:	00015359 	.word	0x00015359
    82d0:	20003a5c 	.word	0x20003a5c
    82d4:	00016754 	.word	0x00016754
    82d8:	0001679c 	.word	0x0001679c
    82dc:	00017920 	.word	0x00017920
    82e0:	0001793a 	.word	0x0001793a

000082e4 <ticker_init>:
{
    82e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    82e6:	4d1a      	ldr	r5, [pc, #104]	; (8350 <ticker_init+0x6c>)
{
    82e8:	9f05      	ldr	r7, [sp, #20]
    82ea:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    82ee:	262c      	movs	r6, #44	; 0x2c
    82f0:	4346      	muls	r6, r0
    82f2:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    82f6:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    82f8:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    82fc:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    82fe:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    8302:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    8306:	3b01      	subs	r3, #1
    8308:	b2db      	uxtb	r3, r3
    830a:	2bff      	cmp	r3, #255	; 0xff
    830c:	d111      	bne.n	8332 <ticker_init+0x4e>
	if (count_op) {
    830e:	b9ec      	cbnz	r4, 834c <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    8310:	222c      	movs	r2, #44	; 0x2c
    8312:	fb02 5200 	mla	r2, r2, r0, r5
    8316:	9908      	ldr	r1, [sp, #32]
    8318:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    831a:	9909      	ldr	r1, [sp, #36]	; 0x24
    831c:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    831e:	990a      	ldr	r1, [sp, #40]	; 0x28
    8320:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    8322:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    8324:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    8326:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    8328:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    832a:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    832c:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    832e:	4620      	mov	r0, r4
    8330:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    8332:	b21a      	sxth	r2, r3
    8334:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    8338:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    833a:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    833e:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    8342:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    8344:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    8348:	b2e4      	uxtb	r4, r4
    834a:	e7dc      	b.n	8306 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    834c:	2001      	movs	r0, #1
}
    834e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8350:	200007c4 	.word	0x200007c4

00008354 <ticker_trigger>:
	instance = &_instance[instance_index];
    8354:	4a07      	ldr	r2, [pc, #28]	; (8374 <ticker_trigger+0x20>)
    8356:	212c      	movs	r1, #44	; 0x2c
    8358:	fb00 2301 	mla	r3, r0, r1, r2
{
    835c:	b410      	push	{r4}
	if (instance->sched_cb) {
    835e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    8360:	b12c      	cbz	r4, 836e <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    8362:	46a4      	mov	ip, r4
    8364:	2201      	movs	r2, #1
    8366:	2103      	movs	r1, #3
    8368:	2002      	movs	r0, #2
}
    836a:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    836c:	4760      	bx	ip
}
    836e:	bc10      	pop	{r4}
    8370:	4770      	bx	lr
    8372:	bf00      	nop
    8374:	200007c4 	.word	0x200007c4

00008378 <ticker_start>:
{
    8378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    837c:	4f25      	ldr	r7, [pc, #148]	; (8414 <ticker_start+0x9c>)
    837e:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    8382:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    8384:	fb08 7000 	mla	r0, r8, r0, r7
    8388:	fa0f fc81 	sxth.w	ip, r1
    838c:	f8d0 e004 	ldr.w	lr, [r0, #4]
    8390:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    8394:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    8398:	78f4      	ldrb	r4, [r6, #3]
    839a:	1c65      	adds	r5, r4, #1
    839c:	b2ed      	uxtb	r5, r5
		last = 0;
    839e:	45ae      	cmp	lr, r5
    83a0:	bf98      	it	ls
    83a2:	2500      	movls	r5, #0
	if (last == user->first) {
    83a4:	f896 e001 	ldrb.w	lr, [r6, #1]
    83a8:	45ae      	cmp	lr, r5
    83aa:	d02f      	beq.n	840c <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    83ac:	f8d6 c004 	ldr.w	ip, [r6, #4]
    83b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    83b4:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    83b8:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    83bc:	f04f 0a03 	mov.w	sl, #3
    83c0:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    83c4:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    83c6:	9b08      	ldr	r3, [sp, #32]
    83c8:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    83ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    83cc:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    83ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    83d0:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    83d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    83d4:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    83d6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    83da:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    83dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    83de:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    83e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    83e2:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    83e4:	2302      	movs	r3, #2
    83e6:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    83e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    83ea:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    83ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    83ee:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    83f0:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    83f2:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    83f4:	6a45      	ldr	r5, [r0, #36]	; 0x24
    83f6:	6a03      	ldr	r3, [r0, #32]
    83f8:	4608      	mov	r0, r1
    83fa:	4798      	blx	r3
    83fc:	fb09 7308 	mla	r3, r9, r8, r7
    8400:	2200      	movs	r2, #0
    8402:	2104      	movs	r1, #4
    8404:	47a8      	blx	r5
	return user_op->status;
    8406:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    840c:	2001      	movs	r0, #1
}
    840e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8412:	bf00      	nop
    8414:	200007c4 	.word	0x200007c4

00008418 <ticker_update>:
{
    8418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    841c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 84b0 <ticker_update+0x98>
    8420:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    8424:	fb0a 8e00 	mla	lr, sl, r0, r8
    8428:	b20f      	sxth	r7, r1
    842a:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    842e:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    8430:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    8434:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    8438:	78c4      	ldrb	r4, [r0, #3]
    843a:	1c66      	adds	r6, r4, #1
    843c:	b2f6      	uxtb	r6, r6
		last = 0;
    843e:	42b5      	cmp	r5, r6
    8440:	bf98      	it	ls
    8442:	2600      	movls	r6, #0
	if (last == user->first) {
    8444:	7845      	ldrb	r5, [r0, #1]
    8446:	42b5      	cmp	r5, r6
    8448:	d02f      	beq.n	84aa <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    844a:	f8d0 c004 	ldr.w	ip, [r0, #4]
    844e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8452:	0125      	lsls	r5, r4, #4
    8454:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    8458:	2704      	movs	r7, #4
    845a:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    845e:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    8460:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8464:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    8466:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    846a:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    846c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8470:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    8472:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    8476:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    8478:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    847c:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    847e:	2302      	movs	r3, #2
    8480:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    8482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8484:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    8486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    8488:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    848a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    848c:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    848e:	f8de 3020 	ldr.w	r3, [lr, #32]
    8492:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    8496:	4608      	mov	r0, r1
    8498:	4798      	blx	r3
    849a:	fb09 830a 	mla	r3, r9, sl, r8
    849e:	2200      	movs	r2, #0
    84a0:	4639      	mov	r1, r7
    84a2:	47a8      	blx	r5
	return user_op->status;
    84a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    84a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    84aa:	2001      	movs	r0, #1
}
    84ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    84b0:	200007c4 	.word	0x200007c4

000084b4 <ticker_stop>:
{
    84b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    84b8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8528 <ticker_stop+0x74>
    84bc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    84c0:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    84c4:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    84c6:	f8de 0004 	ldr.w	r0, [lr, #4]
    84ca:	b20e      	sxth	r6, r1
    84cc:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    84d0:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    84d4:	78fc      	ldrb	r4, [r7, #3]
    84d6:	1c65      	adds	r5, r4, #1
    84d8:	b2ed      	uxtb	r5, r5
		last = 0;
    84da:	42a8      	cmp	r0, r5
    84dc:	bf98      	it	ls
    84de:	2500      	movls	r5, #0
	if (last == user->first) {
    84e0:	7878      	ldrb	r0, [r7, #1]
    84e2:	42a8      	cmp	r0, r5
    84e4:	d01d      	beq.n	8522 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    84e6:	6878      	ldr	r0, [r7, #4]
    84e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    84ec:	0124      	lsls	r4, r4, #4
    84ee:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    84f0:	f04f 0c05 	mov.w	ip, #5
    84f4:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    84f8:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    84fa:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    84fc:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    84fe:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    8500:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    8502:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    8504:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8506:	f8de 3020 	ldr.w	r3, [lr, #32]
    850a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    850e:	4608      	mov	r0, r1
    8510:	4798      	blx	r3
    8512:	fb08 930a 	mla	r3, r8, sl, r9
    8516:	2200      	movs	r2, #0
    8518:	2104      	movs	r1, #4
    851a:	47a0      	blx	r4
	return user_op->status;
    851c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    851e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    8522:	2001      	movs	r0, #1
}
    8524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8528:	200007c4 	.word	0x200007c4

0000852c <ticker_next_slot_get>:
{
    852c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8530:	f8df 8078 	ldr.w	r8, [pc, #120]	; 85ac <ticker_next_slot_get+0x80>
    8534:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    8538:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    853a:	fb0a 8000 	mla	r0, sl, r0, r8
    853e:	fa0f fe81 	sxth.w	lr, r1
    8542:	6845      	ldr	r5, [r0, #4]
    8544:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    8548:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    854c:	78fc      	ldrb	r4, [r7, #3]
    854e:	1c66      	adds	r6, r4, #1
    8550:	b2f6      	uxtb	r6, r6
		last = 0;
    8552:	42b5      	cmp	r5, r6
    8554:	bf98      	it	ls
    8556:	2600      	movls	r6, #0
	if (last == user->first) {
    8558:	787d      	ldrb	r5, [r7, #1]
    855a:	42b5      	cmp	r5, r6
    855c:	d023      	beq.n	85a6 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    855e:	f8d7 c004 	ldr.w	ip, [r7, #4]
    8562:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8566:	0125      	lsls	r5, r4, #4
    8568:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    856c:	f04f 0e02 	mov.w	lr, #2
    8570:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    8574:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    8576:	9b08      	ldr	r3, [sp, #32]
    8578:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    857a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    857c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    857e:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    8580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    8582:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    8584:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    8586:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    858a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    858c:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    858e:	6a45      	ldr	r5, [r0, #36]	; 0x24
    8590:	6a03      	ldr	r3, [r0, #32]
    8592:	4608      	mov	r0, r1
    8594:	4798      	blx	r3
    8596:	fb09 830a 	mla	r3, r9, sl, r8
    859a:	2200      	movs	r2, #0
    859c:	2104      	movs	r1, #4
    859e:	47a8      	blx	r5
	return user_op->status;
    85a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    85a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    85a6:	2001      	movs	r0, #1
}
    85a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85ac:	200007c4 	.word	0x200007c4

000085b0 <ticker_job_idle_get>:
{
    85b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    85b4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8624 <ticker_job_idle_get+0x74>
    85b8:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    85bc:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    85c0:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    85c2:	f8de 0004 	ldr.w	r0, [lr, #4]
    85c6:	b20e      	sxth	r6, r1
    85c8:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    85cc:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    85d0:	78fc      	ldrb	r4, [r7, #3]
    85d2:	1c65      	adds	r5, r4, #1
    85d4:	b2ed      	uxtb	r5, r5
		last = 0;
    85d6:	42a8      	cmp	r0, r5
    85d8:	bf98      	it	ls
    85da:	2500      	movls	r5, #0
	if (last == user->first) {
    85dc:	7878      	ldrb	r0, [r7, #1]
    85de:	42a8      	cmp	r0, r5
    85e0:	d01d      	beq.n	861e <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    85e2:	6878      	ldr	r0, [r7, #4]
    85e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    85e8:	0124      	lsls	r4, r4, #4
    85ea:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    85ec:	f04f 0c01 	mov.w	ip, #1
    85f0:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    85f4:	20ff      	movs	r0, #255	; 0xff
    85f6:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    85f8:	2002      	movs	r0, #2
    85fa:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    85fc:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    85fe:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    8600:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8602:	f8de 3020 	ldr.w	r3, [lr, #32]
    8606:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    860a:	4608      	mov	r0, r1
    860c:	4798      	blx	r3
    860e:	fb08 930a 	mla	r3, r8, sl, r9
    8612:	2200      	movs	r2, #0
    8614:	2104      	movs	r1, #4
    8616:	47a0      	blx	r4
	return user_op->status;
    8618:	6a70      	ldr	r0, [r6, #36]	; 0x24
    861a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    861e:	2001      	movs	r0, #1
}
    8620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8624:	200007c4 	.word	0x200007c4

00008628 <ticker_job_sched>:
{
    8628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    862c:	4c08      	ldr	r4, [pc, #32]	; (8650 <ticker_job_sched+0x28>)
    862e:	252c      	movs	r5, #44	; 0x2c
    8630:	fb05 4300 	mla	r3, r5, r0, r4
{
    8634:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8636:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    8638:	6a1b      	ldr	r3, [r3, #32]
    863a:	4608      	mov	r0, r1
    863c:	4798      	blx	r3
    863e:	fb06 4305 	mla	r3, r6, r5, r4
    8642:	46bc      	mov	ip, r7
    8644:	2200      	movs	r2, #0
    8646:	2104      	movs	r1, #4
}
    8648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    864c:	4760      	bx	ip
    864e:	bf00      	nop
    8650:	200007c4 	.word	0x200007c4

00008654 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    8654:	f00a b9c8 	b.w	129e8 <cntr_cnt_get>

00008658 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8658:	1a40      	subs	r0, r0, r1
}
    865a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    865e:	4770      	bx	lr

00008660 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    8660:	b508      	push	{r3, lr}
    8662:	4603      	mov	r3, r0
	if (addr_type > 1) {
    8664:	2b01      	cmp	r3, #1
{
    8666:	4608      	mov	r0, r1
	if (addr_type > 1) {
    8668:	d80e      	bhi.n	8688 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    866a:	b133      	cbz	r3, 867a <ll_addr_get+0x1a>
		if (bdaddr) {
    866c:	b119      	cbz	r1, 8676 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    866e:	2206      	movs	r2, #6
    8670:	4906      	ldr	r1, [pc, #24]	; (868c <ll_addr_get+0x2c>)
    8672:	f7f9 fae9 	bl	1c48 <memcpy>
		}

		return rnd_addr;
    8676:	4805      	ldr	r0, [pc, #20]	; (868c <ll_addr_get+0x2c>)
    8678:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    867a:	b119      	cbz	r1, 8684 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    867c:	2206      	movs	r2, #6
    867e:	4904      	ldr	r1, [pc, #16]	; (8690 <ll_addr_get+0x30>)
    8680:	f7f9 fae2 	bl	1c48 <memcpy>
	}

	return pub_addr;
    8684:	4802      	ldr	r0, [pc, #8]	; (8690 <ll_addr_get+0x30>)
}
    8686:	bd08      	pop	{r3, pc}
		return NULL;
    8688:	2000      	movs	r0, #0
    868a:	bd08      	pop	{r3, pc}
    868c:	20000822 	.word	0x20000822
    8690:	2000081c 	.word	0x2000081c

00008694 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    8694:	b570      	push	{r4, r5, r6, lr}
    8696:	4606      	mov	r6, r0
    8698:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    869a:	f008 fa09 	bl	10ab0 <ll_adv_is_enabled>
    869e:	4604      	mov	r4, r0
    86a0:	b110      	cbz	r0, 86a8 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    86a2:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    86a4:	4620      	mov	r0, r4
    86a6:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    86a8:	f008 fa16 	bl	10ad8 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    86ac:	f010 0f06 	tst.w	r0, #6
    86b0:	d1f7      	bne.n	86a2 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    86b2:	2206      	movs	r2, #6
    86b4:	4629      	mov	r1, r5
	if (addr_type) {
    86b6:	b11e      	cbz	r6, 86c0 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    86b8:	4802      	ldr	r0, [pc, #8]	; (86c4 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    86ba:	f7f9 fac5 	bl	1c48 <memcpy>
    86be:	e7f1      	b.n	86a4 <ll_addr_set+0x10>
    86c0:	4801      	ldr	r0, [pc, #4]	; (86c8 <ll_addr_set+0x34>)
    86c2:	e7fa      	b.n	86ba <ll_addr_set+0x26>
    86c4:	20000822 	.word	0x20000822
    86c8:	2000081c 	.word	0x2000081c

000086cc <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    86cc:	2300      	movs	r3, #0
    86ce:	7003      	strb	r3, [r0, #0]
	*max = 0;
    86d0:	700b      	strb	r3, [r1, #0]
    86d2:	4770      	bx	lr

000086d4 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    86d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    86d6:	4607      	mov	r7, r0
    86d8:	460e      	mov	r6, r1
	while (len) {
    86da:	460c      	mov	r4, r1
    86dc:	1b35      	subs	r5, r6, r4
    86de:	443d      	add	r5, r7
    86e0:	b18c      	cbz	r4, 8706 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    86e2:	f7f8 fc81 	bl	fe8 <sys_rand32_get>

		if (len >= sizeof(v)) {
    86e6:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    86e8:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    86ea:	d907      	bls.n	86fc <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    86ec:	2204      	movs	r2, #4
    86ee:	eb0d 0102 	add.w	r1, sp, r2
    86f2:	4628      	mov	r0, r5
    86f4:	f7f9 faa8 	bl	1c48 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    86f8:	3c04      	subs	r4, #4
    86fa:	e7ef      	b.n	86dc <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    86fc:	4622      	mov	r2, r4
    86fe:	a901      	add	r1, sp, #4
    8700:	4628      	mov	r0, r5
    8702:	f7f9 faa1 	bl	1c48 <memcpy>
			break;
		}
	}

	return 0;
}
    8706:	2000      	movs	r0, #0
    8708:	b003      	add	sp, #12
    870a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000870c <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    870c:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    870e:	2300      	movs	r3, #0
    8710:	f00a f99e 	bl	12a50 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    8714:	2000      	movs	r0, #0
    8716:	bd08      	pop	{r3, pc}

00008718 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    8718:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    871a:	4802      	ldr	r0, [pc, #8]	; (8724 <_hci_driver_init+0xc>)
    871c:	f7fb fd36 	bl	418c <bt_hci_driver_register>

	return 0;
}
    8720:	2000      	movs	r0, #0
    8722:	bd08      	pop	{r3, pc}
    8724:	0001798c 	.word	0x0001798c

00008728 <recv_thread>:
{
    8728:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    872a:	4d29      	ldr	r5, [pc, #164]	; (87d0 <recv_thread+0xa8>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    872c:	2600      	movs	r6, #0
    872e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8732:	4628      	mov	r0, r5
    8734:	f00b fdb8 	bl	142a8 <_impl_k_queue_get>
		if (node_rx && !buf) {
    8738:	4604      	mov	r4, r0
    873a:	2800      	cmp	r0, #0
    873c:	d037      	beq.n	87ae <recv_thread+0x86>
	s8_t class = hci_get_class(node_rx);
    873e:	f001 fd43 	bl	a1c8 <hci_get_class>
	switch (class) {
    8742:	1e03      	subs	r3, r0, #0
    8744:	9403      	str	r4, [sp, #12]
    8746:	db03      	blt.n	8750 <recv_thread+0x28>
    8748:	2b02      	cmp	r3, #2
    874a:	dd11      	ble.n	8770 <recv_thread+0x48>
    874c:	2b03      	cmp	r3, #3
    874e:	d031      	beq.n	87b4 <recv_thread+0x8c>
		LL_ASSERT(0);
    8750:	4b20      	ldr	r3, [pc, #128]	; (87d4 <recv_thread+0xac>)
    8752:	9301      	str	r3, [sp, #4]
    8754:	9300      	str	r3, [sp, #0]
    8756:	4b20      	ldr	r3, [pc, #128]	; (87d8 <recv_thread+0xb0>)
    8758:	4a20      	ldr	r2, [pc, #128]	; (87dc <recv_thread+0xb4>)
    875a:	681c      	ldr	r4, [r3, #0]
    875c:	4920      	ldr	r1, [pc, #128]	; (87e0 <recv_thread+0xb8>)
    875e:	4b21      	ldr	r3, [pc, #132]	; (87e4 <recv_thread+0xbc>)
    8760:	4821      	ldr	r0, [pc, #132]	; (87e8 <recv_thread+0xc0>)
    8762:	47a0      	blx	r4
    8764:	4040      	eors	r0, r0
    8766:	f380 8811 	msr	BASEPRI, r0
    876a:	f04f 0004 	mov.w	r0, #4
    876e:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    8770:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    8772:	bf0e      	itee	eq
    8774:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8776:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    877a:	2001      	movne	r0, #1
    877c:	f7fb fe18 	bl	43b0 <bt_buf_get_rx>
    8780:	4604      	mov	r4, r0
		if (buf) {
    8782:	b118      	cbz	r0, 878c <recv_thread+0x64>
			hci_evt_encode(node_rx, buf);
    8784:	4601      	mov	r1, r0
    8786:	9803      	ldr	r0, [sp, #12]
    8788:	f001 f952 	bl	9a30 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    878c:	9b03      	ldr	r3, [sp, #12]
    878e:	2100      	movs	r1, #0
    8790:	88d8      	ldrh	r0, [r3, #6]
    8792:	f008 fe0f 	bl	113b4 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    8796:	a804      	add	r0, sp, #16
    8798:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    879c:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    879e:	f008 fd91 	bl	112c4 <ll_rx_mem_release>
		if (buf) {
    87a2:	b124      	cbz	r4, 87ae <recv_thread+0x86>
			if (buf->len) {
    87a4:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    87a6:	4620      	mov	r0, r4
			if (buf->len) {
    87a8:	b173      	cbz	r3, 87c8 <recv_thread+0xa0>
				bt_recv(buf);
    87aa:	f7fa fef7 	bl	359c <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    87ae:	f00b ffdd 	bl	1476c <_impl_k_yield>
    87b2:	e7bc      	b.n	872e <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    87b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    87b8:	f7fb fdfa 	bl	43b0 <bt_buf_get_rx>
    87bc:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    87be:	4601      	mov	r1, r0
    87c0:	9803      	ldr	r0, [sp, #12]
    87c2:	f001 f8f3 	bl	99ac <hci_acl_encode>
    87c6:	e7e1      	b.n	878c <recv_thread+0x64>
				net_buf_unref(buf);
    87c8:	f00a ff86 	bl	136d8 <net_buf_unref>
    87cc:	e7ef      	b.n	87ae <recv_thread+0x86>
    87ce:	bf00      	nop
    87d0:	20003f1c 	.word	0x20003f1c
    87d4:	00015359 	.word	0x00015359
    87d8:	20003a5c 	.word	0x20003a5c
    87dc:	00016754 	.word	0x00016754
    87e0:	0001679c 	.word	0x0001679c
    87e4:	0001795d 	.word	0x0001795d
    87e8:	000166c8 	.word	0x000166c8

000087ec <hci_driver_send>:
{
    87ec:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    87ee:	8983      	ldrh	r3, [r0, #12]
{
    87f0:	b087      	sub	sp, #28
    87f2:	4605      	mov	r5, r0
	if (!buf->len) {
    87f4:	b973      	cbnz	r3, 8814 <hci_driver_send+0x28>
		BT_ERR("Empty HCI packet");
    87f6:	4b21      	ldr	r3, [pc, #132]	; (887c <hci_driver_send+0x90>)
    87f8:	9301      	str	r3, [sp, #4]
    87fa:	9300      	str	r3, [sp, #0]
    87fc:	4b20      	ldr	r3, [pc, #128]	; (8880 <hci_driver_send+0x94>)
    87fe:	4a21      	ldr	r2, [pc, #132]	; (8884 <hci_driver_send+0x98>)
    8800:	681c      	ldr	r4, [r3, #0]
    8802:	4921      	ldr	r1, [pc, #132]	; (8888 <hci_driver_send+0x9c>)
    8804:	4b21      	ldr	r3, [pc, #132]	; (888c <hci_driver_send+0xa0>)
    8806:	4822      	ldr	r0, [pc, #136]	; (8890 <hci_driver_send+0xa4>)
    8808:	47a0      	blx	r4
		return -EINVAL;
    880a:	f06f 0415 	mvn.w	r4, #21
}
    880e:	4620      	mov	r0, r4
    8810:	b007      	add	sp, #28
    8812:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    8814:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    8816:	b183      	cbz	r3, 883a <hci_driver_send+0x4e>
    8818:	2b02      	cmp	r3, #2
    881a:	d11f      	bne.n	885c <hci_driver_send+0x70>
	err = hci_acl_handle(buf, &evt);
    881c:	a905      	add	r1, sp, #20
    881e:	f001 f82d 	bl	987c <hci_acl_handle>
    8822:	4604      	mov	r4, r0
	if (evt) {
    8824:	9805      	ldr	r0, [sp, #20]
    8826:	b108      	cbz	r0, 882c <hci_driver_send+0x40>
		bt_recv_prio(evt);
    8828:	f7fb fb78 	bl	3f1c <bt_recv_prio>
	if (!err) {
    882c:	2c00      	cmp	r4, #0
    882e:	d1ee      	bne.n	880e <hci_driver_send+0x22>
		net_buf_unref(buf);
    8830:	4628      	mov	r0, r5
    8832:	f00a ff51 	bl	136d8 <net_buf_unref>
    8836:	2400      	movs	r4, #0
    8838:	e7e9      	b.n	880e <hci_driver_send+0x22>
	evt = hci_cmd_handle(buf);
    883a:	f000 fab3 	bl	8da4 <hci_cmd_handle>
	if (evt) {
    883e:	4602      	mov	r2, r0
    8840:	2800      	cmp	r0, #0
    8842:	d0f5      	beq.n	8830 <hci_driver_send+0x44>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    8844:	6883      	ldr	r3, [r0, #8]
    8846:	7819      	ldrb	r1, [r3, #0]
    8848:	2913      	cmp	r1, #19
    884a:	d813      	bhi.n	8874 <hci_driver_send+0x88>
    884c:	2301      	movs	r3, #1
    884e:	408b      	lsls	r3, r1
    8850:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    8854:	d00e      	beq.n	8874 <hci_driver_send+0x88>
			bt_recv_prio(evt);
    8856:	f7fb fb61 	bl	3f1c <bt_recv_prio>
    885a:	e7e9      	b.n	8830 <hci_driver_send+0x44>
		BT_ERR("Unknown HCI type %u", type);
    885c:	4a07      	ldr	r2, [pc, #28]	; (887c <hci_driver_send+0x90>)
    885e:	9202      	str	r2, [sp, #8]
    8860:	e88d 000c 	stmia.w	sp, {r2, r3}
    8864:	4b06      	ldr	r3, [pc, #24]	; (8880 <hci_driver_send+0x94>)
    8866:	4a07      	ldr	r2, [pc, #28]	; (8884 <hci_driver_send+0x98>)
    8868:	681c      	ldr	r4, [r3, #0]
    886a:	4907      	ldr	r1, [pc, #28]	; (8888 <hci_driver_send+0x9c>)
    886c:	4b07      	ldr	r3, [pc, #28]	; (888c <hci_driver_send+0xa0>)
    886e:	4809      	ldr	r0, [pc, #36]	; (8894 <hci_driver_send+0xa8>)
    8870:	47a0      	blx	r4
    8872:	e7ca      	b.n	880a <hci_driver_send+0x1e>
			bt_recv(evt);
    8874:	4610      	mov	r0, r2
    8876:	f7fa fe91 	bl	359c <bt_recv>
    887a:	e7d9      	b.n	8830 <hci_driver_send+0x44>
    887c:	00015359 	.word	0x00015359
    8880:	20003a5c 	.word	0x20003a5c
    8884:	00016754 	.word	0x00016754
    8888:	0001679c 	.word	0x0001679c
    888c:	00017969 	.word	0x00017969
    8890:	000179cd 	.word	0x000179cd
    8894:	000179ee 	.word	0x000179ee

00008898 <prio_recv_thread>:
{
    8898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    889a:	4d14      	ldr	r5, [pc, #80]	; (88ec <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    889c:	4e14      	ldr	r6, [pc, #80]	; (88f0 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    889e:	f10d 0102 	add.w	r1, sp, #2
    88a2:	a801      	add	r0, sp, #4
    88a4:	f008 fcd6 	bl	11254 <ll_rx_get>
    88a8:	4604      	mov	r4, r0
    88aa:	b940      	cbnz	r0, 88be <prio_recv_thread+0x26>
		if (node_rx) {
    88ac:	9b01      	ldr	r3, [sp, #4]
    88ae:	b1bb      	cbz	r3, 88e0 <prio_recv_thread+0x48>
			ll_rx_dequeue();
    88b0:	f008 ffb8 	bl	11824 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    88b4:	9901      	ldr	r1, [sp, #4]
    88b6:	4630      	mov	r0, r6
    88b8:	f00b fcd2 	bl	14260 <k_queue_append>
    88bc:	e7ef      	b.n	889e <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    88be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    88c2:	2001      	movs	r0, #1
    88c4:	f7fb fd74 	bl	43b0 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    88c8:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    88ca:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    88cc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    88d0:	f001 fc66 	bl	a1a0 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    88d4:	4638      	mov	r0, r7
    88d6:	f7fb fb21 	bl	3f1c <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    88da:	f00b ff47 	bl	1476c <_impl_k_yield>
    88de:	e7de      	b.n	889e <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    88e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    88e4:	4628      	mov	r0, r5
    88e6:	f00b ffa8 	bl	1483a <_impl_k_sem_take>
    88ea:	e7d8      	b.n	889e <prio_recv_thread+0x6>
    88ec:	20003f04 	.word	0x20003f04
    88f0:	20003f1c 	.word	0x20003f1c

000088f4 <hci_driver_open>:
{
    88f4:	b530      	push	{r4, r5, lr}
	err = ll_init(&sem_prio_recv);
    88f6:	481a      	ldr	r0, [pc, #104]	; (8960 <hci_driver_open+0x6c>)
{
    88f8:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    88fa:	f009 f87d 	bl	119f8 <ll_init>
	if (err) {
    88fe:	4604      	mov	r4, r0
    8900:	b168      	cbz	r0, 891e <hci_driver_open+0x2a>
		BT_ERR("LL initialization failed: %u", err);
    8902:	4b18      	ldr	r3, [pc, #96]	; (8964 <hci_driver_open+0x70>)
    8904:	9302      	str	r3, [sp, #8]
    8906:	e88d 0018 	stmia.w	sp, {r3, r4}
    890a:	4b17      	ldr	r3, [pc, #92]	; (8968 <hci_driver_open+0x74>)
    890c:	4a17      	ldr	r2, [pc, #92]	; (896c <hci_driver_open+0x78>)
    890e:	681d      	ldr	r5, [r3, #0]
    8910:	4917      	ldr	r1, [pc, #92]	; (8970 <hci_driver_open+0x7c>)
    8912:	4b18      	ldr	r3, [pc, #96]	; (8974 <hci_driver_open+0x80>)
    8914:	4818      	ldr	r0, [pc, #96]	; (8978 <hci_driver_open+0x84>)
    8916:	47a8      	blx	r5
}
    8918:	4620      	mov	r0, r4
    891a:	b007      	add	sp, #28
    891c:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
    891e:	f001 fc6b 	bl	a1f8 <hci_init>

    8922:	f06f 0309 	mvn.w	r3, #9
    8926:	9303      	str	r3, [sp, #12]
    8928:	9405      	str	r4, [sp, #20]
    892a:	9404      	str	r4, [sp, #16]
    892c:	9402      	str	r4, [sp, #8]
    892e:	9401      	str	r4, [sp, #4]
    8930:	9400      	str	r4, [sp, #0]
    8932:	4b12      	ldr	r3, [pc, #72]	; (897c <hci_driver_open+0x88>)
    8934:	4912      	ldr	r1, [pc, #72]	; (8980 <hci_driver_open+0x8c>)
    8936:	4813      	ldr	r0, [pc, #76]	; (8984 <hci_driver_open+0x90>)
    8938:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    893c:	f00c f952 	bl	14be4 <_impl_k_thread_create>
    8940:	f06f 0307 	mvn.w	r3, #7
    8944:	9303      	str	r3, [sp, #12]
    8946:	9405      	str	r4, [sp, #20]
    8948:	9404      	str	r4, [sp, #16]
    894a:	9402      	str	r4, [sp, #8]
    894c:	9401      	str	r4, [sp, #4]
    894e:	9400      	str	r4, [sp, #0]
    8950:	4b0d      	ldr	r3, [pc, #52]	; (8988 <hci_driver_open+0x94>)
    8952:	490e      	ldr	r1, [pc, #56]	; (898c <hci_driver_open+0x98>)
    8954:	480e      	ldr	r0, [pc, #56]	; (8990 <hci_driver_open+0x9c>)
    8956:	f240 522c 	movw	r2, #1324	; 0x52c
    895a:	f00c f943 	bl	14be4 <_impl_k_thread_create>
    895e:	e7db      	b.n	8918 <hci_driver_open+0x24>
    8960:	20003f04 	.word	0x20003f04
    8964:	00015359 	.word	0x00015359
    8968:	20003a5c 	.word	0x20003a5c
    896c:	00016754 	.word	0x00016754
    8970:	0001679c 	.word	0x0001679c
    8974:	00017979 	.word	0x00017979
    8978:	000179a0 	.word	0x000179a0
    897c:	00008899 	.word	0x00008899
    8980:	200020c0 	.word	0x200020c0
    8984:	200018a0 	.word	0x200018a0
    8988:	00008729 	.word	0x00008729
    898c:	200023b0 	.word	0x200023b0
    8990:	20001830 	.word	0x20001830

00008994 <sys_put_le32>:
	dst[1] = val >> 8;
    8994:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    8998:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    899a:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    899c:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    899e:	0a00      	lsrs	r0, r0, #8
    89a0:	704b      	strb	r3, [r1, #1]
    89a2:	70c8      	strb	r0, [r1, #3]
    89a4:	4770      	bx	lr

000089a6 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    89a6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    89a8:	3008      	adds	r0, #8
{
    89aa:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    89ac:	2102      	movs	r1, #2
{
    89ae:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    89b0:	f00a fec4 	bl	1373c <net_buf_simple_add>
	hdr->evt = evt;
    89b4:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    89b6:	7044      	strb	r4, [r0, #1]
    89b8:	bd38      	pop	{r3, r4, r5, pc}
	...

000089bc <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    89bc:	b538      	push	{r3, r4, r5, lr}
    89be:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    89c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    89c4:	f7fb fd04 	bl	43d0 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    89c8:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    89ca:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    89cc:	210f      	movs	r1, #15
    89ce:	f7ff ffea 	bl	89a6 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    89d2:	2104      	movs	r1, #4
    89d4:	f104 0008 	add.w	r0, r4, #8
    89d8:	f00a feb0 	bl	1373c <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    89dc:	2301      	movs	r3, #1
    89de:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    89e0:	4b02      	ldr	r3, [pc, #8]	; (89ec <cmd_status+0x30>)
	cs->status = status;
    89e2:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    89e4:	881b      	ldrh	r3, [r3, #0]
    89e6:	8043      	strh	r3, [r0, #2]

	return buf;
}
    89e8:	4620      	mov	r0, r4
    89ea:	bd38      	pop	{r3, r4, r5, pc}
    89ec:	20000828 	.word	0x20000828

000089f0 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    89f0:	b570      	push	{r4, r5, r6, lr}
    89f2:	4604      	mov	r4, r0
    89f4:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    89f6:	3201      	adds	r2, #1
{
    89f8:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    89fa:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    89fc:	b2d2      	uxtb	r2, r2
    89fe:	213e      	movs	r1, #62	; 0x3e
    8a00:	f7ff ffd1 	bl	89a6 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    8a04:	2101      	movs	r1, #1
    8a06:	4620      	mov	r0, r4
    8a08:	f00a fe98 	bl	1373c <net_buf_simple_add>
	me->subevent = subevt;
    8a0c:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    8a0e:	4629      	mov	r1, r5
    8a10:	4620      	mov	r0, r4
}
    8a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    8a16:	f00a be91 	b.w	1373c <net_buf_simple_add>
	...

00008a1c <cmd_complete>:
{
    8a1c:	b538      	push	{r3, r4, r5, lr}
    8a1e:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    8a24:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8a26:	f7fb fcd3 	bl	43d0 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    8a2a:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8a2c:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    8a2e:	b2d2      	uxtb	r2, r2
    8a30:	210e      	movs	r1, #14
    8a32:	f7ff ffb8 	bl	89a6 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    8a36:	6820      	ldr	r0, [r4, #0]
    8a38:	2103      	movs	r1, #3
    8a3a:	3008      	adds	r0, #8
    8a3c:	f00a fe7e 	bl	1373c <net_buf_simple_add>
	cc->ncmd = 1;
    8a40:	2301      	movs	r3, #1
    8a42:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    8a44:	4b05      	ldr	r3, [pc, #20]	; (8a5c <cmd_complete+0x40>)
    8a46:	881b      	ldrh	r3, [r3, #0]
    8a48:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    8a4c:	6820      	ldr	r0, [r4, #0]
    8a4e:	4629      	mov	r1, r5
    8a50:	3008      	adds	r0, #8
}
    8a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    8a56:	f00a be71 	b.w	1373c <net_buf_simple_add>
    8a5a:	bf00      	nop
    8a5c:	20000828 	.word	0x20000828

00008a60 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8a60:	4b0e      	ldr	r3, [pc, #56]	; (8a9c <encrypt_change+0x3c>)
{
    8a62:	b570      	push	{r4, r5, r6, lr}
    8a64:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8a66:	e9d3 2300 	ldrd	r2, r3, [r3]
    8a6a:	2300      	movs	r3, #0
    8a6c:	f002 0280 	and.w	r2, r2, #128	; 0x80
    8a70:	4313      	orrs	r3, r2
{
    8a72:	4604      	mov	r4, r0
    8a74:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8a76:	d010      	beq.n	8a9a <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    8a78:	2204      	movs	r2, #4
    8a7a:	2108      	movs	r1, #8
    8a7c:	4628      	mov	r0, r5
    8a7e:	f7ff ff92 	bl	89a6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8a82:	2104      	movs	r1, #4
    8a84:	f105 0008 	add.w	r0, r5, #8
    8a88:	f00a fe58 	bl	1373c <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    8a8c:	fab4 f384 	clz	r3, r4
    8a90:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    8a92:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8a94:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    8a98:	70c3      	strb	r3, [r0, #3]
    8a9a:	bd70      	pop	{r4, r5, r6, pc}
    8a9c:	20003d28 	.word	0x20003d28

00008aa0 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    8aa0:	b570      	push	{r4, r5, r6, lr}
    8aa2:	4604      	mov	r4, r0
    8aa4:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8aa6:	4b13      	ldr	r3, [pc, #76]	; (8af4 <le_remote_feat_complete+0x54>)
{
    8aa8:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    8aae:	2200      	movs	r2, #0
    8ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8ab4:	4313      	orrs	r3, r2
{
    8ab6:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8ab8:	d01b      	beq.n	8af2 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    8aba:	4b0f      	ldr	r3, [pc, #60]	; (8af8 <le_remote_feat_complete+0x58>)
    8abc:	e9d3 2300 	ldrd	r2, r3, [r3]
    8ac0:	2300      	movs	r3, #0
    8ac2:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8ac6:	4313      	orrs	r3, r2
    8ac8:	d013      	beq.n	8af2 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    8aca:	220b      	movs	r2, #11
    8acc:	2104      	movs	r1, #4
    8ace:	f7ff ff8f 	bl	89f0 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    8ad2:	2208      	movs	r2, #8
	sep->status = status;
    8ad4:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    8ad6:	f8a0 6001 	strh.w	r6, [r0, #1]
    8ada:	3003      	adds	r0, #3
	if (!status) {
    8adc:	b924      	cbnz	r4, 8ae8 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    8ade:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    8ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    8ae4:	f7f9 b8b0 	b.w	1c48 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    8ae8:	2100      	movs	r1, #0
}
    8aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    8aee:	f7f9 b8d7 	b.w	1ca0 <memset>
    8af2:	bd70      	pop	{r4, r5, r6, pc}
    8af4:	20003d28 	.word	0x20003d28
    8af8:	20003d30 	.word	0x20003d30

00008afc <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b00:	4605      	mov	r5, r0
    8b02:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8b04:	4b46      	ldr	r3, [pc, #280]	; (8c20 <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8b06:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8b08:	e9d3 2300 	ldrd	r2, r3, [r3]
    8b0c:	f240 2801 	movw	r8, #513	; 0x201
    8b10:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    8b14:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8b18:	ea03 0309 	and.w	r3, r3, r9
    8b1c:	ea02 0208 	and.w	r2, r2, r8
    8b20:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8b22:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    8b24:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8b28:	d077      	beq.n	8c1a <le_conn_complete.part.39+0x11e>
	if (!status) {
    8b2a:	2d00      	cmp	r5, #0
    8b2c:	d150      	bne.n	8bd0 <le_conn_complete.part.39+0xd4>
		conn_count++;
    8b2e:	4a3d      	ldr	r2, [pc, #244]	; (8c24 <le_conn_complete.part.39+0x128>)
    8b30:	6813      	ldr	r3, [r2, #0]
    8b32:	3301      	adds	r3, #1
    8b34:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    8b36:	ea5a 030b 	orrs.w	r3, sl, fp
    8b3a:	f101 0803 	add.w	r8, r1, #3
    8b3e:	d151      	bne.n	8be4 <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8b40:	2212      	movs	r2, #18
    8b42:	2101      	movs	r1, #1
    8b44:	f7ff ff54 	bl	89f0 <meta_evt>
	lecc->status = 0x00;
    8b48:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    8b4a:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    8b4e:	7863      	ldrb	r3, [r4, #1]
    8b50:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    8b52:	78a3      	ldrb	r3, [r4, #2]
    8b54:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8b56:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    8b58:	2206      	movs	r2, #6
    8b5a:	4641      	mov	r1, r8
    8b5c:	3005      	adds	r0, #5
    8b5e:	f7f9 f873 	bl	1c48 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    8b62:	8ae3      	ldrh	r3, [r4, #22]
    8b64:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    8b68:	8b23      	ldrh	r3, [r4, #24]
    8b6a:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    8b6e:	8b63      	ldrh	r3, [r4, #26]
    8b70:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    8b74:	7f23      	ldrb	r3, [r4, #28]
    8b76:	747b      	strb	r3, [r7, #17]
    8b78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8b7c:	221e      	movs	r2, #30
    8b7e:	210a      	movs	r1, #10
    8b80:	f7ff ff36 	bl	89f0 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    8b84:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8b86:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    8b88:	2100      	movs	r1, #0
    8b8a:	f7f9 f889 	bl	1ca0 <memset>
		lecc->status = status;
    8b8e:	7025      	strb	r5, [r4, #0]
    8b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    8b94:	7d63      	ldrb	r3, [r4, #21]
    8b96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8b9a:	2b40      	cmp	r3, #64	; 0x40
    8b9c:	d138      	bne.n	8c10 <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    8b9e:	2206      	movs	r2, #6
    8ba0:	f104 0110 	add.w	r1, r4, #16
    8ba4:	f7f9 f850 	bl	1c48 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    8ba8:	2206      	movs	r2, #6
    8baa:	f104 0109 	add.w	r1, r4, #9
    8bae:	f107 0011 	add.w	r0, r7, #17
    8bb2:	f7f9 f849 	bl	1c48 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    8bb6:	8ae3      	ldrh	r3, [r4, #22]
    8bb8:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    8bbc:	8b23      	ldrh	r3, [r4, #24]
    8bbe:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    8bc2:	8b63      	ldrh	r3, [r4, #26]
    8bc4:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    8bc8:	7f23      	ldrb	r3, [r4, #28]
    8bca:	777b      	strb	r3, [r7, #29]
    8bcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    8bd0:	ea5a 030b 	orrs.w	r3, sl, fp
    8bd4:	d1d2      	bne.n	8b7c <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8bd6:	2212      	movs	r2, #18
    8bd8:	2101      	movs	r1, #1
    8bda:	f7ff ff09 	bl	89f0 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    8bde:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8be0:	4604      	mov	r4, r0
    8be2:	e7d1      	b.n	8b88 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8be4:	221e      	movs	r2, #30
    8be6:	210a      	movs	r1, #10
    8be8:	f7ff ff02 	bl	89f0 <meta_evt>
		leecc->status = 0x00;
    8bec:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    8bee:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    8bf2:	7863      	ldrb	r3, [r4, #1]
    8bf4:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    8bf6:	78a3      	ldrb	r3, [r4, #2]
    8bf8:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8bfa:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    8bfc:	2206      	movs	r2, #6
    8bfe:	4641      	mov	r1, r8
    8c00:	3005      	adds	r0, #5
    8c02:	f7f9 f821 	bl	1c48 <memcpy>
		if ((radio_cc->own_addr_type) &&
    8c06:	7be3      	ldrb	r3, [r4, #15]
    8c08:	f107 000b 	add.w	r0, r7, #11
    8c0c:	2b00      	cmp	r3, #0
    8c0e:	d1c1      	bne.n	8b94 <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    8c10:	2206      	movs	r2, #6
    8c12:	2100      	movs	r1, #0
    8c14:	f7f9 f844 	bl	1ca0 <memset>
    8c18:	e7c6      	b.n	8ba8 <le_conn_complete.part.39+0xac>
    8c1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c1e:	bf00      	nop
    8c20:	20003d30 	.word	0x20003d30
    8c24:	2000082c 	.word	0x2000082c

00008c28 <bt_addr_le_to_str.constprop.70>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8c28:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    8c2a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8c2c:	b08a      	sub	sp, #40	; 0x28
    8c2e:	4604      	mov	r4, r0
    8c30:	460e      	mov	r6, r1
    8c32:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    8c34:	2b03      	cmp	r3, #3
    8c36:	d820      	bhi.n	8c7a <bt_addr_le_to_str.constprop.70+0x52>
    8c38:	e8df f003 	tbb	[pc, r3]
    8c3c:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    8c40:	4911      	ldr	r1, [pc, #68]	; (8c88 <bt_addr_le_to_str.constprop.70+0x60>)
		strcpy(type, "random");
    8c42:	4628      	mov	r0, r5
    8c44:	f7f8 ffcc 	bl	1be0 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8c48:	7862      	ldrb	r2, [r4, #1]
    8c4a:	9204      	str	r2, [sp, #16]
    8c4c:	78a2      	ldrb	r2, [r4, #2]
    8c4e:	9203      	str	r2, [sp, #12]
    8c50:	78e2      	ldrb	r2, [r4, #3]
    8c52:	9202      	str	r2, [sp, #8]
    8c54:	7922      	ldrb	r2, [r4, #4]
    8c56:	9201      	str	r2, [sp, #4]
    8c58:	7962      	ldrb	r2, [r4, #5]
    8c5a:	9200      	str	r2, [sp, #0]
    8c5c:	79a3      	ldrb	r3, [r4, #6]
    8c5e:	9505      	str	r5, [sp, #20]
    8c60:	4a0a      	ldr	r2, [pc, #40]	; (8c8c <bt_addr_le_to_str.constprop.70+0x64>)
    8c62:	211b      	movs	r1, #27
    8c64:	4630      	mov	r0, r6
    8c66:	f7f8 f99f 	bl	fa8 <snprintk>
}
    8c6a:	b00a      	add	sp, #40	; 0x28
    8c6c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    8c6e:	4908      	ldr	r1, [pc, #32]	; (8c90 <bt_addr_le_to_str.constprop.70+0x68>)
    8c70:	e7e7      	b.n	8c42 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "public id");
    8c72:	4908      	ldr	r1, [pc, #32]	; (8c94 <bt_addr_le_to_str.constprop.70+0x6c>)
    8c74:	e7e5      	b.n	8c42 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "random id");
    8c76:	4908      	ldr	r1, [pc, #32]	; (8c98 <bt_addr_le_to_str.constprop.70+0x70>)
    8c78:	e7e3      	b.n	8c42 <bt_addr_le_to_str.constprop.70+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    8c7a:	4a08      	ldr	r2, [pc, #32]	; (8c9c <bt_addr_le_to_str.constprop.70+0x74>)
    8c7c:	210a      	movs	r1, #10
    8c7e:	4628      	mov	r0, r5
    8c80:	f7f8 f992 	bl	fa8 <snprintk>
    8c84:	e7e0      	b.n	8c48 <bt_addr_le_to_str.constprop.70+0x20>
    8c86:	bf00      	nop
    8c88:	000152c5 	.word	0x000152c5
    8c8c:	000152ee 	.word	0x000152ee
    8c90:	000152cc 	.word	0x000152cc
    8c94:	000152d3 	.word	0x000152d3
    8c98:	000152dd 	.word	0x000152dd
    8c9c:	000152e7 	.word	0x000152e7

00008ca0 <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8ca4:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    8ca6:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8ca8:	4d33      	ldr	r5, [pc, #204]	; (8d78 <le_adv_ext_report.isra.66+0xd8>)
    8caa:	4e34      	ldr	r6, [pc, #208]	; (8d7c <le_adv_ext_report.isra.66+0xdc>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8cac:	b093      	sub	sp, #76	; 0x4c
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8cae:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8cb0:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8cb2:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8cb4:	6837      	ldr	r7, [r6, #0]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8cb6:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8cb8:	b25b      	sxtb	r3, r3
    8cba:	9306      	str	r3, [sp, #24]
    8cbc:	7823      	ldrb	r3, [r4, #0]
    8cbe:	9003      	str	r0, [sp, #12]
    8cc0:	09d9      	lsrs	r1, r3, #7
    8cc2:	9105      	str	r1, [sp, #20]
    8cc4:	f3c3 1180 	ubfx	r1, r3, #6, #1
    8cc8:	f003 030f 	and.w	r3, r3, #15
    8ccc:	9104      	str	r1, [sp, #16]
    8cce:	9302      	str	r3, [sp, #8]
    8cd0:	9201      	str	r2, [sp, #4]
    8cd2:	4b2b      	ldr	r3, [pc, #172]	; (8d80 <le_adv_ext_report.isra.66+0xe0>)
    8cd4:	9500      	str	r5, [sp, #0]
    8cd6:	4a2b      	ldr	r2, [pc, #172]	; (8d84 <le_adv_ext_report.isra.66+0xe4>)
    8cd8:	492b      	ldr	r1, [pc, #172]	; (8d88 <le_adv_ext_report.isra.66+0xe8>)
    8cda:	482c      	ldr	r0, [pc, #176]	; (8d8c <le_adv_ext_report.isra.66+0xec>)
    8cdc:	47b8      	blx	r7
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    8cde:	7823      	ldrb	r3, [r4, #0]
    8ce0:	f003 030f 	and.w	r3, r3, #15
    8ce4:	2b07      	cmp	r3, #7
    8ce6:	d143      	bne.n	8d70 <le_adv_ext_report.isra.66+0xd0>
    8ce8:	7863      	ldrb	r3, [r4, #1]
    8cea:	2b00      	cmp	r3, #0
    8cec:	d040      	beq.n	8d70 <le_adv_ext_report.isra.66+0xd0>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    8cee:	9503      	str	r5, [sp, #12]
    8cf0:	78a3      	ldrb	r3, [r4, #2]
    8cf2:	4925      	ldr	r1, [pc, #148]	; (8d88 <le_adv_ext_report.isra.66+0xe8>)
    8cf4:	9500      	str	r5, [sp, #0]
    8cf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    8cfa:	099b      	lsrs	r3, r3, #6
    8cfc:	9202      	str	r2, [sp, #8]
    8cfe:	9301      	str	r3, [sp, #4]
    8d00:	6837      	ldr	r7, [r6, #0]
    8d02:	4b1f      	ldr	r3, [pc, #124]	; (8d80 <le_adv_ext_report.isra.66+0xe0>)
    8d04:	4a1f      	ldr	r2, [pc, #124]	; (8d84 <le_adv_ext_report.isra.66+0xe4>)
    8d06:	4822      	ldr	r0, [pc, #136]	; (8d90 <le_adv_ext_report.isra.66+0xf0>)
    8d08:	47b8      	blx	r7
		if (!p->ext_hdr_len) {
    8d0a:	78a3      	ldrb	r3, [r4, #2]
    8d0c:	0699      	lsls	r1, r3, #26
    8d0e:	d02f      	beq.n	8d70 <le_adv_ext_report.isra.66+0xd0>
		if (h->adv_addr) {
    8d10:	78e3      	ldrb	r3, [r4, #3]
    8d12:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    8d14:	f104 0804 	add.w	r8, r4, #4
		if (h->adv_addr) {
    8d18:	d51c      	bpl.n	8d54 <le_adv_ext_report.isra.66+0xb4>
			addr.type = adv->tx_addr;
    8d1a:	7823      	ldrb	r3, [r4, #0]
    8d1c:	af12      	add	r7, sp, #72	; 0x48
    8d1e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8d22:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8d26:	2206      	movs	r2, #6
    8d28:	4641      	mov	r1, r8
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8d2a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8d2e:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    8d32:	f7f8 ff89 	bl	1c48 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8d36:	4649      	mov	r1, r9
    8d38:	4638      	mov	r0, r7
    8d3a:	f7ff ff75 	bl	8c28 <bt_addr_le_to_str.constprop.70>
			BT_WARN("AdvA: %s", addr_str);
    8d3e:	9502      	str	r5, [sp, #8]
    8d40:	e88d 0220 	stmia.w	sp, {r5, r9}
    8d44:	6837      	ldr	r7, [r6, #0]
    8d46:	4b0e      	ldr	r3, [pc, #56]	; (8d80 <le_adv_ext_report.isra.66+0xe0>)
    8d48:	4a0e      	ldr	r2, [pc, #56]	; (8d84 <le_adv_ext_report.isra.66+0xe4>)
    8d4a:	490f      	ldr	r1, [pc, #60]	; (8d88 <le_adv_ext_report.isra.66+0xe8>)
    8d4c:	4811      	ldr	r0, [pc, #68]	; (8d94 <le_adv_ext_report.isra.66+0xf4>)
			ptr += BDADDR_SIZE;
    8d4e:	f104 080a 	add.w	r8, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    8d52:	47b8      	blx	r7
		if (h->tx_pwr) {
    8d54:	78e3      	ldrb	r3, [r4, #3]
    8d56:	065b      	lsls	r3, r3, #25
    8d58:	d50a      	bpl.n	8d70 <le_adv_ext_report.isra.66+0xd0>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    8d5a:	9502      	str	r5, [sp, #8]
    8d5c:	f998 3000 	ldrsb.w	r3, [r8]
    8d60:	9301      	str	r3, [sp, #4]
    8d62:	9500      	str	r5, [sp, #0]
    8d64:	6834      	ldr	r4, [r6, #0]
    8d66:	4b06      	ldr	r3, [pc, #24]	; (8d80 <le_adv_ext_report.isra.66+0xe0>)
    8d68:	4a06      	ldr	r2, [pc, #24]	; (8d84 <le_adv_ext_report.isra.66+0xe4>)
    8d6a:	4907      	ldr	r1, [pc, #28]	; (8d88 <le_adv_ext_report.isra.66+0xe8>)
    8d6c:	480a      	ldr	r0, [pc, #40]	; (8d98 <le_adv_ext_report.isra.66+0xf8>)
    8d6e:	47a0      	blx	r4
}
    8d70:	b013      	add	sp, #76	; 0x4c
    8d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8d76:	bf00      	nop
    8d78:	00015359 	.word	0x00015359
    8d7c:	20003a5c 	.word	0x20003a5c
    8d80:	00017a5c 	.word	0x00017a5c
    8d84:	000167d7 	.word	0x000167d7
    8d88:	0001679c 	.word	0x0001679c
    8d8c:	00017cb9 	.word	0x00017cb9
    8d90:	00017d06 	.word	0x00017d06
    8d94:	00017d37 	.word	0x00017d37
    8d98:	00017d50 	.word	0x00017d50

00008d9c <sys_get_le64>:
{
    8d9c:	4603      	mov	r3, r0
}
    8d9e:	6800      	ldr	r0, [r0, #0]
    8da0:	6859      	ldr	r1, [r3, #4]
    8da2:	4770      	bx	lr

00008da4 <hci_cmd_handle>:
{
    8da4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    8da6:	8981      	ldrh	r1, [r0, #12]
{
    8da8:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    8daa:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    8dac:	2902      	cmp	r1, #2
{
    8dae:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    8db0:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    8db2:	d80c      	bhi.n	8dce <hci_cmd_handle+0x2a>
		BT_ERR("No HCI Command header");
    8db4:	4bc0      	ldr	r3, [pc, #768]	; (90b8 <hci_cmd_handle+0x314>)
    8db6:	9301      	str	r3, [sp, #4]
    8db8:	9300      	str	r3, [sp, #0]
    8dba:	4bc0      	ldr	r3, [pc, #768]	; (90bc <hci_cmd_handle+0x318>)
    8dbc:	4ac0      	ldr	r2, [pc, #768]	; (90c0 <hci_cmd_handle+0x31c>)
    8dbe:	681c      	ldr	r4, [r3, #0]
    8dc0:	49c0      	ldr	r1, [pc, #768]	; (90c4 <hci_cmd_handle+0x320>)
    8dc2:	4bc1      	ldr	r3, [pc, #772]	; (90c8 <hci_cmd_handle+0x324>)
    8dc4:	48c1      	ldr	r0, [pc, #772]	; (90cc <hci_cmd_handle+0x328>)
		BT_ERR("Invalid HCI CMD packet length");
    8dc6:	47a0      	blx	r4
		return NULL;
    8dc8:	4628      	mov	r0, r5
}
    8dca:	b013      	add	sp, #76	; 0x4c
    8dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    8dce:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8dd0:	4ebf      	ldr	r6, [pc, #764]	; (90d0 <hci_cmd_handle+0x32c>)
    8dd2:	781a      	ldrb	r2, [r3, #0]
    8dd4:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    8dd6:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8dd8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    8ddc:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8dde:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    8de0:	d909      	bls.n	8df6 <hci_cmd_handle+0x52>
		BT_ERR("Invalid HCI CMD packet length");
    8de2:	4bb5      	ldr	r3, [pc, #724]	; (90b8 <hci_cmd_handle+0x314>)
    8de4:	9301      	str	r3, [sp, #4]
    8de6:	9300      	str	r3, [sp, #0]
    8de8:	4bb4      	ldr	r3, [pc, #720]	; (90bc <hci_cmd_handle+0x318>)
    8dea:	4ab5      	ldr	r2, [pc, #724]	; (90c0 <hci_cmd_handle+0x31c>)
    8dec:	681c      	ldr	r4, [r3, #0]
    8dee:	49b5      	ldr	r1, [pc, #724]	; (90c4 <hci_cmd_handle+0x320>)
    8df0:	4bb5      	ldr	r3, [pc, #724]	; (90c8 <hci_cmd_handle+0x324>)
    8df2:	48b8      	ldr	r0, [pc, #736]	; (90d4 <hci_cmd_handle+0x330>)
    8df4:	e7e7      	b.n	8dc6 <hci_cmd_handle+0x22>
	net_buf_pull(cmd, sizeof(*chdr));
    8df6:	2103      	movs	r1, #3
    8df8:	f104 0008 	add.w	r0, r4, #8
    8dfc:	f00a fcbd 	bl	1377a <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    8e00:	8833      	ldrh	r3, [r6, #0]
    8e02:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    8e06:	0a9b      	lsrs	r3, r3, #10
    8e08:	2b04      	cmp	r3, #4
    8e0a:	f000 80bd 	beq.w	8f88 <hci_cmd_handle+0x1e4>
    8e0e:	d809      	bhi.n	8e24 <hci_cmd_handle+0x80>
    8e10:	2b01      	cmp	r3, #1
    8e12:	d027      	beq.n	8e64 <hci_cmd_handle+0xc0>
    8e14:	2b03      	cmp	r3, #3
    8e16:	d03c      	beq.n	8e92 <hci_cmd_handle+0xee>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    8e18:	2101      	movs	r1, #1
    8e1a:	a807      	add	r0, sp, #28
    8e1c:	f7ff fdfe 	bl	8a1c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8e20:	2301      	movs	r3, #1
    8e22:	e29b      	b.n	935c <hci_cmd_handle+0x5b8>
	switch (BT_OGF(_opcode)) {
    8e24:	2b08      	cmp	r3, #8
    8e26:	f000 816b 	beq.w	9100 <hci_cmd_handle+0x35c>
    8e2a:	2b3f      	cmp	r3, #63	; 0x3f
    8e2c:	d1f4      	bne.n	8e18 <hci_cmd_handle+0x74>
	switch (ocf) {
    8e2e:	3a01      	subs	r2, #1
    8e30:	2a09      	cmp	r2, #9
    8e32:	d8f1      	bhi.n	8e18 <hci_cmd_handle+0x74>
    8e34:	a301      	add	r3, pc, #4	; (adr r3, 8e3c <hci_cmd_handle+0x98>)
    8e36:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8e3a:	bf00      	nop
    8e3c:	00009695 	.word	0x00009695
    8e40:	000096c5 	.word	0x000096c5
    8e44:	000096ef 	.word	0x000096ef
    8e48:	00008e19 	.word	0x00008e19
    8e4c:	00008e19 	.word	0x00008e19
    8e50:	00009735 	.word	0x00009735
    8e54:	00008e19 	.word	0x00008e19
    8e58:	00009707 	.word	0x00009707
    8e5c:	00009741 	.word	0x00009741
    8e60:	000097af 	.word	0x000097af
	switch (ocf) {
    8e64:	2a06      	cmp	r2, #6
    8e66:	d006      	beq.n	8e76 <hci_cmd_handle+0xd2>
    8e68:	2a1d      	cmp	r2, #29
    8e6a:	d1d5      	bne.n	8e18 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
    8e6c:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    8e6e:	8818      	ldrh	r0, [r3, #0]
    8e70:	f008 f905 	bl	1107e <ll_version_ind_send>
    8e74:	e004      	b.n	8e80 <hci_cmd_handle+0xdc>
    8e76:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    8e78:	7899      	ldrb	r1, [r3, #2]
    8e7a:	8818      	ldrh	r0, [r3, #0]
    8e7c:	f008 f913 	bl	110a6 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    8e80:	2800      	cmp	r0, #0
    8e82:	bf14      	ite	ne
    8e84:	200c      	movne	r0, #12
    8e86:	2000      	moveq	r0, #0
    8e88:	f7ff fd98 	bl	89bc <cmd_status>
    8e8c:	9007      	str	r0, [sp, #28]
	return evt;
    8e8e:	9807      	ldr	r0, [sp, #28]
    8e90:	e79b      	b.n	8dca <hci_cmd_handle+0x26>
	switch (ocf) {
    8e92:	2a2d      	cmp	r2, #45	; 0x2d
    8e94:	d03a      	beq.n	8f0c <hci_cmd_handle+0x168>
    8e96:	d820      	bhi.n	8eda <hci_cmd_handle+0x136>
    8e98:	2a01      	cmp	r2, #1
    8e9a:	d02b      	beq.n	8ef4 <hci_cmd_handle+0x150>
    8e9c:	2a03      	cmp	r2, #3
    8e9e:	d1bb      	bne.n	8e18 <hci_cmd_handle+0x74>
	dup_count = -1;
    8ea0:	4b8d      	ldr	r3, [pc, #564]	; (90d8 <hci_cmd_handle+0x334>)
    8ea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8ea6:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    8ea8:	4b8c      	ldr	r3, [pc, #560]	; (90dc <hci_cmd_handle+0x338>)
    8eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8eae:	f641 71ff 	movw	r1, #8191	; 0x1fff
    8eb2:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    8eb6:	4b8a      	ldr	r3, [pc, #552]	; (90e0 <hci_cmd_handle+0x33c>)
    8eb8:	2000      	movs	r0, #0
    8eba:	2100      	movs	r1, #0
    8ebc:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    8ec0:	4b88      	ldr	r3, [pc, #544]	; (90e4 <hci_cmd_handle+0x340>)
    8ec2:	201f      	movs	r0, #31
    8ec4:	2100      	movs	r1, #0
    8ec6:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    8eca:	f007 fda1 	bl	10a10 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8ece:	2101      	movs	r1, #1
    8ed0:	a807      	add	r0, sp, #28
    8ed2:	f7ff fda3 	bl	8a1c <cmd_complete>
	ccst->status = 0x00;
    8ed6:	2300      	movs	r3, #0
    8ed8:	e240      	b.n	935c <hci_cmd_handle+0x5b8>
	switch (ocf) {
    8eda:	2a7b      	cmp	r2, #123	; 0x7b
    8edc:	d02c      	beq.n	8f38 <hci_cmd_handle+0x194>
    8ede:	2a7c      	cmp	r2, #124	; 0x7c
    8ee0:	d041      	beq.n	8f66 <hci_cmd_handle+0x1c2>
    8ee2:	2a63      	cmp	r2, #99	; 0x63
    8ee4:	d198      	bne.n	8e18 <hci_cmd_handle+0x74>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    8ee6:	68a0      	ldr	r0, [r4, #8]
    8ee8:	f7ff ff58 	bl	8d9c <sys_get_le64>
    8eec:	4b7c      	ldr	r3, [pc, #496]	; (90e0 <hci_cmd_handle+0x33c>)
	le_event_mask = sys_get_le64(cmd->events);
    8eee:	e9c3 0100 	strd	r0, r1, [r3]
    8ef2:	e7ec      	b.n	8ece <hci_cmd_handle+0x12a>
	event_mask = sys_get_le64(cmd->events);
    8ef4:	68a0      	ldr	r0, [r4, #8]
    8ef6:	f7ff ff51 	bl	8d9c <sys_get_le64>
    8efa:	4b78      	ldr	r3, [pc, #480]	; (90dc <hci_cmd_handle+0x338>)
    8efc:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8f00:	4611      	mov	r1, r2
    8f02:	a807      	add	r0, sp, #28
    8f04:	f7ff fd8a 	bl	8a1c <cmd_complete>
	ccst->status = 0x00;
    8f08:	7005      	strb	r5, [r0, #0]
    8f0a:	e7c0      	b.n	8e8e <hci_cmd_handle+0xea>
    8f0c:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8f0e:	2104      	movs	r1, #4
    8f10:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8f12:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    8f14:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    8f16:	f7ff fd81 	bl	8a1c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8f1a:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8f1c:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    8f1e:	1cc2      	adds	r2, r0, #3
    8f20:	4639      	mov	r1, r7
    8f22:	4630      	mov	r0, r6
    8f24:	f008 f8d3 	bl	110ce <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    8f28:	2800      	cmp	r0, #0
    8f2a:	bf14      	ite	ne
    8f2c:	2302      	movne	r3, #2
    8f2e:	2300      	moveq	r3, #0
    8f30:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    8f32:	f8a4 5001 	strh.w	r5, [r4, #1]
    8f36:	e7aa      	b.n	8e8e <hci_cmd_handle+0xea>
	handle = sys_le16_to_cpu(cmd->handle);
    8f38:	68a3      	ldr	r3, [r4, #8]
    8f3a:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    8f3c:	a908      	add	r1, sp, #32
    8f3e:	b2a0      	uxth	r0, r4
    8f40:	f008 f8cf 	bl	110e2 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    8f44:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    8f46:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8f48:	a807      	add	r0, sp, #28
    8f4a:	f7ff fd67 	bl	8a1c <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8f4e:	2d00      	cmp	r5, #0
    8f50:	bf14      	ite	ne
    8f52:	230c      	movne	r3, #12
    8f54:	2300      	moveq	r3, #0
    8f56:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8f58:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    8f5c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8f60:	f8a0 3003 	strh.w	r3, [r0, #3]
    8f64:	e793      	b.n	8e8e <hci_cmd_handle+0xea>
    8f66:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8f68:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    8f6a:	8859      	ldrh	r1, [r3, #2]
    8f6c:	b2a0      	uxth	r0, r4
    8f6e:	f008 f8cc 	bl	1110a <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8f72:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8f74:	2103      	movs	r1, #3
    8f76:	a807      	add	r0, sp, #28
    8f78:	f7ff fd50 	bl	8a1c <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8f7c:	2d00      	cmp	r5, #0
    8f7e:	bf14      	ite	ne
    8f80:	230c      	movne	r3, #12
    8f82:	2300      	moveq	r3, #0
    8f84:	7003      	strb	r3, [r0, #0]
    8f86:	e27f      	b.n	9488 <hci_cmd_handle+0x6e4>
	switch (ocf) {
    8f88:	3a01      	subs	r2, #1
    8f8a:	2a08      	cmp	r2, #8
    8f8c:	f63f af44 	bhi.w	8e18 <hci_cmd_handle+0x74>
    8f90:	a301      	add	r3, pc, #4	; (adr r3, 8f98 <hci_cmd_handle+0x1f4>)
    8f92:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8f96:	bf00      	nop
    8f98:	00008fbd 	.word	0x00008fbd
    8f9c:	00008fe7 	.word	0x00008fe7
    8fa0:	0000909b 	.word	0x0000909b
    8fa4:	00008e19 	.word	0x00008e19
    8fa8:	00008e19 	.word	0x00008e19
    8fac:	00008e19 	.word	0x00008e19
    8fb0:	00008e19 	.word	0x00008e19
    8fb4:	00008e19 	.word	0x00008e19
    8fb8:	000090e9 	.word	0x000090e9
	rp = cmd_complete(evt, sizeof(*rp));
    8fbc:	2109      	movs	r1, #9
    8fbe:	a807      	add	r0, sp, #28
    8fc0:	f7ff fd2c 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    8fc4:	2300      	movs	r3, #0
    8fc6:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    8fc8:	7083      	strb	r3, [r0, #2]
    8fca:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8fcc:	f06f 030e 	mvn.w	r3, #14
    8fd0:	7143      	strb	r3, [r0, #5]
    8fd2:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    8fd4:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8fd6:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    8fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    8fdc:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    8fde:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    8fe0:	71c3      	strb	r3, [r0, #7]
    8fe2:	7203      	strb	r3, [r0, #8]
    8fe4:	e753      	b.n	8e8e <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8fe6:	2141      	movs	r1, #65	; 0x41
    8fe8:	a807      	add	r0, sp, #28
    8fea:	f7ff fd17 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    8fee:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8ff0:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8ff2:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    8ff4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8ff8:	f7f8 fe52 	bl	1ca0 <memset>
	rp->commands[2] |= BIT(7);
    8ffc:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    8ffe:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    9000:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9004:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    9006:	79a3      	ldrb	r3, [r4, #6]
    9008:	f063 033f 	orn	r3, r3, #63	; 0x3f
    900c:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    900e:	7ae3      	ldrb	r3, [r4, #11]
    9010:	f043 0304 	orr.w	r3, r3, #4
    9014:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    9016:	7be3      	ldrb	r3, [r4, #15]
    9018:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    901c:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    901e:	7c23      	ldrb	r3, [r4, #16]
    9020:	f043 0302 	orr.w	r3, r3, #2
    9024:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    9026:	7de3      	ldrb	r3, [r4, #23]
    9028:	f043 0304 	orr.w	r3, r3, #4
    902c:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    902e:	7ea3      	ldrb	r3, [r4, #26]
    9030:	f043 0317 	orr.w	r3, r3, #23
    9034:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    9036:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    9038:	f043 0309 	orr.w	r3, r3, #9
    903c:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    903e:	7863      	ldrb	r3, [r4, #1]
    9040:	f043 0320 	orr.w	r3, r3, #32
    9044:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    9046:	23ff      	movs	r3, #255	; 0xff
    9048:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    904a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    904e:	f063 030f 	orn	r3, r3, #15
    9052:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    9056:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    905a:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    905e:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    9062:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    9064:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    9068:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    906c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    9070:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    9074:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    9078:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    907c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9080:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    9084:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9088:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    908c:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9090:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    9094:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    9098:	e6f9      	b.n	8e8e <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    909a:	2109      	movs	r1, #9
    909c:	a807      	add	r0, sp, #28
    909e:	f7ff fcbd 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    90a2:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    90a4:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    90a6:	2208      	movs	r2, #8
	rp->status = 0x00;
    90a8:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    90ac:	f7f8 fdf8 	bl	1ca0 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    90b0:	2360      	movs	r3, #96	; 0x60
    90b2:	7163      	strb	r3, [r4, #5]
    90b4:	e6eb      	b.n	8e8e <hci_cmd_handle+0xea>
    90b6:	bf00      	nop
    90b8:	00015359 	.word	0x00015359
    90bc:	20003a5c 	.word	0x20003a5c
    90c0:	00016754 	.word	0x00016754
    90c4:	0001679c 	.word	0x0001679c
    90c8:	00017a28 	.word	0x00017a28
    90cc:	00017b6b 	.word	0x00017b6b
    90d0:	20000828 	.word	0x20000828
    90d4:	00017b91 	.word	0x00017b91
    90d8:	20000830 	.word	0x20000830
    90dc:	20003d28 	.word	0x20003d28
    90e0:	200008b8 	.word	0x200008b8
    90e4:	20003d30 	.word	0x20003d30
	rp = cmd_complete(evt, sizeof(*rp));
    90e8:	2107      	movs	r1, #7
    90ea:	a807      	add	r0, sp, #28
    90ec:	f7ff fc96 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    90f0:	4601      	mov	r1, r0
    90f2:	2300      	movs	r3, #0
    90f4:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    90f8:	4618      	mov	r0, r3
    90fa:	f7ff fab1 	bl	8660 <ll_addr_get>
    90fe:	e6c6      	b.n	8e8e <hci_cmd_handle+0xea>
	switch (ocf) {
    9100:	3a01      	subs	r2, #1
    9102:	2a4d      	cmp	r2, #77	; 0x4d
    9104:	f63f ae88 	bhi.w	8e18 <hci_cmd_handle+0x74>
    9108:	a301      	add	r3, pc, #4	; (adr r3, 9110 <hci_cmd_handle+0x36c>)
    910a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    910e:	bf00      	nop
    9110:	00009249 	.word	0x00009249
    9114:	00009253 	.word	0x00009253
    9118:	0000926b 	.word	0x0000926b
    911c:	00008e19 	.word	0x00008e19
    9120:	0000928f 	.word	0x0000928f
    9124:	00008e19 	.word	0x00008e19
    9128:	00008e19 	.word	0x00008e19
    912c:	00008e19 	.word	0x00008e19
    9130:	00008e19 	.word	0x00008e19
    9134:	00008e19 	.word	0x00008e19
    9138:	00009333 	.word	0x00009333
    913c:	00009361 	.word	0x00009361
    9140:	00009381 	.word	0x00009381
    9144:	000093ab 	.word	0x000093ab
    9148:	0000929b 	.word	0x0000929b
    914c:	000092b1 	.word	0x000092b1
    9150:	000092c3 	.word	0x000092c3
    9154:	000092cb 	.word	0x000092cb
    9158:	0000944b 	.word	0x0000944b
    915c:	0000940b 	.word	0x0000940b
    9160:	00009427 	.word	0x00009427
    9164:	00009441 	.word	0x00009441
    9168:	000092d3 	.word	0x000092d3
    916c:	000092f9 	.word	0x000092f9
    9170:	00009413 	.word	0x00009413
    9174:	00008e19 	.word	0x00008e19
    9178:	00008e19 	.word	0x00008e19
    917c:	0000930f 	.word	0x0000930f
    9180:	00008e19 	.word	0x00008e19
    9184:	00008e19 	.word	0x00008e19
    9188:	00008e19 	.word	0x00008e19
    918c:	00009465 	.word	0x00009465
    9190:	0000948f 	.word	0x0000948f
    9194:	0000949d 	.word	0x0000949d
    9198:	000094ad 	.word	0x000094ad
    919c:	000094c5 	.word	0x000094c5
    91a0:	00008e19 	.word	0x00008e19
    91a4:	00008e19 	.word	0x00008e19
    91a8:	000095dd 	.word	0x000095dd
    91ac:	000095eb 	.word	0x000095eb
    91b0:	000095f3 	.word	0x000095f3
    91b4:	00009603 	.word	0x00009603
    91b8:	00009615 	.word	0x00009615
    91bc:	00009633 	.word	0x00009633
    91c0:	00009651 	.word	0x00009651
    91c4:	00009667 	.word	0x00009667
    91c8:	000094e1 	.word	0x000094e1
    91cc:	0000950d 	.word	0x0000950d
    91d0:	00009563 	.word	0x00009563
    91d4:	00009581 	.word	0x00009581
    91d8:	00008e19 	.word	0x00008e19
    91dc:	00008e19 	.word	0x00008e19
    91e0:	00008e19 	.word	0x00008e19
    91e4:	00008e19 	.word	0x00008e19
    91e8:	00008e19 	.word	0x00008e19
    91ec:	00008e19 	.word	0x00008e19
    91f0:	00008e19 	.word	0x00008e19
    91f4:	00008e19 	.word	0x00008e19
    91f8:	00008e19 	.word	0x00008e19
    91fc:	00008e19 	.word	0x00008e19
    9200:	00008e19 	.word	0x00008e19
    9204:	00008e19 	.word	0x00008e19
    9208:	00008e19 	.word	0x00008e19
    920c:	00008e19 	.word	0x00008e19
    9210:	00008e19 	.word	0x00008e19
    9214:	00008e19 	.word	0x00008e19
    9218:	00008e19 	.word	0x00008e19
    921c:	00008e19 	.word	0x00008e19
    9220:	00008e19 	.word	0x00008e19
    9224:	00008e19 	.word	0x00008e19
    9228:	00008e19 	.word	0x00008e19
    922c:	00008e19 	.word	0x00008e19
    9230:	00008e19 	.word	0x00008e19
    9234:	00008e19 	.word	0x00008e19
    9238:	0000967b 	.word	0x0000967b
    923c:	00008e19 	.word	0x00008e19
    9240:	00008e19 	.word	0x00008e19
    9244:	00009671 	.word	0x00009671
	le_event_mask = sys_get_le64(cmd->events);
    9248:	68a0      	ldr	r0, [r4, #8]
    924a:	f7ff fda7 	bl	8d9c <sys_get_le64>
    924e:	4baa      	ldr	r3, [pc, #680]	; (94f8 <hci_cmd_handle+0x754>)
    9250:	e64d      	b.n	8eee <hci_cmd_handle+0x14a>
	rp = cmd_complete(evt, sizeof(*rp));
    9252:	2104      	movs	r1, #4
    9254:	a807      	add	r0, sp, #28
    9256:	f7ff fbe1 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    925a:	2300      	movs	r3, #0
    925c:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    925e:	221b      	movs	r2, #27
    9260:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    9262:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    9264:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    9266:	70c3      	strb	r3, [r0, #3]
    9268:	e611      	b.n	8e8e <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    926a:	2109      	movs	r1, #9
    926c:	a807      	add	r0, sp, #28
    926e:	f7ff fbd5 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    9272:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9274:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9276:	2208      	movs	r2, #8
	rp->status = 0x00;
    9278:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    927c:	f7f8 fd10 	bl	1ca0 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    9280:	23ff      	movs	r3, #255	; 0xff
    9282:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    9284:	2341      	movs	r3, #65	; 0x41
    9286:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    9288:	2301      	movs	r3, #1
    928a:	70e3      	strb	r3, [r4, #3]
    928c:	e5ff      	b.n	8e8e <hci_cmd_handle+0xea>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    928e:	68a1      	ldr	r1, [r4, #8]
    9290:	2001      	movs	r0, #1
    9292:	f7ff f9ff 	bl	8694 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    9296:	4604      	mov	r4, r0
    9298:	e0af      	b.n	93fa <hci_cmd_handle+0x656>
	rp = cmd_complete(evt, sizeof(*rp));
    929a:	2102      	movs	r1, #2
    929c:	a807      	add	r0, sp, #28
    929e:	f7ff fbbd 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    92a2:	2300      	movs	r3, #0
    92a4:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    92a6:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    92a8:	f008 fe9c 	bl	11fe4 <ll_wl_size_get>
    92ac:	7060      	strb	r0, [r4, #1]
    92ae:	e5ee      	b.n	8e8e <hci_cmd_handle+0xea>
	ccst = cmd_complete(evt, sizeof(*ccst));
    92b0:	2101      	movs	r1, #1
    92b2:	a807      	add	r0, sp, #28
    92b4:	f7ff fbb2 	bl	8a1c <cmd_complete>
    92b8:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    92ba:	f008 fe95 	bl	11fe8 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    92be:	7020      	strb	r0, [r4, #0]
    92c0:	e5e5      	b.n	8e8e <hci_cmd_handle+0xea>
	status = ll_wl_add(&cmd->addr);
    92c2:	68a0      	ldr	r0, [r4, #8]
    92c4:	f008 ff3c 	bl	12140 <ll_wl_add>
    92c8:	e7e5      	b.n	9296 <hci_cmd_handle+0x4f2>
	status = ll_wl_remove(&cmd->addr);
    92ca:	68a0      	ldr	r0, [r4, #8]
    92cc:	f008 feac 	bl	12028 <ll_wl_remove>
    92d0:	e7e1      	b.n	9296 <hci_cmd_handle+0x4f2>
    92d2:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    92d4:	2300      	movs	r3, #0
    92d6:	aa08      	add	r2, sp, #32
    92d8:	f100 0110 	add.w	r1, r0, #16
    92dc:	f009 fbb8 	bl	12a50 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    92e0:	2111      	movs	r1, #17
    92e2:	a807      	add	r0, sp, #28
    92e4:	f7ff fb9a 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    92e8:	2300      	movs	r3, #0
    92ea:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    92ee:	2210      	movs	r2, #16
    92f0:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    92f2:	f7f8 fca9 	bl	1c48 <memcpy>
    92f6:	e5ca      	b.n	8e8e <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    92f8:	2109      	movs	r1, #9
    92fa:	a807      	add	r0, sp, #28
    92fc:	f7ff fb8e 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    9300:	2300      	movs	r3, #0
    9302:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    9306:	2108      	movs	r1, #8
    9308:	f7ff f9e4 	bl	86d4 <bt_rand>
    930c:	e5bf      	b.n	8e8e <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    930e:	2109      	movs	r1, #9
    9310:	a807      	add	r0, sp, #28
    9312:	f7ff fb83 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    9316:	4601      	mov	r1, r0
    9318:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    931a:	4602      	mov	r2, r0
	rp->status = 0x00;
    931c:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    9320:	4876      	ldr	r0, [pc, #472]	; (94fc <hci_cmd_handle+0x758>)
    9322:	f7ff fb37 	bl	8994 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    9326:	f240 203f 	movw	r0, #575	; 0x23f
    932a:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    932c:	f7ff fb32 	bl	8994 <sys_put_le32>
    9330:	e5ad      	b.n	8e8e <hci_cmd_handle+0xea>
    9332:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    9334:	7963      	ldrb	r3, [r4, #5]
    9336:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    933a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    933e:	7820      	ldrb	r0, [r4, #0]
    9340:	79a4      	ldrb	r4, [r4, #6]
    9342:	9400      	str	r4, [sp, #0]
    9344:	f008 fc02 	bl	11b4c <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    9348:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    934a:	2101      	movs	r1, #1
    934c:	a807      	add	r0, sp, #28
    934e:	f7ff fb65 	bl	8a1c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9352:	2c00      	cmp	r4, #0
    9354:	bf18      	it	ne
    9356:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    9358:	bf08      	it	eq
    935a:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    935c:	7003      	strb	r3, [r0, #0]
    935e:	e596      	b.n	8e8e <hci_cmd_handle+0xea>
    9360:	68a2      	ldr	r2, [r4, #8]
    9362:	4b67      	ldr	r3, [pc, #412]	; (9500 <hci_cmd_handle+0x75c>)
	if (cmd->enable && cmd->filter_dup) {
    9364:	7810      	ldrb	r0, [r2, #0]
    9366:	b140      	cbz	r0, 937a <hci_cmd_handle+0x5d6>
    9368:	7852      	ldrb	r2, [r2, #1]
    936a:	b132      	cbz	r2, 937a <hci_cmd_handle+0x5d6>
		dup_count = 0;
    936c:	2200      	movs	r2, #0
    936e:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    9370:	4b64      	ldr	r3, [pc, #400]	; (9504 <hci_cmd_handle+0x760>)
		dup_count = -1;
    9372:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    9374:	f008 fc0a 	bl	11b8c <ll_scan_enable>
    9378:	e7e6      	b.n	9348 <hci_cmd_handle+0x5a4>
		dup_count = -1;
    937a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    937e:	e7f8      	b.n	9372 <hci_cmd_handle+0x5ce>
    9380:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    9382:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    9386:	7963      	ldrb	r3, [r4, #5]
    9388:	7922      	ldrb	r2, [r4, #4]
    938a:	8861      	ldrh	r1, [r4, #2]
    938c:	8820      	ldrh	r0, [r4, #0]
    938e:	9504      	str	r5, [sp, #16]
    9390:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    9394:	9503      	str	r5, [sp, #12]
    9396:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    939a:	9502      	str	r5, [sp, #8]
    939c:	7b25      	ldrb	r5, [r4, #12]
    939e:	9501      	str	r5, [sp, #4]
    93a0:	3406      	adds	r4, #6
    93a2:	9400      	str	r4, [sp, #0]
    93a4:	f008 fc2c 	bl	11c00 <ll_create_connection>
    93a8:	e56a      	b.n	8e80 <hci_cmd_handle+0xdc>
	status = ll_connect_disable();
    93aa:	f008 fa31 	bl	11810 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    93ae:	4606      	mov	r6, r0
    93b0:	bb48      	cbnz	r0, 9406 <hci_cmd_handle+0x662>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    93b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    93b6:	2001      	movs	r0, #1
    93b8:	f7fa fffa 	bl	43b0 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    93bc:	4a52      	ldr	r2, [pc, #328]	; (9508 <hci_cmd_handle+0x764>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    93be:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    93c0:	e9d2 4500 	ldrd	r4, r5, [r2]
    93c4:	2400      	movs	r4, #0
    93c6:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    93ca:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    93ce:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    93d0:	d004      	beq.n	93dc <hci_cmd_handle+0x638>
    93d2:	4632      	mov	r2, r6
    93d4:	4631      	mov	r1, r6
    93d6:	2002      	movs	r0, #2
    93d8:	f7ff fb90 	bl	8afc <le_conn_complete.part.39>
		if ((*evt)->len) {
    93dc:	9807      	ldr	r0, [sp, #28]
    93de:	8984      	ldrh	r4, [r0, #12]
    93e0:	b14c      	cbz	r4, 93f6 <hci_cmd_handle+0x652>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    93e2:	2101      	movs	r1, #1
    93e4:	a808      	add	r0, sp, #32
    93e6:	f7ff fb19 	bl	8a1c <cmd_complete>
			ccst->status = cmd_status;
    93ea:	2300      	movs	r3, #0
    93ec:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    93ee:	9808      	ldr	r0, [sp, #32]
    93f0:	f7fa fd94 	bl	3f1c <bt_recv_prio>
    93f4:	e54b      	b.n	8e8e <hci_cmd_handle+0xea>
			net_buf_unref(*evt);
    93f6:	f00a f96f 	bl	136d8 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    93fa:	2101      	movs	r1, #1
    93fc:	a807      	add	r0, sp, #28
    93fe:	f7ff fb0d 	bl	8a1c <cmd_complete>
	ccst->status = status;
    9402:	7004      	strb	r4, [r0, #0]
    9404:	e543      	b.n	8e8e <hci_cmd_handle+0xea>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    9406:	240c      	movs	r4, #12
    9408:	e7f7      	b.n	93fa <hci_cmd_handle+0x656>
	status = ll_chm_update(&cmd->ch_map[0]);
    940a:	68a0      	ldr	r0, [r4, #8]
    940c:	f007 fdcc 	bl	10fa8 <ll_chm_update>
    9410:	e79a      	b.n	9348 <hci_cmd_handle+0x5a4>
    9412:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    9414:	f100 030c 	add.w	r3, r0, #12
    9418:	f100 020a 	add.w	r2, r0, #10
    941c:	1c81      	adds	r1, r0, #2
    941e:	8800      	ldrh	r0, [r0, #0]
    9420:	f008 f87c 	bl	1151c <ll_enc_req_send>
    9424:	e52c      	b.n	8e80 <hci_cmd_handle+0xdc>
	handle = sys_le16_to_cpu(cmd->handle);
    9426:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    9428:	2108      	movs	r1, #8
    942a:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    942c:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    942e:	f7ff faf5 	bl	8a1c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    9432:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    9434:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    9436:	1cc1      	adds	r1, r0, #3
    9438:	4630      	mov	r0, r6
    943a:	f007 fdf7 	bl	1102c <ll_chm_get>
    943e:	e573      	b.n	8f28 <hci_cmd_handle+0x184>
	handle = sys_le16_to_cpu(cmd->handle);
    9440:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    9442:	8818      	ldrh	r0, [r3, #0]
    9444:	f007 fe07 	bl	11056 <ll_feature_req_send>
    9448:	e51a      	b.n	8e80 <hci_cmd_handle+0xdc>
    944a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    944c:	8911      	ldrh	r1, [r2, #8]
    944e:	8893      	ldrh	r3, [r2, #4]
    9450:	8810      	ldrh	r0, [r2, #0]
    9452:	9101      	str	r1, [sp, #4]
    9454:	88d2      	ldrh	r2, [r2, #6]
    9456:	9200      	str	r2, [sp, #0]
    9458:	2200      	movs	r2, #0
    945a:	4611      	mov	r1, r2
    945c:	f007 fd2c 	bl	10eb8 <ll_conn_update>
	*evt = cmd_status(status);
    9460:	b2c0      	uxtb	r0, r0
    9462:	e511      	b.n	8e88 <hci_cmd_handle+0xe4>
    9464:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    9466:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    9468:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    946a:	8893      	ldrh	r3, [r2, #4]
    946c:	9101      	str	r1, [sp, #4]
    946e:	88d2      	ldrh	r2, [r2, #6]
    9470:	9200      	str	r2, [sp, #0]
    9472:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    9474:	2102      	movs	r1, #2
    9476:	b2a0      	uxth	r0, r4
    9478:	f007 fd1e 	bl	10eb8 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    947c:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    947e:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    9480:	a807      	add	r0, sp, #28
    9482:	f7ff facb 	bl	8a1c <cmd_complete>
	rp->status = status;
    9486:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    9488:	f8a0 4001 	strh.w	r4, [r0, #1]
    948c:	e4ff      	b.n	8e8e <hci_cmd_handle+0xea>
    948e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    9490:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    9492:	789a      	ldrb	r2, [r3, #2]
    9494:	2300      	movs	r3, #0
    9496:	9301      	str	r3, [sp, #4]
    9498:	9300      	str	r3, [sp, #0]
    949a:	e7eb      	b.n	9474 <hci_cmd_handle+0x6d0>
    949c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    949e:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    94a0:	889a      	ldrh	r2, [r3, #4]
    94a2:	8859      	ldrh	r1, [r3, #2]
    94a4:	b2a0      	uxth	r0, r4
    94a6:	f007 fe46 	bl	11136 <ll_length_req_send>
    94aa:	e562      	b.n	8f72 <hci_cmd_handle+0x1ce>
	rp = cmd_complete(evt, sizeof(*rp));
    94ac:	2105      	movs	r1, #5
    94ae:	a807      	add	r0, sp, #28
    94b0:	f7ff fab4 	bl	8a1c <cmd_complete>
    94b4:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    94b6:	1cc1      	adds	r1, r0, #3
    94b8:	3001      	adds	r0, #1
    94ba:	f007 fe5f 	bl	1117c <ll_length_default_get>
	rp->status = 0x00;
    94be:	2300      	movs	r3, #0
    94c0:	7023      	strb	r3, [r4, #0]
    94c2:	e4e4      	b.n	8e8e <hci_cmd_handle+0xea>
    94c4:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    94c6:	8859      	ldrh	r1, [r3, #2]
    94c8:	8818      	ldrh	r0, [r3, #0]
    94ca:	f007 fe61 	bl	11190 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    94ce:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    94d0:	2101      	movs	r1, #1
    94d2:	a807      	add	r0, sp, #28
    94d4:	f7ff faa2 	bl	8a1c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    94d8:	2c00      	cmp	r4, #0
    94da:	bf18      	it	ne
    94dc:	231e      	movne	r3, #30
    94de:	e73b      	b.n	9358 <hci_cmd_handle+0x5b4>
	rp = cmd_complete(evt, sizeof(*rp));
    94e0:	2109      	movs	r1, #9
    94e2:	a807      	add	r0, sp, #28
    94e4:	f7ff fa9a 	bl	8a1c <cmd_complete>
    94e8:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    94ea:	1dc3      	adds	r3, r0, #7
    94ec:	1d42      	adds	r2, r0, #5
    94ee:	1cc1      	adds	r1, r0, #3
    94f0:	3001      	adds	r0, #1
    94f2:	f007 fe57 	bl	111a4 <ll_length_max_get>
    94f6:	e7e2      	b.n	94be <hci_cmd_handle+0x71a>
    94f8:	20003d30 	.word	0x20003d30
    94fc:	130f3370 	.word	0x130f3370
    9500:	20000830 	.word	0x20000830
    9504:	20000834 	.word	0x20000834
    9508:	20003d28 	.word	0x20003d28
	handle = sys_le16_to_cpu(cmd->handle);
    950c:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    950e:	2105      	movs	r1, #5
    9510:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    9512:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    9514:	f7ff fa82 	bl	8a1c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    9518:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    951a:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    951c:	1d02      	adds	r2, r0, #4
    951e:	1cc1      	adds	r1, r0, #3
    9520:	4630      	mov	r0, r6
    9522:	f007 fe48 	bl	111b6 <ll_phy_get>
	return __builtin_ffs(op);
    9526:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    9528:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    952c:	2800      	cmp	r0, #0
    952e:	bf14      	ite	ne
    9530:	230c      	movne	r3, #12
    9532:	2300      	moveq	r3, #0
    9534:	7023      	strb	r3, [r4, #0]
    9536:	2a00      	cmp	r2, #0
    9538:	fa92 f3a2 	rbit	r3, r2
    953c:	fab3 f383 	clz	r3, r3
    9540:	7922      	ldrb	r2, [r4, #4]
    9542:	bf08      	it	eq
    9544:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9548:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    954a:	70e3      	strb	r3, [r4, #3]
    954c:	2a00      	cmp	r2, #0
    954e:	fa92 f3a2 	rbit	r3, r2
    9552:	fab3 f383 	clz	r3, r3
    9556:	bf08      	it	eq
    9558:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    955c:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    955e:	7123      	strb	r3, [r4, #4]
    9560:	e495      	b.n	8e8e <hci_cmd_handle+0xea>
    9562:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9564:	781a      	ldrb	r2, [r3, #0]
    9566:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    9568:	bf44      	itt	mi
    956a:	2107      	movmi	r1, #7
    956c:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    956e:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    9570:	bf44      	itt	mi
    9572:	2207      	movmi	r2, #7
    9574:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    9576:	7899      	ldrb	r1, [r3, #2]
    9578:	7858      	ldrb	r0, [r3, #1]
    957a:	f007 fe31 	bl	111e0 <ll_phy_default_set>
    957e:	e7a6      	b.n	94ce <hci_cmd_handle+0x72a>
    9580:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9582:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    9584:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    9586:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    958a:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    958c:	bf44      	itt	mi
    958e:	2103      	movmi	r1, #3
    9590:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    9592:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    9594:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    9596:	bf44      	itt	mi
    9598:	2203      	movmi	r2, #3
    959a:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    959c:	074d      	lsls	r5, r1, #29
    959e:	d002      	beq.n	95a6 <hci_cmd_handle+0x802>
	    !(cmd->rx_phys & 0x07)) {
    95a0:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    95a2:	075a      	lsls	r2, r3, #29
    95a4:	d105      	bne.n	95b2 <hci_cmd_handle+0x80e>
		ccst = cmd_complete(evt, sizeof(*ccst));
    95a6:	2101      	movs	r1, #1
    95a8:	a807      	add	r0, sp, #28
    95aa:	f7ff fa37 	bl	8a1c <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    95ae:	2312      	movs	r3, #18
    95b0:	e6d4      	b.n	935c <hci_cmd_handle+0x5b8>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    95b2:	ea41 0203 	orr.w	r2, r1, r3
    95b6:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    95ba:	d005      	beq.n	95c8 <hci_cmd_handle+0x824>
		ccst = cmd_complete(evt, sizeof(*ccst));
    95bc:	2101      	movs	r1, #1
    95be:	a807      	add	r0, sp, #28
    95c0:	f7ff fa2c 	bl	8a1c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    95c4:	2311      	movs	r3, #17
    95c6:	e6c9      	b.n	935c <hci_cmd_handle+0x5b8>
	if (phy_opts & 0x03) {
    95c8:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    95cc:	bf1c      	itt	ne
    95ce:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    95d2:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    95d6:	f007 fe0d 	bl	111f4 <ll_phy_req_send>
    95da:	e451      	b.n	8e80 <hci_cmd_handle+0xdc>
    95dc:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    95de:	f100 0217 	add.w	r2, r0, #23
    95e2:	1dc1      	adds	r1, r0, #7
    95e4:	f008 ffc2 	bl	1256c <ll_rl_add>
    95e8:	e655      	b.n	9296 <hci_cmd_handle+0x4f2>
	status = ll_rl_remove(&cmd->peer_id_addr);
    95ea:	68a0      	ldr	r0, [r4, #8]
    95ec:	f009 f860 	bl	126b0 <ll_rl_remove>
    95f0:	e651      	b.n	9296 <hci_cmd_handle+0x4f2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    95f2:	2101      	movs	r1, #1
    95f4:	a807      	add	r0, sp, #28
    95f6:	f7ff fa11 	bl	8a1c <cmd_complete>
    95fa:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    95fc:	f008 ff9c 	bl	12538 <ll_rl_clear>
    9600:	e65d      	b.n	92be <hci_cmd_handle+0x51a>
	rp = cmd_complete(evt, sizeof(*rp));
    9602:	2102      	movs	r1, #2
    9604:	a807      	add	r0, sp, #28
    9606:	f7ff fa09 	bl	8a1c <cmd_complete>
    960a:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    960c:	f008 ff92 	bl	12534 <ll_rl_size_get>
    9610:	7060      	strb	r0, [r4, #1]
    9612:	e754      	b.n	94be <hci_cmd_handle+0x71a>
    9614:	2207      	movs	r2, #7
    9616:	68a1      	ldr	r1, [r4, #8]
    9618:	a808      	add	r0, sp, #32
    961a:	f7f8 fb15 	bl	1c48 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    961e:	2107      	movs	r1, #7
    9620:	a807      	add	r0, sp, #28
    9622:	f7ff f9fb 	bl	8a1c <cmd_complete>
    9626:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    9628:	1c41      	adds	r1, r0, #1
    962a:	a808      	add	r0, sp, #32
    962c:	f009 f8ce 	bl	127cc <ll_rl_crpa_get>
    9630:	e645      	b.n	92be <hci_cmd_handle+0x51a>
    9632:	2207      	movs	r2, #7
    9634:	68a1      	ldr	r1, [r4, #8]
    9636:	a808      	add	r0, sp, #32
    9638:	f7f8 fb06 	bl	1c48 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    963c:	2107      	movs	r1, #7
    963e:	a807      	add	r0, sp, #28
    9640:	f7ff f9ec 	bl	8a1c <cmd_complete>
    9644:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    9646:	1c41      	adds	r1, r0, #1
    9648:	a808      	add	r0, sp, #32
    964a:	f009 f8df 	bl	1280c <ll_rl_lrpa_get>
    964e:	e636      	b.n	92be <hci_cmd_handle+0x51a>
	u8_t enable = cmd->enable;
    9650:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    9652:	2101      	movs	r1, #1
    9654:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    9656:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    9658:	f7ff f9e0 	bl	8a1c <cmd_complete>
    965c:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    965e:	4628      	mov	r0, r5
    9660:	f009 f8ec 	bl	1283c <ll_rl_enable>
    9664:	e62b      	b.n	92be <hci_cmd_handle+0x51a>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    9666:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    9668:	8818      	ldrh	r0, [r3, #0]
    966a:	f009 f8f9 	bl	12860 <ll_rl_timeout_set>
    966e:	e42e      	b.n	8ece <hci_cmd_handle+0x12a>
    9670:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    9672:	79c1      	ldrb	r1, [r0, #7]
    9674:	f009 f8fc 	bl	12870 <ll_priv_mode_set>
    9678:	e60d      	b.n	9296 <hci_cmd_handle+0x4f2>
	rp = cmd_complete(evt, sizeof(*rp));
    967a:	2103      	movs	r1, #3
    967c:	a807      	add	r0, sp, #28
    967e:	f7ff f9cd 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    9682:	4601      	mov	r1, r0
    9684:	2300      	movs	r3, #0
    9686:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    968a:	3001      	adds	r0, #1
    968c:	f7ff f81e 	bl	86cc <ll_tx_pwr_get>
    9690:	f7ff bbfd 	b.w	8e8e <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    9694:	210d      	movs	r1, #13
    9696:	a807      	add	r0, sp, #28
    9698:	f7ff f9c0 	bl	8a1c <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    969c:	2202      	movs	r2, #2
    969e:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    96a0:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    96a2:	2201      	movs	r2, #1
    96a4:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    96a6:	220c      	movs	r2, #12
	rp->status = 0x00;
    96a8:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    96aa:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    96ac:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    96ae:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    96b0:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    96b2:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    96b4:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    96b6:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    96b8:	7242      	strb	r2, [r0, #9]
    96ba:	7283      	strb	r3, [r0, #10]
    96bc:	72c3      	strb	r3, [r0, #11]
    96be:	7303      	strb	r3, [r0, #12]
    96c0:	f7ff bbe5 	b.w	8e8e <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    96c4:	2141      	movs	r1, #65	; 0x41
    96c6:	a807      	add	r0, sp, #28
    96c8:	f7ff f9a8 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    96cc:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    96ce:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    96d0:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    96d2:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    96d6:	f7f8 fae3 	bl	1ca0 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    96da:	7863      	ldrb	r3, [r4, #1]
    96dc:	f063 0358 	orn	r3, r3, #88	; 0x58
    96e0:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    96e2:	78a3      	ldrb	r3, [r4, #2]
    96e4:	f043 0303 	orr.w	r3, r3, #3
    96e8:	70a3      	strb	r3, [r4, #2]
    96ea:	f7ff bbd0 	b.w	8e8e <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    96ee:	2109      	movs	r1, #9
    96f0:	a807      	add	r0, sp, #28
    96f2:	f7ff f993 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    96f6:	2100      	movs	r1, #0
    96f8:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    96fc:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    96fe:	f7f8 facf 	bl	1ca0 <memset>
    9702:	f7ff bbc4 	b.w	8e8e <hci_cmd_handle+0xea>
	const char build_info[] = HCI_VS_BUILD_INFO;
    9706:	4b5c      	ldr	r3, [pc, #368]	; (9878 <hci_cmd_handle+0xad4>)
    9708:	aa08      	add	r2, sp, #32
    970a:	f103 0628 	add.w	r6, r3, #40	; 0x28
    970e:	4615      	mov	r5, r2
    9710:	6818      	ldr	r0, [r3, #0]
    9712:	6859      	ldr	r1, [r3, #4]
    9714:	4614      	mov	r4, r2
    9716:	c403      	stmia	r4!, {r0, r1}
    9718:	3308      	adds	r3, #8
    971a:	42b3      	cmp	r3, r6
    971c:	4622      	mov	r2, r4
    971e:	d1f7      	bne.n	9710 <hci_cmd_handle+0x96c>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    9720:	2129      	movs	r1, #41	; 0x29
    9722:	a807      	add	r0, sp, #28
    9724:	f7ff f97a 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    9728:	2300      	movs	r3, #0
    972a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    972e:	2228      	movs	r2, #40	; 0x28
    9730:	4629      	mov	r1, r5
    9732:	e5de      	b.n	92f2 <hci_cmd_handle+0x54e>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    9734:	68a1      	ldr	r1, [r4, #8]
    9736:	2000      	movs	r0, #0
    9738:	f7fe ffac 	bl	8694 <ll_addr_set>
    973c:	f7ff bbc7 	b.w	8ece <hci_cmd_handle+0x12a>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9740:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9744:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    9748:	3201      	adds	r2, #1
    974a:	d106      	bne.n	975a <hci_cmd_handle+0x9b6>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    974c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9750:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9754:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9756:	4293      	cmp	r3, r2
    9758:	d020      	beq.n	979c <hci_cmd_handle+0x9f8>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    975a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    975e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9762:	07db      	lsls	r3, r3, #31
    9764:	d51a      	bpl.n	979c <hci_cmd_handle+0x9f8>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    9766:	2118      	movs	r1, #24
    9768:	a807      	add	r0, sp, #28
    976a:	f7ff f957 	bl	8a1c <cmd_complete>
		rp->status = 0x00;
    976e:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    9770:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    9772:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    9774:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    9776:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    9778:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    977c:	1ca1      	adds	r1, r4, #2
    977e:	f7ff f909 	bl	8994 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    9782:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    9786:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    9788:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    978c:	f063 033f 	orn	r3, r3, #63	; 0x3f
    9790:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    9792:	2210      	movs	r2, #16
    9794:	4631      	mov	r1, r6
    9796:	f104 0008 	add.w	r0, r4, #8
    979a:	e7b0      	b.n	96fe <hci_cmd_handle+0x95a>
	rp = cmd_complete(evt, sizeof(*rp));
    979c:	2102      	movs	r1, #2
    979e:	a807      	add	r0, sp, #28
    97a0:	f7ff f93c 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    97a4:	2300      	movs	r3, #0
    97a6:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    97a8:	7043      	strb	r3, [r0, #1]
    97aa:	f7ff bb70 	b.w	8e8e <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    97ae:	2121      	movs	r1, #33	; 0x21
    97b0:	a807      	add	r0, sp, #28
    97b2:	f7ff f933 	bl	8a1c <cmd_complete>
	rp->status = 0x00;
    97b6:	4603      	mov	r3, r0
    97b8:	2200      	movs	r2, #0
    97ba:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    97be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    97c2:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    97c4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    97c8:	3101      	adds	r1, #1
    97ca:	d04b      	beq.n	9864 <hci_cmd_handle+0xac0>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    97cc:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    97d0:	3101      	adds	r1, #1
    97d2:	d047      	beq.n	9864 <hci_cmd_handle+0xac0>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    97d4:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    97d8:	3101      	adds	r1, #1
    97da:	d043      	beq.n	9864 <hci_cmd_handle+0xac0>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    97dc:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    97e0:	3101      	adds	r1, #1
    97e2:	d03f      	beq.n	9864 <hci_cmd_handle+0xac0>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    97e4:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    97e8:	4619      	mov	r1, r3
    97ea:	f7ff f8d3 	bl	8994 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    97ee:	1d61      	adds	r1, r4, #5
    97f0:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    97f4:	f7ff f8ce 	bl	8994 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    97f8:	f104 0109 	add.w	r1, r4, #9
    97fc:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    9800:	f7ff f8c8 	bl	8994 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    9804:	f104 010d 	add.w	r1, r4, #13
    9808:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    980c:	f7ff f8c2 	bl	8994 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9814:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    9818:	3301      	adds	r3, #1
    981a:	f104 0311 	add.w	r3, r4, #17
    981e:	d027      	beq.n	9870 <hci_cmd_handle+0xacc>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    9820:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9824:	3101      	adds	r1, #1
    9826:	d023      	beq.n	9870 <hci_cmd_handle+0xacc>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9828:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    982c:	3101      	adds	r1, #1
    982e:	d01f      	beq.n	9870 <hci_cmd_handle+0xacc>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    9830:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9834:	3101      	adds	r1, #1
    9836:	d01b      	beq.n	9870 <hci_cmd_handle+0xacc>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    9838:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    983c:	4619      	mov	r1, r3
    983e:	f7ff f8a9 	bl	8994 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    9842:	f104 0115 	add.w	r1, r4, #21
    9846:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    984a:	f7ff f8a3 	bl	8994 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    984e:	f104 0119 	add.w	r1, r4, #25
    9852:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    9856:	f7ff f89d 	bl	8994 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    985a:	f104 011d 	add.w	r1, r4, #29
    985e:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    9862:	e563      	b.n	932c <hci_cmd_handle+0x588>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    9864:	2210      	movs	r2, #16
    9866:	2100      	movs	r1, #0
    9868:	4618      	mov	r0, r3
    986a:	f7f8 fa19 	bl	1ca0 <memset>
    986e:	e7cf      	b.n	9810 <hci_cmd_handle+0xa6c>
		memset(rp->er, 0x00, sizeof(rp->er));
    9870:	2210      	movs	r2, #16
    9872:	2100      	movs	r1, #0
    9874:	4618      	mov	r0, r3
    9876:	e742      	b.n	96fe <hci_cmd_handle+0x95a>
    9878:	00017bbf 	.word	0x00017bbf

0000987c <hci_acl_handle>:
{
    987c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    9880:	2300      	movs	r3, #0
    9882:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    9884:	8983      	ldrh	r3, [r0, #12]
    9886:	2b03      	cmp	r3, #3
{
    9888:	4606      	mov	r6, r0
    988a:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    988c:	d80e      	bhi.n	98ac <hci_acl_handle+0x30>
		BT_ERR("No HCI ACL header");
    988e:	4b3d      	ldr	r3, [pc, #244]	; (9984 <hci_acl_handle+0x108>)
    9890:	9301      	str	r3, [sp, #4]
    9892:	9300      	str	r3, [sp, #0]
    9894:	4b3c      	ldr	r3, [pc, #240]	; (9988 <hci_acl_handle+0x10c>)
    9896:	4a3d      	ldr	r2, [pc, #244]	; (998c <hci_acl_handle+0x110>)
    9898:	681c      	ldr	r4, [r3, #0]
    989a:	493d      	ldr	r1, [pc, #244]	; (9990 <hci_acl_handle+0x114>)
    989c:	4b3d      	ldr	r3, [pc, #244]	; (9994 <hci_acl_handle+0x118>)
    989e:	483e      	ldr	r0, [pc, #248]	; (9998 <hci_acl_handle+0x11c>)
		BT_ERR("Invalid HCI ACL packet length");
    98a0:	47a0      	blx	r4
		return -EINVAL;
    98a2:	f06f 0015 	mvn.w	r0, #21
}
    98a6:	b003      	add	sp, #12
    98a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    98ac:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    98b0:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    98b2:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    98b4:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    98b6:	f009 ff60 	bl	1377a <net_buf_simple_pull>
	if (buf->len < len) {
    98ba:	89b3      	ldrh	r3, [r6, #12]
    98bc:	42bb      	cmp	r3, r7
    98be:	d209      	bcs.n	98d4 <hci_acl_handle+0x58>
		BT_ERR("Invalid HCI ACL packet length");
    98c0:	4b30      	ldr	r3, [pc, #192]	; (9984 <hci_acl_handle+0x108>)
    98c2:	9301      	str	r3, [sp, #4]
    98c4:	9300      	str	r3, [sp, #0]
    98c6:	4b30      	ldr	r3, [pc, #192]	; (9988 <hci_acl_handle+0x10c>)
    98c8:	4a30      	ldr	r2, [pc, #192]	; (998c <hci_acl_handle+0x110>)
    98ca:	681c      	ldr	r4, [r3, #0]
    98cc:	4930      	ldr	r1, [pc, #192]	; (9990 <hci_acl_handle+0x114>)
    98ce:	4b31      	ldr	r3, [pc, #196]	; (9994 <hci_acl_handle+0x118>)
    98d0:	4832      	ldr	r0, [pc, #200]	; (999c <hci_acl_handle+0x120>)
    98d2:	e7e5      	b.n	98a0 <hci_acl_handle+0x24>
	node_tx = ll_tx_mem_acquire();
    98d4:	f007 fd9a 	bl	1140c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    98d8:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    98dc:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    98de:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    98e2:	bb38      	cbnz	r0, 9934 <hci_acl_handle+0xb8>
		BT_ERR("Tx Buffer Overflow");
    98e4:	4b27      	ldr	r3, [pc, #156]	; (9984 <hci_acl_handle+0x108>)
    98e6:	9301      	str	r3, [sp, #4]
    98e8:	9300      	str	r3, [sp, #0]
    98ea:	4b27      	ldr	r3, [pc, #156]	; (9988 <hci_acl_handle+0x10c>)
    98ec:	4a27      	ldr	r2, [pc, #156]	; (998c <hci_acl_handle+0x110>)
    98ee:	681c      	ldr	r4, [r3, #0]
    98f0:	4927      	ldr	r1, [pc, #156]	; (9990 <hci_acl_handle+0x114>)
    98f2:	4b28      	ldr	r3, [pc, #160]	; (9994 <hci_acl_handle+0x118>)
    98f4:	482a      	ldr	r0, [pc, #168]	; (99a0 <hci_acl_handle+0x124>)
    98f6:	47a0      	blx	r4
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    98f8:	4b2a      	ldr	r3, [pc, #168]	; (99a4 <hci_acl_handle+0x128>)
    98fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    98fe:	2300      	movs	r3, #0
    9900:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    9904:	4313      	orrs	r3, r2
    9906:	d012      	beq.n	992e <hci_acl_handle+0xb2>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9908:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    990c:	2001      	movs	r0, #1
    990e:	f7fa fd4f 	bl	43b0 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    9912:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9914:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    9918:	211a      	movs	r1, #26
    991a:	f7ff f844 	bl	89a6 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    991e:	f8d8 0000 	ldr.w	r0, [r8]
    9922:	2101      	movs	r1, #1
    9924:	3008      	adds	r0, #8
    9926:	f009 ff09 	bl	1373c <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    992a:	2301      	movs	r3, #1
    992c:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    992e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9932:	e7b8      	b.n	98a6 <hci_acl_handle+0x2a>
    9934:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    9936:	f1b9 0f00 	cmp.w	r9, #0
    993a:	d002      	beq.n	9942 <hci_acl_handle+0xc6>
    993c:	f1b9 0f02 	cmp.w	r9, #2
    9940:	d11d      	bne.n	997e <hci_acl_handle+0x102>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    9942:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9944:	f362 0301 	bfi	r3, r2, #0, #2
    9948:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    994a:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    994c:	68b1      	ldr	r1, [r6, #8]
    994e:	463a      	mov	r2, r7
    9950:	1de0      	adds	r0, r4, #7
    9952:	f7f8 f979 	bl	1c48 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    9956:	4621      	mov	r1, r4
    9958:	4628      	mov	r0, r5
    995a:	f007 fd63 	bl	11424 <ll_tx_mem_enqueue>
    995e:	2800      	cmp	r0, #0
    9960:	d0a1      	beq.n	98a6 <hci_acl_handle+0x2a>
		BT_ERR("Invalid Tx Enqueue");
    9962:	4b08      	ldr	r3, [pc, #32]	; (9984 <hci_acl_handle+0x108>)
    9964:	9301      	str	r3, [sp, #4]
    9966:	9300      	str	r3, [sp, #0]
    9968:	4b07      	ldr	r3, [pc, #28]	; (9988 <hci_acl_handle+0x10c>)
    996a:	4a08      	ldr	r2, [pc, #32]	; (998c <hci_acl_handle+0x110>)
    996c:	681d      	ldr	r5, [r3, #0]
    996e:	4908      	ldr	r1, [pc, #32]	; (9990 <hci_acl_handle+0x114>)
    9970:	4b08      	ldr	r3, [pc, #32]	; (9994 <hci_acl_handle+0x118>)
    9972:	480d      	ldr	r0, [pc, #52]	; (99a8 <hci_acl_handle+0x12c>)
    9974:	47a8      	blx	r5
		ll_tx_mem_release(node_tx);
    9976:	4620      	mov	r0, r4
    9978:	f007 fd4e 	bl	11418 <ll_tx_mem_release>
    997c:	e791      	b.n	98a2 <hci_acl_handle+0x26>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    997e:	2201      	movs	r2, #1
    9980:	e7e0      	b.n	9944 <hci_acl_handle+0xc8>
    9982:	bf00      	nop
    9984:	00015359 	.word	0x00015359
    9988:	20003a5c 	.word	0x20003a5c
    998c:	00016754 	.word	0x00016754
    9990:	0001679c 	.word	0x0001679c
    9994:	00017a37 	.word	0x00017a37
    9998:	00017ad5 	.word	0x00017ad5
    999c:	00017af7 	.word	0x00017af7
    99a0:	00017b25 	.word	0x00017b25
    99a4:	20003d28 	.word	0x20003d28
    99a8:	00017b48 	.word	0x00017b48

000099ac <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    99ac:	7a03      	ldrb	r3, [r0, #8]
    99ae:	f003 0303 	and.w	r3, r3, #3
    99b2:	3b01      	subs	r3, #1
    99b4:	2b01      	cmp	r3, #1
{
    99b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    99b8:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    99ba:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    99bc:	d81c      	bhi.n	99f8 <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    99be:	f101 0608 	add.w	r6, r1, #8
    99c2:	4630      	mov	r0, r6
    99c4:	2104      	movs	r1, #4
    99c6:	f009 feb9 	bl	1373c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    99ca:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    99cc:	7a61      	ldrb	r1, [r4, #9]
    99ce:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    99d0:	f003 0303 	and.w	r3, r3, #3
    99d4:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    99d6:	bf0c      	ite	eq
    99d8:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    99dc:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    99e0:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    99e2:	4630      	mov	r0, r6
    99e4:	f009 feaa 	bl	1373c <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    99e8:	7a62      	ldrb	r2, [r4, #9]
    99ea:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    99ee:	b002      	add	sp, #8
    99f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    99f4:	f7f8 b928 	b.w	1c48 <memcpy>
		LL_ASSERT(0);
    99f8:	4b07      	ldr	r3, [pc, #28]	; (9a18 <hci_acl_encode+0x6c>)
    99fa:	9301      	str	r3, [sp, #4]
    99fc:	9300      	str	r3, [sp, #0]
    99fe:	4b07      	ldr	r3, [pc, #28]	; (9a1c <hci_acl_encode+0x70>)
    9a00:	4a07      	ldr	r2, [pc, #28]	; (9a20 <hci_acl_encode+0x74>)
    9a02:	681c      	ldr	r4, [r3, #0]
    9a04:	4907      	ldr	r1, [pc, #28]	; (9a24 <hci_acl_encode+0x78>)
    9a06:	4b08      	ldr	r3, [pc, #32]	; (9a28 <hci_acl_encode+0x7c>)
    9a08:	4808      	ldr	r0, [pc, #32]	; (9a2c <hci_acl_encode+0x80>)
    9a0a:	47a0      	blx	r4
    9a0c:	4040      	eors	r0, r0
    9a0e:	f380 8811 	msr	BASEPRI, r0
    9a12:	f04f 0004 	mov.w	r0, #4
    9a16:	df02      	svc	2
    9a18:	00015359 	.word	0x00015359
    9a1c:	20003a5c 	.word	0x20003a5c
    9a20:	00016754 	.word	0x00016754
    9a24:	0001679c 	.word	0x0001679c
    9a28:	00017ac6 	.word	0x00017ac6
    9a2c:	000166c8 	.word	0x000166c8

00009a30 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    9a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9a34:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    9a36:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9a38:	2b01      	cmp	r3, #1
{
    9a3a:	b093      	sub	sp, #76	; 0x4c
    9a3c:	4604      	mov	r4, r0
    9a3e:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    9a40:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9a44:	f000 82ad 	beq.w	9fa2 <hci_evt_encode+0x572>
	switch (node_rx->hdr.type) {
    9a48:	3b02      	subs	r3, #2
    9a4a:	2b0a      	cmp	r3, #10
    9a4c:	f200 829f 	bhi.w	9f8e <hci_evt_encode+0x55e>
    9a50:	e8df f013 	tbh	[pc, r3, lsl #1]
    9a54:	0135000b 	.word	0x0135000b
    9a58:	013d013b 	.word	0x013d013b
    9a5c:	01be0185 	.word	0x01be0185
    9a60:	020101dc 	.word	0x020101dc
    9a64:	022e0219 	.word	0x022e0219
    9a68:	0249      	.short	0x0249
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9a6a:	2301      	movs	r3, #1
    9a6c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    9a70:	2303      	movs	r3, #3
    9a72:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    9a76:	23ff      	movs	r3, #255	; 0xff
    9a78:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    9a7c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    9a80:	2302      	movs	r3, #2
    9a82:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9a86:	7a43      	ldrb	r3, [r0, #9]
    9a88:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9a8a:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9a8c:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    9a90:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9a92:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    9a96:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    9a98:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9a9a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (adv->tx_addr) {
    9a9e:	d505      	bpl.n	9aac <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    9aa0:	f104 030a 	add.w	r3, r4, #10
    9aa4:	464a      	mov	r2, r9
    9aa6:	4608      	mov	r0, r1
    9aa8:	f008 fe6e 	bl	12788 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    9aac:	4bb9      	ldr	r3, [pc, #740]	; (9d94 <hci_evt_encode+0x364>)
    9aae:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ab2:	2200      	movs	r2, #0
    9ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9ab8:	4313      	orrs	r3, r2
    9aba:	f000 80ba 	beq.w	9c32 <hci_evt_encode+0x202>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9abe:	7a63      	ldrb	r3, [r4, #9]
    9ac0:	4423      	add	r3, r4
    9ac2:	f893 a00c 	ldrb.w	sl, [r3, #12]
    9ac6:	4bb4      	ldr	r3, [pc, #720]	; (9d98 <hci_evt_encode+0x368>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    9ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9acc:	f1ba 0f00 	cmp.w	sl, #0
    9ad0:	d13d      	bne.n	9b4e <hci_evt_encode+0x11e>
    9ad2:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    9ad6:	2300      	movs	r3, #0
    9ad8:	4313      	orrs	r3, r2
    9ada:	f000 80aa 	beq.w	9c32 <hci_evt_encode+0x202>
	if (dup_count >= 0) {
    9ade:	4baf      	ldr	r3, [pc, #700]	; (9d9c <hci_evt_encode+0x36c>)
    9ae0:	681a      	ldr	r2, [r3, #0]
    9ae2:	2a00      	cmp	r2, #0
    9ae4:	4698      	mov	r8, r3
    9ae6:	db54      	blt.n	9b92 <hci_evt_encode+0x162>
    9ae8:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 9dcc <hci_evt_encode+0x39c>
    9aec:	2600      	movs	r6, #0
    9aee:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    9af2:	f8d8 2000 	ldr.w	r2, [r8]
    9af6:	4296      	cmp	r6, r2
    9af8:	db2c      	blt.n	9b54 <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    9afa:	4ea9      	ldr	r6, [pc, #676]	; (9da0 <hci_evt_encode+0x370>)
    9afc:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 9da4 <hci_evt_encode+0x374>
    9b00:	6830      	ldr	r0, [r6, #0]
    9b02:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    9b06:	4619      	mov	r1, r3
    9b08:	2206      	movs	r2, #6
    9b0a:	3002      	adds	r0, #2
    9b0c:	f7f8 f89c 	bl	1c48 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    9b10:	6832      	ldr	r2, [r6, #0]
    9b12:	7a23      	ldrb	r3, [r4, #8]
    9b14:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    9b18:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9b1c:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    9b1e:	7a23      	ldrb	r3, [r4, #8]
    9b20:	f003 010f 	and.w	r1, r3, #15
    9b24:	2301      	movs	r3, #1
    9b26:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9b28:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    9b2c:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9b30:	290f      	cmp	r1, #15
			dup_count++;
    9b32:	bfd5      	itete	le
    9b34:	3101      	addle	r1, #1
			dup_curr++;
    9b36:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    9b38:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    9b3a:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9b3c:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    9b3e:	bfd8      	it	le
    9b40:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9b44:	2a10      	cmp	r2, #16
    9b46:	d124      	bne.n	9b92 <hci_evt_encode+0x162>
			dup_curr = 0;
    9b48:	2200      	movs	r2, #0
    9b4a:	6032      	str	r2, [r6, #0]
    9b4c:	e021      	b.n	9b92 <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    9b4e:	f002 020b 	and.w	r2, r2, #11
    9b52:	e7c0      	b.n	9ad6 <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    9b54:	4618      	mov	r0, r3
    9b56:	2206      	movs	r2, #6
    9b58:	4659      	mov	r1, fp
    9b5a:	9307      	str	r3, [sp, #28]
    9b5c:	f7f8 f85f 	bl	1c1e <memcmp>
    9b60:	9b07      	ldr	r3, [sp, #28]
    9b62:	bb00      	cbnz	r0, 9ba6 <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    9b64:	7a21      	ldrb	r1, [r4, #8]
    9b66:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    9b6a:	460a      	mov	r2, r1
    9b6c:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    9b70:	4281      	cmp	r1, r0
    9b72:	d118      	bne.n	9ba6 <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    9b74:	488b      	ldr	r0, [pc, #556]	; (9da4 <hci_evt_encode+0x374>)
    9b76:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    9b7a:	f002 020f 	and.w	r2, r2, #15
    9b7e:	fa23 f102 	lsr.w	r1, r3, r2
    9b82:	07c9      	lsls	r1, r1, #31
    9b84:	d455      	bmi.n	9c32 <hci_evt_encode+0x202>
				dup_filter[i].mask |= BIT(adv->type);
    9b86:	2101      	movs	r1, #1
    9b88:	fa01 f202 	lsl.w	r2, r1, r2
    9b8c:	4313      	orrs	r3, r2
    9b8e:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    9b92:	f894 b008 	ldrb.w	fp, [r4, #8]
    9b96:	7a63      	ldrb	r3, [r4, #9]
    9b98:	f00b 0b0f 	and.w	fp, fp, #15
    9b9c:	f1bb 0f01 	cmp.w	fp, #1
    9ba0:	d105      	bne.n	9bae <hci_evt_encode+0x17e>
		data_len = 0;
    9ba2:	2600      	movs	r6, #0
    9ba4:	e005      	b.n	9bb2 <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    9ba6:	3601      	adds	r6, #1
    9ba8:	f10b 0b08 	add.w	fp, fp, #8
    9bac:	e7a1      	b.n	9af2 <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    9bae:	1f9e      	subs	r6, r3, #6
    9bb0:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9bb2:	4423      	add	r3, r4
    9bb4:	f893 800a 	ldrb.w	r8, [r3, #10]
    9bb8:	f1c8 0800 	rsb	r8, r8, #0
    9bbc:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    9bc0:	f1ba 0f00 	cmp.w	sl, #0
    9bc4:	d042      	beq.n	9c4c <hci_evt_encode+0x21c>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    9bc6:	f1bb 0f01 	cmp.w	fp, #1
    9bca:	d00f      	beq.n	9bec <hci_evt_encode+0x1bc>
    9bcc:	4b76      	ldr	r3, [pc, #472]	; (9da8 <hci_evt_encode+0x378>)
    9bce:	9301      	str	r3, [sp, #4]
    9bd0:	9300      	str	r3, [sp, #0]
    9bd2:	4b76      	ldr	r3, [pc, #472]	; (9dac <hci_evt_encode+0x37c>)
    9bd4:	4a76      	ldr	r2, [pc, #472]	; (9db0 <hci_evt_encode+0x380>)
    9bd6:	681c      	ldr	r4, [r3, #0]
    9bd8:	4976      	ldr	r1, [pc, #472]	; (9db4 <hci_evt_encode+0x384>)
    9bda:	4b77      	ldr	r3, [pc, #476]	; (9db8 <hci_evt_encode+0x388>)
    9bdc:	4877      	ldr	r0, [pc, #476]	; (9dbc <hci_evt_encode+0x38c>)
		LL_ASSERT(0);
    9bde:	47a0      	blx	r4
    9be0:	4040      	eors	r0, r0
    9be2:	f380 8811 	msr	BASEPRI, r0
    9be6:	f04f 0004 	mov.w	r0, #4
    9bea:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    9bec:	2211      	movs	r2, #17
    9bee:	210b      	movs	r1, #11
    9bf0:	4628      	mov	r0, r5
    9bf2:	f7fe fefd 	bl	89f0 <meta_evt>
		drp->num_reports = 1;
    9bf6:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    9bfa:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    9bfe:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    9c00:	f008 fc98 	bl	12534 <ll_rl_size_get>
    9c04:	4581      	cmp	r9, r0
    9c06:	f105 0003 	add.w	r0, r5, #3
    9c0a:	d215      	bcs.n	9c38 <hci_evt_encode+0x208>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    9c0c:	4602      	mov	r2, r0
    9c0e:	1ca9      	adds	r1, r5, #2
    9c10:	4648      	mov	r0, r9
    9c12:	f008 fb23 	bl	1225c <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    9c16:	78ab      	ldrb	r3, [r5, #2]
    9c18:	3302      	adds	r3, #2
    9c1a:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    9c1c:	2301      	movs	r3, #1
    9c1e:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    9c20:	2206      	movs	r2, #6
    9c22:	f107 0108 	add.w	r1, r7, #8
    9c26:	f105 000a 	add.w	r0, r5, #10
    9c2a:	f7f8 f80d 	bl	1c48 <memcpy>
		dir_info->rssi = rssi;
    9c2e:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    9c32:	b013      	add	sp, #76	; 0x4c
    9c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    9c38:	7a23      	ldrb	r3, [r4, #8]
    9c3a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9c3e:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    9c40:	2206      	movs	r2, #6
    9c42:	f104 010a 	add.w	r1, r4, #10
    9c46:	f7f7 ffff 	bl	1c48 <memcpy>
    9c4a:	e7e7      	b.n	9c1c <hci_evt_encode+0x1ec>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    9c4c:	f106 020b 	add.w	r2, r6, #11
    9c50:	b2d2      	uxtb	r2, r2
    9c52:	2102      	movs	r1, #2
    9c54:	4628      	mov	r0, r5
    9c56:	f7fe fecb 	bl	89f0 <meta_evt>
	sep->num_reports = 1;
    9c5a:	2301      	movs	r3, #1
    9c5c:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    9c5e:	7a23      	ldrb	r3, [r4, #8]
    9c60:	aa12      	add	r2, sp, #72	; 0x48
    9c62:	f003 030f 	and.w	r3, r3, #15
    9c66:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    9c68:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    9c6a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    9c6e:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9c70:	7a63      	ldrb	r3, [r4, #9]
    9c72:	4423      	add	r3, r4
    9c74:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    9c78:	f008 fc5c 	bl	12534 <ll_rl_size_get>
    9c7c:	4581      	cmp	r9, r0
    9c7e:	f105 0003 	add.w	r0, r5, #3
    9c82:	d212      	bcs.n	9caa <hci_evt_encode+0x27a>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    9c84:	4602      	mov	r2, r0
    9c86:	1ca9      	adds	r1, r5, #2
    9c88:	4648      	mov	r0, r9
    9c8a:	f008 fae7 	bl	1225c <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    9c8e:	78ab      	ldrb	r3, [r5, #2]
    9c90:	3302      	adds	r3, #2
    9c92:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    9c94:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    9c96:	350a      	adds	r5, #10
    9c98:	4632      	mov	r2, r6
    9c9a:	f107 0108 	add.w	r1, r7, #8
    9c9e:	4628      	mov	r0, r5
    9ca0:	f7f7 ffd2 	bl	1c48 <memcpy>
	*prssi = rssi;
    9ca4:	f805 8006 	strb.w	r8, [r5, r6]
    9ca8:	e7c3      	b.n	9c32 <hci_evt_encode+0x202>
		adv_info->addr.type = adv->tx_addr;
    9caa:	7a23      	ldrb	r3, [r4, #8]
    9cac:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9cb0:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    9cb2:	2206      	movs	r2, #6
    9cb4:	f104 010a 	add.w	r1, r4, #10
    9cb8:	f7f7 ffc6 	bl	1c48 <memcpy>
    9cbc:	e7ea      	b.n	9c94 <hci_evt_encode+0x264>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    9cbe:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    9cc0:	4621      	mov	r1, r4
    9cc2:	4638      	mov	r0, r7
    9cc4:	f7fe ffec 	bl	8ca0 <le_adv_ext_report.isra.66>
    9cc8:	e7b3      	b.n	9c32 <hci_evt_encode+0x202>
    9cca:	2204      	movs	r2, #4
    9ccc:	e7f8      	b.n	9cc0 <hci_evt_encode+0x290>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9cce:	4b31      	ldr	r3, [pc, #196]	; (9d94 <hci_evt_encode+0x364>)
    9cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
    9cd4:	2200      	movs	r2, #0
    9cd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9cda:	4313      	orrs	r3, r2
    9cdc:	f100 060a 	add.w	r6, r0, #10
    9ce0:	d007      	beq.n	9cf2 <hci_evt_encode+0x2c2>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    9ce2:	4b2d      	ldr	r3, [pc, #180]	; (9d98 <hci_evt_encode+0x368>)
    9ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ce8:	2300      	movs	r3, #0
    9cea:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9cee:	4313      	orrs	r3, r2
    9cf0:	d124      	bne.n	9d3c <hci_evt_encode+0x30c>
		addr.type = adv->tx_addr;
    9cf2:	7a23      	ldrb	r3, [r4, #8]
    9cf4:	ad12      	add	r5, sp, #72	; 0x48
    9cf6:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    9cfa:	2206      	movs	r2, #6
    9cfc:	4631      	mov	r1, r6
    9cfe:	f10d 0025 	add.w	r0, sp, #37	; 0x25
		addr.type = adv->tx_addr;
    9d02:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    9d06:	f7f7 ff9f 	bl	1c48 <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    9d0a:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9d0c:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9d0e:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9d10:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9d12:	4631      	mov	r1, r6
    9d14:	4628      	mov	r0, r5
    9d16:	f7fe ff87 	bl	8c28 <bt_addr_le_to_str.constprop.70>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9d1a:	4264      	negs	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    9d1c:	4b22      	ldr	r3, [pc, #136]	; (9da8 <hci_evt_encode+0x378>)
    9d1e:	9304      	str	r3, [sp, #16]
    9d20:	9300      	str	r3, [sp, #0]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9d22:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    9d24:	2200      	movs	r2, #0
    9d26:	4b21      	ldr	r3, [pc, #132]	; (9dac <hci_evt_encode+0x37c>)
    9d28:	9201      	str	r2, [sp, #4]
    9d2a:	9403      	str	r4, [sp, #12]
    9d2c:	9602      	str	r6, [sp, #8]
    9d2e:	681c      	ldr	r4, [r3, #0]
    9d30:	4a23      	ldr	r2, [pc, #140]	; (9dc0 <hci_evt_encode+0x390>)
    9d32:	4b24      	ldr	r3, [pc, #144]	; (9dc4 <hci_evt_encode+0x394>)
    9d34:	491f      	ldr	r1, [pc, #124]	; (9db4 <hci_evt_encode+0x384>)
    9d36:	4824      	ldr	r0, [pc, #144]	; (9dc8 <hci_evt_encode+0x398>)
    9d38:	47a0      	blx	r4
    9d3a:	e77a      	b.n	9c32 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    9d3c:	2208      	movs	r2, #8
    9d3e:	2113      	movs	r1, #19
    9d40:	4628      	mov	r0, r5
    9d42:	f7fe fe55 	bl	89f0 <meta_evt>
	sep->handle = 0;
    9d46:	2300      	movs	r3, #0
    9d48:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    9d4a:	7a23      	ldrb	r3, [r4, #8]
    9d4c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9d50:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    9d52:	2206      	movs	r2, #6
    9d54:	4631      	mov	r1, r6
    9d56:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    9d58:	f7f7 ff76 	bl	1c48 <memcpy>
    9d5c:	e769      	b.n	9c32 <hci_evt_encode+0x202>
			le_conn_complete(cc->status, cc, handle, buf);
    9d5e:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    9d60:	b93f      	cbnz	r7, 9d72 <hci_evt_encode+0x342>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    9d62:	f100 0314 	add.w	r3, r0, #20
    9d66:	f100 010e 	add.w	r1, r0, #14
    9d6a:	22ff      	movs	r2, #255	; 0xff
    9d6c:	7b40      	ldrb	r0, [r0, #13]
    9d6e:	f008 fd0b 	bl	12788 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9d72:	4b08      	ldr	r3, [pc, #32]	; (9d94 <hci_evt_encode+0x364>)
    9d74:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d78:	2200      	movs	r2, #0
    9d7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9d7e:	4313      	orrs	r3, r2
    9d80:	f43f af57 	beq.w	9c32 <hci_evt_encode+0x202>
    9d84:	462b      	mov	r3, r5
    9d86:	4632      	mov	r2, r6
    9d88:	f104 010b 	add.w	r1, r4, #11
    9d8c:	4638      	mov	r0, r7
    9d8e:	f7fe feb5 	bl	8afc <le_conn_complete.part.39>
    9d92:	e74e      	b.n	9c32 <hci_evt_encode+0x202>
    9d94:	20003d28 	.word	0x20003d28
    9d98:	20003d30 	.word	0x20003d30
    9d9c:	20000830 	.word	0x20000830
    9da0:	20000834 	.word	0x20000834
    9da4:	20000838 	.word	0x20000838
    9da8:	00015359 	.word	0x00015359
    9dac:	20003a5c 	.word	0x20003a5c
    9db0:	00016754 	.word	0x00016754
    9db4:	0001679c 	.word	0x0001679c
    9db8:	00017a46 	.word	0x00017a46
    9dbc:	00017be7 	.word	0x00017be7
    9dc0:	000167d7 	.word	0x000167d7
    9dc4:	00017a6e 	.word	0x00017a6e
    9dc8:	00017c2d 	.word	0x00017c2d
    9dcc:	2000083a 	.word	0x2000083a
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    9dd0:	4bb8      	ldr	r3, [pc, #736]	; (a0b4 <hci_evt_encode+0x684>)
    9dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
    9dd6:	2300      	movs	r3, #0
    9dd8:	f002 0210 	and.w	r2, r2, #16
    9ddc:	4313      	orrs	r3, r2
    9dde:	f43f af28 	beq.w	9c32 <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    9de2:	2204      	movs	r2, #4
    9de4:	2105      	movs	r1, #5
    9de6:	4628      	mov	r0, r5
    9de8:	f7fe fddd 	bl	89a6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9dec:	2104      	movs	r1, #4
    9dee:	f105 0008 	add.w	r0, r5, #8
    9df2:	f009 fca3 	bl	1373c <net_buf_simple_add>
	ep->status = 0x00;
    9df6:	2300      	movs	r3, #0
	conn_count--;
    9df8:	4aaf      	ldr	r2, [pc, #700]	; (a0b8 <hci_evt_encode+0x688>)
	ep->status = 0x00;
    9dfa:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9dfc:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    9e00:	7a23      	ldrb	r3, [r4, #8]
    9e02:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    9e04:	6813      	ldr	r3, [r2, #0]
    9e06:	3b01      	subs	r3, #1
    9e08:	6013      	str	r3, [r2, #0]
    9e0a:	e712      	b.n	9c32 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9e0c:	4ba9      	ldr	r3, [pc, #676]	; (a0b4 <hci_evt_encode+0x684>)
    9e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e12:	2200      	movs	r2, #0
    9e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9e18:	4313      	orrs	r3, r2
    9e1a:	f43f af0a 	beq.w	9c32 <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    9e1e:	4ba7      	ldr	r3, [pc, #668]	; (a0bc <hci_evt_encode+0x68c>)
    9e20:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e24:	2300      	movs	r3, #0
    9e26:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9e2a:	4313      	orrs	r3, r2
    9e2c:	f43f af01 	beq.w	9c32 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    9e30:	2209      	movs	r2, #9
    9e32:	2103      	movs	r1, #3
    9e34:	4628      	mov	r0, r5
    9e36:	f7fe fddb 	bl	89f0 <meta_evt>
	sep->status = radio_cu->status;
    9e3a:	7ae3      	ldrb	r3, [r4, #11]
    9e3c:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    9e3e:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    9e40:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    9e44:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    9e48:	89e3      	ldrh	r3, [r4, #14]
    9e4a:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    9e4e:	8a23      	ldrh	r3, [r4, #16]
    9e50:	f8a0 3007 	strh.w	r3, [r0, #7]
    9e54:	e6ed      	b.n	9c32 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    9e56:	4b97      	ldr	r3, [pc, #604]	; (a0b4 <hci_evt_encode+0x684>)
    9e58:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e5c:	2200      	movs	r2, #0
    9e5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    9e62:	4313      	orrs	r3, r2
    9e64:	f43f aee5 	beq.w	9c32 <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    9e68:	2203      	movs	r2, #3
    9e6a:	2130      	movs	r1, #48	; 0x30
    9e6c:	4628      	mov	r0, r5
    9e6e:	f7fe fd9a 	bl	89a6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9e72:	2103      	movs	r1, #3
    9e74:	f105 0008 	add.w	r0, r5, #8
    9e78:	f009 fc60 	bl	1373c <net_buf_simple_add>
	ep->status = 0x00;
    9e7c:	2300      	movs	r3, #0
    9e7e:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9e80:	f8a0 6001 	strh.w	r6, [r0, #1]
    9e84:	e6d5      	b.n	9c32 <hci_evt_encode+0x202>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    9e86:	4b8e      	ldr	r3, [pc, #568]	; (a0c0 <hci_evt_encode+0x690>)
    9e88:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e8c:	2300      	movs	r3, #0
    9e8e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    9e92:	4313      	orrs	r3, r2
    9e94:	f43f aecd 	beq.w	9c32 <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    9e98:	2202      	movs	r2, #2
    9e9a:	2157      	movs	r1, #87	; 0x57
    9e9c:	4628      	mov	r0, r5
    9e9e:	f7fe fd82 	bl	89a6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9ea2:	2102      	movs	r1, #2
    9ea4:	f105 0008 	add.w	r0, r5, #8
    9ea8:	f009 fc48 	bl	1373c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    9eac:	8006      	strh	r6, [r0, #0]
    9eae:	e6c0      	b.n	9c32 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9eb0:	4b80      	ldr	r3, [pc, #512]	; (a0b4 <hci_evt_encode+0x684>)
    9eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    9eb6:	2200      	movs	r2, #0
    9eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9ebc:	4313      	orrs	r3, r2
    9ebe:	f43f aeb8 	beq.w	9c32 <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    9ec2:	4b7e      	ldr	r3, [pc, #504]	; (a0bc <hci_evt_encode+0x68c>)
    9ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ec8:	2300      	movs	r3, #0
    9eca:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9ece:	4313      	orrs	r3, r2
    9ed0:	f43f aeaf 	beq.w	9c32 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    9ed4:	2203      	movs	r2, #3
    9ed6:	2114      	movs	r1, #20
    9ed8:	4628      	mov	r0, r5
    9eda:	f7fe fd89 	bl	89f0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9ede:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    9ee0:	7ae3      	ldrb	r3, [r4, #11]
    9ee2:	7083      	strb	r3, [r0, #2]
    9ee4:	e6a5      	b.n	9c32 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9ee6:	4b73      	ldr	r3, [pc, #460]	; (a0b4 <hci_evt_encode+0x684>)
    9ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9eec:	2200      	movs	r2, #0
    9eee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9ef2:	4313      	orrs	r3, r2
    9ef4:	d007      	beq.n	9f06 <hci_evt_encode+0x4d6>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    9ef6:	4b71      	ldr	r3, [pc, #452]	; (a0bc <hci_evt_encode+0x68c>)
    9ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9efc:	2300      	movs	r3, #0
    9efe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9f02:	4313      	orrs	r3, r2
    9f04:	d123      	bne.n	9f4e <hci_evt_encode+0x51e>
    9f06:	7b22      	ldrb	r2, [r4, #12]
    9f08:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    9f0a:	486e      	ldr	r0, [pc, #440]	; (a0c4 <hci_evt_encode+0x694>)
    9f0c:	2a00      	cmp	r2, #0
    9f0e:	fa92 f3a2 	rbit	r3, r2
    9f12:	fab3 f383 	clz	r3, r3
    9f16:	fa91 f2a1 	rbit	r2, r1
    9f1a:	bf08      	it	eq
    9f1c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9f20:	2900      	cmp	r1, #0
    9f22:	fab2 f282 	clz	r2, r2
    9f26:	bf08      	it	eq
    9f28:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    9f2c:	4966      	ldr	r1, [pc, #408]	; (a0c8 <hci_evt_encode+0x698>)
    9f2e:	9105      	str	r1, [sp, #20]
    9f30:	3301      	adds	r3, #1
    9f32:	3201      	adds	r2, #1
    9f34:	9204      	str	r2, [sp, #16]
    9f36:	9303      	str	r3, [sp, #12]
    9f38:	7ae3      	ldrb	r3, [r4, #11]
    9f3a:	9302      	str	r3, [sp, #8]
    9f3c:	e88d 0042 	stmia.w	sp, {r1, r6}
    9f40:	4b62      	ldr	r3, [pc, #392]	; (a0cc <hci_evt_encode+0x69c>)
    9f42:	4a63      	ldr	r2, [pc, #396]	; (a0d0 <hci_evt_encode+0x6a0>)
    9f44:	681c      	ldr	r4, [r3, #0]
    9f46:	4963      	ldr	r1, [pc, #396]	; (a0d4 <hci_evt_encode+0x6a4>)
    9f48:	4b63      	ldr	r3, [pc, #396]	; (a0d8 <hci_evt_encode+0x6a8>)
    9f4a:	47a0      	blx	r4
    9f4c:	e671      	b.n	9c32 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    9f4e:	2205      	movs	r2, #5
    9f50:	210c      	movs	r1, #12
    9f52:	4628      	mov	r0, r5
    9f54:	f7fe fd4c 	bl	89f0 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    9f58:	7ae3      	ldrb	r3, [r4, #11]
    9f5a:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9f5c:	f8a0 6001 	strh.w	r6, [r0, #1]
    9f60:	7b22      	ldrb	r2, [r4, #12]
    9f62:	2a00      	cmp	r2, #0
    9f64:	fa92 f3a2 	rbit	r3, r2
    9f68:	fab3 f383 	clz	r3, r3
    9f6c:	bf08      	it	eq
    9f6e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9f72:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    9f74:	70c3      	strb	r3, [r0, #3]
    9f76:	7b62      	ldrb	r2, [r4, #13]
    9f78:	fa92 f3a2 	rbit	r3, r2
    9f7c:	2a00      	cmp	r2, #0
    9f7e:	fab3 f383 	clz	r3, r3
    9f82:	bf08      	it	eq
    9f84:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9f88:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    9f8a:	7103      	strb	r3, [r0, #4]
    9f8c:	e651      	b.n	9c32 <hci_evt_encode+0x202>
		LL_ASSERT(0);
    9f8e:	4b4e      	ldr	r3, [pc, #312]	; (a0c8 <hci_evt_encode+0x698>)
    9f90:	9301      	str	r3, [sp, #4]
    9f92:	9300      	str	r3, [sp, #0]
    9f94:	4b4d      	ldr	r3, [pc, #308]	; (a0cc <hci_evt_encode+0x69c>)
    9f96:	681c      	ldr	r4, [r3, #0]
    9f98:	4b50      	ldr	r3, [pc, #320]	; (a0dc <hci_evt_encode+0x6ac>)
    9f9a:	4a51      	ldr	r2, [pc, #324]	; (a0e0 <hci_evt_encode+0x6b0>)
    9f9c:	494d      	ldr	r1, [pc, #308]	; (a0d4 <hci_evt_encode+0x6a4>)
    9f9e:	4851      	ldr	r0, [pc, #324]	; (a0e4 <hci_evt_encode+0x6b4>)
    9fa0:	e61d      	b.n	9bde <hci_evt_encode+0x1ae>
	switch (pdu_data->llctrl.opcode) {
    9fa2:	7ac3      	ldrb	r3, [r0, #11]
    9fa4:	3b03      	subs	r3, #3
    9fa6:	2b12      	cmp	r3, #18
    9fa8:	f200 80e1 	bhi.w	a16e <hci_evt_encode+0x73e>
    9fac:	e8df f013 	tbh	[pc, r3, lsl #1]
    9fb0:	00df0013 	.word	0x00df0013
    9fb4:	003800df 	.word	0x003800df
    9fb8:	00df00cb 	.word	0x00df00cb
    9fbc:	00df003e 	.word	0x00df003e
    9fc0:	004500df 	.word	0x004500df
    9fc4:	00df0064 	.word	0x00df0064
    9fc8:	00df0068 	.word	0x00df0068
    9fcc:	00df00df 	.word	0x00df00df
    9fd0:	00ab00df 	.word	0x00ab00df
    9fd4:	00ab      	.short	0x00ab
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9fd6:	4b37      	ldr	r3, [pc, #220]	; (a0b4 <hci_evt_encode+0x684>)
    9fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9fdc:	2200      	movs	r2, #0
    9fde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9fe2:	4313      	orrs	r3, r2
    9fe4:	f43f ae25 	beq.w	9c32 <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    9fe8:	4b34      	ldr	r3, [pc, #208]	; (a0bc <hci_evt_encode+0x68c>)
    9fea:	e9d3 2300 	ldrd	r2, r3, [r3]
    9fee:	2300      	movs	r3, #0
    9ff0:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9ff4:	4313      	orrs	r3, r2
    9ff6:	f43f ae1c 	beq.w	9c32 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    9ffa:	220c      	movs	r2, #12
    9ffc:	2105      	movs	r1, #5
    9ffe:	4628      	mov	r0, r5
    a000:	f7fe fcf6 	bl	89f0 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    a004:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    a006:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    a008:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    a00c:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    a010:	f7f7 fe1a 	bl	1c48 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    a014:	2202      	movs	r2, #2
    a016:	f104 0114 	add.w	r1, r4, #20
    a01a:	f105 000a 	add.w	r0, r5, #10
    a01e:	e69b      	b.n	9d58 <hci_evt_encode+0x328>
		encrypt_change(0x00, handle, buf);
    a020:	460a      	mov	r2, r1
    a022:	2000      	movs	r0, #0
    a024:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    a026:	f7fe fd1b 	bl	8a60 <encrypt_change>
    a02a:	e602      	b.n	9c32 <hci_evt_encode+0x202>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    a02c:	460b      	mov	r3, r1
    a02e:	4632      	mov	r2, r6
    a030:	4639      	mov	r1, r7
    a032:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    a034:	f7fe fd34 	bl	8aa0 <le_remote_feat_complete>
    a038:	e5fb      	b.n	9c32 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    a03a:	4b1e      	ldr	r3, [pc, #120]	; (a0b4 <hci_evt_encode+0x684>)
    a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a040:	2300      	movs	r3, #0
    a042:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    a046:	4313      	orrs	r3, r2
    a048:	f43f adf3 	beq.w	9c32 <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    a04c:	2208      	movs	r2, #8
    a04e:	210c      	movs	r1, #12
    a050:	4628      	mov	r0, r5
    a052:	f7fe fca8 	bl	89a6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a056:	2108      	movs	r1, #8
    a058:	1868      	adds	r0, r5, r1
    a05a:	f009 fb6f 	bl	1373c <net_buf_simple_add>
	ep->status = 0x00;
    a05e:	2300      	movs	r3, #0
    a060:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a062:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    a066:	7b23      	ldrb	r3, [r4, #12]
    a068:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    a06a:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    a06e:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    a070:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    a074:	80c3      	strh	r3, [r0, #6]
    a076:	e5dc      	b.n	9c32 <hci_evt_encode+0x202>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    a078:	460a      	mov	r2, r1
    a07a:	7b00      	ldrb	r0, [r0, #12]
    a07c:	4631      	mov	r1, r6
    a07e:	e7d2      	b.n	a026 <hci_evt_encode+0x5f6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a080:	4b0c      	ldr	r3, [pc, #48]	; (a0b4 <hci_evt_encode+0x684>)
    a082:	e9d3 2300 	ldrd	r2, r3, [r3]
    a086:	2200      	movs	r2, #0
    a088:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a08c:	4313      	orrs	r3, r2
    a08e:	d007      	beq.n	a0a0 <hci_evt_encode+0x670>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    a090:	4b0a      	ldr	r3, [pc, #40]	; (a0bc <hci_evt_encode+0x68c>)
    a092:	e9d3 2300 	ldrd	r2, r3, [r3]
    a096:	2300      	movs	r3, #0
    a098:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a09c:	4313      	orrs	r3, r2
    a09e:	d123      	bne.n	a0e8 <hci_evt_encode+0x6b8>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    a0a0:	2300      	movs	r3, #0
    a0a2:	9301      	str	r3, [sp, #4]
    a0a4:	9300      	str	r3, [sp, #0]
    a0a6:	221a      	movs	r2, #26
    a0a8:	2102      	movs	r1, #2
    a0aa:	4630      	mov	r0, r6
    a0ac:	f006 ff04 	bl	10eb8 <ll_conn_update>
    a0b0:	e5bf      	b.n	9c32 <hci_evt_encode+0x202>
    a0b2:	bf00      	nop
    a0b4:	20003d28 	.word	0x20003d28
    a0b8:	2000082c 	.word	0x2000082c
    a0bc:	20003d30 	.word	0x20003d30
    a0c0:	200008b8 	.word	0x200008b8
    a0c4:	00017c60 	.word	0x00017c60
    a0c8:	00015359 	.word	0x00015359
    a0cc:	20003a5c 	.word	0x20003a5c
    a0d0:	000167d7 	.word	0x000167d7
    a0d4:	0001679c 	.word	0x0001679c
    a0d8:	00017a83 	.word	0x00017a83
    a0dc:	00017a97 	.word	0x00017a97
    a0e0:	00016754 	.word	0x00016754
    a0e4:	000166c8 	.word	0x000166c8
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    a0e8:	220a      	movs	r2, #10
    a0ea:	2106      	movs	r1, #6
    a0ec:	4628      	mov	r0, r5
    a0ee:	f7fe fc7f 	bl	89f0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    a0f2:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    a0f4:	89a3      	ldrh	r3, [r4, #12]
    a0f6:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    a0f8:	89e3      	ldrh	r3, [r4, #14]
    a0fa:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    a0fc:	8a23      	ldrh	r3, [r4, #16]
    a0fe:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    a100:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    a102:	8103      	strh	r3, [r0, #8]
    a104:	e595      	b.n	9c32 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a106:	4b1d      	ldr	r3, [pc, #116]	; (a17c <hci_evt_encode+0x74c>)
    a108:	e9d3 2300 	ldrd	r2, r3, [r3]
    a10c:	2200      	movs	r2, #0
    a10e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a112:	4313      	orrs	r3, r2
    a114:	f43f ad8d 	beq.w	9c32 <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    a118:	4b19      	ldr	r3, [pc, #100]	; (a180 <hci_evt_encode+0x750>)
    a11a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a11e:	2300      	movs	r3, #0
    a120:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a124:	4313      	orrs	r3, r2
    a126:	f43f ad84 	beq.w	9c32 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    a12a:	220a      	movs	r2, #10
    a12c:	2107      	movs	r1, #7
    a12e:	4628      	mov	r0, r5
    a130:	f7fe fc5e 	bl	89f0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    a134:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    a136:	8a23      	ldrh	r3, [r4, #16]
    a138:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    a13a:	8a63      	ldrh	r3, [r4, #18]
    a13c:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    a13e:	89a3      	ldrh	r3, [r4, #12]
    a140:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    a142:	89e3      	ldrh	r3, [r4, #14]
    a144:	e7dd      	b.n	a102 <hci_evt_encode+0x6d2>
    a146:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    a148:	2a0e      	cmp	r2, #14
    a14a:	d104      	bne.n	a156 <hci_evt_encode+0x726>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    a14c:	460b      	mov	r3, r1
    a14e:	4632      	mov	r2, r6
    a150:	2100      	movs	r1, #0
    a152:	201a      	movs	r0, #26
    a154:	e76e      	b.n	a034 <hci_evt_encode+0x604>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    a156:	4b0b      	ldr	r3, [pc, #44]	; (a184 <hci_evt_encode+0x754>)
    a158:	9302      	str	r3, [sp, #8]
    a15a:	9300      	str	r3, [sp, #0]
    a15c:	4b0a      	ldr	r3, [pc, #40]	; (a188 <hci_evt_encode+0x758>)
	switch (pdu_data->llctrl.unknown_rsp.type) {
    a15e:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    a160:	681c      	ldr	r4, [r3, #0]
    a162:	4a0a      	ldr	r2, [pc, #40]	; (a18c <hci_evt_encode+0x75c>)
    a164:	4b0a      	ldr	r3, [pc, #40]	; (a190 <hci_evt_encode+0x760>)
    a166:	490b      	ldr	r1, [pc, #44]	; (a194 <hci_evt_encode+0x764>)
    a168:	480b      	ldr	r0, [pc, #44]	; (a198 <hci_evt_encode+0x768>)
    a16a:	47a0      	blx	r4
    a16c:	e561      	b.n	9c32 <hci_evt_encode+0x202>
		LL_ASSERT(0);
    a16e:	4b05      	ldr	r3, [pc, #20]	; (a184 <hci_evt_encode+0x754>)
    a170:	9301      	str	r3, [sp, #4]
    a172:	9300      	str	r3, [sp, #0]
    a174:	4b04      	ldr	r3, [pc, #16]	; (a188 <hci_evt_encode+0x758>)
    a176:	681c      	ldr	r4, [r3, #0]
    a178:	4b08      	ldr	r3, [pc, #32]	; (a19c <hci_evt_encode+0x76c>)
    a17a:	e70e      	b.n	9f9a <hci_evt_encode+0x56a>
    a17c:	20003d28 	.word	0x20003d28
    a180:	20003d30 	.word	0x20003d30
    a184:	00015359 	.word	0x00015359
    a188:	20003a5c 	.word	0x20003a5c
    a18c:	000167d7 	.word	0x000167d7
    a190:	00017aa6 	.word	0x00017aa6
    a194:	0001679c 	.word	0x0001679c
    a198:	00017c9c 	.word	0x00017c9c
    a19c:	00017ab5 	.word	0x00017ab5

0000a1a0 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    a1a0:	b570      	push	{r4, r5, r6, lr}
    a1a2:	4606      	mov	r6, r0
    a1a4:	460d      	mov	r5, r1
    a1a6:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    a1a8:	2113      	movs	r1, #19
    a1aa:	2205      	movs	r2, #5
    a1ac:	f7fe fbfb 	bl	89a6 <evt_create>

	ep = net_buf_add(buf, len);
    a1b0:	2105      	movs	r1, #5
    a1b2:	f106 0008 	add.w	r0, r6, #8
    a1b6:	f009 fac1 	bl	1373c <net_buf_simple_add>
	ep->num_handles = num_handles;
    a1ba:	2301      	movs	r3, #1
    a1bc:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    a1be:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    a1c2:	f8a0 4003 	strh.w	r4, [r0, #3]
    a1c6:	bd70      	pop	{r4, r5, r6, pc}

0000a1c8 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a1c8:	7903      	ldrb	r3, [r0, #4]
    a1ca:	2b01      	cmp	r3, #1
    a1cc:	d006      	beq.n	a1dc <hci_get_class+0x14>
    a1ce:	3b02      	subs	r3, #2
    a1d0:	b2db      	uxtb	r3, r3
    a1d2:	2b0a      	cmp	r3, #10
    a1d4:	d80a      	bhi.n	a1ec <hci_get_class+0x24>
    a1d6:	4a07      	ldr	r2, [pc, #28]	; (a1f4 <hci_get_class+0x2c>)
    a1d8:	56d0      	ldrsb	r0, [r2, r3]
    a1da:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    a1dc:	7a03      	ldrb	r3, [r0, #8]
    a1de:	f003 0303 	and.w	r3, r3, #3
    a1e2:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    a1e4:	bf0c      	ite	eq
    a1e6:	2002      	moveq	r0, #2
    a1e8:	2003      	movne	r0, #3
    a1ea:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a1ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    a1f0:	4770      	bx	lr
    a1f2:	bf00      	nop
    a1f4:	00017a1d 	.word	0x00017a1d

0000a1f8 <hci_init>:
	dup_count = -1;
    a1f8:	4b0a      	ldr	r3, [pc, #40]	; (a224 <hci_init+0x2c>)
    a1fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a1fe:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    a200:	4b09      	ldr	r3, [pc, #36]	; (a228 <hci_init+0x30>)
    a202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a206:	f641 71ff 	movw	r1, #8191	; 0x1fff
    a20a:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    a20e:	4b07      	ldr	r3, [pc, #28]	; (a22c <hci_init+0x34>)
    a210:	2000      	movs	r0, #0
    a212:	2100      	movs	r1, #0
    a214:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    a218:	4b05      	ldr	r3, [pc, #20]	; (a230 <hci_init+0x38>)
    a21a:	201f      	movs	r0, #31
    a21c:	2100      	movs	r1, #0
    a21e:	e9c3 0100 	strd	r0, r1, [r3]
    a222:	4770      	bx	lr
    a224:	20000830 	.word	0x20000830
    a228:	20003d28 	.word	0x20003d28
    a22c:	200008b8 	.word	0x200008b8
    a230:	20003d30 	.word	0x20003d30

0000a234 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    a234:	bf20      	wfe
	__SEV();
    a236:	bf40      	sev
	__WFE();
    a238:	bf20      	wfe
    a23a:	4770      	bx	lr

0000a23c <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    a23c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    a23e:	4b0d      	ldr	r3, [pc, #52]	; (a274 <pdu_len_cmp+0x38>)
{
    a240:	b089      	sub	sp, #36	; 0x24
    a242:	4605      	mov	r5, r0
    a244:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    a246:	aa01      	add	r2, sp, #4
    a248:	f103 0718 	add.w	r7, r3, #24
    a24c:	6818      	ldr	r0, [r3, #0]
    a24e:	6859      	ldr	r1, [r3, #4]
    a250:	4614      	mov	r4, r2
    a252:	c403      	stmia	r4!, {r0, r1}
    a254:	3308      	adds	r3, #8
    a256:	42bb      	cmp	r3, r7
    a258:	4622      	mov	r2, r4
    a25a:	d1f7      	bne.n	a24c <pdu_len_cmp+0x10>
    a25c:	881b      	ldrh	r3, [r3, #0]
    a25e:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    a260:	ab08      	add	r3, sp, #32
    a262:	441d      	add	r5, r3
    a264:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    a268:	1b83      	subs	r3, r0, r6
    a26a:	4258      	negs	r0, r3
    a26c:	4158      	adcs	r0, r3
    a26e:	b009      	add	sp, #36	; 0x24
    a270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a272:	bf00      	nop
    a274:	000152ab 	.word	0x000152ab

0000a278 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    a278:	6008      	str	r0, [r1, #0]
    a27a:	4770      	bx	lr

0000a27c <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    a27c:	b918      	cbnz	r0, a286 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    a27e:	680b      	ldr	r3, [r1, #0]
    a280:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a284:	600b      	str	r3, [r1, #0]
    a286:	4770      	bx	lr

0000a288 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    a288:	b918      	cbnz	r0, a292 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    a28a:	680b      	ldr	r3, [r1, #0]
    a28c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a290:	600b      	str	r3, [r1, #0]
    a292:	4770      	bx	lr

0000a294 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    a294:	b570      	push	{r4, r5, r6, lr}
    a296:	1d03      	adds	r3, r0, #4
    a298:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    a29a:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    a29c:	429d      	cmp	r5, r3
    a29e:	d101      	bne.n	a2a4 <chan_sel_remap+0x10>
    a2a0:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    a2a2:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    a2a4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    a2a8:	2200      	movs	r2, #0
    a2aa:	18a0      	adds	r0, r4, r2
    a2ac:	2a08      	cmp	r2, #8
    a2ae:	b2c0      	uxtb	r0, r0
    a2b0:	d101      	bne.n	a2b6 <chan_sel_remap+0x22>
    a2b2:	4604      	mov	r4, r0
    a2b4:	e7f2      	b.n	a29c <chan_sel_remap+0x8>
			if (bite & 0x01) {
    a2b6:	f016 0f01 	tst.w	r6, #1
    a2ba:	d003      	beq.n	a2c4 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    a2bc:	2900      	cmp	r1, #0
    a2be:	d0f0      	beq.n	a2a2 <chan_sel_remap+0xe>
				chan_index--;
    a2c0:	3901      	subs	r1, #1
    a2c2:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    a2c4:	0876      	lsrs	r6, r6, #1
    a2c6:	3201      	adds	r2, #1
    a2c8:	e7ef      	b.n	a2aa <chan_sel_remap+0x16>
	...

0000a2cc <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    a2cc:	4b09      	ldr	r3, [pc, #36]	; (a2f4 <packet_rx_acquired_count_get+0x28>)
    a2ce:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    a2d2:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    a2d6:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    a2d8:	bf3b      	ittet	cc
    a2da:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    a2de:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    a2e2:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    a2e6:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    a2e8:	bf2c      	ite	cs
    a2ea:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    a2ec:	1a80      	subcc	r0, r0, r2
    a2ee:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    a2f0:	4770      	bx	lr
    a2f2:	bf00      	nop
    a2f4:	200008c0 	.word	0x200008c0

0000a2f8 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    a2f8:	b508      	push	{r3, lr}
    a2fa:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    a2fc:	f7ff ffe6 	bl	a2cc <packet_rx_acquired_count_get>
    a300:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    a302:	bf21      	itttt	cs
    a304:	4b04      	ldrcs	r3, [pc, #16]	; (a318 <packet_rx_reserve_get+0x20>)
    a306:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    a30a:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    a30e:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    a312:	bf38      	it	cc
    a314:	2000      	movcc	r0, #0
}
    a316:	bd08      	pop	{r3, pc}
    a318:	200008c0 	.word	0x200008c0

0000a31c <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    a31c:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    a31e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    a322:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    a326:	429c      	cmp	r4, r3
    a328:	d15a      	bne.n	a3e0 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    a32a:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    a32e:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    a332:	428b      	cmp	r3, r1
    a334:	d154      	bne.n	a3e0 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    a336:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a33a:	2b00      	cmp	r3, #0
    a33c:	db25      	blt.n	a38a <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    a33e:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    a340:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    a342:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    a346:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    a348:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    a34c:	4351      	muls	r1, r2
					      conn->supervision_reload *
    a34e:	227d      	movs	r2, #125	; 0x7d
    a350:	434a      	muls	r2, r1
					      125 / 1000;
    a352:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a356:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    a35a:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    a35e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    a362:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    a364:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    a368:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    a36a:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    a36c:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    a370:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    a372:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    a376:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    a37a:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    a37e:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    a382:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    a386:	4618      	mov	r0, r3
    a388:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    a38a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    a38e:	06dc      	lsls	r4, r3, #27
    a390:	d428      	bmi.n	a3e4 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    a392:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    a396:	069a      	lsls	r2, r3, #26
    a398:	d503      	bpl.n	a3a2 <conn_update_req+0x86>
		    (conn->llcp_features &
    a39a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    a39e:	079b      	lsls	r3, r3, #30
    a3a0:	d520      	bpl.n	a3e4 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    a3a2:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    a3a4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    a3a6:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    a3aa:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    a3ac:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    a3b0:	4354      	muls	r4, r2
						conn->supervision_reload *
    a3b2:	227d      	movs	r2, #125	; 0x7d
    a3b4:	4362      	muls	r2, r4
						125 / 1000;
    a3b6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    a3ba:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    a3be:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    a3c2:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    a3c6:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    a3c8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    a3cc:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    a3d0:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    a3d2:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    a3d6:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    a3da:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    a3de:	e7d2      	b.n	a386 <conn_update_req+0x6a>
		return 1;
    a3e0:	2001      	movs	r0, #1
    a3e2:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    a3e4:	2002      	movs	r0, #2
}
    a3e6:	bd30      	pop	{r4, r5, pc}

0000a3e8 <packet_rx_allocate>:
{
    a3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    a3ec:	4d22      	ldr	r5, [pc, #136]	; (a478 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    a3ee:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    a3f2:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    a3f6:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    a3fa:	3401      	adds	r4, #1
    a3fc:	4581      	cmp	r9, r0
    a3fe:	b2e4      	uxtb	r4, r4
    a400:	bf28      	it	cs
    a402:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    a404:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    a408:	42a3      	cmp	r3, r4
    a40a:	bf08      	it	eq
    a40c:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    a40e:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    a412:	f1b9 0f00 	cmp.w	r9, #0
    a416:	d003      	beq.n	a420 <packet_rx_allocate+0x38>
    a418:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    a41c:	429c      	cmp	r4, r3
    a41e:	d101      	bne.n	a424 <packet_rx_allocate+0x3c>
    a420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    a424:	4638      	mov	r0, r7
    a426:	f7fd f91c 	bl	7662 <mem_acquire>
		if (!link) {
    a42a:	4606      	mov	r6, r0
    a42c:	2800      	cmp	r0, #0
    a42e:	d0f7      	beq.n	a420 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    a430:	4640      	mov	r0, r8
    a432:	f7fd f916 	bl	7662 <mem_acquire>
		if (!node_rx) {
    a436:	b928      	cbnz	r0, a444 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    a438:	4630      	mov	r0, r6
    a43a:	4910      	ldr	r1, [pc, #64]	; (a47c <packet_rx_allocate+0x94>)
}
    a43c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    a440:	f7fd b929 	b.w	7696 <mem_release>
		node_rx->hdr.onion.link = link;
    a444:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    a446:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    a44a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    a44e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    a452:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    a456:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    a45a:	3401      	adds	r4, #1
    a45c:	b2e4      	uxtb	r4, r4
			acquire = 0;
    a45e:	42a3      	cmp	r3, r4
    a460:	bf08      	it	eq
    a462:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    a464:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    a468:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    a46c:	3b01      	subs	r3, #1
    a46e:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    a472:	fa5f f989 	uxtb.w	r9, r9
    a476:	e7cc      	b.n	a412 <packet_rx_allocate+0x2a>
    a478:	200008c0 	.word	0x200008c0
    a47c:	20000a08 	.word	0x20000a08

0000a480 <common_init>:
{
    a480:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    a482:	4c3a      	ldr	r4, [pc, #232]	; (a56c <common_init+0xec>)
    a484:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    a488:	2a00      	cmp	r2, #0
    a48a:	d041      	beq.n	a510 <common_init+0x90>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    a48c:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    a490:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a494:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    a498:	f7fd f8bc 	bl	7614 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    a49c:	4b34      	ldr	r3, [pc, #208]	; (a570 <common_init+0xf0>)
    a49e:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    a4a2:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    a4a6:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    a4aa:	f7fd f8b3 	bl	7614 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    a4ae:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    a4b2:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    a4b6:	4b2f      	ldr	r3, [pc, #188]	; (a574 <common_init+0xf4>)
    a4b8:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    a4bc:	440a      	add	r2, r1
    a4be:	2108      	movs	r1, #8
    a4c0:	f7fd f8a8 	bl	7614 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    a4c4:	4b2c      	ldr	r3, [pc, #176]	; (a578 <common_init+0xf8>)
    a4c6:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    a4ca:	2202      	movs	r2, #2
    a4cc:	2124      	movs	r1, #36	; 0x24
    a4ce:	f7fd f8a1 	bl	7614 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    a4d2:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    a4d6:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    a4da:	4b28      	ldr	r3, [pc, #160]	; (a57c <common_init+0xfc>)
    a4dc:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    a4e0:	3a01      	subs	r2, #1
    a4e2:	b292      	uxth	r2, r2
    a4e4:	f7fd f896 	bl	7614 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    a4e8:	4822      	ldr	r0, [pc, #136]	; (a574 <common_init+0xf4>)
    a4ea:	f7fd f8ba 	bl	7662 <mem_acquire>
	LL_ASSERT(link);
    a4ee:	b990      	cbnz	r0, a516 <common_init+0x96>
    a4f0:	4b23      	ldr	r3, [pc, #140]	; (a580 <common_init+0x100>)
    a4f2:	9301      	str	r3, [sp, #4]
    a4f4:	9300      	str	r3, [sp, #0]
    a4f6:	4b23      	ldr	r3, [pc, #140]	; (a584 <common_init+0x104>)
    a4f8:	4a23      	ldr	r2, [pc, #140]	; (a588 <common_init+0x108>)
    a4fa:	681c      	ldr	r4, [r3, #0]
    a4fc:	4923      	ldr	r1, [pc, #140]	; (a58c <common_init+0x10c>)
    a4fe:	4b24      	ldr	r3, [pc, #144]	; (a590 <common_init+0x110>)
    a500:	4824      	ldr	r0, [pc, #144]	; (a594 <common_init+0x114>)
    a502:	47a0      	blx	r4
    a504:	4040      	eors	r0, r0
    a506:	f380 8811 	msr	BASEPRI, r0
    a50a:	f04f 0004 	mov.w	r0, #4
    a50e:	df02      	svc	2
		_radio.conn_free = NULL;
    a510:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    a514:	e7c2      	b.n	a49c <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    a516:	4a20      	ldr	r2, [pc, #128]	; (a598 <common_init+0x118>)
    a518:	1f11      	subs	r1, r2, #4
    a51a:	f7fd f8f9 	bl	7710 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    a51e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    a522:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    a526:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    a52a:	231f      	movs	r3, #31
    a52c:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    a530:	2325      	movs	r3, #37	; 0x25
    a532:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    a536:	231b      	movs	r3, #27
    a538:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    a53c:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    a540:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    a542:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    a546:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    a548:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    a54c:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    a550:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    a554:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    a558:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    a55c:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    a560:	b002      	add	sp, #8
    a562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    a566:	f7ff bf3f 	b.w	a3e8 <packet_rx_allocate>
    a56a:	bf00      	nop
    a56c:	200008c0 	.word	0x200008c0
    a570:	200009f0 	.word	0x200009f0
    a574:	20000a08 	.word	0x20000a08
    a578:	20000a1c 	.word	0x20000a1c
    a57c:	20000a24 	.word	0x20000a24
    a580:	00015359 	.word	0x00015359
    a584:	20003a5c 	.word	0x20003a5c
    a588:	00016754 	.word	0x00016754
    a58c:	0001679c 	.word	0x0001679c
    a590:	00017d6e 	.word	0x00017d6e
    a594:	000181eb 	.word	0x000181eb
    a598:	20000a10 	.word	0x20000a10

0000a59c <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    a59c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    a5a0:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    a5a2:	4294      	cmp	r4, r2
{
    a5a4:	4681      	mov	r9, r0
    a5a6:	460f      	mov	r7, r1
    a5a8:	4690      	mov	r8, r2
	if (_first == last) {
    a5aa:	d03d      	beq.n	a628 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    a5ac:	4e1f      	ldr	r6, [pc, #124]	; (a62c <tx_cmplt_get+0x90>)
    a5ae:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    a5b2:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    a5b6:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    a5b8:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    a5ba:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    a5be:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    a5c2:	b222      	sxth	r2, r4
    a5c4:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    a5c8:	f8b9 e000 	ldrh.w	lr, [r9]
    a5cc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    a5d0:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    a5d4:	4596      	cmp	lr, r2
    a5d6:	d120      	bne.n	a61a <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    a5d8:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    a5da:	2801      	cmp	r0, #1
    a5dc:	f020 0303 	bic.w	r3, r0, #3
    a5e0:	d90a      	bls.n	a5f8 <tx_cmplt_get+0x5c>
    a5e2:	b1f3      	cbz	r3, a622 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    a5e4:	1d02      	adds	r2, r0, #4
    a5e6:	d01c      	beq.n	a622 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    a5e8:	7942      	ldrb	r2, [r0, #5]
    a5ea:	b1d2      	cbz	r2, a622 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    a5ec:	7902      	ldrb	r2, [r0, #4]
    a5ee:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    a5f2:	3a01      	subs	r2, #1
    a5f4:	2a01      	cmp	r2, #1
    a5f6:	d814      	bhi.n	a622 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    a5f8:	2201      	movs	r2, #1
			cmplt++;
    a5fa:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    a5fc:	604a      	str	r2, [r1, #4]
			cmplt++;
    a5fe:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    a600:	b113      	cbz	r3, a608 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    a602:	4651      	mov	r1, sl
    a604:	f7fd f847 	bl	7696 <mem_release>
		}

		_first = _first + 1;
    a608:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    a60a:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    a60e:	b2e4      	uxtb	r4, r4
			_first = 0;
    a610:	42a2      	cmp	r2, r4
    a612:	bf08      	it	eq
    a614:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    a616:	4544      	cmp	r4, r8
    a618:	d1d3      	bne.n	a5c2 <tx_cmplt_get+0x26>

	*first = _first;
    a61a:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    a61c:	4628      	mov	r0, r5
    a61e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    a622:	f8c1 b004 	str.w	fp, [r1, #4]
    a626:	e7eb      	b.n	a600 <tx_cmplt_get+0x64>
		return 0;
    a628:	2500      	movs	r5, #0
    a62a:	e7f7      	b.n	a61c <tx_cmplt_get+0x80>
    a62c:	200008c0 	.word	0x200008c0

0000a630 <connection_get>:
{
    a630:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    a632:	4b09      	ldr	r3, [pc, #36]	; (a658 <connection_get+0x28>)
    a634:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    a638:	4282      	cmp	r2, r0
{
    a63a:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    a63c:	d90a      	bls.n	a654 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    a63e:	4602      	mov	r2, r0
    a640:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a644:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    a648:	f7fd f840 	bl	76cc <mem_get>
		if ((conn) && (conn->handle == handle)) {
    a64c:	b110      	cbz	r0, a654 <connection_get+0x24>
    a64e:	8c03      	ldrh	r3, [r0, #32]
    a650:	42a3      	cmp	r3, r4
    a652:	d000      	beq.n	a656 <connection_get+0x26>
	return 0;
    a654:	2000      	movs	r0, #0
}
    a656:	bd10      	pop	{r4, pc}
    a658:	200008c0 	.word	0x200008c0

0000a65c <role_disable>:
{
    a65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a660:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a662:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    a664:	2805      	cmp	r0, #5
{
    a666:	4605      	mov	r5, r0
    a668:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a66a:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    a66c:	d00c      	beq.n	a688 <role_disable+0x2c>
    a66e:	2806      	cmp	r0, #6
    a670:	d043      	beq.n	a6fa <role_disable+0x9e>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a672:	d948      	bls.n	a706 <role_disable+0xaa>
			conn_handle = ticker_id_primary -
    a674:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    a676:	b280      	uxth	r0, r0
    a678:	f7ff ffda 	bl	a630 <connection_get>
			if (!conn) {
    a67c:	2800      	cmp	r0, #0
    a67e:	f000 8160 	beq.w	a942 <role_disable+0x2e6>
			ticks_active_to_start =
    a682:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    a686:	e00f      	b.n	a6a8 <role_disable+0x4c>
		ticks_xtal_to_start =
    a688:	4b96      	ldr	r3, [pc, #600]	; (a8e4 <role_disable+0x288>)
    a68a:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    a68c:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a690:	ab02      	add	r3, sp, #8
    a692:	9300      	str	r3, [sp, #0]
    a694:	460a      	mov	r2, r1
    a696:	4b94      	ldr	r3, [pc, #592]	; (a8e8 <role_disable+0x28c>)
    a698:	2103      	movs	r1, #3
    a69a:	2000      	movs	r0, #0
    a69c:	f7fd ff0a 	bl	84b4 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    a6a0:	2802      	cmp	r0, #2
    a6a2:	d013      	beq.n	a6cc <role_disable+0x70>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    a6a4:	9b02      	ldr	r3, [sp, #8]
    a6a6:	b9ab      	cbnz	r3, a6d4 <role_disable+0x78>
	LL_ASSERT(!_radio.ticker_id_stop);
    a6a8:	4c8e      	ldr	r4, [pc, #568]	; (a8e4 <role_disable+0x288>)
    a6aa:	7ca3      	ldrb	r3, [r4, #18]
    a6ac:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a6b0:	2b00      	cmp	r3, #0
    a6b2:	d032      	beq.n	a71a <role_disable+0xbe>
    a6b4:	4b8d      	ldr	r3, [pc, #564]	; (a8ec <role_disable+0x290>)
    a6b6:	9301      	str	r3, [sp, #4]
    a6b8:	9300      	str	r3, [sp, #0]
    a6ba:	4b8d      	ldr	r3, [pc, #564]	; (a8f0 <role_disable+0x294>)
    a6bc:	4a8d      	ldr	r2, [pc, #564]	; (a8f4 <role_disable+0x298>)
    a6be:	681c      	ldr	r4, [r3, #0]
    a6c0:	498d      	ldr	r1, [pc, #564]	; (a8f8 <role_disable+0x29c>)
    a6c2:	4b8e      	ldr	r3, [pc, #568]	; (a8fc <role_disable+0x2a0>)
    a6c4:	488e      	ldr	r0, [pc, #568]	; (a900 <role_disable+0x2a4>)
    a6c6:	e011      	b.n	a6ec <role_disable+0x90>
				cpu_sleep();
    a6c8:	f7ff fdb4 	bl	a234 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a6cc:	9b02      	ldr	r3, [sp, #8]
    a6ce:	2b02      	cmp	r3, #2
    a6d0:	d0fa      	beq.n	a6c8 <role_disable+0x6c>
    a6d2:	e7e7      	b.n	a6a4 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    a6d4:	9b02      	ldr	r3, [sp, #8]
    a6d6:	2b01      	cmp	r3, #1
    a6d8:	d0e6      	beq.n	a6a8 <role_disable+0x4c>
    a6da:	4b84      	ldr	r3, [pc, #528]	; (a8ec <role_disable+0x290>)
    a6dc:	9301      	str	r3, [sp, #4]
    a6de:	9300      	str	r3, [sp, #0]
    a6e0:	4b83      	ldr	r3, [pc, #524]	; (a8f0 <role_disable+0x294>)
    a6e2:	4a84      	ldr	r2, [pc, #528]	; (a8f4 <role_disable+0x298>)
    a6e4:	681c      	ldr	r4, [r3, #0]
    a6e6:	4984      	ldr	r1, [pc, #528]	; (a8f8 <role_disable+0x29c>)
    a6e8:	4b84      	ldr	r3, [pc, #528]	; (a8fc <role_disable+0x2a0>)
    a6ea:	4886      	ldr	r0, [pc, #536]	; (a904 <role_disable+0x2a8>)
			LL_ASSERT(0);
    a6ec:	47a0      	blx	r4
    a6ee:	4040      	eors	r0, r0
    a6f0:	f380 8811 	msr	BASEPRI, r0
    a6f4:	f04f 0004 	mov.w	r0, #4
    a6f8:	df02      	svc	2
		ticks_xtal_to_start =
    a6fa:	4b7a      	ldr	r3, [pc, #488]	; (a8e4 <role_disable+0x288>)
    a6fc:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    a700:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    a704:	e7d0      	b.n	a6a8 <role_disable+0x4c>
			LL_ASSERT(0);
    a706:	4b79      	ldr	r3, [pc, #484]	; (a8ec <role_disable+0x290>)
    a708:	9301      	str	r3, [sp, #4]
    a70a:	9300      	str	r3, [sp, #0]
    a70c:	4b78      	ldr	r3, [pc, #480]	; (a8f0 <role_disable+0x294>)
    a70e:	681c      	ldr	r4, [r3, #0]
    a710:	4b7a      	ldr	r3, [pc, #488]	; (a8fc <role_disable+0x2a0>)
    a712:	4a78      	ldr	r2, [pc, #480]	; (a8f4 <role_disable+0x298>)
    a714:	4978      	ldr	r1, [pc, #480]	; (a8f8 <role_disable+0x29c>)
    a716:	487c      	ldr	r0, [pc, #496]	; (a908 <role_disable+0x2ac>)
    a718:	e7e8      	b.n	a6ec <role_disable+0x90>
	ret_cb = TICKER_STATUS_BUSY;
    a71a:	ab06      	add	r3, sp, #24
    a71c:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    a71e:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    a720:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a724:	2103      	movs	r1, #3
    a726:	9300      	str	r3, [sp, #0]
    a728:	462a      	mov	r2, r5
    a72a:	4b6f      	ldr	r3, [pc, #444]	; (a8e8 <role_disable+0x28c>)
    a72c:	f7fd fec2 	bl	84b4 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    a730:	2802      	cmp	r0, #2
    a732:	d027      	beq.n	a784 <role_disable+0x128>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    a734:	9b02      	ldr	r3, [sp, #8]
    a736:	2b00      	cmp	r3, #0
    a738:	d16f      	bne.n	a81a <role_disable+0x1be>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    a73a:	7c23      	ldrb	r3, [r4, #16]
    a73c:	429d      	cmp	r5, r3
    a73e:	d002      	beq.n	a746 <role_disable+0xea>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    a740:	7c63      	ldrb	r3, [r4, #17]
    a742:	429d      	cmp	r5, r3
    a744:	d165      	bne.n	a812 <role_disable+0x1b6>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    a746:	ab06      	add	r3, sp, #24
    a748:	2202      	movs	r2, #2
    a74a:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a74e:	2200      	movs	r2, #0
    a750:	9300      	str	r3, [sp, #0]
    a752:	2103      	movs	r1, #3
    a754:	4b64      	ldr	r3, [pc, #400]	; (a8e8 <role_disable+0x28c>)
    a756:	4610      	mov	r0, r2
    a758:	f7fd feac 	bl	84b4 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    a75c:	2802      	cmp	r0, #2
    a75e:	d11f      	bne.n	a7a0 <role_disable+0x144>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a760:	2201      	movs	r2, #1
    a762:	4611      	mov	r1, r2
    a764:	2003      	movs	r0, #3
    a766:	f7fd f81f 	bl	77a8 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    a76a:	9b03      	ldr	r3, [sp, #12]
    a76c:	2b02      	cmp	r3, #2
    a76e:	d117      	bne.n	a7a0 <role_disable+0x144>
    a770:	4b5e      	ldr	r3, [pc, #376]	; (a8ec <role_disable+0x290>)
    a772:	9301      	str	r3, [sp, #4]
    a774:	9300      	str	r3, [sp, #0]
    a776:	4b5e      	ldr	r3, [pc, #376]	; (a8f0 <role_disable+0x294>)
    a778:	4a5e      	ldr	r2, [pc, #376]	; (a8f4 <role_disable+0x298>)
    a77a:	681c      	ldr	r4, [r3, #0]
    a77c:	495e      	ldr	r1, [pc, #376]	; (a8f8 <role_disable+0x29c>)
    a77e:	4b63      	ldr	r3, [pc, #396]	; (a90c <role_disable+0x2b0>)
    a780:	4863      	ldr	r0, [pc, #396]	; (a910 <role_disable+0x2b4>)
    a782:	e7b3      	b.n	a6ec <role_disable+0x90>
		if (_radio.ticker_id_event == ticker_id_primary) {
    a784:	7c63      	ldrb	r3, [r4, #17]
    a786:	429d      	cmp	r5, r3
    a788:	d104      	bne.n	a794 <role_disable+0x138>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a78a:	2201      	movs	r2, #1
    a78c:	4611      	mov	r1, r2
    a78e:	2003      	movs	r0, #3
    a790:	f7fd f80a 	bl	77a8 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    a794:	9b02      	ldr	r3, [sp, #8]
    a796:	2b02      	cmp	r3, #2
    a798:	d1cc      	bne.n	a734 <role_disable+0xd8>
			cpu_sleep();
    a79a:	f7ff fd4b 	bl	a234 <cpu_sleep>
    a79e:	e7f9      	b.n	a794 <role_disable+0x138>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    a7a0:	9803      	ldr	r0, [sp, #12]
    a7a2:	2800      	cmp	r0, #0
    a7a4:	d157      	bne.n	a856 <role_disable+0x1fa>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    a7a6:	2302      	movs	r3, #2
    a7a8:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    a7aa:	7c23      	ldrb	r3, [r4, #16]
    a7ac:	b94b      	cbnz	r3, a7c2 <role_disable+0x166>
    a7ae:	4b4f      	ldr	r3, [pc, #316]	; (a8ec <role_disable+0x290>)
    a7b0:	9301      	str	r3, [sp, #4]
    a7b2:	9300      	str	r3, [sp, #0]
    a7b4:	4b4e      	ldr	r3, [pc, #312]	; (a8f0 <role_disable+0x294>)
    a7b6:	4a4f      	ldr	r2, [pc, #316]	; (a8f4 <role_disable+0x298>)
    a7b8:	681c      	ldr	r4, [r3, #0]
    a7ba:	494f      	ldr	r1, [pc, #316]	; (a8f8 <role_disable+0x29c>)
    a7bc:	4b53      	ldr	r3, [pc, #332]	; (a90c <role_disable+0x2b0>)
    a7be:	4855      	ldr	r0, [pc, #340]	; (a914 <role_disable+0x2b8>)
    a7c0:	e794      	b.n	a6ec <role_disable+0x90>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a7c2:	ab04      	add	r3, sp, #16
		_radio.ticker_id_prepare = 0;
    a7c4:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a7c6:	2201      	movs	r2, #1
    a7c8:	9300      	str	r3, [sp, #0]
    a7ca:	2103      	movs	r1, #3
    a7cc:	4b46      	ldr	r3, [pc, #280]	; (a8e8 <role_disable+0x28c>)
    a7ce:	f7fd fe71 	bl	84b4 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    a7d2:	2802      	cmp	r0, #2
    a7d4:	d111      	bne.n	a7fa <role_disable+0x19e>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a7d6:	2201      	movs	r2, #1
    a7d8:	4611      	mov	r1, r2
    a7da:	2003      	movs	r0, #3
    a7dc:	f7fc ffe4 	bl	77a8 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    a7e0:	9b04      	ldr	r3, [sp, #16]
    a7e2:	2b02      	cmp	r3, #2
    a7e4:	d109      	bne.n	a7fa <role_disable+0x19e>
    a7e6:	4b41      	ldr	r3, [pc, #260]	; (a8ec <role_disable+0x290>)
    a7e8:	9301      	str	r3, [sp, #4]
    a7ea:	9300      	str	r3, [sp, #0]
    a7ec:	4b40      	ldr	r3, [pc, #256]	; (a8f0 <role_disable+0x294>)
    a7ee:	4a41      	ldr	r2, [pc, #260]	; (a8f4 <role_disable+0x298>)
    a7f0:	681c      	ldr	r4, [r3, #0]
    a7f2:	4941      	ldr	r1, [pc, #260]	; (a8f8 <role_disable+0x29c>)
    a7f4:	4b45      	ldr	r3, [pc, #276]	; (a90c <role_disable+0x2b0>)
    a7f6:	4848      	ldr	r0, [pc, #288]	; (a918 <role_disable+0x2bc>)
    a7f8:	e778      	b.n	a6ec <role_disable+0x90>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    a7fa:	9a04      	ldr	r2, [sp, #16]
    a7fc:	b99a      	cbnz	r2, a826 <role_disable+0x1ca>
			ticks_xtal_to_start &= ~XON_BITMASK;
    a7fe:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    a802:	45b0      	cmp	r8, r6
    a804:	d925      	bls.n	a852 <role_disable+0x1f6>
				ret = mayfly_enqueue(
    a806:	4b45      	ldr	r3, [pc, #276]	; (a91c <role_disable+0x2c0>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a808:	4611      	mov	r1, r2
    a80a:	2003      	movs	r0, #3
    a80c:	f7fc fff4 	bl	77f8 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a810:	b9a8      	cbnz	r0, a83e <role_disable+0x1e2>
	if (!_radio.ticker_id_stop) {
    a812:	7ca3      	ldrb	r3, [r4, #18]
    a814:	b90b      	cbnz	r3, a81a <role_disable+0x1be>
		ret_cb = TICKER_STATUS_FAILURE;
    a816:	2301      	movs	r3, #1
    a818:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    a81a:	2300      	movs	r3, #0
    a81c:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    a81e:	9802      	ldr	r0, [sp, #8]
}
    a820:	b006      	add	sp, #24
    a822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    a826:	9b04      	ldr	r3, [sp, #16]
    a828:	2b01      	cmp	r3, #1
    a82a:	f040 8083 	bne.w	a934 <role_disable+0x2d8>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a82e:	2200      	movs	r2, #0
    a830:	4611      	mov	r1, r2
    a832:	4b3a      	ldr	r3, [pc, #232]	; (a91c <role_disable+0x2c0>)
    a834:	2003      	movs	r0, #3
    a836:	f7fc ffdf 	bl	77f8 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a83a:	4602      	mov	r2, r0
    a83c:	b148      	cbz	r0, a852 <role_disable+0x1f6>
			LL_ASSERT(!ret);
    a83e:	4b2b      	ldr	r3, [pc, #172]	; (a8ec <role_disable+0x290>)
    a840:	9301      	str	r3, [sp, #4]
    a842:	9300      	str	r3, [sp, #0]
    a844:	4b2a      	ldr	r3, [pc, #168]	; (a8f0 <role_disable+0x294>)
    a846:	4a2b      	ldr	r2, [pc, #172]	; (a8f4 <role_disable+0x298>)
    a848:	681c      	ldr	r4, [r3, #0]
    a84a:	492b      	ldr	r1, [pc, #172]	; (a8f8 <role_disable+0x29c>)
    a84c:	4b2f      	ldr	r3, [pc, #188]	; (a90c <role_disable+0x2b0>)
    a84e:	4834      	ldr	r0, [pc, #208]	; (a920 <role_disable+0x2c4>)
    a850:	e74c      	b.n	a6ec <role_disable+0x90>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a852:	4b34      	ldr	r3, [pc, #208]	; (a924 <role_disable+0x2c8>)
    a854:	e7d8      	b.n	a808 <role_disable+0x1ac>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    a856:	9d03      	ldr	r5, [sp, #12]
    a858:	2d01      	cmp	r5, #1
    a85a:	d16b      	bne.n	a934 <role_disable+0x2d8>
		if (ticker_id_stop != TICKER_NULL) {
    a85c:	2fff      	cmp	r7, #255	; 0xff
    a85e:	d02d      	beq.n	a8bc <role_disable+0x260>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    a860:	ab06      	add	r3, sp, #24
    a862:	2202      	movs	r2, #2
    a864:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a868:	2103      	movs	r1, #3
    a86a:	9300      	str	r3, [sp, #0]
    a86c:	463a      	mov	r2, r7
    a86e:	4b1e      	ldr	r3, [pc, #120]	; (a8e8 <role_disable+0x28c>)
    a870:	2000      	movs	r0, #0
    a872:	f7fd fe1f 	bl	84b4 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    a876:	2802      	cmp	r0, #2
    a878:	d111      	bne.n	a89e <role_disable+0x242>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a87a:	462a      	mov	r2, r5
    a87c:	4629      	mov	r1, r5
    a87e:	2003      	movs	r0, #3
    a880:	f7fc ff92 	bl	77a8 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    a884:	9b05      	ldr	r3, [sp, #20]
    a886:	2b02      	cmp	r3, #2
    a888:	d109      	bne.n	a89e <role_disable+0x242>
    a88a:	4b18      	ldr	r3, [pc, #96]	; (a8ec <role_disable+0x290>)
    a88c:	9301      	str	r3, [sp, #4]
    a88e:	9300      	str	r3, [sp, #0]
    a890:	4b17      	ldr	r3, [pc, #92]	; (a8f0 <role_disable+0x294>)
    a892:	4a18      	ldr	r2, [pc, #96]	; (a8f4 <role_disable+0x298>)
    a894:	681c      	ldr	r4, [r3, #0]
    a896:	4918      	ldr	r1, [pc, #96]	; (a8f8 <role_disable+0x29c>)
    a898:	4b1c      	ldr	r3, [pc, #112]	; (a90c <role_disable+0x2b0>)
    a89a:	4823      	ldr	r0, [pc, #140]	; (a928 <role_disable+0x2cc>)
    a89c:	e726      	b.n	a6ec <role_disable+0x90>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    a89e:	9b05      	ldr	r3, [sp, #20]
    a8a0:	b163      	cbz	r3, a8bc <role_disable+0x260>
    a8a2:	9b05      	ldr	r3, [sp, #20]
    a8a4:	2b01      	cmp	r3, #1
    a8a6:	d009      	beq.n	a8bc <role_disable+0x260>
    a8a8:	4b10      	ldr	r3, [pc, #64]	; (a8ec <role_disable+0x290>)
    a8aa:	9301      	str	r3, [sp, #4]
    a8ac:	9300      	str	r3, [sp, #0]
    a8ae:	4b10      	ldr	r3, [pc, #64]	; (a8f0 <role_disable+0x294>)
    a8b0:	4a10      	ldr	r2, [pc, #64]	; (a8f4 <role_disable+0x298>)
    a8b2:	681c      	ldr	r4, [r3, #0]
    a8b4:	4910      	ldr	r1, [pc, #64]	; (a8f8 <role_disable+0x29c>)
    a8b6:	4b15      	ldr	r3, [pc, #84]	; (a90c <role_disable+0x2b0>)
    a8b8:	481c      	ldr	r0, [pc, #112]	; (a92c <role_disable+0x2d0>)
    a8ba:	e717      	b.n	a6ec <role_disable+0x90>
		if (_radio.role != ROLE_NONE) {
    a8bc:	7ce3      	ldrb	r3, [r4, #19]
    a8be:	2b00      	cmp	r3, #0
    a8c0:	d0a7      	beq.n	a812 <role_disable+0x1b6>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    a8c2:	4b1b      	ldr	r3, [pc, #108]	; (a930 <role_disable+0x2d4>)
    a8c4:	2204      	movs	r2, #4
    a8c6:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a8c8:	2200      	movs	r2, #0
    a8ca:	4611      	mov	r1, r2
    a8cc:	2003      	movs	r0, #3
    a8ce:	f7fc ff93 	bl	77f8 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a8d2:	2800      	cmp	r0, #0
    a8d4:	d1b3      	bne.n	a83e <role_disable+0x1e2>
			while (_radio.role != ROLE_NONE) {
    a8d6:	7ce3      	ldrb	r3, [r4, #19]
    a8d8:	2b00      	cmp	r3, #0
    a8da:	d09a      	beq.n	a812 <role_disable+0x1b6>
				cpu_sleep();
    a8dc:	f7ff fcaa 	bl	a234 <cpu_sleep>
    a8e0:	e7f9      	b.n	a8d6 <role_disable+0x27a>
    a8e2:	bf00      	nop
    a8e4:	200008c0 	.word	0x200008c0
    a8e8:	0000a279 	.word	0x0000a279
    a8ec:	00015359 	.word	0x00015359
    a8f0:	20003a5c 	.word	0x20003a5c
    a8f4:	00016754 	.word	0x00016754
    a8f8:	0001679c 	.word	0x0001679c
    a8fc:	00018190 	.word	0x00018190
    a900:	00018b02 	.word	0x00018b02
    a904:	00018ac2 	.word	0x00018ac2
    a908:	000166c8 	.word	0x000166c8
    a90c:	0001817c 	.word	0x0001817c
    a910:	00018b3a 	.word	0x00018b3a
    a914:	00018b6b 	.word	0x00018b6b
    a918:	00018ba5 	.word	0x00018ba5
    a91c:	20003d58 	.word	0x20003d58
    a920:	00018bd5 	.word	0x00018bd5
    a924:	20003df8 	.word	0x20003df8
    a928:	00018bfb 	.word	0x00018bfb
    a92c:	00018c2d 	.word	0x00018c2d
    a930:	20003d78 	.word	0x20003d78
		LL_ASSERT(0);
    a934:	4b04      	ldr	r3, [pc, #16]	; (a948 <role_disable+0x2ec>)
    a936:	9301      	str	r3, [sp, #4]
    a938:	9300      	str	r3, [sp, #0]
    a93a:	4b04      	ldr	r3, [pc, #16]	; (a94c <role_disable+0x2f0>)
    a93c:	681c      	ldr	r4, [r3, #0]
    a93e:	4b04      	ldr	r3, [pc, #16]	; (a950 <role_disable+0x2f4>)
    a940:	e6e7      	b.n	a712 <role_disable+0xb6>
				return 1;
    a942:	2001      	movs	r0, #1
    a944:	e76c      	b.n	a820 <role_disable+0x1c4>
    a946:	bf00      	nop
    a948:	00015359 	.word	0x00015359
    a94c:	20003a5c 	.word	0x20003a5c
    a950:	0001817c 	.word	0x0001817c

0000a954 <mayfly_xtal_retain>:
{
    a954:	b513      	push	{r0, r1, r4, lr}
    a956:	4b20      	ldr	r3, [pc, #128]	; (a9d8 <mayfly_xtal_retain+0x84>)
    a958:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    a95a:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    a95c:	b319      	cbz	r1, a9a6 <mayfly_xtal_retain+0x52>
		if (!s_xtal_retained) {
    a95e:	2a00      	cmp	r2, #0
    a960:	d137      	bne.n	a9d2 <mayfly_xtal_retain+0x7e>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    a962:	2801      	cmp	r0, #1
    a964:	d00f      	beq.n	a986 <mayfly_xtal_retain+0x32>
    a966:	4b1d      	ldr	r3, [pc, #116]	; (a9dc <mayfly_xtal_retain+0x88>)
    a968:	9301      	str	r3, [sp, #4]
    a96a:	9300      	str	r3, [sp, #0]
    a96c:	4b1c      	ldr	r3, [pc, #112]	; (a9e0 <mayfly_xtal_retain+0x8c>)
    a96e:	4a1d      	ldr	r2, [pc, #116]	; (a9e4 <mayfly_xtal_retain+0x90>)
    a970:	681c      	ldr	r4, [r3, #0]
    a972:	491d      	ldr	r1, [pc, #116]	; (a9e8 <mayfly_xtal_retain+0x94>)
    a974:	4b1d      	ldr	r3, [pc, #116]	; (a9ec <mayfly_xtal_retain+0x98>)
    a976:	481e      	ldr	r0, [pc, #120]	; (a9f0 <mayfly_xtal_retain+0x9c>)
			LL_ASSERT(!retval);
    a978:	47a0      	blx	r4
    a97a:	4040      	eors	r0, r0
    a97c:	f380 8811 	msr	BASEPRI, r0
    a980:	f04f 0004 	mov.w	r0, #4
    a984:	df02      	svc	2
			s_xtal_retained = 1;
    a986:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    a988:	4b1a      	ldr	r3, [pc, #104]	; (a9f4 <mayfly_xtal_retain+0xa0>)
    a98a:	4611      	mov	r1, r2
    a98c:	f7fc ff34 	bl	77f8 <mayfly_enqueue>
			LL_ASSERT(!retval);
    a990:	b1f8      	cbz	r0, a9d2 <mayfly_xtal_retain+0x7e>
    a992:	4b12      	ldr	r3, [pc, #72]	; (a9dc <mayfly_xtal_retain+0x88>)
    a994:	9301      	str	r3, [sp, #4]
    a996:	9300      	str	r3, [sp, #0]
    a998:	4b11      	ldr	r3, [pc, #68]	; (a9e0 <mayfly_xtal_retain+0x8c>)
    a99a:	4a12      	ldr	r2, [pc, #72]	; (a9e4 <mayfly_xtal_retain+0x90>)
    a99c:	681c      	ldr	r4, [r3, #0]
    a99e:	4912      	ldr	r1, [pc, #72]	; (a9e8 <mayfly_xtal_retain+0x94>)
    a9a0:	4b12      	ldr	r3, [pc, #72]	; (a9ec <mayfly_xtal_retain+0x98>)
    a9a2:	4815      	ldr	r0, [pc, #84]	; (a9f8 <mayfly_xtal_retain+0xa4>)
    a9a4:	e7e8      	b.n	a978 <mayfly_xtal_retain+0x24>
		if (s_xtal_retained) {
    a9a6:	b1a2      	cbz	r2, a9d2 <mayfly_xtal_retain+0x7e>
			s_xtal_retained = 0;
    a9a8:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    a9aa:	b180      	cbz	r0, a9ce <mayfly_xtal_retain+0x7a>
    a9ac:	2801      	cmp	r0, #1
    a9ae:	d104      	bne.n	a9ba <mayfly_xtal_retain+0x66>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    a9b0:	4b12      	ldr	r3, [pc, #72]	; (a9fc <mayfly_xtal_retain+0xa8>)
			retval = mayfly_enqueue(caller_id,
    a9b2:	2200      	movs	r2, #0
    a9b4:	4611      	mov	r1, r2
    a9b6:	4620      	mov	r0, r4
    a9b8:	e7e8      	b.n	a98c <mayfly_xtal_retain+0x38>
				LL_ASSERT(0);
    a9ba:	4b08      	ldr	r3, [pc, #32]	; (a9dc <mayfly_xtal_retain+0x88>)
    a9bc:	9301      	str	r3, [sp, #4]
    a9be:	9300      	str	r3, [sp, #0]
    a9c0:	4b07      	ldr	r3, [pc, #28]	; (a9e0 <mayfly_xtal_retain+0x8c>)
    a9c2:	4a08      	ldr	r2, [pc, #32]	; (a9e4 <mayfly_xtal_retain+0x90>)
    a9c4:	681c      	ldr	r4, [r3, #0]
    a9c6:	4908      	ldr	r1, [pc, #32]	; (a9e8 <mayfly_xtal_retain+0x94>)
    a9c8:	4b08      	ldr	r3, [pc, #32]	; (a9ec <mayfly_xtal_retain+0x98>)
    a9ca:	480d      	ldr	r0, [pc, #52]	; (aa00 <mayfly_xtal_retain+0xac>)
    a9cc:	e7d4      	b.n	a978 <mayfly_xtal_retain+0x24>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    a9ce:	4b0d      	ldr	r3, [pc, #52]	; (aa04 <mayfly_xtal_retain+0xb0>)
    a9d0:	e7ef      	b.n	a9b2 <mayfly_xtal_retain+0x5e>
}
    a9d2:	b002      	add	sp, #8
    a9d4:	bd10      	pop	{r4, pc}
    a9d6:	bf00      	nop
    a9d8:	20000ac0 	.word	0x20000ac0
    a9dc:	00015359 	.word	0x00015359
    a9e0:	20003a5c 	.word	0x20003a5c
    a9e4:	00016754 	.word	0x00016754
    a9e8:	0001679c 	.word	0x0001679c
    a9ec:	00017f35 	.word	0x00017f35
    a9f0:	0001891b 	.word	0x0001891b
    a9f4:	20003dc8 	.word	0x20003dc8
    a9f8:	0001894b 	.word	0x0001894b
    a9fc:	20003de8 	.word	0x20003de8
    aa00:	000166c8 	.word	0x000166c8
    aa04:	20003dd8 	.word	0x20003dd8

0000aa08 <rx_packet_set>:
{
    aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    aa0a:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    aa0e:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    aa10:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    aa12:	f004 0407 	and.w	r4, r4, #7
{
    aa16:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    aa18:	4620      	mov	r0, r4
    aa1a:	2100      	movs	r1, #0
    aa1c:	f008 f90e 	bl	12c3c <radio_phy_set>
	if (conn->enc_rx) {
    aa20:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    aa24:	f013 0f10 	tst.w	r3, #16
    aa28:	ea4f 0244 	mov.w	r2, r4, lsl #1
    aa2c:	d010      	beq.n	aa50 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    aa2e:	1d29      	adds	r1, r5, #4
    aa30:	f042 0201 	orr.w	r2, r2, #1
    aa34:	b2c9      	uxtb	r1, r1
    aa36:	2008      	movs	r0, #8
    aa38:	f008 f946 	bl	12cc8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    aa3c:	463a      	mov	r2, r7
    aa3e:	4621      	mov	r1, r4
    aa40:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    aa44:	f008 fb84 	bl	13150 <radio_ccm_rx_pkt_set>
}
    aa48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    aa4c:	f008 b96a 	b.w	12d24 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    aa50:	2008      	movs	r0, #8
    aa52:	f042 0201 	orr.w	r2, r2, #1
    aa56:	b2e9      	uxtb	r1, r5
    aa58:	f008 f936 	bl	12cc8 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    aa5c:	4638      	mov	r0, r7
    aa5e:	e7f3      	b.n	aa48 <rx_packet_set+0x40>

0000aa60 <tx_packet_set>:
{
    aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa62:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    aa64:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    aa68:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    aa6a:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    aa6e:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    aa70:	09c9      	lsrs	r1, r1, #7
    aa72:	4620      	mov	r0, r4
    aa74:	f008 f8e2 	bl	12c3c <radio_phy_set>
	if (conn->enc_tx) {
    aa78:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    aa7c:	f013 0f20 	tst.w	r3, #32
    aa80:	ea4f 0244 	mov.w	r2, r4, lsl #1
    aa84:	d00f      	beq.n	aaa6 <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    aa86:	1d29      	adds	r1, r5, #4
    aa88:	b2c9      	uxtb	r1, r1
    aa8a:	2008      	movs	r0, #8
    aa8c:	f042 0201 	orr.w	r2, r2, #1
    aa90:	f008 f91a 	bl	12cc8 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    aa94:	4639      	mov	r1, r7
    aa96:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    aa9a:	f008 fb95 	bl	131c8 <radio_ccm_tx_pkt_set>
}
    aa9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    aaa2:	f008 b945 	b.w	12d30 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    aaa6:	2008      	movs	r0, #8
    aaa8:	f042 0201 	orr.w	r2, r2, #1
    aaac:	b2e9      	uxtb	r1, r5
    aaae:	f008 f90b 	bl	12cc8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    aab2:	4638      	mov	r0, r7
    aab4:	e7f3      	b.n	aa9e <tx_packet_set+0x3e>
	...

0000aab8 <sched_free_win_offset_calc>:
{
    aab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aabc:	b08f      	sub	sp, #60	; 0x3c
    aabe:	4692      	mov	sl, r2
    aac0:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    aac2:	6803      	ldr	r3, [r0, #0]
{
    aac4:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    aac6:	2b00      	cmp	r3, #0
{
    aac8:	4680      	mov	r8, r0
    aaca:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    aacc:	da3b      	bge.n	ab46 <sched_free_win_offset_calc+0x8e>
		u32_t ticks_prepare_to_start =
    aace:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    aad0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    aad4:	4291      	cmp	r1, r2
    aad6:	bf2c      	ite	cs
    aad8:	1a5a      	subcs	r2, r3, r1
    aada:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    aadc:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    aade:	f8d8 200c 	ldr.w	r2, [r8, #12]
    aae2:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    aae4:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    aae6:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    aae8:	18d3      	adds	r3, r2, r3
    aaea:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    aaec:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    aaf0:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    aaf4:	940c      	str	r4, [sp, #48]	; 0x30
    aaf6:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    aaf8:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    aafa:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    aafc:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    aafe:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ab00:	2302      	movs	r3, #2
    ab02:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    ab04:	ab0d      	add	r3, sp, #52	; 0x34
    ab06:	9302      	str	r3, [sp, #8]
    ab08:	4b81      	ldr	r3, [pc, #516]	; (ad10 <sched_free_win_offset_calc+0x258>)
    ab0a:	9301      	str	r3, [sp, #4]
    ab0c:	ab0b      	add	r3, sp, #44	; 0x2c
    ab0e:	9300      	str	r3, [sp, #0]
    ab10:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    ab14:	ab0c      	add	r3, sp, #48	; 0x30
    ab16:	2101      	movs	r1, #1
    ab18:	2000      	movs	r0, #0
    ab1a:	f7fd fd07 	bl	852c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    ab1e:	2802      	cmp	r0, #2
    ab20:	d01a      	beq.n	ab58 <sched_free_win_offset_calc+0xa0>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    ab22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ab24:	b1e3      	cbz	r3, ab60 <sched_free_win_offset_calc+0xa8>
    ab26:	4b7b      	ldr	r3, [pc, #492]	; (ad14 <sched_free_win_offset_calc+0x25c>)
    ab28:	9301      	str	r3, [sp, #4]
    ab2a:	9300      	str	r3, [sp, #0]
    ab2c:	4b7a      	ldr	r3, [pc, #488]	; (ad18 <sched_free_win_offset_calc+0x260>)
    ab2e:	4a7b      	ldr	r2, [pc, #492]	; (ad1c <sched_free_win_offset_calc+0x264>)
    ab30:	681c      	ldr	r4, [r3, #0]
    ab32:	497b      	ldr	r1, [pc, #492]	; (ad20 <sched_free_win_offset_calc+0x268>)
    ab34:	4b7b      	ldr	r3, [pc, #492]	; (ad24 <sched_free_win_offset_calc+0x26c>)
    ab36:	487c      	ldr	r0, [pc, #496]	; (ad28 <sched_free_win_offset_calc+0x270>)
			LL_ASSERT(0);
    ab38:	47a0      	blx	r4
    ab3a:	4040      	eors	r0, r0
    ab3c:	f380 8811 	msr	BASEPRI, r0
    ab40:	f04f 0004 	mov.w	r0, #4
    ab44:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    ab46:	4293      	cmp	r3, r2
    ab48:	bf38      	it	cc
    ab4a:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    ab4c:	2200      	movs	r2, #0
    ab4e:	e7c5      	b.n	aadc <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    ab50:	2101      	movs	r1, #1
    ab52:	2000      	movs	r0, #0
    ab54:	f7fd fd68 	bl	8628 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    ab58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ab5a:	2b02      	cmp	r3, #2
    ab5c:	d0f8      	beq.n	ab50 <sched_free_win_offset_calc+0x98>
    ab5e:	e7e0      	b.n	ab22 <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    ab60:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    ab64:	2aff      	cmp	r2, #255	; 0xff
    ab66:	d067      	beq.n	ac38 <sched_free_win_offset_calc+0x180>
		if ((ticker_id_prev != 0xff) &&
    ab68:	2fff      	cmp	r7, #255	; 0xff
    ab6a:	d00c      	beq.n	ab86 <sched_free_win_offset_calc+0xce>
    ab6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ab6e:	4599      	cmp	r9, r3
    ab70:	d009      	beq.n	ab86 <sched_free_win_offset_calc+0xce>
			LL_ASSERT(0);
    ab72:	4b68      	ldr	r3, [pc, #416]	; (ad14 <sched_free_win_offset_calc+0x25c>)
    ab74:	9301      	str	r3, [sp, #4]
    ab76:	9300      	str	r3, [sp, #0]
    ab78:	4b67      	ldr	r3, [pc, #412]	; (ad18 <sched_free_win_offset_calc+0x260>)
    ab7a:	4a68      	ldr	r2, [pc, #416]	; (ad1c <sched_free_win_offset_calc+0x264>)
    ab7c:	681c      	ldr	r4, [r3, #0]
    ab7e:	4968      	ldr	r1, [pc, #416]	; (ad20 <sched_free_win_offset_calc+0x268>)
    ab80:	4b68      	ldr	r3, [pc, #416]	; (ad24 <sched_free_win_offset_calc+0x26c>)
    ab82:	486a      	ldr	r0, [pc, #424]	; (ad2c <sched_free_win_offset_calc+0x274>)
    ab84:	e7d8      	b.n	ab38 <sched_free_win_offset_calc+0x80>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    ab86:	2a05      	cmp	r2, #5
    ab88:	d951      	bls.n	ac2e <sched_free_win_offset_calc+0x176>
				  _radio.connection_count)) {
    ab8a:	4869      	ldr	r0, [pc, #420]	; (ad30 <sched_free_win_offset_calc+0x278>)
    ab8c:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    ab90:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    ab92:	429a      	cmp	r2, r3
    ab94:	da4b      	bge.n	ac2e <sched_free_win_offset_calc+0x176>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    ab96:	2a06      	cmp	r2, #6
    ab98:	f000 8092 	beq.w	acc0 <sched_free_win_offset_calc+0x208>
		if (ticker_id_other != 0xFF) {
    ab9c:	9b06      	ldr	r3, [sp, #24]
    ab9e:	2bff      	cmp	r3, #255	; 0xff
    aba0:	d14a      	bne.n	ac38 <sched_free_win_offset_calc+0x180>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    aba2:	3a07      	subs	r2, #7
    aba4:	b292      	uxth	r2, r2
    aba6:	f44f 71aa 	mov.w	r1, #340	; 0x154
    abaa:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    abae:	f7fc fd8d 	bl	76cc <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    abb2:	4580      	cmp	r8, r0
    abb4:	d03b      	beq.n	ac2e <sched_free_win_offset_calc+0x176>
    abb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    abb8:	b91b      	cbnz	r3, abc2 <sched_free_win_offset_calc+0x10a>
    abba:	f990 301d 	ldrsb.w	r3, [r0, #29]
    abbe:	2b00      	cmp	r3, #0
    abc0:	db35      	blt.n	ac2e <sched_free_win_offset_calc+0x176>
			u32_t ticks_to_expire_normal =
    abc2:	9b05      	ldr	r3, [sp, #20]
    abc4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    abc6:	6841      	ldr	r1, [r0, #4]
    abc8:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    abca:	6803      	ldr	r3, [r0, #0]
    abcc:	2b00      	cmp	r3, #0
    abce:	da4e      	bge.n	ac6e <sched_free_win_offset_calc+0x1b6>
				u32_t ticks_prepare_to_start =
    abd0:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    abd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    abd6:	428a      	cmp	r2, r1
    abd8:	bf2c      	ite	cs
    abda:	18b6      	addcs	r6, r6, r2
    abdc:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    abde:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    abe0:	68c2      	ldr	r2, [r0, #12]
    abe2:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    abe6:	444b      	add	r3, r9
    abe8:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    abea:	f8da 3000 	ldr.w	r3, [sl]
    abee:	429e      	cmp	r6, r3
    abf0:	d916      	bls.n	ac20 <sched_free_win_offset_calc+0x168>
    abf2:	429d      	cmp	r5, r3
    abf4:	bf38      	it	cc
    abf6:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    abf8:	9b07      	ldr	r3, [sp, #28]
    abfa:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    abfe:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ac00:	781b      	ldrb	r3, [r3, #0]
    ac02:	42a3      	cmp	r3, r4
    ac04:	d905      	bls.n	ac12 <sched_free_win_offset_calc+0x15a>
				       (ticker_ticks_diff_get(
    ac06:	4629      	mov	r1, r5
    ac08:	4630      	mov	r0, r6
    ac0a:	f7fd fd25 	bl	8658 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    ac0e:	42b8      	cmp	r0, r7
    ac10:	d231      	bcs.n	ac76 <sched_free_win_offset_calc+0x1be>
				if (_win_offset >= conn_interval) {
    ac12:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    ac16:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    ac18:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    ac1c:	4293      	cmp	r3, r2
    ac1e:	d20b      	bcs.n	ac38 <sched_free_win_offset_calc+0x180>
			ticks_anchor_prev = ticks_anchor;
    ac20:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    ac24:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    ac28:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    ac2c:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    ac2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ac30:	781b      	ldrb	r3, [r3, #0]
    ac32:	42a3      	cmp	r3, r4
    ac34:	f63f af64 	bhi.w	ab00 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    ac38:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    ac3c:	2bff      	cmp	r3, #255	; 0xff
    ac3e:	d111      	bne.n	ac64 <sched_free_win_offset_calc+0x1ac>
    ac40:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    ac44:	f8df 80ec 	ldr.w	r8, [pc, #236]	; ad34 <sched_free_win_offset_calc+0x27c>
    ac48:	a72f      	add	r7, pc, #188	; (adr r7, ad08 <sched_free_win_offset_calc+0x250>)
    ac4a:	e9d7 6700 	ldrd	r6, r7, [r7]
    ac4e:	429d      	cmp	r5, r3
    ac50:	bf38      	it	cc
    ac52:	461d      	movcc	r5, r3
    ac54:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    ac58:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ac5a:	781b      	ldrb	r3, [r3, #0]
    ac5c:	42a3      	cmp	r3, r4
    ac5e:	d831      	bhi.n	acc4 <sched_free_win_offset_calc+0x20c>
		*ticks_to_offset_next = ticks_to_expire_prev;
    ac60:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    ac64:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ac66:	701c      	strb	r4, [r3, #0]
}
    ac68:	b00f      	add	sp, #60	; 0x3c
    ac6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    ac6e:	428b      	cmp	r3, r1
    ac70:	bf38      	it	cc
    ac72:	460b      	movcc	r3, r1
    ac74:	e7b4      	b.n	abe0 <sched_free_win_offset_calc+0x128>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    ac76:	4a2f      	ldr	r2, [pc, #188]	; (ad34 <sched_free_win_offset_calc+0x27c>)
    ac78:	eb05 030b 	add.w	r3, r5, fp
    ac7c:	fba3 0102 	umull	r0, r1, r3, r2
    ac80:	2207      	movs	r2, #7
    ac82:	fb02 1103 	mla	r1, r2, r3, r1
    ac86:	a320      	add	r3, pc, #128	; (adr r3, ad08 <sched_free_win_offset_calc+0x250>)
    ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
    ac8c:	f7f5 fac2 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    ac90:	f240 43e2 	movw	r3, #1250	; 0x4e2
    ac94:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    ac98:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    ac9a:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    ac9c:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    ac9e:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    aca2:	d20b      	bcs.n	acbc <sched_free_win_offset_calc+0x204>
					memcpy(win_offset +
    aca4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    aca6:	2202      	movs	r2, #2
    aca8:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    acac:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    acb0:	3401      	adds	r4, #1
					memcpy(win_offset +
    acb2:	f7f6 ffc9 	bl	1c48 <memcpy>
					offset_index++;
    acb6:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    acb8:	3528      	adds	r5, #40	; 0x28
    acba:	e7a0      	b.n	abfe <sched_free_win_offset_calc+0x146>
						ticks_to_expire_prev = 0;
    acbc:	2500      	movs	r5, #0
    acbe:	e7a8      	b.n	ac12 <sched_free_win_offset_calc+0x15a>
    acc0:	9206      	str	r2, [sp, #24]
    acc2:	e7b4      	b.n	ac2e <sched_free_win_offset_calc+0x176>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    acc4:	eb05 030b 	add.w	r3, r5, fp
    acc8:	fba3 0108 	umull	r0, r1, r3, r8
    accc:	fb09 1103 	mla	r1, r9, r3, r1
    acd0:	4632      	mov	r2, r6
    acd2:	463b      	mov	r3, r7
    acd4:	f7f5 fa9e 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    acd8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    acdc:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    ace0:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    ace2:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    ace4:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    ace6:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    acea:	d90b      	bls.n	ad04 <sched_free_win_offset_calc+0x24c>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    acec:	9b19      	ldr	r3, [sp, #100]	; 0x64
    acee:	2202      	movs	r2, #2
    acf0:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    acf4:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    acf8:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    acfa:	f7f6 ffa5 	bl	1c48 <memcpy>
			offset_index++;
    acfe:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    ad00:	3528      	adds	r5, #40	; 0x28
    ad02:	e7a9      	b.n	ac58 <sched_free_win_offset_calc+0x1a0>
				ticks_to_expire_prev = 0;
    ad04:	2500      	movs	r5, #0
    ad06:	e7ab      	b.n	ac60 <sched_free_win_offset_calc+0x1a8>
    ad08:	3b9aca00 	.word	0x3b9aca00
    ad0c:	00000000 	.word	0x00000000
    ad10:	0000a279 	.word	0x0000a279
    ad14:	00015359 	.word	0x00015359
    ad18:	20003a5c 	.word	0x20003a5c
    ad1c:	00016754 	.word	0x00016754
    ad20:	0001679c 	.word	0x0001679c
    ad24:	00017fb1 	.word	0x00017fb1
    ad28:	00018cd0 	.word	0x00018cd0
    ad2c:	000166c8 	.word	0x000166c8
    ad30:	200008c0 	.word	0x200008c0
    ad34:	1afd498d 	.word	0x1afd498d

0000ad38 <mayfly_sched_free_win_offset_calc>:
{
    ad38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    ad3a:	2300      	movs	r3, #0
    ad3c:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    ad3e:	2306      	movs	r3, #6
    ad40:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    ad44:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    ad48:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    ad4c:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    ad4e:	bfbe      	ittt	lt
    ad50:	4602      	movlt	r2, r0
    ad52:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    ad54:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    ad58:	9101      	str	r1, [sp, #4]
    ad5a:	f10d 010b 	add.w	r1, sp, #11
    ad5e:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    ad60:	bfa8      	it	ge
    ad62:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    ad64:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    ad68:	2100      	movs	r1, #0
    ad6a:	f7ff fea5 	bl	aab8 <sched_free_win_offset_calc>
}
    ad6e:	b005      	add	sp, #20
    ad70:	f85d fb04 	ldr.w	pc, [sp], #4
    ad74:	0000      	movs	r0, r0
	...

0000ad78 <mayfly_sched_win_offset_select>:
{
    ad78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    ad7c:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    ad80:	b089      	sub	sp, #36	; 0x24
    ad82:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    ad84:	4840      	ldr	r0, [pc, #256]	; (ae88 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    ad86:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    ad88:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    ad8a:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    ad8e:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    ad92:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    ad96:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    ad98:	fb03 1102 	mla	r1, r3, r2, r1
    ad9c:	a338      	add	r3, pc, #224	; (adr r3, ae80 <mayfly_sched_win_offset_select+0x108>)
    ad9e:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    ada2:	9505      	str	r5, [sp, #20]
    ada4:	6075      	str	r5, [r6, #4]
    ada6:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    ada8:	f7f5 fa34 	bl	214 <__aeabi_uldivmod>
    adac:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    adae:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    adb2:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    adb6:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    adba:	9100      	str	r1, [sp, #0]
    adbc:	9601      	str	r6, [sp, #4]
    adbe:	2101      	movs	r1, #1
    adc0:	4620      	mov	r0, r4
    adc2:	f7ff fe79 	bl	aab8 <sched_free_win_offset_calc>
    adc6:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    adca:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    adce:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    add2:	2202      	movs	r2, #2
    add4:	4639      	mov	r1, r7
    add6:	f10d 000e 	add.w	r0, sp, #14
    adda:	f7f6 ff35 	bl	1c48 <memcpy>
		while (offset_index_m < offset_m_max) {
    adde:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    ade2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    ade6:	2300      	movs	r3, #0
    ade8:	b2d9      	uxtb	r1, r3
    adea:	4288      	cmp	r0, r1
    adec:	d811      	bhi.n	ae12 <mayfly_sched_win_offset_select+0x9a>
    adee:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    adf0:	4547      	cmp	r7, r8
    adf2:	d1ee      	bne.n	add2 <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    adf4:	b9b5      	cbnz	r5, ae24 <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    adf6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    adfa:	f240 43e2 	movw	r3, #1250	; 0x4e2
    adfe:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    ae00:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    ae04:	2202      	movs	r2, #2
    ae06:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    ae08:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    ae0c:	f7f6 ff1c 	bl	1c48 <memcpy>
    ae10:	e027      	b.n	ae62 <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    ae12:	454a      	cmp	r2, r9
    ae14:	d004      	beq.n	ae20 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    ae16:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    ae1a:	4291      	cmp	r1, r2
    ae1c:	d024      	beq.n	ae68 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    ae1e:	2501      	movs	r5, #1
    ae20:	3301      	adds	r3, #1
    ae22:	e7e1      	b.n	ade8 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    ae24:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ae28:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    ae2c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ae30:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    ae34:	4b15      	ldr	r3, [pc, #84]	; (ae8c <mayfly_sched_win_offset_select+0x114>)
    ae36:	2200      	movs	r2, #0
    ae38:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    ae3c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ae40:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    ae44:	f042 0203 	orr.w	r2, r2, #3
    ae48:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    ae4c:	2203      	movs	r2, #3
    ae4e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    ae52:	2211      	movs	r2, #17
    ae54:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    ae58:	220f      	movs	r2, #15
    ae5a:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    ae5e:	2220      	movs	r2, #32
    ae60:	701a      	strb	r2, [r3, #0]
}
    ae62:	b009      	add	sp, #36	; 0x24
    ae64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    ae68:	f240 43e2 	movw	r3, #1250	; 0x4e2
    ae6c:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    ae6e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    ae72:	2202      	movs	r2, #2
    ae74:	f10d 010e 	add.w	r1, sp, #14
    ae78:	e7c6      	b.n	ae08 <mayfly_sched_win_offset_select+0x90>
    ae7a:	bf00      	nop
    ae7c:	f3af 8000 	nop.w
    ae80:	1afd498d 	.word	0x1afd498d
    ae84:	00000007 	.word	0x00000007
    ae88:	09ce5400 	.word	0x09ce5400
    ae8c:	200008c0 	.word	0x200008c0

0000ae90 <sched_after_mstr_free_slot_get>:
{
    ae90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae94:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    ae96:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    ae98:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    ae9a:	f8df 9144 	ldr.w	r9, [pc, #324]	; afe0 <sched_after_mstr_free_slot_get+0x150>
	ticker_id = ticker_id_prev = 0xff;
    ae9e:	f88d 501f 	strb.w	r5, [sp, #31]
{
    aea2:	4680      	mov	r8, r0
    aea4:	4693      	mov	fp, r2
    aea6:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    aea8:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    aeac:	601c      	str	r4, [r3, #0]
    aeae:	9408      	str	r4, [sp, #32]
    aeb0:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    aeb2:	2302      	movs	r3, #2
    aeb4:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    aeb6:	ab09      	add	r3, sp, #36	; 0x24
    aeb8:	9302      	str	r3, [sp, #8]
    aeba:	4b41      	ldr	r3, [pc, #260]	; (afc0 <sched_after_mstr_free_slot_get+0x130>)
    aebc:	9301      	str	r3, [sp, #4]
    aebe:	ab08      	add	r3, sp, #32
    aec0:	9300      	str	r3, [sp, #0]
    aec2:	f10d 021f 	add.w	r2, sp, #31
    aec6:	465b      	mov	r3, fp
    aec8:	4641      	mov	r1, r8
    aeca:	2000      	movs	r0, #0
    aecc:	f7fd fb2e 	bl	852c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    aed0:	2802      	cmp	r0, #2
    aed2:	d015      	beq.n	af00 <sched_after_mstr_free_slot_get+0x70>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    aed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aed6:	b1bb      	cbz	r3, af08 <sched_after_mstr_free_slot_get+0x78>
    aed8:	4b3a      	ldr	r3, [pc, #232]	; (afc4 <sched_after_mstr_free_slot_get+0x134>)
    aeda:	9301      	str	r3, [sp, #4]
    aedc:	9300      	str	r3, [sp, #0]
    aede:	4b3a      	ldr	r3, [pc, #232]	; (afc8 <sched_after_mstr_free_slot_get+0x138>)
    aee0:	4a3a      	ldr	r2, [pc, #232]	; (afcc <sched_after_mstr_free_slot_get+0x13c>)
    aee2:	681c      	ldr	r4, [r3, #0]
    aee4:	493a      	ldr	r1, [pc, #232]	; (afd0 <sched_after_mstr_free_slot_get+0x140>)
    aee6:	4b3b      	ldr	r3, [pc, #236]	; (afd4 <sched_after_mstr_free_slot_get+0x144>)
    aee8:	483b      	ldr	r0, [pc, #236]	; (afd8 <sched_after_mstr_free_slot_get+0x148>)
    aeea:	47a0      	blx	r4
    aeec:	4040      	eors	r0, r0
    aeee:	f380 8811 	msr	BASEPRI, r0
    aef2:	f04f 0004 	mov.w	r0, #4
    aef6:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    aef8:	4641      	mov	r1, r8
    aefa:	2000      	movs	r0, #0
    aefc:	f7fd fb94 	bl	8628 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    af00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    af02:	2b02      	cmp	r3, #2
    af04:	d0f8      	beq.n	aef8 <sched_after_mstr_free_slot_get+0x68>
    af06:	e7e5      	b.n	aed4 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    af08:	f89d 201f 	ldrb.w	r2, [sp, #31]
    af0c:	2aff      	cmp	r2, #255	; 0xff
    af0e:	d04e      	beq.n	afae <sched_after_mstr_free_slot_get+0x11e>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    af10:	2a06      	cmp	r2, #6
    af12:	d9ce      	bls.n	aeb2 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    af14:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    af18:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    af1a:	429a      	cmp	r2, r3
    af1c:	dac9      	bge.n	aeb2 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    af1e:	3a07      	subs	r2, #7
    af20:	b292      	uxth	r2, r2
    af22:	f44f 71aa 	mov.w	r1, #340	; 0x154
    af26:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    af2a:	f7fc fbcf 	bl	76cc <mem_get>
		if (conn && !conn->role) {
    af2e:	2800      	cmp	r0, #0
    af30:	d0bf      	beq.n	aeb2 <sched_after_mstr_free_slot_get+0x22>
    af32:	f990 301d 	ldrsb.w	r3, [r0, #29]
    af36:	2b00      	cmp	r3, #0
    af38:	dbbb      	blt.n	aeb2 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    af3a:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    af3c:	9a08      	ldr	r2, [sp, #32]
    af3e:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    af42:	2b00      	cmp	r3, #0
    af44:	da12      	bge.n	af6c <sched_after_mstr_free_slot_get+0xdc>
    af46:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    af48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    af4c:	4571      	cmp	r1, lr
    af4e:	bf2c      	ite	cs
    af50:	1852      	addcs	r2, r2, r1
    af52:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    af54:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    af56:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    af58:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    af5a:	f101 0104 	add.w	r1, r1, #4
    af5e:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    af60:	d108      	bne.n	af74 <sched_after_mstr_free_slot_get+0xe4>
			ticker_id_prev = ticker_id;
    af62:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    af66:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    af68:	4616      	mov	r6, r2
    af6a:	e7a2      	b.n	aeb2 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    af6c:	4573      	cmp	r3, lr
    af6e:	bf38      	it	cc
    af70:	4673      	movcc	r3, lr
    af72:	e7f0      	b.n	af56 <sched_after_mstr_free_slot_get+0xc6>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    af74:	4631      	mov	r1, r6
    af76:	4610      	mov	r0, r2
    af78:	9305      	str	r3, [sp, #20]
    af7a:	9204      	str	r2, [sp, #16]
    af7c:	f7fd fb6c 	bl	8658 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    af80:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    af84:	4288      	cmp	r0, r1
    af86:	9a04      	ldr	r2, [sp, #16]
    af88:	9b05      	ldr	r3, [sp, #20]
    af8a:	d9ea      	bls.n	af62 <sched_after_mstr_free_slot_get+0xd2>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    af8c:	4813      	ldr	r0, [pc, #76]	; (afdc <sched_after_mstr_free_slot_get+0x14c>)
    af8e:	4434      	add	r4, r6
    af90:	fba4 0100 	umull	r0, r1, r4, r0
    af94:	2307      	movs	r3, #7
    af96:	fb03 1104 	mla	r1, r3, r4, r1
    af9a:	a307      	add	r3, pc, #28	; (adr r3, afb8 <sched_after_mstr_free_slot_get+0x128>)
    af9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    afa0:	f7f5 f938 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    afa4:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    afa6:	6038      	str	r0, [r7, #0]
}
    afa8:	b00b      	add	sp, #44	; 0x2c
    afaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    afae:	2dff      	cmp	r5, #255	; 0xff
    afb0:	d1ec      	bne.n	af8c <sched_after_mstr_free_slot_get+0xfc>
    afb2:	e7f9      	b.n	afa8 <sched_after_mstr_free_slot_get+0x118>
    afb4:	f3af 8000 	nop.w
    afb8:	3b9aca00 	.word	0x3b9aca00
    afbc:	00000000 	.word	0x00000000
    afc0:	0000a279 	.word	0x0000a279
    afc4:	00015359 	.word	0x00015359
    afc8:	20003a5c 	.word	0x20003a5c
    afcc:	00016754 	.word	0x00016754
    afd0:	0001679c 	.word	0x0001679c
    afd4:	00017f71 	.word	0x00017f71
    afd8:	00018cd0 	.word	0x00018cd0
    afdc:	1afd498d 	.word	0x1afd498d
    afe0:	200008c0 	.word	0x200008c0

0000afe4 <isr_adv_ci_adva_check>:
{
    afe4:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    afe6:	7804      	ldrb	r4, [r0, #0]
    afe8:	780a      	ldrb	r2, [r1, #0]
    afea:	f3c4 1380 	ubfx	r3, r4, #6, #1
    afee:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    aff2:	d119      	bne.n	b028 <isr_adv_ci_adva_check+0x44>
    aff4:	f004 040f 	and.w	r4, r4, #15
    aff8:	2c01      	cmp	r4, #1
    affa:	f101 0608 	add.w	r6, r1, #8
    affe:	f100 0502 	add.w	r5, r0, #2
    b002:	d008      	beq.n	b016 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    b004:	2206      	movs	r2, #6
    b006:	4631      	mov	r1, r6
    b008:	4628      	mov	r0, r5
    b00a:	f7f6 fe08 	bl	1c1e <memcmp>
			 BDADDR_SIZE)) ||
    b00e:	fab0 f080 	clz	r0, r0
    b012:	0940      	lsrs	r0, r0, #5
    b014:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    b016:	2206      	movs	r2, #6
    b018:	4631      	mov	r1, r6
    b01a:	4628      	mov	r0, r5
    b01c:	f7f6 fdff 	bl	1c1e <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    b020:	2800      	cmp	r0, #0
    b022:	d1ef      	bne.n	b004 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    b024:	4620      	mov	r0, r4
    b026:	bd70      	pop	{r4, r5, r6, pc}
    b028:	2000      	movs	r0, #0
}
    b02a:	bd70      	pop	{r4, r5, r6, pc}

0000b02c <packet_rx_enqueue>:
{
    b02c:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    b02e:	4a20      	ldr	r2, [pc, #128]	; (b0b0 <packet_rx_enqueue+0x84>)
    b030:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    b034:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    b038:	4299      	cmp	r1, r3
    b03a:	d10f      	bne.n	b05c <packet_rx_enqueue+0x30>
    b03c:	4b1d      	ldr	r3, [pc, #116]	; (b0b4 <packet_rx_enqueue+0x88>)
    b03e:	9301      	str	r3, [sp, #4]
    b040:	9300      	str	r3, [sp, #0]
    b042:	4b1d      	ldr	r3, [pc, #116]	; (b0b8 <packet_rx_enqueue+0x8c>)
    b044:	4a1d      	ldr	r2, [pc, #116]	; (b0bc <packet_rx_enqueue+0x90>)
    b046:	681c      	ldr	r4, [r3, #0]
    b048:	491d      	ldr	r1, [pc, #116]	; (b0c0 <packet_rx_enqueue+0x94>)
    b04a:	4b1e      	ldr	r3, [pc, #120]	; (b0c4 <packet_rx_enqueue+0x98>)
    b04c:	481e      	ldr	r0, [pc, #120]	; (b0c8 <packet_rx_enqueue+0x9c>)
	LL_ASSERT(link);
    b04e:	47a0      	blx	r4
    b050:	4040      	eors	r0, r0
    b052:	f380 8811 	msr	BASEPRI, r0
    b056:	f04f 0004 	mov.w	r0, #4
    b05a:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    b05c:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    b060:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    b064:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b068:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    b06c:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b06e:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    b070:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    b074:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    b078:	3301      	adds	r3, #1
    b07a:	b2db      	uxtb	r3, r3
		last = 0;
    b07c:	429c      	cmp	r4, r3
    b07e:	bf08      	it	eq
    b080:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    b082:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    b086:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    b08a:	f7fc fb44 	bl	7716 <memq_enqueue>
	LL_ASSERT(link);
    b08e:	b948      	cbnz	r0, b0a4 <packet_rx_enqueue+0x78>
    b090:	4b08      	ldr	r3, [pc, #32]	; (b0b4 <packet_rx_enqueue+0x88>)
    b092:	9301      	str	r3, [sp, #4]
    b094:	9300      	str	r3, [sp, #0]
    b096:	4b08      	ldr	r3, [pc, #32]	; (b0b8 <packet_rx_enqueue+0x8c>)
    b098:	4a08      	ldr	r2, [pc, #32]	; (b0bc <packet_rx_enqueue+0x90>)
    b09a:	681c      	ldr	r4, [r3, #0]
    b09c:	4908      	ldr	r1, [pc, #32]	; (b0c0 <packet_rx_enqueue+0x94>)
    b09e:	4b09      	ldr	r3, [pc, #36]	; (b0c4 <packet_rx_enqueue+0x98>)
    b0a0:	480a      	ldr	r0, [pc, #40]	; (b0cc <packet_rx_enqueue+0xa0>)
    b0a2:	e7d4      	b.n	b04e <packet_rx_enqueue+0x22>
}
    b0a4:	b002      	add	sp, #8
    b0a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    b0aa:	f006 bc9f 	b.w	119ec <radio_event_callback>
    b0ae:	bf00      	nop
    b0b0:	200008c0 	.word	0x200008c0
    b0b4:	00015359 	.word	0x00015359
    b0b8:	20003a5c 	.word	0x20003a5c
    b0bc:	00016754 	.word	0x00016754
    b0c0:	0001679c 	.word	0x0001679c
    b0c4:	00018102 	.word	0x00018102
    b0c8:	000189c8 	.word	0x000189c8
    b0cc:	000181eb 	.word	0x000181eb

0000b0d0 <isr_scan_tgta_check>:
{
    b0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b0d4:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    b0d6:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    b0d8:	f101 0808 	add.w	r8, r1, #8
{
    b0dc:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    b0de:	09c0      	lsrs	r0, r0, #7
    b0e0:	4641      	mov	r1, r8
{
    b0e2:	4691      	mov	r9, r2
    b0e4:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    b0e6:	f007 f939 	bl	1235c <ctrl_rl_addr_resolve>
    b0ea:	4604      	mov	r4, r0
    b0ec:	b9d8      	cbnz	r0, b126 <isr_scan_tgta_check+0x56>
    b0ee:	4f1c      	ldr	r7, [pc, #112]	; (b160 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    b0f0:	f1ba 0f00 	cmp.w	sl, #0
    b0f4:	d10e      	bne.n	b114 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    b0f6:	782b      	ldrb	r3, [r5, #0]
    b0f8:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    b0fc:	09db      	lsrs	r3, r3, #7
    b0fe:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    b102:	d113      	bne.n	b12c <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    b104:	2206      	movs	r2, #6
    b106:	4641      	mov	r1, r8
    b108:	4816      	ldr	r0, [pc, #88]	; (b164 <isr_scan_tgta_check+0x94>)
    b10a:	f7f6 fd88 	bl	1c1e <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    b10e:	b968      	cbnz	r0, b12c <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    b110:	2001      	movs	r0, #1
    b112:	e012      	b.n	b13a <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    b114:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    b118:	07db      	lsls	r3, r3, #31
    b11a:	d5ec      	bpl.n	b0f6 <isr_scan_tgta_check+0x26>
    b11c:	4648      	mov	r0, r9
    b11e:	f006 fe61 	bl	11de4 <ctrl_lrpa_get>
    b122:	2800      	cmp	r0, #0
    b124:	d0e7      	beq.n	b0f6 <isr_scan_tgta_check+0x26>
}
    b126:	4620      	mov	r0, r4
    b128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    b12c:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    b130:	f3c0 1001 	ubfx	r0, r0, #4, #2
    b134:	f010 0002 	ands.w	r0, r0, #2
    b138:	d101      	bne.n	b13e <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    b13a:	4604      	mov	r4, r0
    b13c:	e7f3      	b.n	b126 <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    b13e:	f995 3000 	ldrsb.w	r3, [r5]
    b142:	2b00      	cmp	r3, #0
    b144:	da09      	bge.n	b15a <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    b146:	7b6b      	ldrb	r3, [r5, #13]
    b148:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b14c:	2b40      	cmp	r3, #64	; 0x40
    b14e:	d104      	bne.n	b15a <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    b150:	2e00      	cmp	r6, #0
    b152:	d0dd      	beq.n	b110 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    b154:	2001      	movs	r0, #1
    b156:	7030      	strb	r0, [r6, #0]
    b158:	e7ef      	b.n	b13a <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    b15a:	2000      	movs	r0, #0
    b15c:	e7ed      	b.n	b13a <isr_scan_tgta_check+0x6a>
    b15e:	bf00      	nop
    b160:	200008c0 	.word	0x200008c0
    b164:	200009a4 	.word	0x200009a4

0000b168 <isr_rx_scan_report>:
{
    b168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b16c:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    b16e:	2003      	movs	r0, #3
{
    b170:	460f      	mov	r7, r1
    b172:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    b174:	f7ff f8c0 	bl	a2f8 <packet_rx_reserve_get>
	if (node_rx == 0) {
    b178:	4604      	mov	r4, r0
    b17a:	2800      	cmp	r0, #0
    b17c:	d03f      	beq.n	b1fe <isr_rx_scan_report+0x96>
	node_rx->hdr.handle = 0xffff;
    b17e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b182:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    b184:	4b1f      	ldr	r3, [pc, #124]	; (b204 <isr_rx_scan_report+0x9c>)
    b186:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    b18a:	075a      	lsls	r2, r3, #29
    b18c:	d033      	beq.n	b1f6 <isr_rx_scan_report+0x8e>
		switch (_radio.scanner.phy) {
    b18e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b192:	b2da      	uxtb	r2, r3
    b194:	2a01      	cmp	r2, #1
    b196:	d011      	beq.n	b1bc <isr_rx_scan_report+0x54>
    b198:	2a04      	cmp	r2, #4
    b19a:	d010      	beq.n	b1be <isr_rx_scan_report+0x56>
			LL_ASSERT(0);
    b19c:	4b1a      	ldr	r3, [pc, #104]	; (b208 <isr_rx_scan_report+0xa0>)
    b19e:	9301      	str	r3, [sp, #4]
    b1a0:	9300      	str	r3, [sp, #0]
    b1a2:	4b1a      	ldr	r3, [pc, #104]	; (b20c <isr_rx_scan_report+0xa4>)
    b1a4:	4a1a      	ldr	r2, [pc, #104]	; (b210 <isr_rx_scan_report+0xa8>)
    b1a6:	681c      	ldr	r4, [r3, #0]
    b1a8:	491a      	ldr	r1, [pc, #104]	; (b214 <isr_rx_scan_report+0xac>)
    b1aa:	4b1b      	ldr	r3, [pc, #108]	; (b218 <isr_rx_scan_report+0xb0>)
    b1ac:	481b      	ldr	r0, [pc, #108]	; (b21c <isr_rx_scan_report+0xb4>)
    b1ae:	47a0      	blx	r4
    b1b0:	4040      	eors	r0, r0
    b1b2:	f380 8811 	msr	BASEPRI, r0
    b1b6:	f04f 0004 	mov.w	r0, #4
    b1ba:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    b1bc:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    b1be:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    b1c2:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    b1c4:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    b1c8:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    b1cc:	f1b9 0f00 	cmp.w	r9, #0
    b1d0:	d013      	beq.n	b1fa <isr_rx_scan_report+0x92>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    b1d2:	f007 fe55 	bl	12e80 <radio_rssi_get>
			     pdu_adv_rx->len] =
    b1d6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    b1da:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    b1de:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    b1e0:	442b      	add	r3, r5
    b1e2:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    b1e4:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    b1e6:	441d      	add	r5, r3
    b1e8:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    b1ea:	f7ff ff1f 	bl	b02c <packet_rx_enqueue>
	return 0;
    b1ee:	2000      	movs	r0, #0
}
    b1f0:	b003      	add	sp, #12
    b1f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    b1f6:	2302      	movs	r3, #2
    b1f8:	e7e1      	b.n	b1be <isr_rx_scan_report+0x56>
			     pdu_adv_rx->len] =
    b1fa:	207f      	movs	r0, #127	; 0x7f
    b1fc:	e7ed      	b.n	b1da <isr_rx_scan_report+0x72>
		return 1;
    b1fe:	2001      	movs	r0, #1
    b200:	e7f6      	b.n	b1f0 <isr_rx_scan_report+0x88>
    b202:	bf00      	nop
    b204:	200008c0 	.word	0x200008c0
    b208:	00015359 	.word	0x00015359
    b20c:	20003a5c 	.word	0x20003a5c
    b210:	00016754 	.word	0x00016754
    b214:	0001679c 	.word	0x0001679c
    b218:	00017d98 	.word	0x00017d98
    b21c:	000166c8 	.word	0x000166c8

0000b220 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    b220:	4a0b      	ldr	r2, [pc, #44]	; (b250 <rx_fc_lock+0x30>)
    b222:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    b226:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    b22a:	4299      	cmp	r1, r3
    b22c:	d10e      	bne.n	b24c <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    b22e:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    b232:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    b236:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    b23a:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    b23e:	3301      	adds	r3, #1
    b240:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    b242:	2b03      	cmp	r3, #3
    b244:	bf08      	it	eq
    b246:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    b248:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    b24c:	4770      	bx	lr
    b24e:	bf00      	nop
    b250:	200008c0 	.word	0x200008c0

0000b254 <ticker_success_assert>:
{
    b254:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    b256:	b178      	cbz	r0, b278 <ticker_success_assert+0x24>
    b258:	4b08      	ldr	r3, [pc, #32]	; (b27c <ticker_success_assert+0x28>)
    b25a:	9301      	str	r3, [sp, #4]
    b25c:	9300      	str	r3, [sp, #0]
    b25e:	4b08      	ldr	r3, [pc, #32]	; (b280 <ticker_success_assert+0x2c>)
    b260:	4a08      	ldr	r2, [pc, #32]	; (b284 <ticker_success_assert+0x30>)
    b262:	681c      	ldr	r4, [r3, #0]
    b264:	4908      	ldr	r1, [pc, #32]	; (b288 <ticker_success_assert+0x34>)
    b266:	4b09      	ldr	r3, [pc, #36]	; (b28c <ticker_success_assert+0x38>)
    b268:	4809      	ldr	r0, [pc, #36]	; (b290 <ticker_success_assert+0x3c>)
    b26a:	47a0      	blx	r4
    b26c:	4040      	eors	r0, r0
    b26e:	f380 8811 	msr	BASEPRI, r0
    b272:	f04f 0004 	mov.w	r0, #4
    b276:	df02      	svc	2
}
    b278:	b002      	add	sp, #8
    b27a:	bd10      	pop	{r4, pc}
    b27c:	00015359 	.word	0x00015359
    b280:	20003a5c 	.word	0x20003a5c
    b284:	00016754 	.word	0x00016754
    b288:	0001679c 	.word	0x0001679c
    b28c:	00017e81 	.word	0x00017e81
    b290:	00018de8 	.word	0x00018de8

0000b294 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    b294:	2801      	cmp	r0, #1
{
    b296:	b513      	push	{r0, r1, r4, lr}
    b298:	4b12      	ldr	r3, [pc, #72]	; (b2e4 <ticker_stop_adv_assert+0x50>)
	if (status == TICKER_STATUS_FAILURE) {
    b29a:	d116      	bne.n	b2ca <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    b29c:	7c9a      	ldrb	r2, [r3, #18]
    b29e:	2a05      	cmp	r2, #5
    b2a0:	d103      	bne.n	b2aa <ticker_stop_adv_assert+0x16>
			_radio.ticker_id_stop = 0;
    b2a2:	2200      	movs	r2, #0
    b2a4:	749a      	strb	r2, [r3, #18]
}
    b2a6:	b002      	add	sp, #8
    b2a8:	bd10      	pop	{r4, pc}
			LL_ASSERT(0);
    b2aa:	4b0f      	ldr	r3, [pc, #60]	; (b2e8 <ticker_stop_adv_assert+0x54>)
    b2ac:	9301      	str	r3, [sp, #4]
    b2ae:	9300      	str	r3, [sp, #0]
    b2b0:	4b0e      	ldr	r3, [pc, #56]	; (b2ec <ticker_stop_adv_assert+0x58>)
    b2b2:	4a0f      	ldr	r2, [pc, #60]	; (b2f0 <ticker_stop_adv_assert+0x5c>)
    b2b4:	681c      	ldr	r4, [r3, #0]
    b2b6:	490f      	ldr	r1, [pc, #60]	; (b2f4 <ticker_stop_adv_assert+0x60>)
    b2b8:	4b0f      	ldr	r3, [pc, #60]	; (b2f8 <ticker_stop_adv_assert+0x64>)
    b2ba:	4810      	ldr	r0, [pc, #64]	; (b2fc <ticker_stop_adv_assert+0x68>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    b2bc:	47a0      	blx	r4
    b2be:	4040      	eors	r0, r0
    b2c0:	f380 8811 	msr	BASEPRI, r0
    b2c4:	f04f 0004 	mov.w	r0, #4
    b2c8:	df02      	svc	2
    b2ca:	7c1b      	ldrb	r3, [r3, #16]
    b2cc:	2b05      	cmp	r3, #5
    b2ce:	d1ea      	bne.n	b2a6 <ticker_stop_adv_assert+0x12>
    b2d0:	4b05      	ldr	r3, [pc, #20]	; (b2e8 <ticker_stop_adv_assert+0x54>)
    b2d2:	9301      	str	r3, [sp, #4]
    b2d4:	9300      	str	r3, [sp, #0]
    b2d6:	4b05      	ldr	r3, [pc, #20]	; (b2ec <ticker_stop_adv_assert+0x58>)
    b2d8:	4a05      	ldr	r2, [pc, #20]	; (b2f0 <ticker_stop_adv_assert+0x5c>)
    b2da:	681c      	ldr	r4, [r3, #0]
    b2dc:	4905      	ldr	r1, [pc, #20]	; (b2f4 <ticker_stop_adv_assert+0x60>)
    b2de:	4b06      	ldr	r3, [pc, #24]	; (b2f8 <ticker_stop_adv_assert+0x64>)
    b2e0:	4807      	ldr	r0, [pc, #28]	; (b300 <ticker_stop_adv_assert+0x6c>)
    b2e2:	e7eb      	b.n	b2bc <ticker_stop_adv_assert+0x28>
    b2e4:	200008c0 	.word	0x200008c0
    b2e8:	00015359 	.word	0x00015359
    b2ec:	20003a5c 	.word	0x20003a5c
    b2f0:	00016754 	.word	0x00016754
    b2f4:	0001679c 	.word	0x0001679c
    b2f8:	00017e97 	.word	0x00017e97
    b2fc:	000166c8 	.word	0x000166c8
    b300:	00018d6a 	.word	0x00018d6a

0000b304 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    b304:	2801      	cmp	r0, #1
{
    b306:	b513      	push	{r0, r1, r4, lr}
    b308:	4b12      	ldr	r3, [pc, #72]	; (b354 <ticker_stop_scan_assert+0x50>)
	if (status == TICKER_STATUS_FAILURE) {
    b30a:	d116      	bne.n	b33a <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    b30c:	7c9a      	ldrb	r2, [r3, #18]
    b30e:	2a06      	cmp	r2, #6
    b310:	d103      	bne.n	b31a <ticker_stop_scan_assert+0x16>
			_radio.ticker_id_stop = 0;
    b312:	2200      	movs	r2, #0
    b314:	749a      	strb	r2, [r3, #18]
}
    b316:	b002      	add	sp, #8
    b318:	bd10      	pop	{r4, pc}
			LL_ASSERT(0);
    b31a:	4b0f      	ldr	r3, [pc, #60]	; (b358 <ticker_stop_scan_assert+0x54>)
    b31c:	9301      	str	r3, [sp, #4]
    b31e:	9300      	str	r3, [sp, #0]
    b320:	4b0e      	ldr	r3, [pc, #56]	; (b35c <ticker_stop_scan_assert+0x58>)
    b322:	4a0f      	ldr	r2, [pc, #60]	; (b360 <ticker_stop_scan_assert+0x5c>)
    b324:	681c      	ldr	r4, [r3, #0]
    b326:	490f      	ldr	r1, [pc, #60]	; (b364 <ticker_stop_scan_assert+0x60>)
    b328:	4b0f      	ldr	r3, [pc, #60]	; (b368 <ticker_stop_scan_assert+0x64>)
    b32a:	4810      	ldr	r0, [pc, #64]	; (b36c <ticker_stop_scan_assert+0x68>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    b32c:	47a0      	blx	r4
    b32e:	4040      	eors	r0, r0
    b330:	f380 8811 	msr	BASEPRI, r0
    b334:	f04f 0004 	mov.w	r0, #4
    b338:	df02      	svc	2
    b33a:	7c1b      	ldrb	r3, [r3, #16]
    b33c:	2b06      	cmp	r3, #6
    b33e:	d1ea      	bne.n	b316 <ticker_stop_scan_assert+0x12>
    b340:	4b05      	ldr	r3, [pc, #20]	; (b358 <ticker_stop_scan_assert+0x54>)
    b342:	9301      	str	r3, [sp, #4]
    b344:	9300      	str	r3, [sp, #0]
    b346:	4b05      	ldr	r3, [pc, #20]	; (b35c <ticker_stop_scan_assert+0x58>)
    b348:	4a05      	ldr	r2, [pc, #20]	; (b360 <ticker_stop_scan_assert+0x5c>)
    b34a:	681c      	ldr	r4, [r3, #0]
    b34c:	4905      	ldr	r1, [pc, #20]	; (b364 <ticker_stop_scan_assert+0x60>)
    b34e:	4b06      	ldr	r3, [pc, #24]	; (b368 <ticker_stop_scan_assert+0x64>)
    b350:	4807      	ldr	r0, [pc, #28]	; (b370 <ticker_stop_scan_assert+0x6c>)
    b352:	e7eb      	b.n	b32c <ticker_stop_scan_assert+0x28>
    b354:	200008c0 	.word	0x200008c0
    b358:	00015359 	.word	0x00015359
    b35c:	20003a5c 	.word	0x20003a5c
    b360:	00016754 	.word	0x00016754
    b364:	0001679c 	.word	0x0001679c
    b368:	00017eae 	.word	0x00017eae
    b36c:	000166c8 	.word	0x000166c8
    b370:	00018da9 	.word	0x00018da9

0000b374 <ticker_update_adv_assert>:
{
    b374:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    b376:	b198      	cbz	r0, b3a0 <ticker_update_adv_assert+0x2c>
    b378:	4b0a      	ldr	r3, [pc, #40]	; (b3a4 <ticker_update_adv_assert+0x30>)
    b37a:	7c9b      	ldrb	r3, [r3, #18]
    b37c:	2b05      	cmp	r3, #5
    b37e:	d00f      	beq.n	b3a0 <ticker_update_adv_assert+0x2c>
    b380:	4b09      	ldr	r3, [pc, #36]	; (b3a8 <ticker_update_adv_assert+0x34>)
    b382:	9301      	str	r3, [sp, #4]
    b384:	9300      	str	r3, [sp, #0]
    b386:	4b09      	ldr	r3, [pc, #36]	; (b3ac <ticker_update_adv_assert+0x38>)
    b388:	4a09      	ldr	r2, [pc, #36]	; (b3b0 <ticker_update_adv_assert+0x3c>)
    b38a:	681c      	ldr	r4, [r3, #0]
    b38c:	4909      	ldr	r1, [pc, #36]	; (b3b4 <ticker_update_adv_assert+0x40>)
    b38e:	4b0a      	ldr	r3, [pc, #40]	; (b3b8 <ticker_update_adv_assert+0x44>)
    b390:	480a      	ldr	r0, [pc, #40]	; (b3bc <ticker_update_adv_assert+0x48>)
    b392:	47a0      	blx	r4
    b394:	4040      	eors	r0, r0
    b396:	f380 8811 	msr	BASEPRI, r0
    b39a:	f04f 0004 	mov.w	r0, #4
    b39e:	df02      	svc	2
}
    b3a0:	b002      	add	sp, #8
    b3a2:	bd10      	pop	{r4, pc}
    b3a4:	200008c0 	.word	0x200008c0
    b3a8:	00015359 	.word	0x00015359
    b3ac:	20003a5c 	.word	0x20003a5c
    b3b0:	00016754 	.word	0x00016754
    b3b4:	0001679c 	.word	0x0001679c
    b3b8:	00017ec6 	.word	0x00017ec6
    b3bc:	00018e15 	.word	0x00018e15

0000b3c0 <ticker_update_slave_assert>:
{
    b3c0:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    b3c2:	b1a0      	cbz	r0, b3ee <ticker_update_slave_assert+0x2e>
    b3c4:	4b0b      	ldr	r3, [pc, #44]	; (b3f4 <ticker_update_slave_assert+0x34>)
    b3c6:	7c9b      	ldrb	r3, [r3, #18]
    b3c8:	b2c9      	uxtb	r1, r1
    b3ca:	4299      	cmp	r1, r3
    b3cc:	d00f      	beq.n	b3ee <ticker_update_slave_assert+0x2e>
    b3ce:	4b0a      	ldr	r3, [pc, #40]	; (b3f8 <ticker_update_slave_assert+0x38>)
    b3d0:	9301      	str	r3, [sp, #4]
    b3d2:	9300      	str	r3, [sp, #0]
    b3d4:	4b09      	ldr	r3, [pc, #36]	; (b3fc <ticker_update_slave_assert+0x3c>)
    b3d6:	4a0a      	ldr	r2, [pc, #40]	; (b400 <ticker_update_slave_assert+0x40>)
    b3d8:	681c      	ldr	r4, [r3, #0]
    b3da:	490a      	ldr	r1, [pc, #40]	; (b404 <ticker_update_slave_assert+0x44>)
    b3dc:	4b0a      	ldr	r3, [pc, #40]	; (b408 <ticker_update_slave_assert+0x48>)
    b3de:	480b      	ldr	r0, [pc, #44]	; (b40c <ticker_update_slave_assert+0x4c>)
    b3e0:	47a0      	blx	r4
    b3e2:	4040      	eors	r0, r0
    b3e4:	f380 8811 	msr	BASEPRI, r0
    b3e8:	f04f 0004 	mov.w	r0, #4
    b3ec:	df02      	svc	2
}
    b3ee:	b002      	add	sp, #8
    b3f0:	bd10      	pop	{r4, pc}
    b3f2:	bf00      	nop
    b3f4:	200008c0 	.word	0x200008c0
    b3f8:	00015359 	.word	0x00015359
    b3fc:	20003a5c 	.word	0x20003a5c
    b400:	00016754 	.word	0x00016754
    b404:	0001679c 	.word	0x0001679c
    b408:	00017edf 	.word	0x00017edf
    b40c:	00018e64 	.word	0x00018e64

0000b410 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    b410:	b513      	push	{r0, r1, r4, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    b412:	b178      	cbz	r0, b434 <ticker_op_latency_cancelled+0x24>
    b414:	4b0b      	ldr	r3, [pc, #44]	; (b444 <ticker_op_latency_cancelled+0x34>)
    b416:	9301      	str	r3, [sp, #4]
    b418:	9300      	str	r3, [sp, #0]
    b41a:	4b0b      	ldr	r3, [pc, #44]	; (b448 <ticker_op_latency_cancelled+0x38>)
    b41c:	4a0b      	ldr	r2, [pc, #44]	; (b44c <ticker_op_latency_cancelled+0x3c>)
    b41e:	681c      	ldr	r4, [r3, #0]
    b420:	490b      	ldr	r1, [pc, #44]	; (b450 <ticker_op_latency_cancelled+0x40>)
    b422:	4b0c      	ldr	r3, [pc, #48]	; (b454 <ticker_op_latency_cancelled+0x44>)
    b424:	480c      	ldr	r0, [pc, #48]	; (b458 <ticker_op_latency_cancelled+0x48>)
    b426:	47a0      	blx	r4
    b428:	4040      	eors	r0, r0
    b42a:	f380 8811 	msr	BASEPRI, r0
    b42e:	f04f 0004 	mov.w	r0, #4
    b432:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    b434:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    b438:	f360 0341 	bfi	r3, r0, #1, #1
    b43c:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    b440:	b002      	add	sp, #8
    b442:	bd10      	pop	{r4, pc}
    b444:	00015359 	.word	0x00015359
    b448:	20003a5c 	.word	0x20003a5c
    b44c:	00016754 	.word	0x00016754
    b450:	0001679c 	.word	0x0001679c
    b454:	000181bd 	.word	0x000181bd
    b458:	00018d36 	.word	0x00018d36

0000b45c <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    b45c:	4b04      	ldr	r3, [pc, #16]	; (b470 <ticker_job_disable+0x14>)
    b45e:	7d1b      	ldrb	r3, [r3, #20]
    b460:	b123      	cbz	r3, b46c <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    b462:	2101      	movs	r1, #1
    b464:	2200      	movs	r2, #0
    b466:	4608      	mov	r0, r1
    b468:	f7fc b99e 	b.w	77a8 <mayfly_enable>
    b46c:	4770      	bx	lr
    b46e:	bf00      	nop
    b470:	200008c0 	.word	0x200008c0

0000b474 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    b474:	2806      	cmp	r0, #6
{
    b476:	b510      	push	{r4, lr}
    b478:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    b47a:	d90a      	bls.n	b492 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b47c:	4b09      	ldr	r3, [pc, #36]	; (b4a4 <hdr_conn_get+0x30>)
    b47e:	1fc2      	subs	r2, r0, #7
    b480:	b292      	uxth	r2, r2
    b482:	f44f 71aa 	mov.w	r1, #340	; 0x154
    b486:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    b48a:	f7fc f91f 	bl	76cc <mem_get>
    b48e:	6020      	str	r0, [r4, #0]
    b490:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    b492:	2805      	cmp	r0, #5
    b494:	d004      	beq.n	b4a0 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    b496:	2806      	cmp	r0, #6
	return NULL;
    b498:	4803      	ldr	r0, [pc, #12]	; (b4a8 <hdr_conn_get+0x34>)
    b49a:	bf18      	it	ne
    b49c:	2000      	movne	r0, #0
    b49e:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    b4a0:	4802      	ldr	r0, [pc, #8]	; (b4ac <hdr_conn_get+0x38>)
}
    b4a2:	bd10      	pop	{r4, pc}
    b4a4:	200008c0 	.word	0x200008c0
    b4a8:	20000990 	.word	0x20000990
    b4ac:	200008d8 	.word	0x200008d8

0000b4b0 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    b4b0:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    b4b2:	4b08      	ldr	r3, [pc, #32]	; (b4d4 <event_stop.part.10+0x24>)
    b4b4:	9301      	str	r3, [sp, #4]
    b4b6:	9300      	str	r3, [sp, #0]
    b4b8:	4b07      	ldr	r3, [pc, #28]	; (b4d8 <event_stop.part.10+0x28>)
    b4ba:	4a08      	ldr	r2, [pc, #32]	; (b4dc <event_stop.part.10+0x2c>)
    b4bc:	681c      	ldr	r4, [r3, #0]
    b4be:	4908      	ldr	r1, [pc, #32]	; (b4e0 <event_stop.part.10+0x30>)
    b4c0:	4b08      	ldr	r3, [pc, #32]	; (b4e4 <event_stop.part.10+0x34>)
    b4c2:	4809      	ldr	r0, [pc, #36]	; (b4e8 <event_stop.part.10+0x38>)
    b4c4:	47a0      	blx	r4
    b4c6:	4040      	eors	r0, r0
    b4c8:	f380 8811 	msr	BASEPRI, r0
    b4cc:	f04f 0004 	mov.w	r0, #4
    b4d0:	df02      	svc	2
    b4d2:	bf00      	nop
    b4d4:	00015359 	.word	0x00015359
    b4d8:	20003a5c 	.word	0x20003a5c
    b4dc:	00016754 	.word	0x00016754
    b4e0:	0001679c 	.word	0x0001679c
    b4e4:	00017fde 	.word	0x00017fde
    b4e8:	0001894b 	.word	0x0001894b

0000b4ec <event_stop>:
	s_mfy_radio_stop.param = context;
    b4ec:	4a06      	ldr	r2, [pc, #24]	; (b508 <event_stop+0x1c>)
{
    b4ee:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    b4f0:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b4f2:	4613      	mov	r3, r2
    b4f4:	2200      	movs	r2, #0
    b4f6:	4611      	mov	r1, r2
    b4f8:	4610      	mov	r0, r2
    b4fa:	f7fc f97d 	bl	77f8 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b4fe:	b108      	cbz	r0, b504 <event_stop+0x18>
    b500:	f7ff ffd6 	bl	b4b0 <event_stop.part.10>
    b504:	bd08      	pop	{r3, pc}
    b506:	bf00      	nop
    b508:	20003d68 	.word	0x20003d68

0000b50c <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b50c:	2200      	movs	r2, #0
{
    b50e:	b513      	push	{r0, r1, r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b510:	4b0b      	ldr	r3, [pc, #44]	; (b540 <event_active+0x34>)
    b512:	4611      	mov	r1, r2
    b514:	4610      	mov	r0, r2
    b516:	f7fc f96f 	bl	77f8 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b51a:	b178      	cbz	r0, b53c <event_active+0x30>
    b51c:	4b09      	ldr	r3, [pc, #36]	; (b544 <event_active+0x38>)
    b51e:	9301      	str	r3, [sp, #4]
    b520:	9300      	str	r3, [sp, #0]
    b522:	4b09      	ldr	r3, [pc, #36]	; (b548 <event_active+0x3c>)
    b524:	4a09      	ldr	r2, [pc, #36]	; (b54c <event_active+0x40>)
    b526:	681c      	ldr	r4, [r3, #0]
    b528:	4909      	ldr	r1, [pc, #36]	; (b550 <event_active+0x44>)
    b52a:	4b0a      	ldr	r3, [pc, #40]	; (b554 <event_active+0x48>)
    b52c:	480a      	ldr	r0, [pc, #40]	; (b558 <event_active+0x4c>)
    b52e:	47a0      	blx	r4
    b530:	4040      	eors	r0, r0
    b532:	f380 8811 	msr	BASEPRI, r0
    b536:	f04f 0004 	mov.w	r0, #4
    b53a:	df02      	svc	2
}
    b53c:	b002      	add	sp, #8
    b53e:	bd10      	pop	{r4, pc}
    b540:	20003d38 	.word	0x20003d38
    b544:	00015359 	.word	0x00015359
    b548:	20003a5c 	.word	0x20003a5c
    b54c:	00016754 	.word	0x00016754
    b550:	0001679c 	.word	0x0001679c
    b554:	00017f0e 	.word	0x00017f0e
    b558:	0001894b 	.word	0x0001894b

0000b55c <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b55c:	2200      	movs	r2, #0
{
    b55e:	b513      	push	{r0, r1, r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b560:	4b0b      	ldr	r3, [pc, #44]	; (b590 <event_xtal+0x34>)
    b562:	4611      	mov	r1, r2
    b564:	4610      	mov	r0, r2
    b566:	f7fc f947 	bl	77f8 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b56a:	b178      	cbz	r0, b58c <event_xtal+0x30>
    b56c:	4b09      	ldr	r3, [pc, #36]	; (b594 <event_xtal+0x38>)
    b56e:	9301      	str	r3, [sp, #4]
    b570:	9300      	str	r3, [sp, #0]
    b572:	4b09      	ldr	r3, [pc, #36]	; (b598 <event_xtal+0x3c>)
    b574:	4a09      	ldr	r2, [pc, #36]	; (b59c <event_xtal+0x40>)
    b576:	681c      	ldr	r4, [r3, #0]
    b578:	4909      	ldr	r1, [pc, #36]	; (b5a0 <event_xtal+0x44>)
    b57a:	4b0a      	ldr	r3, [pc, #40]	; (b5a4 <event_xtal+0x48>)
    b57c:	480a      	ldr	r0, [pc, #40]	; (b5a8 <event_xtal+0x4c>)
    b57e:	47a0      	blx	r4
    b580:	4040      	eors	r0, r0
    b582:	f380 8811 	msr	BASEPRI, r0
    b586:	f04f 0004 	mov.w	r0, #4
    b58a:	df02      	svc	2
}
    b58c:	b002      	add	sp, #8
    b58e:	bd10      	pop	{r4, pc}
    b590:	20003db8 	.word	0x20003db8
    b594:	00015359 	.word	0x00015359
    b598:	20003a5c 	.word	0x20003a5c
    b59c:	00016754 	.word	0x00016754
    b5a0:	0001679c 	.word	0x0001679c
    b5a4:	00017f2a 	.word	0x00017f2a
    b5a8:	0001894b 	.word	0x0001894b

0000b5ac <mayfly_radio_active>:
{
    b5ac:	b513      	push	{r0, r1, r4, lr}
    b5ae:	4a12      	ldr	r2, [pc, #72]	; (b5f8 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    b5b0:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    b5b2:	b140      	cbz	r0, b5c6 <mayfly_radio_active+0x1a>
		if (s_active++) {
    b5b4:	1c59      	adds	r1, r3, #1
    b5b6:	7011      	strb	r1, [r2, #0]
    b5b8:	b9db      	cbnz	r3, b5f2 <mayfly_radio_active+0x46>
		radio_active_callback(1);
    b5ba:	2001      	movs	r0, #1
}
    b5bc:	b002      	add	sp, #8
    b5be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_active_callback(0);
    b5c2:	f006 ba11 	b.w	119e8 <radio_active_callback>
		LL_ASSERT(s_active);
    b5c6:	b97b      	cbnz	r3, b5e8 <mayfly_radio_active+0x3c>
    b5c8:	4b0c      	ldr	r3, [pc, #48]	; (b5fc <mayfly_radio_active+0x50>)
    b5ca:	9301      	str	r3, [sp, #4]
    b5cc:	9300      	str	r3, [sp, #0]
    b5ce:	4b0c      	ldr	r3, [pc, #48]	; (b600 <mayfly_radio_active+0x54>)
    b5d0:	4a0c      	ldr	r2, [pc, #48]	; (b604 <mayfly_radio_active+0x58>)
    b5d2:	681c      	ldr	r4, [r3, #0]
    b5d4:	490c      	ldr	r1, [pc, #48]	; (b608 <mayfly_radio_active+0x5c>)
    b5d6:	4b0d      	ldr	r3, [pc, #52]	; (b60c <mayfly_radio_active+0x60>)
    b5d8:	480d      	ldr	r0, [pc, #52]	; (b610 <mayfly_radio_active+0x64>)
    b5da:	47a0      	blx	r4
    b5dc:	4040      	eors	r0, r0
    b5de:	f380 8811 	msr	BASEPRI, r0
    b5e2:	f04f 0004 	mov.w	r0, #4
    b5e6:	df02      	svc	2
		if (--s_active) {
    b5e8:	3b01      	subs	r3, #1
    b5ea:	b2db      	uxtb	r3, r3
    b5ec:	7013      	strb	r3, [r2, #0]
    b5ee:	2b00      	cmp	r3, #0
    b5f0:	d0e4      	beq.n	b5bc <mayfly_radio_active+0x10>
}
    b5f2:	b002      	add	sp, #8
    b5f4:	bd10      	pop	{r4, pc}
    b5f6:	bf00      	nop
    b5f8:	20000a64 	.word	0x20000a64
    b5fc:	00015359 	.word	0x00015359
    b600:	20003a5c 	.word	0x20003a5c
    b604:	00016754 	.word	0x00016754
    b608:	0001679c 	.word	0x0001679c
    b60c:	00017efa 	.word	0x00017efa
    b610:	000188a0 	.word	0x000188a0

0000b614 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    b614:	2000      	movs	r0, #0
    b616:	f7ff bfc9 	b.w	b5ac <mayfly_radio_active>
	...

0000b61c <mayfly_radio_stop>:
{
    b61c:	b513      	push	{r0, r1, r4, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    b61e:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    b620:	1f03      	subs	r3, r0, #4
    b622:	2b01      	cmp	r3, #1
    b624:	d90f      	bls.n	b646 <mayfly_radio_stop+0x2a>
    b626:	4b11      	ldr	r3, [pc, #68]	; (b66c <mayfly_radio_stop+0x50>)
    b628:	9301      	str	r3, [sp, #4]
    b62a:	9300      	str	r3, [sp, #0]
    b62c:	4b10      	ldr	r3, [pc, #64]	; (b670 <mayfly_radio_stop+0x54>)
    b62e:	4a11      	ldr	r2, [pc, #68]	; (b674 <mayfly_radio_stop+0x58>)
    b630:	681c      	ldr	r4, [r3, #0]
    b632:	4911      	ldr	r1, [pc, #68]	; (b678 <mayfly_radio_stop+0x5c>)
    b634:	4b11      	ldr	r3, [pc, #68]	; (b67c <mayfly_radio_stop+0x60>)
    b636:	4812      	ldr	r0, [pc, #72]	; (b680 <mayfly_radio_stop+0x64>)
    b638:	47a0      	blx	r4
    b63a:	4040      	eors	r0, r0
    b63c:	f380 8811 	msr	BASEPRI, r0
    b640:	f04f 0004 	mov.w	r0, #4
    b644:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    b646:	4a0f      	ldr	r2, [pc, #60]	; (b684 <mayfly_radio_stop+0x68>)
    b648:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    b64a:	b143      	cbz	r3, b65e <mayfly_radio_stop+0x42>
	radio_used = ((_radio.state != STATE_NONE) &&
    b64c:	3b04      	subs	r3, #4
    b64e:	2b01      	cmp	r3, #1
    b650:	d905      	bls.n	b65e <mayfly_radio_stop+0x42>
			_radio.state = state;
    b652:	7510      	strb	r0, [r2, #20]
}
    b654:	b002      	add	sp, #8
    b656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
    b65a:	f007 bb89 	b.w	12d70 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    b65e:	f007 fbb9 	bl	12dd4 <radio_is_idle>
    b662:	2800      	cmp	r0, #0
    b664:	d0f6      	beq.n	b654 <mayfly_radio_stop+0x38>
}
    b666:	b002      	add	sp, #8
    b668:	bd10      	pop	{r4, pc}
    b66a:	bf00      	nop
    b66c:	00015359 	.word	0x00015359
    b670:	20003a5c 	.word	0x20003a5c
    b674:	00016754 	.word	0x00016754
    b678:	0001679c 	.word	0x0001679c
    b67c:	00017fcc 	.word	0x00017fcc
    b680:	000188ca 	.word	0x000188ca
    b684:	200008c0 	.word	0x200008c0

0000b688 <pdu_node_tx_release>:
{
    b688:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    b68a:	4a18      	ldr	r2, [pc, #96]	; (b6ec <pdu_node_tx_release+0x64>)
    b68c:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    b690:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    b694:	3301      	adds	r3, #1
    b696:	b2db      	uxtb	r3, r3
		last = 0;
    b698:	429c      	cmp	r4, r3
    b69a:	bf08      	it	eq
    b69c:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    b69e:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    b6a2:	429c      	cmp	r4, r3
    b6a4:	d10f      	bne.n	b6c6 <pdu_node_tx_release+0x3e>
    b6a6:	4b12      	ldr	r3, [pc, #72]	; (b6f0 <pdu_node_tx_release+0x68>)
    b6a8:	9301      	str	r3, [sp, #4]
    b6aa:	9300      	str	r3, [sp, #0]
    b6ac:	4b11      	ldr	r3, [pc, #68]	; (b6f4 <pdu_node_tx_release+0x6c>)
    b6ae:	4a12      	ldr	r2, [pc, #72]	; (b6f8 <pdu_node_tx_release+0x70>)
    b6b0:	681c      	ldr	r4, [r3, #0]
    b6b2:	4912      	ldr	r1, [pc, #72]	; (b6fc <pdu_node_tx_release+0x74>)
    b6b4:	4b12      	ldr	r3, [pc, #72]	; (b700 <pdu_node_tx_release+0x78>)
    b6b6:	4813      	ldr	r0, [pc, #76]	; (b704 <pdu_node_tx_release+0x7c>)
    b6b8:	47a0      	blx	r4
    b6ba:	4040      	eors	r0, r0
    b6bc:	f380 8811 	msr	BASEPRI, r0
    b6c0:	f04f 0004 	mov.w	r0, #4
    b6c4:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    b6c6:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    b6ca:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    b6ce:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    b6d2:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    b6d6:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    b6da:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    b6dc:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    b6e0:	b003      	add	sp, #12
    b6e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    b6e6:	f006 b981 	b.w	119ec <radio_event_callback>
    b6ea:	bf00      	nop
    b6ec:	200008c0 	.word	0x200008c0
    b6f0:	00015359 	.word	0x00015359
    b6f4:	20003a5c 	.word	0x20003a5c
    b6f8:	00016754 	.word	0x00016754
    b6fc:	0001679c 	.word	0x0001679c
    b700:	00018114 	.word	0x00018114
    b704:	00018a1b 	.word	0x00018a1b

0000b708 <packet_tx_enqueue>:
{
    b708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    b70c:	4c24      	ldr	r4, [pc, #144]	; (b7a0 <packet_tx_enqueue+0x98>)
{
    b70e:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    b710:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    b712:	b12e      	cbz	r6, b720 <packet_tx_enqueue+0x18>
    b714:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    b718:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    b71c:	429a      	cmp	r2, r3
    b71e:	d101      	bne.n	b724 <packet_tx_enqueue+0x1c>
    b720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    b724:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    b728:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b72c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    b730:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    b734:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b738:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    b73c:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    b73e:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b740:	f7fb ffc4 	bl	76cc <mem_get>
    b744:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    b746:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    b74a:	8c1a      	ldrh	r2, [r3, #32]
    b74c:	4282      	cmp	r2, r0
    b74e:	d11f      	bne.n	b790 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    b750:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    b754:	b942      	cbnz	r2, b768 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    b756:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    b75a:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    b75e:	b91a      	cbnz	r2, b768 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    b760:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    b764:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    b768:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    b76c:	b102      	cbz	r2, b770 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    b76e:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    b770:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    b774:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    b778:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    b77c:	3301      	adds	r3, #1
    b77e:	b2db      	uxtb	r3, r3
			first = 0;
    b780:	429a      	cmp	r2, r3
    b782:	bf08      	it	eq
    b784:	2300      	moveq	r3, #0
    b786:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    b788:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    b78c:	b2f6      	uxtb	r6, r6
    b78e:	e7c0      	b.n	b712 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b790:	792b      	ldrb	r3, [r5, #4]
    b792:	f367 0301 	bfi	r3, r7, #0, #2
    b796:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    b798:	4629      	mov	r1, r5
    b79a:	f7ff ff75 	bl	b688 <pdu_node_tx_release>
    b79e:	e7e9      	b.n	b774 <packet_tx_enqueue+0x6c>
    b7a0:	200008c0 	.word	0x200008c0

0000b7a4 <connection_release>:
{
    b7a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    b7a6:	2201      	movs	r2, #1
{
    b7a8:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    b7aa:	4611      	mov	r1, r2
    b7ac:	2000      	movs	r0, #0
    b7ae:	f7fb fffb 	bl	77a8 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b7b2:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    b7b6:	2100      	movs	r1, #0
    b7b8:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b7bc:	3207      	adds	r2, #7
	ticker_status =
    b7be:	9300      	str	r3, [sp, #0]
    b7c0:	4608      	mov	r0, r1
    b7c2:	4b3f      	ldr	r3, [pc, #252]	; (b8c0 <connection_release+0x11c>)
    b7c4:	b2d2      	uxtb	r2, r2
    b7c6:	f7fc fe75 	bl	84b4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b7ca:	f030 0102 	bics.w	r1, r0, #2
    b7ce:	d00f      	beq.n	b7f0 <connection_release+0x4c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b7d0:	4b3c      	ldr	r3, [pc, #240]	; (b8c4 <connection_release+0x120>)
    b7d2:	9301      	str	r3, [sp, #4]
    b7d4:	9300      	str	r3, [sp, #0]
    b7d6:	4b3c      	ldr	r3, [pc, #240]	; (b8c8 <connection_release+0x124>)
    b7d8:	4a3c      	ldr	r2, [pc, #240]	; (b8cc <connection_release+0x128>)
    b7da:	681c      	ldr	r4, [r3, #0]
    b7dc:	493c      	ldr	r1, [pc, #240]	; (b8d0 <connection_release+0x12c>)
    b7de:	4b3d      	ldr	r3, [pc, #244]	; (b8d4 <connection_release+0x130>)
    b7e0:	483d      	ldr	r0, [pc, #244]	; (b8d8 <connection_release+0x134>)
    b7e2:	47a0      	blx	r4
    b7e4:	4040      	eors	r0, r0
    b7e6:	f380 8811 	msr	BASEPRI, r0
    b7ea:	f04f 0004 	mov.w	r0, #4
    b7ee:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    b7f0:	4b3a      	ldr	r3, [pc, #232]	; (b8dc <connection_release+0x138>)
    b7f2:	7d1a      	ldrb	r2, [r3, #20]
    b7f4:	2a05      	cmp	r2, #5
    b7f6:	461d      	mov	r5, r3
    b7f8:	d11b      	bne.n	b832 <connection_release+0x8e>
					  conn->handle))) {
    b7fa:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    b7fc:	7c18      	ldrb	r0, [r3, #16]
    b7fe:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    b800:	4290      	cmp	r0, r2
    b802:	d116      	bne.n	b832 <connection_release+0x8e>
		_radio.ticker_id_prepare = 0;
    b804:	7419      	strb	r1, [r3, #16]
		ticker_status =
    b806:	f242 23fb 	movw	r3, #8955	; 0x22fb
    b80a:	9300      	str	r3, [sp, #0]
    b80c:	2201      	movs	r2, #1
    b80e:	4b2c      	ldr	r3, [pc, #176]	; (b8c0 <connection_release+0x11c>)
    b810:	4608      	mov	r0, r1
    b812:	f7fc fe4f 	bl	84b4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b816:	f030 0202 	bics.w	r2, r0, #2
    b81a:	d1d9      	bne.n	b7d0 <connection_release+0x2c>
		ticker_status =
    b81c:	f242 3302 	movw	r3, #8962	; 0x2302
    b820:	9300      	str	r3, [sp, #0]
    b822:	4611      	mov	r1, r2
    b824:	4b26      	ldr	r3, [pc, #152]	; (b8c0 <connection_release+0x11c>)
    b826:	4610      	mov	r0, r2
    b828:	f7fc fe44 	bl	84b4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b82c:	f030 0302 	bics.w	r3, r0, #2
    b830:	d1ce      	bne.n	b7d0 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    b832:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    b836:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    b83a:	4299      	cmp	r1, r3
    b83c:	d003      	beq.n	b846 <connection_release+0xa2>
    b83e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b842:	4299      	cmp	r1, r3
    b844:	d101      	bne.n	b84a <connection_release+0xa6>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    b846:	4e26      	ldr	r6, [pc, #152]	; (b8e0 <connection_release+0x13c>)
    b848:	e012      	b.n	b870 <connection_release+0xcc>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b84a:	790b      	ldrb	r3, [r1, #4]
    b84c:	f36f 0301 	bfc	r3, #0, #2
    b850:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b852:	680b      	ldr	r3, [r1, #0]
    b854:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    b858:	8c20      	ldrh	r0, [r4, #32]
    b85a:	f7ff ff15 	bl	b688 <pdu_node_tx_release>
    b85e:	e7e8      	b.n	b832 <connection_release+0x8e>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b860:	6803      	ldr	r3, [r0, #0]
    b862:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    b866:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    b86a:	4631      	mov	r1, r6
    b86c:	f7fb ff13 	bl	7696 <mem_release>
	while ((conn->pkt_tx_head) &&
    b870:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    b874:	b118      	cbz	r0, b87e <connection_release+0xda>
    b876:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b87a:	4298      	cmp	r0, r3
    b87c:	d1f0      	bne.n	b860 <connection_release+0xbc>
	conn->pkt_tx_ctrl = NULL;
    b87e:	2300      	movs	r3, #0
    b880:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    b884:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    b888:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    b88c:	b951      	cbnz	r1, b8a4 <connection_release+0x100>
	conn->handle = 0xffff;
    b88e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b892:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    b894:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    b898:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    b89a:	bf08      	it	eq
    b89c:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    b8a0:	b002      	add	sp, #8
    b8a2:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b8a4:	790b      	ldrb	r3, [r1, #4]
    b8a6:	f36f 0301 	bfc	r3, #0, #2
    b8aa:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b8ac:	680b      	ldr	r3, [r1, #0]
    b8ae:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    b8b2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    b8b6:	8c20      	ldrh	r0, [r4, #32]
    b8b8:	f7ff fee6 	bl	b688 <pdu_node_tx_release>
    b8bc:	e7e4      	b.n	b888 <connection_release+0xe4>
    b8be:	bf00      	nop
    b8c0:	0000b255 	.word	0x0000b255
    b8c4:	00015359 	.word	0x00015359
    b8c8:	20003a5c 	.word	0x20003a5c
    b8cc:	00016754 	.word	0x00016754
    b8d0:	0001679c 	.word	0x0001679c
    b8d4:	00018128 	.word	0x00018128
    b8d8:	00018211 	.word	0x00018211
    b8dc:	200008c0 	.word	0x200008c0
    b8e0:	20000a1c 	.word	0x20000a1c

0000b8e4 <chan_set>:
	switch (chan) {
    b8e4:	2826      	cmp	r0, #38	; 0x26
{
    b8e6:	b513      	push	{r0, r1, r4, lr}
    b8e8:	4604      	mov	r4, r0
	switch (chan) {
    b8ea:	d00c      	beq.n	b906 <chan_set+0x22>
    b8ec:	2827      	cmp	r0, #39	; 0x27
    b8ee:	d00c      	beq.n	b90a <chan_set+0x26>
    b8f0:	2825      	cmp	r0, #37	; 0x25
    b8f2:	d10c      	bne.n	b90e <chan_set+0x2a>
		radio_freq_chan_set(2);
    b8f4:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    b8f6:	f007 f9b7 	bl	12c68 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    b8fa:	4620      	mov	r0, r4
}
    b8fc:	b002      	add	sp, #8
    b8fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    b902:	f007 b9b7 	b.w	12c74 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    b906:	201a      	movs	r0, #26
    b908:	e7f5      	b.n	b8f6 <chan_set+0x12>
		radio_freq_chan_set(80);
    b90a:	2050      	movs	r0, #80	; 0x50
    b90c:	e7f3      	b.n	b8f6 <chan_set+0x12>
		if (chan < 11) {
    b90e:	280a      	cmp	r0, #10
    b910:	d802      	bhi.n	b918 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    b912:	3002      	adds	r0, #2
    b914:	0040      	lsls	r0, r0, #1
    b916:	e7ee      	b.n	b8f6 <chan_set+0x12>
		} else if (chan < 40) {
    b918:	2827      	cmp	r0, #39	; 0x27
    b91a:	d801      	bhi.n	b920 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    b91c:	3003      	adds	r0, #3
    b91e:	e7f9      	b.n	b914 <chan_set+0x30>
			LL_ASSERT(0);
    b920:	4b07      	ldr	r3, [pc, #28]	; (b940 <chan_set+0x5c>)
    b922:	9301      	str	r3, [sp, #4]
    b924:	9300      	str	r3, [sp, #0]
    b926:	4b07      	ldr	r3, [pc, #28]	; (b944 <chan_set+0x60>)
    b928:	4a07      	ldr	r2, [pc, #28]	; (b948 <chan_set+0x64>)
    b92a:	681c      	ldr	r4, [r3, #0]
    b92c:	4907      	ldr	r1, [pc, #28]	; (b94c <chan_set+0x68>)
    b92e:	4b08      	ldr	r3, [pc, #32]	; (b950 <chan_set+0x6c>)
    b930:	4808      	ldr	r0, [pc, #32]	; (b954 <chan_set+0x70>)
    b932:	47a0      	blx	r4
    b934:	4040      	eors	r0, r0
    b936:	f380 8811 	msr	BASEPRI, r0
    b93a:	f04f 0004 	mov.w	r0, #4
    b93e:	df02      	svc	2
    b940:	00015359 	.word	0x00015359
    b944:	20003a5c 	.word	0x20003a5c
    b948:	00016754 	.word	0x00016754
    b94c:	0001679c 	.word	0x0001679c
    b950:	00017ffe 	.word	0x00017ffe
    b954:	000166c8 	.word	0x000166c8

0000b958 <adv_setup>:
{
    b958:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    b95a:	4c31      	ldr	r4, [pc, #196]	; (ba20 <adv_setup+0xc8>)
    b95c:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    b960:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    b964:	429a      	cmp	r2, r3
    b966:	d051      	beq.n	ba0c <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    b968:	3301      	adds	r3, #1
    b96a:	b2db      	uxtb	r3, r3
			first = 0;
    b96c:	2b02      	cmp	r3, #2
    b96e:	bf08      	it	eq
    b970:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    b972:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    b976:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    b978:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b97c:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    b980:	4299      	cmp	r1, r3
    b982:	d007      	beq.n	b994 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    b984:	3301      	adds	r3, #1
    b986:	b2db      	uxtb	r3, r3
			first = 0;
    b988:	2b02      	cmp	r3, #2
    b98a:	bf08      	it	eq
    b98c:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    b98e:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    b992:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    b994:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    b998:	2327      	movs	r3, #39	; 0x27
    b99a:	212b      	movs	r1, #43	; 0x2b
    b99c:	fb13 1505 	smlabb	r5, r3, r5, r1
    b9a0:	1966      	adds	r6, r4, r5
	if (upd) {
    b9a2:	b142      	cbz	r2, b9b6 <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    b9a4:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    b9a8:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    b9ac:	2206      	movs	r2, #6
    b9ae:	1cb1      	adds	r1, r6, #2
    b9b0:	307d      	adds	r0, #125	; 0x7d
    b9b2:	f7f6 f949 	bl	1c48 <memcpy>
	radio_pkt_tx_set(pdu);
    b9b6:	4630      	mov	r0, r6
    b9b8:	f007 f9ba 	bl	12d30 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    b9bc:	5d63      	ldrb	r3, [r4, r5]
    b9be:	f003 030f 	and.w	r3, r3, #15
    b9c2:	2b02      	cmp	r3, #2
    b9c4:	d024      	beq.n	ba10 <adv_setup+0xb8>
    b9c6:	2b07      	cmp	r3, #7
    b9c8:	d022      	beq.n	ba10 <adv_setup+0xb8>
		_radio.state = STATE_TX;
    b9ca:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    b9cc:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    b9ce:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    b9d0:	f007 fac4 	bl	12f5c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    b9d4:	2000      	movs	r0, #0
    b9d6:	f007 fa25 	bl	12e24 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    b9da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b9de:	f3c3 0202 	ubfx	r2, r3, #0, #3
    b9e2:	b2d3      	uxtb	r3, r2
    b9e4:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    b9e6:	2000      	movs	r0, #0
    b9e8:	07ce      	lsls	r6, r1, #31
    b9ea:	f100 0501 	add.w	r5, r0, #1
    b9ee:	d514      	bpl.n	ba1a <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    b9f0:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    b9f2:	4013      	ands	r3, r2
    b9f4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    b9f8:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    b9fa:	f363 0202 	bfi	r2, r3, #0, #3
    b9fe:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    ba02:	3025      	adds	r0, #37	; 0x25
}
    ba04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    ba08:	f7ff bf6c 	b.w	b8e4 <chan_set>
	u8_t upd = 0;
    ba0c:	2200      	movs	r2, #0
    ba0e:	e7b3      	b.n	b978 <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    ba10:	2303      	movs	r3, #3
    ba12:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    ba14:	f007 fa1c 	bl	12e50 <radio_switch_complete_and_disable>
    ba18:	e7df      	b.n	b9da <adv_setup+0x82>
		bitmap >>= 1;
    ba1a:	0849      	lsrs	r1, r1, #1
    ba1c:	4628      	mov	r0, r5
    ba1e:	e7e3      	b.n	b9e8 <adv_setup+0x90>
    ba20:	200008c0 	.word	0x200008c0
    ba24:	00000000 	.word	0x00000000

0000ba28 <sched_after_mstr_free_offset_get>:
{
    ba28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ba2a:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    ba2c:	aa04      	add	r2, sp, #16
{
    ba2e:	461c      	mov	r4, r3
    ba30:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    ba32:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    ba36:	3127      	adds	r1, #39	; 0x27
    ba38:	2001      	movs	r0, #1
    ba3a:	f7ff fa29 	bl	ae90 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    ba3e:	6823      	ldr	r3, [r4, #0]
    ba40:	2b00      	cmp	r3, #0
    ba42:	d02d      	beq.n	baa0 <sched_after_mstr_free_offset_get+0x78>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    ba44:	9803      	ldr	r0, [sp, #12]
    ba46:	1b83      	subs	r3, r0, r6
    ba48:	021b      	lsls	r3, r3, #8
    ba4a:	d50f      	bpl.n	ba6c <sched_after_mstr_free_offset_get+0x44>
    ba4c:	4b1a      	ldr	r3, [pc, #104]	; (bab8 <sched_after_mstr_free_offset_get+0x90>)
    ba4e:	9301      	str	r3, [sp, #4]
    ba50:	9300      	str	r3, [sp, #0]
    ba52:	4b1a      	ldr	r3, [pc, #104]	; (babc <sched_after_mstr_free_offset_get+0x94>)
    ba54:	4a1a      	ldr	r2, [pc, #104]	; (bac0 <sched_after_mstr_free_offset_get+0x98>)
    ba56:	681c      	ldr	r4, [r3, #0]
    ba58:	491a      	ldr	r1, [pc, #104]	; (bac4 <sched_after_mstr_free_offset_get+0x9c>)
    ba5a:	4b1b      	ldr	r3, [pc, #108]	; (bac8 <sched_after_mstr_free_offset_get+0xa0>)
    ba5c:	481b      	ldr	r0, [pc, #108]	; (bacc <sched_after_mstr_free_offset_get+0xa4>)
    ba5e:	47a0      	blx	r4
    ba60:	4040      	eors	r0, r0
    ba62:	f380 8811 	msr	BASEPRI, r0
    ba66:	f04f 0004 	mov.w	r0, #4
    ba6a:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    ba6c:	4631      	mov	r1, r6
    ba6e:	f7fc fdf3 	bl	8658 <ticker_ticks_diff_get>
    ba72:	4602      	mov	r2, r0
    ba74:	4816      	ldr	r0, [pc, #88]	; (bad0 <sched_after_mstr_free_offset_get+0xa8>)
    ba76:	2307      	movs	r3, #7
    ba78:	fba2 0100 	umull	r0, r1, r2, r0
    ba7c:	fb03 1102 	mla	r1, r3, r2, r1
    ba80:	a30b      	add	r3, pc, #44	; (adr r3, bab0 <sched_after_mstr_free_offset_get+0x88>)
    ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
    ba86:	f7f4 fbc5 	bl	214 <__aeabi_uldivmod>
    ba8a:	6823      	ldr	r3, [r4, #0]
    ba8c:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    ba8e:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    ba90:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    ba92:	db05      	blt.n	baa0 <sched_after_mstr_free_offset_get+0x78>
		u32_t conn_interval_us = conn_interval * 1250;
    ba94:	f240 40e2 	movw	r0, #1250	; 0x4e2
    ba98:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    ba9a:	6823      	ldr	r3, [r4, #0]
    ba9c:	4298      	cmp	r0, r3
    ba9e:	d301      	bcc.n	baa4 <sched_after_mstr_free_offset_get+0x7c>
}
    baa0:	b004      	add	sp, #16
    baa2:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    baa4:	1a1b      	subs	r3, r3, r0
    baa6:	6023      	str	r3, [r4, #0]
    baa8:	e7f7      	b.n	ba9a <sched_after_mstr_free_offset_get+0x72>
    baaa:	bf00      	nop
    baac:	f3af 8000 	nop.w
    bab0:	3b9aca00 	.word	0x3b9aca00
    bab4:	00000000 	.word	0x00000000
    bab8:	00015359 	.word	0x00015359
    babc:	20003a5c 	.word	0x20003a5c
    bac0:	00016754 	.word	0x00016754
    bac4:	0001679c 	.word	0x0001679c
    bac8:	00017f90 	.word	0x00017f90
    bacc:	00018c77 	.word	0x00018c77
    bad0:	1afd498d 	.word	0x1afd498d

0000bad4 <mayfly_sched_win_offset_use>:
{
    bad4:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    bad6:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    bada:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    badc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    bae0:	68c1      	ldr	r1, [r0, #12]
    bae2:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    bae4:	f7ff ffa0 	bl	ba28 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    bae8:	a902      	add	r1, sp, #8
    baea:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    baee:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    baf2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    baf6:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    bafa:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    bafc:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    bb00:	f7f6 f8a2 	bl	1c48 <memcpy>
}
    bb04:	b002      	add	sp, #8
    bb06:	bd10      	pop	{r4, pc}

0000bb08 <mayfly_sched_after_mstr_free_offset_get>:
{
    bb08:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    bb0a:	4c05      	ldr	r4, [pc, #20]	; (bb20 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    bb0c:	4602      	mov	r2, r0
    bb0e:	f504 7382 	add.w	r3, r4, #260	; 0x104
    bb12:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    bb16:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    bb1a:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    bb1c:	f7ff bf84 	b.w	ba28 <sched_after_mstr_free_offset_get>
    bb20:	200008c0 	.word	0x200008c0

0000bb24 <terminate_ind_rx_enqueue>:
{
    bb24:	b513      	push	{r0, r1, r4, lr}
    bb26:	4603      	mov	r3, r0
    bb28:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    bb2a:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    bb2e:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    bb32:	b978      	cbnz	r0, bb54 <terminate_ind_rx_enqueue+0x30>
    bb34:	4b18      	ldr	r3, [pc, #96]	; (bb98 <terminate_ind_rx_enqueue+0x74>)
    bb36:	9301      	str	r3, [sp, #4]
    bb38:	9300      	str	r3, [sp, #0]
    bb3a:	4b18      	ldr	r3, [pc, #96]	; (bb9c <terminate_ind_rx_enqueue+0x78>)
    bb3c:	4a18      	ldr	r2, [pc, #96]	; (bba0 <terminate_ind_rx_enqueue+0x7c>)
    bb3e:	681c      	ldr	r4, [r3, #0]
    bb40:	4918      	ldr	r1, [pc, #96]	; (bba4 <terminate_ind_rx_enqueue+0x80>)
    bb42:	4b19      	ldr	r3, [pc, #100]	; (bba8 <terminate_ind_rx_enqueue+0x84>)
    bb44:	4819      	ldr	r0, [pc, #100]	; (bbac <terminate_ind_rx_enqueue+0x88>)
	LL_ASSERT(link);
    bb46:	47a0      	blx	r4
    bb48:	4040      	eors	r0, r0
    bb4a:	f380 8811 	msr	BASEPRI, r0
    bb4e:	f04f 0004 	mov.w	r0, #4
    bb52:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    bb54:	8c1c      	ldrh	r4, [r3, #32]
    bb56:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    bb5a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    bb5e:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    bb60:	4a13      	ldr	r2, [pc, #76]	; (bbb0 <terminate_ind_rx_enqueue+0x8c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    bb62:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    bb66:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    bb6a:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    bb6e:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    bb72:	f7fb fdd0 	bl	7716 <memq_enqueue>
	LL_ASSERT(link);
    bb76:	b948      	cbnz	r0, bb8c <terminate_ind_rx_enqueue+0x68>
    bb78:	4b07      	ldr	r3, [pc, #28]	; (bb98 <terminate_ind_rx_enqueue+0x74>)
    bb7a:	9301      	str	r3, [sp, #4]
    bb7c:	9300      	str	r3, [sp, #0]
    bb7e:	4b07      	ldr	r3, [pc, #28]	; (bb9c <terminate_ind_rx_enqueue+0x78>)
    bb80:	4a07      	ldr	r2, [pc, #28]	; (bba0 <terminate_ind_rx_enqueue+0x7c>)
    bb82:	681c      	ldr	r4, [r3, #0]
    bb84:	4907      	ldr	r1, [pc, #28]	; (bba4 <terminate_ind_rx_enqueue+0x80>)
    bb86:	4b08      	ldr	r3, [pc, #32]	; (bba8 <terminate_ind_rx_enqueue+0x84>)
    bb88:	480a      	ldr	r0, [pc, #40]	; (bbb4 <terminate_ind_rx_enqueue+0x90>)
    bb8a:	e7dc      	b.n	bb46 <terminate_ind_rx_enqueue+0x22>
}
    bb8c:	b002      	add	sp, #8
    bb8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    bb92:	f005 bf2b 	b.w	119ec <radio_event_callback>
    bb96:	bf00      	nop
    bb98:	00015359 	.word	0x00015359
    bb9c:	20003a5c 	.word	0x20003a5c
    bba0:	00016754 	.word	0x00016754
    bba4:	0001679c 	.word	0x0001679c
    bba8:	0001813b 	.word	0x0001813b
    bbac:	00018cfd 	.word	0x00018cfd
    bbb0:	200008c0 	.word	0x200008c0
    bbb4:	000181eb 	.word	0x000181eb

0000bbb8 <prepare_normal_set>:
{
    bbb8:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    bbba:	6804      	ldr	r4, [r0, #0]
    bbbc:	2c00      	cmp	r4, #0
{
    bbbe:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    bbc0:	da27      	bge.n	bc12 <prepare_normal_set+0x5a>
		u32_t ticks_prepare_to_start =
    bbc2:	6843      	ldr	r3, [r0, #4]
    bbc4:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    bbc6:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    bbc8:	429d      	cmp	r5, r3
    bbca:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    bbce:	bf34      	ite	cc
    bbd0:	1ae4      	subcc	r4, r4, r3
    bbd2:	1b64      	subcs	r4, r4, r5
		ticker_status =
    bbd4:	4b10      	ldr	r3, [pc, #64]	; (bc18 <prepare_normal_set+0x60>)
    bbd6:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    bbd8:	b2a4      	uxth	r4, r4
		ticker_status =
    bbda:	2300      	movs	r3, #0
    bbdc:	9304      	str	r3, [sp, #16]
    bbde:	9303      	str	r3, [sp, #12]
    bbe0:	9302      	str	r3, [sp, #8]
    bbe2:	4618      	mov	r0, r3
    bbe4:	9401      	str	r4, [sp, #4]
    bbe6:	9400      	str	r4, [sp, #0]
    bbe8:	f7fc fc16 	bl	8418 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bbec:	f030 0302 	bics.w	r3, r0, #2
    bbf0:	d00f      	beq.n	bc12 <prepare_normal_set+0x5a>
    bbf2:	4b0a      	ldr	r3, [pc, #40]	; (bc1c <prepare_normal_set+0x64>)
    bbf4:	9301      	str	r3, [sp, #4]
    bbf6:	9300      	str	r3, [sp, #0]
    bbf8:	4b09      	ldr	r3, [pc, #36]	; (bc20 <prepare_normal_set+0x68>)
    bbfa:	4a0a      	ldr	r2, [pc, #40]	; (bc24 <prepare_normal_set+0x6c>)
    bbfc:	681c      	ldr	r4, [r3, #0]
    bbfe:	490a      	ldr	r1, [pc, #40]	; (bc28 <prepare_normal_set+0x70>)
    bc00:	4b0a      	ldr	r3, [pc, #40]	; (bc2c <prepare_normal_set+0x74>)
    bc02:	480b      	ldr	r0, [pc, #44]	; (bc30 <prepare_normal_set+0x78>)
    bc04:	47a0      	blx	r4
    bc06:	4040      	eors	r0, r0
    bc08:	f380 8811 	msr	BASEPRI, r0
    bc0c:	f04f 0004 	mov.w	r0, #4
    bc10:	df02      	svc	2
}
    bc12:	b009      	add	sp, #36	; 0x24
    bc14:	bd30      	pop	{r4, r5, pc}
    bc16:	bf00      	nop
    bc18:	0000a289 	.word	0x0000a289
    bc1c:	00015359 	.word	0x00015359
    bc20:	20003a5c 	.word	0x20003a5c
    bc24:	00016754 	.word	0x00016754
    bc28:	0001679c 	.word	0x0001679c
    bc2c:	00017f48 	.word	0x00017f48
    bc30:	00018211 	.word	0x00018211
    bc34:	00000000 	.word	0x00000000

0000bc38 <mayfly_xtal_stop_calc>:
{
    bc38:	b570      	push	{r4, r5, r6, lr}
    bc3a:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    bc3c:	2302      	movs	r3, #2
    bc3e:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    bc40:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    bc42:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    bc44:	4e82      	ldr	r6, [pc, #520]	; (be50 <mayfly_xtal_stop_calc+0x218>)
				    _radio.connection_count));
    bc46:	4d83      	ldr	r5, [pc, #524]	; (be54 <mayfly_xtal_stop_calc+0x21c>)
	struct connection *conn_curr = NULL;
    bc48:	930a      	str	r3, [sp, #40]	; 0x28
{
    bc4a:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    bc4c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    bc4e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    bc52:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    bc54:	ab09      	add	r3, sp, #36	; 0x24
    bc56:	9302      	str	r3, [sp, #8]
    bc58:	ab0c      	add	r3, sp, #48	; 0x30
    bc5a:	9300      	str	r3, [sp, #0]
    bc5c:	9601      	str	r6, [sp, #4]
    bc5e:	ab0d      	add	r3, sp, #52	; 0x34
    bc60:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    bc64:	2101      	movs	r1, #1
    bc66:	2000      	movs	r0, #0
    bc68:	f7fc fc60 	bl	852c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    bc6c:	2802      	cmp	r0, #2
    bc6e:	d015      	beq.n	bc9c <mayfly_xtal_stop_calc+0x64>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    bc70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bc72:	b1bb      	cbz	r3, bca4 <mayfly_xtal_stop_calc+0x6c>
    bc74:	4b78      	ldr	r3, [pc, #480]	; (be58 <mayfly_xtal_stop_calc+0x220>)
    bc76:	9301      	str	r3, [sp, #4]
    bc78:	9300      	str	r3, [sp, #0]
    bc7a:	4b78      	ldr	r3, [pc, #480]	; (be5c <mayfly_xtal_stop_calc+0x224>)
    bc7c:	4a78      	ldr	r2, [pc, #480]	; (be60 <mayfly_xtal_stop_calc+0x228>)
    bc7e:	681c      	ldr	r4, [r3, #0]
    bc80:	4978      	ldr	r1, [pc, #480]	; (be64 <mayfly_xtal_stop_calc+0x22c>)
    bc82:	4b79      	ldr	r3, [pc, #484]	; (be68 <mayfly_xtal_stop_calc+0x230>)
    bc84:	4879      	ldr	r0, [pc, #484]	; (be6c <mayfly_xtal_stop_calc+0x234>)
	LL_ASSERT(hdr_curr);
    bc86:	47a0      	blx	r4
    bc88:	4040      	eors	r0, r0
    bc8a:	f380 8811 	msr	BASEPRI, r0
    bc8e:	f04f 0004 	mov.w	r0, #4
    bc92:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    bc94:	2101      	movs	r1, #1
    bc96:	2000      	movs	r0, #0
    bc98:	f7fc fcc6 	bl	8628 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    bc9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bc9e:	2b02      	cmp	r3, #2
    bca0:	d0f8      	beq.n	bc94 <mayfly_xtal_stop_calc+0x5c>
    bca2:	e7e5      	b.n	bc70 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    bca4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    bca8:	2bff      	cmp	r3, #255	; 0xff
    bcaa:	d004      	beq.n	bcb6 <mayfly_xtal_stop_calc+0x7e>
    bcac:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    bcb0:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    bcb2:	4293      	cmp	r3, r2
    bcb4:	dace      	bge.n	bc54 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    bcb6:	1f5a      	subs	r2, r3, #5
    bcb8:	b2d2      	uxtb	r2, r2
    bcba:	2af9      	cmp	r2, #249	; 0xf9
    bcbc:	d805      	bhi.n	bcca <mayfly_xtal_stop_calc+0x92>
				_radio.connection_count))) {
    bcbe:	4a65      	ldr	r2, [pc, #404]	; (be54 <mayfly_xtal_stop_calc+0x21c>)
    bcc0:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    bcc4:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    bcc6:	4293      	cmp	r3, r2
    bcc8:	db05      	blt.n	bcd6 <mayfly_xtal_stop_calc+0x9e>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    bcca:	2100      	movs	r1, #0
    bccc:	2001      	movs	r0, #1
    bcce:	f7fe fe41 	bl	a954 <mayfly_xtal_retain>
}
    bcd2:	b00e      	add	sp, #56	; 0x38
    bcd4:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    bcd6:	a90a      	add	r1, sp, #40	; 0x28
    bcd8:	b2e0      	uxtb	r0, r4
    bcda:	f7ff fbcb 	bl	b474 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    bcde:	b948      	cbnz	r0, bcf4 <mayfly_xtal_stop_calc+0xbc>
    bce0:	4b5d      	ldr	r3, [pc, #372]	; (be58 <mayfly_xtal_stop_calc+0x220>)
    bce2:	9301      	str	r3, [sp, #4]
    bce4:	9300      	str	r3, [sp, #0]
    bce6:	4b5d      	ldr	r3, [pc, #372]	; (be5c <mayfly_xtal_stop_calc+0x224>)
    bce8:	4a5d      	ldr	r2, [pc, #372]	; (be60 <mayfly_xtal_stop_calc+0x228>)
    bcea:	681c      	ldr	r4, [r3, #0]
    bcec:	495d      	ldr	r1, [pc, #372]	; (be64 <mayfly_xtal_stop_calc+0x22c>)
    bcee:	4b5e      	ldr	r3, [pc, #376]	; (be68 <mayfly_xtal_stop_calc+0x230>)
    bcf0:	485f      	ldr	r0, [pc, #380]	; (be70 <mayfly_xtal_stop_calc+0x238>)
    bcf2:	e7c8      	b.n	bc86 <mayfly_xtal_stop_calc+0x4e>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    bcf4:	6803      	ldr	r3, [r0, #0]
    bcf6:	6844      	ldr	r4, [r0, #4]
    bcf8:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    bcfa:	bfb8      	it	lt
    bcfc:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    bcfe:	429c      	cmp	r4, r3
    bd00:	bf38      	it	cc
    bd02:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    bd04:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    bd06:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    bd0a:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    bd0c:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    bd0e:	f7ff fbb1 	bl	b474 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    bd12:	4605      	mov	r5, r0
    bd14:	b948      	cbnz	r0, bd2a <mayfly_xtal_stop_calc+0xf2>
    bd16:	4b50      	ldr	r3, [pc, #320]	; (be58 <mayfly_xtal_stop_calc+0x220>)
    bd18:	9301      	str	r3, [sp, #4]
    bd1a:	9300      	str	r3, [sp, #0]
    bd1c:	4b4f      	ldr	r3, [pc, #316]	; (be5c <mayfly_xtal_stop_calc+0x224>)
    bd1e:	4a50      	ldr	r2, [pc, #320]	; (be60 <mayfly_xtal_stop_calc+0x228>)
    bd20:	681c      	ldr	r4, [r3, #0]
    bd22:	4950      	ldr	r1, [pc, #320]	; (be64 <mayfly_xtal_stop_calc+0x22c>)
    bd24:	4b50      	ldr	r3, [pc, #320]	; (be68 <mayfly_xtal_stop_calc+0x230>)
    bd26:	4853      	ldr	r0, [pc, #332]	; (be74 <mayfly_xtal_stop_calc+0x23c>)
    bd28:	e7ad      	b.n	bc86 <mayfly_xtal_stop_calc+0x4e>
	ticks_prepare_to_start_next =
    bd2a:	6886      	ldr	r6, [r0, #8]
    bd2c:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    bd2e:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    bd30:	429e      	cmp	r6, r3
    bd32:	bf38      	it	cc
    bd34:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    bd36:	2a00      	cmp	r2, #0
    bd38:	da05      	bge.n	bd46 <mayfly_xtal_stop_calc+0x10e>
		ticks_to_expire -=
    bd3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    bd3c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    bd40:	4433      	add	r3, r6
    bd42:	1a9b      	subs	r3, r3, r2
    bd44:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    bd46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    bd48:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    bd4c:	4293      	cmp	r3, r2
    bd4e:	d20a      	bcs.n	bd66 <mayfly_xtal_stop_calc+0x12e>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    bd50:	2100      	movs	r1, #0
    bd52:	2001      	movs	r0, #1
    bd54:	f7fe fdfe 	bl	a954 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    bd58:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    bd5c:	2101      	movs	r1, #1
    bd5e:	4628      	mov	r0, r5
    bd60:	f7ff ff2a 	bl	bbb8 <prepare_normal_set>
    bd64:	e7b5      	b.n	bcd2 <mayfly_xtal_stop_calc+0x9a>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    bd66:	2101      	movs	r1, #1
    bd68:	4608      	mov	r0, r1
    bd6a:	f7fe fdf3 	bl	a954 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    bd6e:	682b      	ldr	r3, [r5, #0]
    bd70:	2b00      	cmp	r3, #0
    bd72:	db1e      	blt.n	bdb2 <mayfly_xtal_stop_calc+0x17a>
    bd74:	429e      	cmp	r6, r3
    bd76:	d21c      	bcs.n	bdb2 <mayfly_xtal_stop_calc+0x17a>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    bd78:	1b9b      	subs	r3, r3, r6
			ticker_status =
    bd7a:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    bd7c:	b29b      	uxth	r3, r3
			ticker_status =
    bd7e:	493e      	ldr	r1, [pc, #248]	; (be78 <mayfly_xtal_stop_calc+0x240>)
    bd80:	9105      	str	r1, [sp, #20]
    bd82:	9302      	str	r3, [sp, #8]
    bd84:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    bd88:	9506      	str	r5, [sp, #24]
    bd8a:	9004      	str	r0, [sp, #16]
    bd8c:	9003      	str	r0, [sp, #12]
    bd8e:	9001      	str	r0, [sp, #4]
    bd90:	9000      	str	r0, [sp, #0]
    bd92:	2101      	movs	r1, #1
    bd94:	f7fc fb40 	bl	8418 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bd98:	f030 0302 	bics.w	r3, r0, #2
    bd9c:	d009      	beq.n	bdb2 <mayfly_xtal_stop_calc+0x17a>
    bd9e:	4b2e      	ldr	r3, [pc, #184]	; (be58 <mayfly_xtal_stop_calc+0x220>)
    bda0:	9301      	str	r3, [sp, #4]
    bda2:	9300      	str	r3, [sp, #0]
    bda4:	4b2d      	ldr	r3, [pc, #180]	; (be5c <mayfly_xtal_stop_calc+0x224>)
    bda6:	4a2e      	ldr	r2, [pc, #184]	; (be60 <mayfly_xtal_stop_calc+0x228>)
    bda8:	681c      	ldr	r4, [r3, #0]
    bdaa:	492e      	ldr	r1, [pc, #184]	; (be64 <mayfly_xtal_stop_calc+0x22c>)
    bdac:	4b2e      	ldr	r3, [pc, #184]	; (be68 <mayfly_xtal_stop_calc+0x230>)
    bdae:	4833      	ldr	r0, [pc, #204]	; (be7c <mayfly_xtal_stop_calc+0x244>)
    bdb0:	e769      	b.n	bc86 <mayfly_xtal_stop_calc+0x4e>
		if (!conn_curr || !conn_next) {
    bdb2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    bdb4:	2e00      	cmp	r6, #0
    bdb6:	d08c      	beq.n	bcd2 <mayfly_xtal_stop_calc+0x9a>
    bdb8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    bdba:	2d00      	cmp	r5, #0
    bdbc:	d089      	beq.n	bcd2 <mayfly_xtal_stop_calc+0x9a>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    bdbe:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    bdc0:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    bdc2:	429a      	cmp	r2, r3
    bdc4:	d185      	bne.n	bcd2 <mayfly_xtal_stop_calc+0x9a>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    bdc6:	482e      	ldr	r0, [pc, #184]	; (be80 <mayfly_xtal_stop_calc+0x248>)
    bdc8:	b292      	uxth	r2, r2
    bdca:	fba2 0100 	umull	r0, r1, r2, r0
    bdce:	f240 1323 	movw	r3, #291	; 0x123
    bdd2:	fb03 1102 	mla	r1, r3, r2, r1
    bdd6:	a31c      	add	r3, pc, #112	; (adr r3, be48 <mayfly_xtal_stop_calc+0x210>)
    bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    bddc:	f7f4 fa1a 	bl	214 <__aeabi_uldivmod>
    bde0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bde2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    bde6:	2200      	movs	r2, #0
    bde8:	4298      	cmp	r0, r3
    bdea:	d318      	bcc.n	be1e <mayfly_xtal_stop_calc+0x1e6>
    bdec:	b102      	cbz	r2, bdf0 <mayfly_xtal_stop_calc+0x1b8>
    bdee:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    bdf0:	f996 201d 	ldrsb.w	r2, [r6, #29]
    bdf4:	2a00      	cmp	r2, #0
    bdf6:	f995 201d 	ldrsb.w	r2, [r5, #29]
    bdfa:	da13      	bge.n	be24 <mayfly_xtal_stop_calc+0x1ec>
    bdfc:	2a00      	cmp	r2, #0
    bdfe:	f6ff af68 	blt.w	bcd2 <mayfly_xtal_stop_calc+0x9a>
			     (ticks_slot_abs +
    be02:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    be04:	429c      	cmp	r4, r3
    be06:	f67f af64 	bls.w	bcd2 <mayfly_xtal_stop_calc+0x9a>
				status = conn_update_req(conn_curr);
    be0a:	4630      	mov	r0, r6
    be0c:	f7fe fa86 	bl	a31c <conn_update_req>
				if (status == 2) {
    be10:	2802      	cmp	r0, #2
    be12:	f47f af5e 	bne.w	bcd2 <mayfly_xtal_stop_calc+0x9a>
					conn_update_req(conn_next);
    be16:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    be18:	f7fe fa80 	bl	a31c <conn_update_req>
    be1c:	e759      	b.n	bcd2 <mayfly_xtal_stop_calc+0x9a>
				ticks_to_expire -= ticks_conn_interval;
    be1e:	1a1b      	subs	r3, r3, r0
    be20:	2201      	movs	r2, #1
    be22:	e7e1      	b.n	bde8 <mayfly_xtal_stop_calc+0x1b0>
			} else if (!conn_curr->role && conn_next->role &&
    be24:	2a00      	cmp	r2, #0
    be26:	f6bf af54 	bge.w	bcd2 <mayfly_xtal_stop_calc+0x9a>
				    (ticks_slot_abs +
    be2a:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    be2c:	429c      	cmp	r4, r3
    be2e:	f67f af50 	bls.w	bcd2 <mayfly_xtal_stop_calc+0x9a>
				status = conn_update_req(conn_next);
    be32:	4628      	mov	r0, r5
    be34:	f7fe fa72 	bl	a31c <conn_update_req>
				if (status == 2) {
    be38:	2802      	cmp	r0, #2
    be3a:	f47f af4a 	bne.w	bcd2 <mayfly_xtal_stop_calc+0x9a>
					conn_update_req(conn_curr);
    be3e:	980a      	ldr	r0, [sp, #40]	; 0x28
    be40:	e7ea      	b.n	be18 <mayfly_xtal_stop_calc+0x1e0>
    be42:	bf00      	nop
    be44:	f3af 8000 	nop.w
    be48:	1afd498d 	.word	0x1afd498d
    be4c:	00000007 	.word	0x00000007
    be50:	0000a279 	.word	0x0000a279
    be54:	200008c0 	.word	0x200008c0
    be58:	00015359 	.word	0x00015359
    be5c:	20003a5c 	.word	0x20003a5c
    be60:	00016754 	.word	0x00016754
    be64:	0001679c 	.word	0x0001679c
    be68:	00017f5b 	.word	0x00017f5b
    be6c:	00018cd0 	.word	0x00018cd0
    be70:	00018974 	.word	0x00018974
    be74:	0001899e 	.word	0x0001899e
    be78:	0000a27d 	.word	0x0000a27d
    be7c:	00018211 	.word	0x00018211
    be80:	09ce5400 	.word	0x09ce5400

0000be84 <preempt_calc>:
{
    be84:	b570      	push	{r4, r5, r6, lr}
    be86:	4614      	mov	r4, r2
    be88:	460e      	mov	r6, r1
    be8a:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    be8c:	f7fc fbe2 	bl	8654 <ticker_ticks_now_get>
	u32_t diff =
    be90:	4621      	mov	r1, r4
    be92:	f7fc fbe1 	bl	8658 <ticker_ticks_diff_get>
	diff += 3;
    be96:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    be98:	2c09      	cmp	r4, #9
    be9a:	d90f      	bls.n	bebc <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    be9c:	2100      	movs	r1, #0
    be9e:	4608      	mov	r0, r1
    bea0:	f7fe fd58 	bl	a954 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    bea4:	4632      	mov	r2, r6
    bea6:	2100      	movs	r1, #0
    bea8:	4628      	mov	r0, r5
    beaa:	f7ff fe85 	bl	bbb8 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    beae:	68ab      	ldr	r3, [r5, #8]
    beb0:	441c      	add	r4, r3
		if (diff <
    beb2:	2c26      	cmp	r4, #38	; 0x26
    beb4:	d800      	bhi.n	beb8 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    beb6:	60ac      	str	r4, [r5, #8]
		return 1;
    beb8:	2001      	movs	r0, #1
}
    beba:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    bebc:	2000      	movs	r0, #0
    bebe:	bd70      	pop	{r4, r5, r6, pc}

0000bec0 <adv_scan_configure.constprop.30>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    bec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    bec2:	ad02      	add	r5, sp, #8
    bec4:	4b10      	ldr	r3, [pc, #64]	; (bf08 <adv_scan_configure.constprop.30+0x48>)
    bec6:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    beca:	4604      	mov	r4, r0
	radio_reset();
    becc:	f006 fe9c 	bl	12c08 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    bed0:	2000      	movs	r0, #0
    bed2:	f006 fec3 	bl	12c5c <radio_tx_power_set>
	radio_isr_set(isr);
    bed6:	480d      	ldr	r0, [pc, #52]	; (bf0c <adv_scan_configure.constprop.30+0x4c>)
    bed8:	f006 fe60 	bl	12b9c <radio_isr_set>
	radio_phy_set(phy, flags);
    bedc:	2101      	movs	r1, #1
    bede:	4620      	mov	r0, r4
    bee0:	f006 feac 	bl	12c3c <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    bee4:	4628      	mov	r0, r5
    bee6:	f006 fed7 	bl	12c98 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    beea:	0062      	lsls	r2, r4, #1
    beec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    bef0:	2125      	movs	r1, #37	; 0x25
    bef2:	2008      	movs	r0, #8
    bef4:	f006 fee8 	bl	12cc8 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    bef8:	4905      	ldr	r1, [pc, #20]	; (bf10 <adv_scan_configure.constprop.30+0x50>)
    befa:	f240 605b 	movw	r0, #1627	; 0x65b
    befe:	f006 ff73 	bl	12de8 <radio_crc_configure>
}
    bf02:	b003      	add	sp, #12
    bf04:	bd30      	pop	{r4, r5, pc}
    bf06:	bf00      	nop
    bf08:	8e89bed6 	.word	0x8e89bed6
    bf0c:	0000ef39 	.word	0x0000ef39
    bf10:	00555555 	.word	0x00555555

0000bf14 <event_scan>:
{
    bf14:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    bf16:	4b64      	ldr	r3, [pc, #400]	; (c0a8 <event_scan+0x194>)
    bf18:	7cda      	ldrb	r2, [r3, #19]
{
    bf1a:	b08d      	sub	sp, #52	; 0x34
    bf1c:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    bf1e:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    bf22:	461c      	mov	r4, r3
    bf24:	b17a      	cbz	r2, bf46 <event_scan+0x32>
    bf26:	4b61      	ldr	r3, [pc, #388]	; (c0ac <event_scan+0x198>)
    bf28:	9301      	str	r3, [sp, #4]
    bf2a:	9300      	str	r3, [sp, #0]
    bf2c:	4b60      	ldr	r3, [pc, #384]	; (c0b0 <event_scan+0x19c>)
    bf2e:	4a61      	ldr	r2, [pc, #388]	; (c0b4 <event_scan+0x1a0>)
    bf30:	681c      	ldr	r4, [r3, #0]
    bf32:	4961      	ldr	r1, [pc, #388]	; (c0b8 <event_scan+0x1a4>)
    bf34:	4b61      	ldr	r3, [pc, #388]	; (c0bc <event_scan+0x1a8>)
    bf36:	4862      	ldr	r0, [pc, #392]	; (c0c0 <event_scan+0x1ac>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    bf38:	47a0      	blx	r4
    bf3a:	4040      	eors	r0, r0
    bf3c:	f380 8811 	msr	BASEPRI, r0
    bf40:	f04f 0004 	mov.w	r0, #4
    bf44:	df02      	svc	2
    bf46:	7c1b      	ldrb	r3, [r3, #16]
    bf48:	b2db      	uxtb	r3, r3
    bf4a:	2b06      	cmp	r3, #6
    bf4c:	d009      	beq.n	bf62 <event_scan+0x4e>
    bf4e:	4b57      	ldr	r3, [pc, #348]	; (c0ac <event_scan+0x198>)
    bf50:	9301      	str	r3, [sp, #4]
    bf52:	9300      	str	r3, [sp, #0]
    bf54:	4b56      	ldr	r3, [pc, #344]	; (c0b0 <event_scan+0x19c>)
    bf56:	4a57      	ldr	r2, [pc, #348]	; (c0b4 <event_scan+0x1a0>)
    bf58:	681c      	ldr	r4, [r3, #0]
    bf5a:	4957      	ldr	r1, [pc, #348]	; (c0b8 <event_scan+0x1a4>)
    bf5c:	4b57      	ldr	r3, [pc, #348]	; (c0bc <event_scan+0x1a8>)
    bf5e:	4859      	ldr	r0, [pc, #356]	; (c0c4 <event_scan+0x1b0>)
    bf60:	e7ea      	b.n	bf38 <event_scan+0x24>
	_radio.role = ROLE_SCAN;
    bf62:	2202      	movs	r2, #2
    bf64:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    bf66:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    bf68:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    bf6a:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    bf6e:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    bf70:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    bf74:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    bf76:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    bf7a:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    bf7e:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    bf80:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    bf84:	f7ff ff9c 	bl	bec0 <adv_scan_configure.constprop.30>
	chan_set(37 + _radio.scanner.chan++);
    bf88:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    bf8c:	f3c3 0081 	ubfx	r0, r3, #2, #2
    bf90:	1c42      	adds	r2, r0, #1
    bf92:	f362 0383 	bfi	r3, r2, #2, #2
    bf96:	3025      	adds	r0, #37	; 0x25
    bf98:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    bf9c:	f7ff fca2 	bl	b8e4 <chan_set>
	if (_radio.scanner.chan == 3) {
    bfa0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    bfa4:	f003 020c 	and.w	r2, r3, #12
    bfa8:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    bfaa:	bf08      	it	eq
    bfac:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    bfb0:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    bfb4:	bf08      	it	eq
    bfb6:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    bfba:	f006 ffcf 	bl	12f5c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    bfbe:	2300      	movs	r3, #0
    bfc0:	4619      	mov	r1, r3
    bfc2:	461a      	mov	r2, r3
    bfc4:	4618      	mov	r0, r3
    bfc6:	f006 ff39 	bl	12e3c <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    bfca:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    bfce:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    bfd2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    bfd6:	3008      	adds	r0, #8
    bfd8:	f006 fea4 	bl	12d24 <radio_pkt_rx_set>
	radio_rssi_measure();
    bfdc:	f006 ff46 	bl	12e6c <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    bfe0:	f006 f9dc 	bl	1239c <ctrl_rl_enabled>
    bfe4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    bfe8:	b340      	cbz	r0, c03c <event_scan+0x128>
		struct ll_filter *filter =
    bfea:	f3c3 1000 	ubfx	r0, r3, #4, #1
    bfee:	f005 ffed 	bl	11fcc <ctrl_filter_get>
    bff2:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    bff4:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    bff8:	f005 ff08 	bl	11e0c <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    bffc:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    bffe:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    c000:	1cb2      	adds	r2, r6, #2
    c002:	7830      	ldrb	r0, [r6, #0]
    c004:	f006 ff54 	bl	12eb0 <radio_filter_configure>
		radio_ar_configure(count, irks);
    c008:	4639      	mov	r1, r7
    c00a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    c00e:	f007 f929 	bl	13264 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    c012:	68e2      	ldr	r2, [r4, #12]
    c014:	f105 0109 	add.w	r1, r5, #9
    c018:	2000      	movs	r0, #0
    c01a:	f006 ffab 	bl	12f74 <radio_tmr_start>
	radio_tmr_end_capture();
    c01e:	f007 f879 	bl	13114 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    c022:	2106      	movs	r1, #6
    c024:	462a      	mov	r2, r5
    c026:	4828      	ldr	r0, [pc, #160]	; (c0c8 <event_scan+0x1b4>)
    c028:	f7ff ff2c 	bl	be84 <preempt_calc>
    c02c:	4601      	mov	r1, r0
    c02e:	b188      	cbz	r0, c054 <event_scan+0x140>
		_radio.state = STATE_STOP;
    c030:	2304      	movs	r3, #4
    c032:	7523      	strb	r3, [r4, #20]
		radio_disable();
    c034:	f006 fe9c 	bl	12d70 <radio_disable>
}
    c038:	b00d      	add	sp, #52	; 0x34
    c03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    c03c:	f013 0f30 	tst.w	r3, #48	; 0x30
    c040:	d0e7      	beq.n	c012 <event_scan+0xfe>
		struct ll_filter *wl = ctrl_filter_get(true);
    c042:	2001      	movs	r0, #1
    c044:	f005 ffc2 	bl	11fcc <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    c048:	1c82      	adds	r2, r0, #2
    c04a:	7841      	ldrb	r1, [r0, #1]
    c04c:	7800      	ldrb	r0, [r0, #0]
    c04e:	f006 ff2f 	bl	12eb0 <radio_filter_configure>
    c052:	e7de      	b.n	c012 <event_scan+0xfe>
		ret = ticker_start(
    c054:	f641 1336 	movw	r3, #6454	; 0x1936
    c058:	9308      	str	r3, [sp, #32]
    c05a:	4b1c      	ldr	r3, [pc, #112]	; (c0cc <event_scan+0x1b8>)
    c05c:	9307      	str	r3, [sp, #28]
    c05e:	2204      	movs	r2, #4
    c060:	4b1b      	ldr	r3, [pc, #108]	; (c0d0 <event_scan+0x1bc>)
    c062:	9206      	str	r2, [sp, #24]
    c064:	9305      	str	r3, [sp, #20]
    c066:	9004      	str	r0, [sp, #16]
    c068:	9003      	str	r0, [sp, #12]
    c06a:	9002      	str	r0, [sp, #8]
    c06c:	9001      	str	r0, [sp, #4]
    c06e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    c072:	3309      	adds	r3, #9
    c074:	9300      	str	r3, [sp, #0]
    c076:	462b      	mov	r3, r5
    c078:	f7fc f97e 	bl	8378 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c07c:	f030 0302 	bics.w	r3, r0, #2
    c080:	d009      	beq.n	c096 <event_scan+0x182>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c082:	4b0a      	ldr	r3, [pc, #40]	; (c0ac <event_scan+0x198>)
    c084:	9301      	str	r3, [sp, #4]
    c086:	9300      	str	r3, [sp, #0]
    c088:	4b09      	ldr	r3, [pc, #36]	; (c0b0 <event_scan+0x19c>)
    c08a:	4a0a      	ldr	r2, [pc, #40]	; (c0b4 <event_scan+0x1a0>)
    c08c:	681c      	ldr	r4, [r3, #0]
    c08e:	490a      	ldr	r1, [pc, #40]	; (c0b8 <event_scan+0x1a4>)
    c090:	4b0a      	ldr	r3, [pc, #40]	; (c0bc <event_scan+0x1a8>)
    c092:	4810      	ldr	r0, [pc, #64]	; (c0d4 <event_scan+0x1c0>)
    c094:	e750      	b.n	bf38 <event_scan+0x24>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    c096:	4619      	mov	r1, r3
    c098:	4618      	mov	r0, r3
    c09a:	4a0f      	ldr	r2, [pc, #60]	; (c0d8 <event_scan+0x1c4>)
    c09c:	f7fc fa88 	bl	85b0 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c0a0:	f030 0302 	bics.w	r3, r0, #2
    c0a4:	d1ed      	bne.n	c082 <event_scan+0x16e>
    c0a6:	e7c7      	b.n	c038 <event_scan+0x124>
    c0a8:	200008c0 	.word	0x200008c0
    c0ac:	00015359 	.word	0x00015359
    c0b0:	20003a5c 	.word	0x20003a5c
    c0b4:	00016754 	.word	0x00016754
    c0b8:	0001679c 	.word	0x0001679c
    c0bc:	0001802a 	.word	0x0001802a
    c0c0:	0001832d 	.word	0x0001832d
    c0c4:	00018367 	.word	0x00018367
    c0c8:	20000990 	.word	0x20000990
    c0cc:	0000b255 	.word	0x0000b255
    c0d0:	0000b4ed 	.word	0x0000b4ed
    c0d4:	000183a6 	.word	0x000183a6
    c0d8:	0000b45d 	.word	0x0000b45d

0000c0dc <event_stop.constprop.31>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    c0dc:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    c0de:	4b05      	ldr	r3, [pc, #20]	; (c0f4 <event_stop.constprop.31+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c0e0:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    c0e2:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c0e4:	4611      	mov	r1, r2
    c0e6:	4610      	mov	r0, r2
    c0e8:	f7fb fb86 	bl	77f8 <mayfly_enqueue>
	LL_ASSERT(!retval);
    c0ec:	b108      	cbz	r0, c0f2 <event_stop.constprop.31+0x16>
    c0ee:	f7ff f9df 	bl	b4b0 <event_stop.part.10>
    c0f2:	bd08      	pop	{r3, pc}
    c0f4:	20003d68 	.word	0x20003d68

0000c0f8 <event_common_prepare>:
{
    c0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    c0fc:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    c0fe:	681d      	ldr	r5, [r3, #0]
{
    c100:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    c102:	2c00      	cmp	r4, #0
{
    c104:	4681      	mov	r9, r0
    c106:	910b      	str	r1, [sp, #44]	; 0x2c
    c108:	4690      	mov	r8, r2
    c10a:	469b      	mov	fp, r3
    c10c:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    c110:	da03      	bge.n	c11a <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    c112:	9c16      	ldr	r4, [sp, #88]	; 0x58
    c114:	42ac      	cmp	r4, r5
    c116:	bf38      	it	cc
    c118:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    c11a:	42ac      	cmp	r4, r5
    c11c:	4f57      	ldr	r7, [pc, #348]	; (c27c <event_common_prepare+0x184>)
    c11e:	d925      	bls.n	c16c <event_common_prepare+0x74>
		ticker_status =
    c120:	f241 5374 	movw	r3, #5492	; 0x1574
    c124:	9308      	str	r3, [sp, #32]
    c126:	4b56      	ldr	r3, [pc, #344]	; (c280 <event_common_prepare+0x188>)
    c128:	9305      	str	r3, [sp, #20]
    c12a:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    c12c:	1b63      	subs	r3, r4, r5
		ticker_status =
    c12e:	9300      	str	r3, [sp, #0]
    c130:	9707      	str	r7, [sp, #28]
    c132:	464b      	mov	r3, r9
    c134:	9106      	str	r1, [sp, #24]
    c136:	9104      	str	r1, [sp, #16]
    c138:	9103      	str	r1, [sp, #12]
    c13a:	9102      	str	r1, [sp, #8]
    c13c:	9101      	str	r1, [sp, #4]
    c13e:	2201      	movs	r2, #1
    c140:	4608      	mov	r0, r1
    c142:	f7fc f919 	bl	8378 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c146:	f030 0302 	bics.w	r3, r0, #2
    c14a:	d035      	beq.n	c1b8 <event_common_prepare+0xc0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c14c:	4b4d      	ldr	r3, [pc, #308]	; (c284 <event_common_prepare+0x18c>)
    c14e:	9301      	str	r3, [sp, #4]
    c150:	9300      	str	r3, [sp, #0]
    c152:	4b4d      	ldr	r3, [pc, #308]	; (c288 <event_common_prepare+0x190>)
    c154:	4a4d      	ldr	r2, [pc, #308]	; (c28c <event_common_prepare+0x194>)
    c156:	681c      	ldr	r4, [r3, #0]
    c158:	494d      	ldr	r1, [pc, #308]	; (c290 <event_common_prepare+0x198>)
    c15a:	4b4e      	ldr	r3, [pc, #312]	; (c294 <event_common_prepare+0x19c>)
    c15c:	484e      	ldr	r0, [pc, #312]	; (c298 <event_common_prepare+0x1a0>)
		LL_ASSERT(!retval);
    c15e:	47a0      	blx	r4
    c160:	4040      	eors	r0, r0
    c162:	f380 8811 	msr	BASEPRI, r0
    c166:	f04f 0004 	mov.w	r0, #4
    c16a:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    c16c:	d21d      	bcs.n	c1aa <event_common_prepare+0xb2>
		event_active(0, 0, 0, NULL);
    c16e:	2300      	movs	r3, #0
    c170:	461a      	mov	r2, r3
    c172:	4619      	mov	r1, r3
    c174:	4618      	mov	r0, r3
    c176:	f7ff f9c9 	bl	b50c <event_active>
		ticker_status =
    c17a:	f241 5389 	movw	r3, #5513	; 0x1589
    c17e:	2100      	movs	r1, #0
    c180:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    c182:	1b2c      	subs	r4, r5, r4
		ticker_status =
    c184:	4b45      	ldr	r3, [pc, #276]	; (c29c <event_common_prepare+0x1a4>)
    c186:	9305      	str	r3, [sp, #20]
    c188:	9707      	str	r7, [sp, #28]
    c18a:	464b      	mov	r3, r9
    c18c:	9106      	str	r1, [sp, #24]
    c18e:	9104      	str	r1, [sp, #16]
    c190:	9103      	str	r1, [sp, #12]
    c192:	9102      	str	r1, [sp, #8]
    c194:	9101      	str	r1, [sp, #4]
    c196:	9400      	str	r4, [sp, #0]
    c198:	2201      	movs	r2, #1
    c19a:	4608      	mov	r0, r1
    c19c:	f7fc f8ec 	bl	8378 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c1a0:	f030 0302 	bics.w	r3, r0, #2
    c1a4:	d1d2      	bne.n	c14c <event_common_prepare+0x54>
    c1a6:	462c      	mov	r4, r5
    c1a8:	e00b      	b.n	c1c2 <event_common_prepare+0xca>
		event_active(0, 0, 0, NULL);
    c1aa:	2300      	movs	r3, #0
    c1ac:	461a      	mov	r2, r3
    c1ae:	4619      	mov	r1, r3
    c1b0:	4618      	mov	r0, r3
    c1b2:	f7ff f9ab 	bl	b50c <event_active>
		event_xtal(0, 0, 0, NULL);
    c1b6:	2300      	movs	r3, #0
    c1b8:	461a      	mov	r2, r3
    c1ba:	4619      	mov	r1, r3
    c1bc:	4618      	mov	r0, r3
    c1be:	f7ff f9cd 	bl	b55c <event_xtal>
	_radio.remainder_anchor = remainder;
    c1c2:	4e37      	ldr	r6, [pc, #220]	; (c2a0 <event_common_prepare+0x1a8>)
    c1c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c1c6:	60f3      	str	r3, [r6, #12]
	ticker_status =
    c1c8:	f241 53a1 	movw	r3, #5537	; 0x15a1
    c1cc:	9308      	str	r3, [sp, #32]
    c1ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c1d0:	9306      	str	r3, [sp, #24]
    c1d2:	2200      	movs	r2, #0
    c1d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c1d6:	9305      	str	r3, [sp, #20]
    c1d8:	9707      	str	r7, [sp, #28]
    c1da:	464b      	mov	r3, r9
    c1dc:	9204      	str	r2, [sp, #16]
    c1de:	9203      	str	r2, [sp, #12]
    c1e0:	9202      	str	r2, [sp, #8]
    c1e2:	9201      	str	r2, [sp, #4]
    c1e4:	9400      	str	r4, [sp, #0]
    c1e6:	4611      	mov	r1, r2
    c1e8:	4610      	mov	r0, r2
    c1ea:	f7fc f8c5 	bl	8378 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c1ee:	f030 0302 	bics.w	r3, r0, #2
    c1f2:	d1ab      	bne.n	c14c <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    c1f4:	2005      	movs	r0, #5
    c1f6:	f7ff ff71 	bl	c0dc <event_stop.constprop.31>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    c1fa:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    c1fe:	429d      	cmp	r5, r3
    c200:	d023      	beq.n	c24a <event_common_prepare+0x152>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    c202:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    c206:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    c20a:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    c20c:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    c20e:	bfbc      	itt	lt
    c210:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    c214:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    c218:	f8d8 2000 	ldr.w	r2, [r8]
    c21c:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    c220:	428a      	cmp	r2, r1
    c222:	bf38      	it	cc
    c224:	460a      	movcc	r2, r1
		ticker_status =
    c226:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    c22a:	b2a3      	uxth	r3, r4
    c22c:	b292      	uxth	r2, r2
		ticker_status =
    c22e:	9106      	str	r1, [sp, #24]
    c230:	2100      	movs	r1, #0
    c232:	9302      	str	r3, [sp, #8]
    c234:	9201      	str	r2, [sp, #4]
    c236:	9200      	str	r2, [sp, #0]
    c238:	9104      	str	r1, [sp, #16]
    c23a:	9103      	str	r1, [sp, #12]
    c23c:	4652      	mov	r2, sl
    c23e:	4608      	mov	r0, r1
    c240:	f7fc f8ea 	bl	8418 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c244:	f030 0302 	bics.w	r3, r0, #2
    c248:	d180      	bne.n	c14c <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    c24a:	20ff      	movs	r0, #255	; 0xff
    c24c:	f7ff fa5c 	bl	b708 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    c250:	4b14      	ldr	r3, [pc, #80]	; (c2a4 <event_common_prepare+0x1ac>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c252:	2201      	movs	r2, #1
    c254:	4611      	mov	r1, r2
    c256:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    c258:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c25c:	f7fb facc 	bl	77f8 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c260:	b148      	cbz	r0, c276 <event_common_prepare+0x17e>
    c262:	4b08      	ldr	r3, [pc, #32]	; (c284 <event_common_prepare+0x18c>)
    c264:	9301      	str	r3, [sp, #4]
    c266:	9300      	str	r3, [sp, #0]
    c268:	4b07      	ldr	r3, [pc, #28]	; (c288 <event_common_prepare+0x190>)
    c26a:	4a08      	ldr	r2, [pc, #32]	; (c28c <event_common_prepare+0x194>)
    c26c:	681c      	ldr	r4, [r3, #0]
    c26e:	4908      	ldr	r1, [pc, #32]	; (c290 <event_common_prepare+0x198>)
    c270:	4b08      	ldr	r3, [pc, #32]	; (c294 <event_common_prepare+0x19c>)
    c272:	480d      	ldr	r0, [pc, #52]	; (c2a8 <event_common_prepare+0x1b0>)
    c274:	e773      	b.n	c15e <event_common_prepare+0x66>
}
    c276:	b00d      	add	sp, #52	; 0x34
    c278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c27c:	0000b255 	.word	0x0000b255
    c280:	0000b50d 	.word	0x0000b50d
    c284:	00015359 	.word	0x00015359
    c288:	20003a5c 	.word	0x20003a5c
    c28c:	00016754 	.word	0x00016754
    c290:	0001679c 	.word	0x0001679c
    c294:	00017fe9 	.word	0x00017fe9
    c298:	00018211 	.word	0x00018211
    c29c:	0000b55d 	.word	0x0000b55d
    c2a0:	200008c0 	.word	0x200008c0
    c2a4:	20003e08 	.word	0x20003e08
    c2a8:	0001894b 	.word	0x0001894b

0000c2ac <event_scan_prepare>:
{
    c2ac:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    c2ae:	4c27      	ldr	r4, [pc, #156]	; (c34c <event_scan_prepare+0xa0>)
    c2b0:	7c23      	ldrb	r3, [r4, #16]
{
    c2b2:	b085      	sub	sp, #20
    c2b4:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    c2b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    c2ba:	b17b      	cbz	r3, c2dc <event_scan_prepare+0x30>
    c2bc:	4b24      	ldr	r3, [pc, #144]	; (c350 <event_scan_prepare+0xa4>)
    c2be:	9301      	str	r3, [sp, #4]
    c2c0:	9300      	str	r3, [sp, #0]
    c2c2:	4b24      	ldr	r3, [pc, #144]	; (c354 <event_scan_prepare+0xa8>)
    c2c4:	4a24      	ldr	r2, [pc, #144]	; (c358 <event_scan_prepare+0xac>)
    c2c6:	681c      	ldr	r4, [r3, #0]
    c2c8:	4924      	ldr	r1, [pc, #144]	; (c35c <event_scan_prepare+0xb0>)
    c2ca:	4b25      	ldr	r3, [pc, #148]	; (c360 <event_scan_prepare+0xb4>)
    c2cc:	4825      	ldr	r0, [pc, #148]	; (c364 <event_scan_prepare+0xb8>)
		LL_ASSERT(!retval);
    c2ce:	47a0      	blx	r4
    c2d0:	4040      	eors	r0, r0
    c2d2:	f380 8811 	msr	BASEPRI, r0
    c2d6:	f04f 0004 	mov.w	r0, #4
    c2da:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    c2dc:	2306      	movs	r3, #6
    c2de:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    c2e0:	9203      	str	r2, [sp, #12]
    c2e2:	4a21      	ldr	r2, [pc, #132]	; (c368 <event_scan_prepare+0xbc>)
    c2e4:	9202      	str	r2, [sp, #8]
    c2e6:	9301      	str	r3, [sp, #4]
    c2e8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    c2ec:	9300      	str	r3, [sp, #0]
    c2ee:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    c2f2:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    c2f6:	f7ff feff 	bl	c0f8 <event_common_prepare>
	if (_radio.scanner.conn) {
    c2fa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    c2fe:	b313      	cbz	r3, c346 <event_scan_prepare+0x9a>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    c300:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    c304:	2b00      	cmp	r3, #0
    c306:	da0c      	bge.n	c322 <event_scan_prepare+0x76>
			u32_t ticks_prepare_to_start =
    c308:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    c30c:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    c310:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    c314:	4291      	cmp	r1, r2
    c316:	bf2c      	ite	cs
    c318:	ebc3 0301 	rsbcs	r3, r3, r1
    c31c:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    c320:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    c322:	4b12      	ldr	r3, [pc, #72]	; (c36c <event_scan_prepare+0xc0>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c324:	2201      	movs	r2, #1
    c326:	4611      	mov	r1, r2
    c328:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    c32a:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c32c:	f7fb fa64 	bl	77f8 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c330:	b148      	cbz	r0, c346 <event_scan_prepare+0x9a>
    c332:	4b07      	ldr	r3, [pc, #28]	; (c350 <event_scan_prepare+0xa4>)
    c334:	9301      	str	r3, [sp, #4]
    c336:	9300      	str	r3, [sp, #0]
    c338:	4b06      	ldr	r3, [pc, #24]	; (c354 <event_scan_prepare+0xa8>)
    c33a:	4a07      	ldr	r2, [pc, #28]	; (c358 <event_scan_prepare+0xac>)
    c33c:	681c      	ldr	r4, [r3, #0]
    c33e:	4907      	ldr	r1, [pc, #28]	; (c35c <event_scan_prepare+0xb0>)
    c340:	4b07      	ldr	r3, [pc, #28]	; (c360 <event_scan_prepare+0xb4>)
    c342:	480b      	ldr	r0, [pc, #44]	; (c370 <event_scan_prepare+0xc4>)
    c344:	e7c3      	b.n	c2ce <event_scan_prepare+0x22>
}
    c346:	b005      	add	sp, #20
    c348:	bd30      	pop	{r4, r5, pc}
    c34a:	bf00      	nop
    c34c:	200008c0 	.word	0x200008c0
    c350:	00015359 	.word	0x00015359
    c354:	20003a5c 	.word	0x20003a5c
    c358:	00016754 	.word	0x00016754
    c35c:	0001679c 	.word	0x0001679c
    c360:	00018017 	.word	0x00018017
    c364:	00018a87 	.word	0x00018a87
    c368:	0000bf15 	.word	0x0000bf15
    c36c:	20003d88 	.word	0x20003d88
    c370:	0001894b 	.word	0x0001894b

0000c374 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    c374:	4b02      	ldr	r3, [pc, #8]	; (c380 <mayfly_xtal_start+0xc>)
    c376:	6818      	ldr	r0, [r3, #0]
    c378:	6843      	ldr	r3, [r0, #4]
    c37a:	2100      	movs	r1, #0
    c37c:	681b      	ldr	r3, [r3, #0]
    c37e:	4718      	bx	r3
    c380:	200008c0 	.word	0x200008c0

0000c384 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    c384:	4b02      	ldr	r3, [pc, #8]	; (c390 <mayfly_xtal_stop+0xc>)
    c386:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    c388:	6843      	ldr	r3, [r0, #4]
    c38a:	2100      	movs	r1, #0
    c38c:	685b      	ldr	r3, [r3, #4]
    c38e:	4718      	bx	r3
    c390:	200008c0 	.word	0x200008c0

0000c394 <chan_sel_2>:
{
    c394:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    c396:	4048      	eors	r0, r1
    c398:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    c39a:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    c39e:	2608      	movs	r6, #8
	o = 0;
    c3a0:	2400      	movs	r4, #0
		o |= (i & 1);
    c3a2:	f00e 0501 	and.w	r5, lr, #1
    c3a6:	3e01      	subs	r6, #1
    c3a8:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    c3ac:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    c3b0:	b2ec      	uxtb	r4, r5
		i >>= 1;
    c3b2:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    c3b6:	d1f4      	bne.n	c3a2 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    c3b8:	0225      	lsls	r5, r4, #8
    c3ba:	b22d      	sxth	r5, r5
    c3bc:	b2c0      	uxtb	r0, r0
    c3be:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    c3c2:	4634      	mov	r4, r6
		o |= (i & 1);
    c3c4:	f000 0601 	and.w	r6, r0, #1
    c3c8:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    c3cc:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    c3d0:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    c3d4:	b2e4      	uxtb	r4, r4
		i >>= 1;
    c3d6:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    c3da:	d1f3      	bne.n	c3c4 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    c3dc:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    c3de:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    c3e2:	3f01      	subs	r7, #1
    c3e4:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    c3e6:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    c3ea:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    c3ec:	d1d5      	bne.n	c39a <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    c3ee:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    c3f0:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    c3f2:	fbb1 f0f4 	udiv	r0, r1, r4
    c3f6:	fb04 1010 	mls	r0, r4, r0, r1
    c3fa:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    c3fc:	08c4      	lsrs	r4, r0, #3
    c3fe:	f000 0507 	and.w	r5, r0, #7
    c402:	5d14      	ldrb	r4, [r2, r4]
    c404:	412c      	asrs	r4, r5
    c406:	07e4      	lsls	r4, r4, #31
    c408:	d407      	bmi.n	c41a <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    c40a:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    c40c:	f3c1 4107 	ubfx	r1, r1, #16, #8
    c410:	4610      	mov	r0, r2
}
    c412:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    c416:	f7fd bf3d 	b.w	a294 <chan_sel_remap>
}
    c41a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c41c <ctrl_tx_enqueue>:
{
    c41c:	b510      	push	{r4, lr}
	    !conn->empty &&
    c41e:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    c422:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    c426:	f014 0f80 	tst.w	r4, #128	; 0x80
    c42a:	d118      	bne.n	c45e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    c42c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    c430:	b1ab      	cbz	r3, c45e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    c432:	0724      	lsls	r4, r4, #28
    c434:	d413      	bmi.n	c45e <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    c436:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    c43a:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    c43c:	bf04      	itt	eq
    c43e:	681c      	ldreq	r4, [r3, #0]
    c440:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    c444:	b992      	cbnz	r2, c46c <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    c446:	681a      	ldr	r2, [r3, #0]
    c448:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    c44a:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    c44c:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    c450:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    c454:	680b      	ldr	r3, [r1, #0]
    c456:	b90b      	cbnz	r3, c45c <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    c458:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    c45c:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    c45e:	b92a      	cbnz	r2, c46c <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    c460:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    c464:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    c466:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    c46a:	e7ef      	b.n	c44c <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    c46c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    c470:	681a      	ldr	r2, [r3, #0]
    c472:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    c474:	6019      	str	r1, [r3, #0]
    c476:	e7eb      	b.n	c450 <ctrl_tx_enqueue+0x34>

0000c478 <ctrl_tx_sec_enqueue>:
{
    c478:	b410      	push	{r4}
	if (conn->pause_tx) {
    c47a:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    c47e:	0724      	lsls	r4, r4, #28
{
    c480:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    c482:	d50f      	bpl.n	c4a4 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    c484:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    c488:	b931      	cbnz	r1, c498 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    c48a:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    c48e:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    c490:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    c494:	bc10      	pop	{r4}
    c496:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    c498:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    c49c:	6819      	ldr	r1, [r3, #0]
    c49e:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    c4a0:	601a      	str	r2, [r3, #0]
    c4a2:	e7f7      	b.n	c494 <ctrl_tx_sec_enqueue+0x1c>
}
    c4a4:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    c4a6:	f7ff bfb9 	b.w	c41c <ctrl_tx_enqueue>
	...

0000c4ac <feature_rsp_send>:
{
    c4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c4ae:	4f21      	ldr	r7, [pc, #132]	; (c534 <feature_rsp_send+0x88>)
{
    c4b0:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c4b2:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    c4b6:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c4b8:	f7fb f8d3 	bl	7662 <mem_acquire>
	if (!node_tx) {
    c4bc:	4604      	mov	r4, r0
    c4be:	b3b0      	cbz	r0, c52e <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    c4c0:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    c4c2:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    c4c4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    c4c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    c4cc:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    c4d0:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    c4d4:	f043 0310 	orr.w	r3, r3, #16
    c4d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    c4dc:	79b1      	ldrb	r1, [r6, #6]
    c4de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    c4e2:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    c4e6:	f3c1 0110 	ubfx	r1, r1, #0, #17
    c4ea:	400b      	ands	r3, r1
    c4ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    c4f0:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    c4f4:	f043 0320 	orr.w	r3, r3, #32
    c4f8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c4fc:	7903      	ldrb	r3, [r0, #4]
    c4fe:	f043 0303 	orr.w	r3, r3, #3
    c502:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    c504:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    c506:	2309      	movs	r3, #9
    c508:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    c50a:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    c50c:	2100      	movs	r1, #0
    c50e:	4410      	add	r0, r2
    c510:	f7f5 fbc6 	bl	1ca0 <memset>
		conn->llcp_features & 0xFF;
    c514:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    c518:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    c51a:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    c51c:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    c51e:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    c520:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    c522:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    c524:	4621      	mov	r1, r4
    c526:	f7ff ffa7 	bl	c478 <ctrl_tx_sec_enqueue>
	return 0;
    c52a:	2000      	movs	r0, #0
    c52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    c52e:	2001      	movs	r0, #1
}
    c530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c532:	bf00      	nop
    c534:	200008c0 	.word	0x200008c0

0000c538 <start_enc_rsp_send>:
{
    c538:	b510      	push	{r4, lr}
    c53a:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    c53c:	b9c9      	cbnz	r1, c572 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c53e:	480f      	ldr	r0, [pc, #60]	; (c57c <start_enc_rsp_send+0x44>)
    c540:	f7fb f88f 	bl	7662 <mem_acquire>
		if (!node_tx) {
    c544:	b1b8      	cbz	r0, c576 <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    c546:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    c548:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c54c:	f043 0320 	orr.w	r3, r3, #32
    c550:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c554:	780b      	ldrb	r3, [r1, #0]
    c556:	f043 0303 	orr.w	r3, r3, #3
    c55a:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    c55c:	2301      	movs	r3, #1
    c55e:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    c560:	2306      	movs	r3, #6
    c562:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    c564:	b140      	cbz	r0, c578 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    c566:	4601      	mov	r1, r0
    c568:	4620      	mov	r0, r4
    c56a:	f7ff ff57 	bl	c41c <ctrl_tx_enqueue>
	return 0;
    c56e:	2000      	movs	r0, #0
    c570:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    c572:	2000      	movs	r0, #0
    c574:	e7e8      	b.n	c548 <start_enc_rsp_send+0x10>
			return 1;
    c576:	2001      	movs	r0, #1
}
    c578:	bd10      	pop	{r4, pc}
    c57a:	bf00      	nop
    c57c:	20000a1c 	.word	0x20000a1c

0000c580 <reject_ext_ind_send>:
{
    c580:	b570      	push	{r4, r5, r6, lr}
    c582:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c584:	480b      	ldr	r0, [pc, #44]	; (c5b4 <reject_ext_ind_send+0x34>)
{
    c586:	460e      	mov	r6, r1
    c588:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c58a:	f7fb f86a 	bl	7662 <mem_acquire>
	if (!node_tx) {
    c58e:	b178      	cbz	r0, c5b0 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c590:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    c592:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c594:	f043 0303 	orr.w	r3, r3, #3
    c598:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    c59a:	2303      	movs	r3, #3
    c59c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c59e:	2311      	movs	r3, #17
    c5a0:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    c5a2:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    c5a4:	4601      	mov	r1, r0
    c5a6:	4620      	mov	r0, r4
    c5a8:	f7ff ff38 	bl	c41c <ctrl_tx_enqueue>
	return 0;
    c5ac:	2000      	movs	r0, #0
    c5ae:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    c5b0:	2001      	movs	r0, #1
}
    c5b2:	bd70      	pop	{r4, r5, r6, pc}
    c5b4:	20000a1c 	.word	0x20000a1c

0000c5b8 <event_connection_prepare>:
{
    c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    c5bc:	4db9      	ldr	r5, [pc, #740]	; (c8a4 <event_connection_prepare+0x2ec>)
{
    c5be:	b08f      	sub	sp, #60	; 0x3c
    c5c0:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    c5c2:	7c2b      	ldrb	r3, [r5, #16]
{
    c5c4:	910c      	str	r1, [sp, #48]	; 0x30
    c5c6:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    c5c8:	b17b      	cbz	r3, c5ea <event_connection_prepare+0x32>
    c5ca:	4bb7      	ldr	r3, [pc, #732]	; (c8a8 <event_connection_prepare+0x2f0>)
    c5cc:	9301      	str	r3, [sp, #4]
    c5ce:	9300      	str	r3, [sp, #0]
    c5d0:	4bb6      	ldr	r3, [pc, #728]	; (c8ac <event_connection_prepare+0x2f4>)
    c5d2:	4ab7      	ldr	r2, [pc, #732]	; (c8b0 <event_connection_prepare+0x2f8>)
    c5d4:	681c      	ldr	r4, [r3, #0]
    c5d6:	49b7      	ldr	r1, [pc, #732]	; (c8b4 <event_connection_prepare+0x2fc>)
    c5d8:	4bb7      	ldr	r3, [pc, #732]	; (c8b8 <event_connection_prepare+0x300>)
    c5da:	48b8      	ldr	r0, [pc, #736]	; (c8bc <event_connection_prepare+0x304>)
		LL_ASSERT(!retval);
    c5dc:	47a0      	blx	r4
    c5de:	4040      	eors	r0, r0
    c5e0:	f380 8811 	msr	BASEPRI, r0
    c5e4:	f04f 0004 	mov.w	r0, #4
    c5e8:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    c5ea:	f894 3020 	ldrb.w	r3, [r4, #32]
    c5ee:	3307      	adds	r3, #7
    c5f0:	b2db      	uxtb	r3, r3
    c5f2:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    c5f4:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c5f8:	2b00      	cmp	r3, #0
    c5fa:	da09      	bge.n	c610 <event_connection_prepare+0x58>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    c5fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    c5fe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    c600:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    c604:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    c606:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    c608:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    c60a:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    c60c:	bf88      	it	hi
    c60e:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    c610:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    c612:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    c616:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    c618:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    c61a:	b292      	uxth	r2, r2
    c61c:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    c61e:	4432      	add	r2, r6
    c620:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    c622:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    c626:	429a      	cmp	r2, r3
    c628:	f040 81bf 	bne.w	c9aa <event_connection_prepare+0x3f2>
    c62c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c630:	075f      	lsls	r7, r3, #29
    c632:	f100 84bc 	bmi.w	cfae <event_connection_prepare+0x9f6>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    c636:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    c63a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    c63e:	429a      	cmp	r2, r3
    c640:	f000 8098 	beq.w	c774 <event_connection_prepare+0x1bc>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    c644:	2005      	movs	r0, #5
    c646:	f7ff fd49 	bl	c0dc <event_stop.constprop.31>
	conn_upd = _radio.conn_upd;
    c64a:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    c64e:	b113      	cbz	r3, c656 <event_connection_prepare+0x9e>
    c650:	429c      	cmp	r4, r3
    c652:	f040 808f 	bne.w	c774 <event_connection_prepare+0x1bc>
	switch (conn->llcp_conn_param.state) {
    c656:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    c65a:	f003 0307 	and.w	r3, r3, #7
    c65e:	2b05      	cmp	r3, #5
    c660:	f200 8160 	bhi.w	c924 <event_connection_prepare+0x36c>
    c664:	e8df f013 	tbh	[pc, r3, lsl #1]
    c668:	00670006 	.word	0x00670006
    c66c:	00860134 	.word	0x00860134
    c670:	00860086 	.word	0x00860086
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c674:	4892      	ldr	r0, [pc, #584]	; (c8c0 <event_connection_prepare+0x308>)
    c676:	f7fa fff4 	bl	7662 <mem_acquire>
	if (!node_tx) {
    c67a:	4607      	mov	r7, r0
    c67c:	2800      	cmp	r0, #0
    c67e:	d079      	beq.n	c774 <event_connection_prepare+0x1bc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    c680:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    c684:	2204      	movs	r2, #4
    c686:	f362 0302 	bfi	r3, r2, #0, #3
    c68a:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c68e:	7903      	ldrb	r3, [r0, #4]
    c690:	f043 0303 	orr.w	r3, r3, #3
    c694:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    c696:	2318      	movs	r3, #24
    c698:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    c69a:	230f      	movs	r3, #15
    c69c:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    c69e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c6a2:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    c6a4:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    c6a6:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c6aa:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    c6ac:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c6b0:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    c6b2:	2300      	movs	r3, #0
    c6b4:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    c6b6:	74c3      	strb	r3, [r0, #19]
    c6b8:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    c6ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c6be:	7543      	strb	r3, [r0, #21]
    c6c0:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    c6c2:	75c3      	strb	r3, [r0, #23]
    c6c4:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    c6c6:	7643      	strb	r3, [r0, #25]
    c6c8:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    c6ca:	76c3      	strb	r3, [r0, #27]
    c6cc:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    c6ce:	7743      	strb	r3, [r0, #29]
    c6d0:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    c6d2:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    c6d6:	4601      	mov	r1, r0
    c6d8:	4620      	mov	r0, r4
    c6da:	f7ff fe9f 	bl	c41c <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c6de:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    c6e0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    c6e4:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c6e8:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    c6ea:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    c6ee:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c6f2:	da0b      	bge.n	c70c <event_connection_prepare+0x154>
			u32_t ticks_prepare_to_start =
    c6f4:	68a3      	ldr	r3, [r4, #8]
    c6f6:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    c6f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    c6fc:	428b      	cmp	r3, r1
    c6fe:	bf2c      	ite	cs
    c700:	4443      	addcs	r3, r8
    c702:	eb08 0301 	addcc.w	r3, r8, r1
    c706:	1a9b      	subs	r3, r3, r2
    c708:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    c70c:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    c70e:	4b6d      	ldr	r3, [pc, #436]	; (c8c4 <event_connection_prepare+0x30c>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    c710:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c714:	2201      	movs	r2, #1
    c716:	4611      	mov	r1, r2
    c718:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    c71a:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c71c:	f7fb f86c 	bl	77f8 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c720:	b340      	cbz	r0, c774 <event_connection_prepare+0x1bc>
    c722:	4b61      	ldr	r3, [pc, #388]	; (c8a8 <event_connection_prepare+0x2f0>)
    c724:	9301      	str	r3, [sp, #4]
    c726:	9300      	str	r3, [sp, #0]
    c728:	4b60      	ldr	r3, [pc, #384]	; (c8ac <event_connection_prepare+0x2f4>)
    c72a:	681c      	ldr	r4, [r3, #0]
    c72c:	4b66      	ldr	r3, [pc, #408]	; (c8c8 <event_connection_prepare+0x310>)
    c72e:	4a60      	ldr	r2, [pc, #384]	; (c8b0 <event_connection_prepare+0x2f8>)
    c730:	4960      	ldr	r1, [pc, #384]	; (c8b4 <event_connection_prepare+0x2fc>)
    c732:	4866      	ldr	r0, [pc, #408]	; (c8cc <event_connection_prepare+0x314>)
    c734:	e752      	b.n	c5dc <event_connection_prepare+0x24>
	if (conn->llcp_conn_param.status) {
    c736:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    c73a:	b397      	cbz	r7, c7a2 <event_connection_prepare+0x1ea>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c73c:	4860      	ldr	r0, [pc, #384]	; (c8c0 <event_connection_prepare+0x308>)
    c73e:	f7fa ff90 	bl	7662 <mem_acquire>
		if (!node_tx) {
    c742:	4601      	mov	r1, r0
    c744:	b1b0      	cbz	r0, c774 <event_connection_prepare+0x1bc>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    c746:	7903      	ldrb	r3, [r0, #4]
    c748:	f043 0303 	orr.w	r3, r3, #3
    c74c:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c74e:	2311      	movs	r3, #17
    c750:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    c752:	2303      	movs	r3, #3
    c754:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    c756:	230f      	movs	r3, #15
    c758:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    c75a:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    c75e:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    c760:	4620      	mov	r0, r4
    c762:	f7ff fe5b 	bl	c41c <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c766:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    c76a:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    c76e:	2300      	movs	r3, #0
    c770:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    c774:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    c778:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    c77c:	429a      	cmp	r2, r3
    c77e:	f000 810d 	beq.w	c99c <event_connection_prepare+0x3e4>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    c782:	2005      	movs	r0, #5
    c784:	f7ff fcaa 	bl	c0dc <event_stop.constprop.31>
	switch (conn->llcp_phy.state) {
    c788:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    c78c:	f003 0203 	and.w	r2, r3, #3
    c790:	2a03      	cmp	r2, #3
    c792:	f200 817c 	bhi.w	ca8e <event_connection_prepare+0x4d6>
    c796:	e8df f012 	tbh	[pc, r2, lsl #1]
    c79a:	00cf      	.short	0x00cf
    c79c:	01010101 	.word	0x01010101
    c7a0:	011b      	.short	0x011b
	if (!conn->role) {
    c7a2:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c7a6:	2b00      	cmp	r3, #0
    c7a8:	db3b      	blt.n	c822 <event_connection_prepare+0x26a>
		if (conn->llcp_req != conn->llcp_ack) {
    c7aa:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    c7ae:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    c7b2:	428b      	cmp	r3, r1
    c7b4:	d1de      	bne.n	c774 <event_connection_prepare+0x1bc>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c7b6:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    c7ba:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c7be:	2205      	movs	r2, #5
    c7c0:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    c7c4:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c7c8:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    c7cc:	2301      	movs	r3, #1
    c7ce:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    c7d2:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    c7d6:	b122      	cbz	r2, c7e2 <event_connection_prepare+0x22a>
				((conn->llcp_conn_param.interval /
    c7d8:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    c7dc:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    c7de:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    c7e2:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    c7e6:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c7ea:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    c7ee:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c7f2:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    c7f6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c7fa:	2202      	movs	r2, #2
    c7fc:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    c800:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    c804:	f082 0208 	eor.w	r2, r2, #8
    c808:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    c80c:	f362 0382 	bfi	r3, r2, #2, #1
    c810:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    c814:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    c816:	2301      	movs	r3, #1
    c818:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    c81c:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    c820:	e7a8      	b.n	c774 <event_connection_prepare+0x1bc>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c822:	4827      	ldr	r0, [pc, #156]	; (c8c0 <event_connection_prepare+0x308>)
    c824:	f7fa ff1d 	bl	7662 <mem_acquire>
	if (!node_tx) {
    c828:	4601      	mov	r1, r0
    c82a:	2800      	cmp	r0, #0
    c82c:	d0a2      	beq.n	c774 <event_connection_prepare+0x1bc>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c82e:	7903      	ldrb	r3, [r0, #4]
    c830:	f043 0303 	orr.w	r3, r3, #3
    c834:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    c836:	2318      	movs	r3, #24
    c838:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    c83a:	2310      	movs	r3, #16
    c83c:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    c83e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c842:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    c844:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    c846:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c84a:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    c84c:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c850:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    c852:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    c856:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    c858:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    c85c:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    c860:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    c864:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    c868:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    c86c:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    c870:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    c874:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    c878:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    c87c:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    c880:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    c884:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    c888:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    c88c:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    c890:	4620      	mov	r0, r4
    c892:	f7ff fdc3 	bl	c41c <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c896:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    c89a:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    c89e:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    c8a2:	e767      	b.n	c774 <event_connection_prepare+0x1bc>
    c8a4:	200008c0 	.word	0x200008c0
    c8a8:	00015359 	.word	0x00015359
    c8ac:	20003a5c 	.word	0x20003a5c
    c8b0:	00016754 	.word	0x00016754
    c8b4:	0001679c 	.word	0x0001679c
    c8b8:	000180d0 	.word	0x000180d0
    c8bc:	00018a87 	.word	0x00018a87
    c8c0:	20000a1c 	.word	0x20000a1c
    c8c4:	20003da8 	.word	0x20003da8
    c8c8:	0001806c 	.word	0x0001806c
    c8cc:	0001894b 	.word	0x0001894b
	if (conn->pause_tx) {
    c8d0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c8d4:	0718      	lsls	r0, r3, #28
    c8d6:	f53f af4d 	bmi.w	c774 <event_connection_prepare+0x1bc>
	node_rx = packet_rx_reserve_get(2);
    c8da:	2002      	movs	r0, #2
    c8dc:	f7fd fd0c 	bl	a2f8 <packet_rx_reserve_get>
	if (!node_rx) {
    c8e0:	2800      	cmp	r0, #0
    c8e2:	f43f af47 	beq.w	c774 <event_connection_prepare+0x1bc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    c8e6:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    c8ea:	2203      	movs	r2, #3
    c8ec:	f362 0302 	bfi	r3, r2, #0, #3
    c8f0:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    c8f4:	8c23      	ldrh	r3, [r4, #32]
    c8f6:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c8f8:	2301      	movs	r3, #1
    c8fa:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c8fc:	7a03      	ldrb	r3, [r0, #8]
    c8fe:	4313      	orrs	r3, r2
    c900:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    c902:	2318      	movs	r3, #24
    c904:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    c906:	230f      	movs	r3, #15
    c908:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    c90a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c90e:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    c910:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    c912:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c916:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    c918:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c91c:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    c91e:	f7fe fb85 	bl	b02c <packet_rx_enqueue>
    c922:	e727      	b.n	c774 <event_connection_prepare+0x1bc>
		LL_ASSERT(0);
    c924:	4bbe      	ldr	r3, [pc, #760]	; (cc20 <event_connection_prepare+0x668>)
    c926:	9301      	str	r3, [sp, #4]
    c928:	9300      	str	r3, [sp, #0]
    c92a:	4bbe      	ldr	r3, [pc, #760]	; (cc24 <event_connection_prepare+0x66c>)
    c92c:	681c      	ldr	r4, [r3, #0]
    c92e:	4bbe      	ldr	r3, [pc, #760]	; (cc28 <event_connection_prepare+0x670>)
		LL_ASSERT(0);
    c930:	4abe      	ldr	r2, [pc, #760]	; (cc2c <event_connection_prepare+0x674>)
    c932:	49bf      	ldr	r1, [pc, #764]	; (cc30 <event_connection_prepare+0x678>)
    c934:	48bf      	ldr	r0, [pc, #764]	; (cc34 <event_connection_prepare+0x67c>)
    c936:	e651      	b.n	c5dc <event_connection_prepare+0x24>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c938:	48bf      	ldr	r0, [pc, #764]	; (cc38 <event_connection_prepare+0x680>)
    c93a:	f7fa fe92 	bl	7662 <mem_acquire>
		if (!node_tx) {
    c93e:	4601      	mov	r1, r0
    c940:	b360      	cbz	r0, c99c <event_connection_prepare+0x3e4>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    c942:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c946:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    c94a:	2201      	movs	r2, #1
    c94c:	f362 0301 	bfi	r3, r2, #0, #2
    c950:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c954:	b2db      	uxtb	r3, r3
    c956:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c95a:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c95e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c962:	f363 07c5 	bfi	r7, r3, #3, #3
    c966:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    c96a:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c96e:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    c972:	f367 1286 	bfi	r2, r7, #6, #1
    c976:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c97a:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    c97c:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c97e:	f042 0203 	orr.w	r2, r2, #3
    c982:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    c984:	2203      	movs	r2, #3
    c986:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    c988:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    c98a:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    c98c:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    c98e:	4620      	mov	r0, r4
    c990:	f7ff fd44 	bl	c41c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    c994:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c998:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    c99c:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    c9a0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c9a4:	429a      	cmp	r2, r3
    c9a6:	f000 8302 	beq.w	cfae <event_connection_prepare+0x9f6>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c9aa:	2005      	movs	r0, #5
    c9ac:	f7ff fb96 	bl	c0dc <event_stop.constprop.31>
		switch (conn->llcp_type) {
    c9b0:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    c9b4:	3b01      	subs	r3, #1
    c9b6:	2b07      	cmp	r3, #7
    c9b8:	f200 85ba 	bhi.w	d530 <event_connection_prepare+0xf78>
    c9bc:	e8df f013 	tbh	[pc, r3, lsl #1]
    c9c0:	02d0006e 	.word	0x02d0006e
    c9c4:	046a034f 	.word	0x046a034f
    c9c8:	05b8049a 	.word	0x05b8049a
    c9cc:	050a04f6 	.word	0x050a04f6
		conn->llcp_phy.ack = conn->llcp_phy.req;
    c9d0:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    c9d4:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    c9d8:	f3c3 0282 	ubfx	r2, r3, #2, #3
    c9dc:	0791      	lsls	r1, r2, #30
    c9de:	d544      	bpl.n	ca6a <event_connection_prepare+0x4b2>
			conn->llcp_phy.tx = BIT(1);
    c9e0:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    c9e2:	f362 0384 	bfi	r3, r2, #2, #3
    c9e6:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    c9ea:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    c9ee:	095a      	lsrs	r2, r3, #5
    c9f0:	0790      	lsls	r0, r2, #30
    c9f2:	d543      	bpl.n	ca7c <event_connection_prepare+0x4c4>
			conn->llcp_phy.rx = BIT(1);
    c9f4:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    c9f6:	f362 1347 	bfi	r3, r2, #5, #3
    c9fa:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    c9fe:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    ca02:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    ca06:	f3c2 0182 	ubfx	r1, r2, #2, #3
    ca0a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ca0e:	428b      	cmp	r3, r1
    ca10:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    ca14:	bf14      	ite	ne
    ca16:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    ca1a:	f36f 0384 	bfceq	r3, #2, #3
    ca1e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    ca22:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    ca26:	0952      	lsrs	r2, r2, #5
    ca28:	f003 0307 	and.w	r3, r3, #7
    ca2c:	4293      	cmp	r3, r2
    ca2e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    ca32:	bf14      	ite	ne
    ca34:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    ca38:	f36f 1347 	bfceq	r3, #5, #3
    ca3c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    ca40:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    ca44:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    ca48:	f043 0301 	orr.w	r3, r3, #1
    ca4c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    ca50:	f362 0341 	bfi	r3, r2, #1, #1
    ca54:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    ca58:	2308      	movs	r3, #8
    ca5a:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    ca5e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    ca62:	3b01      	subs	r3, #1
    ca64:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    ca68:	e798      	b.n	c99c <event_connection_prepare+0x3e4>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    ca6a:	07d7      	lsls	r7, r2, #31
    ca6c:	d501      	bpl.n	ca72 <event_connection_prepare+0x4ba>
			conn->llcp_phy.tx = BIT(0);
    ca6e:	2201      	movs	r2, #1
    ca70:	e7b7      	b.n	c9e2 <event_connection_prepare+0x42a>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    ca72:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    ca76:	bf18      	it	ne
    ca78:	2204      	movne	r2, #4
    ca7a:	e7b2      	b.n	c9e2 <event_connection_prepare+0x42a>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    ca7c:	07d1      	lsls	r1, r2, #31
    ca7e:	d501      	bpl.n	ca84 <event_connection_prepare+0x4cc>
			conn->llcp_phy.rx = BIT(0);
    ca80:	2201      	movs	r2, #1
    ca82:	e7b8      	b.n	c9f6 <event_connection_prepare+0x43e>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    ca84:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    ca88:	bf18      	it	ne
    ca8a:	2204      	movne	r2, #4
    ca8c:	e7b3      	b.n	c9f6 <event_connection_prepare+0x43e>
		LL_ASSERT(0);
    ca8e:	4b64      	ldr	r3, [pc, #400]	; (cc20 <event_connection_prepare+0x668>)
    ca90:	9301      	str	r3, [sp, #4]
    ca92:	9300      	str	r3, [sp, #0]
    ca94:	4b63      	ldr	r3, [pc, #396]	; (cc24 <event_connection_prepare+0x66c>)
    ca96:	681c      	ldr	r4, [r3, #0]
    ca98:	4b68      	ldr	r3, [pc, #416]	; (cc3c <event_connection_prepare+0x684>)
    ca9a:	e749      	b.n	c930 <event_connection_prepare+0x378>
	if (!conn_upd) {
    ca9c:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    caa0:	b90b      	cbnz	r3, caa6 <event_connection_prepare+0x4ee>
		_radio.conn_upd = conn;
    caa2:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    caa6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    caaa:	f013 0303 	ands.w	r3, r3, #3
    caae:	d06c      	beq.n	cb8a <event_connection_prepare+0x5d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cab0:	4861      	ldr	r0, [pc, #388]	; (cc38 <event_connection_prepare+0x680>)
    cab2:	f7fa fdd6 	bl	7662 <mem_acquire>
		if (!node_tx) {
    cab6:	4607      	mov	r7, r0
    cab8:	2800      	cmp	r0, #0
    caba:	f000 8278 	beq.w	cfae <event_connection_prepare+0x9f6>
		switch (conn->llcp.conn_upd.state) {
    cabe:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cac2:	f003 0303 	and.w	r3, r3, #3
    cac6:	2b01      	cmp	r3, #1
    cac8:	d05d      	beq.n	cb86 <event_connection_prepare+0x5ce>
    caca:	2b02      	cmp	r3, #2
    cacc:	d154      	bne.n	cb78 <event_connection_prepare+0x5c0>
			fp_mayfly_select_or_use =
    cace:	4a5c      	ldr	r2, [pc, #368]	; (cc40 <event_connection_prepare+0x688>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    cad0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cad4:	f36f 0301 	bfc	r3, #0, #2
    cad8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    cadc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    cade:	3306      	adds	r3, #6
    cae0:	4433      	add	r3, r6
    cae2:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    cae4:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cae8:	7939      	ldrb	r1, [r7, #4]
    caea:	f041 0103 	orr.w	r1, r1, #3
    caee:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    caf0:	210c      	movs	r1, #12
    caf2:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    caf4:	2100      	movs	r1, #0
    caf6:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    caf8:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    cafc:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    cafe:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    cb02:	f240 40e2 	movw	r0, #1250	; 0x4e2
    cb06:	fbb1 f1f0 	udiv	r1, r1, r0
    cb0a:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    cb0e:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    cb12:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    cb16:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    cb1a:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    cb1e:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    cb22:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    cb26:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    cb2a:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    cb2c:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    cb30:	2900      	cmp	r1, #0
    cb32:	da0b      	bge.n	cb4c <event_connection_prepare+0x594>
			u32_t ticks_prepare_to_start =
    cb34:	68a3      	ldr	r3, [r4, #8]
    cb36:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    cb38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    cb3c:	4283      	cmp	r3, r0
    cb3e:	bf2c      	ite	cs
    cb40:	4443      	addcs	r3, r8
    cb42:	eb08 0300 	addcc.w	r3, r8, r0
    cb46:	1a5b      	subs	r3, r3, r1
    cb48:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    cb4c:	f107 0309 	add.w	r3, r7, #9
    cb50:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    cb54:	4b3b      	ldr	r3, [pc, #236]	; (cc44 <event_connection_prepare+0x68c>)
    cb56:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cb58:	2201      	movs	r2, #1
    cb5a:	4611      	mov	r1, r2
    cb5c:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    cb5e:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cb60:	f7fa fe4a 	bl	77f8 <mayfly_enqueue>
		LL_ASSERT(!retval);
    cb64:	2800      	cmp	r0, #0
    cb66:	f000 821e 	beq.w	cfa6 <event_connection_prepare+0x9ee>
    cb6a:	4b2d      	ldr	r3, [pc, #180]	; (cc20 <event_connection_prepare+0x668>)
    cb6c:	9301      	str	r3, [sp, #4]
    cb6e:	9300      	str	r3, [sp, #0]
    cb70:	4b2c      	ldr	r3, [pc, #176]	; (cc24 <event_connection_prepare+0x66c>)
    cb72:	681c      	ldr	r4, [r3, #0]
    cb74:	4b34      	ldr	r3, [pc, #208]	; (cc48 <event_connection_prepare+0x690>)
    cb76:	e5da      	b.n	c72e <event_connection_prepare+0x176>
			LL_ASSERT(0);
    cb78:	4b29      	ldr	r3, [pc, #164]	; (cc20 <event_connection_prepare+0x668>)
    cb7a:	9301      	str	r3, [sp, #4]
    cb7c:	9300      	str	r3, [sp, #0]
    cb7e:	4b29      	ldr	r3, [pc, #164]	; (cc24 <event_connection_prepare+0x66c>)
    cb80:	681c      	ldr	r4, [r3, #0]
    cb82:	4b32      	ldr	r3, [pc, #200]	; (cc4c <event_connection_prepare+0x694>)
    cb84:	e6d4      	b.n	c930 <event_connection_prepare+0x378>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    cb86:	4a32      	ldr	r2, [pc, #200]	; (cc50 <event_connection_prepare+0x698>)
    cb88:	e7a2      	b.n	cad0 <event_connection_prepare+0x518>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    cb8a:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    cb8e:	1bf7      	subs	r7, r6, r7
    cb90:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    cb92:	043a      	lsls	r2, r7, #16
    cb94:	f100 820b 	bmi.w	cfae <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    cb98:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    cb9c:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    cba0:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    cba4:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    cba8:	428a      	cmp	r2, r1
    cbaa:	d009      	beq.n	cbc0 <event_connection_prepare+0x608>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    cbac:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    cbb0:	f002 0207 	and.w	r2, r2, #7
    cbb4:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    cbb6:	bf04      	itt	eq
    cbb8:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    cbbc:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    cbc0:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    cbc4:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    cbc6:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    cbc8:	bf08      	it	eq
    cbca:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    cbce:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    cbd0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    cbd2:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    cbd6:	429a      	cmp	r2, r3
    cbd8:	d114      	bne.n	cc04 <event_connection_prepare+0x64c>
		     conn->conn_interval) ||
    cbda:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    cbde:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    cbe0:	4299      	cmp	r1, r3
    cbe2:	d10f      	bne.n	cc04 <event_connection_prepare+0x64c>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    cbe4:	f240 43e2 	movw	r3, #1250	; 0x4e2
    cbe8:	435a      	muls	r2, r3
    cbea:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    cbee:	f242 7110 	movw	r1, #10000	; 0x2710
    cbf2:	fb01 2303 	mla	r3, r1, r3, r2
    cbf6:	3b01      	subs	r3, #1
    cbf8:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    cbfc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    cbfe:	b29b      	uxth	r3, r3
    cc00:	429a      	cmp	r2, r3
    cc02:	d03a      	beq.n	cc7a <event_connection_prepare+0x6c2>
			node_rx = packet_rx_reserve_get(2);
    cc04:	2002      	movs	r0, #2
    cc06:	f7fd fb77 	bl	a2f8 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    cc0a:	bb28      	cbnz	r0, cc58 <event_connection_prepare+0x6a0>
    cc0c:	4b04      	ldr	r3, [pc, #16]	; (cc20 <event_connection_prepare+0x668>)
    cc0e:	9301      	str	r3, [sp, #4]
    cc10:	9300      	str	r3, [sp, #0]
    cc12:	4b04      	ldr	r3, [pc, #16]	; (cc24 <event_connection_prepare+0x66c>)
    cc14:	681c      	ldr	r4, [r3, #0]
    cc16:	4b0d      	ldr	r3, [pc, #52]	; (cc4c <event_connection_prepare+0x694>)
		LL_ASSERT(node_rx);
    cc18:	4a04      	ldr	r2, [pc, #16]	; (cc2c <event_connection_prepare+0x674>)
    cc1a:	4905      	ldr	r1, [pc, #20]	; (cc30 <event_connection_prepare+0x678>)
    cc1c:	480d      	ldr	r0, [pc, #52]	; (cc54 <event_connection_prepare+0x69c>)
    cc1e:	e4dd      	b.n	c5dc <event_connection_prepare+0x24>
    cc20:	00015359 	.word	0x00015359
    cc24:	20003a5c 	.word	0x20003a5c
    cc28:	00018081 	.word	0x00018081
    cc2c:	00016754 	.word	0x00016754
    cc30:	0001679c 	.word	0x0001679c
    cc34:	000166c8 	.word	0x000166c8
    cc38:	20000a1c 	.word	0x20000a1c
    cc3c:	000180a6 	.word	0x000180a6
    cc40:	0000ad79 	.word	0x0000ad79
    cc44:	20003d98 	.word	0x20003d98
    cc48:	00018035 	.word	0x00018035
    cc4c:	00018049 	.word	0x00018049
    cc50:	0000bad5 	.word	0x0000bad5
    cc54:	00018877 	.word	0x00018877
			node_rx->hdr.handle = conn->handle;
    cc58:	8c23      	ldrh	r3, [r4, #32]
    cc5a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    cc5c:	2308      	movs	r3, #8
    cc5e:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    cc60:	2300      	movs	r3, #0
    cc62:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    cc64:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    cc68:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    cc6a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    cc6e:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    cc70:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    cc74:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    cc76:	f7fe f9d9 	bl	b02c <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    cc7a:	6823      	ldr	r3, [r4, #0]
    cc7c:	6866      	ldr	r6, [r4, #4]
    cc7e:	2b00      	cmp	r3, #0
    cc80:	da09      	bge.n	cc96 <event_connection_prepare+0x6de>
			u32_t ticks_prepare_to_start =
    cc82:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    cc84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    cc88:	42b0      	cmp	r0, r6
    cc8a:	bf2c      	ite	cs
    cc8c:	4480      	addcs	r8, r0
    cc8e:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    cc90:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    cc92:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    cc96:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    cc98:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    cc9c:	49a0      	ldr	r1, [pc, #640]	; (cf20 <event_connection_prepare+0x968>)
		conn_interval_old = instant_latency * conn->conn_interval;
    cc9e:	fb13 f307 	smulbb	r3, r3, r7
    cca2:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    cca4:	fbb3 f2fa 	udiv	r2, r3, sl
    cca8:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    ccac:	fb1a f009 	smulbb	r0, sl, r9
    ccb0:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    ccb2:	4283      	cmp	r3, r0
    ccb4:	f080 80c1 	bcs.w	ce3a <event_connection_prepare+0x882>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    ccb8:	1ac0      	subs	r0, r0, r3
    ccba:	f240 1223 	movw	r2, #291	; 0x123
    ccbe:	4342      	muls	r2, r0
    ccc0:	17c3      	asrs	r3, r0, #31
    ccc2:	fb01 2303 	mla	r3, r1, r3, r2
    ccc6:	fba0 0101 	umull	r0, r1, r0, r1
    ccca:	4419      	add	r1, r3
    cccc:	a392      	add	r3, pc, #584	; (adr r3, cf18 <event_connection_prepare+0x960>)
    ccce:	e9d3 2300 	ldrd	r2, r3, [r3]
    ccd2:	f7f3 fa9f 	bl	214 <__aeabi_uldivmod>
    ccd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ccda:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    ccde:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    cce0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    cce2:	f8df b278 	ldr.w	fp, [pc, #632]	; cf5c <event_connection_prepare+0x9a4>
    cce6:	1bdb      	subs	r3, r3, r7
    cce8:	444b      	add	r3, r9
    ccea:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ccec:	6823      	ldr	r3, [r4, #0]
    ccee:	42b3      	cmp	r3, r6
    ccf0:	bf38      	it	cc
    ccf2:	4633      	movcc	r3, r6
    ccf4:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    ccf6:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    ccfa:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    ccfe:	2b00      	cmp	r3, #0
    cd00:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    cd04:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    cd06:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    cd0a:	f280 80a7 	bge.w	ce5c <event_connection_prepare+0x8a4>
				conn->slave.window_widening_periodic_us *
    cd0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    cd10:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    cd12:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    cd16:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    cd1a:	4a82      	ldr	r2, [pc, #520]	; (cf24 <event_connection_prepare+0x96c>)
    cd1c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    cd20:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    cd24:	f3c3 0382 	ubfx	r3, r3, #2, #3
    cd28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    cd2c:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    cd30:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    cd32:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    cd34:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    cd38:	4b7b      	ldr	r3, [pc, #492]	; (cf28 <event_connection_prepare+0x970>)
				conn->llcp.conn_upd.win_size * 1250;
    cd3a:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    cd3e:	f205 253f 	addw	r5, r5, #575	; 0x23f
    cd42:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    cd46:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    cd48:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    cd4c:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    cd4e:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    cd50:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    cd52:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    cd54:	429f      	cmp	r7, r3
    cd56:	bf94      	ite	ls
    cd58:	65e7      	strls	r7, [r4, #92]	; 0x5c
    cd5a:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    cd5c:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    cd5e:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    cd60:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    cd62:	fba0 010b 	umull	r0, r1, r0, fp
    cd66:	a36c      	add	r3, pc, #432	; (adr r3, cf18 <event_connection_prepare+0x960>)
    cd68:	e9d3 2300 	ldrd	r2, r3, [r3]
    cd6c:	f7f3 fa52 	bl	214 <__aeabi_uldivmod>
    cd70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd72:	1a1b      	subs	r3, r3, r0
    cd74:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    cd76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd78:	fbb3 f0f8 	udiv	r0, r3, r8
    cd7c:	fb08 f000 	mul.w	r0, r8, r0
    cd80:	a365      	add	r3, pc, #404	; (adr r3, cf18 <event_connection_prepare+0x960>)
    cd82:	e9d3 2300 	ldrd	r2, r3, [r3]
    cd86:	fba0 010b 	umull	r0, r1, r0, fp
    cd8a:	f7f3 fa43 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    cd8e:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    cd90:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    cd94:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    cd98:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    cd9c:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    cd9e:	f242 7110 	movw	r1, #10000	; 0x2710
    cda2:	fb01 6303 	mla	r3, r1, r3, r6
    cda6:	3b01      	subs	r3, #1
    cda8:	fbb3 f3f6 	udiv	r3, r3, r6
    cdac:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    cdae:	4b5f      	ldr	r3, [pc, #380]	; (cf2c <event_connection_prepare+0x974>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    cdb0:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    cdb4:	4433      	add	r3, r6
    cdb6:	fbb3 f3f6 	udiv	r3, r3, r6
    cdba:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    cdbe:	4b5c      	ldr	r3, [pc, #368]	; (cf30 <event_connection_prepare+0x978>)
    cdc0:	4433      	add	r3, r6
    cdc2:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    cdc6:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    cdc8:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    cdca:	4299      	cmp	r1, r3
    cdcc:	bfc4      	itt	gt
    cdce:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    cdd2:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    cdd4:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    cdd8:	bfc8      	it	gt
    cdda:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    cddc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    cde0:	bfc8      	it	gt
    cde2:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    cde4:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    cde8:	bf08      	it	eq
    cdea:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    cdee:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    cdf2:	2000      	movs	r0, #0
    cdf4:	2101      	movs	r1, #1
    cdf6:	f006 fab9 	bl	1336c <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    cdfa:	2200      	movs	r2, #0
    cdfc:	2101      	movs	r1, #1
		mayfly_was_enabled =
    cdfe:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    ce00:	4610      	mov	r0, r2
    ce02:	f7fa fcd1 	bl	77a8 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ce06:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    ce0a:	f641 2385 	movw	r3, #6789	; 0x1a85
    ce0e:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ce10:	3207      	adds	r2, #7
		ticker_status =
    ce12:	9300      	str	r3, [sp, #0]
    ce14:	b2d2      	uxtb	r2, r2
    ce16:	4b47      	ldr	r3, [pc, #284]	; (cf34 <event_connection_prepare+0x97c>)
    ce18:	4608      	mov	r0, r1
    ce1a:	f7fb fb4b 	bl	84b4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ce1e:	f030 0802 	bics.w	r8, r0, #2
    ce22:	d028      	beq.n	ce76 <event_connection_prepare+0x8be>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ce24:	4b44      	ldr	r3, [pc, #272]	; (cf38 <event_connection_prepare+0x980>)
    ce26:	9301      	str	r3, [sp, #4]
    ce28:	9300      	str	r3, [sp, #0]
    ce2a:	4b44      	ldr	r3, [pc, #272]	; (cf3c <event_connection_prepare+0x984>)
    ce2c:	4a44      	ldr	r2, [pc, #272]	; (cf40 <event_connection_prepare+0x988>)
    ce2e:	681c      	ldr	r4, [r3, #0]
    ce30:	4944      	ldr	r1, [pc, #272]	; (cf44 <event_connection_prepare+0x98c>)
    ce32:	4b45      	ldr	r3, [pc, #276]	; (cf48 <event_connection_prepare+0x990>)
    ce34:	4845      	ldr	r0, [pc, #276]	; (cf4c <event_connection_prepare+0x994>)
    ce36:	f7ff bbd1 	b.w	c5dc <event_connection_prepare+0x24>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    ce3a:	fb0a 3212 	mls	r2, sl, r2, r3
    ce3e:	b292      	uxth	r2, r2
    ce40:	fba2 0101 	umull	r0, r1, r2, r1
    ce44:	f240 1323 	movw	r3, #291	; 0x123
    ce48:	fb03 1102 	mla	r1, r3, r2, r1
    ce4c:	a332      	add	r3, pc, #200	; (adr r3, cf18 <event_connection_prepare+0x960>)
    ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce52:	f7f3 f9df 	bl	214 <__aeabi_uldivmod>
    ce56:	eba8 0300 	sub.w	r3, r8, r0
    ce5a:	e740      	b.n	ccde <event_connection_prepare+0x726>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    ce5c:	990c      	ldr	r1, [sp, #48]	; 0x30
    ce5e:	a32e      	add	r3, pc, #184	; (adr r3, cf18 <event_connection_prepare+0x960>)
    ce60:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce64:	fba1 010b 	umull	r0, r1, r1, fp
    ce68:	f7f3 f9d4 	bl	214 <__aeabi_uldivmod>
    ce6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    ce70:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    ce72:	4635      	mov	r5, r6
    ce74:	e78e      	b.n	cd94 <event_connection_prepare+0x7dc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    ce76:	fba5 ab0b 	umull	sl, fp, r5, fp
    ce7a:	a327      	add	r3, pc, #156	; (adr r3, cf18 <event_connection_prepare+0x960>)
    ce7c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce80:	4650      	mov	r0, sl
    ce82:	4659      	mov	r1, fp
    ce84:	f7f3 f9c6 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    ce88:	4a31      	ldr	r2, [pc, #196]	; (cf50 <event_connection_prepare+0x998>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ce8a:	f894 6020 	ldrb.w	r6, [r4, #32]
    ce8e:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    ce92:	2307      	movs	r3, #7
    ce94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ce98:	2100      	movs	r1, #0
    ce9a:	4343      	muls	r3, r0
    ce9c:	fb02 3301 	mla	r3, r2, r1, r3
    cea0:	fba0 0102 	umull	r0, r1, r0, r2
    cea4:	ebba 0000 	subs.w	r0, sl, r0
    cea8:	4419      	add	r1, r3
    ceaa:	eb6b 0101 	sbc.w	r1, fp, r1
    ceae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ceb2:	2300      	movs	r3, #0
    ceb4:	f7f3 f9ae 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ceb8:	68e3      	ldr	r3, [r4, #12]
    ceba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cebc:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    cec0:	4924      	ldr	r1, [pc, #144]	; (cf54 <event_connection_prepare+0x99c>)
		ticker_status =
    cec2:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cec4:	441a      	add	r2, r3
    cec6:	4613      	mov	r3, r2
    cec8:	4a23      	ldr	r2, [pc, #140]	; (cf58 <event_connection_prepare+0x9a0>)
		ticker_status =
    ceca:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cecc:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    ced0:	bf38      	it	cc
    ced2:	460a      	movcc	r2, r1
    ced4:	3607      	adds	r6, #7
		ticker_status =
    ced6:	f641 2195 	movw	r1, #6805	; 0x1a95
    ceda:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cedc:	b2f6      	uxtb	r6, r6
		ticker_status =
    cede:	4915      	ldr	r1, [pc, #84]	; (cf34 <event_connection_prepare+0x97c>)
    cee0:	9107      	str	r1, [sp, #28]
    cee2:	9205      	str	r2, [sp, #20]
    cee4:	9406      	str	r4, [sp, #24]
    cee6:	f8cd 800c 	str.w	r8, [sp, #12]
    ceea:	9501      	str	r5, [sp, #4]
    ceec:	9700      	str	r7, [sp, #0]
    ceee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cef0:	4632      	mov	r2, r6
    cef2:	4641      	mov	r1, r8
    cef4:	4640      	mov	r0, r8
    cef6:	f7fb fa3f 	bl	8378 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cefa:	f030 0002 	bics.w	r0, r0, #2
    cefe:	d191      	bne.n	ce24 <event_connection_prepare+0x86c>
		if (mayfly_was_enabled) {
    cf00:	f1b9 0f00 	cmp.w	r9, #0
    cf04:	f000 838f 	beq.w	d626 <event_connection_prepare+0x106e>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    cf08:	2201      	movs	r2, #1
    cf0a:	4611      	mov	r1, r2
}
    cf0c:	b00f      	add	sp, #60	; 0x3c
    cf0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    cf12:	f7fa bc49 	b.w	77a8 <mayfly_enable>
    cf16:	bf00      	nop
    cf18:	1afd498d 	.word	0x1afd498d
    cf1c:	00000007 	.word	0x00000007
    cf20:	09ce5400 	.word	0x09ce5400
    cf24:	00018430 	.word	0x00018430
    cf28:	000f4240 	.word	0x000f4240
    cf2c:	026259ff 	.word	0x026259ff
    cf30:	01c9c37f 	.word	0x01c9c37f
    cf34:	0000b255 	.word	0x0000b255
    cf38:	00015359 	.word	0x00015359
    cf3c:	20003a5c 	.word	0x20003a5c
    cf40:	00016754 	.word	0x00016754
    cf44:	0001679c 	.word	0x0001679c
    cf48:	00018049 	.word	0x00018049
    cf4c:	00018211 	.word	0x00018211
    cf50:	1afd498d 	.word	0x1afd498d
    cf54:	0000d7e9 	.word	0x0000d7e9
    cf58:	0000d7ed 	.word	0x0000d7ed
    cf5c:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
    cf60:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cf64:	2b00      	cmp	r3, #0
    cf66:	d05e      	beq.n	d026 <event_connection_prepare+0xa6e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cf68:	48c9      	ldr	r0, [pc, #804]	; (d290 <event_connection_prepare+0xcd8>)
    cf6a:	f7fa fb7a 	bl	7662 <mem_acquire>
		if (node_tx) {
    cf6e:	4607      	mov	r7, r0
    cf70:	b1e8      	cbz	r0, cfae <event_connection_prepare+0x9f6>
			conn->llcp.chan_map.initiate = 0;
    cf72:	2300      	movs	r3, #0
    cf74:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    cf78:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    cf7a:	3306      	adds	r3, #6
    cf7c:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    cf7e:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cf82:	7903      	ldrb	r3, [r0, #4]
    cf84:	f043 0303 	orr.w	r3, r3, #3
    cf88:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    cf8a:	2308      	movs	r3, #8
    cf8c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cf8e:	2301      	movs	r3, #1
    cf90:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    cf92:	2205      	movs	r2, #5
    cf94:	f104 0179 	add.w	r1, r4, #121	; 0x79
    cf98:	3008      	adds	r0, #8
    cf9a:	f7f4 fe55 	bl	1c48 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    cf9e:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    cfa2:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    cfa6:	4639      	mov	r1, r7
    cfa8:	4620      	mov	r0, r4
    cfaa:	f7ff fa37 	bl	c41c <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    cfae:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    cfb2:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    cfb6:	429a      	cmp	r2, r3
    cfb8:	d01e      	beq.n	cff8 <event_connection_prepare+0xa40>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    cfba:	2005      	movs	r0, #5
    cfbc:	f7ff f88e 	bl	c0dc <event_stop.constprop.31>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cfc0:	48b3      	ldr	r0, [pc, #716]	; (d290 <event_connection_prepare+0xcd8>)
    cfc2:	f7fa fb4e 	bl	7662 <mem_acquire>
		if (node_tx) {
    cfc6:	4601      	mov	r1, r0
    cfc8:	b1b0      	cbz	r0, cff8 <event_connection_prepare+0xa40>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    cfca:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    cfce:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cfd2:	7903      	ldrb	r3, [r0, #4]
    cfd4:	f043 0303 	orr.w	r3, r3, #3
    cfd8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    cfda:	2302      	movs	r3, #2
    cfdc:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cfde:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    cfe0:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    cfe4:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    cfe6:	4620      	mov	r0, r4
    cfe8:	f7ff fa18 	bl	c41c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    cfec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    cfee:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    cff0:	bf98      	it	ls
    cff2:	3301      	addls	r3, #1
    cff4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    cff8:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    cffc:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    d000:	429a      	cmp	r2, r3
    d002:	f000 82f7 	beq.w	d5f4 <event_connection_prepare+0x103c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d006:	2005      	movs	r0, #5
    d008:	f7ff f868 	bl	c0dc <event_stop.constprop.31>
	switch (conn->llcp_length.state) {
    d00c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    d010:	f003 0303 	and.w	r3, r3, #3
    d014:	2b03      	cmp	r3, #3
    d016:	f200 8318 	bhi.w	d64a <event_connection_prepare+0x1092>
    d01a:	e8df f013 	tbh	[pc, r3, lsl #1]
    d01e:	0291      	.short	0x0291
    d020:	02eb02eb 	.word	0x02eb02eb
    d024:	0307      	.short	0x0307
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    d026:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d02a:	1af3      	subs	r3, r6, r3
    d02c:	041f      	lsls	r7, r3, #16
    d02e:	d4be      	bmi.n	cfae <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    d030:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d034:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    d038:	f104 0717 	add.w	r7, r4, #23
    d03c:	2205      	movs	r2, #5
    d03e:	f104 0179 	add.w	r1, r4, #121	; 0x79
    d042:	4638      	mov	r0, r7
    d044:	f7f4 fe00 	bl	1c48 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    d048:	2105      	movs	r1, #5
    d04a:	4638      	mov	r0, r7
    d04c:	f7fa fcb4 	bl	79b8 <util_ones_count_get>
		conn->data_chan_count =
    d050:	7f63      	ldrb	r3, [r4, #29]
    d052:	f360 0305 	bfi	r3, r0, #0, #6
    d056:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    d058:	2301      	movs	r3, #1
    d05a:	7723      	strb	r3, [r4, #28]
    d05c:	e7a7      	b.n	cfae <event_connection_prepare+0x9f6>
	if (conn->llcp.encryption.initiate) {
    d05e:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    d062:	f1b9 0f00 	cmp.w	r9, #0
    d066:	d1a2      	bne.n	cfae <event_connection_prepare+0x9f6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d068:	4889      	ldr	r0, [pc, #548]	; (d290 <event_connection_prepare+0xcd8>)
    d06a:	f7fa fafa 	bl	7662 <mem_acquire>
	if (!node_tx) {
    d06e:	4607      	mov	r7, r0
    d070:	2800      	cmp	r0, #0
    d072:	d09c      	beq.n	cfae <event_connection_prepare+0x9f6>
	if (!conn->role) {
    d074:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d078:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    d07a:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    d07e:	db4d      	blt.n	d11c <event_connection_prepare+0xb64>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    d080:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    d084:	465b      	mov	r3, fp
    d086:	464a      	mov	r2, r9
    d088:	f104 0194 	add.w	r1, r4, #148	; 0x94
    d08c:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d090:	f005 fcde 	bl	12a50 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    d094:	2210      	movs	r2, #16
    d096:	4659      	mov	r1, fp
    d098:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    d09c:	f7f4 fdd4 	bl	1c48 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    d0a0:	f504 7189 	add.w	r1, r4, #274	; 0x112
    d0a4:	2208      	movs	r2, #8
    d0a6:	f204 1033 	addw	r0, r4, #307	; 0x133
    d0aa:	f7f4 fdcd 	bl	1c48 <memcpy>
		conn->ccm_rx.direction = 0;
    d0ae:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    d0b2:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    d0b6:	f369 0300 	bfi	r3, r9, #0, #1
    d0ba:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    d0be:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    d0c2:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    d0c6:	f043 0301 	orr.w	r3, r3, #1
    d0ca:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    d0ce:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    d0d2:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    d0d6:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    d0da:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    d0de:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    d0e2:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    d0e6:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    d0ea:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    d0ee:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    d0f2:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    d0f6:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    d0fa:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    d0fe:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    d102:	4651      	mov	r1, sl
    d104:	4620      	mov	r0, r4
    d106:	f7ff fa17 	bl	c538 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    d10a:	4639      	mov	r1, r7
    d10c:	4620      	mov	r0, r4
    d10e:	f7ff f985 	bl	c41c <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    d112:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d116:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    d11a:	e748      	b.n	cfae <event_connection_prepare+0x9f6>
	else if (!conn->pause_tx || conn->refresh) {
    d11c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d120:	f003 0348 	and.w	r3, r3, #72	; 0x48
    d124:	2b08      	cmp	r3, #8
    d126:	f000 80a2 	beq.w	d26e <event_connection_prepare+0xcb6>
		if (conn->llcp.encryption.error_code) {
    d12a:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    d12e:	f1b9 0f00 	cmp.w	r9, #0
    d132:	d020      	beq.n	d176 <event_connection_prepare+0xbbe>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    d134:	7903      	ldrb	r3, [r0, #4]
    d136:	f043 0303 	orr.w	r3, r3, #3
    d13a:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    d13c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    d140:	0698      	lsls	r0, r3, #26
    d142:	d512      	bpl.n	d16a <event_connection_prepare+0xbb2>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    d144:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    d148:	0759      	lsls	r1, r3, #29
    d14a:	d50e      	bpl.n	d16a <event_connection_prepare+0xbb2>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    d14c:	2311      	movs	r3, #17
    d14e:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    d150:	2303      	movs	r3, #3
    d152:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    d154:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    d158:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    d15a:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    d15c:	797b      	ldrb	r3, [r7, #5]
    d15e:	3301      	adds	r3, #1
    d160:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    d162:	2300      	movs	r3, #0
    d164:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    d168:	e7cf      	b.n	d10a <event_connection_prepare+0xb52>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    d16a:	230d      	movs	r3, #13
    d16c:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    d16e:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    d172:	2301      	movs	r3, #1
    d174:	e7f1      	b.n	d15a <event_connection_prepare+0xba2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d176:	4846      	ldr	r0, [pc, #280]	; (d290 <event_connection_prepare+0xcd8>)
    d178:	f7fa fa73 	bl	7662 <mem_acquire>
	if (!node_tx) {
    d17c:	4682      	mov	sl, r0
    d17e:	2800      	cmp	r0, #0
    d180:	f000 8314 	beq.w	d7ac <event_connection_prepare+0x11f4>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d184:	7903      	ldrb	r3, [r0, #4]
    d186:	f043 0303 	orr.w	r3, r3, #3
    d18a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    d18c:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    d190:	230d      	movs	r3, #13
    d192:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    d194:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    d198:	f100 0308 	add.w	r3, r0, #8
    d19c:	4619      	mov	r1, r3
    d19e:	2208      	movs	r2, #8
    d1a0:	6868      	ldr	r0, [r5, #4]
    d1a2:	930d      	str	r3, [sp, #52]	; 0x34
    d1a4:	f006 fe1e 	bl	13de4 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    d1a8:	f10a 0310 	add.w	r3, sl, #16
    d1ac:	4619      	mov	r1, r3
    d1ae:	465a      	mov	r2, fp
    d1b0:	6868      	ldr	r0, [r5, #4]
    d1b2:	930b      	str	r3, [sp, #44]	; 0x2c
    d1b4:	f006 fe16 	bl	13de4 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    d1b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d1ba:	2208      	movs	r2, #8
    d1bc:	4619      	mov	r1, r3
    d1be:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    d1c2:	f7f4 fd41 	bl	1c48 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    d1c6:	465a      	mov	r2, fp
    d1c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d1ca:	f504 708b 	add.w	r0, r4, #278	; 0x116
    d1ce:	f7f4 fd3b 	bl	1c48 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    d1d2:	4651      	mov	r1, sl
    d1d4:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    d1d6:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    d1da:	f7ff f91f 	bl	c41c <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    d1de:	4653      	mov	r3, sl
    d1e0:	464a      	mov	r2, r9
    d1e2:	f104 0194 	add.w	r1, r4, #148	; 0x94
    d1e6:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d1ea:	f005 fc31 	bl	12a50 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    d1ee:	2210      	movs	r2, #16
    d1f0:	4651      	mov	r1, sl
    d1f2:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    d1f6:	f7f4 fd27 	bl	1c48 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    d1fa:	2208      	movs	r2, #8
    d1fc:	f504 7189 	add.w	r1, r4, #274	; 0x112
    d200:	f204 1033 	addw	r0, r4, #307	; 0x133
    d204:	f7f4 fd20 	bl	1c48 <memcpy>
			conn->ccm_rx.direction = 1;
    d208:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    d20c:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    d210:	f043 0301 	orr.w	r3, r3, #1
    d214:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    d218:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    d21c:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    d220:	f369 0300 	bfi	r3, r9, #0, #1
    d224:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    d228:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    d22c:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    d230:	f043 0310 	orr.w	r3, r3, #16
    d234:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d238:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    d23a:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d23e:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    d242:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    d246:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    d24a:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    d24e:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    d252:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    d256:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    d25a:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    d25e:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d262:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d264:	2301      	movs	r3, #1
    d266:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d268:	2305      	movs	r3, #5
    d26a:	71fb      	strb	r3, [r7, #7]
    d26c:	e74d      	b.n	d10a <event_connection_prepare+0xb52>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    d26e:	4651      	mov	r1, sl
    d270:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    d274:	f7ff f960 	bl	c538 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    d278:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    d27c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d280:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    d284:	f369 03c3 	bfi	r3, r9, #3, #1
    d288:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d28c:	e73d      	b.n	d10a <event_connection_prepare+0xb52>
    d28e:	bf00      	nop
    d290:	20000a1c 	.word	0x20000a1c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d294:	48b5      	ldr	r0, [pc, #724]	; (d56c <event_connection_prepare+0xfb4>)
    d296:	f7fa f9e4 	bl	7662 <mem_acquire>
	if (node_tx) {
    d29a:	4607      	mov	r7, r0
    d29c:	2800      	cmp	r0, #0
    d29e:	f43f ae86 	beq.w	cfae <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    d2a2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d2a6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    d2aa:	4bb1      	ldr	r3, [pc, #708]	; (d570 <event_connection_prepare+0xfb8>)
    d2ac:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d2b0:	7903      	ldrb	r3, [r0, #4]
    d2b2:	f043 0303 	orr.w	r3, r3, #3
    d2b6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    d2b8:	2309      	movs	r3, #9
    d2ba:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    d2bc:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d2c0:	2b00      	cmp	r3, #0
    d2c2:	bfac      	ite	ge
    d2c4:	2308      	movge	r3, #8
    d2c6:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    d2c8:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    d2ca:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    d2cc:	2100      	movs	r1, #0
    d2ce:	4410      	add	r0, r2
    d2d0:	f7f4 fce6 	bl	1ca0 <memset>
			conn->llcp_features & 0xFF;
    d2d4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    d2d8:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    d2da:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    d2dc:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    d2de:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    d2e0:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    d2e2:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    d2e4:	4620      	mov	r0, r4
    d2e6:	f7ff f899 	bl	c41c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    d2ea:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    d2ee:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    d2f2:	e65c      	b.n	cfae <event_connection_prepare+0x9f6>
	if (conn->llcp_version.tx == 0) {
    d2f4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    d2f8:	07da      	lsls	r2, r3, #31
    d2fa:	d424      	bmi.n	d346 <event_connection_prepare+0xd8e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d2fc:	489b      	ldr	r0, [pc, #620]	; (d56c <event_connection_prepare+0xfb4>)
    d2fe:	f7fa f9b0 	bl	7662 <mem_acquire>
		if (node_tx) {
    d302:	4601      	mov	r1, r0
    d304:	2800      	cmp	r0, #0
    d306:	f43f ae52 	beq.w	cfae <event_connection_prepare+0x9f6>
			conn->llcp_ack = conn->llcp_req;
    d30a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d30e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    d312:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    d316:	f043 0301 	orr.w	r3, r3, #1
    d31a:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d31e:	7903      	ldrb	r3, [r0, #4]
    d320:	f043 0303 	orr.w	r3, r3, #3
    d324:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    d326:	2306      	movs	r3, #6
    d328:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d32a:	230c      	movs	r3, #12
    d32c:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    d32e:	2309      	movs	r3, #9
    d330:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    d332:	f06f 030e 	mvn.w	r3, #14
    d336:	7243      	strb	r3, [r0, #9]
    d338:	2305      	movs	r3, #5
    d33a:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    d33c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d340:	72c3      	strb	r3, [r0, #11]
    d342:	7303      	strb	r3, [r0, #12]
    d344:	e7ce      	b.n	d2e4 <event_connection_prepare+0xd2c>
	} else if (conn->llcp_version.rx != 0) {
    d346:	079b      	lsls	r3, r3, #30
    d348:	d528      	bpl.n	d39c <event_connection_prepare+0xde4>
		conn->llcp_ack = conn->llcp_req;
    d34a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d34e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    d352:	2002      	movs	r0, #2
    d354:	f7fc ffd0 	bl	a2f8 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    d358:	b930      	cbnz	r0, d368 <event_connection_prepare+0xdb0>
    d35a:	4b86      	ldr	r3, [pc, #536]	; (d574 <event_connection_prepare+0xfbc>)
    d35c:	9301      	str	r3, [sp, #4]
    d35e:	9300      	str	r3, [sp, #0]
    d360:	4b85      	ldr	r3, [pc, #532]	; (d578 <event_connection_prepare+0xfc0>)
    d362:	681c      	ldr	r4, [r3, #0]
    d364:	4b85      	ldr	r3, [pc, #532]	; (d57c <event_connection_prepare+0xfc4>)
    d366:	e457      	b.n	cc18 <event_connection_prepare+0x660>
		node_rx->hdr.handle = conn->handle;
    d368:	8c23      	ldrh	r3, [r4, #32]
    d36a:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d36c:	2301      	movs	r3, #1
    d36e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    d370:	7a03      	ldrb	r3, [r0, #8]
    d372:	f043 0303 	orr.w	r3, r3, #3
    d376:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    d378:	2306      	movs	r3, #6
    d37a:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    d37c:	230c      	movs	r3, #12
    d37e:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    d380:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    d384:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    d386:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    d38a:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    d38e:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    d392:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    d396:	f7fd fe49 	bl	b02c <packet_rx_enqueue>
    d39a:	e608      	b.n	cfae <event_connection_prepare+0x9f6>
		LL_ASSERT(0);
    d39c:	4b75      	ldr	r3, [pc, #468]	; (d574 <event_connection_prepare+0xfbc>)
    d39e:	9301      	str	r3, [sp, #4]
    d3a0:	9300      	str	r3, [sp, #0]
    d3a2:	4b75      	ldr	r3, [pc, #468]	; (d578 <event_connection_prepare+0xfc0>)
    d3a4:	681c      	ldr	r4, [r3, #0]
    d3a6:	4b75      	ldr	r3, [pc, #468]	; (d57c <event_connection_prepare+0xfc4>)
    d3a8:	f7ff bac2 	b.w	c930 <event_connection_prepare+0x378>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d3ac:	486f      	ldr	r0, [pc, #444]	; (d56c <event_connection_prepare+0xfb4>)
    d3ae:	f7fa f958 	bl	7662 <mem_acquire>
	if (node_tx) {
    d3b2:	4601      	mov	r1, r0
    d3b4:	2800      	cmp	r0, #0
    d3b6:	f43f adfa 	beq.w	cfae <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    d3ba:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d3be:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d3c2:	7903      	ldrb	r3, [r0, #4]
    d3c4:	f043 0303 	orr.w	r3, r3, #3
    d3c8:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    d3ca:	2301      	movs	r3, #1
    d3cc:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    d3ce:	2312      	movs	r3, #18
    d3d0:	71c3      	strb	r3, [r0, #7]
    d3d2:	e787      	b.n	d2e4 <event_connection_prepare+0xd2c>
	if (conn->llcp.phy_upd_ind.initiate) {
    d3d4:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    d3d8:	07d7      	lsls	r7, r2, #31
    d3da:	d554      	bpl.n	d486 <event_connection_prepare+0xece>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d3dc:	4863      	ldr	r0, [pc, #396]	; (d56c <event_connection_prepare+0xfb4>)
    d3de:	f7fa f940 	bl	7662 <mem_acquire>
		if (node_tx) {
    d3e2:	4607      	mov	r7, r0
    d3e4:	2800      	cmp	r0, #0
    d3e6:	f43f ade2 	beq.w	cfae <event_connection_prepare+0x9f6>
			conn->llcp.phy_upd_ind.initiate = 0;
    d3ea:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d3ee:	f36f 0300 	bfc	r3, #0, #1
    d3f2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    d3f6:	b2db      	uxtb	r3, r3
    d3f8:	f3c3 0982 	ubfx	r9, r3, #2, #3
    d3fc:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    d400:	d13b      	bne.n	d47a <event_connection_prepare+0xec2>
				conn->llcp_ack = conn->llcp_req;
    d402:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    d406:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    d40a:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    d40c:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    d410:	d51d      	bpl.n	d44e <event_connection_prepare+0xe96>
					node_rx = packet_rx_reserve_get(2);
    d412:	2002      	movs	r0, #2
    d414:	f7fc ff70 	bl	a2f8 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    d418:	b938      	cbnz	r0, d42a <event_connection_prepare+0xe72>
		LL_ASSERT(node_rx);
    d41a:	4b56      	ldr	r3, [pc, #344]	; (d574 <event_connection_prepare+0xfbc>)
    d41c:	9301      	str	r3, [sp, #4]
    d41e:	9300      	str	r3, [sp, #0]
    d420:	4b55      	ldr	r3, [pc, #340]	; (d578 <event_connection_prepare+0xfc0>)
    d422:	681c      	ldr	r4, [r3, #0]
    d424:	4b56      	ldr	r3, [pc, #344]	; (d580 <event_connection_prepare+0xfc8>)
    d426:	f7ff bbf7 	b.w	cc18 <event_connection_prepare+0x660>
					node_rx->hdr.handle = conn->handle;
    d42a:	8c23      	ldrh	r3, [r4, #32]
    d42c:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    d42e:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    d432:	230c      	movs	r3, #12
    d434:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    d436:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d43a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d43e:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    d440:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    d444:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d448:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    d44a:	f7fd fdef 	bl	b02c <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d44e:	793b      	ldrb	r3, [r7, #4]
    d450:	f043 0303 	orr.w	r3, r3, #3
    d454:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    d456:	2305      	movs	r3, #5
    d458:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d45a:	2318      	movs	r3, #24
    d45c:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    d45e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d462:	f3c3 0382 	ubfx	r3, r3, #2, #3
    d466:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    d468:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d46c:	f3c3 1342 	ubfx	r3, r3, #5, #3
    d470:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    d472:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d476:	817b      	strh	r3, [r7, #10]
    d478:	e595      	b.n	cfa6 <event_connection_prepare+0x9ee>
								 conn->latency +
    d47a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d47c:	3306      	adds	r3, #6
    d47e:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    d480:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    d484:	e7e3      	b.n	d44e <event_connection_prepare+0xe96>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    d486:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d48a:	1af3      	subs	r3, r6, r3
    d48c:	0419      	lsls	r1, r3, #16
    d48e:	f53f ad8e 	bmi.w	cfae <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    d492:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d496:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    d49a:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    d49e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    d4a2:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    d4a6:	bf18      	it	ne
    d4a8:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    d4ac:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    d4b0:	bf1c      	itt	ne
    d4b2:	f367 03c5 	bfine	r3, r7, #3, #3
    d4b6:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    d4ba:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    d4be:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    d4c2:	d008      	beq.n	d4d6 <event_connection_prepare+0xf1e>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    d4c4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d4c8:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    d4cc:	095b      	lsrs	r3, r3, #5
    d4ce:	f363 0702 	bfi	r7, r3, #0, #3
    d4d2:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    d4d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d4da:	461f      	mov	r7, r3
    d4dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d4e0:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    d4e4:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    d4e6:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    d4ea:	d40b      	bmi.n	d504 <event_connection_prepare+0xf4c>
    d4ec:	b2fb      	uxtb	r3, r7
    d4ee:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d4f2:	4283      	cmp	r3, r0
    d4f4:	d106      	bne.n	d504 <event_connection_prepare+0xf4c>
		    (conn->phy_rx == old_rx)) {
    d4f6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    d4fa:	f003 0307 	and.w	r3, r3, #7
    d4fe:	428b      	cmp	r3, r1
    d500:	f43f ad55 	beq.w	cfae <event_connection_prepare+0x9f6>
		node_rx = packet_rx_reserve_get(2);
    d504:	2002      	movs	r0, #2
    d506:	f7fc fef7 	bl	a2f8 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    d50a:	2800      	cmp	r0, #0
    d50c:	d085      	beq.n	d41a <event_connection_prepare+0xe62>
		node_rx->hdr.handle = conn->handle;
    d50e:	8c23      	ldrh	r3, [r4, #32]
    d510:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d512:	230c      	movs	r3, #12
    d514:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    d516:	2300      	movs	r3, #0
    d518:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    d51a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d51e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d522:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    d524:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    d528:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d52c:	7343      	strb	r3, [r0, #13]
    d52e:	e732      	b.n	d396 <event_connection_prepare+0xdde>
			LL_ASSERT(0);
    d530:	4b10      	ldr	r3, [pc, #64]	; (d574 <event_connection_prepare+0xfbc>)
    d532:	9301      	str	r3, [sp, #4]
    d534:	9300      	str	r3, [sp, #0]
    d536:	4b10      	ldr	r3, [pc, #64]	; (d578 <event_connection_prepare+0xfc0>)
    d538:	681c      	ldr	r4, [r3, #0]
    d53a:	4b12      	ldr	r3, [pc, #72]	; (d584 <event_connection_prepare+0xfcc>)
    d53c:	f7ff b9f8 	b.w	c930 <event_connection_prepare+0x378>
		free_count_rx = packet_rx_acquired_count_get() +
    d540:	f7fc fec4 	bl	a2cc <packet_rx_acquired_count_get>
    d544:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    d546:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    d54a:	f7fa f8b9 	bl	76c0 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    d54e:	4438      	add	r0, r7
    d550:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    d552:	28ff      	cmp	r0, #255	; 0xff
    d554:	d920      	bls.n	d598 <event_connection_prepare+0xfe0>
		LL_ASSERT(free_count_rx <= 0xFF);
    d556:	4b07      	ldr	r3, [pc, #28]	; (d574 <event_connection_prepare+0xfbc>)
    d558:	9301      	str	r3, [sp, #4]
    d55a:	9300      	str	r3, [sp, #0]
    d55c:	4b06      	ldr	r3, [pc, #24]	; (d578 <event_connection_prepare+0xfc0>)
    d55e:	4a0a      	ldr	r2, [pc, #40]	; (d588 <event_connection_prepare+0xfd0>)
    d560:	681c      	ldr	r4, [r3, #0]
    d562:	490a      	ldr	r1, [pc, #40]	; (d58c <event_connection_prepare+0xfd4>)
    d564:	4b0a      	ldr	r3, [pc, #40]	; (d590 <event_connection_prepare+0xfd8>)
    d566:	480b      	ldr	r0, [pc, #44]	; (d594 <event_connection_prepare+0xfdc>)
    d568:	f7ff b838 	b.w	c5dc <event_connection_prepare+0x24>
    d56c:	20000a1c 	.word	0x20000a1c
    d570:	000141ff 	.word	0x000141ff
    d574:	00015359 	.word	0x00015359
    d578:	20003a5c 	.word	0x20003a5c
    d57c:	0001805d 	.word	0x0001805d
    d580:	000180b9 	.word	0x000180b9
    d584:	000180d0 	.word	0x000180d0
    d588:	00016754 	.word	0x00016754
    d58c:	0001679c 	.word	0x0001679c
    d590:	00018097 	.word	0x00018097
    d594:	0001825f 	.word	0x0001825f
		if (_radio.packet_rx_data_count != free_count_rx) {
    d598:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    d59c:	4283      	cmp	r3, r0
    d59e:	d129      	bne.n	d5f4 <event_connection_prepare+0x103c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d5a0:	4885      	ldr	r0, [pc, #532]	; (d7b8 <event_connection_prepare+0x1200>)
    d5a2:	f7fa f85e 	bl	7662 <mem_acquire>
		if (!node_tx) {
    d5a6:	4601      	mov	r1, r0
    d5a8:	b320      	cbz	r0, d5f4 <event_connection_prepare+0x103c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    d5aa:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    d5ae:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    d5b2:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    d5b6:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    d5b8:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    d5ba:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    d5bc:	f365 0301 	bfi	r3, r5, #0, #2
    d5c0:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d5c4:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    d5c6:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d5c8:	f043 0303 	orr.w	r3, r3, #3
    d5cc:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    d5ce:	2309      	movs	r3, #9
    d5d0:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    d5d2:	2314      	movs	r3, #20
    d5d4:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    d5d6:	231b      	movs	r3, #27
    d5d8:	720b      	strb	r3, [r1, #8]
    d5da:	2300      	movs	r3, #0
    d5dc:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    d5de:	2348      	movs	r3, #72	; 0x48
    d5e0:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    d5e2:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    d5e4:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    d5e6:	4620      	mov	r0, r4
    d5e8:	f7fe ff18 	bl	c41c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    d5ec:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    d5f0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    d5f4:	f894 3020 	ldrb.w	r3, [r4, #32]
    d5f8:	f994 501d 	ldrsb.w	r5, [r4, #29]
    d5fc:	486f      	ldr	r0, [pc, #444]	; (d7bc <event_connection_prepare+0x1204>)
    d5fe:	4970      	ldr	r1, [pc, #448]	; (d7c0 <event_connection_prepare+0x1208>)
    d600:	68a2      	ldr	r2, [r4, #8]
    d602:	9403      	str	r4, [sp, #12]
    d604:	3307      	adds	r3, #7
    d606:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    d60a:	bf38      	it	cc
    d60c:	4601      	movcc	r1, r0
    d60e:	b2db      	uxtb	r3, r3
    d610:	e88d 000c 	stmia.w	sp, {r2, r3}
    d614:	9102      	str	r1, [sp, #8]
    d616:	1d23      	adds	r3, r4, #4
    d618:	4622      	mov	r2, r4
    d61a:	990c      	ldr	r1, [sp, #48]	; 0x30
    d61c:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    d61e:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    d620:	f7fe fd6a 	bl	c0f8 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    d624:	8466      	strh	r6, [r4, #34]	; 0x22
}
    d626:	b00f      	add	sp, #60	; 0x3c
    d628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    d62c:	f7fc fe4e 	bl	a2cc <packet_rx_acquired_count_get>
    d630:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    d632:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    d636:	f7fa f843 	bl	76c0 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    d63a:	4438      	add	r0, r7
    d63c:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    d63e:	28ff      	cmp	r0, #255	; 0xff
    d640:	d889      	bhi.n	d556 <event_connection_prepare+0xf9e>
		if (_radio.packet_rx_data_count != free_count_rx) {
    d642:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    d646:	4283      	cmp	r3, r0
    d648:	d007      	beq.n	d65a <event_connection_prepare+0x10a2>
		LL_ASSERT(0);
    d64a:	4b5e      	ldr	r3, [pc, #376]	; (d7c4 <event_connection_prepare+0x120c>)
    d64c:	9301      	str	r3, [sp, #4]
    d64e:	9300      	str	r3, [sp, #0]
    d650:	4b5d      	ldr	r3, [pc, #372]	; (d7c8 <event_connection_prepare+0x1210>)
    d652:	681c      	ldr	r4, [r3, #0]
    d654:	4b5d      	ldr	r3, [pc, #372]	; (d7cc <event_connection_prepare+0x1214>)
    d656:	f7ff b96b 	b.w	c930 <event_connection_prepare+0x378>
		conn->llcp_length.ack = conn->llcp_length.req;
    d65a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    d65e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    d662:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    d666:	2100      	movs	r1, #0
    d668:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    d66c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d670:	f361 02c3 	bfi	r2, r1, #3, #1
    d674:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    d678:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    d67c:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    d67e:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    d682:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    d684:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    d688:	f7fa f81a 	bl	76c0 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    d68c:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    d690:	b10b      	cbz	r3, d696 <event_connection_prepare+0x10de>
			free_count_conn++;
    d692:	3001      	adds	r0, #1
    d694:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    d696:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    d69a:	b10b      	cbz	r3, d6a0 <event_connection_prepare+0x10e8>
			free_count_conn++;
    d69c:	3001      	adds	r0, #1
    d69e:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d6a0:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d6a2:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d6a6:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d6a8:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d6aa:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d6ae:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d6b0:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d6b2:	d058      	beq.n	d766 <event_connection_prepare+0x11ae>
    d6b4:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    d6b8:	42bb      	cmp	r3, r7
    d6ba:	d354      	bcc.n	d766 <event_connection_prepare+0x11ae>
		node_rx = packet_rx_reserve_get(2);
    d6bc:	2002      	movs	r0, #2
    d6be:	f7fc fe1b 	bl	a2f8 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    d6c2:	2800      	cmp	r0, #0
    d6c4:	d15b      	bne.n	d77e <event_connection_prepare+0x11c6>
    d6c6:	4b3f      	ldr	r3, [pc, #252]	; (d7c4 <event_connection_prepare+0x120c>)
    d6c8:	9301      	str	r3, [sp, #4]
    d6ca:	9300      	str	r3, [sp, #0]
    d6cc:	4b3e      	ldr	r3, [pc, #248]	; (d7c8 <event_connection_prepare+0x1210>)
    d6ce:	681c      	ldr	r4, [r3, #0]
    d6d0:	4b3e      	ldr	r3, [pc, #248]	; (d7cc <event_connection_prepare+0x1214>)
    d6d2:	f7ff baa1 	b.w	cc18 <event_connection_prepare+0x660>
				if (_radio.packet_rx_acquire == 0) {
    d6d6:	b90b      	cbnz	r3, d6dc <event_connection_prepare+0x1124>
						_radio.packet_rx_count - 1;
    d6d8:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    d6dc:	3b01      	subs	r3, #1
    d6de:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    d6e2:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    d6e6:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    d6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d6ee:	4649      	mov	r1, r9
    d6f0:	6818      	ldr	r0, [r3, #0]
    d6f2:	f7f9 ffd0 	bl	7696 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    d6f6:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    d6fa:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    d6fe:	3a01      	subs	r2, #1
    d700:	4293      	cmp	r3, r2
    d702:	db0a      	blt.n	d71a <event_connection_prepare+0x1162>
    d704:	4b2f      	ldr	r3, [pc, #188]	; (d7c4 <event_connection_prepare+0x120c>)
    d706:	9301      	str	r3, [sp, #4]
    d708:	9300      	str	r3, [sp, #0]
    d70a:	4b2f      	ldr	r3, [pc, #188]	; (d7c8 <event_connection_prepare+0x1210>)
    d70c:	4a30      	ldr	r2, [pc, #192]	; (d7d0 <event_connection_prepare+0x1218>)
    d70e:	681c      	ldr	r4, [r3, #0]
    d710:	4930      	ldr	r1, [pc, #192]	; (d7d4 <event_connection_prepare+0x121c>)
    d712:	4b2e      	ldr	r3, [pc, #184]	; (d7cc <event_connection_prepare+0x1214>)
    d714:	4830      	ldr	r0, [pc, #192]	; (d7d8 <event_connection_prepare+0x1220>)
    d716:	f7fe bf61 	b.w	c5dc <event_connection_prepare+0x24>
				_radio.link_rx_data_quota++;
    d71a:	3301      	adds	r3, #1
    d71c:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    d720:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    d724:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    d728:	4293      	cmp	r3, r2
    d72a:	d1d4      	bne.n	d6d6 <event_connection_prepare+0x111e>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    d72c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    d72e:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    d732:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    d734:	bf9a      	itte	ls
    d736:	2334      	movls	r3, #52	; 0x34
    d738:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    d73c:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    d740:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    d744:	fbb2 f2f1 	udiv	r2, r2, r1
    d748:	b2d2      	uxtb	r2, r2
    d74a:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    d74e:	b96a      	cbnz	r2, d76c <event_connection_prepare+0x11b4>
    d750:	4b1c      	ldr	r3, [pc, #112]	; (d7c4 <event_connection_prepare+0x120c>)
    d752:	9301      	str	r3, [sp, #4]
    d754:	9300      	str	r3, [sp, #0]
    d756:	4b1c      	ldr	r3, [pc, #112]	; (d7c8 <event_connection_prepare+0x1210>)
    d758:	4a1d      	ldr	r2, [pc, #116]	; (d7d0 <event_connection_prepare+0x1218>)
    d75a:	681c      	ldr	r4, [r3, #0]
    d75c:	491d      	ldr	r1, [pc, #116]	; (d7d4 <event_connection_prepare+0x121c>)
    d75e:	4b1b      	ldr	r3, [pc, #108]	; (d7cc <event_connection_prepare+0x1214>)
    d760:	481e      	ldr	r0, [pc, #120]	; (d7dc <event_connection_prepare+0x1224>)
    d762:	f7fe bf3b 	b.w	c5dc <event_connection_prepare+0x24>
				mem_release(node_rx->hdr.onion.link,
    d766:	f8df 907c 	ldr.w	r9, [pc, #124]	; d7e4 <event_connection_prepare+0x122c>
    d76a:	e7d9      	b.n	d720 <event_connection_prepare+0x1168>
			mem_init(_radio.pkt_rx_data_pool,
    d76c:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    d770:	4b1b      	ldr	r3, [pc, #108]	; (d7e0 <event_connection_prepare+0x1228>)
    d772:	f7f9 ff4f 	bl	7614 <mem_init>
			packet_rx_allocate(4);
    d776:	2004      	movs	r0, #4
    d778:	f7fc fe36 	bl	a3e8 <packet_rx_allocate>
    d77c:	e79e      	b.n	d6bc <event_connection_prepare+0x1104>
		node_rx->hdr.handle = conn->handle;
    d77e:	8c23      	ldrh	r3, [r4, #32]
    d780:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d782:	2301      	movs	r3, #1
    d784:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    d786:	7a03      	ldrb	r3, [r0, #8]
    d788:	f043 0303 	orr.w	r3, r3, #3
    d78c:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    d78e:	2309      	movs	r3, #9
    d790:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    d792:	2315      	movs	r3, #21
    d794:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    d796:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    d798:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    d79a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    d79c:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    d79e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    d7a0:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    d7a2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    d7a4:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    d7a6:	f7fd fc41 	bl	b02c <packet_rx_enqueue>
    d7aa:	e723      	b.n	d5f4 <event_connection_prepare+0x103c>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d7ac:	4902      	ldr	r1, [pc, #8]	; (d7b8 <event_connection_prepare+0x1200>)
    d7ae:	4638      	mov	r0, r7
    d7b0:	f7f9 ff71 	bl	7696 <mem_release>
    d7b4:	f7ff bbfb 	b.w	cfae <event_connection_prepare+0x9f6>
    d7b8:	20000a1c 	.word	0x20000a1c
    d7bc:	0000db25 	.word	0x0000db25
    d7c0:	0000d82d 	.word	0x0000d82d
    d7c4:	00015359 	.word	0x00015359
    d7c8:	20003a5c 	.word	0x20003a5c
    d7cc:	00018097 	.word	0x00018097
    d7d0:	00016754 	.word	0x00016754
    d7d4:	0001679c 	.word	0x0001679c
    d7d8:	00018296 	.word	0x00018296
    d7dc:	000182f0 	.word	0x000182f0
    d7e0:	200009f0 	.word	0x200009f0
    d7e4:	20000a08 	.word	0x20000a08

0000d7e8 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    d7e8:	f7fe bee6 	b.w	c5b8 <event_connection_prepare>

0000d7ec <event_slave_prepare>:
    d7ec:	f7fe bee4 	b.w	c5b8 <event_connection_prepare>

0000d7f0 <connection_configure>:
{
    d7f0:	b510      	push	{r4, lr}
    d7f2:	4604      	mov	r4, r0
	radio_reset();
    d7f4:	f005 fa08 	bl	12c08 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    d7f8:	2000      	movs	r0, #0
    d7fa:	f005 fa2f 	bl	12c5c <radio_tx_power_set>
	radio_isr_set(isr);
    d7fe:	480a      	ldr	r0, [pc, #40]	; (d828 <connection_configure+0x38>)
    d800:	f005 f9cc 	bl	12b9c <radio_isr_set>
	radio_aa_set(conn->access_addr);
    d804:	f104 0010 	add.w	r0, r4, #16
    d808:	f005 fa46 	bl	12c98 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    d80c:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    d80e:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    d810:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    d812:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    d816:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    d818:	f240 605b 	movw	r0, #1627	; 0x65b
    d81c:	4319      	orrs	r1, r3
}
    d81e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    d822:	f005 bae1 	b.w	12de8 <radio_crc_configure>
    d826:	bf00      	nop
    d828:	0000ef39 	.word	0x0000ef39

0000d82c <event_slave>:
{
    d82c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d830:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    d832:	4b74      	ldr	r3, [pc, #464]	; (da04 <event_slave+0x1d8>)
    d834:	7cda      	ldrb	r2, [r3, #19]
{
    d836:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    d838:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    d83c:	461d      	mov	r5, r3
    d83e:	b17a      	cbz	r2, d860 <event_slave+0x34>
    d840:	4b71      	ldr	r3, [pc, #452]	; (da08 <event_slave+0x1dc>)
    d842:	9301      	str	r3, [sp, #4]
    d844:	9300      	str	r3, [sp, #0]
    d846:	4b71      	ldr	r3, [pc, #452]	; (da0c <event_slave+0x1e0>)
    d848:	4a71      	ldr	r2, [pc, #452]	; (da10 <event_slave+0x1e4>)
    d84a:	681c      	ldr	r4, [r3, #0]
    d84c:	4971      	ldr	r1, [pc, #452]	; (da14 <event_slave+0x1e8>)
    d84e:	4b72      	ldr	r3, [pc, #456]	; (da18 <event_slave+0x1ec>)
    d850:	4872      	ldr	r0, [pc, #456]	; (da1c <event_slave+0x1f0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    d852:	47a0      	blx	r4
    d854:	4040      	eors	r0, r0
    d856:	f380 8811 	msr	BASEPRI, r0
    d85a:	f04f 0004 	mov.w	r0, #4
    d85e:	df02      	svc	2
    d860:	7c1b      	ldrb	r3, [r3, #16]
    d862:	8c22      	ldrh	r2, [r4, #32]
    d864:	b2db      	uxtb	r3, r3
    d866:	3207      	adds	r2, #7
    d868:	4293      	cmp	r3, r2
    d86a:	d009      	beq.n	d880 <event_slave+0x54>
    d86c:	4b66      	ldr	r3, [pc, #408]	; (da08 <event_slave+0x1dc>)
    d86e:	9301      	str	r3, [sp, #4]
    d870:	9300      	str	r3, [sp, #0]
    d872:	4b66      	ldr	r3, [pc, #408]	; (da0c <event_slave+0x1e0>)
    d874:	4a66      	ldr	r2, [pc, #408]	; (da10 <event_slave+0x1e4>)
    d876:	681c      	ldr	r4, [r3, #0]
    d878:	4966      	ldr	r1, [pc, #408]	; (da14 <event_slave+0x1e8>)
    d87a:	4b67      	ldr	r3, [pc, #412]	; (da18 <event_slave+0x1ec>)
    d87c:	4868      	ldr	r0, [pc, #416]	; (da20 <event_slave+0x1f4>)
    d87e:	e7e8      	b.n	d852 <event_slave+0x26>
	_radio.packet_counter = 0;
    d880:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    d884:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    d888:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    d88a:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    d88c:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    d88e:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    d890:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    d892:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    d894:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    d898:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    d89a:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    d89c:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    d89e:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    d8a0:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    d8a2:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    d8a4:	f7ff ffa4 	bl	d7f0 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    d8a8:	2096      	movs	r0, #150	; 0x96
    d8aa:	f005 fb57 	bl	12f5c <radio_tmr_tifs_set>
				     conn->phy_flags);
    d8ae:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    d8b2:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d8b6:	09d3      	lsrs	r3, r2, #7
    d8b8:	4631      	mov	r1, r6
    d8ba:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    d8be:	f000 0007 	and.w	r0, r0, #7
    d8c2:	f005 fabb 	bl	12e3c <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    d8c6:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    d8ca:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    d8ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    d8d2:	4620      	mov	r0, r4
    d8d4:	3108      	adds	r1, #8
    d8d6:	f7fd f897 	bl	aa08 <rx_packet_set>
	if (conn->data_chan_sel) {
    d8da:	7f63      	ldrb	r3, [r4, #29]
    d8dc:	f013 0f40 	tst.w	r3, #64	; 0x40
    d8e0:	f104 0217 	add.w	r2, r4, #23
    d8e4:	d05a      	beq.n	d99c <event_slave+0x170>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d8e6:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    d8e8:	8be1      	ldrh	r1, [r4, #30]
    d8ea:	3801      	subs	r0, #1
    d8ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d8f0:	b280      	uxth	r0, r0
    d8f2:	f7fe fd4f 	bl	c394 <chan_sel_2>
	chan_set(data_chan_use);
    d8f6:	f7fd fff5 	bl	b8e4 <chan_set>
	conn->slave.window_widening_event_us +=
    d8fa:	6e23      	ldr	r3, [r4, #96]	; 0x60
    d8fc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    d8fe:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    d900:	2200      	movs	r2, #0
    d902:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    d904:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    d906:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    d908:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    d90a:	bf88      	it	hi
    d90c:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    d90e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d910:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    d912:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    d914:	4413      	add	r3, r2
    d916:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    d918:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    d91a:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    d91c:	f107 0109 	add.w	r1, r7, #9
    d920:	4630      	mov	r0, r6
    d922:	f005 fb27 	bl	12f74 <radio_tmr_start>
    d926:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    d928:	f005 fbc0 	bl	130ac <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    d92c:	4630      	mov	r0, r6
    d92e:	f005 fbdf 	bl	130f0 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d932:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    d934:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d936:	f103 0650 	add.w	r6, r3, #80	; 0x50
    d93a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    d93e:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d942:	2101      	movs	r1, #1
    d944:	f000 0007 	and.w	r0, r0, #7
    d948:	f005 f9ff 	bl	12d4a <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d94c:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    d94e:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    d950:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d954:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    d958:	2802      	cmp	r0, #2
    d95a:	d03f      	beq.n	d9dc <event_slave+0x1b0>
		return 40;
    d95c:	2804      	cmp	r0, #4
    d95e:	bf0c      	ite	eq
    d960:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    d964:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    d966:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    d968:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    d96a:	f005 f9f0 	bl	12d4e <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    d96e:	4430      	add	r0, r6
    d970:	f005 fb7e 	bl	13070 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d974:	f894 1020 	ldrb.w	r1, [r4, #32]
    d978:	3107      	adds	r1, #7
    d97a:	463a      	mov	r2, r7
    d97c:	b2c9      	uxtb	r1, r1
    d97e:	4620      	mov	r0, r4
    d980:	f7fe fa80 	bl	be84 <preempt_calc>
    d984:	4603      	mov	r3, r0
    d986:	b358      	cbz	r0, d9e0 <event_slave+0x1b4>
		_radio.state = STATE_STOP;
    d988:	2304      	movs	r3, #4
    d98a:	752b      	strb	r3, [r5, #20]
		radio_disable();
    d98c:	f005 f9f0 	bl	12d70 <radio_disable>
	packet_tx_enqueue(2);
    d990:	2002      	movs	r0, #2
}
    d992:	b002      	add	sp, #8
    d994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    d998:	f7fd beb6 	b.w	b708 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d99c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    d99e:	7fa6      	ldrb	r6, [r4, #30]
    d9a0:	fb01 6606 	mla	r6, r1, r6, r6
    d9a4:	7fe1      	ldrb	r1, [r4, #31]
    d9a6:	2025      	movs	r0, #37	; 0x25
    d9a8:	440e      	add	r6, r1
    d9aa:	fb96 f1f0 	sdiv	r1, r6, r0
    d9ae:	fb00 6611 	mls	r6, r0, r1, r6
    d9b2:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d9b4:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    d9b6:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d9b8:	5c51      	ldrb	r1, [r2, r1]
    d9ba:	f006 0607 	and.w	r6, r6, #7
    d9be:	fa41 f606 	asr.w	r6, r1, r6
    d9c2:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    d9c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d9c8:	d495      	bmi.n	d8f6 <event_slave+0xca>
		chan_index = chan_next % chan_count;
    d9ca:	fbb0 f1f3 	udiv	r1, r0, r3
    d9ce:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    d9d2:	b2c9      	uxtb	r1, r1
    d9d4:	4610      	mov	r0, r2
    d9d6:	f7fc fc5d 	bl	a294 <chan_sel_remap>
    d9da:	e78c      	b.n	d8f6 <event_slave+0xca>
		return 24;
    d9dc:	2318      	movs	r3, #24
    d9de:	e7c2      	b.n	d966 <event_slave+0x13a>
		ticker_status =
    d9e0:	4a10      	ldr	r2, [pc, #64]	; (da24 <event_slave+0x1f8>)
    d9e2:	4601      	mov	r1, r0
    d9e4:	f7fa fde4 	bl	85b0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d9e8:	f030 0302 	bics.w	r3, r0, #2
    d9ec:	d0d0      	beq.n	d990 <event_slave+0x164>
    d9ee:	4b06      	ldr	r3, [pc, #24]	; (da08 <event_slave+0x1dc>)
    d9f0:	9301      	str	r3, [sp, #4]
    d9f2:	9300      	str	r3, [sp, #0]
    d9f4:	4b05      	ldr	r3, [pc, #20]	; (da0c <event_slave+0x1e0>)
    d9f6:	4a06      	ldr	r2, [pc, #24]	; (da10 <event_slave+0x1e4>)
    d9f8:	681c      	ldr	r4, [r3, #0]
    d9fa:	4906      	ldr	r1, [pc, #24]	; (da14 <event_slave+0x1e8>)
    d9fc:	4b06      	ldr	r3, [pc, #24]	; (da18 <event_slave+0x1ec>)
    d9fe:	480a      	ldr	r0, [pc, #40]	; (da28 <event_slave+0x1fc>)
    da00:	e727      	b.n	d852 <event_slave+0x26>
    da02:	bf00      	nop
    da04:	200008c0 	.word	0x200008c0
    da08:	00015359 	.word	0x00015359
    da0c:	20003a5c 	.word	0x20003a5c
    da10:	00016754 	.word	0x00016754
    da14:	0001679c 	.word	0x0001679c
    da18:	000180e9 	.word	0x000180e9
    da1c:	0001832d 	.word	0x0001832d
    da20:	000183e0 	.word	0x000183e0
    da24:	0000b45d 	.word	0x0000b45d
    da28:	00018211 	.word	0x00018211

0000da2c <prepare_pdu_data_tx>:
	    conn->empty ||
    da2c:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    da30:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    da34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da36:	4604      	mov	r4, r0
    da38:	460e      	mov	r6, r1
	if (/* empty packet */
    da3a:	d109      	bne.n	da50 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    da3c:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    da40:	b131      	cbz	r1, da50 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    da42:	f01c 0f08 	tst.w	ip, #8
    da46:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    da4a:	d022      	beq.n	da92 <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    da4c:	4571      	cmp	r1, lr
    da4e:	d020      	beq.n	da92 <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    da50:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    da54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    da58:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    da5c:	f005 f9da 	bl	12e14 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    da60:	7803      	ldrb	r3, [r0, #0]
    da62:	2201      	movs	r2, #1
    da64:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    da68:	2200      	movs	r2, #0
    da6a:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    da6c:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    da70:	7003      	strb	r3, [r0, #0]
    da72:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    da74:	b152      	cbz	r2, da8c <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    da76:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    da7a:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    da7c:	7803      	ldrb	r3, [r0, #0]
    da7e:	f36f 1347 	bfc	r3, #5, #3
    da82:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    da84:	2300      	movs	r3, #0
    da86:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    da88:	6030      	str	r0, [r6, #0]
    da8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    da8c:	f362 1304 	bfi	r3, r2, #4, #1
    da90:	e7f3      	b.n	da7a <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    da92:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    da96:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    da9a:	1d0d      	adds	r5, r1, #4
    da9c:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    da9e:	b913      	cbnz	r3, daa6 <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    daa0:	7843      	ldrb	r3, [r0, #1]
    daa2:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    daa6:	b122      	cbz	r2, dab2 <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    daa8:	5cab      	ldrb	r3, [r5, r2]
    daaa:	2701      	movs	r7, #1
    daac:	f367 0301 	bfi	r3, r7, #0, #2
    dab0:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    dab2:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    dab6:	1abf      	subs	r7, r7, r2
    dab8:	b2ff      	uxtb	r7, r7
    daba:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    dabc:	5cab      	ldrb	r3, [r5, r2]
    dabe:	f36f 1304 	bfc	r3, #4, #1
    dac2:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    dac4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    dac8:	f003 0307 	and.w	r3, r3, #7
    dacc:	2b02      	cmp	r3, #2
    dace:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    dad0:	bf15      	itete	ne
    dad2:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    dad4:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    dad6:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    dad8:	3b0b      	subeq	r3, #11
    dada:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    dadc:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    dae0:	bf18      	it	ne
    dae2:	3b04      	subne	r3, #4
    dae4:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    dae8:	bf18      	it	ne
    daea:	b29b      	uxthne	r3, r3
    daec:	4563      	cmp	r3, ip
    daee:	bf28      	it	cs
    daf0:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    daf2:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    daf4:	bf81      	itttt	hi
    daf6:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    daf8:	5cab      	ldrbhi	r3, [r5, r2]
    dafa:	f043 0310 	orrhi.w	r3, r3, #16
    dafe:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    db00:	680b      	ldr	r3, [r1, #0]
    db02:	b11b      	cbz	r3, db0c <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    db04:	5cab      	ldrb	r3, [r5, r2]
    db06:	f043 0310 	orr.w	r3, r3, #16
    db0a:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    db0c:	f1be 0f00 	cmp.w	lr, #0
    db10:	d1b4      	bne.n	da7c <prepare_pdu_data_tx+0x50>
    db12:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    db16:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    db18:	bf1c      	itt	ne
    db1a:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    db1e:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    db22:	e7ab      	b.n	da7c <prepare_pdu_data_tx+0x50>

0000db24 <event_master>:
{
    db24:	b5f0      	push	{r4, r5, r6, r7, lr}
    db26:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    db28:	4b59      	ldr	r3, [pc, #356]	; (dc90 <event_master+0x16c>)
    db2a:	7cd9      	ldrb	r1, [r3, #19]
{
    db2c:	b085      	sub	sp, #20
    db2e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    db30:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    db34:	461d      	mov	r5, r3
    db36:	b179      	cbz	r1, db58 <event_master+0x34>
    db38:	4b56      	ldr	r3, [pc, #344]	; (dc94 <event_master+0x170>)
    db3a:	9301      	str	r3, [sp, #4]
    db3c:	9300      	str	r3, [sp, #0]
    db3e:	4b56      	ldr	r3, [pc, #344]	; (dc98 <event_master+0x174>)
    db40:	4a56      	ldr	r2, [pc, #344]	; (dc9c <event_master+0x178>)
    db42:	681c      	ldr	r4, [r3, #0]
    db44:	4956      	ldr	r1, [pc, #344]	; (dca0 <event_master+0x17c>)
    db46:	4b57      	ldr	r3, [pc, #348]	; (dca4 <event_master+0x180>)
    db48:	4857      	ldr	r0, [pc, #348]	; (dca8 <event_master+0x184>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    db4a:	47a0      	blx	r4
    db4c:	4040      	eors	r0, r0
    db4e:	f380 8811 	msr	BASEPRI, r0
    db52:	f04f 0004 	mov.w	r0, #4
    db56:	df02      	svc	2
    db58:	7c1b      	ldrb	r3, [r3, #16]
    db5a:	8c21      	ldrh	r1, [r4, #32]
    db5c:	b2db      	uxtb	r3, r3
    db5e:	3107      	adds	r1, #7
    db60:	428b      	cmp	r3, r1
    db62:	d009      	beq.n	db78 <event_master+0x54>
    db64:	4b4b      	ldr	r3, [pc, #300]	; (dc94 <event_master+0x170>)
    db66:	9301      	str	r3, [sp, #4]
    db68:	9300      	str	r3, [sp, #0]
    db6a:	4b4b      	ldr	r3, [pc, #300]	; (dc98 <event_master+0x174>)
    db6c:	4a4b      	ldr	r2, [pc, #300]	; (dc9c <event_master+0x178>)
    db6e:	681c      	ldr	r4, [r3, #0]
    db70:	494b      	ldr	r1, [pc, #300]	; (dca0 <event_master+0x17c>)
    db72:	4b4c      	ldr	r3, [pc, #304]	; (dca4 <event_master+0x180>)
    db74:	484d      	ldr	r0, [pc, #308]	; (dcac <event_master+0x188>)
    db76:	e7e8      	b.n	db4a <event_master+0x26>
	_radio.packet_counter = 0;
    db78:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    db7c:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    db80:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    db82:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    db84:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    db86:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    db88:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    db8a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    db8c:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    db90:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    db92:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    db94:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    db96:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    db98:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    db9a:	f7fd fdb5 	bl	b708 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    db9e:	a903      	add	r1, sp, #12
    dba0:	4620      	mov	r0, r4
    dba2:	f7ff ff43 	bl	da2c <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    dba6:	9903      	ldr	r1, [sp, #12]
    dba8:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    dbac:	780b      	ldrb	r3, [r1, #0]
    dbae:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    dbb2:	f3c2 0240 	ubfx	r2, r2, #1, #1
    dbb6:	f362 0382 	bfi	r3, r2, #2, #1
    dbba:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    dbbc:	4620      	mov	r0, r4
    dbbe:	f7ff fe17 	bl	d7f0 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    dbc2:	2096      	movs	r0, #150	; 0x96
    dbc4:	f005 f9ca 	bl	12f5c <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    dbc8:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    dbcc:	f000 0007 	and.w	r0, r0, #7
    dbd0:	f005 f928 	bl	12e24 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    dbd4:	9903      	ldr	r1, [sp, #12]
    dbd6:	4620      	mov	r0, r4
    dbd8:	f7fc ff42 	bl	aa60 <tx_packet_set>
	if (conn->data_chan_sel) {
    dbdc:	7f63      	ldrb	r3, [r4, #29]
    dbde:	f013 0f40 	tst.w	r3, #64	; 0x40
    dbe2:	f104 0217 	add.w	r2, r4, #23
    dbe6:	d021      	beq.n	dc2c <event_master+0x108>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    dbe8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    dbea:	8be1      	ldrh	r1, [r4, #30]
    dbec:	3801      	subs	r0, #1
    dbee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    dbf2:	b280      	uxth	r0, r0
    dbf4:	f7fe fbce 	bl	c394 <chan_sel_2>
	chan_set(data_chan_use);
    dbf8:	f7fd fe74 	bl	b8e4 <chan_set>
		remainder_us = radio_tmr_start(1,
    dbfc:	68ea      	ldr	r2, [r5, #12]
    dbfe:	f107 0109 	add.w	r1, r7, #9
    dc02:	2001      	movs	r0, #1
    dc04:	f005 f9b6 	bl	12f74 <radio_tmr_start>
		radio_tmr_end_capture();
    dc08:	f005 fa84 	bl	13114 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    dc0c:	f894 1020 	ldrb.w	r1, [r4, #32]
    dc10:	3107      	adds	r1, #7
    dc12:	463a      	mov	r2, r7
    dc14:	b2c9      	uxtb	r1, r1
    dc16:	4620      	mov	r0, r4
    dc18:	f7fe f934 	bl	be84 <preempt_calc>
	if (0 !=
    dc1c:	4603      	mov	r3, r0
    dc1e:	b328      	cbz	r0, dc6c <event_master+0x148>
		_radio.state = STATE_STOP;
    dc20:	2304      	movs	r3, #4
    dc22:	752b      	strb	r3, [r5, #20]
		radio_disable();
    dc24:	f005 f8a4 	bl	12d70 <radio_disable>
}
    dc28:	b005      	add	sp, #20
    dc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    dc2c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    dc2e:	7fa6      	ldrb	r6, [r4, #30]
    dc30:	fb01 6606 	mla	r6, r1, r6, r6
    dc34:	7fe1      	ldrb	r1, [r4, #31]
    dc36:	2025      	movs	r0, #37	; 0x25
    dc38:	440e      	add	r6, r1
    dc3a:	fb96 f1f0 	sdiv	r1, r6, r0
    dc3e:	fb00 6611 	mls	r6, r0, r1, r6
    dc42:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    dc44:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    dc46:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    dc48:	5c51      	ldrb	r1, [r2, r1]
    dc4a:	f006 0607 	and.w	r6, r6, #7
    dc4e:	fa41 f606 	asr.w	r6, r1, r6
    dc52:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    dc54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    dc58:	d4ce      	bmi.n	dbf8 <event_master+0xd4>
		chan_index = chan_next % chan_count;
    dc5a:	fbb0 f1f3 	udiv	r1, r0, r3
    dc5e:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    dc62:	b2c9      	uxtb	r1, r1
    dc64:	4610      	mov	r0, r2
    dc66:	f7fc fb15 	bl	a294 <chan_sel_remap>
    dc6a:	e7c5      	b.n	dbf8 <event_master+0xd4>
		ticker_status =
    dc6c:	4a10      	ldr	r2, [pc, #64]	; (dcb0 <event_master+0x18c>)
    dc6e:	4601      	mov	r1, r0
    dc70:	f7fa fc9e 	bl	85b0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    dc74:	f030 0302 	bics.w	r3, r0, #2
    dc78:	d0d6      	beq.n	dc28 <event_master+0x104>
    dc7a:	4b06      	ldr	r3, [pc, #24]	; (dc94 <event_master+0x170>)
    dc7c:	9301      	str	r3, [sp, #4]
    dc7e:	9300      	str	r3, [sp, #0]
    dc80:	4b05      	ldr	r3, [pc, #20]	; (dc98 <event_master+0x174>)
    dc82:	4a06      	ldr	r2, [pc, #24]	; (dc9c <event_master+0x178>)
    dc84:	681c      	ldr	r4, [r3, #0]
    dc86:	4906      	ldr	r1, [pc, #24]	; (dca0 <event_master+0x17c>)
    dc88:	4b06      	ldr	r3, [pc, #24]	; (dca4 <event_master+0x180>)
    dc8a:	480a      	ldr	r0, [pc, #40]	; (dcb4 <event_master+0x190>)
    dc8c:	e75d      	b.n	db4a <event_master+0x26>
    dc8e:	bf00      	nop
    dc90:	200008c0 	.word	0x200008c0
    dc94:	00015359 	.word	0x00015359
    dc98:	20003a5c 	.word	0x20003a5c
    dc9c:	00016754 	.word	0x00016754
    dca0:	0001679c 	.word	0x0001679c
    dca4:	000180f5 	.word	0x000180f5
    dca8:	0001832d 	.word	0x0001832d
    dcac:	000183e0 	.word	0x000183e0
    dcb0:	0000b45d 	.word	0x0000b45d
    dcb4:	00018211 	.word	0x00018211

0000dcb8 <isr_rx_conn_pkt_ctrl>:
{
    dcb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    dcbc:	7ac7      	ldrb	r7, [r0, #11]
{
    dcbe:	4604      	mov	r4, r0
    dcc0:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    dcc2:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    dcc6:	2f19      	cmp	r7, #25
    dcc8:	f201 80fb 	bhi.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
    dccc:	e8df f017 	tbh	[pc, r7, lsl #1]
    dcd0:	0083001a 	.word	0x0083001a
    dcd4:	00d000c1 	.word	0x00d000c1
    dcd8:	012600fe 	.word	0x012600fe
    dcdc:	05a40159 	.word	0x05a40159
    dce0:	01ca0195 	.word	0x01ca0195
    dce4:	022201f8 	.word	0x022201f8
    dce8:	02bc0253 	.word	0x02bc0253
    dcec:	02d401ab 	.word	0x02d401ab
    dcf0:	04ac0429 	.word	0x04ac0429
    dcf4:	0586056c 	.word	0x0586056c
    dcf8:	065b065b 	.word	0x065b065b
    dcfc:	08030734 	.word	0x08030734
    dd00:	08c6083a 	.word	0x08c6083a
		if (!_radio.conn_curr->role ||
    dd04:	4ecd      	ldr	r6, [pc, #820]	; (e03c <isr_rx_conn_pkt_ctrl+0x384>)
    dd06:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    dd0a:	f995 301d 	ldrsb.w	r3, [r5, #29]
    dd0e:	2b00      	cmp	r3, #0
    dd10:	f281 80d7 	bge.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    dd14:	7a41      	ldrb	r1, [r0, #9]
    dd16:	2000      	movs	r0, #0
    dd18:	f7fc fa90 	bl	a23c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    dd1c:	2800      	cmp	r0, #0
    dd1e:	f001 80d0 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    dd22:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    dd26:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    dd28:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    dd2a:	041b      	lsls	r3, r3, #16
    dd2c:	f101 80df 	bmi.w	eeee <isr_rx_conn_pkt_ctrl+0x1236>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    dd30:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    dd34:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    dd38:	429a      	cmp	r2, r3
    dd3a:	d009      	beq.n	dd50 <isr_rx_conn_pkt_ctrl+0x98>
    dd3c:	4bc0      	ldr	r3, [pc, #768]	; (e040 <isr_rx_conn_pkt_ctrl+0x388>)
    dd3e:	9301      	str	r3, [sp, #4]
    dd40:	9300      	str	r3, [sp, #0]
    dd42:	4bc0      	ldr	r3, [pc, #768]	; (e044 <isr_rx_conn_pkt_ctrl+0x38c>)
    dd44:	681c      	ldr	r4, [r3, #0]
    dd46:	4bc0      	ldr	r3, [pc, #768]	; (e048 <isr_rx_conn_pkt_ctrl+0x390>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    dd48:	4ac0      	ldr	r2, [pc, #768]	; (e04c <isr_rx_conn_pkt_ctrl+0x394>)
    dd4a:	49c1      	ldr	r1, [pc, #772]	; (e050 <isr_rx_conn_pkt_ctrl+0x398>)
    dd4c:	48c1      	ldr	r0, [pc, #772]	; (e054 <isr_rx_conn_pkt_ctrl+0x39c>)
    dd4e:	e0fb      	b.n	df48 <isr_rx_conn_pkt_ctrl+0x290>
	if (_radio.conn_upd == 0) {
    dd50:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    dd54:	b90a      	cbnz	r2, dd5a <isr_rx_conn_pkt_ctrl+0xa2>
		_radio.conn_upd = conn;
    dd56:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    dd5a:	7b22      	ldrb	r2, [r4, #12]
    dd5c:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    dd60:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    dd64:	f240 42e2 	movw	r2, #1250	; 0x4e2
    dd68:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    dd6a:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    dd6e:	7c20      	ldrb	r0, [r4, #16]
    dd70:	7be2      	ldrb	r2, [r4, #15]
    dd72:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    dd76:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    dd7a:	7ca0      	ldrb	r0, [r4, #18]
    dd7c:	7c62      	ldrb	r2, [r4, #17]
    dd7e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    dd82:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    dd86:	7ce2      	ldrb	r2, [r4, #19]
    dd88:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    dd8a:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    dd8e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    dd92:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    dd96:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    dd9a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    dd9e:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    dda2:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    dda4:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    dda8:	2201      	movs	r2, #1
    ddaa:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    ddae:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    ddb2:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    ddb6:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    ddba:	4293      	cmp	r3, r2
    ddbc:	d007      	beq.n	ddce <isr_rx_conn_pkt_ctrl+0x116>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    ddbe:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    ddc2:	f003 0307 	and.w	r3, r3, #7
    ddc6:	2b04      	cmp	r3, #4
    ddc8:	d101      	bne.n	ddce <isr_rx_conn_pkt_ctrl+0x116>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    ddca:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    ddce:	2000      	movs	r0, #0
    ddd0:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    ddd4:	e03a      	b.n	de4c <isr_rx_conn_pkt_ctrl+0x194>
		if (!_radio.conn_curr->role ||
    ddd6:	4b99      	ldr	r3, [pc, #612]	; (e03c <isr_rx_conn_pkt_ctrl+0x384>)
    ddd8:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    dddc:	f995 301d 	ldrsb.w	r3, [r5, #29]
    dde0:	2b00      	cmp	r3, #0
    dde2:	f281 806e 	bge.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    dde6:	7a41      	ldrb	r1, [r0, #9]
    dde8:	2001      	movs	r0, #1
    ddea:	f7fc fa27 	bl	a23c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    ddee:	2800      	cmp	r0, #0
    ddf0:	f001 8067 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    ddf4:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    ddf8:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    ddfa:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    ddfc:	041f      	lsls	r7, r3, #16
    ddfe:	f101 8076 	bmi.w	eeee <isr_rx_conn_pkt_ctrl+0x1236>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    de02:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    de06:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    de0a:	429a      	cmp	r2, r3
    de0c:	d006      	beq.n	de1c <isr_rx_conn_pkt_ctrl+0x164>
    de0e:	4b8c      	ldr	r3, [pc, #560]	; (e040 <isr_rx_conn_pkt_ctrl+0x388>)
    de10:	9301      	str	r3, [sp, #4]
    de12:	9300      	str	r3, [sp, #0]
    de14:	4b8b      	ldr	r3, [pc, #556]	; (e044 <isr_rx_conn_pkt_ctrl+0x38c>)
    de16:	681c      	ldr	r4, [r3, #0]
    de18:	4b8f      	ldr	r3, [pc, #572]	; (e058 <isr_rx_conn_pkt_ctrl+0x3a0>)
    de1a:	e795      	b.n	dd48 <isr_rx_conn_pkt_ctrl+0x90>
	memcpy(&conn->llcp.chan_map.chm[0],
    de1c:	2205      	movs	r2, #5
    de1e:	f104 010c 	add.w	r1, r4, #12
    de22:	f105 0079 	add.w	r0, r5, #121	; 0x79
    de26:	f7f3 ff0f 	bl	1c48 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    de2a:	7c63      	ldrb	r3, [r4, #17]
    de2c:	7ca2      	ldrb	r2, [r4, #18]
    de2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    de32:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    de36:	2302      	movs	r3, #2
    de38:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    de3c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    de40:	2000      	movs	r0, #0
	conn->llcp_ack--;
    de42:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    de44:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    de48:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    de4c:	b003      	add	sp, #12
    de4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    de52:	7a41      	ldrb	r1, [r0, #9]
    de54:	2002      	movs	r0, #2
    de56:	f7fc f9f1 	bl	a23c <pdu_len_cmp>
    de5a:	2800      	cmp	r0, #0
    de5c:	f001 8031 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->llcp_terminate.reason_peer =
    de60:	4b76      	ldr	r3, [pc, #472]	; (e03c <isr_rx_conn_pkt_ctrl+0x384>)
    de62:	7b22      	ldrb	r2, [r4, #12]
    de64:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    de68:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    de6c:	2000      	movs	r0, #0
	return nack;
    de6e:	e7ed      	b.n	de4c <isr_rx_conn_pkt_ctrl+0x194>
		if (!_radio.conn_curr->role ||
    de70:	4e72      	ldr	r6, [pc, #456]	; (e03c <isr_rx_conn_pkt_ctrl+0x384>)
    de72:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    de76:	f998 301d 	ldrsb.w	r3, [r8, #29]
    de7a:	2b00      	cmp	r3, #0
    de7c:	f281 8021 	bge.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    de80:	7a41      	ldrb	r1, [r0, #9]
    de82:	2003      	movs	r0, #3
    de84:	f7fc f9da 	bl	a23c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    de88:	2800      	cmp	r0, #0
    de8a:	f001 801a 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    de8e:	2208      	movs	r2, #8
    de90:	f104 0116 	add.w	r1, r4, #22
    de94:	f108 0094 	add.w	r0, r8, #148	; 0x94
    de98:	f7f3 fed6 	bl	1c48 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    de9c:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    dea0:	2204      	movs	r2, #4
    dea2:	f104 011e 	add.w	r1, r4, #30
    dea6:	f500 7089 	add.w	r0, r0, #274	; 0x112
    deaa:	f7f3 fecd 	bl	1c48 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    deae:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    deb2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    deb6:	f042 0204 	orr.w	r2, r2, #4
    deba:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    debe:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    dec2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    dec6:	2301      	movs	r3, #1
    dec8:	702b      	strb	r3, [r5, #0]
    deca:	e7cf      	b.n	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		if (_radio.conn_curr->role ||
    decc:	4d5b      	ldr	r5, [pc, #364]	; (e03c <isr_rx_conn_pkt_ctrl+0x384>)
    dece:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    ded2:	f996 301d 	ldrsb.w	r3, [r6, #29]
    ded6:	2b00      	cmp	r3, #0
    ded8:	f2c0 87f3 	blt.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    dedc:	7a41      	ldrb	r1, [r0, #9]
    dede:	2004      	movs	r0, #4
    dee0:	f7fc f9ac 	bl	a23c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    dee4:	2800      	cmp	r0, #0
    dee6:	f000 87ec 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    deea:	2208      	movs	r2, #8
    deec:	f104 010c 	add.w	r1, r4, #12
    def0:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    def4:	f7f3 fea8 	bl	1c48 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    def8:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    defc:	2204      	movs	r2, #4
    defe:	f104 0114 	add.w	r1, r4, #20
    df02:	f500 708b 	add.w	r0, r0, #278	; 0x116
    df06:	f7f3 fe9f 	bl	1c48 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    df0a:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    df0e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    df12:	f043 0304 	orr.w	r3, r3, #4
    df16:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    df1a:	e7a7      	b.n	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    df1c:	4b47      	ldr	r3, [pc, #284]	; (e03c <isr_rx_conn_pkt_ctrl+0x384>)
    df1e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    df22:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    df26:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    df2a:	42b3      	cmp	r3, r6
    df2c:	d013      	beq.n	df56 <isr_rx_conn_pkt_ctrl+0x29e>
    df2e:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    df32:	2b03      	cmp	r3, #3
    df34:	d00f      	beq.n	df56 <isr_rx_conn_pkt_ctrl+0x29e>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    df36:	4b42      	ldr	r3, [pc, #264]	; (e040 <isr_rx_conn_pkt_ctrl+0x388>)
    df38:	9301      	str	r3, [sp, #4]
    df3a:	9300      	str	r3, [sp, #0]
    df3c:	4b41      	ldr	r3, [pc, #260]	; (e044 <isr_rx_conn_pkt_ctrl+0x38c>)
    df3e:	4a43      	ldr	r2, [pc, #268]	; (e04c <isr_rx_conn_pkt_ctrl+0x394>)
    df40:	681c      	ldr	r4, [r3, #0]
    df42:	4943      	ldr	r1, [pc, #268]	; (e050 <isr_rx_conn_pkt_ctrl+0x398>)
    df44:	4b45      	ldr	r3, [pc, #276]	; (e05c <isr_rx_conn_pkt_ctrl+0x3a4>)
    df46:	4846      	ldr	r0, [pc, #280]	; (e060 <isr_rx_conn_pkt_ctrl+0x3a8>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    df48:	47a0      	blx	r4
    df4a:	4040      	eors	r0, r0
    df4c:	f380 8811 	msr	BASEPRI, r0
    df50:	f04f 0004 	mov.w	r0, #4
    df54:	df02      	svc	2
		if (_radio.conn_curr->role ||
    df56:	f995 301d 	ldrsb.w	r3, [r5, #29]
    df5a:	2b00      	cmp	r3, #0
    df5c:	f2c0 87b1 	blt.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    df60:	7a61      	ldrb	r1, [r4, #9]
    df62:	2005      	movs	r0, #5
    df64:	f7fc f96a 	bl	a23c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    df68:	2800      	cmp	r0, #0
    df6a:	f000 87aa 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    df6e:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    df70:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    df72:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    df74:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    df78:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    df7c:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    df80:	e764      	b.n	de4c <isr_rx_conn_pkt_ctrl+0x194>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    df82:	7a41      	ldrb	r1, [r0, #9]
    df84:	2006      	movs	r0, #6
    df86:	f7fc f959 	bl	a23c <pdu_len_cmp>
    df8a:	2800      	cmp	r0, #0
    df8c:	f000 8799 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		if (_radio.role == ROLE_SLAVE) {
    df90:	4b2a      	ldr	r3, [pc, #168]	; (e03c <isr_rx_conn_pkt_ctrl+0x384>)
    df92:	7cda      	ldrb	r2, [r3, #19]
    df94:	2a03      	cmp	r2, #3
    df96:	4619      	mov	r1, r3
    df98:	d124      	bne.n	dfe4 <isr_rx_conn_pkt_ctrl+0x32c>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    df9a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    df9e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    dfa2:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    dfa6:	4290      	cmp	r0, r2
    dfa8:	d003      	beq.n	dfb2 <isr_rx_conn_pkt_ctrl+0x2fa>
    dfaa:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    dfae:	2803      	cmp	r0, #3
    dfb0:	d1c1      	bne.n	df36 <isr_rx_conn_pkt_ctrl+0x27e>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    dfb2:	2000      	movs	r0, #0
    dfb4:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    dfb8:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    dfba:	2003      	movs	r0, #3
    dfbc:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    dfc0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    dfc4:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    dfc8:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    dfcc:	065e      	lsls	r6, r3, #25
    dfce:	d505      	bpl.n	dfdc <isr_rx_conn_pkt_ctrl+0x324>
			_radio.conn_curr->refresh = 0;
    dfd0:	f36f 1386 	bfc	r3, #6, #1
    dfd4:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    dfd8:	2309      	movs	r3, #9
    dfda:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    dfdc:	2301      	movs	r3, #1
    dfde:	702b      	strb	r3, [r5, #0]
				break;
    dfe0:	f000 bccd 	b.w	e97e <isr_rx_conn_pkt_ctrl+0xcc6>
			_radio.conn_curr->pause_rx = 0;
    dfe4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    dfe8:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    dfec:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    dff0:	f36f 03c3 	bfc	r3, #3, #1
    dff4:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    dff8:	e7e4      	b.n	dfc4 <isr_rx_conn_pkt_ctrl+0x30c>
		if (!_radio.conn_curr->role ||
    dffa:	4b10      	ldr	r3, [pc, #64]	; (e03c <isr_rx_conn_pkt_ctrl+0x384>)
    dffc:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e000:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e004:	2b00      	cmp	r3, #0
    e006:	f280 875c 	bge.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    e00a:	7a41      	ldrb	r1, [r0, #9]
    e00c:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    e00e:	f7fc f915 	bl	a23c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e012:	2800      	cmp	r0, #0
    e014:	f000 8755 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    e018:	4631      	mov	r1, r6
    e01a:	4628      	mov	r0, r5
}
    e01c:	b003      	add	sp, #12
    e01e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    e022:	f7fe ba43 	b.w	c4ac <feature_rsp_send>
		if (_radio.conn_curr->role ||
    e026:	4b05      	ldr	r3, [pc, #20]	; (e03c <isr_rx_conn_pkt_ctrl+0x384>)
    e028:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e02c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e030:	2b00      	cmp	r3, #0
    e032:	f2c0 8746 	blt.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    e036:	7a41      	ldrb	r1, [r0, #9]
    e038:	200e      	movs	r0, #14
    e03a:	e7e8      	b.n	e00e <isr_rx_conn_pkt_ctrl+0x356>
    e03c:	200008c0 	.word	0x200008c0
    e040:	00015359 	.word	0x00015359
    e044:	20003a5c 	.word	0x20003a5c
    e048:	00018154 	.word	0x00018154
    e04c:	00016754 	.word	0x00016754
    e050:	0001679c 	.word	0x0001679c
    e054:	000185dc 	.word	0x000185dc
    e058:	00018160 	.word	0x00018160
    e05c:	00017e06 	.word	0x00017e06
    e060:	0001861e 	.word	0x0001861e
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    e064:	7a41      	ldrb	r1, [r0, #9]
    e066:	2009      	movs	r0, #9
    e068:	f7fc f8e8 	bl	a23c <pdu_len_cmp>
    e06c:	2800      	cmp	r0, #0
    e06e:	f000 8728 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    e072:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    e074:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    e076:	48b2      	ldr	r0, [pc, #712]	; (e340 <isr_rx_conn_pkt_ctrl+0x688>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    e078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    e07c:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    e080:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    e084:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    e088:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    e08c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    e090:	7ba1      	ldrb	r1, [r4, #14]
    e092:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    e096:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    e09a:	f3c1 0110 	ubfx	r1, r1, #0, #17
    e09e:	400b      	ands	r3, r1
    e0a0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    e0a4:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e0a8:	f043 0320 	orr.w	r3, r3, #32
    e0ac:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    e0b0:	2301      	movs	r3, #1
    e0b2:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    e0b4:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    e0b8:	2000      	movs	r0, #0
    e0ba:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    e0be:	e6c5      	b.n	de4c <isr_rx_conn_pkt_ctrl+0x194>
		if (!_radio.conn_curr->role ||
    e0c0:	4e9f      	ldr	r6, [pc, #636]	; (e340 <isr_rx_conn_pkt_ctrl+0x688>)
    e0c2:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e0c6:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e0ca:	2b00      	cmp	r3, #0
    e0cc:	f280 86f9 	bge.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    e0d0:	7a41      	ldrb	r1, [r0, #9]
    e0d2:	200a      	movs	r0, #10
    e0d4:	f7fc f8b2 	bl	a23c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e0d8:	2800      	cmp	r0, #0
    e0da:	f000 86f2 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e0de:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    e0e2:	f7f9 fabe 	bl	7662 <mem_acquire>
		if (!node_tx) {
    e0e6:	4601      	mov	r1, r0
    e0e8:	b908      	cbnz	r0, e0ee <isr_rx_conn_pkt_ctrl+0x436>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    e0ea:	2001      	movs	r0, #1
    e0ec:	e6ae      	b.n	de4c <isr_rx_conn_pkt_ctrl+0x194>
		conn->refresh = 1;
    e0ee:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    e0f2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    e0f6:	f36f 1304 	bfc	r3, #4, #1
    e0fa:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e0fe:	7903      	ldrb	r3, [r0, #4]
    e100:	f043 0303 	orr.w	r3, r3, #3
    e104:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    e106:	2301      	movs	r3, #1
    e108:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    e10a:	230b      	movs	r3, #11
    e10c:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    e10e:	4628      	mov	r0, r5
    e110:	f000 bced 	b.w	eaee <isr_rx_conn_pkt_ctrl+0xe36>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    e114:	7a41      	ldrb	r1, [r0, #9]
    e116:	200b      	movs	r0, #11
    e118:	f7fc f890 	bl	a23c <pdu_len_cmp>
    e11c:	2800      	cmp	r0, #0
    e11e:	f000 86d0 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    e122:	4887      	ldr	r0, [pc, #540]	; (e340 <isr_rx_conn_pkt_ctrl+0x688>)
    e124:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    e128:	f994 301d 	ldrsb.w	r3, [r4, #29]
    e12c:	2b00      	cmp	r3, #0
    e12e:	db1b      	blt.n	e168 <isr_rx_conn_pkt_ctrl+0x4b0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e130:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e134:	f7f9 fa95 	bl	7662 <mem_acquire>
		if (!node_tx) {
    e138:	4601      	mov	r1, r0
    e13a:	2800      	cmp	r0, #0
    e13c:	d0d5      	beq.n	e0ea <isr_rx_conn_pkt_ctrl+0x432>
		conn->enc_tx = 0;
    e13e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    e142:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    e146:	f043 0304 	orr.w	r3, r3, #4
    e14a:	f36f 1304 	bfc	r3, #4, #1
    e14e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e152:	7903      	ldrb	r3, [r0, #4]
    e154:	f043 0303 	orr.w	r3, r3, #3
    e158:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    e15a:	2301      	movs	r3, #1
    e15c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    e15e:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    e160:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    e162:	4620      	mov	r0, r4
    e164:	f000 bcc3 	b.w	eaee <isr_rx_conn_pkt_ctrl+0xe36>
		conn->enc_tx = 0;
    e168:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    e16c:	f36f 1345 	bfc	r3, #5, #1
    e170:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    e174:	e67a      	b.n	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    e176:	7a41      	ldrb	r1, [r0, #9]
    e178:	200c      	movs	r0, #12
    e17a:	f7fc f85f 	bl	a23c <pdu_len_cmp>
    e17e:	2800      	cmp	r0, #0
    e180:	f000 869f 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    e184:	486e      	ldr	r0, [pc, #440]	; (e340 <isr_rx_conn_pkt_ctrl+0x688>)
    e186:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    e18a:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    e18e:	f013 0701 	ands.w	r7, r3, #1
    e192:	d150      	bne.n	e236 <isr_rx_conn_pkt_ctrl+0x57e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e194:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e198:	f7f9 fa63 	bl	7662 <mem_acquire>
		if (!node_tx) {
    e19c:	4601      	mov	r1, r0
    e19e:	2800      	cmp	r0, #0
    e1a0:	d0a3      	beq.n	e0ea <isr_rx_conn_pkt_ctrl+0x432>
		conn->llcp_version.tx = 1;
    e1a2:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    e1a6:	f043 0301 	orr.w	r3, r3, #1
    e1aa:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e1ae:	7903      	ldrb	r3, [r0, #4]
    e1b0:	f043 0303 	orr.w	r3, r3, #3
    e1b4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    e1b6:	2306      	movs	r3, #6
    e1b8:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    e1ba:	230c      	movs	r3, #12
    e1bc:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    e1be:	2309      	movs	r3, #9
    e1c0:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    e1c2:	f06f 030e 	mvn.w	r3, #14
    e1c6:	7243      	strb	r3, [r0, #9]
    e1c8:	2305      	movs	r3, #5
    e1ca:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    e1cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e1d0:	72c3      	strb	r3, [r0, #11]
    e1d2:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    e1d4:	4630      	mov	r0, r6
    e1d6:	f7fe f94f 	bl	c478 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    e1da:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    e1de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e1e2:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    e1e6:	f004 fe15 	bl	12e14 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e1ea:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    e1ec:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e1ee:	2201      	movs	r2, #1
    e1f0:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    e1f4:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e1f8:	7003      	strb	r3, [r0, #0]
    e1fa:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    e1fc:	b1c2      	cbz	r2, e230 <isr_rx_conn_pkt_ctrl+0x578>
		pdu_data_tx->md = 1;
    e1fe:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    e202:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    e204:	7b23      	ldrb	r3, [r4, #12]
    e206:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    e20a:	7ba2      	ldrb	r2, [r4, #14]
    e20c:	7b63      	ldrb	r3, [r4, #13]
    e20e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e212:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    e216:	7be3      	ldrb	r3, [r4, #15]
    e218:	7c22      	ldrb	r2, [r4, #16]
    e21a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e21e:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    e222:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    e226:	f043 0302 	orr.w	r3, r3, #2
    e22a:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    e22e:	e61d      	b.n	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		pdu_data_tx->md = 0;
    e230:	f362 1304 	bfi	r3, r2, #4, #1
    e234:	e7e5      	b.n	e202 <isr_rx_conn_pkt_ctrl+0x54a>
	} else if (!conn->llcp_version.rx) {
    e236:	f013 0302 	ands.w	r3, r3, #2
    e23a:	f47f ae17 	bne.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		conn->procedure_expire = 0;
    e23e:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    e242:	2301      	movs	r3, #1
    e244:	702b      	strb	r3, [r5, #0]
    e246:	e7dd      	b.n	e204 <isr_rx_conn_pkt_ctrl+0x54c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    e248:	7a41      	ldrb	r1, [r0, #9]
    e24a:	200d      	movs	r0, #13
    e24c:	f7fb fff6 	bl	a23c <pdu_len_cmp>
    e250:	2800      	cmp	r0, #0
    e252:	f000 8636 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->pause_rx = 0;
    e256:	4b3a      	ldr	r3, [pc, #232]	; (e340 <isr_rx_conn_pkt_ctrl+0x688>)
    e258:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    e25c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    e260:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    e264:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    e268:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    e26a:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    e26e:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    e272:	2301      	movs	r3, #1
    e274:	702b      	strb	r3, [r5, #0]
    e276:	e5e9      	b.n	de4c <isr_rx_conn_pkt_ctrl+0x194>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    e278:	7a41      	ldrb	r1, [r0, #9]
    e27a:	200f      	movs	r0, #15
    e27c:	f7fb ffde 	bl	a23c <pdu_len_cmp>
    e280:	2800      	cmp	r0, #0
    e282:	f000 861e 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    e286:	4b2e      	ldr	r3, [pc, #184]	; (e340 <isr_rx_conn_pkt_ctrl+0x688>)
    e288:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    e28c:	461a      	mov	r2, r3
    e28e:	b151      	cbz	r1, e2a6 <isr_rx_conn_pkt_ctrl+0x5ee>
    e290:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    e294:	4281      	cmp	r1, r0
    e296:	d006      	beq.n	e2a6 <isr_rx_conn_pkt_ctrl+0x5ee>
			nack = reject_ext_ind_send(_radio.conn_curr,
    e298:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    e29a:	210f      	movs	r1, #15
}
    e29c:	b003      	add	sp, #12
    e29e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    e2a2:	f7fe b96d 	b.w	c580 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    e2a6:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    e2aa:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e2ae:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    e2b2:	2b00      	cmp	r3, #0
    e2b4:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    e2b8:	f2c0 80a7 	blt.w	e40a <isr_rx_conn_pkt_ctrl+0x752>
			if ((conn->llcp_conn_param.req !=
    e2bc:	4299      	cmp	r1, r3
    e2be:	d009      	beq.n	e2d4 <isr_rx_conn_pkt_ctrl+0x61c>
			    ((conn->llcp_conn_param.state ==
    e2c0:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    e2c4:	f013 0307 	ands.w	r3, r3, #7
    e2c8:	d002      	beq.n	e2d0 <isr_rx_conn_pkt_ctrl+0x618>
			      LLCP_CPR_STATE_REQ) ||
    e2ca:	3b04      	subs	r3, #4
    e2cc:	2b01      	cmp	r3, #1
    e2ce:	d801      	bhi.n	e2d4 <isr_rx_conn_pkt_ctrl+0x61c>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e2d0:	2223      	movs	r2, #35	; 0x23
    e2d2:	e7e2      	b.n	e29a <isr_rx_conn_pkt_ctrl+0x5e2>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    e2d4:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    e2d8:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e2dc:	4299      	cmp	r1, r3
    e2de:	d003      	beq.n	e2e8 <isr_rx_conn_pkt_ctrl+0x630>
    e2e0:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    e2e4:	2b03      	cmp	r3, #3
    e2e6:	d105      	bne.n	e2f4 <isr_rx_conn_pkt_ctrl+0x63c>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    e2e8:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    e2ec:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    e2f0:	4299      	cmp	r1, r3
    e2f2:	d001      	beq.n	e2f8 <isr_rx_conn_pkt_ctrl+0x640>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e2f4:	222a      	movs	r2, #42	; 0x2a
    e2f6:	e7d0      	b.n	e29a <isr_rx_conn_pkt_ctrl+0x5e2>
				if ((cpr->interval_min < 6) ||
    e2f8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    e2fc:	4643      	mov	r3, r8
    e2fe:	2b05      	cmp	r3, #5
    e300:	d91b      	bls.n	e33a <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->interval_max > 3200) ||
    e302:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    e304:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    e308:	d817      	bhi.n	e33a <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->interval_max > 3200) ||
    e30a:	45b8      	cmp	r8, r7
    e30c:	d815      	bhi.n	e33a <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->latency > 499) ||
    e30e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    e312:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    e316:	d210      	bcs.n	e33a <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->timeout < 10) ||
    e318:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    e31c:	f1ae 060a 	sub.w	r6, lr, #10
    e320:	b2b6      	uxth	r6, r6
    e322:	f640 4976 	movw	r9, #3190	; 0xc76
    e326:	454e      	cmp	r6, r9
    e328:	d807      	bhi.n	e33a <isr_rx_conn_pkt_ctrl+0x682>
				     ((cpr->latency + 1) *
    e32a:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    e32e:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    e332:	da02      	bge.n	e33a <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->preferred_periodicity >
    e334:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    e336:	428f      	cmp	r7, r1
    e338:	d204      	bcs.n	e344 <isr_rx_conn_pkt_ctrl+0x68c>
				nack = reject_ext_ind_send(conn,
    e33a:	221e      	movs	r2, #30
    e33c:	e7ad      	b.n	e29a <isr_rx_conn_pkt_ctrl+0x5e2>
    e33e:	bf00      	nop
    e340:	200008c0 	.word	0x200008c0
				conn->llcp_conn_param.interval = cpr->interval_min;
    e344:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    e348:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    e34c:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    e350:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    e354:	7da6      	ldrb	r6, [r4, #22]
    e356:	7d61      	ldrb	r1, [r4, #21]
    e358:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    e35c:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    e360:	7e26      	ldrb	r6, [r4, #24]
    e362:	7de1      	ldrb	r1, [r4, #23]
    e364:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e368:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    e36c:	7ea6      	ldrb	r6, [r4, #26]
    e36e:	7e61      	ldrb	r1, [r4, #25]
    e370:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e374:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    e378:	7f26      	ldrb	r6, [r4, #28]
    e37a:	7ee1      	ldrb	r1, [r4, #27]
    e37c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e380:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    e384:	7fa6      	ldrb	r6, [r4, #30]
    e386:	7f61      	ldrb	r1, [r4, #29]
    e388:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e38c:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    e390:	7fe1      	ldrb	r1, [r4, #31]
    e392:	f894 6020 	ldrb.w	r6, [r4, #32]
    e396:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e39a:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    e39e:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    e3a2:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    e3a6:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    e3aa:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    e3ae:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    e3b2:	6a41      	ldr	r1, [r0, #36]	; 0x24
    e3b4:	428c      	cmp	r4, r1
    e3b6:	d10f      	bne.n	e3d8 <isr_rx_conn_pkt_ctrl+0x720>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    e3b8:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    e3ba:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e3be:	4361      	muls	r1, r4
    e3c0:	f242 7410 	movw	r4, #10000	; 0x2710
    e3c4:	fb04 130e 	mla	r3, r4, lr, r1
    e3c8:	3b01      	subs	r3, #1
    e3ca:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    e3ce:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    e3d0:	b29b      	uxth	r3, r3
    e3d2:	4299      	cmp	r1, r3
    e3d4:	f000 8092 	beq.w	e4fc <isr_rx_conn_pkt_ctrl+0x844>
					if (conn->pause_tx) {
    e3d8:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    e3dc:	071c      	lsls	r4, r3, #28
    e3de:	f140 8087 	bpl.w	e4f0 <isr_rx_conn_pkt_ctrl+0x838>
						conn->llcp_conn_param.state =
    e3e2:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e3e6:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    e3e8:	f361 0302 	bfi	r3, r1, #0, #3
    e3ec:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    e3f0:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    e3f4:	3b01      	subs	r3, #1
    e3f6:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    e3fa:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    e3fe:	2b00      	cmp	r3, #0
    e400:	f47f ad34 	bne.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
				_radio.conn_upd = conn;
    e404:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    e408:	e530      	b.n	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    e40a:	4299      	cmp	r1, r3
    e40c:	d003      	beq.n	e416 <isr_rx_conn_pkt_ctrl+0x75e>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    e40e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e412:	0799      	lsls	r1, r3, #30
    e414:	d17b      	bne.n	e50e <isr_rx_conn_pkt_ctrl+0x856>
			if ((cpr->interval_min < 6) ||
    e416:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    e41a:	4643      	mov	r3, r8
    e41c:	2b05      	cmp	r3, #5
    e41e:	d98c      	bls.n	e33a <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->interval_max > 3200) ||
    e420:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    e422:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    e426:	d888      	bhi.n	e33a <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->interval_max > 3200) ||
    e428:	45b8      	cmp	r8, r7
    e42a:	d886      	bhi.n	e33a <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->latency > 499) ||
    e42c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    e430:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    e434:	d281      	bcs.n	e33a <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e436:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    e43a:	f1ae 060a 	sub.w	r6, lr, #10
    e43e:	b2b6      	uxth	r6, r6
    e440:	f640 4976 	movw	r9, #3190	; 0xc76
    e444:	454e      	cmp	r6, r9
    e446:	f63f af78 	bhi.w	e33a <isr_rx_conn_pkt_ctrl+0x682>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    e44a:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e44e:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    e452:	f6bf af72 	bge.w	e33a <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    e456:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    e458:	428f      	cmp	r7, r1
    e45a:	f4ff af6e 	bcc.w	e33a <isr_rx_conn_pkt_ctrl+0x682>
			conn->llcp_conn_param.interval = cpr->interval_min;
    e45e:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    e462:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    e466:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    e46a:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    e46e:	7da6      	ldrb	r6, [r4, #22]
    e470:	7d61      	ldrb	r1, [r4, #21]
    e472:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    e476:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    e47a:	7e26      	ldrb	r6, [r4, #24]
    e47c:	7de1      	ldrb	r1, [r4, #23]
    e47e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e482:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    e486:	7ea6      	ldrb	r6, [r4, #26]
    e488:	7e61      	ldrb	r1, [r4, #25]
    e48a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e48e:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    e492:	7f26      	ldrb	r6, [r4, #28]
    e494:	7ee1      	ldrb	r1, [r4, #27]
    e496:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e49a:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    e49e:	7fa6      	ldrb	r6, [r4, #30]
    e4a0:	7f61      	ldrb	r1, [r4, #29]
    e4a2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e4a6:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    e4aa:	7fe1      	ldrb	r1, [r4, #31]
    e4ac:	f894 6020 	ldrb.w	r6, [r4, #32]
    e4b0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e4b4:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    e4b8:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    e4bc:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    e4c0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    e4c4:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    e4c8:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    e4cc:	6a41      	ldr	r1, [r0, #36]	; 0x24
    e4ce:	428c      	cmp	r4, r1
    e4d0:	d10e      	bne.n	e4f0 <isr_rx_conn_pkt_ctrl+0x838>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    e4d2:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    e4d4:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e4d8:	4361      	muls	r1, r4
    e4da:	f242 7410 	movw	r4, #10000	; 0x2710
    e4de:	fb04 130e 	mla	r3, r4, lr, r1
    e4e2:	3b01      	subs	r3, #1
    e4e4:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    e4e8:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    e4ea:	b29b      	uxth	r3, r3
    e4ec:	4299      	cmp	r1, r3
    e4ee:	d005      	beq.n	e4fc <isr_rx_conn_pkt_ctrl+0x844>
				*rx_enqueue = 1;
    e4f0:	2301      	movs	r3, #1
    e4f2:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    e4f4:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e4f8:	2103      	movs	r1, #3
    e4fa:	e775      	b.n	e3e8 <isr_rx_conn_pkt_ctrl+0x730>
				conn->llcp_conn_param.status = 0;
    e4fc:	2300      	movs	r3, #0
    e4fe:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    e502:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    e506:	2101      	movs	r1, #1
    e508:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    e50c:	e76c      	b.n	e3e8 <isr_rx_conn_pkt_ctrl+0x730>
			LL_ASSERT(0);
    e50e:	4bb9      	ldr	r3, [pc, #740]	; (e7f4 <isr_rx_conn_pkt_ctrl+0xb3c>)
    e510:	9301      	str	r3, [sp, #4]
    e512:	9300      	str	r3, [sp, #0]
    e514:	4bb8      	ldr	r3, [pc, #736]	; (e7f8 <isr_rx_conn_pkt_ctrl+0xb40>)
    e516:	4ab9      	ldr	r2, [pc, #740]	; (e7fc <isr_rx_conn_pkt_ctrl+0xb44>)
    e518:	681c      	ldr	r4, [r3, #0]
    e51a:	49b9      	ldr	r1, [pc, #740]	; (e800 <isr_rx_conn_pkt_ctrl+0xb48>)
    e51c:	4bb9      	ldr	r3, [pc, #740]	; (e804 <isr_rx_conn_pkt_ctrl+0xb4c>)
    e51e:	48ba      	ldr	r0, [pc, #744]	; (e808 <isr_rx_conn_pkt_ctrl+0xb50>)
    e520:	e512      	b.n	df48 <isr_rx_conn_pkt_ctrl+0x290>
		if (_radio.conn_curr->role ||
    e522:	4bba      	ldr	r3, [pc, #744]	; (e80c <isr_rx_conn_pkt_ctrl+0xb54>)
    e524:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e528:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e52c:	2b00      	cmp	r3, #0
    e52e:	f2c0 84c8 	blt.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    e532:	7a41      	ldrb	r1, [r0, #9]
    e534:	2010      	movs	r0, #16
    e536:	f7fb fe81 	bl	a23c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e53a:	2800      	cmp	r0, #0
    e53c:	f000 84c1 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		if (!_radio.conn_curr->role &&
    e540:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    e544:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    e548:	429a      	cmp	r2, r3
    e54a:	f43f ac8f 	beq.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		    (_radio.conn_curr->llcp_conn_param.state ==
    e54e:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    e552:	f003 0307 	and.w	r3, r3, #7
    e556:	2b04      	cmp	r3, #4
    e558:	f47f ac88 	bne.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
			if ((cpr->interval_min < 6) ||
    e55c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    e560:	fa1f f28e 	uxth.w	r2, lr
    e564:	2a05      	cmp	r2, #5
    e566:	d91b      	bls.n	e5a0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->interval_max > 3200) ||
    e568:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    e56a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    e56e:	d817      	bhi.n	e5a0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->interval_max > 3200) ||
    e570:	429a      	cmp	r2, r3
    e572:	d815      	bhi.n	e5a0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->latency > 499) ||
    e574:	8a27      	ldrh	r7, [r4, #16]
    e576:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    e578:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    e57c:	d210      	bcs.n	e5a0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e57e:	8a66      	ldrh	r6, [r4, #18]
    e580:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    e582:	f1a0 010a 	sub.w	r1, r0, #10
    e586:	b289      	uxth	r1, r1
    e588:	f640 4c76 	movw	ip, #3190	; 0xc76
    e58c:	4561      	cmp	r1, ip
    e58e:	d807      	bhi.n	e5a0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    e590:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e594:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    e598:	da02      	bge.n	e5a0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    e59a:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    e59c:	4293      	cmp	r3, r2
    e59e:	d203      	bcs.n	e5a8 <isr_rx_conn_pkt_ctrl+0x8f0>
				nack = reject_ext_ind_send(conn,
    e5a0:	221e      	movs	r2, #30
    e5a2:	2110      	movs	r1, #16
    e5a4:	4628      	mov	r0, r5
    e5a6:	e679      	b.n	e29c <isr_rx_conn_pkt_ctrl+0x5e4>
			_radio.conn_curr->procedure_expire = 0;
    e5a8:	2000      	movs	r0, #0
    e5aa:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    e5ae:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    e5b2:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    e5b6:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    e5ba:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    e5be:	7da2      	ldrb	r2, [r4, #22]
    e5c0:	7d63      	ldrb	r3, [r4, #21]
    e5c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    e5c6:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    e5ca:	7e22      	ldrb	r2, [r4, #24]
    e5cc:	7de3      	ldrb	r3, [r4, #23]
    e5ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e5d2:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    e5d6:	7ea2      	ldrb	r2, [r4, #26]
    e5d8:	7e63      	ldrb	r3, [r4, #25]
    e5da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e5de:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    e5e2:	7f22      	ldrb	r2, [r4, #28]
    e5e4:	7ee3      	ldrb	r3, [r4, #27]
    e5e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e5ea:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    e5ee:	7fa2      	ldrb	r2, [r4, #30]
    e5f0:	7f63      	ldrb	r3, [r4, #29]
    e5f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e5f6:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    e5fa:	f894 2020 	ldrb.w	r2, [r4, #32]
    e5fe:	7fe3      	ldrb	r3, [r4, #31]
    e600:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e604:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    e608:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    e60c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    e610:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e614:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    e618:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    e61c:	2201      	movs	r2, #1
    e61e:	f362 0302 	bfi	r3, r2, #0, #3
    e622:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    e626:	e411      	b.n	de4c <isr_rx_conn_pkt_ctrl+0x194>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    e628:	7a41      	ldrb	r1, [r0, #9]
    e62a:	2011      	movs	r0, #17
    e62c:	f7fb fe06 	bl	a23c <pdu_len_cmp>
    e630:	2800      	cmp	r0, #0
    e632:	f000 8446 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    e636:	4a75      	ldr	r2, [pc, #468]	; (e80c <isr_rx_conn_pkt_ctrl+0xb54>)
    e638:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    e63c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    e640:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    e644:	4281      	cmp	r1, r0
    e646:	7b21      	ldrb	r1, [r4, #12]
    e648:	d027      	beq.n	e69a <isr_rx_conn_pkt_ctrl+0x9e2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    e64a:	2916      	cmp	r1, #22
    e64c:	f47f ac0e 	bne.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		if (rej_ext_ind->error_code != 0x23) {
    e650:	7b61      	ldrb	r1, [r4, #13]
    e652:	2923      	cmp	r1, #35	; 0x23
    e654:	d00e      	beq.n	e674 <isr_rx_conn_pkt_ctrl+0x9bc>
				_radio.conn_curr->phy_tx;
    e656:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    e65a:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    e65e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    e662:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e666:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    e66a:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    e66c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    e670:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    e674:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    e678:	0792      	lsls	r2, r2, #30
    e67a:	f57f abf7 	bpl.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e67e:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    e680:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e682:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    e684:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    e688:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e68c:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    e68e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    e692:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e696:	7363      	strb	r3, [r4, #13]
    e698:	e415      	b.n	dec6 <isr_rx_conn_pkt_ctrl+0x20e>
		   _radio.conn_curr->llcp_conn_param.req) {
    e69a:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    e69e:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    e6a2:	42b8      	cmp	r0, r7
    e6a4:	d04c      	beq.n	e740 <isr_rx_conn_pkt_ctrl+0xa88>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    e6a6:	290f      	cmp	r1, #15
    e6a8:	f47f abe0 	bne.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
    e6ac:	f993 001d 	ldrsb.w	r0, [r3, #29]
    e6b0:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    e6b2:	2800      	cmp	r0, #0
    e6b4:	db10      	blt.n	e6d8 <isr_rx_conn_pkt_ctrl+0xa20>
    e6b6:	291a      	cmp	r1, #26
    e6b8:	d10e      	bne.n	e6d8 <isr_rx_conn_pkt_ctrl+0xa20>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e6ba:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    e6be:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    e6c2:	4294      	cmp	r4, r2
    e6c4:	f000 80d1 	beq.w	e86a <isr_rx_conn_pkt_ctrl+0xbb2>
    e6c8:	4b4a      	ldr	r3, [pc, #296]	; (e7f4 <isr_rx_conn_pkt_ctrl+0xb3c>)
    e6ca:	9301      	str	r3, [sp, #4]
    e6cc:	9300      	str	r3, [sp, #0]
    e6ce:	4b4a      	ldr	r3, [pc, #296]	; (e7f8 <isr_rx_conn_pkt_ctrl+0xb40>)
    e6d0:	681c      	ldr	r4, [r3, #0]
    e6d2:	4b4f      	ldr	r3, [pc, #316]	; (e810 <isr_rx_conn_pkt_ctrl+0xb58>)
    e6d4:	f7ff bb38 	b.w	dd48 <isr_rx_conn_pkt_ctrl+0x90>
	else if (rej_ext_ind->error_code != 0x23) {
    e6d8:	2923      	cmp	r1, #35	; 0x23
    e6da:	d01a      	beq.n	e712 <isr_rx_conn_pkt_ctrl+0xa5a>
		LL_ASSERT(_radio.conn_upd == conn);
    e6dc:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    e6e0:	42b3      	cmp	r3, r6
    e6e2:	d009      	beq.n	e6f8 <isr_rx_conn_pkt_ctrl+0xa40>
    e6e4:	4b43      	ldr	r3, [pc, #268]	; (e7f4 <isr_rx_conn_pkt_ctrl+0xb3c>)
    e6e6:	9301      	str	r3, [sp, #4]
    e6e8:	9300      	str	r3, [sp, #0]
    e6ea:	4b43      	ldr	r3, [pc, #268]	; (e7f8 <isr_rx_conn_pkt_ctrl+0xb40>)
    e6ec:	681c      	ldr	r4, [r3, #0]
    e6ee:	4b48      	ldr	r3, [pc, #288]	; (e810 <isr_rx_conn_pkt_ctrl+0xb58>)
			LL_ASSERT(_radio.conn_upd == conn);
    e6f0:	4a42      	ldr	r2, [pc, #264]	; (e7fc <isr_rx_conn_pkt_ctrl+0xb44>)
    e6f2:	4943      	ldr	r1, [pc, #268]	; (e800 <isr_rx_conn_pkt_ctrl+0xb48>)
    e6f4:	4847      	ldr	r0, [pc, #284]	; (e814 <isr_rx_conn_pkt_ctrl+0xb5c>)
    e6f6:	e427      	b.n	df48 <isr_rx_conn_pkt_ctrl+0x290>
		_radio.conn_upd = NULL;
    e6f8:	2600      	movs	r6, #0
		if (conn->role) {
    e6fa:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    e6fc:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    e700:	bfb8      	it	lt
    e702:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    e706:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    e70a:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    e70e:	bfb8      	it	lt
    e710:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    e712:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    e716:	0717      	lsls	r7, r2, #28
    e718:	f57f aba8 	bpl.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
	cp->status = rej_ext_ind->error_code;
    e71c:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e71e:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    e720:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e722:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    e724:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    e726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    e728:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    e72a:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    e72c:	237d      	movs	r3, #125	; 0x7d
    e72e:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    e730:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    e732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e736:	fb93 f3f2 	sdiv	r3, r3, r2
    e73a:	8223      	strh	r3, [r4, #16]
    e73c:	f7ff bbc3 	b.w	dec6 <isr_rx_conn_pkt_ctrl+0x20e>
		   _radio.conn_curr->llcp_length.req) {
    e740:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    e744:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    e748:	4290      	cmp	r0, r2
    e74a:	d01a      	beq.n	e782 <isr_rx_conn_pkt_ctrl+0xaca>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    e74c:	2914      	cmp	r1, #20
    e74e:	f47f ab8d 	bne.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		conn->llcp_length.ack = conn->llcp_length.req;
    e752:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    e756:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    e75a:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    e75c:	f360 02c3 	bfi	r2, r0, #3, #1
    e760:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    e764:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    e766:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    e76a:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e76c:	2215      	movs	r2, #21
    e76e:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    e770:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    e772:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    e774:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    e776:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    e778:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    e77a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    e77c:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    e77e:	8263      	strh	r3, [r4, #18]
    e780:	e577      	b.n	e272 <isr_rx_conn_pkt_ctrl+0x5ba>
		switch (rej_ext_ind->reject_opcode) {
    e782:	2903      	cmp	r1, #3
    e784:	f47f ab72 	bne.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
			_radio.conn_curr->pause_rx = 0;
    e788:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    e78c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    e790:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    e794:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    e796:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    e79a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    e79e:	230d      	movs	r3, #13
    e7a0:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    e7a2:	7b63      	ldrb	r3, [r4, #13]
    e7a4:	7323      	strb	r3, [r4, #12]
    e7a6:	e564      	b.n	e272 <isr_rx_conn_pkt_ctrl+0x5ba>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    e7a8:	7a41      	ldrb	r1, [r0, #9]
    e7aa:	2012      	movs	r0, #18
    e7ac:	f7fb fd46 	bl	a23c <pdu_len_cmp>
    e7b0:	2800      	cmp	r0, #0
    e7b2:	f000 8386 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		nack = ping_resp_send(_radio.conn_curr);
    e7b6:	4815      	ldr	r0, [pc, #84]	; (e80c <isr_rx_conn_pkt_ctrl+0xb54>)
    e7b8:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e7bc:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e7c0:	f7f8 ff4f 	bl	7662 <mem_acquire>
	if (!node_tx) {
    e7c4:	4601      	mov	r1, r0
    e7c6:	2800      	cmp	r0, #0
    e7c8:	f43f ac8f 	beq.w	e0ea <isr_rx_conn_pkt_ctrl+0x432>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e7cc:	7903      	ldrb	r3, [r0, #4]
    e7ce:	f043 0303 	orr.w	r3, r3, #3
    e7d2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    e7d4:	2301      	movs	r3, #1
    e7d6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    e7d8:	2313      	movs	r3, #19
    e7da:	e4c1      	b.n	e160 <isr_rx_conn_pkt_ctrl+0x4a8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    e7dc:	7a41      	ldrb	r1, [r0, #9]
    e7de:	2013      	movs	r0, #19
    e7e0:	f7fb fd2c 	bl	a23c <pdu_len_cmp>
    e7e4:	2800      	cmp	r0, #0
    e7e6:	f000 836c 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->procedure_expire = 0;
    e7ea:	4b08      	ldr	r3, [pc, #32]	; (e80c <isr_rx_conn_pkt_ctrl+0xb54>)
    e7ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    e7f0:	e462      	b.n	e0b8 <isr_rx_conn_pkt_ctrl+0x400>
    e7f2:	bf00      	nop
    e7f4:	00015359 	.word	0x00015359
    e7f8:	20003a5c 	.word	0x20003a5c
    e7fc:	00016754 	.word	0x00016754
    e800:	0001679c 	.word	0x0001679c
    e804:	00017e06 	.word	0x00017e06
    e808:	000166c8 	.word	0x000166c8
    e80c:	200008c0 	.word	0x200008c0
    e810:	00017dcb 	.word	0x00017dcb
    e814:	000186ae 	.word	0x000186ae
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    e818:	7a41      	ldrb	r1, [r0, #9]
    e81a:	2007      	movs	r0, #7
    e81c:	f7fb fd0e 	bl	a23c <pdu_len_cmp>
    e820:	2800      	cmp	r0, #0
    e822:	f000 834e 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    e826:	4ad3      	ldr	r2, [pc, #844]	; (eb74 <isr_rx_conn_pkt_ctrl+0xebc>)
    e828:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    e82c:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    e830:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    e834:	42b1      	cmp	r1, r6
    e836:	4611      	mov	r1, r2
    e838:	d06b      	beq.n	e912 <isr_rx_conn_pkt_ctrl+0xc5a>
			conn->llcp_conn_param.disabled = 1;
    e83a:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    e83e:	f040 0010 	orr.w	r0, r0, #16
    e842:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    e846:	f993 001d 	ldrsb.w	r0, [r3, #29]
    e84a:	2800      	cmp	r0, #0
    e84c:	db39      	blt.n	e8c2 <isr_rx_conn_pkt_ctrl+0xc0a>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e84e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    e852:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    e856:	4294      	cmp	r4, r2
    e858:	d007      	beq.n	e86a <isr_rx_conn_pkt_ctrl+0xbb2>
    e85a:	4bc7      	ldr	r3, [pc, #796]	; (eb78 <isr_rx_conn_pkt_ctrl+0xec0>)
    e85c:	9301      	str	r3, [sp, #4]
    e85e:	9300      	str	r3, [sp, #0]
    e860:	4bc6      	ldr	r3, [pc, #792]	; (eb7c <isr_rx_conn_pkt_ctrl+0xec4>)
    e862:	681c      	ldr	r4, [r3, #0]
    e864:	4bc6      	ldr	r3, [pc, #792]	; (eb80 <isr_rx_conn_pkt_ctrl+0xec8>)
    e866:	f7ff ba6f 	b.w	dd48 <isr_rx_conn_pkt_ctrl+0x90>
				conn->llcp_conn_param.state =
    e86a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    e86e:	2105      	movs	r1, #5
    e870:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    e874:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    e878:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    e87c:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    e880:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    e884:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    e888:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e88c:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    e890:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    e894:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    e896:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e89a:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    e89e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    e8a2:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    e8a4:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    e8a8:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    e8aa:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    e8ae:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    e8b2:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    e8b6:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    e8ba:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    e8be:	f7ff bac5 	b.w	de4c <isr_rx_conn_pkt_ctrl+0x194>
			LL_ASSERT(_radio.conn_upd == conn);
    e8c2:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    e8c6:	4293      	cmp	r3, r2
    e8c8:	d006      	beq.n	e8d8 <isr_rx_conn_pkt_ctrl+0xc20>
    e8ca:	4bab      	ldr	r3, [pc, #684]	; (eb78 <isr_rx_conn_pkt_ctrl+0xec0>)
    e8cc:	9301      	str	r3, [sp, #4]
    e8ce:	9300      	str	r3, [sp, #0]
    e8d0:	4baa      	ldr	r3, [pc, #680]	; (eb7c <isr_rx_conn_pkt_ctrl+0xec4>)
    e8d2:	681c      	ldr	r4, [r3, #0]
    e8d4:	4baa      	ldr	r3, [pc, #680]	; (eb80 <isr_rx_conn_pkt_ctrl+0xec8>)
    e8d6:	e70b      	b.n	e6f0 <isr_rx_conn_pkt_ctrl+0xa38>
			_radio.conn_upd = NULL;
    e8d8:	2200      	movs	r2, #0
    e8da:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    e8de:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e8e2:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    e8e6:	0716      	lsls	r6, r2, #28
    e8e8:	f57f aac0 	bpl.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e8ec:	2208      	movs	r2, #8
    e8ee:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e8f0:	221a      	movs	r2, #26
    e8f2:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    e8f4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    e8f6:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    e8f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    e8fa:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    e8fc:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    e8fe:	237d      	movs	r3, #125	; 0x7d
    e900:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    e902:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    e904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e908:	fb93 f3f2 	sdiv	r3, r3, r2
    e90c:	8223      	strh	r3, [r4, #16]
    e90e:	f7ff bb65 	b.w	dfdc <isr_rx_conn_pkt_ctrl+0x324>
		} else if (_radio.conn_curr->llcp_length.req !=
    e912:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    e916:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    e91a:	4290      	cmp	r0, r2
    e91c:	d009      	beq.n	e932 <isr_rx_conn_pkt_ctrl+0xc7a>
			_radio.conn_curr->llcp_length.ack =
    e91e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    e922:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    e926:	f36f 02c3 	bfc	r2, #3, #1
    e92a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    e92e:	f7ff bb55 	b.w	dfdc <isr_rx_conn_pkt_ctrl+0x324>
		} else if (_radio.conn_curr->llcp_phy.req !=
    e932:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    e936:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    e93a:	4290      	cmp	r0, r2
    e93c:	d01b      	beq.n	e976 <isr_rx_conn_pkt_ctrl+0xcbe>
			_radio.conn_curr->llcp_phy.ack =
    e93e:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    e942:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    e946:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    e94a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    e94e:	f362 0002 	bfi	r0, r2, #0, #3
    e952:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    e956:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    e95a:	0780      	lsls	r0, r0, #30
    e95c:	d50f      	bpl.n	e97e <isr_rx_conn_pkt_ctrl+0xcc6>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e95e:	200c      	movs	r0, #12
    e960:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    e962:	2000      	movs	r0, #0
    e964:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    e966:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    e968:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    e96c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e970:	7363      	strb	r3, [r4, #13]
    e972:	f7ff bb33 	b.w	dfdc <isr_rx_conn_pkt_ctrl+0x324>
			switch (llctrl->unknown_rsp.type) {
    e976:	7b23      	ldrb	r3, [r4, #12]
    e978:	2b12      	cmp	r3, #18
    e97a:	f47f ab2f 	bne.w	dfdc <isr_rx_conn_pkt_ctrl+0x324>
		_radio.conn_curr->procedure_expire = 0;
    e97e:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    e982:	f7ff bb99 	b.w	e0b8 <isr_rx_conn_pkt_ctrl+0x400>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    e986:	7a41      	ldrb	r1, [r0, #9]
    e988:	2014      	movs	r0, #20
    e98a:	f7fb fc57 	bl	a23c <pdu_len_cmp>
    e98e:	2800      	cmp	r0, #0
    e990:	f000 8297 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    e994:	2f14      	cmp	r7, #20
    e996:	d129      	bne.n	e9ec <isr_rx_conn_pkt_ctrl+0xd34>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e998:	487a      	ldr	r0, [pc, #488]	; (eb84 <isr_rx_conn_pkt_ctrl+0xecc>)
    e99a:	f7f8 fe62 	bl	7662 <mem_acquire>
		if (!node_tx) {
    e99e:	4606      	mov	r6, r0
    e9a0:	2800      	cmp	r0, #0
    e9a2:	f43f aba2 	beq.w	e0ea <isr_rx_conn_pkt_ctrl+0x432>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e9a6:	4f73      	ldr	r7, [pc, #460]	; (eb74 <isr_rx_conn_pkt_ctrl+0xebc>)
    e9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    e9ac:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    e9b0:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e9b4:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e9b6:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    e9b8:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e9ba:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    e9be:	45e0      	cmp	r8, ip
    e9c0:	46b9      	mov	r9, r7
    e9c2:	f894 800b 	ldrb.w	r8, [r4, #11]
    e9c6:	d113      	bne.n	e9f0 <isr_rx_conn_pkt_ctrl+0xd38>
	      _radio.conn_curr->llcp_length.ack) &&
    e9c8:	f1b8 0f14 	cmp.w	r8, #20
    e9cc:	d01c      	beq.n	ea08 <isr_rx_conn_pkt_ctrl+0xd50>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    e9ce:	f1b8 0f15 	cmp.w	r8, #21
    e9d2:	f000 829a 	beq.w	ef0a <isr_rx_conn_pkt_ctrl+0x1252>
    e9d6:	4b68      	ldr	r3, [pc, #416]	; (eb78 <isr_rx_conn_pkt_ctrl+0xec0>)
    e9d8:	9301      	str	r3, [sp, #4]
    e9da:	9300      	str	r3, [sp, #0]
    e9dc:	4b67      	ldr	r3, [pc, #412]	; (eb7c <isr_rx_conn_pkt_ctrl+0xec4>)
    e9de:	4a6a      	ldr	r2, [pc, #424]	; (eb88 <isr_rx_conn_pkt_ctrl+0xed0>)
    e9e0:	681c      	ldr	r4, [r3, #0]
    e9e2:	496a      	ldr	r1, [pc, #424]	; (eb8c <isr_rx_conn_pkt_ctrl+0xed4>)
    e9e4:	4b6a      	ldr	r3, [pc, #424]	; (eb90 <isr_rx_conn_pkt_ctrl+0xed8>)
    e9e6:	486b      	ldr	r0, [pc, #428]	; (eb94 <isr_rx_conn_pkt_ctrl+0xedc>)
    e9e8:	f7ff baae 	b.w	df48 <isr_rx_conn_pkt_ctrl+0x290>
	struct radio_pdu_node_tx *node_tx = NULL;
    e9ec:	2600      	movs	r6, #0
    e9ee:	e7da      	b.n	e9a6 <isr_rx_conn_pkt_ctrl+0xcee>
		 LLCP_LENGTH_STATE_REQ) ||
    e9f0:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    e9f4:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    e9f8:	2f01      	cmp	r7, #1
    e9fa:	d9e5      	bls.n	e9c8 <isr_rx_conn_pkt_ctrl+0xd10>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    e9fc:	2f02      	cmp	r7, #2
    e9fe:	d1e6      	bne.n	e9ce <isr_rx_conn_pkt_ctrl+0xd16>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    ea00:	f1a8 0714 	sub.w	r7, r8, #20
    ea04:	2f01      	cmp	r7, #1
    ea06:	d8e2      	bhi.n	e9ce <isr_rx_conn_pkt_ctrl+0xd16>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    ea08:	89a7      	ldrh	r7, [r4, #12]
    ea0a:	2f1a      	cmp	r7, #26
    ea0c:	d936      	bls.n	ea7c <isr_rx_conn_pkt_ctrl+0xdc4>
			eff_tx_octets = min(lr->max_rx_octets,
    ea0e:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    ea12:	4547      	cmp	r7, r8
    ea14:	bf28      	it	cs
    ea16:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    ea18:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    ea1c:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    ea20:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    ea24:	bf34      	ite	cc
    ea26:	4693      	movcc	fp, r2
    ea28:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    ea2c:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    ea30:	d326      	bcc.n	ea80 <isr_rx_conn_pkt_ctrl+0xdc8>
			eff_tx_time = min(lr->max_rx_time,
    ea32:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    ea36:	45d0      	cmp	r8, sl
    ea38:	bf28      	it	cs
    ea3a:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    ea3c:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    ea40:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    ea44:	bf34      	ite	cc
    ea46:	4682      	movcc	sl, r0
    ea48:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    ea4c:	455a      	cmp	r2, fp
    ea4e:	d052      	beq.n	eaf6 <isr_rx_conn_pkt_ctrl+0xe3e>
			free_count_rx = packet_rx_acquired_count_get() +
    ea50:	f7fb fc3c 	bl	a2cc <packet_rx_acquired_count_get>
    ea54:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    ea56:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    ea5a:	f7f8 fe31 	bl	76c0 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    ea5e:	4420      	add	r0, r4
    ea60:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    ea62:	28ff      	cmp	r0, #255	; 0xff
    ea64:	d90e      	bls.n	ea84 <isr_rx_conn_pkt_ctrl+0xdcc>
    ea66:	4b44      	ldr	r3, [pc, #272]	; (eb78 <isr_rx_conn_pkt_ctrl+0xec0>)
    ea68:	9301      	str	r3, [sp, #4]
    ea6a:	9300      	str	r3, [sp, #0]
    ea6c:	4b43      	ldr	r3, [pc, #268]	; (eb7c <isr_rx_conn_pkt_ctrl+0xec4>)
    ea6e:	4a46      	ldr	r2, [pc, #280]	; (eb88 <isr_rx_conn_pkt_ctrl+0xed0>)
    ea70:	681c      	ldr	r4, [r3, #0]
    ea72:	4946      	ldr	r1, [pc, #280]	; (eb8c <isr_rx_conn_pkt_ctrl+0xed4>)
    ea74:	4b46      	ldr	r3, [pc, #280]	; (eb90 <isr_rx_conn_pkt_ctrl+0xed8>)
    ea76:	4848      	ldr	r0, [pc, #288]	; (eb98 <isr_rx_conn_pkt_ctrl+0xee0>)
    ea78:	f7ff ba66 	b.w	df48 <isr_rx_conn_pkt_ctrl+0x290>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    ea7c:	460f      	mov	r7, r1
    ea7e:	e7cb      	b.n	ea18 <isr_rx_conn_pkt_ctrl+0xd60>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    ea80:	46f0      	mov	r8, lr
    ea82:	e7db      	b.n	ea3c <isr_rx_conn_pkt_ctrl+0xd84>
			if (_radio.packet_rx_data_count == free_count_rx) {
    ea84:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    ea88:	4283      	cmp	r3, r0
    ea8a:	f040 8235 	bne.w	eef8 <isr_rx_conn_pkt_ctrl+0x1240>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    ea8e:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    ea92:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    ea96:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    ea98:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    ea9a:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    ea9e:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    eaa2:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    eaa6:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    eaaa:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    eaae:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    eab2:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    eab6:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    eaba:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    eabe:	2303      	movs	r3, #3
    eac0:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    eac4:	2e00      	cmp	r6, #0
    eac6:	f43f a9d1 	beq.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    eaca:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    eacc:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    ead0:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ead4:	f043 0303 	orr.w	r3, r3, #3
    ead8:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    eada:	2309      	movs	r3, #9
    eadc:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    eade:	2315      	movs	r3, #21
    eae0:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    eae2:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    eae4:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    eae8:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    eaec:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    eaee:	f7fd fc95 	bl	c41c <ctrl_tx_enqueue>
    eaf2:	f7ff b9bb 	b.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
			_radio.conn_curr->pause_tx = 0;
    eaf6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    eafa:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    eafe:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    eb02:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    eb06:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    eb08:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    eb0c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    eb10:	d103      	bne.n	eb1a <isr_rx_conn_pkt_ctrl+0xe62>
    eb12:	45c6      	cmp	lr, r8
    eb14:	d101      	bne.n	eb1a <isr_rx_conn_pkt_ctrl+0xe62>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    eb16:	4550      	cmp	r0, sl
    eb18:	d0d4      	beq.n	eac4 <isr_rx_conn_pkt_ctrl+0xe0c>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    eb1a:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    eb1c:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    eb20:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    eb24:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    eb26:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    eb2a:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    eb2c:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    eb30:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    eb34:	702b      	strb	r3, [r5, #0]
    eb36:	e7c5      	b.n	eac4 <isr_rx_conn_pkt_ctrl+0xe0c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    eb38:	7a41      	ldrb	r1, [r0, #9]
    eb3a:	2016      	movs	r0, #22
    eb3c:	f7fb fb7e 	bl	a23c <pdu_len_cmp>
    eb40:	2800      	cmp	r0, #0
    eb42:	f000 81be 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		if (_radio.role == ROLE_MASTER) {
    eb46:	480b      	ldr	r0, [pc, #44]	; (eb74 <isr_rx_conn_pkt_ctrl+0xebc>)
    eb48:	7cc3      	ldrb	r3, [r0, #19]
    eb4a:	2b04      	cmp	r3, #4
    eb4c:	d16b      	bne.n	ec26 <isr_rx_conn_pkt_ctrl+0xf6e>
			if ((_radio.conn_curr->llcp_phy.ack !=
    eb4e:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    eb52:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    eb56:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    eb5a:	428b      	cmp	r3, r1
    eb5c:	d01e      	beq.n	eb9c <isr_rx_conn_pkt_ctrl+0xee4>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    eb5e:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    eb62:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    eb66:	3a01      	subs	r2, #1
    eb68:	2a02      	cmp	r2, #2
    eb6a:	d817      	bhi.n	eb9c <isr_rx_conn_pkt_ctrl+0xee4>
				nack = reject_ext_ind_send(_radio.conn_curr,
    eb6c:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    eb6e:	2116      	movs	r1, #22
    eb70:	f7ff bb94 	b.w	e29c <isr_rx_conn_pkt_ctrl+0x5e4>
    eb74:	200008c0 	.word	0x200008c0
    eb78:	00015359 	.word	0x00015359
    eb7c:	20003a5c 	.word	0x20003a5c
    eb80:	00017e06 	.word	0x00017e06
    eb84:	20000a1c 	.word	0x20000a1c
    eb88:	00016754 	.word	0x00016754
    eb8c:	0001679c 	.word	0x0001679c
    eb90:	00017ded 	.word	0x00017ded
    eb94:	000186e7 	.word	0x000186e7
    eb98:	0001825f 	.word	0x0001825f
			} else if (((_radio.conn_curr->llcp_req !=
    eb9c:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    eba0:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    eba4:	4295      	cmp	r5, r2
    eba6:	d003      	beq.n	ebb0 <isr_rx_conn_pkt_ctrl+0xef8>
				     _radio.conn_curr->llcp_ack) &&
    eba8:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    ebac:	2a03      	cmp	r2, #3
    ebae:	d105      	bne.n	ebbc <isr_rx_conn_pkt_ctrl+0xf04>
				     LLCP_ENCRYPTION)) ||
    ebb0:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    ebb4:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    ebb8:	4295      	cmp	r5, r2
    ebba:	d001      	beq.n	ebc0 <isr_rx_conn_pkt_ctrl+0xf08>
				nack = reject_ext_ind_send(_radio.conn_curr,
    ebbc:	222a      	movs	r2, #42	; 0x2a
    ebbe:	e7d6      	b.n	eb6e <isr_rx_conn_pkt_ctrl+0xeb6>
				_radio.conn_curr->llcp_phy.state =
    ebc0:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    ebc4:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    ebc6:	f042 0203 	orr.w	r2, r2, #3
    ebca:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    ebce:	d116      	bne.n	ebfe <isr_rx_conn_pkt_ctrl+0xf46>
					_radio.conn_curr->llcp_phy.ack--;
    ebd0:	3b01      	subs	r3, #1
    ebd2:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    ebd6:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    ebda:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    ebde:	f36f 0341 	bfc	r3, #1, #1
    ebe2:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    ebe6:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    ebea:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    ebee:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    ebf2:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ebf6:	f362 1347 	bfi	r3, r2, #5, #3
    ebfa:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    ebfe:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    ec02:	7b62      	ldrb	r2, [r4, #13]
    ec04:	f3c3 0182 	ubfx	r1, r3, #2, #3
    ec08:	400a      	ands	r2, r1
    ec0a:	f362 0384 	bfi	r3, r2, #2, #3
    ec0e:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    ec12:	7b22      	ldrb	r2, [r4, #12]
    ec14:	b2db      	uxtb	r3, r3
    ec16:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    ec1a:	f362 1347 	bfi	r3, r2, #5, #3
    ec1e:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    ec22:	f7ff b923 	b.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    ec26:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ec2a:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    ec2e:	f7f8 fd18 	bl	7662 <mem_acquire>
	if (!node_tx) {
    ec32:	4601      	mov	r1, r0
    ec34:	2800      	cmp	r0, #0
    ec36:	f43f aa58 	beq.w	e0ea <isr_rx_conn_pkt_ctrl+0x432>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    ec3a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    ec3e:	2202      	movs	r2, #2
    ec40:	f362 0301 	bfi	r3, r2, #0, #2
    ec44:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    ec48:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    ec4c:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    ec50:	4293      	cmp	r3, r2
    ec52:	d11a      	bne.n	ec8a <isr_rx_conn_pkt_ctrl+0xfd2>
		conn->llcp_phy.ack--;
    ec54:	3b01      	subs	r3, #1
    ec56:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    ec5a:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    ec5e:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    ec62:	f36f 0341 	bfc	r3, #1, #1
    ec66:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    ec6a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    ec6e:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    ec72:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    ec76:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ec7a:	f362 1347 	bfi	r3, r2, #5, #3
    ec7e:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    ec82:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    ec86:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    ec8a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    ec8e:	7b62      	ldrb	r2, [r4, #13]
    ec90:	f3c3 0082 	ubfx	r0, r3, #2, #3
    ec94:	4002      	ands	r2, r0
    ec96:	f362 0384 	bfi	r3, r2, #2, #3
    ec9a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    ec9e:	7b22      	ldrb	r2, [r4, #12]
    eca0:	b2db      	uxtb	r3, r3
    eca2:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    eca6:	f362 1347 	bfi	r3, r2, #5, #3
    ecaa:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ecae:	790b      	ldrb	r3, [r1, #4]
    ecb0:	f043 0303 	orr.w	r3, r3, #3
    ecb4:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    ecb6:	2303      	movs	r3, #3
    ecb8:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    ecba:	2317      	movs	r3, #23
    ecbc:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    ecbe:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    ecc2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ecc6:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    ecc8:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    eccc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ecd0:	724b      	strb	r3, [r1, #9]
    ecd2:	f7ff ba1c 	b.w	e10e <isr_rx_conn_pkt_ctrl+0x456>
		if (_radio.conn_curr->role ||
    ecd6:	4e92      	ldr	r6, [pc, #584]	; (ef20 <isr_rx_conn_pkt_ctrl+0x1268>)
    ecd8:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    ecdc:	f995 301d 	ldrsb.w	r3, [r5, #29]
    ece0:	2b00      	cmp	r3, #0
    ece2:	f2c0 80ee 	blt.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    ece6:	7a41      	ldrb	r1, [r0, #9]
    ece8:	2017      	movs	r0, #23
    ecea:	f7fb faa7 	bl	a23c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    ecee:	2800      	cmp	r0, #0
    ecf0:	f000 80e7 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		if ((_radio.role == ROLE_MASTER) &&
    ecf4:	7cf3      	ldrb	r3, [r6, #19]
    ecf6:	2b04      	cmp	r3, #4
    ecf8:	f47f a8b8 	bne.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
    ecfc:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    ed00:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    ed04:	429a      	cmp	r2, r3
    ed06:	f43f a8b1 	beq.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		    (_radio.conn_curr->llcp_phy.state ==
    ed0a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    ed0e:	f003 0203 	and.w	r2, r3, #3
    ed12:	2a02      	cmp	r2, #2
    ed14:	f47f a8aa 	bne.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    ed18:	f043 0303 	orr.w	r3, r3, #3
    ed1c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    ed20:	7b62      	ldrb	r2, [r4, #13]
    ed22:	f3c3 0182 	ubfx	r1, r3, #2, #3
    ed26:	400a      	ands	r2, r1
    ed28:	f362 0384 	bfi	r3, r2, #2, #3
    ed2c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    ed30:	7b22      	ldrb	r2, [r4, #12]
    ed32:	b2db      	uxtb	r3, r3
    ed34:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    ed38:	f362 1347 	bfi	r3, r2, #5, #3
    ed3c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    ed40:	f7ff b845 	b.w	ddce <isr_rx_conn_pkt_ctrl+0x116>
		if (!_radio.conn_curr->role ||
    ed44:	4b76      	ldr	r3, [pc, #472]	; (ef20 <isr_rx_conn_pkt_ctrl+0x1268>)
    ed46:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    ed4a:	f996 301d 	ldrsb.w	r3, [r6, #29]
    ed4e:	2b00      	cmp	r3, #0
    ed50:	f280 80b7 	bge.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    ed54:	7a41      	ldrb	r1, [r0, #9]
    ed56:	2018      	movs	r0, #24
    ed58:	f7fb fa70 	bl	a23c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    ed5c:	2800      	cmp	r0, #0
    ed5e:	f000 80b0 	beq.w	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    ed62:	7b27      	ldrb	r7, [r4, #12]
    ed64:	7b62      	ldrb	r2, [r4, #13]
    ed66:	ea47 0002 	orr.w	r0, r7, r2
    ed6a:	f010 0007 	ands.w	r0, r0, #7
    ed6e:	d125      	bne.n	edbc <isr_rx_conn_pkt_ctrl+0x1104>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    ed70:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    ed74:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    ed78:	4293      	cmp	r3, r2
    ed7a:	f43f a877 	beq.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    ed7e:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    ed82:	f003 0303 	and.w	r3, r3, #3
    ed86:	2b02      	cmp	r3, #2
    ed88:	f47f a870 	bne.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		if (!conn->llcp_phy.cmd) {
    ed8c:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    ed90:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    ed94:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    ed96:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    ed9a:	f57f a867 	bpl.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ed9e:	230c      	movs	r3, #12
		upd->status = 0;
    eda0:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    eda2:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    eda4:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    eda8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    edac:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    edae:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    edb2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    edb6:	7363      	strb	r3, [r4, #13]
    edb8:	f7ff ba5b 	b.w	e272 <isr_rx_conn_pkt_ctrl+0x5ba>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    edbc:	89e0      	ldrh	r0, [r4, #14]
    edbe:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    edc0:	1ac3      	subs	r3, r0, r3
    edc2:	041b      	lsls	r3, r3, #16
    edc4:	f100 80a6 	bmi.w	ef14 <isr_rx_conn_pkt_ctrl+0x125c>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    edc8:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    edcc:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    edd0:	428b      	cmp	r3, r1
    edd2:	d007      	beq.n	ede4 <isr_rx_conn_pkt_ctrl+0x112c>
    edd4:	4b53      	ldr	r3, [pc, #332]	; (ef24 <isr_rx_conn_pkt_ctrl+0x126c>)
    edd6:	9301      	str	r3, [sp, #4]
    edd8:	9300      	str	r3, [sp, #0]
    edda:	4b53      	ldr	r3, [pc, #332]	; (ef28 <isr_rx_conn_pkt_ctrl+0x1270>)
    eddc:	681c      	ldr	r4, [r3, #0]
    edde:	4b53      	ldr	r3, [pc, #332]	; (ef2c <isr_rx_conn_pkt_ctrl+0x1274>)
    ede0:	f7fe bfb2 	b.w	dd48 <isr_rx_conn_pkt_ctrl+0x90>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    ede4:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    ede8:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    edec:	42a3      	cmp	r3, r4
    edee:	d014      	beq.n	ee1a <isr_rx_conn_pkt_ctrl+0x1162>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    edf0:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    edf4:	f003 0303 	and.w	r3, r3, #3
    edf8:	2b02      	cmp	r3, #2
    edfa:	d10e      	bne.n	ee1a <isr_rx_conn_pkt_ctrl+0x1162>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    edfc:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    ee00:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    ee04:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    ee08:	f3c3 0340 	ubfx	r3, r3, #1, #1
    ee0c:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    ee10:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    ee12:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    ee16:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    ee1a:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    ee1e:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    ee22:	f002 0207 	and.w	r2, r2, #7
    ee26:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    ee2a:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    ee2e:	f36f 0300 	bfc	r3, #0, #1
    ee32:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    ee36:	2008      	movs	r0, #8
	conn->llcp_ack--;
    ee38:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    ee3a:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    ee3e:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    ee42:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    ee46:	2b00      	cmp	r3, #0
    ee48:	f43f a810 	beq.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    ee4c:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    ee50:	f362 0302 	bfi	r3, r2, #0, #3
    ee54:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    ee58:	f7ff b808 	b.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		if (_radio.conn_curr->role ||
    ee5c:	4e30      	ldr	r6, [pc, #192]	; (ef20 <isr_rx_conn_pkt_ctrl+0x1268>)
    ee5e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    ee62:	f995 301d 	ldrsb.w	r3, [r5, #29]
    ee66:	2b00      	cmp	r3, #0
    ee68:	db2b      	blt.n	eec2 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    ee6a:	7a41      	ldrb	r1, [r0, #9]
    ee6c:	2019      	movs	r0, #25
    ee6e:	f7fb f9e5 	bl	a23c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    ee72:	b330      	cbz	r0, eec2 <isr_rx_conn_pkt_ctrl+0x120a>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    ee74:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    ee78:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    ee7c:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    ee80:	7b22      	ldrb	r2, [r4, #12]
    ee82:	f003 0307 	and.w	r3, r3, #7
    ee86:	4213      	tst	r3, r2
    ee88:	f43e aff0 	beq.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
			if (conn->llcp_req != conn->llcp_ack) {
    ee8c:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    ee90:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    ee94:	429a      	cmp	r2, r3
    ee96:	f47e afe9 	bne.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
			memcpy(&conn->llcp.chan_map.chm[0],
    ee9a:	2205      	movs	r2, #5
    ee9c:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    eea0:	f105 0079 	add.w	r0, r5, #121	; 0x79
    eea4:	f7f2 fed0 	bl	1c48 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    eea8:	2301      	movs	r3, #1
    eeaa:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    eeae:	2302      	movs	r3, #2
    eeb0:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    eeb4:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    eeb8:	3b01      	subs	r3, #1
    eeba:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    eebe:	f7fe bfd5 	b.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
		nack = unknown_rsp_send(_radio.conn_curr,
    eec2:	4817      	ldr	r0, [pc, #92]	; (ef20 <isr_rx_conn_pkt_ctrl+0x1268>)
    eec4:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    eec8:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    eecc:	f7f8 fbc9 	bl	7662 <mem_acquire>
	if (!node_tx) {
    eed0:	4601      	mov	r1, r0
    eed2:	2800      	cmp	r0, #0
    eed4:	f43f a909 	beq.w	e0ea <isr_rx_conn_pkt_ctrl+0x432>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    eed8:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    eeda:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    eedc:	f043 0303 	orr.w	r3, r3, #3
    eee0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    eee2:	2302      	movs	r3, #2
    eee4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    eee6:	2307      	movs	r3, #7
    eee8:	71c3      	strb	r3, [r0, #7]
    eeea:	f7ff b93a 	b.w	e162 <isr_rx_conn_pkt_ctrl+0x4aa>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    eeee:	2328      	movs	r3, #40	; 0x28
    eef0:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    eef4:	f7fe bfba 	b.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
	if (node_tx) {
    eef8:	2e00      	cmp	r6, #0
    eefa:	f43f a8f6 	beq.w	e0ea <isr_rx_conn_pkt_ctrl+0x432>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    eefe:	490c      	ldr	r1, [pc, #48]	; (ef30 <isr_rx_conn_pkt_ctrl+0x1278>)
    ef00:	4630      	mov	r0, r6
    ef02:	f7f8 fbc8 	bl	7696 <mem_release>
    ef06:	f7ff b8f0 	b.w	e0ea <isr_rx_conn_pkt_ctrl+0x432>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    ef0a:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    ef0c:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    ef0e:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    ef10:	4693      	mov	fp, r2
    ef12:	e5d7      	b.n	eac4 <isr_rx_conn_pkt_ctrl+0xe0c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    ef14:	2328      	movs	r3, #40	; 0x28
    ef16:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    ef1a:	f7fe bfa7 	b.w	de6c <isr_rx_conn_pkt_ctrl+0x1b4>
    ef1e:	bf00      	nop
    ef20:	200008c0 	.word	0x200008c0
    ef24:	00015359 	.word	0x00015359
    ef28:	20003a5c 	.word	0x20003a5c
    ef2c:	00018170 	.word	0x00018170
    ef30:	20000a1c 	.word	0x20000a1c
    ef34:	00000000 	.word	0x00000000

0000ef38 <isr>:
{
    ef38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef3c:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    ef3e:	f003 ff3f 	bl	12dc0 <radio_is_done>
    ef42:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    ef44:	b366      	cbz	r6, efa0 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    ef46:	f003 ff5b 	bl	12e00 <radio_crc_is_valid>
    ef4a:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    ef4c:	f003 ffdc 	bl	12f08 <radio_filter_has_match>
    ef50:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    ef54:	f003 ffe2 	bl	12f1c <radio_filter_match_get>
    ef58:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    ef5c:	f004 f9c6 	bl	132ec <radio_ar_has_match>
    ef60:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    ef64:	f004 f9b0 	bl	132c8 <radio_ar_match_get>
    ef68:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    ef6c:	f003 ff96 	bl	12e9c <radio_rssi_is_ready>
    ef70:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    ef72:	4cb7      	ldr	r4, [pc, #732]	; (f250 <isr+0x318>)
	radio_status_reset();
    ef74:	f003 ff0e 	bl	12d94 <radio_status_reset>
	radio_tmr_status_reset();
    ef78:	f003 ffe2 	bl	12f40 <radio_tmr_status_reset>
	radio_filter_status_reset();
    ef7c:	f003 ffbc 	bl	12ef8 <radio_filter_status_reset>
	radio_ar_status_reset();
    ef80:	f004 f9a8 	bl	132d4 <radio_ar_status_reset>
	radio_rssi_status_reset();
    ef84:	f003 ff82 	bl	12e8c <radio_rssi_status_reset>
	switch (_radio.state) {
    ef88:	7d23      	ldrb	r3, [r4, #20]
    ef8a:	2b05      	cmp	r3, #5
    ef8c:	f201 84aa 	bhi.w	108e4 <__kernel_ram_size+0x8e4>
    ef90:	e8df f013 	tbh	[pc, r3, lsl #1]
    ef94:	00d1007e 	.word	0x00d1007e
    ef98:	0a44000e 	.word	0x0a44000e
    ef9c:	0a440a44 	.word	0x0a440a44
		devmatch_id = irkmatch_id = 0xFF;
    efa0:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    efa4:	4635      	mov	r5, r6
    efa6:	46b2      	mov	sl, r6
    efa8:	46b1      	mov	r9, r6
    efaa:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    efac:	46d8      	mov	r8, fp
    efae:	e7e0      	b.n	ef72 <isr+0x3a>
	_radio.state = STATE_RX;
    efb0:	2301      	movs	r3, #1
    efb2:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    efb4:	f004 f8c6 	bl	13144 <radio_tmr_tifs_base_get>
    efb8:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    efba:	2096      	movs	r0, #150	; 0x96
    efbc:	f003 ffce 	bl	12f5c <radio_tmr_tifs_set>
	switch (_radio.role) {
    efc0:	7ce3      	ldrb	r3, [r4, #19]
    efc2:	3b01      	subs	r3, #1
    efc4:	2b03      	cmp	r3, #3
    efc6:	f200 80ac 	bhi.w	f122 <isr+0x1ea>
    efca:	e8df f003 	tbb	[pc, r3]
    efce:	3402      	.short	0x3402
    efd0:	6464      	.short	0x6464
		radio_switch_complete_and_tx(0, 0, 0, 0);
    efd2:	2300      	movs	r3, #0
    efd4:	461a      	mov	r2, r3
    efd6:	4619      	mov	r1, r3
    efd8:	4618      	mov	r0, r3
    efda:	f003 ff2f 	bl	12e3c <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    efde:	f003 ff1d 	bl	12e1c <radio_pkt_scratch_get>
    efe2:	f003 fe9f 	bl	12d24 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    efe6:	f003 fee1 	bl	12dac <radio_is_ready>
    efea:	b148      	cbz	r0, f000 <isr+0xc8>
		LL_ASSERT(!radio_is_ready());
    efec:	4b99      	ldr	r3, [pc, #612]	; (f254 <isr+0x31c>)
    efee:	9301      	str	r3, [sp, #4]
    eff0:	9300      	str	r3, [sp, #0]
    eff2:	4b99      	ldr	r3, [pc, #612]	; (f258 <isr+0x320>)
    eff4:	681c      	ldr	r4, [r3, #0]
    eff6:	4b99      	ldr	r3, [pc, #612]	; (f25c <isr+0x324>)
	LL_ASSERT(!radio_is_ready());
    eff8:	4a99      	ldr	r2, [pc, #612]	; (f260 <isr+0x328>)
    effa:	499a      	ldr	r1, [pc, #616]	; (f264 <isr+0x32c>)
    effc:	489a      	ldr	r0, [pc, #616]	; (f268 <isr+0x330>)
    effe:	e357      	b.n	f6b0 <isr+0x778>
		if (ctrl_rl_enabled()) {
    f000:	f003 f9cc 	bl	1239c <ctrl_rl_enabled>
    f004:	b138      	cbz	r0, f016 <isr+0xde>
			u8_t count, *irks = ctrl_irks_get(&count);
    f006:	a810      	add	r0, sp, #64	; 0x40
    f008:	f002 ff00 	bl	11e0c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f00c:	4601      	mov	r1, r0
    f00e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f012:	f004 f927 	bl	13264 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    f016:	2100      	movs	r1, #0
    f018:	4608      	mov	r0, r1
    f01a:	f003 fe98 	bl	12d4e <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    f01e:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    f020:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    f022:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    f024:	4608      	mov	r0, r1
    f026:	f003 fe8e 	bl	12d46 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f02a:	1a28      	subs	r0, r5, r0
    f02c:	f004 f820 	bl	13070 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    f030:	f004 f870 	bl	13114 <radio_tmr_end_capture>
    f034:	e02c      	b.n	f090 <isr+0x158>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f036:	2300      	movs	r3, #0
    f038:	461a      	mov	r2, r3
    f03a:	4619      	mov	r1, r3
    f03c:	4618      	mov	r0, r3
    f03e:	f003 fefd 	bl	12e3c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    f042:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f046:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    f04a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    f04e:	3008      	adds	r0, #8
    f050:	f003 fe68 	bl	12d24 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f054:	f003 feaa 	bl	12dac <radio_is_ready>
    f058:	2800      	cmp	r0, #0
    f05a:	d1c7      	bne.n	efec <isr+0xb4>
		if (ctrl_rl_enabled()) {
    f05c:	f003 f99e 	bl	1239c <ctrl_rl_enabled>
    f060:	b138      	cbz	r0, f072 <isr+0x13a>
			u8_t count, *irks = ctrl_irks_get(&count);
    f062:	a810      	add	r0, sp, #64	; 0x40
    f064:	f002 fed2 	bl	11e0c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f068:	4601      	mov	r1, r0
    f06a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f06e:	f004 f8f9 	bl	13264 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    f072:	2100      	movs	r1, #0
    f074:	4608      	mov	r0, r1
    f076:	f003 fe6a 	bl	12d4e <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    f07a:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    f07c:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    f07e:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    f080:	4608      	mov	r0, r1
    f082:	f003 fe60 	bl	12d46 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f086:	1a28      	subs	r0, r5, r0
    f088:	f003 fff2 	bl	13070 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    f08c:	f003 feee 	bl	12e6c <radio_rssi_measure>
}
    f090:	b013      	add	sp, #76	; 0x4c
    f092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f096:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    f09a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f09e:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f0a2:	2100      	movs	r1, #0
    f0a4:	09d3      	lsrs	r3, r2, #7
    f0a6:	f000 0007 	and.w	r0, r0, #7
    f0aa:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f0ae:	f003 fec5 	bl	12e3c <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    f0b2:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f0b6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    f0ba:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    f0be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    f0c2:	3108      	adds	r1, #8
    f0c4:	f7fb fca0 	bl	aa08 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    f0c8:	f003 fe70 	bl	12dac <radio_is_ready>
    f0cc:	2800      	cmp	r0, #0
    f0ce:	d18d      	bne.n	efec <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    f0d0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f0d4:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f0d8:	2101      	movs	r1, #1
    f0da:	f000 0007 	and.w	r0, r0, #7
    f0de:	f003 fe36 	bl	12d4e <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f0e2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    f0e6:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    f0ea:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    f0ee:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    f0f0:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    f0f2:	4405      	add	r5, r0
	switch (phy) {
    f0f4:	d013      	beq.n	f11e <isr+0x1e6>
		return 40;
    f0f6:	2b04      	cmp	r3, #4
    f0f8:	bf0c      	ite	eq
    f0fa:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    f0fe:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f100:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    f102:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    f106:	09c1      	lsrs	r1, r0, #7
    f108:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    f10c:	f003 fe1b 	bl	12d46 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f110:	1a28      	subs	r0, r5, r0
    f112:	f003 ffad 	bl	13070 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    f116:	2001      	movs	r0, #1
    f118:	f7fc faf6 	bl	b708 <packet_tx_enqueue>
    f11c:	e7b8      	b.n	f090 <isr+0x158>
		return 24;
    f11e:	2018      	movs	r0, #24
    f120:	e7ee      	b.n	f100 <isr+0x1c8>
		LL_ASSERT(0);
    f122:	4b4c      	ldr	r3, [pc, #304]	; (f254 <isr+0x31c>)
    f124:	9301      	str	r3, [sp, #4]
    f126:	9300      	str	r3, [sp, #0]
    f128:	4b4b      	ldr	r3, [pc, #300]	; (f258 <isr+0x320>)
    f12a:	681c      	ldr	r4, [r3, #0]
    f12c:	4b4b      	ldr	r3, [pc, #300]	; (f25c <isr+0x324>)
		LL_ASSERT(0);
    f12e:	4a4c      	ldr	r2, [pc, #304]	; (f260 <isr+0x328>)
    f130:	494c      	ldr	r1, [pc, #304]	; (f264 <isr+0x32c>)
    f132:	484e      	ldr	r0, [pc, #312]	; (f26c <isr+0x334>)
    f134:	e2bc      	b.n	f6b0 <isr+0x778>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    f136:	b926      	cbnz	r6, f142 <isr+0x20a>
		_radio.state = STATE_CLOSE;
    f138:	2303      	movs	r3, #3
    f13a:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f13c:	f003 fe18 	bl	12d70 <radio_disable>
    f140:	e7a6      	b.n	f090 <isr+0x158>
	switch (_radio.role) {
    f142:	7ce3      	ldrb	r3, [r4, #19]
    f144:	3b01      	subs	r3, #1
    f146:	2b03      	cmp	r3, #3
    f148:	f201 8160 	bhi.w	1040c <__kernel_ram_size+0x40c>
    f14c:	e8df f013 	tbh	[pc, r3, lsl #1]
    f150:	02b70004 	.word	0x02b70004
    f154:	05f905f9 	.word	0x05f905f9
		if (crc_ok) {
    f158:	2f00      	cmp	r7, #0
    f15a:	d0ed      	beq.n	f138 <isr+0x200>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    f15c:	f1ba 0f00 	cmp.w	sl, #0
    f160:	d039      	beq.n	f1d6 <isr+0x29e>
    f162:	4658      	mov	r0, fp
    f164:	f002 feb8 	bl	11ed8 <ctrl_rl_irk_idx>
    f168:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    f16c:	f003 fe56 	bl	12e1c <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    f170:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    f174:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    f176:	232b      	movs	r3, #43	; 0x2b
    f178:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    f17a:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    f17c:	fb11 3302 	smlabb	r3, r1, r2, r3
    f180:	930a      	str	r3, [sp, #40]	; 0x28
    f182:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    f184:	f000 030f 	and.w	r3, r0, #15
    f188:	2b03      	cmp	r3, #3
    f18a:	d10a      	bne.n	f1a2 <isr+0x26a>
    f18c:	7873      	ldrb	r3, [r6, #1]
    f18e:	2b0c      	cmp	r3, #12
    f190:	d107      	bne.n	f1a2 <isr+0x26a>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    f192:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f196:	065f      	lsls	r7, r3, #25
    f198:	d51f      	bpl.n	f1da <isr+0x2a2>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    f19a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    f19e:	0658      	lsls	r0, r3, #25
    f1a0:	d44b      	bmi.n	f23a <isr+0x302>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    f1a2:	7830      	ldrb	r0, [r6, #0]
    f1a4:	f000 030f 	and.w	r3, r0, #15
    f1a8:	2b05      	cmp	r3, #5
    f1aa:	d1c5      	bne.n	f138 <isr+0x200>
    f1ac:	7873      	ldrb	r3, [r6, #1]
    f1ae:	2b22      	cmp	r3, #34	; 0x22
    f1b0:	d1c2      	bne.n	f138 <isr+0x200>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    f1b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f1b4:	5ce3      	ldrb	r3, [r4, r3]
    f1b6:	f003 030f 	and.w	r3, r3, #15
    f1ba:	2b01      	cmp	r3, #1
    f1bc:	f040 8155 	bne.w	f46a <isr+0x532>
					    ci->connect_ind.init_addr,
    f1c0:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    f1c2:	aa10      	add	r2, sp, #64	; 0x40
    f1c4:	4639      	mov	r1, r7
    f1c6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f1ca:	f003 f88b 	bl	122e4 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    f1ce:	2800      	cmp	r0, #0
    f1d0:	d150      	bne.n	f274 <isr+0x33c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f1d2:	2000      	movs	r0, #0
    f1d4:	e05e      	b.n	f294 <isr+0x35c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    f1d6:	20ff      	movs	r0, #255	; 0xff
    f1d8:	e7c6      	b.n	f168 <isr+0x230>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    f1da:	aa10      	add	r2, sp, #64	; 0x40
    f1dc:	1cb1      	adds	r1, r6, #2
    f1de:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f1e2:	f003 f87f 	bl	122e4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    f1e6:	2800      	cmp	r0, #0
    f1e8:	d0d7      	beq.n	f19a <isr+0x262>
	return (adv->tx_addr == sr->rx_addr) &&
    f1ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f1ec:	7832      	ldrb	r2, [r6, #0]
    f1ee:	5ce3      	ldrb	r3, [r4, r3]
    f1f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f1f4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f1f8:	d1d3      	bne.n	f1a2 <isr+0x26a>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    f1fa:	2206      	movs	r2, #6
    f1fc:	f106 0108 	add.w	r1, r6, #8
    f200:	1ca8      	adds	r0, r5, #2
    f202:	f7f2 fd0c 	bl	1c1e <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    f206:	2800      	cmp	r0, #0
    f208:	d1cb      	bne.n	f1a2 <isr+0x26a>
		_radio.state = STATE_CLOSE;
    f20a:	2303      	movs	r3, #3
    f20c:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    f20e:	f003 fe1f 	bl	12e50 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    f212:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    f216:	2327      	movs	r3, #39	; 0x27
    f218:	fb03 4000 	mla	r0, r3, r0, r4
    f21c:	307b      	adds	r0, #123	; 0x7b
    f21e:	f003 fd87 	bl	12d30 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    f222:	f003 fdc3 	bl	12dac <radio_is_ready>
    f226:	2800      	cmp	r0, #0
    f228:	f43f af32 	beq.w	f090 <isr+0x158>
    f22c:	4b09      	ldr	r3, [pc, #36]	; (f254 <isr+0x31c>)
    f22e:	9301      	str	r3, [sp, #4]
    f230:	9300      	str	r3, [sp, #0]
    f232:	4b09      	ldr	r3, [pc, #36]	; (f258 <isr+0x320>)
    f234:	681c      	ldr	r4, [r3, #0]
    f236:	4b0e      	ldr	r3, [pc, #56]	; (f270 <isr+0x338>)
    f238:	e6de      	b.n	eff8 <isr+0xc0>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    f23a:	f1b9 0f00 	cmp.w	r9, #0
    f23e:	d1d4      	bne.n	f1ea <isr+0x2b2>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f240:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f244:	f002 fe94 	bl	11f70 <ctrl_irk_whitelisted>
    f248:	2800      	cmp	r0, #0
    f24a:	d1ce      	bne.n	f1ea <isr+0x2b2>
    f24c:	e7a9      	b.n	f1a2 <isr+0x26a>
    f24e:	bf00      	nop
    f250:	200008c0 	.word	0x200008c0
    f254:	00015359 	.word	0x00015359
    f258:	20003a5c 	.word	0x20003a5c
    f25c:	00017d7a 	.word	0x00017d7a
    f260:	00016754 	.word	0x00016754
    f264:	0001679c 	.word	0x0001679c
    f268:	00018440 	.word	0x00018440
    f26c:	000166c8 	.word	0x000166c8
    f270:	00017d8d 	.word	0x00017d8d
		       isr_adv_ci_adva_check(adv, ci) &&
    f274:	4631      	mov	r1, r6
    f276:	4628      	mov	r0, r5
    f278:	f7fb feb4 	bl	afe4 <isr_adv_ci_adva_check>
					    rl_idx) &&
    f27c:	2800      	cmp	r0, #0
    f27e:	d0a8      	beq.n	f1d2 <isr+0x29a>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    f280:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    f284:	2bff      	cmp	r3, #255	; 0xff
    f286:	f000 80dd 	beq.w	f444 <isr+0x50c>
		return rl_idx == _radio.advertiser.rl_idx;
    f28a:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    f28e:	1ac1      	subs	r1, r0, r3
    f290:	4248      	negs	r0, r1
    f292:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f294:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    f298:	2800      	cmp	r0, #0
    f29a:	f43f af4d 	beq.w	f138 <isr+0x200>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    f29e:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f2a2:	b133      	cbz	r3, f2b2 <isr+0x37a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    f2a4:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    f2a8:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f2ac:	429a      	cmp	r2, r3
    f2ae:	f47f af43 	bne.w	f138 <isr+0x200>
    f2b2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    f2b6:	2b00      	cmp	r3, #0
    f2b8:	f43f af3e 	beq.w	f138 <isr+0x200>
			node_rx = packet_rx_reserve_get(4);
    f2bc:	2004      	movs	r0, #4
    f2be:	f7fb f81b 	bl	a2f8 <packet_rx_reserve_get>
		if (!node_rx) {
    f2c2:	4607      	mov	r7, r0
    f2c4:	2800      	cmp	r0, #0
    f2c6:	f43f af37 	beq.w	f138 <isr+0x200>
		_radio.state = STATE_STOP;
    f2ca:	f04f 0904 	mov.w	r9, #4
    f2ce:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    f2d2:	f003 fd4d 	bl	12d70 <radio_disable>
		conn = _radio.advertiser.conn;
    f2d6:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f2da:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    f2de:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f2e0:	f44f 72aa 	mov.w	r2, #340	; 0x154
    f2e4:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    f2e6:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f2ea:	f7f8 f9f2 	bl	76d2 <mem_index_get>
		memcpy(&conn->access_addr[0],
    f2ee:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f2f2:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    f2f4:	2203      	movs	r2, #3
    f2f6:	f106 0112 	add.w	r1, r6, #18
    f2fa:	f105 0014 	add.w	r0, r5, #20
    f2fe:	f7f2 fca3 	bl	1c48 <memcpy>
		memcpy(&conn->data_chan_map[0],
    f302:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    f306:	464a      	mov	r2, r9
    f308:	f106 010e 	add.w	r1, r6, #14
    f30c:	4650      	mov	r0, sl
    f30e:	f7f2 fc9b 	bl	1c48 <memcpy>
		memcpy(&conn->data_chan_map[0],
    f312:	2205      	movs	r2, #5
    f314:	f106 011e 	add.w	r1, r6, #30
    f318:	4640      	mov	r0, r8
    f31a:	f7f2 fc95 	bl	1c48 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    f31e:	2105      	movs	r1, #5
    f320:	4640      	mov	r0, r8
    f322:	f7f8 fb49 	bl	79b8 <util_ones_count_get>
		conn->data_chan_count =
    f326:	7f6b      	ldrb	r3, [r5, #29]
    f328:	f360 0305 	bfi	r3, r0, #0, #6
    f32c:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    f32e:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    f332:	f3c3 0304 	ubfx	r3, r3, #0, #5
    f336:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    f338:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    f33a:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    f33c:	f240 48e2 	movw	r8, #1250	; 0x4e2
    f340:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    f344:	7ef2      	ldrb	r2, [r6, #27]
    f346:	7eb3      	ldrb	r3, [r6, #26]
    f348:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    f34c:	4651      	mov	r1, sl
    f34e:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    f350:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    f352:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    f356:	f7f2 fc77 	bl	1c48 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    f35a:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f35c:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    f35e:	f242 7210 	movw	r2, #10000	; 0x2710
    f362:	fb02 8303 	mla	r3, r2, r3, r8
    f366:	3b01      	subs	r3, #1
    f368:	fbb3 f3f8 	udiv	r3, r3, r8
    f36c:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    f36e:	4b55      	ldr	r3, [pc, #340]	; (f4c4 <isr+0x58c>)
    f370:	4443      	add	r3, r8
    f372:	fbb3 f3f8 	udiv	r3, r3, r8
    f376:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    f37a:	4b53      	ldr	r3, [pc, #332]	; (f4c8 <isr+0x590>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f37c:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    f37e:	4443      	add	r3, r8
    f380:	fbb3 f3f8 	udiv	r3, r3, r8
    f384:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f386:	4282      	cmp	r2, r0
    f388:	4613      	mov	r3, r2
    f38a:	bfc4      	itt	gt
    f38c:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    f390:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    f392:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f396:	bfc4      	itt	gt
    f398:	18d2      	addgt	r2, r2, r3
    f39a:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    f39c:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f39e:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    f3a2:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    f3a4:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    f3a6:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    f3a8:	2300      	movs	r3, #0
    f3aa:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    f3ac:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    f3ae:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    f3b2:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f3b4:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    f3b8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    f3bc:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f3be:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    f3c2:	464a      	mov	r2, r9
    f3c4:	f107 001b 	add.w	r0, r7, #27
    f3c8:	f7f2 fc3e 	bl	1c48 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    f3cc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f3d0:	f107 030e 	add.w	r3, r7, #14
    f3d4:	28ff      	cmp	r0, #255	; 0xff
    f3d6:	930b      	str	r3, [sp, #44]	; 0x2c
    f3d8:	f106 0a02 	add.w	sl, r6, #2
    f3dc:	f107 0b14 	add.w	fp, r7, #20
    f3e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f3e2:	d061      	beq.n	f4a8 <isr+0x570>
			ll_rl_id_addr_get(rl_idx,
    f3e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f3e6:	f107 010d 	add.w	r1, r7, #13
    f3ea:	f002 ff37 	bl	1225c <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    f3ee:	7b7b      	ldrb	r3, [r7, #13]
    f3f0:	3302      	adds	r3, #2
    f3f2:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    f3f4:	464a      	mov	r2, r9
    f3f6:	4651      	mov	r1, sl
    f3f8:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f3fa:	f7f2 fc25 	bl	1c48 <memcpy>
			pdu_adv->connect_ind.interval;
    f3fe:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    f400:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    f404:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    f406:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    f40a:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    f40c:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    f410:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    f414:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    f418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    f41c:	8c28      	ldrh	r0, [r5, #32]
    f41e:	f7fb feff 	bl	b220 <rx_fc_lock>
		packet_rx_enqueue();
    f422:	f7fb fe03 	bl	b02c <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    f426:	2003      	movs	r0, #3
    f428:	f7fa ff66 	bl	a2f8 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    f42c:	2800      	cmp	r0, #0
    f42e:	d159      	bne.n	f4e4 <isr+0x5ac>
    f430:	4b26      	ldr	r3, [pc, #152]	; (f4cc <isr+0x594>)
    f432:	9301      	str	r3, [sp, #4]
    f434:	9300      	str	r3, [sp, #0]
    f436:	4b26      	ldr	r3, [pc, #152]	; (f4d0 <isr+0x598>)
    f438:	681c      	ldr	r4, [r3, #0]
    f43a:	4b26      	ldr	r3, [pc, #152]	; (f4d4 <isr+0x59c>)
			LL_ASSERT(node_rx);
    f43c:	4a26      	ldr	r2, [pc, #152]	; (f4d8 <isr+0x5a0>)
    f43e:	4927      	ldr	r1, [pc, #156]	; (f4dc <isr+0x5a4>)
    f440:	4827      	ldr	r0, [pc, #156]	; (f4e0 <isr+0x5a8>)
    f442:	e135      	b.n	f6b0 <isr+0x778>
	return (adv->rx_addr == ci->tx_addr) &&
    f444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f446:	5ce2      	ldrb	r2, [r4, r3]
    f448:	7833      	ldrb	r3, [r6, #0]
    f44a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f44e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f452:	f47f aebe 	bne.w	f1d2 <isr+0x29a>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    f456:	2206      	movs	r2, #6
    f458:	4639      	mov	r1, r7
    f45a:	f105 0008 	add.w	r0, r5, #8
    f45e:	f7f2 fbde 	bl	1c1e <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    f462:	fab0 f080 	clz	r0, r0
    f466:	0940      	lsrs	r0, r0, #5
    f468:	e714      	b.n	f294 <isr+0x35c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    f46a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f46e:	09db      	lsrs	r3, r3, #7
    f470:	d00d      	beq.n	f48e <isr+0x556>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    f472:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    f476:	09db      	lsrs	r3, r3, #7
    f478:	f43f aeab 	beq.w	f1d2 <isr+0x29a>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    f47c:	f1b9 0f00 	cmp.w	r9, #0
    f480:	d10d      	bne.n	f49e <isr+0x566>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f482:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f486:	f002 fd73 	bl	11f70 <ctrl_irk_whitelisted>
    f48a:	b940      	cbnz	r0, f49e <isr+0x566>
    f48c:	e6a1      	b.n	f1d2 <isr+0x29a>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    f48e:	aa10      	add	r2, sp, #64	; 0x40
    f490:	1cb1      	adds	r1, r6, #2
    f492:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f496:	f002 ff25 	bl	122e4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    f49a:	2800      	cmp	r0, #0
    f49c:	d0e9      	beq.n	f472 <isr+0x53a>
	       isr_adv_ci_adva_check(adv, ci);
    f49e:	4631      	mov	r1, r6
    f4a0:	4628      	mov	r0, r5
    f4a2:	f7fb fd9f 	bl	afe4 <isr_adv_ci_adva_check>
    f4a6:	e6f5      	b.n	f294 <isr+0x35c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    f4a8:	4619      	mov	r1, r3
    f4aa:	464a      	mov	r2, r9
    f4ac:	4658      	mov	r0, fp
    f4ae:	f7f2 fbf7 	bl	1ca0 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    f4b2:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f4b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    f4b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f4ba:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f4bc:	464a      	mov	r2, r9
    f4be:	4651      	mov	r1, sl
    f4c0:	e79b      	b.n	f3fa <isr+0x4c2>
    f4c2:	bf00      	nop
    f4c4:	026259ff 	.word	0x026259ff
    f4c8:	01c9c37f 	.word	0x01c9c37f
    f4cc:	00015359 	.word	0x00015359
    f4d0:	20003a5c 	.word	0x20003a5c
    f4d4:	00017d8d 	.word	0x00017d8d
    f4d8:	00016754 	.word	0x00016754
    f4dc:	0001679c 	.word	0x0001679c
    f4e0:	00018877 	.word	0x00018877
			node_rx->hdr.handle = conn->handle;
    f4e4:	8c2b      	ldrh	r3, [r5, #32]
    f4e6:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    f4e8:	230b      	movs	r3, #11
    f4ea:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    f4ec:	7833      	ldrb	r3, [r6, #0]
    f4ee:	f013 0320 	ands.w	r3, r3, #32
    f4f2:	d00e      	beq.n	f512 <isr+0x5da>
					((u16_t)conn->access_addr[1] << 8) |
    f4f4:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    f4f6:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    f4f8:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    f4fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    f4fe:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    f500:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    f504:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    f506:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    f508:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    f50c:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    f50e:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    f510:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    f512:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    f514:	f7fb fd8a 	bl	b02c <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    f518:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    f51c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    f520:	497f      	ldr	r1, [pc, #508]	; (f720 <isr+0x7e8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    f522:	0952      	lsrs	r2, r2, #5
    f524:	f362 0384 	bfi	r3, r2, #2, #3
    f528:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    f52c:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    f530:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    f534:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    f538:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    f53a:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    f53e:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    f542:	4a78      	ldr	r2, [pc, #480]	; (f724 <isr+0x7ec>)
    f544:	f203 233f 	addw	r3, r3, #575	; 0x23f
    f548:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    f54c:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    f54e:	ea4f 0358 	mov.w	r3, r8, lsr #1
    f552:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    f554:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    f556:	7d73      	ldrb	r3, [r6, #21]
    f558:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    f55c:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    f55e:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    f562:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    f564:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    f566:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    f568:	4638      	mov	r0, r7
    f56a:	f003 fbee 	bl	12d4a <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    f56e:	496e      	ldr	r1, [pc, #440]	; (f728 <isr+0x7f0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    f570:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    f572:	f200 4052 	addw	r0, r0, #1106	; 0x452
    f576:	a368      	add	r3, pc, #416	; (adr r3, f718 <isr+0x7e0>)
    f578:	e9d3 2300 	ldrd	r2, r3, [r3]
    f57c:	fba0 0101 	umull	r0, r1, r0, r1
    f580:	f7f0 fe48 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f584:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    f588:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    f58a:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f58c:	4293      	cmp	r3, r2
    f58e:	bf38      	it	cc
    f590:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    f592:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f596:	469a      	mov	sl, r3
		conn_interval_us -=
    f598:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    f59a:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    f59c:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    f59e:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    f5a0:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    f5a4:	f003 fdc8 	bl	13138 <radio_tmr_end_get>
    f5a8:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    f5aa:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    f5ac:	4639      	mov	r1, r7
		conn_offset_us +=
    f5ae:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    f5b2:	4638      	mov	r0, r7
    f5b4:	f003 fbc7 	bl	12d46 <radio_tx_chain_delay_get>
    f5b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5ba:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    f5be:	4499      	add	r9, r3
    f5c0:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    f5c4:	eba9 030b 	sub.w	r3, r9, fp
    f5c8:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f5ca:	f240 4383 	movw	r3, #1155	; 0x483
    f5ce:	9300      	str	r3, [sp, #0]
    f5d0:	2205      	movs	r2, #5
    f5d2:	4b56      	ldr	r3, [pc, #344]	; (f72c <isr+0x7f4>)
    f5d4:	f8df b150 	ldr.w	fp, [pc, #336]	; f728 <isr+0x7f0>
    f5d8:	4639      	mov	r1, r7
    f5da:	4638      	mov	r0, r7
    f5dc:	f7f8 ff6a 	bl	84b4 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    f5e0:	f240 4184 	movw	r1, #1156	; 0x484
    f5e4:	f7fb fe56 	bl	b294 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    f5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f5ea:	5ce3      	ldrb	r3, [r4, r3]
    f5ec:	f003 030f 	and.w	r3, r3, #15
    f5f0:	2b01      	cmp	r3, #1
    f5f2:	d106      	bne.n	f602 <isr+0x6ca>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f5f4:	9700      	str	r7, [sp, #0]
    f5f6:	463b      	mov	r3, r7
    f5f8:	2203      	movs	r2, #3
    f5fa:	4639      	mov	r1, r7
    f5fc:	4638      	mov	r0, r7
    f5fe:	f7f8 ff59 	bl	84b4 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f602:	fba8 890b 	umull	r8, r9, r8, fp
    f606:	a344      	add	r3, pc, #272	; (adr r3, f718 <isr+0x7e0>)
    f608:	e9d3 2300 	ldrd	r2, r3, [r3]
    f60c:	4640      	mov	r0, r8
    f60e:	4649      	mov	r1, r9
    f610:	f7f0 fe00 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f614:	f895 3020 	ldrb.w	r3, [r5, #32]
    f618:	68a4      	ldr	r4, [r4, #8]
    f61a:	9506      	str	r5, [sp, #24]
    f61c:	3307      	adds	r3, #7
    f61e:	b2db      	uxtb	r3, r3
    f620:	930a      	str	r3, [sp, #40]	; 0x28
    f622:	f240 439b 	movw	r3, #1179	; 0x49b
    f626:	9308      	str	r3, [sp, #32]
    f628:	4b41      	ldr	r3, [pc, #260]	; (f730 <isr+0x7f8>)
    f62a:	9307      	str	r3, [sp, #28]
    f62c:	4b41      	ldr	r3, [pc, #260]	; (f734 <isr+0x7fc>)
    f62e:	9305      	str	r3, [sp, #20]
    f630:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f632:	4a41      	ldr	r2, [pc, #260]	; (f738 <isr+0x800>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f634:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f636:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f638:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f63a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f63e:	2307      	movs	r3, #7
    f640:	2100      	movs	r1, #0
    f642:	4343      	muls	r3, r0
    f644:	fb02 3301 	mla	r3, r2, r1, r3
    f648:	fba0 1202 	umull	r1, r2, r0, r2
    f64c:	441a      	add	r2, r3
    f64e:	4608      	mov	r0, r1
    f650:	ebb8 0000 	subs.w	r0, r8, r0
    f654:	4611      	mov	r1, r2
    f656:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f65a:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f65c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f660:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f662:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f664:	f7f0 fdd6 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f668:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f66a:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f66c:	a32a      	add	r3, pc, #168	; (adr r3, f718 <isr+0x7e0>)
    f66e:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f672:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f676:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f67a:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f67c:	f7f0 fdca 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f680:	eba4 040a 	sub.w	r4, r4, sl
    f684:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f688:	9000      	str	r0, [sp, #0]
    f68a:	4623      	mov	r3, r4
    f68c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f68e:	4629      	mov	r1, r5
    f690:	4628      	mov	r0, r5
    f692:	f7f8 fe71 	bl	8378 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f696:	f030 0302 	bics.w	r3, r0, #2
    f69a:	f43f acf9 	beq.w	f090 <isr+0x158>
    f69e:	4b27      	ldr	r3, [pc, #156]	; (f73c <isr+0x804>)
    f6a0:	9301      	str	r3, [sp, #4]
    f6a2:	9300      	str	r3, [sp, #0]
    f6a4:	4b26      	ldr	r3, [pc, #152]	; (f740 <isr+0x808>)
    f6a6:	681c      	ldr	r4, [r3, #0]
    f6a8:	4b26      	ldr	r3, [pc, #152]	; (f744 <isr+0x80c>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f6aa:	4a27      	ldr	r2, [pc, #156]	; (f748 <isr+0x810>)
    f6ac:	4927      	ldr	r1, [pc, #156]	; (f74c <isr+0x814>)
    f6ae:	4828      	ldr	r0, [pc, #160]	; (f750 <isr+0x818>)
		LL_ASSERT(0);
    f6b0:	47a0      	blx	r4
    f6b2:	4040      	eors	r0, r0
    f6b4:	f380 8811 	msr	BASEPRI, r0
    f6b8:	f04f 0004 	mov.w	r0, #4
    f6bc:	df02      	svc	2
		rl_idx = devmatch_ok ?
    f6be:	f1b9 0f00 	cmp.w	r9, #0
    f6c2:	d01c      	beq.n	f6fe <isr+0x7c6>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    f6c4:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    f6c8:	4641      	mov	r1, r8
    f6ca:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f6ce:	f002 fba7 	bl	11e20 <ctrl_rl_idx>
    f6d2:	4680      	mov	r8, r0
		if (crc_ok &&
    f6d4:	b147      	cbz	r7, f6e8 <isr+0x7b0>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f6d6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f6da:	06da      	lsls	r2, r3, #27
    f6dc:	d53a      	bpl.n	f754 <isr+0x81c>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f6de:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f6e2:	06db      	lsls	r3, r3, #27
    f6e4:	f100 8125 	bmi.w	f932 <isr+0x9fa>
			_radio.state = STATE_CLOSE;
    f6e8:	2303      	movs	r3, #3
    f6ea:	7523      	strb	r3, [r4, #20]
			radio_disable();
    f6ec:	f003 fb40 	bl	12d70 <radio_disable>
			_radio.scanner.state = 0;
    f6f0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    f6f4:	f36f 0341 	bfc	r3, #1, #1
    f6f8:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    f6fc:	e4c8      	b.n	f090 <isr+0x158>
		rl_idx = devmatch_ok ?
    f6fe:	f1ba 0f00 	cmp.w	sl, #0
    f702:	d003      	beq.n	f70c <isr+0x7d4>
    f704:	4658      	mov	r0, fp
    f706:	f002 fbe7 	bl	11ed8 <ctrl_rl_irk_idx>
    f70a:	e7e2      	b.n	f6d2 <isr+0x79a>
    f70c:	f04f 08ff 	mov.w	r8, #255	; 0xff
    f710:	e7e0      	b.n	f6d4 <isr+0x79c>
    f712:	bf00      	nop
    f714:	f3af 8000 	nop.w
    f718:	1afd498d 	.word	0x1afd498d
    f71c:	00000007 	.word	0x00000007
    f720:	00018430 	.word	0x00018430
    f724:	000f4240 	.word	0x000f4240
    f728:	3b9aca00 	.word	0x3b9aca00
    f72c:	0000b295 	.word	0x0000b295
    f730:	0000b255 	.word	0x0000b255
    f734:	0000d7ed 	.word	0x0000d7ed
    f738:	1afd498d 	.word	0x1afd498d
    f73c:	00015359 	.word	0x00015359
    f740:	20003a5c 	.word	0x20003a5c
    f744:	00017d8d 	.word	0x00017d8d
    f748:	00016754 	.word	0x00016754
    f74c:	0001679c 	.word	0x0001679c
    f750:	00018211 	.word	0x00018211
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f754:	f1b9 0f00 	cmp.w	r9, #0
    f758:	d005      	beq.n	f766 <isr+0x82e>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f75a:	4641      	mov	r1, r8
    f75c:	4650      	mov	r0, sl
    f75e:	f002 fd47 	bl	121f0 <ctrl_rl_idx_allowed>
    f762:	2800      	cmp	r0, #0
    f764:	d0bb      	beq.n	f6de <isr+0x7a6>
	bool dir_report = false;
    f766:	2300      	movs	r3, #0
    f768:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    f76c:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f770:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    f774:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    f778:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    f77c:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    f780:	2b00      	cmp	r3, #0
    f782:	f000 80ef 	beq.w	f964 <isr+0xa2c>
    f786:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f78a:	b133      	cbz	r3, f79a <isr+0x862>
				      (_radio.fc_req == _radio.fc_ack)) &&
    f78c:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    f790:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f794:	429a      	cmp	r2, r3
    f796:	f040 80e5 	bne.w	f964 <isr+0xa2c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    f79a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    f79e:	f3c3 1000 	ubfx	r0, r3, #4, #1
    f7a2:	2800      	cmp	r0, #0
    f7a4:	f000 80d0 	beq.w	f948 <isr+0xa10>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    f7a8:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    f7ac:	f010 000f 	ands.w	r0, r0, #15
    f7b0:	f040 814f 	bne.w	fa52 <isr+0xb1a>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    f7b4:	f003 fcc0 	bl	13138 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    f7b8:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    f7bc:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    f7c0:	48b9      	ldr	r0, [pc, #740]	; (faa8 <isr+0xb70>)
    f7c2:	2207      	movs	r2, #7
    f7c4:	fba3 0100 	umull	r0, r1, r3, r0
    f7c8:	fb02 1103 	mla	r1, r2, r3, r1
    f7cc:	a3b4      	add	r3, pc, #720	; (adr r3, faa0 <isr+0xb68>)
    f7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    f7d2:	f7f0 fd1f 	bl	214 <__aeabi_uldivmod>
    f7d6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    f7da:	4287      	cmp	r7, r0
    f7dc:	f080 80c2 	bcs.w	f964 <isr+0xa2c>
			node_rx = packet_rx_reserve_get(4);
    f7e0:	2004      	movs	r0, #4
    f7e2:	f7fa fd89 	bl	a2f8 <packet_rx_reserve_get>
		if (node_rx == 0) {
    f7e6:	4607      	mov	r7, r0
    f7e8:	2800      	cmp	r0, #0
    f7ea:	f43f af7d 	beq.w	f6e8 <isr+0x7b0>
		_radio.state = STATE_STOP;
    f7ee:	2304      	movs	r3, #4
    f7f0:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    f7f2:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    f7f4:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    f7f8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f7fc:	f003 fb0e 	bl	12e1c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    f800:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    f802:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    f806:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    f80a:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f80c:	f899 3008 	ldrb.w	r3, [r9, #8]
    f810:	7802      	ldrb	r2, [r0, #0]
    f812:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f816:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    f81a:	2322      	movs	r3, #34	; 0x22
    f81c:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f81e:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f820:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    f822:	4640      	mov	r0, r8
    f824:	f002 fade 	bl	11de4 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    f828:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    f82c:	4601      	mov	r1, r0
    f82e:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    f830:	f013 0f01 	tst.w	r3, #1
    f834:	f810 3b02 	ldrb.w	r3, [r0], #2
    f838:	f000 8116 	beq.w	fa68 <isr+0xb30>
    f83c:	2900      	cmp	r1, #0
    f83e:	f000 8113 	beq.w	fa68 <isr+0xb30>
			pdu_adv_tx->tx_addr = 1;
    f842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f846:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f848:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f84a:	f7f2 f9fd 	bl	1c48 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    f84e:	f105 0308 	add.w	r3, r5, #8
    f852:	4618      	mov	r0, r3
    f854:	2206      	movs	r2, #6
    f856:	f109 010a 	add.w	r1, r9, #10
    f85a:	930a      	str	r3, [sp, #40]	; 0x28
    f85c:	f7f2 f9f4 	bl	1c48 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    f860:	2204      	movs	r2, #4
    f862:	f106 0110 	add.w	r1, r6, #16
    f866:	f105 000e 	add.w	r0, r5, #14
    f86a:	f7f2 f9ed 	bl	1c48 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    f86e:	2203      	movs	r2, #3
    f870:	f106 0114 	add.w	r1, r6, #20
    f874:	f105 0012 	add.w	r0, r5, #18
    f878:	f7f2 f9e6 	bl	1c48 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    f87c:	2301      	movs	r3, #1
    f87e:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    f880:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    f884:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f888:	4353      	muls	r3, r2
    f88a:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    f88c:	f003 fc54 	bl	13138 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    f890:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    f892:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    f896:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    f898:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    f89c:	bfd8      	it	le
    f89e:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    f8a2:	f1bb 0f00 	cmp.w	fp, #0
    f8a6:	f040 80ea 	bne.w	fa7e <isr+0xb46>
			pdu_adv_tx->connect_ind.win_offset = 0;
    f8aa:	f885 b016 	strb.w	fp, [r5, #22]
    f8ae:	f885 b017 	strb.w	fp, [r5, #23]
    f8b2:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    f8b4:	2100      	movs	r1, #0
    f8b6:	4608      	mov	r0, r1
    f8b8:	f003 fa40 	bl	12d3c <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    f8bc:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    f8be:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    f8c2:	4608      	mov	r0, r1
    f8c4:	f003 fa3f 	bl	12d46 <radio_tx_chain_delay_get>
    f8c8:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    f8cc:	f100 031e 	add.w	r3, r0, #30
    f8d0:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    f8d2:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    f8d6:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    f8d8:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    f8dc:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    f8de:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    f8e2:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    f8e4:	f106 0117 	add.w	r1, r6, #23
    f8e8:	2205      	movs	r2, #5
    f8ea:	f105 001e 	add.w	r0, r5, #30
    f8ee:	f7f2 f9ab 	bl	1c48 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    f8f2:	7fb2      	ldrb	r2, [r6, #30]
    f8f4:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    f8f8:	f362 0304 	bfi	r3, r2, #0, #5
    f8fc:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    f900:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    f904:	f362 1347 	bfi	r3, r2, #5, #3
    f908:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    f90c:	f003 faa0 	bl	12e50 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    f910:	4628      	mov	r0, r5
    f912:	f003 fa0d 	bl	12d30 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    f916:	f003 fa49 	bl	12dac <radio_is_ready>
    f91a:	4683      	mov	fp, r0
    f91c:	2800      	cmp	r0, #0
    f91e:	f000 80cf 	beq.w	fac0 <isr+0xb88>
		LL_ASSERT(!radio_is_ready());
    f922:	4b62      	ldr	r3, [pc, #392]	; (faac <isr+0xb74>)
    f924:	9301      	str	r3, [sp, #4]
    f926:	9300      	str	r3, [sp, #0]
    f928:	4b61      	ldr	r3, [pc, #388]	; (fab0 <isr+0xb78>)
    f92a:	681c      	ldr	r4, [r3, #0]
    f92c:	4b61      	ldr	r3, [pc, #388]	; (fab4 <isr+0xb7c>)
    f92e:	f7ff bb63 	b.w	eff8 <isr+0xc0>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f932:	f1b9 0f00 	cmp.w	r9, #0
    f936:	f47f af16 	bne.w	f766 <isr+0x82e>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    f93a:	4640      	mov	r0, r8
    f93c:	f002 fb18 	bl	11f70 <ctrl_irk_whitelisted>
		if (crc_ok &&
    f940:	2800      	cmp	r0, #0
    f942:	f43f aed1 	beq.w	f6e8 <isr+0x7b0>
    f946:	e70e      	b.n	f766 <isr+0x82e>
	if (rl_idx != FILTER_IDX_NONE) {
    f948:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    f94c:	d06f      	beq.n	fa2e <isr+0xaf6>
		return (rl_idx == _radio.scanner.rl_idx);
    f94e:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    f952:	eba0 0e08 	sub.w	lr, r0, r8
    f956:	f1de 0000 	rsbs	r0, lr, #0
    f95a:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    f95e:	2800      	cmp	r0, #0
    f960:	f47f af22 	bne.w	f7a8 <isr+0x870>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f964:	f899 0008 	ldrb.w	r0, [r9, #8]
    f968:	f010 000f 	ands.w	r0, r0, #15
    f96c:	d002      	beq.n	f974 <isr+0xa3c>
    f96e:	2806      	cmp	r0, #6
    f970:	f040 81b1 	bne.w	fcd6 <isr+0xd9e>
		 (_radio.scanner.type != 0) &&
    f974:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    f978:	071f      	lsls	r7, r3, #28
    f97a:	f140 8196 	bpl.w	fcaa <isr+0xd72>
		 (_radio.scanner.type != 0) &&
    f97e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    f982:	2a00      	cmp	r2, #0
    f984:	f040 8191 	bne.w	fcaa <isr+0xd72>
		err = isr_rx_scan_report(rssi_ready,
    f988:	f1ba 0f00 	cmp.w	sl, #0
    f98c:	bf14      	ite	ne
    f98e:	4641      	movne	r1, r8
    f990:	21ff      	moveq	r1, #255	; 0xff
    f992:	4628      	mov	r0, r5
    f994:	f7fb fbe8 	bl	b168 <isr_rx_scan_report>
		if (err) {
    f998:	2800      	cmp	r0, #0
    f99a:	f47f aea5 	bne.w	f6e8 <isr+0x7b0>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f99e:	f003 fa3d 	bl	12e1c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    f9a2:	7803      	ldrb	r3, [r0, #0]
    f9a4:	2203      	movs	r2, #3
    f9a6:	f362 0303 	bfi	r3, r2, #0, #4
    f9aa:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f9ac:	f899 3008 	ldrb.w	r3, [r9, #8]
    f9b0:	7802      	ldrb	r2, [r0, #0]
    f9b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f9b6:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    f9ba:	230c      	movs	r3, #12
    f9bc:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f9be:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f9c0:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    f9c2:	4640      	mov	r0, r8
    f9c4:	f002 fa0e 	bl	11de4 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    f9c8:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    f9cc:	4601      	mov	r1, r0
    f9ce:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    f9d0:	f013 0f01 	tst.w	r3, #1
    f9d4:	f810 3b02 	ldrb.w	r3, [r0], #2
    f9d8:	f000 815e 	beq.w	fc98 <isr+0xd60>
    f9dc:	2900      	cmp	r1, #0
    f9de:	f000 815b 	beq.w	fc98 <isr+0xd60>
			pdu_adv_tx->tx_addr = 1;
    f9e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f9e6:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f9e8:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f9ea:	f7f2 f92d 	bl	1c48 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    f9ee:	2206      	movs	r2, #6
    f9f0:	f109 010a 	add.w	r1, r9, #10
    f9f4:	f105 0008 	add.w	r0, r5, #8
    f9f8:	f7f2 f926 	bl	1c48 <memcpy>
		_radio.scanner.state = 1;
    f9fc:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    fa00:	f043 0302 	orr.w	r3, r3, #2
    fa04:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    fa08:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    fa0a:	2302      	movs	r3, #2
    fa0c:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    fa0e:	f003 faa5 	bl	12f5c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    fa12:	2000      	movs	r0, #0
    fa14:	f003 fa06 	bl	12e24 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    fa18:	4628      	mov	r0, r5
    fa1a:	f003 f989 	bl	12d30 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    fa1e:	f003 fb79 	bl	13114 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    fa22:	f003 f9c3 	bl	12dac <radio_is_ready>
    fa26:	2800      	cmp	r0, #0
    fa28:	f43f ab32 	beq.w	f090 <isr+0x158>
    fa2c:	e779      	b.n	f922 <isr+0x9ea>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    fa2e:	f899 2008 	ldrb.w	r2, [r9, #8]
    fa32:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fa36:	f3c2 1280 	ubfx	r2, r2, #6, #1
    fa3a:	4293      	cmp	r3, r2
    fa3c:	d18f      	bne.n	f95e <isr+0xa26>
		(memcmp(&_radio.scanner.adv_addr[0],
    fa3e:	2206      	movs	r2, #6
    fa40:	f109 010a 	add.w	r1, r9, #10
    fa44:	481c      	ldr	r0, [pc, #112]	; (fab8 <isr+0xb80>)
    fa46:	f7f2 f8ea 	bl	1c1e <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    fa4a:	fab0 f080 	clz	r0, r0
    fa4e:	0940      	lsrs	r0, r0, #5
    fa50:	e785      	b.n	f95e <isr+0xa26>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    fa52:	2801      	cmp	r0, #1
    fa54:	d18b      	bne.n	f96e <isr+0xa36>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    fa56:	2300      	movs	r3, #0
    fa58:	4642      	mov	r2, r8
    fa5a:	4631      	mov	r1, r6
    fa5c:	f7fb fb38 	bl	b0d0 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    fa60:	2800      	cmp	r0, #0
    fa62:	f43f af7f 	beq.w	f964 <isr+0xa2c>
    fa66:	e6a5      	b.n	f7b4 <isr+0x87c>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    fa68:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    fa6c:	4913      	ldr	r1, [pc, #76]	; (fabc <isr+0xb84>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    fa6e:	09d2      	lsrs	r2, r2, #7
    fa70:	f362 1386 	bfi	r3, r2, #6, #1
    fa74:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    fa76:	2206      	movs	r2, #6
    fa78:	e6e7      	b.n	f84a <isr+0x912>
				conn_space_us += conn_interval_us;
    fa7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fa7c:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    fa7e:	f1bb 0f00 	cmp.w	fp, #0
    fa82:	dbfa      	blt.n	fa7a <isr+0xb42>
    fa84:	459b      	cmp	fp, r3
    fa86:	d3f8      	bcc.n	fa7a <isr+0xb42>
				(conn_space_us - conn_offset_us) / 1250;
    fa88:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    fa8c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    fa90:	fbb3 f3f2 	udiv	r3, r3, r2
    fa94:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    fa96:	7d6b      	ldrb	r3, [r5, #21]
    fa98:	3301      	adds	r3, #1
    fa9a:	756b      	strb	r3, [r5, #21]
    fa9c:	e70a      	b.n	f8b4 <isr+0x97c>
    fa9e:	bf00      	nop
    faa0:	3b9aca00 	.word	0x3b9aca00
    faa4:	00000000 	.word	0x00000000
    faa8:	1afd498d 	.word	0x1afd498d
    faac:	00015359 	.word	0x00015359
    fab0:	20003a5c 	.word	0x20003a5c
    fab4:	00017dab 	.word	0x00017dab
    fab8:	200009aa 	.word	0x200009aa
    fabc:	200009a4 	.word	0x200009a4
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    fac0:	f44f 72aa 	mov.w	r2, #340	; 0x154
    fac4:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    fac8:	4630      	mov	r0, r6
    faca:	f7f7 fe02 	bl	76d2 <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    face:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    fad0:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    fad2:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    fad6:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    fada:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    fade:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    fae0:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    fae4:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    fae6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    faea:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    faec:	2206      	movs	r2, #6
    faee:	f107 001b 	add.w	r0, r7, #27
    faf2:	f7f2 f8a9 	bl	1c48 <memcpy>
    faf6:	f107 0b0e 	add.w	fp, r7, #14
    fafa:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    fafe:	f1ba 0f00 	cmp.w	sl, #0
    fb02:	d034      	beq.n	fb6e <isr+0xc36>
    fb04:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    fb08:	d031      	beq.n	fb6e <isr+0xc36>
			ll_rl_id_addr_get(rl_idx,
    fb0a:	465a      	mov	r2, fp
    fb0c:	f107 010d 	add.w	r1, r7, #13
    fb10:	4640      	mov	r0, r8
    fb12:	930d      	str	r3, [sp, #52]	; 0x34
    fb14:	f002 fba2 	bl	1225c <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    fb18:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    fb1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fb1c:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    fb1e:	3202      	adds	r2, #2
    fb20:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    fb22:	4618      	mov	r0, r3
    fb24:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fb26:	f7f2 f88f 	bl	1c48 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    fb2a:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    fb2e:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    fb32:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    fb36:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    fb3a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    fb3e:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    fb42:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    fb46:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    fb4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    fb4e:	8c30      	ldrh	r0, [r6, #32]
    fb50:	f7fb fb66 	bl	b220 <rx_fc_lock>
		packet_rx_enqueue();
    fb54:	f7fb fa6a 	bl	b02c <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    fb58:	2003      	movs	r0, #3
    fb5a:	f7fa fbcd 	bl	a2f8 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    fb5e:	b998      	cbnz	r0, fb88 <isr+0xc50>
    fb60:	4bbd      	ldr	r3, [pc, #756]	; (fe58 <isr+0xf20>)
    fb62:	9301      	str	r3, [sp, #4]
    fb64:	9300      	str	r3, [sp, #0]
    fb66:	4bbd      	ldr	r3, [pc, #756]	; (fe5c <isr+0xf24>)
    fb68:	681c      	ldr	r4, [r3, #0]
    fb6a:	4bbd      	ldr	r3, [pc, #756]	; (fe60 <isr+0xf28>)
    fb6c:	e466      	b.n	f43c <isr+0x504>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    fb6e:	2206      	movs	r2, #6
    fb70:	2100      	movs	r1, #0
    fb72:	4618      	mov	r0, r3
    fb74:	f7f2 f894 	bl	1ca0 <memset>
				pdu_adv_tx->rx_addr;
    fb78:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fb7a:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    fb7c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    fb80:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fb82:	2206      	movs	r2, #6
    fb84:	4658      	mov	r0, fp
    fb86:	e7ce      	b.n	fb26 <isr+0xbee>
			node_rx->hdr.handle = conn->handle;
    fb88:	8c33      	ldrh	r3, [r6, #32]
    fb8a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    fb8c:	230b      	movs	r3, #11
    fb8e:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    fb90:	f899 3008 	ldrb.w	r3, [r9, #8]
    fb94:	f013 0320 	ands.w	r3, r3, #32
    fb98:	d00e      	beq.n	fbb8 <isr+0xc80>
					((u16_t)conn->access_addr[1] << 8) |
    fb9a:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    fb9c:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    fb9e:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    fba0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    fba4:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    fba6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    fbaa:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    fbac:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    fbae:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    fbb2:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    fbb4:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    fbb6:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    fbb8:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    fbba:	f7fb fa37 	bl	b02c <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    fbbe:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    fbc0:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    fbc4:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    fbc6:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    fbca:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    fbcc:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fbce:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    fbd2:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    fbd4:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fbd6:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    fbda:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fbdc:	4629      	mov	r1, r5
    fbde:	9300      	str	r3, [sp, #0]
    fbe0:	4628      	mov	r0, r5
    fbe2:	4ba0      	ldr	r3, [pc, #640]	; (fe64 <isr+0xf2c>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    fbe4:	f8df a290 	ldr.w	sl, [pc, #656]	; fe78 <isr+0xf40>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    fbe8:	bf38      	it	cc
    fbea:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fbec:	f7f8 fc62 	bl	84b4 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    fbf0:	f240 6139 	movw	r1, #1593	; 0x639
    fbf4:	f7fb fb86 	bl	b304 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fbf8:	462b      	mov	r3, r5
    fbfa:	2204      	movs	r2, #4
    fbfc:	4629      	mov	r1, r5
    fbfe:	9500      	str	r5, [sp, #0]
    fc00:	4628      	mov	r0, r5
    fc02:	f7f8 fc57 	bl	84b4 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    fc06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fc08:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc0c:	68a3      	ldr	r3, [r4, #8]
    fc0e:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    fc12:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc14:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    fc18:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    fc1c:	9308      	str	r3, [sp, #32]
    fc1e:	4b92      	ldr	r3, [pc, #584]	; (fe68 <isr+0xf30>)
    fc20:	9307      	str	r3, [sp, #28]
    fc22:	4b92      	ldr	r3, [pc, #584]	; (fe6c <isr+0xf34>)
    fc24:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc26:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    fc28:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc2a:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    fc2c:	4640      	mov	r0, r8
    fc2e:	a388      	add	r3, pc, #544	; (adr r3, fe50 <isr+0xf18>)
    fc30:	e9d3 2300 	ldrd	r2, r3, [r3]
    fc34:	4649      	mov	r1, r9
		ticker_status =
    fc36:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    fc38:	f7f0 faec 	bl	214 <__aeabi_uldivmod>
    fc3c:	4610      	mov	r0, r2
    fc3e:	4619      	mov	r1, r3
    fc40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fc44:	2300      	movs	r3, #0
    fc46:	f7f0 fae5 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    fc4a:	a381      	add	r3, pc, #516	; (adr r3, fe50 <isr+0xf18>)
    fc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc50:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    fc52:	4649      	mov	r1, r9
    fc54:	4640      	mov	r0, r8
    fc56:	f7f0 fadd 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    fc5a:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    fc5c:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    fc5e:	a37c      	add	r3, pc, #496	; (adr r3, fe50 <isr+0xf18>)
    fc60:	e9d3 2300 	ldrd	r2, r3, [r3]
    fc64:	fba1 010a 	umull	r0, r1, r1, sl
    fc68:	f7f0 fad4 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc6c:	3407      	adds	r4, #7
    fc6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    fc72:	b2e4      	uxtb	r4, r4
    fc74:	9000      	str	r0, [sp, #0]
    fc76:	465b      	mov	r3, fp
    fc78:	4622      	mov	r2, r4
    fc7a:	4629      	mov	r1, r5
    fc7c:	4628      	mov	r0, r5
    fc7e:	f7f8 fb7b 	bl	8378 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fc82:	f030 0302 	bics.w	r3, r0, #2
    fc86:	f43f aa03 	beq.w	f090 <isr+0x158>
    fc8a:	4b73      	ldr	r3, [pc, #460]	; (fe58 <isr+0xf20>)
    fc8c:	9301      	str	r3, [sp, #4]
    fc8e:	9300      	str	r3, [sp, #0]
    fc90:	4b72      	ldr	r3, [pc, #456]	; (fe5c <isr+0xf24>)
    fc92:	681c      	ldr	r4, [r3, #0]
    fc94:	4b72      	ldr	r3, [pc, #456]	; (fe60 <isr+0xf28>)
    fc96:	e508      	b.n	f6aa <isr+0x772>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    fc98:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    fc9c:	4974      	ldr	r1, [pc, #464]	; (fe70 <isr+0xf38>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    fc9e:	09d2      	lsrs	r2, r2, #7
    fca0:	f362 1386 	bfi	r3, r2, #6, #1
    fca4:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    fca6:	2206      	movs	r2, #6
    fca8:	e69f      	b.n	f9ea <isr+0xab2>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    fcaa:	b9a0      	cbnz	r0, fcd6 <isr+0xd9e>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    fcac:	f899 3009 	ldrb.w	r3, [r9, #9]
    fcb0:	2b00      	cmp	r3, #0
    fcb2:	f43f ad19 	beq.w	f6e8 <isr+0x7b0>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    fcb6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    fcba:	2b00      	cmp	r3, #0
    fcbc:	f47f ad14 	bne.w	f6e8 <isr+0x7b0>
		err = isr_rx_scan_report(rssi_ready,
    fcc0:	f1ba 0f00 	cmp.w	sl, #0
    fcc4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    fcc8:	bf14      	ite	ne
    fcca:	4641      	movne	r1, r8
    fccc:	21ff      	moveq	r1, #255	; 0xff
    fcce:	4628      	mov	r0, r5
    fcd0:	f7fb fa4a 	bl	b168 <isr_rx_scan_report>
    fcd4:	e508      	b.n	f6e8 <isr+0x7b0>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    fcd6:	2801      	cmp	r0, #1
    fcd8:	d00e      	beq.n	fcf8 <isr+0xdc0>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    fcda:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
    fcde:	f003 020b 	and.w	r2, r3, #11
    fce2:	2a02      	cmp	r2, #2
    fce4:	d0e2      	beq.n	fcac <isr+0xd74>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    fce6:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    fcea:	2b07      	cmp	r3, #7
    fcec:	d10d      	bne.n	fd0a <isr+0xdd2>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    fcee:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    fcf2:	0758      	lsls	r0, r3, #29
    fcf4:	d1da      	bne.n	fcac <isr+0xd74>
    fcf6:	e4f7      	b.n	f6e8 <isr+0x7b0>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    fcf8:	ab10      	add	r3, sp, #64	; 0x40
    fcfa:	4642      	mov	r2, r8
    fcfc:	4631      	mov	r1, r6
    fcfe:	2000      	movs	r0, #0
    fd00:	f7fb f9e6 	bl	b0d0 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    fd04:	2800      	cmp	r0, #0
    fd06:	d1d1      	bne.n	fcac <isr+0xd74>
    fd08:	e7e7      	b.n	fcda <isr+0xda2>
		   (_radio.scanner.phy)) ||
    fd0a:	2b04      	cmp	r3, #4
    fd0c:	f47f acec 	bne.w	f6e8 <isr+0x7b0>
		   (_radio.scanner.state != 0) &&
    fd10:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    fd14:	0799      	lsls	r1, r3, #30
    fd16:	f57f ace7 	bpl.w	f6e8 <isr+0x7b0>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    fd1a:	f003 f87f 	bl	12e1c <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    fd1e:	f899 3008 	ldrb.w	r3, [r9, #8]
    fd22:	7802      	ldrb	r2, [r0, #0]
    fd24:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fd28:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    fd2c:	f47f acdc 	bne.w	f6e8 <isr+0x7b0>
		(memcmp(&sreq->scan_req.adv_addr[0],
    fd30:	2206      	movs	r2, #6
    fd32:	f109 010a 	add.w	r1, r9, #10
    fd36:	3008      	adds	r0, #8
    fd38:	f7f1 ff71 	bl	1c1e <memcmp>
		   (_radio.scanner.state != 0) &&
    fd3c:	2800      	cmp	r0, #0
    fd3e:	d0b5      	beq.n	fcac <isr+0xd74>
    fd40:	e4d2      	b.n	f6e8 <isr+0x7b0>
	_radio.packet_counter++;
    fd42:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    fd46:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
    fd4a:	3301      	adds	r3, #1
    fd4c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
    fd50:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    fd52:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
    fd56:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    fd5a:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    fd5e:	2301      	movs	r3, #1
    fd60:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    fd64:	2f00      	cmp	r7, #0
    fd66:	f000 82dc 	beq.w	10322 <__kernel_ram_size+0x322>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    fd6a:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    fd6e:	f898 1008 	ldrb.w	r1, [r8, #8]
    fd72:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    fd76:	f3c1 0180 	ubfx	r1, r1, #2, #1
    fd7a:	f003 0201 	and.w	r2, r3, #1
    fd7e:	4291      	cmp	r1, r2
    fd80:	f000 81a2 	beq.w	100c8 <__kernel_ram_size+0xc8>
		_radio.conn_curr->sn++;
    fd84:	f082 0201 	eor.w	r2, r2, #1
    fd88:	f362 0300 	bfi	r3, r2, #0, #1
    fd8c:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    fd90:	7ce3      	ldrb	r3, [r4, #19]
    fd92:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    fd94:	bf02      	ittt	eq
    fd96:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    fd9a:	f043 0301 	orreq.w	r3, r3, #1
    fd9e:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    fda2:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    fda6:	061a      	lsls	r2, r3, #24
    fda8:	f100 8189 	bmi.w	100be <__kernel_ram_size+0xbe>
			node_tx = _radio.conn_curr->pkt_tx_head;
    fdac:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    fdb0:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    fdb4:	1d30      	adds	r0, r6, #4
    fdb6:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    fdba:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    fdbe:	f1b9 0f00 	cmp.w	r9, #0
    fdc2:	f000 80af 	beq.w	ff24 <isr+0xfec>
				if (_radio.conn_curr->enc_tx) {
    fdc6:	069b      	lsls	r3, r3, #26
    fdc8:	d50b      	bpl.n	fde2 <isr+0xeaa>
					_radio.conn_curr->ccm_tx.counter++;
    fdca:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    fdce:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    fdd2:	f11b 0201 	adds.w	r2, fp, #1
    fdd6:	f14c 0300 	adc.w	r3, ip, #0
    fdda:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    fdde:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    fde2:	5c43      	ldrb	r3, [r0, r1]
    fde4:	f003 0303 	and.w	r3, r3, #3
    fde8:	2b03      	cmp	r3, #3
    fdea:	f040 809b 	bne.w	ff24 <isr+0xfec>
	switch (pdu_data_tx->llctrl.opcode) {
    fdee:	f89a 3003 	ldrb.w	r3, [sl, #3]
    fdf2:	3b02      	subs	r3, #2
    fdf4:	2b16      	cmp	r3, #22
    fdf6:	f200 8095 	bhi.w	ff24 <isr+0xfec>
    fdfa:	e8df f013 	tbh	[pc, r3, lsl #1]
    fdfe:	0017      	.short	0x0017
    fe00:	00c90077 	.word	0x00c90077
    fe04:	00930093 	.word	0x00930093
    fe08:	00930093 	.word	0x00930093
    fe0c:	00950093 	.word	0x00950093
    fe10:	009300a0 	.word	0x009300a0
    fe14:	009300d0 	.word	0x009300d0
    fe18:	00930093 	.word	0x00930093
    fe1c:	00930093 	.word	0x00930093
    fe20:	00da0093 	.word	0x00da0093
    fe24:	00f20093 	.word	0x00f20093
    fe28:	012400f9 	.word	0x012400f9
		_radio.state = STATE_CLOSE;
    fe2c:	2303      	movs	r3, #3
    fe2e:	7523      	strb	r3, [r4, #20]
		radio_disable();
    fe30:	f002 ff9e 	bl	12d70 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    fe34:	f002 ffba 	bl	12dac <radio_is_ready>
    fe38:	b300      	cbz	r0, fe7c <isr+0xf44>
    fe3a:	4b07      	ldr	r3, [pc, #28]	; (fe58 <isr+0xf20>)
    fe3c:	9301      	str	r3, [sp, #4]
    fe3e:	9300      	str	r3, [sp, #0]
    fe40:	4b06      	ldr	r3, [pc, #24]	; (fe5c <isr+0xf24>)
    fe42:	681c      	ldr	r4, [r3, #0]
    fe44:	4b0b      	ldr	r3, [pc, #44]	; (fe74 <isr+0xf3c>)
    fe46:	f7ff b8d7 	b.w	eff8 <isr+0xc0>
    fe4a:	bf00      	nop
    fe4c:	f3af 8000 	nop.w
    fe50:	1afd498d 	.word	0x1afd498d
    fe54:	00000007 	.word	0x00000007
    fe58:	00015359 	.word	0x00015359
    fe5c:	20003a5c 	.word	0x20003a5c
    fe60:	00017dab 	.word	0x00017dab
    fe64:	0000b305 	.word	0x0000b305
    fe68:	0000b255 	.word	0x0000b255
    fe6c:	0000d7e9 	.word	0x0000d7e9
    fe70:	200009a4 	.word	0x200009a4
    fe74:	00017db7 	.word	0x00017db7
    fe78:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    fe7c:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    fe80:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fe84:	2913      	cmp	r1, #19
    fe86:	bf08      	it	eq
    fe88:	2116      	moveq	r1, #22
    fe8a:	f7fb fe4b 	bl	bb24 <terminate_ind_rx_enqueue>
		terminate = 1;
    fe8e:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    fe90:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fe94:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    fe98:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    fe9a:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    fe9e:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    fea2:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    fea4:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    fea8:	d11e      	bne.n	fee8 <isr+0xfb0>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    feaa:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    feae:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    feb2:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    feb4:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    feb6:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    feba:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    febe:	f040 80c9 	bne.w	10054 <__kernel_ram_size+0x54>
		if (node_tx) {
    fec2:	b18e      	cbz	r6, fee8 <isr+0xfb0>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    fec4:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    fec8:	f8d3 e000 	ldr.w	lr, [r3]
    fecc:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    fed0:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    fed2:	bf06      	itte	eq
    fed4:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    fed8:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    fedc:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    fee0:	49cf      	ldr	r1, [pc, #828]	; (10220 <__kernel_ram_size+0x220>)
    fee2:	4630      	mov	r0, r6
    fee4:	f7f7 fbd7 	bl	7696 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    fee8:	2600      	movs	r6, #0
    feea:	e0bc      	b.n	10066 <__kernel_ram_size+0x66>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    feec:	2208      	movs	r2, #8
    feee:	f10a 010e 	add.w	r1, sl, #14
    fef2:	f105 0094 	add.w	r0, r5, #148	; 0x94
    fef6:	f7f1 fea7 	bl	1c48 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    fefa:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fefe:	2204      	movs	r2, #4
    ff00:	f10a 0116 	add.w	r1, sl, #22
    ff04:	f500 7089 	add.w	r0, r0, #274	; 0x112
    ff08:	f7f1 fe9e 	bl	1c48 <memcpy>
		_radio.conn_curr->pause_tx = 1;
    ff0c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    ff10:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    ff14:	f042 0208 	orr.w	r2, r2, #8
    ff18:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    ff1c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    ff20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    ff24:	2500      	movs	r5, #0
    ff26:	e7b3      	b.n	fe90 <isr+0xf58>
		_radio.conn_curr->pause_tx = 1;
    ff28:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    ff2c:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    ff30:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    ff34:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    ff38:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    ff3c:	e7f2      	b.n	ff24 <isr+0xfec>
		if (_radio.role == ROLE_MASTER) {
    ff3e:	f894 a013 	ldrb.w	sl, [r4, #19]
    ff42:	fa5f fa8a 	uxtb.w	sl, sl
    ff46:	f1ba 0f04 	cmp.w	sl, #4
    ff4a:	d121      	bne.n	ff90 <isr+0x1058>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ff4c:	7933      	ldrb	r3, [r6, #4]
    ff4e:	f043 0303 	orr.w	r3, r3, #3
    ff52:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    ff54:	2317      	movs	r3, #23
    ff56:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    ff58:	2303      	movs	r3, #3
    ff5a:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    ff5c:	2208      	movs	r2, #8
    ff5e:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    ff62:	3004      	adds	r0, #4
    ff64:	f7f1 fe70 	bl	1c48 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    ff68:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    ff6c:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    ff6e:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    ff72:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    ff74:	f106 0112 	add.w	r1, r6, #18
    ff78:	2208      	movs	r2, #8
    ff7a:	6860      	ldr	r0, [r4, #4]
    ff7c:	f003 ff32 	bl	13de4 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    ff80:	f106 011a 	add.w	r1, r6, #26
    ff84:	4652      	mov	r2, sl
    ff86:	6860      	ldr	r0, [r4, #4]
    ff88:	f003 ff2c 	bl	13de4 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
    ff8c:	2600      	movs	r6, #0
    ff8e:	e7c9      	b.n	ff24 <isr+0xfec>
			_radio.conn_curr->pause_tx = 1;
    ff90:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    ff94:	f043 0308 	orr.w	r3, r3, #8
    ff98:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    ff9c:	e7c2      	b.n	ff24 <isr+0xfec>
		_radio.conn_curr->pause_rx = 0;
    ff9e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    ffa2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    ffa6:	f36f 03c3 	bfc	r3, #3, #1
    ffaa:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    ffae:	2300      	movs	r3, #0
    ffb0:	e7c2      	b.n	ff38 <isr+0x1000>
		if ((_radio.conn_curr->llcp_length.req !=
    ffb2:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    ffb6:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    ffba:	429a      	cmp	r2, r3
    ffbc:	d0b2      	beq.n	ff24 <isr+0xfec>
		    (_radio.conn_curr->llcp_length.state ==
    ffbe:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    ffc2:	f003 0203 	and.w	r2, r3, #3
    ffc6:	2a01      	cmp	r2, #1
    ffc8:	d1ac      	bne.n	ff24 <isr+0xfec>
			_radio.conn_curr->pause_tx = 1;
    ffca:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    ffce:	f042 0208 	orr.w	r2, r2, #8
    ffd2:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    ffd6:	2202      	movs	r2, #2
    ffd8:	f362 0301 	bfi	r3, r2, #0, #2
    ffdc:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    ffe0:	e7a0      	b.n	ff24 <isr+0xfec>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    ffe2:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    ffe6:	2202      	movs	r2, #2
    ffe8:	f362 0301 	bfi	r3, r2, #0, #2
    ffec:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    fff0:	7ce3      	ldrb	r3, [r4, #19]
    fff2:	2b03      	cmp	r3, #3
    fff4:	d196      	bne.n	ff24 <isr+0xfec>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    fff6:	2301      	movs	r3, #1
    fff8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    fffc:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   10000:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10004:	2202      	movs	r2, #2
   10006:	2304      	movs	r3, #4
   10008:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
   1000c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   10010:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
   10014:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
   10018:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   1001c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   10020:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
   10024:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   10028:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
   1002c:	f003 0307 	and.w	r3, r3, #7
   10030:	aa12      	add	r2, sp, #72	; 0x48
   10032:	4413      	add	r3, r2
   10034:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   10038:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
   1003c:	f363 0202 	bfi	r2, r3, #0, #3
   10040:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
   10044:	e76e      	b.n	ff24 <isr+0xfec>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   10046:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
   1004a:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   1004e:	f3c3 0382 	ubfx	r3, r3, #2, #3
   10052:	e7f3      	b.n	1003c <__kernel_ram_size+0x3c>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   10054:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   10058:	4293      	cmp	r3, r2
   1005a:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   1005c:	bf08      	it	eq
   1005e:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   10062:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
   10066:	b37d      	cbz	r5, 100c8 <__kernel_ram_size+0xc8>
		connection_release(_radio.conn_curr);
   10068:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1006c:	f7fb fb9a 	bl	b7a4 <connection_release>
		_radio.conn_curr = NULL;
   10070:	2300      	movs	r3, #0
   10072:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
   10076:	f003 f841 	bl	130fc <radio_tmr_aa_restore>
   1007a:	b918      	cbnz	r0, 10084 <__kernel_ram_size+0x84>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1007c:	f003 f832 	bl	130e4 <radio_tmr_aa_get>
   10080:	f003 f836 	bl	130f0 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
   10084:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10088:	2b00      	cmp	r3, #0
   1008a:	f43f a801 	beq.w	f090 <isr+0x158>
	if (tx_release) {
   1008e:	b11e      	cbz	r6, 10098 <__kernel_ram_size+0x98>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   10090:	4631      	mov	r1, r6
   10092:	8c18      	ldrh	r0, [r3, #32]
   10094:	f7fb faf8 	bl	b688 <pdu_node_tx_release>
	if (rx_enqueue) {
   10098:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   1009c:	2b00      	cmp	r3, #0
   1009e:	f43e aff7 	beq.w	f090 <isr+0x158>
		rx_fc_lock(_radio.conn_curr->handle);
   100a2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   100a6:	8c18      	ldrh	r0, [r3, #32]
   100a8:	f7fb f8ba 	bl	b220 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
   100ac:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   100b0:	8c1b      	ldrh	r3, [r3, #32]
   100b2:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
   100b6:	f7fa ffb9 	bl	b02c <packet_rx_enqueue>
   100ba:	f7fe bfe9 	b.w	f090 <isr+0x158>
			_radio.conn_curr->empty = 0;
   100be:	f36f 13c7 	bfc	r3, #7, #1
   100c2:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   100c6:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   100c8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   100cc:	f898 2008 	ldrb.w	r2, [r8, #8]
   100d0:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   100d4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   100d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
   100dc:	429a      	cmp	r2, r3
   100de:	f040 80ef 	bne.w	102c0 <__kernel_ram_size+0x2c0>
	    (packet_rx_reserve_get(3) != 0) &&
   100e2:	2003      	movs	r0, #3
   100e4:	f7fa f908 	bl	a2f8 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   100e8:	2800      	cmp	r0, #0
   100ea:	f000 80e9 	beq.w	102c0 <__kernel_ram_size+0x2c0>
	    (packet_rx_reserve_get(3) != 0) &&
   100ee:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   100f2:	b393      	cbz	r3, 1015a <__kernel_ram_size+0x15a>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   100f4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   100f8:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
   100fc:	4293      	cmp	r3, r2
   100fe:	d105      	bne.n	1010c <__kernel_ram_size+0x10c>
	      (_radio.fc_req == _radio.fc_ack)) ||
   10100:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   10104:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
   10108:	4291      	cmp	r1, r2
   1010a:	d026      	beq.n	1015a <__kernel_ram_size+0x15a>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1010c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
   10110:	4293      	cmp	r3, r2
   10112:	f000 80d5 	beq.w	102c0 <__kernel_ram_size+0x2c0>
	      (_radio.fc_req != _radio.fc_ack) &&
   10116:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1011a:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
   1011e:	429a      	cmp	r2, r3
   10120:	f000 80ce 	beq.w	102c0 <__kernel_ram_size+0x2c0>
		(((_radio.fc_req == 0) &&
   10124:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
   10128:	b933      	cbnz	r3, 10138 <__kernel_ram_size+0x138>
		   _radio.conn_curr->handle)) ||
   1012a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
   1012e:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
   10132:	8c1b      	ldrh	r3, [r3, #32]
   10134:	429a      	cmp	r2, r3
   10136:	d010      	beq.n	1015a <__kernel_ram_size+0x15a>
		 ((_radio.fc_req != 0) &&
   10138:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
   1013c:	2b00      	cmp	r3, #0
   1013e:	f000 80bf 	beq.w	102c0 <__kernel_ram_size+0x2c0>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   10142:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
   10146:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   1014a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
   1014e:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
   10152:	8c0b      	ldrh	r3, [r1, #32]
   10154:	429a      	cmp	r2, r3
   10156:	f040 80b3 	bne.w	102c0 <__kernel_ram_size+0x2c0>
		if (pdu_data_rx->len != 0) {
   1015a:	f898 5009 	ldrb.w	r5, [r8, #9]
   1015e:	2d00      	cmp	r5, #0
   10160:	f000 80b7 	beq.w	102d2 <__kernel_ram_size+0x2d2>
			if (_radio.conn_curr->enc_rx) {
   10164:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10168:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
   1016c:	f015 0510 	ands.w	r5, r5, #16
   10170:	d00e      	beq.n	10190 <__kernel_ram_size+0x190>
				done = radio_ccm_is_done();
   10172:	f003 f84f 	bl	13214 <radio_ccm_is_done>
				LL_ASSERT(done);
   10176:	b950      	cbnz	r0, 1018e <__kernel_ram_size+0x18e>
   10178:	4b2a      	ldr	r3, [pc, #168]	; (10224 <__kernel_ram_size+0x224>)
   1017a:	9301      	str	r3, [sp, #4]
   1017c:	9300      	str	r3, [sp, #0]
   1017e:	4b2a      	ldr	r3, [pc, #168]	; (10228 <__kernel_ram_size+0x228>)
   10180:	4a2a      	ldr	r2, [pc, #168]	; (1022c <__kernel_ram_size+0x22c>)
   10182:	681c      	ldr	r4, [r3, #0]
   10184:	492a      	ldr	r1, [pc, #168]	; (10230 <__kernel_ram_size+0x230>)
   10186:	4b2b      	ldr	r3, [pc, #172]	; (10234 <__kernel_ram_size+0x234>)
   10188:	482b      	ldr	r0, [pc, #172]	; (10238 <__kernel_ram_size+0x238>)
   1018a:	f7ff ba91 	b.w	f6b0 <isr+0x778>
				ccm_rx_increment = 1;
   1018e:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
   10190:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10194:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   10198:	06d9      	lsls	r1, r3, #27
   1019a:	d42c      	bmi.n	101f6 <__kernel_ram_size+0x1f6>
			    (_radio.conn_curr->pause_rx &&
   1019c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   101a0:	f898 3008 	ldrb.w	r3, [r8, #8]
   101a4:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   101a8:	f012 0f04 	tst.w	r2, #4
   101ac:	d146      	bne.n	1023c <__kernel_ram_size+0x23c>
			_radio.conn_curr->appto_expire = 0;
   101ae:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
   101b0:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
   101b4:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   101b8:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   101bc:	d004      	beq.n	101c8 <__kernel_ram_size+0x1c8>
   101be:	2b02      	cmp	r3, #2
   101c0:	d877      	bhi.n	102b2 <__kernel_ram_size+0x2b2>
				*rx_enqueue = 1;
   101c2:	2301      	movs	r3, #1
   101c4:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
   101c8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   101cc:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   101d0:	f082 0202 	eor.w	r2, r2, #2
   101d4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
   101d8:	2d00      	cmp	r5, #0
   101da:	d071      	beq.n	102c0 <__kernel_ram_size+0x2c0>
				_radio.conn_curr->ccm_rx.counter++;
   101dc:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
   101e0:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
   101e4:	f119 0001 	adds.w	r0, r9, #1
   101e8:	f14a 0100 	adc.w	r1, sl, #0
   101ec:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
   101f0:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
   101f4:	e064      	b.n	102c0 <__kernel_ram_size+0x2c0>
			     !radio_ccm_mic_is_valid()) ||
   101f6:	f003 f82b 	bl	13250 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   101fa:	2800      	cmp	r0, #0
   101fc:	d1ce      	bne.n	1019c <__kernel_ram_size+0x19c>
				_radio.state = STATE_CLOSE;
   101fe:	2303      	movs	r3, #3
   10200:	7523      	strb	r3, [r4, #20]
				radio_disable();
   10202:	f002 fdb5 	bl	12d70 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   10206:	f002 fdd1 	bl	12dac <radio_is_ready>
   1020a:	4605      	mov	r5, r0
   1020c:	2800      	cmp	r0, #0
   1020e:	d044      	beq.n	1029a <__kernel_ram_size+0x29a>
   10210:	4b04      	ldr	r3, [pc, #16]	; (10224 <__kernel_ram_size+0x224>)
   10212:	9301      	str	r3, [sp, #4]
   10214:	9300      	str	r3, [sp, #0]
   10216:	4b04      	ldr	r3, [pc, #16]	; (10228 <__kernel_ram_size+0x228>)
   10218:	681c      	ldr	r4, [r3, #0]
   1021a:	4b06      	ldr	r3, [pc, #24]	; (10234 <__kernel_ram_size+0x234>)
   1021c:	f7fe beec 	b.w	eff8 <isr+0xc0>
   10220:	20000a1c 	.word	0x20000a1c
   10224:	00015359 	.word	0x00015359
   10228:	20003a5c 	.word	0x20003a5c
   1022c:	00016754 	.word	0x00016754
   10230:	0001679c 	.word	0x0001679c
   10234:	00017e1b 	.word	0x00017e1b
   10238:	00018473 	.word	0x00018473
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1023c:	f003 0103 	and.w	r1, r3, #3
   10240:	2903      	cmp	r1, #3
   10242:	d1dc      	bne.n	101fe <__kernel_ram_size+0x1fe>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   10244:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
   10248:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   1024c:	f1be 0f00 	cmp.w	lr, #0
   10250:	f002 0240 	and.w	r2, r2, #64	; 0x40
   10254:	db15      	blt.n	10282 <__kernel_ram_size+0x282>
	       (!conn->role &&
   10256:	b922      	cbnz	r2, 10262 <__kernel_ram_size+0x262>
		((!conn->refresh &&
   10258:	2902      	cmp	r1, #2
   1025a:	d0a8      	beq.n	101ae <__kernel_ram_size+0x1ae>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1025c:	2911      	cmp	r1, #17
   1025e:	d8ce      	bhi.n	101fe <__kernel_ram_size+0x1fe>
   10260:	e009      	b.n	10276 <__kernel_ram_size+0x276>
		 (conn->refresh &&
   10262:	1e8a      	subs	r2, r1, #2
   10264:	b2d2      	uxtb	r2, r2
   10266:	2a09      	cmp	r2, #9
   10268:	d8f8      	bhi.n	1025c <__kernel_ram_size+0x25c>
   1026a:	f240 2e05 	movw	lr, #517	; 0x205
   1026e:	fa2e f202 	lsr.w	r2, lr, r2
   10272:	07d2      	lsls	r2, r2, #31
   10274:	d49b      	bmi.n	101ae <__kernel_ram_size+0x1ae>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10276:	4ab0      	ldr	r2, [pc, #704]	; (10538 <__kernel_ram_size+0x538>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10278:	fa22 f101 	lsr.w	r1, r2, r1
   1027c:	07ca      	lsls	r2, r1, #31
   1027e:	d5be      	bpl.n	101fe <__kernel_ram_size+0x1fe>
   10280:	e795      	b.n	101ae <__kernel_ram_size+0x1ae>
	       (conn->role &&
   10282:	b92a      	cbnz	r2, 10290 <__kernel_ram_size+0x290>
		((!conn->refresh &&
   10284:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   10286:	d092      	beq.n	101ae <__kernel_ram_size+0x1ae>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10288:	2911      	cmp	r1, #17
   1028a:	d8b8      	bhi.n	101fe <__kernel_ram_size+0x1fe>
   1028c:	4aab      	ldr	r2, [pc, #684]	; (1053c <__kernel_ram_size+0x53c>)
   1028e:	e7f3      	b.n	10278 <__kernel_ram_size+0x278>
		 (conn->refresh &&
   10290:	1e8a      	subs	r2, r1, #2
   10292:	2a01      	cmp	r2, #1
   10294:	d98b      	bls.n	101ae <__kernel_ram_size+0x1ae>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   10296:	290b      	cmp	r1, #11
   10298:	e7f5      	b.n	10286 <__kernel_ram_size+0x286>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   1029a:	213d      	movs	r1, #61	; 0x3d
   1029c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   102a0:	f7fb fc40 	bl	bb24 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   102a4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   102a8:	f7fb fa7c 	bl	b7a4 <connection_release>
				_radio.conn_curr = NULL;
   102ac:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   102b0:	e6e1      	b.n	10076 <__kernel_ram_size+0x76>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
   102b2:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
   102b6:	4640      	mov	r0, r8
   102b8:	f7fd fcfe 	bl	dcb8 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
   102bc:	2800      	cmp	r0, #0
   102be:	d083      	beq.n	101c8 <__kernel_ram_size+0x1c8>
		_radio.conn_curr->supervision_expire = 0;
   102c0:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
   102c4:	2300      	movs	r3, #0
   102c6:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
   102ca:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
   102cc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
   102d0:	e03e      	b.n	10350 <__kernel_ram_size+0x350>
		} else if ((_radio.conn_curr->enc_rx) ||
   102d2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   102d6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   102da:	f013 0f14 	tst.w	r3, #20
   102de:	f43f af73 	beq.w	101c8 <__kernel_ram_size+0x1c8>
					    (conn->latency + 6)) ?
   102e2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
   102e4:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
   102e8:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   102ea:	4299      	cmp	r1, r3
   102ec:	bfc4      	itt	gt
   102ee:	1f8b      	subgt	r3, r1, #6
   102f0:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   102f2:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
   102f6:	bfcc      	ite	gt
   102f8:	b29b      	uxthgt	r3, r3
   102fa:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   102fc:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
   102fe:	bf1e      	ittt	ne
   10300:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
   10304:	2300      	movne	r3, #0
   10306:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   1030a:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   1030e:	2b00      	cmp	r3, #0
   10310:	f47f af5a 	bne.w	101c8 <__kernel_ram_size+0x1c8>
				conn->appto_expire = conn->appto_reload;
   10314:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
   10318:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   1031c:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
   10320:	e752      	b.n	101c8 <__kernel_ram_size+0x1c8>
		if (_radio.crc_expire == 0) {
   10322:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   10326:	b913      	cbnz	r3, 1032e <__kernel_ram_size+0x32e>
			_radio.crc_expire = 2;
   10328:	2302      	movs	r3, #2
   1032a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
   1032e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
   10332:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
   10336:	3b01      	subs	r3, #1
   10338:	b2db      	uxtb	r3, r3
   1033a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
   1033e:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
   10342:	fab3 f583 	clz	r5, r3
   10346:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
   10348:	bb86      	cbnz	r6, 103ac <__kernel_ram_size+0x3ac>
			_radio.conn_curr->supervision_expire =
   1034a:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
   1034c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   10350:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   10354:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   10356:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   1035a:	f7fd fb67 	bl	da2c <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1035e:	7d23      	ldrb	r3, [r4, #20]
   10360:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   10362:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10366:	d010      	beq.n	1038a <__kernel_ram_size+0x38a>
   10368:	bb15      	cbnz	r5, 103b0 <__kernel_ram_size+0x3b0>
   1036a:	b137      	cbz	r7, 1037a <__kernel_ram_size+0x37a>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   1036c:	f898 3008 	ldrb.w	r3, [r8, #8]
   10370:	06d8      	lsls	r0, r3, #27
   10372:	d402      	bmi.n	1037a <__kernel_ram_size+0x37a>
			 (pdu_data_tx->len == 0)) ||
   10374:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
   10376:	785b      	ldrb	r3, [r3, #1]
   10378:	b1d3      	cbz	r3, 103b0 <__kernel_ram_size+0x3b0>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   1037a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
   1037e:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10382:	2b00      	cmp	r3, #0
   10384:	bf0c      	ite	eq
   10386:	2302      	moveq	r3, #2
   10388:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
   1038a:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1038c:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
   1038e:	d12f      	bne.n	103f0 <__kernel_ram_size+0x3f0>
		if (_radio.role == ROLE_MASTER) {
   10390:	7ce3      	ldrb	r3, [r4, #19]
   10392:	2b04      	cmp	r3, #4
   10394:	d10e      	bne.n	103b4 <__kernel_ram_size+0x3b4>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   10396:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1039a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1039e:	f369 12c7 	bfi	r2, r9, #7, #1
   103a2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   103a6:	f002 fce3 	bl	12d70 <radio_disable>
   103aa:	e664      	b.n	10076 <__kernel_ram_size+0x76>
	struct radio_pdu_node_tx *tx_release = NULL;
   103ac:	2600      	movs	r6, #0
   103ae:	e7cf      	b.n	10350 <__kernel_ram_size+0x350>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   103b0:	2303      	movs	r3, #3
   103b2:	e7ea      	b.n	1038a <__kernel_ram_size+0x38a>
			radio_switch_complete_and_disable();
   103b4:	f002 fd4c 	bl	12e50 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   103b8:	9910      	ldr	r1, [sp, #64]	; 0x40
   103ba:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   103be:	780b      	ldrb	r3, [r1, #0]
   103c0:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
   103c4:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   103c8:	f3c2 0240 	ubfx	r2, r2, #1, #1
   103cc:	f362 0382 	bfi	r3, r2, #2, #1
   103d0:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   103d2:	f7fa fb45 	bl	aa60 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   103d6:	f002 fce9 	bl	12dac <radio_is_ready>
   103da:	2800      	cmp	r0, #0
   103dc:	f43f ae4b 	beq.w	10076 <__kernel_ram_size+0x76>
   103e0:	4b57      	ldr	r3, [pc, #348]	; (10540 <__kernel_ram_size+0x540>)
   103e2:	9301      	str	r3, [sp, #4]
   103e4:	9300      	str	r3, [sp, #0]
   103e6:	4b57      	ldr	r3, [pc, #348]	; (10544 <__kernel_ram_size+0x544>)
   103e8:	681c      	ldr	r4, [r3, #0]
   103ea:	4b57      	ldr	r3, [pc, #348]	; (10548 <__kernel_ram_size+0x548>)
   103ec:	f7fe be04 	b.w	eff8 <isr+0xc0>
		radio_tmr_tifs_set(RADIO_TIFS);
   103f0:	2096      	movs	r0, #150	; 0x96
   103f2:	f002 fdb3 	bl	12f5c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   103f6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   103fa:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   103fe:	f000 0007 	and.w	r0, r0, #7
   10402:	f002 fd0f 	bl	12e24 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   10406:	f002 fe85 	bl	13114 <radio_tmr_end_capture>
   1040a:	e7d5      	b.n	103b8 <__kernel_ram_size+0x3b8>
		LL_ASSERT(0);
   1040c:	4b4c      	ldr	r3, [pc, #304]	; (10540 <__kernel_ram_size+0x540>)
   1040e:	9301      	str	r3, [sp, #4]
   10410:	9300      	str	r3, [sp, #0]
   10412:	4b4c      	ldr	r3, [pc, #304]	; (10544 <__kernel_ram_size+0x544>)
   10414:	681c      	ldr	r4, [r3, #0]
   10416:	4b4d      	ldr	r3, [pc, #308]	; (1054c <__kernel_ram_size+0x54c>)
   10418:	f7fe be89 	b.w	f12e <isr+0x1f6>
	switch (_radio.role) {
   1041c:	7ce2      	ldrb	r2, [r4, #19]
   1041e:	2a04      	cmp	r2, #4
   10420:	f200 824c 	bhi.w	108bc <__kernel_ram_size+0x8bc>
   10424:	e8df f012 	tbh	[pc, r2, lsl #1]
   10428:	00050238 	.word	0x00050238
   1042c:	00c7005a 	.word	0x00c7005a
   10430:	00c7      	.short	0x00c7
	if ((_radio.state == STATE_CLOSE) &&
   10432:	2b03      	cmp	r3, #3
   10434:	d109      	bne.n	1044a <__kernel_ram_size+0x44a>
	    (_radio.advertiser.chan_map_current != 0)) {
   10436:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
   1043a:	0759      	lsls	r1, r3, #29
   1043c:	d005      	beq.n	1044a <__kernel_ram_size+0x44a>
		adv_setup();
   1043e:	f7fb fa8b 	bl	b958 <adv_setup>
		radio_tx_enable();
   10442:	f002 fc8f 	bl	12d64 <radio_tx_enable>
   10446:	f7fe bdf3 	b.w	f030 <isr+0xf8>
		radio_filter_disable();
   1044a:	f002 fd4b 	bl	12ee4 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
   1044e:	7d23      	ldrb	r3, [r4, #20]
   10450:	2b03      	cmp	r3, #3
   10452:	f040 8095 	bne.w	10580 <__kernel_ram_size+0x580>
		    (!_radio.advertiser.is_hdcd)) {
   10456:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
   1045a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   1045e:	f040 808f 	bne.w	10580 <__kernel_ram_size+0x580>
			entropy_nrf_get_entropy_isr(_radio.entropy,
   10462:	2201      	movs	r2, #1
   10464:	a910      	add	r1, sp, #64	; 0x40
   10466:	6860      	ldr	r0, [r4, #4]
   10468:	f003 fcbc 	bl	13de4 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
   1046c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
   10470:	4837      	ldr	r0, [pc, #220]	; (10550 <__kernel_ram_size+0x550>)
			random_delay %= 10;
   10472:	230a      	movs	r3, #10
   10474:	fbb1 f2f3 	udiv	r2, r1, r3
   10478:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
   1047c:	3201      	adds	r2, #1
   1047e:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
   10480:	b2d6      	uxtb	r6, r2
   10482:	fba6 0100 	umull	r0, r1, r6, r0
   10486:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
   10488:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
   1048c:	fb03 1106 	mla	r1, r3, r6, r1
   10490:	a327      	add	r3, pc, #156	; (adr r3, 10530 <__kernel_ram_size+0x530>)
   10492:	e9d3 2300 	ldrd	r2, r3, [r3]
   10496:	f7ef febd 	bl	214 <__aeabi_uldivmod>
			ticker_status =
   1049a:	f640 734b 	movw	r3, #3915	; 0xf4b
   1049e:	9306      	str	r3, [sp, #24]
   104a0:	4b2c      	ldr	r3, [pc, #176]	; (10554 <__kernel_ram_size+0x554>)
   104a2:	9305      	str	r3, [sp, #20]
   104a4:	9504      	str	r5, [sp, #16]
   104a6:	b283      	uxth	r3, r0
   104a8:	9503      	str	r5, [sp, #12]
   104aa:	9502      	str	r5, [sp, #8]
   104ac:	9501      	str	r5, [sp, #4]
   104ae:	9500      	str	r5, [sp, #0]
   104b0:	2205      	movs	r2, #5
   104b2:	4629      	mov	r1, r5
   104b4:	4628      	mov	r0, r5
   104b6:	f7f7 ffaf 	bl	8418 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   104ba:	f030 0302 	bics.w	r3, r0, #2
   104be:	d05f      	beq.n	10580 <__kernel_ram_size+0x580>
   104c0:	7ca3      	ldrb	r3, [r4, #18]
   104c2:	2b05      	cmp	r3, #5
   104c4:	d05c      	beq.n	10580 <__kernel_ram_size+0x580>
   104c6:	4b1e      	ldr	r3, [pc, #120]	; (10540 <__kernel_ram_size+0x540>)
   104c8:	9301      	str	r3, [sp, #4]
   104ca:	9300      	str	r3, [sp, #0]
   104cc:	4b1d      	ldr	r3, [pc, #116]	; (10544 <__kernel_ram_size+0x544>)
   104ce:	4a22      	ldr	r2, [pc, #136]	; (10558 <__kernel_ram_size+0x558>)
   104d0:	681c      	ldr	r4, [r3, #0]
   104d2:	4922      	ldr	r1, [pc, #136]	; (1055c <__kernel_ram_size+0x55c>)
   104d4:	4b22      	ldr	r3, [pc, #136]	; (10560 <__kernel_ram_size+0x560>)
   104d6:	4823      	ldr	r0, [pc, #140]	; (10564 <__kernel_ram_size+0x564>)
   104d8:	f7ff b8ea 	b.w	f6b0 <isr+0x778>
	if (_radio.state == STATE_CLOSE) {
   104dc:	2b03      	cmp	r3, #3
   104de:	d143      	bne.n	10568 <__kernel_ram_size+0x568>
		radio_tmr_tifs_set(RADIO_TIFS);
   104e0:	2096      	movs	r0, #150	; 0x96
   104e2:	f002 fd3b 	bl	12f5c <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   104e6:	2300      	movs	r3, #0
   104e8:	4619      	mov	r1, r3
   104ea:	461a      	mov	r2, r3
   104ec:	4618      	mov	r0, r3
   104ee:	f002 fca5 	bl	12e3c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   104f2:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   104f6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
   104fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   104fe:	3008      	adds	r0, #8
   10500:	f002 fc10 	bl	12d24 <radio_pkt_rx_set>
		radio_rssi_measure();
   10504:	f002 fcb2 	bl	12e6c <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   10508:	f001 ff48 	bl	1239c <ctrl_rl_enabled>
   1050c:	b138      	cbz	r0, 1051e <__kernel_ram_size+0x51e>
			u8_t count, *irks = ctrl_irks_get(&count);
   1050e:	a810      	add	r0, sp, #64	; 0x40
   10510:	f001 fc7c 	bl	11e0c <ctrl_irks_get>
			radio_ar_configure(count, irks);
   10514:	4601      	mov	r1, r0
   10516:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   1051a:	f002 fea3 	bl	13264 <radio_ar_configure>
		_radio.state = STATE_RX;
   1051e:	2301      	movs	r3, #1
   10520:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
   10522:	f002 fc19 	bl	12d58 <radio_rx_enable>
   10526:	f7fe bd83 	b.w	f030 <isr+0xf8>
   1052a:	bf00      	nop
   1052c:	f3af 8000 	nop.w
   10530:	1afd498d 	.word	0x1afd498d
   10534:	00000007 	.word	0x00000007
   10538:	00022060 	.word	0x00022060
   1053c:	00022040 	.word	0x00022040
   10540:	00015359 	.word	0x00015359
   10544:	20003a5c 	.word	0x20003a5c
   10548:	00017e2b 	.word	0x00017e2b
   1054c:	00017e37 	.word	0x00017e37
   10550:	d4a51000 	.word	0xd4a51000
   10554:	0000b375 	.word	0x0000b375
   10558:	00016754 	.word	0x00016754
   1055c:	0001679c 	.word	0x0001679c
   10560:	00017e4a 	.word	0x00017e4a
   10564:	00018499 	.word	0x00018499
		radio_filter_disable();
   10568:	f002 fcbc 	bl	12ee4 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   1056c:	7d23      	ldrb	r3, [r4, #20]
   1056e:	2b05      	cmp	r3, #5
   10570:	d106      	bne.n	10580 <__kernel_ram_size+0x580>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10572:	2300      	movs	r3, #0
   10574:	9300      	str	r3, [sp, #0]
   10576:	2204      	movs	r2, #4
   10578:	4619      	mov	r1, r3
   1057a:	4618      	mov	r0, r3
   1057c:	f7f7 ff9a 	bl	84b4 <ticker_stop>
	_radio.role = ROLE_NONE;
   10580:	2500      	movs	r5, #0
   10582:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
   10584:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
   10586:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
   10588:	f002 fd66 	bl	13058 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1058c:	462a      	mov	r2, r5
   1058e:	4629      	mov	r1, r5
   10590:	4628      	mov	r0, r5
   10592:	4bab      	ldr	r3, [pc, #684]	; (10840 <__kernel_ram_size+0x840>)
   10594:	f7f7 f930 	bl	77f8 <mayfly_enqueue>
	LL_ASSERT(!retval);
   10598:	4605      	mov	r5, r0
   1059a:	2800      	cmp	r0, #0
   1059c:	f000 8196 	beq.w	108cc <__kernel_ram_size+0x8cc>
   105a0:	4ba8      	ldr	r3, [pc, #672]	; (10844 <__kernel_ram_size+0x844>)
   105a2:	9301      	str	r3, [sp, #4]
   105a4:	9300      	str	r3, [sp, #0]
   105a6:	4ba8      	ldr	r3, [pc, #672]	; (10848 <__kernel_ram_size+0x848>)
   105a8:	4aa8      	ldr	r2, [pc, #672]	; (1084c <__kernel_ram_size+0x84c>)
   105aa:	681c      	ldr	r4, [r3, #0]
   105ac:	49a8      	ldr	r1, [pc, #672]	; (10850 <__kernel_ram_size+0x850>)
   105ae:	4ba9      	ldr	r3, [pc, #676]	; (10854 <__kernel_ram_size+0x854>)
   105b0:	48a9      	ldr	r0, [pc, #676]	; (10858 <__kernel_ram_size+0x858>)
   105b2:	f7ff b87d 	b.w	f6b0 <isr+0x778>
	if (_radio.conn_curr == 0) {
   105b6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   105ba:	2800      	cmp	r0, #0
   105bc:	d0e0      	beq.n	10580 <__kernel_ram_size+0x580>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   105be:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   105c2:	b181      	cbz	r1, 105e6 <__kernel_ram_size+0x5e6>
   105c4:	7ce3      	ldrb	r3, [r4, #19]
   105c6:	2b03      	cmp	r3, #3
   105c8:	d003      	beq.n	105d2 <__kernel_ram_size+0x5d2>
   105ca:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   105ce:	07da      	lsls	r2, r3, #31
   105d0:	d509      	bpl.n	105e6 <__kernel_ram_size+0x5e6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   105d2:	f7fb faa7 	bl	bb24 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   105d6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   105da:	f7fb f8e3 	bl	b7a4 <connection_release>
			_radio.conn_curr = NULL;
   105de:	2300      	movs	r3, #0
   105e0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   105e4:	e7cc      	b.n	10580 <__kernel_ram_size+0x580>
	latency_event = _radio.conn_curr->latency_event;
   105e6:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   105ea:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
   105ee:	f10b 0601 	add.w	r6, fp, #1
   105f2:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
   105f4:	2f00      	cmp	r7, #0
   105f6:	f000 8084 	beq.w	10702 <__kernel_ram_size+0x702>
		if (_radio.role == ROLE_SLAVE) {
   105fa:	7ce3      	ldrb	r3, [r4, #19]
   105fc:	2b03      	cmp	r3, #3
   105fe:	d173      	bne.n	106e8 <__kernel_ram_size+0x6e8>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10600:	f002 fd7c 	bl	130fc <radio_tmr_aa_restore>
   10604:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
   10606:	f002 fd7f 	bl	13108 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   1060a:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
   1060e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
   10612:	f003 0307 	and.w	r3, r3, #7
   10616:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10618:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
   1061c:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
   1061e:	d052      	beq.n	106c6 <__kernel_ram_size+0x6c6>
		return 40;
   10620:	2b04      	cmp	r3, #4
   10622:	bf0c      	ite	eq
   10624:	f44f 78bc 	moveq.w	r8, #376	; 0x178
   10628:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   1062c:	f100 0330 	add.w	r3, r0, #48	; 0x30
   10630:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
   10632:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   10634:	930a      	str	r3, [sp, #40]	; 0x28
   10636:	f8df a230 	ldr.w	sl, [pc, #560]	; 10868 <__kernel_ram_size+0x868>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   1063a:	a37f      	add	r3, pc, #508	; (adr r3, 10838 <__kernel_ram_size+0x838>)
   1063c:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   10640:	d844      	bhi.n	106cc <__kernel_ram_size+0x6cc>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   10642:	fba0 010a 	umull	r0, r1, r0, sl
   10646:	f7ef fde5 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1064a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   1064c:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1064e:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10652:	a379      	add	r3, pc, #484	; (adr r3, 10838 <__kernel_ram_size+0x838>)
   10654:	e9d3 2300 	ldrd	r2, r3, [r3]
   10658:	fba0 010a 	umull	r0, r1, r0, sl
   1065c:	f7ef fdda 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
   10660:	2300      	movs	r3, #0
   10662:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   10664:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   10666:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1066a:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
   1066e:	b3ab      	cbz	r3, 106dc <__kernel_ram_size+0x6dc>
				if (pdu_data_tx->len ||
   10670:	795b      	ldrb	r3, [r3, #5]
   10672:	b913      	cbnz	r3, 1067a <__kernel_ram_size+0x67a>
   10674:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
   10678:	b10b      	cbz	r3, 1067e <__kernel_ram_size+0x67e>
					_radio.conn_curr->latency_event = 0;
   1067a:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
   1067c:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   1067e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10682:	2200      	movs	r2, #0
   10684:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   10686:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1068a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   1068e:	b1c3      	cbz	r3, 106c2 <__kernel_ram_size+0x6c2>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   10690:	429e      	cmp	r6, r3
   10692:	f080 80b2 	bcs.w	107fa <__kernel_ram_size+0x7fa>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   10696:	1b9b      	subs	r3, r3, r6
   10698:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
   1069a:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   1069c:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   1069e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   106a2:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   106a4:	f240 80ab 	bls.w	107fe <__kernel_ram_size+0x7fe>
			else if (_radio.role == ROLE_SLAVE) {
   106a8:	7ce3      	ldrb	r3, [r4, #19]
   106aa:	2b03      	cmp	r3, #3
   106ac:	d109      	bne.n	106c2 <__kernel_ram_size+0x6c2>
				if (latency_event != 0) {
   106ae:	f1bb 0f00 	cmp.w	fp, #0
   106b2:	f040 80a4 	bne.w	107fe <__kernel_ram_size+0x7fe>
					force = _radio.conn_curr->slave.force & 0x01;
   106b6:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   106b8:	087b      	lsrs	r3, r7, #1
					if (force) {
   106ba:	f017 0701 	ands.w	r7, r7, #1
   106be:	d13d      	bne.n	1073c <__kernel_ram_size+0x73c>
					_radio.conn_curr->slave.force >>= 1;
   106c0:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
   106c2:	2700      	movs	r7, #0
   106c4:	e03d      	b.n	10742 <__kernel_ram_size+0x742>
		return 24;
   106c6:	f04f 0818 	mov.w	r8, #24
   106ca:	e7af      	b.n	1062c <__kernel_ram_size+0x62c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   106cc:	fba9 010a 	umull	r0, r1, r9, sl
   106d0:	f7ef fda0 	bl	214 <__aeabi_uldivmod>
   106d4:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   106d6:	f108 0030 	add.w	r0, r8, #48	; 0x30
   106da:	e7ba      	b.n	10652 <__kernel_ram_size+0x652>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   106dc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   106e0:	07db      	lsls	r3, r3, #31
   106e2:	d5cc      	bpl.n	1067e <__kernel_ram_size+0x67e>
				_radio.conn_curr->latency_event =
   106e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   106e6:	e7c9      	b.n	1067c <__kernel_ram_size+0x67c>
		} else if (reason_peer) {
   106e8:	b149      	cbz	r1, 106fe <__kernel_ram_size+0x6fe>
			_radio.conn_curr->master.terminate_ack = 1;
   106ea:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   106ee:	f043 0301 	orr.w	r3, r3, #1
   106f2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   106f6:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
   106fa:	4645      	mov	r5, r8
   106fc:	e7bf      	b.n	1067e <__kernel_ram_size+0x67e>
	ticks_drift_minus = 0;
   106fe:	4688      	mov	r8, r1
   10700:	e7fb      	b.n	106fa <__kernel_ram_size+0x6fa>
	else if (_radio.conn_curr->connect_expire) {
   10702:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   10704:	b185      	cbz	r5, 10728 <__kernel_ram_size+0x728>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   10706:	42ae      	cmp	r6, r5
   10708:	d204      	bcs.n	10714 <__kernel_ram_size+0x714>
			_radio.conn_curr->connect_expire -= elapsed_event;
   1070a:	1bad      	subs	r5, r5, r6
   1070c:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   1070e:	463d      	mov	r5, r7
   10710:	46a8      	mov	r8, r5
   10712:	e7b8      	b.n	10686 <__kernel_ram_size+0x686>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   10714:	213e      	movs	r1, #62	; 0x3e
   10716:	f7fb fa05 	bl	bb24 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   1071a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1071e:	f7fb f841 	bl	b7a4 <connection_release>
			_radio.conn_curr = NULL;
   10722:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
   10726:	e72b      	b.n	10580 <__kernel_ram_size+0x580>
		if (!_radio.conn_curr->supervision_expire) {
   10728:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
   1072c:	f1b8 0f00 	cmp.w	r8, #0
   10730:	d1ee      	bne.n	10710 <__kernel_ram_size+0x710>
			_radio.conn_curr->supervision_expire =
   10732:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   10734:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   10738:	4645      	mov	r5, r8
   1073a:	e7a4      	b.n	10686 <__kernel_ram_size+0x686>
						_radio.conn_curr->slave.force |=
   1073c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10740:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
   10742:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   10746:	b123      	cbz	r3, 10752 <__kernel_ram_size+0x752>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   10748:	429e      	cmp	r6, r3
   1074a:	d25a      	bcs.n	10802 <__kernel_ram_size+0x802>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   1074c:	1b9b      	subs	r3, r3, r6
   1074e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   10752:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   10756:	b123      	cbz	r3, 10762 <__kernel_ram_size+0x762>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   10758:	429e      	cmp	r6, r3
   1075a:	d254      	bcs.n	10806 <__kernel_ram_size+0x806>
			_radio.conn_curr->apto_expire -= elapsed_event;
   1075c:	1b9b      	subs	r3, r3, r6
   1075e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   10762:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   10766:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   1076a:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   1076e:	b123      	cbz	r3, 1077a <__kernel_ram_size+0x77a>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   10770:	429e      	cmp	r6, r3
   10772:	d27b      	bcs.n	1086c <__kernel_ram_size+0x86c>
			_radio.conn_curr->appto_expire -= elapsed_event;
   10774:	1b9e      	subs	r6, r3, r6
   10776:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   1077a:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   1077e:	428b      	cmp	r3, r1
   10780:	d006      	beq.n	10790 <__kernel_ram_size+0x790>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   10782:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   10786:	3b01      	subs	r3, #1
   10788:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
   1078a:	bf9c      	itt	ls
   1078c:	2300      	movls	r3, #0
   1078e:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   10790:	b917      	cbnz	r7, 10798 <__kernel_ram_size+0x798>
   10792:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   10794:	455b      	cmp	r3, fp
   10796:	d07d      	beq.n	10894 <__kernel_ram_size+0x894>
		lazy = _radio.conn_curr->latency_event + 1;
   10798:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   1079a:	3301      	adds	r3, #1
   1079c:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   1079e:	b935      	cbnz	r5, 107ae <__kernel_ram_size+0x7ae>
   107a0:	f1b8 0f00 	cmp.w	r8, #0
   107a4:	d103      	bne.n	107ae <__kernel_ram_size+0x7ae>
   107a6:	b913      	cbnz	r3, 107ae <__kernel_ram_size+0x7ae>
	    (lazy != 0) || (force != 0)) {
   107a8:	2f00      	cmp	r7, #0
   107aa:	f43f aee9 	beq.w	10580 <__kernel_ram_size+0x580>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   107ae:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
   107b2:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   107b4:	3207      	adds	r2, #7
		ticker_status =
   107b6:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   107b8:	b2d6      	uxtb	r6, r2
		ticker_status =
   107ba:	4a28      	ldr	r2, [pc, #160]	; (1085c <__kernel_ram_size+0x85c>)
   107bc:	9205      	str	r2, [sp, #20]
   107be:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
   107c0:	9606      	str	r6, [sp, #24]
		ticker_status =
   107c2:	9704      	str	r7, [sp, #16]
   107c4:	9102      	str	r1, [sp, #8]
   107c6:	9101      	str	r1, [sp, #4]
   107c8:	f8cd 8000 	str.w	r8, [sp]
   107cc:	4632      	mov	r2, r6
   107ce:	4608      	mov	r0, r1
   107d0:	f7f7 fe22 	bl	8418 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   107d4:	f030 0302 	bics.w	r3, r0, #2
   107d8:	f43f aed2 	beq.w	10580 <__kernel_ram_size+0x580>
   107dc:	7ca3      	ldrb	r3, [r4, #18]
   107de:	429e      	cmp	r6, r3
   107e0:	f43f aece 	beq.w	10580 <__kernel_ram_size+0x580>
   107e4:	4b17      	ldr	r3, [pc, #92]	; (10844 <__kernel_ram_size+0x844>)
   107e6:	9301      	str	r3, [sp, #4]
   107e8:	9300      	str	r3, [sp, #0]
   107ea:	4b17      	ldr	r3, [pc, #92]	; (10848 <__kernel_ram_size+0x848>)
   107ec:	4a17      	ldr	r2, [pc, #92]	; (1084c <__kernel_ram_size+0x84c>)
   107ee:	681c      	ldr	r4, [r3, #0]
   107f0:	4917      	ldr	r1, [pc, #92]	; (10850 <__kernel_ram_size+0x850>)
   107f2:	4b1b      	ldr	r3, [pc, #108]	; (10860 <__kernel_ram_size+0x860>)
   107f4:	481b      	ldr	r0, [pc, #108]	; (10864 <__kernel_ram_size+0x864>)
   107f6:	f7fe bf5b 	b.w	f6b0 <isr+0x778>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   107fa:	2108      	movs	r1, #8
   107fc:	e6e9      	b.n	105d2 <__kernel_ram_size+0x5d2>
				force = 1;
   107fe:	2701      	movs	r7, #1
   10800:	e79f      	b.n	10742 <__kernel_ram_size+0x742>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   10802:	2122      	movs	r1, #34	; 0x22
   10804:	e6e5      	b.n	105d2 <__kernel_ram_size+0x5d2>
			_radio.conn_curr->apto_expire = 0;
   10806:	2300      	movs	r3, #0
   10808:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
   1080c:	2002      	movs	r0, #2
   1080e:	f7f9 fd73 	bl	a2f8 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   10812:	b938      	cbnz	r0, 10824 <__kernel_ram_size+0x824>
   10814:	4b0b      	ldr	r3, [pc, #44]	; (10844 <__kernel_ram_size+0x844>)
   10816:	9301      	str	r3, [sp, #4]
   10818:	9300      	str	r3, [sp, #0]
   1081a:	4b0b      	ldr	r3, [pc, #44]	; (10848 <__kernel_ram_size+0x848>)
   1081c:	681c      	ldr	r4, [r3, #0]
   1081e:	4b10      	ldr	r3, [pc, #64]	; (10860 <__kernel_ram_size+0x860>)
   10820:	f7fe be0c 	b.w	f43c <isr+0x504>
			node_rx->hdr.handle = _radio.conn_curr->handle;
   10824:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10828:	8c1b      	ldrh	r3, [r3, #32]
   1082a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
   1082c:	230a      	movs	r3, #10
   1082e:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
   10830:	f7fa fbfc 	bl	b02c <packet_rx_enqueue>
   10834:	e795      	b.n	10762 <__kernel_ram_size+0x762>
   10836:	bf00      	nop
   10838:	1afd498d 	.word	0x1afd498d
   1083c:	00000007 	.word	0x00000007
   10840:	20003d48 	.word	0x20003d48
   10844:	00015359 	.word	0x00015359
   10848:	20003a5c 	.word	0x20003a5c
   1084c:	00016754 	.word	0x00016754
   10850:	0001679c 	.word	0x0001679c
   10854:	00017f1b 	.word	0x00017f1b
   10858:	0001894b 	.word	0x0001894b
   1085c:	0000b3c1 	.word	0x0000b3c1
   10860:	00017e58 	.word	0x00017e58
   10864:	00018507 	.word	0x00018507
   10868:	3b9aca00 	.word	0x3b9aca00
			_radio.conn_curr->appto_expire = 0;
   1086c:	2300      	movs	r3, #0
   1086e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   10872:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   10876:	2b00      	cmp	r3, #0
   10878:	f47f af7f 	bne.w	1077a <__kernel_ram_size+0x77a>
   1087c:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   10880:	428b      	cmp	r3, r1
   10882:	f47f af7e 	bne.w	10782 <__kernel_ram_size+0x782>
				_radio.conn_curr->llcp_type = LLCP_PING;
   10886:	2307      	movs	r3, #7
   10888:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   1088c:	1e4b      	subs	r3, r1, #1
   1088e:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   10892:	e772      	b.n	1077a <__kernel_ram_size+0x77a>
	lazy = 0;
   10894:	463b      	mov	r3, r7
   10896:	e782      	b.n	1079e <__kernel_ram_size+0x79e>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   10898:	3b04      	subs	r3, #4
   1089a:	2b01      	cmp	r3, #1
   1089c:	d90a      	bls.n	108b4 <__kernel_ram_size+0x8b4>
   1089e:	4b15      	ldr	r3, [pc, #84]	; (108f4 <__kernel_ram_size+0x8f4>)
   108a0:	9301      	str	r3, [sp, #4]
   108a2:	9300      	str	r3, [sp, #0]
   108a4:	4b14      	ldr	r3, [pc, #80]	; (108f8 <__kernel_ram_size+0x8f8>)
   108a6:	4a15      	ldr	r2, [pc, #84]	; (108fc <__kernel_ram_size+0x8fc>)
   108a8:	681c      	ldr	r4, [r3, #0]
   108aa:	4915      	ldr	r1, [pc, #84]	; (10900 <__kernel_ram_size+0x900>)
   108ac:	4b15      	ldr	r3, [pc, #84]	; (10904 <__kernel_ram_size+0x904>)
   108ae:	4816      	ldr	r0, [pc, #88]	; (10908 <__kernel_ram_size+0x908>)
   108b0:	f7fe befe 	b.w	f6b0 <isr+0x778>
		_radio.state = STATE_NONE;
   108b4:	2300      	movs	r3, #0
   108b6:	7523      	strb	r3, [r4, #20]
   108b8:	f7fe bbea 	b.w	f090 <isr+0x158>
		LL_ASSERT(0);
   108bc:	4b0d      	ldr	r3, [pc, #52]	; (108f4 <__kernel_ram_size+0x8f4>)
   108be:	9301      	str	r3, [sp, #4]
   108c0:	9300      	str	r3, [sp, #0]
   108c2:	4b0d      	ldr	r3, [pc, #52]	; (108f8 <__kernel_ram_size+0x8f8>)
   108c4:	681c      	ldr	r4, [r3, #0]
   108c6:	4b0f      	ldr	r3, [pc, #60]	; (10904 <__kernel_ram_size+0x904>)
   108c8:	f7fe bc31 	b.w	f12e <isr+0x1f6>
	clock_control_off(_radio.hf_clock, NULL);
   108cc:	6820      	ldr	r0, [r4, #0]
   108ce:	6843      	ldr	r3, [r0, #4]
   108d0:	4629      	mov	r1, r5
   108d2:	685b      	ldr	r3, [r3, #4]
   108d4:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   108d6:	2201      	movs	r2, #1
   108d8:	4611      	mov	r1, r2
   108da:	4628      	mov	r0, r5
   108dc:	f7f6 ff64 	bl	77a8 <mayfly_enable>
   108e0:	f7fe bbd6 	b.w	f090 <isr+0x158>
		LL_ASSERT(0);
   108e4:	4b03      	ldr	r3, [pc, #12]	; (108f4 <__kernel_ram_size+0x8f4>)
   108e6:	9301      	str	r3, [sp, #4]
   108e8:	9300      	str	r3, [sp, #0]
   108ea:	4b03      	ldr	r3, [pc, #12]	; (108f8 <__kernel_ram_size+0x8f8>)
   108ec:	681c      	ldr	r4, [r3, #0]
   108ee:	4b07      	ldr	r3, [pc, #28]	; (1090c <__kernel_ram_size+0x90c>)
   108f0:	f7fe bc1d 	b.w	f12e <isr+0x1f6>
   108f4:	00015359 	.word	0x00015359
   108f8:	20003a5c 	.word	0x20003a5c
   108fc:	00016754 	.word	0x00016754
   10900:	0001679c 	.word	0x0001679c
   10904:	00017e67 	.word	0x00017e67
   10908:	0001857d 	.word	0x0001857d
   1090c:	00017e7d 	.word	0x00017e7d

00010910 <radio_init>:
{
   10910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   10914:	4e3d      	ldr	r6, [pc, #244]	; (10a0c <radio_init+0xfc>)
{
   10916:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10918:	f89d c01c 	ldrb.w	ip, [sp, #28]
   1091c:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
   10920:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   10924:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
   10928:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   1092a:	f44f 70aa 	mov.w	r0, #340	; 0x154
   1092e:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
   10932:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
   10936:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
   1093a:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
   1093c:	f10c 0401 	add.w	r4, ip, #1
   10940:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
   10942:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
   10944:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   10948:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   1094c:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
   1094e:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   10950:	bf98      	it	ls
   10952:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
   10956:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   1095a:	bf88      	it	hi
   1095c:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   10960:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
   10964:	bf8c      	ite	hi
   10966:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   1096a:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
   1096e:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   10972:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   10976:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
   1097a:	bf8c      	ite	hi
   1097c:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   10980:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   10982:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   10986:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
   1098a:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
   1098e:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10992:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   10996:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1099a:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
   1099e:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   109a2:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   109a4:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
   109a6:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   109aa:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   109ac:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
   109b0:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   109b4:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   109b8:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   109ba:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   109be:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   109c2:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   109c6:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   109ca:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   109ce:	340a      	adds	r4, #10
   109d0:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   109d4:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   109d6:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   109d8:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   109dc:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   109e0:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   109e2:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
   109e6:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   109ea:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
   109ee:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
   109f2:	d003      	beq.n	109fc <radio_init+0xec>
		return (retcode + mem_size);
   109f4:	442c      	add	r4, r5
}
   109f6:	4620      	mov	r0, r4
   109f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   109fc:	2301      	movs	r3, #1
   109fe:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
   10a02:	f7f9 fd3d 	bl	a480 <common_init>
	radio_setup();
   10a06:	f002 f8dd 	bl	12bc4 <radio_setup>
	return retcode;
   10a0a:	e7f4      	b.n	109f6 <radio_init+0xe6>
   10a0c:	200008c0 	.word	0x200008c0

00010a10 <ll_reset>:
{
   10a10:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   10a12:	2103      	movs	r1, #3
   10a14:	2005      	movs	r0, #5
   10a16:	f7f9 fe21 	bl	a65c <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   10a1a:	2104      	movs	r1, #4
   10a1c:	2006      	movs	r0, #6
   10a1e:	f7f9 fe1d 	bl	a65c <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   10a22:	4c22      	ldr	r4, [pc, #136]	; (10aac <ll_reset+0x9c>)
   10a24:	2500      	movs	r5, #0
   10a26:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   10a2a:	b2ab      	uxth	r3, r5
   10a2c:	429a      	cmp	r2, r3
   10a2e:	f105 0501 	add.w	r5, r5, #1
   10a32:	d834      	bhi.n	10a9e <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
   10a34:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10a38:	f36f 13c7 	bfc	r3, #7, #1
   10a3c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   10a40:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   10a44:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   10a46:	f360 0300 	bfi	r3, r0, #0, #1
   10a4a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10a4e:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10a50:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   10a54:	fbb3 f3f2 	udiv	r3, r3, r2
   10a58:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10a5c:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
   10a60:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10a64:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   10a66:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
   10a6a:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10a6e:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
   10a72:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
   10a76:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   10a7a:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10a7e:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
   10a82:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
   10a86:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
   10a8a:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
   10a8e:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
   10a92:	f001 ff15 	bl	128c0 <ll_filter_reset>
}
   10a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   10a9a:	f7f9 bcf1 	b.w	a480 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   10a9e:	1da8      	adds	r0, r5, #6
   10aa0:	21ff      	movs	r1, #255	; 0xff
   10aa2:	b2c0      	uxtb	r0, r0
   10aa4:	f7f9 fdda 	bl	a65c <role_disable>
   10aa8:	e7bd      	b.n	10a26 <ll_reset+0x16>
   10aaa:	bf00      	nop
   10aac:	200008c0 	.word	0x200008c0

00010ab0 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   10ab0:	4b02      	ldr	r3, [pc, #8]	; (10abc <ll_adv_is_enabled+0xc>)
   10ab2:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   10ab6:	09c0      	lsrs	r0, r0, #7
   10ab8:	4770      	bx	lr
   10aba:	bf00      	nop
   10abc:	200008c0 	.word	0x200008c0

00010ac0 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   10ac0:	4b04      	ldr	r3, [pc, #16]	; (10ad4 <radio_adv_filter_pol_get+0x14>)
   10ac2:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   10ac6:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   10ac8:	bfba      	itte	lt
   10aca:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   10ace:	0980      	lsrlt	r0, r0, #6
   10ad0:	2000      	movge	r0, #0
}
   10ad2:	4770      	bx	lr
   10ad4:	200008c0 	.word	0x200008c0

00010ad8 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10ad8:	4a09      	ldr	r2, [pc, #36]	; (10b00 <ll_scan_is_enabled+0x28>)
   10ada:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   10ade:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   10ae2:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10ae6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   10aea:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10aec:	f003 0301 	and.w	r3, r3, #1
   10af0:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   10af4:	bf14      	ite	ne
   10af6:	2004      	movne	r0, #4
   10af8:	2000      	moveq	r0, #0
}
   10afa:	4318      	orrs	r0, r3
   10afc:	4770      	bx	lr
   10afe:	bf00      	nop
   10b00:	200008c0 	.word	0x200008c0

00010b04 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   10b04:	4b05      	ldr	r3, [pc, #20]	; (10b1c <radio_scan_filter_pol_get+0x18>)
   10b06:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   10b0a:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   10b0e:	bf1c      	itt	ne
   10b10:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   10b14:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   10b18:	4770      	bx	lr
   10b1a:	bf00      	nop
   10b1c:	200008c0 	.word	0x200008c0

00010b20 <radio_connect_enable>:
{
   10b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   10b24:	f8df 8388 	ldr.w	r8, [pc, #904]	; 10eb0 <radio_connect_enable+0x390>
{
   10b28:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
   10b2a:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
   10b2e:	9303      	str	r3, [sp, #12]
   10b30:	4683      	mov	fp, r0
   10b32:	468a      	mov	sl, r1
   10b34:	4691      	mov	r9, r2
   10b36:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   10b38:	2e00      	cmp	r6, #0
   10b3a:	f040 819d 	bne.w	10e78 <radio_connect_enable+0x358>
	link = mem_acquire(&_radio.link_rx_free);
   10b3e:	f508 70a4 	add.w	r0, r8, #328	; 0x148
   10b42:	f7f6 fd8e 	bl	7662 <mem_acquire>
	if (!link) {
   10b46:	4607      	mov	r7, r0
   10b48:	b150      	cbz	r0, 10b60 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   10b4a:	f508 7086 	add.w	r0, r8, #268	; 0x10c
   10b4e:	f7f6 fd88 	bl	7662 <mem_acquire>
	if (!conn) {
   10b52:	4604      	mov	r4, r0
   10b54:	b930      	cbnz	r0, 10b64 <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   10b56:	f508 71a4 	add.w	r1, r8, #328	; 0x148
   10b5a:	4638      	mov	r0, r7
   10b5c:	f7f6 fd9b 	bl	7696 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   10b60:	2007      	movs	r0, #7
   10b62:	e15c      	b.n	10e1e <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   10b64:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
   10b68:	f36b 1386 	bfi	r3, fp, #6, #1
   10b6c:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   10b70:	2206      	movs	r2, #6
   10b72:	4651      	mov	r1, sl
   10b74:	f108 00ea 	add.w	r0, r8, #234	; 0xea
   10b78:	f7f1 f866 	bl	1c48 <memcpy>
	_radio.scanner.conn_latency = latency;
   10b7c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10b80:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10b84:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   10b86:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
   10b8a:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10b8e:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   10b90:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10b94:	f002 f8d2 	bl	12d3c <radio_tx_ready_delay_get>
   10b98:	49bb      	ldr	r1, [pc, #748]	; (10e88 <radio_connect_enable+0x368>)
   10b9a:	f200 4052 	addw	r0, r0, #1106	; 0x452
   10b9e:	a3b8      	add	r3, pc, #736	; (adr r3, 10e80 <radio_connect_enable+0x360>)
   10ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ba4:	fba0 0101 	umull	r0, r1, r0, r1
   10ba8:	f7ef fb34 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   10bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10bb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10bb4:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
   10bb8:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   10bba:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 10eb4 <radio_connect_enable+0x394>
	conn->llcp_features = RADIO_BLE_FEAT;
   10bbe:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   10bc2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   10bc6:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   10bc8:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   10bcc:	2104      	movs	r1, #4
   10bce:	a805      	add	r0, sp, #20
   10bd0:	f7f7 fd80 	bl	86d4 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   10bd4:	f8dd c014 	ldr.w	ip, [sp, #20]
   10bd8:	2000      	movs	r0, #0
   10bda:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   10bde:	231f      	movs	r3, #31
	transitions = 0;
   10be0:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   10be2:	2101      	movs	r1, #1
	while (bit_idx--) {
   10be4:	3b01      	subs	r3, #1
   10be6:	b2db      	uxtb	r3, r3
   10be8:	2bff      	cmp	r3, #255	; 0xff
   10bea:	d103      	bne.n	10bf4 <radio_connect_enable+0xd4>
   10bec:	b3d0      	cbz	r0, 10c64 <radio_connect_enable+0x144>
   10bee:	f8cd c014 	str.w	ip, [sp, #20]
   10bf2:	e037      	b.n	10c64 <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   10bf4:	fa2c fe03 	lsr.w	lr, ip, r3
   10bf8:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   10bfc:	45d6      	cmp	lr, sl
   10bfe:	d11a      	bne.n	10c36 <radio_connect_enable+0x116>
			consecutive_cnt++;
   10c00:	3101      	adds	r1, #1
   10c02:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   10c04:	2906      	cmp	r1, #6
   10c06:	d807      	bhi.n	10c18 <radio_connect_enable+0xf8>
   10c08:	2b1b      	cmp	r3, #27
   10c0a:	d81a      	bhi.n	10c42 <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   10c0c:	b122      	cbz	r2, 10c18 <radio_connect_enable+0xf8>
   10c0e:	2b1b      	cmp	r3, #27
   10c10:	d017      	beq.n	10c42 <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   10c12:	2a01      	cmp	r2, #1
   10c14:	d815      	bhi.n	10c42 <radio_connect_enable+0x122>
   10c16:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   10c18:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   10c1c:	f1be 0f00 	cmp.w	lr, #0
   10c20:	f000 8100 	beq.w	10e24 <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   10c24:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   10c28:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   10c2c:	3201      	adds	r2, #1
   10c2e:	2001      	movs	r0, #1
   10c30:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   10c32:	4601      	mov	r1, r0
   10c34:	e005      	b.n	10c42 <radio_connect_enable+0x122>
			transitions++;
   10c36:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   10c38:	2b1b      	cmp	r3, #27
			transitions++;
   10c3a:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   10c3c:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   10c40:	d9e5      	bls.n	10c0e <radio_connect_enable+0xee>
		if (transitions > 24) {
   10c42:	2a18      	cmp	r2, #24
   10c44:	f240 80f6 	bls.w	10e34 <radio_connect_enable+0x314>
   10c48:	b108      	cbz	r0, 10c4e <radio_connect_enable+0x12e>
   10c4a:	f8cd c014 	str.w	ip, [sp, #20]
   10c4e:	3301      	adds	r3, #1
   10c50:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   10c52:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   10c56:	f1be 0f00 	cmp.w	lr, #0
   10c5a:	f000 80e8 	beq.w	10e2e <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   10c5e:	425b      	negs	r3, r3
   10c60:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   10c62:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   10c64:	9b05      	ldr	r3, [sp, #20]
   10c66:	a806      	add	r0, sp, #24
   10c68:	ea83 0308 	eor.w	r3, r3, r8
   10c6c:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   10c70:	2104      	movs	r1, #4
   10c72:	f7f6 fea1 	bl	79b8 <util_ones_count_get>
   10c76:	2801      	cmp	r0, #1
   10c78:	f240 80e3 	bls.w	10e42 <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   10c7c:	9b05      	ldr	r3, [sp, #20]
   10c7e:	b29a      	uxth	r2, r3
   10c80:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   10c84:	f000 80d8 	beq.w	10e38 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   10c88:	2204      	movs	r2, #4
   10c8a:	a905      	add	r1, sp, #20
   10c8c:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   10c90:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   10c92:	f7f0 ffd9 	bl	1c48 <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   10c96:	2103      	movs	r1, #3
   10c98:	f104 0014 	add.w	r0, r4, #20
   10c9c:	f7f7 fd1a 	bl	86d4 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   10ca0:	2205      	movs	r2, #5
   10ca2:	497a      	ldr	r1, [pc, #488]	; (10e8c <radio_connect_enable+0x36c>)
   10ca4:	f104 0017 	add.w	r0, r4, #23
   10ca8:	f7f0 ffce 	bl	1c48 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   10cac:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
   10cb0:	7f63      	ldrb	r3, [r4, #29]
   10cb2:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   10cb6:	f36f 1386 	bfc	r3, #6, #1
   10cba:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   10cbc:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   10cbe:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   10cc0:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   10cc2:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   10cc4:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
   10cc8:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
   10ccc:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
   10cd0:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   10cd2:	211b      	movs	r1, #27
   10cd4:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   10cd6:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   10cd8:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
   10cdc:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10cde:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   10ce2:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10ce6:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10ce8:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   10cea:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   10cee:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   10cf0:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   10cf4:	2601      	movs	r6, #1
   10cf6:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   10cfa:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   10cfe:	f363 11c7 	bfi	r1, r3, #7, #1
   10d02:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   10d06:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   10d0a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   10d0e:	f366 0102 	bfi	r1, r6, #0, #3
   10d12:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   10d16:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
   10d1a:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   10d1c:	b2c9      	uxtb	r1, r1
   10d1e:	f36c 01c5 	bfi	r1, ip, #3, #3
   10d22:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   10d26:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   10d2a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   10d2c:	f366 0102 	bfi	r1, r6, #0, #3
   10d30:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   10d34:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   10d36:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   10d38:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   10d3c:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   10d3e:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   10d40:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   10d44:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   10d48:	f363 0100 	bfi	r1, r3, #0, #1
   10d4c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   10d50:	f240 42e2 	movw	r2, #1250	; 0x4e2
   10d54:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10d58:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
   10d5c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10d60:	1e56      	subs	r6, r2, #1
   10d62:	f242 7e10 	movw	lr, #10000	; 0x2710
   10d66:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   10d6a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10d6e:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10d72:	4b47      	ldr	r3, [pc, #284]	; (10e90 <radio_connect_enable+0x370>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10d74:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10d76:	4947      	ldr	r1, [pc, #284]	; (10e94 <radio_connect_enable+0x374>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10d78:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10d7a:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10d7c:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10d80:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10d84:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10d86:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10d8a:	1d81      	adds	r1, r0, #6
   10d8c:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10d8e:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10d92:	dc6b      	bgt.n	10e6c <radio_connect_enable+0x34c>
	conn->llcp_version.tx = 0;
   10d94:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10d98:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   10d9c:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   10d9e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   10da2:	f360 0341 	bfi	r3, r0, #1, #1
   10da6:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   10daa:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   10dae:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   10db2:	f360 1304 	bfi	r3, r0, #4, #1
   10db6:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   10dba:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   10dbe:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   10dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10dc6:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   10dca:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   10dce:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   10dd2:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   10dd6:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   10dda:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   10dde:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   10de2:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   10de6:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   10dea:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   10dee:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   10df2:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   10df6:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   10dfa:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   10dfe:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   10e02:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   10e06:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   10e0a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   10e0e:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   10e12:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   10e16:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   10e1a:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
   10e1e:	b007      	add	sp, #28
   10e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   10e24:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   10e28:	f04f 0e01 	mov.w	lr, #1
   10e2c:	e6fe      	b.n	10c2c <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   10e2e:	3b01      	subs	r3, #1
   10e30:	4313      	orrs	r3, r2
   10e32:	e716      	b.n	10c62 <radio_connect_enable+0x142>
		if (transitions > 24) {
   10e34:	46f2      	mov	sl, lr
   10e36:	e6d5      	b.n	10be4 <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   10e38:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   10e3a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   10e3e:	f47f af23 	bne.w	10c88 <radio_connect_enable+0x168>
   10e42:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   10e44:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   10e48:	f47f aec0 	bne.w	10bcc <radio_connect_enable+0xac>
   10e4c:	4b12      	ldr	r3, [pc, #72]	; (10e98 <radio_connect_enable+0x378>)
   10e4e:	9301      	str	r3, [sp, #4]
   10e50:	9300      	str	r3, [sp, #0]
   10e52:	4b12      	ldr	r3, [pc, #72]	; (10e9c <radio_connect_enable+0x37c>)
   10e54:	4a12      	ldr	r2, [pc, #72]	; (10ea0 <radio_connect_enable+0x380>)
   10e56:	681c      	ldr	r4, [r3, #0]
   10e58:	4912      	ldr	r1, [pc, #72]	; (10ea4 <radio_connect_enable+0x384>)
   10e5a:	4b13      	ldr	r3, [pc, #76]	; (10ea8 <radio_connect_enable+0x388>)
   10e5c:	4813      	ldr	r0, [pc, #76]	; (10eac <radio_connect_enable+0x38c>)
   10e5e:	47a0      	blx	r4
   10e60:	4040      	eors	r0, r0
   10e62:	f380 8811 	msr	BASEPRI, r0
   10e66:	f04f 0004 	mov.w	r0, #4
   10e6a:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10e6c:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   10e70:	33fa      	adds	r3, #250	; 0xfa
   10e72:	441a      	add	r2, r3
   10e74:	b292      	uxth	r2, r2
   10e76:	e78d      	b.n	10d94 <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10e78:	200c      	movs	r0, #12
   10e7a:	e7d0      	b.n	10e1e <radio_connect_enable+0x2fe>
   10e7c:	f3af 8000 	nop.w
   10e80:	1afd498d 	.word	0x1afd498d
   10e84:	00000007 	.word	0x00000007
   10e88:	3b9aca00 	.word	0x3b9aca00
   10e8c:	200009da 	.word	0x200009da
   10e90:	01c9c37f 	.word	0x01c9c37f
   10e94:	026259ff 	.word	0x026259ff
   10e98:	00015359 	.word	0x00015359
   10e9c:	20003a5c 	.word	0x20003a5c
   10ea0:	00016754 	.word	0x00016754
   10ea4:	0001679c 	.word	0x0001679c
   10ea8:	00018007 	.word	0x00018007
   10eac:	00018a60 	.word	0x00018a60
   10eb0:	200008c0 	.word	0x200008c0
   10eb4:	8e89bed6 	.word	0x8e89bed6

00010eb8 <ll_conn_update>:
{
   10eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ebc:	460c      	mov	r4, r1
   10ebe:	4690      	mov	r8, r2
   10ec0:	461d      	mov	r5, r3
   10ec2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   10ec6:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   10eca:	f7f9 fbb1 	bl	a630 <connection_get>
	if (!conn) {
   10ece:	b330      	cbz	r0, 10f1e <ll_conn_update+0x66>
	if (!cmd) {
   10ed0:	2c00      	cmp	r4, #0
   10ed2:	d14a      	bne.n	10f6a <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   10ed4:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   10ed8:	06d9      	lsls	r1, r3, #27
   10eda:	d407      	bmi.n	10eec <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   10edc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   10ee0:	069a      	lsls	r2, r3, #26
   10ee2:	d541      	bpl.n	10f68 <ll_conn_update+0xb0>
		     (conn->llcp_features &
   10ee4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   10ee8:	079b      	lsls	r3, r3, #30
   10eea:	d43d      	bmi.n	10f68 <ll_conn_update+0xb0>
		} else if (conn->role) {
   10eec:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10ef0:	2b00      	cmp	r3, #0
   10ef2:	da17      	bge.n	10f24 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10ef4:	201a      	movs	r0, #26
   10ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   10efa:	428b      	cmp	r3, r1
   10efc:	d00f      	beq.n	10f1e <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   10efe:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   10f02:	f003 0207 	and.w	r2, r3, #7
   10f06:	2a03      	cmp	r2, #3
   10f08:	d109      	bne.n	10f1e <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   10f0a:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   10f0e:	b2db      	uxtb	r3, r3
   10f10:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   10f14:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   10f18:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   10f1c:	e021      	b.n	10f62 <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10f1e:	200c      	movs	r0, #12
   10f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   10f24:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   10f28:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   10f2c:	429a      	cmp	r2, r3
   10f2e:	d1f6      	bne.n	10f1e <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10f30:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   10f34:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   10f38:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   10f3a:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10f3c:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   10f40:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   10f44:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   10f46:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   10f4a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   10f4e:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   10f52:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   10f56:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   10f5a:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   10f5e:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   10f62:	2000      	movs	r0, #0
   10f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   10f68:	2401      	movs	r4, #1
		cmd--;
   10f6a:	3c01      	subs	r4, #1
		if (cmd) {
   10f6c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   10f70:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   10f74:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   10f78:	d1bf      	bne.n	10efa <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   10f7a:	4299      	cmp	r1, r3
   10f7c:	d1cf      	bne.n	10f1e <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   10f7e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   10f82:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   10f86:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   10f8a:	b2db      	uxtb	r3, r3
   10f8c:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   10f90:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   10f92:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   10f96:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   10f9a:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   10f9e:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   10fa2:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   10fa6:	e7dc      	b.n	10f62 <ll_conn_update+0xaa>

00010fa8 <ll_chm_update>:
{
   10fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   10fac:	4c1e      	ldr	r4, [pc, #120]	; (11028 <ll_chm_update+0x80>)
   10fae:	4601      	mov	r1, r0
   10fb0:	2205      	movs	r2, #5
{
   10fb2:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   10fb4:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   10fb8:	f7f0 fe46 	bl	1c48 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   10fbc:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   10fc0:	2105      	movs	r1, #5
   10fc2:	f7f6 fcf9 	bl	79b8 <util_ones_count_get>
	_radio.data_chan_count =
   10fc6:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   10fca:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   10fce:	3c01      	subs	r4, #1
   10fd0:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   10fd2:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   10fd4:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   10fd8:	2cff      	cmp	r4, #255	; 0xff
   10fda:	d102      	bne.n	10fe2 <ll_chm_update+0x3a>
	return 0;
   10fdc:	2000      	movs	r0, #0
   10fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   10fe2:	4620      	mov	r0, r4
   10fe4:	f7f9 fb24 	bl	a630 <connection_get>
		if (!conn || conn->role) {
   10fe8:	4606      	mov	r6, r0
   10fea:	b1b8      	cbz	r0, 1101c <ll_chm_update+0x74>
   10fec:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10ff0:	2b00      	cmp	r3, #0
   10ff2:	db13      	blt.n	1101c <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   10ff4:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10ff8:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10ffc:	429a      	cmp	r2, r3
   10ffe:	d110      	bne.n	11022 <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   11000:	2205      	movs	r2, #5
   11002:	4629      	mov	r1, r5
   11004:	3079      	adds	r0, #121	; 0x79
   11006:	f7f0 fe1f 	bl	1c48 <memcpy>
		conn->llcp_req++;
   1100a:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   1100e:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   11012:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   11014:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   11018:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   1101c:	3c01      	subs	r4, #1
   1101e:	b2e4      	uxtb	r4, r4
   11020:	e7da      	b.n	10fd8 <ll_chm_update+0x30>
			return 1;
   11022:	2001      	movs	r0, #1
}
   11024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11028:	200008c0 	.word	0x200008c0

0001102c <ll_chm_get>:
{
   1102c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1102e:	460d      	mov	r5, r1
	conn = connection_get(handle);
   11030:	f7f9 fafe 	bl	a630 <connection_get>
	if (!conn) {
   11034:	4604      	mov	r4, r0
   11036:	b160      	cbz	r0, 11052 <ll_chm_get+0x26>
		conn->chm_update = 0;
   11038:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   1103a:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   1103e:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   11040:	2205      	movs	r2, #5
   11042:	4631      	mov	r1, r6
   11044:	4628      	mov	r0, r5
   11046:	f7f0 fdff 	bl	1c48 <memcpy>
	} while (conn->chm_update);
   1104a:	7f20      	ldrb	r0, [r4, #28]
   1104c:	2800      	cmp	r0, #0
   1104e:	d1f6      	bne.n	1103e <ll_chm_get+0x12>
   11050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   11052:	2001      	movs	r0, #1
}
   11054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011056 <ll_feature_req_send>:
{
   11056:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   11058:	f7f9 faea 	bl	a630 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1105c:	b168      	cbz	r0, 1107a <ll_feature_req_send+0x24>
   1105e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11062:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11066:	4293      	cmp	r3, r2
   11068:	d107      	bne.n	1107a <ll_feature_req_send+0x24>
	conn->llcp_req++;
   1106a:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   1106c:	2204      	movs	r2, #4
	conn->llcp_req++;
   1106e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   11072:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   11076:	2000      	movs	r0, #0
   11078:	bd08      	pop	{r3, pc}
		return 1;
   1107a:	2001      	movs	r0, #1
}
   1107c:	bd08      	pop	{r3, pc}

0001107e <ll_version_ind_send>:
{
   1107e:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   11080:	f7f9 fad6 	bl	a630 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   11084:	b168      	cbz	r0, 110a2 <ll_version_ind_send+0x24>
   11086:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1108a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1108e:	4293      	cmp	r3, r2
   11090:	d107      	bne.n	110a2 <ll_version_ind_send+0x24>
	conn->llcp_req++;
   11092:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   11094:	2205      	movs	r2, #5
	conn->llcp_req++;
   11096:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   1109a:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   1109e:	2000      	movs	r0, #0
   110a0:	bd08      	pop	{r3, pc}
		return 1;
   110a2:	2001      	movs	r0, #1
}
   110a4:	bd08      	pop	{r3, pc}

000110a6 <ll_terminate_ind_send>:
{
   110a6:	b510      	push	{r4, lr}
   110a8:	460c      	mov	r4, r1
	conn = connection_get(handle);
   110aa:	f7f9 fac1 	bl	a630 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   110ae:	b160      	cbz	r0, 110ca <ll_terminate_ind_send+0x24>
   110b0:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   110b4:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   110b8:	4293      	cmp	r3, r2
   110ba:	d106      	bne.n	110ca <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   110bc:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   110be:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   110c2:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   110c6:	2000      	movs	r0, #0
   110c8:	bd10      	pop	{r4, pc}
		return 1;
   110ca:	2001      	movs	r0, #1
}
   110cc:	bd10      	pop	{r4, pc}

000110ce <ll_tx_pwr_lvl_get>:
{
   110ce:	b510      	push	{r4, lr}
   110d0:	4614      	mov	r4, r2
	conn = connection_get(handle);
   110d2:	f7f9 faad 	bl	a630 <connection_get>
	if (!conn) {
   110d6:	b110      	cbz	r0, 110de <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   110d8:	2000      	movs	r0, #0
   110da:	7020      	strb	r0, [r4, #0]
	return 0;
   110dc:	bd10      	pop	{r4, pc}
		return 1;
   110de:	2001      	movs	r0, #1
}
   110e0:	bd10      	pop	{r4, pc}

000110e2 <ll_apto_get>:
{
   110e2:	b510      	push	{r4, lr}
   110e4:	460c      	mov	r4, r1
	conn = connection_get(handle);
   110e6:	f7f9 faa3 	bl	a630 <connection_get>
	if (!conn) {
   110ea:	b160      	cbz	r0, 11106 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   110ec:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   110ee:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   110f2:	435a      	muls	r2, r3
   110f4:	237d      	movs	r3, #125	; 0x7d
   110f6:	4353      	muls	r3, r2
	return 0;
   110f8:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   110fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   110fe:	fb93 f3f2 	sdiv	r3, r3, r2
   11102:	8023      	strh	r3, [r4, #0]
	return 0;
   11104:	bd10      	pop	{r4, pc}
		return 1;
   11106:	2001      	movs	r0, #1
}
   11108:	bd10      	pop	{r4, pc}

0001110a <ll_apto_set>:
{
   1110a:	b510      	push	{r4, lr}
   1110c:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1110e:	f7f9 fa8f 	bl	a630 <connection_get>
	if (!conn) {
   11112:	b170      	cbz	r0, 11132 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   11114:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   11116:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1111a:	4353      	muls	r3, r2
   1111c:	f242 7110 	movw	r1, #10000	; 0x2710
   11120:	fb01 3404 	mla	r4, r1, r4, r3
   11124:	3c01      	subs	r4, #1
   11126:	fb94 f4f3 	sdiv	r4, r4, r3
   1112a:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   1112e:	2000      	movs	r0, #0
   11130:	bd10      	pop	{r4, pc}
		return 1;
   11132:	2001      	movs	r0, #1
}
   11134:	bd10      	pop	{r4, pc}

00011136 <ll_length_req_send>:
{
   11136:	b570      	push	{r4, r5, r6, lr}
   11138:	460e      	mov	r6, r1
   1113a:	4615      	mov	r5, r2
	conn = connection_get(handle);
   1113c:	f7f9 fa78 	bl	a630 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11140:	b1d0      	cbz	r0, 11178 <ll_length_req_send+0x42>
   11142:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11146:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1114a:	429a      	cmp	r2, r3
   1114c:	d114      	bne.n	11178 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   1114e:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11152:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   11156:	4293      	cmp	r3, r2
   11158:	d10e      	bne.n	11178 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1115a:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   1115e:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   11162:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   11164:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   11168:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1116c:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   11170:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   11174:	2000      	movs	r0, #0
   11176:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   11178:	2001      	movs	r0, #1
}
   1117a:	bd70      	pop	{r4, r5, r6, pc}

0001117c <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   1117c:	4b03      	ldr	r3, [pc, #12]	; (1118c <ll_length_default_get+0x10>)
   1117e:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   11182:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   11184:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   11188:	800b      	strh	r3, [r1, #0]
   1118a:	4770      	bx	lr
   1118c:	200008c0 	.word	0x200008c0

00011190 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   11190:	4b03      	ldr	r3, [pc, #12]	; (111a0 <ll_length_default_set+0x10>)
   11192:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   11196:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   1119a:	2000      	movs	r0, #0
   1119c:	4770      	bx	lr
   1119e:	bf00      	nop
   111a0:	200008c0 	.word	0x200008c0

000111a4 <ll_length_max_get>:
{
   111a4:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   111a6:	241b      	movs	r4, #27
   111a8:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   111aa:	f44f 70a4 	mov.w	r0, #328	; 0x148
   111ae:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   111b0:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   111b2:	8018      	strh	r0, [r3, #0]
   111b4:	bd10      	pop	{r4, pc}

000111b6 <ll_phy_get>:
{
   111b6:	b538      	push	{r3, r4, r5, lr}
   111b8:	460d      	mov	r5, r1
   111ba:	4614      	mov	r4, r2
	conn = connection_get(handle);
   111bc:	f7f9 fa38 	bl	a630 <connection_get>
	if (!conn) {
   111c0:	b158      	cbz	r0, 111da <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   111c2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   111c6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   111ca:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   111cc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   111d0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   111d4:	7023      	strb	r3, [r4, #0]
	return 0;
   111d6:	2000      	movs	r0, #0
   111d8:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   111da:	2001      	movs	r0, #1
}
   111dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000111e0 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   111e0:	4b03      	ldr	r3, [pc, #12]	; (111f0 <ll_phy_default_set+0x10>)
   111e2:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   111e6:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   111ea:	2000      	movs	r0, #0
   111ec:	4770      	bx	lr
   111ee:	bf00      	nop
   111f0:	200008c0 	.word	0x200008c0

000111f4 <ll_phy_req_send>:
{
   111f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   111f8:	4689      	mov	r9, r1
   111fa:	4690      	mov	r8, r2
   111fc:	461f      	mov	r7, r3
	conn = connection_get(handle);
   111fe:	f7f9 fa17 	bl	a630 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11202:	b320      	cbz	r0, 1124e <ll_phy_req_send+0x5a>
   11204:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11208:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1120c:	429a      	cmp	r2, r3
   1120e:	d11e      	bne.n	1124e <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   11210:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11214:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   11218:	429d      	cmp	r5, r3
   1121a:	d118      	bne.n	1124e <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1121c:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   11220:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   11224:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   11228:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   1122c:	f046 0102 	orr.w	r1, r6, #2
   11230:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   11234:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   11236:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   11238:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   1123c:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   11240:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   11244:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   11248:	2000      	movs	r0, #0
   1124a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   1124e:	2001      	movs	r0, #1
}
   11250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011254 <ll_rx_get>:
{
   11254:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11258:	4605      	mov	r5, r0
   1125a:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   1125c:	4918      	ldr	r1, [pc, #96]	; (112c0 <ll_rx_get+0x6c>)
   1125e:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   11262:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   11266:	4293      	cmp	r3, r2
   11268:	460f      	mov	r7, r1
   1126a:	d01f      	beq.n	112ac <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   1126c:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   11270:	f201 1177 	addw	r1, r1, #375	; 0x177
   11274:	f898 2000 	ldrb.w	r2, [r8]
   11278:	f7f9 f990 	bl	a59c <tx_cmplt_get>
		if (!cmplt) {
   1127c:	4604      	mov	r4, r0
   1127e:	b9e0      	cbnz	r0, 112ba <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   11280:	ae02      	add	r6, sp, #8
   11282:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   11286:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   1128a:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   1128e:	4631      	mov	r1, r6
   11290:	f10d 0006 	add.w	r0, sp, #6
   11294:	f7f9 f982 	bl	a59c <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   11298:	b934      	cbnz	r4, 112a8 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   1129a:	b928      	cbnz	r0, 112a8 <ll_rx_get+0x54>
			*node_rx = _node_rx;
   1129c:	f8c5 8000 	str.w	r8, [r5]
}
   112a0:	4620      	mov	r0, r4
   112a2:	b002      	add	sp, #8
   112a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   112a8:	4604      	mov	r4, r0
   112aa:	e7ee      	b.n	1128a <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   112ac:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   112b0:	f201 1177 	addw	r1, r1, #375	; 0x177
   112b4:	f7f9 f972 	bl	a59c <tx_cmplt_get>
   112b8:	4604      	mov	r4, r0
		*node_rx = NULL;
   112ba:	2300      	movs	r3, #0
   112bc:	602b      	str	r3, [r5, #0]
   112be:	e7ef      	b.n	112a0 <ll_rx_get+0x4c>
   112c0:	200008c0 	.word	0x200008c0

000112c4 <ll_rx_mem_release>:
{
   112c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   112c8:	4c1c      	ldr	r4, [pc, #112]	; (1133c <ll_rx_mem_release+0x78>)
{
   112ca:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   112cc:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   112ce:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   112d2:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   112d6:	b930      	cbnz	r0, 112e6 <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   112d8:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   112da:	20ff      	movs	r0, #255	; 0xff
}
   112dc:	b002      	add	sp, #8
   112de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   112e2:	f7f9 b881 	b.w	a3e8 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   112e6:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   112e8:	f8d0 8000 	ldr.w	r8, [r0]
   112ec:	2a0c      	cmp	r2, #12
   112ee:	d807      	bhi.n	11300 <ll_rx_mem_release+0x3c>
   112f0:	2301      	movs	r3, #1
   112f2:	4093      	lsls	r3, r2
   112f4:	f641 727e 	movw	r2, #8062	; 0x1f7e
   112f8:	4213      	tst	r3, r2
   112fa:	d111      	bne.n	11320 <ll_rx_mem_release+0x5c>
   112fc:	061b      	lsls	r3, r3, #24
   112fe:	d414      	bmi.n	1132a <ll_rx_mem_release+0x66>
			LL_ASSERT(0);
   11300:	4b0f      	ldr	r3, [pc, #60]	; (11340 <ll_rx_mem_release+0x7c>)
   11302:	9301      	str	r3, [sp, #4]
   11304:	9300      	str	r3, [sp, #0]
   11306:	4b0f      	ldr	r3, [pc, #60]	; (11344 <ll_rx_mem_release+0x80>)
   11308:	4a0f      	ldr	r2, [pc, #60]	; (11348 <ll_rx_mem_release+0x84>)
   1130a:	681c      	ldr	r4, [r3, #0]
   1130c:	490f      	ldr	r1, [pc, #60]	; (1134c <ll_rx_mem_release+0x88>)
   1130e:	4b10      	ldr	r3, [pc, #64]	; (11350 <ll_rx_mem_release+0x8c>)
   11310:	4810      	ldr	r0, [pc, #64]	; (11354 <ll_rx_mem_release+0x90>)
   11312:	47a0      	blx	r4
   11314:	4040      	eors	r0, r0
   11316:	f380 8811 	msr	BASEPRI, r0
   1131a:	f04f 0004 	mov.w	r0, #4
   1131e:	df02      	svc	2
			mem_release(_node_rx_free,
   11320:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   11322:	f7f6 f9b8 	bl	7696 <mem_release>
{
   11326:	4640      	mov	r0, r8
   11328:	e7d5      	b.n	112d6 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1132a:	88c2      	ldrh	r2, [r0, #6]
   1132c:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   11330:	f44f 71aa 	mov.w	r1, #340	; 0x154
   11334:	f7f6 f9ca 	bl	76cc <mem_get>
			mem_release(conn, &_radio.conn_free);
   11338:	4639      	mov	r1, r7
   1133a:	e7f2      	b.n	11322 <ll_rx_mem_release+0x5e>
   1133c:	200009f0 	.word	0x200009f0
   11340:	00015359 	.word	0x00015359
   11344:	20003a5c 	.word	0x20003a5c
   11348:	00016754 	.word	0x00016754
   1134c:	0001679c 	.word	0x0001679c
   11350:	000181ab 	.word	0x000181ab
   11354:	000166c8 	.word	0x000166c8

00011358 <do_radio_rx_fc_set>:
	if (req == ack) {
   11358:	4291      	cmp	r1, r2
{
   1135a:	b510      	push	{r4, lr}
   1135c:	4b14      	ldr	r3, [pc, #80]	; (113b0 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   1135e:	d119      	bne.n	11394 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   11360:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   11364:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   11368:	4294      	cmp	r4, r2
   1136a:	d111      	bne.n	11390 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   1136c:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   1136e:	bf14      	ite	ne
   11370:	460a      	movne	r2, r1
   11372:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   11374:	3a01      	subs	r2, #1
   11376:	b2d2      	uxtb	r2, r2
   11378:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   1137c:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   11380:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   11384:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   11388:	4291      	cmp	r1, r2
   1138a:	d00f      	beq.n	113ac <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   1138c:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   11390:	2001      	movs	r0, #1
   11392:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   11394:	b929      	cbnz	r1, 113a2 <do_radio_rx_fc_set+0x4a>
   11396:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   1139a:	1a18      	subs	r0, r3, r0
   1139c:	bf18      	it	ne
   1139e:	2001      	movne	r0, #1
   113a0:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   113a2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   113a6:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   113aa:	e7f6      	b.n	1139a <do_radio_rx_fc_set+0x42>
	return 0;
   113ac:	2000      	movs	r0, #0
}
   113ae:	bd10      	pop	{r4, pc}
   113b0:	200008c0 	.word	0x200008c0

000113b4 <radio_rx_fc_set>:
{
   113b4:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   113b6:	4b14      	ldr	r3, [pc, #80]	; (11408 <radio_rx_fc_set+0x54>)
   113b8:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   113bc:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   113be:	b302      	cbz	r2, 11402 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   113c0:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   113c4:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   113c6:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   113ca:	b135      	cbz	r5, 113da <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   113cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   113d0:	4298      	cmp	r0, r3
   113d2:	d016      	beq.n	11402 <radio_rx_fc_set+0x4e>
}
   113d4:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   113d6:	f7ff bfbf 	b.w	11358 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   113da:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   113de:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   113e2:	42a0      	cmp	r0, r4
   113e4:	d10d      	bne.n	11402 <radio_rx_fc_set+0x4e>
   113e6:	4291      	cmp	r1, r2
   113e8:	d00b      	beq.n	11402 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   113ea:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   113ee:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   113f2:	42a0      	cmp	r0, r4
   113f4:	d005      	beq.n	11402 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   113f6:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   113fa:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   113fc:	bf08      	it	eq
   113fe:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   11402:	2000      	movs	r0, #0
   11404:	bc30      	pop	{r4, r5}
   11406:	4770      	bx	lr
   11408:	200008c0 	.word	0x200008c0

0001140c <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   1140c:	4801      	ldr	r0, [pc, #4]	; (11414 <ll_tx_mem_acquire+0x8>)
   1140e:	f7f6 b928 	b.w	7662 <mem_acquire>
   11412:	bf00      	nop
   11414:	20000a24 	.word	0x20000a24

00011418 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   11418:	4901      	ldr	r1, [pc, #4]	; (11420 <ll_tx_mem_release+0x8>)
   1141a:	f7f6 b93c 	b.w	7696 <mem_release>
   1141e:	bf00      	nop
   11420:	20000a24 	.word	0x20000a24

00011424 <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   11424:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   11426:	4d34      	ldr	r5, [pc, #208]	; (114f8 <ll_tx_mem_enqueue+0xd4>)
   11428:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   1142c:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   11430:	3401      	adds	r4, #1
{
   11432:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   11434:	b2e4      	uxtb	r4, r4
{
   11436:	4607      	mov	r7, r0
   11438:	460e      	mov	r6, r1
		last = 0;
   1143a:	42a3      	cmp	r3, r4
   1143c:	bf08      	it	eq
   1143e:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   11440:	f7f9 f8f6 	bl	a630 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   11444:	2800      	cmp	r0, #0
   11446:	d055      	beq.n	114f4 <ll_tx_mem_enqueue+0xd0>
   11448:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   1144c:	429c      	cmp	r4, r3
   1144e:	d051      	beq.n	114f4 <ll_tx_mem_enqueue+0xd0>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   11450:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   11454:	7972      	ldrb	r2, [r6, #5]
   11456:	3b07      	subs	r3, #7
   11458:	429a      	cmp	r2, r3
   1145a:	d90f      	bls.n	1147c <ll_tx_mem_enqueue+0x58>
   1145c:	4b27      	ldr	r3, [pc, #156]	; (114fc <ll_tx_mem_enqueue+0xd8>)
   1145e:	9301      	str	r3, [sp, #4]
   11460:	9300      	str	r3, [sp, #0]
   11462:	4b27      	ldr	r3, [pc, #156]	; (11500 <ll_tx_mem_enqueue+0xdc>)
   11464:	4a27      	ldr	r2, [pc, #156]	; (11504 <ll_tx_mem_enqueue+0xe0>)
   11466:	681c      	ldr	r4, [r3, #0]
   11468:	4927      	ldr	r1, [pc, #156]	; (11508 <ll_tx_mem_enqueue+0xe4>)
   1146a:	4b28      	ldr	r3, [pc, #160]	; (1150c <ll_tx_mem_enqueue+0xe8>)
   1146c:	4828      	ldr	r0, [pc, #160]	; (11510 <ll_tx_mem_enqueue+0xec>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1146e:	47a0      	blx	r4
   11470:	4040      	eors	r0, r0
   11472:	f380 8811 	msr	BASEPRI, r0
   11476:	f04f 0004 	mov.w	r0, #4
   1147a:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   1147c:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   11480:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   11484:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   11488:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   1148c:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   1148e:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   11492:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11496:	2b00      	cmp	r3, #0
   11498:	db02      	blt.n	114a0 <ll_tx_mem_enqueue+0x7c>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   1149a:	2000      	movs	r0, #0
}
   1149c:	b009      	add	sp, #36	; 0x24
   1149e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   114a0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   114a2:	2b00      	cmp	r3, #0
   114a4:	d0f9      	beq.n	1149a <ll_tx_mem_enqueue+0x76>
   114a6:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   114aa:	f012 0302 	ands.w	r3, r2, #2
   114ae:	d1f4      	bne.n	1149a <ll_tx_mem_enqueue+0x76>
		conn->slave.latency_cancel = 1;
   114b0:	f042 0202 	orr.w	r2, r2, #2
   114b4:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   114b8:	f890 2020 	ldrb.w	r2, [r0, #32]
   114bc:	4915      	ldr	r1, [pc, #84]	; (11514 <ll_tx_mem_enqueue+0xf0>)
   114be:	9105      	str	r1, [sp, #20]
   114c0:	3207      	adds	r2, #7
   114c2:	2101      	movs	r1, #1
   114c4:	9006      	str	r0, [sp, #24]
   114c6:	9304      	str	r3, [sp, #16]
   114c8:	9103      	str	r1, [sp, #12]
   114ca:	9302      	str	r3, [sp, #8]
   114cc:	9301      	str	r3, [sp, #4]
   114ce:	9300      	str	r3, [sp, #0]
   114d0:	4618      	mov	r0, r3
   114d2:	b2d2      	uxtb	r2, r2
   114d4:	2103      	movs	r1, #3
   114d6:	f7f6 ff9f 	bl	8418 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   114da:	f030 0302 	bics.w	r3, r0, #2
   114de:	d0dc      	beq.n	1149a <ll_tx_mem_enqueue+0x76>
   114e0:	4b06      	ldr	r3, [pc, #24]	; (114fc <ll_tx_mem_enqueue+0xd8>)
   114e2:	9301      	str	r3, [sp, #4]
   114e4:	9300      	str	r3, [sp, #0]
   114e6:	4b06      	ldr	r3, [pc, #24]	; (11500 <ll_tx_mem_enqueue+0xdc>)
   114e8:	4a06      	ldr	r2, [pc, #24]	; (11504 <ll_tx_mem_enqueue+0xe0>)
   114ea:	681c      	ldr	r4, [r3, #0]
   114ec:	4906      	ldr	r1, [pc, #24]	; (11508 <ll_tx_mem_enqueue+0xe4>)
   114ee:	4b07      	ldr	r3, [pc, #28]	; (1150c <ll_tx_mem_enqueue+0xe8>)
   114f0:	4809      	ldr	r0, [pc, #36]	; (11518 <ll_tx_mem_enqueue+0xf4>)
   114f2:	e7bc      	b.n	1146e <ll_tx_mem_enqueue+0x4a>
		return 1;
   114f4:	2001      	movs	r0, #1
   114f6:	e7d1      	b.n	1149c <ll_tx_mem_enqueue+0x78>
   114f8:	200008c0 	.word	0x200008c0
   114fc:	00015359 	.word	0x00015359
   11500:	20003a5c 	.word	0x20003a5c
   11504:	00016754 	.word	0x00016754
   11508:	0001679c 	.word	0x0001679c
   1150c:	000181d9 	.word	0x000181d9
   11510:	000187bf 	.word	0x000187bf
   11514:	0000b411 	.word	0x0000b411
   11518:	00018211 	.word	0x00018211

0001151c <ll_enc_req_send>:
{
   1151c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11520:	4607      	mov	r7, r0
   11522:	4688      	mov	r8, r1
   11524:	4616      	mov	r6, r2
   11526:	4699      	mov	r9, r3
	conn = connection_get(handle);
   11528:	f7f9 f882 	bl	a630 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1152c:	4605      	mov	r5, r0
   1152e:	b910      	cbnz	r0, 11536 <ll_enc_req_send+0x1a>
			return 1;
   11530:	2001      	movs	r0, #1
   11532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   11536:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1153a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1153e:	429a      	cmp	r2, r3
   11540:	d1f6      	bne.n	11530 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   11542:	f7ff ff63 	bl	1140c <ll_tx_mem_acquire>
	if (node_tx) {
   11546:	4604      	mov	r4, r0
   11548:	2800      	cmp	r0, #0
   1154a:	d0f1      	beq.n	11530 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   1154c:	2210      	movs	r2, #16
   1154e:	4649      	mov	r1, r9
   11550:	f105 0084 	add.w	r0, r5, #132	; 0x84
   11554:	f7f0 fb78 	bl	1c48 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   11558:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1155c:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   11560:	d124      	bne.n	115ac <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   11562:	7923      	ldrb	r3, [r4, #4]
   11564:	f043 0303 	orr.w	r3, r3, #3
   11568:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   1156a:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   1156c:	2208      	movs	r2, #8
			pdu_data_tx->len =
   1156e:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   11570:	2303      	movs	r3, #3
   11572:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   11574:	4641      	mov	r1, r8
   11576:	18a0      	adds	r0, r4, r2
   11578:	f7f0 fb66 	bl	1c48 <memcpy>
			enc_req->ediv[0] = ediv[0];
   1157c:	7833      	ldrb	r3, [r6, #0]
   1157e:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   11580:	7873      	ldrb	r3, [r6, #1]
   11582:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   11584:	2108      	movs	r1, #8
   11586:	f104 0012 	add.w	r0, r4, #18
   1158a:	f7f7 f8a3 	bl	86d4 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   1158e:	2104      	movs	r1, #4
   11590:	f104 001a 	add.w	r0, r4, #26
   11594:	f7f7 f89e 	bl	86d4 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   11598:	4621      	mov	r1, r4
   1159a:	4638      	mov	r0, r7
   1159c:	f7ff ff42 	bl	11424 <ll_tx_mem_enqueue>
   115a0:	2601      	movs	r6, #1
   115a2:	b1d0      	cbz	r0, 115da <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   115a4:	4620      	mov	r0, r4
   115a6:	f7ff ff37 	bl	11418 <ll_tx_mem_release>
   115aa:	e7c1      	b.n	11530 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   115ac:	2b30      	cmp	r3, #48	; 0x30
   115ae:	d1f9      	bne.n	115a4 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   115b0:	2208      	movs	r2, #8
   115b2:	4641      	mov	r1, r8
   115b4:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   115b8:	f7f0 fb46 	bl	1c48 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   115bc:	7833      	ldrb	r3, [r6, #0]
   115be:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   115c2:	7873      	ldrb	r3, [r6, #1]
   115c4:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   115c8:	7923      	ldrb	r3, [r4, #4]
   115ca:	f043 0303 	orr.w	r3, r3, #3
   115ce:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   115d0:	2301      	movs	r3, #1
   115d2:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   115d4:	230a      	movs	r3, #10
   115d6:	71e3      	strb	r3, [r4, #7]
   115d8:	e7de      	b.n	11598 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   115da:	2303      	movs	r3, #3
   115dc:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   115e0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   115e4:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   115e8:	3301      	adds	r3, #1
   115ea:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   115ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   115f2:	0000      	movs	r0, r0
   115f4:	0000      	movs	r0, r0
	...

000115f8 <radio_scan_enable>:
{
   115f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   115fc:	4c68      	ldr	r4, [pc, #416]	; (117a0 <radio_scan_enable+0x1a8>)
   115fe:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   11602:	b08e      	sub	sp, #56	; 0x38
   11604:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   11606:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1160a:	f04f 0302 	mov.w	r3, #2
{
   1160e:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11610:	930b      	str	r3, [sp, #44]	; 0x2c
{
   11612:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   11614:	d003      	beq.n	1161e <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11616:	200c      	movs	r0, #12
}
   11618:	b00e      	add	sp, #56	; 0x38
   1161a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   1161e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   11622:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   11626:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   1162a:	0840      	lsrs	r0, r0, #1
   1162c:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   11630:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   11634:	f360 0200 	bfi	r2, r0, #0, #1
   11638:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   1163c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   11640:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   11644:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   11648:	2206      	movs	r2, #6
   1164a:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   1164e:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   11652:	4e54      	ldr	r6, [pc, #336]	; (117a4 <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   11654:	f7f0 faf8 	bl	1c48 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   11658:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   1165c:	f04f 0991 	mov.w	r9, #145	; 0x91
   11660:	fba2 0106 	umull	r0, r1, r2, r6
   11664:	fb09 1102 	mla	r1, r9, r2, r1
   11668:	a34b      	add	r3, pc, #300	; (adr r3, 11798 <radio_scan_enable+0x1a0>)
   1166a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1166e:	f7ee fdd1 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   11672:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   11676:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   1167a:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   1167e:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   11682:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   11686:	b2ba      	uxth	r2, r7
   11688:	fba2 6706 	umull	r6, r7, r2, r6
   1168c:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   11690:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   11694:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   11696:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   1169a:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   1169e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   116a2:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   116a6:	a33c      	add	r3, pc, #240	; (adr r3, 11798 <radio_scan_enable+0x1a0>)
   116a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   116ac:	4630      	mov	r0, r6
   116ae:	4639      	mov	r1, r7
   116b0:	f7ee fdb0 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   116b4:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   116b8:	459a      	cmp	sl, r3
   116ba:	bf94      	ite	ls
   116bc:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   116c0:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   116c4:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   116c8:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   116ca:	bf38      	it	cc
   116cc:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   116d0:	f7f6 ffc0 	bl	8654 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   116d4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   116d8:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   116da:	2b00      	cmp	r3, #0
   116dc:	d045      	beq.n	1176a <radio_scan_enable+0x172>
		us_offset = 0;
   116de:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   116e0:	980c      	ldr	r0, [sp, #48]	; 0x30
   116e2:	4931      	ldr	r1, [pc, #196]	; (117a8 <radio_scan_enable+0x1b0>)
   116e4:	a32c      	add	r3, pc, #176	; (adr r3, 11798 <radio_scan_enable+0x1a0>)
   116e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   116ea:	fba0 0101 	umull	r0, r1, r0, r1
   116ee:	f7ee fd91 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   116f2:	ab0b      	add	r3, sp, #44	; 0x2c
   116f4:	9308      	str	r3, [sp, #32]
   116f6:	4b2d      	ldr	r3, [pc, #180]	; (117ac <radio_scan_enable+0x1b4>)
   116f8:	9307      	str	r3, [sp, #28]
   116fa:	4b2d      	ldr	r3, [pc, #180]	; (117b0 <radio_scan_enable+0x1b8>)
   116fc:	9305      	str	r3, [sp, #20]
   116fe:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   11702:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11706:	4443      	add	r3, r8
   11708:	2500      	movs	r5, #0
   1170a:	4482      	add	sl, r0
   1170c:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   1170e:	4630      	mov	r0, r6
   11710:	a321      	add	r3, pc, #132	; (adr r3, 11798 <radio_scan_enable+0x1a0>)
   11712:	e9d3 2300 	ldrd	r2, r3, [r3]
   11716:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11718:	9506      	str	r5, [sp, #24]
   1171a:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   1171c:	f7ee fd7a 	bl	214 <__aeabi_uldivmod>
   11720:	4610      	mov	r0, r2
   11722:	4619      	mov	r1, r3
   11724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11728:	2300      	movs	r3, #0
   1172a:	f7ee fd73 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1172e:	e88d 0220 	stmia.w	sp, {r5, r9}
   11732:	9002      	str	r0, [sp, #8]
   11734:	4653      	mov	r3, sl
   11736:	2206      	movs	r2, #6
   11738:	2103      	movs	r1, #3
   1173a:	4628      	mov	r0, r5
   1173c:	f7f6 fe1c 	bl	8378 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   11740:	2802      	cmp	r0, #2
   11742:	d023      	beq.n	1178c <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   11744:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11746:	2d00      	cmp	r5, #0
   11748:	f47f af65 	bne.w	11616 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   1174c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   11750:	f043 0301 	orr.w	r3, r3, #1
   11754:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   11758:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   1175c:	2b00      	cmp	r3, #0
   1175e:	db02      	blt.n	11766 <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   11760:	2002      	movs	r0, #2
   11762:	f000 fecf 	bl	12504 <ll_adv_scan_state_cb>
	return 0;
   11766:	4628      	mov	r0, r5
   11768:	e756      	b.n	11618 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   1176a:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   1176e:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   11770:	aa0d      	add	r2, sp, #52	; 0x34
   11772:	ab0c      	add	r3, sp, #48	; 0x30
   11774:	4441      	add	r1, r8
   11776:	2003      	movs	r0, #3
   11778:	f7f9 fb8a 	bl	ae90 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   1177c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1177e:	2b00      	cmp	r3, #0
   11780:	d0ae      	beq.n	116e0 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   11782:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   11786:	e7ab      	b.n	116e0 <radio_scan_enable+0xe8>
			cpu_sleep();
   11788:	f7f8 fd54 	bl	a234 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   1178c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1178e:	2b02      	cmp	r3, #2
   11790:	d0fa      	beq.n	11788 <radio_scan_enable+0x190>
   11792:	e7d7      	b.n	11744 <radio_scan_enable+0x14c>
   11794:	f3af 8000 	nop.w
   11798:	1afd498d 	.word	0x1afd498d
   1179c:	00000007 	.word	0x00000007
   117a0:	200008c0 	.word	0x200008c0
   117a4:	84e72a00 	.word	0x84e72a00
   117a8:	3b9aca00 	.word	0x3b9aca00
   117ac:	0000a279 	.word	0x0000a279
   117b0:	0000c2ad 	.word	0x0000c2ad

000117b4 <radio_scan_disable>:
{
   117b4:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   117b6:	2104      	movs	r1, #4
   117b8:	2006      	movs	r0, #6
   117ba:	f7f8 ff4f 	bl	a65c <role_disable>
	if (!status) {
   117be:	4605      	mov	r5, r0
   117c0:	b9e8      	cbnz	r0, 117fe <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   117c2:	4c10      	ldr	r4, [pc, #64]	; (11804 <radio_scan_disable+0x50>)
   117c4:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   117c8:	f360 0200 	bfi	r2, r0, #0, #1
   117cc:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   117d0:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   117d4:	2a00      	cmp	r2, #0
   117d6:	db01      	blt.n	117dc <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   117d8:	f000 fe94 	bl	12504 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   117dc:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   117e0:	b15e      	cbz	r6, 117fa <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   117e2:	2300      	movs	r3, #0
   117e4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   117e8:	4907      	ldr	r1, [pc, #28]	; (11808 <radio_scan_disable+0x54>)
   117ea:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   117ee:	f7f5 ff52 	bl	7696 <mem_release>
			mem_release(conn, &_radio.conn_free);
   117f2:	4906      	ldr	r1, [pc, #24]	; (1180c <radio_scan_disable+0x58>)
   117f4:	4630      	mov	r0, r6
   117f6:	f7f5 ff4e 	bl	7696 <mem_release>
}
   117fa:	4628      	mov	r0, r5
   117fc:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   117fe:	250c      	movs	r5, #12
   11800:	e7fb      	b.n	117fa <radio_scan_disable+0x46>
   11802:	bf00      	nop
   11804:	200008c0 	.word	0x200008c0
   11808:	20000a08 	.word	0x20000a08
   1180c:	200009cc 	.word	0x200009cc

00011810 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   11810:	4b03      	ldr	r3, [pc, #12]	; (11820 <ll_connect_disable+0x10>)
   11812:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   11816:	b10b      	cbz	r3, 1181c <ll_connect_disable+0xc>
	status = radio_scan_disable();
   11818:	f7ff bfcc 	b.w	117b4 <radio_scan_disable>
}
   1181c:	200c      	movs	r0, #12
   1181e:	4770      	bx	lr
   11820:	200008c0 	.word	0x200008c0

00011824 <ll_rx_dequeue>:
{
   11824:	b530      	push	{r4, r5, lr}
   11826:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   11828:	4d4c      	ldr	r5, [pc, #304]	; (1195c <ll_rx_dequeue+0x138>)
	struct radio_pdu_node_rx *node_rx = NULL;
   1182a:	aa04      	add	r2, sp, #16
   1182c:	2300      	movs	r3, #0
   1182e:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   11832:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   11836:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   1183a:	f7f5 ff7b 	bl	7734 <memq_dequeue>
   1183e:	462c      	mov	r4, r5
	LL_ASSERT(link);
   11840:	b978      	cbnz	r0, 11862 <ll_rx_dequeue+0x3e>
   11842:	4b47      	ldr	r3, [pc, #284]	; (11960 <ll_rx_dequeue+0x13c>)
   11844:	9301      	str	r3, [sp, #4]
   11846:	9300      	str	r3, [sp, #0]
   11848:	4b46      	ldr	r3, [pc, #280]	; (11964 <ll_rx_dequeue+0x140>)
   1184a:	4a47      	ldr	r2, [pc, #284]	; (11968 <ll_rx_dequeue+0x144>)
   1184c:	681c      	ldr	r4, [r3, #0]
   1184e:	4947      	ldr	r1, [pc, #284]	; (1196c <ll_rx_dequeue+0x148>)
   11850:	4b47      	ldr	r3, [pc, #284]	; (11970 <ll_rx_dequeue+0x14c>)
   11852:	4848      	ldr	r0, [pc, #288]	; (11974 <ll_rx_dequeue+0x150>)
		LL_ASSERT(_radio.link_rx_data_quota <
   11854:	47a0      	blx	r4
   11856:	4040      	eors	r0, r0
   11858:	f380 8811 	msr	BASEPRI, r0
   1185c:	f04f 0004 	mov.w	r0, #4
   11860:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   11862:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   11866:	f7f5 ff16 	bl	7696 <mem_release>
	switch (node_rx->hdr.type) {
   1186a:	9a03      	ldr	r2, [sp, #12]
   1186c:	7911      	ldrb	r1, [r2, #4]
   1186e:	290c      	cmp	r1, #12
   11870:	d807      	bhi.n	11882 <ll_rx_dequeue+0x5e>
   11872:	2301      	movs	r3, #1
   11874:	408b      	lsls	r3, r1
   11876:	f641 707e 	movw	r0, #8062	; 0x1f7e
   1187a:	4203      	tst	r3, r0
   1187c:	d10b      	bne.n	11896 <ll_rx_dequeue+0x72>
   1187e:	0618      	lsls	r0, r3, #24
   11880:	d41d      	bmi.n	118be <ll_rx_dequeue+0x9a>
		LL_ASSERT(0);
   11882:	4b37      	ldr	r3, [pc, #220]	; (11960 <ll_rx_dequeue+0x13c>)
   11884:	9301      	str	r3, [sp, #4]
   11886:	9300      	str	r3, [sp, #0]
   11888:	4b36      	ldr	r3, [pc, #216]	; (11964 <ll_rx_dequeue+0x140>)
   1188a:	4a37      	ldr	r2, [pc, #220]	; (11968 <ll_rx_dequeue+0x144>)
   1188c:	681c      	ldr	r4, [r3, #0]
   1188e:	4937      	ldr	r1, [pc, #220]	; (1196c <ll_rx_dequeue+0x148>)
   11890:	4b37      	ldr	r3, [pc, #220]	; (11970 <ll_rx_dequeue+0x14c>)
   11892:	4839      	ldr	r0, [pc, #228]	; (11978 <ll_rx_dequeue+0x154>)
   11894:	e7de      	b.n	11854 <ll_rx_dequeue+0x30>
		LL_ASSERT(_radio.link_rx_data_quota <
   11896:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   1189a:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   1189e:	3801      	subs	r0, #1
   118a0:	4283      	cmp	r3, r0
   118a2:	db09      	blt.n	118b8 <ll_rx_dequeue+0x94>
   118a4:	4b2e      	ldr	r3, [pc, #184]	; (11960 <ll_rx_dequeue+0x13c>)
   118a6:	9301      	str	r3, [sp, #4]
   118a8:	9300      	str	r3, [sp, #0]
   118aa:	4b2e      	ldr	r3, [pc, #184]	; (11964 <ll_rx_dequeue+0x140>)
   118ac:	4a2e      	ldr	r2, [pc, #184]	; (11968 <ll_rx_dequeue+0x144>)
   118ae:	681c      	ldr	r4, [r3, #0]
   118b0:	492e      	ldr	r1, [pc, #184]	; (1196c <ll_rx_dequeue+0x148>)
   118b2:	4b2f      	ldr	r3, [pc, #188]	; (11970 <ll_rx_dequeue+0x14c>)
   118b4:	4831      	ldr	r0, [pc, #196]	; (1197c <ll_rx_dequeue+0x158>)
   118b6:	e7cd      	b.n	11854 <ll_rx_dequeue+0x30>
		_radio.link_rx_data_quota++;
   118b8:	3301      	adds	r3, #1
   118ba:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   118be:	2906      	cmp	r1, #6
   118c0:	d13a      	bne.n	11938 <ll_rx_dequeue+0x114>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   118c2:	7ad3      	ldrb	r3, [r2, #11]
   118c4:	2b3c      	cmp	r3, #60	; 0x3c
   118c6:	d00f      	beq.n	118e8 <ll_rx_dequeue+0xc4>
   118c8:	7b12      	ldrb	r2, [r2, #12]
   118ca:	bb02      	cbnz	r2, 1190e <ll_rx_dequeue+0xea>
			LL_ASSERT(_radio.scanner.is_enabled);
   118cc:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   118d0:	07d9      	lsls	r1, r3, #31
   118d2:	d433      	bmi.n	1193c <ll_rx_dequeue+0x118>
   118d4:	4b22      	ldr	r3, [pc, #136]	; (11960 <ll_rx_dequeue+0x13c>)
   118d6:	9301      	str	r3, [sp, #4]
   118d8:	9300      	str	r3, [sp, #0]
   118da:	4b22      	ldr	r3, [pc, #136]	; (11964 <ll_rx_dequeue+0x140>)
   118dc:	4a22      	ldr	r2, [pc, #136]	; (11968 <ll_rx_dequeue+0x144>)
   118de:	681c      	ldr	r4, [r3, #0]
   118e0:	4922      	ldr	r1, [pc, #136]	; (1196c <ll_rx_dequeue+0x148>)
   118e2:	4b23      	ldr	r3, [pc, #140]	; (11970 <ll_rx_dequeue+0x14c>)
   118e4:	4826      	ldr	r0, [pc, #152]	; (11980 <ll_rx_dequeue+0x15c>)
   118e6:	e7b5      	b.n	11854 <ll_rx_dequeue+0x30>
				_radio.advertiser.conn = NULL;
   118e8:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   118ea:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   118ee:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   118f2:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   118f6:	2b00      	cmp	r3, #0
   118f8:	db0b      	blt.n	11912 <ll_rx_dequeue+0xee>
   118fa:	4b19      	ldr	r3, [pc, #100]	; (11960 <ll_rx_dequeue+0x13c>)
   118fc:	9301      	str	r3, [sp, #4]
   118fe:	9300      	str	r3, [sp, #0]
   11900:	4b18      	ldr	r3, [pc, #96]	; (11964 <ll_rx_dequeue+0x140>)
   11902:	4a19      	ldr	r2, [pc, #100]	; (11968 <ll_rx_dequeue+0x144>)
   11904:	681c      	ldr	r4, [r3, #0]
   11906:	4919      	ldr	r1, [pc, #100]	; (1196c <ll_rx_dequeue+0x148>)
   11908:	4b19      	ldr	r3, [pc, #100]	; (11970 <ll_rx_dequeue+0x14c>)
   1190a:	481e      	ldr	r0, [pc, #120]	; (11984 <ll_rx_dequeue+0x160>)
   1190c:	e7a2      	b.n	11854 <ll_rx_dequeue+0x30>
		struct connection *conn = NULL;
   1190e:	2500      	movs	r5, #0
   11910:	e7ef      	b.n	118f2 <ll_rx_dequeue+0xce>
			_radio.advertiser.is_enabled = 0;
   11912:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11916:	f36f 13c7 	bfc	r3, #7, #1
   1191a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   1191e:	b995      	cbnz	r5, 11946 <ll_rx_dequeue+0x122>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   11920:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   11924:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   11928:	f000 0001 	and.w	r0, r0, #1
   1192c:	0040      	lsls	r0, r0, #1
		if (!bm) {
   1192e:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   11932:	d101      	bne.n	11938 <ll_rx_dequeue+0x114>
			ll_adv_scan_state_cb(0);
   11934:	f000 fde6 	bl	12504 <ll_adv_scan_state_cb>
}
   11938:	b005      	add	sp, #20
   1193a:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   1193c:	f362 0300 	bfi	r3, r2, #0, #1
   11940:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   11944:	e7ec      	b.n	11920 <ll_rx_dequeue+0xfc>
			mem_release(node_rx->hdr.onion.link,
   11946:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   1194a:	490f      	ldr	r1, [pc, #60]	; (11988 <ll_rx_dequeue+0x164>)
   1194c:	f7f5 fea3 	bl	7696 <mem_release>
			mem_release(conn, &_radio.conn_free);
   11950:	490e      	ldr	r1, [pc, #56]	; (1198c <ll_rx_dequeue+0x168>)
   11952:	4628      	mov	r0, r5
   11954:	f7f5 fe9f 	bl	7696 <mem_release>
   11958:	e7e2      	b.n	11920 <ll_rx_dequeue+0xfc>
   1195a:	bf00      	nop
   1195c:	200008c0 	.word	0x200008c0
   11960:	00015359 	.word	0x00015359
   11964:	20003a5c 	.word	0x20003a5c
   11968:	00016754 	.word	0x00016754
   1196c:	0001679c 	.word	0x0001679c
   11970:	0001819d 	.word	0x0001819d
   11974:	000181eb 	.word	0x000181eb
   11978:	000166c8 	.word	0x000166c8
   1197c:	00018296 	.word	0x00018296
   11980:	00018784 	.word	0x00018784
   11984:	00018746 	.word	0x00018746
   11988:	20000a08 	.word	0x20000a08
   1198c:	200009cc 	.word	0x200009cc

00011990 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   11990:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   11992:	4c0b      	ldr	r4, [pc, #44]	; (119c0 <rtc0_nrf5_isr+0x30>)
   11994:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   11998:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   1199c:	b122      	cbz	r2, 119a8 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1199e:	2000      	movs	r0, #0
   119a0:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   119a4:	f7f6 fcd6 	bl	8354 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   119a8:	b12d      	cbz	r5, 119b6 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   119aa:	2300      	movs	r3, #0
   119ac:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   119b0:	2001      	movs	r0, #1
   119b2:	f7f6 fccf 	bl	8354 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   119b6:	2000      	movs	r0, #0
}
   119b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   119bc:	f7f5 bf6a 	b.w	7894 <mayfly_run>
   119c0:	4000b000 	.word	0x4000b000

000119c4 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   119c4:	2001      	movs	r0, #1
   119c6:	f7f5 bf65 	b.w	7894 <mayfly_run>

000119ca <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   119ca:	4668      	mov	r0, sp
   119cc:	f020 0107 	bic.w	r1, r0, #7
   119d0:	468d      	mov	sp, r1
   119d2:	b501      	push	{r0, lr}
	isr_radio();
   119d4:	f001 f8da 	bl	12b8c <isr_radio>
	ISR_DIRECT_PM();
   119d8:	f7ef ff8c 	bl	18f4 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   119dc:	f7ef fd76 	bl	14cc <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   119e0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   119e4:	4685      	mov	sp, r0
   119e6:	4770      	bx	lr

000119e8 <radio_active_callback>:
{
   119e8:	4770      	bx	lr
	...

000119ec <radio_event_callback>:
	k_sem_give(sem_recv);
   119ec:	4b01      	ldr	r3, [pc, #4]	; (119f4 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   119ee:	6818      	ldr	r0, [r3, #0]
   119f0:	f002 befb 	b.w	147ea <_impl_k_sem_give>
   119f4:	200011f0 	.word	0x200011f0

000119f8 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   119f8:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   119fa:	4b42      	ldr	r3, [pc, #264]	; (11b04 <ll_init+0x10c>)
{
   119fc:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   119fe:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   11a00:	4841      	ldr	r0, [pc, #260]	; (11b08 <ll_init+0x110>)
   11a02:	f002 fa0b 	bl	13e1c <device_get_binding>
	if (!clk_k32) {
   11a06:	b918      	cbnz	r0, 11a10 <ll_init+0x18>
		return -ENODEV;
   11a08:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   11a0c:	b006      	add	sp, #24
   11a0e:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   11a10:	6843      	ldr	r3, [r0, #4]
   11a12:	2101      	movs	r1, #1
   11a14:	681b      	ldr	r3, [r3, #0]
   11a16:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   11a18:	483c      	ldr	r0, [pc, #240]	; (11b0c <ll_init+0x114>)
   11a1a:	f002 f9ff 	bl	13e1c <device_get_binding>
	if (!entropy) {
   11a1e:	4604      	mov	r4, r0
   11a20:	2800      	cmp	r0, #0
   11a22:	d0f1      	beq.n	11a08 <ll_init+0x10>
	cntr_init();
   11a24:	f000 ff94 	bl	12950 <cntr_init>
	mayfly_init();
   11a28:	f7f5 fe94 	bl	7754 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11a2c:	4b38      	ldr	r3, [pc, #224]	; (11b10 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   11a2e:	2203      	movs	r2, #3
   11a30:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11a32:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   11a34:	4a37      	ldr	r2, [pc, #220]	; (11b14 <ll_init+0x11c>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11a36:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   11a38:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   11a3a:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   11a3c:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   11a3e:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   11a40:	9205      	str	r2, [sp, #20]
   11a42:	4a35      	ldr	r2, [pc, #212]	; (11b18 <ll_init+0x120>)
   11a44:	9204      	str	r2, [sp, #16]
   11a46:	4a35      	ldr	r2, [pc, #212]	; (11b1c <ll_init+0x124>)
   11a48:	9203      	str	r2, [sp, #12]
   11a4a:	4a35      	ldr	r2, [pc, #212]	; (11b20 <ll_init+0x128>)
   11a4c:	9202      	str	r2, [sp, #8]
   11a4e:	220d      	movs	r2, #13
   11a50:	9201      	str	r2, [sp, #4]
   11a52:	9300      	str	r3, [sp, #0]
   11a54:	4a33      	ldr	r2, [pc, #204]	; (11b24 <ll_init+0x12c>)
   11a56:	2304      	movs	r3, #4
   11a58:	f7f6 fc44 	bl	82e4 <ticker_init>
	LL_ASSERT(!err);
   11a5c:	b178      	cbz	r0, 11a7e <ll_init+0x86>
   11a5e:	4b32      	ldr	r3, [pc, #200]	; (11b28 <ll_init+0x130>)
   11a60:	9301      	str	r3, [sp, #4]
   11a62:	9300      	str	r3, [sp, #0]
   11a64:	4b31      	ldr	r3, [pc, #196]	; (11b2c <ll_init+0x134>)
   11a66:	4a32      	ldr	r2, [pc, #200]	; (11b30 <ll_init+0x138>)
   11a68:	681c      	ldr	r4, [r3, #0]
   11a6a:	4932      	ldr	r1, [pc, #200]	; (11b34 <ll_init+0x13c>)
   11a6c:	4b32      	ldr	r3, [pc, #200]	; (11b38 <ll_init+0x140>)
   11a6e:	4833      	ldr	r0, [pc, #204]	; (11b3c <ll_init+0x144>)
   11a70:	47a0      	blx	r4
   11a72:	4040      	eors	r0, r0
   11a74:	f380 8811 	msr	BASEPRI, r0
   11a78:	f04f 0004 	mov.w	r0, #4
   11a7c:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   11a7e:	4830      	ldr	r0, [pc, #192]	; (11b40 <ll_init+0x148>)
   11a80:	f002 f9cc 	bl	13e1c <device_get_binding>
	if (!clk_m16) {
   11a84:	2800      	cmp	r0, #0
   11a86:	d0bf      	beq.n	11a08 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   11a88:	4b2e      	ldr	r3, [pc, #184]	; (11b44 <ll_init+0x14c>)
   11a8a:	9304      	str	r3, [sp, #16]
   11a8c:	9501      	str	r5, [sp, #4]
   11a8e:	231b      	movs	r3, #27
   11a90:	2501      	movs	r5, #1
   11a92:	f44f 7657 	mov.w	r6, #860	; 0x35c
   11a96:	9303      	str	r3, [sp, #12]
   11a98:	9302      	str	r3, [sp, #8]
   11a9a:	4622      	mov	r2, r4
   11a9c:	9605      	str	r6, [sp, #20]
   11a9e:	9500      	str	r5, [sp, #0]
   11aa0:	462b      	mov	r3, r5
   11aa2:	2107      	movs	r1, #7
   11aa4:	f7fe ff34 	bl	10910 <radio_init>
	if (err) {
   11aa8:	4604      	mov	r4, r0
   11aaa:	b168      	cbz	r0, 11ac8 <ll_init+0xd0>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   11aac:	4b1e      	ldr	r3, [pc, #120]	; (11b28 <ll_init+0x130>)
   11aae:	9303      	str	r3, [sp, #12]
   11ab0:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
   11ab4:	4b1d      	ldr	r3, [pc, #116]	; (11b2c <ll_init+0x134>)
   11ab6:	4824      	ldr	r0, [pc, #144]	; (11b48 <ll_init+0x150>)
   11ab8:	681c      	ldr	r4, [r3, #0]
   11aba:	4a1d      	ldr	r2, [pc, #116]	; (11b30 <ll_init+0x138>)
   11abc:	4b1e      	ldr	r3, [pc, #120]	; (11b38 <ll_init+0x140>)
   11abe:	491d      	ldr	r1, [pc, #116]	; (11b34 <ll_init+0x13c>)
   11ac0:	47a0      	blx	r4
		return -ENOMEM;
   11ac2:	f06f 000b 	mvn.w	r0, #11
   11ac6:	e7a1      	b.n	11a0c <ll_init+0x14>
	ll_filter_reset(true);
   11ac8:	4628      	mov	r0, r5
   11aca:	f000 fef9 	bl	128c0 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   11ace:	4622      	mov	r2, r4
   11ad0:	4621      	mov	r1, r4
   11ad2:	4628      	mov	r0, r5
   11ad4:	f7ef fef4 	bl	18c0 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   11ad8:	4622      	mov	r2, r4
   11ada:	4621      	mov	r1, r4
   11adc:	200b      	movs	r0, #11
   11ade:	f7ef feef 	bl	18c0 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   11ae2:	4622      	mov	r2, r4
   11ae4:	4621      	mov	r1, r4
   11ae6:	2018      	movs	r0, #24
   11ae8:	f7ef feea 	bl	18c0 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   11aec:	4628      	mov	r0, r5
   11aee:	f7ef feb5 	bl	185c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   11af2:	200b      	movs	r0, #11
   11af4:	f7ef feb2 	bl	185c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   11af8:	2018      	movs	r0, #24
   11afa:	f7ef feaf 	bl	185c <_arch_irq_enable>
	return 0;
   11afe:	4620      	mov	r0, r4
   11b00:	e784      	b.n	11a0c <ll_init+0x14>
   11b02:	bf00      	nop
   11b04:	200011f0 	.word	0x200011f0
   11b08:	0001542c 	.word	0x0001542c
   11b0c:	00015400 	.word	0x00015400
   11b10:	200011d0 	.word	0x200011d0
   11b14:	00013545 	.word	0x00013545
   11b18:	0001349d 	.word	0x0001349d
   11b1c:	00013439 	.word	0x00013439
   11b20:	20000f60 	.word	0x20000f60
   11b24:	20000e20 	.word	0x20000e20
   11b28:	00015359 	.word	0x00015359
   11b2c:	20003a5c 	.word	0x20003a5c
   11b30:	00016754 	.word	0x00016754
   11b34:	0001679c 	.word	0x0001679c
   11b38:	00018ebb 	.word	0x00018ebb
   11b3c:	00018ec3 	.word	0x00018ec3
   11b40:	00015437 	.word	0x00015437
   11b44:	20000ac4 	.word	0x20000ac4
   11b48:	00018ee9 	.word	0x00018ee9

00011b4c <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   11b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11b50:	4681      	mov	r9, r0
   11b52:	4688      	mov	r8, r1
   11b54:	4617      	mov	r7, r2
   11b56:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   11b58:	f7fe ffbe 	bl	10ad8 <ll_scan_is_enabled>
   11b5c:	b988      	cbnz	r0, 11b82 <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   11b5e:	4d0a      	ldr	r5, [pc, #40]	; (11b88 <ll_scan_params_set+0x3c>)
   11b60:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   11b62:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   11b66:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   11b6a:	4622      	mov	r2, r4
   11b6c:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   11b70:	4613      	mov	r3, r2
   11b72:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   11b76:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   11b78:	f362 1387 	bfi	r3, r2, #6, #2
   11b7c:	712b      	strb	r3, [r5, #4]

	return 0;
   11b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11b82:	200c      	movs	r0, #12
}
   11b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11b88:	200011f4 	.word	0x200011f4

00011b8c <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   11b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b8e:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   11b90:	b920      	cbnz	r0, 11b9c <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   11b92:	b005      	add	sp, #20
   11b94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   11b98:	f7ff be0c 	b.w	117b4 <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   11b9c:	f7fe ff9c 	bl	10ad8 <ll_scan_is_enabled>
   11ba0:	4606      	mov	r6, r0
   11ba2:	bb40      	cbnz	r0, 11bf6 <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   11ba4:	4c15      	ldr	r4, [pc, #84]	; (11bfc <ll_scan_enable+0x70>)
   11ba6:	7920      	ldrb	r0, [r4, #4]
   11ba8:	0980      	lsrs	r0, r0, #6
   11baa:	f000 fa73 	bl	12094 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   11bae:	7923      	ldrb	r3, [r4, #4]
   11bb0:	f013 0501 	ands.w	r5, r3, #1
   11bb4:	d006      	beq.n	11bc4 <ll_scan_enable+0x38>
   11bb6:	f013 0520 	ands.w	r5, r3, #32
   11bba:	d003      	beq.n	11bc4 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   11bbc:	4630      	mov	r0, r6
   11bbe:	f000 fbf5 	bl	123ac <ll_rl_rpa_update>
		rpa_gen = 1;
   11bc2:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   11bc4:	7926      	ldrb	r6, [r4, #4]
   11bc6:	f006 070f 	and.w	r7, r6, #15
   11bca:	f3c6 1600 	ubfx	r6, r6, #4, #1
   11bce:	2100      	movs	r1, #0
   11bd0:	4630      	mov	r0, r6
   11bd2:	f7f6 fd45 	bl	8660 <ll_addr_get>
   11bd6:	22ff      	movs	r2, #255	; 0xff
   11bd8:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   11bda:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   11bdc:	8823      	ldrh	r3, [r4, #0]
   11bde:	9502      	str	r5, [sp, #8]
   11be0:	0992      	lsrs	r2, r2, #6
   11be2:	9201      	str	r2, [sp, #4]
   11be4:	8862      	ldrh	r2, [r4, #2]
   11be6:	9200      	str	r2, [sp, #0]
   11be8:	4631      	mov	r1, r6
   11bea:	4602      	mov	r2, r0
   11bec:	4638      	mov	r0, r7
   11bee:	f7ff fd03 	bl	115f8 <radio_scan_enable>
}
   11bf2:	b005      	add	sp, #20
   11bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   11bf6:	2000      	movs	r0, #0
   11bf8:	e7fb      	b.n	11bf2 <ll_scan_enable+0x66>
   11bfa:	bf00      	nop
   11bfc:	200011f4 	.word	0x200011f4

00011c00 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   11c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c04:	b085      	sub	sp, #20
   11c06:	461e      	mov	r6, r3
   11c08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   11c0c:	9303      	str	r3, [sp, #12]
   11c0e:	4680      	mov	r8, r0
   11c10:	4689      	mov	r9, r1
   11c12:	4615      	mov	r5, r2
   11c14:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   11c16:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   11c1a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   11c1e:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   11c22:	f7fe ff59 	bl	10ad8 <ll_scan_is_enabled>
   11c26:	9b03      	ldr	r3, [sp, #12]
   11c28:	bba0      	cbnz	r0, 11c94 <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   11c2a:	9300      	str	r3, [sp, #0]
   11c2c:	4652      	mov	r2, sl
   11c2e:	465b      	mov	r3, fp
   11c30:	4639      	mov	r1, r7
   11c32:	4630      	mov	r0, r6
   11c34:	f7fe ff74 	bl	10b20 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   11c38:	bb68      	cbnz	r0, 11c96 <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   11c3a:	4628      	mov	r0, r5
   11c3c:	f000 fa2a 	bl	12094 <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   11c40:	b1dd      	cbz	r5, 11c7a <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   11c42:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   11c44:	1ea3      	subs	r3, r4, #2
   11c46:	2b01      	cmp	r3, #1
   11c48:	d822      	bhi.n	11c90 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   11c4a:	2000      	movs	r0, #0
   11c4c:	f000 fbae 	bl	123ac <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   11c50:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   11c54:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   11c56:	2100      	movs	r1, #0
   11c58:	4620      	mov	r0, r4
   11c5a:	f7f6 fd01 	bl	8660 <ll_addr_get>
   11c5e:	4643      	mov	r3, r8
   11c60:	4602      	mov	r2, r0
   11c62:	4621      	mov	r1, r4
   11c64:	2000      	movs	r0, #0
   11c66:	9711      	str	r7, [sp, #68]	; 0x44
   11c68:	9610      	str	r6, [sp, #64]	; 0x40
   11c6a:	950f      	str	r5, [sp, #60]	; 0x3c
   11c6c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   11c70:	b005      	add	sp, #20
   11c72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   11c76:	f7ff bcbf 	b.w	115f8 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   11c7a:	f000 fb8f 	bl	1239c <ctrl_rl_enabled>
   11c7e:	2800      	cmp	r0, #0
   11c80:	d0df      	beq.n	11c42 <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   11c82:	4639      	mov	r1, r7
   11c84:	462a      	mov	r2, r5
   11c86:	4630      	mov	r0, r6
   11c88:	f000 fa26 	bl	120d8 <ll_rl_find>
   11c8c:	4607      	mov	r7, r0
   11c8e:	e7d9      	b.n	11c44 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   11c90:	2600      	movs	r6, #0
   11c92:	e7e0      	b.n	11c56 <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11c94:	200c      	movs	r0, #12
}
   11c96:	b005      	add	sp, #20
   11c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011c9c <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   11c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ca0:	4688      	mov	r8, r1
	int i;

	if (free) {
   11ca2:	4615      	mov	r5, r2
   11ca4:	b10a      	cbz	r2, 11caa <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   11ca6:	23ff      	movs	r3, #255	; 0xff
   11ca8:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   11caa:	4e14      	ldr	r6, [pc, #80]	; (11cfc <wl_find+0x60>)
{
   11cac:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   11cae:	f000 0701 	and.w	r7, r0, #1
   11cb2:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11cb6:	07da      	lsls	r2, r3, #31
   11cb8:	d51d      	bpl.n	11cf6 <wl_find+0x5a>
   11cba:	f3c3 0340 	ubfx	r3, r3, #1, #1
   11cbe:	42bb      	cmp	r3, r7
   11cc0:	d113      	bne.n	11cea <wl_find+0x4e>
   11cc2:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   11cc6:	2206      	movs	r2, #6
   11cc8:	4641      	mov	r1, r8
   11cca:	3002      	adds	r0, #2
   11ccc:	f7ef ffa7 	bl	1c1e <memcmp>
   11cd0:	b910      	cbnz	r0, 11cd8 <wl_find+0x3c>
			return i;
   11cd2:	b2e0      	uxtb	r0, r4
   11cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11cd8:	b13d      	cbz	r5, 11cea <wl_find+0x4e>
   11cda:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11cde:	07db      	lsls	r3, r3, #31
   11ce0:	d403      	bmi.n	11cea <wl_find+0x4e>
   11ce2:	782b      	ldrb	r3, [r5, #0]
   11ce4:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   11ce6:	bf08      	it	eq
   11ce8:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   11cea:	3401      	adds	r4, #1
   11cec:	2c08      	cmp	r4, #8
   11cee:	d1e0      	bne.n	11cb2 <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   11cf0:	20ff      	movs	r0, #255	; 0xff
   11cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11cf6:	2d00      	cmp	r5, #0
   11cf8:	d1f3      	bne.n	11ce2 <wl_find+0x46>
   11cfa:	e7f6      	b.n	11cea <wl_find+0x4e>
   11cfc:	20001427 	.word	0x20001427

00011d00 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   11d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d04:	4d1a      	ldr	r5, [pc, #104]	; (11d70 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11d06:	f8df 8074 	ldr.w	r8, [pc, #116]	; 11d7c <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   11d0a:	1eae      	subs	r6, r5, #2
{
   11d0c:	2400      	movs	r4, #0
   11d0e:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   11d10:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11d14:	07d9      	lsls	r1, r3, #31
   11d16:	d524      	bpl.n	11d62 <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11d18:	f898 3000 	ldrb.w	r3, [r8]
   11d1c:	b15b      	cbz	r3, 11d36 <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   11d1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11d22:	2a07      	cmp	r2, #7
   11d24:	d807      	bhi.n	11d36 <filter_wl_update+0x36>
   11d26:	2328      	movs	r3, #40	; 0x28
   11d28:	4353      	muls	r3, r2
   11d2a:	4a12      	ldr	r2, [pc, #72]	; (11d74 <filter_wl_update+0x74>)
   11d2c:	5cd3      	ldrb	r3, [r2, r3]
   11d2e:	075a      	lsls	r2, r3, #29
   11d30:	d501      	bpl.n	11d36 <filter_wl_update+0x36>
   11d32:	06db      	lsls	r3, r3, #27
   11d34:	d515      	bpl.n	11d62 <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   11d36:	4810      	ldr	r0, [pc, #64]	; (11d78 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11d38:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   11d3c:	2201      	movs	r2, #1
   11d3e:	fa02 f104 	lsl.w	r1, r2, r4
   11d42:	7802      	ldrb	r2, [r0, #0]
   11d44:	430a      	orrs	r2, r1
   11d46:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11d48:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11d4c:	7842      	ldrb	r2, [r0, #1]
   11d4e:	40a3      	lsls	r3, r4
   11d50:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11d52:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11d54:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11d56:	fb02 0004 	mla	r0, r2, r4, r0
   11d5a:	4629      	mov	r1, r5
   11d5c:	3002      	adds	r0, #2
   11d5e:	f7ef ff73 	bl	1c48 <memcpy>
   11d62:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   11d64:	2c08      	cmp	r4, #8
   11d66:	f105 0508 	add.w	r5, r5, #8
   11d6a:	d1d1      	bne.n	11d10 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   11d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11d70:	20001429 	.word	0x20001429
   11d74:	200012b4 	.word	0x200012b4
   11d78:	20001467 	.word	0x20001467
   11d7c:	200013f4 	.word	0x200013f4

00011d80 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   11d80:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   11d82:	f7fe fe95 	bl	10ab0 <ll_adv_is_enabled>
   11d86:	b928      	cbnz	r0, 11d94 <rl_access_check.constprop.1+0x14>
   11d88:	f7fe fea6 	bl	10ad8 <ll_scan_is_enabled>
   11d8c:	fab0 f080 	clz	r0, r0
   11d90:	0940      	lsrs	r0, r0, #5
   11d92:	bd08      	pop	{r3, pc}
   11d94:	2000      	movs	r0, #0
}
   11d96:	bd08      	pop	{r3, pc}

00011d98 <filter_rl_update>:
{
   11d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   11d9a:	4e10      	ldr	r6, [pc, #64]	; (11ddc <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   11d9c:	4d10      	ldr	r5, [pc, #64]	; (11de0 <filter_rl_update+0x48>)
{
   11d9e:	2400      	movs	r4, #0
		if (rl[i].taken) {
   11da0:	2728      	movs	r7, #40	; 0x28
   11da2:	fb07 f104 	mul.w	r1, r7, r4
   11da6:	5c73      	ldrb	r3, [r6, r1]
   11da8:	07da      	lsls	r2, r3, #31
   11daa:	d513      	bpl.n	11dd4 <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   11dac:	2201      	movs	r2, #1
   11dae:	fa02 f004 	lsl.w	r0, r2, r4
   11db2:	782a      	ldrb	r2, [r5, #0]
   11db4:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   11db6:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   11dba:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11dbc:	786a      	ldrb	r2, [r5, #1]
   11dbe:	40a3      	lsls	r3, r4
   11dc0:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11dc2:	2206      	movs	r2, #6
   11dc4:	3101      	adds	r1, #1
   11dc6:	fb02 5004 	mla	r0, r2, r4, r5
   11dca:	4431      	add	r1, r6
   11dcc:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11dce:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11dd0:	f7ef ff3a 	bl	1c48 <memcpy>
   11dd4:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11dd6:	2c08      	cmp	r4, #8
   11dd8:	d1e3      	bne.n	11da2 <filter_rl_update+0xa>
}
   11dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ddc:	200012b4 	.word	0x200012b4
   11de0:	200013f5 	.word	0x200013f5

00011de4 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   11de4:	2807      	cmp	r0, #7
   11de6:	d80c      	bhi.n	11e02 <ctrl_lrpa_get+0x1e>
   11de8:	2328      	movs	r3, #40	; 0x28
   11dea:	4358      	muls	r0, r3
   11dec:	4a06      	ldr	r2, [pc, #24]	; (11e08 <ctrl_lrpa_get+0x24>)
   11dee:	5c13      	ldrb	r3, [r2, r0]
   11df0:	1811      	adds	r1, r2, r0
   11df2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   11df6:	b128      	cbz	r0, 11e04 <ctrl_lrpa_get+0x20>
   11df8:	f3c3 0040 	ubfx	r0, r3, #1, #1
   11dfc:	b110      	cbz	r0, 11e04 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   11dfe:	6a48      	ldr	r0, [r1, #36]	; 0x24
   11e00:	4770      	bx	lr
		return NULL;
   11e02:	2000      	movs	r0, #0
}
   11e04:	4770      	bx	lr
   11e06:	bf00      	nop
   11e08:	200012b4 	.word	0x200012b4

00011e0c <ctrl_irks_get>:
	*count = peer_irk_count;
   11e0c:	4b02      	ldr	r3, [pc, #8]	; (11e18 <ctrl_irks_get+0xc>)
   11e0e:	781b      	ldrb	r3, [r3, #0]
   11e10:	7003      	strb	r3, [r0, #0]
}
   11e12:	4802      	ldr	r0, [pc, #8]	; (11e1c <ctrl_irks_get+0x10>)
   11e14:	4770      	bx	lr
   11e16:	bf00      	nop
   11e18:	2000122a 	.word	0x2000122a
   11e1c:	20001233 	.word	0x20001233

00011e20 <ctrl_rl_idx>:
{
   11e20:	b513      	push	{r0, r1, r4, lr}
	if (whitelist) {
   11e22:	2800      	cmp	r0, #0
   11e24:	d026      	beq.n	11e74 <ctrl_rl_idx+0x54>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   11e26:	2907      	cmp	r1, #7
   11e28:	d90f      	bls.n	11e4a <ctrl_rl_idx+0x2a>
		LL_ASSERT(wl[devmatch_id].taken);
   11e2a:	4b20      	ldr	r3, [pc, #128]	; (11eac <ctrl_rl_idx+0x8c>)
   11e2c:	9301      	str	r3, [sp, #4]
   11e2e:	9300      	str	r3, [sp, #0]
   11e30:	4b1f      	ldr	r3, [pc, #124]	; (11eb0 <ctrl_rl_idx+0x90>)
   11e32:	4a20      	ldr	r2, [pc, #128]	; (11eb4 <ctrl_rl_idx+0x94>)
   11e34:	681c      	ldr	r4, [r3, #0]
   11e36:	4920      	ldr	r1, [pc, #128]	; (11eb8 <ctrl_rl_idx+0x98>)
   11e38:	4b20      	ldr	r3, [pc, #128]	; (11ebc <ctrl_rl_idx+0x9c>)
   11e3a:	4821      	ldr	r0, [pc, #132]	; (11ec0 <ctrl_rl_idx+0xa0>)
   11e3c:	47a0      	blx	r4
   11e3e:	4040      	eors	r0, r0
   11e40:	f380 8811 	msr	BASEPRI, r0
   11e44:	f04f 0004 	mov.w	r0, #4
   11e48:	df02      	svc	2
   11e4a:	4b1e      	ldr	r3, [pc, #120]	; (11ec4 <ctrl_rl_idx+0xa4>)
   11e4c:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   11e50:	07d2      	lsls	r2, r2, #31
   11e52:	d409      	bmi.n	11e68 <ctrl_rl_idx+0x48>
   11e54:	4b15      	ldr	r3, [pc, #84]	; (11eac <ctrl_rl_idx+0x8c>)
   11e56:	9301      	str	r3, [sp, #4]
   11e58:	9300      	str	r3, [sp, #0]
   11e5a:	4b15      	ldr	r3, [pc, #84]	; (11eb0 <ctrl_rl_idx+0x90>)
   11e5c:	4a15      	ldr	r2, [pc, #84]	; (11eb4 <ctrl_rl_idx+0x94>)
   11e5e:	681c      	ldr	r4, [r3, #0]
   11e60:	4915      	ldr	r1, [pc, #84]	; (11eb8 <ctrl_rl_idx+0x98>)
   11e62:	4b16      	ldr	r3, [pc, #88]	; (11ebc <ctrl_rl_idx+0x9c>)
   11e64:	4818      	ldr	r0, [pc, #96]	; (11ec8 <ctrl_rl_idx+0xa8>)
   11e66:	e7e9      	b.n	11e3c <ctrl_rl_idx+0x1c>
		i = wl[devmatch_id].rl_idx;
   11e68:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   11e6c:	7849      	ldrb	r1, [r1, #1]
}
   11e6e:	4608      	mov	r0, r1
   11e70:	b002      	add	sp, #8
   11e72:	bd10      	pop	{r4, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   11e74:	2907      	cmp	r1, #7
   11e76:	d909      	bls.n	11e8c <ctrl_rl_idx+0x6c>
   11e78:	4b0c      	ldr	r3, [pc, #48]	; (11eac <ctrl_rl_idx+0x8c>)
   11e7a:	9301      	str	r3, [sp, #4]
   11e7c:	9300      	str	r3, [sp, #0]
   11e7e:	4b0c      	ldr	r3, [pc, #48]	; (11eb0 <ctrl_rl_idx+0x90>)
   11e80:	4a0c      	ldr	r2, [pc, #48]	; (11eb4 <ctrl_rl_idx+0x94>)
   11e82:	681c      	ldr	r4, [r3, #0]
   11e84:	490c      	ldr	r1, [pc, #48]	; (11eb8 <ctrl_rl_idx+0x98>)
   11e86:	4b0d      	ldr	r3, [pc, #52]	; (11ebc <ctrl_rl_idx+0x9c>)
   11e88:	4810      	ldr	r0, [pc, #64]	; (11ecc <ctrl_rl_idx+0xac>)
   11e8a:	e7d7      	b.n	11e3c <ctrl_rl_idx+0x1c>
		LL_ASSERT(rl[i].taken);
   11e8c:	2328      	movs	r3, #40	; 0x28
   11e8e:	434b      	muls	r3, r1
   11e90:	4a0f      	ldr	r2, [pc, #60]	; (11ed0 <ctrl_rl_idx+0xb0>)
   11e92:	5cd3      	ldrb	r3, [r2, r3]
   11e94:	07db      	lsls	r3, r3, #31
   11e96:	d4ea      	bmi.n	11e6e <ctrl_rl_idx+0x4e>
   11e98:	4b04      	ldr	r3, [pc, #16]	; (11eac <ctrl_rl_idx+0x8c>)
   11e9a:	9301      	str	r3, [sp, #4]
   11e9c:	9300      	str	r3, [sp, #0]
   11e9e:	4b04      	ldr	r3, [pc, #16]	; (11eb0 <ctrl_rl_idx+0x90>)
   11ea0:	4a04      	ldr	r2, [pc, #16]	; (11eb4 <ctrl_rl_idx+0x94>)
   11ea2:	681c      	ldr	r4, [r3, #0]
   11ea4:	4904      	ldr	r1, [pc, #16]	; (11eb8 <ctrl_rl_idx+0x98>)
   11ea6:	4b05      	ldr	r3, [pc, #20]	; (11ebc <ctrl_rl_idx+0x9c>)
   11ea8:	480a      	ldr	r0, [pc, #40]	; (11ed4 <ctrl_rl_idx+0xb4>)
   11eaa:	e7c7      	b.n	11e3c <ctrl_rl_idx+0x1c>
   11eac:	00015359 	.word	0x00015359
   11eb0:	20003a5c 	.word	0x20003a5c
   11eb4:	00016754 	.word	0x00016754
   11eb8:	0001679c 	.word	0x0001679c
   11ebc:	00018f1e 	.word	0x00018f1e
   11ec0:	00018fb8 	.word	0x00018fb8
   11ec4:	20001427 	.word	0x20001427
   11ec8:	00019085 	.word	0x00019085
   11ecc:	000190bc 	.word	0x000190bc
   11ed0:	200012b4 	.word	0x200012b4
   11ed4:	00019189 	.word	0x00019189

00011ed8 <ctrl_rl_irk_idx>:
{
   11ed8:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   11eda:	4b1a      	ldr	r3, [pc, #104]	; (11f44 <ctrl_rl_irk_idx+0x6c>)
   11edc:	781b      	ldrb	r3, [r3, #0]
   11ede:	4283      	cmp	r3, r0
   11ee0:	d80f      	bhi.n	11f02 <ctrl_rl_irk_idx+0x2a>
   11ee2:	4b19      	ldr	r3, [pc, #100]	; (11f48 <ctrl_rl_irk_idx+0x70>)
   11ee4:	9301      	str	r3, [sp, #4]
   11ee6:	9300      	str	r3, [sp, #0]
   11ee8:	4b18      	ldr	r3, [pc, #96]	; (11f4c <ctrl_rl_irk_idx+0x74>)
   11eea:	4a19      	ldr	r2, [pc, #100]	; (11f50 <ctrl_rl_irk_idx+0x78>)
   11eec:	681c      	ldr	r4, [r3, #0]
   11eee:	4919      	ldr	r1, [pc, #100]	; (11f54 <ctrl_rl_irk_idx+0x7c>)
   11ef0:	4b19      	ldr	r3, [pc, #100]	; (11f58 <ctrl_rl_irk_idx+0x80>)
   11ef2:	481a      	ldr	r0, [pc, #104]	; (11f5c <ctrl_rl_irk_idx+0x84>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11ef4:	47a0      	blx	r4
   11ef6:	4040      	eors	r0, r0
   11ef8:	f380 8811 	msr	BASEPRI, r0
   11efc:	f04f 0004 	mov.w	r0, #4
   11f00:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   11f02:	4b17      	ldr	r3, [pc, #92]	; (11f60 <ctrl_rl_irk_idx+0x88>)
   11f04:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11f06:	2807      	cmp	r0, #7
   11f08:	d909      	bls.n	11f1e <ctrl_rl_irk_idx+0x46>
   11f0a:	4b0f      	ldr	r3, [pc, #60]	; (11f48 <ctrl_rl_irk_idx+0x70>)
   11f0c:	9301      	str	r3, [sp, #4]
   11f0e:	9300      	str	r3, [sp, #0]
   11f10:	4b0e      	ldr	r3, [pc, #56]	; (11f4c <ctrl_rl_irk_idx+0x74>)
   11f12:	4a0f      	ldr	r2, [pc, #60]	; (11f50 <ctrl_rl_irk_idx+0x78>)
   11f14:	681c      	ldr	r4, [r3, #0]
   11f16:	490f      	ldr	r1, [pc, #60]	; (11f54 <ctrl_rl_irk_idx+0x7c>)
   11f18:	4b0f      	ldr	r3, [pc, #60]	; (11f58 <ctrl_rl_irk_idx+0x80>)
   11f1a:	4812      	ldr	r0, [pc, #72]	; (11f64 <ctrl_rl_irk_idx+0x8c>)
   11f1c:	e7ea      	b.n	11ef4 <ctrl_rl_irk_idx+0x1c>
	LL_ASSERT(rl[i].taken);
   11f1e:	2328      	movs	r3, #40	; 0x28
   11f20:	4343      	muls	r3, r0
   11f22:	4a11      	ldr	r2, [pc, #68]	; (11f68 <ctrl_rl_irk_idx+0x90>)
   11f24:	5cd3      	ldrb	r3, [r2, r3]
   11f26:	07db      	lsls	r3, r3, #31
   11f28:	d409      	bmi.n	11f3e <ctrl_rl_irk_idx+0x66>
   11f2a:	4b07      	ldr	r3, [pc, #28]	; (11f48 <ctrl_rl_irk_idx+0x70>)
   11f2c:	9301      	str	r3, [sp, #4]
   11f2e:	9300      	str	r3, [sp, #0]
   11f30:	4b06      	ldr	r3, [pc, #24]	; (11f4c <ctrl_rl_irk_idx+0x74>)
   11f32:	4a07      	ldr	r2, [pc, #28]	; (11f50 <ctrl_rl_irk_idx+0x78>)
   11f34:	681c      	ldr	r4, [r3, #0]
   11f36:	4907      	ldr	r1, [pc, #28]	; (11f54 <ctrl_rl_irk_idx+0x7c>)
   11f38:	4b07      	ldr	r3, [pc, #28]	; (11f58 <ctrl_rl_irk_idx+0x80>)
   11f3a:	480c      	ldr	r0, [pc, #48]	; (11f6c <ctrl_rl_irk_idx+0x94>)
   11f3c:	e7da      	b.n	11ef4 <ctrl_rl_irk_idx+0x1c>
}
   11f3e:	b002      	add	sp, #8
   11f40:	bd10      	pop	{r4, pc}
   11f42:	bf00      	nop
   11f44:	2000122a 	.word	0x2000122a
   11f48:	00015359 	.word	0x00015359
   11f4c:	20003a5c 	.word	0x20003a5c
   11f50:	00016754 	.word	0x00016754
   11f54:	0001679c 	.word	0x0001679c
   11f58:	00018f2a 	.word	0x00018f2a
   11f5c:	000191b6 	.word	0x000191b6
   11f60:	2000122b 	.word	0x2000122b
   11f64:	000191f4 	.word	0x000191f4
   11f68:	200012b4 	.word	0x200012b4
   11f6c:	00019189 	.word	0x00019189

00011f70 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11f70:	2807      	cmp	r0, #7
{
   11f72:	b513      	push	{r0, r1, r4, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11f74:	d819      	bhi.n	11faa <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   11f76:	2328      	movs	r3, #40	; 0x28
   11f78:	4358      	muls	r0, r3
   11f7a:	4b0d      	ldr	r3, [pc, #52]	; (11fb0 <ctrl_irk_whitelisted+0x40>)
   11f7c:	5c18      	ldrb	r0, [r3, r0]
   11f7e:	07c3      	lsls	r3, r0, #31
   11f80:	d40f      	bmi.n	11fa2 <ctrl_irk_whitelisted+0x32>
   11f82:	4b0c      	ldr	r3, [pc, #48]	; (11fb4 <ctrl_irk_whitelisted+0x44>)
   11f84:	9301      	str	r3, [sp, #4]
   11f86:	9300      	str	r3, [sp, #0]
   11f88:	4b0b      	ldr	r3, [pc, #44]	; (11fb8 <ctrl_irk_whitelisted+0x48>)
   11f8a:	4a0c      	ldr	r2, [pc, #48]	; (11fbc <ctrl_irk_whitelisted+0x4c>)
   11f8c:	681c      	ldr	r4, [r3, #0]
   11f8e:	490c      	ldr	r1, [pc, #48]	; (11fc0 <ctrl_irk_whitelisted+0x50>)
   11f90:	4b0c      	ldr	r3, [pc, #48]	; (11fc4 <ctrl_irk_whitelisted+0x54>)
   11f92:	480d      	ldr	r0, [pc, #52]	; (11fc8 <ctrl_irk_whitelisted+0x58>)
   11f94:	47a0      	blx	r4
   11f96:	4040      	eors	r0, r0
   11f98:	f380 8811 	msr	BASEPRI, r0
   11f9c:	f04f 0004 	mov.w	r0, #4
   11fa0:	df02      	svc	2
	return rl[rl_idx].wl;
   11fa2:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   11fa6:	b002      	add	sp, #8
   11fa8:	bd10      	pop	{r4, pc}
		return false;
   11faa:	2000      	movs	r0, #0
   11fac:	e7fb      	b.n	11fa6 <ctrl_irk_whitelisted+0x36>
   11fae:	bf00      	nop
   11fb0:	200012b4 	.word	0x200012b4
   11fb4:	00015359 	.word	0x00015359
   11fb8:	20003a5c 	.word	0x20003a5c
   11fbc:	00016754 	.word	0x00016754
   11fc0:	0001679c 	.word	0x0001679c
   11fc4:	00018f3a 	.word	0x00018f3a
   11fc8:	00018f86 	.word	0x00018f86

00011fcc <ctrl_filter_get>:
}
   11fcc:	4b03      	ldr	r3, [pc, #12]	; (11fdc <ctrl_filter_get+0x10>)
   11fce:	4a04      	ldr	r2, [pc, #16]	; (11fe0 <ctrl_filter_get+0x14>)
   11fd0:	2800      	cmp	r0, #0
   11fd2:	bf14      	ite	ne
   11fd4:	4610      	movne	r0, r2
   11fd6:	4618      	moveq	r0, r3
   11fd8:	4770      	bx	lr
   11fda:	bf00      	nop
   11fdc:	200013f5 	.word	0x200013f5
   11fe0:	20001467 	.word	0x20001467

00011fe4 <ll_wl_size_get>:
   11fe4:	2008      	movs	r0, #8
   11fe6:	4770      	bx	lr

00011fe8 <ll_wl_clear>:
{
   11fe8:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11fea:	f7fe fd69 	bl	10ac0 <radio_adv_filter_pol_get>
   11fee:	4604      	mov	r4, r0
   11ff0:	b110      	cbz	r0, 11ff8 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11ff2:	240c      	movs	r4, #12
}
   11ff4:	4620      	mov	r0, r4
   11ff6:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11ff8:	f7fe fd84 	bl	10b04 <radio_scan_filter_pol_get>
   11ffc:	07c3      	lsls	r3, r0, #31
   11ffe:	d4f8      	bmi.n	11ff2 <ll_wl_clear+0xa>
		wl[i].taken = 0;
   12000:	4a07      	ldr	r2, [pc, #28]	; (12020 <ll_wl_clear+0x38>)
   12002:	4623      	mov	r3, r4
   12004:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   12008:	f36f 0100 	bfc	r1, #0, #1
   1200c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   12010:	3301      	adds	r3, #1
   12012:	2b08      	cmp	r3, #8
   12014:	d1f6      	bne.n	12004 <ll_wl_clear+0x1c>
	wl_anon = 0;
   12016:	4b03      	ldr	r3, [pc, #12]	; (12024 <ll_wl_clear+0x3c>)
   12018:	2200      	movs	r2, #0
   1201a:	701a      	strb	r2, [r3, #0]
	return 0;
   1201c:	e7ea      	b.n	11ff4 <ll_wl_clear+0xc>
   1201e:	bf00      	nop
   12020:	20001427 	.word	0x20001427
   12024:	20001918 	.word	0x20001918

00012028 <ll_wl_remove>:
{
   12028:	b538      	push	{r3, r4, r5, lr}
   1202a:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1202c:	f7fe fd48 	bl	10ac0 <radio_adv_filter_pol_get>
   12030:	4604      	mov	r4, r0
   12032:	b110      	cbz	r0, 1203a <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12034:	240c      	movs	r4, #12
}
   12036:	4620      	mov	r0, r4
   12038:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1203a:	f7fe fd63 	bl	10b04 <radio_scan_filter_pol_get>
   1203e:	07c3      	lsls	r3, r0, #31
   12040:	d4f8      	bmi.n	12034 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   12042:	7828      	ldrb	r0, [r5, #0]
   12044:	28ff      	cmp	r0, #255	; 0xff
   12046:	d102      	bne.n	1204e <ll_wl_remove+0x26>
		wl_anon = 0;
   12048:	4b0f      	ldr	r3, [pc, #60]	; (12088 <ll_wl_remove+0x60>)
   1204a:	701c      	strb	r4, [r3, #0]
		return 0;
   1204c:	e7f3      	b.n	12036 <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   1204e:	4622      	mov	r2, r4
   12050:	1c69      	adds	r1, r5, #1
   12052:	f7ff fe23 	bl	11c9c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   12056:	2807      	cmp	r0, #7
   12058:	d813      	bhi.n	12082 <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   1205a:	4b0c      	ldr	r3, [pc, #48]	; (1208c <ll_wl_remove+0x64>)
   1205c:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   12060:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   12062:	2d07      	cmp	r5, #7
   12064:	d806      	bhi.n	12074 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   12066:	2228      	movs	r2, #40	; 0x28
   12068:	4909      	ldr	r1, [pc, #36]	; (12090 <ll_wl_remove+0x68>)
   1206a:	436a      	muls	r2, r5
   1206c:	5c8d      	ldrb	r5, [r1, r2]
   1206e:	f364 1545 	bfi	r5, r4, #5, #1
   12072:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   12074:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   12078:	f36f 0200 	bfc	r2, #0, #1
   1207c:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   12080:	e7d9      	b.n	12036 <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12082:	2402      	movs	r4, #2
   12084:	e7d7      	b.n	12036 <ll_wl_remove+0xe>
   12086:	bf00      	nop
   12088:	20001918 	.word	0x20001918
   1208c:	20001427 	.word	0x20001427
   12090:	200012b4 	.word	0x200012b4

00012094 <ll_filters_scan_update>:
{
   12094:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   12096:	4b0d      	ldr	r3, [pc, #52]	; (120cc <ll_filters_scan_update+0x38>)
   12098:	2200      	movs	r2, #0
   1209a:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1209c:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   1209e:	07c3      	lsls	r3, r0, #31
   120a0:	d504      	bpl.n	120ac <ll_filters_scan_update+0x18>
   120a2:	f7fe fd0d 	bl	10ac0 <radio_adv_filter_pol_get>
   120a6:	b908      	cbnz	r0, 120ac <ll_filters_scan_update+0x18>
		filter_wl_update();
   120a8:	f7ff fe2a 	bl	11d00 <filter_wl_update>
	filter->enable_bitmask = 0;
   120ac:	4b08      	ldr	r3, [pc, #32]	; (120d0 <ll_filters_scan_update+0x3c>)
   120ae:	2200      	movs	r2, #0
   120b0:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   120b2:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   120b4:	4b07      	ldr	r3, [pc, #28]	; (120d4 <ll_filters_scan_update+0x40>)
   120b6:	781b      	ldrb	r3, [r3, #0]
   120b8:	b133      	cbz	r3, 120c8 <ll_filters_scan_update+0x34>
   120ba:	f7fe fcf9 	bl	10ab0 <ll_adv_is_enabled>
   120be:	b918      	cbnz	r0, 120c8 <ll_filters_scan_update+0x34>
}
   120c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   120c4:	f7ff be68 	b.w	11d98 <filter_rl_update>
   120c8:	bd08      	pop	{r3, pc}
   120ca:	bf00      	nop
   120cc:	20001467 	.word	0x20001467
   120d0:	200013f5 	.word	0x200013f5
   120d4:	200013f4 	.word	0x200013f4

000120d8 <ll_rl_find>:
{
   120d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   120dc:	468a      	mov	sl, r1
	if (free) {
   120de:	4614      	mov	r4, r2
   120e0:	b10a      	cbz	r2, 120e6 <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   120e2:	23ff      	movs	r3, #255	; 0xff
   120e4:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   120e6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1213c <ll_rl_find+0x64>
{
   120ea:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   120ec:	f000 0901 	and.w	r9, r0, #1
   120f0:	2628      	movs	r6, #40	; 0x28
   120f2:	436e      	muls	r6, r5
   120f4:	b2ef      	uxtb	r7, r5
   120f6:	f818 3006 	ldrb.w	r3, [r8, r6]
   120fa:	07da      	lsls	r2, r3, #31
   120fc:	d51a      	bpl.n	12134 <ll_rl_find+0x5c>
   120fe:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12102:	454b      	cmp	r3, r9
   12104:	d10f      	bne.n	12126 <ll_rl_find+0x4e>
   12106:	1c70      	adds	r0, r6, #1
   12108:	2206      	movs	r2, #6
   1210a:	4651      	mov	r1, sl
   1210c:	4440      	add	r0, r8
   1210e:	f7ef fd86 	bl	1c1e <memcmp>
   12112:	b160      	cbz	r0, 1212e <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   12114:	b13c      	cbz	r4, 12126 <ll_rl_find+0x4e>
   12116:	f818 3006 	ldrb.w	r3, [r8, r6]
   1211a:	07db      	lsls	r3, r3, #31
   1211c:	d403      	bmi.n	12126 <ll_rl_find+0x4e>
   1211e:	7823      	ldrb	r3, [r4, #0]
   12120:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   12122:	bf08      	it	eq
   12124:	7027      	strbeq	r7, [r4, #0]
   12126:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12128:	2d08      	cmp	r5, #8
   1212a:	d1e1      	bne.n	120f0 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   1212c:	27ff      	movs	r7, #255	; 0xff
}
   1212e:	4638      	mov	r0, r7
   12130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   12134:	2c00      	cmp	r4, #0
   12136:	d1f2      	bne.n	1211e <ll_rl_find+0x46>
   12138:	e7f5      	b.n	12126 <ll_rl_find+0x4e>
   1213a:	bf00      	nop
   1213c:	200012b4 	.word	0x200012b4

00012140 <ll_wl_add>:
{
   12140:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12144:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12146:	f7fe fcbb 	bl	10ac0 <radio_adv_filter_pol_get>
   1214a:	4605      	mov	r5, r0
   1214c:	b120      	cbz	r0, 12158 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1214e:	250c      	movs	r5, #12
}
   12150:	4628      	mov	r0, r5
   12152:	b002      	add	sp, #8
   12154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12158:	f7fe fcd4 	bl	10b04 <radio_scan_filter_pol_get>
   1215c:	07c3      	lsls	r3, r0, #31
   1215e:	d4f6      	bmi.n	1214e <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   12160:	7838      	ldrb	r0, [r7, #0]
   12162:	28ff      	cmp	r0, #255	; 0xff
   12164:	d103      	bne.n	1216e <ll_wl_add+0x2e>
		wl_anon = 1;
   12166:	4b1f      	ldr	r3, [pc, #124]	; (121e4 <ll_wl_add+0xa4>)
   12168:	2201      	movs	r2, #1
   1216a:	701a      	strb	r2, [r3, #0]
		return 0;
   1216c:	e7f0      	b.n	12150 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1216e:	f107 0801 	add.w	r8, r7, #1
   12172:	f10d 0207 	add.w	r2, sp, #7
   12176:	4641      	mov	r1, r8
   12178:	f7ff fd90 	bl	11c9c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1217c:	2807      	cmp	r0, #7
   1217e:	d92d      	bls.n	121dc <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   12180:	f89d 6007 	ldrb.w	r6, [sp, #7]
   12184:	2e07      	cmp	r6, #7
   12186:	d82b      	bhi.n	121e0 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   12188:	4c17      	ldr	r4, [pc, #92]	; (121e8 <ll_wl_add+0xa8>)
   1218a:	783a      	ldrb	r2, [r7, #0]
   1218c:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   12190:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   12194:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   12198:	4641      	mov	r1, r8
   1219a:	2206      	movs	r2, #6
   1219c:	3002      	adds	r0, #2
   1219e:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   121a2:	f7ef fd51 	bl	1c48 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   121a6:	462a      	mov	r2, r5
   121a8:	4641      	mov	r1, r8
   121aa:	7838      	ldrb	r0, [r7, #0]
   121ac:	f7ff ff94 	bl	120d8 <ll_rl_find>
   121b0:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   121b2:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   121b4:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   121b6:	d80e      	bhi.n	121d6 <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   121b8:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   121ba:	2328      	movs	r3, #40	; 0x28
   121bc:	4a0b      	ldr	r2, [pc, #44]	; (121ec <ll_wl_add+0xac>)
   121be:	4358      	muls	r0, r3
   121c0:	5c13      	ldrb	r3, [r2, r0]
   121c2:	f043 0320 	orr.w	r3, r3, #32
   121c6:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   121c8:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   121cc:	f043 0301 	orr.w	r3, r3, #1
   121d0:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   121d4:	e7bc      	b.n	12150 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   121d6:	22ff      	movs	r2, #255	; 0xff
   121d8:	705a      	strb	r2, [r3, #1]
   121da:	e7f5      	b.n	121c8 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   121dc:	2512      	movs	r5, #18
   121de:	e7b7      	b.n	12150 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   121e0:	2507      	movs	r5, #7
	return wl_add(addr);
   121e2:	e7b5      	b.n	12150 <ll_wl_add+0x10>
   121e4:	20001918 	.word	0x20001918
   121e8:	20001427 	.word	0x20001427
   121ec:	200012b4 	.word	0x200012b4

000121f0 <ctrl_rl_idx_allowed>:
{
   121f0:	b513      	push	{r0, r1, r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   121f2:	4b12      	ldr	r3, [pc, #72]	; (1223c <ctrl_rl_idx_allowed+0x4c>)
   121f4:	781b      	ldrb	r3, [r3, #0]
   121f6:	b1f3      	cbz	r3, 12236 <ctrl_rl_idx_allowed+0x46>
   121f8:	2907      	cmp	r1, #7
   121fa:	d81c      	bhi.n	12236 <ctrl_rl_idx_allowed+0x46>
   121fc:	b9d8      	cbnz	r0, 12236 <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   121fe:	2328      	movs	r3, #40	; 0x28
   12200:	4359      	muls	r1, r3
   12202:	4b0f      	ldr	r3, [pc, #60]	; (12240 <ctrl_rl_idx_allowed+0x50>)
   12204:	5c58      	ldrb	r0, [r3, r1]
   12206:	07c2      	lsls	r2, r0, #31
   12208:	d40f      	bmi.n	1222a <ctrl_rl_idx_allowed+0x3a>
   1220a:	4b0e      	ldr	r3, [pc, #56]	; (12244 <ctrl_rl_idx_allowed+0x54>)
   1220c:	9301      	str	r3, [sp, #4]
   1220e:	9300      	str	r3, [sp, #0]
   12210:	4b0d      	ldr	r3, [pc, #52]	; (12248 <ctrl_rl_idx_allowed+0x58>)
   12212:	4a0e      	ldr	r2, [pc, #56]	; (1224c <ctrl_rl_idx_allowed+0x5c>)
   12214:	681c      	ldr	r4, [r3, #0]
   12216:	490e      	ldr	r1, [pc, #56]	; (12250 <ctrl_rl_idx_allowed+0x60>)
   12218:	4b0e      	ldr	r3, [pc, #56]	; (12254 <ctrl_rl_idx_allowed+0x64>)
   1221a:	480f      	ldr	r0, [pc, #60]	; (12258 <ctrl_rl_idx_allowed+0x68>)
   1221c:	47a0      	blx	r4
   1221e:	4040      	eors	r0, r0
   12220:	f380 8811 	msr	BASEPRI, r0
   12224:	f04f 0004 	mov.w	r0, #4
   12228:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1222a:	0743      	lsls	r3, r0, #29
   1222c:	d503      	bpl.n	12236 <ctrl_rl_idx_allowed+0x46>
   1222e:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   12232:	b002      	add	sp, #8
   12234:	bd10      	pop	{r4, pc}
		return true;
   12236:	2001      	movs	r0, #1
   12238:	e7fb      	b.n	12232 <ctrl_rl_idx_allowed+0x42>
   1223a:	bf00      	nop
   1223c:	200013f4 	.word	0x200013f4
   12240:	200012b4 	.word	0x200012b4
   12244:	00015359 	.word	0x00015359
   12248:	20003a5c 	.word	0x20003a5c
   1224c:	00016754 	.word	0x00016754
   12250:	0001679c 	.word	0x0001679c
   12254:	00018f4f 	.word	0x00018f4f
   12258:	00018f86 	.word	0x00018f86

0001225c <ll_rl_id_addr_get>:
{
   1225c:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1225e:	2b07      	cmp	r3, #7
{
   12260:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12262:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   12264:	d90f      	bls.n	12286 <ll_rl_id_addr_get+0x2a>
   12266:	4b17      	ldr	r3, [pc, #92]	; (122c4 <ll_rl_id_addr_get+0x68>)
   12268:	9301      	str	r3, [sp, #4]
   1226a:	9300      	str	r3, [sp, #0]
   1226c:	4b16      	ldr	r3, [pc, #88]	; (122c8 <ll_rl_id_addr_get+0x6c>)
   1226e:	4a17      	ldr	r2, [pc, #92]	; (122cc <ll_rl_id_addr_get+0x70>)
   12270:	681c      	ldr	r4, [r3, #0]
   12272:	4917      	ldr	r1, [pc, #92]	; (122d0 <ll_rl_id_addr_get+0x74>)
   12274:	4b17      	ldr	r3, [pc, #92]	; (122d4 <ll_rl_id_addr_get+0x78>)
   12276:	4818      	ldr	r0, [pc, #96]	; (122d8 <ll_rl_id_addr_get+0x7c>)
	LL_ASSERT(rl[rl_idx].taken);
   12278:	47a0      	blx	r4
   1227a:	4040      	eors	r0, r0
   1227c:	f380 8811 	msr	BASEPRI, r0
   12280:	f04f 0004 	mov.w	r0, #4
   12284:	df02      	svc	2
   12286:	2528      	movs	r5, #40	; 0x28
   12288:	4c14      	ldr	r4, [pc, #80]	; (122dc <ll_rl_id_addr_get+0x80>)
   1228a:	fb05 f203 	mul.w	r2, r5, r3
   1228e:	5ca2      	ldrb	r2, [r4, r2]
   12290:	f012 0f01 	tst.w	r2, #1
   12294:	d109      	bne.n	122aa <ll_rl_id_addr_get+0x4e>
   12296:	4b0b      	ldr	r3, [pc, #44]	; (122c4 <ll_rl_id_addr_get+0x68>)
   12298:	9301      	str	r3, [sp, #4]
   1229a:	9300      	str	r3, [sp, #0]
   1229c:	4b0a      	ldr	r3, [pc, #40]	; (122c8 <ll_rl_id_addr_get+0x6c>)
   1229e:	4a0b      	ldr	r2, [pc, #44]	; (122cc <ll_rl_id_addr_get+0x70>)
   122a0:	681c      	ldr	r4, [r3, #0]
   122a2:	490b      	ldr	r1, [pc, #44]	; (122d0 <ll_rl_id_addr_get+0x74>)
   122a4:	4b0b      	ldr	r3, [pc, #44]	; (122d4 <ll_rl_id_addr_get+0x78>)
   122a6:	480e      	ldr	r0, [pc, #56]	; (122e0 <ll_rl_id_addr_get+0x84>)
   122a8:	e7e6      	b.n	12278 <ll_rl_id_addr_get+0x1c>
	*id_addr_type = rl[rl_idx].id_addr_type;
   122aa:	f3c2 1280 	ubfx	r2, r2, #6, #1
   122ae:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   122b0:	fb05 4103 	mla	r1, r5, r3, r4
   122b4:	2206      	movs	r2, #6
   122b6:	3101      	adds	r1, #1
}
   122b8:	b003      	add	sp, #12
   122ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   122be:	f7ef bcc3 	b.w	1c48 <memcpy>
   122c2:	bf00      	nop
   122c4:	00015359 	.word	0x00015359
   122c8:	20003a5c 	.word	0x20003a5c
   122cc:	00016754 	.word	0x00016754
   122d0:	0001679c 	.word	0x0001679c
   122d4:	00018f63 	.word	0x00018f63
   122d8:	0001921b 	.word	0x0001921b
   122dc:	200012b4 	.word	0x200012b4
   122e0:	00018f86 	.word	0x00018f86

000122e4 <ctrl_rl_addr_allowed>:
{
   122e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   122e8:	4b1a      	ldr	r3, [pc, #104]	; (12354 <ctrl_rl_addr_allowed+0x70>)
   122ea:	781b      	ldrb	r3, [r3, #0]
   122ec:	b37b      	cbz	r3, 1234e <ctrl_rl_addr_allowed+0x6a>
   122ee:	7813      	ldrb	r3, [r2, #0]
   122f0:	2bff      	cmp	r3, #255	; 0xff
   122f2:	d12c      	bne.n	1234e <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   122f4:	4e18      	ldr	r6, [pc, #96]	; (12358 <ctrl_rl_addr_allowed+0x74>)
   122f6:	2400      	movs	r4, #0
   122f8:	f04f 0828 	mov.w	r8, #40	; 0x28
   122fc:	46b6      	mov	lr, r6
   122fe:	fb08 f304 	mul.w	r3, r8, r4
   12302:	fa5f fc84 	uxtb.w	ip, r4
   12306:	5cf7      	ldrb	r7, [r6, r3]
   12308:	f017 0f01 	tst.w	r7, #1
   1230c:	eb06 0503 	add.w	r5, r6, r3
   12310:	d01a      	beq.n	12348 <ctrl_rl_addr_allowed+0x64>
   12312:	f3c7 1780 	ubfx	r7, r7, #6, #1
   12316:	4287      	cmp	r7, r0
   12318:	d116      	bne.n	12348 <ctrl_rl_addr_allowed+0x64>
   1231a:	3306      	adds	r3, #6
   1231c:	1e4f      	subs	r7, r1, #1
   1231e:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   12320:	f815 af01 	ldrb.w	sl, [r5, #1]!
   12324:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   12328:	45ca      	cmp	sl, r9
   1232a:	d10d      	bne.n	12348 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   1232c:	429d      	cmp	r5, r3
   1232e:	d1f7      	bne.n	12320 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   12330:	2328      	movs	r3, #40	; 0x28
   12332:	435c      	muls	r4, r3
				*rl_idx = i;
   12334:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   12338:	f81e 0004 	ldrb.w	r0, [lr, r4]
   1233c:	0743      	lsls	r3, r0, #29
   1233e:	d506      	bpl.n	1234e <ctrl_rl_addr_allowed+0x6a>
   12340:	f3c0 1000 	ubfx	r0, r0, #4, #1
   12344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12348:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1234a:	2c08      	cmp	r4, #8
   1234c:	d1d7      	bne.n	122fe <ctrl_rl_addr_allowed+0x1a>
   1234e:	2001      	movs	r0, #1
}
   12350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12354:	200013f4 	.word	0x200013f4
   12358:	200012b4 	.word	0x200012b4

0001235c <ctrl_rl_addr_resolve>:
{
   1235c:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1235e:	4c0d      	ldr	r4, [pc, #52]	; (12394 <ctrl_rl_addr_resolve+0x38>)
   12360:	7824      	ldrb	r4, [r4, #0]
   12362:	b1a4      	cbz	r4, 1238e <ctrl_rl_addr_resolve+0x32>
   12364:	2a07      	cmp	r2, #7
   12366:	d812      	bhi.n	1238e <ctrl_rl_addr_resolve+0x32>
   12368:	2528      	movs	r5, #40	; 0x28
   1236a:	4c0b      	ldr	r4, [pc, #44]	; (12398 <ctrl_rl_addr_resolve+0x3c>)
   1236c:	fb05 f602 	mul.w	r6, r5, r2
   12370:	5da6      	ldrb	r6, [r4, r6]
   12372:	0736      	lsls	r6, r6, #28
   12374:	d50b      	bpl.n	1238e <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   12376:	b150      	cbz	r0, 1238e <ctrl_rl_addr_resolve+0x32>
   12378:	794b      	ldrb	r3, [r1, #5]
   1237a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1237e:	2b40      	cmp	r3, #64	; 0x40
   12380:	d105      	bne.n	1238e <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   12382:	fb05 4202 	mla	r2, r5, r2, r4
   12386:	1dd0      	adds	r0, r2, #7
}
   12388:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1238a:	f7ef bd72 	b.w	1e72 <bt_rpa_irk_matches>
}
   1238e:	2000      	movs	r0, #0
   12390:	bc70      	pop	{r4, r5, r6}
   12392:	4770      	bx	lr
   12394:	200013f4 	.word	0x200013f4
   12398:	200012b4 	.word	0x200012b4

0001239c <ctrl_rl_enabled>:
	return rl_enable;
   1239c:	4b02      	ldr	r3, [pc, #8]	; (123a8 <ctrl_rl_enabled+0xc>)
   1239e:	7818      	ldrb	r0, [r3, #0]
}
   123a0:	3000      	adds	r0, #0
   123a2:	bf18      	it	ne
   123a4:	2001      	movne	r0, #1
   123a6:	4770      	bx	lr
   123a8:	200013f4 	.word	0x200013f4

000123ac <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   123ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123b0:	b089      	sub	sp, #36	; 0x24
   123b2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   123b4:	f002 fa76 	bl	148a4 <_impl_k_uptime_get>
   123b8:	4680      	mov	r8, r0
   123ba:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   123bc:	2c00      	cmp	r4, #0
   123be:	d149      	bne.n	12454 <ll_rl_rpa_update+0xa8>
   123c0:	4b3c      	ldr	r3, [pc, #240]	; (124b4 <ll_rl_rpa_update+0x108>)
   123c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   123c6:	1c5c      	adds	r4, r3, #1
   123c8:	bf08      	it	eq
   123ca:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   123ce:	d041      	beq.n	12454 <ll_rl_rpa_update+0xa8>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   123d0:	1a82      	subs	r2, r0, r2
   123d2:	eb61 0303 	sbc.w	r3, r1, r3
   123d6:	4938      	ldr	r1, [pc, #224]	; (124b8 <ll_rl_rpa_update+0x10c>)
   123d8:	6808      	ldr	r0, [r1, #0]
   123da:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   123dc:	4282      	cmp	r2, r0
   123de:	418b      	sbcs	r3, r1
   123e0:	bfac      	ite	ge
   123e2:	2601      	movge	r6, #1
   123e4:	2600      	movlt	r6, #0
   123e6:	4d35      	ldr	r5, [pc, #212]	; (124bc <ll_rl_rpa_update+0x110>)
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   123e8:	f1a5 0b07 	sub.w	fp, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   123ec:	2400      	movs	r4, #0
   123ee:	465f      	mov	r7, fp
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   123f0:	2328      	movs	r3, #40	; 0x28
   123f2:	4363      	muls	r3, r4
   123f4:	f81b 3003 	ldrb.w	r3, [fp, r3]
   123f8:	07d8      	lsls	r0, r3, #31
   123fa:	d54e      	bpl.n	1249a <ll_rl_rpa_update+0xee>
   123fc:	b90e      	cbnz	r6, 12402 <ll_rl_rpa_update+0x56>
   123fe:	0799      	lsls	r1, r3, #30
   12400:	d44b      	bmi.n	1249a <ll_rl_rpa_update+0xee>

			if (rl[i].pirk) {
   12402:	2328      	movs	r3, #40	; 0x28
   12404:	4363      	muls	r3, r4
   12406:	5cfb      	ldrb	r3, [r7, r3]
   12408:	075a      	lsls	r2, r3, #29
   1240a:	d525      	bpl.n	12458 <ll_rl_rpa_update+0xac>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   1240c:	7c2a      	ldrb	r2, [r5, #16]
   1240e:	4b2c      	ldr	r3, [pc, #176]	; (124c0 <ll_rl_rpa_update+0x114>)
   12410:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   12414:	f103 0210 	add.w	r2, r3, #16
   12418:	f10d 010f 	add.w	r1, sp, #15
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   1241c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   12420:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   12424:	429a      	cmp	r2, r3
   12426:	d1f9      	bne.n	1241c <ll_rl_rpa_update+0x70>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   12428:	f105 0117 	add.w	r1, r5, #23
   1242c:	a804      	add	r0, sp, #16
   1242e:	f7ef fd33 	bl	1e98 <bt_rpa_create>
				LL_ASSERT(!err);
   12432:	b188      	cbz	r0, 12458 <ll_rl_rpa_update+0xac>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   12434:	4b23      	ldr	r3, [pc, #140]	; (124c4 <ll_rl_rpa_update+0x118>)
   12436:	9301      	str	r3, [sp, #4]
   12438:	9300      	str	r3, [sp, #0]
   1243a:	4b23      	ldr	r3, [pc, #140]	; (124c8 <ll_rl_rpa_update+0x11c>)
   1243c:	4a23      	ldr	r2, [pc, #140]	; (124cc <ll_rl_rpa_update+0x120>)
   1243e:	681c      	ldr	r4, [r3, #0]
   12440:	4923      	ldr	r1, [pc, #140]	; (124d0 <ll_rl_rpa_update+0x124>)
   12442:	4b24      	ldr	r3, [pc, #144]	; (124d4 <ll_rl_rpa_update+0x128>)
   12444:	4824      	ldr	r0, [pc, #144]	; (124d8 <ll_rl_rpa_update+0x12c>)
   12446:	47a0      	blx	r4
   12448:	4040      	eors	r0, r0
   1244a:	f380 8811 	msr	BASEPRI, r0
   1244e:	f04f 0004 	mov.w	r0, #4
   12452:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   12454:	2601      	movs	r6, #1
   12456:	e7c6      	b.n	123e6 <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
   12458:	2328      	movs	r3, #40	; 0x28
   1245a:	4363      	muls	r3, r4
   1245c:	5cfb      	ldrb	r3, [r7, r3]
   1245e:	071b      	lsls	r3, r3, #28
   12460:	d515      	bpl.n	1248e <ll_rl_rpa_update+0xe2>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   12462:	f10d 0a10 	add.w	sl, sp, #16
   12466:	4651      	mov	r1, sl
   12468:	4628      	mov	r0, r5
   1246a:	f7ef fd15 	bl	1e98 <bt_rpa_create>
				LL_ASSERT(!err);
   1246e:	2800      	cmp	r0, #0
   12470:	d1e0      	bne.n	12434 <ll_rl_rpa_update+0x88>
   12472:	4b1a      	ldr	r3, [pc, #104]	; (124dc <ll_rl_rpa_update+0x130>)
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   12474:	f8c5 a01d 	str.w	sl, [r5, #29]
   12478:	2206      	movs	r2, #6
   1247a:	fb02 3304 	mla	r3, r2, r4, r3
   1247e:	4618      	mov	r0, r3
   12480:	4651      	mov	r1, sl
   12482:	9303      	str	r3, [sp, #12]
   12484:	f7ef fbe0 	bl	1c48 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   12488:	9b03      	ldr	r3, [sp, #12]
   1248a:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   1248e:	2328      	movs	r3, #40	; 0x28
   12490:	4363      	muls	r3, r4
   12492:	5cfa      	ldrb	r2, [r7, r3]
   12494:	f042 0202 	orr.w	r2, r2, #2
   12498:	54fa      	strb	r2, [r7, r3]
   1249a:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1249c:	2c08      	cmp	r4, #8
   1249e:	f105 0528 	add.w	r5, r5, #40	; 0x28
   124a2:	d1a5      	bne.n	123f0 <ll_rl_rpa_update+0x44>
		}
	}

	if (all) {
   124a4:	b116      	cbz	r6, 124ac <ll_rl_rpa_update+0x100>
		rpa_last_ms = now;
   124a6:	4b03      	ldr	r3, [pc, #12]	; (124b4 <ll_rl_rpa_update+0x108>)
   124a8:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   124ac:	b009      	add	sp, #36	; 0x24
   124ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124b2:	bf00      	nop
   124b4:	20001910 	.word	0x20001910
   124b8:	20001944 	.word	0x20001944
   124bc:	200012bb 	.word	0x200012bb
   124c0:	20001233 	.word	0x20001233
   124c4:	00015359 	.word	0x00015359
   124c8:	20003a5c 	.word	0x20003a5c
   124cc:	00016754 	.word	0x00016754
   124d0:	0001679c 	.word	0x0001679c
   124d4:	00018f75 	.word	0x00018f75
   124d8:	00018ec3 	.word	0x00018ec3
   124dc:	200011fa 	.word	0x200011fa

000124e0 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   124e0:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   124e2:	2001      	movs	r0, #1
   124e4:	f7ff ff62 	bl	123ac <ll_rl_rpa_update>
   124e8:	4b03      	ldr	r3, [pc, #12]	; (124f8 <rpa_timeout+0x18>)
   124ea:	4904      	ldr	r1, [pc, #16]	; (124fc <rpa_timeout+0x1c>)
   124ec:	681a      	ldr	r2, [r3, #0]
   124ee:	4804      	ldr	r0, [pc, #16]	; (12500 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   124f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   124f4:	f002 bcd4 	b.w	14ea0 <k_delayed_work_submit_to_queue>
   124f8:	20001944 	.word	0x20001944
   124fc:	2000191c 	.word	0x2000191c
   12500:	20001988 	.word	0x20001988

00012504 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   12504:	4b07      	ldr	r3, [pc, #28]	; (12524 <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   12506:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   12508:	b130      	cbz	r0, 12518 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   1250a:	b14b      	cbz	r3, 12520 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   1250c:	4b06      	ldr	r3, [pc, #24]	; (12528 <ll_adv_scan_state_cb+0x24>)
   1250e:	4907      	ldr	r1, [pc, #28]	; (1252c <ll_adv_scan_state_cb+0x28>)
   12510:	681a      	ldr	r2, [r3, #0]
   12512:	4807      	ldr	r0, [pc, #28]	; (12530 <ll_adv_scan_state_cb+0x2c>)
   12514:	f002 bcc4 	b.w	14ea0 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   12518:	b113      	cbz	r3, 12520 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   1251a:	4804      	ldr	r0, [pc, #16]	; (1252c <ll_adv_scan_state_cb+0x28>)
   1251c:	f002 bc5c 	b.w	14dd8 <k_delayed_work_cancel>
   12520:	4770      	bx	lr
   12522:	bf00      	nop
   12524:	200013f4 	.word	0x200013f4
   12528:	20001944 	.word	0x20001944
   1252c:	2000191c 	.word	0x2000191c
   12530:	20001988 	.word	0x20001988

00012534 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   12534:	2008      	movs	r0, #8
   12536:	4770      	bx	lr

00012538 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   12538:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   1253a:	f7ff fc21 	bl	11d80 <rl_access_check.constprop.1>
   1253e:	b178      	cbz	r0, 12560 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   12540:	4908      	ldr	r1, [pc, #32]	; (12564 <ll_rl_clear+0x2c>)
   12542:	2300      	movs	r3, #0
   12544:	2428      	movs	r4, #40	; 0x28
   12546:	fb04 f203 	mul.w	r2, r4, r3
   1254a:	3301      	adds	r3, #1
   1254c:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1254e:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   12550:	f36f 0000 	bfc	r0, #0, #1
   12554:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12556:	d1f6      	bne.n	12546 <ll_rl_clear+0xe>
	peer_irk_count = 0;
   12558:	4b03      	ldr	r3, [pc, #12]	; (12568 <ll_rl_clear+0x30>)
   1255a:	2000      	movs	r0, #0
   1255c:	7018      	strb	r0, [r3, #0]
   1255e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12560:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   12562:	bd10      	pop	{r4, pc}
   12564:	200012b4 	.word	0x200012b4
   12568:	2000122a 	.word	0x2000122a

0001256c <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   1256c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12570:	b085      	sub	sp, #20
   12572:	4607      	mov	r7, r0
   12574:	4689      	mov	r9, r1
   12576:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   12578:	f7ff fc02 	bl	11d80 <rl_access_check.constprop.1>
   1257c:	2800      	cmp	r0, #0
   1257e:	f000 8086 	beq.w	1268e <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   12582:	f107 0801 	add.w	r8, r7, #1
   12586:	f10d 020f 	add.w	r2, sp, #15
   1258a:	4641      	mov	r1, r8
   1258c:	7838      	ldrb	r0, [r7, #0]
   1258e:	f7ff fda3 	bl	120d8 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   12592:	2807      	cmp	r0, #7
   12594:	d97d      	bls.n	12692 <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   12596:	f89d 500f 	ldrb.w	r5, [sp, #15]
   1259a:	2d07      	cmp	r5, #7
   1259c:	d87b      	bhi.n	12696 <ll_rl_add+0x12a>
   1259e:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   125a2:	4c3e      	ldr	r4, [pc, #248]	; (1269c <ll_rl_add+0x130>)
   125a4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   125a8:	2628      	movs	r6, #40	; 0x28
   125aa:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   125ac:	f10b 0001 	add.w	r0, fp, #1
   125b0:	2206      	movs	r2, #6
   125b2:	4641      	mov	r1, r8
   125b4:	4420      	add	r0, r4
   125b6:	f7ef fb47 	bl	1c48 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   125ba:	7839      	ldrb	r1, [r7, #0]
   125bc:	5da3      	ldrb	r3, [r4, r6]
   125be:	19a2      	adds	r2, r4, r6
   125c0:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   125c4:	4648      	mov	r0, r9
   125c6:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   125c8:	9201      	str	r2, [sp, #4]
   125ca:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   125cc:	f7f5 f895 	bl	76fa <mem_nz>
   125d0:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   125d2:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   125d4:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   125d8:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   125da:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   125dc:	f7f5 f88d 	bl	76fa <mem_nz>
   125e0:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   125e2:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   125e4:	f000 0001 	and.w	r0, r0, #1
   125e8:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   125ec:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   125f0:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   125f2:	d138      	bne.n	12666 <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   125f4:	b158      	cbz	r0, 1260e <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   125f6:	f10b 0007 	add.w	r0, fp, #7
   125fa:	2210      	movs	r2, #16
   125fc:	4651      	mov	r1, sl
   125fe:	4420      	add	r0, r4
   12600:	f7ef fb22 	bl	1c48 <memcpy>
		rl[i].local_rpa = NULL;
   12604:	2328      	movs	r3, #40	; 0x28
   12606:	fb03 4305 	mla	r3, r3, r5, r4
   1260a:	2200      	movs	r2, #0
   1260c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   1260e:	2628      	movs	r6, #40	; 0x28
   12610:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   12612:	f10b 0018 	add.w	r0, fp, #24
   12616:	2206      	movs	r2, #6
   12618:	2100      	movs	r1, #0
   1261a:	4420      	add	r0, r4
   1261c:	f7ef fb40 	bl	1ca0 <memset>
	rl[i].rpas_ready = 0;
   12620:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   12622:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   12626:	f36f 1304 	bfc	r3, #4, #1
   1262a:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1262c:	2200      	movs	r2, #0
   1262e:	4641      	mov	r1, r8
   12630:	7838      	ldrb	r0, [r7, #0]
   12632:	f7ff fb33 	bl	11c9c <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   12636:	2807      	cmp	r0, #7
   12638:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   1263a:	bf9d      	ittte	ls
   1263c:	4a18      	ldrls	r2, [pc, #96]	; (126a0 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   1263e:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   12642:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   12646:	f36f 1345 	bfchi	r3, #5, #1
   1264a:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   1264c:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   12650:	bf98      	it	ls
   12652:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   12654:	435d      	muls	r5, r3

	return 0;
   12656:	2000      	movs	r0, #0
	rl[i].taken = 1;
   12658:	5d63      	ldrb	r3, [r4, r5]
   1265a:	f043 0301 	orr.w	r3, r3, #1
   1265e:	5563      	strb	r3, [r4, r5]
}
   12660:	b005      	add	sp, #20
   12662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   12666:	4b0f      	ldr	r3, [pc, #60]	; (126a4 <ll_rl_add+0x138>)
   12668:	7819      	ldrb	r1, [r3, #0]
   1266a:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1266c:	4a0e      	ldr	r2, [pc, #56]	; (126a8 <ll_rl_add+0x13c>)
   1266e:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   12670:	1c4a      	adds	r2, r1, #1
   12672:	701a      	strb	r2, [r3, #0]
   12674:	4b0d      	ldr	r3, [pc, #52]	; (126ac <ll_rl_add+0x140>)
   12676:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   1267a:	f109 0210 	add.w	r2, r9, #16
   1267e:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   12680:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   12684:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   12688:	454a      	cmp	r2, r9
   1268a:	d1f9      	bne.n	12680 <ll_rl_add+0x114>
   1268c:	e7b2      	b.n	125f4 <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1268e:	200c      	movs	r0, #12
   12690:	e7e6      	b.n	12660 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   12692:	2012      	movs	r0, #18
   12694:	e7e4      	b.n	12660 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   12696:	2007      	movs	r0, #7
   12698:	e7e2      	b.n	12660 <ll_rl_add+0xf4>
   1269a:	bf00      	nop
   1269c:	200012b4 	.word	0x200012b4
   126a0:	20001427 	.word	0x20001427
   126a4:	2000122a 	.word	0x2000122a
   126a8:	2000122b 	.word	0x2000122b
   126ac:	20001233 	.word	0x20001233

000126b0 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   126b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126b4:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   126b6:	f7ff fb63 	bl	11d80 <rl_access_check.constprop.1>
   126ba:	2800      	cmp	r0, #0
   126bc:	d053      	beq.n	12766 <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   126be:	f109 0a01 	add.w	sl, r9, #1
   126c2:	2200      	movs	r2, #0
   126c4:	4651      	mov	r1, sl
   126c6:	f899 0000 	ldrb.w	r0, [r9]
   126ca:	f7ff fd05 	bl	120d8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   126ce:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   126d0:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   126d2:	d84b      	bhi.n	1276c <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   126d4:	f04f 0b28 	mov.w	fp, #40	; 0x28
   126d8:	4c26      	ldr	r4, [pc, #152]	; (12774 <ll_rl_remove+0xc4>)
   126da:	fb0b f300 	mul.w	r3, fp, r0
   126de:	18e2      	adds	r2, r4, r3
   126e0:	5ce3      	ldrb	r3, [r4, r3]
   126e2:	075b      	lsls	r3, r3, #29
   126e4:	d524      	bpl.n	12730 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   126e6:	4e24      	ldr	r6, [pc, #144]	; (12778 <ll_rl_remove+0xc8>)
   126e8:	7835      	ldrb	r5, [r6, #0]
   126ea:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   126ec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   126f0:	d01b      	beq.n	1272a <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   126f2:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   126f4:	42af      	cmp	r7, r5
   126f6:	d018      	beq.n	1272a <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   126f8:	4820      	ldr	r0, [pc, #128]	; (1277c <ll_rl_remove+0xcc>)
   126fa:	2210      	movs	r2, #16
   126fc:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   12700:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   12704:	f7ef faa0 	bl	1c48 <memcpy>
   12708:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   1270a:	fb0b f103 	mul.w	r1, fp, r3
   1270e:	1862      	adds	r2, r4, r1
   12710:	5c61      	ldrb	r1, [r4, r1]
   12712:	f011 0f01 	tst.w	r1, #1
   12716:	b2d8      	uxtb	r0, r3
   12718:	d021      	beq.n	1275e <ll_rl_remove+0xae>
   1271a:	0749      	lsls	r1, r1, #29
   1271c:	d51f      	bpl.n	1275e <ll_rl_remove+0xae>
   1271e:	7dd1      	ldrb	r1, [r2, #23]
   12720:	42a9      	cmp	r1, r5
   12722:	d11c      	bne.n	1275e <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   12724:	4b16      	ldr	r3, [pc, #88]	; (12780 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   12726:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   12728:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   1272a:	7833      	ldrb	r3, [r6, #0]
   1272c:	3b01      	subs	r3, #1
   1272e:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   12730:	2200      	movs	r2, #0
   12732:	4651      	mov	r1, sl
   12734:	f899 0000 	ldrb.w	r0, [r9]
   12738:	f7ff fab0 	bl	11c9c <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1273c:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   1273e:	bf9f      	itttt	ls
   12740:	4b10      	ldrls	r3, [pc, #64]	; (12784 <ll_rl_remove+0xd4>)
   12742:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   12746:	23ff      	movls	r3, #255	; 0xff
   12748:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   1274a:	2028      	movs	r0, #40	; 0x28
   1274c:	fb00 f008 	mul.w	r0, r0, r8
   12750:	5c23      	ldrb	r3, [r4, r0]
   12752:	f36f 0300 	bfc	r3, #0, #1
   12756:	5423      	strb	r3, [r4, r0]
		return 0;
   12758:	2000      	movs	r0, #0
   1275a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1275e:	3301      	adds	r3, #1
				for (k = 0;
   12760:	2b08      	cmp	r3, #8
   12762:	d1d2      	bne.n	1270a <ll_rl_remove+0x5a>
   12764:	e7e1      	b.n	1272a <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12766:	200c      	movs	r0, #12
   12768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1276c:	2002      	movs	r0, #2
}
   1276e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12772:	bf00      	nop
   12774:	200012b4 	.word	0x200012b4
   12778:	2000122a 	.word	0x2000122a
   1277c:	20001233 	.word	0x20001233
   12780:	2000122b 	.word	0x2000122b
   12784:	20001427 	.word	0x20001427

00012788 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   12788:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   1278a:	795c      	ldrb	r4, [r3, #5]
   1278c:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   12790:	2c40      	cmp	r4, #64	; 0x40
{
   12792:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   12794:	d117      	bne.n	127c6 <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   12796:	b119      	cbz	r1, 127a0 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   12798:	2200      	movs	r2, #0
   1279a:	f7ff fc9d 	bl	120d8 <ll_rl_find>
   1279e:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   127a0:	2a07      	cmp	r2, #7
   127a2:	d810      	bhi.n	127c6 <ll_rl_crpa_set+0x3e>
   127a4:	2128      	movs	r1, #40	; 0x28
   127a6:	4c08      	ldr	r4, [pc, #32]	; (127c8 <ll_rl_crpa_set+0x40>)
   127a8:	fb01 f302 	mul.w	r3, r1, r2
   127ac:	5ce3      	ldrb	r3, [r4, r3]
   127ae:	07db      	lsls	r3, r3, #31
   127b0:	d509      	bpl.n	127c6 <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   127b2:	2018      	movs	r0, #24
   127b4:	fb11 0002 	smlabb	r0, r1, r2, r0
   127b8:	4420      	add	r0, r4
   127ba:	4629      	mov	r1, r5
   127bc:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   127be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   127c2:	f7ef ba41 	b.w	1c48 <memcpy>
   127c6:	bd70      	pop	{r4, r5, r6, pc}
   127c8:	200012b4 	.word	0x200012b4

000127cc <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   127cc:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   127ce:	2200      	movs	r2, #0
{
   127d0:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   127d2:	1c41      	adds	r1, r0, #1
   127d4:	7800      	ldrb	r0, [r0, #0]
   127d6:	f7ff fc7f 	bl	120d8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   127da:	2807      	cmp	r0, #7
   127dc:	d901      	bls.n	127e2 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   127de:	2002      	movs	r0, #2
   127e0:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   127e2:	2428      	movs	r4, #40	; 0x28
   127e4:	2318      	movs	r3, #24
   127e6:	fb14 3000 	smlabb	r0, r4, r0, r3
   127ea:	4c07      	ldr	r4, [pc, #28]	; (12808 <ll_rl_crpa_get+0x3c>)
   127ec:	4404      	add	r4, r0
   127ee:	2106      	movs	r1, #6
   127f0:	4620      	mov	r0, r4
   127f2:	f7f4 ff82 	bl	76fa <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   127f6:	2800      	cmp	r0, #0
   127f8:	d0f1      	beq.n	127de <ll_rl_crpa_get+0x12>
   127fa:	2206      	movs	r2, #6
   127fc:	4621      	mov	r1, r4
   127fe:	4628      	mov	r0, r5
   12800:	f7ef fa22 	bl	1c48 <memcpy>
			return 0;
   12804:	2000      	movs	r0, #0
}
   12806:	bd38      	pop	{r3, r4, r5, pc}
   12808:	200012b4 	.word	0x200012b4

0001280c <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   1280c:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1280e:	2200      	movs	r2, #0
{
   12810:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12812:	1c41      	adds	r1, r0, #1
   12814:	7800      	ldrb	r0, [r0, #0]
   12816:	f7ff fc5f 	bl	120d8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1281a:	2807      	cmp	r0, #7
   1281c:	d80a      	bhi.n	12834 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1281e:	4b06      	ldr	r3, [pc, #24]	; (12838 <ll_rl_lrpa_get+0x2c>)
   12820:	2228      	movs	r2, #40	; 0x28
   12822:	fb02 3000 	mla	r0, r2, r0, r3
   12826:	2206      	movs	r2, #6
   12828:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1282a:	4620      	mov	r0, r4
   1282c:	f7ef fa0c 	bl	1c48 <memcpy>
		return 0;
   12830:	2000      	movs	r0, #0
   12832:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12834:	2002      	movs	r0, #2
}
   12836:	bd10      	pop	{r4, pc}
   12838:	200012b4 	.word	0x200012b4

0001283c <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   1283c:	b510      	push	{r4, lr}
   1283e:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   12840:	f7ff fa9e 	bl	11d80 <rl_access_check.constprop.1>
   12844:	b140      	cbz	r0, 12858 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   12846:	b11c      	cbz	r4, 12850 <ll_rl_enable+0x14>
   12848:	2c01      	cmp	r4, #1
   1284a:	d001      	beq.n	12850 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   1284c:	2012      	movs	r0, #18
	}

	return 0;
}
   1284e:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   12850:	4b02      	ldr	r3, [pc, #8]	; (1285c <ll_rl_enable+0x20>)
   12852:	701c      	strb	r4, [r3, #0]
	return 0;
   12854:	2000      	movs	r0, #0
		break;
   12856:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12858:	200c      	movs	r0, #12
   1285a:	bd10      	pop	{r4, pc}
   1285c:	200013f4 	.word	0x200013f4

00012860 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   12860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12864:	4358      	muls	r0, r3
   12866:	4b01      	ldr	r3, [pc, #4]	; (1286c <ll_rl_timeout_set+0xc>)
   12868:	6018      	str	r0, [r3, #0]
   1286a:	4770      	bx	lr
   1286c:	20001944 	.word	0x20001944

00012870 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   12870:	b538      	push	{r3, r4, r5, lr}
   12872:	4605      	mov	r5, r0
   12874:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   12876:	f7ff fa83 	bl	11d80 <rl_access_check.constprop.1>
   1287a:	b1d8      	cbz	r0, 128b4 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1287c:	2200      	movs	r2, #0
   1287e:	1c69      	adds	r1, r5, #1
   12880:	7828      	ldrb	r0, [r5, #0]
   12882:	f7ff fc29 	bl	120d8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   12886:	2807      	cmp	r0, #7
   12888:	d816      	bhi.n	128b8 <ll_priv_mode_set+0x48>
		switch (mode) {
   1288a:	b11c      	cbz	r4, 12894 <ll_priv_mode_set+0x24>
   1288c:	2c01      	cmp	r4, #1
   1288e:	d00a      	beq.n	128a6 <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   12890:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   12892:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   12894:	2328      	movs	r3, #40	; 0x28
   12896:	4a09      	ldr	r2, [pc, #36]	; (128bc <ll_priv_mode_set+0x4c>)
   12898:	4358      	muls	r0, r3
   1289a:	5c13      	ldrb	r3, [r2, r0]
   1289c:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   128a0:	5413      	strb	r3, [r2, r0]
	return 0;
   128a2:	2000      	movs	r0, #0
			break;
   128a4:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   128a6:	2328      	movs	r3, #40	; 0x28
   128a8:	4a04      	ldr	r2, [pc, #16]	; (128bc <ll_priv_mode_set+0x4c>)
   128aa:	4358      	muls	r0, r3
   128ac:	5c13      	ldrb	r3, [r2, r0]
   128ae:	f043 0310 	orr.w	r3, r3, #16
   128b2:	e7f5      	b.n	128a0 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   128b4:	200c      	movs	r0, #12
   128b6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   128b8:	2002      	movs	r0, #2
   128ba:	bd38      	pop	{r3, r4, r5, pc}
   128bc:	200012b4 	.word	0x200012b4

000128c0 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   128c0:	4a19      	ldr	r2, [pc, #100]	; (12928 <ll_filter_reset+0x68>)
   128c2:	2300      	movs	r3, #0
{
   128c4:	b430      	push	{r4, r5}
	wl_anon = 0;
   128c6:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   128c8:	4a18      	ldr	r2, [pc, #96]	; (1292c <ll_filter_reset+0x6c>)
   128ca:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   128ce:	f36f 0100 	bfc	r1, #0, #1
   128d2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   128d6:	3301      	adds	r3, #1
   128d8:	2b08      	cmp	r3, #8
   128da:	d1f6      	bne.n	128ca <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   128dc:	4a14      	ldr	r2, [pc, #80]	; (12930 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   128de:	4915      	ldr	r1, [pc, #84]	; (12934 <ll_filter_reset+0x74>)
	rl_enable = 0;
   128e0:	2300      	movs	r3, #0
   128e2:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   128e4:	4a14      	ldr	r2, [pc, #80]	; (12938 <ll_filter_reset+0x78>)
   128e6:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   128e8:	4a14      	ldr	r2, [pc, #80]	; (1293c <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   128ea:	4915      	ldr	r1, [pc, #84]	; (12940 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   128ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   128f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   128f4:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   128f8:	2528      	movs	r5, #40	; 0x28
   128fa:	fb05 f203 	mul.w	r2, r5, r3
   128fe:	3301      	adds	r3, #1
   12900:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12902:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   12904:	f36f 0400 	bfc	r4, #0, #1
   12908:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1290a:	d1f6      	bne.n	128fa <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   1290c:	4b0d      	ldr	r3, [pc, #52]	; (12944 <ll_filter_reset+0x84>)
   1290e:	2200      	movs	r2, #0
   12910:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   12912:	b120      	cbz	r0, 1291e <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   12914:	490c      	ldr	r1, [pc, #48]	; (12948 <ll_filter_reset+0x88>)
   12916:	480d      	ldr	r0, [pc, #52]	; (1294c <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   12918:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1291a:	f002 ba4d 	b.w	14db8 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   1291e:	480b      	ldr	r0, [pc, #44]	; (1294c <ll_filter_reset+0x8c>)
}
   12920:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   12922:	f002 ba59 	b.w	14dd8 <k_delayed_work_cancel>
   12926:	bf00      	nop
   12928:	20001918 	.word	0x20001918
   1292c:	20001427 	.word	0x20001427
   12930:	200013f4 	.word	0x200013f4
   12934:	000dbba0 	.word	0x000dbba0
   12938:	20001944 	.word	0x20001944
   1293c:	20001910 	.word	0x20001910
   12940:	200012b4 	.word	0x200012b4
   12944:	2000122a 	.word	0x2000122a
   12948:	000124e1 	.word	0x000124e1
   1294c:	2000191c 	.word	0x2000191c

00012950 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   12950:	4b05      	ldr	r3, [pc, #20]	; (12968 <cntr_init+0x18>)
   12952:	2200      	movs	r2, #0
   12954:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   12958:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   1295c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   12960:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   12964:	4770      	bx	lr
   12966:	bf00      	nop
   12968:	4000b000 	.word	0x4000b000

0001296c <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   1296c:	4a04      	ldr	r2, [pc, #16]	; (12980 <cntr_start+0x14>)
   1296e:	7813      	ldrb	r3, [r2, #0]
   12970:	1c59      	adds	r1, r3, #1
   12972:	7011      	strb	r1, [r2, #0]
   12974:	2001      	movs	r0, #1
   12976:	b913      	cbnz	r3, 1297e <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   12978:	4a02      	ldr	r2, [pc, #8]	; (12984 <cntr_start+0x18>)
   1297a:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   1297c:	4618      	mov	r0, r3
}
   1297e:	4770      	bx	lr
   12980:	20001499 	.word	0x20001499
   12984:	4000b000 	.word	0x4000b000

00012988 <cntr_stop>:

u32_t cntr_stop(void)
{
   12988:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_refcount);
   1298a:	4b0f      	ldr	r3, [pc, #60]	; (129c8 <cntr_stop+0x40>)
   1298c:	7818      	ldrb	r0, [r3, #0]
   1298e:	b978      	cbnz	r0, 129b0 <cntr_stop+0x28>
   12990:	4b0e      	ldr	r3, [pc, #56]	; (129cc <cntr_stop+0x44>)
   12992:	9301      	str	r3, [sp, #4]
   12994:	9300      	str	r3, [sp, #0]
   12996:	4b0e      	ldr	r3, [pc, #56]	; (129d0 <cntr_stop+0x48>)
   12998:	4a0e      	ldr	r2, [pc, #56]	; (129d4 <cntr_stop+0x4c>)
   1299a:	681c      	ldr	r4, [r3, #0]
   1299c:	490e      	ldr	r1, [pc, #56]	; (129d8 <cntr_stop+0x50>)
   1299e:	4b0f      	ldr	r3, [pc, #60]	; (129dc <cntr_stop+0x54>)
   129a0:	480f      	ldr	r0, [pc, #60]	; (129e0 <cntr_stop+0x58>)
   129a2:	47a0      	blx	r4
   129a4:	4040      	eors	r0, r0
   129a6:	f380 8811 	msr	BASEPRI, r0
   129aa:	f04f 0004 	mov.w	r0, #4
   129ae:	df02      	svc	2

	if (--_refcount) {
   129b0:	3801      	subs	r0, #1
   129b2:	b2c0      	uxtb	r0, r0
   129b4:	7018      	strb	r0, [r3, #0]
   129b6:	2301      	movs	r3, #1
   129b8:	b918      	cbnz	r0, 129c2 <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   129ba:	4a0a      	ldr	r2, [pc, #40]	; (129e4 <cntr_stop+0x5c>)
   129bc:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   129be:	b002      	add	sp, #8
   129c0:	bd10      	pop	{r4, pc}
		return 1;
   129c2:	4618      	mov	r0, r3
   129c4:	e7fb      	b.n	129be <cntr_stop+0x36>
   129c6:	bf00      	nop
   129c8:	20001499 	.word	0x20001499
   129cc:	00015359 	.word	0x00015359
   129d0:	20003a5c 	.word	0x20003a5c
   129d4:	00016754 	.word	0x00016754
   129d8:	0001679c 	.word	0x0001679c
   129dc:	00019247 	.word	0x00019247
   129e0:	00019251 	.word	0x00019251
   129e4:	4000b000 	.word	0x4000b000

000129e8 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   129e8:	4b01      	ldr	r3, [pc, #4]	; (129f0 <cntr_cnt_get+0x8>)
   129ea:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   129ee:	4770      	bx	lr
   129f0:	4000b000 	.word	0x4000b000

000129f4 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   129f4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   129f8:	4b01      	ldr	r3, [pc, #4]	; (12a00 <cntr_cmp_set+0xc>)
   129fa:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   129fe:	4770      	bx	lr
   12a00:	4000b000 	.word	0x4000b000

00012a04 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   12a04:	4b11      	ldr	r3, [pc, #68]	; (12a4c <do_ecb+0x48>)
{
   12a06:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   12a08:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   12a0a:	2500      	movs	r5, #0
   12a0c:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   12a0e:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   12a10:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   12a14:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   12a18:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   12a1c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   12a1e:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   12a22:	b934      	cbnz	r4, 12a32 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12a24:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   12a28:	b91c      	cbnz	r4, 12a32 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   12a2a:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12a2e:	2c00      	cmp	r4, #0
   12a30:	d1f5      	bne.n	12a1e <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   12a32:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   12a34:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   12a38:	2c00      	cmp	r4, #0
   12a3a:	d1e8      	bne.n	12a0e <do_ecb+0xa>
   12a3c:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   12a40:	2e00      	cmp	r6, #0
   12a42:	d0e4      	beq.n	12a0e <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   12a44:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   12a48:	bd70      	pop	{r4, r5, r6, pc}
   12a4a:	bf00      	nop
   12a4c:	4000e000 	.word	0x4000e000

00012a50 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   12a50:	b570      	push	{r4, r5, r6, lr}
   12a52:	b08c      	sub	sp, #48	; 0x30
   12a54:	460e      	mov	r6, r1
   12a56:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12a58:	4601      	mov	r1, r0
   12a5a:	2210      	movs	r2, #16
   12a5c:	4668      	mov	r0, sp
{
   12a5e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12a60:	f7f4 fe3c 	bl	76dc <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   12a64:	2210      	movs	r2, #16
   12a66:	eb0d 0002 	add.w	r0, sp, r2
   12a6a:	4631      	mov	r1, r6
   12a6c:	f7f4 fe36 	bl	76dc <mem_rcopy>

	do_ecb(&ecb);
   12a70:	4668      	mov	r0, sp
   12a72:	f7ff ffc7 	bl	12a04 <do_ecb>

	if (cipher_text_le) {
   12a76:	b125      	cbz	r5, 12a82 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   12a78:	2210      	movs	r2, #16
   12a7a:	a908      	add	r1, sp, #32
   12a7c:	4628      	mov	r0, r5
   12a7e:	f7f4 fe2d 	bl	76dc <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   12a82:	b124      	cbz	r4, 12a8e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   12a84:	2210      	movs	r2, #16
   12a86:	a908      	add	r1, sp, #32
   12a88:	4620      	mov	r0, r4
   12a8a:	f7ef f8dd 	bl	1c48 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   12a8e:	b00c      	add	sp, #48	; 0x30
   12a90:	bd70      	pop	{r4, r5, r6, pc}
	...

00012a94 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   12a94:	4b07      	ldr	r3, [pc, #28]	; (12ab4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   12a96:	4a08      	ldr	r2, [pc, #32]	; (12ab8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   12a98:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   12a9c:	4907      	ldr	r1, [pc, #28]	; (12abc <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   12a9e:	4a08      	ldr	r2, [pc, #32]	; (12ac0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   12aa0:	2800      	cmp	r0, #0
   12aa2:	bf14      	ite	ne
   12aa4:	4610      	movne	r0, r2
   12aa6:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   12aa8:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   12aaa:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   12aae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12ab2:	4770      	bx	lr
   12ab4:	4001f000 	.word	0x4001f000
   12ab8:	40008140 	.word	0x40008140
   12abc:	40001004 	.word	0x40001004
   12ac0:	40001000 	.word	0x40001000

00012ac4 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   12ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   12ac6:	4e2c      	ldr	r6, [pc, #176]	; (12b78 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   12ac8:	4f2c      	ldr	r7, [pc, #176]	; (12b7c <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   12aca:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   12acc:	4b2c      	ldr	r3, [pc, #176]	; (12b80 <sw_switch.isra.9+0xbc>)
   12ace:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   12ad2:	b22b      	sxth	r3, r5
   12ad4:	00dc      	lsls	r4, r3, #3
   12ad6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   12ada:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   12ade:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   12ae2:	f105 040b 	add.w	r4, r5, #11
   12ae6:	b2e4      	uxtb	r4, r4
   12ae8:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   12aea:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   12aee:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   12af2:	3fc0      	subs	r7, #192	; 0xc0
   12af4:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   12af8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   12afc:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   12b00:	2800      	cmp	r0, #0
   12b02:	d034      	beq.n	12b6e <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   12b04:	f24a 075a 	movw	r7, #41050	; 0xa05a
   12b08:	f649 4040 	movw	r0, #40000	; 0x9c40
   12b0c:	2a02      	cmp	r2, #2
   12b0e:	bf0c      	ite	eq
   12b10:	4602      	moveq	r2, r0
   12b12:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   12b14:	f242 47b8 	movw	r7, #9400	; 0x24b8
   12b18:	f241 504a 	movw	r0, #5450	; 0x154a
   12b1c:	2902      	cmp	r1, #2
   12b1e:	bf18      	it	ne
   12b20:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   12b22:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   12b26:	4401      	add	r1, r0
   12b28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12b2c:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   12b30:	4a14      	ldr	r2, [pc, #80]	; (12b84 <sw_switch.isra.9+0xc0>)
   12b32:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   12b36:	009b      	lsls	r3, r3, #2
   12b38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12b3c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   12b40:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   12b44:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   12b46:	bf8b      	itete	hi
   12b48:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   12b4c:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   12b4e:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   12b50:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   12b54:	bf88      	it	hi
   12b56:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   12b5a:	4b08      	ldr	r3, [pc, #32]	; (12b7c <sw_switch.isra.9+0xb8>)
   12b5c:	f44f 6290 	mov.w	r2, #1152	; 0x480
   12b60:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   12b64:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   12b66:	f003 0301 	and.w	r3, r3, #1
   12b6a:	7033      	strb	r3, [r6, #0]
   12b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   12b6e:	4a06      	ldr	r2, [pc, #24]	; (12b88 <sw_switch.isra.9+0xc4>)
   12b70:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   12b74:	212d      	movs	r1, #45	; 0x2d
   12b76:	e7de      	b.n	12b36 <sw_switch.isra.9+0x72>
   12b78:	200016bc 	.word	0x200016bc
   12b7c:	4001f000 	.word	0x4001f000
   12b80:	4000110c 	.word	0x4000110c
   12b84:	40001000 	.word	0x40001000
   12b88:	40001004 	.word	0x40001004

00012b8c <isr_radio>:
	if (sfp_radio_isr) {
   12b8c:	4b02      	ldr	r3, [pc, #8]	; (12b98 <isr_radio+0xc>)
   12b8e:	681b      	ldr	r3, [r3, #0]
   12b90:	b103      	cbz	r3, 12b94 <isr_radio+0x8>
		sfp_radio_isr();
   12b92:	4718      	bx	r3
   12b94:	4770      	bx	lr
   12b96:	bf00      	nop
   12b98:	200016b8 	.word	0x200016b8

00012b9c <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   12b9c:	4b06      	ldr	r3, [pc, #24]	; (12bb8 <radio_isr_set+0x1c>)
   12b9e:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   12ba0:	4b06      	ldr	r3, [pc, #24]	; (12bbc <radio_isr_set+0x20>)
   12ba2:	2210      	movs	r2, #16
   12ba4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12ba8:	4b05      	ldr	r3, [pc, #20]	; (12bc0 <radio_isr_set+0x24>)
   12baa:	2202      	movs	r2, #2
   12bac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   12bb0:	2001      	movs	r0, #1
   12bb2:	f7ee be53 	b.w	185c <_arch_irq_enable>
   12bb6:	bf00      	nop
   12bb8:	200016b8 	.word	0x200016b8
   12bbc:	40001000 	.word	0x40001000
   12bc0:	e000e100 	.word	0xe000e100

00012bc4 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   12bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   12bcc:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   12bce:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   12bd2:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   12bd6:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   12bda:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   12bde:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   12be2:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   12be6:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   12bea:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   12bee:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   12bf2:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   12bf6:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   12bfa:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   12bfe:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   12c02:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   12c06:	4770      	bx	lr

00012c08 <radio_reset>:
{
   12c08:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   12c0a:	2001      	movs	r0, #1
   12c0c:	f7ee fe36 	bl	187c <_arch_irq_disable>
	NRF_RADIO->POWER =
   12c10:	4b08      	ldr	r3, [pc, #32]	; (12c34 <radio_reset+0x2c>)
   12c12:	2200      	movs	r2, #0
   12c14:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   12c18:	2201      	movs	r2, #1
   12c1a:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   12c1e:	4a06      	ldr	r2, [pc, #24]	; (12c38 <radio_reset+0x30>)
   12c20:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   12c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   12c26:	f023 0301 	bic.w	r3, r3, #1
   12c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   12c2e:	6013      	str	r3, [r2, #0]
   12c30:	bd08      	pop	{r3, pc}
   12c32:	bf00      	nop
   12c34:	40001000 	.word	0x40001000
   12c38:	40001774 	.word	0x40001774

00012c3c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   12c3c:	4b06      	ldr	r3, [pc, #24]	; (12c58 <radio_phy_set+0x1c>)
	switch (phy) {
   12c3e:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   12c40:	bf0c      	ite	eq
   12c42:	2204      	moveq	r2, #4
   12c44:	2203      	movne	r2, #3
   12c46:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   12c4a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   12c4e:	f042 0201 	orr.w	r2, r2, #1
   12c52:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   12c56:	4770      	bx	lr
   12c58:	40001000 	.word	0x40001000

00012c5c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   12c5c:	4b01      	ldr	r3, [pc, #4]	; (12c64 <radio_tx_power_set+0x8>)
   12c5e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   12c62:	4770      	bx	lr
   12c64:	40001000 	.word	0x40001000

00012c68 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   12c68:	4b01      	ldr	r3, [pc, #4]	; (12c70 <radio_freq_chan_set+0x8>)
   12c6a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   12c6e:	4770      	bx	lr
   12c70:	40001000 	.word	0x40001000

00012c74 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   12c74:	4b07      	ldr	r3, [pc, #28]	; (12c94 <radio_whiten_iv_set+0x20>)
   12c76:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   12c7a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12c7e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   12c82:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   12c86:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12c8a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   12c8e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   12c92:	4770      	bx	lr
   12c94:	40001000 	.word	0x40001000

00012c98 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   12c98:	4a0a      	ldr	r2, [pc, #40]	; (12cc4 <radio_aa_set+0x2c>)
   12c9a:	2300      	movs	r3, #0
   12c9c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   12ca0:	2301      	movs	r3, #1
   12ca2:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   12ca6:	78c3      	ldrb	r3, [r0, #3]
   12ca8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   12cac:	7843      	ldrb	r3, [r0, #1]
   12cae:	7881      	ldrb	r1, [r0, #2]
   12cb0:	041b      	lsls	r3, r3, #16
   12cb2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   12cb6:	7801      	ldrb	r1, [r0, #0]
   12cb8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   12cbc:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   12cc0:	4770      	bx	lr
   12cc2:	bf00      	nop
   12cc4:	40001000 	.word	0x40001000

00012cc8 <radio_pkt_configure>:
	switch (phy) {
   12cc8:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   12ccc:	2b02      	cmp	r3, #2
{
   12cce:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   12cd0:	bf0c      	ite	eq
   12cd2:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   12cd6:	2400      	movne	r4, #0
	if (dc) {
   12cd8:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   12cda:	f1c0 0308 	rsb	r3, r0, #8
   12cde:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   12ce2:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   12ce6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   12cea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   12cee:	4a0b      	ldr	r2, [pc, #44]	; (12d1c <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   12cf0:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   12cf4:	bf48      	it	mi
   12cf6:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   12cfa:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   12cfc:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   12d00:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   12d04:	4b06      	ldr	r3, [pc, #24]	; (12d20 <radio_pkt_configure+0x58>)
   12d06:	4003      	ands	r3, r0
   12d08:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   12d0c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   12d10:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   12d14:	4319      	orrs	r1, r3
   12d16:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   12d1a:	bd10      	pop	{r4, pc}
   12d1c:	40001000 	.word	0x40001000
   12d20:	fef80000 	.word	0xfef80000

00012d24 <radio_pkt_rx_set>:
   12d24:	4b01      	ldr	r3, [pc, #4]	; (12d2c <radio_pkt_rx_set+0x8>)
   12d26:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   12d2a:	4770      	bx	lr
   12d2c:	40001000 	.word	0x40001000

00012d30 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   12d30:	4b01      	ldr	r3, [pc, #4]	; (12d38 <radio_pkt_tx_set+0x8>)
   12d32:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   12d36:	4770      	bx	lr
   12d38:	40001000 	.word	0x40001000

00012d3c <radio_tx_ready_delay_get>:
	switch (phy) {
   12d3c:	2802      	cmp	r0, #2
}
   12d3e:	bf0c      	ite	eq
   12d40:	2028      	moveq	r0, #40	; 0x28
   12d42:	2029      	movne	r0, #41	; 0x29
   12d44:	4770      	bx	lr

00012d46 <radio_tx_chain_delay_get>:
}
   12d46:	2001      	movs	r0, #1
   12d48:	4770      	bx	lr

00012d4a <radio_rx_ready_delay_get>:
}
   12d4a:	2029      	movs	r0, #41	; 0x29
   12d4c:	4770      	bx	lr

00012d4e <radio_rx_chain_delay_get>:
	switch (phy) {
   12d4e:	2802      	cmp	r0, #2
}
   12d50:	bf0c      	ite	eq
   12d52:	2006      	moveq	r0, #6
   12d54:	200a      	movne	r0, #10
   12d56:	4770      	bx	lr

00012d58 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   12d58:	4b01      	ldr	r3, [pc, #4]	; (12d60 <radio_rx_enable+0x8>)
   12d5a:	2201      	movs	r2, #1
   12d5c:	605a      	str	r2, [r3, #4]
   12d5e:	4770      	bx	lr
   12d60:	40001000 	.word	0x40001000

00012d64 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   12d64:	4b01      	ldr	r3, [pc, #4]	; (12d6c <radio_tx_enable+0x8>)
   12d66:	2201      	movs	r2, #1
   12d68:	601a      	str	r2, [r3, #0]
   12d6a:	4770      	bx	lr
   12d6c:	40001000 	.word	0x40001000

00012d70 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12d70:	4a07      	ldr	r2, [pc, #28]	; (12d90 <radio_disable+0x20>)
   12d72:	f44f 6390 	mov.w	r3, #1152	; 0x480
   12d76:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   12d7a:	2301      	movs	r3, #1
   12d7c:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   12d7e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   12d80:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   12d84:	2100      	movs	r1, #0
   12d86:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   12d8a:	6113      	str	r3, [r2, #16]
   12d8c:	4770      	bx	lr
   12d8e:	bf00      	nop
   12d90:	4001f000 	.word	0x4001f000

00012d94 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   12d94:	4b04      	ldr	r3, [pc, #16]	; (12da8 <radio_status_reset+0x14>)
   12d96:	2200      	movs	r2, #0
   12d98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   12d9c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   12da0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   12da4:	4770      	bx	lr
   12da6:	bf00      	nop
   12da8:	40001000 	.word	0x40001000

00012dac <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   12dac:	4b03      	ldr	r3, [pc, #12]	; (12dbc <radio_is_ready+0x10>)
   12dae:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   12db2:	3000      	adds	r0, #0
   12db4:	bf18      	it	ne
   12db6:	2001      	movne	r0, #1
   12db8:	4770      	bx	lr
   12dba:	bf00      	nop
   12dbc:	40001000 	.word	0x40001000

00012dc0 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   12dc0:	4b03      	ldr	r3, [pc, #12]	; (12dd0 <radio_is_done+0x10>)
   12dc2:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   12dc6:	3000      	adds	r0, #0
   12dc8:	bf18      	it	ne
   12dca:	2001      	movne	r0, #1
   12dcc:	4770      	bx	lr
   12dce:	bf00      	nop
   12dd0:	40001000 	.word	0x40001000

00012dd4 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   12dd4:	4b03      	ldr	r3, [pc, #12]	; (12de4 <radio_is_idle+0x10>)
   12dd6:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   12dda:	fab0 f080 	clz	r0, r0
   12dde:	0940      	lsrs	r0, r0, #5
   12de0:	4770      	bx	lr
   12de2:	bf00      	nop
   12de4:	40001000 	.word	0x40001000

00012de8 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   12de8:	4b04      	ldr	r3, [pc, #16]	; (12dfc <radio_crc_configure+0x14>)
   12dea:	f240 1203 	movw	r2, #259	; 0x103
   12dee:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   12df2:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   12df6:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   12dfa:	4770      	bx	lr
   12dfc:	40001000 	.word	0x40001000

00012e00 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   12e00:	4b03      	ldr	r3, [pc, #12]	; (12e10 <radio_crc_is_valid+0x10>)
   12e02:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12e06:	3000      	adds	r0, #0
   12e08:	bf18      	it	ne
   12e0a:	2001      	movne	r0, #1
   12e0c:	4770      	bx	lr
   12e0e:	bf00      	nop
   12e10:	40001000 	.word	0x40001000

00012e14 <radio_pkt_empty_get>:
}
   12e14:	4800      	ldr	r0, [pc, #0]	; (12e18 <radio_pkt_empty_get+0x4>)
   12e16:	4770      	bx	lr
   12e18:	200015ac 	.word	0x200015ac

00012e1c <radio_pkt_scratch_get>:
}
   12e1c:	4800      	ldr	r0, [pc, #0]	; (12e20 <radio_pkt_scratch_get+0x4>)
   12e1e:	4770      	bx	lr
   12e20:	200015b0 	.word	0x200015b0

00012e24 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12e24:	4b04      	ldr	r3, [pc, #16]	; (12e38 <radio_switch_complete_and_rx+0x14>)
   12e26:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   12e28:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12e2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   12e2e:	4602      	mov	r2, r0
   12e30:	4608      	mov	r0, r1
   12e32:	f7ff be47 	b.w	12ac4 <sw_switch.isra.9>
   12e36:	bf00      	nop
   12e38:	40001000 	.word	0x40001000

00012e3c <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12e3c:	4b03      	ldr	r3, [pc, #12]	; (12e4c <radio_switch_complete_and_tx+0x10>)
   12e3e:	2103      	movs	r1, #3
   12e40:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   12e44:	4601      	mov	r1, r0
   12e46:	2001      	movs	r0, #1
   12e48:	f7ff be3c 	b.w	12ac4 <sw_switch.isra.9>
   12e4c:	40001000 	.word	0x40001000

00012e50 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   12e50:	4b05      	ldr	r3, [pc, #20]	; (12e68 <radio_switch_complete_and_disable+0x18>)
   12e52:	2203      	movs	r2, #3
   12e54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12e58:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   12e5c:	f44f 6290 	mov.w	r2, #1152	; 0x480
   12e60:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12e64:	4770      	bx	lr
   12e66:	bf00      	nop
   12e68:	40001000 	.word	0x40001000

00012e6c <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   12e6c:	4a03      	ldr	r2, [pc, #12]	; (12e7c <radio_rssi_measure+0x10>)
   12e6e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   12e72:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   12e76:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   12e7a:	4770      	bx	lr
   12e7c:	40001000 	.word	0x40001000

00012e80 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   12e80:	4b01      	ldr	r3, [pc, #4]	; (12e88 <radio_rssi_get+0x8>)
   12e82:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   12e86:	4770      	bx	lr
   12e88:	40001000 	.word	0x40001000

00012e8c <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   12e8c:	4b02      	ldr	r3, [pc, #8]	; (12e98 <radio_rssi_status_reset+0xc>)
   12e8e:	2200      	movs	r2, #0
   12e90:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   12e94:	4770      	bx	lr
   12e96:	bf00      	nop
   12e98:	40001000 	.word	0x40001000

00012e9c <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   12e9c:	4b03      	ldr	r3, [pc, #12]	; (12eac <radio_rssi_is_ready+0x10>)
   12e9e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   12ea2:	3000      	adds	r0, #0
   12ea4:	bf18      	it	ne
   12ea6:	2001      	movne	r0, #1
   12ea8:	4770      	bx	lr
   12eaa:	bf00      	nop
   12eac:	40001000 	.word	0x40001000

00012eb0 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   12eb0:	b530      	push	{r4, r5, lr}
   12eb2:	2400      	movs	r4, #0
   12eb4:	00a3      	lsls	r3, r4, #2
   12eb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   12ebe:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   12ec0:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   12ec4:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   12ec6:	8895      	ldrh	r5, [r2, #4]
   12ec8:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   12ecc:	2c08      	cmp	r4, #8
		bdaddr += 6;
   12ece:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   12ed2:	d1ef      	bne.n	12eb4 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   12ed4:	4b02      	ldr	r3, [pc, #8]	; (12ee0 <radio_filter_configure+0x30>)
   12ed6:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   12eda:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   12ede:	bd30      	pop	{r4, r5, pc}
   12ee0:	40001000 	.word	0x40001000

00012ee4 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   12ee4:	4a03      	ldr	r2, [pc, #12]	; (12ef4 <radio_filter_disable+0x10>)
   12ee6:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   12eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12eee:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   12ef2:	4770      	bx	lr
   12ef4:	40001000 	.word	0x40001000

00012ef8 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   12ef8:	4b02      	ldr	r3, [pc, #8]	; (12f04 <radio_filter_status_reset+0xc>)
   12efa:	2200      	movs	r2, #0
   12efc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   12f00:	4770      	bx	lr
   12f02:	bf00      	nop
   12f04:	40001000 	.word	0x40001000

00012f08 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   12f08:	4b03      	ldr	r3, [pc, #12]	; (12f18 <radio_filter_has_match+0x10>)
   12f0a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   12f0e:	3000      	adds	r0, #0
   12f10:	bf18      	it	ne
   12f12:	2001      	movne	r0, #1
   12f14:	4770      	bx	lr
   12f16:	bf00      	nop
   12f18:	40001000 	.word	0x40001000

00012f1c <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   12f1c:	4b01      	ldr	r3, [pc, #4]	; (12f24 <radio_filter_match_get+0x8>)
   12f1e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   12f22:	4770      	bx	lr
   12f24:	40001000 	.word	0x40001000

00012f28 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   12f28:	4b04      	ldr	r3, [pc, #16]	; (12f3c <radio_bc_configure+0x14>)
   12f2a:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   12f2e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   12f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12f36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   12f3a:	4770      	bx	lr
   12f3c:	40001000 	.word	0x40001000

00012f40 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   12f40:	4b05      	ldr	r3, [pc, #20]	; (12f58 <radio_tmr_status_reset+0x18>)
   12f42:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   12f46:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   12f4a:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   12f4e:	227f      	movs	r2, #127	; 0x7f
   12f50:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12f54:	4770      	bx	lr
   12f56:	bf00      	nop
   12f58:	4000b000 	.word	0x4000b000

00012f5c <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   12f5c:	4b03      	ldr	r3, [pc, #12]	; (12f6c <radio_tmr_tifs_set+0x10>)
   12f5e:	4a04      	ldr	r2, [pc, #16]	; (12f70 <radio_tmr_tifs_set+0x14>)
   12f60:	781b      	ldrb	r3, [r3, #0]
   12f62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   12f66:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   12f6a:	4770      	bx	lr
   12f6c:	200016bc 	.word	0x200016bc
   12f70:	40009000 	.word	0x40009000

00012f74 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   12f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12f78:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   12f7c:	4c30      	ldr	r4, [pc, #192]	; (13040 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   12f7e:	4d31      	ldr	r5, [pc, #196]	; (13044 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12f80:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   12f84:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   12f86:	bf88      	it	hi
   12f88:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   12f8c:	4b2e      	ldr	r3, [pc, #184]	; (13048 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   12f8e:	4c2f      	ldr	r4, [pc, #188]	; (1304c <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   12f90:	bf82      	ittt	hi
   12f92:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   12f96:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   12f9a:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   12f9e:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   12fa0:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   12fa4:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   12fa6:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   12fa8:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   12fac:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   12fae:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   12fb2:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   12fb6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   12fba:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   12fbe:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   12fc2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   12fc6:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   12fca:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   12fce:	4920      	ldr	r1, [pc, #128]	; (13050 <radio_tmr_start+0xdc>)
   12fd0:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   12fd4:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   12fd8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   12fdc:	f7ff fd5a 	bl	12a94 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   12fe0:	4b1c      	ldr	r3, [pc, #112]	; (13054 <radio_tmr_start+0xe0>)
   12fe2:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   12fe4:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   12fe8:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   12fec:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   12ff0:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   12ff2:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   12ff6:	3b74      	subs	r3, #116	; 0x74
   12ff8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   12ffc:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   13000:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   13004:	f503 739a 	add.w	r3, r3, #308	; 0x134
   13008:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   1300c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   13010:	33c4      	adds	r3, #196	; 0xc4
   13012:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   13016:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   1301a:	3bc0      	subs	r3, #192	; 0xc0
   1301c:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   13020:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   13024:	33c8      	adds	r3, #200	; 0xc8
   13026:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1302a:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1302e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   13032:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   13036:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   1303a:	4628      	mov	r0, r5
   1303c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13040:	7ff0bdbf 	.word	0x7ff0bdbf
   13044:	000f4240 	.word	0x000f4240
   13048:	40008000 	.word	0x40008000
   1304c:	4000b000 	.word	0x4000b000
   13050:	4000b148 	.word	0x4000b148
   13054:	40009000 	.word	0x40009000

00013058 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   13058:	4a04      	ldr	r2, [pc, #16]	; (1306c <radio_tmr_stop+0x14>)
   1305a:	2301      	movs	r3, #1
   1305c:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   1305e:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   13060:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   13064:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   13066:	6113      	str	r3, [r2, #16]
   13068:	4770      	bx	lr
   1306a:	bf00      	nop
   1306c:	40008000 	.word	0x40008000

00013070 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   13070:	4b0c      	ldr	r3, [pc, #48]	; (130a4 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   13072:	4a0d      	ldr	r2, [pc, #52]	; (130a8 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   13074:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   13078:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1307c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   13080:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13084:	3240      	adds	r2, #64	; 0x40
   13086:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   1308a:	f502 7280 	add.w	r2, r2, #256	; 0x100
   1308e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   13092:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   13096:	3a34      	subs	r2, #52	; 0x34
   13098:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   1309c:	2218      	movs	r2, #24
   1309e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   130a2:	4770      	bx	lr
   130a4:	40008000 	.word	0x40008000
   130a8:	40001104 	.word	0x40001104

000130ac <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   130ac:	4b0b      	ldr	r3, [pc, #44]	; (130dc <radio_tmr_aa_capture+0x30>)
   130ae:	4a0c      	ldr	r2, [pc, #48]	; (130e0 <radio_tmr_aa_capture+0x34>)
   130b0:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   130b4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   130b8:	3240      	adds	r2, #64	; 0x40
   130ba:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   130be:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   130c2:	3a3c      	subs	r2, #60	; 0x3c
   130c4:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   130c8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   130cc:	3240      	adds	r2, #64	; 0x40
   130ce:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   130d2:	220c      	movs	r2, #12
   130d4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   130d8:	4770      	bx	lr
   130da:	bf00      	nop
   130dc:	4001f000 	.word	0x4001f000
   130e0:	40001100 	.word	0x40001100

000130e4 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   130e4:	4b01      	ldr	r3, [pc, #4]	; (130ec <radio_tmr_aa_get+0x8>)
   130e6:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   130ea:	4770      	bx	lr
   130ec:	40008000 	.word	0x40008000

000130f0 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   130f0:	4b01      	ldr	r3, [pc, #4]	; (130f8 <radio_tmr_aa_save+0x8>)
   130f2:	6018      	str	r0, [r3, #0]
   130f4:	4770      	bx	lr
   130f6:	bf00      	nop
   130f8:	200016b4 	.word	0x200016b4

000130fc <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   130fc:	4b01      	ldr	r3, [pc, #4]	; (13104 <radio_tmr_aa_restore+0x8>)
   130fe:	6818      	ldr	r0, [r3, #0]
   13100:	4770      	bx	lr
   13102:	bf00      	nop
   13104:	200016b4 	.word	0x200016b4

00013108 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   13108:	4b01      	ldr	r3, [pc, #4]	; (13110 <radio_tmr_ready_get+0x8>)
   1310a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1310e:	4770      	bx	lr
   13110:	40008000 	.word	0x40008000

00013114 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   13114:	4b06      	ldr	r3, [pc, #24]	; (13130 <radio_tmr_end_capture+0x1c>)
   13116:	4a07      	ldr	r2, [pc, #28]	; (13134 <radio_tmr_end_capture+0x20>)
   13118:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   1311c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13120:	323c      	adds	r2, #60	; 0x3c
   13122:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   13126:	2220      	movs	r2, #32
   13128:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1312c:	4770      	bx	lr
   1312e:	bf00      	nop
   13130:	4001f000 	.word	0x4001f000
   13134:	4000110c 	.word	0x4000110c

00013138 <radio_tmr_end_get>:
   13138:	4b01      	ldr	r3, [pc, #4]	; (13140 <radio_tmr_end_get+0x8>)
   1313a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1313e:	4770      	bx	lr
   13140:	40008000 	.word	0x40008000

00013144 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   13144:	4b01      	ldr	r3, [pc, #4]	; (1314c <radio_tmr_tifs_base_get+0x8>)
   13146:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   1314a:	4770      	bx	lr
   1314c:	40008000 	.word	0x40008000

00013150 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13150:	4b16      	ldr	r3, [pc, #88]	; (131ac <radio_ccm_rx_pkt_set+0x5c>)
{
   13152:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13154:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13156:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13158:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1315c:	4e14      	ldr	r6, [pc, #80]	; (131b0 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1315e:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   13162:	4d14      	ldr	r5, [pc, #80]	; (131b4 <radio_ccm_rx_pkt_set+0x64>)
   13164:	2902      	cmp	r1, #2
   13166:	bf0c      	ite	eq
   13168:	4629      	moveq	r1, r5
   1316a:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   1316c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   13170:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   13174:	4810      	ldr	r0, [pc, #64]	; (131b8 <radio_ccm_rx_pkt_set+0x68>)
   13176:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   1317a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1317e:	4a0f      	ldr	r2, [pc, #60]	; (131bc <radio_ccm_rx_pkt_set+0x6c>)
   13180:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   13184:	490e      	ldr	r1, [pc, #56]	; (131c0 <radio_ccm_rx_pkt_set+0x70>)
   13186:	4a0f      	ldr	r2, [pc, #60]	; (131c4 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   13188:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1318c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   13190:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   13194:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   13198:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   1319c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   131a0:	2140      	movs	r1, #64	; 0x40
   131a2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   131a6:	2201      	movs	r2, #1
   131a8:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   131aa:	bd70      	pop	{r4, r5, r6, pc}
   131ac:	4000f000 	.word	0x4000f000
   131b0:	01000001 	.word	0x01000001
   131b4:	01010001 	.word	0x01010001
   131b8:	200015b0 	.word	0x200015b0
   131bc:	200014a0 	.word	0x200014a0
   131c0:	40001104 	.word	0x40001104
   131c4:	4001f000 	.word	0x4001f000

000131c8 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   131c8:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   131ca:	4b0e      	ldr	r3, [pc, #56]	; (13204 <radio_ccm_tx_pkt_set+0x3c>)
   131cc:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   131ce:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   131d0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   131d4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   131d8:	4c0b      	ldr	r4, [pc, #44]	; (13208 <radio_ccm_tx_pkt_set+0x40>)
   131da:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   131de:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   131e2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   131e6:	4809      	ldr	r0, [pc, #36]	; (1320c <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   131e8:	4909      	ldr	r1, [pc, #36]	; (13210 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   131ea:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   131ee:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   131f2:	2101      	movs	r1, #1
   131f4:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   131f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   131fc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   13200:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   13202:	bd10      	pop	{r4, pc}
   13204:	4000f000 	.word	0x4000f000
   13208:	01010000 	.word	0x01010000
   1320c:	200015b0 	.word	0x200015b0
   13210:	200014a0 	.word	0x200014a0

00013214 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   13214:	4b0c      	ldr	r3, [pc, #48]	; (13248 <radio_ccm_is_done+0x34>)
   13216:	2202      	movs	r2, #2
   13218:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1321c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   13220:	b16a      	cbz	r2, 1323e <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   13222:	2202      	movs	r2, #2
   13224:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   13228:	4a08      	ldr	r2, [pc, #32]	; (1324c <radio_ccm_is_done+0x38>)
   1322a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1322e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   13232:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   13236:	fab0 f080 	clz	r0, r0
   1323a:	0940      	lsrs	r0, r0, #5
   1323c:	4770      	bx	lr
		__WFE();
   1323e:	bf20      	wfe
		__SEV();
   13240:	bf40      	sev
		__WFE();
   13242:	bf20      	wfe
   13244:	e7ea      	b.n	1321c <radio_ccm_is_done+0x8>
   13246:	bf00      	nop
   13248:	4000f000 	.word	0x4000f000
   1324c:	e000e100 	.word	0xe000e100

00013250 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   13250:	4b03      	ldr	r3, [pc, #12]	; (13260 <radio_ccm_mic_is_valid+0x10>)
   13252:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   13256:	3000      	adds	r0, #0
   13258:	bf18      	it	ne
   1325a:	2001      	movne	r0, #1
   1325c:	4770      	bx	lr
   1325e:	bf00      	nop
   13260:	4000f000 	.word	0x4000f000

00013264 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   13264:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   13266:	4c13      	ldr	r4, [pc, #76]	; (132b4 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   13268:	4d13      	ldr	r5, [pc, #76]	; (132b8 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1326a:	2303      	movs	r3, #3
   1326c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   13270:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   13274:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   13278:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   1327c:	3b01      	subs	r3, #1
   1327e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   13282:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   13284:	4b0d      	ldr	r3, [pc, #52]	; (132bc <radio_ar_configure+0x58>)
   13286:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   1328a:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   1328c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   13290:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   13294:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   13298:	f7ff fe46 	bl	12f28 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   1329c:	4b08      	ldr	r3, [pc, #32]	; (132c0 <radio_ar_configure+0x5c>)
   1329e:	4a09      	ldr	r2, [pc, #36]	; (132c4 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   132a0:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   132a4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   132a8:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   132aa:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   132ae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   132b2:	bd38      	pop	{r3, r4, r5, pc}
   132b4:	4000f000 	.word	0x4000f000
   132b8:	40001000 	.word	0x40001000
   132bc:	2000149c 	.word	0x2000149c
   132c0:	4001f000 	.word	0x4001f000
   132c4:	40001128 	.word	0x40001128

000132c8 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   132c8:	4b01      	ldr	r3, [pc, #4]	; (132d0 <radio_ar_match_get+0x8>)
   132ca:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   132ce:	4770      	bx	lr
   132d0:	4000f000 	.word	0x4000f000

000132d4 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   132d4:	4a04      	ldr	r2, [pc, #16]	; (132e8 <radio_ar_status_reset+0x14>)
   132d6:	2300      	movs	r3, #0
   132d8:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   132dc:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   132e0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   132e4:	4770      	bx	lr
   132e6:	bf00      	nop
   132e8:	40001000 	.word	0x40001000

000132ec <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   132ec:	4b08      	ldr	r3, [pc, #32]	; (13310 <radio_ar_has_match+0x24>)
   132ee:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   132f2:	b160      	cbz	r0, 1330e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   132f4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   132f8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   132fc:	b138      	cbz	r0, 1330e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   132fe:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   13302:	b120      	cbz	r0, 1330e <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   13304:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   13308:	fab0 f080 	clz	r0, r0
   1330c:	0940      	lsrs	r0, r0, #5
}
   1330e:	4770      	bx	lr
   13310:	40001000 	.word	0x40001000

00013314 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13314:	2901      	cmp	r1, #1
{
   13316:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13318:	d00f      	beq.n	1333a <mayfly_enable_cb+0x26>
   1331a:	4b0e      	ldr	r3, [pc, #56]	; (13354 <mayfly_enable_cb+0x40>)
   1331c:	9301      	str	r3, [sp, #4]
   1331e:	9300      	str	r3, [sp, #0]
   13320:	4b0d      	ldr	r3, [pc, #52]	; (13358 <mayfly_enable_cb+0x44>)
   13322:	4a0e      	ldr	r2, [pc, #56]	; (1335c <mayfly_enable_cb+0x48>)
   13324:	681c      	ldr	r4, [r3, #0]
   13326:	490e      	ldr	r1, [pc, #56]	; (13360 <mayfly_enable_cb+0x4c>)
   13328:	4b0e      	ldr	r3, [pc, #56]	; (13364 <mayfly_enable_cb+0x50>)
   1332a:	480f      	ldr	r0, [pc, #60]	; (13368 <mayfly_enable_cb+0x54>)
   1332c:	47a0      	blx	r4
   1332e:	4040      	eors	r0, r0
   13330:	f380 8811 	msr	BASEPRI, r0
   13334:	f04f 0004 	mov.w	r0, #4
   13338:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   1333a:	2018      	movs	r0, #24
	if (enable) {
   1333c:	b122      	cbz	r2, 13348 <mayfly_enable_cb+0x34>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   1333e:	b002      	add	sp, #8
   13340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(SWI4_IRQn);
   13344:	f7ee ba8a 	b.w	185c <_arch_irq_enable>
}
   13348:	b002      	add	sp, #8
   1334a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(SWI4_IRQn);
   1334e:	f7ee ba95 	b.w	187c <_arch_irq_disable>
   13352:	bf00      	nop
   13354:	00015359 	.word	0x00015359
   13358:	20003a5c 	.word	0x20003a5c
   1335c:	00016754 	.word	0x00016754
   13360:	0001679c 	.word	0x0001679c
   13364:	0001927c 	.word	0x0001927c
   13368:	000192ab 	.word	0x000192ab

0001336c <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   1336c:	b513      	push	{r0, r1, r4, lr}
	(void)caller_id;

	switch (callee_id) {
   1336e:	b189      	cbz	r1, 13394 <mayfly_is_enabled+0x28>
   13370:	2901      	cmp	r1, #1
   13372:	d015      	beq.n	133a0 <mayfly_is_enabled+0x34>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   13374:	4b0b      	ldr	r3, [pc, #44]	; (133a4 <mayfly_is_enabled+0x38>)
   13376:	9301      	str	r3, [sp, #4]
   13378:	9300      	str	r3, [sp, #0]
   1337a:	4b0b      	ldr	r3, [pc, #44]	; (133a8 <mayfly_is_enabled+0x3c>)
   1337c:	4a0b      	ldr	r2, [pc, #44]	; (133ac <mayfly_is_enabled+0x40>)
   1337e:	681c      	ldr	r4, [r3, #0]
   13380:	490b      	ldr	r1, [pc, #44]	; (133b0 <mayfly_is_enabled+0x44>)
   13382:	4b0c      	ldr	r3, [pc, #48]	; (133b4 <mayfly_is_enabled+0x48>)
   13384:	480c      	ldr	r0, [pc, #48]	; (133b8 <mayfly_is_enabled+0x4c>)
   13386:	47a0      	blx	r4
   13388:	4040      	eors	r0, r0
   1338a:	f380 8811 	msr	BASEPRI, r0
   1338e:	f04f 0004 	mov.w	r0, #4
   13392:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   13394:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   13396:	b002      	add	sp, #8
   13398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return irq_is_enabled(SWI4_IRQn);
   1339c:	f7ee ba82 	b.w	18a4 <_arch_irq_is_enabled>
   133a0:	2018      	movs	r0, #24
   133a2:	e7f8      	b.n	13396 <mayfly_is_enabled+0x2a>
   133a4:	00015359 	.word	0x00015359
   133a8:	20003a5c 	.word	0x20003a5c
   133ac:	00016754 	.word	0x00016754
   133b0:	0001679c 	.word	0x0001679c
   133b4:	0001928d 	.word	0x0001928d
   133b8:	000166c8 	.word	0x000166c8

000133bc <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   133bc:	4288      	cmp	r0, r1
   133be:	d00a      	beq.n	133d6 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   133c0:	b918      	cbnz	r0, 133ca <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   133c2:	1e4b      	subs	r3, r1, #1
   133c4:	4258      	negs	r0, r3
   133c6:	4158      	adcs	r0, r3
   133c8:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   133ca:	2801      	cmp	r0, #1
   133cc:	d105      	bne.n	133da <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   133ce:	fab1 f081 	clz	r0, r1
   133d2:	0940      	lsrs	r0, r0, #5
   133d4:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   133d6:	2001      	movs	r0, #1
   133d8:	4770      	bx	lr
   133da:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   133dc:	4770      	bx	lr
	...

000133e0 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   133e0:	b513      	push	{r0, r1, r4, lr}
   133e2:	4b0e      	ldr	r3, [pc, #56]	; (1341c <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   133e4:	b189      	cbz	r1, 1340a <mayfly_pend+0x2a>
   133e6:	2901      	cmp	r1, #1
   133e8:	d015      	beq.n	13416 <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   133ea:	4b0d      	ldr	r3, [pc, #52]	; (13420 <mayfly_pend+0x40>)
   133ec:	9301      	str	r3, [sp, #4]
   133ee:	9300      	str	r3, [sp, #0]
   133f0:	4b0c      	ldr	r3, [pc, #48]	; (13424 <mayfly_pend+0x44>)
   133f2:	4a0d      	ldr	r2, [pc, #52]	; (13428 <mayfly_pend+0x48>)
   133f4:	681c      	ldr	r4, [r3, #0]
   133f6:	490d      	ldr	r1, [pc, #52]	; (1342c <mayfly_pend+0x4c>)
   133f8:	4b0d      	ldr	r3, [pc, #52]	; (13430 <mayfly_pend+0x50>)
   133fa:	480e      	ldr	r0, [pc, #56]	; (13434 <mayfly_pend+0x54>)
   133fc:	47a0      	blx	r4
   133fe:	4040      	eors	r0, r0
   13400:	f380 8811 	msr	BASEPRI, r0
   13404:	f04f 0004 	mov.w	r0, #4
   13408:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1340a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1340e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   13412:	b002      	add	sp, #8
   13414:	bd10      	pop	{r4, pc}
   13416:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1341a:	e7f8      	b.n	1340e <mayfly_pend+0x2e>
   1341c:	e000e100 	.word	0xe000e100
   13420:	00015359 	.word	0x00015359
   13424:	20003a5c 	.word	0x20003a5c
   13428:	00016754 	.word	0x00016754
   1342c:	0001679c 	.word	0x0001679c
   13430:	0001929f 	.word	0x0001929f
   13434:	000166c8 	.word	0x000166c8

00013438 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13438:	2803      	cmp	r0, #3
{
   1343a:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1343c:	d90f      	bls.n	1345e <hal_ticker_instance0_caller_id_get+0x26>
   1343e:	4b0f      	ldr	r3, [pc, #60]	; (1347c <hal_ticker_instance0_caller_id_get+0x44>)
   13440:	9301      	str	r3, [sp, #4]
   13442:	9300      	str	r3, [sp, #0]
   13444:	4b0e      	ldr	r3, [pc, #56]	; (13480 <hal_ticker_instance0_caller_id_get+0x48>)
   13446:	4a0f      	ldr	r2, [pc, #60]	; (13484 <hal_ticker_instance0_caller_id_get+0x4c>)
   13448:	681c      	ldr	r4, [r3, #0]
   1344a:	490f      	ldr	r1, [pc, #60]	; (13488 <hal_ticker_instance0_caller_id_get+0x50>)
   1344c:	4b0f      	ldr	r3, [pc, #60]	; (1348c <hal_ticker_instance0_caller_id_get+0x54>)
   1344e:	4810      	ldr	r0, [pc, #64]	; (13490 <hal_ticker_instance0_caller_id_get+0x58>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   13450:	47a0      	blx	r4
   13452:	4040      	eors	r0, r0
   13454:	f380 8811 	msr	BASEPRI, r0
   13458:	f04f 0004 	mov.w	r0, #4
   1345c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1345e:	4b0d      	ldr	r3, [pc, #52]	; (13494 <hal_ticker_instance0_caller_id_get+0x5c>)
   13460:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   13462:	b948      	cbnz	r0, 13478 <hal_ticker_instance0_caller_id_get+0x40>
   13464:	4b05      	ldr	r3, [pc, #20]	; (1347c <hal_ticker_instance0_caller_id_get+0x44>)
   13466:	9301      	str	r3, [sp, #4]
   13468:	9300      	str	r3, [sp, #0]
   1346a:	4b05      	ldr	r3, [pc, #20]	; (13480 <hal_ticker_instance0_caller_id_get+0x48>)
   1346c:	4a05      	ldr	r2, [pc, #20]	; (13484 <hal_ticker_instance0_caller_id_get+0x4c>)
   1346e:	681c      	ldr	r4, [r3, #0]
   13470:	4905      	ldr	r1, [pc, #20]	; (13488 <hal_ticker_instance0_caller_id_get+0x50>)
   13472:	4b06      	ldr	r3, [pc, #24]	; (1348c <hal_ticker_instance0_caller_id_get+0x54>)
   13474:	4808      	ldr	r0, [pc, #32]	; (13498 <hal_ticker_instance0_caller_id_get+0x60>)
   13476:	e7eb      	b.n	13450 <hal_ticker_instance0_caller_id_get+0x18>

	return caller_id;
}
   13478:	b002      	add	sp, #8
   1347a:	bd10      	pop	{r4, pc}
   1347c:	00015359 	.word	0x00015359
   13480:	20003a5c 	.word	0x20003a5c
   13484:	00016754 	.word	0x00016754
   13488:	0001679c 	.word	0x0001679c
   1348c:	000192db 	.word	0x000192db
   13490:	0001931d 	.word	0x0001931d
   13494:	00019319 	.word	0x00019319
   13498:	0001935e 	.word	0x0001935e

0001349c <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   1349c:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1349e:	3802      	subs	r0, #2
{
   134a0:	461c      	mov	r4, r3
	switch (caller_id) {
   134a2:	2803      	cmp	r0, #3
   134a4:	d818      	bhi.n	134d8 <hal_ticker_instance0_sched+0x3c>
   134a6:	e8df f000 	tbb	[pc, r0]
   134aa:	0d02      	.short	0x0d02
   134ac:	3013      	.short	0x3013
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   134ae:	2903      	cmp	r1, #3
   134b0:	d112      	bne.n	134d8 <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   134b2:	4b19      	ldr	r3, [pc, #100]	; (13518 <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   134b4:	2100      	movs	r1, #0
			m.param = instance;
   134b6:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   134b8:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   134ba:	b002      	add	sp, #8
   134bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   134c0:	f7f4 b99a 	b.w	77f8 <mayfly_enqueue>
		switch (callee_id) {
   134c4:	2904      	cmp	r1, #4
   134c6:	d107      	bne.n	134d8 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   134c8:	4b14      	ldr	r3, [pc, #80]	; (1351c <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   134ca:	2101      	movs	r1, #1
			m.param = instance;
   134cc:	609c      	str	r4, [r3, #8]
   134ce:	e7f3      	b.n	134b8 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   134d0:	2903      	cmp	r1, #3
   134d2:	d011      	beq.n	134f8 <hal_ticker_instance0_sched+0x5c>
   134d4:	2904      	cmp	r1, #4
   134d6:	d014      	beq.n	13502 <hal_ticker_instance0_sched+0x66>
		LL_ASSERT(0);
   134d8:	4b11      	ldr	r3, [pc, #68]	; (13520 <hal_ticker_instance0_sched+0x84>)
   134da:	9301      	str	r3, [sp, #4]
   134dc:	9300      	str	r3, [sp, #0]
   134de:	4b11      	ldr	r3, [pc, #68]	; (13524 <hal_ticker_instance0_sched+0x88>)
   134e0:	4a11      	ldr	r2, [pc, #68]	; (13528 <hal_ticker_instance0_sched+0x8c>)
   134e2:	681c      	ldr	r4, [r3, #0]
   134e4:	4911      	ldr	r1, [pc, #68]	; (1352c <hal_ticker_instance0_sched+0x90>)
   134e6:	4b12      	ldr	r3, [pc, #72]	; (13530 <hal_ticker_instance0_sched+0x94>)
   134e8:	4812      	ldr	r0, [pc, #72]	; (13534 <hal_ticker_instance0_sched+0x98>)
   134ea:	47a0      	blx	r4
   134ec:	4040      	eors	r0, r0
   134ee:	f380 8811 	msr	BASEPRI, r0
   134f2:	f04f 0004 	mov.w	r0, #4
   134f6:	df02      	svc	2
			m.param = instance;
   134f8:	4b0f      	ldr	r3, [pc, #60]	; (13538 <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   134fa:	2100      	movs	r1, #0
			m.param = instance;
   134fc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   134fe:	2001      	movs	r0, #1
   13500:	e7db      	b.n	134ba <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   13502:	4b0e      	ldr	r3, [pc, #56]	; (1353c <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13504:	2101      	movs	r1, #1
			m.param = instance;
   13506:	609c      	str	r4, [r3, #8]
   13508:	e7f9      	b.n	134fe <hal_ticker_instance0_sched+0x62>
		switch (callee_id) {
   1350a:	2904      	cmp	r1, #4
   1350c:	d1e4      	bne.n	134d8 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   1350e:	4b0c      	ldr	r3, [pc, #48]	; (13540 <hal_ticker_instance0_sched+0xa4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13510:	2101      	movs	r1, #1
			m.param = instance;
   13512:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13514:	2003      	movs	r0, #3
   13516:	e7d0      	b.n	134ba <hal_ticker_instance0_sched+0x1e>
   13518:	20003e18 	.word	0x20003e18
   1351c:	20003e28 	.word	0x20003e28
   13520:	00015359 	.word	0x00015359
   13524:	20003a5c 	.word	0x20003a5c
   13528:	00016754 	.word	0x00016754
   1352c:	0001679c 	.word	0x0001679c
   13530:	000192fe 	.word	0x000192fe
   13534:	000166c8 	.word	0x000166c8
   13538:	20003e38 	.word	0x20003e38
   1353c:	20003e48 	.word	0x20003e48
   13540:	20003e58 	.word	0x20003e58

00013544 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   13544:	4601      	mov	r1, r0
   13546:	2000      	movs	r0, #0
   13548:	f7ff ba54 	b.w	129f4 <cntr_cmp_set>

0001354c <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   1354c:	4770      	bx	lr
	...

00013550 <net_buf_pool_get>:
}
   13550:	4b01      	ldr	r3, [pc, #4]	; (13558 <net_buf_pool_get+0x8>)
   13552:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   13556:	4770      	bx	lr
   13558:	20003f2c 	.word	0x20003f2c

0001355c <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1355c:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   1355e:	4b04      	ldr	r3, [pc, #16]	; (13570 <net_buf_id+0x14>)
   13560:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   13564:	69db      	ldr	r3, [r3, #28]
   13566:	1ac0      	subs	r0, r0, r3
}
   13568:	4b02      	ldr	r3, [pc, #8]	; (13574 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   1356a:	10c0      	asrs	r0, r0, #3
}
   1356c:	4358      	muls	r0, r3
   1356e:	4770      	bx	lr
   13570:	20003f2c 	.word	0x20003f2c
   13574:	aaaaaaab 	.word	0xaaaaaaab

00013578 <fixed_data_alloc>:
{
   13578:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1357a:	4b09      	ldr	r3, [pc, #36]	; (135a0 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1357c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1357e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   13582:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13584:	699b      	ldr	r3, [r3, #24]
   13586:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   13588:	6823      	ldr	r3, [r4, #0]
   1358a:	429a      	cmp	r2, r3
   1358c:	bf94      	ite	ls
   1358e:	600a      	strls	r2, [r1, #0]
   13590:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   13592:	f7ff ffe3 	bl	1355c <net_buf_id>
   13596:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   1359a:	fb02 3000 	mla	r0, r2, r0, r3
   1359e:	bd10      	pop	{r4, pc}
   135a0:	20003f2c 	.word	0x20003f2c

000135a4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   135a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   135a8:	4605      	mov	r5, r0
   135aa:	9101      	str	r1, [sp, #4]
   135ac:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   135ae:	f001 f961 	bl	14874 <_impl_k_uptime_get_32>
   135b2:	4607      	mov	r7, r0
	__asm__ volatile(
   135b4:	f04f 0320 	mov.w	r3, #32
   135b8:	f3ef 8811 	mrs	r8, BASEPRI
   135bc:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   135c0:	8a6b      	ldrh	r3, [r5, #18]
   135c2:	2b00      	cmp	r3, #0
   135c4:	d03d      	beq.n	13642 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   135c6:	8a2a      	ldrh	r2, [r5, #16]
   135c8:	429a      	cmp	r2, r3
   135ca:	d92a      	bls.n	13622 <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   135cc:	2100      	movs	r1, #0
   135ce:	4628      	mov	r0, r5
   135d0:	f000 fe6a 	bl	142a8 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   135d4:	b328      	cbz	r0, 13622 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   135d6:	f388 8811 	msr	BASEPRI, r8
   135da:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   135dc:	9b01      	ldr	r3, [sp, #4]
   135de:	2b00      	cmp	r3, #0
   135e0:	d03c      	beq.n	1365c <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   135e2:	1c73      	adds	r3, r6, #1
   135e4:	2b01      	cmp	r3, #1
   135e6:	d906      	bls.n	135f6 <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   135e8:	f001 f944 	bl	14874 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   135ec:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   135ee:	42b0      	cmp	r0, r6
   135f0:	bf94      	ite	ls
   135f2:	1a36      	subls	r6, r6, r0
   135f4:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   135f6:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   135f8:	4f1e      	ldr	r7, [pc, #120]	; (13674 <net_buf_alloc_len+0xd0>)
   135fa:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   135fe:	4632      	mov	r2, r6
   13600:	699b      	ldr	r3, [r3, #24]
   13602:	681b      	ldr	r3, [r3, #0]
   13604:	a901      	add	r1, sp, #4
   13606:	681b      	ldr	r3, [r3, #0]
   13608:	4620      	mov	r0, r4
   1360a:	4798      	blx	r3
   1360c:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1360e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   13610:	bb28      	cbnz	r0, 1365e <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   13612:	79a0      	ldrb	r0, [r4, #6]
   13614:	4621      	mov	r1, r4
   13616:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1361a:	f000 fe26 	bl	1426a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1361e:	462c      	mov	r4, r5
   13620:	e018      	b.n	13654 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   13622:	8a68      	ldrh	r0, [r5, #18]
   13624:	1e43      	subs	r3, r0, #1
   13626:	826b      	strh	r3, [r5, #18]
   13628:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1362c:	8a2c      	ldrh	r4, [r5, #16]
   1362e:	1a24      	subs	r4, r4, r0
   13630:	69e8      	ldr	r0, [r5, #28]
   13632:	2318      	movs	r3, #24
   13634:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   13638:	4b0e      	ldr	r3, [pc, #56]	; (13674 <net_buf_alloc_len+0xd0>)
   1363a:	1aed      	subs	r5, r5, r3
   1363c:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   1363e:	71a5      	strb	r5, [r4, #6]
		goto success;
   13640:	e7cc      	b.n	135dc <net_buf_alloc_len+0x38>
   13642:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   13646:	4631      	mov	r1, r6
   13648:	4628      	mov	r0, r5
   1364a:	f000 fe2d 	bl	142a8 <_impl_k_queue_get>
		return NULL;
   1364e:	4604      	mov	r4, r0
	if (!buf) {
   13650:	2800      	cmp	r0, #0
   13652:	d1c3      	bne.n	135dc <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   13654:	4620      	mov	r0, r4
   13656:	b002      	add	sp, #8
   13658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   1365c:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   1365e:	2301      	movs	r3, #1
   13660:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   13662:	2300      	movs	r3, #0
	buf->frags = NULL;
   13664:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   13666:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   13668:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   1366a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1366c:	6923      	ldr	r3, [r4, #16]
   1366e:	81e2      	strh	r2, [r4, #14]
   13670:	60a3      	str	r3, [r4, #8]
	return buf;
   13672:	e7ef      	b.n	13654 <net_buf_alloc_len+0xb0>
   13674:	20003f2c 	.word	0x20003f2c

00013678 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13678:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1367a:	685b      	ldr	r3, [r3, #4]
   1367c:	460a      	mov	r2, r1
   1367e:	6819      	ldr	r1, [r3, #0]
   13680:	f7ff bf90 	b.w	135a4 <net_buf_alloc_len>

00013684 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   13684:	b570      	push	{r4, r5, r6, lr}
   13686:	4606      	mov	r6, r0
   13688:	f000 fe0e 	bl	142a8 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1368c:	4605      	mov	r5, r0
   1368e:	b128      	cbz	r0, 1369c <net_buf_get+0x18>
   13690:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13692:	7963      	ldrb	r3, [r4, #5]
   13694:	f013 0301 	ands.w	r3, r3, #1
   13698:	d102      	bne.n	136a0 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1369a:	6023      	str	r3, [r4, #0]

	return buf;
}
   1369c:	4628      	mov	r0, r5
   1369e:	bd70      	pop	{r4, r5, r6, pc}
   136a0:	2100      	movs	r1, #0
   136a2:	4630      	mov	r0, r6
   136a4:	f000 fe00 	bl	142a8 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   136a8:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   136aa:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   136ac:	f023 0301 	bic.w	r3, r3, #1
   136b0:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   136b2:	4604      	mov	r4, r0
   136b4:	e7ed      	b.n	13692 <net_buf_get+0xe>

000136b6 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   136b6:	6883      	ldr	r3, [r0, #8]
   136b8:	4419      	add	r1, r3
   136ba:	6001      	str	r1, [r0, #0]
   136bc:	4770      	bx	lr

000136be <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   136be:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   136c0:	460a      	mov	r2, r1
   136c2:	6814      	ldr	r4, [r2, #0]
   136c4:	b914      	cbnz	r4, 136cc <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   136c6:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   136c8:	f000 bdd4 	b.w	14274 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   136cc:	7953      	ldrb	r3, [r2, #5]
   136ce:	f043 0301 	orr.w	r3, r3, #1
   136d2:	7153      	strb	r3, [r2, #5]
   136d4:	4622      	mov	r2, r4
   136d6:	e7f4      	b.n	136c2 <net_buf_put+0x4>

000136d8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   136d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   136da:	4d15      	ldr	r5, [pc, #84]	; (13730 <net_buf_unref+0x58>)
   136dc:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   136de:	2600      	movs	r6, #0
	while (buf) {
   136e0:	b904      	cbnz	r4, 136e4 <net_buf_unref+0xc>
   136e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   136e4:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   136e6:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   136e8:	3b01      	subs	r3, #1
   136ea:	b2db      	uxtb	r3, r3
   136ec:	7123      	strb	r3, [r4, #4]
   136ee:	2b00      	cmp	r3, #0
   136f0:	d1f7      	bne.n	136e2 <net_buf_unref+0xa>
		if (buf->__buf) {
   136f2:	6921      	ldr	r1, [r4, #16]
   136f4:	b159      	cbz	r1, 1370e <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   136f6:	7963      	ldrb	r3, [r4, #5]
   136f8:	079b      	lsls	r3, r3, #30
   136fa:	d407      	bmi.n	1370c <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   136fc:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   136fe:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   13702:	4620      	mov	r0, r4
   13704:	699b      	ldr	r3, [r3, #24]
   13706:	681b      	ldr	r3, [r3, #0]
   13708:	689b      	ldr	r3, [r3, #8]
   1370a:	4798      	blx	r3
			buf->__buf = NULL;
   1370c:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1370e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   13710:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   13712:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   13716:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   13718:	695b      	ldr	r3, [r3, #20]
   1371a:	b11b      	cbz	r3, 13724 <net_buf_unref+0x4c>
			pool->destroy(buf);
   1371c:	4620      	mov	r0, r4
   1371e:	4798      	blx	r3
{
   13720:	463c      	mov	r4, r7
   13722:	e7dd      	b.n	136e0 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   13724:	4621      	mov	r1, r4
   13726:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   1372a:	f000 fd9e 	bl	1426a <k_queue_prepend>
   1372e:	e7f7      	b.n	13720 <net_buf_unref+0x48>
   13730:	20003f2c 	.word	0x20003f2c

00013734 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   13734:	7903      	ldrb	r3, [r0, #4]
   13736:	3301      	adds	r3, #1
   13738:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1373a:	4770      	bx	lr

0001373c <net_buf_simple_add>:
	return buf->data + buf->len;
   1373c:	8883      	ldrh	r3, [r0, #4]
   1373e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   13740:	4419      	add	r1, r3
   13742:	8081      	strh	r1, [r0, #4]
	return tail;
}
   13744:	18d0      	adds	r0, r2, r3
   13746:	4770      	bx	lr

00013748 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   13748:	b430      	push	{r4, r5}
   1374a:	8883      	ldrh	r3, [r0, #4]
   1374c:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   1374e:	189d      	adds	r5, r3, r2
   13750:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   13752:	18e0      	adds	r0, r4, r3
}
   13754:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   13756:	f7ee ba77 	b.w	1c48 <memcpy>

0001375a <net_buf_simple_add_u8>:
   1375a:	8883      	ldrh	r3, [r0, #4]
   1375c:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1375e:	b510      	push	{r4, lr}
	buf->len += len;
   13760:	1c5c      	adds	r4, r3, #1
   13762:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   13764:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   13766:	18d0      	adds	r0, r2, r3
   13768:	bd10      	pop	{r4, pc}

0001376a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1376a:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   1376c:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   1376e:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   13770:	4411      	add	r1, r2
	buf->data -= len;
   13772:	6003      	str	r3, [r0, #0]
	buf->len += len;
   13774:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   13776:	4618      	mov	r0, r3
   13778:	4770      	bx	lr

0001377a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1377a:	8883      	ldrh	r3, [r0, #4]
   1377c:	1a5b      	subs	r3, r3, r1
   1377e:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   13780:	6803      	ldr	r3, [r0, #0]
   13782:	4419      	add	r1, r3
   13784:	6001      	str	r1, [r0, #0]
}
   13786:	4608      	mov	r0, r1
   13788:	4770      	bx	lr

0001378a <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1378a:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   1378c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1378e:	2101      	movs	r1, #1
	val = buf->data[0];
   13790:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   13792:	f7ff fff2 	bl	1377a <net_buf_simple_pull>

	return val;
}
   13796:	4610      	mov	r0, r2
   13798:	bd08      	pop	{r3, pc}

0001379a <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1379a:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1379c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1379e:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   137a0:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   137a2:	f7ff ffea 	bl	1377a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   137a6:	4610      	mov	r0, r2
   137a8:	bd08      	pop	{r3, pc}

000137aa <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   137aa:	6802      	ldr	r2, [r0, #0]
   137ac:	6880      	ldr	r0, [r0, #8]
}
   137ae:	1a10      	subs	r0, r2, r0
   137b0:	4770      	bx	lr

000137b2 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   137b2:	6802      	ldr	r2, [r0, #0]
   137b4:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   137b6:	88c3      	ldrh	r3, [r0, #6]
   137b8:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   137ba:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   137bc:	1a9b      	subs	r3, r3, r2
}
   137be:	1a18      	subs	r0, r3, r0
   137c0:	4770      	bx	lr

000137c2 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   137c2:	6800      	ldr	r0, [r0, #0]
   137c4:	6880      	ldr	r0, [r0, #8]
   137c6:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   137c8:	b941      	cbnz	r1, 137dc <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   137ca:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   137ce:	fa21 f202 	lsr.w	r2, r1, r2
   137d2:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   137d6:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   137d8:	2000      	movs	r0, #0
   137da:	4770      	bx	lr
		*value = gpio->IN;
   137dc:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   137e0:	e7f9      	b.n	137d6 <gpio_nrf5_read+0x14>

000137e2 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   137e2:	6800      	ldr	r0, [r0, #0]
   137e4:	6880      	ldr	r0, [r0, #8]
   137e6:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   137e8:	b949      	cbnz	r1, 137fe <gpio_nrf5_write+0x1c>
   137ea:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   137ec:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   137ee:	b11b      	cbz	r3, 137f8 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   137f0:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   137f4:	2000      	movs	r0, #0
   137f6:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   137f8:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   137fc:	e7fa      	b.n	137f4 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   137fe:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   13802:	e7f7      	b.n	137f4 <gpio_nrf5_write+0x12>

00013804 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   13804:	6883      	ldr	r3, [r0, #8]
   13806:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   13808:	b172      	cbz	r2, 13828 <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   1380a:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   1380c:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1380e:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   13810:	b902      	cbnz	r2, 13814 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   13812:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   13814:	2000      	movs	r0, #0
   13816:	4770      	bx	lr
	parent->next = child;
   13818:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   1381a:	6858      	ldr	r0, [r3, #4]
   1381c:	4281      	cmp	r1, r0
	list->tail = node;
   1381e:	bf08      	it	eq
   13820:	605a      	streq	r2, [r3, #4]
   13822:	e00d      	b.n	13840 <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   13824:	4602      	mov	r2, r0
   13826:	6800      	ldr	r0, [r0, #0]
   13828:	2800      	cmp	r0, #0
   1382a:	d0f3      	beq.n	13814 <gpio_nrf5_manage_callback+0x10>
   1382c:	4281      	cmp	r1, r0
   1382e:	d1f9      	bne.n	13824 <gpio_nrf5_manage_callback+0x20>
   13830:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   13832:	2a00      	cmp	r2, #0
   13834:	d1f0      	bne.n	13818 <gpio_nrf5_manage_callback+0x14>
   13836:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   13838:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   1383a:	4291      	cmp	r1, r2
   1383c:	d100      	bne.n	13840 <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   1383e:	6058      	str	r0, [r3, #4]
	parent->next = child;
   13840:	2300      	movs	r3, #0
   13842:	600b      	str	r3, [r1, #0]
   13844:	e7e6      	b.n	13814 <gpio_nrf5_manage_callback+0x10>
	...

00013848 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   13848:	4b0c      	ldr	r3, [pc, #48]	; (1387c <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   1384a:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   1384c:	4d0c      	ldr	r5, [pc, #48]	; (13880 <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   1384e:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13850:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   13852:	fa24 f203 	lsr.w	r2, r4, r3
   13856:	07d2      	lsls	r2, r2, #31
   13858:	d508      	bpl.n	1386c <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   1385a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1385e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   13862:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   13866:	4282      	cmp	r2, r0
   13868:	d100      	bne.n	1386c <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   1386a:	b121      	cbz	r1, 13876 <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   1386c:	3301      	adds	r3, #1
   1386e:	2b08      	cmp	r3, #8
   13870:	d1ef      	bne.n	13852 <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   13872:	f06f 0312 	mvn.w	r3, #18
}
   13876:	4618      	mov	r0, r3
   13878:	bd30      	pop	{r4, r5, pc}
   1387a:	bf00      	nop
   1387c:	200016f4 	.word	0x200016f4
   13880:	40006000 	.word	0x40006000

00013884 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   13884:	b570      	push	{r4, r5, r6, lr}
   13886:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   13888:	460d      	mov	r5, r1
   1388a:	b9c9      	cbnz	r1, 138c0 <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   1388c:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   1388e:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   13890:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   13892:	4610      	mov	r0, r2
   13894:	7919      	ldrb	r1, [r3, #4]
   13896:	f7ff ffd7 	bl	13848 <gpiote_find_channel.isra.4>
		if (i < 0) {
   1389a:	2800      	cmp	r0, #0
   1389c:	db12      	blt.n	138c4 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   1389e:	68b2      	ldr	r2, [r6, #8]
   138a0:	2301      	movs	r3, #1
   138a2:	fa03 f404 	lsl.w	r4, r3, r4
   138a6:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   138a8:	f100 0140 	add.w	r1, r0, #64	; 0x40
   138ac:	4a06      	ldr	r2, [pc, #24]	; (138c8 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   138ae:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   138b0:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   138b4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   138b8:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   138bc:	4628      	mov	r0, r5
   138be:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   138c0:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   138c4:	bd70      	pop	{r4, r5, r6, pc}
   138c6:	bf00      	nop
   138c8:	40006000 	.word	0x40006000

000138cc <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   138cc:	b570      	push	{r4, r5, r6, lr}
   138ce:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   138d0:	460d      	mov	r5, r1
   138d2:	b9b1      	cbnz	r1, 13902 <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   138d4:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   138d6:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   138d8:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   138da:	4610      	mov	r0, r2
   138dc:	7919      	ldrb	r1, [r3, #4]
   138de:	f7ff ffb3 	bl	13848 <gpiote_find_channel.isra.4>
		if (i < 0) {
   138e2:	2800      	cmp	r0, #0
   138e4:	db0f      	blt.n	13906 <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   138e6:	68b2      	ldr	r2, [r6, #8]
   138e8:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   138ea:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   138ee:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   138f2:	4b05      	ldr	r3, [pc, #20]	; (13908 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   138f4:	ea22 0404 	bic.w	r4, r2, r4
   138f8:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   138fa:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   138fe:	4628      	mov	r0, r5
   13900:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   13902:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   13906:	bd70      	pop	{r4, r5, r6, pc}
   13908:	40006000 	.word	0x40006000

0001390c <gpio_nrf5_config>:
{
   1390c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13910:	6806      	ldr	r6, [r0, #0]
{
   13912:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13914:	68b2      	ldr	r2, [r6, #8]
   13916:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   13918:	b119      	cbz	r1, 13922 <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   1391a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1391e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   13922:	f403 7240 	and.w	r2, r3, #768	; 0x300
   13926:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   1392a:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   1392e:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   13932:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   13936:	d058      	beq.n	139ea <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   13938:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1393c:	bf0c      	ite	eq
   1393e:	2204      	moveq	r2, #4
   13940:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   13942:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   13946:	bf08      	it	eq
   13948:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   1394a:	f013 0f01 	tst.w	r3, #1
   1394e:	ea4f 0180 	mov.w	r1, r0, lsl #2
   13952:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 13a20 <gpio_nrf5_config+0x114>
   13956:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   1395a:	d04f      	beq.n	139fc <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   1395c:	2a0c      	cmp	r2, #12
   1395e:	d146      	bne.n	139ee <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   13960:	2701      	movs	r7, #1
   13962:	40a7      	lsls	r7, r4
   13964:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   13968:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   1396a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   1396e:	f041 0103 	orr.w	r1, r1, #3
   13972:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   13974:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   13978:	f013 0002 	ands.w	r0, r3, #2
   1397c:	d049      	beq.n	13a12 <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   1397e:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   13980:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   13982:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   13986:	d5c8      	bpl.n	1391a <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   13988:	065a      	lsls	r2, r3, #25
   1398a:	d43d      	bmi.n	13a08 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   1398c:	f013 0f04 	tst.w	r3, #4
   13990:	bf14      	ite	ne
   13992:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   13996:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   1399a:	4e1f      	ldr	r6, [pc, #124]	; (13a18 <gpio_nrf5_config+0x10c>)
   1399c:	6837      	ldr	r7, [r6, #0]
   1399e:	4638      	mov	r0, r7
   139a0:	f7ec fc50 	bl	244 <__popcountsi2>
   139a4:	2808      	cmp	r0, #8
   139a6:	d032      	beq.n	13a0e <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   139a8:	4641      	mov	r1, r8
   139aa:	4620      	mov	r0, r4
   139ac:	f7ff ff4c 	bl	13848 <gpiote_find_channel.isra.4>
		if (i < 0) {
   139b0:	2800      	cmp	r0, #0
   139b2:	da08      	bge.n	139c6 <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   139b4:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   139b6:	fa93 f0a3 	rbit	r0, r3
   139ba:	2b00      	cmp	r3, #0
   139bc:	fab0 f080 	clz	r0, r0
   139c0:	bf08      	it	eq
   139c2:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   139c6:	2301      	movs	r3, #1
   139c8:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   139ca:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   139cc:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   139ce:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   139d2:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   139d4:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   139d8:	4b10      	ldr	r3, [pc, #64]	; (13a1c <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   139da:	f044 0401 	orr.w	r4, r4, #1
   139de:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   139e0:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   139e4:	2000      	movs	r0, #0
   139e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   139ea:	220c      	movs	r2, #12
   139ec:	e7a9      	b.n	13942 <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   139ee:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   139f0:	bf02      	ittt	eq
   139f2:	2701      	moveq	r7, #1
   139f4:	40a7      	lsleq	r7, r4
   139f6:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   139fa:	e7b5      	b.n	13968 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   139fc:	4461      	add	r1, ip
   139fe:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   13a02:	430a      	orrs	r2, r1
   13a04:	433a      	orrs	r2, r7
   13a06:	e7b5      	b.n	13974 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   13a08:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   13a0c:	e7c5      	b.n	1399a <gpio_nrf5_config+0x8e>
			return -EIO;
   13a0e:	f06f 0004 	mvn.w	r0, #4
}
   13a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a16:	bf00      	nop
   13a18:	200016f4 	.word	0x200016f4
   13a1c:	40006000 	.word	0x40006000
   13a20:	0001939c 	.word	0x0001939c

00013a24 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   13a24:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   13a26:	2200      	movs	r2, #0
   13a28:	2105      	movs	r1, #5
   13a2a:	2006      	movs	r0, #6
   13a2c:	f7ed ff48 	bl	18c0 <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   13a30:	2006      	movs	r0, #6
   13a32:	f7ed ff13 	bl	185c <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   13a36:	2000      	movs	r0, #0
   13a38:	bd08      	pop	{r3, pc}
	...

00013a3c <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13a3c:	2100      	movs	r1, #0
{
   13a3e:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   13a40:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   13a42:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   13a44:	2501      	movs	r5, #1
   13a46:	008b      	lsls	r3, r1, #2
   13a48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13a4c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   13a50:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   13a54:	b140      	cbz	r0, 13a68 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   13a56:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   13a5a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   13a5e:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   13a62:	fa05 f303 	lsl.w	r3, r5, r3
   13a66:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13a68:	3101      	adds	r1, #1
   13a6a:	2908      	cmp	r1, #8
   13a6c:	d1eb      	bne.n	13a46 <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   13a6e:	4e08      	ldr	r6, [pc, #32]	; (13a90 <gpio_nrf5_port_isr+0x54>)
   13a70:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   13a72:	689d      	ldr	r5, [r3, #8]
   13a74:	681c      	ldr	r4, [r3, #0]
   13a76:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   13a78:	b14c      	cbz	r4, 13a8e <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   13a7a:	68a3      	ldr	r3, [r4, #8]
   13a7c:	421d      	tst	r5, r3
   13a7e:	d004      	beq.n	13a8a <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   13a80:	6863      	ldr	r3, [r4, #4]
   13a82:	462a      	mov	r2, r5
   13a84:	4621      	mov	r1, r4
   13a86:	4630      	mov	r0, r6
   13a88:	4798      	blx	r3
	return node->next;
   13a8a:	6824      	ldr	r4, [r4, #0]
   13a8c:	e7f4      	b.n	13a78 <gpio_nrf5_port_isr+0x3c>
   13a8e:	bd70      	pop	{r4, r5, r6, pc}
   13a90:	20003ed4 	.word	0x20003ed4

00013a94 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13a94:	4b03      	ldr	r3, [pc, #12]	; (13aa4 <uart_nrfx_err_check+0x10>)
   13a96:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   13a98:	b118      	cbz	r0, 13aa2 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   13a9a:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   13a9e:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   13aa2:	4770      	bx	lr
   13aa4:	40002124 	.word	0x40002124

00013aa8 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13aa8:	4b07      	ldr	r3, [pc, #28]	; (13ac8 <uart_nrfx_poll_out+0x20>)
   13aaa:	2200      	movs	r2, #0
   13aac:	601a      	str	r2, [r3, #0]
{
   13aae:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13ab0:	681a      	ldr	r2, [r3, #0]
   13ab2:	9201      	str	r2, [sp, #4]
    (void)dummy;
   13ab4:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   13ab6:	4a05      	ldr	r2, [pc, #20]	; (13acc <uart_nrfx_poll_out+0x24>)
   13ab8:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13abc:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   13abe:	2a00      	cmp	r2, #0
   13ac0:	d0fc      	beq.n	13abc <uart_nrfx_poll_out+0x14>
}
   13ac2:	4608      	mov	r0, r1
   13ac4:	b002      	add	sp, #8
   13ac6:	4770      	bx	lr
   13ac8:	4000211c 	.word	0x4000211c
   13acc:	40002000 	.word	0x40002000

00013ad0 <uart_nrfx_poll_in>:
   13ad0:	4b08      	ldr	r3, [pc, #32]	; (13af4 <uart_nrfx_poll_in+0x24>)
   13ad2:	681a      	ldr	r2, [r3, #0]
{
   13ad4:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   13ad6:	b152      	cbz	r2, 13aee <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13ad8:	2000      	movs	r0, #0
   13ada:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13adc:	681b      	ldr	r3, [r3, #0]
   13ade:	9301      	str	r3, [sp, #4]
    (void)dummy;
   13ae0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   13ae2:	4b05      	ldr	r3, [pc, #20]	; (13af8 <uart_nrfx_poll_in+0x28>)
   13ae4:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   13ae8:	700b      	strb	r3, [r1, #0]
}
   13aea:	b002      	add	sp, #8
   13aec:	4770      	bx	lr
		return -1;
   13aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13af2:	e7fa      	b.n	13aea <uart_nrfx_poll_in+0x1a>
   13af4:	40002108 	.word	0x40002108
   13af8:	40002000 	.word	0x40002000

00013afc <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   13afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   13afe:	4819      	ldr	r0, [pc, #100]	; (13b64 <uart_nrfx_init+0x68>)
   13b00:	f000 f98c 	bl	13e1c <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   13b04:	6843      	ldr	r3, [r0, #4]
   13b06:	4604      	mov	r4, r0
   13b08:	681d      	ldr	r5, [r3, #0]
   13b0a:	2206      	movs	r2, #6
   13b0c:	f240 1301 	movw	r3, #257	; 0x101
   13b10:	2100      	movs	r1, #0
   13b12:	47a8      	blx	r5
   13b14:	6863      	ldr	r3, [r4, #4]
   13b16:	681d      	ldr	r5, [r3, #0]
   13b18:	2300      	movs	r3, #0
   13b1a:	4619      	mov	r1, r3
   13b1c:	2208      	movs	r2, #8
   13b1e:	4620      	mov	r0, r4
   13b20:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   13b22:	4b11      	ldr	r3, [pc, #68]	; (13b68 <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13b24:	4911      	ldr	r1, [pc, #68]	; (13b6c <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   13b26:	2208      	movs	r2, #8
   13b28:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   13b2c:	2206      	movs	r2, #6
   13b2e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   13b32:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   13b34:	4a0e      	ldr	r2, [pc, #56]	; (13b70 <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   13b36:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   13b3a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   13b3e:	2204      	movs	r2, #4
   13b40:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13b44:	4a0b      	ldr	r2, [pc, #44]	; (13b74 <uart_nrfx_init+0x78>)
   13b46:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13b48:	6812      	ldr	r2, [r2, #0]
   13b4a:	9201      	str	r2, [sp, #4]
    (void)dummy;
   13b4c:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13b4e:	4a0a      	ldr	r2, [pc, #40]	; (13b78 <uart_nrfx_init+0x7c>)
   13b50:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13b52:	6812      	ldr	r2, [r2, #0]
   13b54:	9200      	str	r2, [sp, #0]
    (void)dummy;
   13b56:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13b58:	2201      	movs	r2, #1
   13b5a:	600a      	str	r2, [r1, #0]
   13b5c:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   13b5e:	b003      	add	sp, #12
   13b60:	bd30      	pop	{r4, r5, pc}
   13b62:	bf00      	nop
   13b64:	00019400 	.word	0x00019400
   13b68:	40002000 	.word	0x40002000
   13b6c:	40002008 	.word	0x40002008
   13b70:	01d7e000 	.word	0x01d7e000
   13b74:	4000211c 	.word	0x4000211c
   13b78:	40002108 	.word	0x40002108

00013b7c <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   13b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   13b80:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   13b82:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   13b84:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   13b86:	42a3      	cmp	r3, r4
	d = &rand[octets];
   13b88:	440a      	add	r2, r1
	s = &rng->rand[first];
   13b8a:	4406      	add	r6, r0
	if (first <= last) {
   13b8c:	d81f      	bhi.n	13bce <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   13b8e:	1ae4      	subs	r4, r4, r3
   13b90:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   13b92:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   13b94:	bf3e      	ittt	cc
   13b96:	1a64      	subcc	r4, r4, r1
   13b98:	b2e7      	uxtbcc	r7, r4
   13b9a:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   13b9c:	4423      	add	r3, r4
		octets -= avail;
   13b9e:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   13ba2:	bf28      	it	cs
   13ba4:	2700      	movcs	r7, #0
		first += avail;
   13ba6:	b2db      	uxtb	r3, r3
		octets -= avail;
   13ba8:	b2c9      	uxtb	r1, r1
   13baa:	4434      	add	r4, r6

		while (avail--) {
   13bac:	42a6      	cmp	r6, r4
   13bae:	d109      	bne.n	13bc4 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   13bb0:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   13bb2:	7843      	ldrb	r3, [r0, #1]
   13bb4:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   13bb6:	bf82      	ittt	hi
   13bb8:	4b20      	ldrhi	r3, [pc, #128]	; (13c3c <get+0xc0>)
   13bba:	2201      	movhi	r2, #1
   13bbc:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   13bbe:	4608      	mov	r0, r1
   13bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   13bc4:	f816 5b01 	ldrb.w	r5, [r6], #1
   13bc8:	f802 5d01 	strb.w	r5, [r2, #-1]!
   13bcc:	e7ee      	b.n	13bac <get+0x30>
		avail = rng->count - first;
   13bce:	7805      	ldrb	r5, [r0, #0]
   13bd0:	1aed      	subs	r5, r5, r3
   13bd2:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   13bd4:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   13bd6:	bf3f      	itttt	cc
   13bd8:	1a67      	subcc	r7, r4, r1
   13bda:	19ed      	addcc	r5, r5, r7
   13bdc:	b2ef      	uxtbcc	r7, r5
   13bde:	460d      	movcc	r5, r1
			first += avail;
   13be0:	bf38      	it	cc
   13be2:	185b      	addcc	r3, r3, r1
		octets -= avail;
   13be4:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   13be8:	bf32      	itee	cc
   13bea:	b2db      	uxtbcc	r3, r3
   13bec:	4627      	movcs	r7, r4
			first = 0;
   13bee:	2300      	movcs	r3, #0
		octets -= avail;
   13bf0:	b2c9      	uxtb	r1, r1
   13bf2:	4696      	mov	lr, r2
   13bf4:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   13bf8:	4566      	cmp	r6, ip
   13bfa:	d119      	bne.n	13c30 <get+0xb4>
   13bfc:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   13bfe:	2900      	cmp	r1, #0
   13c00:	d0d6      	beq.n	13bb0 <get+0x34>
   13c02:	2c00      	cmp	r4, #0
   13c04:	d0d4      	beq.n	13bb0 <get+0x34>
			if (octets < last) {
   13c06:	428c      	cmp	r4, r1
   13c08:	bf8a      	itet	hi
   13c0a:	460b      	movhi	r3, r1
   13c0c:	4623      	movls	r3, r4
				remaining = last - octets;
   13c0e:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   13c10:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   13c14:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   13c18:	bf8c      	ite	hi
   13c1a:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   13c1c:	2700      	movls	r7, #0
			octets -= last;
   13c1e:	b2c9      	uxtb	r1, r1
   13c20:	18f4      	adds	r4, r6, r3
			while (last--) {
   13c22:	42a6      	cmp	r6, r4
   13c24:	d0c4      	beq.n	13bb0 <get+0x34>
				*(--d) = *s++;
   13c26:	f816 5b01 	ldrb.w	r5, [r6], #1
   13c2a:	f802 5d01 	strb.w	r5, [r2, #-1]!
   13c2e:	e7f8      	b.n	13c22 <get+0xa6>
			*(--d) = *s++;
   13c30:	f816 8b01 	ldrb.w	r8, [r6], #1
   13c34:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   13c38:	e7de      	b.n	13bf8 <get+0x7c>
   13c3a:	bf00      	nop
   13c3c:	4000d000 	.word	0x4000d000

00013c40 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   13c40:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   13c42:	b1d0      	cbz	r0, 13c7a <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   13c44:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   13c46:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   13c48:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   13c4a:	1c53      	adds	r3, r2, #1
   13c4c:	b2db      	uxtb	r3, r3
		last = 0;
   13c4e:	42ab      	cmp	r3, r5
   13c50:	bf08      	it	eq
   13c52:	2300      	moveq	r3, #0
	if (last == rng->first) {
   13c54:	42a3      	cmp	r3, r4
   13c56:	d010      	beq.n	13c7a <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   13c58:	b161      	cbz	r1, 13c74 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   13c5a:	490a      	ldr	r1, [pc, #40]	; (13c84 <isr+0x44>)
   13c5c:	4402      	add	r2, r0
   13c5e:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   13c62:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   13c64:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   13c66:	3301      	adds	r3, #1
   13c68:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   13c6a:	429d      	cmp	r5, r3
   13c6c:	bf08      	it	eq
   13c6e:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   13c70:	42a3      	cmp	r3, r4
   13c72:	d005      	beq.n	13c80 <isr+0x40>
		return 0;
	}

	return -EBUSY;
   13c74:	f06f 000f 	mvn.w	r0, #15
   13c78:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   13c7a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13c7e:	bd30      	pop	{r4, r5, pc}
		return 0;
   13c80:	2000      	movs	r0, #0
}
   13c82:	bd30      	pop	{r4, r5, pc}
   13c84:	4000d000 	.word	0x4000d000

00013c88 <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   13c88:	07db      	lsls	r3, r3, #31
{
   13c8a:	b570      	push	{r4, r5, r6, lr}
   13c8c:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   13c8e:	d507      	bpl.n	13ca0 <entropy_nrf5_get_entropy_isr+0x18>
   13c90:	4613      	mov	r3, r2
   13c92:	4a0d      	ldr	r2, [pc, #52]	; (13cc8 <entropy_nrf5_get_entropy_isr+0x40>)
   13c94:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   13c96:	2500      	movs	r5, #0
	while (len) {
   13c98:	b94b      	cbnz	r3, 13cae <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   13c9a:	6050      	str	r0, [r2, #4]

	return cnt;
   13c9c:	4620      	mov	r0, r4
}
   13c9e:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   13ca0:	6880      	ldr	r0, [r0, #8]
   13ca2:	460a      	mov	r2, r1
   13ca4:	303c      	adds	r0, #60	; 0x3c
   13ca6:	b2e1      	uxtb	r1, r4
   13ca8:	f7ff ff68 	bl	13b7c <get>
   13cac:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   13cae:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   13cb2:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   13cb4:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   13cb8:	2e00      	cmp	r6, #0
   13cba:	d0fb      	beq.n	13cb4 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   13cbc:	3b01      	subs	r3, #1
   13cbe:	b29b      	uxth	r3, r3
   13cc0:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   13cc4:	54ce      	strb	r6, [r1, r3]
   13cc6:	e7e7      	b.n	13c98 <entropy_nrf5_get_entropy_isr+0x10>
   13cc8:	4000d000 	.word	0x4000d000

00013ccc <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   13ccc:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   13cce:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   13cd0:	2201      	movs	r2, #1
   13cd2:	4611      	mov	r1, r2
   13cd4:	4620      	mov	r0, r4
   13cd6:	f000 fd7f 	bl	147d8 <_impl_k_sem_init>
   13cda:	f104 0018 	add.w	r0, r4, #24
   13cde:	2201      	movs	r2, #1
   13ce0:	2100      	movs	r1, #0
   13ce2:	f000 fd79 	bl	147d8 <_impl_k_sem_init>
	rng->threshold = threshold;
   13ce6:	2304      	movs	r3, #4
   13ce8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   13cec:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   13cee:	2500      	movs	r5, #0
	rng->threshold = threshold;
   13cf0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   13cf4:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   13cf6:	4b11      	ldr	r3, [pc, #68]	; (13d3c <entropy_nrf5_init+0x70>)
	rng->count = len;
   13cf8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   13cfc:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   13cfe:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   13d02:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   13d06:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   13d0a:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   13d0e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   13d12:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   13d16:	f042 0201 	orr.w	r2, r2, #1
   13d1a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   13d1e:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   13d20:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   13d24:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   13d26:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   13d2a:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   13d2c:	462a      	mov	r2, r5
   13d2e:	f7ed fdc7 	bl	18c0 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   13d32:	4630      	mov	r0, r6
   13d34:	f7ed fd92 	bl	185c <_arch_irq_enable>

	return 0;
}
   13d38:	4628      	mov	r0, r5
   13d3a:	bd70      	pop	{r4, r5, r6, pc}
   13d3c:	4000d000 	.word	0x4000d000

00013d40 <isr_rand>:
{
   13d40:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   13d42:	4b12      	ldr	r3, [pc, #72]	; (13d8c <isr_rand+0x4c>)
   13d44:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   13d48:	b1fb      	cbz	r3, 13d8a <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   13d4a:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   13d4c:	2101      	movs	r1, #1
   13d4e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   13d52:	f7ff ff75 	bl	13c40 <isr>
		if (ret != -EBUSY) {
   13d56:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   13d5a:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   13d5c:	d00d      	beq.n	13d7a <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   13d5e:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   13d62:	bf14      	ite	ne
   13d64:	2100      	movne	r1, #0
   13d66:	2101      	moveq	r1, #1
   13d68:	f105 0030 	add.w	r0, r5, #48	; 0x30
   13d6c:	f7ff ff68 	bl	13c40 <isr>
   13d70:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   13d72:	f105 0018 	add.w	r0, r5, #24
   13d76:	f000 fd38 	bl	147ea <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   13d7a:	4b04      	ldr	r3, [pc, #16]	; (13d8c <isr_rand+0x4c>)
   13d7c:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   13d7e:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   13d80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   13d84:	bf1c      	itt	ne
   13d86:	2201      	movne	r2, #1
   13d88:	605a      	strne	r2, [r3, #4]
   13d8a:	bd38      	pop	{r3, r4, r5, pc}
   13d8c:	4000d000 	.word	0x4000d000

00013d90 <entropy_nrf5_get_entropy>:
{
   13d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   13d94:	6885      	ldr	r5, [r0, #8]
{
   13d96:	460f      	mov	r7, r1
   13d98:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   13d9a:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   13d9e:	b914      	cbnz	r4, 13da6 <entropy_nrf5_get_entropy+0x16>
}
   13da0:	4620      	mov	r0, r4
   13da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13da6:	2cff      	cmp	r4, #255	; 0xff
   13da8:	4623      	mov	r3, r4
   13daa:	bf28      	it	cs
   13dac:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   13dae:	1ae4      	subs	r4, r4, r3
   13db0:	b2de      	uxtb	r6, r3
   13db2:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   13db4:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   13db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13dbc:	4628      	mov	r0, r5
   13dbe:	f000 fd3c 	bl	1483a <_impl_k_sem_take>
   13dc2:	4631      	mov	r1, r6
   13dc4:	463a      	mov	r2, r7
   13dc6:	4648      	mov	r0, r9
   13dc8:	f7ff fed8 	bl	13b7c <get>
   13dcc:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   13dce:	4628      	mov	r0, r5
   13dd0:	f000 fd0b 	bl	147ea <_impl_k_sem_give>
			if (len8) {
   13dd4:	2e00      	cmp	r6, #0
   13dd6:	d0e2      	beq.n	13d9e <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   13dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13ddc:	4640      	mov	r0, r8
   13dde:	f000 fd2c 	bl	1483a <_impl_k_sem_take>
   13de2:	e7e9      	b.n	13db8 <entropy_nrf5_get_entropy+0x28>

00013de4 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   13de4:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   13de6:	4802      	ldr	r0, [pc, #8]	; (13df0 <entropy_nrf_get_entropy_isr+0xc>)
   13de8:	460a      	mov	r2, r1
   13dea:	4619      	mov	r1, r3
   13dec:	f7ff bec6 	b.w	13b7c <get>
   13df0:	20001734 	.word	0x20001734

00013df4 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   13df4:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   13df6:	4b08      	ldr	r3, [pc, #32]	; (13e18 <_sys_device_do_config_level+0x24>)
   13df8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   13dfc:	3001      	adds	r0, #1
   13dfe:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   13e02:	4620      	mov	r0, r4
   13e04:	42a8      	cmp	r0, r5
   13e06:	f104 040c 	add.w	r4, r4, #12
   13e0a:	d300      	bcc.n	13e0e <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   13e0c:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   13e0e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   13e12:	685b      	ldr	r3, [r3, #4]
   13e14:	4798      	blx	r3
   13e16:	e7f4      	b.n	13e02 <_sys_device_do_config_level+0xe>
   13e18:	0001941c 	.word	0x0001941c

00013e1c <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   13e1c:	4b10      	ldr	r3, [pc, #64]	; (13e60 <device_get_binding+0x44>)
{
   13e1e:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   13e20:	4c10      	ldr	r4, [pc, #64]	; (13e64 <device_get_binding+0x48>)
{
   13e22:	4605      	mov	r5, r0
   13e24:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   13e26:	429c      	cmp	r4, r3
   13e28:	d104      	bne.n	13e34 <device_get_binding+0x18>
   13e2a:	4c0e      	ldr	r4, [pc, #56]	; (13e64 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   13e2c:	42b4      	cmp	r4, r6
   13e2e:	d109      	bne.n	13e44 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   13e30:	2400      	movs	r4, #0
   13e32:	e012      	b.n	13e5a <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   13e34:	6862      	ldr	r2, [r4, #4]
   13e36:	b11a      	cbz	r2, 13e40 <device_get_binding+0x24>
   13e38:	6822      	ldr	r2, [r4, #0]
   13e3a:	6812      	ldr	r2, [r2, #0]
   13e3c:	42aa      	cmp	r2, r5
   13e3e:	d00c      	beq.n	13e5a <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   13e40:	340c      	adds	r4, #12
   13e42:	e7f0      	b.n	13e26 <device_get_binding+0xa>
		if (!info->driver_api) {
   13e44:	6863      	ldr	r3, [r4, #4]
   13e46:	b90b      	cbnz	r3, 13e4c <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   13e48:	340c      	adds	r4, #12
   13e4a:	e7ef      	b.n	13e2c <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   13e4c:	6823      	ldr	r3, [r4, #0]
   13e4e:	4628      	mov	r0, r5
   13e50:	6819      	ldr	r1, [r3, #0]
   13e52:	f7ed fed7 	bl	1c04 <strcmp>
   13e56:	2800      	cmp	r0, #0
   13e58:	d1f6      	bne.n	13e48 <device_get_binding+0x2c>
}
   13e5a:	4620      	mov	r0, r4
   13e5c:	bd70      	pop	{r4, r5, r6, pc}
   13e5e:	bf00      	nop
   13e60:	20003f04 	.word	0x20003f04
   13e64:	20003e74 	.word	0x20003e74

00013e68 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   13e68:	1c43      	adds	r3, r0, #1
   13e6a:	d003      	beq.n	13e74 <_sys_power_save_idle_exit+0xc>
   13e6c:	4b03      	ldr	r3, [pc, #12]	; (13e7c <_sys_power_save_idle_exit+0x14>)
   13e6e:	681b      	ldr	r3, [r3, #0]
   13e70:	4298      	cmp	r0, r3
   13e72:	db01      	blt.n	13e78 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   13e74:	f7ed baba 	b.w	13ec <_timer_idle_exit>
   13e78:	4770      	bx	lr
   13e7a:	bf00      	nop
   13e7c:	20003e68 	.word	0x20003e68

00013e80 <idle>:
	return list->head == list;
   13e80:	4d0f      	ldr	r5, [pc, #60]	; (13ec0 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   13e82:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   13e84:	4f0f      	ldr	r7, [pc, #60]	; (13ec4 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13e86:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   13e8a:	f04f 0220 	mov.w	r2, #32
   13e8e:	f3ef 8311 	mrs	r3, BASEPRI
   13e92:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   13e96:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13e98:	42b3      	cmp	r3, r6
   13e9a:	d00a      	beq.n	13eb2 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   13e9c:	b14b      	cbz	r3, 13eb2 <idle+0x32>
   13e9e:	691c      	ldr	r4, [r3, #16]
   13ea0:	1c63      	adds	r3, r4, #1
   13ea2:	d008      	beq.n	13eb6 <idle+0x36>
   13ea4:	683b      	ldr	r3, [r7, #0]
   13ea6:	42a3      	cmp	r3, r4
   13ea8:	dd05      	ble.n	13eb6 <idle+0x36>
	_kernel.idle = ticks;
   13eaa:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   13eac:	f7ed fd5e 	bl	196c <k_cpu_idle>
   13eb0:	e7eb      	b.n	13e8a <idle+0xa>
   13eb2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   13eb6:	4620      	mov	r0, r4
   13eb8:	f7ed fa7a 	bl	13b0 <_timer_idle_enter>
   13ebc:	e7f5      	b.n	13eaa <idle+0x2a>
   13ebe:	bf00      	nop
   13ec0:	20001948 	.word	0x20001948
   13ec4:	20003e68 	.word	0x20003e68

00013ec8 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   13ec8:	4802      	ldr	r0, [pc, #8]	; (13ed4 <_bss_zero+0xc>)
   13eca:	4a03      	ldr	r2, [pc, #12]	; (13ed8 <_bss_zero+0x10>)
   13ecc:	2100      	movs	r1, #0
   13ece:	1a12      	subs	r2, r2, r0
   13ed0:	f7ed bee6 	b.w	1ca0 <memset>
   13ed4:	20000000 	.word	0x20000000
   13ed8:	20001a08 	.word	0x20001a08

00013edc <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   13edc:	4802      	ldr	r0, [pc, #8]	; (13ee8 <_data_copy+0xc>)
   13ede:	4a03      	ldr	r2, [pc, #12]	; (13eec <_data_copy+0x10>)
   13ee0:	4903      	ldr	r1, [pc, #12]	; (13ef0 <_data_copy+0x14>)
   13ee2:	1a12      	subs	r2, r2, r0
   13ee4:	f7ed beb0 	b.w	1c48 <memcpy>
   13ee8:	20003a20 	.word	0x20003a20
   13eec:	20003fac 	.word	0x20003fac
   13ef0:	0001946c 	.word	0x0001946c

00013ef4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   13ef4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   13ef6:	2002      	movs	r0, #2
   13ef8:	f7ff ff7c 	bl	13df4 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   13efc:	4807      	ldr	r0, [pc, #28]	; (13f1c <bg_thread_main+0x28>)
   13efe:	f7ed f845 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   13f02:	2003      	movs	r0, #3
   13f04:	f7ff ff76 	bl	13df4 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   13f08:	f000 feaa 	bl	14c60 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   13f0c:	f7ec fbd8 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   13f10:	4a03      	ldr	r2, [pc, #12]	; (13f20 <bg_thread_main+0x2c>)
   13f12:	7a13      	ldrb	r3, [r2, #8]
   13f14:	f023 0301 	bic.w	r3, r3, #1
   13f18:	7213      	strb	r3, [r2, #8]
   13f1a:	bd08      	pop	{r3, pc}
   13f1c:	00019438 	.word	0x00019438
   13f20:	200017b8 	.word	0x200017b8

00013f24 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   13f24:	b580      	push	{r7, lr}
   13f26:	b086      	sub	sp, #24
   13f28:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   13f2a:	f7ed fae3 	bl	14f4 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   13f2e:	4b30      	ldr	r3, [pc, #192]	; (13ff0 <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   13f30:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13f34:	4b2f      	ldr	r3, [pc, #188]	; (13ff4 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   13f36:	4d30      	ldr	r5, [pc, #192]	; (13ff8 <_Cstart+0xd4>)
   13f38:	4e30      	ldr	r6, [pc, #192]	; (13ffc <_Cstart+0xd8>)
   13f3a:	2400      	movs	r4, #0
   13f3c:	22e0      	movs	r2, #224	; 0xe0
   13f3e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   13f42:	77dc      	strb	r4, [r3, #31]
   13f44:	761c      	strb	r4, [r3, #24]
   13f46:	765c      	strb	r4, [r3, #25]
   13f48:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   13f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13f4c:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   13f50:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   13f52:	f7ed fc7b 	bl	184c <_FaultInit>
	_CpuIdleInit();
   13f56:	f7ed fd03 	bl	1960 <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   13f5a:	4620      	mov	r0, r4
   13f5c:	f7ff ff4a 	bl	13df4 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   13f60:	2001      	movs	r0, #1
   13f62:	f7ff ff47 	bl	13df4 <_sys_device_do_config_level>
	_sched_init();
   13f66:	f000 fbf9 	bl	1475c <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   13f6a:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   13f6c:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   13f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13f72:	9304      	str	r3, [sp, #16]
   13f74:	9403      	str	r4, [sp, #12]
   13f76:	9402      	str	r4, [sp, #8]
   13f78:	9401      	str	r4, [sp, #4]
   13f7a:	9400      	str	r4, [sp, #0]
   13f7c:	4b20      	ldr	r3, [pc, #128]	; (14000 <_Cstart+0xdc>)
   13f7e:	4921      	ldr	r1, [pc, #132]	; (14004 <_Cstart+0xe0>)
   13f80:	4628      	mov	r0, r5
   13f82:	f000 fe15 	bl	14bb0 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13f86:	7a6b      	ldrb	r3, [r5, #9]
   13f88:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   13f8c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13f90:	726a      	strb	r2, [r5, #9]
   13f92:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   13f94:	d102      	bne.n	13f9c <_Cstart+0x78>
   13f96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13f98:	3301      	adds	r3, #1
   13f9a:	d024      	beq.n	13fe6 <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   13f9c:	2301      	movs	r3, #1
   13f9e:	4e1a      	ldr	r6, [pc, #104]	; (14008 <_Cstart+0xe4>)
   13fa0:	9304      	str	r3, [sp, #16]
   13fa2:	230f      	movs	r3, #15
   13fa4:	9303      	str	r3, [sp, #12]
   13fa6:	2300      	movs	r3, #0
   13fa8:	9302      	str	r3, [sp, #8]
   13faa:	9301      	str	r3, [sp, #4]
   13fac:	9300      	str	r3, [sp, #0]
   13fae:	f44f 72a0 	mov.w	r2, #320	; 0x140
   13fb2:	4b16      	ldr	r3, [pc, #88]	; (1400c <_Cstart+0xe8>)
   13fb4:	4916      	ldr	r1, [pc, #88]	; (14010 <_Cstart+0xec>)
   13fb6:	4630      	mov	r0, r6
   13fb8:	f000 fdfa 	bl	14bb0 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13fbc:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   13fbe:	60e6      	str	r6, [r4, #12]
   13fc0:	f023 0304 	bic.w	r3, r3, #4
   13fc4:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   13fc6:	4b13      	ldr	r3, [pc, #76]	; (14014 <_Cstart+0xf0>)
   13fc8:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   13fca:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   13fcc:	4b12      	ldr	r3, [pc, #72]	; (14018 <_Cstart+0xf4>)

	_current = main_thread;
   13fce:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   13fd0:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   13fd4:	4c11      	ldr	r4, [pc, #68]	; (1401c <_Cstart+0xf8>)
   13fd6:	4a0a      	ldr	r2, [pc, #40]	; (14000 <_Cstart+0xdc>)
   13fd8:	f383 8809 	msr	PSP, r3
   13fdc:	2100      	movs	r1, #0
   13fde:	f381 8811 	msr	BASEPRI, r1
   13fe2:	4610      	mov	r0, r2
   13fe4:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   13fe6:	4628      	mov	r0, r5
   13fe8:	f000 fab4 	bl	14554 <_add_thread_to_ready_q>
   13fec:	e7d6      	b.n	13f9c <_Cstart+0x78>
   13fee:	bf00      	nop
   13ff0:	20003620 	.word	0x20003620
   13ff4:	e000ed00 	.word	0xe000ed00
   13ff8:	200017b8 	.word	0x200017b8
   13ffc:	20001948 	.word	0x20001948
   14000:	00013ef5 	.word	0x00013ef5
   14004:	200028e0 	.word	0x200028e0
   14008:	20001748 	.word	0x20001748
   1400c:	00013e81 	.word	0x00013e81
   14010:	20002ce0 	.word	0x20002ce0
   14014:	2000195c 	.word	0x2000195c
   14018:	20002ce0 	.word	0x20002ce0
   1401c:	00000899 	.word	0x00000899

00014020 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   14020:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   14022:	4c07      	ldr	r4, [pc, #28]	; (14040 <init_static_pools+0x20>)
   14024:	4d07      	ldr	r5, [pc, #28]	; (14044 <init_static_pools+0x24>)
   14026:	42ac      	cmp	r4, r5
   14028:	d301      	bcc.n	1402e <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1402a:	2000      	movs	r0, #0
   1402c:	bd38      	pop	{r3, r4, r5, pc}
   1402e:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   14032:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   14034:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   14036:	4620      	mov	r0, r4
   14038:	f7ec fc69 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   1403c:	341c      	adds	r4, #28
   1403e:	e7f2      	b.n	14026 <init_static_pools+0x6>
   14040:	20003f04 	.word	0x20003f04
   14044:	20003f04 	.word	0x20003f04

00014048 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   14048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1404c:	1e1d      	subs	r5, r3, #0
{
   1404e:	b085      	sub	sp, #20
   14050:	4607      	mov	r7, r0
   14052:	460c      	mov	r4, r1
   14054:	4692      	mov	sl, r2
	if (timeout > 0) {
   14056:	dd4c      	ble.n	140f2 <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   14058:	f000 fc16 	bl	14888 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   1405c:	f105 0309 	add.w	r3, r5, #9
   14060:	220a      	movs	r2, #10
   14062:	fbb3 f3f2 	udiv	r3, r3, r2
   14066:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   1406a:	4b23      	ldr	r3, [pc, #140]	; (140f8 <k_mem_pool_alloc+0xb0>)
   1406c:	4e23      	ldr	r6, [pc, #140]	; (140fc <k_mem_pool_alloc+0xb4>)
   1406e:	1afb      	subs	r3, r7, r3
   14070:	109b      	asrs	r3, r3, #2
   14072:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   14074:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   14076:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   1407a:	9400      	str	r4, [sp, #0]
   1407c:	ab03      	add	r3, sp, #12
   1407e:	aa02      	add	r2, sp, #8
   14080:	4651      	mov	r1, sl
   14082:	4638      	mov	r0, r7
   14084:	f7ec fc8e 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   14088:	f110 0f0b 	cmn.w	r0, #11
   1408c:	d10b      	bne.n	140a6 <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   1408e:	9400      	str	r4, [sp, #0]
   14090:	ab03      	add	r3, sp, #12
   14092:	aa02      	add	r2, sp, #8
   14094:	4651      	mov	r1, sl
   14096:	4638      	mov	r0, r7
   14098:	f7ec fc84 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   1409c:	f110 0f0b 	cmn.w	r0, #11
   140a0:	bf08      	it	eq
   140a2:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   140a6:	7963      	ldrb	r3, [r4, #5]
   140a8:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   140aa:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   140ac:	f362 0303 	bfi	r3, r2, #0, #4
   140b0:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   140b2:	6863      	ldr	r3, [r4, #4]
   140b4:	9a03      	ldr	r2, [sp, #12]
   140b6:	f362 331f 	bfi	r3, r2, #12, #20
   140ba:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   140bc:	b1b0      	cbz	r0, 140ec <k_mem_pool_alloc+0xa4>
   140be:	b1ad      	cbz	r5, 140ec <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   140c0:	f110 0f0c 	cmn.w	r0, #12
   140c4:	d112      	bne.n	140ec <k_mem_pool_alloc+0xa4>
   140c6:	f04f 0320 	mov.w	r3, #32
   140ca:	f3ef 8011 	mrs	r0, BASEPRI
   140ce:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   140d2:	462a      	mov	r2, r5
   140d4:	4659      	mov	r1, fp
   140d6:	f000 faeb 	bl	146b0 <_pend_current_thread>

		if (timeout != K_FOREVER) {
   140da:	1c6b      	adds	r3, r5, #1
   140dc:	d0cd      	beq.n	1407a <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   140de:	f000 fbd3 	bl	14888 <_tick_get>

			if (timeout < 0) {
   140e2:	ebb8 0500 	subs.w	r5, r8, r0
   140e6:	d5c8      	bpl.n	1407a <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   140e8:	f06f 000a 	mvn.w	r0, #10
}
   140ec:	b005      	add	sp, #20
   140ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   140f2:	f04f 0800 	mov.w	r8, #0
   140f6:	e7b8      	b.n	1406a <k_mem_pool_alloc+0x22>
   140f8:	20003f04 	.word	0x20003f04
   140fc:	b6db6db7 	.word	0xb6db6db7

00014100 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   14100:	b570      	push	{r4, r5, r6, lr}
   14102:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   14104:	6802      	ldr	r2, [r0, #0]
   14106:	7841      	ldrb	r1, [r0, #1]
   14108:	4e13      	ldr	r6, [pc, #76]	; (14158 <k_mem_pool_free_id+0x58>)
   1410a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1410e:	00a4      	lsls	r4, r4, #2
   14110:	0b12      	lsrs	r2, r2, #12
   14112:	f001 010f 	and.w	r1, r1, #15
   14116:	1930      	adds	r0, r6, r4
   14118:	f7ec fcf6 	bl	b08 <_sys_mem_pool_block_free>
   1411c:	f04f 0320 	mov.w	r3, #32
   14120:	f3ef 8511 	mrs	r5, BASEPRI
   14124:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   14128:	f104 0014 	add.w	r0, r4, #20
   1412c:	4430      	add	r0, r6
   1412e:	f000 fb05 	bl	1473c <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   14132:	b140      	cbz	r0, 14146 <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14134:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   14138:	2b0d      	cmp	r3, #13
   1413a:	d804      	bhi.n	14146 <k_mem_pool_free_id+0x46>
   1413c:	b133      	cbz	r3, 1414c <k_mem_pool_free_id+0x4c>
   1413e:	4b07      	ldr	r3, [pc, #28]	; (1415c <k_mem_pool_free_id+0x5c>)
   14140:	685b      	ldr	r3, [r3, #4]
   14142:	051b      	lsls	r3, r3, #20
   14144:	d402      	bmi.n	1414c <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14146:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   1414a:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   1414c:	4628      	mov	r0, r5
}
   1414e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   14152:	f000 b9a7 	b.w	144a4 <_reschedule>
   14156:	bf00      	nop
   14158:	20003f04 	.word	0x20003f04
   1415c:	e000ed00 	.word	0xe000ed00

00014160 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   14160:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   14162:	1d0a      	adds	r2, r1, #4
   14164:	d204      	bcs.n	14170 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   14166:	2300      	movs	r3, #0
   14168:	4669      	mov	r1, sp
   1416a:	f7ff ff6d 	bl	14048 <k_mem_pool_alloc>
   1416e:	b118      	cbz	r0, 14178 <k_mem_pool_malloc+0x18>
		return NULL;
   14170:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   14172:	b003      	add	sp, #12
   14174:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   14178:	2204      	movs	r2, #4
   1417a:	eb0d 0102 	add.w	r1, sp, r2
   1417e:	9800      	ldr	r0, [sp, #0]
   14180:	f7ed fd62 	bl	1c48 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   14184:	9800      	ldr	r0, [sp, #0]
   14186:	3004      	adds	r0, #4
   14188:	e7f3      	b.n	14172 <k_mem_pool_malloc+0x12>

0001418a <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   1418a:	b110      	cbz	r0, 14192 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   1418c:	3804      	subs	r0, #4
   1418e:	f7ff bfb7 	b.w	14100 <k_mem_pool_free_id>
   14192:	4770      	bx	lr

00014194 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   14194:	4b03      	ldr	r3, [pc, #12]	; (141a4 <z_thread_malloc+0x10>)
   14196:	689b      	ldr	r3, [r3, #8]
{
   14198:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   1419a:	6e58      	ldr	r0, [r3, #100]	; 0x64
   1419c:	b108      	cbz	r0, 141a2 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1419e:	f7ff bfdf 	b.w	14160 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   141a2:	4770      	bx	lr
   141a4:	20001948 	.word	0x20001948

000141a8 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   141a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   141aa:	4605      	mov	r5, r0
   141ac:	460f      	mov	r7, r1
   141ae:	4614      	mov	r4, r2
	__asm__ volatile(
   141b0:	f04f 0220 	mov.w	r2, #32
   141b4:	f3ef 8611 	mrs	r6, BASEPRI
   141b8:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   141bc:	b1a3      	cbz	r3, 141e8 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   141be:	2008      	movs	r0, #8
   141c0:	f7ff ffe8 	bl	14194 <z_thread_malloc>
		if (!anode) {
   141c4:	2800      	cmp	r0, #0
   141c6:	d034      	beq.n	14232 <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   141c8:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   141ca:	6044      	str	r4, [r0, #4]
   141cc:	6003      	str	r3, [r0, #0]
   141ce:	4604      	mov	r4, r0
   141d0:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   141d2:	b95f      	cbnz	r7, 141ec <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   141d4:	682a      	ldr	r2, [r5, #0]
   141d6:	f003 0303 	and.w	r3, r3, #3
   141da:	4313      	orrs	r3, r2
   141dc:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   141de:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   141e0:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   141e2:	b973      	cbnz	r3, 14202 <queue_insert+0x5a>
	list->tail = node;
   141e4:	606c      	str	r4, [r5, #4]
   141e6:	e00c      	b.n	14202 <queue_insert+0x5a>
	node->next_and_flags = flags;
   141e8:	6023      	str	r3, [r4, #0]
   141ea:	e7f1      	b.n	141d0 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   141ec:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   141ee:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   141f2:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   141f6:	d114      	bne.n	14222 <queue_insert+0x7a>
   141f8:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   141fa:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   141fc:	b95a      	cbnz	r2, 14216 <queue_insert+0x6e>
	list->tail = node;
   141fe:	606c      	str	r4, [r5, #4]
	list->head = node;
   14200:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   14202:	2104      	movs	r1, #4
   14204:	f105 0008 	add.w	r0, r5, #8
   14208:	f000 ffb4 	bl	15174 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   1420c:	4630      	mov	r0, r6
   1420e:	f000 f949 	bl	144a4 <_reschedule>
	return 0;
   14212:	2000      	movs	r0, #0
   14214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14216:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14218:	f003 0303 	and.w	r3, r3, #3
   1421c:	4323      	orrs	r3, r4
   1421e:	6013      	str	r3, [r2, #0]
   14220:	e7e0      	b.n	141e4 <queue_insert+0x3c>
   14222:	4313      	orrs	r3, r2
   14224:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14226:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14228:	f002 0203 	and.w	r2, r2, #3
   1422c:	4314      	orrs	r4, r2
   1422e:	603c      	str	r4, [r7, #0]
   14230:	e7e7      	b.n	14202 <queue_insert+0x5a>
			return -ENOMEM;
   14232:	f06f 000b 	mvn.w	r0, #11
}
   14236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014238 <z_queue_node_peek>:
{
   14238:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   1423a:	4604      	mov	r4, r0
   1423c:	b130      	cbz	r0, 1424c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1423e:	6802      	ldr	r2, [r0, #0]
   14240:	0793      	lsls	r3, r2, #30
   14242:	d003      	beq.n	1424c <z_queue_node_peek+0x14>
		ret = anode->data;
   14244:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   14246:	b109      	cbz	r1, 1424c <z_queue_node_peek+0x14>
			k_free(anode);
   14248:	f7ff ff9f 	bl	1418a <k_free>
}
   1424c:	4620      	mov	r0, r4
   1424e:	bd10      	pop	{r4, pc}

00014250 <_impl_k_queue_init>:
	list->head = NULL;
   14250:	2300      	movs	r3, #0
   14252:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   14254:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   14256:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   1425a:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1425c:	60c3      	str	r3, [r0, #12]
   1425e:	4770      	bx	lr

00014260 <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   14260:	460a      	mov	r2, r1
   14262:	2300      	movs	r3, #0
   14264:	6841      	ldr	r1, [r0, #4]
   14266:	f7ff bf9f 	b.w	141a8 <queue_insert>

0001426a <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   1426a:	2300      	movs	r3, #0
   1426c:	460a      	mov	r2, r1
   1426e:	4619      	mov	r1, r3
   14270:	f7ff bf9a 	b.w	141a8 <queue_insert>

00014274 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   14274:	b538      	push	{r3, r4, r5, lr}
   14276:	f04f 0320 	mov.w	r3, #32
   1427a:	f3ef 8511 	mrs	r5, BASEPRI
   1427e:	f383 8811 	msr	BASEPRI, r3
   14282:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   14284:	b953      	cbnz	r3, 1429c <k_queue_append_list+0x28>
	list->head = node;
   14286:	6001      	str	r1, [r0, #0]
	list->tail = node;
   14288:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   1428a:	2104      	movs	r1, #4
   1428c:	3008      	adds	r0, #8
   1428e:	f000 ff71 	bl	15174 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   14292:	4628      	mov	r0, r5
}
   14294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   14298:	f000 b904 	b.w	144a4 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1429c:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1429e:	f004 0403 	and.w	r4, r4, #3
   142a2:	4321      	orrs	r1, r4
   142a4:	6019      	str	r1, [r3, #0]
   142a6:	e7ef      	b.n	14288 <k_queue_append_list+0x14>

000142a8 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   142a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142ac:	4604      	mov	r4, r0
   142ae:	b086      	sub	sp, #24
   142b0:	460d      	mov	r5, r1
   142b2:	f04f 0320 	mov.w	r3, #32
   142b6:	f3ef 8711 	mrs	r7, BASEPRI
   142ba:	f383 8811 	msr	BASEPRI, r3
   142be:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   142c0:	b182      	cbz	r2, 142e4 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   142c2:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   142c4:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   142c6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   142ca:	428a      	cmp	r2, r1
	list->head = node;
   142cc:	6003      	str	r3, [r0, #0]
	list->tail = node;
   142ce:	bf08      	it	eq
   142d0:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   142d2:	2101      	movs	r1, #1
   142d4:	4610      	mov	r0, r2
   142d6:	f7ff ffaf 	bl	14238 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   142da:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   142de:	b006      	add	sp, #24
   142e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   142e4:	b919      	cbnz	r1, 142ee <_impl_k_queue_get+0x46>
   142e6:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   142ea:	2000      	movs	r0, #0
   142ec:	e7f7      	b.n	142de <_impl_k_queue_get+0x36>
   142ee:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   142f2:	2104      	movs	r1, #4
   142f4:	4603      	mov	r3, r0
   142f6:	eb0d 0001 	add.w	r0, sp, r1
   142fa:	f000 fea4 	bl	15046 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   142fe:	1c6a      	adds	r2, r5, #1
   14300:	d002      	beq.n	14308 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   14302:	f000 fab7 	bl	14874 <_impl_k_uptime_get_32>
   14306:	4606      	mov	r6, r0
{
   14308:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1430a:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   1430e:	1bea      	subs	r2, r5, r7
   14310:	f36f 1307 	bfc	r3, #4, #4
   14314:	2101      	movs	r1, #1
   14316:	a801      	add	r0, sp, #4
   14318:	f88d 3011 	strb.w	r3, [sp, #17]
   1431c:	f000 fea6 	bl	1506c <_impl_k_poll>
		if (err && err != -EAGAIN) {
   14320:	b108      	cbz	r0, 14326 <_impl_k_queue_get+0x7e>
   14322:	300b      	adds	r0, #11
   14324:	d1e1      	bne.n	142ea <_impl_k_queue_get+0x42>
	__asm__ volatile(
   14326:	f04f 0320 	mov.w	r3, #32
   1432a:	f3ef 8811 	mrs	r8, BASEPRI
   1432e:	f383 8811 	msr	BASEPRI, r3
   14332:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   14334:	b138      	cbz	r0, 14346 <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14336:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14338:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1433a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   1433e:	4290      	cmp	r0, r2
	list->head = node;
   14340:	6023      	str	r3, [r4, #0]
	list->tail = node;
   14342:	bf08      	it	eq
   14344:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   14346:	2101      	movs	r1, #1
   14348:	f7ff ff76 	bl	14238 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1434c:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   14350:	2800      	cmp	r0, #0
   14352:	d1c4      	bne.n	142de <_impl_k_queue_get+0x36>
   14354:	1c6b      	adds	r3, r5, #1
   14356:	d0d8      	beq.n	1430a <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   14358:	f000 fa8c 	bl	14874 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   1435c:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1435e:	42bd      	cmp	r5, r7
   14360:	dad3      	bge.n	1430a <_impl_k_queue_get+0x62>
   14362:	e7c2      	b.n	142ea <_impl_k_queue_get+0x42>

00014364 <sys_dlist_remove>:
	node->prev->next = node->next;
   14364:	e890 000c 	ldmia.w	r0, {r2, r3}
   14368:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1436a:	6802      	ldr	r2, [r0, #0]
   1436c:	6053      	str	r3, [r2, #4]
   1436e:	4770      	bx	lr

00014370 <_abort_timeout>:
{
   14370:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14372:	6900      	ldr	r0, [r0, #16]
{
   14374:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14376:	1c43      	adds	r3, r0, #1
   14378:	d00e      	beq.n	14398 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1437a:	4b08      	ldr	r3, [pc, #32]	; (1439c <_abort_timeout+0x2c>)
   1437c:	699b      	ldr	r3, [r3, #24]
   1437e:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   14380:	bf1f      	itttt	ne
   14382:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14384:	6913      	ldrne	r3, [r2, #16]
   14386:	18c0      	addne	r0, r0, r3
   14388:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   1438a:	4608      	mov	r0, r1
   1438c:	f7ff ffea 	bl	14364 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   14390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14394:	610b      	str	r3, [r1, #16]
	return 0;
   14396:	2000      	movs	r0, #0
}
   14398:	bd08      	pop	{r3, pc}
   1439a:	bf00      	nop
   1439c:	20001948 	.word	0x20001948

000143a0 <k_spin_lock.isra.11>:
	__asm__ volatile(
   143a0:	f04f 0320 	mov.w	r3, #32
   143a4:	f3ef 8011 	mrs	r0, BASEPRI
   143a8:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   143ac:	4770      	bx	lr
	...

000143b0 <update_cache>:
	return list->head == list;
   143b0:	4b0d      	ldr	r3, [pc, #52]	; (143e8 <update_cache+0x38>)
   143b2:	4619      	mov	r1, r3
   143b4:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   143b8:	428a      	cmp	r2, r1
   143ba:	d000      	beq.n	143be <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   143bc:	b902      	cbnz	r2, 143c0 <update_cache+0x10>
   143be:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   143c0:	b970      	cbnz	r0, 143e0 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   143c2:	6899      	ldr	r1, [r3, #8]
   143c4:	b161      	cbz	r1, 143e0 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   143c6:	7a48      	ldrb	r0, [r1, #9]
   143c8:	06c0      	lsls	r0, r0, #27
   143ca:	d109      	bne.n	143e0 <update_cache+0x30>
   143cc:	6a48      	ldr	r0, [r1, #36]	; 0x24
   143ce:	3001      	adds	r0, #1
   143d0:	d106      	bne.n	143e0 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   143d2:	8948      	ldrh	r0, [r1, #10]
   143d4:	287f      	cmp	r0, #127	; 0x7f
   143d6:	d903      	bls.n	143e0 <update_cache+0x30>
	return thread == _idle_thread;
   143d8:	4804      	ldr	r0, [pc, #16]	; (143ec <update_cache+0x3c>)
	if (_is_idle(_current)) {
   143da:	6800      	ldr	r0, [r0, #0]
   143dc:	4281      	cmp	r1, r0
   143de:	d101      	bne.n	143e4 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   143e0:	621a      	str	r2, [r3, #32]
   143e2:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   143e4:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   143e6:	4770      	bx	lr
   143e8:	20001948 	.word	0x20001948
   143ec:	00019434 	.word	0x00019434

000143f0 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   143f0:	f990 000a 	ldrsb.w	r0, [r0, #10]
   143f4:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   143f8:	4298      	cmp	r0, r3
   143fa:	bfac      	ite	ge
   143fc:	2000      	movge	r0, #0
   143fe:	2001      	movlt	r0, #1
   14400:	4770      	bx	lr
	...

00014404 <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   14404:	b510      	push	{r4, lr}
   14406:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   14408:	f7ff ffca 	bl	143a0 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   1440c:	7a4b      	ldrb	r3, [r1, #9]
   1440e:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   14410:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   14412:	d50d      	bpl.n	14430 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   14414:	4608      	mov	r0, r1
   14416:	f7ff ffa5 	bl	14364 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   1441a:	7a4b      	ldrb	r3, [r1, #9]
   1441c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14420:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   14422:	4b05      	ldr	r3, [pc, #20]	; (14438 <_remove_thread_from_ready_q+0x34>)
   14424:	6898      	ldr	r0, [r3, #8]
   14426:	1a43      	subs	r3, r0, r1
   14428:	4258      	negs	r0, r3
   1442a:	4158      	adcs	r0, r3
   1442c:	f7ff ffc0 	bl	143b0 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14430:	f384 8811 	msr	BASEPRI, r4
   14434:	bd10      	pop	{r4, pc}
   14436:	bf00      	nop
   14438:	20001948 	.word	0x20001948

0001443c <_find_first_thread_to_unpend>:
{
   1443c:	b508      	push	{r3, lr}
   1443e:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   14440:	f7ff ffae 	bl	143a0 <k_spin_lock.isra.11>
	return list->head == list;
   14444:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14446:	429a      	cmp	r2, r3
   14448:	bf08      	it	eq
   1444a:	2300      	moveq	r3, #0
   1444c:	f380 8811 	msr	BASEPRI, r0
}
   14450:	4618      	mov	r0, r3
   14452:	bd08      	pop	{r3, pc}

00014454 <_unpend_thread_no_timeout>:
{
   14454:	b510      	push	{r4, lr}
   14456:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   14458:	f7ff ffa2 	bl	143a0 <k_spin_lock.isra.11>
   1445c:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   1445e:	4608      	mov	r0, r1
   14460:	f7ff ff80 	bl	14364 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14464:	7a4b      	ldrb	r3, [r1, #9]
   14466:	f023 0302 	bic.w	r3, r3, #2
   1446a:	724b      	strb	r3, [r1, #9]
   1446c:	f384 8811 	msr	BASEPRI, r4
   14470:	bd10      	pop	{r4, pc}

00014472 <_unpend_first_thread>:
{
   14472:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   14474:	2100      	movs	r1, #0
   14476:	f7ff ffe1 	bl	1443c <_find_first_thread_to_unpend>

	if (thread) {
   1447a:	4604      	mov	r4, r0
   1447c:	b128      	cbz	r0, 1448a <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   1447e:	f7ff ffe9 	bl	14454 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   14482:	f104 0014 	add.w	r0, r4, #20
   14486:	f7ff ff73 	bl	14370 <_abort_timeout>
}
   1448a:	4620      	mov	r0, r4
   1448c:	bd10      	pop	{r4, pc}

0001448e <_unpend_thread>:
{
   1448e:	b510      	push	{r4, lr}
   14490:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   14492:	f7ff ffdf 	bl	14454 <_unpend_thread_no_timeout>
   14496:	f104 0014 	add.w	r0, r4, #20
}
   1449a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1449e:	f7ff bf67 	b.w	14370 <_abort_timeout>
	...

000144a4 <_reschedule>:
   144a4:	f3ef 8305 	mrs	r3, IPSR
   144a8:	2b0d      	cmp	r3, #13
   144aa:	d809      	bhi.n	144c0 <_reschedule+0x1c>
   144ac:	b11b      	cbz	r3, 144b6 <_reschedule+0x12>
   144ae:	4b09      	ldr	r3, [pc, #36]	; (144d4 <_reschedule+0x30>)
   144b0:	685b      	ldr	r3, [r3, #4]
   144b2:	051b      	lsls	r3, r3, #20
   144b4:	d504      	bpl.n	144c0 <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   144b6:	4b08      	ldr	r3, [pc, #32]	; (144d8 <_reschedule+0x34>)
   144b8:	689a      	ldr	r2, [r3, #8]
   144ba:	6a1b      	ldr	r3, [r3, #32]
   144bc:	429a      	cmp	r2, r3
   144be:	d103      	bne.n	144c8 <_reschedule+0x24>
   144c0:	f380 8811 	msr	BASEPRI, r0
}
   144c4:	2000      	movs	r0, #0
   144c6:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   144c8:	4b04      	ldr	r3, [pc, #16]	; (144dc <_reschedule+0x38>)
   144ca:	2200      	movs	r2, #0
   144cc:	601a      	str	r2, [r3, #0]
   144ce:	f7ed b81d 	b.w	150c <__swap>
   144d2:	bf00      	nop
   144d4:	e000ed00 	.word	0xe000ed00
   144d8:	20001948 	.word	0x20001948
   144dc:	2000197c 	.word	0x2000197c

000144e0 <k_sched_unlock>:
{
   144e0:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   144e2:	f7ff ff5d 	bl	143a0 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   144e6:	4b0a      	ldr	r3, [pc, #40]	; (14510 <k_sched_unlock+0x30>)
   144e8:	689a      	ldr	r2, [r3, #8]
   144ea:	7ad3      	ldrb	r3, [r2, #11]
   144ec:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   144ee:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   144f0:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   144f2:	2001      	movs	r0, #1
   144f4:	f7ff ff5c 	bl	143b0 <update_cache>
   144f8:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   144fc:	f04f 0320 	mov.w	r3, #32
   14500:	f3ef 8011 	mrs	r0, BASEPRI
   14504:	f383 8811 	msr	BASEPRI, r3
}
   14508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   1450c:	f7ff bfca 	b.w	144a4 <_reschedule>
   14510:	20001948 	.word	0x20001948

00014514 <_priq_dumb_add>:
{
   14514:	b510      	push	{r4, lr}
	return list->head == list;
   14516:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14518:	4298      	cmp	r0, r3
   1451a:	bf08      	it	eq
   1451c:	2300      	moveq	r3, #0
   1451e:	b193      	cbz	r3, 14546 <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   14520:	f991 400a 	ldrsb.w	r4, [r1, #10]
   14524:	f993 200a 	ldrsb.w	r2, [r3, #10]
   14528:	4294      	cmp	r4, r2
   1452a:	da06      	bge.n	1453a <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   1452c:	685a      	ldr	r2, [r3, #4]
   1452e:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   14530:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   14532:	685a      	ldr	r2, [r3, #4]
   14534:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   14536:	6059      	str	r1, [r3, #4]
   14538:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   1453a:	6842      	ldr	r2, [r0, #4]
   1453c:	4293      	cmp	r3, r2
   1453e:	d002      	beq.n	14546 <_priq_dumb_add+0x32>
   14540:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14542:	2b00      	cmp	r3, #0
   14544:	d1eb      	bne.n	1451e <_priq_dumb_add+0xa>
	node->next = list;
   14546:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   14548:	6843      	ldr	r3, [r0, #4]
   1454a:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   1454c:	6843      	ldr	r3, [r0, #4]
   1454e:	6019      	str	r1, [r3, #0]
	list->tail = node;
   14550:	6041      	str	r1, [r0, #4]
   14552:	bd10      	pop	{r4, pc}

00014554 <_add_thread_to_ready_q>:
{
   14554:	b538      	push	{r3, r4, r5, lr}
   14556:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   14558:	f7ff ff22 	bl	143a0 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   1455c:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   1455e:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   14560:	4806      	ldr	r0, [pc, #24]	; (1457c <_add_thread_to_ready_q+0x28>)
   14562:	f7ff ffd7 	bl	14514 <_priq_dumb_add>
	thread->base.thread_state |= states;
   14566:	7a63      	ldrb	r3, [r4, #9]
   14568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1456c:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   1456e:	2000      	movs	r0, #0
   14570:	f7ff ff1e 	bl	143b0 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14574:	f385 8811 	msr	BASEPRI, r5
   14578:	bd38      	pop	{r3, r4, r5, pc}
   1457a:	bf00      	nop
   1457c:	2000196c 	.word	0x2000196c

00014580 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   14580:	7a42      	ldrb	r2, [r0, #9]
   14582:	06d2      	lsls	r2, r2, #27
   14584:	d104      	bne.n	14590 <_ready_thread+0x10>
   14586:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14588:	3301      	adds	r3, #1
   1458a:	d101      	bne.n	14590 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   1458c:	f7ff bfe2 	b.w	14554 <_add_thread_to_ready_q>
   14590:	4770      	bx	lr
	...

00014594 <_add_timeout>:
{
   14594:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14596:	610b      	str	r3, [r1, #16]
{
   14598:	4604      	mov	r4, r0
   1459a:	461d      	mov	r5, r3
	timeout->thread = thread;
   1459c:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1459e:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   145a0:	bb03      	cbnz	r3, 145e4 <_add_timeout+0x50>
	__asm__ volatile(
   145a2:	f04f 0320 	mov.w	r3, #32
   145a6:	f3ef 8611 	mrs	r6, BASEPRI
   145aa:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   145ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   145b2:	610b      	str	r3, [r1, #16]
	if (thread) {
   145b4:	b170      	cbz	r0, 145d4 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   145b6:	68cb      	ldr	r3, [r1, #12]
   145b8:	b113      	cbz	r3, 145c0 <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   145ba:	f7ff ff4b 	bl	14454 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   145be:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   145c0:	7a63      	ldrb	r3, [r4, #9]
   145c2:	f023 0304 	bic.w	r3, r3, #4
   145c6:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   145c8:	4620      	mov	r0, r4
   145ca:	f7ff ffd9 	bl	14580 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   145ce:	f386 8811 	msr	BASEPRI, r6
   145d2:	bd70      	pop	{r4, r5, r6, pc}
   145d4:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   145d8:	694b      	ldr	r3, [r1, #20]
   145da:	b32b      	cbz	r3, 14628 <_add_timeout+0x94>
			timeout->func(timeout);
   145dc:	4608      	mov	r0, r1
}
   145de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   145e2:	4718      	bx	r3
	return list->head == list;
   145e4:	4a11      	ldr	r2, [pc, #68]	; (1462c <_add_timeout+0x98>)
   145e6:	4610      	mov	r0, r2
   145e8:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   145ec:	4283      	cmp	r3, r0
   145ee:	d10c      	bne.n	1460a <_add_timeout+0x76>
	node->next = list;
   145f0:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   145f2:	6993      	ldr	r3, [r2, #24]
   145f4:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   145f6:	6993      	ldr	r3, [r2, #24]
   145f8:	6019      	str	r1, [r3, #0]
	list->tail = node;
   145fa:	6191      	str	r1, [r2, #24]
   145fc:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   145fe:	1b64      	subs	r4, r4, r5
   14600:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   14602:	6994      	ldr	r4, [r2, #24]
   14604:	42a3      	cmp	r3, r4
   14606:	d0f3      	beq.n	145f0 <_add_timeout+0x5c>
   14608:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   1460a:	2b00      	cmp	r3, #0
   1460c:	d0f0      	beq.n	145f0 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   1460e:	690c      	ldr	r4, [r1, #16]
   14610:	691d      	ldr	r5, [r3, #16]
   14612:	42ac      	cmp	r4, r5
   14614:	dcf3      	bgt.n	145fe <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   14616:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14618:	1b2c      	subs	r4, r5, r4
   1461a:	611c      	str	r4, [r3, #16]
   1461c:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   1461e:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   14620:	685a      	ldr	r2, [r3, #4]
   14622:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   14624:	6059      	str	r1, [r3, #4]
   14626:	bd70      	pop	{r4, r5, r6, pc}
   14628:	bd70      	pop	{r4, r5, r6, pc}
   1462a:	bf00      	nop
   1462c:	20001948 	.word	0x20001948

00014630 <_move_thread_to_end_of_prio_q>:
{
   14630:	b538      	push	{r3, r4, r5, lr}
   14632:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   14634:	f7ff feb4 	bl	143a0 <k_spin_lock.isra.11>
   14638:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   1463a:	4620      	mov	r0, r4
   1463c:	f7ff fe92 	bl	14364 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   14640:	4621      	mov	r1, r4
   14642:	4806      	ldr	r0, [pc, #24]	; (1465c <_move_thread_to_end_of_prio_q+0x2c>)
   14644:	f7ff ff66 	bl	14514 <_priq_dumb_add>
	thread->base.thread_state |= states;
   14648:	7a63      	ldrb	r3, [r4, #9]
   1464a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1464e:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   14650:	2000      	movs	r0, #0
   14652:	f7ff fead 	bl	143b0 <update_cache>
   14656:	f385 8811 	msr	BASEPRI, r5
   1465a:	bd38      	pop	{r3, r4, r5, pc}
   1465c:	2000196c 	.word	0x2000196c

00014660 <pend>:
{
   14660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14662:	4605      	mov	r5, r0
   14664:	4614      	mov	r4, r2
   14666:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   14668:	f7ff fecc 	bl	14404 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1466c:	7a6b      	ldrb	r3, [r5, #9]
   1466e:	f043 0302 	orr.w	r3, r3, #2
   14672:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   14674:	1c63      	adds	r3, r4, #1
   14676:	d012      	beq.n	1469e <pend+0x3e>
	__asm__ volatile(
   14678:	f04f 0320 	mov.w	r3, #32
   1467c:	f3ef 8711 	mrs	r7, BASEPRI
   14680:	f383 8811 	msr	BASEPRI, r3
   14684:	230a      	movs	r3, #10
   14686:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   14688:	4632      	mov	r2, r6
   1468a:	fbb4 f3f3 	udiv	r3, r4, r3
   1468e:	f105 0114 	add.w	r1, r5, #20
   14692:	3301      	adds	r3, #1
   14694:	4628      	mov	r0, r5
   14696:	f7ff ff7d 	bl	14594 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1469a:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   1469e:	b12e      	cbz	r6, 146ac <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   146a0:	4629      	mov	r1, r5
   146a2:	4630      	mov	r0, r6
}
   146a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   146a8:	f7ff bf34 	b.w	14514 <_priq_dumb_add>
   146ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000146b0 <_pend_current_thread>:
{
   146b0:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   146b2:	4b06      	ldr	r3, [pc, #24]	; (146cc <_pend_current_thread+0x1c>)
{
   146b4:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   146b6:	6898      	ldr	r0, [r3, #8]
   146b8:	f7ff ffd2 	bl	14660 <pend>
	_time_slice_elapsed = 0;
   146bc:	4b04      	ldr	r3, [pc, #16]	; (146d0 <_pend_current_thread+0x20>)
   146be:	2200      	movs	r2, #0
   146c0:	4620      	mov	r0, r4
}
   146c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   146c6:	601a      	str	r2, [r3, #0]
   146c8:	f7ec bf20 	b.w	150c <__swap>
   146cc:	20001948 	.word	0x20001948
   146d0:	2000197c 	.word	0x2000197c

000146d4 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   146d4:	4b13      	ldr	r3, [pc, #76]	; (14724 <_is_thread_time_slicing+0x50>)
   146d6:	681b      	ldr	r3, [r3, #0]
   146d8:	2b00      	cmp	r3, #0
{
   146da:	b510      	push	{r4, lr}
   146dc:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   146de:	dd1f      	ble.n	14720 <_is_thread_time_slicing+0x4c>
   146e0:	8943      	ldrh	r3, [r0, #10]
   146e2:	2b7f      	cmp	r3, #127	; 0x7f
   146e4:	d81c      	bhi.n	14720 <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   146e6:	4b10      	ldr	r3, [pc, #64]	; (14728 <_is_thread_time_slicing+0x54>)
   146e8:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   146ec:	681b      	ldr	r3, [r3, #0]
   146ee:	4299      	cmp	r1, r3
   146f0:	db16      	blt.n	14720 <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   146f2:	f7ff fe55 	bl	143a0 <k_spin_lock.isra.11>
	return list->head == list;
   146f6:	490d      	ldr	r1, [pc, #52]	; (1472c <_is_thread_time_slicing+0x58>)
   146f8:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   146fc:	428b      	cmp	r3, r1
   146fe:	4604      	mov	r4, r0
   14700:	d00a      	beq.n	14718 <_is_thread_time_slicing+0x44>
		if (next) {
   14702:	b15b      	cbz	r3, 1471c <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   14704:	f992 000a 	ldrsb.w	r0, [r2, #10]
   14708:	f993 300a 	ldrsb.w	r3, [r3, #10]
   1470c:	1ac3      	subs	r3, r0, r3
   1470e:	4258      	negs	r0, r3
   14710:	4158      	adcs	r0, r3
   14712:	f384 8811 	msr	BASEPRI, r4
	return ret;
   14716:	bd10      	pop	{r4, pc}
   14718:	2000      	movs	r0, #0
   1471a:	e7fa      	b.n	14712 <_is_thread_time_slicing+0x3e>
   1471c:	4618      	mov	r0, r3
   1471e:	e7f8      	b.n	14712 <_is_thread_time_slicing+0x3e>
		return 0;
   14720:	2000      	movs	r0, #0
}
   14722:	bd10      	pop	{r4, pc}
   14724:	20001828 	.word	0x20001828
   14728:	2000182c 	.word	0x2000182c
   1472c:	20001948 	.word	0x20001948

00014730 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   14730:	4b01      	ldr	r3, [pc, #4]	; (14738 <_update_time_slice_before_swap+0x8>)
   14732:	2200      	movs	r2, #0
   14734:	601a      	str	r2, [r3, #0]
   14736:	4770      	bx	lr
   14738:	2000197c 	.word	0x2000197c

0001473c <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   1473c:	b538      	push	{r3, r4, r5, lr}
   1473e:	4605      	mov	r5, r0
	int need_sched = 0;
   14740:	2000      	movs	r0, #0
	return list->head == list;
   14742:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14744:	42a5      	cmp	r5, r4
   14746:	d000      	beq.n	1474a <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   14748:	b904      	cbnz	r4, 1474c <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   1474a:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   1474c:	4620      	mov	r0, r4
   1474e:	f7ff fe9e 	bl	1448e <_unpend_thread>
		_ready_thread(th);
   14752:	4620      	mov	r0, r4
   14754:	f7ff ff14 	bl	14580 <_ready_thread>
		need_sched = 1;
   14758:	2001      	movs	r0, #1
   1475a:	e7f2      	b.n	14742 <_unpend_all+0x6>

0001475c <_sched_init>:
	list->head = (sys_dnode_t *)list;
   1475c:	4b02      	ldr	r3, [pc, #8]	; (14768 <_sched_init+0xc>)
   1475e:	f103 0224 	add.w	r2, r3, #36	; 0x24
   14762:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   14764:	629a      	str	r2, [r3, #40]	; 0x28
   14766:	4770      	bx	lr
   14768:	20001948 	.word	0x20001948

0001476c <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   1476c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   1476e:	4c14      	ldr	r4, [pc, #80]	; (147c0 <_impl_k_yield+0x54>)
   14770:	4b14      	ldr	r3, [pc, #80]	; (147c4 <_impl_k_yield+0x58>)
   14772:	68a2      	ldr	r2, [r4, #8]
   14774:	681b      	ldr	r3, [r3, #0]
   14776:	429a      	cmp	r2, r3
   14778:	d00f      	beq.n	1479a <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   1477a:	f7ff fe11 	bl	143a0 <k_spin_lock.isra.11>
   1477e:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   14780:	68a0      	ldr	r0, [r4, #8]
   14782:	f7ff fdef 	bl	14364 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   14786:	68a1      	ldr	r1, [r4, #8]
   14788:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1478c:	f7ff fec2 	bl	14514 <_priq_dumb_add>
			update_cache(1);
   14790:	2001      	movs	r0, #1
   14792:	f7ff fe0d 	bl	143b0 <update_cache>
   14796:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   1479a:	6a22      	ldr	r2, [r4, #32]
   1479c:	68a3      	ldr	r3, [r4, #8]
   1479e:	429a      	cmp	r2, r3
   147a0:	d00c      	beq.n	147bc <_impl_k_yield+0x50>
	__asm__ volatile(
   147a2:	f04f 0320 	mov.w	r3, #32
   147a6:	f3ef 8011 	mrs	r0, BASEPRI
   147aa:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   147ae:	4b06      	ldr	r3, [pc, #24]	; (147c8 <_impl_k_yield+0x5c>)
   147b0:	2200      	movs	r2, #0
   147b2:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   147b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   147b8:	f7ec bea8 	b.w	150c <__swap>
   147bc:	bd38      	pop	{r3, r4, r5, pc}
   147be:	bf00      	nop
   147c0:	20001948 	.word	0x20001948
   147c4:	00019434 	.word	0x00019434
   147c8:	2000197c 	.word	0x2000197c

000147cc <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   147cc:	4b01      	ldr	r3, [pc, #4]	; (147d4 <_impl_k_current_get+0x8>)
   147ce:	6898      	ldr	r0, [r3, #8]
   147d0:	4770      	bx	lr
   147d2:	bf00      	nop
   147d4:	20001948 	.word	0x20001948

000147d8 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   147d8:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   147dc:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   147de:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   147e0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   147e2:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   147e4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   147e6:	6143      	str	r3, [r0, #20]
   147e8:	4770      	bx	lr

000147ea <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   147ea:	b570      	push	{r4, r5, r6, lr}
   147ec:	4604      	mov	r4, r0
   147ee:	f04f 0320 	mov.w	r3, #32
   147f2:	f3ef 8611 	mrs	r6, BASEPRI
   147f6:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   147fa:	f7ff fe3a 	bl	14472 <_unpend_first_thread>
	if (thread) {
   147fe:	4605      	mov	r5, r0
   14800:	b160      	cbz	r0, 1481c <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   14802:	7a43      	ldrb	r3, [r0, #9]
   14804:	06db      	lsls	r3, r3, #27
   14806:	d102      	bne.n	1480e <_impl_k_sem_give+0x24>
   14808:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1480a:	3301      	adds	r3, #1
   1480c:	d012      	beq.n	14834 <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1480e:	2300      	movs	r3, #0
   14810:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   14812:	4630      	mov	r0, r6
}
   14814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   14818:	f7ff be44 	b.w	144a4 <_reschedule>
	sem->count += (sem->count != sem->limit);
   1481c:	68a3      	ldr	r3, [r4, #8]
   1481e:	68e2      	ldr	r2, [r4, #12]
   14820:	429a      	cmp	r2, r3
   14822:	bf18      	it	ne
   14824:	3301      	addne	r3, #1
   14826:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   14828:	2102      	movs	r1, #2
   1482a:	f104 0010 	add.w	r0, r4, #16
   1482e:	f000 fca1 	bl	15174 <_handle_obj_poll_events>
   14832:	e7ee      	b.n	14812 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   14834:	f7ff fe8e 	bl	14554 <_add_thread_to_ready_q>
   14838:	e7e9      	b.n	1480e <_impl_k_sem_give+0x24>

0001483a <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1483a:	b410      	push	{r4}
   1483c:	460a      	mov	r2, r1
   1483e:	4604      	mov	r4, r0
   14840:	f04f 0320 	mov.w	r3, #32
   14844:	f3ef 8011 	mrs	r0, BASEPRI
   14848:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   1484c:	68a3      	ldr	r3, [r4, #8]
   1484e:	b133      	cbz	r3, 1485e <_impl_k_sem_take+0x24>
		sem->count--;
   14850:	3b01      	subs	r3, #1
   14852:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14854:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   14858:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   1485a:	bc10      	pop	{r4}
   1485c:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1485e:	b921      	cbnz	r1, 1486a <_impl_k_sem_take+0x30>
   14860:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   14864:	f06f 000f 	mvn.w	r0, #15
   14868:	e7f7      	b.n	1485a <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   1486a:	4621      	mov	r1, r4
}
   1486c:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   1486e:	f7ff bf1f 	b.w	146b0 <_pend_current_thread>
	...

00014874 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   14874:	4b03      	ldr	r3, [pc, #12]	; (14884 <_impl_k_uptime_get_32+0x10>)
   14876:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   1487a:	230a      	movs	r3, #10
   1487c:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   14880:	4770      	bx	lr
   14882:	bf00      	nop
   14884:	20001980 	.word	0x20001980

00014888 <_tick_get>:
	__asm__ volatile(
   14888:	f04f 0220 	mov.w	r2, #32
   1488c:	f3ef 8311 	mrs	r3, BASEPRI
   14890:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   14894:	4a02      	ldr	r2, [pc, #8]	; (148a0 <_tick_get+0x18>)
   14896:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1489a:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   1489e:	4770      	bx	lr
   148a0:	20001980 	.word	0x20001980

000148a4 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   148a4:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   148a6:	f7ff ffef 	bl	14888 <_tick_get>
   148aa:	240a      	movs	r4, #10
   148ac:	fba0 2304 	umull	r2, r3, r0, r4
   148b0:	fb04 3301 	mla	r3, r4, r1, r3
}
   148b4:	4610      	mov	r0, r2
   148b6:	4619      	mov	r1, r3
   148b8:	bd10      	pop	{r4, pc}
	...

000148bc <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   148bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148c0:	4607      	mov	r7, r0
   148c2:	b085      	sub	sp, #20
	__asm__ volatile(
   148c4:	f04f 0320 	mov.w	r3, #32
   148c8:	f3ef 8011 	mrs	r0, BASEPRI
   148cc:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   148d0:	4961      	ldr	r1, [pc, #388]	; (14a58 <_nano_sys_clock_tick_announce+0x19c>)
   148d2:	e9d1 4500 	ldrd	r4, r5, [r1]
   148d6:	19e2      	adds	r2, r4, r7
   148d8:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   148dc:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   148e0:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   148e4:	ae02      	add	r6, sp, #8
   148e6:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   148e8:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   148ea:	f04f 0320 	mov.w	r3, #32
   148ee:	f3ef 8011 	mrs	r0, BASEPRI
   148f2:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   148f6:	4c59      	ldr	r4, [pc, #356]	; (14a5c <_nano_sys_clock_tick_announce+0x1a0>)
   148f8:	4621      	mov	r1, r4
   148fa:	4602      	mov	r2, r0
   148fc:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14900:	428b      	cmp	r3, r1
   14902:	d000      	beq.n	14906 <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   14904:	b9fb      	cbnz	r3, 14946 <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14906:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   1490a:	68a0      	ldr	r0, [r4, #8]
   1490c:	f7ff fee2 	bl	146d4 <_is_thread_time_slicing>
   14910:	b1b0      	cbz	r0, 14940 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   14912:	4a53      	ldr	r2, [pc, #332]	; (14a60 <_nano_sys_clock_tick_announce+0x1a4>)
   14914:	6811      	ldr	r1, [r2, #0]
   14916:	230a      	movs	r3, #10
   14918:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   1491c:	4b51      	ldr	r3, [pc, #324]	; (14a64 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   1491e:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   14920:	681b      	ldr	r3, [r3, #0]
   14922:	429f      	cmp	r7, r3
   14924:	db0c      	blt.n	14940 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   14926:	2300      	movs	r3, #0
   14928:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   1492a:	f04f 0320 	mov.w	r3, #32
   1492e:	f3ef 8511 	mrs	r5, BASEPRI
   14932:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   14936:	68a0      	ldr	r0, [r4, #8]
   14938:	f7ff fe7a 	bl	14630 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1493c:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   14940:	b005      	add	sp, #20
   14942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   14946:	4d48      	ldr	r5, [pc, #288]	; (14a68 <_nano_sys_clock_tick_announce+0x1ac>)
   14948:	9501      	str	r5, [sp, #4]
   1494a:	2101      	movs	r1, #1
   1494c:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   1494e:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   14952:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   14954:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   14958:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   1495a:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   1495c:	bfaa      	itet	ge
   1495e:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   14962:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   14966:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   1496a:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1496c:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   1496e:	691d      	ldr	r5, [r3, #16]
   14970:	4298      	cmp	r0, r3
   14972:	bf14      	ite	ne
   14974:	6818      	ldrne	r0, [r3, #0]
   14976:	2000      	moveq	r0, #0
   14978:	b9d5      	cbnz	r5, 149b0 <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   1497a:	e893 0220 	ldmia.w	r3, {r5, r9}
   1497e:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   14982:	681d      	ldr	r5, [r3, #0]
   14984:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   14988:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   1498a:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   1498e:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   14990:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   14992:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   14994:	f8c3 c010 	str.w	ip, [r3, #16]
   14998:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   1499c:	f04f 0320 	mov.w	r3, #32
   149a0:	f3ef 8211 	mrs	r2, BASEPRI
   149a4:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   149a8:	4603      	mov	r3, r0
   149aa:	2800      	cmp	r0, #0
   149ac:	d1d4      	bne.n	14958 <_nano_sys_clock_tick_announce+0x9c>
   149ae:	e001      	b.n	149b4 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   149b0:	2900      	cmp	r1, #0
   149b2:	dcf1      	bgt.n	14998 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   149b4:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   149b8:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   149ba:	42b0      	cmp	r0, r6
   149bc:	d103      	bne.n	149c6 <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   149be:	9a01      	ldr	r2, [sp, #4]
   149c0:	2300      	movs	r3, #0
   149c2:	6013      	str	r3, [r2, #0]
   149c4:	e7a1      	b.n	1490a <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   149c6:	2800      	cmp	r0, #0
   149c8:	d0f9      	beq.n	149be <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   149ca:	9b03      	ldr	r3, [sp, #12]
   149cc:	4298      	cmp	r0, r3
   149ce:	d102      	bne.n	149d6 <_nano_sys_clock_tick_announce+0x11a>
   149d0:	f04f 0b00 	mov.w	fp, #0
   149d4:	e001      	b.n	149da <_nano_sys_clock_tick_announce+0x11e>
   149d6:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   149da:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   149de:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   149e2:	e890 000c 	ldmia.w	r0, {r2, r3}
   149e6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   149e8:	6802      	ldr	r2, [r0, #0]
   149ea:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   149ec:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   149ee:	f04f 0320 	mov.w	r3, #32
   149f2:	f3ef 8811 	mrs	r8, BASEPRI
   149f6:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   149fa:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   149fe:	b1d6      	cbz	r6, 14a36 <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   14a00:	68c3      	ldr	r3, [r0, #12]
   14a02:	b123      	cbz	r3, 14a0e <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   14a04:	4630      	mov	r0, r6
   14a06:	f7ff fd25 	bl	14454 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   14a0a:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14a0e:	7a73      	ldrb	r3, [r6, #9]
   14a10:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   14a14:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14a18:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   14a1a:	d102      	bne.n	14a22 <_nano_sys_clock_tick_announce+0x166>
   14a1c:	6a73      	ldr	r3, [r6, #36]	; 0x24
   14a1e:	3301      	adds	r3, #1
   14a20:	d015      	beq.n	14a4e <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14a22:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   14a26:	f1bb 0f00 	cmp.w	fp, #0
   14a2a:	d0c8      	beq.n	149be <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   14a2c:	9b03      	ldr	r3, [sp, #12]
   14a2e:	455b      	cmp	r3, fp
   14a30:	d108      	bne.n	14a44 <_nano_sys_clock_tick_announce+0x188>
   14a32:	2300      	movs	r3, #0
   14a34:	e008      	b.n	14a48 <_nano_sys_clock_tick_announce+0x18c>
   14a36:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   14a3a:	6943      	ldr	r3, [r0, #20]
   14a3c:	2b00      	cmp	r3, #0
   14a3e:	d0f2      	beq.n	14a26 <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   14a40:	4798      	blx	r3
   14a42:	e7f0      	b.n	14a26 <_nano_sys_clock_tick_announce+0x16a>
   14a44:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   14a48:	4658      	mov	r0, fp
   14a4a:	469b      	mov	fp, r3
   14a4c:	e7c9      	b.n	149e2 <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   14a4e:	4630      	mov	r0, r6
   14a50:	f7ff fd80 	bl	14554 <_add_thread_to_ready_q>
   14a54:	e7e5      	b.n	14a22 <_nano_sys_clock_tick_announce+0x166>
   14a56:	bf00      	nop
   14a58:	20001980 	.word	0x20001980
   14a5c:	20001948 	.word	0x20001948
   14a60:	2000197c 	.word	0x2000197c
   14a64:	20001828 	.word	0x20001828
   14a68:	20001978 	.word	0x20001978

00014a6c <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   14a6c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   14a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14a76:	4903      	ldr	r1, [pc, #12]	; (14a84 <k_sys_work_q_init+0x18>)
   14a78:	4803      	ldr	r0, [pc, #12]	; (14a88 <k_sys_work_q_init+0x1c>)
   14a7a:	f000 f983 	bl	14d84 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   14a7e:	2000      	movs	r0, #0
   14a80:	bd08      	pop	{r3, pc}
   14a82:	bf00      	nop
   14a84:	20003620 	.word	0x20003620
   14a88:	20001988 	.word	0x20001988

00014a8c <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14a8c:	6903      	ldr	r3, [r0, #16]
   14a8e:	1c5a      	adds	r2, r3, #1
   14a90:	d011      	beq.n	14ab6 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14a92:	4a0a      	ldr	r2, [pc, #40]	; (14abc <_abort_timeout+0x30>)
   14a94:	6992      	ldr	r2, [r2, #24]
   14a96:	4290      	cmp	r0, r2
   14a98:	bf1f      	itttt	ne
   14a9a:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14a9c:	690a      	ldrne	r2, [r1, #16]
   14a9e:	189b      	addne	r3, r3, r2
   14aa0:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   14aa2:	e890 000c 	ldmia.w	r0, {r2, r3}
   14aa6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14aa8:	6802      	ldr	r2, [r0, #0]
   14aaa:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   14aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14ab0:	6103      	str	r3, [r0, #16]
	return 0;
   14ab2:	2000      	movs	r0, #0
   14ab4:	4770      	bx	lr
		return _INACTIVE;
   14ab6:	4618      	mov	r0, r3
}
   14ab8:	4770      	bx	lr
   14aba:	bf00      	nop
   14abc:	20001948 	.word	0x20001948

00014ac0 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   14ac0:	7a42      	ldrb	r2, [r0, #9]
   14ac2:	06d2      	lsls	r2, r2, #27
   14ac4:	d104      	bne.n	14ad0 <_ready_thread+0x10>
   14ac6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14ac8:	3301      	adds	r3, #1
   14aca:	d101      	bne.n	14ad0 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   14acc:	f7ff bd42 	b.w	14554 <_add_thread_to_ready_q>
   14ad0:	4770      	bx	lr
	...

00014ad4 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   14ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   14ad6:	f04f 0320 	mov.w	r3, #32
   14ada:	f3ef 8611 	mrs	r6, BASEPRI
   14ade:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   14ae2:	4a19      	ldr	r2, [pc, #100]	; (14b48 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   14ae4:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   14ae6:	230a      	movs	r3, #10
   14ae8:	3109      	adds	r1, #9
   14aea:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   14aee:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14af0:	6241      	str	r1, [r0, #36]	; 0x24
   14af2:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14af4:	2300      	movs	r3, #0
   14af6:	6203      	str	r3, [r0, #32]
   14af8:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14afc:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   14afe:	f100 0514 	add.w	r5, r0, #20
   14b02:	d108      	bne.n	14b16 <schedule_new_thread.part.11+0x42>
	node->next = list;
   14b04:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   14b06:	6993      	ldr	r3, [r2, #24]
   14b08:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   14b0a:	6993      	ldr	r3, [r2, #24]
   14b0c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   14b0e:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14b10:	f386 8811 	msr	BASEPRI, r6
   14b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14b16:	2b00      	cmp	r3, #0
   14b18:	d0f4      	beq.n	14b04 <schedule_new_thread.part.11+0x30>
   14b1a:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   14b1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   14b20:	691f      	ldr	r7, [r3, #16]
   14b22:	42bc      	cmp	r4, r7
   14b24:	dc08      	bgt.n	14b38 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   14b26:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14b28:	1b3c      	subs	r4, r7, r4
   14b2a:	611c      	str	r4, [r3, #16]
   14b2c:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   14b2e:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   14b30:	685a      	ldr	r2, [r3, #4]
   14b32:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   14b34:	605d      	str	r5, [r3, #4]
   14b36:	e7eb      	b.n	14b10 <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   14b38:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   14b3a:	4573      	cmp	r3, lr
   14b3c:	6244      	str	r4, [r0, #36]	; 0x24
   14b3e:	d0e1      	beq.n	14b04 <schedule_new_thread.part.11+0x30>
   14b40:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14b42:	2b00      	cmp	r3, #0
   14b44:	d1eb      	bne.n	14b1e <schedule_new_thread.part.11+0x4a>
   14b46:	e7dd      	b.n	14b04 <schedule_new_thread.part.11+0x30>
   14b48:	20001948 	.word	0x20001948

00014b4c <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   14b4c:	4770      	bx	lr
	...

00014b50 <k_is_in_isr>:
   14b50:	f3ef 8005 	mrs	r0, IPSR
   14b54:	280d      	cmp	r0, #13
   14b56:	d807      	bhi.n	14b68 <k_is_in_isr+0x18>
   14b58:	b138      	cbz	r0, 14b6a <k_is_in_isr+0x1a>
   14b5a:	4b04      	ldr	r3, [pc, #16]	; (14b6c <k_is_in_isr+0x1c>)
   14b5c:	6858      	ldr	r0, [r3, #4]
   14b5e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   14b62:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   14b66:	4770      	bx	lr
   14b68:	2001      	movs	r0, #1
}
   14b6a:	4770      	bx	lr
   14b6c:	e000ed00 	.word	0xe000ed00

00014b70 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   14b70:	4b02      	ldr	r3, [pc, #8]	; (14b7c <_is_thread_essential+0xc>)
   14b72:	689b      	ldr	r3, [r3, #8]
   14b74:	7a18      	ldrb	r0, [r3, #8]
}
   14b76:	f000 0001 	and.w	r0, r0, #1
   14b7a:	4770      	bx	lr
   14b7c:	20001948 	.word	0x20001948

00014b80 <_impl_k_thread_start>:
{
   14b80:	b510      	push	{r4, lr}
	__asm__ volatile(
   14b82:	f04f 0320 	mov.w	r3, #32
   14b86:	f3ef 8411 	mrs	r4, BASEPRI
   14b8a:	f383 8811 	msr	BASEPRI, r3
   14b8e:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   14b90:	0759      	lsls	r1, r3, #29
   14b92:	d402      	bmi.n	14b9a <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14b94:	f384 8811 	msr	BASEPRI, r4
   14b98:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14b9a:	f023 0304 	bic.w	r3, r3, #4
   14b9e:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   14ba0:	f7ff ff8e 	bl	14ac0 <_ready_thread>
	_reschedule(key);
   14ba4:	4620      	mov	r0, r4
}
   14ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   14baa:	f7ff bc7b 	b.w	144a4 <_reschedule>
	...

00014bb0 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   14bb0:	b530      	push	{r4, r5, lr}
   14bb2:	b087      	sub	sp, #28
   14bb4:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14bb6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   14bb8:	9504      	str	r5, [sp, #16]
   14bba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14bbc:	9503      	str	r5, [sp, #12]
   14bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   14bc0:	9502      	str	r5, [sp, #8]
   14bc2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   14bc4:	9501      	str	r5, [sp, #4]
   14bc6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14bc8:	9500      	str	r5, [sp, #0]
   14bca:	f7ec fea1 	bl	1910 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   14bce:	4b04      	ldr	r3, [pc, #16]	; (14be0 <_setup_new_thread+0x30>)
   14bd0:	689b      	ldr	r3, [r3, #8]
   14bd2:	b913      	cbnz	r3, 14bda <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   14bd4:	6663      	str	r3, [r4, #100]	; 0x64
}
   14bd6:	b007      	add	sp, #28
   14bd8:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   14bda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   14bdc:	e7fa      	b.n	14bd4 <_setup_new_thread+0x24>
   14bde:	bf00      	nop
   14be0:	20001948 	.word	0x20001948

00014be4 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   14be4:	b570      	push	{r4, r5, r6, lr}
   14be6:	b086      	sub	sp, #24
   14be8:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14bea:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14bec:	9604      	str	r6, [sp, #16]
   14bee:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   14bf0:	9603      	str	r6, [sp, #12]
   14bf2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14bf4:	9602      	str	r6, [sp, #8]
   14bf6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   14bf8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14bfa:	9601      	str	r6, [sp, #4]
   14bfc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   14bfe:	9600      	str	r6, [sp, #0]
   14c00:	f7ff ffd6 	bl	14bb0 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   14c04:	1c6b      	adds	r3, r5, #1
   14c06:	d003      	beq.n	14c10 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   14c08:	b92d      	cbnz	r5, 14c16 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   14c0a:	4620      	mov	r0, r4
   14c0c:	f7ff ffb8 	bl	14b80 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   14c10:	4620      	mov	r0, r4
   14c12:	b006      	add	sp, #24
   14c14:	bd70      	pop	{r4, r5, r6, pc}
   14c16:	4629      	mov	r1, r5
   14c18:	4620      	mov	r0, r4
   14c1a:	f7ff ff5b 	bl	14ad4 <schedule_new_thread.part.11>
   14c1e:	e7f7      	b.n	14c10 <_impl_k_thread_create+0x2c>

00014c20 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   14c20:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   14c22:	b510      	push	{r4, lr}
   14c24:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   14c26:	b103      	cbz	r3, 14c2a <_k_thread_single_abort+0xa>
		thread->fn_abort();
   14c28:	4798      	blx	r3
   14c2a:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   14c2c:	06da      	lsls	r2, r3, #27
   14c2e:	d106      	bne.n	14c3e <_k_thread_single_abort+0x1e>
   14c30:	6a62      	ldr	r2, [r4, #36]	; 0x24
   14c32:	3201      	adds	r2, #1
   14c34:	d103      	bne.n	14c3e <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   14c36:	4620      	mov	r0, r4
   14c38:	f7ff fbe4 	bl	14404 <_remove_thread_from_ready_q>
   14c3c:	e00b      	b.n	14c56 <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   14c3e:	079b      	lsls	r3, r3, #30
   14c40:	d502      	bpl.n	14c48 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   14c42:	4620      	mov	r0, r4
   14c44:	f7ff fc06 	bl	14454 <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   14c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14c4a:	3301      	adds	r3, #1
   14c4c:	d003      	beq.n	14c56 <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   14c4e:	f104 0014 	add.w	r0, r4, #20
   14c52:	f7ff ff1b 	bl	14a8c <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   14c56:	7a63      	ldrb	r3, [r4, #9]
   14c58:	f043 0308 	orr.w	r3, r3, #8
   14c5c:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   14c5e:	bd10      	pop	{r4, pc}

00014c60 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   14c60:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   14c62:	4f21      	ldr	r7, [pc, #132]	; (14ce8 <_init_static_threads+0x88>)
   14c64:	4d21      	ldr	r5, [pc, #132]	; (14cec <_init_static_threads+0x8c>)
{
   14c66:	b087      	sub	sp, #28
   14c68:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   14c6a:	42bd      	cmp	r5, r7
   14c6c:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   14c70:	d314      	bcc.n	14c9c <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   14c72:	4b1f      	ldr	r3, [pc, #124]	; (14cf0 <_init_static_threads+0x90>)
   14c74:	689a      	ldr	r2, [r3, #8]
   14c76:	7ad3      	ldrb	r3, [r2, #11]
   14c78:	3b01      	subs	r3, #1
   14c7a:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   14c7c:	f04f 0320 	mov.w	r3, #32
   14c80:	f3ef 8511 	mrs	r5, BASEPRI
   14c84:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   14c88:	4c18      	ldr	r4, [pc, #96]	; (14cec <_init_static_threads+0x8c>)
   14c8a:	42b4      	cmp	r4, r6
   14c8c:	d31f      	bcc.n	14cce <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14c8e:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   14c92:	b007      	add	sp, #28
   14c94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   14c98:	f7ff bc22 	b.w	144e0 <k_sched_unlock>
		_setup_new_thread(
   14c9c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   14ca0:	9304      	str	r3, [sp, #16]
   14ca2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   14ca6:	9303      	str	r3, [sp, #12]
   14ca8:	f854 3c14 	ldr.w	r3, [r4, #-20]
   14cac:	9302      	str	r3, [sp, #8]
   14cae:	f854 3c18 	ldr.w	r3, [r4, #-24]
   14cb2:	9301      	str	r3, [sp, #4]
   14cb4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   14cb8:	9300      	str	r3, [sp, #0]
   14cba:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   14cbe:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   14cc0:	f7ff ff76 	bl	14bb0 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   14cc4:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   14cc8:	651d      	str	r5, [r3, #80]	; 0x50
   14cca:	4625      	mov	r5, r4
   14ccc:	e7cd      	b.n	14c6a <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   14cce:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14cd0:	1c4b      	adds	r3, r1, #1
   14cd2:	d003      	beq.n	14cdc <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   14cd4:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   14cd6:	b919      	cbnz	r1, 14ce0 <_init_static_threads+0x80>
   14cd8:	f7ff ff52 	bl	14b80 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   14cdc:	342c      	adds	r4, #44	; 0x2c
   14cde:	e7d4      	b.n	14c8a <_init_static_threads+0x2a>
   14ce0:	f7ff fef8 	bl	14ad4 <schedule_new_thread.part.11>
   14ce4:	e7fa      	b.n	14cdc <_init_static_threads+0x7c>
   14ce6:	bf00      	nop
   14ce8:	20003f04 	.word	0x20003f04
   14cec:	20003f04 	.word	0x20003f04
   14cf0:	20001948 	.word	0x20001948

00014cf4 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   14cf4:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   14cf6:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   14cf8:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   14cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   14cfe:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   14d00:	72c3      	strb	r3, [r0, #11]
   14d02:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   14d04:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   14d06:	61c3      	str	r3, [r0, #28]
	t->func = func;
   14d08:	6283      	str	r3, [r0, #40]	; 0x28
   14d0a:	4770      	bx	lr

00014d0c <k_work_submit_to_queue>:
{
   14d0c:	b500      	push	{lr}
   14d0e:	f101 0308 	add.w	r3, r1, #8
   14d12:	f3bf 8f5b 	dmb	ish
   14d16:	e853 2f00 	ldrex	r2, [r3]
   14d1a:	f042 0e01 	orr.w	lr, r2, #1
   14d1e:	e843 ec00 	strex	ip, lr, [r3]
   14d22:	f1bc 0f00 	cmp.w	ip, #0
   14d26:	d1f6      	bne.n	14d16 <k_work_submit_to_queue+0xa>
   14d28:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   14d2c:	07d3      	lsls	r3, r2, #31
   14d2e:	d403      	bmi.n	14d38 <k_work_submit_to_queue+0x2c>
}
   14d30:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   14d34:	f7ff ba94 	b.w	14260 <k_queue_append>
   14d38:	f85d fb04 	ldr.w	pc, [sp], #4

00014d3c <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   14d3c:	f1a0 010c 	sub.w	r1, r0, #12
   14d40:	6980      	ldr	r0, [r0, #24]
   14d42:	f7ff bfe3 	b.w	14d0c <k_work_submit_to_queue>

00014d46 <work_q_main>:
{
   14d46:	b510      	push	{r4, lr}
   14d48:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   14d4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14d4e:	4620      	mov	r0, r4
   14d50:	f7ff faaa 	bl	142a8 <_impl_k_queue_get>
		if (!work) {
   14d54:	4603      	mov	r3, r0
   14d56:	2800      	cmp	r0, #0
   14d58:	d0f7      	beq.n	14d4a <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14d5a:	3308      	adds	r3, #8
		handler = work->handler;
   14d5c:	6842      	ldr	r2, [r0, #4]
   14d5e:	f3bf 8f5b 	dmb	ish
   14d62:	e853 1f00 	ldrex	r1, [r3]
   14d66:	f021 0e01 	bic.w	lr, r1, #1
   14d6a:	e843 ec00 	strex	ip, lr, [r3]
   14d6e:	f1bc 0f00 	cmp.w	ip, #0
   14d72:	d1f6      	bne.n	14d62 <work_q_main+0x1c>
   14d74:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   14d78:	07cb      	lsls	r3, r1, #31
   14d7a:	d500      	bpl.n	14d7e <work_q_main+0x38>
			handler(work);
   14d7c:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   14d7e:	f7ff fcf5 	bl	1476c <_impl_k_yield>
   14d82:	e7e2      	b.n	14d4a <work_q_main+0x4>

00014d84 <k_work_q_start>:
{
   14d84:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d86:	b087      	sub	sp, #28
   14d88:	4604      	mov	r4, r0
   14d8a:	461f      	mov	r7, r3
   14d8c:	460d      	mov	r5, r1
   14d8e:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   14d90:	f7ff fa5e 	bl	14250 <_impl_k_queue_init>

   14d94:	2000      	movs	r0, #0
   14d96:	9005      	str	r0, [sp, #20]
   14d98:	9004      	str	r0, [sp, #16]
   14d9a:	9002      	str	r0, [sp, #8]
   14d9c:	9001      	str	r0, [sp, #4]
   14d9e:	9703      	str	r7, [sp, #12]
   14da0:	9400      	str	r4, [sp, #0]
   14da2:	4b04      	ldr	r3, [pc, #16]	; (14db4 <k_work_q_start+0x30>)
   14da4:	4632      	mov	r2, r6
   14da6:	4629      	mov	r1, r5
   14da8:	f104 0010 	add.w	r0, r4, #16
   14dac:	f7ff ff1a 	bl	14be4 <_impl_k_thread_create>
}
   14db0:	b007      	add	sp, #28
   14db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14db4:	00014d47 	.word	0x00014d47

00014db8 <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   14db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   14dbc:	2300      	movs	r3, #0
   14dbe:	61c2      	str	r2, [r0, #28]
	t->func = func;
   14dc0:	4a04      	ldr	r2, [pc, #16]	; (14dd4 <k_delayed_work_init+0x1c>)
   14dc2:	6003      	str	r3, [r0, #0]
   14dc4:	6041      	str	r1, [r0, #4]
   14dc6:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   14dc8:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   14dca:	6143      	str	r3, [r0, #20]
	t->func = func;
   14dcc:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   14dce:	6243      	str	r3, [r0, #36]	; 0x24
   14dd0:	4770      	bx	lr
   14dd2:	bf00      	nop
   14dd4:	00014d3d 	.word	0x00014d3d

00014dd8 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   14dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   14dda:	f04f 0320 	mov.w	r3, #32
   14dde:	f3ef 8411 	mrs	r4, BASEPRI
   14de2:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   14de6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14de8:	b923      	cbnz	r3, 14df4 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14dea:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   14dee:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   14df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14df4:	f3bf 8f5b 	dmb	ish
   14df8:	6883      	ldr	r3, [r0, #8]
   14dfa:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   14dfe:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   14e00:	f100 0508 	add.w	r5, r0, #8
   14e04:	d533      	bpl.n	14e6e <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   14e06:	6a42      	ldr	r2, [r0, #36]	; 0x24
   14e08:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   14e0a:	2100      	movs	r1, #0
   14e0c:	2b00      	cmp	r3, #0
   14e0e:	d0ec      	beq.n	14dea <k_delayed_work_cancel+0x12>
   14e10:	4298      	cmp	r0, r3
   14e12:	d127      	bne.n	14e64 <k_delayed_work_cancel+0x8c>
   14e14:	6803      	ldr	r3, [r0, #0]
   14e16:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14e18:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   14e1c:	b9c9      	cbnz	r1, 14e52 <k_delayed_work_cancel+0x7a>
   14e1e:	42b8      	cmp	r0, r7
	list->head = node;
   14e20:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   14e22:	d100      	bne.n	14e26 <k_delayed_work_cancel+0x4e>
	list->tail = node;
   14e24:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14e26:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14e28:	f003 0303 	and.w	r3, r3, #3
   14e2c:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   14e2e:	2300      	movs	r3, #0
   14e30:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14e32:	f3bf 8f5b 	dmb	ish
   14e36:	e855 2f00 	ldrex	r2, [r5]
   14e3a:	f022 0201 	bic.w	r2, r2, #1
   14e3e:	e845 2100 	strex	r1, r2, [r5]
   14e42:	2900      	cmp	r1, #0
   14e44:	d1f7      	bne.n	14e36 <k_delayed_work_cancel+0x5e>
   14e46:	f3bf 8f5b 	dmb	ish
   14e4a:	f384 8811 	msr	BASEPRI, r4
	return 0;
   14e4e:	4618      	mov	r0, r3
   14e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14e52:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14e54:	f006 0603 	and.w	r6, r6, #3
   14e58:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   14e5a:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   14e5c:	600b      	str	r3, [r1, #0]
	list->tail = node;
   14e5e:	bf08      	it	eq
   14e60:	6051      	streq	r1, [r2, #4]
   14e62:	e7e0      	b.n	14e26 <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14e64:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   14e66:	4619      	mov	r1, r3
   14e68:	f026 0303 	bic.w	r3, r6, #3
   14e6c:	e7ce      	b.n	14e0c <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14e6e:	69c1      	ldr	r1, [r0, #28]
   14e70:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   14e72:	f100 020c 	add.w	r2, r0, #12
   14e76:	d0da      	beq.n	14e2e <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14e78:	4b08      	ldr	r3, [pc, #32]	; (14e9c <k_delayed_work_cancel+0xc4>)
   14e7a:	699b      	ldr	r3, [r3, #24]
   14e7c:	429a      	cmp	r2, r3
   14e7e:	bf1f      	itttt	ne
   14e80:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14e82:	6913      	ldrne	r3, [r2, #16]
   14e84:	185b      	addne	r3, r3, r1
   14e86:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   14e88:	6903      	ldr	r3, [r0, #16]
   14e8a:	68c2      	ldr	r2, [r0, #12]
   14e8c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14e8e:	68c2      	ldr	r2, [r0, #12]
   14e90:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   14e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14e96:	61c3      	str	r3, [r0, #28]
   14e98:	e7c9      	b.n	14e2e <k_delayed_work_cancel+0x56>
   14e9a:	bf00      	nop
   14e9c:	20001948 	.word	0x20001948

00014ea0 <k_delayed_work_submit_to_queue>:
{
   14ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ea2:	4607      	mov	r7, r0
   14ea4:	460c      	mov	r4, r1
   14ea6:	4615      	mov	r5, r2
	__asm__ volatile(
   14ea8:	f04f 0320 	mov.w	r3, #32
   14eac:	f3ef 8611 	mrs	r6, BASEPRI
   14eb0:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   14eb4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   14eb6:	b123      	cbz	r3, 14ec2 <k_delayed_work_submit_to_queue+0x22>
   14eb8:	4283      	cmp	r3, r0
   14eba:	d00b      	beq.n	14ed4 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   14ebc:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   14ec0:	e00d      	b.n	14ede <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   14ec2:	b138      	cbz	r0, 14ed4 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   14ec4:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   14ec6:	b96d      	cbnz	r5, 14ee4 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   14ec8:	4621      	mov	r1, r4
   14eca:	4638      	mov	r0, r7
   14ecc:	f7ff ff1e 	bl	14d0c <k_work_submit_to_queue>
	err = 0;
   14ed0:	2000      	movs	r0, #0
   14ed2:	e004      	b.n	14ede <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   14ed4:	4620      	mov	r0, r4
   14ed6:	f7ff ff7f 	bl	14dd8 <k_delayed_work_cancel>
		if (err < 0) {
   14eda:	2800      	cmp	r0, #0
   14edc:	daf2      	bge.n	14ec4 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14ede:	f386 8811 	msr	BASEPRI, r6
}
   14ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   14ee4:	220a      	movs	r2, #10
   14ee6:	3509      	adds	r5, #9
   14ee8:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   14eec:	4a16      	ldr	r2, [pc, #88]	; (14f48 <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   14eee:	2300      	movs	r3, #0
   14ef0:	4611      	mov	r1, r2
   14ef2:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14ef4:	61a3      	str	r3, [r4, #24]
   14ef6:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   14efa:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14efc:	428b      	cmp	r3, r1
   14efe:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14f02:	61e5      	str	r5, [r4, #28]
   14f04:	d106      	bne.n	14f14 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   14f06:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   14f08:	6993      	ldr	r3, [r2, #24]
   14f0a:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   14f0c:	6993      	ldr	r3, [r2, #24]
   14f0e:	601f      	str	r7, [r3, #0]
	list->tail = node;
   14f10:	6197      	str	r7, [r2, #24]
   14f12:	e7dd      	b.n	14ed0 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14f14:	2b00      	cmp	r3, #0
   14f16:	d0f6      	beq.n	14f06 <k_delayed_work_submit_to_queue+0x66>
   14f18:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   14f1c:	69e0      	ldr	r0, [r4, #28]
   14f1e:	691d      	ldr	r5, [r3, #16]
   14f20:	42a8      	cmp	r0, r5
   14f22:	dc08      	bgt.n	14f36 <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   14f24:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14f26:	1a28      	subs	r0, r5, r0
   14f28:	6118      	str	r0, [r3, #16]
   14f2a:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   14f2c:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   14f2e:	685a      	ldr	r2, [r3, #4]
   14f30:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   14f32:	605f      	str	r7, [r3, #4]
   14f34:	e7cc      	b.n	14ed0 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   14f36:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   14f38:	4573      	cmp	r3, lr
   14f3a:	61e0      	str	r0, [r4, #28]
   14f3c:	d0e3      	beq.n	14f06 <k_delayed_work_submit_to_queue+0x66>
   14f3e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14f40:	2b00      	cmp	r3, #0
   14f42:	d1eb      	bne.n	14f1c <k_delayed_work_submit_to_queue+0x7c>
   14f44:	e7df      	b.n	14f06 <k_delayed_work_submit_to_queue+0x66>
   14f46:	bf00      	nop
   14f48:	20001948 	.word	0x20001948

00014f4c <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   14f4c:	2314      	movs	r3, #20
   14f4e:	b530      	push	{r4, r5, lr}
   14f50:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   14f54:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   14f56:	2900      	cmp	r1, #0
   14f58:	da00      	bge.n	14f5c <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   14f5a:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   14f5c:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   14f5e:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   14f60:	f003 030f 	and.w	r3, r3, #15
   14f64:	2b02      	cmp	r3, #2
   14f66:	d003      	beq.n	14f70 <clear_event_registrations+0x24>
   14f68:	2b04      	cmp	r3, #4
   14f6a:	d001      	beq.n	14f70 <clear_event_registrations+0x24>
   14f6c:	2b01      	cmp	r3, #1
   14f6e:	d104      	bne.n	14f7a <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   14f70:	6843      	ldr	r3, [r0, #4]
   14f72:	6805      	ldr	r5, [r0, #0]
   14f74:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   14f76:	6805      	ldr	r5, [r0, #0]
   14f78:	606b      	str	r3, [r5, #4]
   14f7a:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   14f7e:	f04f 0320 	mov.w	r3, #32
   14f82:	f3ef 8211 	mrs	r2, BASEPRI
   14f86:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   14f8a:	3901      	subs	r1, #1
   14f8c:	3814      	subs	r0, #20
   14f8e:	e7e2      	b.n	14f56 <clear_event_registrations+0xa>

00014f90 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   14f90:	6883      	ldr	r3, [r0, #8]
{
   14f92:	b570      	push	{r4, r5, r6, lr}
   14f94:	4605      	mov	r5, r0
   14f96:	460e      	mov	r6, r1
	if (!event->poller) {
   14f98:	b1d3      	cbz	r3, 14fd0 <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   14f9a:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   14f9c:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   14f9e:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   14fa0:	7a63      	ldrb	r3, [r4, #9]
   14fa2:	079a      	lsls	r2, r3, #30
   14fa4:	d514      	bpl.n	14fd0 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   14fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14fa8:	3302      	adds	r3, #2
   14faa:	d01a      	beq.n	14fe2 <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   14fac:	4620      	mov	r0, r4
   14fae:	f7ff fa6e 	bl	1448e <_unpend_thread>
	_set_thread_return_value(thread,
   14fb2:	2e00      	cmp	r6, #0
   14fb4:	bf0c      	ite	eq
   14fb6:	f06f 0303 	mvneq.w	r3, #3
   14fba:	2300      	movne	r3, #0
   14fbc:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   14fbe:	7a63      	ldrb	r3, [r4, #9]
   14fc0:	06db      	lsls	r3, r3, #27
   14fc2:	d105      	bne.n	14fd0 <signal_poll_event+0x40>
   14fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14fc6:	3301      	adds	r3, #1
   14fc8:	d102      	bne.n	14fd0 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   14fca:	4620      	mov	r0, r4
   14fcc:	f7ff fac2 	bl	14554 <_add_thread_to_ready_q>
	event->state |= state;
   14fd0:	7b6b      	ldrb	r3, [r5, #13]
   14fd2:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   14fd6:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   14fda:	2000      	movs	r0, #0
	event->state |= state;
   14fdc:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   14fde:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   14fe0:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   14fe2:	f06f 000a 	mvn.w	r0, #10
}
   14fe6:	bd70      	pop	{r4, r5, r6, pc}

00014fe8 <add_event>:
{
   14fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   14fea:	6803      	ldr	r3, [r0, #0]
   14fec:	4298      	cmp	r0, r3
   14fee:	4604      	mov	r4, r0
   14ff0:	460e      	mov	r6, r1
   14ff2:	4617      	mov	r7, r2
   14ff4:	d106      	bne.n	15004 <add_event+0x1c>
	node->next = list;
   14ff6:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   14ff8:	6863      	ldr	r3, [r4, #4]
   14ffa:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   14ffc:	6863      	ldr	r3, [r4, #4]
   14ffe:	601e      	str	r6, [r3, #0]
	list->tail = node;
   15000:	6066      	str	r6, [r4, #4]
   15002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   15004:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   15006:	2b00      	cmp	r3, #0
   15008:	d0f5      	beq.n	14ff6 <add_event+0xe>
   1500a:	689b      	ldr	r3, [r3, #8]
   1500c:	6811      	ldr	r1, [r2, #0]
   1500e:	6818      	ldr	r0, [r3, #0]
   15010:	f7ff f9ee 	bl	143f0 <_is_t1_higher_prio_than_t2>
   15014:	2800      	cmp	r0, #0
   15016:	d1ee      	bne.n	14ff6 <add_event+0xe>
	return list->head == list;
   15018:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1501a:	42ac      	cmp	r4, r5
   1501c:	d0eb      	beq.n	14ff6 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1501e:	2d00      	cmp	r5, #0
   15020:	d0e9      	beq.n	14ff6 <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   15022:	68ab      	ldr	r3, [r5, #8]
   15024:	6838      	ldr	r0, [r7, #0]
   15026:	6819      	ldr	r1, [r3, #0]
   15028:	f7ff f9e2 	bl	143f0 <_is_t1_higher_prio_than_t2>
   1502c:	b130      	cbz	r0, 1503c <add_event+0x54>
		node->prev = insert_point->prev;
   1502e:	686b      	ldr	r3, [r5, #4]
   15030:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   15032:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   15034:	686b      	ldr	r3, [r5, #4]
   15036:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   15038:	606e      	str	r6, [r5, #4]
   1503a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1503c:	6863      	ldr	r3, [r4, #4]
   1503e:	429d      	cmp	r5, r3
   15040:	d0d9      	beq.n	14ff6 <add_event+0xe>
   15042:	682d      	ldr	r5, [r5, #0]
   15044:	e7eb      	b.n	1501e <add_event+0x36>

00015046 <k_poll_event_init>:
{
   15046:	b530      	push	{r4, r5, lr}
	event->type = type;
   15048:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   1504a:	6103      	str	r3, [r0, #16]
	event->type = type;
   1504c:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   15050:	7b81      	ldrb	r1, [r0, #14]
   15052:	f362 0100 	bfi	r1, r2, #0, #1
   15056:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   15058:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   1505a:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   1505c:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   15060:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   15064:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   15066:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   15068:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   1506a:	bd30      	pop	{r4, r5, pc}

0001506c <_impl_k_poll>:
{
   1506c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   15070:	4b3f      	ldr	r3, [pc, #252]	; (15170 <_impl_k_poll+0x104>)
{
   15072:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   15074:	689b      	ldr	r3, [r3, #8]
   15076:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   15078:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1507a:	2301      	movs	r3, #1
{
   1507c:	4607      	mov	r7, r0
   1507e:	468a      	mov	sl, r1
   15080:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   15082:	9301      	str	r3, [sp, #4]
   15084:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   15086:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   1508a:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   1508c:	4556      	cmp	r6, sl
   1508e:	db10      	blt.n	150b2 <_impl_k_poll+0x46>
   15090:	f04f 0320 	mov.w	r3, #32
   15094:	f3ef 8611 	mrs	r6, BASEPRI
   15098:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   1509c:	9c01      	ldr	r4, [sp, #4]
   1509e:	2c00      	cmp	r4, #0
   150a0:	d13f      	bne.n	15122 <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   150a2:	4632      	mov	r2, r6
   150a4:	4629      	mov	r1, r5
   150a6:	4638      	mov	r0, r7
   150a8:	f7ff ff50 	bl	14f4c <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   150ac:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   150b0:	e040      	b.n	15134 <_impl_k_poll+0xc8>
	__asm__ volatile(
   150b2:	f04f 0320 	mov.w	r3, #32
   150b6:	f3ef 8b11 	mrs	fp, BASEPRI
   150ba:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   150be:	7b62      	ldrb	r2, [r4, #13]
   150c0:	f002 030f 	and.w	r3, r2, #15
   150c4:	2b02      	cmp	r3, #2
   150c6:	d003      	beq.n	150d0 <_impl_k_poll+0x64>
   150c8:	2b04      	cmp	r3, #4
   150ca:	d004      	beq.n	150d6 <_impl_k_poll+0x6a>
   150cc:	2b01      	cmp	r3, #1
   150ce:	d106      	bne.n	150de <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   150d0:	6921      	ldr	r1, [r4, #16]
   150d2:	6889      	ldr	r1, [r1, #8]
   150d4:	e001      	b.n	150da <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   150d6:	6921      	ldr	r1, [r4, #16]
   150d8:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   150da:	2900      	cmp	r1, #0
   150dc:	d13d      	bne.n	1515a <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   150de:	f1b8 0f00 	cmp.w	r8, #0
   150e2:	d014      	beq.n	1510e <_impl_k_poll+0xa2>
   150e4:	9a01      	ldr	r2, [sp, #4]
   150e6:	b192      	cbz	r2, 1510e <_impl_k_poll+0xa2>
	switch (event->type) {
   150e8:	2b02      	cmp	r3, #2
   150ea:	d007      	beq.n	150fc <_impl_k_poll+0x90>
   150ec:	2b04      	cmp	r3, #4
   150ee:	d013      	beq.n	15118 <_impl_k_poll+0xac>
   150f0:	2b01      	cmp	r3, #1
   150f2:	d109      	bne.n	15108 <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   150f4:	466a      	mov	r2, sp
   150f6:	4621      	mov	r1, r4
   150f8:	6920      	ldr	r0, [r4, #16]
   150fa:	e003      	b.n	15104 <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   150fc:	6920      	ldr	r0, [r4, #16]
   150fe:	466a      	mov	r2, sp
   15100:	4621      	mov	r1, r4
   15102:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   15104:	f7ff ff70 	bl	14fe8 <add_event>
	event->poller = poller;
   15108:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   1510c:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1510e:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   15112:	3601      	adds	r6, #1
   15114:	3414      	adds	r4, #20
   15116:	e7b9      	b.n	1508c <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   15118:	6920      	ldr	r0, [r4, #16]
   1511a:	466a      	mov	r2, sp
   1511c:	4621      	mov	r1, r4
   1511e:	3008      	adds	r0, #8
   15120:	e7f0      	b.n	15104 <_impl_k_poll+0x98>
	poller.is_polling = 0;
   15122:	2300      	movs	r3, #0
   15124:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   15126:	f1b8 0f00 	cmp.w	r8, #0
   1512a:	d107      	bne.n	1513c <_impl_k_poll+0xd0>
   1512c:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   15130:	f06f 040a 	mvn.w	r4, #10
}
   15134:	4620      	mov	r0, r4
   15136:	b005      	add	sp, #20
   15138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   1513c:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   1513e:	4642      	mov	r2, r8
   15140:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   15142:	9102      	str	r1, [sp, #8]
   15144:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   15146:	f7ff fab3 	bl	146b0 <_pend_current_thread>
   1514a:	4604      	mov	r4, r0
	__asm__ volatile(
   1514c:	f04f 0320 	mov.w	r3, #32
   15150:	f3ef 8611 	mrs	r6, BASEPRI
   15154:	f383 8811 	msr	BASEPRI, r3
   15158:	e7a3      	b.n	150a2 <_impl_k_poll+0x36>
	event->state |= state;
   1515a:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   1515e:	f363 1207 	bfi	r2, r3, #4, #4
   15162:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   15164:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   15168:	f8cd 9004 	str.w	r9, [sp, #4]
   1516c:	e7cf      	b.n	1510e <_impl_k_poll+0xa2>
   1516e:	bf00      	nop
   15170:	20001948 	.word	0x20001948

00015174 <_handle_obj_poll_events>:
	return list->head == list;
   15174:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   15176:	4298      	cmp	r0, r3
   15178:	d007      	beq.n	1518a <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   1517a:	e893 0005 	ldmia.w	r3, {r0, r2}
   1517e:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   15180:	6818      	ldr	r0, [r3, #0]
   15182:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   15184:	4618      	mov	r0, r3
   15186:	f7ff bf03 	b.w	14f90 <signal_poll_event>
   1518a:	4770      	bx	lr

0001518c <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   1518c:	b538      	push	{r3, r4, r5, lr}
   1518e:	f04f 0320 	mov.w	r3, #32
   15192:	f3ef 8511 	mrs	r5, BASEPRI
   15196:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1519a:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   1519c:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   1519e:	4298      	cmp	r0, r3
	signal->signaled = 1;
   151a0:	f04f 0101 	mov.w	r1, #1
   151a4:	6081      	str	r1, [r0, #8]
   151a6:	d00d      	beq.n	151c4 <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   151a8:	e893 0005 	ldmia.w	r3, {r0, r2}
   151ac:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   151ae:	6818      	ldr	r0, [r3, #0]
   151b0:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   151b2:	4618      	mov	r0, r3
   151b4:	f7ff feec 	bl	14f90 <signal_poll_event>
   151b8:	4604      	mov	r4, r0

	_reschedule(key);
   151ba:	4628      	mov	r0, r5
   151bc:	f7ff f972 	bl	144a4 <_reschedule>
	return rc;
}
   151c0:	4620      	mov	r0, r4
   151c2:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   151c4:	f385 8811 	msr	BASEPRI, r5
		return 0;
   151c8:	2400      	movs	r4, #0
   151ca:	e7f9      	b.n	151c0 <_impl_k_poll_signal+0x34>

000151cc <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   151cc:	4770      	bx	lr
