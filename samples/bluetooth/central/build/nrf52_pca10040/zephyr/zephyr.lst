
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002ce8 	.word	0x20002ce8

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001add 	.word	0x00001add
       8:	00001b31 	.word	0x00001b31
       c:	00001975 	.word	0x00001975
      10:	00001975 	.word	0x00001975
      14:	00001975 	.word	0x00001975
      18:	00001975 	.word	0x00001975
      1c:	00001975 	.word	0x00001975
      20:	00001975 	.word	0x00001975
      24:	00001975 	.word	0x00001975
      28:	00001975 	.word	0x00001975
      2c:	0000157d 	.word	0x0000157d
      30:	00001975 	.word	0x00001975
      34:	00001975 	.word	0x00001975
      38:	00001539 	.word	0x00001539
      3c:	00001975 	.word	0x00001975

00000040 <_irq_vector_table>:
      40:	00001aa1 000119f3 00001aa1 00001aa1     ................
      50:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      60:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      70:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      80:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      90:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      a0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      b0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      c0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      d0:	00001aa1 00001aa1 00001aa1              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001275 00000000 000018ed     ....u...........
      ec:	00000000 000018ed 00000000 000018ed     ................
      fc:	00000000 000018ed 00000000 000018ed     ................
     10c:	00000000 00013a8d 00000000 000018ed     .....:..........
     11c:	00000000 000018ed 00000000 000018ed     ................
     12c:	00000000 000018ed 00000000 000119b9     ................
     13c:	00000000 000018ed 20003eb8 00013d91     .........>. .=..
     14c:	00000000 000018ed 00000000 000018ed     ................
     15c:	00000000 000018ed 00000000 0000139d     ................
     16c:	00000000 000018ed 00000000 000018ed     ................
     17c:	00000000 000018ed 00000000 000018ed     ................
     18c:	00000000 000018ed 00000000 000018ed     ................
     19c:	00000000 000119ed 00000000 000018ed     ................
     1ac:	00000000 000018ed 00000000 000018ed     ................
     1bc:	00000000 000018ed 00000000 000018ed     ................
     1cc:	00000000 000018ed 00000000 000018ed     ................
     1dc:	00000000 000018ed 00000000 000018ed     ................
     1ec:	00000000 000018ed 00000000 000018ed     ................
     1fc:	00000000 000018ed 00000000 000018ed     ................
     20c:	00000000 000018ed                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb14 	bl	1b94 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	00015315 	.word	0x00015315
     5b0:	0001533e 	.word	0x0001533e
     5b4:	0001531c 	.word	0x0001531c
     5b8:	00015323 	.word	0x00015323
     5bc:	0001532d 	.word	0x0001532d
     5c0:	00015337 	.word	0x00015337

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f004 fb64 	bl	4c98 <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f004 fbfd 	bl	4df8 <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	00015361 	.word	0x00015361
     604:	20000000 	.word	0x20000000
     608:	0001537f 	.word	0x0001537f

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f004 fb3d 	bl	4c98 <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f004 f97a 	bl	4928 <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 fd5a 	bl	4100 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	000153aa 	.word	0x000153aa
     664:	000152b8 	.word	0x000152b8
     668:	00000671 	.word	0x00000671
     66c:	000153c8 	.word	0x000153c8

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 fd85 	bl	41a4 <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f004 faf7 	bl	4c9c <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	0001538e 	.word	0x0001538e
     6bc:	000152be 	.word	0x000152be

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 fcac 	bl	4020 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f003 fe1c 	bl	431c <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 fd04 	bl	4100 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	000153eb 	.word	0x000153eb
     70c:	0001540b 	.word	0x0001540b
     710:	20003a28 	.word	0x20003a28
     714:	000152c6 	.word	0x000152c6
     718:	00000671 	.word	0x00000671
     71c:	000153c8 	.word	0x000153c8
     720:	00015422 	.word	0x00015422

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003a5c 	.word	0x20003a5c
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f013 ffba 	bl	1481c <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8d4 	bl	1a54 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003a60 	.word	0x20003a60

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003a60 	.word	0x20003a60

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr
	...

00000fe4 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe4:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fe6:	4c11      	ldr	r4, [pc, #68]	; (102c <sys_rand32_get+0x48>)
     fe8:	f3bf 8f5b 	dmb	ish
     fec:	6820      	ldr	r0, [r4, #0]
     fee:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff2:	b960      	cbnz	r0, 100e <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff4:	480e      	ldr	r0, [pc, #56]	; (1030 <sys_rand32_get+0x4c>)
     ff6:	f012 ff39 	bl	13e6c <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffa:	f3bf 8f5b 	dmb	ish
     ffe:	e854 3f00 	ldrex	r3, [r4]
    1002:	e844 0200 	strex	r2, r0, [r4]
    1006:	2a00      	cmp	r2, #0
    1008:	d1f9      	bne.n	ffe <sys_rand32_get+0x1a>
    100a:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    100e:	6843      	ldr	r3, [r0, #4]
    1010:	2204      	movs	r2, #4
    1012:	681b      	ldr	r3, [r3, #0]
    1014:	eb0d 0102 	add.w	r1, sp, r2
    1018:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101a:	2800      	cmp	r0, #0
    101c:	da02      	bge.n	1024 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    101e:	f000 fa37 	bl	1490 <_timer_cycle_get_32>
    1022:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1024:	9801      	ldr	r0, [sp, #4]
    1026:	b002      	add	sp, #8
    1028:	bd10      	pop	{r4, pc}
    102a:	bf00      	nop
    102c:	20000004 	.word	0x20000004
    1030:	00015450 	.word	0x00015450

00001034 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1034:	280a      	cmp	r0, #10
{
    1036:	b538      	push	{r3, r4, r5, lr}
    1038:	4604      	mov	r4, r0
    103a:	4d07      	ldr	r5, [pc, #28]	; (1058 <console_out+0x24>)
	if ('\n' == c) {
    103c:	d104      	bne.n	1048 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    103e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1040:	6843      	ldr	r3, [r0, #4]
    1042:	210d      	movs	r1, #13
    1044:	685b      	ldr	r3, [r3, #4]
    1046:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1048:	6828      	ldr	r0, [r5, #0]
    104a:	6843      	ldr	r3, [r0, #4]
    104c:	b2e1      	uxtb	r1, r4
    104e:	685b      	ldr	r3, [r3, #4]
    1050:	4798      	blx	r3

	return c;
}
    1052:	4620      	mov	r0, r4
    1054:	bd38      	pop	{r3, r4, r5, pc}
    1056:	bf00      	nop
    1058:	20000008 	.word	0x20000008

0000105c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    105c:	4801      	ldr	r0, [pc, #4]	; (1064 <uart_console_hook_install+0x8>)
    105e:	f7ff be4f 	b.w	d00 <__printk_hook_install>
    1062:	bf00      	nop
    1064:	00001035 	.word	0x00001035

00001068 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1068:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    106a:	4804      	ldr	r0, [pc, #16]	; (107c <uart_console_init+0x14>)
    106c:	f012 fefe 	bl	13e6c <device_get_binding>
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <uart_console_init+0x18>)
    1072:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1074:	f7ff fff2 	bl	105c <uart_console_hook_install>

	return 0;
}
    1078:	2000      	movs	r0, #0
    107a:	bd08      	pop	{r3, pc}
    107c:	0001545a 	.word	0x0001545a
    1080:	20000008 	.word	0x20000008

00001084 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1084:	b510      	push	{r4, lr}
	__asm__ volatile(
    1086:	f04f 0320 	mov.w	r3, #32
    108a:	f3ef 8211 	mrs	r2, BASEPRI
    108e:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1092:	4c11      	ldr	r4, [pc, #68]	; (10d8 <_m16src_stop+0x54>)
    1094:	7823      	ldrb	r3, [r4, #0]
    1096:	b923      	cbnz	r3, 10a2 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1098:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    109c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10a0:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10a2:	3b01      	subs	r3, #1
    10a4:	b2db      	uxtb	r3, r3
    10a6:	7023      	strb	r3, [r4, #0]
    10a8:	b123      	cbz	r3, 10b4 <_m16src_stop+0x30>
    10aa:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10ae:	f06f 000f 	mvn.w	r0, #15
    10b2:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10b4:	4b09      	ldr	r3, [pc, #36]	; (10dc <_m16src_stop+0x58>)
    10b6:	7818      	ldrb	r0, [r3, #0]
    10b8:	2101      	movs	r1, #1
    10ba:	b128      	cbz	r0, 10c8 <_m16src_stop+0x44>
		m16src_ref++;
    10bc:	7021      	strb	r1, [r4, #0]
    10be:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10c2:	f06f 000a 	mvn.w	r0, #10
    10c6:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10c8:	7019      	strb	r1, [r3, #0]
    10ca:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10d2:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10d4:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10d6:	bd10      	pop	{r4, pc}
    10d8:	2000000e 	.word	0x2000000e
    10dc:	2000000d 	.word	0x2000000d

000010e0 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10e0:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10e2:	2200      	movs	r2, #0
    10e4:	4610      	mov	r0, r2
    10e6:	2101      	movs	r1, #1
    10e8:	f000 fbe8 	bl	18bc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10ec:	2000      	movs	r0, #0
    10ee:	f000 fbb3 	bl	1858 <_arch_irq_enable>

	return 0;
}
    10f2:	2000      	movs	r0, #0
    10f4:	bd08      	pop	{r3, pc}
	...

000010f8 <_m16src_start>:
{
    10f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10fa:	f04f 0220 	mov.w	r2, #32
    10fe:	f3ef 8311 	mrs	r3, BASEPRI
    1102:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    1106:	4a25      	ldr	r2, [pc, #148]	; (119c <_m16src_start+0xa4>)
    1108:	7810      	ldrb	r0, [r2, #0]
    110a:	1c44      	adds	r4, r0, #1
    110c:	7014      	strb	r4, [r2, #0]
    110e:	b160      	cbz	r0, 112a <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1110:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1118:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    111c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1120:	bf14      	ite	ne
    1122:	2000      	movne	r0, #0
    1124:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    112a:	4d1d      	ldr	r5, [pc, #116]	; (11a0 <_m16src_start+0xa8>)
    112c:	782f      	ldrb	r7, [r5, #0]
    112e:	b12f      	cbz	r7, 113c <_m16src_start+0x44>
		m16src_ref--;
    1130:	7010      	strb	r0, [r2, #0]
    1132:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    1136:	f06f 000a 	mvn.w	r0, #10
    113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    113c:	2601      	movs	r6, #1
    113e:	702e      	strb	r6, [r5, #0]
    1140:	f383 8811 	msr	BASEPRI, r3
    1144:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1148:	b319      	cbz	r1, 1192 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    114a:	4638      	mov	r0, r7
    114c:	f000 fb94 	bl	1878 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1150:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1154:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1158:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    115c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    115e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1162:	b192      	cbz	r2, 118a <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1164:	2200      	movs	r2, #0
    1166:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116a:	4a0e      	ldr	r2, [pc, #56]	; (11a4 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    116c:	f013 0f01 	tst.w	r3, #1
    1170:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1174:	bf08      	it	eq
    1176:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    117a:	2000      	movs	r0, #0
    117c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1180:	f000 fb6a 	bl	1858 <_arch_irq_enable>
	m16src_grd = 0;
    1184:	2300      	movs	r3, #0
    1186:	702b      	strb	r3, [r5, #0]
    1188:	e7c4      	b.n	1114 <_m16src_start+0x1c>
			__WFE();
    118a:	bf20      	wfe
			__SEV();
    118c:	bf40      	sev
			__WFE();
    118e:	bf20      	wfe
    1190:	e7e5      	b.n	115e <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1192:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1196:	6026      	str	r6, [r4, #0]
    1198:	e7f4      	b.n	1184 <_m16src_start+0x8c>
    119a:	bf00      	nop
    119c:	2000000e 	.word	0x2000000e
    11a0:	2000000d 	.word	0x2000000d
    11a4:	e000e100 	.word	0xe000e100

000011a8 <_k32src_start>:
{
    11a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11aa:	4606      	mov	r6, r0
    11ac:	460c      	mov	r4, r1
	__asm__ volatile(
    11ae:	f04f 0220 	mov.w	r2, #32
    11b2:	f3ef 8311 	mrs	r3, BASEPRI
    11b6:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11ba:	4a2c      	ldr	r2, [pc, #176]	; (126c <_k32src_start+0xc4>)
    11bc:	7815      	ldrb	r5, [r2, #0]
    11be:	b165      	cbz	r5, 11da <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11c0:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11c8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11d0:	bf0c      	ite	eq
    11d2:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11d6:	2000      	movne	r0, #0
    11d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11da:	2701      	movs	r7, #1
    11dc:	7017      	strb	r7, [r2, #0]
    11de:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11e2:	4628      	mov	r0, r5
    11e4:	f000 fb48 	bl	1878 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11ec:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11ee:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11f2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11f6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11fa:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    11fe:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1200:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1204:	b371      	cbz	r1, 1264 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    1206:	0792      	lsls	r2, r2, #30
    1208:	4f19      	ldr	r7, [pc, #100]	; (1270 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    120a:	bf58      	it	pl
    120c:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    120e:	f04f 0100 	mov.w	r1, #0
    1212:	f04f 0501 	mov.w	r5, #1
    1216:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    121a:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    121e:	bf58      	it	pl
    1220:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1224:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1228:	f000 fb16 	bl	1858 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    122c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1230:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1232:	2218      	movs	r2, #24
    1234:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1238:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    123c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1240:	f014 0103 	ands.w	r1, r4, #3
    1244:	d1be      	bne.n	11c4 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1246:	2010      	movs	r0, #16
    1248:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    124c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1250:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1252:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1256:	f7ff ff4f 	bl	10f8 <_m16src_start>
		if (!err) {
    125a:	2800      	cmp	r0, #0
    125c:	d1b2      	bne.n	11c4 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    125e:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1262:	e7af      	b.n	11c4 <_k32src_start+0x1c>
		__WFE();
    1264:	bf20      	wfe
		__SEV();
    1266:	bf40      	sev
		__WFE();
    1268:	bf20      	wfe
    126a:	e7c9      	b.n	1200 <_k32src_start+0x58>
    126c:	2000000c 	.word	0x2000000c
    1270:	e000e100 	.word	0xe000e100

00001274 <_power_clock_isr>:
{
    1274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    127a:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    127c:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1280:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1284:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1288:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    128c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1290:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1294:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1298:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    129c:	f1be 0f00 	cmp.w	lr, #0
    12a0:	d003      	beq.n	12aa <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12a2:	f04f 0e00 	mov.w	lr, #0
    12a6:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12aa:	b127      	cbz	r7, 12b6 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12b0:	2700      	movs	r7, #0
    12b2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12b6:	b13a      	cbz	r2, 12c8 <_power_clock_isr+0x54>
    12b8:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12ba:	bf41      	itttt	mi
    12bc:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12c0:	2201      	movmi	r2, #1
    12c2:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12c6:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12c8:	b120      	cbz	r0, 12d4 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12ce:	2200      	movs	r2, #0
    12d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12d4:	b149      	cbz	r1, 12ea <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12da:	2100      	movs	r1, #0
    12dc:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12e0:	4628      	mov	r0, r5
    12e2:	f7ff fecf 	bl	1084 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12e6:	2301      	movs	r3, #1
    12e8:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12ea:	b176      	cbz	r6, 130a <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f0:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f2:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12f8:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fa:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    12fe:	f7ff fefb 	bl	10f8 <_m16src_start>
		if (!err) {
    1302:	b910      	cbnz	r0, 130a <_power_clock_isr+0x96>
    1304:	4b01      	ldr	r3, [pc, #4]	; (130c <_power_clock_isr+0x98>)
    1306:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130c:	e000e100 	.word	0xe000e100

00001310 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1310:	4b08      	ldr	r3, [pc, #32]	; (1334 <rtc_compare_set+0x24>)
    1312:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1316:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    131a:	1ac0      	subs	r0, r0, r3
    131c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1320:	4b05      	ldr	r3, [pc, #20]	; (1338 <rtc_compare_set+0x28>)
    1322:	3802      	subs	r0, #2
    1324:	4298      	cmp	r0, r3
    1326:	bf82      	ittt	hi
    1328:	4b04      	ldrhi	r3, [pc, #16]	; (133c <rtc_compare_set+0x2c>)
    132a:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    132e:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1332:	4770      	bx	lr
    1334:	40011000 	.word	0x40011000
    1338:	007ffffd 	.word	0x007ffffd
    133c:	e000e100 	.word	0xe000e100

00001340 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1340:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1342:	4b11      	ldr	r3, [pc, #68]	; (1388 <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1344:	4c11      	ldr	r4, [pc, #68]	; (138c <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    1346:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134a:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    134c:	4d10      	ldr	r5, [pc, #64]	; (1390 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134e:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1350:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1352:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1356:	4298      	cmp	r0, r3
    1358:	d30f      	bcc.n	137a <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    135a:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    135e:	490d      	ldr	r1, [pc, #52]	; (1394 <rtc_announce_set_next+0x54>)
    1360:	6809      	ldr	r1, [r1, #0]
    1362:	4288      	cmp	r0, r1
    1364:	bf28      	it	cs
    1366:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1368:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    136c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1370:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1372:	4b09      	ldr	r3, [pc, #36]	; (1398 <rtc_announce_set_next+0x58>)
    1374:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1376:	f013 fac9 	bl	1490c <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    137a:	6820      	ldr	r0, [r4, #0]
    137c:	682b      	ldr	r3, [r5, #0]
    137e:	4418      	add	r0, r3
}
    1380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1384:	f7ff bfc4 	b.w	1310 <rtc_compare_set>
    1388:	40011000 	.word	0x40011000
    138c:	20000014 	.word	0x20000014
    1390:	20003e78 	.word	0x20003e78
    1394:	20000010 	.word	0x20000010
    1398:	20003e74 	.word	0x20003e74

0000139c <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <rtc1_nrf5_isr+0xc>)
    139e:	2200      	movs	r2, #0
    13a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13a4:	f7ff bfcc 	b.w	1340 <rtc_announce_set_next>
    13a8:	40011000 	.word	0x40011000

000013ac <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13ac:	1e03      	subs	r3, r0, #0
    13ae:	4a0a      	ldr	r2, [pc, #40]	; (13d8 <_timer_idle_enter+0x2c>)
    13b0:	480a      	ldr	r0, [pc, #40]	; (13dc <_timer_idle_enter+0x30>)
    13b2:	db04      	blt.n	13be <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13b4:	6811      	ldr	r1, [r2, #0]
    13b6:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13ba:	428b      	cmp	r3, r1
    13bc:	dd02      	ble.n	13c4 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13be:	6813      	ldr	r3, [r2, #0]
    13c0:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13c4:	6810      	ldr	r0, [r2, #0]
    13c6:	4a06      	ldr	r2, [pc, #24]	; (13e0 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13c8:	4906      	ldr	r1, [pc, #24]	; (13e4 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ca:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13cc:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ce:	fb00 2003 	mla	r0, r0, r3, r2
    13d2:	f7ff bf9d 	b.w	1310 <rtc_compare_set>
    13d6:	bf00      	nop
    13d8:	20003e78 	.word	0x20003e78
    13dc:	007fffff 	.word	0x007fffff
    13e0:	20000014 	.word	0x20000014
    13e4:	20000010 	.word	0x20000010

000013e8 <_timer_idle_exit>:
{
    13e8:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13ea:	4b07      	ldr	r3, [pc, #28]	; (1408 <_timer_idle_exit+0x20>)
    13ec:	2200      	movs	r2, #0
    13ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f2:	4b06      	ldr	r3, [pc, #24]	; (140c <_timer_idle_exit+0x24>)
    13f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    13fc:	f7ff ffa0 	bl	1340 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1400:	4b03      	ldr	r3, [pc, #12]	; (1410 <_timer_idle_exit+0x28>)
    1402:	2201      	movs	r2, #1
    1404:	601a      	str	r2, [r3, #0]
    1406:	bd08      	pop	{r3, pc}
    1408:	40011000 	.word	0x40011000
    140c:	e000e100 	.word	0xe000e100
    1410:	20000010 	.word	0x20000010

00001414 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1414:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1416:	4818      	ldr	r0, [pc, #96]	; (1478 <_sys_clock_driver_init+0x64>)
    1418:	f012 fd28 	bl	13e6c <device_get_binding>
	if (!clock) {
    141c:	b348      	cbz	r0, 1472 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    141e:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1420:	4d16      	ldr	r5, [pc, #88]	; (147c <_sys_clock_driver_init+0x68>)
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	2101      	movs	r1, #1
    1426:	4798      	blx	r3
	rtc_past = 0;
    1428:	4b15      	ldr	r3, [pc, #84]	; (1480 <_sys_clock_driver_init+0x6c>)
    142a:	2400      	movs	r4, #0
    142c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    142e:	4b15      	ldr	r3, [pc, #84]	; (1484 <_sys_clock_driver_init+0x70>)
    1430:	2601      	movs	r6, #1
    1432:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1434:	4b14      	ldr	r3, [pc, #80]	; (1488 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    1436:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1444:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1448:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    144c:	4b0f      	ldr	r3, [pc, #60]	; (148c <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    144e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1456:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    145a:	4631      	mov	r1, r6
    145c:	4622      	mov	r2, r4
    145e:	2011      	movs	r0, #17
    1460:	f000 fa2c 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1464:	2011      	movs	r0, #17
    1466:	f000 f9f7 	bl	1858 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    146a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    146c:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    146e:	602e      	str	r6, [r5, #0]
	return 0;
    1470:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1476:	bd70      	pop	{r4, r5, r6, pc}
    1478:	0001547c 	.word	0x0001547c
    147c:	40011000 	.word	0x40011000
    1480:	20000014 	.word	0x20000014
    1484:	20000010 	.word	0x20000010
    1488:	20003e78 	.word	0x20003e78
    148c:	e000e100 	.word	0xe000e100

00001490 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1490:	4a0a      	ldr	r2, [pc, #40]	; (14bc <_timer_cycle_get_32+0x2c>)
{
    1492:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1494:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1498:	4d09      	ldr	r5, [pc, #36]	; (14c0 <_timer_cycle_get_32+0x30>)
    149a:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    149e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14a2:	42a3      	cmp	r3, r4
    14a4:	d107      	bne.n	14b6 <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14a6:	4a07      	ldr	r2, [pc, #28]	; (14c4 <_timer_cycle_get_32+0x34>)
    14a8:	6812      	ldr	r2, [r2, #0]
    14aa:	4350      	muls	r0, r2
    14ac:	1a1b      	subs	r3, r3, r0
    14ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14b2:	4418      	add	r0, r3
    14b4:	bd30      	pop	{r4, r5, pc}
    14b6:	4623      	mov	r3, r4
    14b8:	e7ef      	b.n	149a <_timer_cycle_get_32+0xa>
    14ba:	bf00      	nop
    14bc:	40011000 	.word	0x40011000
    14c0:	20001988 	.word	0x20001988
    14c4:	20003e78 	.word	0x20003e78

000014c8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14c8:	4807      	ldr	r0, [pc, #28]	; (14e8 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14ca:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14cc:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14ce:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14d0:	d008      	beq.n	14e4 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14d2:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14d4:	f013 f954 	bl	14780 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14d8:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14dc:	4903      	ldr	r1, [pc, #12]	; (14ec <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    14de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14e2:	600a      	str	r2, [r1, #0]

000014e4 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14e4:	4770      	bx	lr
    14e6:	0000      	.short	0x0000
    ldr r0, =_kernel
    14e8:	20001950 	.word	0x20001950
    ldr r1, =_SCS_ICSR
    14ec:	e000ed04 	.word	0xe000ed04

000014f0 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f0:	4804      	ldr	r0, [pc, #16]	; (1504 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    14f2:	2300      	movs	r3, #0
    14f4:	2120      	movs	r1, #32
    14f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    14f8:	3301      	adds	r3, #1
    14fa:	2b27      	cmp	r3, #39	; 0x27
    14fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1500:	d1f9      	bne.n	14f6 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1502:	4770      	bx	lr
    1504:	e000e100 	.word	0xe000e100

00001508 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1508:	4a08      	ldr	r2, [pc, #32]	; (152c <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    150a:	4909      	ldr	r1, [pc, #36]	; (1530 <__swap+0x28>)
	_current->arch.basepri = key;
    150c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    150e:	6809      	ldr	r1, [r1, #0]
    1510:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1512:	4908      	ldr	r1, [pc, #32]	; (1534 <__swap+0x2c>)
	_current->arch.basepri = key;
    1514:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1516:	684b      	ldr	r3, [r1, #4]
    1518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    151c:	604b      	str	r3, [r1, #4]
    151e:	2300      	movs	r3, #0
    1520:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1524:	6893      	ldr	r3, [r2, #8]
}
    1526:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1528:	4770      	bx	lr
    152a:	bf00      	nop
    152c:	20001950 	.word	0x20001950
    1530:	000196d8 	.word	0x000196d8
    1534:	e000ed00 	.word	0xe000ed00

00001538 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1538:	2020      	movs	r0, #32
    msr BASEPRI, r0
    153a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    153e:	490d      	ldr	r1, [pc, #52]	; (1574 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1540:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1542:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1544:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1546:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    154a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    154e:	4f0a      	ldr	r7, [pc, #40]	; (1578 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1550:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1554:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1556:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1558:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    155a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    155c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    155e:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1560:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1564:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1568:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    156c:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    1570:	4770      	bx	lr
    1572:	0000      	.short	0x0000
    ldr r1, =_kernel
    1574:	20001950 	.word	0x20001950
    ldr v4, =_SCS_ICSR
    1578:	e000ed04 	.word	0xe000ed04

0000157c <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    157c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1580:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1582:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1586:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    158a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    158c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1590:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    1594:	2902      	cmp	r1, #2
    beq _oops
    1596:	d0ff      	beq.n	1598 <_oops>

00001598 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    1598:	b500      	push	{lr}
    blx _do_kernel_oops
    159a:	f000 fa2b 	bl	19f4 <_do_kernel_oops>
    pop {pc}
    159e:	bd00      	pop	{pc}

000015a0 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15a0:	b510      	push	{r4, lr}
    15a2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15a4:	f013 f93a 	bl	1481c <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15a8:	6822      	ldr	r2, [r4, #0]
    15aa:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15b0:	4801      	ldr	r0, [pc, #4]	; (15b8 <_FaultThreadShow.isra.2+0x18>)
    15b2:	f7ff bceb 	b.w	f8c <printk>
    15b6:	bf00      	nop
    15b8:	000155d5 	.word	0x000155d5

000015bc <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15bc:	b538      	push	{r3, r4, r5, lr}
    15be:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15c0:	481a      	ldr	r0, [pc, #104]	; (162c <_MpuFault+0x70>)
{
    15c2:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15c4:	f7ff fce2 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15c8:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15cc:	4c18      	ldr	r4, [pc, #96]	; (1630 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15ce:	f7ff ffe7 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15d4:	06d9      	lsls	r1, r3, #27
    15d6:	d502      	bpl.n	15de <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15d8:	4816      	ldr	r0, [pc, #88]	; (1634 <_MpuFault+0x78>)
    15da:	f7ff fcd7 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e0:	071a      	lsls	r2, r3, #28
    15e2:	d502      	bpl.n	15ea <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15e4:	4814      	ldr	r0, [pc, #80]	; (1638 <_MpuFault+0x7c>)
    15e6:	f7ff fcd1 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    15ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15ec:	079b      	lsls	r3, r3, #30
    15ee:	d50e      	bpl.n	160e <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    15f0:	4812      	ldr	r0, [pc, #72]	; (163c <_MpuFault+0x80>)
    15f2:	f7ff fccb 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    15f6:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    15f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fa:	0618      	lsls	r0, r3, #24
    15fc:	d507      	bpl.n	160e <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    15fe:	4810      	ldr	r0, [pc, #64]	; (1640 <_MpuFault+0x84>)
    1600:	f7ff fcc4 	bl	f8c <printk>
			if (fromHardFault) {
    1604:	b11d      	cbz	r5, 160e <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    160c:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    160e:	4c08      	ldr	r4, [pc, #32]	; (1630 <_MpuFault+0x74>)
    1610:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1612:	07d2      	lsls	r2, r2, #31
    1614:	d502      	bpl.n	161c <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    1616:	480b      	ldr	r0, [pc, #44]	; (1644 <_MpuFault+0x88>)
    1618:	f7ff fcb8 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    161c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    161e:	069b      	lsls	r3, r3, #26
    1620:	d502      	bpl.n	1628 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1622:	4809      	ldr	r0, [pc, #36]	; (1648 <_MpuFault+0x8c>)
    1624:	f7ff fcb2 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1628:	2000      	movs	r0, #0
    162a:	bd38      	pop	{r3, r4, r5, pc}
    162c:	0001561f 	.word	0x0001561f
    1630:	e000ed00 	.word	0xe000ed00
    1634:	00015636 	.word	0x00015636
    1638:	00015648 	.word	0x00015648
    163c:	0001565c 	.word	0x0001565c
    1640:	00015675 	.word	0x00015675
    1644:	00015686 	.word	0x00015686
    1648:	000156a6 	.word	0x000156a6

0000164c <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    164c:	b510      	push	{r4, lr}
    164e:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1650:	481a      	ldr	r0, [pc, #104]	; (16bc <_UsageFault+0x70>)
    1652:	f7ff fc9b 	bl	f8c <printk>

	_FaultThreadShow(esf);
    1656:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    165a:	4c19      	ldr	r4, [pc, #100]	; (16c0 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    165c:	f7ff ffa0 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1660:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1662:	019a      	lsls	r2, r3, #6
    1664:	d502      	bpl.n	166c <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    1666:	4817      	ldr	r0, [pc, #92]	; (16c4 <_UsageFault+0x78>)
    1668:	f7ff fc90 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    166e:	01db      	lsls	r3, r3, #7
    1670:	d502      	bpl.n	1678 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    1672:	4815      	ldr	r0, [pc, #84]	; (16c8 <_UsageFault+0x7c>)
    1674:	f7ff fc8a 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167a:	0318      	lsls	r0, r3, #12
    167c:	d502      	bpl.n	1684 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    167e:	4813      	ldr	r0, [pc, #76]	; (16cc <_UsageFault+0x80>)
    1680:	f7ff fc84 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1684:	4c0e      	ldr	r4, [pc, #56]	; (16c0 <_UsageFault+0x74>)
    1686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1688:	0359      	lsls	r1, r3, #13
    168a:	d502      	bpl.n	1692 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    168c:	4810      	ldr	r0, [pc, #64]	; (16d0 <_UsageFault+0x84>)
    168e:	f7ff fc7d 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1694:	039a      	lsls	r2, r3, #14
    1696:	d502      	bpl.n	169e <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    1698:	480e      	ldr	r0, [pc, #56]	; (16d4 <_UsageFault+0x88>)
    169a:	f7ff fc77 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    169e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a0:	03db      	lsls	r3, r3, #15
    16a2:	d502      	bpl.n	16aa <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16a4:	480c      	ldr	r0, [pc, #48]	; (16d8 <_UsageFault+0x8c>)
    16a6:	f7ff fc71 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16aa:	4a05      	ldr	r2, [pc, #20]	; (16c0 <_UsageFault+0x74>)
    16ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16ae:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16b2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16b6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16b8:	2000      	movs	r0, #0
    16ba:	bd10      	pop	{r4, pc}
    16bc:	000156d6 	.word	0x000156d6
    16c0:	e000ed00 	.word	0xe000ed00
    16c4:	000156ef 	.word	0x000156ef
    16c8:	00015703 	.word	0x00015703
    16cc:	0001571e 	.word	0x0001571e
    16d0:	0001573d 	.word	0x0001573d
    16d4:	00015763 	.word	0x00015763
    16d8:	0001577e 	.word	0x0001577e

000016dc <_BusFault>:
{
    16dc:	b538      	push	{r3, r4, r5, lr}
    16de:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16e0:	481d      	ldr	r0, [pc, #116]	; (1758 <_BusFault+0x7c>)
{
    16e2:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16e4:	f7ff fc52 	bl	f8c <printk>
	_FaultThreadShow(esf);
    16e8:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16ec:	4c1b      	ldr	r4, [pc, #108]	; (175c <_BusFault+0x80>)
	_FaultThreadShow(esf);
    16ee:	f7ff ff57 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16f4:	04d8      	lsls	r0, r3, #19
    16f6:	d504      	bpl.n	1702 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    16f8:	4819      	ldr	r0, [pc, #100]	; (1760 <_BusFault+0x84>)
}
    16fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    16fe:	f7ff bc45 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1702:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1704:	0519      	lsls	r1, r3, #20
    1706:	d501      	bpl.n	170c <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1708:	4816      	ldr	r0, [pc, #88]	; (1764 <_BusFault+0x88>)
    170a:	e7f6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    170c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    170e:	059a      	lsls	r2, r3, #22
    1710:	d514      	bpl.n	173c <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    1712:	4815      	ldr	r0, [pc, #84]	; (1768 <_BusFault+0x8c>)
    1714:	f7ff fc3a 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1718:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    171a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171c:	041b      	lsls	r3, r3, #16
    171e:	d507      	bpl.n	1730 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1720:	4812      	ldr	r0, [pc, #72]	; (176c <_BusFault+0x90>)
    1722:	f7ff fc33 	bl	f8c <printk>
			if (fromHardFault) {
    1726:	b11d      	cbz	r5, 1730 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    172a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    172e:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1730:	4b0a      	ldr	r3, [pc, #40]	; (175c <_BusFault+0x80>)
    1732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1734:	0558      	lsls	r0, r3, #21
    1736:	d50e      	bpl.n	1756 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1738:	480d      	ldr	r0, [pc, #52]	; (1770 <_BusFault+0x94>)
    173a:	e7de      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    173c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    173e:	0559      	lsls	r1, r3, #21
    1740:	d4fa      	bmi.n	1738 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1744:	05da      	lsls	r2, r3, #23
    1746:	d501      	bpl.n	174c <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1748:	480a      	ldr	r0, [pc, #40]	; (1774 <_BusFault+0x98>)
    174a:	e7d6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    174c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    174e:	049b      	lsls	r3, r3, #18
    1750:	d501      	bpl.n	1756 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1752:	4809      	ldr	r0, [pc, #36]	; (1778 <_BusFault+0x9c>)
    1754:	e7d1      	b.n	16fa <_BusFault+0x1e>
    1756:	bd38      	pop	{r3, r4, r5, pc}
    1758:	0001549c 	.word	0x0001549c
    175c:	e000ed00 	.word	0xe000ed00
    1760:	00015636 	.word	0x00015636
    1764:	00015648 	.word	0x00015648
    1768:	000154b3 	.word	0x000154b3
    176c:	00015675 	.word	0x00015675
    1770:	000154cd 	.word	0x000154cd
    1774:	000154e9 	.word	0x000154e9
    1778:	000156a6 	.word	0x000156a6

0000177c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    177c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    177e:	4c27      	ldr	r4, [pc, #156]	; (181c <_Fault+0xa0>)
    1780:	6863      	ldr	r3, [r4, #4]
    1782:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1786:	1eda      	subs	r2, r3, #3
{
    1788:	4605      	mov	r5, r0
	switch (fault) {
    178a:	2a09      	cmp	r2, #9
    178c:	d83b      	bhi.n	1806 <_Fault+0x8a>
    178e:	e8df f002 	tbb	[pc, r2]
    1792:	3405      	.short	0x3405
    1794:	3a3a3036 	.word	0x3a3a3036
    1798:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    179c:	4820      	ldr	r0, [pc, #128]	; (1820 <_Fault+0xa4>)
    179e:	f7ff fbf5 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17a4:	079a      	lsls	r2, r3, #30
    17a6:	d503      	bpl.n	17b0 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17a8:	481e      	ldr	r0, [pc, #120]	; (1824 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17aa:	f7ff fbef 	bl	f8c <printk>
    17ae:	e002      	b.n	17b6 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17b2:	005b      	lsls	r3, r3, #1
    17b4:	d401      	bmi.n	17ba <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17b6:	2000      	movs	r0, #0
    17b8:	e009      	b.n	17ce <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17ba:	481b      	ldr	r0, [pc, #108]	; (1828 <_Fault+0xac>)
    17bc:	f7ff fbe6 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17c0:	4b1a      	ldr	r3, [pc, #104]	; (182c <_Fault+0xb0>)
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	b143      	cbz	r3, 17d8 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17c6:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17c8:	4628      	mov	r0, r5
    17ca:	f7ff fef7 	bl	15bc <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17ce:	4629      	mov	r1, r5
}
    17d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17d4:	f000 b912 	b.w	19fc <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17d8:	4b15      	ldr	r3, [pc, #84]	; (1830 <_Fault+0xb4>)
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	b123      	cbz	r3, 17e8 <_Fault+0x6c>
			_BusFault(esf, 1);
    17de:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17e0:	4628      	mov	r0, r5
    17e2:	f7ff ff7b 	bl	16dc <_BusFault>
    17e6:	e7e6      	b.n	17b6 <_Fault+0x3a>
		} else if (SCB_UFSR) {
    17e8:	4b12      	ldr	r3, [pc, #72]	; (1834 <_Fault+0xb8>)
    17ea:	881b      	ldrh	r3, [r3, #0]
    17ec:	b29b      	uxth	r3, r3
    17ee:	2b00      	cmp	r3, #0
    17f0:	d0e1      	beq.n	17b6 <_Fault+0x3a>
		reason = _UsageFault(esf);
    17f2:	4628      	mov	r0, r5
    17f4:	f7ff ff2a 	bl	164c <_UsageFault>
    17f8:	e7e9      	b.n	17ce <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    17fa:	2100      	movs	r1, #0
    17fc:	e7e4      	b.n	17c8 <_Fault+0x4c>
		_BusFault(esf, 0);
    17fe:	2100      	movs	r1, #0
    1800:	e7ee      	b.n	17e0 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1802:	480d      	ldr	r0, [pc, #52]	; (1838 <_Fault+0xbc>)
    1804:	e7d1      	b.n	17aa <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    1806:	480d      	ldr	r0, [pc, #52]	; (183c <_Fault+0xc0>)
    1808:	490d      	ldr	r1, [pc, #52]	; (1840 <_Fault+0xc4>)
    180a:	f1a3 0210 	sub.w	r2, r3, #16
    180e:	2b0f      	cmp	r3, #15
    1810:	bfd8      	it	le
    1812:	4601      	movle	r1, r0
    1814:	480b      	ldr	r0, [pc, #44]	; (1844 <_Fault+0xc8>)
    1816:	f7ff fbb9 	bl	f8c <printk>
    181a:	e7cc      	b.n	17b6 <_Fault+0x3a>
    181c:	e000ed00 	.word	0xe000ed00
    1820:	00015530 	.word	0x00015530
    1824:	00015548 	.word	0x00015548
    1828:	0001556a 	.word	0x0001556a
    182c:	e000ed28 	.word	0xe000ed28
    1830:	e000ed29 	.word	0xe000ed29
    1834:	e000ed2a 	.word	0xe000ed2a
    1838:	0001558a 	.word	0x0001558a
    183c:	00015502 	.word	0x00015502
    1840:	00015517 	.word	0x00015517
    1844:	000155c1 	.word	0x000155c1

00001848 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1848:	4a02      	ldr	r2, [pc, #8]	; (1854 <_FaultInit+0xc>)
    184a:	6953      	ldr	r3, [r2, #20]
    184c:	f043 0310 	orr.w	r3, r3, #16
    1850:	6153      	str	r3, [r2, #20]
    1852:	4770      	bx	lr
    1854:	e000ed00 	.word	0xe000ed00

00001858 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1858:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    185a:	2b00      	cmp	r3, #0
    185c:	db08      	blt.n	1870 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    185e:	2201      	movs	r2, #1
    1860:	f000 001f 	and.w	r0, r0, #31
    1864:	fa02 f000 	lsl.w	r0, r2, r0
    1868:	095b      	lsrs	r3, r3, #5
    186a:	4a02      	ldr	r2, [pc, #8]	; (1874 <_arch_irq_enable+0x1c>)
    186c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1870:	4770      	bx	lr
    1872:	bf00      	nop
    1874:	e000e100 	.word	0xe000e100

00001878 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1878:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    187a:	2b00      	cmp	r3, #0
    187c:	db0d      	blt.n	189a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    187e:	2201      	movs	r2, #1
    1880:	095b      	lsrs	r3, r3, #5
    1882:	f000 001f 	and.w	r0, r0, #31
    1886:	fa02 f000 	lsl.w	r0, r2, r0
    188a:	3320      	adds	r3, #32
    188c:	4a03      	ldr	r2, [pc, #12]	; (189c <_arch_irq_disable+0x24>)
    188e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1892:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1896:	f3bf 8f6f 	isb	sy
    189a:	4770      	bx	lr
    189c:	e000e100 	.word	0xe000e100

000018a0 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18a0:	0942      	lsrs	r2, r0, #5
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <_arch_irq_is_enabled+0x18>)
    18a4:	f000 001f 	and.w	r0, r0, #31
    18a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18ac:	2301      	movs	r3, #1
    18ae:	fa03 f000 	lsl.w	r0, r3, r0
}
    18b2:	4010      	ands	r0, r2
    18b4:	4770      	bx	lr
    18b6:	bf00      	nop
    18b8:	e000e100 	.word	0xe000e100

000018bc <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18bc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18be:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18c0:	bfa8      	it	ge
    18c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18c6:	f101 0101 	add.w	r1, r1, #1
    18ca:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18ce:	bfad      	iteet	ge
    18d0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d4:	f000 000f 	andlt.w	r0, r0, #15
    18d8:	4b03      	ldrlt	r3, [pc, #12]	; (18e8 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18da:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18dc:	bfb6      	itet	lt
    18de:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e4:	5419      	strblt	r1, [r3, r0]
    18e6:	4770      	bx	lr
    18e8:	e000ed14 	.word	0xe000ed14

000018ec <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    18ec:	f000 b842 	b.w	1974 <__bus_fault>

000018f0 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    18f0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    18f2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    18f4:	4b04      	ldr	r3, [pc, #16]	; (1908 <_arch_isr_direct_pm+0x18>)
    18f6:	69d8      	ldr	r0, [r3, #28]
    18f8:	b118      	cbz	r0, 1902 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    18fa:	2200      	movs	r2, #0
    18fc:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    18fe:	f012 fadb 	bl	13eb8 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1902:	b662      	cpsie	i
    1904:	bd08      	pop	{r3, pc}
    1906:	bf00      	nop
    1908:	20001950 	.word	0x20001950

0000190c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    190e:	460c      	mov	r4, r1
    1910:	4616      	mov	r6, r2
    1912:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1914:	2204      	movs	r2, #4
    1916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1918:	9909      	ldr	r1, [sp, #36]	; 0x24
    191a:	4605      	mov	r5, r0
    191c:	f013 fa12 	bl	14d44 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1920:	f1a6 0120 	sub.w	r1, r6, #32
    1924:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1926:	4a0c      	ldr	r2, [pc, #48]	; (1958 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1928:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    192a:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    192e:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1930:	f022 0201 	bic.w	r2, r2, #1
    1934:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1936:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    1938:	662e      	str	r6, [r5, #96]	; 0x60
    193a:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    193c:	9a06      	ldr	r2, [sp, #24]
    193e:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1940:	9a07      	ldr	r2, [sp, #28]
    1942:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1944:	9a08      	ldr	r2, [sp, #32]
    1946:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1948:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    194a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    194e:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1950:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1952:	66ab      	str	r3, [r5, #104]	; 0x68
    1954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1956:	bf00      	nop
    1958:	00000899 	.word	0x00000899

0000195c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    195c:	4901      	ldr	r1, [pc, #4]	; (1964 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    195e:	2210      	movs	r2, #16
	str r2, [r1]
    1960:	600a      	str	r2, [r1, #0]
	bx lr
    1962:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1964:	e000ed10 	.word	0xe000ed10

00001968 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1968:	4040      	eors	r0, r0
	msr BASEPRI, r0
    196a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    196e:	bf30      	wfi

	bx lr
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1974:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1976:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    197a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1998 <__bus_fault+0x24>
	ldr ip, [ip]
    197e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1982:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1986:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1988:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    198c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1990:	b500      	push	{lr}
	bl _Fault
    1992:	f7ff fef3 	bl	177c <_Fault>

	pop {pc}
    1996:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1998:	e000ed04 	.word	0xe000ed04

0000199c <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    199c:	2804      	cmp	r0, #4
{
    199e:	b538      	push	{r3, r4, r5, lr}
    19a0:	4604      	mov	r4, r0
    19a2:	460d      	mov	r5, r1
	switch (reason) {
    19a4:	d013      	beq.n	19ce <_NanoFatalErrorHandler+0x32>
    19a6:	2805      	cmp	r0, #5
    19a8:	d013      	beq.n	19d2 <_NanoFatalErrorHandler+0x36>
    19aa:	2803      	cmp	r0, #3
    19ac:	d113      	bne.n	19d6 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19ae:	480c      	ldr	r0, [pc, #48]	; (19e0 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    19b0:	f7ff faec 	bl	f8c <printk>
    19b4:	f012 ff32 	bl	1481c <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19b8:	69aa      	ldr	r2, [r5, #24]
    19ba:	4601      	mov	r1, r0
    19bc:	4809      	ldr	r0, [pc, #36]	; (19e4 <_NanoFatalErrorHandler+0x48>)
    19be:	f7ff fae5 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19c2:	4629      	mov	r1, r5
    19c4:	4620      	mov	r0, r4
}
    19c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19ca:	f000 b817 	b.w	19fc <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    19ce:	4806      	ldr	r0, [pc, #24]	; (19e8 <_NanoFatalErrorHandler+0x4c>)
    19d0:	e7ee      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    19d2:	4806      	ldr	r0, [pc, #24]	; (19ec <_NanoFatalErrorHandler+0x50>)
    19d4:	e7ec      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19d6:	4601      	mov	r1, r0
    19d8:	4805      	ldr	r0, [pc, #20]	; (19f0 <_NanoFatalErrorHandler+0x54>)
    19da:	f7ff fad7 	bl	f8c <printk>
		break;
    19de:	e7e9      	b.n	19b4 <_NanoFatalErrorHandler+0x18>
    19e0:	000157aa 	.word	0x000157aa
    19e4:	00015828 	.word	0x00015828
    19e8:	000157d0 	.word	0x000157d0
    19ec:	000157ea 	.word	0x000157ea
    19f0:	00015805 	.word	0x00015805

000019f4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    19f4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    19f6:	6800      	ldr	r0, [r0, #0]
    19f8:	f7ff bfd0 	b.w	199c <_NanoFatalErrorHandler>

000019fc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    19fc:	2805      	cmp	r0, #5
{
    19fe:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a00:	d00c      	beq.n	1a1c <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a02:	f013 f8cd 	bl	14ba0 <k_is_in_isr>
    1a06:	b160      	cbz	r0, 1a22 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a08:	f013 f8ca 	bl	14ba0 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a0c:	4b0c      	ldr	r3, [pc, #48]	; (1a40 <_SysFatalErrorHandler+0x44>)
    1a0e:	490d      	ldr	r1, [pc, #52]	; (1a44 <_SysFatalErrorHandler+0x48>)
    1a10:	2800      	cmp	r0, #0
    1a12:	bf08      	it	eq
    1a14:	4619      	moveq	r1, r3
    1a16:	480c      	ldr	r0, [pc, #48]	; (1a48 <_SysFatalErrorHandler+0x4c>)
    1a18:	f7ff fab8 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a1c:	f7ff ffa4 	bl	1968 <k_cpu_idle>
    1a20:	e7fc      	b.n	1a1c <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a22:	f013 f8cd 	bl	14bc0 <_is_thread_essential>
    1a26:	2800      	cmp	r0, #0
    1a28:	d1ee      	bne.n	1a08 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a2a:	4c08      	ldr	r4, [pc, #32]	; (1a4c <_SysFatalErrorHandler+0x50>)
    1a2c:	4808      	ldr	r0, [pc, #32]	; (1a50 <_SysFatalErrorHandler+0x54>)
    1a2e:	68a1      	ldr	r1, [r4, #8]
    1a30:	f7ff faac 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a34:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a3a:	f000 b80b 	b.w	1a54 <_impl_k_thread_abort>
    1a3e:	bf00      	nop
    1a40:	00015868 	.word	0x00015868
    1a44:	00015864 	.word	0x00015864
    1a48:	00015879 	.word	0x00015879
    1a4c:	20001950 	.word	0x20001950
    1a50:	00015899 	.word	0x00015899

00001a54 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a54:	b538      	push	{r3, r4, r5, lr}
    1a56:	4605      	mov	r5, r0
	__asm__ volatile(
    1a58:	f04f 0320 	mov.w	r3, #32
    1a5c:	f3ef 8411 	mrs	r4, BASEPRI
    1a60:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a64:	f013 f904 	bl	14c70 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a68:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <_impl_k_thread_abort+0x44>)
    1a6a:	689b      	ldr	r3, [r3, #8]
    1a6c:	429d      	cmp	r5, r3
    1a6e:	d10d      	bne.n	1a8c <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a70:	4b0a      	ldr	r3, [pc, #40]	; (1a9c <_impl_k_thread_abort+0x48>)
    1a72:	685a      	ldr	r2, [r3, #4]
    1a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a78:	b922      	cbnz	r2, 1a84 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1a7a:	f012 fe81 	bl	14780 <_update_time_slice_before_swap>

	return __swap(key);
    1a7e:	4620      	mov	r0, r4
    1a80:	f7ff fd42 	bl	1508 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a84:	685a      	ldr	r2, [r3, #4]
    1a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a8a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1a8c:	4620      	mov	r0, r4
}
    1a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1a92:	f012 bd2f 	b.w	144f4 <_reschedule>
    1a96:	bf00      	nop
    1a98:	20001950 	.word	0x20001950
    1a9c:	e000ed00 	.word	0xe000ed00

00001aa0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1aa0:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1aa2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1aa4:	4a0b      	ldr	r2, [pc, #44]	; (1ad4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1aa6:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1aa8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1aaa:	bf1e      	ittt	ne
	movne	r1, #0
    1aac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1aae:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ab0:	f012 fa02 	blne	13eb8 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ab4:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ab6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1aba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1abe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ac2:	4905      	ldr	r1, [pc, #20]	; (1ad8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ac4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1ac6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1ac8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1aca:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1ace:	f7ff bcfb 	b.w	14c8 <_ExcExit>
    1ad2:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ad4:	20001950 	.word	0x20001950
	ldr r1, =_sw_isr_table
    1ad8:	000000dc 	.word	0x000000dc

00001adc <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1adc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ade:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1ae2:	4806      	ldr	r0, [pc, #24]	; (1afc <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1ae8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1aea:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1aee:	2002      	movs	r0, #2
    msr CONTROL, r0
    1af0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1af4:	f3bf 8f6f 	isb	sy

    b _PrepC
    1af8:	f000 b806 	b.w	1b08 <_PrepC>
    ldr r0, =_interrupt_stack
    1afc:	20002e28 	.word	0x20002e28

00001b00 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b00:	bf30      	wfi
    b _SysNmiOnReset
    1b02:	f7ff bffd 	b.w	1b00 <_SysNmiOnReset>
    1b06:	bf00      	nop

00001b08 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b08:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b0a:	4b07      	ldr	r3, [pc, #28]	; (1b28 <_PrepC+0x20>)
    1b0c:	4a07      	ldr	r2, [pc, #28]	; (1b2c <_PrepC+0x24>)
    1b0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b12:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b18:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b1c:	f012 f9fc 	bl	13f18 <_bss_zero>
	_data_copy();
    1b20:	f012 fa04 	bl	13f2c <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b24:	f012 fa26 	bl	13f74 <_Cstart>
    1b28:	00000000 	.word	0x00000000
    1b2c:	e000ed00 	.word	0xe000ed00

00001b30 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b30:	b508      	push	{r3, lr}
	handler();
    1b32:	f7ff ffe5 	bl	1b00 <_SysNmiOnReset>
	_ExcExit();
}
    1b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b3a:	f7ff bcc5 	b.w	14c8 <_ExcExit>
	...

00001b40 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1b40:	4912      	ldr	r1, [pc, #72]	; (1b8c <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b42:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b44:	680d      	ldr	r5, [r1, #0]
    1b46:	2d08      	cmp	r5, #8
    1b48:	d80d      	bhi.n	1b66 <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1b4a:	4a11      	ldr	r2, [pc, #68]	; (1b90 <arm_mpu_init+0x50>)
    1b4c:	6848      	ldr	r0, [r1, #4]
    1b4e:	2300      	movs	r3, #0
    1b50:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b52:	429d      	cmp	r5, r3
    1b54:	f100 000c 	add.w	r0, r0, #12
    1b58:	d107      	bne.n	1b6a <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1b5a:	2305      	movs	r3, #5
    1b5c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b62:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1b66:	2000      	movs	r0, #0
    1b68:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1b6a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1b6e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1b72:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b74:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1b78:	f041 0110 	orr.w	r1, r1, #16
    1b7c:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b7e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b82:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b84:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b86:	6114      	str	r4, [r2, #16]
    1b88:	e7e3      	b.n	1b52 <arm_mpu_init+0x12>
    1b8a:	bf00      	nop
    1b8c:	20003a3c 	.word	0x20003a3c
    1b90:	e000ed90 	.word	0xe000ed90

00001b94 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1b94:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1b96:	4603      	mov	r3, r0
    1b98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1b9c:	b90a      	cbnz	r2, 1ba2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1b9e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1ba0:	4770      	bx	lr
		*d = *s;
    1ba2:	f803 2b01 	strb.w	r2, [r3], #1
    1ba6:	e7f7      	b.n	1b98 <strcpy+0x4>

00001ba8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1ba8:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1baa:	4603      	mov	r3, r0
    1bac:	1a98      	subs	r0, r3, r2
    1bae:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bb2:	2900      	cmp	r1, #0
    1bb4:	d1fa      	bne.n	1bac <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1bb6:	4770      	bx	lr

00001bb8 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1bb8:	3801      	subs	r0, #1
    1bba:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1bbc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1bc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bc4:	4293      	cmp	r3, r2
    1bc6:	d102      	bne.n	1bce <strcmp+0x16>
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d1f7      	bne.n	1bbc <strcmp+0x4>
    1bcc:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1bce:	1a98      	subs	r0, r3, r2
    1bd0:	4770      	bx	lr

00001bd2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1bd2:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1bd4:	b182      	cbz	r2, 1bf8 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1bd6:	3a01      	subs	r2, #1
    1bd8:	460c      	mov	r4, r1
    1bda:	4603      	mov	r3, r0
    1bdc:	d103      	bne.n	1be6 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1bde:	781a      	ldrb	r2, [r3, #0]
    1be0:	7820      	ldrb	r0, [r4, #0]
    1be2:	1a10      	subs	r0, r2, r0
    1be4:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1be6:	781e      	ldrb	r6, [r3, #0]
    1be8:	7825      	ldrb	r5, [r4, #0]
    1bea:	42ae      	cmp	r6, r5
    1bec:	f100 0001 	add.w	r0, r0, #1
    1bf0:	f101 0101 	add.w	r1, r1, #1
    1bf4:	d0ef      	beq.n	1bd6 <memcmp+0x4>
    1bf6:	e7f2      	b.n	1bde <memcmp+0xc>
		return 0;
    1bf8:	4610      	mov	r0, r2
}
    1bfa:	bd70      	pop	{r4, r5, r6, pc}

00001bfc <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1bfc:	ea81 0300 	eor.w	r3, r1, r0
    1c00:	f013 0f03 	tst.w	r3, #3
{
    1c04:	b570      	push	{r4, r5, r6, lr}
    1c06:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c08:	d00b      	beq.n	1c22 <memcpy+0x26>
    1c0a:	3b01      	subs	r3, #1
    1c0c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c0e:	4291      	cmp	r1, r2
    1c10:	d11b      	bne.n	1c4a <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c12:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c14:	2a00      	cmp	r2, #0
    1c16:	d0fc      	beq.n	1c12 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c18:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c1c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c20:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c22:	079c      	lsls	r4, r3, #30
    1c24:	d1f6      	bne.n	1c14 <memcpy+0x18>
    1c26:	1f1e      	subs	r6, r3, #4
    1c28:	460d      	mov	r5, r1
    1c2a:	1b54      	subs	r4, r2, r5
    1c2c:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c2e:	2c03      	cmp	r4, #3
    1c30:	d806      	bhi.n	1c40 <memcpy+0x44>
    1c32:	f022 0403 	bic.w	r4, r2, #3
    1c36:	4421      	add	r1, r4
    1c38:	4423      	add	r3, r4
    1c3a:	f002 0203 	and.w	r2, r2, #3
    1c3e:	e7e4      	b.n	1c0a <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c40:	f855 4b04 	ldr.w	r4, [r5], #4
    1c44:	f846 4f04 	str.w	r4, [r6, #4]!
    1c48:	e7ef      	b.n	1c2a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c52:	e7dc      	b.n	1c0e <memcpy+0x12>

00001c54 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1c54:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1c56:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1c58:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1c5a:	079c      	lsls	r4, r3, #30
    1c5c:	d111      	bne.n	1c82 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1c5e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1c62:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1c66:	461e      	mov	r6, r3
    1c68:	1b95      	subs	r5, r2, r6
    1c6a:	441d      	add	r5, r3
    1c6c:	2d03      	cmp	r5, #3
    1c6e:	d80e      	bhi.n	1c8e <memset+0x3a>
    1c70:	f022 0403 	bic.w	r4, r2, #3
    1c74:	4423      	add	r3, r4
    1c76:	f002 0203 	and.w	r2, r2, #3
    1c7a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1c7c:	4293      	cmp	r3, r2
    1c7e:	d109      	bne.n	1c94 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1c80:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1c82:	2a00      	cmp	r2, #0
    1c84:	d0fc      	beq.n	1c80 <memset+0x2c>
		*(d_byte++) = c_byte;
    1c86:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1c8a:	3a01      	subs	r2, #1
    1c8c:	e7e5      	b.n	1c5a <memset+0x6>
		*(d_word++) = c_word;
    1c8e:	f846 4b04 	str.w	r4, [r6], #4
    1c92:	e7e9      	b.n	1c68 <memset+0x14>
		*(d_byte++) = c_byte;
    1c94:	f803 1b01 	strb.w	r1, [r3], #1
    1c98:	e7f0      	b.n	1c7c <memset+0x28>
	...

00001c9c <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1c9c:	b570      	push	{r4, r5, r6, lr}
    1c9e:	f04f 0320 	mov.w	r3, #32
    1ca2:	f3ef 8511 	mrs	r5, BASEPRI
    1ca6:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1caa:	4c14      	ldr	r4, [pc, #80]	; (1cfc <bt_hex+0x60>)
    1cac:	4e14      	ldr	r6, [pc, #80]	; (1d00 <bt_hex+0x64>)
    1cae:	7823      	ldrb	r3, [r4, #0]
    1cb0:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1cb4:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1cb6:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1cba:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1cbc:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1cbe:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1cc2:	2940      	cmp	r1, #64	; 0x40
    1cc4:	bf28      	it	cs
    1cc6:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1cc8:	4d0e      	ldr	r5, [pc, #56]	; (1d04 <bt_hex+0x68>)
    1cca:	3801      	subs	r0, #1
    1ccc:	4613      	mov	r3, r2
    1cce:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1cd2:	42b3      	cmp	r3, r6
    1cd4:	d104      	bne.n	1ce0 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1cd6:	2300      	movs	r3, #0
    1cd8:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1cdc:	4610      	mov	r0, r2
    1cde:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1ce0:	7844      	ldrb	r4, [r0, #1]
    1ce2:	0924      	lsrs	r4, r4, #4
    1ce4:	3302      	adds	r3, #2
    1ce6:	5d2c      	ldrb	r4, [r5, r4]
    1ce8:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1cec:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1cf0:	f004 040f 	and.w	r4, r4, #15
    1cf4:	5d2c      	ldrb	r4, [r5, r4]
    1cf6:	f803 4c01 	strb.w	r4, [r3, #-1]
    1cfa:	e7ea      	b.n	1cd2 <bt_hex+0x36>
    1cfc:	20000074 	.word	0x20000074
    1d00:	20000075 	.word	0x20000075
    1d04:	000158dc 	.word	0x000158dc

00001d08 <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1d08:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d0a:	4a0f      	ldr	r2, [pc, #60]	; (1d48 <bt_addr_str+0x40>)
    1d0c:	4c0f      	ldr	r4, [pc, #60]	; (1d4c <bt_addr_str+0x44>)
    1d0e:	7813      	ldrb	r3, [r2, #0]
    1d10:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1d14:	3301      	adds	r3, #1
{
    1d16:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1d18:	f003 0301 	and.w	r3, r3, #1
    1d1c:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1d1e:	7802      	ldrb	r2, [r0, #0]
    1d20:	7943      	ldrb	r3, [r0, #5]
    1d22:	9204      	str	r2, [sp, #16]
    1d24:	7842      	ldrb	r2, [r0, #1]
    1d26:	9203      	str	r2, [sp, #12]
    1d28:	7882      	ldrb	r2, [r0, #2]
    1d2a:	9202      	str	r2, [sp, #8]
    1d2c:	78c2      	ldrb	r2, [r0, #3]
    1d2e:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1d30:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1d34:	7902      	ldrb	r2, [r0, #4]
    1d36:	9200      	str	r2, [sp, #0]
    1d38:	2112      	movs	r1, #18
    1d3a:	4a05      	ldr	r2, [pc, #20]	; (1d50 <bt_addr_str+0x48>)
    1d3c:	4620      	mov	r0, r4
    1d3e:	f7ff f933 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1d42:	4620      	mov	r0, r4
    1d44:	b006      	add	sp, #24
    1d46:	bd10      	pop	{r4, pc}
    1d48:	20000072 	.word	0x20000072
    1d4c:	20000018 	.word	0x20000018
    1d50:	000158be 	.word	0x000158be

00001d54 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1d54:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d56:	4a1d      	ldr	r2, [pc, #116]	; (1dcc <bt_addr_le_str+0x78>)
    1d58:	491d      	ldr	r1, [pc, #116]	; (1dd0 <bt_addr_le_str+0x7c>)
    1d5a:	7813      	ldrb	r3, [r2, #0]
    1d5c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1d60:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1d62:	f003 0301 	and.w	r3, r3, #1
    1d66:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1d68:	7803      	ldrb	r3, [r0, #0]
{
    1d6a:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1d6c:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1d70:	4604      	mov	r4, r0
	str = bufs[cur++];
    1d72:	440e      	add	r6, r1
    1d74:	ad07      	add	r5, sp, #28
    1d76:	2b03      	cmp	r3, #3
    1d78:	d821      	bhi.n	1dbe <bt_addr_le_str+0x6a>
    1d7a:	e8df f003 	tbb	[pc, r3]
    1d7e:	1a02      	.short	0x1a02
    1d80:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1d82:	4914      	ldr	r1, [pc, #80]	; (1dd4 <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1d84:	4628      	mov	r0, r5
    1d86:	f7ff ff05 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1d8a:	7862      	ldrb	r2, [r4, #1]
    1d8c:	9204      	str	r2, [sp, #16]
    1d8e:	78a2      	ldrb	r2, [r4, #2]
    1d90:	9203      	str	r2, [sp, #12]
    1d92:	78e2      	ldrb	r2, [r4, #3]
    1d94:	9202      	str	r2, [sp, #8]
    1d96:	7922      	ldrb	r2, [r4, #4]
    1d98:	9201      	str	r2, [sp, #4]
    1d9a:	7962      	ldrb	r2, [r4, #5]
    1d9c:	9200      	str	r2, [sp, #0]
    1d9e:	79a3      	ldrb	r3, [r4, #6]
    1da0:	9505      	str	r5, [sp, #20]
    1da2:	4a0d      	ldr	r2, [pc, #52]	; (1dd8 <bt_addr_le_str+0x84>)
    1da4:	211b      	movs	r1, #27
    1da6:	4630      	mov	r0, r6
    1da8:	f7ff f8fe 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1dac:	4630      	mov	r0, r6
    1dae:	b00a      	add	sp, #40	; 0x28
    1db0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1db2:	490a      	ldr	r1, [pc, #40]	; (1ddc <bt_addr_le_str+0x88>)
    1db4:	e7e6      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1db6:	490a      	ldr	r1, [pc, #40]	; (1de0 <bt_addr_le_str+0x8c>)
    1db8:	e7e4      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1dba:	490a      	ldr	r1, [pc, #40]	; (1de4 <bt_addr_le_str+0x90>)
    1dbc:	e7e2      	b.n	1d84 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1dbe:	4a0a      	ldr	r2, [pc, #40]	; (1de8 <bt_addr_le_str+0x94>)
    1dc0:	210a      	movs	r1, #10
    1dc2:	4628      	mov	r0, r5
    1dc4:	f7ff f8f0 	bl	fa8 <snprintk>
    1dc8:	e7df      	b.n	1d8a <bt_addr_le_str+0x36>
    1dca:	bf00      	nop
    1dcc:	20000073 	.word	0x20000073
    1dd0:	2000003c 	.word	0x2000003c
    1dd4:	00015315 	.word	0x00015315
    1dd8:	0001533e 	.word	0x0001533e
    1ddc:	0001531c 	.word	0x0001531c
    1de0:	00015323 	.word	0x00015323
    1de4:	0001532d 	.word	0x0001532d
    1de8:	00015337 	.word	0x00015337

00001dec <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1dec:	b530      	push	{r4, r5, lr}
    1dee:	b085      	sub	sp, #20
    1df0:	4604      	mov	r4, r0
    1df2:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1df4:	4668      	mov	r0, sp
    1df6:	2203      	movs	r2, #3
    1df8:	f7ff ff00 	bl	1bfc <memcpy>
	memset(res + 3, 0, 13);
    1dfc:	220d      	movs	r2, #13
    1dfe:	2100      	movs	r1, #0
    1e00:	f10d 0003 	add.w	r0, sp, #3
    1e04:	f7ff ff26 	bl	1c54 <memset>

	err = bt_encrypt_le(irk, res, res);
    1e08:	4620      	mov	r0, r4
    1e0a:	466a      	mov	r2, sp
    1e0c:	4669      	mov	r1, sp
    1e0e:	f006 fcd1 	bl	87b4 <bt_encrypt_le>
	if (err) {
    1e12:	4604      	mov	r4, r0
    1e14:	b920      	cbnz	r0, 1e20 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1e16:	2203      	movs	r2, #3
    1e18:	4669      	mov	r1, sp
    1e1a:	4628      	mov	r0, r5
    1e1c:	f7ff feee 	bl	1bfc <memcpy>

	return 0;
}
    1e20:	4620      	mov	r0, r4
    1e22:	b005      	add	sp, #20
    1e24:	bd30      	pop	{r4, r5, pc}

00001e26 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1e26:	b513      	push	{r0, r1, r4, lr}
    1e28:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1e2a:	aa01      	add	r2, sp, #4
    1e2c:	3103      	adds	r1, #3
    1e2e:	f7ff ffdd 	bl	1dec <ah>
	if (err) {
    1e32:	b948      	cbnz	r0, 1e48 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1e34:	2203      	movs	r2, #3
    1e36:	a901      	add	r1, sp, #4
    1e38:	4620      	mov	r0, r4
    1e3a:	f7ff feca 	bl	1bd2 <memcmp>
    1e3e:	fab0 f080 	clz	r0, r0
    1e42:	0940      	lsrs	r0, r0, #5
}
    1e44:	b002      	add	sp, #8
    1e46:	bd10      	pop	{r4, pc}
		return false;
    1e48:	2000      	movs	r0, #0
    1e4a:	e7fb      	b.n	1e44 <bt_rpa_irk_matches+0x1e>

00001e4c <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1e4e:	1ccd      	adds	r5, r1, #3
{
    1e50:	4606      	mov	r6, r0
    1e52:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1e54:	4628      	mov	r0, r5
    1e56:	2103      	movs	r1, #3
    1e58:	f006 fc90 	bl	877c <bt_rand>
	if (err) {
    1e5c:	b960      	cbnz	r0, 1e78 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1e5e:	7963      	ldrb	r3, [r4, #5]
    1e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e68:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1e6a:	4622      	mov	r2, r4
    1e6c:	4629      	mov	r1, r5
    1e6e:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1e74:	f7ff bfba 	b.w	1dec <ah>
}
    1e78:	bd70      	pop	{r4, r5, r6, pc}
	...

00001e7c <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1e7c:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1e7e:	7802      	ldrb	r2, [r0, #0]
    1e80:	2a01      	cmp	r2, #1
{
    1e82:	4604      	mov	r4, r0
    1e84:	460b      	mov	r3, r1
	switch (src->type) {
    1e86:	d017      	beq.n	1eb8 <uuid_to_uuid128+0x3c>
    1e88:	d303      	bcc.n	1e92 <uuid_to_uuid128+0x16>
    1e8a:	2a02      	cmp	r2, #2
    1e8c:	d02c      	beq.n	1ee8 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1e8e:	bcf0      	pop	{r4, r5, r6, r7}
    1e90:	4770      	bx	lr
		*dst = uuid128_base;
    1e92:	4a18      	ldr	r2, [pc, #96]	; (1ef4 <uuid_to_uuid128+0x78>)
    1e94:	460d      	mov	r5, r1
    1e96:	f102 0710 	add.w	r7, r2, #16
    1e9a:	6810      	ldr	r0, [r2, #0]
    1e9c:	6851      	ldr	r1, [r2, #4]
    1e9e:	462e      	mov	r6, r5
    1ea0:	c603      	stmia	r6!, {r0, r1}
    1ea2:	3208      	adds	r2, #8
    1ea4:	42ba      	cmp	r2, r7
    1ea6:	4635      	mov	r5, r6
    1ea8:	d1f7      	bne.n	1e9a <uuid_to_uuid128+0x1e>
    1eaa:	7812      	ldrb	r2, [r2, #0]
    1eac:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1eae:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1eb0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1eb2:	0a12      	lsrs	r2, r2, #8
    1eb4:	739a      	strb	r2, [r3, #14]
    1eb6:	e7ea      	b.n	1e8e <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1eb8:	4a0e      	ldr	r2, [pc, #56]	; (1ef4 <uuid_to_uuid128+0x78>)
    1eba:	460d      	mov	r5, r1
    1ebc:	f102 0710 	add.w	r7, r2, #16
    1ec0:	6810      	ldr	r0, [r2, #0]
    1ec2:	6851      	ldr	r1, [r2, #4]
    1ec4:	462e      	mov	r6, r5
    1ec6:	c603      	stmia	r6!, {r0, r1}
    1ec8:	3208      	adds	r2, #8
    1eca:	42ba      	cmp	r2, r7
    1ecc:	4635      	mov	r5, r6
    1ece:	d1f7      	bne.n	1ec0 <uuid_to_uuid128+0x44>
    1ed0:	7812      	ldrb	r2, [r2, #0]
    1ed2:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1ed4:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1ed6:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1ed8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1edc:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1ede:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1ee0:	0a12      	lsrs	r2, r2, #8
    1ee2:	7399      	strb	r1, [r3, #14]
    1ee4:	741a      	strb	r2, [r3, #16]
    1ee6:	e7d2      	b.n	1e8e <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1ee8:	4601      	mov	r1, r0
    1eea:	2211      	movs	r2, #17
    1eec:	4618      	mov	r0, r3
}
    1eee:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1ef0:	f7ff be84 	b.w	1bfc <memcpy>
    1ef4:	000158ed 	.word	0x000158ed

00001ef8 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1ef8:	b510      	push	{r4, lr}
    1efa:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1efc:	7801      	ldrb	r1, [r0, #0]
    1efe:	7822      	ldrb	r2, [r4, #0]
    1f00:	428a      	cmp	r2, r1
{
    1f02:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1f04:	d00e      	beq.n	1f24 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1f06:	4669      	mov	r1, sp
    1f08:	f7ff ffb8 	bl	1e7c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1f0c:	a905      	add	r1, sp, #20
    1f0e:	4620      	mov	r0, r4
    1f10:	f7ff ffb4 	bl	1e7c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1f14:	2210      	movs	r2, #16
    1f16:	f10d 0115 	add.w	r1, sp, #21
    1f1a:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f1e:	f7ff fe58 	bl	1bd2 <memcmp>
    1f22:	e00a      	b.n	1f3a <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1f24:	2a01      	cmp	r2, #1
    1f26:	d00a      	beq.n	1f3e <bt_uuid_cmp+0x46>
    1f28:	d304      	bcc.n	1f34 <bt_uuid_cmp+0x3c>
    1f2a:	2a02      	cmp	r2, #2
    1f2c:	d00a      	beq.n	1f44 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1f2e:	f06f 0015 	mvn.w	r0, #21
    1f32:	e002      	b.n	1f3a <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1f34:	8840      	ldrh	r0, [r0, #2]
    1f36:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f38:	1ac0      	subs	r0, r0, r3
}
    1f3a:	b00a      	add	sp, #40	; 0x28
    1f3c:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f3e:	6840      	ldr	r0, [r0, #4]
    1f40:	6863      	ldr	r3, [r4, #4]
    1f42:	e7f9      	b.n	1f38 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f44:	2210      	movs	r2, #16
    1f46:	1c61      	adds	r1, r4, #1
    1f48:	3001      	adds	r0, #1
    1f4a:	e7e8      	b.n	1f1e <bt_uuid_cmp+0x26>

00001f4c <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    1f4c:	4770      	bx	lr
	...

00001f50 <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    1f50:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    1f52:	4d0b      	ldr	r5, [pc, #44]	; (1f80 <ver_str+0x30>)
{
    1f54:	4606      	mov	r6, r0
	const char * const str[] = {
    1f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    1f58:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    1f5a:	466c      	mov	r4, sp
    1f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f62:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    1f66:	2e09      	cmp	r6, #9
	const char * const str[] = {
    1f68:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    1f6c:	bf9b      	ittet	ls
    1f6e:	ab0a      	addls	r3, sp, #40	; 0x28
    1f70:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    1f74:	4803      	ldrhi	r0, [pc, #12]	; (1f84 <ver_str+0x34>)
		return str[ver];
    1f76:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    1f7a:	b00a      	add	sp, #40	; 0x28
    1f7c:	bd70      	pop	{r4, r5, r6, pc}
    1f7e:	bf00      	nop
    1f80:	000152cc 	.word	0x000152cc
    1f84:	00016bec 	.word	0x00016bec

00001f88 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1f88:	2207      	movs	r2, #7
    1f8a:	f7ff be37 	b.w	1bfc <memcpy>

00001f8e <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1f8e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1f90:	f3bf 8f5b 	dmb	ish
    1f94:	e850 3f00 	ldrex	r3, [r0]
    1f98:	ea43 0201 	orr.w	r2, r3, r1
    1f9c:	e840 2e00 	strex	lr, r2, [r0]
    1fa0:	f1be 0f00 	cmp.w	lr, #0
    1fa4:	d1f6      	bne.n	1f94 <atomic_or+0x6>
    1fa6:	f3bf 8f5b 	dmb	ish
    1faa:	4618      	mov	r0, r3
    1fac:	f85d fb04 	ldr.w	pc, [sp], #4

00001fb0 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1fb0:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1fb2:	f3bf 8f5b 	dmb	ish
    1fb6:	e850 3f00 	ldrex	r3, [r0]
    1fba:	ea03 0201 	and.w	r2, r3, r1
    1fbe:	e840 2e00 	strex	lr, r2, [r0]
    1fc2:	f1be 0f00 	cmp.w	lr, #0
    1fc6:	d1f6      	bne.n	1fb6 <atomic_and+0x6>
    1fc8:	f3bf 8f5b 	dmb	ish
    1fcc:	4618      	mov	r0, r3
    1fce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001fd4 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    1fd4:	78c3      	ldrb	r3, [r0, #3]
    1fd6:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1fd8:	f241 3288 	movw	r2, #5000	; 0x1388
    1fdc:	f100 0170 	add.w	r1, r0, #112	; 0x70
    1fe0:	bf08      	it	eq
    1fe2:	2200      	moveq	r2, #0
    1fe4:	4801      	ldr	r0, [pc, #4]	; (1fec <update_conn_param+0x18>)
    1fe6:	f012 bf83 	b.w	14ef0 <k_delayed_work_submit_to_queue>
    1fea:	bf00      	nop
    1fec:	20001990 	.word	0x20001990

00001ff0 <hci_cmd_done>:
{
    1ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1ff4:	b087      	sub	sp, #28
    1ff6:	4615      	mov	r5, r2
    1ff8:	4688      	mov	r8, r1
    1ffa:	4607      	mov	r7, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    1ffc:	f012 fc0e 	bl	1481c <_impl_k_current_get>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    2000:	4e2c      	ldr	r6, [pc, #176]	; (20b4 <hci_cmd_done+0xc4>)
    2002:	9001      	str	r0, [sp, #4]
    2004:	4b2c      	ldr	r3, [pc, #176]	; (20b8 <hci_cmd_done+0xc8>)
    2006:	4a2d      	ldr	r2, [pc, #180]	; (20bc <hci_cmd_done+0xcc>)
    2008:	492d      	ldr	r1, [pc, #180]	; (20c0 <hci_cmd_done+0xd0>)
    200a:	9605      	str	r6, [sp, #20]
    200c:	9504      	str	r5, [sp, #16]
    200e:	f8cd 800c 	str.w	r8, [sp, #12]
    2012:	9702      	str	r7, [sp, #8]
    2014:	9600      	str	r6, [sp, #0]
    2016:	482b      	ldr	r0, [pc, #172]	; (20c4 <hci_cmd_done+0xd4>)
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2018:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 20d8 <hci_cmd_done+0xe8>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    201c:	f7fe ffb6 	bl	f8c <printk>
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2020:	79a8      	ldrb	r0, [r5, #6]
    2022:	f011 faaf 	bl	13584 <net_buf_pool_get>
    2026:	4581      	cmp	r9, r0
    2028:	d013      	beq.n	2052 <hci_cmd_done+0x62>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    202a:	79ac      	ldrb	r4, [r5, #6]
    202c:	4620      	mov	r0, r4
    202e:	f011 faa9 	bl	13584 <net_buf_pool_get>
    2032:	9605      	str	r6, [sp, #20]
    2034:	9003      	str	r0, [sp, #12]
    2036:	f8cd 9010 	str.w	r9, [sp, #16]
    203a:	9402      	str	r4, [sp, #8]
    203c:	e88d 00c0 	stmia.w	sp, {r6, r7}
    2040:	4b1d      	ldr	r3, [pc, #116]	; (20b8 <hci_cmd_done+0xc8>)
    2042:	4a21      	ldr	r2, [pc, #132]	; (20c8 <hci_cmd_done+0xd8>)
    2044:	491e      	ldr	r1, [pc, #120]	; (20c0 <hci_cmd_done+0xd0>)
    2046:	4821      	ldr	r0, [pc, #132]	; (20cc <hci_cmd_done+0xdc>)
    2048:	f7fe ffa0 	bl	f8c <printk>
}
    204c:	b007      	add	sp, #28
    204e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    2052:	4628      	mov	r0, r5
    2054:	f011 fa9c 	bl	13590 <net_buf_id>
    2058:	4c1d      	ldr	r4, [pc, #116]	; (20d0 <hci_cmd_done+0xe0>)
    205a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    205e:	8843      	ldrh	r3, [r0, #2]
    2060:	42bb      	cmp	r3, r7
    2062:	d00f      	beq.n	2084 <hci_cmd_done+0x94>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    2064:	4628      	mov	r0, r5
    2066:	f011 fa93 	bl	13590 <net_buf_id>
    206a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    206e:	9603      	str	r6, [sp, #12]
    2070:	8843      	ldrh	r3, [r0, #2]
    2072:	9302      	str	r3, [sp, #8]
    2074:	e88d 00c0 	stmia.w	sp, {r6, r7}
    2078:	4b0f      	ldr	r3, [pc, #60]	; (20b8 <hci_cmd_done+0xc8>)
    207a:	4a13      	ldr	r2, [pc, #76]	; (20c8 <hci_cmd_done+0xd8>)
    207c:	4910      	ldr	r1, [pc, #64]	; (20c0 <hci_cmd_done+0xd0>)
    207e:	4815      	ldr	r0, [pc, #84]	; (20d4 <hci_cmd_done+0xe4>)
    2080:	f7fe ff84 	bl	f8c <printk>
	if (cmd(buf)->sync) {
    2084:	4628      	mov	r0, r5
    2086:	f011 fa83 	bl	13590 <net_buf_id>
    208a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    208e:	6843      	ldr	r3, [r0, #4]
    2090:	2b00      	cmp	r3, #0
    2092:	d0db      	beq.n	204c <hci_cmd_done+0x5c>
		cmd(buf)->status = status;
    2094:	4628      	mov	r0, r5
    2096:	f011 fa7b 	bl	13590 <net_buf_id>
    209a:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    209e:	4628      	mov	r0, r5
    20a0:	f011 fa76 	bl	13590 <net_buf_id>
    20a4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    20a8:	6840      	ldr	r0, [r0, #4]
}
    20aa:	b007      	add	sp, #28
    20ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    20b0:	f012 bbc3 	b.w	1483a <_impl_k_sem_give>
    20b4:	000153a9 	.word	0x000153a9
    20b8:	00015a4e 	.word	0x00015a4e
    20bc:	000167ad 	.word	0x000167ad
    20c0:	000167b4 	.word	0x000167b4
    20c4:	000167b7 	.word	0x000167b7
    20c8:	000167ef 	.word	0x000167ef
    20cc:	000167f6 	.word	0x000167f6
    20d0:	2000027c 	.word	0x2000027c
    20d4:	0001683b 	.word	0x0001683b
    20d8:	20003f74 	.word	0x20003f74

000020dc <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    20dc:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20de:	f3bf 8f5b 	dmb	ish
    20e2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    20e6:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    20ea:	f001 011f 	and.w	r1, r1, #31
    20ee:	4108      	asrs	r0, r1
}
    20f0:	f000 0001 	and.w	r0, r0, #1
    20f4:	4770      	bx	lr
	...

000020f8 <bt_hci_cmd_create>:
{
    20f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20fc:	b086      	sub	sp, #24
    20fe:	4606      	mov	r6, r0
    2100:	460f      	mov	r7, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2102:	f012 fb8b 	bl	1481c <_impl_k_current_get>
	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);
    2106:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 21a8 <bt_hci_cmd_create+0xb0>
    210a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 21ac <bt_hci_cmd_create+0xb4>
    210e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 21b0 <bt_hci_cmd_create+0xb8>
    2112:	4d20      	ldr	r5, [pc, #128]	; (2194 <bt_hci_cmd_create+0x9c>)
    2114:	9504      	str	r5, [sp, #16]
    2116:	4653      	mov	r3, sl
    2118:	464a      	mov	r2, r9
    211a:	9001      	str	r0, [sp, #4]
    211c:	9500      	str	r5, [sp, #0]
    211e:	4641      	mov	r1, r8
    2120:	9703      	str	r7, [sp, #12]
    2122:	9602      	str	r6, [sp, #8]
    2124:	481c      	ldr	r0, [pc, #112]	; (2198 <bt_hci_cmd_create+0xa0>)
    2126:	f7fe ff31 	bl	f8c <printk>
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    212a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    212e:	481b      	ldr	r0, [pc, #108]	; (219c <bt_hci_cmd_create+0xa4>)
    2130:	f011 fabc 	bl	136ac <net_buf_alloc_fixed>
    2134:	4604      	mov	r4, r0
    2136:	f012 fb71 	bl	1481c <_impl_k_current_get>
	BT_DBG("buf %p", buf);
    213a:	464a      	mov	r2, r9
    213c:	4653      	mov	r3, sl
    213e:	9503      	str	r5, [sp, #12]
    2140:	9001      	str	r0, [sp, #4]
    2142:	9500      	str	r5, [sp, #0]
    2144:	4641      	mov	r1, r8
    2146:	9402      	str	r4, [sp, #8]
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2148:	f104 0808 	add.w	r8, r4, #8
	BT_DBG("buf %p", buf);
    214c:	4814      	ldr	r0, [pc, #80]	; (21a0 <bt_hci_cmd_create+0xa8>)
	cmd(buf)->opcode = opcode;
    214e:	4d15      	ldr	r5, [pc, #84]	; (21a4 <bt_hci_cmd_create+0xac>)
	BT_DBG("buf %p", buf);
    2150:	f7fe ff1c 	bl	f8c <printk>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    2154:	f04f 0900 	mov.w	r9, #0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2158:	2100      	movs	r1, #0
    215a:	4640      	mov	r0, r8
    215c:	f011 fac5 	bl	136ea <net_buf_simple_reserve>
    2160:	f884 9014 	strb.w	r9, [r4, #20]
	cmd(buf)->opcode = opcode;
    2164:	4620      	mov	r0, r4
    2166:	f011 fa13 	bl	13590 <net_buf_id>
    216a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    216e:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    2170:	4620      	mov	r0, r4
    2172:	f011 fa0d 	bl	13590 <net_buf_id>
    2176:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    217a:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    217c:	f8c0 9004 	str.w	r9, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    2180:	4640      	mov	r0, r8
    2182:	f011 faf5 	bl	13770 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    2186:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    2188:	7087      	strb	r7, [r0, #2]
}
    218a:	4620      	mov	r0, r4
    218c:	b006      	add	sp, #24
    218e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2192:	bf00      	nop
    2194:	000153a9 	.word	0x000153a9
    2198:	00015d68 	.word	0x00015d68
    219c:	20003f74 	.word	0x20003f74
    21a0:	00015d98 	.word	0x00015d98
    21a4:	2000027c 	.word	0x2000027c
    21a8:	000158fe 	.word	0x000158fe
    21ac:	000167ad 	.word	0x000167ad
    21b0:	000167b4 	.word	0x000167b4

000021b4 <bt_hci_cmd_send_sync>:
{
    21b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    21b8:	4681      	mov	r9, r0
    21ba:	b08d      	sub	sp, #52	; 0x34
    21bc:	4615      	mov	r5, r2
	if (!buf) {
    21be:	460c      	mov	r4, r1
    21c0:	b921      	cbnz	r1, 21cc <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    21c2:	f7ff ff99 	bl	20f8 <bt_hci_cmd_create>
		if (!buf) {
    21c6:	4604      	mov	r4, r0
    21c8:	2800      	cmp	r0, #0
    21ca:	d053      	beq.n	2274 <bt_hci_cmd_send_sync+0xc0>
    21cc:	f012 fb26 	bl	1481c <_impl_k_current_get>
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    21d0:	4e2a      	ldr	r6, [pc, #168]	; (227c <bt_hci_cmd_send_sync+0xc8>)
    21d2:	9605      	str	r6, [sp, #20]
    21d4:	89a3      	ldrh	r3, [r4, #12]
    21d6:	9304      	str	r3, [sp, #16]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    21d8:	f10d 0818 	add.w	r8, sp, #24
    21dc:	4b28      	ldr	r3, [pc, #160]	; (2280 <bt_hci_cmd_send_sync+0xcc>)
    21de:	9001      	str	r0, [sp, #4]
    21e0:	4a28      	ldr	r2, [pc, #160]	; (2284 <bt_hci_cmd_send_sync+0xd0>)
    21e2:	4929      	ldr	r1, [pc, #164]	; (2288 <bt_hci_cmd_send_sync+0xd4>)
    21e4:	f8cd 900c 	str.w	r9, [sp, #12]
    21e8:	9402      	str	r4, [sp, #8]
    21ea:	9600      	str	r6, [sp, #0]
    21ec:	4827      	ldr	r0, [pc, #156]	; (228c <bt_hci_cmd_send_sync+0xd8>)
	cmd(buf)->sync = &sync_sem;
    21ee:	4f28      	ldr	r7, [pc, #160]	; (2290 <bt_hci_cmd_send_sync+0xdc>)
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    21f0:	f7fe fecc 	bl	f8c <printk>
    21f4:	2201      	movs	r2, #1
    21f6:	2100      	movs	r1, #0
    21f8:	4640      	mov	r0, r8
    21fa:	f012 fb15 	bl	14828 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    21fe:	4620      	mov	r0, r4
    2200:	f011 f9c6 	bl	13590 <net_buf_id>
    2204:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    2208:	f8c0 8004 	str.w	r8, [r0, #4]
	net_buf_ref(buf);
    220c:	4620      	mov	r0, r4
    220e:	f011 faab 	bl	13768 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2212:	4621      	mov	r1, r4
    2214:	481f      	ldr	r0, [pc, #124]	; (2294 <bt_hci_cmd_send_sync+0xe0>)
    2216:	f011 fa6c 	bl	136f2 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    221a:	f242 7110 	movw	r1, #10000	; 0x2710
    221e:	4640      	mov	r0, r8
    2220:	f012 fb33 	bl	1488a <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2224:	f012 fafa 	bl	1481c <_impl_k_current_get>
    2228:	4680      	mov	r8, r0
	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);
    222a:	4620      	mov	r0, r4
    222c:	f011 f9b0 	bl	13590 <net_buf_id>
    2230:	9604      	str	r6, [sp, #16]
    2232:	f817 3030 	ldrb.w	r3, [r7, r0, lsl #3]
    2236:	9303      	str	r3, [sp, #12]
    2238:	4a12      	ldr	r2, [pc, #72]	; (2284 <bt_hci_cmd_send_sync+0xd0>)
    223a:	4b11      	ldr	r3, [pc, #68]	; (2280 <bt_hci_cmd_send_sync+0xcc>)
    223c:	4912      	ldr	r1, [pc, #72]	; (2288 <bt_hci_cmd_send_sync+0xd4>)
    223e:	4816      	ldr	r0, [pc, #88]	; (2298 <bt_hci_cmd_send_sync+0xe4>)
    2240:	e88d 0340 	stmia.w	sp, {r6, r8, r9}
    2244:	f7fe fea2 	bl	f8c <printk>
	if (cmd(buf)->status) {
    2248:	4620      	mov	r0, r4
    224a:	f011 f9a1 	bl	13590 <net_buf_id>
    224e:	f817 0030 	ldrb.w	r0, [r7, r0, lsl #3]
    2252:	b138      	cbz	r0, 2264 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
    2254:	4620      	mov	r0, r4
    2256:	f011 fa59 	bl	1370c <net_buf_unref>
		err = -EIO;
    225a:	f06f 0004 	mvn.w	r0, #4
}
    225e:	b00d      	add	sp, #52	; 0x34
    2260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (rsp) {
    2264:	b10d      	cbz	r5, 226a <bt_hci_cmd_send_sync+0xb6>
			*rsp = buf;
    2266:	602c      	str	r4, [r5, #0]
    2268:	e7f9      	b.n	225e <bt_hci_cmd_send_sync+0xaa>
			net_buf_unref(buf);
    226a:	4620      	mov	r0, r4
    226c:	f011 fa4e 	bl	1370c <net_buf_unref>
		err = 0;
    2270:	4628      	mov	r0, r5
    2272:	e7f4      	b.n	225e <bt_hci_cmd_send_sync+0xaa>
			return -ENOBUFS;
    2274:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2278:	e7f1      	b.n	225e <bt_hci_cmd_send_sync+0xaa>
    227a:	bf00      	nop
    227c:	000153a9 	.word	0x000153a9
    2280:	00015920 	.word	0x00015920
    2284:	000167ad 	.word	0x000167ad
    2288:	000167b4 	.word	0x000167b4
    228c:	00015e10 	.word	0x00015e10
    2290:	2000027c 	.word	0x2000027c
    2294:	20003b2c 	.word	0x20003b2c
    2298:	00015e41 	.word	0x00015e41

0000229c <set_le_scan_enable>:
{
    229c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    229e:	2102      	movs	r1, #2
{
    22a0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    22a2:	f242 000c 	movw	r0, #8204	; 0x200c
    22a6:	f7ff ff27 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    22aa:	4604      	mov	r4, r0
    22ac:	b330      	cbz	r0, 22fc <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    22ae:	2102      	movs	r1, #2
    22b0:	3008      	adds	r0, #8
    22b2:	f011 fa5d 	bl	13770 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    22b6:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    22b8:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    22ba:	d116      	bne.n	22ea <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    22bc:	210b      	movs	r1, #11
    22be:	4811      	ldr	r0, [pc, #68]	; (2304 <set_le_scan_enable+0x68>)
    22c0:	f7ff ff0c 	bl	20dc <atomic_test_bit>
    22c4:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    22c6:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    22c8:	4621      	mov	r1, r4
    22ca:	2200      	movs	r2, #0
    22cc:	f242 000c 	movw	r0, #8204	; 0x200c
    22d0:	f7ff ff70 	bl	21b4 <bt_hci_cmd_send_sync>
	if (err) {
    22d4:	4604      	mov	r4, r0
    22d6:	b930      	cbnz	r0, 22e6 <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    22d8:	2d01      	cmp	r5, #1
    22da:	d109      	bne.n	22f0 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    22dc:	f44f 7180 	mov.w	r1, #256	; 0x100
    22e0:	4808      	ldr	r0, [pc, #32]	; (2304 <set_le_scan_enable+0x68>)
    22e2:	f7ff fe54 	bl	1f8e <atomic_or>
}
    22e6:	4620      	mov	r0, r4
    22e8:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    22ea:	2300      	movs	r3, #0
    22ec:	7043      	strb	r3, [r0, #1]
    22ee:	e7ea      	b.n	22c6 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    22f0:	f46f 7180 	mvn.w	r1, #256	; 0x100
    22f4:	4803      	ldr	r0, [pc, #12]	; (2304 <set_le_scan_enable+0x68>)
    22f6:	f7ff fe5b 	bl	1fb0 <atomic_and>
    22fa:	e7f4      	b.n	22e6 <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    22fc:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2300:	e7f1      	b.n	22e6 <set_le_scan_enable+0x4a>
    2302:	bf00      	nop
    2304:	20003ad8 	.word	0x20003ad8

00002308 <set_random_address>:
{
    2308:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    230a:	4605      	mov	r5, r0
    230c:	f012 fa86 	bl	1481c <_impl_k_current_get>
    2310:	4604      	mov	r4, r0
	BT_DBG("%s", bt_addr_str(addr));
    2312:	4628      	mov	r0, r5
    2314:	f7ff fcf8 	bl	1d08 <bt_addr_str>
    2318:	4b1a      	ldr	r3, [pc, #104]	; (2384 <set_random_address+0x7c>)
	return memcmp(a, b, sizeof(*a));
    231a:	4e1b      	ldr	r6, [pc, #108]	; (2388 <set_random_address+0x80>)
    231c:	9303      	str	r3, [sp, #12]
    231e:	e88d 0018 	stmia.w	sp, {r3, r4}
    2322:	9002      	str	r0, [sp, #8]
    2324:	4b19      	ldr	r3, [pc, #100]	; (238c <set_random_address+0x84>)
    2326:	4a1a      	ldr	r2, [pc, #104]	; (2390 <set_random_address+0x88>)
    2328:	491a      	ldr	r1, [pc, #104]	; (2394 <set_random_address+0x8c>)
    232a:	481b      	ldr	r0, [pc, #108]	; (2398 <set_random_address+0x90>)
    232c:	f7fe fe2e 	bl	f8c <printk>
    2330:	2206      	movs	r2, #6
    2332:	f106 0108 	add.w	r1, r6, #8
    2336:	4628      	mov	r0, r5
    2338:	f7ff fc4b 	bl	1bd2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    233c:	4604      	mov	r4, r0
    233e:	b1d8      	cbz	r0, 2378 <set_random_address+0x70>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2340:	2106      	movs	r1, #6
    2342:	f242 0005 	movw	r0, #8197	; 0x2005
    2346:	f7ff fed7 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    234a:	4604      	mov	r4, r0
    234c:	b1b8      	cbz	r0, 237e <set_random_address+0x76>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    234e:	2206      	movs	r2, #6
    2350:	4629      	mov	r1, r5
    2352:	3008      	adds	r0, #8
    2354:	f011 fa12 	bl	1377c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2358:	4621      	mov	r1, r4
    235a:	2200      	movs	r2, #0
    235c:	f242 0005 	movw	r0, #8197	; 0x2005
    2360:	f7ff ff28 	bl	21b4 <bt_hci_cmd_send_sync>
	if (err) {
    2364:	4604      	mov	r4, r0
    2366:	b938      	cbnz	r0, 2378 <set_random_address+0x70>
	memcpy(dst, src, sizeof(*dst));
    2368:	2206      	movs	r2, #6
    236a:	4629      	mov	r1, r5
    236c:	f106 0008 	add.w	r0, r6, #8
    2370:	f7ff fc44 	bl	1bfc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2374:	2301      	movs	r3, #1
    2376:	71f3      	strb	r3, [r6, #7]
}
    2378:	4620      	mov	r0, r4
    237a:	b004      	add	sp, #16
    237c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    237e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2382:	e7f9      	b.n	2378 <set_random_address+0x70>
    2384:	000153a9 	.word	0x000153a9
    2388:	20003a68 	.word	0x20003a68
    238c:	00015935 	.word	0x00015935
    2390:	000167ad 	.word	0x000167ad
    2394:	000167b4 	.word	0x000167b4
    2398:	00016af4 	.word	0x00016af4

0000239c <set_advertise_enable>:
{
    239c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    239e:	2101      	movs	r1, #1
{
    23a0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    23a2:	f242 000a 	movw	r0, #8202	; 0x200a
    23a6:	f7ff fea7 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    23aa:	4604      	mov	r4, r0
    23ac:	b1d8      	cbz	r0, 23e6 <set_advertise_enable+0x4a>
    23ae:	3008      	adds	r0, #8
	if (enable) {
    23b0:	b18d      	cbz	r5, 23d6 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    23b2:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    23b4:	f011 f9eb 	bl	1378e <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    23b8:	4621      	mov	r1, r4
    23ba:	2200      	movs	r2, #0
    23bc:	f242 000a 	movw	r0, #8202	; 0x200a
    23c0:	f7ff fef8 	bl	21b4 <bt_hci_cmd_send_sync>
	if (err) {
    23c4:	4604      	mov	r4, r0
    23c6:	b920      	cbnz	r0, 23d2 <set_advertise_enable+0x36>
	if (enable) {
    23c8:	b13d      	cbz	r5, 23da <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    23ca:	2140      	movs	r1, #64	; 0x40
    23cc:	4807      	ldr	r0, [pc, #28]	; (23ec <set_advertise_enable+0x50>)
    23ce:	f7ff fdde 	bl	1f8e <atomic_or>
}
    23d2:	4620      	mov	r0, r4
    23d4:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    23d6:	4629      	mov	r1, r5
    23d8:	e7ec      	b.n	23b4 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    23da:	f06f 0140 	mvn.w	r1, #64	; 0x40
    23de:	4803      	ldr	r0, [pc, #12]	; (23ec <set_advertise_enable+0x50>)
    23e0:	f7ff fde6 	bl	1fb0 <atomic_and>
    23e4:	e7f5      	b.n	23d2 <set_advertise_enable+0x36>
		return -ENOBUFS;
    23e6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    23ea:	e7f2      	b.n	23d2 <set_advertise_enable+0x36>
    23ec:	20003ad8 	.word	0x20003ad8

000023f0 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    23f0:	8802      	ldrh	r2, [r0, #0]
    23f2:	8843      	ldrh	r3, [r0, #2]
    23f4:	429a      	cmp	r2, r3
{
    23f6:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    23f8:	d818      	bhi.n	242c <bt_le_conn_params_valid+0x3c>
    23fa:	2a05      	cmp	r2, #5
    23fc:	d916      	bls.n	242c <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    23fe:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    2402:	d813      	bhi.n	242c <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    2404:	8884      	ldrh	r4, [r0, #4]
    2406:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    240a:	d20f      	bcs.n	242c <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    240c:	88c1      	ldrh	r1, [r0, #6]
    240e:	f1a1 020a 	sub.w	r2, r1, #10
    2412:	b292      	uxth	r2, r2
    2414:	f640 4076 	movw	r0, #3190	; 0xc76
    2418:	4282      	cmp	r2, r0
    241a:	d807      	bhi.n	242c <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    241c:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    2420:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    2424:	bfb4      	ite	lt
    2426:	2001      	movlt	r0, #1
    2428:	2000      	movge	r0, #0
    242a:	bd10      	pop	{r4, pc}
		return false;
    242c:	2000      	movs	r0, #0
}
    242e:	bd10      	pop	{r4, pc}

00002430 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    2430:	2301      	movs	r3, #1
{
    2432:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2434:	2106      	movs	r1, #6
{
    2436:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    2438:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    243c:	f006 f99e 	bl	877c <bt_rand>
	if (err) {
    2440:	b918      	cbnz	r0, 244a <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    2442:	79a3      	ldrb	r3, [r4, #6]
    2444:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2448:	71a3      	strb	r3, [r4, #6]
}
    244a:	bd10      	pop	{r4, pc}

0000244c <bt_set_static_addr>:
{
    244c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    244e:	4c11      	ldr	r4, [pc, #68]	; (2494 <bt_set_static_addr+0x48>)
    2450:	7823      	ldrb	r3, [r4, #0]
    2452:	2b01      	cmp	r3, #1
    2454:	d104      	bne.n	2460 <bt_set_static_addr+0x14>
    2456:	79a3      	ldrb	r3, [r4, #6]
    2458:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    245c:	2bc0      	cmp	r3, #192	; 0xc0
    245e:	d00d      	beq.n	247c <bt_set_static_addr+0x30>
		BT_ERR("Only static random address supported as identity");
    2460:	4b0d      	ldr	r3, [pc, #52]	; (2498 <bt_set_static_addr+0x4c>)
    2462:	9301      	str	r3, [sp, #4]
    2464:	9300      	str	r3, [sp, #0]
    2466:	4a0d      	ldr	r2, [pc, #52]	; (249c <bt_set_static_addr+0x50>)
    2468:	4b0d      	ldr	r3, [pc, #52]	; (24a0 <bt_set_static_addr+0x54>)
    246a:	490e      	ldr	r1, [pc, #56]	; (24a4 <bt_set_static_addr+0x58>)
    246c:	480e      	ldr	r0, [pc, #56]	; (24a8 <bt_set_static_addr+0x5c>)
    246e:	f7fe fd8d 	bl	f8c <printk>
    2472:	f06f 0515 	mvn.w	r5, #21
}
    2476:	4628      	mov	r0, r5
    2478:	b003      	add	sp, #12
    247a:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    247c:	1c60      	adds	r0, r4, #1
    247e:	f7ff ff43 	bl	2308 <set_random_address>
	if (err) {
    2482:	4605      	mov	r5, r0
    2484:	2800      	cmp	r0, #0
    2486:	d1f6      	bne.n	2476 <bt_set_static_addr+0x2a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2488:	2104      	movs	r1, #4
    248a:	f104 0070 	add.w	r0, r4, #112	; 0x70
    248e:	f7ff fd7e 	bl	1f8e <atomic_or>
	return 0;
    2492:	e7f0      	b.n	2476 <bt_set_static_addr+0x2a>
    2494:	20003a68 	.word	0x20003a68
    2498:	000153a9 	.word	0x000153a9
    249c:	00016765 	.word	0x00016765
    24a0:	00015bac 	.word	0x00015bac
    24a4:	000167b4 	.word	0x000167b4
    24a8:	0001676c 	.word	0x0001676c

000024ac <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    24ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    24b0:	4d1d      	ldr	r5, [pc, #116]	; (2528 <bt_dev_show_info+0x7c>)
    24b2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2544 <bt_dev_show_info+0x98>
    24b6:	4f1d      	ldr	r7, [pc, #116]	; (252c <bt_dev_show_info+0x80>)
    24b8:	4e1d      	ldr	r6, [pc, #116]	; (2530 <bt_dev_show_info+0x84>)
    24ba:	4c1e      	ldr	r4, [pc, #120]	; (2534 <bt_dev_show_info+0x88>)
{
    24bc:	b087      	sub	sp, #28
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    24be:	4628      	mov	r0, r5
    24c0:	f7ff fc48 	bl	1d54 <bt_addr_le_str>
    24c4:	4643      	mov	r3, r8
    24c6:	463a      	mov	r2, r7
    24c8:	4631      	mov	r1, r6
    24ca:	9001      	str	r0, [sp, #4]
    24cc:	9402      	str	r4, [sp, #8]
    24ce:	9400      	str	r4, [sp, #0]
    24d0:	4819      	ldr	r0, [pc, #100]	; (2538 <bt_dev_show_info+0x8c>)
    24d2:	f7fe fd5b 	bl	f8c <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    24d6:	f895 900e 	ldrb.w	r9, [r5, #14]
    24da:	4648      	mov	r0, r9
    24dc:	f7ff fd38 	bl	1f50 <ver_str>
    24e0:	8aab      	ldrh	r3, [r5, #20]
    24e2:	9304      	str	r3, [sp, #16]
    24e4:	8a2b      	ldrh	r3, [r5, #16]
    24e6:	9303      	str	r3, [sp, #12]
    24e8:	463a      	mov	r2, r7
    24ea:	4643      	mov	r3, r8
    24ec:	4631      	mov	r1, r6
    24ee:	f8cd 9008 	str.w	r9, [sp, #8]
    24f2:	9001      	str	r0, [sp, #4]
    24f4:	9405      	str	r4, [sp, #20]
    24f6:	9400      	str	r4, [sp, #0]
    24f8:	4810      	ldr	r0, [pc, #64]	; (253c <bt_dev_show_info+0x90>)
    24fa:	f7fe fd47 	bl	f8c <printk>
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    24fe:	f895 900f 	ldrb.w	r9, [r5, #15]
    2502:	4648      	mov	r0, r9
    2504:	f7ff fd24 	bl	1f50 <ver_str>
    2508:	8a6b      	ldrh	r3, [r5, #18]
    250a:	9303      	str	r3, [sp, #12]
    250c:	9001      	str	r0, [sp, #4]
    250e:	9404      	str	r4, [sp, #16]
    2510:	f8cd 9008 	str.w	r9, [sp, #8]
    2514:	9400      	str	r4, [sp, #0]
    2516:	4643      	mov	r3, r8
    2518:	463a      	mov	r2, r7
    251a:	4631      	mov	r1, r6
    251c:	4808      	ldr	r0, [pc, #32]	; (2540 <bt_dev_show_info+0x94>)
    251e:	f7fe fd35 	bl	f8c <printk>
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    2522:	b007      	add	sp, #28
    2524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2528:	20003a68 	.word	0x20003a68
    252c:	00015c6a 	.word	0x00015c6a
    2530:	000167b4 	.word	0x000167b4
    2534:	000153a9 	.word	0x000153a9
    2538:	00015c71 	.word	0x00015c71
    253c:	00015c8e 	.word	0x00015c8e
    2540:	00015cdc 	.word	0x00015cdc
    2544:	00015bcd 	.word	0x00015bcd

00002548 <bt_send>:

	return 0;
}

int bt_send(struct net_buf *buf)
{
    2548:	b510      	push	{r4, lr}
    254a:	4604      	mov	r4, r0
    254c:	b086      	sub	sp, #24
    254e:	f012 f965 	bl	1481c <_impl_k_current_get>
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));
    2552:	7d22      	ldrb	r2, [r4, #20]
    2554:	4b0b      	ldr	r3, [pc, #44]	; (2584 <bt_send+0x3c>)
    2556:	9204      	str	r2, [sp, #16]
    2558:	89a2      	ldrh	r2, [r4, #12]
    255a:	9305      	str	r3, [sp, #20]
    255c:	9203      	str	r2, [sp, #12]
    255e:	9001      	str	r0, [sp, #4]
    2560:	9300      	str	r3, [sp, #0]
    2562:	9402      	str	r4, [sp, #8]
    2564:	4b08      	ldr	r3, [pc, #32]	; (2588 <bt_send+0x40>)
    2566:	4a09      	ldr	r2, [pc, #36]	; (258c <bt_send+0x44>)
    2568:	4909      	ldr	r1, [pc, #36]	; (2590 <bt_send+0x48>)
    256a:	480a      	ldr	r0, [pc, #40]	; (2594 <bt_send+0x4c>)
    256c:	f7fe fd0e 	bl	f8c <printk>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2570:	4b09      	ldr	r3, [pc, #36]	; (2598 <bt_send+0x50>)
    2572:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    2576:	691b      	ldr	r3, [r3, #16]
    2578:	4620      	mov	r0, r4
}
    257a:	b006      	add	sp, #24
    257c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_dev.drv->send(buf);
    2580:	4718      	bx	r3
    2582:	bf00      	nop
    2584:	000153a9 	.word	0x000153a9
    2588:	00015bf3 	.word	0x00015bf3
    258c:	000167ad 	.word	0x000167ad
    2590:	000167b4 	.word	0x000167b4
    2594:	0001673a 	.word	0x0001673a
    2598:	20003a68 	.word	0x20003a68

0000259c <bt_hci_cmd_send>:
{
    259c:	b570      	push	{r4, r5, r6, lr}
    259e:	4605      	mov	r5, r0
    25a0:	b086      	sub	sp, #24
	if (!buf) {
    25a2:	460c      	mov	r4, r1
    25a4:	b921      	cbnz	r1, 25b0 <bt_hci_cmd_send+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    25a6:	f7ff fda7 	bl	20f8 <bt_hci_cmd_create>
		if (!buf) {
    25aa:	4604      	mov	r4, r0
    25ac:	2800      	cmp	r0, #0
    25ae:	d02c      	beq.n	260a <bt_hci_cmd_send+0x6e>
    25b0:	f012 f934 	bl	1481c <_impl_k_current_get>
	BT_DBG("opcode 0x%04x len %u", opcode, buf->len);
    25b4:	4e16      	ldr	r6, [pc, #88]	; (2610 <bt_hci_cmd_send+0x74>)
    25b6:	9604      	str	r6, [sp, #16]
    25b8:	89a3      	ldrh	r3, [r4, #12]
    25ba:	9303      	str	r3, [sp, #12]
    25bc:	9001      	str	r0, [sp, #4]
    25be:	4b15      	ldr	r3, [pc, #84]	; (2614 <bt_hci_cmd_send+0x78>)
    25c0:	9502      	str	r5, [sp, #8]
    25c2:	9600      	str	r6, [sp, #0]
    25c4:	4a14      	ldr	r2, [pc, #80]	; (2618 <bt_hci_cmd_send+0x7c>)
    25c6:	4915      	ldr	r1, [pc, #84]	; (261c <bt_hci_cmd_send+0x80>)
    25c8:	4815      	ldr	r0, [pc, #84]	; (2620 <bt_hci_cmd_send+0x84>)
    25ca:	f7fe fcdf 	bl	f8c <printk>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    25ce:	f640 4335 	movw	r3, #3125	; 0xc35
    25d2:	429d      	cmp	r5, r3
    25d4:	d113      	bne.n	25fe <bt_hci_cmd_send+0x62>
		err = bt_send(buf);
    25d6:	4620      	mov	r0, r4
    25d8:	f7ff ffb6 	bl	2548 <bt_send>
		if (err) {
    25dc:	4605      	mov	r5, r0
    25de:	b158      	cbz	r0, 25f8 <bt_hci_cmd_send+0x5c>
			BT_ERR("Unable to send to driver (err %d)", err);
    25e0:	9001      	str	r0, [sp, #4]
    25e2:	9602      	str	r6, [sp, #8]
    25e4:	9600      	str	r6, [sp, #0]
    25e6:	4b0b      	ldr	r3, [pc, #44]	; (2614 <bt_hci_cmd_send+0x78>)
    25e8:	4a0e      	ldr	r2, [pc, #56]	; (2624 <bt_hci_cmd_send+0x88>)
    25ea:	490c      	ldr	r1, [pc, #48]	; (261c <bt_hci_cmd_send+0x80>)
    25ec:	480e      	ldr	r0, [pc, #56]	; (2628 <bt_hci_cmd_send+0x8c>)
    25ee:	f7fe fccd 	bl	f8c <printk>
			net_buf_unref(buf);
    25f2:	4620      	mov	r0, r4
    25f4:	f011 f88a 	bl	1370c <net_buf_unref>
}
    25f8:	4628      	mov	r0, r5
    25fa:	b006      	add	sp, #24
    25fc:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    25fe:	4621      	mov	r1, r4
    2600:	480a      	ldr	r0, [pc, #40]	; (262c <bt_hci_cmd_send+0x90>)
    2602:	f011 f876 	bl	136f2 <net_buf_put>
	return 0;
    2606:	2500      	movs	r5, #0
    2608:	e7f6      	b.n	25f8 <bt_hci_cmd_send+0x5c>
			return -ENOBUFS;
    260a:	f06f 0536 	mvn.w	r5, #54	; 0x36
    260e:	e7f3      	b.n	25f8 <bt_hci_cmd_send+0x5c>
    2610:	000153a9 	.word	0x000153a9
    2614:	00015910 	.word	0x00015910
    2618:	000167ad 	.word	0x000167ad
    261c:	000167b4 	.word	0x000167b4
    2620:	00015db4 	.word	0x00015db4
    2624:	00016765 	.word	0x00016765
    2628:	00015dde 	.word	0x00015dde
    262c:	20003b2c 	.word	0x20003b2c

00002630 <start_le_scan>:
{
    2630:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2632:	460d      	mov	r5, r1
    2634:	4614      	mov	r4, r2
    2636:	4606      	mov	r6, r0
	memset(&set_param, 0, sizeof(set_param));
    2638:	2207      	movs	r2, #7
    263a:	2100      	movs	r1, #0
    263c:	4668      	mov	r0, sp
    263e:	f7ff fb09 	bl	1c54 <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    2642:	f8ad 5001 	strh.w	r5, [sp, #1]
		set_param.addr_type =  bt_dev.id_addr.type;
    2646:	4d1b      	ldr	r5, [pc, #108]	; (26b4 <start_le_scan+0x84>)
	set_param.window = sys_cpu_to_le16(window);
    2648:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.filter_policy = 0x00;
    264c:	2300      	movs	r3, #0
    264e:	f88d 3006 	strb.w	r3, [sp, #6]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    2652:	2107      	movs	r1, #7
		set_param.addr_type =  bt_dev.id_addr.type;
    2654:	782b      	ldrb	r3, [r5, #0]
	set_param.scan_type = scan_type;
    2656:	f88d 6000 	strb.w	r6, [sp]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    265a:	f242 000b 	movw	r0, #8203	; 0x200b
		set_param.addr_type =  bt_dev.id_addr.type;
    265e:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    2662:	f7ff fd49 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2666:	4604      	mov	r4, r0
    2668:	b300      	cbz	r0, 26ac <start_le_scan+0x7c>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    266a:	2207      	movs	r2, #7
    266c:	4669      	mov	r1, sp
    266e:	3008      	adds	r0, #8
    2670:	f011 f884 	bl	1377c <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    2674:	4621      	mov	r1, r4
    2676:	f242 000b 	movw	r0, #8203	; 0x200b
    267a:	f7ff ff8f 	bl	259c <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    267e:	2001      	movs	r0, #1
    2680:	f7ff fe0c 	bl	229c <set_le_scan_enable>
	if (err) {
    2684:	4604      	mov	r4, r0
    2686:	b938      	cbnz	r0, 2698 <start_le_scan+0x68>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    2688:	2e01      	cmp	r6, #1
    268a:	d108      	bne.n	269e <start_le_scan+0x6e>
    268c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2690:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2694:	f7ff fc7b 	bl	1f8e <atomic_or>
}
    2698:	4620      	mov	r0, r4
    269a:	b002      	add	sp, #8
    269c:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    269e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    26a2:	f105 0070 	add.w	r0, r5, #112	; 0x70
    26a6:	f7ff fc83 	bl	1fb0 <atomic_and>
    26aa:	e7f5      	b.n	2698 <start_le_scan+0x68>
		return -ENOBUFS;
    26ac:	f06f 0436 	mvn.w	r4, #54	; 0x36
    26b0:	e7f2      	b.n	2698 <start_le_scan+0x68>
    26b2:	bf00      	nop
    26b4:	20003a68 	.word	0x20003a68

000026b8 <bt_le_scan_update>:
{
    26b8:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    26ba:	2109      	movs	r1, #9
{
    26bc:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    26be:	4816      	ldr	r0, [pc, #88]	; (2718 <bt_le_scan_update+0x60>)
    26c0:	f7ff fd0c 	bl	20dc <atomic_test_bit>
    26c4:	4602      	mov	r2, r0
    26c6:	b108      	cbz	r0, 26cc <bt_le_scan_update+0x14>
		return 0;
    26c8:	2000      	movs	r0, #0
    26ca:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    26cc:	2108      	movs	r1, #8
    26ce:	4812      	ldr	r0, [pc, #72]	; (2718 <bt_le_scan_update+0x60>)
    26d0:	f7ff fd04 	bl	20dc <atomic_test_bit>
    26d4:	b9d0      	cbnz	r0, 270c <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    26d6:	2101      	movs	r1, #1
    26d8:	2000      	movs	r0, #0
    26da:	f002 f907 	bl	48ec <bt_conn_lookup_state_le>
		if (!conn) {
    26de:	4604      	mov	r4, r0
    26e0:	2800      	cmp	r0, #0
    26e2:	d0f1      	beq.n	26c8 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    26e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    26e8:	480b      	ldr	r0, [pc, #44]	; (2718 <bt_le_scan_update+0x60>)
    26ea:	f7ff fc50 	bl	1f8e <atomic_or>
		bt_conn_unref(conn);
    26ee:	4620      	mov	r0, r4
    26f0:	f002 f91a 	bl	4928 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    26f4:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    26f6:	bf15      	itete	ne
    26f8:	2230      	movne	r2, #48	; 0x30
    26fa:	2212      	moveq	r2, #18
    26fc:	2160      	movne	r1, #96	; 0x60
    26fe:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    2702:	2000      	movs	r0, #0
}
    2704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    2708:	f7ff bf92 	b.w	2630 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    270c:	4610      	mov	r0, r2
    270e:	f7ff fdc5 	bl	229c <set_le_scan_enable>
		if (err) {
    2712:	2800      	cmp	r0, #0
    2714:	d0df      	beq.n	26d6 <bt_le_scan_update+0x1e>
    2716:	bd38      	pop	{r3, r4, r5, pc}
    2718:	20003ad8 	.word	0x20003ad8

0000271c <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    271c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2720:	4e71      	ldr	r6, [pc, #452]	; (28e8 <bt_init+0x1cc>)
    2722:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
    2726:	6899      	ldr	r1, [r3, #8]
    2728:	f011 0101 	ands.w	r1, r1, #1
{
    272c:	b08f      	sub	sp, #60	; 0x3c
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    272e:	d131      	bne.n	2794 <bt_init+0x78>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2730:	aa0c      	add	r2, sp, #48	; 0x30
    2732:	f640 4003 	movw	r0, #3075	; 0xc03
    2736:	f7ff fd3d 	bl	21b4 <bt_hci_cmd_send_sync>
		if (err) {
    273a:	4605      	mov	r5, r0
    273c:	2800      	cmp	r0, #0
    273e:	f040 80ce 	bne.w	28de <bt_init+0x1c2>
	u8_t status = buf->data[0];
    2742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2744:	689b      	ldr	r3, [r3, #8]
    2746:	781c      	ldrb	r4, [r3, #0]
    2748:	f012 f868 	bl	1481c <_impl_k_current_get>
	BT_DBG("status %u", status);
    274c:	4b67      	ldr	r3, [pc, #412]	; (28ec <bt_init+0x1d0>)
    274e:	9303      	str	r3, [sp, #12]
    2750:	9001      	str	r0, [sp, #4]
    2752:	9300      	str	r3, [sp, #0]
    2754:	9402      	str	r4, [sp, #8]
    2756:	4b66      	ldr	r3, [pc, #408]	; (28f0 <bt_init+0x1d4>)
    2758:	4a66      	ldr	r2, [pc, #408]	; (28f4 <bt_init+0x1d8>)
    275a:	4967      	ldr	r1, [pc, #412]	; (28f8 <bt_init+0x1dc>)
    275c:	4867      	ldr	r0, [pc, #412]	; (28fc <bt_init+0x1e0>)
    275e:	f7fe fc15 	bl	f8c <printk>
	if (status) {
    2762:	b9a4      	cbnz	r4, 278e <bt_init+0x72>
	scan_dev_found_cb = NULL;
    2764:	4b66      	ldr	r3, [pc, #408]	; (2900 <bt_init+0x1e4>)
    2766:	601c      	str	r4, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2768:	4633      	mov	r3, r6
    276a:	f3bf 8f5b 	dmb	ish
    276e:	f853 2f70 	ldr.w	r2, [r3, #112]!
    2772:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2776:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    277a:	f3bf 8f5b 	dmb	ish
    277e:	e853 1f00 	ldrex	r1, [r3]
    2782:	e843 2000 	strex	r0, r2, [r3]
    2786:	2800      	cmp	r0, #0
    2788:	d1f9      	bne.n	277e <bt_init+0x62>
    278a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    278e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2790:	f010 ffbc 	bl	1370c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2794:	aa0c      	add	r2, sp, #48	; 0x30
    2796:	2100      	movs	r1, #0
    2798:	f241 0003 	movw	r0, #4099	; 0x1003
    279c:	f7ff fd0a 	bl	21b4 <bt_hci_cmd_send_sync>
	if (err) {
    27a0:	4605      	mov	r5, r0
    27a2:	2800      	cmp	r0, #0
    27a4:	f040 809b 	bne.w	28de <bt_init+0x1c2>
    27a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    27aa:	4c50      	ldr	r4, [pc, #320]	; (28ec <bt_init+0x1d0>)
    27ac:	689f      	ldr	r7, [r3, #8]
    27ae:	f012 f835 	bl	1481c <_impl_k_current_get>
    27b2:	9403      	str	r4, [sp, #12]
    27b4:	f817 3b01 	ldrb.w	r3, [r7], #1
    27b8:	9302      	str	r3, [sp, #8]
    27ba:	9001      	str	r0, [sp, #4]
    27bc:	4b51      	ldr	r3, [pc, #324]	; (2904 <bt_init+0x1e8>)
    27be:	4a4d      	ldr	r2, [pc, #308]	; (28f4 <bt_init+0x1d8>)
    27c0:	494d      	ldr	r1, [pc, #308]	; (28f8 <bt_init+0x1dc>)
    27c2:	9400      	str	r4, [sp, #0]
    27c4:	484d      	ldr	r0, [pc, #308]	; (28fc <bt_init+0x1e0>)
    27c6:	f7fe fbe1 	bl	f8c <printk>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    27ca:	2208      	movs	r2, #8
    27cc:	4639      	mov	r1, r7
    27ce:	484e      	ldr	r0, [pc, #312]	; (2908 <bt_init+0x1ec>)
    27d0:	f7ff fa14 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    27d4:	980c      	ldr	r0, [sp, #48]	; 0x30
    27d6:	f010 ff99 	bl	1370c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    27da:	4629      	mov	r1, r5
    27dc:	aa0c      	add	r2, sp, #48	; 0x30
    27de:	f241 0001 	movw	r0, #4097	; 0x1001
    27e2:	f7ff fce7 	bl	21b4 <bt_hci_cmd_send_sync>
	if (err) {
    27e6:	4605      	mov	r5, r0
    27e8:	2800      	cmp	r0, #0
    27ea:	d178      	bne.n	28de <bt_init+0x1c2>
    27ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    27ee:	689d      	ldr	r5, [r3, #8]
    27f0:	f012 f814 	bl	1481c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    27f4:	9403      	str	r4, [sp, #12]
    27f6:	782b      	ldrb	r3, [r5, #0]
    27f8:	493f      	ldr	r1, [pc, #252]	; (28f8 <bt_init+0x1dc>)
    27fa:	9302      	str	r3, [sp, #8]
    27fc:	9001      	str	r0, [sp, #4]
    27fe:	4b43      	ldr	r3, [pc, #268]	; (290c <bt_init+0x1f0>)
    2800:	4a3c      	ldr	r2, [pc, #240]	; (28f4 <bt_init+0x1d8>)
    2802:	9400      	str	r4, [sp, #0]
    2804:	483d      	ldr	r0, [pc, #244]	; (28fc <bt_init+0x1e0>)
    2806:	f7fe fbc1 	bl	f8c <printk>
	bt_dev.hci_version = rp->hci_version;
    280a:	786b      	ldrb	r3, [r5, #1]
    280c:	73b3      	strb	r3, [r6, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    280e:	78ea      	ldrb	r2, [r5, #3]
    2810:	78ab      	ldrb	r3, [r5, #2]
	net_buf_unref(rsp);
    2812:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2814:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2818:	8233      	strh	r3, [r6, #16]
	bt_dev.lmp_version = rp->lmp_version;
    281a:	792b      	ldrb	r3, [r5, #4]
    281c:	73f3      	strb	r3, [r6, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    281e:	7a2a      	ldrb	r2, [r5, #8]
    2820:	79eb      	ldrb	r3, [r5, #7]
    2822:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2826:	8273      	strh	r3, [r6, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2828:	79aa      	ldrb	r2, [r5, #6]
    282a:	796b      	ldrb	r3, [r5, #5]
    282c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2830:	82b3      	strh	r3, [r6, #20]
	net_buf_unref(rsp);
    2832:	f010 ff6b 	bl	1370c <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    2836:	2103      	movs	r1, #3
    2838:	4835      	ldr	r0, [pc, #212]	; (2910 <bt_init+0x1f4>)
    283a:	f7ff fc4f 	bl	20dc <atomic_test_bit>
    283e:	4601      	mov	r1, r0
    2840:	bb00      	cbnz	r0, 2884 <bt_init+0x168>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2842:	aa0c      	add	r2, sp, #48	; 0x30
    2844:	f241 0009 	movw	r0, #4105	; 0x1009
    2848:	f7ff fcb4 	bl	21b4 <bt_hci_cmd_send_sync>
		if (err) {
    284c:	4605      	mov	r5, r0
    284e:	2800      	cmp	r0, #0
    2850:	d145      	bne.n	28de <bt_init+0x1c2>
    2852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2854:	689f      	ldr	r7, [r3, #8]
    2856:	f011 ffe1 	bl	1481c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    285a:	9403      	str	r4, [sp, #12]
    285c:	f817 3b01 	ldrb.w	r3, [r7], #1
    2860:	9302      	str	r3, [sp, #8]
    2862:	9001      	str	r0, [sp, #4]
    2864:	4b2b      	ldr	r3, [pc, #172]	; (2914 <bt_init+0x1f8>)
    2866:	4a23      	ldr	r2, [pc, #140]	; (28f4 <bt_init+0x1d8>)
    2868:	4923      	ldr	r1, [pc, #140]	; (28f8 <bt_init+0x1dc>)
    286a:	9400      	str	r4, [sp, #0]
    286c:	4823      	ldr	r0, [pc, #140]	; (28fc <bt_init+0x1e0>)
    286e:	f7fe fb8d 	bl	f8c <printk>
    2872:	2206      	movs	r2, #6
    2874:	4639      	mov	r1, r7
    2876:	4828      	ldr	r0, [pc, #160]	; (2918 <bt_init+0x1fc>)
    2878:	f7ff f9c0 	bl	1bfc <memcpy>
		net_buf_unref(rsp);
    287c:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    287e:	7035      	strb	r5, [r6, #0]
		net_buf_unref(rsp);
    2880:	f010 ff44 	bl	1370c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2884:	aa0c      	add	r2, sp, #48	; 0x30
    2886:	2100      	movs	r1, #0
    2888:	f241 0002 	movw	r0, #4098	; 0x1002
    288c:	f7ff fc92 	bl	21b4 <bt_hci_cmd_send_sync>
	if (err) {
    2890:	4605      	mov	r5, r0
    2892:	bb20      	cbnz	r0, 28de <bt_init+0x1c2>
    2894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2896:	689f      	ldr	r7, [r3, #8]
    2898:	f011 ffc0 	bl	1481c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    289c:	9403      	str	r4, [sp, #12]
    289e:	f817 3b01 	ldrb.w	r3, [r7], #1
    28a2:	9302      	str	r3, [sp, #8]
    28a4:	9001      	str	r0, [sp, #4]
    28a6:	4b1d      	ldr	r3, [pc, #116]	; (291c <bt_init+0x200>)
    28a8:	4a12      	ldr	r2, [pc, #72]	; (28f4 <bt_init+0x1d8>)
    28aa:	4913      	ldr	r1, [pc, #76]	; (28f8 <bt_init+0x1dc>)
    28ac:	9400      	str	r4, [sp, #0]
    28ae:	4813      	ldr	r0, [pc, #76]	; (28fc <bt_init+0x1e0>)
    28b0:	f7fe fb6c 	bl	f8c <printk>
	memcpy(bt_dev.supported_commands, rp->commands,
    28b4:	4639      	mov	r1, r7
    28b6:	2240      	movs	r2, #64	; 0x40
    28b8:	4819      	ldr	r0, [pc, #100]	; (2920 <bt_init+0x204>)
    28ba:	f7ff f99f 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    28be:	980c      	ldr	r0, [sp, #48]	; 0x30
    28c0:	f010 ff24 	bl	1370c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    28c4:	7eb3      	ldrb	r3, [r6, #26]
    28c6:	0659      	lsls	r1, r3, #25
    28c8:	d432      	bmi.n	2930 <bt_init+0x214>
		BT_ERR("Non-LE capable controller detected!");
    28ca:	9401      	str	r4, [sp, #4]
    28cc:	9400      	str	r4, [sp, #0]
    28ce:	4b15      	ldr	r3, [pc, #84]	; (2924 <bt_init+0x208>)
    28d0:	4a15      	ldr	r2, [pc, #84]	; (2928 <bt_init+0x20c>)
    28d2:	4909      	ldr	r1, [pc, #36]	; (28f8 <bt_init+0x1dc>)
    28d4:	4815      	ldr	r0, [pc, #84]	; (292c <bt_init+0x210>)
    28d6:	f7fe fb59 	bl	f8c <printk>
		return -ENODEV;
    28da:	f06f 0512 	mvn.w	r5, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    28de:	4628      	mov	r0, r5
    28e0:	b00f      	add	sp, #60	; 0x3c
    28e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    28e6:	bf00      	nop
    28e8:	20003a68 	.word	0x20003a68
    28ec:	000153a9 	.word	0x000153a9
    28f0:	00015a3b 	.word	0x00015a3b
    28f4:	000167ad 	.word	0x000167ad
    28f8:	000167b4 	.word	0x000167b4
    28fc:	00015e95 	.word	0x00015e95
    2900:	200002d8 	.word	0x200002d8
    2904:	00015b6a 	.word	0x00015b6a
    2908:	20003a7e 	.word	0x20003a7e
    290c:	00015acb 	.word	0x00015acb
    2910:	20003ad8 	.word	0x20003ad8
    2914:	00015ae3 	.word	0x00015ae3
    2918:	20003a69 	.word	0x20003a69
    291c:	00015b49 	.word	0x00015b49
    2920:	20003a86 	.word	0x20003a86
    2924:	00015ba4 	.word	0x00015ba4
    2928:	00016765 	.word	0x00016765
    292c:	00015eb4 	.word	0x00015eb4
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2930:	4629      	mov	r1, r5
    2932:	aa0c      	add	r2, sp, #48	; 0x30
    2934:	f242 0003 	movw	r0, #8195	; 0x2003
    2938:	f7ff fc3c 	bl	21b4 <bt_hci_cmd_send_sync>
	if (err) {
    293c:	4605      	mov	r5, r0
    293e:	2800      	cmp	r0, #0
    2940:	d1cd      	bne.n	28de <bt_init+0x1c2>
    2942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2944:	689f      	ldr	r7, [r3, #8]
    2946:	f011 ff69 	bl	1481c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    294a:	9403      	str	r4, [sp, #12]
    294c:	f817 3b01 	ldrb.w	r3, [r7], #1
    2950:	9302      	str	r3, [sp, #8]
    2952:	9001      	str	r0, [sp, #4]
    2954:	4bb3      	ldr	r3, [pc, #716]	; (2c24 <bt_init+0x508>)
    2956:	4ab4      	ldr	r2, [pc, #720]	; (2c28 <bt_init+0x50c>)
    2958:	49b4      	ldr	r1, [pc, #720]	; (2c2c <bt_init+0x510>)
    295a:	9400      	str	r4, [sp, #0]
    295c:	48b4      	ldr	r0, [pc, #720]	; (2c30 <bt_init+0x514>)
    295e:	f7fe fb15 	bl	f8c <printk>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2962:	2208      	movs	r2, #8
    2964:	4639      	mov	r1, r7
    2966:	48b3      	ldr	r0, [pc, #716]	; (2c34 <bt_init+0x518>)
    2968:	f7ff f948 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    296c:	980c      	ldr	r0, [sp, #48]	; 0x30
    296e:	f010 fecd 	bl	1370c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2972:	4629      	mov	r1, r5
    2974:	aa0c      	add	r2, sp, #48	; 0x30
    2976:	f242 0002 	movw	r0, #8194	; 0x2002
    297a:	f7ff fc1b 	bl	21b4 <bt_hci_cmd_send_sync>
	if (err) {
    297e:	4605      	mov	r5, r0
    2980:	2800      	cmp	r0, #0
    2982:	d1ac      	bne.n	28de <bt_init+0x1c2>
    2984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2986:	689d      	ldr	r5, [r3, #8]
    2988:	f011 ff48 	bl	1481c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    298c:	9403      	str	r4, [sp, #12]
    298e:	782b      	ldrb	r3, [r5, #0]
    2990:	9302      	str	r3, [sp, #8]
    2992:	9001      	str	r0, [sp, #4]
    2994:	4ba8      	ldr	r3, [pc, #672]	; (2c38 <bt_init+0x51c>)
    2996:	9400      	str	r4, [sp, #0]
    2998:	4aa3      	ldr	r2, [pc, #652]	; (2c28 <bt_init+0x50c>)
    299a:	49a4      	ldr	r1, [pc, #656]	; (2c2c <bt_init+0x510>)
    299c:	48a4      	ldr	r0, [pc, #656]	; (2c30 <bt_init+0x514>)
    299e:	f7fe faf5 	bl	f8c <printk>
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    29a2:	f8b5 3001 	ldrh.w	r3, [r5, #1]
    29a6:	f8a6 3088 	strh.w	r3, [r6, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    29aa:	b1bb      	cbz	r3, 29dc <bt_init+0x2c0>
    29ac:	f011 ff36 	bl	1481c <_impl_k_current_get>
	BT_DBG("ACL LE buffers: pkts %u mtu %u", rp->le_max_num, bt_dev.le.mtu);
    29b0:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    29b4:	9404      	str	r4, [sp, #16]
    29b6:	9303      	str	r3, [sp, #12]
    29b8:	78eb      	ldrb	r3, [r5, #3]
    29ba:	9302      	str	r3, [sp, #8]
    29bc:	9001      	str	r0, [sp, #4]
    29be:	4a9a      	ldr	r2, [pc, #616]	; (2c28 <bt_init+0x50c>)
    29c0:	499a      	ldr	r1, [pc, #616]	; (2c2c <bt_init+0x510>)
    29c2:	9400      	str	r4, [sp, #0]
    29c4:	4b9c      	ldr	r3, [pc, #624]	; (2c38 <bt_init+0x51c>)
    29c6:	489d      	ldr	r0, [pc, #628]	; (2c3c <bt_init+0x520>)
    29c8:	f7fe fae0 	bl	f8c <printk>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    29cc:	78ea      	ldrb	r2, [r5, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    29ce:	489c      	ldr	r0, [pc, #624]	; (2c40 <bt_init+0x524>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    29d0:	2a02      	cmp	r2, #2
    29d2:	bf28      	it	cs
    29d4:	2202      	movcs	r2, #2
    29d6:	4611      	mov	r1, r2
    29d8:	f011 ff26 	bl	14828 <_impl_k_sem_init>
	net_buf_unref(rsp);
    29dc:	980c      	ldr	r0, [sp, #48]	; 0x30
    29de:	f010 fe95 	bl	1370c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    29e2:	7eb5      	ldrb	r5, [r6, #26]
    29e4:	f015 0520 	ands.w	r5, r5, #32
    29e8:	f000 8100 	beq.w	2bec <bt_init+0x4d0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    29ec:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    29f0:	071a      	lsls	r2, r3, #28
    29f2:	d523      	bpl.n	2a3c <bt_init+0x320>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    29f4:	aa0c      	add	r2, sp, #48	; 0x30
    29f6:	2100      	movs	r1, #0
    29f8:	f242 001c 	movw	r0, #8220	; 0x201c
    29fc:	f7ff fbda 	bl	21b4 <bt_hci_cmd_send_sync>
		if (err) {
    2a00:	4605      	mov	r5, r0
    2a02:	2800      	cmp	r0, #0
    2a04:	f47f af6b 	bne.w	28de <bt_init+0x1c2>
    2a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2a0a:	689d      	ldr	r5, [r3, #8]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2a0c:	f011 ff06 	bl	1481c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a10:	9403      	str	r4, [sp, #12]
    2a12:	782b      	ldrb	r3, [r5, #0]
    2a14:	9302      	str	r3, [sp, #8]
    2a16:	9001      	str	r0, [sp, #4]
    2a18:	4b8a      	ldr	r3, [pc, #552]	; (2c44 <bt_init+0x528>)
    2a1a:	4a83      	ldr	r2, [pc, #524]	; (2c28 <bt_init+0x50c>)
    2a1c:	9400      	str	r4, [sp, #0]
    2a1e:	4983      	ldr	r1, [pc, #524]	; (2c2c <bt_init+0x510>)
    2a20:	4883      	ldr	r0, [pc, #524]	; (2c30 <bt_init+0x514>)
    2a22:	f7fe fab3 	bl	f8c <printk>
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2a26:	462b      	mov	r3, r5
		net_buf_unref(rsp);
    2a28:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a2a:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2a2e:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2a30:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    2a34:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
		net_buf_unref(rsp);
    2a38:	f010 fe68 	bl	1370c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    2a3c:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    2a40:	069b      	lsls	r3, r3, #26
    2a42:	f100 8115 	bmi.w	2c70 <bt_init+0x554>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2a46:	2108      	movs	r1, #8
    2a48:	f242 0001 	movw	r0, #8193	; 0x2001
    2a4c:	f7ff fb54 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2a50:	4605      	mov	r5, r0
    2a52:	2800      	cmp	r0, #0
    2a54:	f000 80d1 	beq.w	2bfa <bt_init+0x4de>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2a58:	2108      	movs	r1, #8
    2a5a:	4408      	add	r0, r1
    2a5c:	f010 fe88 	bl	13770 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2a60:	f896 1078 	ldrb.w	r1, [r6, #120]	; 0x78
    2a64:	078f      	lsls	r7, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    2a66:	bf4c      	ite	mi
    2a68:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2a6a:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2a6c:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2a6e:	f896 1079 	ldrb.w	r1, [r6, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2a72:	bf48      	it	mi
    2a74:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2a78:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2a7c:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
    2a80:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2a84:	bf18      	it	ne
    2a86:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2a8a:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2a8c:	bf08      	it	eq
    2a8e:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    2a92:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    2a94:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2a98:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    2a9a:	2200      	movs	r2, #0
    2a9c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2a9e:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2aa0:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2aa2:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2aa4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2aa6:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2aa8:	4629      	mov	r1, r5
    2aaa:	f242 0001 	movw	r0, #8193	; 0x2001
    2aae:	f7ff fb81 	bl	21b4 <bt_hci_cmd_send_sync>
	if (err) {
    2ab2:	4605      	mov	r5, r0
    2ab4:	2800      	cmp	r0, #0
    2ab6:	f47f af12 	bne.w	28de <bt_init+0x1c2>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2aba:	7eb3      	ldrb	r3, [r6, #26]
    2abc:	069a      	lsls	r2, r3, #26
    2abe:	d43f      	bmi.n	2b40 <bt_init+0x424>
	if (bt_dev.le.mtu) {
    2ac0:	f8b6 1088 	ldrh.w	r1, [r6, #136]	; 0x88
    2ac4:	2900      	cmp	r1, #0
    2ac6:	d13b      	bne.n	2b40 <bt_init+0x424>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2ac8:	aa0c      	add	r2, sp, #48	; 0x30
    2aca:	f241 0005 	movw	r0, #4101	; 0x1005
    2ace:	f7ff fb71 	bl	21b4 <bt_hci_cmd_send_sync>
	if (err) {
    2ad2:	4605      	mov	r5, r0
    2ad4:	2800      	cmp	r0, #0
    2ad6:	f47f af02 	bne.w	28de <bt_init+0x1c2>
    2ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2adc:	689d      	ldr	r5, [r3, #8]
    2ade:	f011 fe9d 	bl	1481c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2ae2:	9403      	str	r4, [sp, #12]
    2ae4:	782b      	ldrb	r3, [r5, #0]
    2ae6:	9302      	str	r3, [sp, #8]
    2ae8:	9001      	str	r0, [sp, #4]
    2aea:	4b57      	ldr	r3, [pc, #348]	; (2c48 <bt_init+0x52c>)
    2aec:	9400      	str	r4, [sp, #0]
    2aee:	4a4e      	ldr	r2, [pc, #312]	; (2c28 <bt_init+0x50c>)
    2af0:	494e      	ldr	r1, [pc, #312]	; (2c2c <bt_init+0x510>)
    2af2:	484f      	ldr	r0, [pc, #316]	; (2c30 <bt_init+0x514>)
    2af4:	f7fe fa4a 	bl	f8c <printk>
	if (bt_dev.le.mtu) {
    2af8:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    2afc:	b9eb      	cbnz	r3, 2b3a <bt_init+0x41e>
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2afe:	78aa      	ldrb	r2, [r5, #2]
    2b00:	786b      	ldrb	r3, [r5, #1]
    2b02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2b06:	f8a6 3088 	strh.w	r3, [r6, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    2b0a:	88ad      	ldrh	r5, [r5, #4]
    2b0c:	f011 fe86 	bl	1481c <_impl_k_current_get>
	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);
    2b10:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    2b14:	9303      	str	r3, [sp, #12]
    2b16:	9001      	str	r0, [sp, #4]
    2b18:	4a43      	ldr	r2, [pc, #268]	; (2c28 <bt_init+0x50c>)
    2b1a:	4944      	ldr	r1, [pc, #272]	; (2c2c <bt_init+0x510>)
    2b1c:	9404      	str	r4, [sp, #16]
    2b1e:	9502      	str	r5, [sp, #8]
    2b20:	9400      	str	r4, [sp, #0]
    2b22:	4b49      	ldr	r3, [pc, #292]	; (2c48 <bt_init+0x52c>)
    2b24:	4849      	ldr	r0, [pc, #292]	; (2c4c <bt_init+0x530>)
    2b26:	f7fe fa31 	bl	f8c <printk>
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2b2a:	2d02      	cmp	r5, #2
    2b2c:	462a      	mov	r2, r5
    2b2e:	bf28      	it	cs
    2b30:	2202      	movcs	r2, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2b32:	4611      	mov	r1, r2
    2b34:	4842      	ldr	r0, [pc, #264]	; (2c40 <bt_init+0x524>)
    2b36:	f011 fe77 	bl	14828 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2b3a:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b3c:	f010 fde6 	bl	1370c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2b40:	2108      	movs	r1, #8
    2b42:	f640 4001 	movw	r0, #3073	; 0xc01
    2b46:	f7ff fad7 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2b4a:	4605      	mov	r5, r0
    2b4c:	2800      	cmp	r0, #0
    2b4e:	d054      	beq.n	2bfa <bt_init+0x4de>
	ev = net_buf_add(buf, sizeof(*ev));
    2b50:	2108      	movs	r1, #8
    2b52:	4408      	add	r0, r1
    2b54:	f010 fe0c 	bl	13770 <net_buf_simple_add>
	dst[0] = val;
    2b58:	2310      	movs	r3, #16
    2b5a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2b5c:	2388      	movs	r3, #136	; 0x88
    2b5e:	7043      	strb	r3, [r0, #1]
    2b60:	2302      	movs	r3, #2
	dst[0] = val;
    2b62:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    2b64:	70c3      	strb	r3, [r0, #3]
    2b66:	2320      	movs	r3, #32
	dst[0] = val;
    2b68:	7082      	strb	r2, [r0, #2]
    2b6a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2b6c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2b6e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2b70:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2b72:	4629      	mov	r1, r5
    2b74:	f640 4001 	movw	r0, #3073	; 0xc01
    2b78:	f7ff fb1c 	bl	21b4 <bt_hci_cmd_send_sync>
	if (err) {
    2b7c:	4605      	mov	r5, r0
    2b7e:	2800      	cmp	r0, #0
    2b80:	f47f aead 	bne.w	28de <bt_init+0x1c2>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2b84:	4601      	mov	r1, r0
    2b86:	aa0c      	add	r2, sp, #48	; 0x30
    2b88:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2b8c:	f7ff fb12 	bl	21b4 <bt_hci_cmd_send_sync>
	if (err) {
    2b90:	2800      	cmp	r0, #0
    2b92:	f000 809a 	beq.w	2cca <bt_init+0x5ae>
		BT_WARN("Vendor HCI extensions not available");
    2b96:	4b2e      	ldr	r3, [pc, #184]	; (2c50 <bt_init+0x534>)
    2b98:	4a2e      	ldr	r2, [pc, #184]	; (2c54 <bt_init+0x538>)
    2b9a:	4924      	ldr	r1, [pc, #144]	; (2c2c <bt_init+0x510>)
    2b9c:	482e      	ldr	r0, [pc, #184]	; (2c58 <bt_init+0x53c>)
    2b9e:	9401      	str	r4, [sp, #4]
    2ba0:	9400      	str	r4, [sp, #0]
		BT_WARN("Failed to read supported vendor commands");
    2ba2:	f7fe f9f3 	bl	f8c <printk>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2ba6:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2ba8:	2207      	movs	r2, #7
    2baa:	a90c      	add	r1, sp, #48	; 0x30
    2bac:	482b      	ldr	r0, [pc, #172]	; (2c5c <bt_init+0x540>)
    2bae:	930c      	str	r3, [sp, #48]	; 0x30
    2bb0:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    2bb4:	f7ff f80d 	bl	1bd2 <memcmp>
    2bb8:	2800      	cmp	r0, #0
    2bba:	f040 8100 	bne.w	2dbe <bt_init+0x6a2>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2bbe:	f011 fe2d 	bl	1481c <_impl_k_current_get>
		BT_DBG("No public address. Trying to set static random.");
    2bc2:	4b27      	ldr	r3, [pc, #156]	; (2c60 <bt_init+0x544>)
    2bc4:	9001      	str	r0, [sp, #4]
    2bc6:	9402      	str	r4, [sp, #8]
    2bc8:	9400      	str	r4, [sp, #0]
    2bca:	4a17      	ldr	r2, [pc, #92]	; (2c28 <bt_init+0x50c>)
    2bcc:	4917      	ldr	r1, [pc, #92]	; (2c2c <bt_init+0x510>)
    2bce:	4825      	ldr	r0, [pc, #148]	; (2c64 <bt_init+0x548>)
    2bd0:	f7fe f9dc 	bl	f8c <printk>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2bd4:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    2bd8:	07db      	lsls	r3, r3, #31
    2bda:	f100 8111 	bmi.w	2e00 <bt_init+0x6e4>
		BT_WARN("Read Static Addresses command not available");
    2bde:	9401      	str	r4, [sp, #4]
    2be0:	9400      	str	r4, [sp, #0]
    2be2:	4b21      	ldr	r3, [pc, #132]	; (2c68 <bt_init+0x54c>)
    2be4:	4a1b      	ldr	r2, [pc, #108]	; (2c54 <bt_init+0x538>)
    2be6:	4911      	ldr	r1, [pc, #68]	; (2c2c <bt_init+0x510>)
    2be8:	4820      	ldr	r0, [pc, #128]	; (2c6c <bt_init+0x550>)
    2bea:	e116      	b.n	2e1a <bt_init+0x6fe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2bec:	2102      	movs	r1, #2
    2bee:	f640 406d 	movw	r0, #3181	; 0xc6d
    2bf2:	f7ff fa81 	bl	20f8 <bt_hci_cmd_create>
		if (!buf) {
    2bf6:	4607      	mov	r7, r0
    2bf8:	b910      	cbnz	r0, 2c00 <bt_init+0x4e4>
		return -ENOBUFS;
    2bfa:	f06f 0536 	mvn.w	r5, #54	; 0x36
    2bfe:	e66e      	b.n	28de <bt_init+0x1c2>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2c00:	2102      	movs	r1, #2
    2c02:	3008      	adds	r0, #8
    2c04:	f010 fdb4 	bl	13770 <net_buf_simple_add>
		cp_le->le = 0x01;
    2c08:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2c0a:	7045      	strb	r5, [r0, #1]
		cp_le->le = 0x01;
    2c0c:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2c0e:	462a      	mov	r2, r5
    2c10:	4639      	mov	r1, r7
    2c12:	f640 406d 	movw	r0, #3181	; 0xc6d
    2c16:	f7ff facd 	bl	21b4 <bt_hci_cmd_send_sync>
		if (err) {
    2c1a:	4605      	mov	r5, r0
    2c1c:	2800      	cmp	r0, #0
    2c1e:	f43f aee5 	beq.w	29ec <bt_init+0x2d0>
    2c22:	e65c      	b.n	28de <bt_init+0x1c2>
    2c24:	00015af8 	.word	0x00015af8
    2c28:	000167ad 	.word	0x000167ad
    2c2c:	000167b4 	.word	0x000167b4
    2c30:	00015e95 	.word	0x00015e95
    2c34:	20003ae0 	.word	0x20003ae0
    2c38:	00015b2c 	.word	0x00015b2c
    2c3c:	00015ee8 	.word	0x00015ee8
    2c40:	20003af4 	.word	0x20003af4
    2c44:	00015b87 	.word	0x00015b87
    2c48:	00015b12 	.word	0x00015b12
    2c4c:	00015f1c 	.word	0x00015f1c
    2c50:	00015bde 	.word	0x00015bde
    2c54:	000167ef 	.word	0x000167ef
    2c58:	00015f54 	.word	0x00015f54
    2c5c:	20003a68 	.word	0x20003a68
    2c60:	00015bea 	.word	0x00015bea
    2c64:	00016088 	.word	0x00016088
    2c68:	00015bbf 	.word	0x00015bbf
    2c6c:	00016136 	.word	0x00016136
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2c70:	aa0c      	add	r2, sp, #48	; 0x30
    2c72:	2100      	movs	r1, #0
    2c74:	f242 002f 	movw	r0, #8239	; 0x202f
    2c78:	f7ff fa9c 	bl	21b4 <bt_hci_cmd_send_sync>
		if (err) {
    2c7c:	4605      	mov	r5, r0
    2c7e:	2800      	cmp	r0, #0
    2c80:	f47f ae2d 	bne.w	28de <bt_init+0x1c2>
		rp = (void *)rsp->data;
    2c84:	980c      	ldr	r0, [sp, #48]	; 0x30
    2c86:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2c88:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2c8c:	f8b3 9003 	ldrh.w	r9, [r3, #3]
		net_buf_unref(rsp);
    2c90:	f010 fd3c 	bl	1370c <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2c94:	2104      	movs	r1, #4
    2c96:	f242 0024 	movw	r0, #8228	; 0x2024
    2c9a:	f7ff fa2d 	bl	20f8 <bt_hci_cmd_create>
		if (!buf) {
    2c9e:	4607      	mov	r7, r0
    2ca0:	2800      	cmp	r0, #0
    2ca2:	d0aa      	beq.n	2bfa <bt_init+0x4de>
		cp = net_buf_add(buf, sizeof(*cp));
    2ca4:	2104      	movs	r1, #4
    2ca6:	3008      	adds	r0, #8
    2ca8:	f010 fd62 	bl	13770 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2cac:	462a      	mov	r2, r5
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2cae:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2cb2:	f8a0 9002 	strh.w	r9, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2cb6:	4639      	mov	r1, r7
    2cb8:	f242 0024 	movw	r0, #8228	; 0x2024
    2cbc:	f7ff fa7a 	bl	21b4 <bt_hci_cmd_send_sync>
		if (err) {
    2cc0:	4605      	mov	r5, r0
    2cc2:	2800      	cmp	r0, #0
    2cc4:	f43f aebf 	beq.w	2a46 <bt_init+0x32a>
    2cc8:	e609      	b.n	28de <bt_init+0x1c2>
	rp.info = (void *)rsp->data;
    2cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    2ccc:	4971      	ldr	r1, [pc, #452]	; (2e94 <bt_init+0x778>)
	rp.info = (void *)rsp->data;
    2cce:	689d      	ldr	r5, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    2cd0:	4871      	ldr	r0, [pc, #452]	; (2e98 <bt_init+0x77c>)
    2cd2:	f8b5 3001 	ldrh.w	r3, [r5, #1]
    2cd6:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    2cd8:	2b03      	cmp	r3, #3
		return plat_str[platform];
    2cda:	bf96      	itet	ls
    2cdc:	4a6f      	ldrls	r2, [pc, #444]	; (2e9c <bt_init+0x780>)
	return "unknown";
    2cde:	4a70      	ldrhi	r2, [pc, #448]	; (2ea0 <bt_init+0x784>)
		return plat_str[platform];
    2ce0:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2ce4:	9201      	str	r2, [sp, #4]
    2ce6:	4b6f      	ldr	r3, [pc, #444]	; (2ea4 <bt_init+0x788>)
    2ce8:	4a6f      	ldr	r2, [pc, #444]	; (2ea8 <bt_init+0x78c>)
    2cea:	9403      	str	r4, [sp, #12]
    2cec:	9400      	str	r4, [sp, #0]
    2cee:	f7fe f94d 	bl	f8c <printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2cf2:	f8b5 3001 	ldrh.w	r3, [r5, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2cf6:	f8b5 2003 	ldrh.w	r2, [r5, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2cfa:	2b02      	cmp	r3, #2
    2cfc:	d13a      	bne.n	2d74 <bt_init+0x658>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2cfe:	2a02      	cmp	r2, #2
    2d00:	d838      	bhi.n	2d74 <bt_init+0x658>
		return nordic_str[variant];
    2d02:	4b6a      	ldr	r3, [pc, #424]	; (2eac <bt_init+0x790>)
    2d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2d08:	9202      	str	r2, [sp, #8]
    2d0a:	9301      	str	r3, [sp, #4]
    2d0c:	4a66      	ldr	r2, [pc, #408]	; (2ea8 <bt_init+0x78c>)
    2d0e:	4b65      	ldr	r3, [pc, #404]	; (2ea4 <bt_init+0x788>)
    2d10:	4960      	ldr	r1, [pc, #384]	; (2e94 <bt_init+0x778>)
    2d12:	9403      	str	r4, [sp, #12]
    2d14:	9400      	str	r4, [sp, #0]
    2d16:	4866      	ldr	r0, [pc, #408]	; (2eb0 <bt_init+0x794>)
    2d18:	f7fe f938 	bl	f8c <printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d1c:	796b      	ldrb	r3, [r5, #5]
    2d1e:	9406      	str	r4, [sp, #24]
    2d20:	f8d5 1009 	ldr.w	r1, [r5, #9]
    2d24:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    2d26:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d28:	f8b5 1007 	ldrh.w	r1, [r5, #7]
		return var_str[variant];
    2d2c:	bf98      	it	ls
    2d2e:	4a61      	ldrls	r2, [pc, #388]	; (2eb4 <bt_init+0x798>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d30:	9104      	str	r1, [sp, #16]
    2d32:	79a9      	ldrb	r1, [r5, #6]
		return var_str[variant];
    2d34:	bf94      	ite	ls
    2d36:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2d3a:	4a59      	ldrhi	r2, [pc, #356]	; (2ea0 <bt_init+0x784>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d3c:	9103      	str	r1, [sp, #12]
    2d3e:	9302      	str	r3, [sp, #8]
    2d40:	4954      	ldr	r1, [pc, #336]	; (2e94 <bt_init+0x778>)
    2d42:	4b58      	ldr	r3, [pc, #352]	; (2ea4 <bt_init+0x788>)
    2d44:	9201      	str	r2, [sp, #4]
    2d46:	9400      	str	r4, [sp, #0]
    2d48:	4a57      	ldr	r2, [pc, #348]	; (2ea8 <bt_init+0x78c>)
    2d4a:	485b      	ldr	r0, [pc, #364]	; (2eb8 <bt_init+0x79c>)
    2d4c:	f7fe f91e 	bl	f8c <printk>
	net_buf_unref(rsp);
    2d50:	980c      	ldr	r0, [sp, #48]	; 0x30
    2d52:	f010 fcdb 	bl	1370c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2d56:	aa0c      	add	r2, sp, #48	; 0x30
    2d58:	2100      	movs	r1, #0
    2d5a:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2d5e:	f7ff fa29 	bl	21b4 <bt_hci_cmd_send_sync>
	if (err) {
    2d62:	4605      	mov	r5, r0
    2d64:	b140      	cbz	r0, 2d78 <bt_init+0x65c>
		BT_WARN("Failed to read supported vendor features");
    2d66:	9401      	str	r4, [sp, #4]
    2d68:	9400      	str	r4, [sp, #0]
    2d6a:	4b4e      	ldr	r3, [pc, #312]	; (2ea4 <bt_init+0x788>)
    2d6c:	4a53      	ldr	r2, [pc, #332]	; (2ebc <bt_init+0x7a0>)
    2d6e:	4949      	ldr	r1, [pc, #292]	; (2e94 <bt_init+0x778>)
    2d70:	4853      	ldr	r0, [pc, #332]	; (2ec0 <bt_init+0x7a4>)
    2d72:	e716      	b.n	2ba2 <bt_init+0x486>
		return "unknown";
    2d74:	4b4a      	ldr	r3, [pc, #296]	; (2ea0 <bt_init+0x784>)
    2d76:	e7c7      	b.n	2d08 <bt_init+0x5ec>
	rp.cmds = (void *)rsp->data;
    2d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2d7a:	4852      	ldr	r0, [pc, #328]	; (2ec4 <bt_init+0x7a8>)
    2d7c:	6899      	ldr	r1, [r3, #8]
    2d7e:	2202      	movs	r2, #2
    2d80:	3101      	adds	r1, #1
    2d82:	f7fe ff3b 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2d86:	980c      	ldr	r0, [sp, #48]	; 0x30
    2d88:	f010 fcc0 	bl	1370c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2d8c:	aa0c      	add	r2, sp, #48	; 0x30
    2d8e:	4629      	mov	r1, r5
    2d90:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2d94:	f7ff fa0e 	bl	21b4 <bt_hci_cmd_send_sync>
	if (err) {
    2d98:	b130      	cbz	r0, 2da8 <bt_init+0x68c>
		BT_WARN("Failed to read supported vendor commands");
    2d9a:	9401      	str	r4, [sp, #4]
    2d9c:	9400      	str	r4, [sp, #0]
    2d9e:	4b41      	ldr	r3, [pc, #260]	; (2ea4 <bt_init+0x788>)
    2da0:	4a46      	ldr	r2, [pc, #280]	; (2ebc <bt_init+0x7a0>)
    2da2:	493c      	ldr	r1, [pc, #240]	; (2e94 <bt_init+0x778>)
    2da4:	4848      	ldr	r0, [pc, #288]	; (2ec8 <bt_init+0x7ac>)
    2da6:	e6fc      	b.n	2ba2 <bt_init+0x486>
	rp.feat = (void *)rsp->data;
    2da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2daa:	4848      	ldr	r0, [pc, #288]	; (2ecc <bt_init+0x7b0>)
    2dac:	6899      	ldr	r1, [r3, #8]
    2dae:	2201      	movs	r2, #1
    2db0:	4411      	add	r1, r2
    2db2:	f7fe ff23 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2db6:	980c      	ldr	r0, [sp, #48]	; 0x30
    2db8:	f010 fca8 	bl	1370c <net_buf_unref>
    2dbc:	e6f3      	b.n	2ba6 <bt_init+0x48a>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2dbe:	4b44      	ldr	r3, [pc, #272]	; (2ed0 <bt_init+0x7b4>)
    2dc0:	6818      	ldr	r0, [r3, #0]
    2dc2:	889a      	ldrh	r2, [r3, #4]
    2dc4:	900a      	str	r0, [sp, #40]	; 0x28
    2dc6:	799b      	ldrb	r3, [r3, #6]
    2dc8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    2dcc:	a90a      	add	r1, sp, #40	; 0x28
    2dce:	2207      	movs	r2, #7
    2dd0:	4840      	ldr	r0, [pc, #256]	; (2ed4 <bt_init+0x7b8>)
    2dd2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    2dd6:	f7fe fefc 	bl	1bd2 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2dda:	2800      	cmp	r0, #0
    2ddc:	f43f aeef 	beq.w	2bbe <bt_init+0x4a2>
		bt_dev_show_info();
    2de0:	f7ff fb64 	bl	24ac <bt_dev_show_info>
		err = bt_conn_init();
    2de4:	f002 f9f0 	bl	51c8 <bt_conn_init>
		if (err) {
    2de8:	4605      	mov	r5, r0
    2dea:	2800      	cmp	r0, #0
    2dec:	f47f ad77 	bne.w	28de <bt_init+0x1c2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2df0:	2102      	movs	r1, #2
    2df2:	4839      	ldr	r0, [pc, #228]	; (2ed8 <bt_init+0x7bc>)
    2df4:	f7ff f8cb 	bl	1f8e <atomic_or>
	bt_le_scan_update(false);
    2df8:	4628      	mov	r0, r5
    2dfa:	f7ff fc5d 	bl	26b8 <bt_le_scan_update>
    2dfe:	e56e      	b.n	28de <bt_init+0x1c2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2e00:	aa09      	add	r2, sp, #36	; 0x24
    2e02:	2100      	movs	r1, #0
    2e04:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2e08:	f7ff f9d4 	bl	21b4 <bt_hci_cmd_send_sync>
		if (err) {
    2e0c:	b140      	cbz	r0, 2e20 <bt_init+0x704>
			BT_WARN("Failed to read static addresses");
    2e0e:	4b33      	ldr	r3, [pc, #204]	; (2edc <bt_init+0x7c0>)
    2e10:	4a2a      	ldr	r2, [pc, #168]	; (2ebc <bt_init+0x7a0>)
    2e12:	4920      	ldr	r1, [pc, #128]	; (2e94 <bt_init+0x778>)
    2e14:	4832      	ldr	r0, [pc, #200]	; (2ee0 <bt_init+0x7c4>)
    2e16:	9401      	str	r4, [sp, #4]
    2e18:	9400      	str	r4, [sp, #0]
		BT_WARN("Read Static Addresses command not available");
    2e1a:	f7fe f8b7 	bl	f8c <printk>
    2e1e:	e026      	b.n	2e6e <bt_init+0x752>
		rp = (void *)rsp->data;
    2e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e22:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2e24:	784b      	ldrb	r3, [r1, #1]
    2e26:	b1bb      	cbz	r3, 2e58 <bt_init+0x73c>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2e28:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2e2a:	2206      	movs	r2, #6
    2e2c:	3102      	adds	r1, #2
    2e2e:	482d      	ldr	r0, [pc, #180]	; (2ee4 <bt_init+0x7c8>)
    2e30:	7033      	strb	r3, [r6, #0]
    2e32:	f7fe fee3 	bl	1bfc <memcpy>
			net_buf_unref(rsp);
    2e36:	9809      	ldr	r0, [sp, #36]	; 0x24
    2e38:	f010 fc68 	bl	1370c <net_buf_unref>
		return bt_set_static_addr();
    2e3c:	f7ff fb06 	bl	244c <bt_set_static_addr>
    2e40:	4605      	mov	r5, r0
		if (err) {
    2e42:	2800      	cmp	r0, #0
    2e44:	d0cc      	beq.n	2de0 <bt_init+0x6c4>
			BT_ERR("Unable to set identity address");
    2e46:	9401      	str	r4, [sp, #4]
    2e48:	9400      	str	r4, [sp, #0]
    2e4a:	4b27      	ldr	r3, [pc, #156]	; (2ee8 <bt_init+0x7cc>)
    2e4c:	4a27      	ldr	r2, [pc, #156]	; (2eec <bt_init+0x7d0>)
    2e4e:	4911      	ldr	r1, [pc, #68]	; (2e94 <bt_init+0x778>)
    2e50:	4827      	ldr	r0, [pc, #156]	; (2ef0 <bt_init+0x7d4>)
    2e52:	f7fe f89b 	bl	f8c <printk>
    2e56:	e542      	b.n	28de <bt_init+0x1c2>
		BT_WARN("No static addresses stored in controller");
    2e58:	9401      	str	r4, [sp, #4]
    2e5a:	9400      	str	r4, [sp, #0]
    2e5c:	4b1f      	ldr	r3, [pc, #124]	; (2edc <bt_init+0x7c0>)
    2e5e:	4a17      	ldr	r2, [pc, #92]	; (2ebc <bt_init+0x7a0>)
    2e60:	490c      	ldr	r1, [pc, #48]	; (2e94 <bt_init+0x778>)
    2e62:	4824      	ldr	r0, [pc, #144]	; (2ef4 <bt_init+0x7d8>)
    2e64:	f7fe f892 	bl	f8c <printk>
		net_buf_unref(rsp);
    2e68:	9809      	ldr	r0, [sp, #36]	; 0x24
    2e6a:	f010 fc4f 	bl	1370c <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2e6e:	4819      	ldr	r0, [pc, #100]	; (2ed4 <bt_init+0x7b8>)
    2e70:	f7ff fade 	bl	2430 <bt_addr_le_create_static>
		if (err) {
    2e74:	4605      	mov	r5, r0
    2e76:	2800      	cmp	r0, #0
    2e78:	d1e5      	bne.n	2e46 <bt_init+0x72a>
		BT_WARN("Using temporary static random address %s",
    2e7a:	481a      	ldr	r0, [pc, #104]	; (2ee4 <bt_init+0x7c8>)
    2e7c:	f7fe ff44 	bl	1d08 <bt_addr_str>
    2e80:	9402      	str	r4, [sp, #8]
    2e82:	9001      	str	r0, [sp, #4]
    2e84:	9400      	str	r4, [sp, #0]
    2e86:	4b15      	ldr	r3, [pc, #84]	; (2edc <bt_init+0x7c0>)
    2e88:	4a0c      	ldr	r2, [pc, #48]	; (2ebc <bt_init+0x7a0>)
    2e8a:	4902      	ldr	r1, [pc, #8]	; (2e94 <bt_init+0x778>)
    2e8c:	481a      	ldr	r0, [pc, #104]	; (2ef8 <bt_init+0x7dc>)
    2e8e:	f7fe f87d 	bl	f8c <printk>
    2e92:	e7d3      	b.n	2e3c <bt_init+0x720>
    2e94:	000167b4 	.word	0x000167b4
    2e98:	00015f88 	.word	0x00015f88
    2e9c:	00016ae4 	.word	0x00016ae4
    2ea0:	00016bec 	.word	0x00016bec
    2ea4:	00015bde 	.word	0x00015bde
    2ea8:	00015c6a 	.word	0x00015c6a
    2eac:	00016ad8 	.word	0x00016ad8
    2eb0:	00015fb1 	.word	0x00015fb1
    2eb4:	00016bdc 	.word	0x00016bdc
    2eb8:	00015fd9 	.word	0x00015fd9
    2ebc:	000167ef 	.word	0x000167ef
    2ec0:	00016016 	.word	0x00016016
    2ec4:	20003ac7 	.word	0x20003ac7
    2ec8:	0001604f 	.word	0x0001604f
    2ecc:	20003ac6 	.word	0x20003ac6
    2ed0:	000152f4 	.word	0x000152f4
    2ed4:	20003a68 	.word	0x20003a68
    2ed8:	20003ad8 	.word	0x20003ad8
    2edc:	00015bbf 	.word	0x00015bbf
    2ee0:	000160cd 	.word	0x000160cd
    2ee4:	20003a69 	.word	0x20003a69
    2ee8:	00015bea 	.word	0x00015bea
    2eec:	00016765 	.word	0x00016765
    2ef0:	000161ab 	.word	0x000161ab
    2ef4:	000160fd 	.word	0x000160fd
    2ef8:	00016172 	.word	0x00016172

00002efc <init_work>:

static void init_work(struct k_work *work)
{
    2efc:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    2efe:	f7ff fc0d 	bl	271c <bt_init>
	if (ready_cb) {
    2f02:	4b03      	ldr	r3, [pc, #12]	; (2f10 <init_work+0x14>)
    2f04:	681b      	ldr	r3, [r3, #0]
    2f06:	b113      	cbz	r3, 2f0e <init_work+0x12>
		ready_cb(err);
	}
}
    2f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2f0c:	4718      	bx	r3
    2f0e:	bd10      	pop	{r4, pc}
    2f10:	200002d4 	.word	0x200002d4

00002f14 <hci_le_set_phy.isra.28>:
static int hci_le_set_phy(struct bt_conn *conn)
    2f14:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2f16:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    2f18:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2f1a:	f242 0032 	movw	r0, #8242	; 0x2032
    2f1e:	f7ff f8eb 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2f22:	4605      	mov	r5, r0
    2f24:	b198      	cbz	r0, 2f4e <hci_le_set_phy.isra.28+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    2f26:	2107      	movs	r1, #7
    2f28:	3008      	adds	r0, #8
    2f2a:	f010 fc21 	bl	13770 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2f2e:	8823      	ldrh	r3, [r4, #0]
    2f30:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    2f32:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2f34:	2302      	movs	r3, #2
	cp->all_phys = 0;
    2f36:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2f38:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2f3a:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2f3c:	7144      	strb	r4, [r0, #5]
    2f3e:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    2f40:	4629      	mov	r1, r5
    2f42:	f242 0032 	movw	r0, #8242	; 0x2032
    2f46:	f7ff fb29 	bl	259c <bt_hci_cmd_send>
	return 0;
    2f4a:	4620      	mov	r0, r4
    2f4c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    2f4e:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2f52:	bd38      	pop	{r3, r4, r5, pc}

00002f54 <hci_le_set_data_len.isra.29>:
static int hci_le_set_data_len(struct bt_conn *conn)
    2f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2f56:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    2f58:	aa01      	add	r2, sp, #4
    2f5a:	2100      	movs	r1, #0
    2f5c:	f242 002f 	movw	r0, #8239	; 0x202f
    2f60:	f7ff f928 	bl	21b4 <bt_hci_cmd_send_sync>
	if (err) {
    2f64:	b9d8      	cbnz	r0, 2f9e <hci_le_set_data_len.isra.29+0x4a>
	rp = (void *)rsp->data;
    2f66:	9801      	ldr	r0, [sp, #4]
    2f68:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2f6a:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2f6e:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    2f72:	f010 fbcb 	bl	1370c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    2f76:	2106      	movs	r1, #6
    2f78:	f242 0022 	movw	r0, #8226	; 0x2022
    2f7c:	f7ff f8bc 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2f80:	4604      	mov	r4, r0
    2f82:	b170      	cbz	r0, 2fa2 <hci_le_set_data_len.isra.29+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    2f84:	2106      	movs	r1, #6
    2f86:	3008      	adds	r0, #8
    2f88:	f010 fbf2 	bl	13770 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2f8c:	883b      	ldrh	r3, [r7, #0]
    2f8e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2f90:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2f92:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2f94:	4621      	mov	r1, r4
    2f96:	f242 0022 	movw	r0, #8226	; 0x2022
    2f9a:	f7ff faff 	bl	259c <bt_hci_cmd_send>
}
    2f9e:	b003      	add	sp, #12
    2fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    2fa2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2fa6:	e7fa      	b.n	2f9e <hci_le_set_data_len.isra.29+0x4a>

00002fa8 <le_enh_conn_complete>:
{
    2fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fac:	b08d      	sub	sp, #52	; 0x34
    2fae:	4605      	mov	r5, r0
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2fb0:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    2fb4:	4e70      	ldr	r6, [pc, #448]	; (3178 <le_enh_conn_complete+0x1d0>)
    2fb6:	f011 fc31 	bl	1481c <_impl_k_current_get>
    2fba:	1d2c      	adds	r4, r5, #4
    2fbc:	4681      	mov	r9, r0
    2fbe:	4620      	mov	r0, r4
    2fc0:	f895 a000 	ldrb.w	sl, [r5]
    2fc4:	f895 b003 	ldrb.w	fp, [r5, #3]
    2fc8:	f7fe fec4 	bl	1d54 <bt_addr_le_str>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2fcc:	fa1f f887 	uxth.w	r8, r7
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    2fd0:	9005      	str	r0, [sp, #20]
    2fd2:	4b6a      	ldr	r3, [pc, #424]	; (317c <le_enh_conn_complete+0x1d4>)
    2fd4:	9606      	str	r6, [sp, #24]
    2fd6:	f8cd b010 	str.w	fp, [sp, #16]
    2fda:	f8cd 800c 	str.w	r8, [sp, #12]
    2fde:	e88d 0640 	stmia.w	sp, {r6, r9, sl}
    2fe2:	4a67      	ldr	r2, [pc, #412]	; (3180 <le_enh_conn_complete+0x1d8>)
    2fe4:	4967      	ldr	r1, [pc, #412]	; (3184 <le_enh_conn_complete+0x1dc>)
    2fe6:	4868      	ldr	r0, [pc, #416]	; (3188 <le_enh_conn_complete+0x1e0>)
    2fe8:	f7fd ffd0 	bl	f8c <printk>
	if (evt->status) {
    2fec:	782b      	ldrb	r3, [r5, #0]
    2fee:	b183      	cbz	r3, 3012 <le_enh_conn_complete+0x6a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    2ff0:	2102      	movs	r1, #2
    2ff2:	2000      	movs	r0, #0
    2ff4:	f001 fc7a 	bl	48ec <bt_conn_lookup_state_le>
		if (!conn) {
    2ff8:	4604      	mov	r4, r0
    2ffa:	b138      	cbz	r0, 300c <le_enh_conn_complete+0x64>
		conn->err = evt->status;
    2ffc:	782b      	ldrb	r3, [r5, #0]
    2ffe:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3000:	2100      	movs	r1, #0
    3002:	f001 fd47 	bl	4a94 <bt_conn_set_state>
		bt_conn_unref(conn);
    3006:	4620      	mov	r0, r4
    3008:	f001 fc8e 	bl	4928 <bt_conn_unref>
}
    300c:	b00d      	add	sp, #52	; 0x34
    300e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    3012:	4621      	mov	r1, r4
    3014:	a80a      	add	r0, sp, #40	; 0x28
    3016:	f7fe ffb7 	bl	1f88 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    301a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    301e:	3b02      	subs	r3, #2
    3020:	b2db      	uxtb	r3, r3
    3022:	2b01      	cmp	r3, #1
    3024:	d828      	bhi.n	3078 <le_enh_conn_complete+0xd0>
    3026:	2206      	movs	r2, #6
    3028:	f105 0111 	add.w	r1, r5, #17
    302c:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3030:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    3034:	f7fe fde2 	bl	1bfc <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    3038:	2301      	movs	r3, #1
    303a:	f88d 3020 	strb.w	r3, [sp, #32]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    303e:	2102      	movs	r1, #2
    3040:	a80a      	add	r0, sp, #40	; 0x28
    3042:	f001 fc53 	bl	48ec <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    3046:	78eb      	ldrb	r3, [r5, #3]
    3048:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    304a:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    304c:	d109      	bne.n	3062 <le_enh_conn_complete+0xba>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    304e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    3052:	484e      	ldr	r0, [pc, #312]	; (318c <le_enh_conn_complete+0x1e4>)
    3054:	f7fe ffac 	bl	1fb0 <atomic_and>
		if (!conn) {
    3058:	b99c      	cbnz	r4, 3082 <le_enh_conn_complete+0xda>
			conn = bt_conn_add_le(&id_addr);
    305a:	a80a      	add	r0, sp, #40	; 0x28
    305c:	f001 fb9a 	bl	4794 <bt_conn_add_le>
    3060:	4604      	mov	r4, r0
	if (!conn) {
    3062:	b974      	cbnz	r4, 3082 <le_enh_conn_complete+0xda>
		BT_ERR("Unable to add new conn for handle %u", handle);
    3064:	9602      	str	r6, [sp, #8]
    3066:	e88d 0140 	stmia.w	sp, {r6, r8}
    306a:	4b44      	ldr	r3, [pc, #272]	; (317c <le_enh_conn_complete+0x1d4>)
    306c:	4a48      	ldr	r2, [pc, #288]	; (3190 <le_enh_conn_complete+0x1e8>)
    306e:	4945      	ldr	r1, [pc, #276]	; (3184 <le_enh_conn_complete+0x1dc>)
    3070:	4848      	ldr	r0, [pc, #288]	; (3194 <le_enh_conn_complete+0x1ec>)
    3072:	f7fd ff8b 	bl	f8c <printk>
		return;
    3076:	e7c9      	b.n	300c <le_enh_conn_complete+0x64>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    3078:	4621      	mov	r1, r4
    307a:	a808      	add	r0, sp, #32
    307c:	f7fe ff84 	bl	1f88 <bt_addr_le_copy>
    3080:	e7dd      	b.n	303e <le_enh_conn_complete+0x96>
	conn->handle   = handle;
    3082:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    3084:	a90a      	add	r1, sp, #40	; 0x28
	conn->handle   = handle;
    3086:	f820 7b44 	strh.w	r7, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    308a:	f7fe ff7d 	bl	1f88 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    308e:	7e2a      	ldrb	r2, [r5, #24]
    3090:	7deb      	ldrb	r3, [r5, #23]
    3092:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3096:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    309a:	7eaa      	ldrb	r2, [r5, #26]
    309c:	7e6b      	ldrb	r3, [r5, #25]
    309e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    30a2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    30a6:	7eeb      	ldrb	r3, [r5, #27]
    30a8:	7f2a      	ldrb	r2, [r5, #28]
    30aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    30ae:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    30b2:	78ee      	ldrb	r6, [r5, #3]
    30b4:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    30b6:	2e01      	cmp	r6, #1
    30b8:	d11a      	bne.n	30f0 <le_enh_conn_complete+0x148>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    30ba:	4f37      	ldr	r7, [pc, #220]	; (3198 <le_enh_conn_complete+0x1f0>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    30bc:	a908      	add	r1, sp, #32
    30be:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    30c2:	f7fe ff61 	bl	1f88 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    30c6:	4639      	mov	r1, r7
    30c8:	f104 0052 	add.w	r0, r4, #82	; 0x52
    30cc:	f7fe ff5c 	bl	1f88 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    30d0:	2107      	movs	r1, #7
    30d2:	f107 0070 	add.w	r0, r7, #112	; 0x70
    30d6:	f7ff f801 	bl	20dc <atomic_test_bit>
    30da:	b148      	cbz	r0, 30f0 <le_enh_conn_complete+0x148>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    30dc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    30e0:	2200      	movs	r2, #0
    30e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    30e6:	4313      	orrs	r3, r2
    30e8:	d002      	beq.n	30f0 <le_enh_conn_complete+0x148>
			set_advertise_enable(true);
    30ea:	4630      	mov	r0, r6
    30ec:	f7ff f956 	bl	239c <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    30f0:	2103      	movs	r1, #3
    30f2:	4620      	mov	r0, r4
    30f4:	f001 fcce 	bl	4a94 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    30f8:	7a63      	ldrb	r3, [r4, #9]
    30fa:	2b03      	cmp	r3, #3
    30fc:	d118      	bne.n	3130 <le_enh_conn_complete+0x188>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    30fe:	78eb      	ldrb	r3, [r5, #3]
    3100:	b123      	cbz	r3, 310c <le_enh_conn_complete+0x164>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    3102:	4b25      	ldr	r3, [pc, #148]	; (3198 <le_enh_conn_complete+0x1f0>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    3104:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3108:	0719      	lsls	r1, r3, #28
    310a:	d518      	bpl.n	313e <le_enh_conn_complete+0x196>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    310c:	2102      	movs	r1, #2
    310e:	f242 0016 	movw	r0, #8214	; 0x2016
    3112:	f7fe fff1 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    3116:	4605      	mov	r5, r0
    3118:	b188      	cbz	r0, 313e <le_enh_conn_complete+0x196>
	cp = net_buf_add(buf, sizeof(*cp));
    311a:	2102      	movs	r1, #2
    311c:	3008      	adds	r0, #8
    311e:	f010 fb27 	bl	13770 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3122:	8823      	ldrh	r3, [r4, #0]
    3124:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    3126:	4629      	mov	r1, r5
    3128:	f242 0016 	movw	r0, #8214	; 0x2016
    312c:	f7ff fa36 	bl	259c <bt_hci_cmd_send>
	bt_conn_unref(conn);
    3130:	4620      	mov	r0, r4
    3132:	f001 fbf9 	bl	4928 <bt_conn_unref>
	bt_le_scan_update(false);
    3136:	2000      	movs	r0, #0
    3138:	f7ff fabe 	bl	26b8 <bt_le_scan_update>
    313c:	e766      	b.n	300c <le_enh_conn_complete+0x64>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    313e:	4d16      	ldr	r5, [pc, #88]	; (3198 <le_enh_conn_complete+0x1f0>)
    3140:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    3144:	07d2      	lsls	r2, r2, #31
    3146:	d508      	bpl.n	315a <le_enh_conn_complete+0x1b2>
		err = hci_le_set_phy(conn);
    3148:	4620      	mov	r0, r4
    314a:	f7ff fee3 	bl	2f14 <hci_le_set_phy.isra.28>
		if (!err) {
    314e:	b920      	cbnz	r0, 315a <le_enh_conn_complete+0x1b2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3150:	2180      	movs	r1, #128	; 0x80
    3152:	1d20      	adds	r0, r4, #4
    3154:	f7fe ff1b 	bl	1f8e <atomic_or>
    3158:	e7ea      	b.n	3130 <le_enh_conn_complete+0x188>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    315a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    315e:	069b      	lsls	r3, r3, #26
    3160:	d506      	bpl.n	3170 <le_enh_conn_complete+0x1c8>
		err = hci_le_set_data_len(conn);
    3162:	4620      	mov	r0, r4
    3164:	f7ff fef6 	bl	2f54 <hci_le_set_data_len.isra.29>
		if (!err) {
    3168:	b910      	cbnz	r0, 3170 <le_enh_conn_complete+0x1c8>
    316a:	f44f 7180 	mov.w	r1, #256	; 0x100
    316e:	e7f0      	b.n	3152 <le_enh_conn_complete+0x1aa>
	update_conn_param(conn);
    3170:	4620      	mov	r0, r4
    3172:	f7fe ff2f 	bl	1fd4 <update_conn_param>
    3176:	e7db      	b.n	3130 <le_enh_conn_complete+0x188>
    3178:	000153a9 	.word	0x000153a9
    317c:	0001597f 	.word	0x0001597f
    3180:	000167ad 	.word	0x000167ad
    3184:	000167b4 	.word	0x000167b4
    3188:	00016a4c 	.word	0x00016a4c
    318c:	20003ad8 	.word	0x20003ad8
    3190:	00016765 	.word	0x00016765
    3194:	00016a80 	.word	0x00016a80
    3198:	20003a68 	.word	0x20003a68

0000319c <le_conn_param_neg_reply>:
{
    319c:	b570      	push	{r4, r5, r6, lr}
    319e:	4606      	mov	r6, r0
    31a0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    31a2:	f242 0021 	movw	r0, #8225	; 0x2021
    31a6:	2103      	movs	r1, #3
    31a8:	f7fe ffa6 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    31ac:	4604      	mov	r4, r0
    31ae:	b160      	cbz	r0, 31ca <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    31b0:	2103      	movs	r1, #3
    31b2:	3008      	adds	r0, #8
    31b4:	f010 fadc 	bl	13770 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    31b8:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    31ba:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    31bc:	4621      	mov	r1, r4
    31be:	f242 0021 	movw	r0, #8225	; 0x2021
}
    31c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    31c6:	f7ff b9e9 	b.w	259c <bt_hci_cmd_send>
}
    31ca:	f06f 0036 	mvn.w	r0, #54	; 0x36
    31ce:	bd70      	pop	{r4, r5, r6, pc}

000031d0 <hci_tx_thread>:
{
    31d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31d4:	b089      	sub	sp, #36	; 0x24
    31d6:	f011 fb21 	bl	1481c <_impl_k_current_get>
	BT_DBG("Started");
    31da:	4c81      	ldr	r4, [pc, #516]	; (33e0 <hci_tx_thread+0x210>)
    31dc:	9001      	str	r0, [sp, #4]
    31de:	9402      	str	r4, [sp, #8]
    31e0:	9400      	str	r4, [sp, #0]
    31e2:	4b80      	ldr	r3, [pc, #512]	; (33e4 <hci_tx_thread+0x214>)
    31e4:	4a80      	ldr	r2, [pc, #512]	; (33e8 <hci_tx_thread+0x218>)
    31e6:	4981      	ldr	r1, [pc, #516]	; (33ec <hci_tx_thread+0x21c>)
    31e8:	4881      	ldr	r0, [pc, #516]	; (33f0 <hci_tx_thread+0x220>)
		events[0].state = K_POLL_STATE_NOT_READY;
    31ea:	f8df a210 	ldr.w	sl, [pc, #528]	; 33fc <hci_tx_thread+0x22c>
	BT_DBG("Started");
    31ee:	f7fd fecd 	bl	f8c <printk>
		events[0].state = K_POLL_STATE_NOT_READY;
    31f2:	f89a 300d 	ldrb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    31f6:	487f      	ldr	r0, [pc, #508]	; (33f4 <hci_tx_thread+0x224>)
		events[0].state = K_POLL_STATE_NOT_READY;
    31f8:	f36f 1307 	bfc	r3, #4, #4
    31fc:	f88a 300d 	strb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    3200:	f001 fbda 	bl	49b8 <bt_conn_prepare_events>
    3204:	f100 0801 	add.w	r8, r0, #1
    3208:	f011 fb08 	bl	1481c <_impl_k_current_get>
		BT_DBG("Calling k_poll with %d events", ev_count);
    320c:	4a76      	ldr	r2, [pc, #472]	; (33e8 <hci_tx_thread+0x218>)
    320e:	9001      	str	r0, [sp, #4]
    3210:	4976      	ldr	r1, [pc, #472]	; (33ec <hci_tx_thread+0x21c>)
    3212:	9403      	str	r4, [sp, #12]
    3214:	f8cd 8008 	str.w	r8, [sp, #8]
    3218:	9400      	str	r4, [sp, #0]
    321a:	4b72      	ldr	r3, [pc, #456]	; (33e4 <hci_tx_thread+0x214>)
    321c:	4876      	ldr	r0, [pc, #472]	; (33f8 <hci_tx_thread+0x228>)
    321e:	f7fd feb5 	bl	f8c <printk>

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    3222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3226:	4641      	mov	r1, r8
    3228:	4874      	ldr	r0, [pc, #464]	; (33fc <hci_tx_thread+0x22c>)
    322a:	f011 ff47 	bl	150bc <_impl_k_poll>
		BT_ASSERT(err == 0);
    322e:	b168      	cbz	r0, 324c <hci_tx_thread+0x7c>
    3230:	4b6c      	ldr	r3, [pc, #432]	; (33e4 <hci_tx_thread+0x214>)
    3232:	4a73      	ldr	r2, [pc, #460]	; (3400 <hci_tx_thread+0x230>)
    3234:	496d      	ldr	r1, [pc, #436]	; (33ec <hci_tx_thread+0x21c>)
    3236:	4873      	ldr	r0, [pc, #460]	; (3404 <hci_tx_thread+0x234>)
    3238:	9401      	str	r4, [sp, #4]
    323a:	9400      	str	r4, [sp, #0]
	BT_ASSERT(buf);
    323c:	f7fd fea6 	bl	f8c <printk>
    3240:	4040      	eors	r0, r0
    3242:	f380 8811 	msr	BASEPRI, r0
    3246:	f04f 0004 	mov.w	r0, #4
    324a:	df02      	svc	2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    324c:	f011 fae6 	bl	1481c <_impl_k_current_get>
	BT_DBG("count %d", count);
    3250:	9403      	str	r4, [sp, #12]
    3252:	9001      	str	r0, [sp, #4]
    3254:	f8cd 8008 	str.w	r8, [sp, #8]
    3258:	9400      	str	r4, [sp, #0]
    325a:	4b6b      	ldr	r3, [pc, #428]	; (3408 <hci_tx_thread+0x238>)
    325c:	4a62      	ldr	r2, [pc, #392]	; (33e8 <hci_tx_thread+0x218>)
    325e:	4963      	ldr	r1, [pc, #396]	; (33ec <hci_tx_thread+0x21c>)
    3260:	486a      	ldr	r0, [pc, #424]	; (340c <hci_tx_thread+0x23c>)
    3262:	4d66      	ldr	r5, [pc, #408]	; (33fc <hci_tx_thread+0x22c>)
		BT_DBG("ev->state %u", ev->state);
    3264:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 3408 <hci_tx_thread+0x238>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3268:	4e69      	ldr	r6, [pc, #420]	; (3410 <hci_tx_thread+0x240>)
	BT_DBG("count %d", count);
    326a:	f7fd fe8f 	bl	f8c <printk>
	for (; count; ev++, count--) {
    326e:	f1b8 0f00 	cmp.w	r8, #0
    3272:	d102      	bne.n	327a <hci_tx_thread+0xaa>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    3274:	f011 faa2 	bl	147bc <_impl_k_yield>
    3278:	e7bb      	b.n	31f2 <hci_tx_thread+0x22>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    327a:	f011 facf 	bl	1481c <_impl_k_current_get>
		BT_DBG("ev->state %u", ev->state);
    327e:	7b6b      	ldrb	r3, [r5, #13]
    3280:	9001      	str	r0, [sp, #4]
    3282:	091b      	lsrs	r3, r3, #4
    3284:	9302      	str	r3, [sp, #8]
    3286:	9403      	str	r4, [sp, #12]
    3288:	465b      	mov	r3, fp
    328a:	9400      	str	r4, [sp, #0]
    328c:	4a56      	ldr	r2, [pc, #344]	; (33e8 <hci_tx_thread+0x218>)
    328e:	4957      	ldr	r1, [pc, #348]	; (33ec <hci_tx_thread+0x21c>)
    3290:	4860      	ldr	r0, [pc, #384]	; (3414 <hci_tx_thread+0x244>)
    3292:	f7fd fe7b 	bl	f8c <printk>
		switch (ev->state) {
    3296:	7b6b      	ldrb	r3, [r5, #13]
    3298:	091b      	lsrs	r3, r3, #4
    329a:	2b01      	cmp	r3, #1
    329c:	f240 8081 	bls.w	33a2 <hci_tx_thread+0x1d2>
    32a0:	2b04      	cmp	r3, #4
    32a2:	f040 8092 	bne.w	33ca <hci_tx_thread+0x1fa>
			if (ev->tag == BT_EVENT_CMD_TX) {
    32a6:	f895 900c 	ldrb.w	r9, [r5, #12]
    32aa:	f1b9 0f00 	cmp.w	r9, #0
    32ae:	d17c      	bne.n	33aa <hci_tx_thread+0x1da>
    32b0:	f011 fab4 	bl	1481c <_impl_k_current_get>
	BT_DBG("calling net_buf_get");
    32b4:	4b58      	ldr	r3, [pc, #352]	; (3418 <hci_tx_thread+0x248>)
    32b6:	9001      	str	r0, [sp, #4]
    32b8:	4a4b      	ldr	r2, [pc, #300]	; (33e8 <hci_tx_thread+0x218>)
    32ba:	494c      	ldr	r1, [pc, #304]	; (33ec <hci_tx_thread+0x21c>)
    32bc:	9402      	str	r4, [sp, #8]
    32be:	9400      	str	r4, [sp, #0]
    32c0:	4856      	ldr	r0, [pc, #344]	; (341c <hci_tx_thread+0x24c>)
    32c2:	f7fd fe63 	bl	f8c <printk>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    32c6:	4649      	mov	r1, r9
    32c8:	4855      	ldr	r0, [pc, #340]	; (3420 <hci_tx_thread+0x250>)
    32ca:	f010 f9f5 	bl	136b8 <net_buf_get>
	BT_ASSERT(buf);
    32ce:	4607      	mov	r7, r0
    32d0:	b930      	cbnz	r0, 32e0 <hci_tx_thread+0x110>
    32d2:	9401      	str	r4, [sp, #4]
    32d4:	9400      	str	r4, [sp, #0]
    32d6:	4b50      	ldr	r3, [pc, #320]	; (3418 <hci_tx_thread+0x248>)
    32d8:	4a49      	ldr	r2, [pc, #292]	; (3400 <hci_tx_thread+0x230>)
    32da:	4944      	ldr	r1, [pc, #272]	; (33ec <hci_tx_thread+0x21c>)
    32dc:	4851      	ldr	r0, [pc, #324]	; (3424 <hci_tx_thread+0x254>)
    32de:	e7ad      	b.n	323c <hci_tx_thread+0x6c>
    32e0:	f011 fa9c 	bl	1481c <_impl_k_current_get>
	BT_DBG("calling sem_take_wait");
    32e4:	4b4c      	ldr	r3, [pc, #304]	; (3418 <hci_tx_thread+0x248>)
    32e6:	9001      	str	r0, [sp, #4]
    32e8:	4a3f      	ldr	r2, [pc, #252]	; (33e8 <hci_tx_thread+0x218>)
    32ea:	4940      	ldr	r1, [pc, #256]	; (33ec <hci_tx_thread+0x21c>)
    32ec:	9402      	str	r4, [sp, #8]
    32ee:	9400      	str	r4, [sp, #0]
    32f0:	484d      	ldr	r0, [pc, #308]	; (3428 <hci_tx_thread+0x258>)
    32f2:	f7fd fe4b 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    32f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    32fa:	484c      	ldr	r0, [pc, #304]	; (342c <hci_tx_thread+0x25c>)
    32fc:	f011 fac5 	bl	1488a <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    3300:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
    3304:	b16b      	cbz	r3, 3322 <hci_tx_thread+0x152>
		BT_ERR("Uncleared pending sent_cmd");
    3306:	4b44      	ldr	r3, [pc, #272]	; (3418 <hci_tx_thread+0x248>)
    3308:	4a3d      	ldr	r2, [pc, #244]	; (3400 <hci_tx_thread+0x230>)
    330a:	4938      	ldr	r1, [pc, #224]	; (33ec <hci_tx_thread+0x21c>)
    330c:	9401      	str	r4, [sp, #4]
    330e:	9400      	str	r4, [sp, #0]
    3310:	4847      	ldr	r0, [pc, #284]	; (3430 <hci_tx_thread+0x260>)
    3312:	f7fd fe3b 	bl	f8c <printk>
		net_buf_unref(bt_dev.sent_cmd);
    3316:	f8d6 00c0 	ldr.w	r0, [r6, #192]	; 0xc0
    331a:	f010 f9f7 	bl	1370c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    331e:	f8c6 90c0 	str.w	r9, [r6, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    3322:	4638      	mov	r0, r7
    3324:	f010 fa20 	bl	13768 <net_buf_ref>
    3328:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    332c:	f011 fa76 	bl	1481c <_impl_k_current_get>
    3330:	9007      	str	r0, [sp, #28]
	BT_DBG("Sending command 0x%04x (buf %p) to driver",
    3332:	4638      	mov	r0, r7
    3334:	f010 f92c 	bl	13590 <net_buf_id>
    3338:	f8df 9108 	ldr.w	r9, [pc, #264]	; 3444 <hci_tx_thread+0x274>
    333c:	9404      	str	r4, [sp, #16]
    333e:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    3342:	9703      	str	r7, [sp, #12]
    3344:	8842      	ldrh	r2, [r0, #2]
    3346:	9b07      	ldr	r3, [sp, #28]
    3348:	9202      	str	r2, [sp, #8]
    334a:	9301      	str	r3, [sp, #4]
    334c:	9400      	str	r4, [sp, #0]
    334e:	4b32      	ldr	r3, [pc, #200]	; (3418 <hci_tx_thread+0x248>)
    3350:	4a25      	ldr	r2, [pc, #148]	; (33e8 <hci_tx_thread+0x218>)
    3352:	4926      	ldr	r1, [pc, #152]	; (33ec <hci_tx_thread+0x21c>)
    3354:	4837      	ldr	r0, [pc, #220]	; (3434 <hci_tx_thread+0x264>)
    3356:	f7fd fe19 	bl	f8c <printk>
	err = bt_send(buf);
    335a:	4638      	mov	r0, r7
    335c:	f7ff f8f4 	bl	2548 <bt_send>
	if (err) {
    3360:	b1f8      	cbz	r0, 33a2 <hci_tx_thread+0x1d2>
		BT_ERR("Unable to send to driver (err %d)", err);
    3362:	4b2d      	ldr	r3, [pc, #180]	; (3418 <hci_tx_thread+0x248>)
    3364:	4a26      	ldr	r2, [pc, #152]	; (3400 <hci_tx_thread+0x230>)
    3366:	4921      	ldr	r1, [pc, #132]	; (33ec <hci_tx_thread+0x21c>)
    3368:	9001      	str	r0, [sp, #4]
    336a:	9402      	str	r4, [sp, #8]
    336c:	9400      	str	r4, [sp, #0]
    336e:	4832      	ldr	r0, [pc, #200]	; (3438 <hci_tx_thread+0x268>)
    3370:	f7fd fe0c 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3374:	482d      	ldr	r0, [pc, #180]	; (342c <hci_tx_thread+0x25c>)
    3376:	f011 fa60 	bl	1483a <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    337a:	4638      	mov	r0, r7
    337c:	f010 f908 	bl	13590 <net_buf_id>
    3380:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    3384:	2200      	movs	r2, #0
    3386:	211f      	movs	r1, #31
    3388:	8840      	ldrh	r0, [r0, #2]
    338a:	f7fe fe31 	bl	1ff0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    338e:	f8d6 00c0 	ldr.w	r0, [r6, #192]	; 0xc0
    3392:	f010 f9bb 	bl	1370c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3396:	2300      	movs	r3, #0
		net_buf_unref(buf);
    3398:	4638      	mov	r0, r7
		bt_dev.sent_cmd = NULL;
    339a:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
		net_buf_unref(buf);
    339e:	f010 f9b5 	bl	1370c <net_buf_unref>
	for (; count; ev++, count--) {
    33a2:	3514      	adds	r5, #20
    33a4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    33a8:	e761      	b.n	326e <hci_tx_thread+0x9e>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    33aa:	f1b9 0f01 	cmp.w	r9, #1
    33ae:	d104      	bne.n	33ba <hci_tx_thread+0x1ea>
					conn = CONTAINER_OF(ev->fifo,
    33b0:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    33b2:	3818      	subs	r0, #24
    33b4:	f001 f8ea 	bl	458c <bt_conn_notify_tx>
    33b8:	e7f3      	b.n	33a2 <hci_tx_thread+0x1d2>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    33ba:	f1b9 0f02 	cmp.w	r9, #2
    33be:	d1f0      	bne.n	33a2 <hci_tx_thread+0x1d2>
					conn = CONTAINER_OF(ev->fifo,
    33c0:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    33c2:	3828      	subs	r0, #40	; 0x28
    33c4:	f001 fe4e 	bl	5064 <bt_conn_process_tx>
    33c8:	e7eb      	b.n	33a2 <hci_tx_thread+0x1d2>
		switch (ev->state) {
    33ca:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    33cc:	9402      	str	r4, [sp, #8]
    33ce:	9400      	str	r4, [sp, #0]
    33d0:	465b      	mov	r3, fp
    33d2:	4a1a      	ldr	r2, [pc, #104]	; (343c <hci_tx_thread+0x26c>)
    33d4:	4905      	ldr	r1, [pc, #20]	; (33ec <hci_tx_thread+0x21c>)
    33d6:	481a      	ldr	r0, [pc, #104]	; (3440 <hci_tx_thread+0x270>)
    33d8:	f7fd fdd8 	bl	f8c <printk>
    33dc:	e7e1      	b.n	33a2 <hci_tx_thread+0x1d2>
    33de:	bf00      	nop
    33e0:	000153a9 	.word	0x000153a9
    33e4:	00015abd 	.word	0x00015abd
    33e8:	000167ad 	.word	0x000167ad
    33ec:	000167b4 	.word	0x000167b4
    33f0:	0001687e 	.word	0x0001687e
    33f4:	20003b54 	.word	0x20003b54
    33f8:	0001689b 	.word	0x0001689b
    33fc:	20003b40 	.word	0x20003b40
    3400:	00016765 	.word	0x00016765
    3404:	000168ce 	.word	0x000168ce
    3408:	00015aae 	.word	0x00015aae
    340c:	000168f8 	.word	0x000168f8
    3410:	20003a68 	.word	0x20003a68
    3414:	00016916 	.word	0x00016916
    3418:	00015aa5 	.word	0x00015aa5
    341c:	00016938 	.word	0x00016938
    3420:	20003b2c 	.word	0x20003b2c
    3424:	00016961 	.word	0x00016961
    3428:	00016986 	.word	0x00016986
    342c:	20003b10 	.word	0x20003b10
    3430:	000169b1 	.word	0x000169b1
    3434:	000169dc 	.word	0x000169dc
    3438:	00015dde 	.word	0x00015dde
    343c:	000167ef 	.word	0x000167ef
    3440:	00016a1b 	.word	0x00016a1b
    3444:	2000027c 	.word	0x2000027c

00003448 <bt_recv>:
{
    3448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    344c:	b097      	sub	sp, #92	; 0x5c
    344e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3450:	f011 f9e4 	bl	1481c <_impl_k_current_get>
	BT_DBG("buf %p len %u", buf, buf->len);
    3454:	4ead      	ldr	r6, [pc, #692]	; (370c <bt_recv+0x2c4>)
    3456:	89a3      	ldrh	r3, [r4, #12]
    3458:	9303      	str	r3, [sp, #12]
    345a:	9001      	str	r0, [sp, #4]
    345c:	9604      	str	r6, [sp, #16]
    345e:	9402      	str	r4, [sp, #8]
    3460:	9600      	str	r6, [sp, #0]
    3462:	4bab      	ldr	r3, [pc, #684]	; (3710 <bt_recv+0x2c8>)
    3464:	4aab      	ldr	r2, [pc, #684]	; (3714 <bt_recv+0x2cc>)
    3466:	49ac      	ldr	r1, [pc, #688]	; (3718 <bt_recv+0x2d0>)
    3468:	48ac      	ldr	r0, [pc, #688]	; (371c <bt_recv+0x2d4>)
    346a:	f7fd fd8f 	bl	f8c <printk>
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    346e:	7d27      	ldrb	r7, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    3470:	2f01      	cmp	r7, #1
    3472:	4635      	mov	r5, r6
    3474:	d05b      	beq.n	352e <bt_recv+0xe6>
    3476:	2f03      	cmp	r7, #3
    3478:	f040 8420 	bne.w	3cbc <bt_recv+0x874>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    347c:	68a7      	ldr	r7, [r4, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    347e:	887d      	ldrh	r5, [r7, #2]
    3480:	f011 f9cc 	bl	1481c <_impl_k_current_get>
	BT_DBG("buf %p", buf);
    3484:	4aa3      	ldr	r2, [pc, #652]	; (3714 <bt_recv+0x2cc>)
    3486:	9001      	str	r0, [sp, #4]
    3488:	4ba5      	ldr	r3, [pc, #660]	; (3720 <bt_recv+0x2d8>)
    348a:	49a3      	ldr	r1, [pc, #652]	; (3718 <bt_recv+0x2d0>)
    348c:	9603      	str	r6, [sp, #12]
    348e:	9402      	str	r4, [sp, #8]
    3490:	9600      	str	r6, [sp, #0]
    3492:	48a4      	ldr	r0, [pc, #656]	; (3724 <bt_recv+0x2dc>)
    3494:	f7fd fd7a 	bl	f8c <printk>
	handle = sys_le16_to_cpu(hdr->handle);
    3498:	883b      	ldrh	r3, [r7, #0]
	flags = bt_acl_flags(handle);
    349a:	0b1f      	lsrs	r7, r3, #12
	acl(buf)->handle = bt_acl_handle(handle);
    349c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    34a0:	82e3      	strh	r3, [r4, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    34a2:	23ff      	movs	r3, #255	; 0xff
    34a4:	7563      	strb	r3, [r4, #21]
	net_buf_pull(buf, sizeof(*hdr));
    34a6:	2104      	movs	r1, #4
    34a8:	f104 0008 	add.w	r0, r4, #8
    34ac:	f010 f98e 	bl	137cc <net_buf_simple_pull>
    34b0:	f011 f9b4 	bl	1481c <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %u", acl(buf)->handle, len, flags);
    34b4:	8ae3      	ldrh	r3, [r4, #22]
    34b6:	9302      	str	r3, [sp, #8]
    34b8:	9001      	str	r0, [sp, #4]
    34ba:	4b99      	ldr	r3, [pc, #612]	; (3720 <bt_recv+0x2d8>)
    34bc:	9605      	str	r6, [sp, #20]
    34be:	9704      	str	r7, [sp, #16]
    34c0:	9503      	str	r5, [sp, #12]
    34c2:	9600      	str	r6, [sp, #0]
    34c4:	4a93      	ldr	r2, [pc, #588]	; (3714 <bt_recv+0x2cc>)
    34c6:	4994      	ldr	r1, [pc, #592]	; (3718 <bt_recv+0x2d0>)
    34c8:	4897      	ldr	r0, [pc, #604]	; (3728 <bt_recv+0x2e0>)
    34ca:	f7fd fd5f 	bl	f8c <printk>
	if (buf->len != len) {
    34ce:	89a3      	ldrh	r3, [r4, #12]
    34d0:	429d      	cmp	r5, r3
    34d2:	d00d      	beq.n	34f0 <bt_recv+0xa8>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    34d4:	9301      	str	r3, [sp, #4]
    34d6:	9603      	str	r6, [sp, #12]
    34d8:	9502      	str	r5, [sp, #8]
    34da:	9600      	str	r6, [sp, #0]
    34dc:	4b90      	ldr	r3, [pc, #576]	; (3720 <bt_recv+0x2d8>)
    34de:	4a93      	ldr	r2, [pc, #588]	; (372c <bt_recv+0x2e4>)
    34e0:	498d      	ldr	r1, [pc, #564]	; (3718 <bt_recv+0x2d0>)
    34e2:	4893      	ldr	r0, [pc, #588]	; (3730 <bt_recv+0x2e8>)
    34e4:	f7fd fd52 	bl	f8c <printk>
	net_buf_unref(buf);
    34e8:	4620      	mov	r0, r4
    34ea:	f010 f90f 	bl	1370c <net_buf_unref>
    34ee:	e01a      	b.n	3526 <bt_recv+0xde>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    34f0:	8ae0      	ldrh	r0, [r4, #22]
    34f2:	f001 f9cb 	bl	488c <bt_conn_lookup_handle>
	if (!conn) {
    34f6:	4605      	mov	r5, r0
    34f8:	b950      	cbnz	r0, 3510 <bt_recv+0xc8>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    34fa:	8ae3      	ldrh	r3, [r4, #22]
    34fc:	9301      	str	r3, [sp, #4]
    34fe:	4a8b      	ldr	r2, [pc, #556]	; (372c <bt_recv+0x2e4>)
    3500:	4b87      	ldr	r3, [pc, #540]	; (3720 <bt_recv+0x2d8>)
    3502:	4985      	ldr	r1, [pc, #532]	; (3718 <bt_recv+0x2d0>)
    3504:	488b      	ldr	r0, [pc, #556]	; (3734 <bt_recv+0x2ec>)
    3506:	9602      	str	r6, [sp, #8]
    3508:	9600      	str	r6, [sp, #0]
		BT_ERR("Unable to lookup conn for handle %u", handle);
    350a:	f7fd fd3f 	bl	f8c <printk>
    350e:	e7eb      	b.n	34e8 <bt_recv+0xa0>
	acl(buf)->id = bt_conn_get_id(conn);
    3510:	f001 fe4e 	bl	51b0 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    3514:	463a      	mov	r2, r7
	acl(buf)->id = bt_conn_get_id(conn);
    3516:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    3518:	4621      	mov	r1, r4
    351a:	4628      	mov	r0, r5
    351c:	f000 ff06 	bl	432c <bt_conn_recv>
	bt_conn_unref(conn);
    3520:	4628      	mov	r0, r5
    3522:	f001 fa01 	bl	4928 <bt_conn_unref>
		return 0;
    3526:	2000      	movs	r0, #0
}
    3528:	b017      	add	sp, #92	; 0x5c
    352a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    352e:	f8d4 8008 	ldr.w	r8, [r4, #8]
    3532:	f011 f973 	bl	1481c <_impl_k_current_get>
	BT_DBG("event 0x%02x", hdr->evt);
    3536:	9603      	str	r6, [sp, #12]
    3538:	f898 3000 	ldrb.w	r3, [r8]
    353c:	9302      	str	r3, [sp, #8]
    353e:	9001      	str	r0, [sp, #4]
    3540:	4b7d      	ldr	r3, [pc, #500]	; (3738 <bt_recv+0x2f0>)
    3542:	9600      	str	r6, [sp, #0]
    3544:	4a73      	ldr	r2, [pc, #460]	; (3714 <bt_recv+0x2cc>)
    3546:	4974      	ldr	r1, [pc, #464]	; (3718 <bt_recv+0x2d0>)
    3548:	487c      	ldr	r0, [pc, #496]	; (373c <bt_recv+0x2f4>)
    354a:	f7fd fd1f 	bl	f8c <printk>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    354e:	f898 3000 	ldrb.w	r3, [r8]
    3552:	2b13      	cmp	r3, #19
    3554:	f200 83c1 	bhi.w	3cda <bt_recv+0x892>
    3558:	409f      	lsls	r7, r3
    355a:	f417 2f0c 	tst.w	r7, #573440	; 0x8c000
    355e:	f000 83bc 	beq.w	3cda <bt_recv+0x892>
    3562:	9601      	str	r6, [sp, #4]
    3564:	9600      	str	r6, [sp, #0]
    3566:	4b74      	ldr	r3, [pc, #464]	; (3738 <bt_recv+0x2f0>)
    3568:	4a70      	ldr	r2, [pc, #448]	; (372c <bt_recv+0x2e4>)
    356a:	496b      	ldr	r1, [pc, #428]	; (3718 <bt_recv+0x2d0>)
    356c:	4874      	ldr	r0, [pc, #464]	; (3740 <bt_recv+0x2f8>)
    356e:	f7fd fd0d 	bl	f8c <printk>
    3572:	4040      	eors	r0, r0
    3574:	f380 8811 	msr	BASEPRI, r0
    3578:	f04f 0004 	mov.w	r0, #4
    357c:	df02      	svc	2
    357e:	68a7      	ldr	r7, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3580:	f8b7 9001 	ldrh.w	r9, [r7, #1]
    3584:	f011 f94a 	bl	1481c <_impl_k_current_get>
	BT_DBG("status %u handle %u reason %u", evt->status, handle,
    3588:	9505      	str	r5, [sp, #20]
    358a:	78fb      	ldrb	r3, [r7, #3]
    358c:	9304      	str	r3, [sp, #16]
    358e:	f8cd 900c 	str.w	r9, [sp, #12]
    3592:	783b      	ldrb	r3, [r7, #0]
    3594:	9302      	str	r3, [sp, #8]
    3596:	9001      	str	r0, [sp, #4]
    3598:	9500      	str	r5, [sp, #0]
    359a:	4b6a      	ldr	r3, [pc, #424]	; (3744 <bt_recv+0x2fc>)
    359c:	4a5d      	ldr	r2, [pc, #372]	; (3714 <bt_recv+0x2cc>)
    359e:	495e      	ldr	r1, [pc, #376]	; (3718 <bt_recv+0x2d0>)
    35a0:	4869      	ldr	r0, [pc, #420]	; (3748 <bt_recv+0x300>)
    35a2:	f7fd fcf3 	bl	f8c <printk>
	if (evt->status) {
    35a6:	f897 8000 	ldrb.w	r8, [r7]
    35aa:	f1b8 0f00 	cmp.w	r8, #0
    35ae:	d19b      	bne.n	34e8 <bt_recv+0xa0>
	conn = bt_conn_lookup_handle(handle);
    35b0:	4648      	mov	r0, r9
    35b2:	f001 f96b 	bl	488c <bt_conn_lookup_handle>
	if (!conn) {
    35b6:	4606      	mov	r6, r0
    35b8:	b9c0      	cbnz	r0, 35ec <bt_recv+0x1a4>
		BT_ERR("Unable to look up conn with handle %u", handle);
    35ba:	9502      	str	r5, [sp, #8]
    35bc:	e88d 0220 	stmia.w	sp, {r5, r9}
    35c0:	4b60      	ldr	r3, [pc, #384]	; (3744 <bt_recv+0x2fc>)
    35c2:	4a5a      	ldr	r2, [pc, #360]	; (372c <bt_recv+0x2e4>)
    35c4:	4954      	ldr	r1, [pc, #336]	; (3718 <bt_recv+0x2d0>)
    35c6:	4861      	ldr	r0, [pc, #388]	; (374c <bt_recv+0x304>)
    35c8:	f7fd fce0 	bl	f8c <printk>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    35cc:	2107      	movs	r1, #7
    35ce:	4860      	ldr	r0, [pc, #384]	; (3750 <bt_recv+0x308>)
    35d0:	f7fe fd84 	bl	20dc <atomic_test_bit>
    35d4:	2800      	cmp	r0, #0
    35d6:	d087      	beq.n	34e8 <bt_recv+0xa0>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    35d8:	2106      	movs	r1, #6
    35da:	485d      	ldr	r0, [pc, #372]	; (3750 <bt_recv+0x308>)
    35dc:	f7fe fd7e 	bl	20dc <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    35e0:	2800      	cmp	r0, #0
    35e2:	d181      	bne.n	34e8 <bt_recv+0xa0>
		set_advertise_enable(true);
    35e4:	2001      	movs	r0, #1
    35e6:	f7fe fed9 	bl	239c <set_advertise_enable>
    35ea:	e77d      	b.n	34e8 <bt_recv+0xa0>
	conn->err = evt->reason;
    35ec:	78fb      	ldrb	r3, [r7, #3]
    35ee:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    35f0:	4958      	ldr	r1, [pc, #352]	; (3754 <bt_recv+0x30c>)
    35f2:	4859      	ldr	r0, [pc, #356]	; (3758 <bt_recv+0x310>)
    35f4:	f011 fad2 	bl	14b9c <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    35f8:	4641      	mov	r1, r8
    35fa:	4630      	mov	r0, r6
    35fc:	f001 fa4a 	bl	4a94 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    3600:	78b5      	ldrb	r5, [r6, #2]
	conn->handle = 0;
    3602:	f8a6 8000 	strh.w	r8, [r6]
	if (conn->type != BT_CONN_TYPE_LE) {
    3606:	b10d      	cbz	r5, 360c <bt_recv+0x1c4>
	bt_conn_unref(conn);
    3608:	4630      	mov	r0, r6
    360a:	e0e7      	b.n	37dc <bt_recv+0x394>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    360c:	4629      	mov	r1, r5
    360e:	1d30      	adds	r0, r6, #4
    3610:	f7fe fd64 	bl	20dc <atomic_test_bit>
    3614:	b130      	cbz	r0, 3624 <bt_recv+0x1dc>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    3616:	4630      	mov	r0, r6
    3618:	2101      	movs	r1, #1
    361a:	f001 fa3b 	bl	4a94 <bt_conn_set_state>
		bt_le_scan_update(false);
    361e:	4628      	mov	r0, r5
    3620:	f7ff f84a 	bl	26b8 <bt_le_scan_update>
	bt_conn_unref(conn);
    3624:	4630      	mov	r0, r6
    3626:	f001 f97f 	bl	4928 <bt_conn_unref>
    362a:	e7cf      	b.n	35cc <bt_recv+0x184>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    362c:	68a6      	ldr	r6, [r4, #8]
    362e:	f011 f8f5 	bl	1481c <_impl_k_current_get>
	BT_DBG("subevent 0x%02x", evt->subevent);
    3632:	9503      	str	r5, [sp, #12]
    3634:	7833      	ldrb	r3, [r6, #0]
    3636:	9302      	str	r3, [sp, #8]
    3638:	9001      	str	r0, [sp, #4]
    363a:	4b48      	ldr	r3, [pc, #288]	; (375c <bt_recv+0x314>)
    363c:	4a35      	ldr	r2, [pc, #212]	; (3714 <bt_recv+0x2cc>)
    363e:	4936      	ldr	r1, [pc, #216]	; (3718 <bt_recv+0x2d0>)
    3640:	9500      	str	r5, [sp, #0]
    3642:	4847      	ldr	r0, [pc, #284]	; (3760 <bt_recv+0x318>)
    3644:	f7fd fca2 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    3648:	2101      	movs	r1, #1
    364a:	4638      	mov	r0, r7
    364c:	f010 f8be 	bl	137cc <net_buf_simple_pull>
	switch (evt->subevent) {
    3650:	7836      	ldrb	r6, [r6, #0]
    3652:	1e73      	subs	r3, r6, #1
    3654:	2b0b      	cmp	r3, #11
    3656:	f200 8321 	bhi.w	3c9c <bt_recv+0x854>
    365a:	e8df f013 	tbh	[pc, r3, lsl #1]
    365e:	000c      	.short	0x000c
    3660:	0089022f 	.word	0x0089022f
    3664:	031f00c2 	.word	0x031f00c2
    3668:	015700fb 	.word	0x015700fb
    366c:	021301c2 	.word	0x021301c2
    3670:	031f0087 	.word	0x031f0087
    3674:	0189      	.short	0x0189
    3676:	68a6      	ldr	r6, [r4, #8]
    3678:	f011 f8d0 	bl	1481c <_impl_k_current_get>
	BT_DBG("status %u role %u %s", evt->status, evt->role,
    367c:	1d37      	adds	r7, r6, #4
    367e:	4680      	mov	r8, r0
    3680:	4638      	mov	r0, r7
    3682:	f896 9000 	ldrb.w	r9, [r6]
    3686:	f896 a003 	ldrb.w	sl, [r6, #3]
    368a:	f7fe fb63 	bl	1d54 <bt_addr_le_str>
    368e:	4a21      	ldr	r2, [pc, #132]	; (3714 <bt_recv+0x2cc>)
    3690:	9505      	str	r5, [sp, #20]
    3692:	9004      	str	r0, [sp, #16]
    3694:	e88d 0720 	stmia.w	sp, {r5, r8, r9, sl}
    3698:	4b32      	ldr	r3, [pc, #200]	; (3764 <bt_recv+0x31c>)
    369a:	491f      	ldr	r1, [pc, #124]	; (3718 <bt_recv+0x2d0>)
    369c:	4832      	ldr	r0, [pc, #200]	; (3768 <bt_recv+0x320>)
    369e:	f7fd fc75 	bl	f8c <printk>
	enh.status         = evt->status;
    36a2:	7833      	ldrb	r3, [r6, #0]
    36a4:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	enh.handle         = evt->handle;
    36a8:	f8b6 3001 	ldrh.w	r3, [r6, #1]
    36ac:	f8ad 3039 	strh.w	r3, [sp, #57]	; 0x39
	enh.role           = evt->role;
    36b0:	78f3      	ldrb	r3, [r6, #3]
    36b2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	enh.interval       = evt->interval;
    36b6:	f8b6 300b 	ldrh.w	r3, [r6, #11]
    36ba:	f8ad 304f 	strh.w	r3, [sp, #79]	; 0x4f
	enh.latency        = evt->latency;
    36be:	f8b6 300d 	ldrh.w	r3, [r6, #13]
    36c2:	f8ad 3051 	strh.w	r3, [sp, #81]	; 0x51
	enh.supv_timeout   = evt->supv_timeout;
    36c6:	f8b6 300f 	ldrh.w	r3, [r6, #15]
    36ca:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	enh.clock_accuracy = evt->clock_accuracy;
    36ce:	7c73      	ldrb	r3, [r6, #17]
    36d0:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    36d4:	4639      	mov	r1, r7
    36d6:	a80f      	add	r0, sp, #60	; 0x3c
    36d8:	f7fe fc56 	bl	1f88 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    36dc:	2500      	movs	r5, #0
    36de:	2206      	movs	r2, #6
    36e0:	a90a      	add	r1, sp, #40	; 0x28
    36e2:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    36e6:	950a      	str	r5, [sp, #40]	; 0x28
    36e8:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    36ec:	f7fe fa86 	bl	1bfc <memcpy>
    36f0:	2206      	movs	r2, #6
    36f2:	a90c      	add	r1, sp, #48	; 0x30
    36f4:	f10d 0049 	add.w	r0, sp, #73	; 0x49
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    36f8:	950c      	str	r5, [sp, #48]	; 0x30
    36fa:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    36fe:	f7fe fa7d 	bl	1bfc <memcpy>
	le_enh_conn_complete(&enh);
    3702:	a80e      	add	r0, sp, #56	; 0x38
		le_enh_conn_complete((void *)buf->data);
    3704:	f7ff fc50 	bl	2fa8 <le_enh_conn_complete>
    3708:	e6ee      	b.n	34e8 <bt_recv+0xa0>
    370a:	bf00      	nop
    370c:	000153a9 	.word	0x000153a9
    3710:	00015bfb 	.word	0x00015bfb
    3714:	000167ad 	.word	0x000167ad
    3718:	000167b4 	.word	0x000167b4
    371c:	000161da 	.word	0x000161da
    3720:	00015948 	.word	0x00015948
    3724:	00015d98 	.word	0x00015d98
    3728:	000161fd 	.word	0x000161fd
    372c:	00016765 	.word	0x00016765
    3730:	0001622c 	.word	0x0001622c
    3734:	00016260 	.word	0x00016260
    3738:	00015a9b 	.word	0x00015a9b
    373c:	00016292 	.word	0x00016292
    3740:	0001655a 	.word	0x0001655a
    3744:	0001596a 	.word	0x0001596a
    3748:	000162b4 	.word	0x000162b4
    374c:	000162e7 	.word	0x000162e7
    3750:	20003ad8 	.word	0x20003ad8
    3754:	0001631d 	.word	0x0001631d
    3758:	00001f4d 	.word	0x00001f4d
    375c:	00015a89 	.word	0x00015a89
    3760:	00016321 	.word	0x00016321
    3764:	00015994 	.word	0x00015994
    3768:	00016346 	.word	0x00016346
    376c:	68a0      	ldr	r0, [r4, #8]
    376e:	e7c9      	b.n	3704 <bt_recv+0x2bc>
    3770:	68a6      	ldr	r6, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    3772:	f8b6 8001 	ldrh.w	r8, [r6, #1]
    3776:	f011 f851 	bl	1481c <_impl_k_current_get>
	BT_DBG("status %u, handle %u", evt->status, handle);
    377a:	9504      	str	r5, [sp, #16]
    377c:	f8cd 800c 	str.w	r8, [sp, #12]
    3780:	7833      	ldrb	r3, [r6, #0]
    3782:	9302      	str	r3, [sp, #8]
    3784:	9001      	str	r0, [sp, #4]
    3786:	4bad      	ldr	r3, [pc, #692]	; (3a3c <bt_recv+0x5f4>)
    3788:	4aad      	ldr	r2, [pc, #692]	; (3a40 <bt_recv+0x5f8>)
    378a:	49ae      	ldr	r1, [pc, #696]	; (3a44 <bt_recv+0x5fc>)
    378c:	9500      	str	r5, [sp, #0]
    378e:	48ae      	ldr	r0, [pc, #696]	; (3a48 <bt_recv+0x600>)
    3790:	f7fd fbfc 	bl	f8c <printk>
	conn = bt_conn_lookup_handle(handle);
    3794:	4640      	mov	r0, r8
    3796:	f001 f879 	bl	488c <bt_conn_lookup_handle>
	if (!conn) {
    379a:	4607      	mov	r7, r0
    379c:	b938      	cbnz	r0, 37ae <bt_recv+0x366>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    379e:	e88d 0120 	stmia.w	sp, {r5, r8}
    37a2:	4ba6      	ldr	r3, [pc, #664]	; (3a3c <bt_recv+0x5f4>)
    37a4:	9502      	str	r5, [sp, #8]
		BT_ERR("Unable to lookup conn for handle %u", handle);
    37a6:	4aa9      	ldr	r2, [pc, #676]	; (3a4c <bt_recv+0x604>)
    37a8:	49a6      	ldr	r1, [pc, #664]	; (3a44 <bt_recv+0x5fc>)
    37aa:	48a9      	ldr	r0, [pc, #676]	; (3a50 <bt_recv+0x608>)
    37ac:	e6ad      	b.n	350a <bt_recv+0xc2>
	if (!evt->status) {
    37ae:	7833      	ldrb	r3, [r6, #0]
    37b0:	b99b      	cbnz	r3, 37da <bt_recv+0x392>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    37b2:	7932      	ldrb	r2, [r6, #4]
    37b4:	78f3      	ldrb	r3, [r6, #3]
    37b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    37ba:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    37be:	79b2      	ldrb	r2, [r6, #6]
    37c0:	7973      	ldrb	r3, [r6, #5]
    37c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    37c6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    37ca:	79f3      	ldrb	r3, [r6, #7]
    37cc:	7a32      	ldrb	r2, [r6, #8]
    37ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    37d2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    37d6:	f000 fd6d 	bl	42b4 <notify_le_param_updated>
	bt_conn_unref(conn);
    37da:	4638      	mov	r0, r7
	bt_conn_unref(conn);
    37dc:	f001 f8a4 	bl	4928 <bt_conn_unref>
    37e0:	e682      	b.n	34e8 <bt_recv+0xa0>
    37e2:	68a7      	ldr	r7, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    37e4:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    37e8:	4640      	mov	r0, r8
    37ea:	f001 f84f 	bl	488c <bt_conn_lookup_handle>
	if (!conn) {
    37ee:	4606      	mov	r6, r0
    37f0:	b920      	cbnz	r0, 37fc <bt_recv+0x3b4>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    37f2:	9502      	str	r5, [sp, #8]
    37f4:	e88d 0120 	stmia.w	sp, {r5, r8}
    37f8:	4b96      	ldr	r3, [pc, #600]	; (3a54 <bt_recv+0x60c>)
    37fa:	e7d4      	b.n	37a6 <bt_recv+0x35e>
	if (!evt->status) {
    37fc:	783b      	ldrb	r3, [r7, #0]
    37fe:	b923      	cbnz	r3, 380a <bt_recv+0x3c2>
		memcpy(conn->le.features, evt->features,
    3800:	2208      	movs	r2, #8
    3802:	1cf9      	adds	r1, r7, #3
    3804:	3064      	adds	r0, #100	; 0x64
    3806:	f7fe f9f9 	bl	1bfc <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    380a:	4d93      	ldr	r5, [pc, #588]	; (3a58 <bt_recv+0x610>)
    380c:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    3810:	07d2      	lsls	r2, r2, #31
    3812:	d50c      	bpl.n	382e <bt_recv+0x3e6>
    3814:	f896 3065 	ldrb.w	r3, [r6, #101]	; 0x65
    3818:	07db      	lsls	r3, r3, #31
    381a:	d508      	bpl.n	382e <bt_recv+0x3e6>
		err = hci_le_set_phy(conn);
    381c:	4630      	mov	r0, r6
    381e:	f7ff fb79 	bl	2f14 <hci_le_set_phy.isra.28>
		if (!err) {
    3822:	b920      	cbnz	r0, 382e <bt_recv+0x3e6>
    3824:	2180      	movs	r1, #128	; 0x80
    3826:	1d30      	adds	r0, r6, #4
    3828:	f7fe fbb1 	bl	1f8e <atomic_or>
    382c:	e6ec      	b.n	3608 <bt_recv+0x1c0>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    382e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    3832:	069f      	lsls	r7, r3, #26
    3834:	f140 8098 	bpl.w	3968 <bt_recv+0x520>
    3838:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
    383c:	069d      	lsls	r5, r3, #26
    383e:	f140 8093 	bpl.w	3968 <bt_recv+0x520>
		err = hci_le_set_data_len(conn);
    3842:	4630      	mov	r0, r6
    3844:	f7ff fb86 	bl	2f54 <hci_le_set_data_len.isra.29>
		if (!err) {
    3848:	2800      	cmp	r0, #0
    384a:	f040 808d 	bne.w	3968 <bt_recv+0x520>
    384e:	f44f 7180 	mov.w	r1, #256	; 0x100
    3852:	e7e8      	b.n	3826 <bt_recv+0x3de>
    3854:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3856:	78d9      	ldrb	r1, [r3, #3]
    3858:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    385a:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    385c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3860:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    3864:	7959      	ldrb	r1, [r3, #5]
    3866:	791a      	ldrb	r2, [r3, #4]
    3868:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    386c:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
	param.latency = sys_le16_to_cpu(evt->latency);
    3870:	799a      	ldrb	r2, [r3, #6]
    3872:	79d9      	ldrb	r1, [r3, #7]
    3874:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3878:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
	param.timeout = sys_le16_to_cpu(evt->timeout);
    387c:	7a1a      	ldrb	r2, [r3, #8]
    387e:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    3880:	b2be      	uxth	r6, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3882:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    3886:	4630      	mov	r0, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3888:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
	conn = bt_conn_lookup_handle(handle);
    388c:	f000 fffe 	bl	488c <bt_conn_lookup_handle>
	if (!conn) {
    3890:	4680      	mov	r8, r0
    3892:	b968      	cbnz	r0, 38b0 <bt_recv+0x468>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3894:	9502      	str	r5, [sp, #8]
    3896:	e88d 0060 	stmia.w	sp, {r5, r6}
    389a:	4b70      	ldr	r3, [pc, #448]	; (3a5c <bt_recv+0x614>)
    389c:	4a6b      	ldr	r2, [pc, #428]	; (3a4c <bt_recv+0x604>)
    389e:	4969      	ldr	r1, [pc, #420]	; (3a44 <bt_recv+0x5fc>)
    38a0:	486b      	ldr	r0, [pc, #428]	; (3a50 <bt_recv+0x608>)
    38a2:	f7fd fb73 	bl	f8c <printk>
		return le_conn_param_neg_reply(handle,
    38a6:	2102      	movs	r1, #2
    38a8:	4630      	mov	r0, r6
    38aa:	f7ff fc77 	bl	319c <le_conn_param_neg_reply>
    38ae:	e61b      	b.n	34e8 <bt_recv+0xa0>
	if (!le_param_req(conn, &param)) {
    38b0:	a90e      	add	r1, sp, #56	; 0x38
    38b2:	f000 fd13 	bl	42dc <le_param_req>
    38b6:	b928      	cbnz	r0, 38c4 <bt_recv+0x47c>
		err = le_conn_param_neg_reply(handle,
    38b8:	211e      	movs	r1, #30
    38ba:	4630      	mov	r0, r6
    38bc:	f7ff fc6e 	bl	319c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    38c0:	4640      	mov	r0, r8
    38c2:	e78b      	b.n	37dc <bt_recv+0x394>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    38c4:	210e      	movs	r1, #14
    38c6:	f242 0020 	movw	r0, #8224	; 0x2020
    38ca:	f7fe fc15 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    38ce:	4606      	mov	r6, r0
    38d0:	2800      	cmp	r0, #0
    38d2:	d0f5      	beq.n	38c0 <bt_recv+0x478>
	cp = net_buf_add(buf, sizeof(*cp));
    38d4:	210e      	movs	r1, #14
    38d6:	3008      	adds	r0, #8
    38d8:	f00f ff4a 	bl	13770 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    38dc:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    38de:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    38e0:	2100      	movs	r1, #0
    38e2:	f7fe f9b7 	bl	1c54 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    38e6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    38ea:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    38ec:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    38f0:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    38f2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    38f6:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    38f8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
	cp->handle = sys_cpu_to_le16(handle);
    38fc:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    38fe:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    3900:	4631      	mov	r1, r6
    3902:	f242 0020 	movw	r0, #8224	; 0x2020
    3906:	f7fe fe49 	bl	259c <bt_hci_cmd_send>
    390a:	e7d9      	b.n	38c0 <bt_recv+0x478>
    390c:	68a3      	ldr	r3, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    390e:	f8b3 b000 	ldrh.w	fp, [r3]
	u16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
    3912:	885f      	ldrh	r7, [r3, #2]
	u16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
    3914:	f8b3 9006 	ldrh.w	r9, [r3, #6]
	u16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
    3918:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	u16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
    391c:	f8b3 a008 	ldrh.w	sl, [r3, #8]
	conn = bt_conn_lookup_handle(handle);
    3920:	4658      	mov	r0, fp
    3922:	f000 ffb3 	bl	488c <bt_conn_lookup_handle>
	if (!conn) {
    3926:	4606      	mov	r6, r0
    3928:	b920      	cbnz	r0, 3934 <bt_recv+0x4ec>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    392a:	9502      	str	r5, [sp, #8]
    392c:	e88d 0820 	stmia.w	sp, {r5, fp}
    3930:	4b4b      	ldr	r3, [pc, #300]	; (3a60 <bt_recv+0x618>)
    3932:	e738      	b.n	37a6 <bt_recv+0x35e>
    3934:	f010 ff72 	bl	1481c <_impl_k_current_get>
	BT_DBG("max. tx: %u (%uus), max. rx: %u (%uus)", max_tx_octets,
    3938:	4b49      	ldr	r3, [pc, #292]	; (3a60 <bt_recv+0x618>)
    393a:	9001      	str	r0, [sp, #4]
    393c:	4a40      	ldr	r2, [pc, #256]	; (3a40 <bt_recv+0x5f8>)
    393e:	4941      	ldr	r1, [pc, #260]	; (3a44 <bt_recv+0x5fc>)
    3940:	9506      	str	r5, [sp, #24]
    3942:	f8cd a014 	str.w	sl, [sp, #20]
    3946:	f8cd 9010 	str.w	r9, [sp, #16]
    394a:	f8cd 800c 	str.w	r8, [sp, #12]
    394e:	9702      	str	r7, [sp, #8]
    3950:	9500      	str	r5, [sp, #0]
    3952:	4844      	ldr	r0, [pc, #272]	; (3a64 <bt_recv+0x61c>)
    3954:	f7fd fb1a 	bl	f8c <printk>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3958:	f46f 7180 	mvn.w	r1, #256	; 0x100
    395c:	1d30      	adds	r0, r6, #4
    395e:	f7fe fb27 	bl	1fb0 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    3962:	05c0      	lsls	r0, r0, #23
    3964:	f57f ae50 	bpl.w	3608 <bt_recv+0x1c0>
	update_conn_param(conn);
    3968:	4630      	mov	r0, r6
    396a:	f7fe fb33 	bl	1fd4 <update_conn_param>
    396e:	e64b      	b.n	3608 <bt_recv+0x1c0>
    3970:	68a7      	ldr	r7, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3972:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    3976:	4640      	mov	r0, r8
    3978:	f000 ff88 	bl	488c <bt_conn_lookup_handle>
	if (!conn) {
    397c:	4606      	mov	r6, r0
    397e:	b920      	cbnz	r0, 398a <bt_recv+0x542>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3980:	9502      	str	r5, [sp, #8]
    3982:	e88d 0120 	stmia.w	sp, {r5, r8}
    3986:	4b38      	ldr	r3, [pc, #224]	; (3a68 <bt_recv+0x620>)
    3988:	e70d      	b.n	37a6 <bt_recv+0x35e>
    398a:	f010 ff47 	bl	1481c <_impl_k_current_get>
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    398e:	9505      	str	r5, [sp, #20]
    3990:	793b      	ldrb	r3, [r7, #4]
    3992:	9304      	str	r3, [sp, #16]
    3994:	78fb      	ldrb	r3, [r7, #3]
    3996:	9303      	str	r3, [sp, #12]
    3998:	783b      	ldrb	r3, [r7, #0]
    399a:	9302      	str	r3, [sp, #8]
    399c:	9001      	str	r0, [sp, #4]
    399e:	9500      	str	r5, [sp, #0]
    39a0:	4b31      	ldr	r3, [pc, #196]	; (3a68 <bt_recv+0x620>)
    39a2:	4a27      	ldr	r2, [pc, #156]	; (3a40 <bt_recv+0x5f8>)
    39a4:	4927      	ldr	r1, [pc, #156]	; (3a44 <bt_recv+0x5fc>)
    39a6:	4831      	ldr	r0, [pc, #196]	; (3a6c <bt_recv+0x624>)
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    39a8:	1d35      	adds	r5, r6, #4
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    39aa:	f7fd faef 	bl	f8c <printk>
    39ae:	f06f 0180 	mvn.w	r1, #128	; 0x80
    39b2:	4628      	mov	r0, r5
    39b4:	f7fe fafc 	bl	1fb0 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    39b8:	0601      	lsls	r1, r0, #24
    39ba:	f57f ae25 	bpl.w	3608 <bt_recv+0x1c0>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    39be:	4b26      	ldr	r3, [pc, #152]	; (3a58 <bt_recv+0x610>)
    39c0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    39c4:	069a      	lsls	r2, r3, #26
    39c6:	d5cf      	bpl.n	3968 <bt_recv+0x520>
    39c8:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
    39cc:	069b      	lsls	r3, r3, #26
    39ce:	d5cb      	bpl.n	3968 <bt_recv+0x520>
		err = hci_le_set_data_len(conn);
    39d0:	4630      	mov	r0, r6
    39d2:	f7ff fabf 	bl	2f54 <hci_le_set_data_len.isra.29>
		if (!err) {
    39d6:	2800      	cmp	r0, #0
    39d8:	d1c6      	bne.n	3968 <bt_recv+0x520>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    39da:	f44f 7180 	mov.w	r1, #256	; 0x100
    39de:	4628      	mov	r0, r5
    39e0:	e722      	b.n	3828 <bt_recv+0x3e0>
    39e2:	68a6      	ldr	r6, [r4, #8]
    39e4:	f010 ff1a 	bl	1481c <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    39e8:	9503      	str	r5, [sp, #12]
    39ea:	7833      	ldrb	r3, [r6, #0]
    39ec:	9302      	str	r3, [sp, #8]
    39ee:	9001      	str	r0, [sp, #4]
    39f0:	4b1f      	ldr	r3, [pc, #124]	; (3a70 <bt_recv+0x628>)
    39f2:	4a13      	ldr	r2, [pc, #76]	; (3a40 <bt_recv+0x5f8>)
    39f4:	4913      	ldr	r1, [pc, #76]	; (3a44 <bt_recv+0x5fc>)
    39f6:	9500      	str	r5, [sp, #0]
    39f8:	481e      	ldr	r0, [pc, #120]	; (3a74 <bt_recv+0x62c>)
    39fa:	f7fd fac7 	bl	f8c <printk>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    39fe:	f06f 0120 	mvn.w	r1, #32
    3a02:	481d      	ldr	r0, [pc, #116]	; (3a78 <bt_recv+0x630>)
    3a04:	f7fe fad4 	bl	1fb0 <atomic_and>
	if (!evt->status) {
    3a08:	7833      	ldrb	r3, [r6, #0]
    3a0a:	b943      	cbnz	r3, 3a1e <bt_recv+0x5d6>
		memcpy(pub_key, evt->key, 64);
    3a0c:	1c71      	adds	r1, r6, #1
    3a0e:	2240      	movs	r2, #64	; 0x40
    3a10:	481a      	ldr	r0, [pc, #104]	; (3a7c <bt_recv+0x634>)
    3a12:	f7fe f8f3 	bl	1bfc <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a16:	2110      	movs	r1, #16
    3a18:	4817      	ldr	r0, [pc, #92]	; (3a78 <bt_recv+0x630>)
    3a1a:	f7fe fab8 	bl	1f8e <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3a1e:	4b18      	ldr	r3, [pc, #96]	; (3a80 <bt_recv+0x638>)
    3a20:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    3a22:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3a24:	2d00      	cmp	r5, #0
    3a26:	f43f ad5f 	beq.w	34e8 <bt_recv+0xa0>
		cb->func(evt->status ? NULL : evt->key);
    3a2a:	7832      	ldrb	r2, [r6, #0]
    3a2c:	682b      	ldr	r3, [r5, #0]
    3a2e:	2a00      	cmp	r2, #0
    3a30:	bf0c      	ite	eq
    3a32:	4638      	moveq	r0, r7
    3a34:	2000      	movne	r0, #0
    3a36:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3a38:	686d      	ldr	r5, [r5, #4]
    3a3a:	e7f3      	b.n	3a24 <bt_recv+0x5dc>
    3a3c:	00015a00 	.word	0x00015a00
    3a40:	000167ad 	.word	0x000167ad
    3a44:	000167b4 	.word	0x000167b4
    3a48:	00016370 	.word	0x00016370
    3a4c:	00016765 	.word	0x00016765
    3a50:	0001639a 	.word	0x0001639a
    3a54:	000159ac 	.word	0x000159ac
    3a58:	20003a68 	.word	0x20003a68
    3a5c:	000159ee 	.word	0x000159ee
    3a60:	000159c4 	.word	0x000159c4
    3a64:	000163ce 	.word	0x000163ce
    3a68:	000159d7 	.word	0x000159d7
    3a6c:	0001640a 	.word	0x0001640a
    3a70:	00015a18 	.word	0x00015a18
    3a74:	00016449 	.word	0x00016449
    3a78:	20003ad8 	.word	0x20003ad8
    3a7c:	20000290 	.word	0x20000290
    3a80:	200002d0 	.word	0x200002d0
    3a84:	68a6      	ldr	r6, [r4, #8]
    3a86:	f010 fec9 	bl	1481c <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    3a8a:	9503      	str	r5, [sp, #12]
    3a8c:	7833      	ldrb	r3, [r6, #0]
    3a8e:	9500      	str	r5, [sp, #0]
	if (dh_key_cb) {
    3a90:	4da0      	ldr	r5, [pc, #640]	; (3d14 <bt_recv+0x8cc>)
	BT_DBG("status: 0x%x", evt->status);
    3a92:	9302      	str	r3, [sp, #8]
    3a94:	9001      	str	r0, [sp, #4]
    3a96:	4aa0      	ldr	r2, [pc, #640]	; (3d18 <bt_recv+0x8d0>)
    3a98:	4ba0      	ldr	r3, [pc, #640]	; (3d1c <bt_recv+0x8d4>)
    3a9a:	49a1      	ldr	r1, [pc, #644]	; (3d20 <bt_recv+0x8d8>)
    3a9c:	48a1      	ldr	r0, [pc, #644]	; (3d24 <bt_recv+0x8dc>)
    3a9e:	f7fd fa75 	bl	f8c <printk>
	if (dh_key_cb) {
    3aa2:	682a      	ldr	r2, [r5, #0]
    3aa4:	2a00      	cmp	r2, #0
    3aa6:	f43f ad1f 	beq.w	34e8 <bt_recv+0xa0>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3aaa:	7833      	ldrb	r3, [r6, #0]
    3aac:	b923      	cbnz	r3, 3ab8 <bt_recv+0x670>
    3aae:	1c70      	adds	r0, r6, #1
    3ab0:	4790      	blx	r2
		dh_key_cb = NULL;
    3ab2:	2300      	movs	r3, #0
    3ab4:	602b      	str	r3, [r5, #0]
    3ab6:	e517      	b.n	34e8 <bt_recv+0xa0>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3ab8:	2000      	movs	r0, #0
    3aba:	e7f9      	b.n	3ab0 <bt_recv+0x668>
	u8_t num_reports = net_buf_pull_u8(buf);
    3abc:	4638      	mov	r0, r7
    3abe:	f00f fe8d 	bl	137dc <net_buf_simple_pull_u8>
    3ac2:	4680      	mov	r8, r0
    3ac4:	f010 feaa 	bl	1481c <_impl_k_current_get>
	BT_DBG("Adv number of reports %u",  num_reports);
    3ac8:	9503      	str	r5, [sp, #12]
    3aca:	9001      	str	r0, [sp, #4]
    3acc:	f8cd 8008 	str.w	r8, [sp, #8]
    3ad0:	9500      	str	r5, [sp, #0]
    3ad2:	4b95      	ldr	r3, [pc, #596]	; (3d28 <bt_recv+0x8e0>)
    3ad4:	4a90      	ldr	r2, [pc, #576]	; (3d18 <bt_recv+0x8d0>)
    3ad6:	4992      	ldr	r1, [pc, #584]	; (3d20 <bt_recv+0x8d8>)
    3ad8:	4894      	ldr	r0, [pc, #592]	; (3d2c <bt_recv+0x8e4>)
    3ada:	f7fd fa57 	bl	f8c <printk>
	while (num_reports--) {
    3ade:	f1b8 0f00 	cmp.w	r8, #0
    3ae2:	f43f ad01 	beq.w	34e8 <bt_recv+0xa0>
		info = (void *)buf->data;
    3ae6:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3ae8:	2109      	movs	r1, #9
    3aea:	4638      	mov	r0, r7
    3aec:	f00f fe6e 	bl	137cc <net_buf_simple_pull>
		rssi = info->data[info->length];
    3af0:	7a33      	ldrb	r3, [r6, #8]
    3af2:	4433      	add	r3, r6
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3af4:	f106 0901 	add.w	r9, r6, #1
		rssi = info->data[info->length];
    3af8:	f993 a009 	ldrsb.w	sl, [r3, #9]
    3afc:	f010 fe8e 	bl	1481c <_impl_k_current_get>
    3b00:	4683      	mov	fp, r0
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3b02:	4648      	mov	r0, r9
    3b04:	f7fe f926 	bl	1d54 <bt_addr_le_str>
    3b08:	9506      	str	r5, [sp, #24]
    3b0a:	f8cd a014 	str.w	sl, [sp, #20]
    3b0e:	7a33      	ldrb	r3, [r6, #8]
    3b10:	9304      	str	r3, [sp, #16]
    3b12:	7833      	ldrb	r3, [r6, #0]
    3b14:	9303      	str	r3, [sp, #12]
    3b16:	9002      	str	r0, [sp, #8]
    3b18:	4b83      	ldr	r3, [pc, #524]	; (3d28 <bt_recv+0x8e0>)
    3b1a:	4981      	ldr	r1, [pc, #516]	; (3d20 <bt_recv+0x8d8>)
    3b1c:	4a7e      	ldr	r2, [pc, #504]	; (3d18 <bt_recv+0x8d0>)
    3b1e:	4884      	ldr	r0, [pc, #528]	; (3d30 <bt_recv+0x8e8>)
    3b20:	e88d 0820 	stmia.w	sp, {r5, fp}
    3b24:	f7fd fa32 	bl	f8c <printk>
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3b28:	7873      	ldrb	r3, [r6, #1]
    3b2a:	3b02      	subs	r3, #2
    3b2c:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    3b2e:	4649      	mov	r1, r9
    3b30:	a80e      	add	r0, sp, #56	; 0x38
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3b32:	f200 809d 	bhi.w	3c70 <bt_recv+0x828>
			bt_addr_le_copy(&id_addr, &info->addr);
    3b36:	f7fe fa27 	bl	1f88 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3b3a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3b3e:	3b02      	subs	r3, #2
    3b40:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		if (scan_dev_found_cb) {
    3b44:	f8df b218 	ldr.w	fp, [pc, #536]	; 3d60 <bt_recv+0x918>
    3b48:	f8db 3000 	ldr.w	r3, [fp]
    3b4c:	b1bb      	cbz	r3, 3b7e <bt_recv+0x736>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3b4e:	4638      	mov	r0, r7
    3b50:	f00f fe54 	bl	137fc <net_buf_simple_headroom>
	state->len = buf->len;
    3b54:	89a3      	ldrh	r3, [r4, #12]
    3b56:	9309      	str	r3, [sp, #36]	; 0x24
			buf->len = info->length;
    3b58:	7a33      	ldrb	r3, [r6, #8]
    3b5a:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    3b5c:	9008      	str	r0, [sp, #32]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    3b5e:	463b      	mov	r3, r7
    3b60:	7832      	ldrb	r2, [r6, #0]
    3b62:	f8db b000 	ldr.w	fp, [fp]
    3b66:	4651      	mov	r1, sl
    3b68:	a80e      	add	r0, sp, #56	; 0x38
    3b6a:	47d8      	blx	fp
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3b6c:	6923      	ldr	r3, [r4, #16]
    3b6e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    3b72:	fa13 f382 	uxtah	r3, r3, r2
    3b76:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    3b78:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    3b7c:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3b7e:	2109      	movs	r1, #9
    3b80:	486c      	ldr	r0, [pc, #432]	; (3d34 <bt_recv+0x8ec>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    3b82:	7832      	ldrb	r2, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3b84:	f7fe faaa 	bl	20dc <atomic_test_bit>
    3b88:	4683      	mov	fp, r0
    3b8a:	2800      	cmp	r0, #0
    3b8c:	d166      	bne.n	3c5c <bt_recv+0x814>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    3b8e:	2a01      	cmp	r2, #1
    3b90:	d864      	bhi.n	3c5c <bt_recv+0x814>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    3b92:	2101      	movs	r1, #1
    3b94:	a80e      	add	r0, sp, #56	; 0x38
    3b96:	f000 fea9 	bl	48ec <bt_conn_lookup_state_le>
	if (!conn) {
    3b9a:	4682      	mov	sl, r0
    3b9c:	2800      	cmp	r0, #0
    3b9e:	d05d      	beq.n	3c5c <bt_recv+0x814>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3ba0:	2108      	movs	r1, #8
    3ba2:	4864      	ldr	r0, [pc, #400]	; (3d34 <bt_recv+0x8ec>)
    3ba4:	f7fe fa9a 	bl	20dc <atomic_test_bit>
    3ba8:	2800      	cmp	r0, #0
    3baa:	d164      	bne.n	3c76 <bt_recv+0x82e>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    3bac:	2102      	movs	r1, #2
    3bae:	4861      	ldr	r0, [pc, #388]	; (3d34 <bt_recv+0x8ec>)
    3bb0:	f7fe fa94 	bl	20dc <atomic_test_bit>
    3bb4:	b110      	cbz	r0, 3bbc <bt_recv+0x774>
			set_random_address(&bt_dev.id_addr.a);
    3bb6:	4860      	ldr	r0, [pc, #384]	; (3d38 <bt_recv+0x8f0>)
    3bb8:	f7fe fba6 	bl	2308 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3bbc:	495f      	ldr	r1, [pc, #380]	; (3d3c <bt_recv+0x8f4>)
    3bbe:	f10a 004b 	add.w	r0, sl, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3bc2:	f10a 0b52 	add.w	fp, sl, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3bc6:	f7fe f9df 	bl	1f88 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3bca:	4649      	mov	r1, r9
    3bcc:	4658      	mov	r0, fp
    3bce:	f7fe f9db 	bl	1f88 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    3bd2:	2119      	movs	r1, #25
    3bd4:	f242 000d 	movw	r0, #8205	; 0x200d
    3bd8:	f7fe fa8e 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    3bdc:	4603      	mov	r3, r0
    3bde:	2800      	cmp	r0, #0
    3be0:	d04e      	beq.n	3c80 <bt_recv+0x838>
	cp = net_buf_add(buf, sizeof(*cp));
    3be2:	2119      	movs	r1, #25
    3be4:	3008      	adds	r0, #8
    3be6:	9309      	str	r3, [sp, #36]	; 0x24
    3be8:	f00f fdc2 	bl	13770 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3bec:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    3bee:	4681      	mov	r9, r0
	memset(cp, 0, sizeof(*cp));
    3bf0:	2100      	movs	r1, #0
    3bf2:	f7fe f82f 	bl	1c54 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3bf6:	2200      	movs	r2, #0
    3bf8:	2160      	movs	r1, #96	; 0x60
    3bfa:	f889 1000 	strb.w	r1, [r9]
    3bfe:	f889 2001 	strb.w	r2, [r9, #1]
	cp->scan_window = cp->scan_interval;
    3c02:	f889 1002 	strb.w	r1, [r9, #2]
    3c06:	f889 2003 	strb.w	r2, [r9, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3c0a:	4659      	mov	r1, fp
    3c0c:	f109 0005 	add.w	r0, r9, #5
	cp->scan_window = cp->scan_interval;
    3c10:	9208      	str	r2, [sp, #32]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3c12:	f7fe f9b9 	bl	1f88 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    3c16:	f89a 104b 	ldrb.w	r1, [sl, #75]	; 0x4b
    3c1a:	f889 100c 	strb.w	r1, [r9, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    3c1e:	f8ba 105c 	ldrh.w	r1, [sl, #92]	; 0x5c
    3c22:	f8a9 100d 	strh.w	r1, [r9, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    3c26:	f8ba 105e 	ldrh.w	r1, [sl, #94]	; 0x5e
    3c2a:	f8a9 100f 	strh.w	r1, [r9, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    3c2e:	f8ba 1060 	ldrh.w	r1, [sl, #96]	; 0x60
    3c32:	f8a9 1011 	strh.w	r1, [r9, #17]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    3c38:	f8ba 1062 	ldrh.w	r1, [sl, #98]	; 0x62
    3c3c:	f8a9 1013 	strh.w	r1, [r9, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3c40:	9a08      	ldr	r2, [sp, #32]
    3c42:	4619      	mov	r1, r3
    3c44:	f242 000d 	movw	r0, #8205	; 0x200d
    3c48:	f7fe fab4 	bl	21b4 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    3c4c:	b9c0      	cbnz	r0, 3c80 <bt_recv+0x838>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    3c4e:	4650      	mov	r0, sl
    3c50:	2102      	movs	r1, #2
    3c52:	f000 ff1f 	bl	4a94 <bt_conn_set_state>
	bt_conn_unref(conn);
    3c56:	4650      	mov	r0, sl
    3c58:	f000 fe66 	bl	4928 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    3c5c:	7a31      	ldrb	r1, [r6, #8]
    3c5e:	4638      	mov	r0, r7
    3c60:	3101      	adds	r1, #1
    3c62:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3c66:	f00f fdb1 	bl	137cc <net_buf_simple_pull>
    3c6a:	fa5f f888 	uxtb.w	r8, r8
    3c6e:	e736      	b.n	3ade <bt_recv+0x696>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    3c70:	f7fe f98a 	bl	1f88 <bt_addr_le_copy>
    3c74:	e766      	b.n	3b44 <bt_recv+0x6fc>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    3c76:	4658      	mov	r0, fp
    3c78:	f7fe fb10 	bl	229c <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3c7c:	2800      	cmp	r0, #0
    3c7e:	d095      	beq.n	3bac <bt_recv+0x764>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    3c80:	231f      	movs	r3, #31
    3c82:	f88a 3008 	strb.w	r3, [sl, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3c86:	2100      	movs	r1, #0
    3c88:	4650      	mov	r0, sl
    3c8a:	f000 ff03 	bl	4a94 <bt_conn_set_state>
	bt_conn_unref(conn);
    3c8e:	4650      	mov	r0, sl
    3c90:	f000 fe4a 	bl	4928 <bt_conn_unref>
	bt_le_scan_update(false);
    3c94:	2000      	movs	r0, #0
    3c96:	f7fe fd0f 	bl	26b8 <bt_le_scan_update>
    3c9a:	e7df      	b.n	3c5c <bt_recv+0x814>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    3c9c:	89a7      	ldrh	r7, [r4, #12]
    3c9e:	68a0      	ldr	r0, [r4, #8]
    3ca0:	4639      	mov	r1, r7
    3ca2:	f7fd fffb 	bl	1c9c <bt_hex>
    3ca6:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
    3caa:	9003      	str	r0, [sp, #12]
    3cac:	4b24      	ldr	r3, [pc, #144]	; (3d40 <bt_recv+0x8f8>)
    3cae:	4a25      	ldr	r2, [pc, #148]	; (3d44 <bt_recv+0x8fc>)
    3cb0:	491b      	ldr	r1, [pc, #108]	; (3d20 <bt_recv+0x8d8>)
    3cb2:	4825      	ldr	r0, [pc, #148]	; (3d48 <bt_recv+0x900>)
    3cb4:	9504      	str	r5, [sp, #16]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3cb6:	f7fd f969 	bl	f8c <printk>
    3cba:	e415      	b.n	34e8 <bt_recv+0xa0>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    3cbc:	4b23      	ldr	r3, [pc, #140]	; (3d4c <bt_recv+0x904>)
    3cbe:	4a24      	ldr	r2, [pc, #144]	; (3d50 <bt_recv+0x908>)
    3cc0:	4917      	ldr	r1, [pc, #92]	; (3d20 <bt_recv+0x8d8>)
    3cc2:	9602      	str	r6, [sp, #8]
    3cc4:	e88d 00c0 	stmia.w	sp, {r6, r7}
    3cc8:	4822      	ldr	r0, [pc, #136]	; (3d54 <bt_recv+0x90c>)
    3cca:	f7fd f95f 	bl	f8c <printk>
		net_buf_unref(buf);
    3cce:	4620      	mov	r0, r4
    3cd0:	f00f fd1c 	bl	1370c <net_buf_unref>
		return -EINVAL;
    3cd4:	f06f 0015 	mvn.w	r0, #21
    3cd8:	e426      	b.n	3528 <bt_recv+0xe0>
	net_buf_pull(buf, sizeof(*hdr));
    3cda:	f104 0708 	add.w	r7, r4, #8
    3cde:	2102      	movs	r1, #2
    3ce0:	4638      	mov	r0, r7
    3ce2:	f00f fd73 	bl	137cc <net_buf_simple_pull>
	switch (hdr->evt) {
    3ce6:	f898 6000 	ldrb.w	r6, [r8]
    3cea:	2e05      	cmp	r6, #5
    3cec:	f43f ac47 	beq.w	357e <bt_recv+0x136>
    3cf0:	2e3e      	cmp	r6, #62	; 0x3e
    3cf2:	f43f ac9b 	beq.w	362c <bt_recv+0x1e4>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3cf6:	89a7      	ldrh	r7, [r4, #12]
    3cf8:	68a0      	ldr	r0, [r4, #8]
    3cfa:	4639      	mov	r1, r7
    3cfc:	f7fd ffce 	bl	1c9c <bt_hex>
    3d00:	9504      	str	r5, [sp, #16]
    3d02:	9003      	str	r0, [sp, #12]
    3d04:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
    3d08:	4b13      	ldr	r3, [pc, #76]	; (3d58 <bt_recv+0x910>)
    3d0a:	4a0e      	ldr	r2, [pc, #56]	; (3d44 <bt_recv+0x8fc>)
    3d0c:	4904      	ldr	r1, [pc, #16]	; (3d20 <bt_recv+0x8d8>)
    3d0e:	4813      	ldr	r0, [pc, #76]	; (3d5c <bt_recv+0x914>)
    3d10:	e7d1      	b.n	3cb6 <bt_recv+0x86e>
    3d12:	bf00      	nop
    3d14:	2000028c 	.word	0x2000028c
    3d18:	000167ad 	.word	0x000167ad
    3d1c:	00015a29 	.word	0x00015a29
    3d20:	000167b4 	.word	0x000167b4
    3d24:	00016449 	.word	0x00016449
    3d28:	00015a7b 	.word	0x00015a7b
    3d2c:	0001646b 	.word	0x0001646b
    3d30:	00016499 	.word	0x00016499
    3d34:	20003ad8 	.word	0x20003ad8
    3d38:	20003a69 	.word	0x20003a69
    3d3c:	20003a68 	.word	0x20003a68
    3d40:	00015a89 	.word	0x00015a89
    3d44:	000167ef 	.word	0x000167ef
    3d48:	000164cf 	.word	0x000164cf
    3d4c:	00015bfb 	.word	0x00015bfb
    3d50:	00016765 	.word	0x00016765
    3d54:	00016536 	.word	0x00016536
    3d58:	00015a9b 	.word	0x00015a9b
    3d5c:	00016504 	.word	0x00016504
    3d60:	200002d8 	.word	0x200002d8

00003d64 <bt_recv_prio>:
{
    3d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3d68:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3d6a:	6887      	ldr	r7, [r0, #8]
    3d6c:	4c80      	ldr	r4, [pc, #512]	; (3f70 <bt_recv_prio+0x20c>)
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3d6e:	2b01      	cmp	r3, #1
{
    3d70:	b089      	sub	sp, #36	; 0x24
    3d72:	4605      	mov	r5, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3d74:	d00d      	beq.n	3d92 <bt_recv_prio+0x2e>
    3d76:	4b7f      	ldr	r3, [pc, #508]	; (3f74 <bt_recv_prio+0x210>)
    3d78:	4a7f      	ldr	r2, [pc, #508]	; (3f78 <bt_recv_prio+0x214>)
    3d7a:	4980      	ldr	r1, [pc, #512]	; (3f7c <bt_recv_prio+0x218>)
    3d7c:	4880      	ldr	r0, [pc, #512]	; (3f80 <bt_recv_prio+0x21c>)
    3d7e:	9401      	str	r4, [sp, #4]
    3d80:	9400      	str	r4, [sp, #0]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3d82:	f7fd f903 	bl	f8c <printk>
    3d86:	4040      	eors	r0, r0
    3d88:	f380 8811 	msr	BASEPRI, r0
    3d8c:	f04f 0004 	mov.w	r0, #4
    3d90:	df02      	svc	2
    3d92:	8982      	ldrh	r2, [r0, #12]
    3d94:	2a01      	cmp	r2, #1
    3d96:	d806      	bhi.n	3da6 <bt_recv_prio+0x42>
    3d98:	9401      	str	r4, [sp, #4]
    3d9a:	9400      	str	r4, [sp, #0]
    3d9c:	4b75      	ldr	r3, [pc, #468]	; (3f74 <bt_recv_prio+0x210>)
    3d9e:	4a76      	ldr	r2, [pc, #472]	; (3f78 <bt_recv_prio+0x214>)
    3da0:	4976      	ldr	r1, [pc, #472]	; (3f7c <bt_recv_prio+0x218>)
    3da2:	4878      	ldr	r0, [pc, #480]	; (3f84 <bt_recv_prio+0x220>)
    3da4:	e7ed      	b.n	3d82 <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3da6:	783a      	ldrb	r2, [r7, #0]
    3da8:	2a13      	cmp	r2, #19
    3daa:	f200 80d9 	bhi.w	3f60 <bt_recv_prio+0x1fc>
    3dae:	4093      	lsls	r3, r2
    3db0:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3db4:	f000 80d4 	beq.w	3f60 <bt_recv_prio+0x1fc>
	net_buf_pull(buf, sizeof(*hdr));
    3db8:	f100 0608 	add.w	r6, r0, #8
    3dbc:	2102      	movs	r1, #2
    3dbe:	4630      	mov	r0, r6
    3dc0:	f00f fd04 	bl	137cc <net_buf_simple_pull>
	switch (hdr->evt) {
    3dc4:	783b      	ldrb	r3, [r7, #0]
    3dc6:	2b0f      	cmp	r3, #15
    3dc8:	d02c      	beq.n	3e24 <bt_recv_prio+0xc0>
    3dca:	2b13      	cmp	r3, #19
    3dcc:	d049      	beq.n	3e62 <bt_recv_prio+0xfe>
    3dce:	2b0e      	cmp	r3, #14
    3dd0:	f040 80bc 	bne.w	3f4c <bt_recv_prio+0x1e8>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    3dd4:	68ab      	ldr	r3, [r5, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3dd6:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    3dda:	f893 8000 	ldrb.w	r8, [r3]
    3dde:	f010 fd1d 	bl	1481c <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    3de2:	4b69      	ldr	r3, [pc, #420]	; (3f88 <bt_recv_prio+0x224>)
    3de4:	4a69      	ldr	r2, [pc, #420]	; (3f8c <bt_recv_prio+0x228>)
    3de6:	9001      	str	r0, [sp, #4]
    3de8:	4964      	ldr	r1, [pc, #400]	; (3f7c <bt_recv_prio+0x218>)
    3dea:	9403      	str	r4, [sp, #12]
    3dec:	9702      	str	r7, [sp, #8]
    3dee:	9400      	str	r4, [sp, #0]
    3df0:	4867      	ldr	r0, [pc, #412]	; (3f90 <bt_recv_prio+0x22c>)
    3df2:	f7fd f8cb 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    3df6:	2103      	movs	r1, #3
    3df8:	4630      	mov	r0, r6
    3dfa:	f00f fce7 	bl	137cc <net_buf_simple_pull>
	status = buf->data[0];
    3dfe:	68ab      	ldr	r3, [r5, #8]
	hci_cmd_done(opcode, status, buf);
    3e00:	462a      	mov	r2, r5
    3e02:	7819      	ldrb	r1, [r3, #0]
    3e04:	4638      	mov	r0, r7
    3e06:	f7fe f8f3 	bl	1ff0 <hci_cmd_done>
	if (ncmd) {
    3e0a:	f1b8 0f00 	cmp.w	r8, #0
    3e0e:	d002      	beq.n	3e16 <bt_recv_prio+0xb2>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3e10:	4860      	ldr	r0, [pc, #384]	; (3f94 <bt_recv_prio+0x230>)
    3e12:	f010 fd12 	bl	1483a <_impl_k_sem_give>
	net_buf_unref(buf);
    3e16:	4628      	mov	r0, r5
    3e18:	f00f fc78 	bl	1370c <net_buf_unref>
}
    3e1c:	2000      	movs	r0, #0
    3e1e:	b009      	add	sp, #36	; 0x24
    3e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    3e24:	68af      	ldr	r7, [r5, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3e26:	f8b7 8002 	ldrh.w	r8, [r7, #2]
	u8_t ncmd = evt->ncmd;
    3e2a:	f897 9001 	ldrb.w	r9, [r7, #1]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3e2e:	f010 fcf5 	bl	1481c <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    3e32:	4a56      	ldr	r2, [pc, #344]	; (3f8c <bt_recv_prio+0x228>)
    3e34:	9001      	str	r0, [sp, #4]
    3e36:	4b58      	ldr	r3, [pc, #352]	; (3f98 <bt_recv_prio+0x234>)
    3e38:	4950      	ldr	r1, [pc, #320]	; (3f7c <bt_recv_prio+0x218>)
    3e3a:	9403      	str	r4, [sp, #12]
    3e3c:	f8cd 8008 	str.w	r8, [sp, #8]
    3e40:	9400      	str	r4, [sp, #0]
    3e42:	4853      	ldr	r0, [pc, #332]	; (3f90 <bt_recv_prio+0x22c>)
    3e44:	f7fd f8a2 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    3e48:	2104      	movs	r1, #4
    3e4a:	4630      	mov	r0, r6
    3e4c:	f00f fcbe 	bl	137cc <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    3e50:	462a      	mov	r2, r5
    3e52:	7839      	ldrb	r1, [r7, #0]
    3e54:	4640      	mov	r0, r8
    3e56:	f7fe f8cb 	bl	1ff0 <hci_cmd_done>
	if (ncmd) {
    3e5a:	f1b9 0f00 	cmp.w	r9, #0
    3e5e:	d0da      	beq.n	3e16 <bt_recv_prio+0xb2>
    3e60:	e7d6      	b.n	3e10 <bt_recv_prio+0xac>
    3e62:	f8d5 b008 	ldr.w	fp, [r5, #8]
		BT_DBG("handle %u count %u", handle, count);
    3e66:	f8df 9114 	ldr.w	r9, [pc, #276]	; 3f7c <bt_recv_prio+0x218>
    3e6a:	f010 fcd7 	bl	1481c <_impl_k_current_get>
	BT_DBG("num_handles %u", evt->num_handles);
    3e6e:	9403      	str	r4, [sp, #12]
    3e70:	f89b 3000 	ldrb.w	r3, [fp]
    3e74:	9302      	str	r3, [sp, #8]
    3e76:	9001      	str	r0, [sp, #4]
    3e78:	9400      	str	r4, [sp, #0]
    3e7a:	4b48      	ldr	r3, [pc, #288]	; (3f9c <bt_recv_prio+0x238>)
    3e7c:	4a43      	ldr	r2, [pc, #268]	; (3f8c <bt_recv_prio+0x228>)
    3e7e:	493f      	ldr	r1, [pc, #252]	; (3f7c <bt_recv_prio+0x218>)
    3e80:	4847      	ldr	r0, [pc, #284]	; (3fa0 <bt_recv_prio+0x23c>)
    3e82:	f7fd f883 	bl	f8c <printk>
	for (i = 0; i < evt->num_handles; i++) {
    3e86:	f04f 0800 	mov.w	r8, #0
    3e8a:	f89b 3000 	ldrb.w	r3, [fp]
    3e8e:	4598      	cmp	r8, r3
    3e90:	dac1      	bge.n	3e16 <bt_recv_prio+0xb2>
    3e92:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    3e96:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    3e9a:	f8b3 7003 	ldrh.w	r7, [r3, #3]
    3e9e:	f010 fcbd 	bl	1481c <_impl_k_current_get>
		BT_DBG("handle %u count %u", handle, count);
    3ea2:	9404      	str	r4, [sp, #16]
    3ea4:	9001      	str	r0, [sp, #4]
    3ea6:	9703      	str	r7, [sp, #12]
    3ea8:	f8cd a008 	str.w	sl, [sp, #8]
    3eac:	9400      	str	r4, [sp, #0]
    3eae:	4b3b      	ldr	r3, [pc, #236]	; (3f9c <bt_recv_prio+0x238>)
    3eb0:	4a36      	ldr	r2, [pc, #216]	; (3f8c <bt_recv_prio+0x228>)
    3eb2:	483c      	ldr	r0, [pc, #240]	; (3fa4 <bt_recv_prio+0x240>)
    3eb4:	4649      	mov	r1, r9
    3eb6:	f7fd f869 	bl	f8c <printk>
	__asm__ volatile(
    3eba:	f04f 0320 	mov.w	r3, #32
    3ebe:	f3ef 8211 	mrs	r2, BASEPRI
    3ec2:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    3ec6:	4650      	mov	r0, sl
    3ec8:	9207      	str	r2, [sp, #28]
    3eca:	f000 fcdf 	bl	488c <bt_conn_lookup_handle>
		if (!conn) {
    3ece:	4606      	mov	r6, r0
    3ed0:	b970      	cbnz	r0, 3ef0 <bt_recv_prio+0x18c>
			BT_ERR("No connection for handle %u", handle);
    3ed2:	9402      	str	r4, [sp, #8]
    3ed4:	e88d 0410 	stmia.w	sp, {r4, sl}
    3ed8:	4b30      	ldr	r3, [pc, #192]	; (3f9c <bt_recv_prio+0x238>)
    3eda:	4a27      	ldr	r2, [pc, #156]	; (3f78 <bt_recv_prio+0x214>)
    3edc:	4832      	ldr	r0, [pc, #200]	; (3fa8 <bt_recv_prio+0x244>)
    3ede:	4649      	mov	r1, r9
    3ee0:	f7fd f854 	bl	f8c <printk>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3ee4:	9b07      	ldr	r3, [sp, #28]
    3ee6:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < evt->num_handles; i++) {
    3eea:	f108 0801 	add.w	r8, r8, #1
    3eee:	e7cc      	b.n	3e8a <bt_recv_prio+0x126>
    3ef0:	9b07      	ldr	r3, [sp, #28]
    3ef2:	f383 8811 	msr	BASEPRI, r3
			k_fifo_put(&conn->tx_notify, node);
    3ef6:	f100 0a18 	add.w	sl, r0, #24
		while (count--) {
    3efa:	b1d7      	cbz	r7, 3f32 <bt_recv_prio+0x1ce>
	__asm__ volatile(
    3efc:	f04f 0320 	mov.w	r3, #32
    3f00:	f3ef 8011 	mrs	r0, BASEPRI
    3f04:	f383 8811 	msr	BASEPRI, r3
    3f08:	6931      	ldr	r1, [r6, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    3f0a:	b129      	cbz	r1, 3f18 <bt_recv_prio+0x1b4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3f0c:	6972      	ldr	r2, [r6, #20]
	return node->next;
    3f0e:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    3f10:	6133      	str	r3, [r6, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3f12:	4291      	cmp	r1, r2
	list->tail = node;
    3f14:	bf08      	it	eq
    3f16:	6173      	streq	r3, [r6, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3f18:	f380 8811 	msr	BASEPRI, r0
    3f1c:	3f01      	subs	r7, #1
    3f1e:	b2bf      	uxth	r7, r7
			if (!node) {
    3f20:	b959      	cbnz	r1, 3f3a <bt_recv_prio+0x1d6>
				BT_ERR("packets count mismatch");
    3f22:	9401      	str	r4, [sp, #4]
    3f24:	9400      	str	r4, [sp, #0]
    3f26:	4b1d      	ldr	r3, [pc, #116]	; (3f9c <bt_recv_prio+0x238>)
    3f28:	4a13      	ldr	r2, [pc, #76]	; (3f78 <bt_recv_prio+0x214>)
    3f2a:	4820      	ldr	r0, [pc, #128]	; (3fac <bt_recv_prio+0x248>)
    3f2c:	4649      	mov	r1, r9
    3f2e:	f7fd f82d 	bl	f8c <printk>
		bt_conn_unref(conn);
    3f32:	4630      	mov	r0, r6
    3f34:	f000 fcf8 	bl	4928 <bt_conn_unref>
    3f38:	e7d7      	b.n	3eea <bt_recv_prio+0x186>
			k_fifo_put(&conn->tx_notify, node);
    3f3a:	4650      	mov	r0, sl
    3f3c:	f010 f9b8 	bl	142b0 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    3f40:	4630      	mov	r0, r6
    3f42:	f000 f9b3 	bl	42ac <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3f46:	f010 fc78 	bl	1483a <_impl_k_sem_give>
    3f4a:	e7d6      	b.n	3efa <bt_recv_prio+0x196>
		net_buf_unref(buf);
    3f4c:	4628      	mov	r0, r5
    3f4e:	f00f fbdd 	bl	1370c <net_buf_unref>
		BT_ASSERT(0);
    3f52:	9401      	str	r4, [sp, #4]
    3f54:	9400      	str	r4, [sp, #0]
    3f56:	4b07      	ldr	r3, [pc, #28]	; (3f74 <bt_recv_prio+0x210>)
    3f58:	4a07      	ldr	r2, [pc, #28]	; (3f78 <bt_recv_prio+0x214>)
    3f5a:	4908      	ldr	r1, [pc, #32]	; (3f7c <bt_recv_prio+0x218>)
    3f5c:	4814      	ldr	r0, [pc, #80]	; (3fb0 <bt_recv_prio+0x24c>)
    3f5e:	e710      	b.n	3d82 <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3f60:	9401      	str	r4, [sp, #4]
    3f62:	9400      	str	r4, [sp, #0]
    3f64:	4b03      	ldr	r3, [pc, #12]	; (3f74 <bt_recv_prio+0x210>)
    3f66:	4a04      	ldr	r2, [pc, #16]	; (3f78 <bt_recv_prio+0x214>)
    3f68:	4904      	ldr	r1, [pc, #16]	; (3f7c <bt_recv_prio+0x218>)
    3f6a:	4812      	ldr	r0, [pc, #72]	; (3fb4 <bt_recv_prio+0x250>)
    3f6c:	e709      	b.n	3d82 <bt_recv_prio+0x1e>
    3f6e:	bf00      	nop
    3f70:	000153a9 	.word	0x000153a9
    3f74:	00015c03 	.word	0x00015c03
    3f78:	00016765 	.word	0x00016765
    3f7c:	000167b4 	.word	0x000167b4
    3f80:	00016599 	.word	0x00016599
    3f84:	000165dd 	.word	0x000165dd
    3f88:	00015a5b 	.word	0x00015a5b
    3f8c:	000167ad 	.word	0x000167ad
    3f90:	00016617 	.word	0x00016617
    3f94:	20003b10 	.word	0x20003b10
    3f98:	00015a6c 	.word	0x00015a6c
    3f9c:	00015950 	.word	0x00015950
    3fa0:	0001663a 	.word	0x0001663a
    3fa4:	0001665e 	.word	0x0001665e
    3fa8:	00016686 	.word	0x00016686
    3fac:	000166b2 	.word	0x000166b2
    3fb0:	000166d9 	.word	0x000166d9
    3fb4:	000166fc 	.word	0x000166fc

00003fb8 <bt_hci_driver_register>:
{
    3fb8:	b530      	push	{r4, r5, lr}
	if (bt_dev.drv) {
    3fba:	4b13      	ldr	r3, [pc, #76]	; (4008 <bt_hci_driver_register+0x50>)
    3fbc:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
    3fc0:	b085      	sub	sp, #20
    3fc2:	4605      	mov	r5, r0
	if (bt_dev.drv) {
    3fc4:	b9cc      	cbnz	r4, 3ffa <bt_hci_driver_register+0x42>
	if (!drv->open || !drv->send) {
    3fc6:	68c2      	ldr	r2, [r0, #12]
    3fc8:	b1d2      	cbz	r2, 4000 <bt_hci_driver_register+0x48>
    3fca:	6902      	ldr	r2, [r0, #16]
    3fcc:	b1c2      	cbz	r2, 4000 <bt_hci_driver_register+0x48>
	bt_dev.drv = drv;
    3fce:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3fd2:	f010 fc23 	bl	1481c <_impl_k_current_get>
    3fd6:	4a0d      	ldr	r2, [pc, #52]	; (400c <bt_hci_driver_register+0x54>)
	BT_DBG("Registered %s", drv->name ? drv->name : "");
    3fd8:	682b      	ldr	r3, [r5, #0]
    3fda:	9203      	str	r2, [sp, #12]
    3fdc:	2b00      	cmp	r3, #0
    3fde:	bf08      	it	eq
    3fe0:	4613      	moveq	r3, r2
    3fe2:	9302      	str	r3, [sp, #8]
    3fe4:	9001      	str	r0, [sp, #4]
    3fe6:	9200      	str	r2, [sp, #0]
    3fe8:	4b09      	ldr	r3, [pc, #36]	; (4010 <bt_hci_driver_register+0x58>)
    3fea:	4a0a      	ldr	r2, [pc, #40]	; (4014 <bt_hci_driver_register+0x5c>)
    3fec:	490a      	ldr	r1, [pc, #40]	; (4018 <bt_hci_driver_register+0x60>)
    3fee:	480b      	ldr	r0, [pc, #44]	; (401c <bt_hci_driver_register+0x64>)
    3ff0:	f7fc ffcc 	bl	f8c <printk>
	return 0;
    3ff4:	4620      	mov	r0, r4
}
    3ff6:	b005      	add	sp, #20
    3ff8:	bd30      	pop	{r4, r5, pc}
		return -EALREADY;
    3ffa:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3ffe:	e7fa      	b.n	3ff6 <bt_hci_driver_register+0x3e>
		return -EINVAL;
    4000:	f06f 0015 	mvn.w	r0, #21
    4004:	e7f7      	b.n	3ff6 <bt_hci_driver_register+0x3e>
    4006:	bf00      	nop
    4008:	20003a68 	.word	0x20003a68
    400c:	000153a9 	.word	0x000153a9
    4010:	00015c10 	.word	0x00015c10
    4014:	000167ad 	.word	0x000167ad
    4018:	000167b4 	.word	0x000167b4
    401c:	00015e72 	.word	0x00015e72

00004020 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    4020:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    4022:	4d2a      	ldr	r5, [pc, #168]	; (40cc <bt_enable+0xac>)
    4024:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    4028:	b086      	sub	sp, #24
    402a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    402c:	b96b      	cbnz	r3, 404a <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    402e:	4b28      	ldr	r3, [pc, #160]	; (40d0 <bt_enable+0xb0>)
    4030:	9301      	str	r3, [sp, #4]
    4032:	9300      	str	r3, [sp, #0]
    4034:	4a27      	ldr	r2, [pc, #156]	; (40d4 <bt_enable+0xb4>)
    4036:	4b28      	ldr	r3, [pc, #160]	; (40d8 <bt_enable+0xb8>)
    4038:	4928      	ldr	r1, [pc, #160]	; (40dc <bt_enable+0xbc>)
    403a:	4829      	ldr	r0, [pc, #164]	; (40e0 <bt_enable+0xc0>)
    403c:	f7fc ffa6 	bl	f8c <printk>
		return -ENODEV;
    4040:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    4044:	4620      	mov	r0, r4
    4046:	b006      	add	sp, #24
    4048:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    404a:	2101      	movs	r1, #1
    404c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    4050:	f7fd ff9d 	bl	1f8e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    4054:	f010 0001 	ands.w	r0, r0, #1
    4058:	d134      	bne.n	40c4 <bt_enable+0xa4>
	ready_cb = cb;
    405a:	4b22      	ldr	r3, [pc, #136]	; (40e4 <bt_enable+0xc4>)

    405c:	4922      	ldr	r1, [pc, #136]	; (40e8 <bt_enable+0xc8>)
    405e:	601e      	str	r6, [r3, #0]
    4060:	f06f 0308 	mvn.w	r3, #8
    4064:	9005      	str	r0, [sp, #20]
    4066:	9004      	str	r0, [sp, #16]
    4068:	9303      	str	r3, [sp, #12]
    406a:	9002      	str	r0, [sp, #8]
    406c:	9001      	str	r0, [sp, #4]
    406e:	9000      	str	r0, [sp, #0]
    4070:	4b1e      	ldr	r3, [pc, #120]	; (40ec <bt_enable+0xcc>)
    4072:	481f      	ldr	r0, [pc, #124]	; (40f0 <bt_enable+0xd0>)
    4074:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    4078:	f010 fddc 	bl	14c34 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    407c:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    4080:	68db      	ldr	r3, [r3, #12]
    4082:	4798      	blx	r3
	if (err) {
    4084:	4604      	mov	r4, r0
    4086:	b150      	cbz	r0, 409e <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    4088:	4b11      	ldr	r3, [pc, #68]	; (40d0 <bt_enable+0xb0>)
    408a:	9302      	str	r3, [sp, #8]
    408c:	e88d 0018 	stmia.w	sp, {r3, r4}
    4090:	4a10      	ldr	r2, [pc, #64]	; (40d4 <bt_enable+0xb4>)
    4092:	4b11      	ldr	r3, [pc, #68]	; (40d8 <bt_enable+0xb8>)
    4094:	4911      	ldr	r1, [pc, #68]	; (40dc <bt_enable+0xbc>)
    4096:	4817      	ldr	r0, [pc, #92]	; (40f4 <bt_enable+0xd4>)
    4098:	f7fc ff78 	bl	f8c <printk>
		return err;
    409c:	e7d2      	b.n	4044 <bt_enable+0x24>
	if (!cb) {
    409e:	b926      	cbnz	r6, 40aa <bt_enable+0x8a>
}
    40a0:	b006      	add	sp, #24
    40a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    40a6:	f7fe bb39 	b.w	271c <bt_init>
    40aa:	2101      	movs	r1, #1
    40ac:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    40b0:	f7fd ff6d 	bl	1f8e <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    40b4:	07c3      	lsls	r3, r0, #31
    40b6:	d4c5      	bmi.n	4044 <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    40b8:	f105 0164 	add.w	r1, r5, #100	; 0x64
    40bc:	480e      	ldr	r0, [pc, #56]	; (40f8 <bt_enable+0xd8>)
    40be:	f010 f8f7 	bl	142b0 <k_queue_append>
    40c2:	e7bf      	b.n	4044 <bt_enable+0x24>
		return -EALREADY;
    40c4:	f06f 0444 	mvn.w	r4, #68	; 0x44
    40c8:	e7bc      	b.n	4044 <bt_enable+0x24>
    40ca:	bf00      	nop
    40cc:	20003a68 	.word	0x20003a68
    40d0:	000153a9 	.word	0x000153a9
    40d4:	00016765 	.word	0x00016765
    40d8:	00015c27 	.word	0x00015c27
    40dc:	000167b4 	.word	0x000167b4
    40e0:	00015d13 	.word	0x00015d13
    40e4:	200002d4 	.word	0x200002d4
    40e8:	20001a10 	.word	0x20001a10
    40ec:	000031d1 	.word	0x000031d1
    40f0:	200002dc 	.word	0x200002dc
    40f4:	00015d3c 	.word	0x00015d3c
    40f8:	20001990 	.word	0x20001990

000040fc <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    40fc:	2000      	movs	r0, #0
    40fe:	4770      	bx	lr

00004100 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    4100:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    4102:	7803      	ldrb	r3, [r0, #0]
    4104:	2b01      	cmp	r3, #1
{
    4106:	4605      	mov	r5, r0
    4108:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    410a:	d810      	bhi.n	412e <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    410c:	7843      	ldrb	r3, [r0, #1]
    410e:	2b01      	cmp	r3, #1
    4110:	d80d      	bhi.n	412e <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    4112:	8841      	ldrh	r1, [r0, #2]
    4114:	1f0b      	subs	r3, r1, #4
    4116:	b29b      	uxth	r3, r3
    4118:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    411c:	4283      	cmp	r3, r0
    411e:	d806      	bhi.n	412e <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    4120:	88aa      	ldrh	r2, [r5, #4]
    4122:	1f13      	subs	r3, r2, #4
    4124:	b29b      	uxth	r3, r3
    4126:	4283      	cmp	r3, r0
    4128:	d801      	bhi.n	412e <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    412a:	4291      	cmp	r1, r2
    412c:	d22b      	bcs.n	4186 <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    412e:	f06f 0415 	mvn.w	r4, #21
    4132:	e00e      	b.n	4152 <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    4134:	2108      	movs	r1, #8
    4136:	4819      	ldr	r0, [pc, #100]	; (419c <bt_le_scan_start+0x9c>)
    4138:	f7fd ffd0 	bl	20dc <atomic_test_bit>
    413c:	b158      	cbz	r0, 4156 <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    413e:	4610      	mov	r0, r2
    4140:	f7fe f8ac 	bl	229c <set_le_scan_enable>
		if (err) {
    4144:	4604      	mov	r4, r0
    4146:	b130      	cbz	r0, 4156 <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4148:	f46f 7100 	mvn.w	r1, #512	; 0x200
    414c:	4813      	ldr	r0, [pc, #76]	; (419c <bt_le_scan_start+0x9c>)
    414e:	f7fd ff2f 	bl	1fb0 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    4152:	4620      	mov	r0, r4
    4154:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    4156:	786b      	ldrb	r3, [r5, #1]
    4158:	b17b      	cbz	r3, 417a <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    415a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    415e:	480f      	ldr	r0, [pc, #60]	; (419c <bt_le_scan_start+0x9c>)
    4160:	f7fd ff15 	bl	1f8e <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    4164:	88aa      	ldrh	r2, [r5, #4]
    4166:	8869      	ldrh	r1, [r5, #2]
    4168:	7828      	ldrb	r0, [r5, #0]
    416a:	f7fe fa61 	bl	2630 <start_le_scan>
	if (err) {
    416e:	4604      	mov	r4, r0
    4170:	2800      	cmp	r0, #0
    4172:	d1e9      	bne.n	4148 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    4174:	4b0a      	ldr	r3, [pc, #40]	; (41a0 <bt_le_scan_start+0xa0>)
    4176:	601e      	str	r6, [r3, #0]
	return 0;
    4178:	e7eb      	b.n	4152 <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    417a:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    417e:	4807      	ldr	r0, [pc, #28]	; (419c <bt_le_scan_start+0x9c>)
    4180:	f7fd ff16 	bl	1fb0 <atomic_and>
    4184:	e7ee      	b.n	4164 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4186:	f44f 7100 	mov.w	r1, #512	; 0x200
    418a:	4804      	ldr	r0, [pc, #16]	; (419c <bt_le_scan_start+0x9c>)
    418c:	f7fd feff 	bl	1f8e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4190:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    4194:	d0ce      	beq.n	4134 <bt_le_scan_start+0x34>
		return -EALREADY;
    4196:	f06f 0444 	mvn.w	r4, #68	; 0x44
    419a:	e7da      	b.n	4152 <bt_le_scan_start+0x52>
    419c:	20003ad8 	.word	0x20003ad8
    41a0:	200002d8 	.word	0x200002d8

000041a4 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    41a4:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    41a6:	f46f 7100 	mvn.w	r1, #512	; 0x200
    41aa:	4807      	ldr	r0, [pc, #28]	; (41c8 <bt_le_scan_stop+0x24>)
    41ac:	f7fd ff00 	bl	1fb0 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    41b0:	0583      	lsls	r3, r0, #22
    41b2:	d506      	bpl.n	41c2 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    41b4:	4b05      	ldr	r3, [pc, #20]	; (41cc <bt_le_scan_stop+0x28>)
    41b6:	2000      	movs	r0, #0
    41b8:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    41ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    41be:	f7fe ba7b 	b.w	26b8 <bt_le_scan_update>
}
    41c2:	f06f 0044 	mvn.w	r0, #68	; 0x44
    41c6:	bd08      	pop	{r3, pc}
    41c8:	20003ad8 	.word	0x20003ad8
    41cc:	200002d8 	.word	0x200002d8

000041d0 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    41d0:	b538      	push	{r3, r4, r5, lr}
    41d2:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    41d4:	4805      	ldr	r0, [pc, #20]	; (41ec <bt_buf_get_rx+0x1c>)
    41d6:	f00f fa69 	bl	136ac <net_buf_alloc_fixed>
#endif

	if (buf) {
    41da:	4604      	mov	r4, r0
    41dc:	b120      	cbz	r0, 41e8 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    41de:	2100      	movs	r1, #0
    41e0:	3008      	adds	r0, #8
    41e2:	f00f fa82 	bl	136ea <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    41e6:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    41e8:	4620      	mov	r0, r4
    41ea:	bd38      	pop	{r3, r4, r5, pc}
    41ec:	20003f94 	.word	0x20003f94

000041f0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    41f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    41f2:	4606      	mov	r6, r0
	__asm__ volatile(
    41f4:	f04f 0320 	mov.w	r3, #32
    41f8:	f3ef 8211 	mrs	r2, BASEPRI
    41fc:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    4200:	4b13      	ldr	r3, [pc, #76]	; (4250 <bt_buf_get_cmd_complete+0x60>)
	bt_dev.sent_cmd = NULL;
    4202:	2500      	movs	r5, #0
	buf = bt_dev.sent_cmd;
    4204:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    4208:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    420c:	f382 8811 	msr	BASEPRI, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4210:	f010 fb04 	bl	1481c <_impl_k_current_get>
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);
    4214:	4b0f      	ldr	r3, [pc, #60]	; (4254 <bt_buf_get_cmd_complete+0x64>)
    4216:	9303      	str	r3, [sp, #12]
    4218:	9001      	str	r0, [sp, #4]
    421a:	9300      	str	r3, [sp, #0]
    421c:	9402      	str	r4, [sp, #8]
    421e:	4b0e      	ldr	r3, [pc, #56]	; (4258 <bt_buf_get_cmd_complete+0x68>)
    4220:	4a0e      	ldr	r2, [pc, #56]	; (425c <bt_buf_get_cmd_complete+0x6c>)
    4222:	490f      	ldr	r1, [pc, #60]	; (4260 <bt_buf_get_cmd_complete+0x70>)
    4224:	480f      	ldr	r0, [pc, #60]	; (4264 <bt_buf_get_cmd_complete+0x74>)
    4226:	f7fc feb1 	bl	f8c <printk>

	if (buf) {
    422a:	b934      	cbnz	r4, 423a <bt_buf_get_cmd_complete+0x4a>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    422c:	4631      	mov	r1, r6
    422e:	2001      	movs	r0, #1
}
    4230:	b004      	add	sp, #16
    4232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4236:	f7ff bfcb 	b.w	41d0 <bt_buf_get_rx>
    423a:	2301      	movs	r3, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    423c:	f104 0008 	add.w	r0, r4, #8
    4240:	7523      	strb	r3, [r4, #20]
		buf->len = 0;
    4242:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4244:	4629      	mov	r1, r5
    4246:	f00f fa50 	bl	136ea <net_buf_simple_reserve>
}
    424a:	4620      	mov	r0, r4
    424c:	b004      	add	sp, #16
    424e:	bd70      	pop	{r4, r5, r6, pc}
    4250:	20003a68 	.word	0x20003a68
    4254:	000153a9 	.word	0x000153a9
    4258:	00015c31 	.word	0x00015c31
    425c:	000167ad 	.word	0x000167ad
    4260:	000167b4 	.word	0x000167b4
    4264:	00015c49 	.word	0x00015c49

00004268 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    4268:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    426a:	4b06      	ldr	r3, [pc, #24]	; (4284 <notify_connected+0x1c>)
    426c:	681c      	ldr	r4, [r3, #0]
{
    426e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    4270:	b904      	cbnz	r4, 4274 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    4272:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    4274:	6823      	ldr	r3, [r4, #0]
    4276:	b113      	cbz	r3, 427e <notify_connected+0x16>
			cb->connected(conn, conn->err);
    4278:	7a29      	ldrb	r1, [r5, #8]
    427a:	4628      	mov	r0, r5
    427c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    427e:	6924      	ldr	r4, [r4, #16]
    4280:	e7f6      	b.n	4270 <notify_connected+0x8>
    4282:	bf00      	nop
    4284:	2000034c 	.word	0x2000034c

00004288 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4288:	f3bf 8f5b 	dmb	ish
    428c:	6800      	ldr	r0, [r0, #0]
    428e:	f3bf 8f5b 	dmb	ish
}
    4292:	4770      	bx	lr

00004294 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    4294:	8943      	ldrh	r3, [r0, #10]
{
    4296:	b510      	push	{r4, lr}
    4298:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    429a:	b12b      	cbz	r3, 42a8 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    429c:	68c0      	ldr	r0, [r0, #12]
    429e:	f00f fa35 	bl	1370c <net_buf_unref>
	conn->rx = NULL;
    42a2:	2300      	movs	r3, #0
    42a4:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    42a6:	8163      	strh	r3, [r4, #10]
    42a8:	bd10      	pop	{r4, pc}
	...

000042ac <bt_conn_get_pkts>:
}
    42ac:	4800      	ldr	r0, [pc, #0]	; (42b0 <bt_conn_get_pkts+0x4>)
    42ae:	4770      	bx	lr
    42b0:	20003af4 	.word	0x20003af4

000042b4 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    42b4:	4b08      	ldr	r3, [pc, #32]	; (42d8 <notify_le_param_updated+0x24>)
{
    42b6:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    42b8:	681c      	ldr	r4, [r3, #0]
{
    42ba:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    42bc:	b904      	cbnz	r4, 42c0 <notify_le_param_updated+0xc>
}
    42be:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    42c0:	68e6      	ldr	r6, [r4, #12]
    42c2:	b13e      	cbz	r6, 42d4 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    42c4:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    42c8:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    42cc:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    42d0:	4628      	mov	r0, r5
    42d2:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    42d4:	6924      	ldr	r4, [r4, #16]
    42d6:	e7f1      	b.n	42bc <notify_le_param_updated+0x8>
    42d8:	2000034c 	.word	0x2000034c

000042dc <le_param_req>:
{
    42dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42de:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    42e0:	4608      	mov	r0, r1
{
    42e2:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    42e4:	f7fe f884 	bl	23f0 <bt_le_conn_params_valid>
    42e8:	4605      	mov	r5, r0
    42ea:	b910      	cbnz	r0, 42f2 <le_param_req+0x16>
		return false;
    42ec:	2500      	movs	r5, #0
}
    42ee:	4628      	mov	r0, r5
    42f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    42f2:	4b09      	ldr	r3, [pc, #36]	; (4318 <le_param_req+0x3c>)
    42f4:	681c      	ldr	r4, [r3, #0]
    42f6:	2c00      	cmp	r4, #0
    42f8:	d0f9      	beq.n	42ee <le_param_req+0x12>
		if (!cb->le_param_req) {
    42fa:	68a3      	ldr	r3, [r4, #8]
    42fc:	b90b      	cbnz	r3, 4302 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    42fe:	6924      	ldr	r4, [r4, #16]
    4300:	e7f9      	b.n	42f6 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    4302:	4631      	mov	r1, r6
    4304:	4638      	mov	r0, r7
    4306:	4798      	blx	r3
    4308:	2800      	cmp	r0, #0
    430a:	d0ef      	beq.n	42ec <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    430c:	4630      	mov	r0, r6
    430e:	f7fe f86f 	bl	23f0 <bt_le_conn_params_valid>
    4312:	2800      	cmp	r0, #0
    4314:	d1f3      	bne.n	42fe <le_param_req+0x22>
    4316:	e7e9      	b.n	42ec <le_param_req+0x10>
    4318:	2000034c 	.word	0x2000034c

0000431c <bt_conn_cb_register>:
	cb->_next = callback_list;
    431c:	4b02      	ldr	r3, [pc, #8]	; (4328 <bt_conn_cb_register+0xc>)
    431e:	681a      	ldr	r2, [r3, #0]
    4320:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    4322:	6018      	str	r0, [r3, #0]
    4324:	4770      	bx	lr
    4326:	bf00      	nop
    4328:	2000034c 	.word	0x2000034c

0000432c <bt_conn_recv>:
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    432c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4330:	b086      	sub	sp, #24
    4332:	4690      	mov	r8, r2
    4334:	460d      	mov	r5, r1
	struct bt_l2cap_hdr *hdr;
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    4336:	4e66      	ldr	r6, [pc, #408]	; (44d0 <bt_conn_recv+0x1a4>)
{
    4338:	4604      	mov	r4, r0
    433a:	f010 fa6f 	bl	1481c <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    433e:	9605      	str	r6, [sp, #20]
    4340:	f8cd 8010 	str.w	r8, [sp, #16]
    4344:	89ab      	ldrh	r3, [r5, #12]
    4346:	9303      	str	r3, [sp, #12]
    4348:	8823      	ldrh	r3, [r4, #0]
    434a:	9302      	str	r3, [sp, #8]
    434c:	9001      	str	r0, [sp, #4]
    434e:	9600      	str	r6, [sp, #0]
    4350:	4b60      	ldr	r3, [pc, #384]	; (44d4 <bt_conn_recv+0x1a8>)
    4352:	4a61      	ldr	r2, [pc, #388]	; (44d8 <bt_conn_recv+0x1ac>)
    4354:	4961      	ldr	r1, [pc, #388]	; (44dc <bt_conn_recv+0x1b0>)
    4356:	4862      	ldr	r0, [pc, #392]	; (44e0 <bt_conn_recv+0x1b4>)
    4358:	f7fc fe18 	bl	f8c <printk>

	/* Check packet boundary flags */
	switch (flags) {
    435c:	f1b8 0f01 	cmp.w	r8, #1
    4360:	4637      	mov	r7, r6
    4362:	d038      	beq.n	43d6 <bt_conn_recv+0xaa>
    4364:	f1b8 0f02 	cmp.w	r8, #2
    4368:	f040 8094 	bne.w	4494 <bt_conn_recv+0x168>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    436c:	68ab      	ldr	r3, [r5, #8]
    436e:	881e      	ldrh	r6, [r3, #0]
    4370:	f010 fa54 	bl	1481c <_impl_k_current_get>

		BT_DBG("First, len %u final %u", buf->len, len);
    4374:	9704      	str	r7, [sp, #16]
    4376:	9603      	str	r6, [sp, #12]
    4378:	89ab      	ldrh	r3, [r5, #12]
    437a:	9302      	str	r3, [sp, #8]
    437c:	9001      	str	r0, [sp, #4]
    437e:	4b55      	ldr	r3, [pc, #340]	; (44d4 <bt_conn_recv+0x1a8>)
    4380:	9700      	str	r7, [sp, #0]
    4382:	4a55      	ldr	r2, [pc, #340]	; (44d8 <bt_conn_recv+0x1ac>)
    4384:	4955      	ldr	r1, [pc, #340]	; (44dc <bt_conn_recv+0x1b0>)
    4386:	4857      	ldr	r0, [pc, #348]	; (44e4 <bt_conn_recv+0x1b8>)
    4388:	f7fc fe00 	bl	f8c <printk>

		if (conn->rx_len) {
    438c:	8963      	ldrh	r3, [r4, #10]
    438e:	b153      	cbz	r3, 43a6 <bt_conn_recv+0x7a>
			BT_ERR("Unexpected first L2CAP frame");
    4390:	9701      	str	r7, [sp, #4]
    4392:	9700      	str	r7, [sp, #0]
    4394:	4b4f      	ldr	r3, [pc, #316]	; (44d4 <bt_conn_recv+0x1a8>)
    4396:	4a54      	ldr	r2, [pc, #336]	; (44e8 <bt_conn_recv+0x1bc>)
    4398:	4950      	ldr	r1, [pc, #320]	; (44dc <bt_conn_recv+0x1b0>)
    439a:	4854      	ldr	r0, [pc, #336]	; (44ec <bt_conn_recv+0x1c0>)
    439c:	f7fc fdf6 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    43a0:	4620      	mov	r0, r4
    43a2:	f7ff ff77 	bl	4294 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    43a6:	89ab      	ldrh	r3, [r5, #12]
    43a8:	1af6      	subs	r6, r6, r3
    43aa:	3604      	adds	r6, #4
    43ac:	8166      	strh	r6, [r4, #10]
    43ae:	f010 fa35 	bl	1481c <_impl_k_current_get>
		BT_DBG("rx_len %u", conn->rx_len);
    43b2:	8963      	ldrh	r3, [r4, #10]
    43b4:	9302      	str	r3, [sp, #8]
    43b6:	9001      	str	r0, [sp, #4]
    43b8:	4b46      	ldr	r3, [pc, #280]	; (44d4 <bt_conn_recv+0x1a8>)
    43ba:	9703      	str	r7, [sp, #12]
    43bc:	9700      	str	r7, [sp, #0]
    43be:	4a46      	ldr	r2, [pc, #280]	; (44d8 <bt_conn_recv+0x1ac>)
    43c0:	4946      	ldr	r1, [pc, #280]	; (44dc <bt_conn_recv+0x1b0>)
    43c2:	484b      	ldr	r0, [pc, #300]	; (44f0 <bt_conn_recv+0x1c4>)
    43c4:	f7fc fde2 	bl	f8c <printk>
		if (conn->rx_len) {
    43c8:	8963      	ldrh	r3, [r4, #10]
    43ca:	2b00      	cmp	r3, #0
    43cc:	d051      	beq.n	4472 <bt_conn_recv+0x146>
			conn->rx = buf;
    43ce:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    43d0:	b006      	add	sp, #24
    43d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!conn->rx_len) {
    43d6:	8963      	ldrh	r3, [r4, #10]
    43d8:	b983      	cbnz	r3, 43fc <bt_conn_recv+0xd0>
			BT_ERR("Unexpected L2CAP continuation");
    43da:	4b3e      	ldr	r3, [pc, #248]	; (44d4 <bt_conn_recv+0x1a8>)
    43dc:	4a42      	ldr	r2, [pc, #264]	; (44e8 <bt_conn_recv+0x1bc>)
    43de:	493f      	ldr	r1, [pc, #252]	; (44dc <bt_conn_recv+0x1b0>)
    43e0:	4844      	ldr	r0, [pc, #272]	; (44f4 <bt_conn_recv+0x1c8>)
    43e2:	9601      	str	r6, [sp, #4]
    43e4:	9600      	str	r6, [sp, #0]
			BT_ERR("L2CAP data overflow");
    43e6:	f7fc fdd1 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    43ea:	4620      	mov	r0, r4
    43ec:	f7ff ff52 	bl	4294 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    43f0:	4628      	mov	r0, r5
}
    43f2:	b006      	add	sp, #24
    43f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			net_buf_unref(buf);
    43f8:	f00f b988 	b.w	1370c <net_buf_unref>
		if (buf->len > conn->rx_len) {
    43fc:	89aa      	ldrh	r2, [r5, #12]
    43fe:	429a      	cmp	r2, r3
    4400:	d906      	bls.n	4410 <bt_conn_recv+0xe4>
			BT_ERR("L2CAP data overflow");
    4402:	9601      	str	r6, [sp, #4]
    4404:	9600      	str	r6, [sp, #0]
    4406:	4b33      	ldr	r3, [pc, #204]	; (44d4 <bt_conn_recv+0x1a8>)
    4408:	4a37      	ldr	r2, [pc, #220]	; (44e8 <bt_conn_recv+0x1bc>)
    440a:	4934      	ldr	r1, [pc, #208]	; (44dc <bt_conn_recv+0x1b0>)
    440c:	483a      	ldr	r0, [pc, #232]	; (44f8 <bt_conn_recv+0x1cc>)
    440e:	e7ea      	b.n	43e6 <bt_conn_recv+0xba>
    4410:	f010 fa04 	bl	1481c <_impl_k_current_get>
		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);
    4414:	8963      	ldrh	r3, [r4, #10]
    4416:	9604      	str	r6, [sp, #16]
    4418:	9303      	str	r3, [sp, #12]
    441a:	89ab      	ldrh	r3, [r5, #12]
    441c:	9302      	str	r3, [sp, #8]
    441e:	9001      	str	r0, [sp, #4]
    4420:	4b2c      	ldr	r3, [pc, #176]	; (44d4 <bt_conn_recv+0x1a8>)
    4422:	4a2d      	ldr	r2, [pc, #180]	; (44d8 <bt_conn_recv+0x1ac>)
    4424:	492d      	ldr	r1, [pc, #180]	; (44dc <bt_conn_recv+0x1b0>)
    4426:	9600      	str	r6, [sp, #0]
    4428:	4834      	ldr	r0, [pc, #208]	; (44fc <bt_conn_recv+0x1d0>)
    442a:	f7fc fdaf 	bl	f8c <printk>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    442e:	68e0      	ldr	r0, [r4, #12]
    4430:	f8b5 800c 	ldrh.w	r8, [r5, #12]
    4434:	3008      	adds	r0, #8
    4436:	f00f f9e5 	bl	13804 <net_buf_simple_tailroom>
    443a:	4580      	cmp	r8, r0
    443c:	d906      	bls.n	444c <bt_conn_recv+0x120>
			BT_ERR("Not enough buffer space for L2CAP data");
    443e:	9601      	str	r6, [sp, #4]
    4440:	9600      	str	r6, [sp, #0]
    4442:	4b24      	ldr	r3, [pc, #144]	; (44d4 <bt_conn_recv+0x1a8>)
    4444:	4a28      	ldr	r2, [pc, #160]	; (44e8 <bt_conn_recv+0x1bc>)
    4446:	4925      	ldr	r1, [pc, #148]	; (44dc <bt_conn_recv+0x1b0>)
    4448:	482d      	ldr	r0, [pc, #180]	; (4500 <bt_conn_recv+0x1d4>)
    444a:	e7cc      	b.n	43e6 <bt_conn_recv+0xba>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    444c:	68e0      	ldr	r0, [r4, #12]
    444e:	89aa      	ldrh	r2, [r5, #12]
    4450:	68a9      	ldr	r1, [r5, #8]
    4452:	3008      	adds	r0, #8
    4454:	f00f f992 	bl	1377c <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    4458:	8963      	ldrh	r3, [r4, #10]
    445a:	89aa      	ldrh	r2, [r5, #12]
    445c:	1a9b      	subs	r3, r3, r2
    445e:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    4460:	4628      	mov	r0, r5
    4462:	f00f f953 	bl	1370c <net_buf_unref>
		if (conn->rx_len) {
    4466:	8963      	ldrh	r3, [r4, #10]
    4468:	2b00      	cmp	r3, #0
    446a:	d1b1      	bne.n	43d0 <bt_conn_recv+0xa4>
		buf = conn->rx;
    446c:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    446e:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    4470:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    4472:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    4474:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    4476:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    4478:	1d19      	adds	r1, r3, #4
    447a:	4291      	cmp	r1, r2
    447c:	d014      	beq.n	44a8 <bt_conn_recv+0x17c>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    447e:	9202      	str	r2, [sp, #8]
    4480:	9301      	str	r3, [sp, #4]
    4482:	9703      	str	r7, [sp, #12]
    4484:	9700      	str	r7, [sp, #0]
    4486:	4b13      	ldr	r3, [pc, #76]	; (44d4 <bt_conn_recv+0x1a8>)
    4488:	4a17      	ldr	r2, [pc, #92]	; (44e8 <bt_conn_recv+0x1bc>)
    448a:	4914      	ldr	r1, [pc, #80]	; (44dc <bt_conn_recv+0x1b0>)
    448c:	481d      	ldr	r0, [pc, #116]	; (4504 <bt_conn_recv+0x1d8>)
    448e:	f7fc fd7d 	bl	f8c <printk>
    4492:	e7ad      	b.n	43f0 <bt_conn_recv+0xc4>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    4494:	9602      	str	r6, [sp, #8]
    4496:	e88d 0140 	stmia.w	sp, {r6, r8}
    449a:	4b0e      	ldr	r3, [pc, #56]	; (44d4 <bt_conn_recv+0x1a8>)
    449c:	4a12      	ldr	r2, [pc, #72]	; (44e8 <bt_conn_recv+0x1bc>)
    449e:	490f      	ldr	r1, [pc, #60]	; (44dc <bt_conn_recv+0x1b0>)
    44a0:	4819      	ldr	r0, [pc, #100]	; (4508 <bt_conn_recv+0x1dc>)
    44a2:	f7fc fd73 	bl	f8c <printk>
    44a6:	e7a0      	b.n	43ea <bt_conn_recv+0xbe>
    44a8:	f010 f9b8 	bl	1481c <_impl_k_current_get>
	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
    44ac:	9703      	str	r7, [sp, #12]
    44ae:	89ab      	ldrh	r3, [r5, #12]
    44b0:	9302      	str	r3, [sp, #8]
    44b2:	9001      	str	r0, [sp, #4]
    44b4:	9700      	str	r7, [sp, #0]
    44b6:	4b07      	ldr	r3, [pc, #28]	; (44d4 <bt_conn_recv+0x1a8>)
    44b8:	4a07      	ldr	r2, [pc, #28]	; (44d8 <bt_conn_recv+0x1ac>)
    44ba:	4908      	ldr	r1, [pc, #32]	; (44dc <bt_conn_recv+0x1b0>)
    44bc:	4813      	ldr	r0, [pc, #76]	; (450c <bt_conn_recv+0x1e0>)
    44be:	f7fc fd65 	bl	f8c <printk>
	bt_l2cap_recv(conn, buf);
    44c2:	4629      	mov	r1, r5
    44c4:	4620      	mov	r0, r4
}
    44c6:	b006      	add	sp, #24
    44c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_recv(conn, buf);
    44cc:	f001 b8b4 	b.w	5638 <bt_l2cap_recv>
    44d0:	000153a9 	.word	0x000153a9
    44d4:	00016c08 	.word	0x00016c08
    44d8:	000167ad 	.word	0x000167ad
    44dc:	000167b4 	.word	0x000167b4
    44e0:	00016dd2 	.word	0x00016dd2
    44e4:	00016e03 	.word	0x00016e03
    44e8:	00016765 	.word	0x00016765
    44ec:	00016e2f 	.word	0x00016e2f
    44f0:	00016e5c 	.word	0x00016e5c
    44f4:	00016e7b 	.word	0x00016e7b
    44f8:	00016ea9 	.word	0x00016ea9
    44fc:	00016ecd 	.word	0x00016ecd
    4500:	00016ef9 	.word	0x00016ef9
    4504:	00016f5e 	.word	0x00016f5e
    4508:	00016f30 	.word	0x00016f30
    450c:	00016f8a 	.word	0x00016f8a

00004510 <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    4510:	b5f0      	push	{r4, r5, r6, r7, lr}
    4512:	460c      	mov	r4, r1
    4514:	b087      	sub	sp, #28
    4516:	4606      	mov	r6, r0
    4518:	4617      	mov	r7, r2
    451a:	f010 f97f 	bl	1481c <_impl_k_current_get>
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    451e:	89a3      	ldrh	r3, [r4, #12]
    4520:	4d13      	ldr	r5, [pc, #76]	; (4570 <bt_conn_send_cb+0x60>)
    4522:	9303      	str	r3, [sp, #12]
    4524:	8833      	ldrh	r3, [r6, #0]
    4526:	9302      	str	r3, [sp, #8]
    4528:	9001      	str	r0, [sp, #4]
    452a:	4b12      	ldr	r3, [pc, #72]	; (4574 <bt_conn_send_cb+0x64>)
    452c:	9505      	str	r5, [sp, #20]
    452e:	9704      	str	r7, [sp, #16]
    4530:	9500      	str	r5, [sp, #0]
    4532:	4a11      	ldr	r2, [pc, #68]	; (4578 <bt_conn_send_cb+0x68>)
    4534:	4911      	ldr	r1, [pc, #68]	; (457c <bt_conn_send_cb+0x6c>)
    4536:	4812      	ldr	r0, [pc, #72]	; (4580 <bt_conn_send_cb+0x70>)
    4538:	f7fc fd28 	bl	f8c <printk>

	if (conn->state != BT_CONN_CONNECTED) {
    453c:	7a73      	ldrb	r3, [r6, #9]
    453e:	2b03      	cmp	r3, #3
    4540:	d00e      	beq.n	4560 <bt_conn_send_cb+0x50>
		BT_ERR("not connected!");
    4542:	4b0c      	ldr	r3, [pc, #48]	; (4574 <bt_conn_send_cb+0x64>)
    4544:	4a0f      	ldr	r2, [pc, #60]	; (4584 <bt_conn_send_cb+0x74>)
    4546:	490d      	ldr	r1, [pc, #52]	; (457c <bt_conn_send_cb+0x6c>)
    4548:	9501      	str	r5, [sp, #4]
    454a:	9500      	str	r5, [sp, #0]
    454c:	480e      	ldr	r0, [pc, #56]	; (4588 <bt_conn_send_cb+0x78>)
    454e:	f7fc fd1d 	bl	f8c <printk>
		net_buf_unref(buf);
    4552:	4620      	mov	r0, r4
    4554:	f00f f8da 	bl	1370c <net_buf_unref>
		return -ENOTCONN;
    4558:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    455c:	b007      	add	sp, #28
    455e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_put(&conn->tx_queue, buf);
    4560:	f106 0028 	add.w	r0, r6, #40	; 0x28
	conn_tx(buf)->cb = cb;
    4564:	6167      	str	r7, [r4, #20]
	net_buf_put(&conn->tx_queue, buf);
    4566:	4621      	mov	r1, r4
    4568:	f00f f8c3 	bl	136f2 <net_buf_put>
	return 0;
    456c:	2000      	movs	r0, #0
    456e:	e7f5      	b.n	455c <bt_conn_send_cb+0x4c>
    4570:	000153a9 	.word	0x000153a9
    4574:	00016c15 	.word	0x00016c15
    4578:	000167ad 	.word	0x000167ad
    457c:	000167b4 	.word	0x000167b4
    4580:	00016fee 	.word	0x00016fee
    4584:	00016765 	.word	0x00016765
    4588:	00017023 	.word	0x00017023

0000458c <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    458c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4590:	4606      	mov	r6, r0
    4592:	f010 f943 	bl	1481c <_impl_k_current_get>
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);
    4596:	4b13      	ldr	r3, [pc, #76]	; (45e4 <bt_conn_notify_tx+0x58>)
    4598:	9303      	str	r3, [sp, #12]
    459a:	9001      	str	r0, [sp, #4]
    459c:	9300      	str	r3, [sp, #0]
    459e:	9602      	str	r6, [sp, #8]
    45a0:	4b11      	ldr	r3, [pc, #68]	; (45e8 <bt_conn_notify_tx+0x5c>)
    45a2:	4a12      	ldr	r2, [pc, #72]	; (45ec <bt_conn_notify_tx+0x60>)
    45a4:	4912      	ldr	r1, [pc, #72]	; (45f0 <bt_conn_notify_tx+0x64>)
    45a6:	4813      	ldr	r0, [pc, #76]	; (45f4 <bt_conn_notify_tx+0x68>)
    45a8:	4d13      	ldr	r5, [pc, #76]	; (45f8 <bt_conn_notify_tx+0x6c>)
    45aa:	f7fc fcef 	bl	f8c <printk>

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    45ae:	f106 0718 	add.w	r7, r6, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    45b2:	f04f 0800 	mov.w	r8, #0
    45b6:	2100      	movs	r1, #0
    45b8:	4638      	mov	r0, r7
    45ba:	f00f fe9d 	bl	142f8 <_impl_k_queue_get>
    45be:	4604      	mov	r4, r0
    45c0:	b910      	cbnz	r0, 45c8 <bt_conn_notify_tx+0x3c>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    45c2:	b004      	add	sp, #16
    45c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    45c8:	6863      	ldr	r3, [r4, #4]
    45ca:	b10b      	cbz	r3, 45d0 <bt_conn_notify_tx+0x44>
			tx->cb(conn);
    45cc:	4630      	mov	r0, r6
    45ce:	4798      	blx	r3
    45d0:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    45d2:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    45d4:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    45d6:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    45da:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    45dc:	2b00      	cmp	r3, #0
    45de:	d1ea      	bne.n	45b6 <bt_conn_notify_tx+0x2a>
	list->tail = node;
    45e0:	606c      	str	r4, [r5, #4]
    45e2:	e7e6      	b.n	45b2 <bt_conn_notify_tx+0x26>
    45e4:	000153a9 	.word	0x000153a9
    45e8:	00016c25 	.word	0x00016c25
    45ec:	000167ad 	.word	0x000167ad
    45f0:	000167b4 	.word	0x000167b4
    45f4:	00016d09 	.word	0x00016d09
    45f8:	200003f8 	.word	0x200003f8

000045fc <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    45fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4600:	b088      	sub	sp, #32
    4602:	460f      	mov	r7, r1
    4604:	4614      	mov	r4, r2
	struct bt_hci_acl_hdr *hdr;
	bt_conn_tx_cb_t cb;
	sys_snode_t *node;
	int err;

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    4606:	4e57      	ldr	r6, [pc, #348]	; (4764 <send_frag+0x168>)
{
    4608:	4605      	mov	r5, r0
    460a:	4699      	mov	r9, r3
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    460c:	f010 f906 	bl	1481c <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    4610:	9606      	str	r6, [sp, #24]
    4612:	9405      	str	r4, [sp, #20]
    4614:	89bb      	ldrh	r3, [r7, #12]
    4616:	4a54      	ldr	r2, [pc, #336]	; (4768 <send_frag+0x16c>)
    4618:	9304      	str	r3, [sp, #16]
    461a:	9001      	str	r0, [sp, #4]
    461c:	4b53      	ldr	r3, [pc, #332]	; (476c <send_frag+0x170>)
    461e:	4954      	ldr	r1, [pc, #336]	; (4770 <send_frag+0x174>)
    4620:	9703      	str	r7, [sp, #12]
    4622:	9502      	str	r5, [sp, #8]
    4624:	9600      	str	r6, [sp, #0]
    4626:	4853      	ldr	r0, [pc, #332]	; (4774 <send_frag+0x178>)
    4628:	f7fc fcb0 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    462c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4630:	4851      	ldr	r0, [pc, #324]	; (4778 <send_frag+0x17c>)
    4632:	f010 f92a 	bl	1488a <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    4636:	4b51      	ldr	r3, [pc, #324]	; (477c <send_frag+0x180>)
    4638:	f103 0040 	add.w	r0, r3, #64	; 0x40
    463c:	f7ff fe24 	bl	4288 <atomic_get>
    4640:	46b0      	mov	r8, r6
    4642:	b130      	cbz	r0, 4652 <send_frag+0x56>
		if (conns[i].state == BT_CONN_CONNECTED ||
    4644:	7a5a      	ldrb	r2, [r3, #9]
    4646:	3a03      	subs	r2, #3
    4648:	2a01      	cmp	r2, #1
    464a:	d802      	bhi.n	4652 <send_frag+0x56>
			bt_conn_notify_tx(&conns[i]);
    464c:	4618      	mov	r0, r3
    464e:	f7ff ff9d 	bl	458c <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    4652:	7a6b      	ldrb	r3, [r5, #9]
    4654:	2b03      	cmp	r3, #3
    4656:	d166      	bne.n	4726 <send_frag+0x12a>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    4658:	2104      	movs	r1, #4
    465a:	f107 0008 	add.w	r0, r7, #8
    465e:	f00f f8ad 	bl	137bc <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    4662:	882a      	ldrh	r2, [r5, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));

	cb = conn_tx(buf)->cb;
    4664:	f8d7 a014 	ldr.w	sl, [r7, #20]
    4668:	4e45      	ldr	r6, [pc, #276]	; (4780 <send_frag+0x184>)
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    466a:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    466e:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4670:	89bb      	ldrh	r3, [r7, #12]
    4672:	3b04      	subs	r3, #4
    4674:	8043      	strh	r3, [r0, #2]
    4676:	2302      	movs	r3, #2
    4678:	753b      	strb	r3, [r7, #20]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    467a:	f010 f8cf 	bl	1481c <_impl_k_current_get>
	BT_DBG("conn %p cb %p", conn, cb);
    467e:	f8cd 8010 	str.w	r8, [sp, #16]
    4682:	9001      	str	r0, [sp, #4]
    4684:	f8cd a00c 	str.w	sl, [sp, #12]
    4688:	9502      	str	r5, [sp, #8]
    468a:	f8cd 8000 	str.w	r8, [sp]
    468e:	4b3d      	ldr	r3, [pc, #244]	; (4784 <send_frag+0x188>)
    4690:	4a35      	ldr	r2, [pc, #212]	; (4768 <send_frag+0x16c>)
    4692:	4937      	ldr	r1, [pc, #220]	; (4770 <send_frag+0x174>)
    4694:	483c      	ldr	r0, [pc, #240]	; (4788 <send_frag+0x18c>)
    4696:	f7fc fc79 	bl	f8c <printk>
    469a:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    469c:	6872      	ldr	r2, [r6, #4]
	return node->next;
    469e:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    46a0:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    46a2:	4294      	cmp	r4, r2
	list->tail = node;
    46a4:	bf08      	it	eq
    46a6:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    46a8:	f8c4 a004 	str.w	sl, [r4, #4]
	__asm__ volatile(
    46ac:	f04f 0320 	mov.w	r3, #32
    46b0:	f3ef 8211 	mrs	r2, BASEPRI
    46b4:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    46b8:	2300      	movs	r3, #0
    46ba:	6023      	str	r3, [r4, #0]
    46bc:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    46be:	2b00      	cmp	r3, #0
    46c0:	d140      	bne.n	4744 <send_frag+0x148>
	list->tail = node;
    46c2:	616c      	str	r4, [r5, #20]
	list->head = node;
    46c4:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    46c6:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    46ca:	4638      	mov	r0, r7
    46cc:	f7fd ff3c 	bl	2548 <bt_send>
	if (err) {
    46d0:	2800      	cmp	r0, #0
    46d2:	d043      	beq.n	475c <send_frag+0x160>
		BT_ERR("Unable to send to driver (err %d)", err);
    46d4:	9001      	str	r0, [sp, #4]
    46d6:	f8cd 8008 	str.w	r8, [sp, #8]
    46da:	f8cd 8000 	str.w	r8, [sp]
    46de:	4b23      	ldr	r3, [pc, #140]	; (476c <send_frag+0x170>)
    46e0:	4a2a      	ldr	r2, [pc, #168]	; (478c <send_frag+0x190>)
    46e2:	4923      	ldr	r1, [pc, #140]	; (4770 <send_frag+0x174>)
    46e4:	482a      	ldr	r0, [pc, #168]	; (4790 <send_frag+0x194>)
    46e6:	f7fc fc51 	bl	f8c <printk>
	__asm__ volatile(
    46ea:	f04f 0320 	mov.w	r3, #32
    46ee:	f3ef 8111 	mrs	r1, BASEPRI
    46f2:	f383 8811 	msr	BASEPRI, r3
    46f6:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    46f8:	2200      	movs	r2, #0
    46fa:	b153      	cbz	r3, 4712 <send_frag+0x116>
    46fc:	429c      	cmp	r4, r3
    46fe:	d12a      	bne.n	4756 <send_frag+0x15a>
    4700:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    4702:	bb12      	cbnz	r2, 474a <send_frag+0x14e>
    4704:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    4706:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    4708:	4294      	cmp	r4, r2
    470a:	d100      	bne.n	470e <send_frag+0x112>
	list->tail = node;
    470c:	616b      	str	r3, [r5, #20]
	parent->next = child;
    470e:	2300      	movs	r3, #0
    4710:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4712:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    4716:	2300      	movs	r3, #0
    4718:	6063      	str	r3, [r4, #4]
    471a:	6833      	ldr	r3, [r6, #0]
    471c:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    471e:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    4720:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    4722:	b903      	cbnz	r3, 4726 <send_frag+0x12a>
	list->tail = node;
    4724:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4726:	4814      	ldr	r0, [pc, #80]	; (4778 <send_frag+0x17c>)
    4728:	f010 f887 	bl	1483a <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    472c:	f1b9 0f00 	cmp.w	r9, #0
    4730:	d004      	beq.n	473c <send_frag+0x140>
		net_buf_unref(buf);
    4732:	4638      	mov	r0, r7
    4734:	f00e ffea 	bl	1370c <net_buf_unref>
	}
	return false;
    4738:	f04f 0900 	mov.w	r9, #0
}
    473c:	4648      	mov	r0, r9
    473e:	b008      	add	sp, #32
    4740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	parent->next = child;
    4744:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4746:	616c      	str	r4, [r5, #20]
    4748:	e7bd      	b.n	46c6 <send_frag+0xca>
	parent->next = child;
    474a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    474c:	696b      	ldr	r3, [r5, #20]
    474e:	429c      	cmp	r4, r3
	list->tail = node;
    4750:	bf08      	it	eq
    4752:	616a      	streq	r2, [r5, #20]
    4754:	e7db      	b.n	470e <send_frag+0x112>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4756:	461a      	mov	r2, r3
    4758:	681b      	ldr	r3, [r3, #0]
    475a:	e7ce      	b.n	46fa <send_frag+0xfe>
	return true;
    475c:	f04f 0901 	mov.w	r9, #1
    4760:	e7ec      	b.n	473c <send_frag+0x140>
    4762:	bf00      	nop
    4764:	000153a9 	.word	0x000153a9
    4768:	000167ad 	.word	0x000167ad
    476c:	00016c46 	.word	0x00016c46
    4770:	000167b4 	.word	0x000167b4
    4774:	000170d4 	.word	0x000170d4
    4778:	20003af4 	.word	0x20003af4
    477c:	20000360 	.word	0x20000360
    4780:	200003f8 	.word	0x200003f8
    4784:	00016c37 	.word	0x00016c37
    4788:	0001710c 	.word	0x0001710c
    478c:	00016765 	.word	0x00016765
    4790:	00015dde 	.word	0x00015dde

00004794 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    4794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    4796:	4c17      	ldr	r4, [pc, #92]	; (47f4 <bt_conn_add_le+0x60>)
    4798:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    479c:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    479e:	4630      	mov	r0, r6
    47a0:	f7ff fd72 	bl	4288 <atomic_get>
    47a4:	4605      	mov	r5, r0
    47a6:	b108      	cbz	r0, 47ac <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    47a8:	2000      	movs	r0, #0
    47aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    47ac:	4601      	mov	r1, r0
    47ae:	2298      	movs	r2, #152	; 0x98
    47b0:	4620      	mov	r0, r4
    47b2:	f7fd fa4f 	bl	1c54 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    47b6:	f3bf 8f5b 	dmb	ish
    47ba:	2301      	movs	r3, #1
    47bc:	e856 2f00 	ldrex	r2, [r6]
    47c0:	e846 3100 	strex	r1, r3, [r6]
    47c4:	2900      	cmp	r1, #0
    47c6:	d1f9      	bne.n	47bc <bt_conn_add_le+0x28>
    47c8:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    47cc:	2207      	movs	r2, #7
    47ce:	4639      	mov	r1, r7
    47d0:	f104 0044 	add.w	r0, r4, #68	; 0x44
    47d4:	f7fd fa12 	bl	1bfc <memcpy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    47d8:	2318      	movs	r3, #24
    47da:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    47de:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    47e0:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    47e4:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    47e6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    47ea:	4903      	ldr	r1, [pc, #12]	; (47f8 <bt_conn_add_le+0x64>)
    47ec:	f010 fb0c 	bl	14e08 <k_delayed_work_init>
			conn = &conns[i];
    47f0:	4620      	mov	r0, r4

	return conn;
}
    47f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47f4:	20000360 	.word	0x20000360
    47f8:	00004f8d 	.word	0x00004f8d

000047fc <bt_conn_addr_le_cmp>:

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    47fc:	b538      	push	{r3, r4, r5, lr}
    47fe:	460d      	mov	r5, r1
    4800:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    4802:	f100 0144 	add.w	r1, r0, #68	; 0x44
    4806:	2207      	movs	r2, #7
    4808:	4628      	mov	r0, r5
    480a:	f7fd f9e2 	bl	1bd2 <memcmp>
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    480e:	b160      	cbz	r0, 482a <bt_conn_addr_le_cmp+0x2e>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    4810:	78e3      	ldrb	r3, [r4, #3]
    4812:	2207      	movs	r2, #7
    4814:	b933      	cbnz	r3, 4824 <bt_conn_addr_le_cmp+0x28>
    4816:	f104 0152 	add.w	r1, r4, #82	; 0x52
    481a:	4628      	mov	r0, r5
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}
    481c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4820:	f7fd b9d7 	b.w	1bd2 <memcmp>
    4824:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    4828:	e7f7      	b.n	481a <bt_conn_addr_le_cmp+0x1e>
    482a:	bd38      	pop	{r3, r4, r5, pc}

0000482c <bt_conn_ref>:
		}
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
    482c:	b530      	push	{r4, r5, lr}
    482e:	4604      	mov	r4, r0
    4830:	b087      	sub	sp, #28
	atomic_inc(&conn->ref);
    4832:	f100 0540 	add.w	r5, r0, #64	; 0x40
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4836:	f3bf 8f5b 	dmb	ish
    483a:	e855 3f00 	ldrex	r3, [r5]
    483e:	3301      	adds	r3, #1
    4840:	e845 3200 	strex	r2, r3, [r5]
    4844:	2a00      	cmp	r2, #0
    4846:	d1f8      	bne.n	483a <bt_conn_ref+0xe>
    4848:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    484c:	f00f ffe6 	bl	1481c <_impl_k_current_get>
    4850:	4602      	mov	r2, r0

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    4852:	4628      	mov	r0, r5
    4854:	8821      	ldrh	r1, [r4, #0]
    4856:	f7ff fd17 	bl	4288 <atomic_get>
    485a:	4b07      	ldr	r3, [pc, #28]	; (4878 <bt_conn_ref+0x4c>)
    485c:	9304      	str	r3, [sp, #16]
    485e:	9003      	str	r0, [sp, #12]
    4860:	9102      	str	r1, [sp, #8]
    4862:	9201      	str	r2, [sp, #4]
    4864:	9300      	str	r3, [sp, #0]
    4866:	4a05      	ldr	r2, [pc, #20]	; (487c <bt_conn_ref+0x50>)
    4868:	4b05      	ldr	r3, [pc, #20]	; (4880 <bt_conn_ref+0x54>)
    486a:	4906      	ldr	r1, [pc, #24]	; (4884 <bt_conn_ref+0x58>)
    486c:	4806      	ldr	r0, [pc, #24]	; (4888 <bt_conn_ref+0x5c>)
    486e:	f7fc fb8d 	bl	f8c <printk>

	return conn;
}
    4872:	4620      	mov	r0, r4
    4874:	b007      	add	sp, #28
    4876:	bd30      	pop	{r4, r5, pc}
    4878:	000153a9 	.word	0x000153a9
    487c:	000167ad 	.word	0x000167ad
    4880:	00016c95 	.word	0x00016c95
    4884:	000167b4 	.word	0x000167b4
    4888:	00016fc8 	.word	0x00016fc8

0000488c <bt_conn_lookup_handle>:
{
    488c:	b508      	push	{r3, lr}
		if (!atomic_get(&conns[i].ref)) {
    488e:	4b0a      	ldr	r3, [pc, #40]	; (48b8 <bt_conn_lookup_handle+0x2c>)
{
    4890:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    4892:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4896:	f7ff fcf7 	bl	4288 <atomic_get>
    489a:	b158      	cbz	r0, 48b4 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    489c:	7a5a      	ldrb	r2, [r3, #9]
    489e:	3a03      	subs	r2, #3
    48a0:	2a01      	cmp	r2, #1
    48a2:	d807      	bhi.n	48b4 <bt_conn_lookup_handle+0x28>
		if (conns[i].handle == handle) {
    48a4:	881a      	ldrh	r2, [r3, #0]
    48a6:	428a      	cmp	r2, r1
    48a8:	d104      	bne.n	48b4 <bt_conn_lookup_handle+0x28>
			return bt_conn_ref(&conns[i]);
    48aa:	4618      	mov	r0, r3
}
    48ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return bt_conn_ref(&conns[i]);
    48b0:	f7ff bfbc 	b.w	482c <bt_conn_ref>
}
    48b4:	2000      	movs	r0, #0
    48b6:	bd08      	pop	{r3, pc}
    48b8:	20000360 	.word	0x20000360

000048bc <bt_conn_lookup_addr_le>:
{
    48bc:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    48be:	4c0a      	ldr	r4, [pc, #40]	; (48e8 <bt_conn_lookup_addr_le+0x2c>)
{
    48c0:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    48c2:	f104 0040 	add.w	r0, r4, #64	; 0x40
    48c6:	f7ff fcdf 	bl	4288 <atomic_get>
    48ca:	b150      	cbz	r0, 48e2 <bt_conn_lookup_addr_le+0x26>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    48cc:	78a3      	ldrb	r3, [r4, #2]
    48ce:	b943      	cbnz	r3, 48e2 <bt_conn_lookup_addr_le+0x26>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    48d0:	4620      	mov	r0, r4
    48d2:	f7ff ff93 	bl	47fc <bt_conn_addr_le_cmp>
    48d6:	b920      	cbnz	r0, 48e2 <bt_conn_lookup_addr_le+0x26>
			return bt_conn_ref(&conns[i]);
    48d8:	4620      	mov	r0, r4
}
    48da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return bt_conn_ref(&conns[i]);
    48de:	f7ff bfa5 	b.w	482c <bt_conn_ref>
}
    48e2:	2000      	movs	r0, #0
    48e4:	bd10      	pop	{r4, pc}
    48e6:	bf00      	nop
    48e8:	20000360 	.word	0x20000360

000048ec <bt_conn_lookup_state_le>:
{
    48ec:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    48ee:	4c0d      	ldr	r4, [pc, #52]	; (4924 <bt_conn_lookup_state_le+0x38>)
{
    48f0:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    48f2:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    48f6:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    48f8:	f7ff fcc6 	bl	4288 <atomic_get>
    48fc:	b180      	cbz	r0, 4920 <bt_conn_lookup_state_le+0x34>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    48fe:	78a2      	ldrb	r2, [r4, #2]
    4900:	b972      	cbnz	r2, 4920 <bt_conn_lookup_state_le+0x34>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4902:	b93b      	cbnz	r3, 4914 <bt_conn_lookup_state_le+0x28>
		if (conns[i].state == state) {
    4904:	7a63      	ldrb	r3, [r4, #9]
    4906:	42ab      	cmp	r3, r5
    4908:	d10a      	bne.n	4920 <bt_conn_lookup_state_le+0x34>
			return bt_conn_ref(&conns[i]);
    490a:	4806      	ldr	r0, [pc, #24]	; (4924 <bt_conn_lookup_state_le+0x38>)
}
    490c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_conn_ref(&conns[i]);
    4910:	f7ff bf8c 	b.w	482c <bt_conn_ref>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4914:	4619      	mov	r1, r3
    4916:	4620      	mov	r0, r4
    4918:	f7ff ff70 	bl	47fc <bt_conn_addr_le_cmp>
    491c:	2800      	cmp	r0, #0
    491e:	d0f1      	beq.n	4904 <bt_conn_lookup_state_le+0x18>
}
    4920:	2000      	movs	r0, #0
    4922:	bd38      	pop	{r3, r4, r5, pc}
    4924:	20000360 	.word	0x20000360

00004928 <bt_conn_unref>:

void bt_conn_unref(struct bt_conn *conn)
{
    4928:	b530      	push	{r4, r5, lr}
    492a:	4605      	mov	r5, r0
    492c:	b087      	sub	sp, #28
	atomic_dec(&conn->ref);
    492e:	f100 0440 	add.w	r4, r0, #64	; 0x40
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4932:	f3bf 8f5b 	dmb	ish
    4936:	e854 3f00 	ldrex	r3, [r4]
    493a:	3b01      	subs	r3, #1
    493c:	e844 3200 	strex	r2, r3, [r4]
    4940:	2a00      	cmp	r2, #0
    4942:	d1f8      	bne.n	4936 <bt_conn_unref+0xe>
    4944:	f3bf 8f5b 	dmb	ish
    4948:	f00f ff68 	bl	1481c <_impl_k_current_get>
    494c:	4602      	mov	r2, r0

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    494e:	4620      	mov	r0, r4
    4950:	8829      	ldrh	r1, [r5, #0]
    4952:	f7ff fc99 	bl	4288 <atomic_get>
    4956:	4b07      	ldr	r3, [pc, #28]	; (4974 <bt_conn_unref+0x4c>)
    4958:	9304      	str	r3, [sp, #16]
    495a:	9003      	str	r0, [sp, #12]
    495c:	9102      	str	r1, [sp, #8]
    495e:	9201      	str	r2, [sp, #4]
    4960:	9300      	str	r3, [sp, #0]
    4962:	4a05      	ldr	r2, [pc, #20]	; (4978 <bt_conn_unref+0x50>)
    4964:	4b05      	ldr	r3, [pc, #20]	; (497c <bt_conn_unref+0x54>)
    4966:	4906      	ldr	r1, [pc, #24]	; (4980 <bt_conn_unref+0x58>)
    4968:	4806      	ldr	r0, [pc, #24]	; (4984 <bt_conn_unref+0x5c>)
    496a:	f7fc fb0f 	bl	f8c <printk>
}
    496e:	b007      	add	sp, #28
    4970:	bd30      	pop	{r4, r5, pc}
    4972:	bf00      	nop
    4974:	000153a9 	.word	0x000153a9
    4978:	000167ad 	.word	0x000167ad
    497c:	00016ca1 	.word	0x00016ca1
    4980:	000167b4 	.word	0x000167b4
    4984:	00016fc8 	.word	0x00016fc8

00004988 <conn_cleanup>:
{
    4988:	b538      	push	{r3, r4, r5, lr}
    498a:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    498c:	f100 0528 	add.w	r5, r0, #40	; 0x28
    4990:	2100      	movs	r1, #0
    4992:	4628      	mov	r0, r5
    4994:	f00e fe90 	bl	136b8 <net_buf_get>
    4998:	b950      	cbnz	r0, 49b0 <conn_cleanup+0x28>
	bt_conn_notify_tx(conn);
    499a:	4620      	mov	r0, r4
    499c:	f7ff fdf6 	bl	458c <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    49a0:	4620      	mov	r0, r4
    49a2:	f7ff fc77 	bl	4294 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    49a6:	4620      	mov	r0, r4
}
    49a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    49ac:	f7ff bfbc 	b.w	4928 <bt_conn_unref>
		net_buf_unref(buf);
    49b0:	f00e feac 	bl	1370c <net_buf_unref>
    49b4:	e7ec      	b.n	4990 <conn_cleanup+0x8>
	...

000049b8 <bt_conn_prepare_events>:
{
    49b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49ba:	b085      	sub	sp, #20
    49bc:	4606      	mov	r6, r0
    49be:	f00f ff2d 	bl	1481c <_impl_k_current_get>
	BT_DBG("");
    49c2:	4d2a      	ldr	r5, [pc, #168]	; (4a6c <bt_conn_prepare_events+0xb4>)
    49c4:	9001      	str	r0, [sp, #4]
    49c6:	4b2a      	ldr	r3, [pc, #168]	; (4a70 <bt_conn_prepare_events+0xb8>)
    49c8:	4a2a      	ldr	r2, [pc, #168]	; (4a74 <bt_conn_prepare_events+0xbc>)
    49ca:	492b      	ldr	r1, [pc, #172]	; (4a78 <bt_conn_prepare_events+0xc0>)
    49cc:	9502      	str	r5, [sp, #8]
    49ce:	9500      	str	r5, [sp, #0]
    49d0:	482a      	ldr	r0, [pc, #168]	; (4a7c <bt_conn_prepare_events+0xc4>)
    49d2:	f7fc fadb 	bl	f8c <printk>
	conn_change.signaled = 0;
    49d6:	4b2a      	ldr	r3, [pc, #168]	; (4a80 <bt_conn_prepare_events+0xc8>)
    49d8:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    49da:	2101      	movs	r1, #1
    49dc:	4630      	mov	r0, r6
	conn_change.signaled = 0;
    49de:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    49e0:	f010 fb59 	bl	15096 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    49e4:	4b27      	ldr	r3, [pc, #156]	; (4a84 <bt_conn_prepare_events+0xcc>)
    49e6:	f103 0040 	add.w	r0, r3, #64	; 0x40
    49ea:	f7ff fc4d 	bl	4288 <atomic_get>
    49ee:	461f      	mov	r7, r3
    49f0:	b910      	cbnz	r0, 49f8 <bt_conn_prepare_events+0x40>
			continue;
    49f2:	2001      	movs	r0, #1
}
    49f4:	b005      	add	sp, #20
    49f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    49f8:	7a5a      	ldrb	r2, [r3, #9]
    49fa:	b992      	cbnz	r2, 4a22 <bt_conn_prepare_events+0x6a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    49fc:	f3bf 8f5b 	dmb	ish
    4a00:	1d1a      	adds	r2, r3, #4
    4a02:	e852 1f00 	ldrex	r1, [r2]
    4a06:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    4a0a:	e842 0400 	strex	r4, r0, [r2]
    4a0e:	2c00      	cmp	r4, #0
    4a10:	d1f7      	bne.n	4a02 <bt_conn_prepare_events+0x4a>
    4a12:	f3bf 8f5b 	dmb	ish
    4a16:	064a      	lsls	r2, r1, #25
    4a18:	d503      	bpl.n	4a22 <bt_conn_prepare_events+0x6a>
			conn_cleanup(conn);
    4a1a:	4618      	mov	r0, r3
    4a1c:	f7ff ffb4 	bl	4988 <conn_cleanup>
    4a20:	e7e7      	b.n	49f2 <bt_conn_prepare_events+0x3a>
		if (conn->state != BT_CONN_CONNECTED) {
    4a22:	7a7c      	ldrb	r4, [r7, #9]
    4a24:	2c03      	cmp	r4, #3
    4a26:	d1e4      	bne.n	49f2 <bt_conn_prepare_events+0x3a>
    4a28:	f00f fef8 	bl	1481c <_impl_k_current_get>
		BT_DBG("Adding conn %p to poll list", conn);
    4a2c:	4b10      	ldr	r3, [pc, #64]	; (4a70 <bt_conn_prepare_events+0xb8>)
    4a2e:	9001      	str	r0, [sp, #4]
    4a30:	4a10      	ldr	r2, [pc, #64]	; (4a74 <bt_conn_prepare_events+0xbc>)
    4a32:	4911      	ldr	r1, [pc, #68]	; (4a78 <bt_conn_prepare_events+0xc0>)
    4a34:	9503      	str	r5, [sp, #12]
    4a36:	9702      	str	r7, [sp, #8]
    4a38:	9500      	str	r5, [sp, #0]
    4a3a:	4813      	ldr	r0, [pc, #76]	; (4a88 <bt_conn_prepare_events+0xd0>)
    4a3c:	f7fc faa6 	bl	f8c <printk>
		k_poll_event_init(&events[ev_count],
    4a40:	4b12      	ldr	r3, [pc, #72]	; (4a8c <bt_conn_prepare_events+0xd4>)
    4a42:	2200      	movs	r2, #0
    4a44:	2104      	movs	r1, #4
    4a46:	f106 0014 	add.w	r0, r6, #20
    4a4a:	f010 fb24 	bl	15096 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    4a4e:	2301      	movs	r3, #1
    4a50:	f886 3020 	strb.w	r3, [r6, #32]
		k_poll_event_init(&events[ev_count],
    4a54:	f106 0028 	add.w	r0, r6, #40	; 0x28
    4a58:	4b0d      	ldr	r3, [pc, #52]	; (4a90 <bt_conn_prepare_events+0xd8>)
    4a5a:	2200      	movs	r2, #0
    4a5c:	2104      	movs	r1, #4
    4a5e:	f010 fb1a 	bl	15096 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    4a62:	2302      	movs	r3, #2
    4a64:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    4a68:	4620      	mov	r0, r4
	return ev_count;
    4a6a:	e7c3      	b.n	49f4 <bt_conn_prepare_events+0x3c>
    4a6c:	000153a9 	.word	0x000153a9
    4a70:	00016c59 	.word	0x00016c59
    4a74:	000167ad 	.word	0x000167ad
    4a78:	000167b4 	.word	0x000167b4
    4a7c:	00016d26 	.word	0x00016d26
    4a80:	20003b90 	.word	0x20003b90
    4a84:	20000360 	.word	0x20000360
    4a88:	00016d3c 	.word	0x00016d3c
    4a8c:	20000378 	.word	0x20000378
    4a90:	20000388 	.word	0x20000388

00004a94 <bt_conn_set_state>:
{
    4a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a98:	4604      	mov	r4, r0
    4a9a:	b086      	sub	sp, #24
    4a9c:	460e      	mov	r6, r1
    4a9e:	f00f febd 	bl	1481c <_impl_k_current_get>
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    4aa2:	7a63      	ldrb	r3, [r4, #9]
    4aa4:	4f6d      	ldr	r7, [pc, #436]	; (4c5c <bt_conn_set_state+0x1c8>)
    4aa6:	9001      	str	r0, [sp, #4]
    4aa8:	2b04      	cmp	r3, #4
    4aaa:	bf96      	itet	ls
    4aac:	4a6c      	ldrls	r2, [pc, #432]	; (4c60 <bt_conn_set_state+0x1cc>)
    4aae:	4b6d      	ldrhi	r3, [pc, #436]	; (4c64 <bt_conn_set_state+0x1d0>)
    4ab0:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    4ab4:	9302      	str	r3, [sp, #8]
    4ab6:	2e04      	cmp	r6, #4
    4ab8:	bf96      	itet	ls
    4aba:	4a69      	ldrls	r2, [pc, #420]	; (4c60 <bt_conn_set_state+0x1cc>)
    4abc:	4a69      	ldrhi	r2, [pc, #420]	; (4c64 <bt_conn_set_state+0x1d0>)
    4abe:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    4ac2:	9203      	str	r2, [sp, #12]
    4ac4:	9704      	str	r7, [sp, #16]
    4ac6:	9700      	str	r7, [sp, #0]
    4ac8:	4b67      	ldr	r3, [pc, #412]	; (4c68 <bt_conn_set_state+0x1d4>)
    4aca:	4a68      	ldr	r2, [pc, #416]	; (4c6c <bt_conn_set_state+0x1d8>)
    4acc:	4968      	ldr	r1, [pc, #416]	; (4c70 <bt_conn_set_state+0x1dc>)
    4ace:	4869      	ldr	r0, [pc, #420]	; (4c74 <bt_conn_set_state+0x1e0>)
    4ad0:	f7fc fa5c 	bl	f8c <printk>
	if (conn->state == state) {
    4ad4:	7a65      	ldrb	r5, [r4, #9]
    4ad6:	42ae      	cmp	r6, r5
    4ad8:	46b8      	mov	r8, r7
    4ada:	d10a      	bne.n	4af2 <bt_conn_set_state+0x5e>
		BT_WARN("no transition");
    4adc:	9701      	str	r7, [sp, #4]
    4ade:	9700      	str	r7, [sp, #0]
    4ae0:	4b61      	ldr	r3, [pc, #388]	; (4c68 <bt_conn_set_state+0x1d4>)
    4ae2:	4a65      	ldr	r2, [pc, #404]	; (4c78 <bt_conn_set_state+0x1e4>)
    4ae4:	4962      	ldr	r1, [pc, #392]	; (4c70 <bt_conn_set_state+0x1dc>)
    4ae6:	4865      	ldr	r0, [pc, #404]	; (4c7c <bt_conn_set_state+0x1e8>)
    4ae8:	f7fc fa50 	bl	f8c <printk>
}
    4aec:	b006      	add	sp, #24
    4aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->state = state;
    4af2:	7266      	strb	r6, [r4, #9]
	switch (old_state) {
    4af4:	b195      	cbz	r5, 4b1c <bt_conn_set_state+0x88>
    4af6:	2d02      	cmp	r5, #2
    4af8:	d014      	beq.n	4b24 <bt_conn_set_state+0x90>
	switch (conn->state) {
    4afa:	7a63      	ldrb	r3, [r4, #9]
    4afc:	2b04      	cmp	r3, #4
    4afe:	f200 80a0 	bhi.w	4c42 <bt_conn_set_state+0x1ae>
    4b02:	a201      	add	r2, pc, #4	; (adr r2, 4b08 <bt_conn_set_state+0x74>)
    4b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4b08:	00004b6b 	.word	0x00004b6b
    4b0c:	00004aed 	.word	0x00004aed
    4b10:	00004c27 	.word	0x00004c27
    4b14:	00004b35 	.word	0x00004b35
    4b18:	00004aed 	.word	0x00004aed
		bt_conn_ref(conn);
    4b1c:	4620      	mov	r0, r4
    4b1e:	f7ff fe85 	bl	482c <bt_conn_ref>
		break;
    4b22:	e7ea      	b.n	4afa <bt_conn_set_state+0x66>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4b24:	78a3      	ldrb	r3, [r4, #2]
    4b26:	2b00      	cmp	r3, #0
    4b28:	d1e7      	bne.n	4afa <bt_conn_set_state+0x66>
			k_delayed_work_cancel(&conn->le.update_work);
    4b2a:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4b2e:	f010 f97b 	bl	14e28 <k_delayed_work_cancel>
    4b32:	e7e2      	b.n	4afa <bt_conn_set_state+0x66>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4b34:	78a3      	ldrb	r3, [r4, #2]
    4b36:	2b02      	cmp	r3, #2
    4b38:	d0d8      	beq.n	4aec <bt_conn_set_state+0x58>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    4b3a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4b3e:	f00f fbaf 	bl	142a0 <_impl_k_queue_init>
    4b42:	f104 0018 	add.w	r0, r4, #24
    4b46:	f00f fbab 	bl	142a0 <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4b4a:	2100      	movs	r1, #0
    4b4c:	484c      	ldr	r0, [pc, #304]	; (4c80 <bt_conn_set_state+0x1ec>)
    4b4e:	f010 fb45 	bl	151dc <_impl_k_poll_signal>
	list->head = NULL;
    4b52:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    4b54:	4620      	mov	r0, r4
    4b56:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    4b58:	63e3      	str	r3, [r4, #60]	; 0x3c
    4b5a:	f000 fc0b 	bl	5374 <bt_l2cap_connected>
		notify_connected(conn);
    4b5e:	4620      	mov	r0, r4
}
    4b60:	b006      	add	sp, #24
    4b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify_connected(conn);
    4b66:	f7ff bb7f 	b.w	4268 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4b6a:	78a3      	ldrb	r3, [r4, #2]
    4b6c:	2b02      	cmp	r3, #2
    4b6e:	d105      	bne.n	4b7c <bt_conn_set_state+0xe8>
			bt_conn_unref(conn);
    4b70:	4620      	mov	r0, r4
}
    4b72:	b006      	add	sp, #24
    4b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
    4b78:	f7ff bed6 	b.w	4928 <bt_conn_unref>
		if (old_state == BT_CONN_CONNECTED ||
    4b7c:	1eeb      	subs	r3, r5, #3
    4b7e:	2b01      	cmp	r3, #1
    4b80:	d844      	bhi.n	4c0c <bt_conn_set_state+0x178>
			bt_l2cap_disconnected(conn);
    4b82:	4620      	mov	r0, r4
    4b84:	f000 fc30 	bl	53e8 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    4b88:	4b3e      	ldr	r3, [pc, #248]	; (4c84 <bt_conn_set_state+0x1f0>)
    4b8a:	681d      	ldr	r5, [r3, #0]
    4b8c:	b9ed      	cbnz	r5, 4bca <bt_conn_set_state+0x136>
    4b8e:	4e3e      	ldr	r6, [pc, #248]	; (4c88 <bt_conn_set_state+0x1f4>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4b90:	4f3e      	ldr	r7, [pc, #248]	; (4c8c <bt_conn_set_state+0x1f8>)
	__asm__ volatile(
    4b92:	f04f 0320 	mov.w	r3, #32
    4b96:	f3ef 8111 	mrs	r1, BASEPRI
    4b9a:	f383 8811 	msr	BASEPRI, r3
    4b9e:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    4ba0:	b12b      	cbz	r3, 4bae <bt_conn_set_state+0x11a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4ba2:	6960      	ldr	r0, [r4, #20]
	return node->next;
    4ba4:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    4ba6:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4ba8:	4283      	cmp	r3, r0
	list->tail = node;
    4baa:	bf08      	it	eq
    4bac:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4bae:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    4bb2:	b18b      	cbz	r3, 4bd8 <bt_conn_set_state+0x144>
    4bb4:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    4bb6:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4bb8:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    4bba:	605d      	str	r5, [r3, #4]
	list->head = node;
    4bbc:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    4bbe:	b902      	cbnz	r2, 4bc2 <bt_conn_set_state+0x12e>
	list->tail = node;
    4bc0:	6073      	str	r3, [r6, #4]
    4bc2:	4638      	mov	r0, r7
    4bc4:	f00f fe39 	bl	1483a <_impl_k_sem_give>
    4bc8:	e7e3      	b.n	4b92 <bt_conn_set_state+0xfe>
		if (cb->disconnected) {
    4bca:	686b      	ldr	r3, [r5, #4]
    4bcc:	b113      	cbz	r3, 4bd4 <bt_conn_set_state+0x140>
			cb->disconnected(conn, conn->err);
    4bce:	7a21      	ldrb	r1, [r4, #8]
    4bd0:	4620      	mov	r0, r4
    4bd2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    4bd4:	692d      	ldr	r5, [r5, #16]
    4bd6:	e7d9      	b.n	4b8c <bt_conn_set_state+0xf8>
			if (conn->type == BT_CONN_TYPE_LE) {
    4bd8:	78a3      	ldrb	r3, [r4, #2]
    4bda:	b91b      	cbnz	r3, 4be4 <bt_conn_set_state+0x150>
				k_delayed_work_cancel(&conn->le.update_work);
    4bdc:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4be0:	f010 f922 	bl	14e28 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4be4:	f3bf 8f5b 	dmb	ish
    4be8:	3404      	adds	r4, #4
    4bea:	e854 3f00 	ldrex	r3, [r4]
    4bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4bf2:	e844 3200 	strex	r2, r3, [r4]
    4bf6:	2a00      	cmp	r2, #0
    4bf8:	d1f7      	bne.n	4bea <bt_conn_set_state+0x156>
    4bfa:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4bfe:	4820      	ldr	r0, [pc, #128]	; (4c80 <bt_conn_set_state+0x1ec>)
    4c00:	2100      	movs	r1, #0
}
    4c02:	b006      	add	sp, #24
    4c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4c08:	f010 bae8 	b.w	151dc <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    4c0c:	2d02      	cmp	r5, #2
    4c0e:	d103      	bne.n	4c18 <bt_conn_set_state+0x184>
			notify_connected(conn);
    4c10:	4620      	mov	r0, r4
    4c12:	f7ff fb29 	bl	4268 <notify_connected>
    4c16:	e7ab      	b.n	4b70 <bt_conn_set_state+0xdc>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    4c18:	2d01      	cmp	r5, #1
    4c1a:	f47f af67 	bne.w	4aec <bt_conn_set_state+0x58>
			if (conn->err) {
    4c1e:	7a23      	ldrb	r3, [r4, #8]
    4c20:	2b00      	cmp	r3, #0
    4c22:	d0a5      	beq.n	4b70 <bt_conn_set_state+0xdc>
    4c24:	e7f4      	b.n	4c10 <bt_conn_set_state+0x17c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4c26:	78a3      	ldrb	r3, [r4, #2]
    4c28:	2b00      	cmp	r3, #0
    4c2a:	f47f af5f 	bne.w	4aec <bt_conn_set_state+0x58>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    4c2e:	4818      	ldr	r0, [pc, #96]	; (4c90 <bt_conn_set_state+0x1fc>)
    4c30:	f640 32b8 	movw	r2, #3000	; 0xbb8
    4c34:	f104 0170 	add.w	r1, r4, #112	; 0x70
}
    4c38:	b006      	add	sp, #24
    4c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4c3e:	f010 b957 	b.w	14ef0 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    4c42:	f8cd 8008 	str.w	r8, [sp, #8]
    4c46:	9601      	str	r6, [sp, #4]
    4c48:	f8cd 8000 	str.w	r8, [sp]
    4c4c:	4b06      	ldr	r3, [pc, #24]	; (4c68 <bt_conn_set_state+0x1d4>)
    4c4e:	4a0a      	ldr	r2, [pc, #40]	; (4c78 <bt_conn_set_state+0x1e4>)
    4c50:	4907      	ldr	r1, [pc, #28]	; (4c70 <bt_conn_set_state+0x1dc>)
    4c52:	4810      	ldr	r0, [pc, #64]	; (4c94 <bt_conn_set_state+0x200>)
    4c54:	f7fc f99a 	bl	f8c <printk>
		break;
    4c58:	e748      	b.n	4aec <bt_conn_set_state+0x58>
    4c5a:	bf00      	nop
    4c5c:	000153a9 	.word	0x000153a9
    4c60:	00016bf4 	.word	0x00016bf4
    4c64:	00017042 	.word	0x00017042
    4c68:	00016c83 	.word	0x00016c83
    4c6c:	000167ad 	.word	0x000167ad
    4c70:	000167b4 	.word	0x000167b4
    4c74:	0001704c 	.word	0x0001704c
    4c78:	000167ef 	.word	0x000167ef
    4c7c:	0001706a 	.word	0x0001706a
    4c80:	20003b90 	.word	0x20003b90
    4c84:	2000034c 	.word	0x2000034c
    4c88:	200003f8 	.word	0x200003f8
    4c8c:	20003af4 	.word	0x20003af4
    4c90:	20001990 	.word	0x20001990
    4c94:	00017088 	.word	0x00017088

00004c98 <bt_conn_get_dst>:

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    4c98:	3044      	adds	r0, #68	; 0x44
    4c9a:	4770      	bx	lr

00004c9c <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    4c9c:	b570      	push	{r4, r5, r6, lr}
    4c9e:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    4ca0:	4608      	mov	r0, r1
{
    4ca2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    4ca4:	f7fd fba4 	bl	23f0 <bt_le_conn_params_valid>
    4ca8:	b908      	cbnz	r0, 4cae <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    4caa:	2400      	movs	r4, #0
    4cac:	e01c      	b.n	4ce8 <bt_conn_create_le+0x4c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4cae:	481d      	ldr	r0, [pc, #116]	; (4d24 <bt_conn_create_le+0x88>)
    4cb0:	f7ff faea 	bl	4288 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4cb4:	0583      	lsls	r3, r0, #22
    4cb6:	d4f8      	bmi.n	4caa <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    4cb8:	4630      	mov	r0, r6
    4cba:	f7ff fdff 	bl	48bc <bt_conn_lookup_addr_le>
	if (conn) {
    4cbe:	4604      	mov	r4, r0
    4cc0:	b1a0      	cbz	r0, 4cec <bt_conn_create_le+0x50>
		switch (conn->state) {
    4cc2:	7a43      	ldrb	r3, [r0, #9]
    4cc4:	2b01      	cmp	r3, #1
    4cc6:	d006      	beq.n	4cd6 <bt_conn_create_le+0x3a>
    4cc8:	d301      	bcc.n	4cce <bt_conn_create_le+0x32>
    4cca:	2b03      	cmp	r3, #3
    4ccc:	d90c      	bls.n	4ce8 <bt_conn_create_le+0x4c>
			bt_conn_unref(conn);
    4cce:	4620      	mov	r0, r4
    4cd0:	f7ff fe2a 	bl	4928 <bt_conn_unref>
    4cd4:	e7e9      	b.n	4caa <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    4cd6:	886b      	ldrh	r3, [r5, #2]
    4cd8:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    4cdc:	88ab      	ldrh	r3, [r5, #4]
    4cde:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4ce2:	88eb      	ldrh	r3, [r5, #6]
    4ce4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    4ce8:	4620      	mov	r0, r4
    4cea:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    4cec:	4630      	mov	r0, r6
    4cee:	f7ff fd51 	bl	4794 <bt_conn_add_le>
	if (!conn) {
    4cf2:	4604      	mov	r4, r0
    4cf4:	2800      	cmp	r0, #0
    4cf6:	d0f7      	beq.n	4ce8 <bt_conn_create_le+0x4c>
	memcpy(dst, src, sizeof(*dst));
    4cf8:	2207      	movs	r2, #7
    4cfa:	4631      	mov	r1, r6
    4cfc:	3052      	adds	r0, #82	; 0x52
    4cfe:	f7fc ff7d 	bl	1bfc <memcpy>
	conn->le.interval_max = param->interval_max;
    4d02:	886b      	ldrh	r3, [r5, #2]
    4d04:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4d08:	88ab      	ldrh	r3, [r5, #4]
    4d0a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4d0e:	88eb      	ldrh	r3, [r5, #6]
    4d10:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4d14:	4620      	mov	r0, r4
    4d16:	2101      	movs	r1, #1
    4d18:	f7ff febc 	bl	4a94 <bt_conn_set_state>
	bt_le_scan_update(true);
    4d1c:	2001      	movs	r0, #1
    4d1e:	f7fd fccb 	bl	26b8 <bt_le_scan_update>
	return conn;
    4d22:	e7e1      	b.n	4ce8 <bt_conn_create_le+0x4c>
    4d24:	20003ad8 	.word	0x20003ad8

00004d28 <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    4d28:	b570      	push	{r4, r5, r6, lr}
    4d2a:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    4d2c:	460d      	mov	r5, r1
    4d2e:	2900      	cmp	r1, #0
    4d30:	d13b      	bne.n	4daa <bt_le_set_auto_conn+0x82>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    4d32:	4630      	mov	r0, r6
    4d34:	f7ff fdc2 	bl	48bc <bt_conn_lookup_addr_le>
	if (!conn) {
    4d38:	4604      	mov	r4, r0
    4d3a:	b928      	cbnz	r0, 4d48 <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    4d3c:	4630      	mov	r0, r6
    4d3e:	f7ff fd29 	bl	4794 <bt_conn_add_le>
		if (!conn) {
    4d42:	4604      	mov	r4, r0
    4d44:	2800      	cmp	r0, #0
    4d46:	d051      	beq.n	4dec <bt_le_set_auto_conn+0xc4>
    4d48:	1d23      	adds	r3, r4, #4
			return -ENOMEM;
		}
	}

	if (param) {
    4d4a:	2d00      	cmp	r5, #0
    4d4c:	d035      	beq.n	4dba <bt_le_set_auto_conn+0x92>
	conn->le.interval_max = param->interval_max;
    4d4e:	886a      	ldrh	r2, [r5, #2]
    4d50:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4d54:	88aa      	ldrh	r2, [r5, #4]
    4d56:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4d5a:	88ea      	ldrh	r2, [r5, #6]
    4d5c:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4d60:	f3bf 8f5b 	dmb	ish
    4d64:	e853 2f00 	ldrex	r2, [r3]
    4d68:	f042 0101 	orr.w	r1, r2, #1
    4d6c:	e843 1000 	strex	r0, r1, [r3]
    4d70:	2800      	cmp	r0, #0
    4d72:	d1f7      	bne.n	4d64 <bt_le_set_auto_conn+0x3c>
    4d74:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    4d78:	07d1      	lsls	r1, r2, #31
    4d7a:	d402      	bmi.n	4d82 <bt_le_set_auto_conn+0x5a>
					     BT_CONN_AUTO_CONNECT)) {
			bt_conn_ref(conn);
    4d7c:	4620      	mov	r0, r4
    4d7e:	f7ff fd55 	bl	482c <bt_conn_ref>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    4d82:	7a63      	ldrb	r3, [r4, #9]
    4d84:	b963      	cbnz	r3, 4da0 <bt_le_set_auto_conn+0x78>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4d86:	481b      	ldr	r0, [pc, #108]	; (4df4 <bt_le_set_auto_conn+0xcc>)
    4d88:	f7ff fa7e 	bl	4288 <atomic_get>
    4d8c:	0783      	lsls	r3, r0, #30
    4d8e:	d507      	bpl.n	4da0 <bt_le_set_auto_conn+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    4d90:	b11d      	cbz	r5, 4d9a <bt_le_set_auto_conn+0x72>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4d92:	2101      	movs	r1, #1
    4d94:	4620      	mov	r0, r4
    4d96:	f7ff fe7d 	bl	4a94 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    4d9a:	2000      	movs	r0, #0
    4d9c:	f7fd fc8c 	bl	26b8 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    4da0:	4620      	mov	r0, r4
    4da2:	f7ff fdc1 	bl	4928 <bt_conn_unref>

	return 0;
    4da6:	2000      	movs	r0, #0
    4da8:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    4daa:	4608      	mov	r0, r1
    4dac:	f7fd fb20 	bl	23f0 <bt_le_conn_params_valid>
    4db0:	2800      	cmp	r0, #0
    4db2:	d1be      	bne.n	4d32 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    4db4:	f06f 0015 	mvn.w	r0, #21
    4db8:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4dba:	f3bf 8f5b 	dmb	ish
    4dbe:	e853 2f00 	ldrex	r2, [r3]
    4dc2:	f022 0101 	bic.w	r1, r2, #1
    4dc6:	e843 1000 	strex	r0, r1, [r3]
    4dca:	2800      	cmp	r0, #0
    4dcc:	d1f7      	bne.n	4dbe <bt_le_set_auto_conn+0x96>
    4dce:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    4dd2:	07d2      	lsls	r2, r2, #31
    4dd4:	d5d5      	bpl.n	4d82 <bt_le_set_auto_conn+0x5a>
			bt_conn_unref(conn);
    4dd6:	4620      	mov	r0, r4
    4dd8:	f7ff fda6 	bl	4928 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    4ddc:	7a63      	ldrb	r3, [r4, #9]
    4dde:	2b01      	cmp	r3, #1
    4de0:	d1cf      	bne.n	4d82 <bt_le_set_auto_conn+0x5a>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4de2:	4629      	mov	r1, r5
    4de4:	4620      	mov	r0, r4
    4de6:	f7ff fe55 	bl	4a94 <bt_conn_set_state>
    4dea:	e7ca      	b.n	4d82 <bt_le_set_auto_conn+0x5a>
			return -ENOMEM;
    4dec:	f06f 000b 	mvn.w	r0, #11
}
    4df0:	bd70      	pop	{r4, r5, r6, pc}
    4df2:	bf00      	nop
    4df4:	20003ad8 	.word	0x20003ad8

00004df8 <bt_conn_disconnect>:
{
    4df8:	b570      	push	{r4, r5, r6, lr}
    4dfa:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4dfc:	7881      	ldrb	r1, [r0, #2]
{
    4dfe:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4e00:	b911      	cbnz	r1, 4e08 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    4e02:	3044      	adds	r0, #68	; 0x44
    4e04:	f7ff ff90 	bl	4d28 <bt_le_set_auto_conn>
	switch (conn->state) {
    4e08:	7a63      	ldrb	r3, [r4, #9]
    4e0a:	3b01      	subs	r3, #1
    4e0c:	2b03      	cmp	r3, #3
    4e0e:	d803      	bhi.n	4e18 <bt_conn_disconnect+0x20>
    4e10:	e8df f003 	tbb	[pc, r3]
    4e14:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    4e18:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    4e1c:	4628      	mov	r0, r5
    4e1e:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4e20:	4620      	mov	r0, r4
		conn->err = reason;
    4e22:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4e24:	2100      	movs	r1, #0
    4e26:	f7ff fe35 	bl	4a94 <bt_conn_set_state>
		bt_le_scan_update(false);
    4e2a:	2000      	movs	r0, #0
    4e2c:	f7fd fc44 	bl	26b8 <bt_le_scan_update>
		return 0;
    4e30:	2500      	movs	r5, #0
    4e32:	e7f3      	b.n	4e1c <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    4e34:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4e38:	f00f fff6 	bl	14e28 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4e3c:	2100      	movs	r1, #0
    4e3e:	f242 000e 	movw	r0, #8206	; 0x200e
}
    4e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4e46:	f7fd bba9 	b.w	259c <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    4e4a:	2103      	movs	r1, #3
    4e4c:	f240 4006 	movw	r0, #1030	; 0x406
    4e50:	f7fd f952 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    4e54:	4605      	mov	r5, r0
    4e56:	b198      	cbz	r0, 4e80 <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    4e58:	2103      	movs	r1, #3
    4e5a:	3008      	adds	r0, #8
    4e5c:	f00e fc88 	bl	13770 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    4e60:	8823      	ldrh	r3, [r4, #0]
    4e62:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    4e64:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    4e66:	4629      	mov	r1, r5
    4e68:	f240 4006 	movw	r0, #1030	; 0x406
    4e6c:	f7fd fb96 	bl	259c <bt_hci_cmd_send>
	if (err) {
    4e70:	4605      	mov	r5, r0
    4e72:	2800      	cmp	r0, #0
    4e74:	d1d2      	bne.n	4e1c <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    4e76:	2104      	movs	r1, #4
    4e78:	4620      	mov	r0, r4
    4e7a:	f7ff fe0b 	bl	4a94 <bt_conn_set_state>
    4e7e:	e7cd      	b.n	4e1c <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    4e80:	f06f 0536 	mvn.w	r5, #54	; 0x36
    4e84:	e7ca      	b.n	4e1c <bt_conn_disconnect+0x24>

00004e86 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    4e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e88:	4607      	mov	r7, r0
    4e8a:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    4e8c:	f242 0013 	movw	r0, #8211	; 0x2013
    4e90:	210e      	movs	r1, #14
    4e92:	f7fd f931 	bl	20f8 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    4e96:	4606      	mov	r6, r0
    4e98:	b1c8      	cbz	r0, 4ece <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4e9a:	210e      	movs	r1, #14
    4e9c:	3008      	adds	r0, #8
    4e9e:	f00e fc67 	bl	13770 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    4ea2:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4ea4:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    4ea6:	220e      	movs	r2, #14
    4ea8:	f7fc fed4 	bl	1c54 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4eac:	883b      	ldrh	r3, [r7, #0]
    4eae:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    4eb0:	882b      	ldrh	r3, [r5, #0]
    4eb2:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    4eb4:	886b      	ldrh	r3, [r5, #2]
    4eb6:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    4eb8:	88ab      	ldrh	r3, [r5, #4]
    4eba:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    4ebc:	88eb      	ldrh	r3, [r5, #6]
    4ebe:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4ec0:	4631      	mov	r1, r6
    4ec2:	f242 0013 	movw	r0, #8211	; 0x2013
}
    4ec6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4eca:	f7fd bb67 	b.w	259c <bt_hci_cmd_send>
}
    4ece:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004ed4 <bt_conn_le_param_update>:
{
    4ed4:	b530      	push	{r4, r5, lr}
    4ed6:	460d      	mov	r5, r1
    4ed8:	b08b      	sub	sp, #44	; 0x2c
    4eda:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4edc:	f00f fc9e 	bl	1481c <_impl_k_current_get>
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    4ee0:	88ea      	ldrh	r2, [r5, #6]
    4ee2:	9207      	str	r2, [sp, #28]
    4ee4:	88aa      	ldrh	r2, [r5, #4]
    4ee6:	9206      	str	r2, [sp, #24]
    4ee8:	886a      	ldrh	r2, [r5, #2]
    4eea:	9205      	str	r2, [sp, #20]
    4eec:	882a      	ldrh	r2, [r5, #0]
    4eee:	4b21      	ldr	r3, [pc, #132]	; (4f74 <bt_conn_le_param_update+0xa0>)
    4ef0:	9204      	str	r2, [sp, #16]
    4ef2:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    4ef6:	9308      	str	r3, [sp, #32]
    4ef8:	9203      	str	r2, [sp, #12]
    4efa:	9001      	str	r0, [sp, #4]
    4efc:	9300      	str	r3, [sp, #0]
    4efe:	4a1e      	ldr	r2, [pc, #120]	; (4f78 <bt_conn_le_param_update+0xa4>)
    4f00:	4b1e      	ldr	r3, [pc, #120]	; (4f7c <bt_conn_le_param_update+0xa8>)
    4f02:	9402      	str	r4, [sp, #8]
    4f04:	491e      	ldr	r1, [pc, #120]	; (4f80 <bt_conn_le_param_update+0xac>)
    4f06:	481f      	ldr	r0, [pc, #124]	; (4f84 <bt_conn_le_param_update+0xb0>)
    4f08:	f7fc f840 	bl	f8c <printk>
	if (conn->le.interval >= param->interval_min &&
    4f0c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    4f10:	882a      	ldrh	r2, [r5, #0]
    4f12:	429a      	cmp	r2, r3
    4f14:	d80c      	bhi.n	4f30 <bt_conn_le_param_update+0x5c>
    4f16:	886a      	ldrh	r2, [r5, #2]
    4f18:	429a      	cmp	r2, r3
    4f1a:	d309      	bcc.n	4f30 <bt_conn_le_param_update+0x5c>
	    conn->le.interval <= param->interval_max &&
    4f1c:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    4f20:	88ab      	ldrh	r3, [r5, #4]
    4f22:	429a      	cmp	r2, r3
    4f24:	d104      	bne.n	4f30 <bt_conn_le_param_update+0x5c>
	    conn->le.latency == param->latency &&
    4f26:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    4f2a:	88eb      	ldrh	r3, [r5, #6]
    4f2c:	429a      	cmp	r2, r3
    4f2e:	d01c      	beq.n	4f6a <bt_conn_le_param_update+0x96>
	k_delayed_work_cancel(&conn->le.update_work);
    4f30:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4f34:	f00f ff78 	bl	14e28 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    4f38:	4b13      	ldr	r3, [pc, #76]	; (4f88 <bt_conn_le_param_update+0xb4>)
    4f3a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4f3e:	079a      	lsls	r2, r3, #30
    4f40:	d503      	bpl.n	4f4a <bt_conn_le_param_update+0x76>
    4f42:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    4f46:	079b      	lsls	r3, r3, #30
    4f48:	d401      	bmi.n	4f4e <bt_conn_le_param_update+0x7a>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    4f4a:	78e3      	ldrb	r3, [r4, #3]
    4f4c:	b933      	cbnz	r3, 4f5c <bt_conn_le_param_update+0x88>
		return bt_conn_le_conn_update(conn, param);
    4f4e:	4629      	mov	r1, r5
    4f50:	4620      	mov	r0, r4
}
    4f52:	b00b      	add	sp, #44	; 0x2c
    4f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    4f58:	f7ff bf95 	b.w	4e86 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    4f5c:	4629      	mov	r1, r5
    4f5e:	4620      	mov	r0, r4
}
    4f60:	b00b      	add	sp, #44	; 0x2c
    4f62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    4f66:	f000 bba7 	b.w	56b8 <bt_l2cap_update_conn_param>
}
    4f6a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4f6e:	b00b      	add	sp, #44	; 0x2c
    4f70:	bd30      	pop	{r4, r5, pc}
    4f72:	bf00      	nop
    4f74:	000153a9 	.word	0x000153a9
    4f78:	000167ad 	.word	0x000167ad
    4f7c:	00016caf 	.word	0x00016caf
    4f80:	000167b4 	.word	0x000167b4
    4f84:	00016cc7 	.word	0x00016cc7
    4f88:	20003a68 	.word	0x20003a68

00004f8c <le_conn_update>:
{
    4f8c:	4603      	mov	r3, r0
    4f8e:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4f90:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    4f94:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    4f96:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4f9a:	d105      	bne.n	4fa8 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    4f9c:	2113      	movs	r1, #19
    4f9e:	f7ff ff2b 	bl	4df8 <bt_conn_disconnect>
}
    4fa2:	b003      	add	sp, #12
    4fa4:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4fa8:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    4fac:	f8ad 2000 	strh.w	r2, [sp]
    4fb0:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    4fb4:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    4fb8:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4fba:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    4fbe:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    4fc2:	f8ad 2004 	strh.w	r2, [sp, #4]
    4fc6:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    4fca:	f7ff ff83 	bl	4ed4 <bt_conn_le_param_update>
    4fce:	e7e8      	b.n	4fa2 <le_conn_update+0x16>

00004fd0 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    4fd0:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    4fd2:	4b08      	ldr	r3, [pc, #32]	; (4ff4 <bt_conn_create_pdu+0x24>)
{
    4fd4:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    4fd6:	2800      	cmp	r0, #0
    4fd8:	bf08      	it	eq
    4fda:	4618      	moveq	r0, r3
    4fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4fe0:	f00e fb64 	bl	136ac <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    4fe4:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    4fe6:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    4fe8:	3008      	adds	r0, #8
    4fea:	f00e fb7e 	bl	136ea <net_buf_simple_reserve>

	return buf;
}
    4fee:	4620      	mov	r0, r4
    4ff0:	bd38      	pop	{r3, r4, r5, pc}
    4ff2:	bf00      	nop
    4ff4:	20003f34 	.word	0x20003f34

00004ff8 <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    4ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ffc:	4606      	mov	r6, r0
    4ffe:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    5000:	4816      	ldr	r0, [pc, #88]	; (505c <create_frag.isra.8+0x64>)
    5002:	2100      	movs	r1, #0
    5004:	f7ff ffe4 	bl	4fd0 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    5008:	7833      	ldrb	r3, [r6, #0]
    500a:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    500c:	4605      	mov	r5, r0
    500e:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    5012:	d005      	beq.n	5020 <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    5014:	f00e fb7a 	bl	1370c <net_buf_unref>
		return NULL;
    5018:	4635      	mov	r5, r6
}
    501a:	4628      	mov	r0, r5
    501c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    5020:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    5022:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    5026:	4e0e      	ldr	r6, [pc, #56]	; (5060 <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    5028:	4638      	mov	r0, r7
    502a:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    502e:	f00e fbe9 	bl	13804 <net_buf_simple_tailroom>
    5032:	4580      	cmp	r8, r0
    5034:	d20c      	bcs.n	5050 <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    5036:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    503a:	f854 1f08 	ldr.w	r1, [r4, #8]!
    503e:	4632      	mov	r2, r6
    5040:	4638      	mov	r0, r7
    5042:	f00e fb9b 	bl	1377c <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    5046:	4631      	mov	r1, r6
    5048:	4620      	mov	r0, r4
    504a:	f00e fbbf 	bl	137cc <net_buf_simple_pull>
    504e:	e7e4      	b.n	501a <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    5050:	4638      	mov	r0, r7
    5052:	f00e fbd7 	bl	13804 <net_buf_simple_tailroom>
    5056:	b286      	uxth	r6, r0
    5058:	e7ef      	b.n	503a <create_frag.isra.8+0x42>
    505a:	bf00      	nop
    505c:	20003f54 	.word	0x20003f54
    5060:	20003a68 	.word	0x20003a68

00005064 <bt_conn_process_tx>:
{
    5064:	b5f0      	push	{r4, r5, r6, r7, lr}
    5066:	b087      	sub	sp, #28
    5068:	4604      	mov	r4, r0
    506a:	f00f fbd7 	bl	1481c <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    506e:	4d45      	ldr	r5, [pc, #276]	; (5184 <bt_conn_process_tx+0x120>)
    5070:	9001      	str	r0, [sp, #4]
    5072:	4b45      	ldr	r3, [pc, #276]	; (5188 <bt_conn_process_tx+0x124>)
    5074:	9503      	str	r5, [sp, #12]
    5076:	9402      	str	r4, [sp, #8]
    5078:	9500      	str	r5, [sp, #0]
    507a:	4a44      	ldr	r2, [pc, #272]	; (518c <bt_conn_process_tx+0x128>)
    507c:	4944      	ldr	r1, [pc, #272]	; (5190 <bt_conn_process_tx+0x12c>)
    507e:	4845      	ldr	r0, [pc, #276]	; (5194 <bt_conn_process_tx+0x130>)
    5080:	f7fb ff84 	bl	f8c <printk>
	if (conn->state == BT_CONN_DISCONNECTED &&
    5084:	7a63      	ldrb	r3, [r4, #9]
    5086:	462e      	mov	r6, r5
    5088:	bb0b      	cbnz	r3, 50ce <bt_conn_process_tx+0x6a>
    508a:	f3bf 8f5b 	dmb	ish
    508e:	1d23      	adds	r3, r4, #4
    5090:	e853 2f00 	ldrex	r2, [r3]
    5094:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    5098:	e843 1000 	strex	r0, r1, [r3]
    509c:	2800      	cmp	r0, #0
    509e:	d1f7      	bne.n	5090 <bt_conn_process_tx+0x2c>
    50a0:	f3bf 8f5b 	dmb	ish
    50a4:	0653      	lsls	r3, r2, #25
    50a6:	d512      	bpl.n	50ce <bt_conn_process_tx+0x6a>
    50a8:	f00f fbb8 	bl	1481c <_impl_k_current_get>
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
    50ac:	8823      	ldrh	r3, [r4, #0]
    50ae:	9302      	str	r3, [sp, #8]
    50b0:	9001      	str	r0, [sp, #4]
    50b2:	9503      	str	r5, [sp, #12]
    50b4:	9500      	str	r5, [sp, #0]
    50b6:	4b34      	ldr	r3, [pc, #208]	; (5188 <bt_conn_process_tx+0x124>)
    50b8:	4a34      	ldr	r2, [pc, #208]	; (518c <bt_conn_process_tx+0x128>)
    50ba:	4935      	ldr	r1, [pc, #212]	; (5190 <bt_conn_process_tx+0x12c>)
    50bc:	4836      	ldr	r0, [pc, #216]	; (5198 <bt_conn_process_tx+0x134>)
    50be:	f7fb ff65 	bl	f8c <printk>
		conn_cleanup(conn);
    50c2:	4620      	mov	r0, r4
}
    50c4:	b007      	add	sp, #28
    50c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    50ca:	f7ff bc5d 	b.w	4988 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    50ce:	2100      	movs	r1, #0
    50d0:	f104 0028 	add.w	r0, r4, #40	; 0x28
    50d4:	f00e faf0 	bl	136b8 <net_buf_get>
	BT_ASSERT(buf);
    50d8:	4605      	mov	r5, r0
    50da:	b968      	cbnz	r0, 50f8 <bt_conn_process_tx+0x94>
    50dc:	9601      	str	r6, [sp, #4]
    50de:	9600      	str	r6, [sp, #0]
    50e0:	4b29      	ldr	r3, [pc, #164]	; (5188 <bt_conn_process_tx+0x124>)
    50e2:	4a2e      	ldr	r2, [pc, #184]	; (519c <bt_conn_process_tx+0x138>)
    50e4:	492a      	ldr	r1, [pc, #168]	; (5190 <bt_conn_process_tx+0x12c>)
    50e6:	482e      	ldr	r0, [pc, #184]	; (51a0 <bt_conn_process_tx+0x13c>)
    50e8:	f7fb ff50 	bl	f8c <printk>
    50ec:	4040      	eors	r0, r0
    50ee:	f380 8811 	msr	BASEPRI, r0
    50f2:	f04f 0004 	mov.w	r0, #4
    50f6:	df02      	svc	2
    50f8:	f00f fb90 	bl	1481c <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    50fc:	9605      	str	r6, [sp, #20]
    50fe:	89ab      	ldrh	r3, [r5, #12]
    5100:	9600      	str	r6, [sp, #0]
	return bt_dev.le.mtu;
    5102:	4e28      	ldr	r6, [pc, #160]	; (51a4 <bt_conn_process_tx+0x140>)
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    5104:	9304      	str	r3, [sp, #16]
    5106:	9001      	str	r0, [sp, #4]
    5108:	4a20      	ldr	r2, [pc, #128]	; (518c <bt_conn_process_tx+0x128>)
    510a:	4921      	ldr	r1, [pc, #132]	; (5190 <bt_conn_process_tx+0x12c>)
    510c:	9503      	str	r5, [sp, #12]
    510e:	9402      	str	r4, [sp, #8]
    5110:	4b25      	ldr	r3, [pc, #148]	; (51a8 <bt_conn_process_tx+0x144>)
    5112:	4826      	ldr	r0, [pc, #152]	; (51ac <bt_conn_process_tx+0x148>)
    5114:	f7fb ff3a 	bl	f8c <printk>
	if (buf->len <= conn_mtu(conn)) {
    5118:	89a9      	ldrh	r1, [r5, #12]
    511a:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    511e:	4291      	cmp	r1, r2
    5120:	d808      	bhi.n	5134 <bt_conn_process_tx+0xd0>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    5122:	2300      	movs	r3, #0
    5124:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    5126:	4629      	mov	r1, r5
    5128:	4620      	mov	r0, r4
    512a:	f7ff fa67 	bl	45fc <send_frag>
	if (!send_buf(conn, buf)) {
    512e:	b148      	cbz	r0, 5144 <bt_conn_process_tx+0xe0>
}
    5130:	b007      	add	sp, #28
    5132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5134:	f104 0709 	add.w	r7, r4, #9
	frag = create_frag(conn, buf);
    5138:	4629      	mov	r1, r5
    513a:	4638      	mov	r0, r7
    513c:	f7ff ff5c 	bl	4ff8 <create_frag.isra.8>
	if (!frag) {
    5140:	4601      	mov	r1, r0
    5142:	b928      	cbnz	r0, 5150 <bt_conn_process_tx+0xec>
		net_buf_unref(buf);
    5144:	4628      	mov	r0, r5
}
    5146:	b007      	add	sp, #28
    5148:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    514c:	f00e bade 	b.w	1370c <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    5150:	2301      	movs	r3, #1
    5152:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    5154:	4620      	mov	r0, r4
    5156:	f7ff fa51 	bl	45fc <send_frag>
    515a:	2800      	cmp	r0, #0
    515c:	d0f2      	beq.n	5144 <bt_conn_process_tx+0xe0>
	while (buf->len > conn_mtu(conn)) {
    515e:	89aa      	ldrh	r2, [r5, #12]
    5160:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    5164:	429a      	cmp	r2, r3
    5166:	d802      	bhi.n	516e <bt_conn_process_tx+0x10a>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    5168:	2300      	movs	r3, #0
    516a:	2201      	movs	r2, #1
    516c:	e7db      	b.n	5126 <bt_conn_process_tx+0xc2>
		frag = create_frag(conn, buf);
    516e:	4629      	mov	r1, r5
    5170:	4638      	mov	r0, r7
    5172:	f7ff ff41 	bl	4ff8 <create_frag.isra.8>
		if (!frag) {
    5176:	4601      	mov	r1, r0
    5178:	2800      	cmp	r0, #0
    517a:	d0e3      	beq.n	5144 <bt_conn_process_tx+0xe0>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    517c:	2301      	movs	r3, #1
    517e:	461a      	mov	r2, r3
    5180:	e7e8      	b.n	5154 <bt_conn_process_tx+0xf0>
    5182:	bf00      	nop
    5184:	000153a9 	.word	0x000153a9
    5188:	00016c70 	.word	0x00016c70
    518c:	000167ad 	.word	0x000167ad
    5190:	000167b4 	.word	0x000167b4
    5194:	00016d09 	.word	0x00016d09
    5198:	00016d6d 	.word	0x00016d6d
    519c:	00016765 	.word	0x00016765
    51a0:	00016961 	.word	0x00016961
    51a4:	20003a68 	.word	0x20003a68
    51a8:	00016c50 	.word	0x00016c50
    51ac:	00016da7 	.word	0x00016da7

000051b0 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    51b0:	4b03      	ldr	r3, [pc, #12]	; (51c0 <bt_conn_get_id+0x10>)
    51b2:	1ac0      	subs	r0, r0, r3
    51b4:	4b03      	ldr	r3, [pc, #12]	; (51c4 <bt_conn_get_id+0x14>)
    51b6:	10c0      	asrs	r0, r0, #3
    51b8:	4358      	muls	r0, r3
}
    51ba:	b2c0      	uxtb	r0, r0
    51bc:	4770      	bx	lr
    51be:	bf00      	nop
    51c0:	20000360 	.word	0x20000360
    51c4:	286bca1b 	.word	0x286bca1b

000051c8 <bt_conn_init>:
	parent->next = child;
    51c8:	4b12      	ldr	r3, [pc, #72]	; (5214 <bt_conn_init+0x4c>)
    51ca:	4a13      	ldr	r2, [pc, #76]	; (5218 <bt_conn_init+0x50>)
    51cc:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    51ce:	b510      	push	{r4, lr}
    51d0:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    51d2:	6859      	ldr	r1, [r3, #4]
    51d4:	b901      	cbnz	r1, 51d8 <bt_conn_init+0x10>
	list->tail = node;
    51d6:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    51d8:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    51da:	6092      	str	r2, [r2, #8]
	list->head = node;
    51dc:	4a0f      	ldr	r2, [pc, #60]	; (521c <bt_conn_init+0x54>)
    51de:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    51e0:	b901      	cbnz	r1, 51e4 <bt_conn_init+0x1c>
	list->tail = node;
    51e2:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    51e4:	f001 fb66 	bl	68b4 <bt_att_init>

	err = bt_smp_init();
    51e8:	f002 fa62 	bl	76b0 <bt_smp_init>
	if (err) {
    51ec:	4604      	mov	r4, r0
    51ee:	b970      	cbnz	r0, 520e <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    51f0:	f000 fa8a 	bl	5708 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    51f4:	480a      	ldr	r0, [pc, #40]	; (5220 <bt_conn_init+0x58>)
    51f6:	f7ff f847 	bl	4288 <atomic_get>
    51fa:	b140      	cbz	r0, 520e <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    51fc:	4809      	ldr	r0, [pc, #36]	; (5224 <bt_conn_init+0x5c>)
    51fe:	f7ff f843 	bl	4288 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    5202:	07c3      	lsls	r3, r0, #31
    5204:	d503      	bpl.n	520e <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5206:	2101      	movs	r1, #1
    5208:	4807      	ldr	r0, [pc, #28]	; (5228 <bt_conn_init+0x60>)
    520a:	f7ff fc43 	bl	4a94 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    520e:	4620      	mov	r0, r4
    5210:	bd10      	pop	{r4, pc}
    5212:	bf00      	nop
    5214:	200003f8 	.word	0x200003f8
    5218:	20000350 	.word	0x20000350
    521c:	20000358 	.word	0x20000358
    5220:	200003a0 	.word	0x200003a0
    5224:	20000364 	.word	0x20000364
    5228:	20000360 	.word	0x20000360

0000522c <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    522c:	4770      	bx	lr
	...

00005230 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    5230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    5232:	4a0b      	ldr	r2, [pc, #44]	; (5260 <l2cap_accept+0x30>)
    5234:	6813      	ldr	r3, [r2, #0]
    5236:	b933      	cbnz	r3, 5246 <l2cap_accept+0x16>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    5238:	480a      	ldr	r0, [pc, #40]	; (5264 <l2cap_accept+0x34>)
    523a:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    523c:	600a      	str	r2, [r1, #0]

		return 0;
    523e:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    5240:	b005      	add	sp, #20
    5242:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
    5246:	4b08      	ldr	r3, [pc, #32]	; (5268 <l2cap_accept+0x38>)
    5248:	9302      	str	r3, [sp, #8]
    524a:	9001      	str	r0, [sp, #4]
    524c:	9300      	str	r3, [sp, #0]
    524e:	4a07      	ldr	r2, [pc, #28]	; (526c <l2cap_accept+0x3c>)
    5250:	4b07      	ldr	r3, [pc, #28]	; (5270 <l2cap_accept+0x40>)
    5252:	4908      	ldr	r1, [pc, #32]	; (5274 <l2cap_accept+0x44>)
    5254:	4808      	ldr	r0, [pc, #32]	; (5278 <l2cap_accept+0x48>)
    5256:	f7fb fe99 	bl	f8c <printk>
	return -ENOMEM;
    525a:	f06f 000b 	mvn.w	r0, #11
    525e:	e7ef      	b.n	5240 <l2cap_accept+0x10>
    5260:	20000400 	.word	0x20000400
    5264:	20003bac 	.word	0x20003bac
    5268:	000153a9 	.word	0x000153a9
    526c:	00016765 	.word	0x00016765
    5270:	000171aa 	.word	0x000171aa
    5274:	000167b4 	.word	0x000167b4
    5278:	00017219 	.word	0x00017219

0000527c <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    527e:	4607      	mov	r7, r0
    5280:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5282:	2000      	movs	r0, #0
    5284:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    5286:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5288:	f7ff fea2 	bl	4fd0 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    528c:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    528e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5290:	3008      	adds	r0, #8
    5292:	f00e fa6d 	bl	13770 <net_buf_simple_add>
	hdr->code = code;
    5296:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    5298:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    529a:	8045      	strh	r5, [r0, #2]
}
    529c:	4620      	mov	r0, r4
    529e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000052a0 <l2cap_connected>:
    52a0:	4770      	bx	lr
	...

000052a4 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    52a4:	2300      	movs	r3, #0
    52a6:	6083      	str	r3, [r0, #8]
    52a8:	4b05      	ldr	r3, [pc, #20]	; (52c0 <bt_l2cap_le_fixed_chan_register+0x1c>)
    52aa:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    52ac:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    52b0:	b911      	cbnz	r1, 52b8 <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    52b2:	605a      	str	r2, [r3, #4]
	list->head = node;
    52b4:	601a      	str	r2, [r3, #0]
    52b6:	4770      	bx	lr
	parent->next = child;
    52b8:	600a      	str	r2, [r1, #0]
	list->tail = node;
    52ba:	605a      	str	r2, [r3, #4]
    52bc:	4770      	bx	lr
    52be:	bf00      	nop
    52c0:	20000498 	.word	0x20000498

000052c4 <bt_l2cap_chan_remove>:
{
    52c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    52c6:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    52c8:	b113      	cbz	r3, 52d0 <bt_l2cap_chan_remove+0xc>
    52ca:	3b08      	subs	r3, #8
    52cc:	2200      	movs	r2, #0
    52ce:	b903      	cbnz	r3, 52d2 <bt_l2cap_chan_remove+0xe>
    52d0:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    52d2:	428b      	cmp	r3, r1
    52d4:	f103 0408 	add.w	r4, r3, #8
    52d8:	d10f      	bne.n	52fa <bt_l2cap_chan_remove+0x36>
    52da:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    52dc:	b93a      	cbnz	r2, 52ee <bt_l2cap_chan_remove+0x2a>
    52de:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    52e0:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    52e2:	4294      	cmp	r4, r2
    52e4:	d100      	bne.n	52e8 <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    52e6:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    52e8:	2200      	movs	r2, #0
    52ea:	609a      	str	r2, [r3, #8]
    52ec:	bd10      	pop	{r4, pc}
    52ee:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    52f0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    52f2:	428c      	cmp	r4, r1
	list->tail = node;
    52f4:	bf08      	it	eq
    52f6:	63c2      	streq	r2, [r0, #60]	; 0x3c
    52f8:	e7f6      	b.n	52e8 <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    52fa:	4622      	mov	r2, r4
    52fc:	2c00      	cmp	r4, #0
    52fe:	d0e7      	beq.n	52d0 <bt_l2cap_chan_remove+0xc>
	return node->next;
    5300:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5302:	2b00      	cmp	r3, #0
    5304:	d0e4      	beq.n	52d0 <bt_l2cap_chan_remove+0xc>
    5306:	3b08      	subs	r3, #8
    5308:	e7e1      	b.n	52ce <bt_l2cap_chan_remove+0xa>

0000530a <bt_l2cap_chan_del>:
	if (!chan->conn) {
    530a:	6803      	ldr	r3, [r0, #0]
{
    530c:	b510      	push	{r4, lr}
    530e:	4604      	mov	r4, r0
	if (!chan->conn) {
    5310:	b12b      	cbz	r3, 531e <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    5312:	6843      	ldr	r3, [r0, #4]
    5314:	685b      	ldr	r3, [r3, #4]
    5316:	b103      	cbz	r3, 531a <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    5318:	4798      	blx	r3
	chan->conn = NULL;
    531a:	2300      	movs	r3, #0
    531c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    531e:	68e3      	ldr	r3, [r4, #12]
    5320:	b11b      	cbz	r3, 532a <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    5322:	4620      	mov	r0, r4
}
    5324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    5328:	4718      	bx	r3
    532a:	bd10      	pop	{r4, pc}

0000532c <l2cap_rtx_timeout>:
{
    532c:	b530      	push	{r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    532e:	4b0c      	ldr	r3, [pc, #48]	; (5360 <l2cap_rtx_timeout+0x34>)
    5330:	4a0c      	ldr	r2, [pc, #48]	; (5364 <l2cap_rtx_timeout+0x38>)
    5332:	490d      	ldr	r1, [pc, #52]	; (5368 <l2cap_rtx_timeout+0x3c>)
{
    5334:	b085      	sub	sp, #20
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    5336:	f1a0 0410 	sub.w	r4, r0, #16
{
    533a:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    533c:	9302      	str	r3, [sp, #8]
    533e:	e88d 0018 	stmia.w	sp, {r3, r4}
    5342:	480a      	ldr	r0, [pc, #40]	; (536c <l2cap_rtx_timeout+0x40>)
    5344:	4b0a      	ldr	r3, [pc, #40]	; (5370 <l2cap_rtx_timeout+0x44>)
    5346:	f7fb fe21 	bl	f8c <printk>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    534a:	f855 0c10 	ldr.w	r0, [r5, #-16]
    534e:	4621      	mov	r1, r4
    5350:	f7ff ffb8 	bl	52c4 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    5354:	4620      	mov	r0, r4
}
    5356:	b005      	add	sp, #20
    5358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    535c:	f7ff bfd5 	b.w	530a <bt_l2cap_chan_del>
    5360:	000153a9 	.word	0x000153a9
    5364:	00016765 	.word	0x00016765
    5368:	000167b4 	.word	0x000167b4
    536c:	0001736d 	.word	0x0001736d
    5370:	00017154 	.word	0x00017154

00005374 <bt_l2cap_connected>:
{
    5374:	4b1a      	ldr	r3, [pc, #104]	; (53e0 <bt_l2cap_connected+0x6c>)
    5376:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    537a:	681c      	ldr	r4, [r3, #0]
    537c:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    537e:	b12c      	cbz	r4, 538c <bt_l2cap_connected+0x18>
	parent->next = child;
    5380:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    5382:	f8df 8060 	ldr.w	r8, [pc, #96]	; 53e4 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5386:	3c08      	subs	r4, #8
    5388:	46b9      	mov	r9, r7
    538a:	b914      	cbnz	r4, 5392 <bt_l2cap_connected+0x1e>
}
    538c:	b003      	add	sp, #12
    538e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    5392:	6863      	ldr	r3, [r4, #4]
    5394:	a901      	add	r1, sp, #4
    5396:	4630      	mov	r0, r6
    5398:	4798      	blx	r3
    539a:	2800      	cmp	r0, #0
    539c:	db18      	blt.n	53d0 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    539e:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    53a0:	8823      	ldrh	r3, [r4, #0]
    53a2:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    53a4:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    53a8:	4641      	mov	r1, r8
    53aa:	f105 0010 	add.w	r0, r5, #16
    53ae:	f00f fd2b 	bl	14e08 <k_delayed_work_init>
    53b2:	60af      	str	r7, [r5, #8]
    53b4:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	sys_slist_append(&conn->channels, &chan->node);
    53b6:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    53ba:	b972      	cbnz	r2, 53da <bt_l2cap_connected+0x66>
	list->tail = node;
    53bc:	63f3      	str	r3, [r6, #60]	; 0x3c
	list->head = node;
    53be:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    53c0:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    53c2:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    53c4:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    53c6:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    53ca:	681b      	ldr	r3, [r3, #0]
    53cc:	b103      	cbz	r3, 53d0 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    53ce:	4798      	blx	r3
	return node->next;
    53d0:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    53d2:	2c00      	cmp	r4, #0
    53d4:	d0da      	beq.n	538c <bt_l2cap_connected+0x18>
    53d6:	3c08      	subs	r4, #8
    53d8:	e7d7      	b.n	538a <bt_l2cap_connected+0x16>
	parent->next = child;
    53da:	6013      	str	r3, [r2, #0]
	list->tail = node;
    53dc:	63f3      	str	r3, [r6, #60]	; 0x3c
    53de:	e7ef      	b.n	53c0 <bt_l2cap_connected+0x4c>
    53e0:	20000498 	.word	0x20000498
    53e4:	0000532d 	.word	0x0000532d

000053e8 <bt_l2cap_disconnected>:
{
    53e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    53ea:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    53ec:	b1a3      	cbz	r3, 5418 <bt_l2cap_disconnected+0x30>
    53ee:	f1b3 0008 	subs.w	r0, r3, #8
    53f2:	d10a      	bne.n	540a <bt_l2cap_disconnected+0x22>
    53f4:	bd10      	pop	{r4, pc}
    53f6:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    53f8:	f7ff ff87 	bl	530a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    53fc:	b164      	cbz	r4, 5418 <bt_l2cap_disconnected+0x30>
	return node->next;
    53fe:	68a3      	ldr	r3, [r4, #8]
    5400:	b103      	cbz	r3, 5404 <bt_l2cap_disconnected+0x1c>
    5402:	3b08      	subs	r3, #8
{
    5404:	4620      	mov	r0, r4
    5406:	461c      	mov	r4, r3
    5408:	e7f6      	b.n	53f8 <bt_l2cap_disconnected+0x10>
    540a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    540c:	2c00      	cmp	r4, #0
    540e:	d1f2      	bne.n	53f6 <bt_l2cap_disconnected+0xe>
}
    5410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    5414:	f7ff bf79 	b.w	530a <bt_l2cap_chan_del>
    5418:	bd10      	pop	{r4, pc}

0000541a <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    541a:	3104      	adds	r1, #4
    541c:	f7ff bdd8 	b.w	4fd0 <bt_conn_create_pdu>

00005420 <bt_l2cap_send_cb>:
{
    5420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5422:	4614      	mov	r4, r2
    5424:	4605      	mov	r5, r0
    5426:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    5428:	f102 0008 	add.w	r0, r2, #8
    542c:	2104      	movs	r1, #4
{
    542e:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    5430:	f00e f9c4 	bl	137bc <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5434:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    5436:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5438:	3904      	subs	r1, #4
    543a:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    543c:	4632      	mov	r2, r6
    543e:	4621      	mov	r1, r4
    5440:	4628      	mov	r0, r5
}
    5442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    5446:	f7ff b863 	b.w	4510 <bt_conn_send_cb>
	...

0000544c <l2cap_recv>:
{
    544c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    544e:	898b      	ldrh	r3, [r1, #12]
    5450:	2b03      	cmp	r3, #3
{
    5452:	b087      	sub	sp, #28
    5454:	4607      	mov	r7, r0
    5456:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    5458:	d809      	bhi.n	546e <l2cap_recv+0x22>
		BT_ERR("Too small L2CAP signaling PDU");
    545a:	4b5a      	ldr	r3, [pc, #360]	; (55c4 <l2cap_recv+0x178>)
    545c:	9301      	str	r3, [sp, #4]
    545e:	9300      	str	r3, [sp, #0]
    5460:	4a59      	ldr	r2, [pc, #356]	; (55c8 <l2cap_recv+0x17c>)
    5462:	4b5a      	ldr	r3, [pc, #360]	; (55cc <l2cap_recv+0x180>)
    5464:	495a      	ldr	r1, [pc, #360]	; (55d0 <l2cap_recv+0x184>)
    5466:	485b      	ldr	r0, [pc, #364]	; (55d4 <l2cap_recv+0x188>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    5468:	f7fb fd90 	bl	f8c <printk>
		return;
    546c:	e014      	b.n	5498 <l2cap_recv+0x4c>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    546e:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5470:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    5472:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    5476:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    5478:	f00e f9a8 	bl	137cc <net_buf_simple_pull>
	if (buf->len != len) {
    547c:	89aa      	ldrh	r2, [r5, #12]
    547e:	4296      	cmp	r6, r2
    5480:	d00c      	beq.n	549c <l2cap_recv+0x50>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    5482:	4b50      	ldr	r3, [pc, #320]	; (55c4 <l2cap_recv+0x178>)
    5484:	9303      	str	r3, [sp, #12]
    5486:	9201      	str	r2, [sp, #4]
    5488:	9300      	str	r3, [sp, #0]
    548a:	9602      	str	r6, [sp, #8]
    548c:	4b4f      	ldr	r3, [pc, #316]	; (55cc <l2cap_recv+0x180>)
    548e:	4a4e      	ldr	r2, [pc, #312]	; (55c8 <l2cap_recv+0x17c>)
    5490:	494f      	ldr	r1, [pc, #316]	; (55d0 <l2cap_recv+0x184>)
    5492:	4851      	ldr	r0, [pc, #324]	; (55d8 <l2cap_recv+0x18c>)
    5494:	f7fb fd7a 	bl	f8c <printk>
}
    5498:	b007      	add	sp, #28
    549a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    549c:	7861      	ldrb	r1, [r4, #1]
    549e:	b939      	cbnz	r1, 54b0 <l2cap_recv+0x64>
		BT_ERR("Invalid ident value in L2CAP PDU");
    54a0:	4b48      	ldr	r3, [pc, #288]	; (55c4 <l2cap_recv+0x178>)
    54a2:	9301      	str	r3, [sp, #4]
    54a4:	9300      	str	r3, [sp, #0]
    54a6:	4a48      	ldr	r2, [pc, #288]	; (55c8 <l2cap_recv+0x17c>)
    54a8:	4b48      	ldr	r3, [pc, #288]	; (55cc <l2cap_recv+0x180>)
    54aa:	4949      	ldr	r1, [pc, #292]	; (55d0 <l2cap_recv+0x184>)
    54ac:	484b      	ldr	r0, [pc, #300]	; (55dc <l2cap_recv+0x190>)
    54ae:	e7db      	b.n	5468 <l2cap_recv+0x1c>
	switch (hdr->code) {
    54b0:	7823      	ldrb	r3, [r4, #0]
    54b2:	2b12      	cmp	r3, #18
    54b4:	d029      	beq.n	550a <l2cap_recv+0xbe>
    54b6:	2b13      	cmp	r3, #19
    54b8:	d01d      	beq.n	54f6 <l2cap_recv+0xaa>
    54ba:	2b01      	cmp	r3, #1
    54bc:	d0ec      	beq.n	5498 <l2cap_recv+0x4c>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    54be:	4a41      	ldr	r2, [pc, #260]	; (55c4 <l2cap_recv+0x178>)
    54c0:	9202      	str	r2, [sp, #8]
    54c2:	e88d 000c 	stmia.w	sp, {r2, r3}
    54c6:	4942      	ldr	r1, [pc, #264]	; (55d0 <l2cap_recv+0x184>)
    54c8:	4b40      	ldr	r3, [pc, #256]	; (55cc <l2cap_recv+0x180>)
    54ca:	4a45      	ldr	r2, [pc, #276]	; (55e0 <l2cap_recv+0x194>)
    54cc:	4845      	ldr	r0, [pc, #276]	; (55e4 <l2cap_recv+0x198>)
    54ce:	f7fb fd5d 	bl	f8c <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    54d2:	2202      	movs	r2, #2
    54d4:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    54d6:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    54d8:	2001      	movs	r0, #1
    54da:	f7ff fecf 	bl	527c <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    54de:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    54e0:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    54e2:	3008      	adds	r0, #8
    54e4:	f00e f944 	bl	13770 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    54e8:	2300      	movs	r3, #0
    54ea:	7003      	strb	r3, [r0, #0]
    54ec:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    54ee:	4622      	mov	r2, r4
    54f0:	2105      	movs	r1, #5
    54f2:	4628      	mov	r0, r5
    54f4:	e025      	b.n	5542 <l2cap_recv+0xf6>
	if (buf->len < sizeof(*rsp)) {
    54f6:	2e01      	cmp	r6, #1
    54f8:	d8ce      	bhi.n	5498 <l2cap_recv+0x4c>
		BT_ERR("Too small LE conn param rsp");
    54fa:	4b32      	ldr	r3, [pc, #200]	; (55c4 <l2cap_recv+0x178>)
    54fc:	9301      	str	r3, [sp, #4]
    54fe:	9300      	str	r3, [sp, #0]
    5500:	4a31      	ldr	r2, [pc, #196]	; (55c8 <l2cap_recv+0x17c>)
    5502:	4b39      	ldr	r3, [pc, #228]	; (55e8 <l2cap_recv+0x19c>)
    5504:	4932      	ldr	r1, [pc, #200]	; (55d0 <l2cap_recv+0x184>)
    5506:	4839      	ldr	r0, [pc, #228]	; (55ec <l2cap_recv+0x1a0>)
    5508:	e7ae      	b.n	5468 <l2cap_recv+0x1c>
	if (buf->len < sizeof(*req)) {
    550a:	2e07      	cmp	r6, #7
    550c:	d807      	bhi.n	551e <l2cap_recv+0xd2>
		BT_ERR("Too small LE conn update param req");
    550e:	4b2d      	ldr	r3, [pc, #180]	; (55c4 <l2cap_recv+0x178>)
    5510:	9301      	str	r3, [sp, #4]
    5512:	9300      	str	r3, [sp, #0]
    5514:	4a2c      	ldr	r2, [pc, #176]	; (55c8 <l2cap_recv+0x17c>)
    5516:	4b36      	ldr	r3, [pc, #216]	; (55f0 <l2cap_recv+0x1a4>)
    5518:	492d      	ldr	r1, [pc, #180]	; (55d0 <l2cap_recv+0x184>)
    551a:	4836      	ldr	r0, [pc, #216]	; (55f4 <l2cap_recv+0x1a8>)
    551c:	e7a4      	b.n	5468 <l2cap_recv+0x1c>
    551e:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    5520:	78e6      	ldrb	r6, [r4, #3]
    5522:	b18e      	cbz	r6, 5548 <l2cap_recv+0xfc>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5524:	2202      	movs	r2, #2
    5526:	2001      	movs	r0, #1
    5528:	f7ff fea8 	bl	527c <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    552c:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    552e:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    5530:	3008      	adds	r0, #8
    5532:	f00e f91d 	bl	13770 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    5536:	2300      	movs	r3, #0
    5538:	7003      	strb	r3, [r0, #0]
    553a:	7043      	strb	r3, [r0, #1]
    553c:	462a      	mov	r2, r5
    553e:	2105      	movs	r1, #5
    5540:	4620      	mov	r0, r4
    5542:	f7ff ff6d 	bl	5420 <bt_l2cap_send_cb>
    5546:	e7a7      	b.n	5498 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    5548:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    554a:	7858      	ldrb	r0, [r3, #1]
    554c:	781a      	ldrb	r2, [r3, #0]
    554e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    5552:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    5556:	78d8      	ldrb	r0, [r3, #3]
    5558:	789a      	ldrb	r2, [r3, #2]
    555a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    555e:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    5562:	7958      	ldrb	r0, [r3, #5]
    5564:	791a      	ldrb	r2, [r3, #4]
    5566:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    556a:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    556e:	799a      	ldrb	r2, [r3, #6]
    5570:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5572:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    5574:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5578:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    557a:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    557e:	f7ff fe7d 	bl	527c <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    5582:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5584:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    5586:	4620      	mov	r0, r4
    5588:	f7fe fea8 	bl	42dc <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    558c:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    558e:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    5590:	f107 0008 	add.w	r0, r7, #8
    5594:	f00e f8ec 	bl	13770 <net_buf_simple_add>
	if (accepted) {
    5598:	b17d      	cbz	r5, 55ba <l2cap_recv+0x16e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    559a:	7006      	strb	r6, [r0, #0]
    559c:	7046      	strb	r6, [r0, #1]
    559e:	2300      	movs	r3, #0
    55a0:	463a      	mov	r2, r7
    55a2:	2105      	movs	r1, #5
    55a4:	4620      	mov	r0, r4
    55a6:	f7ff ff3b 	bl	5420 <bt_l2cap_send_cb>
	if (accepted) {
    55aa:	2d00      	cmp	r5, #0
    55ac:	f43f af74 	beq.w	5498 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
    55b0:	a904      	add	r1, sp, #16
    55b2:	4620      	mov	r0, r4
    55b4:	f7ff fc67 	bl	4e86 <bt_conn_le_conn_update>
    55b8:	e76e      	b.n	5498 <l2cap_recv+0x4c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    55ba:	2301      	movs	r3, #1
    55bc:	7003      	strb	r3, [r0, #0]
    55be:	7045      	strb	r5, [r0, #1]
    55c0:	e7ed      	b.n	559e <l2cap_recv+0x152>
    55c2:	bf00      	nop
    55c4:	000153a9 	.word	0x000153a9
    55c8:	00016765 	.word	0x00016765
    55cc:	00017191 	.word	0x00017191
    55d0:	000167b4 	.word	0x000167b4
    55d4:	00017250 	.word	0x00017250
    55d8:	0001727e 	.word	0x0001727e
    55dc:	000172af 	.word	0x000172af
    55e0:	000167ef 	.word	0x000167ef
    55e4:	0001733f 	.word	0x0001733f
    55e8:	00017166 	.word	0x00017166
    55ec:	000172e0 	.word	0x000172e0
    55f0:	00017178 	.word	0x00017178
    55f4:	0001730c 	.word	0x0001730c

000055f8 <bt_l2cap_le_lookup_tx_cid>:
{
    55f8:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    55fa:	b100      	cbz	r0, 55fe <bt_l2cap_le_lookup_tx_cid+0x6>
    55fc:	3808      	subs	r0, #8
    55fe:	b900      	cbnz	r0, 5602 <bt_l2cap_le_lookup_tx_cid+0xa>
}
    5600:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    5602:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    5606:	428b      	cmp	r3, r1
    5608:	d0fa      	beq.n	5600 <bt_l2cap_le_lookup_tx_cid+0x8>
    560a:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    560c:	2000      	movs	r0, #0
    560e:	2b00      	cmp	r3, #0
    5610:	d0f6      	beq.n	5600 <bt_l2cap_le_lookup_tx_cid+0x8>
    5612:	f1a3 0008 	sub.w	r0, r3, #8
    5616:	e7f2      	b.n	55fe <bt_l2cap_le_lookup_tx_cid+0x6>

00005618 <bt_l2cap_le_lookup_rx_cid>:
{
    5618:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    561a:	b100      	cbz	r0, 561e <bt_l2cap_le_lookup_rx_cid+0x6>
    561c:	3808      	subs	r0, #8
    561e:	b900      	cbnz	r0, 5622 <bt_l2cap_le_lookup_rx_cid+0xa>
}
    5620:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    5622:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    5624:	428b      	cmp	r3, r1
    5626:	d0fb      	beq.n	5620 <bt_l2cap_le_lookup_rx_cid+0x8>
    5628:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    562a:	2000      	movs	r0, #0
    562c:	2b00      	cmp	r3, #0
    562e:	d0f7      	beq.n	5620 <bt_l2cap_le_lookup_rx_cid+0x8>
    5630:	f1a3 0008 	sub.w	r0, r3, #8
    5634:	e7f3      	b.n	561e <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00005638 <bt_l2cap_recv>:
{
    5638:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    563a:	898b      	ldrh	r3, [r1, #12]
    563c:	2b03      	cmp	r3, #3
{
    563e:	4606      	mov	r6, r0
    5640:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    5642:	d80e      	bhi.n	5662 <bt_l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP PDU received");
    5644:	4b15      	ldr	r3, [pc, #84]	; (569c <bt_l2cap_recv+0x64>)
    5646:	9301      	str	r3, [sp, #4]
    5648:	9300      	str	r3, [sp, #0]
    564a:	4a15      	ldr	r2, [pc, #84]	; (56a0 <bt_l2cap_recv+0x68>)
    564c:	4b15      	ldr	r3, [pc, #84]	; (56a4 <bt_l2cap_recv+0x6c>)
    564e:	4916      	ldr	r1, [pc, #88]	; (56a8 <bt_l2cap_recv+0x70>)
    5650:	4816      	ldr	r0, [pc, #88]	; (56ac <bt_l2cap_recv+0x74>)
    5652:	f7fb fc9b 	bl	f8c <printk>
	net_buf_unref(buf);
    5656:	4620      	mov	r0, r4
}
    5658:	b004      	add	sp, #16
    565a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    565e:	f00e b855 	b.w	1370c <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    5662:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5664:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    5666:	f850 3f08 	ldr.w	r3, [r0, #8]!
    566a:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    566c:	f00e f8ae 	bl	137cc <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    5670:	4629      	mov	r1, r5
    5672:	4630      	mov	r0, r6
    5674:	f7ff ffd0 	bl	5618 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    5678:	b950      	cbnz	r0, 5690 <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    567a:	4b08      	ldr	r3, [pc, #32]	; (569c <bt_l2cap_recv+0x64>)
    567c:	9302      	str	r3, [sp, #8]
    567e:	e88d 0028 	stmia.w	sp, {r3, r5}
    5682:	4a0b      	ldr	r2, [pc, #44]	; (56b0 <bt_l2cap_recv+0x78>)
    5684:	4b07      	ldr	r3, [pc, #28]	; (56a4 <bt_l2cap_recv+0x6c>)
    5686:	4908      	ldr	r1, [pc, #32]	; (56a8 <bt_l2cap_recv+0x70>)
    5688:	480a      	ldr	r0, [pc, #40]	; (56b4 <bt_l2cap_recv+0x7c>)
    568a:	f7fb fc7f 	bl	f8c <printk>
    568e:	e7e2      	b.n	5656 <bt_l2cap_recv+0x1e>
	chan->ops->recv(chan, buf);
    5690:	6843      	ldr	r3, [r0, #4]
    5692:	4621      	mov	r1, r4
    5694:	691b      	ldr	r3, [r3, #16]
    5696:	4798      	blx	r3
    5698:	e7dd      	b.n	5656 <bt_l2cap_recv+0x1e>
    569a:	bf00      	nop
    569c:	000153a9 	.word	0x000153a9
    56a0:	00016765 	.word	0x00016765
    56a4:	0001719c 	.word	0x0001719c
    56a8:	000167b4 	.word	0x000167b4
    56ac:	000171b7 	.word	0x000171b7
    56b0:	000167ef 	.word	0x000167ef
    56b4:	000171e4 	.word	0x000171e4

000056b8 <bt_l2cap_update_conn_param>:
{
    56b8:	b570      	push	{r4, r5, r6, lr}
	ident++;
    56ba:	4b12      	ldr	r3, [pc, #72]	; (5704 <bt_l2cap_update_conn_param+0x4c>)
    56bc:	781a      	ldrb	r2, [r3, #0]
    56be:	3201      	adds	r2, #1
	if (!ident) {
    56c0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    56c4:	bf08      	it	eq
    56c6:	2201      	moveq	r2, #1
    56c8:	701a      	strb	r2, [r3, #0]
{
    56ca:	460c      	mov	r4, r1
    56cc:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    56ce:	7819      	ldrb	r1, [r3, #0]
    56d0:	2208      	movs	r2, #8
    56d2:	2012      	movs	r0, #18
    56d4:	f7ff fdd2 	bl	527c <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    56d8:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    56da:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    56dc:	4408      	add	r0, r1
    56de:	f00e f847 	bl	13770 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    56e2:	8823      	ldrh	r3, [r4, #0]
    56e4:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    56e6:	8863      	ldrh	r3, [r4, #2]
    56e8:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    56ea:	88a3      	ldrh	r3, [r4, #4]
    56ec:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    56ee:	88e3      	ldrh	r3, [r4, #6]
    56f0:	80c3      	strh	r3, [r0, #6]
    56f2:	4632      	mov	r2, r6
    56f4:	4628      	mov	r0, r5
    56f6:	2300      	movs	r3, #0
    56f8:	2105      	movs	r1, #5
    56fa:	f7ff fe91 	bl	5420 <bt_l2cap_send_cb>
}
    56fe:	2000      	movs	r0, #0
    5700:	bd70      	pop	{r4, r5, r6, pc}
    5702:	bf00      	nop
    5704:	20000494 	.word	0x20000494

00005708 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    5708:	4801      	ldr	r0, [pc, #4]	; (5710 <bt_l2cap_init+0x8>)
    570a:	f7ff bdcb 	b.w	52a4 <bt_l2cap_le_fixed_chan_register>
    570e:	bf00      	nop
    5710:	20003ba0 	.word	0x20003ba0

00005714 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    5714:	2006      	movs	r0, #6
    5716:	4770      	bx	lr

00005718 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    5718:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    571a:	4a0a      	ldr	r2, [pc, #40]	; (5744 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    571c:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    571e:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    5722:	4284      	cmp	r4, r0
    5724:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    5728:	d102      	bne.n	5730 <att_op_get_type+0x18>
			return handlers[i].type;
    572a:	440a      	add	r2, r1
    572c:	7890      	ldrb	r0, [r2, #2]
    572e:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5730:	3301      	adds	r3, #1
    5732:	2b1b      	cmp	r3, #27
    5734:	d1f3      	bne.n	571e <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    5736:	f010 0f40 	tst.w	r0, #64	; 0x40
    573a:	bf14      	ite	ne
    573c:	2000      	movne	r0, #0
    573e:	2006      	moveq	r0, #6
}
    5740:	bd10      	pop	{r4, pc}
    5742:	bf00      	nop
    5744:	00017694 	.word	0x00017694

00005748 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    5748:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    574a:	4d11      	ldr	r5, [pc, #68]	; (5790 <bt_att_accept+0x48>)
    574c:	682c      	ldr	r4, [r5, #0]
{
    574e:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    5750:	b984      	cbnz	r4, 5774 <bt_att_accept+0x2c>
			continue;
		}

		memset(att, 0, sizeof(*att));
    5752:	22e4      	movs	r2, #228	; 0xe4
    5754:	4621      	mov	r1, r4
    5756:	4628      	mov	r0, r5
    5758:	f7fc fa7c 	bl	1c54 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    575c:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    575e:	4b0d      	ldr	r3, [pc, #52]	; (5794 <bt_att_accept+0x4c>)
    5760:	606b      	str	r3, [r5, #4]
    5762:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    5766:	4611      	mov	r1, r2
    5768:	f00f f85e 	bl	14828 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    576c:	6035      	str	r5, [r6, #0]

		return 0;
    576e:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    5770:	b004      	add	sp, #16
    5772:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    5774:	4b08      	ldr	r3, [pc, #32]	; (5798 <bt_att_accept+0x50>)
    5776:	9302      	str	r3, [sp, #8]
    5778:	9001      	str	r0, [sp, #4]
    577a:	9300      	str	r3, [sp, #0]
    577c:	4a07      	ldr	r2, [pc, #28]	; (579c <bt_att_accept+0x54>)
    577e:	4b08      	ldr	r3, [pc, #32]	; (57a0 <bt_att_accept+0x58>)
    5780:	4908      	ldr	r1, [pc, #32]	; (57a4 <bt_att_accept+0x5c>)
    5782:	4809      	ldr	r0, [pc, #36]	; (57a8 <bt_att_accept+0x60>)
    5784:	f7fb fc02 	bl	f8c <printk>
	return -ENOMEM;
    5788:	f06f 000b 	mvn.w	r0, #11
    578c:	e7f0      	b.n	5770 <bt_att_accept+0x28>
    578e:	bf00      	nop
    5790:	200004a0 	.word	0x200004a0
    5794:	20003bcc 	.word	0x20003bcc
    5798:	000153a9 	.word	0x000153a9
    579c:	00016765 	.word	0x00016765
    57a0:	0001740c 	.word	0x0001740c
    57a4:	000167b4 	.word	0x000167b4
    57a8:	00017528 	.word	0x00017528

000057ac <att_req_destroy>:
{
    57ac:	b510      	push	{r4, lr}
    57ae:	4604      	mov	r4, r0
	if (req->buf) {
    57b0:	6900      	ldr	r0, [r0, #16]
    57b2:	b108      	cbz	r0, 57b8 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    57b4:	f00d ffaa 	bl	1370c <net_buf_unref>
	if (req->destroy) {
    57b8:	68a3      	ldr	r3, [r4, #8]
    57ba:	b10b      	cbz	r3, 57c0 <att_req_destroy+0x14>
		req->destroy(req);
    57bc:	4620      	mov	r0, r4
    57be:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    57c0:	4620      	mov	r0, r4
    57c2:	2214      	movs	r2, #20
    57c4:	2100      	movs	r1, #0
}
    57c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    57ca:	f7fc ba43 	b.w	1c54 <memset>

000057ce <att_notify>:
{
    57ce:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    57d0:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    57d2:	f101 0008 	add.w	r0, r1, #8
{
    57d6:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    57d8:	f00e f808 	bl	137ec <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    57dc:	89a3      	ldrh	r3, [r4, #12]
    57de:	68a2      	ldr	r2, [r4, #8]
    57e0:	4601      	mov	r1, r0
    57e2:	4628      	mov	r0, r5
    57e4:	f001 fe66 	bl	74b4 <bt_gatt_notification>
}
    57e8:	2000      	movs	r0, #0
    57ea:	bd38      	pop	{r3, r4, r5, pc}

000057ec <read_group_cb>:
{
    57ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    57f0:	680d      	ldr	r5, [r1, #0]
{
    57f2:	4606      	mov	r6, r0
    57f4:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    57f6:	f04f 0800 	mov.w	r8, #0
    57fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    57fe:	a902      	add	r1, sp, #8
    5800:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    5802:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5804:	f88d 8008 	strb.w	r8, [sp, #8]
    5808:	f8ad 300a 	strh.w	r3, [sp, #10]
    580c:	f7fc fb74 	bl	1ef8 <bt_uuid_cmp>
    5810:	b198      	cbz	r0, 583a <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5812:	f642 0301 	movw	r3, #10241	; 0x2801
    5816:	a903      	add	r1, sp, #12
    5818:	6830      	ldr	r0, [r6, #0]
    581a:	f88d 800c 	strb.w	r8, [sp, #12]
    581e:	f8ad 300e 	strh.w	r3, [sp, #14]
    5822:	f7fc fb69 	bl	1ef8 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5826:	b140      	cbz	r0, 583a <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    5828:	6923      	ldr	r3, [r4, #16]
    582a:	b123      	cbz	r3, 5836 <read_group_cb+0x4a>
    582c:	8a32      	ldrh	r2, [r6, #16]
    582e:	8859      	ldrh	r1, [r3, #2]
    5830:	4291      	cmp	r1, r2
    5832:	d200      	bcs.n	5836 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5834:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    5836:	2001      	movs	r0, #1
    5838:	e012      	b.n	5860 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    583a:	6861      	ldr	r1, [r4, #4]
    583c:	6830      	ldr	r0, [r6, #0]
    583e:	f7fc fb5b 	bl	1ef8 <bt_uuid_cmp>
    5842:	b110      	cbz	r0, 584a <read_group_cb+0x5e>
		data->group = NULL;
    5844:	2300      	movs	r3, #0
    5846:	6123      	str	r3, [r4, #16]
    5848:	e7f5      	b.n	5836 <read_group_cb+0x4a>
	if (data->rsp->len &&
    584a:	68e3      	ldr	r3, [r4, #12]
    584c:	68a0      	ldr	r0, [r4, #8]
    584e:	781a      	ldrb	r2, [r3, #0]
    5850:	b14a      	cbz	r2, 5866 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    5852:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    5856:	8981      	ldrh	r1, [r0, #12]
    5858:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    585a:	4293      	cmp	r3, r2
    585c:	da03      	bge.n	5866 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    585e:	2000      	movs	r0, #0
}
    5860:	b004      	add	sp, #16
    5862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5866:	2104      	movs	r1, #4
    5868:	3008      	adds	r0, #8
    586a:	f00d ff81 	bl	13770 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    586e:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5870:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5872:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5874:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5876:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5878:	898a      	ldrh	r2, [r1, #12]
    587a:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    587e:	6889      	ldr	r1, [r1, #8]
    5880:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5884:	1a9b      	subs	r3, r3, r2
    5886:	2500      	movs	r5, #0
    5888:	440a      	add	r2, r1
    588a:	9500      	str	r5, [sp, #0]
    588c:	4631      	mov	r1, r6
    588e:	b29b      	uxth	r3, r3
    5890:	4638      	mov	r0, r7
    5892:	47c0      	blx	r8
	if (read < 0) {
    5894:	1e01      	subs	r1, r0, #0
    5896:	dbe2      	blt.n	585e <read_group_cb+0x72>
	if (!data->rsp->len) {
    5898:	68e0      	ldr	r0, [r4, #12]
    589a:	7802      	ldrb	r2, [r0, #0]
    589c:	1d0b      	adds	r3, r1, #4
    589e:	b92a      	cbnz	r2, 58ac <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    58a0:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    58a2:	68a0      	ldr	r0, [r4, #8]
    58a4:	3008      	adds	r0, #8
    58a6:	f00d ff63 	bl	13770 <net_buf_simple_add>
    58aa:	e7c4      	b.n	5836 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    58ac:	429a      	cmp	r2, r3
    58ae:	d0f8      	beq.n	58a2 <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    58b0:	68a2      	ldr	r2, [r4, #8]
    58b2:	8993      	ldrh	r3, [r2, #12]
    58b4:	3b04      	subs	r3, #4
    58b6:	8193      	strh	r3, [r2, #12]
    58b8:	e7d1      	b.n	585e <read_group_cb+0x72>

000058ba <find_info_cb>:
	if (!data->rsp) {
    58ba:	688b      	ldr	r3, [r1, #8]
{
    58bc:	b570      	push	{r4, r5, r6, lr}
    58be:	4605      	mov	r5, r0
    58c0:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    58c2:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    58c4:	b963      	cbnz	r3, 58e0 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    58c6:	6848      	ldr	r0, [r1, #4]
    58c8:	2101      	movs	r1, #1
    58ca:	3008      	adds	r0, #8
    58cc:	f00d ff50 	bl	13770 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    58d0:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    58d2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    58d4:	781b      	ldrb	r3, [r3, #0]
    58d6:	2b00      	cmp	r3, #0
    58d8:	bf0c      	ite	eq
    58da:	2301      	moveq	r3, #1
    58dc:	2302      	movne	r3, #2
    58de:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    58e0:	68a3      	ldr	r3, [r4, #8]
    58e2:	781b      	ldrb	r3, [r3, #0]
    58e4:	2b01      	cmp	r3, #1
    58e6:	d003      	beq.n	58f0 <find_info_cb+0x36>
    58e8:	2b02      	cmp	r3, #2
    58ea:	d01a      	beq.n	5922 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    58ec:	2000      	movs	r0, #0
}
    58ee:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    58f0:	682b      	ldr	r3, [r5, #0]
    58f2:	781b      	ldrb	r3, [r3, #0]
    58f4:	2b00      	cmp	r3, #0
    58f6:	d1f9      	bne.n	58ec <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    58f8:	6860      	ldr	r0, [r4, #4]
    58fa:	2104      	movs	r1, #4
    58fc:	3008      	adds	r0, #8
    58fe:	f00d ff37 	bl	13770 <net_buf_simple_add>
    5902:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    5904:	8a2b      	ldrh	r3, [r5, #16]
    5906:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    5908:	682b      	ldr	r3, [r5, #0]
    590a:	885b      	ldrh	r3, [r3, #2]
    590c:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    590e:	6863      	ldr	r3, [r4, #4]
    5910:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5914:	899b      	ldrh	r3, [r3, #12]
    5916:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5918:	2804      	cmp	r0, #4
    591a:	bf94      	ite	ls
    591c:	2000      	movls	r0, #0
    591e:	2001      	movhi	r0, #1
    5920:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    5922:	682b      	ldr	r3, [r5, #0]
    5924:	781b      	ldrb	r3, [r3, #0]
    5926:	2b02      	cmp	r3, #2
    5928:	d1e0      	bne.n	58ec <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    592a:	6860      	ldr	r0, [r4, #4]
    592c:	2112      	movs	r1, #18
    592e:	3008      	adds	r0, #8
    5930:	f00d ff1e 	bl	13770 <net_buf_simple_add>
    5934:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5936:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    5938:	8a2b      	ldrh	r3, [r5, #16]
    593a:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    593e:	2210      	movs	r2, #16
    5940:	3101      	adds	r1, #1
    5942:	f7fc f95b 	bl	1bfc <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    5946:	6863      	ldr	r3, [r4, #4]
    5948:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    594c:	899b      	ldrh	r3, [r3, #12]
    594e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5950:	2812      	cmp	r0, #18
    5952:	e7e2      	b.n	591a <find_info_cb+0x60>

00005954 <find_type_cb>:
{
    5954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5958:	680e      	ldr	r6, [r1, #0]
{
    595a:	b088      	sub	sp, #32
    595c:	4605      	mov	r5, r0
    595e:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5960:	2700      	movs	r7, #0
    5962:	f642 0301 	movw	r3, #10241	; 0x2801
    5966:	a902      	add	r1, sp, #8
    5968:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    596a:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    596e:	f88d 7008 	strb.w	r7, [sp, #8]
    5972:	f8ad 300a 	strh.w	r3, [sp, #10]
    5976:	f7fc fabf 	bl	1ef8 <bt_uuid_cmp>
    597a:	b928      	cbnz	r0, 5988 <find_type_cb+0x34>
		data->group = NULL;
    597c:	2300      	movs	r3, #0
    597e:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    5980:	2001      	movs	r0, #1
}
    5982:	b008      	add	sp, #32
    5984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    5988:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    598c:	a903      	add	r1, sp, #12
    598e:	6828      	ldr	r0, [r5, #0]
    5990:	f88d 700c 	strb.w	r7, [sp, #12]
    5994:	f8ad 300e 	strh.w	r3, [sp, #14]
    5998:	f7fc faae 	bl	1ef8 <bt_uuid_cmp>
    599c:	b140      	cbz	r0, 59b0 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    599e:	68a3      	ldr	r3, [r4, #8]
    59a0:	2b00      	cmp	r3, #0
    59a2:	d0ed      	beq.n	5980 <find_type_cb+0x2c>
    59a4:	8a2a      	ldrh	r2, [r5, #16]
    59a6:	8859      	ldrh	r1, [r3, #2]
    59a8:	4291      	cmp	r1, r2
    59aa:	d2e9      	bcs.n	5980 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    59ac:	805a      	strh	r2, [r3, #2]
    59ae:	e7e7      	b.n	5980 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    59b0:	6862      	ldr	r2, [r4, #4]
    59b2:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    59b6:	8992      	ldrh	r2, [r2, #12]
    59b8:	1a9b      	subs	r3, r3, r2
    59ba:	2b03      	cmp	r3, #3
    59bc:	d9e1      	bls.n	5982 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    59be:	2310      	movs	r3, #16
    59c0:	9000      	str	r0, [sp, #0]
    59c2:	eb0d 0203 	add.w	r2, sp, r3
    59c6:	686e      	ldr	r6, [r5, #4]
    59c8:	4629      	mov	r1, r5
    59ca:	4640      	mov	r0, r8
    59cc:	47b0      	blx	r6
	if (read < 0) {
    59ce:	1e02      	subs	r2, r0, #0
    59d0:	dbd4      	blt.n	597c <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    59d2:	7c23      	ldrb	r3, [r4, #16]
    59d4:	429a      	cmp	r2, r3
    59d6:	d1d1      	bne.n	597c <find_type_cb+0x28>
    59d8:	a904      	add	r1, sp, #16
    59da:	68e0      	ldr	r0, [r4, #12]
    59dc:	f7fc f8f9 	bl	1bd2 <memcmp>
    59e0:	2800      	cmp	r0, #0
    59e2:	d1cb      	bne.n	597c <find_type_cb+0x28>
	data->err = 0x00;
    59e4:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    59e6:	6860      	ldr	r0, [r4, #4]
    59e8:	2104      	movs	r1, #4
    59ea:	3008      	adds	r0, #8
    59ec:	f00d fec0 	bl	13770 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    59f0:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    59f2:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    59f4:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    59f6:	8043      	strh	r3, [r0, #2]
    59f8:	e7c2      	b.n	5980 <find_type_cb+0x2c>
	...

000059fc <bt_att_connected>:
{
    59fc:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    59fe:	2317      	movs	r3, #23
{
    5a00:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5a02:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5a06:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    5a08:	4906      	ldr	r1, [pc, #24]	; (5a24 <bt_att_connected+0x28>)
    5a0a:	30a4      	adds	r0, #164	; 0xa4
    5a0c:	f00f f9fc 	bl	14e08 <k_delayed_work_init>
	list->head = NULL;
    5a10:	2300      	movs	r3, #0
    5a12:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    5a16:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	bt_gatt_connected(ch->chan.conn);
    5a1a:	6820      	ldr	r0, [r4, #0]
}
    5a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    5a20:	f001 bd7c 	b.w	751c <bt_gatt_connected>
    5a24:	00005f49 	.word	0x00005f49

00005a28 <check_perm.isra.4>:
	if ((mask & BT_GATT_PERM_READ) &&
    5a28:	f011 0f01 	tst.w	r1, #1
    5a2c:	7c83      	ldrb	r3, [r0, #18]
    5a2e:	d004      	beq.n	5a3a <check_perm.isra.4+0x12>
    5a30:	f013 0f15 	tst.w	r3, #21
    5a34:	d012      	beq.n	5a5c <check_perm.isra.4+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    5a36:	6842      	ldr	r2, [r0, #4]
    5a38:	b182      	cbz	r2, 5a5c <check_perm.isra.4+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    5a3a:	078a      	lsls	r2, r1, #30
    5a3c:	d504      	bpl.n	5a48 <check_perm.isra.4+0x20>
    5a3e:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    5a42:	d00d      	beq.n	5a60 <check_perm.isra.4+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    5a44:	6882      	ldr	r2, [r0, #8]
    5a46:	b15a      	cbz	r2, 5a60 <check_perm.isra.4+0x38>
	mask &= attr->perm;
    5a48:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    5a4a:	f011 0f30 	tst.w	r1, #48	; 0x30
    5a4e:	d109      	bne.n	5a64 <check_perm.isra.4+0x3c>
	return 0;
    5a50:	f011 0f0c 	tst.w	r1, #12
    5a54:	bf14      	ite	ne
    5a56:	200f      	movne	r0, #15
    5a58:	2000      	moveq	r0, #0
    5a5a:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    5a5c:	2002      	movs	r0, #2
    5a5e:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    5a60:	2003      	movs	r0, #3
    5a62:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    5a64:	2005      	movs	r0, #5
}
    5a66:	4770      	bx	lr

00005a68 <read_type_cb>:
{
    5a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    5a6c:	680f      	ldr	r7, [r1, #0]
{
    5a6e:	4606      	mov	r6, r0
    5a70:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5a72:	6800      	ldr	r0, [r0, #0]
    5a74:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    5a76:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5a7a:	f7fc fa3d 	bl	1ef8 <bt_uuid_cmp>
    5a7e:	4680      	mov	r8, r0
    5a80:	2800      	cmp	r0, #0
    5a82:	d14d      	bne.n	5b20 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5a84:	2115      	movs	r1, #21
    5a86:	4630      	mov	r0, r6
    5a88:	f7ff ffce 	bl	5a28 <check_perm.isra.4>
    5a8c:	4605      	mov	r5, r0
    5a8e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5a90:	b148      	cbz	r0, 5aa6 <read_type_cb+0x3e>
		if (data->rsp->len) {
    5a92:	68e3      	ldr	r3, [r4, #12]
    5a94:	781d      	ldrb	r5, [r3, #0]
    5a96:	b115      	cbz	r5, 5a9e <read_type_cb+0x36>
			data->err = 0x00;
    5a98:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    5a9c:	4645      	mov	r5, r8
}
    5a9e:	4628      	mov	r0, r5
    5aa0:	b003      	add	sp, #12
    5aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5aa6:	68a0      	ldr	r0, [r4, #8]
    5aa8:	2102      	movs	r1, #2
    5aaa:	3008      	adds	r0, #8
    5aac:	f00d fe60 	bl	13770 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5ab0:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5ab2:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5ab4:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5ab6:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5ab8:	898a      	ldrh	r2, [r1, #12]
    5aba:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    5abe:	6889      	ldr	r1, [r1, #8]
    5ac0:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5ac4:	9500      	str	r5, [sp, #0]
    5ac6:	1a9b      	subs	r3, r3, r2
    5ac8:	b29b      	uxth	r3, r3
    5aca:	440a      	add	r2, r1
    5acc:	4648      	mov	r0, r9
    5ace:	4631      	mov	r1, r6
    5ad0:	47c0      	blx	r8
	if (read < 0) {
    5ad2:	1e01      	subs	r1, r0, #0
    5ad4:	da08      	bge.n	5ae8 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    5ad6:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5ada:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5adc:	bf9a      	itte	ls
    5ade:	4249      	negls	r1, r1
    5ae0:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    5ae2:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5ae4:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    5ae6:	e7da      	b.n	5a9e <read_type_cb+0x36>
	if (!data->rsp->len) {
    5ae8:	68e0      	ldr	r0, [r4, #12]
    5aea:	7802      	ldrb	r2, [r0, #0]
    5aec:	1c8b      	adds	r3, r1, #2
    5aee:	b982      	cbnz	r2, 5b12 <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    5af0:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    5af2:	68a0      	ldr	r0, [r4, #8]
    5af4:	3008      	adds	r0, #8
    5af6:	f00d fe3b 	bl	13770 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    5afa:	68a3      	ldr	r3, [r4, #8]
    5afc:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    5b00:	899b      	ldrh	r3, [r3, #12]
    5b02:	1aed      	subs	r5, r5, r3
    5b04:	68e3      	ldr	r3, [r4, #12]
    5b06:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    5b08:	429d      	cmp	r5, r3
    5b0a:	bfd4      	ite	le
    5b0c:	2500      	movle	r5, #0
    5b0e:	2501      	movgt	r5, #1
    5b10:	e7c5      	b.n	5a9e <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    5b12:	429a      	cmp	r2, r3
    5b14:	d0ed      	beq.n	5af2 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    5b16:	68a2      	ldr	r2, [r4, #8]
    5b18:	8993      	ldrh	r3, [r2, #12]
    5b1a:	3b02      	subs	r3, #2
    5b1c:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    5b1e:	e7be      	b.n	5a9e <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    5b20:	2501      	movs	r5, #1
    5b22:	e7bc      	b.n	5a9e <read_type_cb+0x36>

00005b24 <uuid_create>:
{
    5b24:	b510      	push	{r4, lr}
	switch (buf->len) {
    5b26:	898a      	ldrh	r2, [r1, #12]
    5b28:	2a02      	cmp	r2, #2
{
    5b2a:	4604      	mov	r4, r0
	switch (buf->len) {
    5b2c:	d003      	beq.n	5b36 <uuid_create+0x12>
    5b2e:	2a10      	cmp	r2, #16
    5b30:	d00a      	beq.n	5b48 <uuid_create+0x24>
	return false;
    5b32:	2000      	movs	r0, #0
}
    5b34:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    5b36:	2300      	movs	r3, #0
    5b38:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    5b3a:	f101 0008 	add.w	r0, r1, #8
    5b3e:	f00d fe55 	bl	137ec <net_buf_simple_pull_le16>
    5b42:	8060      	strh	r0, [r4, #2]
		return true;
    5b44:	2001      	movs	r0, #1
    5b46:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    5b48:	2302      	movs	r3, #2
    5b4a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    5b4e:	6889      	ldr	r1, [r1, #8]
    5b50:	f7fc f854 	bl	1bfc <memcpy>
    5b54:	e7f6      	b.n	5b44 <uuid_create+0x20>
	...

00005b58 <att_req_sent>:
{
    5b58:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5b5a:	2104      	movs	r1, #4
    5b5c:	f7ff fd4c 	bl	55f8 <bt_l2cap_le_lookup_tx_cid>
    5b60:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5b62:	30cc      	adds	r0, #204	; 0xcc
    5b64:	f00e fe69 	bl	1483a <_impl_k_sem_give>
	if (att->req) {
    5b68:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5b6c:	b143      	cbz	r3, 5b80 <att_req_sent+0x28>
    5b6e:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    5b72:	f247 5230 	movw	r2, #30000	; 0x7530
    5b76:	4803      	ldr	r0, [pc, #12]	; (5b84 <att_req_sent+0x2c>)
}
    5b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5b7c:	f00f b9b8 	b.w	14ef0 <k_delayed_work_submit_to_queue>
    5b80:	bd10      	pop	{r4, pc}
    5b82:	bf00      	nop
    5b84:	20001990 	.word	0x20001990

00005b88 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    5b88:	6803      	ldr	r3, [r0, #0]
    5b8a:	7a5b      	ldrb	r3, [r3, #9]
    5b8c:	2b03      	cmp	r3, #3
    5b8e:	d10a      	bne.n	5ba6 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5b90:	f3bf 8f5b 	dmb	ish
    5b94:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    5b98:	f3bf 8f5b 	dmb	ish
    5b9c:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    5ba0:	f000 0001 	and.w	r0, r0, #1
    5ba4:	4770      	bx	lr
    5ba6:	2001      	movs	r0, #1
}
    5ba8:	4770      	bx	lr

00005baa <att_prepare_write_req>:
    5baa:	2006      	movs	r0, #6
    5bac:	4770      	bx	lr

00005bae <att_pdu_sent>:
{
    5bae:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5bb0:	2104      	movs	r1, #4
    5bb2:	f7ff fd21 	bl	55f8 <bt_l2cap_le_lookup_tx_cid>
}
    5bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5bba:	30cc      	adds	r0, #204	; 0xcc
    5bbc:	f00e be3d 	b.w	1483a <_impl_k_sem_give>

00005bc0 <att_rsp_sent>:
{
    5bc0:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5bc2:	2104      	movs	r1, #4
    5bc4:	f7ff fd18 	bl	55f8 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5bc8:	f3bf 8f5b 	dmb	ish
    5bcc:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5bd0:	e853 2f00 	ldrex	r2, [r3]
    5bd4:	f022 0201 	bic.w	r2, r2, #1
    5bd8:	e843 2100 	strex	r1, r2, [r3]
    5bdc:	2900      	cmp	r1, #0
    5bde:	d1f7      	bne.n	5bd0 <att_rsp_sent+0x10>
    5be0:	f3bf 8f5b 	dmb	ish
    5be4:	30cc      	adds	r0, #204	; 0xcc
}
    5be6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5bea:	f00e be26 	b.w	1483a <_impl_k_sem_give>

00005bee <att_cfm_sent>:
{
    5bee:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5bf0:	2104      	movs	r1, #4
    5bf2:	f7ff fd01 	bl	55f8 <bt_l2cap_le_lookup_tx_cid>
    5bf6:	f3bf 8f5b 	dmb	ish
    5bfa:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5bfe:	e853 2f00 	ldrex	r2, [r3]
    5c02:	f022 0202 	bic.w	r2, r2, #2
    5c06:	e843 2100 	strex	r1, r2, [r3]
    5c0a:	2900      	cmp	r1, #0
    5c0c:	d1f7      	bne.n	5bfe <att_cfm_sent+0x10>
    5c0e:	f3bf 8f5b 	dmb	ish
    5c12:	30cc      	adds	r0, #204	; 0xcc
}
    5c14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5c18:	f00e be0f 	b.w	1483a <_impl_k_sem_give>

00005c1c <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    5c1c:	7a43      	ldrb	r3, [r0, #9]
    5c1e:	2b03      	cmp	r3, #3
{
    5c20:	b513      	push	{r0, r1, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    5c22:	d00b      	beq.n	5c3c <att_chan_get+0x20>
		BT_WARN("Not connected");
    5c24:	4b15      	ldr	r3, [pc, #84]	; (5c7c <att_chan_get+0x60>)
    5c26:	9301      	str	r3, [sp, #4]
    5c28:	9300      	str	r3, [sp, #0]
    5c2a:	4a15      	ldr	r2, [pc, #84]	; (5c80 <att_chan_get+0x64>)
    5c2c:	4b15      	ldr	r3, [pc, #84]	; (5c84 <att_chan_get+0x68>)
    5c2e:	4916      	ldr	r1, [pc, #88]	; (5c88 <att_chan_get+0x6c>)
    5c30:	4816      	ldr	r0, [pc, #88]	; (5c8c <att_chan_get+0x70>)
		BT_WARN("ATT context flagged as disconnected");
    5c32:	f7fb f9ab 	bl	f8c <printk>
		return NULL;
    5c36:	2000      	movs	r0, #0
}
    5c38:	b002      	add	sp, #8
    5c3a:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    5c3c:	2104      	movs	r1, #4
    5c3e:	f7ff fceb 	bl	5618 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    5c42:	4604      	mov	r4, r0
    5c44:	b950      	cbnz	r0, 5c5c <att_chan_get+0x40>
		BT_ERR("Unable to find ATT channel");
    5c46:	4b0d      	ldr	r3, [pc, #52]	; (5c7c <att_chan_get+0x60>)
    5c48:	9301      	str	r3, [sp, #4]
    5c4a:	9300      	str	r3, [sp, #0]
    5c4c:	4a10      	ldr	r2, [pc, #64]	; (5c90 <att_chan_get+0x74>)
    5c4e:	4b0d      	ldr	r3, [pc, #52]	; (5c84 <att_chan_get+0x68>)
    5c50:	490d      	ldr	r1, [pc, #52]	; (5c88 <att_chan_get+0x6c>)
    5c52:	4810      	ldr	r0, [pc, #64]	; (5c94 <att_chan_get+0x78>)
    5c54:	f7fb f99a 	bl	f8c <printk>
    5c58:	4620      	mov	r0, r4
    5c5a:	e7ed      	b.n	5c38 <att_chan_get+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5c5c:	f3bf 8f5b 	dmb	ish
    5c60:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    5c64:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    5c68:	075b      	lsls	r3, r3, #29
    5c6a:	d5f5      	bpl.n	5c58 <att_chan_get+0x3c>
		BT_WARN("ATT context flagged as disconnected");
    5c6c:	4b03      	ldr	r3, [pc, #12]	; (5c7c <att_chan_get+0x60>)
    5c6e:	9301      	str	r3, [sp, #4]
    5c70:	9300      	str	r3, [sp, #0]
    5c72:	4a03      	ldr	r2, [pc, #12]	; (5c80 <att_chan_get+0x64>)
    5c74:	4b03      	ldr	r3, [pc, #12]	; (5c84 <att_chan_get+0x68>)
    5c76:	4904      	ldr	r1, [pc, #16]	; (5c88 <att_chan_get+0x6c>)
    5c78:	4807      	ldr	r0, [pc, #28]	; (5c98 <att_chan_get+0x7c>)
    5c7a:	e7da      	b.n	5c32 <att_chan_get+0x16>
    5c7c:	000153a9 	.word	0x000153a9
    5c80:	000167ef 	.word	0x000167ef
    5c84:	000173e1 	.word	0x000173e1
    5c88:	000167b4 	.word	0x000167b4
    5c8c:	00017426 	.word	0x00017426
    5c90:	00016765 	.word	0x00016765
    5c94:	00017444 	.word	0x00017444
    5c98:	0001746f 	.word	0x0001746f

00005c9c <write_cb>:
{
    5c9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5ca0:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5ca2:	f8d1 8000 	ldr.w	r8, [r1]
    5ca6:	212a      	movs	r1, #42	; 0x2a
{
    5ca8:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5caa:	f7ff febd 	bl	5a28 <check_perm.isra.4>
    5cae:	4605      	mov	r5, r0
    5cb0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5cb2:	b9e0      	cbnz	r0, 5cee <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    5cb4:	8a62      	ldrh	r2, [r4, #18]
    5cb6:	9001      	str	r0, [sp, #4]
    5cb8:	9200      	str	r2, [sp, #0]
    5cba:	7c23      	ldrb	r3, [r4, #16]
    5cbc:	68b7      	ldr	r7, [r6, #8]
    5cbe:	68e2      	ldr	r2, [r4, #12]
    5cc0:	4631      	mov	r1, r6
    5cc2:	4640      	mov	r0, r8
    5cc4:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    5cc6:	2800      	cmp	r0, #0
    5cc8:	db02      	blt.n	5cd0 <write_cb+0x34>
    5cca:	7c23      	ldrb	r3, [r4, #16]
    5ccc:	4298      	cmp	r0, r3
    5cce:	d00b      	beq.n	5ce8 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    5cd0:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    5cd4:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5cd6:	bf9a      	itte	ls
    5cd8:	4240      	negls	r0, r0
    5cda:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    5cdc:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    5cde:	7520      	strb	r0, [r4, #20]
}
    5ce0:	4628      	mov	r0, r5
    5ce2:	b002      	add	sp, #8
    5ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    5ce8:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    5cea:	2501      	movs	r5, #1
    5cec:	e7f8      	b.n	5ce0 <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    5cee:	2500      	movs	r5, #0
    5cf0:	e7f6      	b.n	5ce0 <write_cb+0x44>
	...

00005cf4 <att_send_req>:
{
    5cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5cf6:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    5cf8:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    5cfc:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    5d00:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5d02:	4630      	mov	r0, r6
    5d04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5d08:	f00e fdbf 	bl	1488a <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    5d0c:	4628      	mov	r0, r5
    5d0e:	f7ff ff3b 	bl	5b88 <att_is_connected>
    5d12:	b978      	cbnz	r0, 5d34 <att_send_req+0x40>
		BT_WARN("Disconnected");
    5d14:	4b18      	ldr	r3, [pc, #96]	; (5d78 <att_send_req+0x84>)
    5d16:	9301      	str	r3, [sp, #4]
    5d18:	9300      	str	r3, [sp, #0]
    5d1a:	4a18      	ldr	r2, [pc, #96]	; (5d7c <att_send_req+0x88>)
    5d1c:	4b18      	ldr	r3, [pc, #96]	; (5d80 <att_send_req+0x8c>)
    5d1e:	4919      	ldr	r1, [pc, #100]	; (5d84 <att_send_req+0x90>)
    5d20:	4819      	ldr	r0, [pc, #100]	; (5d88 <att_send_req+0x94>)
    5d22:	f7fb f933 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5d26:	4630      	mov	r0, r6
    5d28:	f00e fd87 	bl	1483a <_impl_k_sem_give>
		return -ENOTCONN;
    5d2c:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    5d30:	b002      	add	sp, #8
    5d32:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    5d34:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    5d36:	f106 0008 	add.w	r0, r6, #8
    5d3a:	f00d fd5f 	bl	137fc <net_buf_simple_headroom>
	state->len = buf->len;
    5d3e:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    5d40:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    5d42:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5d44:	6920      	ldr	r0, [r4, #16]
    5d46:	682d      	ldr	r5, [r5, #0]
    5d48:	f00d fd0e 	bl	13768 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    5d4c:	6923      	ldr	r3, [r4, #16]
    5d4e:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5d50:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    5d52:	7818      	ldrb	r0, [r3, #0]
    5d54:	f7ff fce0 	bl	5718 <att_op_get_type>
    5d58:	3801      	subs	r0, #1
    5d5a:	b2c0      	uxtb	r0, r0
    5d5c:	2804      	cmp	r0, #4
    5d5e:	bf96      	itet	ls
    5d60:	4b0a      	ldrls	r3, [pc, #40]	; (5d8c <att_send_req+0x98>)
    5d62:	4b0b      	ldrhi	r3, [pc, #44]	; (5d90 <att_send_req+0x9c>)
    5d64:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5d68:	4632      	mov	r2, r6
    5d6a:	4628      	mov	r0, r5
    5d6c:	2104      	movs	r1, #4
    5d6e:	f7ff fb57 	bl	5420 <bt_l2cap_send_cb>
	return 0;
    5d72:	2000      	movs	r0, #0
    5d74:	e7dc      	b.n	5d30 <att_send_req+0x3c>
    5d76:	bf00      	nop
    5d78:	000153a9 	.word	0x000153a9
    5d7c:	000167ef 	.word	0x000167ef
    5d80:	000173a4 	.word	0x000173a4
    5d84:	000167b4 	.word	0x000167b4
    5d88:	000174ca 	.word	0x000174ca
    5d8c:	00017390 	.word	0x00017390
    5d90:	00005baf 	.word	0x00005baf

00005d94 <att_handle_rsp>:
{
    5d94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5d98:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    5d9a:	30a4      	adds	r0, #164	; 0xa4
{
    5d9c:	461e      	mov	r6, r3
    5d9e:	460f      	mov	r7, r1
    5da0:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    5da2:	f00f f841 	bl	14e28 <k_delayed_work_cancel>
	if (!att->req) {
    5da6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5daa:	b9db      	cbnz	r3, 5de4 <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
    5dac:	4b1c      	ldr	r3, [pc, #112]	; (5e20 <att_handle_rsp+0x8c>)
    5dae:	9301      	str	r3, [sp, #4]
    5db0:	9300      	str	r3, [sp, #0]
    5db2:	4a1c      	ldr	r2, [pc, #112]	; (5e24 <att_handle_rsp+0x90>)
    5db4:	4b1c      	ldr	r3, [pc, #112]	; (5e28 <att_handle_rsp+0x94>)
    5db6:	491d      	ldr	r1, [pc, #116]	; (5e2c <att_handle_rsp+0x98>)
    5db8:	481d      	ldr	r0, [pc, #116]	; (5e30 <att_handle_rsp+0x9c>)
    5dba:	f7fb f8e7 	bl	f8c <printk>
    5dbe:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    5dc2:	b159      	cbz	r1, 5ddc <att_handle_rsp+0x48>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5dc4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    5dc8:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5dca:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5dce:	4291      	cmp	r1, r2
	list->tail = node;
    5dd0:	bf08      	it	eq
    5dd2:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    5dd6:	4620      	mov	r0, r4
    5dd8:	f7ff ff8c 	bl	5cf4 <att_send_req>
}
    5ddc:	2000      	movs	r0, #0
    5dde:	b003      	add	sp, #12
    5de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    5de4:	6918      	ldr	r0, [r3, #16]
    5de6:	b128      	cbz	r0, 5df4 <att_handle_rsp+0x60>
		net_buf_unref(att->req->buf);
    5de8:	f00d fc90 	bl	1370c <net_buf_unref>
		att->req->buf = NULL;
    5dec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5df0:	2200      	movs	r2, #0
    5df2:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    5df4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    5df8:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    5dfa:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    5dfe:	2500      	movs	r5, #0
    5e00:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    5e02:	463a      	mov	r2, r7
    5e04:	9300      	str	r3, [sp, #0]
    5e06:	4631      	mov	r1, r6
    5e08:	4643      	mov	r3, r8
    5e0a:	47c8      	blx	r9
	if (!att->req->func) {
    5e0c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    5e10:	6843      	ldr	r3, [r0, #4]
    5e12:	b90b      	cbnz	r3, 5e18 <att_handle_rsp+0x84>
		att_req_destroy(att->req);
    5e14:	f7ff fcca 	bl	57ac <att_req_destroy>
	att->req = NULL;
    5e18:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    5e1c:	e7cf      	b.n	5dbe <att_handle_rsp+0x2a>
    5e1e:	bf00      	nop
    5e20:	000153a9 	.word	0x000153a9
    5e24:	000167ef 	.word	0x000167ef
    5e28:	000173b1 	.word	0x000173b1
    5e2c:	000167b4 	.word	0x000167b4
    5e30:	000174a3 	.word	0x000174a3

00005e34 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    5e34:	898a      	ldrh	r2, [r1, #12]
    5e36:	6889      	ldr	r1, [r1, #8]
    5e38:	2300      	movs	r3, #0
    5e3a:	f7ff bfab 	b.w	5d94 <att_handle_rsp>

00005e3e <att_handle_exec_write_rsp>:
    5e3e:	f7ff bff9 	b.w	5e34 <att_confirm>

00005e42 <att_handle_prepare_write_rsp>:
    5e42:	f7ff bff7 	b.w	5e34 <att_confirm>

00005e46 <att_handle_write_rsp>:
    5e46:	f7ff bff5 	b.w	5e34 <att_confirm>

00005e4a <att_handle_read_mult_rsp>:
    5e4a:	f7ff bff3 	b.w	5e34 <att_confirm>

00005e4e <att_handle_read_blob_rsp>:
    5e4e:	f7ff bff1 	b.w	5e34 <att_confirm>

00005e52 <att_handle_read_rsp>:
    5e52:	f7ff bfef 	b.w	5e34 <att_confirm>

00005e56 <att_handle_read_type_rsp>:
    5e56:	f7ff bfed 	b.w	5e34 <att_confirm>

00005e5a <att_handle_find_type_rsp>:
    5e5a:	f7ff bfeb 	b.w	5e34 <att_confirm>

00005e5e <att_handle_find_info_rsp>:
    5e5e:	f7ff bfe9 	b.w	5e34 <att_confirm>

00005e62 <att_mtu_rsp>:
{
    5e62:	b410      	push	{r4}
    5e64:	460a      	mov	r2, r1
	if (!att) {
    5e66:	4603      	mov	r3, r0
    5e68:	b180      	cbz	r0, 5e8c <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    5e6a:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    5e6c:	880c      	ldrh	r4, [r1, #0]
    5e6e:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    5e70:	bf83      	ittte	hi
    5e72:	2417      	movhi	r4, #23
    5e74:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5e76:	f8a3 405a 	strhhi.w	r4, [r3, #90]	; 0x5a
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    5e7a:	2200      	movls	r2, #0
    5e7c:	bf99      	ittee	ls
    5e7e:	2304      	movls	r3, #4
    5e80:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    5e82:	2300      	movhi	r3, #0
    5e84:	8992      	ldrhhi	r2, [r2, #12]
}
    5e86:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    5e88:	f7ff bf84 	b.w	5d94 <att_handle_rsp>
}
    5e8c:	bc10      	pop	{r4}
    5e8e:	4770      	bx	lr

00005e90 <att_error_rsp>:
{
    5e90:	b430      	push	{r4, r5}
	if (!att->req) {
    5e92:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    5e96:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    5e98:	b16a      	cbz	r2, 5eb6 <att_error_rsp+0x26>
	if (att->req->buf) {
    5e9a:	6913      	ldr	r3, [r2, #16]
    5e9c:	b12b      	cbz	r3, 5eaa <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    5e9e:	8995      	ldrh	r5, [r2, #12]
    5ea0:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    5ea2:	89d2      	ldrh	r2, [r2, #14]
    5ea4:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    5ea6:	4429      	add	r1, r5
    5ea8:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    5eaa:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    5eac:	2200      	movs	r2, #0
    5eae:	4611      	mov	r1, r2
}
    5eb0:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    5eb2:	f7ff bf6f 	b.w	5d94 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    5eb6:	230e      	movs	r3, #14
    5eb8:	e7f8      	b.n	5eac <att_error_rsp+0x1c>

00005eba <att_reset>:
{
    5eba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5ebc:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5ec0:	4605      	mov	r5, r0
    5ec2:	f3bf 8f5b 	dmb	ish
    5ec6:	e853 2f00 	ldrex	r2, [r3]
    5eca:	f042 0204 	orr.w	r2, r2, #4
    5ece:	e843 2100 	strex	r1, r2, [r3]
    5ed2:	2900      	cmp	r1, #0
    5ed4:	d1f7      	bne.n	5ec6 <att_reset+0xc>
    5ed6:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    5eda:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    5ede:	4620      	mov	r0, r4
    5ee0:	f00e fcab 	bl	1483a <_impl_k_sem_give>
    5ee4:	4620      	mov	r0, r4
    5ee6:	f00e fca8 	bl	1483a <_impl_k_sem_give>
    5eea:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5eee:	b98c      	cbnz	r4, 5f14 <att_reset+0x5a>
	if (!att->req) {
    5ef0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    5ef4:	2200      	movs	r2, #0
    5ef6:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    5efa:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    5efe:	b90b      	cbnz	r3, 5f04 <att_reset+0x4a>
}
    5f00:	b003      	add	sp, #12
    5f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5f04:	230e      	movs	r3, #14
    5f06:	4611      	mov	r1, r2
    5f08:	4628      	mov	r0, r5
}
    5f0a:	b003      	add	sp, #12
    5f0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5f10:	f7ff bf40 	b.w	5d94 <att_handle_rsp>
	return node->next;
    5f14:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    5f16:	6867      	ldr	r7, [r4, #4]
    5f18:	b12f      	cbz	r7, 5f26 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    5f1a:	2300      	movs	r3, #0
    5f1c:	9400      	str	r4, [sp, #0]
    5f1e:	461a      	mov	r2, r3
    5f20:	210e      	movs	r1, #14
    5f22:	4618      	mov	r0, r3
    5f24:	47b8      	blx	r7
		att_req_destroy(req);
    5f26:	4620      	mov	r0, r4
    5f28:	f7ff fc40 	bl	57ac <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5f2c:	2e00      	cmp	r6, #0
    5f2e:	d0df      	beq.n	5ef0 <att_reset+0x36>
    5f30:	4634      	mov	r4, r6
    5f32:	6836      	ldr	r6, [r6, #0]
    5f34:	e7ef      	b.n	5f16 <att_reset+0x5c>

00005f36 <bt_att_disconnected>:
{
    5f36:	b510      	push	{r4, lr}
    5f38:	4604      	mov	r4, r0
	att_reset(att);
    5f3a:	f7ff ffbe 	bl	5eba <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    5f3e:	6820      	ldr	r0, [r4, #0]
}
    5f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    5f44:	f001 bb0c 	b.w	7560 <bt_gatt_disconnected>

00005f48 <att_timeout>:
{
    5f48:	b513      	push	{r0, r1, r4, lr}
	BT_ERR("ATT Timeout");
    5f4a:	4b0b      	ldr	r3, [pc, #44]	; (5f78 <att_timeout+0x30>)
    5f4c:	4a0b      	ldr	r2, [pc, #44]	; (5f7c <att_timeout+0x34>)
    5f4e:	490c      	ldr	r1, [pc, #48]	; (5f80 <att_timeout+0x38>)
    5f50:	9301      	str	r3, [sp, #4]
{
    5f52:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    5f54:	9300      	str	r3, [sp, #0]
    5f56:	480b      	ldr	r0, [pc, #44]	; (5f84 <att_timeout+0x3c>)
    5f58:	4b0b      	ldr	r3, [pc, #44]	; (5f88 <att_timeout+0x40>)
    5f5a:	f7fb f817 	bl	f8c <printk>
	att_reset(att);
    5f5e:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
    5f62:	f7ff ffaa 	bl	5eba <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    5f66:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    5f6a:	f001 faf9 	bl	7560 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    5f6e:	2300      	movs	r3, #0
    5f70:	f844 3ca4 	str.w	r3, [r4, #-164]
}
    5f74:	b002      	add	sp, #8
    5f76:	bd10      	pop	{r4, pc}
    5f78:	000153a9 	.word	0x000153a9
    5f7c:	00016765 	.word	0x00016765
    5f80:	000167b4 	.word	0x000167b4
    5f84:	0001750c 	.word	0x0001750c
    5f88:	00017400 	.word	0x00017400

00005f8c <read_cb>:
{
    5f8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5f90:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5f92:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    5f94:	f8d1 9000 	ldr.w	r9, [r1]
{
    5f98:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5f9a:	3008      	adds	r0, #8
    5f9c:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    5f9e:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5fa2:	f00d fbe5 	bl	13770 <net_buf_simple_add>
	data->err = 0x00;
    5fa6:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5fa8:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    5faa:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5fac:	2115      	movs	r1, #21
    5fae:	4630      	mov	r0, r6
    5fb0:	f7ff fd3a 	bl	5a28 <check_perm.isra.4>
    5fb4:	4605      	mov	r5, r0
    5fb6:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    5fb8:	bb08      	cbnz	r0, 5ffe <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5fba:	68a1      	ldr	r1, [r4, #8]
    5fbc:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    5fc0:	898a      	ldrh	r2, [r1, #12]
    5fc2:	6889      	ldr	r1, [r1, #8]
    5fc4:	88a0      	ldrh	r0, [r4, #4]
    5fc6:	9000      	str	r0, [sp, #0]
    5fc8:	1a9b      	subs	r3, r3, r2
    5fca:	6877      	ldr	r7, [r6, #4]
    5fcc:	440a      	add	r2, r1
    5fce:	b29b      	uxth	r3, r3
    5fd0:	4631      	mov	r1, r6
    5fd2:	4640      	mov	r0, r8
    5fd4:	47b8      	blx	r7
	if (read < 0) {
    5fd6:	1e01      	subs	r1, r0, #0
    5fd8:	da0b      	bge.n	5ff2 <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    5fda:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5fde:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5fe0:	bf9a      	itte	ls
    5fe2:	4249      	negls	r1, r1
    5fe4:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    5fe6:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5fe8:	7421      	strb	r1, [r4, #16]
}
    5fea:	4628      	mov	r0, r5
    5fec:	b003      	add	sp, #12
    5fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    5ff2:	68a0      	ldr	r0, [r4, #8]
    5ff4:	3008      	adds	r0, #8
    5ff6:	f00d fbbb 	bl	13770 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    5ffa:	2501      	movs	r5, #1
    5ffc:	e7f5      	b.n	5fea <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    5ffe:	463d      	mov	r5, r7
    6000:	e7f3      	b.n	5fea <read_cb+0x5e>
	...

00006004 <bt_att_create_pdu>:
{
    6004:	b530      	push	{r4, r5, lr}
    6006:	b085      	sub	sp, #20
    6008:	460d      	mov	r5, r1
    600a:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    600c:	f7ff fe06 	bl	5c1c <att_chan_get>
	if (!att) {
    6010:	b1f0      	cbz	r0, 6050 <bt_att_create_pdu+0x4c>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    6012:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
    6016:	3401      	adds	r4, #1
    6018:	428c      	cmp	r4, r1
    601a:	d90e      	bls.n	603a <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    601c:	4b0d      	ldr	r3, [pc, #52]	; (6054 <bt_att_create_pdu+0x50>)
    601e:	9303      	str	r3, [sp, #12]
    6020:	9402      	str	r4, [sp, #8]
    6022:	9101      	str	r1, [sp, #4]
    6024:	9300      	str	r3, [sp, #0]
    6026:	4a0c      	ldr	r2, [pc, #48]	; (6058 <bt_att_create_pdu+0x54>)
    6028:	4b0c      	ldr	r3, [pc, #48]	; (605c <bt_att_create_pdu+0x58>)
    602a:	490d      	ldr	r1, [pc, #52]	; (6060 <bt_att_create_pdu+0x5c>)
    602c:	480d      	ldr	r0, [pc, #52]	; (6064 <bt_att_create_pdu+0x60>)
    602e:	f7fa ffad 	bl	f8c <printk>
		return NULL;
    6032:	2400      	movs	r4, #0
}
    6034:	4620      	mov	r0, r4
    6036:	b005      	add	sp, #20
    6038:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    603a:	2100      	movs	r1, #0
    603c:	4608      	mov	r0, r1
    603e:	f7ff f9ec 	bl	541a <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6042:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    6044:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6046:	3008      	adds	r0, #8
    6048:	f00d fb92 	bl	13770 <net_buf_simple_add>
	hdr->code = op;
    604c:	7005      	strb	r5, [r0, #0]
	return buf;
    604e:	e7f1      	b.n	6034 <bt_att_create_pdu+0x30>
		return NULL;
    6050:	4604      	mov	r4, r0
    6052:	e7ef      	b.n	6034 <bt_att_create_pdu+0x30>
    6054:	000153a9 	.word	0x000153a9
    6058:	000167ef 	.word	0x000167ef
    605c:	000173ee 	.word	0x000173ee
    6060:	000167b4 	.word	0x000167b4
    6064:	0001755d 	.word	0x0001755d

00006068 <att_indicate>:
{
    6068:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    606a:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    606c:	f101 0008 	add.w	r0, r1, #8
{
    6070:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    6072:	f00d fbbb 	bl	137ec <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    6076:	89ab      	ldrh	r3, [r5, #12]
    6078:	68aa      	ldr	r2, [r5, #8]
    607a:	4601      	mov	r1, r0
    607c:	4620      	mov	r0, r4
    607e:	f001 fa19 	bl	74b4 <bt_gatt_notification>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    6082:	2200      	movs	r2, #0
    6084:	211e      	movs	r1, #30
    6086:	4620      	mov	r0, r4
    6088:	f7ff ffbc 	bl	6004 <bt_att_create_pdu>
	if (!buf) {
    608c:	4602      	mov	r2, r0
    608e:	b120      	cbz	r0, 609a <att_indicate+0x32>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    6090:	4b03      	ldr	r3, [pc, #12]	; (60a0 <att_indicate+0x38>)
    6092:	2104      	movs	r1, #4
    6094:	4620      	mov	r0, r4
    6096:	f7ff f9c3 	bl	5420 <bt_l2cap_send_cb>
}
    609a:	2000      	movs	r0, #0
    609c:	bd38      	pop	{r3, r4, r5, pc}
    609e:	bf00      	nop
    60a0:	00005bef 	.word	0x00005bef

000060a4 <att_mtu_req>:
{
    60a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    60a8:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    60aa:	881b      	ldrh	r3, [r3, #0]
    60ac:	2b16      	cmp	r3, #22
{
    60ae:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    60b0:	d91c      	bls.n	60ec <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    60b2:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    60b6:	2202      	movs	r2, #2
    60b8:	2103      	movs	r1, #3
    60ba:	4640      	mov	r0, r8
    60bc:	f7ff ffa2 	bl	6004 <bt_att_create_pdu>
	if (!pdu) {
    60c0:	4607      	mov	r7, r0
    60c2:	b1b0      	cbz	r0, 60f2 <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    60c4:	2102      	movs	r1, #2
    60c6:	3008      	adds	r0, #8
    60c8:	f00d fb52 	bl	13770 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    60cc:	2617      	movs	r6, #23
    60ce:	2400      	movs	r4, #0
    60d0:	7006      	strb	r6, [r0, #0]
    60d2:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    60d4:	4b08      	ldr	r3, [pc, #32]	; (60f8 <att_mtu_req+0x54>)
    60d6:	4640      	mov	r0, r8
    60d8:	463a      	mov	r2, r7
    60da:	2104      	movs	r1, #4
    60dc:	f7ff f9a0 	bl	5420 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    60e0:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    60e2:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	return 0;
    60e6:	4620      	mov	r0, r4
    60e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    60ec:	2004      	movs	r0, #4
    60ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    60f2:	200e      	movs	r0, #14
}
    60f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60f8:	00005bc1 	.word	0x00005bc1

000060fc <send_err_rsp.part.10>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    60fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6100:	4688      	mov	r8, r1
    6102:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    6104:	2101      	movs	r1, #1
    6106:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    6108:	4605      	mov	r5, r0
    610a:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    610c:	f7ff ff7a 	bl	6004 <bt_att_create_pdu>
	if (!buf) {
    6110:	4604      	mov	r4, r0
    6112:	b180      	cbz	r0, 6136 <send_err_rsp.part.10+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    6114:	2104      	movs	r1, #4
    6116:	3008      	adds	r0, #8
    6118:	f00d fb2a 	bl	13770 <net_buf_simple_add>
	rsp->request = req;
    611c:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    6120:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    6122:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    6126:	4622      	mov	r2, r4
    6128:	4628      	mov	r0, r5
    612a:	4b04      	ldr	r3, [pc, #16]	; (613c <send_err_rsp.part.10+0x40>)
    612c:	2104      	movs	r1, #4
}
    612e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    6132:	f7ff b975 	b.w	5420 <bt_l2cap_send_cb>
    6136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    613a:	bf00      	nop
    613c:	00005bc1 	.word	0x00005bc1

00006140 <bt_att_recv>:
{
    6140:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    6142:	898b      	ldrh	r3, [r1, #12]
{
    6144:	b085      	sub	sp, #20
    6146:	4604      	mov	r4, r0
    6148:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    614a:	b953      	cbnz	r3, 6162 <bt_att_recv+0x22>
		BT_ERR("Too small ATT PDU received");
    614c:	4b4b      	ldr	r3, [pc, #300]	; (627c <bt_att_recv+0x13c>)
    614e:	9301      	str	r3, [sp, #4]
    6150:	9300      	str	r3, [sp, #0]
    6152:	4a4b      	ldr	r2, [pc, #300]	; (6280 <bt_att_recv+0x140>)
    6154:	4b4b      	ldr	r3, [pc, #300]	; (6284 <bt_att_recv+0x144>)
    6156:	494c      	ldr	r1, [pc, #304]	; (6288 <bt_att_recv+0x148>)
    6158:	484c      	ldr	r0, [pc, #304]	; (628c <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected request");
    615a:	f7fa ff17 	bl	f8c <printk>
}
    615e:	b005      	add	sp, #20
    6160:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    6162:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    6164:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    6166:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    616a:	f00d fb2f 	bl	137cc <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    616e:	4a48      	ldr	r2, [pc, #288]	; (6290 <bt_att_recv+0x150>)
    6170:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6172:	2300      	movs	r3, #0
    6174:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    6176:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    617a:	4286      	cmp	r6, r0
    617c:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    6180:	d11c      	bne.n	61bc <bt_att_recv+0x7c>
		if (handler->type == ATT_REQUEST &&
    6182:	4472      	add	r2, lr
    6184:	7896      	ldrb	r6, [r2, #2]
    6186:	2e01      	cmp	r6, #1
    6188:	d136      	bne.n	61f8 <bt_att_recv+0xb8>
    618a:	f3bf 8f5b 	dmb	ish
    618e:	f104 0294 	add.w	r2, r4, #148	; 0x94
    6192:	e852 3f00 	ldrex	r3, [r2]
    6196:	f043 0001 	orr.w	r0, r3, #1
    619a:	e842 0c00 	strex	ip, r0, [r2]
    619e:	f1bc 0f00 	cmp.w	ip, #0
    61a2:	d1f6      	bne.n	6192 <bt_att_recv+0x52>
    61a4:	f3bf 8f5b 	dmb	ish
    61a8:	07da      	lsls	r2, r3, #31
    61aa:	d540      	bpl.n	622e <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected request");
    61ac:	4b33      	ldr	r3, [pc, #204]	; (627c <bt_att_recv+0x13c>)
    61ae:	9301      	str	r3, [sp, #4]
    61b0:	9300      	str	r3, [sp, #0]
    61b2:	4a38      	ldr	r2, [pc, #224]	; (6294 <bt_att_recv+0x154>)
    61b4:	4b33      	ldr	r3, [pc, #204]	; (6284 <bt_att_recv+0x144>)
    61b6:	4934      	ldr	r1, [pc, #208]	; (6288 <bt_att_recv+0x148>)
    61b8:	4837      	ldr	r0, [pc, #220]	; (6298 <bt_att_recv+0x158>)
    61ba:	e7ce      	b.n	615a <bt_att_recv+0x1a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    61bc:	3301      	adds	r3, #1
    61be:	2b1b      	cmp	r3, #27
    61c0:	d1d9      	bne.n	6176 <bt_att_recv+0x36>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    61c2:	4b2e      	ldr	r3, [pc, #184]	; (627c <bt_att_recv+0x13c>)
    61c4:	9302      	str	r3, [sp, #8]
    61c6:	9001      	str	r0, [sp, #4]
    61c8:	9300      	str	r3, [sp, #0]
    61ca:	4a32      	ldr	r2, [pc, #200]	; (6294 <bt_att_recv+0x154>)
    61cc:	4b2d      	ldr	r3, [pc, #180]	; (6284 <bt_att_recv+0x144>)
    61ce:	492e      	ldr	r1, [pc, #184]	; (6288 <bt_att_recv+0x148>)
    61d0:	4832      	ldr	r0, [pc, #200]	; (629c <bt_att_recv+0x15c>)
    61d2:	f7fa fedb 	bl	f8c <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    61d6:	782d      	ldrb	r5, [r5, #0]
    61d8:	4628      	mov	r0, r5
    61da:	f7ff fa9d 	bl	5718 <att_op_get_type>
    61de:	2800      	cmp	r0, #0
    61e0:	d0bd      	beq.n	615e <bt_att_recv+0x1e>
	if (!req) {
    61e2:	2d00      	cmp	r5, #0
    61e4:	d0bb      	beq.n	615e <bt_att_recv+0x1e>
    61e6:	2306      	movs	r3, #6
    61e8:	2200      	movs	r2, #0
    61ea:	4629      	mov	r1, r5
    61ec:	6820      	ldr	r0, [r4, #0]
}
    61ee:	b005      	add	sp, #20
    61f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    61f4:	f7ff bf82 	b.w	60fc <send_err_rsp.part.10>
		} else if (handler->type == ATT_INDICATION &&
    61f8:	2e05      	cmp	r6, #5
    61fa:	d118      	bne.n	622e <bt_att_recv+0xee>
    61fc:	f3bf 8f5b 	dmb	ish
    6200:	f104 0294 	add.w	r2, r4, #148	; 0x94
    6204:	e852 3f00 	ldrex	r3, [r2]
    6208:	f043 0002 	orr.w	r0, r3, #2
    620c:	e842 0c00 	strex	ip, r0, [r2]
    6210:	f1bc 0f00 	cmp.w	ip, #0
    6214:	d1f6      	bne.n	6204 <bt_att_recv+0xc4>
    6216:	f3bf 8f5b 	dmb	ish
    621a:	079b      	lsls	r3, r3, #30
    621c:	d507      	bpl.n	622e <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected indication");
    621e:	4b17      	ldr	r3, [pc, #92]	; (627c <bt_att_recv+0x13c>)
    6220:	9301      	str	r3, [sp, #4]
    6222:	9300      	str	r3, [sp, #0]
    6224:	4a1b      	ldr	r2, [pc, #108]	; (6294 <bt_att_recv+0x154>)
    6226:	4b17      	ldr	r3, [pc, #92]	; (6284 <bt_att_recv+0x144>)
    6228:	4917      	ldr	r1, [pc, #92]	; (6288 <bt_att_recv+0x148>)
    622a:	481d      	ldr	r0, [pc, #116]	; (62a0 <bt_att_recv+0x160>)
    622c:	e795      	b.n	615a <bt_att_recv+0x1a>
	if (buf->len < handler->expect_len) {
    622e:	eb01 030e 	add.w	r3, r1, lr
    6232:	89ba      	ldrh	r2, [r7, #12]
    6234:	7859      	ldrb	r1, [r3, #1]
    6236:	4291      	cmp	r1, r2
    6238:	d90f      	bls.n	625a <bt_att_recv+0x11a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    623a:	4b10      	ldr	r3, [pc, #64]	; (627c <bt_att_recv+0x13c>)
    623c:	9303      	str	r3, [sp, #12]
    623e:	7829      	ldrb	r1, [r5, #0]
    6240:	9102      	str	r1, [sp, #8]
    6242:	9201      	str	r2, [sp, #4]
    6244:	9300      	str	r3, [sp, #0]
    6246:	4a0e      	ldr	r2, [pc, #56]	; (6280 <bt_att_recv+0x140>)
    6248:	4b0e      	ldr	r3, [pc, #56]	; (6284 <bt_att_recv+0x144>)
    624a:	490f      	ldr	r1, [pc, #60]	; (6288 <bt_att_recv+0x148>)
    624c:	4815      	ldr	r0, [pc, #84]	; (62a4 <bt_att_recv+0x164>)
    624e:	f7fa fe9d 	bl	f8c <printk>
	if (handler->type == ATT_REQUEST && err) {
    6252:	2e01      	cmp	r6, #1
    6254:	d183      	bne.n	615e <bt_att_recv+0x1e>
		err = BT_ATT_ERR_INVALID_PDU;
    6256:	2304      	movs	r3, #4
    6258:	e00a      	b.n	6270 <bt_att_recv+0x130>
		err = handler->func(att, buf);
    625a:	685b      	ldr	r3, [r3, #4]
    625c:	4639      	mov	r1, r7
    625e:	4620      	mov	r0, r4
    6260:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    6262:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    6264:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    6266:	f47f af7a 	bne.w	615e <bt_att_recv+0x1e>
    626a:	2800      	cmp	r0, #0
    626c:	f43f af77 	beq.w	615e <bt_att_recv+0x1e>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    6270:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    6272:	2900      	cmp	r1, #0
    6274:	f43f af73 	beq.w	615e <bt_att_recv+0x1e>
    6278:	2200      	movs	r2, #0
    627a:	e7b7      	b.n	61ec <bt_att_recv+0xac>
    627c:	000153a9 	.word	0x000153a9
    6280:	00016765 	.word	0x00016765
    6284:	000173d5 	.word	0x000173d5
    6288:	000167b4 	.word	0x000167b4
    628c:	00017592 	.word	0x00017592
    6290:	00017694 	.word	0x00017694
    6294:	000167ef 	.word	0x000167ef
    6298:	000175bd 	.word	0x000175bd
    629c:	00017647 	.word	0x00017647
    62a0:	000175e9 	.word	0x000175e9
    62a4:	00017618 	.word	0x00017618

000062a8 <att_read_group_req>:
{
    62a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    62ac:	898b      	ldrh	r3, [r1, #12]
    62ae:	2b06      	cmp	r3, #6
{
    62b0:	b08d      	sub	sp, #52	; 0x34
    62b2:	4680      	mov	r8, r0
    62b4:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    62b6:	d001      	beq.n	62bc <att_read_group_req+0x14>
    62b8:	2b14      	cmp	r3, #20
    62ba:	d168      	bne.n	638e <att_read_group_req+0xe6>
	req = (void *)buf->data;
    62bc:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    62be:	2104      	movs	r1, #4
	req = (void *)buf->data;
    62c0:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    62c4:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    62c8:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    62ca:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    62cc:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    62ce:	f00d fa7d 	bl	137cc <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    62d2:	4621      	mov	r1, r4
    62d4:	4638      	mov	r0, r7
    62d6:	f7ff fc25 	bl	5b24 <uuid_create>
    62da:	2800      	cmp	r0, #0
    62dc:	d059      	beq.n	6392 <att_read_group_req+0xea>
	if (!start || !end) {
    62de:	2d00      	cmp	r5, #0
    62e0:	d05a      	beq.n	6398 <att_read_group_req+0xf0>
    62e2:	2400      	movs	r4, #0
    62e4:	2e00      	cmp	r6, #0
    62e6:	d056      	beq.n	6396 <att_read_group_req+0xee>
	if (start > end) {
    62e8:	42b5      	cmp	r5, r6
    62ea:	d855      	bhi.n	6398 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    62ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    62f0:	4669      	mov	r1, sp
    62f2:	4638      	mov	r0, r7
    62f4:	f88d 4000 	strb.w	r4, [sp]
    62f8:	f8ad 3002 	strh.w	r3, [sp, #2]
    62fc:	f7fb fdfc 	bl	1ef8 <bt_uuid_cmp>
    6300:	bb38      	cbnz	r0, 6352 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    6302:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    6306:	2214      	movs	r2, #20
    6308:	2100      	movs	r1, #0
    630a:	a807      	add	r0, sp, #28
    630c:	f7fb fca2 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    6310:	2201      	movs	r2, #1
    6312:	2111      	movs	r1, #17
    6314:	4648      	mov	r0, r9
    6316:	f7ff fe75 	bl	6004 <bt_att_create_pdu>
    631a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    631c:	2800      	cmp	r0, #0
    631e:	d038      	beq.n	6392 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6320:	2101      	movs	r1, #1
    6322:	3008      	adds	r0, #8
	data.uuid = uuid;
    6324:	9708      	str	r7, [sp, #32]
	data.att = att;
    6326:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    632a:	f00d fa21 	bl	13770 <net_buf_simple_add>
	data.rsp->len = 0;
    632e:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6330:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6332:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    6334:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6336:	4a1c      	ldr	r2, [pc, #112]	; (63a8 <att_read_group_req+0x100>)
	data.group = NULL;
    6338:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    633a:	4631      	mov	r1, r6
    633c:	4628      	mov	r0, r5
    633e:	f000 ff71 	bl	7224 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    6342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6344:	781c      	ldrb	r4, [r3, #0]
    6346:	b9d4      	cbnz	r4, 637e <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    6348:	9809      	ldr	r0, [sp, #36]	; 0x24
    634a:	f00d f9df 	bl	1370c <net_buf_unref>
    634e:	230a      	movs	r3, #10
    6350:	e00c      	b.n	636c <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    6352:	f642 0301 	movw	r3, #10241	; 0x2801
    6356:	a901      	add	r1, sp, #4
    6358:	4638      	mov	r0, r7
    635a:	f88d 4004 	strb.w	r4, [sp, #4]
    635e:	f8ad 3006 	strh.w	r3, [sp, #6]
    6362:	f7fb fdc9 	bl	1ef8 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6366:	2800      	cmp	r0, #0
    6368:	d0cb      	beq.n	6302 <att_read_group_req+0x5a>
    636a:	2310      	movs	r3, #16
    636c:	462a      	mov	r2, r5
    636e:	2110      	movs	r1, #16
    6370:	4648      	mov	r0, r9
    6372:	f7ff fec3 	bl	60fc <send_err_rsp.part.10>
}
    6376:	4620      	mov	r0, r4
    6378:	b00d      	add	sp, #52	; 0x34
    637a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    637e:	4b0b      	ldr	r3, [pc, #44]	; (63ac <att_read_group_req+0x104>)
    6380:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6382:	2104      	movs	r1, #4
    6384:	4648      	mov	r0, r9
    6386:	f7ff f84b 	bl	5420 <bt_l2cap_send_cb>
		return 0;
    638a:	2400      	movs	r4, #0
    638c:	e7f3      	b.n	6376 <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    638e:	2404      	movs	r4, #4
    6390:	e7f1      	b.n	6376 <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    6392:	240e      	movs	r4, #14
    6394:	e7ef      	b.n	6376 <att_read_group_req+0xce>
			*err = 0;
    6396:	4635      	mov	r5, r6
    6398:	2301      	movs	r3, #1
    639a:	462a      	mov	r2, r5
    639c:	2110      	movs	r1, #16
    639e:	4648      	mov	r0, r9
    63a0:	f7ff feac 	bl	60fc <send_err_rsp.part.10>
    63a4:	e7f1      	b.n	638a <att_read_group_req+0xe2>
    63a6:	bf00      	nop
    63a8:	000057ed 	.word	0x000057ed
    63ac:	00005bc1 	.word	0x00005bc1

000063b0 <att_read_mult_req>:
{
    63b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    63b4:	6804      	ldr	r4, [r0, #0]
{
    63b6:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    63b8:	2214      	movs	r2, #20
{
    63ba:	4606      	mov	r6, r0
    63bc:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    63be:	a801      	add	r0, sp, #4
    63c0:	2100      	movs	r1, #0
    63c2:	f7fb fc47 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    63c6:	2200      	movs	r2, #0
    63c8:	210f      	movs	r1, #15
    63ca:	4620      	mov	r0, r4
    63cc:	f7ff fe1a 	bl	6004 <bt_att_create_pdu>
    63d0:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    63d2:	b368      	cbz	r0, 6430 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    63d4:	f8df 9060 	ldr.w	r9, [pc, #96]	; 6438 <att_read_mult_req+0x88>
	data.att = att;
    63d8:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    63da:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    63de:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    63e2:	89ab      	ldrh	r3, [r5, #12]
    63e4:	2b01      	cmp	r3, #1
    63e6:	d806      	bhi.n	63f6 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    63e8:	4b12      	ldr	r3, [pc, #72]	; (6434 <att_read_mult_req+0x84>)
    63ea:	9a03      	ldr	r2, [sp, #12]
    63ec:	2104      	movs	r1, #4
    63ee:	4620      	mov	r0, r4
    63f0:	f7ff f816 	bl	5420 <bt_l2cap_send_cb>
    63f4:	e018      	b.n	6428 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    63f6:	4638      	mov	r0, r7
    63f8:	f00d f9f8 	bl	137ec <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    63fc:	ab01      	add	r3, sp, #4
    63fe:	464a      	mov	r2, r9
    6400:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    6402:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6404:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6408:	f000 ff0c 	bl	7224 <bt_gatt_foreach_attr>
		if (data.err) {
    640c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6410:	2b00      	cmp	r3, #0
    6412:	d0e6      	beq.n	63e2 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    6414:	9803      	ldr	r0, [sp, #12]
    6416:	f00d f979 	bl	1370c <net_buf_unref>
    641a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    641e:	4632      	mov	r2, r6
    6420:	210e      	movs	r1, #14
    6422:	4620      	mov	r0, r4
    6424:	f7ff fe6a 	bl	60fc <send_err_rsp.part.10>
	return 0;
    6428:	2000      	movs	r0, #0
}
    642a:	b007      	add	sp, #28
    642c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    6430:	200e      	movs	r0, #14
    6432:	e7fa      	b.n	642a <att_read_mult_req+0x7a>
    6434:	00005bc1 	.word	0x00005bc1
    6438:	00005f8d 	.word	0x00005f8d

0000643c <att_read_rsp>:
{
    643c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6440:	4607      	mov	r7, r0
    6442:	b086      	sub	sp, #24
    6444:	460c      	mov	r4, r1
    6446:	4690      	mov	r8, r2
	if (!handle) {
    6448:	461d      	mov	r5, r3
    644a:	b3a3      	cbz	r3, 64b6 <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    644c:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    644e:	2214      	movs	r2, #20
    6450:	2100      	movs	r1, #0
    6452:	a801      	add	r0, sp, #4
    6454:	f7fb fbfe 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    6458:	2200      	movs	r2, #0
    645a:	4641      	mov	r1, r8
    645c:	4630      	mov	r0, r6
    645e:	f7ff fdd1 	bl	6004 <bt_att_create_pdu>
    6462:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    6464:	b348      	cbz	r0, 64ba <att_read_rsp+0x7e>
	data.offset = offset;
    6466:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    646a:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    646e:	2301      	movs	r3, #1
    6470:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6474:	4a12      	ldr	r2, [pc, #72]	; (64c0 <att_read_rsp+0x84>)
	data.att = att;
    6476:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6478:	ab01      	add	r3, sp, #4
    647a:	4629      	mov	r1, r5
    647c:	4628      	mov	r0, r5
    647e:	f000 fed1 	bl	7224 <bt_gatt_foreach_attr>
	if (data.err) {
    6482:	f89d 7014 	ldrb.w	r7, [sp, #20]
    6486:	b17f      	cbz	r7, 64a8 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    6488:	9803      	ldr	r0, [sp, #12]
    648a:	f00d f93f 	bl	1370c <net_buf_unref>
	if (!req) {
    648e:	b13c      	cbz	r4, 64a0 <att_read_rsp+0x64>
    6490:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6494:	462a      	mov	r2, r5
    6496:	4621      	mov	r1, r4
    6498:	4630      	mov	r0, r6
    649a:	f7ff fe2f 	bl	60fc <send_err_rsp.part.10>
		return 0;
    649e:	2400      	movs	r4, #0
}
    64a0:	4620      	mov	r0, r4
    64a2:	b006      	add	sp, #24
    64a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    64a8:	4b06      	ldr	r3, [pc, #24]	; (64c4 <att_read_rsp+0x88>)
    64aa:	9a03      	ldr	r2, [sp, #12]
    64ac:	2104      	movs	r1, #4
    64ae:	4630      	mov	r0, r6
    64b0:	f7fe ffb6 	bl	5420 <bt_l2cap_send_cb>
    64b4:	e7f3      	b.n	649e <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    64b6:	2401      	movs	r4, #1
    64b8:	e7f2      	b.n	64a0 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    64ba:	240e      	movs	r4, #14
    64bc:	e7f0      	b.n	64a0 <att_read_rsp+0x64>
    64be:	bf00      	nop
    64c0:	00005f8d 	.word	0x00005f8d
    64c4:	00005bc1 	.word	0x00005bc1

000064c8 <att_read_blob_req>:
{
    64c8:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    64ca:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    64cc:	8813      	ldrh	r3, [r2, #0]
    64ce:	8852      	ldrh	r2, [r2, #2]
    64d0:	9200      	str	r2, [sp, #0]
    64d2:	210c      	movs	r1, #12
    64d4:	220d      	movs	r2, #13
    64d6:	f7ff ffb1 	bl	643c <att_read_rsp>
}
    64da:	b003      	add	sp, #12
    64dc:	f85d fb04 	ldr.w	pc, [sp], #4

000064e0 <att_read_req>:
{
    64e0:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    64e2:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    64e4:	2200      	movs	r2, #0
    64e6:	881b      	ldrh	r3, [r3, #0]
    64e8:	9200      	str	r2, [sp, #0]
    64ea:	210a      	movs	r1, #10
    64ec:	220b      	movs	r2, #11
    64ee:	f7ff ffa5 	bl	643c <att_read_rsp>
}
    64f2:	b003      	add	sp, #12
    64f4:	f85d fb04 	ldr.w	pc, [sp], #4

000064f8 <att_read_type_req>:
{
    64f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    64fc:	898b      	ldrh	r3, [r1, #12]
    64fe:	2b06      	cmp	r3, #6
{
    6500:	b08d      	sub	sp, #52	; 0x34
    6502:	4607      	mov	r7, r0
    6504:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6506:	d001      	beq.n	650c <att_read_type_req+0x14>
    6508:	2b14      	cmp	r3, #20
    650a:	d152      	bne.n	65b2 <att_read_type_req+0xba>
	req = (void *)buf->data;
    650c:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    650e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    6510:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    6514:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6518:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    651a:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    651c:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    6520:	f00d f954 	bl	137cc <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    6524:	4631      	mov	r1, r6
    6526:	4640      	mov	r0, r8
    6528:	f7ff fafc 	bl	5b24 <uuid_create>
    652c:	b198      	cbz	r0, 6556 <att_read_type_req+0x5e>
	if (!start || !end) {
    652e:	2d00      	cmp	r5, #0
    6530:	d042      	beq.n	65b8 <att_read_type_req+0xc0>
    6532:	2c00      	cmp	r4, #0
    6534:	d03f      	beq.n	65b6 <att_read_type_req+0xbe>
	if (start > end) {
    6536:	42a5      	cmp	r5, r4
    6538:	d83e      	bhi.n	65b8 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    653a:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    653c:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    653e:	2100      	movs	r1, #0
    6540:	eb0d 0002 	add.w	r0, sp, r2
    6544:	f7fb fb86 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    6548:	2201      	movs	r2, #1
    654a:	2109      	movs	r1, #9
    654c:	4630      	mov	r0, r6
    654e:	f7ff fd59 	bl	6004 <bt_att_create_pdu>
    6552:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    6554:	b908      	cbnz	r0, 655a <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    6556:	240e      	movs	r4, #14
    6558:	e027      	b.n	65aa <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    655a:	2101      	movs	r1, #1
    655c:	3008      	adds	r0, #8
	data.att = att;
    655e:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    6560:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6564:	f00d f904 	bl	13770 <net_buf_simple_add>
	data.rsp->len = 0;
    6568:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    656a:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    656c:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    656e:	4621      	mov	r1, r4
	data.rsp->len = 0;
    6570:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6572:	4a14      	ldr	r2, [pc, #80]	; (65c4 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6574:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6578:	4628      	mov	r0, r5
    657a:	ab06      	add	r3, sp, #24
    657c:	f000 fe52 	bl	7224 <bt_gatt_foreach_attr>
	if (data.err) {
    6580:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    6584:	b15c      	cbz	r4, 659e <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    6586:	9808      	ldr	r0, [sp, #32]
    6588:	f00d f8c0 	bl	1370c <net_buf_unref>
    658c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    6590:	462a      	mov	r2, r5
    6592:	2108      	movs	r1, #8
    6594:	4630      	mov	r0, r6
    6596:	f7ff fdb1 	bl	60fc <send_err_rsp.part.10>
		return 0;
    659a:	2400      	movs	r4, #0
    659c:	e005      	b.n	65aa <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    659e:	4b0a      	ldr	r3, [pc, #40]	; (65c8 <att_read_type_req+0xd0>)
    65a0:	9a08      	ldr	r2, [sp, #32]
    65a2:	2104      	movs	r1, #4
    65a4:	4630      	mov	r0, r6
    65a6:	f7fe ff3b 	bl	5420 <bt_l2cap_send_cb>
}
    65aa:	4620      	mov	r0, r4
    65ac:	b00d      	add	sp, #52	; 0x34
    65ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    65b2:	2404      	movs	r4, #4
    65b4:	e7f9      	b.n	65aa <att_read_type_req+0xb2>
			*err = 0;
    65b6:	4625      	mov	r5, r4
    65b8:	2301      	movs	r3, #1
    65ba:	462a      	mov	r2, r5
    65bc:	2108      	movs	r1, #8
    65be:	4648      	mov	r0, r9
    65c0:	e7e9      	b.n	6596 <att_read_type_req+0x9e>
    65c2:	bf00      	nop
    65c4:	00005a69 	.word	0x00005a69
    65c8:	00005bc1 	.word	0x00005bc1

000065cc <att_find_type_req>:
{
    65cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    65d0:	f8d0 9000 	ldr.w	r9, [r0]
{
    65d4:	4680      	mov	r8, r0
	req = (void *)buf->data;
    65d6:	4608      	mov	r0, r1
{
    65d8:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    65da:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    65de:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    65e0:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    65e2:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    65e4:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    65e6:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    65e8:	f00d f8f0 	bl	137cc <net_buf_simple_pull>
    65ec:	4682      	mov	sl, r0
	if (!start || !end) {
    65ee:	2d00      	cmp	r5, #0
    65f0:	d057      	beq.n	66a2 <att_find_type_req+0xd6>
    65f2:	2400      	movs	r4, #0
    65f4:	2f00      	cmp	r7, #0
    65f6:	d053      	beq.n	66a0 <att_find_type_req+0xd4>
	if (start > end) {
    65f8:	42bd      	cmp	r5, r7
    65fa:	d852      	bhi.n	66a2 <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    65fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6600:	a902      	add	r1, sp, #8
    6602:	a801      	add	r0, sp, #4
    6604:	f8ad 6006 	strh.w	r6, [sp, #6]
    6608:	f88d 4004 	strb.w	r4, [sp, #4]
    660c:	f88d 4008 	strb.w	r4, [sp, #8]
    6610:	f8ad 300a 	strh.w	r3, [sp, #10]
    6614:	f7fb fc70 	bl	1ef8 <bt_uuid_cmp>
    6618:	4606      	mov	r6, r0
    661a:	b148      	cbz	r0, 6630 <att_find_type_req+0x64>
    661c:	230a      	movs	r3, #10
    661e:	462a      	mov	r2, r5
    6620:	2106      	movs	r1, #6
    6622:	4648      	mov	r0, r9
    6624:	f7ff fd6a 	bl	60fc <send_err_rsp.part.10>
}
    6628:	4620      	mov	r0, r4
    662a:	b009      	add	sp, #36	; 0x24
    662c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    6630:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    6634:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    6638:	2214      	movs	r2, #20
    663a:	4631      	mov	r1, r6
    663c:	a803      	add	r0, sp, #12
    663e:	f7fb fb09 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    6642:	4632      	mov	r2, r6
    6644:	2107      	movs	r1, #7
    6646:	4648      	mov	r0, r9
    6648:	f7ff fcdc 	bl	6004 <bt_att_create_pdu>
    664c:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    664e:	b328      	cbz	r0, 669c <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6650:	230a      	movs	r3, #10
    6652:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6656:	4a14      	ldr	r2, [pc, #80]	; (66a8 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    6658:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    665c:	ab03      	add	r3, sp, #12
    665e:	4639      	mov	r1, r7
    6660:	4628      	mov	r0, r5
	data.att = att;
    6662:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    6666:	9605      	str	r6, [sp, #20]
	data.value = value;
    6668:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    666c:	f000 fdda 	bl	7224 <bt_gatt_foreach_attr>
	if (data.err) {
    6670:	f89d 401d 	ldrb.w	r4, [sp, #29]
    6674:	b15c      	cbz	r4, 668e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    6676:	9804      	ldr	r0, [sp, #16]
    6678:	f00d f848 	bl	1370c <net_buf_unref>
    667c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    6680:	462a      	mov	r2, r5
    6682:	2106      	movs	r1, #6
    6684:	4648      	mov	r0, r9
    6686:	f7ff fd39 	bl	60fc <send_err_rsp.part.10>
		return 0;
    668a:	2400      	movs	r4, #0
    668c:	e7cc      	b.n	6628 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    668e:	4b07      	ldr	r3, [pc, #28]	; (66ac <att_find_type_req+0xe0>)
    6690:	9a04      	ldr	r2, [sp, #16]
    6692:	2104      	movs	r1, #4
    6694:	4648      	mov	r0, r9
    6696:	f7fe fec3 	bl	5420 <bt_l2cap_send_cb>
    669a:	e7c5      	b.n	6628 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    669c:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    669e:	e7c3      	b.n	6628 <att_find_type_req+0x5c>
			*err = 0;
    66a0:	463d      	mov	r5, r7
    66a2:	2301      	movs	r3, #1
    66a4:	e7ec      	b.n	6680 <att_find_type_req+0xb4>
    66a6:	bf00      	nop
    66a8:	00005955 	.word	0x00005955
    66ac:	00005bc1 	.word	0x00005bc1

000066b0 <att_find_info_req>:
{
    66b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    66b2:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    66b4:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    66b6:	881d      	ldrh	r5, [r3, #0]
{
    66b8:	b085      	sub	sp, #20
    66ba:	4607      	mov	r7, r0
	if (!start || !end) {
    66bc:	b375      	cbz	r5, 671c <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    66be:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    66c0:	b35c      	cbz	r4, 671a <att_find_info_req+0x6a>
	if (start > end) {
    66c2:	42a5      	cmp	r5, r4
    66c4:	d82a      	bhi.n	671c <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    66c6:	2210      	movs	r2, #16
    66c8:	2100      	movs	r1, #0
    66ca:	4668      	mov	r0, sp
    66cc:	f7fb fac2 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    66d0:	2200      	movs	r2, #0
    66d2:	2105      	movs	r1, #5
    66d4:	4630      	mov	r0, r6
    66d6:	f7ff fc95 	bl	6004 <bt_att_create_pdu>
    66da:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    66dc:	b910      	cbnz	r0, 66e4 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    66de:	200e      	movs	r0, #14
}
    66e0:	b005      	add	sp, #20
    66e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    66e4:	4621      	mov	r1, r4
    66e6:	466b      	mov	r3, sp
    66e8:	4a0d      	ldr	r2, [pc, #52]	; (6720 <att_find_info_req+0x70>)
	data.att = att;
    66ea:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    66ec:	4628      	mov	r0, r5
    66ee:	f000 fd99 	bl	7224 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    66f2:	9c02      	ldr	r4, [sp, #8]
    66f4:	b94c      	cbnz	r4, 670a <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    66f6:	9801      	ldr	r0, [sp, #4]
    66f8:	f00d f808 	bl	1370c <net_buf_unref>
    66fc:	230a      	movs	r3, #10
    66fe:	462a      	mov	r2, r5
    6700:	2104      	movs	r1, #4
    6702:	4630      	mov	r0, r6
    6704:	f7ff fcfa 	bl	60fc <send_err_rsp.part.10>
    6708:	e005      	b.n	6716 <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    670a:	4b06      	ldr	r3, [pc, #24]	; (6724 <att_find_info_req+0x74>)
    670c:	9a01      	ldr	r2, [sp, #4]
    670e:	2104      	movs	r1, #4
    6710:	4630      	mov	r0, r6
    6712:	f7fe fe85 	bl	5420 <bt_l2cap_send_cb>
		return 0;
    6716:	2000      	movs	r0, #0
    6718:	e7e2      	b.n	66e0 <att_find_info_req+0x30>
			*err = 0;
    671a:	4625      	mov	r5, r4
    671c:	2301      	movs	r3, #1
    671e:	e7ee      	b.n	66fe <att_find_info_req+0x4e>
    6720:	000058bb 	.word	0x000058bb
    6724:	00005bc1 	.word	0x00005bc1

00006728 <att_write_rsp.part.11.constprop.17>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    6728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    672c:	b086      	sub	sp, #24
    672e:	4690      	mov	r8, r2
    6730:	4605      	mov	r5, r0
    6732:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    6734:	2218      	movs	r2, #24
    6736:	2100      	movs	r1, #0
    6738:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    673a:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    673c:	f7fb fa8a 	bl	1c54 <memset>
	if (rsp) {
    6740:	f1b8 0f00 	cmp.w	r8, #0
    6744:	d11f      	bne.n	6786 <att_write_rsp.part.11.constprop.17+0x5e>
	data.offset = offset;
    6746:	2300      	movs	r3, #0
    6748:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    674c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    674e:	9303      	str	r3, [sp, #12]
	data.len = len;
    6750:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    6754:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6758:	2301      	movs	r3, #1
    675a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    675e:	4a1b      	ldr	r2, [pc, #108]	; (67cc <att_write_rsp.part.11.constprop.17+0xa4>)
	data.conn = conn;
    6760:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6762:	466b      	mov	r3, sp
    6764:	4639      	mov	r1, r7
    6766:	4638      	mov	r0, r7
	data.op = op;
    6768:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    676c:	f000 fd5a 	bl	7224 <bt_gatt_foreach_attr>
	if (data.err) {
    6770:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6774:	b98c      	cbnz	r4, 679a <att_write_rsp.part.11.constprop.17+0x72>
	if (data.buf) {
    6776:	9a01      	ldr	r2, [sp, #4]
    6778:	b1b2      	cbz	r2, 67a8 <att_write_rsp.part.11.constprop.17+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    677a:	4b15      	ldr	r3, [pc, #84]	; (67d0 <att_write_rsp.part.11.constprop.17+0xa8>)
    677c:	2104      	movs	r1, #4
    677e:	4628      	mov	r0, r5
    6780:	f7fe fe4e 	bl	5420 <bt_l2cap_send_cb>
    6784:	e011      	b.n	67aa <att_write_rsp.part.11.constprop.17+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    6786:	2200      	movs	r2, #0
    6788:	4641      	mov	r1, r8
    678a:	4628      	mov	r0, r5
    678c:	f7ff fc3a 	bl	6004 <bt_att_create_pdu>
    6790:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    6792:	2800      	cmp	r0, #0
    6794:	d1d7      	bne.n	6746 <att_write_rsp.part.11.constprop.17+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    6796:	240e      	movs	r4, #14
    6798:	e007      	b.n	67aa <att_write_rsp.part.11.constprop.17+0x82>
		if (rsp) {
    679a:	f1b8 0f00 	cmp.w	r8, #0
    679e:	d00f      	beq.n	67c0 <att_write_rsp.part.11.constprop.17+0x98>
			net_buf_unref(data.buf);
    67a0:	9801      	ldr	r0, [sp, #4]
    67a2:	f00c ffb3 	bl	1370c <net_buf_unref>
	if (!req) {
    67a6:	b926      	cbnz	r6, 67b2 <att_write_rsp.part.11.constprop.17+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    67a8:	2400      	movs	r4, #0
}
    67aa:	4620      	mov	r0, r4
    67ac:	b006      	add	sp, #24
    67ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67b2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    67b6:	463a      	mov	r2, r7
    67b8:	4631      	mov	r1, r6
    67ba:	4628      	mov	r0, r5
    67bc:	f7ff fc9e 	bl	60fc <send_err_rsp.part.10>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    67c0:	2e18      	cmp	r6, #24
    67c2:	d1f1      	bne.n	67a8 <att_write_rsp.part.11.constprop.17+0x80>
    67c4:	f89d 4014 	ldrb.w	r4, [sp, #20]
    67c8:	e7ef      	b.n	67aa <att_write_rsp.part.11.constprop.17+0x82>
    67ca:	bf00      	nop
    67cc:	00005c9d 	.word	0x00005c9d
    67d0:	00005bc1 	.word	0x00005bc1

000067d4 <att_signed_write_cmd>:
{
    67d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    67d8:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    67da:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    67dc:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    67e0:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    67e2:	4620      	mov	r0, r4
    67e4:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    67e6:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    67ea:	f00c ffe7 	bl	137bc <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    67ee:	4629      	mov	r1, r5
    67f0:	4630      	mov	r0, r6
    67f2:	f000 ff56 	bl	76a2 <bt_smp_sign_verify>
	if (err) {
    67f6:	4607      	mov	r7, r0
    67f8:	b160      	cbz	r0, 6814 <att_signed_write_cmd+0x40>
		BT_ERR("Error verifying data");
    67fa:	4b13      	ldr	r3, [pc, #76]	; (6848 <att_signed_write_cmd+0x74>)
    67fc:	9301      	str	r3, [sp, #4]
    67fe:	9300      	str	r3, [sp, #0]
    6800:	4a12      	ldr	r2, [pc, #72]	; (684c <att_signed_write_cmd+0x78>)
    6802:	4b13      	ldr	r3, [pc, #76]	; (6850 <att_signed_write_cmd+0x7c>)
    6804:	4913      	ldr	r1, [pc, #76]	; (6854 <att_signed_write_cmd+0x80>)
    6806:	4814      	ldr	r0, [pc, #80]	; (6858 <att_signed_write_cmd+0x84>)
    6808:	f7fa fbc0 	bl	f8c <printk>
    680c:	2000      	movs	r0, #0
}
    680e:	b002      	add	sp, #8
    6810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    6814:	2101      	movs	r1, #1
    6816:	4620      	mov	r0, r4
    6818:	f00c ffd8 	bl	137cc <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    681c:	2102      	movs	r1, #2
    681e:	4620      	mov	r0, r4
    6820:	f00c ffd4 	bl	137cc <net_buf_simple_pull>
	if (!handle) {
    6824:	f1b8 0f00 	cmp.w	r8, #0
    6828:	d00c      	beq.n	6844 <att_signed_write_cmd+0x70>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    682a:	7b2b      	ldrb	r3, [r5, #12]
    682c:	3b0c      	subs	r3, #12
    682e:	b2db      	uxtb	r3, r3
    6830:	9301      	str	r3, [sp, #4]
    6832:	68ab      	ldr	r3, [r5, #8]
    6834:	9300      	str	r3, [sp, #0]
    6836:	463a      	mov	r2, r7
    6838:	4643      	mov	r3, r8
    683a:	4639      	mov	r1, r7
    683c:	4630      	mov	r0, r6
    683e:	f7ff ff73 	bl	6728 <att_write_rsp.part.11.constprop.17>
    6842:	e7e4      	b.n	680e <att_signed_write_cmd+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
    6844:	2001      	movs	r0, #1
    6846:	e7e2      	b.n	680e <att_signed_write_cmd+0x3a>
    6848:	000153a9 	.word	0x000153a9
    684c:	00016765 	.word	0x00016765
    6850:	000173c0 	.word	0x000173c0
    6854:	000167b4 	.word	0x000167b4
    6858:	000174e7 	.word	0x000174e7

0000685c <att_write_cmd>:
{
    685c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    685e:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6860:	f101 0008 	add.w	r0, r1, #8
{
    6864:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6866:	f00c ffc1 	bl	137ec <net_buf_simple_pull_le16>
	if (!handle) {
    686a:	4603      	mov	r3, r0
    686c:	b150      	cbz	r0, 6884 <att_write_cmd+0x28>
    686e:	7b22      	ldrb	r2, [r4, #12]
    6870:	9201      	str	r2, [sp, #4]
    6872:	68a2      	ldr	r2, [r4, #8]
    6874:	9200      	str	r2, [sp, #0]
    6876:	2200      	movs	r2, #0
    6878:	4611      	mov	r1, r2
    687a:	4628      	mov	r0, r5
    687c:	f7ff ff54 	bl	6728 <att_write_rsp.part.11.constprop.17>
}
    6880:	b003      	add	sp, #12
    6882:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6884:	2001      	movs	r0, #1
    6886:	e7fb      	b.n	6880 <att_write_cmd+0x24>

00006888 <att_write_req>:
{
    6888:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    688a:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    688c:	f101 0008 	add.w	r0, r1, #8
{
    6890:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6892:	f00c ffab 	bl	137ec <net_buf_simple_pull_le16>
	if (!handle) {
    6896:	4603      	mov	r3, r0
    6898:	b150      	cbz	r0, 68b0 <att_write_req+0x28>
    689a:	7b22      	ldrb	r2, [r4, #12]
    689c:	9201      	str	r2, [sp, #4]
    689e:	68a2      	ldr	r2, [r4, #8]
    68a0:	9200      	str	r2, [sp, #0]
    68a2:	2112      	movs	r1, #18
    68a4:	2213      	movs	r2, #19
    68a6:	4628      	mov	r0, r5
    68a8:	f7ff ff3e 	bl	6728 <att_write_rsp.part.11.constprop.17>
}
    68ac:	b003      	add	sp, #12
    68ae:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    68b0:	2001      	movs	r0, #1
    68b2:	e7fb      	b.n	68ac <att_write_req+0x24>

000068b4 <bt_att_init>:

void bt_att_init(void)
{
    68b4:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    68b6:	4803      	ldr	r0, [pc, #12]	; (68c4 <bt_att_init+0x10>)
    68b8:	f7fe fcf4 	bl	52a4 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    68bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    68c0:	f000 bc9a 	b.w	71f8 <bt_gatt_init>
    68c4:	20003bc0 	.word	0x20003bc0

000068c8 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    68c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    68ca:	460d      	mov	r5, r1
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    68cc:	4607      	mov	r7, r0
    68ce:	2800      	cmp	r0, #0
    68d0:	d04b      	beq.n	696a <bt_att_send+0xa2>
    68d2:	2900      	cmp	r1, #0
    68d4:	d049      	beq.n	696a <bt_att_send+0xa2>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    68d6:	f7ff f9a1 	bl	5c1c <att_chan_get>
	if (!att) {
    68da:	4604      	mov	r4, r0
    68dc:	b1b0      	cbz	r0, 690c <bt_att_send+0x44>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    68de:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    68e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    68e6:	4630      	mov	r0, r6
    68e8:	f00d ffcf 	bl	1488a <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    68ec:	4620      	mov	r0, r4
    68ee:	f7ff f94b 	bl	5b88 <att_is_connected>
    68f2:	b970      	cbnz	r0, 6912 <bt_att_send+0x4a>
		BT_WARN("Disconnected");
    68f4:	4b1e      	ldr	r3, [pc, #120]	; (6970 <bt_att_send+0xa8>)
    68f6:	9301      	str	r3, [sp, #4]
    68f8:	9300      	str	r3, [sp, #0]
    68fa:	4a1e      	ldr	r2, [pc, #120]	; (6974 <bt_att_send+0xac>)
    68fc:	4b1e      	ldr	r3, [pc, #120]	; (6978 <bt_att_send+0xb0>)
    68fe:	491f      	ldr	r1, [pc, #124]	; (697c <bt_att_send+0xb4>)
    6900:	481f      	ldr	r0, [pc, #124]	; (6980 <bt_att_send+0xb8>)
    6902:	f7fa fb43 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6906:	4630      	mov	r0, r6
    6908:	f00d ff97 	bl	1483a <_impl_k_sem_give>
		return -ENOTCONN;
    690c:	f06f 0438 	mvn.w	r4, #56	; 0x38
    6910:	e015      	b.n	693e <bt_att_send+0x76>

	hdr = (void *)buf->data;

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    6912:	68ab      	ldr	r3, [r5, #8]
    6914:	781b      	ldrb	r3, [r3, #0]
    6916:	2bd2      	cmp	r3, #210	; 0xd2
    6918:	d114      	bne.n	6944 <bt_att_send+0x7c>
		int err;

		err = bt_smp_sign(conn, buf);
    691a:	4629      	mov	r1, r5
    691c:	4638      	mov	r0, r7
    691e:	f000 fec3 	bl	76a8 <bt_smp_sign>
		if (err) {
    6922:	4604      	mov	r4, r0
    6924:	b170      	cbz	r0, 6944 <bt_att_send+0x7c>
			BT_ERR("Error signing data");
    6926:	4b12      	ldr	r3, [pc, #72]	; (6970 <bt_att_send+0xa8>)
    6928:	9301      	str	r3, [sp, #4]
    692a:	9300      	str	r3, [sp, #0]
    692c:	4a15      	ldr	r2, [pc, #84]	; (6984 <bt_att_send+0xbc>)
    692e:	4b12      	ldr	r3, [pc, #72]	; (6978 <bt_att_send+0xb0>)
    6930:	4912      	ldr	r1, [pc, #72]	; (697c <bt_att_send+0xb4>)
    6932:	4815      	ldr	r0, [pc, #84]	; (6988 <bt_att_send+0xc0>)
    6934:	f7fa fb2a 	bl	f8c <printk>
    6938:	4630      	mov	r0, r6
    693a:	f00d ff7e 	bl	1483a <_impl_k_sem_give>
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));

	return 0;
}
    693e:	4620      	mov	r0, r4
    6940:	b003      	add	sp, #12
    6942:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (att_op_get_type(buf->data[0])) {
    6944:	68ab      	ldr	r3, [r5, #8]
    6946:	7818      	ldrb	r0, [r3, #0]
    6948:	f7fe fee6 	bl	5718 <att_op_get_type>
    694c:	3801      	subs	r0, #1
    694e:	b2c0      	uxtb	r0, r0
    6950:	2804      	cmp	r0, #4
    6952:	bf96      	itet	ls
    6954:	4b0d      	ldrls	r3, [pc, #52]	; (698c <bt_att_send+0xc4>)
    6956:	4b0e      	ldrhi	r3, [pc, #56]	; (6990 <bt_att_send+0xc8>)
    6958:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    695c:	462a      	mov	r2, r5
    695e:	2104      	movs	r1, #4
    6960:	4638      	mov	r0, r7
    6962:	f7fe fd5d 	bl	5420 <bt_l2cap_send_cb>
	return 0;
    6966:	2400      	movs	r4, #0
    6968:	e7e9      	b.n	693e <bt_att_send+0x76>
		return -EINVAL;
    696a:	f06f 0415 	mvn.w	r4, #21
    696e:	e7e6      	b.n	693e <bt_att_send+0x76>
    6970:	000153a9 	.word	0x000153a9
    6974:	000167ef 	.word	0x000167ef
    6978:	0001741a 	.word	0x0001741a
    697c:	000167b4 	.word	0x000167b4
    6980:	000174ca 	.word	0x000174ca
    6984:	00016765 	.word	0x00016765
    6988:	0001766f 	.word	0x0001766f
    698c:	00017390 	.word	0x00017390
    6990:	00005baf 	.word	0x00005baf

00006994 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    6994:	b510      	push	{r4, lr}
    6996:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    6998:	b1d8      	cbz	r0, 69d2 <bt_att_req_send+0x3e>
    699a:	b1d1      	cbz	r1, 69d2 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    699c:	f7ff f93e 	bl	5c1c <att_chan_get>
	if (!att) {
    69a0:	4603      	mov	r3, r0
    69a2:	b1c8      	cbz	r0, 69d8 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    69a4:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    69a8:	b172      	cbz	r2, 69c8 <bt_att_req_send+0x34>
	parent->next = child;
    69aa:	2000      	movs	r0, #0
    69ac:	6020      	str	r0, [r4, #0]
    69ae:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    69b2:	b92a      	cbnz	r2, 69c0 <bt_att_req_send+0x2c>
	list->tail = node;
    69b4:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    69b8:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    69bc:	4610      	mov	r0, r2
    69be:	bd10      	pop	{r4, pc}
	parent->next = child;
    69c0:	6014      	str	r4, [r2, #0]
	list->tail = node;
    69c2:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    69c6:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    69c8:	4621      	mov	r1, r4
}
    69ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    69ce:	f7ff b991 	b.w	5cf4 <att_send_req>
		return -EINVAL;
    69d2:	f06f 0015 	mvn.w	r0, #21
    69d6:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    69d8:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    69dc:	bd10      	pop	{r4, pc}

000069de <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode);
    69de:	6813      	ldr	r3, [r2, #0]
    69e0:	b939      	cbnz	r1, 69f2 <sys_slist_remove+0x14>
    69e2:	6841      	ldr	r1, [r0, #4]
	list->head = node;
    69e4:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode);
    69e6:	428a      	cmp	r2, r1
    69e8:	d100      	bne.n	69ec <sys_slist_remove+0xe>
	list->tail = node;
    69ea:	6043      	str	r3, [r0, #4]
	parent->next = child;
    69ec:	2300      	movs	r3, #0
    69ee:	6013      	str	r3, [r2, #0]
    69f0:	4770      	bx	lr
    69f2:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
    69f4:	6843      	ldr	r3, [r0, #4]
    69f6:	429a      	cmp	r2, r3
	list->tail = node;
    69f8:	bf08      	it	eq
    69fa:	6041      	streq	r1, [r0, #4]
    69fc:	e7f6      	b.n	69ec <sys_slist_remove+0xe>

000069fe <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    69fe:	4770      	bx	lr

00006a00 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    6a00:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    6a02:	2000      	movs	r0, #0
    6a04:	4770      	bx	lr

00006a06 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    6a06:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    6a08:	2300      	movs	r3, #0
    6a0a:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    6a0c:	461a      	mov	r2, r3
    6a0e:	42aa      	cmp	r2, r5
    6a10:	d107      	bne.n	6a22 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    6a12:	890a      	ldrh	r2, [r1, #8]
    6a14:	429a      	cmp	r2, r3
    6a16:	d00d      	beq.n	6a34 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    6a18:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    6a1a:	68ca      	ldr	r2, [r1, #12]
	}
}
    6a1c:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    6a1e:	4619      	mov	r1, r3
    6a20:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    6a22:	680c      	ldr	r4, [r1, #0]
    6a24:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    6a28:	3201      	adds	r2, #1
    6a2a:	8924      	ldrh	r4, [r4, #8]
    6a2c:	42a3      	cmp	r3, r4
    6a2e:	bf38      	it	cc
    6a30:	4623      	movcc	r3, r4
    6a32:	e7ec      	b.n	6a0e <gatt_ccc_changed+0x8>
}
    6a34:	bc30      	pop	{r4, r5}
    6a36:	4770      	bx	lr

00006a38 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    6a38:	b410      	push	{r4}
    6a3a:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    6a3c:	699c      	ldr	r4, [r3, #24]
    6a3e:	460a      	mov	r2, r1
    6a40:	6959      	ldr	r1, [r3, #20]
    6a42:	4623      	mov	r3, r4
}
    6a44:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    6a46:	4718      	bx	r3

00006a48 <gatt_subscription_remove>:
	bt_addr_le_copy(&params->_peer, &conn->le.dst);
}

static void gatt_subscription_remove(struct bt_conn *conn, sys_snode_t *prev,
				     struct bt_gatt_subscribe_params *params)
{
    6a48:	b570      	push	{r4, r5, r6, lr}
    6a4a:	4614      	mov	r4, r2
    6a4c:	4606      	mov	r6, r0
	/* Remove subscription from the list*/
	sys_slist_remove(&subscriptions, prev, &params->node);
    6a4e:	3228      	adds	r2, #40	; 0x28
    6a50:	4805      	ldr	r0, [pc, #20]	; (6a68 <gatt_subscription_remove+0x20>)
    6a52:	f7ff ffc4 	bl	69de <sys_slist_remove>

	params->notify(conn, params, NULL, 0);
    6a56:	69e5      	ldr	r5, [r4, #28]
    6a58:	2300      	movs	r3, #0
    6a5a:	4621      	mov	r1, r4
    6a5c:	4630      	mov	r0, r6
    6a5e:	46ac      	mov	ip, r5
    6a60:	461a      	mov	r2, r3
}
    6a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->notify(conn, params, NULL, 0);
    6a66:	4760      	bx	ip
    6a68:	200005f0 	.word	0x200005f0

00006a6c <gatt_write_ccc_rsp>:
}

static void gatt_write_ccc_rsp(struct bt_conn *conn, u8_t err,
			       const void *pdu, u16_t length,
			       void *user_data)
{
    6a6c:	b430      	push	{r4, r5}
    6a6e:	9c02      	ldr	r4, [sp, #8]
    6a70:	4605      	mov	r5, r0
	struct bt_gatt_subscribe_params *params = user_data;

	BT_DBG("err 0x%02x", err);

	/* if write to CCC failed we remove subscription and notify app */
	if (err) {
    6a72:	b181      	cbz	r1, 6a96 <gatt_write_ccc_rsp+0x2a>
    6a74:	4b0d      	ldr	r3, [pc, #52]	; (6aac <gatt_write_ccc_rsp+0x40>)
    6a76:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_PEEK_NEXT(slist, snode);
    6a78:	b1ab      	cbz	r3, 6aa6 <gatt_write_ccc_rsp+0x3a>
	return node->next;
    6a7a:	6819      	ldr	r1, [r3, #0]
		sys_snode_t *node, *tmp, *prev = NULL;

		SYS_SLIST_FOR_EACH_NODE_SAFE(&subscriptions, node, tmp) {
			if (node == &params->node) {
    6a7c:	f104 0228 	add.w	r2, r4, #40	; 0x28
    6a80:	4293      	cmp	r3, r2
    6a82:	d104      	bne.n	6a8e <gatt_write_ccc_rsp+0x22>
				gatt_subscription_remove(conn, tmp, params);
    6a84:	4622      	mov	r2, r4
    6a86:	4628      	mov	r0, r5
		}
	} else if (!params->value) {
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}
}
    6a88:	bc30      	pop	{r4, r5}
				gatt_subscription_remove(conn, tmp, params);
    6a8a:	f7ff bfdd 	b.w	6a48 <gatt_subscription_remove>
Z_GENLIST_PEEK_NEXT(slist, snode);
    6a8e:	b151      	cbz	r1, 6aa6 <gatt_write_ccc_rsp+0x3a>
    6a90:	460b      	mov	r3, r1
    6a92:	6809      	ldr	r1, [r1, #0]
    6a94:	e7f4      	b.n	6a80 <gatt_write_ccc_rsp+0x14>
	} else if (!params->value) {
    6a96:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    6a98:	b92b      	cbnz	r3, 6aa6 <gatt_write_ccc_rsp+0x3a>
		params->notify(conn, params, NULL, 0);
    6a9a:	69e5      	ldr	r5, [r4, #28]
    6a9c:	4621      	mov	r1, r4
    6a9e:	46ac      	mov	ip, r5
    6aa0:	461a      	mov	r2, r3
}
    6aa2:	bc30      	pop	{r4, r5}
		params->notify(conn, params, NULL, 0);
    6aa4:	4760      	bx	ip
}
    6aa6:	bc30      	pop	{r4, r5}
    6aa8:	4770      	bx	lr
    6aaa:	bf00      	nop
    6aac:	200005f0 	.word	0x200005f0

00006ab0 <gatt_register>:
{
    6ab0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    6ab2:	4a1e      	ldr	r2, [pc, #120]	; (6b2c <gatt_register+0x7c>)
    6ab4:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    6ab6:	e890 0022 	ldmia.w	r0, {r1, r5}
	if (sys_slist_is_empty(&db)) {
    6aba:	b14b      	cbz	r3, 6ad0 <gatt_register+0x20>
    6abc:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    6abe:	2b00      	cmp	r3, #0
    6ac0:	d032      	beq.n	6b28 <gatt_register+0x78>
	handle = last->attrs[last->attr_count - 1].handle;
    6ac2:	e913 0018 	ldmdb	r3, {r3, r4}
    6ac6:	2614      	movs	r6, #20
    6ac8:	fb06 3304 	mla	r3, r6, r4, r3
    6acc:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    6ad0:	b2ad      	uxth	r5, r5
    6ad2:	2414      	movs	r4, #20
    6ad4:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    6ad8:	b109      	cbz	r1, 6ade <gatt_register+0x2e>
    6ada:	42a9      	cmp	r1, r5
    6adc:	d108      	bne.n	6af0 <gatt_register+0x40>
	parent->next = child;
    6ade:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    6ae0:	f100 0108 	add.w	r1, r0, #8
    6ae4:	6083      	str	r3, [r0, #8]
    6ae6:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    6ae8:	b9d0      	cbnz	r0, 6b20 <gatt_register+0x70>
	list->tail = node;
    6aea:	6051      	str	r1, [r2, #4]
	list->head = node;
    6aec:	6011      	str	r1, [r2, #0]
    6aee:	e015      	b.n	6b1c <gatt_register+0x6c>
		if (!attrs->handle) {
    6af0:	8a0c      	ldrh	r4, [r1, #16]
    6af2:	b92c      	cbnz	r4, 6b00 <gatt_register+0x50>
			attrs->handle = ++handle;
    6af4:	3301      	adds	r3, #1
    6af6:	b29c      	uxth	r4, r3
    6af8:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    6afa:	3114      	adds	r1, #20
    6afc:	4623      	mov	r3, r4
    6afe:	e7eb      	b.n	6ad8 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    6b00:	42a3      	cmp	r3, r4
    6b02:	d3fa      	bcc.n	6afa <gatt_register+0x4a>
			BT_ERR("Unable to register handle 0x%04x",
    6b04:	4b0a      	ldr	r3, [pc, #40]	; (6b30 <gatt_register+0x80>)
    6b06:	9302      	str	r3, [sp, #8]
    6b08:	e88d 0018 	stmia.w	sp, {r3, r4}
    6b0c:	4a09      	ldr	r2, [pc, #36]	; (6b34 <gatt_register+0x84>)
    6b0e:	4b0a      	ldr	r3, [pc, #40]	; (6b38 <gatt_register+0x88>)
    6b10:	490a      	ldr	r1, [pc, #40]	; (6b3c <gatt_register+0x8c>)
    6b12:	480b      	ldr	r0, [pc, #44]	; (6b40 <gatt_register+0x90>)
    6b14:	f7fa fa3a 	bl	f8c <printk>
			return -EINVAL;
    6b18:	f06f 0015 	mvn.w	r0, #21
}
    6b1c:	b004      	add	sp, #16
    6b1e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    6b20:	6001      	str	r1, [r0, #0]
	list->tail = node;
    6b22:	6051      	str	r1, [r2, #4]
	return 0;
    6b24:	4618      	mov	r0, r3
    6b26:	e7f9      	b.n	6b1c <gatt_register+0x6c>
	handle = last->attrs[last->attr_count - 1].handle;
    6b28:	681b      	ldr	r3, [r3, #0]
    6b2a:	deff      	udf	#255	; 0xff
    6b2c:	20000584 	.word	0x20000584
    6b30:	000153a9 	.word	0x000153a9
    6b34:	00016765 	.word	0x00016765
    6b38:	0001776c 	.word	0x0001776c
    6b3c:	000167b4 	.word	0x000167b4
    6b40:	0001789c 	.word	0x0001789c

00006b44 <gatt_notify>:
{
    6b44:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6b48:	468a      	mov	sl, r1
    6b4a:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6b4c:	211b      	movs	r1, #27
    6b4e:	1c9a      	adds	r2, r3, #2
{
    6b50:	4680      	mov	r8, r0
    6b52:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6b54:	f7ff fa56 	bl	6004 <bt_att_create_pdu>
	if (!buf) {
    6b58:	4604      	mov	r4, r0
    6b5a:	b968      	cbnz	r0, 6b78 <gatt_notify+0x34>
		BT_WARN("No buffer available to send notification");
    6b5c:	4b13      	ldr	r3, [pc, #76]	; (6bac <gatt_notify+0x68>)
    6b5e:	9301      	str	r3, [sp, #4]
    6b60:	9300      	str	r3, [sp, #0]
    6b62:	4a13      	ldr	r2, [pc, #76]	; (6bb0 <gatt_notify+0x6c>)
    6b64:	4b13      	ldr	r3, [pc, #76]	; (6bb4 <gatt_notify+0x70>)
    6b66:	4914      	ldr	r1, [pc, #80]	; (6bb8 <gatt_notify+0x74>)
    6b68:	4814      	ldr	r0, [pc, #80]	; (6bbc <gatt_notify+0x78>)
    6b6a:	f7fa fa0f 	bl	f8c <printk>
    6b6e:	f06f 000b 	mvn.w	r0, #11
}
    6b72:	b002      	add	sp, #8
    6b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    6b78:	f100 0708 	add.w	r7, r0, #8
    6b7c:	2102      	movs	r1, #2
    6b7e:	4638      	mov	r0, r7
    6b80:	f00c fdf6 	bl	13770 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    6b84:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    6b86:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    6b88:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    6b8c:	4638      	mov	r0, r7
    6b8e:	f00c fdef 	bl	13770 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    6b92:	4632      	mov	r2, r6
    6b94:	4649      	mov	r1, r9
    6b96:	4628      	mov	r0, r5
    6b98:	f7fb f830 	bl	1bfc <memcpy>
    6b9c:	4640      	mov	r0, r8
    6b9e:	2300      	movs	r3, #0
    6ba0:	4622      	mov	r2, r4
    6ba2:	2104      	movs	r1, #4
    6ba4:	f7fe fc3c 	bl	5420 <bt_l2cap_send_cb>
	return 0;
    6ba8:	2000      	movs	r0, #0
    6baa:	e7e2      	b.n	6b72 <gatt_notify+0x2e>
    6bac:	000153a9 	.word	0x000153a9
    6bb0:	000167ef 	.word	0x000167ef
    6bb4:	000177a8 	.word	0x000177a8
    6bb8:	000167b4 	.word	0x000167b4
    6bbc:	00017863 	.word	0x00017863

00006bc0 <gatt_send.constprop.29>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    6bc0:	b530      	push	{r4, r5, lr}
    6bc2:	460d      	mov	r5, r1
    6bc4:	b085      	sub	sp, #20
	if (params) {
    6bc6:	b1c3      	cbz	r3, 6bfa <gatt_send.constprop.29+0x3a>
		req->func = func;
    6bc8:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    6bca:	2200      	movs	r2, #0
		req->buf = buf;
    6bcc:	6119      	str	r1, [r3, #16]
		req->destroy = destroy;
    6bce:	609a      	str	r2, [r3, #8]
		err = bt_att_req_send(conn, req);
    6bd0:	4619      	mov	r1, r3
    6bd2:	f7ff fedf 	bl	6994 <bt_att_req_send>
		err = bt_att_send(conn, buf);
    6bd6:	4604      	mov	r4, r0
	if (err) {
    6bd8:	b160      	cbz	r0, 6bf4 <gatt_send.constprop.29+0x34>
		BT_ERR("Error sending ATT PDU: %d", err);
    6bda:	4b09      	ldr	r3, [pc, #36]	; (6c00 <gatt_send.constprop.29+0x40>)
    6bdc:	9302      	str	r3, [sp, #8]
    6bde:	e88d 0018 	stmia.w	sp, {r3, r4}
    6be2:	4a08      	ldr	r2, [pc, #32]	; (6c04 <gatt_send.constprop.29+0x44>)
    6be4:	4b08      	ldr	r3, [pc, #32]	; (6c08 <gatt_send.constprop.29+0x48>)
    6be6:	4909      	ldr	r1, [pc, #36]	; (6c0c <gatt_send.constprop.29+0x4c>)
    6be8:	4809      	ldr	r0, [pc, #36]	; (6c10 <gatt_send.constprop.29+0x50>)
    6bea:	f7fa f9cf 	bl	f8c <printk>
		net_buf_unref(buf);
    6bee:	4628      	mov	r0, r5
    6bf0:	f00c fd8c 	bl	1370c <net_buf_unref>
}
    6bf4:	4620      	mov	r0, r4
    6bf6:	b005      	add	sp, #20
    6bf8:	bd30      	pop	{r4, r5, pc}
		err = bt_att_send(conn, buf);
    6bfa:	f7ff fe65 	bl	68c8 <bt_att_send>
    6bfe:	e7ea      	b.n	6bd6 <gatt_send.constprop.29+0x16>
    6c00:	000153a9 	.word	0x000153a9
    6c04:	00016765 	.word	0x00016765
    6c08:	000177b4 	.word	0x000177b4
    6c0c:	000167b4 	.word	0x000167b4
    6c10:	000178cd 	.word	0x000178cd

00006c14 <gatt_write_ccc.constprop.19>:

static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    6c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c18:	4689      	mov	r9, r1
    6c1a:	4690      	mov	r8, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    6c1c:	2112      	movs	r1, #18
    6c1e:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    6c20:	4606      	mov	r6, r0
    6c22:	461f      	mov	r7, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    6c24:	f7ff f9ee 	bl	6004 <bt_att_create_pdu>
				sizeof(*req) + sizeof(u16_t));
	if (!buf) {
    6c28:	4604      	mov	r4, r0
    6c2a:	b198      	cbz	r0, 6c54 <gatt_write_ccc.constprop.19+0x40>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    6c2c:	f100 0508 	add.w	r5, r0, #8
    6c30:	2102      	movs	r1, #2
    6c32:	4628      	mov	r0, r5
    6c34:	f00c fd9c 	bl	13770 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    6c38:	4641      	mov	r1, r8
	req->handle = sys_cpu_to_le16(handle);
    6c3a:	f8a0 9000 	strh.w	r9, [r0]
	net_buf_add_le16(buf, value);
    6c3e:	4628      	mov	r0, r5
    6c40:	f00c fdad 	bl	1379e <net_buf_simple_add_le16>

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	return gatt_send(conn, buf, func, params, NULL);
    6c44:	463b      	mov	r3, r7
    6c46:	4621      	mov	r1, r4
    6c48:	4630      	mov	r0, r6
    6c4a:	4a04      	ldr	r2, [pc, #16]	; (6c5c <gatt_write_ccc.constprop.19+0x48>)
}
    6c4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    6c50:	f7ff bfb6 	b.w	6bc0 <gatt_send.constprop.29>
}
    6c54:	f06f 000b 	mvn.w	r0, #11
    6c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c5c:	00006a6d 	.word	0x00006a6d

00006c60 <gatt_indicate>:
{
    6c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u16_t value_handle = params->attr->handle;
    6c64:	694b      	ldr	r3, [r1, #20]
{
    6c66:	b085      	sub	sp, #20
    6c68:	4680      	mov	r8, r0
	u16_t value_handle = params->attr->handle;
    6c6a:	8a1d      	ldrh	r5, [r3, #16]
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6c6c:	6818      	ldr	r0, [r3, #0]
    6c6e:	2300      	movs	r3, #0
{
    6c70:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6c72:	f88d 300c 	strb.w	r3, [sp, #12]
    6c76:	a903      	add	r1, sp, #12
    6c78:	f642 0303 	movw	r3, #10243	; 0x2803
    6c7c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6c80:	f7fb f93a 	bl	1ef8 <bt_uuid_cmp>
    6c84:	b930      	cbnz	r0, 6c94 <gatt_indicate+0x34>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    6c86:	6963      	ldr	r3, [r4, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    6c88:	68db      	ldr	r3, [r3, #12]
    6c8a:	791b      	ldrb	r3, [r3, #4]
    6c8c:	069b      	lsls	r3, r3, #26
    6c8e:	d530      	bpl.n	6cf2 <gatt_indicate+0x92>
		value_handle += 1;
    6c90:	3501      	adds	r5, #1
    6c92:	b2ad      	uxth	r5, r5
				sizeof(*ind) + params->len);
    6c94:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    6c96:	211d      	movs	r1, #29
    6c98:	3202      	adds	r2, #2
    6c9a:	4640      	mov	r0, r8
    6c9c:	f7ff f9b2 	bl	6004 <bt_att_create_pdu>
	if (!buf) {
    6ca0:	4606      	mov	r6, r0
    6ca2:	b968      	cbnz	r0, 6cc0 <gatt_indicate+0x60>
		BT_WARN("No buffer available to send indication");
    6ca4:	4b14      	ldr	r3, [pc, #80]	; (6cf8 <gatt_indicate+0x98>)
    6ca6:	9301      	str	r3, [sp, #4]
    6ca8:	9300      	str	r3, [sp, #0]
    6caa:	4a14      	ldr	r2, [pc, #80]	; (6cfc <gatt_indicate+0x9c>)
    6cac:	4b14      	ldr	r3, [pc, #80]	; (6d00 <gatt_indicate+0xa0>)
    6cae:	4915      	ldr	r1, [pc, #84]	; (6d04 <gatt_indicate+0xa4>)
    6cb0:	4815      	ldr	r0, [pc, #84]	; (6d08 <gatt_indicate+0xa8>)
    6cb2:	f7fa f96b 	bl	f8c <printk>
		return -ENOMEM;
    6cb6:	f06f 000b 	mvn.w	r0, #11
}
    6cba:	b005      	add	sp, #20
    6cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    6cc0:	f100 0908 	add.w	r9, r0, #8
    6cc4:	2102      	movs	r1, #2
    6cc6:	4648      	mov	r0, r9
    6cc8:	f00c fd52 	bl	13770 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    6ccc:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
    6cce:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    6cd0:	f827 5b02 	strh.w	r5, [r7], #2
	net_buf_add(buf, params->len);
    6cd4:	4648      	mov	r0, r9
    6cd6:	f00c fd4b 	bl	13770 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    6cda:	8c22      	ldrh	r2, [r4, #32]
    6cdc:	69e1      	ldr	r1, [r4, #28]
    6cde:	4638      	mov	r0, r7
    6ce0:	f7fa ff8c 	bl	1bfc <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    6ce4:	4623      	mov	r3, r4
    6ce6:	4a09      	ldr	r2, [pc, #36]	; (6d0c <gatt_indicate+0xac>)
    6ce8:	4631      	mov	r1, r6
    6cea:	4640      	mov	r0, r8
    6cec:	f7ff ff68 	bl	6bc0 <gatt_send.constprop.29>
    6cf0:	e7e3      	b.n	6cba <gatt_indicate+0x5a>
			return -EINVAL;
    6cf2:	f06f 0015 	mvn.w	r0, #21
    6cf6:	e7e0      	b.n	6cba <gatt_indicate+0x5a>
    6cf8:	000153a9 	.word	0x000153a9
    6cfc:	000167ef 	.word	0x000167ef
    6d00:	000177be 	.word	0x000177be
    6d04:	000167b4 	.word	0x000167b4
    6d08:	0001782c 	.word	0x0001782c
    6d0c:	00006a39 	.word	0x00006a39

00006d10 <sc_indicate.constprop.24>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    6d10:	b510      	push	{r4, lr}
    6d12:	4b17      	ldr	r3, [pc, #92]	; (6d70 <sc_indicate.constprop.24+0x60>)
    6d14:	f3bf 8f5b 	dmb	ish
    6d18:	f103 0250 	add.w	r2, r3, #80	; 0x50
    6d1c:	e852 4f00 	ldrex	r4, [r2]
    6d20:	f044 0e01 	orr.w	lr, r4, #1
    6d24:	e842 ec00 	strex	ip, lr, [r2]
    6d28:	f1bc 0f00 	cmp.w	ip, #0
    6d2c:	d1f6      	bne.n	6d1c <sc_indicate.constprop.24+0xc>
    6d2e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    6d32:	07e2      	lsls	r2, r4, #31
    6d34:	d402      	bmi.n	6d3c <sc_indicate.constprop.24+0x2c>
		sc->start = start;
    6d36:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    6d38:	84d9      	strh	r1, [r3, #38]	; 0x26
    6d3a:	e00a      	b.n	6d52 <sc_indicate.constprop.24+0x42>
	if (new_start >= *start && new_end <= *end) {
    6d3c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    6d3e:	4282      	cmp	r2, r0
    6d40:	d803      	bhi.n	6d4a <sc_indicate.constprop.24+0x3a>
    6d42:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    6d44:	428a      	cmp	r2, r1
    6d46:	d301      	bcc.n	6d4c <sc_indicate.constprop.24+0x3c>
    6d48:	bd10      	pop	{r4, pc}
		*start = new_start;
    6d4a:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    6d4c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    6d4e:	428a      	cmp	r2, r1
    6d50:	d3f2      	bcc.n	6d38 <sc_indicate.constprop.24+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6d52:	f3bf 8f5b 	dmb	ish
    6d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6d58:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    6d5c:	079b      	lsls	r3, r3, #30
    6d5e:	d406      	bmi.n	6d6e <sc_indicate.constprop.24+0x5e>
    6d60:	220a      	movs	r2, #10
    6d62:	4904      	ldr	r1, [pc, #16]	; (6d74 <sc_indicate.constprop.24+0x64>)
    6d64:	4804      	ldr	r0, [pc, #16]	; (6d78 <sc_indicate.constprop.24+0x68>)
}
    6d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d6a:	f00e b8c1 	b.w	14ef0 <k_delayed_work_submit_to_queue>
    6d6e:	bd10      	pop	{r4, pc}
    6d70:	2000058c 	.word	0x2000058c
    6d74:	200005b4 	.word	0x200005b4
    6d78:	20001990 	.word	0x20001990

00006d7c <connected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    6d7c:	6882      	ldr	r2, [r0, #8]
    6d7e:	4b19      	ldr	r3, [pc, #100]	; (6de4 <connected_cb+0x68>)
    6d80:	429a      	cmp	r2, r3
{
    6d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d86:	4607      	mov	r7, r0
    6d88:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    6d8a:	d125      	bne.n	6dd8 <connected_cb+0x5c>
	ccc = attr->user_data;
    6d8c:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    6d8e:	2600      	movs	r6, #0
    6d90:	686b      	ldr	r3, [r5, #4]
    6d92:	429e      	cmp	r6, r3
    6d94:	d220      	bcs.n	6dd8 <connected_cb+0x5c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6d96:	6829      	ldr	r1, [r5, #0]
    6d98:	ea4f 1806 	mov.w	r8, r6, lsl #4
    6d9c:	4441      	add	r1, r8
    6d9e:	4620      	mov	r0, r4
    6da0:	f7fd fd2c 	bl	47fc <bt_conn_addr_le_cmp>
    6da4:	b9d8      	cbnz	r0, 6dde <connected_cb+0x62>
		if (ccc->cfg[i].value) {
    6da6:	682b      	ldr	r3, [r5, #0]
    6da8:	4443      	add	r3, r8
    6daa:	891b      	ldrh	r3, [r3, #8]
    6dac:	b1bb      	cbz	r3, 6dde <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    6dae:	4629      	mov	r1, r5
    6db0:	4638      	mov	r0, r7
    6db2:	f7ff fe28 	bl	6a06 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    6db6:	682c      	ldr	r4, [r5, #0]
    6db8:	4b0b      	ldr	r3, [pc, #44]	; (6de8 <connected_cb+0x6c>)
    6dba:	429c      	cmp	r4, r3
    6dbc:	d10c      	bne.n	6dd8 <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    6dbe:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    6dc0:	89a0      	ldrh	r0, [r4, #12]
    6dc2:	89e1      	ldrh	r1, [r4, #14]
    6dc4:	b900      	cbnz	r0, 6dc8 <connected_cb+0x4c>
    6dc6:	b139      	cbz	r1, 6dd8 <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    6dc8:	f7ff ffa2 	bl	6d10 <sc_indicate.constprop.24>
	memset(cfg->data, 0, sizeof(cfg->data));
    6dcc:	2204      	movs	r2, #4
    6dce:	2100      	movs	r1, #0
    6dd0:	f104 000c 	add.w	r0, r4, #12
    6dd4:	f7fa ff3e 	bl	1c54 <memset>
}
    6dd8:	2001      	movs	r0, #1
    6dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    6dde:	3601      	adds	r6, #1
    6de0:	e7d6      	b.n	6d90 <connected_cb+0x14>
    6de2:	bf00      	nop
    6de4:	00007009 	.word	0x00007009
    6de8:	200005e0 	.word	0x200005e0

00006dec <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6dec:	490d      	ldr	r1, [pc, #52]	; (6e24 <sc_indicate_rsp+0x38>)
    6dee:	f3bf 8f5b 	dmb	ish
    6df2:	f101 0350 	add.w	r3, r1, #80	; 0x50
    6df6:	e853 2f00 	ldrex	r2, [r3]
    6dfa:	f022 0202 	bic.w	r2, r2, #2
    6dfe:	e843 2000 	strex	r0, r2, [r3]
    6e02:	2800      	cmp	r0, #0
    6e04:	d1f7      	bne.n	6df6 <sc_indicate_rsp+0xa>
    6e06:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6e0a:	f3bf 8f5b 	dmb	ish
    6e0e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    6e10:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    6e14:	07db      	lsls	r3, r3, #31
    6e16:	d504      	bpl.n	6e22 <sc_indicate_rsp+0x36>
    6e18:	2200      	movs	r2, #0
    6e1a:	3128      	adds	r1, #40	; 0x28
    6e1c:	4802      	ldr	r0, [pc, #8]	; (6e28 <sc_indicate_rsp+0x3c>)
    6e1e:	f00e b867 	b.w	14ef0 <k_delayed_work_submit_to_queue>
    6e22:	4770      	bx	lr
    6e24:	2000058c 	.word	0x2000058c
    6e28:	20001990 	.word	0x20001990

00006e2c <read_appearance>:
{
    6e2c:	b513      	push	{r0, r1, r4, lr}
    6e2e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    6e32:	4610      	mov	r0, r2
	if (offset > value_len) {
    6e34:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    6e36:	f04f 0200 	mov.w	r2, #0
    6e3a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    6e3e:	d80d      	bhi.n	6e5c <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    6e40:	f1c1 0402 	rsb	r4, r1, #2
    6e44:	429c      	cmp	r4, r3
    6e46:	bfa8      	it	ge
    6e48:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6e4a:	f10d 0306 	add.w	r3, sp, #6
    6e4e:	4622      	mov	r2, r4
    6e50:	4419      	add	r1, r3
    6e52:	f7fa fed3 	bl	1bfc <memcpy>
}
    6e56:	4620      	mov	r0, r4
    6e58:	b002      	add	sp, #8
    6e5a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6e5c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    6e60:	e7f9      	b.n	6e56 <read_appearance+0x2a>
	...

00006e64 <disconnected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    6e64:	6882      	ldr	r2, [r0, #8]
    6e66:	4b27      	ldr	r3, [pc, #156]	; (6f04 <disconnected_cb+0xa0>)
    6e68:	429a      	cmp	r2, r3
{
    6e6a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6e6e:	4680      	mov	r8, r0
    6e70:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    6e72:	d127      	bne.n	6ec4 <disconnected_cb+0x60>
	ccc = attr->user_data;
    6e74:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    6e76:	8923      	ldrh	r3, [r4, #8]
    6e78:	b323      	cbz	r3, 6ec4 <disconnected_cb+0x60>
    6e7a:	2600      	movs	r6, #0
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6e7c:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    6e80:	6863      	ldr	r3, [r4, #4]
    6e82:	429e      	cmp	r6, r3
    6e84:	d30b      	bcc.n	6e9e <disconnected_cb+0x3a>
	memset(&ccc->value, 0, sizeof(ccc->value));
    6e86:	2202      	movs	r2, #2
    6e88:	2100      	movs	r1, #0
    6e8a:	f104 0008 	add.w	r0, r4, #8
    6e8e:	f7fa fee1 	bl	1c54 <memset>
	if (ccc->cfg_changed) {
    6e92:	68e3      	ldr	r3, [r4, #12]
    6e94:	b1b3      	cbz	r3, 6ec4 <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    6e96:	8921      	ldrh	r1, [r4, #8]
    6e98:	4640      	mov	r0, r8
    6e9a:	4798      	blx	r3
    6e9c:	e012      	b.n	6ec4 <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    6e9e:	6821      	ldr	r1, [r4, #0]
    6ea0:	0135      	lsls	r5, r6, #4
    6ea2:	4429      	add	r1, r5
    6ea4:	890b      	ldrh	r3, [r1, #8]
    6ea6:	b19b      	cbz	r3, 6ed0 <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6ea8:	4648      	mov	r0, r9
    6eaa:	f7fd fca7 	bl	47fc <bt_conn_addr_le_cmp>
    6eae:	b188      	cbz	r0, 6ed4 <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6eb0:	6820      	ldr	r0, [r4, #0]
    6eb2:	4428      	add	r0, r5
    6eb4:	f7fd fd02 	bl	48bc <bt_conn_lookup_addr_le>
			if (tmp) {
    6eb8:	b150      	cbz	r0, 6ed0 <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    6eba:	7a43      	ldrb	r3, [r0, #9]
    6ebc:	2b03      	cmp	r3, #3
    6ebe:	d105      	bne.n	6ecc <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    6ec0:	f7fd fd32 	bl	4928 <bt_conn_unref>
}
    6ec4:	2001      	movs	r0, #1
    6ec6:	b002      	add	sp, #8
    6ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    6ecc:	f7fd fd2c 	bl	4928 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    6ed0:	3601      	adds	r6, #1
    6ed2:	e7d5      	b.n	6e80 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6ed4:	4650      	mov	r0, sl
    6ed6:	f7fd f911 	bl	40fc <bt_addr_le_is_bonded>
    6eda:	4607      	mov	r7, r0
    6edc:	6820      	ldr	r0, [r4, #0]
    6ede:	b95f      	cbnz	r7, 6ef8 <disconnected_cb+0x94>
    6ee0:	4428      	add	r0, r5
    6ee2:	2207      	movs	r2, #7
    6ee4:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    6ee6:	9700      	str	r7, [sp, #0]
    6ee8:	f8cd 7003 	str.w	r7, [sp, #3]
    6eec:	f7fa fe86 	bl	1bfc <memcpy>
				ccc->cfg[i].value = 0;
    6ef0:	6823      	ldr	r3, [r4, #0]
    6ef2:	441d      	add	r5, r3
    6ef4:	812f      	strh	r7, [r5, #8]
    6ef6:	e7eb      	b.n	6ed0 <disconnected_cb+0x6c>
    6ef8:	2207      	movs	r2, #7
    6efa:	4651      	mov	r1, sl
    6efc:	4428      	add	r0, r5
    6efe:	f7fa fe7d 	bl	1bfc <memcpy>
    6f02:	e7e5      	b.n	6ed0 <disconnected_cb+0x6c>
    6f04:	00007009 	.word	0x00007009

00006f08 <read_name>:
{
    6f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    6f0c:	4e0d      	ldr	r6, [pc, #52]	; (6f44 <read_name+0x3c>)
{
    6f0e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    6f12:	4630      	mov	r0, r6
{
    6f14:	4698      	mov	r8, r3
    6f16:	4617      	mov	r7, r2
				 strlen(gap_name));
    6f18:	f7fa fe46 	bl	1ba8 <strlen>
	if (offset > value_len) {
    6f1c:	b283      	uxth	r3, r0
    6f1e:	42ab      	cmp	r3, r5
    6f20:	d30d      	bcc.n	6f3e <read_name+0x36>
	len = min(buf_len, value_len - offset);
    6f22:	1b5c      	subs	r4, r3, r5
    6f24:	4544      	cmp	r4, r8
    6f26:	4623      	mov	r3, r4
    6f28:	bfa8      	it	ge
    6f2a:	4643      	movge	r3, r8
    6f2c:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    6f2e:	4622      	mov	r2, r4
    6f30:	1971      	adds	r1, r6, r5
    6f32:	4638      	mov	r0, r7
    6f34:	f7fa fe62 	bl	1bfc <memcpy>
}
    6f38:	4620      	mov	r0, r4
    6f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6f3e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    6f42:	e7f9      	b.n	6f38 <read_name+0x30>
    6f44:	000178f7 	.word	0x000178f7

00006f48 <bt_gatt_attr_read_ccc>:
{
    6f48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6f4c:	68ce      	ldr	r6, [r1, #12]
{
    6f4e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    6f52:	4604      	mov	r4, r0
    6f54:	4690      	mov	r8, r2
    6f56:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    6f58:	2500      	movs	r5, #0
    6f5a:	6873      	ldr	r3, [r6, #4]
    6f5c:	429d      	cmp	r5, r3
    6f5e:	d20e      	bcs.n	6f7e <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6f60:	6831      	ldr	r1, [r6, #0]
    6f62:	ea4f 1905 	mov.w	r9, r5, lsl #4
    6f66:	4449      	add	r1, r9
    6f68:	4620      	mov	r0, r4
    6f6a:	f7fd fc47 	bl	47fc <bt_conn_addr_le_cmp>
    6f6e:	b108      	cbz	r0, 6f74 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    6f70:	3501      	adds	r5, #1
    6f72:	e7f2      	b.n	6f5a <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    6f74:	6832      	ldr	r2, [r6, #0]
    6f76:	444a      	add	r2, r9
    6f78:	8913      	ldrh	r3, [r2, #8]
    6f7a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    6f7e:	6873      	ldr	r3, [r6, #4]
    6f80:	429d      	cmp	r5, r3
		value = 0x0000;
    6f82:	bf04      	itt	eq
    6f84:	2300      	moveq	r3, #0
    6f86:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    6f8a:	2f02      	cmp	r7, #2
    6f8c:	d80f      	bhi.n	6fae <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    6f8e:	f1c7 0402 	rsb	r4, r7, #2
    6f92:	4554      	cmp	r4, sl
    6f94:	bfa8      	it	ge
    6f96:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    6f98:	f10d 0306 	add.w	r3, sp, #6
    6f9c:	4622      	mov	r2, r4
    6f9e:	19d9      	adds	r1, r3, r7
    6fa0:	4640      	mov	r0, r8
    6fa2:	f7fa fe2b 	bl	1bfc <memcpy>
}
    6fa6:	4620      	mov	r0, r4
    6fa8:	b002      	add	sp, #8
    6faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6fae:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    6fb2:	e7f8      	b.n	6fa6 <bt_gatt_attr_read_ccc+0x5e>

00006fb4 <bt_gatt_attr_read_service>:
{
    6fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    6fb6:	68c9      	ldr	r1, [r1, #12]
{
    6fb8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    6fbc:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    6fbe:	780a      	ldrb	r2, [r1, #0]
    6fc0:	b992      	cbnz	r2, 6fe8 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    6fc2:	884a      	ldrh	r2, [r1, #2]
    6fc4:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    6fc8:	2d02      	cmp	r5, #2
    6fca:	d819      	bhi.n	7000 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    6fcc:	f1c5 0402 	rsb	r4, r5, #2
    6fd0:	429c      	cmp	r4, r3
    6fd2:	bfa8      	it	ge
    6fd4:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6fd6:	f10d 0306 	add.w	r3, sp, #6
    6fda:	4622      	mov	r2, r4
    6fdc:	1959      	adds	r1, r3, r5
    6fde:	f7fa fe0d 	bl	1bfc <memcpy>
}
    6fe2:	4620      	mov	r0, r4
    6fe4:	b003      	add	sp, #12
    6fe6:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    6fe8:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    6fea:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    6fee:	d807      	bhi.n	7000 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    6ff0:	f1c5 0410 	rsb	r4, r5, #16
    6ff4:	429c      	cmp	r4, r3
    6ff6:	bfa8      	it	ge
    6ff8:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6ffa:	4622      	mov	r2, r4
    6ffc:	4429      	add	r1, r5
    6ffe:	e7ee      	b.n	6fde <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7000:	f06f 0406 	mvn.w	r4, #6
    7004:	e7ed      	b.n	6fe2 <bt_gatt_attr_read_service+0x2e>
	...

00007008 <bt_gatt_attr_write_ccc>:
{
    7008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    700c:	b087      	sub	sp, #28
    700e:	4688      	mov	r8, r1
    7010:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    7014:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    7018:	2902      	cmp	r1, #2
{
    701a:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    701c:	d85f      	bhi.n	70de <bt_gatt_attr_write_ccc+0xd6>
	if (offset + len > sizeof(u16_t)) {
    701e:	4419      	add	r1, r3
    7020:	2902      	cmp	r1, #2
    7022:	461f      	mov	r7, r3
    7024:	dc5e      	bgt.n	70e4 <bt_gatt_attr_write_ccc+0xdc>
	return ((u16_t)src[1] << 8) | src[0];
    7026:	7853      	ldrb	r3, [r2, #1]
    7028:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    702a:	2400      	movs	r4, #0
    702c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    7030:	686b      	ldr	r3, [r5, #4]
    7032:	429c      	cmp	r4, r3
    7034:	d206      	bcs.n	7044 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    7036:	6829      	ldr	r1, [r5, #0]
    7038:	4648      	mov	r0, r9
    703a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    703e:	f7fd fbdd 	bl	47fc <bt_conn_addr_le_cmp>
    7042:	b9b8      	cbnz	r0, 7074 <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    7044:	686b      	ldr	r3, [r5, #4]
    7046:	429c      	cmp	r4, r3
    7048:	d12f      	bne.n	70aa <bt_gatt_attr_write_ccc+0xa2>
		if (!value) {
    704a:	b356      	cbz	r6, 70a2 <bt_gatt_attr_write_ccc+0x9a>
    704c:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    704e:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    7050:	686b      	ldr	r3, [r5, #4]
    7052:	429c      	cmp	r4, r3
    7054:	d217      	bcs.n	7086 <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    7056:	6828      	ldr	r0, [r5, #0]
    7058:	f8cd a008 	str.w	sl, [sp, #8]
    705c:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    7060:	2207      	movs	r2, #7
    7062:	a902      	add	r1, sp, #8
    7064:	4458      	add	r0, fp
    7066:	f8cd a00b 	str.w	sl, [sp, #11]
    706a:	f7fa fdb2 	bl	1bd2 <memcmp>
    706e:	b118      	cbz	r0, 7078 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    7070:	3401      	adds	r4, #1
    7072:	e7ed      	b.n	7050 <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    7074:	3401      	adds	r4, #1
    7076:	e7db      	b.n	7030 <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    7078:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    707a:	2207      	movs	r2, #7
    707c:	f109 0144 	add.w	r1, r9, #68	; 0x44
    7080:	4458      	add	r0, fp
    7082:	f7fa fdbb 	bl	1bfc <memcpy>
		if (i == ccc->cfg_len) {
    7086:	686b      	ldr	r3, [r5, #4]
    7088:	429c      	cmp	r4, r3
    708a:	d10e      	bne.n	70aa <bt_gatt_attr_write_ccc+0xa2>
			BT_WARN("No space to store CCC cfg");
    708c:	4b17      	ldr	r3, [pc, #92]	; (70ec <bt_gatt_attr_write_ccc+0xe4>)
    708e:	9301      	str	r3, [sp, #4]
    7090:	9300      	str	r3, [sp, #0]
    7092:	4a17      	ldr	r2, [pc, #92]	; (70f0 <bt_gatt_attr_write_ccc+0xe8>)
    7094:	4b17      	ldr	r3, [pc, #92]	; (70f4 <bt_gatt_attr_write_ccc+0xec>)
    7096:	4918      	ldr	r1, [pc, #96]	; (70f8 <bt_gatt_attr_write_ccc+0xf0>)
    7098:	4818      	ldr	r0, [pc, #96]	; (70fc <bt_gatt_attr_write_ccc+0xf4>)
    709a:	f7f9 ff77 	bl	f8c <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    709e:	f06f 0710 	mvn.w	r7, #16
}
    70a2:	4638      	mov	r0, r7
    70a4:	b007      	add	sp, #28
    70a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    70aa:	682b      	ldr	r3, [r5, #0]
    70ac:	0124      	lsls	r4, r4, #4
    70ae:	4423      	add	r3, r4
    70b0:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    70b2:	892b      	ldrh	r3, [r5, #8]
    70b4:	42b3      	cmp	r3, r6
    70b6:	d003      	beq.n	70c0 <bt_gatt_attr_write_ccc+0xb8>
		gatt_ccc_changed(attr, ccc);
    70b8:	4629      	mov	r1, r5
    70ba:	4640      	mov	r0, r8
    70bc:	f7ff fca3 	bl	6a06 <gatt_ccc_changed>
	if (!value) {
    70c0:	2e00      	cmp	r6, #0
    70c2:	d1ee      	bne.n	70a2 <bt_gatt_attr_write_ccc+0x9a>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    70c4:	6828      	ldr	r0, [r5, #0]
    70c6:	9604      	str	r6, [sp, #16]
    70c8:	4420      	add	r0, r4
    70ca:	2207      	movs	r2, #7
    70cc:	a904      	add	r1, sp, #16
    70ce:	f8cd 6013 	str.w	r6, [sp, #19]
    70d2:	f7fa fd93 	bl	1bfc <memcpy>
		ccc->cfg[i].value = 0;
    70d6:	682b      	ldr	r3, [r5, #0]
    70d8:	441c      	add	r4, r3
    70da:	8126      	strh	r6, [r4, #8]
    70dc:	e7e1      	b.n	70a2 <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    70de:	f06f 0706 	mvn.w	r7, #6
    70e2:	e7de      	b.n	70a2 <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    70e4:	f06f 070c 	mvn.w	r7, #12
    70e8:	e7db      	b.n	70a2 <bt_gatt_attr_write_ccc+0x9a>
    70ea:	bf00      	nop
    70ec:	000153a9 	.word	0x000153a9
    70f0:	000167ef 	.word	0x000167ef
    70f4:	00017791 	.word	0x00017791
    70f8:	000167b4 	.word	0x000167b4
    70fc:	00017802 	.word	0x00017802

00007100 <notify_cb>:
{
    7100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    7104:	f642 1302 	movw	r3, #10498	; 0x2902
{
    7108:	4605      	mov	r5, r0
    710a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    710c:	2400      	movs	r4, #0
    710e:	4669      	mov	r1, sp
    7110:	6800      	ldr	r0, [r0, #0]
    7112:	f88d 4000 	strb.w	r4, [sp]
    7116:	f8ad 3002 	strh.w	r3, [sp, #2]
    711a:	f7fa feed 	bl	1ef8 <bt_uuid_cmp>
    711e:	b178      	cbz	r0, 7140 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    7120:	f642 0303 	movw	r3, #10243	; 0x2803
    7124:	6828      	ldr	r0, [r5, #0]
    7126:	f88d 4004 	strb.w	r4, [sp, #4]
    712a:	a901      	add	r1, sp, #4
    712c:	f8ad 3006 	strh.w	r3, [sp, #6]
    7130:	f7fa fee2 	bl	1ef8 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    7134:	1b00      	subs	r0, r0, r4
    7136:	bf18      	it	ne
    7138:	2001      	movne	r0, #1
}
    713a:	b003      	add	sp, #12
    713c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7140:	68aa      	ldr	r2, [r5, #8]
    7142:	4b2b      	ldr	r3, [pc, #172]	; (71f0 <notify_cb+0xf0>)
    7144:	429a      	cmp	r2, r3
    7146:	d001      	beq.n	714c <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    7148:	2001      	movs	r0, #1
    714a:	e7f6      	b.n	713a <notify_cb+0x3a>
	ccc = attr->user_data;
    714c:	68ef      	ldr	r7, [r5, #12]
    714e:	4d29      	ldr	r5, [pc, #164]	; (71f4 <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    7150:	4604      	mov	r4, r0
    7152:	46a8      	mov	r8, r5
    7154:	4681      	mov	r9, r0
    7156:	687b      	ldr	r3, [r7, #4]
    7158:	429c      	cmp	r4, r3
    715a:	d2f5      	bcs.n	7148 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    715c:	6838      	ldr	r0, [r7, #0]
    715e:	88b3      	ldrh	r3, [r6, #4]
    7160:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    7164:	8902      	ldrh	r2, [r0, #8]
    7166:	429a      	cmp	r2, r3
    7168:	d114      	bne.n	7194 <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    716a:	f7fd fba7 	bl	48bc <bt_conn_lookup_addr_le>
		if (!conn) {
    716e:	4683      	mov	fp, r0
    7170:	b9f8      	cbnz	r0, 71b2 <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    7172:	683b      	ldr	r3, [r7, #0]
    7174:	4543      	cmp	r3, r8
    7176:	d10d      	bne.n	7194 <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    7178:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    717a:	a801      	add	r0, sp, #4
    717c:	8c1a      	ldrh	r2, [r3, #32]
    717e:	69d9      	ldr	r1, [r3, #28]
    7180:	f7fa fd3c 	bl	1bfc <memcpy>
	if (!stored->start && !stored->end) {
    7184:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    7186:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    718a:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    718c:	b928      	cbnz	r0, 719a <notify_cb+0x9a>
    718e:	b942      	cbnz	r2, 71a2 <notify_cb+0xa2>
		*stored = data;
    7190:	9801      	ldr	r0, [sp, #4]
    7192:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    7194:	3401      	adds	r4, #1
    7196:	3510      	adds	r5, #16
    7198:	e7dd      	b.n	7156 <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    719a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    719e:	4281      	cmp	r1, r0
    71a0:	d305      	bcc.n	71ae <notify_cb+0xae>
    71a2:	429a      	cmp	r2, r3
    71a4:	d2f6      	bcs.n	7194 <notify_cb+0x94>
	if (*end < new_end) {
    71a6:	429a      	cmp	r2, r3
    71a8:	d2f4      	bcs.n	7194 <notify_cb+0x94>
		*end = new_end;
    71aa:	81eb      	strh	r3, [r5, #14]
    71ac:	e7f2      	b.n	7194 <notify_cb+0x94>
		*start = new_start;
    71ae:	81a9      	strh	r1, [r5, #12]
    71b0:	e7f9      	b.n	71a6 <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    71b2:	7a43      	ldrb	r3, [r0, #9]
    71b4:	2b03      	cmp	r3, #3
    71b6:	d002      	beq.n	71be <notify_cb+0xbe>
			bt_conn_unref(conn);
    71b8:	f7fd fbb6 	bl	4928 <bt_conn_unref>
    71bc:	e7ea      	b.n	7194 <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    71be:	88b3      	ldrh	r3, [r6, #4]
    71c0:	2b02      	cmp	r3, #2
    71c2:	d10c      	bne.n	71de <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    71c4:	6971      	ldr	r1, [r6, #20]
    71c6:	f7ff fd4b 	bl	6c60 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    71ca:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    71cc:	4658      	mov	r0, fp
    71ce:	f7fd fbab 	bl	4928 <bt_conn_unref>
		if (err < 0) {
    71d2:	f1ba 0f00 	cmp.w	sl, #0
    71d6:	db09      	blt.n	71ec <notify_cb+0xec>
		data->err = 0;
    71d8:	f8c6 9000 	str.w	r9, [r6]
    71dc:	e7da      	b.n	7194 <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    71de:	68b1      	ldr	r1, [r6, #8]
    71e0:	8a33      	ldrh	r3, [r6, #16]
    71e2:	68f2      	ldr	r2, [r6, #12]
    71e4:	8a09      	ldrh	r1, [r1, #16]
    71e6:	f7ff fcad 	bl	6b44 <gatt_notify>
    71ea:	e7ee      	b.n	71ca <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    71ec:	2000      	movs	r0, #0
    71ee:	e7a4      	b.n	713a <notify_cb+0x3a>
    71f0:	00007009 	.word	0x00007009
    71f4:	200005e0 	.word	0x200005e0

000071f8 <bt_gatt_init>:
{
    71f8:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    71fa:	4806      	ldr	r0, [pc, #24]	; (7214 <bt_gatt_init+0x1c>)
    71fc:	f7ff fc58 	bl	6ab0 <gatt_register>
	gatt_register(&gatt_svc);
    7200:	4805      	ldr	r0, [pc, #20]	; (7218 <bt_gatt_init+0x20>)
    7202:	f7ff fc55 	bl	6ab0 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    7206:	4905      	ldr	r1, [pc, #20]	; (721c <bt_gatt_init+0x24>)
    7208:	4805      	ldr	r0, [pc, #20]	; (7220 <bt_gatt_init+0x28>)
}
    720a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    720e:	f00d bdfb 	b.w	14e08 <k_delayed_work_init>
    7212:	bf00      	nop
    7214:	20003ca4 	.word	0x20003ca4
    7218:	20003d00 	.word	0x20003d00
    721c:	000072a5 	.word	0x000072a5
    7220:	200005b4 	.word	0x200005b4

00007224 <bt_gatt_foreach_attr>:
{
    7224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7228:	4699      	mov	r9, r3
    722a:	4b12      	ldr	r3, [pc, #72]	; (7274 <bt_gatt_foreach_attr+0x50>)
    722c:	681c      	ldr	r4, [r3, #0]
    722e:	4606      	mov	r6, r0
    7230:	460f      	mov	r7, r1
    7232:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    7234:	b1dc      	cbz	r4, 726e <bt_gatt_foreach_attr+0x4a>
    7236:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    7238:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    723c:	b1bc      	cbz	r4, 726e <bt_gatt_foreach_attr+0x4a>
    723e:	2500      	movs	r5, #0
    7240:	e006      	b.n	7250 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    7242:	6820      	ldr	r0, [r4, #0]
    7244:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    7248:	8a03      	ldrh	r3, [r0, #16]
    724a:	42b3      	cmp	r3, r6
    724c:	d207      	bcs.n	725e <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    724e:	3501      	adds	r5, #1
    7250:	6863      	ldr	r3, [r4, #4]
    7252:	42ab      	cmp	r3, r5
    7254:	d8f5      	bhi.n	7242 <bt_gatt_foreach_attr+0x1e>
	return node->next;
    7256:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    7258:	b14c      	cbz	r4, 726e <bt_gatt_foreach_attr+0x4a>
    725a:	3c08      	subs	r4, #8
    725c:	e7ee      	b.n	723c <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    725e:	42bb      	cmp	r3, r7
    7260:	d8f5      	bhi.n	724e <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    7262:	4649      	mov	r1, r9
    7264:	47c0      	blx	r8
    7266:	2800      	cmp	r0, #0
    7268:	d1f1      	bne.n	724e <bt_gatt_foreach_attr+0x2a>
    726a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    726e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7272:	bf00      	nop
    7274:	20000584 	.word	0x20000584

00007278 <bt_gatt_indicate.part.12>:
int bt_gatt_indicate(struct bt_conn *conn,
    7278:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    727a:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    727e:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    7280:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    7282:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    7284:	2302      	movs	r3, #2
    7286:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    728a:	4a05      	ldr	r2, [pc, #20]	; (72a0 <bt_gatt_indicate.part.12+0x28>)
    728c:	8a00      	ldrh	r0, [r0, #16]
    728e:	466b      	mov	r3, sp
    7290:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7294:	f7ff ffc6 	bl	7224 <bt_gatt_foreach_attr>
}
    7298:	9800      	ldr	r0, [sp, #0]
    729a:	b007      	add	sp, #28
    729c:	f85d fb04 	ldr.w	pc, [sp], #4
    72a0:	00007101 	.word	0x00007101

000072a4 <sc_process>:
{
    72a4:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    72a6:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    72aa:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    72ae:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    72b0:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    72b4:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    72b8:	3828      	subs	r0, #40	; 0x28
    72ba:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    72be:	f3bf 8f5b 	dmb	ish
    72c2:	e854 2f00 	ldrex	r2, [r4]
    72c6:	f022 0201 	bic.w	r2, r2, #1
    72ca:	e844 2100 	strex	r1, r2, [r4]
    72ce:	2900      	cmp	r1, #0
    72d0:	d1f7      	bne.n	72c2 <sc_process+0x1e>
    72d2:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    72d6:	2200      	movs	r2, #0
    72d8:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    72dc:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    72e0:	4a0e      	ldr	r2, [pc, #56]	; (731c <sc_process+0x78>)
    72e2:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    72e6:	4a0e      	ldr	r2, [pc, #56]	; (7320 <sc_process+0x7c>)
    72e8:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    72ec:	aa01      	add	r2, sp, #4
    72ee:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    72f2:	2204      	movs	r2, #4
    72f4:	f823 2c08 	strh.w	r2, [r3, #-8]
    72f8:	f7ff ffbe 	bl	7278 <bt_gatt_indicate.part.12>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    72fc:	b958      	cbnz	r0, 7316 <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    72fe:	f3bf 8f5b 	dmb	ish
    7302:	e854 3f00 	ldrex	r3, [r4]
    7306:	f043 0302 	orr.w	r3, r3, #2
    730a:	e844 3200 	strex	r2, r3, [r4]
    730e:	2a00      	cmp	r2, #0
    7310:	d1f7      	bne.n	7302 <sc_process+0x5e>
    7312:	f3bf 8f5b 	dmb	ish
}
    7316:	b002      	add	sp, #8
    7318:	bd10      	pop	{r4, pc}
    731a:	bf00      	nop
    731c:	20003cd8 	.word	0x20003cd8
    7320:	00006ded 	.word	0x00006ded

00007324 <bt_gatt_attr_next>:
{
    7324:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    7326:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    7328:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    732a:	3101      	adds	r1, #1
    732c:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    732e:	2200      	movs	r2, #0
    7330:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    7334:	4608      	mov	r0, r1
    7336:	4a03      	ldr	r2, [pc, #12]	; (7344 <bt_gatt_attr_next+0x20>)
    7338:	f7ff ff74 	bl	7224 <bt_gatt_foreach_attr>
}
    733c:	9801      	ldr	r0, [sp, #4]
    733e:	b003      	add	sp, #12
    7340:	f85d fb04 	ldr.w	pc, [sp], #4
    7344:	00006a01 	.word	0x00006a01

00007348 <bt_gatt_attr_read_chrc>:
{
    7348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    734c:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    7350:	b08b      	sub	sp, #44	; 0x2c
    7352:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    7354:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    7356:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    735a:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    735e:	f88d 3014 	strb.w	r3, [sp, #20]
{
    7362:	4688      	mov	r8, r1
    7364:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    7366:	f7ff ffdd 	bl	7324 <bt_gatt_attr_next>
	if (!next) {
    736a:	4605      	mov	r5, r0
    736c:	bb40      	cbnz	r0, 73c0 <bt_gatt_attr_read_chrc+0x78>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    736e:	4b1c      	ldr	r3, [pc, #112]	; (73e0 <bt_gatt_attr_read_chrc+0x98>)
    7370:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    7374:	9302      	str	r3, [sp, #8]
    7376:	9201      	str	r2, [sp, #4]
    7378:	9300      	str	r3, [sp, #0]
    737a:	4a1a      	ldr	r2, [pc, #104]	; (73e4 <bt_gatt_attr_read_chrc+0x9c>)
    737c:	4b1a      	ldr	r3, [pc, #104]	; (73e8 <bt_gatt_attr_read_chrc+0xa0>)
    737e:	491b      	ldr	r1, [pc, #108]	; (73ec <bt_gatt_attr_read_chrc+0xa4>)
    7380:	481b      	ldr	r0, [pc, #108]	; (73f0 <bt_gatt_attr_read_chrc+0xa8>)
    7382:	f7f9 fe03 	bl	f8c <printk>
		pdu.value_handle = 0x0000;
    7386:	f88d 5015 	strb.w	r5, [sp, #21]
    738a:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    738e:	f8d9 1000 	ldr.w	r1, [r9]
    7392:	780b      	ldrb	r3, [r1, #0]
    7394:	b9c3      	cbnz	r3, 73c8 <bt_gatt_attr_read_chrc+0x80>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    7396:	884b      	ldrh	r3, [r1, #2]
    7398:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    739c:	2305      	movs	r3, #5
	if (offset > value_len) {
    739e:	42b3      	cmp	r3, r6
    73a0:	d31a      	bcc.n	73d8 <bt_gatt_attr_read_chrc+0x90>
	len = min(buf_len, value_len - offset);
    73a2:	1b9b      	subs	r3, r3, r6
    73a4:	42a3      	cmp	r3, r4
    73a6:	bfa8      	it	ge
    73a8:	4623      	movge	r3, r4
    73aa:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    73ac:	ab05      	add	r3, sp, #20
    73ae:	4622      	mov	r2, r4
    73b0:	1999      	adds	r1, r3, r6
    73b2:	4638      	mov	r0, r7
    73b4:	f7fa fc22 	bl	1bfc <memcpy>
}
    73b8:	4620      	mov	r0, r4
    73ba:	b00b      	add	sp, #44	; 0x2c
    73bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    73c0:	8a03      	ldrh	r3, [r0, #16]
    73c2:	f8ad 3015 	strh.w	r3, [sp, #21]
    73c6:	e7e2      	b.n	738e <bt_gatt_attr_read_chrc+0x46>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    73c8:	2210      	movs	r2, #16
    73ca:	3101      	adds	r1, #1
    73cc:	f10d 0017 	add.w	r0, sp, #23
    73d0:	f7fa fc14 	bl	1bfc <memcpy>
		value_len += 16;
    73d4:	2313      	movs	r3, #19
    73d6:	e7e2      	b.n	739e <bt_gatt_attr_read_chrc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    73d8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    73dc:	e7ec      	b.n	73b8 <bt_gatt_attr_read_chrc+0x70>
    73de:	bf00      	nop
    73e0:	000153a9 	.word	0x000153a9
    73e4:	000167ef 	.word	0x000167ef
    73e8:	0001777a 	.word	0x0001777a
    73ec:	000167b4 	.word	0x000167b4
    73f0:	000177cc 	.word	0x000177cc

000073f4 <bt_gatt_unsubscribe>:
	sys_snode_t *prev = NULL;

	__ASSERT(conn, "invalid parameters\n");
	__ASSERT(params, "invalid parameters\n");

	if (conn->state != BT_CONN_CONNECTED) {
    73f4:	7a43      	ldrb	r3, [r0, #9]
    73f6:	2b03      	cmp	r3, #3
{
    73f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73fc:	4680      	mov	r8, r0
    73fe:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
    7400:	d144      	bne.n	748c <bt_gatt_unsubscribe+0x98>
    7402:	4b2b      	ldr	r3, [pc, #172]	; (74b0 <bt_gatt_unsubscribe+0xbc>)
    7404:	681c      	ldr	r4, [r3, #0]
		return -ENOTCONN;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    7406:	b1cc      	cbz	r4, 743c <bt_gatt_unsubscribe+0x48>
    7408:	f1b4 0528 	subs.w	r5, r4, #40	; 0x28
    740c:	d144      	bne.n	7498 <bt_gatt_unsubscribe+0xa4>
    740e:	462c      	mov	r4, r5
    7410:	f04f 0b00 	mov.w	fp, #0
		/* Remove subscription */
		if (params == tmp) {
			found = true;
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    7414:	f8df a098 	ldr.w	sl, [pc, #152]	; 74b0 <bt_gatt_unsubscribe+0xbc>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    7418:	465a      	mov	r2, fp
    741a:	465f      	mov	r7, fp
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    741c:	f106 0928 	add.w	r9, r6, #40	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    7420:	b975      	cbnz	r5, 7440 <bt_gatt_unsubscribe+0x4c>
		    tmp->value_handle == params->value_handle) {
			has_subscription = true;
		}
	}

	if (!found) {
    7422:	2a00      	cmp	r2, #0
    7424:	d035      	beq.n	7492 <bt_gatt_unsubscribe+0x9e>
		return -EINVAL;
	}

	if (has_subscription) {
    7426:	b33f      	cbz	r7, 7478 <bt_gatt_unsubscribe+0x84>
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
    7428:	69f4      	ldr	r4, [r6, #28]
    742a:	462b      	mov	r3, r5
    742c:	462a      	mov	r2, r5
    742e:	4631      	mov	r1, r6
    7430:	4640      	mov	r0, r8
    7432:	47a0      	blx	r4
		return 0;
    7434:	4628      	mov	r0, r5

	params->value = 0x0000;

	return gatt_write_ccc(conn, params->ccc_handle, params->value,
			      gatt_write_ccc_rsp, params);
}
    7436:	b003      	add	sp, #12
    7438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    743c:	4625      	mov	r5, r4
    743e:	e7e7      	b.n	7410 <bt_gatt_unsubscribe+0x1c>
		if (params == tmp) {
    7440:	42b5      	cmp	r5, r6
    7442:	d108      	bne.n	7456 <bt_gatt_unsubscribe+0x62>
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    7444:	464a      	mov	r2, r9
    7446:	4659      	mov	r1, fp
    7448:	4650      	mov	r0, sl
    744a:	f7ff fac8 	bl	69de <sys_slist_remove>
			found = true;
    744e:	2201      	movs	r2, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    7450:	bb3c      	cbnz	r4, 74a2 <bt_gatt_unsubscribe+0xae>
    7452:	4623      	mov	r3, r4
    7454:	e028      	b.n	74a8 <bt_gatt_unsubscribe+0xb4>
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    7456:	f105 0114 	add.w	r1, r5, #20
    745a:	4640      	mov	r0, r8
    745c:	9201      	str	r2, [sp, #4]
    745e:	f7fd f9cd 	bl	47fc <bt_conn_addr_le_cmp>
			prev = &tmp->node;
    7462:	f105 0b28 	add.w	fp, r5, #40	; 0x28
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    7466:	9a01      	ldr	r2, [sp, #4]
    7468:	2800      	cmp	r0, #0
    746a:	d1f1      	bne.n	7450 <bt_gatt_unsubscribe+0x5c>
    746c:	8c29      	ldrh	r1, [r5, #32]
    746e:	8c33      	ldrh	r3, [r6, #32]
			has_subscription = true;
    7470:	4299      	cmp	r1, r3
    7472:	bf08      	it	eq
    7474:	2701      	moveq	r7, #1
    7476:	e7eb      	b.n	7450 <bt_gatt_unsubscribe+0x5c>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    7478:	8c71      	ldrh	r1, [r6, #34]	; 0x22
	params->value = 0x0000;
    747a:	84b7      	strh	r7, [r6, #36]	; 0x24
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    747c:	4633      	mov	r3, r6
    747e:	463a      	mov	r2, r7
    7480:	4640      	mov	r0, r8
}
    7482:	b003      	add	sp, #12
    7484:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    7488:	f7ff bbc4 	b.w	6c14 <gatt_write_ccc.constprop.19>
		return -ENOTCONN;
    748c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    7490:	e7d1      	b.n	7436 <bt_gatt_unsubscribe+0x42>
		return -EINVAL;
    7492:	f06f 0015 	mvn.w	r0, #21
    7496:	e7ce      	b.n	7436 <bt_gatt_unsubscribe+0x42>
    7498:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    749a:	2c00      	cmp	r4, #0
    749c:	d0b8      	beq.n	7410 <bt_gatt_unsubscribe+0x1c>
    749e:	3c28      	subs	r4, #40	; 0x28
    74a0:	e7b6      	b.n	7410 <bt_gatt_unsubscribe+0x1c>
    74a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    74a4:	b103      	cbz	r3, 74a8 <bt_gatt_unsubscribe+0xb4>
    74a6:	3b28      	subs	r3, #40	; 0x28
    74a8:	4625      	mov	r5, r4
    74aa:	461c      	mov	r4, r3
    74ac:	e7b8      	b.n	7420 <bt_gatt_unsubscribe+0x2c>
    74ae:	bf00      	nop
    74b0:	200005f0 	.word	0x200005f0

000074b4 <bt_gatt_notification>:
{
    74b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    74b8:	4699      	mov	r9, r3
    74ba:	4b17      	ldr	r3, [pc, #92]	; (7518 <bt_gatt_notification+0x64>)
    74bc:	681b      	ldr	r3, [r3, #0]
    74be:	4605      	mov	r5, r0
    74c0:	460e      	mov	r6, r1
    74c2:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    74c4:	b333      	cbz	r3, 7514 <bt_gatt_notification+0x60>
    74c6:	f1b3 0a28 	subs.w	sl, r3, #40	; 0x28
    74ca:	d101      	bne.n	74d0 <bt_gatt_notification+0x1c>
    74cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    74d0:	681c      	ldr	r4, [r3, #0]
    74d2:	b104      	cbz	r4, 74d6 <bt_gatt_notification+0x22>
    74d4:	3c28      	subs	r4, #40	; 0x28
		if (bt_conn_addr_le_cmp(conn, &params->_peer) ||
    74d6:	f10a 0114 	add.w	r1, sl, #20
    74da:	4628      	mov	r0, r5
    74dc:	f7fd f98e 	bl	47fc <bt_conn_addr_le_cmp>
    74e0:	b978      	cbnz	r0, 7502 <bt_gatt_notification+0x4e>
    74e2:	f8ba 3020 	ldrh.w	r3, [sl, #32]
    74e6:	42b3      	cmp	r3, r6
    74e8:	d10b      	bne.n	7502 <bt_gatt_notification+0x4e>
		if (params->notify(conn, params, data, length) ==
    74ea:	f8da 701c 	ldr.w	r7, [sl, #28]
    74ee:	464b      	mov	r3, r9
    74f0:	4642      	mov	r2, r8
    74f2:	4651      	mov	r1, sl
    74f4:	4628      	mov	r0, r5
    74f6:	47b8      	blx	r7
    74f8:	b918      	cbnz	r0, 7502 <bt_gatt_notification+0x4e>
			bt_gatt_unsubscribe(conn, params);
    74fa:	4651      	mov	r1, sl
    74fc:	4628      	mov	r0, r5
    74fe:	f7ff ff79 	bl	73f4 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    7502:	b90c      	cbnz	r4, 7508 <bt_gatt_notification+0x54>
    7504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7508:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    750a:	b103      	cbz	r3, 750e <bt_gatt_notification+0x5a>
    750c:	3b28      	subs	r3, #40	; 0x28
    750e:	46a2      	mov	sl, r4
    7510:	461c      	mov	r4, r3
    7512:	e7e0      	b.n	74d6 <bt_gatt_notification+0x22>
    7514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7518:	200005f0 	.word	0x200005f0

0000751c <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    751c:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    751e:	4a0e      	ldr	r2, [pc, #56]	; (7558 <bt_gatt_connected+0x3c>)
    7520:	4603      	mov	r3, r0
{
    7522:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    7524:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7528:	2001      	movs	r0, #1
    752a:	f7ff fe7b 	bl	7224 <bt_gatt_foreach_attr>
    752e:	4b0b      	ldr	r3, [pc, #44]	; (755c <bt_gatt_connected+0x40>)
    7530:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&subscriptions, params, node) {
    7532:	b10c      	cbz	r4, 7538 <bt_gatt_connected+0x1c>
    7534:	3c28      	subs	r4, #40	; 0x28
    7536:	b904      	cbnz	r4, 753a <bt_gatt_connected+0x1e>
    7538:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    753a:	f104 0114 	add.w	r1, r4, #20
    753e:	4628      	mov	r0, r5
    7540:	f7fd f95c 	bl	47fc <bt_conn_addr_le_cmp>
    7544:	b928      	cbnz	r0, 7552 <bt_gatt_connected+0x36>
		gatt_write_ccc(conn, params->ccc_handle, params->value,
    7546:	4623      	mov	r3, r4
    7548:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    754a:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    754c:	4628      	mov	r0, r5
    754e:	f7ff fb61 	bl	6c14 <gatt_write_ccc.constprop.19>
    7552:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    7554:	e7ed      	b.n	7532 <bt_gatt_connected+0x16>
    7556:	bf00      	nop
    7558:	00006d7d 	.word	0x00006d7d
    755c:	200005f0 	.word	0x200005f0

00007560 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7560:	4603      	mov	r3, r0
{
    7562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7566:	4a21      	ldr	r2, [pc, #132]	; (75ec <bt_gatt_disconnected+0x8c>)
{
    7568:	4607      	mov	r7, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    756a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    756e:	2001      	movs	r0, #1
    7570:	f7ff fe58 	bl	7224 <bt_gatt_foreach_attr>
    7574:	4b1e      	ldr	r3, [pc, #120]	; (75f0 <bt_gatt_disconnected+0x90>)
    7576:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    7578:	b3b3      	cbz	r3, 75e8 <bt_gatt_disconnected+0x88>
    757a:	f1b3 0628 	subs.w	r6, r3, #40	; 0x28
    757e:	d11b      	bne.n	75b8 <bt_gatt_disconnected+0x58>
    7580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    7584:	4640      	mov	r0, r8
    7586:	f7fc fdb9 	bl	40fc <bt_addr_le_is_bonded>
    758a:	b118      	cbz	r0, 7594 <bt_gatt_disconnected+0x34>
    758c:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
    7590:	07db      	lsls	r3, r3, #31
    7592:	d509      	bpl.n	75a8 <bt_gatt_disconnected+0x48>
			params->value = 0;
    7594:	f8a6 9024 	strh.w	r9, [r6, #36]	; 0x24
			gatt_subscription_remove(conn, prev, params);
    7598:	4632      	mov	r2, r6
    759a:	4629      	mov	r1, r5
    759c:	4638      	mov	r0, r7
    759e:	f7ff fa53 	bl	6a48 <gatt_subscription_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    75a2:	b9dc      	cbnz	r4, 75dc <bt_gatt_disconnected+0x7c>
    75a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (params->_peer.type == BT_ADDR_LE_PUBLIC) {
    75a8:	7d33      	ldrb	r3, [r6, #20]
    75aa:	b1a3      	cbz	r3, 75d6 <bt_gatt_disconnected+0x76>
    75ac:	2207      	movs	r2, #7
    75ae:	4641      	mov	r1, r8
    75b0:	4650      	mov	r0, sl
    75b2:	f7fa fb23 	bl	1bfc <memcpy>
    75b6:	e00e      	b.n	75d6 <bt_gatt_disconnected+0x76>
    75b8:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    75ba:	b104      	cbz	r4, 75be <bt_gatt_disconnected+0x5e>
    75bc:	3c28      	subs	r4, #40	; 0x28
    75be:	2500      	movs	r5, #0
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    75c0:	f107 0844 	add.w	r8, r7, #68	; 0x44
			params->value = 0;
    75c4:	46a9      	mov	r9, r5
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    75c6:	f106 0a14 	add.w	sl, r6, #20
    75ca:	4651      	mov	r1, sl
    75cc:	4638      	mov	r0, r7
    75ce:	f7fd f915 	bl	47fc <bt_conn_addr_le_cmp>
    75d2:	2800      	cmp	r0, #0
    75d4:	d0d6      	beq.n	7584 <bt_gatt_disconnected+0x24>
			prev = &params->node;
    75d6:	f106 0528 	add.w	r5, r6, #40	; 0x28
    75da:	e7e2      	b.n	75a2 <bt_gatt_disconnected+0x42>
    75dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    75de:	b103      	cbz	r3, 75e2 <bt_gatt_disconnected+0x82>
    75e0:	3b28      	subs	r3, #40	; 0x28
    75e2:	4626      	mov	r6, r4
    75e4:	461c      	mov	r4, r3
    75e6:	e7ee      	b.n	75c6 <bt_gatt_disconnected+0x66>
    75e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    75ec:	00006e65 	.word	0x00006e65
    75f0:	200005f0 	.word	0x200005f0

000075f4 <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    75f4:	b570      	push	{r4, r5, r6, lr}
    75f6:	b086      	sub	sp, #24
    75f8:	4605      	mov	r5, r0
    75fa:	460e      	mov	r6, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    75fc:	f00d f90e 	bl	1481c <_impl_k_current_get>
	int i;
	static struct bt_l2cap_chan_ops ops = {
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);
    7600:	4c10      	ldr	r4, [pc, #64]	; (7644 <bt_smp_accept+0x50>)
    7602:	882b      	ldrh	r3, [r5, #0]
    7604:	9303      	str	r3, [sp, #12]
    7606:	9001      	str	r0, [sp, #4]
    7608:	4b0f      	ldr	r3, [pc, #60]	; (7648 <bt_smp_accept+0x54>)
    760a:	9404      	str	r4, [sp, #16]
    760c:	9502      	str	r5, [sp, #8]
    760e:	9400      	str	r4, [sp, #0]
    7610:	4a0e      	ldr	r2, [pc, #56]	; (764c <bt_smp_accept+0x58>)
    7612:	490f      	ldr	r1, [pc, #60]	; (7650 <bt_smp_accept+0x5c>)
    7614:	480f      	ldr	r0, [pc, #60]	; (7654 <bt_smp_accept+0x60>)
    7616:	f7f9 fcb9 	bl	f8c <printk>

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    761a:	4b0f      	ldr	r3, [pc, #60]	; (7658 <bt_smp_accept+0x64>)
    761c:	6818      	ldr	r0, [r3, #0]
    761e:	b920      	cbnz	r0, 762a <bt_smp_accept+0x36>
			continue;
		}

		smp->chan.ops = &ops;
    7620:	4a0e      	ldr	r2, [pc, #56]	; (765c <bt_smp_accept+0x68>)
    7622:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    7624:	6033      	str	r3, [r6, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    7626:	b006      	add	sp, #24
    7628:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    762a:	9402      	str	r4, [sp, #8]
    762c:	e88d 0030 	stmia.w	sp, {r4, r5}
    7630:	4b05      	ldr	r3, [pc, #20]	; (7648 <bt_smp_accept+0x54>)
    7632:	4a0b      	ldr	r2, [pc, #44]	; (7660 <bt_smp_accept+0x6c>)
    7634:	4906      	ldr	r1, [pc, #24]	; (7650 <bt_smp_accept+0x5c>)
    7636:	480b      	ldr	r0, [pc, #44]	; (7664 <bt_smp_accept+0x70>)
    7638:	f7f9 fca8 	bl	f8c <printk>
	return -ENOMEM;
    763c:	f06f 000b 	mvn.w	r0, #11
    7640:	e7f1      	b.n	7626 <bt_smp_accept+0x32>
    7642:	bf00      	nop
    7644:	000153a9 	.word	0x000153a9
    7648:	000178fe 	.word	0x000178fe
    764c:	000167ad 	.word	0x000167ad
    7650:	000167b4 	.word	0x000167b4
    7654:	0001790c 	.word	0x0001790c
    7658:	200005f8 	.word	0x200005f8
    765c:	20003d18 	.word	0x20003d18
    7660:	00016765 	.word	0x00016765
    7664:	00017933 	.word	0x00017933

00007668 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    7668:	2100      	movs	r1, #0
{
    766a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    766e:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    7670:	4608      	mov	r0, r1
    7672:	f7fd fed2 	bl	541a <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7676:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    767a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    767c:	2101      	movs	r1, #1
    767e:	4630      	mov	r0, r6
    7680:	f00c f876 	bl	13770 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    7684:	2505      	movs	r5, #5
    7686:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    7688:	2101      	movs	r1, #1
    768a:	4630      	mov	r0, r6
    768c:	f00c f870 	bl	13770 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    7690:	7005      	strb	r5, [r0, #0]
    7692:	4622      	mov	r2, r4
    7694:	4638      	mov	r0, r7
    7696:	2300      	movs	r3, #0
    7698:	2106      	movs	r1, #6
}
    769a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    769e:	f7fd bebf 	b.w	5420 <bt_l2cap_send_cb>

000076a2 <bt_smp_sign_verify>:
    76a2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    76a6:	4770      	bx	lr

000076a8 <bt_smp_sign>:
}
    76a8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    76ac:	4770      	bx	lr
	...

000076b0 <bt_smp_init>:

int bt_smp_init(void)
{
    76b0:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    76b2:	4802      	ldr	r0, [pc, #8]	; (76bc <bt_smp_init+0xc>)
    76b4:	f7fd fdf6 	bl	52a4 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    76b8:	2000      	movs	r0, #0
    76ba:	bd08      	pop	{r3, pc}
    76bc:	20003d0c 	.word	0x20003d0c

000076c0 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    76c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    76c2:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    76c4:	1dc3      	adds	r3, r0, #7
{
    76c6:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    76c8:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    76cc:	1e50      	subs	r0, r2, #1
{
    76ce:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    76d0:	b280      	uxth	r0, r0
{
    76d2:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    76d4:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    76d6:	2100      	movs	r1, #0
    76d8:	2204      	movs	r2, #4
    76da:	fb06 5000 	mla	r0, r6, r0, r5
    76de:	f7fa fab9 	bl	1c54 <memset>
    76e2:	3c02      	subs	r4, #2
    76e4:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    76e6:	f64f 77ff 	movw	r7, #65535	; 0xffff
    76ea:	42bc      	cmp	r4, r7
    76ec:	d101      	bne.n	76f2 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    76ee:	b003      	add	sp, #12
    76f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    76f2:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    76f6:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    76f8:	2204      	movs	r2, #4
    76fa:	1b80      	subs	r0, r0, r6
    76fc:	eb0d 0102 	add.w	r1, sp, r2
    7700:	4428      	add	r0, r5
    7702:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    7704:	9301      	str	r3, [sp, #4]
    7706:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    7708:	f7fa fa78 	bl	1bfc <memcpy>
    770c:	e7ed      	b.n	76ea <mem_init+0x2a>

0000770e <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    770e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    7710:	6805      	ldr	r5, [r0, #0]
{
    7712:	4606      	mov	r6, r0
	if (*mem_head) {
    7714:	b195      	cbz	r5, 773c <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    7716:	1deb      	adds	r3, r5, #7
    7718:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    771c:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    771e:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    7720:	4629      	mov	r1, r5
    7722:	eb0d 0002 	add.w	r0, sp, r2
    7726:	f7fa fa69 	bl	1bfc <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    772a:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    772c:	3c01      	subs	r4, #1
    772e:	b2a4      	uxth	r4, r4
		if (head) {
    7730:	b11b      	cbz	r3, 773a <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    7732:	1dda      	adds	r2, r3, #7
    7734:	f022 0203 	bic.w	r2, r2, #3
    7738:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    773a:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    773c:	4628      	mov	r0, r5
    773e:	b002      	add	sp, #8
    7740:	bd70      	pop	{r4, r5, r6, pc}

00007742 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    7742:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    7744:	680c      	ldr	r4, [r1, #0]
{
    7746:	4606      	mov	r6, r0
    7748:	460d      	mov	r5, r1
	if (*mem_head) {
    774a:	b11c      	cbz	r4, 7754 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    774c:	1de3      	adds	r3, r4, #7
    774e:	f023 0303 	bic.w	r3, r3, #3
    7752:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    7754:	2204      	movs	r2, #4
    7756:	4629      	mov	r1, r5
    7758:	4630      	mov	r0, r6
    775a:	f7fa fa4f 	bl	1bfc <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    775e:	1df2      	adds	r2, r6, #7
    7760:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    7764:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    7766:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    7768:	602e      	str	r6, [r5, #0]
    776a:	bd70      	pop	{r4, r5, r6, pc}

0000776c <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    776c:	b118      	cbz	r0, 7776 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    776e:	3007      	adds	r0, #7
    7770:	f020 0003 	bic.w	r0, r0, #3
    7774:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    7776:	4770      	bx	lr

00007778 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    7778:	fb02 0001 	mla	r0, r2, r1, r0
    777c:	4770      	bx	lr

0000777e <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    777e:	1a40      	subs	r0, r0, r1
    7780:	b280      	uxth	r0, r0
}
    7782:	fbb0 f0f2 	udiv	r0, r0, r2
    7786:	4770      	bx	lr

00007788 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    7788:	b510      	push	{r4, lr}
	src += len;
    778a:	4411      	add	r1, r2
    778c:	3801      	subs	r0, #1
	while (len--) {
    778e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7792:	3a01      	subs	r2, #1
    7794:	b292      	uxth	r2, r2
    7796:	429a      	cmp	r2, r3
    7798:	d100      	bne.n	779c <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    779a:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    779c:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    77a0:	f800 4f01 	strb.w	r4, [r0, #1]!
    77a4:	e7f5      	b.n	7792 <mem_rcopy+0xa>

000077a6 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    77a6:	4401      	add	r1, r0
	while (len--) {
    77a8:	4288      	cmp	r0, r1
    77aa:	d101      	bne.n	77b0 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    77ac:	2000      	movs	r0, #0
    77ae:	4770      	bx	lr
		if (*src++) {
    77b0:	f810 3b01 	ldrb.w	r3, [r0], #1
    77b4:	2b00      	cmp	r3, #0
    77b6:	d0f7      	beq.n	77a8 <mem_nz+0x2>
			return 1;
    77b8:	2001      	movs	r0, #1
}
    77ba:	4770      	bx	lr

000077bc <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    77bc:	6010      	str	r0, [r2, #0]
    77be:	6008      	str	r0, [r1, #0]

	return link;
}
    77c0:	4770      	bx	lr

000077c2 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    77c2:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    77c4:	6814      	ldr	r4, [r2, #0]
    77c6:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    77c8:	6814      	ldr	r4, [r2, #0]
    77ca:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    77cc:	6010      	str	r0, [r2, #0]

	return link;
}
    77ce:	bd10      	pop	{r4, pc}

000077d0 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    77d0:	4288      	cmp	r0, r1
    77d2:	d003      	beq.n	77dc <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    77d4:	b11a      	cbz	r2, 77de <memq_peek+0xe>
		*mem = head->mem;
    77d6:	6843      	ldr	r3, [r0, #4]
    77d8:	6013      	str	r3, [r2, #0]
    77da:	4770      	bx	lr
		return NULL;
    77dc:	2000      	movs	r0, #0
	}

	return head;
}
    77de:	4770      	bx	lr

000077e0 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    77e0:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    77e2:	4283      	cmp	r3, r0
    77e4:	d009      	beq.n	77fa <memq_dequeue+0x1a>
	if (mem) {
    77e6:	b122      	cbz	r2, 77f2 <memq_dequeue+0x12>
		*mem = head->mem;
    77e8:	6858      	ldr	r0, [r3, #4]
    77ea:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    77ec:	681a      	ldr	r2, [r3, #0]
    77ee:	600a      	str	r2, [r1, #0]

	return link;
    77f0:	e001      	b.n	77f6 <memq_dequeue+0x16>
	if (!link) {
    77f2:	2b00      	cmp	r3, #0
    77f4:	d1fa      	bne.n	77ec <memq_dequeue+0xc>
}
    77f6:	4618      	mov	r0, r3
    77f8:	4770      	bx	lr
		return NULL;
    77fa:	2300      	movs	r3, #0
    77fc:	e7fb      	b.n	77f6 <memq_dequeue+0x16>
	...

00007800 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    7800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    7804:	4f11      	ldr	r7, [pc, #68]	; (784c <mayfly_init+0x4c>)
    7806:	f8df 9048 	ldr.w	r9, [pc, #72]	; 7850 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    780a:	2604      	movs	r6, #4
	while (callee_id--) {
    780c:	3e01      	subs	r6, #1
    780e:	b2f6      	uxtb	r6, r6
    7810:	2eff      	cmp	r6, #255	; 0xff
    7812:	d019      	beq.n	7848 <mayfly_init+0x48>
    7814:	b233      	sxth	r3, r6
    7816:	ea4f 0883 	mov.w	r8, r3, lsl #2
    781a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    781e:	011d      	lsls	r5, r3, #4
    7820:	2404      	movs	r4, #4
    7822:	f04f 0a0c 	mov.w	sl, #12
    7826:	e00a      	b.n	783e <mayfly_init+0x3e>
    7828:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    782c:	1d0a      	adds	r2, r1, #4
    782e:	eb04 0008 	add.w	r0, r4, r8
    7832:	443a      	add	r2, r7
    7834:	4439      	add	r1, r7
    7836:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    783a:	f7ff ffbf 	bl	77bc <memq_init>
		while (caller_id--) {
    783e:	3c01      	subs	r4, #1
    7840:	b2e4      	uxtb	r4, r4
    7842:	2cff      	cmp	r4, #255	; 0xff
    7844:	d1f0      	bne.n	7828 <mayfly_init+0x28>
    7846:	e7e1      	b.n	780c <mayfly_init+0xc>
    7848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    784c:	2000070c 	.word	0x2000070c
    7850:	2000068c 	.word	0x2000068c

00007854 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    7854:	b4f0      	push	{r4, r5, r6, r7}
    7856:	4b12      	ldr	r3, [pc, #72]	; (78a0 <mayfly_enable+0x4c>)
    7858:	4605      	mov	r5, r0
    785a:	460f      	mov	r7, r1
    785c:	260c      	movs	r6, #12
    785e:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    7860:	b172      	cbz	r2, 7880 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    7862:	4361      	muls	r1, r4
    7864:	fb06 1400 	mla	r4, r6, r0, r1
    7868:	4423      	add	r3, r4
    786a:	7a59      	ldrb	r1, [r3, #9]
    786c:	7a18      	ldrb	r0, [r3, #8]
    786e:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    7870:	bf04      	itt	eq
    7872:	3101      	addeq	r1, #1
    7874:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    7876:	4628      	mov	r0, r5
    7878:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    787a:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    787c:	f00b bd72 	b.w	13364 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    7880:	434c      	muls	r4, r1
    7882:	fb06 4400 	mla	r4, r6, r0, r4
    7886:	4423      	add	r3, r4
    7888:	7a9c      	ldrb	r4, [r3, #10]
    788a:	7ada      	ldrb	r2, [r3, #11]
    788c:	42a2      	cmp	r2, r4
    788e:	d104      	bne.n	789a <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    7890:	3201      	adds	r2, #1
    7892:	729a      	strb	r2, [r3, #10]
}
    7894:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    7896:	f00b bdc5 	b.w	13424 <mayfly_pend>
}
    789a:	bcf0      	pop	{r4, r5, r6, r7}
    789c:	4770      	bx	lr
    789e:	bf00      	nop
    78a0:	2000070c 	.word	0x2000070c

000078a4 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    78a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78a6:	4605      	mov	r5, r0
    78a8:	460e      	mov	r6, r1
    78aa:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    78ac:	b18a      	cbz	r2, 78d2 <mayfly_enqueue+0x2e>
    78ae:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    78b0:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    78b2:	7820      	ldrb	r0, [r4, #0]
    78b4:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    78b6:	f010 0703 	ands.w	r7, r0, #3
    78ba:	d029      	beq.n	7910 <mayfly_enqueue+0x6c>
		if (chain) {
    78bc:	b303      	cbz	r3, 7900 <mayfly_enqueue+0x5c>
			if (state != 1) {
    78be:	2f01      	cmp	r7, #1
    78c0:	d039      	beq.n	7936 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    78c2:	3201      	adds	r2, #1
    78c4:	b2d2      	uxtb	r2, r2
    78c6:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    78c8:	4631      	mov	r1, r6
    78ca:	4628      	mov	r0, r5
    78cc:	f00b fdaa 	bl	13424 <mayfly_pend>
    78d0:	e01c      	b.n	790c <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    78d2:	f00b fd95 	bl	13400 <mayfly_prio_is_equal>
    78d6:	2800      	cmp	r0, #0
    78d8:	d0e9      	beq.n	78ae <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    78da:	4631      	mov	r1, r6
    78dc:	4628      	mov	r0, r5
    78de:	f00b fd69 	bl	133b4 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    78e2:	2800      	cmp	r0, #0
    78e4:	d0e3      	beq.n	78ae <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    78e6:	2330      	movs	r3, #48	; 0x30
    78e8:	220c      	movs	r2, #12
    78ea:	4373      	muls	r3, r6
    78ec:	fb02 3305 	mla	r3, r2, r5, r3
    78f0:	4a12      	ldr	r2, [pc, #72]	; (793c <mayfly_enqueue+0x98>)
    78f2:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    78f4:	7a93      	ldrb	r3, [r2, #10]
    78f6:	7ad2      	ldrb	r2, [r2, #11]
    78f8:	1a9b      	subs	r3, r3, r2
    78fa:	bf18      	it	ne
    78fc:	2301      	movne	r3, #1
    78fe:	e7d7      	b.n	78b0 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    7900:	3202      	adds	r2, #2
    7902:	b2d2      	uxtb	r2, r2
    7904:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    7906:	68e3      	ldr	r3, [r4, #12]
    7908:	68a0      	ldr	r0, [r4, #8]
    790a:	4798      	blx	r3
		return 0;
    790c:	2000      	movs	r0, #0
    790e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    7910:	2b00      	cmp	r3, #0
    7912:	d0f8      	beq.n	7906 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    7914:	3201      	adds	r2, #1
    7916:	b2d2      	uxtb	r2, r2
    7918:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    791a:	2304      	movs	r3, #4
    791c:	2230      	movs	r2, #48	; 0x30
    791e:	fb12 3206 	smlabb	r2, r2, r6, r3
    7922:	230c      	movs	r3, #12
    7924:	fb13 2305 	smlabb	r3, r3, r5, r2
    7928:	4a04      	ldr	r2, [pc, #16]	; (793c <mayfly_enqueue+0x98>)
    792a:	6860      	ldr	r0, [r4, #4]
    792c:	441a      	add	r2, r3
    792e:	4621      	mov	r1, r4
    7930:	f7ff ff47 	bl	77c2 <memq_enqueue>
    7934:	e7c8      	b.n	78c8 <mayfly_enqueue+0x24>
			return 1;
    7936:	4638      	mov	r0, r7

	return 0;
}
    7938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    793a:	bf00      	nop
    793c:	2000070c 	.word	0x2000070c

00007940 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    7940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7944:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7948:	b089      	sub	sp, #36	; 0x24
    794a:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    794c:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    7950:	4e43      	ldr	r6, [pc, #268]	; (7a60 <mayfly_run+0x120>)
    7952:	9304      	str	r3, [sp, #16]
{
    7954:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    7956:	2404      	movs	r4, #4
	u8_t disable = 0;
    7958:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    795c:	3c01      	subs	r4, #1
    795e:	b2e4      	uxtb	r4, r4
    7960:	2cff      	cmp	r4, #255	; 0xff
    7962:	d10b      	bne.n	797c <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    7964:	9b01      	ldr	r3, [sp, #4]
    7966:	2b00      	cmp	r3, #0
    7968:	d076      	beq.n	7a58 <mayfly_run+0x118>
    796a:	f1b8 0f00 	cmp.w	r8, #0
    796e:	d173      	bne.n	7a58 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    7970:	4642      	mov	r2, r8
    7972:	4629      	mov	r1, r5
    7974:	4628      	mov	r0, r5
    7976:	f00b fcf5 	bl	13364 <mayfly_enable_cb>
    797a:	e06d      	b.n	7a58 <mayfly_run+0x118>
		struct mayfly *m = 0;
    797c:	f10d 0b20 	add.w	fp, sp, #32
    7980:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    7982:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    7984:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    7988:	f04f 0930 	mov.w	r9, #48	; 0x30
    798c:	fb07 f304 	mul.w	r3, r7, r4
    7990:	fb09 3005 	mla	r0, r9, r5, r3
    7994:	1831      	adds	r1, r6, r0
    7996:	465a      	mov	r2, fp
    7998:	6849      	ldr	r1, [r1, #4]
    799a:	5830      	ldr	r0, [r6, r0]
    799c:	9302      	str	r3, [sp, #8]
    799e:	f7ff ff17 	bl	77d0 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    79a2:	9b04      	ldr	r3, [sp, #16]
    79a4:	fb17 3704 	smlabb	r7, r7, r4, r3
    79a8:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    79aa:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    79ac:	9303      	str	r3, [sp, #12]
		while (link) {
    79ae:	f1ba 0f00 	cmp.w	sl, #0
    79b2:	d119      	bne.n	79e8 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    79b4:	2230      	movs	r2, #48	; 0x30
    79b6:	230c      	movs	r3, #12
    79b8:	436a      	muls	r2, r5
    79ba:	fb03 2204 	mla	r2, r3, r4, r2
    79be:	4432      	add	r2, r6
    79c0:	7a91      	ldrb	r1, [r2, #10]
    79c2:	7ad0      	ldrb	r0, [r2, #11]
    79c4:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    79c6:	bf1e      	ittt	ne
    79c8:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    79ca:	2201      	movne	r2, #1
    79cc:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    79ce:	2230      	movs	r2, #48	; 0x30
    79d0:	436a      	muls	r2, r5
    79d2:	fb03 2304 	mla	r3, r3, r4, r2
    79d6:	4433      	add	r3, r6
    79d8:	7a1a      	ldrb	r2, [r3, #8]
    79da:	7a59      	ldrb	r1, [r3, #9]
    79dc:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    79de:	bf1c      	itt	ne
    79e0:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    79e2:	f04f 0801 	movne.w	r8, #1
    79e6:	e7b9      	b.n	795c <mayfly_run+0x1c>
			req = m->_req;
    79e8:	9b07      	ldr	r3, [sp, #28]
    79ea:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    79ec:	785a      	ldrb	r2, [r3, #1]
    79ee:	1abf      	subs	r7, r7, r2
    79f0:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    79f4:	2f01      	cmp	r7, #1
    79f6:	d104      	bne.n	7a02 <mayfly_run+0xc2>
				m->_ack--;
    79f8:	3a01      	subs	r2, #1
    79fa:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    79fc:	6898      	ldr	r0, [r3, #8]
    79fe:	68da      	ldr	r2, [r3, #12]
    7a00:	4790      	blx	r2
			req = m->_req;
    7a02:	9a07      	ldr	r2, [sp, #28]
    7a04:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    7a06:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    7a08:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    7a0a:	1a9a      	subs	r2, r3, r2
    7a0c:	f002 0203 	and.w	r2, r2, #3
    7a10:	2a01      	cmp	r2, #1
    7a12:	9305      	str	r3, [sp, #20]
    7a14:	d00d      	beq.n	7a32 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    7a16:	9b02      	ldr	r3, [sp, #8]
    7a18:	9903      	ldr	r1, [sp, #12]
    7a1a:	fb09 3005 	mla	r0, r9, r5, r3
    7a1e:	4430      	add	r0, r6
    7a20:	2200      	movs	r2, #0
    7a22:	6840      	ldr	r0, [r0, #4]
    7a24:	f7ff fedc 	bl	77e0 <memq_dequeue>
				m->_link = link;
    7a28:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    7a2a:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    7a2c:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    7a30:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    7a32:	9b02      	ldr	r3, [sp, #8]
    7a34:	fb09 3305 	mla	r3, r9, r5, r3
    7a38:	18f1      	adds	r1, r6, r3
    7a3a:	465a      	mov	r2, fp
    7a3c:	6849      	ldr	r1, [r1, #4]
    7a3e:	58f0      	ldr	r0, [r6, r3]
    7a40:	f7ff fec6 	bl	77d0 <memq_peek>
			if (state == 1) {
    7a44:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    7a46:	4682      	mov	sl, r0
			if (state == 1) {
    7a48:	d1b1      	bne.n	79ae <mayfly_run+0x6e>
				if (caller_id || link) {
    7a4a:	b90c      	cbnz	r4, 7a50 <mayfly_run+0x110>
    7a4c:	2800      	cmp	r0, #0
    7a4e:	d0b1      	beq.n	79b4 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    7a50:	4629      	mov	r1, r5
    7a52:	4628      	mov	r0, r5
    7a54:	f00b fce6 	bl	13424 <mayfly_pend>
	}
}
    7a58:	b009      	add	sp, #36	; 0x24
    7a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a5e:	bf00      	nop
    7a60:	2000070c 	.word	0x2000070c

00007a64 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    7a64:	b510      	push	{r4, lr}
    7a66:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    7a68:	2000      	movs	r0, #0

	while (octets_len--) {
    7a6a:	3901      	subs	r1, #1
    7a6c:	b2c9      	uxtb	r1, r1
    7a6e:	29ff      	cmp	r1, #255	; 0xff
    7a70:	d100      	bne.n	7a74 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    7a72:	bd10      	pop	{r4, pc}
		bite = *octets;
    7a74:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    7a78:	2b00      	cmp	r3, #0
    7a7a:	d0f6      	beq.n	7a6a <util_ones_count_get+0x6>
			bite &= (bite - 1);
    7a7c:	1e5c      	subs	r4, r3, #1
			one_count++;
    7a7e:	3001      	adds	r0, #1
			bite &= (bite - 1);
    7a80:	4023      	ands	r3, r4
			one_count++;
    7a82:	b2c0      	uxtb	r0, r0
    7a84:	e7f8      	b.n	7a78 <util_ones_count_get+0x14>

00007a86 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    7a86:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    7a88:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    7a8a:	6805      	ldr	r5, [r0, #0]
	current = previous;
    7a8c:	461a      	mov	r2, r3
	total = 0;
    7a8e:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    7a90:	2aff      	cmp	r2, #255	; 0xff
    7a92:	d101      	bne.n	7a98 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    7a94:	2000      	movs	r0, #0
    7a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    7a98:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    7a9c:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    7a9e:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    7aa2:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    7aa6:	d004      	beq.n	7ab2 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    7aa8:	68b3      	ldr	r3, [r6, #8]
    7aaa:	441c      	add	r4, r3
		current = ticker_current->next;
    7aac:	4613      	mov	r3, r2
    7aae:	463a      	mov	r2, r7
    7ab0:	e7ee      	b.n	7a90 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    7ab2:	4293      	cmp	r3, r2
    7ab4:	d100      	bne.n	7ab8 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    7ab6:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    7ab8:	b21b      	sxth	r3, r3
    7aba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7abe:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    7ac0:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    7ac2:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    7ac6:	7833      	ldrb	r3, [r6, #0]
    7ac8:	2bff      	cmp	r3, #255	; 0xff
    7aca:	d006      	beq.n	7ada <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    7acc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7ad0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    7ad4:	689a      	ldr	r2, [r3, #8]
    7ad6:	4402      	add	r2, r0
    7ad8:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    7ada:	4420      	add	r0, r4
    7adc:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007ade <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    7ade:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7ae0:	1a55      	subs	r5, r2, r1
    7ae2:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    7ae6:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    7ae8:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7aea:	d109      	bne.n	7b00 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7aec:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    7af0:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    7af2:	42a2      	cmp	r2, r4
    7af4:	d90e      	bls.n	7b14 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    7af6:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    7af8:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    7afa:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    7afc:	6144      	str	r4, [r0, #20]
    7afe:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7b00:	1a8a      	subs	r2, r1, r2
    7b02:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    7b06:	4293      	cmp	r3, r2
    7b08:	d901      	bls.n	7b0e <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    7b0a:	1a9a      	subs	r2, r3, r2
    7b0c:	e7f1      	b.n	7af2 <ticks_to_expire_prep+0x14>
    7b0e:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    7b10:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    7b12:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    7b14:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    7b16:	2200      	movs	r2, #0
    7b18:	e7ef      	b.n	7afa <ticks_to_expire_prep+0x1c>

00007b1a <ticker_job_op_cb>:
{
    7b1a:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7b1c:	2200      	movs	r2, #0
    7b1e:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    7b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    7b22:	6259      	str	r1, [r3, #36]	; 0x24
{
    7b24:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    7b26:	b10a      	cbz	r2, 7b2c <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    7b28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    7b2a:	4710      	bx	r2
    7b2c:	4770      	bx	lr

00007b2e <ticker_worker>:
{
    7b2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    7b32:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    7b34:	2301      	movs	r3, #1
{
    7b36:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    7b38:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    7b3a:	2d00      	cmp	r5, #0
    7b3c:	d14c      	bne.n	7bd8 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    7b3e:	7f43      	ldrb	r3, [r0, #29]
    7b40:	2bff      	cmp	r3, #255	; 0xff
    7b42:	d102      	bne.n	7b4a <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    7b44:	77c5      	strb	r5, [r0, #31]
		return;
    7b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    7b4a:	f00a ff75 	bl	12a38 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7b4e:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    7b50:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    7b52:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7b56:	1bc7      	subs	r7, r0, r7
    7b58:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    7b5c:	2eff      	cmp	r6, #255	; 0xff
    7b5e:	d006      	beq.n	7b6e <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    7b60:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    7b64:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7b68:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7b6a:	429f      	cmp	r7, r3
    7b6c:	d218      	bcs.n	7ba0 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    7b6e:	7aa2      	ldrb	r2, [r4, #10]
    7b70:	7ae3      	ldrb	r3, [r4, #11]
    7b72:	4293      	cmp	r3, r2
    7b74:	d105      	bne.n	7b82 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    7b76:	3301      	adds	r3, #1
    7b78:	b2db      	uxtb	r3, r3
			last = 0;
    7b7a:	2b02      	cmp	r3, #2
    7b7c:	bf08      	it	eq
    7b7e:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    7b80:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7b82:	7ae3      	ldrb	r3, [r4, #11]
    7b84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7b88:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7b8a:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    7b8c:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7b8e:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    7b90:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7b92:	46ac      	mov	ip, r5
    7b94:	4623      	mov	r3, r4
    7b96:	2104      	movs	r1, #4
    7b98:	2003      	movs	r0, #3
}
    7b9a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7b9e:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    7ba0:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    7ba2:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7ba4:	788a      	ldrb	r2, [r1, #2]
    7ba6:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    7ba8:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7bac:	1a9b      	subs	r3, r3, r2
    7bae:	b2db      	uxtb	r3, r3
    7bb0:	2b01      	cmp	r3, #1
    7bb2:	d1d3      	bne.n	7b5c <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    7bb4:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    7bb8:	3a01      	subs	r2, #1
    7bba:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    7bbc:	f1b9 0f00 	cmp.w	r9, #0
    7bc0:	d0cc      	beq.n	7b5c <ticker_worker+0x2e>
					   ticks_expired -
    7bc2:	6948      	ldr	r0, [r1, #20]
    7bc4:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    7bc6:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    7bc8:	1a28      	subs	r0, r5, r0
    7bca:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    7bcc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7bd0:	690b      	ldr	r3, [r1, #16]
    7bd2:	6a49      	ldr	r1, [r1, #36]	; 0x24
    7bd4:	47c8      	blx	r9
    7bd6:	e7c1      	b.n	7b5c <ticker_worker+0x2e>
    7bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007bdc <ticker_job>:
{
    7bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    7be0:	7fc2      	ldrb	r2, [r0, #31]
{
    7be2:	b095      	sub	sp, #84	; 0x54
    7be4:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    7be6:	2a00      	cmp	r2, #0
    7be8:	f040 83be 	bne.w	8368 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x368>
	ticks_previous = instance->ticks_current;
    7bec:	6943      	ldr	r3, [r0, #20]
    7bee:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    7bf0:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7bf2:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    7bf4:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7bf6:	7ac0      	ldrb	r0, [r0, #11]
    7bf8:	4298      	cmp	r0, r3
    7bfa:	f000 808f 	beq.w	7d1c <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    7bfe:	440b      	add	r3, r1
    7c00:	b2db      	uxtb	r3, r3
			first = 0;
    7c02:	2b02      	cmp	r3, #2
    7c04:	bf08      	it	eq
    7c06:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    7c08:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    7c0c:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    7c10:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    7c12:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    7c16:	9b07      	ldr	r3, [sp, #28]
    7c18:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    7c1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7c1e:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    7c22:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7c26:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    7c28:	f8db 3000 	ldr.w	r3, [fp]
    7c2c:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    7c2e:	f8db 3004 	ldr.w	r3, [fp, #4]
    7c32:	930d      	str	r3, [sp, #52]	; 0x34
    7c34:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7c38:	3b01      	subs	r3, #1
    7c3a:	b2db      	uxtb	r3, r3
    7c3c:	9304      	str	r3, [sp, #16]
	pending = 0;
    7c3e:	2300      	movs	r3, #0
    7c40:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    7c42:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    7c46:	9b04      	ldr	r3, [sp, #16]
    7c48:	2bff      	cmp	r3, #255	; 0xff
    7c4a:	d16a      	bne.n	7d22 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7c4c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    7c50:	9a05      	ldr	r2, [sp, #20]
    7c52:	1a9b      	subs	r3, r3, r2
    7c54:	bf18      	it	ne
    7c56:	2301      	movne	r3, #1
    7c58:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    7c5a:	9b03      	ldr	r3, [sp, #12]
    7c5c:	b1e3      	cbz	r3, 7c98 <ticker_job+0xbc>
	node = &instance->node[0];
    7c5e:	f8db 3000 	ldr.w	r3, [fp]
    7c62:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    7c64:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    7c68:	f89b 601d 	ldrb.w	r6, [fp, #29]
    7c6c:	2eff      	cmp	r6, #255	; 0xff
    7c6e:	d00c      	beq.n	7c8a <ticker_job+0xae>
		ticker = &node[id_expired];
    7c70:	b237      	sxth	r7, r6
    7c72:	9b06      	ldr	r3, [sp, #24]
    7c74:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    7c78:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7c7c:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7c7e:	4545      	cmp	r5, r8
    7c80:	f240 8136 	bls.w	7ef0 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    7c84:	eba5 0508 	sub.w	r5, r5, r8
    7c88:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    7c8a:	9b04      	ldr	r3, [sp, #16]
    7c8c:	9a03      	ldr	r2, [sp, #12]
    7c8e:	9905      	ldr	r1, [sp, #20]
    7c90:	42b1      	cmp	r1, r6
    7c92:	bf18      	it	ne
    7c94:	4613      	movne	r3, r2
    7c96:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    7c98:	f8db 3000 	ldr.w	r3, [fp]
    7c9c:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    7c9e:	f8db 3004 	ldr.w	r3, [fp, #4]
    7ca2:	9312      	str	r3, [sp, #72]	; 0x48
    7ca4:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7ca8:	3b01      	subs	r3, #1
    7caa:	b2db      	uxtb	r3, r3
    7cac:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    7cae:	9b03      	ldr	r3, [sp, #12]
    7cb0:	2bff      	cmp	r3, #255	; 0xff
    7cb2:	f040 8170 	bne.w	7f96 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7cb6:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7cba:	9a05      	ldr	r2, [sp, #20]
    7cbc:	4293      	cmp	r3, r2
	if (!pending) {
    7cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    7cc0:	f040 8349 	bne.w	8356 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x356>
	if (!pending) {
    7cc4:	b95b      	cbnz	r3, 7cde <ticker_job+0x102>
    7cc6:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    7cca:	f8db 3004 	ldr.w	r3, [fp, #4]
    7cce:	9303      	str	r3, [sp, #12]
    7cd0:	3c01      	subs	r4, #1
    7cd2:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    7cd4:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    7cd8:	2cff      	cmp	r4, #255	; 0xff
    7cda:	f040 82a0 	bne.w	821e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x21e>
	instance->job_guard = 0;
    7cde:	2300      	movs	r3, #0
    7ce0:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    7ce4:	9b04      	ldr	r3, [sp, #16]
    7ce6:	b14b      	cbz	r3, 7cfc <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    7ce8:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7cec:	2bff      	cmp	r3, #255	; 0xff
    7cee:	f040 82e9 	bne.w	82c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c4>
		if (cntr_stop() == 0) {
    7cf2:	f00a fe73 	bl	129dc <cntr_stop>
    7cf6:	b908      	cbnz	r0, 7cfc <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    7cf8:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    7cfc:	f89b 301f 	ldrb.w	r3, [fp, #31]
    7d00:	2b00      	cmp	r3, #0
    7d02:	f000 8331 	beq.w	8368 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x368>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7d06:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7d0a:	465b      	mov	r3, fp
    7d0c:	2201      	movs	r2, #1
    7d0e:	2103      	movs	r1, #3
    7d10:	2004      	movs	r0, #4
    7d12:	46a4      	mov	ip, r4
}
    7d14:	b015      	add	sp, #84	; 0x54
    7d16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7d1a:	4760      	bx	ip
		flag_elapsed = 0;
    7d1c:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    7d1e:	4690      	mov	r8, r2
    7d20:	e77f      	b.n	7c22 <ticker_job+0x46>
		user = &users[count_user];
    7d22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7d24:	9a04      	ldr	r2, [sp, #16]
    7d26:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    7d2a:	687b      	ldr	r3, [r7, #4]
    7d2c:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    7d2e:	78f9      	ldrb	r1, [r7, #3]
    7d30:	78be      	ldrb	r6, [r7, #2]
    7d32:	428e      	cmp	r6, r1
    7d34:	f000 80d7 	beq.w	7ee6 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    7d38:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    7d3a:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    7d3c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    7d40:	0112      	lsls	r2, r2, #4
    7d42:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    7d44:	1c73      	adds	r3, r6, #1
    7d46:	b2db      	uxtb	r3, r3
				middle = 0;
    7d48:	4298      	cmp	r0, r3
    7d4a:	bf08      	it	eq
    7d4c:	2300      	moveq	r3, #0
			user->middle = middle;
    7d4e:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    7d50:	9b08      	ldr	r3, [sp, #32]
    7d52:	5c9a      	ldrb	r2, [r3, r2]
    7d54:	2a03      	cmp	r2, #3
    7d56:	d9eb      	bls.n	7d30 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    7d58:	2a05      	cmp	r2, #5
    7d5a:	d817      	bhi.n	7d8c <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    7d5c:	7869      	ldrb	r1, [r5, #1]
    7d5e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    7d62:	930c      	str	r3, [sp, #48]	; 0x30
    7d64:	980c      	ldr	r0, [sp, #48]	; 0x30
    7d66:	9b06      	ldr	r3, [sp, #24]
    7d68:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    7d6c:	7863      	ldrb	r3, [r4, #1]
    7d6e:	78a0      	ldrb	r0, [r4, #2]
    7d70:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    7d72:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7d76:	d009      	beq.n	7d8c <ticker_job+0x1b0>
			    (state == 0) ||
    7d78:	2a04      	cmp	r2, #4
    7d7a:	d10c      	bne.n	7d96 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    7d7c:	686a      	ldr	r2, [r5, #4]
    7d7e:	b952      	cbnz	r2, 7d96 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    7d80:	68aa      	ldr	r2, [r5, #8]
    7d82:	b942      	cbnz	r2, 7d96 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    7d84:	68ea      	ldr	r2, [r5, #12]
    7d86:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    7d8a:	d104      	bne.n	7d96 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    7d8c:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    7d8e:	4628      	mov	r0, r5
    7d90:	f7ff fec3 	bl	7b1a <ticker_job_op_cb>
    7d94:	e7cb      	b.n	7d2e <ticker_job+0x152>
			if (state == 1) {
    7d96:	2b01      	cmp	r3, #1
    7d98:	f040 809b 	bne.w	7ed2 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7d9c:	4658      	mov	r0, fp
    7d9e:	f7ff fe72 	bl	7a86 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7da2:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7da4:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7da6:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7da8:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7daa:	f040 8084 	bne.w	7eb6 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    7dae:	f8db 3014 	ldr.w	r3, [fp, #20]
    7db2:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    7db4:	f00a fe40 	bl	12a38 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    7dba:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7dbc:	1ac3      	subs	r3, r0, r3
    7dbe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    7dc2:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    7dc4:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7dc6:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    7dc8:	bf9e      	ittt	ls
    7dca:	6962      	ldrls	r2, [r4, #20]
    7dcc:	1b92      	subls	r2, r2, r6
    7dce:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    7dd0:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    7dd2:	bf96      	itet	ls
    7dd4:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    7dd6:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    7dd8:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    7dda:	b18a      	cbz	r2, 7e00 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    7ddc:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    7dde:	b179      	cbz	r1, 7e00 <ticker_job+0x224>
		user_op->params.update.lazy--;
    7de0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    7de4:	fa1f fe8e 	uxth.w	lr, lr
    7de8:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7dec:	429a      	cmp	r2, r3
    7dee:	d32b      	bcc.n	7e48 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    7df0:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8118 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x118>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7df4:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    7df8:	45e6      	cmp	lr, ip
    7dfa:	d847      	bhi.n	7e8c <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    7dfc:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    7e00:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    7e02:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    7e04:	4413      	add	r3, r2
    7e06:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    7e08:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    7e0a:	6963      	ldr	r3, [r4, #20]
    7e0c:	4413      	add	r3, r2
    7e0e:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    7e10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7e12:	4620      	mov	r0, r4
    7e14:	f7ff fe63 	bl	7ade <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    7e18:	69a2      	ldr	r2, [r4, #24]
    7e1a:	892b      	ldrh	r3, [r5, #8]
    7e1c:	4413      	add	r3, r2
    7e1e:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    7e20:	896a      	ldrh	r2, [r5, #10]
    7e22:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    7e24:	bf8c      	ite	hi
    7e26:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    7e28:	2300      	movls	r3, #0
    7e2a:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    7e2c:	7bab      	ldrb	r3, [r5, #14]
    7e2e:	b103      	cbz	r3, 7e32 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    7e30:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    7e32:	9b06      	ldr	r3, [sp, #24]
    7e34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7e36:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    7e3a:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    7e3c:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    7e40:	3301      	adds	r3, #1
    7e42:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    7e44:	2100      	movs	r1, #0
    7e46:	e7a2      	b.n	7d8e <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    7e48:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7e4c:	45e6      	cmp	lr, ip
    7e4e:	d2cf      	bcs.n	7df0 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    7e50:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7e52:	4eaf      	ldr	r6, [pc, #700]	; (8110 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x110>)
    7e54:	48af      	ldr	r0, [pc, #700]	; (8114 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x114>)
    7e56:	198e      	adds	r6, r1, r6
    7e58:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    7e5a:	bf81      	itttt	hi
    7e5c:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    7e60:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    7e64:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    7e68:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    7e6a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7e6c:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    7e6e:	bf8c      	ite	hi
    7e70:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    7e74:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    7e78:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    7e7a:	4491      	add	r9, r2
			ticker->lazy_current--;
    7e7c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    7e80:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    7e82:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    7e86:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7e8a:	e7af      	b.n	7dec <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    7e8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7e8e:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    7e90:	48a0      	ldr	r0, [pc, #640]	; (8114 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x114>)
	ticker->remainder_current += ticker->remainder_periodic;
    7e92:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7e94:	499e      	ldr	r1, [pc, #632]	; (8110 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x110>)
    7e96:	1871      	adds	r1, r6, r1
    7e98:	4281      	cmp	r1, r0
	return 0;
    7e9a:	bf8e      	itee	hi
    7e9c:	2100      	movhi	r1, #0
		return 1;
    7e9e:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    7ea0:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    7ea2:	4411      	add	r1, r2
			ticker->lazy_current++;
    7ea4:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    7ea8:	bf8c      	ite	hi
    7eaa:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7eac:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    7eae:	440b      	add	r3, r1
			ticker->lazy_current++;
    7eb0:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7eb4:	e79e      	b.n	7df4 <ticker_job+0x218>
		ticker->req = ticker->ack;
    7eb6:	78a3      	ldrb	r3, [r4, #2]
    7eb8:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    7eba:	786b      	ldrb	r3, [r5, #1]
    7ebc:	f89b 201c 	ldrb.w	r2, [fp, #28]
    7ec0:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    7ec2:	bf01      	itttt	eq
    7ec4:	23ff      	moveq	r3, #255	; 0xff
    7ec6:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    7eca:	2300      	moveq	r3, #0
    7ecc:	f8cb 3018 	streq.w	r3, [fp, #24]
    7ed0:	e7b8      	b.n	7e44 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    7ed2:	2104      	movs	r1, #4
    7ed4:	465b      	mov	r3, fp
    7ed6:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7eda:	2201      	movs	r2, #1
    7edc:	4608      	mov	r0, r1
    7ede:	47a0      	blx	r4
				pending = 1;
    7ee0:	2301      	movs	r3, #1
				user->middle = prev;
    7ee2:	70be      	strb	r6, [r7, #2]
				pending = 1;
    7ee4:	9309      	str	r3, [sp, #36]	; 0x24
    7ee6:	9b04      	ldr	r3, [sp, #16]
    7ee8:	3b01      	subs	r3, #1
    7eea:	b2db      	uxtb	r3, r3
    7eec:	9304      	str	r3, [sp, #16]
    7eee:	e6aa      	b.n	7c46 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    7ef0:	f8db 3018 	ldr.w	r3, [fp, #24]
    7ef4:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    7ef6:	bf29      	itett	cs
    7ef8:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    7efa:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    7efc:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    7f00:	2300      	movcs	r3, #0
    7f02:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    7f06:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    7f08:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    7f0a:	b11b      	cbz	r3, 7f14 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    7f0c:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    7f10:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    7f14:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    7f16:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    7f18:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    7f1a:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    7f1e:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    7f22:	f8d4 e004 	ldr.w	lr, [r4, #4]
    7f26:	f1be 0f00 	cmp.w	lr, #0
    7f2a:	d030      	beq.n	7f8e <ticker_job+0x3b2>
    7f2c:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    7f2e:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8114 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x114>
	ticker->remainder_current += ticker->remainder_periodic;
    7f32:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7f34:	6a21      	ldr	r1, [r4, #32]
    7f36:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7f38:	4975      	ldr	r1, [pc, #468]	; (8110 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x110>)
    7f3a:	1859      	adds	r1, r3, r1
    7f3c:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    7f3e:	bf9f      	itttt	ls
    7f40:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    7f44:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    7f48:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    7f4c:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    7f4e:	bf92      	itee	ls
    7f50:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    7f52:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    7f54:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    7f56:	4473      	add	r3, lr
			while (count--) {
    7f58:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    7f5c:	441a      	add	r2, r3
			while (count--) {
    7f5e:	d2e8      	bcs.n	7f32 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7f60:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    7f62:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7f64:	f8db 1014 	ldr.w	r1, [fp, #20]
    7f68:	eb03 0209 	add.w	r2, r3, r9
    7f6c:	4620      	mov	r0, r4
    7f6e:	f7ff fdb6 	bl	7ade <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    7f72:	8ba3      	ldrh	r3, [r4, #28]
    7f74:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    7f76:	2300      	movs	r3, #0
    7f78:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    7f7a:	9b06      	ldr	r3, [sp, #24]
    7f7c:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    7f80:	7863      	ldrb	r3, [r4, #1]
    7f82:	3301      	adds	r3, #1
    7f84:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    7f86:	eba8 0805 	sub.w	r8, r8, r5
    7f8a:	46b2      	mov	sl, r6
    7f8c:	e66c      	b.n	7c68 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    7f8e:	78a3      	ldrb	r3, [r4, #2]
    7f90:	7063      	strb	r3, [r4, #1]
    7f92:	4656      	mov	r6, sl
    7f94:	e7f7      	b.n	7f86 <ticker_job+0x3aa>
		user = &users[count_user];
    7f96:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7f98:	9a03      	ldr	r2, [sp, #12]
    7f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7f9e:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    7fa0:	685b      	ldr	r3, [r3, #4]
    7fa2:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    7fa4:	9b06      	ldr	r3, [sp, #24]
    7fa6:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    7faa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    7fae:	f000 808e 	beq.w	80ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xce>
				ticker = &node[id_insert];
    7fb2:	fa0f f38a 	sxth.w	r3, sl
    7fb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    7fbc:	46d0      	mov	r8, sl
    7fbe:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    7fc2:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    7fc6:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    7fc8:	f8db 3000 	ldr.w	r3, [fp]
    7fcc:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    7fce:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7fd0:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    7fd2:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7fd4:	8be3      	ldrh	r3, [r4, #30]
    7fd6:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    7fd8:	bf86      	itte	hi
    7fda:	1a9b      	subhi	r3, r3, r2
    7fdc:	b29b      	uxthhi	r3, r3
		skip = 0;
    7fde:	2300      	movls	r3, #0
    7fe0:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    7fe2:	fa0f f388 	sxth.w	r3, r8
    7fe6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7fea:	00db      	lsls	r3, r3, #3
    7fec:	9313      	str	r3, [sp, #76]	; 0x4c
    7fee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    7ff0:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    7ff4:	f8db 0018 	ldr.w	r0, [fp, #24]
    7ff8:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    7ffa:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    7ffe:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    8000:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    8004:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    8008:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    800a:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    800c:	2bff      	cmp	r3, #255	; 0xff
    800e:	d007      	beq.n	8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    8010:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    8014:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    8018:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    801a:	4281      	cmp	r1, r0
    801c:	f200 80a9 	bhi.w	8172 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x172>
				     ticks_to_expire + ticker_new->ticks_slot);
    8020:	f8de 0018 	ldr.w	r0, [lr, #24]
    8024:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    8026:	eb01 0c00 	add.w	ip, r1, r0
    802a:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    802c:	2eff      	cmp	r6, #255	; 0xff
    802e:	f040 80ae 	bne.w	818e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18e>
	if ((ticker_new->ticks_slot == 0) ||
    8032:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8034:	b130      	cbz	r0, 8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>
    8036:	9807      	ldr	r0, [sp, #28]
    8038:	4281      	cmp	r1, r0
    803a:	f0c0 80bf 	bcc.w	81bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bc>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    803e:	2eff      	cmp	r6, #255	; 0xff
    8040:	f040 818e 	bne.w	8360 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x360>
		if (previous == current) {
    8044:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    8046:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    804a:	4283      	cmp	r3, r0
			node[previous].next = id;
    804c:	bf18      	it	ne
    804e:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    8052:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    8056:	bf16      	itet	ne
    8058:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    805c:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    8060:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    8064:	2bff      	cmp	r3, #255	; 0xff
    8066:	d006      	beq.n	8076 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76>
			node[current].ticks_to_expire -= ticks_to_expire;
    8068:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    806c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8070:	689a      	ldr	r2, [r3, #8]
    8072:	1a51      	subs	r1, r2, r1
    8074:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    8076:	78a3      	ldrb	r3, [r4, #2]
    8078:	3301      	adds	r3, #1
    807a:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    807c:	2100      	movs	r1, #0
			if (user_op) {
    807e:	2d00      	cmp	r5, #0
    8080:	d093      	beq.n	7faa <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    8082:	4628      	mov	r0, r5
    8084:	f7ff fd49 	bl	7b1a <ticker_job_op_cb>
    8088:	e78f      	b.n	7faa <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    808a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    808e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8090:	011b      	lsls	r3, r3, #4
    8092:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    8094:	f109 0201 	add.w	r2, r9, #1
    8098:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    809c:	9a06      	ldr	r2, [sp, #24]
    809e:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    80a0:	454a      	cmp	r2, r9
    80a2:	bf08      	it	eq
    80a4:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    80a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    80aa:	5cd3      	ldrb	r3, [r2, r3]
    80ac:	2b03      	cmp	r3, #3
    80ae:	d10e      	bne.n	80ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xce>
				id_insert = user_op->id;
    80b0:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    80b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    80b6:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    80ba:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    80be:	7862      	ldrb	r2, [r4, #1]
    80c0:	78a3      	ldrb	r3, [r4, #2]
    80c2:	429a      	cmp	r2, r3
    80c4:	d009      	beq.n	80da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xda>
					ticker_job_op_cb(user_op,
    80c6:	2101      	movs	r1, #1
    80c8:	4628      	mov	r0, r5
    80ca:	f7ff fd26 	bl	7b1a <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    80ce:	9b06      	ldr	r3, [sp, #24]
    80d0:	789b      	ldrb	r3, [r3, #2]
    80d2:	454b      	cmp	r3, r9
    80d4:	d1d9      	bne.n	808a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a>
    80d6:	9b03      	ldr	r3, [sp, #12]
    80d8:	e5e6      	b.n	7ca8 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    80da:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    80dc:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    80e0:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    80e2:	692b      	ldr	r3, [r5, #16]
    80e4:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    80e6:	8aab      	ldrh	r3, [r5, #20]
    80e8:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    80ea:	69ab      	ldr	r3, [r5, #24]
    80ec:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    80ee:	69eb      	ldr	r3, [r5, #28]
    80f0:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    80f2:	6a2b      	ldr	r3, [r5, #32]
    80f4:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    80f6:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    80f8:	68ab      	ldr	r3, [r5, #8]
    80fa:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    80fc:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    80fe:	686a      	ldr	r2, [r5, #4]
    8100:	4620      	mov	r0, r4
    8102:	f7ff fcec 	bl	7ade <ticks_to_expire_prep>
	ticker->force = 1;
    8106:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    8108:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    810a:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    810c:	70e3      	strb	r3, [r4, #3]
    810e:	e75b      	b.n	7fc8 <ticker_job+0x3ec>
    8110:	ff172b5a 	.word	0xff172b5a
    8114:	7f172b59 	.word	0x7f172b59
    8118:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    811c:	6860      	ldr	r0, [r4, #4]
    811e:	2800      	cmp	r0, #0
    8120:	d07b      	beq.n	821a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x21a>
	ticker->remainder_current += ticker->remainder_periodic;
    8122:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8124:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    8126:	4b92      	ldr	r3, [pc, #584]	; (8370 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x370>)
	ticker->remainder_current += ticker->remainder_periodic;
    8128:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    812a:	4992      	ldr	r1, [pc, #584]	; (8374 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x374>)
    812c:	18d3      	adds	r3, r2, r3
    812e:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    8130:	bf9c      	itt	ls
    8132:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    8136:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    813a:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    813c:	bf8b      	itete	hi
    813e:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    8140:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    8144:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    8146:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    8148:	4403      	add	r3, r0
		return 1;
    814a:	bf98      	it	ls
    814c:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    814e:	4413      	add	r3, r2
			ticker->lazy_current++;
    8150:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    8152:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    8154:	3201      	adds	r2, #1
    8156:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    8158:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    815a:	4293      	cmp	r3, r2
    815c:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    8160:	bf89      	itett	hi
    8162:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    8164:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    8166:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    8168:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    816a:	bf9c      	itt	ls
    816c:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    816e:	60a1      	strls	r1, [r4, #8]
    8170:	e73d      	b.n	7fee <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    8172:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    8174:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    8176:	b946      	cbnz	r6, 818a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18a>
			if (ticks_slot_previous > ticks_to_expire_current) {
    8178:	9f07      	ldr	r7, [sp, #28]
    817a:	42b8      	cmp	r0, r7
    817c:	d200      	bcs.n	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
				ticks_slot_previous -= ticks_to_expire_current;
    817e:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    8180:	930b      	str	r3, [sp, #44]	; 0x2c
    8182:	9607      	str	r6, [sp, #28]
    8184:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    8188:	e740      	b.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
		if (ticker_current->ticks_slot != 0) {
    818a:	9308      	str	r3, [sp, #32]
    818c:	e7f8      	b.n	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
		ticker = &node[ticker_id_head];
    818e:	b230      	sxth	r0, r6
    8190:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8194:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    8198:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    819a:	68bf      	ldr	r7, [r7, #8]
    819c:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    819e:	4567      	cmp	r7, ip
    81a0:	d20a      	bcs.n	81b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b8>
		if (ticker->ticks_slot) {
    81a2:	9f10      	ldr	r7, [sp, #64]	; 0x40
    81a4:	69bf      	ldr	r7, [r7, #24]
    81a6:	2f00      	cmp	r7, #0
    81a8:	f47f af43 	bne.w	8032 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32>
		ticks_slot -= ticks_to_expire;
    81ac:	9e11      	ldr	r6, [sp, #68]	; 0x44
    81ae:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    81b2:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    81b6:	e739      	b.n	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
			return TICKER_NULL;
    81b8:	26ff      	movs	r6, #255	; 0xff
    81ba:	e73a      	b.n	8032 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32>
	while (id_insert !=
    81bc:	9b08      	ldr	r3, [sp, #32]
    81be:	4598      	cmp	r8, r3
    81c0:	f43f af59 	beq.w	8076 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76>
		if (id_collide != TICKER_NULL) {
    81c4:	9b08      	ldr	r3, [sp, #32]
    81c6:	2bff      	cmp	r3, #255	; 0xff
    81c8:	d0a8      	beq.n	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
    81ca:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    81cc:	b233      	sxth	r3, r6
    81ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    81d2:	9307      	str	r3, [sp, #28]
    81d4:	9a07      	ldr	r2, [sp, #28]
    81d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    81d8:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    81dc:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    81de:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    81e0:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    81e2:	bf88      	it	hi
    81e4:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    81e6:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    81e8:	bf8c      	ite	hi
    81ea:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    81ec:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    81ee:	2a00      	cmp	r2, #0
    81f0:	d094      	beq.n	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
    81f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    81f4:	4293      	cmp	r3, r2
    81f6:	d891      	bhi.n	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
			    skip_collide <= skip &&
    81f8:	78fa      	ldrb	r2, [r7, #3]
    81fa:	78e3      	ldrb	r3, [r4, #3]
    81fc:	429a      	cmp	r2, r3
    81fe:	d28d      	bcs.n	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
					ticker_dequeue(instance, id_collide);
    8200:	4631      	mov	r1, r6
    8202:	4658      	mov	r0, fp
    8204:	f7ff fc3f 	bl	7a86 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    8208:	78bb      	ldrb	r3, [r7, #2]
    820a:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    820c:	9a07      	ldr	r2, [sp, #28]
    820e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    8210:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    8212:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    8216:	46b2      	mov	sl, r6
    8218:	e6e9      	b.n	7fee <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    821a:	2101      	movs	r1, #1
    821c:	e72f      	b.n	807e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e>
		user = &users[count_user];
    821e:	9b03      	ldr	r3, [sp, #12]
    8220:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    8224:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    8226:	786b      	ldrb	r3, [r5, #1]
    8228:	78ea      	ldrb	r2, [r5, #3]
    822a:	429a      	cmp	r2, r3
    822c:	d102      	bne.n	8234 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x234>
    822e:	3c01      	subs	r4, #1
    8230:	b2e4      	uxtb	r4, r4
    8232:	e551      	b.n	7cd8 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    8234:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8238:	011b      	lsls	r3, r3, #4
    823a:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    823c:	5cf3      	ldrb	r3, [r6, r3]
    823e:	2b01      	cmp	r3, #1
    8240:	d025      	beq.n	828e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28e>
    8242:	2b02      	cmp	r3, #2
    8244:	d12a      	bne.n	829c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29c>
		ticker_by_next_slot_get(instance,
    8246:	f8d2 c004 	ldr.w	ip, [r2, #4]
    824a:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    824c:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    8250:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    8254:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    8258:	28ff      	cmp	r0, #255	; 0xff
    825a:	d004      	beq.n	8266 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x266>
    825c:	6819      	ldr	r1, [r3, #0]
    825e:	f8db 7014 	ldr.w	r7, [fp, #20]
    8262:	42b9      	cmp	r1, r7
    8264:	d023      	beq.n	82ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ae>
		*ticks_current = instance->ticks_current;
    8266:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    826a:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    826e:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    8270:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    8272:	29ff      	cmp	r1, #255	; 0xff
    8274:	d007      	beq.n	8286 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x286>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    8276:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    827a:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    827e:	6987      	ldr	r7, [r0, #24]
    8280:	6880      	ldr	r0, [r0, #8]
    8282:	b1df      	cbz	r7, 82bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2bc>
		_ticks_to_expire += ticker->ticks_to_expire;
    8284:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    8286:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    828a:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    828e:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    8290:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    8294:	b113      	cbz	r3, 829c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29c>
		fp_op_func(uop->status, uop->op_context);
    8296:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    8298:	2000      	movs	r0, #0
    829a:	4798      	blx	r3
			first = user->first + 1;
    829c:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    829e:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    82a0:	3301      	adds	r3, #1
    82a2:	b2db      	uxtb	r3, r3
				first = 0;
    82a4:	429a      	cmp	r2, r3
    82a6:	bf08      	it	eq
    82a8:	2300      	moveq	r3, #0
			user->first = first;
    82aa:	706b      	strb	r3, [r5, #1]
    82ac:	e7bb      	b.n	8226 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x226>
		ticker = &node[_ticker_id_head];
    82ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    82b2:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    82b6:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    82ba:	e7da      	b.n	8272 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x272>
		_ticks_to_expire += ticker->ticks_to_expire;
    82bc:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    82be:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    82c2:	e7d6      	b.n	8272 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x272>
	if (ticker_id_old_head == TICKER_NULL) {
    82c4:	9b05      	ldr	r3, [sp, #20]
    82c6:	2bff      	cmp	r3, #255	; 0xff
    82c8:	d107      	bne.n	82da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2da>
		ticks_current = cntr_cnt_get();
    82ca:	f00a fbb5 	bl	12a38 <cntr_cnt_get>
    82ce:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    82d0:	f00a fb76 	bl	129c0 <cntr_start>
    82d4:	b908      	cbnz	r0, 82da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2da>
			instance->ticks_current = ticks_current;
    82d6:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    82da:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    82de:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    82e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    82e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    82ea:	260a      	movs	r6, #10
    82ec:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    82ee:	f00a fba3 	bl	12a38 <cntr_cnt_get>
		cc = instance->ticks_current;
    82f2:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    82f6:	1b03      	subs	r3, r0, r4
    82f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    82fc:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    82fe:	42ab      	cmp	r3, r5
    8300:	bf2c      	ite	cs
    8302:	18e4      	addcs	r4, r4, r3
    8304:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    8306:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    830a:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    830c:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    8310:	4620      	mov	r0, r4
    8312:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    8314:	f00a fb90 	bl	12a38 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8318:	1bc0      	subs	r0, r0, r7
    831a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    831e:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    8320:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8322:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    8326:	42a0      	cmp	r0, r4
    8328:	f67f ace8 	bls.w	7cfc <ticker_job+0x120>
		LL_ASSERT(i);
    832c:	3e01      	subs	r6, #1
    832e:	d1de      	bne.n	82ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ee>
    8330:	4b11      	ldr	r3, [pc, #68]	; (8378 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x378>)
    8332:	9301      	str	r3, [sp, #4]
    8334:	9300      	str	r3, [sp, #0]
    8336:	4a11      	ldr	r2, [pc, #68]	; (837c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x37c>)
    8338:	4b11      	ldr	r3, [pc, #68]	; (8380 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x380>)
    833a:	4912      	ldr	r1, [pc, #72]	; (8384 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x384>)
    833c:	4812      	ldr	r0, [pc, #72]	; (8388 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x388>)
    833e:	f7f8 fe25 	bl	f8c <printk>
    8342:	4040      	eors	r0, r0
    8344:	f380 8811 	msr	BASEPRI, r0
    8348:	f04f 0004 	mov.w	r0, #4
    834c:	df02      	svc	2
	instance->job_guard = 0;
    834e:	2300      	movs	r3, #0
    8350:	f88b 301e 	strb.w	r3, [fp, #30]
    8354:	e4c8      	b.n	7ce8 <ticker_job+0x10c>
	if (!pending) {
    8356:	2b00      	cmp	r3, #0
    8358:	d1f9      	bne.n	834e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34e>
		flag_compare_update = 1;
    835a:	2301      	movs	r3, #1
    835c:	9304      	str	r3, [sp, #16]
    835e:	e4b2      	b.n	7cc6 <ticker_job+0xea>
	while (id_insert !=
    8360:	45b0      	cmp	r8, r6
    8362:	f47f af33 	bne.w	81cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cc>
    8366:	e686      	b.n	8076 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76>
}
    8368:	b015      	add	sp, #84	; 0x54
    836a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    836e:	bf00      	nop
    8370:	ff172b5a 	.word	0xff172b5a
    8374:	7f172b59 	.word	0x7f172b59
    8378:	000153a9 	.word	0x000153a9
    837c:	00016765 	.word	0x00016765
    8380:	00017968 	.word	0x00017968
    8384:	000167b4 	.word	0x000167b4
    8388:	00017982 	.word	0x00017982

0000838c <ticker_init>:
{
    838c:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    838e:	4d1a      	ldr	r5, [pc, #104]	; (83f8 <ticker_init+0x6c>)
{
    8390:	9f05      	ldr	r7, [sp, #20]
    8392:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    8396:	262c      	movs	r6, #44	; 0x2c
    8398:	4346      	muls	r6, r0
    839a:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    839e:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    83a0:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    83a4:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    83a6:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    83aa:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    83ae:	3b01      	subs	r3, #1
    83b0:	b2db      	uxtb	r3, r3
    83b2:	2bff      	cmp	r3, #255	; 0xff
    83b4:	d111      	bne.n	83da <ticker_init+0x4e>
	if (count_op) {
    83b6:	b9ec      	cbnz	r4, 83f4 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    83b8:	222c      	movs	r2, #44	; 0x2c
    83ba:	fb02 5200 	mla	r2, r2, r0, r5
    83be:	9908      	ldr	r1, [sp, #32]
    83c0:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    83c2:	9909      	ldr	r1, [sp, #36]	; 0x24
    83c4:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    83c6:	990a      	ldr	r1, [sp, #40]	; 0x28
    83c8:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    83ca:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    83cc:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    83ce:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    83d0:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    83d2:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    83d4:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    83d6:	4620      	mov	r0, r4
    83d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    83da:	b21a      	sxth	r2, r3
    83dc:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    83e0:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    83e2:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    83e6:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    83ea:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    83ec:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    83f0:	b2e4      	uxtb	r4, r4
    83f2:	e7dc      	b.n	83ae <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    83f4:	2001      	movs	r0, #1
}
    83f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83f8:	200007cc 	.word	0x200007cc

000083fc <ticker_trigger>:
	instance = &_instance[instance_index];
    83fc:	4a07      	ldr	r2, [pc, #28]	; (841c <ticker_trigger+0x20>)
    83fe:	212c      	movs	r1, #44	; 0x2c
    8400:	fb00 2301 	mla	r3, r0, r1, r2
{
    8404:	b410      	push	{r4}
	if (instance->sched_cb) {
    8406:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    8408:	b12c      	cbz	r4, 8416 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    840a:	46a4      	mov	ip, r4
    840c:	2201      	movs	r2, #1
    840e:	2103      	movs	r1, #3
    8410:	2002      	movs	r0, #2
}
    8412:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    8414:	4760      	bx	ip
}
    8416:	bc10      	pop	{r4}
    8418:	4770      	bx	lr
    841a:	bf00      	nop
    841c:	200007cc 	.word	0x200007cc

00008420 <ticker_start>:
{
    8420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8424:	4f25      	ldr	r7, [pc, #148]	; (84bc <ticker_start+0x9c>)
    8426:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    842a:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    842c:	fb08 7000 	mla	r0, r8, r0, r7
    8430:	fa0f fc81 	sxth.w	ip, r1
    8434:	f8d0 e004 	ldr.w	lr, [r0, #4]
    8438:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    843c:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    8440:	78f4      	ldrb	r4, [r6, #3]
    8442:	1c65      	adds	r5, r4, #1
    8444:	b2ed      	uxtb	r5, r5
		last = 0;
    8446:	45ae      	cmp	lr, r5
    8448:	bf98      	it	ls
    844a:	2500      	movls	r5, #0
	if (last == user->first) {
    844c:	f896 e001 	ldrb.w	lr, [r6, #1]
    8450:	45ae      	cmp	lr, r5
    8452:	d02f      	beq.n	84b4 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    8454:	f8d6 c004 	ldr.w	ip, [r6, #4]
    8458:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    845c:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    8460:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    8464:	f04f 0a03 	mov.w	sl, #3
    8468:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    846c:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    846e:	9b08      	ldr	r3, [sp, #32]
    8470:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    8472:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8474:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    8476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8478:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    847a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    847c:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    847e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    8482:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    8484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8486:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    8488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    848a:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    848c:	2302      	movs	r3, #2
    848e:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    8490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8492:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    8494:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    8496:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    8498:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    849a:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    849c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    849e:	6a03      	ldr	r3, [r0, #32]
    84a0:	4608      	mov	r0, r1
    84a2:	4798      	blx	r3
    84a4:	fb09 7308 	mla	r3, r9, r8, r7
    84a8:	2200      	movs	r2, #0
    84aa:	2104      	movs	r1, #4
    84ac:	47a8      	blx	r5
	return user_op->status;
    84ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
    84b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    84b4:	2001      	movs	r0, #1
}
    84b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    84ba:	bf00      	nop
    84bc:	200007cc 	.word	0x200007cc

000084c0 <ticker_update>:
{
    84c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    84c4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8558 <ticker_update+0x98>
    84c8:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    84cc:	fb0a 8e00 	mla	lr, sl, r0, r8
    84d0:	b20f      	sxth	r7, r1
    84d2:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    84d6:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    84d8:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    84dc:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    84e0:	78c4      	ldrb	r4, [r0, #3]
    84e2:	1c66      	adds	r6, r4, #1
    84e4:	b2f6      	uxtb	r6, r6
		last = 0;
    84e6:	42b5      	cmp	r5, r6
    84e8:	bf98      	it	ls
    84ea:	2600      	movls	r6, #0
	if (last == user->first) {
    84ec:	7845      	ldrb	r5, [r0, #1]
    84ee:	42b5      	cmp	r5, r6
    84f0:	d02f      	beq.n	8552 <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    84f2:	f8d0 c004 	ldr.w	ip, [r0, #4]
    84f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    84fa:	0125      	lsls	r5, r4, #4
    84fc:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    8500:	2704      	movs	r7, #4
    8502:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    8506:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    8508:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    850c:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    850e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8512:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    8514:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8518:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    851a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    851e:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    8520:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    8524:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    8526:	2302      	movs	r3, #2
    8528:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    852a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    852c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    852e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    8530:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    8532:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    8534:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8536:	f8de 3020 	ldr.w	r3, [lr, #32]
    853a:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    853e:	4608      	mov	r0, r1
    8540:	4798      	blx	r3
    8542:	fb09 830a 	mla	r3, r9, sl, r8
    8546:	2200      	movs	r2, #0
    8548:	4639      	mov	r1, r7
    854a:	47a8      	blx	r5
	return user_op->status;
    854c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    854e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    8552:	2001      	movs	r0, #1
}
    8554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8558:	200007cc 	.word	0x200007cc

0000855c <ticker_stop>:
{
    855c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8560:	f8df 906c 	ldr.w	r9, [pc, #108]	; 85d0 <ticker_stop+0x74>
    8564:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    8568:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    856c:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    856e:	f8de 0004 	ldr.w	r0, [lr, #4]
    8572:	b20e      	sxth	r6, r1
    8574:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    8578:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    857c:	78fc      	ldrb	r4, [r7, #3]
    857e:	1c65      	adds	r5, r4, #1
    8580:	b2ed      	uxtb	r5, r5
		last = 0;
    8582:	42a8      	cmp	r0, r5
    8584:	bf98      	it	ls
    8586:	2500      	movls	r5, #0
	if (last == user->first) {
    8588:	7878      	ldrb	r0, [r7, #1]
    858a:	42a8      	cmp	r0, r5
    858c:	d01d      	beq.n	85ca <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    858e:	6878      	ldr	r0, [r7, #4]
    8590:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8594:	0124      	lsls	r4, r4, #4
    8596:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    8598:	f04f 0c05 	mov.w	ip, #5
    859c:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    85a0:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    85a2:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    85a4:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    85a6:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    85a8:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    85aa:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    85ac:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    85ae:	f8de 3020 	ldr.w	r3, [lr, #32]
    85b2:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    85b6:	4608      	mov	r0, r1
    85b8:	4798      	blx	r3
    85ba:	fb08 930a 	mla	r3, r8, sl, r9
    85be:	2200      	movs	r2, #0
    85c0:	2104      	movs	r1, #4
    85c2:	47a0      	blx	r4
	return user_op->status;
    85c4:	6a70      	ldr	r0, [r6, #36]	; 0x24
    85c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    85ca:	2001      	movs	r0, #1
}
    85cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85d0:	200007cc 	.word	0x200007cc

000085d4 <ticker_next_slot_get>:
{
    85d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    85d8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8654 <ticker_next_slot_get+0x80>
    85dc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    85e0:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    85e2:	fb0a 8000 	mla	r0, sl, r0, r8
    85e6:	fa0f fe81 	sxth.w	lr, r1
    85ea:	6845      	ldr	r5, [r0, #4]
    85ec:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    85f0:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    85f4:	78fc      	ldrb	r4, [r7, #3]
    85f6:	1c66      	adds	r6, r4, #1
    85f8:	b2f6      	uxtb	r6, r6
		last = 0;
    85fa:	42b5      	cmp	r5, r6
    85fc:	bf98      	it	ls
    85fe:	2600      	movls	r6, #0
	if (last == user->first) {
    8600:	787d      	ldrb	r5, [r7, #1]
    8602:	42b5      	cmp	r5, r6
    8604:	d023      	beq.n	864e <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    8606:	f8d7 c004 	ldr.w	ip, [r7, #4]
    860a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    860e:	0125      	lsls	r5, r4, #4
    8610:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    8614:	f04f 0e02 	mov.w	lr, #2
    8618:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    861c:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    861e:	9b08      	ldr	r3, [sp, #32]
    8620:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    8622:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8624:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    8626:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    8628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    862a:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    862c:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    862e:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    8632:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    8634:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8636:	6a45      	ldr	r5, [r0, #36]	; 0x24
    8638:	6a03      	ldr	r3, [r0, #32]
    863a:	4608      	mov	r0, r1
    863c:	4798      	blx	r3
    863e:	fb09 830a 	mla	r3, r9, sl, r8
    8642:	2200      	movs	r2, #0
    8644:	2104      	movs	r1, #4
    8646:	47a8      	blx	r5
	return user_op->status;
    8648:	6a60      	ldr	r0, [r4, #36]	; 0x24
    864a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    864e:	2001      	movs	r0, #1
}
    8650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8654:	200007cc 	.word	0x200007cc

00008658 <ticker_job_idle_get>:
{
    8658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    865c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 86cc <ticker_job_idle_get+0x74>
    8660:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    8664:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    8668:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    866a:	f8de 0004 	ldr.w	r0, [lr, #4]
    866e:	b20e      	sxth	r6, r1
    8670:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    8674:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    8678:	78fc      	ldrb	r4, [r7, #3]
    867a:	1c65      	adds	r5, r4, #1
    867c:	b2ed      	uxtb	r5, r5
		last = 0;
    867e:	42a8      	cmp	r0, r5
    8680:	bf98      	it	ls
    8682:	2500      	movls	r5, #0
	if (last == user->first) {
    8684:	7878      	ldrb	r0, [r7, #1]
    8686:	42a8      	cmp	r0, r5
    8688:	d01d      	beq.n	86c6 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    868a:	6878      	ldr	r0, [r7, #4]
    868c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8690:	0124      	lsls	r4, r4, #4
    8692:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    8694:	f04f 0c01 	mov.w	ip, #1
    8698:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    869c:	20ff      	movs	r0, #255	; 0xff
    869e:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    86a0:	2002      	movs	r0, #2
    86a2:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    86a4:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    86a6:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    86a8:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    86aa:	f8de 3020 	ldr.w	r3, [lr, #32]
    86ae:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    86b2:	4608      	mov	r0, r1
    86b4:	4798      	blx	r3
    86b6:	fb08 930a 	mla	r3, r8, sl, r9
    86ba:	2200      	movs	r2, #0
    86bc:	2104      	movs	r1, #4
    86be:	47a0      	blx	r4
	return user_op->status;
    86c0:	6a70      	ldr	r0, [r6, #36]	; 0x24
    86c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    86c6:	2001      	movs	r0, #1
}
    86c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    86cc:	200007cc 	.word	0x200007cc

000086d0 <ticker_job_sched>:
{
    86d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    86d4:	4c08      	ldr	r4, [pc, #32]	; (86f8 <ticker_job_sched+0x28>)
    86d6:	252c      	movs	r5, #44	; 0x2c
    86d8:	fb05 4300 	mla	r3, r5, r0, r4
{
    86dc:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    86de:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    86e0:	6a1b      	ldr	r3, [r3, #32]
    86e2:	4608      	mov	r0, r1
    86e4:	4798      	blx	r3
    86e6:	fb06 4305 	mla	r3, r6, r5, r4
    86ea:	46bc      	mov	ip, r7
    86ec:	2200      	movs	r2, #0
    86ee:	2104      	movs	r1, #4
}
    86f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    86f4:	4760      	bx	ip
    86f6:	bf00      	nop
    86f8:	200007cc 	.word	0x200007cc

000086fc <ticker_ticks_now_get>:
	return cntr_cnt_get();
    86fc:	f00a b99c 	b.w	12a38 <cntr_cnt_get>

00008700 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8700:	1a40      	subs	r0, r0, r1
}
    8702:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8706:	4770      	bx	lr

00008708 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    8708:	b508      	push	{r3, lr}
    870a:	4603      	mov	r3, r0
	if (addr_type > 1) {
    870c:	2b01      	cmp	r3, #1
{
    870e:	4608      	mov	r0, r1
	if (addr_type > 1) {
    8710:	d80e      	bhi.n	8730 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    8712:	b133      	cbz	r3, 8722 <ll_addr_get+0x1a>
		if (bdaddr) {
    8714:	b119      	cbz	r1, 871e <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    8716:	2206      	movs	r2, #6
    8718:	4906      	ldr	r1, [pc, #24]	; (8734 <ll_addr_get+0x2c>)
    871a:	f7f9 fa6f 	bl	1bfc <memcpy>
		}

		return rnd_addr;
    871e:	4805      	ldr	r0, [pc, #20]	; (8734 <ll_addr_get+0x2c>)
    8720:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    8722:	b119      	cbz	r1, 872c <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    8724:	2206      	movs	r2, #6
    8726:	4904      	ldr	r1, [pc, #16]	; (8738 <ll_addr_get+0x30>)
    8728:	f7f9 fa68 	bl	1bfc <memcpy>
	}

	return pub_addr;
    872c:	4802      	ldr	r0, [pc, #8]	; (8738 <ll_addr_get+0x30>)
}
    872e:	bd08      	pop	{r3, pc}
		return NULL;
    8730:	2000      	movs	r0, #0
    8732:	bd08      	pop	{r3, pc}
    8734:	2000082a 	.word	0x2000082a
    8738:	20000824 	.word	0x20000824

0000873c <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    873c:	b570      	push	{r4, r5, r6, lr}
    873e:	4606      	mov	r6, r0
    8740:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    8742:	f008 f9dd 	bl	10b00 <ll_adv_is_enabled>
    8746:	4604      	mov	r4, r0
    8748:	b110      	cbz	r0, 8750 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    874a:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    874c:	4620      	mov	r0, r4
    874e:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    8750:	f008 f9ea 	bl	10b28 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    8754:	f010 0f06 	tst.w	r0, #6
    8758:	d1f7      	bne.n	874a <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    875a:	2206      	movs	r2, #6
    875c:	4629      	mov	r1, r5
	if (addr_type) {
    875e:	b11e      	cbz	r6, 8768 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    8760:	4802      	ldr	r0, [pc, #8]	; (876c <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    8762:	f7f9 fa4b 	bl	1bfc <memcpy>
    8766:	e7f1      	b.n	874c <ll_addr_set+0x10>
    8768:	4801      	ldr	r0, [pc, #4]	; (8770 <ll_addr_set+0x34>)
    876a:	e7fa      	b.n	8762 <ll_addr_set+0x26>
    876c:	2000082a 	.word	0x2000082a
    8770:	20000824 	.word	0x20000824

00008774 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    8774:	2300      	movs	r3, #0
    8776:	7003      	strb	r3, [r0, #0]
	*max = 0;
    8778:	700b      	strb	r3, [r1, #0]
    877a:	4770      	bx	lr

0000877c <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    877c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    877e:	4607      	mov	r7, r0
    8780:	460e      	mov	r6, r1
	while (len) {
    8782:	460c      	mov	r4, r1
    8784:	1b35      	subs	r5, r6, r4
    8786:	443d      	add	r5, r7
    8788:	b18c      	cbz	r4, 87ae <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    878a:	f7f8 fc2b 	bl	fe4 <sys_rand32_get>

		if (len >= sizeof(v)) {
    878e:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    8790:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    8792:	d907      	bls.n	87a4 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    8794:	2204      	movs	r2, #4
    8796:	eb0d 0102 	add.w	r1, sp, r2
    879a:	4628      	mov	r0, r5
    879c:	f7f9 fa2e 	bl	1bfc <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    87a0:	3c04      	subs	r4, #4
    87a2:	e7ef      	b.n	8784 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    87a4:	4622      	mov	r2, r4
    87a6:	a901      	add	r1, sp, #4
    87a8:	4628      	mov	r0, r5
    87aa:	f7f9 fa27 	bl	1bfc <memcpy>
			break;
		}
	}

	return 0;
}
    87ae:	2000      	movs	r0, #0
    87b0:	b003      	add	sp, #12
    87b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000087b4 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    87b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87b8:	b089      	sub	sp, #36	; 0x24
    87ba:	4690      	mov	r8, r2
    87bc:	468a      	mov	sl, r1
    87be:	4681      	mov	r9, r0
    87c0:	f00c f82c 	bl	1481c <_impl_k_current_get>
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));
    87c4:	2110      	movs	r1, #16
    87c6:	4683      	mov	fp, r0
    87c8:	4648      	mov	r0, r9
    87ca:	f7f9 fa67 	bl	1c9c <bt_hex>
    87ce:	2110      	movs	r1, #16
    87d0:	9007      	str	r0, [sp, #28]
    87d2:	4650      	mov	r0, sl
    87d4:	f7f9 fa62 	bl	1c9c <bt_hex>
    87d8:	4c15      	ldr	r4, [pc, #84]	; (8830 <bt_encrypt_le+0x7c>)
    87da:	4f16      	ldr	r7, [pc, #88]	; (8834 <bt_encrypt_le+0x80>)
    87dc:	4e16      	ldr	r6, [pc, #88]	; (8838 <bt_encrypt_le+0x84>)
    87de:	4d17      	ldr	r5, [pc, #92]	; (883c <bt_encrypt_le+0x88>)
    87e0:	9b07      	ldr	r3, [sp, #28]
    87e2:	9003      	str	r0, [sp, #12]
    87e4:	9302      	str	r3, [sp, #8]
    87e6:	4632      	mov	r2, r6
    87e8:	463b      	mov	r3, r7
    87ea:	4629      	mov	r1, r5
    87ec:	9404      	str	r4, [sp, #16]
    87ee:	e88d 0810 	stmia.w	sp, {r4, fp}
    87f2:	4813      	ldr	r0, [pc, #76]	; (8840 <bt_encrypt_le+0x8c>)
    87f4:	f7f8 fbca 	bl	f8c <printk>

	ecb_encrypt(key, plaintext, enc_data, NULL);
    87f8:	4642      	mov	r2, r8
    87fa:	2300      	movs	r3, #0
    87fc:	4651      	mov	r1, sl
    87fe:	4648      	mov	r0, r9
    8800:	f00a f94e 	bl	12aa0 <ecb_encrypt>
    8804:	f00c f80a 	bl	1481c <_impl_k_current_get>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));
    8808:	2110      	movs	r1, #16
    880a:	4681      	mov	r9, r0
    880c:	4640      	mov	r0, r8
    880e:	f7f9 fa45 	bl	1c9c <bt_hex>
    8812:	9403      	str	r4, [sp, #12]
    8814:	9002      	str	r0, [sp, #8]
    8816:	e88d 0210 	stmia.w	sp, {r4, r9}
    881a:	463b      	mov	r3, r7
    881c:	4632      	mov	r2, r6
    881e:	4629      	mov	r1, r5
    8820:	4808      	ldr	r0, [pc, #32]	; (8844 <bt_encrypt_le+0x90>)
    8822:	f7f8 fbb3 	bl	f8c <printk>

	return 0;
}
    8826:	2000      	movs	r0, #0
    8828:	b009      	add	sp, #36	; 0x24
    882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    882e:	bf00      	nop
    8830:	000153a9 	.word	0x000153a9
    8834:	000179a5 	.word	0x000179a5
    8838:	000167ad 	.word	0x000167ad
    883c:	000167b4 	.word	0x000167b4
    8840:	000179b3 	.word	0x000179b3
    8844:	000179dc 	.word	0x000179dc

00008848 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    8848:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    884a:	4802      	ldr	r0, [pc, #8]	; (8854 <_hci_driver_init+0xc>)
    884c:	f7fb fbb4 	bl	3fb8 <bt_hci_driver_register>

	return 0;
}
    8850:	2000      	movs	r0, #0
    8852:	bd08      	pop	{r3, pc}
    8854:	00017a5c 	.word	0x00017a5c

00008858 <hci_driver_send>:
{
    8858:	b5f0      	push	{r4, r5, r6, r7, lr}
    885a:	b087      	sub	sp, #28
    885c:	4606      	mov	r6, r0
    885e:	f00b ffdd 	bl	1481c <_impl_k_current_get>
	BT_DBG("enter");
    8862:	4c3b      	ldr	r4, [pc, #236]	; (8950 <hci_driver_send+0xf8>)
    8864:	9001      	str	r0, [sp, #4]
    8866:	4b3b      	ldr	r3, [pc, #236]	; (8954 <hci_driver_send+0xfc>)
    8868:	9402      	str	r4, [sp, #8]
    886a:	9400      	str	r4, [sp, #0]
    886c:	4a3a      	ldr	r2, [pc, #232]	; (8958 <hci_driver_send+0x100>)
    886e:	493b      	ldr	r1, [pc, #236]	; (895c <hci_driver_send+0x104>)
    8870:	483b      	ldr	r0, [pc, #236]	; (8960 <hci_driver_send+0x108>)
    8872:	f7f8 fb8b 	bl	f8c <printk>
	if (!buf->len) {
    8876:	89b3      	ldrh	r3, [r6, #12]
    8878:	4625      	mov	r5, r4
    887a:	b963      	cbnz	r3, 8896 <hci_driver_send+0x3e>
		BT_ERR("Empty HCI packet");
    887c:	9401      	str	r4, [sp, #4]
    887e:	9400      	str	r4, [sp, #0]
    8880:	4b34      	ldr	r3, [pc, #208]	; (8954 <hci_driver_send+0xfc>)
    8882:	4a38      	ldr	r2, [pc, #224]	; (8964 <hci_driver_send+0x10c>)
    8884:	4935      	ldr	r1, [pc, #212]	; (895c <hci_driver_send+0x104>)
    8886:	4838      	ldr	r0, [pc, #224]	; (8968 <hci_driver_send+0x110>)
    8888:	f7f8 fb80 	bl	f8c <printk>
		return -EINVAL;
    888c:	f06f 0415 	mvn.w	r4, #21
}
    8890:	4620      	mov	r0, r4
    8892:	b007      	add	sp, #28
    8894:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    8896:	7d33      	ldrb	r3, [r6, #20]
	switch (type) {
    8898:	2b00      	cmp	r3, #0
    889a:	d02b      	beq.n	88f4 <hci_driver_send+0x9c>
    889c:	2b02      	cmp	r3, #2
    889e:	d149      	bne.n	8934 <hci_driver_send+0xdc>
	err = hci_acl_handle(buf, &evt);
    88a0:	a905      	add	r1, sp, #20
    88a2:	4630      	mov	r0, r6
    88a4:	f001 f954 	bl	9b50 <hci_acl_handle>
	if (evt) {
    88a8:	9b05      	ldr	r3, [sp, #20]
	err = hci_acl_handle(buf, &evt);
    88aa:	4604      	mov	r4, r0
	if (evt) {
    88ac:	b183      	cbz	r3, 88d0 <hci_driver_send+0x78>
    88ae:	f00b ffb5 	bl	1481c <_impl_k_current_get>
		BT_DBG("Replying with event of %u bytes", evt->len);
    88b2:	9b05      	ldr	r3, [sp, #20]
    88b4:	9503      	str	r5, [sp, #12]
    88b6:	899b      	ldrh	r3, [r3, #12]
    88b8:	9302      	str	r3, [sp, #8]
    88ba:	9001      	str	r0, [sp, #4]
    88bc:	9500      	str	r5, [sp, #0]
    88be:	4b2b      	ldr	r3, [pc, #172]	; (896c <hci_driver_send+0x114>)
    88c0:	4a25      	ldr	r2, [pc, #148]	; (8958 <hci_driver_send+0x100>)
    88c2:	4926      	ldr	r1, [pc, #152]	; (895c <hci_driver_send+0x104>)
    88c4:	482a      	ldr	r0, [pc, #168]	; (8970 <hci_driver_send+0x118>)
    88c6:	f7f8 fb61 	bl	f8c <printk>
		bt_recv_prio(evt);
    88ca:	9805      	ldr	r0, [sp, #20]
    88cc:	f7fb fa4a 	bl	3d64 <bt_recv_prio>
	if (!err) {
    88d0:	b91c      	cbnz	r4, 88da <hci_driver_send+0x82>
		net_buf_unref(buf);
    88d2:	4630      	mov	r0, r6
    88d4:	f00a ff1a 	bl	1370c <net_buf_unref>
    88d8:	2400      	movs	r4, #0
    88da:	f00b ff9f 	bl	1481c <_impl_k_current_get>
	BT_DBG("exit: %d", err);
    88de:	9503      	str	r5, [sp, #12]
    88e0:	9001      	str	r0, [sp, #4]
    88e2:	9402      	str	r4, [sp, #8]
    88e4:	9500      	str	r5, [sp, #0]
    88e6:	4b1b      	ldr	r3, [pc, #108]	; (8954 <hci_driver_send+0xfc>)
    88e8:	4a1b      	ldr	r2, [pc, #108]	; (8958 <hci_driver_send+0x100>)
    88ea:	491c      	ldr	r1, [pc, #112]	; (895c <hci_driver_send+0x104>)
    88ec:	4821      	ldr	r0, [pc, #132]	; (8974 <hci_driver_send+0x11c>)
    88ee:	f7f8 fb4d 	bl	f8c <printk>
	return err;
    88f2:	e7cd      	b.n	8890 <hci_driver_send+0x38>
	evt = hci_cmd_handle(buf);
    88f4:	4630      	mov	r0, r6
    88f6:	f000 fba9 	bl	904c <hci_cmd_handle>
	if (evt) {
    88fa:	4604      	mov	r4, r0
    88fc:	2800      	cmp	r0, #0
    88fe:	d0e8      	beq.n	88d2 <hci_driver_send+0x7a>
		hdr = (void *)evt->data;
    8900:	6887      	ldr	r7, [r0, #8]
    8902:	f00b ff8b 	bl	1481c <_impl_k_current_get>
		BT_DBG("Replying with event of %u bytes", evt->len);
    8906:	9503      	str	r5, [sp, #12]
    8908:	89a3      	ldrh	r3, [r4, #12]
    890a:	9302      	str	r3, [sp, #8]
    890c:	9001      	str	r0, [sp, #4]
    890e:	4a12      	ldr	r2, [pc, #72]	; (8958 <hci_driver_send+0x100>)
    8910:	9500      	str	r5, [sp, #0]
    8912:	4b19      	ldr	r3, [pc, #100]	; (8978 <hci_driver_send+0x120>)
    8914:	4911      	ldr	r1, [pc, #68]	; (895c <hci_driver_send+0x104>)
    8916:	4816      	ldr	r0, [pc, #88]	; (8970 <hci_driver_send+0x118>)
    8918:	f7f8 fb38 	bl	f8c <printk>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    891c:	783a      	ldrb	r2, [r7, #0]
    891e:	2a13      	cmp	r2, #19
    8920:	d812      	bhi.n	8948 <hci_driver_send+0xf0>
    8922:	2301      	movs	r3, #1
    8924:	4093      	lsls	r3, r2
    8926:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    892a:	d00d      	beq.n	8948 <hci_driver_send+0xf0>
			bt_recv_prio(evt);
    892c:	4620      	mov	r0, r4
    892e:	f7fb fa19 	bl	3d64 <bt_recv_prio>
    8932:	e7ce      	b.n	88d2 <hci_driver_send+0x7a>
	switch (type) {
    8934:	9301      	str	r3, [sp, #4]
		BT_ERR("Unknown HCI type %u", type);
    8936:	9402      	str	r4, [sp, #8]
    8938:	9400      	str	r4, [sp, #0]
    893a:	4b06      	ldr	r3, [pc, #24]	; (8954 <hci_driver_send+0xfc>)
    893c:	4a09      	ldr	r2, [pc, #36]	; (8964 <hci_driver_send+0x10c>)
    893e:	4907      	ldr	r1, [pc, #28]	; (895c <hci_driver_send+0x104>)
    8940:	480e      	ldr	r0, [pc, #56]	; (897c <hci_driver_send+0x124>)
    8942:	f7f8 fb23 	bl	f8c <printk>
    8946:	e7a1      	b.n	888c <hci_driver_send+0x34>
			bt_recv(evt);
    8948:	4620      	mov	r0, r4
    894a:	f7fa fd7d 	bl	3448 <bt_recv>
    894e:	e7c0      	b.n	88d2 <hci_driver_send+0x7a>
    8950:	000153a9 	.word	0x000153a9
    8954:	00017a3c 	.word	0x00017a3c
    8958:	000167ad 	.word	0x000167ad
    895c:	000167b4 	.word	0x000167b4
    8960:	00017abb 	.word	0x00017abb
    8964:	00016765 	.word	0x00016765
    8968:	00017ad6 	.word	0x00017ad6
    896c:	00017a31 	.word	0x00017a31
    8970:	00017af7 	.word	0x00017af7
    8974:	00017b50 	.word	0x00017b50
    8978:	00017a26 	.word	0x00017a26
    897c:	00017b2c 	.word	0x00017b2c

00008980 <recv_thread>:
{
    8980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_DBG("blocking");
    8984:	4e3e      	ldr	r6, [pc, #248]	; (8a80 <recv_thread+0x100>)
    8986:	4f3f      	ldr	r7, [pc, #252]	; (8a84 <recv_thread+0x104>)
    8988:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8aa0 <recv_thread+0x120>
{
    898c:	b089      	sub	sp, #36	; 0x24
    898e:	f00b ff45 	bl	1481c <_impl_k_current_get>
		BT_DBG("blocking");
    8992:	4d3d      	ldr	r5, [pc, #244]	; (8a88 <recv_thread+0x108>)
    8994:	9001      	str	r0, [sp, #4]
    8996:	4633      	mov	r3, r6
    8998:	463a      	mov	r2, r7
    899a:	4641      	mov	r1, r8
    899c:	9502      	str	r5, [sp, #8]
    899e:	9500      	str	r5, [sp, #0]
    89a0:	483a      	ldr	r0, [pc, #232]	; (8a8c <recv_thread+0x10c>)
    89a2:	f7f8 faf3 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    89a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    89aa:	4839      	ldr	r0, [pc, #228]	; (8a90 <recv_thread+0x110>)
    89ac:	f00b fca4 	bl	142f8 <_impl_k_queue_get>
    89b0:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    89b2:	f00b ff33 	bl	1481c <_impl_k_current_get>
		BT_DBG("unblocked");
    89b6:	9502      	str	r5, [sp, #8]
    89b8:	9001      	str	r0, [sp, #4]
    89ba:	9500      	str	r5, [sp, #0]
    89bc:	4633      	mov	r3, r6
    89be:	463a      	mov	r2, r7
    89c0:	4641      	mov	r1, r8
    89c2:	4834      	ldr	r0, [pc, #208]	; (8a94 <recv_thread+0x114>)
    89c4:	f7f8 fae2 	bl	f8c <printk>
		if (node_rx && !buf) {
    89c8:	f1b9 0f00 	cmp.w	r9, #0
    89cc:	d047      	beq.n	8a5e <recv_thread+0xde>
	s8_t class = hci_get_class(node_rx);
    89ce:	4648      	mov	r0, r9
    89d0:	f001 fd44 	bl	a45c <hci_get_class>
	switch (class) {
    89d4:	1e03      	subs	r3, r0, #0
    89d6:	f8cd 901c 	str.w	r9, [sp, #28]
    89da:	db03      	blt.n	89e4 <recv_thread+0x64>
    89dc:	2b02      	cmp	r3, #2
    89de:	dd0f      	ble.n	8a00 <recv_thread+0x80>
    89e0:	2b03      	cmp	r3, #3
    89e2:	d03f      	beq.n	8a64 <recv_thread+0xe4>
		LL_ASSERT(0);
    89e4:	9501      	str	r5, [sp, #4]
    89e6:	9500      	str	r5, [sp, #0]
    89e8:	4b2b      	ldr	r3, [pc, #172]	; (8a98 <recv_thread+0x118>)
    89ea:	4a2c      	ldr	r2, [pc, #176]	; (8a9c <recv_thread+0x11c>)
    89ec:	492c      	ldr	r1, [pc, #176]	; (8aa0 <recv_thread+0x120>)
    89ee:	482d      	ldr	r0, [pc, #180]	; (8aa4 <recv_thread+0x124>)
    89f0:	f7f8 facc 	bl	f8c <printk>
    89f4:	4040      	eors	r0, r0
    89f6:	f380 8811 	msr	BASEPRI, r0
    89fa:	f04f 0004 	mov.w	r0, #4
    89fe:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    8a00:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    8a02:	bf0e      	itee	eq
    8a04:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8a06:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    8a0a:	2001      	movne	r0, #1
    8a0c:	f7fb fbe0 	bl	41d0 <bt_buf_get_rx>
    8a10:	4604      	mov	r4, r0
		if (buf) {
    8a12:	b118      	cbz	r0, 8a1c <recv_thread+0x9c>
			hci_evt_encode(node_rx, buf);
    8a14:	4601      	mov	r1, r0
    8a16:	9807      	ldr	r0, [sp, #28]
    8a18:	f001 f96a 	bl	9cf0 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    8a1c:	9b07      	ldr	r3, [sp, #28]
    8a1e:	2100      	movs	r1, #0
    8a20:	88d8      	ldrh	r0, [r3, #6]
    8a22:	f008 fceb 	bl	113fc <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    8a26:	a808      	add	r0, sp, #32
    8a28:	2200      	movs	r2, #0
    8a2a:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    8a2e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    8a30:	f008 fc6e 	bl	11310 <ll_rx_mem_release>
		if (buf) {
    8a34:	b19c      	cbz	r4, 8a5e <recv_thread+0xde>
			if (buf->len) {
    8a36:	89a3      	ldrh	r3, [r4, #12]
    8a38:	b1f3      	cbz	r3, 8a78 <recv_thread+0xf8>
    8a3a:	f00b feef 	bl	1481c <_impl_k_current_get>
				BT_DBG("Packet in: type:%u len:%u",
    8a3e:	9504      	str	r5, [sp, #16]
    8a40:	89a3      	ldrh	r3, [r4, #12]
    8a42:	9303      	str	r3, [sp, #12]
    8a44:	7d23      	ldrb	r3, [r4, #20]
    8a46:	9302      	str	r3, [sp, #8]
    8a48:	9001      	str	r0, [sp, #4]
    8a4a:	9500      	str	r5, [sp, #0]
    8a4c:	4633      	mov	r3, r6
    8a4e:	463a      	mov	r2, r7
    8a50:	4641      	mov	r1, r8
    8a52:	4815      	ldr	r0, [pc, #84]	; (8aa8 <recv_thread+0x128>)
    8a54:	f7f8 fa9a 	bl	f8c <printk>
				bt_recv(buf);
    8a58:	4620      	mov	r0, r4
    8a5a:	f7fa fcf5 	bl	3448 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    8a5e:	f00b fead 	bl	147bc <_impl_k_yield>
    8a62:	e794      	b.n	898e <recv_thread+0xe>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    8a64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8a68:	f7fb fbb2 	bl	41d0 <bt_buf_get_rx>
    8a6c:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    8a6e:	4601      	mov	r1, r0
    8a70:	9807      	ldr	r0, [sp, #28]
    8a72:	f001 f8fd 	bl	9c70 <hci_acl_encode>
    8a76:	e7d1      	b.n	8a1c <recv_thread+0x9c>
				net_buf_unref(buf);
    8a78:	4620      	mov	r0, r4
    8a7a:	f00a fe47 	bl	1370c <net_buf_unref>
    8a7e:	e7ee      	b.n	8a5e <recv_thread+0xde>
    8a80:	00017a1a 	.word	0x00017a1a
    8a84:	000167ad 	.word	0x000167ad
    8a88:	000153a9 	.word	0x000153a9
    8a8c:	00017c00 	.word	0x00017c00
    8a90:	20003f24 	.word	0x20003f24
    8a94:	00017c1e 	.word	0x00017c1e
    8a98:	00017a0e 	.word	0x00017a0e
    8a9c:	00016765 	.word	0x00016765
    8aa0:	000167b4 	.word	0x000167b4
    8aa4:	000166d9 	.word	0x000166d9
    8aa8:	00017c3d 	.word	0x00017c3d

00008aac <prio_recv_thread>:
{
    8aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ab0:	4c2d      	ldr	r4, [pc, #180]	; (8b68 <prio_recv_thread+0xbc>)
			BT_DBG("Num Complete: 0x%04x:%u", handle, num_cmplt);
    8ab2:	4e2e      	ldr	r6, [pc, #184]	; (8b6c <prio_recv_thread+0xc0>)
    8ab4:	4d2e      	ldr	r5, [pc, #184]	; (8b70 <prio_recv_thread+0xc4>)
{
    8ab6:	b088      	sub	sp, #32
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    8ab8:	f10d 011a 	add.w	r1, sp, #26
    8abc:	a807      	add	r0, sp, #28
    8abe:	f008 fbef 	bl	112a0 <ll_rx_get>
    8ac2:	4607      	mov	r7, r0
    8ac4:	b998      	cbnz	r0, 8aee <prio_recv_thread+0x42>
		if (node_rx) {
    8ac6:	9b07      	ldr	r3, [sp, #28]
    8ac8:	b38b      	cbz	r3, 8b2e <prio_recv_thread+0x82>
			ll_rx_dequeue();
    8aca:	f008 fecb 	bl	11864 <ll_rx_dequeue>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    8ace:	f00b fea5 	bl	1481c <_impl_k_current_get>
			BT_DBG("RX node enqueue");
    8ad2:	9402      	str	r4, [sp, #8]
    8ad4:	9001      	str	r0, [sp, #4]
    8ad6:	9400      	str	r4, [sp, #0]
    8ad8:	4633      	mov	r3, r6
    8ada:	462a      	mov	r2, r5
    8adc:	4925      	ldr	r1, [pc, #148]	; (8b74 <prio_recv_thread+0xc8>)
    8ade:	4826      	ldr	r0, [pc, #152]	; (8b78 <prio_recv_thread+0xcc>)
    8ae0:	f7f8 fa54 	bl	f8c <printk>
			k_fifo_put(&recv_fifo, node_rx);
    8ae4:	9907      	ldr	r1, [sp, #28]
    8ae6:	4825      	ldr	r0, [pc, #148]	; (8b7c <prio_recv_thread+0xd0>)
    8ae8:	f00b fbe2 	bl	142b0 <k_queue_append>
    8aec:	e7e4      	b.n	8ab8 <prio_recv_thread+0xc>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8aee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8af2:	2001      	movs	r0, #1
    8af4:	f7fb fb6c 	bl	41d0 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    8af8:	463a      	mov	r2, r7
    8afa:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8afe:	4680      	mov	r8, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    8b00:	f001 fc98 	bl	a434 <hci_num_cmplt_encode>
    8b04:	f00b fe8a 	bl	1481c <_impl_k_current_get>
			BT_DBG("Num Complete: 0x%04x:%u", handle, num_cmplt);
    8b08:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8b0c:	9302      	str	r3, [sp, #8]
    8b0e:	9001      	str	r0, [sp, #4]
    8b10:	4633      	mov	r3, r6
    8b12:	462a      	mov	r2, r5
    8b14:	4917      	ldr	r1, [pc, #92]	; (8b74 <prio_recv_thread+0xc8>)
    8b16:	9404      	str	r4, [sp, #16]
    8b18:	9703      	str	r7, [sp, #12]
    8b1a:	9400      	str	r4, [sp, #0]
    8b1c:	4818      	ldr	r0, [pc, #96]	; (8b80 <prio_recv_thread+0xd4>)
    8b1e:	f7f8 fa35 	bl	f8c <printk>
			bt_recv_prio(buf);
    8b22:	4640      	mov	r0, r8
    8b24:	f7fb f91e 	bl	3d64 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    8b28:	f00b fe48 	bl	147bc <_impl_k_yield>
    8b2c:	e7c4      	b.n	8ab8 <prio_recv_thread+0xc>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    8b2e:	f00b fe75 	bl	1481c <_impl_k_current_get>
		BT_DBG("sem take...");
    8b32:	4633      	mov	r3, r6
    8b34:	462a      	mov	r2, r5
    8b36:	9001      	str	r0, [sp, #4]
    8b38:	9402      	str	r4, [sp, #8]
    8b3a:	9400      	str	r4, [sp, #0]
    8b3c:	490d      	ldr	r1, [pc, #52]	; (8b74 <prio_recv_thread+0xc8>)
    8b3e:	4811      	ldr	r0, [pc, #68]	; (8b84 <prio_recv_thread+0xd8>)
    8b40:	f7f8 fa24 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    8b44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8b48:	480f      	ldr	r0, [pc, #60]	; (8b88 <prio_recv_thread+0xdc>)
    8b4a:	f00b fe9e 	bl	1488a <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    8b4e:	f00b fe65 	bl	1481c <_impl_k_current_get>
		BT_DBG("sem taken");
    8b52:	9402      	str	r4, [sp, #8]
    8b54:	9001      	str	r0, [sp, #4]
    8b56:	9400      	str	r4, [sp, #0]
    8b58:	4633      	mov	r3, r6
    8b5a:	462a      	mov	r2, r5
    8b5c:	4905      	ldr	r1, [pc, #20]	; (8b74 <prio_recv_thread+0xc8>)
    8b5e:	480b      	ldr	r0, [pc, #44]	; (8b8c <prio_recv_thread+0xe0>)
    8b60:	f7f8 fa14 	bl	f8c <printk>
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    8b64:	e7a8      	b.n	8ab8 <prio_recv_thread+0xc>
    8b66:	bf00      	nop
    8b68:	000153a9 	.word	0x000153a9
    8b6c:	000179fd 	.word	0x000179fd
    8b70:	000167ad 	.word	0x000167ad
    8b74:	000167b4 	.word	0x000167b4
    8b78:	00017b9b 	.word	0x00017b9b
    8b7c:	20003f24 	.word	0x20003f24
    8b80:	00017b6e 	.word	0x00017b6e
    8b84:	00017bc0 	.word	0x00017bc0
    8b88:	20003f0c 	.word	0x20003f0c
    8b8c:	00017be1 	.word	0x00017be1

00008b90 <hci_driver_open>:
{
    8b90:	b530      	push	{r4, r5, lr}
	err = ll_init(&sem_prio_recv);
    8b92:	481e      	ldr	r0, [pc, #120]	; (8c0c <hci_driver_open+0x7c>)
    8b94:	4d1e      	ldr	r5, [pc, #120]	; (8c10 <hci_driver_open+0x80>)
{
    8b96:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    8b98:	f008 ff42 	bl	11a20 <ll_init>
	if (err) {
    8b9c:	4604      	mov	r4, r0
    8b9e:	b158      	cbz	r0, 8bb8 <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    8ba0:	9001      	str	r0, [sp, #4]
    8ba2:	4b1c      	ldr	r3, [pc, #112]	; (8c14 <hci_driver_open+0x84>)
    8ba4:	4a1c      	ldr	r2, [pc, #112]	; (8c18 <hci_driver_open+0x88>)
    8ba6:	491d      	ldr	r1, [pc, #116]	; (8c1c <hci_driver_open+0x8c>)
    8ba8:	481d      	ldr	r0, [pc, #116]	; (8c20 <hci_driver_open+0x90>)
    8baa:	9502      	str	r5, [sp, #8]
    8bac:	9500      	str	r5, [sp, #0]
	BT_DBG("Success.");
    8bae:	f7f8 f9ed 	bl	f8c <printk>
}
    8bb2:	4620      	mov	r0, r4
    8bb4:	b007      	add	sp, #28
    8bb6:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
    8bb8:	f001 fc68 	bl	a48c <hci_init>

    8bbc:	f06f 0309 	mvn.w	r3, #9
    8bc0:	9303      	str	r3, [sp, #12]
    8bc2:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    8bc6:	4b17      	ldr	r3, [pc, #92]	; (8c24 <hci_driver_open+0x94>)
    8bc8:	4917      	ldr	r1, [pc, #92]	; (8c28 <hci_driver_open+0x98>)
    8bca:	9405      	str	r4, [sp, #20]
    8bcc:	9404      	str	r4, [sp, #16]
    8bce:	9402      	str	r4, [sp, #8]
    8bd0:	9401      	str	r4, [sp, #4]
    8bd2:	9400      	str	r4, [sp, #0]
    8bd4:	4815      	ldr	r0, [pc, #84]	; (8c2c <hci_driver_open+0x9c>)
    8bd6:	f00c f82d 	bl	14c34 <_impl_k_thread_create>
    8bda:	f06f 0307 	mvn.w	r3, #7
    8bde:	f240 522c 	movw	r2, #1324	; 0x52c
    8be2:	4913      	ldr	r1, [pc, #76]	; (8c30 <hci_driver_open+0xa0>)
    8be4:	9303      	str	r3, [sp, #12]
    8be6:	9405      	str	r4, [sp, #20]
    8be8:	4b12      	ldr	r3, [pc, #72]	; (8c34 <hci_driver_open+0xa4>)
    8bea:	9404      	str	r4, [sp, #16]
    8bec:	9402      	str	r4, [sp, #8]
    8bee:	9401      	str	r4, [sp, #4]
    8bf0:	9400      	str	r4, [sp, #0]
    8bf2:	4811      	ldr	r0, [pc, #68]	; (8c38 <hci_driver_open+0xa8>)
    8bf4:	f00c f81e 	bl	14c34 <_impl_k_thread_create>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    8bf8:	f00b fe10 	bl	1481c <_impl_k_current_get>
	BT_DBG("Success.");
    8bfc:	9502      	str	r5, [sp, #8]
    8bfe:	9001      	str	r0, [sp, #4]
    8c00:	9500      	str	r5, [sp, #0]
    8c02:	4b04      	ldr	r3, [pc, #16]	; (8c14 <hci_driver_open+0x84>)
    8c04:	4a0d      	ldr	r2, [pc, #52]	; (8c3c <hci_driver_open+0xac>)
    8c06:	4905      	ldr	r1, [pc, #20]	; (8c1c <hci_driver_open+0x8c>)
    8c08:	480d      	ldr	r0, [pc, #52]	; (8c40 <hci_driver_open+0xb0>)
    8c0a:	e7d0      	b.n	8bae <hci_driver_open+0x1e>
    8c0c:	20003f0c 	.word	0x20003f0c
    8c10:	000153a9 	.word	0x000153a9
    8c14:	00017a4c 	.word	0x00017a4c
    8c18:	00016765 	.word	0x00016765
    8c1c:	000167b4 	.word	0x000167b4
    8c20:	00017a70 	.word	0x00017a70
    8c24:	00008aad 	.word	0x00008aad
    8c28:	200020c8 	.word	0x200020c8
    8c2c:	200018a8 	.word	0x200018a8
    8c30:	200023b8 	.word	0x200023b8
    8c34:	00008981 	.word	0x00008981
    8c38:	20001838 	.word	0x20001838
    8c3c:	000167ad 	.word	0x000167ad
    8c40:	00017a9d 	.word	0x00017a9d

00008c44 <sys_put_le32>:
	dst[1] = val >> 8;
    8c44:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    8c48:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    8c4a:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    8c4c:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    8c4e:	0a00      	lsrs	r0, r0, #8
    8c50:	704b      	strb	r3, [r1, #1]
    8c52:	70c8      	strb	r0, [r1, #3]
    8c54:	4770      	bx	lr

00008c56 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    8c56:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    8c58:	3008      	adds	r0, #8
{
    8c5a:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    8c5c:	2102      	movs	r1, #2
{
    8c5e:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    8c60:	f00a fd86 	bl	13770 <net_buf_simple_add>
	hdr->evt = evt;
    8c64:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    8c66:	7044      	strb	r4, [r0, #1]
    8c68:	bd38      	pop	{r3, r4, r5, pc}
	...

00008c6c <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    8c6c:	b538      	push	{r3, r4, r5, lr}
    8c6e:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    8c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8c74:	f7fb fabc 	bl	41f0 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    8c78:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    8c7a:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    8c7c:	210f      	movs	r1, #15
    8c7e:	f7ff ffea 	bl	8c56 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    8c82:	2104      	movs	r1, #4
    8c84:	f104 0008 	add.w	r0, r4, #8
    8c88:	f00a fd72 	bl	13770 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    8c8c:	2301      	movs	r3, #1
    8c8e:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8c90:	4b02      	ldr	r3, [pc, #8]	; (8c9c <cmd_status+0x30>)
	cs->status = status;
    8c92:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8c94:	881b      	ldrh	r3, [r3, #0]
    8c96:	8043      	strh	r3, [r0, #2]

	return buf;
}
    8c98:	4620      	mov	r0, r4
    8c9a:	bd38      	pop	{r3, r4, r5, pc}
    8c9c:	20000830 	.word	0x20000830

00008ca0 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    8ca0:	b570      	push	{r4, r5, r6, lr}
    8ca2:	4604      	mov	r4, r0
    8ca4:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    8ca6:	3201      	adds	r2, #1
{
    8ca8:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    8caa:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    8cac:	b2d2      	uxtb	r2, r2
    8cae:	213e      	movs	r1, #62	; 0x3e
    8cb0:	f7ff ffd1 	bl	8c56 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    8cb4:	2101      	movs	r1, #1
    8cb6:	4620      	mov	r0, r4
    8cb8:	f00a fd5a 	bl	13770 <net_buf_simple_add>
	me->subevent = subevt;
    8cbc:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    8cbe:	4629      	mov	r1, r5
    8cc0:	4620      	mov	r0, r4
}
    8cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    8cc6:	f00a bd53 	b.w	13770 <net_buf_simple_add>
	...

00008ccc <cmd_complete>:
{
    8ccc:	b538      	push	{r3, r4, r5, lr}
    8cce:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    8cd4:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8cd6:	f7fb fa8b 	bl	41f0 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    8cda:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8cdc:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    8cde:	b2d2      	uxtb	r2, r2
    8ce0:	210e      	movs	r1, #14
    8ce2:	f7ff ffb8 	bl	8c56 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    8ce6:	6820      	ldr	r0, [r4, #0]
    8ce8:	2103      	movs	r1, #3
    8cea:	3008      	adds	r0, #8
    8cec:	f00a fd40 	bl	13770 <net_buf_simple_add>
	cc->ncmd = 1;
    8cf0:	2301      	movs	r3, #1
    8cf2:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    8cf4:	4b05      	ldr	r3, [pc, #20]	; (8d0c <cmd_complete+0x40>)
    8cf6:	881b      	ldrh	r3, [r3, #0]
    8cf8:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    8cfc:	6820      	ldr	r0, [r4, #0]
    8cfe:	4629      	mov	r1, r5
    8d00:	3008      	adds	r0, #8
}
    8d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    8d06:	f00a bd33 	b.w	13770 <net_buf_simple_add>
    8d0a:	bf00      	nop
    8d0c:	20000830 	.word	0x20000830

00008d10 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8d10:	4b0e      	ldr	r3, [pc, #56]	; (8d4c <encrypt_change+0x3c>)
{
    8d12:	b570      	push	{r4, r5, r6, lr}
    8d14:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8d16:	e9d3 2300 	ldrd	r2, r3, [r3]
    8d1a:	2300      	movs	r3, #0
    8d1c:	f002 0280 	and.w	r2, r2, #128	; 0x80
    8d20:	4313      	orrs	r3, r2
{
    8d22:	4604      	mov	r4, r0
    8d24:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8d26:	d010      	beq.n	8d4a <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    8d28:	2204      	movs	r2, #4
    8d2a:	2108      	movs	r1, #8
    8d2c:	4628      	mov	r0, r5
    8d2e:	f7ff ff92 	bl	8c56 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8d32:	2104      	movs	r1, #4
    8d34:	f105 0008 	add.w	r0, r5, #8
    8d38:	f00a fd1a 	bl	13770 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    8d3c:	fab4 f384 	clz	r3, r4
    8d40:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    8d42:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8d44:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    8d48:	70c3      	strb	r3, [r0, #3]
    8d4a:	bd70      	pop	{r4, r5, r6, pc}
    8d4c:	20003d30 	.word	0x20003d30

00008d50 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    8d50:	b570      	push	{r4, r5, r6, lr}
    8d52:	4604      	mov	r4, r0
    8d54:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8d56:	4b13      	ldr	r3, [pc, #76]	; (8da4 <le_remote_feat_complete+0x54>)
{
    8d58:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
    8d5e:	2200      	movs	r2, #0
    8d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8d64:	4313      	orrs	r3, r2
{
    8d66:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8d68:	d01b      	beq.n	8da2 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    8d6a:	4b0f      	ldr	r3, [pc, #60]	; (8da8 <le_remote_feat_complete+0x58>)
    8d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8d70:	2300      	movs	r3, #0
    8d72:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8d76:	4313      	orrs	r3, r2
    8d78:	d013      	beq.n	8da2 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    8d7a:	220b      	movs	r2, #11
    8d7c:	2104      	movs	r1, #4
    8d7e:	f7ff ff8f 	bl	8ca0 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    8d82:	2208      	movs	r2, #8
	sep->status = status;
    8d84:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    8d86:	f8a0 6001 	strh.w	r6, [r0, #1]
    8d8a:	3003      	adds	r0, #3
	if (!status) {
    8d8c:	b924      	cbnz	r4, 8d98 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    8d8e:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    8d90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    8d94:	f7f8 bf32 	b.w	1bfc <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    8d98:	2100      	movs	r1, #0
}
    8d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    8d9e:	f7f8 bf59 	b.w	1c54 <memset>
    8da2:	bd70      	pop	{r4, r5, r6, pc}
    8da4:	20003d30 	.word	0x20003d30
    8da8:	20003d38 	.word	0x20003d38

00008dac <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8dac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8db0:	4605      	mov	r5, r0
    8db2:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8db4:	4b46      	ldr	r3, [pc, #280]	; (8ed0 <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8db6:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8db8:	e9d3 2300 	ldrd	r2, r3, [r3]
    8dbc:	f240 2801 	movw	r8, #513	; 0x201
    8dc0:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    8dc4:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8dc8:	ea03 0309 	and.w	r3, r3, r9
    8dcc:	ea02 0208 	and.w	r2, r2, r8
    8dd0:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8dd2:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    8dd4:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8dd8:	d077      	beq.n	8eca <le_conn_complete.part.39+0x11e>
	if (!status) {
    8dda:	2d00      	cmp	r5, #0
    8ddc:	d150      	bne.n	8e80 <le_conn_complete.part.39+0xd4>
		conn_count++;
    8dde:	4a3d      	ldr	r2, [pc, #244]	; (8ed4 <le_conn_complete.part.39+0x128>)
    8de0:	6813      	ldr	r3, [r2, #0]
    8de2:	3301      	adds	r3, #1
    8de4:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    8de6:	ea5a 030b 	orrs.w	r3, sl, fp
    8dea:	f101 0803 	add.w	r8, r1, #3
    8dee:	d151      	bne.n	8e94 <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8df0:	2212      	movs	r2, #18
    8df2:	2101      	movs	r1, #1
    8df4:	f7ff ff54 	bl	8ca0 <meta_evt>
	lecc->status = 0x00;
    8df8:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    8dfa:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    8dfe:	7863      	ldrb	r3, [r4, #1]
    8e00:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    8e02:	78a3      	ldrb	r3, [r4, #2]
    8e04:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8e06:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    8e08:	2206      	movs	r2, #6
    8e0a:	4641      	mov	r1, r8
    8e0c:	3005      	adds	r0, #5
    8e0e:	f7f8 fef5 	bl	1bfc <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    8e12:	8ae3      	ldrh	r3, [r4, #22]
    8e14:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    8e18:	8b23      	ldrh	r3, [r4, #24]
    8e1a:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    8e1e:	8b63      	ldrh	r3, [r4, #26]
    8e20:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    8e24:	7f23      	ldrb	r3, [r4, #28]
    8e26:	747b      	strb	r3, [r7, #17]
    8e28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8e2c:	221e      	movs	r2, #30
    8e2e:	210a      	movs	r1, #10
    8e30:	f7ff ff36 	bl	8ca0 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    8e34:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8e36:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    8e38:	2100      	movs	r1, #0
    8e3a:	f7f8 ff0b 	bl	1c54 <memset>
		lecc->status = status;
    8e3e:	7025      	strb	r5, [r4, #0]
    8e40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    8e44:	7d63      	ldrb	r3, [r4, #21]
    8e46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8e4a:	2b40      	cmp	r3, #64	; 0x40
    8e4c:	d138      	bne.n	8ec0 <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    8e4e:	2206      	movs	r2, #6
    8e50:	f104 0110 	add.w	r1, r4, #16
    8e54:	f7f8 fed2 	bl	1bfc <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    8e58:	2206      	movs	r2, #6
    8e5a:	f104 0109 	add.w	r1, r4, #9
    8e5e:	f107 0011 	add.w	r0, r7, #17
    8e62:	f7f8 fecb 	bl	1bfc <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    8e66:	8ae3      	ldrh	r3, [r4, #22]
    8e68:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    8e6c:	8b23      	ldrh	r3, [r4, #24]
    8e6e:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    8e72:	8b63      	ldrh	r3, [r4, #26]
    8e74:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    8e78:	7f23      	ldrb	r3, [r4, #28]
    8e7a:	777b      	strb	r3, [r7, #29]
    8e7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    8e80:	ea5a 030b 	orrs.w	r3, sl, fp
    8e84:	d1d2      	bne.n	8e2c <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8e86:	2212      	movs	r2, #18
    8e88:	2101      	movs	r1, #1
    8e8a:	f7ff ff09 	bl	8ca0 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    8e8e:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8e90:	4604      	mov	r4, r0
    8e92:	e7d1      	b.n	8e38 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8e94:	221e      	movs	r2, #30
    8e96:	210a      	movs	r1, #10
    8e98:	f7ff ff02 	bl	8ca0 <meta_evt>
		leecc->status = 0x00;
    8e9c:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    8e9e:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    8ea2:	7863      	ldrb	r3, [r4, #1]
    8ea4:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    8ea6:	78a3      	ldrb	r3, [r4, #2]
    8ea8:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8eaa:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    8eac:	2206      	movs	r2, #6
    8eae:	4641      	mov	r1, r8
    8eb0:	3005      	adds	r0, #5
    8eb2:	f7f8 fea3 	bl	1bfc <memcpy>
		if ((radio_cc->own_addr_type) &&
    8eb6:	7be3      	ldrb	r3, [r4, #15]
    8eb8:	f107 000b 	add.w	r0, r7, #11
    8ebc:	2b00      	cmp	r3, #0
    8ebe:	d1c1      	bne.n	8e44 <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    8ec0:	2206      	movs	r2, #6
    8ec2:	2100      	movs	r1, #0
    8ec4:	f7f8 fec6 	bl	1c54 <memset>
    8ec8:	e7c6      	b.n	8e58 <le_conn_complete.part.39+0xac>
    8eca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ece:	bf00      	nop
    8ed0:	20003d38 	.word	0x20003d38
    8ed4:	20000834 	.word	0x20000834

00008ed8 <bt_addr_le_to_str.constprop.71>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8ed8:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    8eda:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8edc:	b08a      	sub	sp, #40	; 0x28
    8ede:	4604      	mov	r4, r0
    8ee0:	460e      	mov	r6, r1
    8ee2:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    8ee4:	2b03      	cmp	r3, #3
    8ee6:	d820      	bhi.n	8f2a <bt_addr_le_to_str.constprop.71+0x52>
    8ee8:	e8df f003 	tbb	[pc, r3]
    8eec:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    8ef0:	4911      	ldr	r1, [pc, #68]	; (8f38 <bt_addr_le_to_str.constprop.71+0x60>)
		strcpy(type, "random");
    8ef2:	4628      	mov	r0, r5
    8ef4:	f7f8 fe4e 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8ef8:	7862      	ldrb	r2, [r4, #1]
    8efa:	9204      	str	r2, [sp, #16]
    8efc:	78a2      	ldrb	r2, [r4, #2]
    8efe:	9203      	str	r2, [sp, #12]
    8f00:	78e2      	ldrb	r2, [r4, #3]
    8f02:	9202      	str	r2, [sp, #8]
    8f04:	7922      	ldrb	r2, [r4, #4]
    8f06:	9201      	str	r2, [sp, #4]
    8f08:	7962      	ldrb	r2, [r4, #5]
    8f0a:	9200      	str	r2, [sp, #0]
    8f0c:	79a3      	ldrb	r3, [r4, #6]
    8f0e:	9505      	str	r5, [sp, #20]
    8f10:	4a0a      	ldr	r2, [pc, #40]	; (8f3c <bt_addr_le_to_str.constprop.71+0x64>)
    8f12:	211b      	movs	r1, #27
    8f14:	4630      	mov	r0, r6
    8f16:	f7f8 f847 	bl	fa8 <snprintk>
}
    8f1a:	b00a      	add	sp, #40	; 0x28
    8f1c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    8f1e:	4908      	ldr	r1, [pc, #32]	; (8f40 <bt_addr_le_to_str.constprop.71+0x68>)
    8f20:	e7e7      	b.n	8ef2 <bt_addr_le_to_str.constprop.71+0x1a>
		strcpy(type, "public id");
    8f22:	4908      	ldr	r1, [pc, #32]	; (8f44 <bt_addr_le_to_str.constprop.71+0x6c>)
    8f24:	e7e5      	b.n	8ef2 <bt_addr_le_to_str.constprop.71+0x1a>
		strcpy(type, "random id");
    8f26:	4908      	ldr	r1, [pc, #32]	; (8f48 <bt_addr_le_to_str.constprop.71+0x70>)
    8f28:	e7e3      	b.n	8ef2 <bt_addr_le_to_str.constprop.71+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    8f2a:	4a08      	ldr	r2, [pc, #32]	; (8f4c <bt_addr_le_to_str.constprop.71+0x74>)
    8f2c:	210a      	movs	r1, #10
    8f2e:	4628      	mov	r0, r5
    8f30:	f7f8 f83a 	bl	fa8 <snprintk>
    8f34:	e7e0      	b.n	8ef8 <bt_addr_le_to_str.constprop.71+0x20>
    8f36:	bf00      	nop
    8f38:	00015315 	.word	0x00015315
    8f3c:	0001533e 	.word	0x0001533e
    8f40:	0001531c 	.word	0x0001531c
    8f44:	00015323 	.word	0x00015323
    8f48:	0001532d 	.word	0x0001532d
    8f4c:	00015337 	.word	0x00015337

00008f50 <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f54:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    8f56:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8f58:	4d32      	ldr	r5, [pc, #200]	; (9024 <le_adv_ext_report.isra.66+0xd4>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8f5a:	b092      	sub	sp, #72	; 0x48
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8f5c:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8f5e:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8f60:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8f62:	9003      	str	r0, [sp, #12]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8f64:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8f66:	b25b      	sxtb	r3, r3
    8f68:	9306      	str	r3, [sp, #24]
    8f6a:	7823      	ldrb	r3, [r4, #0]
    8f6c:	9201      	str	r2, [sp, #4]
    8f6e:	09d9      	lsrs	r1, r3, #7
    8f70:	9105      	str	r1, [sp, #20]
    8f72:	f3c3 1180 	ubfx	r1, r3, #6, #1
    8f76:	f003 030f 	and.w	r3, r3, #15
    8f7a:	9104      	str	r1, [sp, #16]
    8f7c:	9302      	str	r3, [sp, #8]
    8f7e:	9500      	str	r5, [sp, #0]
    8f80:	4b29      	ldr	r3, [pc, #164]	; (9028 <le_adv_ext_report.isra.66+0xd8>)
    8f82:	4a2a      	ldr	r2, [pc, #168]	; (902c <le_adv_ext_report.isra.66+0xdc>)
    8f84:	492a      	ldr	r1, [pc, #168]	; (9030 <le_adv_ext_report.isra.66+0xe0>)
    8f86:	482b      	ldr	r0, [pc, #172]	; (9034 <le_adv_ext_report.isra.66+0xe4>)
    8f88:	f7f8 f800 	bl	f8c <printk>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    8f8c:	7823      	ldrb	r3, [r4, #0]
    8f8e:	f003 030f 	and.w	r3, r3, #15
    8f92:	2b07      	cmp	r3, #7
    8f94:	d143      	bne.n	901e <le_adv_ext_report.isra.66+0xce>
    8f96:	7863      	ldrb	r3, [r4, #1]
    8f98:	2b00      	cmp	r3, #0
    8f9a:	d040      	beq.n	901e <le_adv_ext_report.isra.66+0xce>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    8f9c:	78a3      	ldrb	r3, [r4, #2]
    8f9e:	4924      	ldr	r1, [pc, #144]	; (9030 <le_adv_ext_report.isra.66+0xe0>)
    8fa0:	9503      	str	r5, [sp, #12]
    8fa2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    8fa6:	099b      	lsrs	r3, r3, #6
    8fa8:	9202      	str	r2, [sp, #8]
    8faa:	9301      	str	r3, [sp, #4]
    8fac:	9500      	str	r5, [sp, #0]
    8fae:	4b1e      	ldr	r3, [pc, #120]	; (9028 <le_adv_ext_report.isra.66+0xd8>)
    8fb0:	4a1e      	ldr	r2, [pc, #120]	; (902c <le_adv_ext_report.isra.66+0xdc>)
    8fb2:	4821      	ldr	r0, [pc, #132]	; (9038 <le_adv_ext_report.isra.66+0xe8>)
    8fb4:	f7f7 ffea 	bl	f8c <printk>
		if (!p->ext_hdr_len) {
    8fb8:	78a3      	ldrb	r3, [r4, #2]
    8fba:	0699      	lsls	r1, r3, #26
    8fbc:	d02f      	beq.n	901e <le_adv_ext_report.isra.66+0xce>
		if (h->adv_addr) {
    8fbe:	78e3      	ldrb	r3, [r4, #3]
    8fc0:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    8fc2:	f104 0604 	add.w	r6, r4, #4
		if (h->adv_addr) {
    8fc6:	d51c      	bpl.n	9002 <le_adv_ext_report.isra.66+0xb2>
			addr.type = adv->tx_addr;
    8fc8:	7823      	ldrb	r3, [r4, #0]
    8fca:	af12      	add	r7, sp, #72	; 0x48
    8fcc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8fd0:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8fd4:	2206      	movs	r2, #6
    8fd6:	4631      	mov	r1, r6
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8fd8:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8fdc:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    8fe0:	f7f8 fe0c 	bl	1bfc <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8fe4:	4641      	mov	r1, r8
    8fe6:	4638      	mov	r0, r7
    8fe8:	f7ff ff76 	bl	8ed8 <bt_addr_le_to_str.constprop.71>
			BT_WARN("AdvA: %s", addr_str);
    8fec:	9502      	str	r5, [sp, #8]
    8fee:	e88d 0120 	stmia.w	sp, {r5, r8}
    8ff2:	4b0d      	ldr	r3, [pc, #52]	; (9028 <le_adv_ext_report.isra.66+0xd8>)
    8ff4:	4a0d      	ldr	r2, [pc, #52]	; (902c <le_adv_ext_report.isra.66+0xdc>)
    8ff6:	490e      	ldr	r1, [pc, #56]	; (9030 <le_adv_ext_report.isra.66+0xe0>)
    8ff8:	4810      	ldr	r0, [pc, #64]	; (903c <le_adv_ext_report.isra.66+0xec>)
			ptr += BDADDR_SIZE;
    8ffa:	f104 060a 	add.w	r6, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    8ffe:	f7f7 ffc5 	bl	f8c <printk>
		if (h->tx_pwr) {
    9002:	78e3      	ldrb	r3, [r4, #3]
    9004:	065b      	lsls	r3, r3, #25
    9006:	d50a      	bpl.n	901e <le_adv_ext_report.isra.66+0xce>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    9008:	9502      	str	r5, [sp, #8]
    900a:	f996 3000 	ldrsb.w	r3, [r6]
    900e:	9301      	str	r3, [sp, #4]
    9010:	9500      	str	r5, [sp, #0]
    9012:	4b05      	ldr	r3, [pc, #20]	; (9028 <le_adv_ext_report.isra.66+0xd8>)
    9014:	4a05      	ldr	r2, [pc, #20]	; (902c <le_adv_ext_report.isra.66+0xdc>)
    9016:	4906      	ldr	r1, [pc, #24]	; (9030 <le_adv_ext_report.isra.66+0xe0>)
    9018:	4809      	ldr	r0, [pc, #36]	; (9040 <le_adv_ext_report.isra.66+0xf0>)
    901a:	f7f7 ffb7 	bl	f8c <printk>
}
    901e:	b012      	add	sp, #72	; 0x48
    9020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9024:	000153a9 	.word	0x000153a9
    9028:	00017cca 	.word	0x00017cca
    902c:	000167ef 	.word	0x000167ef
    9030:	000167b4 	.word	0x000167b4
    9034:	00017f4f 	.word	0x00017f4f
    9038:	00017f9c 	.word	0x00017f9c
    903c:	00017fcd 	.word	0x00017fcd
    9040:	00017fe6 	.word	0x00017fe6

00009044 <sys_get_le64>:
{
    9044:	4603      	mov	r3, r0
}
    9046:	6800      	ldr	r0, [r0, #0]
    9048:	6859      	ldr	r1, [r3, #4]
    904a:	4770      	bx	lr

0000904c <hci_cmd_handle>:
{
    904c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    904e:	8981      	ldrh	r1, [r0, #12]
{
    9050:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    9052:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    9054:	2902      	cmp	r1, #2
{
    9056:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    9058:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    905a:	d80b      	bhi.n	9074 <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    905c:	4bbe      	ldr	r3, [pc, #760]	; (9358 <hci_cmd_handle+0x30c>)
    905e:	9301      	str	r3, [sp, #4]
    9060:	9300      	str	r3, [sp, #0]
    9062:	4abe      	ldr	r2, [pc, #760]	; (935c <hci_cmd_handle+0x310>)
    9064:	4bbe      	ldr	r3, [pc, #760]	; (9360 <hci_cmd_handle+0x314>)
    9066:	49bf      	ldr	r1, [pc, #764]	; (9364 <hci_cmd_handle+0x318>)
    9068:	48bf      	ldr	r0, [pc, #764]	; (9368 <hci_cmd_handle+0x31c>)
		BT_ERR("Invalid HCI CMD packet length");
    906a:	f7f7 ff8f 	bl	f8c <printk>
		return NULL;
    906e:	4628      	mov	r0, r5
}
    9070:	b013      	add	sp, #76	; 0x4c
    9072:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    9074:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    9076:	4ebd      	ldr	r6, [pc, #756]	; (936c <hci_cmd_handle+0x320>)
    9078:	781a      	ldrb	r2, [r3, #0]
    907a:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    907c:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    907e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    9082:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    9084:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    9086:	d907      	bls.n	9098 <hci_cmd_handle+0x4c>
		BT_ERR("Invalid HCI CMD packet length");
    9088:	4bb3      	ldr	r3, [pc, #716]	; (9358 <hci_cmd_handle+0x30c>)
    908a:	9301      	str	r3, [sp, #4]
    908c:	9300      	str	r3, [sp, #0]
    908e:	4ab3      	ldr	r2, [pc, #716]	; (935c <hci_cmd_handle+0x310>)
    9090:	4bb3      	ldr	r3, [pc, #716]	; (9360 <hci_cmd_handle+0x314>)
    9092:	49b4      	ldr	r1, [pc, #720]	; (9364 <hci_cmd_handle+0x318>)
    9094:	48b6      	ldr	r0, [pc, #728]	; (9370 <hci_cmd_handle+0x324>)
    9096:	e7e8      	b.n	906a <hci_cmd_handle+0x1e>
	net_buf_pull(cmd, sizeof(*chdr));
    9098:	2103      	movs	r1, #3
    909a:	f104 0008 	add.w	r0, r4, #8
    909e:	f00a fb95 	bl	137cc <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    90a2:	8833      	ldrh	r3, [r6, #0]
    90a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    90a8:	0a9b      	lsrs	r3, r3, #10
    90aa:	2b04      	cmp	r3, #4
    90ac:	f000 80bc 	beq.w	9228 <hci_cmd_handle+0x1dc>
    90b0:	d809      	bhi.n	90c6 <hci_cmd_handle+0x7a>
    90b2:	2b01      	cmp	r3, #1
    90b4:	d026      	beq.n	9104 <hci_cmd_handle+0xb8>
    90b6:	2b03      	cmp	r3, #3
    90b8:	d03b      	beq.n	9132 <hci_cmd_handle+0xe6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    90ba:	2101      	movs	r1, #1
    90bc:	a807      	add	r0, sp, #28
    90be:	f7ff fe05 	bl	8ccc <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    90c2:	2301      	movs	r3, #1
    90c4:	e2a9      	b.n	961a <hci_cmd_handle+0x5ce>
	switch (BT_OGF(_opcode)) {
    90c6:	2b08      	cmp	r3, #8
    90c8:	f000 8168 	beq.w	939c <hci_cmd_handle+0x350>
    90cc:	2b3f      	cmp	r3, #63	; 0x3f
    90ce:	d1f4      	bne.n	90ba <hci_cmd_handle+0x6e>
	switch (ocf) {
    90d0:	3a01      	subs	r2, #1
    90d2:	2a09      	cmp	r2, #9
    90d4:	d8f1      	bhi.n	90ba <hci_cmd_handle+0x6e>
    90d6:	a301      	add	r3, pc, #4	; (adr r3, 90dc <hci_cmd_handle+0x90>)
    90d8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    90dc:	00009969 	.word	0x00009969
    90e0:	00009999 	.word	0x00009999
    90e4:	000099c3 	.word	0x000099c3
    90e8:	000090bb 	.word	0x000090bb
    90ec:	000090bb 	.word	0x000090bb
    90f0:	00009a09 	.word	0x00009a09
    90f4:	000090bb 	.word	0x000090bb
    90f8:	000099db 	.word	0x000099db
    90fc:	00009a15 	.word	0x00009a15
    9100:	00009a83 	.word	0x00009a83
	switch (ocf) {
    9104:	2a06      	cmp	r2, #6
    9106:	d006      	beq.n	9116 <hci_cmd_handle+0xca>
    9108:	2a1d      	cmp	r2, #29
    910a:	d1d6      	bne.n	90ba <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    910c:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    910e:	8818      	ldrh	r0, [r3, #0]
    9110:	f007 ffdb 	bl	110ca <ll_version_ind_send>
    9114:	e004      	b.n	9120 <hci_cmd_handle+0xd4>
    9116:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    9118:	7899      	ldrb	r1, [r3, #2]
    911a:	8818      	ldrh	r0, [r3, #0]
    911c:	f007 ffe9 	bl	110f2 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    9120:	2800      	cmp	r0, #0
    9122:	bf14      	ite	ne
    9124:	200c      	movne	r0, #12
    9126:	2000      	moveq	r0, #0
    9128:	f7ff fda0 	bl	8c6c <cmd_status>
    912c:	9007      	str	r0, [sp, #28]
	return evt;
    912e:	9807      	ldr	r0, [sp, #28]
    9130:	e79e      	b.n	9070 <hci_cmd_handle+0x24>
	switch (ocf) {
    9132:	2a2d      	cmp	r2, #45	; 0x2d
    9134:	d03a      	beq.n	91ac <hci_cmd_handle+0x160>
    9136:	d820      	bhi.n	917a <hci_cmd_handle+0x12e>
    9138:	2a01      	cmp	r2, #1
    913a:	d02b      	beq.n	9194 <hci_cmd_handle+0x148>
    913c:	2a03      	cmp	r2, #3
    913e:	d1bc      	bne.n	90ba <hci_cmd_handle+0x6e>
	dup_count = -1;
    9140:	4b8c      	ldr	r3, [pc, #560]	; (9374 <hci_cmd_handle+0x328>)
    9142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9146:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    9148:	4b8b      	ldr	r3, [pc, #556]	; (9378 <hci_cmd_handle+0x32c>)
    914a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    914e:	f641 71ff 	movw	r1, #8191	; 0x1fff
    9152:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9156:	4b89      	ldr	r3, [pc, #548]	; (937c <hci_cmd_handle+0x330>)
    9158:	2000      	movs	r0, #0
    915a:	2100      	movs	r1, #0
    915c:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9160:	4b87      	ldr	r3, [pc, #540]	; (9380 <hci_cmd_handle+0x334>)
    9162:	201f      	movs	r0, #31
    9164:	2100      	movs	r1, #0
    9166:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    916a:	f007 fc79 	bl	10a60 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    916e:	2101      	movs	r1, #1
    9170:	a807      	add	r0, sp, #28
    9172:	f7ff fdab 	bl	8ccc <cmd_complete>
	ccst->status = 0x00;
    9176:	2300      	movs	r3, #0
    9178:	e24f      	b.n	961a <hci_cmd_handle+0x5ce>
	switch (ocf) {
    917a:	2a7b      	cmp	r2, #123	; 0x7b
    917c:	d02c      	beq.n	91d8 <hci_cmd_handle+0x18c>
    917e:	2a7c      	cmp	r2, #124	; 0x7c
    9180:	d041      	beq.n	9206 <hci_cmd_handle+0x1ba>
    9182:	2a63      	cmp	r2, #99	; 0x63
    9184:	d199      	bne.n	90ba <hci_cmd_handle+0x6e>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    9186:	68a0      	ldr	r0, [r4, #8]
    9188:	f7ff ff5c 	bl	9044 <sys_get_le64>
    918c:	4b7b      	ldr	r3, [pc, #492]	; (937c <hci_cmd_handle+0x330>)
	le_event_mask = sys_get_le64(cmd->events);
    918e:	e9c3 0100 	strd	r0, r1, [r3]
    9192:	e7ec      	b.n	916e <hci_cmd_handle+0x122>
	event_mask = sys_get_le64(cmd->events);
    9194:	68a0      	ldr	r0, [r4, #8]
    9196:	f7ff ff55 	bl	9044 <sys_get_le64>
    919a:	4b77      	ldr	r3, [pc, #476]	; (9378 <hci_cmd_handle+0x32c>)
    919c:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    91a0:	4611      	mov	r1, r2
    91a2:	a807      	add	r0, sp, #28
    91a4:	f7ff fd92 	bl	8ccc <cmd_complete>
	ccst->status = 0x00;
    91a8:	7005      	strb	r5, [r0, #0]
    91aa:	e7c0      	b.n	912e <hci_cmd_handle+0xe2>
    91ac:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    91ae:	2104      	movs	r1, #4
    91b0:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    91b2:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    91b4:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    91b6:	f7ff fd89 	bl	8ccc <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    91ba:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    91bc:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    91be:	1cc2      	adds	r2, r0, #3
    91c0:	4639      	mov	r1, r7
    91c2:	4630      	mov	r0, r6
    91c4:	f007 ffa9 	bl	1111a <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    91c8:	2800      	cmp	r0, #0
    91ca:	bf14      	ite	ne
    91cc:	2302      	movne	r3, #2
    91ce:	2300      	moveq	r3, #0
    91d0:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    91d2:	f8a4 5001 	strh.w	r5, [r4, #1]
    91d6:	e7aa      	b.n	912e <hci_cmd_handle+0xe2>
	handle = sys_le16_to_cpu(cmd->handle);
    91d8:	68a3      	ldr	r3, [r4, #8]
    91da:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    91dc:	a908      	add	r1, sp, #32
    91de:	b2a0      	uxth	r0, r4
    91e0:	f007 ffa5 	bl	1112e <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    91e4:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    91e6:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    91e8:	a807      	add	r0, sp, #28
    91ea:	f7ff fd6f 	bl	8ccc <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    91ee:	2d00      	cmp	r5, #0
    91f0:	bf14      	ite	ne
    91f2:	230c      	movne	r3, #12
    91f4:	2300      	moveq	r3, #0
    91f6:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    91f8:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    91fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    9200:	f8a0 3003 	strh.w	r3, [r0, #3]
    9204:	e793      	b.n	912e <hci_cmd_handle+0xe2>
    9206:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    9208:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    920a:	8859      	ldrh	r1, [r3, #2]
    920c:	b2a0      	uxth	r0, r4
    920e:	f007 ffa2 	bl	11156 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    9212:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    9214:	2103      	movs	r1, #3
    9216:	a807      	add	r0, sp, #28
    9218:	f7ff fd58 	bl	8ccc <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    921c:	2d00      	cmp	r5, #0
    921e:	bf14      	ite	ne
    9220:	230c      	movne	r3, #12
    9222:	2300      	moveq	r3, #0
    9224:	7003      	strb	r3, [r0, #0]
    9226:	e28e      	b.n	9746 <hci_cmd_handle+0x6fa>
	switch (ocf) {
    9228:	3a01      	subs	r2, #1
    922a:	2a08      	cmp	r2, #8
    922c:	f63f af45 	bhi.w	90ba <hci_cmd_handle+0x6e>
    9230:	a301      	add	r3, pc, #4	; (adr r3, 9238 <hci_cmd_handle+0x1ec>)
    9232:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    9236:	bf00      	nop
    9238:	0000925d 	.word	0x0000925d
    923c:	00009287 	.word	0x00009287
    9240:	0000933b 	.word	0x0000933b
    9244:	000090bb 	.word	0x000090bb
    9248:	000090bb 	.word	0x000090bb
    924c:	000090bb 	.word	0x000090bb
    9250:	000090bb 	.word	0x000090bb
    9254:	000090bb 	.word	0x000090bb
    9258:	00009385 	.word	0x00009385
	rp = cmd_complete(evt, sizeof(*rp));
    925c:	2109      	movs	r1, #9
    925e:	a807      	add	r0, sp, #28
    9260:	f7ff fd34 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    9264:	2300      	movs	r3, #0
    9266:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    9268:	7083      	strb	r3, [r0, #2]
    926a:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    926c:	f06f 030e 	mvn.w	r3, #14
    9270:	7143      	strb	r3, [r0, #5]
    9272:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    9274:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    9276:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    9278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    927c:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    927e:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    9280:	71c3      	strb	r3, [r0, #7]
    9282:	7203      	strb	r3, [r0, #8]
    9284:	e753      	b.n	912e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9286:	2141      	movs	r1, #65	; 0x41
    9288:	a807      	add	r0, sp, #28
    928a:	f7ff fd1f 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    928e:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9290:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9292:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    9294:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9298:	f7f8 fcdc 	bl	1c54 <memset>
	rp->commands[2] |= BIT(7);
    929c:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    929e:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    92a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    92a4:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    92a6:	79a3      	ldrb	r3, [r4, #6]
    92a8:	f063 033f 	orn	r3, r3, #63	; 0x3f
    92ac:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    92ae:	7ae3      	ldrb	r3, [r4, #11]
    92b0:	f043 0304 	orr.w	r3, r3, #4
    92b4:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    92b6:	7be3      	ldrb	r3, [r4, #15]
    92b8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    92bc:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    92be:	7c23      	ldrb	r3, [r4, #16]
    92c0:	f043 0302 	orr.w	r3, r3, #2
    92c4:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    92c6:	7de3      	ldrb	r3, [r4, #23]
    92c8:	f043 0304 	orr.w	r3, r3, #4
    92cc:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    92ce:	7ea3      	ldrb	r3, [r4, #26]
    92d0:	f043 0317 	orr.w	r3, r3, #23
    92d4:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    92d6:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    92d8:	f043 0309 	orr.w	r3, r3, #9
    92dc:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    92de:	7863      	ldrb	r3, [r4, #1]
    92e0:	f043 0320 	orr.w	r3, r3, #32
    92e4:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    92e6:	23ff      	movs	r3, #255	; 0xff
    92e8:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    92ea:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    92ee:	f063 030f 	orn	r3, r3, #15
    92f2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    92f6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    92fa:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    92fe:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    9302:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    9304:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    9308:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    930c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    9310:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    9314:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    9318:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    931c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9320:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    9324:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9328:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    932c:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9330:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    9334:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    9338:	e6f9      	b.n	912e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    933a:	2109      	movs	r1, #9
    933c:	a807      	add	r0, sp, #28
    933e:	f7ff fcc5 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    9342:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9344:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9346:	2208      	movs	r2, #8
	rp->status = 0x00;
    9348:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    934c:	f7f8 fc82 	bl	1c54 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    9350:	2360      	movs	r3, #96	; 0x60
    9352:	7163      	strb	r3, [r4, #5]
    9354:	e6eb      	b.n	912e <hci_cmd_handle+0xe2>
    9356:	bf00      	nop
    9358:	000153a9 	.word	0x000153a9
    935c:	00016765 	.word	0x00016765
    9360:	00017c96 	.word	0x00017c96
    9364:	000167b4 	.word	0x000167b4
    9368:	00017dd9 	.word	0x00017dd9
    936c:	20000830 	.word	0x20000830
    9370:	00017dff 	.word	0x00017dff
    9374:	20000838 	.word	0x20000838
    9378:	20003d30 	.word	0x20003d30
    937c:	200008c0 	.word	0x200008c0
    9380:	20003d38 	.word	0x20003d38
	rp = cmd_complete(evt, sizeof(*rp));
    9384:	2107      	movs	r1, #7
    9386:	a807      	add	r0, sp, #28
    9388:	f7ff fca0 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    938c:	4601      	mov	r1, r0
    938e:	2300      	movs	r3, #0
    9390:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    9394:	4618      	mov	r0, r3
    9396:	f7ff f9b7 	bl	8708 <ll_addr_get>
    939a:	e6c8      	b.n	912e <hci_cmd_handle+0xe2>
	switch (ocf) {
    939c:	3a01      	subs	r2, #1
    939e:	2a4d      	cmp	r2, #77	; 0x4d
    93a0:	f63f ae8b 	bhi.w	90ba <hci_cmd_handle+0x6e>
    93a4:	a301      	add	r3, pc, #4	; (adr r3, 93ac <hci_cmd_handle+0x360>)
    93a6:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    93aa:	bf00      	nop
    93ac:	000094e5 	.word	0x000094e5
    93b0:	000094ef 	.word	0x000094ef
    93b4:	00009507 	.word	0x00009507
    93b8:	000090bb 	.word	0x000090bb
    93bc:	0000952b 	.word	0x0000952b
    93c0:	000090bb 	.word	0x000090bb
    93c4:	000090bb 	.word	0x000090bb
    93c8:	000090bb 	.word	0x000090bb
    93cc:	000090bb 	.word	0x000090bb
    93d0:	000090bb 	.word	0x000090bb
    93d4:	000095f1 	.word	0x000095f1
    93d8:	0000961f 	.word	0x0000961f
    93dc:	0000963f 	.word	0x0000963f
    93e0:	00009669 	.word	0x00009669
    93e4:	00009537 	.word	0x00009537
    93e8:	0000954d 	.word	0x0000954d
    93ec:	0000955f 	.word	0x0000955f
    93f0:	00009567 	.word	0x00009567
    93f4:	00009709 	.word	0x00009709
    93f8:	000096c9 	.word	0x000096c9
    93fc:	000096e5 	.word	0x000096e5
    9400:	000096ff 	.word	0x000096ff
    9404:	0000956f 	.word	0x0000956f
    9408:	00009595 	.word	0x00009595
    940c:	000096d1 	.word	0x000096d1
    9410:	000090bb 	.word	0x000090bb
    9414:	000090bb 	.word	0x000090bb
    9418:	000095ab 	.word	0x000095ab
    941c:	000090bb 	.word	0x000090bb
    9420:	000090bb 	.word	0x000090bb
    9424:	000090bb 	.word	0x000090bb
    9428:	00009723 	.word	0x00009723
    942c:	0000974d 	.word	0x0000974d
    9430:	0000975b 	.word	0x0000975b
    9434:	0000976b 	.word	0x0000976b
    9438:	00009783 	.word	0x00009783
    943c:	000090bb 	.word	0x000090bb
    9440:	000090bb 	.word	0x000090bb
    9444:	000098b1 	.word	0x000098b1
    9448:	000098bf 	.word	0x000098bf
    944c:	000098c7 	.word	0x000098c7
    9450:	000098d7 	.word	0x000098d7
    9454:	000098e9 	.word	0x000098e9
    9458:	00009907 	.word	0x00009907
    945c:	00009925 	.word	0x00009925
    9460:	0000993b 	.word	0x0000993b
    9464:	0000979f 	.word	0x0000979f
    9468:	000097e1 	.word	0x000097e1
    946c:	00009837 	.word	0x00009837
    9470:	00009855 	.word	0x00009855
    9474:	000090bb 	.word	0x000090bb
    9478:	000090bb 	.word	0x000090bb
    947c:	000090bb 	.word	0x000090bb
    9480:	000090bb 	.word	0x000090bb
    9484:	000090bb 	.word	0x000090bb
    9488:	000090bb 	.word	0x000090bb
    948c:	000090bb 	.word	0x000090bb
    9490:	000090bb 	.word	0x000090bb
    9494:	000090bb 	.word	0x000090bb
    9498:	000090bb 	.word	0x000090bb
    949c:	000090bb 	.word	0x000090bb
    94a0:	000090bb 	.word	0x000090bb
    94a4:	000090bb 	.word	0x000090bb
    94a8:	000090bb 	.word	0x000090bb
    94ac:	000090bb 	.word	0x000090bb
    94b0:	000090bb 	.word	0x000090bb
    94b4:	000090bb 	.word	0x000090bb
    94b8:	000090bb 	.word	0x000090bb
    94bc:	000090bb 	.word	0x000090bb
    94c0:	000090bb 	.word	0x000090bb
    94c4:	000090bb 	.word	0x000090bb
    94c8:	000090bb 	.word	0x000090bb
    94cc:	000090bb 	.word	0x000090bb
    94d0:	000090bb 	.word	0x000090bb
    94d4:	0000994f 	.word	0x0000994f
    94d8:	000090bb 	.word	0x000090bb
    94dc:	000090bb 	.word	0x000090bb
    94e0:	00009945 	.word	0x00009945
	le_event_mask = sys_get_le64(cmd->events);
    94e4:	68a0      	ldr	r0, [r4, #8]
    94e6:	f7ff fdad 	bl	9044 <sys_get_le64>
    94ea:	4bb3      	ldr	r3, [pc, #716]	; (97b8 <hci_cmd_handle+0x76c>)
    94ec:	e64f      	b.n	918e <hci_cmd_handle+0x142>
	rp = cmd_complete(evt, sizeof(*rp));
    94ee:	2104      	movs	r1, #4
    94f0:	a807      	add	r0, sp, #28
    94f2:	f7ff fbeb 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    94f6:	2300      	movs	r3, #0
    94f8:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    94fa:	221b      	movs	r2, #27
    94fc:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    94fe:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    9500:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    9502:	70c3      	strb	r3, [r0, #3]
    9504:	e613      	b.n	912e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9506:	2109      	movs	r1, #9
    9508:	a807      	add	r0, sp, #28
    950a:	f7ff fbdf 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    950e:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9510:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9512:	2208      	movs	r2, #8
	rp->status = 0x00;
    9514:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9518:	f7f8 fb9c 	bl	1c54 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    951c:	23ff      	movs	r3, #255	; 0xff
    951e:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    9520:	2341      	movs	r3, #65	; 0x41
    9522:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    9524:	2301      	movs	r3, #1
    9526:	70e3      	strb	r3, [r4, #3]
    9528:	e601      	b.n	912e <hci_cmd_handle+0xe2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    952a:	68a1      	ldr	r1, [r4, #8]
    952c:	2001      	movs	r0, #1
    952e:	f7ff f905 	bl	873c <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    9532:	4604      	mov	r4, r0
    9534:	e0c0      	b.n	96b8 <hci_cmd_handle+0x66c>
	rp = cmd_complete(evt, sizeof(*rp));
    9536:	2102      	movs	r1, #2
    9538:	a807      	add	r0, sp, #28
    953a:	f7ff fbc7 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    953e:	2300      	movs	r3, #0
    9540:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    9542:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    9544:	f008 fd4e 	bl	11fe4 <ll_wl_size_get>
    9548:	7060      	strb	r0, [r4, #1]
    954a:	e5f0      	b.n	912e <hci_cmd_handle+0xe2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    954c:	2101      	movs	r1, #1
    954e:	a807      	add	r0, sp, #28
    9550:	f7ff fbbc 	bl	8ccc <cmd_complete>
    9554:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    9556:	f008 fd47 	bl	11fe8 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    955a:	7020      	strb	r0, [r4, #0]
    955c:	e5e7      	b.n	912e <hci_cmd_handle+0xe2>
	status = ll_wl_add(&cmd->addr);
    955e:	68a0      	ldr	r0, [r4, #8]
    9560:	f008 fdee 	bl	12140 <ll_wl_add>
    9564:	e7e5      	b.n	9532 <hci_cmd_handle+0x4e6>
	status = ll_wl_remove(&cmd->addr);
    9566:	68a0      	ldr	r0, [r4, #8]
    9568:	f008 fd5e 	bl	12028 <ll_wl_remove>
    956c:	e7e1      	b.n	9532 <hci_cmd_handle+0x4e6>
    956e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    9570:	2300      	movs	r3, #0
    9572:	aa08      	add	r2, sp, #32
    9574:	f100 0110 	add.w	r1, r0, #16
    9578:	f009 fa92 	bl	12aa0 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    957c:	2111      	movs	r1, #17
    957e:	a807      	add	r0, sp, #28
    9580:	f7ff fba4 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    9584:	2300      	movs	r3, #0
    9586:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    958a:	2210      	movs	r2, #16
    958c:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    958e:	f7f8 fb35 	bl	1bfc <memcpy>
    9592:	e5cc      	b.n	912e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9594:	2109      	movs	r1, #9
    9596:	a807      	add	r0, sp, #28
    9598:	f7ff fb98 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    959c:	2300      	movs	r3, #0
    959e:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    95a2:	2108      	movs	r1, #8
    95a4:	f7ff f8ea 	bl	877c <bt_rand>
    95a8:	e5c1      	b.n	912e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    95aa:	2109      	movs	r1, #9
    95ac:	a807      	add	r0, sp, #28
    95ae:	f7ff fb8d 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    95b2:	4604      	mov	r4, r0
    95b4:	2300      	movs	r3, #0
    95b6:	f804 3b01 	strb.w	r3, [r4], #1
	rp = cmd_complete(evt, sizeof(*rp));
    95ba:	4606      	mov	r6, r0
    95bc:	f00b f92e 	bl	1481c <_impl_k_current_get>
	BT_DBG("states: 0x%08x%08x", (u32_t)(states >> 32),
    95c0:	4f7e      	ldr	r7, [pc, #504]	; (97bc <hci_cmd_handle+0x770>)
    95c2:	4b7f      	ldr	r3, [pc, #508]	; (97c0 <hci_cmd_handle+0x774>)
    95c4:	9304      	str	r3, [sp, #16]
    95c6:	f240 253f 	movw	r5, #575	; 0x23f
    95ca:	9001      	str	r0, [sp, #4]
    95cc:	9300      	str	r3, [sp, #0]
    95ce:	4a7d      	ldr	r2, [pc, #500]	; (97c4 <hci_cmd_handle+0x778>)
    95d0:	4b7d      	ldr	r3, [pc, #500]	; (97c8 <hci_cmd_handle+0x77c>)
    95d2:	497e      	ldr	r1, [pc, #504]	; (97cc <hci_cmd_handle+0x780>)
    95d4:	9703      	str	r7, [sp, #12]
    95d6:	9502      	str	r5, [sp, #8]
    95d8:	487d      	ldr	r0, [pc, #500]	; (97d0 <hci_cmd_handle+0x784>)
    95da:	f7f7 fcd7 	bl	f8c <printk>
	sys_put_le32(val, dst);
    95de:	4621      	mov	r1, r4
    95e0:	4638      	mov	r0, r7
    95e2:	f7ff fb2f 	bl	8c44 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    95e6:	1d71      	adds	r1, r6, #5
    95e8:	4628      	mov	r0, r5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    95ea:	f7ff fb2b 	bl	8c44 <sys_put_le32>
    95ee:	e59e      	b.n	912e <hci_cmd_handle+0xe2>
    95f0:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    95f2:	7963      	ldrb	r3, [r4, #5]
    95f4:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    95f8:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    95fc:	7820      	ldrb	r0, [r4, #0]
    95fe:	79a4      	ldrb	r4, [r4, #6]
    9600:	9400      	str	r4, [sp, #0]
    9602:	f008 fab3 	bl	11b6c <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    9606:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    9608:	2101      	movs	r1, #1
    960a:	a807      	add	r0, sp, #28
    960c:	f7ff fb5e 	bl	8ccc <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9610:	2c00      	cmp	r4, #0
    9612:	bf18      	it	ne
    9614:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    9616:	bf08      	it	eq
    9618:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    961a:	7003      	strb	r3, [r0, #0]
    961c:	e587      	b.n	912e <hci_cmd_handle+0xe2>
    961e:	68a2      	ldr	r2, [r4, #8]
    9620:	4b6c      	ldr	r3, [pc, #432]	; (97d4 <hci_cmd_handle+0x788>)
	if (cmd->enable && cmd->filter_dup) {
    9622:	7810      	ldrb	r0, [r2, #0]
    9624:	b140      	cbz	r0, 9638 <hci_cmd_handle+0x5ec>
    9626:	7852      	ldrb	r2, [r2, #1]
    9628:	b132      	cbz	r2, 9638 <hci_cmd_handle+0x5ec>
		dup_count = 0;
    962a:	2200      	movs	r2, #0
    962c:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    962e:	4b6a      	ldr	r3, [pc, #424]	; (97d8 <hci_cmd_handle+0x78c>)
		dup_count = -1;
    9630:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    9632:	f008 fabb 	bl	11bac <ll_scan_enable>
    9636:	e7e6      	b.n	9606 <hci_cmd_handle+0x5ba>
		dup_count = -1;
    9638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    963c:	e7f8      	b.n	9630 <hci_cmd_handle+0x5e4>
    963e:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    9640:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    9644:	7963      	ldrb	r3, [r4, #5]
    9646:	7922      	ldrb	r2, [r4, #4]
    9648:	8861      	ldrh	r1, [r4, #2]
    964a:	8820      	ldrh	r0, [r4, #0]
    964c:	9504      	str	r5, [sp, #16]
    964e:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    9652:	9503      	str	r5, [sp, #12]
    9654:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    9658:	9502      	str	r5, [sp, #8]
    965a:	7b25      	ldrb	r5, [r4, #12]
    965c:	9501      	str	r5, [sp, #4]
    965e:	3406      	adds	r4, #6
    9660:	9400      	str	r4, [sp, #0]
    9662:	f008 fadd 	bl	11c20 <ll_create_connection>
    9666:	e55b      	b.n	9120 <hci_cmd_handle+0xd4>
	status = ll_connect_disable();
    9668:	f008 f8f2 	bl	11850 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    966c:	4606      	mov	r6, r0
    966e:	bb48      	cbnz	r0, 96c4 <hci_cmd_handle+0x678>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9670:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9674:	2001      	movs	r0, #1
    9676:	f7fa fdab 	bl	41d0 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    967a:	4a58      	ldr	r2, [pc, #352]	; (97dc <hci_cmd_handle+0x790>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    967c:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    967e:	e9d2 4500 	ldrd	r4, r5, [r2]
    9682:	2400      	movs	r4, #0
    9684:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    9688:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    968c:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    968e:	d004      	beq.n	969a <hci_cmd_handle+0x64e>
    9690:	4632      	mov	r2, r6
    9692:	4631      	mov	r1, r6
    9694:	2002      	movs	r0, #2
    9696:	f7ff fb89 	bl	8dac <le_conn_complete.part.39>
		if ((*evt)->len) {
    969a:	9807      	ldr	r0, [sp, #28]
    969c:	8984      	ldrh	r4, [r0, #12]
    969e:	b14c      	cbz	r4, 96b4 <hci_cmd_handle+0x668>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    96a0:	2101      	movs	r1, #1
    96a2:	a808      	add	r0, sp, #32
    96a4:	f7ff fb12 	bl	8ccc <cmd_complete>
			ccst->status = cmd_status;
    96a8:	2300      	movs	r3, #0
    96aa:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    96ac:	9808      	ldr	r0, [sp, #32]
    96ae:	f7fa fb59 	bl	3d64 <bt_recv_prio>
    96b2:	e53c      	b.n	912e <hci_cmd_handle+0xe2>
			net_buf_unref(*evt);
    96b4:	f00a f82a 	bl	1370c <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    96b8:	2101      	movs	r1, #1
    96ba:	a807      	add	r0, sp, #28
    96bc:	f7ff fb06 	bl	8ccc <cmd_complete>
	ccst->status = status;
    96c0:	7004      	strb	r4, [r0, #0]
    96c2:	e534      	b.n	912e <hci_cmd_handle+0xe2>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    96c4:	240c      	movs	r4, #12
    96c6:	e7f7      	b.n	96b8 <hci_cmd_handle+0x66c>
	status = ll_chm_update(&cmd->ch_map[0]);
    96c8:	68a0      	ldr	r0, [r4, #8]
    96ca:	f007 fc93 	bl	10ff4 <ll_chm_update>
    96ce:	e79a      	b.n	9606 <hci_cmd_handle+0x5ba>
    96d0:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    96d2:	f100 030c 	add.w	r3, r0, #12
    96d6:	f100 020a 	add.w	r2, r0, #10
    96da:	1c81      	adds	r1, r0, #2
    96dc:	8800      	ldrh	r0, [r0, #0]
    96de:	f007 ff3d 	bl	1155c <ll_enc_req_send>
    96e2:	e51d      	b.n	9120 <hci_cmd_handle+0xd4>
	handle = sys_le16_to_cpu(cmd->handle);
    96e4:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    96e6:	2108      	movs	r1, #8
    96e8:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    96ea:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    96ec:	f7ff faee 	bl	8ccc <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    96f0:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    96f2:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    96f4:	1cc1      	adds	r1, r0, #3
    96f6:	4630      	mov	r0, r6
    96f8:	f007 fcbe 	bl	11078 <ll_chm_get>
    96fc:	e564      	b.n	91c8 <hci_cmd_handle+0x17c>
	handle = sys_le16_to_cpu(cmd->handle);
    96fe:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    9700:	8818      	ldrh	r0, [r3, #0]
    9702:	f007 fcce 	bl	110a2 <ll_feature_req_send>
    9706:	e50b      	b.n	9120 <hci_cmd_handle+0xd4>
    9708:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    970a:	8911      	ldrh	r1, [r2, #8]
    970c:	8893      	ldrh	r3, [r2, #4]
    970e:	8810      	ldrh	r0, [r2, #0]
    9710:	9101      	str	r1, [sp, #4]
    9712:	88d2      	ldrh	r2, [r2, #6]
    9714:	9200      	str	r2, [sp, #0]
    9716:	2200      	movs	r2, #0
    9718:	4611      	mov	r1, r2
    971a:	f007 fbf3 	bl	10f04 <ll_conn_update>
	*evt = cmd_status(status);
    971e:	b2c0      	uxtb	r0, r0
    9720:	e502      	b.n	9128 <hci_cmd_handle+0xdc>
    9722:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    9724:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    9726:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    9728:	8893      	ldrh	r3, [r2, #4]
    972a:	9101      	str	r1, [sp, #4]
    972c:	88d2      	ldrh	r2, [r2, #6]
    972e:	9200      	str	r2, [sp, #0]
    9730:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    9732:	2102      	movs	r1, #2
    9734:	b2a0      	uxth	r0, r4
    9736:	f007 fbe5 	bl	10f04 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    973a:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    973c:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    973e:	a807      	add	r0, sp, #28
    9740:	f7ff fac4 	bl	8ccc <cmd_complete>
	rp->status = status;
    9744:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    9746:	f8a0 4001 	strh.w	r4, [r0, #1]
    974a:	e4f0      	b.n	912e <hci_cmd_handle+0xe2>
    974c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    974e:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    9750:	789a      	ldrb	r2, [r3, #2]
    9752:	2300      	movs	r3, #0
    9754:	9301      	str	r3, [sp, #4]
    9756:	9300      	str	r3, [sp, #0]
    9758:	e7eb      	b.n	9732 <hci_cmd_handle+0x6e6>
    975a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    975c:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    975e:	889a      	ldrh	r2, [r3, #4]
    9760:	8859      	ldrh	r1, [r3, #2]
    9762:	b2a0      	uxth	r0, r4
    9764:	f007 fd0d 	bl	11182 <ll_length_req_send>
    9768:	e553      	b.n	9212 <hci_cmd_handle+0x1c6>
	rp = cmd_complete(evt, sizeof(*rp));
    976a:	2105      	movs	r1, #5
    976c:	a807      	add	r0, sp, #28
    976e:	f7ff faad 	bl	8ccc <cmd_complete>
    9772:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    9774:	1cc1      	adds	r1, r0, #3
    9776:	3001      	adds	r0, #1
    9778:	f007 fd26 	bl	111c8 <ll_length_default_get>
	rp->status = 0x00;
    977c:	2300      	movs	r3, #0
    977e:	7023      	strb	r3, [r4, #0]
    9780:	e4d5      	b.n	912e <hci_cmd_handle+0xe2>
    9782:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    9784:	8859      	ldrh	r1, [r3, #2]
    9786:	8818      	ldrh	r0, [r3, #0]
    9788:	f007 fd28 	bl	111dc <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    978c:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    978e:	2101      	movs	r1, #1
    9790:	a807      	add	r0, sp, #28
    9792:	f7ff fa9b 	bl	8ccc <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    9796:	2c00      	cmp	r4, #0
    9798:	bf18      	it	ne
    979a:	231e      	movne	r3, #30
    979c:	e73b      	b.n	9616 <hci_cmd_handle+0x5ca>
	rp = cmd_complete(evt, sizeof(*rp));
    979e:	2109      	movs	r1, #9
    97a0:	a807      	add	r0, sp, #28
    97a2:	f7ff fa93 	bl	8ccc <cmd_complete>
    97a6:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    97a8:	1dc3      	adds	r3, r0, #7
    97aa:	1d42      	adds	r2, r0, #5
    97ac:	1cc1      	adds	r1, r0, #3
    97ae:	3001      	adds	r0, #1
    97b0:	f007 fd1e 	bl	111f0 <ll_length_max_get>
    97b4:	e7e2      	b.n	977c <hci_cmd_handle+0x730>
    97b6:	bf00      	nop
    97b8:	20003d38 	.word	0x20003d38
    97bc:	130f3370 	.word	0x130f3370
    97c0:	000153a9 	.word	0x000153a9
    97c4:	000167ad 	.word	0x000167ad
    97c8:	00017c82 	.word	0x00017c82
    97cc:	000167b4 	.word	0x000167b4
    97d0:	00017e2d 	.word	0x00017e2d
    97d4:	20000838 	.word	0x20000838
    97d8:	2000083c 	.word	0x2000083c
    97dc:	20003d30 	.word	0x20003d30
	handle = sys_le16_to_cpu(cmd->handle);
    97e0:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    97e2:	2105      	movs	r1, #5
    97e4:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    97e6:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    97e8:	f7ff fa70 	bl	8ccc <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    97ec:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    97ee:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    97f0:	1d02      	adds	r2, r0, #4
    97f2:	1cc1      	adds	r1, r0, #3
    97f4:	4630      	mov	r0, r6
    97f6:	f007 fd04 	bl	11202 <ll_phy_get>
	return __builtin_ffs(op);
    97fa:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    97fc:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9800:	2800      	cmp	r0, #0
    9802:	bf14      	ite	ne
    9804:	230c      	movne	r3, #12
    9806:	2300      	moveq	r3, #0
    9808:	7023      	strb	r3, [r4, #0]
    980a:	2a00      	cmp	r2, #0
    980c:	fa92 f3a2 	rbit	r3, r2
    9810:	fab3 f383 	clz	r3, r3
    9814:	7922      	ldrb	r2, [r4, #4]
    9816:	bf08      	it	eq
    9818:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    981c:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    981e:	70e3      	strb	r3, [r4, #3]
    9820:	2a00      	cmp	r2, #0
    9822:	fa92 f3a2 	rbit	r3, r2
    9826:	fab3 f383 	clz	r3, r3
    982a:	bf08      	it	eq
    982c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9830:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    9832:	7123      	strb	r3, [r4, #4]
    9834:	e47b      	b.n	912e <hci_cmd_handle+0xe2>
    9836:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9838:	781a      	ldrb	r2, [r3, #0]
    983a:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    983c:	bf44      	itt	mi
    983e:	2107      	movmi	r1, #7
    9840:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    9842:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    9844:	bf44      	itt	mi
    9846:	2207      	movmi	r2, #7
    9848:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    984a:	7899      	ldrb	r1, [r3, #2]
    984c:	7858      	ldrb	r0, [r3, #1]
    984e:	f007 fced 	bl	1122c <ll_phy_default_set>
    9852:	e79b      	b.n	978c <hci_cmd_handle+0x740>
    9854:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9856:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    9858:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    985a:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    985e:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    9860:	bf44      	itt	mi
    9862:	2103      	movmi	r1, #3
    9864:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    9866:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    9868:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    986a:	bf44      	itt	mi
    986c:	2203      	movmi	r2, #3
    986e:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    9870:	074d      	lsls	r5, r1, #29
    9872:	d002      	beq.n	987a <hci_cmd_handle+0x82e>
	    !(cmd->rx_phys & 0x07)) {
    9874:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    9876:	075a      	lsls	r2, r3, #29
    9878:	d105      	bne.n	9886 <hci_cmd_handle+0x83a>
		ccst = cmd_complete(evt, sizeof(*ccst));
    987a:	2101      	movs	r1, #1
    987c:	a807      	add	r0, sp, #28
    987e:	f7ff fa25 	bl	8ccc <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    9882:	2312      	movs	r3, #18
    9884:	e6c9      	b.n	961a <hci_cmd_handle+0x5ce>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    9886:	ea41 0203 	orr.w	r2, r1, r3
    988a:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    988e:	d005      	beq.n	989c <hci_cmd_handle+0x850>
		ccst = cmd_complete(evt, sizeof(*ccst));
    9890:	2101      	movs	r1, #1
    9892:	a807      	add	r0, sp, #28
    9894:	f7ff fa1a 	bl	8ccc <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    9898:	2311      	movs	r3, #17
    989a:	e6be      	b.n	961a <hci_cmd_handle+0x5ce>
	if (phy_opts & 0x03) {
    989c:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    98a0:	bf1c      	itt	ne
    98a2:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    98a6:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    98aa:	f007 fcc9 	bl	11240 <ll_phy_req_send>
    98ae:	e437      	b.n	9120 <hci_cmd_handle+0xd4>
    98b0:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    98b2:	f100 0217 	add.w	r2, r0, #23
    98b6:	1dc1      	adds	r1, r0, #7
    98b8:	f008 fe82 	bl	125c0 <ll_rl_add>
    98bc:	e639      	b.n	9532 <hci_cmd_handle+0x4e6>
	status = ll_rl_remove(&cmd->peer_id_addr);
    98be:	68a0      	ldr	r0, [r4, #8]
    98c0:	f008 ff20 	bl	12704 <ll_rl_remove>
    98c4:	e635      	b.n	9532 <hci_cmd_handle+0x4e6>
	ccst = cmd_complete(evt, sizeof(*ccst));
    98c6:	2101      	movs	r1, #1
    98c8:	a807      	add	r0, sp, #28
    98ca:	f7ff f9ff 	bl	8ccc <cmd_complete>
    98ce:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    98d0:	f008 fe5c 	bl	1258c <ll_rl_clear>
    98d4:	e641      	b.n	955a <hci_cmd_handle+0x50e>
	rp = cmd_complete(evt, sizeof(*rp));
    98d6:	2102      	movs	r1, #2
    98d8:	a807      	add	r0, sp, #28
    98da:	f7ff f9f7 	bl	8ccc <cmd_complete>
    98de:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    98e0:	f008 fe52 	bl	12588 <ll_rl_size_get>
    98e4:	7060      	strb	r0, [r4, #1]
    98e6:	e749      	b.n	977c <hci_cmd_handle+0x730>
    98e8:	2207      	movs	r2, #7
    98ea:	68a1      	ldr	r1, [r4, #8]
    98ec:	a808      	add	r0, sp, #32
    98ee:	f7f8 f985 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    98f2:	2107      	movs	r1, #7
    98f4:	a807      	add	r0, sp, #28
    98f6:	f7ff f9e9 	bl	8ccc <cmd_complete>
    98fa:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    98fc:	1c41      	adds	r1, r0, #1
    98fe:	a808      	add	r0, sp, #32
    9900:	f008 ff8e 	bl	12820 <ll_rl_crpa_get>
    9904:	e629      	b.n	955a <hci_cmd_handle+0x50e>
    9906:	2207      	movs	r2, #7
    9908:	68a1      	ldr	r1, [r4, #8]
    990a:	a808      	add	r0, sp, #32
    990c:	f7f8 f976 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    9910:	2107      	movs	r1, #7
    9912:	a807      	add	r0, sp, #28
    9914:	f7ff f9da 	bl	8ccc <cmd_complete>
    9918:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    991a:	1c41      	adds	r1, r0, #1
    991c:	a808      	add	r0, sp, #32
    991e:	f008 ff9f 	bl	12860 <ll_rl_lrpa_get>
    9922:	e61a      	b.n	955a <hci_cmd_handle+0x50e>
	u8_t enable = cmd->enable;
    9924:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    9926:	2101      	movs	r1, #1
    9928:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    992a:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    992c:	f7ff f9ce 	bl	8ccc <cmd_complete>
    9930:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    9932:	4628      	mov	r0, r5
    9934:	f008 ffac 	bl	12890 <ll_rl_enable>
    9938:	e60f      	b.n	955a <hci_cmd_handle+0x50e>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    993a:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    993c:	8818      	ldrh	r0, [r3, #0]
    993e:	f008 ffb9 	bl	128b4 <ll_rl_timeout_set>
    9942:	e414      	b.n	916e <hci_cmd_handle+0x122>
    9944:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    9946:	79c1      	ldrb	r1, [r0, #7]
    9948:	f008 ffbc 	bl	128c4 <ll_priv_mode_set>
    994c:	e5f1      	b.n	9532 <hci_cmd_handle+0x4e6>
	rp = cmd_complete(evt, sizeof(*rp));
    994e:	2103      	movs	r1, #3
    9950:	a807      	add	r0, sp, #28
    9952:	f7ff f9bb 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    9956:	4601      	mov	r1, r0
    9958:	2300      	movs	r3, #0
    995a:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    995e:	3001      	adds	r0, #1
    9960:	f7fe ff08 	bl	8774 <ll_tx_pwr_get>
    9964:	f7ff bbe3 	b.w	912e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9968:	210d      	movs	r1, #13
    996a:	a807      	add	r0, sp, #28
    996c:	f7ff f9ae 	bl	8ccc <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    9970:	2202      	movs	r2, #2
    9972:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    9974:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    9976:	2201      	movs	r2, #1
    9978:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    997a:	220c      	movs	r2, #12
	rp->status = 0x00;
    997c:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    997e:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    9980:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    9982:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    9984:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    9986:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    9988:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    998a:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    998c:	7242      	strb	r2, [r0, #9]
    998e:	7283      	strb	r3, [r0, #10]
    9990:	72c3      	strb	r3, [r0, #11]
    9992:	7303      	strb	r3, [r0, #12]
    9994:	f7ff bbcb 	b.w	912e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9998:	2141      	movs	r1, #65	; 0x41
    999a:	a807      	add	r0, sp, #28
    999c:	f7ff f996 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    99a0:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    99a2:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    99a4:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    99a6:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    99aa:	f7f8 f953 	bl	1c54 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    99ae:	7863      	ldrb	r3, [r4, #1]
    99b0:	f063 0358 	orn	r3, r3, #88	; 0x58
    99b4:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    99b6:	78a3      	ldrb	r3, [r4, #2]
    99b8:	f043 0303 	orr.w	r3, r3, #3
    99bc:	70a3      	strb	r3, [r4, #2]
    99be:	f7ff bbb6 	b.w	912e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    99c2:	2109      	movs	r1, #9
    99c4:	a807      	add	r0, sp, #28
    99c6:	f7ff f981 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    99ca:	2100      	movs	r1, #0
    99cc:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    99d0:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    99d2:	f7f8 f93f 	bl	1c54 <memset>
    99d6:	f7ff bbaa 	b.w	912e <hci_cmd_handle+0xe2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    99da:	4b5c      	ldr	r3, [pc, #368]	; (9b4c <hci_cmd_handle+0xb00>)
    99dc:	aa08      	add	r2, sp, #32
    99de:	f103 0628 	add.w	r6, r3, #40	; 0x28
    99e2:	4615      	mov	r5, r2
    99e4:	6818      	ldr	r0, [r3, #0]
    99e6:	6859      	ldr	r1, [r3, #4]
    99e8:	4614      	mov	r4, r2
    99ea:	c403      	stmia	r4!, {r0, r1}
    99ec:	3308      	adds	r3, #8
    99ee:	42b3      	cmp	r3, r6
    99f0:	4622      	mov	r2, r4
    99f2:	d1f7      	bne.n	99e4 <hci_cmd_handle+0x998>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    99f4:	2129      	movs	r1, #41	; 0x29
    99f6:	a807      	add	r0, sp, #28
    99f8:	f7ff f968 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    99fc:	2300      	movs	r3, #0
    99fe:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    9a02:	2228      	movs	r2, #40	; 0x28
    9a04:	4629      	mov	r1, r5
    9a06:	e5c2      	b.n	958e <hci_cmd_handle+0x542>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    9a08:	68a1      	ldr	r1, [r4, #8]
    9a0a:	2000      	movs	r0, #0
    9a0c:	f7fe fe96 	bl	873c <ll_addr_set>
    9a10:	f7ff bbad 	b.w	916e <hci_cmd_handle+0x122>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9a18:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    9a1c:	3201      	adds	r2, #1
    9a1e:	d106      	bne.n	9a2e <hci_cmd_handle+0x9e2>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9a20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9a24:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9a28:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9a2a:	4293      	cmp	r3, r2
    9a2c:	d020      	beq.n	9a70 <hci_cmd_handle+0xa24>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    9a2e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    9a32:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9a36:	07db      	lsls	r3, r3, #31
    9a38:	d51a      	bpl.n	9a70 <hci_cmd_handle+0xa24>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    9a3a:	2118      	movs	r1, #24
    9a3c:	a807      	add	r0, sp, #28
    9a3e:	f7ff f945 	bl	8ccc <cmd_complete>
		rp->status = 0x00;
    9a42:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    9a44:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    9a46:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    9a48:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    9a4a:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    9a4c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    9a50:	1ca1      	adds	r1, r4, #2
    9a52:	f7ff f8f7 	bl	8c44 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    9a56:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    9a5a:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    9a5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    9a60:	f063 033f 	orn	r3, r3, #63	; 0x3f
    9a64:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    9a66:	2210      	movs	r2, #16
    9a68:	4631      	mov	r1, r6
    9a6a:	f104 0008 	add.w	r0, r4, #8
    9a6e:	e7b0      	b.n	99d2 <hci_cmd_handle+0x986>
	rp = cmd_complete(evt, sizeof(*rp));
    9a70:	2102      	movs	r1, #2
    9a72:	a807      	add	r0, sp, #28
    9a74:	f7ff f92a 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    9a78:	2300      	movs	r3, #0
    9a7a:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    9a7c:	7043      	strb	r3, [r0, #1]
    9a7e:	f7ff bb56 	b.w	912e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9a82:	2121      	movs	r1, #33	; 0x21
    9a84:	a807      	add	r0, sp, #28
    9a86:	f7ff f921 	bl	8ccc <cmd_complete>
	rp->status = 0x00;
    9a8a:	4603      	mov	r3, r0
    9a8c:	2200      	movs	r2, #0
    9a8e:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    9a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    9a96:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    9a98:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    9a9c:	3101      	adds	r1, #1
    9a9e:	d04b      	beq.n	9b38 <hci_cmd_handle+0xaec>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    9aa0:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    9aa4:	3101      	adds	r1, #1
    9aa6:	d047      	beq.n	9b38 <hci_cmd_handle+0xaec>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    9aa8:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    9aac:	3101      	adds	r1, #1
    9aae:	d043      	beq.n	9b38 <hci_cmd_handle+0xaec>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    9ab0:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    9ab4:	3101      	adds	r1, #1
    9ab6:	d03f      	beq.n	9b38 <hci_cmd_handle+0xaec>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    9ab8:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    9abc:	4619      	mov	r1, r3
    9abe:	f7ff f8c1 	bl	8c44 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    9ac2:	1d61      	adds	r1, r4, #5
    9ac4:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    9ac8:	f7ff f8bc 	bl	8c44 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    9acc:	f104 0109 	add.w	r1, r4, #9
    9ad0:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    9ad4:	f7ff f8b6 	bl	8c44 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    9ad8:	f104 010d 	add.w	r1, r4, #13
    9adc:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    9ae0:	f7ff f8b0 	bl	8c44 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9ae8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    9aec:	3301      	adds	r3, #1
    9aee:	f104 0311 	add.w	r3, r4, #17
    9af2:	d027      	beq.n	9b44 <hci_cmd_handle+0xaf8>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    9af4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9af8:	3101      	adds	r1, #1
    9afa:	d023      	beq.n	9b44 <hci_cmd_handle+0xaf8>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9afc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    9b00:	3101      	adds	r1, #1
    9b02:	d01f      	beq.n	9b44 <hci_cmd_handle+0xaf8>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    9b04:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9b08:	3101      	adds	r1, #1
    9b0a:	d01b      	beq.n	9b44 <hci_cmd_handle+0xaf8>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    9b0c:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    9b10:	4619      	mov	r1, r3
    9b12:	f7ff f897 	bl	8c44 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    9b16:	f104 0115 	add.w	r1, r4, #21
    9b1a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    9b1e:	f7ff f891 	bl	8c44 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    9b22:	f104 0119 	add.w	r1, r4, #25
    9b26:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    9b2a:	f7ff f88b 	bl	8c44 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    9b2e:	f104 011d 	add.w	r1, r4, #29
    9b32:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    9b36:	e558      	b.n	95ea <hci_cmd_handle+0x59e>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    9b38:	2210      	movs	r2, #16
    9b3a:	2100      	movs	r1, #0
    9b3c:	4618      	mov	r0, r3
    9b3e:	f7f8 f889 	bl	1c54 <memset>
    9b42:	e7cf      	b.n	9ae4 <hci_cmd_handle+0xa98>
		memset(rp->er, 0x00, sizeof(rp->er));
    9b44:	2210      	movs	r2, #16
    9b46:	2100      	movs	r1, #0
    9b48:	4618      	mov	r0, r3
    9b4a:	e742      	b.n	99d2 <hci_cmd_handle+0x986>
    9b4c:	00017e55 	.word	0x00017e55

00009b50 <hci_acl_handle>:
{
    9b50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    9b54:	2300      	movs	r3, #0
    9b56:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    9b58:	8983      	ldrh	r3, [r0, #12]
    9b5a:	2b03      	cmp	r3, #3
{
    9b5c:	4606      	mov	r6, r0
    9b5e:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    9b60:	d80d      	bhi.n	9b7e <hci_acl_handle+0x2e>
		BT_ERR("No HCI ACL header");
    9b62:	4b3a      	ldr	r3, [pc, #232]	; (9c4c <hci_acl_handle+0xfc>)
    9b64:	9301      	str	r3, [sp, #4]
    9b66:	9300      	str	r3, [sp, #0]
    9b68:	4a39      	ldr	r2, [pc, #228]	; (9c50 <hci_acl_handle+0x100>)
    9b6a:	4b3a      	ldr	r3, [pc, #232]	; (9c54 <hci_acl_handle+0x104>)
    9b6c:	493a      	ldr	r1, [pc, #232]	; (9c58 <hci_acl_handle+0x108>)
    9b6e:	483b      	ldr	r0, [pc, #236]	; (9c5c <hci_acl_handle+0x10c>)
		BT_ERR("Invalid HCI ACL packet length");
    9b70:	f7f7 fa0c 	bl	f8c <printk>
		return -EINVAL;
    9b74:	f06f 0015 	mvn.w	r0, #21
}
    9b78:	b003      	add	sp, #12
    9b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    9b7e:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    9b82:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    9b84:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    9b86:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    9b88:	f009 fe20 	bl	137cc <net_buf_simple_pull>
	if (buf->len < len) {
    9b8c:	89b3      	ldrh	r3, [r6, #12]
    9b8e:	42bb      	cmp	r3, r7
    9b90:	d207      	bcs.n	9ba2 <hci_acl_handle+0x52>
		BT_ERR("Invalid HCI ACL packet length");
    9b92:	4b2e      	ldr	r3, [pc, #184]	; (9c4c <hci_acl_handle+0xfc>)
    9b94:	9301      	str	r3, [sp, #4]
    9b96:	9300      	str	r3, [sp, #0]
    9b98:	4a2d      	ldr	r2, [pc, #180]	; (9c50 <hci_acl_handle+0x100>)
    9b9a:	4b2e      	ldr	r3, [pc, #184]	; (9c54 <hci_acl_handle+0x104>)
    9b9c:	492e      	ldr	r1, [pc, #184]	; (9c58 <hci_acl_handle+0x108>)
    9b9e:	4830      	ldr	r0, [pc, #192]	; (9c60 <hci_acl_handle+0x110>)
    9ba0:	e7e6      	b.n	9b70 <hci_acl_handle+0x20>
	node_tx = ll_tx_mem_acquire();
    9ba2:	f007 fc57 	bl	11454 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    9ba6:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    9baa:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    9bac:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    9bb0:	bb30      	cbnz	r0, 9c00 <hci_acl_handle+0xb0>
		BT_ERR("Tx Buffer Overflow");
    9bb2:	4b26      	ldr	r3, [pc, #152]	; (9c4c <hci_acl_handle+0xfc>)
    9bb4:	9301      	str	r3, [sp, #4]
    9bb6:	9300      	str	r3, [sp, #0]
    9bb8:	4a25      	ldr	r2, [pc, #148]	; (9c50 <hci_acl_handle+0x100>)
    9bba:	4b26      	ldr	r3, [pc, #152]	; (9c54 <hci_acl_handle+0x104>)
    9bbc:	4926      	ldr	r1, [pc, #152]	; (9c58 <hci_acl_handle+0x108>)
    9bbe:	4829      	ldr	r0, [pc, #164]	; (9c64 <hci_acl_handle+0x114>)
    9bc0:	f7f7 f9e4 	bl	f8c <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    9bc4:	4b28      	ldr	r3, [pc, #160]	; (9c68 <hci_acl_handle+0x118>)
    9bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bca:	2300      	movs	r3, #0
    9bcc:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    9bd0:	4313      	orrs	r3, r2
    9bd2:	d012      	beq.n	9bfa <hci_acl_handle+0xaa>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9bd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9bd8:	2001      	movs	r0, #1
    9bda:	f7fa faf9 	bl	41d0 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    9bde:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9be0:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    9be4:	211a      	movs	r1, #26
    9be6:	f7ff f836 	bl	8c56 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    9bea:	f8d8 0000 	ldr.w	r0, [r8]
    9bee:	2101      	movs	r1, #1
    9bf0:	3008      	adds	r0, #8
    9bf2:	f009 fdbd 	bl	13770 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    9bf6:	2301      	movs	r3, #1
    9bf8:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    9bfa:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9bfe:	e7bb      	b.n	9b78 <hci_acl_handle+0x28>
    9c00:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    9c02:	f1b9 0f00 	cmp.w	r9, #0
    9c06:	d002      	beq.n	9c0e <hci_acl_handle+0xbe>
    9c08:	f1b9 0f02 	cmp.w	r9, #2
    9c0c:	d11c      	bne.n	9c48 <hci_acl_handle+0xf8>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    9c0e:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9c10:	f362 0301 	bfi	r3, r2, #0, #2
    9c14:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    9c16:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    9c18:	68b1      	ldr	r1, [r6, #8]
    9c1a:	463a      	mov	r2, r7
    9c1c:	1de0      	adds	r0, r4, #7
    9c1e:	f7f7 ffed 	bl	1bfc <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    9c22:	4621      	mov	r1, r4
    9c24:	4628      	mov	r0, r5
    9c26:	f007 fc21 	bl	1146c <ll_tx_mem_enqueue>
    9c2a:	2800      	cmp	r0, #0
    9c2c:	d0a4      	beq.n	9b78 <hci_acl_handle+0x28>
		BT_ERR("Invalid Tx Enqueue");
    9c2e:	4b07      	ldr	r3, [pc, #28]	; (9c4c <hci_acl_handle+0xfc>)
    9c30:	9301      	str	r3, [sp, #4]
    9c32:	9300      	str	r3, [sp, #0]
    9c34:	4a06      	ldr	r2, [pc, #24]	; (9c50 <hci_acl_handle+0x100>)
    9c36:	4b07      	ldr	r3, [pc, #28]	; (9c54 <hci_acl_handle+0x104>)
    9c38:	4907      	ldr	r1, [pc, #28]	; (9c58 <hci_acl_handle+0x108>)
    9c3a:	480c      	ldr	r0, [pc, #48]	; (9c6c <hci_acl_handle+0x11c>)
    9c3c:	f7f7 f9a6 	bl	f8c <printk>
		ll_tx_mem_release(node_tx);
    9c40:	4620      	mov	r0, r4
    9c42:	f007 fc0d 	bl	11460 <ll_tx_mem_release>
    9c46:	e795      	b.n	9b74 <hci_acl_handle+0x24>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9c48:	2201      	movs	r2, #1
    9c4a:	e7e1      	b.n	9c10 <hci_acl_handle+0xc0>
    9c4c:	000153a9 	.word	0x000153a9
    9c50:	00016765 	.word	0x00016765
    9c54:	00017ca5 	.word	0x00017ca5
    9c58:	000167b4 	.word	0x000167b4
    9c5c:	00017d43 	.word	0x00017d43
    9c60:	00017d65 	.word	0x00017d65
    9c64:	00017d93 	.word	0x00017d93
    9c68:	20003d30 	.word	0x20003d30
    9c6c:	00017db6 	.word	0x00017db6

00009c70 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    9c70:	7a03      	ldrb	r3, [r0, #8]
    9c72:	f003 0303 	and.w	r3, r3, #3
    9c76:	3b01      	subs	r3, #1
    9c78:	2b01      	cmp	r3, #1
{
    9c7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9c7c:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    9c7e:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    9c80:	d81c      	bhi.n	9cbc <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    9c82:	f101 0608 	add.w	r6, r1, #8
    9c86:	4630      	mov	r0, r6
    9c88:	2104      	movs	r1, #4
    9c8a:	f009 fd71 	bl	13770 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    9c8e:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    9c90:	7a61      	ldrb	r1, [r4, #9]
    9c92:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    9c94:	f003 0303 	and.w	r3, r3, #3
    9c98:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    9c9a:	bf0c      	ite	eq
    9c9c:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    9ca0:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    9ca4:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    9ca6:	4630      	mov	r0, r6
    9ca8:	f009 fd62 	bl	13770 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    9cac:	7a62      	ldrb	r2, [r4, #9]
    9cae:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    9cb2:	b002      	add	sp, #8
    9cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    9cb8:	f7f7 bfa0 	b.w	1bfc <memcpy>
		LL_ASSERT(0);
    9cbc:	4b07      	ldr	r3, [pc, #28]	; (9cdc <hci_acl_encode+0x6c>)
    9cbe:	9301      	str	r3, [sp, #4]
    9cc0:	9300      	str	r3, [sp, #0]
    9cc2:	4a07      	ldr	r2, [pc, #28]	; (9ce0 <hci_acl_encode+0x70>)
    9cc4:	4b07      	ldr	r3, [pc, #28]	; (9ce4 <hci_acl_encode+0x74>)
    9cc6:	4908      	ldr	r1, [pc, #32]	; (9ce8 <hci_acl_encode+0x78>)
    9cc8:	4808      	ldr	r0, [pc, #32]	; (9cec <hci_acl_encode+0x7c>)
    9cca:	f7f7 f95f 	bl	f8c <printk>
    9cce:	4040      	eors	r0, r0
    9cd0:	f380 8811 	msr	BASEPRI, r0
    9cd4:	f04f 0004 	mov.w	r0, #4
    9cd8:	df02      	svc	2
    9cda:	bf00      	nop
    9cdc:	000153a9 	.word	0x000153a9
    9ce0:	00016765 	.word	0x00016765
    9ce4:	00017d34 	.word	0x00017d34
    9ce8:	000167b4 	.word	0x000167b4
    9cec:	000166d9 	.word	0x000166d9

00009cf0 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    9cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9cf4:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    9cf6:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9cf8:	2b01      	cmp	r3, #1
{
    9cfa:	b093      	sub	sp, #76	; 0x4c
    9cfc:	4604      	mov	r4, r0
    9cfe:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    9d00:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9d04:	f000 82a6 	beq.w	a254 <hci_evt_encode+0x564>
	switch (node_rx->hdr.type) {
    9d08:	3b02      	subs	r3, #2
    9d0a:	2b0a      	cmp	r3, #10
    9d0c:	f200 829a 	bhi.w	a244 <hci_evt_encode+0x554>
    9d10:	e8df f013 	tbh	[pc, r3, lsl #1]
    9d14:	0134000b 	.word	0x0134000b
    9d18:	013c013a 	.word	0x013c013a
    9d1c:	01ba0183 	.word	0x01ba0183
    9d20:	01fd01d8 	.word	0x01fd01d8
    9d24:	022a0215 	.word	0x022a0215
    9d28:	0245      	.short	0x0245
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9d2a:	2301      	movs	r3, #1
    9d2c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    9d30:	2303      	movs	r3, #3
    9d32:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    9d36:	23ff      	movs	r3, #255	; 0xff
    9d38:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    9d3c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    9d40:	2302      	movs	r3, #2
    9d42:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9d46:	7a43      	ldrb	r3, [r0, #9]
    9d48:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9d4a:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9d4c:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    9d50:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9d52:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    9d56:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    9d58:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9d5a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (adv->tx_addr) {
    9d5e:	d505      	bpl.n	9d6c <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    9d60:	f104 030a 	add.w	r3, r4, #10
    9d64:	464a      	mov	r2, r9
    9d66:	4608      	mov	r0, r1
    9d68:	f008 fd38 	bl	127dc <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    9d6c:	4bb8      	ldr	r3, [pc, #736]	; (a050 <hci_evt_encode+0x360>)
    9d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d72:	2200      	movs	r2, #0
    9d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9d78:	4313      	orrs	r3, r2
    9d7a:	f000 80b9 	beq.w	9ef0 <hci_evt_encode+0x200>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9d7e:	7a63      	ldrb	r3, [r4, #9]
    9d80:	4423      	add	r3, r4
    9d82:	f893 a00c 	ldrb.w	sl, [r3, #12]
    9d86:	4bb3      	ldr	r3, [pc, #716]	; (a054 <hci_evt_encode+0x364>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    9d88:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d8c:	f1ba 0f00 	cmp.w	sl, #0
    9d90:	d13d      	bne.n	9e0e <hci_evt_encode+0x11e>
    9d92:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    9d96:	2300      	movs	r3, #0
    9d98:	4313      	orrs	r3, r2
    9d9a:	f000 80a9 	beq.w	9ef0 <hci_evt_encode+0x200>
	if (dup_count >= 0) {
    9d9e:	4bae      	ldr	r3, [pc, #696]	; (a058 <hci_evt_encode+0x368>)
    9da0:	681a      	ldr	r2, [r3, #0]
    9da2:	2a00      	cmp	r2, #0
    9da4:	4698      	mov	r8, r3
    9da6:	db54      	blt.n	9e52 <hci_evt_encode+0x162>
    9da8:	f8df b2d8 	ldr.w	fp, [pc, #728]	; a084 <hci_evt_encode+0x394>
    9dac:	2600      	movs	r6, #0
    9dae:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    9db2:	f8d8 2000 	ldr.w	r2, [r8]
    9db6:	4296      	cmp	r6, r2
    9db8:	db2c      	blt.n	9e14 <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    9dba:	4ea8      	ldr	r6, [pc, #672]	; (a05c <hci_evt_encode+0x36c>)
    9dbc:	f8df b2a0 	ldr.w	fp, [pc, #672]	; a060 <hci_evt_encode+0x370>
    9dc0:	6830      	ldr	r0, [r6, #0]
    9dc2:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    9dc6:	4619      	mov	r1, r3
    9dc8:	2206      	movs	r2, #6
    9dca:	3002      	adds	r0, #2
    9dcc:	f7f7 ff16 	bl	1bfc <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    9dd0:	6832      	ldr	r2, [r6, #0]
    9dd2:	7a23      	ldrb	r3, [r4, #8]
    9dd4:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    9dd8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9ddc:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    9dde:	7a23      	ldrb	r3, [r4, #8]
    9de0:	f003 010f 	and.w	r1, r3, #15
    9de4:	2301      	movs	r3, #1
    9de6:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9de8:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    9dec:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9df0:	290f      	cmp	r1, #15
			dup_count++;
    9df2:	bfd5      	itete	le
    9df4:	3101      	addle	r1, #1
			dup_curr++;
    9df6:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    9df8:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    9dfa:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9dfc:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    9dfe:	bfd8      	it	le
    9e00:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9e04:	2a10      	cmp	r2, #16
    9e06:	d124      	bne.n	9e52 <hci_evt_encode+0x162>
			dup_curr = 0;
    9e08:	2200      	movs	r2, #0
    9e0a:	6032      	str	r2, [r6, #0]
    9e0c:	e021      	b.n	9e52 <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    9e0e:	f002 020b 	and.w	r2, r2, #11
    9e12:	e7c0      	b.n	9d96 <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    9e14:	4618      	mov	r0, r3
    9e16:	2206      	movs	r2, #6
    9e18:	4659      	mov	r1, fp
    9e1a:	9307      	str	r3, [sp, #28]
    9e1c:	f7f7 fed9 	bl	1bd2 <memcmp>
    9e20:	9b07      	ldr	r3, [sp, #28]
    9e22:	bb00      	cbnz	r0, 9e66 <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    9e24:	7a21      	ldrb	r1, [r4, #8]
    9e26:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    9e2a:	460a      	mov	r2, r1
    9e2c:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    9e30:	4281      	cmp	r1, r0
    9e32:	d118      	bne.n	9e66 <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    9e34:	488a      	ldr	r0, [pc, #552]	; (a060 <hci_evt_encode+0x370>)
    9e36:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    9e3a:	f002 020f 	and.w	r2, r2, #15
    9e3e:	fa23 f102 	lsr.w	r1, r3, r2
    9e42:	07c9      	lsls	r1, r1, #31
    9e44:	d454      	bmi.n	9ef0 <hci_evt_encode+0x200>
				dup_filter[i].mask |= BIT(adv->type);
    9e46:	2101      	movs	r1, #1
    9e48:	fa01 f202 	lsl.w	r2, r1, r2
    9e4c:	4313      	orrs	r3, r2
    9e4e:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    9e52:	f894 b008 	ldrb.w	fp, [r4, #8]
    9e56:	7a63      	ldrb	r3, [r4, #9]
    9e58:	f00b 0b0f 	and.w	fp, fp, #15
    9e5c:	f1bb 0f01 	cmp.w	fp, #1
    9e60:	d105      	bne.n	9e6e <hci_evt_encode+0x17e>
		data_len = 0;
    9e62:	2600      	movs	r6, #0
    9e64:	e005      	b.n	9e72 <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    9e66:	3601      	adds	r6, #1
    9e68:	f10b 0b08 	add.w	fp, fp, #8
    9e6c:	e7a1      	b.n	9db2 <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    9e6e:	1f9e      	subs	r6, r3, #6
    9e70:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9e72:	4423      	add	r3, r4
    9e74:	f893 800a 	ldrb.w	r8, [r3, #10]
    9e78:	f1c8 0800 	rsb	r8, r8, #0
    9e7c:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    9e80:	f1ba 0f00 	cmp.w	sl, #0
    9e84:	d041      	beq.n	9f0a <hci_evt_encode+0x21a>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    9e86:	f1bb 0f01 	cmp.w	fp, #1
    9e8a:	d00e      	beq.n	9eaa <hci_evt_encode+0x1ba>
    9e8c:	4b75      	ldr	r3, [pc, #468]	; (a064 <hci_evt_encode+0x374>)
    9e8e:	9301      	str	r3, [sp, #4]
    9e90:	9300      	str	r3, [sp, #0]
    9e92:	4a75      	ldr	r2, [pc, #468]	; (a068 <hci_evt_encode+0x378>)
    9e94:	4b75      	ldr	r3, [pc, #468]	; (a06c <hci_evt_encode+0x37c>)
    9e96:	4976      	ldr	r1, [pc, #472]	; (a070 <hci_evt_encode+0x380>)
    9e98:	4876      	ldr	r0, [pc, #472]	; (a074 <hci_evt_encode+0x384>)
		LL_ASSERT(0);
    9e9a:	f7f7 f877 	bl	f8c <printk>
    9e9e:	4040      	eors	r0, r0
    9ea0:	f380 8811 	msr	BASEPRI, r0
    9ea4:	f04f 0004 	mov.w	r0, #4
    9ea8:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    9eaa:	2211      	movs	r2, #17
    9eac:	210b      	movs	r1, #11
    9eae:	4628      	mov	r0, r5
    9eb0:	f7fe fef6 	bl	8ca0 <meta_evt>
		drp->num_reports = 1;
    9eb4:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    9eb8:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    9ebc:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    9ebe:	f008 fb63 	bl	12588 <ll_rl_size_get>
    9ec2:	4581      	cmp	r9, r0
    9ec4:	f105 0003 	add.w	r0, r5, #3
    9ec8:	d215      	bcs.n	9ef6 <hci_evt_encode+0x206>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    9eca:	4602      	mov	r2, r0
    9ecc:	1ca9      	adds	r1, r5, #2
    9ece:	4648      	mov	r0, r9
    9ed0:	f008 f9c2 	bl	12258 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    9ed4:	78ab      	ldrb	r3, [r5, #2]
    9ed6:	3302      	adds	r3, #2
    9ed8:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    9eda:	2301      	movs	r3, #1
    9edc:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    9ede:	2206      	movs	r2, #6
    9ee0:	f107 0108 	add.w	r1, r7, #8
    9ee4:	f105 000a 	add.w	r0, r5, #10
    9ee8:	f7f7 fe88 	bl	1bfc <memcpy>
		dir_info->rssi = rssi;
    9eec:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    9ef0:	b013      	add	sp, #76	; 0x4c
    9ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    9ef6:	7a23      	ldrb	r3, [r4, #8]
    9ef8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9efc:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    9efe:	2206      	movs	r2, #6
    9f00:	f104 010a 	add.w	r1, r4, #10
    9f04:	f7f7 fe7a 	bl	1bfc <memcpy>
    9f08:	e7e7      	b.n	9eda <hci_evt_encode+0x1ea>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    9f0a:	f106 020b 	add.w	r2, r6, #11
    9f0e:	b2d2      	uxtb	r2, r2
    9f10:	2102      	movs	r1, #2
    9f12:	4628      	mov	r0, r5
    9f14:	f7fe fec4 	bl	8ca0 <meta_evt>
	sep->num_reports = 1;
    9f18:	2301      	movs	r3, #1
    9f1a:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    9f1c:	7a23      	ldrb	r3, [r4, #8]
    9f1e:	aa12      	add	r2, sp, #72	; 0x48
    9f20:	f003 030f 	and.w	r3, r3, #15
    9f24:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    9f26:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    9f28:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    9f2c:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9f2e:	7a63      	ldrb	r3, [r4, #9]
    9f30:	4423      	add	r3, r4
    9f32:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    9f36:	f008 fb27 	bl	12588 <ll_rl_size_get>
    9f3a:	4581      	cmp	r9, r0
    9f3c:	f105 0003 	add.w	r0, r5, #3
    9f40:	d212      	bcs.n	9f68 <hci_evt_encode+0x278>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    9f42:	4602      	mov	r2, r0
    9f44:	1ca9      	adds	r1, r5, #2
    9f46:	4648      	mov	r0, r9
    9f48:	f008 f986 	bl	12258 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    9f4c:	78ab      	ldrb	r3, [r5, #2]
    9f4e:	3302      	adds	r3, #2
    9f50:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    9f52:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    9f54:	350a      	adds	r5, #10
    9f56:	4632      	mov	r2, r6
    9f58:	f107 0108 	add.w	r1, r7, #8
    9f5c:	4628      	mov	r0, r5
    9f5e:	f7f7 fe4d 	bl	1bfc <memcpy>
	*prssi = rssi;
    9f62:	f805 8006 	strb.w	r8, [r5, r6]
    9f66:	e7c3      	b.n	9ef0 <hci_evt_encode+0x200>
		adv_info->addr.type = adv->tx_addr;
    9f68:	7a23      	ldrb	r3, [r4, #8]
    9f6a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9f6e:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    9f70:	2206      	movs	r2, #6
    9f72:	f104 010a 	add.w	r1, r4, #10
    9f76:	f7f7 fe41 	bl	1bfc <memcpy>
    9f7a:	e7ea      	b.n	9f52 <hci_evt_encode+0x262>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    9f7c:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    9f7e:	4621      	mov	r1, r4
    9f80:	4638      	mov	r0, r7
    9f82:	f7fe ffe5 	bl	8f50 <le_adv_ext_report.isra.66>
    9f86:	e7b3      	b.n	9ef0 <hci_evt_encode+0x200>
    9f88:	2204      	movs	r2, #4
    9f8a:	e7f8      	b.n	9f7e <hci_evt_encode+0x28e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9f8c:	4b30      	ldr	r3, [pc, #192]	; (a050 <hci_evt_encode+0x360>)
    9f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9f92:	2200      	movs	r2, #0
    9f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9f98:	4313      	orrs	r3, r2
    9f9a:	f100 060a 	add.w	r6, r0, #10
    9f9e:	d007      	beq.n	9fb0 <hci_evt_encode+0x2c0>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    9fa0:	4b2c      	ldr	r3, [pc, #176]	; (a054 <hci_evt_encode+0x364>)
    9fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
    9fa6:	2300      	movs	r3, #0
    9fa8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9fac:	4313      	orrs	r3, r2
    9fae:	d123      	bne.n	9ff8 <hci_evt_encode+0x308>
		addr.type = adv->tx_addr;
    9fb0:	7a23      	ldrb	r3, [r4, #8]
    9fb2:	ad12      	add	r5, sp, #72	; 0x48
    9fb4:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    9fb8:	2206      	movs	r2, #6
    9fba:	4631      	mov	r1, r6
    9fbc:	f10d 0025 	add.w	r0, sp, #37	; 0x25
		addr.type = adv->tx_addr;
    9fc0:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    9fc4:	f7f7 fe1a 	bl	1bfc <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    9fc8:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9fca:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9fcc:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9fce:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9fd0:	4631      	mov	r1, r6
    9fd2:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9fd4:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9fd6:	f7fe ff7f 	bl	8ed8 <bt_addr_le_to_str.constprop.71>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9fda:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    9fdc:	4b21      	ldr	r3, [pc, #132]	; (a064 <hci_evt_encode+0x374>)
    9fde:	9304      	str	r3, [sp, #16]
    9fe0:	2200      	movs	r2, #0
    9fe2:	9201      	str	r2, [sp, #4]
    9fe4:	9300      	str	r3, [sp, #0]
    9fe6:	9403      	str	r4, [sp, #12]
    9fe8:	9602      	str	r6, [sp, #8]
    9fea:	4b23      	ldr	r3, [pc, #140]	; (a078 <hci_evt_encode+0x388>)
    9fec:	4a23      	ldr	r2, [pc, #140]	; (a07c <hci_evt_encode+0x38c>)
    9fee:	4920      	ldr	r1, [pc, #128]	; (a070 <hci_evt_encode+0x380>)
    9ff0:	4823      	ldr	r0, [pc, #140]	; (a080 <hci_evt_encode+0x390>)
    9ff2:	f7f6 ffcb 	bl	f8c <printk>
    9ff6:	e77b      	b.n	9ef0 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    9ff8:	2208      	movs	r2, #8
    9ffa:	2113      	movs	r1, #19
    9ffc:	4628      	mov	r0, r5
    9ffe:	f7fe fe4f 	bl	8ca0 <meta_evt>
	sep->handle = 0;
    a002:	2300      	movs	r3, #0
    a004:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    a006:	7a23      	ldrb	r3, [r4, #8]
    a008:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a00c:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    a00e:	2206      	movs	r2, #6
    a010:	4631      	mov	r1, r6
    a012:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    a014:	f7f7 fdf2 	bl	1bfc <memcpy>
    a018:	e76a      	b.n	9ef0 <hci_evt_encode+0x200>
			le_conn_complete(cc->status, cc, handle, buf);
    a01a:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    a01c:	b93f      	cbnz	r7, a02e <hci_evt_encode+0x33e>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    a01e:	f100 0314 	add.w	r3, r0, #20
    a022:	f100 010e 	add.w	r1, r0, #14
    a026:	22ff      	movs	r2, #255	; 0xff
    a028:	7b40      	ldrb	r0, [r0, #13]
    a02a:	f008 fbd7 	bl	127dc <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a02e:	4b08      	ldr	r3, [pc, #32]	; (a050 <hci_evt_encode+0x360>)
    a030:	e9d3 2300 	ldrd	r2, r3, [r3]
    a034:	2200      	movs	r2, #0
    a036:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a03a:	4313      	orrs	r3, r2
    a03c:	f43f af58 	beq.w	9ef0 <hci_evt_encode+0x200>
    a040:	462b      	mov	r3, r5
    a042:	4632      	mov	r2, r6
    a044:	f104 010b 	add.w	r1, r4, #11
    a048:	4638      	mov	r0, r7
    a04a:	f7fe feaf 	bl	8dac <le_conn_complete.part.39>
    a04e:	e74f      	b.n	9ef0 <hci_evt_encode+0x200>
    a050:	20003d30 	.word	0x20003d30
    a054:	20003d38 	.word	0x20003d38
    a058:	20000838 	.word	0x20000838
    a05c:	2000083c 	.word	0x2000083c
    a060:	20000840 	.word	0x20000840
    a064:	000153a9 	.word	0x000153a9
    a068:	00016765 	.word	0x00016765
    a06c:	00017cb4 	.word	0x00017cb4
    a070:	000167b4 	.word	0x000167b4
    a074:	00017e7d 	.word	0x00017e7d
    a078:	00017cdc 	.word	0x00017cdc
    a07c:	000167ef 	.word	0x000167ef
    a080:	00017ec3 	.word	0x00017ec3
    a084:	20000842 	.word	0x20000842
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    a088:	4bb2      	ldr	r3, [pc, #712]	; (a354 <hci_evt_encode+0x664>)
    a08a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a08e:	2300      	movs	r3, #0
    a090:	f002 0210 	and.w	r2, r2, #16
    a094:	4313      	orrs	r3, r2
    a096:	f43f af2b 	beq.w	9ef0 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    a09a:	2204      	movs	r2, #4
    a09c:	2105      	movs	r1, #5
    a09e:	4628      	mov	r0, r5
    a0a0:	f7fe fdd9 	bl	8c56 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a0a4:	2104      	movs	r1, #4
    a0a6:	f105 0008 	add.w	r0, r5, #8
    a0aa:	f009 fb61 	bl	13770 <net_buf_simple_add>
	ep->status = 0x00;
    a0ae:	2300      	movs	r3, #0
	conn_count--;
    a0b0:	4aa9      	ldr	r2, [pc, #676]	; (a358 <hci_evt_encode+0x668>)
	ep->status = 0x00;
    a0b2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a0b4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    a0b8:	7a23      	ldrb	r3, [r4, #8]
    a0ba:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    a0bc:	6813      	ldr	r3, [r2, #0]
    a0be:	3b01      	subs	r3, #1
    a0c0:	6013      	str	r3, [r2, #0]
    a0c2:	e715      	b.n	9ef0 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a0c4:	4ba3      	ldr	r3, [pc, #652]	; (a354 <hci_evt_encode+0x664>)
    a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    a0ca:	2200      	movs	r2, #0
    a0cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a0d0:	4313      	orrs	r3, r2
    a0d2:	f43f af0d 	beq.w	9ef0 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    a0d6:	4ba1      	ldr	r3, [pc, #644]	; (a35c <hci_evt_encode+0x66c>)
    a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a0dc:	2300      	movs	r3, #0
    a0de:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a0e2:	4313      	orrs	r3, r2
    a0e4:	f43f af04 	beq.w	9ef0 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    a0e8:	2209      	movs	r2, #9
    a0ea:	2103      	movs	r1, #3
    a0ec:	4628      	mov	r0, r5
    a0ee:	f7fe fdd7 	bl	8ca0 <meta_evt>
	sep->status = radio_cu->status;
    a0f2:	7ae3      	ldrb	r3, [r4, #11]
    a0f4:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    a0f6:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    a0f8:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    a0fc:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    a100:	89e3      	ldrh	r3, [r4, #14]
    a102:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    a106:	8a23      	ldrh	r3, [r4, #16]
    a108:	f8a0 3007 	strh.w	r3, [r0, #7]
    a10c:	e6f0      	b.n	9ef0 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    a10e:	4b91      	ldr	r3, [pc, #580]	; (a354 <hci_evt_encode+0x664>)
    a110:	e9d3 2300 	ldrd	r2, r3, [r3]
    a114:	2200      	movs	r2, #0
    a116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a11a:	4313      	orrs	r3, r2
    a11c:	f43f aee8 	beq.w	9ef0 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    a120:	2203      	movs	r2, #3
    a122:	2130      	movs	r1, #48	; 0x30
    a124:	4628      	mov	r0, r5
    a126:	f7fe fd96 	bl	8c56 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a12a:	2103      	movs	r1, #3
    a12c:	f105 0008 	add.w	r0, r5, #8
    a130:	f009 fb1e 	bl	13770 <net_buf_simple_add>
	ep->status = 0x00;
    a134:	2300      	movs	r3, #0
    a136:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a138:	f8a0 6001 	strh.w	r6, [r0, #1]
    a13c:	e6d8      	b.n	9ef0 <hci_evt_encode+0x200>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    a13e:	4b88      	ldr	r3, [pc, #544]	; (a360 <hci_evt_encode+0x670>)
    a140:	e9d3 2300 	ldrd	r2, r3, [r3]
    a144:	2300      	movs	r3, #0
    a146:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    a14a:	4313      	orrs	r3, r2
    a14c:	f43f aed0 	beq.w	9ef0 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    a150:	2202      	movs	r2, #2
    a152:	2157      	movs	r1, #87	; 0x57
    a154:	4628      	mov	r0, r5
    a156:	f7fe fd7e 	bl	8c56 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a15a:	2102      	movs	r1, #2
    a15c:	f105 0008 	add.w	r0, r5, #8
    a160:	f009 fb06 	bl	13770 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    a164:	8006      	strh	r6, [r0, #0]
    a166:	e6c3      	b.n	9ef0 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a168:	4b7a      	ldr	r3, [pc, #488]	; (a354 <hci_evt_encode+0x664>)
    a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a16e:	2200      	movs	r2, #0
    a170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a174:	4313      	orrs	r3, r2
    a176:	f43f aebb 	beq.w	9ef0 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    a17a:	4b78      	ldr	r3, [pc, #480]	; (a35c <hci_evt_encode+0x66c>)
    a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a180:	2300      	movs	r3, #0
    a182:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a186:	4313      	orrs	r3, r2
    a188:	f43f aeb2 	beq.w	9ef0 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    a18c:	2203      	movs	r2, #3
    a18e:	2114      	movs	r1, #20
    a190:	4628      	mov	r0, r5
    a192:	f7fe fd85 	bl	8ca0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    a196:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    a198:	7ae3      	ldrb	r3, [r4, #11]
    a19a:	7083      	strb	r3, [r0, #2]
    a19c:	e6a8      	b.n	9ef0 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a19e:	4b6d      	ldr	r3, [pc, #436]	; (a354 <hci_evt_encode+0x664>)
    a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    a1a4:	2200      	movs	r2, #0
    a1a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a1aa:	4313      	orrs	r3, r2
    a1ac:	d007      	beq.n	a1be <hci_evt_encode+0x4ce>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    a1ae:	4b6b      	ldr	r3, [pc, #428]	; (a35c <hci_evt_encode+0x66c>)
    a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    a1b4:	2300      	movs	r3, #0
    a1b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a1ba:	4313      	orrs	r3, r2
    a1bc:	d122      	bne.n	a204 <hci_evt_encode+0x514>
    a1be:	7b22      	ldrb	r2, [r4, #12]
    a1c0:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    a1c2:	4868      	ldr	r0, [pc, #416]	; (a364 <hci_evt_encode+0x674>)
    a1c4:	2a00      	cmp	r2, #0
    a1c6:	fa92 f3a2 	rbit	r3, r2
    a1ca:	fab3 f383 	clz	r3, r3
    a1ce:	fa91 f2a1 	rbit	r2, r1
    a1d2:	bf08      	it	eq
    a1d4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a1d8:	2900      	cmp	r1, #0
    a1da:	fab2 f282 	clz	r2, r2
    a1de:	bf08      	it	eq
    a1e0:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    a1e4:	4960      	ldr	r1, [pc, #384]	; (a368 <hci_evt_encode+0x678>)
    a1e6:	9105      	str	r1, [sp, #20]
    a1e8:	3301      	adds	r3, #1
    a1ea:	3201      	adds	r2, #1
    a1ec:	9204      	str	r2, [sp, #16]
    a1ee:	9303      	str	r3, [sp, #12]
    a1f0:	7ae3      	ldrb	r3, [r4, #11]
    a1f2:	9302      	str	r3, [sp, #8]
    a1f4:	e88d 0042 	stmia.w	sp, {r1, r6}
    a1f8:	4b5c      	ldr	r3, [pc, #368]	; (a36c <hci_evt_encode+0x67c>)
    a1fa:	4a5d      	ldr	r2, [pc, #372]	; (a370 <hci_evt_encode+0x680>)
    a1fc:	495d      	ldr	r1, [pc, #372]	; (a374 <hci_evt_encode+0x684>)
    a1fe:	f7f6 fec5 	bl	f8c <printk>
    a202:	e675      	b.n	9ef0 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    a204:	2205      	movs	r2, #5
    a206:	210c      	movs	r1, #12
    a208:	4628      	mov	r0, r5
    a20a:	f7fe fd49 	bl	8ca0 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    a20e:	7ae3      	ldrb	r3, [r4, #11]
    a210:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    a212:	f8a0 6001 	strh.w	r6, [r0, #1]
    a216:	7b22      	ldrb	r2, [r4, #12]
    a218:	2a00      	cmp	r2, #0
    a21a:	fa92 f3a2 	rbit	r3, r2
    a21e:	fab3 f383 	clz	r3, r3
    a222:	bf08      	it	eq
    a224:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a228:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    a22a:	70c3      	strb	r3, [r0, #3]
    a22c:	7b62      	ldrb	r2, [r4, #13]
    a22e:	fa92 f3a2 	rbit	r3, r2
    a232:	2a00      	cmp	r2, #0
    a234:	fab3 f383 	clz	r3, r3
    a238:	bf08      	it	eq
    a23a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a23e:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    a240:	7103      	strb	r3, [r0, #4]
    a242:	e655      	b.n	9ef0 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    a244:	4b48      	ldr	r3, [pc, #288]	; (a368 <hci_evt_encode+0x678>)
    a246:	9301      	str	r3, [sp, #4]
    a248:	9300      	str	r3, [sp, #0]
    a24a:	4b4b      	ldr	r3, [pc, #300]	; (a378 <hci_evt_encode+0x688>)
    a24c:	4a4b      	ldr	r2, [pc, #300]	; (a37c <hci_evt_encode+0x68c>)
    a24e:	4949      	ldr	r1, [pc, #292]	; (a374 <hci_evt_encode+0x684>)
    a250:	484b      	ldr	r0, [pc, #300]	; (a380 <hci_evt_encode+0x690>)
    a252:	e622      	b.n	9e9a <hci_evt_encode+0x1aa>
	switch (pdu_data->llctrl.opcode) {
    a254:	7ac3      	ldrb	r3, [r0, #11]
    a256:	3b03      	subs	r3, #3
    a258:	2b12      	cmp	r3, #18
    a25a:	f200 80d5 	bhi.w	a408 <hci_evt_encode+0x718>
    a25e:	e8df f003 	tbb	[pc, r3]
    a262:	d30a      	.short	0xd30a
    a264:	d3c02fd3 	.word	0xd3c02fd3
    a268:	3cd3d335 	.word	0x3cd3d335
    a26c:	d35fd35b 	.word	0xd35fd35b
    a270:	a0d3d3d3 	.word	0xa0d3d3d3
    a274:	a0          	.byte	0xa0
    a275:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a276:	4b37      	ldr	r3, [pc, #220]	; (a354 <hci_evt_encode+0x664>)
    a278:	e9d3 2300 	ldrd	r2, r3, [r3]
    a27c:	2200      	movs	r2, #0
    a27e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a282:	4313      	orrs	r3, r2
    a284:	f43f ae34 	beq.w	9ef0 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    a288:	4b34      	ldr	r3, [pc, #208]	; (a35c <hci_evt_encode+0x66c>)
    a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a28e:	2300      	movs	r3, #0
    a290:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a294:	4313      	orrs	r3, r2
    a296:	f43f ae2b 	beq.w	9ef0 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    a29a:	220c      	movs	r2, #12
    a29c:	2105      	movs	r1, #5
    a29e:	4628      	mov	r0, r5
    a2a0:	f7fe fcfe 	bl	8ca0 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    a2a4:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    a2a6:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    a2a8:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    a2ac:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    a2b0:	f7f7 fca4 	bl	1bfc <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    a2b4:	2202      	movs	r2, #2
    a2b6:	f104 0114 	add.w	r1, r4, #20
    a2ba:	f105 000a 	add.w	r0, r5, #10
    a2be:	e6a9      	b.n	a014 <hci_evt_encode+0x324>
		encrypt_change(0x00, handle, buf);
    a2c0:	460a      	mov	r2, r1
    a2c2:	2000      	movs	r0, #0
    a2c4:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    a2c6:	f7fe fd23 	bl	8d10 <encrypt_change>
    a2ca:	e611      	b.n	9ef0 <hci_evt_encode+0x200>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    a2cc:	460b      	mov	r3, r1
    a2ce:	4632      	mov	r2, r6
    a2d0:	4639      	mov	r1, r7
    a2d2:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    a2d4:	f7fe fd3c 	bl	8d50 <le_remote_feat_complete>
    a2d8:	e60a      	b.n	9ef0 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    a2da:	4b1e      	ldr	r3, [pc, #120]	; (a354 <hci_evt_encode+0x664>)
    a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    a2e0:	2300      	movs	r3, #0
    a2e2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    a2e6:	4313      	orrs	r3, r2
    a2e8:	f43f ae02 	beq.w	9ef0 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    a2ec:	2208      	movs	r2, #8
    a2ee:	210c      	movs	r1, #12
    a2f0:	4628      	mov	r0, r5
    a2f2:	f7fe fcb0 	bl	8c56 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a2f6:	2108      	movs	r1, #8
    a2f8:	1868      	adds	r0, r5, r1
    a2fa:	f009 fa39 	bl	13770 <net_buf_simple_add>
	ep->status = 0x00;
    a2fe:	2300      	movs	r3, #0
    a300:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a302:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    a306:	7b23      	ldrb	r3, [r4, #12]
    a308:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    a30a:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    a30e:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    a310:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    a314:	80c3      	strh	r3, [r0, #6]
    a316:	e5eb      	b.n	9ef0 <hci_evt_encode+0x200>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    a318:	460a      	mov	r2, r1
    a31a:	7b00      	ldrb	r0, [r0, #12]
    a31c:	4631      	mov	r1, r6
    a31e:	e7d2      	b.n	a2c6 <hci_evt_encode+0x5d6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a320:	4b0c      	ldr	r3, [pc, #48]	; (a354 <hci_evt_encode+0x664>)
    a322:	e9d3 2300 	ldrd	r2, r3, [r3]
    a326:	2200      	movs	r2, #0
    a328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a32c:	4313      	orrs	r3, r2
    a32e:	d007      	beq.n	a340 <hci_evt_encode+0x650>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    a330:	4b0a      	ldr	r3, [pc, #40]	; (a35c <hci_evt_encode+0x66c>)
    a332:	e9d3 2300 	ldrd	r2, r3, [r3]
    a336:	2300      	movs	r3, #0
    a338:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a33c:	4313      	orrs	r3, r2
    a33e:	d121      	bne.n	a384 <hci_evt_encode+0x694>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    a340:	2300      	movs	r3, #0
    a342:	9301      	str	r3, [sp, #4]
    a344:	9300      	str	r3, [sp, #0]
    a346:	221a      	movs	r2, #26
    a348:	2102      	movs	r1, #2
    a34a:	4630      	mov	r0, r6
    a34c:	f006 fdda 	bl	10f04 <ll_conn_update>
    a350:	e5ce      	b.n	9ef0 <hci_evt_encode+0x200>
    a352:	bf00      	nop
    a354:	20003d30 	.word	0x20003d30
    a358:	20000834 	.word	0x20000834
    a35c:	20003d38 	.word	0x20003d38
    a360:	200008c0 	.word	0x200008c0
    a364:	00017ef6 	.word	0x00017ef6
    a368:	000153a9 	.word	0x000153a9
    a36c:	00017cf1 	.word	0x00017cf1
    a370:	000167ef 	.word	0x000167ef
    a374:	000167b4 	.word	0x000167b4
    a378:	00017d05 	.word	0x00017d05
    a37c:	00016765 	.word	0x00016765
    a380:	000166d9 	.word	0x000166d9
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    a384:	220a      	movs	r2, #10
    a386:	2106      	movs	r1, #6
    a388:	4628      	mov	r0, r5
    a38a:	f7fe fc89 	bl	8ca0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    a38e:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    a390:	89a3      	ldrh	r3, [r4, #12]
    a392:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    a394:	89e3      	ldrh	r3, [r4, #14]
    a396:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    a398:	8a23      	ldrh	r3, [r4, #16]
    a39a:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    a39c:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    a39e:	8103      	strh	r3, [r0, #8]
    a3a0:	e5a6      	b.n	9ef0 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a3a2:	4b1c      	ldr	r3, [pc, #112]	; (a414 <hci_evt_encode+0x724>)
    a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    a3a8:	2200      	movs	r2, #0
    a3aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a3ae:	4313      	orrs	r3, r2
    a3b0:	f43f ad9e 	beq.w	9ef0 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    a3b4:	4b18      	ldr	r3, [pc, #96]	; (a418 <hci_evt_encode+0x728>)
    a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    a3ba:	2300      	movs	r3, #0
    a3bc:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a3c0:	4313      	orrs	r3, r2
    a3c2:	f43f ad95 	beq.w	9ef0 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    a3c6:	220a      	movs	r2, #10
    a3c8:	2107      	movs	r1, #7
    a3ca:	4628      	mov	r0, r5
    a3cc:	f7fe fc68 	bl	8ca0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    a3d0:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    a3d2:	8a23      	ldrh	r3, [r4, #16]
    a3d4:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    a3d6:	8a63      	ldrh	r3, [r4, #18]
    a3d8:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    a3da:	89a3      	ldrh	r3, [r4, #12]
    a3dc:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    a3de:	89e3      	ldrh	r3, [r4, #14]
    a3e0:	e7dd      	b.n	a39e <hci_evt_encode+0x6ae>
    a3e2:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    a3e4:	2a0e      	cmp	r2, #14
    a3e6:	d104      	bne.n	a3f2 <hci_evt_encode+0x702>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    a3e8:	460b      	mov	r3, r1
    a3ea:	4632      	mov	r2, r6
    a3ec:	2100      	movs	r1, #0
    a3ee:	201a      	movs	r0, #26
    a3f0:	e770      	b.n	a2d4 <hci_evt_encode+0x5e4>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    a3f2:	4b0a      	ldr	r3, [pc, #40]	; (a41c <hci_evt_encode+0x72c>)
    a3f4:	9302      	str	r3, [sp, #8]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    a3f6:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    a3f8:	9300      	str	r3, [sp, #0]
    a3fa:	4a09      	ldr	r2, [pc, #36]	; (a420 <hci_evt_encode+0x730>)
    a3fc:	4b09      	ldr	r3, [pc, #36]	; (a424 <hci_evt_encode+0x734>)
    a3fe:	490a      	ldr	r1, [pc, #40]	; (a428 <hci_evt_encode+0x738>)
    a400:	480a      	ldr	r0, [pc, #40]	; (a42c <hci_evt_encode+0x73c>)
    a402:	f7f6 fdc3 	bl	f8c <printk>
    a406:	e573      	b.n	9ef0 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    a408:	4b04      	ldr	r3, [pc, #16]	; (a41c <hci_evt_encode+0x72c>)
    a40a:	9301      	str	r3, [sp, #4]
    a40c:	9300      	str	r3, [sp, #0]
    a40e:	4b08      	ldr	r3, [pc, #32]	; (a430 <hci_evt_encode+0x740>)
    a410:	e71c      	b.n	a24c <hci_evt_encode+0x55c>
    a412:	bf00      	nop
    a414:	20003d30 	.word	0x20003d30
    a418:	20003d38 	.word	0x20003d38
    a41c:	000153a9 	.word	0x000153a9
    a420:	000167ef 	.word	0x000167ef
    a424:	00017d14 	.word	0x00017d14
    a428:	000167b4 	.word	0x000167b4
    a42c:	00017f32 	.word	0x00017f32
    a430:	00017d23 	.word	0x00017d23

0000a434 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    a434:	b570      	push	{r4, r5, r6, lr}
    a436:	4606      	mov	r6, r0
    a438:	460d      	mov	r5, r1
    a43a:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    a43c:	2113      	movs	r1, #19
    a43e:	2205      	movs	r2, #5
    a440:	f7fe fc09 	bl	8c56 <evt_create>

	ep = net_buf_add(buf, len);
    a444:	2105      	movs	r1, #5
    a446:	f106 0008 	add.w	r0, r6, #8
    a44a:	f009 f991 	bl	13770 <net_buf_simple_add>
	ep->num_handles = num_handles;
    a44e:	2301      	movs	r3, #1
    a450:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    a452:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    a456:	f8a0 4003 	strh.w	r4, [r0, #3]
    a45a:	bd70      	pop	{r4, r5, r6, pc}

0000a45c <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a45c:	7903      	ldrb	r3, [r0, #4]
    a45e:	2b01      	cmp	r3, #1
    a460:	d006      	beq.n	a470 <hci_get_class+0x14>
    a462:	3b02      	subs	r3, #2
    a464:	b2db      	uxtb	r3, r3
    a466:	2b0a      	cmp	r3, #10
    a468:	d80a      	bhi.n	a480 <hci_get_class+0x24>
    a46a:	4a07      	ldr	r2, [pc, #28]	; (a488 <hci_get_class+0x2c>)
    a46c:	56d0      	ldrsb	r0, [r2, r3]
    a46e:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    a470:	7a03      	ldrb	r3, [r0, #8]
    a472:	f003 0303 	and.w	r3, r3, #3
    a476:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    a478:	bf0c      	ite	eq
    a47a:	2002      	moveq	r0, #2
    a47c:	2003      	movne	r0, #3
    a47e:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    a484:	4770      	bx	lr
    a486:	bf00      	nop
    a488:	00017c77 	.word	0x00017c77

0000a48c <hci_init>:
	dup_count = -1;
    a48c:	4b0a      	ldr	r3, [pc, #40]	; (a4b8 <hci_init+0x2c>)
    a48e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a492:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    a494:	4b09      	ldr	r3, [pc, #36]	; (a4bc <hci_init+0x30>)
    a496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a49a:	f641 71ff 	movw	r1, #8191	; 0x1fff
    a49e:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    a4a2:	4b07      	ldr	r3, [pc, #28]	; (a4c0 <hci_init+0x34>)
    a4a4:	2000      	movs	r0, #0
    a4a6:	2100      	movs	r1, #0
    a4a8:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    a4ac:	4b05      	ldr	r3, [pc, #20]	; (a4c4 <hci_init+0x38>)
    a4ae:	201f      	movs	r0, #31
    a4b0:	2100      	movs	r1, #0
    a4b2:	e9c3 0100 	strd	r0, r1, [r3]
    a4b6:	4770      	bx	lr
    a4b8:	20000838 	.word	0x20000838
    a4bc:	20003d30 	.word	0x20003d30
    a4c0:	200008c0 	.word	0x200008c0
    a4c4:	20003d38 	.word	0x20003d38

0000a4c8 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    a4c8:	bf20      	wfe
	__SEV();
    a4ca:	bf40      	sev
	__WFE();
    a4cc:	bf20      	wfe
    a4ce:	4770      	bx	lr

0000a4d0 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    a4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    a4d2:	4b0d      	ldr	r3, [pc, #52]	; (a508 <pdu_len_cmp+0x38>)
{
    a4d4:	b089      	sub	sp, #36	; 0x24
    a4d6:	4605      	mov	r5, r0
    a4d8:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    a4da:	aa01      	add	r2, sp, #4
    a4dc:	f103 0718 	add.w	r7, r3, #24
    a4e0:	6818      	ldr	r0, [r3, #0]
    a4e2:	6859      	ldr	r1, [r3, #4]
    a4e4:	4614      	mov	r4, r2
    a4e6:	c403      	stmia	r4!, {r0, r1}
    a4e8:	3308      	adds	r3, #8
    a4ea:	42bb      	cmp	r3, r7
    a4ec:	4622      	mov	r2, r4
    a4ee:	d1f7      	bne.n	a4e0 <pdu_len_cmp+0x10>
    a4f0:	881b      	ldrh	r3, [r3, #0]
    a4f2:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    a4f4:	ab08      	add	r3, sp, #32
    a4f6:	441d      	add	r5, r3
    a4f8:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    a4fc:	1b83      	subs	r3, r0, r6
    a4fe:	4258      	negs	r0, r3
    a500:	4158      	adcs	r0, r3
    a502:	b009      	add	sp, #36	; 0x24
    a504:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a506:	bf00      	nop
    a508:	000152fb 	.word	0x000152fb

0000a50c <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    a50c:	6008      	str	r0, [r1, #0]
    a50e:	4770      	bx	lr

0000a510 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    a510:	b918      	cbnz	r0, a51a <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    a512:	680b      	ldr	r3, [r1, #0]
    a514:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a518:	600b      	str	r3, [r1, #0]
    a51a:	4770      	bx	lr

0000a51c <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    a51c:	b918      	cbnz	r0, a526 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    a51e:	680b      	ldr	r3, [r1, #0]
    a520:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a524:	600b      	str	r3, [r1, #0]
    a526:	4770      	bx	lr

0000a528 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    a528:	b570      	push	{r4, r5, r6, lr}
    a52a:	1d03      	adds	r3, r0, #4
    a52c:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    a52e:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    a530:	429d      	cmp	r5, r3
    a532:	d101      	bne.n	a538 <chan_sel_remap+0x10>
    a534:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    a536:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    a538:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    a53c:	2200      	movs	r2, #0
    a53e:	18a0      	adds	r0, r4, r2
    a540:	2a08      	cmp	r2, #8
    a542:	b2c0      	uxtb	r0, r0
    a544:	d101      	bne.n	a54a <chan_sel_remap+0x22>
    a546:	4604      	mov	r4, r0
    a548:	e7f2      	b.n	a530 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    a54a:	f016 0f01 	tst.w	r6, #1
    a54e:	d003      	beq.n	a558 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    a550:	2900      	cmp	r1, #0
    a552:	d0f0      	beq.n	a536 <chan_sel_remap+0xe>
				chan_index--;
    a554:	3901      	subs	r1, #1
    a556:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    a558:	0876      	lsrs	r6, r6, #1
    a55a:	3201      	adds	r2, #1
    a55c:	e7ef      	b.n	a53e <chan_sel_remap+0x16>
	...

0000a560 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    a560:	4b09      	ldr	r3, [pc, #36]	; (a588 <packet_rx_acquired_count_get+0x28>)
    a562:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    a566:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    a56a:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    a56c:	bf3b      	ittet	cc
    a56e:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    a572:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    a576:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    a57a:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    a57c:	bf2c      	ite	cs
    a57e:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    a580:	1a80      	subcc	r0, r0, r2
    a582:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    a584:	4770      	bx	lr
    a586:	bf00      	nop
    a588:	200008c8 	.word	0x200008c8

0000a58c <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    a58c:	b508      	push	{r3, lr}
    a58e:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    a590:	f7ff ffe6 	bl	a560 <packet_rx_acquired_count_get>
    a594:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    a596:	bf21      	itttt	cs
    a598:	4b04      	ldrcs	r3, [pc, #16]	; (a5ac <packet_rx_reserve_get+0x20>)
    a59a:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    a59e:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    a5a2:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    a5a6:	bf38      	it	cc
    a5a8:	2000      	movcc	r0, #0
}
    a5aa:	bd08      	pop	{r3, pc}
    a5ac:	200008c8 	.word	0x200008c8

0000a5b0 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    a5b0:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    a5b2:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    a5b6:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    a5ba:	429c      	cmp	r4, r3
    a5bc:	d15a      	bne.n	a674 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    a5be:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    a5c2:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    a5c6:	428b      	cmp	r3, r1
    a5c8:	d154      	bne.n	a674 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    a5ca:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a5ce:	2b00      	cmp	r3, #0
    a5d0:	db25      	blt.n	a61e <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    a5d2:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    a5d4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    a5d6:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    a5da:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    a5dc:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    a5e0:	4351      	muls	r1, r2
					      conn->supervision_reload *
    a5e2:	227d      	movs	r2, #125	; 0x7d
    a5e4:	434a      	muls	r2, r1
					      125 / 1000;
    a5e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a5ea:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    a5ee:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    a5f2:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    a5f6:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    a5f8:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    a5fc:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    a5fe:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    a600:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    a604:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    a606:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    a60a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    a60e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    a612:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    a616:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    a61a:	4618      	mov	r0, r3
    a61c:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    a61e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    a622:	06dc      	lsls	r4, r3, #27
    a624:	d428      	bmi.n	a678 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    a626:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    a62a:	069a      	lsls	r2, r3, #26
    a62c:	d503      	bpl.n	a636 <conn_update_req+0x86>
		    (conn->llcp_features &
    a62e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    a632:	079b      	lsls	r3, r3, #30
    a634:	d520      	bpl.n	a678 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    a636:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    a638:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    a63a:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    a63e:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    a640:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    a644:	4354      	muls	r4, r2
						conn->supervision_reload *
    a646:	227d      	movs	r2, #125	; 0x7d
    a648:	4362      	muls	r2, r4
						125 / 1000;
    a64a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    a64e:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    a652:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    a656:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    a65a:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    a65c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    a660:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    a664:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    a666:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    a66a:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    a66e:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    a672:	e7d2      	b.n	a61a <conn_update_req+0x6a>
		return 1;
    a674:	2001      	movs	r0, #1
    a676:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    a678:	2002      	movs	r0, #2
}
    a67a:	bd30      	pop	{r4, r5, pc}

0000a67c <packet_rx_allocate>:
{
    a67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    a680:	4d22      	ldr	r5, [pc, #136]	; (a70c <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    a682:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    a686:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    a68a:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    a68e:	3401      	adds	r4, #1
    a690:	4581      	cmp	r9, r0
    a692:	b2e4      	uxtb	r4, r4
    a694:	bf28      	it	cs
    a696:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    a698:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    a69c:	42a3      	cmp	r3, r4
    a69e:	bf08      	it	eq
    a6a0:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    a6a2:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    a6a6:	f1b9 0f00 	cmp.w	r9, #0
    a6aa:	d003      	beq.n	a6b4 <packet_rx_allocate+0x38>
    a6ac:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    a6b0:	429c      	cmp	r4, r3
    a6b2:	d101      	bne.n	a6b8 <packet_rx_allocate+0x3c>
    a6b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    a6b8:	4638      	mov	r0, r7
    a6ba:	f7fd f828 	bl	770e <mem_acquire>
		if (!link) {
    a6be:	4606      	mov	r6, r0
    a6c0:	2800      	cmp	r0, #0
    a6c2:	d0f7      	beq.n	a6b4 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    a6c4:	4640      	mov	r0, r8
    a6c6:	f7fd f822 	bl	770e <mem_acquire>
		if (!node_rx) {
    a6ca:	b928      	cbnz	r0, a6d8 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    a6cc:	4630      	mov	r0, r6
    a6ce:	4910      	ldr	r1, [pc, #64]	; (a710 <packet_rx_allocate+0x94>)
}
    a6d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    a6d4:	f7fd b835 	b.w	7742 <mem_release>
		node_rx->hdr.onion.link = link;
    a6d8:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    a6da:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    a6de:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    a6e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    a6e6:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    a6ea:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    a6ee:	3401      	adds	r4, #1
    a6f0:	b2e4      	uxtb	r4, r4
			acquire = 0;
    a6f2:	42a3      	cmp	r3, r4
    a6f4:	bf08      	it	eq
    a6f6:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    a6f8:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    a6fc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    a700:	3b01      	subs	r3, #1
    a702:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    a706:	fa5f f989 	uxtb.w	r9, r9
    a70a:	e7cc      	b.n	a6a6 <packet_rx_allocate+0x2a>
    a70c:	200008c8 	.word	0x200008c8
    a710:	20000a10 	.word	0x20000a10

0000a714 <common_init>:
{
    a714:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    a716:	4c39      	ldr	r4, [pc, #228]	; (a7fc <common_init+0xe8>)
    a718:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    a71c:	2a00      	cmp	r2, #0
    a71e:	d040      	beq.n	a7a2 <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    a720:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    a724:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a728:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    a72c:	f7fc ffc8 	bl	76c0 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    a730:	4b33      	ldr	r3, [pc, #204]	; (a800 <common_init+0xec>)
    a732:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    a736:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    a73a:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    a73e:	f7fc ffbf 	bl	76c0 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    a742:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    a746:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    a74a:	4b2e      	ldr	r3, [pc, #184]	; (a804 <common_init+0xf0>)
    a74c:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    a750:	440a      	add	r2, r1
    a752:	2108      	movs	r1, #8
    a754:	f7fc ffb4 	bl	76c0 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    a758:	4b2b      	ldr	r3, [pc, #172]	; (a808 <common_init+0xf4>)
    a75a:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    a75e:	2202      	movs	r2, #2
    a760:	2124      	movs	r1, #36	; 0x24
    a762:	f7fc ffad 	bl	76c0 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    a766:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    a76a:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    a76e:	4b27      	ldr	r3, [pc, #156]	; (a80c <common_init+0xf8>)
    a770:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    a774:	3a01      	subs	r2, #1
    a776:	b292      	uxth	r2, r2
    a778:	f7fc ffa2 	bl	76c0 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    a77c:	4821      	ldr	r0, [pc, #132]	; (a804 <common_init+0xf0>)
    a77e:	f7fc ffc6 	bl	770e <mem_acquire>
	LL_ASSERT(link);
    a782:	b988      	cbnz	r0, a7a8 <common_init+0x94>
    a784:	4b22      	ldr	r3, [pc, #136]	; (a810 <common_init+0xfc>)
    a786:	9301      	str	r3, [sp, #4]
    a788:	9300      	str	r3, [sp, #0]
    a78a:	4a22      	ldr	r2, [pc, #136]	; (a814 <common_init+0x100>)
    a78c:	4b22      	ldr	r3, [pc, #136]	; (a818 <common_init+0x104>)
    a78e:	4923      	ldr	r1, [pc, #140]	; (a81c <common_init+0x108>)
    a790:	4823      	ldr	r0, [pc, #140]	; (a820 <common_init+0x10c>)
    a792:	f7f6 fbfb 	bl	f8c <printk>
    a796:	4040      	eors	r0, r0
    a798:	f380 8811 	msr	BASEPRI, r0
    a79c:	f04f 0004 	mov.w	r0, #4
    a7a0:	df02      	svc	2
		_radio.conn_free = NULL;
    a7a2:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    a7a6:	e7c3      	b.n	a730 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    a7a8:	4a1e      	ldr	r2, [pc, #120]	; (a824 <common_init+0x110>)
    a7aa:	1f11      	subs	r1, r2, #4
    a7ac:	f7fd f806 	bl	77bc <memq_init>
	_radio.advertiser.chan_map = 0x07;
    a7b0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    a7b4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    a7b8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    a7bc:	231f      	movs	r3, #31
    a7be:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    a7c2:	2325      	movs	r3, #37	; 0x25
    a7c4:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    a7c8:	231b      	movs	r3, #27
    a7ca:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    a7ce:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    a7d2:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    a7d4:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    a7d8:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    a7da:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    a7de:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    a7e2:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    a7e6:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    a7ea:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    a7ee:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    a7f2:	b002      	add	sp, #8
    a7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    a7f8:	f7ff bf40 	b.w	a67c <packet_rx_allocate>
    a7fc:	200008c8 	.word	0x200008c8
    a800:	200009f8 	.word	0x200009f8
    a804:	20000a10 	.word	0x20000a10
    a808:	20000a24 	.word	0x20000a24
    a80c:	20000a2c 	.word	0x20000a2c
    a810:	000153a9 	.word	0x000153a9
    a814:	00016765 	.word	0x00016765
    a818:	00018004 	.word	0x00018004
    a81c:	000167b4 	.word	0x000167b4
    a820:	00018481 	.word	0x00018481
    a824:	20000a18 	.word	0x20000a18

0000a828 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    a828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    a82c:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    a82e:	4294      	cmp	r4, r2
{
    a830:	4681      	mov	r9, r0
    a832:	460f      	mov	r7, r1
    a834:	4690      	mov	r8, r2
	if (_first == last) {
    a836:	d03d      	beq.n	a8b4 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    a838:	4e1f      	ldr	r6, [pc, #124]	; (a8b8 <tx_cmplt_get+0x90>)
    a83a:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    a83e:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    a842:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    a844:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    a846:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    a84a:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    a84e:	b222      	sxth	r2, r4
    a850:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    a854:	f8b9 e000 	ldrh.w	lr, [r9]
    a858:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    a85c:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    a860:	4596      	cmp	lr, r2
    a862:	d120      	bne.n	a8a6 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    a864:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    a866:	2801      	cmp	r0, #1
    a868:	f020 0303 	bic.w	r3, r0, #3
    a86c:	d90a      	bls.n	a884 <tx_cmplt_get+0x5c>
    a86e:	b1f3      	cbz	r3, a8ae <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    a870:	1d02      	adds	r2, r0, #4
    a872:	d01c      	beq.n	a8ae <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    a874:	7942      	ldrb	r2, [r0, #5]
    a876:	b1d2      	cbz	r2, a8ae <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    a878:	7902      	ldrb	r2, [r0, #4]
    a87a:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    a87e:	3a01      	subs	r2, #1
    a880:	2a01      	cmp	r2, #1
    a882:	d814      	bhi.n	a8ae <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    a884:	2201      	movs	r2, #1
			cmplt++;
    a886:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    a888:	604a      	str	r2, [r1, #4]
			cmplt++;
    a88a:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    a88c:	b113      	cbz	r3, a894 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    a88e:	4651      	mov	r1, sl
    a890:	f7fc ff57 	bl	7742 <mem_release>
		}

		_first = _first + 1;
    a894:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    a896:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    a89a:	b2e4      	uxtb	r4, r4
			_first = 0;
    a89c:	42a2      	cmp	r2, r4
    a89e:	bf08      	it	eq
    a8a0:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    a8a2:	4544      	cmp	r4, r8
    a8a4:	d1d3      	bne.n	a84e <tx_cmplt_get+0x26>

	*first = _first;
    a8a6:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    a8a8:	4628      	mov	r0, r5
    a8aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    a8ae:	f8c1 b004 	str.w	fp, [r1, #4]
    a8b2:	e7eb      	b.n	a88c <tx_cmplt_get+0x64>
		return 0;
    a8b4:	2500      	movs	r5, #0
    a8b6:	e7f7      	b.n	a8a8 <tx_cmplt_get+0x80>
    a8b8:	200008c8 	.word	0x200008c8

0000a8bc <connection_get>:
{
    a8bc:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    a8be:	4b09      	ldr	r3, [pc, #36]	; (a8e4 <connection_get+0x28>)
    a8c0:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    a8c4:	4282      	cmp	r2, r0
{
    a8c6:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    a8c8:	d90a      	bls.n	a8e0 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    a8ca:	4602      	mov	r2, r0
    a8cc:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a8d0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    a8d4:	f7fc ff50 	bl	7778 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    a8d8:	b110      	cbz	r0, a8e0 <connection_get+0x24>
    a8da:	8c03      	ldrh	r3, [r0, #32]
    a8dc:	42a3      	cmp	r3, r4
    a8de:	d000      	beq.n	a8e2 <connection_get+0x26>
	return 0;
    a8e0:	2000      	movs	r0, #0
}
    a8e2:	bd10      	pop	{r4, pc}
    a8e4:	200008c8 	.word	0x200008c8

0000a8e8 <role_disable>:
{
    a8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8ec:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a8ee:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    a8f0:	2805      	cmp	r0, #5
{
    a8f2:	4605      	mov	r5, r0
    a8f4:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a8f6:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    a8f8:	d00c      	beq.n	a914 <role_disable+0x2c>
    a8fa:	2806      	cmp	r0, #6
    a8fc:	d040      	beq.n	a980 <role_disable+0x98>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a8fe:	d945      	bls.n	a98c <role_disable+0xa4>
			conn_handle = ticker_id_primary -
    a900:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    a902:	b280      	uxth	r0, r0
    a904:	f7ff ffda 	bl	a8bc <connection_get>
			if (!conn) {
    a908:	2800      	cmp	r0, #0
    a90a:	f000 8123 	beq.w	ab54 <role_disable+0x26c>
			ticks_active_to_start =
    a90e:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    a912:	e00f      	b.n	a934 <role_disable+0x4c>
		ticks_xtal_to_start =
    a914:	4b90      	ldr	r3, [pc, #576]	; (ab58 <role_disable+0x270>)
    a916:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    a918:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a91c:	ab02      	add	r3, sp, #8
    a91e:	9300      	str	r3, [sp, #0]
    a920:	460a      	mov	r2, r1
    a922:	4b8e      	ldr	r3, [pc, #568]	; (ab5c <role_disable+0x274>)
    a924:	2103      	movs	r1, #3
    a926:	2000      	movs	r0, #0
    a928:	f7fd fe18 	bl	855c <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    a92c:	2802      	cmp	r0, #2
    a92e:	d011      	beq.n	a954 <role_disable+0x6c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    a930:	9b02      	ldr	r3, [sp, #8]
    a932:	b99b      	cbnz	r3, a95c <role_disable+0x74>
	LL_ASSERT(!_radio.ticker_id_stop);
    a934:	4c88      	ldr	r4, [pc, #544]	; (ab58 <role_disable+0x270>)
    a936:	7ca3      	ldrb	r3, [r4, #18]
    a938:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a93c:	2b00      	cmp	r3, #0
    a93e:	d02d      	beq.n	a99c <role_disable+0xb4>
    a940:	4b87      	ldr	r3, [pc, #540]	; (ab60 <role_disable+0x278>)
    a942:	9301      	str	r3, [sp, #4]
    a944:	9300      	str	r3, [sp, #0]
    a946:	4a87      	ldr	r2, [pc, #540]	; (ab64 <role_disable+0x27c>)
    a948:	4b87      	ldr	r3, [pc, #540]	; (ab68 <role_disable+0x280>)
    a94a:	4988      	ldr	r1, [pc, #544]	; (ab6c <role_disable+0x284>)
    a94c:	4888      	ldr	r0, [pc, #544]	; (ab70 <role_disable+0x288>)
    a94e:	e00f      	b.n	a970 <role_disable+0x88>
				cpu_sleep();
    a950:	f7ff fdba 	bl	a4c8 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a954:	9b02      	ldr	r3, [sp, #8]
    a956:	2b02      	cmp	r3, #2
    a958:	d0fa      	beq.n	a950 <role_disable+0x68>
    a95a:	e7e9      	b.n	a930 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    a95c:	9b02      	ldr	r3, [sp, #8]
    a95e:	2b01      	cmp	r3, #1
    a960:	d0e8      	beq.n	a934 <role_disable+0x4c>
    a962:	4b7f      	ldr	r3, [pc, #508]	; (ab60 <role_disable+0x278>)
    a964:	9301      	str	r3, [sp, #4]
    a966:	9300      	str	r3, [sp, #0]
    a968:	4a7e      	ldr	r2, [pc, #504]	; (ab64 <role_disable+0x27c>)
    a96a:	4b7f      	ldr	r3, [pc, #508]	; (ab68 <role_disable+0x280>)
    a96c:	497f      	ldr	r1, [pc, #508]	; (ab6c <role_disable+0x284>)
    a96e:	4881      	ldr	r0, [pc, #516]	; (ab74 <role_disable+0x28c>)
			LL_ASSERT(0);
    a970:	f7f6 fb0c 	bl	f8c <printk>
    a974:	4040      	eors	r0, r0
    a976:	f380 8811 	msr	BASEPRI, r0
    a97a:	f04f 0004 	mov.w	r0, #4
    a97e:	df02      	svc	2
		ticks_xtal_to_start =
    a980:	4b75      	ldr	r3, [pc, #468]	; (ab58 <role_disable+0x270>)
    a982:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    a986:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    a98a:	e7d3      	b.n	a934 <role_disable+0x4c>
			LL_ASSERT(0);
    a98c:	4b74      	ldr	r3, [pc, #464]	; (ab60 <role_disable+0x278>)
    a98e:	9301      	str	r3, [sp, #4]
    a990:	9300      	str	r3, [sp, #0]
    a992:	4b75      	ldr	r3, [pc, #468]	; (ab68 <role_disable+0x280>)
    a994:	4a73      	ldr	r2, [pc, #460]	; (ab64 <role_disable+0x27c>)
    a996:	4975      	ldr	r1, [pc, #468]	; (ab6c <role_disable+0x284>)
    a998:	4877      	ldr	r0, [pc, #476]	; (ab78 <role_disable+0x290>)
    a99a:	e7e9      	b.n	a970 <role_disable+0x88>
	ret_cb = TICKER_STATUS_BUSY;
    a99c:	ab06      	add	r3, sp, #24
    a99e:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    a9a0:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    a9a2:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a9a6:	2103      	movs	r1, #3
    a9a8:	9300      	str	r3, [sp, #0]
    a9aa:	462a      	mov	r2, r5
    a9ac:	4b6b      	ldr	r3, [pc, #428]	; (ab5c <role_disable+0x274>)
    a9ae:	f7fd fdd5 	bl	855c <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    a9b2:	2802      	cmp	r0, #2
    a9b4:	d025      	beq.n	aa02 <role_disable+0x11a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    a9b6:	9b02      	ldr	r3, [sp, #8]
    a9b8:	2b00      	cmp	r3, #0
    a9ba:	d169      	bne.n	aa90 <role_disable+0x1a8>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    a9bc:	7c23      	ldrb	r3, [r4, #16]
    a9be:	429d      	cmp	r5, r3
    a9c0:	d002      	beq.n	a9c8 <role_disable+0xe0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    a9c2:	7c63      	ldrb	r3, [r4, #17]
    a9c4:	429d      	cmp	r5, r3
    a9c6:	d15f      	bne.n	aa88 <role_disable+0x1a0>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    a9c8:	ab06      	add	r3, sp, #24
    a9ca:	2202      	movs	r2, #2
    a9cc:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a9d0:	2200      	movs	r2, #0
    a9d2:	9300      	str	r3, [sp, #0]
    a9d4:	2103      	movs	r1, #3
    a9d6:	4b61      	ldr	r3, [pc, #388]	; (ab5c <role_disable+0x274>)
    a9d8:	4610      	mov	r0, r2
    a9da:	f7fd fdbf 	bl	855c <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    a9de:	2802      	cmp	r0, #2
    a9e0:	d11d      	bne.n	aa1e <role_disable+0x136>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a9e2:	2201      	movs	r2, #1
    a9e4:	4611      	mov	r1, r2
    a9e6:	2003      	movs	r0, #3
    a9e8:	f7fc ff34 	bl	7854 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    a9ec:	9b03      	ldr	r3, [sp, #12]
    a9ee:	2b02      	cmp	r3, #2
    a9f0:	d115      	bne.n	aa1e <role_disable+0x136>
    a9f2:	4b5b      	ldr	r3, [pc, #364]	; (ab60 <role_disable+0x278>)
    a9f4:	9301      	str	r3, [sp, #4]
    a9f6:	9300      	str	r3, [sp, #0]
    a9f8:	4a5a      	ldr	r2, [pc, #360]	; (ab64 <role_disable+0x27c>)
    a9fa:	4b60      	ldr	r3, [pc, #384]	; (ab7c <role_disable+0x294>)
    a9fc:	495b      	ldr	r1, [pc, #364]	; (ab6c <role_disable+0x284>)
    a9fe:	4860      	ldr	r0, [pc, #384]	; (ab80 <role_disable+0x298>)
    aa00:	e7b6      	b.n	a970 <role_disable+0x88>
		if (_radio.ticker_id_event == ticker_id_primary) {
    aa02:	7c63      	ldrb	r3, [r4, #17]
    aa04:	429d      	cmp	r5, r3
    aa06:	d104      	bne.n	aa12 <role_disable+0x12a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    aa08:	2201      	movs	r2, #1
    aa0a:	4611      	mov	r1, r2
    aa0c:	2003      	movs	r0, #3
    aa0e:	f7fc ff21 	bl	7854 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    aa12:	9b02      	ldr	r3, [sp, #8]
    aa14:	2b02      	cmp	r3, #2
    aa16:	d1ce      	bne.n	a9b6 <role_disable+0xce>
			cpu_sleep();
    aa18:	f7ff fd56 	bl	a4c8 <cpu_sleep>
    aa1c:	e7f9      	b.n	aa12 <role_disable+0x12a>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    aa1e:	9803      	ldr	r0, [sp, #12]
    aa20:	2800      	cmp	r0, #0
    aa22:	d150      	bne.n	aac6 <role_disable+0x1de>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    aa24:	2302      	movs	r3, #2
    aa26:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    aa28:	7c23      	ldrb	r3, [r4, #16]
    aa2a:	b93b      	cbnz	r3, aa3c <role_disable+0x154>
    aa2c:	4b4c      	ldr	r3, [pc, #304]	; (ab60 <role_disable+0x278>)
    aa2e:	9301      	str	r3, [sp, #4]
    aa30:	9300      	str	r3, [sp, #0]
    aa32:	4a4c      	ldr	r2, [pc, #304]	; (ab64 <role_disable+0x27c>)
    aa34:	4b51      	ldr	r3, [pc, #324]	; (ab7c <role_disable+0x294>)
    aa36:	494d      	ldr	r1, [pc, #308]	; (ab6c <role_disable+0x284>)
    aa38:	4852      	ldr	r0, [pc, #328]	; (ab84 <role_disable+0x29c>)
    aa3a:	e799      	b.n	a970 <role_disable+0x88>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    aa3c:	ab04      	add	r3, sp, #16
    aa3e:	9300      	str	r3, [sp, #0]
    aa40:	2201      	movs	r2, #1
    aa42:	4b46      	ldr	r3, [pc, #280]	; (ab5c <role_disable+0x274>)
		_radio.ticker_id_prepare = 0;
    aa44:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    aa46:	2103      	movs	r1, #3
    aa48:	f7fd fd88 	bl	855c <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    aa4c:	2802      	cmp	r0, #2
    aa4e:	d10f      	bne.n	aa70 <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    aa50:	2201      	movs	r2, #1
    aa52:	4611      	mov	r1, r2
    aa54:	2003      	movs	r0, #3
    aa56:	f7fc fefd 	bl	7854 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    aa5a:	9b04      	ldr	r3, [sp, #16]
    aa5c:	2b02      	cmp	r3, #2
    aa5e:	d107      	bne.n	aa70 <role_disable+0x188>
    aa60:	4b3f      	ldr	r3, [pc, #252]	; (ab60 <role_disable+0x278>)
    aa62:	9301      	str	r3, [sp, #4]
    aa64:	9300      	str	r3, [sp, #0]
    aa66:	4a3f      	ldr	r2, [pc, #252]	; (ab64 <role_disable+0x27c>)
    aa68:	4b44      	ldr	r3, [pc, #272]	; (ab7c <role_disable+0x294>)
    aa6a:	4940      	ldr	r1, [pc, #256]	; (ab6c <role_disable+0x284>)
    aa6c:	4846      	ldr	r0, [pc, #280]	; (ab88 <role_disable+0x2a0>)
    aa6e:	e77f      	b.n	a970 <role_disable+0x88>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    aa70:	9a04      	ldr	r2, [sp, #16]
    aa72:	b99a      	cbnz	r2, aa9c <role_disable+0x1b4>
			ticks_xtal_to_start &= ~XON_BITMASK;
    aa74:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    aa78:	45b0      	cmp	r8, r6
    aa7a:	d922      	bls.n	aac2 <role_disable+0x1da>
				ret = mayfly_enqueue(
    aa7c:	4b43      	ldr	r3, [pc, #268]	; (ab8c <role_disable+0x2a4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    aa7e:	4611      	mov	r1, r2
    aa80:	2003      	movs	r0, #3
    aa82:	f7fc ff0f 	bl	78a4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    aa86:	b9a0      	cbnz	r0, aab2 <role_disable+0x1ca>
	if (!_radio.ticker_id_stop) {
    aa88:	7ca3      	ldrb	r3, [r4, #18]
    aa8a:	b90b      	cbnz	r3, aa90 <role_disable+0x1a8>
		ret_cb = TICKER_STATUS_FAILURE;
    aa8c:	2301      	movs	r3, #1
    aa8e:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    aa90:	2300      	movs	r3, #0
    aa92:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    aa94:	9802      	ldr	r0, [sp, #8]
}
    aa96:	b006      	add	sp, #24
    aa98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    aa9c:	9b04      	ldr	r3, [sp, #16]
    aa9e:	2b01      	cmp	r3, #1
    aaa0:	d153      	bne.n	ab4a <role_disable+0x262>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    aaa2:	2200      	movs	r2, #0
    aaa4:	4611      	mov	r1, r2
    aaa6:	4b39      	ldr	r3, [pc, #228]	; (ab8c <role_disable+0x2a4>)
    aaa8:	2003      	movs	r0, #3
    aaaa:	f7fc fefb 	bl	78a4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    aaae:	4602      	mov	r2, r0
    aab0:	b138      	cbz	r0, aac2 <role_disable+0x1da>
			LL_ASSERT(!ret);
    aab2:	4b2b      	ldr	r3, [pc, #172]	; (ab60 <role_disable+0x278>)
    aab4:	9301      	str	r3, [sp, #4]
    aab6:	9300      	str	r3, [sp, #0]
    aab8:	4a2a      	ldr	r2, [pc, #168]	; (ab64 <role_disable+0x27c>)
    aaba:	4b30      	ldr	r3, [pc, #192]	; (ab7c <role_disable+0x294>)
    aabc:	492b      	ldr	r1, [pc, #172]	; (ab6c <role_disable+0x284>)
    aabe:	4834      	ldr	r0, [pc, #208]	; (ab90 <role_disable+0x2a8>)
    aac0:	e756      	b.n	a970 <role_disable+0x88>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    aac2:	4b34      	ldr	r3, [pc, #208]	; (ab94 <role_disable+0x2ac>)
    aac4:	e7db      	b.n	aa7e <role_disable+0x196>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    aac6:	9d03      	ldr	r5, [sp, #12]
    aac8:	2d01      	cmp	r5, #1
    aaca:	d13e      	bne.n	ab4a <role_disable+0x262>
		if (ticker_id_stop != TICKER_NULL) {
    aacc:	2fff      	cmp	r7, #255	; 0xff
    aace:	d029      	beq.n	ab24 <role_disable+0x23c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    aad0:	ab06      	add	r3, sp, #24
    aad2:	2202      	movs	r2, #2
    aad4:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    aad8:	2103      	movs	r1, #3
    aada:	9300      	str	r3, [sp, #0]
    aadc:	463a      	mov	r2, r7
    aade:	4b1f      	ldr	r3, [pc, #124]	; (ab5c <role_disable+0x274>)
    aae0:	2000      	movs	r0, #0
    aae2:	f7fd fd3b 	bl	855c <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    aae6:	2802      	cmp	r0, #2
    aae8:	d10f      	bne.n	ab0a <role_disable+0x222>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    aaea:	462a      	mov	r2, r5
    aaec:	4629      	mov	r1, r5
    aaee:	2003      	movs	r0, #3
    aaf0:	f7fc feb0 	bl	7854 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    aaf4:	9b05      	ldr	r3, [sp, #20]
    aaf6:	2b02      	cmp	r3, #2
    aaf8:	d107      	bne.n	ab0a <role_disable+0x222>
    aafa:	4b19      	ldr	r3, [pc, #100]	; (ab60 <role_disable+0x278>)
    aafc:	9301      	str	r3, [sp, #4]
    aafe:	9300      	str	r3, [sp, #0]
    ab00:	4a18      	ldr	r2, [pc, #96]	; (ab64 <role_disable+0x27c>)
    ab02:	4b1e      	ldr	r3, [pc, #120]	; (ab7c <role_disable+0x294>)
    ab04:	4919      	ldr	r1, [pc, #100]	; (ab6c <role_disable+0x284>)
    ab06:	4824      	ldr	r0, [pc, #144]	; (ab98 <role_disable+0x2b0>)
    ab08:	e732      	b.n	a970 <role_disable+0x88>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    ab0a:	9b05      	ldr	r3, [sp, #20]
    ab0c:	b153      	cbz	r3, ab24 <role_disable+0x23c>
    ab0e:	9b05      	ldr	r3, [sp, #20]
    ab10:	2b01      	cmp	r3, #1
    ab12:	d007      	beq.n	ab24 <role_disable+0x23c>
    ab14:	4b12      	ldr	r3, [pc, #72]	; (ab60 <role_disable+0x278>)
    ab16:	9301      	str	r3, [sp, #4]
    ab18:	9300      	str	r3, [sp, #0]
    ab1a:	4a12      	ldr	r2, [pc, #72]	; (ab64 <role_disable+0x27c>)
    ab1c:	4b17      	ldr	r3, [pc, #92]	; (ab7c <role_disable+0x294>)
    ab1e:	4913      	ldr	r1, [pc, #76]	; (ab6c <role_disable+0x284>)
    ab20:	481e      	ldr	r0, [pc, #120]	; (ab9c <role_disable+0x2b4>)
    ab22:	e725      	b.n	a970 <role_disable+0x88>
		if (_radio.role != ROLE_NONE) {
    ab24:	7ce3      	ldrb	r3, [r4, #19]
    ab26:	2b00      	cmp	r3, #0
    ab28:	d0ae      	beq.n	aa88 <role_disable+0x1a0>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    ab2a:	4b1d      	ldr	r3, [pc, #116]	; (aba0 <role_disable+0x2b8>)
    ab2c:	2204      	movs	r2, #4
    ab2e:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    ab30:	2200      	movs	r2, #0
    ab32:	4611      	mov	r1, r2
    ab34:	2003      	movs	r0, #3
    ab36:	f7fc feb5 	bl	78a4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    ab3a:	2800      	cmp	r0, #0
    ab3c:	d1b9      	bne.n	aab2 <role_disable+0x1ca>
			while (_radio.role != ROLE_NONE) {
    ab3e:	7ce3      	ldrb	r3, [r4, #19]
    ab40:	2b00      	cmp	r3, #0
    ab42:	d0a1      	beq.n	aa88 <role_disable+0x1a0>
				cpu_sleep();
    ab44:	f7ff fcc0 	bl	a4c8 <cpu_sleep>
    ab48:	e7f9      	b.n	ab3e <role_disable+0x256>
		LL_ASSERT(0);
    ab4a:	4b05      	ldr	r3, [pc, #20]	; (ab60 <role_disable+0x278>)
    ab4c:	9301      	str	r3, [sp, #4]
    ab4e:	9300      	str	r3, [sp, #0]
    ab50:	4b0a      	ldr	r3, [pc, #40]	; (ab7c <role_disable+0x294>)
    ab52:	e71f      	b.n	a994 <role_disable+0xac>
				return 1;
    ab54:	2001      	movs	r0, #1
    ab56:	e79e      	b.n	aa96 <role_disable+0x1ae>
    ab58:	200008c8 	.word	0x200008c8
    ab5c:	0000a50d 	.word	0x0000a50d
    ab60:	000153a9 	.word	0x000153a9
    ab64:	00016765 	.word	0x00016765
    ab68:	00018426 	.word	0x00018426
    ab6c:	000167b4 	.word	0x000167b4
    ab70:	00018d98 	.word	0x00018d98
    ab74:	00018d58 	.word	0x00018d58
    ab78:	000166d9 	.word	0x000166d9
    ab7c:	00018412 	.word	0x00018412
    ab80:	00018dd0 	.word	0x00018dd0
    ab84:	00018e01 	.word	0x00018e01
    ab88:	00018e3b 	.word	0x00018e3b
    ab8c:	20003d60 	.word	0x20003d60
    ab90:	00018e6b 	.word	0x00018e6b
    ab94:	20003e00 	.word	0x20003e00
    ab98:	00018e91 	.word	0x00018e91
    ab9c:	00018ec3 	.word	0x00018ec3
    aba0:	20003d80 	.word	0x20003d80

0000aba4 <mayfly_xtal_retain>:
{
    aba4:	b513      	push	{r0, r1, r4, lr}
    aba6:	4b1d      	ldr	r3, [pc, #116]	; (ac1c <mayfly_xtal_retain+0x78>)
    aba8:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    abaa:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    abac:	b301      	cbz	r1, abf0 <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    abae:	2a00      	cmp	r2, #0
    abb0:	d132      	bne.n	ac18 <mayfly_xtal_retain+0x74>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    abb2:	2801      	cmp	r0, #1
    abb4:	d00e      	beq.n	abd4 <mayfly_xtal_retain+0x30>
    abb6:	4b1a      	ldr	r3, [pc, #104]	; (ac20 <mayfly_xtal_retain+0x7c>)
    abb8:	9301      	str	r3, [sp, #4]
    abba:	9300      	str	r3, [sp, #0]
    abbc:	4a19      	ldr	r2, [pc, #100]	; (ac24 <mayfly_xtal_retain+0x80>)
    abbe:	4b1a      	ldr	r3, [pc, #104]	; (ac28 <mayfly_xtal_retain+0x84>)
    abc0:	491a      	ldr	r1, [pc, #104]	; (ac2c <mayfly_xtal_retain+0x88>)
    abc2:	481b      	ldr	r0, [pc, #108]	; (ac30 <mayfly_xtal_retain+0x8c>)
			LL_ASSERT(!retval);
    abc4:	f7f6 f9e2 	bl	f8c <printk>
    abc8:	4040      	eors	r0, r0
    abca:	f380 8811 	msr	BASEPRI, r0
    abce:	f04f 0004 	mov.w	r0, #4
    abd2:	df02      	svc	2
			s_xtal_retained = 1;
    abd4:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    abd6:	4b17      	ldr	r3, [pc, #92]	; (ac34 <mayfly_xtal_retain+0x90>)
    abd8:	4611      	mov	r1, r2
    abda:	f7fc fe63 	bl	78a4 <mayfly_enqueue>
			LL_ASSERT(!retval);
    abde:	b1d8      	cbz	r0, ac18 <mayfly_xtal_retain+0x74>
    abe0:	4b0f      	ldr	r3, [pc, #60]	; (ac20 <mayfly_xtal_retain+0x7c>)
    abe2:	9301      	str	r3, [sp, #4]
    abe4:	9300      	str	r3, [sp, #0]
    abe6:	4a0f      	ldr	r2, [pc, #60]	; (ac24 <mayfly_xtal_retain+0x80>)
    abe8:	4b0f      	ldr	r3, [pc, #60]	; (ac28 <mayfly_xtal_retain+0x84>)
    abea:	4910      	ldr	r1, [pc, #64]	; (ac2c <mayfly_xtal_retain+0x88>)
    abec:	4812      	ldr	r0, [pc, #72]	; (ac38 <mayfly_xtal_retain+0x94>)
    abee:	e7e9      	b.n	abc4 <mayfly_xtal_retain+0x20>
		if (s_xtal_retained) {
    abf0:	b192      	cbz	r2, ac18 <mayfly_xtal_retain+0x74>
			s_xtal_retained = 0;
    abf2:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    abf4:	b170      	cbz	r0, ac14 <mayfly_xtal_retain+0x70>
    abf6:	2801      	cmp	r0, #1
    abf8:	d104      	bne.n	ac04 <mayfly_xtal_retain+0x60>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    abfa:	4b10      	ldr	r3, [pc, #64]	; (ac3c <mayfly_xtal_retain+0x98>)
			retval = mayfly_enqueue(caller_id,
    abfc:	2200      	movs	r2, #0
    abfe:	4611      	mov	r1, r2
    ac00:	4620      	mov	r0, r4
    ac02:	e7ea      	b.n	abda <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    ac04:	4b06      	ldr	r3, [pc, #24]	; (ac20 <mayfly_xtal_retain+0x7c>)
    ac06:	9301      	str	r3, [sp, #4]
    ac08:	9300      	str	r3, [sp, #0]
    ac0a:	4a06      	ldr	r2, [pc, #24]	; (ac24 <mayfly_xtal_retain+0x80>)
    ac0c:	4b06      	ldr	r3, [pc, #24]	; (ac28 <mayfly_xtal_retain+0x84>)
    ac0e:	4907      	ldr	r1, [pc, #28]	; (ac2c <mayfly_xtal_retain+0x88>)
    ac10:	480b      	ldr	r0, [pc, #44]	; (ac40 <mayfly_xtal_retain+0x9c>)
    ac12:	e7d7      	b.n	abc4 <mayfly_xtal_retain+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    ac14:	4b0b      	ldr	r3, [pc, #44]	; (ac44 <mayfly_xtal_retain+0xa0>)
    ac16:	e7f1      	b.n	abfc <mayfly_xtal_retain+0x58>
}
    ac18:	b002      	add	sp, #8
    ac1a:	bd10      	pop	{r4, pc}
    ac1c:	20000ac8 	.word	0x20000ac8
    ac20:	000153a9 	.word	0x000153a9
    ac24:	00016765 	.word	0x00016765
    ac28:	000181cb 	.word	0x000181cb
    ac2c:	000167b4 	.word	0x000167b4
    ac30:	00018bb1 	.word	0x00018bb1
    ac34:	20003dd0 	.word	0x20003dd0
    ac38:	00018be1 	.word	0x00018be1
    ac3c:	20003df0 	.word	0x20003df0
    ac40:	000166d9 	.word	0x000166d9
    ac44:	20003de0 	.word	0x20003de0

0000ac48 <rx_packet_set>:
{
    ac48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    ac4a:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    ac4e:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    ac50:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    ac52:	f004 0407 	and.w	r4, r4, #7
{
    ac56:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    ac58:	4620      	mov	r0, r4
    ac5a:	2100      	movs	r1, #0
    ac5c:	f008 f816 	bl	12c8c <radio_phy_set>
	if (conn->enc_rx) {
    ac60:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    ac64:	f013 0f10 	tst.w	r3, #16
    ac68:	ea4f 0244 	mov.w	r2, r4, lsl #1
    ac6c:	d010      	beq.n	ac90 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    ac6e:	1d29      	adds	r1, r5, #4
    ac70:	f042 0201 	orr.w	r2, r2, #1
    ac74:	b2c9      	uxtb	r1, r1
    ac76:	2008      	movs	r0, #8
    ac78:	f008 f84e 	bl	12d18 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    ac7c:	463a      	mov	r2, r7
    ac7e:	4621      	mov	r1, r4
    ac80:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    ac84:	f008 fa8c 	bl	131a0 <radio_ccm_rx_pkt_set>
}
    ac88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    ac8c:	f008 b872 	b.w	12d74 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    ac90:	2008      	movs	r0, #8
    ac92:	f042 0201 	orr.w	r2, r2, #1
    ac96:	b2e9      	uxtb	r1, r5
    ac98:	f008 f83e 	bl	12d18 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    ac9c:	4638      	mov	r0, r7
    ac9e:	e7f3      	b.n	ac88 <rx_packet_set+0x40>

0000aca0 <tx_packet_set>:
{
    aca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aca2:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    aca4:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    aca8:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    acaa:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    acae:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    acb0:	09c9      	lsrs	r1, r1, #7
    acb2:	4620      	mov	r0, r4
    acb4:	f007 ffea 	bl	12c8c <radio_phy_set>
	if (conn->enc_tx) {
    acb8:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    acbc:	f013 0f20 	tst.w	r3, #32
    acc0:	ea4f 0244 	mov.w	r2, r4, lsl #1
    acc4:	d00f      	beq.n	ace6 <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    acc6:	1d29      	adds	r1, r5, #4
    acc8:	b2c9      	uxtb	r1, r1
    acca:	2008      	movs	r0, #8
    accc:	f042 0201 	orr.w	r2, r2, #1
    acd0:	f008 f822 	bl	12d18 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    acd4:	4639      	mov	r1, r7
    acd6:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    acda:	f008 fa9d 	bl	13218 <radio_ccm_tx_pkt_set>
}
    acde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    ace2:	f008 b84d 	b.w	12d80 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    ace6:	2008      	movs	r0, #8
    ace8:	f042 0201 	orr.w	r2, r2, #1
    acec:	b2e9      	uxtb	r1, r5
    acee:	f008 f813 	bl	12d18 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    acf2:	4638      	mov	r0, r7
    acf4:	e7f3      	b.n	acde <tx_packet_set+0x3e>
	...

0000acf8 <sched_free_win_offset_calc>:
{
    acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acfc:	b08f      	sub	sp, #60	; 0x3c
    acfe:	4692      	mov	sl, r2
    ad00:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    ad02:	6803      	ldr	r3, [r0, #0]
{
    ad04:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    ad06:	2b00      	cmp	r3, #0
{
    ad08:	4680      	mov	r8, r0
    ad0a:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    ad0c:	da3a      	bge.n	ad84 <sched_free_win_offset_calc+0x8c>
		u32_t ticks_prepare_to_start =
    ad0e:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    ad10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    ad14:	4291      	cmp	r1, r2
    ad16:	bf2c      	ite	cs
    ad18:	1a5a      	subcs	r2, r3, r1
    ad1a:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    ad1c:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    ad1e:	f8d8 200c 	ldr.w	r2, [r8, #12]
    ad22:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    ad24:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    ad26:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    ad28:	18d3      	adds	r3, r2, r3
    ad2a:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    ad2c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    ad30:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    ad34:	940c      	str	r4, [sp, #48]	; 0x30
    ad36:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    ad38:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    ad3a:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    ad3c:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    ad3e:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ad40:	2302      	movs	r3, #2
    ad42:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    ad44:	ab0d      	add	r3, sp, #52	; 0x34
    ad46:	9302      	str	r3, [sp, #8]
    ad48:	4b81      	ldr	r3, [pc, #516]	; (af50 <sched_free_win_offset_calc+0x258>)
    ad4a:	9301      	str	r3, [sp, #4]
    ad4c:	ab0b      	add	r3, sp, #44	; 0x2c
    ad4e:	9300      	str	r3, [sp, #0]
    ad50:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    ad54:	ab0c      	add	r3, sp, #48	; 0x30
    ad56:	2101      	movs	r1, #1
    ad58:	2000      	movs	r0, #0
    ad5a:	f7fd fc3b 	bl	85d4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    ad5e:	2802      	cmp	r0, #2
    ad60:	d019      	beq.n	ad96 <sched_free_win_offset_calc+0x9e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    ad62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ad64:	b1db      	cbz	r3, ad9e <sched_free_win_offset_calc+0xa6>
    ad66:	4b7b      	ldr	r3, [pc, #492]	; (af54 <sched_free_win_offset_calc+0x25c>)
    ad68:	9301      	str	r3, [sp, #4]
    ad6a:	9300      	str	r3, [sp, #0]
    ad6c:	4a7a      	ldr	r2, [pc, #488]	; (af58 <sched_free_win_offset_calc+0x260>)
    ad6e:	4b7b      	ldr	r3, [pc, #492]	; (af5c <sched_free_win_offset_calc+0x264>)
    ad70:	497b      	ldr	r1, [pc, #492]	; (af60 <sched_free_win_offset_calc+0x268>)
    ad72:	487c      	ldr	r0, [pc, #496]	; (af64 <sched_free_win_offset_calc+0x26c>)
			LL_ASSERT(0);
    ad74:	f7f6 f90a 	bl	f8c <printk>
    ad78:	4040      	eors	r0, r0
    ad7a:	f380 8811 	msr	BASEPRI, r0
    ad7e:	f04f 0004 	mov.w	r0, #4
    ad82:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    ad84:	4293      	cmp	r3, r2
    ad86:	bf38      	it	cc
    ad88:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    ad8a:	2200      	movs	r2, #0
    ad8c:	e7c6      	b.n	ad1c <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    ad8e:	2101      	movs	r1, #1
    ad90:	2000      	movs	r0, #0
    ad92:	f7fd fc9d 	bl	86d0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    ad96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ad98:	2b02      	cmp	r3, #2
    ad9a:	d0f8      	beq.n	ad8e <sched_free_win_offset_calc+0x96>
    ad9c:	e7e1      	b.n	ad62 <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    ad9e:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    ada2:	2aff      	cmp	r2, #255	; 0xff
    ada4:	d065      	beq.n	ae72 <sched_free_win_offset_calc+0x17a>
		if ((ticker_id_prev != 0xff) &&
    ada6:	2fff      	cmp	r7, #255	; 0xff
    ada8:	d00a      	beq.n	adc0 <sched_free_win_offset_calc+0xc8>
    adaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    adac:	4599      	cmp	r9, r3
    adae:	d007      	beq.n	adc0 <sched_free_win_offset_calc+0xc8>
			LL_ASSERT(0);
    adb0:	4b68      	ldr	r3, [pc, #416]	; (af54 <sched_free_win_offset_calc+0x25c>)
    adb2:	9301      	str	r3, [sp, #4]
    adb4:	9300      	str	r3, [sp, #0]
    adb6:	4a68      	ldr	r2, [pc, #416]	; (af58 <sched_free_win_offset_calc+0x260>)
    adb8:	4b68      	ldr	r3, [pc, #416]	; (af5c <sched_free_win_offset_calc+0x264>)
    adba:	4969      	ldr	r1, [pc, #420]	; (af60 <sched_free_win_offset_calc+0x268>)
    adbc:	486a      	ldr	r0, [pc, #424]	; (af68 <sched_free_win_offset_calc+0x270>)
    adbe:	e7d9      	b.n	ad74 <sched_free_win_offset_calc+0x7c>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    adc0:	2a05      	cmp	r2, #5
    adc2:	d951      	bls.n	ae68 <sched_free_win_offset_calc+0x170>
				  _radio.connection_count)) {
    adc4:	4869      	ldr	r0, [pc, #420]	; (af6c <sched_free_win_offset_calc+0x274>)
    adc6:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    adca:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    adcc:	429a      	cmp	r2, r3
    adce:	da4b      	bge.n	ae68 <sched_free_win_offset_calc+0x170>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    add0:	2a06      	cmp	r2, #6
    add2:	f000 8092 	beq.w	aefa <sched_free_win_offset_calc+0x202>
		if (ticker_id_other != 0xFF) {
    add6:	9b06      	ldr	r3, [sp, #24]
    add8:	2bff      	cmp	r3, #255	; 0xff
    adda:	d14a      	bne.n	ae72 <sched_free_win_offset_calc+0x17a>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    addc:	3a07      	subs	r2, #7
    adde:	b292      	uxth	r2, r2
    ade0:	f44f 71aa 	mov.w	r1, #340	; 0x154
    ade4:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    ade8:	f7fc fcc6 	bl	7778 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    adec:	4580      	cmp	r8, r0
    adee:	d03b      	beq.n	ae68 <sched_free_win_offset_calc+0x170>
    adf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    adf2:	b91b      	cbnz	r3, adfc <sched_free_win_offset_calc+0x104>
    adf4:	f990 301d 	ldrsb.w	r3, [r0, #29]
    adf8:	2b00      	cmp	r3, #0
    adfa:	db35      	blt.n	ae68 <sched_free_win_offset_calc+0x170>
			u32_t ticks_to_expire_normal =
    adfc:	9b05      	ldr	r3, [sp, #20]
    adfe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ae00:	6841      	ldr	r1, [r0, #4]
    ae02:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    ae04:	6803      	ldr	r3, [r0, #0]
    ae06:	2b00      	cmp	r3, #0
    ae08:	da4e      	bge.n	aea8 <sched_free_win_offset_calc+0x1b0>
				u32_t ticks_prepare_to_start =
    ae0a:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    ae0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    ae10:	428a      	cmp	r2, r1
    ae12:	bf2c      	ite	cs
    ae14:	18b6      	addcs	r6, r6, r2
    ae16:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    ae18:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    ae1a:	68c2      	ldr	r2, [r0, #12]
    ae1c:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    ae20:	444b      	add	r3, r9
    ae22:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    ae24:	f8da 3000 	ldr.w	r3, [sl]
    ae28:	429e      	cmp	r6, r3
    ae2a:	d916      	bls.n	ae5a <sched_free_win_offset_calc+0x162>
    ae2c:	429d      	cmp	r5, r3
    ae2e:	bf38      	it	cc
    ae30:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    ae32:	9b07      	ldr	r3, [sp, #28]
    ae34:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    ae38:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ae3a:	781b      	ldrb	r3, [r3, #0]
    ae3c:	42a3      	cmp	r3, r4
    ae3e:	d905      	bls.n	ae4c <sched_free_win_offset_calc+0x154>
				       (ticker_ticks_diff_get(
    ae40:	4629      	mov	r1, r5
    ae42:	4630      	mov	r0, r6
    ae44:	f7fd fc5c 	bl	8700 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    ae48:	42b8      	cmp	r0, r7
    ae4a:	d231      	bcs.n	aeb0 <sched_free_win_offset_calc+0x1b8>
				if (_win_offset >= conn_interval) {
    ae4c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    ae50:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    ae52:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    ae56:	4293      	cmp	r3, r2
    ae58:	d20b      	bcs.n	ae72 <sched_free_win_offset_calc+0x17a>
			ticks_anchor_prev = ticks_anchor;
    ae5a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    ae5e:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    ae62:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    ae66:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    ae68:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ae6a:	781b      	ldrb	r3, [r3, #0]
    ae6c:	42a3      	cmp	r3, r4
    ae6e:	f63f af67 	bhi.w	ad40 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    ae72:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    ae76:	2bff      	cmp	r3, #255	; 0xff
    ae78:	d111      	bne.n	ae9e <sched_free_win_offset_calc+0x1a6>
    ae7a:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    ae7e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; af70 <sched_free_win_offset_calc+0x278>
    ae82:	a731      	add	r7, pc, #196	; (adr r7, af48 <sched_free_win_offset_calc+0x250>)
    ae84:	e9d7 6700 	ldrd	r6, r7, [r7]
    ae88:	429d      	cmp	r5, r3
    ae8a:	bf38      	it	cc
    ae8c:	461d      	movcc	r5, r3
    ae8e:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    ae92:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ae94:	781b      	ldrb	r3, [r3, #0]
    ae96:	42a3      	cmp	r3, r4
    ae98:	d831      	bhi.n	aefe <sched_free_win_offset_calc+0x206>
		*ticks_to_offset_next = ticks_to_expire_prev;
    ae9a:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    ae9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    aea0:	701c      	strb	r4, [r3, #0]
}
    aea2:	b00f      	add	sp, #60	; 0x3c
    aea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    aea8:	428b      	cmp	r3, r1
    aeaa:	bf38      	it	cc
    aeac:	460b      	movcc	r3, r1
    aeae:	e7b4      	b.n	ae1a <sched_free_win_offset_calc+0x122>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    aeb0:	4a2f      	ldr	r2, [pc, #188]	; (af70 <sched_free_win_offset_calc+0x278>)
    aeb2:	eb05 030b 	add.w	r3, r5, fp
    aeb6:	fba3 0102 	umull	r0, r1, r3, r2
    aeba:	2207      	movs	r2, #7
    aebc:	fb02 1103 	mla	r1, r2, r3, r1
    aec0:	a321      	add	r3, pc, #132	; (adr r3, af48 <sched_free_win_offset_calc+0x250>)
    aec2:	e9d3 2300 	ldrd	r2, r3, [r3]
    aec6:	f7f5 f9a5 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    aeca:	f240 43e2 	movw	r3, #1250	; 0x4e2
    aece:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    aed2:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    aed4:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    aed6:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    aed8:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    aedc:	d20b      	bcs.n	aef6 <sched_free_win_offset_calc+0x1fe>
					memcpy(win_offset +
    aede:	9b19      	ldr	r3, [sp, #100]	; 0x64
    aee0:	2202      	movs	r2, #2
    aee2:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    aee6:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    aeea:	3401      	adds	r4, #1
					memcpy(win_offset +
    aeec:	f7f6 fe86 	bl	1bfc <memcpy>
					offset_index++;
    aef0:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    aef2:	3528      	adds	r5, #40	; 0x28
    aef4:	e7a0      	b.n	ae38 <sched_free_win_offset_calc+0x140>
						ticks_to_expire_prev = 0;
    aef6:	2500      	movs	r5, #0
    aef8:	e7a8      	b.n	ae4c <sched_free_win_offset_calc+0x154>
    aefa:	9206      	str	r2, [sp, #24]
    aefc:	e7b4      	b.n	ae68 <sched_free_win_offset_calc+0x170>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    aefe:	eb05 030b 	add.w	r3, r5, fp
    af02:	fba3 0108 	umull	r0, r1, r3, r8
    af06:	fb09 1103 	mla	r1, r9, r3, r1
    af0a:	4632      	mov	r2, r6
    af0c:	463b      	mov	r3, r7
    af0e:	f7f5 f981 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    af12:	f240 43e2 	movw	r3, #1250	; 0x4e2
    af16:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    af1a:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    af1c:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    af1e:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    af20:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    af24:	d90b      	bls.n	af3e <sched_free_win_offset_calc+0x246>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    af26:	9b19      	ldr	r3, [sp, #100]	; 0x64
    af28:	2202      	movs	r2, #2
    af2a:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    af2e:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    af32:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    af34:	f7f6 fe62 	bl	1bfc <memcpy>
			offset_index++;
    af38:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    af3a:	3528      	adds	r5, #40	; 0x28
    af3c:	e7a9      	b.n	ae92 <sched_free_win_offset_calc+0x19a>
				ticks_to_expire_prev = 0;
    af3e:	2500      	movs	r5, #0
    af40:	e7ab      	b.n	ae9a <sched_free_win_offset_calc+0x1a2>
    af42:	bf00      	nop
    af44:	f3af 8000 	nop.w
    af48:	3b9aca00 	.word	0x3b9aca00
    af4c:	00000000 	.word	0x00000000
    af50:	0000a50d 	.word	0x0000a50d
    af54:	000153a9 	.word	0x000153a9
    af58:	00016765 	.word	0x00016765
    af5c:	00018247 	.word	0x00018247
    af60:	000167b4 	.word	0x000167b4
    af64:	00018f66 	.word	0x00018f66
    af68:	000166d9 	.word	0x000166d9
    af6c:	200008c8 	.word	0x200008c8
    af70:	1afd498d 	.word	0x1afd498d

0000af74 <mayfly_sched_free_win_offset_calc>:
{
    af74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    af76:	2300      	movs	r3, #0
    af78:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    af7a:	2306      	movs	r3, #6
    af7c:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    af80:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    af84:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    af88:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    af8a:	bfbe      	ittt	lt
    af8c:	4602      	movlt	r2, r0
    af8e:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    af90:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    af94:	9101      	str	r1, [sp, #4]
    af96:	f10d 010b 	add.w	r1, sp, #11
    af9a:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    af9c:	bfa8      	it	ge
    af9e:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    afa0:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    afa4:	2100      	movs	r1, #0
    afa6:	f7ff fea7 	bl	acf8 <sched_free_win_offset_calc>
}
    afaa:	b005      	add	sp, #20
    afac:	f85d fb04 	ldr.w	pc, [sp], #4

0000afb0 <mayfly_sched_win_offset_select>:
{
    afb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    afb4:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    afb8:	b089      	sub	sp, #36	; 0x24
    afba:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    afbc:	4840      	ldr	r0, [pc, #256]	; (b0c0 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    afbe:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    afc0:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    afc2:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    afc6:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    afca:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    afce:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    afd0:	fb03 1102 	mla	r1, r3, r2, r1
    afd4:	a338      	add	r3, pc, #224	; (adr r3, b0b8 <mayfly_sched_win_offset_select+0x108>)
    afd6:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    afda:	9505      	str	r5, [sp, #20]
    afdc:	6075      	str	r5, [r6, #4]
    afde:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    afe0:	f7f5 f918 	bl	214 <__aeabi_uldivmod>
    afe4:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    afe6:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    afea:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    afee:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    aff2:	9100      	str	r1, [sp, #0]
    aff4:	9601      	str	r6, [sp, #4]
    aff6:	2101      	movs	r1, #1
    aff8:	4620      	mov	r0, r4
    affa:	f7ff fe7d 	bl	acf8 <sched_free_win_offset_calc>
    affe:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    b002:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    b006:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    b00a:	2202      	movs	r2, #2
    b00c:	4639      	mov	r1, r7
    b00e:	f10d 000e 	add.w	r0, sp, #14
    b012:	f7f6 fdf3 	bl	1bfc <memcpy>
		while (offset_index_m < offset_m_max) {
    b016:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    b01a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    b01e:	2300      	movs	r3, #0
    b020:	b2d9      	uxtb	r1, r3
    b022:	4288      	cmp	r0, r1
    b024:	d811      	bhi.n	b04a <mayfly_sched_win_offset_select+0x9a>
    b026:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    b028:	4547      	cmp	r7, r8
    b02a:	d1ee      	bne.n	b00a <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    b02c:	b9b5      	cbnz	r5, b05c <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    b02e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    b032:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b036:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    b038:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    b03c:	2202      	movs	r2, #2
    b03e:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    b040:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    b044:	f7f6 fdda 	bl	1bfc <memcpy>
    b048:	e027      	b.n	b09a <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    b04a:	454a      	cmp	r2, r9
    b04c:	d004      	beq.n	b058 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    b04e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    b052:	4291      	cmp	r1, r2
    b054:	d024      	beq.n	b0a0 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    b056:	2501      	movs	r5, #1
    b058:	3301      	adds	r3, #1
    b05a:	e7e1      	b.n	b020 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    b05c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    b060:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    b064:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    b068:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    b06c:	4b15      	ldr	r3, [pc, #84]	; (b0c4 <mayfly_sched_win_offset_select+0x114>)
    b06e:	2200      	movs	r2, #0
    b070:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    b074:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b078:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    b07c:	f042 0203 	orr.w	r2, r2, #3
    b080:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    b084:	2203      	movs	r2, #3
    b086:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    b08a:	2211      	movs	r2, #17
    b08c:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    b090:	220f      	movs	r2, #15
    b092:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    b096:	2220      	movs	r2, #32
    b098:	701a      	strb	r2, [r3, #0]
}
    b09a:	b009      	add	sp, #36	; 0x24
    b09c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    b0a0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b0a4:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    b0a6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    b0aa:	2202      	movs	r2, #2
    b0ac:	f10d 010e 	add.w	r1, sp, #14
    b0b0:	e7c6      	b.n	b040 <mayfly_sched_win_offset_select+0x90>
    b0b2:	bf00      	nop
    b0b4:	f3af 8000 	nop.w
    b0b8:	1afd498d 	.word	0x1afd498d
    b0bc:	00000007 	.word	0x00000007
    b0c0:	09ce5400 	.word	0x09ce5400
    b0c4:	200008c8 	.word	0x200008c8

0000b0c8 <sched_after_mstr_free_slot_get>:
{
    b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0cc:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    b0ce:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    b0d0:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    b0d2:	f8df 9140 	ldr.w	r9, [pc, #320]	; b214 <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    b0d6:	f88d 501f 	strb.w	r5, [sp, #31]
{
    b0da:	4680      	mov	r8, r0
    b0dc:	4693      	mov	fp, r2
    b0de:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    b0e0:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    b0e4:	601c      	str	r4, [r3, #0]
    b0e6:	9408      	str	r4, [sp, #32]
    b0e8:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b0ea:	2302      	movs	r3, #2
    b0ec:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b0ee:	ab09      	add	r3, sp, #36	; 0x24
    b0f0:	9302      	str	r3, [sp, #8]
    b0f2:	4b41      	ldr	r3, [pc, #260]	; (b1f8 <sched_after_mstr_free_slot_get+0x130>)
    b0f4:	9301      	str	r3, [sp, #4]
    b0f6:	ab08      	add	r3, sp, #32
    b0f8:	9300      	str	r3, [sp, #0]
    b0fa:	f10d 021f 	add.w	r2, sp, #31
    b0fe:	465b      	mov	r3, fp
    b100:	4641      	mov	r1, r8
    b102:	2000      	movs	r0, #0
    b104:	f7fd fa66 	bl	85d4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b108:	2802      	cmp	r0, #2
    b10a:	d014      	beq.n	b136 <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b10c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b10e:	b1b3      	cbz	r3, b13e <sched_after_mstr_free_slot_get+0x76>
    b110:	4b3a      	ldr	r3, [pc, #232]	; (b1fc <sched_after_mstr_free_slot_get+0x134>)
    b112:	9301      	str	r3, [sp, #4]
    b114:	9300      	str	r3, [sp, #0]
    b116:	4a3a      	ldr	r2, [pc, #232]	; (b200 <sched_after_mstr_free_slot_get+0x138>)
    b118:	4b3a      	ldr	r3, [pc, #232]	; (b204 <sched_after_mstr_free_slot_get+0x13c>)
    b11a:	493b      	ldr	r1, [pc, #236]	; (b208 <sched_after_mstr_free_slot_get+0x140>)
    b11c:	483b      	ldr	r0, [pc, #236]	; (b20c <sched_after_mstr_free_slot_get+0x144>)
    b11e:	f7f5 ff35 	bl	f8c <printk>
    b122:	4040      	eors	r0, r0
    b124:	f380 8811 	msr	BASEPRI, r0
    b128:	f04f 0004 	mov.w	r0, #4
    b12c:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b12e:	4641      	mov	r1, r8
    b130:	2000      	movs	r0, #0
    b132:	f7fd facd 	bl	86d0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b136:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b138:	2b02      	cmp	r3, #2
    b13a:	d0f8      	beq.n	b12e <sched_after_mstr_free_slot_get+0x66>
    b13c:	e7e6      	b.n	b10c <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    b13e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b142:	2aff      	cmp	r2, #255	; 0xff
    b144:	d04e      	beq.n	b1e4 <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    b146:	2a06      	cmp	r2, #6
    b148:	d9cf      	bls.n	b0ea <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    b14a:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b14e:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    b150:	429a      	cmp	r2, r3
    b152:	daca      	bge.n	b0ea <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b154:	3a07      	subs	r2, #7
    b156:	b292      	uxth	r2, r2
    b158:	f44f 71aa 	mov.w	r1, #340	; 0x154
    b15c:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    b160:	f7fc fb0a 	bl	7778 <mem_get>
		if (conn && !conn->role) {
    b164:	2800      	cmp	r0, #0
    b166:	d0c0      	beq.n	b0ea <sched_after_mstr_free_slot_get+0x22>
    b168:	f990 301d 	ldrsb.w	r3, [r0, #29]
    b16c:	2b00      	cmp	r3, #0
    b16e:	dbbc      	blt.n	b0ea <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b170:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    b172:	9a08      	ldr	r2, [sp, #32]
    b174:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b178:	2b00      	cmp	r3, #0
    b17a:	da12      	bge.n	b1a2 <sched_after_mstr_free_slot_get+0xda>
    b17c:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    b17e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    b182:	4571      	cmp	r1, lr
    b184:	bf2c      	ite	cs
    b186:	1852      	addcs	r2, r2, r1
    b188:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    b18a:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    b18c:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    b18e:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    b190:	f101 0104 	add.w	r1, r1, #4
    b194:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    b196:	d108      	bne.n	b1aa <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    b198:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    b19c:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    b19e:	4616      	mov	r6, r2
    b1a0:	e7a3      	b.n	b0ea <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    b1a2:	4573      	cmp	r3, lr
    b1a4:	bf38      	it	cc
    b1a6:	4673      	movcc	r3, lr
    b1a8:	e7f0      	b.n	b18c <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    b1aa:	4631      	mov	r1, r6
    b1ac:	4610      	mov	r0, r2
    b1ae:	9305      	str	r3, [sp, #20]
    b1b0:	9204      	str	r2, [sp, #16]
    b1b2:	f7fd faa5 	bl	8700 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    b1b6:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    b1ba:	4288      	cmp	r0, r1
    b1bc:	9a04      	ldr	r2, [sp, #16]
    b1be:	9b05      	ldr	r3, [sp, #20]
    b1c0:	d9ea      	bls.n	b198 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    b1c2:	4813      	ldr	r0, [pc, #76]	; (b210 <sched_after_mstr_free_slot_get+0x148>)
    b1c4:	4434      	add	r4, r6
    b1c6:	fba4 0100 	umull	r0, r1, r4, r0
    b1ca:	2307      	movs	r3, #7
    b1cc:	fb03 1104 	mla	r1, r3, r4, r1
    b1d0:	a307      	add	r3, pc, #28	; (adr r3, b1f0 <sched_after_mstr_free_slot_get+0x128>)
    b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    b1d6:	f7f5 f81d 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    b1da:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    b1dc:	6038      	str	r0, [r7, #0]
}
    b1de:	b00b      	add	sp, #44	; 0x2c
    b1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    b1e4:	2dff      	cmp	r5, #255	; 0xff
    b1e6:	d1ec      	bne.n	b1c2 <sched_after_mstr_free_slot_get+0xfa>
    b1e8:	e7f9      	b.n	b1de <sched_after_mstr_free_slot_get+0x116>
    b1ea:	bf00      	nop
    b1ec:	f3af 8000 	nop.w
    b1f0:	3b9aca00 	.word	0x3b9aca00
    b1f4:	00000000 	.word	0x00000000
    b1f8:	0000a50d 	.word	0x0000a50d
    b1fc:	000153a9 	.word	0x000153a9
    b200:	00016765 	.word	0x00016765
    b204:	00018207 	.word	0x00018207
    b208:	000167b4 	.word	0x000167b4
    b20c:	00018f66 	.word	0x00018f66
    b210:	1afd498d 	.word	0x1afd498d
    b214:	200008c8 	.word	0x200008c8

0000b218 <isr_adv_ci_adva_check>:
{
    b218:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    b21a:	7804      	ldrb	r4, [r0, #0]
    b21c:	780a      	ldrb	r2, [r1, #0]
    b21e:	f3c4 1380 	ubfx	r3, r4, #6, #1
    b222:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    b226:	d119      	bne.n	b25c <isr_adv_ci_adva_check+0x44>
    b228:	f004 040f 	and.w	r4, r4, #15
    b22c:	2c01      	cmp	r4, #1
    b22e:	f101 0608 	add.w	r6, r1, #8
    b232:	f100 0502 	add.w	r5, r0, #2
    b236:	d008      	beq.n	b24a <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    b238:	2206      	movs	r2, #6
    b23a:	4631      	mov	r1, r6
    b23c:	4628      	mov	r0, r5
    b23e:	f7f6 fcc8 	bl	1bd2 <memcmp>
			 BDADDR_SIZE)) ||
    b242:	fab0 f080 	clz	r0, r0
    b246:	0940      	lsrs	r0, r0, #5
    b248:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    b24a:	2206      	movs	r2, #6
    b24c:	4631      	mov	r1, r6
    b24e:	4628      	mov	r0, r5
    b250:	f7f6 fcbf 	bl	1bd2 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    b254:	2800      	cmp	r0, #0
    b256:	d1ef      	bne.n	b238 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    b258:	4620      	mov	r0, r4
    b25a:	bd70      	pop	{r4, r5, r6, pc}
    b25c:	2000      	movs	r0, #0
}
    b25e:	bd70      	pop	{r4, r5, r6, pc}

0000b260 <packet_rx_enqueue>:
{
    b260:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    b262:	4a1e      	ldr	r2, [pc, #120]	; (b2dc <packet_rx_enqueue+0x7c>)
    b264:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    b268:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    b26c:	4299      	cmp	r1, r3
    b26e:	d10e      	bne.n	b28e <packet_rx_enqueue+0x2e>
    b270:	4b1b      	ldr	r3, [pc, #108]	; (b2e0 <packet_rx_enqueue+0x80>)
    b272:	9301      	str	r3, [sp, #4]
    b274:	9300      	str	r3, [sp, #0]
    b276:	4a1b      	ldr	r2, [pc, #108]	; (b2e4 <packet_rx_enqueue+0x84>)
    b278:	4b1b      	ldr	r3, [pc, #108]	; (b2e8 <packet_rx_enqueue+0x88>)
    b27a:	491c      	ldr	r1, [pc, #112]	; (b2ec <packet_rx_enqueue+0x8c>)
    b27c:	481c      	ldr	r0, [pc, #112]	; (b2f0 <packet_rx_enqueue+0x90>)
	LL_ASSERT(link);
    b27e:	f7f5 fe85 	bl	f8c <printk>
    b282:	4040      	eors	r0, r0
    b284:	f380 8811 	msr	BASEPRI, r0
    b288:	f04f 0004 	mov.w	r0, #4
    b28c:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    b28e:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    b292:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    b296:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b29a:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    b29e:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b2a0:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    b2a2:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    b2a6:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    b2aa:	3301      	adds	r3, #1
    b2ac:	b2db      	uxtb	r3, r3
		last = 0;
    b2ae:	429c      	cmp	r4, r3
    b2b0:	bf08      	it	eq
    b2b2:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    b2b4:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    b2b8:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    b2bc:	f7fc fa81 	bl	77c2 <memq_enqueue>
	LL_ASSERT(link);
    b2c0:	b938      	cbnz	r0, b2d2 <packet_rx_enqueue+0x72>
    b2c2:	4b07      	ldr	r3, [pc, #28]	; (b2e0 <packet_rx_enqueue+0x80>)
    b2c4:	9301      	str	r3, [sp, #4]
    b2c6:	9300      	str	r3, [sp, #0]
    b2c8:	4a06      	ldr	r2, [pc, #24]	; (b2e4 <packet_rx_enqueue+0x84>)
    b2ca:	4b07      	ldr	r3, [pc, #28]	; (b2e8 <packet_rx_enqueue+0x88>)
    b2cc:	4907      	ldr	r1, [pc, #28]	; (b2ec <packet_rx_enqueue+0x8c>)
    b2ce:	4809      	ldr	r0, [pc, #36]	; (b2f4 <packet_rx_enqueue+0x94>)
    b2d0:	e7d5      	b.n	b27e <packet_rx_enqueue+0x1e>
}
    b2d2:	b002      	add	sp, #8
    b2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    b2d8:	f006 bb9c 	b.w	11a14 <radio_event_callback>
    b2dc:	200008c8 	.word	0x200008c8
    b2e0:	000153a9 	.word	0x000153a9
    b2e4:	00016765 	.word	0x00016765
    b2e8:	00018398 	.word	0x00018398
    b2ec:	000167b4 	.word	0x000167b4
    b2f0:	00018c5e 	.word	0x00018c5e
    b2f4:	00018481 	.word	0x00018481

0000b2f8 <isr_scan_tgta_check>:
{
    b2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b2fc:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    b2fe:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    b300:	f101 0808 	add.w	r8, r1, #8
{
    b304:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    b306:	09c0      	lsrs	r0, r0, #7
    b308:	4641      	mov	r1, r8
{
    b30a:	4691      	mov	r9, r2
    b30c:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    b30e:	f007 f81d 	bl	1234c <ctrl_rl_addr_resolve>
    b312:	4604      	mov	r4, r0
    b314:	b9d8      	cbnz	r0, b34e <isr_scan_tgta_check+0x56>
    b316:	4f1c      	ldr	r7, [pc, #112]	; (b388 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    b318:	f1ba 0f00 	cmp.w	sl, #0
    b31c:	d10e      	bne.n	b33c <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    b31e:	782b      	ldrb	r3, [r5, #0]
    b320:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    b324:	09db      	lsrs	r3, r3, #7
    b326:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    b32a:	d113      	bne.n	b354 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    b32c:	2206      	movs	r2, #6
    b32e:	4641      	mov	r1, r8
    b330:	4816      	ldr	r0, [pc, #88]	; (b38c <isr_scan_tgta_check+0x94>)
    b332:	f7f6 fc4e 	bl	1bd2 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    b336:	b968      	cbnz	r0, b354 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    b338:	2001      	movs	r0, #1
    b33a:	e012      	b.n	b362 <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    b33c:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    b340:	07db      	lsls	r3, r3, #31
    b342:	d5ec      	bpl.n	b31e <isr_scan_tgta_check+0x26>
    b344:	4648      	mov	r0, r9
    b346:	f006 fd5d 	bl	11e04 <ctrl_lrpa_get>
    b34a:	2800      	cmp	r0, #0
    b34c:	d0e7      	beq.n	b31e <isr_scan_tgta_check+0x26>
}
    b34e:	4620      	mov	r0, r4
    b350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    b354:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    b358:	f3c0 1001 	ubfx	r0, r0, #4, #2
    b35c:	f010 0002 	ands.w	r0, r0, #2
    b360:	d101      	bne.n	b366 <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    b362:	4604      	mov	r4, r0
    b364:	e7f3      	b.n	b34e <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    b366:	f995 3000 	ldrsb.w	r3, [r5]
    b36a:	2b00      	cmp	r3, #0
    b36c:	da09      	bge.n	b382 <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    b36e:	7b6b      	ldrb	r3, [r5, #13]
    b370:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b374:	2b40      	cmp	r3, #64	; 0x40
    b376:	d104      	bne.n	b382 <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    b378:	2e00      	cmp	r6, #0
    b37a:	d0dd      	beq.n	b338 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    b37c:	2001      	movs	r0, #1
    b37e:	7030      	strb	r0, [r6, #0]
    b380:	e7ef      	b.n	b362 <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    b382:	2000      	movs	r0, #0
    b384:	e7ed      	b.n	b362 <isr_scan_tgta_check+0x6a>
    b386:	bf00      	nop
    b388:	200008c8 	.word	0x200008c8
    b38c:	200009ac 	.word	0x200009ac

0000b390 <isr_rx_scan_report>:
{
    b390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b394:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    b396:	2003      	movs	r0, #3
{
    b398:	460f      	mov	r7, r1
    b39a:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    b39c:	f7ff f8f6 	bl	a58c <packet_rx_reserve_get>
	if (node_rx == 0) {
    b3a0:	4604      	mov	r4, r0
    b3a2:	2800      	cmp	r0, #0
    b3a4:	d03e      	beq.n	b424 <isr_rx_scan_report+0x94>
	node_rx->hdr.handle = 0xffff;
    b3a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b3aa:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    b3ac:	4b1e      	ldr	r3, [pc, #120]	; (b428 <isr_rx_scan_report+0x98>)
    b3ae:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    b3b2:	075a      	lsls	r2, r3, #29
    b3b4:	d032      	beq.n	b41c <isr_rx_scan_report+0x8c>
		switch (_radio.scanner.phy) {
    b3b6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b3ba:	b2da      	uxtb	r2, r3
    b3bc:	2a01      	cmp	r2, #1
    b3be:	d010      	beq.n	b3e2 <isr_rx_scan_report+0x52>
    b3c0:	2a04      	cmp	r2, #4
    b3c2:	d00f      	beq.n	b3e4 <isr_rx_scan_report+0x54>
			LL_ASSERT(0);
    b3c4:	4b19      	ldr	r3, [pc, #100]	; (b42c <isr_rx_scan_report+0x9c>)
    b3c6:	9301      	str	r3, [sp, #4]
    b3c8:	9300      	str	r3, [sp, #0]
    b3ca:	4a19      	ldr	r2, [pc, #100]	; (b430 <isr_rx_scan_report+0xa0>)
    b3cc:	4b19      	ldr	r3, [pc, #100]	; (b434 <isr_rx_scan_report+0xa4>)
    b3ce:	491a      	ldr	r1, [pc, #104]	; (b438 <isr_rx_scan_report+0xa8>)
    b3d0:	481a      	ldr	r0, [pc, #104]	; (b43c <isr_rx_scan_report+0xac>)
    b3d2:	f7f5 fddb 	bl	f8c <printk>
    b3d6:	4040      	eors	r0, r0
    b3d8:	f380 8811 	msr	BASEPRI, r0
    b3dc:	f04f 0004 	mov.w	r0, #4
    b3e0:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    b3e2:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    b3e4:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    b3e8:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    b3ea:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    b3ee:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    b3f2:	f1b9 0f00 	cmp.w	r9, #0
    b3f6:	d013      	beq.n	b420 <isr_rx_scan_report+0x90>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    b3f8:	f007 fd6a 	bl	12ed0 <radio_rssi_get>
			     pdu_adv_rx->len] =
    b3fc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    b400:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    b404:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    b406:	442b      	add	r3, r5
    b408:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    b40a:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    b40c:	441d      	add	r5, r3
    b40e:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    b410:	f7ff ff26 	bl	b260 <packet_rx_enqueue>
	return 0;
    b414:	2000      	movs	r0, #0
}
    b416:	b003      	add	sp, #12
    b418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    b41c:	2302      	movs	r3, #2
    b41e:	e7e1      	b.n	b3e4 <isr_rx_scan_report+0x54>
			     pdu_adv_rx->len] =
    b420:	207f      	movs	r0, #127	; 0x7f
    b422:	e7ed      	b.n	b400 <isr_rx_scan_report+0x70>
		return 1;
    b424:	2001      	movs	r0, #1
    b426:	e7f6      	b.n	b416 <isr_rx_scan_report+0x86>
    b428:	200008c8 	.word	0x200008c8
    b42c:	000153a9 	.word	0x000153a9
    b430:	00016765 	.word	0x00016765
    b434:	0001802e 	.word	0x0001802e
    b438:	000167b4 	.word	0x000167b4
    b43c:	000166d9 	.word	0x000166d9

0000b440 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    b440:	4a0b      	ldr	r2, [pc, #44]	; (b470 <rx_fc_lock+0x30>)
    b442:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    b446:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    b44a:	4299      	cmp	r1, r3
    b44c:	d10e      	bne.n	b46c <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    b44e:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    b452:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    b456:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    b45a:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    b45e:	3301      	adds	r3, #1
    b460:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    b462:	2b03      	cmp	r3, #3
    b464:	bf08      	it	eq
    b466:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    b468:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    b46c:	4770      	bx	lr
    b46e:	bf00      	nop
    b470:	200008c8 	.word	0x200008c8

0000b474 <ticker_success_assert>:
{
    b474:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    b476:	b170      	cbz	r0, b496 <ticker_success_assert+0x22>
    b478:	4b08      	ldr	r3, [pc, #32]	; (b49c <ticker_success_assert+0x28>)
    b47a:	9301      	str	r3, [sp, #4]
    b47c:	9300      	str	r3, [sp, #0]
    b47e:	4a08      	ldr	r2, [pc, #32]	; (b4a0 <ticker_success_assert+0x2c>)
    b480:	4b08      	ldr	r3, [pc, #32]	; (b4a4 <ticker_success_assert+0x30>)
    b482:	4909      	ldr	r1, [pc, #36]	; (b4a8 <ticker_success_assert+0x34>)
    b484:	4809      	ldr	r0, [pc, #36]	; (b4ac <ticker_success_assert+0x38>)
    b486:	f7f5 fd81 	bl	f8c <printk>
    b48a:	4040      	eors	r0, r0
    b48c:	f380 8811 	msr	BASEPRI, r0
    b490:	f04f 0004 	mov.w	r0, #4
    b494:	df02      	svc	2
}
    b496:	b003      	add	sp, #12
    b498:	f85d fb04 	ldr.w	pc, [sp], #4
    b49c:	000153a9 	.word	0x000153a9
    b4a0:	00016765 	.word	0x00016765
    b4a4:	00018117 	.word	0x00018117
    b4a8:	000167b4 	.word	0x000167b4
    b4ac:	0001907e 	.word	0x0001907e

0000b4b0 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    b4b0:	2801      	cmp	r0, #1
{
    b4b2:	b507      	push	{r0, r1, r2, lr}
    b4b4:	4b11      	ldr	r3, [pc, #68]	; (b4fc <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    b4b6:	d116      	bne.n	b4e6 <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    b4b8:	7c9a      	ldrb	r2, [r3, #18]
    b4ba:	2a05      	cmp	r2, #5
    b4bc:	d104      	bne.n	b4c8 <ticker_stop_adv_assert+0x18>
			_radio.ticker_id_stop = 0;
    b4be:	2200      	movs	r2, #0
    b4c0:	749a      	strb	r2, [r3, #18]
}
    b4c2:	b003      	add	sp, #12
    b4c4:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    b4c8:	4b0d      	ldr	r3, [pc, #52]	; (b500 <ticker_stop_adv_assert+0x50>)
    b4ca:	9301      	str	r3, [sp, #4]
    b4cc:	9300      	str	r3, [sp, #0]
    b4ce:	4a0d      	ldr	r2, [pc, #52]	; (b504 <ticker_stop_adv_assert+0x54>)
    b4d0:	4b0d      	ldr	r3, [pc, #52]	; (b508 <ticker_stop_adv_assert+0x58>)
    b4d2:	490e      	ldr	r1, [pc, #56]	; (b50c <ticker_stop_adv_assert+0x5c>)
    b4d4:	480e      	ldr	r0, [pc, #56]	; (b510 <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    b4d6:	f7f5 fd59 	bl	f8c <printk>
    b4da:	4040      	eors	r0, r0
    b4dc:	f380 8811 	msr	BASEPRI, r0
    b4e0:	f04f 0004 	mov.w	r0, #4
    b4e4:	df02      	svc	2
    b4e6:	7c1b      	ldrb	r3, [r3, #16]
    b4e8:	2b05      	cmp	r3, #5
    b4ea:	d1ea      	bne.n	b4c2 <ticker_stop_adv_assert+0x12>
    b4ec:	4b04      	ldr	r3, [pc, #16]	; (b500 <ticker_stop_adv_assert+0x50>)
    b4ee:	9301      	str	r3, [sp, #4]
    b4f0:	9300      	str	r3, [sp, #0]
    b4f2:	4a04      	ldr	r2, [pc, #16]	; (b504 <ticker_stop_adv_assert+0x54>)
    b4f4:	4b04      	ldr	r3, [pc, #16]	; (b508 <ticker_stop_adv_assert+0x58>)
    b4f6:	4905      	ldr	r1, [pc, #20]	; (b50c <ticker_stop_adv_assert+0x5c>)
    b4f8:	4806      	ldr	r0, [pc, #24]	; (b514 <ticker_stop_adv_assert+0x64>)
    b4fa:	e7ec      	b.n	b4d6 <ticker_stop_adv_assert+0x26>
    b4fc:	200008c8 	.word	0x200008c8
    b500:	000153a9 	.word	0x000153a9
    b504:	00016765 	.word	0x00016765
    b508:	0001812d 	.word	0x0001812d
    b50c:	000167b4 	.word	0x000167b4
    b510:	000166d9 	.word	0x000166d9
    b514:	00019000 	.word	0x00019000

0000b518 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    b518:	2801      	cmp	r0, #1
{
    b51a:	b507      	push	{r0, r1, r2, lr}
    b51c:	4b11      	ldr	r3, [pc, #68]	; (b564 <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    b51e:	d116      	bne.n	b54e <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    b520:	7c9a      	ldrb	r2, [r3, #18]
    b522:	2a06      	cmp	r2, #6
    b524:	d104      	bne.n	b530 <ticker_stop_scan_assert+0x18>
			_radio.ticker_id_stop = 0;
    b526:	2200      	movs	r2, #0
    b528:	749a      	strb	r2, [r3, #18]
}
    b52a:	b003      	add	sp, #12
    b52c:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    b530:	4b0d      	ldr	r3, [pc, #52]	; (b568 <ticker_stop_scan_assert+0x50>)
    b532:	9301      	str	r3, [sp, #4]
    b534:	9300      	str	r3, [sp, #0]
    b536:	4a0d      	ldr	r2, [pc, #52]	; (b56c <ticker_stop_scan_assert+0x54>)
    b538:	4b0d      	ldr	r3, [pc, #52]	; (b570 <ticker_stop_scan_assert+0x58>)
    b53a:	490e      	ldr	r1, [pc, #56]	; (b574 <ticker_stop_scan_assert+0x5c>)
    b53c:	480e      	ldr	r0, [pc, #56]	; (b578 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    b53e:	f7f5 fd25 	bl	f8c <printk>
    b542:	4040      	eors	r0, r0
    b544:	f380 8811 	msr	BASEPRI, r0
    b548:	f04f 0004 	mov.w	r0, #4
    b54c:	df02      	svc	2
    b54e:	7c1b      	ldrb	r3, [r3, #16]
    b550:	2b06      	cmp	r3, #6
    b552:	d1ea      	bne.n	b52a <ticker_stop_scan_assert+0x12>
    b554:	4b04      	ldr	r3, [pc, #16]	; (b568 <ticker_stop_scan_assert+0x50>)
    b556:	9301      	str	r3, [sp, #4]
    b558:	9300      	str	r3, [sp, #0]
    b55a:	4a04      	ldr	r2, [pc, #16]	; (b56c <ticker_stop_scan_assert+0x54>)
    b55c:	4b04      	ldr	r3, [pc, #16]	; (b570 <ticker_stop_scan_assert+0x58>)
    b55e:	4905      	ldr	r1, [pc, #20]	; (b574 <ticker_stop_scan_assert+0x5c>)
    b560:	4806      	ldr	r0, [pc, #24]	; (b57c <ticker_stop_scan_assert+0x64>)
    b562:	e7ec      	b.n	b53e <ticker_stop_scan_assert+0x26>
    b564:	200008c8 	.word	0x200008c8
    b568:	000153a9 	.word	0x000153a9
    b56c:	00016765 	.word	0x00016765
    b570:	00018144 	.word	0x00018144
    b574:	000167b4 	.word	0x000167b4
    b578:	000166d9 	.word	0x000166d9
    b57c:	0001903f 	.word	0x0001903f

0000b580 <ticker_update_adv_assert>:
{
    b580:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    b582:	b190      	cbz	r0, b5aa <ticker_update_adv_assert+0x2a>
    b584:	4b0a      	ldr	r3, [pc, #40]	; (b5b0 <ticker_update_adv_assert+0x30>)
    b586:	7c9b      	ldrb	r3, [r3, #18]
    b588:	2b05      	cmp	r3, #5
    b58a:	d00e      	beq.n	b5aa <ticker_update_adv_assert+0x2a>
    b58c:	4b09      	ldr	r3, [pc, #36]	; (b5b4 <ticker_update_adv_assert+0x34>)
    b58e:	9301      	str	r3, [sp, #4]
    b590:	9300      	str	r3, [sp, #0]
    b592:	4a09      	ldr	r2, [pc, #36]	; (b5b8 <ticker_update_adv_assert+0x38>)
    b594:	4b09      	ldr	r3, [pc, #36]	; (b5bc <ticker_update_adv_assert+0x3c>)
    b596:	490a      	ldr	r1, [pc, #40]	; (b5c0 <ticker_update_adv_assert+0x40>)
    b598:	480a      	ldr	r0, [pc, #40]	; (b5c4 <ticker_update_adv_assert+0x44>)
    b59a:	f7f5 fcf7 	bl	f8c <printk>
    b59e:	4040      	eors	r0, r0
    b5a0:	f380 8811 	msr	BASEPRI, r0
    b5a4:	f04f 0004 	mov.w	r0, #4
    b5a8:	df02      	svc	2
}
    b5aa:	b003      	add	sp, #12
    b5ac:	f85d fb04 	ldr.w	pc, [sp], #4
    b5b0:	200008c8 	.word	0x200008c8
    b5b4:	000153a9 	.word	0x000153a9
    b5b8:	00016765 	.word	0x00016765
    b5bc:	0001815c 	.word	0x0001815c
    b5c0:	000167b4 	.word	0x000167b4
    b5c4:	000190ab 	.word	0x000190ab

0000b5c8 <ticker_update_slave_assert>:
{
    b5c8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    b5ca:	b198      	cbz	r0, b5f4 <ticker_update_slave_assert+0x2c>
    b5cc:	4b0b      	ldr	r3, [pc, #44]	; (b5fc <ticker_update_slave_assert+0x34>)
    b5ce:	7c9b      	ldrb	r3, [r3, #18]
    b5d0:	b2c9      	uxtb	r1, r1
    b5d2:	4299      	cmp	r1, r3
    b5d4:	d00e      	beq.n	b5f4 <ticker_update_slave_assert+0x2c>
    b5d6:	4b0a      	ldr	r3, [pc, #40]	; (b600 <ticker_update_slave_assert+0x38>)
    b5d8:	9301      	str	r3, [sp, #4]
    b5da:	9300      	str	r3, [sp, #0]
    b5dc:	4a09      	ldr	r2, [pc, #36]	; (b604 <ticker_update_slave_assert+0x3c>)
    b5de:	4b0a      	ldr	r3, [pc, #40]	; (b608 <ticker_update_slave_assert+0x40>)
    b5e0:	490a      	ldr	r1, [pc, #40]	; (b60c <ticker_update_slave_assert+0x44>)
    b5e2:	480b      	ldr	r0, [pc, #44]	; (b610 <ticker_update_slave_assert+0x48>)
    b5e4:	f7f5 fcd2 	bl	f8c <printk>
    b5e8:	4040      	eors	r0, r0
    b5ea:	f380 8811 	msr	BASEPRI, r0
    b5ee:	f04f 0004 	mov.w	r0, #4
    b5f2:	df02      	svc	2
}
    b5f4:	b003      	add	sp, #12
    b5f6:	f85d fb04 	ldr.w	pc, [sp], #4
    b5fa:	bf00      	nop
    b5fc:	200008c8 	.word	0x200008c8
    b600:	000153a9 	.word	0x000153a9
    b604:	00016765 	.word	0x00016765
    b608:	00018175 	.word	0x00018175
    b60c:	000167b4 	.word	0x000167b4
    b610:	000190fa 	.word	0x000190fa

0000b614 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    b614:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    b616:	b170      	cbz	r0, b636 <ticker_op_latency_cancelled+0x22>
    b618:	4b0b      	ldr	r3, [pc, #44]	; (b648 <ticker_op_latency_cancelled+0x34>)
    b61a:	9301      	str	r3, [sp, #4]
    b61c:	9300      	str	r3, [sp, #0]
    b61e:	4a0b      	ldr	r2, [pc, #44]	; (b64c <ticker_op_latency_cancelled+0x38>)
    b620:	4b0b      	ldr	r3, [pc, #44]	; (b650 <ticker_op_latency_cancelled+0x3c>)
    b622:	490c      	ldr	r1, [pc, #48]	; (b654 <ticker_op_latency_cancelled+0x40>)
    b624:	480c      	ldr	r0, [pc, #48]	; (b658 <ticker_op_latency_cancelled+0x44>)
    b626:	f7f5 fcb1 	bl	f8c <printk>
    b62a:	4040      	eors	r0, r0
    b62c:	f380 8811 	msr	BASEPRI, r0
    b630:	f04f 0004 	mov.w	r0, #4
    b634:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    b636:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    b63a:	f360 0341 	bfi	r3, r0, #1, #1
    b63e:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    b642:	b003      	add	sp, #12
    b644:	f85d fb04 	ldr.w	pc, [sp], #4
    b648:	000153a9 	.word	0x000153a9
    b64c:	00016765 	.word	0x00016765
    b650:	00018453 	.word	0x00018453
    b654:	000167b4 	.word	0x000167b4
    b658:	00018fcc 	.word	0x00018fcc

0000b65c <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    b65c:	4b04      	ldr	r3, [pc, #16]	; (b670 <ticker_job_disable+0x14>)
    b65e:	7d1b      	ldrb	r3, [r3, #20]
    b660:	b123      	cbz	r3, b66c <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    b662:	2101      	movs	r1, #1
    b664:	2200      	movs	r2, #0
    b666:	4608      	mov	r0, r1
    b668:	f7fc b8f4 	b.w	7854 <mayfly_enable>
    b66c:	4770      	bx	lr
    b66e:	bf00      	nop
    b670:	200008c8 	.word	0x200008c8

0000b674 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    b674:	2806      	cmp	r0, #6
{
    b676:	b510      	push	{r4, lr}
    b678:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    b67a:	d90a      	bls.n	b692 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b67c:	4b09      	ldr	r3, [pc, #36]	; (b6a4 <hdr_conn_get+0x30>)
    b67e:	1fc2      	subs	r2, r0, #7
    b680:	b292      	uxth	r2, r2
    b682:	f44f 71aa 	mov.w	r1, #340	; 0x154
    b686:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    b68a:	f7fc f875 	bl	7778 <mem_get>
    b68e:	6020      	str	r0, [r4, #0]
    b690:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    b692:	2805      	cmp	r0, #5
    b694:	d004      	beq.n	b6a0 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    b696:	2806      	cmp	r0, #6
	return NULL;
    b698:	4803      	ldr	r0, [pc, #12]	; (b6a8 <hdr_conn_get+0x34>)
    b69a:	bf18      	it	ne
    b69c:	2000      	movne	r0, #0
    b69e:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    b6a0:	4802      	ldr	r0, [pc, #8]	; (b6ac <hdr_conn_get+0x38>)
}
    b6a2:	bd10      	pop	{r4, pc}
    b6a4:	200008c8 	.word	0x200008c8
    b6a8:	20000998 	.word	0x20000998
    b6ac:	200008e0 	.word	0x200008e0

0000b6b0 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    b6b0:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    b6b2:	4b07      	ldr	r3, [pc, #28]	; (b6d0 <event_stop.part.10+0x20>)
    b6b4:	9301      	str	r3, [sp, #4]
    b6b6:	9300      	str	r3, [sp, #0]
    b6b8:	4a06      	ldr	r2, [pc, #24]	; (b6d4 <event_stop.part.10+0x24>)
    b6ba:	4b07      	ldr	r3, [pc, #28]	; (b6d8 <event_stop.part.10+0x28>)
    b6bc:	4907      	ldr	r1, [pc, #28]	; (b6dc <event_stop.part.10+0x2c>)
    b6be:	4808      	ldr	r0, [pc, #32]	; (b6e0 <event_stop.part.10+0x30>)
    b6c0:	f7f5 fc64 	bl	f8c <printk>
    b6c4:	4040      	eors	r0, r0
    b6c6:	f380 8811 	msr	BASEPRI, r0
    b6ca:	f04f 0004 	mov.w	r0, #4
    b6ce:	df02      	svc	2
    b6d0:	000153a9 	.word	0x000153a9
    b6d4:	00016765 	.word	0x00016765
    b6d8:	00018274 	.word	0x00018274
    b6dc:	000167b4 	.word	0x000167b4
    b6e0:	00018be1 	.word	0x00018be1

0000b6e4 <event_stop>:
	s_mfy_radio_stop.param = context;
    b6e4:	4a06      	ldr	r2, [pc, #24]	; (b700 <event_stop+0x1c>)
{
    b6e6:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    b6e8:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b6ea:	4613      	mov	r3, r2
    b6ec:	2200      	movs	r2, #0
    b6ee:	4611      	mov	r1, r2
    b6f0:	4610      	mov	r0, r2
    b6f2:	f7fc f8d7 	bl	78a4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b6f6:	b108      	cbz	r0, b6fc <event_stop+0x18>
    b6f8:	f7ff ffda 	bl	b6b0 <event_stop.part.10>
    b6fc:	bd08      	pop	{r3, pc}
    b6fe:	bf00      	nop
    b700:	20003d70 	.word	0x20003d70

0000b704 <event_active>:
{
    b704:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b706:	2200      	movs	r2, #0
    b708:	4b0b      	ldr	r3, [pc, #44]	; (b738 <event_active+0x34>)
    b70a:	4611      	mov	r1, r2
    b70c:	4610      	mov	r0, r2
    b70e:	f7fc f8c9 	bl	78a4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b712:	b170      	cbz	r0, b732 <event_active+0x2e>
    b714:	4b09      	ldr	r3, [pc, #36]	; (b73c <event_active+0x38>)
    b716:	9301      	str	r3, [sp, #4]
    b718:	9300      	str	r3, [sp, #0]
    b71a:	4a09      	ldr	r2, [pc, #36]	; (b740 <event_active+0x3c>)
    b71c:	4b09      	ldr	r3, [pc, #36]	; (b744 <event_active+0x40>)
    b71e:	490a      	ldr	r1, [pc, #40]	; (b748 <event_active+0x44>)
    b720:	480a      	ldr	r0, [pc, #40]	; (b74c <event_active+0x48>)
    b722:	f7f5 fc33 	bl	f8c <printk>
    b726:	4040      	eors	r0, r0
    b728:	f380 8811 	msr	BASEPRI, r0
    b72c:	f04f 0004 	mov.w	r0, #4
    b730:	df02      	svc	2
}
    b732:	b003      	add	sp, #12
    b734:	f85d fb04 	ldr.w	pc, [sp], #4
    b738:	20003d40 	.word	0x20003d40
    b73c:	000153a9 	.word	0x000153a9
    b740:	00016765 	.word	0x00016765
    b744:	000181a4 	.word	0x000181a4
    b748:	000167b4 	.word	0x000167b4
    b74c:	00018be1 	.word	0x00018be1

0000b750 <event_xtal>:
{
    b750:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b752:	2200      	movs	r2, #0
    b754:	4b0b      	ldr	r3, [pc, #44]	; (b784 <event_xtal+0x34>)
    b756:	4611      	mov	r1, r2
    b758:	4610      	mov	r0, r2
    b75a:	f7fc f8a3 	bl	78a4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b75e:	b170      	cbz	r0, b77e <event_xtal+0x2e>
    b760:	4b09      	ldr	r3, [pc, #36]	; (b788 <event_xtal+0x38>)
    b762:	9301      	str	r3, [sp, #4]
    b764:	9300      	str	r3, [sp, #0]
    b766:	4a09      	ldr	r2, [pc, #36]	; (b78c <event_xtal+0x3c>)
    b768:	4b09      	ldr	r3, [pc, #36]	; (b790 <event_xtal+0x40>)
    b76a:	490a      	ldr	r1, [pc, #40]	; (b794 <event_xtal+0x44>)
    b76c:	480a      	ldr	r0, [pc, #40]	; (b798 <event_xtal+0x48>)
    b76e:	f7f5 fc0d 	bl	f8c <printk>
    b772:	4040      	eors	r0, r0
    b774:	f380 8811 	msr	BASEPRI, r0
    b778:	f04f 0004 	mov.w	r0, #4
    b77c:	df02      	svc	2
}
    b77e:	b003      	add	sp, #12
    b780:	f85d fb04 	ldr.w	pc, [sp], #4
    b784:	20003dc0 	.word	0x20003dc0
    b788:	000153a9 	.word	0x000153a9
    b78c:	00016765 	.word	0x00016765
    b790:	000181c0 	.word	0x000181c0
    b794:	000167b4 	.word	0x000167b4
    b798:	00018be1 	.word	0x00018be1

0000b79c <mayfly_radio_active>:
{
    b79c:	b507      	push	{r0, r1, r2, lr}
    b79e:	4a12      	ldr	r2, [pc, #72]	; (b7e8 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    b7a0:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    b7a2:	b140      	cbz	r0, b7b6 <mayfly_radio_active+0x1a>
		if (s_active++) {
    b7a4:	1c59      	adds	r1, r3, #1
    b7a6:	7011      	strb	r1, [r2, #0]
    b7a8:	b9d3      	cbnz	r3, b7e0 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    b7aa:	2001      	movs	r0, #1
}
    b7ac:	b003      	add	sp, #12
    b7ae:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_active_callback(0);
    b7b2:	f006 b92d 	b.w	11a10 <radio_active_callback>
		LL_ASSERT(s_active);
    b7b6:	b973      	cbnz	r3, b7d6 <mayfly_radio_active+0x3a>
    b7b8:	4b0c      	ldr	r3, [pc, #48]	; (b7ec <mayfly_radio_active+0x50>)
    b7ba:	9301      	str	r3, [sp, #4]
    b7bc:	9300      	str	r3, [sp, #0]
    b7be:	4a0c      	ldr	r2, [pc, #48]	; (b7f0 <mayfly_radio_active+0x54>)
    b7c0:	4b0c      	ldr	r3, [pc, #48]	; (b7f4 <mayfly_radio_active+0x58>)
    b7c2:	490d      	ldr	r1, [pc, #52]	; (b7f8 <mayfly_radio_active+0x5c>)
    b7c4:	480d      	ldr	r0, [pc, #52]	; (b7fc <mayfly_radio_active+0x60>)
    b7c6:	f7f5 fbe1 	bl	f8c <printk>
    b7ca:	4040      	eors	r0, r0
    b7cc:	f380 8811 	msr	BASEPRI, r0
    b7d0:	f04f 0004 	mov.w	r0, #4
    b7d4:	df02      	svc	2
		if (--s_active) {
    b7d6:	3b01      	subs	r3, #1
    b7d8:	b2db      	uxtb	r3, r3
    b7da:	7013      	strb	r3, [r2, #0]
    b7dc:	2b00      	cmp	r3, #0
    b7de:	d0e5      	beq.n	b7ac <mayfly_radio_active+0x10>
}
    b7e0:	b003      	add	sp, #12
    b7e2:	f85d fb04 	ldr.w	pc, [sp], #4
    b7e6:	bf00      	nop
    b7e8:	20000a6c 	.word	0x20000a6c
    b7ec:	000153a9 	.word	0x000153a9
    b7f0:	00016765 	.word	0x00016765
    b7f4:	00018190 	.word	0x00018190
    b7f8:	000167b4 	.word	0x000167b4
    b7fc:	00018b36 	.word	0x00018b36

0000b800 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    b800:	2000      	movs	r0, #0
    b802:	f7ff bfcb 	b.w	b79c <mayfly_radio_active>
	...

0000b808 <mayfly_radio_stop>:
{
    b808:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    b80a:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    b80c:	1f03      	subs	r3, r0, #4
    b80e:	2b01      	cmp	r3, #1
    b810:	d90e      	bls.n	b830 <mayfly_radio_stop+0x28>
    b812:	4b11      	ldr	r3, [pc, #68]	; (b858 <mayfly_radio_stop+0x50>)
    b814:	9301      	str	r3, [sp, #4]
    b816:	9300      	str	r3, [sp, #0]
    b818:	4a10      	ldr	r2, [pc, #64]	; (b85c <mayfly_radio_stop+0x54>)
    b81a:	4b11      	ldr	r3, [pc, #68]	; (b860 <mayfly_radio_stop+0x58>)
    b81c:	4911      	ldr	r1, [pc, #68]	; (b864 <mayfly_radio_stop+0x5c>)
    b81e:	4812      	ldr	r0, [pc, #72]	; (b868 <mayfly_radio_stop+0x60>)
    b820:	f7f5 fbb4 	bl	f8c <printk>
    b824:	4040      	eors	r0, r0
    b826:	f380 8811 	msr	BASEPRI, r0
    b82a:	f04f 0004 	mov.w	r0, #4
    b82e:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    b830:	4a0e      	ldr	r2, [pc, #56]	; (b86c <mayfly_radio_stop+0x64>)
    b832:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    b834:	b143      	cbz	r3, b848 <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    b836:	3b04      	subs	r3, #4
    b838:	2b01      	cmp	r3, #1
    b83a:	d905      	bls.n	b848 <mayfly_radio_stop+0x40>
			_radio.state = state;
    b83c:	7510      	strb	r0, [r2, #20]
}
    b83e:	b003      	add	sp, #12
    b840:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_disable();
    b844:	f007 babc 	b.w	12dc0 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    b848:	f007 faec 	bl	12e24 <radio_is_idle>
    b84c:	2800      	cmp	r0, #0
    b84e:	d0f6      	beq.n	b83e <mayfly_radio_stop+0x36>
}
    b850:	b003      	add	sp, #12
    b852:	f85d fb04 	ldr.w	pc, [sp], #4
    b856:	bf00      	nop
    b858:	000153a9 	.word	0x000153a9
    b85c:	00016765 	.word	0x00016765
    b860:	00018262 	.word	0x00018262
    b864:	000167b4 	.word	0x000167b4
    b868:	00018b60 	.word	0x00018b60
    b86c:	200008c8 	.word	0x200008c8

0000b870 <pdu_node_tx_release>:
{
    b870:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    b872:	4a17      	ldr	r2, [pc, #92]	; (b8d0 <pdu_node_tx_release+0x60>)
    b874:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    b878:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    b87c:	3301      	adds	r3, #1
    b87e:	b2db      	uxtb	r3, r3
		last = 0;
    b880:	429c      	cmp	r4, r3
    b882:	bf08      	it	eq
    b884:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    b886:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    b88a:	429c      	cmp	r4, r3
    b88c:	d10e      	bne.n	b8ac <pdu_node_tx_release+0x3c>
    b88e:	4b11      	ldr	r3, [pc, #68]	; (b8d4 <pdu_node_tx_release+0x64>)
    b890:	9301      	str	r3, [sp, #4]
    b892:	9300      	str	r3, [sp, #0]
    b894:	4a10      	ldr	r2, [pc, #64]	; (b8d8 <pdu_node_tx_release+0x68>)
    b896:	4b11      	ldr	r3, [pc, #68]	; (b8dc <pdu_node_tx_release+0x6c>)
    b898:	4911      	ldr	r1, [pc, #68]	; (b8e0 <pdu_node_tx_release+0x70>)
    b89a:	4812      	ldr	r0, [pc, #72]	; (b8e4 <pdu_node_tx_release+0x74>)
    b89c:	f7f5 fb76 	bl	f8c <printk>
    b8a0:	4040      	eors	r0, r0
    b8a2:	f380 8811 	msr	BASEPRI, r0
    b8a6:	f04f 0004 	mov.w	r0, #4
    b8aa:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    b8ac:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    b8b0:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    b8b4:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    b8b8:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    b8bc:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    b8c0:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    b8c2:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    b8c6:	b003      	add	sp, #12
    b8c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    b8cc:	f006 b8a2 	b.w	11a14 <radio_event_callback>
    b8d0:	200008c8 	.word	0x200008c8
    b8d4:	000153a9 	.word	0x000153a9
    b8d8:	00016765 	.word	0x00016765
    b8dc:	000183aa 	.word	0x000183aa
    b8e0:	000167b4 	.word	0x000167b4
    b8e4:	00018cb1 	.word	0x00018cb1

0000b8e8 <packet_tx_enqueue>:
{
    b8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    b8ec:	4c24      	ldr	r4, [pc, #144]	; (b980 <packet_tx_enqueue+0x98>)
{
    b8ee:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    b8f0:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    b8f2:	b12e      	cbz	r6, b900 <packet_tx_enqueue+0x18>
    b8f4:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    b8f8:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    b8fc:	429a      	cmp	r2, r3
    b8fe:	d101      	bne.n	b904 <packet_tx_enqueue+0x1c>
    b900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    b904:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    b908:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b90c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    b910:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    b914:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b918:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    b91c:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    b91e:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b920:	f7fb ff2a 	bl	7778 <mem_get>
    b924:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    b926:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    b92a:	8c1a      	ldrh	r2, [r3, #32]
    b92c:	4282      	cmp	r2, r0
    b92e:	d11f      	bne.n	b970 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    b930:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    b934:	b942      	cbnz	r2, b948 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    b936:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    b93a:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    b93e:	b91a      	cbnz	r2, b948 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    b940:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    b944:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    b948:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    b94c:	b102      	cbz	r2, b950 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    b94e:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    b950:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    b954:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    b958:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    b95c:	3301      	adds	r3, #1
    b95e:	b2db      	uxtb	r3, r3
			first = 0;
    b960:	429a      	cmp	r2, r3
    b962:	bf08      	it	eq
    b964:	2300      	moveq	r3, #0
    b966:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    b968:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    b96c:	b2f6      	uxtb	r6, r6
    b96e:	e7c0      	b.n	b8f2 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b970:	792b      	ldrb	r3, [r5, #4]
    b972:	f367 0301 	bfi	r3, r7, #0, #2
    b976:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    b978:	4629      	mov	r1, r5
    b97a:	f7ff ff79 	bl	b870 <pdu_node_tx_release>
    b97e:	e7e9      	b.n	b954 <packet_tx_enqueue+0x6c>
    b980:	200008c8 	.word	0x200008c8

0000b984 <connection_release>:
{
    b984:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    b986:	2201      	movs	r2, #1
{
    b988:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    b98a:	4611      	mov	r1, r2
    b98c:	2000      	movs	r0, #0
    b98e:	f7fb ff61 	bl	7854 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b992:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    b996:	2100      	movs	r1, #0
    b998:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b99c:	3207      	adds	r2, #7
	ticker_status =
    b99e:	9300      	str	r3, [sp, #0]
    b9a0:	4608      	mov	r0, r1
    b9a2:	4b3e      	ldr	r3, [pc, #248]	; (ba9c <connection_release+0x118>)
    b9a4:	b2d2      	uxtb	r2, r2
    b9a6:	f7fc fdd9 	bl	855c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b9aa:	f030 0102 	bics.w	r1, r0, #2
    b9ae:	d00e      	beq.n	b9ce <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b9b0:	4b3b      	ldr	r3, [pc, #236]	; (baa0 <connection_release+0x11c>)
    b9b2:	9301      	str	r3, [sp, #4]
    b9b4:	9300      	str	r3, [sp, #0]
    b9b6:	4a3b      	ldr	r2, [pc, #236]	; (baa4 <connection_release+0x120>)
    b9b8:	4b3b      	ldr	r3, [pc, #236]	; (baa8 <connection_release+0x124>)
    b9ba:	493c      	ldr	r1, [pc, #240]	; (baac <connection_release+0x128>)
    b9bc:	483c      	ldr	r0, [pc, #240]	; (bab0 <connection_release+0x12c>)
    b9be:	f7f5 fae5 	bl	f8c <printk>
    b9c2:	4040      	eors	r0, r0
    b9c4:	f380 8811 	msr	BASEPRI, r0
    b9c8:	f04f 0004 	mov.w	r0, #4
    b9cc:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    b9ce:	4b39      	ldr	r3, [pc, #228]	; (bab4 <connection_release+0x130>)
    b9d0:	7d1a      	ldrb	r2, [r3, #20]
    b9d2:	2a05      	cmp	r2, #5
    b9d4:	461d      	mov	r5, r3
    b9d6:	d11b      	bne.n	ba10 <connection_release+0x8c>
					  conn->handle))) {
    b9d8:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    b9da:	7c18      	ldrb	r0, [r3, #16]
    b9dc:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    b9de:	4290      	cmp	r0, r2
    b9e0:	d116      	bne.n	ba10 <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    b9e2:	7419      	strb	r1, [r3, #16]
		ticker_status =
    b9e4:	f242 23fb 	movw	r3, #8955	; 0x22fb
    b9e8:	9300      	str	r3, [sp, #0]
    b9ea:	2201      	movs	r2, #1
    b9ec:	4b2b      	ldr	r3, [pc, #172]	; (ba9c <connection_release+0x118>)
    b9ee:	4608      	mov	r0, r1
    b9f0:	f7fc fdb4 	bl	855c <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b9f4:	f030 0202 	bics.w	r2, r0, #2
    b9f8:	d1da      	bne.n	b9b0 <connection_release+0x2c>
		ticker_status =
    b9fa:	f242 3302 	movw	r3, #8962	; 0x2302
    b9fe:	9300      	str	r3, [sp, #0]
    ba00:	4611      	mov	r1, r2
    ba02:	4b26      	ldr	r3, [pc, #152]	; (ba9c <connection_release+0x118>)
    ba04:	4610      	mov	r0, r2
    ba06:	f7fc fda9 	bl	855c <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ba0a:	f030 0302 	bics.w	r3, r0, #2
    ba0e:	d1cf      	bne.n	b9b0 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    ba10:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ba14:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    ba18:	4299      	cmp	r1, r3
    ba1a:	d003      	beq.n	ba24 <connection_release+0xa0>
    ba1c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ba20:	4299      	cmp	r1, r3
    ba22:	d101      	bne.n	ba28 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ba24:	4e24      	ldr	r6, [pc, #144]	; (bab8 <connection_release+0x134>)
    ba26:	e012      	b.n	ba4e <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ba28:	790b      	ldrb	r3, [r1, #4]
    ba2a:	f36f 0301 	bfc	r3, #0, #2
    ba2e:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ba30:	680b      	ldr	r3, [r1, #0]
    ba32:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    ba36:	8c20      	ldrh	r0, [r4, #32]
    ba38:	f7ff ff1a 	bl	b870 <pdu_node_tx_release>
    ba3c:	e7e8      	b.n	ba10 <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ba3e:	6803      	ldr	r3, [r0, #0]
    ba40:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    ba44:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ba48:	4631      	mov	r1, r6
    ba4a:	f7fb fe7a 	bl	7742 <mem_release>
	while ((conn->pkt_tx_head) &&
    ba4e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    ba52:	b118      	cbz	r0, ba5c <connection_release+0xd8>
    ba54:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ba58:	4298      	cmp	r0, r3
    ba5a:	d1f0      	bne.n	ba3e <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    ba5c:	2300      	movs	r3, #0
    ba5e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    ba62:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    ba66:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ba6a:	b951      	cbnz	r1, ba82 <connection_release+0xfe>
	conn->handle = 0xffff;
    ba6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ba70:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    ba72:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    ba76:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    ba78:	bf08      	it	eq
    ba7a:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    ba7e:	b002      	add	sp, #8
    ba80:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ba82:	790b      	ldrb	r3, [r1, #4]
    ba84:	f36f 0301 	bfc	r3, #0, #2
    ba88:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ba8a:	680b      	ldr	r3, [r1, #0]
    ba8c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    ba90:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    ba94:	8c20      	ldrh	r0, [r4, #32]
    ba96:	f7ff feeb 	bl	b870 <pdu_node_tx_release>
    ba9a:	e7e4      	b.n	ba66 <connection_release+0xe2>
    ba9c:	0000b475 	.word	0x0000b475
    baa0:	000153a9 	.word	0x000153a9
    baa4:	00016765 	.word	0x00016765
    baa8:	000183be 	.word	0x000183be
    baac:	000167b4 	.word	0x000167b4
    bab0:	000184a7 	.word	0x000184a7
    bab4:	200008c8 	.word	0x200008c8
    bab8:	20000a24 	.word	0x20000a24

0000babc <chan_set>:
	switch (chan) {
    babc:	2826      	cmp	r0, #38	; 0x26
{
    babe:	b513      	push	{r0, r1, r4, lr}
    bac0:	4604      	mov	r4, r0
	switch (chan) {
    bac2:	d00c      	beq.n	bade <chan_set+0x22>
    bac4:	2827      	cmp	r0, #39	; 0x27
    bac6:	d00c      	beq.n	bae2 <chan_set+0x26>
    bac8:	2825      	cmp	r0, #37	; 0x25
    baca:	d10c      	bne.n	bae6 <chan_set+0x2a>
		radio_freq_chan_set(2);
    bacc:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    bace:	f007 f8f3 	bl	12cb8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    bad2:	4620      	mov	r0, r4
}
    bad4:	b002      	add	sp, #8
    bad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    bada:	f007 b8f3 	b.w	12cc4 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    bade:	201a      	movs	r0, #26
    bae0:	e7f5      	b.n	bace <chan_set+0x12>
		radio_freq_chan_set(80);
    bae2:	2050      	movs	r0, #80	; 0x50
    bae4:	e7f3      	b.n	bace <chan_set+0x12>
		if (chan < 11) {
    bae6:	280a      	cmp	r0, #10
    bae8:	d802      	bhi.n	baf0 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    baea:	3002      	adds	r0, #2
    baec:	0040      	lsls	r0, r0, #1
    baee:	e7ee      	b.n	bace <chan_set+0x12>
		} else if (chan < 40) {
    baf0:	2827      	cmp	r0, #39	; 0x27
    baf2:	d801      	bhi.n	baf8 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    baf4:	3003      	adds	r0, #3
    baf6:	e7f9      	b.n	baec <chan_set+0x30>
			LL_ASSERT(0);
    baf8:	4b07      	ldr	r3, [pc, #28]	; (bb18 <chan_set+0x5c>)
    bafa:	9301      	str	r3, [sp, #4]
    bafc:	9300      	str	r3, [sp, #0]
    bafe:	4a07      	ldr	r2, [pc, #28]	; (bb1c <chan_set+0x60>)
    bb00:	4b07      	ldr	r3, [pc, #28]	; (bb20 <chan_set+0x64>)
    bb02:	4908      	ldr	r1, [pc, #32]	; (bb24 <chan_set+0x68>)
    bb04:	4808      	ldr	r0, [pc, #32]	; (bb28 <chan_set+0x6c>)
    bb06:	f7f5 fa41 	bl	f8c <printk>
    bb0a:	4040      	eors	r0, r0
    bb0c:	f380 8811 	msr	BASEPRI, r0
    bb10:	f04f 0004 	mov.w	r0, #4
    bb14:	df02      	svc	2
    bb16:	bf00      	nop
    bb18:	000153a9 	.word	0x000153a9
    bb1c:	00016765 	.word	0x00016765
    bb20:	00018294 	.word	0x00018294
    bb24:	000167b4 	.word	0x000167b4
    bb28:	000166d9 	.word	0x000166d9

0000bb2c <adv_setup>:
{
    bb2c:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    bb2e:	4c31      	ldr	r4, [pc, #196]	; (bbf4 <adv_setup+0xc8>)
    bb30:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    bb34:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    bb38:	429a      	cmp	r2, r3
    bb3a:	d051      	beq.n	bbe0 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    bb3c:	3301      	adds	r3, #1
    bb3e:	b2db      	uxtb	r3, r3
			first = 0;
    bb40:	2b02      	cmp	r3, #2
    bb42:	bf08      	it	eq
    bb44:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    bb46:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    bb4a:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    bb4c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    bb50:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    bb54:	4299      	cmp	r1, r3
    bb56:	d007      	beq.n	bb68 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    bb58:	3301      	adds	r3, #1
    bb5a:	b2db      	uxtb	r3, r3
			first = 0;
    bb5c:	2b02      	cmp	r3, #2
    bb5e:	bf08      	it	eq
    bb60:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    bb62:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    bb66:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    bb68:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    bb6c:	2327      	movs	r3, #39	; 0x27
    bb6e:	212b      	movs	r1, #43	; 0x2b
    bb70:	fb13 1505 	smlabb	r5, r3, r5, r1
    bb74:	1966      	adds	r6, r4, r5
	if (upd) {
    bb76:	b142      	cbz	r2, bb8a <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    bb78:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    bb7c:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    bb80:	2206      	movs	r2, #6
    bb82:	1cb1      	adds	r1, r6, #2
    bb84:	307d      	adds	r0, #125	; 0x7d
    bb86:	f7f6 f839 	bl	1bfc <memcpy>
	radio_pkt_tx_set(pdu);
    bb8a:	4630      	mov	r0, r6
    bb8c:	f007 f8f8 	bl	12d80 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    bb90:	5d63      	ldrb	r3, [r4, r5]
    bb92:	f003 030f 	and.w	r3, r3, #15
    bb96:	2b02      	cmp	r3, #2
    bb98:	d024      	beq.n	bbe4 <adv_setup+0xb8>
    bb9a:	2b07      	cmp	r3, #7
    bb9c:	d022      	beq.n	bbe4 <adv_setup+0xb8>
		_radio.state = STATE_TX;
    bb9e:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    bba0:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    bba2:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    bba4:	f007 fa02 	bl	12fac <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    bba8:	2000      	movs	r0, #0
    bbaa:	f007 f963 	bl	12e74 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    bbae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    bbb2:	f3c3 0202 	ubfx	r2, r3, #0, #3
    bbb6:	b2d3      	uxtb	r3, r2
    bbb8:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    bbba:	2000      	movs	r0, #0
    bbbc:	07ce      	lsls	r6, r1, #31
    bbbe:	f100 0501 	add.w	r5, r0, #1
    bbc2:	d514      	bpl.n	bbee <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    bbc4:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    bbc6:	4013      	ands	r3, r2
    bbc8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    bbcc:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    bbce:	f363 0202 	bfi	r2, r3, #0, #3
    bbd2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    bbd6:	3025      	adds	r0, #37	; 0x25
}
    bbd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    bbdc:	f7ff bf6e 	b.w	babc <chan_set>
	u8_t upd = 0;
    bbe0:	2200      	movs	r2, #0
    bbe2:	e7b3      	b.n	bb4c <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    bbe4:	2303      	movs	r3, #3
    bbe6:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    bbe8:	f007 f95a 	bl	12ea0 <radio_switch_complete_and_disable>
    bbec:	e7df      	b.n	bbae <adv_setup+0x82>
		bitmap >>= 1;
    bbee:	0849      	lsrs	r1, r1, #1
    bbf0:	4628      	mov	r0, r5
    bbf2:	e7e3      	b.n	bbbc <adv_setup+0x90>
    bbf4:	200008c8 	.word	0x200008c8

0000bbf8 <sched_after_mstr_free_offset_get>:
{
    bbf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    bbfa:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    bbfc:	aa04      	add	r2, sp, #16
{
    bbfe:	461c      	mov	r4, r3
    bc00:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    bc02:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    bc06:	3127      	adds	r1, #39	; 0x27
    bc08:	2001      	movs	r0, #1
    bc0a:	f7ff fa5d 	bl	b0c8 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    bc0e:	6823      	ldr	r3, [r4, #0]
    bc10:	b363      	cbz	r3, bc6c <sched_after_mstr_free_offset_get+0x74>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    bc12:	9803      	ldr	r0, [sp, #12]
    bc14:	1b83      	subs	r3, r0, r6
    bc16:	021b      	lsls	r3, r3, #8
    bc18:	d50e      	bpl.n	bc38 <sched_after_mstr_free_offset_get+0x40>
    bc1a:	4b19      	ldr	r3, [pc, #100]	; (bc80 <sched_after_mstr_free_offset_get+0x88>)
    bc1c:	9301      	str	r3, [sp, #4]
    bc1e:	9300      	str	r3, [sp, #0]
    bc20:	4a18      	ldr	r2, [pc, #96]	; (bc84 <sched_after_mstr_free_offset_get+0x8c>)
    bc22:	4b19      	ldr	r3, [pc, #100]	; (bc88 <sched_after_mstr_free_offset_get+0x90>)
    bc24:	4919      	ldr	r1, [pc, #100]	; (bc8c <sched_after_mstr_free_offset_get+0x94>)
    bc26:	481a      	ldr	r0, [pc, #104]	; (bc90 <sched_after_mstr_free_offset_get+0x98>)
    bc28:	f7f5 f9b0 	bl	f8c <printk>
    bc2c:	4040      	eors	r0, r0
    bc2e:	f380 8811 	msr	BASEPRI, r0
    bc32:	f04f 0004 	mov.w	r0, #4
    bc36:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    bc38:	4631      	mov	r1, r6
    bc3a:	f7fc fd61 	bl	8700 <ticker_ticks_diff_get>
    bc3e:	4602      	mov	r2, r0
    bc40:	4814      	ldr	r0, [pc, #80]	; (bc94 <sched_after_mstr_free_offset_get+0x9c>)
    bc42:	2307      	movs	r3, #7
    bc44:	fba2 0100 	umull	r0, r1, r2, r0
    bc48:	fb03 1102 	mla	r1, r3, r2, r1
    bc4c:	a30a      	add	r3, pc, #40	; (adr r3, bc78 <sched_after_mstr_free_offset_get+0x80>)
    bc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    bc52:	f7f4 fadf 	bl	214 <__aeabi_uldivmod>
    bc56:	6823      	ldr	r3, [r4, #0]
    bc58:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    bc5a:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    bc5c:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    bc5e:	db05      	blt.n	bc6c <sched_after_mstr_free_offset_get+0x74>
		u32_t conn_interval_us = conn_interval * 1250;
    bc60:	f240 40e2 	movw	r0, #1250	; 0x4e2
    bc64:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    bc66:	6823      	ldr	r3, [r4, #0]
    bc68:	4298      	cmp	r0, r3
    bc6a:	d301      	bcc.n	bc70 <sched_after_mstr_free_offset_get+0x78>
}
    bc6c:	b004      	add	sp, #16
    bc6e:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    bc70:	1a1b      	subs	r3, r3, r0
    bc72:	6023      	str	r3, [r4, #0]
    bc74:	e7f7      	b.n	bc66 <sched_after_mstr_free_offset_get+0x6e>
    bc76:	bf00      	nop
    bc78:	3b9aca00 	.word	0x3b9aca00
    bc7c:	00000000 	.word	0x00000000
    bc80:	000153a9 	.word	0x000153a9
    bc84:	00016765 	.word	0x00016765
    bc88:	00018226 	.word	0x00018226
    bc8c:	000167b4 	.word	0x000167b4
    bc90:	00018f0d 	.word	0x00018f0d
    bc94:	1afd498d 	.word	0x1afd498d

0000bc98 <mayfly_sched_win_offset_use>:
{
    bc98:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    bc9a:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    bc9e:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    bca0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    bca4:	68c1      	ldr	r1, [r0, #12]
    bca6:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    bca8:	f7ff ffa6 	bl	bbf8 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    bcac:	a902      	add	r1, sp, #8
    bcae:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    bcb2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    bcb6:	f240 42e2 	movw	r2, #1250	; 0x4e2
    bcba:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    bcbe:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    bcc0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    bcc4:	f7f5 ff9a 	bl	1bfc <memcpy>
}
    bcc8:	b002      	add	sp, #8
    bcca:	bd10      	pop	{r4, pc}

0000bccc <mayfly_sched_after_mstr_free_offset_get>:
{
    bccc:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    bcce:	4c05      	ldr	r4, [pc, #20]	; (bce4 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    bcd0:	4602      	mov	r2, r0
    bcd2:	f504 7382 	add.w	r3, r4, #260	; 0x104
    bcd6:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    bcda:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    bcde:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    bce0:	f7ff bf8a 	b.w	bbf8 <sched_after_mstr_free_offset_get>
    bce4:	200008c8 	.word	0x200008c8

0000bce8 <terminate_ind_rx_enqueue>:
{
    bce8:	b513      	push	{r0, r1, r4, lr}
    bcea:	4603      	mov	r3, r0
    bcec:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    bcee:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    bcf2:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    bcf6:	b970      	cbnz	r0, bd16 <terminate_ind_rx_enqueue+0x2e>
    bcf8:	4b16      	ldr	r3, [pc, #88]	; (bd54 <terminate_ind_rx_enqueue+0x6c>)
    bcfa:	9301      	str	r3, [sp, #4]
    bcfc:	9300      	str	r3, [sp, #0]
    bcfe:	4a16      	ldr	r2, [pc, #88]	; (bd58 <terminate_ind_rx_enqueue+0x70>)
    bd00:	4b16      	ldr	r3, [pc, #88]	; (bd5c <terminate_ind_rx_enqueue+0x74>)
    bd02:	4917      	ldr	r1, [pc, #92]	; (bd60 <terminate_ind_rx_enqueue+0x78>)
    bd04:	4817      	ldr	r0, [pc, #92]	; (bd64 <terminate_ind_rx_enqueue+0x7c>)
	LL_ASSERT(link);
    bd06:	f7f5 f941 	bl	f8c <printk>
    bd0a:	4040      	eors	r0, r0
    bd0c:	f380 8811 	msr	BASEPRI, r0
    bd10:	f04f 0004 	mov.w	r0, #4
    bd14:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    bd16:	8c1c      	ldrh	r4, [r3, #32]
    bd18:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    bd1c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    bd20:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    bd22:	4a11      	ldr	r2, [pc, #68]	; (bd68 <terminate_ind_rx_enqueue+0x80>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    bd24:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    bd28:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    bd2c:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    bd30:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    bd34:	f7fb fd45 	bl	77c2 <memq_enqueue>
	LL_ASSERT(link);
    bd38:	b938      	cbnz	r0, bd4a <terminate_ind_rx_enqueue+0x62>
    bd3a:	4b06      	ldr	r3, [pc, #24]	; (bd54 <terminate_ind_rx_enqueue+0x6c>)
    bd3c:	9301      	str	r3, [sp, #4]
    bd3e:	9300      	str	r3, [sp, #0]
    bd40:	4a05      	ldr	r2, [pc, #20]	; (bd58 <terminate_ind_rx_enqueue+0x70>)
    bd42:	4b06      	ldr	r3, [pc, #24]	; (bd5c <terminate_ind_rx_enqueue+0x74>)
    bd44:	4906      	ldr	r1, [pc, #24]	; (bd60 <terminate_ind_rx_enqueue+0x78>)
    bd46:	4809      	ldr	r0, [pc, #36]	; (bd6c <terminate_ind_rx_enqueue+0x84>)
    bd48:	e7dd      	b.n	bd06 <terminate_ind_rx_enqueue+0x1e>
}
    bd4a:	b002      	add	sp, #8
    bd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    bd50:	f005 be60 	b.w	11a14 <radio_event_callback>
    bd54:	000153a9 	.word	0x000153a9
    bd58:	00016765 	.word	0x00016765
    bd5c:	000183d1 	.word	0x000183d1
    bd60:	000167b4 	.word	0x000167b4
    bd64:	00018f93 	.word	0x00018f93
    bd68:	200008c8 	.word	0x200008c8
    bd6c:	00018481 	.word	0x00018481

0000bd70 <prepare_normal_set>:
{
    bd70:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    bd72:	6804      	ldr	r4, [r0, #0]
    bd74:	2c00      	cmp	r4, #0
{
    bd76:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    bd78:	da26      	bge.n	bdc8 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
    bd7a:	6843      	ldr	r3, [r0, #4]
    bd7c:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    bd7e:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    bd80:	429d      	cmp	r5, r3
    bd82:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    bd86:	bf34      	ite	cc
    bd88:	1ae4      	subcc	r4, r4, r3
    bd8a:	1b64      	subcs	r4, r4, r5
		ticker_status =
    bd8c:	4b0f      	ldr	r3, [pc, #60]	; (bdcc <prepare_normal_set+0x5c>)
    bd8e:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    bd90:	b2a4      	uxth	r4, r4
		ticker_status =
    bd92:	2300      	movs	r3, #0
    bd94:	9304      	str	r3, [sp, #16]
    bd96:	9303      	str	r3, [sp, #12]
    bd98:	9302      	str	r3, [sp, #8]
    bd9a:	4618      	mov	r0, r3
    bd9c:	9401      	str	r4, [sp, #4]
    bd9e:	9400      	str	r4, [sp, #0]
    bda0:	f7fc fb8e 	bl	84c0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bda4:	f030 0302 	bics.w	r3, r0, #2
    bda8:	d00e      	beq.n	bdc8 <prepare_normal_set+0x58>
    bdaa:	4b09      	ldr	r3, [pc, #36]	; (bdd0 <prepare_normal_set+0x60>)
    bdac:	9301      	str	r3, [sp, #4]
    bdae:	9300      	str	r3, [sp, #0]
    bdb0:	4a08      	ldr	r2, [pc, #32]	; (bdd4 <prepare_normal_set+0x64>)
    bdb2:	4b09      	ldr	r3, [pc, #36]	; (bdd8 <prepare_normal_set+0x68>)
    bdb4:	4909      	ldr	r1, [pc, #36]	; (bddc <prepare_normal_set+0x6c>)
    bdb6:	480a      	ldr	r0, [pc, #40]	; (bde0 <prepare_normal_set+0x70>)
    bdb8:	f7f5 f8e8 	bl	f8c <printk>
    bdbc:	4040      	eors	r0, r0
    bdbe:	f380 8811 	msr	BASEPRI, r0
    bdc2:	f04f 0004 	mov.w	r0, #4
    bdc6:	df02      	svc	2
}
    bdc8:	b009      	add	sp, #36	; 0x24
    bdca:	bd30      	pop	{r4, r5, pc}
    bdcc:	0000a51d 	.word	0x0000a51d
    bdd0:	000153a9 	.word	0x000153a9
    bdd4:	00016765 	.word	0x00016765
    bdd8:	000181de 	.word	0x000181de
    bddc:	000167b4 	.word	0x000167b4
    bde0:	000184a7 	.word	0x000184a7
    bde4:	00000000 	.word	0x00000000

0000bde8 <mayfly_xtal_stop_calc>:
{
    bde8:	b570      	push	{r4, r5, r6, lr}
    bdea:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    bdec:	2302      	movs	r3, #2
    bdee:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    bdf0:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    bdf2:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    bdf4:	4e7e      	ldr	r6, [pc, #504]	; (bff0 <mayfly_xtal_stop_calc+0x208>)
				    _radio.connection_count));
    bdf6:	4d7f      	ldr	r5, [pc, #508]	; (bff4 <mayfly_xtal_stop_calc+0x20c>)
	struct connection *conn_curr = NULL;
    bdf8:	930a      	str	r3, [sp, #40]	; 0x28
{
    bdfa:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    bdfc:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    bdfe:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    be02:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    be04:	ab09      	add	r3, sp, #36	; 0x24
    be06:	9302      	str	r3, [sp, #8]
    be08:	ab0c      	add	r3, sp, #48	; 0x30
    be0a:	9300      	str	r3, [sp, #0]
    be0c:	9601      	str	r6, [sp, #4]
    be0e:	ab0d      	add	r3, sp, #52	; 0x34
    be10:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    be14:	2101      	movs	r1, #1
    be16:	2000      	movs	r0, #0
    be18:	f7fc fbdc 	bl	85d4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    be1c:	2802      	cmp	r0, #2
    be1e:	d014      	beq.n	be4a <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    be20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    be22:	b1b3      	cbz	r3, be52 <mayfly_xtal_stop_calc+0x6a>
    be24:	4b74      	ldr	r3, [pc, #464]	; (bff8 <mayfly_xtal_stop_calc+0x210>)
    be26:	9301      	str	r3, [sp, #4]
    be28:	9300      	str	r3, [sp, #0]
    be2a:	4a74      	ldr	r2, [pc, #464]	; (bffc <mayfly_xtal_stop_calc+0x214>)
    be2c:	4b74      	ldr	r3, [pc, #464]	; (c000 <mayfly_xtal_stop_calc+0x218>)
    be2e:	4975      	ldr	r1, [pc, #468]	; (c004 <mayfly_xtal_stop_calc+0x21c>)
    be30:	4875      	ldr	r0, [pc, #468]	; (c008 <mayfly_xtal_stop_calc+0x220>)
	LL_ASSERT(hdr_curr);
    be32:	f7f5 f8ab 	bl	f8c <printk>
    be36:	4040      	eors	r0, r0
    be38:	f380 8811 	msr	BASEPRI, r0
    be3c:	f04f 0004 	mov.w	r0, #4
    be40:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    be42:	2101      	movs	r1, #1
    be44:	2000      	movs	r0, #0
    be46:	f7fc fc43 	bl	86d0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    be4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    be4c:	2b02      	cmp	r3, #2
    be4e:	d0f8      	beq.n	be42 <mayfly_xtal_stop_calc+0x5a>
    be50:	e7e6      	b.n	be20 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    be52:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    be56:	2bff      	cmp	r3, #255	; 0xff
    be58:	d004      	beq.n	be64 <mayfly_xtal_stop_calc+0x7c>
    be5a:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    be5e:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    be60:	4293      	cmp	r3, r2
    be62:	dacf      	bge.n	be04 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    be64:	1f5a      	subs	r2, r3, #5
    be66:	b2d2      	uxtb	r2, r2
    be68:	2af9      	cmp	r2, #249	; 0xf9
    be6a:	d805      	bhi.n	be78 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
    be6c:	4a61      	ldr	r2, [pc, #388]	; (bff4 <mayfly_xtal_stop_calc+0x20c>)
    be6e:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    be72:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    be74:	4293      	cmp	r3, r2
    be76:	db05      	blt.n	be84 <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    be78:	2100      	movs	r1, #0
    be7a:	2001      	movs	r0, #1
    be7c:	f7fe fe92 	bl	aba4 <mayfly_xtal_retain>
}
    be80:	b00e      	add	sp, #56	; 0x38
    be82:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    be84:	a90a      	add	r1, sp, #40	; 0x28
    be86:	b2e0      	uxtb	r0, r4
    be88:	f7ff fbf4 	bl	b674 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    be8c:	b938      	cbnz	r0, be9e <mayfly_xtal_stop_calc+0xb6>
    be8e:	4b5a      	ldr	r3, [pc, #360]	; (bff8 <mayfly_xtal_stop_calc+0x210>)
    be90:	9301      	str	r3, [sp, #4]
    be92:	9300      	str	r3, [sp, #0]
    be94:	4a59      	ldr	r2, [pc, #356]	; (bffc <mayfly_xtal_stop_calc+0x214>)
    be96:	4b5a      	ldr	r3, [pc, #360]	; (c000 <mayfly_xtal_stop_calc+0x218>)
    be98:	495a      	ldr	r1, [pc, #360]	; (c004 <mayfly_xtal_stop_calc+0x21c>)
    be9a:	485c      	ldr	r0, [pc, #368]	; (c00c <mayfly_xtal_stop_calc+0x224>)
    be9c:	e7c9      	b.n	be32 <mayfly_xtal_stop_calc+0x4a>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    be9e:	6803      	ldr	r3, [r0, #0]
    bea0:	6844      	ldr	r4, [r0, #4]
    bea2:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    bea4:	bfb8      	it	lt
    bea6:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    bea8:	429c      	cmp	r4, r3
    beaa:	bf38      	it	cc
    beac:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    beae:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    beb0:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    beb4:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    beb6:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    beb8:	f7ff fbdc 	bl	b674 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    bebc:	4605      	mov	r5, r0
    bebe:	b938      	cbnz	r0, bed0 <mayfly_xtal_stop_calc+0xe8>
    bec0:	4b4d      	ldr	r3, [pc, #308]	; (bff8 <mayfly_xtal_stop_calc+0x210>)
    bec2:	9301      	str	r3, [sp, #4]
    bec4:	9300      	str	r3, [sp, #0]
    bec6:	4a4d      	ldr	r2, [pc, #308]	; (bffc <mayfly_xtal_stop_calc+0x214>)
    bec8:	4b4d      	ldr	r3, [pc, #308]	; (c000 <mayfly_xtal_stop_calc+0x218>)
    beca:	494e      	ldr	r1, [pc, #312]	; (c004 <mayfly_xtal_stop_calc+0x21c>)
    becc:	4850      	ldr	r0, [pc, #320]	; (c010 <mayfly_xtal_stop_calc+0x228>)
    bece:	e7b0      	b.n	be32 <mayfly_xtal_stop_calc+0x4a>
	ticks_prepare_to_start_next =
    bed0:	6886      	ldr	r6, [r0, #8]
    bed2:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    bed4:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    bed6:	429e      	cmp	r6, r3
    bed8:	bf38      	it	cc
    beda:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    bedc:	2a00      	cmp	r2, #0
    bede:	da05      	bge.n	beec <mayfly_xtal_stop_calc+0x104>
		ticks_to_expire -=
    bee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    bee2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    bee6:	4433      	add	r3, r6
    bee8:	1a9b      	subs	r3, r3, r2
    beea:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    beec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    beee:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    bef2:	4293      	cmp	r3, r2
    bef4:	d20a      	bcs.n	bf0c <mayfly_xtal_stop_calc+0x124>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    bef6:	2100      	movs	r1, #0
    bef8:	2001      	movs	r0, #1
    befa:	f7fe fe53 	bl	aba4 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    befe:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    bf02:	2101      	movs	r1, #1
    bf04:	4628      	mov	r0, r5
    bf06:	f7ff ff33 	bl	bd70 <prepare_normal_set>
    bf0a:	e7b9      	b.n	be80 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    bf0c:	2101      	movs	r1, #1
    bf0e:	4608      	mov	r0, r1
    bf10:	f7fe fe48 	bl	aba4 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    bf14:	682b      	ldr	r3, [r5, #0]
    bf16:	2b00      	cmp	r3, #0
    bf18:	db1c      	blt.n	bf54 <mayfly_xtal_stop_calc+0x16c>
    bf1a:	429e      	cmp	r6, r3
    bf1c:	d21a      	bcs.n	bf54 <mayfly_xtal_stop_calc+0x16c>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    bf1e:	1b9b      	subs	r3, r3, r6
			ticker_status =
    bf20:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    bf22:	b29b      	uxth	r3, r3
			ticker_status =
    bf24:	493b      	ldr	r1, [pc, #236]	; (c014 <mayfly_xtal_stop_calc+0x22c>)
    bf26:	9105      	str	r1, [sp, #20]
    bf28:	9302      	str	r3, [sp, #8]
    bf2a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    bf2e:	9506      	str	r5, [sp, #24]
    bf30:	9004      	str	r0, [sp, #16]
    bf32:	9003      	str	r0, [sp, #12]
    bf34:	9001      	str	r0, [sp, #4]
    bf36:	9000      	str	r0, [sp, #0]
    bf38:	2101      	movs	r1, #1
    bf3a:	f7fc fac1 	bl	84c0 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bf3e:	f030 0302 	bics.w	r3, r0, #2
    bf42:	d007      	beq.n	bf54 <mayfly_xtal_stop_calc+0x16c>
    bf44:	4b2c      	ldr	r3, [pc, #176]	; (bff8 <mayfly_xtal_stop_calc+0x210>)
    bf46:	9301      	str	r3, [sp, #4]
    bf48:	9300      	str	r3, [sp, #0]
    bf4a:	4a2c      	ldr	r2, [pc, #176]	; (bffc <mayfly_xtal_stop_calc+0x214>)
    bf4c:	4b2c      	ldr	r3, [pc, #176]	; (c000 <mayfly_xtal_stop_calc+0x218>)
    bf4e:	492d      	ldr	r1, [pc, #180]	; (c004 <mayfly_xtal_stop_calc+0x21c>)
    bf50:	4831      	ldr	r0, [pc, #196]	; (c018 <mayfly_xtal_stop_calc+0x230>)
    bf52:	e76e      	b.n	be32 <mayfly_xtal_stop_calc+0x4a>
		if (!conn_curr || !conn_next) {
    bf54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    bf56:	2e00      	cmp	r6, #0
    bf58:	d092      	beq.n	be80 <mayfly_xtal_stop_calc+0x98>
    bf5a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    bf5c:	2d00      	cmp	r5, #0
    bf5e:	d08f      	beq.n	be80 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    bf60:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    bf62:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    bf64:	429a      	cmp	r2, r3
    bf66:	d18b      	bne.n	be80 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    bf68:	482c      	ldr	r0, [pc, #176]	; (c01c <mayfly_xtal_stop_calc+0x234>)
    bf6a:	b292      	uxth	r2, r2
    bf6c:	fba2 0100 	umull	r0, r1, r2, r0
    bf70:	f240 1323 	movw	r3, #291	; 0x123
    bf74:	fb03 1102 	mla	r1, r3, r2, r1
    bf78:	a31b      	add	r3, pc, #108	; (adr r3, bfe8 <mayfly_xtal_stop_calc+0x200>)
    bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf7e:	f7f4 f949 	bl	214 <__aeabi_uldivmod>
    bf82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bf84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    bf88:	2200      	movs	r2, #0
    bf8a:	4298      	cmp	r0, r3
    bf8c:	d318      	bcc.n	bfc0 <mayfly_xtal_stop_calc+0x1d8>
    bf8e:	b102      	cbz	r2, bf92 <mayfly_xtal_stop_calc+0x1aa>
    bf90:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    bf92:	f996 201d 	ldrsb.w	r2, [r6, #29]
    bf96:	2a00      	cmp	r2, #0
    bf98:	f995 201d 	ldrsb.w	r2, [r5, #29]
    bf9c:	da13      	bge.n	bfc6 <mayfly_xtal_stop_calc+0x1de>
    bf9e:	2a00      	cmp	r2, #0
    bfa0:	f6ff af6e 	blt.w	be80 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
    bfa4:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    bfa6:	429c      	cmp	r4, r3
    bfa8:	f67f af6a 	bls.w	be80 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
    bfac:	4630      	mov	r0, r6
    bfae:	f7fe faff 	bl	a5b0 <conn_update_req>
				if (status == 2) {
    bfb2:	2802      	cmp	r0, #2
    bfb4:	f47f af64 	bne.w	be80 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
    bfb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    bfba:	f7fe faf9 	bl	a5b0 <conn_update_req>
    bfbe:	e75f      	b.n	be80 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
    bfc0:	1a1b      	subs	r3, r3, r0
    bfc2:	2201      	movs	r2, #1
    bfc4:	e7e1      	b.n	bf8a <mayfly_xtal_stop_calc+0x1a2>
			} else if (!conn_curr->role && conn_next->role &&
    bfc6:	2a00      	cmp	r2, #0
    bfc8:	f6bf af5a 	bge.w	be80 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
    bfcc:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    bfce:	429c      	cmp	r4, r3
    bfd0:	f67f af56 	bls.w	be80 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
    bfd4:	4628      	mov	r0, r5
    bfd6:	f7fe faeb 	bl	a5b0 <conn_update_req>
				if (status == 2) {
    bfda:	2802      	cmp	r0, #2
    bfdc:	f47f af50 	bne.w	be80 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
    bfe0:	980a      	ldr	r0, [sp, #40]	; 0x28
    bfe2:	e7ea      	b.n	bfba <mayfly_xtal_stop_calc+0x1d2>
    bfe4:	f3af 8000 	nop.w
    bfe8:	1afd498d 	.word	0x1afd498d
    bfec:	00000007 	.word	0x00000007
    bff0:	0000a50d 	.word	0x0000a50d
    bff4:	200008c8 	.word	0x200008c8
    bff8:	000153a9 	.word	0x000153a9
    bffc:	00016765 	.word	0x00016765
    c000:	000181f1 	.word	0x000181f1
    c004:	000167b4 	.word	0x000167b4
    c008:	00018f66 	.word	0x00018f66
    c00c:	00018c0a 	.word	0x00018c0a
    c010:	00018c34 	.word	0x00018c34
    c014:	0000a511 	.word	0x0000a511
    c018:	000184a7 	.word	0x000184a7
    c01c:	09ce5400 	.word	0x09ce5400

0000c020 <preempt_calc>:
{
    c020:	b570      	push	{r4, r5, r6, lr}
    c022:	4614      	mov	r4, r2
    c024:	460e      	mov	r6, r1
    c026:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    c028:	f7fc fb68 	bl	86fc <ticker_ticks_now_get>
	u32_t diff =
    c02c:	4621      	mov	r1, r4
    c02e:	f7fc fb67 	bl	8700 <ticker_ticks_diff_get>
	diff += 3;
    c032:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    c034:	2c09      	cmp	r4, #9
    c036:	d90f      	bls.n	c058 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    c038:	2100      	movs	r1, #0
    c03a:	4608      	mov	r0, r1
    c03c:	f7fe fdb2 	bl	aba4 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    c040:	4632      	mov	r2, r6
    c042:	2100      	movs	r1, #0
    c044:	4628      	mov	r0, r5
    c046:	f7ff fe93 	bl	bd70 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    c04a:	68ab      	ldr	r3, [r5, #8]
    c04c:	441c      	add	r4, r3
		if (diff <
    c04e:	2c26      	cmp	r4, #38	; 0x26
    c050:	d800      	bhi.n	c054 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    c052:	60ac      	str	r4, [r5, #8]
		return 1;
    c054:	2001      	movs	r0, #1
}
    c056:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    c058:	2000      	movs	r0, #0
    c05a:	bd70      	pop	{r4, r5, r6, pc}

0000c05c <adv_scan_configure.constprop.30>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    c05c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    c05e:	ad02      	add	r5, sp, #8
    c060:	4b10      	ldr	r3, [pc, #64]	; (c0a4 <adv_scan_configure.constprop.30+0x48>)
    c062:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    c066:	4604      	mov	r4, r0
	radio_reset();
    c068:	f006 fdf6 	bl	12c58 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    c06c:	2000      	movs	r0, #0
    c06e:	f006 fe1d 	bl	12cac <radio_tx_power_set>
	radio_isr_set(isr);
    c072:	480d      	ldr	r0, [pc, #52]	; (c0a8 <adv_scan_configure.constprop.30+0x4c>)
    c074:	f006 fdba 	bl	12bec <radio_isr_set>
	radio_phy_set(phy, flags);
    c078:	2101      	movs	r1, #1
    c07a:	4620      	mov	r0, r4
    c07c:	f006 fe06 	bl	12c8c <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    c080:	4628      	mov	r0, r5
    c082:	f006 fe31 	bl	12ce8 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    c086:	0062      	lsls	r2, r4, #1
    c088:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    c08c:	2125      	movs	r1, #37	; 0x25
    c08e:	2008      	movs	r0, #8
    c090:	f006 fe42 	bl	12d18 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    c094:	4905      	ldr	r1, [pc, #20]	; (c0ac <adv_scan_configure.constprop.30+0x50>)
    c096:	f240 605b 	movw	r0, #1627	; 0x65b
    c09a:	f006 fecd 	bl	12e38 <radio_crc_configure>
}
    c09e:	b003      	add	sp, #12
    c0a0:	bd30      	pop	{r4, r5, pc}
    c0a2:	bf00      	nop
    c0a4:	8e89bed6 	.word	0x8e89bed6
    c0a8:	0000f009 	.word	0x0000f009
    c0ac:	00555555 	.word	0x00555555

0000c0b0 <event_scan>:
{
    c0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    c0b2:	4b62      	ldr	r3, [pc, #392]	; (c23c <event_scan+0x18c>)
    c0b4:	7cda      	ldrb	r2, [r3, #19]
{
    c0b6:	b08d      	sub	sp, #52	; 0x34
    c0b8:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    c0ba:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    c0be:	461c      	mov	r4, r3
    c0c0:	b172      	cbz	r2, c0e0 <event_scan+0x30>
    c0c2:	4b5f      	ldr	r3, [pc, #380]	; (c240 <event_scan+0x190>)
    c0c4:	9301      	str	r3, [sp, #4]
    c0c6:	9300      	str	r3, [sp, #0]
    c0c8:	4a5e      	ldr	r2, [pc, #376]	; (c244 <event_scan+0x194>)
    c0ca:	4b5f      	ldr	r3, [pc, #380]	; (c248 <event_scan+0x198>)
    c0cc:	495f      	ldr	r1, [pc, #380]	; (c24c <event_scan+0x19c>)
    c0ce:	4860      	ldr	r0, [pc, #384]	; (c250 <event_scan+0x1a0>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    c0d0:	f7f4 ff5c 	bl	f8c <printk>
    c0d4:	4040      	eors	r0, r0
    c0d6:	f380 8811 	msr	BASEPRI, r0
    c0da:	f04f 0004 	mov.w	r0, #4
    c0de:	df02      	svc	2
    c0e0:	7c1b      	ldrb	r3, [r3, #16]
    c0e2:	b2db      	uxtb	r3, r3
    c0e4:	2b06      	cmp	r3, #6
    c0e6:	d007      	beq.n	c0f8 <event_scan+0x48>
    c0e8:	4b55      	ldr	r3, [pc, #340]	; (c240 <event_scan+0x190>)
    c0ea:	9301      	str	r3, [sp, #4]
    c0ec:	9300      	str	r3, [sp, #0]
    c0ee:	4a55      	ldr	r2, [pc, #340]	; (c244 <event_scan+0x194>)
    c0f0:	4b55      	ldr	r3, [pc, #340]	; (c248 <event_scan+0x198>)
    c0f2:	4956      	ldr	r1, [pc, #344]	; (c24c <event_scan+0x19c>)
    c0f4:	4857      	ldr	r0, [pc, #348]	; (c254 <event_scan+0x1a4>)
    c0f6:	e7eb      	b.n	c0d0 <event_scan+0x20>
	_radio.role = ROLE_SCAN;
    c0f8:	2202      	movs	r2, #2
    c0fa:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    c0fc:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    c0fe:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    c100:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    c104:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    c106:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    c10a:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    c10c:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    c110:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    c114:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    c116:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    c11a:	f7ff ff9f 	bl	c05c <adv_scan_configure.constprop.30>
	chan_set(37 + _radio.scanner.chan++);
    c11e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    c122:	f3c3 0081 	ubfx	r0, r3, #2, #2
    c126:	1c42      	adds	r2, r0, #1
    c128:	f362 0383 	bfi	r3, r2, #2, #2
    c12c:	3025      	adds	r0, #37	; 0x25
    c12e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    c132:	f7ff fcc3 	bl	babc <chan_set>
	if (_radio.scanner.chan == 3) {
    c136:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    c13a:	f003 020c 	and.w	r2, r3, #12
    c13e:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    c140:	bf08      	it	eq
    c142:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    c146:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    c14a:	bf08      	it	eq
    c14c:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    c150:	f006 ff2c 	bl	12fac <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    c154:	2300      	movs	r3, #0
    c156:	4619      	mov	r1, r3
    c158:	461a      	mov	r2, r3
    c15a:	4618      	mov	r0, r3
    c15c:	f006 fe96 	bl	12e8c <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    c160:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    c164:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    c168:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c16c:	3008      	adds	r0, #8
    c16e:	f006 fe01 	bl	12d74 <radio_pkt_rx_set>
	radio_rssi_measure();
    c172:	f006 fea3 	bl	12ebc <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    c176:	f006 f909 	bl	1238c <ctrl_rl_enabled>
    c17a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    c17e:	b340      	cbz	r0, c1d2 <event_scan+0x122>
		struct ll_filter *filter =
    c180:	f3c3 1000 	ubfx	r0, r3, #4, #1
    c184:	f005 ff22 	bl	11fcc <ctrl_filter_get>
    c188:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    c18a:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    c18e:	f005 fe4d 	bl	11e2c <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    c192:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    c194:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    c196:	1cb2      	adds	r2, r6, #2
    c198:	7830      	ldrb	r0, [r6, #0]
    c19a:	f006 feb1 	bl	12f00 <radio_filter_configure>
		radio_ar_configure(count, irks);
    c19e:	4639      	mov	r1, r7
    c1a0:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    c1a4:	f007 f886 	bl	132b4 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    c1a8:	68e2      	ldr	r2, [r4, #12]
    c1aa:	f105 0109 	add.w	r1, r5, #9
    c1ae:	2000      	movs	r0, #0
    c1b0:	f006 ff08 	bl	12fc4 <radio_tmr_start>
	radio_tmr_end_capture();
    c1b4:	f006 ffd6 	bl	13164 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    c1b8:	2106      	movs	r1, #6
    c1ba:	462a      	mov	r2, r5
    c1bc:	4826      	ldr	r0, [pc, #152]	; (c258 <event_scan+0x1a8>)
    c1be:	f7ff ff2f 	bl	c020 <preempt_calc>
    c1c2:	4601      	mov	r1, r0
    c1c4:	b188      	cbz	r0, c1ea <event_scan+0x13a>
		_radio.state = STATE_STOP;
    c1c6:	2304      	movs	r3, #4
    c1c8:	7523      	strb	r3, [r4, #20]
		radio_disable();
    c1ca:	f006 fdf9 	bl	12dc0 <radio_disable>
}
    c1ce:	b00d      	add	sp, #52	; 0x34
    c1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    c1d2:	f013 0f30 	tst.w	r3, #48	; 0x30
    c1d6:	d0e7      	beq.n	c1a8 <event_scan+0xf8>
		struct ll_filter *wl = ctrl_filter_get(true);
    c1d8:	2001      	movs	r0, #1
    c1da:	f005 fef7 	bl	11fcc <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    c1de:	1c82      	adds	r2, r0, #2
    c1e0:	7841      	ldrb	r1, [r0, #1]
    c1e2:	7800      	ldrb	r0, [r0, #0]
    c1e4:	f006 fe8c 	bl	12f00 <radio_filter_configure>
    c1e8:	e7de      	b.n	c1a8 <event_scan+0xf8>
		ret = ticker_start(
    c1ea:	f641 1336 	movw	r3, #6454	; 0x1936
    c1ee:	9308      	str	r3, [sp, #32]
    c1f0:	4b1a      	ldr	r3, [pc, #104]	; (c25c <event_scan+0x1ac>)
    c1f2:	9307      	str	r3, [sp, #28]
    c1f4:	2204      	movs	r2, #4
    c1f6:	4b1a      	ldr	r3, [pc, #104]	; (c260 <event_scan+0x1b0>)
    c1f8:	9206      	str	r2, [sp, #24]
    c1fa:	9305      	str	r3, [sp, #20]
    c1fc:	9004      	str	r0, [sp, #16]
    c1fe:	9003      	str	r0, [sp, #12]
    c200:	9002      	str	r0, [sp, #8]
    c202:	9001      	str	r0, [sp, #4]
    c204:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    c208:	3309      	adds	r3, #9
    c20a:	9300      	str	r3, [sp, #0]
    c20c:	462b      	mov	r3, r5
    c20e:	f7fc f907 	bl	8420 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c212:	f030 0302 	bics.w	r3, r0, #2
    c216:	d007      	beq.n	c228 <event_scan+0x178>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c218:	4b09      	ldr	r3, [pc, #36]	; (c240 <event_scan+0x190>)
    c21a:	9301      	str	r3, [sp, #4]
    c21c:	9300      	str	r3, [sp, #0]
    c21e:	4a09      	ldr	r2, [pc, #36]	; (c244 <event_scan+0x194>)
    c220:	4b09      	ldr	r3, [pc, #36]	; (c248 <event_scan+0x198>)
    c222:	490a      	ldr	r1, [pc, #40]	; (c24c <event_scan+0x19c>)
    c224:	480f      	ldr	r0, [pc, #60]	; (c264 <event_scan+0x1b4>)
    c226:	e753      	b.n	c0d0 <event_scan+0x20>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    c228:	4619      	mov	r1, r3
    c22a:	4618      	mov	r0, r3
    c22c:	4a0e      	ldr	r2, [pc, #56]	; (c268 <event_scan+0x1b8>)
    c22e:	f7fc fa13 	bl	8658 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c232:	f030 0302 	bics.w	r3, r0, #2
    c236:	d1ef      	bne.n	c218 <event_scan+0x168>
    c238:	e7c9      	b.n	c1ce <event_scan+0x11e>
    c23a:	bf00      	nop
    c23c:	200008c8 	.word	0x200008c8
    c240:	000153a9 	.word	0x000153a9
    c244:	00016765 	.word	0x00016765
    c248:	000182c0 	.word	0x000182c0
    c24c:	000167b4 	.word	0x000167b4
    c250:	000185c3 	.word	0x000185c3
    c254:	000185fd 	.word	0x000185fd
    c258:	20000998 	.word	0x20000998
    c25c:	0000b475 	.word	0x0000b475
    c260:	0000b6e5 	.word	0x0000b6e5
    c264:	0001863c 	.word	0x0001863c
    c268:	0000b65d 	.word	0x0000b65d

0000c26c <event_stop.constprop.31>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    c26c:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    c26e:	4b05      	ldr	r3, [pc, #20]	; (c284 <event_stop.constprop.31+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c270:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    c272:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c274:	4611      	mov	r1, r2
    c276:	4610      	mov	r0, r2
    c278:	f7fb fb14 	bl	78a4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    c27c:	b108      	cbz	r0, c282 <event_stop.constprop.31+0x16>
    c27e:	f7ff fa17 	bl	b6b0 <event_stop.part.10>
    c282:	bd08      	pop	{r3, pc}
    c284:	20003d70 	.word	0x20003d70

0000c288 <event_common_prepare>:
{
    c288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    c28c:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    c28e:	681d      	ldr	r5, [r3, #0]
{
    c290:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    c292:	2c00      	cmp	r4, #0
{
    c294:	4681      	mov	r9, r0
    c296:	910b      	str	r1, [sp, #44]	; 0x2c
    c298:	4690      	mov	r8, r2
    c29a:	469b      	mov	fp, r3
    c29c:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    c2a0:	da03      	bge.n	c2aa <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    c2a2:	9c16      	ldr	r4, [sp, #88]	; 0x58
    c2a4:	42ac      	cmp	r4, r5
    c2a6:	bf38      	it	cc
    c2a8:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    c2aa:	42ac      	cmp	r4, r5
    c2ac:	4f56      	ldr	r7, [pc, #344]	; (c408 <event_common_prepare+0x180>)
    c2ae:	d924      	bls.n	c2fa <event_common_prepare+0x72>
		ticker_status =
    c2b0:	f241 5374 	movw	r3, #5492	; 0x1574
    c2b4:	9308      	str	r3, [sp, #32]
    c2b6:	4b55      	ldr	r3, [pc, #340]	; (c40c <event_common_prepare+0x184>)
    c2b8:	9305      	str	r3, [sp, #20]
    c2ba:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    c2bc:	1b63      	subs	r3, r4, r5
		ticker_status =
    c2be:	9300      	str	r3, [sp, #0]
    c2c0:	9707      	str	r7, [sp, #28]
    c2c2:	464b      	mov	r3, r9
    c2c4:	9106      	str	r1, [sp, #24]
    c2c6:	9104      	str	r1, [sp, #16]
    c2c8:	9103      	str	r1, [sp, #12]
    c2ca:	9102      	str	r1, [sp, #8]
    c2cc:	9101      	str	r1, [sp, #4]
    c2ce:	2201      	movs	r2, #1
    c2d0:	4608      	mov	r0, r1
    c2d2:	f7fc f8a5 	bl	8420 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c2d6:	f030 0302 	bics.w	r3, r0, #2
    c2da:	d034      	beq.n	c346 <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c2dc:	4b4c      	ldr	r3, [pc, #304]	; (c410 <event_common_prepare+0x188>)
    c2de:	9301      	str	r3, [sp, #4]
    c2e0:	9300      	str	r3, [sp, #0]
    c2e2:	4a4c      	ldr	r2, [pc, #304]	; (c414 <event_common_prepare+0x18c>)
    c2e4:	4b4c      	ldr	r3, [pc, #304]	; (c418 <event_common_prepare+0x190>)
    c2e6:	494d      	ldr	r1, [pc, #308]	; (c41c <event_common_prepare+0x194>)
    c2e8:	484d      	ldr	r0, [pc, #308]	; (c420 <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
    c2ea:	f7f4 fe4f 	bl	f8c <printk>
    c2ee:	4040      	eors	r0, r0
    c2f0:	f380 8811 	msr	BASEPRI, r0
    c2f4:	f04f 0004 	mov.w	r0, #4
    c2f8:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    c2fa:	d21d      	bcs.n	c338 <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
    c2fc:	2300      	movs	r3, #0
    c2fe:	461a      	mov	r2, r3
    c300:	4619      	mov	r1, r3
    c302:	4618      	mov	r0, r3
    c304:	f7ff f9fe 	bl	b704 <event_active>
		ticker_status =
    c308:	f241 5389 	movw	r3, #5513	; 0x1589
    c30c:	2100      	movs	r1, #0
    c30e:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    c310:	1b2c      	subs	r4, r5, r4
		ticker_status =
    c312:	4b44      	ldr	r3, [pc, #272]	; (c424 <event_common_prepare+0x19c>)
    c314:	9305      	str	r3, [sp, #20]
    c316:	9707      	str	r7, [sp, #28]
    c318:	464b      	mov	r3, r9
    c31a:	9106      	str	r1, [sp, #24]
    c31c:	9104      	str	r1, [sp, #16]
    c31e:	9103      	str	r1, [sp, #12]
    c320:	9102      	str	r1, [sp, #8]
    c322:	9101      	str	r1, [sp, #4]
    c324:	9400      	str	r4, [sp, #0]
    c326:	2201      	movs	r2, #1
    c328:	4608      	mov	r0, r1
    c32a:	f7fc f879 	bl	8420 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c32e:	f030 0302 	bics.w	r3, r0, #2
    c332:	d1d3      	bne.n	c2dc <event_common_prepare+0x54>
    c334:	462c      	mov	r4, r5
    c336:	e00b      	b.n	c350 <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
    c338:	2300      	movs	r3, #0
    c33a:	461a      	mov	r2, r3
    c33c:	4619      	mov	r1, r3
    c33e:	4618      	mov	r0, r3
    c340:	f7ff f9e0 	bl	b704 <event_active>
		event_xtal(0, 0, 0, NULL);
    c344:	2300      	movs	r3, #0
    c346:	461a      	mov	r2, r3
    c348:	4619      	mov	r1, r3
    c34a:	4618      	mov	r0, r3
    c34c:	f7ff fa00 	bl	b750 <event_xtal>
	_radio.remainder_anchor = remainder;
    c350:	4e35      	ldr	r6, [pc, #212]	; (c428 <event_common_prepare+0x1a0>)
    c352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c354:	60f3      	str	r3, [r6, #12]
	ticker_status =
    c356:	f241 53a1 	movw	r3, #5537	; 0x15a1
    c35a:	9308      	str	r3, [sp, #32]
    c35c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c35e:	9306      	str	r3, [sp, #24]
    c360:	2200      	movs	r2, #0
    c362:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c364:	9305      	str	r3, [sp, #20]
    c366:	9707      	str	r7, [sp, #28]
    c368:	464b      	mov	r3, r9
    c36a:	9204      	str	r2, [sp, #16]
    c36c:	9203      	str	r2, [sp, #12]
    c36e:	9202      	str	r2, [sp, #8]
    c370:	9201      	str	r2, [sp, #4]
    c372:	9400      	str	r4, [sp, #0]
    c374:	4611      	mov	r1, r2
    c376:	4610      	mov	r0, r2
    c378:	f7fc f852 	bl	8420 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c37c:	f030 0302 	bics.w	r3, r0, #2
    c380:	d1ac      	bne.n	c2dc <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    c382:	2005      	movs	r0, #5
    c384:	f7ff ff72 	bl	c26c <event_stop.constprop.31>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    c388:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    c38c:	429d      	cmp	r5, r3
    c38e:	d023      	beq.n	c3d8 <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    c390:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    c394:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    c398:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    c39a:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    c39c:	bfbc      	itt	lt
    c39e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    c3a2:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    c3a6:	f8d8 2000 	ldr.w	r2, [r8]
    c3aa:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    c3ae:	428a      	cmp	r2, r1
    c3b0:	bf38      	it	cc
    c3b2:	460a      	movcc	r2, r1
		ticker_status =
    c3b4:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    c3b8:	b2a3      	uxth	r3, r4
    c3ba:	b292      	uxth	r2, r2
		ticker_status =
    c3bc:	9106      	str	r1, [sp, #24]
    c3be:	2100      	movs	r1, #0
    c3c0:	9302      	str	r3, [sp, #8]
    c3c2:	9201      	str	r2, [sp, #4]
    c3c4:	9200      	str	r2, [sp, #0]
    c3c6:	9104      	str	r1, [sp, #16]
    c3c8:	9103      	str	r1, [sp, #12]
    c3ca:	4652      	mov	r2, sl
    c3cc:	4608      	mov	r0, r1
    c3ce:	f7fc f877 	bl	84c0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c3d2:	f030 0302 	bics.w	r3, r0, #2
    c3d6:	d181      	bne.n	c2dc <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    c3d8:	20ff      	movs	r0, #255	; 0xff
    c3da:	f7ff fa85 	bl	b8e8 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    c3de:	4b13      	ldr	r3, [pc, #76]	; (c42c <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c3e0:	2201      	movs	r2, #1
    c3e2:	4611      	mov	r1, r2
    c3e4:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    c3e6:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c3ea:	f7fb fa5b 	bl	78a4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c3ee:	b138      	cbz	r0, c400 <event_common_prepare+0x178>
    c3f0:	4b07      	ldr	r3, [pc, #28]	; (c410 <event_common_prepare+0x188>)
    c3f2:	9301      	str	r3, [sp, #4]
    c3f4:	9300      	str	r3, [sp, #0]
    c3f6:	4a07      	ldr	r2, [pc, #28]	; (c414 <event_common_prepare+0x18c>)
    c3f8:	4b07      	ldr	r3, [pc, #28]	; (c418 <event_common_prepare+0x190>)
    c3fa:	4908      	ldr	r1, [pc, #32]	; (c41c <event_common_prepare+0x194>)
    c3fc:	480c      	ldr	r0, [pc, #48]	; (c430 <event_common_prepare+0x1a8>)
    c3fe:	e774      	b.n	c2ea <event_common_prepare+0x62>
}
    c400:	b00d      	add	sp, #52	; 0x34
    c402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c406:	bf00      	nop
    c408:	0000b475 	.word	0x0000b475
    c40c:	0000b705 	.word	0x0000b705
    c410:	000153a9 	.word	0x000153a9
    c414:	00016765 	.word	0x00016765
    c418:	0001827f 	.word	0x0001827f
    c41c:	000167b4 	.word	0x000167b4
    c420:	000184a7 	.word	0x000184a7
    c424:	0000b751 	.word	0x0000b751
    c428:	200008c8 	.word	0x200008c8
    c42c:	20003e10 	.word	0x20003e10
    c430:	00018be1 	.word	0x00018be1

0000c434 <event_scan_prepare>:
{
    c434:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    c436:	4c25      	ldr	r4, [pc, #148]	; (c4cc <event_scan_prepare+0x98>)
    c438:	7c23      	ldrb	r3, [r4, #16]
{
    c43a:	b085      	sub	sp, #20
    c43c:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    c43e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    c442:	b173      	cbz	r3, c462 <event_scan_prepare+0x2e>
    c444:	4b22      	ldr	r3, [pc, #136]	; (c4d0 <event_scan_prepare+0x9c>)
    c446:	9301      	str	r3, [sp, #4]
    c448:	9300      	str	r3, [sp, #0]
    c44a:	4a22      	ldr	r2, [pc, #136]	; (c4d4 <event_scan_prepare+0xa0>)
    c44c:	4b22      	ldr	r3, [pc, #136]	; (c4d8 <event_scan_prepare+0xa4>)
    c44e:	4923      	ldr	r1, [pc, #140]	; (c4dc <event_scan_prepare+0xa8>)
    c450:	4823      	ldr	r0, [pc, #140]	; (c4e0 <event_scan_prepare+0xac>)
		LL_ASSERT(!retval);
    c452:	f7f4 fd9b 	bl	f8c <printk>
    c456:	4040      	eors	r0, r0
    c458:	f380 8811 	msr	BASEPRI, r0
    c45c:	f04f 0004 	mov.w	r0, #4
    c460:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    c462:	2306      	movs	r3, #6
    c464:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    c466:	9203      	str	r2, [sp, #12]
    c468:	9301      	str	r3, [sp, #4]
    c46a:	4a1e      	ldr	r2, [pc, #120]	; (c4e4 <event_scan_prepare+0xb0>)
    c46c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    c470:	9202      	str	r2, [sp, #8]
    c472:	9300      	str	r3, [sp, #0]
    c474:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    c478:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    c47c:	f7ff ff04 	bl	c288 <event_common_prepare>
	if (_radio.scanner.conn) {
    c480:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    c484:	b303      	cbz	r3, c4c8 <event_scan_prepare+0x94>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    c486:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    c48a:	2b00      	cmp	r3, #0
    c48c:	da0c      	bge.n	c4a8 <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
    c48e:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    c492:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    c496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    c49a:	4291      	cmp	r1, r2
    c49c:	bf2c      	ite	cs
    c49e:	ebc3 0301 	rsbcs	r3, r3, r1
    c4a2:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    c4a6:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    c4a8:	4b0f      	ldr	r3, [pc, #60]	; (c4e8 <event_scan_prepare+0xb4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c4aa:	2201      	movs	r2, #1
    c4ac:	4611      	mov	r1, r2
    c4ae:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    c4b0:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c4b2:	f7fb f9f7 	bl	78a4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c4b6:	b138      	cbz	r0, c4c8 <event_scan_prepare+0x94>
    c4b8:	4b05      	ldr	r3, [pc, #20]	; (c4d0 <event_scan_prepare+0x9c>)
    c4ba:	9301      	str	r3, [sp, #4]
    c4bc:	9300      	str	r3, [sp, #0]
    c4be:	4a05      	ldr	r2, [pc, #20]	; (c4d4 <event_scan_prepare+0xa0>)
    c4c0:	4b05      	ldr	r3, [pc, #20]	; (c4d8 <event_scan_prepare+0xa4>)
    c4c2:	4906      	ldr	r1, [pc, #24]	; (c4dc <event_scan_prepare+0xa8>)
    c4c4:	4809      	ldr	r0, [pc, #36]	; (c4ec <event_scan_prepare+0xb8>)
    c4c6:	e7c4      	b.n	c452 <event_scan_prepare+0x1e>
}
    c4c8:	b005      	add	sp, #20
    c4ca:	bd30      	pop	{r4, r5, pc}
    c4cc:	200008c8 	.word	0x200008c8
    c4d0:	000153a9 	.word	0x000153a9
    c4d4:	00016765 	.word	0x00016765
    c4d8:	000182ad 	.word	0x000182ad
    c4dc:	000167b4 	.word	0x000167b4
    c4e0:	00018d1d 	.word	0x00018d1d
    c4e4:	0000c0b1 	.word	0x0000c0b1
    c4e8:	20003d90 	.word	0x20003d90
    c4ec:	00018be1 	.word	0x00018be1

0000c4f0 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    c4f0:	4b02      	ldr	r3, [pc, #8]	; (c4fc <mayfly_xtal_start+0xc>)
    c4f2:	6818      	ldr	r0, [r3, #0]
    c4f4:	6843      	ldr	r3, [r0, #4]
    c4f6:	2100      	movs	r1, #0
    c4f8:	681b      	ldr	r3, [r3, #0]
    c4fa:	4718      	bx	r3
    c4fc:	200008c8 	.word	0x200008c8

0000c500 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    c500:	4b02      	ldr	r3, [pc, #8]	; (c50c <mayfly_xtal_stop+0xc>)
    c502:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    c504:	6843      	ldr	r3, [r0, #4]
    c506:	2100      	movs	r1, #0
    c508:	685b      	ldr	r3, [r3, #4]
    c50a:	4718      	bx	r3
    c50c:	200008c8 	.word	0x200008c8

0000c510 <chan_sel_2>:
{
    c510:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    c512:	4048      	eors	r0, r1
    c514:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    c516:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    c51a:	2608      	movs	r6, #8
	o = 0;
    c51c:	2400      	movs	r4, #0
		o |= (i & 1);
    c51e:	f00e 0501 	and.w	r5, lr, #1
    c522:	3e01      	subs	r6, #1
    c524:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    c528:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    c52c:	b2ec      	uxtb	r4, r5
		i >>= 1;
    c52e:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    c532:	d1f4      	bne.n	c51e <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    c534:	0225      	lsls	r5, r4, #8
    c536:	b22d      	sxth	r5, r5
    c538:	b2c0      	uxtb	r0, r0
    c53a:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    c53e:	4634      	mov	r4, r6
		o |= (i & 1);
    c540:	f000 0601 	and.w	r6, r0, #1
    c544:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    c548:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    c54c:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    c550:	b2e4      	uxtb	r4, r4
		i >>= 1;
    c552:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    c556:	d1f3      	bne.n	c540 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    c558:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    c55a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    c55e:	3f01      	subs	r7, #1
    c560:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    c562:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    c566:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    c568:	d1d5      	bne.n	c516 <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    c56a:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    c56c:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    c56e:	fbb1 f0f4 	udiv	r0, r1, r4
    c572:	fb04 1010 	mls	r0, r4, r0, r1
    c576:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    c578:	08c4      	lsrs	r4, r0, #3
    c57a:	f000 0507 	and.w	r5, r0, #7
    c57e:	5d14      	ldrb	r4, [r2, r4]
    c580:	412c      	asrs	r4, r5
    c582:	07e4      	lsls	r4, r4, #31
    c584:	d407      	bmi.n	c596 <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    c586:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    c588:	f3c1 4107 	ubfx	r1, r1, #16, #8
    c58c:	4610      	mov	r0, r2
}
    c58e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    c592:	f7fd bfc9 	b.w	a528 <chan_sel_remap>
}
    c596:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c598 <ctrl_tx_enqueue>:
{
    c598:	b510      	push	{r4, lr}
	    !conn->empty &&
    c59a:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    c59e:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    c5a2:	f014 0f80 	tst.w	r4, #128	; 0x80
    c5a6:	d118      	bne.n	c5da <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    c5a8:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    c5ac:	b1ab      	cbz	r3, c5da <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    c5ae:	0724      	lsls	r4, r4, #28
    c5b0:	d413      	bmi.n	c5da <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    c5b2:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    c5b6:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    c5b8:	bf04      	itt	eq
    c5ba:	681c      	ldreq	r4, [r3, #0]
    c5bc:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    c5c0:	b992      	cbnz	r2, c5e8 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    c5c2:	681a      	ldr	r2, [r3, #0]
    c5c4:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    c5c6:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    c5c8:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    c5cc:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    c5d0:	680b      	ldr	r3, [r1, #0]
    c5d2:	b90b      	cbnz	r3, c5d8 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    c5d4:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    c5d8:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    c5da:	b92a      	cbnz	r2, c5e8 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    c5dc:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    c5e0:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    c5e2:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    c5e6:	e7ef      	b.n	c5c8 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    c5e8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    c5ec:	681a      	ldr	r2, [r3, #0]
    c5ee:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    c5f0:	6019      	str	r1, [r3, #0]
    c5f2:	e7eb      	b.n	c5cc <ctrl_tx_enqueue+0x34>

0000c5f4 <ctrl_tx_sec_enqueue>:
{
    c5f4:	b410      	push	{r4}
	if (conn->pause_tx) {
    c5f6:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    c5fa:	0724      	lsls	r4, r4, #28
{
    c5fc:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    c5fe:	d50f      	bpl.n	c620 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    c600:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    c604:	b931      	cbnz	r1, c614 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    c606:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    c60a:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    c60c:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    c610:	bc10      	pop	{r4}
    c612:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    c614:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    c618:	6819      	ldr	r1, [r3, #0]
    c61a:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    c61c:	601a      	str	r2, [r3, #0]
    c61e:	e7f7      	b.n	c610 <ctrl_tx_sec_enqueue+0x1c>
}
    c620:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    c622:	f7ff bfb9 	b.w	c598 <ctrl_tx_enqueue>
	...

0000c628 <feature_rsp_send>:
{
    c628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c62a:	4f21      	ldr	r7, [pc, #132]	; (c6b0 <feature_rsp_send+0x88>)
{
    c62c:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c62e:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    c632:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c634:	f7fb f86b 	bl	770e <mem_acquire>
	if (!node_tx) {
    c638:	4604      	mov	r4, r0
    c63a:	b3b0      	cbz	r0, c6aa <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    c63c:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    c63e:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    c640:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    c644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    c648:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    c64c:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    c650:	f043 0310 	orr.w	r3, r3, #16
    c654:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    c658:	79b1      	ldrb	r1, [r6, #6]
    c65a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    c65e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    c662:	f3c1 0110 	ubfx	r1, r1, #0, #17
    c666:	400b      	ands	r3, r1
    c668:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    c66c:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    c670:	f043 0320 	orr.w	r3, r3, #32
    c674:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c678:	7903      	ldrb	r3, [r0, #4]
    c67a:	f043 0303 	orr.w	r3, r3, #3
    c67e:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    c680:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    c682:	2309      	movs	r3, #9
    c684:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    c686:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    c688:	2100      	movs	r1, #0
    c68a:	4410      	add	r0, r2
    c68c:	f7f5 fae2 	bl	1c54 <memset>
		conn->llcp_features & 0xFF;
    c690:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    c694:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    c696:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    c698:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    c69a:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    c69c:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    c69e:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    c6a0:	4621      	mov	r1, r4
    c6a2:	f7ff ffa7 	bl	c5f4 <ctrl_tx_sec_enqueue>
	return 0;
    c6a6:	2000      	movs	r0, #0
    c6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    c6aa:	2001      	movs	r0, #1
}
    c6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6ae:	bf00      	nop
    c6b0:	200008c8 	.word	0x200008c8

0000c6b4 <start_enc_rsp_send>:
{
    c6b4:	b510      	push	{r4, lr}
    c6b6:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    c6b8:	b9c9      	cbnz	r1, c6ee <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c6ba:	480f      	ldr	r0, [pc, #60]	; (c6f8 <start_enc_rsp_send+0x44>)
    c6bc:	f7fb f827 	bl	770e <mem_acquire>
		if (!node_tx) {
    c6c0:	b1b8      	cbz	r0, c6f2 <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    c6c2:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    c6c4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c6c8:	f043 0320 	orr.w	r3, r3, #32
    c6cc:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c6d0:	780b      	ldrb	r3, [r1, #0]
    c6d2:	f043 0303 	orr.w	r3, r3, #3
    c6d6:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    c6d8:	2301      	movs	r3, #1
    c6da:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    c6dc:	2306      	movs	r3, #6
    c6de:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    c6e0:	b140      	cbz	r0, c6f4 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    c6e2:	4601      	mov	r1, r0
    c6e4:	4620      	mov	r0, r4
    c6e6:	f7ff ff57 	bl	c598 <ctrl_tx_enqueue>
	return 0;
    c6ea:	2000      	movs	r0, #0
    c6ec:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    c6ee:	2000      	movs	r0, #0
    c6f0:	e7e8      	b.n	c6c4 <start_enc_rsp_send+0x10>
			return 1;
    c6f2:	2001      	movs	r0, #1
}
    c6f4:	bd10      	pop	{r4, pc}
    c6f6:	bf00      	nop
    c6f8:	20000a24 	.word	0x20000a24

0000c6fc <reject_ext_ind_send>:
{
    c6fc:	b570      	push	{r4, r5, r6, lr}
    c6fe:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c700:	480b      	ldr	r0, [pc, #44]	; (c730 <reject_ext_ind_send+0x34>)
{
    c702:	460e      	mov	r6, r1
    c704:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c706:	f7fb f802 	bl	770e <mem_acquire>
	if (!node_tx) {
    c70a:	b178      	cbz	r0, c72c <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c70c:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    c70e:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c710:	f043 0303 	orr.w	r3, r3, #3
    c714:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    c716:	2303      	movs	r3, #3
    c718:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c71a:	2311      	movs	r3, #17
    c71c:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    c71e:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    c720:	4601      	mov	r1, r0
    c722:	4620      	mov	r0, r4
    c724:	f7ff ff38 	bl	c598 <ctrl_tx_enqueue>
	return 0;
    c728:	2000      	movs	r0, #0
    c72a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    c72c:	2001      	movs	r0, #1
}
    c72e:	bd70      	pop	{r4, r5, r6, pc}
    c730:	20000a24 	.word	0x20000a24
    c734:	00000000 	.word	0x00000000

0000c738 <event_connection_prepare>:
{
    c738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    c73c:	4db8      	ldr	r5, [pc, #736]	; (ca20 <event_connection_prepare+0x2e8>)
{
    c73e:	b08f      	sub	sp, #60	; 0x3c
    c740:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    c742:	7c2b      	ldrb	r3, [r5, #16]
{
    c744:	910c      	str	r1, [sp, #48]	; 0x30
    c746:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    c748:	b173      	cbz	r3, c768 <event_connection_prepare+0x30>
    c74a:	4bb6      	ldr	r3, [pc, #728]	; (ca24 <event_connection_prepare+0x2ec>)
    c74c:	9301      	str	r3, [sp, #4]
    c74e:	9300      	str	r3, [sp, #0]
    c750:	4ab5      	ldr	r2, [pc, #724]	; (ca28 <event_connection_prepare+0x2f0>)
    c752:	4bb6      	ldr	r3, [pc, #728]	; (ca2c <event_connection_prepare+0x2f4>)
    c754:	49b6      	ldr	r1, [pc, #728]	; (ca30 <event_connection_prepare+0x2f8>)
    c756:	48b7      	ldr	r0, [pc, #732]	; (ca34 <event_connection_prepare+0x2fc>)
		LL_ASSERT(!retval);
    c758:	f7f4 fc18 	bl	f8c <printk>
    c75c:	4040      	eors	r0, r0
    c75e:	f380 8811 	msr	BASEPRI, r0
    c762:	f04f 0004 	mov.w	r0, #4
    c766:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    c768:	f894 3020 	ldrb.w	r3, [r4, #32]
    c76c:	3307      	adds	r3, #7
    c76e:	b2db      	uxtb	r3, r3
    c770:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    c772:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c776:	2b00      	cmp	r3, #0
    c778:	da09      	bge.n	c78e <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    c77a:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    c77c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    c77e:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    c782:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    c784:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    c786:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    c788:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    c78a:	bf88      	it	hi
    c78c:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    c78e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    c790:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    c794:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    c796:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    c798:	b292      	uxth	r2, r2
    c79a:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    c79c:	4432      	add	r2, r6
    c79e:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    c7a0:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    c7a4:	429a      	cmp	r2, r3
    c7a6:	f040 81ba 	bne.w	cb1e <event_connection_prepare+0x3e6>
    c7aa:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c7ae:	075f      	lsls	r7, r3, #29
    c7b0:	f100 84ab 	bmi.w	d10a <event_connection_prepare+0x9d2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    c7b4:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    c7b8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    c7bc:	429a      	cmp	r2, r3
    c7be:	f000 8096 	beq.w	c8ee <event_connection_prepare+0x1b6>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    c7c2:	2005      	movs	r0, #5
    c7c4:	f7ff fd52 	bl	c26c <event_stop.constprop.31>
	conn_upd = _radio.conn_upd;
    c7c8:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    c7cc:	b113      	cbz	r3, c7d4 <event_connection_prepare+0x9c>
    c7ce:	429c      	cmp	r4, r3
    c7d0:	f040 808d 	bne.w	c8ee <event_connection_prepare+0x1b6>
	switch (conn->llcp_conn_param.state) {
    c7d4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    c7d8:	f003 0307 	and.w	r3, r3, #7
    c7dc:	2b05      	cmp	r3, #5
    c7de:	f200 815d 	bhi.w	ca9c <event_connection_prepare+0x364>
    c7e2:	e8df f013 	tbh	[pc, r3, lsl #1]
    c7e6:	0006      	.short	0x0006
    c7e8:	01310065 	.word	0x01310065
    c7ec:	00840084 	.word	0x00840084
    c7f0:	0084      	.short	0x0084
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c7f2:	4891      	ldr	r0, [pc, #580]	; (ca38 <event_connection_prepare+0x300>)
    c7f4:	f7fa ff8b 	bl	770e <mem_acquire>
	if (!node_tx) {
    c7f8:	4607      	mov	r7, r0
    c7fa:	2800      	cmp	r0, #0
    c7fc:	d077      	beq.n	c8ee <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    c7fe:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    c802:	2204      	movs	r2, #4
    c804:	f362 0302 	bfi	r3, r2, #0, #3
    c808:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c80c:	7903      	ldrb	r3, [r0, #4]
    c80e:	f043 0303 	orr.w	r3, r3, #3
    c812:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    c814:	2318      	movs	r3, #24
    c816:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    c818:	230f      	movs	r3, #15
    c81a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    c81c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c820:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    c822:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    c824:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c828:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    c82a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c82e:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    c830:	2300      	movs	r3, #0
    c832:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    c834:	74c3      	strb	r3, [r0, #19]
    c836:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    c838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c83c:	7543      	strb	r3, [r0, #21]
    c83e:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    c840:	75c3      	strb	r3, [r0, #23]
    c842:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    c844:	7643      	strb	r3, [r0, #25]
    c846:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    c848:	76c3      	strb	r3, [r0, #27]
    c84a:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    c84c:	7743      	strb	r3, [r0, #29]
    c84e:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    c850:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    c854:	4601      	mov	r1, r0
    c856:	4620      	mov	r0, r4
    c858:	f7ff fe9e 	bl	c598 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c85c:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    c85e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    c862:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c866:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    c868:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    c86c:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c870:	da0b      	bge.n	c88a <event_connection_prepare+0x152>
			u32_t ticks_prepare_to_start =
    c872:	68a3      	ldr	r3, [r4, #8]
    c874:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    c876:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    c87a:	428b      	cmp	r3, r1
    c87c:	bf2c      	ite	cs
    c87e:	4443      	addcs	r3, r8
    c880:	eb08 0301 	addcc.w	r3, r8, r1
    c884:	1a9b      	subs	r3, r3, r2
    c886:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    c88a:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    c88c:	4b6b      	ldr	r3, [pc, #428]	; (ca3c <event_connection_prepare+0x304>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    c88e:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c892:	2201      	movs	r2, #1
    c894:	4611      	mov	r1, r2
    c896:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    c898:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c89a:	f7fb f803 	bl	78a4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c89e:	b330      	cbz	r0, c8ee <event_connection_prepare+0x1b6>
    c8a0:	4b60      	ldr	r3, [pc, #384]	; (ca24 <event_connection_prepare+0x2ec>)
    c8a2:	9301      	str	r3, [sp, #4]
    c8a4:	9300      	str	r3, [sp, #0]
    c8a6:	4b66      	ldr	r3, [pc, #408]	; (ca40 <event_connection_prepare+0x308>)
    c8a8:	4a5f      	ldr	r2, [pc, #380]	; (ca28 <event_connection_prepare+0x2f0>)
    c8aa:	4961      	ldr	r1, [pc, #388]	; (ca30 <event_connection_prepare+0x2f8>)
    c8ac:	4865      	ldr	r0, [pc, #404]	; (ca44 <event_connection_prepare+0x30c>)
    c8ae:	e753      	b.n	c758 <event_connection_prepare+0x20>
	if (conn->llcp_conn_param.status) {
    c8b0:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    c8b4:	b397      	cbz	r7, c91c <event_connection_prepare+0x1e4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c8b6:	4860      	ldr	r0, [pc, #384]	; (ca38 <event_connection_prepare+0x300>)
    c8b8:	f7fa ff29 	bl	770e <mem_acquire>
		if (!node_tx) {
    c8bc:	4601      	mov	r1, r0
    c8be:	b1b0      	cbz	r0, c8ee <event_connection_prepare+0x1b6>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    c8c0:	7903      	ldrb	r3, [r0, #4]
    c8c2:	f043 0303 	orr.w	r3, r3, #3
    c8c6:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c8c8:	2311      	movs	r3, #17
    c8ca:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    c8cc:	2303      	movs	r3, #3
    c8ce:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    c8d0:	230f      	movs	r3, #15
    c8d2:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    c8d4:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    c8d8:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    c8da:	4620      	mov	r0, r4
    c8dc:	f7ff fe5c 	bl	c598 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c8e0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    c8e4:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    c8e8:	2300      	movs	r3, #0
    c8ea:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    c8ee:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    c8f2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    c8f6:	429a      	cmp	r2, r3
    c8f8:	f000 810a 	beq.w	cb10 <event_connection_prepare+0x3d8>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    c8fc:	2005      	movs	r0, #5
    c8fe:	f7ff fcb5 	bl	c26c <event_stop.constprop.31>
	switch (conn->llcp_phy.state) {
    c902:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    c906:	f003 0203 	and.w	r2, r3, #3
    c90a:	2a03      	cmp	r2, #3
    c90c:	f200 8179 	bhi.w	cc02 <event_connection_prepare+0x4ca>
    c910:	e8df f012 	tbh	[pc, r2, lsl #1]
    c914:	00fe00cc 	.word	0x00fe00cc
    c918:	011800fe 	.word	0x011800fe
	if (!conn->role) {
    c91c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c920:	2b00      	cmp	r3, #0
    c922:	db3b      	blt.n	c99c <event_connection_prepare+0x264>
		if (conn->llcp_req != conn->llcp_ack) {
    c924:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    c928:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    c92c:	428b      	cmp	r3, r1
    c92e:	d1de      	bne.n	c8ee <event_connection_prepare+0x1b6>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c930:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    c934:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c938:	2205      	movs	r2, #5
    c93a:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    c93e:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c942:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    c946:	2301      	movs	r3, #1
    c948:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    c94c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    c950:	b122      	cbz	r2, c95c <event_connection_prepare+0x224>
				((conn->llcp_conn_param.interval /
    c952:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    c956:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    c958:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    c95c:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    c960:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c964:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    c968:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c96c:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    c970:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c974:	2202      	movs	r2, #2
    c976:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    c97a:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    c97e:	f082 0208 	eor.w	r2, r2, #8
    c982:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    c986:	f362 0382 	bfi	r3, r2, #2, #1
    c98a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    c98e:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    c990:	2301      	movs	r3, #1
    c992:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    c996:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    c99a:	e7a8      	b.n	c8ee <event_connection_prepare+0x1b6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c99c:	4826      	ldr	r0, [pc, #152]	; (ca38 <event_connection_prepare+0x300>)
    c99e:	f7fa feb6 	bl	770e <mem_acquire>
	if (!node_tx) {
    c9a2:	4601      	mov	r1, r0
    c9a4:	2800      	cmp	r0, #0
    c9a6:	d0a2      	beq.n	c8ee <event_connection_prepare+0x1b6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c9a8:	7903      	ldrb	r3, [r0, #4]
    c9aa:	f043 0303 	orr.w	r3, r3, #3
    c9ae:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    c9b0:	2318      	movs	r3, #24
    c9b2:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    c9b4:	2310      	movs	r3, #16
    c9b6:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    c9b8:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c9bc:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    c9be:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    c9c0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c9c4:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    c9c6:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c9ca:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    c9cc:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    c9d0:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    c9d2:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    c9d6:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    c9da:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    c9de:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    c9e2:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    c9e6:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    c9ea:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    c9ee:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    c9f2:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    c9f6:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    c9fa:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    c9fe:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    ca02:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    ca06:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    ca0a:	4620      	mov	r0, r4
    ca0c:	f7ff fdc4 	bl	c598 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    ca10:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ca14:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    ca18:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    ca1c:	e767      	b.n	c8ee <event_connection_prepare+0x1b6>
    ca1e:	bf00      	nop
    ca20:	200008c8 	.word	0x200008c8
    ca24:	000153a9 	.word	0x000153a9
    ca28:	00016765 	.word	0x00016765
    ca2c:	00018366 	.word	0x00018366
    ca30:	000167b4 	.word	0x000167b4
    ca34:	00018d1d 	.word	0x00018d1d
    ca38:	20000a24 	.word	0x20000a24
    ca3c:	20003db0 	.word	0x20003db0
    ca40:	00018302 	.word	0x00018302
    ca44:	00018be1 	.word	0x00018be1
	if (conn->pause_tx) {
    ca48:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    ca4c:	0718      	lsls	r0, r3, #28
    ca4e:	f53f af4e 	bmi.w	c8ee <event_connection_prepare+0x1b6>
	node_rx = packet_rx_reserve_get(2);
    ca52:	2002      	movs	r0, #2
    ca54:	f7fd fd9a 	bl	a58c <packet_rx_reserve_get>
	if (!node_rx) {
    ca58:	2800      	cmp	r0, #0
    ca5a:	f43f af48 	beq.w	c8ee <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    ca5e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    ca62:	2203      	movs	r2, #3
    ca64:	f362 0302 	bfi	r3, r2, #0, #3
    ca68:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    ca6c:	8c23      	ldrh	r3, [r4, #32]
    ca6e:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    ca70:	2301      	movs	r3, #1
    ca72:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ca74:	7a03      	ldrb	r3, [r0, #8]
    ca76:	4313      	orrs	r3, r2
    ca78:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    ca7a:	2318      	movs	r3, #24
    ca7c:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    ca7e:	230f      	movs	r3, #15
    ca80:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    ca82:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    ca86:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    ca88:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    ca8a:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    ca8e:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    ca90:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    ca94:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    ca96:	f7fe fbe3 	bl	b260 <packet_rx_enqueue>
    ca9a:	e728      	b.n	c8ee <event_connection_prepare+0x1b6>
		LL_ASSERT(0);
    ca9c:	4bb9      	ldr	r3, [pc, #740]	; (cd84 <event_connection_prepare+0x64c>)
    ca9e:	9301      	str	r3, [sp, #4]
    caa0:	9300      	str	r3, [sp, #0]
    caa2:	4bb9      	ldr	r3, [pc, #740]	; (cd88 <event_connection_prepare+0x650>)
		LL_ASSERT(0);
    caa4:	4ab9      	ldr	r2, [pc, #740]	; (cd8c <event_connection_prepare+0x654>)
    caa6:	49ba      	ldr	r1, [pc, #744]	; (cd90 <event_connection_prepare+0x658>)
    caa8:	48ba      	ldr	r0, [pc, #744]	; (cd94 <event_connection_prepare+0x65c>)
    caaa:	e655      	b.n	c758 <event_connection_prepare+0x20>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    caac:	48ba      	ldr	r0, [pc, #744]	; (cd98 <event_connection_prepare+0x660>)
    caae:	f7fa fe2e 	bl	770e <mem_acquire>
		if (!node_tx) {
    cab2:	4601      	mov	r1, r0
    cab4:	b360      	cbz	r0, cb10 <event_connection_prepare+0x3d8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    cab6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    caba:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    cabe:	2201      	movs	r2, #1
    cac0:	f362 0301 	bfi	r3, r2, #0, #2
    cac4:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    cac8:	b2db      	uxtb	r3, r3
    caca:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    cace:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    cad2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    cad6:	f363 07c5 	bfi	r7, r3, #3, #3
    cada:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    cade:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    cae2:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    cae6:	f367 1286 	bfi	r2, r7, #6, #1
    caea:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    caee:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    caf0:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    caf2:	f042 0203 	orr.w	r2, r2, #3
    caf6:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    caf8:	2203      	movs	r2, #3
    cafa:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    cafc:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    cafe:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    cb00:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    cb02:	4620      	mov	r0, r4
    cb04:	f7ff fd48 	bl	c598 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    cb08:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    cb0c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    cb10:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    cb14:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cb18:	429a      	cmp	r2, r3
    cb1a:	f000 82f6 	beq.w	d10a <event_connection_prepare+0x9d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    cb1e:	2005      	movs	r0, #5
    cb20:	f7ff fba4 	bl	c26c <event_stop.constprop.31>
		switch (conn->llcp_type) {
    cb24:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    cb28:	3b01      	subs	r3, #1
    cb2a:	2b07      	cmp	r3, #7
    cb2c:	f200 85a7 	bhi.w	d67e <event_connection_prepare+0xf46>
    cb30:	e8df f013 	tbh	[pc, r3, lsl #1]
    cb34:	02c4006c 	.word	0x02c4006c
    cb38:	045e0343 	.word	0x045e0343
    cb3c:	05a5048e 	.word	0x05a5048e
    cb40:	04fa04e6 	.word	0x04fa04e6
		conn->llcp_phy.ack = conn->llcp_phy.req;
    cb44:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    cb48:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    cb4c:	f3c3 0282 	ubfx	r2, r3, #2, #3
    cb50:	0791      	lsls	r1, r2, #30
    cb52:	d544      	bpl.n	cbde <event_connection_prepare+0x4a6>
			conn->llcp_phy.tx = BIT(1);
    cb54:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    cb56:	f362 0384 	bfi	r3, r2, #2, #3
    cb5a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    cb5e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    cb62:	095a      	lsrs	r2, r3, #5
    cb64:	0790      	lsls	r0, r2, #30
    cb66:	d543      	bpl.n	cbf0 <event_connection_prepare+0x4b8>
			conn->llcp_phy.rx = BIT(1);
    cb68:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    cb6a:	f362 1347 	bfi	r3, r2, #5, #3
    cb6e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    cb72:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    cb76:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    cb7a:	f3c2 0182 	ubfx	r1, r2, #2, #3
    cb7e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    cb82:	428b      	cmp	r3, r1
    cb84:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    cb88:	bf14      	ite	ne
    cb8a:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    cb8e:	f36f 0384 	bfceq	r3, #2, #3
    cb92:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    cb96:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    cb9a:	0952      	lsrs	r2, r2, #5
    cb9c:	f003 0307 	and.w	r3, r3, #7
    cba0:	4293      	cmp	r3, r2
    cba2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    cba6:	bf14      	ite	ne
    cba8:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    cbac:	f36f 1347 	bfceq	r3, #5, #3
    cbb0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    cbb4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    cbb8:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    cbbc:	f043 0301 	orr.w	r3, r3, #1
    cbc0:	f3c2 0240 	ubfx	r2, r2, #1, #1
    cbc4:	f362 0341 	bfi	r3, r2, #1, #1
    cbc8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    cbcc:	2308      	movs	r3, #8
    cbce:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    cbd2:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    cbd6:	3b01      	subs	r3, #1
    cbd8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    cbdc:	e798      	b.n	cb10 <event_connection_prepare+0x3d8>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    cbde:	07d7      	lsls	r7, r2, #31
    cbe0:	d501      	bpl.n	cbe6 <event_connection_prepare+0x4ae>
			conn->llcp_phy.tx = BIT(0);
    cbe2:	2201      	movs	r2, #1
    cbe4:	e7b7      	b.n	cb56 <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    cbe6:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    cbea:	bf18      	it	ne
    cbec:	2204      	movne	r2, #4
    cbee:	e7b2      	b.n	cb56 <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    cbf0:	07d1      	lsls	r1, r2, #31
    cbf2:	d501      	bpl.n	cbf8 <event_connection_prepare+0x4c0>
			conn->llcp_phy.rx = BIT(0);
    cbf4:	2201      	movs	r2, #1
    cbf6:	e7b8      	b.n	cb6a <event_connection_prepare+0x432>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    cbf8:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    cbfc:	bf18      	it	ne
    cbfe:	2204      	movne	r2, #4
    cc00:	e7b3      	b.n	cb6a <event_connection_prepare+0x432>
		LL_ASSERT(0);
    cc02:	4b60      	ldr	r3, [pc, #384]	; (cd84 <event_connection_prepare+0x64c>)
    cc04:	9301      	str	r3, [sp, #4]
    cc06:	9300      	str	r3, [sp, #0]
    cc08:	4b64      	ldr	r3, [pc, #400]	; (cd9c <event_connection_prepare+0x664>)
    cc0a:	e74b      	b.n	caa4 <event_connection_prepare+0x36c>
	if (!conn_upd) {
    cc0c:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    cc10:	b90b      	cbnz	r3, cc16 <event_connection_prepare+0x4de>
		_radio.conn_upd = conn;
    cc12:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    cc16:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cc1a:	f013 0303 	ands.w	r3, r3, #3
    cc1e:	d068      	beq.n	ccf2 <event_connection_prepare+0x5ba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cc20:	485d      	ldr	r0, [pc, #372]	; (cd98 <event_connection_prepare+0x660>)
    cc22:	f7fa fd74 	bl	770e <mem_acquire>
		if (!node_tx) {
    cc26:	4607      	mov	r7, r0
    cc28:	2800      	cmp	r0, #0
    cc2a:	f000 826e 	beq.w	d10a <event_connection_prepare+0x9d2>
		switch (conn->llcp.conn_upd.state) {
    cc2e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cc32:	f003 0303 	and.w	r3, r3, #3
    cc36:	2b01      	cmp	r3, #1
    cc38:	d059      	beq.n	ccee <event_connection_prepare+0x5b6>
    cc3a:	2b02      	cmp	r3, #2
    cc3c:	d152      	bne.n	cce4 <event_connection_prepare+0x5ac>
			fp_mayfly_select_or_use =
    cc3e:	4a58      	ldr	r2, [pc, #352]	; (cda0 <event_connection_prepare+0x668>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    cc40:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cc44:	f36f 0301 	bfc	r3, #0, #2
    cc48:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    cc4c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    cc4e:	3306      	adds	r3, #6
    cc50:	4433      	add	r3, r6
    cc52:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    cc54:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cc58:	7939      	ldrb	r1, [r7, #4]
    cc5a:	f041 0103 	orr.w	r1, r1, #3
    cc5e:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    cc60:	210c      	movs	r1, #12
    cc62:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    cc64:	2100      	movs	r1, #0
    cc66:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    cc68:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    cc6c:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    cc6e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    cc72:	f240 40e2 	movw	r0, #1250	; 0x4e2
    cc76:	fbb1 f1f0 	udiv	r1, r1, r0
    cc7a:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    cc7e:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    cc82:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    cc86:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    cc8a:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    cc8e:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    cc92:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    cc96:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    cc9a:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    cc9c:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    cca0:	2900      	cmp	r1, #0
    cca2:	da0b      	bge.n	ccbc <event_connection_prepare+0x584>
			u32_t ticks_prepare_to_start =
    cca4:	68a3      	ldr	r3, [r4, #8]
    cca6:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    cca8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    ccac:	4283      	cmp	r3, r0
    ccae:	bf2c      	ite	cs
    ccb0:	4443      	addcs	r3, r8
    ccb2:	eb08 0300 	addcc.w	r3, r8, r0
    ccb6:	1a5b      	subs	r3, r3, r1
    ccb8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    ccbc:	f107 0309 	add.w	r3, r7, #9
    ccc0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    ccc4:	4b37      	ldr	r3, [pc, #220]	; (cda4 <event_connection_prepare+0x66c>)
    ccc6:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ccc8:	2201      	movs	r2, #1
    ccca:	4611      	mov	r1, r2
    cccc:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    ccce:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ccd0:	f7fa fde8 	bl	78a4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    ccd4:	2800      	cmp	r0, #0
    ccd6:	f000 8214 	beq.w	d102 <event_connection_prepare+0x9ca>
    ccda:	4b2a      	ldr	r3, [pc, #168]	; (cd84 <event_connection_prepare+0x64c>)
    ccdc:	9301      	str	r3, [sp, #4]
    ccde:	9300      	str	r3, [sp, #0]
    cce0:	4b31      	ldr	r3, [pc, #196]	; (cda8 <event_connection_prepare+0x670>)
    cce2:	e5e1      	b.n	c8a8 <event_connection_prepare+0x170>
			LL_ASSERT(0);
    cce4:	4b27      	ldr	r3, [pc, #156]	; (cd84 <event_connection_prepare+0x64c>)
    cce6:	9301      	str	r3, [sp, #4]
    cce8:	9300      	str	r3, [sp, #0]
    ccea:	4b30      	ldr	r3, [pc, #192]	; (cdac <event_connection_prepare+0x674>)
    ccec:	e6da      	b.n	caa4 <event_connection_prepare+0x36c>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    ccee:	4a30      	ldr	r2, [pc, #192]	; (cdb0 <event_connection_prepare+0x678>)
    ccf0:	e7a6      	b.n	cc40 <event_connection_prepare+0x508>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    ccf2:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    ccf6:	1bf7      	subs	r7, r6, r7
    ccf8:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    ccfa:	043a      	lsls	r2, r7, #16
    ccfc:	f100 8205 	bmi.w	d10a <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    cd00:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    cd04:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    cd08:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    cd0c:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    cd10:	428a      	cmp	r2, r1
    cd12:	d009      	beq.n	cd28 <event_connection_prepare+0x5f0>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    cd14:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    cd18:	f002 0207 	and.w	r2, r2, #7
    cd1c:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    cd1e:	bf04      	itt	eq
    cd20:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    cd24:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    cd28:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    cd2c:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    cd2e:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    cd30:	bf08      	it	eq
    cd32:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    cd36:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    cd38:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    cd3a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    cd3e:	429a      	cmp	r2, r3
    cd40:	d114      	bne.n	cd6c <event_connection_prepare+0x634>
		     conn->conn_interval) ||
    cd42:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    cd46:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    cd48:	4299      	cmp	r1, r3
    cd4a:	d10f      	bne.n	cd6c <event_connection_prepare+0x634>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    cd4c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    cd50:	435a      	muls	r2, r3
    cd52:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    cd56:	f242 7110 	movw	r1, #10000	; 0x2710
    cd5a:	fb01 2303 	mla	r3, r1, r3, r2
    cd5e:	3b01      	subs	r3, #1
    cd60:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    cd64:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    cd66:	b29b      	uxth	r3, r3
    cd68:	429a      	cmp	r2, r3
    cd6a:	d036      	beq.n	cdda <event_connection_prepare+0x6a2>
			node_rx = packet_rx_reserve_get(2);
    cd6c:	2002      	movs	r0, #2
    cd6e:	f7fd fc0d 	bl	a58c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    cd72:	bb08      	cbnz	r0, cdb8 <event_connection_prepare+0x680>
    cd74:	4b03      	ldr	r3, [pc, #12]	; (cd84 <event_connection_prepare+0x64c>)
    cd76:	9301      	str	r3, [sp, #4]
    cd78:	9300      	str	r3, [sp, #0]
    cd7a:	4b0c      	ldr	r3, [pc, #48]	; (cdac <event_connection_prepare+0x674>)
		LL_ASSERT(node_rx);
    cd7c:	4a03      	ldr	r2, [pc, #12]	; (cd8c <event_connection_prepare+0x654>)
    cd7e:	4904      	ldr	r1, [pc, #16]	; (cd90 <event_connection_prepare+0x658>)
    cd80:	480c      	ldr	r0, [pc, #48]	; (cdb4 <event_connection_prepare+0x67c>)
    cd82:	e4e9      	b.n	c758 <event_connection_prepare+0x20>
    cd84:	000153a9 	.word	0x000153a9
    cd88:	00018317 	.word	0x00018317
    cd8c:	00016765 	.word	0x00016765
    cd90:	000167b4 	.word	0x000167b4
    cd94:	000166d9 	.word	0x000166d9
    cd98:	20000a24 	.word	0x20000a24
    cd9c:	0001833c 	.word	0x0001833c
    cda0:	0000afb1 	.word	0x0000afb1
    cda4:	20003da0 	.word	0x20003da0
    cda8:	000182cb 	.word	0x000182cb
    cdac:	000182df 	.word	0x000182df
    cdb0:	0000bc99 	.word	0x0000bc99
    cdb4:	00018b0d 	.word	0x00018b0d
			node_rx->hdr.handle = conn->handle;
    cdb8:	8c23      	ldrh	r3, [r4, #32]
    cdba:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    cdbc:	2308      	movs	r3, #8
    cdbe:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    cdc0:	2300      	movs	r3, #0
    cdc2:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    cdc4:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    cdc8:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    cdca:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    cdce:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    cdd0:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    cdd4:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    cdd6:	f7fe fa43 	bl	b260 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    cdda:	6823      	ldr	r3, [r4, #0]
    cddc:	6866      	ldr	r6, [r4, #4]
    cdde:	2b00      	cmp	r3, #0
    cde0:	da09      	bge.n	cdf6 <event_connection_prepare+0x6be>
			u32_t ticks_prepare_to_start =
    cde2:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    cde4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    cde8:	42b0      	cmp	r0, r6
    cdea:	bf2c      	ite	cs
    cdec:	4480      	addcs	r8, r0
    cdee:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    cdf0:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    cdf2:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    cdf6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    cdf8:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    cdfc:	49a0      	ldr	r1, [pc, #640]	; (d080 <event_connection_prepare+0x948>)
		conn_interval_old = instant_latency * conn->conn_interval;
    cdfe:	fb13 f307 	smulbb	r3, r3, r7
    ce02:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    ce04:	fbb3 f2fa 	udiv	r2, r3, sl
    ce08:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    ce0c:	fb1a f009 	smulbb	r0, sl, r9
    ce10:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    ce12:	4283      	cmp	r3, r0
    ce14:	f080 80bf 	bcs.w	cf96 <event_connection_prepare+0x85e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    ce18:	1ac0      	subs	r0, r0, r3
    ce1a:	f240 1223 	movw	r2, #291	; 0x123
    ce1e:	4342      	muls	r2, r0
    ce20:	17c3      	asrs	r3, r0, #31
    ce22:	fb01 2303 	mla	r3, r1, r3, r2
    ce26:	fba0 0101 	umull	r0, r1, r0, r1
    ce2a:	4419      	add	r1, r3
    ce2c:	a392      	add	r3, pc, #584	; (adr r3, d078 <event_connection_prepare+0x940>)
    ce2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce32:	f7f3 f9ef 	bl	214 <__aeabi_uldivmod>
    ce36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ce3a:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    ce3e:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    ce40:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    ce42:	f8df b274 	ldr.w	fp, [pc, #628]	; d0b8 <event_connection_prepare+0x980>
    ce46:	1bdb      	subs	r3, r3, r7
    ce48:	444b      	add	r3, r9
    ce4a:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ce4c:	6823      	ldr	r3, [r4, #0]
    ce4e:	42b3      	cmp	r3, r6
    ce50:	bf38      	it	cc
    ce52:	4633      	movcc	r3, r6
    ce54:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    ce56:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    ce5a:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    ce5e:	2b00      	cmp	r3, #0
    ce60:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    ce64:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    ce66:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    ce6a:	f280 80a5 	bge.w	cfb8 <event_connection_prepare+0x880>
				conn->slave.window_widening_periodic_us *
    ce6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    ce70:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    ce72:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    ce76:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    ce7a:	4a82      	ldr	r2, [pc, #520]	; (d084 <event_connection_prepare+0x94c>)
    ce7c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    ce80:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    ce84:	f3c3 0382 	ubfx	r3, r3, #2, #3
    ce88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    ce8c:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    ce90:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    ce92:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    ce94:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    ce98:	4b7b      	ldr	r3, [pc, #492]	; (d088 <event_connection_prepare+0x950>)
				conn->llcp.conn_upd.win_size * 1250;
    ce9a:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    ce9e:	f205 253f 	addw	r5, r5, #575	; 0x23f
    cea2:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    cea6:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    cea8:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    ceac:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    ceae:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    ceb0:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    ceb2:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    ceb4:	429f      	cmp	r7, r3
    ceb6:	bf94      	ite	ls
    ceb8:	65e7      	strls	r7, [r4, #92]	; 0x5c
    ceba:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    cebc:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    cebe:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    cec0:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    cec2:	fba0 010b 	umull	r0, r1, r0, fp
    cec6:	a36c      	add	r3, pc, #432	; (adr r3, d078 <event_connection_prepare+0x940>)
    cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
    cecc:	f7f3 f9a2 	bl	214 <__aeabi_uldivmod>
    ced0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ced2:	1a1b      	subs	r3, r3, r0
    ced4:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    ced6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ced8:	fbb3 f0f8 	udiv	r0, r3, r8
    cedc:	fb08 f000 	mul.w	r0, r8, r0
    cee0:	a365      	add	r3, pc, #404	; (adr r3, d078 <event_connection_prepare+0x940>)
    cee2:	e9d3 2300 	ldrd	r2, r3, [r3]
    cee6:	fba0 010b 	umull	r0, r1, r0, fp
    ceea:	f7f3 f993 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    ceee:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    cef0:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    cef4:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    cef8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    cefc:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    cefe:	f242 7110 	movw	r1, #10000	; 0x2710
    cf02:	fb01 6303 	mla	r3, r1, r3, r6
    cf06:	3b01      	subs	r3, #1
    cf08:	fbb3 f3f6 	udiv	r3, r3, r6
    cf0c:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    cf0e:	4b5f      	ldr	r3, [pc, #380]	; (d08c <event_connection_prepare+0x954>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    cf10:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    cf14:	4433      	add	r3, r6
    cf16:	fbb3 f3f6 	udiv	r3, r3, r6
    cf1a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    cf1e:	4b5c      	ldr	r3, [pc, #368]	; (d090 <event_connection_prepare+0x958>)
    cf20:	4433      	add	r3, r6
    cf22:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    cf26:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    cf28:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    cf2a:	4299      	cmp	r1, r3
    cf2c:	bfc4      	itt	gt
    cf2e:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    cf32:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    cf34:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    cf38:	bfc8      	it	gt
    cf3a:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    cf3c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    cf40:	bfc8      	it	gt
    cf42:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    cf44:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    cf48:	bf08      	it	eq
    cf4a:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    cf4e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    cf52:	2000      	movs	r0, #0
    cf54:	2101      	movs	r1, #1
    cf56:	f006 fa2d 	bl	133b4 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    cf5a:	2200      	movs	r2, #0
    cf5c:	2101      	movs	r1, #1
		mayfly_was_enabled =
    cf5e:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    cf60:	4610      	mov	r0, r2
    cf62:	f7fa fc77 	bl	7854 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    cf66:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    cf6a:	f641 2385 	movw	r3, #6789	; 0x1a85
    cf6e:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    cf70:	3207      	adds	r2, #7
		ticker_status =
    cf72:	9300      	str	r3, [sp, #0]
    cf74:	b2d2      	uxtb	r2, r2
    cf76:	4b47      	ldr	r3, [pc, #284]	; (d094 <event_connection_prepare+0x95c>)
    cf78:	4608      	mov	r0, r1
    cf7a:	f7fb faef 	bl	855c <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cf7e:	f030 0802 	bics.w	r8, r0, #2
    cf82:	d026      	beq.n	cfd2 <event_connection_prepare+0x89a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cf84:	4b44      	ldr	r3, [pc, #272]	; (d098 <event_connection_prepare+0x960>)
    cf86:	9301      	str	r3, [sp, #4]
    cf88:	9300      	str	r3, [sp, #0]
    cf8a:	4a44      	ldr	r2, [pc, #272]	; (d09c <event_connection_prepare+0x964>)
    cf8c:	4b44      	ldr	r3, [pc, #272]	; (d0a0 <event_connection_prepare+0x968>)
    cf8e:	4945      	ldr	r1, [pc, #276]	; (d0a4 <event_connection_prepare+0x96c>)
    cf90:	4845      	ldr	r0, [pc, #276]	; (d0a8 <event_connection_prepare+0x970>)
    cf92:	f7ff bbe1 	b.w	c758 <event_connection_prepare+0x20>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    cf96:	fb0a 3212 	mls	r2, sl, r2, r3
    cf9a:	b292      	uxth	r2, r2
    cf9c:	fba2 0101 	umull	r0, r1, r2, r1
    cfa0:	f240 1323 	movw	r3, #291	; 0x123
    cfa4:	fb03 1102 	mla	r1, r3, r2, r1
    cfa8:	a333      	add	r3, pc, #204	; (adr r3, d078 <event_connection_prepare+0x940>)
    cfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    cfae:	f7f3 f931 	bl	214 <__aeabi_uldivmod>
    cfb2:	eba8 0300 	sub.w	r3, r8, r0
    cfb6:	e742      	b.n	ce3e <event_connection_prepare+0x706>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    cfb8:	990c      	ldr	r1, [sp, #48]	; 0x30
    cfba:	a32f      	add	r3, pc, #188	; (adr r3, d078 <event_connection_prepare+0x940>)
    cfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
    cfc0:	fba1 010b 	umull	r0, r1, r1, fp
    cfc4:	f7f3 f926 	bl	214 <__aeabi_uldivmod>
    cfc8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    cfcc:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    cfce:	4635      	mov	r5, r6
    cfd0:	e790      	b.n	cef4 <event_connection_prepare+0x7bc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    cfd2:	fba5 ab0b 	umull	sl, fp, r5, fp
    cfd6:	a328      	add	r3, pc, #160	; (adr r3, d078 <event_connection_prepare+0x940>)
    cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    cfdc:	4650      	mov	r0, sl
    cfde:	4659      	mov	r1, fp
    cfe0:	f7f3 f918 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    cfe4:	4a31      	ldr	r2, [pc, #196]	; (d0ac <event_connection_prepare+0x974>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cfe6:	f894 6020 	ldrb.w	r6, [r4, #32]
    cfea:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    cfee:	2307      	movs	r3, #7
    cff0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cff4:	2100      	movs	r1, #0
    cff6:	4343      	muls	r3, r0
    cff8:	fb02 3301 	mla	r3, r2, r1, r3
    cffc:	fba0 0102 	umull	r0, r1, r0, r2
    d000:	ebba 0000 	subs.w	r0, sl, r0
    d004:	4419      	add	r1, r3
    d006:	eb6b 0101 	sbc.w	r1, fp, r1
    d00a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d00e:	2300      	movs	r3, #0
    d010:	f7f3 f900 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d014:	68e3      	ldr	r3, [r4, #12]
    d016:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d018:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    d01c:	4924      	ldr	r1, [pc, #144]	; (d0b0 <event_connection_prepare+0x978>)
		ticker_status =
    d01e:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d020:	441a      	add	r2, r3
    d022:	4613      	mov	r3, r2
    d024:	4a23      	ldr	r2, [pc, #140]	; (d0b4 <event_connection_prepare+0x97c>)
		ticker_status =
    d026:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d028:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    d02c:	bf38      	it	cc
    d02e:	460a      	movcc	r2, r1
    d030:	3607      	adds	r6, #7
		ticker_status =
    d032:	f641 2195 	movw	r1, #6805	; 0x1a95
    d036:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d038:	b2f6      	uxtb	r6, r6
		ticker_status =
    d03a:	4916      	ldr	r1, [pc, #88]	; (d094 <event_connection_prepare+0x95c>)
    d03c:	9107      	str	r1, [sp, #28]
    d03e:	9205      	str	r2, [sp, #20]
    d040:	9406      	str	r4, [sp, #24]
    d042:	f8cd 800c 	str.w	r8, [sp, #12]
    d046:	9501      	str	r5, [sp, #4]
    d048:	9700      	str	r7, [sp, #0]
    d04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d04c:	4632      	mov	r2, r6
    d04e:	4641      	mov	r1, r8
    d050:	4640      	mov	r0, r8
    d052:	f7fb f9e5 	bl	8420 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d056:	f030 0002 	bics.w	r0, r0, #2
    d05a:	d193      	bne.n	cf84 <event_connection_prepare+0x84c>
		if (mayfly_was_enabled) {
    d05c:	f1b9 0f00 	cmp.w	r9, #0
    d060:	f000 8383 	beq.w	d76a <event_connection_prepare+0x1032>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d064:	2201      	movs	r2, #1
    d066:	4611      	mov	r1, r2
}
    d068:	b00f      	add	sp, #60	; 0x3c
    d06a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d06e:	f7fa bbf1 	b.w	7854 <mayfly_enable>
    d072:	bf00      	nop
    d074:	f3af 8000 	nop.w
    d078:	1afd498d 	.word	0x1afd498d
    d07c:	00000007 	.word	0x00000007
    d080:	09ce5400 	.word	0x09ce5400
    d084:	000186c6 	.word	0x000186c6
    d088:	000f4240 	.word	0x000f4240
    d08c:	026259ff 	.word	0x026259ff
    d090:	01c9c37f 	.word	0x01c9c37f
    d094:	0000b475 	.word	0x0000b475
    d098:	000153a9 	.word	0x000153a9
    d09c:	00016765 	.word	0x00016765
    d0a0:	000182df 	.word	0x000182df
    d0a4:	000167b4 	.word	0x000167b4
    d0a8:	000184a7 	.word	0x000184a7
    d0ac:	1afd498d 	.word	0x1afd498d
    d0b0:	0000d919 	.word	0x0000d919
    d0b4:	0000d91d 	.word	0x0000d91d
    d0b8:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
    d0bc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d0c0:	2b00      	cmp	r3, #0
    d0c2:	d05e      	beq.n	d182 <event_connection_prepare+0xa4a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d0c4:	48c9      	ldr	r0, [pc, #804]	; (d3ec <event_connection_prepare+0xcb4>)
    d0c6:	f7fa fb22 	bl	770e <mem_acquire>
		if (node_tx) {
    d0ca:	4607      	mov	r7, r0
    d0cc:	b1e8      	cbz	r0, d10a <event_connection_prepare+0x9d2>
			conn->llcp.chan_map.initiate = 0;
    d0ce:	2300      	movs	r3, #0
    d0d0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    d0d4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d0d6:	3306      	adds	r3, #6
    d0d8:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    d0da:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d0de:	7903      	ldrb	r3, [r0, #4]
    d0e0:	f043 0303 	orr.w	r3, r3, #3
    d0e4:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d0e6:	2308      	movs	r3, #8
    d0e8:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d0ea:	2301      	movs	r3, #1
    d0ec:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    d0ee:	2205      	movs	r2, #5
    d0f0:	f104 0179 	add.w	r1, r4, #121	; 0x79
    d0f4:	3008      	adds	r0, #8
    d0f6:	f7f4 fd81 	bl	1bfc <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    d0fa:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d0fe:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    d102:	4639      	mov	r1, r7
    d104:	4620      	mov	r0, r4
    d106:	f7ff fa47 	bl	c598 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    d10a:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    d10e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    d112:	429a      	cmp	r2, r3
    d114:	d01e      	beq.n	d154 <event_connection_prepare+0xa1c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d116:	2005      	movs	r0, #5
    d118:	f7ff f8a8 	bl	c26c <event_stop.constprop.31>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d11c:	48b3      	ldr	r0, [pc, #716]	; (d3ec <event_connection_prepare+0xcb4>)
    d11e:	f7fa faf6 	bl	770e <mem_acquire>
		if (node_tx) {
    d122:	4601      	mov	r1, r0
    d124:	b1b0      	cbz	r0, d154 <event_connection_prepare+0xa1c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    d126:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    d12a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d12e:	7903      	ldrb	r3, [r0, #4]
    d130:	f043 0303 	orr.w	r3, r3, #3
    d134:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d136:	2302      	movs	r3, #2
    d138:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d13a:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    d13c:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    d140:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    d142:	4620      	mov	r0, r4
    d144:	f7ff fa28 	bl	c598 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    d148:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    d14a:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    d14c:	bf98      	it	ls
    d14e:	3301      	addls	r3, #1
    d150:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    d154:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    d158:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    d15c:	429a      	cmp	r2, r3
    d15e:	f000 82eb 	beq.w	d738 <event_connection_prepare+0x1000>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d162:	2005      	movs	r0, #5
    d164:	f7ff f882 	bl	c26c <event_stop.constprop.31>
	switch (conn->llcp_length.state) {
    d168:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    d16c:	f003 0303 	and.w	r3, r3, #3
    d170:	2b03      	cmp	r3, #3
    d172:	f200 830c 	bhi.w	d78e <event_connection_prepare+0x1056>
    d176:	e8df f013 	tbh	[pc, r3, lsl #1]
    d17a:	0288      	.short	0x0288
    d17c:	02df02df 	.word	0x02df02df
    d180:	02fb      	.short	0x02fb
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    d182:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d186:	1af3      	subs	r3, r6, r3
    d188:	041f      	lsls	r7, r3, #16
    d18a:	d4be      	bmi.n	d10a <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    d18c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d190:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    d194:	f104 0717 	add.w	r7, r4, #23
    d198:	2205      	movs	r2, #5
    d19a:	f104 0179 	add.w	r1, r4, #121	; 0x79
    d19e:	4638      	mov	r0, r7
    d1a0:	f7f4 fd2c 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    d1a4:	2105      	movs	r1, #5
    d1a6:	4638      	mov	r0, r7
    d1a8:	f7fa fc5c 	bl	7a64 <util_ones_count_get>
		conn->data_chan_count =
    d1ac:	7f63      	ldrb	r3, [r4, #29]
    d1ae:	f360 0305 	bfi	r3, r0, #0, #6
    d1b2:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    d1b4:	2301      	movs	r3, #1
    d1b6:	7723      	strb	r3, [r4, #28]
    d1b8:	e7a7      	b.n	d10a <event_connection_prepare+0x9d2>
	if (conn->llcp.encryption.initiate) {
    d1ba:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    d1be:	f1b9 0f00 	cmp.w	r9, #0
    d1c2:	d1a2      	bne.n	d10a <event_connection_prepare+0x9d2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d1c4:	4889      	ldr	r0, [pc, #548]	; (d3ec <event_connection_prepare+0xcb4>)
    d1c6:	f7fa faa2 	bl	770e <mem_acquire>
	if (!node_tx) {
    d1ca:	4607      	mov	r7, r0
    d1cc:	2800      	cmp	r0, #0
    d1ce:	d09c      	beq.n	d10a <event_connection_prepare+0x9d2>
	if (!conn->role) {
    d1d0:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d1d4:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    d1d6:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    d1da:	db4d      	blt.n	d278 <event_connection_prepare+0xb40>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    d1dc:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    d1e0:	465b      	mov	r3, fp
    d1e2:	464a      	mov	r2, r9
    d1e4:	f104 0194 	add.w	r1, r4, #148	; 0x94
    d1e8:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d1ec:	f005 fc58 	bl	12aa0 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    d1f0:	2210      	movs	r2, #16
    d1f2:	4659      	mov	r1, fp
    d1f4:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    d1f8:	f7f4 fd00 	bl	1bfc <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    d1fc:	f504 7189 	add.w	r1, r4, #274	; 0x112
    d200:	2208      	movs	r2, #8
    d202:	f204 1033 	addw	r0, r4, #307	; 0x133
    d206:	f7f4 fcf9 	bl	1bfc <memcpy>
		conn->ccm_rx.direction = 0;
    d20a:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    d20e:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    d212:	f369 0300 	bfi	r3, r9, #0, #1
    d216:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    d21a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    d21e:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    d222:	f043 0301 	orr.w	r3, r3, #1
    d226:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    d22a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    d22e:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    d232:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    d236:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    d23a:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    d23e:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    d242:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    d246:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    d24a:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    d24e:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    d252:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    d256:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    d25a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    d25e:	4651      	mov	r1, sl
    d260:	4620      	mov	r0, r4
    d262:	f7ff fa27 	bl	c6b4 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    d266:	4639      	mov	r1, r7
    d268:	4620      	mov	r0, r4
    d26a:	f7ff f995 	bl	c598 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    d26e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d272:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    d276:	e748      	b.n	d10a <event_connection_prepare+0x9d2>
	else if (!conn->pause_tx || conn->refresh) {
    d278:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d27c:	f003 0348 	and.w	r3, r3, #72	; 0x48
    d280:	2b08      	cmp	r3, #8
    d282:	f000 80a2 	beq.w	d3ca <event_connection_prepare+0xc92>
		if (conn->llcp.encryption.error_code) {
    d286:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    d28a:	f1b9 0f00 	cmp.w	r9, #0
    d28e:	d020      	beq.n	d2d2 <event_connection_prepare+0xb9a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    d290:	7903      	ldrb	r3, [r0, #4]
    d292:	f043 0303 	orr.w	r3, r3, #3
    d296:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    d298:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    d29c:	0698      	lsls	r0, r3, #26
    d29e:	d512      	bpl.n	d2c6 <event_connection_prepare+0xb8e>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    d2a0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    d2a4:	0759      	lsls	r1, r3, #29
    d2a6:	d50e      	bpl.n	d2c6 <event_connection_prepare+0xb8e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    d2a8:	2311      	movs	r3, #17
    d2aa:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    d2ac:	2303      	movs	r3, #3
    d2ae:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    d2b0:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    d2b4:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    d2b6:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    d2b8:	797b      	ldrb	r3, [r7, #5]
    d2ba:	3301      	adds	r3, #1
    d2bc:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    d2be:	2300      	movs	r3, #0
    d2c0:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    d2c4:	e7cf      	b.n	d266 <event_connection_prepare+0xb2e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    d2c6:	230d      	movs	r3, #13
    d2c8:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    d2ca:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    d2ce:	2301      	movs	r3, #1
    d2d0:	e7f1      	b.n	d2b6 <event_connection_prepare+0xb7e>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d2d2:	4846      	ldr	r0, [pc, #280]	; (d3ec <event_connection_prepare+0xcb4>)
    d2d4:	f7fa fa1b 	bl	770e <mem_acquire>
	if (!node_tx) {
    d2d8:	4682      	mov	sl, r0
    d2da:	2800      	cmp	r0, #0
    d2dc:	f000 8300 	beq.w	d8e0 <event_connection_prepare+0x11a8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d2e0:	7903      	ldrb	r3, [r0, #4]
    d2e2:	f043 0303 	orr.w	r3, r3, #3
    d2e6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    d2e8:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    d2ec:	230d      	movs	r3, #13
    d2ee:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    d2f0:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    d2f4:	f100 0308 	add.w	r3, r0, #8
    d2f8:	4619      	mov	r1, r3
    d2fa:	2208      	movs	r2, #8
    d2fc:	6868      	ldr	r0, [r5, #4]
    d2fe:	930d      	str	r3, [sp, #52]	; 0x34
    d300:	f006 fd98 	bl	13e34 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    d304:	f10a 0310 	add.w	r3, sl, #16
    d308:	4619      	mov	r1, r3
    d30a:	465a      	mov	r2, fp
    d30c:	6868      	ldr	r0, [r5, #4]
    d30e:	930b      	str	r3, [sp, #44]	; 0x2c
    d310:	f006 fd90 	bl	13e34 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    d314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d316:	2208      	movs	r2, #8
    d318:	4619      	mov	r1, r3
    d31a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    d31e:	f7f4 fc6d 	bl	1bfc <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    d322:	465a      	mov	r2, fp
    d324:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d326:	f504 708b 	add.w	r0, r4, #278	; 0x116
    d32a:	f7f4 fc67 	bl	1bfc <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    d32e:	4651      	mov	r1, sl
    d330:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    d332:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    d336:	f7ff f92f 	bl	c598 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    d33a:	4653      	mov	r3, sl
    d33c:	464a      	mov	r2, r9
    d33e:	f104 0194 	add.w	r1, r4, #148	; 0x94
    d342:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d346:	f005 fbab 	bl	12aa0 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    d34a:	2210      	movs	r2, #16
    d34c:	4651      	mov	r1, sl
    d34e:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    d352:	f7f4 fc53 	bl	1bfc <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    d356:	2208      	movs	r2, #8
    d358:	f504 7189 	add.w	r1, r4, #274	; 0x112
    d35c:	f204 1033 	addw	r0, r4, #307	; 0x133
    d360:	f7f4 fc4c 	bl	1bfc <memcpy>
			conn->ccm_rx.direction = 1;
    d364:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    d368:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    d36c:	f043 0301 	orr.w	r3, r3, #1
    d370:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    d374:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    d378:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    d37c:	f369 0300 	bfi	r3, r9, #0, #1
    d380:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    d384:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    d388:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    d38c:	f043 0310 	orr.w	r3, r3, #16
    d390:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d394:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    d396:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d39a:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    d39e:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    d3a2:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    d3a6:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    d3aa:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    d3ae:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    d3b2:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    d3b6:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    d3ba:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d3be:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d3c0:	2301      	movs	r3, #1
    d3c2:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d3c4:	2305      	movs	r3, #5
    d3c6:	71fb      	strb	r3, [r7, #7]
    d3c8:	e74d      	b.n	d266 <event_connection_prepare+0xb2e>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    d3ca:	4651      	mov	r1, sl
    d3cc:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    d3d0:	f7ff f970 	bl	c6b4 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    d3d4:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    d3d8:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d3dc:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    d3e0:	f369 03c3 	bfi	r3, r9, #3, #1
    d3e4:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d3e8:	e73d      	b.n	d266 <event_connection_prepare+0xb2e>
    d3ea:	bf00      	nop
    d3ec:	20000a24 	.word	0x20000a24
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d3f0:	48b0      	ldr	r0, [pc, #704]	; (d6b4 <event_connection_prepare+0xf7c>)
    d3f2:	f7fa f98c 	bl	770e <mem_acquire>
	if (node_tx) {
    d3f6:	4607      	mov	r7, r0
    d3f8:	2800      	cmp	r0, #0
    d3fa:	f43f ae86 	beq.w	d10a <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    d3fe:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d402:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    d406:	4bac      	ldr	r3, [pc, #688]	; (d6b8 <event_connection_prepare+0xf80>)
    d408:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d40c:	7903      	ldrb	r3, [r0, #4]
    d40e:	f043 0303 	orr.w	r3, r3, #3
    d412:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    d414:	2309      	movs	r3, #9
    d416:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    d418:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d41c:	2b00      	cmp	r3, #0
    d41e:	bfac      	ite	ge
    d420:	2308      	movge	r3, #8
    d422:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    d424:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    d426:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    d428:	2100      	movs	r1, #0
    d42a:	4410      	add	r0, r2
    d42c:	f7f4 fc12 	bl	1c54 <memset>
			conn->llcp_features & 0xFF;
    d430:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    d434:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    d436:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    d438:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    d43a:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    d43c:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    d43e:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    d440:	4620      	mov	r0, r4
    d442:	f7ff f8a9 	bl	c598 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    d446:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    d44a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    d44e:	e65c      	b.n	d10a <event_connection_prepare+0x9d2>
	if (conn->llcp_version.tx == 0) {
    d450:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    d454:	07da      	lsls	r2, r3, #31
    d456:	d424      	bmi.n	d4a2 <event_connection_prepare+0xd6a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d458:	4896      	ldr	r0, [pc, #600]	; (d6b4 <event_connection_prepare+0xf7c>)
    d45a:	f7fa f958 	bl	770e <mem_acquire>
		if (node_tx) {
    d45e:	4601      	mov	r1, r0
    d460:	2800      	cmp	r0, #0
    d462:	f43f ae52 	beq.w	d10a <event_connection_prepare+0x9d2>
			conn->llcp_ack = conn->llcp_req;
    d466:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d46a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    d46e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    d472:	f043 0301 	orr.w	r3, r3, #1
    d476:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d47a:	7903      	ldrb	r3, [r0, #4]
    d47c:	f043 0303 	orr.w	r3, r3, #3
    d480:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    d482:	2306      	movs	r3, #6
    d484:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d486:	230c      	movs	r3, #12
    d488:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    d48a:	2309      	movs	r3, #9
    d48c:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    d48e:	f06f 030e 	mvn.w	r3, #14
    d492:	7243      	strb	r3, [r0, #9]
    d494:	2305      	movs	r3, #5
    d496:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    d498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d49c:	72c3      	strb	r3, [r0, #11]
    d49e:	7303      	strb	r3, [r0, #12]
    d4a0:	e7ce      	b.n	d440 <event_connection_prepare+0xd08>
	} else if (conn->llcp_version.rx != 0) {
    d4a2:	079b      	lsls	r3, r3, #30
    d4a4:	d526      	bpl.n	d4f4 <event_connection_prepare+0xdbc>
		conn->llcp_ack = conn->llcp_req;
    d4a6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d4aa:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    d4ae:	2002      	movs	r0, #2
    d4b0:	f7fd f86c 	bl	a58c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    d4b4:	b920      	cbnz	r0, d4c0 <event_connection_prepare+0xd88>
    d4b6:	4b81      	ldr	r3, [pc, #516]	; (d6bc <event_connection_prepare+0xf84>)
    d4b8:	9301      	str	r3, [sp, #4]
    d4ba:	9300      	str	r3, [sp, #0]
    d4bc:	4b80      	ldr	r3, [pc, #512]	; (d6c0 <event_connection_prepare+0xf88>)
    d4be:	e45d      	b.n	cd7c <event_connection_prepare+0x644>
		node_rx->hdr.handle = conn->handle;
    d4c0:	8c23      	ldrh	r3, [r4, #32]
    d4c2:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d4c4:	2301      	movs	r3, #1
    d4c6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    d4c8:	7a03      	ldrb	r3, [r0, #8]
    d4ca:	f043 0303 	orr.w	r3, r3, #3
    d4ce:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    d4d0:	2306      	movs	r3, #6
    d4d2:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    d4d4:	230c      	movs	r3, #12
    d4d6:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    d4d8:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    d4dc:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    d4de:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    d4e2:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    d4e6:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    d4ea:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    d4ee:	f7fd feb7 	bl	b260 <packet_rx_enqueue>
    d4f2:	e60a      	b.n	d10a <event_connection_prepare+0x9d2>
		LL_ASSERT(0);
    d4f4:	4b71      	ldr	r3, [pc, #452]	; (d6bc <event_connection_prepare+0xf84>)
    d4f6:	9301      	str	r3, [sp, #4]
    d4f8:	9300      	str	r3, [sp, #0]
    d4fa:	4b71      	ldr	r3, [pc, #452]	; (d6c0 <event_connection_prepare+0xf88>)
    d4fc:	f7ff bad2 	b.w	caa4 <event_connection_prepare+0x36c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d500:	486c      	ldr	r0, [pc, #432]	; (d6b4 <event_connection_prepare+0xf7c>)
    d502:	f7fa f904 	bl	770e <mem_acquire>
	if (node_tx) {
    d506:	4601      	mov	r1, r0
    d508:	2800      	cmp	r0, #0
    d50a:	f43f adfe 	beq.w	d10a <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    d50e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d512:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d516:	7903      	ldrb	r3, [r0, #4]
    d518:	f043 0303 	orr.w	r3, r3, #3
    d51c:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    d51e:	2301      	movs	r3, #1
    d520:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    d522:	2312      	movs	r3, #18
    d524:	71c3      	strb	r3, [r0, #7]
    d526:	e78b      	b.n	d440 <event_connection_prepare+0xd08>
	if (conn->llcp.phy_upd_ind.initiate) {
    d528:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    d52c:	07d7      	lsls	r7, r2, #31
    d52e:	d551      	bpl.n	d5d4 <event_connection_prepare+0xe9c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d530:	4860      	ldr	r0, [pc, #384]	; (d6b4 <event_connection_prepare+0xf7c>)
    d532:	f7fa f8ec 	bl	770e <mem_acquire>
		if (node_tx) {
    d536:	4607      	mov	r7, r0
    d538:	2800      	cmp	r0, #0
    d53a:	f43f ade6 	beq.w	d10a <event_connection_prepare+0x9d2>
			conn->llcp.phy_upd_ind.initiate = 0;
    d53e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d542:	f36f 0300 	bfc	r3, #0, #1
    d546:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    d54a:	b2db      	uxtb	r3, r3
    d54c:	f3c3 0982 	ubfx	r9, r3, #2, #3
    d550:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    d554:	d138      	bne.n	d5c8 <event_connection_prepare+0xe90>
				conn->llcp_ack = conn->llcp_req;
    d556:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    d55a:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    d55e:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    d560:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    d564:	d51a      	bpl.n	d59c <event_connection_prepare+0xe64>
					node_rx = packet_rx_reserve_get(2);
    d566:	2002      	movs	r0, #2
    d568:	f7fd f810 	bl	a58c <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    d56c:	b920      	cbnz	r0, d578 <event_connection_prepare+0xe40>
		LL_ASSERT(node_rx);
    d56e:	4b53      	ldr	r3, [pc, #332]	; (d6bc <event_connection_prepare+0xf84>)
    d570:	9301      	str	r3, [sp, #4]
    d572:	9300      	str	r3, [sp, #0]
    d574:	4b53      	ldr	r3, [pc, #332]	; (d6c4 <event_connection_prepare+0xf8c>)
    d576:	e401      	b.n	cd7c <event_connection_prepare+0x644>
					node_rx->hdr.handle = conn->handle;
    d578:	8c23      	ldrh	r3, [r4, #32]
    d57a:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    d57c:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    d580:	230c      	movs	r3, #12
    d582:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    d584:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d588:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d58c:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    d58e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    d592:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d596:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    d598:	f7fd fe62 	bl	b260 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d59c:	793b      	ldrb	r3, [r7, #4]
    d59e:	f043 0303 	orr.w	r3, r3, #3
    d5a2:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    d5a4:	2305      	movs	r3, #5
    d5a6:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d5a8:	2318      	movs	r3, #24
    d5aa:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    d5ac:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d5b0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    d5b4:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    d5b6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d5ba:	f3c3 1342 	ubfx	r3, r3, #5, #3
    d5be:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    d5c0:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d5c4:	817b      	strh	r3, [r7, #10]
    d5c6:	e59c      	b.n	d102 <event_connection_prepare+0x9ca>
								 conn->latency +
    d5c8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d5ca:	3306      	adds	r3, #6
    d5cc:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    d5ce:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    d5d2:	e7e3      	b.n	d59c <event_connection_prepare+0xe64>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    d5d4:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d5d8:	1af3      	subs	r3, r6, r3
    d5da:	0419      	lsls	r1, r3, #16
    d5dc:	f53f ad95 	bmi.w	d10a <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    d5e0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d5e4:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    d5e8:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    d5ec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    d5f0:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    d5f4:	bf18      	it	ne
    d5f6:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    d5fa:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    d5fe:	bf1c      	itt	ne
    d600:	f367 03c5 	bfine	r3, r7, #3, #3
    d604:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    d608:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    d60c:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    d610:	d008      	beq.n	d624 <event_connection_prepare+0xeec>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    d612:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d616:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    d61a:	095b      	lsrs	r3, r3, #5
    d61c:	f363 0702 	bfi	r7, r3, #0, #3
    d620:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    d624:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d628:	461f      	mov	r7, r3
    d62a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d62e:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    d632:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    d634:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    d638:	d40b      	bmi.n	d652 <event_connection_prepare+0xf1a>
    d63a:	b2fb      	uxtb	r3, r7
    d63c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d640:	4283      	cmp	r3, r0
    d642:	d106      	bne.n	d652 <event_connection_prepare+0xf1a>
		    (conn->phy_rx == old_rx)) {
    d644:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    d648:	f003 0307 	and.w	r3, r3, #7
    d64c:	428b      	cmp	r3, r1
    d64e:	f43f ad5c 	beq.w	d10a <event_connection_prepare+0x9d2>
		node_rx = packet_rx_reserve_get(2);
    d652:	2002      	movs	r0, #2
    d654:	f7fc ff9a 	bl	a58c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    d658:	2800      	cmp	r0, #0
    d65a:	d088      	beq.n	d56e <event_connection_prepare+0xe36>
		node_rx->hdr.handle = conn->handle;
    d65c:	8c23      	ldrh	r3, [r4, #32]
    d65e:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d660:	230c      	movs	r3, #12
    d662:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    d664:	2300      	movs	r3, #0
    d666:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    d668:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d66c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d670:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    d672:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    d676:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d67a:	7343      	strb	r3, [r0, #13]
    d67c:	e737      	b.n	d4ee <event_connection_prepare+0xdb6>
			LL_ASSERT(0);
    d67e:	4b0f      	ldr	r3, [pc, #60]	; (d6bc <event_connection_prepare+0xf84>)
    d680:	9301      	str	r3, [sp, #4]
    d682:	9300      	str	r3, [sp, #0]
    d684:	4b10      	ldr	r3, [pc, #64]	; (d6c8 <event_connection_prepare+0xf90>)
    d686:	f7ff ba0d 	b.w	caa4 <event_connection_prepare+0x36c>
		free_count_rx = packet_rx_acquired_count_get() +
    d68a:	f7fc ff69 	bl	a560 <packet_rx_acquired_count_get>
    d68e:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    d690:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    d694:	f7fa f86a 	bl	776c <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    d698:	4438      	add	r0, r7
    d69a:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    d69c:	28ff      	cmp	r0, #255	; 0xff
    d69e:	d91d      	bls.n	d6dc <event_connection_prepare+0xfa4>
		LL_ASSERT(free_count_rx <= 0xFF);
    d6a0:	4b06      	ldr	r3, [pc, #24]	; (d6bc <event_connection_prepare+0xf84>)
    d6a2:	9301      	str	r3, [sp, #4]
    d6a4:	9300      	str	r3, [sp, #0]
    d6a6:	4a09      	ldr	r2, [pc, #36]	; (d6cc <event_connection_prepare+0xf94>)
    d6a8:	4b09      	ldr	r3, [pc, #36]	; (d6d0 <event_connection_prepare+0xf98>)
    d6aa:	490a      	ldr	r1, [pc, #40]	; (d6d4 <event_connection_prepare+0xf9c>)
    d6ac:	480a      	ldr	r0, [pc, #40]	; (d6d8 <event_connection_prepare+0xfa0>)
    d6ae:	f7ff b853 	b.w	c758 <event_connection_prepare+0x20>
    d6b2:	bf00      	nop
    d6b4:	20000a24 	.word	0x20000a24
    d6b8:	000141ff 	.word	0x000141ff
    d6bc:	000153a9 	.word	0x000153a9
    d6c0:	000182f3 	.word	0x000182f3
    d6c4:	0001834f 	.word	0x0001834f
    d6c8:	00018366 	.word	0x00018366
    d6cc:	00016765 	.word	0x00016765
    d6d0:	0001832d 	.word	0x0001832d
    d6d4:	000167b4 	.word	0x000167b4
    d6d8:	000184f5 	.word	0x000184f5
		if (_radio.packet_rx_data_count != free_count_rx) {
    d6dc:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    d6e0:	4283      	cmp	r3, r0
    d6e2:	d129      	bne.n	d738 <event_connection_prepare+0x1000>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d6e4:	4881      	ldr	r0, [pc, #516]	; (d8ec <event_connection_prepare+0x11b4>)
    d6e6:	f7fa f812 	bl	770e <mem_acquire>
		if (!node_tx) {
    d6ea:	4601      	mov	r1, r0
    d6ec:	b320      	cbz	r0, d738 <event_connection_prepare+0x1000>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    d6ee:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    d6f2:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    d6f6:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    d6fa:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    d6fc:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    d6fe:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    d700:	f365 0301 	bfi	r3, r5, #0, #2
    d704:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d708:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    d70a:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d70c:	f043 0303 	orr.w	r3, r3, #3
    d710:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    d712:	2309      	movs	r3, #9
    d714:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    d716:	2314      	movs	r3, #20
    d718:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    d71a:	231b      	movs	r3, #27
    d71c:	720b      	strb	r3, [r1, #8]
    d71e:	2300      	movs	r3, #0
    d720:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    d722:	2348      	movs	r3, #72	; 0x48
    d724:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    d726:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    d728:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    d72a:	4620      	mov	r0, r4
    d72c:	f7fe ff34 	bl	c598 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    d730:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    d734:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    d738:	f894 3020 	ldrb.w	r3, [r4, #32]
    d73c:	f994 501d 	ldrsb.w	r5, [r4, #29]
    d740:	486b      	ldr	r0, [pc, #428]	; (d8f0 <event_connection_prepare+0x11b8>)
    d742:	496c      	ldr	r1, [pc, #432]	; (d8f4 <event_connection_prepare+0x11bc>)
    d744:	68a2      	ldr	r2, [r4, #8]
    d746:	9403      	str	r4, [sp, #12]
    d748:	3307      	adds	r3, #7
    d74a:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    d74e:	bf38      	it	cc
    d750:	4601      	movcc	r1, r0
    d752:	b2db      	uxtb	r3, r3
    d754:	e88d 000c 	stmia.w	sp, {r2, r3}
    d758:	9102      	str	r1, [sp, #8]
    d75a:	1d23      	adds	r3, r4, #4
    d75c:	4622      	mov	r2, r4
    d75e:	990c      	ldr	r1, [sp, #48]	; 0x30
    d760:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    d762:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    d764:	f7fe fd90 	bl	c288 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    d768:	8466      	strh	r6, [r4, #34]	; 0x22
}
    d76a:	b00f      	add	sp, #60	; 0x3c
    d76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    d770:	f7fc fef6 	bl	a560 <packet_rx_acquired_count_get>
    d774:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    d776:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    d77a:	f7f9 fff7 	bl	776c <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    d77e:	4438      	add	r0, r7
    d780:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    d782:	28ff      	cmp	r0, #255	; 0xff
    d784:	d88c      	bhi.n	d6a0 <event_connection_prepare+0xf68>
		if (_radio.packet_rx_data_count != free_count_rx) {
    d786:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    d78a:	4283      	cmp	r3, r0
    d78c:	d005      	beq.n	d79a <event_connection_prepare+0x1062>
		LL_ASSERT(0);
    d78e:	4b5a      	ldr	r3, [pc, #360]	; (d8f8 <event_connection_prepare+0x11c0>)
    d790:	9301      	str	r3, [sp, #4]
    d792:	9300      	str	r3, [sp, #0]
    d794:	4b59      	ldr	r3, [pc, #356]	; (d8fc <event_connection_prepare+0x11c4>)
    d796:	f7ff b985 	b.w	caa4 <event_connection_prepare+0x36c>
		conn->llcp_length.ack = conn->llcp_length.req;
    d79a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    d79e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    d7a2:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    d7a6:	2100      	movs	r1, #0
    d7a8:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    d7ac:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d7b0:	f361 02c3 	bfi	r2, r1, #3, #1
    d7b4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    d7b8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    d7bc:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    d7be:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    d7c2:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    d7c4:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    d7c8:	f7f9 ffd0 	bl	776c <mem_free_count_get>
		if (_radio.advertiser.conn) {
    d7cc:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    d7d0:	b10b      	cbz	r3, d7d6 <event_connection_prepare+0x109e>
			free_count_conn++;
    d7d2:	3001      	adds	r0, #1
    d7d4:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    d7d6:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    d7da:	b10b      	cbz	r3, d7e0 <event_connection_prepare+0x10a8>
			free_count_conn++;
    d7dc:	3001      	adds	r0, #1
    d7de:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d7e0:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d7e2:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d7e6:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d7e8:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d7ea:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d7ee:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d7f0:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d7f2:	d052      	beq.n	d89a <event_connection_prepare+0x1162>
    d7f4:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    d7f8:	42bb      	cmp	r3, r7
    d7fa:	d34e      	bcc.n	d89a <event_connection_prepare+0x1162>
		node_rx = packet_rx_reserve_get(2);
    d7fc:	2002      	movs	r0, #2
    d7fe:	f7fc fec5 	bl	a58c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    d802:	2800      	cmp	r0, #0
    d804:	d155      	bne.n	d8b2 <event_connection_prepare+0x117a>
    d806:	4b3c      	ldr	r3, [pc, #240]	; (d8f8 <event_connection_prepare+0x11c0>)
    d808:	9301      	str	r3, [sp, #4]
    d80a:	9300      	str	r3, [sp, #0]
    d80c:	4b3b      	ldr	r3, [pc, #236]	; (d8fc <event_connection_prepare+0x11c4>)
    d80e:	f7ff bab5 	b.w	cd7c <event_connection_prepare+0x644>
				if (_radio.packet_rx_acquire == 0) {
    d812:	b90b      	cbnz	r3, d818 <event_connection_prepare+0x10e0>
						_radio.packet_rx_count - 1;
    d814:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    d818:	3b01      	subs	r3, #1
    d81a:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    d81e:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    d822:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    d826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d82a:	4649      	mov	r1, r9
    d82c:	6818      	ldr	r0, [r3, #0]
    d82e:	f7f9 ff88 	bl	7742 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    d832:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    d836:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    d83a:	3a01      	subs	r2, #1
    d83c:	4293      	cmp	r3, r2
    d83e:	db08      	blt.n	d852 <event_connection_prepare+0x111a>
    d840:	4b2d      	ldr	r3, [pc, #180]	; (d8f8 <event_connection_prepare+0x11c0>)
    d842:	9301      	str	r3, [sp, #4]
    d844:	9300      	str	r3, [sp, #0]
    d846:	4a2e      	ldr	r2, [pc, #184]	; (d900 <event_connection_prepare+0x11c8>)
    d848:	4b2c      	ldr	r3, [pc, #176]	; (d8fc <event_connection_prepare+0x11c4>)
    d84a:	492e      	ldr	r1, [pc, #184]	; (d904 <event_connection_prepare+0x11cc>)
    d84c:	482e      	ldr	r0, [pc, #184]	; (d908 <event_connection_prepare+0x11d0>)
    d84e:	f7fe bf83 	b.w	c758 <event_connection_prepare+0x20>
				_radio.link_rx_data_quota++;
    d852:	3301      	adds	r3, #1
    d854:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    d858:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    d85c:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    d860:	4293      	cmp	r3, r2
    d862:	d1d6      	bne.n	d812 <event_connection_prepare+0x10da>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    d864:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    d866:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    d86a:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    d86c:	bf9a      	itte	ls
    d86e:	2334      	movls	r3, #52	; 0x34
    d870:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    d874:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    d878:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    d87c:	fbb2 f2f1 	udiv	r2, r2, r1
    d880:	b2d2      	uxtb	r2, r2
    d882:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    d886:	b95a      	cbnz	r2, d8a0 <event_connection_prepare+0x1168>
    d888:	4b1b      	ldr	r3, [pc, #108]	; (d8f8 <event_connection_prepare+0x11c0>)
    d88a:	9301      	str	r3, [sp, #4]
    d88c:	9300      	str	r3, [sp, #0]
    d88e:	4a1c      	ldr	r2, [pc, #112]	; (d900 <event_connection_prepare+0x11c8>)
    d890:	4b1a      	ldr	r3, [pc, #104]	; (d8fc <event_connection_prepare+0x11c4>)
    d892:	491c      	ldr	r1, [pc, #112]	; (d904 <event_connection_prepare+0x11cc>)
    d894:	481d      	ldr	r0, [pc, #116]	; (d90c <event_connection_prepare+0x11d4>)
    d896:	f7fe bf5f 	b.w	c758 <event_connection_prepare+0x20>
				mem_release(node_rx->hdr.onion.link,
    d89a:	f8df 9078 	ldr.w	r9, [pc, #120]	; d914 <event_connection_prepare+0x11dc>
    d89e:	e7db      	b.n	d858 <event_connection_prepare+0x1120>
			mem_init(_radio.pkt_rx_data_pool,
    d8a0:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    d8a4:	4b1a      	ldr	r3, [pc, #104]	; (d910 <event_connection_prepare+0x11d8>)
    d8a6:	f7f9 ff0b 	bl	76c0 <mem_init>
			packet_rx_allocate(4);
    d8aa:	2004      	movs	r0, #4
    d8ac:	f7fc fee6 	bl	a67c <packet_rx_allocate>
    d8b0:	e7a4      	b.n	d7fc <event_connection_prepare+0x10c4>
		node_rx->hdr.handle = conn->handle;
    d8b2:	8c23      	ldrh	r3, [r4, #32]
    d8b4:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d8b6:	2301      	movs	r3, #1
    d8b8:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    d8ba:	7a03      	ldrb	r3, [r0, #8]
    d8bc:	f043 0303 	orr.w	r3, r3, #3
    d8c0:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    d8c2:	2309      	movs	r3, #9
    d8c4:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    d8c6:	2315      	movs	r3, #21
    d8c8:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    d8ca:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    d8cc:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    d8ce:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    d8d0:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    d8d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    d8d4:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    d8d6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    d8d8:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    d8da:	f7fd fcc1 	bl	b260 <packet_rx_enqueue>
    d8de:	e72b      	b.n	d738 <event_connection_prepare+0x1000>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d8e0:	4902      	ldr	r1, [pc, #8]	; (d8ec <event_connection_prepare+0x11b4>)
    d8e2:	4638      	mov	r0, r7
    d8e4:	f7f9 ff2d 	bl	7742 <mem_release>
    d8e8:	e40f      	b.n	d10a <event_connection_prepare+0x9d2>
    d8ea:	bf00      	nop
    d8ec:	20000a24 	.word	0x20000a24
    d8f0:	0000dc45 	.word	0x0000dc45
    d8f4:	0000d95d 	.word	0x0000d95d
    d8f8:	000153a9 	.word	0x000153a9
    d8fc:	0001832d 	.word	0x0001832d
    d900:	00016765 	.word	0x00016765
    d904:	000167b4 	.word	0x000167b4
    d908:	0001852c 	.word	0x0001852c
    d90c:	00018586 	.word	0x00018586
    d910:	200009f8 	.word	0x200009f8
    d914:	20000a10 	.word	0x20000a10

0000d918 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    d918:	f7fe bf0e 	b.w	c738 <event_connection_prepare>

0000d91c <event_slave_prepare>:
    d91c:	f7fe bf0c 	b.w	c738 <event_connection_prepare>

0000d920 <connection_configure>:
{
    d920:	b510      	push	{r4, lr}
    d922:	4604      	mov	r4, r0
	radio_reset();
    d924:	f005 f998 	bl	12c58 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    d928:	2000      	movs	r0, #0
    d92a:	f005 f9bf 	bl	12cac <radio_tx_power_set>
	radio_isr_set(isr);
    d92e:	480a      	ldr	r0, [pc, #40]	; (d958 <connection_configure+0x38>)
    d930:	f005 f95c 	bl	12bec <radio_isr_set>
	radio_aa_set(conn->access_addr);
    d934:	f104 0010 	add.w	r0, r4, #16
    d938:	f005 f9d6 	bl	12ce8 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    d93c:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    d93e:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    d940:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    d942:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    d946:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    d948:	f240 605b 	movw	r0, #1627	; 0x65b
    d94c:	4319      	orrs	r1, r3
}
    d94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    d952:	f005 ba71 	b.w	12e38 <radio_crc_configure>
    d956:	bf00      	nop
    d958:	0000f009 	.word	0x0000f009

0000d95c <event_slave>:
{
    d95c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d960:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    d962:	4b71      	ldr	r3, [pc, #452]	; (db28 <event_slave+0x1cc>)
    d964:	7cda      	ldrb	r2, [r3, #19]
{
    d966:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    d968:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    d96c:	461d      	mov	r5, r3
    d96e:	b172      	cbz	r2, d98e <event_slave+0x32>
    d970:	4b6e      	ldr	r3, [pc, #440]	; (db2c <event_slave+0x1d0>)
    d972:	9301      	str	r3, [sp, #4]
    d974:	9300      	str	r3, [sp, #0]
    d976:	4a6e      	ldr	r2, [pc, #440]	; (db30 <event_slave+0x1d4>)
    d978:	4b6e      	ldr	r3, [pc, #440]	; (db34 <event_slave+0x1d8>)
    d97a:	496f      	ldr	r1, [pc, #444]	; (db38 <event_slave+0x1dc>)
    d97c:	486f      	ldr	r0, [pc, #444]	; (db3c <event_slave+0x1e0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    d97e:	f7f3 fb05 	bl	f8c <printk>
    d982:	4040      	eors	r0, r0
    d984:	f380 8811 	msr	BASEPRI, r0
    d988:	f04f 0004 	mov.w	r0, #4
    d98c:	df02      	svc	2
    d98e:	7c1b      	ldrb	r3, [r3, #16]
    d990:	8c22      	ldrh	r2, [r4, #32]
    d992:	b2db      	uxtb	r3, r3
    d994:	3207      	adds	r2, #7
    d996:	4293      	cmp	r3, r2
    d998:	d007      	beq.n	d9aa <event_slave+0x4e>
    d99a:	4b64      	ldr	r3, [pc, #400]	; (db2c <event_slave+0x1d0>)
    d99c:	9301      	str	r3, [sp, #4]
    d99e:	9300      	str	r3, [sp, #0]
    d9a0:	4a63      	ldr	r2, [pc, #396]	; (db30 <event_slave+0x1d4>)
    d9a2:	4b64      	ldr	r3, [pc, #400]	; (db34 <event_slave+0x1d8>)
    d9a4:	4964      	ldr	r1, [pc, #400]	; (db38 <event_slave+0x1dc>)
    d9a6:	4866      	ldr	r0, [pc, #408]	; (db40 <event_slave+0x1e4>)
    d9a8:	e7e9      	b.n	d97e <event_slave+0x22>
	_radio.packet_counter = 0;
    d9aa:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    d9ae:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    d9b2:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    d9b4:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    d9b6:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    d9b8:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    d9ba:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    d9bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    d9be:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    d9c2:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    d9c4:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    d9c6:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    d9c8:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    d9ca:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    d9cc:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    d9ce:	f7ff ffa7 	bl	d920 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    d9d2:	2096      	movs	r0, #150	; 0x96
    d9d4:	f005 faea 	bl	12fac <radio_tmr_tifs_set>
				     conn->phy_flags);
    d9d8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    d9dc:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d9e0:	09d3      	lsrs	r3, r2, #7
    d9e2:	4631      	mov	r1, r6
    d9e4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    d9e8:	f000 0007 	and.w	r0, r0, #7
    d9ec:	f005 fa4e 	bl	12e8c <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    d9f0:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    d9f4:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    d9f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    d9fc:	4620      	mov	r0, r4
    d9fe:	3108      	adds	r1, #8
    da00:	f7fd f922 	bl	ac48 <rx_packet_set>
	if (conn->data_chan_sel) {
    da04:	7f63      	ldrb	r3, [r4, #29]
    da06:	f013 0f40 	tst.w	r3, #64	; 0x40
    da0a:	f104 0217 	add.w	r2, r4, #23
    da0e:	d05a      	beq.n	dac6 <event_slave+0x16a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    da10:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    da12:	8be1      	ldrh	r1, [r4, #30]
    da14:	3801      	subs	r0, #1
    da16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    da1a:	b280      	uxth	r0, r0
    da1c:	f7fe fd78 	bl	c510 <chan_sel_2>
	chan_set(data_chan_use);
    da20:	f7fe f84c 	bl	babc <chan_set>
	conn->slave.window_widening_event_us +=
    da24:	6e23      	ldr	r3, [r4, #96]	; 0x60
    da26:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    da28:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    da2a:	2200      	movs	r2, #0
    da2c:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    da2e:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    da30:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    da32:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    da34:	bf88      	it	hi
    da36:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    da38:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    da3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    da3c:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    da3e:	4413      	add	r3, r2
    da40:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    da42:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    da44:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    da46:	f107 0109 	add.w	r1, r7, #9
    da4a:	4630      	mov	r0, r6
    da4c:	f005 faba 	bl	12fc4 <radio_tmr_start>
    da50:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    da52:	f005 fb53 	bl	130fc <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    da56:	4630      	mov	r0, r6
    da58:	f005 fb72 	bl	13140 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    da5c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    da5e:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    da60:	f103 0650 	add.w	r6, r3, #80	; 0x50
    da64:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    da68:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    da6c:	2101      	movs	r1, #1
    da6e:	f000 0007 	and.w	r0, r0, #7
    da72:	f005 f992 	bl	12d9a <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    da76:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    da78:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    da7a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    da7e:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    da82:	2802      	cmp	r0, #2
    da84:	d03f      	beq.n	db06 <event_slave+0x1aa>
		return 40;
    da86:	2804      	cmp	r0, #4
    da88:	bf0c      	ite	eq
    da8a:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    da8e:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    da90:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    da92:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    da94:	f005 f983 	bl	12d9e <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    da98:	4430      	add	r0, r6
    da9a:	f005 fb11 	bl	130c0 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    da9e:	f894 1020 	ldrb.w	r1, [r4, #32]
    daa2:	3107      	adds	r1, #7
    daa4:	463a      	mov	r2, r7
    daa6:	b2c9      	uxtb	r1, r1
    daa8:	4620      	mov	r0, r4
    daaa:	f7fe fab9 	bl	c020 <preempt_calc>
    daae:	4603      	mov	r3, r0
    dab0:	b358      	cbz	r0, db0a <event_slave+0x1ae>
		_radio.state = STATE_STOP;
    dab2:	2304      	movs	r3, #4
    dab4:	752b      	strb	r3, [r5, #20]
		radio_disable();
    dab6:	f005 f983 	bl	12dc0 <radio_disable>
	packet_tx_enqueue(2);
    daba:	2002      	movs	r0, #2
}
    dabc:	b002      	add	sp, #8
    dabe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    dac2:	f7fd bf11 	b.w	b8e8 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    dac6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    dac8:	7fa6      	ldrb	r6, [r4, #30]
    daca:	fb01 6606 	mla	r6, r1, r6, r6
    dace:	7fe1      	ldrb	r1, [r4, #31]
    dad0:	2025      	movs	r0, #37	; 0x25
    dad2:	440e      	add	r6, r1
    dad4:	fb96 f1f0 	sdiv	r1, r6, r0
    dad8:	fb00 6611 	mls	r6, r0, r1, r6
    dadc:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    dade:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    dae0:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    dae2:	5c51      	ldrb	r1, [r2, r1]
    dae4:	f006 0607 	and.w	r6, r6, #7
    dae8:	fa41 f606 	asr.w	r6, r1, r6
    daec:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    daee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    daf2:	d495      	bmi.n	da20 <event_slave+0xc4>
		chan_index = chan_next % chan_count;
    daf4:	fbb0 f1f3 	udiv	r1, r0, r3
    daf8:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    dafc:	b2c9      	uxtb	r1, r1
    dafe:	4610      	mov	r0, r2
    db00:	f7fc fd12 	bl	a528 <chan_sel_remap>
    db04:	e78c      	b.n	da20 <event_slave+0xc4>
		return 24;
    db06:	2318      	movs	r3, #24
    db08:	e7c2      	b.n	da90 <event_slave+0x134>
		ticker_status =
    db0a:	4a0e      	ldr	r2, [pc, #56]	; (db44 <event_slave+0x1e8>)
    db0c:	4601      	mov	r1, r0
    db0e:	f7fa fda3 	bl	8658 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    db12:	f030 0302 	bics.w	r3, r0, #2
    db16:	d0d0      	beq.n	daba <event_slave+0x15e>
    db18:	4b04      	ldr	r3, [pc, #16]	; (db2c <event_slave+0x1d0>)
    db1a:	9301      	str	r3, [sp, #4]
    db1c:	9300      	str	r3, [sp, #0]
    db1e:	4a04      	ldr	r2, [pc, #16]	; (db30 <event_slave+0x1d4>)
    db20:	4b04      	ldr	r3, [pc, #16]	; (db34 <event_slave+0x1d8>)
    db22:	4905      	ldr	r1, [pc, #20]	; (db38 <event_slave+0x1dc>)
    db24:	4808      	ldr	r0, [pc, #32]	; (db48 <event_slave+0x1ec>)
    db26:	e72a      	b.n	d97e <event_slave+0x22>
    db28:	200008c8 	.word	0x200008c8
    db2c:	000153a9 	.word	0x000153a9
    db30:	00016765 	.word	0x00016765
    db34:	0001837f 	.word	0x0001837f
    db38:	000167b4 	.word	0x000167b4
    db3c:	000185c3 	.word	0x000185c3
    db40:	00018676 	.word	0x00018676
    db44:	0000b65d 	.word	0x0000b65d
    db48:	000184a7 	.word	0x000184a7

0000db4c <prepare_pdu_data_tx>:
	    conn->empty ||
    db4c:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    db50:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    db54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db56:	4604      	mov	r4, r0
    db58:	460e      	mov	r6, r1
	if (/* empty packet */
    db5a:	d109      	bne.n	db70 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    db5c:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    db60:	b131      	cbz	r1, db70 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    db62:	f01c 0f08 	tst.w	ip, #8
    db66:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    db6a:	d022      	beq.n	dbb2 <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    db6c:	4571      	cmp	r1, lr
    db6e:	d020      	beq.n	dbb2 <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    db70:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    db74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    db78:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    db7c:	f005 f972 	bl	12e64 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    db80:	7803      	ldrb	r3, [r0, #0]
    db82:	2201      	movs	r2, #1
    db84:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    db88:	2200      	movs	r2, #0
    db8a:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    db8c:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    db90:	7003      	strb	r3, [r0, #0]
    db92:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    db94:	b152      	cbz	r2, dbac <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    db96:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    db9a:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    db9c:	7803      	ldrb	r3, [r0, #0]
    db9e:	f36f 1347 	bfc	r3, #5, #3
    dba2:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    dba4:	2300      	movs	r3, #0
    dba6:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    dba8:	6030      	str	r0, [r6, #0]
    dbaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    dbac:	f362 1304 	bfi	r3, r2, #4, #1
    dbb0:	e7f3      	b.n	db9a <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    dbb2:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    dbb6:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    dbba:	1d0d      	adds	r5, r1, #4
    dbbc:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    dbbe:	b913      	cbnz	r3, dbc6 <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    dbc0:	7843      	ldrb	r3, [r0, #1]
    dbc2:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    dbc6:	b122      	cbz	r2, dbd2 <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    dbc8:	5cab      	ldrb	r3, [r5, r2]
    dbca:	2701      	movs	r7, #1
    dbcc:	f367 0301 	bfi	r3, r7, #0, #2
    dbd0:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    dbd2:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    dbd6:	1abf      	subs	r7, r7, r2
    dbd8:	b2ff      	uxtb	r7, r7
    dbda:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    dbdc:	5cab      	ldrb	r3, [r5, r2]
    dbde:	f36f 1304 	bfc	r3, #4, #1
    dbe2:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    dbe4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    dbe8:	f003 0307 	and.w	r3, r3, #7
    dbec:	2b02      	cmp	r3, #2
    dbee:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    dbf0:	bf15      	itete	ne
    dbf2:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    dbf4:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    dbf6:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    dbf8:	3b0b      	subeq	r3, #11
    dbfa:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    dbfc:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    dc00:	bf18      	it	ne
    dc02:	3b04      	subne	r3, #4
    dc04:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    dc08:	bf18      	it	ne
    dc0a:	b29b      	uxthne	r3, r3
    dc0c:	4563      	cmp	r3, ip
    dc0e:	bf28      	it	cs
    dc10:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    dc12:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    dc14:	bf81      	itttt	hi
    dc16:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    dc18:	5cab      	ldrbhi	r3, [r5, r2]
    dc1a:	f043 0310 	orrhi.w	r3, r3, #16
    dc1e:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    dc20:	680b      	ldr	r3, [r1, #0]
    dc22:	b11b      	cbz	r3, dc2c <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    dc24:	5cab      	ldrb	r3, [r5, r2]
    dc26:	f043 0310 	orr.w	r3, r3, #16
    dc2a:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    dc2c:	f1be 0f00 	cmp.w	lr, #0
    dc30:	d1b4      	bne.n	db9c <prepare_pdu_data_tx+0x50>
    dc32:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    dc36:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    dc38:	bf1c      	itt	ne
    dc3a:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    dc3e:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    dc42:	e7ab      	b.n	db9c <prepare_pdu_data_tx+0x50>

0000dc44 <event_master>:
{
    dc44:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc46:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    dc48:	4b56      	ldr	r3, [pc, #344]	; (dda4 <event_master+0x160>)
    dc4a:	7cd9      	ldrb	r1, [r3, #19]
{
    dc4c:	b085      	sub	sp, #20
    dc4e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    dc50:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    dc54:	461d      	mov	r5, r3
    dc56:	b171      	cbz	r1, dc76 <event_master+0x32>
    dc58:	4b53      	ldr	r3, [pc, #332]	; (dda8 <event_master+0x164>)
    dc5a:	9301      	str	r3, [sp, #4]
    dc5c:	9300      	str	r3, [sp, #0]
    dc5e:	4a53      	ldr	r2, [pc, #332]	; (ddac <event_master+0x168>)
    dc60:	4b53      	ldr	r3, [pc, #332]	; (ddb0 <event_master+0x16c>)
    dc62:	4954      	ldr	r1, [pc, #336]	; (ddb4 <event_master+0x170>)
    dc64:	4854      	ldr	r0, [pc, #336]	; (ddb8 <event_master+0x174>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    dc66:	f7f3 f991 	bl	f8c <printk>
    dc6a:	4040      	eors	r0, r0
    dc6c:	f380 8811 	msr	BASEPRI, r0
    dc70:	f04f 0004 	mov.w	r0, #4
    dc74:	df02      	svc	2
    dc76:	7c1b      	ldrb	r3, [r3, #16]
    dc78:	8c21      	ldrh	r1, [r4, #32]
    dc7a:	b2db      	uxtb	r3, r3
    dc7c:	3107      	adds	r1, #7
    dc7e:	428b      	cmp	r3, r1
    dc80:	d007      	beq.n	dc92 <event_master+0x4e>
    dc82:	4b49      	ldr	r3, [pc, #292]	; (dda8 <event_master+0x164>)
    dc84:	9301      	str	r3, [sp, #4]
    dc86:	9300      	str	r3, [sp, #0]
    dc88:	4a48      	ldr	r2, [pc, #288]	; (ddac <event_master+0x168>)
    dc8a:	4b49      	ldr	r3, [pc, #292]	; (ddb0 <event_master+0x16c>)
    dc8c:	4949      	ldr	r1, [pc, #292]	; (ddb4 <event_master+0x170>)
    dc8e:	484b      	ldr	r0, [pc, #300]	; (ddbc <event_master+0x178>)
    dc90:	e7e9      	b.n	dc66 <event_master+0x22>
	_radio.packet_counter = 0;
    dc92:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    dc96:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    dc9a:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    dc9c:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    dc9e:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    dca0:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    dca2:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    dca4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    dca6:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    dcaa:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    dcac:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    dcae:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    dcb0:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    dcb2:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    dcb4:	f7fd fe18 	bl	b8e8 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    dcb8:	a903      	add	r1, sp, #12
    dcba:	4620      	mov	r0, r4
    dcbc:	f7ff ff46 	bl	db4c <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    dcc0:	9903      	ldr	r1, [sp, #12]
    dcc2:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    dcc6:	780b      	ldrb	r3, [r1, #0]
    dcc8:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    dccc:	f3c2 0240 	ubfx	r2, r2, #1, #1
    dcd0:	f362 0382 	bfi	r3, r2, #2, #1
    dcd4:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    dcd6:	4620      	mov	r0, r4
    dcd8:	f7ff fe22 	bl	d920 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    dcdc:	2096      	movs	r0, #150	; 0x96
    dcde:	f005 f965 	bl	12fac <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    dce2:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    dce6:	f000 0007 	and.w	r0, r0, #7
    dcea:	f005 f8c3 	bl	12e74 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    dcee:	9903      	ldr	r1, [sp, #12]
    dcf0:	4620      	mov	r0, r4
    dcf2:	f7fc ffd5 	bl	aca0 <tx_packet_set>
	if (conn->data_chan_sel) {
    dcf6:	7f63      	ldrb	r3, [r4, #29]
    dcf8:	f013 0f40 	tst.w	r3, #64	; 0x40
    dcfc:	f104 0217 	add.w	r2, r4, #23
    dd00:	d021      	beq.n	dd46 <event_master+0x102>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    dd02:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    dd04:	8be1      	ldrh	r1, [r4, #30]
    dd06:	3801      	subs	r0, #1
    dd08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    dd0c:	b280      	uxth	r0, r0
    dd0e:	f7fe fbff 	bl	c510 <chan_sel_2>
	chan_set(data_chan_use);
    dd12:	f7fd fed3 	bl	babc <chan_set>
		remainder_us = radio_tmr_start(1,
    dd16:	68ea      	ldr	r2, [r5, #12]
    dd18:	f107 0109 	add.w	r1, r7, #9
    dd1c:	2001      	movs	r0, #1
    dd1e:	f005 f951 	bl	12fc4 <radio_tmr_start>
		radio_tmr_end_capture();
    dd22:	f005 fa1f 	bl	13164 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    dd26:	f894 1020 	ldrb.w	r1, [r4, #32]
    dd2a:	3107      	adds	r1, #7
    dd2c:	463a      	mov	r2, r7
    dd2e:	b2c9      	uxtb	r1, r1
    dd30:	4620      	mov	r0, r4
    dd32:	f7fe f975 	bl	c020 <preempt_calc>
	if (0 !=
    dd36:	4603      	mov	r3, r0
    dd38:	b328      	cbz	r0, dd86 <event_master+0x142>
		_radio.state = STATE_STOP;
    dd3a:	2304      	movs	r3, #4
    dd3c:	752b      	strb	r3, [r5, #20]
		radio_disable();
    dd3e:	f005 f83f 	bl	12dc0 <radio_disable>
}
    dd42:	b005      	add	sp, #20
    dd44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    dd46:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    dd48:	7fa6      	ldrb	r6, [r4, #30]
    dd4a:	fb01 6606 	mla	r6, r1, r6, r6
    dd4e:	7fe1      	ldrb	r1, [r4, #31]
    dd50:	2025      	movs	r0, #37	; 0x25
    dd52:	440e      	add	r6, r1
    dd54:	fb96 f1f0 	sdiv	r1, r6, r0
    dd58:	fb00 6611 	mls	r6, r0, r1, r6
    dd5c:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    dd5e:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    dd60:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    dd62:	5c51      	ldrb	r1, [r2, r1]
    dd64:	f006 0607 	and.w	r6, r6, #7
    dd68:	fa41 f606 	asr.w	r6, r1, r6
    dd6c:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    dd6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    dd72:	d4ce      	bmi.n	dd12 <event_master+0xce>
		chan_index = chan_next % chan_count;
    dd74:	fbb0 f1f3 	udiv	r1, r0, r3
    dd78:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    dd7c:	b2c9      	uxtb	r1, r1
    dd7e:	4610      	mov	r0, r2
    dd80:	f7fc fbd2 	bl	a528 <chan_sel_remap>
    dd84:	e7c5      	b.n	dd12 <event_master+0xce>
		ticker_status =
    dd86:	4a0e      	ldr	r2, [pc, #56]	; (ddc0 <event_master+0x17c>)
    dd88:	4601      	mov	r1, r0
    dd8a:	f7fa fc65 	bl	8658 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    dd8e:	f030 0302 	bics.w	r3, r0, #2
    dd92:	d0d6      	beq.n	dd42 <event_master+0xfe>
    dd94:	4b04      	ldr	r3, [pc, #16]	; (dda8 <event_master+0x164>)
    dd96:	9301      	str	r3, [sp, #4]
    dd98:	9300      	str	r3, [sp, #0]
    dd9a:	4a04      	ldr	r2, [pc, #16]	; (ddac <event_master+0x168>)
    dd9c:	4b04      	ldr	r3, [pc, #16]	; (ddb0 <event_master+0x16c>)
    dd9e:	4905      	ldr	r1, [pc, #20]	; (ddb4 <event_master+0x170>)
    dda0:	4808      	ldr	r0, [pc, #32]	; (ddc4 <event_master+0x180>)
    dda2:	e760      	b.n	dc66 <event_master+0x22>
    dda4:	200008c8 	.word	0x200008c8
    dda8:	000153a9 	.word	0x000153a9
    ddac:	00016765 	.word	0x00016765
    ddb0:	0001838b 	.word	0x0001838b
    ddb4:	000167b4 	.word	0x000167b4
    ddb8:	000185c3 	.word	0x000185c3
    ddbc:	00018676 	.word	0x00018676
    ddc0:	0000b65d 	.word	0x0000b65d
    ddc4:	000184a7 	.word	0x000184a7

0000ddc8 <isr_rx_conn_pkt_ctrl>:
{
    ddc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    ddcc:	7ac7      	ldrb	r7, [r0, #11]
{
    ddce:	4604      	mov	r4, r0
    ddd0:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    ddd2:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    ddd6:	2f19      	cmp	r7, #25
    ddd8:	f201 80e0 	bhi.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
    dddc:	e8df f017 	tbh	[pc, r7, lsl #1]
    dde0:	0081001a 	.word	0x0081001a
    dde4:	00cc00bd 	.word	0x00cc00bd
    dde8:	012200fa 	.word	0x012200fa
    ddec:	05850154 	.word	0x05850154
    ddf0:	01c40190 	.word	0x01c40190
    ddf4:	021c01f2 	.word	0x021c01f2
    ddf8:	02b6024d 	.word	0x02b6024d
    ddfc:	02ce01a6 	.word	0x02ce01a6
    de00:	04a40421 	.word	0x04a40421
    de04:	057a0560 	.word	0x057a0560
    de08:	06480648 	.word	0x06480648
    de0c:	07ea071d 	.word	0x07ea071d
    de10:	08ab0821 	.word	0x08ab0821
		if (!_radio.conn_curr->role ||
    de14:	4ecb      	ldr	r6, [pc, #812]	; (e144 <isr_rx_conn_pkt_ctrl+0x37c>)
    de16:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    de1a:	f995 301d 	ldrsb.w	r3, [r5, #29]
    de1e:	2b00      	cmp	r3, #0
    de20:	f281 80bc 	bge.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    de24:	7a41      	ldrb	r1, [r0, #9]
    de26:	2000      	movs	r0, #0
    de28:	f7fc fb52 	bl	a4d0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    de2c:	2800      	cmp	r0, #0
    de2e:	f001 80b5 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    de32:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    de36:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    de38:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    de3a:	041b      	lsls	r3, r3, #16
    de3c:	f101 80c4 	bmi.w	efc8 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    de40:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    de44:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    de48:	429a      	cmp	r2, r3
    de4a:	d007      	beq.n	de5c <isr_rx_conn_pkt_ctrl+0x94>
    de4c:	4bbe      	ldr	r3, [pc, #760]	; (e148 <isr_rx_conn_pkt_ctrl+0x380>)
    de4e:	9301      	str	r3, [sp, #4]
    de50:	9300      	str	r3, [sp, #0]
    de52:	4bbe      	ldr	r3, [pc, #760]	; (e14c <isr_rx_conn_pkt_ctrl+0x384>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    de54:	4abe      	ldr	r2, [pc, #760]	; (e150 <isr_rx_conn_pkt_ctrl+0x388>)
    de56:	49bf      	ldr	r1, [pc, #764]	; (e154 <isr_rx_conn_pkt_ctrl+0x38c>)
    de58:	48bf      	ldr	r0, [pc, #764]	; (e158 <isr_rx_conn_pkt_ctrl+0x390>)
    de5a:	e0f7      	b.n	e04c <isr_rx_conn_pkt_ctrl+0x284>
	if (_radio.conn_upd == 0) {
    de5c:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    de60:	b90a      	cbnz	r2, de66 <isr_rx_conn_pkt_ctrl+0x9e>
		_radio.conn_upd = conn;
    de62:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    de66:	7b22      	ldrb	r2, [r4, #12]
    de68:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    de6c:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    de70:	f240 42e2 	movw	r2, #1250	; 0x4e2
    de74:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    de76:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    de7a:	7c20      	ldrb	r0, [r4, #16]
    de7c:	7be2      	ldrb	r2, [r4, #15]
    de7e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    de82:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    de86:	7ca0      	ldrb	r0, [r4, #18]
    de88:	7c62      	ldrb	r2, [r4, #17]
    de8a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    de8e:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    de92:	7ce2      	ldrb	r2, [r4, #19]
    de94:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    de96:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    de9a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    de9e:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    dea2:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    dea6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    deaa:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    deae:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    deb0:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    deb4:	2201      	movs	r2, #1
    deb6:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    deba:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    debe:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    dec2:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    dec6:	4293      	cmp	r3, r2
    dec8:	d007      	beq.n	deda <isr_rx_conn_pkt_ctrl+0x112>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    deca:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    dece:	f003 0307 	and.w	r3, r3, #7
    ded2:	2b04      	cmp	r3, #4
    ded4:	d101      	bne.n	deda <isr_rx_conn_pkt_ctrl+0x112>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    ded6:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    deda:	2000      	movs	r0, #0
    dedc:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    dee0:	e038      	b.n	df54 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    dee2:	4b98      	ldr	r3, [pc, #608]	; (e144 <isr_rx_conn_pkt_ctrl+0x37c>)
    dee4:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    dee8:	f995 301d 	ldrsb.w	r3, [r5, #29]
    deec:	2b00      	cmp	r3, #0
    deee:	f281 8055 	bge.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    def2:	7a41      	ldrb	r1, [r0, #9]
    def4:	2001      	movs	r0, #1
    def6:	f7fc faeb 	bl	a4d0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    defa:	2800      	cmp	r0, #0
    defc:	f001 804e 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    df00:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    df04:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    df06:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    df08:	041f      	lsls	r7, r3, #16
    df0a:	f101 805d 	bmi.w	efc8 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    df0e:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    df12:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    df16:	429a      	cmp	r2, r3
    df18:	d004      	beq.n	df24 <isr_rx_conn_pkt_ctrl+0x15c>
    df1a:	4b8b      	ldr	r3, [pc, #556]	; (e148 <isr_rx_conn_pkt_ctrl+0x380>)
    df1c:	9301      	str	r3, [sp, #4]
    df1e:	9300      	str	r3, [sp, #0]
    df20:	4b8e      	ldr	r3, [pc, #568]	; (e15c <isr_rx_conn_pkt_ctrl+0x394>)
    df22:	e797      	b.n	de54 <isr_rx_conn_pkt_ctrl+0x8c>
	memcpy(&conn->llcp.chan_map.chm[0],
    df24:	2205      	movs	r2, #5
    df26:	f104 010c 	add.w	r1, r4, #12
    df2a:	f105 0079 	add.w	r0, r5, #121	; 0x79
    df2e:	f7f3 fe65 	bl	1bfc <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    df32:	7c63      	ldrb	r3, [r4, #17]
    df34:	7ca2      	ldrb	r2, [r4, #18]
    df36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    df3a:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    df3e:	2302      	movs	r3, #2
    df40:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    df44:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    df48:	2000      	movs	r0, #0
	conn->llcp_ack--;
    df4a:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    df4c:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    df50:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    df54:	b003      	add	sp, #12
    df56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    df5a:	7a41      	ldrb	r1, [r0, #9]
    df5c:	2002      	movs	r0, #2
    df5e:	f7fc fab7 	bl	a4d0 <pdu_len_cmp>
    df62:	2800      	cmp	r0, #0
    df64:	f001 801a 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp_terminate.reason_peer =
    df68:	4b76      	ldr	r3, [pc, #472]	; (e144 <isr_rx_conn_pkt_ctrl+0x37c>)
    df6a:	7b22      	ldrb	r2, [r4, #12]
    df6c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    df70:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    df74:	2000      	movs	r0, #0
	return nack;
    df76:	e7ed      	b.n	df54 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    df78:	4e72      	ldr	r6, [pc, #456]	; (e144 <isr_rx_conn_pkt_ctrl+0x37c>)
    df7a:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    df7e:	f998 301d 	ldrsb.w	r3, [r8, #29]
    df82:	2b00      	cmp	r3, #0
    df84:	f281 800a 	bge.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    df88:	7a41      	ldrb	r1, [r0, #9]
    df8a:	2003      	movs	r0, #3
    df8c:	f7fc faa0 	bl	a4d0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    df90:	2800      	cmp	r0, #0
    df92:	f001 8003 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    df96:	2208      	movs	r2, #8
    df98:	f104 0116 	add.w	r1, r4, #22
    df9c:	f108 0094 	add.w	r0, r8, #148	; 0x94
    dfa0:	f7f3 fe2c 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    dfa4:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    dfa8:	2204      	movs	r2, #4
    dfaa:	f104 011e 	add.w	r1, r4, #30
    dfae:	f500 7089 	add.w	r0, r0, #274	; 0x112
    dfb2:	f7f3 fe23 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    dfb6:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    dfba:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    dfbe:	f042 0204 	orr.w	r2, r2, #4
    dfc2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    dfc6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    dfca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    dfce:	2301      	movs	r3, #1
    dfd0:	702b      	strb	r3, [r5, #0]
    dfd2:	e7cf      	b.n	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    dfd4:	4d5b      	ldr	r5, [pc, #364]	; (e144 <isr_rx_conn_pkt_ctrl+0x37c>)
    dfd6:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    dfda:	f996 301d 	ldrsb.w	r3, [r6, #29]
    dfde:	2b00      	cmp	r3, #0
    dfe0:	f2c0 87dc 	blt.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    dfe4:	7a41      	ldrb	r1, [r0, #9]
    dfe6:	2004      	movs	r0, #4
    dfe8:	f7fc fa72 	bl	a4d0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    dfec:	2800      	cmp	r0, #0
    dfee:	f000 87d5 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    dff2:	2208      	movs	r2, #8
    dff4:	f104 010c 	add.w	r1, r4, #12
    dff8:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    dffc:	f7f3 fdfe 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    e000:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    e004:	2204      	movs	r2, #4
    e006:	f104 0114 	add.w	r1, r4, #20
    e00a:	f500 708b 	add.w	r0, r0, #278	; 0x116
    e00e:	f7f3 fdf5 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    e012:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    e016:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    e01a:	f043 0304 	orr.w	r3, r3, #4
    e01e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    e022:	e7a7      	b.n	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    e024:	4b47      	ldr	r3, [pc, #284]	; (e144 <isr_rx_conn_pkt_ctrl+0x37c>)
    e026:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e02a:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    e02e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    e032:	42b3      	cmp	r3, r6
    e034:	d012      	beq.n	e05c <isr_rx_conn_pkt_ctrl+0x294>
    e036:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    e03a:	2b03      	cmp	r3, #3
    e03c:	d00e      	beq.n	e05c <isr_rx_conn_pkt_ctrl+0x294>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    e03e:	4b42      	ldr	r3, [pc, #264]	; (e148 <isr_rx_conn_pkt_ctrl+0x380>)
    e040:	9301      	str	r3, [sp, #4]
    e042:	9300      	str	r3, [sp, #0]
    e044:	4a42      	ldr	r2, [pc, #264]	; (e150 <isr_rx_conn_pkt_ctrl+0x388>)
    e046:	4b46      	ldr	r3, [pc, #280]	; (e160 <isr_rx_conn_pkt_ctrl+0x398>)
    e048:	4942      	ldr	r1, [pc, #264]	; (e154 <isr_rx_conn_pkt_ctrl+0x38c>)
    e04a:	4846      	ldr	r0, [pc, #280]	; (e164 <isr_rx_conn_pkt_ctrl+0x39c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e04c:	f7f2 ff9e 	bl	f8c <printk>
    e050:	4040      	eors	r0, r0
    e052:	f380 8811 	msr	BASEPRI, r0
    e056:	f04f 0004 	mov.w	r0, #4
    e05a:	df02      	svc	2
		if (_radio.conn_curr->role ||
    e05c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e060:	2b00      	cmp	r3, #0
    e062:	f2c0 879b 	blt.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    e066:	7a61      	ldrb	r1, [r4, #9]
    e068:	2005      	movs	r0, #5
    e06a:	f7fc fa31 	bl	a4d0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e06e:	2800      	cmp	r0, #0
    e070:	f000 8794 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    e074:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    e076:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    e078:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    e07a:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    e07e:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    e082:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    e086:	e765      	b.n	df54 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    e088:	7a41      	ldrb	r1, [r0, #9]
    e08a:	2006      	movs	r0, #6
    e08c:	f7fc fa20 	bl	a4d0 <pdu_len_cmp>
    e090:	2800      	cmp	r0, #0
    e092:	f000 8783 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_SLAVE) {
    e096:	4b2b      	ldr	r3, [pc, #172]	; (e144 <isr_rx_conn_pkt_ctrl+0x37c>)
    e098:	7cda      	ldrb	r2, [r3, #19]
    e09a:	2a03      	cmp	r2, #3
    e09c:	4619      	mov	r1, r3
    e09e:	d124      	bne.n	e0ea <isr_rx_conn_pkt_ctrl+0x322>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    e0a0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    e0a4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    e0a8:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    e0ac:	4290      	cmp	r0, r2
    e0ae:	d003      	beq.n	e0b8 <isr_rx_conn_pkt_ctrl+0x2f0>
    e0b0:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    e0b4:	2803      	cmp	r0, #3
    e0b6:	d1c2      	bne.n	e03e <isr_rx_conn_pkt_ctrl+0x276>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    e0b8:	2000      	movs	r0, #0
    e0ba:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    e0be:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    e0c0:	2003      	movs	r0, #3
    e0c2:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    e0c6:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    e0ca:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    e0ce:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    e0d2:	065e      	lsls	r6, r3, #25
    e0d4:	d505      	bpl.n	e0e2 <isr_rx_conn_pkt_ctrl+0x31a>
			_radio.conn_curr->refresh = 0;
    e0d6:	f36f 1386 	bfc	r3, #6, #1
    e0da:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    e0de:	2309      	movs	r3, #9
    e0e0:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    e0e2:	2301      	movs	r3, #1
    e0e4:	702b      	strb	r3, [r5, #0]
				break;
    e0e6:	f000 bcbf 	b.w	ea68 <isr_rx_conn_pkt_ctrl+0xca0>
			_radio.conn_curr->pause_rx = 0;
    e0ea:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    e0ee:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    e0f2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    e0f6:	f36f 03c3 	bfc	r3, #3, #1
    e0fa:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    e0fe:	e7e4      	b.n	e0ca <isr_rx_conn_pkt_ctrl+0x302>
		if (!_radio.conn_curr->role ||
    e100:	4b10      	ldr	r3, [pc, #64]	; (e144 <isr_rx_conn_pkt_ctrl+0x37c>)
    e102:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e106:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e10a:	2b00      	cmp	r3, #0
    e10c:	f280 8746 	bge.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    e110:	7a41      	ldrb	r1, [r0, #9]
    e112:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    e114:	f7fc f9dc 	bl	a4d0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e118:	2800      	cmp	r0, #0
    e11a:	f000 873f 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    e11e:	4631      	mov	r1, r6
    e120:	4628      	mov	r0, r5
}
    e122:	b003      	add	sp, #12
    e124:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    e128:	f7fe ba7e 	b.w	c628 <feature_rsp_send>
		if (_radio.conn_curr->role ||
    e12c:	4b05      	ldr	r3, [pc, #20]	; (e144 <isr_rx_conn_pkt_ctrl+0x37c>)
    e12e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e132:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e136:	2b00      	cmp	r3, #0
    e138:	f2c0 8730 	blt.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    e13c:	7a41      	ldrb	r1, [r0, #9]
    e13e:	200e      	movs	r0, #14
    e140:	e7e8      	b.n	e114 <isr_rx_conn_pkt_ctrl+0x34c>
    e142:	bf00      	nop
    e144:	200008c8 	.word	0x200008c8
    e148:	000153a9 	.word	0x000153a9
    e14c:	000183ea 	.word	0x000183ea
    e150:	00016765 	.word	0x00016765
    e154:	000167b4 	.word	0x000167b4
    e158:	00018872 	.word	0x00018872
    e15c:	000183f6 	.word	0x000183f6
    e160:	0001809c 	.word	0x0001809c
    e164:	000188b4 	.word	0x000188b4
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    e168:	7a41      	ldrb	r1, [r0, #9]
    e16a:	2009      	movs	r0, #9
    e16c:	f7fc f9b0 	bl	a4d0 <pdu_len_cmp>
    e170:	2800      	cmp	r0, #0
    e172:	f000 8713 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    e176:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    e178:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    e17a:	48b2      	ldr	r0, [pc, #712]	; (e444 <isr_rx_conn_pkt_ctrl+0x67c>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    e17c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    e180:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    e184:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    e188:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    e18c:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    e190:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    e194:	7ba1      	ldrb	r1, [r4, #14]
    e196:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    e19a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    e19e:	f3c1 0110 	ubfx	r1, r1, #0, #17
    e1a2:	400b      	ands	r3, r1
    e1a4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    e1a8:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e1ac:	f043 0320 	orr.w	r3, r3, #32
    e1b0:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    e1b4:	2301      	movs	r3, #1
    e1b6:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    e1b8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    e1bc:	2000      	movs	r0, #0
    e1be:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    e1c2:	e6c7      	b.n	df54 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    e1c4:	4e9f      	ldr	r6, [pc, #636]	; (e444 <isr_rx_conn_pkt_ctrl+0x67c>)
    e1c6:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e1ca:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e1ce:	2b00      	cmp	r3, #0
    e1d0:	f280 86e4 	bge.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    e1d4:	7a41      	ldrb	r1, [r0, #9]
    e1d6:	200a      	movs	r0, #10
    e1d8:	f7fc f97a 	bl	a4d0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e1dc:	2800      	cmp	r0, #0
    e1de:	f000 86dd 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e1e2:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    e1e6:	f7f9 fa92 	bl	770e <mem_acquire>
		if (!node_tx) {
    e1ea:	4601      	mov	r1, r0
    e1ec:	b908      	cbnz	r0, e1f2 <isr_rx_conn_pkt_ctrl+0x42a>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    e1ee:	2001      	movs	r0, #1
    e1f0:	e6b0      	b.n	df54 <isr_rx_conn_pkt_ctrl+0x18c>
		conn->refresh = 1;
    e1f2:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    e1f6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    e1fa:	f36f 1304 	bfc	r3, #4, #1
    e1fe:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e202:	7903      	ldrb	r3, [r0, #4]
    e204:	f043 0303 	orr.w	r3, r3, #3
    e208:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    e20a:	2301      	movs	r3, #1
    e20c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    e20e:	230b      	movs	r3, #11
    e210:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    e212:	4628      	mov	r0, r5
    e214:	f000 bcdc 	b.w	ebd0 <isr_rx_conn_pkt_ctrl+0xe08>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    e218:	7a41      	ldrb	r1, [r0, #9]
    e21a:	200b      	movs	r0, #11
    e21c:	f7fc f958 	bl	a4d0 <pdu_len_cmp>
    e220:	2800      	cmp	r0, #0
    e222:	f000 86bb 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    e226:	4887      	ldr	r0, [pc, #540]	; (e444 <isr_rx_conn_pkt_ctrl+0x67c>)
    e228:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    e22c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    e230:	2b00      	cmp	r3, #0
    e232:	db1b      	blt.n	e26c <isr_rx_conn_pkt_ctrl+0x4a4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e234:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e238:	f7f9 fa69 	bl	770e <mem_acquire>
		if (!node_tx) {
    e23c:	4601      	mov	r1, r0
    e23e:	2800      	cmp	r0, #0
    e240:	d0d5      	beq.n	e1ee <isr_rx_conn_pkt_ctrl+0x426>
		conn->enc_tx = 0;
    e242:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    e246:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    e24a:	f043 0304 	orr.w	r3, r3, #4
    e24e:	f36f 1304 	bfc	r3, #4, #1
    e252:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e256:	7903      	ldrb	r3, [r0, #4]
    e258:	f043 0303 	orr.w	r3, r3, #3
    e25c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    e25e:	2301      	movs	r3, #1
    e260:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    e262:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    e264:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    e266:	4620      	mov	r0, r4
    e268:	f000 bcb2 	b.w	ebd0 <isr_rx_conn_pkt_ctrl+0xe08>
		conn->enc_tx = 0;
    e26c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    e270:	f36f 1345 	bfc	r3, #5, #1
    e274:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    e278:	e67c      	b.n	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    e27a:	7a41      	ldrb	r1, [r0, #9]
    e27c:	200c      	movs	r0, #12
    e27e:	f7fc f927 	bl	a4d0 <pdu_len_cmp>
    e282:	2800      	cmp	r0, #0
    e284:	f000 868a 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    e288:	486e      	ldr	r0, [pc, #440]	; (e444 <isr_rx_conn_pkt_ctrl+0x67c>)
    e28a:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    e28e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    e292:	f013 0701 	ands.w	r7, r3, #1
    e296:	d150      	bne.n	e33a <isr_rx_conn_pkt_ctrl+0x572>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e298:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e29c:	f7f9 fa37 	bl	770e <mem_acquire>
		if (!node_tx) {
    e2a0:	4601      	mov	r1, r0
    e2a2:	2800      	cmp	r0, #0
    e2a4:	d0a3      	beq.n	e1ee <isr_rx_conn_pkt_ctrl+0x426>
		conn->llcp_version.tx = 1;
    e2a6:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    e2aa:	f043 0301 	orr.w	r3, r3, #1
    e2ae:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e2b2:	7903      	ldrb	r3, [r0, #4]
    e2b4:	f043 0303 	orr.w	r3, r3, #3
    e2b8:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    e2ba:	2306      	movs	r3, #6
    e2bc:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    e2be:	230c      	movs	r3, #12
    e2c0:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    e2c2:	2309      	movs	r3, #9
    e2c4:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    e2c6:	f06f 030e 	mvn.w	r3, #14
    e2ca:	7243      	strb	r3, [r0, #9]
    e2cc:	2305      	movs	r3, #5
    e2ce:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    e2d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e2d4:	72c3      	strb	r3, [r0, #11]
    e2d6:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    e2d8:	4630      	mov	r0, r6
    e2da:	f7fe f98b 	bl	c5f4 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    e2de:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    e2e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e2e6:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    e2ea:	f004 fdbb 	bl	12e64 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e2ee:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    e2f0:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e2f2:	2201      	movs	r2, #1
    e2f4:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    e2f8:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e2fc:	7003      	strb	r3, [r0, #0]
    e2fe:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    e300:	b1c2      	cbz	r2, e334 <isr_rx_conn_pkt_ctrl+0x56c>
		pdu_data_tx->md = 1;
    e302:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    e306:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    e308:	7b23      	ldrb	r3, [r4, #12]
    e30a:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    e30e:	7ba2      	ldrb	r2, [r4, #14]
    e310:	7b63      	ldrb	r3, [r4, #13]
    e312:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e316:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    e31a:	7be3      	ldrb	r3, [r4, #15]
    e31c:	7c22      	ldrb	r2, [r4, #16]
    e31e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e322:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    e326:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    e32a:	f043 0302 	orr.w	r3, r3, #2
    e32e:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    e332:	e61f      	b.n	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		pdu_data_tx->md = 0;
    e334:	f362 1304 	bfi	r3, r2, #4, #1
    e338:	e7e5      	b.n	e306 <isr_rx_conn_pkt_ctrl+0x53e>
	} else if (!conn->llcp_version.rx) {
    e33a:	f013 0302 	ands.w	r3, r3, #2
    e33e:	f47f ae19 	bne.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->procedure_expire = 0;
    e342:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    e346:	2301      	movs	r3, #1
    e348:	702b      	strb	r3, [r5, #0]
    e34a:	e7dd      	b.n	e308 <isr_rx_conn_pkt_ctrl+0x540>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    e34c:	7a41      	ldrb	r1, [r0, #9]
    e34e:	200d      	movs	r0, #13
    e350:	f7fc f8be 	bl	a4d0 <pdu_len_cmp>
    e354:	2800      	cmp	r0, #0
    e356:	f000 8621 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->pause_rx = 0;
    e35a:	4b3a      	ldr	r3, [pc, #232]	; (e444 <isr_rx_conn_pkt_ctrl+0x67c>)
    e35c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    e360:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    e364:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    e368:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    e36c:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    e36e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    e372:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    e376:	2301      	movs	r3, #1
    e378:	702b      	strb	r3, [r5, #0]
    e37a:	e5eb      	b.n	df54 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    e37c:	7a41      	ldrb	r1, [r0, #9]
    e37e:	200f      	movs	r0, #15
    e380:	f7fc f8a6 	bl	a4d0 <pdu_len_cmp>
    e384:	2800      	cmp	r0, #0
    e386:	f000 8609 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    e38a:	4b2e      	ldr	r3, [pc, #184]	; (e444 <isr_rx_conn_pkt_ctrl+0x67c>)
    e38c:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    e390:	461a      	mov	r2, r3
    e392:	b151      	cbz	r1, e3aa <isr_rx_conn_pkt_ctrl+0x5e2>
    e394:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    e398:	4281      	cmp	r1, r0
    e39a:	d006      	beq.n	e3aa <isr_rx_conn_pkt_ctrl+0x5e2>
			nack = reject_ext_ind_send(_radio.conn_curr,
    e39c:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    e39e:	210f      	movs	r1, #15
}
    e3a0:	b003      	add	sp, #12
    e3a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    e3a6:	f7fe b9a9 	b.w	c6fc <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    e3aa:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    e3ae:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e3b2:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    e3b6:	2b00      	cmp	r3, #0
    e3b8:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    e3bc:	f2c0 80a7 	blt.w	e50e <isr_rx_conn_pkt_ctrl+0x746>
			if ((conn->llcp_conn_param.req !=
    e3c0:	4299      	cmp	r1, r3
    e3c2:	d009      	beq.n	e3d8 <isr_rx_conn_pkt_ctrl+0x610>
			    ((conn->llcp_conn_param.state ==
    e3c4:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    e3c8:	f013 0307 	ands.w	r3, r3, #7
    e3cc:	d002      	beq.n	e3d4 <isr_rx_conn_pkt_ctrl+0x60c>
			      LLCP_CPR_STATE_REQ) ||
    e3ce:	3b04      	subs	r3, #4
    e3d0:	2b01      	cmp	r3, #1
    e3d2:	d801      	bhi.n	e3d8 <isr_rx_conn_pkt_ctrl+0x610>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e3d4:	2223      	movs	r2, #35	; 0x23
    e3d6:	e7e2      	b.n	e39e <isr_rx_conn_pkt_ctrl+0x5d6>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    e3d8:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    e3dc:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e3e0:	4299      	cmp	r1, r3
    e3e2:	d003      	beq.n	e3ec <isr_rx_conn_pkt_ctrl+0x624>
    e3e4:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    e3e8:	2b03      	cmp	r3, #3
    e3ea:	d105      	bne.n	e3f8 <isr_rx_conn_pkt_ctrl+0x630>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    e3ec:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    e3f0:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    e3f4:	4299      	cmp	r1, r3
    e3f6:	d001      	beq.n	e3fc <isr_rx_conn_pkt_ctrl+0x634>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e3f8:	222a      	movs	r2, #42	; 0x2a
    e3fa:	e7d0      	b.n	e39e <isr_rx_conn_pkt_ctrl+0x5d6>
				if ((cpr->interval_min < 6) ||
    e3fc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    e400:	4643      	mov	r3, r8
    e402:	2b05      	cmp	r3, #5
    e404:	d91b      	bls.n	e43e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    e406:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    e408:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    e40c:	d817      	bhi.n	e43e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    e40e:	45b8      	cmp	r8, r7
    e410:	d815      	bhi.n	e43e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->latency > 499) ||
    e412:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    e416:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    e41a:	d210      	bcs.n	e43e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->timeout < 10) ||
    e41c:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    e420:	f1ae 060a 	sub.w	r6, lr, #10
    e424:	b2b6      	uxth	r6, r6
    e426:	f640 4976 	movw	r9, #3190	; 0xc76
    e42a:	454e      	cmp	r6, r9
    e42c:	d807      	bhi.n	e43e <isr_rx_conn_pkt_ctrl+0x676>
				     ((cpr->latency + 1) *
    e42e:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    e432:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    e436:	da02      	bge.n	e43e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->preferred_periodicity >
    e438:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    e43a:	428f      	cmp	r7, r1
    e43c:	d204      	bcs.n	e448 <isr_rx_conn_pkt_ctrl+0x680>
				nack = reject_ext_ind_send(conn,
    e43e:	221e      	movs	r2, #30
    e440:	e7ad      	b.n	e39e <isr_rx_conn_pkt_ctrl+0x5d6>
    e442:	bf00      	nop
    e444:	200008c8 	.word	0x200008c8
				conn->llcp_conn_param.interval = cpr->interval_min;
    e448:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    e44c:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    e450:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    e454:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    e458:	7da6      	ldrb	r6, [r4, #22]
    e45a:	7d61      	ldrb	r1, [r4, #21]
    e45c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    e460:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    e464:	7e26      	ldrb	r6, [r4, #24]
    e466:	7de1      	ldrb	r1, [r4, #23]
    e468:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e46c:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    e470:	7ea6      	ldrb	r6, [r4, #26]
    e472:	7e61      	ldrb	r1, [r4, #25]
    e474:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e478:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    e47c:	7f26      	ldrb	r6, [r4, #28]
    e47e:	7ee1      	ldrb	r1, [r4, #27]
    e480:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e484:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    e488:	7fa6      	ldrb	r6, [r4, #30]
    e48a:	7f61      	ldrb	r1, [r4, #29]
    e48c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e490:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    e494:	7fe1      	ldrb	r1, [r4, #31]
    e496:	f894 6020 	ldrb.w	r6, [r4, #32]
    e49a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e49e:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    e4a2:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    e4a6:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    e4aa:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    e4ae:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    e4b2:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    e4b6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    e4b8:	428c      	cmp	r4, r1
    e4ba:	d10f      	bne.n	e4dc <isr_rx_conn_pkt_ctrl+0x714>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    e4bc:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    e4be:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e4c2:	4361      	muls	r1, r4
    e4c4:	f242 7410 	movw	r4, #10000	; 0x2710
    e4c8:	fb04 130e 	mla	r3, r4, lr, r1
    e4cc:	3b01      	subs	r3, #1
    e4ce:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    e4d2:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    e4d4:	b29b      	uxth	r3, r3
    e4d6:	4299      	cmp	r1, r3
    e4d8:	f000 8092 	beq.w	e600 <isr_rx_conn_pkt_ctrl+0x838>
					if (conn->pause_tx) {
    e4dc:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    e4e0:	071c      	lsls	r4, r3, #28
    e4e2:	f140 8087 	bpl.w	e5f4 <isr_rx_conn_pkt_ctrl+0x82c>
						conn->llcp_conn_param.state =
    e4e6:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e4ea:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    e4ec:	f361 0302 	bfi	r3, r1, #0, #3
    e4f0:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    e4f4:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    e4f8:	3b01      	subs	r3, #1
    e4fa:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    e4fe:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    e502:	2b00      	cmp	r3, #0
    e504:	f47f ad36 	bne.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
				_radio.conn_upd = conn;
    e508:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    e50c:	e532      	b.n	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    e50e:	4299      	cmp	r1, r3
    e510:	d003      	beq.n	e51a <isr_rx_conn_pkt_ctrl+0x752>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    e512:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e516:	0799      	lsls	r1, r3, #30
    e518:	d17b      	bne.n	e612 <isr_rx_conn_pkt_ctrl+0x84a>
			if ((cpr->interval_min < 6) ||
    e51a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    e51e:	4643      	mov	r3, r8
    e520:	2b05      	cmp	r3, #5
    e522:	d98c      	bls.n	e43e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    e524:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    e526:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    e52a:	d888      	bhi.n	e43e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    e52c:	45b8      	cmp	r8, r7
    e52e:	d886      	bhi.n	e43e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->latency > 499) ||
    e530:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    e534:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    e538:	d281      	bcs.n	e43e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e53a:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    e53e:	f1ae 060a 	sub.w	r6, lr, #10
    e542:	b2b6      	uxth	r6, r6
    e544:	f640 4976 	movw	r9, #3190	; 0xc76
    e548:	454e      	cmp	r6, r9
    e54a:	f63f af78 	bhi.w	e43e <isr_rx_conn_pkt_ctrl+0x676>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    e54e:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e552:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    e556:	f6bf af72 	bge.w	e43e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    e55a:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    e55c:	428f      	cmp	r7, r1
    e55e:	f4ff af6e 	bcc.w	e43e <isr_rx_conn_pkt_ctrl+0x676>
			conn->llcp_conn_param.interval = cpr->interval_min;
    e562:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    e566:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    e56a:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    e56e:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    e572:	7da6      	ldrb	r6, [r4, #22]
    e574:	7d61      	ldrb	r1, [r4, #21]
    e576:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    e57a:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    e57e:	7e26      	ldrb	r6, [r4, #24]
    e580:	7de1      	ldrb	r1, [r4, #23]
    e582:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e586:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    e58a:	7ea6      	ldrb	r6, [r4, #26]
    e58c:	7e61      	ldrb	r1, [r4, #25]
    e58e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e592:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    e596:	7f26      	ldrb	r6, [r4, #28]
    e598:	7ee1      	ldrb	r1, [r4, #27]
    e59a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e59e:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    e5a2:	7fa6      	ldrb	r6, [r4, #30]
    e5a4:	7f61      	ldrb	r1, [r4, #29]
    e5a6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e5aa:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    e5ae:	7fe1      	ldrb	r1, [r4, #31]
    e5b0:	f894 6020 	ldrb.w	r6, [r4, #32]
    e5b4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e5b8:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    e5bc:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    e5c0:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    e5c4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    e5c8:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    e5cc:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    e5d0:	6a41      	ldr	r1, [r0, #36]	; 0x24
    e5d2:	428c      	cmp	r4, r1
    e5d4:	d10e      	bne.n	e5f4 <isr_rx_conn_pkt_ctrl+0x82c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    e5d6:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    e5d8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e5dc:	4361      	muls	r1, r4
    e5de:	f242 7410 	movw	r4, #10000	; 0x2710
    e5e2:	fb04 130e 	mla	r3, r4, lr, r1
    e5e6:	3b01      	subs	r3, #1
    e5e8:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    e5ec:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    e5ee:	b29b      	uxth	r3, r3
    e5f0:	4299      	cmp	r1, r3
    e5f2:	d005      	beq.n	e600 <isr_rx_conn_pkt_ctrl+0x838>
				*rx_enqueue = 1;
    e5f4:	2301      	movs	r3, #1
    e5f6:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    e5f8:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e5fc:	2103      	movs	r1, #3
    e5fe:	e775      	b.n	e4ec <isr_rx_conn_pkt_ctrl+0x724>
				conn->llcp_conn_param.status = 0;
    e600:	2300      	movs	r3, #0
    e602:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    e606:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    e60a:	2101      	movs	r1, #1
    e60c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    e610:	e76c      	b.n	e4ec <isr_rx_conn_pkt_ctrl+0x724>
			LL_ASSERT(0);
    e612:	4bc9      	ldr	r3, [pc, #804]	; (e938 <isr_rx_conn_pkt_ctrl+0xb70>)
    e614:	9301      	str	r3, [sp, #4]
    e616:	9300      	str	r3, [sp, #0]
    e618:	4ac8      	ldr	r2, [pc, #800]	; (e93c <isr_rx_conn_pkt_ctrl+0xb74>)
    e61a:	4bc9      	ldr	r3, [pc, #804]	; (e940 <isr_rx_conn_pkt_ctrl+0xb78>)
    e61c:	49c9      	ldr	r1, [pc, #804]	; (e944 <isr_rx_conn_pkt_ctrl+0xb7c>)
    e61e:	48ca      	ldr	r0, [pc, #808]	; (e948 <isr_rx_conn_pkt_ctrl+0xb80>)
    e620:	e514      	b.n	e04c <isr_rx_conn_pkt_ctrl+0x284>
		if (_radio.conn_curr->role ||
    e622:	4bca      	ldr	r3, [pc, #808]	; (e94c <isr_rx_conn_pkt_ctrl+0xb84>)
    e624:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e628:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e62c:	2b00      	cmp	r3, #0
    e62e:	f2c0 84b5 	blt.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    e632:	7a41      	ldrb	r1, [r0, #9]
    e634:	2010      	movs	r0, #16
    e636:	f7fb ff4b 	bl	a4d0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e63a:	2800      	cmp	r0, #0
    e63c:	f000 84ae 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		if (!_radio.conn_curr->role &&
    e640:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    e644:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    e648:	429a      	cmp	r2, r3
    e64a:	f43f ac93 	beq.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_conn_param.state ==
    e64e:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    e652:	f003 0307 	and.w	r3, r3, #7
    e656:	2b04      	cmp	r3, #4
    e658:	f47f ac8c 	bne.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
			if ((cpr->interval_min < 6) ||
    e65c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    e660:	fa1f f28e 	uxth.w	r2, lr
    e664:	2a05      	cmp	r2, #5
    e666:	d91b      	bls.n	e6a0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    e668:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    e66a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    e66e:	d817      	bhi.n	e6a0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    e670:	429a      	cmp	r2, r3
    e672:	d815      	bhi.n	e6a0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->latency > 499) ||
    e674:	8a27      	ldrh	r7, [r4, #16]
    e676:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    e678:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    e67c:	d210      	bcs.n	e6a0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e67e:	8a66      	ldrh	r6, [r4, #18]
    e680:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    e682:	f1a0 010a 	sub.w	r1, r0, #10
    e686:	b289      	uxth	r1, r1
    e688:	f640 4c76 	movw	ip, #3190	; 0xc76
    e68c:	4561      	cmp	r1, ip
    e68e:	d807      	bhi.n	e6a0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    e690:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e694:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    e698:	da02      	bge.n	e6a0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    e69a:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    e69c:	4293      	cmp	r3, r2
    e69e:	d203      	bcs.n	e6a8 <isr_rx_conn_pkt_ctrl+0x8e0>
				nack = reject_ext_ind_send(conn,
    e6a0:	221e      	movs	r2, #30
    e6a2:	2110      	movs	r1, #16
    e6a4:	4628      	mov	r0, r5
    e6a6:	e67b      	b.n	e3a0 <isr_rx_conn_pkt_ctrl+0x5d8>
			_radio.conn_curr->procedure_expire = 0;
    e6a8:	2000      	movs	r0, #0
    e6aa:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    e6ae:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    e6b2:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    e6b6:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    e6ba:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    e6be:	7da2      	ldrb	r2, [r4, #22]
    e6c0:	7d63      	ldrb	r3, [r4, #21]
    e6c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    e6c6:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    e6ca:	7e22      	ldrb	r2, [r4, #24]
    e6cc:	7de3      	ldrb	r3, [r4, #23]
    e6ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e6d2:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    e6d6:	7ea2      	ldrb	r2, [r4, #26]
    e6d8:	7e63      	ldrb	r3, [r4, #25]
    e6da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e6de:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    e6e2:	7f22      	ldrb	r2, [r4, #28]
    e6e4:	7ee3      	ldrb	r3, [r4, #27]
    e6e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e6ea:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    e6ee:	7fa2      	ldrb	r2, [r4, #30]
    e6f0:	7f63      	ldrb	r3, [r4, #29]
    e6f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e6f6:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    e6fa:	f894 2020 	ldrb.w	r2, [r4, #32]
    e6fe:	7fe3      	ldrb	r3, [r4, #31]
    e700:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e704:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    e708:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    e70c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    e710:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e714:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    e718:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    e71c:	2201      	movs	r2, #1
    e71e:	f362 0302 	bfi	r3, r2, #0, #3
    e722:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    e726:	e415      	b.n	df54 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    e728:	7a41      	ldrb	r1, [r0, #9]
    e72a:	2011      	movs	r0, #17
    e72c:	f7fb fed0 	bl	a4d0 <pdu_len_cmp>
    e730:	2800      	cmp	r0, #0
    e732:	f000 8433 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    e736:	4a85      	ldr	r2, [pc, #532]	; (e94c <isr_rx_conn_pkt_ctrl+0xb84>)
    e738:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    e73c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    e740:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    e744:	4281      	cmp	r1, r0
    e746:	7b21      	ldrb	r1, [r4, #12]
    e748:	d027      	beq.n	e79a <isr_rx_conn_pkt_ctrl+0x9d2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    e74a:	2916      	cmp	r1, #22
    e74c:	f47f ac12 	bne.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (rej_ext_ind->error_code != 0x23) {
    e750:	7b61      	ldrb	r1, [r4, #13]
    e752:	2923      	cmp	r1, #35	; 0x23
    e754:	d00e      	beq.n	e774 <isr_rx_conn_pkt_ctrl+0x9ac>
				_radio.conn_curr->phy_tx;
    e756:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    e75a:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    e75e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    e762:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e766:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    e76a:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    e76c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    e770:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    e774:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    e778:	0792      	lsls	r2, r2, #30
    e77a:	f57f abfb 	bpl.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e77e:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    e780:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e782:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    e784:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    e788:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e78c:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    e78e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    e792:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e796:	7363      	strb	r3, [r4, #13]
    e798:	e419      	b.n	dfce <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_conn_param.req) {
    e79a:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    e79e:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    e7a2:	42b8      	cmp	r0, r7
    e7a4:	d048      	beq.n	e838 <isr_rx_conn_pkt_ctrl+0xa70>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    e7a6:	290f      	cmp	r1, #15
    e7a8:	f47f abe4 	bne.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
    e7ac:	f993 001d 	ldrsb.w	r0, [r3, #29]
    e7b0:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    e7b2:	2800      	cmp	r0, #0
    e7b4:	db0e      	blt.n	e7d4 <isr_rx_conn_pkt_ctrl+0xa0c>
    e7b6:	291a      	cmp	r1, #26
    e7b8:	d10c      	bne.n	e7d4 <isr_rx_conn_pkt_ctrl+0xa0c>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e7ba:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    e7be:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    e7c2:	4294      	cmp	r4, r2
    e7c4:	f000 80c8 	beq.w	e958 <isr_rx_conn_pkt_ctrl+0xb90>
    e7c8:	4b5b      	ldr	r3, [pc, #364]	; (e938 <isr_rx_conn_pkt_ctrl+0xb70>)
    e7ca:	9301      	str	r3, [sp, #4]
    e7cc:	9300      	str	r3, [sp, #0]
    e7ce:	4b60      	ldr	r3, [pc, #384]	; (e950 <isr_rx_conn_pkt_ctrl+0xb88>)
    e7d0:	f7ff bb40 	b.w	de54 <isr_rx_conn_pkt_ctrl+0x8c>
	else if (rej_ext_ind->error_code != 0x23) {
    e7d4:	2923      	cmp	r1, #35	; 0x23
    e7d6:	d018      	beq.n	e80a <isr_rx_conn_pkt_ctrl+0xa42>
		LL_ASSERT(_radio.conn_upd == conn);
    e7d8:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    e7dc:	42b3      	cmp	r3, r6
    e7de:	d007      	beq.n	e7f0 <isr_rx_conn_pkt_ctrl+0xa28>
    e7e0:	4b55      	ldr	r3, [pc, #340]	; (e938 <isr_rx_conn_pkt_ctrl+0xb70>)
    e7e2:	9301      	str	r3, [sp, #4]
    e7e4:	9300      	str	r3, [sp, #0]
    e7e6:	4b5a      	ldr	r3, [pc, #360]	; (e950 <isr_rx_conn_pkt_ctrl+0xb88>)
			LL_ASSERT(_radio.conn_upd == conn);
    e7e8:	4a54      	ldr	r2, [pc, #336]	; (e93c <isr_rx_conn_pkt_ctrl+0xb74>)
    e7ea:	4956      	ldr	r1, [pc, #344]	; (e944 <isr_rx_conn_pkt_ctrl+0xb7c>)
    e7ec:	4859      	ldr	r0, [pc, #356]	; (e954 <isr_rx_conn_pkt_ctrl+0xb8c>)
    e7ee:	e42d      	b.n	e04c <isr_rx_conn_pkt_ctrl+0x284>
		_radio.conn_upd = NULL;
    e7f0:	2600      	movs	r6, #0
		if (conn->role) {
    e7f2:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    e7f4:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    e7f8:	bfb8      	it	lt
    e7fa:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    e7fe:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    e802:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    e806:	bfb8      	it	lt
    e808:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    e80a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    e80e:	0717      	lsls	r7, r2, #28
    e810:	f57f abb0 	bpl.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
	cp->status = rej_ext_ind->error_code;
    e814:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e816:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    e818:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e81a:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    e81c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    e81e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    e820:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    e822:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    e824:	237d      	movs	r3, #125	; 0x7d
    e826:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    e828:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    e82a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e82e:	fb93 f3f2 	sdiv	r3, r3, r2
    e832:	8223      	strh	r3, [r4, #16]
    e834:	f7ff bbcb 	b.w	dfce <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_length.req) {
    e838:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    e83c:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    e840:	4290      	cmp	r0, r2
    e842:	d01a      	beq.n	e87a <isr_rx_conn_pkt_ctrl+0xab2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    e844:	2914      	cmp	r1, #20
    e846:	f47f ab95 	bne.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->llcp_length.ack = conn->llcp_length.req;
    e84a:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    e84e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    e852:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    e854:	f360 02c3 	bfi	r2, r0, #3, #1
    e858:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    e85c:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    e85e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    e862:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e864:	2215      	movs	r2, #21
    e866:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    e868:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    e86a:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    e86c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    e86e:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    e870:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    e872:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    e874:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    e876:	8263      	strh	r3, [r4, #18]
    e878:	e57d      	b.n	e376 <isr_rx_conn_pkt_ctrl+0x5ae>
		switch (rej_ext_ind->reject_opcode) {
    e87a:	2903      	cmp	r1, #3
    e87c:	f47f ab7a 	bne.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_rx = 0;
    e880:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    e884:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    e888:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    e88c:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    e88e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    e892:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    e896:	230d      	movs	r3, #13
    e898:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    e89a:	7b63      	ldrb	r3, [r4, #13]
    e89c:	7323      	strb	r3, [r4, #12]
    e89e:	e56a      	b.n	e376 <isr_rx_conn_pkt_ctrl+0x5ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    e8a0:	7a41      	ldrb	r1, [r0, #9]
    e8a2:	2012      	movs	r0, #18
    e8a4:	f7fb fe14 	bl	a4d0 <pdu_len_cmp>
    e8a8:	2800      	cmp	r0, #0
    e8aa:	f000 8377 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = ping_resp_send(_radio.conn_curr);
    e8ae:	4827      	ldr	r0, [pc, #156]	; (e94c <isr_rx_conn_pkt_ctrl+0xb84>)
    e8b0:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e8b4:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e8b8:	f7f8 ff29 	bl	770e <mem_acquire>
	if (!node_tx) {
    e8bc:	4601      	mov	r1, r0
    e8be:	2800      	cmp	r0, #0
    e8c0:	f43f ac95 	beq.w	e1ee <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e8c4:	7903      	ldrb	r3, [r0, #4]
    e8c6:	f043 0303 	orr.w	r3, r3, #3
    e8ca:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    e8cc:	2301      	movs	r3, #1
    e8ce:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    e8d0:	2313      	movs	r3, #19
    e8d2:	e4c7      	b.n	e264 <isr_rx_conn_pkt_ctrl+0x49c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    e8d4:	7a41      	ldrb	r1, [r0, #9]
    e8d6:	2013      	movs	r0, #19
    e8d8:	f7fb fdfa 	bl	a4d0 <pdu_len_cmp>
    e8dc:	2800      	cmp	r0, #0
    e8de:	f000 835d 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->procedure_expire = 0;
    e8e2:	4b1a      	ldr	r3, [pc, #104]	; (e94c <isr_rx_conn_pkt_ctrl+0xb84>)
    e8e4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    e8e8:	e468      	b.n	e1bc <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    e8ea:	7a41      	ldrb	r1, [r0, #9]
    e8ec:	2007      	movs	r0, #7
    e8ee:	f7fb fdef 	bl	a4d0 <pdu_len_cmp>
    e8f2:	2800      	cmp	r0, #0
    e8f4:	f000 8352 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    e8f8:	4a14      	ldr	r2, [pc, #80]	; (e94c <isr_rx_conn_pkt_ctrl+0xb84>)
    e8fa:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    e8fe:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    e902:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    e906:	42b1      	cmp	r1, r6
    e908:	4611      	mov	r1, r2
    e90a:	d077      	beq.n	e9fc <isr_rx_conn_pkt_ctrl+0xc34>
			conn->llcp_conn_param.disabled = 1;
    e90c:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    e910:	f040 0010 	orr.w	r0, r0, #16
    e914:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    e918:	f993 001d 	ldrsb.w	r0, [r3, #29]
    e91c:	2800      	cmp	r0, #0
    e91e:	db47      	blt.n	e9b0 <isr_rx_conn_pkt_ctrl+0xbe8>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e920:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    e924:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    e928:	4294      	cmp	r4, r2
    e92a:	d015      	beq.n	e958 <isr_rx_conn_pkt_ctrl+0xb90>
    e92c:	4b02      	ldr	r3, [pc, #8]	; (e938 <isr_rx_conn_pkt_ctrl+0xb70>)
    e92e:	9301      	str	r3, [sp, #4]
    e930:	9300      	str	r3, [sp, #0]
    e932:	4b03      	ldr	r3, [pc, #12]	; (e940 <isr_rx_conn_pkt_ctrl+0xb78>)
    e934:	f7ff ba8e 	b.w	de54 <isr_rx_conn_pkt_ctrl+0x8c>
    e938:	000153a9 	.word	0x000153a9
    e93c:	00016765 	.word	0x00016765
    e940:	0001809c 	.word	0x0001809c
    e944:	000167b4 	.word	0x000167b4
    e948:	000166d9 	.word	0x000166d9
    e94c:	200008c8 	.word	0x200008c8
    e950:	00018061 	.word	0x00018061
    e954:	00018944 	.word	0x00018944
				conn->llcp_conn_param.state =
    e958:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    e95c:	2105      	movs	r1, #5
    e95e:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    e962:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    e966:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    e96a:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    e96e:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    e972:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    e976:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e97a:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    e97e:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    e982:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    e984:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e988:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    e98c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    e990:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    e992:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    e996:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    e998:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    e99c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    e9a0:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    e9a4:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    e9a8:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    e9ac:	f7ff bad2 	b.w	df54 <isr_rx_conn_pkt_ctrl+0x18c>
			LL_ASSERT(_radio.conn_upd == conn);
    e9b0:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    e9b4:	4293      	cmp	r3, r2
    e9b6:	d004      	beq.n	e9c2 <isr_rx_conn_pkt_ctrl+0xbfa>
    e9b8:	4bc9      	ldr	r3, [pc, #804]	; (ece0 <isr_rx_conn_pkt_ctrl+0xf18>)
    e9ba:	9301      	str	r3, [sp, #4]
    e9bc:	9300      	str	r3, [sp, #0]
    e9be:	4bc9      	ldr	r3, [pc, #804]	; (ece4 <isr_rx_conn_pkt_ctrl+0xf1c>)
    e9c0:	e712      	b.n	e7e8 <isr_rx_conn_pkt_ctrl+0xa20>
			_radio.conn_upd = NULL;
    e9c2:	2200      	movs	r2, #0
    e9c4:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    e9c8:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e9cc:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    e9d0:	0716      	lsls	r6, r2, #28
    e9d2:	f57f aacf 	bpl.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e9d6:	2208      	movs	r2, #8
    e9d8:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e9da:	221a      	movs	r2, #26
    e9dc:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    e9de:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    e9e0:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    e9e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    e9e4:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    e9e6:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    e9e8:	237d      	movs	r3, #125	; 0x7d
    e9ea:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    e9ec:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    e9ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e9f2:	fb93 f3f2 	sdiv	r3, r3, r2
    e9f6:	8223      	strh	r3, [r4, #16]
    e9f8:	f7ff bb73 	b.w	e0e2 <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_length.req !=
    e9fc:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    ea00:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    ea04:	4290      	cmp	r0, r2
    ea06:	d009      	beq.n	ea1c <isr_rx_conn_pkt_ctrl+0xc54>
			_radio.conn_curr->llcp_length.ack =
    ea08:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    ea0c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    ea10:	f36f 02c3 	bfc	r2, #3, #1
    ea14:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    ea18:	f7ff bb63 	b.w	e0e2 <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_phy.req !=
    ea1c:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    ea20:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    ea24:	4290      	cmp	r0, r2
    ea26:	d01b      	beq.n	ea60 <isr_rx_conn_pkt_ctrl+0xc98>
			_radio.conn_curr->llcp_phy.ack =
    ea28:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    ea2c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    ea30:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    ea34:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    ea38:	f362 0002 	bfi	r0, r2, #0, #3
    ea3c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    ea40:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    ea44:	0780      	lsls	r0, r0, #30
    ea46:	d50f      	bpl.n	ea68 <isr_rx_conn_pkt_ctrl+0xca0>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ea48:	200c      	movs	r0, #12
    ea4a:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    ea4c:	2000      	movs	r0, #0
    ea4e:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    ea50:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    ea52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    ea56:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ea5a:	7363      	strb	r3, [r4, #13]
    ea5c:	f7ff bb41 	b.w	e0e2 <isr_rx_conn_pkt_ctrl+0x31a>
			switch (llctrl->unknown_rsp.type) {
    ea60:	7b23      	ldrb	r3, [r4, #12]
    ea62:	2b12      	cmp	r3, #18
    ea64:	f47f ab3d 	bne.w	e0e2 <isr_rx_conn_pkt_ctrl+0x31a>
		_radio.conn_curr->procedure_expire = 0;
    ea68:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    ea6c:	f7ff bba6 	b.w	e1bc <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    ea70:	7a41      	ldrb	r1, [r0, #9]
    ea72:	2014      	movs	r0, #20
    ea74:	f7fb fd2c 	bl	a4d0 <pdu_len_cmp>
    ea78:	2800      	cmp	r0, #0
    ea7a:	f000 828f 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    ea7e:	2f14      	cmp	r7, #20
    ea80:	d127      	bne.n	ead2 <isr_rx_conn_pkt_ctrl+0xd0a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ea82:	4899      	ldr	r0, [pc, #612]	; (ece8 <isr_rx_conn_pkt_ctrl+0xf20>)
    ea84:	f7f8 fe43 	bl	770e <mem_acquire>
		if (!node_tx) {
    ea88:	4606      	mov	r6, r0
    ea8a:	2800      	cmp	r0, #0
    ea8c:	f43f abaf 	beq.w	e1ee <isr_rx_conn_pkt_ctrl+0x426>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    ea90:	4f96      	ldr	r7, [pc, #600]	; (ecec <isr_rx_conn_pkt_ctrl+0xf24>)
    ea92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    ea96:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    ea9a:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    ea9e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    eaa0:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    eaa2:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    eaa4:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    eaa8:	45e0      	cmp	r8, ip
    eaaa:	46b9      	mov	r9, r7
    eaac:	f894 800b 	ldrb.w	r8, [r4, #11]
    eab0:	d111      	bne.n	ead6 <isr_rx_conn_pkt_ctrl+0xd0e>
	      _radio.conn_curr->llcp_length.ack) &&
    eab2:	f1b8 0f14 	cmp.w	r8, #20
    eab6:	d01a      	beq.n	eaee <isr_rx_conn_pkt_ctrl+0xd26>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    eab8:	f1b8 0f15 	cmp.w	r8, #21
    eabc:	f000 8292 	beq.w	efe4 <isr_rx_conn_pkt_ctrl+0x121c>
    eac0:	4b87      	ldr	r3, [pc, #540]	; (ece0 <isr_rx_conn_pkt_ctrl+0xf18>)
    eac2:	9301      	str	r3, [sp, #4]
    eac4:	9300      	str	r3, [sp, #0]
    eac6:	4a8a      	ldr	r2, [pc, #552]	; (ecf0 <isr_rx_conn_pkt_ctrl+0xf28>)
    eac8:	4b8a      	ldr	r3, [pc, #552]	; (ecf4 <isr_rx_conn_pkt_ctrl+0xf2c>)
    eaca:	498b      	ldr	r1, [pc, #556]	; (ecf8 <isr_rx_conn_pkt_ctrl+0xf30>)
    eacc:	488b      	ldr	r0, [pc, #556]	; (ecfc <isr_rx_conn_pkt_ctrl+0xf34>)
    eace:	f7ff babd 	b.w	e04c <isr_rx_conn_pkt_ctrl+0x284>
	struct radio_pdu_node_tx *node_tx = NULL;
    ead2:	2600      	movs	r6, #0
    ead4:	e7dc      	b.n	ea90 <isr_rx_conn_pkt_ctrl+0xcc8>
		 LLCP_LENGTH_STATE_REQ) ||
    ead6:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    eada:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    eade:	2f01      	cmp	r7, #1
    eae0:	d9e7      	bls.n	eab2 <isr_rx_conn_pkt_ctrl+0xcea>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    eae2:	2f02      	cmp	r7, #2
    eae4:	d1e8      	bne.n	eab8 <isr_rx_conn_pkt_ctrl+0xcf0>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    eae6:	f1a8 0714 	sub.w	r7, r8, #20
    eaea:	2f01      	cmp	r7, #1
    eaec:	d8e4      	bhi.n	eab8 <isr_rx_conn_pkt_ctrl+0xcf0>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    eaee:	89a7      	ldrh	r7, [r4, #12]
    eaf0:	2f1a      	cmp	r7, #26
    eaf2:	d934      	bls.n	eb5e <isr_rx_conn_pkt_ctrl+0xd96>
			eff_tx_octets = min(lr->max_rx_octets,
    eaf4:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    eaf8:	4547      	cmp	r7, r8
    eafa:	bf28      	it	cs
    eafc:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    eafe:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    eb02:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    eb06:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    eb0a:	bf34      	ite	cc
    eb0c:	4693      	movcc	fp, r2
    eb0e:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    eb12:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    eb16:	d324      	bcc.n	eb62 <isr_rx_conn_pkt_ctrl+0xd9a>
			eff_tx_time = min(lr->max_rx_time,
    eb18:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    eb1c:	45d0      	cmp	r8, sl
    eb1e:	bf28      	it	cs
    eb20:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    eb22:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    eb26:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    eb2a:	bf34      	ite	cc
    eb2c:	4682      	movcc	sl, r0
    eb2e:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    eb32:	455a      	cmp	r2, fp
    eb34:	d050      	beq.n	ebd8 <isr_rx_conn_pkt_ctrl+0xe10>
			free_count_rx = packet_rx_acquired_count_get() +
    eb36:	f7fb fd13 	bl	a560 <packet_rx_acquired_count_get>
    eb3a:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    eb3c:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    eb40:	f7f8 fe14 	bl	776c <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    eb44:	4420      	add	r0, r4
    eb46:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    eb48:	28ff      	cmp	r0, #255	; 0xff
    eb4a:	d90c      	bls.n	eb66 <isr_rx_conn_pkt_ctrl+0xd9e>
    eb4c:	4b64      	ldr	r3, [pc, #400]	; (ece0 <isr_rx_conn_pkt_ctrl+0xf18>)
    eb4e:	9301      	str	r3, [sp, #4]
    eb50:	9300      	str	r3, [sp, #0]
    eb52:	4a67      	ldr	r2, [pc, #412]	; (ecf0 <isr_rx_conn_pkt_ctrl+0xf28>)
    eb54:	4b67      	ldr	r3, [pc, #412]	; (ecf4 <isr_rx_conn_pkt_ctrl+0xf2c>)
    eb56:	4968      	ldr	r1, [pc, #416]	; (ecf8 <isr_rx_conn_pkt_ctrl+0xf30>)
    eb58:	4869      	ldr	r0, [pc, #420]	; (ed00 <isr_rx_conn_pkt_ctrl+0xf38>)
    eb5a:	f7ff ba77 	b.w	e04c <isr_rx_conn_pkt_ctrl+0x284>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    eb5e:	460f      	mov	r7, r1
    eb60:	e7cd      	b.n	eafe <isr_rx_conn_pkt_ctrl+0xd36>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    eb62:	46f0      	mov	r8, lr
    eb64:	e7dd      	b.n	eb22 <isr_rx_conn_pkt_ctrl+0xd5a>
			if (_radio.packet_rx_data_count == free_count_rx) {
    eb66:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    eb6a:	4283      	cmp	r3, r0
    eb6c:	f040 8231 	bne.w	efd2 <isr_rx_conn_pkt_ctrl+0x120a>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    eb70:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    eb74:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    eb78:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    eb7a:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    eb7c:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    eb80:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    eb84:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    eb88:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    eb8c:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    eb90:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    eb94:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    eb98:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    eb9c:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    eba0:	2303      	movs	r3, #3
    eba2:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    eba6:	2e00      	cmp	r6, #0
    eba8:	f43f a9e4 	beq.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ebac:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    ebae:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    ebb2:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ebb6:	f043 0303 	orr.w	r3, r3, #3
    ebba:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    ebbc:	2309      	movs	r3, #9
    ebbe:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    ebc0:	2315      	movs	r3, #21
    ebc2:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    ebc4:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    ebc6:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    ebca:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    ebce:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    ebd0:	f7fd fce2 	bl	c598 <ctrl_tx_enqueue>
    ebd4:	f7ff b9ce 	b.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_tx = 0;
    ebd8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    ebdc:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    ebe0:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    ebe4:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    ebe8:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    ebea:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    ebee:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    ebf2:	d103      	bne.n	ebfc <isr_rx_conn_pkt_ctrl+0xe34>
    ebf4:	45c6      	cmp	lr, r8
    ebf6:	d101      	bne.n	ebfc <isr_rx_conn_pkt_ctrl+0xe34>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    ebf8:	4550      	cmp	r0, sl
    ebfa:	d0d4      	beq.n	eba6 <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    ebfc:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    ebfe:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    ec02:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    ec06:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    ec08:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    ec0c:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    ec0e:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    ec12:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    ec16:	702b      	strb	r3, [r5, #0]
    ec18:	e7c5      	b.n	eba6 <isr_rx_conn_pkt_ctrl+0xdde>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    ec1a:	7a41      	ldrb	r1, [r0, #9]
    ec1c:	2016      	movs	r0, #22
    ec1e:	f7fb fc57 	bl	a4d0 <pdu_len_cmp>
    ec22:	2800      	cmp	r0, #0
    ec24:	f000 81ba 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_MASTER) {
    ec28:	4830      	ldr	r0, [pc, #192]	; (ecec <isr_rx_conn_pkt_ctrl+0xf24>)
    ec2a:	7cc3      	ldrb	r3, [r0, #19]
    ec2c:	2b04      	cmp	r3, #4
    ec2e:	d169      	bne.n	ed04 <isr_rx_conn_pkt_ctrl+0xf3c>
			if ((_radio.conn_curr->llcp_phy.ack !=
    ec30:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    ec34:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    ec38:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    ec3c:	428b      	cmp	r3, r1
    ec3e:	d00a      	beq.n	ec56 <isr_rx_conn_pkt_ctrl+0xe8e>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    ec40:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    ec44:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    ec48:	3a01      	subs	r2, #1
    ec4a:	2a02      	cmp	r2, #2
    ec4c:	d803      	bhi.n	ec56 <isr_rx_conn_pkt_ctrl+0xe8e>
				nack = reject_ext_ind_send(_radio.conn_curr,
    ec4e:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    ec50:	2116      	movs	r1, #22
    ec52:	f7ff bba5 	b.w	e3a0 <isr_rx_conn_pkt_ctrl+0x5d8>
			} else if (((_radio.conn_curr->llcp_req !=
    ec56:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    ec5a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    ec5e:	4295      	cmp	r5, r2
    ec60:	d003      	beq.n	ec6a <isr_rx_conn_pkt_ctrl+0xea2>
				     _radio.conn_curr->llcp_ack) &&
    ec62:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    ec66:	2a03      	cmp	r2, #3
    ec68:	d105      	bne.n	ec76 <isr_rx_conn_pkt_ctrl+0xeae>
				     LLCP_ENCRYPTION)) ||
    ec6a:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    ec6e:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    ec72:	4295      	cmp	r5, r2
    ec74:	d001      	beq.n	ec7a <isr_rx_conn_pkt_ctrl+0xeb2>
				nack = reject_ext_ind_send(_radio.conn_curr,
    ec76:	222a      	movs	r2, #42	; 0x2a
    ec78:	e7ea      	b.n	ec50 <isr_rx_conn_pkt_ctrl+0xe88>
				_radio.conn_curr->llcp_phy.state =
    ec7a:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    ec7e:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    ec80:	f042 0203 	orr.w	r2, r2, #3
    ec84:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    ec88:	d116      	bne.n	ecb8 <isr_rx_conn_pkt_ctrl+0xef0>
					_radio.conn_curr->llcp_phy.ack--;
    ec8a:	3b01      	subs	r3, #1
    ec8c:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    ec90:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    ec94:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    ec98:	f36f 0341 	bfc	r3, #1, #1
    ec9c:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    eca0:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    eca4:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    eca8:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    ecac:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ecb0:	f362 1347 	bfi	r3, r2, #5, #3
    ecb4:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    ecb8:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    ecbc:	7b62      	ldrb	r2, [r4, #13]
    ecbe:	f3c3 0182 	ubfx	r1, r3, #2, #3
    ecc2:	400a      	ands	r2, r1
    ecc4:	f362 0384 	bfi	r3, r2, #2, #3
    ecc8:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    eccc:	7b22      	ldrb	r2, [r4, #12]
    ecce:	b2db      	uxtb	r3, r3
    ecd0:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    ecd4:	f362 1347 	bfi	r3, r2, #5, #3
    ecd8:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    ecdc:	f7ff b94a 	b.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
    ece0:	000153a9 	.word	0x000153a9
    ece4:	0001809c 	.word	0x0001809c
    ece8:	20000a24 	.word	0x20000a24
    ecec:	200008c8 	.word	0x200008c8
    ecf0:	00016765 	.word	0x00016765
    ecf4:	00018083 	.word	0x00018083
    ecf8:	000167b4 	.word	0x000167b4
    ecfc:	0001897d 	.word	0x0001897d
    ed00:	000184f5 	.word	0x000184f5
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    ed04:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ed08:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    ed0c:	f7f8 fcff 	bl	770e <mem_acquire>
	if (!node_tx) {
    ed10:	4601      	mov	r1, r0
    ed12:	2800      	cmp	r0, #0
    ed14:	f43f aa6b 	beq.w	e1ee <isr_rx_conn_pkt_ctrl+0x426>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    ed18:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    ed1c:	2202      	movs	r2, #2
    ed1e:	f362 0301 	bfi	r3, r2, #0, #2
    ed22:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    ed26:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    ed2a:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    ed2e:	4293      	cmp	r3, r2
    ed30:	d11a      	bne.n	ed68 <isr_rx_conn_pkt_ctrl+0xfa0>
		conn->llcp_phy.ack--;
    ed32:	3b01      	subs	r3, #1
    ed34:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    ed38:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    ed3c:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    ed40:	f36f 0341 	bfc	r3, #1, #1
    ed44:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    ed48:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    ed4c:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    ed50:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    ed54:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ed58:	f362 1347 	bfi	r3, r2, #5, #3
    ed5c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    ed60:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    ed64:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    ed68:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    ed6c:	7b62      	ldrb	r2, [r4, #13]
    ed6e:	f3c3 0082 	ubfx	r0, r3, #2, #3
    ed72:	4002      	ands	r2, r0
    ed74:	f362 0384 	bfi	r3, r2, #2, #3
    ed78:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    ed7c:	7b22      	ldrb	r2, [r4, #12]
    ed7e:	b2db      	uxtb	r3, r3
    ed80:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    ed84:	f362 1347 	bfi	r3, r2, #5, #3
    ed88:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ed8c:	790b      	ldrb	r3, [r1, #4]
    ed8e:	f043 0303 	orr.w	r3, r3, #3
    ed92:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    ed94:	2303      	movs	r3, #3
    ed96:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    ed98:	2317      	movs	r3, #23
    ed9a:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    ed9c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    eda0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    eda4:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    eda6:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    edaa:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    edae:	724b      	strb	r3, [r1, #9]
    edb0:	f7ff ba2f 	b.w	e212 <isr_rx_conn_pkt_ctrl+0x44a>
		if (_radio.conn_curr->role ||
    edb4:	4e90      	ldr	r6, [pc, #576]	; (eff8 <isr_rx_conn_pkt_ctrl+0x1230>)
    edb6:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    edba:	f995 301d 	ldrsb.w	r3, [r5, #29]
    edbe:	2b00      	cmp	r3, #0
    edc0:	f2c0 80ec 	blt.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    edc4:	7a41      	ldrb	r1, [r0, #9]
    edc6:	2017      	movs	r0, #23
    edc8:	f7fb fb82 	bl	a4d0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    edcc:	2800      	cmp	r0, #0
    edce:	f000 80e5 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		if ((_radio.role == ROLE_MASTER) &&
    edd2:	7cf3      	ldrb	r3, [r6, #19]
    edd4:	2b04      	cmp	r3, #4
    edd6:	f47f a8cd 	bne.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
    edda:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    edde:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    ede2:	429a      	cmp	r2, r3
    ede4:	f43f a8c6 	beq.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_phy.state ==
    ede8:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    edec:	f003 0203 	and.w	r2, r3, #3
    edf0:	2a02      	cmp	r2, #2
    edf2:	f47f a8bf 	bne.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    edf6:	f043 0303 	orr.w	r3, r3, #3
    edfa:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    edfe:	7b62      	ldrb	r2, [r4, #13]
    ee00:	f3c3 0182 	ubfx	r1, r3, #2, #3
    ee04:	400a      	ands	r2, r1
    ee06:	f362 0384 	bfi	r3, r2, #2, #3
    ee0a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    ee0e:	7b22      	ldrb	r2, [r4, #12]
    ee10:	b2db      	uxtb	r3, r3
    ee12:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    ee16:	f362 1347 	bfi	r3, r2, #5, #3
    ee1a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    ee1e:	f7ff b85c 	b.w	deda <isr_rx_conn_pkt_ctrl+0x112>
		if (!_radio.conn_curr->role ||
    ee22:	4b75      	ldr	r3, [pc, #468]	; (eff8 <isr_rx_conn_pkt_ctrl+0x1230>)
    ee24:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    ee28:	f996 301d 	ldrsb.w	r3, [r6, #29]
    ee2c:	2b00      	cmp	r3, #0
    ee2e:	f280 80b5 	bge.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    ee32:	7a41      	ldrb	r1, [r0, #9]
    ee34:	2018      	movs	r0, #24
    ee36:	f7fb fb4b 	bl	a4d0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    ee3a:	2800      	cmp	r0, #0
    ee3c:	f000 80ae 	beq.w	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    ee40:	7b27      	ldrb	r7, [r4, #12]
    ee42:	7b62      	ldrb	r2, [r4, #13]
    ee44:	ea47 0002 	orr.w	r0, r7, r2
    ee48:	f010 0007 	ands.w	r0, r0, #7
    ee4c:	d125      	bne.n	ee9a <isr_rx_conn_pkt_ctrl+0x10d2>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    ee4e:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    ee52:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    ee56:	4293      	cmp	r3, r2
    ee58:	f43f a88c 	beq.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    ee5c:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    ee60:	f003 0303 	and.w	r3, r3, #3
    ee64:	2b02      	cmp	r3, #2
    ee66:	f47f a885 	bne.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!conn->llcp_phy.cmd) {
    ee6a:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    ee6e:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    ee72:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    ee74:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    ee78:	f57f a87c 	bpl.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ee7c:	230c      	movs	r3, #12
		upd->status = 0;
    ee7e:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ee80:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    ee82:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    ee86:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ee8a:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    ee8c:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    ee90:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ee94:	7363      	strb	r3, [r4, #13]
    ee96:	f7ff ba6e 	b.w	e376 <isr_rx_conn_pkt_ctrl+0x5ae>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    ee9a:	89e0      	ldrh	r0, [r4, #14]
    ee9c:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    ee9e:	1ac3      	subs	r3, r0, r3
    eea0:	041b      	lsls	r3, r3, #16
    eea2:	f100 80a4 	bmi.w	efee <isr_rx_conn_pkt_ctrl+0x1226>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    eea6:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    eeaa:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    eeae:	428b      	cmp	r3, r1
    eeb0:	d005      	beq.n	eebe <isr_rx_conn_pkt_ctrl+0x10f6>
    eeb2:	4b52      	ldr	r3, [pc, #328]	; (effc <isr_rx_conn_pkt_ctrl+0x1234>)
    eeb4:	9301      	str	r3, [sp, #4]
    eeb6:	9300      	str	r3, [sp, #0]
    eeb8:	4b51      	ldr	r3, [pc, #324]	; (f000 <isr_rx_conn_pkt_ctrl+0x1238>)
    eeba:	f7fe bfcb 	b.w	de54 <isr_rx_conn_pkt_ctrl+0x8c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    eebe:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    eec2:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    eec6:	42a3      	cmp	r3, r4
    eec8:	d014      	beq.n	eef4 <isr_rx_conn_pkt_ctrl+0x112c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    eeca:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    eece:	f003 0303 	and.w	r3, r3, #3
    eed2:	2b02      	cmp	r3, #2
    eed4:	d10e      	bne.n	eef4 <isr_rx_conn_pkt_ctrl+0x112c>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    eed6:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    eeda:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    eede:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    eee2:	f3c3 0340 	ubfx	r3, r3, #1, #1
    eee6:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    eeea:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    eeec:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    eef0:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    eef4:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    eef8:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    eefc:	f002 0207 	and.w	r2, r2, #7
    ef00:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    ef04:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    ef08:	f36f 0300 	bfc	r3, #0, #1
    ef0c:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    ef10:	2008      	movs	r0, #8
	conn->llcp_ack--;
    ef12:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    ef14:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    ef18:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    ef1c:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    ef20:	2b00      	cmp	r3, #0
    ef22:	f43f a827 	beq.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    ef26:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    ef2a:	f362 0302 	bfi	r3, r2, #0, #3
    ef2e:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    ef32:	f7ff b81f 	b.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    ef36:	4e30      	ldr	r6, [pc, #192]	; (eff8 <isr_rx_conn_pkt_ctrl+0x1230>)
    ef38:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    ef3c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    ef40:	2b00      	cmp	r3, #0
    ef42:	db2b      	blt.n	ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    ef44:	7a41      	ldrb	r1, [r0, #9]
    ef46:	2019      	movs	r0, #25
    ef48:	f7fb fac2 	bl	a4d0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    ef4c:	b330      	cbz	r0, ef9c <isr_rx_conn_pkt_ctrl+0x11d4>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    ef4e:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    ef52:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    ef56:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    ef5a:	7b22      	ldrb	r2, [r4, #12]
    ef5c:	f003 0307 	and.w	r3, r3, #7
    ef60:	4213      	tst	r3, r2
    ef62:	f43f a807 	beq.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
			if (conn->llcp_req != conn->llcp_ack) {
    ef66:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    ef6a:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    ef6e:	429a      	cmp	r2, r3
    ef70:	f47f a800 	bne.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
			memcpy(&conn->llcp.chan_map.chm[0],
    ef74:	2205      	movs	r2, #5
    ef76:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    ef7a:	f105 0079 	add.w	r0, r5, #121	; 0x79
    ef7e:	f7f2 fe3d 	bl	1bfc <memcpy>
			conn->llcp.chan_map.initiate = 1;
    ef82:	2301      	movs	r3, #1
    ef84:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    ef88:	2302      	movs	r3, #2
    ef8a:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    ef8e:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    ef92:	3b01      	subs	r3, #1
    ef94:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    ef98:	f7fe bfec 	b.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
		nack = unknown_rsp_send(_radio.conn_curr,
    ef9c:	4816      	ldr	r0, [pc, #88]	; (eff8 <isr_rx_conn_pkt_ctrl+0x1230>)
    ef9e:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    efa2:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    efa6:	f7f8 fbb2 	bl	770e <mem_acquire>
	if (!node_tx) {
    efaa:	4601      	mov	r1, r0
    efac:	2800      	cmp	r0, #0
    efae:	f43f a91e 	beq.w	e1ee <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    efb2:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    efb4:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    efb6:	f043 0303 	orr.w	r3, r3, #3
    efba:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    efbc:	2302      	movs	r3, #2
    efbe:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    efc0:	2307      	movs	r3, #7
    efc2:	71c3      	strb	r3, [r0, #7]
    efc4:	f7ff b94f 	b.w	e266 <isr_rx_conn_pkt_ctrl+0x49e>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    efc8:	2328      	movs	r3, #40	; 0x28
    efca:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    efce:	f7fe bfd1 	b.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
	if (node_tx) {
    efd2:	2e00      	cmp	r6, #0
    efd4:	f43f a90b 	beq.w	e1ee <isr_rx_conn_pkt_ctrl+0x426>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    efd8:	490a      	ldr	r1, [pc, #40]	; (f004 <isr_rx_conn_pkt_ctrl+0x123c>)
    efda:	4630      	mov	r0, r6
    efdc:	f7f8 fbb1 	bl	7742 <mem_release>
    efe0:	f7ff b905 	b.w	e1ee <isr_rx_conn_pkt_ctrl+0x426>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    efe4:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    efe6:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    efe8:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    efea:	4693      	mov	fp, r2
    efec:	e5db      	b.n	eba6 <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    efee:	2328      	movs	r3, #40	; 0x28
    eff0:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    eff4:	f7fe bfbe 	b.w	df74 <isr_rx_conn_pkt_ctrl+0x1ac>
    eff8:	200008c8 	.word	0x200008c8
    effc:	000153a9 	.word	0x000153a9
    f000:	00018406 	.word	0x00018406
    f004:	20000a24 	.word	0x20000a24

0000f008 <isr>:
{
    f008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f00c:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    f00e:	f003 feff 	bl	12e10 <radio_is_done>
    f012:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    f014:	b366      	cbz	r6, f070 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    f016:	f003 ff1b 	bl	12e50 <radio_crc_is_valid>
    f01a:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    f01c:	f003 ff9c 	bl	12f58 <radio_filter_has_match>
    f020:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    f024:	f003 ffa2 	bl	12f6c <radio_filter_match_get>
    f028:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    f02c:	f004 f986 	bl	1333c <radio_ar_has_match>
    f030:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    f034:	f004 f970 	bl	13318 <radio_ar_match_get>
    f038:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    f03c:	f003 ff56 	bl	12eec <radio_rssi_is_ready>
    f040:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    f042:	4cb4      	ldr	r4, [pc, #720]	; (f314 <isr+0x30c>)
	radio_status_reset();
    f044:	f003 fece 	bl	12de4 <radio_status_reset>
	radio_tmr_status_reset();
    f048:	f003 ffa2 	bl	12f90 <radio_tmr_status_reset>
	radio_filter_status_reset();
    f04c:	f003 ff7c 	bl	12f48 <radio_filter_status_reset>
	radio_ar_status_reset();
    f050:	f004 f968 	bl	13324 <radio_ar_status_reset>
	radio_rssi_status_reset();
    f054:	f003 ff42 	bl	12edc <radio_rssi_status_reset>
	switch (_radio.state) {
    f058:	7d23      	ldrb	r3, [r4, #20]
    f05a:	2b05      	cmp	r3, #5
    f05c:	f201 846e 	bhi.w	1093c <__kernel_ram_size+0x93c>
    f060:	e8df f013 	tbh	[pc, r3, lsl #1]
    f064:	00cd007c 	.word	0x00cd007c
    f068:	0a1c000e 	.word	0x0a1c000e
    f06c:	0a1c0a1c 	.word	0x0a1c0a1c
		devmatch_id = irkmatch_id = 0xFF;
    f070:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    f074:	4635      	mov	r5, r6
    f076:	46b2      	mov	sl, r6
    f078:	46b1      	mov	r9, r6
    f07a:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    f07c:	46d8      	mov	r8, fp
    f07e:	e7e0      	b.n	f042 <isr+0x3a>
	_radio.state = STATE_RX;
    f080:	2301      	movs	r3, #1
    f082:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    f084:	f004 f886 	bl	13194 <radio_tmr_tifs_base_get>
    f088:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    f08a:	2096      	movs	r0, #150	; 0x96
    f08c:	f003 ff8e 	bl	12fac <radio_tmr_tifs_set>
	switch (_radio.role) {
    f090:	7ce3      	ldrb	r3, [r4, #19]
    f092:	3b01      	subs	r3, #1
    f094:	2b03      	cmp	r3, #3
    f096:	f200 80aa 	bhi.w	f1ee <isr+0x1e6>
    f09a:	e8df f003 	tbb	[pc, r3]
    f09e:	3202      	.short	0x3202
    f0a0:	6262      	.short	0x6262
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f0a2:	2300      	movs	r3, #0
    f0a4:	461a      	mov	r2, r3
    f0a6:	4619      	mov	r1, r3
    f0a8:	4618      	mov	r0, r3
    f0aa:	f003 feef 	bl	12e8c <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    f0ae:	f003 fedd 	bl	12e6c <radio_pkt_scratch_get>
    f0b2:	f003 fe5f 	bl	12d74 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f0b6:	f003 fea1 	bl	12dfc <radio_is_ready>
    f0ba:	b138      	cbz	r0, f0cc <isr+0xc4>
		LL_ASSERT(!radio_is_ready());
    f0bc:	4b96      	ldr	r3, [pc, #600]	; (f318 <isr+0x310>)
    f0be:	9301      	str	r3, [sp, #4]
    f0c0:	9300      	str	r3, [sp, #0]
    f0c2:	4b96      	ldr	r3, [pc, #600]	; (f31c <isr+0x314>)
	LL_ASSERT(!radio_is_ready());
    f0c4:	4a96      	ldr	r2, [pc, #600]	; (f320 <isr+0x318>)
    f0c6:	4997      	ldr	r1, [pc, #604]	; (f324 <isr+0x31c>)
    f0c8:	4897      	ldr	r0, [pc, #604]	; (f328 <isr+0x320>)
    f0ca:	e34b      	b.n	f764 <isr+0x75c>
		if (ctrl_rl_enabled()) {
    f0cc:	f003 f95e 	bl	1238c <ctrl_rl_enabled>
    f0d0:	b138      	cbz	r0, f0e2 <isr+0xda>
			u8_t count, *irks = ctrl_irks_get(&count);
    f0d2:	a810      	add	r0, sp, #64	; 0x40
    f0d4:	f002 feaa 	bl	11e2c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f0d8:	4601      	mov	r1, r0
    f0da:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f0de:	f004 f8e9 	bl	132b4 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    f0e2:	2100      	movs	r1, #0
    f0e4:	4608      	mov	r0, r1
    f0e6:	f003 fe5a 	bl	12d9e <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    f0ea:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    f0ec:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    f0ee:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    f0f0:	4608      	mov	r0, r1
    f0f2:	f003 fe50 	bl	12d96 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f0f6:	1a28      	subs	r0, r5, r0
    f0f8:	f003 ffe2 	bl	130c0 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    f0fc:	f004 f832 	bl	13164 <radio_tmr_end_capture>
    f100:	e02c      	b.n	f15c <isr+0x154>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f102:	2300      	movs	r3, #0
    f104:	461a      	mov	r2, r3
    f106:	4619      	mov	r1, r3
    f108:	4618      	mov	r0, r3
    f10a:	f003 febf 	bl	12e8c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    f10e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f112:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    f116:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    f11a:	3008      	adds	r0, #8
    f11c:	f003 fe2a 	bl	12d74 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f120:	f003 fe6c 	bl	12dfc <radio_is_ready>
    f124:	2800      	cmp	r0, #0
    f126:	d1c9      	bne.n	f0bc <isr+0xb4>
		if (ctrl_rl_enabled()) {
    f128:	f003 f930 	bl	1238c <ctrl_rl_enabled>
    f12c:	b138      	cbz	r0, f13e <isr+0x136>
			u8_t count, *irks = ctrl_irks_get(&count);
    f12e:	a810      	add	r0, sp, #64	; 0x40
    f130:	f002 fe7c 	bl	11e2c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f134:	4601      	mov	r1, r0
    f136:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f13a:	f004 f8bb 	bl	132b4 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    f13e:	2100      	movs	r1, #0
    f140:	4608      	mov	r0, r1
    f142:	f003 fe2c 	bl	12d9e <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    f146:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    f148:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    f14a:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    f14c:	4608      	mov	r0, r1
    f14e:	f003 fe22 	bl	12d96 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f152:	1a28      	subs	r0, r5, r0
    f154:	f003 ffb4 	bl	130c0 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    f158:	f003 feb0 	bl	12ebc <radio_rssi_measure>
}
    f15c:	b013      	add	sp, #76	; 0x4c
    f15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f162:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    f166:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f16a:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f16e:	2100      	movs	r1, #0
    f170:	09d3      	lsrs	r3, r2, #7
    f172:	f000 0007 	and.w	r0, r0, #7
    f176:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f17a:	f003 fe87 	bl	12e8c <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    f17e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f182:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    f186:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    f18a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    f18e:	3108      	adds	r1, #8
    f190:	f7fb fd5a 	bl	ac48 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    f194:	f003 fe32 	bl	12dfc <radio_is_ready>
    f198:	2800      	cmp	r0, #0
    f19a:	d18f      	bne.n	f0bc <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    f19c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f1a0:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f1a4:	2101      	movs	r1, #1
    f1a6:	f000 0007 	and.w	r0, r0, #7
    f1aa:	f003 fdf8 	bl	12d9e <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f1ae:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    f1b2:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    f1b6:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    f1ba:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    f1bc:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    f1be:	4405      	add	r5, r0
	switch (phy) {
    f1c0:	d013      	beq.n	f1ea <isr+0x1e2>
		return 40;
    f1c2:	2b04      	cmp	r3, #4
    f1c4:	bf0c      	ite	eq
    f1c6:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    f1ca:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f1cc:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    f1ce:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    f1d2:	09c1      	lsrs	r1, r0, #7
    f1d4:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    f1d8:	f003 fddd 	bl	12d96 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f1dc:	1a28      	subs	r0, r5, r0
    f1de:	f003 ff6f 	bl	130c0 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    f1e2:	2001      	movs	r0, #1
    f1e4:	f7fc fb80 	bl	b8e8 <packet_tx_enqueue>
    f1e8:	e7b8      	b.n	f15c <isr+0x154>
		return 24;
    f1ea:	2018      	movs	r0, #24
    f1ec:	e7ee      	b.n	f1cc <isr+0x1c4>
		LL_ASSERT(0);
    f1ee:	4b4a      	ldr	r3, [pc, #296]	; (f318 <isr+0x310>)
    f1f0:	9301      	str	r3, [sp, #4]
    f1f2:	9300      	str	r3, [sp, #0]
    f1f4:	4b49      	ldr	r3, [pc, #292]	; (f31c <isr+0x314>)
		LL_ASSERT(0);
    f1f6:	4a4a      	ldr	r2, [pc, #296]	; (f320 <isr+0x318>)
    f1f8:	494a      	ldr	r1, [pc, #296]	; (f324 <isr+0x31c>)
    f1fa:	484c      	ldr	r0, [pc, #304]	; (f32c <isr+0x324>)
    f1fc:	e2b2      	b.n	f764 <isr+0x75c>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    f1fe:	b926      	cbnz	r6, f20a <isr+0x202>
		_radio.state = STATE_CLOSE;
    f200:	2303      	movs	r3, #3
    f202:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f204:	f003 fddc 	bl	12dc0 <radio_disable>
    f208:	e7a8      	b.n	f15c <isr+0x154>
	switch (_radio.role) {
    f20a:	7ce3      	ldrb	r3, [r4, #19]
    f20c:	3b01      	subs	r3, #1
    f20e:	2b03      	cmp	r3, #3
    f210:	f201 813e 	bhi.w	10490 <__kernel_ram_size+0x490>
    f214:	e8df f013 	tbh	[pc, r3, lsl #1]
    f218:	02ae0004 	.word	0x02ae0004
    f21c:	05e305e3 	.word	0x05e305e3
		if (crc_ok) {
    f220:	2f00      	cmp	r7, #0
    f222:	d0ed      	beq.n	f200 <isr+0x1f8>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    f224:	f1ba 0f00 	cmp.w	sl, #0
    f228:	d039      	beq.n	f29e <isr+0x296>
    f22a:	4658      	mov	r0, fp
    f22c:	f002 fe5c 	bl	11ee8 <ctrl_rl_irk_idx>
    f230:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    f234:	f003 fe1a 	bl	12e6c <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    f238:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    f23c:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    f23e:	232b      	movs	r3, #43	; 0x2b
    f240:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    f242:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    f244:	fb11 3302 	smlabb	r3, r1, r2, r3
    f248:	930a      	str	r3, [sp, #40]	; 0x28
    f24a:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    f24c:	f000 030f 	and.w	r3, r0, #15
    f250:	2b03      	cmp	r3, #3
    f252:	d10a      	bne.n	f26a <isr+0x262>
    f254:	7873      	ldrb	r3, [r6, #1]
    f256:	2b0c      	cmp	r3, #12
    f258:	d107      	bne.n	f26a <isr+0x262>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    f25a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f25e:	065f      	lsls	r7, r3, #25
    f260:	d51f      	bpl.n	f2a2 <isr+0x29a>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    f262:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    f266:	0658      	lsls	r0, r3, #25
    f268:	d449      	bmi.n	f2fe <isr+0x2f6>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    f26a:	7830      	ldrb	r0, [r6, #0]
    f26c:	f000 030f 	and.w	r3, r0, #15
    f270:	2b05      	cmp	r3, #5
    f272:	d1c5      	bne.n	f200 <isr+0x1f8>
    f274:	7873      	ldrb	r3, [r6, #1]
    f276:	2b22      	cmp	r3, #34	; 0x22
    f278:	d1c2      	bne.n	f200 <isr+0x1f8>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    f27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f27c:	5ce3      	ldrb	r3, [r4, r3]
    f27e:	f003 030f 	and.w	r3, r3, #15
    f282:	2b01      	cmp	r3, #1
    f284:	f040 814f 	bne.w	f526 <isr+0x51e>
					    ci->connect_ind.init_addr,
    f288:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    f28a:	aa10      	add	r2, sp, #64	; 0x40
    f28c:	4639      	mov	r1, r7
    f28e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f292:	f003 f81f 	bl	122d4 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    f296:	2800      	cmp	r0, #0
    f298:	d14c      	bne.n	f334 <isr+0x32c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f29a:	2000      	movs	r0, #0
    f29c:	e05a      	b.n	f354 <isr+0x34c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    f29e:	20ff      	movs	r0, #255	; 0xff
    f2a0:	e7c6      	b.n	f230 <isr+0x228>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    f2a2:	aa10      	add	r2, sp, #64	; 0x40
    f2a4:	1cb1      	adds	r1, r6, #2
    f2a6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f2aa:	f003 f813 	bl	122d4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    f2ae:	2800      	cmp	r0, #0
    f2b0:	d0d7      	beq.n	f262 <isr+0x25a>
	return (adv->tx_addr == sr->rx_addr) &&
    f2b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f2b4:	7832      	ldrb	r2, [r6, #0]
    f2b6:	5ce3      	ldrb	r3, [r4, r3]
    f2b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f2bc:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f2c0:	d1d3      	bne.n	f26a <isr+0x262>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    f2c2:	2206      	movs	r2, #6
    f2c4:	f106 0108 	add.w	r1, r6, #8
    f2c8:	1ca8      	adds	r0, r5, #2
    f2ca:	f7f2 fc82 	bl	1bd2 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    f2ce:	2800      	cmp	r0, #0
    f2d0:	d1cb      	bne.n	f26a <isr+0x262>
		_radio.state = STATE_CLOSE;
    f2d2:	2303      	movs	r3, #3
    f2d4:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    f2d6:	f003 fde3 	bl	12ea0 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    f2da:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    f2de:	2327      	movs	r3, #39	; 0x27
    f2e0:	fb03 4000 	mla	r0, r3, r0, r4
    f2e4:	307b      	adds	r0, #123	; 0x7b
    f2e6:	f003 fd4b 	bl	12d80 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    f2ea:	f003 fd87 	bl	12dfc <radio_is_ready>
    f2ee:	2800      	cmp	r0, #0
    f2f0:	f43f af34 	beq.w	f15c <isr+0x154>
    f2f4:	4b08      	ldr	r3, [pc, #32]	; (f318 <isr+0x310>)
    f2f6:	9301      	str	r3, [sp, #4]
    f2f8:	9300      	str	r3, [sp, #0]
    f2fa:	4b0d      	ldr	r3, [pc, #52]	; (f330 <isr+0x328>)
    f2fc:	e6e2      	b.n	f0c4 <isr+0xbc>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    f2fe:	f1b9 0f00 	cmp.w	r9, #0
    f302:	d1d6      	bne.n	f2b2 <isr+0x2aa>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f304:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f308:	f002 fe34 	bl	11f74 <ctrl_irk_whitelisted>
    f30c:	2800      	cmp	r0, #0
    f30e:	d1d0      	bne.n	f2b2 <isr+0x2aa>
    f310:	e7ab      	b.n	f26a <isr+0x262>
    f312:	bf00      	nop
    f314:	200008c8 	.word	0x200008c8
    f318:	000153a9 	.word	0x000153a9
    f31c:	00018010 	.word	0x00018010
    f320:	00016765 	.word	0x00016765
    f324:	000167b4 	.word	0x000167b4
    f328:	000186d6 	.word	0x000186d6
    f32c:	000166d9 	.word	0x000166d9
    f330:	00018023 	.word	0x00018023
		       isr_adv_ci_adva_check(adv, ci) &&
    f334:	4631      	mov	r1, r6
    f336:	4628      	mov	r0, r5
    f338:	f7fb ff6e 	bl	b218 <isr_adv_ci_adva_check>
					    rl_idx) &&
    f33c:	2800      	cmp	r0, #0
    f33e:	d0ac      	beq.n	f29a <isr+0x292>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    f340:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    f344:	2bff      	cmp	r3, #255	; 0xff
    f346:	f000 80db 	beq.w	f500 <isr+0x4f8>
		return rl_idx == _radio.advertiser.rl_idx;
    f34a:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    f34e:	1ac1      	subs	r1, r0, r3
    f350:	4248      	negs	r0, r1
    f352:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f354:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    f358:	2800      	cmp	r0, #0
    f35a:	f43f af51 	beq.w	f200 <isr+0x1f8>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    f35e:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f362:	b133      	cbz	r3, f372 <isr+0x36a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    f364:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    f368:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f36c:	429a      	cmp	r2, r3
    f36e:	f47f af47 	bne.w	f200 <isr+0x1f8>
    f372:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    f376:	2b00      	cmp	r3, #0
    f378:	f43f af42 	beq.w	f200 <isr+0x1f8>
			node_rx = packet_rx_reserve_get(4);
    f37c:	2004      	movs	r0, #4
    f37e:	f7fb f905 	bl	a58c <packet_rx_reserve_get>
		if (!node_rx) {
    f382:	4607      	mov	r7, r0
    f384:	2800      	cmp	r0, #0
    f386:	f43f af3b 	beq.w	f200 <isr+0x1f8>
		_radio.state = STATE_STOP;
    f38a:	f04f 0904 	mov.w	r9, #4
    f38e:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    f392:	f003 fd15 	bl	12dc0 <radio_disable>
		conn = _radio.advertiser.conn;
    f396:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f39a:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    f39e:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f3a0:	f44f 72aa 	mov.w	r2, #340	; 0x154
    f3a4:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    f3a6:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f3aa:	f7f8 f9e8 	bl	777e <mem_index_get>
		memcpy(&conn->access_addr[0],
    f3ae:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f3b2:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    f3b4:	2203      	movs	r2, #3
    f3b6:	f106 0112 	add.w	r1, r6, #18
    f3ba:	f105 0014 	add.w	r0, r5, #20
    f3be:	f7f2 fc1d 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    f3c2:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    f3c6:	464a      	mov	r2, r9
    f3c8:	f106 010e 	add.w	r1, r6, #14
    f3cc:	4650      	mov	r0, sl
    f3ce:	f7f2 fc15 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    f3d2:	2205      	movs	r2, #5
    f3d4:	f106 011e 	add.w	r1, r6, #30
    f3d8:	4640      	mov	r0, r8
    f3da:	f7f2 fc0f 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    f3de:	2105      	movs	r1, #5
    f3e0:	4640      	mov	r0, r8
    f3e2:	f7f8 fb3f 	bl	7a64 <util_ones_count_get>
		conn->data_chan_count =
    f3e6:	7f6b      	ldrb	r3, [r5, #29]
    f3e8:	f360 0305 	bfi	r3, r0, #0, #6
    f3ec:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    f3ee:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    f3f2:	f3c3 0304 	ubfx	r3, r3, #0, #5
    f3f6:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    f3f8:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    f3fa:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    f3fc:	f240 48e2 	movw	r8, #1250	; 0x4e2
    f400:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    f404:	7ef2      	ldrb	r2, [r6, #27]
    f406:	7eb3      	ldrb	r3, [r6, #26]
    f408:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    f40c:	4651      	mov	r1, sl
    f40e:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    f410:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    f412:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    f416:	f7f2 fbf1 	bl	1bfc <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    f41a:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f41c:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    f41e:	f242 7210 	movw	r2, #10000	; 0x2710
    f422:	fb02 8303 	mla	r3, r2, r3, r8
    f426:	3b01      	subs	r3, #1
    f428:	fbb3 f3f8 	udiv	r3, r3, r8
    f42c:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    f42e:	4b54      	ldr	r3, [pc, #336]	; (f580 <isr+0x578>)
    f430:	4443      	add	r3, r8
    f432:	fbb3 f3f8 	udiv	r3, r3, r8
    f436:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    f43a:	4b52      	ldr	r3, [pc, #328]	; (f584 <isr+0x57c>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f43c:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    f43e:	4443      	add	r3, r8
    f440:	fbb3 f3f8 	udiv	r3, r3, r8
    f444:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f446:	4282      	cmp	r2, r0
    f448:	4613      	mov	r3, r2
    f44a:	bfc4      	itt	gt
    f44c:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    f450:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    f452:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f456:	bfc4      	itt	gt
    f458:	18d2      	addgt	r2, r2, r3
    f45a:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    f45c:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f45e:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    f462:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    f464:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    f466:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    f468:	2300      	movs	r3, #0
    f46a:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    f46c:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    f46e:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    f472:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f474:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    f478:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    f47c:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f47e:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    f482:	464a      	mov	r2, r9
    f484:	f107 001b 	add.w	r0, r7, #27
    f488:	f7f2 fbb8 	bl	1bfc <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    f48c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f490:	f107 030e 	add.w	r3, r7, #14
    f494:	28ff      	cmp	r0, #255	; 0xff
    f496:	930b      	str	r3, [sp, #44]	; 0x2c
    f498:	f106 0a02 	add.w	sl, r6, #2
    f49c:	f107 0b14 	add.w	fp, r7, #20
    f4a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f4a2:	d05f      	beq.n	f564 <isr+0x55c>
			ll_rl_id_addr_get(rl_idx,
    f4a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f4a6:	f107 010d 	add.w	r1, r7, #13
    f4aa:	f002 fed5 	bl	12258 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    f4ae:	7b7b      	ldrb	r3, [r7, #13]
    f4b0:	3302      	adds	r3, #2
    f4b2:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    f4b4:	464a      	mov	r2, r9
    f4b6:	4651      	mov	r1, sl
    f4b8:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f4ba:	f7f2 fb9f 	bl	1bfc <memcpy>
			pdu_adv->connect_ind.interval;
    f4be:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    f4c0:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    f4c4:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    f4c6:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    f4ca:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    f4cc:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    f4d0:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    f4d4:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    f4d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    f4dc:	8c28      	ldrh	r0, [r5, #32]
    f4de:	f7fb ffaf 	bl	b440 <rx_fc_lock>
		packet_rx_enqueue();
    f4e2:	f7fb febd 	bl	b260 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    f4e6:	2003      	movs	r0, #3
    f4e8:	f7fb f850 	bl	a58c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    f4ec:	2800      	cmp	r0, #0
    f4ee:	d155      	bne.n	f59c <isr+0x594>
    f4f0:	4b25      	ldr	r3, [pc, #148]	; (f588 <isr+0x580>)
    f4f2:	9301      	str	r3, [sp, #4]
    f4f4:	9300      	str	r3, [sp, #0]
    f4f6:	4b25      	ldr	r3, [pc, #148]	; (f58c <isr+0x584>)
			LL_ASSERT(node_rx);
    f4f8:	4a25      	ldr	r2, [pc, #148]	; (f590 <isr+0x588>)
    f4fa:	4926      	ldr	r1, [pc, #152]	; (f594 <isr+0x58c>)
    f4fc:	4826      	ldr	r0, [pc, #152]	; (f598 <isr+0x590>)
    f4fe:	e131      	b.n	f764 <isr+0x75c>
	return (adv->rx_addr == ci->tx_addr) &&
    f500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f502:	5ce2      	ldrb	r2, [r4, r3]
    f504:	7833      	ldrb	r3, [r6, #0]
    f506:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f50a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f50e:	f47f aec4 	bne.w	f29a <isr+0x292>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    f512:	2206      	movs	r2, #6
    f514:	4639      	mov	r1, r7
    f516:	f105 0008 	add.w	r0, r5, #8
    f51a:	f7f2 fb5a 	bl	1bd2 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    f51e:	fab0 f080 	clz	r0, r0
    f522:	0940      	lsrs	r0, r0, #5
    f524:	e716      	b.n	f354 <isr+0x34c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    f526:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f52a:	09db      	lsrs	r3, r3, #7
    f52c:	d00d      	beq.n	f54a <isr+0x542>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    f52e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    f532:	09db      	lsrs	r3, r3, #7
    f534:	f43f aeb1 	beq.w	f29a <isr+0x292>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    f538:	f1b9 0f00 	cmp.w	r9, #0
    f53c:	d10d      	bne.n	f55a <isr+0x552>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f53e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f542:	f002 fd17 	bl	11f74 <ctrl_irk_whitelisted>
    f546:	b940      	cbnz	r0, f55a <isr+0x552>
    f548:	e6a7      	b.n	f29a <isr+0x292>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    f54a:	aa10      	add	r2, sp, #64	; 0x40
    f54c:	1cb1      	adds	r1, r6, #2
    f54e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f552:	f002 febf 	bl	122d4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    f556:	2800      	cmp	r0, #0
    f558:	d0e9      	beq.n	f52e <isr+0x526>
	       isr_adv_ci_adva_check(adv, ci);
    f55a:	4631      	mov	r1, r6
    f55c:	4628      	mov	r0, r5
    f55e:	f7fb fe5b 	bl	b218 <isr_adv_ci_adva_check>
    f562:	e6f7      	b.n	f354 <isr+0x34c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    f564:	4619      	mov	r1, r3
    f566:	464a      	mov	r2, r9
    f568:	4658      	mov	r0, fp
    f56a:	f7f2 fb73 	bl	1c54 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    f56e:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f570:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    f572:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f576:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f578:	464a      	mov	r2, r9
    f57a:	4651      	mov	r1, sl
    f57c:	e79d      	b.n	f4ba <isr+0x4b2>
    f57e:	bf00      	nop
    f580:	026259ff 	.word	0x026259ff
    f584:	01c9c37f 	.word	0x01c9c37f
    f588:	000153a9 	.word	0x000153a9
    f58c:	00018023 	.word	0x00018023
    f590:	00016765 	.word	0x00016765
    f594:	000167b4 	.word	0x000167b4
    f598:	00018b0d 	.word	0x00018b0d
			node_rx->hdr.handle = conn->handle;
    f59c:	8c2b      	ldrh	r3, [r5, #32]
    f59e:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    f5a0:	230b      	movs	r3, #11
    f5a2:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    f5a4:	7833      	ldrb	r3, [r6, #0]
    f5a6:	f013 0320 	ands.w	r3, r3, #32
    f5aa:	d00e      	beq.n	f5ca <isr+0x5c2>
					((u16_t)conn->access_addr[1] << 8) |
    f5ac:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    f5ae:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    f5b0:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    f5b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    f5b6:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    f5b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    f5bc:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    f5be:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    f5c0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    f5c4:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    f5c6:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    f5c8:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    f5ca:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    f5cc:	f7fb fe48 	bl	b260 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    f5d0:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    f5d4:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    f5d8:	497d      	ldr	r1, [pc, #500]	; (f7d0 <isr+0x7c8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    f5da:	0952      	lsrs	r2, r2, #5
    f5dc:	f362 0384 	bfi	r3, r2, #2, #3
    f5e0:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    f5e4:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    f5e8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    f5ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    f5f0:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    f5f2:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    f5f6:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    f5fa:	4a76      	ldr	r2, [pc, #472]	; (f7d4 <isr+0x7cc>)
    f5fc:	f203 233f 	addw	r3, r3, #575	; 0x23f
    f600:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    f604:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    f606:	ea4f 0358 	mov.w	r3, r8, lsr #1
    f60a:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    f60c:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    f60e:	7d73      	ldrb	r3, [r6, #21]
    f610:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    f614:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    f616:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    f61a:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    f61c:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    f61e:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    f620:	4638      	mov	r0, r7
    f622:	f003 fbba 	bl	12d9a <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    f626:	496c      	ldr	r1, [pc, #432]	; (f7d8 <isr+0x7d0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    f628:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    f62a:	f200 4052 	addw	r0, r0, #1106	; 0x452
    f62e:	a366      	add	r3, pc, #408	; (adr r3, f7c8 <isr+0x7c0>)
    f630:	e9d3 2300 	ldrd	r2, r3, [r3]
    f634:	fba0 0101 	umull	r0, r1, r0, r1
    f638:	f7f0 fdec 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f63c:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    f640:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    f642:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f644:	4293      	cmp	r3, r2
    f646:	bf38      	it	cc
    f648:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    f64a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f64e:	469a      	mov	sl, r3
		conn_interval_us -=
    f650:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    f652:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    f654:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    f656:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    f658:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    f65c:	f003 fd94 	bl	13188 <radio_tmr_end_get>
    f660:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    f662:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    f664:	4639      	mov	r1, r7
		conn_offset_us +=
    f666:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    f66a:	4638      	mov	r0, r7
    f66c:	f003 fb93 	bl	12d96 <radio_tx_chain_delay_get>
    f670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f672:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    f676:	4499      	add	r9, r3
    f678:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    f67c:	eba9 030b 	sub.w	r3, r9, fp
    f680:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f682:	f240 4383 	movw	r3, #1155	; 0x483
    f686:	9300      	str	r3, [sp, #0]
    f688:	2205      	movs	r2, #5
    f68a:	4b54      	ldr	r3, [pc, #336]	; (f7dc <isr+0x7d4>)
    f68c:	f8df b148 	ldr.w	fp, [pc, #328]	; f7d8 <isr+0x7d0>
    f690:	4639      	mov	r1, r7
    f692:	4638      	mov	r0, r7
    f694:	f7f8 ff62 	bl	855c <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    f698:	f240 4184 	movw	r1, #1156	; 0x484
    f69c:	f7fb ff08 	bl	b4b0 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    f6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f6a2:	5ce3      	ldrb	r3, [r4, r3]
    f6a4:	f003 030f 	and.w	r3, r3, #15
    f6a8:	2b01      	cmp	r3, #1
    f6aa:	d106      	bne.n	f6ba <isr+0x6b2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f6ac:	9700      	str	r7, [sp, #0]
    f6ae:	463b      	mov	r3, r7
    f6b0:	2203      	movs	r2, #3
    f6b2:	4639      	mov	r1, r7
    f6b4:	4638      	mov	r0, r7
    f6b6:	f7f8 ff51 	bl	855c <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f6ba:	fba8 890b 	umull	r8, r9, r8, fp
    f6be:	a342      	add	r3, pc, #264	; (adr r3, f7c8 <isr+0x7c0>)
    f6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    f6c4:	4640      	mov	r0, r8
    f6c6:	4649      	mov	r1, r9
    f6c8:	f7f0 fda4 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f6cc:	f895 3020 	ldrb.w	r3, [r5, #32]
    f6d0:	68a4      	ldr	r4, [r4, #8]
    f6d2:	9506      	str	r5, [sp, #24]
    f6d4:	3307      	adds	r3, #7
    f6d6:	b2db      	uxtb	r3, r3
    f6d8:	930a      	str	r3, [sp, #40]	; 0x28
    f6da:	f240 439b 	movw	r3, #1179	; 0x49b
    f6de:	9308      	str	r3, [sp, #32]
    f6e0:	4b3f      	ldr	r3, [pc, #252]	; (f7e0 <isr+0x7d8>)
    f6e2:	9307      	str	r3, [sp, #28]
    f6e4:	4b3f      	ldr	r3, [pc, #252]	; (f7e4 <isr+0x7dc>)
    f6e6:	9305      	str	r3, [sp, #20]
    f6e8:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f6ea:	4a3f      	ldr	r2, [pc, #252]	; (f7e8 <isr+0x7e0>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f6ec:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f6ee:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f6f0:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f6f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f6f6:	2307      	movs	r3, #7
    f6f8:	2100      	movs	r1, #0
    f6fa:	4343      	muls	r3, r0
    f6fc:	fb02 3301 	mla	r3, r2, r1, r3
    f700:	fba0 1202 	umull	r1, r2, r0, r2
    f704:	441a      	add	r2, r3
    f706:	4608      	mov	r0, r1
    f708:	ebb8 0000 	subs.w	r0, r8, r0
    f70c:	4611      	mov	r1, r2
    f70e:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f712:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f714:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f718:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f71a:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f71c:	f7f0 fd7a 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f720:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f722:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f724:	a328      	add	r3, pc, #160	; (adr r3, f7c8 <isr+0x7c0>)
    f726:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f72a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f72e:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f732:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f734:	f7f0 fd6e 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f738:	eba4 040a 	sub.w	r4, r4, sl
    f73c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f740:	9000      	str	r0, [sp, #0]
    f742:	4623      	mov	r3, r4
    f744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f746:	4629      	mov	r1, r5
    f748:	4628      	mov	r0, r5
    f74a:	f7f8 fe69 	bl	8420 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f74e:	f030 0302 	bics.w	r3, r0, #2
    f752:	f43f ad03 	beq.w	f15c <isr+0x154>
    f756:	4b25      	ldr	r3, [pc, #148]	; (f7ec <isr+0x7e4>)
    f758:	9301      	str	r3, [sp, #4]
    f75a:	9300      	str	r3, [sp, #0]
    f75c:	4b24      	ldr	r3, [pc, #144]	; (f7f0 <isr+0x7e8>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f75e:	4a25      	ldr	r2, [pc, #148]	; (f7f4 <isr+0x7ec>)
    f760:	4925      	ldr	r1, [pc, #148]	; (f7f8 <isr+0x7f0>)
    f762:	4826      	ldr	r0, [pc, #152]	; (f7fc <isr+0x7f4>)
		LL_ASSERT(0);
    f764:	f7f1 fc12 	bl	f8c <printk>
    f768:	4040      	eors	r0, r0
    f76a:	f380 8811 	msr	BASEPRI, r0
    f76e:	f04f 0004 	mov.w	r0, #4
    f772:	df02      	svc	2
		rl_idx = devmatch_ok ?
    f774:	f1b9 0f00 	cmp.w	r9, #0
    f778:	d01c      	beq.n	f7b4 <isr+0x7ac>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    f77a:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    f77e:	4641      	mov	r1, r8
    f780:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f784:	f002 fb5c 	bl	11e40 <ctrl_rl_idx>
    f788:	4680      	mov	r8, r0
		if (crc_ok &&
    f78a:	b147      	cbz	r7, f79e <isr+0x796>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f78c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f790:	06da      	lsls	r2, r3, #27
    f792:	d535      	bpl.n	f800 <isr+0x7f8>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f794:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f798:	06db      	lsls	r3, r3, #27
    f79a:	f100 811d 	bmi.w	f9d8 <isr+0x9d0>
			_radio.state = STATE_CLOSE;
    f79e:	2303      	movs	r3, #3
    f7a0:	7523      	strb	r3, [r4, #20]
			radio_disable();
    f7a2:	f003 fb0d 	bl	12dc0 <radio_disable>
			_radio.scanner.state = 0;
    f7a6:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    f7aa:	f36f 0341 	bfc	r3, #1, #1
    f7ae:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    f7b2:	e4d3      	b.n	f15c <isr+0x154>
		rl_idx = devmatch_ok ?
    f7b4:	f1ba 0f00 	cmp.w	sl, #0
    f7b8:	d003      	beq.n	f7c2 <isr+0x7ba>
    f7ba:	4658      	mov	r0, fp
    f7bc:	f002 fb94 	bl	11ee8 <ctrl_rl_irk_idx>
    f7c0:	e7e2      	b.n	f788 <isr+0x780>
    f7c2:	f04f 08ff 	mov.w	r8, #255	; 0xff
    f7c6:	e7e0      	b.n	f78a <isr+0x782>
    f7c8:	1afd498d 	.word	0x1afd498d
    f7cc:	00000007 	.word	0x00000007
    f7d0:	000186c6 	.word	0x000186c6
    f7d4:	000f4240 	.word	0x000f4240
    f7d8:	3b9aca00 	.word	0x3b9aca00
    f7dc:	0000b4b1 	.word	0x0000b4b1
    f7e0:	0000b475 	.word	0x0000b475
    f7e4:	0000d91d 	.word	0x0000d91d
    f7e8:	1afd498d 	.word	0x1afd498d
    f7ec:	000153a9 	.word	0x000153a9
    f7f0:	00018023 	.word	0x00018023
    f7f4:	00016765 	.word	0x00016765
    f7f8:	000167b4 	.word	0x000167b4
    f7fc:	000184a7 	.word	0x000184a7
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f800:	f1b9 0f00 	cmp.w	r9, #0
    f804:	d005      	beq.n	f812 <isr+0x80a>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f806:	4641      	mov	r1, r8
    f808:	4650      	mov	r0, sl
    f80a:	f002 fcf1 	bl	121f0 <ctrl_rl_idx_allowed>
    f80e:	2800      	cmp	r0, #0
    f810:	d0c0      	beq.n	f794 <isr+0x78c>
	bool dir_report = false;
    f812:	2300      	movs	r3, #0
    f814:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    f818:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f81c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    f820:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    f824:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    f828:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    f82c:	2b00      	cmp	r3, #0
    f82e:	f000 80ec 	beq.w	fa0a <isr+0xa02>
    f832:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f836:	b133      	cbz	r3, f846 <isr+0x83e>
				      (_radio.fc_req == _radio.fc_ack)) &&
    f838:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    f83c:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f840:	429a      	cmp	r2, r3
    f842:	f040 80e2 	bne.w	fa0a <isr+0xa02>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    f846:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    f84a:	f3c3 1000 	ubfx	r0, r3, #4, #1
    f84e:	2800      	cmp	r0, #0
    f850:	f000 80cd 	beq.w	f9ee <isr+0x9e6>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    f854:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    f858:	f010 000f 	ands.w	r0, r0, #15
    f85c:	f040 814c 	bne.w	faf8 <isr+0xaf0>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    f860:	f003 fc92 	bl	13188 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    f864:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    f868:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    f86c:	48b8      	ldr	r0, [pc, #736]	; (fb50 <isr+0xb48>)
    f86e:	2207      	movs	r2, #7
    f870:	fba3 0100 	umull	r0, r1, r3, r0
    f874:	fb02 1103 	mla	r1, r2, r3, r1
    f878:	a3b3      	add	r3, pc, #716	; (adr r3, fb48 <isr+0xb40>)
    f87a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f87e:	f7f0 fcc9 	bl	214 <__aeabi_uldivmod>
    f882:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    f886:	4287      	cmp	r7, r0
    f888:	f080 80bf 	bcs.w	fa0a <isr+0xa02>
			node_rx = packet_rx_reserve_get(4);
    f88c:	2004      	movs	r0, #4
    f88e:	f7fa fe7d 	bl	a58c <packet_rx_reserve_get>
		if (node_rx == 0) {
    f892:	4607      	mov	r7, r0
    f894:	2800      	cmp	r0, #0
    f896:	d082      	beq.n	f79e <isr+0x796>
		_radio.state = STATE_STOP;
    f898:	2304      	movs	r3, #4
    f89a:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    f89c:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    f89e:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    f8a2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f8a6:	f003 fae1 	bl	12e6c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    f8aa:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    f8ac:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    f8b0:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    f8b4:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f8b6:	f899 3008 	ldrb.w	r3, [r9, #8]
    f8ba:	7802      	ldrb	r2, [r0, #0]
    f8bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f8c0:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    f8c4:	2322      	movs	r3, #34	; 0x22
    f8c6:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f8c8:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f8ca:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    f8cc:	4640      	mov	r0, r8
    f8ce:	f002 fa99 	bl	11e04 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    f8d2:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    f8d6:	4601      	mov	r1, r0
    f8d8:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    f8da:	f013 0f01 	tst.w	r3, #1
    f8de:	f810 3b02 	ldrb.w	r3, [r0], #2
    f8e2:	f000 8114 	beq.w	fb0e <isr+0xb06>
    f8e6:	2900      	cmp	r1, #0
    f8e8:	f000 8111 	beq.w	fb0e <isr+0xb06>
			pdu_adv_tx->tx_addr = 1;
    f8ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f8f0:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f8f2:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f8f4:	f7f2 f982 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    f8f8:	f105 0308 	add.w	r3, r5, #8
    f8fc:	4618      	mov	r0, r3
    f8fe:	2206      	movs	r2, #6
    f900:	f109 010a 	add.w	r1, r9, #10
    f904:	930a      	str	r3, [sp, #40]	; 0x28
    f906:	f7f2 f979 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    f90a:	2204      	movs	r2, #4
    f90c:	f106 0110 	add.w	r1, r6, #16
    f910:	f105 000e 	add.w	r0, r5, #14
    f914:	f7f2 f972 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    f918:	2203      	movs	r2, #3
    f91a:	f106 0114 	add.w	r1, r6, #20
    f91e:	f105 0012 	add.w	r0, r5, #18
    f922:	f7f2 f96b 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    f926:	2301      	movs	r3, #1
    f928:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    f92a:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    f92e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f932:	4353      	muls	r3, r2
    f934:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    f936:	f003 fc27 	bl	13188 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    f93a:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    f93c:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    f940:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    f942:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    f946:	bfd8      	it	le
    f948:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    f94c:	f1bb 0f00 	cmp.w	fp, #0
    f950:	f040 80e8 	bne.w	fb24 <isr+0xb1c>
			pdu_adv_tx->connect_ind.win_offset = 0;
    f954:	f885 b016 	strb.w	fp, [r5, #22]
    f958:	f885 b017 	strb.w	fp, [r5, #23]
    f95c:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    f95e:	2100      	movs	r1, #0
    f960:	4608      	mov	r0, r1
    f962:	f003 fa13 	bl	12d8c <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    f966:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    f968:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    f96c:	4608      	mov	r0, r1
    f96e:	f003 fa12 	bl	12d96 <radio_tx_chain_delay_get>
    f972:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    f976:	f100 031e 	add.w	r3, r0, #30
    f97a:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    f97c:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    f980:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    f982:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    f986:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    f988:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    f98c:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    f98e:	f106 0117 	add.w	r1, r6, #23
    f992:	2205      	movs	r2, #5
    f994:	f105 001e 	add.w	r0, r5, #30
    f998:	f7f2 f930 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.hop =
    f99c:	7fb2      	ldrb	r2, [r6, #30]
    f99e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    f9a2:	f362 0304 	bfi	r3, r2, #0, #5
    f9a6:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    f9aa:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    f9ae:	f362 1347 	bfi	r3, r2, #5, #3
    f9b2:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    f9b6:	f003 fa73 	bl	12ea0 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    f9ba:	4628      	mov	r0, r5
    f9bc:	f003 f9e0 	bl	12d80 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    f9c0:	f003 fa1c 	bl	12dfc <radio_is_ready>
    f9c4:	4683      	mov	fp, r0
    f9c6:	2800      	cmp	r0, #0
    f9c8:	f000 80cc 	beq.w	fb64 <isr+0xb5c>
		LL_ASSERT(!radio_is_ready());
    f9cc:	4b61      	ldr	r3, [pc, #388]	; (fb54 <isr+0xb4c>)
    f9ce:	9301      	str	r3, [sp, #4]
    f9d0:	9300      	str	r3, [sp, #0]
    f9d2:	4b61      	ldr	r3, [pc, #388]	; (fb58 <isr+0xb50>)
    f9d4:	f7ff bb76 	b.w	f0c4 <isr+0xbc>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f9d8:	f1b9 0f00 	cmp.w	r9, #0
    f9dc:	f47f af19 	bne.w	f812 <isr+0x80a>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    f9e0:	4640      	mov	r0, r8
    f9e2:	f002 fac7 	bl	11f74 <ctrl_irk_whitelisted>
		if (crc_ok &&
    f9e6:	2800      	cmp	r0, #0
    f9e8:	f43f aed9 	beq.w	f79e <isr+0x796>
    f9ec:	e711      	b.n	f812 <isr+0x80a>
	if (rl_idx != FILTER_IDX_NONE) {
    f9ee:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    f9f2:	d06f      	beq.n	fad4 <isr+0xacc>
		return (rl_idx == _radio.scanner.rl_idx);
    f9f4:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    f9f8:	eba0 0e08 	sub.w	lr, r0, r8
    f9fc:	f1de 0000 	rsbs	r0, lr, #0
    fa00:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    fa04:	2800      	cmp	r0, #0
    fa06:	f47f af25 	bne.w	f854 <isr+0x84c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    fa0a:	f899 0008 	ldrb.w	r0, [r9, #8]
    fa0e:	f010 000f 	ands.w	r0, r0, #15
    fa12:	d002      	beq.n	fa1a <isr+0xa12>
    fa14:	2806      	cmp	r0, #6
    fa16:	f040 81ac 	bne.w	fd72 <isr+0xd6a>
		 (_radio.scanner.type != 0) &&
    fa1a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    fa1e:	071f      	lsls	r7, r3, #28
    fa20:	f140 8191 	bpl.w	fd46 <isr+0xd3e>
		 (_radio.scanner.type != 0) &&
    fa24:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    fa28:	2a00      	cmp	r2, #0
    fa2a:	f040 818c 	bne.w	fd46 <isr+0xd3e>
		err = isr_rx_scan_report(rssi_ready,
    fa2e:	f1ba 0f00 	cmp.w	sl, #0
    fa32:	bf14      	ite	ne
    fa34:	4641      	movne	r1, r8
    fa36:	21ff      	moveq	r1, #255	; 0xff
    fa38:	4628      	mov	r0, r5
    fa3a:	f7fb fca9 	bl	b390 <isr_rx_scan_report>
		if (err) {
    fa3e:	2800      	cmp	r0, #0
    fa40:	f47f aead 	bne.w	f79e <isr+0x796>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    fa44:	f003 fa12 	bl	12e6c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    fa48:	7803      	ldrb	r3, [r0, #0]
    fa4a:	2203      	movs	r2, #3
    fa4c:	f362 0303 	bfi	r3, r2, #0, #4
    fa50:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    fa52:	f899 3008 	ldrb.w	r3, [r9, #8]
    fa56:	7802      	ldrb	r2, [r0, #0]
    fa58:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fa5c:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    fa60:	230c      	movs	r3, #12
    fa62:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    fa64:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    fa66:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    fa68:	4640      	mov	r0, r8
    fa6a:	f002 f9cb 	bl	11e04 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    fa6e:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    fa72:	4601      	mov	r1, r0
    fa74:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    fa76:	f013 0f01 	tst.w	r3, #1
    fa7a:	f810 3b02 	ldrb.w	r3, [r0], #2
    fa7e:	f000 8159 	beq.w	fd34 <isr+0xd2c>
    fa82:	2900      	cmp	r1, #0
    fa84:	f000 8156 	beq.w	fd34 <isr+0xd2c>
			pdu_adv_tx->tx_addr = 1;
    fa88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fa8c:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    fa8e:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    fa90:	f7f2 f8b4 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    fa94:	2206      	movs	r2, #6
    fa96:	f109 010a 	add.w	r1, r9, #10
    fa9a:	f105 0008 	add.w	r0, r5, #8
    fa9e:	f7f2 f8ad 	bl	1bfc <memcpy>
		_radio.scanner.state = 1;
    faa2:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    faa6:	f043 0302 	orr.w	r3, r3, #2
    faaa:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    faae:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    fab0:	2302      	movs	r3, #2
    fab2:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    fab4:	f003 fa7a 	bl	12fac <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    fab8:	2000      	movs	r0, #0
    faba:	f003 f9db 	bl	12e74 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    fabe:	4628      	mov	r0, r5
    fac0:	f003 f95e 	bl	12d80 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    fac4:	f003 fb4e 	bl	13164 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    fac8:	f003 f998 	bl	12dfc <radio_is_ready>
    facc:	2800      	cmp	r0, #0
    face:	f43f ab45 	beq.w	f15c <isr+0x154>
    fad2:	e77b      	b.n	f9cc <isr+0x9c4>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    fad4:	f899 2008 	ldrb.w	r2, [r9, #8]
    fad8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fadc:	f3c2 1280 	ubfx	r2, r2, #6, #1
    fae0:	4293      	cmp	r3, r2
    fae2:	d18f      	bne.n	fa04 <isr+0x9fc>
		(memcmp(&_radio.scanner.adv_addr[0],
    fae4:	2206      	movs	r2, #6
    fae6:	f109 010a 	add.w	r1, r9, #10
    faea:	481c      	ldr	r0, [pc, #112]	; (fb5c <isr+0xb54>)
    faec:	f7f2 f871 	bl	1bd2 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    faf0:	fab0 f080 	clz	r0, r0
    faf4:	0940      	lsrs	r0, r0, #5
    faf6:	e785      	b.n	fa04 <isr+0x9fc>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    faf8:	2801      	cmp	r0, #1
    fafa:	d18b      	bne.n	fa14 <isr+0xa0c>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    fafc:	2300      	movs	r3, #0
    fafe:	4642      	mov	r2, r8
    fb00:	4631      	mov	r1, r6
    fb02:	f7fb fbf9 	bl	b2f8 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    fb06:	2800      	cmp	r0, #0
    fb08:	f43f af7f 	beq.w	fa0a <isr+0xa02>
    fb0c:	e6a8      	b.n	f860 <isr+0x858>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    fb0e:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    fb12:	4913      	ldr	r1, [pc, #76]	; (fb60 <isr+0xb58>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    fb14:	09d2      	lsrs	r2, r2, #7
    fb16:	f362 1386 	bfi	r3, r2, #6, #1
    fb1a:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    fb1c:	2206      	movs	r2, #6
    fb1e:	e6e9      	b.n	f8f4 <isr+0x8ec>
				conn_space_us += conn_interval_us;
    fb20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fb22:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    fb24:	f1bb 0f00 	cmp.w	fp, #0
    fb28:	dbfa      	blt.n	fb20 <isr+0xb18>
    fb2a:	459b      	cmp	fp, r3
    fb2c:	d3f8      	bcc.n	fb20 <isr+0xb18>
				(conn_space_us - conn_offset_us) / 1250;
    fb2e:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    fb32:	f240 42e2 	movw	r2, #1250	; 0x4e2
    fb36:	fbb3 f3f2 	udiv	r3, r3, r2
    fb3a:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    fb3c:	7d6b      	ldrb	r3, [r5, #21]
    fb3e:	3301      	adds	r3, #1
    fb40:	756b      	strb	r3, [r5, #21]
    fb42:	e70c      	b.n	f95e <isr+0x956>
    fb44:	f3af 8000 	nop.w
    fb48:	3b9aca00 	.word	0x3b9aca00
    fb4c:	00000000 	.word	0x00000000
    fb50:	1afd498d 	.word	0x1afd498d
    fb54:	000153a9 	.word	0x000153a9
    fb58:	00018041 	.word	0x00018041
    fb5c:	200009b2 	.word	0x200009b2
    fb60:	200009ac 	.word	0x200009ac
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    fb64:	f44f 72aa 	mov.w	r2, #340	; 0x154
    fb68:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    fb6c:	4630      	mov	r0, r6
    fb6e:	f7f7 fe06 	bl	777e <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    fb72:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    fb74:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    fb76:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    fb7a:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    fb7e:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    fb82:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    fb84:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    fb88:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    fb8a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fb8e:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    fb90:	2206      	movs	r2, #6
    fb92:	f107 001b 	add.w	r0, r7, #27
    fb96:	f7f2 f831 	bl	1bfc <memcpy>
    fb9a:	f107 0b0e 	add.w	fp, r7, #14
    fb9e:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    fba2:	f1ba 0f00 	cmp.w	sl, #0
    fba6:	d032      	beq.n	fc0e <isr+0xc06>
    fba8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    fbac:	d02f      	beq.n	fc0e <isr+0xc06>
			ll_rl_id_addr_get(rl_idx,
    fbae:	465a      	mov	r2, fp
    fbb0:	f107 010d 	add.w	r1, r7, #13
    fbb4:	4640      	mov	r0, r8
    fbb6:	930d      	str	r3, [sp, #52]	; 0x34
    fbb8:	f002 fb4e 	bl	12258 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    fbbc:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    fbbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fbc0:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    fbc2:	3202      	adds	r2, #2
    fbc4:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    fbc6:	4618      	mov	r0, r3
    fbc8:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fbca:	f7f2 f817 	bl	1bfc <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    fbce:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    fbd2:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    fbd6:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    fbda:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    fbde:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    fbe2:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    fbe6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    fbea:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    fbee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    fbf2:	8c30      	ldrh	r0, [r6, #32]
    fbf4:	f7fb fc24 	bl	b440 <rx_fc_lock>
		packet_rx_enqueue();
    fbf8:	f7fb fb32 	bl	b260 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    fbfc:	2003      	movs	r0, #3
    fbfe:	f7fa fcc5 	bl	a58c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    fc02:	b988      	cbnz	r0, fc28 <isr+0xc20>
    fc04:	4bba      	ldr	r3, [pc, #744]	; (fef0 <isr+0xee8>)
    fc06:	9301      	str	r3, [sp, #4]
    fc08:	9300      	str	r3, [sp, #0]
    fc0a:	4bba      	ldr	r3, [pc, #744]	; (fef4 <isr+0xeec>)
    fc0c:	e474      	b.n	f4f8 <isr+0x4f0>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    fc0e:	2206      	movs	r2, #6
    fc10:	2100      	movs	r1, #0
    fc12:	4618      	mov	r0, r3
    fc14:	f7f2 f81e 	bl	1c54 <memset>
				pdu_adv_tx->rx_addr;
    fc18:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fc1a:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    fc1c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    fc20:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fc22:	2206      	movs	r2, #6
    fc24:	4658      	mov	r0, fp
    fc26:	e7d0      	b.n	fbca <isr+0xbc2>
			node_rx->hdr.handle = conn->handle;
    fc28:	8c33      	ldrh	r3, [r6, #32]
    fc2a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    fc2c:	230b      	movs	r3, #11
    fc2e:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    fc30:	f899 3008 	ldrb.w	r3, [r9, #8]
    fc34:	f013 0320 	ands.w	r3, r3, #32
    fc38:	d00e      	beq.n	fc58 <isr+0xc50>
					((u16_t)conn->access_addr[1] << 8) |
    fc3a:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    fc3c:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    fc3e:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    fc40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    fc44:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    fc46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    fc4a:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    fc4c:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    fc4e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    fc52:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    fc54:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    fc56:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    fc58:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    fc5a:	f7fb fb01 	bl	b260 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    fc5e:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    fc60:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    fc64:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    fc66:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    fc6a:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    fc6c:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc6e:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    fc72:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    fc74:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc76:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    fc7a:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc7c:	4629      	mov	r1, r5
    fc7e:	9300      	str	r3, [sp, #0]
    fc80:	4628      	mov	r0, r5
    fc82:	4b9d      	ldr	r3, [pc, #628]	; (fef8 <isr+0xef0>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    fc84:	f8df a284 	ldr.w	sl, [pc, #644]	; ff0c <isr+0xf04>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    fc88:	bf38      	it	cc
    fc8a:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc8c:	f7f8 fc66 	bl	855c <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    fc90:	f240 6139 	movw	r1, #1593	; 0x639
    fc94:	f7fb fc40 	bl	b518 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc98:	462b      	mov	r3, r5
    fc9a:	2204      	movs	r2, #4
    fc9c:	4629      	mov	r1, r5
    fc9e:	9500      	str	r5, [sp, #0]
    fca0:	4628      	mov	r0, r5
    fca2:	f7f8 fc5b 	bl	855c <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    fca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fca8:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fcac:	68a3      	ldr	r3, [r4, #8]
    fcae:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    fcb2:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fcb4:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    fcb8:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    fcbc:	9308      	str	r3, [sp, #32]
    fcbe:	4b8f      	ldr	r3, [pc, #572]	; (fefc <isr+0xef4>)
    fcc0:	9307      	str	r3, [sp, #28]
    fcc2:	4b8f      	ldr	r3, [pc, #572]	; (ff00 <isr+0xef8>)
    fcc4:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fcc6:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    fcc8:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fcca:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    fccc:	4640      	mov	r0, r8
    fcce:	a386      	add	r3, pc, #536	; (adr r3, fee8 <isr+0xee0>)
    fcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
    fcd4:	4649      	mov	r1, r9
		ticker_status =
    fcd6:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    fcd8:	f7f0 fa9c 	bl	214 <__aeabi_uldivmod>
    fcdc:	4610      	mov	r0, r2
    fcde:	4619      	mov	r1, r3
    fce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fce4:	2300      	movs	r3, #0
    fce6:	f7f0 fa95 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    fcea:	a37f      	add	r3, pc, #508	; (adr r3, fee8 <isr+0xee0>)
    fcec:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fcf0:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    fcf2:	4649      	mov	r1, r9
    fcf4:	4640      	mov	r0, r8
    fcf6:	f7f0 fa8d 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    fcfa:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    fcfc:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    fcfe:	a37a      	add	r3, pc, #488	; (adr r3, fee8 <isr+0xee0>)
    fd00:	e9d3 2300 	ldrd	r2, r3, [r3]
    fd04:	fba1 010a 	umull	r0, r1, r1, sl
    fd08:	f7f0 fa84 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fd0c:	3407      	adds	r4, #7
    fd0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    fd12:	b2e4      	uxtb	r4, r4
    fd14:	9000      	str	r0, [sp, #0]
    fd16:	465b      	mov	r3, fp
    fd18:	4622      	mov	r2, r4
    fd1a:	4629      	mov	r1, r5
    fd1c:	4628      	mov	r0, r5
    fd1e:	f7f8 fb7f 	bl	8420 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fd22:	f030 0302 	bics.w	r3, r0, #2
    fd26:	f43f aa19 	beq.w	f15c <isr+0x154>
    fd2a:	4b71      	ldr	r3, [pc, #452]	; (fef0 <isr+0xee8>)
    fd2c:	9301      	str	r3, [sp, #4]
    fd2e:	9300      	str	r3, [sp, #0]
    fd30:	4b70      	ldr	r3, [pc, #448]	; (fef4 <isr+0xeec>)
    fd32:	e514      	b.n	f75e <isr+0x756>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    fd34:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    fd38:	4972      	ldr	r1, [pc, #456]	; (ff04 <isr+0xefc>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    fd3a:	09d2      	lsrs	r2, r2, #7
    fd3c:	f362 1386 	bfi	r3, r2, #6, #1
    fd40:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    fd42:	2206      	movs	r2, #6
    fd44:	e6a4      	b.n	fa90 <isr+0xa88>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    fd46:	b9a0      	cbnz	r0, fd72 <isr+0xd6a>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    fd48:	f899 3009 	ldrb.w	r3, [r9, #9]
    fd4c:	2b00      	cmp	r3, #0
    fd4e:	f43f ad26 	beq.w	f79e <isr+0x796>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    fd52:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    fd56:	2b00      	cmp	r3, #0
    fd58:	f47f ad21 	bne.w	f79e <isr+0x796>
		err = isr_rx_scan_report(rssi_ready,
    fd5c:	f1ba 0f00 	cmp.w	sl, #0
    fd60:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    fd64:	bf14      	ite	ne
    fd66:	4641      	movne	r1, r8
    fd68:	21ff      	moveq	r1, #255	; 0xff
    fd6a:	4628      	mov	r0, r5
    fd6c:	f7fb fb10 	bl	b390 <isr_rx_scan_report>
    fd70:	e515      	b.n	f79e <isr+0x796>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    fd72:	2801      	cmp	r0, #1
    fd74:	d00e      	beq.n	fd94 <isr+0xd8c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    fd76:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
    fd7a:	f003 020b 	and.w	r2, r3, #11
    fd7e:	2a02      	cmp	r2, #2
    fd80:	d0e2      	beq.n	fd48 <isr+0xd40>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    fd82:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    fd86:	2b07      	cmp	r3, #7
    fd88:	d10d      	bne.n	fda6 <isr+0xd9e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    fd8a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    fd8e:	0758      	lsls	r0, r3, #29
    fd90:	d1da      	bne.n	fd48 <isr+0xd40>
    fd92:	e504      	b.n	f79e <isr+0x796>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    fd94:	ab10      	add	r3, sp, #64	; 0x40
    fd96:	4642      	mov	r2, r8
    fd98:	4631      	mov	r1, r6
    fd9a:	2000      	movs	r0, #0
    fd9c:	f7fb faac 	bl	b2f8 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    fda0:	2800      	cmp	r0, #0
    fda2:	d1d1      	bne.n	fd48 <isr+0xd40>
    fda4:	e7e7      	b.n	fd76 <isr+0xd6e>
		   (_radio.scanner.phy)) ||
    fda6:	2b04      	cmp	r3, #4
    fda8:	f47f acf9 	bne.w	f79e <isr+0x796>
		   (_radio.scanner.state != 0) &&
    fdac:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    fdb0:	0799      	lsls	r1, r3, #30
    fdb2:	f57f acf4 	bpl.w	f79e <isr+0x796>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    fdb6:	f003 f859 	bl	12e6c <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    fdba:	f899 3008 	ldrb.w	r3, [r9, #8]
    fdbe:	7802      	ldrb	r2, [r0, #0]
    fdc0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fdc4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    fdc8:	f47f ace9 	bne.w	f79e <isr+0x796>
		(memcmp(&sreq->scan_req.adv_addr[0],
    fdcc:	2206      	movs	r2, #6
    fdce:	f109 010a 	add.w	r1, r9, #10
    fdd2:	3008      	adds	r0, #8
    fdd4:	f7f1 fefd 	bl	1bd2 <memcmp>
		   (_radio.scanner.state != 0) &&
    fdd8:	2800      	cmp	r0, #0
    fdda:	d0b5      	beq.n	fd48 <isr+0xd40>
    fddc:	e4df      	b.n	f79e <isr+0x796>
	_radio.packet_counter++;
    fdde:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    fde2:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
    fde6:	3301      	adds	r3, #1
    fde8:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
    fdec:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    fdee:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
    fdf2:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    fdf6:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    fdfa:	2301      	movs	r3, #1
    fdfc:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    fe00:	2f00      	cmp	r7, #0
    fe02:	f000 82d2 	beq.w	103aa <__kernel_ram_size+0x3aa>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    fe06:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    fe0a:	f898 1008 	ldrb.w	r1, [r8, #8]
    fe0e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    fe12:	f3c1 0180 	ubfx	r1, r1, #2, #1
    fe16:	f003 0201 	and.w	r2, r3, #1
    fe1a:	4291      	cmp	r1, r2
    fe1c:	f000 819e 	beq.w	1015c <__kernel_ram_size+0x15c>
		_radio.conn_curr->sn++;
    fe20:	f082 0201 	eor.w	r2, r2, #1
    fe24:	f362 0300 	bfi	r3, r2, #0, #1
    fe28:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    fe2c:	7ce3      	ldrb	r3, [r4, #19]
    fe2e:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    fe30:	bf02      	ittt	eq
    fe32:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    fe36:	f043 0301 	orreq.w	r3, r3, #1
    fe3a:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    fe3e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    fe42:	061a      	lsls	r2, r3, #24
    fe44:	f100 8185 	bmi.w	10152 <__kernel_ram_size+0x152>
			node_tx = _radio.conn_curr->pkt_tx_head;
    fe48:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    fe4c:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    fe50:	1d30      	adds	r0, r6, #4
    fe52:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    fe56:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    fe5a:	f1b9 0f00 	cmp.w	r9, #0
    fe5e:	f000 80ab 	beq.w	ffb8 <isr+0xfb0>
				if (_radio.conn_curr->enc_tx) {
    fe62:	069b      	lsls	r3, r3, #26
    fe64:	d50b      	bpl.n	fe7e <isr+0xe76>
					_radio.conn_curr->ccm_tx.counter++;
    fe66:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    fe6a:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    fe6e:	f11b 0201 	adds.w	r2, fp, #1
    fe72:	f14c 0300 	adc.w	r3, ip, #0
    fe76:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    fe7a:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    fe7e:	5c43      	ldrb	r3, [r0, r1]
    fe80:	f003 0303 	and.w	r3, r3, #3
    fe84:	2b03      	cmp	r3, #3
    fe86:	f040 8097 	bne.w	ffb8 <isr+0xfb0>
	switch (pdu_data_tx->llctrl.opcode) {
    fe8a:	f89a 3003 	ldrb.w	r3, [sl, #3]
    fe8e:	3b02      	subs	r3, #2
    fe90:	2b16      	cmp	r3, #22
    fe92:	f200 8091 	bhi.w	ffb8 <isr+0xfb0>
    fe96:	e8df f013 	tbh	[pc, r3, lsl #1]
    fe9a:	0017      	.short	0x0017
    fe9c:	00c50073 	.word	0x00c50073
    fea0:	008f008f 	.word	0x008f008f
    fea4:	008f008f 	.word	0x008f008f
    fea8:	0091008f 	.word	0x0091008f
    feac:	008f009c 	.word	0x008f009c
    feb0:	008f00cc 	.word	0x008f00cc
    feb4:	008f008f 	.word	0x008f008f
    feb8:	008f008f 	.word	0x008f008f
    febc:	00d6008f 	.word	0x00d6008f
    fec0:	00ee008f 	.word	0x00ee008f
    fec4:	012000f5 	.word	0x012000f5
		_radio.state = STATE_CLOSE;
    fec8:	2303      	movs	r3, #3
    feca:	7523      	strb	r3, [r4, #20]
		radio_disable();
    fecc:	f002 ff78 	bl	12dc0 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    fed0:	f002 ff94 	bl	12dfc <radio_is_ready>
    fed4:	b1e0      	cbz	r0, ff10 <isr+0xf08>
    fed6:	4b06      	ldr	r3, [pc, #24]	; (fef0 <isr+0xee8>)
    fed8:	9301      	str	r3, [sp, #4]
    feda:	9300      	str	r3, [sp, #0]
    fedc:	4b0a      	ldr	r3, [pc, #40]	; (ff08 <isr+0xf00>)
    fede:	f7ff b8f1 	b.w	f0c4 <isr+0xbc>
    fee2:	bf00      	nop
    fee4:	f3af 8000 	nop.w
    fee8:	1afd498d 	.word	0x1afd498d
    feec:	00000007 	.word	0x00000007
    fef0:	000153a9 	.word	0x000153a9
    fef4:	00018041 	.word	0x00018041
    fef8:	0000b519 	.word	0x0000b519
    fefc:	0000b475 	.word	0x0000b475
    ff00:	0000d919 	.word	0x0000d919
    ff04:	200009ac 	.word	0x200009ac
    ff08:	0001804d 	.word	0x0001804d
    ff0c:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    ff10:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    ff14:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    ff18:	2913      	cmp	r1, #19
    ff1a:	bf08      	it	eq
    ff1c:	2116      	moveq	r1, #22
    ff1e:	f7fb fee3 	bl	bce8 <terminate_ind_rx_enqueue>
		terminate = 1;
    ff22:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    ff24:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    ff28:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    ff2c:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    ff2e:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    ff32:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    ff36:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    ff38:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    ff3c:	d11e      	bne.n	ff7c <isr+0xf74>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    ff3e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    ff42:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    ff46:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    ff48:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    ff4a:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    ff4e:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    ff52:	f040 80c9 	bne.w	100e8 <__kernel_ram_size+0xe8>
		if (node_tx) {
    ff56:	b18e      	cbz	r6, ff7c <isr+0xf74>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    ff58:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    ff5c:	f8d3 e000 	ldr.w	lr, [r3]
    ff60:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    ff64:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    ff66:	bf06      	itte	eq
    ff68:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    ff6c:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    ff70:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    ff74:	49cd      	ldr	r1, [pc, #820]	; (102ac <__kernel_ram_size+0x2ac>)
    ff76:	4630      	mov	r0, r6
    ff78:	f7f7 fbe3 	bl	7742 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    ff7c:	2600      	movs	r6, #0
    ff7e:	e0bc      	b.n	100fa <__kernel_ram_size+0xfa>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    ff80:	2208      	movs	r2, #8
    ff82:	f10a 010e 	add.w	r1, sl, #14
    ff86:	f105 0094 	add.w	r0, r5, #148	; 0x94
    ff8a:	f7f1 fe37 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    ff8e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    ff92:	2204      	movs	r2, #4
    ff94:	f10a 0116 	add.w	r1, sl, #22
    ff98:	f500 7089 	add.w	r0, r0, #274	; 0x112
    ff9c:	f7f1 fe2e 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_tx = 1;
    ffa0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    ffa4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    ffa8:	f042 0208 	orr.w	r2, r2, #8
    ffac:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    ffb0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    ffb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    ffb8:	2500      	movs	r5, #0
    ffba:	e7b3      	b.n	ff24 <isr+0xf1c>
		_radio.conn_curr->pause_tx = 1;
    ffbc:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    ffc0:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    ffc4:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    ffc8:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    ffcc:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    ffd0:	e7f2      	b.n	ffb8 <isr+0xfb0>
		if (_radio.role == ROLE_MASTER) {
    ffd2:	f894 a013 	ldrb.w	sl, [r4, #19]
    ffd6:	fa5f fa8a 	uxtb.w	sl, sl
    ffda:	f1ba 0f04 	cmp.w	sl, #4
    ffde:	d121      	bne.n	10024 <__kernel_ram_size+0x24>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ffe0:	7933      	ldrb	r3, [r6, #4]
    ffe2:	f043 0303 	orr.w	r3, r3, #3
    ffe6:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    ffe8:	2317      	movs	r3, #23
    ffea:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    ffec:	2303      	movs	r3, #3
    ffee:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    fff0:	2208      	movs	r2, #8
    fff2:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    fff6:	3004      	adds	r0, #4
    fff8:	f7f1 fe00 	bl	1bfc <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    fffc:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
   10000:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
   10002:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
   10006:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   10008:	f106 0112 	add.w	r1, r6, #18
   1000c:	2208      	movs	r2, #8
   1000e:	6860      	ldr	r0, [r4, #4]
   10010:	f003 ff10 	bl	13e34 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
   10014:	f106 011a 	add.w	r1, r6, #26
   10018:	4652      	mov	r2, sl
   1001a:	6860      	ldr	r0, [r4, #4]
   1001c:	f003 ff0a 	bl	13e34 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
   10020:	2600      	movs	r6, #0
   10022:	e7c9      	b.n	ffb8 <isr+0xfb0>
			_radio.conn_curr->pause_tx = 1;
   10024:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   10028:	f043 0308 	orr.w	r3, r3, #8
   1002c:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   10030:	e7c2      	b.n	ffb8 <isr+0xfb0>
		_radio.conn_curr->pause_rx = 0;
   10032:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   10036:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1003a:	f36f 03c3 	bfc	r3, #3, #1
   1003e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   10042:	2300      	movs	r3, #0
   10044:	e7c2      	b.n	ffcc <isr+0xfc4>
		if ((_radio.conn_curr->llcp_length.req !=
   10046:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   1004a:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1004e:	429a      	cmp	r2, r3
   10050:	d0b2      	beq.n	ffb8 <isr+0xfb0>
		    (_radio.conn_curr->llcp_length.state ==
   10052:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
   10056:	f003 0203 	and.w	r2, r3, #3
   1005a:	2a01      	cmp	r2, #1
   1005c:	d1ac      	bne.n	ffb8 <isr+0xfb0>
			_radio.conn_curr->pause_tx = 1;
   1005e:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
   10062:	f042 0208 	orr.w	r2, r2, #8
   10066:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   1006a:	2202      	movs	r2, #2
   1006c:	f362 0301 	bfi	r3, r2, #0, #2
   10070:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
   10074:	e7a0      	b.n	ffb8 <isr+0xfb0>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   10076:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1007a:	2202      	movs	r2, #2
   1007c:	f362 0301 	bfi	r3, r2, #0, #2
   10080:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   10084:	7ce3      	ldrb	r3, [r4, #19]
   10086:	2b03      	cmp	r3, #3
   10088:	d196      	bne.n	ffb8 <isr+0xfb0>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   1008a:	2301      	movs	r3, #1
   1008c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   10090:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   10094:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10098:	2202      	movs	r2, #2
   1009a:	2304      	movs	r3, #4
   1009c:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
   100a0:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   100a4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
   100a8:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
   100ac:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   100b0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   100b4:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
   100b8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   100bc:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
   100c0:	f003 0307 	and.w	r3, r3, #7
   100c4:	aa12      	add	r2, sp, #72	; 0x48
   100c6:	4413      	add	r3, r2
   100c8:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   100cc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
   100d0:	f363 0202 	bfi	r2, r3, #0, #3
   100d4:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
   100d8:	e76e      	b.n	ffb8 <isr+0xfb0>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   100da:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
   100de:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   100e2:	f3c3 0382 	ubfx	r3, r3, #2, #3
   100e6:	e7f3      	b.n	100d0 <__kernel_ram_size+0xd0>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   100e8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   100ec:	4293      	cmp	r3, r2
   100ee:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   100f0:	bf08      	it	eq
   100f2:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   100f6:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
   100fa:	b37d      	cbz	r5, 1015c <__kernel_ram_size+0x15c>
		connection_release(_radio.conn_curr);
   100fc:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10100:	f7fb fc40 	bl	b984 <connection_release>
		_radio.conn_curr = NULL;
   10104:	2300      	movs	r3, #0
   10106:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
   1010a:	f003 f81f 	bl	1314c <radio_tmr_aa_restore>
   1010e:	b918      	cbnz	r0, 10118 <__kernel_ram_size+0x118>
		radio_tmr_aa_save(radio_tmr_aa_get());
   10110:	f003 f810 	bl	13134 <radio_tmr_aa_get>
   10114:	f003 f814 	bl	13140 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
   10118:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1011c:	2b00      	cmp	r3, #0
   1011e:	f43f a81d 	beq.w	f15c <isr+0x154>
	if (tx_release) {
   10122:	b11e      	cbz	r6, 1012c <__kernel_ram_size+0x12c>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   10124:	4631      	mov	r1, r6
   10126:	8c18      	ldrh	r0, [r3, #32]
   10128:	f7fb fba2 	bl	b870 <pdu_node_tx_release>
	if (rx_enqueue) {
   1012c:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   10130:	2b00      	cmp	r3, #0
   10132:	f43f a813 	beq.w	f15c <isr+0x154>
		rx_fc_lock(_radio.conn_curr->handle);
   10136:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1013a:	8c18      	ldrh	r0, [r3, #32]
   1013c:	f7fb f980 	bl	b440 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
   10140:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10144:	8c1b      	ldrh	r3, [r3, #32]
   10146:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
   1014a:	f7fb f889 	bl	b260 <packet_rx_enqueue>
   1014e:	f7ff b805 	b.w	f15c <isr+0x154>
			_radio.conn_curr->empty = 0;
   10152:	f36f 13c7 	bfc	r3, #7, #1
   10156:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   1015a:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   1015c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10160:	f898 2008 	ldrb.w	r2, [r8, #8]
   10164:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   10168:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1016c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   10170:	429a      	cmp	r2, r3
   10172:	f040 80e9 	bne.w	10348 <__kernel_ram_size+0x348>
	    (packet_rx_reserve_get(3) != 0) &&
   10176:	2003      	movs	r0, #3
   10178:	f7fa fa08 	bl	a58c <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   1017c:	2800      	cmp	r0, #0
   1017e:	f000 80e3 	beq.w	10348 <__kernel_ram_size+0x348>
	    (packet_rx_reserve_get(3) != 0) &&
   10182:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   10186:	b393      	cbz	r3, 101ee <__kernel_ram_size+0x1ee>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   10188:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   1018c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
   10190:	4293      	cmp	r3, r2
   10192:	d105      	bne.n	101a0 <__kernel_ram_size+0x1a0>
	      (_radio.fc_req == _radio.fc_ack)) ||
   10194:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   10198:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
   1019c:	4291      	cmp	r1, r2
   1019e:	d026      	beq.n	101ee <__kernel_ram_size+0x1ee>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   101a0:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
   101a4:	4293      	cmp	r3, r2
   101a6:	f000 80cf 	beq.w	10348 <__kernel_ram_size+0x348>
	      (_radio.fc_req != _radio.fc_ack) &&
   101aa:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   101ae:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
   101b2:	429a      	cmp	r2, r3
   101b4:	f000 80c8 	beq.w	10348 <__kernel_ram_size+0x348>
		(((_radio.fc_req == 0) &&
   101b8:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
   101bc:	b933      	cbnz	r3, 101cc <__kernel_ram_size+0x1cc>
		   _radio.conn_curr->handle)) ||
   101be:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
   101c2:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
   101c6:	8c1b      	ldrh	r3, [r3, #32]
   101c8:	429a      	cmp	r2, r3
   101ca:	d010      	beq.n	101ee <__kernel_ram_size+0x1ee>
		 ((_radio.fc_req != 0) &&
   101cc:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
   101d0:	2b00      	cmp	r3, #0
   101d2:	f000 80b9 	beq.w	10348 <__kernel_ram_size+0x348>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   101d6:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
   101da:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   101de:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
   101e2:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
   101e6:	8c0b      	ldrh	r3, [r1, #32]
   101e8:	429a      	cmp	r2, r3
   101ea:	f040 80ad 	bne.w	10348 <__kernel_ram_size+0x348>
		if (pdu_data_rx->len != 0) {
   101ee:	f898 5009 	ldrb.w	r5, [r8, #9]
   101f2:	2d00      	cmp	r5, #0
   101f4:	f000 80b1 	beq.w	1035a <__kernel_ram_size+0x35a>
			if (_radio.conn_curr->enc_rx) {
   101f8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   101fc:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
   10200:	f015 0510 	ands.w	r5, r5, #16
   10204:	d00c      	beq.n	10220 <__kernel_ram_size+0x220>
				done = radio_ccm_is_done();
   10206:	f003 f82d 	bl	13264 <radio_ccm_is_done>
				LL_ASSERT(done);
   1020a:	b940      	cbnz	r0, 1021e <__kernel_ram_size+0x21e>
   1020c:	4b28      	ldr	r3, [pc, #160]	; (102b0 <__kernel_ram_size+0x2b0>)
   1020e:	9301      	str	r3, [sp, #4]
   10210:	9300      	str	r3, [sp, #0]
   10212:	4a28      	ldr	r2, [pc, #160]	; (102b4 <__kernel_ram_size+0x2b4>)
   10214:	4b28      	ldr	r3, [pc, #160]	; (102b8 <__kernel_ram_size+0x2b8>)
   10216:	4929      	ldr	r1, [pc, #164]	; (102bc <__kernel_ram_size+0x2bc>)
   10218:	4829      	ldr	r0, [pc, #164]	; (102c0 <__kernel_ram_size+0x2c0>)
   1021a:	f7ff baa3 	b.w	f764 <isr+0x75c>
				ccm_rx_increment = 1;
   1021e:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
   10220:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10224:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   10228:	06d9      	lsls	r1, r3, #27
   1022a:	d42c      	bmi.n	10286 <__kernel_ram_size+0x286>
			    (_radio.conn_curr->pause_rx &&
   1022c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10230:	f898 3008 	ldrb.w	r3, [r8, #8]
   10234:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   10238:	f012 0f04 	tst.w	r2, #4
   1023c:	d142      	bne.n	102c4 <__kernel_ram_size+0x2c4>
			_radio.conn_curr->appto_expire = 0;
   1023e:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
   10240:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
   10244:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   10248:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   1024c:	d004      	beq.n	10258 <__kernel_ram_size+0x258>
   1024e:	2b02      	cmp	r3, #2
   10250:	d873      	bhi.n	1033a <__kernel_ram_size+0x33a>
				*rx_enqueue = 1;
   10252:	2301      	movs	r3, #1
   10254:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
   10258:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1025c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   10260:	f082 0202 	eor.w	r2, r2, #2
   10264:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
   10268:	2d00      	cmp	r5, #0
   1026a:	d06d      	beq.n	10348 <__kernel_ram_size+0x348>
				_radio.conn_curr->ccm_rx.counter++;
   1026c:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
   10270:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
   10274:	f119 0001 	adds.w	r0, r9, #1
   10278:	f14a 0100 	adc.w	r1, sl, #0
   1027c:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
   10280:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
   10284:	e060      	b.n	10348 <__kernel_ram_size+0x348>
			     !radio_ccm_mic_is_valid()) ||
   10286:	f003 f80b 	bl	132a0 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   1028a:	2800      	cmp	r0, #0
   1028c:	d1ce      	bne.n	1022c <__kernel_ram_size+0x22c>
				_radio.state = STATE_CLOSE;
   1028e:	2303      	movs	r3, #3
   10290:	7523      	strb	r3, [r4, #20]
				radio_disable();
   10292:	f002 fd95 	bl	12dc0 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   10296:	f002 fdb1 	bl	12dfc <radio_is_ready>
   1029a:	4605      	mov	r5, r0
   1029c:	2800      	cmp	r0, #0
   1029e:	d040      	beq.n	10322 <__kernel_ram_size+0x322>
   102a0:	4b03      	ldr	r3, [pc, #12]	; (102b0 <__kernel_ram_size+0x2b0>)
   102a2:	9301      	str	r3, [sp, #4]
   102a4:	9300      	str	r3, [sp, #0]
   102a6:	4b04      	ldr	r3, [pc, #16]	; (102b8 <__kernel_ram_size+0x2b8>)
   102a8:	f7fe bf0c 	b.w	f0c4 <isr+0xbc>
   102ac:	20000a24 	.word	0x20000a24
   102b0:	000153a9 	.word	0x000153a9
   102b4:	00016765 	.word	0x00016765
   102b8:	000180b1 	.word	0x000180b1
   102bc:	000167b4 	.word	0x000167b4
   102c0:	00018709 	.word	0x00018709
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   102c4:	f003 0103 	and.w	r1, r3, #3
   102c8:	2903      	cmp	r1, #3
   102ca:	d1e0      	bne.n	1028e <__kernel_ram_size+0x28e>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   102cc:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
   102d0:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   102d4:	f1be 0f00 	cmp.w	lr, #0
   102d8:	f002 0240 	and.w	r2, r2, #64	; 0x40
   102dc:	db15      	blt.n	1030a <__kernel_ram_size+0x30a>
	       (!conn->role &&
   102de:	b922      	cbnz	r2, 102ea <__kernel_ram_size+0x2ea>
		((!conn->refresh &&
   102e0:	2902      	cmp	r1, #2
   102e2:	d0ac      	beq.n	1023e <__kernel_ram_size+0x23e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   102e4:	2911      	cmp	r1, #17
   102e6:	d8d2      	bhi.n	1028e <__kernel_ram_size+0x28e>
   102e8:	e009      	b.n	102fe <__kernel_ram_size+0x2fe>
		 (conn->refresh &&
   102ea:	1e8a      	subs	r2, r1, #2
   102ec:	b2d2      	uxtb	r2, r2
   102ee:	2a09      	cmp	r2, #9
   102f0:	d8f8      	bhi.n	102e4 <__kernel_ram_size+0x2e4>
   102f2:	f240 2e05 	movw	lr, #517	; 0x205
   102f6:	fa2e f202 	lsr.w	r2, lr, r2
   102fa:	07d2      	lsls	r2, r2, #31
   102fc:	d49f      	bmi.n	1023e <__kernel_ram_size+0x23e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   102fe:	4aac      	ldr	r2, [pc, #688]	; (105b0 <__kernel_ram_size+0x5b0>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10300:	fa22 f101 	lsr.w	r1, r2, r1
   10304:	07ca      	lsls	r2, r1, #31
   10306:	d5c2      	bpl.n	1028e <__kernel_ram_size+0x28e>
   10308:	e799      	b.n	1023e <__kernel_ram_size+0x23e>
	       (conn->role &&
   1030a:	b92a      	cbnz	r2, 10318 <__kernel_ram_size+0x318>
		((!conn->refresh &&
   1030c:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1030e:	d096      	beq.n	1023e <__kernel_ram_size+0x23e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10310:	2911      	cmp	r1, #17
   10312:	d8bc      	bhi.n	1028e <__kernel_ram_size+0x28e>
   10314:	4aa7      	ldr	r2, [pc, #668]	; (105b4 <__kernel_ram_size+0x5b4>)
   10316:	e7f3      	b.n	10300 <__kernel_ram_size+0x300>
		 (conn->refresh &&
   10318:	1e8a      	subs	r2, r1, #2
   1031a:	2a01      	cmp	r2, #1
   1031c:	d98f      	bls.n	1023e <__kernel_ram_size+0x23e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1031e:	290b      	cmp	r1, #11
   10320:	e7f5      	b.n	1030e <__kernel_ram_size+0x30e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   10322:	213d      	movs	r1, #61	; 0x3d
   10324:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10328:	f7fb fcde 	bl	bce8 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   1032c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10330:	f7fb fb28 	bl	b984 <connection_release>
				_radio.conn_curr = NULL;
   10334:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   10338:	e6e7      	b.n	1010a <__kernel_ram_size+0x10a>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
   1033a:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
   1033e:	4640      	mov	r0, r8
   10340:	f7fd fd42 	bl	ddc8 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
   10344:	2800      	cmp	r0, #0
   10346:	d087      	beq.n	10258 <__kernel_ram_size+0x258>
		_radio.conn_curr->supervision_expire = 0;
   10348:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
   1034c:	2300      	movs	r3, #0
   1034e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
   10352:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
   10354:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
   10358:	e03e      	b.n	103d8 <__kernel_ram_size+0x3d8>
		} else if ((_radio.conn_curr->enc_rx) ||
   1035a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   1035e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   10362:	f013 0f14 	tst.w	r3, #20
   10366:	f43f af77 	beq.w	10258 <__kernel_ram_size+0x258>
					    (conn->latency + 6)) ?
   1036a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
   1036c:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
   10370:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   10372:	4299      	cmp	r1, r3
   10374:	bfc4      	itt	gt
   10376:	1f8b      	subgt	r3, r1, #6
   10378:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   1037a:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
   1037e:	bfcc      	ite	gt
   10380:	b29b      	uxthgt	r3, r3
   10382:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   10384:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
   10386:	bf1e      	ittt	ne
   10388:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
   1038c:	2300      	movne	r3, #0
   1038e:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   10392:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   10396:	2b00      	cmp	r3, #0
   10398:	f47f af5e 	bne.w	10258 <__kernel_ram_size+0x258>
				conn->appto_expire = conn->appto_reload;
   1039c:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
   103a0:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   103a4:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
   103a8:	e756      	b.n	10258 <__kernel_ram_size+0x258>
		if (_radio.crc_expire == 0) {
   103aa:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   103ae:	b913      	cbnz	r3, 103b6 <__kernel_ram_size+0x3b6>
			_radio.crc_expire = 2;
   103b0:	2302      	movs	r3, #2
   103b2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
   103b6:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
   103ba:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
   103be:	3b01      	subs	r3, #1
   103c0:	b2db      	uxtb	r3, r3
   103c2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
   103c6:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
   103ca:	fab3 f583 	clz	r5, r3
   103ce:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
   103d0:	bb86      	cbnz	r6, 10434 <__kernel_ram_size+0x434>
			_radio.conn_curr->supervision_expire =
   103d2:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
   103d4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   103d8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   103dc:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   103de:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   103e2:	f7fd fbb3 	bl	db4c <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   103e6:	7d23      	ldrb	r3, [r4, #20]
   103e8:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   103ea:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   103ee:	d010      	beq.n	10412 <__kernel_ram_size+0x412>
   103f0:	bb15      	cbnz	r5, 10438 <__kernel_ram_size+0x438>
   103f2:	b137      	cbz	r7, 10402 <__kernel_ram_size+0x402>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   103f4:	f898 3008 	ldrb.w	r3, [r8, #8]
   103f8:	06d8      	lsls	r0, r3, #27
   103fa:	d402      	bmi.n	10402 <__kernel_ram_size+0x402>
			 (pdu_data_tx->len == 0)) ||
   103fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
   103fe:	785b      	ldrb	r3, [r3, #1]
   10400:	b1d3      	cbz	r3, 10438 <__kernel_ram_size+0x438>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   10402:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
   10406:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1040a:	2b00      	cmp	r3, #0
   1040c:	bf0c      	ite	eq
   1040e:	2302      	moveq	r3, #2
   10410:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
   10412:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10414:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
   10416:	d12d      	bne.n	10474 <__kernel_ram_size+0x474>
		if (_radio.role == ROLE_MASTER) {
   10418:	7ce3      	ldrb	r3, [r4, #19]
   1041a:	2b04      	cmp	r3, #4
   1041c:	d10e      	bne.n	1043c <__kernel_ram_size+0x43c>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   1041e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10422:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   10426:	f369 12c7 	bfi	r2, r9, #7, #1
   1042a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   1042e:	f002 fcc7 	bl	12dc0 <radio_disable>
   10432:	e66a      	b.n	1010a <__kernel_ram_size+0x10a>
	struct radio_pdu_node_tx *tx_release = NULL;
   10434:	2600      	movs	r6, #0
   10436:	e7cf      	b.n	103d8 <__kernel_ram_size+0x3d8>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10438:	2303      	movs	r3, #3
   1043a:	e7ea      	b.n	10412 <__kernel_ram_size+0x412>
			radio_switch_complete_and_disable();
   1043c:	f002 fd30 	bl	12ea0 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   10440:	9910      	ldr	r1, [sp, #64]	; 0x40
   10442:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10446:	780b      	ldrb	r3, [r1, #0]
   10448:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
   1044c:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   10450:	f3c2 0240 	ubfx	r2, r2, #1, #1
   10454:	f362 0382 	bfi	r3, r2, #2, #1
   10458:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   1045a:	f7fa fc21 	bl	aca0 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   1045e:	f002 fccd 	bl	12dfc <radio_is_ready>
   10462:	2800      	cmp	r0, #0
   10464:	f43f ae51 	beq.w	1010a <__kernel_ram_size+0x10a>
   10468:	4b53      	ldr	r3, [pc, #332]	; (105b8 <__kernel_ram_size+0x5b8>)
   1046a:	9301      	str	r3, [sp, #4]
   1046c:	9300      	str	r3, [sp, #0]
   1046e:	4b53      	ldr	r3, [pc, #332]	; (105bc <__kernel_ram_size+0x5bc>)
   10470:	f7fe be28 	b.w	f0c4 <isr+0xbc>
		radio_tmr_tifs_set(RADIO_TIFS);
   10474:	2096      	movs	r0, #150	; 0x96
   10476:	f002 fd99 	bl	12fac <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   1047a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1047e:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   10482:	f000 0007 	and.w	r0, r0, #7
   10486:	f002 fcf5 	bl	12e74 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   1048a:	f002 fe6b 	bl	13164 <radio_tmr_end_capture>
   1048e:	e7d7      	b.n	10440 <__kernel_ram_size+0x440>
		LL_ASSERT(0);
   10490:	4b49      	ldr	r3, [pc, #292]	; (105b8 <__kernel_ram_size+0x5b8>)
   10492:	9301      	str	r3, [sp, #4]
   10494:	9300      	str	r3, [sp, #0]
   10496:	4b4a      	ldr	r3, [pc, #296]	; (105c0 <__kernel_ram_size+0x5c0>)
   10498:	f7fe bead 	b.w	f1f6 <isr+0x1ee>
	switch (_radio.role) {
   1049c:	7ce2      	ldrb	r2, [r4, #19]
   1049e:	2a04      	cmp	r2, #4
   104a0:	f200 823a 	bhi.w	10918 <__kernel_ram_size+0x918>
   104a4:	e8df f012 	tbh	[pc, r2, lsl #1]
   104a8:	00050228 	.word	0x00050228
   104ac:	00bf0058 	.word	0x00bf0058
   104b0:	00bf      	.short	0x00bf
	if ((_radio.state == STATE_CLOSE) &&
   104b2:	2b03      	cmp	r3, #3
   104b4:	d109      	bne.n	104ca <__kernel_ram_size+0x4ca>
	    (_radio.advertiser.chan_map_current != 0)) {
   104b6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
   104ba:	0759      	lsls	r1, r3, #29
   104bc:	d005      	beq.n	104ca <__kernel_ram_size+0x4ca>
		adv_setup();
   104be:	f7fb fb35 	bl	bb2c <adv_setup>
		radio_tx_enable();
   104c2:	f002 fc77 	bl	12db4 <radio_tx_enable>
   104c6:	f7fe be19 	b.w	f0fc <isr+0xf4>
		radio_filter_disable();
   104ca:	f002 fd33 	bl	12f34 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
   104ce:	7d23      	ldrb	r3, [r4, #20]
   104d0:	2b03      	cmp	r3, #3
   104d2:	f040 808f 	bne.w	105f4 <__kernel_ram_size+0x5f4>
		    (!_radio.advertiser.is_hdcd)) {
   104d6:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
   104da:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   104de:	f040 8089 	bne.w	105f4 <__kernel_ram_size+0x5f4>
			entropy_nrf_get_entropy_isr(_radio.entropy,
   104e2:	2201      	movs	r2, #1
   104e4:	a910      	add	r1, sp, #64	; 0x40
   104e6:	6860      	ldr	r0, [r4, #4]
   104e8:	f003 fca4 	bl	13e34 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
   104ec:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
   104f0:	4834      	ldr	r0, [pc, #208]	; (105c4 <__kernel_ram_size+0x5c4>)
			random_delay %= 10;
   104f2:	230a      	movs	r3, #10
   104f4:	fbb1 f2f3 	udiv	r2, r1, r3
   104f8:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
   104fc:	3201      	adds	r2, #1
   104fe:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
   10500:	b2d6      	uxtb	r6, r2
   10502:	fba6 0100 	umull	r0, r1, r6, r0
   10506:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
   10508:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
   1050c:	fb03 1106 	mla	r1, r3, r6, r1
   10510:	a325      	add	r3, pc, #148	; (adr r3, 105a8 <__kernel_ram_size+0x5a8>)
   10512:	e9d3 2300 	ldrd	r2, r3, [r3]
   10516:	f7ef fe7d 	bl	214 <__aeabi_uldivmod>
			ticker_status =
   1051a:	f640 734b 	movw	r3, #3915	; 0xf4b
   1051e:	9306      	str	r3, [sp, #24]
   10520:	4b29      	ldr	r3, [pc, #164]	; (105c8 <__kernel_ram_size+0x5c8>)
   10522:	9305      	str	r3, [sp, #20]
   10524:	9504      	str	r5, [sp, #16]
   10526:	b283      	uxth	r3, r0
   10528:	9503      	str	r5, [sp, #12]
   1052a:	9502      	str	r5, [sp, #8]
   1052c:	9501      	str	r5, [sp, #4]
   1052e:	9500      	str	r5, [sp, #0]
   10530:	2205      	movs	r2, #5
   10532:	4629      	mov	r1, r5
   10534:	4628      	mov	r0, r5
   10536:	f7f7 ffc3 	bl	84c0 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1053a:	f030 0302 	bics.w	r3, r0, #2
   1053e:	d059      	beq.n	105f4 <__kernel_ram_size+0x5f4>
   10540:	7ca3      	ldrb	r3, [r4, #18]
   10542:	2b05      	cmp	r3, #5
   10544:	d056      	beq.n	105f4 <__kernel_ram_size+0x5f4>
   10546:	4b1c      	ldr	r3, [pc, #112]	; (105b8 <__kernel_ram_size+0x5b8>)
   10548:	9301      	str	r3, [sp, #4]
   1054a:	9300      	str	r3, [sp, #0]
   1054c:	4a1f      	ldr	r2, [pc, #124]	; (105cc <__kernel_ram_size+0x5cc>)
   1054e:	4b20      	ldr	r3, [pc, #128]	; (105d0 <__kernel_ram_size+0x5d0>)
   10550:	4920      	ldr	r1, [pc, #128]	; (105d4 <__kernel_ram_size+0x5d4>)
   10552:	4821      	ldr	r0, [pc, #132]	; (105d8 <__kernel_ram_size+0x5d8>)
   10554:	f7ff b906 	b.w	f764 <isr+0x75c>
	if (_radio.state == STATE_CLOSE) {
   10558:	2b03      	cmp	r3, #3
   1055a:	d13f      	bne.n	105dc <__kernel_ram_size+0x5dc>
		radio_tmr_tifs_set(RADIO_TIFS);
   1055c:	2096      	movs	r0, #150	; 0x96
   1055e:	f002 fd25 	bl	12fac <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   10562:	2300      	movs	r3, #0
   10564:	4619      	mov	r1, r3
   10566:	461a      	mov	r2, r3
   10568:	4618      	mov	r0, r3
   1056a:	f002 fc8f 	bl	12e8c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   1056e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   10572:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
   10576:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1057a:	3008      	adds	r0, #8
   1057c:	f002 fbfa 	bl	12d74 <radio_pkt_rx_set>
		radio_rssi_measure();
   10580:	f002 fc9c 	bl	12ebc <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   10584:	f001 ff02 	bl	1238c <ctrl_rl_enabled>
   10588:	b138      	cbz	r0, 1059a <__kernel_ram_size+0x59a>
			u8_t count, *irks = ctrl_irks_get(&count);
   1058a:	a810      	add	r0, sp, #64	; 0x40
   1058c:	f001 fc4e 	bl	11e2c <ctrl_irks_get>
			radio_ar_configure(count, irks);
   10590:	4601      	mov	r1, r0
   10592:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   10596:	f002 fe8d 	bl	132b4 <radio_ar_configure>
		_radio.state = STATE_RX;
   1059a:	2301      	movs	r3, #1
   1059c:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
   1059e:	f002 fc03 	bl	12da8 <radio_rx_enable>
   105a2:	f7fe bdab 	b.w	f0fc <isr+0xf4>
   105a6:	bf00      	nop
   105a8:	1afd498d 	.word	0x1afd498d
   105ac:	00000007 	.word	0x00000007
   105b0:	00022060 	.word	0x00022060
   105b4:	00022040 	.word	0x00022040
   105b8:	000153a9 	.word	0x000153a9
   105bc:	000180c1 	.word	0x000180c1
   105c0:	000180cd 	.word	0x000180cd
   105c4:	d4a51000 	.word	0xd4a51000
   105c8:	0000b581 	.word	0x0000b581
   105cc:	00016765 	.word	0x00016765
   105d0:	000180e0 	.word	0x000180e0
   105d4:	000167b4 	.word	0x000167b4
   105d8:	0001872f 	.word	0x0001872f
		radio_filter_disable();
   105dc:	f002 fcaa 	bl	12f34 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   105e0:	7d23      	ldrb	r3, [r4, #20]
   105e2:	2b05      	cmp	r3, #5
   105e4:	d106      	bne.n	105f4 <__kernel_ram_size+0x5f4>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   105e6:	2300      	movs	r3, #0
   105e8:	9300      	str	r3, [sp, #0]
   105ea:	2204      	movs	r2, #4
   105ec:	4619      	mov	r1, r3
   105ee:	4618      	mov	r0, r3
   105f0:	f7f7 ffb4 	bl	855c <ticker_stop>
	_radio.role = ROLE_NONE;
   105f4:	2500      	movs	r5, #0
   105f6:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
   105f8:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
   105fa:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
   105fc:	f002 fd54 	bl	130a8 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10600:	462a      	mov	r2, r5
   10602:	4629      	mov	r1, r5
   10604:	4628      	mov	r0, r5
   10606:	4bb2      	ldr	r3, [pc, #712]	; (108d0 <__kernel_ram_size+0x8d0>)
   10608:	f7f7 f94c 	bl	78a4 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1060c:	4605      	mov	r5, r0
   1060e:	2800      	cmp	r0, #0
   10610:	f000 8188 	beq.w	10924 <__kernel_ram_size+0x924>
   10614:	4baf      	ldr	r3, [pc, #700]	; (108d4 <__kernel_ram_size+0x8d4>)
   10616:	9301      	str	r3, [sp, #4]
   10618:	9300      	str	r3, [sp, #0]
   1061a:	4aaf      	ldr	r2, [pc, #700]	; (108d8 <__kernel_ram_size+0x8d8>)
   1061c:	4baf      	ldr	r3, [pc, #700]	; (108dc <__kernel_ram_size+0x8dc>)
   1061e:	49b0      	ldr	r1, [pc, #704]	; (108e0 <__kernel_ram_size+0x8e0>)
   10620:	48b0      	ldr	r0, [pc, #704]	; (108e4 <__kernel_ram_size+0x8e4>)
   10622:	f7ff b89f 	b.w	f764 <isr+0x75c>
	if (_radio.conn_curr == 0) {
   10626:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1062a:	2800      	cmp	r0, #0
   1062c:	d0e2      	beq.n	105f4 <__kernel_ram_size+0x5f4>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   1062e:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   10632:	b181      	cbz	r1, 10656 <__kernel_ram_size+0x656>
   10634:	7ce3      	ldrb	r3, [r4, #19]
   10636:	2b03      	cmp	r3, #3
   10638:	d003      	beq.n	10642 <__kernel_ram_size+0x642>
   1063a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   1063e:	07da      	lsls	r2, r3, #31
   10640:	d509      	bpl.n	10656 <__kernel_ram_size+0x656>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   10642:	f7fb fb51 	bl	bce8 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10646:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1064a:	f7fb f99b 	bl	b984 <connection_release>
			_radio.conn_curr = NULL;
   1064e:	2300      	movs	r3, #0
   10650:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   10654:	e7ce      	b.n	105f4 <__kernel_ram_size+0x5f4>
	latency_event = _radio.conn_curr->latency_event;
   10656:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   1065a:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
   1065e:	f10b 0601 	add.w	r6, fp, #1
   10662:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
   10664:	2f00      	cmp	r7, #0
   10666:	f000 8084 	beq.w	10772 <__kernel_ram_size+0x772>
		if (_radio.role == ROLE_SLAVE) {
   1066a:	7ce3      	ldrb	r3, [r4, #19]
   1066c:	2b03      	cmp	r3, #3
   1066e:	d173      	bne.n	10758 <__kernel_ram_size+0x758>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10670:	f002 fd6c 	bl	1314c <radio_tmr_aa_restore>
   10674:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
   10676:	f002 fd6f 	bl	13158 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   1067a:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
   1067e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
   10682:	f003 0307 	and.w	r3, r3, #7
   10686:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10688:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
   1068c:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
   1068e:	d052      	beq.n	10736 <__kernel_ram_size+0x736>
		return 40;
   10690:	2b04      	cmp	r3, #4
   10692:	bf0c      	ite	eq
   10694:	f44f 78bc 	moveq.w	r8, #376	; 0x178
   10698:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   1069c:	f100 0330 	add.w	r3, r0, #48	; 0x30
   106a0:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
   106a2:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   106a4:	930a      	str	r3, [sp, #40]	; 0x28
   106a6:	f8df a24c 	ldr.w	sl, [pc, #588]	; 108f4 <__kernel_ram_size+0x8f4>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   106aa:	a387      	add	r3, pc, #540	; (adr r3, 108c8 <__kernel_ram_size+0x8c8>)
   106ac:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   106b0:	d844      	bhi.n	1073c <__kernel_ram_size+0x73c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   106b2:	fba0 010a 	umull	r0, r1, r0, sl
   106b6:	f7ef fdad 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   106ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   106bc:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   106be:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   106c2:	a381      	add	r3, pc, #516	; (adr r3, 108c8 <__kernel_ram_size+0x8c8>)
   106c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   106c8:	fba0 010a 	umull	r0, r1, r0, sl
   106cc:	f7ef fda2 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
   106d0:	2300      	movs	r3, #0
   106d2:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   106d4:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   106d6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   106da:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
   106de:	b3ab      	cbz	r3, 1074c <__kernel_ram_size+0x74c>
				if (pdu_data_tx->len ||
   106e0:	795b      	ldrb	r3, [r3, #5]
   106e2:	b913      	cbnz	r3, 106ea <__kernel_ram_size+0x6ea>
   106e4:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
   106e8:	b10b      	cbz	r3, 106ee <__kernel_ram_size+0x6ee>
					_radio.conn_curr->latency_event = 0;
   106ea:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
   106ec:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   106ee:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   106f2:	2200      	movs	r2, #0
   106f4:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   106f6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   106fa:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   106fe:	b1c3      	cbz	r3, 10732 <__kernel_ram_size+0x732>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   10700:	429e      	cmp	r6, r3
   10702:	f080 80b0 	bcs.w	10866 <__kernel_ram_size+0x866>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   10706:	1b9b      	subs	r3, r3, r6
   10708:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
   1070a:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   1070c:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   1070e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   10712:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   10714:	f240 80a9 	bls.w	1086a <__kernel_ram_size+0x86a>
			else if (_radio.role == ROLE_SLAVE) {
   10718:	7ce3      	ldrb	r3, [r4, #19]
   1071a:	2b03      	cmp	r3, #3
   1071c:	d109      	bne.n	10732 <__kernel_ram_size+0x732>
				if (latency_event != 0) {
   1071e:	f1bb 0f00 	cmp.w	fp, #0
   10722:	f040 80a2 	bne.w	1086a <__kernel_ram_size+0x86a>
					force = _radio.conn_curr->slave.force & 0x01;
   10726:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   10728:	087b      	lsrs	r3, r7, #1
					if (force) {
   1072a:	f017 0701 	ands.w	r7, r7, #1
   1072e:	d13d      	bne.n	107ac <__kernel_ram_size+0x7ac>
					_radio.conn_curr->slave.force >>= 1;
   10730:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
   10732:	2700      	movs	r7, #0
   10734:	e03d      	b.n	107b2 <__kernel_ram_size+0x7b2>
		return 24;
   10736:	f04f 0818 	mov.w	r8, #24
   1073a:	e7af      	b.n	1069c <__kernel_ram_size+0x69c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   1073c:	fba9 010a 	umull	r0, r1, r9, sl
   10740:	f7ef fd68 	bl	214 <__aeabi_uldivmod>
   10744:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10746:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1074a:	e7ba      	b.n	106c2 <__kernel_ram_size+0x6c2>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   1074c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   10750:	07db      	lsls	r3, r3, #31
   10752:	d5cc      	bpl.n	106ee <__kernel_ram_size+0x6ee>
				_radio.conn_curr->latency_event =
   10754:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   10756:	e7c9      	b.n	106ec <__kernel_ram_size+0x6ec>
		} else if (reason_peer) {
   10758:	b149      	cbz	r1, 1076e <__kernel_ram_size+0x76e>
			_radio.conn_curr->master.terminate_ack = 1;
   1075a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   1075e:	f043 0301 	orr.w	r3, r3, #1
   10762:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   10766:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
   1076a:	4645      	mov	r5, r8
   1076c:	e7bf      	b.n	106ee <__kernel_ram_size+0x6ee>
	ticks_drift_minus = 0;
   1076e:	4688      	mov	r8, r1
   10770:	e7fb      	b.n	1076a <__kernel_ram_size+0x76a>
	else if (_radio.conn_curr->connect_expire) {
   10772:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   10774:	b185      	cbz	r5, 10798 <__kernel_ram_size+0x798>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   10776:	42ae      	cmp	r6, r5
   10778:	d204      	bcs.n	10784 <__kernel_ram_size+0x784>
			_radio.conn_curr->connect_expire -= elapsed_event;
   1077a:	1bad      	subs	r5, r5, r6
   1077c:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   1077e:	463d      	mov	r5, r7
   10780:	46a8      	mov	r8, r5
   10782:	e7b8      	b.n	106f6 <__kernel_ram_size+0x6f6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   10784:	213e      	movs	r1, #62	; 0x3e
   10786:	f7fb faaf 	bl	bce8 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   1078a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1078e:	f7fb f8f9 	bl	b984 <connection_release>
			_radio.conn_curr = NULL;
   10792:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
   10796:	e72d      	b.n	105f4 <__kernel_ram_size+0x5f4>
		if (!_radio.conn_curr->supervision_expire) {
   10798:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
   1079c:	f1b8 0f00 	cmp.w	r8, #0
   107a0:	d1ee      	bne.n	10780 <__kernel_ram_size+0x780>
			_radio.conn_curr->supervision_expire =
   107a2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   107a4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   107a8:	4645      	mov	r5, r8
   107aa:	e7a4      	b.n	106f6 <__kernel_ram_size+0x6f6>
						_radio.conn_curr->slave.force |=
   107ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   107b0:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
   107b2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   107b6:	b123      	cbz	r3, 107c2 <__kernel_ram_size+0x7c2>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   107b8:	429e      	cmp	r6, r3
   107ba:	d258      	bcs.n	1086e <__kernel_ram_size+0x86e>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   107bc:	1b9b      	subs	r3, r3, r6
   107be:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   107c2:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   107c6:	b123      	cbz	r3, 107d2 <__kernel_ram_size+0x7d2>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   107c8:	429e      	cmp	r6, r3
   107ca:	d252      	bcs.n	10872 <__kernel_ram_size+0x872>
			_radio.conn_curr->apto_expire -= elapsed_event;
   107cc:	1b9b      	subs	r3, r3, r6
   107ce:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   107d2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   107d6:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   107da:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   107de:	b123      	cbz	r3, 107ea <__kernel_ram_size+0x7ea>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   107e0:	429e      	cmp	r6, r3
   107e2:	d25c      	bcs.n	1089e <__kernel_ram_size+0x89e>
			_radio.conn_curr->appto_expire -= elapsed_event;
   107e4:	1b9e      	subs	r6, r3, r6
   107e6:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   107ea:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   107ee:	428b      	cmp	r3, r1
   107f0:	d006      	beq.n	10800 <__kernel_ram_size+0x800>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   107f2:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   107f6:	3b01      	subs	r3, #1
   107f8:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
   107fa:	bf9c      	itt	ls
   107fc:	2300      	movls	r3, #0
   107fe:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   10800:	b917      	cbnz	r7, 10808 <__kernel_ram_size+0x808>
   10802:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   10804:	455b      	cmp	r3, fp
   10806:	d05c      	beq.n	108c2 <__kernel_ram_size+0x8c2>
		lazy = _radio.conn_curr->latency_event + 1;
   10808:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   1080a:	3301      	adds	r3, #1
   1080c:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   1080e:	b935      	cbnz	r5, 1081e <__kernel_ram_size+0x81e>
   10810:	f1b8 0f00 	cmp.w	r8, #0
   10814:	d103      	bne.n	1081e <__kernel_ram_size+0x81e>
   10816:	b913      	cbnz	r3, 1081e <__kernel_ram_size+0x81e>
	    (lazy != 0) || (force != 0)) {
   10818:	2f00      	cmp	r7, #0
   1081a:	f43f aeeb 	beq.w	105f4 <__kernel_ram_size+0x5f4>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   1081e:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
   10822:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   10824:	3207      	adds	r2, #7
		ticker_status =
   10826:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   10828:	b2d6      	uxtb	r6, r2
		ticker_status =
   1082a:	4a2f      	ldr	r2, [pc, #188]	; (108e8 <__kernel_ram_size+0x8e8>)
   1082c:	9205      	str	r2, [sp, #20]
   1082e:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
   10830:	9606      	str	r6, [sp, #24]
		ticker_status =
   10832:	9704      	str	r7, [sp, #16]
   10834:	9102      	str	r1, [sp, #8]
   10836:	9101      	str	r1, [sp, #4]
   10838:	f8cd 8000 	str.w	r8, [sp]
   1083c:	4632      	mov	r2, r6
   1083e:	4608      	mov	r0, r1
   10840:	f7f7 fe3e 	bl	84c0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10844:	f030 0302 	bics.w	r3, r0, #2
   10848:	f43f aed4 	beq.w	105f4 <__kernel_ram_size+0x5f4>
   1084c:	7ca3      	ldrb	r3, [r4, #18]
   1084e:	429e      	cmp	r6, r3
   10850:	f43f aed0 	beq.w	105f4 <__kernel_ram_size+0x5f4>
   10854:	4b1f      	ldr	r3, [pc, #124]	; (108d4 <__kernel_ram_size+0x8d4>)
   10856:	9301      	str	r3, [sp, #4]
   10858:	9300      	str	r3, [sp, #0]
   1085a:	4a1f      	ldr	r2, [pc, #124]	; (108d8 <__kernel_ram_size+0x8d8>)
   1085c:	4b23      	ldr	r3, [pc, #140]	; (108ec <__kernel_ram_size+0x8ec>)
   1085e:	4920      	ldr	r1, [pc, #128]	; (108e0 <__kernel_ram_size+0x8e0>)
   10860:	4823      	ldr	r0, [pc, #140]	; (108f0 <__kernel_ram_size+0x8f0>)
   10862:	f7fe bf7f 	b.w	f764 <isr+0x75c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   10866:	2108      	movs	r1, #8
   10868:	e6eb      	b.n	10642 <__kernel_ram_size+0x642>
				force = 1;
   1086a:	2701      	movs	r7, #1
   1086c:	e7a1      	b.n	107b2 <__kernel_ram_size+0x7b2>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   1086e:	2122      	movs	r1, #34	; 0x22
   10870:	e6e7      	b.n	10642 <__kernel_ram_size+0x642>
			_radio.conn_curr->apto_expire = 0;
   10872:	2300      	movs	r3, #0
   10874:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
   10878:	2002      	movs	r0, #2
   1087a:	f7f9 fe87 	bl	a58c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   1087e:	b928      	cbnz	r0, 1088c <__kernel_ram_size+0x88c>
   10880:	4b14      	ldr	r3, [pc, #80]	; (108d4 <__kernel_ram_size+0x8d4>)
   10882:	9301      	str	r3, [sp, #4]
   10884:	9300      	str	r3, [sp, #0]
   10886:	4b19      	ldr	r3, [pc, #100]	; (108ec <__kernel_ram_size+0x8ec>)
   10888:	f7fe be36 	b.w	f4f8 <isr+0x4f0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
   1088c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10890:	8c1b      	ldrh	r3, [r3, #32]
   10892:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
   10894:	230a      	movs	r3, #10
   10896:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
   10898:	f7fa fce2 	bl	b260 <packet_rx_enqueue>
   1089c:	e799      	b.n	107d2 <__kernel_ram_size+0x7d2>
			_radio.conn_curr->appto_expire = 0;
   1089e:	2300      	movs	r3, #0
   108a0:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   108a4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   108a8:	2b00      	cmp	r3, #0
   108aa:	d19e      	bne.n	107ea <__kernel_ram_size+0x7ea>
   108ac:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   108b0:	428b      	cmp	r3, r1
   108b2:	d19e      	bne.n	107f2 <__kernel_ram_size+0x7f2>
				_radio.conn_curr->llcp_type = LLCP_PING;
   108b4:	2307      	movs	r3, #7
   108b6:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   108ba:	1e4b      	subs	r3, r1, #1
   108bc:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   108c0:	e793      	b.n	107ea <__kernel_ram_size+0x7ea>
	lazy = 0;
   108c2:	463b      	mov	r3, r7
   108c4:	e7a3      	b.n	1080e <__kernel_ram_size+0x80e>
   108c6:	bf00      	nop
   108c8:	1afd498d 	.word	0x1afd498d
   108cc:	00000007 	.word	0x00000007
   108d0:	20003d50 	.word	0x20003d50
   108d4:	000153a9 	.word	0x000153a9
   108d8:	00016765 	.word	0x00016765
   108dc:	000181b1 	.word	0x000181b1
   108e0:	000167b4 	.word	0x000167b4
   108e4:	00018be1 	.word	0x00018be1
   108e8:	0000b5c9 	.word	0x0000b5c9
   108ec:	000180ee 	.word	0x000180ee
   108f0:	0001879d 	.word	0x0001879d
   108f4:	3b9aca00 	.word	0x3b9aca00
		LL_ASSERT((_radio.state == STATE_STOP) ||
   108f8:	3b04      	subs	r3, #4
   108fa:	2b01      	cmp	r3, #1
   108fc:	d908      	bls.n	10910 <__kernel_ram_size+0x910>
   108fe:	4b12      	ldr	r3, [pc, #72]	; (10948 <__kernel_ram_size+0x948>)
   10900:	9301      	str	r3, [sp, #4]
   10902:	9300      	str	r3, [sp, #0]
   10904:	4a11      	ldr	r2, [pc, #68]	; (1094c <__kernel_ram_size+0x94c>)
   10906:	4b12      	ldr	r3, [pc, #72]	; (10950 <__kernel_ram_size+0x950>)
   10908:	4912      	ldr	r1, [pc, #72]	; (10954 <__kernel_ram_size+0x954>)
   1090a:	4813      	ldr	r0, [pc, #76]	; (10958 <__kernel_ram_size+0x958>)
   1090c:	f7fe bf2a 	b.w	f764 <isr+0x75c>
		_radio.state = STATE_NONE;
   10910:	2300      	movs	r3, #0
   10912:	7523      	strb	r3, [r4, #20]
   10914:	f7fe bc22 	b.w	f15c <isr+0x154>
		LL_ASSERT(0);
   10918:	4b0b      	ldr	r3, [pc, #44]	; (10948 <__kernel_ram_size+0x948>)
   1091a:	9301      	str	r3, [sp, #4]
   1091c:	9300      	str	r3, [sp, #0]
   1091e:	4b0c      	ldr	r3, [pc, #48]	; (10950 <__kernel_ram_size+0x950>)
   10920:	f7fe bc69 	b.w	f1f6 <isr+0x1ee>
	clock_control_off(_radio.hf_clock, NULL);
   10924:	6820      	ldr	r0, [r4, #0]
   10926:	6843      	ldr	r3, [r0, #4]
   10928:	4629      	mov	r1, r5
   1092a:	685b      	ldr	r3, [r3, #4]
   1092c:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   1092e:	2201      	movs	r2, #1
   10930:	4611      	mov	r1, r2
   10932:	4628      	mov	r0, r5
   10934:	f7f6 ff8e 	bl	7854 <mayfly_enable>
   10938:	f7fe bc10 	b.w	f15c <isr+0x154>
		LL_ASSERT(0);
   1093c:	4b02      	ldr	r3, [pc, #8]	; (10948 <__kernel_ram_size+0x948>)
   1093e:	9301      	str	r3, [sp, #4]
   10940:	9300      	str	r3, [sp, #0]
   10942:	4b06      	ldr	r3, [pc, #24]	; (1095c <__kernel_ram_size+0x95c>)
   10944:	f7fe bc57 	b.w	f1f6 <isr+0x1ee>
   10948:	000153a9 	.word	0x000153a9
   1094c:	00016765 	.word	0x00016765
   10950:	000180fd 	.word	0x000180fd
   10954:	000167b4 	.word	0x000167b4
   10958:	00018813 	.word	0x00018813
   1095c:	00018113 	.word	0x00018113

00010960 <radio_init>:
{
   10960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   10964:	4e3d      	ldr	r6, [pc, #244]	; (10a5c <radio_init+0xfc>)
{
   10966:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10968:	f89d c01c 	ldrb.w	ip, [sp, #28]
   1096c:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
   10970:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   10974:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
   10978:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   1097a:	f44f 70aa 	mov.w	r0, #340	; 0x154
   1097e:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
   10982:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
   10986:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
   1098a:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
   1098c:	f10c 0401 	add.w	r4, ip, #1
   10990:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
   10992:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
   10994:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   10998:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   1099c:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
   1099e:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   109a0:	bf98      	it	ls
   109a2:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
   109a6:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   109aa:	bf88      	it	hi
   109ac:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   109b0:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
   109b4:	bf8c      	ite	hi
   109b6:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   109ba:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
   109be:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   109c2:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   109c6:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
   109ca:	bf8c      	ite	hi
   109cc:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   109d0:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   109d2:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   109d6:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
   109da:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
   109de:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   109e2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   109e6:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   109ea:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
   109ee:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   109f2:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   109f4:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
   109f6:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   109fa:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   109fc:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
   10a00:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10a04:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   10a08:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   10a0a:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   10a0e:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   10a12:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   10a16:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   10a1a:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   10a1e:	340a      	adds	r4, #10
   10a20:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   10a24:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   10a26:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   10a28:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   10a2c:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   10a30:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   10a32:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
   10a36:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10a3a:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
   10a3e:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
   10a42:	d003      	beq.n	10a4c <radio_init+0xec>
		return (retcode + mem_size);
   10a44:	442c      	add	r4, r5
}
   10a46:	4620      	mov	r0, r4
   10a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   10a4c:	2301      	movs	r3, #1
   10a4e:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
   10a52:	f7f9 fe5f 	bl	a714 <common_init>
	radio_setup();
   10a56:	f002 f8dd 	bl	12c14 <radio_setup>
	return retcode;
   10a5a:	e7f4      	b.n	10a46 <radio_init+0xe6>
   10a5c:	200008c8 	.word	0x200008c8

00010a60 <ll_reset>:
{
   10a60:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   10a62:	2103      	movs	r1, #3
   10a64:	2005      	movs	r0, #5
   10a66:	f7f9 ff3f 	bl	a8e8 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   10a6a:	2104      	movs	r1, #4
   10a6c:	2006      	movs	r0, #6
   10a6e:	f7f9 ff3b 	bl	a8e8 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   10a72:	4c22      	ldr	r4, [pc, #136]	; (10afc <ll_reset+0x9c>)
   10a74:	2500      	movs	r5, #0
   10a76:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   10a7a:	b2ab      	uxth	r3, r5
   10a7c:	429a      	cmp	r2, r3
   10a7e:	f105 0501 	add.w	r5, r5, #1
   10a82:	d834      	bhi.n	10aee <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
   10a84:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10a88:	f36f 13c7 	bfc	r3, #7, #1
   10a8c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   10a90:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   10a94:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   10a96:	f360 0300 	bfi	r3, r0, #0, #1
   10a9a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10a9e:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10aa0:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   10aa4:	fbb3 f3f2 	udiv	r3, r3, r2
   10aa8:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10aac:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
   10ab0:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10ab4:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   10ab6:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
   10aba:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10abe:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
   10ac2:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
   10ac6:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   10aca:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10ace:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
   10ad2:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
   10ad6:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
   10ada:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
   10ade:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
   10ae2:	f001 ff17 	bl	12914 <ll_filter_reset>
}
   10ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   10aea:	f7f9 be13 	b.w	a714 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   10aee:	1da8      	adds	r0, r5, #6
   10af0:	21ff      	movs	r1, #255	; 0xff
   10af2:	b2c0      	uxtb	r0, r0
   10af4:	f7f9 fef8 	bl	a8e8 <role_disable>
   10af8:	e7bd      	b.n	10a76 <ll_reset+0x16>
   10afa:	bf00      	nop
   10afc:	200008c8 	.word	0x200008c8

00010b00 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   10b00:	4b02      	ldr	r3, [pc, #8]	; (10b0c <ll_adv_is_enabled+0xc>)
   10b02:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   10b06:	09c0      	lsrs	r0, r0, #7
   10b08:	4770      	bx	lr
   10b0a:	bf00      	nop
   10b0c:	200008c8 	.word	0x200008c8

00010b10 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   10b10:	4b04      	ldr	r3, [pc, #16]	; (10b24 <radio_adv_filter_pol_get+0x14>)
   10b12:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   10b16:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   10b18:	bfba      	itte	lt
   10b1a:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   10b1e:	0980      	lsrlt	r0, r0, #6
   10b20:	2000      	movge	r0, #0
}
   10b22:	4770      	bx	lr
   10b24:	200008c8 	.word	0x200008c8

00010b28 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10b28:	4a09      	ldr	r2, [pc, #36]	; (10b50 <ll_scan_is_enabled+0x28>)
   10b2a:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   10b2e:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   10b32:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10b36:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   10b3a:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10b3c:	f003 0301 	and.w	r3, r3, #1
   10b40:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   10b44:	bf14      	ite	ne
   10b46:	2004      	movne	r0, #4
   10b48:	2000      	moveq	r0, #0
}
   10b4a:	4318      	orrs	r0, r3
   10b4c:	4770      	bx	lr
   10b4e:	bf00      	nop
   10b50:	200008c8 	.word	0x200008c8

00010b54 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   10b54:	4b05      	ldr	r3, [pc, #20]	; (10b6c <radio_scan_filter_pol_get+0x18>)
   10b56:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   10b5a:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   10b5e:	bf1c      	itt	ne
   10b60:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   10b64:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   10b68:	4770      	bx	lr
   10b6a:	bf00      	nop
   10b6c:	200008c8 	.word	0x200008c8

00010b70 <radio_connect_enable>:
{
   10b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   10b74:	f8df 8384 	ldr.w	r8, [pc, #900]	; 10efc <radio_connect_enable+0x38c>
{
   10b78:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
   10b7a:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
   10b7e:	9303      	str	r3, [sp, #12]
   10b80:	4683      	mov	fp, r0
   10b82:	468a      	mov	sl, r1
   10b84:	4691      	mov	r9, r2
   10b86:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   10b88:	2e00      	cmp	r6, #0
   10b8a:	f040 819c 	bne.w	10ec6 <radio_connect_enable+0x356>
	link = mem_acquire(&_radio.link_rx_free);
   10b8e:	f508 70a4 	add.w	r0, r8, #328	; 0x148
   10b92:	f7f6 fdbc 	bl	770e <mem_acquire>
	if (!link) {
   10b96:	4607      	mov	r7, r0
   10b98:	b150      	cbz	r0, 10bb0 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   10b9a:	f508 7086 	add.w	r0, r8, #268	; 0x10c
   10b9e:	f7f6 fdb6 	bl	770e <mem_acquire>
	if (!conn) {
   10ba2:	4604      	mov	r4, r0
   10ba4:	b930      	cbnz	r0, 10bb4 <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   10ba6:	f508 71a4 	add.w	r1, r8, #328	; 0x148
   10baa:	4638      	mov	r0, r7
   10bac:	f7f6 fdc9 	bl	7742 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   10bb0:	2007      	movs	r0, #7
   10bb2:	e15c      	b.n	10e6e <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   10bb4:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
   10bb8:	f36b 1386 	bfi	r3, fp, #6, #1
   10bbc:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   10bc0:	2206      	movs	r2, #6
   10bc2:	4651      	mov	r1, sl
   10bc4:	f108 00ea 	add.w	r0, r8, #234	; 0xea
   10bc8:	f7f1 f818 	bl	1bfc <memcpy>
	_radio.scanner.conn_latency = latency;
   10bcc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10bd0:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10bd4:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   10bd6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
   10bda:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10bde:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   10be0:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10be4:	f002 f8d2 	bl	12d8c <radio_tx_ready_delay_get>
   10be8:	49bb      	ldr	r1, [pc, #748]	; (10ed8 <radio_connect_enable+0x368>)
   10bea:	f200 4052 	addw	r0, r0, #1106	; 0x452
   10bee:	a3b8      	add	r3, pc, #736	; (adr r3, 10ed0 <radio_connect_enable+0x360>)
   10bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   10bf4:	fba0 0101 	umull	r0, r1, r0, r1
   10bf8:	f7ef fb0c 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   10bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10c00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10c04:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
   10c08:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   10c0a:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 10f00 <radio_connect_enable+0x390>
	conn->llcp_features = RADIO_BLE_FEAT;
   10c0e:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   10c12:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   10c16:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   10c18:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   10c1c:	2104      	movs	r1, #4
   10c1e:	a805      	add	r0, sp, #20
   10c20:	f7f7 fdac 	bl	877c <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   10c24:	f8dd c014 	ldr.w	ip, [sp, #20]
   10c28:	2000      	movs	r0, #0
   10c2a:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   10c2e:	231f      	movs	r3, #31
	transitions = 0;
   10c30:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   10c32:	2101      	movs	r1, #1
	while (bit_idx--) {
   10c34:	3b01      	subs	r3, #1
   10c36:	b2db      	uxtb	r3, r3
   10c38:	2bff      	cmp	r3, #255	; 0xff
   10c3a:	d103      	bne.n	10c44 <radio_connect_enable+0xd4>
   10c3c:	b3d0      	cbz	r0, 10cb4 <radio_connect_enable+0x144>
   10c3e:	f8cd c014 	str.w	ip, [sp, #20]
   10c42:	e037      	b.n	10cb4 <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   10c44:	fa2c fe03 	lsr.w	lr, ip, r3
   10c48:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   10c4c:	45d6      	cmp	lr, sl
   10c4e:	d11a      	bne.n	10c86 <radio_connect_enable+0x116>
			consecutive_cnt++;
   10c50:	3101      	adds	r1, #1
   10c52:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   10c54:	2906      	cmp	r1, #6
   10c56:	d807      	bhi.n	10c68 <radio_connect_enable+0xf8>
   10c58:	2b1b      	cmp	r3, #27
   10c5a:	d81a      	bhi.n	10c92 <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   10c5c:	b122      	cbz	r2, 10c68 <radio_connect_enable+0xf8>
   10c5e:	2b1b      	cmp	r3, #27
   10c60:	d017      	beq.n	10c92 <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   10c62:	2a01      	cmp	r2, #1
   10c64:	d815      	bhi.n	10c92 <radio_connect_enable+0x122>
   10c66:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   10c68:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   10c6c:	f1be 0f00 	cmp.w	lr, #0
   10c70:	f000 8100 	beq.w	10e74 <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   10c74:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   10c78:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   10c7c:	3201      	adds	r2, #1
   10c7e:	2001      	movs	r0, #1
   10c80:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   10c82:	4601      	mov	r1, r0
   10c84:	e005      	b.n	10c92 <radio_connect_enable+0x122>
			transitions++;
   10c86:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   10c88:	2b1b      	cmp	r3, #27
			transitions++;
   10c8a:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   10c8c:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   10c90:	d9e5      	bls.n	10c5e <radio_connect_enable+0xee>
		if (transitions > 24) {
   10c92:	2a18      	cmp	r2, #24
   10c94:	f240 80f6 	bls.w	10e84 <radio_connect_enable+0x314>
   10c98:	b108      	cbz	r0, 10c9e <radio_connect_enable+0x12e>
   10c9a:	f8cd c014 	str.w	ip, [sp, #20]
   10c9e:	3301      	adds	r3, #1
   10ca0:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   10ca2:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   10ca6:	f1be 0f00 	cmp.w	lr, #0
   10caa:	f000 80e8 	beq.w	10e7e <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   10cae:	425b      	negs	r3, r3
   10cb0:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   10cb2:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   10cb4:	9b05      	ldr	r3, [sp, #20]
   10cb6:	a806      	add	r0, sp, #24
   10cb8:	ea83 0308 	eor.w	r3, r3, r8
   10cbc:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   10cc0:	2104      	movs	r1, #4
   10cc2:	f7f6 fecf 	bl	7a64 <util_ones_count_get>
   10cc6:	2801      	cmp	r0, #1
   10cc8:	f240 80e3 	bls.w	10e92 <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   10ccc:	9b05      	ldr	r3, [sp, #20]
   10cce:	b29a      	uxth	r2, r3
   10cd0:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   10cd4:	f000 80d8 	beq.w	10e88 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   10cd8:	2204      	movs	r2, #4
   10cda:	a905      	add	r1, sp, #20
   10cdc:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   10ce0:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   10ce2:	f7f0 ff8b 	bl	1bfc <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   10ce6:	2103      	movs	r1, #3
   10ce8:	f104 0014 	add.w	r0, r4, #20
   10cec:	f7f7 fd46 	bl	877c <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   10cf0:	2205      	movs	r2, #5
   10cf2:	497a      	ldr	r1, [pc, #488]	; (10edc <radio_connect_enable+0x36c>)
   10cf4:	f104 0017 	add.w	r0, r4, #23
   10cf8:	f7f0 ff80 	bl	1bfc <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   10cfc:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
   10d00:	7f63      	ldrb	r3, [r4, #29]
   10d02:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   10d06:	f36f 1386 	bfc	r3, #6, #1
   10d0a:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   10d0c:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   10d0e:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   10d10:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   10d12:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   10d14:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
   10d18:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
   10d1c:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
   10d20:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   10d22:	211b      	movs	r1, #27
   10d24:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   10d26:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   10d28:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
   10d2c:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10d2e:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   10d32:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10d36:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10d38:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   10d3a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   10d3e:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   10d40:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   10d44:	2601      	movs	r6, #1
   10d46:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   10d4a:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   10d4e:	f363 11c7 	bfi	r1, r3, #7, #1
   10d52:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   10d56:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   10d5a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   10d5e:	f366 0102 	bfi	r1, r6, #0, #3
   10d62:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   10d66:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
   10d6a:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   10d6c:	b2c9      	uxtb	r1, r1
   10d6e:	f36c 01c5 	bfi	r1, ip, #3, #3
   10d72:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   10d76:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   10d7a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   10d7c:	f366 0102 	bfi	r1, r6, #0, #3
   10d80:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   10d84:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   10d86:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   10d88:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   10d8c:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   10d8e:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   10d90:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   10d94:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   10d98:	f363 0100 	bfi	r1, r3, #0, #1
   10d9c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   10da0:	f240 42e2 	movw	r2, #1250	; 0x4e2
   10da4:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10da8:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
   10dac:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10db0:	1e56      	subs	r6, r2, #1
   10db2:	f242 7e10 	movw	lr, #10000	; 0x2710
   10db6:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   10dba:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10dbe:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10dc2:	4b47      	ldr	r3, [pc, #284]	; (10ee0 <radio_connect_enable+0x370>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10dc4:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10dc6:	4947      	ldr	r1, [pc, #284]	; (10ee4 <radio_connect_enable+0x374>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10dc8:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10dca:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10dcc:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10dd0:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10dd4:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10dd6:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10dda:	1d81      	adds	r1, r0, #6
   10ddc:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10dde:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10de2:	dc6a      	bgt.n	10eba <radio_connect_enable+0x34a>
	conn->llcp_version.tx = 0;
   10de4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10de8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   10dec:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   10dee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   10df2:	f360 0341 	bfi	r3, r0, #1, #1
   10df6:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   10dfa:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   10dfe:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   10e02:	f360 1304 	bfi	r3, r0, #4, #1
   10e06:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   10e0a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   10e0e:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   10e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10e16:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   10e1a:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   10e1e:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   10e22:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   10e26:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   10e2a:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   10e2e:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   10e32:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   10e36:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   10e3a:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   10e3e:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   10e42:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   10e46:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   10e4a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   10e4e:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   10e52:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   10e56:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   10e5a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   10e5e:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   10e62:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   10e66:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   10e6a:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
   10e6e:	b007      	add	sp, #28
   10e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   10e74:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   10e78:	f04f 0e01 	mov.w	lr, #1
   10e7c:	e6fe      	b.n	10c7c <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   10e7e:	3b01      	subs	r3, #1
   10e80:	4313      	orrs	r3, r2
   10e82:	e716      	b.n	10cb2 <radio_connect_enable+0x142>
		if (transitions > 24) {
   10e84:	46f2      	mov	sl, lr
   10e86:	e6d5      	b.n	10c34 <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   10e88:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   10e8a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   10e8e:	f47f af23 	bne.w	10cd8 <radio_connect_enable+0x168>
   10e92:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   10e94:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   10e98:	f47f aec0 	bne.w	10c1c <radio_connect_enable+0xac>
   10e9c:	4b12      	ldr	r3, [pc, #72]	; (10ee8 <radio_connect_enable+0x378>)
   10e9e:	9301      	str	r3, [sp, #4]
   10ea0:	9300      	str	r3, [sp, #0]
   10ea2:	4a12      	ldr	r2, [pc, #72]	; (10eec <radio_connect_enable+0x37c>)
   10ea4:	4b12      	ldr	r3, [pc, #72]	; (10ef0 <radio_connect_enable+0x380>)
   10ea6:	4913      	ldr	r1, [pc, #76]	; (10ef4 <radio_connect_enable+0x384>)
   10ea8:	4813      	ldr	r0, [pc, #76]	; (10ef8 <radio_connect_enable+0x388>)
   10eaa:	f7f0 f86f 	bl	f8c <printk>
   10eae:	4040      	eors	r0, r0
   10eb0:	f380 8811 	msr	BASEPRI, r0
   10eb4:	f04f 0004 	mov.w	r0, #4
   10eb8:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10eba:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   10ebe:	33fa      	adds	r3, #250	; 0xfa
   10ec0:	441a      	add	r2, r3
   10ec2:	b292      	uxth	r2, r2
   10ec4:	e78e      	b.n	10de4 <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10ec6:	200c      	movs	r0, #12
   10ec8:	e7d1      	b.n	10e6e <radio_connect_enable+0x2fe>
   10eca:	bf00      	nop
   10ecc:	f3af 8000 	nop.w
   10ed0:	1afd498d 	.word	0x1afd498d
   10ed4:	00000007 	.word	0x00000007
   10ed8:	3b9aca00 	.word	0x3b9aca00
   10edc:	200009e2 	.word	0x200009e2
   10ee0:	01c9c37f 	.word	0x01c9c37f
   10ee4:	026259ff 	.word	0x026259ff
   10ee8:	000153a9 	.word	0x000153a9
   10eec:	00016765 	.word	0x00016765
   10ef0:	0001829d 	.word	0x0001829d
   10ef4:	000167b4 	.word	0x000167b4
   10ef8:	00018cf6 	.word	0x00018cf6
   10efc:	200008c8 	.word	0x200008c8
   10f00:	8e89bed6 	.word	0x8e89bed6

00010f04 <ll_conn_update>:
{
   10f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f08:	460c      	mov	r4, r1
   10f0a:	4690      	mov	r8, r2
   10f0c:	461d      	mov	r5, r3
   10f0e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   10f12:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   10f16:	f7f9 fcd1 	bl	a8bc <connection_get>
	if (!conn) {
   10f1a:	b330      	cbz	r0, 10f6a <ll_conn_update+0x66>
	if (!cmd) {
   10f1c:	2c00      	cmp	r4, #0
   10f1e:	d14a      	bne.n	10fb6 <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   10f20:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   10f24:	06d9      	lsls	r1, r3, #27
   10f26:	d407      	bmi.n	10f38 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   10f28:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   10f2c:	069a      	lsls	r2, r3, #26
   10f2e:	d541      	bpl.n	10fb4 <ll_conn_update+0xb0>
		     (conn->llcp_features &
   10f30:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   10f34:	079b      	lsls	r3, r3, #30
   10f36:	d43d      	bmi.n	10fb4 <ll_conn_update+0xb0>
		} else if (conn->role) {
   10f38:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10f3c:	2b00      	cmp	r3, #0
   10f3e:	da17      	bge.n	10f70 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10f40:	201a      	movs	r0, #26
   10f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   10f46:	428b      	cmp	r3, r1
   10f48:	d00f      	beq.n	10f6a <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   10f4a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   10f4e:	f003 0207 	and.w	r2, r3, #7
   10f52:	2a03      	cmp	r2, #3
   10f54:	d109      	bne.n	10f6a <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   10f56:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   10f5a:	b2db      	uxtb	r3, r3
   10f5c:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   10f60:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   10f64:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   10f68:	e021      	b.n	10fae <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10f6a:	200c      	movs	r0, #12
   10f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   10f70:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   10f74:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   10f78:	429a      	cmp	r2, r3
   10f7a:	d1f6      	bne.n	10f6a <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10f7c:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   10f80:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   10f84:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   10f86:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10f88:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   10f8c:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   10f90:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   10f92:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   10f96:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   10f9a:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   10f9e:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   10fa2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   10fa6:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   10faa:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   10fae:	2000      	movs	r0, #0
   10fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   10fb4:	2401      	movs	r4, #1
		cmd--;
   10fb6:	3c01      	subs	r4, #1
		if (cmd) {
   10fb8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   10fbc:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   10fc0:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   10fc4:	d1bf      	bne.n	10f46 <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   10fc6:	4299      	cmp	r1, r3
   10fc8:	d1cf      	bne.n	10f6a <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   10fca:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   10fce:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   10fd2:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   10fd6:	b2db      	uxtb	r3, r3
   10fd8:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   10fdc:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   10fde:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   10fe2:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   10fe6:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   10fea:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   10fee:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   10ff2:	e7dc      	b.n	10fae <ll_conn_update+0xaa>

00010ff4 <ll_chm_update>:
{
   10ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   10ff8:	4c1e      	ldr	r4, [pc, #120]	; (11074 <ll_chm_update+0x80>)
   10ffa:	4601      	mov	r1, r0
   10ffc:	2205      	movs	r2, #5
{
   10ffe:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   11000:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   11004:	f7f0 fdfa 	bl	1bfc <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   11008:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   1100c:	2105      	movs	r1, #5
   1100e:	f7f6 fd29 	bl	7a64 <util_ones_count_get>
	_radio.data_chan_count =
   11012:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   11016:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   1101a:	3c01      	subs	r4, #1
   1101c:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   1101e:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   11020:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   11024:	2cff      	cmp	r4, #255	; 0xff
   11026:	d102      	bne.n	1102e <ll_chm_update+0x3a>
	return 0;
   11028:	2000      	movs	r0, #0
   1102a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   1102e:	4620      	mov	r0, r4
   11030:	f7f9 fc44 	bl	a8bc <connection_get>
		if (!conn || conn->role) {
   11034:	4606      	mov	r6, r0
   11036:	b1b8      	cbz	r0, 11068 <ll_chm_update+0x74>
   11038:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1103c:	2b00      	cmp	r3, #0
   1103e:	db13      	blt.n	11068 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   11040:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11044:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11048:	429a      	cmp	r2, r3
   1104a:	d110      	bne.n	1106e <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   1104c:	2205      	movs	r2, #5
   1104e:	4629      	mov	r1, r5
   11050:	3079      	adds	r0, #121	; 0x79
   11052:	f7f0 fdd3 	bl	1bfc <memcpy>
		conn->llcp_req++;
   11056:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   1105a:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   1105e:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   11060:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   11064:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   11068:	3c01      	subs	r4, #1
   1106a:	b2e4      	uxtb	r4, r4
   1106c:	e7da      	b.n	11024 <ll_chm_update+0x30>
			return 1;
   1106e:	2001      	movs	r0, #1
}
   11070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11074:	200008c8 	.word	0x200008c8

00011078 <ll_chm_get>:
{
   11078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1107a:	460d      	mov	r5, r1
	conn = connection_get(handle);
   1107c:	f7f9 fc1e 	bl	a8bc <connection_get>
	if (!conn) {
   11080:	4604      	mov	r4, r0
   11082:	b160      	cbz	r0, 1109e <ll_chm_get+0x26>
		conn->chm_update = 0;
   11084:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   11086:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   1108a:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   1108c:	2205      	movs	r2, #5
   1108e:	4631      	mov	r1, r6
   11090:	4628      	mov	r0, r5
   11092:	f7f0 fdb3 	bl	1bfc <memcpy>
	} while (conn->chm_update);
   11096:	7f20      	ldrb	r0, [r4, #28]
   11098:	2800      	cmp	r0, #0
   1109a:	d1f6      	bne.n	1108a <ll_chm_get+0x12>
   1109c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   1109e:	2001      	movs	r0, #1
}
   110a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000110a2 <ll_feature_req_send>:
{
   110a2:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   110a4:	f7f9 fc0a 	bl	a8bc <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   110a8:	b168      	cbz	r0, 110c6 <ll_feature_req_send+0x24>
   110aa:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   110ae:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   110b2:	4293      	cmp	r3, r2
   110b4:	d107      	bne.n	110c6 <ll_feature_req_send+0x24>
	conn->llcp_req++;
   110b6:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   110b8:	2204      	movs	r2, #4
	conn->llcp_req++;
   110ba:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   110be:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   110c2:	2000      	movs	r0, #0
   110c4:	bd08      	pop	{r3, pc}
		return 1;
   110c6:	2001      	movs	r0, #1
}
   110c8:	bd08      	pop	{r3, pc}

000110ca <ll_version_ind_send>:
{
   110ca:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   110cc:	f7f9 fbf6 	bl	a8bc <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   110d0:	b168      	cbz	r0, 110ee <ll_version_ind_send+0x24>
   110d2:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   110d6:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   110da:	4293      	cmp	r3, r2
   110dc:	d107      	bne.n	110ee <ll_version_ind_send+0x24>
	conn->llcp_req++;
   110de:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   110e0:	2205      	movs	r2, #5
	conn->llcp_req++;
   110e2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   110e6:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   110ea:	2000      	movs	r0, #0
   110ec:	bd08      	pop	{r3, pc}
		return 1;
   110ee:	2001      	movs	r0, #1
}
   110f0:	bd08      	pop	{r3, pc}

000110f2 <ll_terminate_ind_send>:
{
   110f2:	b510      	push	{r4, lr}
   110f4:	460c      	mov	r4, r1
	conn = connection_get(handle);
   110f6:	f7f9 fbe1 	bl	a8bc <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   110fa:	b160      	cbz	r0, 11116 <ll_terminate_ind_send+0x24>
   110fc:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   11100:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   11104:	4293      	cmp	r3, r2
   11106:	d106      	bne.n	11116 <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   11108:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   1110a:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   1110e:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   11112:	2000      	movs	r0, #0
   11114:	bd10      	pop	{r4, pc}
		return 1;
   11116:	2001      	movs	r0, #1
}
   11118:	bd10      	pop	{r4, pc}

0001111a <ll_tx_pwr_lvl_get>:
{
   1111a:	b510      	push	{r4, lr}
   1111c:	4614      	mov	r4, r2
	conn = connection_get(handle);
   1111e:	f7f9 fbcd 	bl	a8bc <connection_get>
	if (!conn) {
   11122:	b110      	cbz	r0, 1112a <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   11124:	2000      	movs	r0, #0
   11126:	7020      	strb	r0, [r4, #0]
	return 0;
   11128:	bd10      	pop	{r4, pc}
		return 1;
   1112a:	2001      	movs	r0, #1
}
   1112c:	bd10      	pop	{r4, pc}

0001112e <ll_apto_get>:
{
   1112e:	b510      	push	{r4, lr}
   11130:	460c      	mov	r4, r1
	conn = connection_get(handle);
   11132:	f7f9 fbc3 	bl	a8bc <connection_get>
	if (!conn) {
   11136:	b160      	cbz	r0, 11152 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   11138:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   1113a:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   1113e:	435a      	muls	r2, r3
   11140:	237d      	movs	r3, #125	; 0x7d
   11142:	4353      	muls	r3, r2
	return 0;
   11144:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   11146:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1114a:	fb93 f3f2 	sdiv	r3, r3, r2
   1114e:	8023      	strh	r3, [r4, #0]
	return 0;
   11150:	bd10      	pop	{r4, pc}
		return 1;
   11152:	2001      	movs	r0, #1
}
   11154:	bd10      	pop	{r4, pc}

00011156 <ll_apto_set>:
{
   11156:	b510      	push	{r4, lr}
   11158:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1115a:	f7f9 fbaf 	bl	a8bc <connection_get>
	if (!conn) {
   1115e:	b170      	cbz	r0, 1117e <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   11160:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   11162:	f240 43e2 	movw	r3, #1250	; 0x4e2
   11166:	4353      	muls	r3, r2
   11168:	f242 7110 	movw	r1, #10000	; 0x2710
   1116c:	fb01 3404 	mla	r4, r1, r4, r3
   11170:	3c01      	subs	r4, #1
   11172:	fb94 f4f3 	sdiv	r4, r4, r3
   11176:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   1117a:	2000      	movs	r0, #0
   1117c:	bd10      	pop	{r4, pc}
		return 1;
   1117e:	2001      	movs	r0, #1
}
   11180:	bd10      	pop	{r4, pc}

00011182 <ll_length_req_send>:
{
   11182:	b570      	push	{r4, r5, r6, lr}
   11184:	460e      	mov	r6, r1
   11186:	4615      	mov	r5, r2
	conn = connection_get(handle);
   11188:	f7f9 fb98 	bl	a8bc <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1118c:	b1d0      	cbz	r0, 111c4 <ll_length_req_send+0x42>
   1118e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11192:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11196:	429a      	cmp	r2, r3
   11198:	d114      	bne.n	111c4 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   1119a:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1119e:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   111a2:	4293      	cmp	r3, r2
   111a4:	d10e      	bne.n	111c4 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   111a6:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   111aa:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   111ae:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   111b0:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   111b4:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   111b8:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   111bc:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   111c0:	2000      	movs	r0, #0
   111c2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   111c4:	2001      	movs	r0, #1
}
   111c6:	bd70      	pop	{r4, r5, r6, pc}

000111c8 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   111c8:	4b03      	ldr	r3, [pc, #12]	; (111d8 <ll_length_default_get+0x10>)
   111ca:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   111ce:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   111d0:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   111d4:	800b      	strh	r3, [r1, #0]
   111d6:	4770      	bx	lr
   111d8:	200008c8 	.word	0x200008c8

000111dc <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   111dc:	4b03      	ldr	r3, [pc, #12]	; (111ec <ll_length_default_set+0x10>)
   111de:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   111e2:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   111e6:	2000      	movs	r0, #0
   111e8:	4770      	bx	lr
   111ea:	bf00      	nop
   111ec:	200008c8 	.word	0x200008c8

000111f0 <ll_length_max_get>:
{
   111f0:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   111f2:	241b      	movs	r4, #27
   111f4:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   111f6:	f44f 70a4 	mov.w	r0, #328	; 0x148
   111fa:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   111fc:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   111fe:	8018      	strh	r0, [r3, #0]
   11200:	bd10      	pop	{r4, pc}

00011202 <ll_phy_get>:
{
   11202:	b538      	push	{r3, r4, r5, lr}
   11204:	460d      	mov	r5, r1
   11206:	4614      	mov	r4, r2
	conn = connection_get(handle);
   11208:	f7f9 fb58 	bl	a8bc <connection_get>
	if (!conn) {
   1120c:	b158      	cbz	r0, 11226 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   1120e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   11212:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   11216:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   11218:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1121c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11220:	7023      	strb	r3, [r4, #0]
	return 0;
   11222:	2000      	movs	r0, #0
   11224:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   11226:	2001      	movs	r0, #1
}
   11228:	bd38      	pop	{r3, r4, r5, pc}
	...

0001122c <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   1122c:	4b03      	ldr	r3, [pc, #12]	; (1123c <ll_phy_default_set+0x10>)
   1122e:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   11232:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   11236:	2000      	movs	r0, #0
   11238:	4770      	bx	lr
   1123a:	bf00      	nop
   1123c:	200008c8 	.word	0x200008c8

00011240 <ll_phy_req_send>:
{
   11240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11244:	4689      	mov	r9, r1
   11246:	4690      	mov	r8, r2
   11248:	461f      	mov	r7, r3
	conn = connection_get(handle);
   1124a:	f7f9 fb37 	bl	a8bc <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1124e:	b320      	cbz	r0, 1129a <ll_phy_req_send+0x5a>
   11250:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11254:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11258:	429a      	cmp	r2, r3
   1125a:	d11e      	bne.n	1129a <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   1125c:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11260:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   11264:	429d      	cmp	r5, r3
   11266:	d118      	bne.n	1129a <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   11268:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   1126c:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   11270:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   11274:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   11278:	f046 0102 	orr.w	r1, r6, #2
   1127c:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   11280:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   11282:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   11284:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   11288:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   1128c:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   11290:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   11294:	2000      	movs	r0, #0
   11296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   1129a:	2001      	movs	r0, #1
}
   1129c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000112a0 <ll_rx_get>:
{
   112a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   112a4:	4605      	mov	r5, r0
   112a6:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   112a8:	4918      	ldr	r1, [pc, #96]	; (1130c <ll_rx_get+0x6c>)
   112aa:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   112ae:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   112b2:	4293      	cmp	r3, r2
   112b4:	460f      	mov	r7, r1
   112b6:	d01f      	beq.n	112f8 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   112b8:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   112bc:	f201 1177 	addw	r1, r1, #375	; 0x177
   112c0:	f898 2000 	ldrb.w	r2, [r8]
   112c4:	f7f9 fab0 	bl	a828 <tx_cmplt_get>
		if (!cmplt) {
   112c8:	4604      	mov	r4, r0
   112ca:	b9e0      	cbnz	r0, 11306 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   112cc:	ae02      	add	r6, sp, #8
   112ce:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   112d2:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   112d6:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   112da:	4631      	mov	r1, r6
   112dc:	f10d 0006 	add.w	r0, sp, #6
   112e0:	f7f9 faa2 	bl	a828 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   112e4:	b934      	cbnz	r4, 112f4 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   112e6:	b928      	cbnz	r0, 112f4 <ll_rx_get+0x54>
			*node_rx = _node_rx;
   112e8:	f8c5 8000 	str.w	r8, [r5]
}
   112ec:	4620      	mov	r0, r4
   112ee:	b002      	add	sp, #8
   112f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   112f4:	4604      	mov	r4, r0
   112f6:	e7ee      	b.n	112d6 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   112f8:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   112fc:	f201 1177 	addw	r1, r1, #375	; 0x177
   11300:	f7f9 fa92 	bl	a828 <tx_cmplt_get>
   11304:	4604      	mov	r4, r0
		*node_rx = NULL;
   11306:	2300      	movs	r3, #0
   11308:	602b      	str	r3, [r5, #0]
   1130a:	e7ef      	b.n	112ec <ll_rx_get+0x4c>
   1130c:	200008c8 	.word	0x200008c8

00011310 <ll_rx_mem_release>:
{
   11310:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   11314:	4c1c      	ldr	r4, [pc, #112]	; (11388 <ll_rx_mem_release+0x78>)
{
   11316:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   11318:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1131a:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   1131e:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   11322:	b930      	cbnz	r0, 11332 <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   11324:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   11326:	20ff      	movs	r0, #255	; 0xff
}
   11328:	b002      	add	sp, #8
   1132a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   1132e:	f7f9 b9a5 	b.w	a67c <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   11332:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   11334:	f8d0 8000 	ldr.w	r8, [r0]
   11338:	2a0c      	cmp	r2, #12
   1133a:	d807      	bhi.n	1134c <ll_rx_mem_release+0x3c>
   1133c:	2301      	movs	r3, #1
   1133e:	4093      	lsls	r3, r2
   11340:	f641 727e 	movw	r2, #8062	; 0x1f7e
   11344:	4213      	tst	r3, r2
   11346:	d110      	bne.n	1136a <ll_rx_mem_release+0x5a>
   11348:	061b      	lsls	r3, r3, #24
   1134a:	d413      	bmi.n	11374 <ll_rx_mem_release+0x64>
			LL_ASSERT(0);
   1134c:	4b0f      	ldr	r3, [pc, #60]	; (1138c <ll_rx_mem_release+0x7c>)
   1134e:	9301      	str	r3, [sp, #4]
   11350:	9300      	str	r3, [sp, #0]
   11352:	4a0f      	ldr	r2, [pc, #60]	; (11390 <ll_rx_mem_release+0x80>)
   11354:	4b0f      	ldr	r3, [pc, #60]	; (11394 <ll_rx_mem_release+0x84>)
   11356:	4910      	ldr	r1, [pc, #64]	; (11398 <ll_rx_mem_release+0x88>)
   11358:	4810      	ldr	r0, [pc, #64]	; (1139c <ll_rx_mem_release+0x8c>)
   1135a:	f7ef fe17 	bl	f8c <printk>
   1135e:	4040      	eors	r0, r0
   11360:	f380 8811 	msr	BASEPRI, r0
   11364:	f04f 0004 	mov.w	r0, #4
   11368:	df02      	svc	2
			mem_release(_node_rx_free,
   1136a:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   1136c:	f7f6 f9e9 	bl	7742 <mem_release>
{
   11370:	4640      	mov	r0, r8
   11372:	e7d6      	b.n	11322 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   11374:	88c2      	ldrh	r2, [r0, #6]
   11376:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   1137a:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1137e:	f7f6 f9fb 	bl	7778 <mem_get>
			mem_release(conn, &_radio.conn_free);
   11382:	4639      	mov	r1, r7
   11384:	e7f2      	b.n	1136c <ll_rx_mem_release+0x5c>
   11386:	bf00      	nop
   11388:	200009f8 	.word	0x200009f8
   1138c:	000153a9 	.word	0x000153a9
   11390:	00016765 	.word	0x00016765
   11394:	00018441 	.word	0x00018441
   11398:	000167b4 	.word	0x000167b4
   1139c:	000166d9 	.word	0x000166d9

000113a0 <do_radio_rx_fc_set>:
	if (req == ack) {
   113a0:	4291      	cmp	r1, r2
{
   113a2:	b510      	push	{r4, lr}
   113a4:	4b14      	ldr	r3, [pc, #80]	; (113f8 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   113a6:	d119      	bne.n	113dc <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   113a8:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   113ac:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   113b0:	4294      	cmp	r4, r2
   113b2:	d111      	bne.n	113d8 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   113b4:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   113b6:	bf14      	ite	ne
   113b8:	460a      	movne	r2, r1
   113ba:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   113bc:	3a01      	subs	r2, #1
   113be:	b2d2      	uxtb	r2, r2
   113c0:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   113c4:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   113c8:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   113cc:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   113d0:	4291      	cmp	r1, r2
   113d2:	d00f      	beq.n	113f4 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   113d4:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   113d8:	2001      	movs	r0, #1
   113da:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   113dc:	b929      	cbnz	r1, 113ea <do_radio_rx_fc_set+0x4a>
   113de:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   113e2:	1a18      	subs	r0, r3, r0
   113e4:	bf18      	it	ne
   113e6:	2001      	movne	r0, #1
   113e8:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   113ea:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   113ee:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   113f2:	e7f6      	b.n	113e2 <do_radio_rx_fc_set+0x42>
	return 0;
   113f4:	2000      	movs	r0, #0
}
   113f6:	bd10      	pop	{r4, pc}
   113f8:	200008c8 	.word	0x200008c8

000113fc <radio_rx_fc_set>:
{
   113fc:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   113fe:	4b14      	ldr	r3, [pc, #80]	; (11450 <radio_rx_fc_set+0x54>)
   11400:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   11404:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   11406:	b302      	cbz	r2, 1144a <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   11408:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   1140c:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   1140e:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   11412:	b135      	cbz	r5, 11422 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   11414:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11418:	4298      	cmp	r0, r3
   1141a:	d016      	beq.n	1144a <radio_rx_fc_set+0x4e>
}
   1141c:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   1141e:	f7ff bfbf 	b.w	113a0 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   11422:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   11426:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   1142a:	42a0      	cmp	r0, r4
   1142c:	d10d      	bne.n	1144a <radio_rx_fc_set+0x4e>
   1142e:	4291      	cmp	r1, r2
   11430:	d00b      	beq.n	1144a <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   11432:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   11436:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1143a:	42a0      	cmp	r0, r4
   1143c:	d005      	beq.n	1144a <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   1143e:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   11442:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   11444:	bf08      	it	eq
   11446:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   1144a:	2000      	movs	r0, #0
   1144c:	bc30      	pop	{r4, r5}
   1144e:	4770      	bx	lr
   11450:	200008c8 	.word	0x200008c8

00011454 <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   11454:	4801      	ldr	r0, [pc, #4]	; (1145c <ll_tx_mem_acquire+0x8>)
   11456:	f7f6 b95a 	b.w	770e <mem_acquire>
   1145a:	bf00      	nop
   1145c:	20000a2c 	.word	0x20000a2c

00011460 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   11460:	4901      	ldr	r1, [pc, #4]	; (11468 <ll_tx_mem_release+0x8>)
   11462:	f7f6 b96e 	b.w	7742 <mem_release>
   11466:	bf00      	nop
   11468:	20000a2c 	.word	0x20000a2c

0001146c <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   1146c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   1146e:	4d33      	ldr	r5, [pc, #204]	; (1153c <ll_tx_mem_enqueue+0xd0>)
   11470:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   11474:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   11478:	3401      	adds	r4, #1
{
   1147a:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   1147c:	b2e4      	uxtb	r4, r4
{
   1147e:	4607      	mov	r7, r0
   11480:	460e      	mov	r6, r1
		last = 0;
   11482:	42a3      	cmp	r3, r4
   11484:	bf08      	it	eq
   11486:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   11488:	f7f9 fa18 	bl	a8bc <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   1148c:	2800      	cmp	r0, #0
   1148e:	d052      	beq.n	11536 <ll_tx_mem_enqueue+0xca>
   11490:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   11494:	429c      	cmp	r4, r3
   11496:	d04e      	beq.n	11536 <ll_tx_mem_enqueue+0xca>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   11498:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   1149c:	7972      	ldrb	r2, [r6, #5]
   1149e:	3b07      	subs	r3, #7
   114a0:	429a      	cmp	r2, r3
   114a2:	d90e      	bls.n	114c2 <ll_tx_mem_enqueue+0x56>
   114a4:	4b26      	ldr	r3, [pc, #152]	; (11540 <ll_tx_mem_enqueue+0xd4>)
   114a6:	9301      	str	r3, [sp, #4]
   114a8:	9300      	str	r3, [sp, #0]
   114aa:	4a26      	ldr	r2, [pc, #152]	; (11544 <ll_tx_mem_enqueue+0xd8>)
   114ac:	4b26      	ldr	r3, [pc, #152]	; (11548 <ll_tx_mem_enqueue+0xdc>)
   114ae:	4927      	ldr	r1, [pc, #156]	; (1154c <ll_tx_mem_enqueue+0xe0>)
   114b0:	4827      	ldr	r0, [pc, #156]	; (11550 <ll_tx_mem_enqueue+0xe4>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   114b2:	f7ef fd6b 	bl	f8c <printk>
   114b6:	4040      	eors	r0, r0
   114b8:	f380 8811 	msr	BASEPRI, r0
   114bc:	f04f 0004 	mov.w	r0, #4
   114c0:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   114c2:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   114c6:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   114ca:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   114ce:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   114d2:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   114d4:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   114d8:	f990 301d 	ldrsb.w	r3, [r0, #29]
   114dc:	2b00      	cmp	r3, #0
   114de:	db02      	blt.n	114e6 <ll_tx_mem_enqueue+0x7a>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   114e0:	2000      	movs	r0, #0
}
   114e2:	b009      	add	sp, #36	; 0x24
   114e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   114e6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   114e8:	2b00      	cmp	r3, #0
   114ea:	d0f9      	beq.n	114e0 <ll_tx_mem_enqueue+0x74>
   114ec:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   114f0:	f012 0302 	ands.w	r3, r2, #2
   114f4:	d1f4      	bne.n	114e0 <ll_tx_mem_enqueue+0x74>
		conn->slave.latency_cancel = 1;
   114f6:	f042 0202 	orr.w	r2, r2, #2
   114fa:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   114fe:	f890 2020 	ldrb.w	r2, [r0, #32]
   11502:	4914      	ldr	r1, [pc, #80]	; (11554 <ll_tx_mem_enqueue+0xe8>)
   11504:	9105      	str	r1, [sp, #20]
   11506:	3207      	adds	r2, #7
   11508:	2101      	movs	r1, #1
   1150a:	9006      	str	r0, [sp, #24]
   1150c:	9304      	str	r3, [sp, #16]
   1150e:	9103      	str	r1, [sp, #12]
   11510:	9302      	str	r3, [sp, #8]
   11512:	9301      	str	r3, [sp, #4]
   11514:	9300      	str	r3, [sp, #0]
   11516:	4618      	mov	r0, r3
   11518:	b2d2      	uxtb	r2, r2
   1151a:	2103      	movs	r1, #3
   1151c:	f7f6 ffd0 	bl	84c0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11520:	f030 0302 	bics.w	r3, r0, #2
   11524:	d0dc      	beq.n	114e0 <ll_tx_mem_enqueue+0x74>
   11526:	4b06      	ldr	r3, [pc, #24]	; (11540 <ll_tx_mem_enqueue+0xd4>)
   11528:	9301      	str	r3, [sp, #4]
   1152a:	9300      	str	r3, [sp, #0]
   1152c:	4a05      	ldr	r2, [pc, #20]	; (11544 <ll_tx_mem_enqueue+0xd8>)
   1152e:	4b06      	ldr	r3, [pc, #24]	; (11548 <ll_tx_mem_enqueue+0xdc>)
   11530:	4906      	ldr	r1, [pc, #24]	; (1154c <ll_tx_mem_enqueue+0xe0>)
   11532:	4809      	ldr	r0, [pc, #36]	; (11558 <ll_tx_mem_enqueue+0xec>)
   11534:	e7bd      	b.n	114b2 <ll_tx_mem_enqueue+0x46>
		return 1;
   11536:	2001      	movs	r0, #1
   11538:	e7d3      	b.n	114e2 <ll_tx_mem_enqueue+0x76>
   1153a:	bf00      	nop
   1153c:	200008c8 	.word	0x200008c8
   11540:	000153a9 	.word	0x000153a9
   11544:	00016765 	.word	0x00016765
   11548:	0001846f 	.word	0x0001846f
   1154c:	000167b4 	.word	0x000167b4
   11550:	00018a55 	.word	0x00018a55
   11554:	0000b615 	.word	0x0000b615
   11558:	000184a7 	.word	0x000184a7

0001155c <ll_enc_req_send>:
{
   1155c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11560:	4607      	mov	r7, r0
   11562:	4688      	mov	r8, r1
   11564:	4616      	mov	r6, r2
   11566:	4699      	mov	r9, r3
	conn = connection_get(handle);
   11568:	f7f9 f9a8 	bl	a8bc <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1156c:	4605      	mov	r5, r0
   1156e:	b910      	cbnz	r0, 11576 <ll_enc_req_send+0x1a>
			return 1;
   11570:	2001      	movs	r0, #1
   11572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   11576:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1157a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1157e:	429a      	cmp	r2, r3
   11580:	d1f6      	bne.n	11570 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   11582:	f7ff ff67 	bl	11454 <ll_tx_mem_acquire>
	if (node_tx) {
   11586:	4604      	mov	r4, r0
   11588:	2800      	cmp	r0, #0
   1158a:	d0f1      	beq.n	11570 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   1158c:	2210      	movs	r2, #16
   1158e:	4649      	mov	r1, r9
   11590:	f105 0084 	add.w	r0, r5, #132	; 0x84
   11594:	f7f0 fb32 	bl	1bfc <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   11598:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1159c:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   115a0:	d124      	bne.n	115ec <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   115a2:	7923      	ldrb	r3, [r4, #4]
   115a4:	f043 0303 	orr.w	r3, r3, #3
   115a8:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   115aa:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   115ac:	2208      	movs	r2, #8
			pdu_data_tx->len =
   115ae:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   115b0:	2303      	movs	r3, #3
   115b2:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   115b4:	4641      	mov	r1, r8
   115b6:	18a0      	adds	r0, r4, r2
   115b8:	f7f0 fb20 	bl	1bfc <memcpy>
			enc_req->ediv[0] = ediv[0];
   115bc:	7833      	ldrb	r3, [r6, #0]
   115be:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   115c0:	7873      	ldrb	r3, [r6, #1]
   115c2:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   115c4:	2108      	movs	r1, #8
   115c6:	f104 0012 	add.w	r0, r4, #18
   115ca:	f7f7 f8d7 	bl	877c <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   115ce:	2104      	movs	r1, #4
   115d0:	f104 001a 	add.w	r0, r4, #26
   115d4:	f7f7 f8d2 	bl	877c <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   115d8:	4621      	mov	r1, r4
   115da:	4638      	mov	r0, r7
   115dc:	f7ff ff46 	bl	1146c <ll_tx_mem_enqueue>
   115e0:	2601      	movs	r6, #1
   115e2:	b1d0      	cbz	r0, 1161a <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   115e4:	4620      	mov	r0, r4
   115e6:	f7ff ff3b 	bl	11460 <ll_tx_mem_release>
   115ea:	e7c1      	b.n	11570 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   115ec:	2b30      	cmp	r3, #48	; 0x30
   115ee:	d1f9      	bne.n	115e4 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   115f0:	2208      	movs	r2, #8
   115f2:	4641      	mov	r1, r8
   115f4:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   115f8:	f7f0 fb00 	bl	1bfc <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   115fc:	7833      	ldrb	r3, [r6, #0]
   115fe:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   11602:	7873      	ldrb	r3, [r6, #1]
   11604:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   11608:	7923      	ldrb	r3, [r4, #4]
   1160a:	f043 0303 	orr.w	r3, r3, #3
   1160e:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   11610:	2301      	movs	r3, #1
   11612:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   11614:	230a      	movs	r3, #10
   11616:	71e3      	strb	r3, [r4, #7]
   11618:	e7de      	b.n	115d8 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   1161a:	2303      	movs	r3, #3
   1161c:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   11620:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   11624:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   11628:	3301      	adds	r3, #1
   1162a:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   1162e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11632:	0000      	movs	r0, r0
   11634:	0000      	movs	r0, r0
	...

00011638 <radio_scan_enable>:
{
   11638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   1163c:	4c68      	ldr	r4, [pc, #416]	; (117e0 <radio_scan_enable+0x1a8>)
   1163e:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   11642:	b08e      	sub	sp, #56	; 0x38
   11644:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   11646:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1164a:	f04f 0302 	mov.w	r3, #2
{
   1164e:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11650:	930b      	str	r3, [sp, #44]	; 0x2c
{
   11652:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   11654:	d003      	beq.n	1165e <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11656:	200c      	movs	r0, #12
}
   11658:	b00e      	add	sp, #56	; 0x38
   1165a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   1165e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   11662:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   11666:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   1166a:	0840      	lsrs	r0, r0, #1
   1166c:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   11670:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   11674:	f360 0200 	bfi	r2, r0, #0, #1
   11678:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   1167c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   11680:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   11684:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   11688:	2206      	movs	r2, #6
   1168a:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   1168e:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   11692:	4e54      	ldr	r6, [pc, #336]	; (117e4 <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   11694:	f7f0 fab2 	bl	1bfc <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   11698:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   1169c:	f04f 0991 	mov.w	r9, #145	; 0x91
   116a0:	fba2 0106 	umull	r0, r1, r2, r6
   116a4:	fb09 1102 	mla	r1, r9, r2, r1
   116a8:	a34b      	add	r3, pc, #300	; (adr r3, 117d8 <radio_scan_enable+0x1a0>)
   116aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   116ae:	f7ee fdb1 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   116b2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   116b6:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   116ba:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   116be:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   116c2:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   116c6:	b2ba      	uxth	r2, r7
   116c8:	fba2 6706 	umull	r6, r7, r2, r6
   116cc:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   116d0:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   116d4:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   116d6:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   116da:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   116de:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   116e2:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   116e6:	a33c      	add	r3, pc, #240	; (adr r3, 117d8 <radio_scan_enable+0x1a0>)
   116e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   116ec:	4630      	mov	r0, r6
   116ee:	4639      	mov	r1, r7
   116f0:	f7ee fd90 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   116f4:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   116f8:	459a      	cmp	sl, r3
   116fa:	bf94      	ite	ls
   116fc:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   11700:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   11704:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   11708:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   1170a:	bf38      	it	cc
   1170c:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   11710:	f7f6 fff4 	bl	86fc <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   11714:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   11718:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   1171a:	2b00      	cmp	r3, #0
   1171c:	d045      	beq.n	117aa <radio_scan_enable+0x172>
		us_offset = 0;
   1171e:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   11720:	980c      	ldr	r0, [sp, #48]	; 0x30
   11722:	4931      	ldr	r1, [pc, #196]	; (117e8 <radio_scan_enable+0x1b0>)
   11724:	a32c      	add	r3, pc, #176	; (adr r3, 117d8 <radio_scan_enable+0x1a0>)
   11726:	e9d3 2300 	ldrd	r2, r3, [r3]
   1172a:	fba0 0101 	umull	r0, r1, r0, r1
   1172e:	f7ee fd71 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11732:	ab0b      	add	r3, sp, #44	; 0x2c
   11734:	9308      	str	r3, [sp, #32]
   11736:	4b2d      	ldr	r3, [pc, #180]	; (117ec <radio_scan_enable+0x1b4>)
   11738:	9307      	str	r3, [sp, #28]
   1173a:	4b2d      	ldr	r3, [pc, #180]	; (117f0 <radio_scan_enable+0x1b8>)
   1173c:	9305      	str	r3, [sp, #20]
   1173e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   11742:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11746:	4443      	add	r3, r8
   11748:	2500      	movs	r5, #0
   1174a:	4482      	add	sl, r0
   1174c:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   1174e:	4630      	mov	r0, r6
   11750:	a321      	add	r3, pc, #132	; (adr r3, 117d8 <radio_scan_enable+0x1a0>)
   11752:	e9d3 2300 	ldrd	r2, r3, [r3]
   11756:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11758:	9506      	str	r5, [sp, #24]
   1175a:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   1175c:	f7ee fd5a 	bl	214 <__aeabi_uldivmod>
   11760:	4610      	mov	r0, r2
   11762:	4619      	mov	r1, r3
   11764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11768:	2300      	movs	r3, #0
   1176a:	f7ee fd53 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1176e:	e88d 0220 	stmia.w	sp, {r5, r9}
   11772:	9002      	str	r0, [sp, #8]
   11774:	4653      	mov	r3, sl
   11776:	2206      	movs	r2, #6
   11778:	2103      	movs	r1, #3
   1177a:	4628      	mov	r0, r5
   1177c:	f7f6 fe50 	bl	8420 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   11780:	2802      	cmp	r0, #2
   11782:	d023      	beq.n	117cc <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   11784:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11786:	2d00      	cmp	r5, #0
   11788:	f47f af65 	bne.w	11656 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   1178c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   11790:	f043 0301 	orr.w	r3, r3, #1
   11794:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   11798:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   1179c:	2b00      	cmp	r3, #0
   1179e:	db02      	blt.n	117a6 <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   117a0:	2002      	movs	r0, #2
   117a2:	f000 febb 	bl	1251c <ll_adv_scan_state_cb>
	return 0;
   117a6:	4628      	mov	r0, r5
   117a8:	e756      	b.n	11658 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   117aa:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   117ae:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   117b0:	aa0d      	add	r2, sp, #52	; 0x34
   117b2:	ab0c      	add	r3, sp, #48	; 0x30
   117b4:	4441      	add	r1, r8
   117b6:	2003      	movs	r0, #3
   117b8:	f7f9 fc86 	bl	b0c8 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   117bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   117be:	2b00      	cmp	r3, #0
   117c0:	d0ae      	beq.n	11720 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   117c2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   117c6:	e7ab      	b.n	11720 <radio_scan_enable+0xe8>
			cpu_sleep();
   117c8:	f7f8 fe7e 	bl	a4c8 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   117cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   117ce:	2b02      	cmp	r3, #2
   117d0:	d0fa      	beq.n	117c8 <radio_scan_enable+0x190>
   117d2:	e7d7      	b.n	11784 <radio_scan_enable+0x14c>
   117d4:	f3af 8000 	nop.w
   117d8:	1afd498d 	.word	0x1afd498d
   117dc:	00000007 	.word	0x00000007
   117e0:	200008c8 	.word	0x200008c8
   117e4:	84e72a00 	.word	0x84e72a00
   117e8:	3b9aca00 	.word	0x3b9aca00
   117ec:	0000a50d 	.word	0x0000a50d
   117f0:	0000c435 	.word	0x0000c435

000117f4 <radio_scan_disable>:
{
   117f4:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   117f6:	2104      	movs	r1, #4
   117f8:	2006      	movs	r0, #6
   117fa:	f7f9 f875 	bl	a8e8 <role_disable>
	if (!status) {
   117fe:	4605      	mov	r5, r0
   11800:	b9e8      	cbnz	r0, 1183e <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   11802:	4c10      	ldr	r4, [pc, #64]	; (11844 <radio_scan_disable+0x50>)
   11804:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   11808:	f360 0200 	bfi	r2, r0, #0, #1
   1180c:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   11810:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   11814:	2a00      	cmp	r2, #0
   11816:	db01      	blt.n	1181c <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   11818:	f000 fe80 	bl	1251c <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   1181c:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   11820:	b15e      	cbz	r6, 1183a <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   11822:	2300      	movs	r3, #0
   11824:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   11828:	4907      	ldr	r1, [pc, #28]	; (11848 <radio_scan_disable+0x54>)
   1182a:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   1182e:	f7f5 ff88 	bl	7742 <mem_release>
			mem_release(conn, &_radio.conn_free);
   11832:	4906      	ldr	r1, [pc, #24]	; (1184c <radio_scan_disable+0x58>)
   11834:	4630      	mov	r0, r6
   11836:	f7f5 ff84 	bl	7742 <mem_release>
}
   1183a:	4628      	mov	r0, r5
   1183c:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   1183e:	250c      	movs	r5, #12
   11840:	e7fb      	b.n	1183a <radio_scan_disable+0x46>
   11842:	bf00      	nop
   11844:	200008c8 	.word	0x200008c8
   11848:	20000a10 	.word	0x20000a10
   1184c:	200009d4 	.word	0x200009d4

00011850 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   11850:	4b03      	ldr	r3, [pc, #12]	; (11860 <ll_connect_disable+0x10>)
   11852:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   11856:	b10b      	cbz	r3, 1185c <ll_connect_disable+0xc>
	status = radio_scan_disable();
   11858:	f7ff bfcc 	b.w	117f4 <radio_scan_disable>
}
   1185c:	200c      	movs	r0, #12
   1185e:	4770      	bx	lr
   11860:	200008c8 	.word	0x200008c8

00011864 <ll_rx_dequeue>:
{
   11864:	b530      	push	{r4, r5, lr}
   11866:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   11868:	4d47      	ldr	r5, [pc, #284]	; (11988 <ll_rx_dequeue+0x124>)
	struct radio_pdu_node_rx *node_rx = NULL;
   1186a:	aa04      	add	r2, sp, #16
   1186c:	2300      	movs	r3, #0
   1186e:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   11872:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   11876:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   1187a:	f7f5 ffb1 	bl	77e0 <memq_dequeue>
   1187e:	462c      	mov	r4, r5
	LL_ASSERT(link);
   11880:	b970      	cbnz	r0, 118a0 <ll_rx_dequeue+0x3c>
   11882:	4b42      	ldr	r3, [pc, #264]	; (1198c <ll_rx_dequeue+0x128>)
   11884:	9301      	str	r3, [sp, #4]
   11886:	9300      	str	r3, [sp, #0]
   11888:	4a41      	ldr	r2, [pc, #260]	; (11990 <ll_rx_dequeue+0x12c>)
   1188a:	4b42      	ldr	r3, [pc, #264]	; (11994 <ll_rx_dequeue+0x130>)
   1188c:	4942      	ldr	r1, [pc, #264]	; (11998 <ll_rx_dequeue+0x134>)
   1188e:	4843      	ldr	r0, [pc, #268]	; (1199c <ll_rx_dequeue+0x138>)
		LL_ASSERT(_radio.link_rx_data_quota <
   11890:	f7ef fb7c 	bl	f8c <printk>
   11894:	4040      	eors	r0, r0
   11896:	f380 8811 	msr	BASEPRI, r0
   1189a:	f04f 0004 	mov.w	r0, #4
   1189e:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   118a0:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   118a4:	f7f5 ff4d 	bl	7742 <mem_release>
	switch (node_rx->hdr.type) {
   118a8:	9a03      	ldr	r2, [sp, #12]
   118aa:	7911      	ldrb	r1, [r2, #4]
   118ac:	290c      	cmp	r1, #12
   118ae:	d807      	bhi.n	118c0 <ll_rx_dequeue+0x5c>
   118b0:	2301      	movs	r3, #1
   118b2:	408b      	lsls	r3, r1
   118b4:	f641 707e 	movw	r0, #8062	; 0x1f7e
   118b8:	4203      	tst	r3, r0
   118ba:	d109      	bne.n	118d0 <ll_rx_dequeue+0x6c>
   118bc:	0618      	lsls	r0, r3, #24
   118be:	d419      	bmi.n	118f4 <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
   118c0:	4b32      	ldr	r3, [pc, #200]	; (1198c <ll_rx_dequeue+0x128>)
   118c2:	9301      	str	r3, [sp, #4]
   118c4:	9300      	str	r3, [sp, #0]
   118c6:	4a32      	ldr	r2, [pc, #200]	; (11990 <ll_rx_dequeue+0x12c>)
   118c8:	4b32      	ldr	r3, [pc, #200]	; (11994 <ll_rx_dequeue+0x130>)
   118ca:	4933      	ldr	r1, [pc, #204]	; (11998 <ll_rx_dequeue+0x134>)
   118cc:	4834      	ldr	r0, [pc, #208]	; (119a0 <ll_rx_dequeue+0x13c>)
   118ce:	e7df      	b.n	11890 <ll_rx_dequeue+0x2c>
		LL_ASSERT(_radio.link_rx_data_quota <
   118d0:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   118d4:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   118d8:	3801      	subs	r0, #1
   118da:	4283      	cmp	r3, r0
   118dc:	db07      	blt.n	118ee <ll_rx_dequeue+0x8a>
   118de:	4b2b      	ldr	r3, [pc, #172]	; (1198c <ll_rx_dequeue+0x128>)
   118e0:	9301      	str	r3, [sp, #4]
   118e2:	9300      	str	r3, [sp, #0]
   118e4:	4a2a      	ldr	r2, [pc, #168]	; (11990 <ll_rx_dequeue+0x12c>)
   118e6:	4b2b      	ldr	r3, [pc, #172]	; (11994 <ll_rx_dequeue+0x130>)
   118e8:	492b      	ldr	r1, [pc, #172]	; (11998 <ll_rx_dequeue+0x134>)
   118ea:	482e      	ldr	r0, [pc, #184]	; (119a4 <ll_rx_dequeue+0x140>)
   118ec:	e7d0      	b.n	11890 <ll_rx_dequeue+0x2c>
		_radio.link_rx_data_quota++;
   118ee:	3301      	adds	r3, #1
   118f0:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   118f4:	2906      	cmp	r1, #6
   118f6:	d136      	bne.n	11966 <ll_rx_dequeue+0x102>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   118f8:	7ad3      	ldrb	r3, [r2, #11]
   118fa:	2b3c      	cmp	r3, #60	; 0x3c
   118fc:	d00d      	beq.n	1191a <ll_rx_dequeue+0xb6>
   118fe:	7b12      	ldrb	r2, [r2, #12]
   11900:	b9e2      	cbnz	r2, 1193c <ll_rx_dequeue+0xd8>
			LL_ASSERT(_radio.scanner.is_enabled);
   11902:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   11906:	07d9      	lsls	r1, r3, #31
   11908:	d42f      	bmi.n	1196a <ll_rx_dequeue+0x106>
   1190a:	4b20      	ldr	r3, [pc, #128]	; (1198c <ll_rx_dequeue+0x128>)
   1190c:	9301      	str	r3, [sp, #4]
   1190e:	9300      	str	r3, [sp, #0]
   11910:	4a1f      	ldr	r2, [pc, #124]	; (11990 <ll_rx_dequeue+0x12c>)
   11912:	4b20      	ldr	r3, [pc, #128]	; (11994 <ll_rx_dequeue+0x130>)
   11914:	4920      	ldr	r1, [pc, #128]	; (11998 <ll_rx_dequeue+0x134>)
   11916:	4824      	ldr	r0, [pc, #144]	; (119a8 <ll_rx_dequeue+0x144>)
   11918:	e7ba      	b.n	11890 <ll_rx_dequeue+0x2c>
				_radio.advertiser.conn = NULL;
   1191a:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   1191c:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   11920:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   11924:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   11928:	2b00      	cmp	r3, #0
   1192a:	db09      	blt.n	11940 <ll_rx_dequeue+0xdc>
   1192c:	4b17      	ldr	r3, [pc, #92]	; (1198c <ll_rx_dequeue+0x128>)
   1192e:	9301      	str	r3, [sp, #4]
   11930:	9300      	str	r3, [sp, #0]
   11932:	4a17      	ldr	r2, [pc, #92]	; (11990 <ll_rx_dequeue+0x12c>)
   11934:	4b17      	ldr	r3, [pc, #92]	; (11994 <ll_rx_dequeue+0x130>)
   11936:	4918      	ldr	r1, [pc, #96]	; (11998 <ll_rx_dequeue+0x134>)
   11938:	481c      	ldr	r0, [pc, #112]	; (119ac <ll_rx_dequeue+0x148>)
   1193a:	e7a9      	b.n	11890 <ll_rx_dequeue+0x2c>
		struct connection *conn = NULL;
   1193c:	2500      	movs	r5, #0
   1193e:	e7f1      	b.n	11924 <ll_rx_dequeue+0xc0>
			_radio.advertiser.is_enabled = 0;
   11940:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11944:	f36f 13c7 	bfc	r3, #7, #1
   11948:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   1194c:	b995      	cbnz	r5, 11974 <ll_rx_dequeue+0x110>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   1194e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   11952:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   11956:	f000 0001 	and.w	r0, r0, #1
   1195a:	0040      	lsls	r0, r0, #1
		if (!bm) {
   1195c:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   11960:	d101      	bne.n	11966 <ll_rx_dequeue+0x102>
			ll_adv_scan_state_cb(0);
   11962:	f000 fddb 	bl	1251c <ll_adv_scan_state_cb>
}
   11966:	b005      	add	sp, #20
   11968:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   1196a:	f362 0300 	bfi	r3, r2, #0, #1
   1196e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   11972:	e7ec      	b.n	1194e <ll_rx_dequeue+0xea>
			mem_release(node_rx->hdr.onion.link,
   11974:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   11978:	490d      	ldr	r1, [pc, #52]	; (119b0 <ll_rx_dequeue+0x14c>)
   1197a:	f7f5 fee2 	bl	7742 <mem_release>
			mem_release(conn, &_radio.conn_free);
   1197e:	490d      	ldr	r1, [pc, #52]	; (119b4 <ll_rx_dequeue+0x150>)
   11980:	4628      	mov	r0, r5
   11982:	f7f5 fede 	bl	7742 <mem_release>
   11986:	e7e2      	b.n	1194e <ll_rx_dequeue+0xea>
   11988:	200008c8 	.word	0x200008c8
   1198c:	000153a9 	.word	0x000153a9
   11990:	00016765 	.word	0x00016765
   11994:	00018433 	.word	0x00018433
   11998:	000167b4 	.word	0x000167b4
   1199c:	00018481 	.word	0x00018481
   119a0:	000166d9 	.word	0x000166d9
   119a4:	0001852c 	.word	0x0001852c
   119a8:	00018a1a 	.word	0x00018a1a
   119ac:	000189dc 	.word	0x000189dc
   119b0:	20000a10 	.word	0x20000a10
   119b4:	200009d4 	.word	0x200009d4

000119b8 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   119b8:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   119ba:	4c0b      	ldr	r4, [pc, #44]	; (119e8 <rtc0_nrf5_isr+0x30>)
   119bc:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   119c0:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   119c4:	b122      	cbz	r2, 119d0 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   119c6:	2000      	movs	r0, #0
   119c8:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   119cc:	f7f6 fd16 	bl	83fc <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   119d0:	b12d      	cbz	r5, 119de <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   119d2:	2300      	movs	r3, #0
   119d4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   119d8:	2001      	movs	r0, #1
   119da:	f7f6 fd0f 	bl	83fc <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   119de:	2000      	movs	r0, #0
}
   119e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   119e4:	f7f5 bfac 	b.w	7940 <mayfly_run>
   119e8:	4000b000 	.word	0x4000b000

000119ec <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   119ec:	2001      	movs	r0, #1
   119ee:	f7f5 bfa7 	b.w	7940 <mayfly_run>

000119f2 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   119f2:	4668      	mov	r0, sp
   119f4:	f020 0107 	bic.w	r1, r0, #7
   119f8:	468d      	mov	sp, r1
   119fa:	b501      	push	{r0, lr}
	isr_radio();
   119fc:	f001 f8ee 	bl	12bdc <isr_radio>
	ISR_DIRECT_PM();
   11a00:	f7ef ff76 	bl	18f0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   11a04:	f7ef fd60 	bl	14c8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11a08:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   11a0c:	4685      	mov	sp, r0
   11a0e:	4770      	bx	lr

00011a10 <radio_active_callback>:
{
   11a10:	4770      	bx	lr
	...

00011a14 <radio_event_callback>:
	k_sem_give(sem_recv);
   11a14:	4b01      	ldr	r3, [pc, #4]	; (11a1c <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   11a16:	6818      	ldr	r0, [r3, #0]
   11a18:	f002 bf0f 	b.w	1483a <_impl_k_sem_give>
   11a1c:	200011f8 	.word	0x200011f8

00011a20 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   11a20:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   11a22:	4b41      	ldr	r3, [pc, #260]	; (11b28 <ll_init+0x108>)
{
   11a24:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   11a26:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   11a28:	4840      	ldr	r0, [pc, #256]	; (11b2c <ll_init+0x10c>)
   11a2a:	f002 fa1f 	bl	13e6c <device_get_binding>
	if (!clk_k32) {
   11a2e:	b918      	cbnz	r0, 11a38 <ll_init+0x18>
		return -ENODEV;
   11a30:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   11a34:	b006      	add	sp, #24
   11a36:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   11a38:	6843      	ldr	r3, [r0, #4]
   11a3a:	2101      	movs	r1, #1
   11a3c:	681b      	ldr	r3, [r3, #0]
   11a3e:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   11a40:	483b      	ldr	r0, [pc, #236]	; (11b30 <ll_init+0x110>)
   11a42:	f002 fa13 	bl	13e6c <device_get_binding>
	if (!entropy) {
   11a46:	4604      	mov	r4, r0
   11a48:	2800      	cmp	r0, #0
   11a4a:	d0f1      	beq.n	11a30 <ll_init+0x10>
	cntr_init();
   11a4c:	f000 ffaa 	bl	129a4 <cntr_init>
	mayfly_init();
   11a50:	f7f5 fed6 	bl	7800 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11a54:	4b37      	ldr	r3, [pc, #220]	; (11b34 <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   11a56:	2203      	movs	r2, #3
   11a58:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11a5a:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   11a5c:	4a36      	ldr	r2, [pc, #216]	; (11b38 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11a5e:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   11a60:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   11a62:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   11a64:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   11a66:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   11a68:	9205      	str	r2, [sp, #20]
   11a6a:	4a34      	ldr	r2, [pc, #208]	; (11b3c <ll_init+0x11c>)
   11a6c:	9204      	str	r2, [sp, #16]
   11a6e:	4a34      	ldr	r2, [pc, #208]	; (11b40 <ll_init+0x120>)
   11a70:	9203      	str	r2, [sp, #12]
   11a72:	4a34      	ldr	r2, [pc, #208]	; (11b44 <ll_init+0x124>)
   11a74:	9202      	str	r2, [sp, #8]
   11a76:	220d      	movs	r2, #13
   11a78:	9201      	str	r2, [sp, #4]
   11a7a:	9300      	str	r3, [sp, #0]
   11a7c:	4a32      	ldr	r2, [pc, #200]	; (11b48 <ll_init+0x128>)
   11a7e:	2304      	movs	r3, #4
   11a80:	f7f6 fc84 	bl	838c <ticker_init>
	LL_ASSERT(!err);
   11a84:	b170      	cbz	r0, 11aa4 <ll_init+0x84>
   11a86:	4b31      	ldr	r3, [pc, #196]	; (11b4c <ll_init+0x12c>)
   11a88:	9301      	str	r3, [sp, #4]
   11a8a:	9300      	str	r3, [sp, #0]
   11a8c:	4a30      	ldr	r2, [pc, #192]	; (11b50 <ll_init+0x130>)
   11a8e:	4b31      	ldr	r3, [pc, #196]	; (11b54 <ll_init+0x134>)
   11a90:	4931      	ldr	r1, [pc, #196]	; (11b58 <ll_init+0x138>)
   11a92:	4832      	ldr	r0, [pc, #200]	; (11b5c <ll_init+0x13c>)
   11a94:	f7ef fa7a 	bl	f8c <printk>
   11a98:	4040      	eors	r0, r0
   11a9a:	f380 8811 	msr	BASEPRI, r0
   11a9e:	f04f 0004 	mov.w	r0, #4
   11aa2:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   11aa4:	482e      	ldr	r0, [pc, #184]	; (11b60 <ll_init+0x140>)
   11aa6:	f002 f9e1 	bl	13e6c <device_get_binding>
	if (!clk_m16) {
   11aaa:	2800      	cmp	r0, #0
   11aac:	d0c0      	beq.n	11a30 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   11aae:	4b2d      	ldr	r3, [pc, #180]	; (11b64 <ll_init+0x144>)
   11ab0:	9304      	str	r3, [sp, #16]
   11ab2:	9501      	str	r5, [sp, #4]
   11ab4:	231b      	movs	r3, #27
   11ab6:	2501      	movs	r5, #1
   11ab8:	f44f 7657 	mov.w	r6, #860	; 0x35c
   11abc:	9303      	str	r3, [sp, #12]
   11abe:	9302      	str	r3, [sp, #8]
   11ac0:	4622      	mov	r2, r4
   11ac2:	9605      	str	r6, [sp, #20]
   11ac4:	9500      	str	r5, [sp, #0]
   11ac6:	462b      	mov	r3, r5
   11ac8:	2107      	movs	r1, #7
   11aca:	f7fe ff49 	bl	10960 <radio_init>
	if (err) {
   11ace:	4604      	mov	r4, r0
   11ad0:	b160      	cbz	r0, 11aec <ll_init+0xcc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   11ad2:	4b1e      	ldr	r3, [pc, #120]	; (11b4c <ll_init+0x12c>)
   11ad4:	9303      	str	r3, [sp, #12]
   11ad6:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
   11ada:	4a1d      	ldr	r2, [pc, #116]	; (11b50 <ll_init+0x130>)
   11adc:	4b1d      	ldr	r3, [pc, #116]	; (11b54 <ll_init+0x134>)
   11ade:	491e      	ldr	r1, [pc, #120]	; (11b58 <ll_init+0x138>)
   11ae0:	4821      	ldr	r0, [pc, #132]	; (11b68 <ll_init+0x148>)
   11ae2:	f7ef fa53 	bl	f8c <printk>
		return -ENOMEM;
   11ae6:	f06f 000b 	mvn.w	r0, #11
   11aea:	e7a3      	b.n	11a34 <ll_init+0x14>
	ll_filter_reset(true);
   11aec:	4628      	mov	r0, r5
   11aee:	f000 ff11 	bl	12914 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   11af2:	4622      	mov	r2, r4
   11af4:	4621      	mov	r1, r4
   11af6:	4628      	mov	r0, r5
   11af8:	f7ef fee0 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   11afc:	4622      	mov	r2, r4
   11afe:	4621      	mov	r1, r4
   11b00:	200b      	movs	r0, #11
   11b02:	f7ef fedb 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   11b06:	4622      	mov	r2, r4
   11b08:	4621      	mov	r1, r4
   11b0a:	2018      	movs	r0, #24
   11b0c:	f7ef fed6 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   11b10:	4628      	mov	r0, r5
   11b12:	f7ef fea1 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   11b16:	200b      	movs	r0, #11
   11b18:	f7ef fe9e 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   11b1c:	2018      	movs	r0, #24
   11b1e:	f7ef fe9b 	bl	1858 <_arch_irq_enable>
	return 0;
   11b22:	4620      	mov	r0, r4
   11b24:	e786      	b.n	11a34 <ll_init+0x14>
   11b26:	bf00      	nop
   11b28:	200011f8 	.word	0x200011f8
   11b2c:	0001547c 	.word	0x0001547c
   11b30:	00015450 	.word	0x00015450
   11b34:	200011d8 	.word	0x200011d8
   11b38:	00013579 	.word	0x00013579
   11b3c:	000134d5 	.word	0x000134d5
   11b40:	00013479 	.word	0x00013479
   11b44:	20000f68 	.word	0x20000f68
   11b48:	20000e28 	.word	0x20000e28
   11b4c:	000153a9 	.word	0x000153a9
   11b50:	00016765 	.word	0x00016765
   11b54:	00019151 	.word	0x00019151
   11b58:	000167b4 	.word	0x000167b4
   11b5c:	00019159 	.word	0x00019159
   11b60:	00015487 	.word	0x00015487
   11b64:	20000acc 	.word	0x20000acc
   11b68:	0001917f 	.word	0x0001917f

00011b6c <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   11b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11b70:	4681      	mov	r9, r0
   11b72:	4688      	mov	r8, r1
   11b74:	4617      	mov	r7, r2
   11b76:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   11b78:	f7fe ffd6 	bl	10b28 <ll_scan_is_enabled>
   11b7c:	b988      	cbnz	r0, 11ba2 <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   11b7e:	4d0a      	ldr	r5, [pc, #40]	; (11ba8 <ll_scan_params_set+0x3c>)
   11b80:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   11b82:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   11b86:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   11b8a:	4622      	mov	r2, r4
   11b8c:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   11b90:	4613      	mov	r3, r2
   11b92:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   11b96:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   11b98:	f362 1387 	bfi	r3, r2, #6, #2
   11b9c:	712b      	strb	r3, [r5, #4]

	return 0;
   11b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11ba2:	200c      	movs	r0, #12
}
   11ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11ba8:	200011fc 	.word	0x200011fc

00011bac <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   11bac:	b5f0      	push	{r4, r5, r6, r7, lr}
   11bae:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   11bb0:	b920      	cbnz	r0, 11bbc <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   11bb2:	b005      	add	sp, #20
   11bb4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   11bb8:	f7ff be1c 	b.w	117f4 <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   11bbc:	f7fe ffb4 	bl	10b28 <ll_scan_is_enabled>
   11bc0:	4606      	mov	r6, r0
   11bc2:	bb40      	cbnz	r0, 11c16 <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   11bc4:	4c15      	ldr	r4, [pc, #84]	; (11c1c <ll_scan_enable+0x70>)
   11bc6:	7920      	ldrb	r0, [r4, #4]
   11bc8:	0980      	lsrs	r0, r0, #6
   11bca:	f000 fa63 	bl	12094 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   11bce:	7923      	ldrb	r3, [r4, #4]
   11bd0:	f013 0501 	ands.w	r5, r3, #1
   11bd4:	d006      	beq.n	11be4 <ll_scan_enable+0x38>
   11bd6:	f013 0520 	ands.w	r5, r3, #32
   11bda:	d003      	beq.n	11be4 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   11bdc:	4630      	mov	r0, r6
   11bde:	f000 fbdd 	bl	1239c <ll_rl_rpa_update>
		rpa_gen = 1;
   11be2:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   11be4:	7926      	ldrb	r6, [r4, #4]
   11be6:	f006 070f 	and.w	r7, r6, #15
   11bea:	f3c6 1600 	ubfx	r6, r6, #4, #1
   11bee:	2100      	movs	r1, #0
   11bf0:	4630      	mov	r0, r6
   11bf2:	f7f6 fd89 	bl	8708 <ll_addr_get>
   11bf6:	22ff      	movs	r2, #255	; 0xff
   11bf8:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   11bfa:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   11bfc:	8823      	ldrh	r3, [r4, #0]
   11bfe:	9502      	str	r5, [sp, #8]
   11c00:	0992      	lsrs	r2, r2, #6
   11c02:	9201      	str	r2, [sp, #4]
   11c04:	8862      	ldrh	r2, [r4, #2]
   11c06:	9200      	str	r2, [sp, #0]
   11c08:	4631      	mov	r1, r6
   11c0a:	4602      	mov	r2, r0
   11c0c:	4638      	mov	r0, r7
   11c0e:	f7ff fd13 	bl	11638 <radio_scan_enable>
}
   11c12:	b005      	add	sp, #20
   11c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   11c16:	2000      	movs	r0, #0
   11c18:	e7fb      	b.n	11c12 <ll_scan_enable+0x66>
   11c1a:	bf00      	nop
   11c1c:	200011fc 	.word	0x200011fc

00011c20 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   11c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c24:	b085      	sub	sp, #20
   11c26:	461e      	mov	r6, r3
   11c28:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   11c2c:	9303      	str	r3, [sp, #12]
   11c2e:	4680      	mov	r8, r0
   11c30:	4689      	mov	r9, r1
   11c32:	4615      	mov	r5, r2
   11c34:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   11c36:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   11c3a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   11c3e:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   11c42:	f7fe ff71 	bl	10b28 <ll_scan_is_enabled>
   11c46:	9b03      	ldr	r3, [sp, #12]
   11c48:	bba0      	cbnz	r0, 11cb4 <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   11c4a:	9300      	str	r3, [sp, #0]
   11c4c:	4652      	mov	r2, sl
   11c4e:	465b      	mov	r3, fp
   11c50:	4639      	mov	r1, r7
   11c52:	4630      	mov	r0, r6
   11c54:	f7fe ff8c 	bl	10b70 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   11c58:	bb68      	cbnz	r0, 11cb6 <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   11c5a:	4628      	mov	r0, r5
   11c5c:	f000 fa1a 	bl	12094 <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   11c60:	b1dd      	cbz	r5, 11c9a <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   11c62:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   11c64:	1ea3      	subs	r3, r4, #2
   11c66:	2b01      	cmp	r3, #1
   11c68:	d822      	bhi.n	11cb0 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   11c6a:	2000      	movs	r0, #0
   11c6c:	f000 fb96 	bl	1239c <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   11c70:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   11c74:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   11c76:	2100      	movs	r1, #0
   11c78:	4620      	mov	r0, r4
   11c7a:	f7f6 fd45 	bl	8708 <ll_addr_get>
   11c7e:	4643      	mov	r3, r8
   11c80:	4602      	mov	r2, r0
   11c82:	4621      	mov	r1, r4
   11c84:	2000      	movs	r0, #0
   11c86:	9711      	str	r7, [sp, #68]	; 0x44
   11c88:	9610      	str	r6, [sp, #64]	; 0x40
   11c8a:	950f      	str	r5, [sp, #60]	; 0x3c
   11c8c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   11c90:	b005      	add	sp, #20
   11c92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   11c96:	f7ff bccf 	b.w	11638 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   11c9a:	f000 fb77 	bl	1238c <ctrl_rl_enabled>
   11c9e:	2800      	cmp	r0, #0
   11ca0:	d0df      	beq.n	11c62 <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   11ca2:	4639      	mov	r1, r7
   11ca4:	462a      	mov	r2, r5
   11ca6:	4630      	mov	r0, r6
   11ca8:	f000 fa16 	bl	120d8 <ll_rl_find>
   11cac:	4607      	mov	r7, r0
   11cae:	e7d9      	b.n	11c64 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   11cb0:	2600      	movs	r6, #0
   11cb2:	e7e0      	b.n	11c76 <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11cb4:	200c      	movs	r0, #12
}
   11cb6:	b005      	add	sp, #20
   11cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011cbc <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   11cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11cc0:	4688      	mov	r8, r1
	int i;

	if (free) {
   11cc2:	4615      	mov	r5, r2
   11cc4:	b10a      	cbz	r2, 11cca <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   11cc6:	23ff      	movs	r3, #255	; 0xff
   11cc8:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   11cca:	4e14      	ldr	r6, [pc, #80]	; (11d1c <wl_find+0x60>)
{
   11ccc:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   11cce:	f000 0701 	and.w	r7, r0, #1
   11cd2:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11cd6:	07da      	lsls	r2, r3, #31
   11cd8:	d51d      	bpl.n	11d16 <wl_find+0x5a>
   11cda:	f3c3 0340 	ubfx	r3, r3, #1, #1
   11cde:	42bb      	cmp	r3, r7
   11ce0:	d113      	bne.n	11d0a <wl_find+0x4e>
   11ce2:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   11ce6:	2206      	movs	r2, #6
   11ce8:	4641      	mov	r1, r8
   11cea:	3002      	adds	r0, #2
   11cec:	f7ef ff71 	bl	1bd2 <memcmp>
   11cf0:	b910      	cbnz	r0, 11cf8 <wl_find+0x3c>
			return i;
   11cf2:	b2e0      	uxtb	r0, r4
   11cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11cf8:	b13d      	cbz	r5, 11d0a <wl_find+0x4e>
   11cfa:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11cfe:	07db      	lsls	r3, r3, #31
   11d00:	d403      	bmi.n	11d0a <wl_find+0x4e>
   11d02:	782b      	ldrb	r3, [r5, #0]
   11d04:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   11d06:	bf08      	it	eq
   11d08:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   11d0a:	3401      	adds	r4, #1
   11d0c:	2c08      	cmp	r4, #8
   11d0e:	d1e0      	bne.n	11cd2 <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   11d10:	20ff      	movs	r0, #255	; 0xff
   11d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11d16:	2d00      	cmp	r5, #0
   11d18:	d1f3      	bne.n	11d02 <wl_find+0x46>
   11d1a:	e7f6      	b.n	11d0a <wl_find+0x4e>
   11d1c:	2000142f 	.word	0x2000142f

00011d20 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   11d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d24:	4d1a      	ldr	r5, [pc, #104]	; (11d90 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11d26:	f8df 8074 	ldr.w	r8, [pc, #116]	; 11d9c <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   11d2a:	1eae      	subs	r6, r5, #2
{
   11d2c:	2400      	movs	r4, #0
   11d2e:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   11d30:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11d34:	07d9      	lsls	r1, r3, #31
   11d36:	d524      	bpl.n	11d82 <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11d38:	f898 3000 	ldrb.w	r3, [r8]
   11d3c:	b15b      	cbz	r3, 11d56 <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   11d3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11d42:	2a07      	cmp	r2, #7
   11d44:	d807      	bhi.n	11d56 <filter_wl_update+0x36>
   11d46:	2328      	movs	r3, #40	; 0x28
   11d48:	4353      	muls	r3, r2
   11d4a:	4a12      	ldr	r2, [pc, #72]	; (11d94 <filter_wl_update+0x74>)
   11d4c:	5cd3      	ldrb	r3, [r2, r3]
   11d4e:	075a      	lsls	r2, r3, #29
   11d50:	d501      	bpl.n	11d56 <filter_wl_update+0x36>
   11d52:	06db      	lsls	r3, r3, #27
   11d54:	d515      	bpl.n	11d82 <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   11d56:	4810      	ldr	r0, [pc, #64]	; (11d98 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11d58:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   11d5c:	2201      	movs	r2, #1
   11d5e:	fa02 f104 	lsl.w	r1, r2, r4
   11d62:	7802      	ldrb	r2, [r0, #0]
   11d64:	430a      	orrs	r2, r1
   11d66:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11d68:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11d6c:	7842      	ldrb	r2, [r0, #1]
   11d6e:	40a3      	lsls	r3, r4
   11d70:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11d72:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11d74:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11d76:	fb02 0004 	mla	r0, r2, r4, r0
   11d7a:	4629      	mov	r1, r5
   11d7c:	3002      	adds	r0, #2
   11d7e:	f7ef ff3d 	bl	1bfc <memcpy>
   11d82:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   11d84:	2c08      	cmp	r4, #8
   11d86:	f105 0508 	add.w	r5, r5, #8
   11d8a:	d1d1      	bne.n	11d30 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   11d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11d90:	20001431 	.word	0x20001431
   11d94:	200012bc 	.word	0x200012bc
   11d98:	2000146f 	.word	0x2000146f
   11d9c:	200013fc 	.word	0x200013fc

00011da0 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   11da0:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   11da2:	f7fe fead 	bl	10b00 <ll_adv_is_enabled>
   11da6:	b928      	cbnz	r0, 11db4 <rl_access_check.constprop.1+0x14>
   11da8:	f7fe febe 	bl	10b28 <ll_scan_is_enabled>
   11dac:	fab0 f080 	clz	r0, r0
   11db0:	0940      	lsrs	r0, r0, #5
   11db2:	bd08      	pop	{r3, pc}
   11db4:	2000      	movs	r0, #0
}
   11db6:	bd08      	pop	{r3, pc}

00011db8 <filter_rl_update>:
{
   11db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   11dba:	4e10      	ldr	r6, [pc, #64]	; (11dfc <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   11dbc:	4d10      	ldr	r5, [pc, #64]	; (11e00 <filter_rl_update+0x48>)
{
   11dbe:	2400      	movs	r4, #0
		if (rl[i].taken) {
   11dc0:	2728      	movs	r7, #40	; 0x28
   11dc2:	fb07 f104 	mul.w	r1, r7, r4
   11dc6:	5c73      	ldrb	r3, [r6, r1]
   11dc8:	07da      	lsls	r2, r3, #31
   11dca:	d513      	bpl.n	11df4 <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   11dcc:	2201      	movs	r2, #1
   11dce:	fa02 f004 	lsl.w	r0, r2, r4
   11dd2:	782a      	ldrb	r2, [r5, #0]
   11dd4:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   11dd6:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   11dda:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11ddc:	786a      	ldrb	r2, [r5, #1]
   11dde:	40a3      	lsls	r3, r4
   11de0:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11de2:	2206      	movs	r2, #6
   11de4:	3101      	adds	r1, #1
   11de6:	fb02 5004 	mla	r0, r2, r4, r5
   11dea:	4431      	add	r1, r6
   11dec:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11dee:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11df0:	f7ef ff04 	bl	1bfc <memcpy>
   11df4:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11df6:	2c08      	cmp	r4, #8
   11df8:	d1e3      	bne.n	11dc2 <filter_rl_update+0xa>
}
   11dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11dfc:	200012bc 	.word	0x200012bc
   11e00:	200013fd 	.word	0x200013fd

00011e04 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   11e04:	2807      	cmp	r0, #7
   11e06:	d80c      	bhi.n	11e22 <ctrl_lrpa_get+0x1e>
   11e08:	2328      	movs	r3, #40	; 0x28
   11e0a:	4358      	muls	r0, r3
   11e0c:	4a06      	ldr	r2, [pc, #24]	; (11e28 <ctrl_lrpa_get+0x24>)
   11e0e:	5c13      	ldrb	r3, [r2, r0]
   11e10:	1811      	adds	r1, r2, r0
   11e12:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   11e16:	b128      	cbz	r0, 11e24 <ctrl_lrpa_get+0x20>
   11e18:	f3c3 0040 	ubfx	r0, r3, #1, #1
   11e1c:	b110      	cbz	r0, 11e24 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   11e1e:	6a48      	ldr	r0, [r1, #36]	; 0x24
   11e20:	4770      	bx	lr
		return NULL;
   11e22:	2000      	movs	r0, #0
}
   11e24:	4770      	bx	lr
   11e26:	bf00      	nop
   11e28:	200012bc 	.word	0x200012bc

00011e2c <ctrl_irks_get>:
	*count = peer_irk_count;
   11e2c:	4b02      	ldr	r3, [pc, #8]	; (11e38 <ctrl_irks_get+0xc>)
   11e2e:	781b      	ldrb	r3, [r3, #0]
   11e30:	7003      	strb	r3, [r0, #0]
}
   11e32:	4802      	ldr	r0, [pc, #8]	; (11e3c <ctrl_irks_get+0x10>)
   11e34:	4770      	bx	lr
   11e36:	bf00      	nop
   11e38:	20001232 	.word	0x20001232
   11e3c:	2000123b 	.word	0x2000123b

00011e40 <ctrl_rl_idx>:
{
   11e40:	b507      	push	{r0, r1, r2, lr}
	if (whitelist) {
   11e42:	b320      	cbz	r0, 11e8e <ctrl_rl_idx+0x4e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   11e44:	2907      	cmp	r1, #7
   11e46:	d90e      	bls.n	11e66 <ctrl_rl_idx+0x26>
		LL_ASSERT(wl[devmatch_id].taken);
   11e48:	4b1d      	ldr	r3, [pc, #116]	; (11ec0 <ctrl_rl_idx+0x80>)
   11e4a:	9301      	str	r3, [sp, #4]
   11e4c:	9300      	str	r3, [sp, #0]
   11e4e:	4a1d      	ldr	r2, [pc, #116]	; (11ec4 <ctrl_rl_idx+0x84>)
   11e50:	4b1d      	ldr	r3, [pc, #116]	; (11ec8 <ctrl_rl_idx+0x88>)
   11e52:	491e      	ldr	r1, [pc, #120]	; (11ecc <ctrl_rl_idx+0x8c>)
   11e54:	481e      	ldr	r0, [pc, #120]	; (11ed0 <ctrl_rl_idx+0x90>)
   11e56:	f7ef f899 	bl	f8c <printk>
   11e5a:	4040      	eors	r0, r0
   11e5c:	f380 8811 	msr	BASEPRI, r0
   11e60:	f04f 0004 	mov.w	r0, #4
   11e64:	df02      	svc	2
   11e66:	4b1b      	ldr	r3, [pc, #108]	; (11ed4 <ctrl_rl_idx+0x94>)
   11e68:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   11e6c:	07d2      	lsls	r2, r2, #31
   11e6e:	d407      	bmi.n	11e80 <ctrl_rl_idx+0x40>
   11e70:	4b13      	ldr	r3, [pc, #76]	; (11ec0 <ctrl_rl_idx+0x80>)
   11e72:	9301      	str	r3, [sp, #4]
   11e74:	9300      	str	r3, [sp, #0]
   11e76:	4a13      	ldr	r2, [pc, #76]	; (11ec4 <ctrl_rl_idx+0x84>)
   11e78:	4b13      	ldr	r3, [pc, #76]	; (11ec8 <ctrl_rl_idx+0x88>)
   11e7a:	4914      	ldr	r1, [pc, #80]	; (11ecc <ctrl_rl_idx+0x8c>)
   11e7c:	4816      	ldr	r0, [pc, #88]	; (11ed8 <ctrl_rl_idx+0x98>)
   11e7e:	e7ea      	b.n	11e56 <ctrl_rl_idx+0x16>
		i = wl[devmatch_id].rl_idx;
   11e80:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   11e84:	7849      	ldrb	r1, [r1, #1]
}
   11e86:	4608      	mov	r0, r1
   11e88:	b003      	add	sp, #12
   11e8a:	f85d fb04 	ldr.w	pc, [sp], #4
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   11e8e:	2907      	cmp	r1, #7
   11e90:	d907      	bls.n	11ea2 <ctrl_rl_idx+0x62>
   11e92:	4b0b      	ldr	r3, [pc, #44]	; (11ec0 <ctrl_rl_idx+0x80>)
   11e94:	9301      	str	r3, [sp, #4]
   11e96:	9300      	str	r3, [sp, #0]
   11e98:	4a0a      	ldr	r2, [pc, #40]	; (11ec4 <ctrl_rl_idx+0x84>)
   11e9a:	4b0b      	ldr	r3, [pc, #44]	; (11ec8 <ctrl_rl_idx+0x88>)
   11e9c:	490b      	ldr	r1, [pc, #44]	; (11ecc <ctrl_rl_idx+0x8c>)
   11e9e:	480f      	ldr	r0, [pc, #60]	; (11edc <ctrl_rl_idx+0x9c>)
   11ea0:	e7d9      	b.n	11e56 <ctrl_rl_idx+0x16>
		LL_ASSERT(rl[i].taken);
   11ea2:	2328      	movs	r3, #40	; 0x28
   11ea4:	434b      	muls	r3, r1
   11ea6:	4a0e      	ldr	r2, [pc, #56]	; (11ee0 <ctrl_rl_idx+0xa0>)
   11ea8:	5cd3      	ldrb	r3, [r2, r3]
   11eaa:	07db      	lsls	r3, r3, #31
   11eac:	d4eb      	bmi.n	11e86 <ctrl_rl_idx+0x46>
   11eae:	4b04      	ldr	r3, [pc, #16]	; (11ec0 <ctrl_rl_idx+0x80>)
   11eb0:	9301      	str	r3, [sp, #4]
   11eb2:	9300      	str	r3, [sp, #0]
   11eb4:	4a03      	ldr	r2, [pc, #12]	; (11ec4 <ctrl_rl_idx+0x84>)
   11eb6:	4b04      	ldr	r3, [pc, #16]	; (11ec8 <ctrl_rl_idx+0x88>)
   11eb8:	4904      	ldr	r1, [pc, #16]	; (11ecc <ctrl_rl_idx+0x8c>)
   11eba:	480a      	ldr	r0, [pc, #40]	; (11ee4 <ctrl_rl_idx+0xa4>)
   11ebc:	e7cb      	b.n	11e56 <ctrl_rl_idx+0x16>
   11ebe:	bf00      	nop
   11ec0:	000153a9 	.word	0x000153a9
   11ec4:	00016765 	.word	0x00016765
   11ec8:	000191b4 	.word	0x000191b4
   11ecc:	000167b4 	.word	0x000167b4
   11ed0:	00019260 	.word	0x00019260
   11ed4:	2000142f 	.word	0x2000142f
   11ed8:	0001932d 	.word	0x0001932d
   11edc:	00019364 	.word	0x00019364
   11ee0:	200012bc 	.word	0x200012bc
   11ee4:	00019431 	.word	0x00019431

00011ee8 <ctrl_rl_irk_idx>:
{
   11ee8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   11eea:	4b18      	ldr	r3, [pc, #96]	; (11f4c <ctrl_rl_irk_idx+0x64>)
   11eec:	781b      	ldrb	r3, [r3, #0]
   11eee:	4283      	cmp	r3, r0
   11ef0:	d80e      	bhi.n	11f10 <ctrl_rl_irk_idx+0x28>
   11ef2:	4b17      	ldr	r3, [pc, #92]	; (11f50 <ctrl_rl_irk_idx+0x68>)
   11ef4:	9301      	str	r3, [sp, #4]
   11ef6:	9300      	str	r3, [sp, #0]
   11ef8:	4a16      	ldr	r2, [pc, #88]	; (11f54 <ctrl_rl_irk_idx+0x6c>)
   11efa:	4b17      	ldr	r3, [pc, #92]	; (11f58 <ctrl_rl_irk_idx+0x70>)
   11efc:	4917      	ldr	r1, [pc, #92]	; (11f5c <ctrl_rl_irk_idx+0x74>)
   11efe:	4818      	ldr	r0, [pc, #96]	; (11f60 <ctrl_rl_irk_idx+0x78>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11f00:	f7ef f844 	bl	f8c <printk>
   11f04:	4040      	eors	r0, r0
   11f06:	f380 8811 	msr	BASEPRI, r0
   11f0a:	f04f 0004 	mov.w	r0, #4
   11f0e:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   11f10:	4b14      	ldr	r3, [pc, #80]	; (11f64 <ctrl_rl_irk_idx+0x7c>)
   11f12:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11f14:	2807      	cmp	r0, #7
   11f16:	d907      	bls.n	11f28 <ctrl_rl_irk_idx+0x40>
   11f18:	4b0d      	ldr	r3, [pc, #52]	; (11f50 <ctrl_rl_irk_idx+0x68>)
   11f1a:	9301      	str	r3, [sp, #4]
   11f1c:	9300      	str	r3, [sp, #0]
   11f1e:	4a0d      	ldr	r2, [pc, #52]	; (11f54 <ctrl_rl_irk_idx+0x6c>)
   11f20:	4b0d      	ldr	r3, [pc, #52]	; (11f58 <ctrl_rl_irk_idx+0x70>)
   11f22:	490e      	ldr	r1, [pc, #56]	; (11f5c <ctrl_rl_irk_idx+0x74>)
   11f24:	4810      	ldr	r0, [pc, #64]	; (11f68 <ctrl_rl_irk_idx+0x80>)
   11f26:	e7eb      	b.n	11f00 <ctrl_rl_irk_idx+0x18>
	LL_ASSERT(rl[i].taken);
   11f28:	2328      	movs	r3, #40	; 0x28
   11f2a:	4343      	muls	r3, r0
   11f2c:	4a0f      	ldr	r2, [pc, #60]	; (11f6c <ctrl_rl_irk_idx+0x84>)
   11f2e:	5cd3      	ldrb	r3, [r2, r3]
   11f30:	07db      	lsls	r3, r3, #31
   11f32:	d407      	bmi.n	11f44 <ctrl_rl_irk_idx+0x5c>
   11f34:	4b06      	ldr	r3, [pc, #24]	; (11f50 <ctrl_rl_irk_idx+0x68>)
   11f36:	9301      	str	r3, [sp, #4]
   11f38:	9300      	str	r3, [sp, #0]
   11f3a:	4a06      	ldr	r2, [pc, #24]	; (11f54 <ctrl_rl_irk_idx+0x6c>)
   11f3c:	4b06      	ldr	r3, [pc, #24]	; (11f58 <ctrl_rl_irk_idx+0x70>)
   11f3e:	4907      	ldr	r1, [pc, #28]	; (11f5c <ctrl_rl_irk_idx+0x74>)
   11f40:	480b      	ldr	r0, [pc, #44]	; (11f70 <ctrl_rl_irk_idx+0x88>)
   11f42:	e7dd      	b.n	11f00 <ctrl_rl_irk_idx+0x18>
}
   11f44:	b003      	add	sp, #12
   11f46:	f85d fb04 	ldr.w	pc, [sp], #4
   11f4a:	bf00      	nop
   11f4c:	20001232 	.word	0x20001232
   11f50:	000153a9 	.word	0x000153a9
   11f54:	00016765 	.word	0x00016765
   11f58:	000191c0 	.word	0x000191c0
   11f5c:	000167b4 	.word	0x000167b4
   11f60:	0001945e 	.word	0x0001945e
   11f64:	20001233 	.word	0x20001233
   11f68:	0001949c 	.word	0x0001949c
   11f6c:	200012bc 	.word	0x200012bc
   11f70:	00019431 	.word	0x00019431

00011f74 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11f74:	2807      	cmp	r0, #7
{
   11f76:	b507      	push	{r0, r1, r2, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11f78:	d819      	bhi.n	11fae <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   11f7a:	2328      	movs	r3, #40	; 0x28
   11f7c:	4358      	muls	r0, r3
   11f7e:	4b0d      	ldr	r3, [pc, #52]	; (11fb4 <ctrl_irk_whitelisted+0x40>)
   11f80:	5c18      	ldrb	r0, [r3, r0]
   11f82:	07c3      	lsls	r3, r0, #31
   11f84:	d40e      	bmi.n	11fa4 <ctrl_irk_whitelisted+0x30>
   11f86:	4b0c      	ldr	r3, [pc, #48]	; (11fb8 <ctrl_irk_whitelisted+0x44>)
   11f88:	9301      	str	r3, [sp, #4]
   11f8a:	9300      	str	r3, [sp, #0]
   11f8c:	4a0b      	ldr	r2, [pc, #44]	; (11fbc <ctrl_irk_whitelisted+0x48>)
   11f8e:	4b0c      	ldr	r3, [pc, #48]	; (11fc0 <ctrl_irk_whitelisted+0x4c>)
   11f90:	490c      	ldr	r1, [pc, #48]	; (11fc4 <ctrl_irk_whitelisted+0x50>)
   11f92:	480d      	ldr	r0, [pc, #52]	; (11fc8 <ctrl_irk_whitelisted+0x54>)
   11f94:	f7ee fffa 	bl	f8c <printk>
   11f98:	4040      	eors	r0, r0
   11f9a:	f380 8811 	msr	BASEPRI, r0
   11f9e:	f04f 0004 	mov.w	r0, #4
   11fa2:	df02      	svc	2
	return rl[rl_idx].wl;
   11fa4:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   11fa8:	b003      	add	sp, #12
   11faa:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   11fae:	2000      	movs	r0, #0
   11fb0:	e7fa      	b.n	11fa8 <ctrl_irk_whitelisted+0x34>
   11fb2:	bf00      	nop
   11fb4:	200012bc 	.word	0x200012bc
   11fb8:	000153a9 	.word	0x000153a9
   11fbc:	00016765 	.word	0x00016765
   11fc0:	000191d0 	.word	0x000191d0
   11fc4:	000167b4 	.word	0x000167b4
   11fc8:	0001922e 	.word	0x0001922e

00011fcc <ctrl_filter_get>:
}
   11fcc:	4b03      	ldr	r3, [pc, #12]	; (11fdc <ctrl_filter_get+0x10>)
   11fce:	4a04      	ldr	r2, [pc, #16]	; (11fe0 <ctrl_filter_get+0x14>)
   11fd0:	2800      	cmp	r0, #0
   11fd2:	bf14      	ite	ne
   11fd4:	4610      	movne	r0, r2
   11fd6:	4618      	moveq	r0, r3
   11fd8:	4770      	bx	lr
   11fda:	bf00      	nop
   11fdc:	200013fd 	.word	0x200013fd
   11fe0:	2000146f 	.word	0x2000146f

00011fe4 <ll_wl_size_get>:
   11fe4:	2008      	movs	r0, #8
   11fe6:	4770      	bx	lr

00011fe8 <ll_wl_clear>:
{
   11fe8:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11fea:	f7fe fd91 	bl	10b10 <radio_adv_filter_pol_get>
   11fee:	4604      	mov	r4, r0
   11ff0:	b110      	cbz	r0, 11ff8 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11ff2:	240c      	movs	r4, #12
}
   11ff4:	4620      	mov	r0, r4
   11ff6:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11ff8:	f7fe fdac 	bl	10b54 <radio_scan_filter_pol_get>
   11ffc:	07c3      	lsls	r3, r0, #31
   11ffe:	d4f8      	bmi.n	11ff2 <ll_wl_clear+0xa>
		wl[i].taken = 0;
   12000:	4a07      	ldr	r2, [pc, #28]	; (12020 <ll_wl_clear+0x38>)
   12002:	4623      	mov	r3, r4
   12004:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   12008:	f36f 0100 	bfc	r1, #0, #1
   1200c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   12010:	3301      	adds	r3, #1
   12012:	2b08      	cmp	r3, #8
   12014:	d1f6      	bne.n	12004 <ll_wl_clear+0x1c>
	wl_anon = 0;
   12016:	4b03      	ldr	r3, [pc, #12]	; (12024 <ll_wl_clear+0x3c>)
   12018:	2200      	movs	r2, #0
   1201a:	701a      	strb	r2, [r3, #0]
	return 0;
   1201c:	e7ea      	b.n	11ff4 <ll_wl_clear+0xc>
   1201e:	bf00      	nop
   12020:	2000142f 	.word	0x2000142f
   12024:	20001920 	.word	0x20001920

00012028 <ll_wl_remove>:
{
   12028:	b538      	push	{r3, r4, r5, lr}
   1202a:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1202c:	f7fe fd70 	bl	10b10 <radio_adv_filter_pol_get>
   12030:	4604      	mov	r4, r0
   12032:	b110      	cbz	r0, 1203a <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12034:	240c      	movs	r4, #12
}
   12036:	4620      	mov	r0, r4
   12038:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1203a:	f7fe fd8b 	bl	10b54 <radio_scan_filter_pol_get>
   1203e:	07c3      	lsls	r3, r0, #31
   12040:	d4f8      	bmi.n	12034 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   12042:	7828      	ldrb	r0, [r5, #0]
   12044:	28ff      	cmp	r0, #255	; 0xff
   12046:	d102      	bne.n	1204e <ll_wl_remove+0x26>
		wl_anon = 0;
   12048:	4b0f      	ldr	r3, [pc, #60]	; (12088 <ll_wl_remove+0x60>)
   1204a:	701c      	strb	r4, [r3, #0]
		return 0;
   1204c:	e7f3      	b.n	12036 <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   1204e:	4622      	mov	r2, r4
   12050:	1c69      	adds	r1, r5, #1
   12052:	f7ff fe33 	bl	11cbc <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   12056:	2807      	cmp	r0, #7
   12058:	d813      	bhi.n	12082 <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   1205a:	4b0c      	ldr	r3, [pc, #48]	; (1208c <ll_wl_remove+0x64>)
   1205c:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   12060:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   12062:	2d07      	cmp	r5, #7
   12064:	d806      	bhi.n	12074 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   12066:	2228      	movs	r2, #40	; 0x28
   12068:	4909      	ldr	r1, [pc, #36]	; (12090 <ll_wl_remove+0x68>)
   1206a:	436a      	muls	r2, r5
   1206c:	5c8d      	ldrb	r5, [r1, r2]
   1206e:	f364 1545 	bfi	r5, r4, #5, #1
   12072:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   12074:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   12078:	f36f 0200 	bfc	r2, #0, #1
   1207c:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   12080:	e7d9      	b.n	12036 <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12082:	2402      	movs	r4, #2
   12084:	e7d7      	b.n	12036 <ll_wl_remove+0xe>
   12086:	bf00      	nop
   12088:	20001920 	.word	0x20001920
   1208c:	2000142f 	.word	0x2000142f
   12090:	200012bc 	.word	0x200012bc

00012094 <ll_filters_scan_update>:
{
   12094:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   12096:	4b0d      	ldr	r3, [pc, #52]	; (120cc <ll_filters_scan_update+0x38>)
   12098:	2200      	movs	r2, #0
   1209a:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1209c:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   1209e:	07c3      	lsls	r3, r0, #31
   120a0:	d504      	bpl.n	120ac <ll_filters_scan_update+0x18>
   120a2:	f7fe fd35 	bl	10b10 <radio_adv_filter_pol_get>
   120a6:	b908      	cbnz	r0, 120ac <ll_filters_scan_update+0x18>
		filter_wl_update();
   120a8:	f7ff fe3a 	bl	11d20 <filter_wl_update>
	filter->enable_bitmask = 0;
   120ac:	4b08      	ldr	r3, [pc, #32]	; (120d0 <ll_filters_scan_update+0x3c>)
   120ae:	2200      	movs	r2, #0
   120b0:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   120b2:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   120b4:	4b07      	ldr	r3, [pc, #28]	; (120d4 <ll_filters_scan_update+0x40>)
   120b6:	781b      	ldrb	r3, [r3, #0]
   120b8:	b133      	cbz	r3, 120c8 <ll_filters_scan_update+0x34>
   120ba:	f7fe fd21 	bl	10b00 <ll_adv_is_enabled>
   120be:	b918      	cbnz	r0, 120c8 <ll_filters_scan_update+0x34>
}
   120c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   120c4:	f7ff be78 	b.w	11db8 <filter_rl_update>
   120c8:	bd08      	pop	{r3, pc}
   120ca:	bf00      	nop
   120cc:	2000146f 	.word	0x2000146f
   120d0:	200013fd 	.word	0x200013fd
   120d4:	200013fc 	.word	0x200013fc

000120d8 <ll_rl_find>:
{
   120d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   120dc:	468a      	mov	sl, r1
	if (free) {
   120de:	4614      	mov	r4, r2
   120e0:	b10a      	cbz	r2, 120e6 <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   120e2:	23ff      	movs	r3, #255	; 0xff
   120e4:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   120e6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1213c <ll_rl_find+0x64>
{
   120ea:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   120ec:	f000 0901 	and.w	r9, r0, #1
   120f0:	2628      	movs	r6, #40	; 0x28
   120f2:	436e      	muls	r6, r5
   120f4:	b2ef      	uxtb	r7, r5
   120f6:	f818 3006 	ldrb.w	r3, [r8, r6]
   120fa:	07da      	lsls	r2, r3, #31
   120fc:	d51a      	bpl.n	12134 <ll_rl_find+0x5c>
   120fe:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12102:	454b      	cmp	r3, r9
   12104:	d10f      	bne.n	12126 <ll_rl_find+0x4e>
   12106:	1c70      	adds	r0, r6, #1
   12108:	2206      	movs	r2, #6
   1210a:	4651      	mov	r1, sl
   1210c:	4440      	add	r0, r8
   1210e:	f7ef fd60 	bl	1bd2 <memcmp>
   12112:	b160      	cbz	r0, 1212e <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   12114:	b13c      	cbz	r4, 12126 <ll_rl_find+0x4e>
   12116:	f818 3006 	ldrb.w	r3, [r8, r6]
   1211a:	07db      	lsls	r3, r3, #31
   1211c:	d403      	bmi.n	12126 <ll_rl_find+0x4e>
   1211e:	7823      	ldrb	r3, [r4, #0]
   12120:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   12122:	bf08      	it	eq
   12124:	7027      	strbeq	r7, [r4, #0]
   12126:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12128:	2d08      	cmp	r5, #8
   1212a:	d1e1      	bne.n	120f0 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   1212c:	27ff      	movs	r7, #255	; 0xff
}
   1212e:	4638      	mov	r0, r7
   12130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   12134:	2c00      	cmp	r4, #0
   12136:	d1f2      	bne.n	1211e <ll_rl_find+0x46>
   12138:	e7f5      	b.n	12126 <ll_rl_find+0x4e>
   1213a:	bf00      	nop
   1213c:	200012bc 	.word	0x200012bc

00012140 <ll_wl_add>:
{
   12140:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12144:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12146:	f7fe fce3 	bl	10b10 <radio_adv_filter_pol_get>
   1214a:	4605      	mov	r5, r0
   1214c:	b120      	cbz	r0, 12158 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1214e:	250c      	movs	r5, #12
}
   12150:	4628      	mov	r0, r5
   12152:	b002      	add	sp, #8
   12154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12158:	f7fe fcfc 	bl	10b54 <radio_scan_filter_pol_get>
   1215c:	07c3      	lsls	r3, r0, #31
   1215e:	d4f6      	bmi.n	1214e <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   12160:	7838      	ldrb	r0, [r7, #0]
   12162:	28ff      	cmp	r0, #255	; 0xff
   12164:	d103      	bne.n	1216e <ll_wl_add+0x2e>
		wl_anon = 1;
   12166:	4b1f      	ldr	r3, [pc, #124]	; (121e4 <ll_wl_add+0xa4>)
   12168:	2201      	movs	r2, #1
   1216a:	701a      	strb	r2, [r3, #0]
		return 0;
   1216c:	e7f0      	b.n	12150 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1216e:	f107 0801 	add.w	r8, r7, #1
   12172:	f10d 0207 	add.w	r2, sp, #7
   12176:	4641      	mov	r1, r8
   12178:	f7ff fda0 	bl	11cbc <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1217c:	2807      	cmp	r0, #7
   1217e:	d92d      	bls.n	121dc <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   12180:	f89d 6007 	ldrb.w	r6, [sp, #7]
   12184:	2e07      	cmp	r6, #7
   12186:	d82b      	bhi.n	121e0 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   12188:	4c17      	ldr	r4, [pc, #92]	; (121e8 <ll_wl_add+0xa8>)
   1218a:	783a      	ldrb	r2, [r7, #0]
   1218c:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   12190:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   12194:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   12198:	4641      	mov	r1, r8
   1219a:	2206      	movs	r2, #6
   1219c:	3002      	adds	r0, #2
   1219e:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   121a2:	f7ef fd2b 	bl	1bfc <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   121a6:	462a      	mov	r2, r5
   121a8:	4641      	mov	r1, r8
   121aa:	7838      	ldrb	r0, [r7, #0]
   121ac:	f7ff ff94 	bl	120d8 <ll_rl_find>
   121b0:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   121b2:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   121b4:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   121b6:	d80e      	bhi.n	121d6 <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   121b8:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   121ba:	2328      	movs	r3, #40	; 0x28
   121bc:	4a0b      	ldr	r2, [pc, #44]	; (121ec <ll_wl_add+0xac>)
   121be:	4358      	muls	r0, r3
   121c0:	5c13      	ldrb	r3, [r2, r0]
   121c2:	f043 0320 	orr.w	r3, r3, #32
   121c6:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   121c8:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   121cc:	f043 0301 	orr.w	r3, r3, #1
   121d0:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   121d4:	e7bc      	b.n	12150 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   121d6:	22ff      	movs	r2, #255	; 0xff
   121d8:	705a      	strb	r2, [r3, #1]
   121da:	e7f5      	b.n	121c8 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   121dc:	2512      	movs	r5, #18
   121de:	e7b7      	b.n	12150 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   121e0:	2507      	movs	r5, #7
	return wl_add(addr);
   121e2:	e7b5      	b.n	12150 <ll_wl_add+0x10>
   121e4:	20001920 	.word	0x20001920
   121e8:	2000142f 	.word	0x2000142f
   121ec:	200012bc 	.word	0x200012bc

000121f0 <ctrl_rl_idx_allowed>:
{
   121f0:	b507      	push	{r0, r1, r2, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   121f2:	4b12      	ldr	r3, [pc, #72]	; (1223c <ctrl_rl_idx_allowed+0x4c>)
   121f4:	781b      	ldrb	r3, [r3, #0]
   121f6:	b1f3      	cbz	r3, 12236 <ctrl_rl_idx_allowed+0x46>
   121f8:	2907      	cmp	r1, #7
   121fa:	d81c      	bhi.n	12236 <ctrl_rl_idx_allowed+0x46>
   121fc:	b9d8      	cbnz	r0, 12236 <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   121fe:	2328      	movs	r3, #40	; 0x28
   12200:	4359      	muls	r1, r3
   12202:	4b0f      	ldr	r3, [pc, #60]	; (12240 <ctrl_rl_idx_allowed+0x50>)
   12204:	5c58      	ldrb	r0, [r3, r1]
   12206:	07c2      	lsls	r2, r0, #31
   12208:	d40e      	bmi.n	12228 <ctrl_rl_idx_allowed+0x38>
   1220a:	4b0e      	ldr	r3, [pc, #56]	; (12244 <ctrl_rl_idx_allowed+0x54>)
   1220c:	9301      	str	r3, [sp, #4]
   1220e:	9300      	str	r3, [sp, #0]
   12210:	4a0d      	ldr	r2, [pc, #52]	; (12248 <ctrl_rl_idx_allowed+0x58>)
   12212:	4b0e      	ldr	r3, [pc, #56]	; (1224c <ctrl_rl_idx_allowed+0x5c>)
   12214:	490e      	ldr	r1, [pc, #56]	; (12250 <ctrl_rl_idx_allowed+0x60>)
   12216:	480f      	ldr	r0, [pc, #60]	; (12254 <ctrl_rl_idx_allowed+0x64>)
   12218:	f7ee feb8 	bl	f8c <printk>
   1221c:	4040      	eors	r0, r0
   1221e:	f380 8811 	msr	BASEPRI, r0
   12222:	f04f 0004 	mov.w	r0, #4
   12226:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   12228:	0743      	lsls	r3, r0, #29
   1222a:	d504      	bpl.n	12236 <ctrl_rl_idx_allowed+0x46>
   1222c:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   12230:	b003      	add	sp, #12
   12232:	f85d fb04 	ldr.w	pc, [sp], #4
		return true;
   12236:	2001      	movs	r0, #1
   12238:	e7fa      	b.n	12230 <ctrl_rl_idx_allowed+0x40>
   1223a:	bf00      	nop
   1223c:	200013fc 	.word	0x200013fc
   12240:	200012bc 	.word	0x200012bc
   12244:	000153a9 	.word	0x000153a9
   12248:	00016765 	.word	0x00016765
   1224c:	000191e5 	.word	0x000191e5
   12250:	000167b4 	.word	0x000167b4
   12254:	0001922e 	.word	0x0001922e

00012258 <ll_rl_id_addr_get>:
{
   12258:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1225a:	2b07      	cmp	r3, #7
{
   1225c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1225e:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   12260:	d90e      	bls.n	12280 <ll_rl_id_addr_get+0x28>
   12262:	4b15      	ldr	r3, [pc, #84]	; (122b8 <ll_rl_id_addr_get+0x60>)
   12264:	9301      	str	r3, [sp, #4]
   12266:	9300      	str	r3, [sp, #0]
   12268:	4a14      	ldr	r2, [pc, #80]	; (122bc <ll_rl_id_addr_get+0x64>)
   1226a:	4b15      	ldr	r3, [pc, #84]	; (122c0 <ll_rl_id_addr_get+0x68>)
   1226c:	4915      	ldr	r1, [pc, #84]	; (122c4 <ll_rl_id_addr_get+0x6c>)
   1226e:	4816      	ldr	r0, [pc, #88]	; (122c8 <ll_rl_id_addr_get+0x70>)
	LL_ASSERT(rl[rl_idx].taken);
   12270:	f7ee fe8c 	bl	f8c <printk>
   12274:	4040      	eors	r0, r0
   12276:	f380 8811 	msr	BASEPRI, r0
   1227a:	f04f 0004 	mov.w	r0, #4
   1227e:	df02      	svc	2
   12280:	2528      	movs	r5, #40	; 0x28
   12282:	4c12      	ldr	r4, [pc, #72]	; (122cc <ll_rl_id_addr_get+0x74>)
   12284:	fb05 f203 	mul.w	r2, r5, r3
   12288:	5ca2      	ldrb	r2, [r4, r2]
   1228a:	f012 0f01 	tst.w	r2, #1
   1228e:	d107      	bne.n	122a0 <ll_rl_id_addr_get+0x48>
   12290:	4b09      	ldr	r3, [pc, #36]	; (122b8 <ll_rl_id_addr_get+0x60>)
   12292:	9301      	str	r3, [sp, #4]
   12294:	9300      	str	r3, [sp, #0]
   12296:	4a09      	ldr	r2, [pc, #36]	; (122bc <ll_rl_id_addr_get+0x64>)
   12298:	4b09      	ldr	r3, [pc, #36]	; (122c0 <ll_rl_id_addr_get+0x68>)
   1229a:	490a      	ldr	r1, [pc, #40]	; (122c4 <ll_rl_id_addr_get+0x6c>)
   1229c:	480c      	ldr	r0, [pc, #48]	; (122d0 <ll_rl_id_addr_get+0x78>)
   1229e:	e7e7      	b.n	12270 <ll_rl_id_addr_get+0x18>
	*id_addr_type = rl[rl_idx].id_addr_type;
   122a0:	f3c2 1280 	ubfx	r2, r2, #6, #1
   122a4:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   122a6:	fb05 4103 	mla	r1, r5, r3, r4
   122aa:	2206      	movs	r2, #6
   122ac:	3101      	adds	r1, #1
}
   122ae:	b003      	add	sp, #12
   122b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   122b4:	f7ef bca2 	b.w	1bfc <memcpy>
   122b8:	000153a9 	.word	0x000153a9
   122bc:	00016765 	.word	0x00016765
   122c0:	000191f9 	.word	0x000191f9
   122c4:	000167b4 	.word	0x000167b4
   122c8:	000194c3 	.word	0x000194c3
   122cc:	200012bc 	.word	0x200012bc
   122d0:	0001922e 	.word	0x0001922e

000122d4 <ctrl_rl_addr_allowed>:
{
   122d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   122d8:	4b1a      	ldr	r3, [pc, #104]	; (12344 <ctrl_rl_addr_allowed+0x70>)
   122da:	781b      	ldrb	r3, [r3, #0]
   122dc:	b37b      	cbz	r3, 1233e <ctrl_rl_addr_allowed+0x6a>
   122de:	7813      	ldrb	r3, [r2, #0]
   122e0:	2bff      	cmp	r3, #255	; 0xff
   122e2:	d12c      	bne.n	1233e <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   122e4:	4e18      	ldr	r6, [pc, #96]	; (12348 <ctrl_rl_addr_allowed+0x74>)
   122e6:	2400      	movs	r4, #0
   122e8:	f04f 0828 	mov.w	r8, #40	; 0x28
   122ec:	46b6      	mov	lr, r6
   122ee:	fb08 f304 	mul.w	r3, r8, r4
   122f2:	fa5f fc84 	uxtb.w	ip, r4
   122f6:	5cf7      	ldrb	r7, [r6, r3]
   122f8:	f017 0f01 	tst.w	r7, #1
   122fc:	eb06 0503 	add.w	r5, r6, r3
   12300:	d01a      	beq.n	12338 <ctrl_rl_addr_allowed+0x64>
   12302:	f3c7 1780 	ubfx	r7, r7, #6, #1
   12306:	4287      	cmp	r7, r0
   12308:	d116      	bne.n	12338 <ctrl_rl_addr_allowed+0x64>
   1230a:	3306      	adds	r3, #6
   1230c:	1e4f      	subs	r7, r1, #1
   1230e:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   12310:	f815 af01 	ldrb.w	sl, [r5, #1]!
   12314:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   12318:	45ca      	cmp	sl, r9
   1231a:	d10d      	bne.n	12338 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   1231c:	429d      	cmp	r5, r3
   1231e:	d1f7      	bne.n	12310 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   12320:	2328      	movs	r3, #40	; 0x28
   12322:	435c      	muls	r4, r3
				*rl_idx = i;
   12324:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   12328:	f81e 0004 	ldrb.w	r0, [lr, r4]
   1232c:	0743      	lsls	r3, r0, #29
   1232e:	d506      	bpl.n	1233e <ctrl_rl_addr_allowed+0x6a>
   12330:	f3c0 1000 	ubfx	r0, r0, #4, #1
   12334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12338:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1233a:	2c08      	cmp	r4, #8
   1233c:	d1d7      	bne.n	122ee <ctrl_rl_addr_allowed+0x1a>
   1233e:	2001      	movs	r0, #1
}
   12340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12344:	200013fc 	.word	0x200013fc
   12348:	200012bc 	.word	0x200012bc

0001234c <ctrl_rl_addr_resolve>:
{
   1234c:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1234e:	4c0d      	ldr	r4, [pc, #52]	; (12384 <ctrl_rl_addr_resolve+0x38>)
   12350:	7824      	ldrb	r4, [r4, #0]
   12352:	b1a4      	cbz	r4, 1237e <ctrl_rl_addr_resolve+0x32>
   12354:	2a07      	cmp	r2, #7
   12356:	d812      	bhi.n	1237e <ctrl_rl_addr_resolve+0x32>
   12358:	2528      	movs	r5, #40	; 0x28
   1235a:	4c0b      	ldr	r4, [pc, #44]	; (12388 <ctrl_rl_addr_resolve+0x3c>)
   1235c:	fb05 f602 	mul.w	r6, r5, r2
   12360:	5da6      	ldrb	r6, [r4, r6]
   12362:	0736      	lsls	r6, r6, #28
   12364:	d50b      	bpl.n	1237e <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   12366:	b150      	cbz	r0, 1237e <ctrl_rl_addr_resolve+0x32>
   12368:	794b      	ldrb	r3, [r1, #5]
   1236a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1236e:	2b40      	cmp	r3, #64	; 0x40
   12370:	d105      	bne.n	1237e <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   12372:	fb05 4202 	mla	r2, r5, r2, r4
   12376:	1dd0      	adds	r0, r2, #7
}
   12378:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1237a:	f7ef bd54 	b.w	1e26 <bt_rpa_irk_matches>
}
   1237e:	2000      	movs	r0, #0
   12380:	bc70      	pop	{r4, r5, r6}
   12382:	4770      	bx	lr
   12384:	200013fc 	.word	0x200013fc
   12388:	200012bc 	.word	0x200012bc

0001238c <ctrl_rl_enabled>:
	return rl_enable;
   1238c:	4b02      	ldr	r3, [pc, #8]	; (12398 <ctrl_rl_enabled+0xc>)
   1238e:	7818      	ldrb	r0, [r3, #0]
}
   12390:	3000      	adds	r0, #0
   12392:	bf18      	it	ne
   12394:	2001      	movne	r0, #1
   12396:	4770      	bx	lr
   12398:	200013fc 	.word	0x200013fc

0001239c <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   1239c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123a0:	b08d      	sub	sp, #52	; 0x34
   123a2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   123a4:	f002 faa6 	bl	148f4 <_impl_k_uptime_get>
   123a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   123ac:	2c00      	cmp	r4, #0
   123ae:	d158      	bne.n	12462 <ll_rl_rpa_update+0xc6>
   123b0:	4b45      	ldr	r3, [pc, #276]	; (124c8 <ll_rl_rpa_update+0x12c>)
   123b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   123b6:	1c5c      	adds	r4, r3, #1
   123b8:	bf08      	it	eq
   123ba:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   123be:	d050      	beq.n	12462 <ll_rl_rpa_update+0xc6>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   123c0:	1a80      	subs	r0, r0, r2
   123c2:	eb61 0103 	sbc.w	r1, r1, r3
   123c6:	460b      	mov	r3, r1
   123c8:	4940      	ldr	r1, [pc, #256]	; (124cc <ll_rl_rpa_update+0x130>)
   123ca:	4602      	mov	r2, r0
   123cc:	6808      	ldr	r0, [r1, #0]
   123ce:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   123d0:	4282      	cmp	r2, r0
   123d2:	418b      	sbcs	r3, r1
   123d4:	bfac      	ite	ge
   123d6:	2701      	movge	r7, #1
   123d8:	2700      	movlt	r7, #0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   123da:	f002 fa1f 	bl	1481c <_impl_k_current_get>
	BT_DBG("");
   123de:	4e3c      	ldr	r6, [pc, #240]	; (124d0 <ll_rl_rpa_update+0x134>)
   123e0:	9001      	str	r0, [sp, #4]
   123e2:	9602      	str	r6, [sp, #8]
   123e4:	9600      	str	r6, [sp, #0]
   123e6:	4b3b      	ldr	r3, [pc, #236]	; (124d4 <ll_rl_rpa_update+0x138>)
   123e8:	4a3b      	ldr	r2, [pc, #236]	; (124d8 <ll_rl_rpa_update+0x13c>)
   123ea:	493c      	ldr	r1, [pc, #240]	; (124dc <ll_rl_rpa_update+0x140>)
   123ec:	483c      	ldr	r0, [pc, #240]	; (124e0 <ll_rl_rpa_update+0x144>)
   123ee:	4d3d      	ldr	r5, [pc, #244]	; (124e4 <ll_rl_rpa_update+0x148>)
   123f0:	f8df b100 	ldr.w	fp, [pc, #256]	; 124f4 <ll_rl_rpa_update+0x158>
   123f4:	f7ee fdca 	bl	f8c <printk>

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   123f8:	f1a5 0a07 	sub.w	sl, r5, #7
	BT_DBG("");
   123fc:	2400      	movs	r4, #0
   123fe:	46d0      	mov	r8, sl
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   12400:	2328      	movs	r3, #40	; 0x28
   12402:	4363      	muls	r3, r4
   12404:	f81a 3003 	ldrb.w	r3, [sl, r3]
   12408:	07d8      	lsls	r0, r3, #31
   1240a:	d54f      	bpl.n	124ac <ll_rl_rpa_update+0x110>
   1240c:	b90f      	cbnz	r7, 12412 <ll_rl_rpa_update+0x76>
   1240e:	0799      	lsls	r1, r3, #30
   12410:	d44c      	bmi.n	124ac <ll_rl_rpa_update+0x110>

			if (rl[i].pirk) {
   12412:	2328      	movs	r3, #40	; 0x28
   12414:	4363      	muls	r3, r4
   12416:	f818 3003 	ldrb.w	r3, [r8, r3]
   1241a:	075a      	lsls	r2, r3, #29
   1241c:	d523      	bpl.n	12466 <ll_rl_rpa_update+0xca>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   1241e:	7c2a      	ldrb	r2, [r5, #16]
   12420:	4b31      	ldr	r3, [pc, #196]	; (124e8 <ll_rl_rpa_update+0x14c>)
   12422:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   12426:	f103 0210 	add.w	r2, r3, #16
   1242a:	f10d 011f 	add.w	r1, sp, #31
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   1242e:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   12432:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   12436:	429a      	cmp	r2, r3
   12438:	d1f9      	bne.n	1242e <ll_rl_rpa_update+0x92>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1243a:	f105 0117 	add.w	r1, r5, #23
   1243e:	a808      	add	r0, sp, #32
   12440:	f7ef fd04 	bl	1e4c <bt_rpa_create>
				LL_ASSERT(!err);
   12444:	b178      	cbz	r0, 12466 <ll_rl_rpa_update+0xca>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   12446:	9601      	str	r6, [sp, #4]
   12448:	9600      	str	r6, [sp, #0]
   1244a:	4b22      	ldr	r3, [pc, #136]	; (124d4 <ll_rl_rpa_update+0x138>)
   1244c:	4a27      	ldr	r2, [pc, #156]	; (124ec <ll_rl_rpa_update+0x150>)
   1244e:	4923      	ldr	r1, [pc, #140]	; (124dc <ll_rl_rpa_update+0x140>)
   12450:	4827      	ldr	r0, [pc, #156]	; (124f0 <ll_rl_rpa_update+0x154>)
   12452:	f7ee fd9b 	bl	f8c <printk>
   12456:	4040      	eors	r0, r0
   12458:	f380 8811 	msr	BASEPRI, r0
   1245c:	f04f 0004 	mov.w	r0, #4
   12460:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   12462:	2701      	movs	r7, #1
   12464:	e7b9      	b.n	123da <ll_rl_rpa_update+0x3e>
			if (rl[i].lirk) {
   12466:	2328      	movs	r3, #40	; 0x28
   12468:	4363      	muls	r3, r4
   1246a:	f818 3003 	ldrb.w	r3, [r8, r3]
   1246e:	071b      	lsls	r3, r3, #28
   12470:	d514      	bpl.n	1249c <ll_rl_rpa_update+0x100>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   12472:	f10d 0920 	add.w	r9, sp, #32
   12476:	4649      	mov	r1, r9
   12478:	4628      	mov	r0, r5
   1247a:	f7ef fce7 	bl	1e4c <bt_rpa_create>
				LL_ASSERT(!err);
   1247e:	2800      	cmp	r0, #0
   12480:	d1e1      	bne.n	12446 <ll_rl_rpa_update+0xaa>
   12482:	2206      	movs	r2, #6
   12484:	fb02 b304 	mla	r3, r2, r4, fp
   12488:	4618      	mov	r0, r3
   1248a:	4649      	mov	r1, r9
   1248c:	9307      	str	r3, [sp, #28]
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   1248e:	f8c5 901d 	str.w	r9, [r5, #29]
   12492:	f7ef fbb3 	bl	1bfc <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   12496:	9b07      	ldr	r3, [sp, #28]
   12498:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   1249c:	2328      	movs	r3, #40	; 0x28
   1249e:	4363      	muls	r3, r4
   124a0:	f818 2003 	ldrb.w	r2, [r8, r3]
   124a4:	f042 0202 	orr.w	r2, r2, #2
   124a8:	f808 2003 	strb.w	r2, [r8, r3]
   124ac:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   124ae:	2c08      	cmp	r4, #8
   124b0:	f105 0528 	add.w	r5, r5, #40	; 0x28
   124b4:	d1a4      	bne.n	12400 <ll_rl_rpa_update+0x64>
		}
	}

	if (all) {
   124b6:	b127      	cbz	r7, 124c2 <ll_rl_rpa_update+0x126>
		rpa_last_ms = now;
   124b8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   124bc:	4b02      	ldr	r3, [pc, #8]	; (124c8 <ll_rl_rpa_update+0x12c>)
   124be:	e9c3 1200 	strd	r1, r2, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   124c2:	b00d      	add	sp, #52	; 0x34
   124c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124c8:	20001918 	.word	0x20001918
   124cc:	2000194c 	.word	0x2000194c
   124d0:	000153a9 	.word	0x000153a9
   124d4:	0001920b 	.word	0x0001920b
   124d8:	000167ad 	.word	0x000167ad
   124dc:	000167b4 	.word	0x000167b4
   124e0:	00016d26 	.word	0x00016d26
   124e4:	200012c3 	.word	0x200012c3
   124e8:	2000123b 	.word	0x2000123b
   124ec:	00016765 	.word	0x00016765
   124f0:	00019159 	.word	0x00019159
   124f4:	20001202 	.word	0x20001202

000124f8 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   124f8:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   124fa:	2001      	movs	r0, #1
   124fc:	f7ff ff4e 	bl	1239c <ll_rl_rpa_update>
   12500:	4b03      	ldr	r3, [pc, #12]	; (12510 <rpa_timeout+0x18>)
   12502:	4904      	ldr	r1, [pc, #16]	; (12514 <rpa_timeout+0x1c>)
   12504:	681a      	ldr	r2, [r3, #0]
   12506:	4804      	ldr	r0, [pc, #16]	; (12518 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   12508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1250c:	f002 bcf0 	b.w	14ef0 <k_delayed_work_submit_to_queue>
   12510:	2000194c 	.word	0x2000194c
   12514:	20001924 	.word	0x20001924
   12518:	20001990 	.word	0x20001990

0001251c <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   1251c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1251e:	4b11      	ldr	r3, [pc, #68]	; (12564 <ll_adv_scan_state_cb+0x48>)
	if (!rl_enable) {
   12520:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   12522:	b1a8      	cbz	r0, 12550 <ll_adv_scan_state_cb+0x34>
	if (!rl_enable) {
   12524:	b1db      	cbz	r3, 1255e <ll_adv_scan_state_cb+0x42>
   12526:	f002 f979 	bl	1481c <_impl_k_current_get>
	BT_DBG("");
   1252a:	4b0f      	ldr	r3, [pc, #60]	; (12568 <ll_adv_scan_state_cb+0x4c>)
   1252c:	9302      	str	r3, [sp, #8]
   1252e:	9001      	str	r0, [sp, #4]
   12530:	9300      	str	r3, [sp, #0]
   12532:	4a0e      	ldr	r2, [pc, #56]	; (1256c <ll_adv_scan_state_cb+0x50>)
   12534:	4b0e      	ldr	r3, [pc, #56]	; (12570 <ll_adv_scan_state_cb+0x54>)
   12536:	490f      	ldr	r1, [pc, #60]	; (12574 <ll_adv_scan_state_cb+0x58>)
   12538:	480f      	ldr	r0, [pc, #60]	; (12578 <ll_adv_scan_state_cb+0x5c>)
   1253a:	f7ee fd27 	bl	f8c <printk>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   1253e:	4b0f      	ldr	r3, [pc, #60]	; (1257c <ll_adv_scan_state_cb+0x60>)
   12540:	490f      	ldr	r1, [pc, #60]	; (12580 <ll_adv_scan_state_cb+0x64>)
   12542:	681a      	ldr	r2, [r3, #0]
   12544:	480f      	ldr	r0, [pc, #60]	; (12584 <ll_adv_scan_state_cb+0x68>)
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
	}
}
   12546:	b005      	add	sp, #20
   12548:	f85d eb04 	ldr.w	lr, [sp], #4
   1254c:	f002 bcd0 	b.w	14ef0 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   12550:	b12b      	cbz	r3, 1255e <ll_adv_scan_state_cb+0x42>
	k_delayed_work_cancel(&rpa_work);
   12552:	480b      	ldr	r0, [pc, #44]	; (12580 <ll_adv_scan_state_cb+0x64>)
}
   12554:	b005      	add	sp, #20
   12556:	f85d eb04 	ldr.w	lr, [sp], #4
	k_delayed_work_cancel(&rpa_work);
   1255a:	f002 bc65 	b.w	14e28 <k_delayed_work_cancel>
}
   1255e:	b005      	add	sp, #20
   12560:	f85d fb04 	ldr.w	pc, [sp], #4
   12564:	200013fc 	.word	0x200013fc
   12568:	000153a9 	.word	0x000153a9
   1256c:	000167ad 	.word	0x000167ad
   12570:	0001921c 	.word	0x0001921c
   12574:	000167b4 	.word	0x000167b4
   12578:	00016d26 	.word	0x00016d26
   1257c:	2000194c 	.word	0x2000194c
   12580:	20001924 	.word	0x20001924
   12584:	20001990 	.word	0x20001990

00012588 <ll_rl_size_get>:

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   12588:	2008      	movs	r0, #8
   1258a:	4770      	bx	lr

0001258c <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   1258c:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   1258e:	f7ff fc07 	bl	11da0 <rl_access_check.constprop.1>
   12592:	b178      	cbz	r0, 125b4 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   12594:	4908      	ldr	r1, [pc, #32]	; (125b8 <ll_rl_clear+0x2c>)
   12596:	2300      	movs	r3, #0
   12598:	2428      	movs	r4, #40	; 0x28
   1259a:	fb04 f203 	mul.w	r2, r4, r3
   1259e:	3301      	adds	r3, #1
   125a0:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   125a2:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   125a4:	f36f 0000 	bfc	r0, #0, #1
   125a8:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   125aa:	d1f6      	bne.n	1259a <ll_rl_clear+0xe>
	peer_irk_count = 0;
   125ac:	4b03      	ldr	r3, [pc, #12]	; (125bc <ll_rl_clear+0x30>)
   125ae:	2000      	movs	r0, #0
   125b0:	7018      	strb	r0, [r3, #0]
   125b2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   125b4:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   125b6:	bd10      	pop	{r4, pc}
   125b8:	200012bc 	.word	0x200012bc
   125bc:	20001232 	.word	0x20001232

000125c0 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   125c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125c4:	b085      	sub	sp, #20
   125c6:	4607      	mov	r7, r0
   125c8:	4689      	mov	r9, r1
   125ca:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   125cc:	f7ff fbe8 	bl	11da0 <rl_access_check.constprop.1>
   125d0:	2800      	cmp	r0, #0
   125d2:	f000 8086 	beq.w	126e2 <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   125d6:	f107 0801 	add.w	r8, r7, #1
   125da:	f10d 020f 	add.w	r2, sp, #15
   125de:	4641      	mov	r1, r8
   125e0:	7838      	ldrb	r0, [r7, #0]
   125e2:	f7ff fd79 	bl	120d8 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   125e6:	2807      	cmp	r0, #7
   125e8:	d97d      	bls.n	126e6 <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   125ea:	f89d 500f 	ldrb.w	r5, [sp, #15]
   125ee:	2d07      	cmp	r5, #7
   125f0:	d87b      	bhi.n	126ea <ll_rl_add+0x12a>
   125f2:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   125f6:	4c3e      	ldr	r4, [pc, #248]	; (126f0 <ll_rl_add+0x130>)
   125f8:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   125fc:	2628      	movs	r6, #40	; 0x28
   125fe:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   12600:	f10b 0001 	add.w	r0, fp, #1
   12604:	2206      	movs	r2, #6
   12606:	4641      	mov	r1, r8
   12608:	4420      	add	r0, r4
   1260a:	f7ef faf7 	bl	1bfc <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1260e:	7839      	ldrb	r1, [r7, #0]
   12610:	5da3      	ldrb	r3, [r4, r6]
   12612:	19a2      	adds	r2, r4, r6
   12614:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12618:	4648      	mov	r0, r9
   1261a:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   1261c:	9201      	str	r2, [sp, #4]
   1261e:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12620:	f7f5 f8c1 	bl	77a6 <mem_nz>
   12624:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12626:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12628:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1262c:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1262e:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12630:	f7f5 f8b9 	bl	77a6 <mem_nz>
   12634:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   12636:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12638:	f000 0001 	and.w	r0, r0, #1
   1263c:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   12640:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12644:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   12646:	d138      	bne.n	126ba <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   12648:	b158      	cbz	r0, 12662 <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   1264a:	f10b 0007 	add.w	r0, fp, #7
   1264e:	2210      	movs	r2, #16
   12650:	4651      	mov	r1, sl
   12652:	4420      	add	r0, r4
   12654:	f7ef fad2 	bl	1bfc <memcpy>
		rl[i].local_rpa = NULL;
   12658:	2328      	movs	r3, #40	; 0x28
   1265a:	fb03 4305 	mla	r3, r3, r5, r4
   1265e:	2200      	movs	r2, #0
   12660:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   12662:	2628      	movs	r6, #40	; 0x28
   12664:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   12666:	f10b 0018 	add.w	r0, fp, #24
   1266a:	2206      	movs	r2, #6
   1266c:	2100      	movs	r1, #0
   1266e:	4420      	add	r0, r4
   12670:	f7ef faf0 	bl	1c54 <memset>
	rl[i].rpas_ready = 0;
   12674:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   12676:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1267a:	f36f 1304 	bfc	r3, #4, #1
   1267e:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   12680:	2200      	movs	r2, #0
   12682:	4641      	mov	r1, r8
   12684:	7838      	ldrb	r0, [r7, #0]
   12686:	f7ff fb19 	bl	11cbc <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1268a:	2807      	cmp	r0, #7
   1268c:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   1268e:	bf9d      	ittte	ls
   12690:	4a18      	ldrls	r2, [pc, #96]	; (126f4 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   12692:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   12696:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   1269a:	f36f 1345 	bfchi	r3, #5, #1
   1269e:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   126a0:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   126a4:	bf98      	it	ls
   126a6:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   126a8:	435d      	muls	r5, r3

	return 0;
   126aa:	2000      	movs	r0, #0
	rl[i].taken = 1;
   126ac:	5d63      	ldrb	r3, [r4, r5]
   126ae:	f043 0301 	orr.w	r3, r3, #1
   126b2:	5563      	strb	r3, [r4, r5]
}
   126b4:	b005      	add	sp, #20
   126b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   126ba:	4b0f      	ldr	r3, [pc, #60]	; (126f8 <ll_rl_add+0x138>)
   126bc:	7819      	ldrb	r1, [r3, #0]
   126be:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   126c0:	4a0e      	ldr	r2, [pc, #56]	; (126fc <ll_rl_add+0x13c>)
   126c2:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   126c4:	1c4a      	adds	r2, r1, #1
   126c6:	701a      	strb	r2, [r3, #0]
   126c8:	4b0d      	ldr	r3, [pc, #52]	; (12700 <ll_rl_add+0x140>)
   126ca:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   126ce:	f109 0210 	add.w	r2, r9, #16
   126d2:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   126d4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   126d8:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   126dc:	454a      	cmp	r2, r9
   126de:	d1f9      	bne.n	126d4 <ll_rl_add+0x114>
   126e0:	e7b2      	b.n	12648 <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   126e2:	200c      	movs	r0, #12
   126e4:	e7e6      	b.n	126b4 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   126e6:	2012      	movs	r0, #18
   126e8:	e7e4      	b.n	126b4 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   126ea:	2007      	movs	r0, #7
   126ec:	e7e2      	b.n	126b4 <ll_rl_add+0xf4>
   126ee:	bf00      	nop
   126f0:	200012bc 	.word	0x200012bc
   126f4:	2000142f 	.word	0x2000142f
   126f8:	20001232 	.word	0x20001232
   126fc:	20001233 	.word	0x20001233
   12700:	2000123b 	.word	0x2000123b

00012704 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   12704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12708:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   1270a:	f7ff fb49 	bl	11da0 <rl_access_check.constprop.1>
   1270e:	2800      	cmp	r0, #0
   12710:	d053      	beq.n	127ba <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12712:	f109 0a01 	add.w	sl, r9, #1
   12716:	2200      	movs	r2, #0
   12718:	4651      	mov	r1, sl
   1271a:	f899 0000 	ldrb.w	r0, [r9]
   1271e:	f7ff fcdb 	bl	120d8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   12722:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12724:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   12726:	d84b      	bhi.n	127c0 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   12728:	f04f 0b28 	mov.w	fp, #40	; 0x28
   1272c:	4c26      	ldr	r4, [pc, #152]	; (127c8 <ll_rl_remove+0xc4>)
   1272e:	fb0b f300 	mul.w	r3, fp, r0
   12732:	18e2      	adds	r2, r4, r3
   12734:	5ce3      	ldrb	r3, [r4, r3]
   12736:	075b      	lsls	r3, r3, #29
   12738:	d524      	bpl.n	12784 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1273a:	4e24      	ldr	r6, [pc, #144]	; (127cc <ll_rl_remove+0xc8>)
   1273c:	7835      	ldrb	r5, [r6, #0]
   1273e:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   12740:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   12744:	d01b      	beq.n	1277e <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   12746:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   12748:	42af      	cmp	r7, r5
   1274a:	d018      	beq.n	1277e <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   1274c:	4820      	ldr	r0, [pc, #128]	; (127d0 <ll_rl_remove+0xcc>)
   1274e:	2210      	movs	r2, #16
   12750:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   12754:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   12758:	f7ef fa50 	bl	1bfc <memcpy>
   1275c:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   1275e:	fb0b f103 	mul.w	r1, fp, r3
   12762:	1862      	adds	r2, r4, r1
   12764:	5c61      	ldrb	r1, [r4, r1]
   12766:	f011 0f01 	tst.w	r1, #1
   1276a:	b2d8      	uxtb	r0, r3
   1276c:	d021      	beq.n	127b2 <ll_rl_remove+0xae>
   1276e:	0749      	lsls	r1, r1, #29
   12770:	d51f      	bpl.n	127b2 <ll_rl_remove+0xae>
   12772:	7dd1      	ldrb	r1, [r2, #23]
   12774:	42a9      	cmp	r1, r5
   12776:	d11c      	bne.n	127b2 <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   12778:	4b16      	ldr	r3, [pc, #88]	; (127d4 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   1277a:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   1277c:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   1277e:	7833      	ldrb	r3, [r6, #0]
   12780:	3b01      	subs	r3, #1
   12782:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   12784:	2200      	movs	r2, #0
   12786:	4651      	mov	r1, sl
   12788:	f899 0000 	ldrb.w	r0, [r9]
   1278c:	f7ff fa96 	bl	11cbc <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   12790:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   12792:	bf9f      	itttt	ls
   12794:	4b10      	ldrls	r3, [pc, #64]	; (127d8 <ll_rl_remove+0xd4>)
   12796:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   1279a:	23ff      	movls	r3, #255	; 0xff
   1279c:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   1279e:	2028      	movs	r0, #40	; 0x28
   127a0:	fb00 f008 	mul.w	r0, r0, r8
   127a4:	5c23      	ldrb	r3, [r4, r0]
   127a6:	f36f 0300 	bfc	r3, #0, #1
   127aa:	5423      	strb	r3, [r4, r0]
		return 0;
   127ac:	2000      	movs	r0, #0
   127ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127b2:	3301      	adds	r3, #1
				for (k = 0;
   127b4:	2b08      	cmp	r3, #8
   127b6:	d1d2      	bne.n	1275e <ll_rl_remove+0x5a>
   127b8:	e7e1      	b.n	1277e <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   127ba:	200c      	movs	r0, #12
   127bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   127c0:	2002      	movs	r0, #2
}
   127c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127c6:	bf00      	nop
   127c8:	200012bc 	.word	0x200012bc
   127cc:	20001232 	.word	0x20001232
   127d0:	2000123b 	.word	0x2000123b
   127d4:	20001233 	.word	0x20001233
   127d8:	2000142f 	.word	0x2000142f

000127dc <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   127dc:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   127de:	795c      	ldrb	r4, [r3, #5]
   127e0:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   127e4:	2c40      	cmp	r4, #64	; 0x40
{
   127e6:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   127e8:	d117      	bne.n	1281a <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   127ea:	b119      	cbz	r1, 127f4 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   127ec:	2200      	movs	r2, #0
   127ee:	f7ff fc73 	bl	120d8 <ll_rl_find>
   127f2:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   127f4:	2a07      	cmp	r2, #7
   127f6:	d810      	bhi.n	1281a <ll_rl_crpa_set+0x3e>
   127f8:	2128      	movs	r1, #40	; 0x28
   127fa:	4c08      	ldr	r4, [pc, #32]	; (1281c <ll_rl_crpa_set+0x40>)
   127fc:	fb01 f302 	mul.w	r3, r1, r2
   12800:	5ce3      	ldrb	r3, [r4, r3]
   12802:	07db      	lsls	r3, r3, #31
   12804:	d509      	bpl.n	1281a <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   12806:	2018      	movs	r0, #24
   12808:	fb11 0002 	smlabb	r0, r1, r2, r0
   1280c:	4420      	add	r0, r4
   1280e:	4629      	mov	r1, r5
   12810:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   12812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   12816:	f7ef b9f1 	b.w	1bfc <memcpy>
   1281a:	bd70      	pop	{r4, r5, r6, pc}
   1281c:	200012bc 	.word	0x200012bc

00012820 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   12820:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12822:	2200      	movs	r2, #0
{
   12824:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12826:	1c41      	adds	r1, r0, #1
   12828:	7800      	ldrb	r0, [r0, #0]
   1282a:	f7ff fc55 	bl	120d8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1282e:	2807      	cmp	r0, #7
   12830:	d901      	bls.n	12836 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12832:	2002      	movs	r0, #2
   12834:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   12836:	2428      	movs	r4, #40	; 0x28
   12838:	2318      	movs	r3, #24
   1283a:	fb14 3000 	smlabb	r0, r4, r0, r3
   1283e:	4c07      	ldr	r4, [pc, #28]	; (1285c <ll_rl_crpa_get+0x3c>)
   12840:	4404      	add	r4, r0
   12842:	2106      	movs	r1, #6
   12844:	4620      	mov	r0, r4
   12846:	f7f4 ffae 	bl	77a6 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1284a:	2800      	cmp	r0, #0
   1284c:	d0f1      	beq.n	12832 <ll_rl_crpa_get+0x12>
   1284e:	2206      	movs	r2, #6
   12850:	4621      	mov	r1, r4
   12852:	4628      	mov	r0, r5
   12854:	f7ef f9d2 	bl	1bfc <memcpy>
			return 0;
   12858:	2000      	movs	r0, #0
}
   1285a:	bd38      	pop	{r3, r4, r5, pc}
   1285c:	200012bc 	.word	0x200012bc

00012860 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   12860:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12862:	2200      	movs	r2, #0
{
   12864:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12866:	1c41      	adds	r1, r0, #1
   12868:	7800      	ldrb	r0, [r0, #0]
   1286a:	f7ff fc35 	bl	120d8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1286e:	2807      	cmp	r0, #7
   12870:	d80a      	bhi.n	12888 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   12872:	4b06      	ldr	r3, [pc, #24]	; (1288c <ll_rl_lrpa_get+0x2c>)
   12874:	2228      	movs	r2, #40	; 0x28
   12876:	fb02 3000 	mla	r0, r2, r0, r3
   1287a:	2206      	movs	r2, #6
   1287c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1287e:	4620      	mov	r0, r4
   12880:	f7ef f9bc 	bl	1bfc <memcpy>
		return 0;
   12884:	2000      	movs	r0, #0
   12886:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12888:	2002      	movs	r0, #2
}
   1288a:	bd10      	pop	{r4, pc}
   1288c:	200012bc 	.word	0x200012bc

00012890 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   12890:	b510      	push	{r4, lr}
   12892:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   12894:	f7ff fa84 	bl	11da0 <rl_access_check.constprop.1>
   12898:	b140      	cbz	r0, 128ac <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   1289a:	b11c      	cbz	r4, 128a4 <ll_rl_enable+0x14>
   1289c:	2c01      	cmp	r4, #1
   1289e:	d001      	beq.n	128a4 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   128a0:	2012      	movs	r0, #18
	}

	return 0;
}
   128a2:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   128a4:	4b02      	ldr	r3, [pc, #8]	; (128b0 <ll_rl_enable+0x20>)
   128a6:	701c      	strb	r4, [r3, #0]
	return 0;
   128a8:	2000      	movs	r0, #0
		break;
   128aa:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   128ac:	200c      	movs	r0, #12
   128ae:	bd10      	pop	{r4, pc}
   128b0:	200013fc 	.word	0x200013fc

000128b4 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   128b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   128b8:	4358      	muls	r0, r3
   128ba:	4b01      	ldr	r3, [pc, #4]	; (128c0 <ll_rl_timeout_set+0xc>)
   128bc:	6018      	str	r0, [r3, #0]
   128be:	4770      	bx	lr
   128c0:	2000194c 	.word	0x2000194c

000128c4 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   128c4:	b538      	push	{r3, r4, r5, lr}
   128c6:	4605      	mov	r5, r0
   128c8:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   128ca:	f7ff fa69 	bl	11da0 <rl_access_check.constprop.1>
   128ce:	b1d8      	cbz	r0, 12908 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   128d0:	2200      	movs	r2, #0
   128d2:	1c69      	adds	r1, r5, #1
   128d4:	7828      	ldrb	r0, [r5, #0]
   128d6:	f7ff fbff 	bl	120d8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   128da:	2807      	cmp	r0, #7
   128dc:	d816      	bhi.n	1290c <ll_priv_mode_set+0x48>
		switch (mode) {
   128de:	b11c      	cbz	r4, 128e8 <ll_priv_mode_set+0x24>
   128e0:	2c01      	cmp	r4, #1
   128e2:	d00a      	beq.n	128fa <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   128e4:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   128e6:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   128e8:	2328      	movs	r3, #40	; 0x28
   128ea:	4a09      	ldr	r2, [pc, #36]	; (12910 <ll_priv_mode_set+0x4c>)
   128ec:	4358      	muls	r0, r3
   128ee:	5c13      	ldrb	r3, [r2, r0]
   128f0:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   128f4:	5413      	strb	r3, [r2, r0]
	return 0;
   128f6:	2000      	movs	r0, #0
			break;
   128f8:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   128fa:	2328      	movs	r3, #40	; 0x28
   128fc:	4a04      	ldr	r2, [pc, #16]	; (12910 <ll_priv_mode_set+0x4c>)
   128fe:	4358      	muls	r0, r3
   12900:	5c13      	ldrb	r3, [r2, r0]
   12902:	f043 0310 	orr.w	r3, r3, #16
   12906:	e7f5      	b.n	128f4 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12908:	200c      	movs	r0, #12
   1290a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1290c:	2002      	movs	r0, #2
   1290e:	bd38      	pop	{r3, r4, r5, pc}
   12910:	200012bc 	.word	0x200012bc

00012914 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   12914:	4a19      	ldr	r2, [pc, #100]	; (1297c <ll_filter_reset+0x68>)
   12916:	2300      	movs	r3, #0
{
   12918:	b430      	push	{r4, r5}
	wl_anon = 0;
   1291a:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   1291c:	4a18      	ldr	r2, [pc, #96]	; (12980 <ll_filter_reset+0x6c>)
   1291e:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   12922:	f36f 0100 	bfc	r1, #0, #1
   12926:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1292a:	3301      	adds	r3, #1
   1292c:	2b08      	cmp	r3, #8
   1292e:	d1f6      	bne.n	1291e <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   12930:	4a14      	ldr	r2, [pc, #80]	; (12984 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12932:	4915      	ldr	r1, [pc, #84]	; (12988 <ll_filter_reset+0x74>)
	rl_enable = 0;
   12934:	2300      	movs	r3, #0
   12936:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12938:	4a14      	ldr	r2, [pc, #80]	; (1298c <ll_filter_reset+0x78>)
   1293a:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   1293c:	4a14      	ldr	r2, [pc, #80]	; (12990 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   1293e:	4915      	ldr	r1, [pc, #84]	; (12994 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   12940:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12944:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12948:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   1294c:	2528      	movs	r5, #40	; 0x28
   1294e:	fb05 f203 	mul.w	r2, r5, r3
   12952:	3301      	adds	r3, #1
   12954:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12956:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   12958:	f36f 0400 	bfc	r4, #0, #1
   1295c:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1295e:	d1f6      	bne.n	1294e <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   12960:	4b0d      	ldr	r3, [pc, #52]	; (12998 <ll_filter_reset+0x84>)
   12962:	2200      	movs	r2, #0
   12964:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   12966:	b120      	cbz	r0, 12972 <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   12968:	490c      	ldr	r1, [pc, #48]	; (1299c <ll_filter_reset+0x88>)
   1296a:	480d      	ldr	r0, [pc, #52]	; (129a0 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   1296c:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1296e:	f002 ba4b 	b.w	14e08 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   12972:	480b      	ldr	r0, [pc, #44]	; (129a0 <ll_filter_reset+0x8c>)
}
   12974:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   12976:	f002 ba57 	b.w	14e28 <k_delayed_work_cancel>
   1297a:	bf00      	nop
   1297c:	20001920 	.word	0x20001920
   12980:	2000142f 	.word	0x2000142f
   12984:	200013fc 	.word	0x200013fc
   12988:	000dbba0 	.word	0x000dbba0
   1298c:	2000194c 	.word	0x2000194c
   12990:	20001918 	.word	0x20001918
   12994:	200012bc 	.word	0x200012bc
   12998:	20001232 	.word	0x20001232
   1299c:	000124f9 	.word	0x000124f9
   129a0:	20001924 	.word	0x20001924

000129a4 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   129a4:	4b05      	ldr	r3, [pc, #20]	; (129bc <cntr_init+0x18>)
   129a6:	2200      	movs	r2, #0
   129a8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   129ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   129b0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   129b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   129b8:	4770      	bx	lr
   129ba:	bf00      	nop
   129bc:	4000b000 	.word	0x4000b000

000129c0 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   129c0:	4a04      	ldr	r2, [pc, #16]	; (129d4 <cntr_start+0x14>)
   129c2:	7813      	ldrb	r3, [r2, #0]
   129c4:	1c59      	adds	r1, r3, #1
   129c6:	7011      	strb	r1, [r2, #0]
   129c8:	2001      	movs	r0, #1
   129ca:	b913      	cbnz	r3, 129d2 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   129cc:	4a02      	ldr	r2, [pc, #8]	; (129d8 <cntr_start+0x18>)
   129ce:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   129d0:	4618      	mov	r0, r3
}
   129d2:	4770      	bx	lr
   129d4:	200014a1 	.word	0x200014a1
   129d8:	4000b000 	.word	0x4000b000

000129dc <cntr_stop>:

u32_t cntr_stop(void)
{
   129dc:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
   129de:	4b0f      	ldr	r3, [pc, #60]	; (12a1c <cntr_stop+0x40>)
   129e0:	7818      	ldrb	r0, [r3, #0]
   129e2:	b970      	cbnz	r0, 12a02 <cntr_stop+0x26>
   129e4:	4b0e      	ldr	r3, [pc, #56]	; (12a20 <cntr_stop+0x44>)
   129e6:	9301      	str	r3, [sp, #4]
   129e8:	9300      	str	r3, [sp, #0]
   129ea:	4a0e      	ldr	r2, [pc, #56]	; (12a24 <cntr_stop+0x48>)
   129ec:	4b0e      	ldr	r3, [pc, #56]	; (12a28 <cntr_stop+0x4c>)
   129ee:	490f      	ldr	r1, [pc, #60]	; (12a2c <cntr_stop+0x50>)
   129f0:	480f      	ldr	r0, [pc, #60]	; (12a30 <cntr_stop+0x54>)
   129f2:	f7ee facb 	bl	f8c <printk>
   129f6:	4040      	eors	r0, r0
   129f8:	f380 8811 	msr	BASEPRI, r0
   129fc:	f04f 0004 	mov.w	r0, #4
   12a00:	df02      	svc	2

	if (--_refcount) {
   12a02:	3801      	subs	r0, #1
   12a04:	b2c0      	uxtb	r0, r0
   12a06:	7018      	strb	r0, [r3, #0]
   12a08:	2301      	movs	r3, #1
   12a0a:	b920      	cbnz	r0, 12a16 <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   12a0c:	4a09      	ldr	r2, [pc, #36]	; (12a34 <cntr_stop+0x58>)
   12a0e:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   12a10:	b003      	add	sp, #12
   12a12:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
   12a16:	4618      	mov	r0, r3
   12a18:	e7fa      	b.n	12a10 <cntr_stop+0x34>
   12a1a:	bf00      	nop
   12a1c:	200014a1 	.word	0x200014a1
   12a20:	000153a9 	.word	0x000153a9
   12a24:	00016765 	.word	0x00016765
   12a28:	000194ef 	.word	0x000194ef
   12a2c:	000167b4 	.word	0x000167b4
   12a30:	000194f9 	.word	0x000194f9
   12a34:	4000b000 	.word	0x4000b000

00012a38 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   12a38:	4b01      	ldr	r3, [pc, #4]	; (12a40 <cntr_cnt_get+0x8>)
   12a3a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   12a3e:	4770      	bx	lr
   12a40:	4000b000 	.word	0x4000b000

00012a44 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   12a44:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   12a48:	4b01      	ldr	r3, [pc, #4]	; (12a50 <cntr_cmp_set+0xc>)
   12a4a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   12a4e:	4770      	bx	lr
   12a50:	4000b000 	.word	0x4000b000

00012a54 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   12a54:	4b11      	ldr	r3, [pc, #68]	; (12a9c <do_ecb+0x48>)
{
   12a56:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   12a58:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   12a5a:	2500      	movs	r5, #0
   12a5c:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   12a5e:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   12a60:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   12a64:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   12a68:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   12a6c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   12a6e:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   12a72:	b934      	cbnz	r4, 12a82 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12a74:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   12a78:	b91c      	cbnz	r4, 12a82 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   12a7a:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12a7e:	2c00      	cmp	r4, #0
   12a80:	d1f5      	bne.n	12a6e <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   12a82:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   12a84:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   12a88:	2c00      	cmp	r4, #0
   12a8a:	d1e8      	bne.n	12a5e <do_ecb+0xa>
   12a8c:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   12a90:	2e00      	cmp	r6, #0
   12a92:	d0e4      	beq.n	12a5e <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   12a94:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   12a98:	bd70      	pop	{r4, r5, r6, pc}
   12a9a:	bf00      	nop
   12a9c:	4000e000 	.word	0x4000e000

00012aa0 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   12aa0:	b570      	push	{r4, r5, r6, lr}
   12aa2:	b08c      	sub	sp, #48	; 0x30
   12aa4:	460e      	mov	r6, r1
   12aa6:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12aa8:	4601      	mov	r1, r0
   12aaa:	2210      	movs	r2, #16
   12aac:	4668      	mov	r0, sp
{
   12aae:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12ab0:	f7f4 fe6a 	bl	7788 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   12ab4:	2210      	movs	r2, #16
   12ab6:	eb0d 0002 	add.w	r0, sp, r2
   12aba:	4631      	mov	r1, r6
   12abc:	f7f4 fe64 	bl	7788 <mem_rcopy>

	do_ecb(&ecb);
   12ac0:	4668      	mov	r0, sp
   12ac2:	f7ff ffc7 	bl	12a54 <do_ecb>

	if (cipher_text_le) {
   12ac6:	b125      	cbz	r5, 12ad2 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   12ac8:	2210      	movs	r2, #16
   12aca:	a908      	add	r1, sp, #32
   12acc:	4628      	mov	r0, r5
   12ace:	f7f4 fe5b 	bl	7788 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   12ad2:	b124      	cbz	r4, 12ade <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   12ad4:	2210      	movs	r2, #16
   12ad6:	a908      	add	r1, sp, #32
   12ad8:	4620      	mov	r0, r4
   12ada:	f7ef f88f 	bl	1bfc <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   12ade:	b00c      	add	sp, #48	; 0x30
   12ae0:	bd70      	pop	{r4, r5, r6, pc}
	...

00012ae4 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   12ae4:	4b07      	ldr	r3, [pc, #28]	; (12b04 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   12ae6:	4a08      	ldr	r2, [pc, #32]	; (12b08 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   12ae8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   12aec:	4907      	ldr	r1, [pc, #28]	; (12b0c <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   12aee:	4a08      	ldr	r2, [pc, #32]	; (12b10 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   12af0:	2800      	cmp	r0, #0
   12af2:	bf14      	ite	ne
   12af4:	4610      	movne	r0, r2
   12af6:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   12af8:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   12afa:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   12afe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12b02:	4770      	bx	lr
   12b04:	4001f000 	.word	0x4001f000
   12b08:	40008140 	.word	0x40008140
   12b0c:	40001004 	.word	0x40001004
   12b10:	40001000 	.word	0x40001000

00012b14 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   12b14:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   12b16:	4e2c      	ldr	r6, [pc, #176]	; (12bc8 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   12b18:	4f2c      	ldr	r7, [pc, #176]	; (12bcc <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   12b1a:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   12b1c:	4b2c      	ldr	r3, [pc, #176]	; (12bd0 <sw_switch.isra.9+0xbc>)
   12b1e:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   12b22:	b22b      	sxth	r3, r5
   12b24:	00dc      	lsls	r4, r3, #3
   12b26:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   12b2a:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   12b2e:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   12b32:	f105 040b 	add.w	r4, r5, #11
   12b36:	b2e4      	uxtb	r4, r4
   12b38:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   12b3a:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   12b3e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   12b42:	3fc0      	subs	r7, #192	; 0xc0
   12b44:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   12b48:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   12b4c:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   12b50:	2800      	cmp	r0, #0
   12b52:	d034      	beq.n	12bbe <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   12b54:	f24a 075a 	movw	r7, #41050	; 0xa05a
   12b58:	f649 4040 	movw	r0, #40000	; 0x9c40
   12b5c:	2a02      	cmp	r2, #2
   12b5e:	bf0c      	ite	eq
   12b60:	4602      	moveq	r2, r0
   12b62:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   12b64:	f242 47b8 	movw	r7, #9400	; 0x24b8
   12b68:	f241 504a 	movw	r0, #5450	; 0x154a
   12b6c:	2902      	cmp	r1, #2
   12b6e:	bf18      	it	ne
   12b70:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   12b72:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   12b76:	4401      	add	r1, r0
   12b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12b7c:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   12b80:	4a14      	ldr	r2, [pc, #80]	; (12bd4 <sw_switch.isra.9+0xc0>)
   12b82:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   12b86:	009b      	lsls	r3, r3, #2
   12b88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12b8c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   12b90:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   12b94:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   12b96:	bf8b      	itete	hi
   12b98:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   12b9c:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   12b9e:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   12ba0:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   12ba4:	bf88      	it	hi
   12ba6:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   12baa:	4b08      	ldr	r3, [pc, #32]	; (12bcc <sw_switch.isra.9+0xb8>)
   12bac:	f44f 6290 	mov.w	r2, #1152	; 0x480
   12bb0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   12bb4:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   12bb6:	f003 0301 	and.w	r3, r3, #1
   12bba:	7033      	strb	r3, [r6, #0]
   12bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   12bbe:	4a06      	ldr	r2, [pc, #24]	; (12bd8 <sw_switch.isra.9+0xc4>)
   12bc0:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   12bc4:	212d      	movs	r1, #45	; 0x2d
   12bc6:	e7de      	b.n	12b86 <sw_switch.isra.9+0x72>
   12bc8:	200016c4 	.word	0x200016c4
   12bcc:	4001f000 	.word	0x4001f000
   12bd0:	4000110c 	.word	0x4000110c
   12bd4:	40001000 	.word	0x40001000
   12bd8:	40001004 	.word	0x40001004

00012bdc <isr_radio>:
	if (sfp_radio_isr) {
   12bdc:	4b02      	ldr	r3, [pc, #8]	; (12be8 <isr_radio+0xc>)
   12bde:	681b      	ldr	r3, [r3, #0]
   12be0:	b103      	cbz	r3, 12be4 <isr_radio+0x8>
		sfp_radio_isr();
   12be2:	4718      	bx	r3
   12be4:	4770      	bx	lr
   12be6:	bf00      	nop
   12be8:	200016c0 	.word	0x200016c0

00012bec <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   12bec:	4b06      	ldr	r3, [pc, #24]	; (12c08 <radio_isr_set+0x1c>)
   12bee:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   12bf0:	4b06      	ldr	r3, [pc, #24]	; (12c0c <radio_isr_set+0x20>)
   12bf2:	2210      	movs	r2, #16
   12bf4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12bf8:	4b05      	ldr	r3, [pc, #20]	; (12c10 <radio_isr_set+0x24>)
   12bfa:	2202      	movs	r2, #2
   12bfc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   12c00:	2001      	movs	r0, #1
   12c02:	f7ee be29 	b.w	1858 <_arch_irq_enable>
   12c06:	bf00      	nop
   12c08:	200016c0 	.word	0x200016c0
   12c0c:	40001000 	.word	0x40001000
   12c10:	e000e100 	.word	0xe000e100

00012c14 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   12c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   12c1c:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   12c1e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   12c22:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   12c26:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   12c2a:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   12c2e:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   12c32:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   12c36:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   12c3a:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   12c3e:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   12c42:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   12c46:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   12c4a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   12c4e:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   12c52:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   12c56:	4770      	bx	lr

00012c58 <radio_reset>:
{
   12c58:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   12c5a:	2001      	movs	r0, #1
   12c5c:	f7ee fe0c 	bl	1878 <_arch_irq_disable>
	NRF_RADIO->POWER =
   12c60:	4b08      	ldr	r3, [pc, #32]	; (12c84 <radio_reset+0x2c>)
   12c62:	2200      	movs	r2, #0
   12c64:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   12c68:	2201      	movs	r2, #1
   12c6a:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   12c6e:	4a06      	ldr	r2, [pc, #24]	; (12c88 <radio_reset+0x30>)
   12c70:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   12c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   12c76:	f023 0301 	bic.w	r3, r3, #1
   12c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   12c7e:	6013      	str	r3, [r2, #0]
   12c80:	bd08      	pop	{r3, pc}
   12c82:	bf00      	nop
   12c84:	40001000 	.word	0x40001000
   12c88:	40001774 	.word	0x40001774

00012c8c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   12c8c:	4b06      	ldr	r3, [pc, #24]	; (12ca8 <radio_phy_set+0x1c>)
	switch (phy) {
   12c8e:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   12c90:	bf0c      	ite	eq
   12c92:	2204      	moveq	r2, #4
   12c94:	2203      	movne	r2, #3
   12c96:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   12c9a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   12c9e:	f042 0201 	orr.w	r2, r2, #1
   12ca2:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   12ca6:	4770      	bx	lr
   12ca8:	40001000 	.word	0x40001000

00012cac <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   12cac:	4b01      	ldr	r3, [pc, #4]	; (12cb4 <radio_tx_power_set+0x8>)
   12cae:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   12cb2:	4770      	bx	lr
   12cb4:	40001000 	.word	0x40001000

00012cb8 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   12cb8:	4b01      	ldr	r3, [pc, #4]	; (12cc0 <radio_freq_chan_set+0x8>)
   12cba:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   12cbe:	4770      	bx	lr
   12cc0:	40001000 	.word	0x40001000

00012cc4 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   12cc4:	4b07      	ldr	r3, [pc, #28]	; (12ce4 <radio_whiten_iv_set+0x20>)
   12cc6:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   12cca:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12cce:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   12cd2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   12cd6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12cda:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   12cde:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   12ce2:	4770      	bx	lr
   12ce4:	40001000 	.word	0x40001000

00012ce8 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   12ce8:	4a0a      	ldr	r2, [pc, #40]	; (12d14 <radio_aa_set+0x2c>)
   12cea:	2300      	movs	r3, #0
   12cec:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   12cf0:	2301      	movs	r3, #1
   12cf2:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   12cf6:	78c3      	ldrb	r3, [r0, #3]
   12cf8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   12cfc:	7843      	ldrb	r3, [r0, #1]
   12cfe:	7881      	ldrb	r1, [r0, #2]
   12d00:	041b      	lsls	r3, r3, #16
   12d02:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   12d06:	7801      	ldrb	r1, [r0, #0]
   12d08:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   12d0c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   12d10:	4770      	bx	lr
   12d12:	bf00      	nop
   12d14:	40001000 	.word	0x40001000

00012d18 <radio_pkt_configure>:
	switch (phy) {
   12d18:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   12d1c:	2b02      	cmp	r3, #2
{
   12d1e:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   12d20:	bf0c      	ite	eq
   12d22:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   12d26:	2400      	movne	r4, #0
	if (dc) {
   12d28:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   12d2a:	f1c0 0308 	rsb	r3, r0, #8
   12d2e:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   12d32:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   12d36:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   12d3a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   12d3e:	4a0b      	ldr	r2, [pc, #44]	; (12d6c <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   12d40:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   12d44:	bf48      	it	mi
   12d46:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   12d4a:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   12d4c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   12d50:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   12d54:	4b06      	ldr	r3, [pc, #24]	; (12d70 <radio_pkt_configure+0x58>)
   12d56:	4003      	ands	r3, r0
   12d58:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   12d5c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   12d60:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   12d64:	4319      	orrs	r1, r3
   12d66:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   12d6a:	bd10      	pop	{r4, pc}
   12d6c:	40001000 	.word	0x40001000
   12d70:	fef80000 	.word	0xfef80000

00012d74 <radio_pkt_rx_set>:
   12d74:	4b01      	ldr	r3, [pc, #4]	; (12d7c <radio_pkt_rx_set+0x8>)
   12d76:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   12d7a:	4770      	bx	lr
   12d7c:	40001000 	.word	0x40001000

00012d80 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   12d80:	4b01      	ldr	r3, [pc, #4]	; (12d88 <radio_pkt_tx_set+0x8>)
   12d82:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   12d86:	4770      	bx	lr
   12d88:	40001000 	.word	0x40001000

00012d8c <radio_tx_ready_delay_get>:
	switch (phy) {
   12d8c:	2802      	cmp	r0, #2
}
   12d8e:	bf0c      	ite	eq
   12d90:	2028      	moveq	r0, #40	; 0x28
   12d92:	2029      	movne	r0, #41	; 0x29
   12d94:	4770      	bx	lr

00012d96 <radio_tx_chain_delay_get>:
}
   12d96:	2001      	movs	r0, #1
   12d98:	4770      	bx	lr

00012d9a <radio_rx_ready_delay_get>:
}
   12d9a:	2029      	movs	r0, #41	; 0x29
   12d9c:	4770      	bx	lr

00012d9e <radio_rx_chain_delay_get>:
	switch (phy) {
   12d9e:	2802      	cmp	r0, #2
}
   12da0:	bf0c      	ite	eq
   12da2:	2006      	moveq	r0, #6
   12da4:	200a      	movne	r0, #10
   12da6:	4770      	bx	lr

00012da8 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   12da8:	4b01      	ldr	r3, [pc, #4]	; (12db0 <radio_rx_enable+0x8>)
   12daa:	2201      	movs	r2, #1
   12dac:	605a      	str	r2, [r3, #4]
   12dae:	4770      	bx	lr
   12db0:	40001000 	.word	0x40001000

00012db4 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   12db4:	4b01      	ldr	r3, [pc, #4]	; (12dbc <radio_tx_enable+0x8>)
   12db6:	2201      	movs	r2, #1
   12db8:	601a      	str	r2, [r3, #0]
   12dba:	4770      	bx	lr
   12dbc:	40001000 	.word	0x40001000

00012dc0 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12dc0:	4a07      	ldr	r2, [pc, #28]	; (12de0 <radio_disable+0x20>)
   12dc2:	f44f 6390 	mov.w	r3, #1152	; 0x480
   12dc6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   12dca:	2301      	movs	r3, #1
   12dcc:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   12dce:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   12dd0:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   12dd4:	2100      	movs	r1, #0
   12dd6:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   12dda:	6113      	str	r3, [r2, #16]
   12ddc:	4770      	bx	lr
   12dde:	bf00      	nop
   12de0:	4001f000 	.word	0x4001f000

00012de4 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   12de4:	4b04      	ldr	r3, [pc, #16]	; (12df8 <radio_status_reset+0x14>)
   12de6:	2200      	movs	r2, #0
   12de8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   12dec:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   12df0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   12df4:	4770      	bx	lr
   12df6:	bf00      	nop
   12df8:	40001000 	.word	0x40001000

00012dfc <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   12dfc:	4b03      	ldr	r3, [pc, #12]	; (12e0c <radio_is_ready+0x10>)
   12dfe:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   12e02:	3000      	adds	r0, #0
   12e04:	bf18      	it	ne
   12e06:	2001      	movne	r0, #1
   12e08:	4770      	bx	lr
   12e0a:	bf00      	nop
   12e0c:	40001000 	.word	0x40001000

00012e10 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   12e10:	4b03      	ldr	r3, [pc, #12]	; (12e20 <radio_is_done+0x10>)
   12e12:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   12e16:	3000      	adds	r0, #0
   12e18:	bf18      	it	ne
   12e1a:	2001      	movne	r0, #1
   12e1c:	4770      	bx	lr
   12e1e:	bf00      	nop
   12e20:	40001000 	.word	0x40001000

00012e24 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   12e24:	4b03      	ldr	r3, [pc, #12]	; (12e34 <radio_is_idle+0x10>)
   12e26:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   12e2a:	fab0 f080 	clz	r0, r0
   12e2e:	0940      	lsrs	r0, r0, #5
   12e30:	4770      	bx	lr
   12e32:	bf00      	nop
   12e34:	40001000 	.word	0x40001000

00012e38 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   12e38:	4b04      	ldr	r3, [pc, #16]	; (12e4c <radio_crc_configure+0x14>)
   12e3a:	f240 1203 	movw	r2, #259	; 0x103
   12e3e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   12e42:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   12e46:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   12e4a:	4770      	bx	lr
   12e4c:	40001000 	.word	0x40001000

00012e50 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   12e50:	4b03      	ldr	r3, [pc, #12]	; (12e60 <radio_crc_is_valid+0x10>)
   12e52:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12e56:	3000      	adds	r0, #0
   12e58:	bf18      	it	ne
   12e5a:	2001      	movne	r0, #1
   12e5c:	4770      	bx	lr
   12e5e:	bf00      	nop
   12e60:	40001000 	.word	0x40001000

00012e64 <radio_pkt_empty_get>:
}
   12e64:	4800      	ldr	r0, [pc, #0]	; (12e68 <radio_pkt_empty_get+0x4>)
   12e66:	4770      	bx	lr
   12e68:	200015b4 	.word	0x200015b4

00012e6c <radio_pkt_scratch_get>:
}
   12e6c:	4800      	ldr	r0, [pc, #0]	; (12e70 <radio_pkt_scratch_get+0x4>)
   12e6e:	4770      	bx	lr
   12e70:	200015b8 	.word	0x200015b8

00012e74 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12e74:	4b04      	ldr	r3, [pc, #16]	; (12e88 <radio_switch_complete_and_rx+0x14>)
   12e76:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   12e78:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12e7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   12e7e:	4602      	mov	r2, r0
   12e80:	4608      	mov	r0, r1
   12e82:	f7ff be47 	b.w	12b14 <sw_switch.isra.9>
   12e86:	bf00      	nop
   12e88:	40001000 	.word	0x40001000

00012e8c <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12e8c:	4b03      	ldr	r3, [pc, #12]	; (12e9c <radio_switch_complete_and_tx+0x10>)
   12e8e:	2103      	movs	r1, #3
   12e90:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   12e94:	4601      	mov	r1, r0
   12e96:	2001      	movs	r0, #1
   12e98:	f7ff be3c 	b.w	12b14 <sw_switch.isra.9>
   12e9c:	40001000 	.word	0x40001000

00012ea0 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   12ea0:	4b05      	ldr	r3, [pc, #20]	; (12eb8 <radio_switch_complete_and_disable+0x18>)
   12ea2:	2203      	movs	r2, #3
   12ea4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12ea8:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   12eac:	f44f 6290 	mov.w	r2, #1152	; 0x480
   12eb0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12eb4:	4770      	bx	lr
   12eb6:	bf00      	nop
   12eb8:	40001000 	.word	0x40001000

00012ebc <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   12ebc:	4a03      	ldr	r2, [pc, #12]	; (12ecc <radio_rssi_measure+0x10>)
   12ebe:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   12ec2:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   12ec6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   12eca:	4770      	bx	lr
   12ecc:	40001000 	.word	0x40001000

00012ed0 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   12ed0:	4b01      	ldr	r3, [pc, #4]	; (12ed8 <radio_rssi_get+0x8>)
   12ed2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   12ed6:	4770      	bx	lr
   12ed8:	40001000 	.word	0x40001000

00012edc <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   12edc:	4b02      	ldr	r3, [pc, #8]	; (12ee8 <radio_rssi_status_reset+0xc>)
   12ede:	2200      	movs	r2, #0
   12ee0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   12ee4:	4770      	bx	lr
   12ee6:	bf00      	nop
   12ee8:	40001000 	.word	0x40001000

00012eec <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   12eec:	4b03      	ldr	r3, [pc, #12]	; (12efc <radio_rssi_is_ready+0x10>)
   12eee:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   12ef2:	3000      	adds	r0, #0
   12ef4:	bf18      	it	ne
   12ef6:	2001      	movne	r0, #1
   12ef8:	4770      	bx	lr
   12efa:	bf00      	nop
   12efc:	40001000 	.word	0x40001000

00012f00 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   12f00:	b530      	push	{r4, r5, lr}
   12f02:	2400      	movs	r4, #0
   12f04:	00a3      	lsls	r3, r4, #2
   12f06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   12f0e:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   12f10:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   12f14:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   12f16:	8895      	ldrh	r5, [r2, #4]
   12f18:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   12f1c:	2c08      	cmp	r4, #8
		bdaddr += 6;
   12f1e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   12f22:	d1ef      	bne.n	12f04 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   12f24:	4b02      	ldr	r3, [pc, #8]	; (12f30 <radio_filter_configure+0x30>)
   12f26:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   12f2a:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   12f2e:	bd30      	pop	{r4, r5, pc}
   12f30:	40001000 	.word	0x40001000

00012f34 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   12f34:	4a03      	ldr	r2, [pc, #12]	; (12f44 <radio_filter_disable+0x10>)
   12f36:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   12f3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12f3e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   12f42:	4770      	bx	lr
   12f44:	40001000 	.word	0x40001000

00012f48 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   12f48:	4b02      	ldr	r3, [pc, #8]	; (12f54 <radio_filter_status_reset+0xc>)
   12f4a:	2200      	movs	r2, #0
   12f4c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   12f50:	4770      	bx	lr
   12f52:	bf00      	nop
   12f54:	40001000 	.word	0x40001000

00012f58 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   12f58:	4b03      	ldr	r3, [pc, #12]	; (12f68 <radio_filter_has_match+0x10>)
   12f5a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   12f5e:	3000      	adds	r0, #0
   12f60:	bf18      	it	ne
   12f62:	2001      	movne	r0, #1
   12f64:	4770      	bx	lr
   12f66:	bf00      	nop
   12f68:	40001000 	.word	0x40001000

00012f6c <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   12f6c:	4b01      	ldr	r3, [pc, #4]	; (12f74 <radio_filter_match_get+0x8>)
   12f6e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   12f72:	4770      	bx	lr
   12f74:	40001000 	.word	0x40001000

00012f78 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   12f78:	4b04      	ldr	r3, [pc, #16]	; (12f8c <radio_bc_configure+0x14>)
   12f7a:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   12f7e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   12f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12f86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   12f8a:	4770      	bx	lr
   12f8c:	40001000 	.word	0x40001000

00012f90 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   12f90:	4b05      	ldr	r3, [pc, #20]	; (12fa8 <radio_tmr_status_reset+0x18>)
   12f92:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   12f96:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   12f9a:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   12f9e:	227f      	movs	r2, #127	; 0x7f
   12fa0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12fa4:	4770      	bx	lr
   12fa6:	bf00      	nop
   12fa8:	4000b000 	.word	0x4000b000

00012fac <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   12fac:	4b03      	ldr	r3, [pc, #12]	; (12fbc <radio_tmr_tifs_set+0x10>)
   12fae:	4a04      	ldr	r2, [pc, #16]	; (12fc0 <radio_tmr_tifs_set+0x14>)
   12fb0:	781b      	ldrb	r3, [r3, #0]
   12fb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   12fb6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   12fba:	4770      	bx	lr
   12fbc:	200016c4 	.word	0x200016c4
   12fc0:	40009000 	.word	0x40009000

00012fc4 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   12fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12fc8:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   12fcc:	4c30      	ldr	r4, [pc, #192]	; (13090 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   12fce:	4d31      	ldr	r5, [pc, #196]	; (13094 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12fd0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   12fd4:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   12fd6:	bf88      	it	hi
   12fd8:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   12fdc:	4b2e      	ldr	r3, [pc, #184]	; (13098 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   12fde:	4c2f      	ldr	r4, [pc, #188]	; (1309c <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   12fe0:	bf82      	ittt	hi
   12fe2:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   12fe6:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   12fea:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   12fee:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   12ff0:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   12ff4:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   12ff6:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   12ff8:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   12ffc:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   12ffe:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   13002:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   13006:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   1300a:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   1300e:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   13012:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   13016:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   1301a:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   1301e:	4920      	ldr	r1, [pc, #128]	; (130a0 <radio_tmr_start+0xdc>)
   13020:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   13024:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   13028:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1302c:	f7ff fd5a 	bl	12ae4 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   13030:	4b1c      	ldr	r3, [pc, #112]	; (130a4 <radio_tmr_start+0xe0>)
   13032:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   13034:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   13038:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1303c:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   13040:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   13042:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   13046:	3b74      	subs	r3, #116	; 0x74
   13048:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   1304c:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   13050:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   13054:	f503 739a 	add.w	r3, r3, #308	; 0x134
   13058:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   1305c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   13060:	33c4      	adds	r3, #196	; 0xc4
   13062:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   13066:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   1306a:	3bc0      	subs	r3, #192	; 0xc0
   1306c:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   13070:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   13074:	33c8      	adds	r3, #200	; 0xc8
   13076:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1307a:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1307e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   13082:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   13086:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   1308a:	4628      	mov	r0, r5
   1308c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13090:	7ff0bdbf 	.word	0x7ff0bdbf
   13094:	000f4240 	.word	0x000f4240
   13098:	40008000 	.word	0x40008000
   1309c:	4000b000 	.word	0x4000b000
   130a0:	4000b148 	.word	0x4000b148
   130a4:	40009000 	.word	0x40009000

000130a8 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   130a8:	4a04      	ldr	r2, [pc, #16]	; (130bc <radio_tmr_stop+0x14>)
   130aa:	2301      	movs	r3, #1
   130ac:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   130ae:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   130b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   130b4:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   130b6:	6113      	str	r3, [r2, #16]
   130b8:	4770      	bx	lr
   130ba:	bf00      	nop
   130bc:	40008000 	.word	0x40008000

000130c0 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   130c0:	4b0c      	ldr	r3, [pc, #48]	; (130f4 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   130c2:	4a0d      	ldr	r2, [pc, #52]	; (130f8 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   130c4:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   130c8:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   130cc:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   130d0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   130d4:	3240      	adds	r2, #64	; 0x40
   130d6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   130da:	f502 7280 	add.w	r2, r2, #256	; 0x100
   130de:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   130e2:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   130e6:	3a34      	subs	r2, #52	; 0x34
   130e8:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   130ec:	2218      	movs	r2, #24
   130ee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   130f2:	4770      	bx	lr
   130f4:	40008000 	.word	0x40008000
   130f8:	40001104 	.word	0x40001104

000130fc <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   130fc:	4b0b      	ldr	r3, [pc, #44]	; (1312c <radio_tmr_aa_capture+0x30>)
   130fe:	4a0c      	ldr	r2, [pc, #48]	; (13130 <radio_tmr_aa_capture+0x34>)
   13100:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   13104:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13108:	3240      	adds	r2, #64	; 0x40
   1310a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1310e:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   13112:	3a3c      	subs	r2, #60	; 0x3c
   13114:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   13118:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1311c:	3240      	adds	r2, #64	; 0x40
   1311e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   13122:	220c      	movs	r2, #12
   13124:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   13128:	4770      	bx	lr
   1312a:	bf00      	nop
   1312c:	4001f000 	.word	0x4001f000
   13130:	40001100 	.word	0x40001100

00013134 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   13134:	4b01      	ldr	r3, [pc, #4]	; (1313c <radio_tmr_aa_get+0x8>)
   13136:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1313a:	4770      	bx	lr
   1313c:	40008000 	.word	0x40008000

00013140 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   13140:	4b01      	ldr	r3, [pc, #4]	; (13148 <radio_tmr_aa_save+0x8>)
   13142:	6018      	str	r0, [r3, #0]
   13144:	4770      	bx	lr
   13146:	bf00      	nop
   13148:	200016bc 	.word	0x200016bc

0001314c <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   1314c:	4b01      	ldr	r3, [pc, #4]	; (13154 <radio_tmr_aa_restore+0x8>)
   1314e:	6818      	ldr	r0, [r3, #0]
   13150:	4770      	bx	lr
   13152:	bf00      	nop
   13154:	200016bc 	.word	0x200016bc

00013158 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   13158:	4b01      	ldr	r3, [pc, #4]	; (13160 <radio_tmr_ready_get+0x8>)
   1315a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1315e:	4770      	bx	lr
   13160:	40008000 	.word	0x40008000

00013164 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   13164:	4b06      	ldr	r3, [pc, #24]	; (13180 <radio_tmr_end_capture+0x1c>)
   13166:	4a07      	ldr	r2, [pc, #28]	; (13184 <radio_tmr_end_capture+0x20>)
   13168:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   1316c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13170:	323c      	adds	r2, #60	; 0x3c
   13172:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   13176:	2220      	movs	r2, #32
   13178:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1317c:	4770      	bx	lr
   1317e:	bf00      	nop
   13180:	4001f000 	.word	0x4001f000
   13184:	4000110c 	.word	0x4000110c

00013188 <radio_tmr_end_get>:
   13188:	4b01      	ldr	r3, [pc, #4]	; (13190 <radio_tmr_end_get+0x8>)
   1318a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1318e:	4770      	bx	lr
   13190:	40008000 	.word	0x40008000

00013194 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   13194:	4b01      	ldr	r3, [pc, #4]	; (1319c <radio_tmr_tifs_base_get+0x8>)
   13196:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   1319a:	4770      	bx	lr
   1319c:	40008000 	.word	0x40008000

000131a0 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   131a0:	4b16      	ldr	r3, [pc, #88]	; (131fc <radio_ccm_rx_pkt_set+0x5c>)
{
   131a2:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   131a4:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   131a6:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   131a8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   131ac:	4e14      	ldr	r6, [pc, #80]	; (13200 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   131ae:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   131b2:	4d14      	ldr	r5, [pc, #80]	; (13204 <radio_ccm_rx_pkt_set+0x64>)
   131b4:	2902      	cmp	r1, #2
   131b6:	bf0c      	ite	eq
   131b8:	4629      	moveq	r1, r5
   131ba:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   131bc:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   131c0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   131c4:	4810      	ldr	r0, [pc, #64]	; (13208 <radio_ccm_rx_pkt_set+0x68>)
   131c6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   131ca:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   131ce:	4a0f      	ldr	r2, [pc, #60]	; (1320c <radio_ccm_rx_pkt_set+0x6c>)
   131d0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   131d4:	490e      	ldr	r1, [pc, #56]	; (13210 <radio_ccm_rx_pkt_set+0x70>)
   131d6:	4a0f      	ldr	r2, [pc, #60]	; (13214 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   131d8:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   131dc:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   131e0:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   131e4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   131e8:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   131ec:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   131f0:	2140      	movs	r1, #64	; 0x40
   131f2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   131f6:	2201      	movs	r2, #1
   131f8:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   131fa:	bd70      	pop	{r4, r5, r6, pc}
   131fc:	4000f000 	.word	0x4000f000
   13200:	01000001 	.word	0x01000001
   13204:	01010001 	.word	0x01010001
   13208:	200015b8 	.word	0x200015b8
   1320c:	200014a8 	.word	0x200014a8
   13210:	40001104 	.word	0x40001104
   13214:	4001f000 	.word	0x4001f000

00013218 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   13218:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1321a:	4b0e      	ldr	r3, [pc, #56]	; (13254 <radio_ccm_tx_pkt_set+0x3c>)
   1321c:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1321e:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13220:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13224:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   13228:	4c0b      	ldr	r4, [pc, #44]	; (13258 <radio_ccm_tx_pkt_set+0x40>)
   1322a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1322e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   13232:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   13236:	4809      	ldr	r0, [pc, #36]	; (1325c <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   13238:	4909      	ldr	r1, [pc, #36]	; (13260 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1323a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1323e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   13242:	2101      	movs	r1, #1
   13244:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   13248:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1324c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   13250:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   13252:	bd10      	pop	{r4, pc}
   13254:	4000f000 	.word	0x4000f000
   13258:	01010000 	.word	0x01010000
   1325c:	200015b8 	.word	0x200015b8
   13260:	200014a8 	.word	0x200014a8

00013264 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   13264:	4b0c      	ldr	r3, [pc, #48]	; (13298 <radio_ccm_is_done+0x34>)
   13266:	2202      	movs	r2, #2
   13268:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1326c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   13270:	b16a      	cbz	r2, 1328e <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   13272:	2202      	movs	r2, #2
   13274:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   13278:	4a08      	ldr	r2, [pc, #32]	; (1329c <radio_ccm_is_done+0x38>)
   1327a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1327e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   13282:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   13286:	fab0 f080 	clz	r0, r0
   1328a:	0940      	lsrs	r0, r0, #5
   1328c:	4770      	bx	lr
		__WFE();
   1328e:	bf20      	wfe
		__SEV();
   13290:	bf40      	sev
		__WFE();
   13292:	bf20      	wfe
   13294:	e7ea      	b.n	1326c <radio_ccm_is_done+0x8>
   13296:	bf00      	nop
   13298:	4000f000 	.word	0x4000f000
   1329c:	e000e100 	.word	0xe000e100

000132a0 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   132a0:	4b03      	ldr	r3, [pc, #12]	; (132b0 <radio_ccm_mic_is_valid+0x10>)
   132a2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   132a6:	3000      	adds	r0, #0
   132a8:	bf18      	it	ne
   132aa:	2001      	movne	r0, #1
   132ac:	4770      	bx	lr
   132ae:	bf00      	nop
   132b0:	4000f000 	.word	0x4000f000

000132b4 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   132b4:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   132b6:	4c13      	ldr	r4, [pc, #76]	; (13304 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   132b8:	4d13      	ldr	r5, [pc, #76]	; (13308 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   132ba:	2303      	movs	r3, #3
   132bc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   132c0:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   132c4:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   132c8:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   132cc:	3b01      	subs	r3, #1
   132ce:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   132d2:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   132d4:	4b0d      	ldr	r3, [pc, #52]	; (1330c <radio_ar_configure+0x58>)
   132d6:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   132da:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   132dc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   132e0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   132e4:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   132e8:	f7ff fe46 	bl	12f78 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   132ec:	4b08      	ldr	r3, [pc, #32]	; (13310 <radio_ar_configure+0x5c>)
   132ee:	4a09      	ldr	r2, [pc, #36]	; (13314 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   132f0:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   132f4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   132f8:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   132fa:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   132fe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   13302:	bd38      	pop	{r3, r4, r5, pc}
   13304:	4000f000 	.word	0x4000f000
   13308:	40001000 	.word	0x40001000
   1330c:	200014a4 	.word	0x200014a4
   13310:	4001f000 	.word	0x4001f000
   13314:	40001128 	.word	0x40001128

00013318 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   13318:	4b01      	ldr	r3, [pc, #4]	; (13320 <radio_ar_match_get+0x8>)
   1331a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1331e:	4770      	bx	lr
   13320:	4000f000 	.word	0x4000f000

00013324 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   13324:	4a04      	ldr	r2, [pc, #16]	; (13338 <radio_ar_status_reset+0x14>)
   13326:	2300      	movs	r3, #0
   13328:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1332c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   13330:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   13334:	4770      	bx	lr
   13336:	bf00      	nop
   13338:	40001000 	.word	0x40001000

0001333c <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1333c:	4b08      	ldr	r3, [pc, #32]	; (13360 <radio_ar_has_match+0x24>)
   1333e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   13342:	b160      	cbz	r0, 1335e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   13344:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   13348:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1334c:	b138      	cbz	r0, 1335e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1334e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   13352:	b120      	cbz	r0, 1335e <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   13354:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   13358:	fab0 f080 	clz	r0, r0
   1335c:	0940      	lsrs	r0, r0, #5
}
   1335e:	4770      	bx	lr
   13360:	40001000 	.word	0x40001000

00013364 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13364:	2901      	cmp	r1, #1
{
   13366:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13368:	d00e      	beq.n	13388 <mayfly_enable_cb+0x24>
   1336a:	4b0d      	ldr	r3, [pc, #52]	; (133a0 <mayfly_enable_cb+0x3c>)
   1336c:	9301      	str	r3, [sp, #4]
   1336e:	9300      	str	r3, [sp, #0]
   13370:	4a0c      	ldr	r2, [pc, #48]	; (133a4 <mayfly_enable_cb+0x40>)
   13372:	4b0d      	ldr	r3, [pc, #52]	; (133a8 <mayfly_enable_cb+0x44>)
   13374:	490d      	ldr	r1, [pc, #52]	; (133ac <mayfly_enable_cb+0x48>)
   13376:	480e      	ldr	r0, [pc, #56]	; (133b0 <mayfly_enable_cb+0x4c>)
   13378:	f7ed fe08 	bl	f8c <printk>
   1337c:	4040      	eors	r0, r0
   1337e:	f380 8811 	msr	BASEPRI, r0
   13382:	f04f 0004 	mov.w	r0, #4
   13386:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   13388:	2018      	movs	r0, #24
	if (enable) {
   1338a:	b122      	cbz	r2, 13396 <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   1338c:	b003      	add	sp, #12
   1338e:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(SWI4_IRQn);
   13392:	f7ee ba61 	b.w	1858 <_arch_irq_enable>
}
   13396:	b003      	add	sp, #12
   13398:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_disable(SWI4_IRQn);
   1339c:	f7ee ba6c 	b.w	1878 <_arch_irq_disable>
   133a0:	000153a9 	.word	0x000153a9
   133a4:	00016765 	.word	0x00016765
   133a8:	00019524 	.word	0x00019524
   133ac:	000167b4 	.word	0x000167b4
   133b0:	00019553 	.word	0x00019553

000133b4 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   133b4:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	switch (callee_id) {
   133b6:	b181      	cbz	r1, 133da <mayfly_is_enabled+0x26>
   133b8:	2901      	cmp	r1, #1
   133ba:	d014      	beq.n	133e6 <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   133bc:	4b0b      	ldr	r3, [pc, #44]	; (133ec <mayfly_is_enabled+0x38>)
   133be:	9301      	str	r3, [sp, #4]
   133c0:	9300      	str	r3, [sp, #0]
   133c2:	4a0b      	ldr	r2, [pc, #44]	; (133f0 <mayfly_is_enabled+0x3c>)
   133c4:	4b0b      	ldr	r3, [pc, #44]	; (133f4 <mayfly_is_enabled+0x40>)
   133c6:	490c      	ldr	r1, [pc, #48]	; (133f8 <mayfly_is_enabled+0x44>)
   133c8:	480c      	ldr	r0, [pc, #48]	; (133fc <mayfly_is_enabled+0x48>)
   133ca:	f7ed fddf 	bl	f8c <printk>
   133ce:	4040      	eors	r0, r0
   133d0:	f380 8811 	msr	BASEPRI, r0
   133d4:	f04f 0004 	mov.w	r0, #4
   133d8:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   133da:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   133dc:	b003      	add	sp, #12
   133de:	f85d eb04 	ldr.w	lr, [sp], #4
		return irq_is_enabled(SWI4_IRQn);
   133e2:	f7ee ba5d 	b.w	18a0 <_arch_irq_is_enabled>
   133e6:	2018      	movs	r0, #24
   133e8:	e7f8      	b.n	133dc <mayfly_is_enabled+0x28>
   133ea:	bf00      	nop
   133ec:	000153a9 	.word	0x000153a9
   133f0:	00016765 	.word	0x00016765
   133f4:	00019535 	.word	0x00019535
   133f8:	000167b4 	.word	0x000167b4
   133fc:	000166d9 	.word	0x000166d9

00013400 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   13400:	4288      	cmp	r0, r1
   13402:	d00a      	beq.n	1341a <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   13404:	b918      	cbnz	r0, 1340e <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   13406:	1e4b      	subs	r3, r1, #1
   13408:	4258      	negs	r0, r3
   1340a:	4158      	adcs	r0, r3
   1340c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1340e:	2801      	cmp	r0, #1
   13410:	d105      	bne.n	1341e <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   13412:	fab1 f081 	clz	r0, r1
   13416:	0940      	lsrs	r0, r0, #5
   13418:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1341a:	2001      	movs	r0, #1
   1341c:	4770      	bx	lr
   1341e:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   13420:	4770      	bx	lr
	...

00013424 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   13424:	b507      	push	{r0, r1, r2, lr}
   13426:	4b0e      	ldr	r3, [pc, #56]	; (13460 <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   13428:	b181      	cbz	r1, 1344c <mayfly_pend+0x28>
   1342a:	2901      	cmp	r1, #1
   1342c:	d015      	beq.n	1345a <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   1342e:	4b0d      	ldr	r3, [pc, #52]	; (13464 <mayfly_pend+0x40>)
   13430:	9301      	str	r3, [sp, #4]
   13432:	9300      	str	r3, [sp, #0]
   13434:	4a0c      	ldr	r2, [pc, #48]	; (13468 <mayfly_pend+0x44>)
   13436:	4b0d      	ldr	r3, [pc, #52]	; (1346c <mayfly_pend+0x48>)
   13438:	490d      	ldr	r1, [pc, #52]	; (13470 <mayfly_pend+0x4c>)
   1343a:	480e      	ldr	r0, [pc, #56]	; (13474 <mayfly_pend+0x50>)
   1343c:	f7ed fda6 	bl	f8c <printk>
   13440:	4040      	eors	r0, r0
   13442:	f380 8811 	msr	BASEPRI, r0
   13446:	f04f 0004 	mov.w	r0, #4
   1344a:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1344c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   13450:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   13454:	b003      	add	sp, #12
   13456:	f85d fb04 	ldr.w	pc, [sp], #4
   1345a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1345e:	e7f7      	b.n	13450 <mayfly_pend+0x2c>
   13460:	e000e100 	.word	0xe000e100
   13464:	000153a9 	.word	0x000153a9
   13468:	00016765 	.word	0x00016765
   1346c:	00019547 	.word	0x00019547
   13470:	000167b4 	.word	0x000167b4
   13474:	000166d9 	.word	0x000166d9

00013478 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13478:	2803      	cmp	r0, #3
{
   1347a:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1347c:	d90e      	bls.n	1349c <hal_ticker_instance0_caller_id_get+0x24>
   1347e:	4b0e      	ldr	r3, [pc, #56]	; (134b8 <hal_ticker_instance0_caller_id_get+0x40>)
   13480:	9301      	str	r3, [sp, #4]
   13482:	9300      	str	r3, [sp, #0]
   13484:	4a0d      	ldr	r2, [pc, #52]	; (134bc <hal_ticker_instance0_caller_id_get+0x44>)
   13486:	4b0e      	ldr	r3, [pc, #56]	; (134c0 <hal_ticker_instance0_caller_id_get+0x48>)
   13488:	490e      	ldr	r1, [pc, #56]	; (134c4 <hal_ticker_instance0_caller_id_get+0x4c>)
   1348a:	480f      	ldr	r0, [pc, #60]	; (134c8 <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1348c:	f7ed fd7e 	bl	f8c <printk>
   13490:	4040      	eors	r0, r0
   13492:	f380 8811 	msr	BASEPRI, r0
   13496:	f04f 0004 	mov.w	r0, #4
   1349a:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1349c:	4b0b      	ldr	r3, [pc, #44]	; (134cc <hal_ticker_instance0_caller_id_get+0x54>)
   1349e:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   134a0:	b938      	cbnz	r0, 134b2 <hal_ticker_instance0_caller_id_get+0x3a>
   134a2:	4b05      	ldr	r3, [pc, #20]	; (134b8 <hal_ticker_instance0_caller_id_get+0x40>)
   134a4:	9301      	str	r3, [sp, #4]
   134a6:	9300      	str	r3, [sp, #0]
   134a8:	4a04      	ldr	r2, [pc, #16]	; (134bc <hal_ticker_instance0_caller_id_get+0x44>)
   134aa:	4b05      	ldr	r3, [pc, #20]	; (134c0 <hal_ticker_instance0_caller_id_get+0x48>)
   134ac:	4905      	ldr	r1, [pc, #20]	; (134c4 <hal_ticker_instance0_caller_id_get+0x4c>)
   134ae:	4808      	ldr	r0, [pc, #32]	; (134d0 <hal_ticker_instance0_caller_id_get+0x58>)
   134b0:	e7ec      	b.n	1348c <hal_ticker_instance0_caller_id_get+0x14>

	return caller_id;
}
   134b2:	b003      	add	sp, #12
   134b4:	f85d fb04 	ldr.w	pc, [sp], #4
   134b8:	000153a9 	.word	0x000153a9
   134bc:	00016765 	.word	0x00016765
   134c0:	00019583 	.word	0x00019583
   134c4:	000167b4 	.word	0x000167b4
   134c8:	000195c5 	.word	0x000195c5
   134cc:	000195c1 	.word	0x000195c1
   134d0:	00019606 	.word	0x00019606

000134d4 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   134d4:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   134d6:	3802      	subs	r0, #2
{
   134d8:	461c      	mov	r4, r3
	switch (caller_id) {
   134da:	2803      	cmp	r0, #3
   134dc:	d818      	bhi.n	13510 <hal_ticker_instance0_sched+0x3c>
   134de:	e8df f000 	tbb	[pc, r0]
   134e2:	0d02      	.short	0x0d02
   134e4:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   134e6:	2903      	cmp	r1, #3
   134e8:	d112      	bne.n	13510 <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   134ea:	4b19      	ldr	r3, [pc, #100]	; (13550 <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   134ec:	2100      	movs	r1, #0
			m.param = instance;
   134ee:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   134f0:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   134f2:	b002      	add	sp, #8
   134f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   134f8:	f7f4 b9d4 	b.w	78a4 <mayfly_enqueue>
		switch (callee_id) {
   134fc:	2904      	cmp	r1, #4
   134fe:	d107      	bne.n	13510 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   13500:	4b14      	ldr	r3, [pc, #80]	; (13554 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   13502:	2101      	movs	r1, #1
			m.param = instance;
   13504:	609c      	str	r4, [r3, #8]
   13506:	e7f3      	b.n	134f0 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   13508:	2903      	cmp	r1, #3
   1350a:	d010      	beq.n	1352e <hal_ticker_instance0_sched+0x5a>
   1350c:	2904      	cmp	r1, #4
   1350e:	d013      	beq.n	13538 <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
   13510:	4b11      	ldr	r3, [pc, #68]	; (13558 <hal_ticker_instance0_sched+0x84>)
   13512:	9301      	str	r3, [sp, #4]
   13514:	9300      	str	r3, [sp, #0]
   13516:	4a11      	ldr	r2, [pc, #68]	; (1355c <hal_ticker_instance0_sched+0x88>)
   13518:	4b11      	ldr	r3, [pc, #68]	; (13560 <hal_ticker_instance0_sched+0x8c>)
   1351a:	4912      	ldr	r1, [pc, #72]	; (13564 <hal_ticker_instance0_sched+0x90>)
   1351c:	4812      	ldr	r0, [pc, #72]	; (13568 <hal_ticker_instance0_sched+0x94>)
   1351e:	f7ed fd35 	bl	f8c <printk>
   13522:	4040      	eors	r0, r0
   13524:	f380 8811 	msr	BASEPRI, r0
   13528:	f04f 0004 	mov.w	r0, #4
   1352c:	df02      	svc	2
			m.param = instance;
   1352e:	4b0f      	ldr	r3, [pc, #60]	; (1356c <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13530:	2100      	movs	r1, #0
			m.param = instance;
   13532:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13534:	2001      	movs	r0, #1
   13536:	e7dc      	b.n	134f2 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   13538:	4b0d      	ldr	r3, [pc, #52]	; (13570 <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1353a:	2101      	movs	r1, #1
			m.param = instance;
   1353c:	609c      	str	r4, [r3, #8]
   1353e:	e7f9      	b.n	13534 <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
   13540:	2904      	cmp	r1, #4
   13542:	d1e5      	bne.n	13510 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   13544:	4b0b      	ldr	r3, [pc, #44]	; (13574 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13546:	2101      	movs	r1, #1
			m.param = instance;
   13548:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1354a:	2003      	movs	r0, #3
   1354c:	e7d1      	b.n	134f2 <hal_ticker_instance0_sched+0x1e>
   1354e:	bf00      	nop
   13550:	20003e20 	.word	0x20003e20
   13554:	20003e30 	.word	0x20003e30
   13558:	000153a9 	.word	0x000153a9
   1355c:	00016765 	.word	0x00016765
   13560:	000195a6 	.word	0x000195a6
   13564:	000167b4 	.word	0x000167b4
   13568:	000166d9 	.word	0x000166d9
   1356c:	20003e40 	.word	0x20003e40
   13570:	20003e50 	.word	0x20003e50
   13574:	20003e60 	.word	0x20003e60

00013578 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   13578:	4601      	mov	r1, r0
   1357a:	2000      	movs	r0, #0
   1357c:	f7ff ba62 	b.w	12a44 <cntr_cmp_set>

00013580 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   13580:	4770      	bx	lr
	...

00013584 <net_buf_pool_get>:
}
   13584:	4b01      	ldr	r3, [pc, #4]	; (1358c <net_buf_pool_get+0x8>)
   13586:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1358a:	4770      	bx	lr
   1358c:	20003f34 	.word	0x20003f34

00013590 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13590:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   13592:	4b04      	ldr	r3, [pc, #16]	; (135a4 <net_buf_id+0x14>)
   13594:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   13598:	69db      	ldr	r3, [r3, #28]
   1359a:	1ac0      	subs	r0, r0, r3
}
   1359c:	4b02      	ldr	r3, [pc, #8]	; (135a8 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   1359e:	10c0      	asrs	r0, r0, #3
}
   135a0:	4358      	muls	r0, r3
   135a2:	4770      	bx	lr
   135a4:	20003f34 	.word	0x20003f34
   135a8:	aaaaaaab 	.word	0xaaaaaaab

000135ac <fixed_data_alloc>:
{
   135ac:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   135ae:	4b09      	ldr	r3, [pc, #36]	; (135d4 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   135b0:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   135b2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   135b6:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   135b8:	699b      	ldr	r3, [r3, #24]
   135ba:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   135bc:	6823      	ldr	r3, [r4, #0]
   135be:	429a      	cmp	r2, r3
   135c0:	bf94      	ite	ls
   135c2:	600a      	strls	r2, [r1, #0]
   135c4:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   135c6:	f7ff ffe3 	bl	13590 <net_buf_id>
   135ca:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   135ce:	fb02 3000 	mla	r0, r2, r0, r3
   135d2:	bd10      	pop	{r4, pc}
   135d4:	20003f34 	.word	0x20003f34

000135d8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   135d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   135dc:	4605      	mov	r5, r0
   135de:	9101      	str	r1, [sp, #4]
   135e0:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   135e2:	f001 f96f 	bl	148c4 <_impl_k_uptime_get_32>
   135e6:	4607      	mov	r7, r0
	__asm__ volatile(
   135e8:	f04f 0320 	mov.w	r3, #32
   135ec:	f3ef 8811 	mrs	r8, BASEPRI
   135f0:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   135f4:	8a6b      	ldrh	r3, [r5, #18]
   135f6:	2b00      	cmp	r3, #0
   135f8:	d03d      	beq.n	13676 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   135fa:	8a2a      	ldrh	r2, [r5, #16]
   135fc:	429a      	cmp	r2, r3
   135fe:	d92a      	bls.n	13656 <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   13600:	2100      	movs	r1, #0
   13602:	4628      	mov	r0, r5
   13604:	f000 fe78 	bl	142f8 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   13608:	b328      	cbz	r0, 13656 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1360a:	f388 8811 	msr	BASEPRI, r8
   1360e:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   13610:	9b01      	ldr	r3, [sp, #4]
   13612:	2b00      	cmp	r3, #0
   13614:	d03c      	beq.n	13690 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   13616:	1c73      	adds	r3, r6, #1
   13618:	2b01      	cmp	r3, #1
   1361a:	d906      	bls.n	1362a <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   1361c:	f001 f952 	bl	148c4 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   13620:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   13622:	42b0      	cmp	r0, r6
   13624:	bf94      	ite	ls
   13626:	1a36      	subls	r6, r6, r0
   13628:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1362a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1362c:	4f1e      	ldr	r7, [pc, #120]	; (136a8 <net_buf_alloc_len+0xd0>)
   1362e:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   13632:	4632      	mov	r2, r6
   13634:	699b      	ldr	r3, [r3, #24]
   13636:	681b      	ldr	r3, [r3, #0]
   13638:	a901      	add	r1, sp, #4
   1363a:	681b      	ldr	r3, [r3, #0]
   1363c:	4620      	mov	r0, r4
   1363e:	4798      	blx	r3
   13640:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   13642:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   13644:	bb28      	cbnz	r0, 13692 <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   13646:	79a0      	ldrb	r0, [r4, #6]
   13648:	4621      	mov	r1, r4
   1364a:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1364e:	f000 fe34 	bl	142ba <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   13652:	462c      	mov	r4, r5
   13654:	e018      	b.n	13688 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   13656:	8a68      	ldrh	r0, [r5, #18]
   13658:	1e43      	subs	r3, r0, #1
   1365a:	826b      	strh	r3, [r5, #18]
   1365c:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   13660:	8a2c      	ldrh	r4, [r5, #16]
   13662:	1a24      	subs	r4, r4, r0
   13664:	69e8      	ldr	r0, [r5, #28]
   13666:	2318      	movs	r3, #24
   13668:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1366c:	4b0e      	ldr	r3, [pc, #56]	; (136a8 <net_buf_alloc_len+0xd0>)
   1366e:	1aed      	subs	r5, r5, r3
   13670:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   13672:	71a5      	strb	r5, [r4, #6]
		goto success;
   13674:	e7cc      	b.n	13610 <net_buf_alloc_len+0x38>
   13676:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   1367a:	4631      	mov	r1, r6
   1367c:	4628      	mov	r0, r5
   1367e:	f000 fe3b 	bl	142f8 <_impl_k_queue_get>
		return NULL;
   13682:	4604      	mov	r4, r0
	if (!buf) {
   13684:	2800      	cmp	r0, #0
   13686:	d1c3      	bne.n	13610 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   13688:	4620      	mov	r0, r4
   1368a:	b002      	add	sp, #8
   1368c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   13690:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   13692:	2301      	movs	r3, #1
   13694:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   13696:	2300      	movs	r3, #0
	buf->frags = NULL;
   13698:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   1369a:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   1369c:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   1369e:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   136a0:	6923      	ldr	r3, [r4, #16]
   136a2:	81e2      	strh	r2, [r4, #14]
   136a4:	60a3      	str	r3, [r4, #8]
	return buf;
   136a6:	e7ef      	b.n	13688 <net_buf_alloc_len+0xb0>
   136a8:	20003f34 	.word	0x20003f34

000136ac <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   136ac:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   136ae:	685b      	ldr	r3, [r3, #4]
   136b0:	460a      	mov	r2, r1
   136b2:	6819      	ldr	r1, [r3, #0]
   136b4:	f7ff bf90 	b.w	135d8 <net_buf_alloc_len>

000136b8 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   136b8:	b570      	push	{r4, r5, r6, lr}
   136ba:	4606      	mov	r6, r0
   136bc:	f000 fe1c 	bl	142f8 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   136c0:	4605      	mov	r5, r0
   136c2:	b128      	cbz	r0, 136d0 <net_buf_get+0x18>
   136c4:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   136c6:	7963      	ldrb	r3, [r4, #5]
   136c8:	f013 0301 	ands.w	r3, r3, #1
   136cc:	d102      	bne.n	136d4 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   136ce:	6023      	str	r3, [r4, #0]

	return buf;
}
   136d0:	4628      	mov	r0, r5
   136d2:	bd70      	pop	{r4, r5, r6, pc}
   136d4:	2100      	movs	r1, #0
   136d6:	4630      	mov	r0, r6
   136d8:	f000 fe0e 	bl	142f8 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   136dc:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   136de:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   136e0:	f023 0301 	bic.w	r3, r3, #1
   136e4:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   136e6:	4604      	mov	r4, r0
   136e8:	e7ed      	b.n	136c6 <net_buf_get+0xe>

000136ea <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   136ea:	6883      	ldr	r3, [r0, #8]
   136ec:	4419      	add	r1, r3
   136ee:	6001      	str	r1, [r0, #0]
   136f0:	4770      	bx	lr

000136f2 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   136f2:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   136f4:	460a      	mov	r2, r1
   136f6:	6814      	ldr	r4, [r2, #0]
   136f8:	b914      	cbnz	r4, 13700 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   136fa:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   136fc:	f000 bde2 	b.w	142c4 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   13700:	7953      	ldrb	r3, [r2, #5]
   13702:	f043 0301 	orr.w	r3, r3, #1
   13706:	7153      	strb	r3, [r2, #5]
   13708:	4622      	mov	r2, r4
   1370a:	e7f4      	b.n	136f6 <net_buf_put+0x4>

0001370c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1370e:	4d15      	ldr	r5, [pc, #84]	; (13764 <net_buf_unref+0x58>)
   13710:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   13712:	2600      	movs	r6, #0
	while (buf) {
   13714:	b904      	cbnz	r4, 13718 <net_buf_unref+0xc>
   13716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   13718:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1371a:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   1371c:	3b01      	subs	r3, #1
   1371e:	b2db      	uxtb	r3, r3
   13720:	7123      	strb	r3, [r4, #4]
   13722:	2b00      	cmp	r3, #0
   13724:	d1f7      	bne.n	13716 <net_buf_unref+0xa>
		if (buf->__buf) {
   13726:	6921      	ldr	r1, [r4, #16]
   13728:	b159      	cbz	r1, 13742 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1372a:	7963      	ldrb	r3, [r4, #5]
   1372c:	079b      	lsls	r3, r3, #30
   1372e:	d407      	bmi.n	13740 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13730:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   13732:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   13736:	4620      	mov	r0, r4
   13738:	699b      	ldr	r3, [r3, #24]
   1373a:	681b      	ldr	r3, [r3, #0]
   1373c:	689b      	ldr	r3, [r3, #8]
   1373e:	4798      	blx	r3
			buf->__buf = NULL;
   13740:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   13742:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   13744:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   13746:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   1374a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1374c:	695b      	ldr	r3, [r3, #20]
   1374e:	b11b      	cbz	r3, 13758 <net_buf_unref+0x4c>
			pool->destroy(buf);
   13750:	4620      	mov	r0, r4
   13752:	4798      	blx	r3
{
   13754:	463c      	mov	r4, r7
   13756:	e7dd      	b.n	13714 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   13758:	4621      	mov	r1, r4
   1375a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   1375e:	f000 fdac 	bl	142ba <k_queue_prepend>
   13762:	e7f7      	b.n	13754 <net_buf_unref+0x48>
   13764:	20003f34 	.word	0x20003f34

00013768 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   13768:	7903      	ldrb	r3, [r0, #4]
   1376a:	3301      	adds	r3, #1
   1376c:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1376e:	4770      	bx	lr

00013770 <net_buf_simple_add>:
	return buf->data + buf->len;
   13770:	8883      	ldrh	r3, [r0, #4]
   13772:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   13774:	4419      	add	r1, r3
   13776:	8081      	strh	r1, [r0, #4]
	return tail;
}
   13778:	18d0      	adds	r0, r2, r3
   1377a:	4770      	bx	lr

0001377c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1377c:	b430      	push	{r4, r5}
   1377e:	8883      	ldrh	r3, [r0, #4]
   13780:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   13782:	189d      	adds	r5, r3, r2
   13784:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   13786:	18e0      	adds	r0, r4, r3
}
   13788:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1378a:	f7ee ba37 	b.w	1bfc <memcpy>

0001378e <net_buf_simple_add_u8>:
   1378e:	8883      	ldrh	r3, [r0, #4]
   13790:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   13792:	b510      	push	{r4, lr}
	buf->len += len;
   13794:	1c5c      	adds	r4, r3, #1
   13796:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   13798:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1379a:	18d0      	adds	r0, r2, r3
   1379c:	bd10      	pop	{r4, pc}

0001379e <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1379e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   137a0:	ab02      	add	r3, sp, #8
   137a2:	8884      	ldrh	r4, [r0, #4]
   137a4:	f823 1d02 	strh.w	r1, [r3, #-2]!
   137a8:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   137aa:	1ca2      	adds	r2, r4, #2
   137ac:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   137ae:	4619      	mov	r1, r3
   137b0:	2202      	movs	r2, #2
   137b2:	1928      	adds	r0, r5, r4
   137b4:	f7ee fa22 	bl	1bfc <memcpy>
}
   137b8:	b003      	add	sp, #12
   137ba:	bd30      	pop	{r4, r5, pc}

000137bc <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   137bc:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   137be:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   137c0:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   137c2:	4411      	add	r1, r2
	buf->data -= len;
   137c4:	6003      	str	r3, [r0, #0]
	buf->len += len;
   137c6:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   137c8:	4618      	mov	r0, r3
   137ca:	4770      	bx	lr

000137cc <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   137cc:	8883      	ldrh	r3, [r0, #4]
   137ce:	1a5b      	subs	r3, r3, r1
   137d0:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   137d2:	6803      	ldr	r3, [r0, #0]
   137d4:	4419      	add	r1, r3
   137d6:	6001      	str	r1, [r0, #0]
}
   137d8:	4608      	mov	r0, r1
   137da:	4770      	bx	lr

000137dc <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   137dc:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   137de:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   137e0:	2101      	movs	r1, #1
	val = buf->data[0];
   137e2:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   137e4:	f7ff fff2 	bl	137cc <net_buf_simple_pull>

	return val;
}
   137e8:	4610      	mov	r0, r2
   137ea:	bd08      	pop	{r3, pc}

000137ec <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   137ec:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   137ee:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   137f0:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   137f2:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   137f4:	f7ff ffea 	bl	137cc <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   137f8:	4610      	mov	r0, r2
   137fa:	bd08      	pop	{r3, pc}

000137fc <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   137fc:	6802      	ldr	r2, [r0, #0]
   137fe:	6880      	ldr	r0, [r0, #8]
}
   13800:	1a10      	subs	r0, r2, r0
   13802:	4770      	bx	lr

00013804 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   13804:	6802      	ldr	r2, [r0, #0]
   13806:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   13808:	88c3      	ldrh	r3, [r0, #6]
   1380a:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   1380c:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1380e:	1a9b      	subs	r3, r3, r2
}
   13810:	1a18      	subs	r0, r3, r0
   13812:	4770      	bx	lr

00013814 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13814:	6800      	ldr	r0, [r0, #0]
   13816:	6880      	ldr	r0, [r0, #8]
   13818:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   1381a:	b941      	cbnz	r1, 1382e <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   1381c:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   13820:	fa21 f202 	lsr.w	r2, r1, r2
   13824:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   13828:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   1382a:	2000      	movs	r0, #0
   1382c:	4770      	bx	lr
		*value = gpio->IN;
   1382e:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   13832:	e7f9      	b.n	13828 <gpio_nrf5_read+0x14>

00013834 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13834:	6800      	ldr	r0, [r0, #0]
   13836:	6880      	ldr	r0, [r0, #8]
   13838:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   1383a:	b949      	cbnz	r1, 13850 <gpio_nrf5_write+0x1c>
   1383c:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   1383e:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   13840:	b11b      	cbz	r3, 1384a <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   13842:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   13846:	2000      	movs	r0, #0
   13848:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   1384a:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   1384e:	e7fa      	b.n	13846 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   13850:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   13854:	e7f7      	b.n	13846 <gpio_nrf5_write+0x12>

00013856 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   13856:	6883      	ldr	r3, [r0, #8]
   13858:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   1385a:	b172      	cbz	r2, 1387a <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   1385c:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   1385e:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   13860:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   13862:	b902      	cbnz	r2, 13866 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   13864:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   13866:	2000      	movs	r0, #0
   13868:	4770      	bx	lr
	parent->next = child;
   1386a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   1386c:	6858      	ldr	r0, [r3, #4]
   1386e:	4281      	cmp	r1, r0
	list->tail = node;
   13870:	bf08      	it	eq
   13872:	605a      	streq	r2, [r3, #4]
   13874:	e00d      	b.n	13892 <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   13876:	4602      	mov	r2, r0
   13878:	6800      	ldr	r0, [r0, #0]
   1387a:	2800      	cmp	r0, #0
   1387c:	d0f3      	beq.n	13866 <gpio_nrf5_manage_callback+0x10>
   1387e:	4281      	cmp	r1, r0
   13880:	d1f9      	bne.n	13876 <gpio_nrf5_manage_callback+0x20>
   13882:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   13884:	2a00      	cmp	r2, #0
   13886:	d1f0      	bne.n	1386a <gpio_nrf5_manage_callback+0x14>
   13888:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1388a:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   1388c:	4291      	cmp	r1, r2
   1388e:	d100      	bne.n	13892 <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   13890:	6058      	str	r0, [r3, #4]
	parent->next = child;
   13892:	2300      	movs	r3, #0
   13894:	600b      	str	r3, [r1, #0]
   13896:	e7e6      	b.n	13866 <gpio_nrf5_manage_callback+0x10>

00013898 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   13898:	4b0c      	ldr	r3, [pc, #48]	; (138cc <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   1389a:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   1389c:	4d0c      	ldr	r5, [pc, #48]	; (138d0 <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   1389e:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   138a0:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   138a2:	fa24 f203 	lsr.w	r2, r4, r3
   138a6:	07d2      	lsls	r2, r2, #31
   138a8:	d508      	bpl.n	138bc <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   138aa:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   138ae:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   138b2:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   138b6:	4282      	cmp	r2, r0
   138b8:	d100      	bne.n	138bc <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   138ba:	b121      	cbz	r1, 138c6 <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   138bc:	3301      	adds	r3, #1
   138be:	2b08      	cmp	r3, #8
   138c0:	d1ef      	bne.n	138a2 <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   138c2:	f06f 0312 	mvn.w	r3, #18
}
   138c6:	4618      	mov	r0, r3
   138c8:	bd30      	pop	{r4, r5, pc}
   138ca:	bf00      	nop
   138cc:	200016fc 	.word	0x200016fc
   138d0:	40006000 	.word	0x40006000

000138d4 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   138d4:	b570      	push	{r4, r5, r6, lr}
   138d6:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   138d8:	460d      	mov	r5, r1
   138da:	b9c9      	cbnz	r1, 13910 <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   138dc:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   138de:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   138e0:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   138e2:	4610      	mov	r0, r2
   138e4:	7919      	ldrb	r1, [r3, #4]
   138e6:	f7ff ffd7 	bl	13898 <gpiote_find_channel.isra.4>
		if (i < 0) {
   138ea:	2800      	cmp	r0, #0
   138ec:	db12      	blt.n	13914 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   138ee:	68b2      	ldr	r2, [r6, #8]
   138f0:	2301      	movs	r3, #1
   138f2:	fa03 f404 	lsl.w	r4, r3, r4
   138f6:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   138f8:	f100 0140 	add.w	r1, r0, #64	; 0x40
   138fc:	4a06      	ldr	r2, [pc, #24]	; (13918 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   138fe:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   13900:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   13904:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   13908:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   1390c:	4628      	mov	r0, r5
   1390e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   13910:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   13914:	bd70      	pop	{r4, r5, r6, pc}
   13916:	bf00      	nop
   13918:	40006000 	.word	0x40006000

0001391c <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   1391c:	b570      	push	{r4, r5, r6, lr}
   1391e:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   13920:	460d      	mov	r5, r1
   13922:	b9b1      	cbnz	r1, 13952 <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   13924:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   13926:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   13928:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   1392a:	4610      	mov	r0, r2
   1392c:	7919      	ldrb	r1, [r3, #4]
   1392e:	f7ff ffb3 	bl	13898 <gpiote_find_channel.isra.4>
		if (i < 0) {
   13932:	2800      	cmp	r0, #0
   13934:	db0f      	blt.n	13956 <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   13936:	68b2      	ldr	r2, [r6, #8]
   13938:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   1393a:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   1393e:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   13942:	4b05      	ldr	r3, [pc, #20]	; (13958 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   13944:	ea22 0404 	bic.w	r4, r2, r4
   13948:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   1394a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   1394e:	4628      	mov	r0, r5
   13950:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   13952:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   13956:	bd70      	pop	{r4, r5, r6, pc}
   13958:	40006000 	.word	0x40006000

0001395c <gpio_nrf5_config>:
{
   1395c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13960:	6806      	ldr	r6, [r0, #0]
{
   13962:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13964:	68b2      	ldr	r2, [r6, #8]
   13966:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   13968:	b119      	cbz	r1, 13972 <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   1396a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1396e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   13972:	f403 7240 	and.w	r2, r3, #768	; 0x300
   13976:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   1397a:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   1397e:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   13982:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   13986:	d058      	beq.n	13a3a <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   13988:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1398c:	bf0c      	ite	eq
   1398e:	2204      	moveq	r2, #4
   13990:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   13992:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   13996:	bf08      	it	eq
   13998:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   1399a:	f013 0f01 	tst.w	r3, #1
   1399e:	ea4f 0180 	mov.w	r1, r0, lsl #2
   139a2:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 13a70 <gpio_nrf5_config+0x114>
   139a6:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   139aa:	d04f      	beq.n	13a4c <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   139ac:	2a0c      	cmp	r2, #12
   139ae:	d146      	bne.n	13a3e <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   139b0:	2701      	movs	r7, #1
   139b2:	40a7      	lsls	r7, r4
   139b4:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   139b8:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   139ba:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   139be:	f041 0103 	orr.w	r1, r1, #3
   139c2:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   139c4:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   139c8:	f013 0002 	ands.w	r0, r3, #2
   139cc:	d049      	beq.n	13a62 <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   139ce:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   139d0:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   139d2:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   139d6:	d5c8      	bpl.n	1396a <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   139d8:	065a      	lsls	r2, r3, #25
   139da:	d43d      	bmi.n	13a58 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   139dc:	f013 0f04 	tst.w	r3, #4
   139e0:	bf14      	ite	ne
   139e2:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   139e6:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   139ea:	4e1f      	ldr	r6, [pc, #124]	; (13a68 <gpio_nrf5_config+0x10c>)
   139ec:	6837      	ldr	r7, [r6, #0]
   139ee:	4638      	mov	r0, r7
   139f0:	f7ec fc28 	bl	244 <__popcountsi2>
   139f4:	2808      	cmp	r0, #8
   139f6:	d032      	beq.n	13a5e <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   139f8:	4641      	mov	r1, r8
   139fa:	4620      	mov	r0, r4
   139fc:	f7ff ff4c 	bl	13898 <gpiote_find_channel.isra.4>
		if (i < 0) {
   13a00:	2800      	cmp	r0, #0
   13a02:	da08      	bge.n	13a16 <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   13a04:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   13a06:	fa93 f0a3 	rbit	r0, r3
   13a0a:	2b00      	cmp	r3, #0
   13a0c:	fab0 f080 	clz	r0, r0
   13a10:	bf08      	it	eq
   13a12:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   13a16:	2301      	movs	r3, #1
   13a18:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   13a1a:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   13a1c:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   13a1e:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   13a22:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   13a24:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   13a28:	4b10      	ldr	r3, [pc, #64]	; (13a6c <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   13a2a:	f044 0401 	orr.w	r4, r4, #1
   13a2e:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   13a30:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   13a34:	2000      	movs	r0, #0
   13a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   13a3a:	220c      	movs	r2, #12
   13a3c:	e7a9      	b.n	13992 <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   13a3e:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   13a40:	bf02      	ittt	eq
   13a42:	2701      	moveq	r7, #1
   13a44:	40a7      	lsleq	r7, r4
   13a46:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   13a4a:	e7b5      	b.n	139b8 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   13a4c:	4461      	add	r1, ip
   13a4e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   13a52:	430a      	orrs	r2, r1
   13a54:	433a      	orrs	r2, r7
   13a56:	e7b5      	b.n	139c4 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   13a58:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   13a5c:	e7c5      	b.n	139ea <gpio_nrf5_config+0x8e>
			return -EIO;
   13a5e:	f06f 0004 	mvn.w	r0, #4
}
   13a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a66:	bf00      	nop
   13a68:	200016fc 	.word	0x200016fc
   13a6c:	40006000 	.word	0x40006000
   13a70:	00019644 	.word	0x00019644

00013a74 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   13a74:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   13a76:	2200      	movs	r2, #0
   13a78:	2105      	movs	r1, #5
   13a7a:	2006      	movs	r0, #6
   13a7c:	f7ed ff1e 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   13a80:	2006      	movs	r0, #6
   13a82:	f7ed fee9 	bl	1858 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   13a86:	2000      	movs	r0, #0
   13a88:	bd08      	pop	{r3, pc}
	...

00013a8c <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13a8c:	2100      	movs	r1, #0
{
   13a8e:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   13a90:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   13a92:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   13a94:	2501      	movs	r5, #1
   13a96:	008b      	lsls	r3, r1, #2
   13a98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13a9c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   13aa0:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   13aa4:	b140      	cbz	r0, 13ab8 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   13aa6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   13aaa:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   13aae:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   13ab2:	fa05 f303 	lsl.w	r3, r5, r3
   13ab6:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13ab8:	3101      	adds	r1, #1
   13aba:	2908      	cmp	r1, #8
   13abc:	d1eb      	bne.n	13a96 <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   13abe:	4e08      	ldr	r6, [pc, #32]	; (13ae0 <gpio_nrf5_port_isr+0x54>)
   13ac0:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   13ac2:	689d      	ldr	r5, [r3, #8]
   13ac4:	681c      	ldr	r4, [r3, #0]
   13ac6:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   13ac8:	b14c      	cbz	r4, 13ade <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   13aca:	68a3      	ldr	r3, [r4, #8]
   13acc:	421d      	tst	r5, r3
   13ace:	d004      	beq.n	13ada <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   13ad0:	6863      	ldr	r3, [r4, #4]
   13ad2:	462a      	mov	r2, r5
   13ad4:	4621      	mov	r1, r4
   13ad6:	4630      	mov	r0, r6
   13ad8:	4798      	blx	r3
	return node->next;
   13ada:	6824      	ldr	r4, [r4, #0]
   13adc:	e7f4      	b.n	13ac8 <gpio_nrf5_port_isr+0x3c>
   13ade:	bd70      	pop	{r4, r5, r6, pc}
   13ae0:	20003edc 	.word	0x20003edc

00013ae4 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13ae4:	4b03      	ldr	r3, [pc, #12]	; (13af4 <uart_nrfx_err_check+0x10>)
   13ae6:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   13ae8:	b118      	cbz	r0, 13af2 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   13aea:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   13aee:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   13af2:	4770      	bx	lr
   13af4:	40002124 	.word	0x40002124

00013af8 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13af8:	4b07      	ldr	r3, [pc, #28]	; (13b18 <uart_nrfx_poll_out+0x20>)
   13afa:	2200      	movs	r2, #0
   13afc:	601a      	str	r2, [r3, #0]
{
   13afe:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13b00:	681a      	ldr	r2, [r3, #0]
   13b02:	9201      	str	r2, [sp, #4]
    (void)dummy;
   13b04:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   13b06:	4a05      	ldr	r2, [pc, #20]	; (13b1c <uart_nrfx_poll_out+0x24>)
   13b08:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13b0c:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   13b0e:	2a00      	cmp	r2, #0
   13b10:	d0fc      	beq.n	13b0c <uart_nrfx_poll_out+0x14>
}
   13b12:	4608      	mov	r0, r1
   13b14:	b002      	add	sp, #8
   13b16:	4770      	bx	lr
   13b18:	4000211c 	.word	0x4000211c
   13b1c:	40002000 	.word	0x40002000

00013b20 <uart_nrfx_poll_in>:
   13b20:	4b08      	ldr	r3, [pc, #32]	; (13b44 <uart_nrfx_poll_in+0x24>)
   13b22:	681a      	ldr	r2, [r3, #0]
{
   13b24:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   13b26:	b152      	cbz	r2, 13b3e <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13b28:	2000      	movs	r0, #0
   13b2a:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13b2c:	681b      	ldr	r3, [r3, #0]
   13b2e:	9301      	str	r3, [sp, #4]
    (void)dummy;
   13b30:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   13b32:	4b05      	ldr	r3, [pc, #20]	; (13b48 <uart_nrfx_poll_in+0x28>)
   13b34:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   13b38:	700b      	strb	r3, [r1, #0]
}
   13b3a:	b002      	add	sp, #8
   13b3c:	4770      	bx	lr
		return -1;
   13b3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13b42:	e7fa      	b.n	13b3a <uart_nrfx_poll_in+0x1a>
   13b44:	40002108 	.word	0x40002108
   13b48:	40002000 	.word	0x40002000

00013b4c <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   13b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   13b4e:	4819      	ldr	r0, [pc, #100]	; (13bb4 <uart_nrfx_init+0x68>)
   13b50:	f000 f98c 	bl	13e6c <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   13b54:	6843      	ldr	r3, [r0, #4]
   13b56:	4604      	mov	r4, r0
   13b58:	681d      	ldr	r5, [r3, #0]
   13b5a:	2206      	movs	r2, #6
   13b5c:	f240 1301 	movw	r3, #257	; 0x101
   13b60:	2100      	movs	r1, #0
   13b62:	47a8      	blx	r5
   13b64:	6863      	ldr	r3, [r4, #4]
   13b66:	681d      	ldr	r5, [r3, #0]
   13b68:	2300      	movs	r3, #0
   13b6a:	4619      	mov	r1, r3
   13b6c:	2208      	movs	r2, #8
   13b6e:	4620      	mov	r0, r4
   13b70:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   13b72:	4b11      	ldr	r3, [pc, #68]	; (13bb8 <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13b74:	4911      	ldr	r1, [pc, #68]	; (13bbc <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   13b76:	2208      	movs	r2, #8
   13b78:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   13b7c:	2206      	movs	r2, #6
   13b7e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   13b82:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   13b84:	4a0e      	ldr	r2, [pc, #56]	; (13bc0 <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   13b86:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   13b8a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   13b8e:	2204      	movs	r2, #4
   13b90:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13b94:	4a0b      	ldr	r2, [pc, #44]	; (13bc4 <uart_nrfx_init+0x78>)
   13b96:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13b98:	6812      	ldr	r2, [r2, #0]
   13b9a:	9201      	str	r2, [sp, #4]
    (void)dummy;
   13b9c:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13b9e:	4a0a      	ldr	r2, [pc, #40]	; (13bc8 <uart_nrfx_init+0x7c>)
   13ba0:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13ba2:	6812      	ldr	r2, [r2, #0]
   13ba4:	9200      	str	r2, [sp, #0]
    (void)dummy;
   13ba6:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13ba8:	2201      	movs	r2, #1
   13baa:	600a      	str	r2, [r1, #0]
   13bac:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   13bae:	b003      	add	sp, #12
   13bb0:	bd30      	pop	{r4, r5, pc}
   13bb2:	bf00      	nop
   13bb4:	000196a8 	.word	0x000196a8
   13bb8:	40002000 	.word	0x40002000
   13bbc:	40002008 	.word	0x40002008
   13bc0:	01d7e000 	.word	0x01d7e000
   13bc4:	4000211c 	.word	0x4000211c
   13bc8:	40002108 	.word	0x40002108

00013bcc <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   13bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   13bd0:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   13bd2:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   13bd4:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   13bd6:	42a3      	cmp	r3, r4
	d = &rand[octets];
   13bd8:	440a      	add	r2, r1
	s = &rng->rand[first];
   13bda:	4406      	add	r6, r0
	if (first <= last) {
   13bdc:	d81f      	bhi.n	13c1e <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   13bde:	1ae4      	subs	r4, r4, r3
   13be0:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   13be2:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   13be4:	bf3e      	ittt	cc
   13be6:	1a64      	subcc	r4, r4, r1
   13be8:	b2e7      	uxtbcc	r7, r4
   13bea:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   13bec:	4423      	add	r3, r4
		octets -= avail;
   13bee:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   13bf2:	bf28      	it	cs
   13bf4:	2700      	movcs	r7, #0
		first += avail;
   13bf6:	b2db      	uxtb	r3, r3
		octets -= avail;
   13bf8:	b2c9      	uxtb	r1, r1
   13bfa:	4434      	add	r4, r6

		while (avail--) {
   13bfc:	42a6      	cmp	r6, r4
   13bfe:	d109      	bne.n	13c14 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   13c00:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   13c02:	7843      	ldrb	r3, [r0, #1]
   13c04:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   13c06:	bf82      	ittt	hi
   13c08:	4b20      	ldrhi	r3, [pc, #128]	; (13c8c <get+0xc0>)
   13c0a:	2201      	movhi	r2, #1
   13c0c:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   13c0e:	4608      	mov	r0, r1
   13c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   13c14:	f816 5b01 	ldrb.w	r5, [r6], #1
   13c18:	f802 5d01 	strb.w	r5, [r2, #-1]!
   13c1c:	e7ee      	b.n	13bfc <get+0x30>
		avail = rng->count - first;
   13c1e:	7805      	ldrb	r5, [r0, #0]
   13c20:	1aed      	subs	r5, r5, r3
   13c22:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   13c24:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   13c26:	bf3f      	itttt	cc
   13c28:	1a67      	subcc	r7, r4, r1
   13c2a:	19ed      	addcc	r5, r5, r7
   13c2c:	b2ef      	uxtbcc	r7, r5
   13c2e:	460d      	movcc	r5, r1
			first += avail;
   13c30:	bf38      	it	cc
   13c32:	185b      	addcc	r3, r3, r1
		octets -= avail;
   13c34:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   13c38:	bf32      	itee	cc
   13c3a:	b2db      	uxtbcc	r3, r3
   13c3c:	4627      	movcs	r7, r4
			first = 0;
   13c3e:	2300      	movcs	r3, #0
		octets -= avail;
   13c40:	b2c9      	uxtb	r1, r1
   13c42:	4696      	mov	lr, r2
   13c44:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   13c48:	4566      	cmp	r6, ip
   13c4a:	d119      	bne.n	13c80 <get+0xb4>
   13c4c:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   13c4e:	2900      	cmp	r1, #0
   13c50:	d0d6      	beq.n	13c00 <get+0x34>
   13c52:	2c00      	cmp	r4, #0
   13c54:	d0d4      	beq.n	13c00 <get+0x34>
			if (octets < last) {
   13c56:	428c      	cmp	r4, r1
   13c58:	bf8a      	itet	hi
   13c5a:	460b      	movhi	r3, r1
   13c5c:	4623      	movls	r3, r4
				remaining = last - octets;
   13c5e:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   13c60:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   13c64:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   13c68:	bf8c      	ite	hi
   13c6a:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   13c6c:	2700      	movls	r7, #0
			octets -= last;
   13c6e:	b2c9      	uxtb	r1, r1
   13c70:	18f4      	adds	r4, r6, r3
			while (last--) {
   13c72:	42a6      	cmp	r6, r4
   13c74:	d0c4      	beq.n	13c00 <get+0x34>
				*(--d) = *s++;
   13c76:	f816 5b01 	ldrb.w	r5, [r6], #1
   13c7a:	f802 5d01 	strb.w	r5, [r2, #-1]!
   13c7e:	e7f8      	b.n	13c72 <get+0xa6>
			*(--d) = *s++;
   13c80:	f816 8b01 	ldrb.w	r8, [r6], #1
   13c84:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   13c88:	e7de      	b.n	13c48 <get+0x7c>
   13c8a:	bf00      	nop
   13c8c:	4000d000 	.word	0x4000d000

00013c90 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   13c90:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   13c92:	b1d0      	cbz	r0, 13cca <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   13c94:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   13c96:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   13c98:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   13c9a:	1c53      	adds	r3, r2, #1
   13c9c:	b2db      	uxtb	r3, r3
		last = 0;
   13c9e:	42ab      	cmp	r3, r5
   13ca0:	bf08      	it	eq
   13ca2:	2300      	moveq	r3, #0
	if (last == rng->first) {
   13ca4:	42a3      	cmp	r3, r4
   13ca6:	d010      	beq.n	13cca <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   13ca8:	b161      	cbz	r1, 13cc4 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   13caa:	490a      	ldr	r1, [pc, #40]	; (13cd4 <isr+0x44>)
   13cac:	4402      	add	r2, r0
   13cae:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   13cb2:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   13cb4:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   13cb6:	3301      	adds	r3, #1
   13cb8:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   13cba:	429d      	cmp	r5, r3
   13cbc:	bf08      	it	eq
   13cbe:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   13cc0:	42a3      	cmp	r3, r4
   13cc2:	d005      	beq.n	13cd0 <isr+0x40>
		return 0;
	}

	return -EBUSY;
   13cc4:	f06f 000f 	mvn.w	r0, #15
   13cc8:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   13cca:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13cce:	bd30      	pop	{r4, r5, pc}
		return 0;
   13cd0:	2000      	movs	r0, #0
}
   13cd2:	bd30      	pop	{r4, r5, pc}
   13cd4:	4000d000 	.word	0x4000d000

00013cd8 <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   13cd8:	07db      	lsls	r3, r3, #31
{
   13cda:	b570      	push	{r4, r5, r6, lr}
   13cdc:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   13cde:	d507      	bpl.n	13cf0 <entropy_nrf5_get_entropy_isr+0x18>
   13ce0:	4613      	mov	r3, r2
   13ce2:	4a0d      	ldr	r2, [pc, #52]	; (13d18 <entropy_nrf5_get_entropy_isr+0x40>)
   13ce4:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   13ce6:	2500      	movs	r5, #0
	while (len) {
   13ce8:	b94b      	cbnz	r3, 13cfe <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   13cea:	6050      	str	r0, [r2, #4]

	return cnt;
   13cec:	4620      	mov	r0, r4
}
   13cee:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   13cf0:	6880      	ldr	r0, [r0, #8]
   13cf2:	460a      	mov	r2, r1
   13cf4:	303c      	adds	r0, #60	; 0x3c
   13cf6:	b2e1      	uxtb	r1, r4
   13cf8:	f7ff ff68 	bl	13bcc <get>
   13cfc:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   13cfe:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   13d02:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   13d04:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   13d08:	2e00      	cmp	r6, #0
   13d0a:	d0fb      	beq.n	13d04 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   13d0c:	3b01      	subs	r3, #1
   13d0e:	b29b      	uxth	r3, r3
   13d10:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   13d14:	54ce      	strb	r6, [r1, r3]
   13d16:	e7e7      	b.n	13ce8 <entropy_nrf5_get_entropy_isr+0x10>
   13d18:	4000d000 	.word	0x4000d000

00013d1c <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   13d1c:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   13d1e:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   13d20:	2201      	movs	r2, #1
   13d22:	4611      	mov	r1, r2
   13d24:	4620      	mov	r0, r4
   13d26:	f000 fd7f 	bl	14828 <_impl_k_sem_init>
   13d2a:	f104 0018 	add.w	r0, r4, #24
   13d2e:	2201      	movs	r2, #1
   13d30:	2100      	movs	r1, #0
   13d32:	f000 fd79 	bl	14828 <_impl_k_sem_init>
	rng->threshold = threshold;
   13d36:	2304      	movs	r3, #4
   13d38:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   13d3c:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   13d3e:	2500      	movs	r5, #0
	rng->threshold = threshold;
   13d40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   13d44:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   13d46:	4b11      	ldr	r3, [pc, #68]	; (13d8c <entropy_nrf5_init+0x70>)
	rng->count = len;
   13d48:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   13d4c:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   13d4e:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   13d52:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   13d56:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   13d5a:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   13d5e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   13d62:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   13d66:	f042 0201 	orr.w	r2, r2, #1
   13d6a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   13d6e:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   13d70:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   13d74:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   13d76:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   13d7a:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   13d7c:	462a      	mov	r2, r5
   13d7e:	f7ed fd9d 	bl	18bc <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   13d82:	4630      	mov	r0, r6
   13d84:	f7ed fd68 	bl	1858 <_arch_irq_enable>

	return 0;
}
   13d88:	4628      	mov	r0, r5
   13d8a:	bd70      	pop	{r4, r5, r6, pc}
   13d8c:	4000d000 	.word	0x4000d000

00013d90 <isr_rand>:
{
   13d90:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   13d92:	4b12      	ldr	r3, [pc, #72]	; (13ddc <isr_rand+0x4c>)
   13d94:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   13d98:	b1fb      	cbz	r3, 13dda <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   13d9a:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   13d9c:	2101      	movs	r1, #1
   13d9e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   13da2:	f7ff ff75 	bl	13c90 <isr>
		if (ret != -EBUSY) {
   13da6:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   13daa:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   13dac:	d00d      	beq.n	13dca <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   13dae:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   13db2:	bf14      	ite	ne
   13db4:	2100      	movne	r1, #0
   13db6:	2101      	moveq	r1, #1
   13db8:	f105 0030 	add.w	r0, r5, #48	; 0x30
   13dbc:	f7ff ff68 	bl	13c90 <isr>
   13dc0:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   13dc2:	f105 0018 	add.w	r0, r5, #24
   13dc6:	f000 fd38 	bl	1483a <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   13dca:	4b04      	ldr	r3, [pc, #16]	; (13ddc <isr_rand+0x4c>)
   13dcc:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   13dce:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   13dd0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   13dd4:	bf1c      	itt	ne
   13dd6:	2201      	movne	r2, #1
   13dd8:	605a      	strne	r2, [r3, #4]
   13dda:	bd38      	pop	{r3, r4, r5, pc}
   13ddc:	4000d000 	.word	0x4000d000

00013de0 <entropy_nrf5_get_entropy>:
{
   13de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   13de4:	6885      	ldr	r5, [r0, #8]
{
   13de6:	460f      	mov	r7, r1
   13de8:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   13dea:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   13dee:	b914      	cbnz	r4, 13df6 <entropy_nrf5_get_entropy+0x16>
}
   13df0:	4620      	mov	r0, r4
   13df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13df6:	2cff      	cmp	r4, #255	; 0xff
   13df8:	4623      	mov	r3, r4
   13dfa:	bf28      	it	cs
   13dfc:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   13dfe:	1ae4      	subs	r4, r4, r3
   13e00:	b2de      	uxtb	r6, r3
   13e02:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   13e04:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   13e08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13e0c:	4628      	mov	r0, r5
   13e0e:	f000 fd3c 	bl	1488a <_impl_k_sem_take>
   13e12:	4631      	mov	r1, r6
   13e14:	463a      	mov	r2, r7
   13e16:	4648      	mov	r0, r9
   13e18:	f7ff fed8 	bl	13bcc <get>
   13e1c:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   13e1e:	4628      	mov	r0, r5
   13e20:	f000 fd0b 	bl	1483a <_impl_k_sem_give>
			if (len8) {
   13e24:	2e00      	cmp	r6, #0
   13e26:	d0e2      	beq.n	13dee <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   13e28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13e2c:	4640      	mov	r0, r8
   13e2e:	f000 fd2c 	bl	1488a <_impl_k_sem_take>
   13e32:	e7e9      	b.n	13e08 <entropy_nrf5_get_entropy+0x28>

00013e34 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   13e34:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   13e36:	4802      	ldr	r0, [pc, #8]	; (13e40 <entropy_nrf_get_entropy_isr+0xc>)
   13e38:	460a      	mov	r2, r1
   13e3a:	4619      	mov	r1, r3
   13e3c:	f7ff bec6 	b.w	13bcc <get>
   13e40:	2000173c 	.word	0x2000173c

00013e44 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   13e44:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   13e46:	4b08      	ldr	r3, [pc, #32]	; (13e68 <_sys_device_do_config_level+0x24>)
   13e48:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   13e4c:	3001      	adds	r0, #1
   13e4e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   13e52:	4620      	mov	r0, r4
   13e54:	42a8      	cmp	r0, r5
   13e56:	f104 040c 	add.w	r4, r4, #12
   13e5a:	d300      	bcc.n	13e5e <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   13e5c:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   13e5e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   13e62:	685b      	ldr	r3, [r3, #4]
   13e64:	4798      	blx	r3
   13e66:	e7f4      	b.n	13e52 <_sys_device_do_config_level+0xe>
   13e68:	000196c4 	.word	0x000196c4

00013e6c <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   13e6c:	4b10      	ldr	r3, [pc, #64]	; (13eb0 <device_get_binding+0x44>)
{
   13e6e:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   13e70:	4c10      	ldr	r4, [pc, #64]	; (13eb4 <device_get_binding+0x48>)
{
   13e72:	4605      	mov	r5, r0
   13e74:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   13e76:	429c      	cmp	r4, r3
   13e78:	d104      	bne.n	13e84 <device_get_binding+0x18>
   13e7a:	4c0e      	ldr	r4, [pc, #56]	; (13eb4 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   13e7c:	42b4      	cmp	r4, r6
   13e7e:	d109      	bne.n	13e94 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   13e80:	2400      	movs	r4, #0
   13e82:	e012      	b.n	13eaa <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   13e84:	6862      	ldr	r2, [r4, #4]
   13e86:	b11a      	cbz	r2, 13e90 <device_get_binding+0x24>
   13e88:	6822      	ldr	r2, [r4, #0]
   13e8a:	6812      	ldr	r2, [r2, #0]
   13e8c:	42aa      	cmp	r2, r5
   13e8e:	d00c      	beq.n	13eaa <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   13e90:	340c      	adds	r4, #12
   13e92:	e7f0      	b.n	13e76 <device_get_binding+0xa>
		if (!info->driver_api) {
   13e94:	6863      	ldr	r3, [r4, #4]
   13e96:	b90b      	cbnz	r3, 13e9c <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   13e98:	340c      	adds	r4, #12
   13e9a:	e7ef      	b.n	13e7c <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   13e9c:	6823      	ldr	r3, [r4, #0]
   13e9e:	4628      	mov	r0, r5
   13ea0:	6819      	ldr	r1, [r3, #0]
   13ea2:	f7ed fe89 	bl	1bb8 <strcmp>
   13ea6:	2800      	cmp	r0, #0
   13ea8:	d1f6      	bne.n	13e98 <device_get_binding+0x2c>
}
   13eaa:	4620      	mov	r0, r4
   13eac:	bd70      	pop	{r4, r5, r6, pc}
   13eae:	bf00      	nop
   13eb0:	20003f0c 	.word	0x20003f0c
   13eb4:	20003e7c 	.word	0x20003e7c

00013eb8 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   13eb8:	1c43      	adds	r3, r0, #1
   13eba:	d003      	beq.n	13ec4 <_sys_power_save_idle_exit+0xc>
   13ebc:	4b03      	ldr	r3, [pc, #12]	; (13ecc <_sys_power_save_idle_exit+0x14>)
   13ebe:	681b      	ldr	r3, [r3, #0]
   13ec0:	4298      	cmp	r0, r3
   13ec2:	db01      	blt.n	13ec8 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   13ec4:	f7ed ba90 	b.w	13e8 <_timer_idle_exit>
   13ec8:	4770      	bx	lr
   13eca:	bf00      	nop
   13ecc:	20003e70 	.word	0x20003e70

00013ed0 <idle>:
	return list->head == list;
   13ed0:	4d0f      	ldr	r5, [pc, #60]	; (13f10 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   13ed2:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   13ed4:	4f0f      	ldr	r7, [pc, #60]	; (13f14 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13ed6:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   13eda:	f04f 0220 	mov.w	r2, #32
   13ede:	f3ef 8311 	mrs	r3, BASEPRI
   13ee2:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   13ee6:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13ee8:	42b3      	cmp	r3, r6
   13eea:	d00a      	beq.n	13f02 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   13eec:	b14b      	cbz	r3, 13f02 <idle+0x32>
   13eee:	691c      	ldr	r4, [r3, #16]
   13ef0:	1c63      	adds	r3, r4, #1
   13ef2:	d008      	beq.n	13f06 <idle+0x36>
   13ef4:	683b      	ldr	r3, [r7, #0]
   13ef6:	42a3      	cmp	r3, r4
   13ef8:	dd05      	ble.n	13f06 <idle+0x36>
	_kernel.idle = ticks;
   13efa:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   13efc:	f7ed fd34 	bl	1968 <k_cpu_idle>
   13f00:	e7eb      	b.n	13eda <idle+0xa>
   13f02:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   13f06:	4620      	mov	r0, r4
   13f08:	f7ed fa50 	bl	13ac <_timer_idle_enter>
   13f0c:	e7f5      	b.n	13efa <idle+0x2a>
   13f0e:	bf00      	nop
   13f10:	20001950 	.word	0x20001950
   13f14:	20003e70 	.word	0x20003e70

00013f18 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   13f18:	4802      	ldr	r0, [pc, #8]	; (13f24 <_bss_zero+0xc>)
   13f1a:	4a03      	ldr	r2, [pc, #12]	; (13f28 <_bss_zero+0x10>)
   13f1c:	2100      	movs	r1, #0
   13f1e:	1a12      	subs	r2, r2, r0
   13f20:	f7ed be98 	b.w	1c54 <memset>
   13f24:	20000000 	.word	0x20000000
   13f28:	20001a10 	.word	0x20001a10

00013f2c <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   13f2c:	4802      	ldr	r0, [pc, #8]	; (13f38 <_data_copy+0xc>)
   13f2e:	4a03      	ldr	r2, [pc, #12]	; (13f3c <_data_copy+0x10>)
   13f30:	4903      	ldr	r1, [pc, #12]	; (13f40 <_data_copy+0x14>)
   13f32:	1a12      	subs	r2, r2, r0
   13f34:	f7ed be62 	b.w	1bfc <memcpy>
   13f38:	20003a28 	.word	0x20003a28
   13f3c:	20003fb4 	.word	0x20003fb4
   13f40:	00019714 	.word	0x00019714

00013f44 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   13f44:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   13f46:	2002      	movs	r0, #2
   13f48:	f7ff ff7c 	bl	13e44 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   13f4c:	4807      	ldr	r0, [pc, #28]	; (13f6c <bg_thread_main+0x28>)
   13f4e:	f7ed f81d 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   13f52:	2003      	movs	r0, #3
   13f54:	f7ff ff76 	bl	13e44 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   13f58:	f000 feaa 	bl	14cb0 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   13f5c:	f7ec fbb0 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   13f60:	4a03      	ldr	r2, [pc, #12]	; (13f70 <bg_thread_main+0x2c>)
   13f62:	7a13      	ldrb	r3, [r2, #8]
   13f64:	f023 0301 	bic.w	r3, r3, #1
   13f68:	7213      	strb	r3, [r2, #8]
   13f6a:	bd08      	pop	{r3, pc}
   13f6c:	000196e0 	.word	0x000196e0
   13f70:	200017c0 	.word	0x200017c0

00013f74 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   13f74:	b580      	push	{r7, lr}
   13f76:	b086      	sub	sp, #24
   13f78:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   13f7a:	f7ed fab9 	bl	14f0 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   13f7e:	4b30      	ldr	r3, [pc, #192]	; (14040 <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   13f80:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13f84:	4b2f      	ldr	r3, [pc, #188]	; (14044 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   13f86:	4d30      	ldr	r5, [pc, #192]	; (14048 <_Cstart+0xd4>)
   13f88:	4e30      	ldr	r6, [pc, #192]	; (1404c <_Cstart+0xd8>)
   13f8a:	2400      	movs	r4, #0
   13f8c:	22e0      	movs	r2, #224	; 0xe0
   13f8e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   13f92:	77dc      	strb	r4, [r3, #31]
   13f94:	761c      	strb	r4, [r3, #24]
   13f96:	765c      	strb	r4, [r3, #25]
   13f98:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   13f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13f9c:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   13fa0:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   13fa2:	f7ed fc51 	bl	1848 <_FaultInit>
	_CpuIdleInit();
   13fa6:	f7ed fcd9 	bl	195c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   13faa:	4620      	mov	r0, r4
   13fac:	f7ff ff4a 	bl	13e44 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   13fb0:	2001      	movs	r0, #1
   13fb2:	f7ff ff47 	bl	13e44 <_sys_device_do_config_level>
	_sched_init();
   13fb6:	f000 fbf9 	bl	147ac <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   13fba:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   13fbc:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   13fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13fc2:	9304      	str	r3, [sp, #16]
   13fc4:	9403      	str	r4, [sp, #12]
   13fc6:	9402      	str	r4, [sp, #8]
   13fc8:	9401      	str	r4, [sp, #4]
   13fca:	9400      	str	r4, [sp, #0]
   13fcc:	4b20      	ldr	r3, [pc, #128]	; (14050 <_Cstart+0xdc>)
   13fce:	4921      	ldr	r1, [pc, #132]	; (14054 <_Cstart+0xe0>)
   13fd0:	4628      	mov	r0, r5
   13fd2:	f000 fe15 	bl	14c00 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13fd6:	7a6b      	ldrb	r3, [r5, #9]
   13fd8:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   13fdc:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13fe0:	726a      	strb	r2, [r5, #9]
   13fe2:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   13fe4:	d102      	bne.n	13fec <_Cstart+0x78>
   13fe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13fe8:	3301      	adds	r3, #1
   13fea:	d024      	beq.n	14036 <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   13fec:	2301      	movs	r3, #1
   13fee:	4e1a      	ldr	r6, [pc, #104]	; (14058 <_Cstart+0xe4>)
   13ff0:	9304      	str	r3, [sp, #16]
   13ff2:	230f      	movs	r3, #15
   13ff4:	9303      	str	r3, [sp, #12]
   13ff6:	2300      	movs	r3, #0
   13ff8:	9302      	str	r3, [sp, #8]
   13ffa:	9301      	str	r3, [sp, #4]
   13ffc:	9300      	str	r3, [sp, #0]
   13ffe:	f44f 72a0 	mov.w	r2, #320	; 0x140
   14002:	4b16      	ldr	r3, [pc, #88]	; (1405c <_Cstart+0xe8>)
   14004:	4916      	ldr	r1, [pc, #88]	; (14060 <_Cstart+0xec>)
   14006:	4630      	mov	r0, r6
   14008:	f000 fdfa 	bl	14c00 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1400c:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   1400e:	60e6      	str	r6, [r4, #12]
   14010:	f023 0304 	bic.w	r3, r3, #4
   14014:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   14016:	4b13      	ldr	r3, [pc, #76]	; (14064 <_Cstart+0xf0>)
   14018:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   1401a:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   1401c:	4b12      	ldr	r3, [pc, #72]	; (14068 <_Cstart+0xf4>)

	_current = main_thread;
   1401e:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   14020:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   14024:	4c11      	ldr	r4, [pc, #68]	; (1406c <_Cstart+0xf8>)
   14026:	4a0a      	ldr	r2, [pc, #40]	; (14050 <_Cstart+0xdc>)
   14028:	f383 8809 	msr	PSP, r3
   1402c:	2100      	movs	r1, #0
   1402e:	f381 8811 	msr	BASEPRI, r1
   14032:	4610      	mov	r0, r2
   14034:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   14036:	4628      	mov	r0, r5
   14038:	f000 fab4 	bl	145a4 <_add_thread_to_ready_q>
   1403c:	e7d6      	b.n	13fec <_Cstart+0x78>
   1403e:	bf00      	nop
   14040:	20003628 	.word	0x20003628
   14044:	e000ed00 	.word	0xe000ed00
   14048:	200017c0 	.word	0x200017c0
   1404c:	20001950 	.word	0x20001950
   14050:	00013f45 	.word	0x00013f45
   14054:	200028e8 	.word	0x200028e8
   14058:	20001750 	.word	0x20001750
   1405c:	00013ed1 	.word	0x00013ed1
   14060:	20002ce8 	.word	0x20002ce8
   14064:	20001964 	.word	0x20001964
   14068:	20002ce8 	.word	0x20002ce8
   1406c:	00000899 	.word	0x00000899

00014070 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   14070:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   14072:	4c07      	ldr	r4, [pc, #28]	; (14090 <init_static_pools+0x20>)
   14074:	4d07      	ldr	r5, [pc, #28]	; (14094 <init_static_pools+0x24>)
   14076:	42ac      	cmp	r4, r5
   14078:	d301      	bcc.n	1407e <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1407a:	2000      	movs	r0, #0
   1407c:	bd38      	pop	{r3, r4, r5, pc}
   1407e:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   14082:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   14084:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   14086:	4620      	mov	r0, r4
   14088:	f7ec fc41 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   1408c:	341c      	adds	r4, #28
   1408e:	e7f2      	b.n	14076 <init_static_pools+0x6>
   14090:	20003f0c 	.word	0x20003f0c
   14094:	20003f0c 	.word	0x20003f0c

00014098 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   14098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1409c:	1e1d      	subs	r5, r3, #0
{
   1409e:	b085      	sub	sp, #20
   140a0:	4607      	mov	r7, r0
   140a2:	460c      	mov	r4, r1
   140a4:	4692      	mov	sl, r2
	if (timeout > 0) {
   140a6:	dd4c      	ble.n	14142 <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   140a8:	f000 fc16 	bl	148d8 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   140ac:	f105 0309 	add.w	r3, r5, #9
   140b0:	220a      	movs	r2, #10
   140b2:	fbb3 f3f2 	udiv	r3, r3, r2
   140b6:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   140ba:	4b23      	ldr	r3, [pc, #140]	; (14148 <k_mem_pool_alloc+0xb0>)
   140bc:	4e23      	ldr	r6, [pc, #140]	; (1414c <k_mem_pool_alloc+0xb4>)
   140be:	1afb      	subs	r3, r7, r3
   140c0:	109b      	asrs	r3, r3, #2
   140c2:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   140c4:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   140c6:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   140ca:	9400      	str	r4, [sp, #0]
   140cc:	ab03      	add	r3, sp, #12
   140ce:	aa02      	add	r2, sp, #8
   140d0:	4651      	mov	r1, sl
   140d2:	4638      	mov	r0, r7
   140d4:	f7ec fc66 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   140d8:	f110 0f0b 	cmn.w	r0, #11
   140dc:	d10b      	bne.n	140f6 <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   140de:	9400      	str	r4, [sp, #0]
   140e0:	ab03      	add	r3, sp, #12
   140e2:	aa02      	add	r2, sp, #8
   140e4:	4651      	mov	r1, sl
   140e6:	4638      	mov	r0, r7
   140e8:	f7ec fc5c 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   140ec:	f110 0f0b 	cmn.w	r0, #11
   140f0:	bf08      	it	eq
   140f2:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   140f6:	7963      	ldrb	r3, [r4, #5]
   140f8:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   140fa:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   140fc:	f362 0303 	bfi	r3, r2, #0, #4
   14100:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   14102:	6863      	ldr	r3, [r4, #4]
   14104:	9a03      	ldr	r2, [sp, #12]
   14106:	f362 331f 	bfi	r3, r2, #12, #20
   1410a:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1410c:	b1b0      	cbz	r0, 1413c <k_mem_pool_alloc+0xa4>
   1410e:	b1ad      	cbz	r5, 1413c <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   14110:	f110 0f0c 	cmn.w	r0, #12
   14114:	d112      	bne.n	1413c <k_mem_pool_alloc+0xa4>
   14116:	f04f 0320 	mov.w	r3, #32
   1411a:	f3ef 8011 	mrs	r0, BASEPRI
   1411e:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   14122:	462a      	mov	r2, r5
   14124:	4659      	mov	r1, fp
   14126:	f000 faeb 	bl	14700 <_pend_current_thread>

		if (timeout != K_FOREVER) {
   1412a:	1c6b      	adds	r3, r5, #1
   1412c:	d0cd      	beq.n	140ca <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   1412e:	f000 fbd3 	bl	148d8 <_tick_get>

			if (timeout < 0) {
   14132:	ebb8 0500 	subs.w	r5, r8, r0
   14136:	d5c8      	bpl.n	140ca <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   14138:	f06f 000a 	mvn.w	r0, #10
}
   1413c:	b005      	add	sp, #20
   1413e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   14142:	f04f 0800 	mov.w	r8, #0
   14146:	e7b8      	b.n	140ba <k_mem_pool_alloc+0x22>
   14148:	20003f0c 	.word	0x20003f0c
   1414c:	b6db6db7 	.word	0xb6db6db7

00014150 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   14150:	b570      	push	{r4, r5, r6, lr}
   14152:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   14154:	6802      	ldr	r2, [r0, #0]
   14156:	7841      	ldrb	r1, [r0, #1]
   14158:	4e13      	ldr	r6, [pc, #76]	; (141a8 <k_mem_pool_free_id+0x58>)
   1415a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1415e:	00a4      	lsls	r4, r4, #2
   14160:	0b12      	lsrs	r2, r2, #12
   14162:	f001 010f 	and.w	r1, r1, #15
   14166:	1930      	adds	r0, r6, r4
   14168:	f7ec fcce 	bl	b08 <_sys_mem_pool_block_free>
   1416c:	f04f 0320 	mov.w	r3, #32
   14170:	f3ef 8511 	mrs	r5, BASEPRI
   14174:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   14178:	f104 0014 	add.w	r0, r4, #20
   1417c:	4430      	add	r0, r6
   1417e:	f000 fb05 	bl	1478c <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   14182:	b140      	cbz	r0, 14196 <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14184:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   14188:	2b0d      	cmp	r3, #13
   1418a:	d804      	bhi.n	14196 <k_mem_pool_free_id+0x46>
   1418c:	b133      	cbz	r3, 1419c <k_mem_pool_free_id+0x4c>
   1418e:	4b07      	ldr	r3, [pc, #28]	; (141ac <k_mem_pool_free_id+0x5c>)
   14190:	685b      	ldr	r3, [r3, #4]
   14192:	051b      	lsls	r3, r3, #20
   14194:	d402      	bmi.n	1419c <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14196:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   1419a:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   1419c:	4628      	mov	r0, r5
}
   1419e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   141a2:	f000 b9a7 	b.w	144f4 <_reschedule>
   141a6:	bf00      	nop
   141a8:	20003f0c 	.word	0x20003f0c
   141ac:	e000ed00 	.word	0xe000ed00

000141b0 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   141b0:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   141b2:	1d0a      	adds	r2, r1, #4
   141b4:	d204      	bcs.n	141c0 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   141b6:	2300      	movs	r3, #0
   141b8:	4669      	mov	r1, sp
   141ba:	f7ff ff6d 	bl	14098 <k_mem_pool_alloc>
   141be:	b118      	cbz	r0, 141c8 <k_mem_pool_malloc+0x18>
		return NULL;
   141c0:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   141c2:	b003      	add	sp, #12
   141c4:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   141c8:	2204      	movs	r2, #4
   141ca:	eb0d 0102 	add.w	r1, sp, r2
   141ce:	9800      	ldr	r0, [sp, #0]
   141d0:	f7ed fd14 	bl	1bfc <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   141d4:	9800      	ldr	r0, [sp, #0]
   141d6:	3004      	adds	r0, #4
   141d8:	e7f3      	b.n	141c2 <k_mem_pool_malloc+0x12>

000141da <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   141da:	b110      	cbz	r0, 141e2 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   141dc:	3804      	subs	r0, #4
   141de:	f7ff bfb7 	b.w	14150 <k_mem_pool_free_id>
   141e2:	4770      	bx	lr

000141e4 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   141e4:	4b03      	ldr	r3, [pc, #12]	; (141f4 <z_thread_malloc+0x10>)
   141e6:	689b      	ldr	r3, [r3, #8]
{
   141e8:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   141ea:	6e58      	ldr	r0, [r3, #100]	; 0x64
   141ec:	b108      	cbz	r0, 141f2 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   141ee:	f7ff bfdf 	b.w	141b0 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   141f2:	4770      	bx	lr
   141f4:	20001950 	.word	0x20001950

000141f8 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   141f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   141fa:	4605      	mov	r5, r0
   141fc:	460f      	mov	r7, r1
   141fe:	4614      	mov	r4, r2
	__asm__ volatile(
   14200:	f04f 0220 	mov.w	r2, #32
   14204:	f3ef 8611 	mrs	r6, BASEPRI
   14208:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1420c:	b1a3      	cbz	r3, 14238 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1420e:	2008      	movs	r0, #8
   14210:	f7ff ffe8 	bl	141e4 <z_thread_malloc>
		if (!anode) {
   14214:	2800      	cmp	r0, #0
   14216:	d034      	beq.n	14282 <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   14218:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   1421a:	6044      	str	r4, [r0, #4]
   1421c:	6003      	str	r3, [r0, #0]
   1421e:	4604      	mov	r4, r0
   14220:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   14222:	b95f      	cbnz	r7, 1423c <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   14224:	682a      	ldr	r2, [r5, #0]
   14226:	f003 0303 	and.w	r3, r3, #3
   1422a:	4313      	orrs	r3, r2
   1422c:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   1422e:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   14230:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   14232:	b973      	cbnz	r3, 14252 <queue_insert+0x5a>
	list->tail = node;
   14234:	606c      	str	r4, [r5, #4]
   14236:	e00c      	b.n	14252 <queue_insert+0x5a>
	node->next_and_flags = flags;
   14238:	6023      	str	r3, [r4, #0]
   1423a:	e7f1      	b.n	14220 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1423c:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   1423e:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   14242:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   14246:	d114      	bne.n	14272 <queue_insert+0x7a>
   14248:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1424a:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   1424c:	b95a      	cbnz	r2, 14266 <queue_insert+0x6e>
	list->tail = node;
   1424e:	606c      	str	r4, [r5, #4]
	list->head = node;
   14250:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   14252:	2104      	movs	r1, #4
   14254:	f105 0008 	add.w	r0, r5, #8
   14258:	f000 ffb4 	bl	151c4 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   1425c:	4630      	mov	r0, r6
   1425e:	f000 f949 	bl	144f4 <_reschedule>
	return 0;
   14262:	2000      	movs	r0, #0
   14264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14266:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14268:	f003 0303 	and.w	r3, r3, #3
   1426c:	4323      	orrs	r3, r4
   1426e:	6013      	str	r3, [r2, #0]
   14270:	e7e0      	b.n	14234 <queue_insert+0x3c>
   14272:	4313      	orrs	r3, r2
   14274:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14276:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14278:	f002 0203 	and.w	r2, r2, #3
   1427c:	4314      	orrs	r4, r2
   1427e:	603c      	str	r4, [r7, #0]
   14280:	e7e7      	b.n	14252 <queue_insert+0x5a>
			return -ENOMEM;
   14282:	f06f 000b 	mvn.w	r0, #11
}
   14286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014288 <z_queue_node_peek>:
{
   14288:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   1428a:	4604      	mov	r4, r0
   1428c:	b130      	cbz	r0, 1429c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1428e:	6802      	ldr	r2, [r0, #0]
   14290:	0793      	lsls	r3, r2, #30
   14292:	d003      	beq.n	1429c <z_queue_node_peek+0x14>
		ret = anode->data;
   14294:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   14296:	b109      	cbz	r1, 1429c <z_queue_node_peek+0x14>
			k_free(anode);
   14298:	f7ff ff9f 	bl	141da <k_free>
}
   1429c:	4620      	mov	r0, r4
   1429e:	bd10      	pop	{r4, pc}

000142a0 <_impl_k_queue_init>:
	list->head = NULL;
   142a0:	2300      	movs	r3, #0
   142a2:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   142a4:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   142a6:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   142aa:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   142ac:	60c3      	str	r3, [r0, #12]
   142ae:	4770      	bx	lr

000142b0 <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   142b0:	460a      	mov	r2, r1
   142b2:	2300      	movs	r3, #0
   142b4:	6841      	ldr	r1, [r0, #4]
   142b6:	f7ff bf9f 	b.w	141f8 <queue_insert>

000142ba <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   142ba:	2300      	movs	r3, #0
   142bc:	460a      	mov	r2, r1
   142be:	4619      	mov	r1, r3
   142c0:	f7ff bf9a 	b.w	141f8 <queue_insert>

000142c4 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   142c4:	b538      	push	{r3, r4, r5, lr}
   142c6:	f04f 0320 	mov.w	r3, #32
   142ca:	f3ef 8511 	mrs	r5, BASEPRI
   142ce:	f383 8811 	msr	BASEPRI, r3
   142d2:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   142d4:	b953      	cbnz	r3, 142ec <k_queue_append_list+0x28>
	list->head = node;
   142d6:	6001      	str	r1, [r0, #0]
	list->tail = node;
   142d8:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   142da:	2104      	movs	r1, #4
   142dc:	3008      	adds	r0, #8
   142de:	f000 ff71 	bl	151c4 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   142e2:	4628      	mov	r0, r5
}
   142e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   142e8:	f000 b904 	b.w	144f4 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   142ec:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   142ee:	f004 0403 	and.w	r4, r4, #3
   142f2:	4321      	orrs	r1, r4
   142f4:	6019      	str	r1, [r3, #0]
   142f6:	e7ef      	b.n	142d8 <k_queue_append_list+0x14>

000142f8 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   142f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142fc:	4604      	mov	r4, r0
   142fe:	b086      	sub	sp, #24
   14300:	460d      	mov	r5, r1
   14302:	f04f 0320 	mov.w	r3, #32
   14306:	f3ef 8711 	mrs	r7, BASEPRI
   1430a:	f383 8811 	msr	BASEPRI, r3
   1430e:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   14310:	b182      	cbz	r2, 14334 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14312:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14314:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14316:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   1431a:	428a      	cmp	r2, r1
	list->head = node;
   1431c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1431e:	bf08      	it	eq
   14320:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   14322:	2101      	movs	r1, #1
   14324:	4610      	mov	r0, r2
   14326:	f7ff ffaf 	bl	14288 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1432a:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1432e:	b006      	add	sp, #24
   14330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   14334:	b919      	cbnz	r1, 1433e <_impl_k_queue_get+0x46>
   14336:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   1433a:	2000      	movs	r0, #0
   1433c:	e7f7      	b.n	1432e <_impl_k_queue_get+0x36>
   1433e:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   14342:	2104      	movs	r1, #4
   14344:	4603      	mov	r3, r0
   14346:	eb0d 0001 	add.w	r0, sp, r1
   1434a:	f000 fea4 	bl	15096 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1434e:	1c6a      	adds	r2, r5, #1
   14350:	d002      	beq.n	14358 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   14352:	f000 fab7 	bl	148c4 <_impl_k_uptime_get_32>
   14356:	4606      	mov	r6, r0
{
   14358:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1435a:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   1435e:	1bea      	subs	r2, r5, r7
   14360:	f36f 1307 	bfc	r3, #4, #4
   14364:	2101      	movs	r1, #1
   14366:	a801      	add	r0, sp, #4
   14368:	f88d 3011 	strb.w	r3, [sp, #17]
   1436c:	f000 fea6 	bl	150bc <_impl_k_poll>
		if (err && err != -EAGAIN) {
   14370:	b108      	cbz	r0, 14376 <_impl_k_queue_get+0x7e>
   14372:	300b      	adds	r0, #11
   14374:	d1e1      	bne.n	1433a <_impl_k_queue_get+0x42>
	__asm__ volatile(
   14376:	f04f 0320 	mov.w	r3, #32
   1437a:	f3ef 8811 	mrs	r8, BASEPRI
   1437e:	f383 8811 	msr	BASEPRI, r3
   14382:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   14384:	b138      	cbz	r0, 14396 <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14386:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14388:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1438a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   1438e:	4290      	cmp	r0, r2
	list->head = node;
   14390:	6023      	str	r3, [r4, #0]
	list->tail = node;
   14392:	bf08      	it	eq
   14394:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   14396:	2101      	movs	r1, #1
   14398:	f7ff ff76 	bl	14288 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1439c:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   143a0:	2800      	cmp	r0, #0
   143a2:	d1c4      	bne.n	1432e <_impl_k_queue_get+0x36>
   143a4:	1c6b      	adds	r3, r5, #1
   143a6:	d0d8      	beq.n	1435a <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   143a8:	f000 fa8c 	bl	148c4 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   143ac:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   143ae:	42bd      	cmp	r5, r7
   143b0:	dad3      	bge.n	1435a <_impl_k_queue_get+0x62>
   143b2:	e7c2      	b.n	1433a <_impl_k_queue_get+0x42>

000143b4 <sys_dlist_remove>:
	node->prev->next = node->next;
   143b4:	e890 000c 	ldmia.w	r0, {r2, r3}
   143b8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   143ba:	6802      	ldr	r2, [r0, #0]
   143bc:	6053      	str	r3, [r2, #4]
   143be:	4770      	bx	lr

000143c0 <_abort_timeout>:
{
   143c0:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   143c2:	6900      	ldr	r0, [r0, #16]
{
   143c4:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   143c6:	1c43      	adds	r3, r0, #1
   143c8:	d00e      	beq.n	143e8 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   143ca:	4b08      	ldr	r3, [pc, #32]	; (143ec <_abort_timeout+0x2c>)
   143cc:	699b      	ldr	r3, [r3, #24]
   143ce:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   143d0:	bf1f      	itttt	ne
   143d2:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   143d4:	6913      	ldrne	r3, [r2, #16]
   143d6:	18c0      	addne	r0, r0, r3
   143d8:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   143da:	4608      	mov	r0, r1
   143dc:	f7ff ffea 	bl	143b4 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   143e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   143e4:	610b      	str	r3, [r1, #16]
	return 0;
   143e6:	2000      	movs	r0, #0
}
   143e8:	bd08      	pop	{r3, pc}
   143ea:	bf00      	nop
   143ec:	20001950 	.word	0x20001950

000143f0 <k_spin_lock.isra.11>:
	__asm__ volatile(
   143f0:	f04f 0320 	mov.w	r3, #32
   143f4:	f3ef 8011 	mrs	r0, BASEPRI
   143f8:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   143fc:	4770      	bx	lr
	...

00014400 <update_cache>:
	return list->head == list;
   14400:	4b0d      	ldr	r3, [pc, #52]	; (14438 <update_cache+0x38>)
   14402:	4619      	mov	r1, r3
   14404:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14408:	428a      	cmp	r2, r1
   1440a:	d000      	beq.n	1440e <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   1440c:	b902      	cbnz	r2, 14410 <update_cache+0x10>
   1440e:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   14410:	b970      	cbnz	r0, 14430 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   14412:	6899      	ldr	r1, [r3, #8]
   14414:	b161      	cbz	r1, 14430 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   14416:	7a48      	ldrb	r0, [r1, #9]
   14418:	06c0      	lsls	r0, r0, #27
   1441a:	d109      	bne.n	14430 <update_cache+0x30>
   1441c:	6a48      	ldr	r0, [r1, #36]	; 0x24
   1441e:	3001      	adds	r0, #1
   14420:	d106      	bne.n	14430 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   14422:	8948      	ldrh	r0, [r1, #10]
   14424:	287f      	cmp	r0, #127	; 0x7f
   14426:	d903      	bls.n	14430 <update_cache+0x30>
	return thread == _idle_thread;
   14428:	4804      	ldr	r0, [pc, #16]	; (1443c <update_cache+0x3c>)
	if (_is_idle(_current)) {
   1442a:	6800      	ldr	r0, [r0, #0]
   1442c:	4281      	cmp	r1, r0
   1442e:	d101      	bne.n	14434 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   14430:	621a      	str	r2, [r3, #32]
   14432:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   14434:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   14436:	4770      	bx	lr
   14438:	20001950 	.word	0x20001950
   1443c:	000196dc 	.word	0x000196dc

00014440 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   14440:	f990 000a 	ldrsb.w	r0, [r0, #10]
   14444:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   14448:	4298      	cmp	r0, r3
   1444a:	bfac      	ite	ge
   1444c:	2000      	movge	r0, #0
   1444e:	2001      	movlt	r0, #1
   14450:	4770      	bx	lr
	...

00014454 <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   14454:	b510      	push	{r4, lr}
   14456:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   14458:	f7ff ffca 	bl	143f0 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   1445c:	7a4b      	ldrb	r3, [r1, #9]
   1445e:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   14460:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   14462:	d50d      	bpl.n	14480 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   14464:	4608      	mov	r0, r1
   14466:	f7ff ffa5 	bl	143b4 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   1446a:	7a4b      	ldrb	r3, [r1, #9]
   1446c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14470:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   14472:	4b05      	ldr	r3, [pc, #20]	; (14488 <_remove_thread_from_ready_q+0x34>)
   14474:	6898      	ldr	r0, [r3, #8]
   14476:	1a43      	subs	r3, r0, r1
   14478:	4258      	negs	r0, r3
   1447a:	4158      	adcs	r0, r3
   1447c:	f7ff ffc0 	bl	14400 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14480:	f384 8811 	msr	BASEPRI, r4
   14484:	bd10      	pop	{r4, pc}
   14486:	bf00      	nop
   14488:	20001950 	.word	0x20001950

0001448c <_find_first_thread_to_unpend>:
{
   1448c:	b508      	push	{r3, lr}
   1448e:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   14490:	f7ff ffae 	bl	143f0 <k_spin_lock.isra.11>
	return list->head == list;
   14494:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14496:	429a      	cmp	r2, r3
   14498:	bf08      	it	eq
   1449a:	2300      	moveq	r3, #0
   1449c:	f380 8811 	msr	BASEPRI, r0
}
   144a0:	4618      	mov	r0, r3
   144a2:	bd08      	pop	{r3, pc}

000144a4 <_unpend_thread_no_timeout>:
{
   144a4:	b510      	push	{r4, lr}
   144a6:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   144a8:	f7ff ffa2 	bl	143f0 <k_spin_lock.isra.11>
   144ac:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   144ae:	4608      	mov	r0, r1
   144b0:	f7ff ff80 	bl	143b4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   144b4:	7a4b      	ldrb	r3, [r1, #9]
   144b6:	f023 0302 	bic.w	r3, r3, #2
   144ba:	724b      	strb	r3, [r1, #9]
   144bc:	f384 8811 	msr	BASEPRI, r4
   144c0:	bd10      	pop	{r4, pc}

000144c2 <_unpend_first_thread>:
{
   144c2:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   144c4:	2100      	movs	r1, #0
   144c6:	f7ff ffe1 	bl	1448c <_find_first_thread_to_unpend>

	if (thread) {
   144ca:	4604      	mov	r4, r0
   144cc:	b128      	cbz	r0, 144da <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   144ce:	f7ff ffe9 	bl	144a4 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   144d2:	f104 0014 	add.w	r0, r4, #20
   144d6:	f7ff ff73 	bl	143c0 <_abort_timeout>
}
   144da:	4620      	mov	r0, r4
   144dc:	bd10      	pop	{r4, pc}

000144de <_unpend_thread>:
{
   144de:	b510      	push	{r4, lr}
   144e0:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   144e2:	f7ff ffdf 	bl	144a4 <_unpend_thread_no_timeout>
   144e6:	f104 0014 	add.w	r0, r4, #20
}
   144ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   144ee:	f7ff bf67 	b.w	143c0 <_abort_timeout>
	...

000144f4 <_reschedule>:
   144f4:	f3ef 8305 	mrs	r3, IPSR
   144f8:	2b0d      	cmp	r3, #13
   144fa:	d809      	bhi.n	14510 <_reschedule+0x1c>
   144fc:	b11b      	cbz	r3, 14506 <_reschedule+0x12>
   144fe:	4b09      	ldr	r3, [pc, #36]	; (14524 <_reschedule+0x30>)
   14500:	685b      	ldr	r3, [r3, #4]
   14502:	051b      	lsls	r3, r3, #20
   14504:	d504      	bpl.n	14510 <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   14506:	4b08      	ldr	r3, [pc, #32]	; (14528 <_reschedule+0x34>)
   14508:	689a      	ldr	r2, [r3, #8]
   1450a:	6a1b      	ldr	r3, [r3, #32]
   1450c:	429a      	cmp	r2, r3
   1450e:	d103      	bne.n	14518 <_reschedule+0x24>
   14510:	f380 8811 	msr	BASEPRI, r0
}
   14514:	2000      	movs	r0, #0
   14516:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   14518:	4b04      	ldr	r3, [pc, #16]	; (1452c <_reschedule+0x38>)
   1451a:	2200      	movs	r2, #0
   1451c:	601a      	str	r2, [r3, #0]
   1451e:	f7ec bff3 	b.w	1508 <__swap>
   14522:	bf00      	nop
   14524:	e000ed00 	.word	0xe000ed00
   14528:	20001950 	.word	0x20001950
   1452c:	20001984 	.word	0x20001984

00014530 <k_sched_unlock>:
{
   14530:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   14532:	f7ff ff5d 	bl	143f0 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   14536:	4b0a      	ldr	r3, [pc, #40]	; (14560 <k_sched_unlock+0x30>)
   14538:	689a      	ldr	r2, [r3, #8]
   1453a:	7ad3      	ldrb	r3, [r2, #11]
   1453c:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   1453e:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   14540:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   14542:	2001      	movs	r0, #1
   14544:	f7ff ff5c 	bl	14400 <update_cache>
   14548:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   1454c:	f04f 0320 	mov.w	r3, #32
   14550:	f3ef 8011 	mrs	r0, BASEPRI
   14554:	f383 8811 	msr	BASEPRI, r3
}
   14558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   1455c:	f7ff bfca 	b.w	144f4 <_reschedule>
   14560:	20001950 	.word	0x20001950

00014564 <_priq_dumb_add>:
{
   14564:	b510      	push	{r4, lr}
	return list->head == list;
   14566:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14568:	4298      	cmp	r0, r3
   1456a:	bf08      	it	eq
   1456c:	2300      	moveq	r3, #0
   1456e:	b193      	cbz	r3, 14596 <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   14570:	f991 400a 	ldrsb.w	r4, [r1, #10]
   14574:	f993 200a 	ldrsb.w	r2, [r3, #10]
   14578:	4294      	cmp	r4, r2
   1457a:	da06      	bge.n	1458a <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   1457c:	685a      	ldr	r2, [r3, #4]
   1457e:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   14580:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   14582:	685a      	ldr	r2, [r3, #4]
   14584:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   14586:	6059      	str	r1, [r3, #4]
   14588:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   1458a:	6842      	ldr	r2, [r0, #4]
   1458c:	4293      	cmp	r3, r2
   1458e:	d002      	beq.n	14596 <_priq_dumb_add+0x32>
   14590:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14592:	2b00      	cmp	r3, #0
   14594:	d1eb      	bne.n	1456e <_priq_dumb_add+0xa>
	node->next = list;
   14596:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   14598:	6843      	ldr	r3, [r0, #4]
   1459a:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   1459c:	6843      	ldr	r3, [r0, #4]
   1459e:	6019      	str	r1, [r3, #0]
	list->tail = node;
   145a0:	6041      	str	r1, [r0, #4]
   145a2:	bd10      	pop	{r4, pc}

000145a4 <_add_thread_to_ready_q>:
{
   145a4:	b538      	push	{r3, r4, r5, lr}
   145a6:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   145a8:	f7ff ff22 	bl	143f0 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   145ac:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   145ae:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   145b0:	4806      	ldr	r0, [pc, #24]	; (145cc <_add_thread_to_ready_q+0x28>)
   145b2:	f7ff ffd7 	bl	14564 <_priq_dumb_add>
	thread->base.thread_state |= states;
   145b6:	7a63      	ldrb	r3, [r4, #9]
   145b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   145bc:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   145be:	2000      	movs	r0, #0
   145c0:	f7ff ff1e 	bl	14400 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   145c4:	f385 8811 	msr	BASEPRI, r5
   145c8:	bd38      	pop	{r3, r4, r5, pc}
   145ca:	bf00      	nop
   145cc:	20001974 	.word	0x20001974

000145d0 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   145d0:	7a42      	ldrb	r2, [r0, #9]
   145d2:	06d2      	lsls	r2, r2, #27
   145d4:	d104      	bne.n	145e0 <_ready_thread+0x10>
   145d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   145d8:	3301      	adds	r3, #1
   145da:	d101      	bne.n	145e0 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   145dc:	f7ff bfe2 	b.w	145a4 <_add_thread_to_ready_q>
   145e0:	4770      	bx	lr
	...

000145e4 <_add_timeout>:
{
   145e4:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   145e6:	610b      	str	r3, [r1, #16]
{
   145e8:	4604      	mov	r4, r0
   145ea:	461d      	mov	r5, r3
	timeout->thread = thread;
   145ec:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   145ee:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   145f0:	bb03      	cbnz	r3, 14634 <_add_timeout+0x50>
	__asm__ volatile(
   145f2:	f04f 0320 	mov.w	r3, #32
   145f6:	f3ef 8611 	mrs	r6, BASEPRI
   145fa:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   145fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14602:	610b      	str	r3, [r1, #16]
	if (thread) {
   14604:	b170      	cbz	r0, 14624 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   14606:	68cb      	ldr	r3, [r1, #12]
   14608:	b113      	cbz	r3, 14610 <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   1460a:	f7ff ff4b 	bl	144a4 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   1460e:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14610:	7a63      	ldrb	r3, [r4, #9]
   14612:	f023 0304 	bic.w	r3, r3, #4
   14616:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   14618:	4620      	mov	r0, r4
   1461a:	f7ff ffd9 	bl	145d0 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1461e:	f386 8811 	msr	BASEPRI, r6
   14622:	bd70      	pop	{r4, r5, r6, pc}
   14624:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   14628:	694b      	ldr	r3, [r1, #20]
   1462a:	b32b      	cbz	r3, 14678 <_add_timeout+0x94>
			timeout->func(timeout);
   1462c:	4608      	mov	r0, r1
}
   1462e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   14632:	4718      	bx	r3
	return list->head == list;
   14634:	4a11      	ldr	r2, [pc, #68]	; (1467c <_add_timeout+0x98>)
   14636:	4610      	mov	r0, r2
   14638:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1463c:	4283      	cmp	r3, r0
   1463e:	d10c      	bne.n	1465a <_add_timeout+0x76>
	node->next = list;
   14640:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   14642:	6993      	ldr	r3, [r2, #24]
   14644:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   14646:	6993      	ldr	r3, [r2, #24]
   14648:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1464a:	6191      	str	r1, [r2, #24]
   1464c:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   1464e:	1b64      	subs	r4, r4, r5
   14650:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   14652:	6994      	ldr	r4, [r2, #24]
   14654:	42a3      	cmp	r3, r4
   14656:	d0f3      	beq.n	14640 <_add_timeout+0x5c>
   14658:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   1465a:	2b00      	cmp	r3, #0
   1465c:	d0f0      	beq.n	14640 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   1465e:	690c      	ldr	r4, [r1, #16]
   14660:	691d      	ldr	r5, [r3, #16]
   14662:	42ac      	cmp	r4, r5
   14664:	dcf3      	bgt.n	1464e <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   14666:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14668:	1b2c      	subs	r4, r5, r4
   1466a:	611c      	str	r4, [r3, #16]
   1466c:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   1466e:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   14670:	685a      	ldr	r2, [r3, #4]
   14672:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   14674:	6059      	str	r1, [r3, #4]
   14676:	bd70      	pop	{r4, r5, r6, pc}
   14678:	bd70      	pop	{r4, r5, r6, pc}
   1467a:	bf00      	nop
   1467c:	20001950 	.word	0x20001950

00014680 <_move_thread_to_end_of_prio_q>:
{
   14680:	b538      	push	{r3, r4, r5, lr}
   14682:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   14684:	f7ff feb4 	bl	143f0 <k_spin_lock.isra.11>
   14688:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   1468a:	4620      	mov	r0, r4
   1468c:	f7ff fe92 	bl	143b4 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   14690:	4621      	mov	r1, r4
   14692:	4806      	ldr	r0, [pc, #24]	; (146ac <_move_thread_to_end_of_prio_q+0x2c>)
   14694:	f7ff ff66 	bl	14564 <_priq_dumb_add>
	thread->base.thread_state |= states;
   14698:	7a63      	ldrb	r3, [r4, #9]
   1469a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1469e:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   146a0:	2000      	movs	r0, #0
   146a2:	f7ff fead 	bl	14400 <update_cache>
   146a6:	f385 8811 	msr	BASEPRI, r5
   146aa:	bd38      	pop	{r3, r4, r5, pc}
   146ac:	20001974 	.word	0x20001974

000146b0 <pend>:
{
   146b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   146b2:	4605      	mov	r5, r0
   146b4:	4614      	mov	r4, r2
   146b6:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   146b8:	f7ff fecc 	bl	14454 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   146bc:	7a6b      	ldrb	r3, [r5, #9]
   146be:	f043 0302 	orr.w	r3, r3, #2
   146c2:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   146c4:	1c63      	adds	r3, r4, #1
   146c6:	d012      	beq.n	146ee <pend+0x3e>
	__asm__ volatile(
   146c8:	f04f 0320 	mov.w	r3, #32
   146cc:	f3ef 8711 	mrs	r7, BASEPRI
   146d0:	f383 8811 	msr	BASEPRI, r3
   146d4:	230a      	movs	r3, #10
   146d6:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   146d8:	4632      	mov	r2, r6
   146da:	fbb4 f3f3 	udiv	r3, r4, r3
   146de:	f105 0114 	add.w	r1, r5, #20
   146e2:	3301      	adds	r3, #1
   146e4:	4628      	mov	r0, r5
   146e6:	f7ff ff7d 	bl	145e4 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   146ea:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   146ee:	b12e      	cbz	r6, 146fc <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   146f0:	4629      	mov	r1, r5
   146f2:	4630      	mov	r0, r6
}
   146f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   146f8:	f7ff bf34 	b.w	14564 <_priq_dumb_add>
   146fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00014700 <_pend_current_thread>:
{
   14700:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   14702:	4b06      	ldr	r3, [pc, #24]	; (1471c <_pend_current_thread+0x1c>)
{
   14704:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   14706:	6898      	ldr	r0, [r3, #8]
   14708:	f7ff ffd2 	bl	146b0 <pend>
	_time_slice_elapsed = 0;
   1470c:	4b04      	ldr	r3, [pc, #16]	; (14720 <_pend_current_thread+0x20>)
   1470e:	2200      	movs	r2, #0
   14710:	4620      	mov	r0, r4
}
   14712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   14716:	601a      	str	r2, [r3, #0]
   14718:	f7ec bef6 	b.w	1508 <__swap>
   1471c:	20001950 	.word	0x20001950
   14720:	20001984 	.word	0x20001984

00014724 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   14724:	4b13      	ldr	r3, [pc, #76]	; (14774 <_is_thread_time_slicing+0x50>)
   14726:	681b      	ldr	r3, [r3, #0]
   14728:	2b00      	cmp	r3, #0
{
   1472a:	b510      	push	{r4, lr}
   1472c:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   1472e:	dd1f      	ble.n	14770 <_is_thread_time_slicing+0x4c>
   14730:	8943      	ldrh	r3, [r0, #10]
   14732:	2b7f      	cmp	r3, #127	; 0x7f
   14734:	d81c      	bhi.n	14770 <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   14736:	4b10      	ldr	r3, [pc, #64]	; (14778 <_is_thread_time_slicing+0x54>)
   14738:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   1473c:	681b      	ldr	r3, [r3, #0]
   1473e:	4299      	cmp	r1, r3
   14740:	db16      	blt.n	14770 <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   14742:	f7ff fe55 	bl	143f0 <k_spin_lock.isra.11>
	return list->head == list;
   14746:	490d      	ldr	r1, [pc, #52]	; (1477c <_is_thread_time_slicing+0x58>)
   14748:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1474c:	428b      	cmp	r3, r1
   1474e:	4604      	mov	r4, r0
   14750:	d00a      	beq.n	14768 <_is_thread_time_slicing+0x44>
		if (next) {
   14752:	b15b      	cbz	r3, 1476c <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   14754:	f992 000a 	ldrsb.w	r0, [r2, #10]
   14758:	f993 300a 	ldrsb.w	r3, [r3, #10]
   1475c:	1ac3      	subs	r3, r0, r3
   1475e:	4258      	negs	r0, r3
   14760:	4158      	adcs	r0, r3
   14762:	f384 8811 	msr	BASEPRI, r4
	return ret;
   14766:	bd10      	pop	{r4, pc}
   14768:	2000      	movs	r0, #0
   1476a:	e7fa      	b.n	14762 <_is_thread_time_slicing+0x3e>
   1476c:	4618      	mov	r0, r3
   1476e:	e7f8      	b.n	14762 <_is_thread_time_slicing+0x3e>
		return 0;
   14770:	2000      	movs	r0, #0
}
   14772:	bd10      	pop	{r4, pc}
   14774:	20001830 	.word	0x20001830
   14778:	20001834 	.word	0x20001834
   1477c:	20001950 	.word	0x20001950

00014780 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   14780:	4b01      	ldr	r3, [pc, #4]	; (14788 <_update_time_slice_before_swap+0x8>)
   14782:	2200      	movs	r2, #0
   14784:	601a      	str	r2, [r3, #0]
   14786:	4770      	bx	lr
   14788:	20001984 	.word	0x20001984

0001478c <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   1478c:	b538      	push	{r3, r4, r5, lr}
   1478e:	4605      	mov	r5, r0
	int need_sched = 0;
   14790:	2000      	movs	r0, #0
	return list->head == list;
   14792:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14794:	42a5      	cmp	r5, r4
   14796:	d000      	beq.n	1479a <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   14798:	b904      	cbnz	r4, 1479c <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   1479a:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   1479c:	4620      	mov	r0, r4
   1479e:	f7ff fe9e 	bl	144de <_unpend_thread>
		_ready_thread(th);
   147a2:	4620      	mov	r0, r4
   147a4:	f7ff ff14 	bl	145d0 <_ready_thread>
		need_sched = 1;
   147a8:	2001      	movs	r0, #1
   147aa:	e7f2      	b.n	14792 <_unpend_all+0x6>

000147ac <_sched_init>:
	list->head = (sys_dnode_t *)list;
   147ac:	4b02      	ldr	r3, [pc, #8]	; (147b8 <_sched_init+0xc>)
   147ae:	f103 0224 	add.w	r2, r3, #36	; 0x24
   147b2:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   147b4:	629a      	str	r2, [r3, #40]	; 0x28
   147b6:	4770      	bx	lr
   147b8:	20001950 	.word	0x20001950

000147bc <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   147bc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   147be:	4c14      	ldr	r4, [pc, #80]	; (14810 <_impl_k_yield+0x54>)
   147c0:	4b14      	ldr	r3, [pc, #80]	; (14814 <_impl_k_yield+0x58>)
   147c2:	68a2      	ldr	r2, [r4, #8]
   147c4:	681b      	ldr	r3, [r3, #0]
   147c6:	429a      	cmp	r2, r3
   147c8:	d00f      	beq.n	147ea <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   147ca:	f7ff fe11 	bl	143f0 <k_spin_lock.isra.11>
   147ce:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   147d0:	68a0      	ldr	r0, [r4, #8]
   147d2:	f7ff fdef 	bl	143b4 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   147d6:	68a1      	ldr	r1, [r4, #8]
   147d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   147dc:	f7ff fec2 	bl	14564 <_priq_dumb_add>
			update_cache(1);
   147e0:	2001      	movs	r0, #1
   147e2:	f7ff fe0d 	bl	14400 <update_cache>
   147e6:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   147ea:	6a22      	ldr	r2, [r4, #32]
   147ec:	68a3      	ldr	r3, [r4, #8]
   147ee:	429a      	cmp	r2, r3
   147f0:	d00c      	beq.n	1480c <_impl_k_yield+0x50>
	__asm__ volatile(
   147f2:	f04f 0320 	mov.w	r3, #32
   147f6:	f3ef 8011 	mrs	r0, BASEPRI
   147fa:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   147fe:	4b06      	ldr	r3, [pc, #24]	; (14818 <_impl_k_yield+0x5c>)
   14800:	2200      	movs	r2, #0
   14802:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   14804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14808:	f7ec be7e 	b.w	1508 <__swap>
   1480c:	bd38      	pop	{r3, r4, r5, pc}
   1480e:	bf00      	nop
   14810:	20001950 	.word	0x20001950
   14814:	000196dc 	.word	0x000196dc
   14818:	20001984 	.word	0x20001984

0001481c <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   1481c:	4b01      	ldr	r3, [pc, #4]	; (14824 <_impl_k_current_get+0x8>)
   1481e:	6898      	ldr	r0, [r3, #8]
   14820:	4770      	bx	lr
   14822:	bf00      	nop
   14824:	20001950 	.word	0x20001950

00014828 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   14828:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   1482c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1482e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   14830:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   14832:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   14834:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   14836:	6143      	str	r3, [r0, #20]
   14838:	4770      	bx	lr

0001483a <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   1483a:	b570      	push	{r4, r5, r6, lr}
   1483c:	4604      	mov	r4, r0
   1483e:	f04f 0320 	mov.w	r3, #32
   14842:	f3ef 8611 	mrs	r6, BASEPRI
   14846:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   1484a:	f7ff fe3a 	bl	144c2 <_unpend_first_thread>
	if (thread) {
   1484e:	4605      	mov	r5, r0
   14850:	b160      	cbz	r0, 1486c <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   14852:	7a43      	ldrb	r3, [r0, #9]
   14854:	06db      	lsls	r3, r3, #27
   14856:	d102      	bne.n	1485e <_impl_k_sem_give+0x24>
   14858:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1485a:	3301      	adds	r3, #1
   1485c:	d012      	beq.n	14884 <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1485e:	2300      	movs	r3, #0
   14860:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   14862:	4630      	mov	r0, r6
}
   14864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   14868:	f7ff be44 	b.w	144f4 <_reschedule>
	sem->count += (sem->count != sem->limit);
   1486c:	68a3      	ldr	r3, [r4, #8]
   1486e:	68e2      	ldr	r2, [r4, #12]
   14870:	429a      	cmp	r2, r3
   14872:	bf18      	it	ne
   14874:	3301      	addne	r3, #1
   14876:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   14878:	2102      	movs	r1, #2
   1487a:	f104 0010 	add.w	r0, r4, #16
   1487e:	f000 fca1 	bl	151c4 <_handle_obj_poll_events>
   14882:	e7ee      	b.n	14862 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   14884:	f7ff fe8e 	bl	145a4 <_add_thread_to_ready_q>
   14888:	e7e9      	b.n	1485e <_impl_k_sem_give+0x24>

0001488a <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1488a:	b410      	push	{r4}
   1488c:	460a      	mov	r2, r1
   1488e:	4604      	mov	r4, r0
   14890:	f04f 0320 	mov.w	r3, #32
   14894:	f3ef 8011 	mrs	r0, BASEPRI
   14898:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   1489c:	68a3      	ldr	r3, [r4, #8]
   1489e:	b133      	cbz	r3, 148ae <_impl_k_sem_take+0x24>
		sem->count--;
   148a0:	3b01      	subs	r3, #1
   148a2:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   148a4:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   148a8:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   148aa:	bc10      	pop	{r4}
   148ac:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   148ae:	b921      	cbnz	r1, 148ba <_impl_k_sem_take+0x30>
   148b0:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   148b4:	f06f 000f 	mvn.w	r0, #15
   148b8:	e7f7      	b.n	148aa <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   148ba:	4621      	mov	r1, r4
}
   148bc:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   148be:	f7ff bf1f 	b.w	14700 <_pend_current_thread>
	...

000148c4 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   148c4:	4b03      	ldr	r3, [pc, #12]	; (148d4 <_impl_k_uptime_get_32+0x10>)
   148c6:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   148ca:	230a      	movs	r3, #10
   148cc:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   148d0:	4770      	bx	lr
   148d2:	bf00      	nop
   148d4:	20001988 	.word	0x20001988

000148d8 <_tick_get>:
	__asm__ volatile(
   148d8:	f04f 0220 	mov.w	r2, #32
   148dc:	f3ef 8311 	mrs	r3, BASEPRI
   148e0:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   148e4:	4a02      	ldr	r2, [pc, #8]	; (148f0 <_tick_get+0x18>)
   148e6:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   148ea:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   148ee:	4770      	bx	lr
   148f0:	20001988 	.word	0x20001988

000148f4 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   148f4:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   148f6:	f7ff ffef 	bl	148d8 <_tick_get>
   148fa:	240a      	movs	r4, #10
   148fc:	fba0 2304 	umull	r2, r3, r0, r4
   14900:	fb04 3301 	mla	r3, r4, r1, r3
}
   14904:	4610      	mov	r0, r2
   14906:	4619      	mov	r1, r3
   14908:	bd10      	pop	{r4, pc}
	...

0001490c <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   1490c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14910:	4607      	mov	r7, r0
   14912:	b085      	sub	sp, #20
	__asm__ volatile(
   14914:	f04f 0320 	mov.w	r3, #32
   14918:	f3ef 8011 	mrs	r0, BASEPRI
   1491c:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   14920:	4961      	ldr	r1, [pc, #388]	; (14aa8 <_nano_sys_clock_tick_announce+0x19c>)
   14922:	e9d1 4500 	ldrd	r4, r5, [r1]
   14926:	19e2      	adds	r2, r4, r7
   14928:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   1492c:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14930:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   14934:	ae02      	add	r6, sp, #8
   14936:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   14938:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   1493a:	f04f 0320 	mov.w	r3, #32
   1493e:	f3ef 8011 	mrs	r0, BASEPRI
   14942:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   14946:	4c59      	ldr	r4, [pc, #356]	; (14aac <_nano_sys_clock_tick_announce+0x1a0>)
   14948:	4621      	mov	r1, r4
   1494a:	4602      	mov	r2, r0
   1494c:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14950:	428b      	cmp	r3, r1
   14952:	d000      	beq.n	14956 <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   14954:	b9fb      	cbnz	r3, 14996 <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14956:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   1495a:	68a0      	ldr	r0, [r4, #8]
   1495c:	f7ff fee2 	bl	14724 <_is_thread_time_slicing>
   14960:	b1b0      	cbz	r0, 14990 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   14962:	4a53      	ldr	r2, [pc, #332]	; (14ab0 <_nano_sys_clock_tick_announce+0x1a4>)
   14964:	6811      	ldr	r1, [r2, #0]
   14966:	230a      	movs	r3, #10
   14968:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   1496c:	4b51      	ldr	r3, [pc, #324]	; (14ab4 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   1496e:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   14970:	681b      	ldr	r3, [r3, #0]
   14972:	429f      	cmp	r7, r3
   14974:	db0c      	blt.n	14990 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   14976:	2300      	movs	r3, #0
   14978:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   1497a:	f04f 0320 	mov.w	r3, #32
   1497e:	f3ef 8511 	mrs	r5, BASEPRI
   14982:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   14986:	68a0      	ldr	r0, [r4, #8]
   14988:	f7ff fe7a 	bl	14680 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1498c:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   14990:	b005      	add	sp, #20
   14992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   14996:	4d48      	ldr	r5, [pc, #288]	; (14ab8 <_nano_sys_clock_tick_announce+0x1ac>)
   14998:	9501      	str	r5, [sp, #4]
   1499a:	2101      	movs	r1, #1
   1499c:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   1499e:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   149a2:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   149a4:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   149a8:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   149aa:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   149ac:	bfaa      	itet	ge
   149ae:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   149b2:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   149b6:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   149ba:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   149bc:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   149be:	691d      	ldr	r5, [r3, #16]
   149c0:	4298      	cmp	r0, r3
   149c2:	bf14      	ite	ne
   149c4:	6818      	ldrne	r0, [r3, #0]
   149c6:	2000      	moveq	r0, #0
   149c8:	b9d5      	cbnz	r5, 14a00 <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   149ca:	e893 0220 	ldmia.w	r3, {r5, r9}
   149ce:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   149d2:	681d      	ldr	r5, [r3, #0]
   149d4:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   149d8:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   149da:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   149de:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   149e0:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   149e2:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   149e4:	f8c3 c010 	str.w	ip, [r3, #16]
   149e8:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   149ec:	f04f 0320 	mov.w	r3, #32
   149f0:	f3ef 8211 	mrs	r2, BASEPRI
   149f4:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   149f8:	4603      	mov	r3, r0
   149fa:	2800      	cmp	r0, #0
   149fc:	d1d4      	bne.n	149a8 <_nano_sys_clock_tick_announce+0x9c>
   149fe:	e001      	b.n	14a04 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   14a00:	2900      	cmp	r1, #0
   14a02:	dcf1      	bgt.n	149e8 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14a04:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   14a08:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14a0a:	42b0      	cmp	r0, r6
   14a0c:	d103      	bne.n	14a16 <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   14a0e:	9a01      	ldr	r2, [sp, #4]
   14a10:	2300      	movs	r3, #0
   14a12:	6013      	str	r3, [r2, #0]
   14a14:	e7a1      	b.n	1495a <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   14a16:	2800      	cmp	r0, #0
   14a18:	d0f9      	beq.n	14a0e <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   14a1a:	9b03      	ldr	r3, [sp, #12]
   14a1c:	4298      	cmp	r0, r3
   14a1e:	d102      	bne.n	14a26 <_nano_sys_clock_tick_announce+0x11a>
   14a20:	f04f 0b00 	mov.w	fp, #0
   14a24:	e001      	b.n	14a2a <_nano_sys_clock_tick_announce+0x11e>
   14a26:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   14a2a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   14a2e:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   14a32:	e890 000c 	ldmia.w	r0, {r2, r3}
   14a36:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14a38:	6802      	ldr	r2, [r0, #0]
   14a3a:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   14a3c:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   14a3e:	f04f 0320 	mov.w	r3, #32
   14a42:	f3ef 8811 	mrs	r8, BASEPRI
   14a46:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   14a4a:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   14a4e:	b1d6      	cbz	r6, 14a86 <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   14a50:	68c3      	ldr	r3, [r0, #12]
   14a52:	b123      	cbz	r3, 14a5e <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   14a54:	4630      	mov	r0, r6
   14a56:	f7ff fd25 	bl	144a4 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   14a5a:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14a5e:	7a73      	ldrb	r3, [r6, #9]
   14a60:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   14a64:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14a68:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   14a6a:	d102      	bne.n	14a72 <_nano_sys_clock_tick_announce+0x166>
   14a6c:	6a73      	ldr	r3, [r6, #36]	; 0x24
   14a6e:	3301      	adds	r3, #1
   14a70:	d015      	beq.n	14a9e <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14a72:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   14a76:	f1bb 0f00 	cmp.w	fp, #0
   14a7a:	d0c8      	beq.n	14a0e <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   14a7c:	9b03      	ldr	r3, [sp, #12]
   14a7e:	455b      	cmp	r3, fp
   14a80:	d108      	bne.n	14a94 <_nano_sys_clock_tick_announce+0x188>
   14a82:	2300      	movs	r3, #0
   14a84:	e008      	b.n	14a98 <_nano_sys_clock_tick_announce+0x18c>
   14a86:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   14a8a:	6943      	ldr	r3, [r0, #20]
   14a8c:	2b00      	cmp	r3, #0
   14a8e:	d0f2      	beq.n	14a76 <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   14a90:	4798      	blx	r3
   14a92:	e7f0      	b.n	14a76 <_nano_sys_clock_tick_announce+0x16a>
   14a94:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   14a98:	4658      	mov	r0, fp
   14a9a:	469b      	mov	fp, r3
   14a9c:	e7c9      	b.n	14a32 <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   14a9e:	4630      	mov	r0, r6
   14aa0:	f7ff fd80 	bl	145a4 <_add_thread_to_ready_q>
   14aa4:	e7e5      	b.n	14a72 <_nano_sys_clock_tick_announce+0x166>
   14aa6:	bf00      	nop
   14aa8:	20001988 	.word	0x20001988
   14aac:	20001950 	.word	0x20001950
   14ab0:	20001984 	.word	0x20001984
   14ab4:	20001830 	.word	0x20001830
   14ab8:	20001980 	.word	0x20001980

00014abc <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   14abc:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   14abe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14ac6:	4903      	ldr	r1, [pc, #12]	; (14ad4 <k_sys_work_q_init+0x18>)
   14ac8:	4803      	ldr	r0, [pc, #12]	; (14ad8 <k_sys_work_q_init+0x1c>)
   14aca:	f000 f983 	bl	14dd4 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   14ace:	2000      	movs	r0, #0
   14ad0:	bd08      	pop	{r3, pc}
   14ad2:	bf00      	nop
   14ad4:	20003628 	.word	0x20003628
   14ad8:	20001990 	.word	0x20001990

00014adc <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14adc:	6903      	ldr	r3, [r0, #16]
   14ade:	1c5a      	adds	r2, r3, #1
   14ae0:	d011      	beq.n	14b06 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14ae2:	4a0a      	ldr	r2, [pc, #40]	; (14b0c <_abort_timeout+0x30>)
   14ae4:	6992      	ldr	r2, [r2, #24]
   14ae6:	4290      	cmp	r0, r2
   14ae8:	bf1f      	itttt	ne
   14aea:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14aec:	690a      	ldrne	r2, [r1, #16]
   14aee:	189b      	addne	r3, r3, r2
   14af0:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   14af2:	e890 000c 	ldmia.w	r0, {r2, r3}
   14af6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14af8:	6802      	ldr	r2, [r0, #0]
   14afa:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   14afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14b00:	6103      	str	r3, [r0, #16]
	return 0;
   14b02:	2000      	movs	r0, #0
   14b04:	4770      	bx	lr
		return _INACTIVE;
   14b06:	4618      	mov	r0, r3
}
   14b08:	4770      	bx	lr
   14b0a:	bf00      	nop
   14b0c:	20001950 	.word	0x20001950

00014b10 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   14b10:	7a42      	ldrb	r2, [r0, #9]
   14b12:	06d2      	lsls	r2, r2, #27
   14b14:	d104      	bne.n	14b20 <_ready_thread+0x10>
   14b16:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14b18:	3301      	adds	r3, #1
   14b1a:	d101      	bne.n	14b20 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   14b1c:	f7ff bd42 	b.w	145a4 <_add_thread_to_ready_q>
   14b20:	4770      	bx	lr
	...

00014b24 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   14b24:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   14b26:	f04f 0320 	mov.w	r3, #32
   14b2a:	f3ef 8611 	mrs	r6, BASEPRI
   14b2e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   14b32:	4a19      	ldr	r2, [pc, #100]	; (14b98 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   14b34:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   14b36:	230a      	movs	r3, #10
   14b38:	3109      	adds	r1, #9
   14b3a:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   14b3e:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14b40:	6241      	str	r1, [r0, #36]	; 0x24
   14b42:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14b44:	2300      	movs	r3, #0
   14b46:	6203      	str	r3, [r0, #32]
   14b48:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14b4c:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   14b4e:	f100 0514 	add.w	r5, r0, #20
   14b52:	d108      	bne.n	14b66 <schedule_new_thread.part.11+0x42>
	node->next = list;
   14b54:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   14b56:	6993      	ldr	r3, [r2, #24]
   14b58:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   14b5a:	6993      	ldr	r3, [r2, #24]
   14b5c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   14b5e:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14b60:	f386 8811 	msr	BASEPRI, r6
   14b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14b66:	2b00      	cmp	r3, #0
   14b68:	d0f4      	beq.n	14b54 <schedule_new_thread.part.11+0x30>
   14b6a:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   14b6e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   14b70:	691f      	ldr	r7, [r3, #16]
   14b72:	42bc      	cmp	r4, r7
   14b74:	dc08      	bgt.n	14b88 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   14b76:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14b78:	1b3c      	subs	r4, r7, r4
   14b7a:	611c      	str	r4, [r3, #16]
   14b7c:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   14b7e:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   14b80:	685a      	ldr	r2, [r3, #4]
   14b82:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   14b84:	605d      	str	r5, [r3, #4]
   14b86:	e7eb      	b.n	14b60 <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   14b88:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   14b8a:	4573      	cmp	r3, lr
   14b8c:	6244      	str	r4, [r0, #36]	; 0x24
   14b8e:	d0e1      	beq.n	14b54 <schedule_new_thread.part.11+0x30>
   14b90:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14b92:	2b00      	cmp	r3, #0
   14b94:	d1eb      	bne.n	14b6e <schedule_new_thread.part.11+0x4a>
   14b96:	e7dd      	b.n	14b54 <schedule_new_thread.part.11+0x30>
   14b98:	20001950 	.word	0x20001950

00014b9c <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   14b9c:	4770      	bx	lr
	...

00014ba0 <k_is_in_isr>:
   14ba0:	f3ef 8005 	mrs	r0, IPSR
   14ba4:	280d      	cmp	r0, #13
   14ba6:	d807      	bhi.n	14bb8 <k_is_in_isr+0x18>
   14ba8:	b138      	cbz	r0, 14bba <k_is_in_isr+0x1a>
   14baa:	4b04      	ldr	r3, [pc, #16]	; (14bbc <k_is_in_isr+0x1c>)
   14bac:	6858      	ldr	r0, [r3, #4]
   14bae:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   14bb2:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   14bb6:	4770      	bx	lr
   14bb8:	2001      	movs	r0, #1
}
   14bba:	4770      	bx	lr
   14bbc:	e000ed00 	.word	0xe000ed00

00014bc0 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   14bc0:	4b02      	ldr	r3, [pc, #8]	; (14bcc <_is_thread_essential+0xc>)
   14bc2:	689b      	ldr	r3, [r3, #8]
   14bc4:	7a18      	ldrb	r0, [r3, #8]
}
   14bc6:	f000 0001 	and.w	r0, r0, #1
   14bca:	4770      	bx	lr
   14bcc:	20001950 	.word	0x20001950

00014bd0 <_impl_k_thread_start>:
{
   14bd0:	b510      	push	{r4, lr}
	__asm__ volatile(
   14bd2:	f04f 0320 	mov.w	r3, #32
   14bd6:	f3ef 8411 	mrs	r4, BASEPRI
   14bda:	f383 8811 	msr	BASEPRI, r3
   14bde:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   14be0:	0759      	lsls	r1, r3, #29
   14be2:	d402      	bmi.n	14bea <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14be4:	f384 8811 	msr	BASEPRI, r4
   14be8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14bea:	f023 0304 	bic.w	r3, r3, #4
   14bee:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   14bf0:	f7ff ff8e 	bl	14b10 <_ready_thread>
	_reschedule(key);
   14bf4:	4620      	mov	r0, r4
}
   14bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   14bfa:	f7ff bc7b 	b.w	144f4 <_reschedule>
	...

00014c00 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   14c00:	b530      	push	{r4, r5, lr}
   14c02:	b087      	sub	sp, #28
   14c04:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14c06:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   14c08:	9504      	str	r5, [sp, #16]
   14c0a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14c0c:	9503      	str	r5, [sp, #12]
   14c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   14c10:	9502      	str	r5, [sp, #8]
   14c12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   14c14:	9501      	str	r5, [sp, #4]
   14c16:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14c18:	9500      	str	r5, [sp, #0]
   14c1a:	f7ec fe77 	bl	190c <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   14c1e:	4b04      	ldr	r3, [pc, #16]	; (14c30 <_setup_new_thread+0x30>)
   14c20:	689b      	ldr	r3, [r3, #8]
   14c22:	b913      	cbnz	r3, 14c2a <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   14c24:	6663      	str	r3, [r4, #100]	; 0x64
}
   14c26:	b007      	add	sp, #28
   14c28:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   14c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   14c2c:	e7fa      	b.n	14c24 <_setup_new_thread+0x24>
   14c2e:	bf00      	nop
   14c30:	20001950 	.word	0x20001950

00014c34 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   14c34:	b570      	push	{r4, r5, r6, lr}
   14c36:	b086      	sub	sp, #24
   14c38:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14c3a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14c3c:	9604      	str	r6, [sp, #16]
   14c3e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   14c40:	9603      	str	r6, [sp, #12]
   14c42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14c44:	9602      	str	r6, [sp, #8]
   14c46:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   14c48:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14c4a:	9601      	str	r6, [sp, #4]
   14c4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   14c4e:	9600      	str	r6, [sp, #0]
   14c50:	f7ff ffd6 	bl	14c00 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   14c54:	1c6b      	adds	r3, r5, #1
   14c56:	d003      	beq.n	14c60 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   14c58:	b92d      	cbnz	r5, 14c66 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   14c5a:	4620      	mov	r0, r4
   14c5c:	f7ff ffb8 	bl	14bd0 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   14c60:	4620      	mov	r0, r4
   14c62:	b006      	add	sp, #24
   14c64:	bd70      	pop	{r4, r5, r6, pc}
   14c66:	4629      	mov	r1, r5
   14c68:	4620      	mov	r0, r4
   14c6a:	f7ff ff5b 	bl	14b24 <schedule_new_thread.part.11>
   14c6e:	e7f7      	b.n	14c60 <_impl_k_thread_create+0x2c>

00014c70 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   14c70:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   14c72:	b510      	push	{r4, lr}
   14c74:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   14c76:	b103      	cbz	r3, 14c7a <_k_thread_single_abort+0xa>
		thread->fn_abort();
   14c78:	4798      	blx	r3
   14c7a:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   14c7c:	06da      	lsls	r2, r3, #27
   14c7e:	d106      	bne.n	14c8e <_k_thread_single_abort+0x1e>
   14c80:	6a62      	ldr	r2, [r4, #36]	; 0x24
   14c82:	3201      	adds	r2, #1
   14c84:	d103      	bne.n	14c8e <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   14c86:	4620      	mov	r0, r4
   14c88:	f7ff fbe4 	bl	14454 <_remove_thread_from_ready_q>
   14c8c:	e00b      	b.n	14ca6 <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   14c8e:	079b      	lsls	r3, r3, #30
   14c90:	d502      	bpl.n	14c98 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   14c92:	4620      	mov	r0, r4
   14c94:	f7ff fc06 	bl	144a4 <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   14c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14c9a:	3301      	adds	r3, #1
   14c9c:	d003      	beq.n	14ca6 <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   14c9e:	f104 0014 	add.w	r0, r4, #20
   14ca2:	f7ff ff1b 	bl	14adc <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   14ca6:	7a63      	ldrb	r3, [r4, #9]
   14ca8:	f043 0308 	orr.w	r3, r3, #8
   14cac:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   14cae:	bd10      	pop	{r4, pc}

00014cb0 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   14cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   14cb2:	4f21      	ldr	r7, [pc, #132]	; (14d38 <_init_static_threads+0x88>)
   14cb4:	4d21      	ldr	r5, [pc, #132]	; (14d3c <_init_static_threads+0x8c>)
{
   14cb6:	b087      	sub	sp, #28
   14cb8:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   14cba:	42bd      	cmp	r5, r7
   14cbc:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   14cc0:	d314      	bcc.n	14cec <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   14cc2:	4b1f      	ldr	r3, [pc, #124]	; (14d40 <_init_static_threads+0x90>)
   14cc4:	689a      	ldr	r2, [r3, #8]
   14cc6:	7ad3      	ldrb	r3, [r2, #11]
   14cc8:	3b01      	subs	r3, #1
   14cca:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   14ccc:	f04f 0320 	mov.w	r3, #32
   14cd0:	f3ef 8511 	mrs	r5, BASEPRI
   14cd4:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   14cd8:	4c18      	ldr	r4, [pc, #96]	; (14d3c <_init_static_threads+0x8c>)
   14cda:	42b4      	cmp	r4, r6
   14cdc:	d31f      	bcc.n	14d1e <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14cde:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   14ce2:	b007      	add	sp, #28
   14ce4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   14ce8:	f7ff bc22 	b.w	14530 <k_sched_unlock>
		_setup_new_thread(
   14cec:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   14cf0:	9304      	str	r3, [sp, #16]
   14cf2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   14cf6:	9303      	str	r3, [sp, #12]
   14cf8:	f854 3c14 	ldr.w	r3, [r4, #-20]
   14cfc:	9302      	str	r3, [sp, #8]
   14cfe:	f854 3c18 	ldr.w	r3, [r4, #-24]
   14d02:	9301      	str	r3, [sp, #4]
   14d04:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   14d08:	9300      	str	r3, [sp, #0]
   14d0a:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   14d0e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   14d10:	f7ff ff76 	bl	14c00 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   14d14:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   14d18:	651d      	str	r5, [r3, #80]	; 0x50
   14d1a:	4625      	mov	r5, r4
   14d1c:	e7cd      	b.n	14cba <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   14d1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14d20:	1c4b      	adds	r3, r1, #1
   14d22:	d003      	beq.n	14d2c <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   14d24:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   14d26:	b919      	cbnz	r1, 14d30 <_init_static_threads+0x80>
   14d28:	f7ff ff52 	bl	14bd0 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   14d2c:	342c      	adds	r4, #44	; 0x2c
   14d2e:	e7d4      	b.n	14cda <_init_static_threads+0x2a>
   14d30:	f7ff fef8 	bl	14b24 <schedule_new_thread.part.11>
   14d34:	e7fa      	b.n	14d2c <_init_static_threads+0x7c>
   14d36:	bf00      	nop
   14d38:	20003f0c 	.word	0x20003f0c
   14d3c:	20003f0c 	.word	0x20003f0c
   14d40:	20001950 	.word	0x20001950

00014d44 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   14d44:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   14d46:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   14d48:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   14d4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   14d4e:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   14d50:	72c3      	strb	r3, [r0, #11]
   14d52:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   14d54:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   14d56:	61c3      	str	r3, [r0, #28]
	t->func = func;
   14d58:	6283      	str	r3, [r0, #40]	; 0x28
   14d5a:	4770      	bx	lr

00014d5c <k_work_submit_to_queue>:
{
   14d5c:	b500      	push	{lr}
   14d5e:	f101 0308 	add.w	r3, r1, #8
   14d62:	f3bf 8f5b 	dmb	ish
   14d66:	e853 2f00 	ldrex	r2, [r3]
   14d6a:	f042 0e01 	orr.w	lr, r2, #1
   14d6e:	e843 ec00 	strex	ip, lr, [r3]
   14d72:	f1bc 0f00 	cmp.w	ip, #0
   14d76:	d1f6      	bne.n	14d66 <k_work_submit_to_queue+0xa>
   14d78:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   14d7c:	07d3      	lsls	r3, r2, #31
   14d7e:	d403      	bmi.n	14d88 <k_work_submit_to_queue+0x2c>
}
   14d80:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   14d84:	f7ff ba94 	b.w	142b0 <k_queue_append>
   14d88:	f85d fb04 	ldr.w	pc, [sp], #4

00014d8c <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   14d8c:	f1a0 010c 	sub.w	r1, r0, #12
   14d90:	6980      	ldr	r0, [r0, #24]
   14d92:	f7ff bfe3 	b.w	14d5c <k_work_submit_to_queue>

00014d96 <work_q_main>:
{
   14d96:	b510      	push	{r4, lr}
   14d98:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   14d9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14d9e:	4620      	mov	r0, r4
   14da0:	f7ff faaa 	bl	142f8 <_impl_k_queue_get>
		if (!work) {
   14da4:	4603      	mov	r3, r0
   14da6:	2800      	cmp	r0, #0
   14da8:	d0f7      	beq.n	14d9a <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14daa:	3308      	adds	r3, #8
		handler = work->handler;
   14dac:	6842      	ldr	r2, [r0, #4]
   14dae:	f3bf 8f5b 	dmb	ish
   14db2:	e853 1f00 	ldrex	r1, [r3]
   14db6:	f021 0e01 	bic.w	lr, r1, #1
   14dba:	e843 ec00 	strex	ip, lr, [r3]
   14dbe:	f1bc 0f00 	cmp.w	ip, #0
   14dc2:	d1f6      	bne.n	14db2 <work_q_main+0x1c>
   14dc4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   14dc8:	07cb      	lsls	r3, r1, #31
   14dca:	d500      	bpl.n	14dce <work_q_main+0x38>
			handler(work);
   14dcc:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   14dce:	f7ff fcf5 	bl	147bc <_impl_k_yield>
   14dd2:	e7e2      	b.n	14d9a <work_q_main+0x4>

00014dd4 <k_work_q_start>:
{
   14dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14dd6:	b087      	sub	sp, #28
   14dd8:	4604      	mov	r4, r0
   14dda:	461f      	mov	r7, r3
   14ddc:	460d      	mov	r5, r1
   14dde:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   14de0:	f7ff fa5e 	bl	142a0 <_impl_k_queue_init>

   14de4:	2000      	movs	r0, #0
   14de6:	9005      	str	r0, [sp, #20]
   14de8:	9004      	str	r0, [sp, #16]
   14dea:	9002      	str	r0, [sp, #8]
   14dec:	9001      	str	r0, [sp, #4]
   14dee:	9703      	str	r7, [sp, #12]
   14df0:	9400      	str	r4, [sp, #0]
   14df2:	4b04      	ldr	r3, [pc, #16]	; (14e04 <k_work_q_start+0x30>)
   14df4:	4632      	mov	r2, r6
   14df6:	4629      	mov	r1, r5
   14df8:	f104 0010 	add.w	r0, r4, #16
   14dfc:	f7ff ff1a 	bl	14c34 <_impl_k_thread_create>
}
   14e00:	b007      	add	sp, #28
   14e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14e04:	00014d97 	.word	0x00014d97

00014e08 <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   14e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   14e0c:	2300      	movs	r3, #0
   14e0e:	61c2      	str	r2, [r0, #28]
	t->func = func;
   14e10:	4a04      	ldr	r2, [pc, #16]	; (14e24 <k_delayed_work_init+0x1c>)
   14e12:	6003      	str	r3, [r0, #0]
   14e14:	6041      	str	r1, [r0, #4]
   14e16:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   14e18:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   14e1a:	6143      	str	r3, [r0, #20]
	t->func = func;
   14e1c:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   14e1e:	6243      	str	r3, [r0, #36]	; 0x24
   14e20:	4770      	bx	lr
   14e22:	bf00      	nop
   14e24:	00014d8d 	.word	0x00014d8d

00014e28 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   14e28:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   14e2a:	f04f 0320 	mov.w	r3, #32
   14e2e:	f3ef 8411 	mrs	r4, BASEPRI
   14e32:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   14e36:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14e38:	b923      	cbnz	r3, 14e44 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14e3a:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   14e3e:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   14e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14e44:	f3bf 8f5b 	dmb	ish
   14e48:	6883      	ldr	r3, [r0, #8]
   14e4a:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   14e4e:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   14e50:	f100 0508 	add.w	r5, r0, #8
   14e54:	d533      	bpl.n	14ebe <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   14e56:	6a42      	ldr	r2, [r0, #36]	; 0x24
   14e58:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   14e5a:	2100      	movs	r1, #0
   14e5c:	2b00      	cmp	r3, #0
   14e5e:	d0ec      	beq.n	14e3a <k_delayed_work_cancel+0x12>
   14e60:	4298      	cmp	r0, r3
   14e62:	d127      	bne.n	14eb4 <k_delayed_work_cancel+0x8c>
   14e64:	6803      	ldr	r3, [r0, #0]
   14e66:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14e68:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   14e6c:	b9c9      	cbnz	r1, 14ea2 <k_delayed_work_cancel+0x7a>
   14e6e:	42b8      	cmp	r0, r7
	list->head = node;
   14e70:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   14e72:	d100      	bne.n	14e76 <k_delayed_work_cancel+0x4e>
	list->tail = node;
   14e74:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14e76:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14e78:	f003 0303 	and.w	r3, r3, #3
   14e7c:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   14e7e:	2300      	movs	r3, #0
   14e80:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14e82:	f3bf 8f5b 	dmb	ish
   14e86:	e855 2f00 	ldrex	r2, [r5]
   14e8a:	f022 0201 	bic.w	r2, r2, #1
   14e8e:	e845 2100 	strex	r1, r2, [r5]
   14e92:	2900      	cmp	r1, #0
   14e94:	d1f7      	bne.n	14e86 <k_delayed_work_cancel+0x5e>
   14e96:	f3bf 8f5b 	dmb	ish
   14e9a:	f384 8811 	msr	BASEPRI, r4
	return 0;
   14e9e:	4618      	mov	r0, r3
   14ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14ea2:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14ea4:	f006 0603 	and.w	r6, r6, #3
   14ea8:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   14eaa:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   14eac:	600b      	str	r3, [r1, #0]
	list->tail = node;
   14eae:	bf08      	it	eq
   14eb0:	6051      	streq	r1, [r2, #4]
   14eb2:	e7e0      	b.n	14e76 <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14eb4:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   14eb6:	4619      	mov	r1, r3
   14eb8:	f026 0303 	bic.w	r3, r6, #3
   14ebc:	e7ce      	b.n	14e5c <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14ebe:	69c1      	ldr	r1, [r0, #28]
   14ec0:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   14ec2:	f100 020c 	add.w	r2, r0, #12
   14ec6:	d0da      	beq.n	14e7e <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14ec8:	4b08      	ldr	r3, [pc, #32]	; (14eec <k_delayed_work_cancel+0xc4>)
   14eca:	699b      	ldr	r3, [r3, #24]
   14ecc:	429a      	cmp	r2, r3
   14ece:	bf1f      	itttt	ne
   14ed0:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14ed2:	6913      	ldrne	r3, [r2, #16]
   14ed4:	185b      	addne	r3, r3, r1
   14ed6:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   14ed8:	6903      	ldr	r3, [r0, #16]
   14eda:	68c2      	ldr	r2, [r0, #12]
   14edc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14ede:	68c2      	ldr	r2, [r0, #12]
   14ee0:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   14ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14ee6:	61c3      	str	r3, [r0, #28]
   14ee8:	e7c9      	b.n	14e7e <k_delayed_work_cancel+0x56>
   14eea:	bf00      	nop
   14eec:	20001950 	.word	0x20001950

00014ef0 <k_delayed_work_submit_to_queue>:
{
   14ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ef2:	4607      	mov	r7, r0
   14ef4:	460c      	mov	r4, r1
   14ef6:	4615      	mov	r5, r2
	__asm__ volatile(
   14ef8:	f04f 0320 	mov.w	r3, #32
   14efc:	f3ef 8611 	mrs	r6, BASEPRI
   14f00:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   14f04:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   14f06:	b123      	cbz	r3, 14f12 <k_delayed_work_submit_to_queue+0x22>
   14f08:	4283      	cmp	r3, r0
   14f0a:	d00b      	beq.n	14f24 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   14f0c:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   14f10:	e00d      	b.n	14f2e <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   14f12:	b138      	cbz	r0, 14f24 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   14f14:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   14f16:	b96d      	cbnz	r5, 14f34 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   14f18:	4621      	mov	r1, r4
   14f1a:	4638      	mov	r0, r7
   14f1c:	f7ff ff1e 	bl	14d5c <k_work_submit_to_queue>
	err = 0;
   14f20:	2000      	movs	r0, #0
   14f22:	e004      	b.n	14f2e <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   14f24:	4620      	mov	r0, r4
   14f26:	f7ff ff7f 	bl	14e28 <k_delayed_work_cancel>
		if (err < 0) {
   14f2a:	2800      	cmp	r0, #0
   14f2c:	daf2      	bge.n	14f14 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14f2e:	f386 8811 	msr	BASEPRI, r6
}
   14f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   14f34:	220a      	movs	r2, #10
   14f36:	3509      	adds	r5, #9
   14f38:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   14f3c:	4a16      	ldr	r2, [pc, #88]	; (14f98 <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   14f3e:	2300      	movs	r3, #0
   14f40:	4611      	mov	r1, r2
   14f42:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14f44:	61a3      	str	r3, [r4, #24]
   14f46:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   14f4a:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14f4c:	428b      	cmp	r3, r1
   14f4e:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14f52:	61e5      	str	r5, [r4, #28]
   14f54:	d106      	bne.n	14f64 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   14f56:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   14f58:	6993      	ldr	r3, [r2, #24]
   14f5a:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   14f5c:	6993      	ldr	r3, [r2, #24]
   14f5e:	601f      	str	r7, [r3, #0]
	list->tail = node;
   14f60:	6197      	str	r7, [r2, #24]
   14f62:	e7dd      	b.n	14f20 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14f64:	2b00      	cmp	r3, #0
   14f66:	d0f6      	beq.n	14f56 <k_delayed_work_submit_to_queue+0x66>
   14f68:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   14f6c:	69e0      	ldr	r0, [r4, #28]
   14f6e:	691d      	ldr	r5, [r3, #16]
   14f70:	42a8      	cmp	r0, r5
   14f72:	dc08      	bgt.n	14f86 <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   14f74:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14f76:	1a28      	subs	r0, r5, r0
   14f78:	6118      	str	r0, [r3, #16]
   14f7a:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   14f7c:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   14f7e:	685a      	ldr	r2, [r3, #4]
   14f80:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   14f82:	605f      	str	r7, [r3, #4]
   14f84:	e7cc      	b.n	14f20 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   14f86:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   14f88:	4573      	cmp	r3, lr
   14f8a:	61e0      	str	r0, [r4, #28]
   14f8c:	d0e3      	beq.n	14f56 <k_delayed_work_submit_to_queue+0x66>
   14f8e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14f90:	2b00      	cmp	r3, #0
   14f92:	d1eb      	bne.n	14f6c <k_delayed_work_submit_to_queue+0x7c>
   14f94:	e7df      	b.n	14f56 <k_delayed_work_submit_to_queue+0x66>
   14f96:	bf00      	nop
   14f98:	20001950 	.word	0x20001950

00014f9c <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   14f9c:	2314      	movs	r3, #20
   14f9e:	b530      	push	{r4, r5, lr}
   14fa0:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   14fa4:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   14fa6:	2900      	cmp	r1, #0
   14fa8:	da00      	bge.n	14fac <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   14faa:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   14fac:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   14fae:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   14fb0:	f003 030f 	and.w	r3, r3, #15
   14fb4:	2b02      	cmp	r3, #2
   14fb6:	d003      	beq.n	14fc0 <clear_event_registrations+0x24>
   14fb8:	2b04      	cmp	r3, #4
   14fba:	d001      	beq.n	14fc0 <clear_event_registrations+0x24>
   14fbc:	2b01      	cmp	r3, #1
   14fbe:	d104      	bne.n	14fca <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   14fc0:	6843      	ldr	r3, [r0, #4]
   14fc2:	6805      	ldr	r5, [r0, #0]
   14fc4:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   14fc6:	6805      	ldr	r5, [r0, #0]
   14fc8:	606b      	str	r3, [r5, #4]
   14fca:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   14fce:	f04f 0320 	mov.w	r3, #32
   14fd2:	f3ef 8211 	mrs	r2, BASEPRI
   14fd6:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   14fda:	3901      	subs	r1, #1
   14fdc:	3814      	subs	r0, #20
   14fde:	e7e2      	b.n	14fa6 <clear_event_registrations+0xa>

00014fe0 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   14fe0:	6883      	ldr	r3, [r0, #8]
{
   14fe2:	b570      	push	{r4, r5, r6, lr}
   14fe4:	4605      	mov	r5, r0
   14fe6:	460e      	mov	r6, r1
	if (!event->poller) {
   14fe8:	b1d3      	cbz	r3, 15020 <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   14fea:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   14fec:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   14fee:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   14ff0:	7a63      	ldrb	r3, [r4, #9]
   14ff2:	079a      	lsls	r2, r3, #30
   14ff4:	d514      	bpl.n	15020 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   14ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14ff8:	3302      	adds	r3, #2
   14ffa:	d01a      	beq.n	15032 <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   14ffc:	4620      	mov	r0, r4
   14ffe:	f7ff fa6e 	bl	144de <_unpend_thread>
	_set_thread_return_value(thread,
   15002:	2e00      	cmp	r6, #0
   15004:	bf0c      	ite	eq
   15006:	f06f 0303 	mvneq.w	r3, #3
   1500a:	2300      	movne	r3, #0
   1500c:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   1500e:	7a63      	ldrb	r3, [r4, #9]
   15010:	06db      	lsls	r3, r3, #27
   15012:	d105      	bne.n	15020 <signal_poll_event+0x40>
   15014:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15016:	3301      	adds	r3, #1
   15018:	d102      	bne.n	15020 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   1501a:	4620      	mov	r0, r4
   1501c:	f7ff fac2 	bl	145a4 <_add_thread_to_ready_q>
	event->state |= state;
   15020:	7b6b      	ldrb	r3, [r5, #13]
   15022:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   15026:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   1502a:	2000      	movs	r0, #0
	event->state |= state;
   1502c:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   1502e:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   15030:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   15032:	f06f 000a 	mvn.w	r0, #10
}
   15036:	bd70      	pop	{r4, r5, r6, pc}

00015038 <add_event>:
{
   15038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1503a:	6803      	ldr	r3, [r0, #0]
   1503c:	4298      	cmp	r0, r3
   1503e:	4604      	mov	r4, r0
   15040:	460e      	mov	r6, r1
   15042:	4617      	mov	r7, r2
   15044:	d106      	bne.n	15054 <add_event+0x1c>
	node->next = list;
   15046:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   15048:	6863      	ldr	r3, [r4, #4]
   1504a:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   1504c:	6863      	ldr	r3, [r4, #4]
   1504e:	601e      	str	r6, [r3, #0]
	list->tail = node;
   15050:	6066      	str	r6, [r4, #4]
   15052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   15054:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   15056:	2b00      	cmp	r3, #0
   15058:	d0f5      	beq.n	15046 <add_event+0xe>
   1505a:	689b      	ldr	r3, [r3, #8]
   1505c:	6811      	ldr	r1, [r2, #0]
   1505e:	6818      	ldr	r0, [r3, #0]
   15060:	f7ff f9ee 	bl	14440 <_is_t1_higher_prio_than_t2>
   15064:	2800      	cmp	r0, #0
   15066:	d1ee      	bne.n	15046 <add_event+0xe>
	return list->head == list;
   15068:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1506a:	42ac      	cmp	r4, r5
   1506c:	d0eb      	beq.n	15046 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1506e:	2d00      	cmp	r5, #0
   15070:	d0e9      	beq.n	15046 <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   15072:	68ab      	ldr	r3, [r5, #8]
   15074:	6838      	ldr	r0, [r7, #0]
   15076:	6819      	ldr	r1, [r3, #0]
   15078:	f7ff f9e2 	bl	14440 <_is_t1_higher_prio_than_t2>
   1507c:	b130      	cbz	r0, 1508c <add_event+0x54>
		node->prev = insert_point->prev;
   1507e:	686b      	ldr	r3, [r5, #4]
   15080:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   15082:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   15084:	686b      	ldr	r3, [r5, #4]
   15086:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   15088:	606e      	str	r6, [r5, #4]
   1508a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1508c:	6863      	ldr	r3, [r4, #4]
   1508e:	429d      	cmp	r5, r3
   15090:	d0d9      	beq.n	15046 <add_event+0xe>
   15092:	682d      	ldr	r5, [r5, #0]
   15094:	e7eb      	b.n	1506e <add_event+0x36>

00015096 <k_poll_event_init>:
{
   15096:	b530      	push	{r4, r5, lr}
	event->type = type;
   15098:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   1509a:	6103      	str	r3, [r0, #16]
	event->type = type;
   1509c:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   150a0:	7b81      	ldrb	r1, [r0, #14]
   150a2:	f362 0100 	bfi	r1, r2, #0, #1
   150a6:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   150a8:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   150aa:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   150ac:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   150b0:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   150b4:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   150b6:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   150b8:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   150ba:	bd30      	pop	{r4, r5, pc}

000150bc <_impl_k_poll>:
{
   150bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   150c0:	4b3f      	ldr	r3, [pc, #252]	; (151c0 <_impl_k_poll+0x104>)
{
   150c2:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   150c4:	689b      	ldr	r3, [r3, #8]
   150c6:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   150c8:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   150ca:	2301      	movs	r3, #1
{
   150cc:	4607      	mov	r7, r0
   150ce:	468a      	mov	sl, r1
   150d0:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   150d2:	9301      	str	r3, [sp, #4]
   150d4:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   150d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   150da:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   150dc:	4556      	cmp	r6, sl
   150de:	db10      	blt.n	15102 <_impl_k_poll+0x46>
   150e0:	f04f 0320 	mov.w	r3, #32
   150e4:	f3ef 8611 	mrs	r6, BASEPRI
   150e8:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   150ec:	9c01      	ldr	r4, [sp, #4]
   150ee:	2c00      	cmp	r4, #0
   150f0:	d13f      	bne.n	15172 <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   150f2:	4632      	mov	r2, r6
   150f4:	4629      	mov	r1, r5
   150f6:	4638      	mov	r0, r7
   150f8:	f7ff ff50 	bl	14f9c <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   150fc:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   15100:	e040      	b.n	15184 <_impl_k_poll+0xc8>
	__asm__ volatile(
   15102:	f04f 0320 	mov.w	r3, #32
   15106:	f3ef 8b11 	mrs	fp, BASEPRI
   1510a:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   1510e:	7b62      	ldrb	r2, [r4, #13]
   15110:	f002 030f 	and.w	r3, r2, #15
   15114:	2b02      	cmp	r3, #2
   15116:	d003      	beq.n	15120 <_impl_k_poll+0x64>
   15118:	2b04      	cmp	r3, #4
   1511a:	d004      	beq.n	15126 <_impl_k_poll+0x6a>
   1511c:	2b01      	cmp	r3, #1
   1511e:	d106      	bne.n	1512e <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   15120:	6921      	ldr	r1, [r4, #16]
   15122:	6889      	ldr	r1, [r1, #8]
   15124:	e001      	b.n	1512a <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   15126:	6921      	ldr	r1, [r4, #16]
   15128:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   1512a:	2900      	cmp	r1, #0
   1512c:	d13d      	bne.n	151aa <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   1512e:	f1b8 0f00 	cmp.w	r8, #0
   15132:	d014      	beq.n	1515e <_impl_k_poll+0xa2>
   15134:	9a01      	ldr	r2, [sp, #4]
   15136:	b192      	cbz	r2, 1515e <_impl_k_poll+0xa2>
	switch (event->type) {
   15138:	2b02      	cmp	r3, #2
   1513a:	d007      	beq.n	1514c <_impl_k_poll+0x90>
   1513c:	2b04      	cmp	r3, #4
   1513e:	d013      	beq.n	15168 <_impl_k_poll+0xac>
   15140:	2b01      	cmp	r3, #1
   15142:	d109      	bne.n	15158 <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   15144:	466a      	mov	r2, sp
   15146:	4621      	mov	r1, r4
   15148:	6920      	ldr	r0, [r4, #16]
   1514a:	e003      	b.n	15154 <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   1514c:	6920      	ldr	r0, [r4, #16]
   1514e:	466a      	mov	r2, sp
   15150:	4621      	mov	r1, r4
   15152:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   15154:	f7ff ff70 	bl	15038 <add_event>
	event->poller = poller;
   15158:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   1515c:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1515e:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   15162:	3601      	adds	r6, #1
   15164:	3414      	adds	r4, #20
   15166:	e7b9      	b.n	150dc <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   15168:	6920      	ldr	r0, [r4, #16]
   1516a:	466a      	mov	r2, sp
   1516c:	4621      	mov	r1, r4
   1516e:	3008      	adds	r0, #8
   15170:	e7f0      	b.n	15154 <_impl_k_poll+0x98>
	poller.is_polling = 0;
   15172:	2300      	movs	r3, #0
   15174:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   15176:	f1b8 0f00 	cmp.w	r8, #0
   1517a:	d107      	bne.n	1518c <_impl_k_poll+0xd0>
   1517c:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   15180:	f06f 040a 	mvn.w	r4, #10
}
   15184:	4620      	mov	r0, r4
   15186:	b005      	add	sp, #20
   15188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   1518c:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   1518e:	4642      	mov	r2, r8
   15190:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   15192:	9102      	str	r1, [sp, #8]
   15194:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   15196:	f7ff fab3 	bl	14700 <_pend_current_thread>
   1519a:	4604      	mov	r4, r0
	__asm__ volatile(
   1519c:	f04f 0320 	mov.w	r3, #32
   151a0:	f3ef 8611 	mrs	r6, BASEPRI
   151a4:	f383 8811 	msr	BASEPRI, r3
   151a8:	e7a3      	b.n	150f2 <_impl_k_poll+0x36>
	event->state |= state;
   151aa:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   151ae:	f363 1207 	bfi	r2, r3, #4, #4
   151b2:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   151b4:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   151b8:	f8cd 9004 	str.w	r9, [sp, #4]
   151bc:	e7cf      	b.n	1515e <_impl_k_poll+0xa2>
   151be:	bf00      	nop
   151c0:	20001950 	.word	0x20001950

000151c4 <_handle_obj_poll_events>:
	return list->head == list;
   151c4:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   151c6:	4298      	cmp	r0, r3
   151c8:	d007      	beq.n	151da <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   151ca:	e893 0005 	ldmia.w	r3, {r0, r2}
   151ce:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   151d0:	6818      	ldr	r0, [r3, #0]
   151d2:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   151d4:	4618      	mov	r0, r3
   151d6:	f7ff bf03 	b.w	14fe0 <signal_poll_event>
   151da:	4770      	bx	lr

000151dc <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   151dc:	b538      	push	{r3, r4, r5, lr}
   151de:	f04f 0320 	mov.w	r3, #32
   151e2:	f3ef 8511 	mrs	r5, BASEPRI
   151e6:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   151ea:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   151ec:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   151ee:	4298      	cmp	r0, r3
	signal->signaled = 1;
   151f0:	f04f 0101 	mov.w	r1, #1
   151f4:	6081      	str	r1, [r0, #8]
   151f6:	d00d      	beq.n	15214 <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   151f8:	e893 0005 	ldmia.w	r3, {r0, r2}
   151fc:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   151fe:	6818      	ldr	r0, [r3, #0]
   15200:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   15202:	4618      	mov	r0, r3
   15204:	f7ff feec 	bl	14fe0 <signal_poll_event>
   15208:	4604      	mov	r4, r0

	_reschedule(key);
   1520a:	4628      	mov	r0, r5
   1520c:	f7ff f972 	bl	144f4 <_reschedule>
	return rc;
}
   15210:	4620      	mov	r0, r4
   15212:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15214:	f385 8811 	msr	BASEPRI, r5
		return 0;
   15218:	2400      	movs	r4, #0
   1521a:	e7f9      	b.n	15210 <_impl_k_poll_signal+0x34>

0001521c <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   1521c:	4770      	bx	lr
