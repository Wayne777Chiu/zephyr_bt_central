
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002d58 	.word	0x20002d58

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001b01 	.word	0x00001b01
       8:	00001b55 	.word	0x00001b55
       c:	00001985 	.word	0x00001985
      10:	00001985 	.word	0x00001985
      14:	00001985 	.word	0x00001985
      18:	00001985 	.word	0x00001985
      1c:	00001985 	.word	0x00001985
      20:	00001985 	.word	0x00001985
      24:	00001985 	.word	0x00001985
      28:	00001985 	.word	0x00001985
      2c:	00001589 	.word	0x00001589
      30:	00001985 	.word	0x00001985
      34:	00001985 	.word	0x00001985
      38:	00001545 	.word	0x00001545
      3c:	00001985 	.word	0x00001985

00000040 <_irq_vector_table>:
      40:	00001ac5 000118a3 00001ac5 00001ac5     ................
      50:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      60:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      70:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      80:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      90:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      a0:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      b0:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      c0:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      d0:	00001ac5 00001ac5 00001ac5              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001279 00000000 000018f9     ....y...........
      ec:	00000000 000018f9 00000000 000018f9     ................
      fc:	00000000 000018f9 00000000 000018f9     ................
     10c:	00000000 00013fa1 00000000 000018f9     .....?..........
     11c:	00000000 000018f9 00000000 000018f9     ................
     12c:	00000000 000018f9 00000000 00011869     ............i...
     13c:	00000000 000018f9 20003f94 000142a5     .........?. .B..
     14c:	00000000 000018f9 00000000 000018f9     ................
     15c:	00000000 000018f9 00000000 000013a1     ................
     16c:	00000000 000018f9 00000000 000018f9     ................
     17c:	00000000 000018f9 00000000 000018f9     ................
     18c:	00000000 000018f9 00000000 000018f9     ................
     19c:	00000000 0001189d 00000000 000018f9     ................
     1ac:	00000000 000018f9 00000000 000018f9     ................
     1bc:	00000000 000018f9 00000000 000018f9     ................
     1cc:	00000000 000018f9 00000000 000018f9     ................
     1dc:	00000000 000018f9 00000000 000018f9     ................
     1ec:	00000000 000018f9 00000000 000018f9     ................
     1fc:	00000000 000018f9 00000000 000018f9     ................
     20c:	00000000 000018f9                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb26 	bl	1bb8 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	00015955 	.word	0x00015955
     5b0:	0001597e 	.word	0x0001597e
     5b4:	0001595c 	.word	0x0001595c
     5b8:	00015963 	.word	0x00015963
     5bc:	0001596d 	.word	0x0001596d
     5c0:	00015977 	.word	0x00015977

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f004 f826 	bl	461c <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f004 f8bf 	bl	477c <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	000159a1 	.word	0x000159a1
     604:	20000000 	.word	0x20000000
     608:	000159bf 	.word	0x000159bf

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f003 ffff 	bl	461c <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f003 fe34 	bl	429c <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 fa14 	bl	3a74 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	000159ea 	.word	0x000159ea
     664:	000158f8 	.word	0x000158f8
     668:	00000671 	.word	0x00000671
     66c:	00015a08 	.word	0x00015a08

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 fa3f 	bl	3b18 <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f003 ffb9 	bl	4620 <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	000159ce 	.word	0x000159ce
     6bc:	000158fe 	.word	0x000158fe

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 f966 	bl	3994 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f003 fabc 	bl	3c5c <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 f9be 	bl	3a74 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	00015a2b 	.word	0x00015a2b
     70c:	00015a4b 	.word	0x00015a4b
     710:	20003a98 	.word	0x20003a98
     714:	00015906 	.word	0x00015906
     718:	00000671 	.word	0x00000671
     71c:	00015a08 	.word	0x00015a08
     720:	00015a62 	.word	0x00015a62

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003acc 	.word	0x20003acc
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f014 fa88 	bl	14db8 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8e4 	bl	1a74 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003ad0 	.word	0x20003ad0

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003ad0 	.word	0x20003ad0

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr

00000fe2 <syslog_hook_default>:
 */

#include <logging/sys_log.h>

void syslog_hook_default(const char *fmt, ...)
{
     fe2:	b40f      	push	{r0, r1, r2, r3}
	(void)(fmt);  /* Prevent warning about unused argument */
}
     fe4:	b004      	add	sp, #16
     fe6:	4770      	bx	lr

00000fe8 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe8:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fea:	4c11      	ldr	r4, [pc, #68]	; (1030 <sys_rand32_get+0x48>)
     fec:	f3bf 8f5b 	dmb	ish
     ff0:	6820      	ldr	r0, [r4, #0]
     ff2:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff6:	b960      	cbnz	r0, 1012 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff8:	480e      	ldr	r0, [pc, #56]	; (1034 <sys_rand32_get+0x4c>)
     ffa:	f013 f9c1 	bl	14380 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffe:	f3bf 8f5b 	dmb	ish
    1002:	e854 3f00 	ldrex	r3, [r4]
    1006:	e844 0200 	strex	r2, r0, [r4]
    100a:	2a00      	cmp	r2, #0
    100c:	d1f9      	bne.n	1002 <sys_rand32_get+0x1a>
    100e:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1012:	6843      	ldr	r3, [r0, #4]
    1014:	2204      	movs	r2, #4
    1016:	681b      	ldr	r3, [r3, #0]
    1018:	eb0d 0102 	add.w	r1, sp, r2
    101c:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101e:	2800      	cmp	r0, #0
    1020:	da02      	bge.n	1028 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1022:	f000 fa37 	bl	1494 <_timer_cycle_get_32>
    1026:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1028:	9801      	ldr	r0, [sp, #4]
    102a:	b002      	add	sp, #8
    102c:	bd10      	pop	{r4, pc}
    102e:	bf00      	nop
    1030:	20000004 	.word	0x20000004
    1034:	00015a90 	.word	0x00015a90

00001038 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1038:	280a      	cmp	r0, #10
{
    103a:	b538      	push	{r3, r4, r5, lr}
    103c:	4604      	mov	r4, r0
    103e:	4d07      	ldr	r5, [pc, #28]	; (105c <console_out+0x24>)
	if ('\n' == c) {
    1040:	d104      	bne.n	104c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    1042:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1044:	6843      	ldr	r3, [r0, #4]
    1046:	210d      	movs	r1, #13
    1048:	685b      	ldr	r3, [r3, #4]
    104a:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    104c:	6828      	ldr	r0, [r5, #0]
    104e:	6843      	ldr	r3, [r0, #4]
    1050:	b2e1      	uxtb	r1, r4
    1052:	685b      	ldr	r3, [r3, #4]
    1054:	4798      	blx	r3

	return c;
}
    1056:	4620      	mov	r0, r4
    1058:	bd38      	pop	{r3, r4, r5, pc}
    105a:	bf00      	nop
    105c:	20000008 	.word	0x20000008

00001060 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1060:	4801      	ldr	r0, [pc, #4]	; (1068 <uart_console_hook_install+0x8>)
    1062:	f7ff be4d 	b.w	d00 <__printk_hook_install>
    1066:	bf00      	nop
    1068:	00001039 	.word	0x00001039

0000106c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    106c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    106e:	4804      	ldr	r0, [pc, #16]	; (1080 <uart_console_init+0x14>)
    1070:	f013 f986 	bl	14380 <device_get_binding>
    1074:	4b03      	ldr	r3, [pc, #12]	; (1084 <uart_console_init+0x18>)
    1076:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1078:	f7ff fff2 	bl	1060 <uart_console_hook_install>

	return 0;
}
    107c:	2000      	movs	r0, #0
    107e:	bd08      	pop	{r3, pc}
    1080:	00015a9a 	.word	0x00015a9a
    1084:	20000008 	.word	0x20000008

00001088 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1088:	b510      	push	{r4, lr}
	__asm__ volatile(
    108a:	f04f 0320 	mov.w	r3, #32
    108e:	f3ef 8211 	mrs	r2, BASEPRI
    1092:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1096:	4c11      	ldr	r4, [pc, #68]	; (10dc <_m16src_stop+0x54>)
    1098:	7823      	ldrb	r3, [r4, #0]
    109a:	b923      	cbnz	r3, 10a6 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    109c:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    10a0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10a4:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10a6:	3b01      	subs	r3, #1
    10a8:	b2db      	uxtb	r3, r3
    10aa:	7023      	strb	r3, [r4, #0]
    10ac:	b123      	cbz	r3, 10b8 <_m16src_stop+0x30>
    10ae:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10b2:	f06f 000f 	mvn.w	r0, #15
    10b6:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10b8:	4b09      	ldr	r3, [pc, #36]	; (10e0 <_m16src_stop+0x58>)
    10ba:	7818      	ldrb	r0, [r3, #0]
    10bc:	2101      	movs	r1, #1
    10be:	b128      	cbz	r0, 10cc <_m16src_stop+0x44>
		m16src_ref++;
    10c0:	7021      	strb	r1, [r4, #0]
    10c2:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10c6:	f06f 000a 	mvn.w	r0, #10
    10ca:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10cc:	7019      	strb	r1, [r3, #0]
    10ce:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10d6:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10d8:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10da:	bd10      	pop	{r4, pc}
    10dc:	2000000e 	.word	0x2000000e
    10e0:	2000000d 	.word	0x2000000d

000010e4 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10e4:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10e6:	2200      	movs	r2, #0
    10e8:	4610      	mov	r0, r2
    10ea:	2101      	movs	r1, #1
    10ec:	f000 fbec 	bl	18c8 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10f0:	2000      	movs	r0, #0
    10f2:	f000 fbb7 	bl	1864 <_arch_irq_enable>

	return 0;
}
    10f6:	2000      	movs	r0, #0
    10f8:	bd08      	pop	{r3, pc}
	...

000010fc <_m16src_start>:
{
    10fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10fe:	f04f 0220 	mov.w	r2, #32
    1102:	f3ef 8311 	mrs	r3, BASEPRI
    1106:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    110a:	4a25      	ldr	r2, [pc, #148]	; (11a0 <_m16src_start+0xa4>)
    110c:	7810      	ldrb	r0, [r2, #0]
    110e:	1c44      	adds	r4, r0, #1
    1110:	7014      	strb	r4, [r2, #0]
    1112:	b160      	cbz	r0, 112e <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1114:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    111c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    1120:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1124:	bf14      	ite	ne
    1126:	2000      	movne	r0, #0
    1128:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    112c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    112e:	4d1d      	ldr	r5, [pc, #116]	; (11a4 <_m16src_start+0xa8>)
    1130:	782f      	ldrb	r7, [r5, #0]
    1132:	b12f      	cbz	r7, 1140 <_m16src_start+0x44>
		m16src_ref--;
    1134:	7010      	strb	r0, [r2, #0]
    1136:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    113a:	f06f 000a 	mvn.w	r0, #10
    113e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1140:	2601      	movs	r6, #1
    1142:	702e      	strb	r6, [r5, #0]
    1144:	f383 8811 	msr	BASEPRI, r3
    1148:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    114c:	b319      	cbz	r1, 1196 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    114e:	4638      	mov	r0, r7
    1150:	f000 fb98 	bl	1884 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1154:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1158:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    115c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1160:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1162:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1166:	b192      	cbz	r2, 118e <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1168:	2200      	movs	r2, #0
    116a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116e:	4a0e      	ldr	r2, [pc, #56]	; (11a8 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1170:	f013 0f01 	tst.w	r3, #1
    1174:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1178:	bf08      	it	eq
    117a:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    117e:	2000      	movs	r0, #0
    1180:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1184:	f000 fb6e 	bl	1864 <_arch_irq_enable>
	m16src_grd = 0;
    1188:	2300      	movs	r3, #0
    118a:	702b      	strb	r3, [r5, #0]
    118c:	e7c4      	b.n	1118 <_m16src_start+0x1c>
			__WFE();
    118e:	bf20      	wfe
			__SEV();
    1190:	bf40      	sev
			__WFE();
    1192:	bf20      	wfe
    1194:	e7e5      	b.n	1162 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1196:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    119a:	6026      	str	r6, [r4, #0]
    119c:	e7f4      	b.n	1188 <_m16src_start+0x8c>
    119e:	bf00      	nop
    11a0:	2000000e 	.word	0x2000000e
    11a4:	2000000d 	.word	0x2000000d
    11a8:	e000e100 	.word	0xe000e100

000011ac <_k32src_start>:
{
    11ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ae:	4606      	mov	r6, r0
    11b0:	460c      	mov	r4, r1
	__asm__ volatile(
    11b2:	f04f 0220 	mov.w	r2, #32
    11b6:	f3ef 8311 	mrs	r3, BASEPRI
    11ba:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11be:	4a2c      	ldr	r2, [pc, #176]	; (1270 <_k32src_start+0xc4>)
    11c0:	7815      	ldrb	r5, [r2, #0]
    11c2:	b165      	cbz	r5, 11de <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11c4:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11cc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11d4:	bf0c      	ite	eq
    11d6:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11da:	2000      	movne	r0, #0
    11dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11de:	2701      	movs	r7, #1
    11e0:	7017      	strb	r7, [r2, #0]
    11e2:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11e6:	4628      	mov	r0, r5
    11e8:	f000 fb4c 	bl	1884 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11f0:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11f2:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11f6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11fa:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11fe:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1202:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1204:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1208:	b371      	cbz	r1, 1268 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    120a:	0792      	lsls	r2, r2, #30
    120c:	4f19      	ldr	r7, [pc, #100]	; (1274 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    120e:	bf58      	it	pl
    1210:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1212:	f04f 0100 	mov.w	r1, #0
    1216:	f04f 0501 	mov.w	r5, #1
    121a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    121e:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1222:	bf58      	it	pl
    1224:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1228:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    122c:	f000 fb1a 	bl	1864 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1234:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1236:	2218      	movs	r2, #24
    1238:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    123c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1240:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1244:	f014 0103 	ands.w	r1, r4, #3
    1248:	d1be      	bne.n	11c8 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    124a:	2010      	movs	r0, #16
    124c:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    1250:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1254:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1256:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    125a:	f7ff ff4f 	bl	10fc <_m16src_start>
		if (!err) {
    125e:	2800      	cmp	r0, #0
    1260:	d1b2      	bne.n	11c8 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1262:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1266:	e7af      	b.n	11c8 <_k32src_start+0x1c>
		__WFE();
    1268:	bf20      	wfe
		__SEV();
    126a:	bf40      	sev
		__WFE();
    126c:	bf20      	wfe
    126e:	e7c9      	b.n	1204 <_k32src_start+0x58>
    1270:	2000000c 	.word	0x2000000c
    1274:	e000e100 	.word	0xe000e100

00001278 <_power_clock_isr>:
{
    1278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    127a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    127e:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1280:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1284:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1288:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    128c:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1290:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1294:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1298:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    129c:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    12a0:	f1be 0f00 	cmp.w	lr, #0
    12a4:	d003      	beq.n	12ae <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12a6:	f04f 0e00 	mov.w	lr, #0
    12aa:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12ae:	b127      	cbz	r7, 12ba <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12b4:	2700      	movs	r7, #0
    12b6:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12ba:	b13a      	cbz	r2, 12cc <_power_clock_isr+0x54>
    12bc:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12be:	bf41      	itttt	mi
    12c0:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12c4:	2201      	movmi	r2, #1
    12c6:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12ca:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12cc:	b120      	cbz	r0, 12d8 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12d2:	2200      	movs	r2, #0
    12d4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12d8:	b149      	cbz	r1, 12ee <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12da:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12de:	2100      	movs	r1, #0
    12e0:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12e4:	4628      	mov	r0, r5
    12e6:	f7ff fecf 	bl	1088 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12ea:	2301      	movs	r3, #1
    12ec:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12ee:	b176      	cbz	r6, 130e <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f4:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f6:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f8:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12fc:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fe:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1302:	f7ff fefb 	bl	10fc <_m16src_start>
		if (!err) {
    1306:	b910      	cbnz	r0, 130e <_power_clock_isr+0x96>
    1308:	4b01      	ldr	r3, [pc, #4]	; (1310 <_power_clock_isr+0x98>)
    130a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    130e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1310:	e000e100 	.word	0xe000e100

00001314 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1314:	4b08      	ldr	r3, [pc, #32]	; (1338 <rtc_compare_set+0x24>)
    1316:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    131a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    131e:	1ac0      	subs	r0, r0, r3
    1320:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1324:	4b05      	ldr	r3, [pc, #20]	; (133c <rtc_compare_set+0x28>)
    1326:	3802      	subs	r0, #2
    1328:	4298      	cmp	r0, r3
    132a:	bf82      	ittt	hi
    132c:	4b04      	ldrhi	r3, [pc, #16]	; (1340 <rtc_compare_set+0x2c>)
    132e:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1332:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1336:	4770      	bx	lr
    1338:	40011000 	.word	0x40011000
    133c:	007ffffd 	.word	0x007ffffd
    1340:	e000e100 	.word	0xe000e100

00001344 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1344:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1346:	4b11      	ldr	r3, [pc, #68]	; (138c <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1348:	4c11      	ldr	r4, [pc, #68]	; (1390 <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    134a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134e:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1350:	4d10      	ldr	r5, [pc, #64]	; (1394 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1352:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1354:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1356:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    135a:	4298      	cmp	r0, r3
    135c:	d30f      	bcc.n	137e <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    135e:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    1362:	490d      	ldr	r1, [pc, #52]	; (1398 <rtc_announce_set_next+0x54>)
    1364:	6809      	ldr	r1, [r1, #0]
    1366:	4288      	cmp	r0, r1
    1368:	bf28      	it	cs
    136a:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    136c:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    1370:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1374:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1376:	4b09      	ldr	r3, [pc, #36]	; (139c <rtc_announce_set_next+0x58>)
    1378:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    137a:	f013 fdbf 	bl	14efc <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    137e:	6820      	ldr	r0, [r4, #0]
    1380:	682b      	ldr	r3, [r5, #0]
    1382:	4418      	add	r0, r3
}
    1384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1388:	f7ff bfc4 	b.w	1314 <rtc_compare_set>
    138c:	40011000 	.word	0x40011000
    1390:	20000014 	.word	0x20000014
    1394:	20003f30 	.word	0x20003f30
    1398:	20000010 	.word	0x20000010
    139c:	20003f2c 	.word	0x20003f2c

000013a0 <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    13a0:	4b02      	ldr	r3, [pc, #8]	; (13ac <rtc1_nrf5_isr+0xc>)
    13a2:	2200      	movs	r2, #0
    13a4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13a8:	f7ff bfcc 	b.w	1344 <rtc_announce_set_next>
    13ac:	40011000 	.word	0x40011000

000013b0 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13b0:	1e03      	subs	r3, r0, #0
    13b2:	4a0a      	ldr	r2, [pc, #40]	; (13dc <_timer_idle_enter+0x2c>)
    13b4:	480a      	ldr	r0, [pc, #40]	; (13e0 <_timer_idle_enter+0x30>)
    13b6:	db04      	blt.n	13c2 <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13b8:	6811      	ldr	r1, [r2, #0]
    13ba:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13be:	428b      	cmp	r3, r1
    13c0:	dd02      	ble.n	13c8 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13c2:	6813      	ldr	r3, [r2, #0]
    13c4:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13c8:	6810      	ldr	r0, [r2, #0]
    13ca:	4a06      	ldr	r2, [pc, #24]	; (13e4 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13cc:	4906      	ldr	r1, [pc, #24]	; (13e8 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ce:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13d0:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13d2:	fb00 2003 	mla	r0, r0, r3, r2
    13d6:	f7ff bf9d 	b.w	1314 <rtc_compare_set>
    13da:	bf00      	nop
    13dc:	20003f30 	.word	0x20003f30
    13e0:	007fffff 	.word	0x007fffff
    13e4:	20000014 	.word	0x20000014
    13e8:	20000010 	.word	0x20000010

000013ec <_timer_idle_exit>:
{
    13ec:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13ee:	4b07      	ldr	r3, [pc, #28]	; (140c <_timer_idle_exit+0x20>)
    13f0:	2200      	movs	r2, #0
    13f2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f6:	4b06      	ldr	r3, [pc, #24]	; (1410 <_timer_idle_exit+0x24>)
    13f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1400:	f7ff ffa0 	bl	1344 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1404:	4b03      	ldr	r3, [pc, #12]	; (1414 <_timer_idle_exit+0x28>)
    1406:	2201      	movs	r2, #1
    1408:	601a      	str	r2, [r3, #0]
    140a:	bd08      	pop	{r3, pc}
    140c:	40011000 	.word	0x40011000
    1410:	e000e100 	.word	0xe000e100
    1414:	20000010 	.word	0x20000010

00001418 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1418:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    141a:	4818      	ldr	r0, [pc, #96]	; (147c <_sys_clock_driver_init+0x64>)
    141c:	f012 ffb0 	bl	14380 <device_get_binding>
	if (!clock) {
    1420:	b348      	cbz	r0, 1476 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1422:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1424:	4d16      	ldr	r5, [pc, #88]	; (1480 <_sys_clock_driver_init+0x68>)
    1426:	681b      	ldr	r3, [r3, #0]
    1428:	2101      	movs	r1, #1
    142a:	4798      	blx	r3
	rtc_past = 0;
    142c:	4b15      	ldr	r3, [pc, #84]	; (1484 <_sys_clock_driver_init+0x6c>)
    142e:	2400      	movs	r4, #0
    1430:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1432:	4b15      	ldr	r3, [pc, #84]	; (1488 <_sys_clock_driver_init+0x70>)
    1434:	2601      	movs	r6, #1
    1436:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1438:	4b14      	ldr	r3, [pc, #80]	; (148c <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    143a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1448:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    144c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1450:	4b0f      	ldr	r3, [pc, #60]	; (1490 <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1452:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1456:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    145a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    145e:	4631      	mov	r1, r6
    1460:	4622      	mov	r2, r4
    1462:	2011      	movs	r0, #17
    1464:	f000 fa30 	bl	18c8 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1468:	2011      	movs	r0, #17
    146a:	f000 f9fb 	bl	1864 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    146e:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1470:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1472:	602e      	str	r6, [r5, #0]
	return 0;
    1474:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    147a:	bd70      	pop	{r4, r5, r6, pc}
    147c:	00015abc 	.word	0x00015abc
    1480:	40011000 	.word	0x40011000
    1484:	20000014 	.word	0x20000014
    1488:	20000010 	.word	0x20000010
    148c:	20003f30 	.word	0x20003f30
    1490:	e000e100 	.word	0xe000e100

00001494 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1494:	4a0a      	ldr	r2, [pc, #40]	; (14c0 <_timer_cycle_get_32+0x2c>)
{
    1496:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1498:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    149c:	4d09      	ldr	r5, [pc, #36]	; (14c4 <_timer_cycle_get_32+0x30>)
    149e:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    14a2:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14a6:	42a3      	cmp	r3, r4
    14a8:	d107      	bne.n	14ba <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14aa:	4a07      	ldr	r2, [pc, #28]	; (14c8 <_timer_cycle_get_32+0x34>)
    14ac:	6812      	ldr	r2, [r2, #0]
    14ae:	4350      	muls	r0, r2
    14b0:	1a1b      	subs	r3, r3, r0
    14b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14b6:	4418      	add	r0, r3
    14b8:	bd30      	pop	{r4, r5, pc}
    14ba:	4623      	mov	r3, r4
    14bc:	e7ef      	b.n	149e <_timer_cycle_get_32+0xa>
    14be:	bf00      	nop
    14c0:	40011000 	.word	0x40011000
    14c4:	200019f0 	.word	0x200019f0
    14c8:	20003f30 	.word	0x20003f30

000014cc <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14cc:	4809      	ldr	r0, [pc, #36]	; (14f4 <_EXIT_EXC+0xc>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14ce:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14d0:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14d2:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14d4:	d008      	beq.n	14e8 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14d6:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14d8:	f013 fc26 	bl	14d28 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14dc:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14e0:	4905      	ldr	r1, [pc, #20]	; (14f8 <_EXIT_EXC+0x10>)
    ldr r2, =_SCS_ICSR_PENDSV
    14e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14e6:	600a      	str	r2, [r1, #0]

000014e8 <_EXIT_EXC>:

_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
    push {lr}
    14e8:	b500      	push	{lr}
    bl _check_stack_sentinel
    14ea:	f013 fe69 	bl	151c0 <_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14ee:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14f2:	4770      	bx	lr
    ldr r0, =_kernel
    14f4:	200019b8 	.word	0x200019b8
    ldr r1, =_SCS_ICSR
    14f8:	e000ed04 	.word	0xe000ed04

000014fc <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14fc:	4804      	ldr	r0, [pc, #16]	; (1510 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    14fe:	2300      	movs	r3, #0
    1500:	2120      	movs	r1, #32
    1502:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1504:	3301      	adds	r3, #1
    1506:	2b27      	cmp	r3, #39	; 0x27
    1508:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    150c:	d1f9      	bne.n	1502 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    150e:	4770      	bx	lr
    1510:	e000e100 	.word	0xe000e100

00001514 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1514:	4a08      	ldr	r2, [pc, #32]	; (1538 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1516:	4909      	ldr	r1, [pc, #36]	; (153c <__swap+0x28>)
	_current->arch.basepri = key;
    1518:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    151a:	6809      	ldr	r1, [r1, #0]
    151c:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    151e:	4908      	ldr	r1, [pc, #32]	; (1540 <__swap+0x2c>)
	_current->arch.basepri = key;
    1520:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1522:	684b      	ldr	r3, [r1, #4]
    1524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1528:	604b      	str	r3, [r1, #4]
    152a:	2300      	movs	r3, #0
    152c:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1530:	6893      	ldr	r3, [r2, #8]
}
    1532:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1534:	4770      	bx	lr
    1536:	bf00      	nop
    1538:	200019b8 	.word	0x200019b8
    153c:	000196bc 	.word	0x000196bc
    1540:	e000ed00 	.word	0xe000ed00

00001544 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1544:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1546:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    154a:	490d      	ldr	r1, [pc, #52]	; (1580 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    154c:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    154e:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1550:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1552:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1556:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    155a:	4f0a      	ldr	r7, [pc, #40]	; (1584 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    155c:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1560:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1562:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1564:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    1566:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    1568:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    156a:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    156c:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1570:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1574:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    1578:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    157c:	4770      	bx	lr
    157e:	0000      	.short	0x0000
    ldr r1, =_kernel
    1580:	200019b8 	.word	0x200019b8
    ldr v4, =_SCS_ICSR
    1584:	e000ed04 	.word	0xe000ed04

00001588 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    1588:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    158c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    158e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1592:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1596:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    1598:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    159c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    15a0:	2902      	cmp	r1, #2
    beq _oops
    15a2:	d0ff      	beq.n	15a4 <_oops>

000015a4 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    15a4:	b500      	push	{lr}
    blx _do_kernel_oops
    15a6:	f000 fa33 	bl	1a10 <_do_kernel_oops>
    pop {pc}
    15aa:	bd00      	pop	{pc}

000015ac <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15ac:	b510      	push	{r4, lr}
    15ae:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15b0:	f013 fc02 	bl	14db8 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15b4:	6822      	ldr	r2, [r4, #0]
    15b6:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15bc:	4801      	ldr	r0, [pc, #4]	; (15c4 <_FaultThreadShow.isra.2+0x18>)
    15be:	f7ff bce5 	b.w	f8c <printk>
    15c2:	bf00      	nop
    15c4:	00015c15 	.word	0x00015c15

000015c8 <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15c8:	b538      	push	{r3, r4, r5, lr}
    15ca:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15cc:	481a      	ldr	r0, [pc, #104]	; (1638 <_MpuFault+0x70>)
{
    15ce:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15d0:	f7ff fcdc 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15d4:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d8:	4c18      	ldr	r4, [pc, #96]	; (163c <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15da:	f7ff ffe7 	bl	15ac <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e0:	06d9      	lsls	r1, r3, #27
    15e2:	d502      	bpl.n	15ea <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15e4:	4816      	ldr	r0, [pc, #88]	; (1640 <_MpuFault+0x78>)
    15e6:	f7ff fcd1 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15ec:	071a      	lsls	r2, r3, #28
    15ee:	d502      	bpl.n	15f6 <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15f0:	4814      	ldr	r0, [pc, #80]	; (1644 <_MpuFault+0x7c>)
    15f2:	f7ff fccb 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    15f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15f8:	079b      	lsls	r3, r3, #30
    15fa:	d50e      	bpl.n	161a <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    15fc:	4812      	ldr	r0, [pc, #72]	; (1648 <_MpuFault+0x80>)
    15fe:	f7ff fcc5 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    1602:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    1604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1606:	0618      	lsls	r0, r3, #24
    1608:	d507      	bpl.n	161a <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    160a:	4810      	ldr	r0, [pc, #64]	; (164c <_MpuFault+0x84>)
    160c:	f7ff fcbe 	bl	f8c <printk>
			if (fromHardFault) {
    1610:	b11d      	cbz	r5, 161a <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1612:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1618:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    161a:	4c08      	ldr	r4, [pc, #32]	; (163c <_MpuFault+0x74>)
    161c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    161e:	07d2      	lsls	r2, r2, #31
    1620:	d502      	bpl.n	1628 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    1622:	480b      	ldr	r0, [pc, #44]	; (1650 <_MpuFault+0x88>)
    1624:	f7ff fcb2 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    1628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    162a:	069b      	lsls	r3, r3, #26
    162c:	d502      	bpl.n	1634 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    162e:	4809      	ldr	r0, [pc, #36]	; (1654 <_MpuFault+0x8c>)
    1630:	f7ff fcac 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1634:	2000      	movs	r0, #0
    1636:	bd38      	pop	{r3, r4, r5, pc}
    1638:	00015c5f 	.word	0x00015c5f
    163c:	e000ed00 	.word	0xe000ed00
    1640:	00015c76 	.word	0x00015c76
    1644:	00015c88 	.word	0x00015c88
    1648:	00015c9c 	.word	0x00015c9c
    164c:	00015cb5 	.word	0x00015cb5
    1650:	00015cc6 	.word	0x00015cc6
    1654:	00015ce6 	.word	0x00015ce6

00001658 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    1658:	b510      	push	{r4, lr}
    165a:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    165c:	481a      	ldr	r0, [pc, #104]	; (16c8 <_UsageFault+0x70>)
    165e:	f7ff fc95 	bl	f8c <printk>

	_FaultThreadShow(esf);
    1662:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1666:	4c19      	ldr	r4, [pc, #100]	; (16cc <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    1668:	f7ff ffa0 	bl	15ac <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    166e:	019a      	lsls	r2, r3, #6
    1670:	d502      	bpl.n	1678 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    1672:	4817      	ldr	r0, [pc, #92]	; (16d0 <_UsageFault+0x78>)
    1674:	f7ff fc8a 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    1678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167a:	01db      	lsls	r3, r3, #7
    167c:	d502      	bpl.n	1684 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    167e:	4815      	ldr	r0, [pc, #84]	; (16d4 <_UsageFault+0x7c>)
    1680:	f7ff fc84 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1686:	0318      	lsls	r0, r3, #12
    1688:	d502      	bpl.n	1690 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    168a:	4813      	ldr	r0, [pc, #76]	; (16d8 <_UsageFault+0x80>)
    168c:	f7ff fc7e 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1690:	4c0e      	ldr	r4, [pc, #56]	; (16cc <_UsageFault+0x74>)
    1692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1694:	0359      	lsls	r1, r3, #13
    1696:	d502      	bpl.n	169e <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    1698:	4810      	ldr	r0, [pc, #64]	; (16dc <_UsageFault+0x84>)
    169a:	f7ff fc77 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    169e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a0:	039a      	lsls	r2, r3, #14
    16a2:	d502      	bpl.n	16aa <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    16a4:	480e      	ldr	r0, [pc, #56]	; (16e0 <_UsageFault+0x88>)
    16a6:	f7ff fc71 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    16aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16ac:	03db      	lsls	r3, r3, #15
    16ae:	d502      	bpl.n	16b6 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16b0:	480c      	ldr	r0, [pc, #48]	; (16e4 <_UsageFault+0x8c>)
    16b2:	f7ff fc6b 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16b6:	4a05      	ldr	r2, [pc, #20]	; (16cc <_UsageFault+0x74>)
    16b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16ba:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16be:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16c2:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16c4:	2000      	movs	r0, #0
    16c6:	bd10      	pop	{r4, pc}
    16c8:	00015d16 	.word	0x00015d16
    16cc:	e000ed00 	.word	0xe000ed00
    16d0:	00015d2f 	.word	0x00015d2f
    16d4:	00015d43 	.word	0x00015d43
    16d8:	00015d5e 	.word	0x00015d5e
    16dc:	00015d7d 	.word	0x00015d7d
    16e0:	00015da3 	.word	0x00015da3
    16e4:	00015dbe 	.word	0x00015dbe

000016e8 <_BusFault>:
{
    16e8:	b538      	push	{r3, r4, r5, lr}
    16ea:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16ec:	481d      	ldr	r0, [pc, #116]	; (1764 <_BusFault+0x7c>)
{
    16ee:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16f0:	f7ff fc4c 	bl	f8c <printk>
	_FaultThreadShow(esf);
    16f4:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f8:	4c1b      	ldr	r4, [pc, #108]	; (1768 <_BusFault+0x80>)
	_FaultThreadShow(esf);
    16fa:	f7ff ff57 	bl	15ac <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1700:	04d8      	lsls	r0, r3, #19
    1702:	d504      	bpl.n	170e <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    1704:	4819      	ldr	r0, [pc, #100]	; (176c <_BusFault+0x84>)
}
    1706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    170a:	f7ff bc3f 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    170e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1710:	0519      	lsls	r1, r3, #20
    1712:	d501      	bpl.n	1718 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1714:	4816      	ldr	r0, [pc, #88]	; (1770 <_BusFault+0x88>)
    1716:	e7f6      	b.n	1706 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1718:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171a:	059a      	lsls	r2, r3, #22
    171c:	d514      	bpl.n	1748 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    171e:	4815      	ldr	r0, [pc, #84]	; (1774 <_BusFault+0x8c>)
    1720:	f7ff fc34 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1724:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    1726:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1728:	041b      	lsls	r3, r3, #16
    172a:	d507      	bpl.n	173c <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    172c:	4812      	ldr	r0, [pc, #72]	; (1778 <_BusFault+0x90>)
    172e:	f7ff fc2d 	bl	f8c <printk>
			if (fromHardFault) {
    1732:	b11d      	cbz	r5, 173c <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1734:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1736:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    173a:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    173c:	4b0a      	ldr	r3, [pc, #40]	; (1768 <_BusFault+0x80>)
    173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1740:	0558      	lsls	r0, r3, #21
    1742:	d50e      	bpl.n	1762 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1744:	480d      	ldr	r0, [pc, #52]	; (177c <_BusFault+0x94>)
    1746:	e7de      	b.n	1706 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1748:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    174a:	0559      	lsls	r1, r3, #21
    174c:	d4fa      	bmi.n	1744 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    174e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1750:	05da      	lsls	r2, r3, #23
    1752:	d501      	bpl.n	1758 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1754:	480a      	ldr	r0, [pc, #40]	; (1780 <_BusFault+0x98>)
    1756:	e7d6      	b.n	1706 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1758:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    175a:	049b      	lsls	r3, r3, #18
    175c:	d501      	bpl.n	1762 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    175e:	4809      	ldr	r0, [pc, #36]	; (1784 <_BusFault+0x9c>)
    1760:	e7d1      	b.n	1706 <_BusFault+0x1e>
    1762:	bd38      	pop	{r3, r4, r5, pc}
    1764:	00015adc 	.word	0x00015adc
    1768:	e000ed00 	.word	0xe000ed00
    176c:	00015c76 	.word	0x00015c76
    1770:	00015c88 	.word	0x00015c88
    1774:	00015af3 	.word	0x00015af3
    1778:	00015cb5 	.word	0x00015cb5
    177c:	00015b0d 	.word	0x00015b0d
    1780:	00015b29 	.word	0x00015b29
    1784:	00015ce6 	.word	0x00015ce6

00001788 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    1788:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    178a:	4c27      	ldr	r4, [pc, #156]	; (1828 <_Fault+0xa0>)
    178c:	6863      	ldr	r3, [r4, #4]
    178e:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1792:	1eda      	subs	r2, r3, #3
{
    1794:	4605      	mov	r5, r0
	switch (fault) {
    1796:	2a09      	cmp	r2, #9
    1798:	d83b      	bhi.n	1812 <_Fault+0x8a>
    179a:	e8df f002 	tbb	[pc, r2]
    179e:	3405      	.short	0x3405
    17a0:	3a3a3036 	.word	0x3a3a3036
    17a4:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    17a8:	4820      	ldr	r0, [pc, #128]	; (182c <_Fault+0xa4>)
    17aa:	f7ff fbef 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17b0:	079a      	lsls	r2, r3, #30
    17b2:	d503      	bpl.n	17bc <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17b4:	481e      	ldr	r0, [pc, #120]	; (1830 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17b6:	f7ff fbe9 	bl	f8c <printk>
    17ba:	e002      	b.n	17c2 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17be:	005b      	lsls	r3, r3, #1
    17c0:	d401      	bmi.n	17c6 <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17c2:	2000      	movs	r0, #0
    17c4:	e009      	b.n	17da <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17c6:	481b      	ldr	r0, [pc, #108]	; (1834 <_Fault+0xac>)
    17c8:	f7ff fbe0 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17cc:	4b1a      	ldr	r3, [pc, #104]	; (1838 <_Fault+0xb0>)
    17ce:	781b      	ldrb	r3, [r3, #0]
    17d0:	b143      	cbz	r3, 17e4 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17d2:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17d4:	4628      	mov	r0, r5
    17d6:	f7ff fef7 	bl	15c8 <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17da:	4629      	mov	r1, r5
}
    17dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17e0:	f000 b91a 	b.w	1a18 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17e4:	4b15      	ldr	r3, [pc, #84]	; (183c <_Fault+0xb4>)
    17e6:	781b      	ldrb	r3, [r3, #0]
    17e8:	b123      	cbz	r3, 17f4 <_Fault+0x6c>
			_BusFault(esf, 1);
    17ea:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17ec:	4628      	mov	r0, r5
    17ee:	f7ff ff7b 	bl	16e8 <_BusFault>
    17f2:	e7e6      	b.n	17c2 <_Fault+0x3a>
		} else if (SCB_UFSR) {
    17f4:	4b12      	ldr	r3, [pc, #72]	; (1840 <_Fault+0xb8>)
    17f6:	881b      	ldrh	r3, [r3, #0]
    17f8:	b29b      	uxth	r3, r3
    17fa:	2b00      	cmp	r3, #0
    17fc:	d0e1      	beq.n	17c2 <_Fault+0x3a>
		reason = _UsageFault(esf);
    17fe:	4628      	mov	r0, r5
    1800:	f7ff ff2a 	bl	1658 <_UsageFault>
    1804:	e7e9      	b.n	17da <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    1806:	2100      	movs	r1, #0
    1808:	e7e4      	b.n	17d4 <_Fault+0x4c>
		_BusFault(esf, 0);
    180a:	2100      	movs	r1, #0
    180c:	e7ee      	b.n	17ec <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    180e:	480d      	ldr	r0, [pc, #52]	; (1844 <_Fault+0xbc>)
    1810:	e7d1      	b.n	17b6 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    1812:	480d      	ldr	r0, [pc, #52]	; (1848 <_Fault+0xc0>)
    1814:	490d      	ldr	r1, [pc, #52]	; (184c <_Fault+0xc4>)
    1816:	f1a3 0210 	sub.w	r2, r3, #16
    181a:	2b0f      	cmp	r3, #15
    181c:	bfd8      	it	le
    181e:	4601      	movle	r1, r0
    1820:	480b      	ldr	r0, [pc, #44]	; (1850 <_Fault+0xc8>)
    1822:	f7ff fbb3 	bl	f8c <printk>
    1826:	e7cc      	b.n	17c2 <_Fault+0x3a>
    1828:	e000ed00 	.word	0xe000ed00
    182c:	00015b70 	.word	0x00015b70
    1830:	00015b88 	.word	0x00015b88
    1834:	00015baa 	.word	0x00015baa
    1838:	e000ed28 	.word	0xe000ed28
    183c:	e000ed29 	.word	0xe000ed29
    1840:	e000ed2a 	.word	0xe000ed2a
    1844:	00015bca 	.word	0x00015bca
    1848:	00015b42 	.word	0x00015b42
    184c:	00015b57 	.word	0x00015b57
    1850:	00015c01 	.word	0x00015c01

00001854 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1854:	4a02      	ldr	r2, [pc, #8]	; (1860 <_FaultInit+0xc>)
    1856:	6953      	ldr	r3, [r2, #20]
    1858:	f043 0310 	orr.w	r3, r3, #16
    185c:	6153      	str	r3, [r2, #20]
    185e:	4770      	bx	lr
    1860:	e000ed00 	.word	0xe000ed00

00001864 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1864:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1866:	2b00      	cmp	r3, #0
    1868:	db08      	blt.n	187c <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    186a:	2201      	movs	r2, #1
    186c:	f000 001f 	and.w	r0, r0, #31
    1870:	fa02 f000 	lsl.w	r0, r2, r0
    1874:	095b      	lsrs	r3, r3, #5
    1876:	4a02      	ldr	r2, [pc, #8]	; (1880 <_arch_irq_enable+0x1c>)
    1878:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    187c:	4770      	bx	lr
    187e:	bf00      	nop
    1880:	e000e100 	.word	0xe000e100

00001884 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1884:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1886:	2b00      	cmp	r3, #0
    1888:	db0d      	blt.n	18a6 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    188a:	2201      	movs	r2, #1
    188c:	095b      	lsrs	r3, r3, #5
    188e:	f000 001f 	and.w	r0, r0, #31
    1892:	fa02 f000 	lsl.w	r0, r2, r0
    1896:	3320      	adds	r3, #32
    1898:	4a03      	ldr	r2, [pc, #12]	; (18a8 <_arch_irq_disable+0x24>)
    189a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    189e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18a2:	f3bf 8f6f 	isb	sy
    18a6:	4770      	bx	lr
    18a8:	e000e100 	.word	0xe000e100

000018ac <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18ac:	0942      	lsrs	r2, r0, #5
    18ae:	4b05      	ldr	r3, [pc, #20]	; (18c4 <_arch_irq_is_enabled+0x18>)
    18b0:	f000 001f 	and.w	r0, r0, #31
    18b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18b8:	2301      	movs	r3, #1
    18ba:	fa03 f000 	lsl.w	r0, r3, r0
}
    18be:	4010      	ands	r0, r2
    18c0:	4770      	bx	lr
    18c2:	bf00      	nop
    18c4:	e000e100 	.word	0xe000e100

000018c8 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18c8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18ca:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18cc:	bfa8      	it	ge
    18ce:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18d2:	f101 0101 	add.w	r1, r1, #1
    18d6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18da:	bfad      	iteet	ge
    18dc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e0:	f000 000f 	andlt.w	r0, r0, #15
    18e4:	4b03      	ldrlt	r3, [pc, #12]	; (18f4 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e6:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e8:	bfb6      	itet	lt
    18ea:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18ec:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18f0:	5419      	strblt	r1, [r3, r0]
    18f2:	4770      	bx	lr
    18f4:	e000ed14 	.word	0xe000ed14

000018f8 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    18f8:	f000 b844 	b.w	1984 <__bus_fault>

000018fc <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    18fc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    18fe:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    1900:	4b04      	ldr	r3, [pc, #16]	; (1914 <_arch_isr_direct_pm+0x18>)
    1902:	69d8      	ldr	r0, [r3, #28]
    1904:	b118      	cbz	r0, 190e <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    1906:	2200      	movs	r2, #0
    1908:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    190a:	f012 fd5f 	bl	143cc <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    190e:	b662      	cpsie	i
    1910:	bd08      	pop	{r3, pc}
    1912:	bf00      	nop
    1914:	200019b8 	.word	0x200019b8

00001918 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    191a:	461f      	mov	r7, r3
#ifdef CONFIG_STACK_SENTINEL
	/* Put the stack sentinel at the lowest 4 bytes of the stack area.
	 * We periodically check that it's still present and kill the thread
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
    191c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
    1920:	460c      	mov	r4, r1
    1922:	4616      	mov	r6, r2
    1924:	600b      	str	r3, [r1, #0]
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1926:	2204      	movs	r2, #4
    1928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    192a:	9909      	ldr	r1, [sp, #36]	; 0x24
    192c:	4605      	mov	r5, r0
    192e:	f013 fd17 	bl	15360 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1932:	f1a6 0120 	sub.w	r1, r6, #32
    1936:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1938:	4a0b      	ldr	r2, [pc, #44]	; (1968 <_new_thread+0x50>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    193a:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    193c:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    1940:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1942:	f022 0201 	bic.w	r2, r2, #1
    1946:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1948:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    194a:	662e      	str	r6, [r5, #96]	; 0x60
    194c:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    194e:	9a06      	ldr	r2, [sp, #24]
    1950:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1952:	9a07      	ldr	r2, [sp, #28]
    1954:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1956:	9a08      	ldr	r2, [sp, #32]
    1958:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    195a:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    195c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1960:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1962:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1964:	66ab      	str	r3, [r5, #104]	; 0x68
    1966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1968:	00000899 	.word	0x00000899

0000196c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    196c:	4901      	ldr	r1, [pc, #4]	; (1974 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    196e:	2210      	movs	r2, #16
	str r2, [r1]
    1970:	600a      	str	r2, [r1, #0]
	bx lr
    1972:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1974:	e000ed10 	.word	0xe000ed10

00001978 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1978:	4040      	eors	r0, r0
	msr BASEPRI, r0
    197a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    197e:	bf30      	wfi

	bx lr
    1980:	4770      	bx	lr
    1982:	bf00      	nop

00001984 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1984:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1986:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    198a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 19a8 <__bus_fault+0x24>
	ldr ip, [ip]
    198e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1992:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1996:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1998:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    199c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    19a0:	b500      	push	{lr}
	bl _Fault
    19a2:	f7ff fef1 	bl	1788 <_Fault>

	pop {pc}
    19a6:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    19a8:	e000ed04 	.word	0xe000ed04

000019ac <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    19ac:	b538      	push	{r3, r4, r5, lr}
	switch (reason) {
    19ae:	1e83      	subs	r3, r0, #2
{
    19b0:	4604      	mov	r4, r0
    19b2:	460d      	mov	r5, r1
	switch (reason) {
    19b4:	2b03      	cmp	r3, #3
    19b6:	d819      	bhi.n	19ec <_NanoFatalErrorHandler+0x40>
    19b8:	e8df f003 	tbb	[pc, r3]
    19bc:	16141202 	.word	0x16141202
#if defined(CONFIG_STACK_CANARIES) || defined(CONFIG_STACK_SENTINEL)
	case _NANO_ERR_STACK_CHK_FAIL:
		printk("***** Stack Check Fail! *****\n");
    19c0:	480d      	ldr	r0, [pc, #52]	; (19f8 <_NanoFatalErrorHandler+0x4c>)
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19c2:	f7ff fae3 	bl	f8c <printk>
    19c6:	f013 f9f7 	bl	14db8 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19ca:	69aa      	ldr	r2, [r5, #24]
    19cc:	4601      	mov	r1, r0
    19ce:	480b      	ldr	r0, [pc, #44]	; (19fc <_NanoFatalErrorHandler+0x50>)
    19d0:	f7ff fadc 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19d4:	4629      	mov	r1, r5
    19d6:	4620      	mov	r0, r4
}
    19d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19dc:	f000 b81c 	b.w	1a18 <_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    19e0:	4807      	ldr	r0, [pc, #28]	; (1a00 <_NanoFatalErrorHandler+0x54>)
    19e2:	e7ee      	b.n	19c2 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
    19e4:	4807      	ldr	r0, [pc, #28]	; (1a04 <_NanoFatalErrorHandler+0x58>)
    19e6:	e7ec      	b.n	19c2 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
    19e8:	4807      	ldr	r0, [pc, #28]	; (1a08 <_NanoFatalErrorHandler+0x5c>)
    19ea:	e7ea      	b.n	19c2 <_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19ec:	4601      	mov	r1, r0
    19ee:	4807      	ldr	r0, [pc, #28]	; (1a0c <_NanoFatalErrorHandler+0x60>)
    19f0:	f7ff facc 	bl	f8c <printk>
		break;
    19f4:	e7e7      	b.n	19c6 <_NanoFatalErrorHandler+0x1a>
    19f6:	bf00      	nop
    19f8:	00015dea 	.word	0x00015dea
    19fc:	00015e87 	.word	0x00015e87
    1a00:	00015e09 	.word	0x00015e09
    1a04:	00015e2f 	.word	0x00015e2f
    1a08:	00015e49 	.word	0x00015e49
    1a0c:	00015e64 	.word	0x00015e64

00001a10 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    1a10:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    1a12:	6800      	ldr	r0, [r0, #0]
    1a14:	f7ff bfca 	b.w	19ac <_NanoFatalErrorHandler>

00001a18 <_SysFatalErrorHandler>:
{
	ARG_UNUSED(pEsf);

#if !defined(CONFIG_SIMPLE_FATAL_ERROR_HANDLER)
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
    1a18:	2802      	cmp	r0, #2
{
    1a1a:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
    1a1c:	d00e      	beq.n	1a3c <_SysFatalErrorHandler+0x24>
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a1e:	2805      	cmp	r0, #5
    1a20:	d00c      	beq.n	1a3c <_SysFatalErrorHandler+0x24>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a22:	f013 fbb5 	bl	15190 <k_is_in_isr>
    1a26:	b160      	cbz	r0, 1a42 <_SysFatalErrorHandler+0x2a>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a28:	f013 fbb2 	bl	15190 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a2c:	4b0c      	ldr	r3, [pc, #48]	; (1a60 <_SysFatalErrorHandler+0x48>)
    1a2e:	490d      	ldr	r1, [pc, #52]	; (1a64 <_SysFatalErrorHandler+0x4c>)
    1a30:	2800      	cmp	r0, #0
    1a32:	bf08      	it	eq
    1a34:	4619      	moveq	r1, r3
    1a36:	480c      	ldr	r0, [pc, #48]	; (1a68 <_SysFatalErrorHandler+0x50>)
    1a38:	f7ff faa8 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a3c:	f7ff ff9c 	bl	1978 <k_cpu_idle>
    1a40:	e7fc      	b.n	1a3c <_SysFatalErrorHandler+0x24>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a42:	f013 fbb5 	bl	151b0 <_is_thread_essential>
    1a46:	2800      	cmp	r0, #0
    1a48:	d1ee      	bne.n	1a28 <_SysFatalErrorHandler+0x10>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a4a:	4c08      	ldr	r4, [pc, #32]	; (1a6c <_SysFatalErrorHandler+0x54>)
    1a4c:	4808      	ldr	r0, [pc, #32]	; (1a70 <_SysFatalErrorHandler+0x58>)
    1a4e:	68a1      	ldr	r1, [r4, #8]
    1a50:	f7ff fa9c 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a54:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a5a:	f000 b80b 	b.w	1a74 <_impl_k_thread_abort>
    1a5e:	bf00      	nop
    1a60:	00015ec7 	.word	0x00015ec7
    1a64:	00015ec3 	.word	0x00015ec3
    1a68:	00015ed8 	.word	0x00015ed8
    1a6c:	200019b8 	.word	0x200019b8
    1a70:	00015ef8 	.word	0x00015ef8

00001a74 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a74:	b538      	push	{r3, r4, r5, lr}
    1a76:	4605      	mov	r5, r0
	__asm__ volatile(
    1a78:	f04f 0320 	mov.w	r3, #32
    1a7c:	f3ef 8411 	mrs	r4, BASEPRI
    1a80:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a84:	f013 fc02 	bl	1528c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a88:	4b0c      	ldr	r3, [pc, #48]	; (1abc <_impl_k_thread_abort+0x48>)
    1a8a:	689b      	ldr	r3, [r3, #8]
    1a8c:	429d      	cmp	r5, r3
    1a8e:	d10f      	bne.n	1ab0 <_impl_k_thread_abort+0x3c>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a90:	4b0b      	ldr	r3, [pc, #44]	; (1ac0 <_impl_k_thread_abort+0x4c>)
    1a92:	685a      	ldr	r2, [r3, #4]
    1a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a98:	b932      	cbnz	r2, 1aa8 <_impl_k_thread_abort+0x34>

extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
    1a9a:	f013 fb91 	bl	151c0 <_check_stack_sentinel>
	_update_time_slice_before_swap();
    1a9e:	f013 f943 	bl	14d28 <_update_time_slice_before_swap>

	return __swap(key);
    1aa2:	4620      	mov	r0, r4
    1aa4:	f7ff fd36 	bl	1514 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1aa8:	685a      	ldr	r2, [r3, #4]
    1aaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1aae:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1ab0:	4620      	mov	r0, r4
}
    1ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1ab6:	f012 bffb 	b.w	14ab0 <_reschedule>
    1aba:	bf00      	nop
    1abc:	200019b8 	.word	0x200019b8
    1ac0:	e000ed00 	.word	0xe000ed00

00001ac4 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1ac4:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1ac6:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1ac8:	4a0b      	ldr	r2, [pc, #44]	; (1af8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1aca:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1acc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1ace:	bf1e      	ittt	ne
	movne	r1, #0
    1ad0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1ad2:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ad4:	f012 fc7a 	blne	143cc <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ad8:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ada:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1ade:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1ae2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ae6:	4905      	ldr	r1, [pc, #20]	; (1afc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ae8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1aea:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1aec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1aee:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1af2:	f7ff bceb 	b.w	14cc <_ExcExit>
    1af6:	0000      	.short	0x0000
	ldr r2, =_kernel
    1af8:	200019b8 	.word	0x200019b8
	ldr r1, =_sw_isr_table
    1afc:	000000dc 	.word	0x000000dc

00001b00 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1b00:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1b02:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1b06:	4806      	ldr	r0, [pc, #24]	; (1b20 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1b08:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1b0c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1b0e:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1b12:	2002      	movs	r0, #2
    msr CONTROL, r0
    1b14:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1b18:	f3bf 8f6f 	isb	sy

    b _PrepC
    1b1c:	f000 b806 	b.w	1b2c <_PrepC>
    ldr r0, =_interrupt_stack
    1b20:	20002e98 	.word	0x20002e98

00001b24 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b24:	bf30      	wfi
    b _SysNmiOnReset
    1b26:	f7ff bffd 	b.w	1b24 <_SysNmiOnReset>
    1b2a:	bf00      	nop

00001b2c <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b2c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b2e:	4b07      	ldr	r3, [pc, #28]	; (1b4c <_PrepC+0x20>)
    1b30:	4a07      	ldr	r2, [pc, #28]	; (1b50 <_PrepC+0x24>)
    1b32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b36:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b3c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b40:	f012 fc74 	bl	1442c <_bss_zero>
	_data_copy();
    1b44:	f012 fc7c 	bl	14440 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b48:	f012 fc9e 	bl	14488 <_Cstart>
    1b4c:	00000000 	.word	0x00000000
    1b50:	e000ed00 	.word	0xe000ed00

00001b54 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b54:	b508      	push	{r3, lr}
	handler();
    1b56:	f7ff ffe5 	bl	1b24 <_SysNmiOnReset>
	_ExcExit();
}
    1b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b5e:	f7ff bcb5 	b.w	14cc <_ExcExit>
	...

00001b64 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1b64:	4912      	ldr	r1, [pc, #72]	; (1bb0 <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b66:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b68:	680d      	ldr	r5, [r1, #0]
    1b6a:	2d08      	cmp	r5, #8
    1b6c:	d80d      	bhi.n	1b8a <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1b6e:	4a11      	ldr	r2, [pc, #68]	; (1bb4 <arm_mpu_init+0x50>)
    1b70:	6848      	ldr	r0, [r1, #4]
    1b72:	2300      	movs	r3, #0
    1b74:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b76:	429d      	cmp	r5, r3
    1b78:	f100 000c 	add.w	r0, r0, #12
    1b7c:	d107      	bne.n	1b8e <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1b7e:	2305      	movs	r3, #5
    1b80:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b86:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1b8a:	2000      	movs	r0, #0
    1b8c:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1b8e:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1b92:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1b96:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b98:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1b9c:	f041 0110 	orr.w	r1, r1, #16
    1ba0:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1ba2:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1ba6:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1ba8:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1baa:	6114      	str	r4, [r2, #16]
    1bac:	e7e3      	b.n	1b76 <arm_mpu_init+0x12>
    1bae:	bf00      	nop
    1bb0:	20003aac 	.word	0x20003aac
    1bb4:	e000ed90 	.word	0xe000ed90

00001bb8 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1bb8:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1bba:	4603      	mov	r3, r0
    1bbc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bc0:	b90a      	cbnz	r2, 1bc6 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1bc2:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1bc4:	4770      	bx	lr
		*d = *s;
    1bc6:	f803 2b01 	strb.w	r2, [r3], #1
    1bca:	e7f7      	b.n	1bbc <strcpy+0x4>

00001bcc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1bcc:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1bce:	4603      	mov	r3, r0
    1bd0:	1a98      	subs	r0, r3, r2
    1bd2:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bd6:	2900      	cmp	r1, #0
    1bd8:	d1fa      	bne.n	1bd0 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1bda:	4770      	bx	lr

00001bdc <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1bdc:	3801      	subs	r0, #1
    1bde:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1be0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1be4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1be8:	4293      	cmp	r3, r2
    1bea:	d102      	bne.n	1bf2 <strcmp+0x16>
    1bec:	2b00      	cmp	r3, #0
    1bee:	d1f7      	bne.n	1be0 <strcmp+0x4>
    1bf0:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1bf2:	1a98      	subs	r0, r3, r2
    1bf4:	4770      	bx	lr

00001bf6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1bf6:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1bf8:	b182      	cbz	r2, 1c1c <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1bfa:	3a01      	subs	r2, #1
    1bfc:	460c      	mov	r4, r1
    1bfe:	4603      	mov	r3, r0
    1c00:	d103      	bne.n	1c0a <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1c02:	781a      	ldrb	r2, [r3, #0]
    1c04:	7820      	ldrb	r0, [r4, #0]
    1c06:	1a10      	subs	r0, r2, r0
    1c08:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1c0a:	781e      	ldrb	r6, [r3, #0]
    1c0c:	7825      	ldrb	r5, [r4, #0]
    1c0e:	42ae      	cmp	r6, r5
    1c10:	f100 0001 	add.w	r0, r0, #1
    1c14:	f101 0101 	add.w	r1, r1, #1
    1c18:	d0ef      	beq.n	1bfa <memcmp+0x4>
    1c1a:	e7f2      	b.n	1c02 <memcmp+0xc>
		return 0;
    1c1c:	4610      	mov	r0, r2
}
    1c1e:	bd70      	pop	{r4, r5, r6, pc}

00001c20 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c20:	ea81 0300 	eor.w	r3, r1, r0
    1c24:	f013 0f03 	tst.w	r3, #3
{
    1c28:	b570      	push	{r4, r5, r6, lr}
    1c2a:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c2c:	d00b      	beq.n	1c46 <memcpy+0x26>
    1c2e:	3b01      	subs	r3, #1
    1c30:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c32:	4291      	cmp	r1, r2
    1c34:	d11b      	bne.n	1c6e <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c36:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c38:	2a00      	cmp	r2, #0
    1c3a:	d0fc      	beq.n	1c36 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c40:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c44:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c46:	079c      	lsls	r4, r3, #30
    1c48:	d1f6      	bne.n	1c38 <memcpy+0x18>
    1c4a:	1f1e      	subs	r6, r3, #4
    1c4c:	460d      	mov	r5, r1
    1c4e:	1b54      	subs	r4, r2, r5
    1c50:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c52:	2c03      	cmp	r4, #3
    1c54:	d806      	bhi.n	1c64 <memcpy+0x44>
    1c56:	f022 0403 	bic.w	r4, r2, #3
    1c5a:	4421      	add	r1, r4
    1c5c:	4423      	add	r3, r4
    1c5e:	f002 0203 	and.w	r2, r2, #3
    1c62:	e7e4      	b.n	1c2e <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c64:	f855 4b04 	ldr.w	r4, [r5], #4
    1c68:	f846 4f04 	str.w	r4, [r6, #4]!
    1c6c:	e7ef      	b.n	1c4e <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c72:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c76:	e7dc      	b.n	1c32 <memcpy+0x12>

00001c78 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1c78:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1c7a:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1c7c:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1c7e:	079c      	lsls	r4, r3, #30
    1c80:	d111      	bne.n	1ca6 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1c82:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1c86:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1c8a:	461e      	mov	r6, r3
    1c8c:	1b95      	subs	r5, r2, r6
    1c8e:	441d      	add	r5, r3
    1c90:	2d03      	cmp	r5, #3
    1c92:	d80e      	bhi.n	1cb2 <memset+0x3a>
    1c94:	f022 0403 	bic.w	r4, r2, #3
    1c98:	4423      	add	r3, r4
    1c9a:	f002 0203 	and.w	r2, r2, #3
    1c9e:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1ca0:	4293      	cmp	r3, r2
    1ca2:	d109      	bne.n	1cb8 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1ca4:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1ca6:	2a00      	cmp	r2, #0
    1ca8:	d0fc      	beq.n	1ca4 <memset+0x2c>
		*(d_byte++) = c_byte;
    1caa:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1cae:	3a01      	subs	r2, #1
    1cb0:	e7e5      	b.n	1c7e <memset+0x6>
		*(d_word++) = c_word;
    1cb2:	f846 4b04 	str.w	r4, [r6], #4
    1cb6:	e7e9      	b.n	1c8c <memset+0x14>
		*(d_byte++) = c_byte;
    1cb8:	f803 1b01 	strb.w	r1, [r3], #1
    1cbc:	e7f0      	b.n	1ca0 <memset+0x28>
	...

00001cc0 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1cc0:	b570      	push	{r4, r5, r6, lr}
    1cc2:	f04f 0320 	mov.w	r3, #32
    1cc6:	f3ef 8511 	mrs	r5, BASEPRI
    1cca:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1cce:	4c14      	ldr	r4, [pc, #80]	; (1d20 <bt_hex+0x60>)
    1cd0:	4e14      	ldr	r6, [pc, #80]	; (1d24 <bt_hex+0x64>)
    1cd2:	7823      	ldrb	r3, [r4, #0]
    1cd4:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1cd8:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1cda:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1cde:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1ce0:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1ce2:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1ce6:	2940      	cmp	r1, #64	; 0x40
    1ce8:	bf28      	it	cs
    1cea:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1cec:	4d0e      	ldr	r5, [pc, #56]	; (1d28 <bt_hex+0x68>)
    1cee:	3801      	subs	r0, #1
    1cf0:	4613      	mov	r3, r2
    1cf2:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1cf6:	42b3      	cmp	r3, r6
    1cf8:	d104      	bne.n	1d04 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1cfa:	2300      	movs	r3, #0
    1cfc:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1d00:	4610      	mov	r0, r2
    1d02:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1d04:	7844      	ldrb	r4, [r0, #1]
    1d06:	0924      	lsrs	r4, r4, #4
    1d08:	3302      	adds	r3, #2
    1d0a:	5d2c      	ldrb	r4, [r5, r4]
    1d0c:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1d10:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1d14:	f004 040f 	and.w	r4, r4, #15
    1d18:	5d2c      	ldrb	r4, [r5, r4]
    1d1a:	f803 4c01 	strb.w	r4, [r3, #-1]
    1d1e:	e7ea      	b.n	1cf6 <bt_hex+0x36>
    1d20:	20000074 	.word	0x20000074
    1d24:	20000075 	.word	0x20000075
    1d28:	00015f3b 	.word	0x00015f3b

00001d2c <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1d2c:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d2e:	4a0f      	ldr	r2, [pc, #60]	; (1d6c <bt_addr_str+0x40>)
    1d30:	4c0f      	ldr	r4, [pc, #60]	; (1d70 <bt_addr_str+0x44>)
    1d32:	7813      	ldrb	r3, [r2, #0]
    1d34:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1d38:	3301      	adds	r3, #1
{
    1d3a:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1d3c:	f003 0301 	and.w	r3, r3, #1
    1d40:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1d42:	7802      	ldrb	r2, [r0, #0]
    1d44:	7943      	ldrb	r3, [r0, #5]
    1d46:	9204      	str	r2, [sp, #16]
    1d48:	7842      	ldrb	r2, [r0, #1]
    1d4a:	9203      	str	r2, [sp, #12]
    1d4c:	7882      	ldrb	r2, [r0, #2]
    1d4e:	9202      	str	r2, [sp, #8]
    1d50:	78c2      	ldrb	r2, [r0, #3]
    1d52:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1d54:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1d58:	7902      	ldrb	r2, [r0, #4]
    1d5a:	9200      	str	r2, [sp, #0]
    1d5c:	2112      	movs	r1, #18
    1d5e:	4a05      	ldr	r2, [pc, #20]	; (1d74 <bt_addr_str+0x48>)
    1d60:	4620      	mov	r0, r4
    1d62:	f7ff f921 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1d66:	4620      	mov	r0, r4
    1d68:	b006      	add	sp, #24
    1d6a:	bd10      	pop	{r4, pc}
    1d6c:	20000072 	.word	0x20000072
    1d70:	20000018 	.word	0x20000018
    1d74:	00015f1d 	.word	0x00015f1d

00001d78 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1d78:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d7a:	4a1d      	ldr	r2, [pc, #116]	; (1df0 <bt_addr_le_str+0x78>)
    1d7c:	491d      	ldr	r1, [pc, #116]	; (1df4 <bt_addr_le_str+0x7c>)
    1d7e:	7813      	ldrb	r3, [r2, #0]
    1d80:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1d84:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1d86:	f003 0301 	and.w	r3, r3, #1
    1d8a:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1d8c:	7803      	ldrb	r3, [r0, #0]
{
    1d8e:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1d90:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1d94:	4604      	mov	r4, r0
	str = bufs[cur++];
    1d96:	440e      	add	r6, r1
    1d98:	ad07      	add	r5, sp, #28
    1d9a:	2b03      	cmp	r3, #3
    1d9c:	d821      	bhi.n	1de2 <bt_addr_le_str+0x6a>
    1d9e:	e8df f003 	tbb	[pc, r3]
    1da2:	1a02      	.short	0x1a02
    1da4:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1da6:	4914      	ldr	r1, [pc, #80]	; (1df8 <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1da8:	4628      	mov	r0, r5
    1daa:	f7ff ff05 	bl	1bb8 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1dae:	7862      	ldrb	r2, [r4, #1]
    1db0:	9204      	str	r2, [sp, #16]
    1db2:	78a2      	ldrb	r2, [r4, #2]
    1db4:	9203      	str	r2, [sp, #12]
    1db6:	78e2      	ldrb	r2, [r4, #3]
    1db8:	9202      	str	r2, [sp, #8]
    1dba:	7922      	ldrb	r2, [r4, #4]
    1dbc:	9201      	str	r2, [sp, #4]
    1dbe:	7962      	ldrb	r2, [r4, #5]
    1dc0:	9200      	str	r2, [sp, #0]
    1dc2:	79a3      	ldrb	r3, [r4, #6]
    1dc4:	9505      	str	r5, [sp, #20]
    1dc6:	4a0d      	ldr	r2, [pc, #52]	; (1dfc <bt_addr_le_str+0x84>)
    1dc8:	211b      	movs	r1, #27
    1dca:	4630      	mov	r0, r6
    1dcc:	f7ff f8ec 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1dd0:	4630      	mov	r0, r6
    1dd2:	b00a      	add	sp, #40	; 0x28
    1dd4:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1dd6:	490a      	ldr	r1, [pc, #40]	; (1e00 <bt_addr_le_str+0x88>)
    1dd8:	e7e6      	b.n	1da8 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1dda:	490a      	ldr	r1, [pc, #40]	; (1e04 <bt_addr_le_str+0x8c>)
    1ddc:	e7e4      	b.n	1da8 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1dde:	490a      	ldr	r1, [pc, #40]	; (1e08 <bt_addr_le_str+0x90>)
    1de0:	e7e2      	b.n	1da8 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1de2:	4a0a      	ldr	r2, [pc, #40]	; (1e0c <bt_addr_le_str+0x94>)
    1de4:	210a      	movs	r1, #10
    1de6:	4628      	mov	r0, r5
    1de8:	f7ff f8de 	bl	fa8 <snprintk>
    1dec:	e7df      	b.n	1dae <bt_addr_le_str+0x36>
    1dee:	bf00      	nop
    1df0:	20000073 	.word	0x20000073
    1df4:	2000003c 	.word	0x2000003c
    1df8:	00015955 	.word	0x00015955
    1dfc:	0001597e 	.word	0x0001597e
    1e00:	0001595c 	.word	0x0001595c
    1e04:	00015963 	.word	0x00015963
    1e08:	0001596d 	.word	0x0001596d
    1e0c:	00015977 	.word	0x00015977

00001e10 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1e10:	b530      	push	{r4, r5, lr}
    1e12:	b085      	sub	sp, #20
    1e14:	4604      	mov	r4, r0
    1e16:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1e18:	4668      	mov	r0, sp
    1e1a:	2203      	movs	r2, #3
    1e1c:	f7ff ff00 	bl	1c20 <memcpy>
	memset(res + 3, 0, 13);
    1e20:	220d      	movs	r2, #13
    1e22:	2100      	movs	r1, #0
    1e24:	f10d 0003 	add.w	r0, sp, #3
    1e28:	f7ff ff26 	bl	1c78 <memset>

	err = bt_encrypt_le(irk, res, res);
    1e2c:	4620      	mov	r0, r4
    1e2e:	466a      	mov	r2, sp
    1e30:	4669      	mov	r1, sp
    1e32:	f005 ff8d 	bl	7d50 <bt_encrypt_le>
	if (err) {
    1e36:	4604      	mov	r4, r0
    1e38:	b920      	cbnz	r0, 1e44 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1e3a:	2203      	movs	r2, #3
    1e3c:	4669      	mov	r1, sp
    1e3e:	4628      	mov	r0, r5
    1e40:	f7ff feee 	bl	1c20 <memcpy>

	return 0;
}
    1e44:	4620      	mov	r0, r4
    1e46:	b005      	add	sp, #20
    1e48:	bd30      	pop	{r4, r5, pc}

00001e4a <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1e4a:	b513      	push	{r0, r1, r4, lr}
    1e4c:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1e4e:	aa01      	add	r2, sp, #4
    1e50:	3103      	adds	r1, #3
    1e52:	f7ff ffdd 	bl	1e10 <ah>
	if (err) {
    1e56:	b948      	cbnz	r0, 1e6c <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1e58:	2203      	movs	r2, #3
    1e5a:	a901      	add	r1, sp, #4
    1e5c:	4620      	mov	r0, r4
    1e5e:	f7ff feca 	bl	1bf6 <memcmp>
    1e62:	fab0 f080 	clz	r0, r0
    1e66:	0940      	lsrs	r0, r0, #5
}
    1e68:	b002      	add	sp, #8
    1e6a:	bd10      	pop	{r4, pc}
		return false;
    1e6c:	2000      	movs	r0, #0
    1e6e:	e7fb      	b.n	1e68 <bt_rpa_irk_matches+0x1e>

00001e70 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1e70:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1e72:	1ccd      	adds	r5, r1, #3
{
    1e74:	4606      	mov	r6, r0
    1e76:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1e78:	4628      	mov	r0, r5
    1e7a:	2103      	movs	r1, #3
    1e7c:	f005 ff4c 	bl	7d18 <bt_rand>
	if (err) {
    1e80:	b960      	cbnz	r0, 1e9c <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1e82:	7963      	ldrb	r3, [r4, #5]
    1e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e8c:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1e8e:	4622      	mov	r2, r4
    1e90:	4629      	mov	r1, r5
    1e92:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1e98:	f7ff bfba 	b.w	1e10 <ah>
}
    1e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

00001ea0 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1ea0:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1ea2:	7802      	ldrb	r2, [r0, #0]
    1ea4:	2a01      	cmp	r2, #1
{
    1ea6:	4604      	mov	r4, r0
    1ea8:	460b      	mov	r3, r1
	switch (src->type) {
    1eaa:	d017      	beq.n	1edc <uuid_to_uuid128+0x3c>
    1eac:	d303      	bcc.n	1eb6 <uuid_to_uuid128+0x16>
    1eae:	2a02      	cmp	r2, #2
    1eb0:	d02c      	beq.n	1f0c <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1eb2:	bcf0      	pop	{r4, r5, r6, r7}
    1eb4:	4770      	bx	lr
		*dst = uuid128_base;
    1eb6:	4a18      	ldr	r2, [pc, #96]	; (1f18 <uuid_to_uuid128+0x78>)
    1eb8:	460d      	mov	r5, r1
    1eba:	f102 0710 	add.w	r7, r2, #16
    1ebe:	6810      	ldr	r0, [r2, #0]
    1ec0:	6851      	ldr	r1, [r2, #4]
    1ec2:	462e      	mov	r6, r5
    1ec4:	c603      	stmia	r6!, {r0, r1}
    1ec6:	3208      	adds	r2, #8
    1ec8:	42ba      	cmp	r2, r7
    1eca:	4635      	mov	r5, r6
    1ecc:	d1f7      	bne.n	1ebe <uuid_to_uuid128+0x1e>
    1ece:	7812      	ldrb	r2, [r2, #0]
    1ed0:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1ed2:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1ed4:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1ed6:	0a12      	lsrs	r2, r2, #8
    1ed8:	739a      	strb	r2, [r3, #14]
    1eda:	e7ea      	b.n	1eb2 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1edc:	4a0e      	ldr	r2, [pc, #56]	; (1f18 <uuid_to_uuid128+0x78>)
    1ede:	460d      	mov	r5, r1
    1ee0:	f102 0710 	add.w	r7, r2, #16
    1ee4:	6810      	ldr	r0, [r2, #0]
    1ee6:	6851      	ldr	r1, [r2, #4]
    1ee8:	462e      	mov	r6, r5
    1eea:	c603      	stmia	r6!, {r0, r1}
    1eec:	3208      	adds	r2, #8
    1eee:	42ba      	cmp	r2, r7
    1ef0:	4635      	mov	r5, r6
    1ef2:	d1f7      	bne.n	1ee4 <uuid_to_uuid128+0x44>
    1ef4:	7812      	ldrb	r2, [r2, #0]
    1ef6:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1ef8:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1efa:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1efc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1f00:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1f02:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1f04:	0a12      	lsrs	r2, r2, #8
    1f06:	7399      	strb	r1, [r3, #14]
    1f08:	741a      	strb	r2, [r3, #16]
    1f0a:	e7d2      	b.n	1eb2 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1f0c:	4601      	mov	r1, r0
    1f0e:	2211      	movs	r2, #17
    1f10:	4618      	mov	r0, r3
}
    1f12:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1f14:	f7ff be84 	b.w	1c20 <memcpy>
    1f18:	00015f4c 	.word	0x00015f4c

00001f1c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1f1c:	b510      	push	{r4, lr}
    1f1e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1f20:	7801      	ldrb	r1, [r0, #0]
    1f22:	7822      	ldrb	r2, [r4, #0]
    1f24:	428a      	cmp	r2, r1
{
    1f26:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1f28:	d00e      	beq.n	1f48 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1f2a:	4669      	mov	r1, sp
    1f2c:	f7ff ffb8 	bl	1ea0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1f30:	a905      	add	r1, sp, #20
    1f32:	4620      	mov	r0, r4
    1f34:	f7ff ffb4 	bl	1ea0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1f38:	2210      	movs	r2, #16
    1f3a:	f10d 0115 	add.w	r1, sp, #21
    1f3e:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f42:	f7ff fe58 	bl	1bf6 <memcmp>
    1f46:	e00a      	b.n	1f5e <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1f48:	2a01      	cmp	r2, #1
    1f4a:	d00a      	beq.n	1f62 <bt_uuid_cmp+0x46>
    1f4c:	d304      	bcc.n	1f58 <bt_uuid_cmp+0x3c>
    1f4e:	2a02      	cmp	r2, #2
    1f50:	d00a      	beq.n	1f68 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1f52:	f06f 0015 	mvn.w	r0, #21
    1f56:	e002      	b.n	1f5e <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1f58:	8840      	ldrh	r0, [r0, #2]
    1f5a:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f5c:	1ac0      	subs	r0, r0, r3
}
    1f5e:	b00a      	add	sp, #40	; 0x28
    1f60:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f62:	6840      	ldr	r0, [r0, #4]
    1f64:	6863      	ldr	r3, [r4, #4]
    1f66:	e7f9      	b.n	1f5c <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f68:	2210      	movs	r2, #16
    1f6a:	1c61      	adds	r1, r4, #1
    1f6c:	3001      	adds	r0, #1
    1f6e:	e7e8      	b.n	1f42 <bt_uuid_cmp+0x26>

00001f70 <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    1f70:	4770      	bx	lr
	...

00001f74 <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    1f74:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    1f76:	4d0b      	ldr	r5, [pc, #44]	; (1fa4 <ver_str+0x30>)
{
    1f78:	4606      	mov	r6, r0
	const char * const str[] = {
    1f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    1f7c:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    1f7e:	466c      	mov	r4, sp
    1f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f86:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    1f8a:	2e09      	cmp	r6, #9
	const char * const str[] = {
    1f8c:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    1f90:	bf9b      	ittet	ls
    1f92:	ab0a      	addls	r3, sp, #40	; 0x28
    1f94:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    1f98:	4803      	ldrhi	r0, [pc, #12]	; (1fa8 <ver_str+0x34>)
		return str[ver];
    1f9a:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    1f9e:	b00a      	add	sp, #40	; 0x28
    1fa0:	bd70      	pop	{r4, r5, r6, pc}
    1fa2:	bf00      	nop
    1fa4:	0001590c 	.word	0x0001590c
    1fa8:	00016a18 	.word	0x00016a18

00001fac <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1fac:	2207      	movs	r2, #7
    1fae:	f7ff be37 	b.w	1c20 <memcpy>

00001fb2 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1fb2:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1fb4:	f3bf 8f5b 	dmb	ish
    1fb8:	e850 3f00 	ldrex	r3, [r0]
    1fbc:	ea43 0201 	orr.w	r2, r3, r1
    1fc0:	e840 2e00 	strex	lr, r2, [r0]
    1fc4:	f1be 0f00 	cmp.w	lr, #0
    1fc8:	d1f6      	bne.n	1fb8 <atomic_or+0x6>
    1fca:	f3bf 8f5b 	dmb	ish
    1fce:	4618      	mov	r0, r3
    1fd0:	f85d fb04 	ldr.w	pc, [sp], #4

00001fd4 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1fd4:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1fd6:	f3bf 8f5b 	dmb	ish
    1fda:	e850 3f00 	ldrex	r3, [r0]
    1fde:	ea03 0201 	and.w	r2, r3, r1
    1fe2:	e840 2e00 	strex	lr, r2, [r0]
    1fe6:	f1be 0f00 	cmp.w	lr, #0
    1fea:	d1f6      	bne.n	1fda <atomic_and+0x6>
    1fec:	f3bf 8f5b 	dmb	ish
    1ff0:	4618      	mov	r0, r3
    1ff2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001ff8 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    1ff8:	78c3      	ldrb	r3, [r0, #3]
    1ffa:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1ffc:	f241 3288 	movw	r2, #5000	; 0x1388
    2000:	f100 0178 	add.w	r1, r0, #120	; 0x78
    2004:	bf08      	it	eq
    2006:	2200      	moveq	r2, #0
    2008:	4801      	ldr	r0, [pc, #4]	; (2010 <update_conn_param+0x18>)
    200a:	f013 ba7f 	b.w	1550c <k_delayed_work_submit_to_queue>
    200e:	bf00      	nop
    2010:	200019f8 	.word	0x200019f8

00002014 <hci_cmd_done>:
{
    2014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2018:	4606      	mov	r6, r0
    201a:	b086      	sub	sp, #24
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    201c:	7990      	ldrb	r0, [r2, #6]
    201e:	4f27      	ldr	r7, [pc, #156]	; (20bc <hci_cmd_done+0xa8>)
{
    2020:	4688      	mov	r8, r1
    2022:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2024:	f011 fd32 	bl	13a8c <net_buf_pool_get>
    2028:	4287      	cmp	r7, r0
    202a:	d014      	beq.n	2056 <hci_cmd_done+0x42>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    202c:	79ac      	ldrb	r4, [r5, #6]
    202e:	4b24      	ldr	r3, [pc, #144]	; (20c0 <hci_cmd_done+0xac>)
    2030:	4620      	mov	r0, r4
    2032:	f8d3 8000 	ldr.w	r8, [r3]
    2036:	f011 fd29 	bl	13a8c <net_buf_pool_get>
    203a:	4a22      	ldr	r2, [pc, #136]	; (20c4 <hci_cmd_done+0xb0>)
    203c:	9003      	str	r0, [sp, #12]
    203e:	9205      	str	r2, [sp, #20]
    2040:	9704      	str	r7, [sp, #16]
    2042:	9402      	str	r4, [sp, #8]
    2044:	e88d 0044 	stmia.w	sp, {r2, r6}
    2048:	4b1f      	ldr	r3, [pc, #124]	; (20c8 <hci_cmd_done+0xb4>)
    204a:	4920      	ldr	r1, [pc, #128]	; (20cc <hci_cmd_done+0xb8>)
    204c:	4820      	ldr	r0, [pc, #128]	; (20d0 <hci_cmd_done+0xbc>)
    204e:	47c0      	blx	r8
}
    2050:	b006      	add	sp, #24
    2052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    2056:	4628      	mov	r0, r5
    2058:	f011 fd20 	bl	13a9c <net_buf_id>
    205c:	4c1d      	ldr	r4, [pc, #116]	; (20d4 <hci_cmd_done+0xc0>)
    205e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2062:	8843      	ldrh	r3, [r0, #2]
    2064:	42b3      	cmp	r3, r6
    2066:	d010      	beq.n	208a <hci_cmd_done+0x76>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    2068:	4b15      	ldr	r3, [pc, #84]	; (20c0 <hci_cmd_done+0xac>)
    206a:	4628      	mov	r0, r5
    206c:	681f      	ldr	r7, [r3, #0]
    206e:	f011 fd15 	bl	13a9c <net_buf_id>
    2072:	4a14      	ldr	r2, [pc, #80]	; (20c4 <hci_cmd_done+0xb0>)
    2074:	9203      	str	r2, [sp, #12]
    2076:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    207a:	4914      	ldr	r1, [pc, #80]	; (20cc <hci_cmd_done+0xb8>)
    207c:	8843      	ldrh	r3, [r0, #2]
    207e:	9302      	str	r3, [sp, #8]
    2080:	e88d 0044 	stmia.w	sp, {r2, r6}
    2084:	4b10      	ldr	r3, [pc, #64]	; (20c8 <hci_cmd_done+0xb4>)
    2086:	4814      	ldr	r0, [pc, #80]	; (20d8 <hci_cmd_done+0xc4>)
    2088:	47b8      	blx	r7
	if (cmd(buf)->sync) {
    208a:	4628      	mov	r0, r5
    208c:	f011 fd06 	bl	13a9c <net_buf_id>
    2090:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2094:	6843      	ldr	r3, [r0, #4]
    2096:	2b00      	cmp	r3, #0
    2098:	d0da      	beq.n	2050 <hci_cmd_done+0x3c>
		cmd(buf)->status = status;
    209a:	4628      	mov	r0, r5
    209c:	f011 fcfe 	bl	13a9c <net_buf_id>
    20a0:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    20a4:	4628      	mov	r0, r5
    20a6:	f011 fcf9 	bl	13a9c <net_buf_id>
    20aa:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    20ae:	6840      	ldr	r0, [r0, #4]
}
    20b0:	b006      	add	sp, #24
    20b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    20b6:	f012 beb9 	b.w	14e2c <_impl_k_sem_give>
    20ba:	bf00      	nop
    20bc:	20004060 	.word	0x20004060
    20c0:	20003ad4 	.word	0x20003ad4
    20c4:	000159e9 	.word	0x000159e9
    20c8:	00016025 	.word	0x00016025
    20cc:	00016791 	.word	0x00016791
    20d0:	00016794 	.word	0x00016794
    20d4:	2000027c 	.word	0x2000027c
    20d8:	000167d9 	.word	0x000167d9

000020dc <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    20dc:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20de:	f3bf 8f5b 	dmb	ish
    20e2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    20e6:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    20ea:	f001 011f 	and.w	r1, r1, #31
    20ee:	4108      	asrs	r0, r1
}
    20f0:	f000 0001 	and.w	r0, r0, #1
    20f4:	4770      	bx	lr
	...

000020f8 <bt_hci_cmd_create>:
{
    20f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20fc:	4680      	mov	r8, r0
    20fe:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2100:	4813      	ldr	r0, [pc, #76]	; (2150 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    2102:	4d14      	ldr	r5, [pc, #80]	; (2154 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2104:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2108:	f011 fd62 	bl	13bd0 <net_buf_alloc_fixed>
    210c:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    210e:	f100 0608 	add.w	r6, r0, #8
    2112:	2100      	movs	r1, #0
    2114:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    2116:	2700      	movs	r7, #0
    2118:	f011 fd79 	bl	13c0e <net_buf_simple_reserve>
    211c:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    211e:	4620      	mov	r0, r4
    2120:	f011 fcbc 	bl	13a9c <net_buf_id>
    2124:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2128:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    212c:	4620      	mov	r0, r4
    212e:	f011 fcb5 	bl	13a9c <net_buf_id>
    2132:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    2136:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    2138:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    213a:	4630      	mov	r0, r6
    213c:	f011 fdb0 	bl	13ca0 <net_buf_simple_add>
	hdr->param_len = param_len;
    2140:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    2144:	f8a0 8000 	strh.w	r8, [r0]
}
    2148:	4620      	mov	r0, r4
    214a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    214e:	bf00      	nop
    2150:	20004060 	.word	0x20004060
    2154:	2000027c 	.word	0x2000027c

00002158 <bt_hci_cmd_send_sync>:
{
    2158:	b5f0      	push	{r4, r5, r6, r7, lr}
    215a:	4615      	mov	r5, r2
    215c:	b089      	sub	sp, #36	; 0x24
	if (!buf) {
    215e:	460c      	mov	r4, r1
    2160:	b919      	cbnz	r1, 216a <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    2162:	f7ff ffc9 	bl	20f8 <bt_hci_cmd_create>
		if (!buf) {
    2166:	4604      	mov	r4, r0
    2168:	b368      	cbz	r0, 21c6 <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    216a:	ae01      	add	r6, sp, #4
    216c:	2201      	movs	r2, #1
    216e:	2100      	movs	r1, #0
    2170:	4630      	mov	r0, r6
    2172:	f012 fe43 	bl	14dfc <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    2176:	4620      	mov	r0, r4
    2178:	f011 fc90 	bl	13a9c <net_buf_id>
    217c:	4f13      	ldr	r7, [pc, #76]	; (21cc <bt_hci_cmd_send_sync+0x74>)
    217e:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    2182:	6046      	str	r6, [r0, #4]
	net_buf_ref(buf);
    2184:	4620      	mov	r0, r4
    2186:	f011 fd87 	bl	13c98 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    218a:	4621      	mov	r1, r4
    218c:	4810      	ldr	r0, [pc, #64]	; (21d0 <bt_hci_cmd_send_sync+0x78>)
    218e:	f011 fd42 	bl	13c16 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2192:	f242 7110 	movw	r1, #10000	; 0x2710
    2196:	4630      	mov	r0, r6
    2198:	f012 fe70 	bl	14e7c <_impl_k_sem_take>
	if (cmd(buf)->status) {
    219c:	4620      	mov	r0, r4
    219e:	f011 fc7d 	bl	13a9c <net_buf_id>
    21a2:	f817 0030 	ldrb.w	r0, [r7, r0, lsl #3]
    21a6:	b130      	cbz	r0, 21b6 <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    21a8:	4620      	mov	r0, r4
    21aa:	f011 fd41 	bl	13c30 <net_buf_unref>
		err = -EIO;
    21ae:	f06f 0004 	mvn.w	r0, #4
}
    21b2:	b009      	add	sp, #36	; 0x24
    21b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (rsp) {
    21b6:	b10d      	cbz	r5, 21bc <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    21b8:	602c      	str	r4, [r5, #0]
    21ba:	e7fa      	b.n	21b2 <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    21bc:	4620      	mov	r0, r4
    21be:	f011 fd37 	bl	13c30 <net_buf_unref>
		err = 0;
    21c2:	4628      	mov	r0, r5
    21c4:	e7f5      	b.n	21b2 <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    21c6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    21ca:	e7f2      	b.n	21b2 <bt_hci_cmd_send_sync+0x5a>
    21cc:	2000027c 	.word	0x2000027c
    21d0:	20003ba0 	.word	0x20003ba0

000021d4 <set_le_scan_enable>:
{
    21d4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    21d6:	2102      	movs	r1, #2
{
    21d8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    21da:	f242 000c 	movw	r0, #8204	; 0x200c
    21de:	f7ff ff8b 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    21e2:	4604      	mov	r4, r0
    21e4:	b330      	cbz	r0, 2234 <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    21e6:	2102      	movs	r1, #2
    21e8:	3008      	adds	r0, #8
    21ea:	f011 fd59 	bl	13ca0 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21ee:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    21f0:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21f2:	d116      	bne.n	2222 <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    21f4:	210b      	movs	r1, #11
    21f6:	4811      	ldr	r0, [pc, #68]	; (223c <set_le_scan_enable+0x68>)
    21f8:	f7ff ff70 	bl	20dc <atomic_test_bit>
    21fc:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    21fe:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2200:	4621      	mov	r1, r4
    2202:	2200      	movs	r2, #0
    2204:	f242 000c 	movw	r0, #8204	; 0x200c
    2208:	f7ff ffa6 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    220c:	4604      	mov	r4, r0
    220e:	b930      	cbnz	r0, 221e <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2210:	2d01      	cmp	r5, #1
    2212:	d109      	bne.n	2228 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2214:	f44f 7180 	mov.w	r1, #256	; 0x100
    2218:	4808      	ldr	r0, [pc, #32]	; (223c <set_le_scan_enable+0x68>)
    221a:	f7ff feca 	bl	1fb2 <atomic_or>
}
    221e:	4620      	mov	r0, r4
    2220:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    2222:	2300      	movs	r3, #0
    2224:	7043      	strb	r3, [r0, #1]
    2226:	e7ea      	b.n	21fe <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2228:	f46f 7180 	mvn.w	r1, #256	; 0x100
    222c:	4803      	ldr	r0, [pc, #12]	; (223c <set_le_scan_enable+0x68>)
    222e:	f7ff fed1 	bl	1fd4 <atomic_and>
    2232:	e7f4      	b.n	221e <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    2234:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2238:	e7f1      	b.n	221e <set_le_scan_enable+0x4a>
    223a:	bf00      	nop
    223c:	20003b48 	.word	0x20003b48

00002240 <set_random_address>:
{
    2240:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    2242:	4d15      	ldr	r5, [pc, #84]	; (2298 <set_random_address+0x58>)
    2244:	2206      	movs	r2, #6
    2246:	f105 0108 	add.w	r1, r5, #8
    224a:	4606      	mov	r6, r0
    224c:	f7ff fcd3 	bl	1bf6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2250:	4604      	mov	r4, r0
    2252:	b1d8      	cbz	r0, 228c <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2254:	2106      	movs	r1, #6
    2256:	f242 0005 	movw	r0, #8197	; 0x2005
    225a:	f7ff ff4d 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    225e:	4604      	mov	r4, r0
    2260:	b1b0      	cbz	r0, 2290 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    2262:	2206      	movs	r2, #6
    2264:	4631      	mov	r1, r6
    2266:	3008      	adds	r0, #8
    2268:	f011 fd20 	bl	13cac <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    226c:	4621      	mov	r1, r4
    226e:	2200      	movs	r2, #0
    2270:	f242 0005 	movw	r0, #8197	; 0x2005
    2274:	f7ff ff70 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2278:	4604      	mov	r4, r0
    227a:	b938      	cbnz	r0, 228c <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    227c:	2206      	movs	r2, #6
    227e:	4631      	mov	r1, r6
    2280:	f105 0008 	add.w	r0, r5, #8
    2284:	f7ff fccc 	bl	1c20 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2288:	2301      	movs	r3, #1
    228a:	71eb      	strb	r3, [r5, #7]
}
    228c:	4620      	mov	r0, r4
    228e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2290:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2294:	e7fa      	b.n	228c <set_random_address+0x4c>
    2296:	bf00      	nop
    2298:	20003ad8 	.word	0x20003ad8

0000229c <le_set_private_addr>:
{
    229c:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    229e:	2106      	movs	r1, #6
    22a0:	4668      	mov	r0, sp
    22a2:	f005 fd39 	bl	7d18 <bt_rand>
	if (err) {
    22a6:	b940      	cbnz	r0, 22ba <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    22a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    22ac:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    22ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    22b2:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    22b6:	f7ff ffc3 	bl	2240 <set_random_address>
}
    22ba:	b003      	add	sp, #12
    22bc:	f85d fb04 	ldr.w	pc, [sp], #4

000022c0 <set_advertise_enable>:
{
    22c0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    22c2:	2101      	movs	r1, #1
{
    22c4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    22c6:	f242 000a 	movw	r0, #8202	; 0x200a
    22ca:	f7ff ff15 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    22ce:	4604      	mov	r4, r0
    22d0:	b1d8      	cbz	r0, 230a <set_advertise_enable+0x4a>
    22d2:	3008      	adds	r0, #8
	if (enable) {
    22d4:	b18d      	cbz	r5, 22fa <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    22d6:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    22d8:	f011 fcf1 	bl	13cbe <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    22dc:	4621      	mov	r1, r4
    22de:	2200      	movs	r2, #0
    22e0:	f242 000a 	movw	r0, #8202	; 0x200a
    22e4:	f7ff ff38 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    22e8:	4604      	mov	r4, r0
    22ea:	b920      	cbnz	r0, 22f6 <set_advertise_enable+0x36>
	if (enable) {
    22ec:	b13d      	cbz	r5, 22fe <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    22ee:	2140      	movs	r1, #64	; 0x40
    22f0:	4807      	ldr	r0, [pc, #28]	; (2310 <set_advertise_enable+0x50>)
    22f2:	f7ff fe5e 	bl	1fb2 <atomic_or>
}
    22f6:	4620      	mov	r0, r4
    22f8:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    22fa:	4629      	mov	r1, r5
    22fc:	e7ec      	b.n	22d8 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    22fe:	f06f 0140 	mvn.w	r1, #64	; 0x40
    2302:	4803      	ldr	r0, [pc, #12]	; (2310 <set_advertise_enable+0x50>)
    2304:	f7ff fe66 	bl	1fd4 <atomic_and>
    2308:	e7f5      	b.n	22f6 <set_advertise_enable+0x36>
		return -ENOBUFS;
    230a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    230e:	e7f2      	b.n	22f6 <set_advertise_enable+0x36>
    2310:	20003b48 	.word	0x20003b48

00002314 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    2314:	8802      	ldrh	r2, [r0, #0]
    2316:	8843      	ldrh	r3, [r0, #2]
    2318:	429a      	cmp	r2, r3
{
    231a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    231c:	d818      	bhi.n	2350 <bt_le_conn_params_valid+0x3c>
    231e:	2a05      	cmp	r2, #5
    2320:	d916      	bls.n	2350 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    2322:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    2326:	d813      	bhi.n	2350 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    2328:	8884      	ldrh	r4, [r0, #4]
    232a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    232e:	d20f      	bcs.n	2350 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    2330:	88c1      	ldrh	r1, [r0, #6]
    2332:	f1a1 020a 	sub.w	r2, r1, #10
    2336:	b292      	uxth	r2, r2
    2338:	f640 4076 	movw	r0, #3190	; 0xc76
    233c:	4282      	cmp	r2, r0
    233e:	d807      	bhi.n	2350 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    2340:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    2344:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    2348:	bfb4      	ite	lt
    234a:	2001      	movlt	r0, #1
    234c:	2000      	movge	r0, #0
    234e:	bd10      	pop	{r4, pc}
		return false;
    2350:	2000      	movs	r0, #0
}
    2352:	bd10      	pop	{r4, pc}

00002354 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    2354:	2301      	movs	r3, #1
{
    2356:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2358:	2106      	movs	r1, #6
{
    235a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    235c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2360:	f005 fcda 	bl	7d18 <bt_rand>
	if (err) {
    2364:	b918      	cbnz	r0, 236e <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    2366:	79a3      	ldrb	r3, [r4, #6]
    2368:	f063 033f 	orn	r3, r3, #63	; 0x3f
    236c:	71a3      	strb	r3, [r4, #6]
}
    236e:	bd10      	pop	{r4, pc}

00002370 <bt_set_static_addr>:
{
    2370:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2372:	4c11      	ldr	r4, [pc, #68]	; (23b8 <bt_set_static_addr+0x48>)
    2374:	7823      	ldrb	r3, [r4, #0]
    2376:	2b01      	cmp	r3, #1
    2378:	d104      	bne.n	2384 <bt_set_static_addr+0x14>
    237a:	79a3      	ldrb	r3, [r4, #6]
    237c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2380:	2bc0      	cmp	r3, #192	; 0xc0
    2382:	d00d      	beq.n	23a0 <bt_set_static_addr+0x30>
		BT_ERR("Only static random address supported as identity");
    2384:	4a0d      	ldr	r2, [pc, #52]	; (23bc <bt_set_static_addr+0x4c>)
    2386:	4b0e      	ldr	r3, [pc, #56]	; (23c0 <bt_set_static_addr+0x50>)
    2388:	9201      	str	r2, [sp, #4]
    238a:	9200      	str	r2, [sp, #0]
    238c:	681c      	ldr	r4, [r3, #0]
    238e:	490d      	ldr	r1, [pc, #52]	; (23c4 <bt_set_static_addr+0x54>)
    2390:	4b0d      	ldr	r3, [pc, #52]	; (23c8 <bt_set_static_addr+0x58>)
    2392:	480e      	ldr	r0, [pc, #56]	; (23cc <bt_set_static_addr+0x5c>)
    2394:	47a0      	blx	r4
    2396:	f06f 0515 	mvn.w	r5, #21
}
    239a:	4628      	mov	r0, r5
    239c:	b003      	add	sp, #12
    239e:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    23a0:	1c60      	adds	r0, r4, #1
    23a2:	f7ff ff4d 	bl	2240 <set_random_address>
	if (err) {
    23a6:	4605      	mov	r5, r0
    23a8:	2800      	cmp	r0, #0
    23aa:	d1f6      	bne.n	239a <bt_set_static_addr+0x2a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    23ac:	2104      	movs	r1, #4
    23ae:	f104 0070 	add.w	r0, r4, #112	; 0x70
    23b2:	f7ff fdfe 	bl	1fb2 <atomic_or>
	return 0;
    23b6:	e7f0      	b.n	239a <bt_set_static_addr+0x2a>
    23b8:	20003ad8 	.word	0x20003ad8
    23bc:	000159e9 	.word	0x000159e9
    23c0:	20003ad4 	.word	0x20003ad4
    23c4:	00016791 	.word	0x00016791
    23c8:	0001607c 	.word	0x0001607c
    23cc:	00016750 	.word	0x00016750

000023d0 <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    23d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    23d4:	4d1f      	ldr	r5, [pc, #124]	; (2454 <bt_dev_show_info+0x84>)
    23d6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 2470 <bt_dev_show_info+0xa0>
    23da:	4c1f      	ldr	r4, [pc, #124]	; (2458 <bt_dev_show_info+0x88>)
    23dc:	f8d8 9000 	ldr.w	r9, [r8]
    23e0:	4f1e      	ldr	r7, [pc, #120]	; (245c <bt_dev_show_info+0x8c>)
    23e2:	4e1f      	ldr	r6, [pc, #124]	; (2460 <bt_dev_show_info+0x90>)
{
    23e4:	b086      	sub	sp, #24
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    23e6:	4628      	mov	r0, r5
    23e8:	f7ff fcc6 	bl	1d78 <bt_addr_le_str>
    23ec:	463b      	mov	r3, r7
    23ee:	4622      	mov	r2, r4
    23f0:	4631      	mov	r1, r6
    23f2:	9001      	str	r0, [sp, #4]
    23f4:	9402      	str	r4, [sp, #8]
    23f6:	9400      	str	r4, [sp, #0]
    23f8:	481a      	ldr	r0, [pc, #104]	; (2464 <bt_dev_show_info+0x94>)
    23fa:	47c8      	blx	r9
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    23fc:	f895 900e 	ldrb.w	r9, [r5, #14]
    2400:	f8d8 a000 	ldr.w	sl, [r8]
    2404:	4648      	mov	r0, r9
    2406:	f7ff fdb5 	bl	1f74 <ver_str>
    240a:	8aab      	ldrh	r3, [r5, #20]
    240c:	9304      	str	r3, [sp, #16]
    240e:	8a2b      	ldrh	r3, [r5, #16]
    2410:	9303      	str	r3, [sp, #12]
    2412:	4622      	mov	r2, r4
    2414:	463b      	mov	r3, r7
    2416:	4631      	mov	r1, r6
    2418:	f8cd 9008 	str.w	r9, [sp, #8]
    241c:	9001      	str	r0, [sp, #4]
    241e:	9405      	str	r4, [sp, #20]
    2420:	9400      	str	r4, [sp, #0]
    2422:	4811      	ldr	r0, [pc, #68]	; (2468 <bt_dev_show_info+0x98>)
    2424:	47d0      	blx	sl
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    2426:	f8d8 9000 	ldr.w	r9, [r8]
    242a:	f895 800f 	ldrb.w	r8, [r5, #15]
    242e:	4640      	mov	r0, r8
    2430:	f7ff fda0 	bl	1f74 <ver_str>
    2434:	8a6b      	ldrh	r3, [r5, #18]
    2436:	9303      	str	r3, [sp, #12]
    2438:	9001      	str	r0, [sp, #4]
    243a:	9404      	str	r4, [sp, #16]
    243c:	f8cd 8008 	str.w	r8, [sp, #8]
    2440:	9400      	str	r4, [sp, #0]
    2442:	463b      	mov	r3, r7
    2444:	4622      	mov	r2, r4
    2446:	4631      	mov	r1, r6
    2448:	4808      	ldr	r0, [pc, #32]	; (246c <bt_dev_show_info+0x9c>)
    244a:	47c8      	blx	r9
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    244c:	b006      	add	sp, #24
    244e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2452:	bf00      	nop
    2454:	20003ad8 	.word	0x20003ad8
    2458:	000159e9 	.word	0x000159e9
    245c:	0001609d 	.word	0x0001609d
    2460:	00016791 	.word	0x00016791
    2464:	000160e2 	.word	0x000160e2
    2468:	000160ff 	.word	0x000160ff
    246c:	0001614d 	.word	0x0001614d
    2470:	20003ad4 	.word	0x20003ad4

00002474 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2474:	4b02      	ldr	r3, [pc, #8]	; (2480 <bt_send+0xc>)
    2476:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    247a:	691b      	ldr	r3, [r3, #16]
    247c:	4718      	bx	r3
    247e:	bf00      	nop
    2480:	20003ad8 	.word	0x20003ad8

00002484 <bt_hci_cmd_send>:
{
    2484:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2486:	4604      	mov	r4, r0
	if (!buf) {
    2488:	460d      	mov	r5, r1
    248a:	b919      	cbnz	r1, 2494 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    248c:	f7ff fe34 	bl	20f8 <bt_hci_cmd_create>
		if (!buf) {
    2490:	4605      	mov	r5, r0
    2492:	b1f0      	cbz	r0, 24d2 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2494:	f640 4335 	movw	r3, #3125	; 0xc35
    2498:	429c      	cmp	r4, r3
    249a:	d114      	bne.n	24c6 <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
    249c:	4628      	mov	r0, r5
    249e:	f7ff ffe9 	bl	2474 <bt_send>
		if (err) {
    24a2:	4604      	mov	r4, r0
    24a4:	b160      	cbz	r0, 24c0 <bt_hci_cmd_send+0x3c>
			BT_ERR("Unable to send to driver (err %d)", err);
    24a6:	4a0c      	ldr	r2, [pc, #48]	; (24d8 <bt_hci_cmd_send+0x54>)
    24a8:	4b0c      	ldr	r3, [pc, #48]	; (24dc <bt_hci_cmd_send+0x58>)
    24aa:	9202      	str	r2, [sp, #8]
    24ac:	e88d 0014 	stmia.w	sp, {r2, r4}
    24b0:	480b      	ldr	r0, [pc, #44]	; (24e0 <bt_hci_cmd_send+0x5c>)
    24b2:	681e      	ldr	r6, [r3, #0]
    24b4:	490b      	ldr	r1, [pc, #44]	; (24e4 <bt_hci_cmd_send+0x60>)
    24b6:	4b0c      	ldr	r3, [pc, #48]	; (24e8 <bt_hci_cmd_send+0x64>)
    24b8:	47b0      	blx	r6
			net_buf_unref(buf);
    24ba:	4628      	mov	r0, r5
    24bc:	f011 fbb8 	bl	13c30 <net_buf_unref>
}
    24c0:	4620      	mov	r0, r4
    24c2:	b004      	add	sp, #16
    24c4:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    24c6:	4629      	mov	r1, r5
    24c8:	4808      	ldr	r0, [pc, #32]	; (24ec <bt_hci_cmd_send+0x68>)
    24ca:	f011 fba4 	bl	13c16 <net_buf_put>
	return 0;
    24ce:	2400      	movs	r4, #0
    24d0:	e7f6      	b.n	24c0 <bt_hci_cmd_send+0x3c>
			return -ENOBUFS;
    24d2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    24d6:	e7f3      	b.n	24c0 <bt_hci_cmd_send+0x3c>
    24d8:	000159e9 	.word	0x000159e9
    24dc:	20003ad4 	.word	0x20003ad4
    24e0:	000161d9 	.word	0x000161d9
    24e4:	00016791 	.word	0x00016791
    24e8:	00015f5d 	.word	0x00015f5d
    24ec:	20003ba0 	.word	0x20003ba0

000024f0 <start_le_scan>:
{
    24f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    24f2:	4605      	mov	r5, r0
    24f4:	460e      	mov	r6, r1
    24f6:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    24f8:	2100      	movs	r1, #0
    24fa:	2207      	movs	r2, #7
    24fc:	4668      	mov	r0, sp
    24fe:	f7ff fbbb 	bl	1c78 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    2502:	4821      	ldr	r0, [pc, #132]	; (2588 <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    2504:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    2508:	2300      	movs	r3, #0
    250a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    250e:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    2510:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    2512:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    2516:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    251a:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    251e:	d10a      	bne.n	2536 <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2520:	2106      	movs	r1, #6
    2522:	3070      	adds	r0, #112	; 0x70
    2524:	f7ff fdda 	bl	20dc <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    2528:	b928      	cbnz	r0, 2536 <start_le_scan+0x46>
			err = le_set_private_addr();
    252a:	f7ff feb7 	bl	229c <le_set_private_addr>
			if (err) {
    252e:	4604      	mov	r4, r0
    2530:	b9f0      	cbnz	r0, 2570 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    2532:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    2536:	2107      	movs	r1, #7
    2538:	f242 000b 	movw	r0, #8203	; 0x200b
    253c:	f7ff fddc 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2540:	4604      	mov	r4, r0
    2542:	b1f0      	cbz	r0, 2582 <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    2544:	2207      	movs	r2, #7
    2546:	4669      	mov	r1, sp
    2548:	3008      	adds	r0, #8
    254a:	f011 fbaf 	bl	13cac <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    254e:	4621      	mov	r1, r4
    2550:	f242 000b 	movw	r0, #8203	; 0x200b
    2554:	f7ff ff96 	bl	2484 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    2558:	2001      	movs	r0, #1
    255a:	f7ff fe3b 	bl	21d4 <set_le_scan_enable>
	if (err) {
    255e:	4604      	mov	r4, r0
    2560:	b930      	cbnz	r0, 2570 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    2562:	2d01      	cmp	r5, #1
    2564:	d107      	bne.n	2576 <start_le_scan+0x86>
    2566:	f44f 6180 	mov.w	r1, #1024	; 0x400
    256a:	4808      	ldr	r0, [pc, #32]	; (258c <start_le_scan+0x9c>)
    256c:	f7ff fd21 	bl	1fb2 <atomic_or>
}
    2570:	4620      	mov	r0, r4
    2572:	b002      	add	sp, #8
    2574:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2576:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    257a:	4804      	ldr	r0, [pc, #16]	; (258c <start_le_scan+0x9c>)
    257c:	f7ff fd2a 	bl	1fd4 <atomic_and>
    2580:	e7f6      	b.n	2570 <start_le_scan+0x80>
		return -ENOBUFS;
    2582:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2586:	e7f3      	b.n	2570 <start_le_scan+0x80>
    2588:	20003ad8 	.word	0x20003ad8
    258c:	20003b48 	.word	0x20003b48

00002590 <bt_le_scan_update>:
{
    2590:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2592:	2109      	movs	r1, #9
{
    2594:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2596:	4816      	ldr	r0, [pc, #88]	; (25f0 <bt_le_scan_update+0x60>)
    2598:	f7ff fda0 	bl	20dc <atomic_test_bit>
    259c:	4602      	mov	r2, r0
    259e:	b108      	cbz	r0, 25a4 <bt_le_scan_update+0x14>
		return 0;
    25a0:	2000      	movs	r0, #0
    25a2:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    25a4:	2108      	movs	r1, #8
    25a6:	4812      	ldr	r0, [pc, #72]	; (25f0 <bt_le_scan_update+0x60>)
    25a8:	f7ff fd98 	bl	20dc <atomic_test_bit>
    25ac:	b9d0      	cbnz	r0, 25e4 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    25ae:	2101      	movs	r1, #1
    25b0:	2000      	movs	r0, #0
    25b2:	f001 fe55 	bl	4260 <bt_conn_lookup_state_le>
		if (!conn) {
    25b6:	4604      	mov	r4, r0
    25b8:	2800      	cmp	r0, #0
    25ba:	d0f1      	beq.n	25a0 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    25bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    25c0:	480b      	ldr	r0, [pc, #44]	; (25f0 <bt_le_scan_update+0x60>)
    25c2:	f7ff fcf6 	bl	1fb2 <atomic_or>
		bt_conn_unref(conn);
    25c6:	4620      	mov	r0, r4
    25c8:	f001 fe68 	bl	429c <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    25cc:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    25ce:	bf15      	itete	ne
    25d0:	2230      	movne	r2, #48	; 0x30
    25d2:	2212      	moveq	r2, #18
    25d4:	2160      	movne	r1, #96	; 0x60
    25d6:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    25da:	2000      	movs	r0, #0
}
    25dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    25e0:	f7ff bf86 	b.w	24f0 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    25e4:	4610      	mov	r0, r2
    25e6:	f7ff fdf5 	bl	21d4 <set_le_scan_enable>
		if (err) {
    25ea:	2800      	cmp	r0, #0
    25ec:	d0df      	beq.n	25ae <bt_le_scan_update+0x1e>
    25ee:	bd38      	pop	{r3, r4, r5, pc}
    25f0:	20003b48 	.word	0x20003b48

000025f4 <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    25f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    25f8:	4d4d      	ldr	r5, [pc, #308]	; (2730 <bt_init+0x13c>)
    25fa:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    25fe:	6899      	ldr	r1, [r3, #8]
    2600:	f011 0101 	ands.w	r1, r1, #1
{
    2604:	b08e      	sub	sp, #56	; 0x38
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2606:	d124      	bne.n	2652 <bt_init+0x5e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2608:	aa0c      	add	r2, sp, #48	; 0x30
    260a:	f640 4003 	movw	r0, #3075	; 0xc03
    260e:	f7ff fda3 	bl	2158 <bt_hci_cmd_send_sync>
		if (err) {
    2612:	4604      	mov	r4, r0
    2614:	2800      	cmp	r0, #0
    2616:	f040 8087 	bne.w	2728 <bt_init+0x134>
	u8_t status = buf->data[0];
    261a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    261c:	689b      	ldr	r3, [r3, #8]
	if (status) {
    261e:	781b      	ldrb	r3, [r3, #0]
    2620:	b9a3      	cbnz	r3, 264c <bt_init+0x58>
	scan_dev_found_cb = NULL;
    2622:	4a44      	ldr	r2, [pc, #272]	; (2734 <bt_init+0x140>)
    2624:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2626:	462b      	mov	r3, r5
    2628:	f3bf 8f5b 	dmb	ish
    262c:	f853 2f70 	ldr.w	r2, [r3, #112]!
    2630:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2634:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2638:	f3bf 8f5b 	dmb	ish
    263c:	e853 1f00 	ldrex	r1, [r3]
    2640:	e843 2000 	strex	r0, r2, [r3]
    2644:	2800      	cmp	r0, #0
    2646:	d1f9      	bne.n	263c <bt_init+0x48>
    2648:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    264c:	980c      	ldr	r0, [sp, #48]	; 0x30
    264e:	f011 faef 	bl	13c30 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2652:	aa0c      	add	r2, sp, #48	; 0x30
    2654:	2100      	movs	r1, #0
    2656:	f241 0003 	movw	r0, #4099	; 0x1003
    265a:	f7ff fd7d 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    265e:	4604      	mov	r4, r0
    2660:	2800      	cmp	r0, #0
    2662:	d161      	bne.n	2728 <bt_init+0x134>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2666:	4834      	ldr	r0, [pc, #208]	; (2738 <bt_init+0x144>)
    2668:	6899      	ldr	r1, [r3, #8]
    266a:	2208      	movs	r2, #8
    266c:	3101      	adds	r1, #1
    266e:	f7ff fad7 	bl	1c20 <memcpy>
	net_buf_unref(rsp);
    2672:	980c      	ldr	r0, [sp, #48]	; 0x30
    2674:	f011 fadc 	bl	13c30 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    2678:	4621      	mov	r1, r4
    267a:	aa0c      	add	r2, sp, #48	; 0x30
    267c:	f241 0001 	movw	r0, #4097	; 0x1001
    2680:	f7ff fd6a 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2684:	4604      	mov	r4, r0
    2686:	2800      	cmp	r0, #0
    2688:	d14e      	bne.n	2728 <bt_init+0x134>
	read_local_ver_complete(rsp);
    268a:	980c      	ldr	r0, [sp, #48]	; 0x30
    268c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    268e:	785a      	ldrb	r2, [r3, #1]
    2690:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2692:	78d9      	ldrb	r1, [r3, #3]
    2694:	789a      	ldrb	r2, [r3, #2]
    2696:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    269a:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    269c:	791a      	ldrb	r2, [r3, #4]
    269e:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    26a0:	7a19      	ldrb	r1, [r3, #8]
    26a2:	79da      	ldrb	r2, [r3, #7]
    26a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    26a8:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    26aa:	795a      	ldrb	r2, [r3, #5]
    26ac:	799b      	ldrb	r3, [r3, #6]
    26ae:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    26b2:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    26b4:	f011 fabc 	bl	13c30 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    26b8:	2103      	movs	r1, #3
    26ba:	4820      	ldr	r0, [pc, #128]	; (273c <bt_init+0x148>)
    26bc:	f7ff fd0e 	bl	20dc <atomic_test_bit>
    26c0:	4601      	mov	r1, r0
    26c2:	b988      	cbnz	r0, 26e8 <bt_init+0xf4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    26c4:	aa0c      	add	r2, sp, #48	; 0x30
    26c6:	f241 0009 	movw	r0, #4105	; 0x1009
    26ca:	f7ff fd45 	bl	2158 <bt_hci_cmd_send_sync>
		if (err) {
    26ce:	4604      	mov	r4, r0
    26d0:	bb50      	cbnz	r0, 2728 <bt_init+0x134>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    26d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    26d4:	481a      	ldr	r0, [pc, #104]	; (2740 <bt_init+0x14c>)
    26d6:	6899      	ldr	r1, [r3, #8]
    26d8:	2206      	movs	r2, #6
    26da:	3101      	adds	r1, #1
    26dc:	f7ff faa0 	bl	1c20 <memcpy>
		net_buf_unref(rsp);
    26e0:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    26e2:	702c      	strb	r4, [r5, #0]
		net_buf_unref(rsp);
    26e4:	f011 faa4 	bl	13c30 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    26e8:	aa0c      	add	r2, sp, #48	; 0x30
    26ea:	2100      	movs	r1, #0
    26ec:	f241 0002 	movw	r0, #4098	; 0x1002
    26f0:	f7ff fd32 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    26f4:	4604      	mov	r4, r0
    26f6:	b9b8      	cbnz	r0, 2728 <bt_init+0x134>
	memcpy(bt_dev.supported_commands, rp->commands,
    26f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    26fa:	4812      	ldr	r0, [pc, #72]	; (2744 <bt_init+0x150>)
    26fc:	6899      	ldr	r1, [r3, #8]
    26fe:	2240      	movs	r2, #64	; 0x40
    2700:	3101      	adds	r1, #1
    2702:	f7ff fa8d 	bl	1c20 <memcpy>
	net_buf_unref(rsp);
    2706:	980c      	ldr	r0, [sp, #48]	; 0x30
    2708:	f011 fa92 	bl	13c30 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    270c:	7eab      	ldrb	r3, [r5, #26]
    270e:	065a      	lsls	r2, r3, #25
    2710:	d424      	bmi.n	275c <bt_init+0x168>
		BT_ERR("Non-LE capable controller detected!");
    2712:	4a0d      	ldr	r2, [pc, #52]	; (2748 <bt_init+0x154>)
    2714:	4b0d      	ldr	r3, [pc, #52]	; (274c <bt_init+0x158>)
    2716:	9201      	str	r2, [sp, #4]
    2718:	9200      	str	r2, [sp, #0]
    271a:	681c      	ldr	r4, [r3, #0]
    271c:	490c      	ldr	r1, [pc, #48]	; (2750 <bt_init+0x15c>)
    271e:	4b0d      	ldr	r3, [pc, #52]	; (2754 <bt_init+0x160>)
    2720:	480d      	ldr	r0, [pc, #52]	; (2758 <bt_init+0x164>)
    2722:	47a0      	blx	r4
		return -ENODEV;
    2724:	f06f 0412 	mvn.w	r4, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    2728:	4620      	mov	r0, r4
    272a:	b00e      	add	sp, #56	; 0x38
    272c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2730:	20003ad8 	.word	0x20003ad8
    2734:	200002d8 	.word	0x200002d8
    2738:	20003aee 	.word	0x20003aee
    273c:	20003b48 	.word	0x20003b48
    2740:	20003ad9 	.word	0x20003ad9
    2744:	20003af6 	.word	0x20003af6
    2748:	000159e9 	.word	0x000159e9
    274c:	20003ad4 	.word	0x20003ad4
    2750:	00016791 	.word	0x00016791
    2754:	00016074 	.word	0x00016074
    2758:	0001620b 	.word	0x0001620b
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    275c:	4621      	mov	r1, r4
    275e:	aa0c      	add	r2, sp, #48	; 0x30
    2760:	f242 0003 	movw	r0, #8195	; 0x2003
    2764:	f7ff fcf8 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2768:	4604      	mov	r4, r0
    276a:	2800      	cmp	r0, #0
    276c:	d1dc      	bne.n	2728 <bt_init+0x134>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    276e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2770:	489c      	ldr	r0, [pc, #624]	; (29e4 <bt_init+0x3f0>)
    2772:	6899      	ldr	r1, [r3, #8]
    2774:	2208      	movs	r2, #8
    2776:	3101      	adds	r1, #1
    2778:	f7ff fa52 	bl	1c20 <memcpy>
	net_buf_unref(rsp);
    277c:	980c      	ldr	r0, [sp, #48]	; 0x30
    277e:	f011 fa57 	bl	13c30 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2782:	4621      	mov	r1, r4
    2784:	aa0c      	add	r2, sp, #48	; 0x30
    2786:	f242 0002 	movw	r0, #8194	; 0x2002
    278a:	f7ff fce5 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    278e:	4604      	mov	r4, r0
    2790:	2800      	cmp	r0, #0
    2792:	d1c9      	bne.n	2728 <bt_init+0x134>
    2794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2796:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    2798:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    279c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    27a0:	b13a      	cbz	r2, 27b2 <bt_init+0x1be>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    27a2:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    27a4:	4890      	ldr	r0, [pc, #576]	; (29e8 <bt_init+0x3f4>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    27a6:	2a02      	cmp	r2, #2
    27a8:	bf28      	it	cs
    27aa:	2202      	movcs	r2, #2
    27ac:	4611      	mov	r1, r2
    27ae:	f012 fb25 	bl	14dfc <_impl_k_sem_init>
	net_buf_unref(rsp);
    27b2:	980c      	ldr	r0, [sp, #48]	; 0x30
    27b4:	f011 fa3c 	bl	13c30 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    27b8:	7eac      	ldrb	r4, [r5, #26]
    27ba:	f014 0420 	ands.w	r4, r4, #32
    27be:	f000 80c9 	beq.w	2954 <bt_init+0x360>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    27c2:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    27c6:	071b      	lsls	r3, r3, #28
    27c8:	d513      	bpl.n	27f2 <bt_init+0x1fe>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    27ca:	aa0c      	add	r2, sp, #48	; 0x30
    27cc:	2100      	movs	r1, #0
    27ce:	f242 001c 	movw	r0, #8220	; 0x201c
    27d2:	f7ff fcc1 	bl	2158 <bt_hci_cmd_send_sync>
		if (err) {
    27d6:	4604      	mov	r4, r0
    27d8:	2800      	cmp	r0, #0
    27da:	d1a5      	bne.n	2728 <bt_init+0x134>
		le_read_supp_states_complete(rsp);
    27dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    27de:	6883      	ldr	r3, [r0, #8]
    27e0:	f853 2f01 	ldr.w	r2, [r3, #1]!
    27e4:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    27e6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    27ea:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    27ee:	f011 fa1f 	bl	13c30 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    27f2:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    27f6:	069f      	lsls	r7, r3, #26
    27f8:	f100 80c8 	bmi.w	298c <bt_init+0x398>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    27fc:	2108      	movs	r1, #8
    27fe:	f242 0001 	movw	r0, #8193	; 0x2001
    2802:	f7ff fc79 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2806:	4604      	mov	r4, r0
    2808:	2800      	cmp	r0, #0
    280a:	f000 80aa 	beq.w	2962 <bt_init+0x36e>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    280e:	2108      	movs	r1, #8
    2810:	4408      	add	r0, r1
    2812:	f011 fa45 	bl	13ca0 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2816:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
    281a:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    281c:	bf4c      	ite	mi
    281e:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2820:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2822:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2824:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2828:	bf48      	it	mi
    282a:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    282e:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2832:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    2836:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    283a:	bf18      	it	ne
    283c:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2840:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2842:	bf08      	it	eq
    2844:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    2848:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    284a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    284e:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    2850:	2200      	movs	r2, #0
    2852:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2854:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2856:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2858:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    285a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    285c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    285e:	4621      	mov	r1, r4
    2860:	f242 0001 	movw	r0, #8193	; 0x2001
    2864:	f7ff fc78 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2868:	4604      	mov	r4, r0
    286a:	2800      	cmp	r0, #0
    286c:	f47f af5c 	bne.w	2728 <bt_init+0x134>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2870:	7eab      	ldrb	r3, [r5, #26]
    2872:	069a      	lsls	r2, r3, #26
    2874:	d421      	bmi.n	28ba <bt_init+0x2c6>
	if (bt_dev.le.mtu) {
    2876:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    287a:	b9f1      	cbnz	r1, 28ba <bt_init+0x2c6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    287c:	aa0c      	add	r2, sp, #48	; 0x30
    287e:	f241 0005 	movw	r0, #4101	; 0x1005
    2882:	f7ff fc69 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2886:	4604      	mov	r4, r0
    2888:	2800      	cmp	r0, #0
    288a:	f47f af4d 	bne.w	2728 <bt_init+0x134>
	if (bt_dev.le.mtu) {
    288e:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2892:	b97b      	cbnz	r3, 28b4 <bt_init+0x2c0>
    2894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2896:	4854      	ldr	r0, [pc, #336]	; (29e8 <bt_init+0x3f4>)
    2898:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    289a:	7899      	ldrb	r1, [r3, #2]
    289c:	785a      	ldrb	r2, [r3, #1]
    289e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    28a2:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    28a6:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    28a8:	2a02      	cmp	r2, #2
    28aa:	bf28      	it	cs
    28ac:	2202      	movcs	r2, #2
    28ae:	4611      	mov	r1, r2
    28b0:	f012 faa4 	bl	14dfc <_impl_k_sem_init>
	net_buf_unref(rsp);
    28b4:	980c      	ldr	r0, [sp, #48]	; 0x30
    28b6:	f011 f9bb 	bl	13c30 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    28ba:	2108      	movs	r1, #8
    28bc:	f640 4001 	movw	r0, #3073	; 0xc01
    28c0:	f7ff fc1a 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    28c4:	4604      	mov	r4, r0
    28c6:	2800      	cmp	r0, #0
    28c8:	d04b      	beq.n	2962 <bt_init+0x36e>
	ev = net_buf_add(buf, sizeof(*ev));
    28ca:	2108      	movs	r1, #8
    28cc:	4408      	add	r0, r1
    28ce:	f011 f9e7 	bl	13ca0 <net_buf_simple_add>
	dst[0] = val;
    28d2:	2310      	movs	r3, #16
    28d4:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    28d6:	2388      	movs	r3, #136	; 0x88
    28d8:	7043      	strb	r3, [r0, #1]
    28da:	2302      	movs	r3, #2
	dst[0] = val;
    28dc:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    28de:	70c3      	strb	r3, [r0, #3]
    28e0:	2320      	movs	r3, #32
	dst[0] = val;
    28e2:	7082      	strb	r2, [r0, #2]
    28e4:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    28e6:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    28e8:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    28ea:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    28ec:	4621      	mov	r1, r4
    28ee:	f640 4001 	movw	r0, #3073	; 0xc01
    28f2:	f7ff fc31 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    28f6:	4604      	mov	r4, r0
    28f8:	2800      	cmp	r0, #0
    28fa:	f47f af15 	bne.w	2728 <bt_init+0x134>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    28fe:	4601      	mov	r1, r0
    2900:	aa0c      	add	r2, sp, #48	; 0x30
    2902:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2906:	f7ff fc27 	bl	2158 <bt_hci_cmd_send_sync>
    290a:	4e38      	ldr	r6, [pc, #224]	; (29ec <bt_init+0x3f8>)
    290c:	4f38      	ldr	r7, [pc, #224]	; (29f0 <bt_init+0x3fc>)
	if (err) {
    290e:	2800      	cmp	r0, #0
    2910:	d07c      	beq.n	2a0c <bt_init+0x418>
		BT_WARN("Vendor HCI extensions not available");
    2912:	9601      	str	r6, [sp, #4]
    2914:	9600      	str	r6, [sp, #0]
    2916:	683c      	ldr	r4, [r7, #0]
    2918:	4b36      	ldr	r3, [pc, #216]	; (29f4 <bt_init+0x400>)
    291a:	4937      	ldr	r1, [pc, #220]	; (29f8 <bt_init+0x404>)
    291c:	4837      	ldr	r0, [pc, #220]	; (29fc <bt_init+0x408>)
    291e:	4632      	mov	r2, r6
		BT_WARN("Failed to read supported vendor commands");
    2920:	47a0      	blx	r4
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2922:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2924:	2207      	movs	r2, #7
    2926:	a90c      	add	r1, sp, #48	; 0x30
    2928:	4835      	ldr	r0, [pc, #212]	; (2a00 <bt_init+0x40c>)
    292a:	930c      	str	r3, [sp, #48]	; 0x30
    292c:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    2930:	f7ff f961 	bl	1bf6 <memcmp>
    2934:	2800      	cmp	r0, #0
    2936:	f040 80e8 	bne.w	2b0a <bt_init+0x516>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    293a:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    293e:	07db      	lsls	r3, r3, #31
    2940:	f100 8104 	bmi.w	2b4c <bt_init+0x558>
		BT_WARN("Read Static Addresses command not available");
    2944:	9601      	str	r6, [sp, #4]
    2946:	9600      	str	r6, [sp, #0]
    2948:	683c      	ldr	r4, [r7, #0]
    294a:	4b2e      	ldr	r3, [pc, #184]	; (2a04 <bt_init+0x410>)
    294c:	4a27      	ldr	r2, [pc, #156]	; (29ec <bt_init+0x3f8>)
    294e:	492a      	ldr	r1, [pc, #168]	; (29f8 <bt_init+0x404>)
    2950:	482d      	ldr	r0, [pc, #180]	; (2a08 <bt_init+0x414>)
    2952:	e109      	b.n	2b68 <bt_init+0x574>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2954:	2102      	movs	r1, #2
    2956:	f640 406d 	movw	r0, #3181	; 0xc6d
    295a:	f7ff fbcd 	bl	20f8 <bt_hci_cmd_create>
		if (!buf) {
    295e:	4606      	mov	r6, r0
    2960:	b910      	cbnz	r0, 2968 <bt_init+0x374>
		return -ENOBUFS;
    2962:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2966:	e6df      	b.n	2728 <bt_init+0x134>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2968:	2102      	movs	r1, #2
    296a:	3008      	adds	r0, #8
    296c:	f011 f998 	bl	13ca0 <net_buf_simple_add>
		cp_le->le = 0x01;
    2970:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2972:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2974:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2976:	4622      	mov	r2, r4
    2978:	4631      	mov	r1, r6
    297a:	f640 406d 	movw	r0, #3181	; 0xc6d
    297e:	f7ff fbeb 	bl	2158 <bt_hci_cmd_send_sync>
		if (err) {
    2982:	4604      	mov	r4, r0
    2984:	2800      	cmp	r0, #0
    2986:	f43f af1c 	beq.w	27c2 <bt_init+0x1ce>
    298a:	e6cd      	b.n	2728 <bt_init+0x134>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    298c:	aa0c      	add	r2, sp, #48	; 0x30
    298e:	2100      	movs	r1, #0
    2990:	f242 002f 	movw	r0, #8239	; 0x202f
    2994:	f7ff fbe0 	bl	2158 <bt_hci_cmd_send_sync>
		if (err) {
    2998:	4604      	mov	r4, r0
    299a:	2800      	cmp	r0, #0
    299c:	f47f aec4 	bne.w	2728 <bt_init+0x134>
		rp = (void *)rsp->data;
    29a0:	980c      	ldr	r0, [sp, #48]	; 0x30
    29a2:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    29a4:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    29a8:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    29ac:	f011 f940 	bl	13c30 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    29b0:	2104      	movs	r1, #4
    29b2:	f242 0024 	movw	r0, #8228	; 0x2024
    29b6:	f7ff fb9f 	bl	20f8 <bt_hci_cmd_create>
		if (!buf) {
    29ba:	4606      	mov	r6, r0
    29bc:	2800      	cmp	r0, #0
    29be:	d0d0      	beq.n	2962 <bt_init+0x36e>
		cp = net_buf_add(buf, sizeof(*cp));
    29c0:	2104      	movs	r1, #4
    29c2:	3008      	adds	r0, #8
    29c4:	f011 f96c 	bl	13ca0 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    29c8:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    29ca:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    29ce:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    29d0:	4631      	mov	r1, r6
    29d2:	f242 0024 	movw	r0, #8228	; 0x2024
    29d6:	f7ff fbbf 	bl	2158 <bt_hci_cmd_send_sync>
		if (err) {
    29da:	4604      	mov	r4, r0
    29dc:	2800      	cmp	r0, #0
    29de:	f43f af0d 	beq.w	27fc <bt_init+0x208>
    29e2:	e6a1      	b.n	2728 <bt_init+0x134>
    29e4:	20003b50 	.word	0x20003b50
    29e8:	20003b64 	.word	0x20003b64
    29ec:	000159e9 	.word	0x000159e9
    29f0:	20003ad4 	.word	0x20003ad4
    29f4:	000160ae 	.word	0x000160ae
    29f8:	00016791 	.word	0x00016791
    29fc:	0001623f 	.word	0x0001623f
    2a00:	20003ad8 	.word	0x20003ad8
    2a04:	0001608f 	.word	0x0001608f
    2a08:	000163dc 	.word	0x000163dc
	rp.info = (void *)rsp->data;
    2a0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    2a0e:	f8d7 8000 	ldr.w	r8, [r7]
	rp.info = (void *)rsp->data;
    2a12:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    2a14:	4972      	ldr	r1, [pc, #456]	; (2be0 <bt_init+0x5ec>)
    2a16:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    2a1a:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    2a1c:	2b03      	cmp	r3, #3
		return plat_str[platform];
    2a1e:	bf96      	itet	ls
    2a20:	4a70      	ldrls	r2, [pc, #448]	; (2be4 <bt_init+0x5f0>)
	return "unknown";
    2a22:	4a71      	ldrhi	r2, [pc, #452]	; (2be8 <bt_init+0x5f4>)
		return plat_str[platform];
    2a24:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2a28:	9201      	str	r2, [sp, #4]
    2a2a:	4b70      	ldr	r3, [pc, #448]	; (2bec <bt_init+0x5f8>)
    2a2c:	4a70      	ldr	r2, [pc, #448]	; (2bf0 <bt_init+0x5fc>)
    2a2e:	9603      	str	r6, [sp, #12]
    2a30:	9600      	str	r6, [sp, #0]
    2a32:	4870      	ldr	r0, [pc, #448]	; (2bf4 <bt_init+0x600>)
    2a34:	47c0      	blx	r8
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2a36:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2a3a:	f8d7 8000 	ldr.w	r8, [r7]
    2a3e:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2a42:	2b02      	cmp	r3, #2
    2a44:	d13b      	bne.n	2abe <bt_init+0x4ca>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2a46:	2a02      	cmp	r2, #2
    2a48:	d839      	bhi.n	2abe <bt_init+0x4ca>
		return nordic_str[variant];
    2a4a:	4b6b      	ldr	r3, [pc, #428]	; (2bf8 <bt_init+0x604>)
    2a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2a50:	9202      	str	r2, [sp, #8]
    2a52:	9301      	str	r3, [sp, #4]
    2a54:	4a66      	ldr	r2, [pc, #408]	; (2bf0 <bt_init+0x5fc>)
    2a56:	4b65      	ldr	r3, [pc, #404]	; (2bec <bt_init+0x5f8>)
    2a58:	4961      	ldr	r1, [pc, #388]	; (2be0 <bt_init+0x5ec>)
    2a5a:	4868      	ldr	r0, [pc, #416]	; (2bfc <bt_init+0x608>)
    2a5c:	9603      	str	r6, [sp, #12]
    2a5e:	9600      	str	r6, [sp, #0]
    2a60:	47c0      	blx	r8
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a62:	7963      	ldrb	r3, [r4, #5]
    2a64:	f8d7 8000 	ldr.w	r8, [r7]
    2a68:	9606      	str	r6, [sp, #24]
    2a6a:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2a6e:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    2a70:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a72:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
    2a76:	bf98      	it	ls
    2a78:	4a61      	ldrls	r2, [pc, #388]	; (2c00 <bt_init+0x60c>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a7a:	9104      	str	r1, [sp, #16]
    2a7c:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    2a7e:	bf94      	ite	ls
    2a80:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2a84:	4a58      	ldrhi	r2, [pc, #352]	; (2be8 <bt_init+0x5f4>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a86:	9103      	str	r1, [sp, #12]
    2a88:	9302      	str	r3, [sp, #8]
    2a8a:	4955      	ldr	r1, [pc, #340]	; (2be0 <bt_init+0x5ec>)
    2a8c:	4b57      	ldr	r3, [pc, #348]	; (2bec <bt_init+0x5f8>)
    2a8e:	9201      	str	r2, [sp, #4]
    2a90:	485c      	ldr	r0, [pc, #368]	; (2c04 <bt_init+0x610>)
    2a92:	4a57      	ldr	r2, [pc, #348]	; (2bf0 <bt_init+0x5fc>)
    2a94:	9600      	str	r6, [sp, #0]
    2a96:	47c0      	blx	r8
	net_buf_unref(rsp);
    2a98:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a9a:	f011 f8c9 	bl	13c30 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2a9e:	aa0c      	add	r2, sp, #48	; 0x30
    2aa0:	2100      	movs	r1, #0
    2aa2:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2aa6:	f7ff fb57 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2aaa:	4604      	mov	r4, r0
    2aac:	b148      	cbz	r0, 2ac2 <bt_init+0x4ce>
		BT_WARN("Failed to read supported vendor features");
    2aae:	9601      	str	r6, [sp, #4]
    2ab0:	9600      	str	r6, [sp, #0]
    2ab2:	683c      	ldr	r4, [r7, #0]
    2ab4:	4b4d      	ldr	r3, [pc, #308]	; (2bec <bt_init+0x5f8>)
    2ab6:	4a4e      	ldr	r2, [pc, #312]	; (2bf0 <bt_init+0x5fc>)
    2ab8:	4949      	ldr	r1, [pc, #292]	; (2be0 <bt_init+0x5ec>)
    2aba:	4853      	ldr	r0, [pc, #332]	; (2c08 <bt_init+0x614>)
    2abc:	e730      	b.n	2920 <bt_init+0x32c>
		return "unknown";
    2abe:	4b4a      	ldr	r3, [pc, #296]	; (2be8 <bt_init+0x5f4>)
    2ac0:	e7c6      	b.n	2a50 <bt_init+0x45c>
	rp.cmds = (void *)rsp->data;
    2ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2ac4:	4851      	ldr	r0, [pc, #324]	; (2c0c <bt_init+0x618>)
    2ac6:	6899      	ldr	r1, [r3, #8]
    2ac8:	2202      	movs	r2, #2
    2aca:	3101      	adds	r1, #1
    2acc:	f7ff f8a8 	bl	1c20 <memcpy>
	net_buf_unref(rsp);
    2ad0:	980c      	ldr	r0, [sp, #48]	; 0x30
    2ad2:	f011 f8ad 	bl	13c30 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2ad6:	aa0c      	add	r2, sp, #48	; 0x30
    2ad8:	4621      	mov	r1, r4
    2ada:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2ade:	f7ff fb3b 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2ae2:	b138      	cbz	r0, 2af4 <bt_init+0x500>
		BT_WARN("Failed to read supported vendor commands");
    2ae4:	9601      	str	r6, [sp, #4]
    2ae6:	9600      	str	r6, [sp, #0]
    2ae8:	683c      	ldr	r4, [r7, #0]
    2aea:	4b40      	ldr	r3, [pc, #256]	; (2bec <bt_init+0x5f8>)
    2aec:	4a40      	ldr	r2, [pc, #256]	; (2bf0 <bt_init+0x5fc>)
    2aee:	493c      	ldr	r1, [pc, #240]	; (2be0 <bt_init+0x5ec>)
    2af0:	4847      	ldr	r0, [pc, #284]	; (2c10 <bt_init+0x61c>)
    2af2:	e715      	b.n	2920 <bt_init+0x32c>
	rp.feat = (void *)rsp->data;
    2af4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2af6:	4847      	ldr	r0, [pc, #284]	; (2c14 <bt_init+0x620>)
    2af8:	6899      	ldr	r1, [r3, #8]
    2afa:	2201      	movs	r2, #1
    2afc:	4411      	add	r1, r2
    2afe:	f7ff f88f 	bl	1c20 <memcpy>
	net_buf_unref(rsp);
    2b02:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b04:	f011 f894 	bl	13c30 <net_buf_unref>
    2b08:	e70b      	b.n	2922 <bt_init+0x32e>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2b0a:	4b43      	ldr	r3, [pc, #268]	; (2c18 <bt_init+0x624>)
    2b0c:	6818      	ldr	r0, [r3, #0]
    2b0e:	889a      	ldrh	r2, [r3, #4]
    2b10:	900a      	str	r0, [sp, #40]	; 0x28
    2b12:	799b      	ldrb	r3, [r3, #6]
    2b14:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    2b18:	a90a      	add	r1, sp, #40	; 0x28
    2b1a:	2207      	movs	r2, #7
    2b1c:	483f      	ldr	r0, [pc, #252]	; (2c1c <bt_init+0x628>)
    2b1e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    2b22:	f7ff f868 	bl	1bf6 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2b26:	2800      	cmp	r0, #0
    2b28:	f43f af07 	beq.w	293a <bt_init+0x346>
		bt_dev_show_info();
    2b2c:	f7ff fc50 	bl	23d0 <bt_dev_show_info>
		err = bt_conn_init();
    2b30:	f002 f810 	bl	4b54 <bt_conn_init>
		if (err) {
    2b34:	4604      	mov	r4, r0
    2b36:	2800      	cmp	r0, #0
    2b38:	f47f adf6 	bne.w	2728 <bt_init+0x134>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2b3c:	2102      	movs	r1, #2
    2b3e:	4838      	ldr	r0, [pc, #224]	; (2c20 <bt_init+0x62c>)
    2b40:	f7ff fa37 	bl	1fb2 <atomic_or>
	bt_le_scan_update(false);
    2b44:	4620      	mov	r0, r4
    2b46:	f7ff fd23 	bl	2590 <bt_le_scan_update>
    2b4a:	e5ed      	b.n	2728 <bt_init+0x134>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2b4c:	aa09      	add	r2, sp, #36	; 0x24
    2b4e:	2100      	movs	r1, #0
    2b50:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2b54:	f7ff fb00 	bl	2158 <bt_hci_cmd_send_sync>
		if (err) {
    2b58:	b140      	cbz	r0, 2b6c <bt_init+0x578>
			BT_WARN("Failed to read static addresses");
    2b5a:	9601      	str	r6, [sp, #4]
    2b5c:	9600      	str	r6, [sp, #0]
    2b5e:	683c      	ldr	r4, [r7, #0]
    2b60:	4b30      	ldr	r3, [pc, #192]	; (2c24 <bt_init+0x630>)
    2b62:	4a23      	ldr	r2, [pc, #140]	; (2bf0 <bt_init+0x5fc>)
    2b64:	491e      	ldr	r1, [pc, #120]	; (2be0 <bt_init+0x5ec>)
    2b66:	4830      	ldr	r0, [pc, #192]	; (2c28 <bt_init+0x634>)
		BT_WARN("Read Static Addresses command not available");
    2b68:	47a0      	blx	r4
    2b6a:	e026      	b.n	2bba <bt_init+0x5c6>
		rp = (void *)rsp->data;
    2b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2b6e:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2b70:	784b      	ldrb	r3, [r1, #1]
    2b72:	b1bb      	cbz	r3, 2ba4 <bt_init+0x5b0>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2b74:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2b76:	2206      	movs	r2, #6
    2b78:	3102      	adds	r1, #2
    2b7a:	482c      	ldr	r0, [pc, #176]	; (2c2c <bt_init+0x638>)
    2b7c:	702b      	strb	r3, [r5, #0]
    2b7e:	f7ff f84f 	bl	1c20 <memcpy>
			net_buf_unref(rsp);
    2b82:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b84:	f011 f854 	bl	13c30 <net_buf_unref>
		return bt_set_static_addr();
    2b88:	f7ff fbf2 	bl	2370 <bt_set_static_addr>
    2b8c:	4604      	mov	r4, r0
		if (err) {
    2b8e:	2800      	cmp	r0, #0
    2b90:	d0cc      	beq.n	2b2c <bt_init+0x538>
			BT_ERR("Unable to set identity address");
    2b92:	9601      	str	r6, [sp, #4]
    2b94:	9600      	str	r6, [sp, #0]
    2b96:	683d      	ldr	r5, [r7, #0]
    2b98:	4b25      	ldr	r3, [pc, #148]	; (2c30 <bt_init+0x63c>)
    2b9a:	4a15      	ldr	r2, [pc, #84]	; (2bf0 <bt_init+0x5fc>)
    2b9c:	4910      	ldr	r1, [pc, #64]	; (2be0 <bt_init+0x5ec>)
    2b9e:	4825      	ldr	r0, [pc, #148]	; (2c34 <bt_init+0x640>)
    2ba0:	47a8      	blx	r5
    2ba2:	e5c1      	b.n	2728 <bt_init+0x134>
		BT_WARN("No static addresses stored in controller");
    2ba4:	9601      	str	r6, [sp, #4]
    2ba6:	9600      	str	r6, [sp, #0]
    2ba8:	4823      	ldr	r0, [pc, #140]	; (2c38 <bt_init+0x644>)
    2baa:	683c      	ldr	r4, [r7, #0]
    2bac:	4b1d      	ldr	r3, [pc, #116]	; (2c24 <bt_init+0x630>)
    2bae:	4a10      	ldr	r2, [pc, #64]	; (2bf0 <bt_init+0x5fc>)
    2bb0:	490b      	ldr	r1, [pc, #44]	; (2be0 <bt_init+0x5ec>)
    2bb2:	47a0      	blx	r4
		net_buf_unref(rsp);
    2bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
    2bb6:	f011 f83b 	bl	13c30 <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2bba:	4818      	ldr	r0, [pc, #96]	; (2c1c <bt_init+0x628>)
    2bbc:	f7ff fbca 	bl	2354 <bt_addr_le_create_static>
		if (err) {
    2bc0:	4604      	mov	r4, r0
    2bc2:	2800      	cmp	r0, #0
    2bc4:	d1e5      	bne.n	2b92 <bt_init+0x59e>
		BT_WARN("Using temporary static random address %s",
    2bc6:	4819      	ldr	r0, [pc, #100]	; (2c2c <bt_init+0x638>)
    2bc8:	683c      	ldr	r4, [r7, #0]
    2bca:	f7ff f8af 	bl	1d2c <bt_addr_str>
    2bce:	9602      	str	r6, [sp, #8]
    2bd0:	9001      	str	r0, [sp, #4]
    2bd2:	9600      	str	r6, [sp, #0]
    2bd4:	4b13      	ldr	r3, [pc, #76]	; (2c24 <bt_init+0x630>)
    2bd6:	4a06      	ldr	r2, [pc, #24]	; (2bf0 <bt_init+0x5fc>)
    2bd8:	4901      	ldr	r1, [pc, #4]	; (2be0 <bt_init+0x5ec>)
    2bda:	4818      	ldr	r0, [pc, #96]	; (2c3c <bt_init+0x648>)
    2bdc:	47a0      	blx	r4
    2bde:	e7d3      	b.n	2b88 <bt_init+0x594>
    2be0:	00016791 	.word	0x00016791
    2be4:	00016928 	.word	0x00016928
    2be8:	00016a18 	.word	0x00016a18
    2bec:	000160ae 	.word	0x000160ae
    2bf0:	000159e9 	.word	0x000159e9
    2bf4:	00016273 	.word	0x00016273
    2bf8:	0001691c 	.word	0x0001691c
    2bfc:	0001629c 	.word	0x0001629c
    2c00:	00016a08 	.word	0x00016a08
    2c04:	000162c4 	.word	0x000162c4
    2c08:	00016301 	.word	0x00016301
    2c0c:	20003b37 	.word	0x20003b37
    2c10:	0001633a 	.word	0x0001633a
    2c14:	20003b36 	.word	0x20003b36
    2c18:	00015934 	.word	0x00015934
    2c1c:	20003ad8 	.word	0x20003ad8
    2c20:	20003b48 	.word	0x20003b48
    2c24:	0001608f 	.word	0x0001608f
    2c28:	00016373 	.word	0x00016373
    2c2c:	20003ad9 	.word	0x20003ad9
    2c30:	000160ba 	.word	0x000160ba
    2c34:	00016451 	.word	0x00016451
    2c38:	000163a3 	.word	0x000163a3
    2c3c:	00016418 	.word	0x00016418

00002c40 <init_work>:

static void init_work(struct k_work *work)
{
    2c40:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    2c42:	f7ff fcd7 	bl	25f4 <bt_init>
	if (ready_cb) {
    2c46:	4b03      	ldr	r3, [pc, #12]	; (2c54 <init_work+0x14>)
    2c48:	681b      	ldr	r3, [r3, #0]
    2c4a:	b113      	cbz	r3, 2c52 <init_work+0x12>
		ready_cb(err);
	}
}
    2c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2c50:	4718      	bx	r3
    2c52:	bd10      	pop	{r4, pc}
    2c54:	200002d4 	.word	0x200002d4

00002c58 <hci_le_set_phy.isra.28>:
static int hci_le_set_phy(struct bt_conn *conn)
    2c58:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2c5a:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    2c5c:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2c5e:	f242 0032 	movw	r0, #8242	; 0x2032
    2c62:	f7ff fa49 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2c66:	4605      	mov	r5, r0
    2c68:	b198      	cbz	r0, 2c92 <hci_le_set_phy.isra.28+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    2c6a:	2107      	movs	r1, #7
    2c6c:	3008      	adds	r0, #8
    2c6e:	f011 f817 	bl	13ca0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2c72:	8823      	ldrh	r3, [r4, #0]
    2c74:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    2c76:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c78:	2302      	movs	r3, #2
	cp->all_phys = 0;
    2c7a:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c7c:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c7e:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2c80:	7144      	strb	r4, [r0, #5]
    2c82:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    2c84:	4629      	mov	r1, r5
    2c86:	f242 0032 	movw	r0, #8242	; 0x2032
    2c8a:	f7ff fbfb 	bl	2484 <bt_hci_cmd_send>
	return 0;
    2c8e:	4620      	mov	r0, r4
    2c90:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    2c92:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2c96:	bd38      	pop	{r3, r4, r5, pc}

00002c98 <hci_le_set_data_len.isra.29>:
static int hci_le_set_data_len(struct bt_conn *conn)
    2c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2c9a:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    2c9c:	aa01      	add	r2, sp, #4
    2c9e:	2100      	movs	r1, #0
    2ca0:	f242 002f 	movw	r0, #8239	; 0x202f
    2ca4:	f7ff fa58 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2ca8:	b9d8      	cbnz	r0, 2ce2 <hci_le_set_data_len.isra.29+0x4a>
	rp = (void *)rsp->data;
    2caa:	9801      	ldr	r0, [sp, #4]
    2cac:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2cae:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2cb2:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    2cb6:	f010 ffbb 	bl	13c30 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    2cba:	2106      	movs	r1, #6
    2cbc:	f242 0022 	movw	r0, #8226	; 0x2022
    2cc0:	f7ff fa1a 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2cc4:	4604      	mov	r4, r0
    2cc6:	b170      	cbz	r0, 2ce6 <hci_le_set_data_len.isra.29+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    2cc8:	2106      	movs	r1, #6
    2cca:	3008      	adds	r0, #8
    2ccc:	f010 ffe8 	bl	13ca0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2cd0:	883b      	ldrh	r3, [r7, #0]
    2cd2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2cd4:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2cd6:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2cd8:	4621      	mov	r1, r4
    2cda:	f242 0022 	movw	r0, #8226	; 0x2022
    2cde:	f7ff fbd1 	bl	2484 <bt_hci_cmd_send>
}
    2ce2:	b003      	add	sp, #12
    2ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    2ce6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2cea:	e7fa      	b.n	2ce2 <hci_le_set_data_len.isra.29+0x4a>

00002cec <le_enh_conn_complete>:
{
    2cec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    2cee:	7803      	ldrb	r3, [r0, #0]
{
    2cf0:	b089      	sub	sp, #36	; 0x24
    2cf2:	4605      	mov	r5, r0
	if (evt->status) {
    2cf4:	b17b      	cbz	r3, 2d16 <le_enh_conn_complete+0x2a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    2cf6:	2102      	movs	r1, #2
    2cf8:	2000      	movs	r0, #0
    2cfa:	f001 fab1 	bl	4260 <bt_conn_lookup_state_le>
		if (!conn) {
    2cfe:	4604      	mov	r4, r0
    2d00:	b138      	cbz	r0, 2d12 <le_enh_conn_complete+0x26>
		conn->err = evt->status;
    2d02:	782b      	ldrb	r3, [r5, #0]
    2d04:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2d06:	2100      	movs	r1, #0
    2d08:	f001 fb84 	bl	4414 <bt_conn_set_state>
		bt_conn_unref(conn);
    2d0c:	4620      	mov	r0, r4
    2d0e:	f001 fac5 	bl	429c <bt_conn_unref>
}
    2d12:	b009      	add	sp, #36	; 0x24
    2d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2d16:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2d18:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2d1c:	4621      	mov	r1, r4
    2d1e:	a806      	add	r0, sp, #24
    2d20:	f7ff f944 	bl	1fac <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2d24:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2d28:	3b02      	subs	r3, #2
    2d2a:	b2db      	uxtb	r3, r3
    2d2c:	2b01      	cmp	r3, #1
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2d2e:	b2b7      	uxth	r7, r6
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2d30:	d829      	bhi.n	2d86 <le_enh_conn_complete+0x9a>
    2d32:	2206      	movs	r2, #6
    2d34:	f105 0111 	add.w	r1, r5, #17
    2d38:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2d3c:	f88d 3018 	strb.w	r3, [sp, #24]
    2d40:	f7fe ff6e 	bl	1c20 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    2d44:	2301      	movs	r3, #1
    2d46:	f88d 3010 	strb.w	r3, [sp, #16]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2d4a:	2102      	movs	r1, #2
    2d4c:	a806      	add	r0, sp, #24
    2d4e:	f001 fa87 	bl	4260 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2d52:	78eb      	ldrb	r3, [r5, #3]
    2d54:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2d56:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2d58:	d109      	bne.n	2d6e <le_enh_conn_complete+0x82>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2d5a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    2d5e:	484a      	ldr	r0, [pc, #296]	; (2e88 <le_enh_conn_complete+0x19c>)
    2d60:	f7ff f938 	bl	1fd4 <atomic_and>
		if (!conn) {
    2d64:	b9a4      	cbnz	r4, 2d90 <le_enh_conn_complete+0xa4>
			conn = bt_conn_add_le(&id_addr);
    2d66:	a806      	add	r0, sp, #24
    2d68:	f001 f9ce 	bl	4108 <bt_conn_add_le>
    2d6c:	4604      	mov	r4, r0
	if (!conn) {
    2d6e:	b97c      	cbnz	r4, 2d90 <le_enh_conn_complete+0xa4>
		BT_ERR("Unable to add new conn for handle %u", handle);
    2d70:	4a46      	ldr	r2, [pc, #280]	; (2e8c <le_enh_conn_complete+0x1a0>)
    2d72:	4b47      	ldr	r3, [pc, #284]	; (2e90 <le_enh_conn_complete+0x1a4>)
    2d74:	9202      	str	r2, [sp, #8]
    2d76:	e88d 0084 	stmia.w	sp, {r2, r7}
    2d7a:	4946      	ldr	r1, [pc, #280]	; (2e94 <le_enh_conn_complete+0x1a8>)
    2d7c:	681c      	ldr	r4, [r3, #0]
    2d7e:	4846      	ldr	r0, [pc, #280]	; (2e98 <le_enh_conn_complete+0x1ac>)
    2d80:	4b46      	ldr	r3, [pc, #280]	; (2e9c <le_enh_conn_complete+0x1b0>)
    2d82:	47a0      	blx	r4
		return;
    2d84:	e7c5      	b.n	2d12 <le_enh_conn_complete+0x26>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    2d86:	4621      	mov	r1, r4
    2d88:	a804      	add	r0, sp, #16
    2d8a:	f7ff f90f 	bl	1fac <bt_addr_le_copy>
    2d8e:	e7dc      	b.n	2d4a <le_enh_conn_complete+0x5e>
	conn->handle   = handle;
    2d90:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2d92:	a906      	add	r1, sp, #24
	conn->handle   = handle;
    2d94:	f820 6b4c 	strh.w	r6, [r0], #76
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2d98:	f7ff f908 	bl	1fac <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    2d9c:	7e2a      	ldrb	r2, [r5, #24]
    2d9e:	7deb      	ldrb	r3, [r5, #23]
    2da0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2da4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    2da8:	7eaa      	ldrb	r2, [r5, #26]
    2daa:	7e6b      	ldrb	r3, [r5, #25]
    2dac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2db0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2db4:	7eeb      	ldrb	r3, [r5, #27]
    2db6:	7f2a      	ldrb	r2, [r5, #28]
    2db8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2dbc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	conn->role = evt->role;
    2dc0:	78ee      	ldrb	r6, [r5, #3]
    2dc2:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    2dc4:	2e01      	cmp	r6, #1
    2dc6:	d11a      	bne.n	2dfe <le_enh_conn_complete+0x112>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2dc8:	4f35      	ldr	r7, [pc, #212]	; (2ea0 <le_enh_conn_complete+0x1b4>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    2dca:	a904      	add	r1, sp, #16
    2dcc:	f104 0053 	add.w	r0, r4, #83	; 0x53
    2dd0:	f7ff f8ec 	bl	1fac <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2dd4:	4639      	mov	r1, r7
    2dd6:	f104 005a 	add.w	r0, r4, #90	; 0x5a
    2dda:	f7ff f8e7 	bl	1fac <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2dde:	2107      	movs	r1, #7
    2de0:	f107 0070 	add.w	r0, r7, #112	; 0x70
    2de4:	f7ff f97a 	bl	20dc <atomic_test_bit>
    2de8:	b148      	cbz	r0, 2dfe <le_enh_conn_complete+0x112>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    2dea:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    2dee:	2200      	movs	r2, #0
    2df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2df4:	4313      	orrs	r3, r2
    2df6:	d002      	beq.n	2dfe <le_enh_conn_complete+0x112>
			set_advertise_enable(true);
    2df8:	4630      	mov	r0, r6
    2dfa:	f7ff fa61 	bl	22c0 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    2dfe:	2103      	movs	r1, #3
    2e00:	4620      	mov	r0, r4
    2e02:	f001 fb07 	bl	4414 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    2e06:	7a63      	ldrb	r3, [r4, #9]
    2e08:	2b03      	cmp	r3, #3
    2e0a:	d118      	bne.n	2e3e <le_enh_conn_complete+0x152>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2e0c:	78eb      	ldrb	r3, [r5, #3]
    2e0e:	b123      	cbz	r3, 2e1a <le_enh_conn_complete+0x12e>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    2e10:	4b23      	ldr	r3, [pc, #140]	; (2ea0 <le_enh_conn_complete+0x1b4>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2e12:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    2e16:	0719      	lsls	r1, r3, #28
    2e18:	d518      	bpl.n	2e4c <le_enh_conn_complete+0x160>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    2e1a:	2102      	movs	r1, #2
    2e1c:	f242 0016 	movw	r0, #8214	; 0x2016
    2e20:	f7ff f96a 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2e24:	4605      	mov	r5, r0
    2e26:	b188      	cbz	r0, 2e4c <le_enh_conn_complete+0x160>
	cp = net_buf_add(buf, sizeof(*cp));
    2e28:	2102      	movs	r1, #2
    2e2a:	3008      	adds	r0, #8
    2e2c:	f010 ff38 	bl	13ca0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2e30:	8823      	ldrh	r3, [r4, #0]
    2e32:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    2e34:	4629      	mov	r1, r5
    2e36:	f242 0016 	movw	r0, #8214	; 0x2016
    2e3a:	f7ff fb23 	bl	2484 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    2e3e:	4620      	mov	r0, r4
    2e40:	f001 fa2c 	bl	429c <bt_conn_unref>
	bt_le_scan_update(false);
    2e44:	2000      	movs	r0, #0
    2e46:	f7ff fba3 	bl	2590 <bt_le_scan_update>
    2e4a:	e762      	b.n	2d12 <le_enh_conn_complete+0x26>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    2e4c:	4d14      	ldr	r5, [pc, #80]	; (2ea0 <le_enh_conn_complete+0x1b4>)
    2e4e:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    2e52:	07d2      	lsls	r2, r2, #31
    2e54:	d508      	bpl.n	2e68 <le_enh_conn_complete+0x17c>
		err = hci_le_set_phy(conn);
    2e56:	4620      	mov	r0, r4
    2e58:	f7ff fefe 	bl	2c58 <hci_le_set_phy.isra.28>
		if (!err) {
    2e5c:	b920      	cbnz	r0, 2e68 <le_enh_conn_complete+0x17c>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2e5e:	2180      	movs	r1, #128	; 0x80
    2e60:	1d20      	adds	r0, r4, #4
    2e62:	f7ff f8a6 	bl	1fb2 <atomic_or>
    2e66:	e7ea      	b.n	2e3e <le_enh_conn_complete+0x152>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2e68:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2e6c:	069b      	lsls	r3, r3, #26
    2e6e:	d506      	bpl.n	2e7e <le_enh_conn_complete+0x192>
		err = hci_le_set_data_len(conn);
    2e70:	4620      	mov	r0, r4
    2e72:	f7ff ff11 	bl	2c98 <hci_le_set_data_len.isra.29>
		if (!err) {
    2e76:	b910      	cbnz	r0, 2e7e <le_enh_conn_complete+0x192>
    2e78:	f44f 7180 	mov.w	r1, #256	; 0x100
    2e7c:	e7f0      	b.n	2e60 <le_enh_conn_complete+0x174>
	update_conn_param(conn);
    2e7e:	4620      	mov	r0, r4
    2e80:	f7ff f8ba 	bl	1ff8 <update_conn_param>
    2e84:	e7db      	b.n	2e3e <le_enh_conn_complete+0x152>
    2e86:	bf00      	nop
    2e88:	20003b48 	.word	0x20003b48
    2e8c:	000159e9 	.word	0x000159e9
    2e90:	20003ad4 	.word	0x20003ad4
    2e94:	00016791 	.word	0x00016791
    2e98:	000168c7 	.word	0x000168c7
    2e9c:	00015fa4 	.word	0x00015fa4
    2ea0:	20003ad8 	.word	0x20003ad8

00002ea4 <le_conn_param_neg_reply>:
{
    2ea4:	b570      	push	{r4, r5, r6, lr}
    2ea6:	4606      	mov	r6, r0
    2ea8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    2eaa:	f242 0021 	movw	r0, #8225	; 0x2021
    2eae:	2103      	movs	r1, #3
    2eb0:	f7ff f922 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2eb4:	4604      	mov	r4, r0
    2eb6:	b160      	cbz	r0, 2ed2 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    2eb8:	2103      	movs	r1, #3
    2eba:	3008      	adds	r0, #8
    2ebc:	f010 fef0 	bl	13ca0 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    2ec0:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    2ec2:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2ec4:	4621      	mov	r1, r4
    2ec6:	f242 0021 	movw	r0, #8225	; 0x2021
}
    2eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2ece:	f7ff bad9 	b.w	2484 <bt_hci_cmd_send>
}
    2ed2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2ed6:	bd70      	pop	{r4, r5, r6, pc}

00002ed8 <hci_tx_thread>:
{
    2ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    2edc:	f8df a158 	ldr.w	sl, [pc, #344]	; 3038 <hci_tx_thread+0x160>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2ee0:	4d54      	ldr	r5, [pc, #336]	; (3034 <hci_tx_thread+0x15c>)
{
    2ee2:	b085      	sub	sp, #20
			ev_count += bt_conn_prepare_events(&events[1]);
    2ee4:	f10a 0b14 	add.w	fp, sl, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    2ee8:	f89a 300d 	ldrb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2eec:	4658      	mov	r0, fp
		events[0].state = K_POLL_STATE_NOT_READY;
    2eee:	f36f 1307 	bfc	r3, #4, #4
    2ef2:	f88a 300d 	strb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2ef6:	f001 fa19 	bl	432c <bt_conn_prepare_events>
    2efa:	f100 0901 	add.w	r9, r0, #1

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    2efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2f02:	4649      	mov	r1, r9
    2f04:	484c      	ldr	r0, [pc, #304]	; (3038 <hci_tx_thread+0x160>)
    2f06:	f012 fbe7 	bl	156d8 <_impl_k_poll>
		BT_ASSERT(err == 0);
    2f0a:	b930      	cbnz	r0, 2f1a <hci_tx_thread+0x42>
    2f0c:	4e4a      	ldr	r6, [pc, #296]	; (3038 <hci_tx_thread+0x160>)
	for (; count; ev++, count--) {
    2f0e:	f1b9 0f00 	cmp.w	r9, #0
    2f12:	d111      	bne.n	2f38 <hci_tx_thread+0x60>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    2f14:	f011 ff26 	bl	14d64 <_impl_k_yield>
    2f18:	e7e6      	b.n	2ee8 <hci_tx_thread+0x10>
		BT_ASSERT(err == 0);
    2f1a:	4a46      	ldr	r2, [pc, #280]	; (3034 <hci_tx_thread+0x15c>)
    2f1c:	4b47      	ldr	r3, [pc, #284]	; (303c <hci_tx_thread+0x164>)
    2f1e:	9201      	str	r2, [sp, #4]
    2f20:	9200      	str	r2, [sp, #0]
    2f22:	681c      	ldr	r4, [r3, #0]
    2f24:	4946      	ldr	r1, [pc, #280]	; (3040 <hci_tx_thread+0x168>)
    2f26:	4b47      	ldr	r3, [pc, #284]	; (3044 <hci_tx_thread+0x16c>)
    2f28:	4847      	ldr	r0, [pc, #284]	; (3048 <hci_tx_thread+0x170>)
	BT_ASSERT(buf);
    2f2a:	47a0      	blx	r4
    2f2c:	4040      	eors	r0, r0
    2f2e:	f380 8811 	msr	BASEPRI, r0
    2f32:	f04f 0004 	mov.w	r0, #4
    2f36:	df02      	svc	2
		switch (ev->state) {
    2f38:	7b73      	ldrb	r3, [r6, #13]
    2f3a:	091b      	lsrs	r3, r3, #4
    2f3c:	2b01      	cmp	r3, #1
    2f3e:	d95c      	bls.n	2ffa <hci_tx_thread+0x122>
    2f40:	2b04      	cmp	r3, #4
    2f42:	d16c      	bne.n	301e <hci_tx_thread+0x146>
			if (ev->tag == BT_EVENT_CMD_TX) {
    2f44:	7b37      	ldrb	r7, [r6, #12]
    2f46:	2f00      	cmp	r7, #0
    2f48:	d15b      	bne.n	3002 <hci_tx_thread+0x12a>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2f4a:	4639      	mov	r1, r7
    2f4c:	483f      	ldr	r0, [pc, #252]	; (304c <hci_tx_thread+0x174>)
    2f4e:	f010 fe45 	bl	13bdc <net_buf_get>
	BT_ASSERT(buf);
    2f52:	4680      	mov	r8, r0
    2f54:	b940      	cbnz	r0, 2f68 <hci_tx_thread+0x90>
    2f56:	4a37      	ldr	r2, [pc, #220]	; (3034 <hci_tx_thread+0x15c>)
    2f58:	4b38      	ldr	r3, [pc, #224]	; (303c <hci_tx_thread+0x164>)
    2f5a:	9201      	str	r2, [sp, #4]
    2f5c:	9200      	str	r2, [sp, #0]
    2f5e:	681c      	ldr	r4, [r3, #0]
    2f60:	4937      	ldr	r1, [pc, #220]	; (3040 <hci_tx_thread+0x168>)
    2f62:	4b3b      	ldr	r3, [pc, #236]	; (3050 <hci_tx_thread+0x178>)
    2f64:	483b      	ldr	r0, [pc, #236]	; (3054 <hci_tx_thread+0x17c>)
    2f66:	e7e0      	b.n	2f2a <hci_tx_thread+0x52>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2f6c:	483a      	ldr	r0, [pc, #232]	; (3058 <hci_tx_thread+0x180>)
    2f6e:	f011 ff85 	bl	14e7c <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    2f72:	4b3a      	ldr	r3, [pc, #232]	; (305c <hci_tx_thread+0x184>)
    2f74:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2f78:	b18b      	cbz	r3, 2f9e <hci_tx_thread+0xc6>
		BT_ERR("Uncleared pending sent_cmd");
    2f7a:	4b30      	ldr	r3, [pc, #192]	; (303c <hci_tx_thread+0x164>)
    2f7c:	9501      	str	r5, [sp, #4]
    2f7e:	9500      	str	r5, [sp, #0]
    2f80:	681b      	ldr	r3, [r3, #0]
    2f82:	4a2c      	ldr	r2, [pc, #176]	; (3034 <hci_tx_thread+0x15c>)
    2f84:	492e      	ldr	r1, [pc, #184]	; (3040 <hci_tx_thread+0x168>)
    2f86:	4836      	ldr	r0, [pc, #216]	; (3060 <hci_tx_thread+0x188>)
    2f88:	461c      	mov	r4, r3
    2f8a:	4b31      	ldr	r3, [pc, #196]	; (3050 <hci_tx_thread+0x178>)
    2f8c:	47a0      	blx	r4
		net_buf_unref(bt_dev.sent_cmd);
    2f8e:	4b33      	ldr	r3, [pc, #204]	; (305c <hci_tx_thread+0x184>)
    2f90:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    2f94:	f010 fe4c 	bl	13c30 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2f98:	4b30      	ldr	r3, [pc, #192]	; (305c <hci_tx_thread+0x184>)
    2f9a:	f8c3 70c4 	str.w	r7, [r3, #196]	; 0xc4
	bt_dev.sent_cmd = net_buf_ref(buf);
    2f9e:	4640      	mov	r0, r8
    2fa0:	f010 fe7a 	bl	13c98 <net_buf_ref>
    2fa4:	4b2d      	ldr	r3, [pc, #180]	; (305c <hci_tx_thread+0x184>)
    2fa6:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
	err = bt_send(buf);
    2faa:	4640      	mov	r0, r8
    2fac:	f7ff fa62 	bl	2474 <bt_send>
	if (err) {
    2fb0:	b318      	cbz	r0, 2ffa <hci_tx_thread+0x122>
		BT_ERR("Unable to send to driver (err %d)", err);
    2fb2:	4b22      	ldr	r3, [pc, #136]	; (303c <hci_tx_thread+0x164>)
    2fb4:	9001      	str	r0, [sp, #4]
    2fb6:	9502      	str	r5, [sp, #8]
    2fb8:	9500      	str	r5, [sp, #0]
    2fba:	4a1e      	ldr	r2, [pc, #120]	; (3034 <hci_tx_thread+0x15c>)
    2fbc:	4920      	ldr	r1, [pc, #128]	; (3040 <hci_tx_thread+0x168>)
    2fbe:	681f      	ldr	r7, [r3, #0]
    2fc0:	4828      	ldr	r0, [pc, #160]	; (3064 <hci_tx_thread+0x18c>)
    2fc2:	4b23      	ldr	r3, [pc, #140]	; (3050 <hci_tx_thread+0x178>)
    2fc4:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2fc6:	4824      	ldr	r0, [pc, #144]	; (3058 <hci_tx_thread+0x180>)
    2fc8:	f011 ff30 	bl	14e2c <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    2fcc:	4640      	mov	r0, r8
    2fce:	f010 fd65 	bl	13a9c <net_buf_id>
    2fd2:	4b25      	ldr	r3, [pc, #148]	; (3068 <hci_tx_thread+0x190>)
    2fd4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2fd8:	2200      	movs	r2, #0
    2fda:	211f      	movs	r1, #31
    2fdc:	8840      	ldrh	r0, [r0, #2]
    2fde:	f7ff f819 	bl	2014 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    2fe2:	4b1e      	ldr	r3, [pc, #120]	; (305c <hci_tx_thread+0x184>)
    2fe4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    2fe8:	f010 fe22 	bl	13c30 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2fec:	4a1b      	ldr	r2, [pc, #108]	; (305c <hci_tx_thread+0x184>)
    2fee:	2300      	movs	r3, #0
		net_buf_unref(buf);
    2ff0:	4640      	mov	r0, r8
		bt_dev.sent_cmd = NULL;
    2ff2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		net_buf_unref(buf);
    2ff6:	f010 fe1b 	bl	13c30 <net_buf_unref>
	for (; count; ev++, count--) {
    2ffa:	3614      	adds	r6, #20
    2ffc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    3000:	e785      	b.n	2f0e <hci_tx_thread+0x36>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    3002:	2f01      	cmp	r7, #1
    3004:	d104      	bne.n	3010 <hci_tx_thread+0x138>
					conn = CONTAINER_OF(ev->fifo,
    3006:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    3008:	3818      	subs	r0, #24
    300a:	f000 ff77 	bl	3efc <bt_conn_notify_tx>
    300e:	e7f4      	b.n	2ffa <hci_tx_thread+0x122>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    3010:	2f02      	cmp	r7, #2
    3012:	d1f2      	bne.n	2ffa <hci_tx_thread+0x122>
					conn = CONTAINER_OF(ev->fifo,
    3014:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    3016:	382c      	subs	r0, #44	; 0x2c
    3018:	f001 fce6 	bl	49e8 <bt_conn_process_tx>
    301c:	e7ed      	b.n	2ffa <hci_tx_thread+0x122>
		switch (ev->state) {
    301e:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    3020:	4b06      	ldr	r3, [pc, #24]	; (303c <hci_tx_thread+0x164>)
    3022:	9502      	str	r5, [sp, #8]
    3024:	9500      	str	r5, [sp, #0]
    3026:	681f      	ldr	r7, [r3, #0]
    3028:	4a02      	ldr	r2, [pc, #8]	; (3034 <hci_tx_thread+0x15c>)
    302a:	4b10      	ldr	r3, [pc, #64]	; (306c <hci_tx_thread+0x194>)
    302c:	4904      	ldr	r1, [pc, #16]	; (3040 <hci_tx_thread+0x168>)
    302e:	4810      	ldr	r0, [pc, #64]	; (3070 <hci_tx_thread+0x198>)
    3030:	47b8      	blx	r7
    3032:	e7e2      	b.n	2ffa <hci_tx_thread+0x122>
    3034:	000159e9 	.word	0x000159e9
    3038:	20003bb8 	.word	0x20003bb8
    303c:	20003ad4 	.word	0x20003ad4
    3040:	00016791 	.word	0x00016791
    3044:	00016066 	.word	0x00016066
    3048:	0001681c 	.word	0x0001681c
    304c:	20003ba0 	.word	0x20003ba0
    3050:	0001604e 	.word	0x0001604e
    3054:	00016846 	.word	0x00016846
    3058:	20003b80 	.word	0x20003b80
    305c:	20003ad8 	.word	0x20003ad8
    3060:	0001686b 	.word	0x0001686b
    3064:	000161d9 	.word	0x000161d9
    3068:	2000027c 	.word	0x2000027c
    306c:	00016057 	.word	0x00016057
    3070:	00016896 	.word	0x00016896

00003074 <bt_recv>:
{
    3074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    3078:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    307a:	2b01      	cmp	r3, #1
{
    307c:	b095      	sub	sp, #84	; 0x54
    307e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    3080:	d03f      	beq.n	3102 <bt_recv+0x8e>
    3082:	2b03      	cmp	r3, #3
    3084:	f040 833f 	bne.w	3706 <bt_recv+0x692>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    3088:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    308a:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    308c:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    308e:	f3c6 030b 	ubfx	r3, r6, #0, #12
    3092:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    3094:	23ff      	movs	r3, #255	; 0xff
    3096:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    3098:	2104      	movs	r1, #4
    309a:	3008      	adds	r0, #8
    309c:	f010 fe1f 	bl	13cde <net_buf_simple_pull>
	if (buf->len != len) {
    30a0:	89a3      	ldrh	r3, [r4, #12]
    30a2:	429d      	cmp	r5, r3
    30a4:	d00d      	beq.n	30c2 <bt_recv+0x4e>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    30a6:	4aa1      	ldr	r2, [pc, #644]	; (332c <bt_recv+0x2b8>)
    30a8:	9203      	str	r2, [sp, #12]
    30aa:	e88d 002c 	stmia.w	sp, {r2, r3, r5}
    30ae:	4ba0      	ldr	r3, [pc, #640]	; (3330 <bt_recv+0x2bc>)
    30b0:	49a0      	ldr	r1, [pc, #640]	; (3334 <bt_recv+0x2c0>)
    30b2:	681d      	ldr	r5, [r3, #0]
    30b4:	48a0      	ldr	r0, [pc, #640]	; (3338 <bt_recv+0x2c4>)
    30b6:	4ba1      	ldr	r3, [pc, #644]	; (333c <bt_recv+0x2c8>)
    30b8:	47a8      	blx	r5
	net_buf_unref(buf);
    30ba:	4620      	mov	r0, r4
    30bc:	f010 fdb8 	bl	13c30 <net_buf_unref>
    30c0:	e01b      	b.n	30fa <bt_recv+0x86>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    30c2:	8ae0      	ldrh	r0, [r4, #22]
    30c4:	f001 f89c 	bl	4200 <bt_conn_lookup_handle>
	if (!conn) {
    30c8:	4605      	mov	r5, r0
    30ca:	b958      	cbnz	r0, 30e4 <bt_recv+0x70>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    30cc:	4a97      	ldr	r2, [pc, #604]	; (332c <bt_recv+0x2b8>)
    30ce:	9202      	str	r2, [sp, #8]
    30d0:	8ae3      	ldrh	r3, [r4, #22]
    30d2:	4998      	ldr	r1, [pc, #608]	; (3334 <bt_recv+0x2c0>)
    30d4:	489a      	ldr	r0, [pc, #616]	; (3340 <bt_recv+0x2cc>)
    30d6:	e88d 000c 	stmia.w	sp, {r2, r3}
    30da:	4b95      	ldr	r3, [pc, #596]	; (3330 <bt_recv+0x2bc>)
    30dc:	681e      	ldr	r6, [r3, #0]
    30de:	4b97      	ldr	r3, [pc, #604]	; (333c <bt_recv+0x2c8>)
    30e0:	47b0      	blx	r6
    30e2:	e7ea      	b.n	30ba <bt_recv+0x46>
	acl(buf)->id = bt_conn_get_id(conn);
    30e4:	f001 fd2a 	bl	4b3c <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    30e8:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    30ea:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    30ec:	4621      	mov	r1, r4
    30ee:	4628      	mov	r0, r5
    30f0:	f000 fdbc 	bl	3c6c <bt_conn_recv>
	bt_conn_unref(conn);
    30f4:	4628      	mov	r0, r5
    30f6:	f001 f8d1 	bl	429c <bt_conn_unref>
		return 0;
    30fa:	2000      	movs	r0, #0
}
    30fc:	b015      	add	sp, #84	; 0x54
    30fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3102:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    3104:	7832      	ldrb	r2, [r6, #0]
    3106:	2a13      	cmp	r2, #19
    3108:	f200 830d 	bhi.w	3726 <bt_recv+0x6b2>
    310c:	4093      	lsls	r3, r2
    310e:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3112:	f000 8308 	beq.w	3726 <bt_recv+0x6b2>
    3116:	4a85      	ldr	r2, [pc, #532]	; (332c <bt_recv+0x2b8>)
    3118:	4b85      	ldr	r3, [pc, #532]	; (3330 <bt_recv+0x2bc>)
    311a:	9201      	str	r2, [sp, #4]
    311c:	9200      	str	r2, [sp, #0]
    311e:	681c      	ldr	r4, [r3, #0]
    3120:	4984      	ldr	r1, [pc, #528]	; (3334 <bt_recv+0x2c0>)
    3122:	4b88      	ldr	r3, [pc, #544]	; (3344 <bt_recv+0x2d0>)
    3124:	4888      	ldr	r0, [pc, #544]	; (3348 <bt_recv+0x2d4>)
    3126:	47a0      	blx	r4
    3128:	4040      	eors	r0, r0
    312a:	f380 8811 	msr	BASEPRI, r0
    312e:	f04f 0004 	mov.w	r0, #4
    3132:	df02      	svc	2
    3134:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    3136:	783e      	ldrb	r6, [r7, #0]
    3138:	2e00      	cmp	r6, #0
    313a:	d1be      	bne.n	30ba <bt_recv+0x46>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    313c:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    3140:	4640      	mov	r0, r8
    3142:	f001 f85d 	bl	4200 <bt_conn_lookup_handle>
	if (!conn) {
    3146:	4605      	mov	r5, r0
    3148:	b9c8      	cbnz	r0, 317e <bt_recv+0x10a>
		BT_ERR("Unable to look up conn with handle %u", handle);
    314a:	4a78      	ldr	r2, [pc, #480]	; (332c <bt_recv+0x2b8>)
    314c:	4b78      	ldr	r3, [pc, #480]	; (3330 <bt_recv+0x2bc>)
    314e:	9202      	str	r2, [sp, #8]
    3150:	e88d 0104 	stmia.w	sp, {r2, r8}
    3154:	4977      	ldr	r1, [pc, #476]	; (3334 <bt_recv+0x2c0>)
    3156:	681d      	ldr	r5, [r3, #0]
    3158:	487c      	ldr	r0, [pc, #496]	; (334c <bt_recv+0x2d8>)
    315a:	4b7d      	ldr	r3, [pc, #500]	; (3350 <bt_recv+0x2dc>)
    315c:	47a8      	blx	r5
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    315e:	2107      	movs	r1, #7
    3160:	487c      	ldr	r0, [pc, #496]	; (3354 <bt_recv+0x2e0>)
    3162:	f7fe ffbb 	bl	20dc <atomic_test_bit>
    3166:	2800      	cmp	r0, #0
    3168:	d0a7      	beq.n	30ba <bt_recv+0x46>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    316a:	2106      	movs	r1, #6
    316c:	4879      	ldr	r0, [pc, #484]	; (3354 <bt_recv+0x2e0>)
    316e:	f7fe ffb5 	bl	20dc <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3172:	2800      	cmp	r0, #0
    3174:	d1a1      	bne.n	30ba <bt_recv+0x46>
		set_advertise_enable(true);
    3176:	2001      	movs	r0, #1
    3178:	f7ff f8a2 	bl	22c0 <set_advertise_enable>
    317c:	e79d      	b.n	30ba <bt_recv+0x46>
	conn->err = evt->reason;
    317e:	78fb      	ldrb	r3, [r7, #3]
    3180:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    3182:	4975      	ldr	r1, [pc, #468]	; (3358 <bt_recv+0x2e4>)
    3184:	4875      	ldr	r0, [pc, #468]	; (335c <bt_recv+0x2e8>)
    3186:	f012 f801 	bl	1518c <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    318a:	4631      	mov	r1, r6
    318c:	4628      	mov	r0, r5
    318e:	f001 f941 	bl	4414 <bt_conn_set_state>
	conn->handle = 0;
    3192:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    3194:	78ae      	ldrb	r6, [r5, #2]
    3196:	b10e      	cbz	r6, 319c <bt_recv+0x128>
	bt_conn_unref(conn);
    3198:	4628      	mov	r0, r5
    319a:	e088      	b.n	32ae <bt_recv+0x23a>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    319c:	4631      	mov	r1, r6
    319e:	1d28      	adds	r0, r5, #4
    31a0:	f7fe ff9c 	bl	20dc <atomic_test_bit>
    31a4:	b130      	cbz	r0, 31b4 <bt_recv+0x140>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    31a6:	4628      	mov	r0, r5
    31a8:	2101      	movs	r1, #1
    31aa:	f001 f933 	bl	4414 <bt_conn_set_state>
		bt_le_scan_update(false);
    31ae:	4630      	mov	r0, r6
    31b0:	f7ff f9ee 	bl	2590 <bt_le_scan_update>
	bt_conn_unref(conn);
    31b4:	4628      	mov	r0, r5
    31b6:	f001 f871 	bl	429c <bt_conn_unref>
    31ba:	e7d0      	b.n	315e <bt_recv+0xea>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    31bc:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    31be:	2101      	movs	r1, #1
    31c0:	4628      	mov	r0, r5
    31c2:	f010 fd8c 	bl	13cde <net_buf_simple_pull>
	switch (evt->subevent) {
    31c6:	7836      	ldrb	r6, [r6, #0]
    31c8:	1e73      	subs	r3, r6, #1
    31ca:	2b0b      	cmp	r3, #11
    31cc:	f200 8289 	bhi.w	36e2 <bt_recv+0x66e>
    31d0:	e8df f013 	tbh	[pc, r3, lsl #1]
    31d4:	01a0000c 	.word	0x01a0000c
    31d8:	00700043 	.word	0x00700043
    31dc:	00ce0287 	.word	0x00ce0287
    31e0:	0171012b 	.word	0x0171012b
    31e4:	00410191 	.word	0x00410191
    31e8:	01460287 	.word	0x01460287
    31ec:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    31ee:	780b      	ldrb	r3, [r1, #0]
    31f0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	enh.handle         = evt->handle;
    31f4:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    31f8:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
	enh.role           = evt->role;
    31fc:	78cb      	ldrb	r3, [r1, #3]
    31fe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	enh.interval       = evt->interval;
    3202:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    3206:	f8ad 3047 	strh.w	r3, [sp, #71]	; 0x47
	enh.latency        = evt->latency;
    320a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    320e:	f8ad 3049 	strh.w	r3, [sp, #73]	; 0x49
	enh.supv_timeout   = evt->supv_timeout;
    3212:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    3216:	f8ad 304b 	strh.w	r3, [sp, #75]	; 0x4b
	enh.clock_accuracy = evt->clock_accuracy;
    321a:	7c4b      	ldrb	r3, [r1, #17]
    321c:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    3220:	3104      	adds	r1, #4
    3222:	a80d      	add	r0, sp, #52	; 0x34
    3224:	f7fe fec2 	bl	1fac <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    3228:	2500      	movs	r5, #0
    322a:	2206      	movs	r2, #6
    322c:	a908      	add	r1, sp, #32
    322e:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
    3232:	9508      	str	r5, [sp, #32]
    3234:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
    3238:	f7fe fcf2 	bl	1c20 <memcpy>
    323c:	2206      	movs	r2, #6
    323e:	a90a      	add	r1, sp, #40	; 0x28
    3240:	f10d 0041 	add.w	r0, sp, #65	; 0x41
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    3244:	950a      	str	r5, [sp, #40]	; 0x28
    3246:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    324a:	f7fe fce9 	bl	1c20 <memcpy>
	le_enh_conn_complete(&enh);
    324e:	a80c      	add	r0, sp, #48	; 0x30
		le_enh_conn_complete((void *)buf->data);
    3250:	f7ff fd4c 	bl	2cec <le_enh_conn_complete>
    3254:	e731      	b.n	30ba <bt_recv+0x46>
    3256:	68a0      	ldr	r0, [r4, #8]
    3258:	e7fa      	b.n	3250 <bt_recv+0x1dc>
    325a:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    325c:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    3260:	4638      	mov	r0, r7
    3262:	f000 ffcd 	bl	4200 <bt_conn_lookup_handle>
	if (!conn) {
    3266:	4606      	mov	r6, r0
    3268:	b950      	cbnz	r0, 3280 <bt_recv+0x20c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    326a:	4a30      	ldr	r2, [pc, #192]	; (332c <bt_recv+0x2b8>)
    326c:	4b30      	ldr	r3, [pc, #192]	; (3330 <bt_recv+0x2bc>)
    326e:	9202      	str	r2, [sp, #8]
    3270:	e88d 0084 	stmia.w	sp, {r2, r7}
    3274:	681d      	ldr	r5, [r3, #0]
    3276:	4b3a      	ldr	r3, [pc, #232]	; (3360 <bt_recv+0x2ec>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3278:	492e      	ldr	r1, [pc, #184]	; (3334 <bt_recv+0x2c0>)
    327a:	483a      	ldr	r0, [pc, #232]	; (3364 <bt_recv+0x2f0>)
    327c:	47a8      	blx	r5
    327e:	e71c      	b.n	30ba <bt_recv+0x46>
	if (!evt->status) {
    3280:	782b      	ldrb	r3, [r5, #0]
    3282:	b99b      	cbnz	r3, 32ac <bt_recv+0x238>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3284:	792a      	ldrb	r2, [r5, #4]
    3286:	78eb      	ldrb	r3, [r5, #3]
    3288:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    328c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3290:	79aa      	ldrb	r2, [r5, #6]
    3292:	796b      	ldrb	r3, [r5, #5]
    3294:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3298:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    329c:	79eb      	ldrb	r3, [r5, #7]
    329e:	7a2a      	ldrb	r2, [r5, #8]
    32a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    32a4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
		notify_le_param_updated(conn);
    32a8:	f000 fca4 	bl	3bf4 <notify_le_param_updated>
	bt_conn_unref(conn);
    32ac:	4630      	mov	r0, r6
	bt_conn_unref(conn);
    32ae:	f000 fff5 	bl	429c <bt_conn_unref>
    32b2:	e702      	b.n	30ba <bt_recv+0x46>
    32b4:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    32b6:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    32ba:	4638      	mov	r0, r7
    32bc:	f000 ffa0 	bl	4200 <bt_conn_lookup_handle>
	if (!conn) {
    32c0:	4605      	mov	r5, r0
    32c2:	b938      	cbnz	r0, 32d4 <bt_recv+0x260>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    32c4:	4a19      	ldr	r2, [pc, #100]	; (332c <bt_recv+0x2b8>)
    32c6:	4b1a      	ldr	r3, [pc, #104]	; (3330 <bt_recv+0x2bc>)
    32c8:	9202      	str	r2, [sp, #8]
    32ca:	e88d 0084 	stmia.w	sp, {r2, r7}
    32ce:	681d      	ldr	r5, [r3, #0]
    32d0:	4b25      	ldr	r3, [pc, #148]	; (3368 <bt_recv+0x2f4>)
    32d2:	e7d1      	b.n	3278 <bt_recv+0x204>
	if (!evt->status) {
    32d4:	7833      	ldrb	r3, [r6, #0]
    32d6:	b923      	cbnz	r3, 32e2 <bt_recv+0x26e>
		memcpy(conn->le.features, evt->features,
    32d8:	2208      	movs	r2, #8
    32da:	1cf1      	adds	r1, r6, #3
    32dc:	306c      	adds	r0, #108	; 0x6c
    32de:	f7fe fc9f 	bl	1c20 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    32e2:	4e22      	ldr	r6, [pc, #136]	; (336c <bt_recv+0x2f8>)
    32e4:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    32e8:	07d2      	lsls	r2, r2, #31
    32ea:	d50c      	bpl.n	3306 <bt_recv+0x292>
    32ec:	f895 306d 	ldrb.w	r3, [r5, #109]	; 0x6d
    32f0:	07db      	lsls	r3, r3, #31
    32f2:	d508      	bpl.n	3306 <bt_recv+0x292>
		err = hci_le_set_phy(conn);
    32f4:	4628      	mov	r0, r5
    32f6:	f7ff fcaf 	bl	2c58 <hci_le_set_phy.isra.28>
		if (!err) {
    32fa:	b920      	cbnz	r0, 3306 <bt_recv+0x292>
    32fc:	2180      	movs	r1, #128	; 0x80
    32fe:	1d28      	adds	r0, r5, #4
    3300:	f7fe fe57 	bl	1fb2 <atomic_or>
    3304:	e748      	b.n	3198 <bt_recv+0x124>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3306:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    330a:	069f      	lsls	r7, r3, #26
    330c:	f140 80a4 	bpl.w	3458 <bt_recv+0x3e4>
    3310:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
    3314:	069e      	lsls	r6, r3, #26
    3316:	f140 809f 	bpl.w	3458 <bt_recv+0x3e4>
		err = hci_le_set_data_len(conn);
    331a:	4628      	mov	r0, r5
    331c:	f7ff fcbc 	bl	2c98 <hci_le_set_data_len.isra.29>
		if (!err) {
    3320:	2800      	cmp	r0, #0
    3322:	f040 8099 	bne.w	3458 <bt_recv+0x3e4>
    3326:	f44f 7180 	mov.w	r1, #256	; 0x100
    332a:	e7e8      	b.n	32fe <bt_recv+0x28a>
    332c:	000159e9 	.word	0x000159e9
    3330:	20003ad4 	.word	0x20003ad4
    3334:	00016791 	.word	0x00016791
    3338:	00016480 	.word	0x00016480
    333c:	00015f6d 	.word	0x00015f6d
    3340:	000164b4 	.word	0x000164b4
    3344:	00016044 	.word	0x00016044
    3348:	000165df 	.word	0x000165df
    334c:	000164e6 	.word	0x000164e6
    3350:	00015f8f 	.word	0x00015f8f
    3354:	20003b48 	.word	0x20003b48
    3358:	0001651c 	.word	0x0001651c
    335c:	00001f71 	.word	0x00001f71
    3360:	0001600d 	.word	0x0001600d
    3364:	00016520 	.word	0x00016520
    3368:	00015fb9 	.word	0x00015fb9
    336c:	20003ad8 	.word	0x20003ad8
    3370:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3372:	78d9      	ldrb	r1, [r3, #3]
    3374:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    3376:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3378:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    337c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    3380:	7959      	ldrb	r1, [r3, #5]
    3382:	791a      	ldrb	r2, [r3, #4]
    3384:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3388:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	param.latency = sys_le16_to_cpu(evt->latency);
    338c:	799a      	ldrb	r2, [r3, #6]
    338e:	79d9      	ldrb	r1, [r3, #7]
    3390:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3394:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3398:	7a1a      	ldrb	r2, [r3, #8]
    339a:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    339c:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    339e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    33a2:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    33a4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	conn = bt_conn_lookup_handle(handle);
    33a8:	f000 ff2a 	bl	4200 <bt_conn_lookup_handle>
	if (!conn) {
    33ac:	4680      	mov	r8, r0
    33ae:	b970      	cbnz	r0, 33ce <bt_recv+0x35a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    33b0:	4ab4      	ldr	r2, [pc, #720]	; (3684 <bt_recv+0x610>)
    33b2:	4bb5      	ldr	r3, [pc, #724]	; (3688 <bt_recv+0x614>)
    33b4:	9202      	str	r2, [sp, #8]
    33b6:	e88d 0024 	stmia.w	sp, {r2, r5}
    33ba:	49b4      	ldr	r1, [pc, #720]	; (368c <bt_recv+0x618>)
    33bc:	681e      	ldr	r6, [r3, #0]
    33be:	48b4      	ldr	r0, [pc, #720]	; (3690 <bt_recv+0x61c>)
    33c0:	4bb4      	ldr	r3, [pc, #720]	; (3694 <bt_recv+0x620>)
    33c2:	47b0      	blx	r6
		return le_conn_param_neg_reply(handle,
    33c4:	2102      	movs	r1, #2
    33c6:	4628      	mov	r0, r5
    33c8:	f7ff fd6c 	bl	2ea4 <le_conn_param_neg_reply>
    33cc:	e675      	b.n	30ba <bt_recv+0x46>
	if (!le_param_req(conn, &param)) {
    33ce:	a90c      	add	r1, sp, #48	; 0x30
    33d0:	f000 fc24 	bl	3c1c <le_param_req>
    33d4:	b928      	cbnz	r0, 33e2 <bt_recv+0x36e>
		err = le_conn_param_neg_reply(handle,
    33d6:	211e      	movs	r1, #30
    33d8:	4628      	mov	r0, r5
    33da:	f7ff fd63 	bl	2ea4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    33de:	4640      	mov	r0, r8
    33e0:	e765      	b.n	32ae <bt_recv+0x23a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    33e2:	210e      	movs	r1, #14
    33e4:	f242 0020 	movw	r0, #8224	; 0x2020
    33e8:	f7fe fe86 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    33ec:	4606      	mov	r6, r0
    33ee:	2800      	cmp	r0, #0
    33f0:	d0f5      	beq.n	33de <bt_recv+0x36a>
	cp = net_buf_add(buf, sizeof(*cp));
    33f2:	210e      	movs	r1, #14
    33f4:	3008      	adds	r0, #8
    33f6:	f010 fc53 	bl	13ca0 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    33fa:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    33fc:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    33fe:	2100      	movs	r1, #0
    3400:	f7fe fc3a 	bl	1c78 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    3404:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    3408:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    340a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    340e:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    3410:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    3414:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    3416:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cp->handle = sys_cpu_to_le16(handle);
    341a:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    341c:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    341e:	4631      	mov	r1, r6
    3420:	f242 0020 	movw	r0, #8224	; 0x2020
    3424:	f7ff f82e 	bl	2484 <bt_hci_cmd_send>
    3428:	e7d9      	b.n	33de <bt_recv+0x36a>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    342a:	68a3      	ldr	r3, [r4, #8]
    342c:	881e      	ldrh	r6, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    342e:	4630      	mov	r0, r6
    3430:	f000 fee6 	bl	4200 <bt_conn_lookup_handle>
	if (!conn) {
    3434:	4605      	mov	r5, r0
    3436:	b938      	cbnz	r0, 3448 <bt_recv+0x3d4>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3438:	4a92      	ldr	r2, [pc, #584]	; (3684 <bt_recv+0x610>)
    343a:	4b93      	ldr	r3, [pc, #588]	; (3688 <bt_recv+0x614>)
    343c:	9202      	str	r2, [sp, #8]
    343e:	e88d 0044 	stmia.w	sp, {r2, r6}
    3442:	681d      	ldr	r5, [r3, #0]
    3444:	4b94      	ldr	r3, [pc, #592]	; (3698 <bt_recv+0x624>)
    3446:	e717      	b.n	3278 <bt_recv+0x204>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3448:	f46f 7180 	mvn.w	r1, #256	; 0x100
    344c:	3004      	adds	r0, #4
    344e:	f7fe fdc1 	bl	1fd4 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    3452:	05c0      	lsls	r0, r0, #23
    3454:	f57f aea0 	bpl.w	3198 <bt_recv+0x124>
	update_conn_param(conn);
    3458:	4628      	mov	r0, r5
    345a:	f7fe fdcd 	bl	1ff8 <update_conn_param>
    345e:	e69b      	b.n	3198 <bt_recv+0x124>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3460:	68a3      	ldr	r3, [r4, #8]
    3462:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    3466:	4630      	mov	r0, r6
    3468:	f000 feca 	bl	4200 <bt_conn_lookup_handle>
	if (!conn) {
    346c:	4605      	mov	r5, r0
    346e:	b938      	cbnz	r0, 3480 <bt_recv+0x40c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3470:	4a84      	ldr	r2, [pc, #528]	; (3684 <bt_recv+0x610>)
    3472:	4b85      	ldr	r3, [pc, #532]	; (3688 <bt_recv+0x614>)
    3474:	9202      	str	r2, [sp, #8]
    3476:	e88d 0044 	stmia.w	sp, {r2, r6}
    347a:	681d      	ldr	r5, [r3, #0]
    347c:	4b87      	ldr	r3, [pc, #540]	; (369c <bt_recv+0x628>)
    347e:	e6fb      	b.n	3278 <bt_recv+0x204>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3480:	1d06      	adds	r6, r0, #4
    3482:	f06f 0180 	mvn.w	r1, #128	; 0x80
    3486:	4630      	mov	r0, r6
    3488:	f7fe fda4 	bl	1fd4 <atomic_and>
    348c:	0601      	lsls	r1, r0, #24
    348e:	f57f ae83 	bpl.w	3198 <bt_recv+0x124>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3492:	4b83      	ldr	r3, [pc, #524]	; (36a0 <bt_recv+0x62c>)
    3494:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3498:	069a      	lsls	r2, r3, #26
    349a:	d5dd      	bpl.n	3458 <bt_recv+0x3e4>
    349c:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
    34a0:	069b      	lsls	r3, r3, #26
    34a2:	d5d9      	bpl.n	3458 <bt_recv+0x3e4>
		err = hci_le_set_data_len(conn);
    34a4:	4628      	mov	r0, r5
    34a6:	f7ff fbf7 	bl	2c98 <hci_le_set_data_len.isra.29>
		if (!err) {
    34aa:	2800      	cmp	r0, #0
    34ac:	d1d4      	bne.n	3458 <bt_recv+0x3e4>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    34ae:	f44f 7180 	mov.w	r1, #256	; 0x100
    34b2:	4630      	mov	r0, r6
    34b4:	e724      	b.n	3300 <bt_recv+0x28c>
    34b6:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    34b8:	487a      	ldr	r0, [pc, #488]	; (36a4 <bt_recv+0x630>)
    34ba:	f06f 0120 	mvn.w	r1, #32
    34be:	f7fe fd89 	bl	1fd4 <atomic_and>
	if (!evt->status) {
    34c2:	7833      	ldrb	r3, [r6, #0]
    34c4:	b943      	cbnz	r3, 34d8 <bt_recv+0x464>
		memcpy(pub_key, evt->key, 64);
    34c6:	1c71      	adds	r1, r6, #1
    34c8:	2240      	movs	r2, #64	; 0x40
    34ca:	4877      	ldr	r0, [pc, #476]	; (36a8 <bt_recv+0x634>)
    34cc:	f7fe fba8 	bl	1c20 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    34d0:	2110      	movs	r1, #16
    34d2:	4874      	ldr	r0, [pc, #464]	; (36a4 <bt_recv+0x630>)
    34d4:	f7fe fd6d 	bl	1fb2 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    34d8:	4b74      	ldr	r3, [pc, #464]	; (36ac <bt_recv+0x638>)
    34da:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    34dc:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    34de:	2d00      	cmp	r5, #0
    34e0:	f43f adeb 	beq.w	30ba <bt_recv+0x46>
		cb->func(evt->status ? NULL : evt->key);
    34e4:	7832      	ldrb	r2, [r6, #0]
    34e6:	682b      	ldr	r3, [r5, #0]
    34e8:	2a00      	cmp	r2, #0
    34ea:	bf0c      	ite	eq
    34ec:	4638      	moveq	r0, r7
    34ee:	2000      	movne	r0, #0
    34f0:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    34f2:	686d      	ldr	r5, [r5, #4]
    34f4:	e7f3      	b.n	34de <bt_recv+0x46a>
	if (dh_key_cb) {
    34f6:	4d6e      	ldr	r5, [pc, #440]	; (36b0 <bt_recv+0x63c>)
    34f8:	68a0      	ldr	r0, [r4, #8]
    34fa:	682a      	ldr	r2, [r5, #0]
    34fc:	2a00      	cmp	r2, #0
    34fe:	f43f addc 	beq.w	30ba <bt_recv+0x46>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3502:	7803      	ldrb	r3, [r0, #0]
    3504:	b923      	cbnz	r3, 3510 <bt_recv+0x49c>
    3506:	3001      	adds	r0, #1
    3508:	4790      	blx	r2
		dh_key_cb = NULL;
    350a:	2300      	movs	r3, #0
    350c:	602b      	str	r3, [r5, #0]
    350e:	e5d4      	b.n	30ba <bt_recv+0x46>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3510:	2000      	movs	r0, #0
    3512:	e7f9      	b.n	3508 <bt_recv+0x494>
	u8_t num_reports = net_buf_pull_u8(buf);
    3514:	4628      	mov	r0, r5
    3516:	f010 fbea 	bl	13cee <net_buf_simple_pull_u8>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    351a:	f8df 9188 	ldr.w	r9, [pc, #392]	; 36a4 <bt_recv+0x630>
	u8_t num_reports = net_buf_pull_u8(buf);
    351e:	9006      	str	r0, [sp, #24]
	while (num_reports--) {
    3520:	9b06      	ldr	r3, [sp, #24]
    3522:	2b00      	cmp	r3, #0
    3524:	f43f adc9 	beq.w	30ba <bt_recv+0x46>
		info = (void *)buf->data;
    3528:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    352a:	2109      	movs	r1, #9
    352c:	4628      	mov	r0, r5
    352e:	f010 fbd6 	bl	13cde <net_buf_simple_pull>
		rssi = info->data[info->length];
    3532:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3534:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    3536:	4433      	add	r3, r6
			bt_addr_le_copy(&id_addr, &info->addr);
    3538:	a80c      	add	r0, sp, #48	; 0x30
		rssi = info->data[info->length];
    353a:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    353e:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    3542:	3b02      	subs	r3, #2
    3544:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    3546:	4641      	mov	r1, r8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3548:	f200 8099 	bhi.w	367e <bt_recv+0x60a>
			bt_addr_le_copy(&id_addr, &info->addr);
    354c:	f7fe fd2e 	bl	1fac <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3550:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3554:	3b02      	subs	r3, #2
    3556:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (scan_dev_found_cb) {
    355a:	4b56      	ldr	r3, [pc, #344]	; (36b4 <bt_recv+0x640>)
    355c:	681b      	ldr	r3, [r3, #0]
    355e:	b1bb      	cbz	r3, 3590 <bt_recv+0x51c>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3560:	4628      	mov	r0, r5
    3562:	f010 fbd4 	bl	13d0e <net_buf_simple_headroom>
	state->len = buf->len;
    3566:	89a3      	ldrh	r3, [r4, #12]
    3568:	9307      	str	r3, [sp, #28]
			buf->len = info->length;
    356a:	7a33      	ldrb	r3, [r6, #8]
    356c:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    356e:	4b51      	ldr	r3, [pc, #324]	; (36b4 <bt_recv+0x640>)
    3570:	7832      	ldrb	r2, [r6, #0]
    3572:	681b      	ldr	r3, [r3, #0]
	state->offset = net_buf_simple_headroom(buf);
    3574:	4682      	mov	sl, r0
    3576:	461f      	mov	r7, r3
    3578:	fa4f f18b 	sxtb.w	r1, fp
    357c:	462b      	mov	r3, r5
    357e:	a80c      	add	r0, sp, #48	; 0x30
    3580:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3582:	6923      	ldr	r3, [r4, #16]
    3584:	fa13 f38a 	uxtah	r3, r3, sl
    3588:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    358a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    358e:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3590:	2109      	movs	r1, #9
    3592:	4648      	mov	r0, r9
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    3594:	7832      	ldrb	r2, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3596:	f7fe fda1 	bl	20dc <atomic_test_bit>
    359a:	4682      	mov	sl, r0
    359c:	2800      	cmp	r0, #0
    359e:	d164      	bne.n	366a <bt_recv+0x5f6>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    35a0:	2a01      	cmp	r2, #1
    35a2:	d862      	bhi.n	366a <bt_recv+0x5f6>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    35a4:	2101      	movs	r1, #1
    35a6:	a80c      	add	r0, sp, #48	; 0x30
    35a8:	f000 fe5a 	bl	4260 <bt_conn_lookup_state_le>
	if (!conn) {
    35ac:	4607      	mov	r7, r0
    35ae:	2800      	cmp	r0, #0
    35b0:	d05b      	beq.n	366a <bt_recv+0x5f6>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    35b2:	2108      	movs	r1, #8
    35b4:	4648      	mov	r0, r9
    35b6:	f7fe fd91 	bl	20dc <atomic_test_bit>
    35ba:	2800      	cmp	r0, #0
    35bc:	d17e      	bne.n	36bc <bt_recv+0x648>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    35be:	2102      	movs	r1, #2
    35c0:	4648      	mov	r0, r9
    35c2:	f7fe fd8b 	bl	20dc <atomic_test_bit>
    35c6:	b110      	cbz	r0, 35ce <bt_recv+0x55a>
			set_random_address(&bt_dev.id_addr.a);
    35c8:	483b      	ldr	r0, [pc, #236]	; (36b8 <bt_recv+0x644>)
    35ca:	f7fe fe39 	bl	2240 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    35ce:	4934      	ldr	r1, [pc, #208]	; (36a0 <bt_recv+0x62c>)
    35d0:	f107 0053 	add.w	r0, r7, #83	; 0x53
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    35d4:	f107 0a5a 	add.w	sl, r7, #90	; 0x5a
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    35d8:	f7fe fce8 	bl	1fac <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    35dc:	4641      	mov	r1, r8
    35de:	4650      	mov	r0, sl
    35e0:	f7fe fce4 	bl	1fac <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    35e4:	2119      	movs	r1, #25
    35e6:	f242 000d 	movw	r0, #8205	; 0x200d
    35ea:	f7fe fd85 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    35ee:	4683      	mov	fp, r0
    35f0:	2800      	cmp	r0, #0
    35f2:	d069      	beq.n	36c8 <bt_recv+0x654>
	cp = net_buf_add(buf, sizeof(*cp));
    35f4:	2119      	movs	r1, #25
    35f6:	3008      	adds	r0, #8
    35f8:	f010 fb52 	bl	13ca0 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    35fc:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    35fe:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
    3600:	2100      	movs	r1, #0
    3602:	f7fe fb39 	bl	1c78 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3606:	2200      	movs	r2, #0
    3608:	2360      	movs	r3, #96	; 0x60
    360a:	f888 3000 	strb.w	r3, [r8]
    360e:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
    3612:	f888 3002 	strb.w	r3, [r8, #2]
    3616:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    361a:	4651      	mov	r1, sl
    361c:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
    3620:	9207      	str	r2, [sp, #28]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3622:	f7fe fcc3 	bl	1fac <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    3626:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
    362a:	f888 300c 	strb.w	r3, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    362e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
    3632:	f8a8 300d 	strh.w	r3, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    3636:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    363a:	f8a8 300f 	strh.w	r3, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    363e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
    3642:	f8a8 3011 	strh.w	r3, [r8, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    3646:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
    364a:	f8a8 3013 	strh.w	r3, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    364e:	9a07      	ldr	r2, [sp, #28]
    3650:	4659      	mov	r1, fp
    3652:	f242 000d 	movw	r0, #8205	; 0x200d
    3656:	f7fe fd7f 	bl	2158 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    365a:	bba8      	cbnz	r0, 36c8 <bt_recv+0x654>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    365c:	4638      	mov	r0, r7
    365e:	2102      	movs	r1, #2
    3660:	f000 fed8 	bl	4414 <bt_conn_set_state>
	bt_conn_unref(conn);
    3664:	4638      	mov	r0, r7
    3666:	f000 fe19 	bl	429c <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    366a:	7a31      	ldrb	r1, [r6, #8]
    366c:	4628      	mov	r0, r5
    366e:	3101      	adds	r1, #1
    3670:	f010 fb35 	bl	13cde <net_buf_simple_pull>
    3674:	9b06      	ldr	r3, [sp, #24]
    3676:	3b01      	subs	r3, #1
    3678:	b2db      	uxtb	r3, r3
    367a:	9306      	str	r3, [sp, #24]
    367c:	e750      	b.n	3520 <bt_recv+0x4ac>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    367e:	f7fe fc95 	bl	1fac <bt_addr_le_copy>
    3682:	e76a      	b.n	355a <bt_recv+0x4e6>
    3684:	000159e9 	.word	0x000159e9
    3688:	20003ad4 	.word	0x20003ad4
    368c:	00016791 	.word	0x00016791
    3690:	00016520 	.word	0x00016520
    3694:	00015ffb 	.word	0x00015ffb
    3698:	00015fd1 	.word	0x00015fd1
    369c:	00015fe4 	.word	0x00015fe4
    36a0:	20003ad8 	.word	0x20003ad8
    36a4:	20003b48 	.word	0x20003b48
    36a8:	20000290 	.word	0x20000290
    36ac:	200002d0 	.word	0x200002d0
    36b0:	2000028c 	.word	0x2000028c
    36b4:	200002d8 	.word	0x200002d8
    36b8:	20003ad9 	.word	0x20003ad9
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    36bc:	4650      	mov	r0, sl
    36be:	f7fe fd89 	bl	21d4 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    36c2:	2800      	cmp	r0, #0
    36c4:	f43f af7b 	beq.w	35be <bt_recv+0x54a>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    36c8:	231f      	movs	r3, #31
    36ca:	723b      	strb	r3, [r7, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    36cc:	2100      	movs	r1, #0
    36ce:	4638      	mov	r0, r7
    36d0:	f000 fea0 	bl	4414 <bt_conn_set_state>
	bt_conn_unref(conn);
    36d4:	4638      	mov	r0, r7
    36d6:	f000 fde1 	bl	429c <bt_conn_unref>
	bt_le_scan_update(false);
    36da:	2000      	movs	r0, #0
    36dc:	f7fe ff58 	bl	2590 <bt_le_scan_update>
    36e0:	e7c3      	b.n	366a <bt_recv+0x5f6>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    36e2:	89a5      	ldrh	r5, [r4, #12]
    36e4:	4b1f      	ldr	r3, [pc, #124]	; (3764 <bt_recv+0x6f0>)
    36e6:	68a0      	ldr	r0, [r4, #8]
    36e8:	681f      	ldr	r7, [r3, #0]
    36ea:	4629      	mov	r1, r5
    36ec:	f7fe fae8 	bl	1cc0 <bt_hex>
    36f0:	4a1d      	ldr	r2, [pc, #116]	; (3768 <bt_recv+0x6f4>)
    36f2:	9003      	str	r0, [sp, #12]
    36f4:	e88d 0044 	stmia.w	sp, {r2, r6}
    36f8:	4b1c      	ldr	r3, [pc, #112]	; (376c <bt_recv+0x6f8>)
    36fa:	491d      	ldr	r1, [pc, #116]	; (3770 <bt_recv+0x6fc>)
    36fc:	481d      	ldr	r0, [pc, #116]	; (3774 <bt_recv+0x700>)
    36fe:	9204      	str	r2, [sp, #16]
    3700:	9502      	str	r5, [sp, #8]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3702:	47b8      	blx	r7
    3704:	e4d9      	b.n	30ba <bt_recv+0x46>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    3706:	4a18      	ldr	r2, [pc, #96]	; (3768 <bt_recv+0x6f4>)
    3708:	9202      	str	r2, [sp, #8]
    370a:	e88d 000c 	stmia.w	sp, {r2, r3}
    370e:	4b15      	ldr	r3, [pc, #84]	; (3764 <bt_recv+0x6f0>)
    3710:	4917      	ldr	r1, [pc, #92]	; (3770 <bt_recv+0x6fc>)
    3712:	681d      	ldr	r5, [r3, #0]
    3714:	4818      	ldr	r0, [pc, #96]	; (3778 <bt_recv+0x704>)
    3716:	4b19      	ldr	r3, [pc, #100]	; (377c <bt_recv+0x708>)
    3718:	47a8      	blx	r5
		net_buf_unref(buf);
    371a:	4620      	mov	r0, r4
    371c:	f010 fa88 	bl	13c30 <net_buf_unref>
		return -EINVAL;
    3720:	f06f 0015 	mvn.w	r0, #21
    3724:	e4ea      	b.n	30fc <bt_recv+0x88>
	net_buf_pull(buf, sizeof(*hdr));
    3726:	f104 0508 	add.w	r5, r4, #8
    372a:	2102      	movs	r1, #2
    372c:	4628      	mov	r0, r5
    372e:	f010 fad6 	bl	13cde <net_buf_simple_pull>
	switch (hdr->evt) {
    3732:	7836      	ldrb	r6, [r6, #0]
    3734:	2e05      	cmp	r6, #5
    3736:	f43f acfd 	beq.w	3134 <bt_recv+0xc0>
    373a:	2e3e      	cmp	r6, #62	; 0x3e
    373c:	f43f ad3e 	beq.w	31bc <bt_recv+0x148>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3740:	89a5      	ldrh	r5, [r4, #12]
    3742:	4b08      	ldr	r3, [pc, #32]	; (3764 <bt_recv+0x6f0>)
    3744:	68a0      	ldr	r0, [r4, #8]
    3746:	681f      	ldr	r7, [r3, #0]
    3748:	4629      	mov	r1, r5
    374a:	f7fe fab9 	bl	1cc0 <bt_hex>
    374e:	4a06      	ldr	r2, [pc, #24]	; (3768 <bt_recv+0x6f4>)
    3750:	9003      	str	r0, [sp, #12]
    3752:	9204      	str	r2, [sp, #16]
    3754:	9502      	str	r5, [sp, #8]
    3756:	e88d 0044 	stmia.w	sp, {r2, r6}
    375a:	4b09      	ldr	r3, [pc, #36]	; (3780 <bt_recv+0x70c>)
    375c:	4904      	ldr	r1, [pc, #16]	; (3770 <bt_recv+0x6fc>)
    375e:	4809      	ldr	r0, [pc, #36]	; (3784 <bt_recv+0x710>)
    3760:	e7cf      	b.n	3702 <bt_recv+0x68e>
    3762:	bf00      	nop
    3764:	20003ad4 	.word	0x20003ad4
    3768:	000159e9 	.word	0x000159e9
    376c:	00016032 	.word	0x00016032
    3770:	00016791 	.word	0x00016791
    3774:	00016554 	.word	0x00016554
    3778:	000165bb 	.word	0x000165bb
    377c:	000160c3 	.word	0x000160c3
    3780:	00016044 	.word	0x00016044
    3784:	00016589 	.word	0x00016589

00003788 <bt_recv_prio>:
{
    3788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    378c:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    378e:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3790:	2b01      	cmp	r3, #1
{
    3792:	b087      	sub	sp, #28
    3794:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3796:	d00e      	beq.n	37b6 <bt_recv_prio+0x2e>
    3798:	4a68      	ldr	r2, [pc, #416]	; (393c <bt_recv_prio+0x1b4>)
    379a:	4b69      	ldr	r3, [pc, #420]	; (3940 <bt_recv_prio+0x1b8>)
    379c:	9201      	str	r2, [sp, #4]
    379e:	9200      	str	r2, [sp, #0]
    37a0:	681c      	ldr	r4, [r3, #0]
    37a2:	4968      	ldr	r1, [pc, #416]	; (3944 <bt_recv_prio+0x1bc>)
    37a4:	4b68      	ldr	r3, [pc, #416]	; (3948 <bt_recv_prio+0x1c0>)
    37a6:	4869      	ldr	r0, [pc, #420]	; (394c <bt_recv_prio+0x1c4>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    37a8:	47a0      	blx	r4
    37aa:	4040      	eors	r0, r0
    37ac:	f380 8811 	msr	BASEPRI, r0
    37b0:	f04f 0004 	mov.w	r0, #4
    37b4:	df02      	svc	2
    37b6:	8982      	ldrh	r2, [r0, #12]
    37b8:	2a01      	cmp	r2, #1
    37ba:	d808      	bhi.n	37ce <bt_recv_prio+0x46>
    37bc:	4a5f      	ldr	r2, [pc, #380]	; (393c <bt_recv_prio+0x1b4>)
    37be:	4b60      	ldr	r3, [pc, #384]	; (3940 <bt_recv_prio+0x1b8>)
    37c0:	9201      	str	r2, [sp, #4]
    37c2:	9200      	str	r2, [sp, #0]
    37c4:	681c      	ldr	r4, [r3, #0]
    37c6:	495f      	ldr	r1, [pc, #380]	; (3944 <bt_recv_prio+0x1bc>)
    37c8:	4b5f      	ldr	r3, [pc, #380]	; (3948 <bt_recv_prio+0x1c0>)
    37ca:	4861      	ldr	r0, [pc, #388]	; (3950 <bt_recv_prio+0x1c8>)
    37cc:	e7ec      	b.n	37a8 <bt_recv_prio+0x20>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    37ce:	7832      	ldrb	r2, [r6, #0]
    37d0:	2a13      	cmp	r2, #19
    37d2:	f200 80aa 	bhi.w	392a <bt_recv_prio+0x1a2>
    37d6:	4093      	lsls	r3, r2
    37d8:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    37dc:	f000 80a5 	beq.w	392a <bt_recv_prio+0x1a2>
	net_buf_pull(buf, sizeof(*hdr));
    37e0:	f100 0508 	add.w	r5, r0, #8
    37e4:	2102      	movs	r1, #2
    37e6:	4628      	mov	r0, r5
    37e8:	f010 fa79 	bl	13cde <net_buf_simple_pull>
	switch (hdr->evt) {
    37ec:	7833      	ldrb	r3, [r6, #0]
    37ee:	2b0f      	cmp	r3, #15
    37f0:	d01d      	beq.n	382e <bt_recv_prio+0xa6>
    37f2:	2b13      	cmp	r3, #19
    37f4:	d02b      	beq.n	384e <bt_recv_prio+0xc6>
    37f6:	2b0e      	cmp	r3, #14
    37f8:	f040 808b 	bne.w	3912 <bt_recv_prio+0x18a>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    37fc:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    37fe:	2103      	movs	r1, #3
    3800:	4628      	mov	r0, r5
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3802:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    3806:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    3808:	f010 fa69 	bl	13cde <net_buf_simple_pull>
	status = buf->data[0];
    380c:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    380e:	4622      	mov	r2, r4
    3810:	7819      	ldrb	r1, [r3, #0]
    3812:	4638      	mov	r0, r7
    3814:	f7fe fbfe 	bl	2014 <hci_cmd_done>
	if (ncmd) {
    3818:	b116      	cbz	r6, 3820 <bt_recv_prio+0x98>
    381a:	484e      	ldr	r0, [pc, #312]	; (3954 <bt_recv_prio+0x1cc>)
    381c:	f011 fb06 	bl	14e2c <_impl_k_sem_give>
	net_buf_unref(buf);
    3820:	4620      	mov	r0, r4
    3822:	f010 fa05 	bl	13c30 <net_buf_unref>
}
    3826:	2000      	movs	r0, #0
    3828:	b007      	add	sp, #28
    382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    382e:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3830:	f8b6 8002 	ldrh.w	r8, [r6, #2]
	u8_t ncmd = evt->ncmd;
    3834:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    3836:	2104      	movs	r1, #4
    3838:	4628      	mov	r0, r5
    383a:	f010 fa50 	bl	13cde <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    383e:	4622      	mov	r2, r4
    3840:	7831      	ldrb	r1, [r6, #0]
    3842:	4640      	mov	r0, r8
    3844:	f7fe fbe6 	bl	2014 <hci_cmd_done>
	if (ncmd) {
    3848:	2f00      	cmp	r7, #0
    384a:	d0e9      	beq.n	3820 <bt_recv_prio+0x98>
    384c:	e7e5      	b.n	381a <bt_recv_prio+0x92>
    384e:	f8d4 b008 	ldr.w	fp, [r4, #8]
				BT_ERR("packets count mismatch");
    3852:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 393c <bt_recv_prio+0x1b4>
    3856:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 3940 <bt_recv_prio+0x1b8>
	for (i = 0; i < evt->num_handles; i++) {
    385a:	2600      	movs	r6, #0
    385c:	f89b 3000 	ldrb.w	r3, [fp]
    3860:	429e      	cmp	r6, r3
    3862:	dadd      	bge.n	3820 <bt_recv_prio+0x98>
    3864:	eb0b 0386 	add.w	r3, fp, r6, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    3868:	f8b3 2001 	ldrh.w	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    386c:	f8b3 a003 	ldrh.w	sl, [r3, #3]
	__asm__ volatile(
    3870:	f04f 0120 	mov.w	r1, #32
    3874:	f3ef 8711 	mrs	r7, BASEPRI
    3878:	f381 8811 	msr	BASEPRI, r1
		conn = bt_conn_lookup_handle(handle);
    387c:	4610      	mov	r0, r2
    387e:	9205      	str	r2, [sp, #20]
    3880:	f000 fcbe 	bl	4200 <bt_conn_lookup_handle>
		if (!conn) {
    3884:	9a05      	ldr	r2, [sp, #20]
    3886:	4605      	mov	r5, r0
    3888:	b978      	cbnz	r0, 38aa <bt_recv_prio+0x122>
			BT_ERR("No connection for handle %u", handle);
    388a:	9201      	str	r2, [sp, #4]
    388c:	f8cd 8008 	str.w	r8, [sp, #8]
    3890:	f8cd 8000 	str.w	r8, [sp]
    3894:	f8d9 5000 	ldr.w	r5, [r9]
    3898:	4b2f      	ldr	r3, [pc, #188]	; (3958 <bt_recv_prio+0x1d0>)
    389a:	4a28      	ldr	r2, [pc, #160]	; (393c <bt_recv_prio+0x1b4>)
    389c:	4929      	ldr	r1, [pc, #164]	; (3944 <bt_recv_prio+0x1bc>)
    389e:	482f      	ldr	r0, [pc, #188]	; (395c <bt_recv_prio+0x1d4>)
    38a0:	47a8      	blx	r5
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    38a2:	f387 8811 	msr	BASEPRI, r7
	for (i = 0; i < evt->num_handles; i++) {
    38a6:	3601      	adds	r6, #1
    38a8:	e7d8      	b.n	385c <bt_recv_prio+0xd4>
    38aa:	f387 8811 	msr	BASEPRI, r7
			k_fifo_put(&conn->tx_notify, node);
    38ae:	f100 0718 	add.w	r7, r0, #24
		while (count--) {
    38b2:	f1ba 0f00 	cmp.w	sl, #0
    38b6:	d01f      	beq.n	38f8 <bt_recv_prio+0x170>
	__asm__ volatile(
    38b8:	f04f 0220 	mov.w	r2, #32
    38bc:	f3ef 8e11 	mrs	lr, BASEPRI
    38c0:	f382 8811 	msr	BASEPRI, r2
    38c4:	6929      	ldr	r1, [r5, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    38c6:	b129      	cbz	r1, 38d4 <bt_recv_prio+0x14c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    38c8:	696a      	ldr	r2, [r5, #20]
	return node->next;
    38ca:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    38cc:	6128      	str	r0, [r5, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    38ce:	4291      	cmp	r1, r2
	list->tail = node;
    38d0:	bf08      	it	eq
    38d2:	6168      	streq	r0, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    38d4:	f38e 8811 	msr	BASEPRI, lr
    38d8:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    38dc:	fa1f fa83 	uxth.w	sl, r3
			if (!node) {
    38e0:	b971      	cbnz	r1, 3900 <bt_recv_prio+0x178>
				BT_ERR("packets count mismatch");
    38e2:	f8cd 8004 	str.w	r8, [sp, #4]
    38e6:	f8cd 8000 	str.w	r8, [sp]
    38ea:	f8d9 7000 	ldr.w	r7, [r9]
    38ee:	4b1a      	ldr	r3, [pc, #104]	; (3958 <bt_recv_prio+0x1d0>)
    38f0:	4a12      	ldr	r2, [pc, #72]	; (393c <bt_recv_prio+0x1b4>)
    38f2:	4914      	ldr	r1, [pc, #80]	; (3944 <bt_recv_prio+0x1bc>)
    38f4:	481a      	ldr	r0, [pc, #104]	; (3960 <bt_recv_prio+0x1d8>)
    38f6:	47b8      	blx	r7
		bt_conn_unref(conn);
    38f8:	4628      	mov	r0, r5
    38fa:	f000 fccf 	bl	429c <bt_conn_unref>
    38fe:	e7d2      	b.n	38a6 <bt_recv_prio+0x11e>
			k_fifo_put(&conn->tx_notify, node);
    3900:	4638      	mov	r0, r7
    3902:	f010 ffa5 	bl	14850 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    3906:	4628      	mov	r0, r5
    3908:	f000 f970 	bl	3bec <bt_conn_get_pkts>
    390c:	f011 fa8e 	bl	14e2c <_impl_k_sem_give>
    3910:	e7cf      	b.n	38b2 <bt_recv_prio+0x12a>
		net_buf_unref(buf);
    3912:	4620      	mov	r0, r4
    3914:	f010 f98c 	bl	13c30 <net_buf_unref>
		BT_ASSERT(0);
    3918:	4a08      	ldr	r2, [pc, #32]	; (393c <bt_recv_prio+0x1b4>)
    391a:	4b09      	ldr	r3, [pc, #36]	; (3940 <bt_recv_prio+0x1b8>)
    391c:	9201      	str	r2, [sp, #4]
    391e:	9200      	str	r2, [sp, #0]
    3920:	681c      	ldr	r4, [r3, #0]
    3922:	4908      	ldr	r1, [pc, #32]	; (3944 <bt_recv_prio+0x1bc>)
    3924:	4b08      	ldr	r3, [pc, #32]	; (3948 <bt_recv_prio+0x1c0>)
    3926:	480f      	ldr	r0, [pc, #60]	; (3964 <bt_recv_prio+0x1dc>)
    3928:	e73e      	b.n	37a8 <bt_recv_prio+0x20>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    392a:	4a04      	ldr	r2, [pc, #16]	; (393c <bt_recv_prio+0x1b4>)
    392c:	4b04      	ldr	r3, [pc, #16]	; (3940 <bt_recv_prio+0x1b8>)
    392e:	9201      	str	r2, [sp, #4]
    3930:	9200      	str	r2, [sp, #0]
    3932:	681c      	ldr	r4, [r3, #0]
    3934:	4903      	ldr	r1, [pc, #12]	; (3944 <bt_recv_prio+0x1bc>)
    3936:	4b04      	ldr	r3, [pc, #16]	; (3948 <bt_recv_prio+0x1c0>)
    3938:	480b      	ldr	r0, [pc, #44]	; (3968 <bt_recv_prio+0x1e0>)
    393a:	e735      	b.n	37a8 <bt_recv_prio+0x20>
    393c:	000159e9 	.word	0x000159e9
    3940:	20003ad4 	.word	0x20003ad4
    3944:	00016791 	.word	0x00016791
    3948:	000160cb 	.word	0x000160cb
    394c:	0001661e 	.word	0x0001661e
    3950:	00016662 	.word	0x00016662
    3954:	20003b80 	.word	0x20003b80
    3958:	00015f75 	.word	0x00015f75
    395c:	0001669c 	.word	0x0001669c
    3960:	000166c8 	.word	0x000166c8
    3964:	000166ef 	.word	0x000166ef
    3968:	00016712 	.word	0x00016712

0000396c <bt_hci_driver_register>:
	if (bt_dev.drv) {
    396c:	4a08      	ldr	r2, [pc, #32]	; (3990 <bt_hci_driver_register+0x24>)
    396e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
    3972:	b93b      	cbnz	r3, 3984 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    3974:	68c1      	ldr	r1, [r0, #12]
    3976:	b141      	cbz	r1, 398a <bt_hci_driver_register+0x1e>
    3978:	6901      	ldr	r1, [r0, #16]
    397a:	b131      	cbz	r1, 398a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    397c:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
	return 0;
    3980:	4618      	mov	r0, r3
    3982:	4770      	bx	lr
		return -EALREADY;
    3984:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3988:	4770      	bx	lr
		return -EINVAL;
    398a:	f06f 0015 	mvn.w	r0, #21
}
    398e:	4770      	bx	lr
    3990:	20003ad8 	.word	0x20003ad8

00003994 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3994:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    3996:	4d2a      	ldr	r5, [pc, #168]	; (3a40 <bt_enable+0xac>)
    3998:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
{
    399c:	b086      	sub	sp, #24
    399e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    39a0:	b96b      	cbnz	r3, 39be <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    39a2:	4a28      	ldr	r2, [pc, #160]	; (3a44 <bt_enable+0xb0>)
    39a4:	4b28      	ldr	r3, [pc, #160]	; (3a48 <bt_enable+0xb4>)
    39a6:	9201      	str	r2, [sp, #4]
    39a8:	9200      	str	r2, [sp, #0]
    39aa:	681c      	ldr	r4, [r3, #0]
    39ac:	4927      	ldr	r1, [pc, #156]	; (3a4c <bt_enable+0xb8>)
    39ae:	4b28      	ldr	r3, [pc, #160]	; (3a50 <bt_enable+0xbc>)
    39b0:	4828      	ldr	r0, [pc, #160]	; (3a54 <bt_enable+0xc0>)
    39b2:	47a0      	blx	r4
		return -ENODEV;
    39b4:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    39b8:	4620      	mov	r0, r4
    39ba:	b006      	add	sp, #24
    39bc:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    39be:	2101      	movs	r1, #1
    39c0:	f105 0070 	add.w	r0, r5, #112	; 0x70
    39c4:	f7fe faf5 	bl	1fb2 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    39c8:	f010 0001 	ands.w	r0, r0, #1
    39cc:	d134      	bne.n	3a38 <bt_enable+0xa4>
	ready_cb = cb;
    39ce:	4b22      	ldr	r3, [pc, #136]	; (3a58 <bt_enable+0xc4>)

    39d0:	4922      	ldr	r1, [pc, #136]	; (3a5c <bt_enable+0xc8>)
    39d2:	601e      	str	r6, [r3, #0]
    39d4:	f06f 0308 	mvn.w	r3, #8
    39d8:	9005      	str	r0, [sp, #20]
    39da:	9004      	str	r0, [sp, #16]
    39dc:	9303      	str	r3, [sp, #12]
    39de:	9002      	str	r0, [sp, #8]
    39e0:	9001      	str	r0, [sp, #4]
    39e2:	9000      	str	r0, [sp, #0]
    39e4:	4b1e      	ldr	r3, [pc, #120]	; (3a60 <bt_enable+0xcc>)
    39e6:	481f      	ldr	r0, [pc, #124]	; (3a64 <bt_enable+0xd0>)
    39e8:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    39ec:	f011 fc30 	bl	15250 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    39f0:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    39f4:	68db      	ldr	r3, [r3, #12]
    39f6:	4798      	blx	r3
	if (err) {
    39f8:	4604      	mov	r4, r0
    39fa:	b150      	cbz	r0, 3a12 <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    39fc:	4a11      	ldr	r2, [pc, #68]	; (3a44 <bt_enable+0xb0>)
    39fe:	4b12      	ldr	r3, [pc, #72]	; (3a48 <bt_enable+0xb4>)
    3a00:	9202      	str	r2, [sp, #8]
    3a02:	e88d 0014 	stmia.w	sp, {r2, r4}
    3a06:	4911      	ldr	r1, [pc, #68]	; (3a4c <bt_enable+0xb8>)
    3a08:	681d      	ldr	r5, [r3, #0]
    3a0a:	4817      	ldr	r0, [pc, #92]	; (3a68 <bt_enable+0xd4>)
    3a0c:	4b10      	ldr	r3, [pc, #64]	; (3a50 <bt_enable+0xbc>)
    3a0e:	47a8      	blx	r5
		return err;
    3a10:	e7d2      	b.n	39b8 <bt_enable+0x24>
	if (!cb) {
    3a12:	b926      	cbnz	r6, 3a1e <bt_enable+0x8a>
}
    3a14:	b006      	add	sp, #24
    3a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    3a1a:	f7fe bdeb 	b.w	25f4 <bt_init>
    3a1e:	2101      	movs	r1, #1
    3a20:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    3a24:	f7fe fac5 	bl	1fb2 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3a28:	07c3      	lsls	r3, r0, #31
    3a2a:	d4c5      	bmi.n	39b8 <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    3a2c:	f105 0164 	add.w	r1, r5, #100	; 0x64
    3a30:	480e      	ldr	r0, [pc, #56]	; (3a6c <bt_enable+0xd8>)
    3a32:	f010 ff0d 	bl	14850 <k_queue_append>
    3a36:	e7bf      	b.n	39b8 <bt_enable+0x24>
		return -EALREADY;
    3a38:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3a3c:	e7bc      	b.n	39b8 <bt_enable+0x24>
    3a3e:	bf00      	nop
    3a40:	20003ad8 	.word	0x20003ad8
    3a44:	000159e9 	.word	0x000159e9
    3a48:	20003ad4 	.word	0x20003ad4
    3a4c:	00016791 	.word	0x00016791
    3a50:	000160d8 	.word	0x000160d8
    3a54:	00016184 	.word	0x00016184
    3a58:	200002d4 	.word	0x200002d4
    3a5c:	20001a80 	.word	0x20001a80
    3a60:	00002ed9 	.word	0x00002ed9
    3a64:	200002dc 	.word	0x200002dc
    3a68:	000161ad 	.word	0x000161ad
    3a6c:	200019f8 	.word	0x200019f8

00003a70 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    3a70:	2000      	movs	r0, #0
    3a72:	4770      	bx	lr

00003a74 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    3a74:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    3a76:	7803      	ldrb	r3, [r0, #0]
    3a78:	2b01      	cmp	r3, #1
{
    3a7a:	4605      	mov	r5, r0
    3a7c:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    3a7e:	d810      	bhi.n	3aa2 <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    3a80:	7843      	ldrb	r3, [r0, #1]
    3a82:	2b01      	cmp	r3, #1
    3a84:	d80d      	bhi.n	3aa2 <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    3a86:	8841      	ldrh	r1, [r0, #2]
    3a88:	1f0b      	subs	r3, r1, #4
    3a8a:	b29b      	uxth	r3, r3
    3a8c:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    3a90:	4283      	cmp	r3, r0
    3a92:	d806      	bhi.n	3aa2 <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    3a94:	88aa      	ldrh	r2, [r5, #4]
    3a96:	1f13      	subs	r3, r2, #4
    3a98:	b29b      	uxth	r3, r3
    3a9a:	4283      	cmp	r3, r0
    3a9c:	d801      	bhi.n	3aa2 <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    3a9e:	4291      	cmp	r1, r2
    3aa0:	d22b      	bcs.n	3afa <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    3aa2:	f06f 0415 	mvn.w	r4, #21
    3aa6:	e00e      	b.n	3ac6 <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    3aa8:	2108      	movs	r1, #8
    3aaa:	4819      	ldr	r0, [pc, #100]	; (3b10 <bt_le_scan_start+0x9c>)
    3aac:	f7fe fb16 	bl	20dc <atomic_test_bit>
    3ab0:	b158      	cbz	r0, 3aca <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3ab2:	4610      	mov	r0, r2
    3ab4:	f7fe fb8e 	bl	21d4 <set_le_scan_enable>
		if (err) {
    3ab8:	4604      	mov	r4, r0
    3aba:	b130      	cbz	r0, 3aca <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3abc:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3ac0:	4813      	ldr	r0, [pc, #76]	; (3b10 <bt_le_scan_start+0x9c>)
    3ac2:	f7fe fa87 	bl	1fd4 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    3ac6:	4620      	mov	r0, r4
    3ac8:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    3aca:	786b      	ldrb	r3, [r5, #1]
    3acc:	b17b      	cbz	r3, 3aee <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3ad2:	480f      	ldr	r0, [pc, #60]	; (3b10 <bt_le_scan_start+0x9c>)
    3ad4:	f7fe fa6d 	bl	1fb2 <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    3ad8:	88aa      	ldrh	r2, [r5, #4]
    3ada:	8869      	ldrh	r1, [r5, #2]
    3adc:	7828      	ldrb	r0, [r5, #0]
    3ade:	f7fe fd07 	bl	24f0 <start_le_scan>
	if (err) {
    3ae2:	4604      	mov	r4, r0
    3ae4:	2800      	cmp	r0, #0
    3ae6:	d1e9      	bne.n	3abc <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    3ae8:	4b0a      	ldr	r3, [pc, #40]	; (3b14 <bt_le_scan_start+0xa0>)
    3aea:	601e      	str	r6, [r3, #0]
	return 0;
    3aec:	e7eb      	b.n	3ac6 <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3aee:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    3af2:	4807      	ldr	r0, [pc, #28]	; (3b10 <bt_le_scan_start+0x9c>)
    3af4:	f7fe fa6e 	bl	1fd4 <atomic_and>
    3af8:	e7ee      	b.n	3ad8 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3afa:	f44f 7100 	mov.w	r1, #512	; 0x200
    3afe:	4804      	ldr	r0, [pc, #16]	; (3b10 <bt_le_scan_start+0x9c>)
    3b00:	f7fe fa57 	bl	1fb2 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3b04:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    3b08:	d0ce      	beq.n	3aa8 <bt_le_scan_start+0x34>
		return -EALREADY;
    3b0a:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3b0e:	e7da      	b.n	3ac6 <bt_le_scan_start+0x52>
    3b10:	20003b48 	.word	0x20003b48
    3b14:	200002d8 	.word	0x200002d8

00003b18 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    3b18:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3b1a:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3b1e:	4807      	ldr	r0, [pc, #28]	; (3b3c <bt_le_scan_stop+0x24>)
    3b20:	f7fe fa58 	bl	1fd4 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3b24:	0583      	lsls	r3, r0, #22
    3b26:	d506      	bpl.n	3b36 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    3b28:	4b05      	ldr	r3, [pc, #20]	; (3b40 <bt_le_scan_stop+0x28>)
    3b2a:	2000      	movs	r0, #0
    3b2c:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    3b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    3b32:	f7fe bd2d 	b.w	2590 <bt_le_scan_update>
}
    3b36:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3b3a:	bd08      	pop	{r3, pc}
    3b3c:	20003b48 	.word	0x20003b48
    3b40:	200002d8 	.word	0x200002d8

00003b44 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3b44:	b538      	push	{r3, r4, r5, lr}
    3b46:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3b48:	4805      	ldr	r0, [pc, #20]	; (3b60 <bt_buf_get_rx+0x1c>)
    3b4a:	f010 f841 	bl	13bd0 <net_buf_alloc_fixed>
#endif

	if (buf) {
    3b4e:	4604      	mov	r4, r0
    3b50:	b120      	cbz	r0, 3b5c <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3b52:	2100      	movs	r1, #0
    3b54:	3008      	adds	r0, #8
    3b56:	f010 f85a 	bl	13c0e <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    3b5a:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3b5c:	4620      	mov	r0, r4
    3b5e:	bd38      	pop	{r3, r4, r5, pc}
    3b60:	20004084 	.word	0x20004084

00003b64 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3b64:	b510      	push	{r4, lr}
    3b66:	4601      	mov	r1, r0
	__asm__ volatile(
    3b68:	f04f 0320 	mov.w	r3, #32
    3b6c:	f3ef 8011 	mrs	r0, BASEPRI
    3b70:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3b74:	4a0b      	ldr	r2, [pc, #44]	; (3ba4 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    3b76:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    3b78:	f8d2 40c4 	ldr.w	r4, [r2, #196]	; 0xc4
	bt_dev.sent_cmd = NULL;
    3b7c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3b80:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    3b84:	b924      	cbnz	r4, 3b90 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3b86:	2001      	movs	r0, #1
}
    3b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3b8c:	f7ff bfda 	b.w	3b44 <bt_buf_get_rx>
    3b90:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3b92:	f104 0008 	add.w	r0, r4, #8
    3b96:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    3b98:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3b9a:	4619      	mov	r1, r3
    3b9c:	f010 f837 	bl	13c0e <net_buf_simple_reserve>
}
    3ba0:	4620      	mov	r0, r4
    3ba2:	bd10      	pop	{r4, pc}
    3ba4:	20003ad8 	.word	0x20003ad8

00003ba8 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    3ba8:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3baa:	4b06      	ldr	r3, [pc, #24]	; (3bc4 <notify_connected+0x1c>)
    3bac:	681c      	ldr	r4, [r3, #0]
{
    3bae:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3bb0:	b904      	cbnz	r4, 3bb4 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    3bb2:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    3bb4:	6823      	ldr	r3, [r4, #0]
    3bb6:	b113      	cbz	r3, 3bbe <notify_connected+0x16>
			cb->connected(conn, conn->err);
    3bb8:	7a29      	ldrb	r1, [r5, #8]
    3bba:	4628      	mov	r0, r5
    3bbc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    3bbe:	6924      	ldr	r4, [r4, #16]
    3bc0:	e7f6      	b.n	3bb0 <notify_connected+0x8>
    3bc2:	bf00      	nop
    3bc4:	2000034c 	.word	0x2000034c

00003bc8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3bc8:	f3bf 8f5b 	dmb	ish
    3bcc:	6800      	ldr	r0, [r0, #0]
    3bce:	f3bf 8f5b 	dmb	ish
}
    3bd2:	4770      	bx	lr

00003bd4 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    3bd4:	8943      	ldrh	r3, [r0, #10]
{
    3bd6:	b510      	push	{r4, lr}
    3bd8:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    3bda:	b12b      	cbz	r3, 3be8 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    3bdc:	68c0      	ldr	r0, [r0, #12]
    3bde:	f010 f827 	bl	13c30 <net_buf_unref>
	conn->rx = NULL;
    3be2:	2300      	movs	r3, #0
    3be4:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    3be6:	8163      	strh	r3, [r4, #10]
    3be8:	bd10      	pop	{r4, pc}
	...

00003bec <bt_conn_get_pkts>:
}
    3bec:	4800      	ldr	r0, [pc, #0]	; (3bf0 <bt_conn_get_pkts+0x4>)
    3bee:	4770      	bx	lr
    3bf0:	20003b64 	.word	0x20003b64

00003bf4 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    3bf4:	4b08      	ldr	r3, [pc, #32]	; (3c18 <notify_le_param_updated+0x24>)
{
    3bf6:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    3bf8:	681c      	ldr	r4, [r3, #0]
{
    3bfa:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3bfc:	b904      	cbnz	r4, 3c00 <notify_le_param_updated+0xc>
}
    3bfe:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    3c00:	68e6      	ldr	r6, [r4, #12]
    3c02:	b13e      	cbz	r6, 3c14 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    3c04:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
    3c08:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
    3c0c:	f8b5 1062 	ldrh.w	r1, [r5, #98]	; 0x62
    3c10:	4628      	mov	r0, r5
    3c12:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    3c14:	6924      	ldr	r4, [r4, #16]
    3c16:	e7f1      	b.n	3bfc <notify_le_param_updated+0x8>
    3c18:	2000034c 	.word	0x2000034c

00003c1c <le_param_req>:
{
    3c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c1e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    3c20:	4608      	mov	r0, r1
{
    3c22:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    3c24:	f7fe fb76 	bl	2314 <bt_le_conn_params_valid>
    3c28:	4605      	mov	r5, r0
    3c2a:	b910      	cbnz	r0, 3c32 <le_param_req+0x16>
		return false;
    3c2c:	2500      	movs	r5, #0
}
    3c2e:	4628      	mov	r0, r5
    3c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    3c32:	4b09      	ldr	r3, [pc, #36]	; (3c58 <le_param_req+0x3c>)
    3c34:	681c      	ldr	r4, [r3, #0]
    3c36:	2c00      	cmp	r4, #0
    3c38:	d0f9      	beq.n	3c2e <le_param_req+0x12>
		if (!cb->le_param_req) {
    3c3a:	68a3      	ldr	r3, [r4, #8]
    3c3c:	b90b      	cbnz	r3, 3c42 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    3c3e:	6924      	ldr	r4, [r4, #16]
    3c40:	e7f9      	b.n	3c36 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    3c42:	4631      	mov	r1, r6
    3c44:	4638      	mov	r0, r7
    3c46:	4798      	blx	r3
    3c48:	2800      	cmp	r0, #0
    3c4a:	d0ef      	beq.n	3c2c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    3c4c:	4630      	mov	r0, r6
    3c4e:	f7fe fb61 	bl	2314 <bt_le_conn_params_valid>
    3c52:	2800      	cmp	r0, #0
    3c54:	d1f3      	bne.n	3c3e <le_param_req+0x22>
    3c56:	e7e9      	b.n	3c2c <le_param_req+0x10>
    3c58:	2000034c 	.word	0x2000034c

00003c5c <bt_conn_cb_register>:
	cb->_next = callback_list;
    3c5c:	4b02      	ldr	r3, [pc, #8]	; (3c68 <bt_conn_cb_register+0xc>)
    3c5e:	681a      	ldr	r2, [r3, #0]
    3c60:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    3c62:	6018      	str	r0, [r3, #0]
    3c64:	4770      	bx	lr
    3c66:	bf00      	nop
    3c68:	2000034c 	.word	0x2000034c

00003c6c <bt_conn_recv>:
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    3c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_l2cap_hdr *hdr;
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    3c70:	f8df 8200 	ldr.w	r8, [pc, #512]	; 3e74 <bt_conn_recv+0x208>
    3c74:	4e71      	ldr	r6, [pc, #452]	; (3e3c <bt_conn_recv+0x1d0>)
    3c76:	f8d8 7000 	ldr.w	r7, [r8]
{
    3c7a:	b086      	sub	sp, #24
    3c7c:	4692      	mov	sl, r2
    3c7e:	460d      	mov	r5, r1
    3c80:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3c82:	f011 f899 	bl	14db8 <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    3c86:	9605      	str	r6, [sp, #20]
    3c88:	f8cd a010 	str.w	sl, [sp, #16]
    3c8c:	89ab      	ldrh	r3, [r5, #12]
    3c8e:	9303      	str	r3, [sp, #12]
    3c90:	8823      	ldrh	r3, [r4, #0]
    3c92:	9302      	str	r3, [sp, #8]
    3c94:	9001      	str	r0, [sp, #4]
    3c96:	9600      	str	r6, [sp, #0]
    3c98:	4b69      	ldr	r3, [pc, #420]	; (3e40 <bt_conn_recv+0x1d4>)
    3c9a:	496a      	ldr	r1, [pc, #424]	; (3e44 <bt_conn_recv+0x1d8>)
    3c9c:	486a      	ldr	r0, [pc, #424]	; (3e48 <bt_conn_recv+0x1dc>)
    3c9e:	4632      	mov	r2, r6
    3ca0:	47b8      	blx	r7

	/* Check packet boundary flags */
	switch (flags) {
    3ca2:	f1ba 0f01 	cmp.w	sl, #1
    3ca6:	46c1      	mov	r9, r8
    3ca8:	4637      	mov	r7, r6
    3caa:	d040      	beq.n	3d2e <bt_conn_recv+0xc2>
    3cac:	f1ba 0f02 	cmp.w	sl, #2
    3cb0:	f040 80a3 	bne.w	3dfa <bt_conn_recv+0x18e>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    3cb4:	68ab      	ldr	r3, [r5, #8]

		BT_DBG("First, len %u final %u", buf->len, len);
    3cb6:	f8d9 6000 	ldr.w	r6, [r9]
		len = sys_le16_to_cpu(hdr->len);
    3cba:	f8b3 8000 	ldrh.w	r8, [r3]
    3cbe:	f011 f87b 	bl	14db8 <_impl_k_current_get>
		BT_DBG("First, len %u final %u", buf->len, len);
    3cc2:	9704      	str	r7, [sp, #16]
    3cc4:	f8cd 800c 	str.w	r8, [sp, #12]
    3cc8:	89ab      	ldrh	r3, [r5, #12]
    3cca:	9302      	str	r3, [sp, #8]
    3ccc:	9001      	str	r0, [sp, #4]
    3cce:	4b5c      	ldr	r3, [pc, #368]	; (3e40 <bt_conn_recv+0x1d4>)
    3cd0:	9700      	str	r7, [sp, #0]
    3cd2:	463a      	mov	r2, r7
    3cd4:	495b      	ldr	r1, [pc, #364]	; (3e44 <bt_conn_recv+0x1d8>)
    3cd6:	485d      	ldr	r0, [pc, #372]	; (3e4c <bt_conn_recv+0x1e0>)
    3cd8:	47b0      	blx	r6

		if (conn->rx_len) {
    3cda:	8963      	ldrh	r3, [r4, #10]
    3cdc:	b15b      	cbz	r3, 3cf6 <bt_conn_recv+0x8a>
			BT_ERR("Unexpected first L2CAP frame");
    3cde:	9701      	str	r7, [sp, #4]
    3ce0:	9700      	str	r7, [sp, #0]
    3ce2:	485b      	ldr	r0, [pc, #364]	; (3e50 <bt_conn_recv+0x1e4>)
    3ce4:	f8d9 6000 	ldr.w	r6, [r9]
    3ce8:	4b55      	ldr	r3, [pc, #340]	; (3e40 <bt_conn_recv+0x1d4>)
    3cea:	4956      	ldr	r1, [pc, #344]	; (3e44 <bt_conn_recv+0x1d8>)
    3cec:	463a      	mov	r2, r7
    3cee:	47b0      	blx	r6
			bt_conn_reset_rx_state(conn);
    3cf0:	4620      	mov	r0, r4
    3cf2:	f7ff ff6f 	bl	3bd4 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    3cf6:	89ab      	ldrh	r3, [r5, #12]
		BT_DBG("rx_len %u", conn->rx_len);
    3cf8:	f8d9 6000 	ldr.w	r6, [r9]
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    3cfc:	eba8 0803 	sub.w	r8, r8, r3
    3d00:	f108 0804 	add.w	r8, r8, #4
    3d04:	f8a4 800a 	strh.w	r8, [r4, #10]
    3d08:	f011 f856 	bl	14db8 <_impl_k_current_get>
		BT_DBG("rx_len %u", conn->rx_len);
    3d0c:	9703      	str	r7, [sp, #12]
    3d0e:	8963      	ldrh	r3, [r4, #10]
    3d10:	9302      	str	r3, [sp, #8]
    3d12:	9001      	str	r0, [sp, #4]
    3d14:	4b4a      	ldr	r3, [pc, #296]	; (3e40 <bt_conn_recv+0x1d4>)
    3d16:	9700      	str	r7, [sp, #0]
    3d18:	4a48      	ldr	r2, [pc, #288]	; (3e3c <bt_conn_recv+0x1d0>)
    3d1a:	494a      	ldr	r1, [pc, #296]	; (3e44 <bt_conn_recv+0x1d8>)
    3d1c:	484d      	ldr	r0, [pc, #308]	; (3e54 <bt_conn_recv+0x1e8>)
    3d1e:	47b0      	blx	r6
		if (conn->rx_len) {
    3d20:	8963      	ldrh	r3, [r4, #10]
    3d22:	2b00      	cmp	r3, #0
    3d24:	d057      	beq.n	3dd6 <bt_conn_recv+0x16a>
			conn->rx = buf;
    3d26:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    3d28:	b006      	add	sp, #24
    3d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->rx_len) {
    3d2e:	8963      	ldrh	r3, [r4, #10]
    3d30:	b98b      	cbnz	r3, 3d56 <bt_conn_recv+0xea>
			BT_ERR("Unexpected L2CAP continuation");
    3d32:	9601      	str	r6, [sp, #4]
    3d34:	9600      	str	r6, [sp, #0]
    3d36:	f8d8 7000 	ldr.w	r7, [r8]
    3d3a:	4b41      	ldr	r3, [pc, #260]	; (3e40 <bt_conn_recv+0x1d4>)
    3d3c:	4941      	ldr	r1, [pc, #260]	; (3e44 <bt_conn_recv+0x1d8>)
    3d3e:	4846      	ldr	r0, [pc, #280]	; (3e58 <bt_conn_recv+0x1ec>)
    3d40:	4632      	mov	r2, r6
			BT_ERR("L2CAP data overflow");
    3d42:	47b8      	blx	r7
			bt_conn_reset_rx_state(conn);
    3d44:	4620      	mov	r0, r4
    3d46:	f7ff ff45 	bl	3bd4 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    3d4a:	4628      	mov	r0, r5
}
    3d4c:	b006      	add	sp, #24
    3d4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			net_buf_unref(buf);
    3d52:	f00f bf6d 	b.w	13c30 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    3d56:	89aa      	ldrh	r2, [r5, #12]
    3d58:	429a      	cmp	r2, r3
    3d5a:	d908      	bls.n	3d6e <bt_conn_recv+0x102>
			BT_ERR("L2CAP data overflow");
    3d5c:	9601      	str	r6, [sp, #4]
    3d5e:	9600      	str	r6, [sp, #0]
    3d60:	f8d8 7000 	ldr.w	r7, [r8]
    3d64:	4b36      	ldr	r3, [pc, #216]	; (3e40 <bt_conn_recv+0x1d4>)
    3d66:	4937      	ldr	r1, [pc, #220]	; (3e44 <bt_conn_recv+0x1d8>)
    3d68:	483c      	ldr	r0, [pc, #240]	; (3e5c <bt_conn_recv+0x1f0>)
    3d6a:	4632      	mov	r2, r6
    3d6c:	e7e9      	b.n	3d42 <bt_conn_recv+0xd6>
		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);
    3d6e:	f8d8 a000 	ldr.w	sl, [r8]
    3d72:	f011 f821 	bl	14db8 <_impl_k_current_get>
    3d76:	9604      	str	r6, [sp, #16]
    3d78:	8963      	ldrh	r3, [r4, #10]
    3d7a:	9303      	str	r3, [sp, #12]
    3d7c:	89ab      	ldrh	r3, [r5, #12]
    3d7e:	9302      	str	r3, [sp, #8]
    3d80:	9001      	str	r0, [sp, #4]
    3d82:	4b2f      	ldr	r3, [pc, #188]	; (3e40 <bt_conn_recv+0x1d4>)
    3d84:	492f      	ldr	r1, [pc, #188]	; (3e44 <bt_conn_recv+0x1d8>)
    3d86:	4836      	ldr	r0, [pc, #216]	; (3e60 <bt_conn_recv+0x1f4>)
    3d88:	9600      	str	r6, [sp, #0]
    3d8a:	4632      	mov	r2, r6
    3d8c:	47d0      	blx	sl
		if (buf->len > net_buf_tailroom(conn->rx)) {
    3d8e:	68e0      	ldr	r0, [r4, #12]
    3d90:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
    3d94:	3008      	adds	r0, #8
    3d96:	f00f ffbe 	bl	13d16 <net_buf_simple_tailroom>
    3d9a:	4582      	cmp	sl, r0
    3d9c:	d908      	bls.n	3db0 <bt_conn_recv+0x144>
			BT_ERR("Not enough buffer space for L2CAP data");
    3d9e:	9601      	str	r6, [sp, #4]
    3da0:	9600      	str	r6, [sp, #0]
    3da2:	f8d8 7000 	ldr.w	r7, [r8]
    3da6:	4b26      	ldr	r3, [pc, #152]	; (3e40 <bt_conn_recv+0x1d4>)
    3da8:	4926      	ldr	r1, [pc, #152]	; (3e44 <bt_conn_recv+0x1d8>)
    3daa:	482e      	ldr	r0, [pc, #184]	; (3e64 <bt_conn_recv+0x1f8>)
    3dac:	4632      	mov	r2, r6
    3dae:	e7c8      	b.n	3d42 <bt_conn_recv+0xd6>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    3db0:	68e0      	ldr	r0, [r4, #12]
    3db2:	89aa      	ldrh	r2, [r5, #12]
    3db4:	68a9      	ldr	r1, [r5, #8]
    3db6:	3008      	adds	r0, #8
    3db8:	f00f ff78 	bl	13cac <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    3dbc:	8963      	ldrh	r3, [r4, #10]
    3dbe:	89aa      	ldrh	r2, [r5, #12]
    3dc0:	1a9b      	subs	r3, r3, r2
    3dc2:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    3dc4:	4628      	mov	r0, r5
    3dc6:	f00f ff33 	bl	13c30 <net_buf_unref>
		if (conn->rx_len) {
    3dca:	8963      	ldrh	r3, [r4, #10]
    3dcc:	2b00      	cmp	r3, #0
    3dce:	d1ab      	bne.n	3d28 <bt_conn_recv+0xbc>
		buf = conn->rx;
    3dd0:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    3dd2:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    3dd4:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    3dd6:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    3dd8:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    3dda:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    3ddc:	1d19      	adds	r1, r3, #4
    3dde:	4291      	cmp	r1, r2
    3de0:	d016      	beq.n	3e10 <bt_conn_recv+0x1a4>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    3de2:	9202      	str	r2, [sp, #8]
    3de4:	9301      	str	r3, [sp, #4]
    3de6:	9703      	str	r7, [sp, #12]
    3de8:	9700      	str	r7, [sp, #0]
    3dea:	f8d9 4000 	ldr.w	r4, [r9]
    3dee:	4b14      	ldr	r3, [pc, #80]	; (3e40 <bt_conn_recv+0x1d4>)
    3df0:	4a12      	ldr	r2, [pc, #72]	; (3e3c <bt_conn_recv+0x1d0>)
    3df2:	4914      	ldr	r1, [pc, #80]	; (3e44 <bt_conn_recv+0x1d8>)
    3df4:	481c      	ldr	r0, [pc, #112]	; (3e68 <bt_conn_recv+0x1fc>)
    3df6:	47a0      	blx	r4
    3df8:	e7a7      	b.n	3d4a <bt_conn_recv+0xde>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    3dfa:	e88d 0440 	stmia.w	sp, {r6, sl}
    3dfe:	9602      	str	r6, [sp, #8]
    3e00:	f8d8 7000 	ldr.w	r7, [r8]
    3e04:	4b0e      	ldr	r3, [pc, #56]	; (3e40 <bt_conn_recv+0x1d4>)
    3e06:	490f      	ldr	r1, [pc, #60]	; (3e44 <bt_conn_recv+0x1d8>)
    3e08:	4818      	ldr	r0, [pc, #96]	; (3e6c <bt_conn_recv+0x200>)
    3e0a:	4632      	mov	r2, r6
    3e0c:	47b8      	blx	r7
    3e0e:	e799      	b.n	3d44 <bt_conn_recv+0xd8>
	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
    3e10:	f8d9 6000 	ldr.w	r6, [r9]
    3e14:	f010 ffd0 	bl	14db8 <_impl_k_current_get>
    3e18:	9703      	str	r7, [sp, #12]
    3e1a:	89ab      	ldrh	r3, [r5, #12]
    3e1c:	9302      	str	r3, [sp, #8]
    3e1e:	9001      	str	r0, [sp, #4]
    3e20:	9700      	str	r7, [sp, #0]
    3e22:	4b07      	ldr	r3, [pc, #28]	; (3e40 <bt_conn_recv+0x1d4>)
    3e24:	4a05      	ldr	r2, [pc, #20]	; (3e3c <bt_conn_recv+0x1d0>)
    3e26:	4907      	ldr	r1, [pc, #28]	; (3e44 <bt_conn_recv+0x1d8>)
    3e28:	4811      	ldr	r0, [pc, #68]	; (3e70 <bt_conn_recv+0x204>)
    3e2a:	47b0      	blx	r6
	bt_l2cap_recv(conn, buf);
    3e2c:	4629      	mov	r1, r5
    3e2e:	4620      	mov	r0, r4
}
    3e30:	b006      	add	sp, #24
    3e32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_l2cap_recv(conn, buf);
    3e36:	f001 b8c5 	b.w	4fc4 <bt_l2cap_recv>
    3e3a:	bf00      	nop
    3e3c:	000159e9 	.word	0x000159e9
    3e40:	00016a34 	.word	0x00016a34
    3e44:	00016791 	.word	0x00016791
    3e48:	00016bfe 	.word	0x00016bfe
    3e4c:	00016c2f 	.word	0x00016c2f
    3e50:	00016c5b 	.word	0x00016c5b
    3e54:	00016c88 	.word	0x00016c88
    3e58:	00016ca7 	.word	0x00016ca7
    3e5c:	00016cd5 	.word	0x00016cd5
    3e60:	00016cf9 	.word	0x00016cf9
    3e64:	00016d25 	.word	0x00016d25
    3e68:	00016d8a 	.word	0x00016d8a
    3e6c:	00016d5c 	.word	0x00016d5c
    3e70:	00016db6 	.word	0x00016db6
    3e74:	20003ad4 	.word	0x20003ad4

00003e78 <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    3e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e7c:	460d      	mov	r5, r1
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    3e7e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 3ef8 <bt_conn_send_cb+0x80>
    3e82:	4c18      	ldr	r4, [pc, #96]	; (3ee4 <bt_conn_send_cb+0x6c>)
    3e84:	f8d8 9000 	ldr.w	r9, [r8]
{
    3e88:	b087      	sub	sp, #28
    3e8a:	4606      	mov	r6, r0
    3e8c:	4617      	mov	r7, r2
    3e8e:	f010 ff93 	bl	14db8 <_impl_k_current_get>
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    3e92:	89ab      	ldrh	r3, [r5, #12]
    3e94:	9405      	str	r4, [sp, #20]
    3e96:	9704      	str	r7, [sp, #16]
    3e98:	9303      	str	r3, [sp, #12]
    3e9a:	8833      	ldrh	r3, [r6, #0]
    3e9c:	9302      	str	r3, [sp, #8]
    3e9e:	9001      	str	r0, [sp, #4]
    3ea0:	4b11      	ldr	r3, [pc, #68]	; (3ee8 <bt_conn_send_cb+0x70>)
    3ea2:	9400      	str	r4, [sp, #0]
    3ea4:	4622      	mov	r2, r4
    3ea6:	4911      	ldr	r1, [pc, #68]	; (3eec <bt_conn_send_cb+0x74>)
    3ea8:	4811      	ldr	r0, [pc, #68]	; (3ef0 <bt_conn_send_cb+0x78>)
    3eaa:	47c8      	blx	r9

	if (conn->state != BT_CONN_CONNECTED) {
    3eac:	7a73      	ldrb	r3, [r6, #9]
    3eae:	2b03      	cmp	r3, #3
    3eb0:	d010      	beq.n	3ed4 <bt_conn_send_cb+0x5c>
		BT_ERR("not connected!");
    3eb2:	4b0d      	ldr	r3, [pc, #52]	; (3ee8 <bt_conn_send_cb+0x70>)
    3eb4:	490d      	ldr	r1, [pc, #52]	; (3eec <bt_conn_send_cb+0x74>)
    3eb6:	480f      	ldr	r0, [pc, #60]	; (3ef4 <bt_conn_send_cb+0x7c>)
    3eb8:	9401      	str	r4, [sp, #4]
    3eba:	4622      	mov	r2, r4
    3ebc:	9400      	str	r4, [sp, #0]
    3ebe:	f8d8 6000 	ldr.w	r6, [r8]
    3ec2:	47b0      	blx	r6
		net_buf_unref(buf);
    3ec4:	4628      	mov	r0, r5
    3ec6:	f00f feb3 	bl	13c30 <net_buf_unref>
		return -ENOTCONN;
    3eca:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    3ece:	b007      	add	sp, #28
    3ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_put(&conn->tx_queue, buf);
    3ed4:	f106 002c 	add.w	r0, r6, #44	; 0x2c
	conn_tx(buf)->cb = cb;
    3ed8:	616f      	str	r7, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    3eda:	4629      	mov	r1, r5
    3edc:	f00f fe9b 	bl	13c16 <net_buf_put>
	return 0;
    3ee0:	2000      	movs	r0, #0
    3ee2:	e7f4      	b.n	3ece <bt_conn_send_cb+0x56>
    3ee4:	000159e9 	.word	0x000159e9
    3ee8:	00016a41 	.word	0x00016a41
    3eec:	00016791 	.word	0x00016791
    3ef0:	00016e1a 	.word	0x00016e1a
    3ef4:	00016e4f 	.word	0x00016e4f
    3ef8:	20003ad4 	.word	0x20003ad4

00003efc <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    3efc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);
    3f00:	4b14      	ldr	r3, [pc, #80]	; (3f54 <bt_conn_notify_tx+0x58>)
    3f02:	4d15      	ldr	r5, [pc, #84]	; (3f58 <bt_conn_notify_tx+0x5c>)
    3f04:	681c      	ldr	r4, [r3, #0]
{
    3f06:	4606      	mov	r6, r0
    3f08:	f010 ff56 	bl	14db8 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    3f0c:	4a13      	ldr	r2, [pc, #76]	; (3f5c <bt_conn_notify_tx+0x60>)
    3f0e:	9001      	str	r0, [sp, #4]
    3f10:	9203      	str	r2, [sp, #12]
    3f12:	9602      	str	r6, [sp, #8]
    3f14:	9200      	str	r2, [sp, #0]
    3f16:	4b12      	ldr	r3, [pc, #72]	; (3f60 <bt_conn_notify_tx+0x64>)
    3f18:	4912      	ldr	r1, [pc, #72]	; (3f64 <bt_conn_notify_tx+0x68>)
    3f1a:	4813      	ldr	r0, [pc, #76]	; (3f68 <bt_conn_notify_tx+0x6c>)
    3f1c:	47a0      	blx	r4

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    3f1e:	f106 0718 	add.w	r7, r6, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    3f22:	f04f 0800 	mov.w	r8, #0
    3f26:	2100      	movs	r1, #0
    3f28:	4638      	mov	r0, r7
    3f2a:	f010 fcb5 	bl	14898 <_impl_k_queue_get>
    3f2e:	4604      	mov	r4, r0
    3f30:	b910      	cbnz	r0, 3f38 <bt_conn_notify_tx+0x3c>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    3f32:	b004      	add	sp, #16
    3f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    3f38:	6863      	ldr	r3, [r4, #4]
    3f3a:	b10b      	cbz	r3, 3f40 <bt_conn_notify_tx+0x44>
			tx->cb(conn);
    3f3c:	4630      	mov	r0, r6
    3f3e:	4798      	blx	r3
    3f40:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    3f42:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    3f44:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    3f46:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    3f4a:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    3f4c:	2b00      	cmp	r3, #0
    3f4e:	d1ea      	bne.n	3f26 <bt_conn_notify_tx+0x2a>
	list->tail = node;
    3f50:	606c      	str	r4, [r5, #4]
    3f52:	e7e6      	b.n	3f22 <bt_conn_notify_tx+0x26>
    3f54:	20003ad4 	.word	0x20003ad4
    3f58:	20000400 	.word	0x20000400
    3f5c:	000159e9 	.word	0x000159e9
    3f60:	00016a51 	.word	0x00016a51
    3f64:	00016791 	.word	0x00016791
    3f68:	00016b35 	.word	0x00016b35

00003f6c <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    3f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_acl_hdr *hdr;
	bt_conn_tx_cb_t cb;
	sys_snode_t *node;
	int err;

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    3f70:	4e5a      	ldr	r6, [pc, #360]	; (40dc <send_frag+0x170>)
    3f72:	4f5b      	ldr	r7, [pc, #364]	; (40e0 <send_frag+0x174>)
    3f74:	f8d6 9000 	ldr.w	r9, [r6]
{
    3f78:	b089      	sub	sp, #36	; 0x24
    3f7a:	4688      	mov	r8, r1
    3f7c:	4614      	mov	r4, r2
    3f7e:	4605      	mov	r5, r0
    3f80:	469a      	mov	sl, r3
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3f82:	f010 ff19 	bl	14db8 <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    3f86:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    3f8a:	9304      	str	r3, [sp, #16]
    3f8c:	463a      	mov	r2, r7
    3f8e:	4b55      	ldr	r3, [pc, #340]	; (40e4 <send_frag+0x178>)
    3f90:	9001      	str	r0, [sp, #4]
    3f92:	4955      	ldr	r1, [pc, #340]	; (40e8 <send_frag+0x17c>)
    3f94:	4855      	ldr	r0, [pc, #340]	; (40ec <send_frag+0x180>)
    3f96:	9706      	str	r7, [sp, #24]
    3f98:	9405      	str	r4, [sp, #20]
    3f9a:	f8cd 800c 	str.w	r8, [sp, #12]
    3f9e:	9502      	str	r5, [sp, #8]
    3fa0:	9700      	str	r7, [sp, #0]
    3fa2:	47c8      	blx	r9
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3fa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3fa8:	4851      	ldr	r0, [pc, #324]	; (40f0 <send_frag+0x184>)
    3faa:	f010 ff67 	bl	14e7c <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    3fae:	4b51      	ldr	r3, [pc, #324]	; (40f4 <send_frag+0x188>)
    3fb0:	f103 0048 	add.w	r0, r3, #72	; 0x48
    3fb4:	f7ff fe08 	bl	3bc8 <atomic_get>
    3fb8:	46b1      	mov	r9, r6
    3fba:	b130      	cbz	r0, 3fca <send_frag+0x5e>
		if (conns[i].state == BT_CONN_CONNECTED ||
    3fbc:	7a5a      	ldrb	r2, [r3, #9]
    3fbe:	3a03      	subs	r2, #3
    3fc0:	2a01      	cmp	r2, #1
    3fc2:	d802      	bhi.n	3fca <send_frag+0x5e>
			bt_conn_notify_tx(&conns[i]);
    3fc4:	4618      	mov	r0, r3
    3fc6:	f7ff ff99 	bl	3efc <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    3fca:	7a6b      	ldrb	r3, [r5, #9]
    3fcc:	2b03      	cmp	r3, #3
    3fce:	d166      	bne.n	409e <send_frag+0x132>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    3fd0:	2104      	movs	r1, #4
    3fd2:	f108 0008 	add.w	r0, r8, #8
    3fd6:	f00f fe7a 	bl	13cce <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    3fda:	882a      	ldrh	r2, [r5, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));

	cb = conn_tx(buf)->cb;
    3fdc:	f8d8 b014 	ldr.w	fp, [r8, #20]
    3fe0:	4e45      	ldr	r6, [pc, #276]	; (40f8 <send_frag+0x18c>)
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    3fe2:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    3fe6:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3fe8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
	BT_DBG("conn %p cb %p", conn, cb);
    3fec:	f8d9 4000 	ldr.w	r4, [r9]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3ff0:	3b04      	subs	r3, #4
    3ff2:	8043      	strh	r3, [r0, #2]
    3ff4:	2302      	movs	r3, #2
    3ff6:	f888 3014 	strb.w	r3, [r8, #20]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3ffa:	f010 fedd 	bl	14db8 <_impl_k_current_get>
	BT_DBG("conn %p cb %p", conn, cb);
    3ffe:	9704      	str	r7, [sp, #16]
    4000:	9001      	str	r0, [sp, #4]
    4002:	f8cd b00c 	str.w	fp, [sp, #12]
    4006:	9502      	str	r5, [sp, #8]
    4008:	9700      	str	r7, [sp, #0]
    400a:	4b3c      	ldr	r3, [pc, #240]	; (40fc <send_frag+0x190>)
    400c:	4a34      	ldr	r2, [pc, #208]	; (40e0 <send_frag+0x174>)
    400e:	4936      	ldr	r1, [pc, #216]	; (40e8 <send_frag+0x17c>)
    4010:	483b      	ldr	r0, [pc, #236]	; (4100 <send_frag+0x194>)
    4012:	47a0      	blx	r4
    4014:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4016:	6872      	ldr	r2, [r6, #4]
	return node->next;
    4018:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    401a:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    401c:	4294      	cmp	r4, r2
	list->tail = node;
    401e:	bf08      	it	eq
    4020:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    4022:	f8c4 b004 	str.w	fp, [r4, #4]
	__asm__ volatile(
    4026:	f04f 0320 	mov.w	r3, #32
    402a:	f3ef 8211 	mrs	r2, BASEPRI
    402e:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    4032:	2300      	movs	r3, #0
    4034:	6023      	str	r3, [r4, #0]
    4036:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    4038:	2b00      	cmp	r3, #0
    403a:	d13f      	bne.n	40bc <send_frag+0x150>
	list->tail = node;
    403c:	616c      	str	r4, [r5, #20]
	list->head = node;
    403e:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4040:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    4044:	4640      	mov	r0, r8
    4046:	f7fe fa15 	bl	2474 <bt_send>
	if (err) {
    404a:	2800      	cmp	r0, #0
    404c:	d042      	beq.n	40d4 <send_frag+0x168>
		BT_ERR("Unable to send to driver (err %d)", err);
    404e:	9001      	str	r0, [sp, #4]
    4050:	9702      	str	r7, [sp, #8]
    4052:	9700      	str	r7, [sp, #0]
    4054:	f8d9 7000 	ldr.w	r7, [r9]
    4058:	4b22      	ldr	r3, [pc, #136]	; (40e4 <send_frag+0x178>)
    405a:	4a21      	ldr	r2, [pc, #132]	; (40e0 <send_frag+0x174>)
    405c:	4922      	ldr	r1, [pc, #136]	; (40e8 <send_frag+0x17c>)
    405e:	4829      	ldr	r0, [pc, #164]	; (4104 <send_frag+0x198>)
    4060:	47b8      	blx	r7
	__asm__ volatile(
    4062:	f04f 0320 	mov.w	r3, #32
    4066:	f3ef 8111 	mrs	r1, BASEPRI
    406a:	f383 8811 	msr	BASEPRI, r3
    406e:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4070:	2200      	movs	r2, #0
    4072:	b153      	cbz	r3, 408a <send_frag+0x11e>
    4074:	429c      	cmp	r4, r3
    4076:	d12a      	bne.n	40ce <send_frag+0x162>
    4078:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    407a:	bb12      	cbnz	r2, 40c2 <send_frag+0x156>
    407c:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    407e:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    4080:	4294      	cmp	r4, r2
    4082:	d100      	bne.n	4086 <send_frag+0x11a>
	list->tail = node;
    4084:	616b      	str	r3, [r5, #20]
	parent->next = child;
    4086:	2300      	movs	r3, #0
    4088:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    408a:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    408e:	2300      	movs	r3, #0
    4090:	6063      	str	r3, [r4, #4]
    4092:	6833      	ldr	r3, [r6, #0]
    4094:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    4096:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    4098:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    409a:	b903      	cbnz	r3, 409e <send_frag+0x132>
	list->tail = node;
    409c:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    409e:	4814      	ldr	r0, [pc, #80]	; (40f0 <send_frag+0x184>)
    40a0:	f010 fec4 	bl	14e2c <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    40a4:	f1ba 0f00 	cmp.w	sl, #0
    40a8:	d004      	beq.n	40b4 <send_frag+0x148>
		net_buf_unref(buf);
    40aa:	4640      	mov	r0, r8
    40ac:	f00f fdc0 	bl	13c30 <net_buf_unref>
	}
	return false;
    40b0:	f04f 0a00 	mov.w	sl, #0
}
    40b4:	4650      	mov	r0, sl
    40b6:	b009      	add	sp, #36	; 0x24
    40b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	parent->next = child;
    40bc:	601c      	str	r4, [r3, #0]
	list->tail = node;
    40be:	616c      	str	r4, [r5, #20]
    40c0:	e7be      	b.n	4040 <send_frag+0xd4>
	parent->next = child;
    40c2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    40c4:	696b      	ldr	r3, [r5, #20]
    40c6:	429c      	cmp	r4, r3
	list->tail = node;
    40c8:	bf08      	it	eq
    40ca:	616a      	streq	r2, [r5, #20]
    40cc:	e7db      	b.n	4086 <send_frag+0x11a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    40ce:	461a      	mov	r2, r3
    40d0:	681b      	ldr	r3, [r3, #0]
    40d2:	e7ce      	b.n	4072 <send_frag+0x106>
	return true;
    40d4:	f04f 0a01 	mov.w	sl, #1
    40d8:	e7ec      	b.n	40b4 <send_frag+0x148>
    40da:	bf00      	nop
    40dc:	20003ad4 	.word	0x20003ad4
    40e0:	000159e9 	.word	0x000159e9
    40e4:	00016a72 	.word	0x00016a72
    40e8:	00016791 	.word	0x00016791
    40ec:	00016f00 	.word	0x00016f00
    40f0:	20003b64 	.word	0x20003b64
    40f4:	20000360 	.word	0x20000360
    40f8:	20000400 	.word	0x20000400
    40fc:	00016a63 	.word	0x00016a63
    4100:	00016f38 	.word	0x00016f38
    4104:	000161d9 	.word	0x000161d9

00004108 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    4108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    410a:	4c17      	ldr	r4, [pc, #92]	; (4168 <bt_conn_add_le+0x60>)
    410c:	f104 0648 	add.w	r6, r4, #72	; 0x48
{
    4110:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    4112:	4630      	mov	r0, r6
    4114:	f7ff fd58 	bl	3bc8 <atomic_get>
    4118:	4605      	mov	r5, r0
    411a:	b108      	cbz	r0, 4120 <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    411c:	2000      	movs	r0, #0
    411e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    4120:	4601      	mov	r1, r0
    4122:	22a0      	movs	r2, #160	; 0xa0
    4124:	4620      	mov	r0, r4
    4126:	f7fd fda7 	bl	1c78 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    412a:	f3bf 8f5b 	dmb	ish
    412e:	2301      	movs	r3, #1
    4130:	e856 2f00 	ldrex	r2, [r6]
    4134:	e846 3100 	strex	r1, r3, [r6]
    4138:	2900      	cmp	r1, #0
    413a:	d1f9      	bne.n	4130 <bt_conn_add_le+0x28>
    413c:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    4140:	2207      	movs	r2, #7
    4142:	4639      	mov	r1, r7
    4144:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    4148:	f7fd fd6a 	bl	1c20 <memcpy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    414c:	2318      	movs	r3, #24
    414e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4152:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4154:	f104 0078 	add.w	r0, r4, #120	; 0x78
	conn->type = BT_CONN_TYPE_LE;
    4158:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    415a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    415e:	4903      	ldr	r1, [pc, #12]	; (416c <bt_conn_add_le+0x64>)
    4160:	f011 f960 	bl	15424 <k_delayed_work_init>
			conn = &conns[i];
    4164:	4620      	mov	r0, r4

	return conn;
}
    4166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4168:	20000360 	.word	0x20000360
    416c:	00004911 	.word	0x00004911

00004170 <bt_conn_addr_le_cmp>:

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    4170:	b538      	push	{r3, r4, r5, lr}
    4172:	460d      	mov	r5, r1
    4174:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    4176:	f100 014c 	add.w	r1, r0, #76	; 0x4c
    417a:	2207      	movs	r2, #7
    417c:	4628      	mov	r0, r5
    417e:	f7fd fd3a 	bl	1bf6 <memcmp>
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    4182:	b160      	cbz	r0, 419e <bt_conn_addr_le_cmp+0x2e>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    4184:	78e3      	ldrb	r3, [r4, #3]
    4186:	2207      	movs	r2, #7
    4188:	b933      	cbnz	r3, 4198 <bt_conn_addr_le_cmp+0x28>
    418a:	f104 015a 	add.w	r1, r4, #90	; 0x5a
    418e:	4628      	mov	r0, r5
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}
    4190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4194:	f7fd bd2f 	b.w	1bf6 <memcmp>
    4198:	f104 0153 	add.w	r1, r4, #83	; 0x53
    419c:	e7f7      	b.n	418e <bt_conn_addr_le_cmp+0x1e>
    419e:	bd38      	pop	{r3, r4, r5, pc}

000041a0 <bt_conn_ref>:
		}
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
    41a0:	b570      	push	{r4, r5, r6, lr}
    41a2:	4604      	mov	r4, r0
    41a4:	b086      	sub	sp, #24
	atomic_inc(&conn->ref);
    41a6:	f100 0548 	add.w	r5, r0, #72	; 0x48
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    41aa:	f3bf 8f5b 	dmb	ish
    41ae:	e855 3f00 	ldrex	r3, [r5]
    41b2:	3301      	adds	r3, #1
    41b4:	e845 3200 	strex	r2, r3, [r5]
    41b8:	2a00      	cmp	r2, #0
    41ba:	d1f8      	bne.n	41ae <bt_conn_ref+0xe>
    41bc:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    41c0:	4b0a      	ldr	r3, [pc, #40]	; (41ec <bt_conn_ref+0x4c>)
    41c2:	681e      	ldr	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    41c4:	f010 fdf8 	bl	14db8 <_impl_k_current_get>
    41c8:	4603      	mov	r3, r0
    41ca:	4628      	mov	r0, r5
    41cc:	8821      	ldrh	r1, [r4, #0]
    41ce:	f7ff fcfb 	bl	3bc8 <atomic_get>
    41d2:	4a07      	ldr	r2, [pc, #28]	; (41f0 <bt_conn_ref+0x50>)
    41d4:	9003      	str	r0, [sp, #12]
    41d6:	9102      	str	r1, [sp, #8]
    41d8:	e88d 000c 	stmia.w	sp, {r2, r3}
    41dc:	9204      	str	r2, [sp, #16]
    41de:	4b05      	ldr	r3, [pc, #20]	; (41f4 <bt_conn_ref+0x54>)
    41e0:	4905      	ldr	r1, [pc, #20]	; (41f8 <bt_conn_ref+0x58>)
    41e2:	4806      	ldr	r0, [pc, #24]	; (41fc <bt_conn_ref+0x5c>)
    41e4:	47b0      	blx	r6

	return conn;
}
    41e6:	4620      	mov	r0, r4
    41e8:	b006      	add	sp, #24
    41ea:	bd70      	pop	{r4, r5, r6, pc}
    41ec:	20003ad4 	.word	0x20003ad4
    41f0:	000159e9 	.word	0x000159e9
    41f4:	00016ac1 	.word	0x00016ac1
    41f8:	00016791 	.word	0x00016791
    41fc:	00016df4 	.word	0x00016df4

00004200 <bt_conn_lookup_handle>:
{
    4200:	b508      	push	{r3, lr}
		if (!atomic_get(&conns[i].ref)) {
    4202:	4b0a      	ldr	r3, [pc, #40]	; (422c <bt_conn_lookup_handle+0x2c>)
{
    4204:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    4206:	f103 0048 	add.w	r0, r3, #72	; 0x48
    420a:	f7ff fcdd 	bl	3bc8 <atomic_get>
    420e:	b158      	cbz	r0, 4228 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    4210:	7a5a      	ldrb	r2, [r3, #9]
    4212:	3a03      	subs	r2, #3
    4214:	2a01      	cmp	r2, #1
    4216:	d807      	bhi.n	4228 <bt_conn_lookup_handle+0x28>
		if (conns[i].handle == handle) {
    4218:	881a      	ldrh	r2, [r3, #0]
    421a:	428a      	cmp	r2, r1
    421c:	d104      	bne.n	4228 <bt_conn_lookup_handle+0x28>
			return bt_conn_ref(&conns[i]);
    421e:	4618      	mov	r0, r3
}
    4220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return bt_conn_ref(&conns[i]);
    4224:	f7ff bfbc 	b.w	41a0 <bt_conn_ref>
}
    4228:	2000      	movs	r0, #0
    422a:	bd08      	pop	{r3, pc}
    422c:	20000360 	.word	0x20000360

00004230 <bt_conn_lookup_addr_le>:
{
    4230:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    4232:	4c0a      	ldr	r4, [pc, #40]	; (425c <bt_conn_lookup_addr_le+0x2c>)
{
    4234:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    4236:	f104 0048 	add.w	r0, r4, #72	; 0x48
    423a:	f7ff fcc5 	bl	3bc8 <atomic_get>
    423e:	b150      	cbz	r0, 4256 <bt_conn_lookup_addr_le+0x26>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4240:	78a3      	ldrb	r3, [r4, #2]
    4242:	b943      	cbnz	r3, 4256 <bt_conn_lookup_addr_le+0x26>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    4244:	4620      	mov	r0, r4
    4246:	f7ff ff93 	bl	4170 <bt_conn_addr_le_cmp>
    424a:	b920      	cbnz	r0, 4256 <bt_conn_lookup_addr_le+0x26>
			return bt_conn_ref(&conns[i]);
    424c:	4620      	mov	r0, r4
}
    424e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return bt_conn_ref(&conns[i]);
    4252:	f7ff bfa5 	b.w	41a0 <bt_conn_ref>
}
    4256:	2000      	movs	r0, #0
    4258:	bd10      	pop	{r4, pc}
    425a:	bf00      	nop
    425c:	20000360 	.word	0x20000360

00004260 <bt_conn_lookup_state_le>:
{
    4260:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    4262:	4c0d      	ldr	r4, [pc, #52]	; (4298 <bt_conn_lookup_state_le+0x38>)
{
    4264:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    4266:	f104 0048 	add.w	r0, r4, #72	; 0x48
{
    426a:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    426c:	f7ff fcac 	bl	3bc8 <atomic_get>
    4270:	b180      	cbz	r0, 4294 <bt_conn_lookup_state_le+0x34>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4272:	78a2      	ldrb	r2, [r4, #2]
    4274:	b972      	cbnz	r2, 4294 <bt_conn_lookup_state_le+0x34>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4276:	b93b      	cbnz	r3, 4288 <bt_conn_lookup_state_le+0x28>
		if (conns[i].state == state) {
    4278:	7a63      	ldrb	r3, [r4, #9]
    427a:	42ab      	cmp	r3, r5
    427c:	d10a      	bne.n	4294 <bt_conn_lookup_state_le+0x34>
			return bt_conn_ref(&conns[i]);
    427e:	4806      	ldr	r0, [pc, #24]	; (4298 <bt_conn_lookup_state_le+0x38>)
}
    4280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_conn_ref(&conns[i]);
    4284:	f7ff bf8c 	b.w	41a0 <bt_conn_ref>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4288:	4619      	mov	r1, r3
    428a:	4620      	mov	r0, r4
    428c:	f7ff ff70 	bl	4170 <bt_conn_addr_le_cmp>
    4290:	2800      	cmp	r0, #0
    4292:	d0f1      	beq.n	4278 <bt_conn_lookup_state_le+0x18>
}
    4294:	2000      	movs	r0, #0
    4296:	bd38      	pop	{r3, r4, r5, pc}
    4298:	20000360 	.word	0x20000360

0000429c <bt_conn_unref>:

void bt_conn_unref(struct bt_conn *conn)
{
    429c:	b570      	push	{r4, r5, r6, lr}
    429e:	4605      	mov	r5, r0
    42a0:	b086      	sub	sp, #24
	atomic_dec(&conn->ref);
    42a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    42a6:	f3bf 8f5b 	dmb	ish
    42aa:	e854 3f00 	ldrex	r3, [r4]
    42ae:	3b01      	subs	r3, #1
    42b0:	e844 3200 	strex	r2, r3, [r4]
    42b4:	2a00      	cmp	r2, #0
    42b6:	d1f8      	bne.n	42aa <bt_conn_unref+0xe>
    42b8:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    42bc:	4b0a      	ldr	r3, [pc, #40]	; (42e8 <bt_conn_unref+0x4c>)
    42be:	681e      	ldr	r6, [r3, #0]
    42c0:	f010 fd7a 	bl	14db8 <_impl_k_current_get>
    42c4:	4603      	mov	r3, r0
    42c6:	4620      	mov	r0, r4
    42c8:	8829      	ldrh	r1, [r5, #0]
    42ca:	f7ff fc7d 	bl	3bc8 <atomic_get>
    42ce:	4a07      	ldr	r2, [pc, #28]	; (42ec <bt_conn_unref+0x50>)
    42d0:	9003      	str	r0, [sp, #12]
    42d2:	9102      	str	r1, [sp, #8]
    42d4:	e88d 000c 	stmia.w	sp, {r2, r3}
    42d8:	9204      	str	r2, [sp, #16]
    42da:	4b05      	ldr	r3, [pc, #20]	; (42f0 <bt_conn_unref+0x54>)
    42dc:	4905      	ldr	r1, [pc, #20]	; (42f4 <bt_conn_unref+0x58>)
    42de:	4806      	ldr	r0, [pc, #24]	; (42f8 <bt_conn_unref+0x5c>)
    42e0:	47b0      	blx	r6
}
    42e2:	b006      	add	sp, #24
    42e4:	bd70      	pop	{r4, r5, r6, pc}
    42e6:	bf00      	nop
    42e8:	20003ad4 	.word	0x20003ad4
    42ec:	000159e9 	.word	0x000159e9
    42f0:	00016acd 	.word	0x00016acd
    42f4:	00016791 	.word	0x00016791
    42f8:	00016df4 	.word	0x00016df4

000042fc <conn_cleanup>:
{
    42fc:	b538      	push	{r3, r4, r5, lr}
    42fe:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    4300:	f100 052c 	add.w	r5, r0, #44	; 0x2c
    4304:	2100      	movs	r1, #0
    4306:	4628      	mov	r0, r5
    4308:	f00f fc68 	bl	13bdc <net_buf_get>
    430c:	b950      	cbnz	r0, 4324 <conn_cleanup+0x28>
	bt_conn_notify_tx(conn);
    430e:	4620      	mov	r0, r4
    4310:	f7ff fdf4 	bl	3efc <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    4314:	4620      	mov	r0, r4
    4316:	f7ff fc5d 	bl	3bd4 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    431a:	4620      	mov	r0, r4
}
    431c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    4320:	f7ff bfbc 	b.w	429c <bt_conn_unref>
		net_buf_unref(buf);
    4324:	f00f fc84 	bl	13c30 <net_buf_unref>
    4328:	e7ec      	b.n	4304 <conn_cleanup+0x8>
	...

0000432c <bt_conn_prepare_events>:
{
    432c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	BT_DBG("");
    4330:	4d2e      	ldr	r5, [pc, #184]	; (43ec <bt_conn_prepare_events+0xc0>)
    4332:	4c2f      	ldr	r4, [pc, #188]	; (43f0 <bt_conn_prepare_events+0xc4>)
    4334:	682f      	ldr	r7, [r5, #0]
{
    4336:	4606      	mov	r6, r0
    4338:	f010 fd3e 	bl	14db8 <_impl_k_current_get>
	BT_DBG("");
    433c:	4b2d      	ldr	r3, [pc, #180]	; (43f4 <bt_conn_prepare_events+0xc8>)
    433e:	9001      	str	r0, [sp, #4]
    4340:	4622      	mov	r2, r4
    4342:	492d      	ldr	r1, [pc, #180]	; (43f8 <bt_conn_prepare_events+0xcc>)
    4344:	482d      	ldr	r0, [pc, #180]	; (43fc <bt_conn_prepare_events+0xd0>)
    4346:	9402      	str	r4, [sp, #8]
    4348:	9400      	str	r4, [sp, #0]
    434a:	47b8      	blx	r7
	conn_change.signaled = 0;
    434c:	4b2c      	ldr	r3, [pc, #176]	; (4400 <bt_conn_prepare_events+0xd4>)
    434e:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4350:	2101      	movs	r1, #1
    4352:	4630      	mov	r0, r6
	conn_change.signaled = 0;
    4354:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4356:	f011 f9ac 	bl	156b2 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    435a:	4b2a      	ldr	r3, [pc, #168]	; (4404 <bt_conn_prepare_events+0xd8>)
    435c:	f103 0048 	add.w	r0, r3, #72	; 0x48
    4360:	f7ff fc32 	bl	3bc8 <atomic_get>
    4364:	462a      	mov	r2, r5
    4366:	461f      	mov	r7, r3
    4368:	b918      	cbnz	r0, 4372 <bt_conn_prepare_events+0x46>
			continue;
    436a:	2001      	movs	r0, #1
}
    436c:	b004      	add	sp, #16
    436e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    4372:	7a59      	ldrb	r1, [r3, #9]
    4374:	b999      	cbnz	r1, 439e <bt_conn_prepare_events+0x72>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4376:	f3bf 8f5b 	dmb	ish
    437a:	1d19      	adds	r1, r3, #4
    437c:	e851 0f00 	ldrex	r0, [r1]
    4380:	f020 0540 	bic.w	r5, r0, #64	; 0x40
    4384:	e841 5e00 	strex	lr, r5, [r1]
    4388:	f1be 0f00 	cmp.w	lr, #0
    438c:	d1f6      	bne.n	437c <bt_conn_prepare_events+0x50>
    438e:	f3bf 8f5b 	dmb	ish
    4392:	0641      	lsls	r1, r0, #25
    4394:	d503      	bpl.n	439e <bt_conn_prepare_events+0x72>
			conn_cleanup(conn);
    4396:	4618      	mov	r0, r3
    4398:	f7ff ffb0 	bl	42fc <conn_cleanup>
    439c:	e7e5      	b.n	436a <bt_conn_prepare_events+0x3e>
		if (conn->state != BT_CONN_CONNECTED) {
    439e:	7a7d      	ldrb	r5, [r7, #9]
    43a0:	2d03      	cmp	r5, #3
    43a2:	d1e2      	bne.n	436a <bt_conn_prepare_events+0x3e>
		BT_DBG("Adding conn %p to poll list", conn);
    43a4:	f8d2 8000 	ldr.w	r8, [r2]
    43a8:	f010 fd06 	bl	14db8 <_impl_k_current_get>
    43ac:	4b11      	ldr	r3, [pc, #68]	; (43f4 <bt_conn_prepare_events+0xc8>)
    43ae:	9001      	str	r0, [sp, #4]
    43b0:	4a0f      	ldr	r2, [pc, #60]	; (43f0 <bt_conn_prepare_events+0xc4>)
    43b2:	4911      	ldr	r1, [pc, #68]	; (43f8 <bt_conn_prepare_events+0xcc>)
    43b4:	4814      	ldr	r0, [pc, #80]	; (4408 <bt_conn_prepare_events+0xdc>)
    43b6:	9403      	str	r4, [sp, #12]
    43b8:	9702      	str	r7, [sp, #8]
    43ba:	9400      	str	r4, [sp, #0]
    43bc:	47c0      	blx	r8
		k_poll_event_init(&events[ev_count],
    43be:	4b13      	ldr	r3, [pc, #76]	; (440c <bt_conn_prepare_events+0xe0>)
    43c0:	2200      	movs	r2, #0
    43c2:	2104      	movs	r1, #4
    43c4:	f106 0014 	add.w	r0, r6, #20
    43c8:	f011 f973 	bl	156b2 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    43cc:	2301      	movs	r3, #1
    43ce:	f886 3020 	strb.w	r3, [r6, #32]
		k_poll_event_init(&events[ev_count],
    43d2:	f106 0028 	add.w	r0, r6, #40	; 0x28
    43d6:	4b0e      	ldr	r3, [pc, #56]	; (4410 <bt_conn_prepare_events+0xe4>)
    43d8:	2200      	movs	r2, #0
    43da:	2104      	movs	r1, #4
    43dc:	f011 f969 	bl	156b2 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    43e0:	2302      	movs	r3, #2
    43e2:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    43e6:	4628      	mov	r0, r5
	return ev_count;
    43e8:	e7c0      	b.n	436c <bt_conn_prepare_events+0x40>
    43ea:	bf00      	nop
    43ec:	20003ad4 	.word	0x20003ad4
    43f0:	000159e9 	.word	0x000159e9
    43f4:	00016a85 	.word	0x00016a85
    43f8:	00016791 	.word	0x00016791
    43fc:	00016b52 	.word	0x00016b52
    4400:	20003c08 	.word	0x20003c08
    4404:	20000360 	.word	0x20000360
    4408:	00016b68 	.word	0x00016b68
    440c:	20000378 	.word	0x20000378
    4410:	2000038c 	.word	0x2000038c

00004414 <bt_conn_set_state>:
{
    4414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4418:	4604      	mov	r4, r0
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    441a:	4f72      	ldr	r7, [pc, #456]	; (45e4 <bt_conn_set_state+0x1d0>)
    441c:	4d72      	ldr	r5, [pc, #456]	; (45e8 <bt_conn_set_state+0x1d4>)
    441e:	683e      	ldr	r6, [r7, #0]
{
    4420:	b087      	sub	sp, #28
    4422:	4688      	mov	r8, r1
    4424:	f010 fcc8 	bl	14db8 <_impl_k_current_get>
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    4428:	7a63      	ldrb	r3, [r4, #9]
    442a:	4970      	ldr	r1, [pc, #448]	; (45ec <bt_conn_set_state+0x1d8>)
    442c:	9001      	str	r0, [sp, #4]
    442e:	2b04      	cmp	r3, #4
    4430:	bf96      	itet	ls
    4432:	4a6f      	ldrls	r2, [pc, #444]	; (45f0 <bt_conn_set_state+0x1dc>)
    4434:	4b6f      	ldrhi	r3, [pc, #444]	; (45f4 <bt_conn_set_state+0x1e0>)
    4436:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    443a:	9302      	str	r3, [sp, #8]
    443c:	f1b8 0f04 	cmp.w	r8, #4
    4440:	bf96      	itet	ls
    4442:	4a6b      	ldrls	r2, [pc, #428]	; (45f0 <bt_conn_set_state+0x1dc>)
    4444:	4a6b      	ldrhi	r2, [pc, #428]	; (45f4 <bt_conn_set_state+0x1e0>)
    4446:	f852 2028 	ldrls.w	r2, [r2, r8, lsl #2]
    444a:	9203      	str	r2, [sp, #12]
    444c:	9504      	str	r5, [sp, #16]
    444e:	9500      	str	r5, [sp, #0]
    4450:	4b69      	ldr	r3, [pc, #420]	; (45f8 <bt_conn_set_state+0x1e4>)
    4452:	486a      	ldr	r0, [pc, #424]	; (45fc <bt_conn_set_state+0x1e8>)
    4454:	462a      	mov	r2, r5
    4456:	47b0      	blx	r6
	if (conn->state == state) {
    4458:	7a66      	ldrb	r6, [r4, #9]
    445a:	45b0      	cmp	r8, r6
    445c:	46a9      	mov	r9, r5
    445e:	d10a      	bne.n	4476 <bt_conn_set_state+0x62>
		BT_WARN("no transition");
    4460:	9501      	str	r5, [sp, #4]
    4462:	9500      	str	r5, [sp, #0]
    4464:	683c      	ldr	r4, [r7, #0]
    4466:	4b64      	ldr	r3, [pc, #400]	; (45f8 <bt_conn_set_state+0x1e4>)
    4468:	4960      	ldr	r1, [pc, #384]	; (45ec <bt_conn_set_state+0x1d8>)
    446a:	4865      	ldr	r0, [pc, #404]	; (4600 <bt_conn_set_state+0x1ec>)
    446c:	462a      	mov	r2, r5
    446e:	47a0      	blx	r4
}
    4470:	b007      	add	sp, #28
    4472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn->state = state;
    4476:	f884 8009 	strb.w	r8, [r4, #9]
	switch (old_state) {
    447a:	b19e      	cbz	r6, 44a4 <bt_conn_set_state+0x90>
    447c:	2e02      	cmp	r6, #2
    447e:	d015      	beq.n	44ac <bt_conn_set_state+0x98>
	switch (conn->state) {
    4480:	7a63      	ldrb	r3, [r4, #9]
    4482:	2b04      	cmp	r3, #4
    4484:	f200 80a1 	bhi.w	45ca <bt_conn_set_state+0x1b6>
    4488:	a201      	add	r2, pc, #4	; (adr r2, 4490 <bt_conn_set_state+0x7c>)
    448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    448e:	bf00      	nop
    4490:	000044f3 	.word	0x000044f3
    4494:	00004471 	.word	0x00004471
    4498:	000045af 	.word	0x000045af
    449c:	000044bd 	.word	0x000044bd
    44a0:	00004471 	.word	0x00004471
		bt_conn_ref(conn);
    44a4:	4620      	mov	r0, r4
    44a6:	f7ff fe7b 	bl	41a0 <bt_conn_ref>
		break;
    44aa:	e7e9      	b.n	4480 <bt_conn_set_state+0x6c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    44ac:	78a3      	ldrb	r3, [r4, #2]
    44ae:	2b00      	cmp	r3, #0
    44b0:	d1e6      	bne.n	4480 <bt_conn_set_state+0x6c>
			k_delayed_work_cancel(&conn->le.update_work);
    44b2:	f104 0078 	add.w	r0, r4, #120	; 0x78
    44b6:	f010 ffc5 	bl	15444 <k_delayed_work_cancel>
    44ba:	e7e1      	b.n	4480 <bt_conn_set_state+0x6c>
		if (conn->type == BT_CONN_TYPE_SCO) {
    44bc:	78a3      	ldrb	r3, [r4, #2]
    44be:	2b02      	cmp	r3, #2
    44c0:	d0d6      	beq.n	4470 <bt_conn_set_state+0x5c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    44c2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    44c6:	f010 f9ad 	bl	14824 <_impl_k_queue_init>
    44ca:	f104 0018 	add.w	r0, r4, #24
    44ce:	f010 f9a9 	bl	14824 <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    44d2:	2100      	movs	r1, #0
    44d4:	484b      	ldr	r0, [pc, #300]	; (4604 <bt_conn_set_state+0x1f0>)
    44d6:	f011 f98f 	bl	157f8 <_impl_k_poll_signal>
	list->head = NULL;
    44da:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    44dc:	4620      	mov	r0, r4
    44de:	6423      	str	r3, [r4, #64]	; 0x40
	list->tail = NULL;
    44e0:	6463      	str	r3, [r4, #68]	; 0x44
    44e2:	f000 fc0d 	bl	4d00 <bt_l2cap_connected>
		notify_connected(conn);
    44e6:	4620      	mov	r0, r4
}
    44e8:	b007      	add	sp, #28
    44ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		notify_connected(conn);
    44ee:	f7ff bb5b 	b.w	3ba8 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    44f2:	78a3      	ldrb	r3, [r4, #2]
    44f4:	2b02      	cmp	r3, #2
    44f6:	d105      	bne.n	4504 <bt_conn_set_state+0xf0>
			bt_conn_unref(conn);
    44f8:	4620      	mov	r0, r4
}
    44fa:	b007      	add	sp, #28
    44fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			bt_conn_unref(conn);
    4500:	f7ff becc 	b.w	429c <bt_conn_unref>
		if (old_state == BT_CONN_CONNECTED ||
    4504:	1ef3      	subs	r3, r6, #3
    4506:	2b01      	cmp	r3, #1
    4508:	d844      	bhi.n	4594 <bt_conn_set_state+0x180>
			bt_l2cap_disconnected(conn);
    450a:	4620      	mov	r0, r4
    450c:	f000 fc32 	bl	4d74 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    4510:	4b3d      	ldr	r3, [pc, #244]	; (4608 <bt_conn_set_state+0x1f4>)
    4512:	681d      	ldr	r5, [r3, #0]
    4514:	b9ed      	cbnz	r5, 4552 <bt_conn_set_state+0x13e>
    4516:	4e3d      	ldr	r6, [pc, #244]	; (460c <bt_conn_set_state+0x1f8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4518:	4f3d      	ldr	r7, [pc, #244]	; (4610 <bt_conn_set_state+0x1fc>)
	__asm__ volatile(
    451a:	f04f 0320 	mov.w	r3, #32
    451e:	f3ef 8111 	mrs	r1, BASEPRI
    4522:	f383 8811 	msr	BASEPRI, r3
    4526:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    4528:	b12b      	cbz	r3, 4536 <bt_conn_set_state+0x122>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    452a:	6960      	ldr	r0, [r4, #20]
	return node->next;
    452c:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    452e:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4530:	4283      	cmp	r3, r0
	list->tail = node;
    4532:	bf08      	it	eq
    4534:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4536:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    453a:	b18b      	cbz	r3, 4560 <bt_conn_set_state+0x14c>
    453c:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    453e:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4540:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    4542:	605d      	str	r5, [r3, #4]
	list->head = node;
    4544:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    4546:	b902      	cbnz	r2, 454a <bt_conn_set_state+0x136>
	list->tail = node;
    4548:	6073      	str	r3, [r6, #4]
    454a:	4638      	mov	r0, r7
    454c:	f010 fc6e 	bl	14e2c <_impl_k_sem_give>
    4550:	e7e3      	b.n	451a <bt_conn_set_state+0x106>
		if (cb->disconnected) {
    4552:	686b      	ldr	r3, [r5, #4]
    4554:	b113      	cbz	r3, 455c <bt_conn_set_state+0x148>
			cb->disconnected(conn, conn->err);
    4556:	7a21      	ldrb	r1, [r4, #8]
    4558:	4620      	mov	r0, r4
    455a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    455c:	692d      	ldr	r5, [r5, #16]
    455e:	e7d9      	b.n	4514 <bt_conn_set_state+0x100>
			if (conn->type == BT_CONN_TYPE_LE) {
    4560:	78a3      	ldrb	r3, [r4, #2]
    4562:	b91b      	cbnz	r3, 456c <bt_conn_set_state+0x158>
				k_delayed_work_cancel(&conn->le.update_work);
    4564:	f104 0078 	add.w	r0, r4, #120	; 0x78
    4568:	f010 ff6c 	bl	15444 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    456c:	f3bf 8f5b 	dmb	ish
    4570:	3404      	adds	r4, #4
    4572:	e854 3f00 	ldrex	r3, [r4]
    4576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    457a:	e844 3200 	strex	r2, r3, [r4]
    457e:	2a00      	cmp	r2, #0
    4580:	d1f7      	bne.n	4572 <bt_conn_set_state+0x15e>
    4582:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4586:	481f      	ldr	r0, [pc, #124]	; (4604 <bt_conn_set_state+0x1f0>)
    4588:	2100      	movs	r1, #0
}
    458a:	b007      	add	sp, #28
    458c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4590:	f011 b932 	b.w	157f8 <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    4594:	2e02      	cmp	r6, #2
    4596:	d103      	bne.n	45a0 <bt_conn_set_state+0x18c>
			notify_connected(conn);
    4598:	4620      	mov	r0, r4
    459a:	f7ff fb05 	bl	3ba8 <notify_connected>
    459e:	e7ab      	b.n	44f8 <bt_conn_set_state+0xe4>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    45a0:	2e01      	cmp	r6, #1
    45a2:	f47f af65 	bne.w	4470 <bt_conn_set_state+0x5c>
			if (conn->err) {
    45a6:	7a23      	ldrb	r3, [r4, #8]
    45a8:	2b00      	cmp	r3, #0
    45aa:	d0a5      	beq.n	44f8 <bt_conn_set_state+0xe4>
    45ac:	e7f4      	b.n	4598 <bt_conn_set_state+0x184>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    45ae:	78a3      	ldrb	r3, [r4, #2]
    45b0:	2b00      	cmp	r3, #0
    45b2:	f47f af5d 	bne.w	4470 <bt_conn_set_state+0x5c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    45b6:	4817      	ldr	r0, [pc, #92]	; (4614 <bt_conn_set_state+0x200>)
    45b8:	f640 32b8 	movw	r2, #3000	; 0xbb8
    45bc:	f104 0178 	add.w	r1, r4, #120	; 0x78
}
    45c0:	b007      	add	sp, #28
    45c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    45c6:	f010 bfa1 	b.w	1550c <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    45ca:	f8cd 9008 	str.w	r9, [sp, #8]
    45ce:	f8cd 8004 	str.w	r8, [sp, #4]
    45d2:	f8cd 9000 	str.w	r9, [sp]
    45d6:	683c      	ldr	r4, [r7, #0]
    45d8:	4b07      	ldr	r3, [pc, #28]	; (45f8 <bt_conn_set_state+0x1e4>)
    45da:	4a03      	ldr	r2, [pc, #12]	; (45e8 <bt_conn_set_state+0x1d4>)
    45dc:	4903      	ldr	r1, [pc, #12]	; (45ec <bt_conn_set_state+0x1d8>)
    45de:	480e      	ldr	r0, [pc, #56]	; (4618 <bt_conn_set_state+0x204>)
    45e0:	47a0      	blx	r4
		break;
    45e2:	e745      	b.n	4470 <bt_conn_set_state+0x5c>
    45e4:	20003ad4 	.word	0x20003ad4
    45e8:	000159e9 	.word	0x000159e9
    45ec:	00016791 	.word	0x00016791
    45f0:	00016a20 	.word	0x00016a20
    45f4:	00016e6e 	.word	0x00016e6e
    45f8:	00016aaf 	.word	0x00016aaf
    45fc:	00016e78 	.word	0x00016e78
    4600:	00016e96 	.word	0x00016e96
    4604:	20003c08 	.word	0x20003c08
    4608:	2000034c 	.word	0x2000034c
    460c:	20000400 	.word	0x20000400
    4610:	20003b64 	.word	0x20003b64
    4614:	200019f8 	.word	0x200019f8
    4618:	00016eb4 	.word	0x00016eb4

0000461c <bt_conn_get_dst>:

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    461c:	304c      	adds	r0, #76	; 0x4c
    461e:	4770      	bx	lr

00004620 <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    4620:	b570      	push	{r4, r5, r6, lr}
    4622:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    4624:	4608      	mov	r0, r1
{
    4626:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    4628:	f7fd fe74 	bl	2314 <bt_le_conn_params_valid>
    462c:	b908      	cbnz	r0, 4632 <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    462e:	2400      	movs	r4, #0
    4630:	e01c      	b.n	466c <bt_conn_create_le+0x4c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4632:	481d      	ldr	r0, [pc, #116]	; (46a8 <bt_conn_create_le+0x88>)
    4634:	f7ff fac8 	bl	3bc8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4638:	0583      	lsls	r3, r0, #22
    463a:	d4f8      	bmi.n	462e <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    463c:	4630      	mov	r0, r6
    463e:	f7ff fdf7 	bl	4230 <bt_conn_lookup_addr_le>
	if (conn) {
    4642:	4604      	mov	r4, r0
    4644:	b1a0      	cbz	r0, 4670 <bt_conn_create_le+0x50>
		switch (conn->state) {
    4646:	7a43      	ldrb	r3, [r0, #9]
    4648:	2b01      	cmp	r3, #1
    464a:	d006      	beq.n	465a <bt_conn_create_le+0x3a>
    464c:	d301      	bcc.n	4652 <bt_conn_create_le+0x32>
    464e:	2b03      	cmp	r3, #3
    4650:	d90c      	bls.n	466c <bt_conn_create_le+0x4c>
			bt_conn_unref(conn);
    4652:	4620      	mov	r0, r4
    4654:	f7ff fe22 	bl	429c <bt_conn_unref>
    4658:	e7e9      	b.n	462e <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    465a:	886b      	ldrh	r3, [r5, #2]
    465c:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
	conn->le.latency = param->latency;
    4660:	88ab      	ldrh	r3, [r5, #4]
    4662:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
	conn->le.timeout = param->timeout;
    4666:	88eb      	ldrh	r3, [r5, #6]
    4668:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    466c:	4620      	mov	r0, r4
    466e:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    4670:	4630      	mov	r0, r6
    4672:	f7ff fd49 	bl	4108 <bt_conn_add_le>
	if (!conn) {
    4676:	4604      	mov	r4, r0
    4678:	2800      	cmp	r0, #0
    467a:	d0f7      	beq.n	466c <bt_conn_create_le+0x4c>
	memcpy(dst, src, sizeof(*dst));
    467c:	2207      	movs	r2, #7
    467e:	4631      	mov	r1, r6
    4680:	305a      	adds	r0, #90	; 0x5a
    4682:	f7fd facd 	bl	1c20 <memcpy>
	conn->le.interval_max = param->interval_max;
    4686:	886b      	ldrh	r3, [r5, #2]
    4688:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->le.latency = param->latency;
    468c:	88ab      	ldrh	r3, [r5, #4]
    468e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	conn->le.timeout = param->timeout;
    4692:	88eb      	ldrh	r3, [r5, #6]
    4694:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4698:	4620      	mov	r0, r4
    469a:	2101      	movs	r1, #1
    469c:	f7ff feba 	bl	4414 <bt_conn_set_state>
	bt_le_scan_update(true);
    46a0:	2001      	movs	r0, #1
    46a2:	f7fd ff75 	bl	2590 <bt_le_scan_update>
	return conn;
    46a6:	e7e1      	b.n	466c <bt_conn_create_le+0x4c>
    46a8:	20003b48 	.word	0x20003b48

000046ac <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    46ac:	b570      	push	{r4, r5, r6, lr}
    46ae:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    46b0:	460d      	mov	r5, r1
    46b2:	2900      	cmp	r1, #0
    46b4:	d13b      	bne.n	472e <bt_le_set_auto_conn+0x82>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    46b6:	4630      	mov	r0, r6
    46b8:	f7ff fdba 	bl	4230 <bt_conn_lookup_addr_le>
	if (!conn) {
    46bc:	4604      	mov	r4, r0
    46be:	b928      	cbnz	r0, 46cc <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    46c0:	4630      	mov	r0, r6
    46c2:	f7ff fd21 	bl	4108 <bt_conn_add_le>
		if (!conn) {
    46c6:	4604      	mov	r4, r0
    46c8:	2800      	cmp	r0, #0
    46ca:	d051      	beq.n	4770 <bt_le_set_auto_conn+0xc4>
    46cc:	1d23      	adds	r3, r4, #4
			return -ENOMEM;
		}
	}

	if (param) {
    46ce:	2d00      	cmp	r5, #0
    46d0:	d035      	beq.n	473e <bt_le_set_auto_conn+0x92>
	conn->le.interval_max = param->interval_max;
    46d2:	886a      	ldrh	r2, [r5, #2]
    46d4:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->le.latency = param->latency;
    46d8:	88aa      	ldrh	r2, [r5, #4]
    46da:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
	conn->le.timeout = param->timeout;
    46de:	88ea      	ldrh	r2, [r5, #6]
    46e0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    46e4:	f3bf 8f5b 	dmb	ish
    46e8:	e853 2f00 	ldrex	r2, [r3]
    46ec:	f042 0101 	orr.w	r1, r2, #1
    46f0:	e843 1000 	strex	r0, r1, [r3]
    46f4:	2800      	cmp	r0, #0
    46f6:	d1f7      	bne.n	46e8 <bt_le_set_auto_conn+0x3c>
    46f8:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    46fc:	07d1      	lsls	r1, r2, #31
    46fe:	d402      	bmi.n	4706 <bt_le_set_auto_conn+0x5a>
					     BT_CONN_AUTO_CONNECT)) {
			bt_conn_ref(conn);
    4700:	4620      	mov	r0, r4
    4702:	f7ff fd4d 	bl	41a0 <bt_conn_ref>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    4706:	7a63      	ldrb	r3, [r4, #9]
    4708:	b963      	cbnz	r3, 4724 <bt_le_set_auto_conn+0x78>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    470a:	481b      	ldr	r0, [pc, #108]	; (4778 <bt_le_set_auto_conn+0xcc>)
    470c:	f7ff fa5c 	bl	3bc8 <atomic_get>
    4710:	0783      	lsls	r3, r0, #30
    4712:	d507      	bpl.n	4724 <bt_le_set_auto_conn+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    4714:	b11d      	cbz	r5, 471e <bt_le_set_auto_conn+0x72>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4716:	2101      	movs	r1, #1
    4718:	4620      	mov	r0, r4
    471a:	f7ff fe7b 	bl	4414 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    471e:	2000      	movs	r0, #0
    4720:	f7fd ff36 	bl	2590 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    4724:	4620      	mov	r0, r4
    4726:	f7ff fdb9 	bl	429c <bt_conn_unref>

	return 0;
    472a:	2000      	movs	r0, #0
    472c:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    472e:	4608      	mov	r0, r1
    4730:	f7fd fdf0 	bl	2314 <bt_le_conn_params_valid>
    4734:	2800      	cmp	r0, #0
    4736:	d1be      	bne.n	46b6 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    4738:	f06f 0015 	mvn.w	r0, #21
    473c:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    473e:	f3bf 8f5b 	dmb	ish
    4742:	e853 2f00 	ldrex	r2, [r3]
    4746:	f022 0101 	bic.w	r1, r2, #1
    474a:	e843 1000 	strex	r0, r1, [r3]
    474e:	2800      	cmp	r0, #0
    4750:	d1f7      	bne.n	4742 <bt_le_set_auto_conn+0x96>
    4752:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    4756:	07d2      	lsls	r2, r2, #31
    4758:	d5d5      	bpl.n	4706 <bt_le_set_auto_conn+0x5a>
			bt_conn_unref(conn);
    475a:	4620      	mov	r0, r4
    475c:	f7ff fd9e 	bl	429c <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    4760:	7a63      	ldrb	r3, [r4, #9]
    4762:	2b01      	cmp	r3, #1
    4764:	d1cf      	bne.n	4706 <bt_le_set_auto_conn+0x5a>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4766:	4629      	mov	r1, r5
    4768:	4620      	mov	r0, r4
    476a:	f7ff fe53 	bl	4414 <bt_conn_set_state>
    476e:	e7ca      	b.n	4706 <bt_le_set_auto_conn+0x5a>
			return -ENOMEM;
    4770:	f06f 000b 	mvn.w	r0, #11
}
    4774:	bd70      	pop	{r4, r5, r6, pc}
    4776:	bf00      	nop
    4778:	20003b48 	.word	0x20003b48

0000477c <bt_conn_disconnect>:
{
    477c:	b570      	push	{r4, r5, r6, lr}
    477e:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4780:	7881      	ldrb	r1, [r0, #2]
{
    4782:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4784:	b911      	cbnz	r1, 478c <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    4786:	304c      	adds	r0, #76	; 0x4c
    4788:	f7ff ff90 	bl	46ac <bt_le_set_auto_conn>
	switch (conn->state) {
    478c:	7a63      	ldrb	r3, [r4, #9]
    478e:	3b01      	subs	r3, #1
    4790:	2b03      	cmp	r3, #3
    4792:	d803      	bhi.n	479c <bt_conn_disconnect+0x20>
    4794:	e8df f003 	tbb	[pc, r3]
    4798:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    479c:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    47a0:	4628      	mov	r0, r5
    47a2:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    47a4:	4620      	mov	r0, r4
		conn->err = reason;
    47a6:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    47a8:	2100      	movs	r1, #0
    47aa:	f7ff fe33 	bl	4414 <bt_conn_set_state>
		bt_le_scan_update(false);
    47ae:	2000      	movs	r0, #0
    47b0:	f7fd feee 	bl	2590 <bt_le_scan_update>
		return 0;
    47b4:	2500      	movs	r5, #0
    47b6:	e7f3      	b.n	47a0 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    47b8:	f104 0078 	add.w	r0, r4, #120	; 0x78
    47bc:	f010 fe42 	bl	15444 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    47c0:	2100      	movs	r1, #0
    47c2:	f242 000e 	movw	r0, #8206	; 0x200e
}
    47c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    47ca:	f7fd be5b 	b.w	2484 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    47ce:	2103      	movs	r1, #3
    47d0:	f240 4006 	movw	r0, #1030	; 0x406
    47d4:	f7fd fc90 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    47d8:	4605      	mov	r5, r0
    47da:	b198      	cbz	r0, 4804 <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    47dc:	2103      	movs	r1, #3
    47de:	3008      	adds	r0, #8
    47e0:	f00f fa5e 	bl	13ca0 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    47e4:	8823      	ldrh	r3, [r4, #0]
    47e6:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    47e8:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    47ea:	4629      	mov	r1, r5
    47ec:	f240 4006 	movw	r0, #1030	; 0x406
    47f0:	f7fd fe48 	bl	2484 <bt_hci_cmd_send>
	if (err) {
    47f4:	4605      	mov	r5, r0
    47f6:	2800      	cmp	r0, #0
    47f8:	d1d2      	bne.n	47a0 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    47fa:	2104      	movs	r1, #4
    47fc:	4620      	mov	r0, r4
    47fe:	f7ff fe09 	bl	4414 <bt_conn_set_state>
    4802:	e7cd      	b.n	47a0 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    4804:	f06f 0536 	mvn.w	r5, #54	; 0x36
    4808:	e7ca      	b.n	47a0 <bt_conn_disconnect+0x24>

0000480a <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    480a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    480c:	4607      	mov	r7, r0
    480e:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    4810:	f242 0013 	movw	r0, #8211	; 0x2013
    4814:	210e      	movs	r1, #14
    4816:	f7fd fc6f 	bl	20f8 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    481a:	4606      	mov	r6, r0
    481c:	b1c8      	cbz	r0, 4852 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    481e:	210e      	movs	r1, #14
    4820:	3008      	adds	r0, #8
    4822:	f00f fa3d 	bl	13ca0 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    4826:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4828:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    482a:	220e      	movs	r2, #14
    482c:	f7fd fa24 	bl	1c78 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4830:	883b      	ldrh	r3, [r7, #0]
    4832:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    4834:	882b      	ldrh	r3, [r5, #0]
    4836:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    4838:	886b      	ldrh	r3, [r5, #2]
    483a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    483c:	88ab      	ldrh	r3, [r5, #4]
    483e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    4840:	88eb      	ldrh	r3, [r5, #6]
    4842:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4844:	4631      	mov	r1, r6
    4846:	f242 0013 	movw	r0, #8211	; 0x2013
}
    484a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    484e:	f7fd be19 	b.w	2484 <bt_hci_cmd_send>
}
    4852:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004858 <bt_conn_le_param_update>:
{
    4858:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    485a:	4b27      	ldr	r3, [pc, #156]	; (48f8 <bt_conn_le_param_update+0xa0>)
{
    485c:	460d      	mov	r5, r1
    485e:	b08a      	sub	sp, #40	; 0x28
    4860:	4604      	mov	r4, r0
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    4862:	681e      	ldr	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4864:	f010 faa8 	bl	14db8 <_impl_k_current_get>
    4868:	88eb      	ldrh	r3, [r5, #6]
    486a:	9307      	str	r3, [sp, #28]
    486c:	88ab      	ldrh	r3, [r5, #4]
    486e:	9306      	str	r3, [sp, #24]
    4870:	886b      	ldrh	r3, [r5, #2]
    4872:	9305      	str	r3, [sp, #20]
    4874:	882b      	ldrh	r3, [r5, #0]
    4876:	4a21      	ldr	r2, [pc, #132]	; (48fc <bt_conn_le_param_update+0xa4>)
    4878:	9304      	str	r3, [sp, #16]
    487a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    487e:	9208      	str	r2, [sp, #32]
    4880:	9303      	str	r3, [sp, #12]
    4882:	9001      	str	r0, [sp, #4]
    4884:	9200      	str	r2, [sp, #0]
    4886:	4b1e      	ldr	r3, [pc, #120]	; (4900 <bt_conn_le_param_update+0xa8>)
    4888:	9402      	str	r4, [sp, #8]
    488a:	491e      	ldr	r1, [pc, #120]	; (4904 <bt_conn_le_param_update+0xac>)
    488c:	481e      	ldr	r0, [pc, #120]	; (4908 <bt_conn_le_param_update+0xb0>)
    488e:	47b0      	blx	r6
	if (conn->le.interval >= param->interval_min &&
    4890:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    4894:	882a      	ldrh	r2, [r5, #0]
    4896:	429a      	cmp	r2, r3
    4898:	d80c      	bhi.n	48b4 <bt_conn_le_param_update+0x5c>
    489a:	886a      	ldrh	r2, [r5, #2]
    489c:	429a      	cmp	r2, r3
    489e:	d309      	bcc.n	48b4 <bt_conn_le_param_update+0x5c>
	    conn->le.interval <= param->interval_max &&
    48a0:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
    48a4:	88ab      	ldrh	r3, [r5, #4]
    48a6:	429a      	cmp	r2, r3
    48a8:	d104      	bne.n	48b4 <bt_conn_le_param_update+0x5c>
	    conn->le.latency == param->latency &&
    48aa:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
    48ae:	88eb      	ldrh	r3, [r5, #6]
    48b0:	429a      	cmp	r2, r3
    48b2:	d01c      	beq.n	48ee <bt_conn_le_param_update+0x96>
	k_delayed_work_cancel(&conn->le.update_work);
    48b4:	f104 0078 	add.w	r0, r4, #120	; 0x78
    48b8:	f010 fdc4 	bl	15444 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    48bc:	4b13      	ldr	r3, [pc, #76]	; (490c <bt_conn_le_param_update+0xb4>)
    48be:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    48c2:	079a      	lsls	r2, r3, #30
    48c4:	d503      	bpl.n	48ce <bt_conn_le_param_update+0x76>
    48c6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    48ca:	079b      	lsls	r3, r3, #30
    48cc:	d401      	bmi.n	48d2 <bt_conn_le_param_update+0x7a>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    48ce:	78e3      	ldrb	r3, [r4, #3]
    48d0:	b933      	cbnz	r3, 48e0 <bt_conn_le_param_update+0x88>
		return bt_conn_le_conn_update(conn, param);
    48d2:	4629      	mov	r1, r5
    48d4:	4620      	mov	r0, r4
}
    48d6:	b00a      	add	sp, #40	; 0x28
    48d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_conn_le_conn_update(conn, param);
    48dc:	f7ff bf95 	b.w	480a <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    48e0:	4629      	mov	r1, r5
    48e2:	4620      	mov	r0, r4
}
    48e4:	b00a      	add	sp, #40	; 0x28
    48e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_l2cap_update_conn_param(conn, param);
    48ea:	f000 bba9 	b.w	5040 <bt_l2cap_update_conn_param>
}
    48ee:	f06f 0044 	mvn.w	r0, #68	; 0x44
    48f2:	b00a      	add	sp, #40	; 0x28
    48f4:	bd70      	pop	{r4, r5, r6, pc}
    48f6:	bf00      	nop
    48f8:	20003ad4 	.word	0x20003ad4
    48fc:	000159e9 	.word	0x000159e9
    4900:	00016adb 	.word	0x00016adb
    4904:	00016791 	.word	0x00016791
    4908:	00016af3 	.word	0x00016af3
    490c:	20003ad8 	.word	0x20003ad8

00004910 <le_conn_update>:
{
    4910:	4603      	mov	r3, r0
    4912:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4914:	f813 2c6f 	ldrb.w	r2, [r3, #-111]
    4918:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    491a:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    491e:	d105      	bne.n	492c <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    4920:	2113      	movs	r1, #19
    4922:	f7ff ff2b 	bl	477c <bt_conn_disconnect>
}
    4926:	b003      	add	sp, #12
    4928:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    492c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    4930:	f8ad 2000 	strh.w	r2, [sp]
    4934:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    4938:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    493c:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    493e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    4942:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    4946:	f8ad 2004 	strh.w	r2, [sp, #4]
    494a:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    494e:	f7ff ff83 	bl	4858 <bt_conn_le_param_update>
    4952:	e7e8      	b.n	4926 <le_conn_update+0x16>

00004954 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    4954:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    4956:	4b08      	ldr	r3, [pc, #32]	; (4978 <bt_conn_create_pdu+0x24>)
{
    4958:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    495a:	2800      	cmp	r0, #0
    495c:	bf08      	it	eq
    495e:	4618      	moveq	r0, r3
    4960:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4964:	f00f f934 	bl	13bd0 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    4968:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    496a:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    496c:	3008      	adds	r0, #8
    496e:	f00f f94e 	bl	13c0e <net_buf_simple_reserve>

	return buf;
}
    4972:	4620      	mov	r0, r4
    4974:	bd38      	pop	{r3, r4, r5, pc}
    4976:	bf00      	nop
    4978:	20004018 	.word	0x20004018

0000497c <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    497c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4980:	4606      	mov	r6, r0
    4982:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    4984:	4816      	ldr	r0, [pc, #88]	; (49e0 <create_frag.isra.8+0x64>)
    4986:	2100      	movs	r1, #0
    4988:	f7ff ffe4 	bl	4954 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    498c:	7833      	ldrb	r3, [r6, #0]
    498e:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    4990:	4605      	mov	r5, r0
    4992:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    4996:	d005      	beq.n	49a4 <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    4998:	f00f f94a 	bl	13c30 <net_buf_unref>
		return NULL;
    499c:	4635      	mov	r5, r6
}
    499e:	4628      	mov	r0, r5
    49a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    49a4:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    49a6:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    49aa:	4e0e      	ldr	r6, [pc, #56]	; (49e4 <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    49ac:	4638      	mov	r0, r7
    49ae:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    49b2:	f00f f9b0 	bl	13d16 <net_buf_simple_tailroom>
    49b6:	4580      	cmp	r8, r0
    49b8:	d20c      	bcs.n	49d4 <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    49ba:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    49be:	f854 1f08 	ldr.w	r1, [r4, #8]!
    49c2:	4632      	mov	r2, r6
    49c4:	4638      	mov	r0, r7
    49c6:	f00f f971 	bl	13cac <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    49ca:	4631      	mov	r1, r6
    49cc:	4620      	mov	r0, r4
    49ce:	f00f f986 	bl	13cde <net_buf_simple_pull>
    49d2:	e7e4      	b.n	499e <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    49d4:	4638      	mov	r0, r7
    49d6:	f00f f99e 	bl	13d16 <net_buf_simple_tailroom>
    49da:	b286      	uxth	r6, r0
    49dc:	e7ef      	b.n	49be <create_frag.isra.8+0x42>
    49de:	bf00      	nop
    49e0:	2000403c 	.word	0x2000403c
    49e4:	20003ad8 	.word	0x20003ad8

000049e8 <bt_conn_process_tx>:
{
    49e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BT_DBG("conn %p", conn);
    49ec:	4f49      	ldr	r7, [pc, #292]	; (4b14 <bt_conn_process_tx+0x12c>)
    49ee:	4d4a      	ldr	r5, [pc, #296]	; (4b18 <bt_conn_process_tx+0x130>)
    49f0:	683e      	ldr	r6, [r7, #0]
{
    49f2:	b086      	sub	sp, #24
    49f4:	4604      	mov	r4, r0
    49f6:	f010 f9df 	bl	14db8 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    49fa:	4b48      	ldr	r3, [pc, #288]	; (4b1c <bt_conn_process_tx+0x134>)
    49fc:	9001      	str	r0, [sp, #4]
    49fe:	9503      	str	r5, [sp, #12]
    4a00:	9402      	str	r4, [sp, #8]
    4a02:	9500      	str	r5, [sp, #0]
    4a04:	462a      	mov	r2, r5
    4a06:	4946      	ldr	r1, [pc, #280]	; (4b20 <bt_conn_process_tx+0x138>)
    4a08:	4846      	ldr	r0, [pc, #280]	; (4b24 <bt_conn_process_tx+0x13c>)
    4a0a:	47b0      	blx	r6
	if (conn->state == BT_CONN_DISCONNECTED &&
    4a0c:	7a63      	ldrb	r3, [r4, #9]
    4a0e:	46b8      	mov	r8, r7
    4a10:	462e      	mov	r6, r5
    4a12:	bb0b      	cbnz	r3, 4a58 <bt_conn_process_tx+0x70>
    4a14:	f3bf 8f5b 	dmb	ish
    4a18:	1d23      	adds	r3, r4, #4
    4a1a:	e853 2f00 	ldrex	r2, [r3]
    4a1e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    4a22:	e843 1000 	strex	r0, r1, [r3]
    4a26:	2800      	cmp	r0, #0
    4a28:	d1f7      	bne.n	4a1a <bt_conn_process_tx+0x32>
    4a2a:	f3bf 8f5b 	dmb	ish
    4a2e:	0653      	lsls	r3, r2, #25
    4a30:	d512      	bpl.n	4a58 <bt_conn_process_tx+0x70>
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
    4a32:	683e      	ldr	r6, [r7, #0]
    4a34:	f010 f9c0 	bl	14db8 <_impl_k_current_get>
    4a38:	9503      	str	r5, [sp, #12]
    4a3a:	8823      	ldrh	r3, [r4, #0]
    4a3c:	9302      	str	r3, [sp, #8]
    4a3e:	9001      	str	r0, [sp, #4]
    4a40:	9500      	str	r5, [sp, #0]
    4a42:	4b36      	ldr	r3, [pc, #216]	; (4b1c <bt_conn_process_tx+0x134>)
    4a44:	4936      	ldr	r1, [pc, #216]	; (4b20 <bt_conn_process_tx+0x138>)
    4a46:	4838      	ldr	r0, [pc, #224]	; (4b28 <bt_conn_process_tx+0x140>)
    4a48:	462a      	mov	r2, r5
    4a4a:	47b0      	blx	r6
		conn_cleanup(conn);
    4a4c:	4620      	mov	r0, r4
}
    4a4e:	b006      	add	sp, #24
    4a50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		conn_cleanup(conn);
    4a54:	f7ff bc52 	b.w	42fc <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    4a58:	2100      	movs	r1, #0
    4a5a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    4a5e:	f00f f8bd 	bl	13bdc <net_buf_get>
	BT_ASSERT(buf);
    4a62:	4605      	mov	r5, r0
    4a64:	b970      	cbnz	r0, 4a84 <bt_conn_process_tx+0x9c>
    4a66:	9601      	str	r6, [sp, #4]
    4a68:	9600      	str	r6, [sp, #0]
    4a6a:	f8d8 4000 	ldr.w	r4, [r8]
    4a6e:	4b2b      	ldr	r3, [pc, #172]	; (4b1c <bt_conn_process_tx+0x134>)
    4a70:	4a29      	ldr	r2, [pc, #164]	; (4b18 <bt_conn_process_tx+0x130>)
    4a72:	492b      	ldr	r1, [pc, #172]	; (4b20 <bt_conn_process_tx+0x138>)
    4a74:	482d      	ldr	r0, [pc, #180]	; (4b2c <bt_conn_process_tx+0x144>)
    4a76:	47a0      	blx	r4
    4a78:	4040      	eors	r0, r0
    4a7a:	f380 8811 	msr	BASEPRI, r0
    4a7e:	f04f 0004 	mov.w	r0, #4
    4a82:	df02      	svc	2
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    4a84:	f8d8 7000 	ldr.w	r7, [r8]
    4a88:	f010 f996 	bl	14db8 <_impl_k_current_get>
    4a8c:	9605      	str	r6, [sp, #20]
    4a8e:	89ab      	ldrh	r3, [r5, #12]
    4a90:	9600      	str	r6, [sp, #0]
	return bt_dev.le.mtu;
    4a92:	4e27      	ldr	r6, [pc, #156]	; (4b30 <bt_conn_process_tx+0x148>)
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    4a94:	9304      	str	r3, [sp, #16]
    4a96:	9001      	str	r0, [sp, #4]
    4a98:	4a1f      	ldr	r2, [pc, #124]	; (4b18 <bt_conn_process_tx+0x130>)
    4a9a:	4921      	ldr	r1, [pc, #132]	; (4b20 <bt_conn_process_tx+0x138>)
    4a9c:	9503      	str	r5, [sp, #12]
    4a9e:	9402      	str	r4, [sp, #8]
    4aa0:	4b24      	ldr	r3, [pc, #144]	; (4b34 <bt_conn_process_tx+0x14c>)
    4aa2:	4825      	ldr	r0, [pc, #148]	; (4b38 <bt_conn_process_tx+0x150>)
    4aa4:	47b8      	blx	r7
	if (buf->len <= conn_mtu(conn)) {
    4aa6:	89a9      	ldrh	r1, [r5, #12]
    4aa8:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    4aac:	4291      	cmp	r1, r2
    4aae:	d809      	bhi.n	4ac4 <bt_conn_process_tx+0xdc>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    4ab0:	2300      	movs	r3, #0
    4ab2:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4ab4:	4629      	mov	r1, r5
    4ab6:	4620      	mov	r0, r4
    4ab8:	f7ff fa58 	bl	3f6c <send_frag>
	if (!send_buf(conn, buf)) {
    4abc:	b150      	cbz	r0, 4ad4 <bt_conn_process_tx+0xec>
}
    4abe:	b006      	add	sp, #24
    4ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ac4:	f104 0709 	add.w	r7, r4, #9
	frag = create_frag(conn, buf);
    4ac8:	4629      	mov	r1, r5
    4aca:	4638      	mov	r0, r7
    4acc:	f7ff ff56 	bl	497c <create_frag.isra.8>
	if (!frag) {
    4ad0:	4601      	mov	r1, r0
    4ad2:	b928      	cbnz	r0, 4ae0 <bt_conn_process_tx+0xf8>
		net_buf_unref(buf);
    4ad4:	4628      	mov	r0, r5
}
    4ad6:	b006      	add	sp, #24
    4ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    4adc:	f00f b8a8 	b.w	13c30 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    4ae0:	2301      	movs	r3, #1
    4ae2:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4ae4:	4620      	mov	r0, r4
    4ae6:	f7ff fa41 	bl	3f6c <send_frag>
    4aea:	2800      	cmp	r0, #0
    4aec:	d0f2      	beq.n	4ad4 <bt_conn_process_tx+0xec>
	while (buf->len > conn_mtu(conn)) {
    4aee:	89aa      	ldrh	r2, [r5, #12]
    4af0:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    4af4:	429a      	cmp	r2, r3
    4af6:	d802      	bhi.n	4afe <bt_conn_process_tx+0x116>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4af8:	2300      	movs	r3, #0
    4afa:	2201      	movs	r2, #1
    4afc:	e7da      	b.n	4ab4 <bt_conn_process_tx+0xcc>
		frag = create_frag(conn, buf);
    4afe:	4629      	mov	r1, r5
    4b00:	4638      	mov	r0, r7
    4b02:	f7ff ff3b 	bl	497c <create_frag.isra.8>
		if (!frag) {
    4b06:	4601      	mov	r1, r0
    4b08:	2800      	cmp	r0, #0
    4b0a:	d0e3      	beq.n	4ad4 <bt_conn_process_tx+0xec>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4b0c:	2301      	movs	r3, #1
    4b0e:	461a      	mov	r2, r3
    4b10:	e7e8      	b.n	4ae4 <bt_conn_process_tx+0xfc>
    4b12:	bf00      	nop
    4b14:	20003ad4 	.word	0x20003ad4
    4b18:	000159e9 	.word	0x000159e9
    4b1c:	00016a9c 	.word	0x00016a9c
    4b20:	00016791 	.word	0x00016791
    4b24:	00016b35 	.word	0x00016b35
    4b28:	00016b99 	.word	0x00016b99
    4b2c:	00016846 	.word	0x00016846
    4b30:	20003ad8 	.word	0x20003ad8
    4b34:	00016a7c 	.word	0x00016a7c
    4b38:	00016bd3 	.word	0x00016bd3

00004b3c <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    4b3c:	4b03      	ldr	r3, [pc, #12]	; (4b4c <bt_conn_get_id+0x10>)
    4b3e:	1ac0      	subs	r0, r0, r3
    4b40:	4b03      	ldr	r3, [pc, #12]	; (4b50 <bt_conn_get_id+0x14>)
    4b42:	1140      	asrs	r0, r0, #5
    4b44:	4358      	muls	r0, r3
}
    4b46:	b2c0      	uxtb	r0, r0
    4b48:	4770      	bx	lr
    4b4a:	bf00      	nop
    4b4c:	20000360 	.word	0x20000360
    4b50:	cccccccd 	.word	0xcccccccd

00004b54 <bt_conn_init>:
	parent->next = child;
    4b54:	4b12      	ldr	r3, [pc, #72]	; (4ba0 <bt_conn_init+0x4c>)
    4b56:	4a13      	ldr	r2, [pc, #76]	; (4ba4 <bt_conn_init+0x50>)
    4b58:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    4b5a:	b510      	push	{r4, lr}
    4b5c:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    4b5e:	6859      	ldr	r1, [r3, #4]
    4b60:	b901      	cbnz	r1, 4b64 <bt_conn_init+0x10>
	list->tail = node;
    4b62:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    4b64:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    4b66:	6092      	str	r2, [r2, #8]
	list->head = node;
    4b68:	4a0f      	ldr	r2, [pc, #60]	; (4ba8 <bt_conn_init+0x54>)
    4b6a:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4b6c:	b901      	cbnz	r1, 4b70 <bt_conn_init+0x1c>
	list->tail = node;
    4b6e:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    4b70:	f001 fb54 	bl	621c <bt_att_init>

	err = bt_smp_init();
    4b74:	f002 f86a 	bl	6c4c <bt_smp_init>
	if (err) {
    4b78:	4604      	mov	r4, r0
    4b7a:	b970      	cbnz	r0, 4b9a <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    4b7c:	f000 fa88 	bl	5090 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    4b80:	480a      	ldr	r0, [pc, #40]	; (4bac <bt_conn_init+0x58>)
    4b82:	f7ff f821 	bl	3bc8 <atomic_get>
    4b86:	b140      	cbz	r0, 4b9a <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4b88:	4809      	ldr	r0, [pc, #36]	; (4bb0 <bt_conn_init+0x5c>)
    4b8a:	f7ff f81d 	bl	3bc8 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    4b8e:	07c3      	lsls	r3, r0, #31
    4b90:	d503      	bpl.n	4b9a <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4b92:	2101      	movs	r1, #1
    4b94:	4807      	ldr	r0, [pc, #28]	; (4bb4 <bt_conn_init+0x60>)
    4b96:	f7ff fc3d 	bl	4414 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    4b9a:	4620      	mov	r0, r4
    4b9c:	bd10      	pop	{r4, pc}
    4b9e:	bf00      	nop
    4ba0:	20000400 	.word	0x20000400
    4ba4:	20000350 	.word	0x20000350
    4ba8:	20000358 	.word	0x20000358
    4bac:	200003a8 	.word	0x200003a8
    4bb0:	20000364 	.word	0x20000364
    4bb4:	20000360 	.word	0x20000360

00004bb8 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    4bb8:	4770      	bx	lr
	...

00004bbc <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4bbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    4bbe:	4a0b      	ldr	r2, [pc, #44]	; (4bec <l2cap_accept+0x30>)
    4bc0:	6813      	ldr	r3, [r2, #0]
    4bc2:	b92b      	cbnz	r3, 4bd0 <l2cap_accept+0x14>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    4bc4:	480a      	ldr	r0, [pc, #40]	; (4bf0 <l2cap_accept+0x34>)
    4bc6:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    4bc8:	600a      	str	r2, [r1, #0]

		return 0;
    4bca:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    4bcc:	b004      	add	sp, #16
    4bce:	bd10      	pop	{r4, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    4bd0:	4a08      	ldr	r2, [pc, #32]	; (4bf4 <l2cap_accept+0x38>)
    4bd2:	4b09      	ldr	r3, [pc, #36]	; (4bf8 <l2cap_accept+0x3c>)
    4bd4:	9001      	str	r0, [sp, #4]
    4bd6:	9202      	str	r2, [sp, #8]
    4bd8:	9200      	str	r2, [sp, #0]
    4bda:	681c      	ldr	r4, [r3, #0]
    4bdc:	4807      	ldr	r0, [pc, #28]	; (4bfc <l2cap_accept+0x40>)
    4bde:	4b08      	ldr	r3, [pc, #32]	; (4c00 <l2cap_accept+0x44>)
    4be0:	4908      	ldr	r1, [pc, #32]	; (4c04 <l2cap_accept+0x48>)
    4be2:	47a0      	blx	r4
	return -ENOMEM;
    4be4:	f06f 000b 	mvn.w	r0, #11
    4be8:	e7f0      	b.n	4bcc <l2cap_accept+0x10>
    4bea:	bf00      	nop
    4bec:	20000408 	.word	0x20000408
    4bf0:	20003c24 	.word	0x20003c24
    4bf4:	000159e9 	.word	0x000159e9
    4bf8:	20003ad4 	.word	0x20003ad4
    4bfc:	00017045 	.word	0x00017045
    4c00:	00016fd6 	.word	0x00016fd6
    4c04:	00016791 	.word	0x00016791

00004c08 <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c0a:	4607      	mov	r7, r0
    4c0c:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4c0e:	2000      	movs	r0, #0
    4c10:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4c12:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4c14:	f7ff fe9e 	bl	4954 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    4c18:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4c1a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    4c1c:	3008      	adds	r0, #8
    4c1e:	f00f f83f 	bl	13ca0 <net_buf_simple_add>
	hdr->code = code;
    4c22:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    4c24:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    4c26:	8045      	strh	r5, [r0, #2]
}
    4c28:	4620      	mov	r0, r4
    4c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004c2c <l2cap_connected>:
    4c2c:	4770      	bx	lr
	...

00004c30 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    4c30:	2300      	movs	r3, #0
    4c32:	6083      	str	r3, [r0, #8]
    4c34:	4b05      	ldr	r3, [pc, #20]	; (4c4c <bt_l2cap_le_fixed_chan_register+0x1c>)
    4c36:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    4c38:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    4c3c:	b911      	cbnz	r1, 4c44 <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    4c3e:	605a      	str	r2, [r3, #4]
	list->head = node;
    4c40:	601a      	str	r2, [r3, #0]
    4c42:	4770      	bx	lr
	parent->next = child;
    4c44:	600a      	str	r2, [r1, #0]
	list->tail = node;
    4c46:	605a      	str	r2, [r3, #4]
    4c48:	4770      	bx	lr
    4c4a:	bf00      	nop
    4c4c:	200004ac 	.word	0x200004ac

00004c50 <bt_l2cap_chan_remove>:
{
    4c50:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4c52:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4c54:	b113      	cbz	r3, 4c5c <bt_l2cap_chan_remove+0xc>
    4c56:	3b08      	subs	r3, #8
    4c58:	2200      	movs	r2, #0
    4c5a:	b903      	cbnz	r3, 4c5e <bt_l2cap_chan_remove+0xe>
    4c5c:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    4c5e:	428b      	cmp	r3, r1
    4c60:	f103 0408 	add.w	r4, r3, #8
    4c64:	d10f      	bne.n	4c86 <bt_l2cap_chan_remove+0x36>
    4c66:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    4c68:	b93a      	cbnz	r2, 4c7a <bt_l2cap_chan_remove+0x2a>
    4c6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
	list->head = node;
    4c6c:	6401      	str	r1, [r0, #64]	; 0x40
Z_GENLIST_REMOVE(slist, snode);
    4c6e:	4294      	cmp	r4, r2
    4c70:	d100      	bne.n	4c74 <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    4c72:	6441      	str	r1, [r0, #68]	; 0x44
	parent->next = child;
    4c74:	2200      	movs	r2, #0
    4c76:	609a      	str	r2, [r3, #8]
    4c78:	bd10      	pop	{r4, pc}
    4c7a:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    4c7c:	6c41      	ldr	r1, [r0, #68]	; 0x44
    4c7e:	428c      	cmp	r4, r1
	list->tail = node;
    4c80:	bf08      	it	eq
    4c82:	6442      	streq	r2, [r0, #68]	; 0x44
    4c84:	e7f6      	b.n	4c74 <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    4c86:	4622      	mov	r2, r4
    4c88:	2c00      	cmp	r4, #0
    4c8a:	d0e7      	beq.n	4c5c <bt_l2cap_chan_remove+0xc>
	return node->next;
    4c8c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4c8e:	2b00      	cmp	r3, #0
    4c90:	d0e4      	beq.n	4c5c <bt_l2cap_chan_remove+0xc>
    4c92:	3b08      	subs	r3, #8
    4c94:	e7e1      	b.n	4c5a <bt_l2cap_chan_remove+0xa>

00004c96 <bt_l2cap_chan_del>:
	if (!chan->conn) {
    4c96:	6803      	ldr	r3, [r0, #0]
{
    4c98:	b510      	push	{r4, lr}
    4c9a:	4604      	mov	r4, r0
	if (!chan->conn) {
    4c9c:	b12b      	cbz	r3, 4caa <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    4c9e:	6843      	ldr	r3, [r0, #4]
    4ca0:	685b      	ldr	r3, [r3, #4]
    4ca2:	b103      	cbz	r3, 4ca6 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    4ca4:	4798      	blx	r3
	chan->conn = NULL;
    4ca6:	2300      	movs	r3, #0
    4ca8:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    4caa:	68e3      	ldr	r3, [r4, #12]
    4cac:	b11b      	cbz	r3, 4cb6 <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    4cae:	4620      	mov	r0, r4
}
    4cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    4cb4:	4718      	bx	r3
    4cb6:	bd10      	pop	{r4, pc}

00004cb8 <l2cap_rtx_timeout>:
{
    4cb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_ERR("chan %p timeout", chan);
    4cba:	4a0c      	ldr	r2, [pc, #48]	; (4cec <l2cap_rtx_timeout+0x34>)
    4cbc:	4b0c      	ldr	r3, [pc, #48]	; (4cf0 <l2cap_rtx_timeout+0x38>)
    4cbe:	9202      	str	r2, [sp, #8]
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    4cc0:	f1a0 0410 	sub.w	r4, r0, #16
	BT_ERR("chan %p timeout", chan);
    4cc4:	e88d 0014 	stmia.w	sp, {r2, r4}
{
    4cc8:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    4cca:	681e      	ldr	r6, [r3, #0]
    4ccc:	4909      	ldr	r1, [pc, #36]	; (4cf4 <l2cap_rtx_timeout+0x3c>)
    4cce:	4b0a      	ldr	r3, [pc, #40]	; (4cf8 <l2cap_rtx_timeout+0x40>)
    4cd0:	480a      	ldr	r0, [pc, #40]	; (4cfc <l2cap_rtx_timeout+0x44>)
    4cd2:	47b0      	blx	r6
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    4cd4:	f855 0c10 	ldr.w	r0, [r5, #-16]
    4cd8:	4621      	mov	r1, r4
    4cda:	f7ff ffb9 	bl	4c50 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    4cde:	4620      	mov	r0, r4
}
    4ce0:	b004      	add	sp, #16
    4ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_chan_del(&chan->chan);
    4ce6:	f7ff bfd6 	b.w	4c96 <bt_l2cap_chan_del>
    4cea:	bf00      	nop
    4cec:	000159e9 	.word	0x000159e9
    4cf0:	20003ad4 	.word	0x20003ad4
    4cf4:	00016791 	.word	0x00016791
    4cf8:	00016f80 	.word	0x00016f80
    4cfc:	00017199 	.word	0x00017199

00004d00 <bt_l2cap_connected>:
{
    4d00:	4b1a      	ldr	r3, [pc, #104]	; (4d6c <bt_l2cap_connected+0x6c>)
    4d02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4d06:	681c      	ldr	r4, [r3, #0]
    4d08:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4d0a:	b12c      	cbz	r4, 4d18 <bt_l2cap_connected+0x18>
	parent->next = child;
    4d0c:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4d0e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4d70 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4d12:	3c08      	subs	r4, #8
    4d14:	46b9      	mov	r9, r7
    4d16:	b914      	cbnz	r4, 4d1e <bt_l2cap_connected+0x1e>
}
    4d18:	b003      	add	sp, #12
    4d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    4d1e:	6863      	ldr	r3, [r4, #4]
    4d20:	a901      	add	r1, sp, #4
    4d22:	4630      	mov	r0, r6
    4d24:	4798      	blx	r3
    4d26:	2800      	cmp	r0, #0
    4d28:	db18      	blt.n	4d5c <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    4d2a:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    4d2c:	8823      	ldrh	r3, [r4, #0]
    4d2e:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    4d30:	f8a5 305c 	strh.w	r3, [r5, #92]	; 0x5c
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4d34:	4641      	mov	r1, r8
    4d36:	f105 0010 	add.w	r0, r5, #16
    4d3a:	f010 fb73 	bl	15424 <k_delayed_work_init>
    4d3e:	60af      	str	r7, [r5, #8]
    4d40:	6c72      	ldr	r2, [r6, #68]	; 0x44
	sys_slist_append(&conn->channels, &chan->node);
    4d42:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    4d46:	b972      	cbnz	r2, 4d66 <bt_l2cap_connected+0x66>
	list->tail = node;
    4d48:	6473      	str	r3, [r6, #68]	; 0x44
	list->head = node;
    4d4a:	6433      	str	r3, [r6, #64]	; 0x40
		if (chan->ops->connected) {
    4d4c:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    4d4e:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    4d50:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    4d52:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    4d56:	681b      	ldr	r3, [r3, #0]
    4d58:	b103      	cbz	r3, 4d5c <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    4d5a:	4798      	blx	r3
	return node->next;
    4d5c:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4d5e:	2c00      	cmp	r4, #0
    4d60:	d0da      	beq.n	4d18 <bt_l2cap_connected+0x18>
    4d62:	3c08      	subs	r4, #8
    4d64:	e7d7      	b.n	4d16 <bt_l2cap_connected+0x16>
	parent->next = child;
    4d66:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4d68:	6473      	str	r3, [r6, #68]	; 0x44
    4d6a:	e7ef      	b.n	4d4c <bt_l2cap_connected+0x4c>
    4d6c:	200004ac 	.word	0x200004ac
    4d70:	00004cb9 	.word	0x00004cb9

00004d74 <bt_l2cap_disconnected>:
{
    4d74:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4d76:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4d78:	b1a3      	cbz	r3, 4da4 <bt_l2cap_disconnected+0x30>
    4d7a:	f1b3 0008 	subs.w	r0, r3, #8
    4d7e:	d10a      	bne.n	4d96 <bt_l2cap_disconnected+0x22>
    4d80:	bd10      	pop	{r4, pc}
    4d82:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    4d84:	f7ff ff87 	bl	4c96 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4d88:	b164      	cbz	r4, 4da4 <bt_l2cap_disconnected+0x30>
	return node->next;
    4d8a:	68a3      	ldr	r3, [r4, #8]
    4d8c:	b103      	cbz	r3, 4d90 <bt_l2cap_disconnected+0x1c>
    4d8e:	3b08      	subs	r3, #8
{
    4d90:	4620      	mov	r0, r4
    4d92:	461c      	mov	r4, r3
    4d94:	e7f6      	b.n	4d84 <bt_l2cap_disconnected+0x10>
    4d96:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4d98:	2c00      	cmp	r4, #0
    4d9a:	d1f2      	bne.n	4d82 <bt_l2cap_disconnected+0xe>
}
    4d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    4da0:	f7ff bf79 	b.w	4c96 <bt_l2cap_chan_del>
    4da4:	bd10      	pop	{r4, pc}

00004da6 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4da6:	3104      	adds	r1, #4
    4da8:	f7ff bdd4 	b.w	4954 <bt_conn_create_pdu>

00004dac <bt_l2cap_send_cb>:
{
    4dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dae:	4614      	mov	r4, r2
    4db0:	4605      	mov	r5, r0
    4db2:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    4db4:	f102 0008 	add.w	r0, r2, #8
    4db8:	2104      	movs	r1, #4
{
    4dba:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    4dbc:	f00e ff87 	bl	13cce <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4dc0:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    4dc2:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4dc4:	3904      	subs	r1, #4
    4dc6:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    4dc8:	4632      	mov	r2, r6
    4dca:	4621      	mov	r1, r4
    4dcc:	4628      	mov	r0, r5
}
    4dce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    4dd2:	f7ff b851 	b.w	3e78 <bt_conn_send_cb>
	...

00004dd8 <l2cap_recv>:
{
    4dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    4dda:	898b      	ldrh	r3, [r1, #12]
    4ddc:	2b03      	cmp	r3, #3
{
    4dde:	b087      	sub	sp, #28
    4de0:	4607      	mov	r7, r0
    4de2:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    4de4:	d809      	bhi.n	4dfa <l2cap_recv+0x22>
		BT_ERR("Too small L2CAP signaling PDU");
    4de6:	4a5b      	ldr	r2, [pc, #364]	; (4f54 <l2cap_recv+0x17c>)
    4de8:	4b5b      	ldr	r3, [pc, #364]	; (4f58 <l2cap_recv+0x180>)
    4dea:	9201      	str	r2, [sp, #4]
    4dec:	9200      	str	r2, [sp, #0]
    4dee:	681c      	ldr	r4, [r3, #0]
    4df0:	495a      	ldr	r1, [pc, #360]	; (4f5c <l2cap_recv+0x184>)
    4df2:	4b5b      	ldr	r3, [pc, #364]	; (4f60 <l2cap_recv+0x188>)
    4df4:	485b      	ldr	r0, [pc, #364]	; (4f64 <l2cap_recv+0x18c>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    4df6:	47a0      	blx	r4
		return;
    4df8:	e013      	b.n	4e22 <l2cap_recv+0x4a>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4dfa:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4dfc:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4dfe:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    4e02:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4e04:	f00e ff6b 	bl	13cde <net_buf_simple_pull>
	if (buf->len != len) {
    4e08:	89ab      	ldrh	r3, [r5, #12]
    4e0a:	429e      	cmp	r6, r3
    4e0c:	d00b      	beq.n	4e26 <l2cap_recv+0x4e>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    4e0e:	4a51      	ldr	r2, [pc, #324]	; (4f54 <l2cap_recv+0x17c>)
    4e10:	9203      	str	r2, [sp, #12]
    4e12:	e88d 004c 	stmia.w	sp, {r2, r3, r6}
    4e16:	4b50      	ldr	r3, [pc, #320]	; (4f58 <l2cap_recv+0x180>)
    4e18:	4950      	ldr	r1, [pc, #320]	; (4f5c <l2cap_recv+0x184>)
    4e1a:	681c      	ldr	r4, [r3, #0]
    4e1c:	4852      	ldr	r0, [pc, #328]	; (4f68 <l2cap_recv+0x190>)
    4e1e:	4b50      	ldr	r3, [pc, #320]	; (4f60 <l2cap_recv+0x188>)
    4e20:	47a0      	blx	r4
}
    4e22:	b007      	add	sp, #28
    4e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    4e26:	7861      	ldrb	r1, [r4, #1]
    4e28:	b941      	cbnz	r1, 4e3c <l2cap_recv+0x64>
		BT_ERR("Invalid ident value in L2CAP PDU");
    4e2a:	4a4a      	ldr	r2, [pc, #296]	; (4f54 <l2cap_recv+0x17c>)
    4e2c:	4b4a      	ldr	r3, [pc, #296]	; (4f58 <l2cap_recv+0x180>)
    4e2e:	9201      	str	r2, [sp, #4]
    4e30:	9200      	str	r2, [sp, #0]
    4e32:	681c      	ldr	r4, [r3, #0]
    4e34:	4949      	ldr	r1, [pc, #292]	; (4f5c <l2cap_recv+0x184>)
    4e36:	4b4a      	ldr	r3, [pc, #296]	; (4f60 <l2cap_recv+0x188>)
    4e38:	484c      	ldr	r0, [pc, #304]	; (4f6c <l2cap_recv+0x194>)
    4e3a:	e7dc      	b.n	4df6 <l2cap_recv+0x1e>
	switch (hdr->code) {
    4e3c:	7823      	ldrb	r3, [r4, #0]
    4e3e:	2b12      	cmp	r3, #18
    4e40:	d02a      	beq.n	4e98 <l2cap_recv+0xc0>
    4e42:	2b13      	cmp	r3, #19
    4e44:	d01d      	beq.n	4e82 <l2cap_recv+0xaa>
    4e46:	2b01      	cmp	r3, #1
    4e48:	d0eb      	beq.n	4e22 <l2cap_recv+0x4a>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    4e4a:	4a42      	ldr	r2, [pc, #264]	; (4f54 <l2cap_recv+0x17c>)
    4e4c:	9202      	str	r2, [sp, #8]
    4e4e:	e88d 000c 	stmia.w	sp, {r2, r3}
    4e52:	4b41      	ldr	r3, [pc, #260]	; (4f58 <l2cap_recv+0x180>)
    4e54:	4941      	ldr	r1, [pc, #260]	; (4f5c <l2cap_recv+0x184>)
    4e56:	681d      	ldr	r5, [r3, #0]
    4e58:	4845      	ldr	r0, [pc, #276]	; (4f70 <l2cap_recv+0x198>)
    4e5a:	4b41      	ldr	r3, [pc, #260]	; (4f60 <l2cap_recv+0x188>)
    4e5c:	47a8      	blx	r5
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4e5e:	2202      	movs	r2, #2
    4e60:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    4e62:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4e64:	2001      	movs	r0, #1
    4e66:	f7ff fecf 	bl	4c08 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4e6a:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4e6c:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4e6e:	3008      	adds	r0, #8
    4e70:	f00e ff16 	bl	13ca0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4e74:	2300      	movs	r3, #0
    4e76:	7003      	strb	r3, [r0, #0]
    4e78:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    4e7a:	4622      	mov	r2, r4
    4e7c:	2105      	movs	r1, #5
    4e7e:	4628      	mov	r0, r5
    4e80:	e027      	b.n	4ed2 <l2cap_recv+0xfa>
	if (buf->len < sizeof(*rsp)) {
    4e82:	2e01      	cmp	r6, #1
    4e84:	d8cd      	bhi.n	4e22 <l2cap_recv+0x4a>
		BT_ERR("Too small LE conn param rsp");
    4e86:	4a33      	ldr	r2, [pc, #204]	; (4f54 <l2cap_recv+0x17c>)
    4e88:	4b33      	ldr	r3, [pc, #204]	; (4f58 <l2cap_recv+0x180>)
    4e8a:	9201      	str	r2, [sp, #4]
    4e8c:	9200      	str	r2, [sp, #0]
    4e8e:	681c      	ldr	r4, [r3, #0]
    4e90:	4932      	ldr	r1, [pc, #200]	; (4f5c <l2cap_recv+0x184>)
    4e92:	4b38      	ldr	r3, [pc, #224]	; (4f74 <l2cap_recv+0x19c>)
    4e94:	4838      	ldr	r0, [pc, #224]	; (4f78 <l2cap_recv+0x1a0>)
    4e96:	e7ae      	b.n	4df6 <l2cap_recv+0x1e>
	if (buf->len < sizeof(*req)) {
    4e98:	2e07      	cmp	r6, #7
    4e9a:	d808      	bhi.n	4eae <l2cap_recv+0xd6>
		BT_ERR("Too small LE conn update param req");
    4e9c:	4a2d      	ldr	r2, [pc, #180]	; (4f54 <l2cap_recv+0x17c>)
    4e9e:	4b2e      	ldr	r3, [pc, #184]	; (4f58 <l2cap_recv+0x180>)
    4ea0:	9201      	str	r2, [sp, #4]
    4ea2:	9200      	str	r2, [sp, #0]
    4ea4:	681c      	ldr	r4, [r3, #0]
    4ea6:	492d      	ldr	r1, [pc, #180]	; (4f5c <l2cap_recv+0x184>)
    4ea8:	4b34      	ldr	r3, [pc, #208]	; (4f7c <l2cap_recv+0x1a4>)
    4eaa:	4835      	ldr	r0, [pc, #212]	; (4f80 <l2cap_recv+0x1a8>)
    4eac:	e7a3      	b.n	4df6 <l2cap_recv+0x1e>
    4eae:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    4eb0:	78e6      	ldrb	r6, [r4, #3]
    4eb2:	b18e      	cbz	r6, 4ed8 <l2cap_recv+0x100>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4eb4:	2202      	movs	r2, #2
    4eb6:	2001      	movs	r0, #1
    4eb8:	f7ff fea6 	bl	4c08 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4ebc:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4ebe:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4ec0:	3008      	adds	r0, #8
    4ec2:	f00e feed 	bl	13ca0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4ec6:	2300      	movs	r3, #0
    4ec8:	7003      	strb	r3, [r0, #0]
    4eca:	7043      	strb	r3, [r0, #1]
    4ecc:	462a      	mov	r2, r5
    4ece:	2105      	movs	r1, #5
    4ed0:	4620      	mov	r0, r4
    4ed2:	f7ff ff6b 	bl	4dac <bt_l2cap_send_cb>
    4ed6:	e7a4      	b.n	4e22 <l2cap_recv+0x4a>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    4ed8:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    4eda:	7858      	ldrb	r0, [r3, #1]
    4edc:	781a      	ldrb	r2, [r3, #0]
    4ede:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4ee2:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    4ee6:	78d8      	ldrb	r0, [r3, #3]
    4ee8:	789a      	ldrb	r2, [r3, #2]
    4eea:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4eee:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    4ef2:	7958      	ldrb	r0, [r3, #5]
    4ef4:	791a      	ldrb	r2, [r3, #4]
    4ef6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4efa:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    4efe:	799a      	ldrb	r2, [r3, #6]
    4f00:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4f02:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    4f04:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4f08:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    4f0a:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4f0e:	f7ff fe7b 	bl	4c08 <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    4f12:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4f14:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    4f16:	4620      	mov	r0, r4
    4f18:	f7fe fe80 	bl	3c1c <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    4f1c:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    4f1e:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    4f20:	f107 0008 	add.w	r0, r7, #8
    4f24:	f00e febc 	bl	13ca0 <net_buf_simple_add>
	if (accepted) {
    4f28:	b17d      	cbz	r5, 4f4a <l2cap_recv+0x172>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    4f2a:	7006      	strb	r6, [r0, #0]
    4f2c:	7046      	strb	r6, [r0, #1]
    4f2e:	2300      	movs	r3, #0
    4f30:	463a      	mov	r2, r7
    4f32:	2105      	movs	r1, #5
    4f34:	4620      	mov	r0, r4
    4f36:	f7ff ff39 	bl	4dac <bt_l2cap_send_cb>
	if (accepted) {
    4f3a:	2d00      	cmp	r5, #0
    4f3c:	f43f af71 	beq.w	4e22 <l2cap_recv+0x4a>
		bt_conn_le_conn_update(conn, &param);
    4f40:	a904      	add	r1, sp, #16
    4f42:	4620      	mov	r0, r4
    4f44:	f7ff fc61 	bl	480a <bt_conn_le_conn_update>
    4f48:	e76b      	b.n	4e22 <l2cap_recv+0x4a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    4f4a:	2301      	movs	r3, #1
    4f4c:	7003      	strb	r3, [r0, #0]
    4f4e:	7045      	strb	r5, [r0, #1]
    4f50:	e7ed      	b.n	4f2e <l2cap_recv+0x156>
    4f52:	bf00      	nop
    4f54:	000159e9 	.word	0x000159e9
    4f58:	20003ad4 	.word	0x20003ad4
    4f5c:	00016791 	.word	0x00016791
    4f60:	00016fbd 	.word	0x00016fbd
    4f64:	0001707c 	.word	0x0001707c
    4f68:	000170aa 	.word	0x000170aa
    4f6c:	000170db 	.word	0x000170db
    4f70:	0001716b 	.word	0x0001716b
    4f74:	00016f92 	.word	0x00016f92
    4f78:	0001710c 	.word	0x0001710c
    4f7c:	00016fa4 	.word	0x00016fa4
    4f80:	00017138 	.word	0x00017138

00004f84 <bt_l2cap_le_lookup_tx_cid>:
{
    4f84:	6c00      	ldr	r0, [r0, #64]	; 0x40
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4f86:	b100      	cbz	r0, 4f8a <bt_l2cap_le_lookup_tx_cid+0x6>
    4f88:	3808      	subs	r0, #8
    4f8a:	b900      	cbnz	r0, 4f8e <bt_l2cap_le_lookup_tx_cid+0xa>
}
    4f8c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    4f8e:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
    4f92:	428b      	cmp	r3, r1
    4f94:	d0fa      	beq.n	4f8c <bt_l2cap_le_lookup_tx_cid+0x8>
    4f96:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4f98:	2000      	movs	r0, #0
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	d0f6      	beq.n	4f8c <bt_l2cap_le_lookup_tx_cid+0x8>
    4f9e:	f1a3 0008 	sub.w	r0, r3, #8
    4fa2:	e7f2      	b.n	4f8a <bt_l2cap_le_lookup_tx_cid+0x6>

00004fa4 <bt_l2cap_le_lookup_rx_cid>:
{
    4fa4:	6c00      	ldr	r0, [r0, #64]	; 0x40
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4fa6:	b100      	cbz	r0, 4faa <bt_l2cap_le_lookup_rx_cid+0x6>
    4fa8:	3808      	subs	r0, #8
    4faa:	b900      	cbnz	r0, 4fae <bt_l2cap_le_lookup_rx_cid+0xa>
}
    4fac:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    4fae:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    4fb0:	428b      	cmp	r3, r1
    4fb2:	d0fb      	beq.n	4fac <bt_l2cap_le_lookup_rx_cid+0x8>
    4fb4:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4fb6:	2000      	movs	r0, #0
    4fb8:	2b00      	cmp	r3, #0
    4fba:	d0f7      	beq.n	4fac <bt_l2cap_le_lookup_rx_cid+0x8>
    4fbc:	f1a3 0008 	sub.w	r0, r3, #8
    4fc0:	e7f3      	b.n	4faa <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00004fc4 <bt_l2cap_recv>:
{
    4fc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    4fc6:	898b      	ldrh	r3, [r1, #12]
    4fc8:	2b03      	cmp	r3, #3
{
    4fca:	4606      	mov	r6, r0
    4fcc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    4fce:	d80e      	bhi.n	4fee <bt_l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP PDU received");
    4fd0:	4a15      	ldr	r2, [pc, #84]	; (5028 <bt_l2cap_recv+0x64>)
    4fd2:	4b16      	ldr	r3, [pc, #88]	; (502c <bt_l2cap_recv+0x68>)
    4fd4:	9201      	str	r2, [sp, #4]
    4fd6:	9200      	str	r2, [sp, #0]
    4fd8:	681d      	ldr	r5, [r3, #0]
    4fda:	4915      	ldr	r1, [pc, #84]	; (5030 <bt_l2cap_recv+0x6c>)
    4fdc:	4b15      	ldr	r3, [pc, #84]	; (5034 <bt_l2cap_recv+0x70>)
    4fde:	4816      	ldr	r0, [pc, #88]	; (5038 <bt_l2cap_recv+0x74>)
    4fe0:	47a8      	blx	r5
	net_buf_unref(buf);
    4fe2:	4620      	mov	r0, r4
}
    4fe4:	b004      	add	sp, #16
    4fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    4fea:	f00e be21 	b.w	13c30 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    4fee:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4ff0:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    4ff2:	f850 3f08 	ldr.w	r3, [r0, #8]!
    4ff6:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4ff8:	f00e fe71 	bl	13cde <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    4ffc:	4629      	mov	r1, r5
    4ffe:	4630      	mov	r0, r6
    5000:	f7ff ffd0 	bl	4fa4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    5004:	b950      	cbnz	r0, 501c <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    5006:	4a08      	ldr	r2, [pc, #32]	; (5028 <bt_l2cap_recv+0x64>)
    5008:	4b08      	ldr	r3, [pc, #32]	; (502c <bt_l2cap_recv+0x68>)
    500a:	9202      	str	r2, [sp, #8]
    500c:	e88d 0024 	stmia.w	sp, {r2, r5}
    5010:	4907      	ldr	r1, [pc, #28]	; (5030 <bt_l2cap_recv+0x6c>)
    5012:	681d      	ldr	r5, [r3, #0]
    5014:	4809      	ldr	r0, [pc, #36]	; (503c <bt_l2cap_recv+0x78>)
    5016:	4b07      	ldr	r3, [pc, #28]	; (5034 <bt_l2cap_recv+0x70>)
    5018:	47a8      	blx	r5
    501a:	e7e2      	b.n	4fe2 <bt_l2cap_recv+0x1e>
	chan->ops->recv(chan, buf);
    501c:	6843      	ldr	r3, [r0, #4]
    501e:	4621      	mov	r1, r4
    5020:	691b      	ldr	r3, [r3, #16]
    5022:	4798      	blx	r3
    5024:	e7dd      	b.n	4fe2 <bt_l2cap_recv+0x1e>
    5026:	bf00      	nop
    5028:	000159e9 	.word	0x000159e9
    502c:	20003ad4 	.word	0x20003ad4
    5030:	00016791 	.word	0x00016791
    5034:	00016fc8 	.word	0x00016fc8
    5038:	00016fe3 	.word	0x00016fe3
    503c:	00017010 	.word	0x00017010

00005040 <bt_l2cap_update_conn_param>:
{
    5040:	b570      	push	{r4, r5, r6, lr}
	ident++;
    5042:	4b12      	ldr	r3, [pc, #72]	; (508c <bt_l2cap_update_conn_param+0x4c>)
    5044:	781a      	ldrb	r2, [r3, #0]
    5046:	3201      	adds	r2, #1
	if (!ident) {
    5048:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    504c:	bf08      	it	eq
    504e:	2201      	moveq	r2, #1
    5050:	701a      	strb	r2, [r3, #0]
{
    5052:	460c      	mov	r4, r1
    5054:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    5056:	7819      	ldrb	r1, [r3, #0]
    5058:	2208      	movs	r2, #8
    505a:	2012      	movs	r0, #18
    505c:	f7ff fdd4 	bl	4c08 <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    5060:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    5062:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    5064:	4408      	add	r0, r1
    5066:	f00e fe1b 	bl	13ca0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    506a:	8823      	ldrh	r3, [r4, #0]
    506c:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    506e:	8863      	ldrh	r3, [r4, #2]
    5070:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    5072:	88a3      	ldrh	r3, [r4, #4]
    5074:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    5076:	88e3      	ldrh	r3, [r4, #6]
    5078:	80c3      	strh	r3, [r0, #6]
    507a:	4632      	mov	r2, r6
    507c:	4628      	mov	r0, r5
    507e:	2300      	movs	r3, #0
    5080:	2105      	movs	r1, #5
    5082:	f7ff fe93 	bl	4dac <bt_l2cap_send_cb>
}
    5086:	2000      	movs	r0, #0
    5088:	bd70      	pop	{r4, r5, r6, pc}
    508a:	bf00      	nop
    508c:	200004a8 	.word	0x200004a8

00005090 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    5090:	4801      	ldr	r0, [pc, #4]	; (5098 <bt_l2cap_init+0x8>)
    5092:	f7ff bdcd 	b.w	4c30 <bt_l2cap_le_fixed_chan_register>
    5096:	bf00      	nop
    5098:	20003c18 	.word	0x20003c18

0000509c <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    509c:	2006      	movs	r0, #6
    509e:	4770      	bx	lr

000050a0 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    50a0:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    50a2:	4a0a      	ldr	r2, [pc, #40]	; (50cc <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    50a4:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    50a6:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    50aa:	4284      	cmp	r4, r0
    50ac:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    50b0:	d102      	bne.n	50b8 <att_op_get_type+0x18>
			return handlers[i].type;
    50b2:	440a      	add	r2, r1
    50b4:	7890      	ldrb	r0, [r2, #2]
    50b6:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    50b8:	3301      	adds	r3, #1
    50ba:	2b1b      	cmp	r3, #27
    50bc:	d1f3      	bne.n	50a6 <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    50be:	f010 0f40 	tst.w	r0, #64	; 0x40
    50c2:	bf14      	ite	ne
    50c4:	2000      	movne	r0, #0
    50c6:	2006      	moveq	r0, #6
}
    50c8:	bd10      	pop	{r4, pc}
    50ca:	bf00      	nop
    50cc:	00017490 	.word	0x00017490

000050d0 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    50d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    50d2:	4d11      	ldr	r5, [pc, #68]	; (5118 <bt_att_accept+0x48>)
    50d4:	682c      	ldr	r4, [r5, #0]
{
    50d6:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    50d8:	b984      	cbnz	r4, 50fc <bt_att_accept+0x2c>
			continue;
		}

		memset(att, 0, sizeof(*att));
    50da:	22f4      	movs	r2, #244	; 0xf4
    50dc:	4621      	mov	r1, r4
    50de:	4628      	mov	r0, r5
    50e0:	f7fc fdca 	bl	1c78 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    50e4:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    50e6:	4b0d      	ldr	r3, [pc, #52]	; (511c <bt_att_accept+0x4c>)
    50e8:	606b      	str	r3, [r5, #4]
    50ea:	f105 00d8 	add.w	r0, r5, #216	; 0xd8
    50ee:	4611      	mov	r1, r2
    50f0:	f00f fe84 	bl	14dfc <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    50f4:	6035      	str	r5, [r6, #0]

		return 0;
    50f6:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    50f8:	b004      	add	sp, #16
    50fa:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    50fc:	4a08      	ldr	r2, [pc, #32]	; (5120 <bt_att_accept+0x50>)
    50fe:	4b09      	ldr	r3, [pc, #36]	; (5124 <bt_att_accept+0x54>)
    5100:	9001      	str	r0, [sp, #4]
    5102:	9202      	str	r2, [sp, #8]
    5104:	9200      	str	r2, [sp, #0]
    5106:	681c      	ldr	r4, [r3, #0]
    5108:	4807      	ldr	r0, [pc, #28]	; (5128 <bt_att_accept+0x58>)
    510a:	4b08      	ldr	r3, [pc, #32]	; (512c <bt_att_accept+0x5c>)
    510c:	4908      	ldr	r1, [pc, #32]	; (5130 <bt_att_accept+0x60>)
    510e:	47a0      	blx	r4
	return -ENOMEM;
    5110:	f06f 000b 	mvn.w	r0, #11
    5114:	e7f0      	b.n	50f8 <bt_att_accept+0x28>
    5116:	bf00      	nop
    5118:	200004b4 	.word	0x200004b4
    511c:	20003c44 	.word	0x20003c44
    5120:	000159e9 	.word	0x000159e9
    5124:	20003ad4 	.word	0x20003ad4
    5128:	00017348 	.word	0x00017348
    512c:	00017238 	.word	0x00017238
    5130:	00016791 	.word	0x00016791

00005134 <att_req_destroy>:
{
    5134:	b510      	push	{r4, lr}
    5136:	4604      	mov	r4, r0
	if (req->buf) {
    5138:	6900      	ldr	r0, [r0, #16]
    513a:	b108      	cbz	r0, 5140 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    513c:	f00e fd78 	bl	13c30 <net_buf_unref>
	if (req->destroy) {
    5140:	68a3      	ldr	r3, [r4, #8]
    5142:	b10b      	cbz	r3, 5148 <att_req_destroy+0x14>
		req->destroy(req);
    5144:	4620      	mov	r0, r4
    5146:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    5148:	4620      	mov	r0, r4
    514a:	2214      	movs	r2, #20
    514c:	2100      	movs	r1, #0
}
    514e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    5152:	f7fc bd91 	b.w	1c78 <memset>

00005156 <att_notify>:
{
    5156:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    5158:	f101 0008 	add.w	r0, r1, #8
    515c:	f00e fdcf 	bl	13cfe <net_buf_simple_pull_le16>
}
    5160:	2000      	movs	r0, #0
    5162:	bd08      	pop	{r3, pc}

00005164 <read_group_cb>:
{
    5164:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5168:	680d      	ldr	r5, [r1, #0]
{
    516a:	4606      	mov	r6, r0
    516c:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    516e:	f04f 0800 	mov.w	r8, #0
    5172:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5176:	a902      	add	r1, sp, #8
    5178:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    517a:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    517c:	f88d 8008 	strb.w	r8, [sp, #8]
    5180:	f8ad 300a 	strh.w	r3, [sp, #10]
    5184:	f7fc feca 	bl	1f1c <bt_uuid_cmp>
    5188:	b198      	cbz	r0, 51b2 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    518a:	f642 0301 	movw	r3, #10241	; 0x2801
    518e:	a903      	add	r1, sp, #12
    5190:	6830      	ldr	r0, [r6, #0]
    5192:	f88d 800c 	strb.w	r8, [sp, #12]
    5196:	f8ad 300e 	strh.w	r3, [sp, #14]
    519a:	f7fc febf 	bl	1f1c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    519e:	b140      	cbz	r0, 51b2 <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    51a0:	6923      	ldr	r3, [r4, #16]
    51a2:	b123      	cbz	r3, 51ae <read_group_cb+0x4a>
    51a4:	8a32      	ldrh	r2, [r6, #16]
    51a6:	8859      	ldrh	r1, [r3, #2]
    51a8:	4291      	cmp	r1, r2
    51aa:	d200      	bcs.n	51ae <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    51ac:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    51ae:	2001      	movs	r0, #1
    51b0:	e012      	b.n	51d8 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    51b2:	6861      	ldr	r1, [r4, #4]
    51b4:	6830      	ldr	r0, [r6, #0]
    51b6:	f7fc feb1 	bl	1f1c <bt_uuid_cmp>
    51ba:	b110      	cbz	r0, 51c2 <read_group_cb+0x5e>
		data->group = NULL;
    51bc:	2300      	movs	r3, #0
    51be:	6123      	str	r3, [r4, #16]
    51c0:	e7f5      	b.n	51ae <read_group_cb+0x4a>
	if (data->rsp->len &&
    51c2:	68e3      	ldr	r3, [r4, #12]
    51c4:	68a0      	ldr	r0, [r4, #8]
    51c6:	781a      	ldrb	r2, [r3, #0]
    51c8:	b14a      	cbz	r2, 51de <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    51ca:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
    51ce:	8981      	ldrh	r1, [r0, #12]
    51d0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    51d2:	4293      	cmp	r3, r2
    51d4:	da03      	bge.n	51de <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    51d6:	2000      	movs	r0, #0
}
    51d8:	b004      	add	sp, #16
    51da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    51de:	2104      	movs	r1, #4
    51e0:	3008      	adds	r0, #8
    51e2:	f00e fd5d 	bl	13ca0 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    51e6:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    51e8:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    51ea:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    51ec:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    51ee:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    51f0:	898a      	ldrh	r2, [r1, #12]
    51f2:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
    51f6:	6889      	ldr	r1, [r1, #8]
    51f8:	f8d6 8004 	ldr.w	r8, [r6, #4]
    51fc:	1a9b      	subs	r3, r3, r2
    51fe:	2500      	movs	r5, #0
    5200:	440a      	add	r2, r1
    5202:	9500      	str	r5, [sp, #0]
    5204:	4631      	mov	r1, r6
    5206:	b29b      	uxth	r3, r3
    5208:	4638      	mov	r0, r7
    520a:	47c0      	blx	r8
	if (read < 0) {
    520c:	1e01      	subs	r1, r0, #0
    520e:	dbe2      	blt.n	51d6 <read_group_cb+0x72>
	if (!data->rsp->len) {
    5210:	68e0      	ldr	r0, [r4, #12]
    5212:	7802      	ldrb	r2, [r0, #0]
    5214:	1d0b      	adds	r3, r1, #4
    5216:	b92a      	cbnz	r2, 5224 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    5218:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    521a:	68a0      	ldr	r0, [r4, #8]
    521c:	3008      	adds	r0, #8
    521e:	f00e fd3f 	bl	13ca0 <net_buf_simple_add>
    5222:	e7c4      	b.n	51ae <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    5224:	429a      	cmp	r2, r3
    5226:	d0f8      	beq.n	521a <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    5228:	68a2      	ldr	r2, [r4, #8]
    522a:	8993      	ldrh	r3, [r2, #12]
    522c:	3b04      	subs	r3, #4
    522e:	8193      	strh	r3, [r2, #12]
    5230:	e7d1      	b.n	51d6 <read_group_cb+0x72>

00005232 <find_info_cb>:
	if (!data->rsp) {
    5232:	688b      	ldr	r3, [r1, #8]
{
    5234:	b570      	push	{r4, r5, r6, lr}
    5236:	4605      	mov	r5, r0
    5238:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    523a:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    523c:	b963      	cbnz	r3, 5258 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    523e:	6848      	ldr	r0, [r1, #4]
    5240:	2101      	movs	r1, #1
    5242:	3008      	adds	r0, #8
    5244:	f00e fd2c 	bl	13ca0 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5248:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    524a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    524c:	781b      	ldrb	r3, [r3, #0]
    524e:	2b00      	cmp	r3, #0
    5250:	bf0c      	ite	eq
    5252:	2301      	moveq	r3, #1
    5254:	2302      	movne	r3, #2
    5256:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    5258:	68a3      	ldr	r3, [r4, #8]
    525a:	781b      	ldrb	r3, [r3, #0]
    525c:	2b01      	cmp	r3, #1
    525e:	d003      	beq.n	5268 <find_info_cb+0x36>
    5260:	2b02      	cmp	r3, #2
    5262:	d01a      	beq.n	529a <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    5264:	2000      	movs	r0, #0
}
    5266:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    5268:	682b      	ldr	r3, [r5, #0]
    526a:	781b      	ldrb	r3, [r3, #0]
    526c:	2b00      	cmp	r3, #0
    526e:	d1f9      	bne.n	5264 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    5270:	6860      	ldr	r0, [r4, #4]
    5272:	2104      	movs	r1, #4
    5274:	3008      	adds	r0, #8
    5276:	f00e fd13 	bl	13ca0 <net_buf_simple_add>
    527a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    527c:	8a2b      	ldrh	r3, [r5, #16]
    527e:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    5280:	682b      	ldr	r3, [r5, #0]
    5282:	885b      	ldrh	r3, [r3, #2]
    5284:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    5286:	6863      	ldr	r3, [r4, #4]
    5288:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
    528c:	899b      	ldrh	r3, [r3, #12]
    528e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5290:	2804      	cmp	r0, #4
    5292:	bf94      	ite	ls
    5294:	2000      	movls	r0, #0
    5296:	2001      	movhi	r0, #1
    5298:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    529a:	682b      	ldr	r3, [r5, #0]
    529c:	781b      	ldrb	r3, [r3, #0]
    529e:	2b02      	cmp	r3, #2
    52a0:	d1e0      	bne.n	5264 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    52a2:	6860      	ldr	r0, [r4, #4]
    52a4:	2112      	movs	r1, #18
    52a6:	3008      	adds	r0, #8
    52a8:	f00e fcfa 	bl	13ca0 <net_buf_simple_add>
    52ac:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    52ae:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    52b0:	8a2b      	ldrh	r3, [r5, #16]
    52b2:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    52b6:	2210      	movs	r2, #16
    52b8:	3101      	adds	r1, #1
    52ba:	f7fc fcb1 	bl	1c20 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    52be:	6863      	ldr	r3, [r4, #4]
    52c0:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
    52c4:	899b      	ldrh	r3, [r3, #12]
    52c6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    52c8:	2812      	cmp	r0, #18
    52ca:	e7e2      	b.n	5292 <find_info_cb+0x60>

000052cc <find_type_cb>:
{
    52cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    52d0:	680e      	ldr	r6, [r1, #0]
{
    52d2:	b088      	sub	sp, #32
    52d4:	4605      	mov	r5, r0
    52d6:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    52d8:	2700      	movs	r7, #0
    52da:	f642 0301 	movw	r3, #10241	; 0x2801
    52de:	a902      	add	r1, sp, #8
    52e0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    52e2:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    52e6:	f88d 7008 	strb.w	r7, [sp, #8]
    52ea:	f8ad 300a 	strh.w	r3, [sp, #10]
    52ee:	f7fc fe15 	bl	1f1c <bt_uuid_cmp>
    52f2:	b928      	cbnz	r0, 5300 <find_type_cb+0x34>
		data->group = NULL;
    52f4:	2300      	movs	r3, #0
    52f6:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    52f8:	2001      	movs	r0, #1
}
    52fa:	b008      	add	sp, #32
    52fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    5300:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5304:	a903      	add	r1, sp, #12
    5306:	6828      	ldr	r0, [r5, #0]
    5308:	f88d 700c 	strb.w	r7, [sp, #12]
    530c:	f8ad 300e 	strh.w	r3, [sp, #14]
    5310:	f7fc fe04 	bl	1f1c <bt_uuid_cmp>
    5314:	b140      	cbz	r0, 5328 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    5316:	68a3      	ldr	r3, [r4, #8]
    5318:	2b00      	cmp	r3, #0
    531a:	d0ed      	beq.n	52f8 <find_type_cb+0x2c>
    531c:	8a2a      	ldrh	r2, [r5, #16]
    531e:	8859      	ldrh	r1, [r3, #2]
    5320:	4291      	cmp	r1, r2
    5322:	d2e9      	bcs.n	52f8 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5324:	805a      	strh	r2, [r3, #2]
    5326:	e7e7      	b.n	52f8 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    5328:	6862      	ldr	r2, [r4, #4]
    532a:	f8b6 305e 	ldrh.w	r3, [r6, #94]	; 0x5e
    532e:	8992      	ldrh	r2, [r2, #12]
    5330:	1a9b      	subs	r3, r3, r2
    5332:	2b03      	cmp	r3, #3
    5334:	d9e1      	bls.n	52fa <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    5336:	2310      	movs	r3, #16
    5338:	9000      	str	r0, [sp, #0]
    533a:	eb0d 0203 	add.w	r2, sp, r3
    533e:	686e      	ldr	r6, [r5, #4]
    5340:	4629      	mov	r1, r5
    5342:	4640      	mov	r0, r8
    5344:	47b0      	blx	r6
	if (read < 0) {
    5346:	1e02      	subs	r2, r0, #0
    5348:	dbd4      	blt.n	52f4 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    534a:	7c23      	ldrb	r3, [r4, #16]
    534c:	429a      	cmp	r2, r3
    534e:	d1d1      	bne.n	52f4 <find_type_cb+0x28>
    5350:	a904      	add	r1, sp, #16
    5352:	68e0      	ldr	r0, [r4, #12]
    5354:	f7fc fc4f 	bl	1bf6 <memcmp>
    5358:	2800      	cmp	r0, #0
    535a:	d1cb      	bne.n	52f4 <find_type_cb+0x28>
	data->err = 0x00;
    535c:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    535e:	6860      	ldr	r0, [r4, #4]
    5360:	2104      	movs	r1, #4
    5362:	3008      	adds	r0, #8
    5364:	f00e fc9c 	bl	13ca0 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5368:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    536a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    536c:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    536e:	8043      	strh	r3, [r0, #2]
    5370:	e7c2      	b.n	52f8 <find_type_cb+0x2c>
	...

00005374 <bt_att_connected>:
{
    5374:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5376:	2317      	movs	r3, #23
{
    5378:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    537a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    537e:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    5380:	4906      	ldr	r1, [pc, #24]	; (539c <bt_att_connected+0x28>)
    5382:	30b0      	adds	r0, #176	; 0xb0
    5384:	f010 f84e 	bl	15424 <k_delayed_work_init>
	list->head = NULL;
    5388:	2300      	movs	r3, #0
    538a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	list->tail = NULL;
    538e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	bt_gatt_connected(ch->chan.conn);
    5392:	6820      	ldr	r0, [r4, #0]
}
    5394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    5398:	f001 bbfe 	b.w	6b98 <bt_gatt_connected>
    539c:	000058c1 	.word	0x000058c1

000053a0 <check_perm.isra.5>:
	if ((mask & BT_GATT_PERM_READ) &&
    53a0:	f011 0f01 	tst.w	r1, #1
    53a4:	7c83      	ldrb	r3, [r0, #18]
    53a6:	d004      	beq.n	53b2 <check_perm.isra.5+0x12>
    53a8:	f013 0f15 	tst.w	r3, #21
    53ac:	d012      	beq.n	53d4 <check_perm.isra.5+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    53ae:	6842      	ldr	r2, [r0, #4]
    53b0:	b182      	cbz	r2, 53d4 <check_perm.isra.5+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    53b2:	078a      	lsls	r2, r1, #30
    53b4:	d504      	bpl.n	53c0 <check_perm.isra.5+0x20>
    53b6:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    53ba:	d00d      	beq.n	53d8 <check_perm.isra.5+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    53bc:	6882      	ldr	r2, [r0, #8]
    53be:	b15a      	cbz	r2, 53d8 <check_perm.isra.5+0x38>
	mask &= attr->perm;
    53c0:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    53c2:	f011 0f30 	tst.w	r1, #48	; 0x30
    53c6:	d109      	bne.n	53dc <check_perm.isra.5+0x3c>
	return 0;
    53c8:	f011 0f0c 	tst.w	r1, #12
    53cc:	bf14      	ite	ne
    53ce:	200f      	movne	r0, #15
    53d0:	2000      	moveq	r0, #0
    53d2:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    53d4:	2002      	movs	r0, #2
    53d6:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    53d8:	2003      	movs	r0, #3
    53da:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    53dc:	2005      	movs	r0, #5
}
    53de:	4770      	bx	lr

000053e0 <read_type_cb>:
{
    53e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    53e4:	680f      	ldr	r7, [r1, #0]
{
    53e6:	4606      	mov	r6, r0
    53e8:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    53ea:	6800      	ldr	r0, [r0, #0]
    53ec:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    53ee:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    53f2:	f7fc fd93 	bl	1f1c <bt_uuid_cmp>
    53f6:	4680      	mov	r8, r0
    53f8:	2800      	cmp	r0, #0
    53fa:	d14d      	bne.n	5498 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    53fc:	2115      	movs	r1, #21
    53fe:	4630      	mov	r0, r6
    5400:	f7ff ffce 	bl	53a0 <check_perm.isra.5>
    5404:	4605      	mov	r5, r0
    5406:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5408:	b148      	cbz	r0, 541e <read_type_cb+0x3e>
		if (data->rsp->len) {
    540a:	68e3      	ldr	r3, [r4, #12]
    540c:	781d      	ldrb	r5, [r3, #0]
    540e:	b115      	cbz	r5, 5416 <read_type_cb+0x36>
			data->err = 0x00;
    5410:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    5414:	4645      	mov	r5, r8
}
    5416:	4628      	mov	r0, r5
    5418:	b003      	add	sp, #12
    541a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    541e:	68a0      	ldr	r0, [r4, #8]
    5420:	2102      	movs	r1, #2
    5422:	3008      	adds	r0, #8
    5424:	f00e fc3c 	bl	13ca0 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5428:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    542a:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    542c:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    542e:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5430:	898a      	ldrh	r2, [r1, #12]
    5432:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    5436:	6889      	ldr	r1, [r1, #8]
    5438:	f8d6 8004 	ldr.w	r8, [r6, #4]
    543c:	9500      	str	r5, [sp, #0]
    543e:	1a9b      	subs	r3, r3, r2
    5440:	b29b      	uxth	r3, r3
    5442:	440a      	add	r2, r1
    5444:	4648      	mov	r0, r9
    5446:	4631      	mov	r1, r6
    5448:	47c0      	blx	r8
	if (read < 0) {
    544a:	1e01      	subs	r1, r0, #0
    544c:	da08      	bge.n	5460 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    544e:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5452:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5454:	bf9a      	itte	ls
    5456:	4249      	negls	r1, r1
    5458:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    545a:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    545c:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    545e:	e7da      	b.n	5416 <read_type_cb+0x36>
	if (!data->rsp->len) {
    5460:	68e0      	ldr	r0, [r4, #12]
    5462:	7802      	ldrb	r2, [r0, #0]
    5464:	1c8b      	adds	r3, r1, #2
    5466:	b982      	cbnz	r2, 548a <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    5468:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    546a:	68a0      	ldr	r0, [r4, #8]
    546c:	3008      	adds	r0, #8
    546e:	f00e fc17 	bl	13ca0 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    5472:	68a3      	ldr	r3, [r4, #8]
    5474:	f8b7 505e 	ldrh.w	r5, [r7, #94]	; 0x5e
    5478:	899b      	ldrh	r3, [r3, #12]
    547a:	1aed      	subs	r5, r5, r3
    547c:	68e3      	ldr	r3, [r4, #12]
    547e:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    5480:	429d      	cmp	r5, r3
    5482:	bfd4      	ite	le
    5484:	2500      	movle	r5, #0
    5486:	2501      	movgt	r5, #1
    5488:	e7c5      	b.n	5416 <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    548a:	429a      	cmp	r2, r3
    548c:	d0ed      	beq.n	546a <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    548e:	68a2      	ldr	r2, [r4, #8]
    5490:	8993      	ldrh	r3, [r2, #12]
    5492:	3b02      	subs	r3, #2
    5494:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    5496:	e7be      	b.n	5416 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    5498:	2501      	movs	r5, #1
    549a:	e7bc      	b.n	5416 <read_type_cb+0x36>

0000549c <uuid_create>:
{
    549c:	b510      	push	{r4, lr}
	switch (buf->len) {
    549e:	898a      	ldrh	r2, [r1, #12]
    54a0:	2a02      	cmp	r2, #2
{
    54a2:	4604      	mov	r4, r0
	switch (buf->len) {
    54a4:	d003      	beq.n	54ae <uuid_create+0x12>
    54a6:	2a10      	cmp	r2, #16
    54a8:	d00a      	beq.n	54c0 <uuid_create+0x24>
	return false;
    54aa:	2000      	movs	r0, #0
}
    54ac:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    54ae:	2300      	movs	r3, #0
    54b0:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    54b2:	f101 0008 	add.w	r0, r1, #8
    54b6:	f00e fc22 	bl	13cfe <net_buf_simple_pull_le16>
    54ba:	8060      	strh	r0, [r4, #2]
		return true;
    54bc:	2001      	movs	r0, #1
    54be:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    54c0:	2302      	movs	r3, #2
    54c2:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    54c6:	6889      	ldr	r1, [r1, #8]
    54c8:	f7fc fbaa 	bl	1c20 <memcpy>
    54cc:	e7f6      	b.n	54bc <uuid_create+0x20>
	...

000054d0 <att_req_sent>:
{
    54d0:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    54d2:	2104      	movs	r1, #4
    54d4:	f7ff fd56 	bl	4f84 <bt_l2cap_le_lookup_tx_cid>
    54d8:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    54da:	30d8      	adds	r0, #216	; 0xd8
    54dc:	f00f fca6 	bl	14e2c <_impl_k_sem_give>
	if (att->req) {
    54e0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    54e4:	b143      	cbz	r3, 54f8 <att_req_sent+0x28>
    54e6:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
    54ea:	f247 5230 	movw	r2, #30000	; 0x7530
    54ee:	4803      	ldr	r0, [pc, #12]	; (54fc <att_req_sent+0x2c>)
}
    54f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    54f4:	f010 b80a 	b.w	1550c <k_delayed_work_submit_to_queue>
    54f8:	bd10      	pop	{r4, pc}
    54fa:	bf00      	nop
    54fc:	200019f8 	.word	0x200019f8

00005500 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    5500:	6803      	ldr	r3, [r0, #0]
    5502:	7a5b      	ldrb	r3, [r3, #9]
    5504:	2b03      	cmp	r3, #3
    5506:	d10a      	bne.n	551e <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5508:	f3bf 8f5b 	dmb	ish
    550c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
    5510:	f3bf 8f5b 	dmb	ish
    5514:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    5518:	f000 0001 	and.w	r0, r0, #1
    551c:	4770      	bx	lr
    551e:	2001      	movs	r0, #1
}
    5520:	4770      	bx	lr

00005522 <att_prepare_write_req>:
    5522:	2006      	movs	r0, #6
    5524:	4770      	bx	lr

00005526 <att_pdu_sent>:
{
    5526:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5528:	2104      	movs	r1, #4
    552a:	f7ff fd2b 	bl	4f84 <bt_l2cap_le_lookup_tx_cid>
}
    552e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5532:	30d8      	adds	r0, #216	; 0xd8
    5534:	f00f bc7a 	b.w	14e2c <_impl_k_sem_give>

00005538 <att_rsp_sent>:
{
    5538:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    553a:	2104      	movs	r1, #4
    553c:	f7ff fd22 	bl	4f84 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5540:	f3bf 8f5b 	dmb	ish
    5544:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    5548:	e853 2f00 	ldrex	r2, [r3]
    554c:	f022 0201 	bic.w	r2, r2, #1
    5550:	e843 2100 	strex	r1, r2, [r3]
    5554:	2900      	cmp	r1, #0
    5556:	d1f7      	bne.n	5548 <att_rsp_sent+0x10>
    5558:	f3bf 8f5b 	dmb	ish
    555c:	30d8      	adds	r0, #216	; 0xd8
}
    555e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5562:	f00f bc63 	b.w	14e2c <_impl_k_sem_give>

00005566 <att_cfm_sent>:
{
    5566:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5568:	2104      	movs	r1, #4
    556a:	f7ff fd0b 	bl	4f84 <bt_l2cap_le_lookup_tx_cid>
    556e:	f3bf 8f5b 	dmb	ish
    5572:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    5576:	e853 2f00 	ldrex	r2, [r3]
    557a:	f022 0202 	bic.w	r2, r2, #2
    557e:	e843 2100 	strex	r1, r2, [r3]
    5582:	2900      	cmp	r1, #0
    5584:	d1f7      	bne.n	5576 <att_cfm_sent+0x10>
    5586:	f3bf 8f5b 	dmb	ish
    558a:	30d8      	adds	r0, #216	; 0xd8
}
    558c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5590:	f00f bc4c 	b.w	14e2c <_impl_k_sem_give>

00005594 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    5594:	7a43      	ldrb	r3, [r0, #9]
    5596:	2b03      	cmp	r3, #3
{
    5598:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    559a:	d00b      	beq.n	55b4 <att_chan_get+0x20>
		BT_WARN("Not connected");
    559c:	4a16      	ldr	r2, [pc, #88]	; (55f8 <att_chan_get+0x64>)
    559e:	4b17      	ldr	r3, [pc, #92]	; (55fc <att_chan_get+0x68>)
    55a0:	9201      	str	r2, [sp, #4]
    55a2:	9200      	str	r2, [sp, #0]
    55a4:	681c      	ldr	r4, [r3, #0]
    55a6:	4916      	ldr	r1, [pc, #88]	; (5600 <att_chan_get+0x6c>)
    55a8:	4b16      	ldr	r3, [pc, #88]	; (5604 <att_chan_get+0x70>)
    55aa:	4817      	ldr	r0, [pc, #92]	; (5608 <att_chan_get+0x74>)
		BT_WARN("ATT context flagged as disconnected");
    55ac:	47a0      	blx	r4
		return NULL;
    55ae:	2000      	movs	r0, #0
}
    55b0:	b003      	add	sp, #12
    55b2:	bd30      	pop	{r4, r5, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    55b4:	2104      	movs	r1, #4
    55b6:	f7ff fcf5 	bl	4fa4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    55ba:	4604      	mov	r4, r0
    55bc:	b950      	cbnz	r0, 55d4 <att_chan_get+0x40>
		BT_ERR("Unable to find ATT channel");
    55be:	4a0e      	ldr	r2, [pc, #56]	; (55f8 <att_chan_get+0x64>)
    55c0:	4b0e      	ldr	r3, [pc, #56]	; (55fc <att_chan_get+0x68>)
    55c2:	9201      	str	r2, [sp, #4]
    55c4:	9200      	str	r2, [sp, #0]
    55c6:	681d      	ldr	r5, [r3, #0]
    55c8:	490d      	ldr	r1, [pc, #52]	; (5600 <att_chan_get+0x6c>)
    55ca:	4b0e      	ldr	r3, [pc, #56]	; (5604 <att_chan_get+0x70>)
    55cc:	480f      	ldr	r0, [pc, #60]	; (560c <att_chan_get+0x78>)
    55ce:	47a8      	blx	r5
    55d0:	4620      	mov	r0, r4
    55d2:	e7ed      	b.n	55b0 <att_chan_get+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    55d4:	f3bf 8f5b 	dmb	ish
    55d8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    55dc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    55e0:	075b      	lsls	r3, r3, #29
    55e2:	d5f5      	bpl.n	55d0 <att_chan_get+0x3c>
		BT_WARN("ATT context flagged as disconnected");
    55e4:	4a04      	ldr	r2, [pc, #16]	; (55f8 <att_chan_get+0x64>)
    55e6:	4b05      	ldr	r3, [pc, #20]	; (55fc <att_chan_get+0x68>)
    55e8:	9201      	str	r2, [sp, #4]
    55ea:	9200      	str	r2, [sp, #0]
    55ec:	681c      	ldr	r4, [r3, #0]
    55ee:	4904      	ldr	r1, [pc, #16]	; (5600 <att_chan_get+0x6c>)
    55f0:	4b04      	ldr	r3, [pc, #16]	; (5604 <att_chan_get+0x70>)
    55f2:	4807      	ldr	r0, [pc, #28]	; (5610 <att_chan_get+0x7c>)
    55f4:	e7da      	b.n	55ac <att_chan_get+0x18>
    55f6:	bf00      	nop
    55f8:	000159e9 	.word	0x000159e9
    55fc:	20003ad4 	.word	0x20003ad4
    5600:	00016791 	.word	0x00016791
    5604:	0001720d 	.word	0x0001720d
    5608:	00017246 	.word	0x00017246
    560c:	00017264 	.word	0x00017264
    5610:	0001728f 	.word	0x0001728f

00005614 <write_cb>:
{
    5614:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5618:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    561a:	f8d1 8000 	ldr.w	r8, [r1]
    561e:	212a      	movs	r1, #42	; 0x2a
{
    5620:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5622:	f7ff febd 	bl	53a0 <check_perm.isra.5>
    5626:	4605      	mov	r5, r0
    5628:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    562a:	b9e0      	cbnz	r0, 5666 <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    562c:	8a62      	ldrh	r2, [r4, #18]
    562e:	9001      	str	r0, [sp, #4]
    5630:	9200      	str	r2, [sp, #0]
    5632:	7c23      	ldrb	r3, [r4, #16]
    5634:	68b7      	ldr	r7, [r6, #8]
    5636:	68e2      	ldr	r2, [r4, #12]
    5638:	4631      	mov	r1, r6
    563a:	4640      	mov	r0, r8
    563c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    563e:	2800      	cmp	r0, #0
    5640:	db02      	blt.n	5648 <write_cb+0x34>
    5642:	7c23      	ldrb	r3, [r4, #16]
    5644:	4298      	cmp	r0, r3
    5646:	d00b      	beq.n	5660 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    5648:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    564c:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    564e:	bf9a      	itte	ls
    5650:	4240      	negls	r0, r0
    5652:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    5654:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    5656:	7520      	strb	r0, [r4, #20]
}
    5658:	4628      	mov	r0, r5
    565a:	b002      	add	sp, #8
    565c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    5660:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    5662:	2501      	movs	r5, #1
    5664:	e7f8      	b.n	5658 <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    5666:	2500      	movs	r5, #0
    5668:	e7f6      	b.n	5658 <write_cb+0x44>
	...

0000566c <att_send_req>:
{
    566c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    566e:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    5670:	f100 06d8 	add.w	r6, r0, #216	; 0xd8
	att->req = req;
    5674:	f8c5 10a4 	str.w	r1, [r5, #164]	; 0xa4
{
    5678:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    567a:	4630      	mov	r0, r6
    567c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5680:	f00f fbfc 	bl	14e7c <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    5684:	4628      	mov	r0, r5
    5686:	f7ff ff3b 	bl	5500 <att_is_connected>
    568a:	b978      	cbnz	r0, 56ac <att_send_req+0x40>
		BT_WARN("Disconnected");
    568c:	4a18      	ldr	r2, [pc, #96]	; (56f0 <att_send_req+0x84>)
    568e:	4b19      	ldr	r3, [pc, #100]	; (56f4 <att_send_req+0x88>)
    5690:	9201      	str	r2, [sp, #4]
    5692:	9200      	str	r2, [sp, #0]
    5694:	681c      	ldr	r4, [r3, #0]
    5696:	4918      	ldr	r1, [pc, #96]	; (56f8 <att_send_req+0x8c>)
    5698:	4b18      	ldr	r3, [pc, #96]	; (56fc <att_send_req+0x90>)
    569a:	4819      	ldr	r0, [pc, #100]	; (5700 <att_send_req+0x94>)
    569c:	47a0      	blx	r4
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    569e:	4630      	mov	r0, r6
    56a0:	f00f fbc4 	bl	14e2c <_impl_k_sem_give>
		return -ENOTCONN;
    56a4:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    56a8:	b002      	add	sp, #8
    56aa:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    56ac:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    56ae:	f106 0008 	add.w	r0, r6, #8
    56b2:	f00e fb2c 	bl	13d0e <net_buf_simple_headroom>
	state->len = buf->len;
    56b6:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    56b8:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    56ba:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    56bc:	6920      	ldr	r0, [r4, #16]
    56be:	682d      	ldr	r5, [r5, #0]
    56c0:	f00e faea 	bl	13c98 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    56c4:	6923      	ldr	r3, [r4, #16]
    56c6:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    56c8:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    56ca:	7818      	ldrb	r0, [r3, #0]
    56cc:	f7ff fce8 	bl	50a0 <att_op_get_type>
    56d0:	3801      	subs	r0, #1
    56d2:	b2c0      	uxtb	r0, r0
    56d4:	2804      	cmp	r0, #4
    56d6:	bf96      	itet	ls
    56d8:	4b0a      	ldrls	r3, [pc, #40]	; (5704 <att_send_req+0x98>)
    56da:	4b0b      	ldrhi	r3, [pc, #44]	; (5708 <att_send_req+0x9c>)
    56dc:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    56e0:	4632      	mov	r2, r6
    56e2:	4628      	mov	r0, r5
    56e4:	2104      	movs	r1, #4
    56e6:	f7ff fb61 	bl	4dac <bt_l2cap_send_cb>
	return 0;
    56ea:	2000      	movs	r0, #0
    56ec:	e7dc      	b.n	56a8 <att_send_req+0x3c>
    56ee:	bf00      	nop
    56f0:	000159e9 	.word	0x000159e9
    56f4:	20003ad4 	.word	0x20003ad4
    56f8:	00016791 	.word	0x00016791
    56fc:	000171d0 	.word	0x000171d0
    5700:	000172ea 	.word	0x000172ea
    5704:	000171bc 	.word	0x000171bc
    5708:	00005527 	.word	0x00005527

0000570c <att_handle_rsp>:
{
    570c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5710:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    5712:	30b0      	adds	r0, #176	; 0xb0
{
    5714:	461e      	mov	r6, r3
    5716:	460f      	mov	r7, r1
    5718:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    571a:	f00f fe93 	bl	15444 <k_delayed_work_cancel>
	if (!att->req) {
    571e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5722:	b9db      	cbnz	r3, 575c <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
    5724:	4a1c      	ldr	r2, [pc, #112]	; (5798 <att_handle_rsp+0x8c>)
    5726:	4b1d      	ldr	r3, [pc, #116]	; (579c <att_handle_rsp+0x90>)
    5728:	9201      	str	r2, [sp, #4]
    572a:	9200      	str	r2, [sp, #0]
    572c:	681d      	ldr	r5, [r3, #0]
    572e:	491c      	ldr	r1, [pc, #112]	; (57a0 <att_handle_rsp+0x94>)
    5730:	4b1c      	ldr	r3, [pc, #112]	; (57a4 <att_handle_rsp+0x98>)
    5732:	481d      	ldr	r0, [pc, #116]	; (57a8 <att_handle_rsp+0x9c>)
    5734:	47a8      	blx	r5
    5736:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
Z_GENLIST_GET(slist, snode);
    573a:	b159      	cbz	r1, 5754 <att_handle_rsp+0x48>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    573c:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
	return node->next;
    5740:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5742:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5746:	4291      	cmp	r1, r2
	list->tail = node;
    5748:	bf08      	it	eq
    574a:	f8c4 30ac 	streq.w	r3, [r4, #172]	; 0xac
	att_send_req(att, ATT_REQ(node));
    574e:	4620      	mov	r0, r4
    5750:	f7ff ff8c 	bl	566c <att_send_req>
}
    5754:	2000      	movs	r0, #0
    5756:	b003      	add	sp, #12
    5758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    575c:	6918      	ldr	r0, [r3, #16]
    575e:	b128      	cbz	r0, 576c <att_handle_rsp+0x60>
		net_buf_unref(att->req->buf);
    5760:	f00e fa66 	bl	13c30 <net_buf_unref>
		att->req->buf = NULL;
    5764:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5768:	2200      	movs	r2, #0
    576a:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    576c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	func(att->chan.chan.conn, err, pdu, len, att->req);
    5770:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    5772:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    5776:	2500      	movs	r5, #0
    5778:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    577a:	463a      	mov	r2, r7
    577c:	9300      	str	r3, [sp, #0]
    577e:	4631      	mov	r1, r6
    5780:	4643      	mov	r3, r8
    5782:	47c8      	blx	r9
	if (!att->req->func) {
    5784:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    5788:	6843      	ldr	r3, [r0, #4]
    578a:	b90b      	cbnz	r3, 5790 <att_handle_rsp+0x84>
		att_req_destroy(att->req);
    578c:	f7ff fcd2 	bl	5134 <att_req_destroy>
	att->req = NULL;
    5790:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    5794:	e7cf      	b.n	5736 <att_handle_rsp+0x2a>
    5796:	bf00      	nop
    5798:	000159e9 	.word	0x000159e9
    579c:	20003ad4 	.word	0x20003ad4
    57a0:	00016791 	.word	0x00016791
    57a4:	000171dd 	.word	0x000171dd
    57a8:	000172c3 	.word	0x000172c3

000057ac <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    57ac:	898a      	ldrh	r2, [r1, #12]
    57ae:	6889      	ldr	r1, [r1, #8]
    57b0:	2300      	movs	r3, #0
    57b2:	f7ff bfab 	b.w	570c <att_handle_rsp>

000057b6 <att_handle_exec_write_rsp>:
    57b6:	f7ff bff9 	b.w	57ac <att_confirm>

000057ba <att_handle_prepare_write_rsp>:
    57ba:	f7ff bff7 	b.w	57ac <att_confirm>

000057be <att_handle_write_rsp>:
    57be:	f7ff bff5 	b.w	57ac <att_confirm>

000057c2 <att_handle_read_mult_rsp>:
    57c2:	f7ff bff3 	b.w	57ac <att_confirm>

000057c6 <att_handle_read_blob_rsp>:
    57c6:	f7ff bff1 	b.w	57ac <att_confirm>

000057ca <att_handle_read_rsp>:
    57ca:	f7ff bfef 	b.w	57ac <att_confirm>

000057ce <att_handle_read_type_rsp>:
    57ce:	f7ff bfed 	b.w	57ac <att_confirm>

000057d2 <att_handle_find_type_rsp>:
    57d2:	f7ff bfeb 	b.w	57ac <att_confirm>

000057d6 <att_handle_find_info_rsp>:
    57d6:	f7ff bfe9 	b.w	57ac <att_confirm>

000057da <att_mtu_rsp>:
{
    57da:	b410      	push	{r4}
    57dc:	460a      	mov	r2, r1
	if (!att) {
    57de:	4603      	mov	r3, r0
    57e0:	b180      	cbz	r0, 5804 <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    57e2:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    57e4:	880c      	ldrh	r4, [r1, #0]
    57e6:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    57e8:	bf83      	ittte	hi
    57ea:	2417      	movhi	r4, #23
    57ec:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    57ee:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    57f2:	2200      	movls	r2, #0
    57f4:	bf99      	ittee	ls
    57f6:	2304      	movls	r3, #4
    57f8:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    57fa:	2300      	movhi	r3, #0
    57fc:	8992      	ldrhhi	r2, [r2, #12]
}
    57fe:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    5800:	f7ff bf84 	b.w	570c <att_handle_rsp>
}
    5804:	bc10      	pop	{r4}
    5806:	4770      	bx	lr

00005808 <att_error_rsp>:
{
    5808:	b430      	push	{r4, r5}
	if (!att->req) {
    580a:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
	rsp = (void *)buf->data;
    580e:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    5810:	b16a      	cbz	r2, 582e <att_error_rsp+0x26>
	if (att->req->buf) {
    5812:	6913      	ldr	r3, [r2, #16]
    5814:	b12b      	cbz	r3, 5822 <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    5816:	8995      	ldrh	r5, [r2, #12]
    5818:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    581a:	89d2      	ldrh	r2, [r2, #14]
    581c:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    581e:	4429      	add	r1, r5
    5820:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    5822:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    5824:	2200      	movs	r2, #0
    5826:	4611      	mov	r1, r2
}
    5828:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    582a:	f7ff bf6f 	b.w	570c <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    582e:	230e      	movs	r3, #14
    5830:	e7f8      	b.n	5824 <att_error_rsp+0x1c>

00005832 <att_reset>:
{
    5832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5834:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    5838:	4605      	mov	r5, r0
    583a:	f3bf 8f5b 	dmb	ish
    583e:	e853 2f00 	ldrex	r2, [r3]
    5842:	f042 0204 	orr.w	r2, r2, #4
    5846:	e843 2100 	strex	r1, r2, [r3]
    584a:	2900      	cmp	r1, #0
    584c:	d1f7      	bne.n	583e <att_reset+0xc>
    584e:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    5852:	f105 04d8 	add.w	r4, r5, #216	; 0xd8
    5856:	4620      	mov	r0, r4
    5858:	f00f fae8 	bl	14e2c <_impl_k_sem_give>
    585c:	4620      	mov	r0, r4
    585e:	f00f fae5 	bl	14e2c <_impl_k_sem_give>
    5862:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5866:	b98c      	cbnz	r4, 588c <att_reset+0x5a>
	if (!att->req) {
    5868:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	list->head = NULL;
    586c:	2200      	movs	r2, #0
    586e:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
	list->tail = NULL;
    5872:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac
    5876:	b90b      	cbnz	r3, 587c <att_reset+0x4a>
}
    5878:	b003      	add	sp, #12
    587a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    587c:	230e      	movs	r3, #14
    587e:	4611      	mov	r1, r2
    5880:	4628      	mov	r0, r5
}
    5882:	b003      	add	sp, #12
    5884:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5888:	f7ff bf40 	b.w	570c <att_handle_rsp>
	return node->next;
    588c:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    588e:	6867      	ldr	r7, [r4, #4]
    5890:	b12f      	cbz	r7, 589e <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    5892:	2300      	movs	r3, #0
    5894:	9400      	str	r4, [sp, #0]
    5896:	461a      	mov	r2, r3
    5898:	210e      	movs	r1, #14
    589a:	4618      	mov	r0, r3
    589c:	47b8      	blx	r7
		att_req_destroy(req);
    589e:	4620      	mov	r0, r4
    58a0:	f7ff fc48 	bl	5134 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    58a4:	2e00      	cmp	r6, #0
    58a6:	d0df      	beq.n	5868 <att_reset+0x36>
    58a8:	4634      	mov	r4, r6
    58aa:	6836      	ldr	r6, [r6, #0]
    58ac:	e7ef      	b.n	588e <att_reset+0x5c>

000058ae <bt_att_disconnected>:
{
    58ae:	b510      	push	{r4, lr}
    58b0:	4604      	mov	r4, r0
	att_reset(att);
    58b2:	f7ff ffbe 	bl	5832 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    58b6:	6820      	ldr	r0, [r4, #0]
}
    58b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    58bc:	f001 b976 	b.w	6bac <bt_gatt_disconnected>

000058c0 <att_timeout>:
{
    58c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	BT_ERR("ATT Timeout");
    58c2:	4b0b      	ldr	r3, [pc, #44]	; (58f0 <att_timeout+0x30>)
    58c4:	4a0b      	ldr	r2, [pc, #44]	; (58f4 <att_timeout+0x34>)
    58c6:	9201      	str	r2, [sp, #4]
    58c8:	9200      	str	r2, [sp, #0]
{
    58ca:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    58cc:	490a      	ldr	r1, [pc, #40]	; (58f8 <att_timeout+0x38>)
    58ce:	681d      	ldr	r5, [r3, #0]
    58d0:	480a      	ldr	r0, [pc, #40]	; (58fc <att_timeout+0x3c>)
    58d2:	4b0b      	ldr	r3, [pc, #44]	; (5900 <att_timeout+0x40>)
    58d4:	47a8      	blx	r5
	att_reset(att);
    58d6:	f1a4 00b0 	sub.w	r0, r4, #176	; 0xb0
    58da:	f7ff ffaa 	bl	5832 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    58de:	f854 0cb0 	ldr.w	r0, [r4, #-176]
    58e2:	f001 f963 	bl	6bac <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    58e6:	2300      	movs	r3, #0
    58e8:	f844 3cb0 	str.w	r3, [r4, #-176]
}
    58ec:	b003      	add	sp, #12
    58ee:	bd30      	pop	{r4, r5, pc}
    58f0:	20003ad4 	.word	0x20003ad4
    58f4:	000159e9 	.word	0x000159e9
    58f8:	00016791 	.word	0x00016791
    58fc:	0001732c 	.word	0x0001732c
    5900:	0001722c 	.word	0x0001722c

00005904 <read_cb>:
{
    5904:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5908:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    590a:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    590c:	f8d1 9000 	ldr.w	r9, [r1]
{
    5910:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5912:	3008      	adds	r0, #8
    5914:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    5916:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    591a:	f00e f9c1 	bl	13ca0 <net_buf_simple_add>
	data->err = 0x00;
    591e:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5920:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    5922:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5924:	2115      	movs	r1, #21
    5926:	4630      	mov	r0, r6
    5928:	f7ff fd3a 	bl	53a0 <check_perm.isra.5>
    592c:	4605      	mov	r5, r0
    592e:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    5930:	bb08      	cbnz	r0, 5976 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5932:	68a1      	ldr	r1, [r4, #8]
    5934:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    5938:	898a      	ldrh	r2, [r1, #12]
    593a:	6889      	ldr	r1, [r1, #8]
    593c:	88a0      	ldrh	r0, [r4, #4]
    593e:	9000      	str	r0, [sp, #0]
    5940:	1a9b      	subs	r3, r3, r2
    5942:	6877      	ldr	r7, [r6, #4]
    5944:	440a      	add	r2, r1
    5946:	b29b      	uxth	r3, r3
    5948:	4631      	mov	r1, r6
    594a:	4640      	mov	r0, r8
    594c:	47b8      	blx	r7
	if (read < 0) {
    594e:	1e01      	subs	r1, r0, #0
    5950:	da0b      	bge.n	596a <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    5952:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5956:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5958:	bf9a      	itte	ls
    595a:	4249      	negls	r1, r1
    595c:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    595e:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5960:	7421      	strb	r1, [r4, #16]
}
    5962:	4628      	mov	r0, r5
    5964:	b003      	add	sp, #12
    5966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    596a:	68a0      	ldr	r0, [r4, #8]
    596c:	3008      	adds	r0, #8
    596e:	f00e f997 	bl	13ca0 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    5972:	2501      	movs	r5, #1
    5974:	e7f5      	b.n	5962 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    5976:	463d      	mov	r5, r7
    5978:	e7f3      	b.n	5962 <read_cb+0x5e>
	...

0000597c <bt_att_create_pdu>:
{
    597c:	b530      	push	{r4, r5, lr}
    597e:	b085      	sub	sp, #20
    5980:	460d      	mov	r5, r1
    5982:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    5984:	f7ff fe06 	bl	5594 <att_chan_get>
	if (!att) {
    5988:	b1f0      	cbz	r0, 59c8 <bt_att_create_pdu+0x4c>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    598a:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    598e:	3401      	adds	r4, #1
    5990:	428c      	cmp	r4, r1
    5992:	d90e      	bls.n	59b2 <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    5994:	4a0d      	ldr	r2, [pc, #52]	; (59cc <bt_att_create_pdu+0x50>)
    5996:	4b0e      	ldr	r3, [pc, #56]	; (59d0 <bt_att_create_pdu+0x54>)
    5998:	9101      	str	r1, [sp, #4]
    599a:	9203      	str	r2, [sp, #12]
    599c:	9402      	str	r4, [sp, #8]
    599e:	9200      	str	r2, [sp, #0]
    59a0:	681c      	ldr	r4, [r3, #0]
    59a2:	490c      	ldr	r1, [pc, #48]	; (59d4 <bt_att_create_pdu+0x58>)
    59a4:	4b0c      	ldr	r3, [pc, #48]	; (59d8 <bt_att_create_pdu+0x5c>)
    59a6:	480d      	ldr	r0, [pc, #52]	; (59dc <bt_att_create_pdu+0x60>)
    59a8:	47a0      	blx	r4
		return NULL;
    59aa:	2400      	movs	r4, #0
}
    59ac:	4620      	mov	r0, r4
    59ae:	b005      	add	sp, #20
    59b0:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    59b2:	2100      	movs	r1, #0
    59b4:	4608      	mov	r0, r1
    59b6:	f7ff f9f6 	bl	4da6 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    59ba:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    59bc:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    59be:	3008      	adds	r0, #8
    59c0:	f00e f96e 	bl	13ca0 <net_buf_simple_add>
	hdr->code = op;
    59c4:	7005      	strb	r5, [r0, #0]
	return buf;
    59c6:	e7f1      	b.n	59ac <bt_att_create_pdu+0x30>
		return NULL;
    59c8:	4604      	mov	r4, r0
    59ca:	e7ef      	b.n	59ac <bt_att_create_pdu+0x30>
    59cc:	000159e9 	.word	0x000159e9
    59d0:	20003ad4 	.word	0x20003ad4
    59d4:	00016791 	.word	0x00016791
    59d8:	0001721a 	.word	0x0001721a
    59dc:	0001737d 	.word	0x0001737d

000059e0 <att_indicate>:
{
    59e0:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    59e2:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    59e4:	f101 0008 	add.w	r0, r1, #8
    59e8:	f00e f989 	bl	13cfe <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    59ec:	2200      	movs	r2, #0
    59ee:	211e      	movs	r1, #30
    59f0:	4620      	mov	r0, r4
    59f2:	f7ff ffc3 	bl	597c <bt_att_create_pdu>
	if (!buf) {
    59f6:	4602      	mov	r2, r0
    59f8:	b120      	cbz	r0, 5a04 <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    59fa:	4b03      	ldr	r3, [pc, #12]	; (5a08 <att_indicate+0x28>)
    59fc:	2104      	movs	r1, #4
    59fe:	4620      	mov	r0, r4
    5a00:	f7ff f9d4 	bl	4dac <bt_l2cap_send_cb>
}
    5a04:	2000      	movs	r0, #0
    5a06:	bd10      	pop	{r4, pc}
    5a08:	00005567 	.word	0x00005567

00005a0c <att_mtu_req>:
{
    5a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    5a10:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5a12:	881b      	ldrh	r3, [r3, #0]
    5a14:	2b16      	cmp	r3, #22
{
    5a16:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5a18:	d91c      	bls.n	5a54 <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    5a1a:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    5a1e:	2202      	movs	r2, #2
    5a20:	2103      	movs	r1, #3
    5a22:	4640      	mov	r0, r8
    5a24:	f7ff ffaa 	bl	597c <bt_att_create_pdu>
	if (!pdu) {
    5a28:	4607      	mov	r7, r0
    5a2a:	b1b0      	cbz	r0, 5a5a <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    5a2c:	2102      	movs	r1, #2
    5a2e:	3008      	adds	r0, #8
    5a30:	f00e f936 	bl	13ca0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    5a34:	2617      	movs	r6, #23
    5a36:	2400      	movs	r4, #0
    5a38:	7006      	strb	r6, [r0, #0]
    5a3a:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    5a3c:	4b08      	ldr	r3, [pc, #32]	; (5a60 <att_mtu_req+0x54>)
    5a3e:	4640      	mov	r0, r8
    5a40:	463a      	mov	r2, r7
    5a42:	2104      	movs	r1, #4
    5a44:	f7ff f9b2 	bl	4dac <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    5a48:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5a4a:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
    5a4e:	4620      	mov	r0, r4
    5a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    5a54:	2004      	movs	r0, #4
    5a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    5a5a:	200e      	movs	r0, #14
}
    5a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a60:	00005539 	.word	0x00005539

00005a64 <send_err_rsp.part.11>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a68:	4688      	mov	r8, r1
    5a6a:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5a6c:	2101      	movs	r1, #1
    5a6e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5a70:	4605      	mov	r5, r0
    5a72:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5a74:	f7ff ff82 	bl	597c <bt_att_create_pdu>
	if (!buf) {
    5a78:	4604      	mov	r4, r0
    5a7a:	b180      	cbz	r0, 5a9e <send_err_rsp.part.11+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    5a7c:	2104      	movs	r1, #4
    5a7e:	3008      	adds	r0, #8
    5a80:	f00e f90e 	bl	13ca0 <net_buf_simple_add>
	rsp->request = req;
    5a84:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    5a88:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    5a8a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5a8e:	4622      	mov	r2, r4
    5a90:	4628      	mov	r0, r5
    5a92:	4b04      	ldr	r3, [pc, #16]	; (5aa4 <send_err_rsp.part.11+0x40>)
    5a94:	2104      	movs	r1, #4
}
    5a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5a9a:	f7ff b987 	b.w	4dac <bt_l2cap_send_cb>
    5a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5aa2:	bf00      	nop
    5aa4:	00005539 	.word	0x00005539

00005aa8 <bt_att_recv>:
{
    5aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    5aaa:	898b      	ldrh	r3, [r1, #12]
{
    5aac:	b085      	sub	sp, #20
    5aae:	4604      	mov	r4, r0
    5ab0:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    5ab2:	b953      	cbnz	r3, 5aca <bt_att_recv+0x22>
		BT_ERR("Too small ATT PDU received");
    5ab4:	4a4c      	ldr	r2, [pc, #304]	; (5be8 <bt_att_recv+0x140>)
    5ab6:	4b4d      	ldr	r3, [pc, #308]	; (5bec <bt_att_recv+0x144>)
    5ab8:	9201      	str	r2, [sp, #4]
    5aba:	9200      	str	r2, [sp, #0]
    5abc:	681c      	ldr	r4, [r3, #0]
    5abe:	494c      	ldr	r1, [pc, #304]	; (5bf0 <bt_att_recv+0x148>)
    5ac0:	4b4c      	ldr	r3, [pc, #304]	; (5bf4 <bt_att_recv+0x14c>)
    5ac2:	484d      	ldr	r0, [pc, #308]	; (5bf8 <bt_att_recv+0x150>)
			BT_WARN("Ignoring unexpected request");
    5ac4:	47a0      	blx	r4
}
    5ac6:	b005      	add	sp, #20
    5ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    5aca:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5acc:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    5ace:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    5ad2:	f00e f904 	bl	13cde <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    5ad6:	4a49      	ldr	r2, [pc, #292]	; (5bfc <bt_att_recv+0x154>)
    5ad8:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5ada:	2300      	movs	r3, #0
    5adc:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    5ade:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    5ae2:	4286      	cmp	r6, r0
    5ae4:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    5ae8:	d11d      	bne.n	5b26 <bt_att_recv+0x7e>
		if (handler->type == ATT_REQUEST &&
    5aea:	4472      	add	r2, lr
    5aec:	7896      	ldrb	r6, [r2, #2]
    5aee:	2e01      	cmp	r6, #1
    5af0:	d137      	bne.n	5b62 <bt_att_recv+0xba>
    5af2:	f3bf 8f5b 	dmb	ish
    5af6:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    5afa:	e852 3f00 	ldrex	r3, [r2]
    5afe:	f043 0001 	orr.w	r0, r3, #1
    5b02:	e842 0c00 	strex	ip, r0, [r2]
    5b06:	f1bc 0f00 	cmp.w	ip, #0
    5b0a:	d1f6      	bne.n	5afa <bt_att_recv+0x52>
    5b0c:	f3bf 8f5b 	dmb	ish
    5b10:	07da      	lsls	r2, r3, #31
    5b12:	d542      	bpl.n	5b9a <bt_att_recv+0xf2>
			BT_WARN("Ignoring unexpected request");
    5b14:	4a34      	ldr	r2, [pc, #208]	; (5be8 <bt_att_recv+0x140>)
    5b16:	4b35      	ldr	r3, [pc, #212]	; (5bec <bt_att_recv+0x144>)
    5b18:	9201      	str	r2, [sp, #4]
    5b1a:	9200      	str	r2, [sp, #0]
    5b1c:	681c      	ldr	r4, [r3, #0]
    5b1e:	4934      	ldr	r1, [pc, #208]	; (5bf0 <bt_att_recv+0x148>)
    5b20:	4b34      	ldr	r3, [pc, #208]	; (5bf4 <bt_att_recv+0x14c>)
    5b22:	4837      	ldr	r0, [pc, #220]	; (5c00 <bt_att_recv+0x158>)
    5b24:	e7ce      	b.n	5ac4 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5b26:	3301      	adds	r3, #1
    5b28:	2b1b      	cmp	r3, #27
    5b2a:	d1d8      	bne.n	5ade <bt_att_recv+0x36>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    5b2c:	4a2e      	ldr	r2, [pc, #184]	; (5be8 <bt_att_recv+0x140>)
    5b2e:	4b2f      	ldr	r3, [pc, #188]	; (5bec <bt_att_recv+0x144>)
    5b30:	9001      	str	r0, [sp, #4]
    5b32:	9202      	str	r2, [sp, #8]
    5b34:	9200      	str	r2, [sp, #0]
    5b36:	681e      	ldr	r6, [r3, #0]
    5b38:	4832      	ldr	r0, [pc, #200]	; (5c04 <bt_att_recv+0x15c>)
    5b3a:	4b2e      	ldr	r3, [pc, #184]	; (5bf4 <bt_att_recv+0x14c>)
    5b3c:	492c      	ldr	r1, [pc, #176]	; (5bf0 <bt_att_recv+0x148>)
    5b3e:	47b0      	blx	r6
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    5b40:	782d      	ldrb	r5, [r5, #0]
    5b42:	4628      	mov	r0, r5
    5b44:	f7ff faac 	bl	50a0 <att_op_get_type>
    5b48:	2800      	cmp	r0, #0
    5b4a:	d0bc      	beq.n	5ac6 <bt_att_recv+0x1e>
	if (!req) {
    5b4c:	2d00      	cmp	r5, #0
    5b4e:	d0ba      	beq.n	5ac6 <bt_att_recv+0x1e>
    5b50:	2306      	movs	r3, #6
    5b52:	2200      	movs	r2, #0
    5b54:	4629      	mov	r1, r5
    5b56:	6820      	ldr	r0, [r4, #0]
}
    5b58:	b005      	add	sp, #20
    5b5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5b5e:	f7ff bf81 	b.w	5a64 <send_err_rsp.part.11>
		} else if (handler->type == ATT_INDICATION &&
    5b62:	2e05      	cmp	r6, #5
    5b64:	d119      	bne.n	5b9a <bt_att_recv+0xf2>
    5b66:	f3bf 8f5b 	dmb	ish
    5b6a:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    5b6e:	e852 3f00 	ldrex	r3, [r2]
    5b72:	f043 0002 	orr.w	r0, r3, #2
    5b76:	e842 0c00 	strex	ip, r0, [r2]
    5b7a:	f1bc 0f00 	cmp.w	ip, #0
    5b7e:	d1f6      	bne.n	5b6e <bt_att_recv+0xc6>
    5b80:	f3bf 8f5b 	dmb	ish
    5b84:	079b      	lsls	r3, r3, #30
    5b86:	d508      	bpl.n	5b9a <bt_att_recv+0xf2>
			BT_WARN("Ignoring unexpected indication");
    5b88:	4a17      	ldr	r2, [pc, #92]	; (5be8 <bt_att_recv+0x140>)
    5b8a:	4b18      	ldr	r3, [pc, #96]	; (5bec <bt_att_recv+0x144>)
    5b8c:	9201      	str	r2, [sp, #4]
    5b8e:	9200      	str	r2, [sp, #0]
    5b90:	681c      	ldr	r4, [r3, #0]
    5b92:	4917      	ldr	r1, [pc, #92]	; (5bf0 <bt_att_recv+0x148>)
    5b94:	4b17      	ldr	r3, [pc, #92]	; (5bf4 <bt_att_recv+0x14c>)
    5b96:	481c      	ldr	r0, [pc, #112]	; (5c08 <bt_att_recv+0x160>)
    5b98:	e794      	b.n	5ac4 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    5b9a:	eb01 030e 	add.w	r3, r1, lr
    5b9e:	89b8      	ldrh	r0, [r7, #12]
    5ba0:	785a      	ldrb	r2, [r3, #1]
    5ba2:	4282      	cmp	r2, r0
    5ba4:	d90f      	bls.n	5bc6 <bt_att_recv+0x11e>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    5ba6:	4a10      	ldr	r2, [pc, #64]	; (5be8 <bt_att_recv+0x140>)
    5ba8:	9203      	str	r2, [sp, #12]
    5baa:	782b      	ldrb	r3, [r5, #0]
    5bac:	9302      	str	r3, [sp, #8]
    5bae:	4b0f      	ldr	r3, [pc, #60]	; (5bec <bt_att_recv+0x144>)
    5bb0:	9001      	str	r0, [sp, #4]
    5bb2:	9200      	str	r2, [sp, #0]
    5bb4:	681f      	ldr	r7, [r3, #0]
    5bb6:	490e      	ldr	r1, [pc, #56]	; (5bf0 <bt_att_recv+0x148>)
    5bb8:	4b0e      	ldr	r3, [pc, #56]	; (5bf4 <bt_att_recv+0x14c>)
    5bba:	4814      	ldr	r0, [pc, #80]	; (5c0c <bt_att_recv+0x164>)
    5bbc:	47b8      	blx	r7
	if (handler->type == ATT_REQUEST && err) {
    5bbe:	2e01      	cmp	r6, #1
    5bc0:	d181      	bne.n	5ac6 <bt_att_recv+0x1e>
		err = BT_ATT_ERR_INVALID_PDU;
    5bc2:	2304      	movs	r3, #4
    5bc4:	e00a      	b.n	5bdc <bt_att_recv+0x134>
		err = handler->func(att, buf);
    5bc6:	685b      	ldr	r3, [r3, #4]
    5bc8:	4639      	mov	r1, r7
    5bca:	4620      	mov	r0, r4
    5bcc:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    5bce:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    5bd0:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    5bd2:	f47f af78 	bne.w	5ac6 <bt_att_recv+0x1e>
    5bd6:	2800      	cmp	r0, #0
    5bd8:	f43f af75 	beq.w	5ac6 <bt_att_recv+0x1e>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    5bdc:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    5bde:	2900      	cmp	r1, #0
    5be0:	f43f af71 	beq.w	5ac6 <bt_att_recv+0x1e>
    5be4:	2200      	movs	r2, #0
    5be6:	e7b6      	b.n	5b56 <bt_att_recv+0xae>
    5be8:	000159e9 	.word	0x000159e9
    5bec:	20003ad4 	.word	0x20003ad4
    5bf0:	00016791 	.word	0x00016791
    5bf4:	00017201 	.word	0x00017201
    5bf8:	000173b2 	.word	0x000173b2
    5bfc:	00017490 	.word	0x00017490
    5c00:	000173dd 	.word	0x000173dd
    5c04:	00017467 	.word	0x00017467
    5c08:	00017409 	.word	0x00017409
    5c0c:	00017438 	.word	0x00017438

00005c10 <att_read_group_req>:
{
    5c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5c14:	898b      	ldrh	r3, [r1, #12]
    5c16:	2b06      	cmp	r3, #6
{
    5c18:	b08d      	sub	sp, #52	; 0x34
    5c1a:	4680      	mov	r8, r0
    5c1c:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5c1e:	d001      	beq.n	5c24 <att_read_group_req+0x14>
    5c20:	2b14      	cmp	r3, #20
    5c22:	d168      	bne.n	5cf6 <att_read_group_req+0xe6>
	req = (void *)buf->data;
    5c24:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    5c26:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5c28:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5c2c:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5c30:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5c32:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    5c34:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    5c36:	f00e f852 	bl	13cde <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5c3a:	4621      	mov	r1, r4
    5c3c:	4638      	mov	r0, r7
    5c3e:	f7ff fc2d 	bl	549c <uuid_create>
    5c42:	2800      	cmp	r0, #0
    5c44:	d059      	beq.n	5cfa <att_read_group_req+0xea>
	if (!start || !end) {
    5c46:	2d00      	cmp	r5, #0
    5c48:	d05a      	beq.n	5d00 <att_read_group_req+0xf0>
    5c4a:	2400      	movs	r4, #0
    5c4c:	2e00      	cmp	r6, #0
    5c4e:	d056      	beq.n	5cfe <att_read_group_req+0xee>
	if (start > end) {
    5c50:	42b5      	cmp	r5, r6
    5c52:	d855      	bhi.n	5d00 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5c54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5c58:	4669      	mov	r1, sp
    5c5a:	4638      	mov	r0, r7
    5c5c:	f88d 4000 	strb.w	r4, [sp]
    5c60:	f8ad 3002 	strh.w	r3, [sp, #2]
    5c64:	f7fc f95a 	bl	1f1c <bt_uuid_cmp>
    5c68:	bb38      	cbnz	r0, 5cba <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    5c6a:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    5c6e:	2214      	movs	r2, #20
    5c70:	2100      	movs	r1, #0
    5c72:	a807      	add	r0, sp, #28
    5c74:	f7fc f800 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    5c78:	2201      	movs	r2, #1
    5c7a:	2111      	movs	r1, #17
    5c7c:	4648      	mov	r0, r9
    5c7e:	f7ff fe7d 	bl	597c <bt_att_create_pdu>
    5c82:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    5c84:	2800      	cmp	r0, #0
    5c86:	d038      	beq.n	5cfa <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5c88:	2101      	movs	r1, #1
    5c8a:	3008      	adds	r0, #8
	data.uuid = uuid;
    5c8c:	9708      	str	r7, [sp, #32]
	data.att = att;
    5c8e:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5c92:	f00e f805 	bl	13ca0 <net_buf_simple_add>
	data.rsp->len = 0;
    5c96:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5c98:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5c9a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    5c9c:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5c9e:	4a1c      	ldr	r2, [pc, #112]	; (5d10 <att_read_group_req+0x100>)
	data.group = NULL;
    5ca0:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5ca2:	4631      	mov	r1, r6
    5ca4:	4628      	mov	r0, r5
    5ca6:	f000 fe8f 	bl	69c8 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    5caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5cac:	781c      	ldrb	r4, [r3, #0]
    5cae:	b9d4      	cbnz	r4, 5ce6 <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    5cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
    5cb2:	f00d ffbd 	bl	13c30 <net_buf_unref>
    5cb6:	230a      	movs	r3, #10
    5cb8:	e00c      	b.n	5cd4 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    5cba:	f642 0301 	movw	r3, #10241	; 0x2801
    5cbe:	a901      	add	r1, sp, #4
    5cc0:	4638      	mov	r0, r7
    5cc2:	f88d 4004 	strb.w	r4, [sp, #4]
    5cc6:	f8ad 3006 	strh.w	r3, [sp, #6]
    5cca:	f7fc f927 	bl	1f1c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5cce:	2800      	cmp	r0, #0
    5cd0:	d0cb      	beq.n	5c6a <att_read_group_req+0x5a>
    5cd2:	2310      	movs	r3, #16
    5cd4:	462a      	mov	r2, r5
    5cd6:	2110      	movs	r1, #16
    5cd8:	4648      	mov	r0, r9
    5cda:	f7ff fec3 	bl	5a64 <send_err_rsp.part.11>
}
    5cde:	4620      	mov	r0, r4
    5ce0:	b00d      	add	sp, #52	; 0x34
    5ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5ce6:	4b0b      	ldr	r3, [pc, #44]	; (5d14 <att_read_group_req+0x104>)
    5ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5cea:	2104      	movs	r1, #4
    5cec:	4648      	mov	r0, r9
    5cee:	f7ff f85d 	bl	4dac <bt_l2cap_send_cb>
		return 0;
    5cf2:	2400      	movs	r4, #0
    5cf4:	e7f3      	b.n	5cde <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    5cf6:	2404      	movs	r4, #4
    5cf8:	e7f1      	b.n	5cde <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    5cfa:	240e      	movs	r4, #14
    5cfc:	e7ef      	b.n	5cde <att_read_group_req+0xce>
			*err = 0;
    5cfe:	4635      	mov	r5, r6
    5d00:	2301      	movs	r3, #1
    5d02:	462a      	mov	r2, r5
    5d04:	2110      	movs	r1, #16
    5d06:	4648      	mov	r0, r9
    5d08:	f7ff feac 	bl	5a64 <send_err_rsp.part.11>
    5d0c:	e7f1      	b.n	5cf2 <att_read_group_req+0xe2>
    5d0e:	bf00      	nop
    5d10:	00005165 	.word	0x00005165
    5d14:	00005539 	.word	0x00005539

00005d18 <att_read_mult_req>:
{
    5d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5d1c:	6804      	ldr	r4, [r0, #0]
{
    5d1e:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    5d20:	2214      	movs	r2, #20
{
    5d22:	4606      	mov	r6, r0
    5d24:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    5d26:	a801      	add	r0, sp, #4
    5d28:	2100      	movs	r1, #0
    5d2a:	f7fb ffa5 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    5d2e:	2200      	movs	r2, #0
    5d30:	210f      	movs	r1, #15
    5d32:	4620      	mov	r0, r4
    5d34:	f7ff fe22 	bl	597c <bt_att_create_pdu>
    5d38:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5d3a:	b368      	cbz	r0, 5d98 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5d3c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 5da0 <att_read_mult_req+0x88>
	data.att = att;
    5d40:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    5d42:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5d46:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    5d4a:	89ab      	ldrh	r3, [r5, #12]
    5d4c:	2b01      	cmp	r3, #1
    5d4e:	d806      	bhi.n	5d5e <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5d50:	4b12      	ldr	r3, [pc, #72]	; (5d9c <att_read_mult_req+0x84>)
    5d52:	9a03      	ldr	r2, [sp, #12]
    5d54:	2104      	movs	r1, #4
    5d56:	4620      	mov	r0, r4
    5d58:	f7ff f828 	bl	4dac <bt_l2cap_send_cb>
    5d5c:	e018      	b.n	5d90 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    5d5e:	4638      	mov	r0, r7
    5d60:	f00d ffcd 	bl	13cfe <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5d64:	ab01      	add	r3, sp, #4
    5d66:	464a      	mov	r2, r9
    5d68:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    5d6a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5d6c:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5d70:	f000 fe2a 	bl	69c8 <bt_gatt_foreach_attr>
		if (data.err) {
    5d74:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5d78:	2b00      	cmp	r3, #0
    5d7a:	d0e6      	beq.n	5d4a <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    5d7c:	9803      	ldr	r0, [sp, #12]
    5d7e:	f00d ff57 	bl	13c30 <net_buf_unref>
    5d82:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5d86:	4632      	mov	r2, r6
    5d88:	210e      	movs	r1, #14
    5d8a:	4620      	mov	r0, r4
    5d8c:	f7ff fe6a 	bl	5a64 <send_err_rsp.part.11>
	return 0;
    5d90:	2000      	movs	r0, #0
}
    5d92:	b007      	add	sp, #28
    5d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    5d98:	200e      	movs	r0, #14
    5d9a:	e7fa      	b.n	5d92 <att_read_mult_req+0x7a>
    5d9c:	00005539 	.word	0x00005539
    5da0:	00005905 	.word	0x00005905

00005da4 <att_read_rsp>:
{
    5da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5da8:	4607      	mov	r7, r0
    5daa:	b086      	sub	sp, #24
    5dac:	460c      	mov	r4, r1
    5dae:	4690      	mov	r8, r2
	if (!handle) {
    5db0:	461d      	mov	r5, r3
    5db2:	b3a3      	cbz	r3, 5e1e <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    5db4:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    5db6:	2214      	movs	r2, #20
    5db8:	2100      	movs	r1, #0
    5dba:	a801      	add	r0, sp, #4
    5dbc:	f7fb ff5c 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    5dc0:	2200      	movs	r2, #0
    5dc2:	4641      	mov	r1, r8
    5dc4:	4630      	mov	r0, r6
    5dc6:	f7ff fdd9 	bl	597c <bt_att_create_pdu>
    5dca:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5dcc:	b348      	cbz	r0, 5e22 <att_read_rsp+0x7e>
	data.offset = offset;
    5dce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    5dd2:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5dd6:	2301      	movs	r3, #1
    5dd8:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5ddc:	4a12      	ldr	r2, [pc, #72]	; (5e28 <att_read_rsp+0x84>)
	data.att = att;
    5dde:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5de0:	ab01      	add	r3, sp, #4
    5de2:	4629      	mov	r1, r5
    5de4:	4628      	mov	r0, r5
    5de6:	f000 fdef 	bl	69c8 <bt_gatt_foreach_attr>
	if (data.err) {
    5dea:	f89d 7014 	ldrb.w	r7, [sp, #20]
    5dee:	b17f      	cbz	r7, 5e10 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    5df0:	9803      	ldr	r0, [sp, #12]
    5df2:	f00d ff1d 	bl	13c30 <net_buf_unref>
	if (!req) {
    5df6:	b13c      	cbz	r4, 5e08 <att_read_rsp+0x64>
    5df8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5dfc:	462a      	mov	r2, r5
    5dfe:	4621      	mov	r1, r4
    5e00:	4630      	mov	r0, r6
    5e02:	f7ff fe2f 	bl	5a64 <send_err_rsp.part.11>
		return 0;
    5e06:	2400      	movs	r4, #0
}
    5e08:	4620      	mov	r0, r4
    5e0a:	b006      	add	sp, #24
    5e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5e10:	4b06      	ldr	r3, [pc, #24]	; (5e2c <att_read_rsp+0x88>)
    5e12:	9a03      	ldr	r2, [sp, #12]
    5e14:	2104      	movs	r1, #4
    5e16:	4630      	mov	r0, r6
    5e18:	f7fe ffc8 	bl	4dac <bt_l2cap_send_cb>
    5e1c:	e7f3      	b.n	5e06 <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    5e1e:	2401      	movs	r4, #1
    5e20:	e7f2      	b.n	5e08 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    5e22:	240e      	movs	r4, #14
    5e24:	e7f0      	b.n	5e08 <att_read_rsp+0x64>
    5e26:	bf00      	nop
    5e28:	00005905 	.word	0x00005905
    5e2c:	00005539 	.word	0x00005539

00005e30 <att_read_blob_req>:
{
    5e30:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    5e32:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    5e34:	8813      	ldrh	r3, [r2, #0]
    5e36:	8852      	ldrh	r2, [r2, #2]
    5e38:	9200      	str	r2, [sp, #0]
    5e3a:	210c      	movs	r1, #12
    5e3c:	220d      	movs	r2, #13
    5e3e:	f7ff ffb1 	bl	5da4 <att_read_rsp>
}
    5e42:	b003      	add	sp, #12
    5e44:	f85d fb04 	ldr.w	pc, [sp], #4

00005e48 <att_read_req>:
{
    5e48:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    5e4a:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    5e4c:	2200      	movs	r2, #0
    5e4e:	881b      	ldrh	r3, [r3, #0]
    5e50:	9200      	str	r2, [sp, #0]
    5e52:	210a      	movs	r1, #10
    5e54:	220b      	movs	r2, #11
    5e56:	f7ff ffa5 	bl	5da4 <att_read_rsp>
}
    5e5a:	b003      	add	sp, #12
    5e5c:	f85d fb04 	ldr.w	pc, [sp], #4

00005e60 <att_read_type_req>:
{
    5e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5e64:	898b      	ldrh	r3, [r1, #12]
    5e66:	2b06      	cmp	r3, #6
{
    5e68:	b08d      	sub	sp, #52	; 0x34
    5e6a:	4607      	mov	r7, r0
    5e6c:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5e6e:	d001      	beq.n	5e74 <att_read_type_req+0x14>
    5e70:	2b14      	cmp	r3, #20
    5e72:	d152      	bne.n	5f1a <att_read_type_req+0xba>
	req = (void *)buf->data;
    5e74:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    5e76:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5e78:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5e7c:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5e80:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5e82:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    5e84:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    5e88:	f00d ff29 	bl	13cde <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5e8c:	4631      	mov	r1, r6
    5e8e:	4640      	mov	r0, r8
    5e90:	f7ff fb04 	bl	549c <uuid_create>
    5e94:	b198      	cbz	r0, 5ebe <att_read_type_req+0x5e>
	if (!start || !end) {
    5e96:	2d00      	cmp	r5, #0
    5e98:	d042      	beq.n	5f20 <att_read_type_req+0xc0>
    5e9a:	2c00      	cmp	r4, #0
    5e9c:	d03f      	beq.n	5f1e <att_read_type_req+0xbe>
	if (start > end) {
    5e9e:	42a5      	cmp	r5, r4
    5ea0:	d83e      	bhi.n	5f20 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    5ea2:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    5ea4:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    5ea6:	2100      	movs	r1, #0
    5ea8:	eb0d 0002 	add.w	r0, sp, r2
    5eac:	f7fb fee4 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    5eb0:	2201      	movs	r2, #1
    5eb2:	2109      	movs	r1, #9
    5eb4:	4630      	mov	r0, r6
    5eb6:	f7ff fd61 	bl	597c <bt_att_create_pdu>
    5eba:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    5ebc:	b908      	cbnz	r0, 5ec2 <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    5ebe:	240e      	movs	r4, #14
    5ec0:	e027      	b.n	5f12 <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5ec2:	2101      	movs	r1, #1
    5ec4:	3008      	adds	r0, #8
	data.att = att;
    5ec6:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    5ec8:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5ecc:	f00d fee8 	bl	13ca0 <net_buf_simple_add>
	data.rsp->len = 0;
    5ed0:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5ed2:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5ed4:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5ed6:	4621      	mov	r1, r4
	data.rsp->len = 0;
    5ed8:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5eda:	4a14      	ldr	r2, [pc, #80]	; (5f2c <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5edc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5ee0:	4628      	mov	r0, r5
    5ee2:	ab06      	add	r3, sp, #24
    5ee4:	f000 fd70 	bl	69c8 <bt_gatt_foreach_attr>
	if (data.err) {
    5ee8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    5eec:	b15c      	cbz	r4, 5f06 <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    5eee:	9808      	ldr	r0, [sp, #32]
    5ef0:	f00d fe9e 	bl	13c30 <net_buf_unref>
    5ef4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    5ef8:	462a      	mov	r2, r5
    5efa:	2108      	movs	r1, #8
    5efc:	4630      	mov	r0, r6
    5efe:	f7ff fdb1 	bl	5a64 <send_err_rsp.part.11>
		return 0;
    5f02:	2400      	movs	r4, #0
    5f04:	e005      	b.n	5f12 <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5f06:	4b0a      	ldr	r3, [pc, #40]	; (5f30 <att_read_type_req+0xd0>)
    5f08:	9a08      	ldr	r2, [sp, #32]
    5f0a:	2104      	movs	r1, #4
    5f0c:	4630      	mov	r0, r6
    5f0e:	f7fe ff4d 	bl	4dac <bt_l2cap_send_cb>
}
    5f12:	4620      	mov	r0, r4
    5f14:	b00d      	add	sp, #52	; 0x34
    5f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    5f1a:	2404      	movs	r4, #4
    5f1c:	e7f9      	b.n	5f12 <att_read_type_req+0xb2>
			*err = 0;
    5f1e:	4625      	mov	r5, r4
    5f20:	2301      	movs	r3, #1
    5f22:	462a      	mov	r2, r5
    5f24:	2108      	movs	r1, #8
    5f26:	4648      	mov	r0, r9
    5f28:	e7e9      	b.n	5efe <att_read_type_req+0x9e>
    5f2a:	bf00      	nop
    5f2c:	000053e1 	.word	0x000053e1
    5f30:	00005539 	.word	0x00005539

00005f34 <att_find_type_req>:
{
    5f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5f38:	f8d0 9000 	ldr.w	r9, [r0]
{
    5f3c:	4680      	mov	r8, r0
	req = (void *)buf->data;
    5f3e:	4608      	mov	r0, r1
{
    5f40:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    5f42:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    5f46:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    5f48:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    5f4a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5f4c:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    5f4e:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    5f50:	f00d fec5 	bl	13cde <net_buf_simple_pull>
    5f54:	4682      	mov	sl, r0
	if (!start || !end) {
    5f56:	2d00      	cmp	r5, #0
    5f58:	d057      	beq.n	600a <att_find_type_req+0xd6>
    5f5a:	2400      	movs	r4, #0
    5f5c:	2f00      	cmp	r7, #0
    5f5e:	d053      	beq.n	6008 <att_find_type_req+0xd4>
	if (start > end) {
    5f60:	42bd      	cmp	r5, r7
    5f62:	d852      	bhi.n	600a <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    5f64:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5f68:	a902      	add	r1, sp, #8
    5f6a:	a801      	add	r0, sp, #4
    5f6c:	f8ad 6006 	strh.w	r6, [sp, #6]
    5f70:	f88d 4004 	strb.w	r4, [sp, #4]
    5f74:	f88d 4008 	strb.w	r4, [sp, #8]
    5f78:	f8ad 300a 	strh.w	r3, [sp, #10]
    5f7c:	f7fb ffce 	bl	1f1c <bt_uuid_cmp>
    5f80:	4606      	mov	r6, r0
    5f82:	b148      	cbz	r0, 5f98 <att_find_type_req+0x64>
    5f84:	230a      	movs	r3, #10
    5f86:	462a      	mov	r2, r5
    5f88:	2106      	movs	r1, #6
    5f8a:	4648      	mov	r0, r9
    5f8c:	f7ff fd6a 	bl	5a64 <send_err_rsp.part.11>
}
    5f90:	4620      	mov	r0, r4
    5f92:	b009      	add	sp, #36	; 0x24
    5f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    5f98:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    5f9c:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    5fa0:	2214      	movs	r2, #20
    5fa2:	4631      	mov	r1, r6
    5fa4:	a803      	add	r0, sp, #12
    5fa6:	f7fb fe67 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    5faa:	4632      	mov	r2, r6
    5fac:	2107      	movs	r1, #7
    5fae:	4648      	mov	r0, r9
    5fb0:	f7ff fce4 	bl	597c <bt_att_create_pdu>
    5fb4:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    5fb6:	b328      	cbz	r0, 6004 <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5fb8:	230a      	movs	r3, #10
    5fba:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5fbe:	4a14      	ldr	r2, [pc, #80]	; (6010 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    5fc0:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5fc4:	ab03      	add	r3, sp, #12
    5fc6:	4639      	mov	r1, r7
    5fc8:	4628      	mov	r0, r5
	data.att = att;
    5fca:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    5fce:	9605      	str	r6, [sp, #20]
	data.value = value;
    5fd0:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5fd4:	f000 fcf8 	bl	69c8 <bt_gatt_foreach_attr>
	if (data.err) {
    5fd8:	f89d 401d 	ldrb.w	r4, [sp, #29]
    5fdc:	b15c      	cbz	r4, 5ff6 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    5fde:	9804      	ldr	r0, [sp, #16]
    5fe0:	f00d fe26 	bl	13c30 <net_buf_unref>
    5fe4:	f89d 301d 	ldrb.w	r3, [sp, #29]
    5fe8:	462a      	mov	r2, r5
    5fea:	2106      	movs	r1, #6
    5fec:	4648      	mov	r0, r9
    5fee:	f7ff fd39 	bl	5a64 <send_err_rsp.part.11>
		return 0;
    5ff2:	2400      	movs	r4, #0
    5ff4:	e7cc      	b.n	5f90 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5ff6:	4b07      	ldr	r3, [pc, #28]	; (6014 <att_find_type_req+0xe0>)
    5ff8:	9a04      	ldr	r2, [sp, #16]
    5ffa:	2104      	movs	r1, #4
    5ffc:	4648      	mov	r0, r9
    5ffe:	f7fe fed5 	bl	4dac <bt_l2cap_send_cb>
    6002:	e7c5      	b.n	5f90 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    6004:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    6006:	e7c3      	b.n	5f90 <att_find_type_req+0x5c>
			*err = 0;
    6008:	463d      	mov	r5, r7
    600a:	2301      	movs	r3, #1
    600c:	e7ec      	b.n	5fe8 <att_find_type_req+0xb4>
    600e:	bf00      	nop
    6010:	000052cd 	.word	0x000052cd
    6014:	00005539 	.word	0x00005539

00006018 <att_find_info_req>:
{
    6018:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    601a:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    601c:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    601e:	881d      	ldrh	r5, [r3, #0]
{
    6020:	b085      	sub	sp, #20
    6022:	4607      	mov	r7, r0
	if (!start || !end) {
    6024:	b375      	cbz	r5, 6084 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    6026:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    6028:	b35c      	cbz	r4, 6082 <att_find_info_req+0x6a>
	if (start > end) {
    602a:	42a5      	cmp	r5, r4
    602c:	d82a      	bhi.n	6084 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    602e:	2210      	movs	r2, #16
    6030:	2100      	movs	r1, #0
    6032:	4668      	mov	r0, sp
    6034:	f7fb fe20 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    6038:	2200      	movs	r2, #0
    603a:	2105      	movs	r1, #5
    603c:	4630      	mov	r0, r6
    603e:	f7ff fc9d 	bl	597c <bt_att_create_pdu>
    6042:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    6044:	b910      	cbnz	r0, 604c <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    6046:	200e      	movs	r0, #14
}
    6048:	b005      	add	sp, #20
    604a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    604c:	4621      	mov	r1, r4
    604e:	466b      	mov	r3, sp
    6050:	4a0d      	ldr	r2, [pc, #52]	; (6088 <att_find_info_req+0x70>)
	data.att = att;
    6052:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6054:	4628      	mov	r0, r5
    6056:	f000 fcb7 	bl	69c8 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    605a:	9c02      	ldr	r4, [sp, #8]
    605c:	b94c      	cbnz	r4, 6072 <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    605e:	9801      	ldr	r0, [sp, #4]
    6060:	f00d fde6 	bl	13c30 <net_buf_unref>
    6064:	230a      	movs	r3, #10
    6066:	462a      	mov	r2, r5
    6068:	2104      	movs	r1, #4
    606a:	4630      	mov	r0, r6
    606c:	f7ff fcfa 	bl	5a64 <send_err_rsp.part.11>
    6070:	e005      	b.n	607e <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6072:	4b06      	ldr	r3, [pc, #24]	; (608c <att_find_info_req+0x74>)
    6074:	9a01      	ldr	r2, [sp, #4]
    6076:	2104      	movs	r1, #4
    6078:	4630      	mov	r0, r6
    607a:	f7fe fe97 	bl	4dac <bt_l2cap_send_cb>
		return 0;
    607e:	2000      	movs	r0, #0
    6080:	e7e2      	b.n	6048 <att_find_info_req+0x30>
			*err = 0;
    6082:	4625      	mov	r5, r4
    6084:	2301      	movs	r3, #1
    6086:	e7ee      	b.n	6066 <att_find_info_req+0x4e>
    6088:	00005233 	.word	0x00005233
    608c:	00005539 	.word	0x00005539

00006090 <att_write_rsp.part.12.constprop.17>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    6090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6094:	b086      	sub	sp, #24
    6096:	4690      	mov	r8, r2
    6098:	4605      	mov	r5, r0
    609a:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    609c:	2218      	movs	r2, #24
    609e:	2100      	movs	r1, #0
    60a0:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    60a2:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    60a4:	f7fb fde8 	bl	1c78 <memset>
	if (rsp) {
    60a8:	f1b8 0f00 	cmp.w	r8, #0
    60ac:	d11f      	bne.n	60ee <att_write_rsp.part.12.constprop.17+0x5e>
	data.offset = offset;
    60ae:	2300      	movs	r3, #0
    60b0:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    60b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    60b6:	9303      	str	r3, [sp, #12]
	data.len = len;
    60b8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    60bc:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    60c0:	2301      	movs	r3, #1
    60c2:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    60c6:	4a1b      	ldr	r2, [pc, #108]	; (6134 <att_write_rsp.part.12.constprop.17+0xa4>)
	data.conn = conn;
    60c8:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    60ca:	466b      	mov	r3, sp
    60cc:	4639      	mov	r1, r7
    60ce:	4638      	mov	r0, r7
	data.op = op;
    60d0:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    60d4:	f000 fc78 	bl	69c8 <bt_gatt_foreach_attr>
	if (data.err) {
    60d8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    60dc:	b98c      	cbnz	r4, 6102 <att_write_rsp.part.12.constprop.17+0x72>
	if (data.buf) {
    60de:	9a01      	ldr	r2, [sp, #4]
    60e0:	b1b2      	cbz	r2, 6110 <att_write_rsp.part.12.constprop.17+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    60e2:	4b15      	ldr	r3, [pc, #84]	; (6138 <att_write_rsp.part.12.constprop.17+0xa8>)
    60e4:	2104      	movs	r1, #4
    60e6:	4628      	mov	r0, r5
    60e8:	f7fe fe60 	bl	4dac <bt_l2cap_send_cb>
    60ec:	e011      	b.n	6112 <att_write_rsp.part.12.constprop.17+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    60ee:	2200      	movs	r2, #0
    60f0:	4641      	mov	r1, r8
    60f2:	4628      	mov	r0, r5
    60f4:	f7ff fc42 	bl	597c <bt_att_create_pdu>
    60f8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    60fa:	2800      	cmp	r0, #0
    60fc:	d1d7      	bne.n	60ae <att_write_rsp.part.12.constprop.17+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    60fe:	240e      	movs	r4, #14
    6100:	e007      	b.n	6112 <att_write_rsp.part.12.constprop.17+0x82>
		if (rsp) {
    6102:	f1b8 0f00 	cmp.w	r8, #0
    6106:	d00f      	beq.n	6128 <att_write_rsp.part.12.constprop.17+0x98>
			net_buf_unref(data.buf);
    6108:	9801      	ldr	r0, [sp, #4]
    610a:	f00d fd91 	bl	13c30 <net_buf_unref>
	if (!req) {
    610e:	b926      	cbnz	r6, 611a <att_write_rsp.part.12.constprop.17+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6110:	2400      	movs	r4, #0
}
    6112:	4620      	mov	r0, r4
    6114:	b006      	add	sp, #24
    6116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    611a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    611e:	463a      	mov	r2, r7
    6120:	4631      	mov	r1, r6
    6122:	4628      	mov	r0, r5
    6124:	f7ff fc9e 	bl	5a64 <send_err_rsp.part.11>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6128:	2e18      	cmp	r6, #24
    612a:	d1f1      	bne.n	6110 <att_write_rsp.part.12.constprop.17+0x80>
    612c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6130:	e7ef      	b.n	6112 <att_write_rsp.part.12.constprop.17+0x82>
    6132:	bf00      	nop
    6134:	00005615 	.word	0x00005615
    6138:	00005539 	.word	0x00005539

0000613c <att_signed_write_cmd>:
{
    613c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    6140:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    6142:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    6144:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    6148:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    614a:	4620      	mov	r0, r4
    614c:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    614e:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    6152:	f00d fdbc 	bl	13cce <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    6156:	4629      	mov	r1, r5
    6158:	4630      	mov	r0, r6
    615a:	f000 fd74 	bl	6c46 <bt_smp_sign_verify>
	if (err) {
    615e:	4607      	mov	r7, r0
    6160:	b160      	cbz	r0, 617c <att_signed_write_cmd+0x40>
		BT_ERR("Error verifying data");
    6162:	4a13      	ldr	r2, [pc, #76]	; (61b0 <att_signed_write_cmd+0x74>)
    6164:	4b13      	ldr	r3, [pc, #76]	; (61b4 <att_signed_write_cmd+0x78>)
    6166:	9201      	str	r2, [sp, #4]
    6168:	9200      	str	r2, [sp, #0]
    616a:	681c      	ldr	r4, [r3, #0]
    616c:	4812      	ldr	r0, [pc, #72]	; (61b8 <att_signed_write_cmd+0x7c>)
    616e:	4b13      	ldr	r3, [pc, #76]	; (61bc <att_signed_write_cmd+0x80>)
    6170:	4913      	ldr	r1, [pc, #76]	; (61c0 <att_signed_write_cmd+0x84>)
    6172:	47a0      	blx	r4
    6174:	2000      	movs	r0, #0
}
    6176:	b002      	add	sp, #8
    6178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    617c:	2101      	movs	r1, #1
    617e:	4620      	mov	r0, r4
    6180:	f00d fdad 	bl	13cde <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    6184:	2102      	movs	r1, #2
    6186:	4620      	mov	r0, r4
    6188:	f00d fda9 	bl	13cde <net_buf_simple_pull>
	if (!handle) {
    618c:	f1b8 0f00 	cmp.w	r8, #0
    6190:	d00c      	beq.n	61ac <att_signed_write_cmd+0x70>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    6192:	7b2b      	ldrb	r3, [r5, #12]
    6194:	3b0c      	subs	r3, #12
    6196:	b2db      	uxtb	r3, r3
    6198:	9301      	str	r3, [sp, #4]
    619a:	68ab      	ldr	r3, [r5, #8]
    619c:	9300      	str	r3, [sp, #0]
    619e:	463a      	mov	r2, r7
    61a0:	4643      	mov	r3, r8
    61a2:	4639      	mov	r1, r7
    61a4:	4630      	mov	r0, r6
    61a6:	f7ff ff73 	bl	6090 <att_write_rsp.part.12.constprop.17>
    61aa:	e7e4      	b.n	6176 <att_signed_write_cmd+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
    61ac:	2001      	movs	r0, #1
    61ae:	e7e2      	b.n	6176 <att_signed_write_cmd+0x3a>
    61b0:	000159e9 	.word	0x000159e9
    61b4:	20003ad4 	.word	0x20003ad4
    61b8:	00017307 	.word	0x00017307
    61bc:	000171ec 	.word	0x000171ec
    61c0:	00016791 	.word	0x00016791

000061c4 <att_write_cmd>:
{
    61c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    61c6:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    61c8:	f101 0008 	add.w	r0, r1, #8
{
    61cc:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    61ce:	f00d fd96 	bl	13cfe <net_buf_simple_pull_le16>
	if (!handle) {
    61d2:	4603      	mov	r3, r0
    61d4:	b150      	cbz	r0, 61ec <att_write_cmd+0x28>
    61d6:	7b22      	ldrb	r2, [r4, #12]
    61d8:	9201      	str	r2, [sp, #4]
    61da:	68a2      	ldr	r2, [r4, #8]
    61dc:	9200      	str	r2, [sp, #0]
    61de:	2200      	movs	r2, #0
    61e0:	4611      	mov	r1, r2
    61e2:	4628      	mov	r0, r5
    61e4:	f7ff ff54 	bl	6090 <att_write_rsp.part.12.constprop.17>
}
    61e8:	b003      	add	sp, #12
    61ea:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    61ec:	2001      	movs	r0, #1
    61ee:	e7fb      	b.n	61e8 <att_write_cmd+0x24>

000061f0 <att_write_req>:
{
    61f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    61f2:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    61f4:	f101 0008 	add.w	r0, r1, #8
{
    61f8:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    61fa:	f00d fd80 	bl	13cfe <net_buf_simple_pull_le16>
	if (!handle) {
    61fe:	4603      	mov	r3, r0
    6200:	b150      	cbz	r0, 6218 <att_write_req+0x28>
    6202:	7b22      	ldrb	r2, [r4, #12]
    6204:	9201      	str	r2, [sp, #4]
    6206:	68a2      	ldr	r2, [r4, #8]
    6208:	9200      	str	r2, [sp, #0]
    620a:	2112      	movs	r1, #18
    620c:	2213      	movs	r2, #19
    620e:	4628      	mov	r0, r5
    6210:	f7ff ff3e 	bl	6090 <att_write_rsp.part.12.constprop.17>
}
    6214:	b003      	add	sp, #12
    6216:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6218:	2001      	movs	r0, #1
    621a:	e7fb      	b.n	6214 <att_write_req+0x24>

0000621c <bt_att_init>:

void bt_att_init(void)
{
    621c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    621e:	4803      	ldr	r0, [pc, #12]	; (622c <bt_att_init+0x10>)
    6220:	f7fe fd06 	bl	4c30 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    6224:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    6228:	f000 bbb8 	b.w	699c <bt_gatt_init>
    622c:	20003c38 	.word	0x20003c38

00006230 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    6230:	b510      	push	{r4, lr}
    6232:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    6234:	b1d8      	cbz	r0, 626e <bt_att_req_send+0x3e>
    6236:	b1d1      	cbz	r1, 626e <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6238:	f7ff f9ac 	bl	5594 <att_chan_get>
	if (!att) {
    623c:	4603      	mov	r3, r0
    623e:	b1c8      	cbz	r0, 6274 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    6240:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    6244:	b172      	cbz	r2, 6264 <bt_att_req_send+0x34>
	parent->next = child;
    6246:	2000      	movs	r0, #0
    6248:	6020      	str	r0, [r4, #0]
    624a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
Z_GENLIST_APPEND(slist, snode);
    624e:	b92a      	cbnz	r2, 625c <bt_att_req_send+0x2c>
	list->tail = node;
    6250:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
	list->head = node;
    6254:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    6258:	4610      	mov	r0, r2
    625a:	bd10      	pop	{r4, pc}
	parent->next = child;
    625c:	6014      	str	r4, [r2, #0]
	list->tail = node;
    625e:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
    6262:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    6264:	4621      	mov	r1, r4
}
    6266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    626a:	f7ff b9ff 	b.w	566c <att_send_req>
		return -EINVAL;
    626e:	f06f 0015 	mvn.w	r0, #21
    6272:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    6274:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    6278:	bd10      	pop	{r4, pc}

0000627a <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    627a:	4770      	bx	lr

0000627c <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    627c:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    627e:	2000      	movs	r0, #0
    6280:	4770      	bx	lr

00006282 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    6282:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    6284:	2300      	movs	r3, #0
    6286:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    6288:	461a      	mov	r2, r3
    628a:	42aa      	cmp	r2, r5
    628c:	d107      	bne.n	629e <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    628e:	890a      	ldrh	r2, [r1, #8]
    6290:	429a      	cmp	r2, r3
    6292:	d00d      	beq.n	62b0 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    6294:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    6296:	68ca      	ldr	r2, [r1, #12]
	}
}
    6298:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    629a:	4619      	mov	r1, r3
    629c:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    629e:	680c      	ldr	r4, [r1, #0]
    62a0:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    62a4:	3201      	adds	r2, #1
    62a6:	8924      	ldrh	r4, [r4, #8]
    62a8:	42a3      	cmp	r3, r4
    62aa:	bf38      	it	cc
    62ac:	4623      	movcc	r3, r4
    62ae:	e7ec      	b.n	628a <gatt_ccc_changed+0x8>
}
    62b0:	bc30      	pop	{r4, r5}
    62b2:	4770      	bx	lr

000062b4 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    62b4:	b410      	push	{r4}
    62b6:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    62b8:	699c      	ldr	r4, [r3, #24]
    62ba:	460a      	mov	r2, r1
    62bc:	6959      	ldr	r1, [r3, #20]
    62be:	4623      	mov	r3, r4
}
    62c0:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    62c2:	4718      	bx	r3

000062c4 <gatt_register>:
{
    62c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    62c6:	4a1e      	ldr	r2, [pc, #120]	; (6340 <gatt_register+0x7c>)
    62c8:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    62ca:	e890 0022 	ldmia.w	r0, {r1, r5}
	if (sys_slist_is_empty(&db)) {
    62ce:	b14b      	cbz	r3, 62e4 <gatt_register+0x20>
    62d0:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    62d2:	2b00      	cmp	r3, #0
    62d4:	d032      	beq.n	633c <gatt_register+0x78>
	handle = last->attrs[last->attr_count - 1].handle;
    62d6:	e913 0018 	ldmdb	r3, {r3, r4}
    62da:	2614      	movs	r6, #20
    62dc:	fb06 3304 	mla	r3, r6, r4, r3
    62e0:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    62e4:	b2ad      	uxth	r5, r5
    62e6:	2414      	movs	r4, #20
    62e8:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    62ec:	b109      	cbz	r1, 62f2 <gatt_register+0x2e>
    62ee:	42a9      	cmp	r1, r5
    62f0:	d108      	bne.n	6304 <gatt_register+0x40>
	parent->next = child;
    62f2:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    62f4:	f100 0108 	add.w	r1, r0, #8
    62f8:	6083      	str	r3, [r0, #8]
    62fa:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    62fc:	b9d0      	cbnz	r0, 6334 <gatt_register+0x70>
	list->tail = node;
    62fe:	6051      	str	r1, [r2, #4]
	list->head = node;
    6300:	6011      	str	r1, [r2, #0]
    6302:	e015      	b.n	6330 <gatt_register+0x6c>
		if (!attrs->handle) {
    6304:	8a0c      	ldrh	r4, [r1, #16]
    6306:	b92c      	cbnz	r4, 6314 <gatt_register+0x50>
			attrs->handle = ++handle;
    6308:	3301      	adds	r3, #1
    630a:	b29c      	uxth	r4, r3
    630c:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    630e:	3114      	adds	r1, #20
    6310:	4623      	mov	r3, r4
    6312:	e7eb      	b.n	62ec <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    6314:	42a3      	cmp	r3, r4
    6316:	d3fa      	bcc.n	630e <gatt_register+0x4a>
			BT_ERR("Unable to register handle 0x%04x",
    6318:	4a0a      	ldr	r2, [pc, #40]	; (6344 <gatt_register+0x80>)
    631a:	4b0b      	ldr	r3, [pc, #44]	; (6348 <gatt_register+0x84>)
    631c:	9202      	str	r2, [sp, #8]
    631e:	e88d 0014 	stmia.w	sp, {r2, r4}
    6322:	480a      	ldr	r0, [pc, #40]	; (634c <gatt_register+0x88>)
    6324:	681c      	ldr	r4, [r3, #0]
    6326:	490a      	ldr	r1, [pc, #40]	; (6350 <gatt_register+0x8c>)
    6328:	4b0a      	ldr	r3, [pc, #40]	; (6354 <gatt_register+0x90>)
    632a:	47a0      	blx	r4
			return -EINVAL;
    632c:	f06f 0015 	mvn.w	r0, #21
}
    6330:	b004      	add	sp, #16
    6332:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    6334:	6001      	str	r1, [r0, #0]
	list->tail = node;
    6336:	6051      	str	r1, [r2, #4]
	return 0;
    6338:	4618      	mov	r0, r3
    633a:	e7f9      	b.n	6330 <gatt_register+0x6c>
	handle = last->attrs[last->attr_count - 1].handle;
    633c:	681b      	ldr	r3, [r3, #0]
    633e:	deff      	udf	#255	; 0xff
    6340:	200005a8 	.word	0x200005a8
    6344:	000159e9 	.word	0x000159e9
    6348:	20003ad4 	.word	0x20003ad4
    634c:	000176c2 	.word	0x000176c2
    6350:	00016791 	.word	0x00016791
    6354:	00017568 	.word	0x00017568

00006358 <gatt_notify>:
{
    6358:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    635c:	468a      	mov	sl, r1
    635e:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6360:	211b      	movs	r1, #27
    6362:	1c9a      	adds	r2, r3, #2
{
    6364:	4680      	mov	r8, r0
    6366:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6368:	f7ff fb08 	bl	597c <bt_att_create_pdu>
	if (!buf) {
    636c:	4604      	mov	r4, r0
    636e:	b968      	cbnz	r0, 638c <gatt_notify+0x34>
		BT_WARN("No buffer available to send notification");
    6370:	4a13      	ldr	r2, [pc, #76]	; (63c0 <gatt_notify+0x68>)
    6372:	4b14      	ldr	r3, [pc, #80]	; (63c4 <gatt_notify+0x6c>)
    6374:	9201      	str	r2, [sp, #4]
    6376:	9200      	str	r2, [sp, #0]
    6378:	681c      	ldr	r4, [r3, #0]
    637a:	4813      	ldr	r0, [pc, #76]	; (63c8 <gatt_notify+0x70>)
    637c:	4b13      	ldr	r3, [pc, #76]	; (63cc <gatt_notify+0x74>)
    637e:	4914      	ldr	r1, [pc, #80]	; (63d0 <gatt_notify+0x78>)
    6380:	47a0      	blx	r4
    6382:	f06f 000b 	mvn.w	r0, #11
}
    6386:	b002      	add	sp, #8
    6388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    638c:	f100 0708 	add.w	r7, r0, #8
    6390:	2102      	movs	r1, #2
    6392:	4638      	mov	r0, r7
    6394:	f00d fc84 	bl	13ca0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    6398:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    639a:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    639c:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    63a0:	4638      	mov	r0, r7
    63a2:	f00d fc7d 	bl	13ca0 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    63a6:	4632      	mov	r2, r6
    63a8:	4649      	mov	r1, r9
    63aa:	4628      	mov	r0, r5
    63ac:	f7fb fc38 	bl	1c20 <memcpy>
    63b0:	4640      	mov	r0, r8
    63b2:	2300      	movs	r3, #0
    63b4:	4622      	mov	r2, r4
    63b6:	2104      	movs	r1, #4
    63b8:	f7fe fcf8 	bl	4dac <bt_l2cap_send_cb>
	return 0;
    63bc:	2000      	movs	r0, #0
    63be:	e7e2      	b.n	6386 <gatt_notify+0x2e>
    63c0:	000159e9 	.word	0x000159e9
    63c4:	20003ad4 	.word	0x20003ad4
    63c8:	00017689 	.word	0x00017689
    63cc:	000175a4 	.word	0x000175a4
    63d0:	00016791 	.word	0x00016791

000063d4 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    63d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;
	u16_t value_handle = params->attr->handle;
    63d8:	694b      	ldr	r3, [r1, #20]
{
    63da:	b087      	sub	sp, #28
    63dc:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    63de:	8a1d      	ldrh	r5, [r3, #16]

	/* Check if attribute is a characteristic then adjust the handle */
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    63e0:	6818      	ldr	r0, [r3, #0]
    63e2:	2300      	movs	r3, #0
{
    63e4:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    63e6:	f88d 3014 	strb.w	r3, [sp, #20]
    63ea:	a905      	add	r1, sp, #20
    63ec:	f642 0303 	movw	r3, #10243	; 0x2803
    63f0:	f8ad 3016 	strh.w	r3, [sp, #22]
    63f4:	f7fb fd92 	bl	1f1c <bt_uuid_cmp>
    63f8:	b930      	cbnz	r0, 6408 <gatt_indicate+0x34>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    63fa:	6963      	ldr	r3, [r4, #20]

		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    63fc:	68db      	ldr	r3, [r3, #12]
    63fe:	791b      	ldrb	r3, [r3, #4]
    6400:	069b      	lsls	r3, r3, #26
    6402:	d544      	bpl.n	648e <gatt_indicate+0xba>
			return -EINVAL;
		}

		value_handle += 1;
    6404:	3501      	adds	r5, #1
    6406:	b2ad      	uxth	r5, r5
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    6408:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    640a:	211d      	movs	r1, #29
    640c:	3202      	adds	r2, #2
    640e:	4648      	mov	r0, r9
    6410:	f7ff fab4 	bl	597c <bt_att_create_pdu>
	if (!buf) {
    6414:	4606      	mov	r6, r0
    6416:	b970      	cbnz	r0, 6436 <gatt_indicate+0x62>
		BT_WARN("No buffer available to send indication");
    6418:	4a1e      	ldr	r2, [pc, #120]	; (6494 <gatt_indicate+0xc0>)
    641a:	4b1f      	ldr	r3, [pc, #124]	; (6498 <gatt_indicate+0xc4>)
    641c:	9201      	str	r2, [sp, #4]
    641e:	9200      	str	r2, [sp, #0]
    6420:	681c      	ldr	r4, [r3, #0]
    6422:	491e      	ldr	r1, [pc, #120]	; (649c <gatt_indicate+0xc8>)
    6424:	4b1e      	ldr	r3, [pc, #120]	; (64a0 <gatt_indicate+0xcc>)
    6426:	481f      	ldr	r0, [pc, #124]	; (64a4 <gatt_indicate+0xd0>)
    6428:	47a0      	blx	r4
		return -ENOMEM;
    642a:	f06f 040b 	mvn.w	r4, #11

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    642e:	4620      	mov	r0, r4
    6430:	b007      	add	sp, #28
    6432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    6436:	f100 0708 	add.w	r7, r0, #8
    643a:	2102      	movs	r1, #2
    643c:	4638      	mov	r0, r7
    643e:	f00d fc2f 	bl	13ca0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    6442:	4680      	mov	r8, r0
	net_buf_add(buf, params->len);
    6444:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    6446:	f828 5b02 	strh.w	r5, [r8], #2
	net_buf_add(buf, params->len);
    644a:	4638      	mov	r0, r7
    644c:	f00d fc28 	bl	13ca0 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    6450:	8c22      	ldrh	r2, [r4, #32]
    6452:	69e1      	ldr	r1, [r4, #28]
    6454:	4640      	mov	r0, r8
    6456:	f7fb fbe3 	bl	1c20 <memcpy>
		req->func = func;
    645a:	4b13      	ldr	r3, [pc, #76]	; (64a8 <gatt_indicate+0xd4>)
    645c:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    645e:	2300      	movs	r3, #0
		req->buf = buf;
    6460:	6126      	str	r6, [r4, #16]
		req->destroy = destroy;
    6462:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    6464:	4621      	mov	r1, r4
    6466:	4648      	mov	r0, r9
    6468:	f7ff fee2 	bl	6230 <bt_att_req_send>
	if (err) {
    646c:	4604      	mov	r4, r0
    646e:	2800      	cmp	r0, #0
    6470:	d0dd      	beq.n	642e <gatt_indicate+0x5a>
		BT_ERR("Error sending ATT PDU: %d", err);
    6472:	4a08      	ldr	r2, [pc, #32]	; (6494 <gatt_indicate+0xc0>)
    6474:	4b08      	ldr	r3, [pc, #32]	; (6498 <gatt_indicate+0xc4>)
    6476:	9202      	str	r2, [sp, #8]
    6478:	e88d 0014 	stmia.w	sp, {r2, r4}
    647c:	4907      	ldr	r1, [pc, #28]	; (649c <gatt_indicate+0xc8>)
    647e:	681d      	ldr	r5, [r3, #0]
    6480:	480a      	ldr	r0, [pc, #40]	; (64ac <gatt_indicate+0xd8>)
    6482:	4b0b      	ldr	r3, [pc, #44]	; (64b0 <gatt_indicate+0xdc>)
    6484:	47a8      	blx	r5
		net_buf_unref(buf);
    6486:	4630      	mov	r0, r6
    6488:	f00d fbd2 	bl	13c30 <net_buf_unref>
    648c:	e7cf      	b.n	642e <gatt_indicate+0x5a>
			return -EINVAL;
    648e:	f06f 0415 	mvn.w	r4, #21
    6492:	e7cc      	b.n	642e <gatt_indicate+0x5a>
    6494:	000159e9 	.word	0x000159e9
    6498:	20003ad4 	.word	0x20003ad4
    649c:	00016791 	.word	0x00016791
    64a0:	000175ba 	.word	0x000175ba
    64a4:	00017628 	.word	0x00017628
    64a8:	000062b5 	.word	0x000062b5
    64ac:	0001765f 	.word	0x0001765f
    64b0:	000175b0 	.word	0x000175b0

000064b4 <sc_indicate.constprop.19>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    64b4:	b510      	push	{r4, lr}
    64b6:	4b17      	ldr	r3, [pc, #92]	; (6514 <sc_indicate.constprop.19+0x60>)
    64b8:	f3bf 8f5b 	dmb	ish
    64bc:	f103 0250 	add.w	r2, r3, #80	; 0x50
    64c0:	e852 4f00 	ldrex	r4, [r2]
    64c4:	f044 0e01 	orr.w	lr, r4, #1
    64c8:	e842 ec00 	strex	ip, lr, [r2]
    64cc:	f1bc 0f00 	cmp.w	ip, #0
    64d0:	d1f6      	bne.n	64c0 <sc_indicate.constprop.19+0xc>
    64d2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    64d6:	07e2      	lsls	r2, r4, #31
    64d8:	d402      	bmi.n	64e0 <sc_indicate.constprop.19+0x2c>
		sc->start = start;
    64da:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    64dc:	84d9      	strh	r1, [r3, #38]	; 0x26
    64de:	e00a      	b.n	64f6 <sc_indicate.constprop.19+0x42>
	if (new_start >= *start && new_end <= *end) {
    64e0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    64e2:	4282      	cmp	r2, r0
    64e4:	d803      	bhi.n	64ee <sc_indicate.constprop.19+0x3a>
    64e6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    64e8:	428a      	cmp	r2, r1
    64ea:	d301      	bcc.n	64f0 <sc_indicate.constprop.19+0x3c>
    64ec:	bd10      	pop	{r4, pc}
		*start = new_start;
    64ee:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    64f0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    64f2:	428a      	cmp	r2, r1
    64f4:	d3f2      	bcc.n	64dc <sc_indicate.constprop.19+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    64f6:	f3bf 8f5b 	dmb	ish
    64fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    64fc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    6500:	079b      	lsls	r3, r3, #30
    6502:	d406      	bmi.n	6512 <sc_indicate.constprop.19+0x5e>
    6504:	220a      	movs	r2, #10
    6506:	4904      	ldr	r1, [pc, #16]	; (6518 <sc_indicate.constprop.19+0x64>)
    6508:	4804      	ldr	r0, [pc, #16]	; (651c <sc_indicate.constprop.19+0x68>)
}
    650a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    650e:	f00e bffd 	b.w	1550c <k_delayed_work_submit_to_queue>
    6512:	bd10      	pop	{r4, pc}
    6514:	200005b0 	.word	0x200005b0
    6518:	200005d8 	.word	0x200005d8
    651c:	200019f8 	.word	0x200019f8

00006520 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6520:	6882      	ldr	r2, [r0, #8]
    6522:	4b19      	ldr	r3, [pc, #100]	; (6588 <connected_cb+0x68>)
    6524:	429a      	cmp	r2, r3
{
    6526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    652a:	4607      	mov	r7, r0
    652c:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    652e:	d125      	bne.n	657c <connected_cb+0x5c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6530:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    6532:	2600      	movs	r6, #0
    6534:	686b      	ldr	r3, [r5, #4]
    6536:	429e      	cmp	r6, r3
    6538:	d220      	bcs.n	657c <connected_cb+0x5c>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    653a:	6829      	ldr	r1, [r5, #0]
    653c:	ea4f 1806 	mov.w	r8, r6, lsl #4
    6540:	4441      	add	r1, r8
    6542:	4620      	mov	r0, r4
    6544:	f7fd fe14 	bl	4170 <bt_conn_addr_le_cmp>
    6548:	b9d8      	cbnz	r0, 6582 <connected_cb+0x62>
			continue;
		}

		if (ccc->cfg[i].value) {
    654a:	682b      	ldr	r3, [r5, #0]
    654c:	4443      	add	r3, r8
    654e:	891b      	ldrh	r3, [r3, #8]
    6550:	b1bb      	cbz	r3, 6582 <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    6552:	4629      	mov	r1, r5
    6554:	4638      	mov	r0, r7
    6556:	f7ff fe94 	bl	6282 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    655a:	682c      	ldr	r4, [r5, #0]
    655c:	4b0b      	ldr	r3, [pc, #44]	; (658c <connected_cb+0x6c>)
    655e:	429c      	cmp	r4, r3
    6560:	d10c      	bne.n	657c <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    6562:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    6564:	89a0      	ldrh	r0, [r4, #12]
    6566:	89e1      	ldrh	r1, [r4, #14]
    6568:	b900      	cbnz	r0, 656c <connected_cb+0x4c>
    656a:	b139      	cbz	r1, 657c <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    656c:	f7ff ffa2 	bl	64b4 <sc_indicate.constprop.19>
	memset(cfg->data, 0, sizeof(cfg->data));
    6570:	2204      	movs	r2, #4
    6572:	2100      	movs	r1, #0
    6574:	f104 000c 	add.w	r0, r4, #12
    6578:	f7fb fb7e 	bl	1c78 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    657c:	2001      	movs	r0, #1
    657e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    6582:	3601      	adds	r6, #1
    6584:	e7d6      	b.n	6534 <connected_cb+0x14>
    6586:	bf00      	nop
    6588:	000067ad 	.word	0x000067ad
    658c:	20000604 	.word	0x20000604

00006590 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6590:	490d      	ldr	r1, [pc, #52]	; (65c8 <sc_indicate_rsp+0x38>)
    6592:	f3bf 8f5b 	dmb	ish
    6596:	f101 0350 	add.w	r3, r1, #80	; 0x50
    659a:	e853 2f00 	ldrex	r2, [r3]
    659e:	f022 0202 	bic.w	r2, r2, #2
    65a2:	e843 2000 	strex	r0, r2, [r3]
    65a6:	2800      	cmp	r0, #0
    65a8:	d1f7      	bne.n	659a <sc_indicate_rsp+0xa>
    65aa:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    65ae:	f3bf 8f5b 	dmb	ish
    65b2:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    65b4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    65b8:	07db      	lsls	r3, r3, #31
    65ba:	d504      	bpl.n	65c6 <sc_indicate_rsp+0x36>
    65bc:	2200      	movs	r2, #0
    65be:	3128      	adds	r1, #40	; 0x28
    65c0:	4802      	ldr	r0, [pc, #8]	; (65cc <sc_indicate_rsp+0x3c>)
    65c2:	f00e bfa3 	b.w	1550c <k_delayed_work_submit_to_queue>
    65c6:	4770      	bx	lr
    65c8:	200005b0 	.word	0x200005b0
    65cc:	200019f8 	.word	0x200019f8

000065d0 <read_appearance>:
{
    65d0:	b513      	push	{r0, r1, r4, lr}
    65d2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    65d6:	4610      	mov	r0, r2
	if (offset > value_len) {
    65d8:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    65da:	f04f 0200 	mov.w	r2, #0
    65de:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    65e2:	d80d      	bhi.n	6600 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    65e4:	f1c1 0402 	rsb	r4, r1, #2
    65e8:	429c      	cmp	r4, r3
    65ea:	bfa8      	it	ge
    65ec:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    65ee:	f10d 0306 	add.w	r3, sp, #6
    65f2:	4622      	mov	r2, r4
    65f4:	4419      	add	r1, r3
    65f6:	f7fb fb13 	bl	1c20 <memcpy>
}
    65fa:	4620      	mov	r0, r4
    65fc:	b002      	add	sp, #8
    65fe:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6600:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    6604:	e7f9      	b.n	65fa <read_appearance+0x2a>
	...

00006608 <disconnected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6608:	6882      	ldr	r2, [r0, #8]
    660a:	4b27      	ldr	r3, [pc, #156]	; (66a8 <disconnected_cb+0xa0>)
    660c:	429a      	cmp	r2, r3
{
    660e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6612:	4680      	mov	r8, r0
    6614:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    6616:	d127      	bne.n	6668 <disconnected_cb+0x60>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6618:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    661a:	8923      	ldrh	r3, [r4, #8]
    661c:	b323      	cbz	r3, 6668 <disconnected_cb+0x60>
    661e:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6620:	f101 0a4c 	add.w	sl, r1, #76	; 0x4c
	for (i = 0; i < ccc->cfg_len; i++) {
    6624:	6863      	ldr	r3, [r4, #4]
    6626:	429e      	cmp	r6, r3
    6628:	d30b      	bcc.n	6642 <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    662a:	2202      	movs	r2, #2
    662c:	2100      	movs	r1, #0
    662e:	f104 0008 	add.w	r0, r4, #8
    6632:	f7fb fb21 	bl	1c78 <memset>
	if (ccc->cfg_changed) {
    6636:	68e3      	ldr	r3, [r4, #12]
    6638:	b1b3      	cbz	r3, 6668 <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    663a:	8921      	ldrh	r1, [r4, #8]
    663c:	4640      	mov	r0, r8
    663e:	4798      	blx	r3
    6640:	e012      	b.n	6668 <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    6642:	6821      	ldr	r1, [r4, #0]
    6644:	0135      	lsls	r5, r6, #4
    6646:	4429      	add	r1, r5
    6648:	890b      	ldrh	r3, [r1, #8]
    664a:	b19b      	cbz	r3, 6674 <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    664c:	4648      	mov	r0, r9
    664e:	f7fd fd8f 	bl	4170 <bt_conn_addr_le_cmp>
    6652:	b188      	cbz	r0, 6678 <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6654:	6820      	ldr	r0, [r4, #0]
    6656:	4428      	add	r0, r5
    6658:	f7fd fdea 	bl	4230 <bt_conn_lookup_addr_le>
			if (tmp) {
    665c:	b150      	cbz	r0, 6674 <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    665e:	7a43      	ldrb	r3, [r0, #9]
    6660:	2b03      	cmp	r3, #3
    6662:	d105      	bne.n	6670 <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    6664:	f7fd fe1a 	bl	429c <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    6668:	2001      	movs	r0, #1
    666a:	b002      	add	sp, #8
    666c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    6670:	f7fd fe14 	bl	429c <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    6674:	3601      	adds	r6, #1
    6676:	e7d5      	b.n	6624 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6678:	4650      	mov	r0, sl
    667a:	f7fd f9f9 	bl	3a70 <bt_addr_le_is_bonded>
    667e:	4607      	mov	r7, r0
    6680:	6820      	ldr	r0, [r4, #0]
    6682:	b95f      	cbnz	r7, 669c <disconnected_cb+0x94>
    6684:	4428      	add	r0, r5
    6686:	2207      	movs	r2, #7
    6688:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    668a:	9700      	str	r7, [sp, #0]
    668c:	f8cd 7003 	str.w	r7, [sp, #3]
    6690:	f7fb fac6 	bl	1c20 <memcpy>
				ccc->cfg[i].value = 0;
    6694:	6823      	ldr	r3, [r4, #0]
    6696:	441d      	add	r5, r3
    6698:	812f      	strh	r7, [r5, #8]
    669a:	e7eb      	b.n	6674 <disconnected_cb+0x6c>
    669c:	2207      	movs	r2, #7
    669e:	4651      	mov	r1, sl
    66a0:	4428      	add	r0, r5
    66a2:	f7fb fabd 	bl	1c20 <memcpy>
    66a6:	e7e5      	b.n	6674 <disconnected_cb+0x6c>
    66a8:	000067ad 	.word	0x000067ad

000066ac <read_name>:
{
    66ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    66b0:	4e0d      	ldr	r6, [pc, #52]	; (66e8 <read_name+0x3c>)
{
    66b2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    66b6:	4630      	mov	r0, r6
{
    66b8:	4698      	mov	r8, r3
    66ba:	4617      	mov	r7, r2
				 strlen(gap_name));
    66bc:	f7fb fa86 	bl	1bcc <strlen>
	if (offset > value_len) {
    66c0:	b283      	uxth	r3, r0
    66c2:	42ab      	cmp	r3, r5
    66c4:	d30d      	bcc.n	66e2 <read_name+0x36>
	len = min(buf_len, value_len - offset);
    66c6:	1b5c      	subs	r4, r3, r5
    66c8:	4544      	cmp	r4, r8
    66ca:	4623      	mov	r3, r4
    66cc:	bfa8      	it	ge
    66ce:	4643      	movge	r3, r8
    66d0:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    66d2:	4622      	mov	r2, r4
    66d4:	1971      	adds	r1, r6, r5
    66d6:	4638      	mov	r0, r7
    66d8:	f7fb faa2 	bl	1c20 <memcpy>
}
    66dc:	4620      	mov	r0, r4
    66de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    66e2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    66e6:	e7f9      	b.n	66dc <read_name+0x30>
    66e8:	000176f3 	.word	0x000176f3

000066ec <bt_gatt_attr_read_ccc>:
{
    66ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    66f0:	68ce      	ldr	r6, [r1, #12]
{
    66f2:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    66f6:	4604      	mov	r4, r0
    66f8:	4690      	mov	r8, r2
    66fa:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    66fc:	2500      	movs	r5, #0
    66fe:	6873      	ldr	r3, [r6, #4]
    6700:	429d      	cmp	r5, r3
    6702:	d20e      	bcs.n	6722 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6704:	6831      	ldr	r1, [r6, #0]
    6706:	ea4f 1905 	mov.w	r9, r5, lsl #4
    670a:	4449      	add	r1, r9
    670c:	4620      	mov	r0, r4
    670e:	f7fd fd2f 	bl	4170 <bt_conn_addr_le_cmp>
    6712:	b108      	cbz	r0, 6718 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    6714:	3501      	adds	r5, #1
    6716:	e7f2      	b.n	66fe <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    6718:	6832      	ldr	r2, [r6, #0]
    671a:	444a      	add	r2, r9
    671c:	8913      	ldrh	r3, [r2, #8]
    671e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    6722:	6873      	ldr	r3, [r6, #4]
    6724:	429d      	cmp	r5, r3
		value = 0x0000;
    6726:	bf04      	itt	eq
    6728:	2300      	moveq	r3, #0
    672a:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    672e:	2f02      	cmp	r7, #2
    6730:	d80f      	bhi.n	6752 <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    6732:	f1c7 0402 	rsb	r4, r7, #2
    6736:	4554      	cmp	r4, sl
    6738:	bfa8      	it	ge
    673a:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    673c:	f10d 0306 	add.w	r3, sp, #6
    6740:	4622      	mov	r2, r4
    6742:	19d9      	adds	r1, r3, r7
    6744:	4640      	mov	r0, r8
    6746:	f7fb fa6b 	bl	1c20 <memcpy>
}
    674a:	4620      	mov	r0, r4
    674c:	b002      	add	sp, #8
    674e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6752:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    6756:	e7f8      	b.n	674a <bt_gatt_attr_read_ccc+0x5e>

00006758 <bt_gatt_attr_read_service>:
{
    6758:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    675a:	68c9      	ldr	r1, [r1, #12]
{
    675c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    6760:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    6762:	780a      	ldrb	r2, [r1, #0]
    6764:	b992      	cbnz	r2, 678c <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    6766:	884a      	ldrh	r2, [r1, #2]
    6768:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    676c:	2d02      	cmp	r5, #2
    676e:	d819      	bhi.n	67a4 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    6770:	f1c5 0402 	rsb	r4, r5, #2
    6774:	429c      	cmp	r4, r3
    6776:	bfa8      	it	ge
    6778:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    677a:	f10d 0306 	add.w	r3, sp, #6
    677e:	4622      	mov	r2, r4
    6780:	1959      	adds	r1, r3, r5
    6782:	f7fb fa4d 	bl	1c20 <memcpy>
}
    6786:	4620      	mov	r0, r4
    6788:	b003      	add	sp, #12
    678a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    678c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    678e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    6792:	d807      	bhi.n	67a4 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    6794:	f1c5 0410 	rsb	r4, r5, #16
    6798:	429c      	cmp	r4, r3
    679a:	bfa8      	it	ge
    679c:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    679e:	4622      	mov	r2, r4
    67a0:	4429      	add	r1, r5
    67a2:	e7ee      	b.n	6782 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    67a4:	f06f 0406 	mvn.w	r4, #6
    67a8:	e7ed      	b.n	6786 <bt_gatt_attr_read_service+0x2e>
	...

000067ac <bt_gatt_attr_write_ccc>:
{
    67ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67b0:	b087      	sub	sp, #28
    67b2:	4688      	mov	r8, r1
    67b4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    67b8:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    67bc:	2902      	cmp	r1, #2
{
    67be:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    67c0:	d85f      	bhi.n	6882 <bt_gatt_attr_write_ccc+0xd6>
	if (offset + len > sizeof(u16_t)) {
    67c2:	4419      	add	r1, r3
    67c4:	2902      	cmp	r1, #2
    67c6:	461f      	mov	r7, r3
    67c8:	dc5e      	bgt.n	6888 <bt_gatt_attr_write_ccc+0xdc>
	return ((u16_t)src[1] << 8) | src[0];
    67ca:	7853      	ldrb	r3, [r2, #1]
    67cc:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    67ce:	2400      	movs	r4, #0
    67d0:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    67d4:	686b      	ldr	r3, [r5, #4]
    67d6:	429c      	cmp	r4, r3
    67d8:	d206      	bcs.n	67e8 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    67da:	6829      	ldr	r1, [r5, #0]
    67dc:	4648      	mov	r0, r9
    67de:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    67e2:	f7fd fcc5 	bl	4170 <bt_conn_addr_le_cmp>
    67e6:	b9b8      	cbnz	r0, 6818 <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    67e8:	686b      	ldr	r3, [r5, #4]
    67ea:	429c      	cmp	r4, r3
    67ec:	d12f      	bne.n	684e <bt_gatt_attr_write_ccc+0xa2>
		if (!value) {
    67ee:	b356      	cbz	r6, 6846 <bt_gatt_attr_write_ccc+0x9a>
    67f0:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    67f2:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    67f4:	686b      	ldr	r3, [r5, #4]
    67f6:	429c      	cmp	r4, r3
    67f8:	d217      	bcs.n	682a <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    67fa:	6828      	ldr	r0, [r5, #0]
    67fc:	f8cd a008 	str.w	sl, [sp, #8]
    6800:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    6804:	2207      	movs	r2, #7
    6806:	a902      	add	r1, sp, #8
    6808:	4458      	add	r0, fp
    680a:	f8cd a00b 	str.w	sl, [sp, #11]
    680e:	f7fb f9f2 	bl	1bf6 <memcmp>
    6812:	b118      	cbz	r0, 681c <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    6814:	3401      	adds	r4, #1
    6816:	e7ed      	b.n	67f4 <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    6818:	3401      	adds	r4, #1
    681a:	e7db      	b.n	67d4 <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    681c:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    681e:	2207      	movs	r2, #7
    6820:	f109 014c 	add.w	r1, r9, #76	; 0x4c
    6824:	4458      	add	r0, fp
    6826:	f7fb f9fb 	bl	1c20 <memcpy>
		if (i == ccc->cfg_len) {
    682a:	686b      	ldr	r3, [r5, #4]
    682c:	429c      	cmp	r4, r3
    682e:	d10e      	bne.n	684e <bt_gatt_attr_write_ccc+0xa2>
			BT_WARN("No space to store CCC cfg");
    6830:	4a17      	ldr	r2, [pc, #92]	; (6890 <bt_gatt_attr_write_ccc+0xe4>)
    6832:	4b18      	ldr	r3, [pc, #96]	; (6894 <bt_gatt_attr_write_ccc+0xe8>)
    6834:	9201      	str	r2, [sp, #4]
    6836:	9200      	str	r2, [sp, #0]
    6838:	681c      	ldr	r4, [r3, #0]
    683a:	4917      	ldr	r1, [pc, #92]	; (6898 <bt_gatt_attr_write_ccc+0xec>)
    683c:	4b17      	ldr	r3, [pc, #92]	; (689c <bt_gatt_attr_write_ccc+0xf0>)
    683e:	4818      	ldr	r0, [pc, #96]	; (68a0 <bt_gatt_attr_write_ccc+0xf4>)
    6840:	47a0      	blx	r4
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    6842:	f06f 0710 	mvn.w	r7, #16
}
    6846:	4638      	mov	r0, r7
    6848:	b007      	add	sp, #28
    684a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    684e:	682b      	ldr	r3, [r5, #0]
    6850:	0124      	lsls	r4, r4, #4
    6852:	4423      	add	r3, r4
    6854:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    6856:	892b      	ldrh	r3, [r5, #8]
    6858:	42b3      	cmp	r3, r6
    685a:	d003      	beq.n	6864 <bt_gatt_attr_write_ccc+0xb8>
		gatt_ccc_changed(attr, ccc);
    685c:	4629      	mov	r1, r5
    685e:	4640      	mov	r0, r8
    6860:	f7ff fd0f 	bl	6282 <gatt_ccc_changed>
	if (!value) {
    6864:	2e00      	cmp	r6, #0
    6866:	d1ee      	bne.n	6846 <bt_gatt_attr_write_ccc+0x9a>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    6868:	6828      	ldr	r0, [r5, #0]
    686a:	9604      	str	r6, [sp, #16]
    686c:	4420      	add	r0, r4
    686e:	2207      	movs	r2, #7
    6870:	a904      	add	r1, sp, #16
    6872:	f8cd 6013 	str.w	r6, [sp, #19]
    6876:	f7fb f9d3 	bl	1c20 <memcpy>
		ccc->cfg[i].value = 0;
    687a:	682b      	ldr	r3, [r5, #0]
    687c:	441c      	add	r4, r3
    687e:	8126      	strh	r6, [r4, #8]
    6880:	e7e1      	b.n	6846 <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6882:	f06f 0706 	mvn.w	r7, #6
    6886:	e7de      	b.n	6846 <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    6888:	f06f 070c 	mvn.w	r7, #12
    688c:	e7db      	b.n	6846 <bt_gatt_attr_write_ccc+0x9a>
    688e:	bf00      	nop
    6890:	000159e9 	.word	0x000159e9
    6894:	20003ad4 	.word	0x20003ad4
    6898:	00016791 	.word	0x00016791
    689c:	0001758d 	.word	0x0001758d
    68a0:	000175fe 	.word	0x000175fe

000068a4 <notify_cb>:
{
    68a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    68a8:	f642 1302 	movw	r3, #10498	; 0x2902
{
    68ac:	4605      	mov	r5, r0
    68ae:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    68b0:	2400      	movs	r4, #0
    68b2:	4669      	mov	r1, sp
    68b4:	6800      	ldr	r0, [r0, #0]
    68b6:	f88d 4000 	strb.w	r4, [sp]
    68ba:	f8ad 3002 	strh.w	r3, [sp, #2]
    68be:	f7fb fb2d 	bl	1f1c <bt_uuid_cmp>
    68c2:	b178      	cbz	r0, 68e4 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    68c4:	f642 0303 	movw	r3, #10243	; 0x2803
    68c8:	6828      	ldr	r0, [r5, #0]
    68ca:	f88d 4004 	strb.w	r4, [sp, #4]
    68ce:	a901      	add	r1, sp, #4
    68d0:	f8ad 3006 	strh.w	r3, [sp, #6]
    68d4:	f7fb fb22 	bl	1f1c <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    68d8:	1b00      	subs	r0, r0, r4
    68da:	bf18      	it	ne
    68dc:	2001      	movne	r0, #1
}
    68de:	b003      	add	sp, #12
    68e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    68e4:	68aa      	ldr	r2, [r5, #8]
    68e6:	4b2b      	ldr	r3, [pc, #172]	; (6994 <notify_cb+0xf0>)
    68e8:	429a      	cmp	r2, r3
    68ea:	d001      	beq.n	68f0 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    68ec:	2001      	movs	r0, #1
    68ee:	e7f6      	b.n	68de <notify_cb+0x3a>
	ccc = attr->user_data;
    68f0:	68ef      	ldr	r7, [r5, #12]
    68f2:	4d29      	ldr	r5, [pc, #164]	; (6998 <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    68f4:	4604      	mov	r4, r0
    68f6:	46a8      	mov	r8, r5
    68f8:	4681      	mov	r9, r0
    68fa:	687b      	ldr	r3, [r7, #4]
    68fc:	429c      	cmp	r4, r3
    68fe:	d2f5      	bcs.n	68ec <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    6900:	6838      	ldr	r0, [r7, #0]
    6902:	88b3      	ldrh	r3, [r6, #4]
    6904:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    6908:	8902      	ldrh	r2, [r0, #8]
    690a:	429a      	cmp	r2, r3
    690c:	d114      	bne.n	6938 <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    690e:	f7fd fc8f 	bl	4230 <bt_conn_lookup_addr_le>
		if (!conn) {
    6912:	4683      	mov	fp, r0
    6914:	b9f8      	cbnz	r0, 6956 <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    6916:	683b      	ldr	r3, [r7, #0]
    6918:	4543      	cmp	r3, r8
    691a:	d10d      	bne.n	6938 <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    691c:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    691e:	a801      	add	r0, sp, #4
    6920:	8c1a      	ldrh	r2, [r3, #32]
    6922:	69d9      	ldr	r1, [r3, #28]
    6924:	f7fb f97c 	bl	1c20 <memcpy>
	if (!stored->start && !stored->end) {
    6928:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    692a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    692e:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    6930:	b928      	cbnz	r0, 693e <notify_cb+0x9a>
    6932:	b942      	cbnz	r2, 6946 <notify_cb+0xa2>
		*stored = data;
    6934:	9801      	ldr	r0, [sp, #4]
    6936:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    6938:	3401      	adds	r4, #1
    693a:	3510      	adds	r5, #16
    693c:	e7dd      	b.n	68fa <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    693e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    6942:	4281      	cmp	r1, r0
    6944:	d305      	bcc.n	6952 <notify_cb+0xae>
    6946:	429a      	cmp	r2, r3
    6948:	d2f6      	bcs.n	6938 <notify_cb+0x94>
	if (*end < new_end) {
    694a:	429a      	cmp	r2, r3
    694c:	d2f4      	bcs.n	6938 <notify_cb+0x94>
		*end = new_end;
    694e:	81eb      	strh	r3, [r5, #14]
    6950:	e7f2      	b.n	6938 <notify_cb+0x94>
		*start = new_start;
    6952:	81a9      	strh	r1, [r5, #12]
    6954:	e7f9      	b.n	694a <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    6956:	7a43      	ldrb	r3, [r0, #9]
    6958:	2b03      	cmp	r3, #3
    695a:	d002      	beq.n	6962 <notify_cb+0xbe>
			bt_conn_unref(conn);
    695c:	f7fd fc9e 	bl	429c <bt_conn_unref>
    6960:	e7ea      	b.n	6938 <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    6962:	88b3      	ldrh	r3, [r6, #4]
    6964:	2b02      	cmp	r3, #2
    6966:	d10c      	bne.n	6982 <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    6968:	6971      	ldr	r1, [r6, #20]
    696a:	f7ff fd33 	bl	63d4 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    696e:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    6970:	4658      	mov	r0, fp
    6972:	f7fd fc93 	bl	429c <bt_conn_unref>
		if (err < 0) {
    6976:	f1ba 0f00 	cmp.w	sl, #0
    697a:	db09      	blt.n	6990 <notify_cb+0xec>
		data->err = 0;
    697c:	f8c6 9000 	str.w	r9, [r6]
    6980:	e7da      	b.n	6938 <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    6982:	68b1      	ldr	r1, [r6, #8]
    6984:	8a33      	ldrh	r3, [r6, #16]
    6986:	68f2      	ldr	r2, [r6, #12]
    6988:	8a09      	ldrh	r1, [r1, #16]
    698a:	f7ff fce5 	bl	6358 <gatt_notify>
    698e:	e7ee      	b.n	696e <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    6990:	2000      	movs	r0, #0
    6992:	e7a4      	b.n	68de <notify_cb+0x3a>
    6994:	000067ad 	.word	0x000067ad
    6998:	20000604 	.word	0x20000604

0000699c <bt_gatt_init>:
{
    699c:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    699e:	4806      	ldr	r0, [pc, #24]	; (69b8 <bt_gatt_init+0x1c>)
    69a0:	f7ff fc90 	bl	62c4 <gatt_register>
	gatt_register(&gatt_svc);
    69a4:	4805      	ldr	r0, [pc, #20]	; (69bc <bt_gatt_init+0x20>)
    69a6:	f7ff fc8d 	bl	62c4 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    69aa:	4905      	ldr	r1, [pc, #20]	; (69c0 <bt_gatt_init+0x24>)
    69ac:	4805      	ldr	r0, [pc, #20]	; (69c4 <bt_gatt_init+0x28>)
}
    69ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    69b2:	f00e bd37 	b.w	15424 <k_delayed_work_init>
    69b6:	bf00      	nop
    69b8:	20003d1c 	.word	0x20003d1c
    69bc:	20003d78 	.word	0x20003d78
    69c0:	00006a49 	.word	0x00006a49
    69c4:	200005d8 	.word	0x200005d8

000069c8 <bt_gatt_foreach_attr>:
{
    69c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    69cc:	4699      	mov	r9, r3
    69ce:	4b12      	ldr	r3, [pc, #72]	; (6a18 <bt_gatt_foreach_attr+0x50>)
    69d0:	681c      	ldr	r4, [r3, #0]
    69d2:	4606      	mov	r6, r0
    69d4:	460f      	mov	r7, r1
    69d6:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    69d8:	b1dc      	cbz	r4, 6a12 <bt_gatt_foreach_attr+0x4a>
    69da:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    69dc:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    69e0:	b1bc      	cbz	r4, 6a12 <bt_gatt_foreach_attr+0x4a>
    69e2:	2500      	movs	r5, #0
    69e4:	e006      	b.n	69f4 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    69e6:	6820      	ldr	r0, [r4, #0]
    69e8:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    69ec:	8a03      	ldrh	r3, [r0, #16]
    69ee:	42b3      	cmp	r3, r6
    69f0:	d207      	bcs.n	6a02 <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    69f2:	3501      	adds	r5, #1
    69f4:	6863      	ldr	r3, [r4, #4]
    69f6:	42ab      	cmp	r3, r5
    69f8:	d8f5      	bhi.n	69e6 <bt_gatt_foreach_attr+0x1e>
	return node->next;
    69fa:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    69fc:	b14c      	cbz	r4, 6a12 <bt_gatt_foreach_attr+0x4a>
    69fe:	3c08      	subs	r4, #8
    6a00:	e7ee      	b.n	69e0 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    6a02:	42bb      	cmp	r3, r7
    6a04:	d8f5      	bhi.n	69f2 <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    6a06:	4649      	mov	r1, r9
    6a08:	47c0      	blx	r8
    6a0a:	2800      	cmp	r0, #0
    6a0c:	d1f1      	bne.n	69f2 <bt_gatt_foreach_attr+0x2a>
    6a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a16:	bf00      	nop
    6a18:	200005a8 	.word	0x200005a8

00006a1c <bt_gatt_indicate.part.10>:
int bt_gatt_indicate(struct bt_conn *conn,
    6a1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    6a1e:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    6a22:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6a24:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    6a26:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    6a28:	2302      	movs	r3, #2
    6a2a:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6a2e:	4a05      	ldr	r2, [pc, #20]	; (6a44 <bt_gatt_indicate.part.10+0x28>)
    6a30:	8a00      	ldrh	r0, [r0, #16]
    6a32:	466b      	mov	r3, sp
    6a34:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6a38:	f7ff ffc6 	bl	69c8 <bt_gatt_foreach_attr>
}
    6a3c:	9800      	ldr	r0, [sp, #0]
    6a3e:	b007      	add	sp, #28
    6a40:	f85d fb04 	ldr.w	pc, [sp], #4
    6a44:	000068a5 	.word	0x000068a5

00006a48 <sc_process>:
{
    6a48:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    6a4a:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    6a4e:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    6a52:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    6a54:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    6a58:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    6a5c:	3828      	subs	r0, #40	; 0x28
    6a5e:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6a62:	f3bf 8f5b 	dmb	ish
    6a66:	e854 2f00 	ldrex	r2, [r4]
    6a6a:	f022 0201 	bic.w	r2, r2, #1
    6a6e:	e844 2100 	strex	r1, r2, [r4]
    6a72:	2900      	cmp	r1, #0
    6a74:	d1f7      	bne.n	6a66 <sc_process+0x1e>
    6a76:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    6a7a:	2200      	movs	r2, #0
    6a7c:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    6a80:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    6a84:	4a0e      	ldr	r2, [pc, #56]	; (6ac0 <sc_process+0x78>)
    6a86:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    6a8a:	4a0e      	ldr	r2, [pc, #56]	; (6ac4 <sc_process+0x7c>)
    6a8c:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    6a90:	aa01      	add	r2, sp, #4
    6a92:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    6a96:	2204      	movs	r2, #4
    6a98:	f823 2c08 	strh.w	r2, [r3, #-8]
    6a9c:	f7ff ffbe 	bl	6a1c <bt_gatt_indicate.part.10>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    6aa0:	b958      	cbnz	r0, 6aba <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6aa2:	f3bf 8f5b 	dmb	ish
    6aa6:	e854 3f00 	ldrex	r3, [r4]
    6aaa:	f043 0302 	orr.w	r3, r3, #2
    6aae:	e844 3200 	strex	r2, r3, [r4]
    6ab2:	2a00      	cmp	r2, #0
    6ab4:	d1f7      	bne.n	6aa6 <sc_process+0x5e>
    6ab6:	f3bf 8f5b 	dmb	ish
}
    6aba:	b002      	add	sp, #8
    6abc:	bd10      	pop	{r4, pc}
    6abe:	bf00      	nop
    6ac0:	20003d50 	.word	0x20003d50
    6ac4:	00006591 	.word	0x00006591

00006ac8 <bt_gatt_attr_next>:
{
    6ac8:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6aca:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    6acc:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6ace:	3101      	adds	r1, #1
    6ad0:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    6ad2:	2200      	movs	r2, #0
    6ad4:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6ad8:	4608      	mov	r0, r1
    6ada:	4a03      	ldr	r2, [pc, #12]	; (6ae8 <bt_gatt_attr_next+0x20>)
    6adc:	f7ff ff74 	bl	69c8 <bt_gatt_foreach_attr>
}
    6ae0:	9801      	ldr	r0, [sp, #4]
    6ae2:	b003      	add	sp, #12
    6ae4:	f85d fb04 	ldr.w	pc, [sp], #4
    6ae8:	0000627d 	.word	0x0000627d

00006aec <bt_gatt_attr_read_chrc>:
{
    6aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    6af0:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    6af4:	b08b      	sub	sp, #44	; 0x2c
    6af6:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    6af8:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    6afa:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    6afe:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    6b02:	f88d 3014 	strb.w	r3, [sp, #20]
{
    6b06:	4688      	mov	r8, r1
    6b08:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    6b0a:	f7ff ffdd 	bl	6ac8 <bt_gatt_attr_next>
	if (!next) {
    6b0e:	4605      	mov	r5, r0
    6b10:	bb48      	cbnz	r0, 6b66 <bt_gatt_attr_read_chrc+0x7a>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    6b12:	4a1c      	ldr	r2, [pc, #112]	; (6b84 <bt_gatt_attr_read_chrc+0x98>)
    6b14:	9202      	str	r2, [sp, #8]
    6b16:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    6b1a:	491b      	ldr	r1, [pc, #108]	; (6b88 <bt_gatt_attr_read_chrc+0x9c>)
    6b1c:	481b      	ldr	r0, [pc, #108]	; (6b8c <bt_gatt_attr_read_chrc+0xa0>)
    6b1e:	e88d 000c 	stmia.w	sp, {r2, r3}
    6b22:	4b1b      	ldr	r3, [pc, #108]	; (6b90 <bt_gatt_attr_read_chrc+0xa4>)
    6b24:	f8d3 8000 	ldr.w	r8, [r3]
    6b28:	4b1a      	ldr	r3, [pc, #104]	; (6b94 <bt_gatt_attr_read_chrc+0xa8>)
    6b2a:	47c0      	blx	r8
		pdu.value_handle = 0x0000;
    6b2c:	f88d 5015 	strb.w	r5, [sp, #21]
    6b30:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    6b34:	f8d9 1000 	ldr.w	r1, [r9]
    6b38:	780b      	ldrb	r3, [r1, #0]
    6b3a:	b9c3      	cbnz	r3, 6b6e <bt_gatt_attr_read_chrc+0x82>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    6b3c:	884b      	ldrh	r3, [r1, #2]
    6b3e:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    6b42:	2305      	movs	r3, #5
	if (offset > value_len) {
    6b44:	42b3      	cmp	r3, r6
    6b46:	d31a      	bcc.n	6b7e <bt_gatt_attr_read_chrc+0x92>
	len = min(buf_len, value_len - offset);
    6b48:	1b9b      	subs	r3, r3, r6
    6b4a:	42a3      	cmp	r3, r4
    6b4c:	bfa8      	it	ge
    6b4e:	4623      	movge	r3, r4
    6b50:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    6b52:	ab05      	add	r3, sp, #20
    6b54:	4622      	mov	r2, r4
    6b56:	1999      	adds	r1, r3, r6
    6b58:	4638      	mov	r0, r7
    6b5a:	f7fb f861 	bl	1c20 <memcpy>
}
    6b5e:	4620      	mov	r0, r4
    6b60:	b00b      	add	sp, #44	; 0x2c
    6b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    6b66:	8a03      	ldrh	r3, [r0, #16]
    6b68:	f8ad 3015 	strh.w	r3, [sp, #21]
    6b6c:	e7e2      	b.n	6b34 <bt_gatt_attr_read_chrc+0x48>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    6b6e:	2210      	movs	r2, #16
    6b70:	3101      	adds	r1, #1
    6b72:	f10d 0017 	add.w	r0, sp, #23
    6b76:	f7fb f853 	bl	1c20 <memcpy>
		value_len += 16;
    6b7a:	2313      	movs	r3, #19
    6b7c:	e7e2      	b.n	6b44 <bt_gatt_attr_read_chrc+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6b7e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    6b82:	e7ec      	b.n	6b5e <bt_gatt_attr_read_chrc+0x72>
    6b84:	000159e9 	.word	0x000159e9
    6b88:	00016791 	.word	0x00016791
    6b8c:	000175c8 	.word	0x000175c8
    6b90:	20003ad4 	.word	0x20003ad4
    6b94:	00017576 	.word	0x00017576

00006b98 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    6b98:	4603      	mov	r3, r0
    6b9a:	4a03      	ldr	r2, [pc, #12]	; (6ba8 <bt_gatt_connected+0x10>)
    6b9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6ba0:	2001      	movs	r0, #1
    6ba2:	f7ff bf11 	b.w	69c8 <bt_gatt_foreach_attr>
    6ba6:	bf00      	nop
    6ba8:	00006521 	.word	0x00006521

00006bac <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6bac:	4603      	mov	r3, r0
    6bae:	4a03      	ldr	r2, [pc, #12]	; (6bbc <bt_gatt_disconnected+0x10>)
    6bb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6bb4:	2001      	movs	r0, #1
    6bb6:	f7ff bf07 	b.w	69c8 <bt_gatt_foreach_attr>
    6bba:	bf00      	nop
    6bbc:	00006609 	.word	0x00006609

00006bc0 <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    6bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    6bc2:	4a0b      	ldr	r2, [pc, #44]	; (6bf0 <bt_smp_accept+0x30>)
    6bc4:	6813      	ldr	r3, [r2, #0]
    6bc6:	b92b      	cbnz	r3, 6bd4 <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.ops = &ops;
    6bc8:	480a      	ldr	r0, [pc, #40]	; (6bf4 <bt_smp_accept+0x34>)
    6bca:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan;
    6bcc:	600a      	str	r2, [r1, #0]

		return 0;
    6bce:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    6bd0:	b004      	add	sp, #16
    6bd2:	bd10      	pop	{r4, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    6bd4:	4a08      	ldr	r2, [pc, #32]	; (6bf8 <bt_smp_accept+0x38>)
    6bd6:	4b09      	ldr	r3, [pc, #36]	; (6bfc <bt_smp_accept+0x3c>)
    6bd8:	9001      	str	r0, [sp, #4]
    6bda:	9202      	str	r2, [sp, #8]
    6bdc:	9200      	str	r2, [sp, #0]
    6bde:	681c      	ldr	r4, [r3, #0]
    6be0:	4807      	ldr	r0, [pc, #28]	; (6c00 <bt_smp_accept+0x40>)
    6be2:	4b08      	ldr	r3, [pc, #32]	; (6c04 <bt_smp_accept+0x44>)
    6be4:	4908      	ldr	r1, [pc, #32]	; (6c08 <bt_smp_accept+0x48>)
    6be6:	47a0      	blx	r4
	return -ENOMEM;
    6be8:	f06f 000b 	mvn.w	r0, #11
    6bec:	e7f0      	b.n	6bd0 <bt_smp_accept+0x10>
    6bee:	bf00      	nop
    6bf0:	20000614 	.word	0x20000614
    6bf4:	20003d90 	.word	0x20003d90
    6bf8:	000159e9 	.word	0x000159e9
    6bfc:	20003ad4 	.word	0x20003ad4
    6c00:	00017708 	.word	0x00017708
    6c04:	000176fa 	.word	0x000176fa
    6c08:	00016791 	.word	0x00016791

00006c0c <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    6c0c:	2100      	movs	r1, #0
{
    6c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    6c12:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    6c14:	4608      	mov	r0, r1
    6c16:	f7fe f8c6 	bl	4da6 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6c1a:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    6c1e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6c20:	2101      	movs	r1, #1
    6c22:	4630      	mov	r0, r6
    6c24:	f00d f83c 	bl	13ca0 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    6c28:	2505      	movs	r5, #5
    6c2a:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    6c2c:	2101      	movs	r1, #1
    6c2e:	4630      	mov	r0, r6
    6c30:	f00d f836 	bl	13ca0 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    6c34:	7005      	strb	r5, [r0, #0]
    6c36:	4622      	mov	r2, r4
    6c38:	4638      	mov	r0, r7
    6c3a:	2300      	movs	r3, #0
    6c3c:	2106      	movs	r1, #6
}
    6c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6c42:	f7fe b8b3 	b.w	4dac <bt_l2cap_send_cb>

00006c46 <bt_smp_sign_verify>:
    6c46:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6c4a:	4770      	bx	lr

00006c4c <bt_smp_init>:

int bt_smp_init(void)
{
    6c4c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6c4e:	4802      	ldr	r0, [pc, #8]	; (6c58 <bt_smp_init+0xc>)
    6c50:	f7fd ffee 	bl	4c30 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    6c54:	2000      	movs	r0, #0
    6c56:	bd08      	pop	{r3, pc}
    6c58:	20003d84 	.word	0x20003d84

00006c5c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    6c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    6c5e:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6c60:	1dc3      	adds	r3, r0, #7
{
    6c62:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6c64:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6c68:	1e50      	subs	r0, r2, #1
{
    6c6a:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6c6c:	b280      	uxth	r0, r0
{
    6c6e:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6c70:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6c72:	2100      	movs	r1, #0
    6c74:	2204      	movs	r2, #4
    6c76:	fb06 5000 	mla	r0, r6, r0, r5
    6c7a:	f7fa fffd 	bl	1c78 <memset>
    6c7e:	3c02      	subs	r4, #2
    6c80:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    6c82:	f64f 77ff 	movw	r7, #65535	; 0xffff
    6c86:	42bc      	cmp	r4, r7
    6c88:	d101      	bne.n	6c8e <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    6c8a:	b003      	add	sp, #12
    6c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    6c8e:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    6c92:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    6c94:	2204      	movs	r2, #4
    6c96:	1b80      	subs	r0, r0, r6
    6c98:	eb0d 0102 	add.w	r1, sp, r2
    6c9c:	4428      	add	r0, r5
    6c9e:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    6ca0:	9301      	str	r3, [sp, #4]
    6ca2:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    6ca4:	f7fa ffbc 	bl	1c20 <memcpy>
    6ca8:	e7ed      	b.n	6c86 <mem_init+0x2a>

00006caa <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    6caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    6cac:	6805      	ldr	r5, [r0, #0]
{
    6cae:	4606      	mov	r6, r0
	if (*mem_head) {
    6cb0:	b195      	cbz	r5, 6cd8 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6cb2:	1deb      	adds	r3, r5, #7
    6cb4:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    6cb8:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6cba:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    6cbc:	4629      	mov	r1, r5
    6cbe:	eb0d 0002 	add.w	r0, sp, r2
    6cc2:	f7fa ffad 	bl	1c20 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    6cc6:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    6cc8:	3c01      	subs	r4, #1
    6cca:	b2a4      	uxth	r4, r4
		if (head) {
    6ccc:	b11b      	cbz	r3, 6cd6 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    6cce:	1dda      	adds	r2, r3, #7
    6cd0:	f022 0203 	bic.w	r2, r2, #3
    6cd4:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    6cd6:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    6cd8:	4628      	mov	r0, r5
    6cda:	b002      	add	sp, #8
    6cdc:	bd70      	pop	{r4, r5, r6, pc}

00006cde <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    6cde:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    6ce0:	680c      	ldr	r4, [r1, #0]
{
    6ce2:	4606      	mov	r6, r0
    6ce4:	460d      	mov	r5, r1
	if (*mem_head) {
    6ce6:	b11c      	cbz	r4, 6cf0 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6ce8:	1de3      	adds	r3, r4, #7
    6cea:	f023 0303 	bic.w	r3, r3, #3
    6cee:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    6cf0:	2204      	movs	r2, #4
    6cf2:	4629      	mov	r1, r5
    6cf4:	4630      	mov	r0, r6
    6cf6:	f7fa ff93 	bl	1c20 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    6cfa:	1df2      	adds	r2, r6, #7
    6cfc:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    6d00:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    6d02:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    6d04:	602e      	str	r6, [r5, #0]
    6d06:	bd70      	pop	{r4, r5, r6, pc}

00006d08 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    6d08:	b118      	cbz	r0, 6d12 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    6d0a:	3007      	adds	r0, #7
    6d0c:	f020 0003 	bic.w	r0, r0, #3
    6d10:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    6d12:	4770      	bx	lr

00006d14 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    6d14:	fb02 0001 	mla	r0, r2, r1, r0
    6d18:	4770      	bx	lr

00006d1a <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    6d1a:	1a40      	subs	r0, r0, r1
    6d1c:	b280      	uxth	r0, r0
}
    6d1e:	fbb0 f0f2 	udiv	r0, r0, r2
    6d22:	4770      	bx	lr

00006d24 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    6d24:	b510      	push	{r4, lr}
	src += len;
    6d26:	4411      	add	r1, r2
    6d28:	3801      	subs	r0, #1
	while (len--) {
    6d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6d2e:	3a01      	subs	r2, #1
    6d30:	b292      	uxth	r2, r2
    6d32:	429a      	cmp	r2, r3
    6d34:	d100      	bne.n	6d38 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    6d36:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    6d38:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    6d3c:	f800 4f01 	strb.w	r4, [r0, #1]!
    6d40:	e7f5      	b.n	6d2e <mem_rcopy+0xa>

00006d42 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    6d42:	4401      	add	r1, r0
	while (len--) {
    6d44:	4288      	cmp	r0, r1
    6d46:	d101      	bne.n	6d4c <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    6d48:	2000      	movs	r0, #0
    6d4a:	4770      	bx	lr
		if (*src++) {
    6d4c:	f810 3b01 	ldrb.w	r3, [r0], #1
    6d50:	2b00      	cmp	r3, #0
    6d52:	d0f7      	beq.n	6d44 <mem_nz+0x2>
			return 1;
    6d54:	2001      	movs	r0, #1
}
    6d56:	4770      	bx	lr

00006d58 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    6d58:	6010      	str	r0, [r2, #0]
    6d5a:	6008      	str	r0, [r1, #0]

	return link;
}
    6d5c:	4770      	bx	lr

00006d5e <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    6d5e:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    6d60:	6814      	ldr	r4, [r2, #0]
    6d62:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    6d64:	6814      	ldr	r4, [r2, #0]
    6d66:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    6d68:	6010      	str	r0, [r2, #0]

	return link;
}
    6d6a:	bd10      	pop	{r4, pc}

00006d6c <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    6d6c:	4288      	cmp	r0, r1
    6d6e:	d003      	beq.n	6d78 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    6d70:	b11a      	cbz	r2, 6d7a <memq_peek+0xe>
		*mem = head->mem;
    6d72:	6843      	ldr	r3, [r0, #4]
    6d74:	6013      	str	r3, [r2, #0]
    6d76:	4770      	bx	lr
		return NULL;
    6d78:	2000      	movs	r0, #0
	}

	return head;
}
    6d7a:	4770      	bx	lr

00006d7c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    6d7c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    6d7e:	4283      	cmp	r3, r0
    6d80:	d009      	beq.n	6d96 <memq_dequeue+0x1a>
	if (mem) {
    6d82:	b122      	cbz	r2, 6d8e <memq_dequeue+0x12>
		*mem = head->mem;
    6d84:	6858      	ldr	r0, [r3, #4]
    6d86:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    6d88:	681a      	ldr	r2, [r3, #0]
    6d8a:	600a      	str	r2, [r1, #0]

	return link;
    6d8c:	e001      	b.n	6d92 <memq_dequeue+0x16>
	if (!link) {
    6d8e:	2b00      	cmp	r3, #0
    6d90:	d1fa      	bne.n	6d88 <memq_dequeue+0xc>
}
    6d92:	4618      	mov	r0, r3
    6d94:	4770      	bx	lr
		return NULL;
    6d96:	2300      	movs	r3, #0
    6d98:	e7fb      	b.n	6d92 <memq_dequeue+0x16>
	...

00006d9c <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    6d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    6da0:	4f11      	ldr	r7, [pc, #68]	; (6de8 <mayfly_init+0x4c>)
    6da2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 6dec <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    6da6:	2604      	movs	r6, #4
	while (callee_id--) {
    6da8:	3e01      	subs	r6, #1
    6daa:	b2f6      	uxtb	r6, r6
    6dac:	2eff      	cmp	r6, #255	; 0xff
    6dae:	d019      	beq.n	6de4 <mayfly_init+0x48>
    6db0:	b233      	sxth	r3, r6
    6db2:	ea4f 0883 	mov.w	r8, r3, lsl #2
    6db6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6dba:	011d      	lsls	r5, r3, #4
    6dbc:	2404      	movs	r4, #4
    6dbe:	f04f 0a0c 	mov.w	sl, #12
    6dc2:	e00a      	b.n	6dda <mayfly_init+0x3e>
    6dc4:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    6dc8:	1d0a      	adds	r2, r1, #4
    6dca:	eb04 0008 	add.w	r0, r4, r8
    6dce:	443a      	add	r2, r7
    6dd0:	4439      	add	r1, r7
    6dd2:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    6dd6:	f7ff ffbf 	bl	6d58 <memq_init>
		while (caller_id--) {
    6dda:	3c01      	subs	r4, #1
    6ddc:	b2e4      	uxtb	r4, r4
    6dde:	2cff      	cmp	r4, #255	; 0xff
    6de0:	d1f0      	bne.n	6dc4 <mayfly_init+0x28>
    6de2:	e7e1      	b.n	6da8 <mayfly_init+0xc>
    6de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6de8:	20000734 	.word	0x20000734
    6dec:	200006b4 	.word	0x200006b4

00006df0 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    6df0:	b4f0      	push	{r4, r5, r6, r7}
    6df2:	4b12      	ldr	r3, [pc, #72]	; (6e3c <mayfly_enable+0x4c>)
    6df4:	4605      	mov	r5, r0
    6df6:	460f      	mov	r7, r1
    6df8:	260c      	movs	r6, #12
    6dfa:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    6dfc:	b172      	cbz	r2, 6e1c <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    6dfe:	4361      	muls	r1, r4
    6e00:	fb06 1400 	mla	r4, r6, r0, r1
    6e04:	4423      	add	r3, r4
    6e06:	7a59      	ldrb	r1, [r3, #9]
    6e08:	7a18      	ldrb	r0, [r3, #8]
    6e0a:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    6e0c:	bf04      	itt	eq
    6e0e:	3101      	addeq	r1, #1
    6e10:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    6e12:	4628      	mov	r0, r5
    6e14:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    6e16:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    6e18:	f00c bd28 	b.w	1386c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    6e1c:	434c      	muls	r4, r1
    6e1e:	fb06 4400 	mla	r4, r6, r0, r4
    6e22:	4423      	add	r3, r4
    6e24:	7a9c      	ldrb	r4, [r3, #10]
    6e26:	7ada      	ldrb	r2, [r3, #11]
    6e28:	42a2      	cmp	r2, r4
    6e2a:	d104      	bne.n	6e36 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    6e2c:	3201      	adds	r2, #1
    6e2e:	729a      	strb	r2, [r3, #10]
}
    6e30:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    6e32:	f00c bd7b 	b.w	1392c <mayfly_pend>
}
    6e36:	bcf0      	pop	{r4, r5, r6, r7}
    6e38:	4770      	bx	lr
    6e3a:	bf00      	nop
    6e3c:	20000734 	.word	0x20000734

00006e40 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    6e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e42:	4605      	mov	r5, r0
    6e44:	460e      	mov	r6, r1
    6e46:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    6e48:	b18a      	cbz	r2, 6e6e <mayfly_enqueue+0x2e>
    6e4a:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    6e4c:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    6e4e:	7820      	ldrb	r0, [r4, #0]
    6e50:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    6e52:	f010 0703 	ands.w	r7, r0, #3
    6e56:	d029      	beq.n	6eac <mayfly_enqueue+0x6c>
		if (chain) {
    6e58:	b303      	cbz	r3, 6e9c <mayfly_enqueue+0x5c>
			if (state != 1) {
    6e5a:	2f01      	cmp	r7, #1
    6e5c:	d039      	beq.n	6ed2 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    6e5e:	3201      	adds	r2, #1
    6e60:	b2d2      	uxtb	r2, r2
    6e62:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    6e64:	4631      	mov	r1, r6
    6e66:	4628      	mov	r0, r5
    6e68:	f00c fd60 	bl	1392c <mayfly_pend>
    6e6c:	e01c      	b.n	6ea8 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6e6e:	f00c fd4b 	bl	13908 <mayfly_prio_is_equal>
    6e72:	2800      	cmp	r0, #0
    6e74:	d0e9      	beq.n	6e4a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    6e76:	4631      	mov	r1, r6
    6e78:	4628      	mov	r0, r5
    6e7a:	f00c fd1f 	bl	138bc <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6e7e:	2800      	cmp	r0, #0
    6e80:	d0e3      	beq.n	6e4a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    6e82:	2330      	movs	r3, #48	; 0x30
    6e84:	220c      	movs	r2, #12
    6e86:	4373      	muls	r3, r6
    6e88:	fb02 3305 	mla	r3, r2, r5, r3
    6e8c:	4a12      	ldr	r2, [pc, #72]	; (6ed8 <mayfly_enqueue+0x98>)
    6e8e:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    6e90:	7a93      	ldrb	r3, [r2, #10]
    6e92:	7ad2      	ldrb	r2, [r2, #11]
    6e94:	1a9b      	subs	r3, r3, r2
    6e96:	bf18      	it	ne
    6e98:	2301      	movne	r3, #1
    6e9a:	e7d7      	b.n	6e4c <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    6e9c:	3202      	adds	r2, #2
    6e9e:	b2d2      	uxtb	r2, r2
    6ea0:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    6ea2:	68e3      	ldr	r3, [r4, #12]
    6ea4:	68a0      	ldr	r0, [r4, #8]
    6ea6:	4798      	blx	r3
		return 0;
    6ea8:	2000      	movs	r0, #0
    6eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    6eac:	2b00      	cmp	r3, #0
    6eae:	d0f8      	beq.n	6ea2 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    6eb0:	3201      	adds	r2, #1
    6eb2:	b2d2      	uxtb	r2, r2
    6eb4:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    6eb6:	2304      	movs	r3, #4
    6eb8:	2230      	movs	r2, #48	; 0x30
    6eba:	fb12 3206 	smlabb	r2, r2, r6, r3
    6ebe:	230c      	movs	r3, #12
    6ec0:	fb13 2305 	smlabb	r3, r3, r5, r2
    6ec4:	4a04      	ldr	r2, [pc, #16]	; (6ed8 <mayfly_enqueue+0x98>)
    6ec6:	6860      	ldr	r0, [r4, #4]
    6ec8:	441a      	add	r2, r3
    6eca:	4621      	mov	r1, r4
    6ecc:	f7ff ff47 	bl	6d5e <memq_enqueue>
    6ed0:	e7c8      	b.n	6e64 <mayfly_enqueue+0x24>
			return 1;
    6ed2:	4638      	mov	r0, r7

	return 0;
}
    6ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ed6:	bf00      	nop
    6ed8:	20000734 	.word	0x20000734

00006edc <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    6edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ee0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6ee4:	b089      	sub	sp, #36	; 0x24
    6ee6:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    6ee8:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    6eec:	4e43      	ldr	r6, [pc, #268]	; (6ffc <mayfly_run+0x120>)
    6eee:	9304      	str	r3, [sp, #16]
{
    6ef0:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    6ef2:	2404      	movs	r4, #4
	u8_t disable = 0;
    6ef4:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    6ef8:	3c01      	subs	r4, #1
    6efa:	b2e4      	uxtb	r4, r4
    6efc:	2cff      	cmp	r4, #255	; 0xff
    6efe:	d10b      	bne.n	6f18 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    6f00:	9b01      	ldr	r3, [sp, #4]
    6f02:	2b00      	cmp	r3, #0
    6f04:	d076      	beq.n	6ff4 <mayfly_run+0x118>
    6f06:	f1b8 0f00 	cmp.w	r8, #0
    6f0a:	d173      	bne.n	6ff4 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    6f0c:	4642      	mov	r2, r8
    6f0e:	4629      	mov	r1, r5
    6f10:	4628      	mov	r0, r5
    6f12:	f00c fcab 	bl	1386c <mayfly_enable_cb>
    6f16:	e06d      	b.n	6ff4 <mayfly_run+0x118>
		struct mayfly *m = 0;
    6f18:	f10d 0b20 	add.w	fp, sp, #32
    6f1c:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    6f1e:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    6f20:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    6f24:	f04f 0930 	mov.w	r9, #48	; 0x30
    6f28:	fb07 f304 	mul.w	r3, r7, r4
    6f2c:	fb09 3005 	mla	r0, r9, r5, r3
    6f30:	1831      	adds	r1, r6, r0
    6f32:	465a      	mov	r2, fp
    6f34:	6849      	ldr	r1, [r1, #4]
    6f36:	5830      	ldr	r0, [r6, r0]
    6f38:	9302      	str	r3, [sp, #8]
    6f3a:	f7ff ff17 	bl	6d6c <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    6f3e:	9b04      	ldr	r3, [sp, #16]
    6f40:	fb17 3704 	smlabb	r7, r7, r4, r3
    6f44:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    6f46:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    6f48:	9303      	str	r3, [sp, #12]
		while (link) {
    6f4a:	f1ba 0f00 	cmp.w	sl, #0
    6f4e:	d119      	bne.n	6f84 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    6f50:	2230      	movs	r2, #48	; 0x30
    6f52:	230c      	movs	r3, #12
    6f54:	436a      	muls	r2, r5
    6f56:	fb03 2204 	mla	r2, r3, r4, r2
    6f5a:	4432      	add	r2, r6
    6f5c:	7a91      	ldrb	r1, [r2, #10]
    6f5e:	7ad0      	ldrb	r0, [r2, #11]
    6f60:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    6f62:	bf1e      	ittt	ne
    6f64:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    6f66:	2201      	movne	r2, #1
    6f68:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    6f6a:	2230      	movs	r2, #48	; 0x30
    6f6c:	436a      	muls	r2, r5
    6f6e:	fb03 2304 	mla	r3, r3, r4, r2
    6f72:	4433      	add	r3, r6
    6f74:	7a1a      	ldrb	r2, [r3, #8]
    6f76:	7a59      	ldrb	r1, [r3, #9]
    6f78:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    6f7a:	bf1c      	itt	ne
    6f7c:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    6f7e:	f04f 0801 	movne.w	r8, #1
    6f82:	e7b9      	b.n	6ef8 <mayfly_run+0x1c>
			req = m->_req;
    6f84:	9b07      	ldr	r3, [sp, #28]
    6f86:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    6f88:	785a      	ldrb	r2, [r3, #1]
    6f8a:	1abf      	subs	r7, r7, r2
    6f8c:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    6f90:	2f01      	cmp	r7, #1
    6f92:	d104      	bne.n	6f9e <mayfly_run+0xc2>
				m->_ack--;
    6f94:	3a01      	subs	r2, #1
    6f96:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    6f98:	6898      	ldr	r0, [r3, #8]
    6f9a:	68da      	ldr	r2, [r3, #12]
    6f9c:	4790      	blx	r2
			req = m->_req;
    6f9e:	9a07      	ldr	r2, [sp, #28]
    6fa0:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    6fa2:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    6fa4:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    6fa6:	1a9a      	subs	r2, r3, r2
    6fa8:	f002 0203 	and.w	r2, r2, #3
    6fac:	2a01      	cmp	r2, #1
    6fae:	9305      	str	r3, [sp, #20]
    6fb0:	d00d      	beq.n	6fce <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    6fb2:	9b02      	ldr	r3, [sp, #8]
    6fb4:	9903      	ldr	r1, [sp, #12]
    6fb6:	fb09 3005 	mla	r0, r9, r5, r3
    6fba:	4430      	add	r0, r6
    6fbc:	2200      	movs	r2, #0
    6fbe:	6840      	ldr	r0, [r0, #4]
    6fc0:	f7ff fedc 	bl	6d7c <memq_dequeue>
				m->_link = link;
    6fc4:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    6fc6:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    6fc8:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    6fcc:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    6fce:	9b02      	ldr	r3, [sp, #8]
    6fd0:	fb09 3305 	mla	r3, r9, r5, r3
    6fd4:	18f1      	adds	r1, r6, r3
    6fd6:	465a      	mov	r2, fp
    6fd8:	6849      	ldr	r1, [r1, #4]
    6fda:	58f0      	ldr	r0, [r6, r3]
    6fdc:	f7ff fec6 	bl	6d6c <memq_peek>
			if (state == 1) {
    6fe0:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    6fe2:	4682      	mov	sl, r0
			if (state == 1) {
    6fe4:	d1b1      	bne.n	6f4a <mayfly_run+0x6e>
				if (caller_id || link) {
    6fe6:	b90c      	cbnz	r4, 6fec <mayfly_run+0x110>
    6fe8:	2800      	cmp	r0, #0
    6fea:	d0b1      	beq.n	6f50 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    6fec:	4629      	mov	r1, r5
    6fee:	4628      	mov	r0, r5
    6ff0:	f00c fc9c 	bl	1392c <mayfly_pend>
	}
}
    6ff4:	b009      	add	sp, #36	; 0x24
    6ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ffa:	bf00      	nop
    6ffc:	20000734 	.word	0x20000734

00007000 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    7000:	b510      	push	{r4, lr}
    7002:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    7004:	2000      	movs	r0, #0

	while (octets_len--) {
    7006:	3901      	subs	r1, #1
    7008:	b2c9      	uxtb	r1, r1
    700a:	29ff      	cmp	r1, #255	; 0xff
    700c:	d100      	bne.n	7010 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    700e:	bd10      	pop	{r4, pc}
		bite = *octets;
    7010:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    7014:	2b00      	cmp	r3, #0
    7016:	d0f6      	beq.n	7006 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    7018:	1e5c      	subs	r4, r3, #1
			one_count++;
    701a:	3001      	adds	r0, #1
			bite &= (bite - 1);
    701c:	4023      	ands	r3, r4
			one_count++;
    701e:	b2c0      	uxtb	r0, r0
    7020:	e7f8      	b.n	7014 <util_ones_count_get+0x14>

00007022 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    7022:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    7024:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    7026:	6805      	ldr	r5, [r0, #0]
	current = previous;
    7028:	461a      	mov	r2, r3
	total = 0;
    702a:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    702c:	2aff      	cmp	r2, #255	; 0xff
    702e:	d101      	bne.n	7034 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    7030:	2000      	movs	r0, #0
    7032:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    7034:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    7038:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    703a:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    703e:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    7042:	d004      	beq.n	704e <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    7044:	68b3      	ldr	r3, [r6, #8]
    7046:	441c      	add	r4, r3
		current = ticker_current->next;
    7048:	4613      	mov	r3, r2
    704a:	463a      	mov	r2, r7
    704c:	e7ee      	b.n	702c <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    704e:	4293      	cmp	r3, r2
    7050:	d100      	bne.n	7054 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    7052:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    7054:	b21b      	sxth	r3, r3
    7056:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    705a:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    705c:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    705e:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    7062:	7833      	ldrb	r3, [r6, #0]
    7064:	2bff      	cmp	r3, #255	; 0xff
    7066:	d006      	beq.n	7076 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    7068:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    706c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    7070:	689a      	ldr	r2, [r3, #8]
    7072:	4402      	add	r2, r0
    7074:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    7076:	4420      	add	r0, r4
    7078:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000707a <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    707a:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    707c:	1a55      	subs	r5, r2, r1
    707e:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    7082:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    7084:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7086:	d109      	bne.n	709c <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7088:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    708c:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    708e:	42a2      	cmp	r2, r4
    7090:	d90e      	bls.n	70b0 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    7092:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    7094:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    7096:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    7098:	6144      	str	r4, [r0, #20]
    709a:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    709c:	1a8a      	subs	r2, r1, r2
    709e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    70a2:	4293      	cmp	r3, r2
    70a4:	d901      	bls.n	70aa <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    70a6:	1a9a      	subs	r2, r3, r2
    70a8:	e7f1      	b.n	708e <ticks_to_expire_prep+0x14>
    70aa:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    70ac:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    70ae:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    70b0:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    70b2:	2200      	movs	r2, #0
    70b4:	e7ef      	b.n	7096 <ticks_to_expire_prep+0x1c>

000070b6 <ticker_job_op_cb>:
{
    70b6:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    70b8:	2200      	movs	r2, #0
    70ba:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    70bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    70be:	6259      	str	r1, [r3, #36]	; 0x24
{
    70c0:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    70c2:	b10a      	cbz	r2, 70c8 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    70c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    70c6:	4710      	bx	r2
    70c8:	4770      	bx	lr

000070ca <ticker_worker>:
{
    70ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    70ce:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    70d0:	2301      	movs	r3, #1
{
    70d2:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    70d4:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    70d6:	2d00      	cmp	r5, #0
    70d8:	d14c      	bne.n	7174 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    70da:	7f43      	ldrb	r3, [r0, #29]
    70dc:	2bff      	cmp	r3, #255	; 0xff
    70de:	d102      	bne.n	70e6 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    70e0:	77c5      	strb	r5, [r0, #31]
		return;
    70e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    70e6:	f00b ff2b 	bl	12f40 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    70ea:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    70ec:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    70ee:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    70f2:	1bc7      	subs	r7, r0, r7
    70f4:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    70f8:	2eff      	cmp	r6, #255	; 0xff
    70fa:	d006      	beq.n	710a <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    70fc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    7100:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7104:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7106:	429f      	cmp	r7, r3
    7108:	d218      	bcs.n	713c <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    710a:	7aa2      	ldrb	r2, [r4, #10]
    710c:	7ae3      	ldrb	r3, [r4, #11]
    710e:	4293      	cmp	r3, r2
    7110:	d105      	bne.n	711e <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    7112:	3301      	adds	r3, #1
    7114:	b2db      	uxtb	r3, r3
			last = 0;
    7116:	2b02      	cmp	r3, #2
    7118:	bf08      	it	eq
    711a:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    711c:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    711e:	7ae3      	ldrb	r3, [r4, #11]
    7120:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7124:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7126:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    7128:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    712a:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    712c:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    712e:	46ac      	mov	ip, r5
    7130:	4623      	mov	r3, r4
    7132:	2104      	movs	r1, #4
    7134:	2003      	movs	r0, #3
}
    7136:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    713a:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    713c:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    713e:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7140:	788a      	ldrb	r2, [r1, #2]
    7142:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    7144:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7148:	1a9b      	subs	r3, r3, r2
    714a:	b2db      	uxtb	r3, r3
    714c:	2b01      	cmp	r3, #1
    714e:	d1d3      	bne.n	70f8 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    7150:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    7154:	3a01      	subs	r2, #1
    7156:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    7158:	f1b9 0f00 	cmp.w	r9, #0
    715c:	d0cc      	beq.n	70f8 <ticker_worker+0x2e>
					   ticks_expired -
    715e:	6948      	ldr	r0, [r1, #20]
    7160:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    7162:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    7164:	1a28      	subs	r0, r5, r0
    7166:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    7168:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    716c:	690b      	ldr	r3, [r1, #16]
    716e:	6a49      	ldr	r1, [r1, #36]	; 0x24
    7170:	47c8      	blx	r9
    7172:	e7c1      	b.n	70f8 <ticker_worker+0x2e>
    7174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007178 <ticker_job>:
{
    7178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    717c:	7fc2      	ldrb	r2, [r0, #31]
{
    717e:	b095      	sub	sp, #84	; 0x54
    7180:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    7182:	2a00      	cmp	r2, #0
    7184:	f040 83be 	bne.w	7904 <ticker_job+0x78c>
	ticks_previous = instance->ticks_current;
    7188:	6943      	ldr	r3, [r0, #20]
    718a:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    718c:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    718e:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    7190:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7192:	7ac0      	ldrb	r0, [r0, #11]
    7194:	4298      	cmp	r0, r3
    7196:	f000 808f 	beq.w	72b8 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    719a:	440b      	add	r3, r1
    719c:	b2db      	uxtb	r3, r3
			first = 0;
    719e:	2b02      	cmp	r3, #2
    71a0:	bf08      	it	eq
    71a2:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    71a4:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    71a8:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    71ac:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    71ae:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    71b2:	9b07      	ldr	r3, [sp, #28]
    71b4:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    71b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    71ba:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    71be:	f89b 301d 	ldrb.w	r3, [fp, #29]
    71c2:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    71c4:	f8db 3000 	ldr.w	r3, [fp]
    71c8:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    71ca:	f8db 3004 	ldr.w	r3, [fp, #4]
    71ce:	930d      	str	r3, [sp, #52]	; 0x34
    71d0:	f89b 3009 	ldrb.w	r3, [fp, #9]
    71d4:	3b01      	subs	r3, #1
    71d6:	b2db      	uxtb	r3, r3
    71d8:	9304      	str	r3, [sp, #16]
	pending = 0;
    71da:	2300      	movs	r3, #0
    71dc:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    71de:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    71e2:	9b04      	ldr	r3, [sp, #16]
    71e4:	2bff      	cmp	r3, #255	; 0xff
    71e6:	d16a      	bne.n	72be <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    71e8:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    71ec:	9a05      	ldr	r2, [sp, #20]
    71ee:	1a9b      	subs	r3, r3, r2
    71f0:	bf18      	it	ne
    71f2:	2301      	movne	r3, #1
    71f4:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    71f6:	9b03      	ldr	r3, [sp, #12]
    71f8:	b1e3      	cbz	r3, 7234 <ticker_job+0xbc>
	node = &instance->node[0];
    71fa:	f8db 3000 	ldr.w	r3, [fp]
    71fe:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    7200:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    7204:	f89b 601d 	ldrb.w	r6, [fp, #29]
    7208:	2eff      	cmp	r6, #255	; 0xff
    720a:	d00c      	beq.n	7226 <ticker_job+0xae>
		ticker = &node[id_expired];
    720c:	b237      	sxth	r7, r6
    720e:	9b06      	ldr	r3, [sp, #24]
    7210:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    7214:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7218:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    721a:	4545      	cmp	r5, r8
    721c:	f240 8136 	bls.w	748c <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    7220:	eba5 0508 	sub.w	r5, r5, r8
    7224:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    7226:	9b04      	ldr	r3, [sp, #16]
    7228:	9a03      	ldr	r2, [sp, #12]
    722a:	9905      	ldr	r1, [sp, #20]
    722c:	42b1      	cmp	r1, r6
    722e:	bf18      	it	ne
    7230:	4613      	movne	r3, r2
    7232:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    7234:	f8db 3000 	ldr.w	r3, [fp]
    7238:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    723a:	f8db 3004 	ldr.w	r3, [fp, #4]
    723e:	9312      	str	r3, [sp, #72]	; 0x48
    7240:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7244:	3b01      	subs	r3, #1
    7246:	b2db      	uxtb	r3, r3
    7248:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    724a:	9b03      	ldr	r3, [sp, #12]
    724c:	2bff      	cmp	r3, #255	; 0xff
    724e:	f040 8170 	bne.w	7532 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7252:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7256:	9a05      	ldr	r2, [sp, #20]
    7258:	4293      	cmp	r3, r2
	if (!pending) {
    725a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    725c:	f040 8349 	bne.w	78f2 <ticker_job+0x77a>
	if (!pending) {
    7260:	b95b      	cbnz	r3, 727a <ticker_job+0x102>
    7262:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    7266:	f8db 3004 	ldr.w	r3, [fp, #4]
    726a:	9303      	str	r3, [sp, #12]
    726c:	3c01      	subs	r4, #1
    726e:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    7270:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    7274:	2cff      	cmp	r4, #255	; 0xff
    7276:	f040 82a0 	bne.w	77ba <ticker_job+0x642>
	instance->job_guard = 0;
    727a:	2300      	movs	r3, #0
    727c:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    7280:	9b04      	ldr	r3, [sp, #16]
    7282:	b14b      	cbz	r3, 7298 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    7284:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7288:	2bff      	cmp	r3, #255	; 0xff
    728a:	f040 82e9 	bne.w	7860 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    728e:	f00b fe2b 	bl	12ee8 <cntr_stop>
    7292:	b908      	cbnz	r0, 7298 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    7294:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    7298:	f89b 301f 	ldrb.w	r3, [fp, #31]
    729c:	2b00      	cmp	r3, #0
    729e:	f000 8331 	beq.w	7904 <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    72a2:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    72a6:	465b      	mov	r3, fp
    72a8:	2201      	movs	r2, #1
    72aa:	2103      	movs	r1, #3
    72ac:	2004      	movs	r0, #4
    72ae:	46a4      	mov	ip, r4
}
    72b0:	b015      	add	sp, #84	; 0x54
    72b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    72b6:	4760      	bx	ip
		flag_elapsed = 0;
    72b8:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    72ba:	4690      	mov	r8, r2
    72bc:	e77f      	b.n	71be <ticker_job+0x46>
		user = &users[count_user];
    72be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    72c0:	9a04      	ldr	r2, [sp, #16]
    72c2:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    72c6:	687b      	ldr	r3, [r7, #4]
    72c8:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    72ca:	78f9      	ldrb	r1, [r7, #3]
    72cc:	78be      	ldrb	r6, [r7, #2]
    72ce:	428e      	cmp	r6, r1
    72d0:	f000 80d7 	beq.w	7482 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    72d4:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    72d6:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    72d8:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    72dc:	0112      	lsls	r2, r2, #4
    72de:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    72e0:	1c73      	adds	r3, r6, #1
    72e2:	b2db      	uxtb	r3, r3
				middle = 0;
    72e4:	4298      	cmp	r0, r3
    72e6:	bf08      	it	eq
    72e8:	2300      	moveq	r3, #0
			user->middle = middle;
    72ea:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    72ec:	9b08      	ldr	r3, [sp, #32]
    72ee:	5c9a      	ldrb	r2, [r3, r2]
    72f0:	2a03      	cmp	r2, #3
    72f2:	d9eb      	bls.n	72cc <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    72f4:	2a05      	cmp	r2, #5
    72f6:	d817      	bhi.n	7328 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    72f8:	7869      	ldrb	r1, [r5, #1]
    72fa:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    72fe:	930c      	str	r3, [sp, #48]	; 0x30
    7300:	980c      	ldr	r0, [sp, #48]	; 0x30
    7302:	9b06      	ldr	r3, [sp, #24]
    7304:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    7308:	7863      	ldrb	r3, [r4, #1]
    730a:	78a0      	ldrb	r0, [r4, #2]
    730c:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    730e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7312:	d009      	beq.n	7328 <ticker_job+0x1b0>
			    (state == 0) ||
    7314:	2a04      	cmp	r2, #4
    7316:	d10c      	bne.n	7332 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    7318:	686a      	ldr	r2, [r5, #4]
    731a:	b952      	cbnz	r2, 7332 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    731c:	68aa      	ldr	r2, [r5, #8]
    731e:	b942      	cbnz	r2, 7332 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    7320:	68ea      	ldr	r2, [r5, #12]
    7322:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    7326:	d104      	bne.n	7332 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    7328:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    732a:	4628      	mov	r0, r5
    732c:	f7ff fec3 	bl	70b6 <ticker_job_op_cb>
    7330:	e7cb      	b.n	72ca <ticker_job+0x152>
			if (state == 1) {
    7332:	2b01      	cmp	r3, #1
    7334:	f040 809b 	bne.w	746e <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7338:	4658      	mov	r0, fp
    733a:	f7ff fe72 	bl	7022 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    733e:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7340:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7342:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7344:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7346:	f040 8084 	bne.w	7452 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    734a:	f8db 3014 	ldr.w	r3, [fp, #20]
    734e:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    7350:	f00b fdf6 	bl	12f40 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    7356:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7358:	1ac3      	subs	r3, r0, r3
    735a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    735e:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    7360:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7362:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    7364:	bf9e      	ittt	ls
    7366:	6962      	ldrls	r2, [r4, #20]
    7368:	1b92      	subls	r2, r2, r6
    736a:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    736c:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    736e:	bf96      	itet	ls
    7370:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    7372:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    7374:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    7376:	b18a      	cbz	r2, 739c <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    7378:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    737a:	b179      	cbz	r1, 739c <ticker_job+0x224>
		user_op->params.update.lazy--;
    737c:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    7380:	fa1f fe8e 	uxth.w	lr, lr
    7384:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7388:	429a      	cmp	r2, r3
    738a:	d32b      	bcc.n	73e4 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    738c:	f8df 9324 	ldr.w	r9, [pc, #804]	; 76b4 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7390:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    7394:	45e6      	cmp	lr, ip
    7396:	d847      	bhi.n	7428 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    7398:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    739c:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    739e:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    73a0:	4413      	add	r3, r2
    73a2:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    73a4:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    73a6:	6963      	ldr	r3, [r4, #20]
    73a8:	4413      	add	r3, r2
    73aa:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    73ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    73ae:	4620      	mov	r0, r4
    73b0:	f7ff fe63 	bl	707a <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    73b4:	69a2      	ldr	r2, [r4, #24]
    73b6:	892b      	ldrh	r3, [r5, #8]
    73b8:	4413      	add	r3, r2
    73ba:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    73bc:	896a      	ldrh	r2, [r5, #10]
    73be:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    73c0:	bf8c      	ite	hi
    73c2:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    73c4:	2300      	movls	r3, #0
    73c6:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    73c8:	7bab      	ldrb	r3, [r5, #14]
    73ca:	b103      	cbz	r3, 73ce <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    73cc:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    73ce:	9b06      	ldr	r3, [sp, #24]
    73d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    73d2:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    73d6:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    73d8:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    73dc:	3301      	adds	r3, #1
    73de:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    73e0:	2100      	movs	r1, #0
    73e2:	e7a2      	b.n	732a <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    73e4:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    73e8:	45e6      	cmp	lr, ip
    73ea:	d2cf      	bcs.n	738c <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    73ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
    73ee:	4eaf      	ldr	r6, [pc, #700]	; (76ac <ticker_job+0x534>)
    73f0:	48af      	ldr	r0, [pc, #700]	; (76b0 <ticker_job+0x538>)
    73f2:	198e      	adds	r6, r1, r6
    73f4:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    73f6:	bf81      	itttt	hi
    73f8:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    73fc:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    7400:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    7404:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    7406:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7408:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    740a:	bf8c      	ite	hi
    740c:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    7410:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    7414:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    7416:	4491      	add	r9, r2
			ticker->lazy_current--;
    7418:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    741c:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    741e:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    7422:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7426:	e7af      	b.n	7388 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    7428:	6a66      	ldr	r6, [r4, #36]	; 0x24
    742a:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    742c:	48a0      	ldr	r0, [pc, #640]	; (76b0 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    742e:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7430:	499e      	ldr	r1, [pc, #632]	; (76ac <ticker_job+0x534>)
    7432:	1871      	adds	r1, r6, r1
    7434:	4281      	cmp	r1, r0
	return 0;
    7436:	bf8e      	itee	hi
    7438:	2100      	movhi	r1, #0
		return 1;
    743a:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    743c:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    743e:	4411      	add	r1, r2
			ticker->lazy_current++;
    7440:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    7444:	bf8c      	ite	hi
    7446:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7448:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    744a:	440b      	add	r3, r1
			ticker->lazy_current++;
    744c:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7450:	e79e      	b.n	7390 <ticker_job+0x218>
		ticker->req = ticker->ack;
    7452:	78a3      	ldrb	r3, [r4, #2]
    7454:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    7456:	786b      	ldrb	r3, [r5, #1]
    7458:	f89b 201c 	ldrb.w	r2, [fp, #28]
    745c:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    745e:	bf01      	itttt	eq
    7460:	23ff      	moveq	r3, #255	; 0xff
    7462:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    7466:	2300      	moveq	r3, #0
    7468:	f8cb 3018 	streq.w	r3, [fp, #24]
    746c:	e7b8      	b.n	73e0 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    746e:	2104      	movs	r1, #4
    7470:	465b      	mov	r3, fp
    7472:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7476:	2201      	movs	r2, #1
    7478:	4608      	mov	r0, r1
    747a:	47a0      	blx	r4
				pending = 1;
    747c:	2301      	movs	r3, #1
				user->middle = prev;
    747e:	70be      	strb	r6, [r7, #2]
				pending = 1;
    7480:	9309      	str	r3, [sp, #36]	; 0x24
    7482:	9b04      	ldr	r3, [sp, #16]
    7484:	3b01      	subs	r3, #1
    7486:	b2db      	uxtb	r3, r3
    7488:	9304      	str	r3, [sp, #16]
    748a:	e6aa      	b.n	71e2 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    748c:	f8db 3018 	ldr.w	r3, [fp, #24]
    7490:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    7492:	bf29      	itett	cs
    7494:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    7496:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    7498:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    749c:	2300      	movcs	r3, #0
    749e:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    74a2:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    74a4:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    74a6:	b11b      	cbz	r3, 74b0 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    74a8:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    74ac:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    74b0:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    74b2:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    74b4:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    74b6:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    74ba:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    74be:	f8d4 e004 	ldr.w	lr, [r4, #4]
    74c2:	f1be 0f00 	cmp.w	lr, #0
    74c6:	d030      	beq.n	752a <ticker_job+0x3b2>
    74c8:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    74ca:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 76b0 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    74ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    74d0:	6a21      	ldr	r1, [r4, #32]
    74d2:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    74d4:	4975      	ldr	r1, [pc, #468]	; (76ac <ticker_job+0x534>)
    74d6:	1859      	adds	r1, r3, r1
    74d8:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    74da:	bf9f      	itttt	ls
    74dc:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    74e0:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    74e4:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    74e8:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    74ea:	bf92      	itee	ls
    74ec:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    74ee:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    74f0:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    74f2:	4473      	add	r3, lr
			while (count--) {
    74f4:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    74f8:	441a      	add	r2, r3
			while (count--) {
    74fa:	d2e8      	bcs.n	74ce <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    74fc:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    74fe:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7500:	f8db 1014 	ldr.w	r1, [fp, #20]
    7504:	eb03 0209 	add.w	r2, r3, r9
    7508:	4620      	mov	r0, r4
    750a:	f7ff fdb6 	bl	707a <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    750e:	8ba3      	ldrh	r3, [r4, #28]
    7510:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    7512:	2300      	movs	r3, #0
    7514:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    7516:	9b06      	ldr	r3, [sp, #24]
    7518:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    751c:	7863      	ldrb	r3, [r4, #1]
    751e:	3301      	adds	r3, #1
    7520:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    7522:	eba8 0805 	sub.w	r8, r8, r5
    7526:	46b2      	mov	sl, r6
    7528:	e66c      	b.n	7204 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    752a:	78a3      	ldrb	r3, [r4, #2]
    752c:	7063      	strb	r3, [r4, #1]
    752e:	4656      	mov	r6, sl
    7530:	e7f7      	b.n	7522 <ticker_job+0x3aa>
		user = &users[count_user];
    7532:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7534:	9a03      	ldr	r2, [sp, #12]
    7536:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    753a:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    753c:	685b      	ldr	r3, [r3, #4]
    753e:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    7540:	9b06      	ldr	r3, [sp, #24]
    7542:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    7546:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    754a:	f000 808e 	beq.w	766a <ticker_job+0x4f2>
				ticker = &node[id_insert];
    754e:	fa0f f38a 	sxth.w	r3, sl
    7552:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    7558:	46d0      	mov	r8, sl
    755a:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    755e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    7562:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    7564:	f8db 3000 	ldr.w	r3, [fp]
    7568:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    756a:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    756c:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    756e:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7570:	8be3      	ldrh	r3, [r4, #30]
    7572:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    7574:	bf86      	itte	hi
    7576:	1a9b      	subhi	r3, r3, r2
    7578:	b29b      	uxthhi	r3, r3
		skip = 0;
    757a:	2300      	movls	r3, #0
    757c:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    757e:	fa0f f388 	sxth.w	r3, r8
    7582:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7586:	00db      	lsls	r3, r3, #3
    7588:	9313      	str	r3, [sp, #76]	; 0x4c
    758a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    758c:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    7590:	f8db 0018 	ldr.w	r0, [fp, #24]
    7594:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    7596:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    759a:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    759c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    75a0:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    75a4:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    75a6:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    75a8:	2bff      	cmp	r3, #255	; 0xff
    75aa:	d007      	beq.n	75bc <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    75ac:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    75b0:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    75b4:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    75b6:	4281      	cmp	r1, r0
    75b8:	f200 80a9 	bhi.w	770e <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    75bc:	f8de 0018 	ldr.w	r0, [lr, #24]
    75c0:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    75c2:	eb01 0c00 	add.w	ip, r1, r0
    75c6:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    75c8:	2eff      	cmp	r6, #255	; 0xff
    75ca:	f040 80ae 	bne.w	772a <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    75ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
    75d0:	b130      	cbz	r0, 75e0 <ticker_job+0x468>
    75d2:	9807      	ldr	r0, [sp, #28]
    75d4:	4281      	cmp	r1, r0
    75d6:	f0c0 80bf 	bcc.w	7758 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    75da:	2eff      	cmp	r6, #255	; 0xff
    75dc:	f040 818e 	bne.w	78fc <ticker_job+0x784>
		if (previous == current) {
    75e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    75e2:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    75e6:	4283      	cmp	r3, r0
			node[previous].next = id;
    75e8:	bf18      	it	ne
    75ea:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    75ee:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    75f2:	bf16      	itet	ne
    75f4:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    75f8:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    75fc:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    7600:	2bff      	cmp	r3, #255	; 0xff
    7602:	d006      	beq.n	7612 <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    7604:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7608:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    760c:	689a      	ldr	r2, [r3, #8]
    760e:	1a51      	subs	r1, r2, r1
    7610:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    7612:	78a3      	ldrb	r3, [r4, #2]
    7614:	3301      	adds	r3, #1
    7616:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    7618:	2100      	movs	r1, #0
			if (user_op) {
    761a:	2d00      	cmp	r5, #0
    761c:	d093      	beq.n	7546 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    761e:	4628      	mov	r0, r5
    7620:	f7ff fd49 	bl	70b6 <ticker_job_op_cb>
    7624:	e78f      	b.n	7546 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    7626:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    762a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    762c:	011b      	lsls	r3, r3, #4
    762e:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    7630:	f109 0201 	add.w	r2, r9, #1
    7634:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    7638:	9a06      	ldr	r2, [sp, #24]
    763a:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    763c:	454a      	cmp	r2, r9
    763e:	bf08      	it	eq
    7640:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    7644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7646:	5cd3      	ldrb	r3, [r2, r3]
    7648:	2b03      	cmp	r3, #3
    764a:	d10e      	bne.n	766a <ticker_job+0x4f2>
				id_insert = user_op->id;
    764c:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    7650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7652:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    7656:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    765a:	7862      	ldrb	r2, [r4, #1]
    765c:	78a3      	ldrb	r3, [r4, #2]
    765e:	429a      	cmp	r2, r3
    7660:	d009      	beq.n	7676 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    7662:	2101      	movs	r1, #1
    7664:	4628      	mov	r0, r5
    7666:	f7ff fd26 	bl	70b6 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    766a:	9b06      	ldr	r3, [sp, #24]
    766c:	789b      	ldrb	r3, [r3, #2]
    766e:	454b      	cmp	r3, r9
    7670:	d1d9      	bne.n	7626 <ticker_job+0x4ae>
    7672:	9b03      	ldr	r3, [sp, #12]
    7674:	e5e6      	b.n	7244 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    7676:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    7678:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    767c:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    767e:	692b      	ldr	r3, [r5, #16]
    7680:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    7682:	8aab      	ldrh	r3, [r5, #20]
    7684:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    7686:	69ab      	ldr	r3, [r5, #24]
    7688:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    768a:	69eb      	ldr	r3, [r5, #28]
    768c:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    768e:	6a2b      	ldr	r3, [r5, #32]
    7690:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    7692:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    7694:	68ab      	ldr	r3, [r5, #8]
    7696:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    7698:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    769a:	686a      	ldr	r2, [r5, #4]
    769c:	4620      	mov	r0, r4
    769e:	f7ff fcec 	bl	707a <ticks_to_expire_prep>
	ticker->force = 1;
    76a2:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    76a4:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    76a6:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    76a8:	70e3      	strb	r3, [r4, #3]
    76aa:	e75b      	b.n	7564 <ticker_job+0x3ec>
    76ac:	ff172b5a 	.word	0xff172b5a
    76b0:	7f172b59 	.word	0x7f172b59
    76b4:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    76b8:	6860      	ldr	r0, [r4, #4]
    76ba:	2800      	cmp	r0, #0
    76bc:	d07b      	beq.n	77b6 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    76be:	6a62      	ldr	r2, [r4, #36]	; 0x24
    76c0:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    76c2:	4b92      	ldr	r3, [pc, #584]	; (790c <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    76c4:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    76c6:	4992      	ldr	r1, [pc, #584]	; (7910 <ticker_job+0x798>)
    76c8:	18d3      	adds	r3, r2, r3
    76ca:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    76cc:	bf9c      	itt	ls
    76ce:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    76d2:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    76d6:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    76d8:	bf8b      	itete	hi
    76da:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    76dc:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    76e0:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    76e2:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    76e4:	4403      	add	r3, r0
		return 1;
    76e6:	bf98      	it	ls
    76e8:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    76ea:	4413      	add	r3, r2
			ticker->lazy_current++;
    76ec:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    76ee:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    76f0:	3201      	adds	r2, #1
    76f2:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    76f4:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    76f6:	4293      	cmp	r3, r2
    76f8:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    76fc:	bf89      	itett	hi
    76fe:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    7700:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    7702:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    7704:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    7706:	bf9c      	itt	ls
    7708:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    770a:	60a1      	strls	r1, [r4, #8]
    770c:	e73d      	b.n	758a <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    770e:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    7710:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    7712:	b946      	cbnz	r6, 7726 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    7714:	9f07      	ldr	r7, [sp, #28]
    7716:	42b8      	cmp	r0, r7
    7718:	d200      	bcs.n	771c <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    771a:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    771c:	930b      	str	r3, [sp, #44]	; 0x2c
    771e:	9607      	str	r6, [sp, #28]
    7720:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    7724:	e740      	b.n	75a8 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    7726:	9308      	str	r3, [sp, #32]
    7728:	e7f8      	b.n	771c <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    772a:	b230      	sxth	r0, r6
    772c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    7730:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    7734:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    7736:	68bf      	ldr	r7, [r7, #8]
    7738:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    773a:	4567      	cmp	r7, ip
    773c:	d20a      	bcs.n	7754 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    773e:	9f10      	ldr	r7, [sp, #64]	; 0x40
    7740:	69bf      	ldr	r7, [r7, #24]
    7742:	2f00      	cmp	r7, #0
    7744:	f47f af43 	bne.w	75ce <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    7748:	9e11      	ldr	r6, [sp, #68]	; 0x44
    774a:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    774e:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    7752:	e739      	b.n	75c8 <ticker_job+0x450>
			return TICKER_NULL;
    7754:	26ff      	movs	r6, #255	; 0xff
    7756:	e73a      	b.n	75ce <ticker_job+0x456>
	while (id_insert !=
    7758:	9b08      	ldr	r3, [sp, #32]
    775a:	4598      	cmp	r8, r3
    775c:	f43f af59 	beq.w	7612 <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    7760:	9b08      	ldr	r3, [sp, #32]
    7762:	2bff      	cmp	r3, #255	; 0xff
    7764:	d0a8      	beq.n	76b8 <ticker_job+0x540>
    7766:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    7768:	b233      	sxth	r3, r6
    776a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    776e:	9307      	str	r3, [sp, #28]
    7770:	9a07      	ldr	r2, [sp, #28]
    7772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7774:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    7778:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    777a:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    777c:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    777e:	bf88      	it	hi
    7780:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    7782:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    7784:	bf8c      	ite	hi
    7786:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    7788:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    778a:	2a00      	cmp	r2, #0
    778c:	d094      	beq.n	76b8 <ticker_job+0x540>
    778e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7790:	4293      	cmp	r3, r2
    7792:	d891      	bhi.n	76b8 <ticker_job+0x540>
			    skip_collide <= skip &&
    7794:	78fa      	ldrb	r2, [r7, #3]
    7796:	78e3      	ldrb	r3, [r4, #3]
    7798:	429a      	cmp	r2, r3
    779a:	d28d      	bcs.n	76b8 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    779c:	4631      	mov	r1, r6
    779e:	4658      	mov	r0, fp
    77a0:	f7ff fc3f 	bl	7022 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    77a4:	78bb      	ldrb	r3, [r7, #2]
    77a6:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    77a8:	9a07      	ldr	r2, [sp, #28]
    77aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    77ac:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    77ae:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    77b2:	46b2      	mov	sl, r6
    77b4:	e6e9      	b.n	758a <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    77b6:	2101      	movs	r1, #1
    77b8:	e72f      	b.n	761a <ticker_job+0x4a2>
		user = &users[count_user];
    77ba:	9b03      	ldr	r3, [sp, #12]
    77bc:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    77c0:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    77c2:	786b      	ldrb	r3, [r5, #1]
    77c4:	78ea      	ldrb	r2, [r5, #3]
    77c6:	429a      	cmp	r2, r3
    77c8:	d102      	bne.n	77d0 <ticker_job+0x658>
    77ca:	3c01      	subs	r4, #1
    77cc:	b2e4      	uxtb	r4, r4
    77ce:	e551      	b.n	7274 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    77d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    77d4:	011b      	lsls	r3, r3, #4
    77d6:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    77d8:	5cf3      	ldrb	r3, [r6, r3]
    77da:	2b01      	cmp	r3, #1
    77dc:	d025      	beq.n	782a <ticker_job+0x6b2>
    77de:	2b02      	cmp	r3, #2
    77e0:	d12a      	bne.n	7838 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    77e2:	f8d2 c004 	ldr.w	ip, [r2, #4]
    77e6:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    77e8:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    77ec:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    77f0:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    77f4:	28ff      	cmp	r0, #255	; 0xff
    77f6:	d004      	beq.n	7802 <ticker_job+0x68a>
    77f8:	6819      	ldr	r1, [r3, #0]
    77fa:	f8db 7014 	ldr.w	r7, [fp, #20]
    77fe:	42b9      	cmp	r1, r7
    7800:	d023      	beq.n	784a <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    7802:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    7806:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    780a:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    780c:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    780e:	29ff      	cmp	r1, #255	; 0xff
    7810:	d007      	beq.n	7822 <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    7812:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    7816:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    781a:	6987      	ldr	r7, [r0, #24]
    781c:	6880      	ldr	r0, [r0, #8]
    781e:	b1df      	cbz	r7, 7858 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    7820:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    7822:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    7826:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    782a:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    782c:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    7830:	b113      	cbz	r3, 7838 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    7832:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    7834:	2000      	movs	r0, #0
    7836:	4798      	blx	r3
			first = user->first + 1;
    7838:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    783a:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    783c:	3301      	adds	r3, #1
    783e:	b2db      	uxtb	r3, r3
				first = 0;
    7840:	429a      	cmp	r2, r3
    7842:	bf08      	it	eq
    7844:	2300      	moveq	r3, #0
			user->first = first;
    7846:	706b      	strb	r3, [r5, #1]
    7848:	e7bb      	b.n	77c2 <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    784a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    784e:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    7852:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    7856:	e7da      	b.n	780e <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    7858:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    785a:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    785e:	e7d6      	b.n	780e <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    7860:	9b05      	ldr	r3, [sp, #20]
    7862:	2bff      	cmp	r3, #255	; 0xff
    7864:	d107      	bne.n	7876 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    7866:	f00b fb6b 	bl	12f40 <cntr_cnt_get>
    786a:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    786c:	f00b fb2e 	bl	12ecc <cntr_start>
    7870:	b908      	cbnz	r0, 7876 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    7872:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    7876:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    787a:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    787e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    7882:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7886:	260a      	movs	r6, #10
    7888:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    788a:	f00b fb59 	bl	12f40 <cntr_cnt_get>
		cc = instance->ticks_current;
    788e:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7892:	1b03      	subs	r3, r0, r4
    7894:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    7898:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    789a:	42ab      	cmp	r3, r5
    789c:	bf2c      	ite	cs
    789e:	18e4      	addcs	r4, r4, r3
    78a0:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    78a2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    78a6:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    78a8:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    78ac:	4620      	mov	r0, r4
    78ae:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    78b0:	f00b fb46 	bl	12f40 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    78b4:	1bc0      	subs	r0, r0, r7
    78b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    78ba:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    78bc:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    78be:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    78c2:	42a0      	cmp	r0, r4
    78c4:	f67f ace8 	bls.w	7298 <ticker_job+0x120>
		LL_ASSERT(i);
    78c8:	3e01      	subs	r6, #1
    78ca:	d1de      	bne.n	788a <ticker_job+0x712>
    78cc:	4a11      	ldr	r2, [pc, #68]	; (7914 <ticker_job+0x79c>)
    78ce:	4b12      	ldr	r3, [pc, #72]	; (7918 <ticker_job+0x7a0>)
    78d0:	9201      	str	r2, [sp, #4]
    78d2:	9200      	str	r2, [sp, #0]
    78d4:	681c      	ldr	r4, [r3, #0]
    78d6:	4911      	ldr	r1, [pc, #68]	; (791c <ticker_job+0x7a4>)
    78d8:	4b11      	ldr	r3, [pc, #68]	; (7920 <ticker_job+0x7a8>)
    78da:	4812      	ldr	r0, [pc, #72]	; (7924 <ticker_job+0x7ac>)
    78dc:	47a0      	blx	r4
    78de:	4040      	eors	r0, r0
    78e0:	f380 8811 	msr	BASEPRI, r0
    78e4:	f04f 0004 	mov.w	r0, #4
    78e8:	df02      	svc	2
	instance->job_guard = 0;
    78ea:	2300      	movs	r3, #0
    78ec:	f88b 301e 	strb.w	r3, [fp, #30]
    78f0:	e4c8      	b.n	7284 <ticker_job+0x10c>
	if (!pending) {
    78f2:	2b00      	cmp	r3, #0
    78f4:	d1f9      	bne.n	78ea <ticker_job+0x772>
		flag_compare_update = 1;
    78f6:	2301      	movs	r3, #1
    78f8:	9304      	str	r3, [sp, #16]
    78fa:	e4b2      	b.n	7262 <ticker_job+0xea>
	while (id_insert !=
    78fc:	45b0      	cmp	r8, r6
    78fe:	f47f af33 	bne.w	7768 <ticker_job+0x5f0>
    7902:	e686      	b.n	7612 <ticker_job+0x49a>
}
    7904:	b015      	add	sp, #84	; 0x54
    7906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    790a:	bf00      	nop
    790c:	ff172b5a 	.word	0xff172b5a
    7910:	7f172b59 	.word	0x7f172b59
    7914:	000159e9 	.word	0x000159e9
    7918:	20003ad4 	.word	0x20003ad4
    791c:	00016791 	.word	0x00016791
    7920:	0001773d 	.word	0x0001773d
    7924:	00017757 	.word	0x00017757

00007928 <ticker_init>:
{
    7928:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    792a:	4d1a      	ldr	r5, [pc, #104]	; (7994 <ticker_init+0x6c>)
{
    792c:	9f05      	ldr	r7, [sp, #20]
    792e:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    7932:	262c      	movs	r6, #44	; 0x2c
    7934:	4346      	muls	r6, r0
    7936:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    793a:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    793c:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    7940:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    7942:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    7946:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    794a:	3b01      	subs	r3, #1
    794c:	b2db      	uxtb	r3, r3
    794e:	2bff      	cmp	r3, #255	; 0xff
    7950:	d111      	bne.n	7976 <ticker_init+0x4e>
	if (count_op) {
    7952:	b9ec      	cbnz	r4, 7990 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    7954:	222c      	movs	r2, #44	; 0x2c
    7956:	fb02 5200 	mla	r2, r2, r0, r5
    795a:	9908      	ldr	r1, [sp, #32]
    795c:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    795e:	9909      	ldr	r1, [sp, #36]	; 0x24
    7960:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    7962:	990a      	ldr	r1, [sp, #40]	; 0x28
    7964:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    7966:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    7968:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    796a:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    796c:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    796e:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    7970:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    7972:	4620      	mov	r0, r4
    7974:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    7976:	b21a      	sxth	r2, r3
    7978:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    797c:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    797e:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    7982:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    7986:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    7988:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    798c:	b2e4      	uxtb	r4, r4
    798e:	e7dc      	b.n	794a <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    7990:	2001      	movs	r0, #1
}
    7992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7994:	200007f4 	.word	0x200007f4

00007998 <ticker_trigger>:
	instance = &_instance[instance_index];
    7998:	4a07      	ldr	r2, [pc, #28]	; (79b8 <ticker_trigger+0x20>)
    799a:	212c      	movs	r1, #44	; 0x2c
    799c:	fb00 2301 	mla	r3, r0, r1, r2
{
    79a0:	b410      	push	{r4}
	if (instance->sched_cb) {
    79a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    79a4:	b12c      	cbz	r4, 79b2 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    79a6:	46a4      	mov	ip, r4
    79a8:	2201      	movs	r2, #1
    79aa:	2103      	movs	r1, #3
    79ac:	2002      	movs	r0, #2
}
    79ae:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    79b0:	4760      	bx	ip
}
    79b2:	bc10      	pop	{r4}
    79b4:	4770      	bx	lr
    79b6:	bf00      	nop
    79b8:	200007f4 	.word	0x200007f4

000079bc <ticker_start>:
{
    79bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    79c0:	4f25      	ldr	r7, [pc, #148]	; (7a58 <ticker_start+0x9c>)
    79c2:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    79c6:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    79c8:	fb08 7000 	mla	r0, r8, r0, r7
    79cc:	fa0f fc81 	sxth.w	ip, r1
    79d0:	f8d0 e004 	ldr.w	lr, [r0, #4]
    79d4:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    79d8:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    79dc:	78f4      	ldrb	r4, [r6, #3]
    79de:	1c65      	adds	r5, r4, #1
    79e0:	b2ed      	uxtb	r5, r5
		last = 0;
    79e2:	45ae      	cmp	lr, r5
    79e4:	bf98      	it	ls
    79e6:	2500      	movls	r5, #0
	if (last == user->first) {
    79e8:	f896 e001 	ldrb.w	lr, [r6, #1]
    79ec:	45ae      	cmp	lr, r5
    79ee:	d02f      	beq.n	7a50 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    79f0:	f8d6 c004 	ldr.w	ip, [r6, #4]
    79f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    79f8:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    79fc:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    7a00:	f04f 0a03 	mov.w	sl, #3
    7a04:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    7a08:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    7a0a:	9b08      	ldr	r3, [sp, #32]
    7a0c:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    7a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7a10:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    7a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7a14:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    7a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7a18:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    7a1a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    7a1e:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    7a20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7a22:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    7a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7a26:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    7a28:	2302      	movs	r3, #2
    7a2a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7a2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7a2e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7a30:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    7a32:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    7a34:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7a36:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7a38:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7a3a:	6a03      	ldr	r3, [r0, #32]
    7a3c:	4608      	mov	r0, r1
    7a3e:	4798      	blx	r3
    7a40:	fb09 7308 	mla	r3, r9, r8, r7
    7a44:	2200      	movs	r2, #0
    7a46:	2104      	movs	r1, #4
    7a48:	47a8      	blx	r5
	return user_op->status;
    7a4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7a50:	2001      	movs	r0, #1
}
    7a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7a56:	bf00      	nop
    7a58:	200007f4 	.word	0x200007f4

00007a5c <ticker_update>:
{
    7a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7a60:	f8df 8090 	ldr.w	r8, [pc, #144]	; 7af4 <ticker_update+0x98>
    7a64:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7a68:	fb0a 8e00 	mla	lr, sl, r0, r8
    7a6c:	b20f      	sxth	r7, r1
    7a6e:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    7a72:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7a74:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    7a78:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    7a7c:	78c4      	ldrb	r4, [r0, #3]
    7a7e:	1c66      	adds	r6, r4, #1
    7a80:	b2f6      	uxtb	r6, r6
		last = 0;
    7a82:	42b5      	cmp	r5, r6
    7a84:	bf98      	it	ls
    7a86:	2600      	movls	r6, #0
	if (last == user->first) {
    7a88:	7845      	ldrb	r5, [r0, #1]
    7a8a:	42b5      	cmp	r5, r6
    7a8c:	d02f      	beq.n	7aee <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    7a8e:	f8d0 c004 	ldr.w	ip, [r0, #4]
    7a92:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7a96:	0125      	lsls	r5, r4, #4
    7a98:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    7a9c:	2704      	movs	r7, #4
    7a9e:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    7aa2:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    7aa4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    7aa8:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    7aaa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7aae:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    7ab0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7ab4:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    7ab6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    7aba:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    7abc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    7ac0:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    7ac2:	2302      	movs	r3, #2
    7ac4:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7ac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7ac8:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    7acc:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    7ace:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7ad0:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7ad2:	f8de 3020 	ldr.w	r3, [lr, #32]
    7ad6:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    7ada:	4608      	mov	r0, r1
    7adc:	4798      	blx	r3
    7ade:	fb09 830a 	mla	r3, r9, sl, r8
    7ae2:	2200      	movs	r2, #0
    7ae4:	4639      	mov	r1, r7
    7ae6:	47a8      	blx	r5
	return user_op->status;
    7ae8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7aee:	2001      	movs	r0, #1
}
    7af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7af4:	200007f4 	.word	0x200007f4

00007af8 <ticker_stop>:
{
    7af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7afc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 7b6c <ticker_stop+0x74>
    7b00:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7b04:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7b08:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7b0a:	f8de 0004 	ldr.w	r0, [lr, #4]
    7b0e:	b20e      	sxth	r6, r1
    7b10:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    7b14:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7b18:	78fc      	ldrb	r4, [r7, #3]
    7b1a:	1c65      	adds	r5, r4, #1
    7b1c:	b2ed      	uxtb	r5, r5
		last = 0;
    7b1e:	42a8      	cmp	r0, r5
    7b20:	bf98      	it	ls
    7b22:	2500      	movls	r5, #0
	if (last == user->first) {
    7b24:	7878      	ldrb	r0, [r7, #1]
    7b26:	42a8      	cmp	r0, r5
    7b28:	d01d      	beq.n	7b66 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    7b2a:	6878      	ldr	r0, [r7, #4]
    7b2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7b30:	0124      	lsls	r4, r4, #4
    7b32:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    7b34:	f04f 0c05 	mov.w	ip, #5
    7b38:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    7b3c:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    7b3e:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    7b40:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    7b42:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    7b44:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    7b46:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    7b48:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7b4a:	f8de 3020 	ldr.w	r3, [lr, #32]
    7b4e:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    7b52:	4608      	mov	r0, r1
    7b54:	4798      	blx	r3
    7b56:	fb08 930a 	mla	r3, r8, sl, r9
    7b5a:	2200      	movs	r2, #0
    7b5c:	2104      	movs	r1, #4
    7b5e:	47a0      	blx	r4
	return user_op->status;
    7b60:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7b66:	2001      	movs	r0, #1
}
    7b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b6c:	200007f4 	.word	0x200007f4

00007b70 <ticker_next_slot_get>:
{
    7b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7b74:	f8df 8078 	ldr.w	r8, [pc, #120]	; 7bf0 <ticker_next_slot_get+0x80>
    7b78:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    7b7c:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7b7e:	fb0a 8000 	mla	r0, sl, r0, r8
    7b82:	fa0f fe81 	sxth.w	lr, r1
    7b86:	6845      	ldr	r5, [r0, #4]
    7b88:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    7b8c:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    7b90:	78fc      	ldrb	r4, [r7, #3]
    7b92:	1c66      	adds	r6, r4, #1
    7b94:	b2f6      	uxtb	r6, r6
		last = 0;
    7b96:	42b5      	cmp	r5, r6
    7b98:	bf98      	it	ls
    7b9a:	2600      	movls	r6, #0
	if (last == user->first) {
    7b9c:	787d      	ldrb	r5, [r7, #1]
    7b9e:	42b5      	cmp	r5, r6
    7ba0:	d023      	beq.n	7bea <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    7ba2:	f8d7 c004 	ldr.w	ip, [r7, #4]
    7ba6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7baa:	0125      	lsls	r5, r4, #4
    7bac:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    7bb0:	f04f 0e02 	mov.w	lr, #2
    7bb4:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    7bb8:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    7bba:	9b08      	ldr	r3, [sp, #32]
    7bbc:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    7bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7bc0:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    7bc2:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    7bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    7bc6:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    7bc8:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7bca:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    7bce:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7bd0:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7bd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7bd4:	6a03      	ldr	r3, [r0, #32]
    7bd6:	4608      	mov	r0, r1
    7bd8:	4798      	blx	r3
    7bda:	fb09 830a 	mla	r3, r9, sl, r8
    7bde:	2200      	movs	r2, #0
    7be0:	2104      	movs	r1, #4
    7be2:	47a8      	blx	r5
	return user_op->status;
    7be4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7bea:	2001      	movs	r0, #1
}
    7bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bf0:	200007f4 	.word	0x200007f4

00007bf4 <ticker_job_idle_get>:
{
    7bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7bf8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 7c68 <ticker_job_idle_get+0x74>
    7bfc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7c00:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7c04:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7c06:	f8de 0004 	ldr.w	r0, [lr, #4]
    7c0a:	b20e      	sxth	r6, r1
    7c0c:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    7c10:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7c14:	78fc      	ldrb	r4, [r7, #3]
    7c16:	1c65      	adds	r5, r4, #1
    7c18:	b2ed      	uxtb	r5, r5
		last = 0;
    7c1a:	42a8      	cmp	r0, r5
    7c1c:	bf98      	it	ls
    7c1e:	2500      	movls	r5, #0
	if (last == user->first) {
    7c20:	7878      	ldrb	r0, [r7, #1]
    7c22:	42a8      	cmp	r0, r5
    7c24:	d01d      	beq.n	7c62 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    7c26:	6878      	ldr	r0, [r7, #4]
    7c28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7c2c:	0124      	lsls	r4, r4, #4
    7c2e:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    7c30:	f04f 0c01 	mov.w	ip, #1
    7c34:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    7c38:	20ff      	movs	r0, #255	; 0xff
    7c3a:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7c3c:	2002      	movs	r0, #2
    7c3e:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7c40:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    7c42:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    7c44:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c46:	f8de 3020 	ldr.w	r3, [lr, #32]
    7c4a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    7c4e:	4608      	mov	r0, r1
    7c50:	4798      	blx	r3
    7c52:	fb08 930a 	mla	r3, r8, sl, r9
    7c56:	2200      	movs	r2, #0
    7c58:	2104      	movs	r1, #4
    7c5a:	47a0      	blx	r4
	return user_op->status;
    7c5c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7c62:	2001      	movs	r0, #1
}
    7c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c68:	200007f4 	.word	0x200007f4

00007c6c <ticker_job_sched>:
{
    7c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c70:	4c08      	ldr	r4, [pc, #32]	; (7c94 <ticker_job_sched+0x28>)
    7c72:	252c      	movs	r5, #44	; 0x2c
    7c74:	fb05 4300 	mla	r3, r5, r0, r4
{
    7c78:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c7a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    7c7c:	6a1b      	ldr	r3, [r3, #32]
    7c7e:	4608      	mov	r0, r1
    7c80:	4798      	blx	r3
    7c82:	fb06 4305 	mla	r3, r6, r5, r4
    7c86:	46bc      	mov	ip, r7
    7c88:	2200      	movs	r2, #0
    7c8a:	2104      	movs	r1, #4
}
    7c8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c90:	4760      	bx	ip
    7c92:	bf00      	nop
    7c94:	200007f4 	.word	0x200007f4

00007c98 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    7c98:	f00b b952 	b.w	12f40 <cntr_cnt_get>

00007c9c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7c9c:	1a40      	subs	r0, r0, r1
}
    7c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7ca2:	4770      	bx	lr

00007ca4 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    7ca4:	b508      	push	{r3, lr}
    7ca6:	4603      	mov	r3, r0
	if (addr_type > 1) {
    7ca8:	2b01      	cmp	r3, #1
{
    7caa:	4608      	mov	r0, r1
	if (addr_type > 1) {
    7cac:	d80e      	bhi.n	7ccc <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    7cae:	b133      	cbz	r3, 7cbe <ll_addr_get+0x1a>
		if (bdaddr) {
    7cb0:	b119      	cbz	r1, 7cba <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    7cb2:	2206      	movs	r2, #6
    7cb4:	4906      	ldr	r1, [pc, #24]	; (7cd0 <ll_addr_get+0x2c>)
    7cb6:	f7f9 ffb3 	bl	1c20 <memcpy>
		}

		return rnd_addr;
    7cba:	4805      	ldr	r0, [pc, #20]	; (7cd0 <ll_addr_get+0x2c>)
    7cbc:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    7cbe:	b119      	cbz	r1, 7cc8 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    7cc0:	2206      	movs	r2, #6
    7cc2:	4904      	ldr	r1, [pc, #16]	; (7cd4 <ll_addr_get+0x30>)
    7cc4:	f7f9 ffac 	bl	1c20 <memcpy>
	}

	return pub_addr;
    7cc8:	4802      	ldr	r0, [pc, #8]	; (7cd4 <ll_addr_get+0x30>)
}
    7cca:	bd08      	pop	{r3, pc}
		return NULL;
    7ccc:	2000      	movs	r0, #0
    7cce:	bd08      	pop	{r3, pc}
    7cd0:	20000852 	.word	0x20000852
    7cd4:	2000084c 	.word	0x2000084c

00007cd8 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    7cd8:	b570      	push	{r4, r5, r6, lr}
    7cda:	4606      	mov	r6, r0
    7cdc:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    7cde:	f008 fc69 	bl	105b4 <ll_adv_is_enabled>
    7ce2:	4604      	mov	r4, r0
    7ce4:	b110      	cbz	r0, 7cec <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    7ce6:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    7ce8:	4620      	mov	r0, r4
    7cea:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    7cec:	f008 fc76 	bl	105dc <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    7cf0:	f010 0f06 	tst.w	r0, #6
    7cf4:	d1f7      	bne.n	7ce6 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7cf6:	2206      	movs	r2, #6
    7cf8:	4629      	mov	r1, r5
	if (addr_type) {
    7cfa:	b11e      	cbz	r6, 7d04 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7cfc:	4802      	ldr	r0, [pc, #8]	; (7d08 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    7cfe:	f7f9 ff8f 	bl	1c20 <memcpy>
    7d02:	e7f1      	b.n	7ce8 <ll_addr_set+0x10>
    7d04:	4801      	ldr	r0, [pc, #4]	; (7d0c <ll_addr_set+0x34>)
    7d06:	e7fa      	b.n	7cfe <ll_addr_set+0x26>
    7d08:	20000852 	.word	0x20000852
    7d0c:	2000084c 	.word	0x2000084c

00007d10 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    7d10:	2300      	movs	r3, #0
    7d12:	7003      	strb	r3, [r0, #0]
	*max = 0;
    7d14:	700b      	strb	r3, [r1, #0]
    7d16:	4770      	bx	lr

00007d18 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    7d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7d1a:	4607      	mov	r7, r0
    7d1c:	460e      	mov	r6, r1
	while (len) {
    7d1e:	460c      	mov	r4, r1
    7d20:	1b35      	subs	r5, r6, r4
    7d22:	443d      	add	r5, r7
    7d24:	b18c      	cbz	r4, 7d4a <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    7d26:	f7f9 f95f 	bl	fe8 <sys_rand32_get>

		if (len >= sizeof(v)) {
    7d2a:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    7d2c:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    7d2e:	d907      	bls.n	7d40 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    7d30:	2204      	movs	r2, #4
    7d32:	eb0d 0102 	add.w	r1, sp, r2
    7d36:	4628      	mov	r0, r5
    7d38:	f7f9 ff72 	bl	1c20 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    7d3c:	3c04      	subs	r4, #4
    7d3e:	e7ef      	b.n	7d20 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    7d40:	4622      	mov	r2, r4
    7d42:	a901      	add	r1, sp, #4
    7d44:	4628      	mov	r0, r5
    7d46:	f7f9 ff6b 	bl	1c20 <memcpy>
			break;
		}
	}

	return 0;
}
    7d4a:	2000      	movs	r0, #0
    7d4c:	b003      	add	sp, #12
    7d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007d50 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    7d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));
    7d54:	f8df 8090 	ldr.w	r8, [pc, #144]	; 7de8 <bt_encrypt_le+0x98>
    7d58:	4c1e      	ldr	r4, [pc, #120]	; (7dd4 <bt_encrypt_le+0x84>)
    7d5a:	f8d8 b000 	ldr.w	fp, [r8]
    7d5e:	4e1e      	ldr	r6, [pc, #120]	; (7dd8 <bt_encrypt_le+0x88>)
    7d60:	4d1e      	ldr	r5, [pc, #120]	; (7ddc <bt_encrypt_le+0x8c>)
{
    7d62:	b089      	sub	sp, #36	; 0x24
    7d64:	4617      	mov	r7, r2
    7d66:	468a      	mov	sl, r1
    7d68:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    7d6a:	f00d f825 	bl	14db8 <_impl_k_current_get>
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));
    7d6e:	2110      	movs	r1, #16
    7d70:	9007      	str	r0, [sp, #28]
    7d72:	4648      	mov	r0, r9
    7d74:	f7f9 ffa4 	bl	1cc0 <bt_hex>
    7d78:	2110      	movs	r1, #16
    7d7a:	9006      	str	r0, [sp, #24]
    7d7c:	4650      	mov	r0, sl
    7d7e:	f7f9 ff9f 	bl	1cc0 <bt_hex>
    7d82:	9a06      	ldr	r2, [sp, #24]
    7d84:	9b07      	ldr	r3, [sp, #28]
    7d86:	9003      	str	r0, [sp, #12]
    7d88:	9202      	str	r2, [sp, #8]
    7d8a:	9301      	str	r3, [sp, #4]
    7d8c:	4622      	mov	r2, r4
    7d8e:	4633      	mov	r3, r6
    7d90:	4629      	mov	r1, r5
    7d92:	9404      	str	r4, [sp, #16]
    7d94:	9400      	str	r4, [sp, #0]
    7d96:	4812      	ldr	r0, [pc, #72]	; (7de0 <bt_encrypt_le+0x90>)
    7d98:	47d8      	blx	fp

	ecb_encrypt(key, plaintext, enc_data, NULL);
    7d9a:	463a      	mov	r2, r7
    7d9c:	2300      	movs	r3, #0
    7d9e:	4651      	mov	r1, sl
    7da0:	4648      	mov	r0, r9
    7da2:	f00b f901 	bl	12fa8 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));
    7da6:	f8d8 8000 	ldr.w	r8, [r8]
    7daa:	f00d f805 	bl	14db8 <_impl_k_current_get>
    7dae:	2110      	movs	r1, #16
    7db0:	4681      	mov	r9, r0
    7db2:	4638      	mov	r0, r7
    7db4:	f7f9 ff84 	bl	1cc0 <bt_hex>
    7db8:	9403      	str	r4, [sp, #12]
    7dba:	9002      	str	r0, [sp, #8]
    7dbc:	e88d 0210 	stmia.w	sp, {r4, r9}
    7dc0:	4633      	mov	r3, r6
    7dc2:	4622      	mov	r2, r4
    7dc4:	4629      	mov	r1, r5
    7dc6:	4807      	ldr	r0, [pc, #28]	; (7de4 <bt_encrypt_le+0x94>)
    7dc8:	47c0      	blx	r8

	return 0;
}
    7dca:	2000      	movs	r0, #0
    7dcc:	b009      	add	sp, #36	; 0x24
    7dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7dd2:	bf00      	nop
    7dd4:	000159e9 	.word	0x000159e9
    7dd8:	0001777a 	.word	0x0001777a
    7ddc:	00016791 	.word	0x00016791
    7de0:	00017788 	.word	0x00017788
    7de4:	000177b1 	.word	0x000177b1
    7de8:	20003ad4 	.word	0x20003ad4

00007dec <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    7dec:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    7dee:	4802      	ldr	r0, [pc, #8]	; (7df8 <_hci_driver_init+0xc>)
    7df0:	f7fb fdbc 	bl	396c <bt_hci_driver_register>

	return 0;
}
    7df4:	2000      	movs	r0, #0
    7df6:	bd08      	pop	{r3, pc}
    7df8:	00017834 	.word	0x00017834

00007dfc <hci_driver_send>:
{
    7dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_DBG("enter");
    7e00:	4f3f      	ldr	r7, [pc, #252]	; (7f00 <hci_driver_send+0x104>)
    7e02:	4c40      	ldr	r4, [pc, #256]	; (7f04 <hci_driver_send+0x108>)
    7e04:	683d      	ldr	r5, [r7, #0]
{
    7e06:	b087      	sub	sp, #28
    7e08:	4606      	mov	r6, r0
    7e0a:	f00c ffd5 	bl	14db8 <_impl_k_current_get>
	BT_DBG("enter");
    7e0e:	4b3e      	ldr	r3, [pc, #248]	; (7f08 <hci_driver_send+0x10c>)
    7e10:	9001      	str	r0, [sp, #4]
    7e12:	9402      	str	r4, [sp, #8]
    7e14:	9400      	str	r4, [sp, #0]
    7e16:	4622      	mov	r2, r4
    7e18:	493c      	ldr	r1, [pc, #240]	; (7f0c <hci_driver_send+0x110>)
    7e1a:	483d      	ldr	r0, [pc, #244]	; (7f10 <hci_driver_send+0x114>)
    7e1c:	47a8      	blx	r5
	if (!buf->len) {
    7e1e:	89b3      	ldrh	r3, [r6, #12]
    7e20:	46b8      	mov	r8, r7
    7e22:	4625      	mov	r5, r4
    7e24:	b96b      	cbnz	r3, 7e42 <hci_driver_send+0x46>
		BT_ERR("Empty HCI packet");
    7e26:	9401      	str	r4, [sp, #4]
    7e28:	9400      	str	r4, [sp, #0]
    7e2a:	683d      	ldr	r5, [r7, #0]
    7e2c:	4b36      	ldr	r3, [pc, #216]	; (7f08 <hci_driver_send+0x10c>)
    7e2e:	4937      	ldr	r1, [pc, #220]	; (7f0c <hci_driver_send+0x110>)
    7e30:	4838      	ldr	r0, [pc, #224]	; (7f14 <hci_driver_send+0x118>)
    7e32:	4622      	mov	r2, r4
    7e34:	47a8      	blx	r5
		return -EINVAL;
    7e36:	f06f 0415 	mvn.w	r4, #21
}
    7e3a:	4620      	mov	r0, r4
    7e3c:	b007      	add	sp, #28
    7e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    7e42:	7d33      	ldrb	r3, [r6, #20]
	switch (type) {
    7e44:	2b00      	cmp	r3, #0
    7e46:	d02c      	beq.n	7ea2 <hci_driver_send+0xa6>
    7e48:	2b02      	cmp	r3, #2
    7e4a:	d14b      	bne.n	7ee4 <hci_driver_send+0xe8>
	err = hci_acl_handle(buf, &evt);
    7e4c:	a905      	add	r1, sp, #20
    7e4e:	4630      	mov	r0, r6
    7e50:	f001 f984 	bl	915c <hci_acl_handle>
	if (evt) {
    7e54:	9b05      	ldr	r3, [sp, #20]
	err = hci_acl_handle(buf, &evt);
    7e56:	4604      	mov	r4, r0
	if (evt) {
    7e58:	b183      	cbz	r3, 7e7c <hci_driver_send+0x80>
		BT_DBG("Replying with event of %u bytes", evt->len);
    7e5a:	683f      	ldr	r7, [r7, #0]
    7e5c:	f00c ffac 	bl	14db8 <_impl_k_current_get>
    7e60:	9b05      	ldr	r3, [sp, #20]
    7e62:	9503      	str	r5, [sp, #12]
    7e64:	899b      	ldrh	r3, [r3, #12]
    7e66:	9302      	str	r3, [sp, #8]
    7e68:	9001      	str	r0, [sp, #4]
    7e6a:	9500      	str	r5, [sp, #0]
    7e6c:	482a      	ldr	r0, [pc, #168]	; (7f18 <hci_driver_send+0x11c>)
    7e6e:	4b2b      	ldr	r3, [pc, #172]	; (7f1c <hci_driver_send+0x120>)
    7e70:	4926      	ldr	r1, [pc, #152]	; (7f0c <hci_driver_send+0x110>)
    7e72:	462a      	mov	r2, r5
    7e74:	47b8      	blx	r7
		bt_recv_prio(evt);
    7e76:	9805      	ldr	r0, [sp, #20]
    7e78:	f7fb fc86 	bl	3788 <bt_recv_prio>
	if (!err) {
    7e7c:	b91c      	cbnz	r4, 7e86 <hci_driver_send+0x8a>
		net_buf_unref(buf);
    7e7e:	4630      	mov	r0, r6
    7e80:	f00b fed6 	bl	13c30 <net_buf_unref>
    7e84:	2400      	movs	r4, #0
	BT_DBG("exit: %d", err);
    7e86:	f8d8 6000 	ldr.w	r6, [r8]
    7e8a:	f00c ff95 	bl	14db8 <_impl_k_current_get>
    7e8e:	9503      	str	r5, [sp, #12]
    7e90:	9001      	str	r0, [sp, #4]
    7e92:	9402      	str	r4, [sp, #8]
    7e94:	9500      	str	r5, [sp, #0]
    7e96:	4b1c      	ldr	r3, [pc, #112]	; (7f08 <hci_driver_send+0x10c>)
    7e98:	4a1a      	ldr	r2, [pc, #104]	; (7f04 <hci_driver_send+0x108>)
    7e9a:	491c      	ldr	r1, [pc, #112]	; (7f0c <hci_driver_send+0x110>)
    7e9c:	4820      	ldr	r0, [pc, #128]	; (7f20 <hci_driver_send+0x124>)
    7e9e:	47b0      	blx	r6
	return err;
    7ea0:	e7cb      	b.n	7e3a <hci_driver_send+0x3e>
	evt = hci_cmd_handle(buf);
    7ea2:	4630      	mov	r0, r6
    7ea4:	f000 fbac 	bl	8600 <hci_cmd_handle>
	if (evt) {
    7ea8:	4604      	mov	r4, r0
    7eaa:	2800      	cmp	r0, #0
    7eac:	d0e7      	beq.n	7e7e <hci_driver_send+0x82>
		hdr = (void *)evt->data;
    7eae:	6887      	ldr	r7, [r0, #8]
		BT_DBG("Replying with event of %u bytes", evt->len);
    7eb0:	f8d8 9000 	ldr.w	r9, [r8]
    7eb4:	f00c ff80 	bl	14db8 <_impl_k_current_get>
    7eb8:	9503      	str	r5, [sp, #12]
    7eba:	89a3      	ldrh	r3, [r4, #12]
    7ebc:	9302      	str	r3, [sp, #8]
    7ebe:	9001      	str	r0, [sp, #4]
    7ec0:	462a      	mov	r2, r5
    7ec2:	9500      	str	r5, [sp, #0]
    7ec4:	4b17      	ldr	r3, [pc, #92]	; (7f24 <hci_driver_send+0x128>)
    7ec6:	4911      	ldr	r1, [pc, #68]	; (7f0c <hci_driver_send+0x110>)
    7ec8:	4813      	ldr	r0, [pc, #76]	; (7f18 <hci_driver_send+0x11c>)
    7eca:	47c8      	blx	r9
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    7ecc:	783a      	ldrb	r2, [r7, #0]
    7ece:	2a13      	cmp	r2, #19
    7ed0:	d812      	bhi.n	7ef8 <hci_driver_send+0xfc>
    7ed2:	2301      	movs	r3, #1
    7ed4:	4093      	lsls	r3, r2
    7ed6:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    7eda:	d00d      	beq.n	7ef8 <hci_driver_send+0xfc>
			bt_recv_prio(evt);
    7edc:	4620      	mov	r0, r4
    7ede:	f7fb fc53 	bl	3788 <bt_recv_prio>
    7ee2:	e7cc      	b.n	7e7e <hci_driver_send+0x82>
	switch (type) {
    7ee4:	9301      	str	r3, [sp, #4]
		BT_ERR("Unknown HCI type %u", type);
    7ee6:	9402      	str	r4, [sp, #8]
    7ee8:	9400      	str	r4, [sp, #0]
    7eea:	683d      	ldr	r5, [r7, #0]
    7eec:	4b06      	ldr	r3, [pc, #24]	; (7f08 <hci_driver_send+0x10c>)
    7eee:	4907      	ldr	r1, [pc, #28]	; (7f0c <hci_driver_send+0x110>)
    7ef0:	480d      	ldr	r0, [pc, #52]	; (7f28 <hci_driver_send+0x12c>)
    7ef2:	4622      	mov	r2, r4
    7ef4:	47a8      	blx	r5
    7ef6:	e79e      	b.n	7e36 <hci_driver_send+0x3a>
			bt_recv(evt);
    7ef8:	4620      	mov	r0, r4
    7efa:	f7fb f8bb 	bl	3074 <bt_recv>
    7efe:	e7be      	b.n	7e7e <hci_driver_send+0x82>
    7f00:	20003ad4 	.word	0x20003ad4
    7f04:	000159e9 	.word	0x000159e9
    7f08:	00017811 	.word	0x00017811
    7f0c:	00016791 	.word	0x00016791
    7f10:	00017893 	.word	0x00017893
    7f14:	000178ae 	.word	0x000178ae
    7f18:	000178cf 	.word	0x000178cf
    7f1c:	00017806 	.word	0x00017806
    7f20:	00017928 	.word	0x00017928
    7f24:	000177fb 	.word	0x000177fb
    7f28:	00017904 	.word	0x00017904

00007f2c <recv_thread>:
{
    7f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_DBG("blocking");
    7f30:	4e3f      	ldr	r6, [pc, #252]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
    7f32:	4f40      	ldr	r7, [pc, #256]	; (8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>)
    7f34:	f8df 8114 	ldr.w	r8, [pc, #276]	; 804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
{
    7f38:	b089      	sub	sp, #36	; 0x24
		BT_DBG("blocking");
    7f3a:	6835      	ldr	r5, [r6, #0]
    7f3c:	4c3e      	ldr	r4, [pc, #248]	; (8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>)
    7f3e:	f00c ff3b 	bl	14db8 <_impl_k_current_get>
    7f42:	463b      	mov	r3, r7
    7f44:	4622      	mov	r2, r4
    7f46:	9001      	str	r0, [sp, #4]
    7f48:	4641      	mov	r1, r8
    7f4a:	483c      	ldr	r0, [pc, #240]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
    7f4c:	9402      	str	r4, [sp, #8]
    7f4e:	9400      	str	r4, [sp, #0]
    7f50:	47a8      	blx	r5
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    7f52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7f56:	483a      	ldr	r0, [pc, #232]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
    7f58:	f00c fc9e 	bl	14898 <_impl_k_queue_get>
		BT_DBG("unblocked");
    7f5c:	6835      	ldr	r5, [r6, #0]
    7f5e:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    7f60:	f00c ff2a 	bl	14db8 <_impl_k_current_get>
    7f64:	9402      	str	r4, [sp, #8]
    7f66:	9001      	str	r0, [sp, #4]
    7f68:	9400      	str	r4, [sp, #0]
    7f6a:	463b      	mov	r3, r7
    7f6c:	4622      	mov	r2, r4
    7f6e:	4641      	mov	r1, r8
    7f70:	4834      	ldr	r0, [pc, #208]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    7f72:	47a8      	blx	r5
    7f74:	4625      	mov	r5, r4
		if (node_rx && !buf) {
    7f76:	f1b9 0f00 	cmp.w	r9, #0
    7f7a:	d048      	beq.n	800e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe>
	s8_t class = hci_get_class(node_rx);
    7f7c:	4648      	mov	r0, r9
    7f7e:	f001 fd73 	bl	9a68 <hci_get_class>
	switch (class) {
    7f82:	1e03      	subs	r3, r0, #0
    7f84:	f8cd 901c 	str.w	r9, [sp, #28]
    7f88:	db03      	blt.n	7f92 <recv_thread+0x66>
    7f8a:	2b02      	cmp	r3, #2
    7f8c:	dd0f      	ble.n	7fae <recv_thread+0x82>
    7f8e:	2b03      	cmp	r3, #3
    7f90:	d040      	beq.n	8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>
		LL_ASSERT(0);
    7f92:	9501      	str	r5, [sp, #4]
    7f94:	9500      	str	r5, [sp, #0]
    7f96:	6834      	ldr	r4, [r6, #0]
    7f98:	4b2b      	ldr	r3, [pc, #172]	; (8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>)
    7f9a:	4a27      	ldr	r2, [pc, #156]	; (8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>)
    7f9c:	492b      	ldr	r1, [pc, #172]	; (804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>)
    7f9e:	482c      	ldr	r0, [pc, #176]	; (8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>)
    7fa0:	47a0      	blx	r4
    7fa2:	4040      	eors	r0, r0
    7fa4:	f380 8811 	msr	BASEPRI, r0
    7fa8:	f04f 0004 	mov.w	r0, #4
    7fac:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    7fae:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    7fb0:	bf0e      	itee	eq
    7fb2:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7fb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    7fb8:	2001      	movne	r0, #1
    7fba:	f7fb fdc3 	bl	3b44 <bt_buf_get_rx>
    7fbe:	4604      	mov	r4, r0
		if (buf) {
    7fc0:	b118      	cbz	r0, 7fca <recv_thread+0x9e>
			hci_evt_encode(node_rx, buf);
    7fc2:	4601      	mov	r1, r0
    7fc4:	9807      	ldr	r0, [sp, #28]
    7fc6:	f001 f99b 	bl	9300 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    7fca:	9b07      	ldr	r3, [sp, #28]
    7fcc:	2100      	movs	r1, #0
    7fce:	88d8      	ldrh	r0, [r3, #6]
    7fd0:	f008 ff70 	bl	10eb4 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    7fd4:	a808      	add	r0, sp, #32
    7fd6:	2200      	movs	r2, #0
    7fd8:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    7fdc:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    7fde:	f008 fef3 	bl	10dc8 <ll_rx_mem_release>
		if (buf) {
    7fe2:	b1a4      	cbz	r4, 800e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe>
			if (buf->len) {
    7fe4:	89a3      	ldrh	r3, [r4, #12]
    7fe6:	b1fb      	cbz	r3, 8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
				BT_DBG("Packet in: type:%u len:%u",
    7fe8:	f8d6 9000 	ldr.w	r9, [r6]
    7fec:	f00c fee4 	bl	14db8 <_impl_k_current_get>
    7ff0:	9504      	str	r5, [sp, #16]
    7ff2:	89a3      	ldrh	r3, [r4, #12]
    7ff4:	9303      	str	r3, [sp, #12]
    7ff6:	7d23      	ldrb	r3, [r4, #20]
    7ff8:	9302      	str	r3, [sp, #8]
    7ffa:	9001      	str	r0, [sp, #4]
    7ffc:	9500      	str	r5, [sp, #0]
    7ffe:	4815      	ldr	r0, [pc, #84]	; (8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>)
    8000:	4a0d      	ldr	r2, [pc, #52]	; (8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>)
    8002:	463b      	mov	r3, r7
    8004:	4641      	mov	r1, r8
    8006:	47c8      	blx	r9
				bt_recv(buf);
    8008:	4620      	mov	r0, r4
    800a:	f7fb f833 	bl	3074 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    800e:	f00c fea9 	bl	14d64 <_impl_k_yield>
    8012:	e792      	b.n	7f3a <recv_thread+0xe>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    8014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8018:	f7fb fd94 	bl	3b44 <bt_buf_get_rx>
    801c:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    801e:	4601      	mov	r1, r0
    8020:	9807      	ldr	r0, [sp, #28]
    8022:	f001 f92d 	bl	9280 <hci_acl_encode>
    8026:	e7d0      	b.n	7fca <recv_thread+0x9e>
				net_buf_unref(buf);
    8028:	4620      	mov	r0, r4
    802a:	f00b fe01 	bl	13c30 <net_buf_unref>
    802e:	e7ee      	b.n	800e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe>
    8030:	20003ad4 	.word	0x20003ad4
    8034:	000177ef 	.word	0x000177ef
    8038:	000159e9 	.word	0x000159e9
    803c:	000179d8 	.word	0x000179d8
    8040:	20004004 	.word	0x20004004
    8044:	000179f6 	.word	0x000179f6
    8048:	000177e3 	.word	0x000177e3
    804c:	00016791 	.word	0x00016791
    8050:	000166ef 	.word	0x000166ef
    8054:	00017a15 	.word	0x00017a15

00008058 <prio_recv_thread>:
{
    8058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    805c:	4e2e      	ldr	r6, [pc, #184]	; (8118 <prio_recv_thread+0xc0>)
    805e:	4c2f      	ldr	r4, [pc, #188]	; (811c <prio_recv_thread+0xc4>)
			BT_DBG("Num Complete: 0x%04x:%u", handle, num_cmplt);
    8060:	4d2f      	ldr	r5, [pc, #188]	; (8120 <prio_recv_thread+0xc8>)
{
    8062:	b089      	sub	sp, #36	; 0x24
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    8064:	f10d 011a 	add.w	r1, sp, #26
    8068:	a807      	add	r0, sp, #28
    806a:	f008 fe75 	bl	10d58 <ll_rx_get>
    806e:	4607      	mov	r7, r0
    8070:	b9a0      	cbnz	r0, 809c <prio_recv_thread+0x44>
		if (node_rx) {
    8072:	9b07      	ldr	r3, [sp, #28]
    8074:	2b00      	cmp	r3, #0
    8076:	d032      	beq.n	80de <prio_recv_thread+0x86>
			ll_rx_dequeue();
    8078:	f009 fb48 	bl	1170c <ll_rx_dequeue>
			BT_DBG("RX node enqueue");
    807c:	6837      	ldr	r7, [r6, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    807e:	f00c fe9b 	bl	14db8 <_impl_k_current_get>
    8082:	9402      	str	r4, [sp, #8]
    8084:	9001      	str	r0, [sp, #4]
    8086:	9400      	str	r4, [sp, #0]
    8088:	462b      	mov	r3, r5
    808a:	4622      	mov	r2, r4
    808c:	4925      	ldr	r1, [pc, #148]	; (8124 <prio_recv_thread+0xcc>)
    808e:	4826      	ldr	r0, [pc, #152]	; (8128 <prio_recv_thread+0xd0>)
    8090:	47b8      	blx	r7
			k_fifo_put(&recv_fifo, node_rx);
    8092:	9907      	ldr	r1, [sp, #28]
    8094:	4825      	ldr	r0, [pc, #148]	; (812c <prio_recv_thread+0xd4>)
    8096:	f00c fbdb 	bl	14850 <k_queue_append>
    809a:	e7e3      	b.n	8064 <prio_recv_thread+0xc>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    809c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    80a0:	2001      	movs	r0, #1
    80a2:	f7fb fd4f 	bl	3b44 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    80a6:	463a      	mov	r2, r7
    80a8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    80ac:	4680      	mov	r8, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    80ae:	f001 fcc7 	bl	9a40 <hci_num_cmplt_encode>
			BT_DBG("Num Complete: 0x%04x:%u", handle, num_cmplt);
    80b2:	f8d6 9000 	ldr.w	r9, [r6]
    80b6:	f00c fe7f 	bl	14db8 <_impl_k_current_get>
    80ba:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    80be:	9302      	str	r3, [sp, #8]
    80c0:	9001      	str	r0, [sp, #4]
    80c2:	462b      	mov	r3, r5
    80c4:	4622      	mov	r2, r4
    80c6:	4917      	ldr	r1, [pc, #92]	; (8124 <prio_recv_thread+0xcc>)
    80c8:	9404      	str	r4, [sp, #16]
    80ca:	9703      	str	r7, [sp, #12]
    80cc:	9400      	str	r4, [sp, #0]
    80ce:	4818      	ldr	r0, [pc, #96]	; (8130 <prio_recv_thread+0xd8>)
    80d0:	47c8      	blx	r9
			bt_recv_prio(buf);
    80d2:	4640      	mov	r0, r8
    80d4:	f7fb fb58 	bl	3788 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    80d8:	f00c fe44 	bl	14d64 <_impl_k_yield>
    80dc:	e7c2      	b.n	8064 <prio_recv_thread+0xc>
		BT_DBG("sem take...");
    80de:	6837      	ldr	r7, [r6, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    80e0:	f00c fe6a 	bl	14db8 <_impl_k_current_get>
    80e4:	462b      	mov	r3, r5
    80e6:	4622      	mov	r2, r4
    80e8:	9001      	str	r0, [sp, #4]
    80ea:	9402      	str	r4, [sp, #8]
    80ec:	9400      	str	r4, [sp, #0]
    80ee:	490d      	ldr	r1, [pc, #52]	; (8124 <prio_recv_thread+0xcc>)
    80f0:	4810      	ldr	r0, [pc, #64]	; (8134 <prio_recv_thread+0xdc>)
    80f2:	47b8      	blx	r7
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    80f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    80f8:	480f      	ldr	r0, [pc, #60]	; (8138 <prio_recv_thread+0xe0>)
    80fa:	f00c febf 	bl	14e7c <_impl_k_sem_take>
		BT_DBG("sem taken");
    80fe:	6837      	ldr	r7, [r6, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    8100:	f00c fe5a 	bl	14db8 <_impl_k_current_get>
    8104:	9402      	str	r4, [sp, #8]
    8106:	9001      	str	r0, [sp, #4]
    8108:	9400      	str	r4, [sp, #0]
    810a:	462b      	mov	r3, r5
    810c:	4622      	mov	r2, r4
    810e:	4905      	ldr	r1, [pc, #20]	; (8124 <prio_recv_thread+0xcc>)
    8110:	480a      	ldr	r0, [pc, #40]	; (813c <prio_recv_thread+0xe4>)
    8112:	47b8      	blx	r7
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    8114:	e7a6      	b.n	8064 <prio_recv_thread+0xc>
    8116:	bf00      	nop
    8118:	20003ad4 	.word	0x20003ad4
    811c:	000159e9 	.word	0x000159e9
    8120:	000177d2 	.word	0x000177d2
    8124:	00016791 	.word	0x00016791
    8128:	00017973 	.word	0x00017973
    812c:	20004004 	.word	0x20004004
    8130:	00017946 	.word	0x00017946
    8134:	00017998 	.word	0x00017998
    8138:	20003fe8 	.word	0x20003fe8
    813c:	000179b9 	.word	0x000179b9

00008140 <hci_driver_open>:
{
    8140:	b570      	push	{r4, r5, r6, lr}
	err = ll_init(&sem_prio_recv);
    8142:	481f      	ldr	r0, [pc, #124]	; (81c0 <hci_driver_open+0x80>)
    8144:	4d1f      	ldr	r5, [pc, #124]	; (81c4 <hci_driver_open+0x84>)
    8146:	4e20      	ldr	r6, [pc, #128]	; (81c8 <hci_driver_open+0x88>)
{
    8148:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    814a:	f009 fbc1 	bl	118d0 <ll_init>
	if (err) {
    814e:	4604      	mov	r4, r0
    8150:	b158      	cbz	r0, 816a <hci_driver_open+0x2a>
		BT_ERR("LL initialization failed: %u", err);
    8152:	9001      	str	r0, [sp, #4]
    8154:	9502      	str	r5, [sp, #8]
    8156:	9500      	str	r5, [sp, #0]
    8158:	6836      	ldr	r6, [r6, #0]
    815a:	4b1c      	ldr	r3, [pc, #112]	; (81cc <hci_driver_open+0x8c>)
    815c:	491c      	ldr	r1, [pc, #112]	; (81d0 <hci_driver_open+0x90>)
    815e:	481d      	ldr	r0, [pc, #116]	; (81d4 <hci_driver_open+0x94>)
    8160:	462a      	mov	r2, r5
	BT_DBG("Success.");
    8162:	47b0      	blx	r6
}
    8164:	4620      	mov	r0, r4
    8166:	b006      	add	sp, #24
    8168:	bd70      	pop	{r4, r5, r6, pc}
	hci_init(NULL);
    816a:	f001 fc95 	bl	9a98 <hci_init>

    816e:	f06f 0309 	mvn.w	r3, #9
    8172:	9303      	str	r3, [sp, #12]
    8174:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    8178:	4b17      	ldr	r3, [pc, #92]	; (81d8 <hci_driver_open+0x98>)
    817a:	4918      	ldr	r1, [pc, #96]	; (81dc <hci_driver_open+0x9c>)
    817c:	9405      	str	r4, [sp, #20]
    817e:	9404      	str	r4, [sp, #16]
    8180:	9402      	str	r4, [sp, #8]
    8182:	9401      	str	r4, [sp, #4]
    8184:	9400      	str	r4, [sp, #0]
    8186:	4816      	ldr	r0, [pc, #88]	; (81e0 <hci_driver_open+0xa0>)
    8188:	f00d f862 	bl	15250 <_impl_k_thread_create>
    818c:	f06f 0307 	mvn.w	r3, #7
    8190:	f240 522c 	movw	r2, #1324	; 0x52c
    8194:	4913      	ldr	r1, [pc, #76]	; (81e4 <hci_driver_open+0xa4>)
    8196:	9303      	str	r3, [sp, #12]
    8198:	9405      	str	r4, [sp, #20]
    819a:	4b13      	ldr	r3, [pc, #76]	; (81e8 <hci_driver_open+0xa8>)
    819c:	9404      	str	r4, [sp, #16]
    819e:	9402      	str	r4, [sp, #8]
    81a0:	9401      	str	r4, [sp, #4]
    81a2:	9400      	str	r4, [sp, #0]
    81a4:	4811      	ldr	r0, [pc, #68]	; (81ec <hci_driver_open+0xac>)
    81a6:	f00d f853 	bl	15250 <_impl_k_thread_create>
	BT_DBG("Success.");
    81aa:	6836      	ldr	r6, [r6, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    81ac:	f00c fe04 	bl	14db8 <_impl_k_current_get>
    81b0:	9502      	str	r5, [sp, #8]
    81b2:	9001      	str	r0, [sp, #4]
    81b4:	9500      	str	r5, [sp, #0]
    81b6:	4b05      	ldr	r3, [pc, #20]	; (81cc <hci_driver_open+0x8c>)
    81b8:	4905      	ldr	r1, [pc, #20]	; (81d0 <hci_driver_open+0x90>)
    81ba:	480d      	ldr	r0, [pc, #52]	; (81f0 <hci_driver_open+0xb0>)
    81bc:	462a      	mov	r2, r5
    81be:	e7d0      	b.n	8162 <hci_driver_open+0x22>
    81c0:	20003fe8 	.word	0x20003fe8
    81c4:	000159e9 	.word	0x000159e9
    81c8:	20003ad4 	.word	0x20003ad4
    81cc:	00017821 	.word	0x00017821
    81d0:	00016791 	.word	0x00016791
    81d4:	00017848 	.word	0x00017848
    81d8:	00008059 	.word	0x00008059
    81dc:	20002138 	.word	0x20002138
    81e0:	20001908 	.word	0x20001908
    81e4:	20002428 	.word	0x20002428
    81e8:	00007f2d 	.word	0x00007f2d
    81ec:	20001898 	.word	0x20001898
    81f0:	00017875 	.word	0x00017875

000081f4 <sys_put_le32>:
	dst[1] = val >> 8;
    81f4:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    81f8:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    81fa:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    81fc:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    81fe:	0a00      	lsrs	r0, r0, #8
    8200:	704b      	strb	r3, [r1, #1]
    8202:	70c8      	strb	r0, [r1, #3]
    8204:	4770      	bx	lr

00008206 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    8206:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    8208:	3008      	adds	r0, #8
{
    820a:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    820c:	2102      	movs	r1, #2
{
    820e:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    8210:	f00b fd46 	bl	13ca0 <net_buf_simple_add>
	hdr->evt = evt;
    8214:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    8216:	7044      	strb	r4, [r0, #1]
    8218:	bd38      	pop	{r3, r4, r5, pc}
	...

0000821c <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    821c:	b538      	push	{r3, r4, r5, lr}
    821e:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    8220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8224:	f7fb fc9e 	bl	3b64 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    8228:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    822a:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    822c:	210f      	movs	r1, #15
    822e:	f7ff ffea 	bl	8206 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    8232:	2104      	movs	r1, #4
    8234:	f104 0008 	add.w	r0, r4, #8
    8238:	f00b fd32 	bl	13ca0 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    823c:	2301      	movs	r3, #1
    823e:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8240:	4b02      	ldr	r3, [pc, #8]	; (824c <cmd_status+0x30>)
	cs->status = status;
    8242:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8244:	881b      	ldrh	r3, [r3, #0]
    8246:	8043      	strh	r3, [r0, #2]

	return buf;
}
    8248:	4620      	mov	r0, r4
    824a:	bd38      	pop	{r3, r4, r5, pc}
    824c:	20000858 	.word	0x20000858

00008250 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    8250:	b570      	push	{r4, r5, r6, lr}
    8252:	4604      	mov	r4, r0
    8254:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    8256:	3201      	adds	r2, #1
{
    8258:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    825a:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    825c:	b2d2      	uxtb	r2, r2
    825e:	213e      	movs	r1, #62	; 0x3e
    8260:	f7ff ffd1 	bl	8206 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    8264:	2101      	movs	r1, #1
    8266:	4620      	mov	r0, r4
    8268:	f00b fd1a 	bl	13ca0 <net_buf_simple_add>
	me->subevent = subevt;
    826c:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    826e:	4629      	mov	r1, r5
    8270:	4620      	mov	r0, r4
}
    8272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    8276:	f00b bd13 	b.w	13ca0 <net_buf_simple_add>
	...

0000827c <cmd_complete>:
{
    827c:	b538      	push	{r3, r4, r5, lr}
    827e:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    8284:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8286:	f7fb fc6d 	bl	3b64 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    828a:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    828c:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    828e:	b2d2      	uxtb	r2, r2
    8290:	210e      	movs	r1, #14
    8292:	f7ff ffb8 	bl	8206 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    8296:	6820      	ldr	r0, [r4, #0]
    8298:	2103      	movs	r1, #3
    829a:	3008      	adds	r0, #8
    829c:	f00b fd00 	bl	13ca0 <net_buf_simple_add>
	cc->ncmd = 1;
    82a0:	2301      	movs	r3, #1
    82a2:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    82a4:	4b05      	ldr	r3, [pc, #20]	; (82bc <cmd_complete+0x40>)
    82a6:	881b      	ldrh	r3, [r3, #0]
    82a8:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    82ac:	6820      	ldr	r0, [r4, #0]
    82ae:	4629      	mov	r1, r5
    82b0:	3008      	adds	r0, #8
}
    82b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    82b6:	f00b bcf3 	b.w	13ca0 <net_buf_simple_add>
    82ba:	bf00      	nop
    82bc:	20000858 	.word	0x20000858

000082c0 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    82c0:	4b0e      	ldr	r3, [pc, #56]	; (82fc <encrypt_change+0x3c>)
{
    82c2:	b570      	push	{r4, r5, r6, lr}
    82c4:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    82c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    82ca:	2300      	movs	r3, #0
    82cc:	f002 0280 	and.w	r2, r2, #128	; 0x80
    82d0:	4313      	orrs	r3, r2
{
    82d2:	4604      	mov	r4, r0
    82d4:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    82d6:	d010      	beq.n	82fa <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    82d8:	2204      	movs	r2, #4
    82da:	2108      	movs	r1, #8
    82dc:	4628      	mov	r0, r5
    82de:	f7ff ff92 	bl	8206 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    82e2:	2104      	movs	r1, #4
    82e4:	f105 0008 	add.w	r0, r5, #8
    82e8:	f00b fcda 	bl	13ca0 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    82ec:	fab4 f384 	clz	r3, r4
    82f0:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    82f2:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    82f4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    82f8:	70c3      	strb	r3, [r0, #3]
    82fa:	bd70      	pop	{r4, r5, r6, pc}
    82fc:	20003da8 	.word	0x20003da8

00008300 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    8300:	b570      	push	{r4, r5, r6, lr}
    8302:	4604      	mov	r4, r0
    8304:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8306:	4b13      	ldr	r3, [pc, #76]	; (8354 <le_remote_feat_complete+0x54>)
{
    8308:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    830a:	e9d3 2300 	ldrd	r2, r3, [r3]
    830e:	2200      	movs	r2, #0
    8310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8314:	4313      	orrs	r3, r2
{
    8316:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8318:	d01b      	beq.n	8352 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    831a:	4b0f      	ldr	r3, [pc, #60]	; (8358 <le_remote_feat_complete+0x58>)
    831c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8320:	2300      	movs	r3, #0
    8322:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8326:	4313      	orrs	r3, r2
    8328:	d013      	beq.n	8352 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    832a:	220b      	movs	r2, #11
    832c:	2104      	movs	r1, #4
    832e:	f7ff ff8f 	bl	8250 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    8332:	2208      	movs	r2, #8
	sep->status = status;
    8334:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    8336:	f8a0 6001 	strh.w	r6, [r0, #1]
    833a:	3003      	adds	r0, #3
	if (!status) {
    833c:	b924      	cbnz	r4, 8348 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    833e:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    8340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    8344:	f7f9 bc6c 	b.w	1c20 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    8348:	2100      	movs	r1, #0
}
    834a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    834e:	f7f9 bc93 	b.w	1c78 <memset>
    8352:	bd70      	pop	{r4, r5, r6, pc}
    8354:	20003da8 	.word	0x20003da8
    8358:	20003db0 	.word	0x20003db0

0000835c <le_conn_complete.part.44>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    835c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8360:	4605      	mov	r5, r0
    8362:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8364:	4b46      	ldr	r3, [pc, #280]	; (8480 <le_conn_complete.part.44+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8366:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8368:	e9d3 2300 	ldrd	r2, r3, [r3]
    836c:	f240 2801 	movw	r8, #513	; 0x201
    8370:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    8374:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8378:	ea03 0309 	and.w	r3, r3, r9
    837c:	ea02 0208 	and.w	r2, r2, r8
    8380:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8382:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    8384:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8388:	d077      	beq.n	847a <le_conn_complete.part.44+0x11e>
	if (!status) {
    838a:	2d00      	cmp	r5, #0
    838c:	d150      	bne.n	8430 <le_conn_complete.part.44+0xd4>
		conn_count++;
    838e:	4a3d      	ldr	r2, [pc, #244]	; (8484 <le_conn_complete.part.44+0x128>)
    8390:	6813      	ldr	r3, [r2, #0]
    8392:	3301      	adds	r3, #1
    8394:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    8396:	ea5a 030b 	orrs.w	r3, sl, fp
    839a:	f101 0803 	add.w	r8, r1, #3
    839e:	d151      	bne.n	8444 <le_conn_complete.part.44+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    83a0:	2212      	movs	r2, #18
    83a2:	2101      	movs	r1, #1
    83a4:	f7ff ff54 	bl	8250 <meta_evt>
	lecc->status = 0x00;
    83a8:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    83aa:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    83ae:	7863      	ldrb	r3, [r4, #1]
    83b0:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    83b2:	78a3      	ldrb	r3, [r4, #2]
    83b4:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    83b6:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    83b8:	2206      	movs	r2, #6
    83ba:	4641      	mov	r1, r8
    83bc:	3005      	adds	r0, #5
    83be:	f7f9 fc2f 	bl	1c20 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    83c2:	8ae3      	ldrh	r3, [r4, #22]
    83c4:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    83c8:	8b23      	ldrh	r3, [r4, #24]
    83ca:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    83ce:	8b63      	ldrh	r3, [r4, #26]
    83d0:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    83d4:	7f23      	ldrb	r3, [r4, #28]
    83d6:	747b      	strb	r3, [r7, #17]
    83d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    83dc:	221e      	movs	r2, #30
    83de:	210a      	movs	r1, #10
    83e0:	f7ff ff36 	bl	8250 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    83e4:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    83e6:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    83e8:	2100      	movs	r1, #0
    83ea:	f7f9 fc45 	bl	1c78 <memset>
		lecc->status = status;
    83ee:	7025      	strb	r5, [r4, #0]
    83f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    83f4:	7d63      	ldrb	r3, [r4, #21]
    83f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    83fa:	2b40      	cmp	r3, #64	; 0x40
    83fc:	d138      	bne.n	8470 <le_conn_complete.part.44+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    83fe:	2206      	movs	r2, #6
    8400:	f104 0110 	add.w	r1, r4, #16
    8404:	f7f9 fc0c 	bl	1c20 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    8408:	2206      	movs	r2, #6
    840a:	f104 0109 	add.w	r1, r4, #9
    840e:	f107 0011 	add.w	r0, r7, #17
    8412:	f7f9 fc05 	bl	1c20 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    8416:	8ae3      	ldrh	r3, [r4, #22]
    8418:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    841c:	8b23      	ldrh	r3, [r4, #24]
    841e:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    8422:	8b63      	ldrh	r3, [r4, #26]
    8424:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    8428:	7f23      	ldrb	r3, [r4, #28]
    842a:	777b      	strb	r3, [r7, #29]
    842c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    8430:	ea5a 030b 	orrs.w	r3, sl, fp
    8434:	d1d2      	bne.n	83dc <le_conn_complete.part.44+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8436:	2212      	movs	r2, #18
    8438:	2101      	movs	r1, #1
    843a:	f7ff ff09 	bl	8250 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    843e:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8440:	4604      	mov	r4, r0
    8442:	e7d1      	b.n	83e8 <le_conn_complete.part.44+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8444:	221e      	movs	r2, #30
    8446:	210a      	movs	r1, #10
    8448:	f7ff ff02 	bl	8250 <meta_evt>
		leecc->status = 0x00;
    844c:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    844e:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    8452:	7863      	ldrb	r3, [r4, #1]
    8454:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    8456:	78a3      	ldrb	r3, [r4, #2]
    8458:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    845a:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    845c:	2206      	movs	r2, #6
    845e:	4641      	mov	r1, r8
    8460:	3005      	adds	r0, #5
    8462:	f7f9 fbdd 	bl	1c20 <memcpy>
		if ((radio_cc->own_addr_type) &&
    8466:	7be3      	ldrb	r3, [r4, #15]
    8468:	f107 000b 	add.w	r0, r7, #11
    846c:	2b00      	cmp	r3, #0
    846e:	d1c1      	bne.n	83f4 <le_conn_complete.part.44+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    8470:	2206      	movs	r2, #6
    8472:	2100      	movs	r1, #0
    8474:	f7f9 fc00 	bl	1c78 <memset>
    8478:	e7c6      	b.n	8408 <le_conn_complete.part.44+0xac>
    847a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    847e:	bf00      	nop
    8480:	20003db0 	.word	0x20003db0
    8484:	2000085c 	.word	0x2000085c

00008488 <bt_addr_le_to_str.constprop.76>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8488:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    848a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    848c:	b08a      	sub	sp, #40	; 0x28
    848e:	4604      	mov	r4, r0
    8490:	460e      	mov	r6, r1
    8492:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    8494:	2b03      	cmp	r3, #3
    8496:	d820      	bhi.n	84da <bt_addr_le_to_str.constprop.76+0x52>
    8498:	e8df f003 	tbb	[pc, r3]
    849c:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    84a0:	4911      	ldr	r1, [pc, #68]	; (84e8 <bt_addr_le_to_str.constprop.76+0x60>)
		strcpy(type, "random");
    84a2:	4628      	mov	r0, r5
    84a4:	f7f9 fb88 	bl	1bb8 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    84a8:	7862      	ldrb	r2, [r4, #1]
    84aa:	9204      	str	r2, [sp, #16]
    84ac:	78a2      	ldrb	r2, [r4, #2]
    84ae:	9203      	str	r2, [sp, #12]
    84b0:	78e2      	ldrb	r2, [r4, #3]
    84b2:	9202      	str	r2, [sp, #8]
    84b4:	7922      	ldrb	r2, [r4, #4]
    84b6:	9201      	str	r2, [sp, #4]
    84b8:	7962      	ldrb	r2, [r4, #5]
    84ba:	9200      	str	r2, [sp, #0]
    84bc:	79a3      	ldrb	r3, [r4, #6]
    84be:	9505      	str	r5, [sp, #20]
    84c0:	4a0a      	ldr	r2, [pc, #40]	; (84ec <bt_addr_le_to_str.constprop.76+0x64>)
    84c2:	211b      	movs	r1, #27
    84c4:	4630      	mov	r0, r6
    84c6:	f7f8 fd6f 	bl	fa8 <snprintk>
}
    84ca:	b00a      	add	sp, #40	; 0x28
    84cc:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    84ce:	4908      	ldr	r1, [pc, #32]	; (84f0 <bt_addr_le_to_str.constprop.76+0x68>)
    84d0:	e7e7      	b.n	84a2 <bt_addr_le_to_str.constprop.76+0x1a>
		strcpy(type, "public id");
    84d2:	4908      	ldr	r1, [pc, #32]	; (84f4 <bt_addr_le_to_str.constprop.76+0x6c>)
    84d4:	e7e5      	b.n	84a2 <bt_addr_le_to_str.constprop.76+0x1a>
		strcpy(type, "random id");
    84d6:	4908      	ldr	r1, [pc, #32]	; (84f8 <bt_addr_le_to_str.constprop.76+0x70>)
    84d8:	e7e3      	b.n	84a2 <bt_addr_le_to_str.constprop.76+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    84da:	4a08      	ldr	r2, [pc, #32]	; (84fc <bt_addr_le_to_str.constprop.76+0x74>)
    84dc:	210a      	movs	r1, #10
    84de:	4628      	mov	r0, r5
    84e0:	f7f8 fd62 	bl	fa8 <snprintk>
    84e4:	e7e0      	b.n	84a8 <bt_addr_le_to_str.constprop.76+0x20>
    84e6:	bf00      	nop
    84e8:	00015955 	.word	0x00015955
    84ec:	0001597e 	.word	0x0001597e
    84f0:	0001595c 	.word	0x0001595c
    84f4:	00015963 	.word	0x00015963
    84f8:	0001596d 	.word	0x0001596d
    84fc:	00015977 	.word	0x00015977

00008500 <le_adv_ext_report.isra.71>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8504:	4605      	mov	r5, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    8506:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8508:	4c33      	ldr	r4, [pc, #204]	; (85d8 <le_adv_ext_report.isra.71+0xd8>)
    850a:	4e34      	ldr	r6, [pc, #208]	; (85dc <le_adv_ext_report.isra.71+0xdc>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    850c:	b093      	sub	sp, #76	; 0x4c
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    850e:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8510:	9407      	str	r4, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8512:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8514:	6837      	ldr	r7, [r6, #0]
    8516:	9003      	str	r0, [sp, #12]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8518:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    851a:	b25b      	sxtb	r3, r3
    851c:	9306      	str	r3, [sp, #24]
    851e:	782b      	ldrb	r3, [r5, #0]
    8520:	9201      	str	r2, [sp, #4]
    8522:	09d9      	lsrs	r1, r3, #7
    8524:	9105      	str	r1, [sp, #20]
    8526:	f3c3 1180 	ubfx	r1, r3, #6, #1
    852a:	f003 030f 	and.w	r3, r3, #15
    852e:	9104      	str	r1, [sp, #16]
    8530:	9302      	str	r3, [sp, #8]
    8532:	9400      	str	r4, [sp, #0]
    8534:	4b2a      	ldr	r3, [pc, #168]	; (85e0 <le_adv_ext_report.isra.71+0xe0>)
    8536:	492b      	ldr	r1, [pc, #172]	; (85e4 <le_adv_ext_report.isra.71+0xe4>)
    8538:	482b      	ldr	r0, [pc, #172]	; (85e8 <le_adv_ext_report.isra.71+0xe8>)
    853a:	4622      	mov	r2, r4
    853c:	47b8      	blx	r7
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    853e:	782b      	ldrb	r3, [r5, #0]
    8540:	f003 030f 	and.w	r3, r3, #15
    8544:	2b07      	cmp	r3, #7
    8546:	d143      	bne.n	85d0 <le_adv_ext_report.isra.71+0xd0>
    8548:	786b      	ldrb	r3, [r5, #1]
    854a:	2b00      	cmp	r3, #0
    854c:	d040      	beq.n	85d0 <le_adv_ext_report.isra.71+0xd0>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    854e:	78ab      	ldrb	r3, [r5, #2]
    8550:	4924      	ldr	r1, [pc, #144]	; (85e4 <le_adv_ext_report.isra.71+0xe4>)
    8552:	9403      	str	r4, [sp, #12]
    8554:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    8558:	099b      	lsrs	r3, r3, #6
    855a:	9202      	str	r2, [sp, #8]
    855c:	9301      	str	r3, [sp, #4]
    855e:	9400      	str	r4, [sp, #0]
    8560:	4b1f      	ldr	r3, [pc, #124]	; (85e0 <le_adv_ext_report.isra.71+0xe0>)
    8562:	6837      	ldr	r7, [r6, #0]
    8564:	4821      	ldr	r0, [pc, #132]	; (85ec <le_adv_ext_report.isra.71+0xec>)
    8566:	4622      	mov	r2, r4
    8568:	47b8      	blx	r7
		if (!p->ext_hdr_len) {
    856a:	78ab      	ldrb	r3, [r5, #2]
    856c:	0699      	lsls	r1, r3, #26
    856e:	d02f      	beq.n	85d0 <le_adv_ext_report.isra.71+0xd0>
		if (h->adv_addr) {
    8570:	78eb      	ldrb	r3, [r5, #3]
    8572:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    8574:	f105 0804 	add.w	r8, r5, #4
		if (h->adv_addr) {
    8578:	d51c      	bpl.n	85b4 <le_adv_ext_report.isra.71+0xb4>
			addr.type = adv->tx_addr;
    857a:	782b      	ldrb	r3, [r5, #0]
    857c:	af12      	add	r7, sp, #72	; 0x48
    857e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8582:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8586:	2206      	movs	r2, #6
    8588:	4641      	mov	r1, r8
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    858a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    858e:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    8592:	f7f9 fb45 	bl	1c20 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8596:	4649      	mov	r1, r9
    8598:	4638      	mov	r0, r7
    859a:	f7ff ff75 	bl	8488 <bt_addr_le_to_str.constprop.76>
			BT_WARN("AdvA: %s", addr_str);
    859e:	9402      	str	r4, [sp, #8]
    85a0:	e88d 0210 	stmia.w	sp, {r4, r9}
    85a4:	6837      	ldr	r7, [r6, #0]
    85a6:	4b0e      	ldr	r3, [pc, #56]	; (85e0 <le_adv_ext_report.isra.71+0xe0>)
    85a8:	490e      	ldr	r1, [pc, #56]	; (85e4 <le_adv_ext_report.isra.71+0xe4>)
    85aa:	4811      	ldr	r0, [pc, #68]	; (85f0 <le_adv_ext_report.isra.71+0xf0>)
    85ac:	4622      	mov	r2, r4
			ptr += BDADDR_SIZE;
    85ae:	f105 080a 	add.w	r8, r5, #10
			BT_WARN("AdvA: %s", addr_str);
    85b2:	47b8      	blx	r7
		if (h->tx_pwr) {
    85b4:	78eb      	ldrb	r3, [r5, #3]
    85b6:	065b      	lsls	r3, r3, #25
    85b8:	d50a      	bpl.n	85d0 <le_adv_ext_report.isra.71+0xd0>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    85ba:	9402      	str	r4, [sp, #8]
    85bc:	f998 3000 	ldrsb.w	r3, [r8]
    85c0:	9301      	str	r3, [sp, #4]
    85c2:	9400      	str	r4, [sp, #0]
    85c4:	4b06      	ldr	r3, [pc, #24]	; (85e0 <le_adv_ext_report.isra.71+0xe0>)
    85c6:	6834      	ldr	r4, [r6, #0]
    85c8:	4a03      	ldr	r2, [pc, #12]	; (85d8 <le_adv_ext_report.isra.71+0xd8>)
    85ca:	4906      	ldr	r1, [pc, #24]	; (85e4 <le_adv_ext_report.isra.71+0xe4>)
    85cc:	4809      	ldr	r0, [pc, #36]	; (85f4 <le_adv_ext_report.isra.71+0xf4>)
    85ce:	47a0      	blx	r4
}
    85d0:	b013      	add	sp, #76	; 0x4c
    85d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    85d6:	bf00      	nop
    85d8:	000159e9 	.word	0x000159e9
    85dc:	20003ad4 	.word	0x20003ad4
    85e0:	00017aa2 	.word	0x00017aa2
    85e4:	00016791 	.word	0x00016791
    85e8:	00017d27 	.word	0x00017d27
    85ec:	00017d74 	.word	0x00017d74
    85f0:	00017da5 	.word	0x00017da5
    85f4:	00017dbe 	.word	0x00017dbe

000085f8 <sys_get_le64>:
{
    85f8:	4603      	mov	r3, r0
}
    85fa:	6800      	ldr	r0, [r0, #0]
    85fc:	6859      	ldr	r1, [r3, #4]
    85fe:	4770      	bx	lr

00008600 <hci_cmd_handle>:
{
    8600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (cmd->len < sizeof(*chdr)) {
    8604:	8981      	ldrh	r1, [r0, #12]
{
    8606:	b098      	sub	sp, #96	; 0x60
	struct net_buf *evt = NULL;
    8608:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    860a:	2902      	cmp	r1, #2
{
    860c:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    860e:	950d      	str	r5, [sp, #52]	; 0x34
	if (cmd->len < sizeof(*chdr)) {
    8610:	d80c      	bhi.n	862c <hci_cmd_handle+0x2c>
		BT_ERR("No HCI Command header");
    8612:	4abe      	ldr	r2, [pc, #760]	; (890c <hci_cmd_handle+0x30c>)
    8614:	4bbe      	ldr	r3, [pc, #760]	; (8910 <hci_cmd_handle+0x310>)
    8616:	9201      	str	r2, [sp, #4]
    8618:	9200      	str	r2, [sp, #0]
    861a:	681c      	ldr	r4, [r3, #0]
    861c:	49bd      	ldr	r1, [pc, #756]	; (8914 <hci_cmd_handle+0x314>)
    861e:	4bbe      	ldr	r3, [pc, #760]	; (8918 <hci_cmd_handle+0x318>)
    8620:	48be      	ldr	r0, [pc, #760]	; (891c <hci_cmd_handle+0x31c>)
		BT_ERR("Invalid HCI CMD packet length");
    8622:	47a0      	blx	r4
		return NULL;
    8624:	4628      	mov	r0, r5
}
    8626:	b018      	add	sp, #96	; 0x60
    8628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	chdr = (void *)cmd->data;
    862c:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    862e:	4ebc      	ldr	r6, [pc, #752]	; (8920 <hci_cmd_handle+0x320>)
    8630:	781a      	ldrb	r2, [r3, #0]
    8632:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    8634:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8636:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    863a:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    863c:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    863e:	d908      	bls.n	8652 <hci_cmd_handle+0x52>
		BT_ERR("Invalid HCI CMD packet length");
    8640:	4ab2      	ldr	r2, [pc, #712]	; (890c <hci_cmd_handle+0x30c>)
    8642:	4bb3      	ldr	r3, [pc, #716]	; (8910 <hci_cmd_handle+0x310>)
    8644:	9201      	str	r2, [sp, #4]
    8646:	9200      	str	r2, [sp, #0]
    8648:	681c      	ldr	r4, [r3, #0]
    864a:	49b2      	ldr	r1, [pc, #712]	; (8914 <hci_cmd_handle+0x314>)
    864c:	4bb2      	ldr	r3, [pc, #712]	; (8918 <hci_cmd_handle+0x318>)
    864e:	48b5      	ldr	r0, [pc, #724]	; (8924 <hci_cmd_handle+0x324>)
    8650:	e7e7      	b.n	8622 <hci_cmd_handle+0x22>
	net_buf_pull(cmd, sizeof(*chdr));
    8652:	2103      	movs	r1, #3
    8654:	f104 0008 	add.w	r0, r4, #8
    8658:	f00b fb41 	bl	13cde <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    865c:	8833      	ldrh	r3, [r6, #0]
    865e:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    8662:	0a9b      	lsrs	r3, r3, #10
    8664:	2b04      	cmp	r3, #4
    8666:	f000 80bd 	beq.w	87e4 <hci_cmd_handle+0x1e4>
    866a:	d809      	bhi.n	8680 <hci_cmd_handle+0x80>
    866c:	2b01      	cmp	r3, #1
    866e:	d027      	beq.n	86c0 <hci_cmd_handle+0xc0>
    8670:	2b03      	cmp	r3, #3
    8672:	d03c      	beq.n	86ee <hci_cmd_handle+0xee>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    8674:	2101      	movs	r1, #1
    8676:	a80d      	add	r0, sp, #52	; 0x34
    8678:	f7ff fe00 	bl	827c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    867c:	2301      	movs	r3, #1
    867e:	e2c4      	b.n	8c0a <hci_cmd_handle+0x60a>
	switch (BT_OGF(_opcode)) {
    8680:	2b08      	cmp	r3, #8
    8682:	f000 8165 	beq.w	8950 <hci_cmd_handle+0x350>
    8686:	2b3f      	cmp	r3, #63	; 0x3f
    8688:	d1f4      	bne.n	8674 <hci_cmd_handle+0x74>
	switch (ocf) {
    868a:	3a01      	subs	r2, #1
    868c:	2a09      	cmp	r2, #9
    868e:	d8f1      	bhi.n	8674 <hci_cmd_handle+0x74>
    8690:	a301      	add	r3, pc, #4	; (adr r3, 8698 <hci_cmd_handle+0x98>)
    8692:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8696:	bf00      	nop
    8698:	00008f73 	.word	0x00008f73
    869c:	00008fa3 	.word	0x00008fa3
    86a0:	00008fcd 	.word	0x00008fcd
    86a4:	00008675 	.word	0x00008675
    86a8:	00008675 	.word	0x00008675
    86ac:	00009013 	.word	0x00009013
    86b0:	00008675 	.word	0x00008675
    86b4:	00008fe5 	.word	0x00008fe5
    86b8:	0000901f 	.word	0x0000901f
    86bc:	0000908d 	.word	0x0000908d
	switch (ocf) {
    86c0:	2a06      	cmp	r2, #6
    86c2:	d006      	beq.n	86d2 <hci_cmd_handle+0xd2>
    86c4:	2a1d      	cmp	r2, #29
    86c6:	d1d5      	bne.n	8674 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
    86c8:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    86ca:	8818      	ldrh	r0, [r3, #0]
    86cc:	f008 fa59 	bl	10b82 <ll_version_ind_send>
    86d0:	e004      	b.n	86dc <hci_cmd_handle+0xdc>
    86d2:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    86d4:	7899      	ldrb	r1, [r3, #2]
    86d6:	8818      	ldrh	r0, [r3, #0]
    86d8:	f008 fa67 	bl	10baa <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    86dc:	2800      	cmp	r0, #0
    86de:	bf14      	ite	ne
    86e0:	200c      	movne	r0, #12
    86e2:	2000      	moveq	r0, #0
    86e4:	f7ff fd9a 	bl	821c <cmd_status>
    86e8:	900d      	str	r0, [sp, #52]	; 0x34
	return evt;
    86ea:	980d      	ldr	r0, [sp, #52]	; 0x34
    86ec:	e79b      	b.n	8626 <hci_cmd_handle+0x26>
	switch (ocf) {
    86ee:	2a2d      	cmp	r2, #45	; 0x2d
    86f0:	d03a      	beq.n	8768 <hci_cmd_handle+0x168>
    86f2:	d820      	bhi.n	8736 <hci_cmd_handle+0x136>
    86f4:	2a01      	cmp	r2, #1
    86f6:	d02b      	beq.n	8750 <hci_cmd_handle+0x150>
    86f8:	2a03      	cmp	r2, #3
    86fa:	d1bb      	bne.n	8674 <hci_cmd_handle+0x74>
	dup_count = -1;
    86fc:	4b8a      	ldr	r3, [pc, #552]	; (8928 <hci_cmd_handle+0x328>)
    86fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8702:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    8704:	4b89      	ldr	r3, [pc, #548]	; (892c <hci_cmd_handle+0x32c>)
    8706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    870a:	f641 71ff 	movw	r1, #8191	; 0x1fff
    870e:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    8712:	4b87      	ldr	r3, [pc, #540]	; (8930 <hci_cmd_handle+0x330>)
    8714:	2000      	movs	r0, #0
    8716:	2100      	movs	r1, #0
    8718:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    871c:	4b85      	ldr	r3, [pc, #532]	; (8934 <hci_cmd_handle+0x334>)
    871e:	201f      	movs	r0, #31
    8720:	2100      	movs	r1, #0
    8722:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    8726:	f007 feed 	bl	10504 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    872a:	2101      	movs	r1, #1
    872c:	a80d      	add	r0, sp, #52	; 0x34
    872e:	f7ff fda5 	bl	827c <cmd_complete>
	ccst->status = 0x00;
    8732:	2300      	movs	r3, #0
    8734:	e269      	b.n	8c0a <hci_cmd_handle+0x60a>
	switch (ocf) {
    8736:	2a7b      	cmp	r2, #123	; 0x7b
    8738:	d02c      	beq.n	8794 <hci_cmd_handle+0x194>
    873a:	2a7c      	cmp	r2, #124	; 0x7c
    873c:	d041      	beq.n	87c2 <hci_cmd_handle+0x1c2>
    873e:	2a63      	cmp	r2, #99	; 0x63
    8740:	d198      	bne.n	8674 <hci_cmd_handle+0x74>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    8742:	68a0      	ldr	r0, [r4, #8]
    8744:	f7ff ff58 	bl	85f8 <sys_get_le64>
    8748:	4b79      	ldr	r3, [pc, #484]	; (8930 <hci_cmd_handle+0x330>)
	le_event_mask = sys_get_le64(cmd->events);
    874a:	e9c3 0100 	strd	r0, r1, [r3]
    874e:	e7ec      	b.n	872a <hci_cmd_handle+0x12a>
	event_mask = sys_get_le64(cmd->events);
    8750:	68a0      	ldr	r0, [r4, #8]
    8752:	f7ff ff51 	bl	85f8 <sys_get_le64>
    8756:	4b75      	ldr	r3, [pc, #468]	; (892c <hci_cmd_handle+0x32c>)
    8758:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    875c:	4611      	mov	r1, r2
    875e:	a80d      	add	r0, sp, #52	; 0x34
    8760:	f7ff fd8c 	bl	827c <cmd_complete>
	ccst->status = 0x00;
    8764:	7005      	strb	r5, [r0, #0]
    8766:	e7c0      	b.n	86ea <hci_cmd_handle+0xea>
    8768:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    876a:	2104      	movs	r1, #4
    876c:	a80d      	add	r0, sp, #52	; 0x34
	handle = sys_le16_to_cpu(cmd->handle);
    876e:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    8770:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    8772:	f7ff fd83 	bl	827c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8776:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8778:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    877a:	1cc2      	adds	r2, r0, #3
    877c:	4639      	mov	r1, r7
    877e:	4630      	mov	r0, r6
    8780:	f008 fa27 	bl	10bd2 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    8784:	2800      	cmp	r0, #0
    8786:	bf14      	ite	ne
    8788:	2302      	movne	r3, #2
    878a:	2300      	moveq	r3, #0
    878c:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    878e:	f8a4 5001 	strh.w	r5, [r4, #1]
    8792:	e7aa      	b.n	86ea <hci_cmd_handle+0xea>
	handle = sys_le16_to_cpu(cmd->handle);
    8794:	68a3      	ldr	r3, [r4, #8]
    8796:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    8798:	a90e      	add	r1, sp, #56	; 0x38
    879a:	b2a0      	uxth	r0, r4
    879c:	f008 fa23 	bl	10be6 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    87a0:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    87a2:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    87a4:	a80d      	add	r0, sp, #52	; 0x34
    87a6:	f7ff fd69 	bl	827c <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    87aa:	2d00      	cmp	r5, #0
    87ac:	bf14      	ite	ne
    87ae:	230c      	movne	r3, #12
    87b0:	2300      	moveq	r3, #0
    87b2:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    87b4:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    87b8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    87bc:	f8a0 3003 	strh.w	r3, [r0, #3]
    87c0:	e793      	b.n	86ea <hci_cmd_handle+0xea>
    87c2:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    87c4:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    87c6:	8859      	ldrh	r1, [r3, #2]
    87c8:	b2a0      	uxth	r0, r4
    87ca:	f008 fa20 	bl	10c0e <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    87ce:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    87d0:	2103      	movs	r1, #3
    87d2:	a80d      	add	r0, sp, #52	; 0x34
    87d4:	f7ff fd52 	bl	827c <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    87d8:	2d00      	cmp	r5, #0
    87da:	bf14      	ite	ne
    87dc:	230c      	movne	r3, #12
    87de:	2300      	moveq	r3, #0
    87e0:	7003      	strb	r3, [r0, #0]
    87e2:	e2b4      	b.n	8d4e <hci_cmd_handle+0x74e>
	switch (ocf) {
    87e4:	3a01      	subs	r2, #1
    87e6:	2a08      	cmp	r2, #8
    87e8:	f63f af44 	bhi.w	8674 <hci_cmd_handle+0x74>
    87ec:	a301      	add	r3, pc, #4	; (adr r3, 87f4 <hci_cmd_handle+0x1f4>)
    87ee:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    87f2:	bf00      	nop
    87f4:	00008819 	.word	0x00008819
    87f8:	00008843 	.word	0x00008843
    87fc:	000088f1 	.word	0x000088f1
    8800:	00008675 	.word	0x00008675
    8804:	00008675 	.word	0x00008675
    8808:	00008675 	.word	0x00008675
    880c:	00008675 	.word	0x00008675
    8810:	00008675 	.word	0x00008675
    8814:	00008939 	.word	0x00008939
	rp = cmd_complete(evt, sizeof(*rp));
    8818:	2109      	movs	r1, #9
    881a:	a80d      	add	r0, sp, #52	; 0x34
    881c:	f7ff fd2e 	bl	827c <cmd_complete>
	rp->status = 0x00;
    8820:	2300      	movs	r3, #0
    8822:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    8824:	7083      	strb	r3, [r0, #2]
    8826:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8828:	f06f 030e 	mvn.w	r3, #14
    882c:	7143      	strb	r3, [r0, #5]
    882e:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    8830:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8832:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    8834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    8838:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    883a:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    883c:	71c3      	strb	r3, [r0, #7]
    883e:	7203      	strb	r3, [r0, #8]
    8840:	e753      	b.n	86ea <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8842:	2141      	movs	r1, #65	; 0x41
    8844:	a80d      	add	r0, sp, #52	; 0x34
    8846:	f7ff fd19 	bl	827c <cmd_complete>
	rp->status = 0x00;
    884a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    884c:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    884e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    8850:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8854:	f7f9 fa10 	bl	1c78 <memset>
	rp->commands[2] |= BIT(7);
    8858:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    885a:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[2] |= BIT(7);
    885c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8860:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    8862:	79a3      	ldrb	r3, [r4, #6]
    8864:	f063 033f 	orn	r3, r3, #63	; 0x3f
    8868:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    886a:	7ae3      	ldrb	r3, [r4, #11]
    886c:	f043 0304 	orr.w	r3, r3, #4
    8870:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    8872:	7be3      	ldrb	r3, [r4, #15]
    8874:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    8878:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    887a:	7c23      	ldrb	r3, [r4, #16]
    887c:	f043 0302 	orr.w	r3, r3, #2
    8880:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    8882:	7de3      	ldrb	r3, [r4, #23]
    8884:	f043 0304 	orr.w	r3, r3, #4
    8888:	75e3      	strb	r3, [r4, #23]
	rp->commands[28] |= BIT(3);
    888a:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    888c:	f043 0309 	orr.w	r3, r3, #9
    8890:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    8892:	7863      	ldrb	r3, [r4, #1]
    8894:	f043 0320 	orr.w	r3, r3, #32
    8898:	7063      	strb	r3, [r4, #1]
	rp->commands[33] |= BIT(4) | BIT(5);
    889a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    889e:	f063 030f 	orn	r3, r3, #15
    88a2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    88a6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    88aa:	f062 0208 	orn	r2, r2, #8
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    88ae:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    88b2:	76a2      	strb	r2, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
    88b4:	22ff      	movs	r2, #255	; 0xff
    88b6:	76e2      	strb	r2, [r4, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    88b8:	7722      	strb	r2, [r4, #28]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    88ba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    88be:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    88c2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    88c6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    88ca:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    88ce:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    88d2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    88d6:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    88da:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    88de:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    88e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    88e6:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    88ea:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    88ee:	e6fc      	b.n	86ea <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    88f0:	2109      	movs	r1, #9
    88f2:	a80d      	add	r0, sp, #52	; 0x34
    88f4:	f7ff fcc2 	bl	827c <cmd_complete>
	rp->status = 0x00;
    88f8:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    88fa:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    88fc:	2208      	movs	r2, #8
	rp->status = 0x00;
    88fe:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8902:	f7f9 f9b9 	bl	1c78 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    8906:	2360      	movs	r3, #96	; 0x60
    8908:	7163      	strb	r3, [r4, #5]
    890a:	e6ee      	b.n	86ea <hci_cmd_handle+0xea>
    890c:	000159e9 	.word	0x000159e9
    8910:	20003ad4 	.word	0x20003ad4
    8914:	00016791 	.word	0x00016791
    8918:	00017a6e 	.word	0x00017a6e
    891c:	00017bb1 	.word	0x00017bb1
    8920:	20000858 	.word	0x20000858
    8924:	00017bd7 	.word	0x00017bd7
    8928:	20000860 	.word	0x20000860
    892c:	20003da8 	.word	0x20003da8
    8930:	200008e8 	.word	0x200008e8
    8934:	20003db0 	.word	0x20003db0
	rp = cmd_complete(evt, sizeof(*rp));
    8938:	2107      	movs	r1, #7
    893a:	a80d      	add	r0, sp, #52	; 0x34
    893c:	f7ff fc9e 	bl	827c <cmd_complete>
	rp->status = 0x00;
    8940:	4601      	mov	r1, r0
    8942:	2300      	movs	r3, #0
    8944:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    8948:	4618      	mov	r0, r3
    894a:	f7ff f9ab 	bl	7ca4 <ll_addr_get>
    894e:	e6cc      	b.n	86ea <hci_cmd_handle+0xea>
	switch (ocf) {
    8950:	3a01      	subs	r2, #1
    8952:	2a4d      	cmp	r2, #77	; 0x4d
    8954:	f63f ae8e 	bhi.w	8674 <hci_cmd_handle+0x74>
    8958:	a301      	add	r3, pc, #4	; (adr r3, 8960 <hci_cmd_handle+0x360>)
    895a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    895e:	bf00      	nop
    8960:	00008a99 	.word	0x00008a99
    8964:	00008aa3 	.word	0x00008aa3
    8968:	00008abb 	.word	0x00008abb
    896c:	00008675 	.word	0x00008675
    8970:	00008adf 	.word	0x00008adf
    8974:	00008ba7 	.word	0x00008ba7
    8978:	0000907b 	.word	0x0000907b
    897c:	00008bd7 	.word	0x00008bd7
    8980:	00008be3 	.word	0x00008be3
    8984:	00008bef 	.word	0x00008bef
    8988:	00008c0f 	.word	0x00008c0f
    898c:	00008c27 	.word	0x00008c27
    8990:	00008c47 	.word	0x00008c47
    8994:	00008c71 	.word	0x00008c71
    8998:	00008aeb 	.word	0x00008aeb
    899c:	00008b01 	.word	0x00008b01
    89a0:	00008b13 	.word	0x00008b13
    89a4:	00008b1b 	.word	0x00008b1b
    89a8:	00008d11 	.word	0x00008d11
    89ac:	00008cd1 	.word	0x00008cd1
    89b0:	00008ced 	.word	0x00008ced
    89b4:	00008d07 	.word	0x00008d07
    89b8:	00008b23 	.word	0x00008b23
    89bc:	00008b49 	.word	0x00008b49
    89c0:	00008cd9 	.word	0x00008cd9
    89c4:	00008675 	.word	0x00008675
    89c8:	00008675 	.word	0x00008675
    89cc:	00008b5f 	.word	0x00008b5f
    89d0:	00008675 	.word	0x00008675
    89d4:	00008675 	.word	0x00008675
    89d8:	00008675 	.word	0x00008675
    89dc:	00008d2b 	.word	0x00008d2b
    89e0:	00008d55 	.word	0x00008d55
    89e4:	00008d63 	.word	0x00008d63
    89e8:	00008d9d 	.word	0x00008d9d
    89ec:	00008db5 	.word	0x00008db5
    89f0:	00008675 	.word	0x00008675
    89f4:	00008675 	.word	0x00008675
    89f8:	00008eb9 	.word	0x00008eb9
    89fc:	00008ec7 	.word	0x00008ec7
    8a00:	00008ecf 	.word	0x00008ecf
    8a04:	00008edf 	.word	0x00008edf
    8a08:	00008ef1 	.word	0x00008ef1
    8a0c:	00008f0f 	.word	0x00008f0f
    8a10:	00008f2d 	.word	0x00008f2d
    8a14:	00008f43 	.word	0x00008f43
    8a18:	00008dd1 	.word	0x00008dd1
    8a1c:	00008de9 	.word	0x00008de9
    8a20:	00008e3f 	.word	0x00008e3f
    8a24:	00008e5d 	.word	0x00008e5d
    8a28:	00008675 	.word	0x00008675
    8a2c:	00008675 	.word	0x00008675
    8a30:	00008675 	.word	0x00008675
    8a34:	00008675 	.word	0x00008675
    8a38:	00008675 	.word	0x00008675
    8a3c:	00008675 	.word	0x00008675
    8a40:	00008675 	.word	0x00008675
    8a44:	00008675 	.word	0x00008675
    8a48:	00008675 	.word	0x00008675
    8a4c:	00008675 	.word	0x00008675
    8a50:	00008675 	.word	0x00008675
    8a54:	00008675 	.word	0x00008675
    8a58:	00008675 	.word	0x00008675
    8a5c:	00008675 	.word	0x00008675
    8a60:	00008675 	.word	0x00008675
    8a64:	00008675 	.word	0x00008675
    8a68:	00008675 	.word	0x00008675
    8a6c:	00008675 	.word	0x00008675
    8a70:	00008675 	.word	0x00008675
    8a74:	00008675 	.word	0x00008675
    8a78:	00008675 	.word	0x00008675
    8a7c:	00008675 	.word	0x00008675
    8a80:	00008675 	.word	0x00008675
    8a84:	00008675 	.word	0x00008675
    8a88:	00008f59 	.word	0x00008f59
    8a8c:	00008675 	.word	0x00008675
    8a90:	00008675 	.word	0x00008675
    8a94:	00008f4f 	.word	0x00008f4f
	le_event_mask = sys_get_le64(cmd->events);
    8a98:	68a0      	ldr	r0, [r4, #8]
    8a9a:	f7ff fdad 	bl	85f8 <sys_get_le64>
    8a9e:	4bb5      	ldr	r3, [pc, #724]	; (8d74 <hci_cmd_handle+0x774>)
    8aa0:	e653      	b.n	874a <hci_cmd_handle+0x14a>
	rp = cmd_complete(evt, sizeof(*rp));
    8aa2:	2104      	movs	r1, #4
    8aa4:	a80d      	add	r0, sp, #52	; 0x34
    8aa6:	f7ff fbe9 	bl	827c <cmd_complete>
	rp->status = 0x00;
    8aaa:	2300      	movs	r3, #0
    8aac:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8aae:	221b      	movs	r2, #27
    8ab0:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8ab2:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8ab4:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8ab6:	70c3      	strb	r3, [r0, #3]
    8ab8:	e617      	b.n	86ea <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8aba:	2109      	movs	r1, #9
    8abc:	a80d      	add	r0, sp, #52	; 0x34
    8abe:	f7ff fbdd 	bl	827c <cmd_complete>
	rp->status = 0x00;
    8ac2:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8ac4:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8ac6:	2208      	movs	r2, #8
	rp->status = 0x00;
    8ac8:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8acc:	f7f9 f8d4 	bl	1c78 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    8ad0:	23ff      	movs	r3, #255	; 0xff
    8ad2:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    8ad4:	2341      	movs	r3, #65	; 0x41
    8ad6:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    8ad8:	2301      	movs	r3, #1
    8ada:	70e3      	strb	r3, [r4, #3]
    8adc:	e605      	b.n	86ea <hci_cmd_handle+0xea>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    8ade:	68a1      	ldr	r1, [r4, #8]
    8ae0:	2001      	movs	r0, #1
    8ae2:	f7ff f8f9 	bl	7cd8 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    8ae6:	4604      	mov	r4, r0
    8ae8:	e0ea      	b.n	8cc0 <hci_cmd_handle+0x6c0>
	rp = cmd_complete(evt, sizeof(*rp));
    8aea:	2102      	movs	r1, #2
    8aec:	a80d      	add	r0, sp, #52	; 0x34
    8aee:	f7ff fbc5 	bl	827c <cmd_complete>
	rp->status = 0x00;
    8af2:	2300      	movs	r3, #0
    8af4:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8af6:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    8af8:	f009 fc06 	bl	12308 <ll_wl_size_get>
    8afc:	7060      	strb	r0, [r4, #1]
    8afe:	e5f4      	b.n	86ea <hci_cmd_handle+0xea>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8b00:	2101      	movs	r1, #1
    8b02:	a80d      	add	r0, sp, #52	; 0x34
    8b04:	f7ff fbba 	bl	827c <cmd_complete>
    8b08:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    8b0a:	f009 fbff 	bl	1230c <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    8b0e:	7020      	strb	r0, [r4, #0]
    8b10:	e5eb      	b.n	86ea <hci_cmd_handle+0xea>
	status = ll_wl_add(&cmd->addr);
    8b12:	68a0      	ldr	r0, [r4, #8]
    8b14:	f009 fcc8 	bl	124a8 <ll_wl_add>
    8b18:	e7e5      	b.n	8ae6 <hci_cmd_handle+0x4e6>
	status = ll_wl_remove(&cmd->addr);
    8b1a:	68a0      	ldr	r0, [r4, #8]
    8b1c:	f009 fc16 	bl	1234c <ll_wl_remove>
    8b20:	e7e1      	b.n	8ae6 <hci_cmd_handle+0x4e6>
    8b22:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    8b24:	2300      	movs	r3, #0
    8b26:	aa0e      	add	r2, sp, #56	; 0x38
    8b28:	f100 0110 	add.w	r1, r0, #16
    8b2c:	f00a fa3c 	bl	12fa8 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    8b30:	2111      	movs	r1, #17
    8b32:	a80d      	add	r0, sp, #52	; 0x34
    8b34:	f7ff fba2 	bl	827c <cmd_complete>
	rp->status = 0x00;
    8b38:	2300      	movs	r3, #0
    8b3a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    8b3e:	2210      	movs	r2, #16
    8b40:	a90e      	add	r1, sp, #56	; 0x38
	memcpy(rp->info, build_info, sizeof(build_info));
    8b42:	f7f9 f86d 	bl	1c20 <memcpy>
    8b46:	e5d0      	b.n	86ea <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8b48:	2109      	movs	r1, #9
    8b4a:	a80d      	add	r0, sp, #52	; 0x34
    8b4c:	f7ff fb96 	bl	827c <cmd_complete>
	rp->status = 0x00;
    8b50:	2300      	movs	r3, #0
    8b52:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    8b56:	2108      	movs	r1, #8
    8b58:	f7ff f8de 	bl	7d18 <bt_rand>
    8b5c:	e5c5      	b.n	86ea <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8b5e:	2109      	movs	r1, #9
    8b60:	a80d      	add	r0, sp, #52	; 0x34
    8b62:	f7ff fb8b 	bl	827c <cmd_complete>
	rp->status = 0x00;
    8b66:	4604      	mov	r4, r0
    8b68:	2300      	movs	r3, #0
    8b6a:	f804 3b01 	strb.w	r3, [r4], #1
	BT_DBG("states: 0x%08x%08x", (u32_t)(states >> 32),
    8b6e:	4b82      	ldr	r3, [pc, #520]	; (8d78 <hci_cmd_handle+0x778>)
    8b70:	4f82      	ldr	r7, [pc, #520]	; (8d7c <hci_cmd_handle+0x77c>)
    8b72:	f8d3 8000 	ldr.w	r8, [r3]
	rp = cmd_complete(evt, sizeof(*rp));
    8b76:	4606      	mov	r6, r0
    8b78:	f00c f91e 	bl	14db8 <_impl_k_current_get>
	BT_DBG("states: 0x%08x%08x", (u32_t)(states >> 32),
    8b7c:	f240 253f 	movw	r5, #575	; 0x23f
    8b80:	4a7f      	ldr	r2, [pc, #508]	; (8d80 <hci_cmd_handle+0x780>)
    8b82:	9204      	str	r2, [sp, #16]
    8b84:	9001      	str	r0, [sp, #4]
    8b86:	9200      	str	r2, [sp, #0]
    8b88:	4b7e      	ldr	r3, [pc, #504]	; (8d84 <hci_cmd_handle+0x784>)
    8b8a:	497f      	ldr	r1, [pc, #508]	; (8d88 <hci_cmd_handle+0x788>)
    8b8c:	487f      	ldr	r0, [pc, #508]	; (8d8c <hci_cmd_handle+0x78c>)
    8b8e:	9703      	str	r7, [sp, #12]
    8b90:	9502      	str	r5, [sp, #8]
    8b92:	47c0      	blx	r8
	sys_put_le32(val, dst);
    8b94:	4621      	mov	r1, r4
    8b96:	4638      	mov	r0, r7
    8b98:	f7ff fb2c 	bl	81f4 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    8b9c:	1d71      	adds	r1, r6, #5
    8b9e:	4628      	mov	r0, r5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    8ba0:	f7ff fb28 	bl	81f4 <sys_put_le32>
    8ba4:	e5a1      	b.n	86ea <hci_cmd_handle+0xea>
    8ba6:	68a0      	ldr	r0, [r4, #8]
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    8ba8:	2100      	movs	r1, #0
    8baa:	7903      	ldrb	r3, [r0, #4]
    8bac:	8802      	ldrh	r2, [r0, #0]
    8bae:	910a      	str	r1, [sp, #40]	; 0x28
    8bb0:	9109      	str	r1, [sp, #36]	; 0x24
    8bb2:	9108      	str	r1, [sp, #32]
    8bb4:	9107      	str	r1, [sp, #28]
    8bb6:	9106      	str	r1, [sp, #24]
    8bb8:	9105      	str	r1, [sp, #20]
    8bba:	7b84      	ldrb	r4, [r0, #14]
    8bbc:	9404      	str	r4, [sp, #16]
    8bbe:	7b44      	ldrb	r4, [r0, #13]
    8bc0:	9403      	str	r4, [sp, #12]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    8bc2:	1dc4      	adds	r4, r0, #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    8bc4:	9402      	str	r4, [sp, #8]
    8bc6:	7984      	ldrb	r4, [r0, #6]
    8bc8:	9401      	str	r4, [sp, #4]
    8bca:	7940      	ldrb	r0, [r0, #5]
    8bcc:	9000      	str	r0, [sp, #0]
    8bce:	4608      	mov	r0, r1
    8bd0:	f008 ff28 	bl	11a24 <ll_adv_params_set>
    8bd4:	e787      	b.n	8ae6 <hci_cmd_handle+0x4e6>
    8bd6:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    8bd8:	1c59      	adds	r1, r3, #1
    8bda:	7818      	ldrb	r0, [r3, #0]
    8bdc:	f009 f83c 	bl	11c58 <ll_adv_data_set>
    8be0:	e5a3      	b.n	872a <hci_cmd_handle+0x12a>
    8be2:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    8be4:	1c59      	adds	r1, r3, #1
    8be6:	7818      	ldrb	r0, [r3, #0]
    8be8:	f009 f88e 	bl	11d08 <ll_scan_data_set>
    8bec:	e59d      	b.n	872a <hci_cmd_handle+0x12a>
	status = ll_adv_enable(cmd->enable);
    8bee:	68a3      	ldr	r3, [r4, #8]
    8bf0:	7818      	ldrb	r0, [r3, #0]
    8bf2:	f009 f8cf 	bl	11d94 <ll_adv_enable>
	status = ll_scan_enable(cmd->enable);
    8bf6:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    8bf8:	2101      	movs	r1, #1
    8bfa:	a80d      	add	r0, sp, #52	; 0x34
    8bfc:	f7ff fb3e 	bl	827c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8c00:	2c00      	cmp	r4, #0
    8c02:	bf18      	it	ne
    8c04:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8c06:	bf08      	it	eq
    8c08:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8c0a:	7003      	strb	r3, [r0, #0]
    8c0c:	e56d      	b.n	86ea <hci_cmd_handle+0xea>
    8c0e:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    8c10:	7963      	ldrb	r3, [r4, #5]
    8c12:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    8c16:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    8c1a:	7820      	ldrb	r0, [r4, #0]
    8c1c:	79a4      	ldrb	r4, [r4, #6]
    8c1e:	9400      	str	r4, [sp, #0]
    8c20:	f009 f936 	bl	11e90 <ll_scan_params_set>
    8c24:	e7e7      	b.n	8bf6 <hci_cmd_handle+0x5f6>
    8c26:	68a2      	ldr	r2, [r4, #8]
    8c28:	4b59      	ldr	r3, [pc, #356]	; (8d90 <hci_cmd_handle+0x790>)
	if (cmd->enable && cmd->filter_dup) {
    8c2a:	7810      	ldrb	r0, [r2, #0]
    8c2c:	b140      	cbz	r0, 8c40 <hci_cmd_handle+0x640>
    8c2e:	7852      	ldrb	r2, [r2, #1]
    8c30:	b132      	cbz	r2, 8c40 <hci_cmd_handle+0x640>
		dup_count = 0;
    8c32:	2200      	movs	r2, #0
    8c34:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    8c36:	4b57      	ldr	r3, [pc, #348]	; (8d94 <hci_cmd_handle+0x794>)
		dup_count = -1;
    8c38:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    8c3a:	f009 f949 	bl	11ed0 <ll_scan_enable>
    8c3e:	e7da      	b.n	8bf6 <hci_cmd_handle+0x5f6>
		dup_count = -1;
    8c40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8c44:	e7f8      	b.n	8c38 <hci_cmd_handle+0x638>
    8c46:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    8c48:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    8c4c:	7963      	ldrb	r3, [r4, #5]
    8c4e:	7922      	ldrb	r2, [r4, #4]
    8c50:	8861      	ldrh	r1, [r4, #2]
    8c52:	8820      	ldrh	r0, [r4, #0]
    8c54:	9504      	str	r5, [sp, #16]
    8c56:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    8c5a:	9503      	str	r5, [sp, #12]
    8c5c:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    8c60:	9502      	str	r5, [sp, #8]
    8c62:	7b25      	ldrb	r5, [r4, #12]
    8c64:	9501      	str	r5, [sp, #4]
    8c66:	3406      	adds	r4, #6
    8c68:	9400      	str	r4, [sp, #0]
    8c6a:	f009 f96b 	bl	11f44 <ll_create_connection>
    8c6e:	e535      	b.n	86dc <hci_cmd_handle+0xdc>
	status = ll_connect_disable();
    8c70:	f008 fd42 	bl	116f8 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    8c74:	4606      	mov	r6, r0
    8c76:	bb48      	cbnz	r0, 8ccc <hci_cmd_handle+0x6cc>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8c78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8c7c:	2001      	movs	r0, #1
    8c7e:	f7fa ff61 	bl	3b44 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8c82:	4a45      	ldr	r2, [pc, #276]	; (8d98 <hci_cmd_handle+0x798>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8c84:	900d      	str	r0, [sp, #52]	; 0x34
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8c86:	e9d2 4500 	ldrd	r4, r5, [r2]
    8c8a:	2400      	movs	r4, #0
    8c8c:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    8c90:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8c94:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8c96:	d004      	beq.n	8ca2 <hci_cmd_handle+0x6a2>
    8c98:	4632      	mov	r2, r6
    8c9a:	4631      	mov	r1, r6
    8c9c:	2002      	movs	r0, #2
    8c9e:	f7ff fb5d 	bl	835c <le_conn_complete.part.44>
		if ((*evt)->len) {
    8ca2:	980d      	ldr	r0, [sp, #52]	; 0x34
    8ca4:	8984      	ldrh	r4, [r0, #12]
    8ca6:	b14c      	cbz	r4, 8cbc <hci_cmd_handle+0x6bc>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    8ca8:	2101      	movs	r1, #1
    8caa:	a80e      	add	r0, sp, #56	; 0x38
    8cac:	f7ff fae6 	bl	827c <cmd_complete>
			ccst->status = cmd_status;
    8cb0:	2300      	movs	r3, #0
    8cb2:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    8cb4:	980e      	ldr	r0, [sp, #56]	; 0x38
    8cb6:	f7fa fd67 	bl	3788 <bt_recv_prio>
    8cba:	e516      	b.n	86ea <hci_cmd_handle+0xea>
			net_buf_unref(*evt);
    8cbc:	f00a ffb8 	bl	13c30 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8cc0:	2101      	movs	r1, #1
    8cc2:	a80d      	add	r0, sp, #52	; 0x34
    8cc4:	f7ff fada 	bl	827c <cmd_complete>
	ccst->status = status;
    8cc8:	7004      	strb	r4, [r0, #0]
    8cca:	e50e      	b.n	86ea <hci_cmd_handle+0xea>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    8ccc:	240c      	movs	r4, #12
    8cce:	e7f7      	b.n	8cc0 <hci_cmd_handle+0x6c0>
	status = ll_chm_update(&cmd->ch_map[0]);
    8cd0:	68a0      	ldr	r0, [r4, #8]
    8cd2:	f007 feeb 	bl	10aac <ll_chm_update>
    8cd6:	e78e      	b.n	8bf6 <hci_cmd_handle+0x5f6>
    8cd8:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    8cda:	f100 030c 	add.w	r3, r0, #12
    8cde:	f100 020a 	add.w	r2, r0, #10
    8ce2:	1c81      	adds	r1, r0, #2
    8ce4:	8800      	ldrh	r0, [r0, #0]
    8ce6:	f008 f995 	bl	11014 <ll_enc_req_send>
    8cea:	e4f7      	b.n	86dc <hci_cmd_handle+0xdc>
	handle = sys_le16_to_cpu(cmd->handle);
    8cec:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8cee:	2108      	movs	r1, #8
    8cf0:	a80d      	add	r0, sp, #52	; 0x34
	handle = sys_le16_to_cpu(cmd->handle);
    8cf2:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8cf4:	f7ff fac2 	bl	827c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8cf8:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8cfa:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    8cfc:	1cc1      	adds	r1, r0, #3
    8cfe:	4630      	mov	r0, r6
    8d00:	f007 ff16 	bl	10b30 <ll_chm_get>
    8d04:	e53e      	b.n	8784 <hci_cmd_handle+0x184>
	handle = sys_le16_to_cpu(cmd->handle);
    8d06:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    8d08:	8818      	ldrh	r0, [r3, #0]
    8d0a:	f007 ff26 	bl	10b5a <ll_feature_req_send>
    8d0e:	e4e5      	b.n	86dc <hci_cmd_handle+0xdc>
    8d10:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    8d12:	8911      	ldrh	r1, [r2, #8]
    8d14:	8893      	ldrh	r3, [r2, #4]
    8d16:	8810      	ldrh	r0, [r2, #0]
    8d18:	9101      	str	r1, [sp, #4]
    8d1a:	88d2      	ldrh	r2, [r2, #6]
    8d1c:	9200      	str	r2, [sp, #0]
    8d1e:	2200      	movs	r2, #0
    8d20:	4611      	mov	r1, r2
    8d22:	f007 fe4b 	bl	109bc <ll_conn_update>
	*evt = cmd_status(status);
    8d26:	b2c0      	uxtb	r0, r0
    8d28:	e4dc      	b.n	86e4 <hci_cmd_handle+0xe4>
    8d2a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8d2c:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8d2e:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8d30:	8893      	ldrh	r3, [r2, #4]
    8d32:	9101      	str	r1, [sp, #4]
    8d34:	88d2      	ldrh	r2, [r2, #6]
    8d36:	9200      	str	r2, [sp, #0]
    8d38:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8d3a:	2102      	movs	r1, #2
    8d3c:	b2a0      	uxth	r0, r4
    8d3e:	f007 fe3d 	bl	109bc <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    8d42:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8d44:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8d46:	a80d      	add	r0, sp, #52	; 0x34
    8d48:	f7ff fa98 	bl	827c <cmd_complete>
	rp->status = status;
    8d4c:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8d4e:	f8a0 4001 	strh.w	r4, [r0, #1]
    8d52:	e4ca      	b.n	86ea <hci_cmd_handle+0xea>
    8d54:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8d56:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8d58:	789a      	ldrb	r2, [r3, #2]
    8d5a:	2300      	movs	r3, #0
    8d5c:	9301      	str	r3, [sp, #4]
    8d5e:	9300      	str	r3, [sp, #0]
    8d60:	e7eb      	b.n	8d3a <hci_cmd_handle+0x73a>
    8d62:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8d64:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8d66:	889a      	ldrh	r2, [r3, #4]
    8d68:	8859      	ldrh	r1, [r3, #2]
    8d6a:	b2a0      	uxth	r0, r4
    8d6c:	f007 ff65 	bl	10c3a <ll_length_req_send>
    8d70:	e52d      	b.n	87ce <hci_cmd_handle+0x1ce>
    8d72:	bf00      	nop
    8d74:	20003db0 	.word	0x20003db0
    8d78:	20003ad4 	.word	0x20003ad4
    8d7c:	130f3373 	.word	0x130f3373
    8d80:	000159e9 	.word	0x000159e9
    8d84:	00017a5a 	.word	0x00017a5a
    8d88:	00016791 	.word	0x00016791
    8d8c:	00017c05 	.word	0x00017c05
    8d90:	20000860 	.word	0x20000860
    8d94:	20000864 	.word	0x20000864
    8d98:	20003da8 	.word	0x20003da8
	rp = cmd_complete(evt, sizeof(*rp));
    8d9c:	2105      	movs	r1, #5
    8d9e:	a80d      	add	r0, sp, #52	; 0x34
    8da0:	f7ff fa6c 	bl	827c <cmd_complete>
    8da4:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    8da6:	1cc1      	adds	r1, r0, #3
    8da8:	3001      	adds	r0, #1
    8daa:	f007 ff69 	bl	10c80 <ll_length_default_get>
	rp->status = 0x00;
    8dae:	2300      	movs	r3, #0
    8db0:	7023      	strb	r3, [r4, #0]
    8db2:	e49a      	b.n	86ea <hci_cmd_handle+0xea>
    8db4:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    8db6:	8859      	ldrh	r1, [r3, #2]
    8db8:	8818      	ldrh	r0, [r3, #0]
    8dba:	f007 ff6b 	bl	10c94 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8dbe:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    8dc0:	2101      	movs	r1, #1
    8dc2:	a80d      	add	r0, sp, #52	; 0x34
    8dc4:	f7ff fa5a 	bl	827c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8dc8:	2c00      	cmp	r4, #0
    8dca:	bf18      	it	ne
    8dcc:	231e      	movne	r3, #30
    8dce:	e71a      	b.n	8c06 <hci_cmd_handle+0x606>
	rp = cmd_complete(evt, sizeof(*rp));
    8dd0:	2109      	movs	r1, #9
    8dd2:	a80d      	add	r0, sp, #52	; 0x34
    8dd4:	f7ff fa52 	bl	827c <cmd_complete>
    8dd8:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    8dda:	1dc3      	adds	r3, r0, #7
    8ddc:	1d42      	adds	r2, r0, #5
    8dde:	1cc1      	adds	r1, r0, #3
    8de0:	3001      	adds	r0, #1
    8de2:	f007 ff61 	bl	10ca8 <ll_length_max_get>
    8de6:	e7e2      	b.n	8dae <hci_cmd_handle+0x7ae>
	handle = sys_le16_to_cpu(cmd->handle);
    8de8:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8dea:	2105      	movs	r1, #5
    8dec:	a80d      	add	r0, sp, #52	; 0x34
	handle = sys_le16_to_cpu(cmd->handle);
    8dee:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8df0:	f7ff fa44 	bl	827c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8df4:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8df6:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    8df8:	1d02      	adds	r2, r0, #4
    8dfa:	1cc1      	adds	r1, r0, #3
    8dfc:	4630      	mov	r0, r6
    8dfe:	f007 ff5c 	bl	10cba <ll_phy_get>
	return __builtin_ffs(op);
    8e02:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    8e04:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8e08:	2800      	cmp	r0, #0
    8e0a:	bf14      	ite	ne
    8e0c:	230c      	movne	r3, #12
    8e0e:	2300      	moveq	r3, #0
    8e10:	7023      	strb	r3, [r4, #0]
    8e12:	2a00      	cmp	r2, #0
    8e14:	fa92 f3a2 	rbit	r3, r2
    8e18:	fab3 f383 	clz	r3, r3
    8e1c:	7922      	ldrb	r2, [r4, #4]
    8e1e:	bf08      	it	eq
    8e20:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8e24:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    8e26:	70e3      	strb	r3, [r4, #3]
    8e28:	2a00      	cmp	r2, #0
    8e2a:	fa92 f3a2 	rbit	r3, r2
    8e2e:	fab3 f383 	clz	r3, r3
    8e32:	bf08      	it	eq
    8e34:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8e38:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    8e3a:	7123      	strb	r3, [r4, #4]
    8e3c:	e455      	b.n	86ea <hci_cmd_handle+0xea>
    8e3e:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8e40:	781a      	ldrb	r2, [r3, #0]
    8e42:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    8e44:	bf44      	itt	mi
    8e46:	2107      	movmi	r1, #7
    8e48:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8e4a:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    8e4c:	bf44      	itt	mi
    8e4e:	2207      	movmi	r2, #7
    8e50:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8e52:	7899      	ldrb	r1, [r3, #2]
    8e54:	7858      	ldrb	r0, [r3, #1]
    8e56:	f007 ff45 	bl	10ce4 <ll_phy_default_set>
    8e5a:	e7b0      	b.n	8dbe <hci_cmd_handle+0x7be>
    8e5c:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8e5e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    8e60:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    8e62:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8e66:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    8e68:	bf44      	itt	mi
    8e6a:	2103      	movmi	r1, #3
    8e6c:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    8e6e:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8e70:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    8e72:	bf44      	itt	mi
    8e74:	2203      	movmi	r2, #3
    8e76:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    8e78:	074d      	lsls	r5, r1, #29
    8e7a:	d002      	beq.n	8e82 <hci_cmd_handle+0x882>
	    !(cmd->rx_phys & 0x07)) {
    8e7c:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    8e7e:	075a      	lsls	r2, r3, #29
    8e80:	d105      	bne.n	8e8e <hci_cmd_handle+0x88e>
		ccst = cmd_complete(evt, sizeof(*ccst));
    8e82:	2101      	movs	r1, #1
    8e84:	a80d      	add	r0, sp, #52	; 0x34
    8e86:	f7ff f9f9 	bl	827c <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    8e8a:	2312      	movs	r3, #18
    8e8c:	e6bd      	b.n	8c0a <hci_cmd_handle+0x60a>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    8e8e:	ea41 0203 	orr.w	r2, r1, r3
    8e92:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    8e96:	d005      	beq.n	8ea4 <hci_cmd_handle+0x8a4>
		ccst = cmd_complete(evt, sizeof(*ccst));
    8e98:	2101      	movs	r1, #1
    8e9a:	a80d      	add	r0, sp, #52	; 0x34
    8e9c:	f7ff f9ee 	bl	827c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    8ea0:	2311      	movs	r3, #17
    8ea2:	e6b2      	b.n	8c0a <hci_cmd_handle+0x60a>
	if (phy_opts & 0x03) {
    8ea4:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    8ea8:	bf1c      	itt	ne
    8eaa:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    8eae:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    8eb2:	f007 ff21 	bl	10cf8 <ll_phy_req_send>
    8eb6:	e411      	b.n	86dc <hci_cmd_handle+0xdc>
    8eb8:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    8eba:	f100 0217 	add.w	r2, r0, #23
    8ebe:	1dc1      	adds	r1, r0, #7
    8ec0:	f009 fe04 	bl	12acc <ll_rl_add>
    8ec4:	e60f      	b.n	8ae6 <hci_cmd_handle+0x4e6>
	status = ll_rl_remove(&cmd->peer_id_addr);
    8ec6:	68a0      	ldr	r0, [r4, #8]
    8ec8:	f009 fea2 	bl	12c10 <ll_rl_remove>
    8ecc:	e60b      	b.n	8ae6 <hci_cmd_handle+0x4e6>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8ece:	2101      	movs	r1, #1
    8ed0:	a80d      	add	r0, sp, #52	; 0x34
    8ed2:	f7ff f9d3 	bl	827c <cmd_complete>
    8ed6:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    8ed8:	f009 fdde 	bl	12a98 <ll_rl_clear>
    8edc:	e617      	b.n	8b0e <hci_cmd_handle+0x50e>
	rp = cmd_complete(evt, sizeof(*rp));
    8ede:	2102      	movs	r1, #2
    8ee0:	a80d      	add	r0, sp, #52	; 0x34
    8ee2:	f7ff f9cb 	bl	827c <cmd_complete>
    8ee6:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    8ee8:	f009 fdd4 	bl	12a94 <ll_rl_size_get>
    8eec:	7060      	strb	r0, [r4, #1]
    8eee:	e75e      	b.n	8dae <hci_cmd_handle+0x7ae>
    8ef0:	2207      	movs	r2, #7
    8ef2:	68a1      	ldr	r1, [r4, #8]
    8ef4:	a80e      	add	r0, sp, #56	; 0x38
    8ef6:	f7f8 fe93 	bl	1c20 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    8efa:	2107      	movs	r1, #7
    8efc:	a80d      	add	r0, sp, #52	; 0x34
    8efe:	f7ff f9bd 	bl	827c <cmd_complete>
    8f02:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    8f04:	1c41      	adds	r1, r0, #1
    8f06:	a80e      	add	r0, sp, #56	; 0x38
    8f08:	f009 ff10 	bl	12d2c <ll_rl_crpa_get>
    8f0c:	e5ff      	b.n	8b0e <hci_cmd_handle+0x50e>
    8f0e:	2207      	movs	r2, #7
    8f10:	68a1      	ldr	r1, [r4, #8]
    8f12:	a80e      	add	r0, sp, #56	; 0x38
    8f14:	f7f8 fe84 	bl	1c20 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    8f18:	2107      	movs	r1, #7
    8f1a:	a80d      	add	r0, sp, #52	; 0x34
    8f1c:	f7ff f9ae 	bl	827c <cmd_complete>
    8f20:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    8f22:	1c41      	adds	r1, r0, #1
    8f24:	a80e      	add	r0, sp, #56	; 0x38
    8f26:	f009 ff21 	bl	12d6c <ll_rl_lrpa_get>
    8f2a:	e5f0      	b.n	8b0e <hci_cmd_handle+0x50e>
	u8_t enable = cmd->enable;
    8f2c:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8f2e:	2101      	movs	r1, #1
    8f30:	a80d      	add	r0, sp, #52	; 0x34
	u8_t enable = cmd->enable;
    8f32:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8f34:	f7ff f9a2 	bl	827c <cmd_complete>
    8f38:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    8f3a:	4628      	mov	r0, r5
    8f3c:	f009 ff2e 	bl	12d9c <ll_rl_enable>
    8f40:	e5e5      	b.n	8b0e <hci_cmd_handle+0x50e>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    8f42:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    8f44:	8818      	ldrh	r0, [r3, #0]
    8f46:	f009 ff3b 	bl	12dc0 <ll_rl_timeout_set>
    8f4a:	f7ff bbee 	b.w	872a <hci_cmd_handle+0x12a>
    8f4e:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    8f50:	79c1      	ldrb	r1, [r0, #7]
    8f52:	f009 ff3d 	bl	12dd0 <ll_priv_mode_set>
    8f56:	e5c6      	b.n	8ae6 <hci_cmd_handle+0x4e6>
	rp = cmd_complete(evt, sizeof(*rp));
    8f58:	2103      	movs	r1, #3
    8f5a:	a80d      	add	r0, sp, #52	; 0x34
    8f5c:	f7ff f98e 	bl	827c <cmd_complete>
	rp->status = 0x00;
    8f60:	4601      	mov	r1, r0
    8f62:	2300      	movs	r3, #0
    8f64:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    8f68:	3001      	adds	r0, #1
    8f6a:	f7fe fed1 	bl	7d10 <ll_tx_pwr_get>
    8f6e:	f7ff bbbc 	b.w	86ea <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8f72:	210d      	movs	r1, #13
    8f74:	a80d      	add	r0, sp, #52	; 0x34
    8f76:	f7ff f981 	bl	827c <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    8f7a:	2202      	movs	r2, #2
    8f7c:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    8f7e:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    8f80:	2201      	movs	r2, #1
    8f82:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8f84:	220c      	movs	r2, #12
	rp->status = 0x00;
    8f86:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8f88:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    8f8a:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    8f8c:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    8f8e:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    8f90:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    8f92:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8f94:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    8f96:	7242      	strb	r2, [r0, #9]
    8f98:	7283      	strb	r3, [r0, #10]
    8f9a:	72c3      	strb	r3, [r0, #11]
    8f9c:	7303      	strb	r3, [r0, #12]
    8f9e:	f7ff bba4 	b.w	86ea <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8fa2:	2141      	movs	r1, #65	; 0x41
    8fa4:	a80d      	add	r0, sp, #52	; 0x34
    8fa6:	f7ff f969 	bl	827c <cmd_complete>
	rp->status = 0x00;
    8faa:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8fac:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8fae:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    8fb0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8fb4:	f7f8 fe60 	bl	1c78 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    8fb8:	7863      	ldrb	r3, [r4, #1]
    8fba:	f063 0358 	orn	r3, r3, #88	; 0x58
    8fbe:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    8fc0:	78a3      	ldrb	r3, [r4, #2]
    8fc2:	f043 0303 	orr.w	r3, r3, #3
    8fc6:	70a3      	strb	r3, [r4, #2]
    8fc8:	f7ff bb8f 	b.w	86ea <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8fcc:	2109      	movs	r1, #9
    8fce:	a80d      	add	r0, sp, #52	; 0x34
    8fd0:	f7ff f954 	bl	827c <cmd_complete>
	rp->status = 0x00;
    8fd4:	2100      	movs	r1, #0
    8fd6:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8fda:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    8fdc:	f7f8 fe4c 	bl	1c78 <memset>
    8fe0:	f7ff bb83 	b.w	86ea <hci_cmd_handle+0xea>
	const char build_info[] = HCI_VS_BUILD_INFO;
    8fe4:	4b5c      	ldr	r3, [pc, #368]	; (9158 <hci_cmd_handle+0xb58>)
    8fe6:	aa0e      	add	r2, sp, #56	; 0x38
    8fe8:	f103 0628 	add.w	r6, r3, #40	; 0x28
    8fec:	4615      	mov	r5, r2
    8fee:	6818      	ldr	r0, [r3, #0]
    8ff0:	6859      	ldr	r1, [r3, #4]
    8ff2:	4614      	mov	r4, r2
    8ff4:	c403      	stmia	r4!, {r0, r1}
    8ff6:	3308      	adds	r3, #8
    8ff8:	42b3      	cmp	r3, r6
    8ffa:	4622      	mov	r2, r4
    8ffc:	d1f7      	bne.n	8fee <hci_cmd_handle+0x9ee>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    8ffe:	2129      	movs	r1, #41	; 0x29
    9000:	a80d      	add	r0, sp, #52	; 0x34
    9002:	f7ff f93b 	bl	827c <cmd_complete>
	rp->status = 0x00;
    9006:	2300      	movs	r3, #0
    9008:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    900c:	2228      	movs	r2, #40	; 0x28
    900e:	4629      	mov	r1, r5
    9010:	e597      	b.n	8b42 <hci_cmd_handle+0x542>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    9012:	68a1      	ldr	r1, [r4, #8]
    9014:	2000      	movs	r0, #0
    9016:	f7fe fe5f 	bl	7cd8 <ll_addr_set>
    901a:	f7ff bb86 	b.w	872a <hci_cmd_handle+0x12a>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    901e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9022:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    9026:	3201      	adds	r2, #1
    9028:	d106      	bne.n	9038 <hci_cmd_handle+0xa38>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    902a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    902e:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9032:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9034:	4293      	cmp	r3, r2
    9036:	d020      	beq.n	907a <hci_cmd_handle+0xa7a>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    9038:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    903c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9040:	07db      	lsls	r3, r3, #31
    9042:	d51a      	bpl.n	907a <hci_cmd_handle+0xa7a>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    9044:	2118      	movs	r1, #24
    9046:	a80d      	add	r0, sp, #52	; 0x34
    9048:	f7ff f918 	bl	827c <cmd_complete>
		rp->status = 0x00;
    904c:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    904e:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    9050:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    9052:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    9054:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    9056:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    905a:	1ca1      	adds	r1, r4, #2
    905c:	f7ff f8ca 	bl	81f4 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    9060:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    9064:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    9066:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    906a:	f063 033f 	orn	r3, r3, #63	; 0x3f
    906e:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    9070:	2210      	movs	r2, #16
    9072:	4631      	mov	r1, r6
    9074:	f104 0008 	add.w	r0, r4, #8
    9078:	e7b0      	b.n	8fdc <hci_cmd_handle+0x9dc>
	rp = cmd_complete(evt, sizeof(*rp));
    907a:	2102      	movs	r1, #2
    907c:	a80d      	add	r0, sp, #52	; 0x34
    907e:	f7ff f8fd 	bl	827c <cmd_complete>
	rp->status = 0x00;
    9082:	2300      	movs	r3, #0
    9084:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    9086:	7043      	strb	r3, [r0, #1]
    9088:	f7ff bb2f 	b.w	86ea <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    908c:	2121      	movs	r1, #33	; 0x21
    908e:	a80d      	add	r0, sp, #52	; 0x34
    9090:	f7ff f8f4 	bl	827c <cmd_complete>
	rp->status = 0x00;
    9094:	4603      	mov	r3, r0
    9096:	2200      	movs	r2, #0
    9098:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    909c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    90a0:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    90a2:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    90a6:	3101      	adds	r1, #1
    90a8:	d04b      	beq.n	9142 <hci_cmd_handle+0xb42>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    90aa:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    90ae:	3101      	adds	r1, #1
    90b0:	d047      	beq.n	9142 <hci_cmd_handle+0xb42>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    90b2:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    90b6:	3101      	adds	r1, #1
    90b8:	d043      	beq.n	9142 <hci_cmd_handle+0xb42>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    90ba:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    90be:	3101      	adds	r1, #1
    90c0:	d03f      	beq.n	9142 <hci_cmd_handle+0xb42>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    90c2:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    90c6:	4619      	mov	r1, r3
    90c8:	f7ff f894 	bl	81f4 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    90cc:	1d61      	adds	r1, r4, #5
    90ce:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    90d2:	f7ff f88f 	bl	81f4 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    90d6:	f104 0109 	add.w	r1, r4, #9
    90da:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    90de:	f7ff f889 	bl	81f4 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    90e2:	f104 010d 	add.w	r1, r4, #13
    90e6:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    90ea:	f7ff f883 	bl	81f4 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    90ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    90f2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    90f6:	3301      	adds	r3, #1
    90f8:	f104 0311 	add.w	r3, r4, #17
    90fc:	d027      	beq.n	914e <hci_cmd_handle+0xb4e>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    90fe:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9102:	3101      	adds	r1, #1
    9104:	d023      	beq.n	914e <hci_cmd_handle+0xb4e>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9106:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    910a:	3101      	adds	r1, #1
    910c:	d01f      	beq.n	914e <hci_cmd_handle+0xb4e>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    910e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9112:	3101      	adds	r1, #1
    9114:	d01b      	beq.n	914e <hci_cmd_handle+0xb4e>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    9116:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    911a:	4619      	mov	r1, r3
    911c:	f7ff f86a 	bl	81f4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    9120:	f104 0115 	add.w	r1, r4, #21
    9124:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    9128:	f7ff f864 	bl	81f4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    912c:	f104 0119 	add.w	r1, r4, #25
    9130:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    9134:	f7ff f85e 	bl	81f4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    9138:	f104 011d 	add.w	r1, r4, #29
    913c:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    9140:	e52e      	b.n	8ba0 <hci_cmd_handle+0x5a0>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    9142:	2210      	movs	r2, #16
    9144:	2100      	movs	r1, #0
    9146:	4618      	mov	r0, r3
    9148:	f7f8 fd96 	bl	1c78 <memset>
    914c:	e7cf      	b.n	90ee <hci_cmd_handle+0xaee>
		memset(rp->er, 0x00, sizeof(rp->er));
    914e:	2210      	movs	r2, #16
    9150:	2100      	movs	r1, #0
    9152:	4618      	mov	r0, r3
    9154:	e742      	b.n	8fdc <hci_cmd_handle+0x9dc>
    9156:	bf00      	nop
    9158:	00017c2d 	.word	0x00017c2d

0000915c <hci_acl_handle>:
{
    915c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    9160:	2300      	movs	r3, #0
    9162:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    9164:	8983      	ldrh	r3, [r0, #12]
    9166:	2b03      	cmp	r3, #3
{
    9168:	4606      	mov	r6, r0
    916a:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    916c:	d80d      	bhi.n	918a <hci_acl_handle+0x2e>
		BT_ERR("No HCI ACL header");
    916e:	4a3b      	ldr	r2, [pc, #236]	; (925c <hci_acl_handle+0x100>)
    9170:	4b3b      	ldr	r3, [pc, #236]	; (9260 <hci_acl_handle+0x104>)
    9172:	9201      	str	r2, [sp, #4]
    9174:	9200      	str	r2, [sp, #0]
    9176:	681c      	ldr	r4, [r3, #0]
    9178:	493a      	ldr	r1, [pc, #232]	; (9264 <hci_acl_handle+0x108>)
    917a:	4b3b      	ldr	r3, [pc, #236]	; (9268 <hci_acl_handle+0x10c>)
    917c:	483b      	ldr	r0, [pc, #236]	; (926c <hci_acl_handle+0x110>)
		BT_ERR("Invalid HCI ACL packet length");
    917e:	47a0      	blx	r4
		return -EINVAL;
    9180:	f06f 0015 	mvn.w	r0, #21
}
    9184:	b003      	add	sp, #12
    9186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    918a:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    918e:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    9190:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    9192:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    9194:	f00a fda3 	bl	13cde <net_buf_simple_pull>
	if (buf->len < len) {
    9198:	89b3      	ldrh	r3, [r6, #12]
    919a:	42bb      	cmp	r3, r7
    919c:	d208      	bcs.n	91b0 <hci_acl_handle+0x54>
		BT_ERR("Invalid HCI ACL packet length");
    919e:	4a2f      	ldr	r2, [pc, #188]	; (925c <hci_acl_handle+0x100>)
    91a0:	4b2f      	ldr	r3, [pc, #188]	; (9260 <hci_acl_handle+0x104>)
    91a2:	9201      	str	r2, [sp, #4]
    91a4:	9200      	str	r2, [sp, #0]
    91a6:	681c      	ldr	r4, [r3, #0]
    91a8:	492e      	ldr	r1, [pc, #184]	; (9264 <hci_acl_handle+0x108>)
    91aa:	4b2f      	ldr	r3, [pc, #188]	; (9268 <hci_acl_handle+0x10c>)
    91ac:	4830      	ldr	r0, [pc, #192]	; (9270 <hci_acl_handle+0x114>)
    91ae:	e7e6      	b.n	917e <hci_acl_handle+0x22>
	node_tx = ll_tx_mem_acquire();
    91b0:	f007 feac 	bl	10f0c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    91b4:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    91b8:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    91ba:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    91be:	bb30      	cbnz	r0, 920e <hci_acl_handle+0xb2>
		BT_ERR("Tx Buffer Overflow");
    91c0:	4a26      	ldr	r2, [pc, #152]	; (925c <hci_acl_handle+0x100>)
    91c2:	4b27      	ldr	r3, [pc, #156]	; (9260 <hci_acl_handle+0x104>)
    91c4:	9201      	str	r2, [sp, #4]
    91c6:	9200      	str	r2, [sp, #0]
    91c8:	681c      	ldr	r4, [r3, #0]
    91ca:	4926      	ldr	r1, [pc, #152]	; (9264 <hci_acl_handle+0x108>)
    91cc:	4b26      	ldr	r3, [pc, #152]	; (9268 <hci_acl_handle+0x10c>)
    91ce:	4829      	ldr	r0, [pc, #164]	; (9274 <hci_acl_handle+0x118>)
    91d0:	47a0      	blx	r4
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    91d2:	4b29      	ldr	r3, [pc, #164]	; (9278 <hci_acl_handle+0x11c>)
    91d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    91d8:	2300      	movs	r3, #0
    91da:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    91de:	4313      	orrs	r3, r2
    91e0:	d012      	beq.n	9208 <hci_acl_handle+0xac>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    91e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    91e6:	2001      	movs	r0, #1
    91e8:	f7fa fcac 	bl	3b44 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    91ec:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    91ee:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    91f2:	211a      	movs	r1, #26
    91f4:	f7ff f807 	bl	8206 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    91f8:	f8d8 0000 	ldr.w	r0, [r8]
    91fc:	2101      	movs	r1, #1
    91fe:	3008      	adds	r0, #8
    9200:	f00a fd4e 	bl	13ca0 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    9204:	2301      	movs	r3, #1
    9206:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    9208:	f06f 0036 	mvn.w	r0, #54	; 0x36
    920c:	e7ba      	b.n	9184 <hci_acl_handle+0x28>
    920e:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    9210:	f1b9 0f00 	cmp.w	r9, #0
    9214:	d002      	beq.n	921c <hci_acl_handle+0xc0>
    9216:	f1b9 0f02 	cmp.w	r9, #2
    921a:	d11c      	bne.n	9256 <hci_acl_handle+0xfa>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    921c:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    921e:	f362 0301 	bfi	r3, r2, #0, #2
    9222:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    9224:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    9226:	68b1      	ldr	r1, [r6, #8]
    9228:	463a      	mov	r2, r7
    922a:	1de0      	adds	r0, r4, #7
    922c:	f7f8 fcf8 	bl	1c20 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    9230:	4621      	mov	r1, r4
    9232:	4628      	mov	r0, r5
    9234:	f007 fe76 	bl	10f24 <ll_tx_mem_enqueue>
    9238:	2800      	cmp	r0, #0
    923a:	d0a3      	beq.n	9184 <hci_acl_handle+0x28>
		BT_ERR("Invalid Tx Enqueue");
    923c:	4a07      	ldr	r2, [pc, #28]	; (925c <hci_acl_handle+0x100>)
    923e:	4b08      	ldr	r3, [pc, #32]	; (9260 <hci_acl_handle+0x104>)
    9240:	9201      	str	r2, [sp, #4]
    9242:	9200      	str	r2, [sp, #0]
    9244:	681d      	ldr	r5, [r3, #0]
    9246:	4907      	ldr	r1, [pc, #28]	; (9264 <hci_acl_handle+0x108>)
    9248:	4b07      	ldr	r3, [pc, #28]	; (9268 <hci_acl_handle+0x10c>)
    924a:	480c      	ldr	r0, [pc, #48]	; (927c <hci_acl_handle+0x120>)
    924c:	47a8      	blx	r5
		ll_tx_mem_release(node_tx);
    924e:	4620      	mov	r0, r4
    9250:	f007 fe62 	bl	10f18 <ll_tx_mem_release>
    9254:	e794      	b.n	9180 <hci_acl_handle+0x24>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9256:	2201      	movs	r2, #1
    9258:	e7e1      	b.n	921e <hci_acl_handle+0xc2>
    925a:	bf00      	nop
    925c:	000159e9 	.word	0x000159e9
    9260:	20003ad4 	.word	0x20003ad4
    9264:	00016791 	.word	0x00016791
    9268:	00017a7d 	.word	0x00017a7d
    926c:	00017b1b 	.word	0x00017b1b
    9270:	00017b3d 	.word	0x00017b3d
    9274:	00017b6b 	.word	0x00017b6b
    9278:	20003da8 	.word	0x20003da8
    927c:	00017b8e 	.word	0x00017b8e

00009280 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    9280:	7a03      	ldrb	r3, [r0, #8]
    9282:	f003 0303 	and.w	r3, r3, #3
    9286:	3b01      	subs	r3, #1
    9288:	2b01      	cmp	r3, #1
{
    928a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    928c:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    928e:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    9290:	d81c      	bhi.n	92cc <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    9292:	f101 0608 	add.w	r6, r1, #8
    9296:	4630      	mov	r0, r6
    9298:	2104      	movs	r1, #4
    929a:	f00a fd01 	bl	13ca0 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    929e:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    92a0:	7a61      	ldrb	r1, [r4, #9]
    92a2:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    92a4:	f003 0303 	and.w	r3, r3, #3
    92a8:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    92aa:	bf0c      	ite	eq
    92ac:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    92b0:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    92b4:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    92b6:	4630      	mov	r0, r6
    92b8:	f00a fcf2 	bl	13ca0 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    92bc:	7a62      	ldrb	r2, [r4, #9]
    92be:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    92c2:	b002      	add	sp, #8
    92c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    92c8:	f7f8 bcaa 	b.w	1c20 <memcpy>
		LL_ASSERT(0);
    92cc:	4a07      	ldr	r2, [pc, #28]	; (92ec <hci_acl_encode+0x6c>)
    92ce:	4b08      	ldr	r3, [pc, #32]	; (92f0 <hci_acl_encode+0x70>)
    92d0:	9201      	str	r2, [sp, #4]
    92d2:	9200      	str	r2, [sp, #0]
    92d4:	681c      	ldr	r4, [r3, #0]
    92d6:	4907      	ldr	r1, [pc, #28]	; (92f4 <hci_acl_encode+0x74>)
    92d8:	4b07      	ldr	r3, [pc, #28]	; (92f8 <hci_acl_encode+0x78>)
    92da:	4808      	ldr	r0, [pc, #32]	; (92fc <hci_acl_encode+0x7c>)
    92dc:	47a0      	blx	r4
    92de:	4040      	eors	r0, r0
    92e0:	f380 8811 	msr	BASEPRI, r0
    92e4:	f04f 0004 	mov.w	r0, #4
    92e8:	df02      	svc	2
    92ea:	bf00      	nop
    92ec:	000159e9 	.word	0x000159e9
    92f0:	20003ad4 	.word	0x20003ad4
    92f4:	00016791 	.word	0x00016791
    92f8:	00017b0c 	.word	0x00017b0c
    92fc:	000166ef 	.word	0x000166ef

00009300 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    9300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9304:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    9306:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9308:	2b01      	cmp	r3, #1
{
    930a:	b093      	sub	sp, #76	; 0x4c
    930c:	4604      	mov	r4, r0
    930e:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    9310:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9314:	f000 82a5 	beq.w	9862 <hci_evt_encode+0x562>
	switch (node_rx->hdr.type) {
    9318:	3b02      	subs	r3, #2
    931a:	2b0a      	cmp	r3, #10
    931c:	f200 8298 	bhi.w	9850 <hci_evt_encode+0x550>
    9320:	e8df f013 	tbh	[pc, r3, lsl #1]
    9324:	0134000b 	.word	0x0134000b
    9328:	013c013a 	.word	0x013c013a
    932c:	01b80183 	.word	0x01b80183
    9330:	01fb01d6 	.word	0x01fb01d6
    9334:	02280213 	.word	0x02280213
    9338:	0243      	.short	0x0243
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    933a:	2301      	movs	r3, #1
    933c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    9340:	2303      	movs	r3, #3
    9342:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    9346:	23ff      	movs	r3, #255	; 0xff
    9348:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    934c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    9350:	2302      	movs	r3, #2
    9352:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9356:	7a43      	ldrb	r3, [r0, #9]
    9358:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    935a:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    935c:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    9360:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9362:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    9366:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    9368:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    936a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (adv->tx_addr) {
    936e:	d505      	bpl.n	937c <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    9370:	f104 030a 	add.w	r3, r4, #10
    9374:	464a      	mov	r2, r9
    9376:	4608      	mov	r0, r1
    9378:	f009 fcb6 	bl	12ce8 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    937c:	4bb8      	ldr	r3, [pc, #736]	; (9660 <hci_evt_encode+0x360>)
    937e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9382:	2200      	movs	r2, #0
    9384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9388:	4313      	orrs	r3, r2
    938a:	f000 80b9 	beq.w	9500 <hci_evt_encode+0x200>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    938e:	7a63      	ldrb	r3, [r4, #9]
    9390:	4423      	add	r3, r4
    9392:	f893 a00c 	ldrb.w	sl, [r3, #12]
    9396:	4bb3      	ldr	r3, [pc, #716]	; (9664 <hci_evt_encode+0x364>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    9398:	e9d3 2300 	ldrd	r2, r3, [r3]
    939c:	f1ba 0f00 	cmp.w	sl, #0
    93a0:	d13d      	bne.n	941e <hci_evt_encode+0x11e>
    93a2:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    93a6:	2300      	movs	r3, #0
    93a8:	4313      	orrs	r3, r2
    93aa:	f000 80a9 	beq.w	9500 <hci_evt_encode+0x200>
	if (dup_count >= 0) {
    93ae:	4bae      	ldr	r3, [pc, #696]	; (9668 <hci_evt_encode+0x368>)
    93b0:	681a      	ldr	r2, [r3, #0]
    93b2:	2a00      	cmp	r2, #0
    93b4:	4698      	mov	r8, r3
    93b6:	db54      	blt.n	9462 <hci_evt_encode+0x162>
    93b8:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 9690 <hci_evt_encode+0x390>
    93bc:	2600      	movs	r6, #0
    93be:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    93c2:	f8d8 2000 	ldr.w	r2, [r8]
    93c6:	4296      	cmp	r6, r2
    93c8:	db2c      	blt.n	9424 <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    93ca:	4ea8      	ldr	r6, [pc, #672]	; (966c <hci_evt_encode+0x36c>)
    93cc:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 9670 <hci_evt_encode+0x370>
    93d0:	6830      	ldr	r0, [r6, #0]
    93d2:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    93d6:	4619      	mov	r1, r3
    93d8:	2206      	movs	r2, #6
    93da:	3002      	adds	r0, #2
    93dc:	f7f8 fc20 	bl	1c20 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    93e0:	6832      	ldr	r2, [r6, #0]
    93e2:	7a23      	ldrb	r3, [r4, #8]
    93e4:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    93e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    93ec:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    93ee:	7a23      	ldrb	r3, [r4, #8]
    93f0:	f003 010f 	and.w	r1, r3, #15
    93f4:	2301      	movs	r3, #1
    93f6:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    93f8:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    93fc:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9400:	290f      	cmp	r1, #15
			dup_count++;
    9402:	bfd5      	itete	le
    9404:	3101      	addle	r1, #1
			dup_curr++;
    9406:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    9408:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    940a:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    940c:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    940e:	bfd8      	it	le
    9410:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9414:	2a10      	cmp	r2, #16
    9416:	d124      	bne.n	9462 <hci_evt_encode+0x162>
			dup_curr = 0;
    9418:	2200      	movs	r2, #0
    941a:	6032      	str	r2, [r6, #0]
    941c:	e021      	b.n	9462 <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    941e:	f002 020b 	and.w	r2, r2, #11
    9422:	e7c0      	b.n	93a6 <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    9424:	4618      	mov	r0, r3
    9426:	2206      	movs	r2, #6
    9428:	4659      	mov	r1, fp
    942a:	9307      	str	r3, [sp, #28]
    942c:	f7f8 fbe3 	bl	1bf6 <memcmp>
    9430:	9b07      	ldr	r3, [sp, #28]
    9432:	bb00      	cbnz	r0, 9476 <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    9434:	7a21      	ldrb	r1, [r4, #8]
    9436:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    943a:	460a      	mov	r2, r1
    943c:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    9440:	4281      	cmp	r1, r0
    9442:	d118      	bne.n	9476 <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    9444:	488a      	ldr	r0, [pc, #552]	; (9670 <hci_evt_encode+0x370>)
    9446:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    944a:	f002 020f 	and.w	r2, r2, #15
    944e:	fa23 f102 	lsr.w	r1, r3, r2
    9452:	07c9      	lsls	r1, r1, #31
    9454:	d454      	bmi.n	9500 <hci_evt_encode+0x200>
				dup_filter[i].mask |= BIT(adv->type);
    9456:	2101      	movs	r1, #1
    9458:	fa01 f202 	lsl.w	r2, r1, r2
    945c:	4313      	orrs	r3, r2
    945e:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    9462:	f894 b008 	ldrb.w	fp, [r4, #8]
    9466:	7a63      	ldrb	r3, [r4, #9]
    9468:	f00b 0b0f 	and.w	fp, fp, #15
    946c:	f1bb 0f01 	cmp.w	fp, #1
    9470:	d105      	bne.n	947e <hci_evt_encode+0x17e>
		data_len = 0;
    9472:	2600      	movs	r6, #0
    9474:	e005      	b.n	9482 <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    9476:	3601      	adds	r6, #1
    9478:	f10b 0b08 	add.w	fp, fp, #8
    947c:	e7a1      	b.n	93c2 <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    947e:	1f9e      	subs	r6, r3, #6
    9480:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9482:	4423      	add	r3, r4
    9484:	f893 800a 	ldrb.w	r8, [r3, #10]
    9488:	f1c8 0800 	rsb	r8, r8, #0
    948c:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    9490:	f1ba 0f00 	cmp.w	sl, #0
    9494:	d041      	beq.n	951a <hci_evt_encode+0x21a>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    9496:	f1bb 0f01 	cmp.w	fp, #1
    949a:	d00e      	beq.n	94ba <hci_evt_encode+0x1ba>
    949c:	4a75      	ldr	r2, [pc, #468]	; (9674 <hci_evt_encode+0x374>)
    949e:	4b76      	ldr	r3, [pc, #472]	; (9678 <hci_evt_encode+0x378>)
    94a0:	9201      	str	r2, [sp, #4]
    94a2:	9200      	str	r2, [sp, #0]
    94a4:	681c      	ldr	r4, [r3, #0]
    94a6:	4975      	ldr	r1, [pc, #468]	; (967c <hci_evt_encode+0x37c>)
    94a8:	4b75      	ldr	r3, [pc, #468]	; (9680 <hci_evt_encode+0x380>)
    94aa:	4876      	ldr	r0, [pc, #472]	; (9684 <hci_evt_encode+0x384>)
		LL_ASSERT(0);
    94ac:	47a0      	blx	r4
    94ae:	4040      	eors	r0, r0
    94b0:	f380 8811 	msr	BASEPRI, r0
    94b4:	f04f 0004 	mov.w	r0, #4
    94b8:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    94ba:	2211      	movs	r2, #17
    94bc:	210b      	movs	r1, #11
    94be:	4628      	mov	r0, r5
    94c0:	f7fe fec6 	bl	8250 <meta_evt>
		drp->num_reports = 1;
    94c4:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    94c8:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    94cc:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    94ce:	f009 fae1 	bl	12a94 <ll_rl_size_get>
    94d2:	4581      	cmp	r9, r0
    94d4:	f105 0003 	add.w	r0, r5, #3
    94d8:	d215      	bcs.n	9506 <hci_evt_encode+0x206>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    94da:	4602      	mov	r2, r0
    94dc:	1ca9      	adds	r1, r5, #2
    94de:	4648      	mov	r0, r9
    94e0:	f009 f86c 	bl	125bc <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    94e4:	78ab      	ldrb	r3, [r5, #2]
    94e6:	3302      	adds	r3, #2
    94e8:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    94ea:	2301      	movs	r3, #1
    94ec:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    94ee:	2206      	movs	r2, #6
    94f0:	f107 0108 	add.w	r1, r7, #8
    94f4:	f105 000a 	add.w	r0, r5, #10
    94f8:	f7f8 fb92 	bl	1c20 <memcpy>
		dir_info->rssi = rssi;
    94fc:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    9500:	b013      	add	sp, #76	; 0x4c
    9502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    9506:	7a23      	ldrb	r3, [r4, #8]
    9508:	f3c3 1380 	ubfx	r3, r3, #6, #1
    950c:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    950e:	2206      	movs	r2, #6
    9510:	f104 010a 	add.w	r1, r4, #10
    9514:	f7f8 fb84 	bl	1c20 <memcpy>
    9518:	e7e7      	b.n	94ea <hci_evt_encode+0x1ea>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    951a:	f106 020b 	add.w	r2, r6, #11
    951e:	b2d2      	uxtb	r2, r2
    9520:	2102      	movs	r1, #2
    9522:	4628      	mov	r0, r5
    9524:	f7fe fe94 	bl	8250 <meta_evt>
	sep->num_reports = 1;
    9528:	2301      	movs	r3, #1
    952a:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    952c:	7a23      	ldrb	r3, [r4, #8]
    952e:	aa12      	add	r2, sp, #72	; 0x48
    9530:	f003 030f 	and.w	r3, r3, #15
    9534:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    9536:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    9538:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    953c:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    953e:	7a63      	ldrb	r3, [r4, #9]
    9540:	4423      	add	r3, r4
    9542:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    9546:	f009 faa5 	bl	12a94 <ll_rl_size_get>
    954a:	4581      	cmp	r9, r0
    954c:	f105 0003 	add.w	r0, r5, #3
    9550:	d212      	bcs.n	9578 <hci_evt_encode+0x278>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    9552:	4602      	mov	r2, r0
    9554:	1ca9      	adds	r1, r5, #2
    9556:	4648      	mov	r0, r9
    9558:	f009 f830 	bl	125bc <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    955c:	78ab      	ldrb	r3, [r5, #2]
    955e:	3302      	adds	r3, #2
    9560:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    9562:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    9564:	350a      	adds	r5, #10
    9566:	4632      	mov	r2, r6
    9568:	f107 0108 	add.w	r1, r7, #8
    956c:	4628      	mov	r0, r5
    956e:	f7f8 fb57 	bl	1c20 <memcpy>
	*prssi = rssi;
    9572:	f805 8006 	strb.w	r8, [r5, r6]
    9576:	e7c3      	b.n	9500 <hci_evt_encode+0x200>
		adv_info->addr.type = adv->tx_addr;
    9578:	7a23      	ldrb	r3, [r4, #8]
    957a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    957e:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    9580:	2206      	movs	r2, #6
    9582:	f104 010a 	add.w	r1, r4, #10
    9586:	f7f8 fb4b 	bl	1c20 <memcpy>
    958a:	e7ea      	b.n	9562 <hci_evt_encode+0x262>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    958c:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    958e:	4621      	mov	r1, r4
    9590:	4638      	mov	r0, r7
    9592:	f7fe ffb5 	bl	8500 <le_adv_ext_report.isra.71>
    9596:	e7b3      	b.n	9500 <hci_evt_encode+0x200>
    9598:	2204      	movs	r2, #4
    959a:	e7f8      	b.n	958e <hci_evt_encode+0x28e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    959c:	4b30      	ldr	r3, [pc, #192]	; (9660 <hci_evt_encode+0x360>)
    959e:	e9d3 2300 	ldrd	r2, r3, [r3]
    95a2:	2200      	movs	r2, #0
    95a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    95a8:	4313      	orrs	r3, r2
    95aa:	f100 060a 	add.w	r6, r0, #10
    95ae:	d007      	beq.n	95c0 <hci_evt_encode+0x2c0>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    95b0:	4b2c      	ldr	r3, [pc, #176]	; (9664 <hci_evt_encode+0x364>)
    95b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    95b6:	2300      	movs	r3, #0
    95b8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    95bc:	4313      	orrs	r3, r2
    95be:	d123      	bne.n	9608 <hci_evt_encode+0x308>
		addr.type = adv->tx_addr;
    95c0:	7a23      	ldrb	r3, [r4, #8]
    95c2:	ad12      	add	r5, sp, #72	; 0x48
    95c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    95c8:	2206      	movs	r2, #6
    95ca:	4631      	mov	r1, r6
    95cc:	f10d 0025 	add.w	r0, sp, #37	; 0x25
		addr.type = adv->tx_addr;
    95d0:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    95d4:	f7f8 fb24 	bl	1c20 <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    95d8:	7a63      	ldrb	r3, [r4, #9]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    95da:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    95dc:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    95de:	4631      	mov	r1, r6
    95e0:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    95e2:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    95e4:	f7fe ff50 	bl	8488 <bt_addr_le_to_str.constprop.76>
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    95e8:	4a22      	ldr	r2, [pc, #136]	; (9674 <hci_evt_encode+0x374>)
    95ea:	9204      	str	r2, [sp, #16]
    95ec:	2300      	movs	r3, #0
    95ee:	e88d 000c 	stmia.w	sp, {r2, r3}
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    95f2:	4264      	negs	r4, r4
    95f4:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    95f6:	4b20      	ldr	r3, [pc, #128]	; (9678 <hci_evt_encode+0x378>)
    95f8:	9403      	str	r4, [sp, #12]
    95fa:	9602      	str	r6, [sp, #8]
    95fc:	681c      	ldr	r4, [r3, #0]
    95fe:	491f      	ldr	r1, [pc, #124]	; (967c <hci_evt_encode+0x37c>)
    9600:	4b21      	ldr	r3, [pc, #132]	; (9688 <hci_evt_encode+0x388>)
    9602:	4822      	ldr	r0, [pc, #136]	; (968c <hci_evt_encode+0x38c>)
    9604:	47a0      	blx	r4
    9606:	e77b      	b.n	9500 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    9608:	2208      	movs	r2, #8
    960a:	2113      	movs	r1, #19
    960c:	4628      	mov	r0, r5
    960e:	f7fe fe1f 	bl	8250 <meta_evt>
	sep->handle = 0;
    9612:	2300      	movs	r3, #0
    9614:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    9616:	7a23      	ldrb	r3, [r4, #8]
    9618:	f3c3 1380 	ubfx	r3, r3, #6, #1
    961c:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    961e:	2206      	movs	r2, #6
    9620:	4631      	mov	r1, r6
    9622:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    9624:	f7f8 fafc 	bl	1c20 <memcpy>
    9628:	e76a      	b.n	9500 <hci_evt_encode+0x200>
			le_conn_complete(cc->status, cc, handle, buf);
    962a:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    962c:	b93f      	cbnz	r7, 963e <hci_evt_encode+0x33e>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    962e:	f100 0314 	add.w	r3, r0, #20
    9632:	f100 010e 	add.w	r1, r0, #14
    9636:	22ff      	movs	r2, #255	; 0xff
    9638:	7b40      	ldrb	r0, [r0, #13]
    963a:	f009 fb55 	bl	12ce8 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    963e:	4b08      	ldr	r3, [pc, #32]	; (9660 <hci_evt_encode+0x360>)
    9640:	e9d3 2300 	ldrd	r2, r3, [r3]
    9644:	2200      	movs	r2, #0
    9646:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    964a:	4313      	orrs	r3, r2
    964c:	f43f af58 	beq.w	9500 <hci_evt_encode+0x200>
    9650:	462b      	mov	r3, r5
    9652:	4632      	mov	r2, r6
    9654:	f104 010b 	add.w	r1, r4, #11
    9658:	4638      	mov	r0, r7
    965a:	f7fe fe7f 	bl	835c <le_conn_complete.part.44>
    965e:	e74f      	b.n	9500 <hci_evt_encode+0x200>
    9660:	20003da8 	.word	0x20003da8
    9664:	20003db0 	.word	0x20003db0
    9668:	20000860 	.word	0x20000860
    966c:	20000864 	.word	0x20000864
    9670:	20000868 	.word	0x20000868
    9674:	000159e9 	.word	0x000159e9
    9678:	20003ad4 	.word	0x20003ad4
    967c:	00016791 	.word	0x00016791
    9680:	00017a8c 	.word	0x00017a8c
    9684:	00017c55 	.word	0x00017c55
    9688:	00017ab4 	.word	0x00017ab4
    968c:	00017c9b 	.word	0x00017c9b
    9690:	2000086a 	.word	0x2000086a
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    9694:	4bb2      	ldr	r3, [pc, #712]	; (9960 <hci_evt_encode+0x660>)
    9696:	e9d3 2300 	ldrd	r2, r3, [r3]
    969a:	2300      	movs	r3, #0
    969c:	f002 0210 	and.w	r2, r2, #16
    96a0:	4313      	orrs	r3, r2
    96a2:	f43f af2d 	beq.w	9500 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    96a6:	2204      	movs	r2, #4
    96a8:	2105      	movs	r1, #5
    96aa:	4628      	mov	r0, r5
    96ac:	f7fe fdab 	bl	8206 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    96b0:	2104      	movs	r1, #4
    96b2:	f105 0008 	add.w	r0, r5, #8
    96b6:	f00a faf3 	bl	13ca0 <net_buf_simple_add>
	ep->status = 0x00;
    96ba:	2300      	movs	r3, #0
	conn_count--;
    96bc:	4aa9      	ldr	r2, [pc, #676]	; (9964 <hci_evt_encode+0x664>)
	ep->status = 0x00;
    96be:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    96c0:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    96c4:	7a23      	ldrb	r3, [r4, #8]
    96c6:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    96c8:	6813      	ldr	r3, [r2, #0]
    96ca:	3b01      	subs	r3, #1
    96cc:	6013      	str	r3, [r2, #0]
    96ce:	e717      	b.n	9500 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    96d0:	4ba3      	ldr	r3, [pc, #652]	; (9960 <hci_evt_encode+0x660>)
    96d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    96d6:	2200      	movs	r2, #0
    96d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    96dc:	4313      	orrs	r3, r2
    96de:	f43f af0f 	beq.w	9500 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    96e2:	4ba1      	ldr	r3, [pc, #644]	; (9968 <hci_evt_encode+0x668>)
    96e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    96e8:	2300      	movs	r3, #0
    96ea:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    96ee:	4313      	orrs	r3, r2
    96f0:	f43f af06 	beq.w	9500 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    96f4:	2209      	movs	r2, #9
    96f6:	2103      	movs	r1, #3
    96f8:	4628      	mov	r0, r5
    96fa:	f7fe fda9 	bl	8250 <meta_evt>
	sep->status = radio_cu->status;
    96fe:	7ae3      	ldrb	r3, [r4, #11]
    9700:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    9702:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    9704:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    9708:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    970c:	89e3      	ldrh	r3, [r4, #14]
    970e:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    9712:	8a23      	ldrh	r3, [r4, #16]
    9714:	f8a0 3007 	strh.w	r3, [r0, #7]
    9718:	e6f2      	b.n	9500 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    971a:	4b91      	ldr	r3, [pc, #580]	; (9960 <hci_evt_encode+0x660>)
    971c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9720:	2200      	movs	r2, #0
    9722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    9726:	4313      	orrs	r3, r2
    9728:	f43f aeea 	beq.w	9500 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    972c:	2203      	movs	r2, #3
    972e:	2130      	movs	r1, #48	; 0x30
    9730:	4628      	mov	r0, r5
    9732:	f7fe fd68 	bl	8206 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9736:	2103      	movs	r1, #3
    9738:	f105 0008 	add.w	r0, r5, #8
    973c:	f00a fab0 	bl	13ca0 <net_buf_simple_add>
	ep->status = 0x00;
    9740:	2300      	movs	r3, #0
    9742:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9744:	f8a0 6001 	strh.w	r6, [r0, #1]
    9748:	e6da      	b.n	9500 <hci_evt_encode+0x200>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    974a:	4b88      	ldr	r3, [pc, #544]	; (996c <hci_evt_encode+0x66c>)
    974c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9750:	2300      	movs	r3, #0
    9752:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    9756:	4313      	orrs	r3, r2
    9758:	f43f aed2 	beq.w	9500 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    975c:	2202      	movs	r2, #2
    975e:	2157      	movs	r1, #87	; 0x57
    9760:	4628      	mov	r0, r5
    9762:	f7fe fd50 	bl	8206 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9766:	2102      	movs	r1, #2
    9768:	f105 0008 	add.w	r0, r5, #8
    976c:	f00a fa98 	bl	13ca0 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    9770:	8006      	strh	r6, [r0, #0]
    9772:	e6c5      	b.n	9500 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9774:	4b7a      	ldr	r3, [pc, #488]	; (9960 <hci_evt_encode+0x660>)
    9776:	e9d3 2300 	ldrd	r2, r3, [r3]
    977a:	2200      	movs	r2, #0
    977c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9780:	4313      	orrs	r3, r2
    9782:	f43f aebd 	beq.w	9500 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    9786:	4b78      	ldr	r3, [pc, #480]	; (9968 <hci_evt_encode+0x668>)
    9788:	e9d3 2300 	ldrd	r2, r3, [r3]
    978c:	2300      	movs	r3, #0
    978e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9792:	4313      	orrs	r3, r2
    9794:	f43f aeb4 	beq.w	9500 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    9798:	2203      	movs	r2, #3
    979a:	2114      	movs	r1, #20
    979c:	4628      	mov	r0, r5
    979e:	f7fe fd57 	bl	8250 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    97a2:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    97a4:	7ae3      	ldrb	r3, [r4, #11]
    97a6:	7083      	strb	r3, [r0, #2]
    97a8:	e6aa      	b.n	9500 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    97aa:	4b6d      	ldr	r3, [pc, #436]	; (9960 <hci_evt_encode+0x660>)
    97ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    97b0:	2200      	movs	r2, #0
    97b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    97b6:	4313      	orrs	r3, r2
    97b8:	d007      	beq.n	97ca <hci_evt_encode+0x4ca>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    97ba:	4b6b      	ldr	r3, [pc, #428]	; (9968 <hci_evt_encode+0x668>)
    97bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    97c0:	2300      	movs	r3, #0
    97c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    97c6:	4313      	orrs	r3, r2
    97c8:	d122      	bne.n	9810 <hci_evt_encode+0x510>
    97ca:	7b22      	ldrb	r2, [r4, #12]
    97cc:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    97ce:	4868      	ldr	r0, [pc, #416]	; (9970 <hci_evt_encode+0x670>)
    97d0:	2a00      	cmp	r2, #0
    97d2:	fa92 f3a2 	rbit	r3, r2
    97d6:	fab3 f383 	clz	r3, r3
    97da:	fa91 f2a1 	rbit	r2, r1
    97de:	bf08      	it	eq
    97e0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    97e4:	2900      	cmp	r1, #0
    97e6:	fab2 f282 	clz	r2, r2
    97ea:	bf08      	it	eq
    97ec:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    97f0:	1c51      	adds	r1, r2, #1
    97f2:	3301      	adds	r3, #1
    97f4:	4a5f      	ldr	r2, [pc, #380]	; (9974 <hci_evt_encode+0x674>)
    97f6:	9104      	str	r1, [sp, #16]
    97f8:	9205      	str	r2, [sp, #20]
    97fa:	9303      	str	r3, [sp, #12]
    97fc:	7ae3      	ldrb	r3, [r4, #11]
    97fe:	9302      	str	r3, [sp, #8]
    9800:	e88d 0044 	stmia.w	sp, {r2, r6}
    9804:	4b5c      	ldr	r3, [pc, #368]	; (9978 <hci_evt_encode+0x678>)
    9806:	495d      	ldr	r1, [pc, #372]	; (997c <hci_evt_encode+0x67c>)
    9808:	681c      	ldr	r4, [r3, #0]
    980a:	4b5d      	ldr	r3, [pc, #372]	; (9980 <hci_evt_encode+0x680>)
    980c:	47a0      	blx	r4
    980e:	e677      	b.n	9500 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    9810:	2205      	movs	r2, #5
    9812:	210c      	movs	r1, #12
    9814:	4628      	mov	r0, r5
    9816:	f7fe fd1b 	bl	8250 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    981a:	7ae3      	ldrb	r3, [r4, #11]
    981c:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    981e:	f8a0 6001 	strh.w	r6, [r0, #1]
    9822:	7b22      	ldrb	r2, [r4, #12]
    9824:	2a00      	cmp	r2, #0
    9826:	fa92 f3a2 	rbit	r3, r2
    982a:	fab3 f383 	clz	r3, r3
    982e:	bf08      	it	eq
    9830:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9834:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    9836:	70c3      	strb	r3, [r0, #3]
    9838:	7b62      	ldrb	r2, [r4, #13]
    983a:	fa92 f3a2 	rbit	r3, r2
    983e:	2a00      	cmp	r2, #0
    9840:	fab3 f383 	clz	r3, r3
    9844:	bf08      	it	eq
    9846:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    984a:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    984c:	7103      	strb	r3, [r0, #4]
    984e:	e657      	b.n	9500 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    9850:	4a48      	ldr	r2, [pc, #288]	; (9974 <hci_evt_encode+0x674>)
    9852:	4b49      	ldr	r3, [pc, #292]	; (9978 <hci_evt_encode+0x678>)
    9854:	9201      	str	r2, [sp, #4]
    9856:	9200      	str	r2, [sp, #0]
    9858:	681c      	ldr	r4, [r3, #0]
    985a:	4b4a      	ldr	r3, [pc, #296]	; (9984 <hci_evt_encode+0x684>)
    985c:	4947      	ldr	r1, [pc, #284]	; (997c <hci_evt_encode+0x67c>)
    985e:	484a      	ldr	r0, [pc, #296]	; (9988 <hci_evt_encode+0x688>)
    9860:	e624      	b.n	94ac <hci_evt_encode+0x1ac>
	switch (pdu_data->llctrl.opcode) {
    9862:	7ac3      	ldrb	r3, [r0, #11]
    9864:	3b03      	subs	r3, #3
    9866:	2b12      	cmp	r3, #18
    9868:	f200 80d2 	bhi.w	9a10 <hci_evt_encode+0x710>
    986c:	e8df f003 	tbb	[pc, r3]
    9870:	2fd0d00a 	.word	0x2fd0d00a
    9874:	d035d0bd 	.word	0xd035d0bd
    9878:	d05b3cd0 	.word	0xd05b3cd0
    987c:	d0d0d05f 	.word	0xd0d0d05f
    9880:	9dd0      	.short	0x9dd0
    9882:	9d          	.byte	0x9d
    9883:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9884:	4b36      	ldr	r3, [pc, #216]	; (9960 <hci_evt_encode+0x660>)
    9886:	e9d3 2300 	ldrd	r2, r3, [r3]
    988a:	2200      	movs	r2, #0
    988c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9890:	4313      	orrs	r3, r2
    9892:	f43f ae35 	beq.w	9500 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    9896:	4b34      	ldr	r3, [pc, #208]	; (9968 <hci_evt_encode+0x668>)
    9898:	e9d3 2300 	ldrd	r2, r3, [r3]
    989c:	2300      	movs	r3, #0
    989e:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    98a2:	4313      	orrs	r3, r2
    98a4:	f43f ae2c 	beq.w	9500 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    98a8:	220c      	movs	r2, #12
    98aa:	2105      	movs	r1, #5
    98ac:	4628      	mov	r0, r5
    98ae:	f7fe fccf 	bl	8250 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    98b2:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    98b4:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    98b6:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    98ba:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    98be:	f7f8 f9af 	bl	1c20 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    98c2:	2202      	movs	r2, #2
    98c4:	f104 0114 	add.w	r1, r4, #20
    98c8:	f105 000a 	add.w	r0, r5, #10
    98cc:	e6aa      	b.n	9624 <hci_evt_encode+0x324>
		encrypt_change(0x00, handle, buf);
    98ce:	460a      	mov	r2, r1
    98d0:	2000      	movs	r0, #0
    98d2:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    98d4:	f7fe fcf4 	bl	82c0 <encrypt_change>
    98d8:	e612      	b.n	9500 <hci_evt_encode+0x200>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    98da:	460b      	mov	r3, r1
    98dc:	4632      	mov	r2, r6
    98de:	4639      	mov	r1, r7
    98e0:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    98e2:	f7fe fd0d 	bl	8300 <le_remote_feat_complete>
    98e6:	e60b      	b.n	9500 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    98e8:	4b1d      	ldr	r3, [pc, #116]	; (9960 <hci_evt_encode+0x660>)
    98ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    98ee:	2300      	movs	r3, #0
    98f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    98f4:	4313      	orrs	r3, r2
    98f6:	f43f ae03 	beq.w	9500 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    98fa:	2208      	movs	r2, #8
    98fc:	210c      	movs	r1, #12
    98fe:	4628      	mov	r0, r5
    9900:	f7fe fc81 	bl	8206 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9904:	2108      	movs	r1, #8
    9906:	1868      	adds	r0, r5, r1
    9908:	f00a f9ca 	bl	13ca0 <net_buf_simple_add>
	ep->status = 0x00;
    990c:	2300      	movs	r3, #0
    990e:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9910:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    9914:	7b23      	ldrb	r3, [r4, #12]
    9916:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    9918:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    991c:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    991e:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    9922:	80c3      	strh	r3, [r0, #6]
    9924:	e5ec      	b.n	9500 <hci_evt_encode+0x200>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    9926:	460a      	mov	r2, r1
    9928:	7b00      	ldrb	r0, [r0, #12]
    992a:	4631      	mov	r1, r6
    992c:	e7d2      	b.n	98d4 <hci_evt_encode+0x5d4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    992e:	4b0c      	ldr	r3, [pc, #48]	; (9960 <hci_evt_encode+0x660>)
    9930:	e9d3 2300 	ldrd	r2, r3, [r3]
    9934:	2200      	movs	r2, #0
    9936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    993a:	4313      	orrs	r3, r2
    993c:	d007      	beq.n	994e <hci_evt_encode+0x64e>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    993e:	4b0a      	ldr	r3, [pc, #40]	; (9968 <hci_evt_encode+0x668>)
    9940:	e9d3 2300 	ldrd	r2, r3, [r3]
    9944:	2300      	movs	r3, #0
    9946:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    994a:	4313      	orrs	r3, r2
    994c:	d11e      	bne.n	998c <hci_evt_encode+0x68c>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    994e:	2300      	movs	r3, #0
    9950:	9301      	str	r3, [sp, #4]
    9952:	9300      	str	r3, [sp, #0]
    9954:	221a      	movs	r2, #26
    9956:	2102      	movs	r1, #2
    9958:	4630      	mov	r0, r6
    995a:	f007 f82f 	bl	109bc <ll_conn_update>
    995e:	e5cf      	b.n	9500 <hci_evt_encode+0x200>
    9960:	20003da8 	.word	0x20003da8
    9964:	2000085c 	.word	0x2000085c
    9968:	20003db0 	.word	0x20003db0
    996c:	200008e8 	.word	0x200008e8
    9970:	00017cce 	.word	0x00017cce
    9974:	000159e9 	.word	0x000159e9
    9978:	20003ad4 	.word	0x20003ad4
    997c:	00016791 	.word	0x00016791
    9980:	00017ac9 	.word	0x00017ac9
    9984:	00017add 	.word	0x00017add
    9988:	000166ef 	.word	0x000166ef
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    998c:	220a      	movs	r2, #10
    998e:	2106      	movs	r1, #6
    9990:	4628      	mov	r0, r5
    9992:	f7fe fc5d 	bl	8250 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9996:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    9998:	89a3      	ldrh	r3, [r4, #12]
    999a:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    999c:	89e3      	ldrh	r3, [r4, #14]
    999e:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    99a0:	8a23      	ldrh	r3, [r4, #16]
    99a2:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    99a4:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    99a6:	8103      	strh	r3, [r0, #8]
    99a8:	e5aa      	b.n	9500 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    99aa:	4b1d      	ldr	r3, [pc, #116]	; (9a20 <hci_evt_encode+0x720>)
    99ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    99b0:	2200      	movs	r2, #0
    99b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    99b6:	4313      	orrs	r3, r2
    99b8:	f43f ada2 	beq.w	9500 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    99bc:	4b19      	ldr	r3, [pc, #100]	; (9a24 <hci_evt_encode+0x724>)
    99be:	e9d3 2300 	ldrd	r2, r3, [r3]
    99c2:	2300      	movs	r3, #0
    99c4:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    99c8:	4313      	orrs	r3, r2
    99ca:	f43f ad99 	beq.w	9500 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    99ce:	220a      	movs	r2, #10
    99d0:	2107      	movs	r1, #7
    99d2:	4628      	mov	r0, r5
    99d4:	f7fe fc3c 	bl	8250 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    99d8:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    99da:	8a23      	ldrh	r3, [r4, #16]
    99dc:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    99de:	8a63      	ldrh	r3, [r4, #18]
    99e0:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    99e2:	89a3      	ldrh	r3, [r4, #12]
    99e4:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    99e6:	89e3      	ldrh	r3, [r4, #14]
    99e8:	e7dd      	b.n	99a6 <hci_evt_encode+0x6a6>
    99ea:	7b03      	ldrb	r3, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    99ec:	2b0e      	cmp	r3, #14
    99ee:	d104      	bne.n	99fa <hci_evt_encode+0x6fa>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    99f0:	460b      	mov	r3, r1
    99f2:	4632      	mov	r2, r6
    99f4:	2100      	movs	r1, #0
    99f6:	201a      	movs	r0, #26
    99f8:	e773      	b.n	98e2 <hci_evt_encode+0x5e2>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    99fa:	4a0b      	ldr	r2, [pc, #44]	; (9a28 <hci_evt_encode+0x728>)
    99fc:	9202      	str	r2, [sp, #8]
    99fe:	e88d 000c 	stmia.w	sp, {r2, r3}
    9a02:	4b0a      	ldr	r3, [pc, #40]	; (9a2c <hci_evt_encode+0x72c>)
    9a04:	490a      	ldr	r1, [pc, #40]	; (9a30 <hci_evt_encode+0x730>)
    9a06:	681c      	ldr	r4, [r3, #0]
    9a08:	480a      	ldr	r0, [pc, #40]	; (9a34 <hci_evt_encode+0x734>)
    9a0a:	4b0b      	ldr	r3, [pc, #44]	; (9a38 <hci_evt_encode+0x738>)
    9a0c:	47a0      	blx	r4
    9a0e:	e577      	b.n	9500 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    9a10:	4a05      	ldr	r2, [pc, #20]	; (9a28 <hci_evt_encode+0x728>)
    9a12:	4b06      	ldr	r3, [pc, #24]	; (9a2c <hci_evt_encode+0x72c>)
    9a14:	9201      	str	r2, [sp, #4]
    9a16:	9200      	str	r2, [sp, #0]
    9a18:	681c      	ldr	r4, [r3, #0]
    9a1a:	4b08      	ldr	r3, [pc, #32]	; (9a3c <hci_evt_encode+0x73c>)
    9a1c:	e71e      	b.n	985c <hci_evt_encode+0x55c>
    9a1e:	bf00      	nop
    9a20:	20003da8 	.word	0x20003da8
    9a24:	20003db0 	.word	0x20003db0
    9a28:	000159e9 	.word	0x000159e9
    9a2c:	20003ad4 	.word	0x20003ad4
    9a30:	00016791 	.word	0x00016791
    9a34:	00017d0a 	.word	0x00017d0a
    9a38:	00017aec 	.word	0x00017aec
    9a3c:	00017afb 	.word	0x00017afb

00009a40 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    9a40:	b570      	push	{r4, r5, r6, lr}
    9a42:	4606      	mov	r6, r0
    9a44:	460d      	mov	r5, r1
    9a46:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    9a48:	2113      	movs	r1, #19
    9a4a:	2205      	movs	r2, #5
    9a4c:	f7fe fbdb 	bl	8206 <evt_create>

	ep = net_buf_add(buf, len);
    9a50:	2105      	movs	r1, #5
    9a52:	f106 0008 	add.w	r0, r6, #8
    9a56:	f00a f923 	bl	13ca0 <net_buf_simple_add>
	ep->num_handles = num_handles;
    9a5a:	2301      	movs	r3, #1
    9a5c:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    9a5e:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    9a62:	f8a0 4003 	strh.w	r4, [r0, #3]
    9a66:	bd70      	pop	{r4, r5, r6, pc}

00009a68 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9a68:	7903      	ldrb	r3, [r0, #4]
    9a6a:	2b01      	cmp	r3, #1
    9a6c:	d006      	beq.n	9a7c <hci_get_class+0x14>
    9a6e:	3b02      	subs	r3, #2
    9a70:	b2db      	uxtb	r3, r3
    9a72:	2b0a      	cmp	r3, #10
    9a74:	d80a      	bhi.n	9a8c <hci_get_class+0x24>
    9a76:	4a07      	ldr	r2, [pc, #28]	; (9a94 <hci_get_class+0x2c>)
    9a78:	56d0      	ldrsb	r0, [r2, r3]
    9a7a:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    9a7c:	7a03      	ldrb	r3, [r0, #8]
    9a7e:	f003 0303 	and.w	r3, r3, #3
    9a82:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    9a84:	bf0c      	ite	eq
    9a86:	2002      	moveq	r0, #2
    9a88:	2003      	movne	r0, #3
    9a8a:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    9a90:	4770      	bx	lr
    9a92:	bf00      	nop
    9a94:	00017a4f 	.word	0x00017a4f

00009a98 <hci_init>:
	dup_count = -1;
    9a98:	4b0a      	ldr	r3, [pc, #40]	; (9ac4 <hci_init+0x2c>)
    9a9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9a9e:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    9aa0:	4b09      	ldr	r3, [pc, #36]	; (9ac8 <hci_init+0x30>)
    9aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9aa6:	f641 71ff 	movw	r1, #8191	; 0x1fff
    9aaa:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9aae:	4b07      	ldr	r3, [pc, #28]	; (9acc <hci_init+0x34>)
    9ab0:	2000      	movs	r0, #0
    9ab2:	2100      	movs	r1, #0
    9ab4:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9ab8:	4b05      	ldr	r3, [pc, #20]	; (9ad0 <hci_init+0x38>)
    9aba:	201f      	movs	r0, #31
    9abc:	2100      	movs	r1, #0
    9abe:	e9c3 0100 	strd	r0, r1, [r3]
    9ac2:	4770      	bx	lr
    9ac4:	20000860 	.word	0x20000860
    9ac8:	20003da8 	.word	0x20003da8
    9acc:	200008e8 	.word	0x200008e8
    9ad0:	20003db0 	.word	0x20003db0

00009ad4 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    9ad4:	bf20      	wfe
	__SEV();
    9ad6:	bf40      	sev
	__WFE();
    9ad8:	bf20      	wfe
    9ada:	4770      	bx	lr

00009adc <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    9adc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    9ade:	4b0d      	ldr	r3, [pc, #52]	; (9b14 <pdu_len_cmp+0x38>)
{
    9ae0:	b089      	sub	sp, #36	; 0x24
    9ae2:	4605      	mov	r5, r0
    9ae4:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    9ae6:	aa01      	add	r2, sp, #4
    9ae8:	f103 0718 	add.w	r7, r3, #24
    9aec:	6818      	ldr	r0, [r3, #0]
    9aee:	6859      	ldr	r1, [r3, #4]
    9af0:	4614      	mov	r4, r2
    9af2:	c403      	stmia	r4!, {r0, r1}
    9af4:	3308      	adds	r3, #8
    9af6:	42bb      	cmp	r3, r7
    9af8:	4622      	mov	r2, r4
    9afa:	d1f7      	bne.n	9aec <pdu_len_cmp+0x10>
    9afc:	881b      	ldrh	r3, [r3, #0]
    9afe:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    9b00:	ab08      	add	r3, sp, #32
    9b02:	441d      	add	r5, r3
    9b04:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    9b08:	1b83      	subs	r3, r0, r6
    9b0a:	4258      	negs	r0, r3
    9b0c:	4158      	adcs	r0, r3
    9b0e:	b009      	add	sp, #36	; 0x24
    9b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b12:	bf00      	nop
    9b14:	0001593b 	.word	0x0001593b

00009b18 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    9b18:	6008      	str	r0, [r1, #0]
    9b1a:	4770      	bx	lr

00009b1c <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9b1c:	b918      	cbnz	r0, 9b26 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    9b1e:	680b      	ldr	r3, [r1, #0]
    9b20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9b24:	600b      	str	r3, [r1, #0]
    9b26:	4770      	bx	lr

00009b28 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9b28:	b918      	cbnz	r0, 9b32 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    9b2a:	680b      	ldr	r3, [r1, #0]
    9b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9b30:	600b      	str	r3, [r1, #0]
    9b32:	4770      	bx	lr

00009b34 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    9b34:	b570      	push	{r4, r5, r6, lr}
    9b36:	1d03      	adds	r3, r0, #4
    9b38:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    9b3a:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    9b3c:	429d      	cmp	r5, r3
    9b3e:	d101      	bne.n	9b44 <chan_sel_remap+0x10>
    9b40:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    9b42:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    9b44:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    9b48:	2200      	movs	r2, #0
    9b4a:	18a0      	adds	r0, r4, r2
    9b4c:	2a08      	cmp	r2, #8
    9b4e:	b2c0      	uxtb	r0, r0
    9b50:	d101      	bne.n	9b56 <chan_sel_remap+0x22>
    9b52:	4604      	mov	r4, r0
    9b54:	e7f2      	b.n	9b3c <chan_sel_remap+0x8>
			if (bite & 0x01) {
    9b56:	f016 0f01 	tst.w	r6, #1
    9b5a:	d003      	beq.n	9b64 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    9b5c:	2900      	cmp	r1, #0
    9b5e:	d0f0      	beq.n	9b42 <chan_sel_remap+0xe>
				chan_index--;
    9b60:	3901      	subs	r1, #1
    9b62:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    9b64:	0876      	lsrs	r6, r6, #1
    9b66:	3201      	adds	r2, #1
    9b68:	e7ef      	b.n	9b4a <chan_sel_remap+0x16>
	...

00009b6c <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    9b6c:	4b09      	ldr	r3, [pc, #36]	; (9b94 <packet_rx_acquired_count_get+0x28>)
    9b6e:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    9b72:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    9b76:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    9b78:	bf3b      	ittet	cc
    9b7a:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    9b7e:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    9b82:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    9b86:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    9b88:	bf2c      	ite	cs
    9b8a:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    9b8c:	1a80      	subcc	r0, r0, r2
    9b8e:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    9b90:	4770      	bx	lr
    9b92:	bf00      	nop
    9b94:	200008f0 	.word	0x200008f0

00009b98 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    9b98:	b508      	push	{r3, lr}
    9b9a:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    9b9c:	f7ff ffe6 	bl	9b6c <packet_rx_acquired_count_get>
    9ba0:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    9ba2:	bf21      	itttt	cs
    9ba4:	4b04      	ldrcs	r3, [pc, #16]	; (9bb8 <packet_rx_reserve_get+0x20>)
    9ba6:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    9baa:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    9bae:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    9bb2:	bf38      	it	cc
    9bb4:	2000      	movcc	r0, #0
}
    9bb6:	bd08      	pop	{r3, pc}
    9bb8:	200008f0 	.word	0x200008f0

00009bbc <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    9bbc:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    9bbe:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    9bc2:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    9bc6:	429c      	cmp	r4, r3
    9bc8:	d15a      	bne.n	9c80 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    9bca:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    9bce:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    9bd2:	428b      	cmp	r3, r1
    9bd4:	d154      	bne.n	9c80 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    9bd6:	f990 301d 	ldrsb.w	r3, [r0, #29]
    9bda:	2b00      	cmp	r3, #0
    9bdc:	db25      	blt.n	9c2a <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    9bde:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    9be0:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    9be2:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    9be6:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    9be8:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    9bec:	4351      	muls	r1, r2
					      conn->supervision_reload *
    9bee:	227d      	movs	r2, #125	; 0x7d
    9bf0:	434a      	muls	r2, r1
					      125 / 1000;
    9bf2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9bf6:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    9bfa:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9bfe:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    9c02:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9c04:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    9c08:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    9c0a:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    9c0c:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    9c10:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    9c12:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    9c16:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    9c1a:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    9c1e:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    9c22:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    9c26:	4618      	mov	r0, r3
    9c28:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    9c2a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    9c2e:	06dc      	lsls	r4, r3, #27
    9c30:	d428      	bmi.n	9c84 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    9c32:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    9c36:	069a      	lsls	r2, r3, #26
    9c38:	d503      	bpl.n	9c42 <conn_update_req+0x86>
		    (conn->llcp_features &
    9c3a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    9c3e:	079b      	lsls	r3, r3, #30
    9c40:	d520      	bpl.n	9c84 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    9c42:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    9c44:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    9c46:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    9c4a:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    9c4c:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    9c50:	4354      	muls	r4, r2
						conn->supervision_reload *
    9c52:	227d      	movs	r2, #125	; 0x7d
    9c54:	4362      	muls	r2, r4
						125 / 1000;
    9c56:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    9c5a:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    9c5e:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    9c62:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    9c66:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    9c68:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    9c6c:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    9c70:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    9c72:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    9c76:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    9c7a:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    9c7e:	e7d2      	b.n	9c26 <conn_update_req+0x6a>
		return 1;
    9c80:	2001      	movs	r0, #1
    9c82:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    9c84:	2002      	movs	r0, #2
}
    9c86:	bd30      	pop	{r4, r5, pc}

00009c88 <packet_rx_allocate>:
{
    9c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    9c8c:	4d22      	ldr	r5, [pc, #136]	; (9d18 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    9c8e:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    9c92:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    9c96:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    9c9a:	3401      	adds	r4, #1
    9c9c:	4581      	cmp	r9, r0
    9c9e:	b2e4      	uxtb	r4, r4
    9ca0:	bf28      	it	cs
    9ca2:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    9ca4:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    9ca8:	42a3      	cmp	r3, r4
    9caa:	bf08      	it	eq
    9cac:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9cae:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    9cb2:	f1b9 0f00 	cmp.w	r9, #0
    9cb6:	d003      	beq.n	9cc0 <packet_rx_allocate+0x38>
    9cb8:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    9cbc:	429c      	cmp	r4, r3
    9cbe:	d101      	bne.n	9cc4 <packet_rx_allocate+0x3c>
    9cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    9cc4:	4638      	mov	r0, r7
    9cc6:	f7fc fff0 	bl	6caa <mem_acquire>
		if (!link) {
    9cca:	4606      	mov	r6, r0
    9ccc:	2800      	cmp	r0, #0
    9cce:	d0f7      	beq.n	9cc0 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9cd0:	4640      	mov	r0, r8
    9cd2:	f7fc ffea 	bl	6caa <mem_acquire>
		if (!node_rx) {
    9cd6:	b928      	cbnz	r0, 9ce4 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    9cd8:	4630      	mov	r0, r6
    9cda:	4910      	ldr	r1, [pc, #64]	; (9d1c <packet_rx_allocate+0x94>)
}
    9cdc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    9ce0:	f7fc bffd 	b.w	6cde <mem_release>
		node_rx->hdr.onion.link = link;
    9ce4:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    9ce6:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    9cea:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    9cee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    9cf2:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    9cf6:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    9cfa:	3401      	adds	r4, #1
    9cfc:	b2e4      	uxtb	r4, r4
			acquire = 0;
    9cfe:	42a3      	cmp	r3, r4
    9d00:	bf08      	it	eq
    9d02:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    9d04:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    9d08:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    9d0c:	3b01      	subs	r3, #1
    9d0e:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    9d12:	fa5f f989 	uxtb.w	r9, r9
    9d16:	e7cc      	b.n	9cb2 <packet_rx_allocate+0x2a>
    9d18:	200008f0 	.word	0x200008f0
    9d1c:	20000a38 	.word	0x20000a38

00009d20 <common_init>:
{
    9d20:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    9d22:	4c39      	ldr	r4, [pc, #228]	; (9e08 <common_init+0xe8>)
    9d24:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    9d28:	2a00      	cmp	r2, #0
    9d2a:	d040      	beq.n	9dae <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    9d2c:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    9d30:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9d34:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    9d38:	f7fc ff90 	bl	6c5c <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    9d3c:	4b33      	ldr	r3, [pc, #204]	; (9e0c <common_init+0xec>)
    9d3e:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    9d42:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    9d46:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    9d4a:	f7fc ff87 	bl	6c5c <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    9d4e:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    9d52:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    9d56:	4b2e      	ldr	r3, [pc, #184]	; (9e10 <common_init+0xf0>)
    9d58:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    9d5c:	440a      	add	r2, r1
    9d5e:	2108      	movs	r1, #8
    9d60:	f7fc ff7c 	bl	6c5c <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    9d64:	4b2b      	ldr	r3, [pc, #172]	; (9e14 <common_init+0xf4>)
    9d66:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    9d6a:	2202      	movs	r2, #2
    9d6c:	2124      	movs	r1, #36	; 0x24
    9d6e:	f7fc ff75 	bl	6c5c <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    9d72:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    9d76:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    9d7a:	4b27      	ldr	r3, [pc, #156]	; (9e18 <common_init+0xf8>)
    9d7c:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    9d80:	3a01      	subs	r2, #1
    9d82:	b292      	uxth	r2, r2
    9d84:	f7fc ff6a 	bl	6c5c <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    9d88:	4821      	ldr	r0, [pc, #132]	; (9e10 <common_init+0xf0>)
    9d8a:	f7fc ff8e 	bl	6caa <mem_acquire>
	LL_ASSERT(link);
    9d8e:	b988      	cbnz	r0, 9db4 <common_init+0x94>
    9d90:	4a22      	ldr	r2, [pc, #136]	; (9e1c <common_init+0xfc>)
    9d92:	4b23      	ldr	r3, [pc, #140]	; (9e20 <common_init+0x100>)
    9d94:	9201      	str	r2, [sp, #4]
    9d96:	9200      	str	r2, [sp, #0]
    9d98:	681c      	ldr	r4, [r3, #0]
    9d9a:	4922      	ldr	r1, [pc, #136]	; (9e24 <common_init+0x104>)
    9d9c:	4b22      	ldr	r3, [pc, #136]	; (9e28 <common_init+0x108>)
    9d9e:	4823      	ldr	r0, [pc, #140]	; (9e2c <common_init+0x10c>)
    9da0:	47a0      	blx	r4
    9da2:	4040      	eors	r0, r0
    9da4:	f380 8811 	msr	BASEPRI, r0
    9da8:	f04f 0004 	mov.w	r0, #4
    9dac:	df02      	svc	2
		_radio.conn_free = NULL;
    9dae:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    9db2:	e7c3      	b.n	9d3c <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    9db4:	4a1e      	ldr	r2, [pc, #120]	; (9e30 <common_init+0x110>)
    9db6:	1f11      	subs	r1, r2, #4
    9db8:	f7fc ffce 	bl	6d58 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    9dbc:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    9dc0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    9dc4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    9dc8:	231f      	movs	r3, #31
    9dca:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    9dce:	2325      	movs	r3, #37	; 0x25
    9dd0:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    9dd4:	231b      	movs	r3, #27
    9dd6:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9dda:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    9dde:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9de0:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    9de4:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    9de6:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    9dea:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    9dee:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    9df2:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    9df6:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    9dfa:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    9dfe:	b002      	add	sp, #8
    9e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    9e04:	f7ff bf40 	b.w	9c88 <packet_rx_allocate>
    9e08:	200008f0 	.word	0x200008f0
    9e0c:	20000a20 	.word	0x20000a20
    9e10:	20000a38 	.word	0x20000a38
    9e14:	20000a4c 	.word	0x20000a4c
    9e18:	20000a54 	.word	0x20000a54
    9e1c:	000159e9 	.word	0x000159e9
    9e20:	20003ad4 	.word	0x20003ad4
    9e24:	00016791 	.word	0x00016791
    9e28:	00017ddc 	.word	0x00017ddc
    9e2c:	000182cb 	.word	0x000182cb
    9e30:	20000a40 	.word	0x20000a40

00009e34 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    9e34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    9e38:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    9e3a:	4294      	cmp	r4, r2
{
    9e3c:	4681      	mov	r9, r0
    9e3e:	460f      	mov	r7, r1
    9e40:	4690      	mov	r8, r2
	if (_first == last) {
    9e42:	d03d      	beq.n	9ec0 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    9e44:	4e1f      	ldr	r6, [pc, #124]	; (9ec4 <tx_cmplt_get+0x90>)
    9e46:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    9e4a:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    9e4e:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    9e50:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    9e52:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    9e56:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    9e5a:	b222      	sxth	r2, r4
    9e5c:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    9e60:	f8b9 e000 	ldrh.w	lr, [r9]
    9e64:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    9e68:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    9e6c:	4596      	cmp	lr, r2
    9e6e:	d120      	bne.n	9eb2 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    9e70:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    9e72:	2801      	cmp	r0, #1
    9e74:	f020 0303 	bic.w	r3, r0, #3
    9e78:	d90a      	bls.n	9e90 <tx_cmplt_get+0x5c>
    9e7a:	b1f3      	cbz	r3, 9eba <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    9e7c:	1d02      	adds	r2, r0, #4
    9e7e:	d01c      	beq.n	9eba <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    9e80:	7942      	ldrb	r2, [r0, #5]
    9e82:	b1d2      	cbz	r2, 9eba <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    9e84:	7902      	ldrb	r2, [r0, #4]
    9e86:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    9e8a:	3a01      	subs	r2, #1
    9e8c:	2a01      	cmp	r2, #1
    9e8e:	d814      	bhi.n	9eba <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    9e90:	2201      	movs	r2, #1
			cmplt++;
    9e92:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    9e94:	604a      	str	r2, [r1, #4]
			cmplt++;
    9e96:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    9e98:	b113      	cbz	r3, 9ea0 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    9e9a:	4651      	mov	r1, sl
    9e9c:	f7fc ff1f 	bl	6cde <mem_release>
		}

		_first = _first + 1;
    9ea0:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    9ea2:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    9ea6:	b2e4      	uxtb	r4, r4
			_first = 0;
    9ea8:	42a2      	cmp	r2, r4
    9eaa:	bf08      	it	eq
    9eac:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    9eae:	4544      	cmp	r4, r8
    9eb0:	d1d3      	bne.n	9e5a <tx_cmplt_get+0x26>

	*first = _first;
    9eb2:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    9eb4:	4628      	mov	r0, r5
    9eb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    9eba:	f8c1 b004 	str.w	fp, [r1, #4]
    9ebe:	e7eb      	b.n	9e98 <tx_cmplt_get+0x64>
		return 0;
    9ec0:	2500      	movs	r5, #0
    9ec2:	e7f7      	b.n	9eb4 <tx_cmplt_get+0x80>
    9ec4:	200008f0 	.word	0x200008f0

00009ec8 <connection_get>:
{
    9ec8:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    9eca:	4b09      	ldr	r3, [pc, #36]	; (9ef0 <connection_get+0x28>)
    9ecc:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    9ed0:	4282      	cmp	r2, r0
{
    9ed2:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    9ed4:	d90a      	bls.n	9eec <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    9ed6:	4602      	mov	r2, r0
    9ed8:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9edc:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    9ee0:	f7fc ff18 	bl	6d14 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    9ee4:	b110      	cbz	r0, 9eec <connection_get+0x24>
    9ee6:	8c03      	ldrh	r3, [r0, #32]
    9ee8:	42a3      	cmp	r3, r4
    9eea:	d000      	beq.n	9eee <connection_get+0x26>
	return 0;
    9eec:	2000      	movs	r0, #0
}
    9eee:	bd10      	pop	{r4, pc}
    9ef0:	200008f0 	.word	0x200008f0

00009ef4 <role_disable>:
{
    9ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ef8:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9efa:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    9efc:	2805      	cmp	r0, #5
{
    9efe:	4605      	mov	r5, r0
    9f00:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9f02:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    9f04:	d00c      	beq.n	9f20 <role_disable+0x2c>
    9f06:	2806      	cmp	r0, #6
    9f08:	d041      	beq.n	9f8e <role_disable+0x9a>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    9f0a:	d946      	bls.n	9f9a <role_disable+0xa6>
			conn_handle = ticker_id_primary -
    9f0c:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    9f0e:	b280      	uxth	r0, r0
    9f10:	f7ff ffda 	bl	9ec8 <connection_get>
			if (!conn) {
    9f14:	2800      	cmp	r0, #0
    9f16:	f000 812d 	beq.w	a174 <role_disable+0x280>
			ticks_active_to_start =
    9f1a:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    9f1e:	e00f      	b.n	9f40 <role_disable+0x4c>
		ticks_xtal_to_start =
    9f20:	4b95      	ldr	r3, [pc, #596]	; (a178 <role_disable+0x284>)
    9f22:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    9f24:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9f28:	ab02      	add	r3, sp, #8
    9f2a:	9300      	str	r3, [sp, #0]
    9f2c:	460a      	mov	r2, r1
    9f2e:	4b93      	ldr	r3, [pc, #588]	; (a17c <role_disable+0x288>)
    9f30:	2103      	movs	r1, #3
    9f32:	2000      	movs	r0, #0
    9f34:	f7fd fde0 	bl	7af8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    9f38:	2802      	cmp	r0, #2
    9f3a:	d012      	beq.n	9f62 <role_disable+0x6e>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    9f3c:	9b02      	ldr	r3, [sp, #8]
    9f3e:	b9a3      	cbnz	r3, 9f6a <role_disable+0x76>
	LL_ASSERT(!_radio.ticker_id_stop);
    9f40:	4c8d      	ldr	r4, [pc, #564]	; (a178 <role_disable+0x284>)
    9f42:	7ca3      	ldrb	r3, [r4, #18]
    9f44:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    9f48:	2b00      	cmp	r3, #0
    9f4a:	d02f      	beq.n	9fac <role_disable+0xb8>
    9f4c:	4a8c      	ldr	r2, [pc, #560]	; (a180 <role_disable+0x28c>)
    9f4e:	4b8d      	ldr	r3, [pc, #564]	; (a184 <role_disable+0x290>)
    9f50:	9201      	str	r2, [sp, #4]
    9f52:	9200      	str	r2, [sp, #0]
    9f54:	681c      	ldr	r4, [r3, #0]
    9f56:	498c      	ldr	r1, [pc, #560]	; (a188 <role_disable+0x294>)
    9f58:	4b8c      	ldr	r3, [pc, #560]	; (a18c <role_disable+0x298>)
    9f5a:	488d      	ldr	r0, [pc, #564]	; (a190 <role_disable+0x29c>)
    9f5c:	e010      	b.n	9f80 <role_disable+0x8c>
				cpu_sleep();
    9f5e:	f7ff fdb9 	bl	9ad4 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    9f62:	9b02      	ldr	r3, [sp, #8]
    9f64:	2b02      	cmp	r3, #2
    9f66:	d0fa      	beq.n	9f5e <role_disable+0x6a>
    9f68:	e7e8      	b.n	9f3c <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    9f6a:	9b02      	ldr	r3, [sp, #8]
    9f6c:	2b01      	cmp	r3, #1
    9f6e:	d0e7      	beq.n	9f40 <role_disable+0x4c>
    9f70:	4a83      	ldr	r2, [pc, #524]	; (a180 <role_disable+0x28c>)
    9f72:	4b84      	ldr	r3, [pc, #528]	; (a184 <role_disable+0x290>)
    9f74:	9201      	str	r2, [sp, #4]
    9f76:	9200      	str	r2, [sp, #0]
    9f78:	681c      	ldr	r4, [r3, #0]
    9f7a:	4983      	ldr	r1, [pc, #524]	; (a188 <role_disable+0x294>)
    9f7c:	4b83      	ldr	r3, [pc, #524]	; (a18c <role_disable+0x298>)
    9f7e:	4885      	ldr	r0, [pc, #532]	; (a194 <role_disable+0x2a0>)
			LL_ASSERT(0);
    9f80:	47a0      	blx	r4
    9f82:	4040      	eors	r0, r0
    9f84:	f380 8811 	msr	BASEPRI, r0
    9f88:	f04f 0004 	mov.w	r0, #4
    9f8c:	df02      	svc	2
		ticks_xtal_to_start =
    9f8e:	4b7a      	ldr	r3, [pc, #488]	; (a178 <role_disable+0x284>)
    9f90:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    9f94:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    9f98:	e7d2      	b.n	9f40 <role_disable+0x4c>
			LL_ASSERT(0);
    9f9a:	4a79      	ldr	r2, [pc, #484]	; (a180 <role_disable+0x28c>)
    9f9c:	4b79      	ldr	r3, [pc, #484]	; (a184 <role_disable+0x290>)
    9f9e:	9201      	str	r2, [sp, #4]
    9fa0:	9200      	str	r2, [sp, #0]
    9fa2:	681c      	ldr	r4, [r3, #0]
    9fa4:	4b79      	ldr	r3, [pc, #484]	; (a18c <role_disable+0x298>)
    9fa6:	4978      	ldr	r1, [pc, #480]	; (a188 <role_disable+0x294>)
    9fa8:	487b      	ldr	r0, [pc, #492]	; (a198 <role_disable+0x2a4>)
    9faa:	e7e9      	b.n	9f80 <role_disable+0x8c>
	ret_cb = TICKER_STATUS_BUSY;
    9fac:	ab06      	add	r3, sp, #24
    9fae:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    9fb0:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    9fb2:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9fb6:	2103      	movs	r1, #3
    9fb8:	9300      	str	r3, [sp, #0]
    9fba:	462a      	mov	r2, r5
    9fbc:	4b6f      	ldr	r3, [pc, #444]	; (a17c <role_disable+0x288>)
    9fbe:	f7fd fd9b 	bl	7af8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    9fc2:	2802      	cmp	r0, #2
    9fc4:	d026      	beq.n	a014 <role_disable+0x120>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    9fc6:	9b02      	ldr	r3, [sp, #8]
    9fc8:	2b00      	cmp	r3, #0
    9fca:	d16c      	bne.n	a0a6 <role_disable+0x1b2>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    9fcc:	7c23      	ldrb	r3, [r4, #16]
    9fce:	429d      	cmp	r5, r3
    9fd0:	d002      	beq.n	9fd8 <role_disable+0xe4>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    9fd2:	7c63      	ldrb	r3, [r4, #17]
    9fd4:	429d      	cmp	r5, r3
    9fd6:	d162      	bne.n	a09e <role_disable+0x1aa>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    9fd8:	ab06      	add	r3, sp, #24
    9fda:	2202      	movs	r2, #2
    9fdc:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9fe0:	2200      	movs	r2, #0
    9fe2:	9300      	str	r3, [sp, #0]
    9fe4:	2103      	movs	r1, #3
    9fe6:	4b65      	ldr	r3, [pc, #404]	; (a17c <role_disable+0x288>)
    9fe8:	4610      	mov	r0, r2
    9fea:	f7fd fd85 	bl	7af8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    9fee:	2802      	cmp	r0, #2
    9ff0:	d11e      	bne.n	a030 <role_disable+0x13c>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9ff2:	2201      	movs	r2, #1
    9ff4:	4611      	mov	r1, r2
    9ff6:	2003      	movs	r0, #3
    9ff8:	f7fc fefa 	bl	6df0 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    9ffc:	9b03      	ldr	r3, [sp, #12]
    9ffe:	2b02      	cmp	r3, #2
    a000:	d116      	bne.n	a030 <role_disable+0x13c>
    a002:	4a5f      	ldr	r2, [pc, #380]	; (a180 <role_disable+0x28c>)
    a004:	4b5f      	ldr	r3, [pc, #380]	; (a184 <role_disable+0x290>)
    a006:	9201      	str	r2, [sp, #4]
    a008:	9200      	str	r2, [sp, #0]
    a00a:	681c      	ldr	r4, [r3, #0]
    a00c:	495e      	ldr	r1, [pc, #376]	; (a188 <role_disable+0x294>)
    a00e:	4b63      	ldr	r3, [pc, #396]	; (a19c <role_disable+0x2a8>)
    a010:	4863      	ldr	r0, [pc, #396]	; (a1a0 <role_disable+0x2ac>)
    a012:	e7b5      	b.n	9f80 <role_disable+0x8c>
		if (_radio.ticker_id_event == ticker_id_primary) {
    a014:	7c63      	ldrb	r3, [r4, #17]
    a016:	429d      	cmp	r5, r3
    a018:	d104      	bne.n	a024 <role_disable+0x130>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a01a:	2201      	movs	r2, #1
    a01c:	4611      	mov	r1, r2
    a01e:	2003      	movs	r0, #3
    a020:	f7fc fee6 	bl	6df0 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    a024:	9b02      	ldr	r3, [sp, #8]
    a026:	2b02      	cmp	r3, #2
    a028:	d1cd      	bne.n	9fc6 <role_disable+0xd2>
			cpu_sleep();
    a02a:	f7ff fd53 	bl	9ad4 <cpu_sleep>
    a02e:	e7f9      	b.n	a024 <role_disable+0x130>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    a030:	9803      	ldr	r0, [sp, #12]
    a032:	2800      	cmp	r0, #0
    a034:	d153      	bne.n	a0de <role_disable+0x1ea>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    a036:	2302      	movs	r3, #2
    a038:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    a03a:	7c23      	ldrb	r3, [r4, #16]
    a03c:	b943      	cbnz	r3, a050 <role_disable+0x15c>
    a03e:	4a50      	ldr	r2, [pc, #320]	; (a180 <role_disable+0x28c>)
    a040:	4b50      	ldr	r3, [pc, #320]	; (a184 <role_disable+0x290>)
    a042:	9201      	str	r2, [sp, #4]
    a044:	9200      	str	r2, [sp, #0]
    a046:	681c      	ldr	r4, [r3, #0]
    a048:	494f      	ldr	r1, [pc, #316]	; (a188 <role_disable+0x294>)
    a04a:	4b54      	ldr	r3, [pc, #336]	; (a19c <role_disable+0x2a8>)
    a04c:	4855      	ldr	r0, [pc, #340]	; (a1a4 <role_disable+0x2b0>)
    a04e:	e797      	b.n	9f80 <role_disable+0x8c>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a050:	ab04      	add	r3, sp, #16
		_radio.ticker_id_prepare = 0;
    a052:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a054:	2201      	movs	r2, #1
    a056:	9300      	str	r3, [sp, #0]
    a058:	2103      	movs	r1, #3
    a05a:	4b48      	ldr	r3, [pc, #288]	; (a17c <role_disable+0x288>)
    a05c:	f7fd fd4c 	bl	7af8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    a060:	2802      	cmp	r0, #2
    a062:	d110      	bne.n	a086 <role_disable+0x192>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a064:	2201      	movs	r2, #1
    a066:	4611      	mov	r1, r2
    a068:	2003      	movs	r0, #3
    a06a:	f7fc fec1 	bl	6df0 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    a06e:	9b04      	ldr	r3, [sp, #16]
    a070:	2b02      	cmp	r3, #2
    a072:	d108      	bne.n	a086 <role_disable+0x192>
    a074:	4a42      	ldr	r2, [pc, #264]	; (a180 <role_disable+0x28c>)
    a076:	4b43      	ldr	r3, [pc, #268]	; (a184 <role_disable+0x290>)
    a078:	9201      	str	r2, [sp, #4]
    a07a:	9200      	str	r2, [sp, #0]
    a07c:	681c      	ldr	r4, [r3, #0]
    a07e:	4942      	ldr	r1, [pc, #264]	; (a188 <role_disable+0x294>)
    a080:	4b46      	ldr	r3, [pc, #280]	; (a19c <role_disable+0x2a8>)
    a082:	4849      	ldr	r0, [pc, #292]	; (a1a8 <role_disable+0x2b4>)
    a084:	e77c      	b.n	9f80 <role_disable+0x8c>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    a086:	9a04      	ldr	r2, [sp, #16]
    a088:	b99a      	cbnz	r2, a0b2 <role_disable+0x1be>
			ticks_xtal_to_start &= ~XON_BITMASK;
    a08a:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    a08e:	45b0      	cmp	r8, r6
    a090:	d923      	bls.n	a0da <role_disable+0x1e6>
				ret = mayfly_enqueue(
    a092:	4b46      	ldr	r3, [pc, #280]	; (a1ac <role_disable+0x2b8>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a094:	4611      	mov	r1, r2
    a096:	2003      	movs	r0, #3
    a098:	f7fc fed2 	bl	6e40 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a09c:	b9a0      	cbnz	r0, a0c8 <role_disable+0x1d4>
	if (!_radio.ticker_id_stop) {
    a09e:	7ca3      	ldrb	r3, [r4, #18]
    a0a0:	b90b      	cbnz	r3, a0a6 <role_disable+0x1b2>
		ret_cb = TICKER_STATUS_FAILURE;
    a0a2:	2301      	movs	r3, #1
    a0a4:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    a0a6:	2300      	movs	r3, #0
    a0a8:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    a0aa:	9802      	ldr	r0, [sp, #8]
}
    a0ac:	b006      	add	sp, #24
    a0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    a0b2:	9b04      	ldr	r3, [sp, #16]
    a0b4:	2b01      	cmp	r3, #1
    a0b6:	d156      	bne.n	a166 <role_disable+0x272>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a0b8:	2200      	movs	r2, #0
    a0ba:	4611      	mov	r1, r2
    a0bc:	4b3b      	ldr	r3, [pc, #236]	; (a1ac <role_disable+0x2b8>)
    a0be:	2003      	movs	r0, #3
    a0c0:	f7fc febe 	bl	6e40 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a0c4:	4602      	mov	r2, r0
    a0c6:	b140      	cbz	r0, a0da <role_disable+0x1e6>
			LL_ASSERT(!ret);
    a0c8:	4a2d      	ldr	r2, [pc, #180]	; (a180 <role_disable+0x28c>)
    a0ca:	4b2e      	ldr	r3, [pc, #184]	; (a184 <role_disable+0x290>)
    a0cc:	9201      	str	r2, [sp, #4]
    a0ce:	9200      	str	r2, [sp, #0]
    a0d0:	681c      	ldr	r4, [r3, #0]
    a0d2:	492d      	ldr	r1, [pc, #180]	; (a188 <role_disable+0x294>)
    a0d4:	4b31      	ldr	r3, [pc, #196]	; (a19c <role_disable+0x2a8>)
    a0d6:	4836      	ldr	r0, [pc, #216]	; (a1b0 <role_disable+0x2bc>)
    a0d8:	e752      	b.n	9f80 <role_disable+0x8c>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a0da:	4b36      	ldr	r3, [pc, #216]	; (a1b4 <role_disable+0x2c0>)
    a0dc:	e7da      	b.n	a094 <role_disable+0x1a0>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    a0de:	9d03      	ldr	r5, [sp, #12]
    a0e0:	2d01      	cmp	r5, #1
    a0e2:	d140      	bne.n	a166 <role_disable+0x272>
		if (ticker_id_stop != TICKER_NULL) {
    a0e4:	2fff      	cmp	r7, #255	; 0xff
    a0e6:	d02b      	beq.n	a140 <role_disable+0x24c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    a0e8:	ab06      	add	r3, sp, #24
    a0ea:	2202      	movs	r2, #2
    a0ec:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a0f0:	2103      	movs	r1, #3
    a0f2:	9300      	str	r3, [sp, #0]
    a0f4:	463a      	mov	r2, r7
    a0f6:	4b21      	ldr	r3, [pc, #132]	; (a17c <role_disable+0x288>)
    a0f8:	2000      	movs	r0, #0
    a0fa:	f7fd fcfd 	bl	7af8 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    a0fe:	2802      	cmp	r0, #2
    a100:	d110      	bne.n	a124 <role_disable+0x230>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a102:	462a      	mov	r2, r5
    a104:	4629      	mov	r1, r5
    a106:	2003      	movs	r0, #3
    a108:	f7fc fe72 	bl	6df0 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    a10c:	9b05      	ldr	r3, [sp, #20]
    a10e:	2b02      	cmp	r3, #2
    a110:	d108      	bne.n	a124 <role_disable+0x230>
    a112:	4a1b      	ldr	r2, [pc, #108]	; (a180 <role_disable+0x28c>)
    a114:	4b1b      	ldr	r3, [pc, #108]	; (a184 <role_disable+0x290>)
    a116:	9201      	str	r2, [sp, #4]
    a118:	9200      	str	r2, [sp, #0]
    a11a:	681c      	ldr	r4, [r3, #0]
    a11c:	491a      	ldr	r1, [pc, #104]	; (a188 <role_disable+0x294>)
    a11e:	4b1f      	ldr	r3, [pc, #124]	; (a19c <role_disable+0x2a8>)
    a120:	4825      	ldr	r0, [pc, #148]	; (a1b8 <role_disable+0x2c4>)
    a122:	e72d      	b.n	9f80 <role_disable+0x8c>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    a124:	9b05      	ldr	r3, [sp, #20]
    a126:	b15b      	cbz	r3, a140 <role_disable+0x24c>
    a128:	9b05      	ldr	r3, [sp, #20]
    a12a:	2b01      	cmp	r3, #1
    a12c:	d008      	beq.n	a140 <role_disable+0x24c>
    a12e:	4a14      	ldr	r2, [pc, #80]	; (a180 <role_disable+0x28c>)
    a130:	4b14      	ldr	r3, [pc, #80]	; (a184 <role_disable+0x290>)
    a132:	9201      	str	r2, [sp, #4]
    a134:	9200      	str	r2, [sp, #0]
    a136:	681c      	ldr	r4, [r3, #0]
    a138:	4913      	ldr	r1, [pc, #76]	; (a188 <role_disable+0x294>)
    a13a:	4b18      	ldr	r3, [pc, #96]	; (a19c <role_disable+0x2a8>)
    a13c:	481f      	ldr	r0, [pc, #124]	; (a1bc <role_disable+0x2c8>)
    a13e:	e71f      	b.n	9f80 <role_disable+0x8c>
		if (_radio.role != ROLE_NONE) {
    a140:	7ce3      	ldrb	r3, [r4, #19]
    a142:	2b00      	cmp	r3, #0
    a144:	d0ab      	beq.n	a09e <role_disable+0x1aa>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    a146:	4b1e      	ldr	r3, [pc, #120]	; (a1c0 <role_disable+0x2cc>)
    a148:	2204      	movs	r2, #4
    a14a:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a14c:	2200      	movs	r2, #0
    a14e:	4611      	mov	r1, r2
    a150:	2003      	movs	r0, #3
    a152:	f7fc fe75 	bl	6e40 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a156:	2800      	cmp	r0, #0
    a158:	d1b6      	bne.n	a0c8 <role_disable+0x1d4>
			while (_radio.role != ROLE_NONE) {
    a15a:	7ce3      	ldrb	r3, [r4, #19]
    a15c:	2b00      	cmp	r3, #0
    a15e:	d09e      	beq.n	a09e <role_disable+0x1aa>
				cpu_sleep();
    a160:	f7ff fcb8 	bl	9ad4 <cpu_sleep>
    a164:	e7f9      	b.n	a15a <role_disable+0x266>
		LL_ASSERT(0);
    a166:	4a06      	ldr	r2, [pc, #24]	; (a180 <role_disable+0x28c>)
    a168:	4b06      	ldr	r3, [pc, #24]	; (a184 <role_disable+0x290>)
    a16a:	9201      	str	r2, [sp, #4]
    a16c:	9200      	str	r2, [sp, #0]
    a16e:	681c      	ldr	r4, [r3, #0]
    a170:	4b0a      	ldr	r3, [pc, #40]	; (a19c <role_disable+0x2a8>)
    a172:	e718      	b.n	9fa6 <role_disable+0xb2>
				return 1;
    a174:	2001      	movs	r0, #1
    a176:	e799      	b.n	a0ac <role_disable+0x1b8>
    a178:	200008f0 	.word	0x200008f0
    a17c:	00009b19 	.word	0x00009b19
    a180:	000159e9 	.word	0x000159e9
    a184:	20003ad4 	.word	0x20003ad4
    a188:	00016791 	.word	0x00016791
    a18c:	00018270 	.word	0x00018270
    a190:	00018c22 	.word	0x00018c22
    a194:	00018be2 	.word	0x00018be2
    a198:	000166ef 	.word	0x000166ef
    a19c:	0001825c 	.word	0x0001825c
    a1a0:	00018c5a 	.word	0x00018c5a
    a1a4:	00018c8b 	.word	0x00018c8b
    a1a8:	00018cc5 	.word	0x00018cc5
    a1ac:	20003df8 	.word	0x20003df8
    a1b0:	00018cf5 	.word	0x00018cf5
    a1b4:	20003eb8 	.word	0x20003eb8
    a1b8:	00018d1b 	.word	0x00018d1b
    a1bc:	00018d4d 	.word	0x00018d4d
    a1c0:	20003e28 	.word	0x20003e28

0000a1c4 <mayfly_xtal_retain>:
{
    a1c4:	b513      	push	{r0, r1, r4, lr}
    a1c6:	4b1e      	ldr	r3, [pc, #120]	; (a240 <mayfly_xtal_retain+0x7c>)
    a1c8:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    a1ca:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    a1cc:	b309      	cbz	r1, a212 <mayfly_xtal_retain+0x4e>
		if (!s_xtal_retained) {
    a1ce:	2a00      	cmp	r2, #0
    a1d0:	d134      	bne.n	a23c <mayfly_xtal_retain+0x78>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    a1d2:	2801      	cmp	r0, #1
    a1d4:	d00e      	beq.n	a1f4 <mayfly_xtal_retain+0x30>
    a1d6:	4a1b      	ldr	r2, [pc, #108]	; (a244 <mayfly_xtal_retain+0x80>)
    a1d8:	4b1b      	ldr	r3, [pc, #108]	; (a248 <mayfly_xtal_retain+0x84>)
    a1da:	9201      	str	r2, [sp, #4]
    a1dc:	9200      	str	r2, [sp, #0]
    a1de:	681c      	ldr	r4, [r3, #0]
    a1e0:	491a      	ldr	r1, [pc, #104]	; (a24c <mayfly_xtal_retain+0x88>)
    a1e2:	4b1b      	ldr	r3, [pc, #108]	; (a250 <mayfly_xtal_retain+0x8c>)
    a1e4:	481b      	ldr	r0, [pc, #108]	; (a254 <mayfly_xtal_retain+0x90>)
			LL_ASSERT(!retval);
    a1e6:	47a0      	blx	r4
    a1e8:	4040      	eors	r0, r0
    a1ea:	f380 8811 	msr	BASEPRI, r0
    a1ee:	f04f 0004 	mov.w	r0, #4
    a1f2:	df02      	svc	2
			s_xtal_retained = 1;
    a1f4:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    a1f6:	4b18      	ldr	r3, [pc, #96]	; (a258 <mayfly_xtal_retain+0x94>)
    a1f8:	4611      	mov	r1, r2
    a1fa:	f7fc fe21 	bl	6e40 <mayfly_enqueue>
			LL_ASSERT(!retval);
    a1fe:	b1e8      	cbz	r0, a23c <mayfly_xtal_retain+0x78>
    a200:	4a10      	ldr	r2, [pc, #64]	; (a244 <mayfly_xtal_retain+0x80>)
    a202:	4b11      	ldr	r3, [pc, #68]	; (a248 <mayfly_xtal_retain+0x84>)
    a204:	9201      	str	r2, [sp, #4]
    a206:	9200      	str	r2, [sp, #0]
    a208:	681c      	ldr	r4, [r3, #0]
    a20a:	4910      	ldr	r1, [pc, #64]	; (a24c <mayfly_xtal_retain+0x88>)
    a20c:	4b10      	ldr	r3, [pc, #64]	; (a250 <mayfly_xtal_retain+0x8c>)
    a20e:	4813      	ldr	r0, [pc, #76]	; (a25c <mayfly_xtal_retain+0x98>)
    a210:	e7e9      	b.n	a1e6 <mayfly_xtal_retain+0x22>
		if (s_xtal_retained) {
    a212:	b19a      	cbz	r2, a23c <mayfly_xtal_retain+0x78>
			s_xtal_retained = 0;
    a214:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    a216:	b178      	cbz	r0, a238 <mayfly_xtal_retain+0x74>
    a218:	2801      	cmp	r0, #1
    a21a:	d104      	bne.n	a226 <mayfly_xtal_retain+0x62>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    a21c:	4b10      	ldr	r3, [pc, #64]	; (a260 <mayfly_xtal_retain+0x9c>)
			retval = mayfly_enqueue(caller_id,
    a21e:	2200      	movs	r2, #0
    a220:	4611      	mov	r1, r2
    a222:	4620      	mov	r0, r4
    a224:	e7e9      	b.n	a1fa <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    a226:	4a07      	ldr	r2, [pc, #28]	; (a244 <mayfly_xtal_retain+0x80>)
    a228:	4b07      	ldr	r3, [pc, #28]	; (a248 <mayfly_xtal_retain+0x84>)
    a22a:	9201      	str	r2, [sp, #4]
    a22c:	9200      	str	r2, [sp, #0]
    a22e:	681c      	ldr	r4, [r3, #0]
    a230:	4906      	ldr	r1, [pc, #24]	; (a24c <mayfly_xtal_retain+0x88>)
    a232:	4b07      	ldr	r3, [pc, #28]	; (a250 <mayfly_xtal_retain+0x8c>)
    a234:	480b      	ldr	r0, [pc, #44]	; (a264 <mayfly_xtal_retain+0xa0>)
    a236:	e7d6      	b.n	a1e6 <mayfly_xtal_retain+0x22>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    a238:	4b0b      	ldr	r3, [pc, #44]	; (a268 <mayfly_xtal_retain+0xa4>)
    a23a:	e7f0      	b.n	a21e <mayfly_xtal_retain+0x5a>
}
    a23c:	b002      	add	sp, #8
    a23e:	bd10      	pop	{r4, pc}
    a240:	20000b10 	.word	0x20000b10
    a244:	000159e9 	.word	0x000159e9
    a248:	20003ad4 	.word	0x20003ad4
    a24c:	00016791 	.word	0x00016791
    a250:	00017fa3 	.word	0x00017fa3
    a254:	00018a3b 	.word	0x00018a3b
    a258:	20003e78 	.word	0x20003e78
    a25c:	00018a6b 	.word	0x00018a6b
    a260:	20003e98 	.word	0x20003e98
    a264:	000166ef 	.word	0x000166ef
    a268:	20003e88 	.word	0x20003e88

0000a26c <rx_packet_set>:
{
    a26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    a26e:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    a272:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    a274:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    a276:	f004 0407 	and.w	r4, r4, #7
{
    a27a:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    a27c:	4620      	mov	r0, r4
    a27e:	2100      	movs	r1, #0
    a280:	f008 ff88 	bl	13194 <radio_phy_set>
	if (conn->enc_rx) {
    a284:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    a288:	f013 0f10 	tst.w	r3, #16
    a28c:	ea4f 0244 	mov.w	r2, r4, lsl #1
    a290:	d010      	beq.n	a2b4 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    a292:	1d29      	adds	r1, r5, #4
    a294:	f042 0201 	orr.w	r2, r2, #1
    a298:	b2c9      	uxtb	r1, r1
    a29a:	2008      	movs	r0, #8
    a29c:	f008 ffc0 	bl	13220 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    a2a0:	463a      	mov	r2, r7
    a2a2:	4621      	mov	r1, r4
    a2a4:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    a2a8:	f009 f9fe 	bl	136a8 <radio_ccm_rx_pkt_set>
}
    a2ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    a2b0:	f008 bfe4 	b.w	1327c <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    a2b4:	2008      	movs	r0, #8
    a2b6:	f042 0201 	orr.w	r2, r2, #1
    a2ba:	b2e9      	uxtb	r1, r5
    a2bc:	f008 ffb0 	bl	13220 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    a2c0:	4638      	mov	r0, r7
    a2c2:	e7f3      	b.n	a2ac <rx_packet_set+0x40>

0000a2c4 <tx_packet_set>:
{
    a2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a2c6:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    a2c8:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    a2cc:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    a2ce:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    a2d2:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    a2d4:	09c9      	lsrs	r1, r1, #7
    a2d6:	4620      	mov	r0, r4
    a2d8:	f008 ff5c 	bl	13194 <radio_phy_set>
	if (conn->enc_tx) {
    a2dc:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    a2e0:	f013 0f20 	tst.w	r3, #32
    a2e4:	ea4f 0244 	mov.w	r2, r4, lsl #1
    a2e8:	d00f      	beq.n	a30a <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    a2ea:	1d29      	adds	r1, r5, #4
    a2ec:	b2c9      	uxtb	r1, r1
    a2ee:	2008      	movs	r0, #8
    a2f0:	f042 0201 	orr.w	r2, r2, #1
    a2f4:	f008 ff94 	bl	13220 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    a2f8:	4639      	mov	r1, r7
    a2fa:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    a2fe:	f009 fa0f 	bl	13720 <radio_ccm_tx_pkt_set>
}
    a302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    a306:	f008 bfbf 	b.w	13288 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    a30a:	2008      	movs	r0, #8
    a30c:	f042 0201 	orr.w	r2, r2, #1
    a310:	b2e9      	uxtb	r1, r5
    a312:	f008 ff85 	bl	13220 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    a316:	4638      	mov	r0, r7
    a318:	e7f3      	b.n	a302 <tx_packet_set+0x3e>
    a31a:	0000      	movs	r0, r0
    a31c:	0000      	movs	r0, r0
	...

0000a320 <sched_free_win_offset_calc>:
{
    a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a324:	b08f      	sub	sp, #60	; 0x3c
    a326:	4692      	mov	sl, r2
    a328:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a32a:	6803      	ldr	r3, [r0, #0]
{
    a32c:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a32e:	2b00      	cmp	r3, #0
{
    a330:	4680      	mov	r8, r0
    a332:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a334:	da3a      	bge.n	a3ac <sched_free_win_offset_calc+0x8c>
		u32_t ticks_prepare_to_start =
    a336:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    a338:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    a33c:	4291      	cmp	r1, r2
    a33e:	bf2c      	ite	cs
    a340:	1a5a      	subcs	r2, r3, r1
    a342:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    a344:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a346:	f8d8 200c 	ldr.w	r2, [r8, #12]
    a34a:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a34c:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a34e:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a350:	18d3      	adds	r3, r2, r3
    a352:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a354:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a358:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a35c:	940c      	str	r4, [sp, #48]	; 0x30
    a35e:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a360:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a362:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    a364:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a366:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a368:	2302      	movs	r3, #2
    a36a:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a36c:	ab0d      	add	r3, sp, #52	; 0x34
    a36e:	9302      	str	r3, [sp, #8]
    a370:	4b81      	ldr	r3, [pc, #516]	; (a578 <sched_free_win_offset_calc+0x258>)
    a372:	9301      	str	r3, [sp, #4]
    a374:	ab0b      	add	r3, sp, #44	; 0x2c
    a376:	9300      	str	r3, [sp, #0]
    a378:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    a37c:	ab0c      	add	r3, sp, #48	; 0x30
    a37e:	2101      	movs	r1, #1
    a380:	2000      	movs	r0, #0
    a382:	f7fd fbf5 	bl	7b70 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a386:	2802      	cmp	r0, #2
    a388:	d019      	beq.n	a3be <sched_free_win_offset_calc+0x9e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a38a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a38c:	b1db      	cbz	r3, a3c6 <sched_free_win_offset_calc+0xa6>
    a38e:	4a7b      	ldr	r2, [pc, #492]	; (a57c <sched_free_win_offset_calc+0x25c>)
    a390:	4b7b      	ldr	r3, [pc, #492]	; (a580 <sched_free_win_offset_calc+0x260>)
    a392:	9201      	str	r2, [sp, #4]
    a394:	9200      	str	r2, [sp, #0]
    a396:	681c      	ldr	r4, [r3, #0]
    a398:	497a      	ldr	r1, [pc, #488]	; (a584 <sched_free_win_offset_calc+0x264>)
    a39a:	4b7b      	ldr	r3, [pc, #492]	; (a588 <sched_free_win_offset_calc+0x268>)
    a39c:	487b      	ldr	r0, [pc, #492]	; (a58c <sched_free_win_offset_calc+0x26c>)
			LL_ASSERT(0);
    a39e:	47a0      	blx	r4
    a3a0:	4040      	eors	r0, r0
    a3a2:	f380 8811 	msr	BASEPRI, r0
    a3a6:	f04f 0004 	mov.w	r0, #4
    a3aa:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    a3ac:	4293      	cmp	r3, r2
    a3ae:	bf38      	it	cc
    a3b0:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    a3b2:	2200      	movs	r2, #0
    a3b4:	e7c6      	b.n	a344 <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a3b6:	2101      	movs	r1, #1
    a3b8:	2000      	movs	r0, #0
    a3ba:	f7fd fc57 	bl	7c6c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a3be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a3c0:	2b02      	cmp	r3, #2
    a3c2:	d0f8      	beq.n	a3b6 <sched_free_win_offset_calc+0x96>
    a3c4:	e7e1      	b.n	a38a <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    a3c6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    a3ca:	2aff      	cmp	r2, #255	; 0xff
    a3cc:	d066      	beq.n	a49c <sched_free_win_offset_calc+0x17c>
		if ((ticker_id_prev != 0xff) &&
    a3ce:	2fff      	cmp	r7, #255	; 0xff
    a3d0:	d00b      	beq.n	a3ea <sched_free_win_offset_calc+0xca>
    a3d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a3d4:	4599      	cmp	r9, r3
    a3d6:	d008      	beq.n	a3ea <sched_free_win_offset_calc+0xca>
			LL_ASSERT(0);
    a3d8:	4a68      	ldr	r2, [pc, #416]	; (a57c <sched_free_win_offset_calc+0x25c>)
    a3da:	4b69      	ldr	r3, [pc, #420]	; (a580 <sched_free_win_offset_calc+0x260>)
    a3dc:	9201      	str	r2, [sp, #4]
    a3de:	9200      	str	r2, [sp, #0]
    a3e0:	681c      	ldr	r4, [r3, #0]
    a3e2:	4968      	ldr	r1, [pc, #416]	; (a584 <sched_free_win_offset_calc+0x264>)
    a3e4:	4b68      	ldr	r3, [pc, #416]	; (a588 <sched_free_win_offset_calc+0x268>)
    a3e6:	486a      	ldr	r0, [pc, #424]	; (a590 <sched_free_win_offset_calc+0x270>)
    a3e8:	e7d9      	b.n	a39e <sched_free_win_offset_calc+0x7e>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a3ea:	2a05      	cmp	r2, #5
    a3ec:	d951      	bls.n	a492 <sched_free_win_offset_calc+0x172>
				  _radio.connection_count)) {
    a3ee:	4869      	ldr	r0, [pc, #420]	; (a594 <sched_free_win_offset_calc+0x274>)
    a3f0:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a3f4:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a3f6:	429a      	cmp	r2, r3
    a3f8:	da4b      	bge.n	a492 <sched_free_win_offset_calc+0x172>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    a3fa:	2a06      	cmp	r2, #6
    a3fc:	f000 8092 	beq.w	a524 <sched_free_win_offset_calc+0x204>
		if (ticker_id_other != 0xFF) {
    a400:	9b06      	ldr	r3, [sp, #24]
    a402:	2bff      	cmp	r3, #255	; 0xff
    a404:	d14a      	bne.n	a49c <sched_free_win_offset_calc+0x17c>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a406:	3a07      	subs	r2, #7
    a408:	b292      	uxth	r2, r2
    a40a:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a40e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a412:	f7fc fc7f 	bl	6d14 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    a416:	4580      	cmp	r8, r0
    a418:	d03b      	beq.n	a492 <sched_free_win_offset_calc+0x172>
    a41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a41c:	b91b      	cbnz	r3, a426 <sched_free_win_offset_calc+0x106>
    a41e:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a422:	2b00      	cmp	r3, #0
    a424:	db35      	blt.n	a492 <sched_free_win_offset_calc+0x172>
			u32_t ticks_to_expire_normal =
    a426:	9b05      	ldr	r3, [sp, #20]
    a428:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    a42a:	6841      	ldr	r1, [r0, #4]
    a42c:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a42e:	6803      	ldr	r3, [r0, #0]
    a430:	2b00      	cmp	r3, #0
    a432:	da4e      	bge.n	a4d2 <sched_free_win_offset_calc+0x1b2>
				u32_t ticks_prepare_to_start =
    a434:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    a436:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a43a:	428a      	cmp	r2, r1
    a43c:	bf2c      	ite	cs
    a43e:	18b6      	addcs	r6, r6, r2
    a440:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    a442:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    a444:	68c2      	ldr	r2, [r0, #12]
    a446:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    a44a:	444b      	add	r3, r9
    a44c:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    a44e:	f8da 3000 	ldr.w	r3, [sl]
    a452:	429e      	cmp	r6, r3
    a454:	d916      	bls.n	a484 <sched_free_win_offset_calc+0x164>
    a456:	429d      	cmp	r5, r3
    a458:	bf38      	it	cc
    a45a:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    a45c:	9b07      	ldr	r3, [sp, #28]
    a45e:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    a462:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a464:	781b      	ldrb	r3, [r3, #0]
    a466:	42a3      	cmp	r3, r4
    a468:	d905      	bls.n	a476 <sched_free_win_offset_calc+0x156>
				       (ticker_ticks_diff_get(
    a46a:	4629      	mov	r1, r5
    a46c:	4630      	mov	r0, r6
    a46e:	f7fd fc15 	bl	7c9c <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    a472:	42b8      	cmp	r0, r7
    a474:	d231      	bcs.n	a4da <sched_free_win_offset_calc+0x1ba>
				if (_win_offset >= conn_interval) {
    a476:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    a47a:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    a47c:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    a480:	4293      	cmp	r3, r2
    a482:	d20b      	bcs.n	a49c <sched_free_win_offset_calc+0x17c>
			ticks_anchor_prev = ticks_anchor;
    a484:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    a488:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a48c:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    a490:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    a492:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a494:	781b      	ldrb	r3, [r3, #0]
    a496:	42a3      	cmp	r3, r4
    a498:	f63f af66 	bhi.w	a368 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    a49c:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    a4a0:	2bff      	cmp	r3, #255	; 0xff
    a4a2:	d111      	bne.n	a4c8 <sched_free_win_offset_calc+0x1a8>
    a4a4:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a4a8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; a598 <sched_free_win_offset_calc+0x278>
    a4ac:	a730      	add	r7, pc, #192	; (adr r7, a570 <sched_free_win_offset_calc+0x250>)
    a4ae:	e9d7 6700 	ldrd	r6, r7, [r7]
    a4b2:	429d      	cmp	r5, r3
    a4b4:	bf38      	it	cc
    a4b6:	461d      	movcc	r5, r3
    a4b8:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    a4bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a4be:	781b      	ldrb	r3, [r3, #0]
    a4c0:	42a3      	cmp	r3, r4
    a4c2:	d831      	bhi.n	a528 <sched_free_win_offset_calc+0x208>
		*ticks_to_offset_next = ticks_to_expire_prev;
    a4c4:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    a4c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a4ca:	701c      	strb	r4, [r3, #0]
}
    a4cc:	b00f      	add	sp, #60	; 0x3c
    a4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    a4d2:	428b      	cmp	r3, r1
    a4d4:	bf38      	it	cc
    a4d6:	460b      	movcc	r3, r1
    a4d8:	e7b4      	b.n	a444 <sched_free_win_offset_calc+0x124>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a4da:	4a2f      	ldr	r2, [pc, #188]	; (a598 <sched_free_win_offset_calc+0x278>)
    a4dc:	eb05 030b 	add.w	r3, r5, fp
    a4e0:	fba3 0102 	umull	r0, r1, r3, r2
    a4e4:	2207      	movs	r2, #7
    a4e6:	fb02 1103 	mla	r1, r2, r3, r1
    a4ea:	a321      	add	r3, pc, #132	; (adr r3, a570 <sched_free_win_offset_calc+0x250>)
    a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4f0:	f7f5 fe90 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    a4f4:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a4f8:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    a4fc:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a4fe:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    a500:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a502:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    a506:	d20b      	bcs.n	a520 <sched_free_win_offset_calc+0x200>
					memcpy(win_offset +
    a508:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a50a:	2202      	movs	r2, #2
    a50c:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a510:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    a514:	3401      	adds	r4, #1
					memcpy(win_offset +
    a516:	f7f7 fb83 	bl	1c20 <memcpy>
					offset_index++;
    a51a:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    a51c:	3528      	adds	r5, #40	; 0x28
    a51e:	e7a0      	b.n	a462 <sched_free_win_offset_calc+0x142>
						ticks_to_expire_prev = 0;
    a520:	2500      	movs	r5, #0
    a522:	e7a8      	b.n	a476 <sched_free_win_offset_calc+0x156>
    a524:	9206      	str	r2, [sp, #24]
    a526:	e7b4      	b.n	a492 <sched_free_win_offset_calc+0x172>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a528:	eb05 030b 	add.w	r3, r5, fp
    a52c:	fba3 0108 	umull	r0, r1, r3, r8
    a530:	fb09 1103 	mla	r1, r9, r3, r1
    a534:	4632      	mov	r2, r6
    a536:	463b      	mov	r3, r7
    a538:	f7f5 fe6c 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    a53c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a540:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    a544:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a546:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    a548:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a54a:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    a54e:	d90b      	bls.n	a568 <sched_free_win_offset_calc+0x248>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a550:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a552:	2202      	movs	r2, #2
    a554:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a558:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    a55c:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a55e:	f7f7 fb5f 	bl	1c20 <memcpy>
			offset_index++;
    a562:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    a564:	3528      	adds	r5, #40	; 0x28
    a566:	e7a9      	b.n	a4bc <sched_free_win_offset_calc+0x19c>
				ticks_to_expire_prev = 0;
    a568:	2500      	movs	r5, #0
    a56a:	e7ab      	b.n	a4c4 <sched_free_win_offset_calc+0x1a4>
    a56c:	f3af 8000 	nop.w
    a570:	3b9aca00 	.word	0x3b9aca00
    a574:	00000000 	.word	0x00000000
    a578:	00009b19 	.word	0x00009b19
    a57c:	000159e9 	.word	0x000159e9
    a580:	20003ad4 	.word	0x20003ad4
    a584:	00016791 	.word	0x00016791
    a588:	0001801f 	.word	0x0001801f
    a58c:	00018df0 	.word	0x00018df0
    a590:	000166ef 	.word	0x000166ef
    a594:	200008f0 	.word	0x200008f0
    a598:	1afd498d 	.word	0x1afd498d

0000a59c <mayfly_sched_free_win_offset_calc>:
{
    a59c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    a59e:	2300      	movs	r3, #0
    a5a0:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    a5a2:	2306      	movs	r3, #6
    a5a4:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    a5a8:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a5ac:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    a5b0:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    a5b2:	bfbe      	ittt	lt
    a5b4:	4602      	movlt	r2, r0
    a5b6:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    a5b8:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a5bc:	9101      	str	r1, [sp, #4]
    a5be:	f10d 010b 	add.w	r1, sp, #11
    a5c2:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    a5c4:	bfa8      	it	ge
    a5c6:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a5c8:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    a5cc:	2100      	movs	r1, #0
    a5ce:	f7ff fea7 	bl	a320 <sched_free_win_offset_calc>
}
    a5d2:	b005      	add	sp, #20
    a5d4:	f85d fb04 	ldr.w	pc, [sp], #4

0000a5d8 <mayfly_sched_win_offset_select>:
{
    a5d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a5dc:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    a5e0:	b089      	sub	sp, #36	; 0x24
    a5e2:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a5e4:	4840      	ldr	r0, [pc, #256]	; (a6e8 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    a5e6:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a5e8:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a5ea:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    a5ee:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a5f2:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a5f6:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a5f8:	fb03 1102 	mla	r1, r3, r2, r1
    a5fc:	a338      	add	r3, pc, #224	; (adr r3, a6e0 <mayfly_sched_win_offset_select+0x108>)
    a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a602:	9505      	str	r5, [sp, #20]
    a604:	6075      	str	r5, [r6, #4]
    a606:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a608:	f7f5 fe04 	bl	214 <__aeabi_uldivmod>
    a60c:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a60e:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a612:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a616:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a61a:	9100      	str	r1, [sp, #0]
    a61c:	9601      	str	r6, [sp, #4]
    a61e:	2101      	movs	r1, #1
    a620:	4620      	mov	r0, r4
    a622:	f7ff fe7d 	bl	a320 <sched_free_win_offset_calc>
    a626:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    a62a:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    a62e:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    a632:	2202      	movs	r2, #2
    a634:	4639      	mov	r1, r7
    a636:	f10d 000e 	add.w	r0, sp, #14
    a63a:	f7f7 faf1 	bl	1c20 <memcpy>
		while (offset_index_m < offset_m_max) {
    a63e:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    a642:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    a646:	2300      	movs	r3, #0
    a648:	b2d9      	uxtb	r1, r3
    a64a:	4288      	cmp	r0, r1
    a64c:	d811      	bhi.n	a672 <mayfly_sched_win_offset_select+0x9a>
    a64e:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    a650:	4547      	cmp	r7, r8
    a652:	d1ee      	bne.n	a632 <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    a654:	b9b5      	cbnz	r5, a684 <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    a656:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    a65a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a65e:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a660:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a664:	2202      	movs	r2, #2
    a666:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a668:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    a66c:	f7f7 fad8 	bl	1c20 <memcpy>
    a670:	e027      	b.n	a6c2 <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    a672:	454a      	cmp	r2, r9
    a674:	d004      	beq.n	a680 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    a676:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    a67a:	4291      	cmp	r1, r2
    a67c:	d024      	beq.n	a6c8 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    a67e:	2501      	movs	r5, #1
    a680:	3301      	adds	r3, #1
    a682:	e7e1      	b.n	a648 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    a684:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a688:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a68c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a690:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    a694:	4b15      	ldr	r3, [pc, #84]	; (a6ec <mayfly_sched_win_offset_select+0x114>)
    a696:	2200      	movs	r2, #0
    a698:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    a69c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a6a0:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    a6a4:	f042 0203 	orr.w	r2, r2, #3
    a6a8:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    a6ac:	2203      	movs	r2, #3
    a6ae:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    a6b2:	2211      	movs	r2, #17
    a6b4:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    a6b8:	220f      	movs	r2, #15
    a6ba:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    a6be:	2220      	movs	r2, #32
    a6c0:	701a      	strb	r2, [r3, #0]
}
    a6c2:	b009      	add	sp, #36	; 0x24
    a6c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    a6c8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a6cc:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a6ce:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a6d2:	2202      	movs	r2, #2
    a6d4:	f10d 010e 	add.w	r1, sp, #14
    a6d8:	e7c6      	b.n	a668 <mayfly_sched_win_offset_select+0x90>
    a6da:	bf00      	nop
    a6dc:	f3af 8000 	nop.w
    a6e0:	1afd498d 	.word	0x1afd498d
    a6e4:	00000007 	.word	0x00000007
    a6e8:	09ce5400 	.word	0x09ce5400
    a6ec:	200008f0 	.word	0x200008f0

0000a6f0 <sched_after_mstr_free_slot_get>:
{
    a6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6f4:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a6f6:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    a6f8:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    a6fa:	f8df 9140 	ldr.w	r9, [pc, #320]	; a83c <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    a6fe:	f88d 501f 	strb.w	r5, [sp, #31]
{
    a702:	4680      	mov	r8, r0
    a704:	4693      	mov	fp, r2
    a706:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    a708:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a70c:	601c      	str	r4, [r3, #0]
    a70e:	9408      	str	r4, [sp, #32]
    a710:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a712:	2302      	movs	r3, #2
    a714:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a716:	ab09      	add	r3, sp, #36	; 0x24
    a718:	9302      	str	r3, [sp, #8]
    a71a:	4b41      	ldr	r3, [pc, #260]	; (a820 <sched_after_mstr_free_slot_get+0x130>)
    a71c:	9301      	str	r3, [sp, #4]
    a71e:	ab08      	add	r3, sp, #32
    a720:	9300      	str	r3, [sp, #0]
    a722:	f10d 021f 	add.w	r2, sp, #31
    a726:	465b      	mov	r3, fp
    a728:	4641      	mov	r1, r8
    a72a:	2000      	movs	r0, #0
    a72c:	f7fd fa20 	bl	7b70 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a730:	2802      	cmp	r0, #2
    a732:	d014      	beq.n	a75e <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a734:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a736:	b1b3      	cbz	r3, a766 <sched_after_mstr_free_slot_get+0x76>
    a738:	4a3a      	ldr	r2, [pc, #232]	; (a824 <sched_after_mstr_free_slot_get+0x134>)
    a73a:	4b3b      	ldr	r3, [pc, #236]	; (a828 <sched_after_mstr_free_slot_get+0x138>)
    a73c:	9201      	str	r2, [sp, #4]
    a73e:	9200      	str	r2, [sp, #0]
    a740:	681c      	ldr	r4, [r3, #0]
    a742:	493a      	ldr	r1, [pc, #232]	; (a82c <sched_after_mstr_free_slot_get+0x13c>)
    a744:	4b3a      	ldr	r3, [pc, #232]	; (a830 <sched_after_mstr_free_slot_get+0x140>)
    a746:	483b      	ldr	r0, [pc, #236]	; (a834 <sched_after_mstr_free_slot_get+0x144>)
    a748:	47a0      	blx	r4
    a74a:	4040      	eors	r0, r0
    a74c:	f380 8811 	msr	BASEPRI, r0
    a750:	f04f 0004 	mov.w	r0, #4
    a754:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a756:	4641      	mov	r1, r8
    a758:	2000      	movs	r0, #0
    a75a:	f7fd fa87 	bl	7c6c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a760:	2b02      	cmp	r3, #2
    a762:	d0f8      	beq.n	a756 <sched_after_mstr_free_slot_get+0x66>
    a764:	e7e6      	b.n	a734 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    a766:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a76a:	2aff      	cmp	r2, #255	; 0xff
    a76c:	d04e      	beq.n	a80c <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a76e:	2a06      	cmp	r2, #6
    a770:	d9cf      	bls.n	a712 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    a772:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a776:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a778:	429a      	cmp	r2, r3
    a77a:	daca      	bge.n	a712 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a77c:	3a07      	subs	r2, #7
    a77e:	b292      	uxth	r2, r2
    a780:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a784:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    a788:	f7fc fac4 	bl	6d14 <mem_get>
		if (conn && !conn->role) {
    a78c:	2800      	cmp	r0, #0
    a78e:	d0c0      	beq.n	a712 <sched_after_mstr_free_slot_get+0x22>
    a790:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a794:	2b00      	cmp	r3, #0
    a796:	dbbc      	blt.n	a712 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a798:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    a79a:	9a08      	ldr	r2, [sp, #32]
    a79c:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a7a0:	2b00      	cmp	r3, #0
    a7a2:	da12      	bge.n	a7ca <sched_after_mstr_free_slot_get+0xda>
    a7a4:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    a7a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a7aa:	4571      	cmp	r1, lr
    a7ac:	bf2c      	ite	cs
    a7ae:	1852      	addcs	r2, r2, r1
    a7b0:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    a7b2:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    a7b4:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    a7b6:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    a7b8:	f101 0104 	add.w	r1, r1, #4
    a7bc:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    a7be:	d108      	bne.n	a7d2 <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    a7c0:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a7c4:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    a7c6:	4616      	mov	r6, r2
    a7c8:	e7a3      	b.n	a712 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    a7ca:	4573      	cmp	r3, lr
    a7cc:	bf38      	it	cc
    a7ce:	4673      	movcc	r3, lr
    a7d0:	e7f0      	b.n	a7b4 <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    a7d2:	4631      	mov	r1, r6
    a7d4:	4610      	mov	r0, r2
    a7d6:	9305      	str	r3, [sp, #20]
    a7d8:	9204      	str	r2, [sp, #16]
    a7da:	f7fd fa5f 	bl	7c9c <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    a7de:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    a7e2:	4288      	cmp	r0, r1
    a7e4:	9a04      	ldr	r2, [sp, #16]
    a7e6:	9b05      	ldr	r3, [sp, #20]
    a7e8:	d9ea      	bls.n	a7c0 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a7ea:	4813      	ldr	r0, [pc, #76]	; (a838 <sched_after_mstr_free_slot_get+0x148>)
    a7ec:	4434      	add	r4, r6
    a7ee:	fba4 0100 	umull	r0, r1, r4, r0
    a7f2:	2307      	movs	r3, #7
    a7f4:	fb03 1104 	mla	r1, r3, r4, r1
    a7f8:	a307      	add	r3, pc, #28	; (adr r3, a818 <sched_after_mstr_free_slot_get+0x128>)
    a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    a7fe:	f7f5 fd09 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    a802:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a804:	6038      	str	r0, [r7, #0]
}
    a806:	b00b      	add	sp, #44	; 0x2c
    a808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    a80c:	2dff      	cmp	r5, #255	; 0xff
    a80e:	d1ec      	bne.n	a7ea <sched_after_mstr_free_slot_get+0xfa>
    a810:	e7f9      	b.n	a806 <sched_after_mstr_free_slot_get+0x116>
    a812:	bf00      	nop
    a814:	f3af 8000 	nop.w
    a818:	3b9aca00 	.word	0x3b9aca00
    a81c:	00000000 	.word	0x00000000
    a820:	00009b19 	.word	0x00009b19
    a824:	000159e9 	.word	0x000159e9
    a828:	20003ad4 	.word	0x20003ad4
    a82c:	00016791 	.word	0x00016791
    a830:	00017fdf 	.word	0x00017fdf
    a834:	00018df0 	.word	0x00018df0
    a838:	1afd498d 	.word	0x1afd498d
    a83c:	200008f0 	.word	0x200008f0

0000a840 <isr_adv_ci_adva_check>:
{
    a840:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    a842:	7804      	ldrb	r4, [r0, #0]
    a844:	780a      	ldrb	r2, [r1, #0]
    a846:	f3c4 1380 	ubfx	r3, r4, #6, #1
    a84a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a84e:	d119      	bne.n	a884 <isr_adv_ci_adva_check+0x44>
    a850:	f004 040f 	and.w	r4, r4, #15
    a854:	2c01      	cmp	r4, #1
    a856:	f101 0608 	add.w	r6, r1, #8
    a85a:	f100 0502 	add.w	r5, r0, #2
    a85e:	d008      	beq.n	a872 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    a860:	2206      	movs	r2, #6
    a862:	4631      	mov	r1, r6
    a864:	4628      	mov	r0, r5
    a866:	f7f7 f9c6 	bl	1bf6 <memcmp>
			 BDADDR_SIZE)) ||
    a86a:	fab0 f080 	clz	r0, r0
    a86e:	0940      	lsrs	r0, r0, #5
    a870:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    a872:	2206      	movs	r2, #6
    a874:	4631      	mov	r1, r6
    a876:	4628      	mov	r0, r5
    a878:	f7f7 f9bd 	bl	1bf6 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    a87c:	2800      	cmp	r0, #0
    a87e:	d1ef      	bne.n	a860 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    a880:	4620      	mov	r0, r4
    a882:	bd70      	pop	{r4, r5, r6, pc}
    a884:	2000      	movs	r0, #0
}
    a886:	bd70      	pop	{r4, r5, r6, pc}

0000a888 <packet_rx_enqueue>:
{
    a888:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    a88a:	4a1f      	ldr	r2, [pc, #124]	; (a908 <packet_rx_enqueue+0x80>)
    a88c:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    a890:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    a894:	4299      	cmp	r1, r3
    a896:	d10e      	bne.n	a8b6 <packet_rx_enqueue+0x2e>
    a898:	4a1c      	ldr	r2, [pc, #112]	; (a90c <packet_rx_enqueue+0x84>)
    a89a:	4b1d      	ldr	r3, [pc, #116]	; (a910 <packet_rx_enqueue+0x88>)
    a89c:	9201      	str	r2, [sp, #4]
    a89e:	9200      	str	r2, [sp, #0]
    a8a0:	681c      	ldr	r4, [r3, #0]
    a8a2:	491c      	ldr	r1, [pc, #112]	; (a914 <packet_rx_enqueue+0x8c>)
    a8a4:	4b1c      	ldr	r3, [pc, #112]	; (a918 <packet_rx_enqueue+0x90>)
    a8a6:	481d      	ldr	r0, [pc, #116]	; (a91c <packet_rx_enqueue+0x94>)
	LL_ASSERT(link);
    a8a8:	47a0      	blx	r4
    a8aa:	4040      	eors	r0, r0
    a8ac:	f380 8811 	msr	BASEPRI, r0
    a8b0:	f04f 0004 	mov.w	r0, #4
    a8b4:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    a8b6:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    a8ba:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    a8be:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a8c2:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    a8c6:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a8c8:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    a8ca:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    a8ce:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    a8d2:	3301      	adds	r3, #1
    a8d4:	b2db      	uxtb	r3, r3
		last = 0;
    a8d6:	429c      	cmp	r4, r3
    a8d8:	bf08      	it	eq
    a8da:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    a8dc:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    a8e0:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    a8e4:	f7fc fa3b 	bl	6d5e <memq_enqueue>
	LL_ASSERT(link);
    a8e8:	b940      	cbnz	r0, a8fc <packet_rx_enqueue+0x74>
    a8ea:	4a08      	ldr	r2, [pc, #32]	; (a90c <packet_rx_enqueue+0x84>)
    a8ec:	4b08      	ldr	r3, [pc, #32]	; (a910 <packet_rx_enqueue+0x88>)
    a8ee:	9201      	str	r2, [sp, #4]
    a8f0:	9200      	str	r2, [sp, #0]
    a8f2:	681c      	ldr	r4, [r3, #0]
    a8f4:	4907      	ldr	r1, [pc, #28]	; (a914 <packet_rx_enqueue+0x8c>)
    a8f6:	4b08      	ldr	r3, [pc, #32]	; (a918 <packet_rx_enqueue+0x90>)
    a8f8:	4809      	ldr	r0, [pc, #36]	; (a920 <packet_rx_enqueue+0x98>)
    a8fa:	e7d5      	b.n	a8a8 <packet_rx_enqueue+0x20>
}
    a8fc:	b002      	add	sp, #8
    a8fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    a902:	f006 bfdf 	b.w	118c4 <radio_event_callback>
    a906:	bf00      	nop
    a908:	200008f0 	.word	0x200008f0
    a90c:	000159e9 	.word	0x000159e9
    a910:	20003ad4 	.word	0x20003ad4
    a914:	00016791 	.word	0x00016791
    a918:	000181e2 	.word	0x000181e2
    a91c:	00018ae8 	.word	0x00018ae8
    a920:	000182cb 	.word	0x000182cb

0000a924 <isr_scan_tgta_check>:
{
    a924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a928:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a92a:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    a92c:	f101 0808 	add.w	r8, r1, #8
{
    a930:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a932:	09c0      	lsrs	r0, r0, #7
    a934:	4641      	mov	r1, r8
{
    a936:	4691      	mov	r9, r2
    a938:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a93a:	f007 febb 	bl	126b4 <ctrl_rl_addr_resolve>
    a93e:	4604      	mov	r4, r0
    a940:	b9d8      	cbnz	r0, a97a <isr_scan_tgta_check+0x56>
    a942:	4f1c      	ldr	r7, [pc, #112]	; (a9b4 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a944:	f1ba 0f00 	cmp.w	sl, #0
    a948:	d10e      	bne.n	a968 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a94a:	782b      	ldrb	r3, [r5, #0]
    a94c:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    a950:	09db      	lsrs	r3, r3, #7
    a952:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a956:	d113      	bne.n	a980 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    a958:	2206      	movs	r2, #6
    a95a:	4641      	mov	r1, r8
    a95c:	4816      	ldr	r0, [pc, #88]	; (a9b8 <isr_scan_tgta_check+0x94>)
    a95e:	f7f7 f94a 	bl	1bf6 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a962:	b968      	cbnz	r0, a980 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    a964:	2001      	movs	r0, #1
    a966:	e012      	b.n	a98e <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a968:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    a96c:	07db      	lsls	r3, r3, #31
    a96e:	d5ec      	bpl.n	a94a <isr_scan_tgta_check+0x26>
    a970:	4648      	mov	r0, r9
    a972:	f007 fbd9 	bl	12128 <ctrl_lrpa_get>
    a976:	2800      	cmp	r0, #0
    a978:	d0e7      	beq.n	a94a <isr_scan_tgta_check+0x26>
}
    a97a:	4620      	mov	r0, r4
    a97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a980:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    a984:	f3c0 1001 	ubfx	r0, r0, #4, #2
    a988:	f010 0002 	ands.w	r0, r0, #2
    a98c:	d101      	bne.n	a992 <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    a98e:	4604      	mov	r4, r0
    a990:	e7f3      	b.n	a97a <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a992:	f995 3000 	ldrsb.w	r3, [r5]
    a996:	2b00      	cmp	r3, #0
    a998:	da09      	bge.n	a9ae <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    a99a:	7b6b      	ldrb	r3, [r5, #13]
    a99c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a9a0:	2b40      	cmp	r3, #64	; 0x40
    a9a2:	d104      	bne.n	a9ae <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    a9a4:	2e00      	cmp	r6, #0
    a9a6:	d0dd      	beq.n	a964 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    a9a8:	2001      	movs	r0, #1
    a9aa:	7030      	strb	r0, [r6, #0]
    a9ac:	e7ef      	b.n	a98e <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    a9ae:	2000      	movs	r0, #0
    a9b0:	e7ed      	b.n	a98e <isr_scan_tgta_check+0x6a>
    a9b2:	bf00      	nop
    a9b4:	200008f0 	.word	0x200008f0
    a9b8:	200009d4 	.word	0x200009d4

0000a9bc <isr_rx_scan_report>:
{
    a9bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a9c0:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    a9c2:	2003      	movs	r0, #3
{
    a9c4:	460f      	mov	r7, r1
    a9c6:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    a9c8:	f7ff f8e6 	bl	9b98 <packet_rx_reserve_get>
	if (node_rx == 0) {
    a9cc:	4604      	mov	r4, r0
    a9ce:	2800      	cmp	r0, #0
    a9d0:	d03e      	beq.n	aa50 <isr_rx_scan_report+0x94>
	node_rx->hdr.handle = 0xffff;
    a9d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a9d6:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    a9d8:	4b1e      	ldr	r3, [pc, #120]	; (aa54 <isr_rx_scan_report+0x98>)
    a9da:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    a9de:	075a      	lsls	r2, r3, #29
    a9e0:	d032      	beq.n	aa48 <isr_rx_scan_report+0x8c>
		switch (_radio.scanner.phy) {
    a9e2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a9e6:	b2da      	uxtb	r2, r3
    a9e8:	2a01      	cmp	r2, #1
    a9ea:	d010      	beq.n	aa0e <isr_rx_scan_report+0x52>
    a9ec:	2a04      	cmp	r2, #4
    a9ee:	d00f      	beq.n	aa10 <isr_rx_scan_report+0x54>
			LL_ASSERT(0);
    a9f0:	4a19      	ldr	r2, [pc, #100]	; (aa58 <isr_rx_scan_report+0x9c>)
    a9f2:	4b1a      	ldr	r3, [pc, #104]	; (aa5c <isr_rx_scan_report+0xa0>)
    a9f4:	9201      	str	r2, [sp, #4]
    a9f6:	9200      	str	r2, [sp, #0]
    a9f8:	681c      	ldr	r4, [r3, #0]
    a9fa:	4919      	ldr	r1, [pc, #100]	; (aa60 <isr_rx_scan_report+0xa4>)
    a9fc:	4b19      	ldr	r3, [pc, #100]	; (aa64 <isr_rx_scan_report+0xa8>)
    a9fe:	481a      	ldr	r0, [pc, #104]	; (aa68 <isr_rx_scan_report+0xac>)
    aa00:	47a0      	blx	r4
    aa02:	4040      	eors	r0, r0
    aa04:	f380 8811 	msr	BASEPRI, r0
    aa08:	f04f 0004 	mov.w	r0, #4
    aa0c:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    aa0e:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    aa10:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    aa14:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    aa16:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    aa1a:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    aa1e:	f1b9 0f00 	cmp.w	r9, #0
    aa22:	d013      	beq.n	aa4c <isr_rx_scan_report+0x90>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    aa24:	f008 fcd8 	bl	133d8 <radio_rssi_get>
			     pdu_adv_rx->len] =
    aa28:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    aa2c:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    aa30:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    aa32:	442b      	add	r3, r5
    aa34:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    aa36:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    aa38:	441d      	add	r5, r3
    aa3a:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    aa3c:	f7ff ff24 	bl	a888 <packet_rx_enqueue>
	return 0;
    aa40:	2000      	movs	r0, #0
}
    aa42:	b003      	add	sp, #12
    aa44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    aa48:	2302      	movs	r3, #2
    aa4a:	e7e1      	b.n	aa10 <isr_rx_scan_report+0x54>
			     pdu_adv_rx->len] =
    aa4c:	207f      	movs	r0, #127	; 0x7f
    aa4e:	e7ed      	b.n	aa2c <isr_rx_scan_report+0x70>
		return 1;
    aa50:	2001      	movs	r0, #1
    aa52:	e7f6      	b.n	aa42 <isr_rx_scan_report+0x86>
    aa54:	200008f0 	.word	0x200008f0
    aa58:	000159e9 	.word	0x000159e9
    aa5c:	20003ad4 	.word	0x20003ad4
    aa60:	00016791 	.word	0x00016791
    aa64:	00017e06 	.word	0x00017e06
    aa68:	000166ef 	.word	0x000166ef

0000aa6c <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    aa6c:	4a0b      	ldr	r2, [pc, #44]	; (aa9c <rx_fc_lock+0x30>)
    aa6e:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    aa72:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    aa76:	4299      	cmp	r1, r3
    aa78:	d10e      	bne.n	aa98 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    aa7a:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    aa7e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    aa82:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    aa86:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    aa8a:	3301      	adds	r3, #1
    aa8c:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    aa8e:	2b03      	cmp	r3, #3
    aa90:	bf08      	it	eq
    aa92:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    aa94:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    aa98:	4770      	bx	lr
    aa9a:	bf00      	nop
    aa9c:	200008f0 	.word	0x200008f0

0000aaa0 <ticker_success_assert>:
{
    aaa0:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    aaa2:	b170      	cbz	r0, aac2 <ticker_success_assert+0x22>
    aaa4:	4a08      	ldr	r2, [pc, #32]	; (aac8 <ticker_success_assert+0x28>)
    aaa6:	4b09      	ldr	r3, [pc, #36]	; (aacc <ticker_success_assert+0x2c>)
    aaa8:	9201      	str	r2, [sp, #4]
    aaaa:	9200      	str	r2, [sp, #0]
    aaac:	681c      	ldr	r4, [r3, #0]
    aaae:	4908      	ldr	r1, [pc, #32]	; (aad0 <ticker_success_assert+0x30>)
    aab0:	4b08      	ldr	r3, [pc, #32]	; (aad4 <ticker_success_assert+0x34>)
    aab2:	4809      	ldr	r0, [pc, #36]	; (aad8 <ticker_success_assert+0x38>)
    aab4:	47a0      	blx	r4
    aab6:	4040      	eors	r0, r0
    aab8:	f380 8811 	msr	BASEPRI, r0
    aabc:	f04f 0004 	mov.w	r0, #4
    aac0:	df02      	svc	2
}
    aac2:	b002      	add	sp, #8
    aac4:	bd10      	pop	{r4, pc}
    aac6:	bf00      	nop
    aac8:	000159e9 	.word	0x000159e9
    aacc:	20003ad4 	.word	0x20003ad4
    aad0:	00016791 	.word	0x00016791
    aad4:	00017eef 	.word	0x00017eef
    aad8:	00018f44 	.word	0x00018f44

0000aadc <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    aadc:	2801      	cmp	r0, #1
{
    aade:	b513      	push	{r0, r1, r4, lr}
    aae0:	4b11      	ldr	r3, [pc, #68]	; (ab28 <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    aae2:	d115      	bne.n	ab10 <ticker_stop_adv_assert+0x34>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    aae4:	7c9a      	ldrb	r2, [r3, #18]
    aae6:	2a05      	cmp	r2, #5
    aae8:	d103      	bne.n	aaf2 <ticker_stop_adv_assert+0x16>
			_radio.ticker_id_stop = 0;
    aaea:	2200      	movs	r2, #0
    aaec:	749a      	strb	r2, [r3, #18]
}
    aaee:	b002      	add	sp, #8
    aaf0:	bd10      	pop	{r4, pc}
			LL_ASSERT(0);
    aaf2:	4a0e      	ldr	r2, [pc, #56]	; (ab2c <ticker_stop_adv_assert+0x50>)
    aaf4:	4b0e      	ldr	r3, [pc, #56]	; (ab30 <ticker_stop_adv_assert+0x54>)
    aaf6:	9201      	str	r2, [sp, #4]
    aaf8:	9200      	str	r2, [sp, #0]
    aafa:	681c      	ldr	r4, [r3, #0]
    aafc:	490d      	ldr	r1, [pc, #52]	; (ab34 <ticker_stop_adv_assert+0x58>)
    aafe:	4b0e      	ldr	r3, [pc, #56]	; (ab38 <ticker_stop_adv_assert+0x5c>)
    ab00:	480e      	ldr	r0, [pc, #56]	; (ab3c <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    ab02:	47a0      	blx	r4
    ab04:	4040      	eors	r0, r0
    ab06:	f380 8811 	msr	BASEPRI, r0
    ab0a:	f04f 0004 	mov.w	r0, #4
    ab0e:	df02      	svc	2
    ab10:	7c1b      	ldrb	r3, [r3, #16]
    ab12:	2b05      	cmp	r3, #5
    ab14:	d1eb      	bne.n	aaee <ticker_stop_adv_assert+0x12>
    ab16:	4a05      	ldr	r2, [pc, #20]	; (ab2c <ticker_stop_adv_assert+0x50>)
    ab18:	4b05      	ldr	r3, [pc, #20]	; (ab30 <ticker_stop_adv_assert+0x54>)
    ab1a:	9201      	str	r2, [sp, #4]
    ab1c:	9200      	str	r2, [sp, #0]
    ab1e:	681c      	ldr	r4, [r3, #0]
    ab20:	4904      	ldr	r1, [pc, #16]	; (ab34 <ticker_stop_adv_assert+0x58>)
    ab22:	4b05      	ldr	r3, [pc, #20]	; (ab38 <ticker_stop_adv_assert+0x5c>)
    ab24:	4806      	ldr	r0, [pc, #24]	; (ab40 <ticker_stop_adv_assert+0x64>)
    ab26:	e7ec      	b.n	ab02 <ticker_stop_adv_assert+0x26>
    ab28:	200008f0 	.word	0x200008f0
    ab2c:	000159e9 	.word	0x000159e9
    ab30:	20003ad4 	.word	0x20003ad4
    ab34:	00016791 	.word	0x00016791
    ab38:	00017f05 	.word	0x00017f05
    ab3c:	000166ef 	.word	0x000166ef
    ab40:	00018e8a 	.word	0x00018e8a

0000ab44 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    ab44:	2801      	cmp	r0, #1
{
    ab46:	b513      	push	{r0, r1, r4, lr}
    ab48:	4b11      	ldr	r3, [pc, #68]	; (ab90 <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    ab4a:	d115      	bne.n	ab78 <ticker_stop_scan_assert+0x34>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    ab4c:	7c9a      	ldrb	r2, [r3, #18]
    ab4e:	2a06      	cmp	r2, #6
    ab50:	d103      	bne.n	ab5a <ticker_stop_scan_assert+0x16>
			_radio.ticker_id_stop = 0;
    ab52:	2200      	movs	r2, #0
    ab54:	749a      	strb	r2, [r3, #18]
}
    ab56:	b002      	add	sp, #8
    ab58:	bd10      	pop	{r4, pc}
			LL_ASSERT(0);
    ab5a:	4a0e      	ldr	r2, [pc, #56]	; (ab94 <ticker_stop_scan_assert+0x50>)
    ab5c:	4b0e      	ldr	r3, [pc, #56]	; (ab98 <ticker_stop_scan_assert+0x54>)
    ab5e:	9201      	str	r2, [sp, #4]
    ab60:	9200      	str	r2, [sp, #0]
    ab62:	681c      	ldr	r4, [r3, #0]
    ab64:	490d      	ldr	r1, [pc, #52]	; (ab9c <ticker_stop_scan_assert+0x58>)
    ab66:	4b0e      	ldr	r3, [pc, #56]	; (aba0 <ticker_stop_scan_assert+0x5c>)
    ab68:	480e      	ldr	r0, [pc, #56]	; (aba4 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    ab6a:	47a0      	blx	r4
    ab6c:	4040      	eors	r0, r0
    ab6e:	f380 8811 	msr	BASEPRI, r0
    ab72:	f04f 0004 	mov.w	r0, #4
    ab76:	df02      	svc	2
    ab78:	7c1b      	ldrb	r3, [r3, #16]
    ab7a:	2b06      	cmp	r3, #6
    ab7c:	d1eb      	bne.n	ab56 <ticker_stop_scan_assert+0x12>
    ab7e:	4a05      	ldr	r2, [pc, #20]	; (ab94 <ticker_stop_scan_assert+0x50>)
    ab80:	4b05      	ldr	r3, [pc, #20]	; (ab98 <ticker_stop_scan_assert+0x54>)
    ab82:	9201      	str	r2, [sp, #4]
    ab84:	9200      	str	r2, [sp, #0]
    ab86:	681c      	ldr	r4, [r3, #0]
    ab88:	4904      	ldr	r1, [pc, #16]	; (ab9c <ticker_stop_scan_assert+0x58>)
    ab8a:	4b05      	ldr	r3, [pc, #20]	; (aba0 <ticker_stop_scan_assert+0x5c>)
    ab8c:	4806      	ldr	r0, [pc, #24]	; (aba8 <ticker_stop_scan_assert+0x64>)
    ab8e:	e7ec      	b.n	ab6a <ticker_stop_scan_assert+0x26>
    ab90:	200008f0 	.word	0x200008f0
    ab94:	000159e9 	.word	0x000159e9
    ab98:	20003ad4 	.word	0x20003ad4
    ab9c:	00016791 	.word	0x00016791
    aba0:	00017f1c 	.word	0x00017f1c
    aba4:	000166ef 	.word	0x000166ef
    aba8:	00018f05 	.word	0x00018f05

0000abac <ticker_update_adv_assert>:
{
    abac:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    abae:	b190      	cbz	r0, abd6 <ticker_update_adv_assert+0x2a>
    abb0:	4b0a      	ldr	r3, [pc, #40]	; (abdc <ticker_update_adv_assert+0x30>)
    abb2:	7c9b      	ldrb	r3, [r3, #18]
    abb4:	2b05      	cmp	r3, #5
    abb6:	d00e      	beq.n	abd6 <ticker_update_adv_assert+0x2a>
    abb8:	4a09      	ldr	r2, [pc, #36]	; (abe0 <ticker_update_adv_assert+0x34>)
    abba:	4b0a      	ldr	r3, [pc, #40]	; (abe4 <ticker_update_adv_assert+0x38>)
    abbc:	9201      	str	r2, [sp, #4]
    abbe:	9200      	str	r2, [sp, #0]
    abc0:	681c      	ldr	r4, [r3, #0]
    abc2:	4909      	ldr	r1, [pc, #36]	; (abe8 <ticker_update_adv_assert+0x3c>)
    abc4:	4b09      	ldr	r3, [pc, #36]	; (abec <ticker_update_adv_assert+0x40>)
    abc6:	480a      	ldr	r0, [pc, #40]	; (abf0 <ticker_update_adv_assert+0x44>)
    abc8:	47a0      	blx	r4
    abca:	4040      	eors	r0, r0
    abcc:	f380 8811 	msr	BASEPRI, r0
    abd0:	f04f 0004 	mov.w	r0, #4
    abd4:	df02      	svc	2
}
    abd6:	b002      	add	sp, #8
    abd8:	bd10      	pop	{r4, pc}
    abda:	bf00      	nop
    abdc:	200008f0 	.word	0x200008f0
    abe0:	000159e9 	.word	0x000159e9
    abe4:	20003ad4 	.word	0x20003ad4
    abe8:	00016791 	.word	0x00016791
    abec:	00017f34 	.word	0x00017f34
    abf0:	00018f71 	.word	0x00018f71

0000abf4 <ticker_update_slave_assert>:
{
    abf4:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    abf6:	b198      	cbz	r0, ac20 <ticker_update_slave_assert+0x2c>
    abf8:	4b0a      	ldr	r3, [pc, #40]	; (ac24 <ticker_update_slave_assert+0x30>)
    abfa:	7c9b      	ldrb	r3, [r3, #18]
    abfc:	b2c9      	uxtb	r1, r1
    abfe:	4299      	cmp	r1, r3
    ac00:	d00e      	beq.n	ac20 <ticker_update_slave_assert+0x2c>
    ac02:	4a09      	ldr	r2, [pc, #36]	; (ac28 <ticker_update_slave_assert+0x34>)
    ac04:	4b09      	ldr	r3, [pc, #36]	; (ac2c <ticker_update_slave_assert+0x38>)
    ac06:	9201      	str	r2, [sp, #4]
    ac08:	9200      	str	r2, [sp, #0]
    ac0a:	681c      	ldr	r4, [r3, #0]
    ac0c:	4908      	ldr	r1, [pc, #32]	; (ac30 <ticker_update_slave_assert+0x3c>)
    ac0e:	4b09      	ldr	r3, [pc, #36]	; (ac34 <ticker_update_slave_assert+0x40>)
    ac10:	4809      	ldr	r0, [pc, #36]	; (ac38 <ticker_update_slave_assert+0x44>)
    ac12:	47a0      	blx	r4
    ac14:	4040      	eors	r0, r0
    ac16:	f380 8811 	msr	BASEPRI, r0
    ac1a:	f04f 0004 	mov.w	r0, #4
    ac1e:	df02      	svc	2
}
    ac20:	b002      	add	sp, #8
    ac22:	bd10      	pop	{r4, pc}
    ac24:	200008f0 	.word	0x200008f0
    ac28:	000159e9 	.word	0x000159e9
    ac2c:	20003ad4 	.word	0x20003ad4
    ac30:	00016791 	.word	0x00016791
    ac34:	00017f4d 	.word	0x00017f4d
    ac38:	00018fc0 	.word	0x00018fc0

0000ac3c <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    ac3c:	b513      	push	{r0, r1, r4, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    ac3e:	b170      	cbz	r0, ac5e <ticker_op_latency_cancelled+0x22>
    ac40:	4a0b      	ldr	r2, [pc, #44]	; (ac70 <ticker_op_latency_cancelled+0x34>)
    ac42:	4b0c      	ldr	r3, [pc, #48]	; (ac74 <ticker_op_latency_cancelled+0x38>)
    ac44:	9201      	str	r2, [sp, #4]
    ac46:	9200      	str	r2, [sp, #0]
    ac48:	681c      	ldr	r4, [r3, #0]
    ac4a:	490b      	ldr	r1, [pc, #44]	; (ac78 <ticker_op_latency_cancelled+0x3c>)
    ac4c:	4b0b      	ldr	r3, [pc, #44]	; (ac7c <ticker_op_latency_cancelled+0x40>)
    ac4e:	480c      	ldr	r0, [pc, #48]	; (ac80 <ticker_op_latency_cancelled+0x44>)
    ac50:	47a0      	blx	r4
    ac52:	4040      	eors	r0, r0
    ac54:	f380 8811 	msr	BASEPRI, r0
    ac58:	f04f 0004 	mov.w	r0, #4
    ac5c:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    ac5e:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    ac62:	f360 0341 	bfi	r3, r0, #1, #1
    ac66:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    ac6a:	b002      	add	sp, #8
    ac6c:	bd10      	pop	{r4, pc}
    ac6e:	bf00      	nop
    ac70:	000159e9 	.word	0x000159e9
    ac74:	20003ad4 	.word	0x20003ad4
    ac78:	00016791 	.word	0x00016791
    ac7c:	0001829d 	.word	0x0001829d
    ac80:	00018e56 	.word	0x00018e56

0000ac84 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    ac84:	4b04      	ldr	r3, [pc, #16]	; (ac98 <ticker_job_disable+0x14>)
    ac86:	7d1b      	ldrb	r3, [r3, #20]
    ac88:	b123      	cbz	r3, ac94 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    ac8a:	2101      	movs	r1, #1
    ac8c:	2200      	movs	r2, #0
    ac8e:	4608      	mov	r0, r1
    ac90:	f7fc b8ae 	b.w	6df0 <mayfly_enable>
    ac94:	4770      	bx	lr
    ac96:	bf00      	nop
    ac98:	200008f0 	.word	0x200008f0

0000ac9c <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    ac9c:	2806      	cmp	r0, #6
{
    ac9e:	b510      	push	{r4, lr}
    aca0:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    aca2:	d90a      	bls.n	acba <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    aca4:	4b09      	ldr	r3, [pc, #36]	; (accc <hdr_conn_get+0x30>)
    aca6:	1fc2      	subs	r2, r0, #7
    aca8:	b292      	uxth	r2, r2
    acaa:	f44f 71aa 	mov.w	r1, #340	; 0x154
    acae:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    acb2:	f7fc f82f 	bl	6d14 <mem_get>
    acb6:	6020      	str	r0, [r4, #0]
    acb8:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    acba:	2805      	cmp	r0, #5
    acbc:	d004      	beq.n	acc8 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    acbe:	2806      	cmp	r0, #6
	return NULL;
    acc0:	4803      	ldr	r0, [pc, #12]	; (acd0 <hdr_conn_get+0x34>)
    acc2:	bf18      	it	ne
    acc4:	2000      	movne	r0, #0
    acc6:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    acc8:	4802      	ldr	r0, [pc, #8]	; (acd4 <hdr_conn_get+0x38>)
}
    acca:	bd10      	pop	{r4, pc}
    accc:	200008f0 	.word	0x200008f0
    acd0:	200009c0 	.word	0x200009c0
    acd4:	20000908 	.word	0x20000908

0000acd8 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    acd8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    acda:	4b07      	ldr	r3, [pc, #28]	; (acf8 <event_stop.part.10+0x20>)
    acdc:	4a07      	ldr	r2, [pc, #28]	; (acfc <event_stop.part.10+0x24>)
    acde:	9201      	str	r2, [sp, #4]
    ace0:	9200      	str	r2, [sp, #0]
    ace2:	681c      	ldr	r4, [r3, #0]
    ace4:	4906      	ldr	r1, [pc, #24]	; (ad00 <event_stop.part.10+0x28>)
    ace6:	4b07      	ldr	r3, [pc, #28]	; (ad04 <event_stop.part.10+0x2c>)
    ace8:	4807      	ldr	r0, [pc, #28]	; (ad08 <event_stop.part.10+0x30>)
    acea:	47a0      	blx	r4
    acec:	4040      	eors	r0, r0
    acee:	f380 8811 	msr	BASEPRI, r0
    acf2:	f04f 0004 	mov.w	r0, #4
    acf6:	df02      	svc	2
    acf8:	20003ad4 	.word	0x20003ad4
    acfc:	000159e9 	.word	0x000159e9
    ad00:	00016791 	.word	0x00016791
    ad04:	0001804c 	.word	0x0001804c
    ad08:	00018a6b 	.word	0x00018a6b

0000ad0c <event_stop>:
	s_mfy_radio_stop.param = context;
    ad0c:	4a06      	ldr	r2, [pc, #24]	; (ad28 <event_stop+0x1c>)
{
    ad0e:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    ad10:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ad12:	4613      	mov	r3, r2
    ad14:	2200      	movs	r2, #0
    ad16:	4611      	mov	r1, r2
    ad18:	4610      	mov	r0, r2
    ad1a:	f7fc f891 	bl	6e40 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ad1e:	b108      	cbz	r0, ad24 <event_stop+0x18>
    ad20:	f7ff ffda 	bl	acd8 <event_stop.part.10>
    ad24:	bd08      	pop	{r3, pc}
    ad26:	bf00      	nop
    ad28:	20003e08 	.word	0x20003e08

0000ad2c <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ad2c:	2200      	movs	r2, #0
{
    ad2e:	b513      	push	{r0, r1, r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ad30:	4b0b      	ldr	r3, [pc, #44]	; (ad60 <event_active+0x34>)
    ad32:	4611      	mov	r1, r2
    ad34:	4610      	mov	r0, r2
    ad36:	f7fc f883 	bl	6e40 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ad3a:	b170      	cbz	r0, ad5a <event_active+0x2e>
    ad3c:	4a09      	ldr	r2, [pc, #36]	; (ad64 <event_active+0x38>)
    ad3e:	4b0a      	ldr	r3, [pc, #40]	; (ad68 <event_active+0x3c>)
    ad40:	9201      	str	r2, [sp, #4]
    ad42:	9200      	str	r2, [sp, #0]
    ad44:	681c      	ldr	r4, [r3, #0]
    ad46:	4909      	ldr	r1, [pc, #36]	; (ad6c <event_active+0x40>)
    ad48:	4b09      	ldr	r3, [pc, #36]	; (ad70 <event_active+0x44>)
    ad4a:	480a      	ldr	r0, [pc, #40]	; (ad74 <event_active+0x48>)
    ad4c:	47a0      	blx	r4
    ad4e:	4040      	eors	r0, r0
    ad50:	f380 8811 	msr	BASEPRI, r0
    ad54:	f04f 0004 	mov.w	r0, #4
    ad58:	df02      	svc	2
}
    ad5a:	b002      	add	sp, #8
    ad5c:	bd10      	pop	{r4, pc}
    ad5e:	bf00      	nop
    ad60:	20003dc8 	.word	0x20003dc8
    ad64:	000159e9 	.word	0x000159e9
    ad68:	20003ad4 	.word	0x20003ad4
    ad6c:	00016791 	.word	0x00016791
    ad70:	00017f7c 	.word	0x00017f7c
    ad74:	00018a6b 	.word	0x00018a6b

0000ad78 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ad78:	2200      	movs	r2, #0
{
    ad7a:	b513      	push	{r0, r1, r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ad7c:	4b0b      	ldr	r3, [pc, #44]	; (adac <event_xtal+0x34>)
    ad7e:	4611      	mov	r1, r2
    ad80:	4610      	mov	r0, r2
    ad82:	f7fc f85d 	bl	6e40 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ad86:	b170      	cbz	r0, ada6 <event_xtal+0x2e>
    ad88:	4a09      	ldr	r2, [pc, #36]	; (adb0 <event_xtal+0x38>)
    ad8a:	4b0a      	ldr	r3, [pc, #40]	; (adb4 <event_xtal+0x3c>)
    ad8c:	9201      	str	r2, [sp, #4]
    ad8e:	9200      	str	r2, [sp, #0]
    ad90:	681c      	ldr	r4, [r3, #0]
    ad92:	4909      	ldr	r1, [pc, #36]	; (adb8 <event_xtal+0x40>)
    ad94:	4b09      	ldr	r3, [pc, #36]	; (adbc <event_xtal+0x44>)
    ad96:	480a      	ldr	r0, [pc, #40]	; (adc0 <event_xtal+0x48>)
    ad98:	47a0      	blx	r4
    ad9a:	4040      	eors	r0, r0
    ad9c:	f380 8811 	msr	BASEPRI, r0
    ada0:	f04f 0004 	mov.w	r0, #4
    ada4:	df02      	svc	2
}
    ada6:	b002      	add	sp, #8
    ada8:	bd10      	pop	{r4, pc}
    adaa:	bf00      	nop
    adac:	20003e68 	.word	0x20003e68
    adb0:	000159e9 	.word	0x000159e9
    adb4:	20003ad4 	.word	0x20003ad4
    adb8:	00016791 	.word	0x00016791
    adbc:	00017f98 	.word	0x00017f98
    adc0:	00018a6b 	.word	0x00018a6b

0000adc4 <mayfly_radio_active>:
{
    adc4:	b513      	push	{r0, r1, r4, lr}
    adc6:	4a11      	ldr	r2, [pc, #68]	; (ae0c <mayfly_radio_active+0x48>)
		if (s_active++) {
    adc8:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    adca:	b140      	cbz	r0, adde <mayfly_radio_active+0x1a>
		if (s_active++) {
    adcc:	1c59      	adds	r1, r3, #1
    adce:	7011      	strb	r1, [r2, #0]
    add0:	b9d3      	cbnz	r3, ae08 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    add2:	2001      	movs	r0, #1
}
    add4:	b002      	add	sp, #8
    add6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_active_callback(0);
    adda:	f006 bd71 	b.w	118c0 <radio_active_callback>
		LL_ASSERT(s_active);
    adde:	b973      	cbnz	r3, adfe <mayfly_radio_active+0x3a>
    ade0:	4a0b      	ldr	r2, [pc, #44]	; (ae10 <mayfly_radio_active+0x4c>)
    ade2:	4b0c      	ldr	r3, [pc, #48]	; (ae14 <mayfly_radio_active+0x50>)
    ade4:	9201      	str	r2, [sp, #4]
    ade6:	9200      	str	r2, [sp, #0]
    ade8:	681c      	ldr	r4, [r3, #0]
    adea:	490b      	ldr	r1, [pc, #44]	; (ae18 <mayfly_radio_active+0x54>)
    adec:	4b0b      	ldr	r3, [pc, #44]	; (ae1c <mayfly_radio_active+0x58>)
    adee:	480c      	ldr	r0, [pc, #48]	; (ae20 <mayfly_radio_active+0x5c>)
    adf0:	47a0      	blx	r4
    adf2:	4040      	eors	r0, r0
    adf4:	f380 8811 	msr	BASEPRI, r0
    adf8:	f04f 0004 	mov.w	r0, #4
    adfc:	df02      	svc	2
		if (--s_active) {
    adfe:	3b01      	subs	r3, #1
    ae00:	b2db      	uxtb	r3, r3
    ae02:	7013      	strb	r3, [r2, #0]
    ae04:	2b00      	cmp	r3, #0
    ae06:	d0e5      	beq.n	add4 <mayfly_radio_active+0x10>
}
    ae08:	b002      	add	sp, #8
    ae0a:	bd10      	pop	{r4, pc}
    ae0c:	20000aac 	.word	0x20000aac
    ae10:	000159e9 	.word	0x000159e9
    ae14:	20003ad4 	.word	0x20003ad4
    ae18:	00016791 	.word	0x00016791
    ae1c:	00017f68 	.word	0x00017f68
    ae20:	000189c0 	.word	0x000189c0

0000ae24 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    ae24:	2000      	movs	r0, #0
    ae26:	f7ff bfcd 	b.w	adc4 <mayfly_radio_active>
	...

0000ae2c <mayfly_radio_stop>:
{
    ae2c:	b513      	push	{r0, r1, r4, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    ae2e:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    ae30:	1f03      	subs	r3, r0, #4
    ae32:	2b01      	cmp	r3, #1
    ae34:	d90e      	bls.n	ae54 <mayfly_radio_stop+0x28>
    ae36:	4a10      	ldr	r2, [pc, #64]	; (ae78 <mayfly_radio_stop+0x4c>)
    ae38:	4b10      	ldr	r3, [pc, #64]	; (ae7c <mayfly_radio_stop+0x50>)
    ae3a:	9201      	str	r2, [sp, #4]
    ae3c:	9200      	str	r2, [sp, #0]
    ae3e:	681c      	ldr	r4, [r3, #0]
    ae40:	490f      	ldr	r1, [pc, #60]	; (ae80 <mayfly_radio_stop+0x54>)
    ae42:	4b10      	ldr	r3, [pc, #64]	; (ae84 <mayfly_radio_stop+0x58>)
    ae44:	4810      	ldr	r0, [pc, #64]	; (ae88 <mayfly_radio_stop+0x5c>)
    ae46:	47a0      	blx	r4
    ae48:	4040      	eors	r0, r0
    ae4a:	f380 8811 	msr	BASEPRI, r0
    ae4e:	f04f 0004 	mov.w	r0, #4
    ae52:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    ae54:	4a0d      	ldr	r2, [pc, #52]	; (ae8c <mayfly_radio_stop+0x60>)
    ae56:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    ae58:	b143      	cbz	r3, ae6c <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    ae5a:	3b04      	subs	r3, #4
    ae5c:	2b01      	cmp	r3, #1
    ae5e:	d905      	bls.n	ae6c <mayfly_radio_stop+0x40>
			_radio.state = state;
    ae60:	7510      	strb	r0, [r2, #20]
}
    ae62:	b002      	add	sp, #8
    ae64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
    ae68:	f008 ba2e 	b.w	132c8 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    ae6c:	f008 fa5e 	bl	1332c <radio_is_idle>
    ae70:	2800      	cmp	r0, #0
    ae72:	d0f6      	beq.n	ae62 <mayfly_radio_stop+0x36>
}
    ae74:	b002      	add	sp, #8
    ae76:	bd10      	pop	{r4, pc}
    ae78:	000159e9 	.word	0x000159e9
    ae7c:	20003ad4 	.word	0x20003ad4
    ae80:	00016791 	.word	0x00016791
    ae84:	0001803a 	.word	0x0001803a
    ae88:	000189ea 	.word	0x000189ea
    ae8c:	200008f0 	.word	0x200008f0

0000ae90 <pdu_node_tx_release>:
{
    ae90:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    ae92:	4a17      	ldr	r2, [pc, #92]	; (aef0 <pdu_node_tx_release+0x60>)
    ae94:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    ae98:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    ae9c:	3301      	adds	r3, #1
    ae9e:	b2db      	uxtb	r3, r3
		last = 0;
    aea0:	429c      	cmp	r4, r3
    aea2:	bf08      	it	eq
    aea4:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    aea6:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    aeaa:	429c      	cmp	r4, r3
    aeac:	d10e      	bne.n	aecc <pdu_node_tx_release+0x3c>
    aeae:	4a11      	ldr	r2, [pc, #68]	; (aef4 <pdu_node_tx_release+0x64>)
    aeb0:	4b11      	ldr	r3, [pc, #68]	; (aef8 <pdu_node_tx_release+0x68>)
    aeb2:	9201      	str	r2, [sp, #4]
    aeb4:	9200      	str	r2, [sp, #0]
    aeb6:	681c      	ldr	r4, [r3, #0]
    aeb8:	4910      	ldr	r1, [pc, #64]	; (aefc <pdu_node_tx_release+0x6c>)
    aeba:	4b11      	ldr	r3, [pc, #68]	; (af00 <pdu_node_tx_release+0x70>)
    aebc:	4811      	ldr	r0, [pc, #68]	; (af04 <pdu_node_tx_release+0x74>)
    aebe:	47a0      	blx	r4
    aec0:	4040      	eors	r0, r0
    aec2:	f380 8811 	msr	BASEPRI, r0
    aec6:	f04f 0004 	mov.w	r0, #4
    aeca:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    aecc:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    aed0:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    aed4:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    aed8:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    aedc:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    aee0:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    aee2:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    aee6:	b003      	add	sp, #12
    aee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    aeec:	f006 bcea 	b.w	118c4 <radio_event_callback>
    aef0:	200008f0 	.word	0x200008f0
    aef4:	000159e9 	.word	0x000159e9
    aef8:	20003ad4 	.word	0x20003ad4
    aefc:	00016791 	.word	0x00016791
    af00:	000181f4 	.word	0x000181f4
    af04:	00018b3b 	.word	0x00018b3b

0000af08 <packet_tx_enqueue>:
{
    af08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    af0c:	4c24      	ldr	r4, [pc, #144]	; (afa0 <packet_tx_enqueue+0x98>)
{
    af0e:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    af10:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    af12:	b12e      	cbz	r6, af20 <packet_tx_enqueue+0x18>
    af14:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    af18:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    af1c:	429a      	cmp	r2, r3
    af1e:	d101      	bne.n	af24 <packet_tx_enqueue+0x1c>
    af20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    af24:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    af28:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    af2c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    af30:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    af34:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    af38:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    af3c:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    af3e:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    af40:	f7fb fee8 	bl	6d14 <mem_get>
    af44:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    af46:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    af4a:	8c1a      	ldrh	r2, [r3, #32]
    af4c:	4282      	cmp	r2, r0
    af4e:	d11f      	bne.n	af90 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    af50:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    af54:	b942      	cbnz	r2, af68 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    af56:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    af5a:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    af5e:	b91a      	cbnz	r2, af68 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    af60:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    af64:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    af68:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    af6c:	b102      	cbz	r2, af70 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    af6e:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    af70:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    af74:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    af78:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    af7c:	3301      	adds	r3, #1
    af7e:	b2db      	uxtb	r3, r3
			first = 0;
    af80:	429a      	cmp	r2, r3
    af82:	bf08      	it	eq
    af84:	2300      	moveq	r3, #0
    af86:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    af88:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    af8c:	b2f6      	uxtb	r6, r6
    af8e:	e7c0      	b.n	af12 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    af90:	792b      	ldrb	r3, [r5, #4]
    af92:	f367 0301 	bfi	r3, r7, #0, #2
    af96:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    af98:	4629      	mov	r1, r5
    af9a:	f7ff ff79 	bl	ae90 <pdu_node_tx_release>
    af9e:	e7e9      	b.n	af74 <packet_tx_enqueue+0x6c>
    afa0:	200008f0 	.word	0x200008f0

0000afa4 <connection_release>:
{
    afa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    afa6:	2201      	movs	r2, #1
{
    afa8:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    afaa:	4611      	mov	r1, r2
    afac:	2000      	movs	r0, #0
    afae:	f7fb ff1f 	bl	6df0 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    afb2:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    afb6:	2100      	movs	r1, #0
    afb8:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    afbc:	3207      	adds	r2, #7
	ticker_status =
    afbe:	9300      	str	r3, [sp, #0]
    afc0:	4608      	mov	r0, r1
    afc2:	4b3e      	ldr	r3, [pc, #248]	; (b0bc <connection_release+0x118>)
    afc4:	b2d2      	uxtb	r2, r2
    afc6:	f7fc fd97 	bl	7af8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    afca:	f030 0102 	bics.w	r1, r0, #2
    afce:	d00e      	beq.n	afee <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    afd0:	4a3b      	ldr	r2, [pc, #236]	; (b0c0 <connection_release+0x11c>)
    afd2:	4b3c      	ldr	r3, [pc, #240]	; (b0c4 <connection_release+0x120>)
    afd4:	9201      	str	r2, [sp, #4]
    afd6:	9200      	str	r2, [sp, #0]
    afd8:	681c      	ldr	r4, [r3, #0]
    afda:	493b      	ldr	r1, [pc, #236]	; (b0c8 <connection_release+0x124>)
    afdc:	4b3b      	ldr	r3, [pc, #236]	; (b0cc <connection_release+0x128>)
    afde:	483c      	ldr	r0, [pc, #240]	; (b0d0 <connection_release+0x12c>)
    afe0:	47a0      	blx	r4
    afe2:	4040      	eors	r0, r0
    afe4:	f380 8811 	msr	BASEPRI, r0
    afe8:	f04f 0004 	mov.w	r0, #4
    afec:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    afee:	4b39      	ldr	r3, [pc, #228]	; (b0d4 <connection_release+0x130>)
    aff0:	7d1a      	ldrb	r2, [r3, #20]
    aff2:	2a05      	cmp	r2, #5
    aff4:	461d      	mov	r5, r3
    aff6:	d11b      	bne.n	b030 <connection_release+0x8c>
					  conn->handle))) {
    aff8:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    affa:	7c18      	ldrb	r0, [r3, #16]
    affc:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    affe:	4290      	cmp	r0, r2
    b000:	d116      	bne.n	b030 <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    b002:	7419      	strb	r1, [r3, #16]
		ticker_status =
    b004:	f242 23fb 	movw	r3, #8955	; 0x22fb
    b008:	9300      	str	r3, [sp, #0]
    b00a:	2201      	movs	r2, #1
    b00c:	4b2b      	ldr	r3, [pc, #172]	; (b0bc <connection_release+0x118>)
    b00e:	4608      	mov	r0, r1
    b010:	f7fc fd72 	bl	7af8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b014:	f030 0202 	bics.w	r2, r0, #2
    b018:	d1da      	bne.n	afd0 <connection_release+0x2c>
		ticker_status =
    b01a:	f242 3302 	movw	r3, #8962	; 0x2302
    b01e:	9300      	str	r3, [sp, #0]
    b020:	4611      	mov	r1, r2
    b022:	4b26      	ldr	r3, [pc, #152]	; (b0bc <connection_release+0x118>)
    b024:	4610      	mov	r0, r2
    b026:	f7fc fd67 	bl	7af8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b02a:	f030 0302 	bics.w	r3, r0, #2
    b02e:	d1cf      	bne.n	afd0 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    b030:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    b034:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    b038:	4299      	cmp	r1, r3
    b03a:	d003      	beq.n	b044 <connection_release+0xa0>
    b03c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b040:	4299      	cmp	r1, r3
    b042:	d101      	bne.n	b048 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    b044:	4e24      	ldr	r6, [pc, #144]	; (b0d8 <connection_release+0x134>)
    b046:	e012      	b.n	b06e <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b048:	790b      	ldrb	r3, [r1, #4]
    b04a:	f36f 0301 	bfc	r3, #0, #2
    b04e:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b050:	680b      	ldr	r3, [r1, #0]
    b052:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    b056:	8c20      	ldrh	r0, [r4, #32]
    b058:	f7ff ff1a 	bl	ae90 <pdu_node_tx_release>
    b05c:	e7e8      	b.n	b030 <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b05e:	6803      	ldr	r3, [r0, #0]
    b060:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    b064:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    b068:	4631      	mov	r1, r6
    b06a:	f7fb fe38 	bl	6cde <mem_release>
	while ((conn->pkt_tx_head) &&
    b06e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    b072:	b118      	cbz	r0, b07c <connection_release+0xd8>
    b074:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b078:	4298      	cmp	r0, r3
    b07a:	d1f0      	bne.n	b05e <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    b07c:	2300      	movs	r3, #0
    b07e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    b082:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    b086:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    b08a:	b951      	cbnz	r1, b0a2 <connection_release+0xfe>
	conn->handle = 0xffff;
    b08c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b090:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    b092:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    b096:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    b098:	bf08      	it	eq
    b09a:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    b09e:	b002      	add	sp, #8
    b0a0:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b0a2:	790b      	ldrb	r3, [r1, #4]
    b0a4:	f36f 0301 	bfc	r3, #0, #2
    b0a8:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b0aa:	680b      	ldr	r3, [r1, #0]
    b0ac:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    b0b0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    b0b4:	8c20      	ldrh	r0, [r4, #32]
    b0b6:	f7ff feeb 	bl	ae90 <pdu_node_tx_release>
    b0ba:	e7e4      	b.n	b086 <connection_release+0xe2>
    b0bc:	0000aaa1 	.word	0x0000aaa1
    b0c0:	000159e9 	.word	0x000159e9
    b0c4:	20003ad4 	.word	0x20003ad4
    b0c8:	00016791 	.word	0x00016791
    b0cc:	00018208 	.word	0x00018208
    b0d0:	000182f1 	.word	0x000182f1
    b0d4:	200008f0 	.word	0x200008f0
    b0d8:	20000a4c 	.word	0x20000a4c

0000b0dc <chan_set>:
	switch (chan) {
    b0dc:	2826      	cmp	r0, #38	; 0x26
{
    b0de:	b513      	push	{r0, r1, r4, lr}
    b0e0:	4604      	mov	r4, r0
	switch (chan) {
    b0e2:	d00c      	beq.n	b0fe <chan_set+0x22>
    b0e4:	2827      	cmp	r0, #39	; 0x27
    b0e6:	d00c      	beq.n	b102 <chan_set+0x26>
    b0e8:	2825      	cmp	r0, #37	; 0x25
    b0ea:	d10c      	bne.n	b106 <chan_set+0x2a>
		radio_freq_chan_set(2);
    b0ec:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    b0ee:	f008 f867 	bl	131c0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    b0f2:	4620      	mov	r0, r4
}
    b0f4:	b002      	add	sp, #8
    b0f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    b0fa:	f008 b867 	b.w	131cc <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    b0fe:	201a      	movs	r0, #26
    b100:	e7f5      	b.n	b0ee <chan_set+0x12>
		radio_freq_chan_set(80);
    b102:	2050      	movs	r0, #80	; 0x50
    b104:	e7f3      	b.n	b0ee <chan_set+0x12>
		if (chan < 11) {
    b106:	280a      	cmp	r0, #10
    b108:	d802      	bhi.n	b110 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    b10a:	3002      	adds	r0, #2
    b10c:	0040      	lsls	r0, r0, #1
    b10e:	e7ee      	b.n	b0ee <chan_set+0x12>
		} else if (chan < 40) {
    b110:	2827      	cmp	r0, #39	; 0x27
    b112:	d801      	bhi.n	b118 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    b114:	3003      	adds	r0, #3
    b116:	e7f9      	b.n	b10c <chan_set+0x30>
			LL_ASSERT(0);
    b118:	4a07      	ldr	r2, [pc, #28]	; (b138 <chan_set+0x5c>)
    b11a:	4b08      	ldr	r3, [pc, #32]	; (b13c <chan_set+0x60>)
    b11c:	9201      	str	r2, [sp, #4]
    b11e:	9200      	str	r2, [sp, #0]
    b120:	681c      	ldr	r4, [r3, #0]
    b122:	4907      	ldr	r1, [pc, #28]	; (b140 <chan_set+0x64>)
    b124:	4b07      	ldr	r3, [pc, #28]	; (b144 <chan_set+0x68>)
    b126:	4808      	ldr	r0, [pc, #32]	; (b148 <chan_set+0x6c>)
    b128:	47a0      	blx	r4
    b12a:	4040      	eors	r0, r0
    b12c:	f380 8811 	msr	BASEPRI, r0
    b130:	f04f 0004 	mov.w	r0, #4
    b134:	df02      	svc	2
    b136:	bf00      	nop
    b138:	000159e9 	.word	0x000159e9
    b13c:	20003ad4 	.word	0x20003ad4
    b140:	00016791 	.word	0x00016791
    b144:	0001806c 	.word	0x0001806c
    b148:	000166ef 	.word	0x000166ef

0000b14c <adv_setup>:
{
    b14c:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    b14e:	4c31      	ldr	r4, [pc, #196]	; (b214 <adv_setup+0xc8>)
    b150:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    b154:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    b158:	429a      	cmp	r2, r3
    b15a:	d051      	beq.n	b200 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    b15c:	3301      	adds	r3, #1
    b15e:	b2db      	uxtb	r3, r3
			first = 0;
    b160:	2b02      	cmp	r3, #2
    b162:	bf08      	it	eq
    b164:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    b166:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    b16a:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    b16c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b170:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    b174:	4299      	cmp	r1, r3
    b176:	d007      	beq.n	b188 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    b178:	3301      	adds	r3, #1
    b17a:	b2db      	uxtb	r3, r3
			first = 0;
    b17c:	2b02      	cmp	r3, #2
    b17e:	bf08      	it	eq
    b180:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    b182:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    b186:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    b188:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    b18c:	2327      	movs	r3, #39	; 0x27
    b18e:	212b      	movs	r1, #43	; 0x2b
    b190:	fb13 1505 	smlabb	r5, r3, r5, r1
    b194:	1966      	adds	r6, r4, r5
	if (upd) {
    b196:	b142      	cbz	r2, b1aa <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    b198:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    b19c:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    b1a0:	2206      	movs	r2, #6
    b1a2:	1cb1      	adds	r1, r6, #2
    b1a4:	307d      	adds	r0, #125	; 0x7d
    b1a6:	f7f6 fd3b 	bl	1c20 <memcpy>
	radio_pkt_tx_set(pdu);
    b1aa:	4630      	mov	r0, r6
    b1ac:	f008 f86c 	bl	13288 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    b1b0:	5d63      	ldrb	r3, [r4, r5]
    b1b2:	f003 030f 	and.w	r3, r3, #15
    b1b6:	2b02      	cmp	r3, #2
    b1b8:	d024      	beq.n	b204 <adv_setup+0xb8>
    b1ba:	2b07      	cmp	r3, #7
    b1bc:	d022      	beq.n	b204 <adv_setup+0xb8>
		_radio.state = STATE_TX;
    b1be:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    b1c0:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    b1c2:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    b1c4:	f008 f976 	bl	134b4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    b1c8:	2000      	movs	r0, #0
    b1ca:	f008 f8d7 	bl	1337c <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    b1ce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b1d2:	f3c3 0202 	ubfx	r2, r3, #0, #3
    b1d6:	b2d3      	uxtb	r3, r2
    b1d8:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    b1da:	2000      	movs	r0, #0
    b1dc:	07ce      	lsls	r6, r1, #31
    b1de:	f100 0501 	add.w	r5, r0, #1
    b1e2:	d514      	bpl.n	b20e <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    b1e4:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    b1e6:	4013      	ands	r3, r2
    b1e8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    b1ec:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    b1ee:	f363 0202 	bfi	r2, r3, #0, #3
    b1f2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    b1f6:	3025      	adds	r0, #37	; 0x25
}
    b1f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    b1fc:	f7ff bf6e 	b.w	b0dc <chan_set>
	u8_t upd = 0;
    b200:	2200      	movs	r2, #0
    b202:	e7b3      	b.n	b16c <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    b204:	2303      	movs	r3, #3
    b206:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    b208:	f008 f8ce 	bl	133a8 <radio_switch_complete_and_disable>
    b20c:	e7df      	b.n	b1ce <adv_setup+0x82>
		bitmap >>= 1;
    b20e:	0849      	lsrs	r1, r1, #1
    b210:	4628      	mov	r0, r5
    b212:	e7e3      	b.n	b1dc <adv_setup+0x90>
    b214:	200008f0 	.word	0x200008f0

0000b218 <ticker_stop_adv_stop>:
{
    b218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    b21a:	4c54      	ldr	r4, [pc, #336]	; (b36c <ticker_stop_adv_stop+0x154>)
	if (status != TICKER_STATUS_SUCCESS) {
    b21c:	b190      	cbz	r0, b244 <ticker_stop_adv_stop+0x2c>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    b21e:	7ca3      	ldrb	r3, [r4, #18]
    b220:	2b05      	cmp	r3, #5
    b222:	f000 80a0 	beq.w	b366 <ticker_stop_adv_stop+0x14e>
    b226:	4a52      	ldr	r2, [pc, #328]	; (b370 <ticker_stop_adv_stop+0x158>)
    b228:	4b52      	ldr	r3, [pc, #328]	; (b374 <ticker_stop_adv_stop+0x15c>)
    b22a:	9201      	str	r2, [sp, #4]
    b22c:	9200      	str	r2, [sp, #0]
    b22e:	681c      	ldr	r4, [r3, #0]
    b230:	4951      	ldr	r1, [pc, #324]	; (b378 <ticker_stop_adv_stop+0x160>)
    b232:	4b52      	ldr	r3, [pc, #328]	; (b37c <ticker_stop_adv_stop+0x164>)
    b234:	4852      	ldr	r0, [pc, #328]	; (b380 <ticker_stop_adv_stop+0x168>)
		LL_ASSERT(_radio.ticker_id_prepare);
    b236:	47a0      	blx	r4
    b238:	4040      	eors	r0, r0
    b23a:	f380 8811 	msr	BASEPRI, r0
    b23e:	f04f 0004 	mov.w	r0, #4
    b242:	df02      	svc	2
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    b244:	7c23      	ldrb	r3, [r4, #16]
    b246:	2b05      	cmp	r3, #5
    b248:	d002      	beq.n	b250 <ticker_stop_adv_stop+0x38>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    b24a:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    b24c:	2b05      	cmp	r3, #5
    b24e:	d16f      	bne.n	b330 <ticker_stop_adv_stop+0x118>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    b250:	ab04      	add	r3, sp, #16
    b252:	2202      	movs	r2, #2
    b254:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b258:	2200      	movs	r2, #0
    b25a:	9300      	str	r3, [sp, #0]
    b25c:	2101      	movs	r1, #1
    b25e:	4b49      	ldr	r3, [pc, #292]	; (b384 <ticker_stop_adv_stop+0x16c>)
    b260:	4610      	mov	r0, r2
    b262:	f7fc fc49 	bl	7af8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    b266:	2802      	cmp	r0, #2
    b268:	d00d      	beq.n	b286 <ticker_stop_adv_stop+0x6e>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    b26a:	9802      	ldr	r0, [sp, #8]
    b26c:	b1c0      	cbz	r0, b2a0 <ticker_stop_adv_stop+0x88>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    b26e:	9802      	ldr	r0, [sp, #8]
    b270:	2801      	cmp	r0, #1
    b272:	d16f      	bne.n	b354 <ticker_stop_adv_stop+0x13c>
		if (_radio.role != ROLE_NONE) {
    b274:	7ce3      	ldrb	r3, [r4, #19]
    b276:	2b00      	cmp	r3, #0
    b278:	d05a      	beq.n	b330 <ticker_stop_adv_stop+0x118>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    b27a:	4b43      	ldr	r3, [pc, #268]	; (b388 <ticker_stop_adv_stop+0x170>)
    b27c:	2204      	movs	r2, #4
    b27e:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    b280:	2200      	movs	r2, #0
    b282:	4611      	mov	r1, r2
    b284:	e050      	b.n	b328 <ticker_stop_adv_stop+0x110>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    b286:	2201      	movs	r2, #1
    b288:	4611      	mov	r1, r2
    b28a:	4610      	mov	r0, r2
    b28c:	f7fb fdb0 	bl	6df0 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    b290:	9b02      	ldr	r3, [sp, #8]
    b292:	2b02      	cmp	r3, #2
    b294:	d1e9      	bne.n	b26a <ticker_stop_adv_stop+0x52>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b296:	2101      	movs	r1, #1
    b298:	2000      	movs	r0, #0
    b29a:	f7fc fce7 	bl	7c6c <ticker_job_sched>
    b29e:	e7f7      	b.n	b290 <ticker_stop_adv_stop+0x78>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    b2a0:	2302      	movs	r3, #2
    b2a2:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    b2a4:	7c23      	ldrb	r3, [r4, #16]
    b2a6:	b943      	cbnz	r3, b2ba <ticker_stop_adv_stop+0xa2>
    b2a8:	4a31      	ldr	r2, [pc, #196]	; (b370 <ticker_stop_adv_stop+0x158>)
    b2aa:	4b32      	ldr	r3, [pc, #200]	; (b374 <ticker_stop_adv_stop+0x15c>)
    b2ac:	9201      	str	r2, [sp, #4]
    b2ae:	9200      	str	r2, [sp, #0]
    b2b0:	681c      	ldr	r4, [r3, #0]
    b2b2:	4931      	ldr	r1, [pc, #196]	; (b378 <ticker_stop_adv_stop+0x160>)
    b2b4:	4b35      	ldr	r3, [pc, #212]	; (b38c <ticker_stop_adv_stop+0x174>)
    b2b6:	4836      	ldr	r0, [pc, #216]	; (b390 <ticker_stop_adv_stop+0x178>)
    b2b8:	e7bd      	b.n	b236 <ticker_stop_adv_stop+0x1e>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b2ba:	ab03      	add	r3, sp, #12
    b2bc:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
    b2be:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b2c0:	4611      	mov	r1, r2
    b2c2:	9300      	str	r3, [sp, #0]
    b2c4:	4b2f      	ldr	r3, [pc, #188]	; (b384 <ticker_stop_adv_stop+0x16c>)
    b2c6:	f7fc fc17 	bl	7af8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    b2ca:	2802      	cmp	r0, #2
    b2cc:	d016      	beq.n	b2fc <ticker_stop_adv_stop+0xe4>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    b2ce:	9a03      	ldr	r2, [sp, #12]
    b2d0:	b30a      	cbz	r2, b316 <ticker_stop_adv_stop+0xfe>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    b2d2:	9c03      	ldr	r4, [sp, #12]
    b2d4:	2c01      	cmp	r4, #1
    b2d6:	d13d      	bne.n	b354 <ticker_stop_adv_stop+0x13c>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    b2d8:	2200      	movs	r2, #0
    b2da:	4611      	mov	r1, r2
    b2dc:	4b2d      	ldr	r3, [pc, #180]	; (b394 <ticker_stop_adv_stop+0x17c>)
    b2de:	4620      	mov	r0, r4
    b2e0:	f7fb fdae 	bl	6e40 <mayfly_enqueue>
			LL_ASSERT(!ret);
    b2e4:	4602      	mov	r2, r0
    b2e6:	2800      	cmp	r0, #0
    b2e8:	d032      	beq.n	b350 <ticker_stop_adv_stop+0x138>
			LL_ASSERT(!ret);
    b2ea:	4a21      	ldr	r2, [pc, #132]	; (b370 <ticker_stop_adv_stop+0x158>)
    b2ec:	4b21      	ldr	r3, [pc, #132]	; (b374 <ticker_stop_adv_stop+0x15c>)
    b2ee:	9201      	str	r2, [sp, #4]
    b2f0:	9200      	str	r2, [sp, #0]
    b2f2:	681c      	ldr	r4, [r3, #0]
    b2f4:	4920      	ldr	r1, [pc, #128]	; (b378 <ticker_stop_adv_stop+0x160>)
    b2f6:	4b25      	ldr	r3, [pc, #148]	; (b38c <ticker_stop_adv_stop+0x174>)
    b2f8:	4827      	ldr	r0, [pc, #156]	; (b398 <ticker_stop_adv_stop+0x180>)
    b2fa:	e79c      	b.n	b236 <ticker_stop_adv_stop+0x1e>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    b2fc:	2201      	movs	r2, #1
    b2fe:	4611      	mov	r1, r2
    b300:	4610      	mov	r0, r2
    b302:	f7fb fd75 	bl	6df0 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    b306:	9b03      	ldr	r3, [sp, #12]
    b308:	2b02      	cmp	r3, #2
    b30a:	d1e0      	bne.n	b2ce <ticker_stop_adv_stop+0xb6>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b30c:	2101      	movs	r1, #1
    b30e:	2000      	movs	r0, #0
    b310:	f7fc fcac 	bl	7c6c <ticker_job_sched>
    b314:	e7f7      	b.n	b306 <ticker_stop_adv_stop+0xee>
			u32_t ticks_xtal_to_start =
    b316:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    b318:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    b31a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    b31e:	428b      	cmp	r3, r1
    b320:	d216      	bcs.n	b350 <ticker_stop_adv_stop+0x138>
				ret = mayfly_enqueue(
    b322:	4b1c      	ldr	r3, [pc, #112]	; (b394 <ticker_stop_adv_stop+0x17c>)
				ret = mayfly_enqueue(
    b324:	4611      	mov	r1, r2
    b326:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    b328:	f7fb fd8a 	bl	6e40 <mayfly_enqueue>
			LL_ASSERT(!ret);
    b32c:	2800      	cmp	r0, #0
    b32e:	d1dc      	bne.n	b2ea <ticker_stop_adv_stop+0xd2>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    b330:	2200      	movs	r2, #0
    b332:	4b1a      	ldr	r3, [pc, #104]	; (b39c <ticker_stop_adv_stop+0x184>)
    b334:	4611      	mov	r1, r2
    b336:	2001      	movs	r0, #1
    b338:	f7fb fd82 	bl	6e40 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b33c:	b198      	cbz	r0, b366 <ticker_stop_adv_stop+0x14e>
    b33e:	4a0c      	ldr	r2, [pc, #48]	; (b370 <ticker_stop_adv_stop+0x158>)
    b340:	4b0c      	ldr	r3, [pc, #48]	; (b374 <ticker_stop_adv_stop+0x15c>)
    b342:	9201      	str	r2, [sp, #4]
    b344:	9200      	str	r2, [sp, #0]
    b346:	681c      	ldr	r4, [r3, #0]
    b348:	490b      	ldr	r1, [pc, #44]	; (b378 <ticker_stop_adv_stop+0x160>)
    b34a:	4b0c      	ldr	r3, [pc, #48]	; (b37c <ticker_stop_adv_stop+0x164>)
    b34c:	4814      	ldr	r0, [pc, #80]	; (b3a0 <ticker_stop_adv_stop+0x188>)
    b34e:	e772      	b.n	b236 <ticker_stop_adv_stop+0x1e>
				ret = mayfly_enqueue(
    b350:	4b14      	ldr	r3, [pc, #80]	; (b3a4 <ticker_stop_adv_stop+0x18c>)
    b352:	e7e7      	b.n	b324 <ticker_stop_adv_stop+0x10c>
		LL_ASSERT(0);
    b354:	4a06      	ldr	r2, [pc, #24]	; (b370 <ticker_stop_adv_stop+0x158>)
    b356:	4b07      	ldr	r3, [pc, #28]	; (b374 <ticker_stop_adv_stop+0x15c>)
    b358:	9201      	str	r2, [sp, #4]
    b35a:	9200      	str	r2, [sp, #0]
    b35c:	681c      	ldr	r4, [r3, #0]
    b35e:	4906      	ldr	r1, [pc, #24]	; (b378 <ticker_stop_adv_stop+0x160>)
    b360:	4b0a      	ldr	r3, [pc, #40]	; (b38c <ticker_stop_adv_stop+0x174>)
    b362:	4811      	ldr	r0, [pc, #68]	; (b3a8 <ticker_stop_adv_stop+0x190>)
    b364:	e767      	b.n	b236 <ticker_stop_adv_stop+0x1e>
}
    b366:	b004      	add	sp, #16
    b368:	bd10      	pop	{r4, pc}
    b36a:	bf00      	nop
    b36c:	200008f0 	.word	0x200008f0
    b370:	000159e9 	.word	0x000159e9
    b374:	20003ad4 	.word	0x20003ad4
    b378:	00016791 	.word	0x00016791
    b37c:	000180d3 	.word	0x000180d3
    b380:	00018ec9 	.word	0x00018ec9
    b384:	00009b19 	.word	0x00009b19
    b388:	20003e18 	.word	0x20003e18
    b38c:	000180b7 	.word	0x000180b7
    b390:	00018c8b 	.word	0x00018c8b
    b394:	20003de8 	.word	0x20003de8
    b398:	00018cf5 	.word	0x00018cf5
    b39c:	20003db8 	.word	0x20003db8
    b3a0:	00018a6b 	.word	0x00018a6b
    b3a4:	20003ea8 	.word	0x20003ea8
    b3a8:	000166ef 	.word	0x000166ef
    b3ac:	00000000 	.word	0x00000000

0000b3b0 <sched_after_mstr_free_offset_get>:
{
    b3b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    b3b2:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    b3b4:	aa04      	add	r2, sp, #16
{
    b3b6:	461c      	mov	r4, r3
    b3b8:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    b3ba:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    b3be:	3127      	adds	r1, #39	; 0x27
    b3c0:	2001      	movs	r0, #1
    b3c2:	f7ff f995 	bl	a6f0 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    b3c6:	6823      	ldr	r3, [r4, #0]
    b3c8:	2b00      	cmp	r3, #0
    b3ca:	d02c      	beq.n	b426 <sched_after_mstr_free_offset_get+0x76>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    b3cc:	9803      	ldr	r0, [sp, #12]
    b3ce:	1b83      	subs	r3, r0, r6
    b3d0:	021b      	lsls	r3, r3, #8
    b3d2:	d50e      	bpl.n	b3f2 <sched_after_mstr_free_offset_get+0x42>
    b3d4:	4a18      	ldr	r2, [pc, #96]	; (b438 <sched_after_mstr_free_offset_get+0x88>)
    b3d6:	4b19      	ldr	r3, [pc, #100]	; (b43c <sched_after_mstr_free_offset_get+0x8c>)
    b3d8:	9201      	str	r2, [sp, #4]
    b3da:	9200      	str	r2, [sp, #0]
    b3dc:	681c      	ldr	r4, [r3, #0]
    b3de:	4918      	ldr	r1, [pc, #96]	; (b440 <sched_after_mstr_free_offset_get+0x90>)
    b3e0:	4b18      	ldr	r3, [pc, #96]	; (b444 <sched_after_mstr_free_offset_get+0x94>)
    b3e2:	4819      	ldr	r0, [pc, #100]	; (b448 <sched_after_mstr_free_offset_get+0x98>)
    b3e4:	47a0      	blx	r4
    b3e6:	4040      	eors	r0, r0
    b3e8:	f380 8811 	msr	BASEPRI, r0
    b3ec:	f04f 0004 	mov.w	r0, #4
    b3f0:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    b3f2:	4631      	mov	r1, r6
    b3f4:	f7fc fc52 	bl	7c9c <ticker_ticks_diff_get>
    b3f8:	4602      	mov	r2, r0
    b3fa:	4814      	ldr	r0, [pc, #80]	; (b44c <sched_after_mstr_free_offset_get+0x9c>)
    b3fc:	2307      	movs	r3, #7
    b3fe:	fba2 0100 	umull	r0, r1, r2, r0
    b402:	fb03 1102 	mla	r1, r3, r2, r1
    b406:	a30a      	add	r3, pc, #40	; (adr r3, b430 <sched_after_mstr_free_offset_get+0x80>)
    b408:	e9d3 2300 	ldrd	r2, r3, [r3]
    b40c:	f7f4 ff02 	bl	214 <__aeabi_uldivmod>
    b410:	6823      	ldr	r3, [r4, #0]
    b412:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    b414:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    b416:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    b418:	db05      	blt.n	b426 <sched_after_mstr_free_offset_get+0x76>
		u32_t conn_interval_us = conn_interval * 1250;
    b41a:	f240 40e2 	movw	r0, #1250	; 0x4e2
    b41e:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    b420:	6823      	ldr	r3, [r4, #0]
    b422:	4298      	cmp	r0, r3
    b424:	d301      	bcc.n	b42a <sched_after_mstr_free_offset_get+0x7a>
}
    b426:	b004      	add	sp, #16
    b428:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    b42a:	1a1b      	subs	r3, r3, r0
    b42c:	6023      	str	r3, [r4, #0]
    b42e:	e7f7      	b.n	b420 <sched_after_mstr_free_offset_get+0x70>
    b430:	3b9aca00 	.word	0x3b9aca00
    b434:	00000000 	.word	0x00000000
    b438:	000159e9 	.word	0x000159e9
    b43c:	20003ad4 	.word	0x20003ad4
    b440:	00016791 	.word	0x00016791
    b444:	00017ffe 	.word	0x00017ffe
    b448:	00018d97 	.word	0x00018d97
    b44c:	1afd498d 	.word	0x1afd498d

0000b450 <mayfly_sched_win_offset_use>:
{
    b450:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    b452:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    b456:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    b458:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    b45c:	68c1      	ldr	r1, [r0, #12]
    b45e:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    b460:	f7ff ffa6 	bl	b3b0 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b464:	a902      	add	r1, sp, #8
    b466:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b46a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b46e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    b472:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b476:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b478:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b47c:	f7f6 fbd0 	bl	1c20 <memcpy>
}
    b480:	b002      	add	sp, #8
    b482:	bd10      	pop	{r4, pc}

0000b484 <mayfly_sched_after_mstr_free_offset_get>:
{
    b484:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    b486:	4c05      	ldr	r4, [pc, #20]	; (b49c <mayfly_sched_after_mstr_free_offset_get+0x18>)
    b488:	4602      	mov	r2, r0
    b48a:	f504 7382 	add.w	r3, r4, #260	; 0x104
    b48e:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    b492:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    b496:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    b498:	f7ff bf8a 	b.w	b3b0 <sched_after_mstr_free_offset_get>
    b49c:	200008f0 	.word	0x200008f0

0000b4a0 <mayfly_adv_stop>:
{
    b4a0:	b513      	push	{r0, r1, r4, lr}
	node_rx = packet_rx_reserve_get(1);
    b4a2:	2001      	movs	r0, #1
    b4a4:	f7fe fb78 	bl	9b98 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
    b4a8:	4604      	mov	r4, r0
    b4aa:	b970      	cbnz	r0, b4ca <mayfly_adv_stop+0x2a>
    b4ac:	4a0f      	ldr	r2, [pc, #60]	; (b4ec <mayfly_adv_stop+0x4c>)
    b4ae:	4b10      	ldr	r3, [pc, #64]	; (b4f0 <mayfly_adv_stop+0x50>)
    b4b0:	9201      	str	r2, [sp, #4]
    b4b2:	9200      	str	r2, [sp, #0]
    b4b4:	681c      	ldr	r4, [r3, #0]
    b4b6:	490f      	ldr	r1, [pc, #60]	; (b4f4 <mayfly_adv_stop+0x54>)
    b4b8:	4b0f      	ldr	r3, [pc, #60]	; (b4f8 <mayfly_adv_stop+0x58>)
    b4ba:	4810      	ldr	r0, [pc, #64]	; (b4fc <mayfly_adv_stop+0x5c>)
    b4bc:	47a0      	blx	r4
    b4be:	4040      	eors	r0, r0
    b4c0:	f380 8811 	msr	BASEPRI, r0
    b4c4:	f04f 0004 	mov.w	r0, #4
    b4c8:	df02      	svc	2
	node_rx->hdr.handle = 0xffff;
    b4ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b4ce:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    b4d0:	2306      	movs	r3, #6
    b4d2:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    b4d4:	221d      	movs	r2, #29
    b4d6:	2100      	movs	r1, #0
    b4d8:	300b      	adds	r0, #11
    b4da:	f7f6 fbcd 	bl	1c78 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    b4de:	233c      	movs	r3, #60	; 0x3c
    b4e0:	72e3      	strb	r3, [r4, #11]
}
    b4e2:	b002      	add	sp, #8
    b4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
    b4e8:	f7ff b9ce 	b.w	a888 <packet_rx_enqueue>
    b4ec:	000159e9 	.word	0x000159e9
    b4f0:	20003ad4 	.word	0x20003ad4
    b4f4:	00016791 	.word	0x00016791
    b4f8:	000180a7 	.word	0x000180a7
    b4fc:	00018997 	.word	0x00018997

0000b500 <terminate_ind_rx_enqueue>:
{
    b500:	b513      	push	{r0, r1, r4, lr}
    b502:	4603      	mov	r3, r0
    b504:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    b506:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    b50a:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    b50e:	b970      	cbnz	r0, b52e <terminate_ind_rx_enqueue+0x2e>
    b510:	4a17      	ldr	r2, [pc, #92]	; (b570 <terminate_ind_rx_enqueue+0x70>)
    b512:	4b18      	ldr	r3, [pc, #96]	; (b574 <terminate_ind_rx_enqueue+0x74>)
    b514:	9201      	str	r2, [sp, #4]
    b516:	9200      	str	r2, [sp, #0]
    b518:	681c      	ldr	r4, [r3, #0]
    b51a:	4917      	ldr	r1, [pc, #92]	; (b578 <terminate_ind_rx_enqueue+0x78>)
    b51c:	4b17      	ldr	r3, [pc, #92]	; (b57c <terminate_ind_rx_enqueue+0x7c>)
    b51e:	4818      	ldr	r0, [pc, #96]	; (b580 <terminate_ind_rx_enqueue+0x80>)
	LL_ASSERT(link);
    b520:	47a0      	blx	r4
    b522:	4040      	eors	r0, r0
    b524:	f380 8811 	msr	BASEPRI, r0
    b528:	f04f 0004 	mov.w	r0, #4
    b52c:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    b52e:	8c1c      	ldrh	r4, [r3, #32]
    b530:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    b534:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b538:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b53a:	4a12      	ldr	r2, [pc, #72]	; (b584 <terminate_ind_rx_enqueue+0x84>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b53c:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b540:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    b544:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    b548:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    b54c:	f7fb fc07 	bl	6d5e <memq_enqueue>
	LL_ASSERT(link);
    b550:	b940      	cbnz	r0, b564 <terminate_ind_rx_enqueue+0x64>
    b552:	4a07      	ldr	r2, [pc, #28]	; (b570 <terminate_ind_rx_enqueue+0x70>)
    b554:	4b07      	ldr	r3, [pc, #28]	; (b574 <terminate_ind_rx_enqueue+0x74>)
    b556:	9201      	str	r2, [sp, #4]
    b558:	9200      	str	r2, [sp, #0]
    b55a:	681c      	ldr	r4, [r3, #0]
    b55c:	4906      	ldr	r1, [pc, #24]	; (b578 <terminate_ind_rx_enqueue+0x78>)
    b55e:	4b07      	ldr	r3, [pc, #28]	; (b57c <terminate_ind_rx_enqueue+0x7c>)
    b560:	4809      	ldr	r0, [pc, #36]	; (b588 <terminate_ind_rx_enqueue+0x88>)
    b562:	e7dd      	b.n	b520 <terminate_ind_rx_enqueue+0x20>
}
    b564:	b002      	add	sp, #8
    b566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    b56a:	f006 b9ab 	b.w	118c4 <radio_event_callback>
    b56e:	bf00      	nop
    b570:	000159e9 	.word	0x000159e9
    b574:	20003ad4 	.word	0x20003ad4
    b578:	00016791 	.word	0x00016791
    b57c:	0001821b 	.word	0x0001821b
    b580:	00018e1d 	.word	0x00018e1d
    b584:	200008f0 	.word	0x200008f0
    b588:	000182cb 	.word	0x000182cb

0000b58c <prepare_normal_set>:
{
    b58c:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b58e:	6804      	ldr	r4, [r0, #0]
    b590:	2c00      	cmp	r4, #0
{
    b592:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b594:	da26      	bge.n	b5e4 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
    b596:	6843      	ldr	r3, [r0, #4]
    b598:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    b59a:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    b59c:	429d      	cmp	r5, r3
    b59e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    b5a2:	bf34      	ite	cc
    b5a4:	1ae4      	subcc	r4, r4, r3
    b5a6:	1b64      	subcs	r4, r4, r5
		ticker_status =
    b5a8:	4b0f      	ldr	r3, [pc, #60]	; (b5e8 <prepare_normal_set+0x5c>)
    b5aa:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b5ac:	b2a4      	uxth	r4, r4
		ticker_status =
    b5ae:	2300      	movs	r3, #0
    b5b0:	9304      	str	r3, [sp, #16]
    b5b2:	9303      	str	r3, [sp, #12]
    b5b4:	9302      	str	r3, [sp, #8]
    b5b6:	4618      	mov	r0, r3
    b5b8:	9401      	str	r4, [sp, #4]
    b5ba:	9400      	str	r4, [sp, #0]
    b5bc:	f7fc fa4e 	bl	7a5c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b5c0:	f030 0302 	bics.w	r3, r0, #2
    b5c4:	d00e      	beq.n	b5e4 <prepare_normal_set+0x58>
    b5c6:	4a09      	ldr	r2, [pc, #36]	; (b5ec <prepare_normal_set+0x60>)
    b5c8:	4b09      	ldr	r3, [pc, #36]	; (b5f0 <prepare_normal_set+0x64>)
    b5ca:	9201      	str	r2, [sp, #4]
    b5cc:	9200      	str	r2, [sp, #0]
    b5ce:	681c      	ldr	r4, [r3, #0]
    b5d0:	4908      	ldr	r1, [pc, #32]	; (b5f4 <prepare_normal_set+0x68>)
    b5d2:	4b09      	ldr	r3, [pc, #36]	; (b5f8 <prepare_normal_set+0x6c>)
    b5d4:	4809      	ldr	r0, [pc, #36]	; (b5fc <prepare_normal_set+0x70>)
    b5d6:	47a0      	blx	r4
    b5d8:	4040      	eors	r0, r0
    b5da:	f380 8811 	msr	BASEPRI, r0
    b5de:	f04f 0004 	mov.w	r0, #4
    b5e2:	df02      	svc	2
}
    b5e4:	b009      	add	sp, #36	; 0x24
    b5e6:	bd30      	pop	{r4, r5, pc}
    b5e8:	00009b29 	.word	0x00009b29
    b5ec:	000159e9 	.word	0x000159e9
    b5f0:	20003ad4 	.word	0x20003ad4
    b5f4:	00016791 	.word	0x00016791
    b5f8:	00017fb6 	.word	0x00017fb6
    b5fc:	000182f1 	.word	0x000182f1

0000b600 <mayfly_xtal_stop_calc>:
{
    b600:	b570      	push	{r4, r5, r6, lr}
    b602:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b604:	2302      	movs	r3, #2
    b606:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    b608:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    b60a:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b60c:	4e80      	ldr	r6, [pc, #512]	; (b810 <mayfly_xtal_stop_calc+0x210>)
				    _radio.connection_count));
    b60e:	4d81      	ldr	r5, [pc, #516]	; (b814 <mayfly_xtal_stop_calc+0x214>)
	struct connection *conn_curr = NULL;
    b610:	930a      	str	r3, [sp, #40]	; 0x28
{
    b612:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    b614:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    b616:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    b61a:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b61c:	ab09      	add	r3, sp, #36	; 0x24
    b61e:	9302      	str	r3, [sp, #8]
    b620:	ab0c      	add	r3, sp, #48	; 0x30
    b622:	9300      	str	r3, [sp, #0]
    b624:	9601      	str	r6, [sp, #4]
    b626:	ab0d      	add	r3, sp, #52	; 0x34
    b628:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    b62c:	2101      	movs	r1, #1
    b62e:	2000      	movs	r0, #0
    b630:	f7fc fa9e 	bl	7b70 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b634:	2802      	cmp	r0, #2
    b636:	d014      	beq.n	b662 <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b638:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b63a:	b1b3      	cbz	r3, b66a <mayfly_xtal_stop_calc+0x6a>
    b63c:	4a76      	ldr	r2, [pc, #472]	; (b818 <mayfly_xtal_stop_calc+0x218>)
    b63e:	4b77      	ldr	r3, [pc, #476]	; (b81c <mayfly_xtal_stop_calc+0x21c>)
    b640:	9201      	str	r2, [sp, #4]
    b642:	9200      	str	r2, [sp, #0]
    b644:	681c      	ldr	r4, [r3, #0]
    b646:	4976      	ldr	r1, [pc, #472]	; (b820 <mayfly_xtal_stop_calc+0x220>)
    b648:	4b76      	ldr	r3, [pc, #472]	; (b824 <mayfly_xtal_stop_calc+0x224>)
    b64a:	4877      	ldr	r0, [pc, #476]	; (b828 <mayfly_xtal_stop_calc+0x228>)
	LL_ASSERT(hdr_curr);
    b64c:	47a0      	blx	r4
    b64e:	4040      	eors	r0, r0
    b650:	f380 8811 	msr	BASEPRI, r0
    b654:	f04f 0004 	mov.w	r0, #4
    b658:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b65a:	2101      	movs	r1, #1
    b65c:	2000      	movs	r0, #0
    b65e:	f7fc fb05 	bl	7c6c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b662:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b664:	2b02      	cmp	r3, #2
    b666:	d0f8      	beq.n	b65a <mayfly_xtal_stop_calc+0x5a>
    b668:	e7e6      	b.n	b638 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    b66a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    b66e:	2bff      	cmp	r3, #255	; 0xff
    b670:	d004      	beq.n	b67c <mayfly_xtal_stop_calc+0x7c>
    b672:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b676:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    b678:	4293      	cmp	r3, r2
    b67a:	dacf      	bge.n	b61c <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    b67c:	1f5a      	subs	r2, r3, #5
    b67e:	b2d2      	uxtb	r2, r2
    b680:	2af9      	cmp	r2, #249	; 0xf9
    b682:	d805      	bhi.n	b690 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
    b684:	4a63      	ldr	r2, [pc, #396]	; (b814 <mayfly_xtal_stop_calc+0x214>)
    b686:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b68a:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    b68c:	4293      	cmp	r3, r2
    b68e:	db05      	blt.n	b69c <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b690:	2100      	movs	r1, #0
    b692:	2001      	movs	r0, #1
    b694:	f7fe fd96 	bl	a1c4 <mayfly_xtal_retain>
}
    b698:	b00e      	add	sp, #56	; 0x38
    b69a:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    b69c:	a90a      	add	r1, sp, #40	; 0x28
    b69e:	b2e0      	uxtb	r0, r4
    b6a0:	f7ff fafc 	bl	ac9c <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    b6a4:	b940      	cbnz	r0, b6b8 <mayfly_xtal_stop_calc+0xb8>
    b6a6:	4a5c      	ldr	r2, [pc, #368]	; (b818 <mayfly_xtal_stop_calc+0x218>)
    b6a8:	4b5c      	ldr	r3, [pc, #368]	; (b81c <mayfly_xtal_stop_calc+0x21c>)
    b6aa:	9201      	str	r2, [sp, #4]
    b6ac:	9200      	str	r2, [sp, #0]
    b6ae:	681c      	ldr	r4, [r3, #0]
    b6b0:	495b      	ldr	r1, [pc, #364]	; (b820 <mayfly_xtal_stop_calc+0x220>)
    b6b2:	4b5c      	ldr	r3, [pc, #368]	; (b824 <mayfly_xtal_stop_calc+0x224>)
    b6b4:	485d      	ldr	r0, [pc, #372]	; (b82c <mayfly_xtal_stop_calc+0x22c>)
    b6b6:	e7c9      	b.n	b64c <mayfly_xtal_stop_calc+0x4c>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    b6b8:	6803      	ldr	r3, [r0, #0]
    b6ba:	6844      	ldr	r4, [r0, #4]
    b6bc:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b6be:	bfb8      	it	lt
    b6c0:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b6c2:	429c      	cmp	r4, r3
    b6c4:	bf38      	it	cc
    b6c6:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    b6c8:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b6ca:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    b6ce:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    b6d0:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b6d2:	f7ff fae3 	bl	ac9c <hdr_conn_get>
	LL_ASSERT(hdr_next);
    b6d6:	4605      	mov	r5, r0
    b6d8:	b940      	cbnz	r0, b6ec <mayfly_xtal_stop_calc+0xec>
    b6da:	4a4f      	ldr	r2, [pc, #316]	; (b818 <mayfly_xtal_stop_calc+0x218>)
    b6dc:	4b4f      	ldr	r3, [pc, #316]	; (b81c <mayfly_xtal_stop_calc+0x21c>)
    b6de:	9201      	str	r2, [sp, #4]
    b6e0:	9200      	str	r2, [sp, #0]
    b6e2:	681c      	ldr	r4, [r3, #0]
    b6e4:	494e      	ldr	r1, [pc, #312]	; (b820 <mayfly_xtal_stop_calc+0x220>)
    b6e6:	4b4f      	ldr	r3, [pc, #316]	; (b824 <mayfly_xtal_stop_calc+0x224>)
    b6e8:	4851      	ldr	r0, [pc, #324]	; (b830 <mayfly_xtal_stop_calc+0x230>)
    b6ea:	e7af      	b.n	b64c <mayfly_xtal_stop_calc+0x4c>
	ticks_prepare_to_start_next =
    b6ec:	6886      	ldr	r6, [r0, #8]
    b6ee:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b6f0:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    b6f2:	429e      	cmp	r6, r3
    b6f4:	bf38      	it	cc
    b6f6:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b6f8:	2a00      	cmp	r2, #0
    b6fa:	da05      	bge.n	b708 <mayfly_xtal_stop_calc+0x108>
		ticks_to_expire -=
    b6fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    b6fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    b702:	4433      	add	r3, r6
    b704:	1a9b      	subs	r3, r3, r2
    b706:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    b708:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    b70a:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    b70e:	4293      	cmp	r3, r2
    b710:	d20a      	bcs.n	b728 <mayfly_xtal_stop_calc+0x128>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b712:	2100      	movs	r1, #0
    b714:	2001      	movs	r0, #1
    b716:	f7fe fd55 	bl	a1c4 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    b71a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b71e:	2101      	movs	r1, #1
    b720:	4628      	mov	r0, r5
    b722:	f7ff ff33 	bl	b58c <prepare_normal_set>
    b726:	e7b7      	b.n	b698 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    b728:	2101      	movs	r1, #1
    b72a:	4608      	mov	r0, r1
    b72c:	f7fe fd4a 	bl	a1c4 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    b730:	682b      	ldr	r3, [r5, #0]
    b732:	2b00      	cmp	r3, #0
    b734:	db1d      	blt.n	b772 <mayfly_xtal_stop_calc+0x172>
    b736:	429e      	cmp	r6, r3
    b738:	d21b      	bcs.n	b772 <mayfly_xtal_stop_calc+0x172>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    b73a:	1b9b      	subs	r3, r3, r6
			ticker_status =
    b73c:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b73e:	b29b      	uxth	r3, r3
			ticker_status =
    b740:	493c      	ldr	r1, [pc, #240]	; (b834 <mayfly_xtal_stop_calc+0x234>)
    b742:	9105      	str	r1, [sp, #20]
    b744:	9302      	str	r3, [sp, #8]
    b746:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b74a:	9506      	str	r5, [sp, #24]
    b74c:	9004      	str	r0, [sp, #16]
    b74e:	9003      	str	r0, [sp, #12]
    b750:	9001      	str	r0, [sp, #4]
    b752:	9000      	str	r0, [sp, #0]
    b754:	2101      	movs	r1, #1
    b756:	f7fc f981 	bl	7a5c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b75a:	f030 0302 	bics.w	r3, r0, #2
    b75e:	d008      	beq.n	b772 <mayfly_xtal_stop_calc+0x172>
    b760:	4a2d      	ldr	r2, [pc, #180]	; (b818 <mayfly_xtal_stop_calc+0x218>)
    b762:	4b2e      	ldr	r3, [pc, #184]	; (b81c <mayfly_xtal_stop_calc+0x21c>)
    b764:	9201      	str	r2, [sp, #4]
    b766:	9200      	str	r2, [sp, #0]
    b768:	681c      	ldr	r4, [r3, #0]
    b76a:	492d      	ldr	r1, [pc, #180]	; (b820 <mayfly_xtal_stop_calc+0x220>)
    b76c:	4b2d      	ldr	r3, [pc, #180]	; (b824 <mayfly_xtal_stop_calc+0x224>)
    b76e:	4832      	ldr	r0, [pc, #200]	; (b838 <mayfly_xtal_stop_calc+0x238>)
    b770:	e76c      	b.n	b64c <mayfly_xtal_stop_calc+0x4c>
		if (!conn_curr || !conn_next) {
    b772:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b774:	2e00      	cmp	r6, #0
    b776:	d08f      	beq.n	b698 <mayfly_xtal_stop_calc+0x98>
    b778:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b77a:	2d00      	cmp	r5, #0
    b77c:	d08c      	beq.n	b698 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    b77e:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    b780:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    b782:	429a      	cmp	r2, r3
    b784:	d188      	bne.n	b698 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    b786:	482d      	ldr	r0, [pc, #180]	; (b83c <mayfly_xtal_stop_calc+0x23c>)
    b788:	b292      	uxth	r2, r2
    b78a:	fba2 0100 	umull	r0, r1, r2, r0
    b78e:	f240 1323 	movw	r3, #291	; 0x123
    b792:	fb03 1102 	mla	r1, r3, r2, r1
    b796:	a31c      	add	r3, pc, #112	; (adr r3, b808 <mayfly_xtal_stop_calc+0x208>)
    b798:	e9d3 2300 	ldrd	r2, r3, [r3]
    b79c:	f7f4 fd3a 	bl	214 <__aeabi_uldivmod>
    b7a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b7a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    b7a6:	2200      	movs	r2, #0
    b7a8:	4298      	cmp	r0, r3
    b7aa:	d318      	bcc.n	b7de <mayfly_xtal_stop_calc+0x1de>
    b7ac:	b102      	cbz	r2, b7b0 <mayfly_xtal_stop_calc+0x1b0>
    b7ae:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    b7b0:	f996 201d 	ldrsb.w	r2, [r6, #29]
    b7b4:	2a00      	cmp	r2, #0
    b7b6:	f995 201d 	ldrsb.w	r2, [r5, #29]
    b7ba:	da13      	bge.n	b7e4 <mayfly_xtal_stop_calc+0x1e4>
    b7bc:	2a00      	cmp	r2, #0
    b7be:	f6ff af6b 	blt.w	b698 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
    b7c2:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    b7c4:	429c      	cmp	r4, r3
    b7c6:	f67f af67 	bls.w	b698 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
    b7ca:	4630      	mov	r0, r6
    b7cc:	f7fe f9f6 	bl	9bbc <conn_update_req>
				if (status == 2) {
    b7d0:	2802      	cmp	r0, #2
    b7d2:	f47f af61 	bne.w	b698 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
    b7d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    b7d8:	f7fe f9f0 	bl	9bbc <conn_update_req>
    b7dc:	e75c      	b.n	b698 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
    b7de:	1a1b      	subs	r3, r3, r0
    b7e0:	2201      	movs	r2, #1
    b7e2:	e7e1      	b.n	b7a8 <mayfly_xtal_stop_calc+0x1a8>
			} else if (!conn_curr->role && conn_next->role &&
    b7e4:	2a00      	cmp	r2, #0
    b7e6:	f6bf af57 	bge.w	b698 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
    b7ea:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    b7ec:	429c      	cmp	r4, r3
    b7ee:	f67f af53 	bls.w	b698 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
    b7f2:	4628      	mov	r0, r5
    b7f4:	f7fe f9e2 	bl	9bbc <conn_update_req>
				if (status == 2) {
    b7f8:	2802      	cmp	r0, #2
    b7fa:	f47f af4d 	bne.w	b698 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
    b7fe:	980a      	ldr	r0, [sp, #40]	; 0x28
    b800:	e7ea      	b.n	b7d8 <mayfly_xtal_stop_calc+0x1d8>
    b802:	bf00      	nop
    b804:	f3af 8000 	nop.w
    b808:	1afd498d 	.word	0x1afd498d
    b80c:	00000007 	.word	0x00000007
    b810:	00009b19 	.word	0x00009b19
    b814:	200008f0 	.word	0x200008f0
    b818:	000159e9 	.word	0x000159e9
    b81c:	20003ad4 	.word	0x20003ad4
    b820:	00016791 	.word	0x00016791
    b824:	00017fc9 	.word	0x00017fc9
    b828:	00018df0 	.word	0x00018df0
    b82c:	00018a94 	.word	0x00018a94
    b830:	00018abe 	.word	0x00018abe
    b834:	00009b1d 	.word	0x00009b1d
    b838:	000182f1 	.word	0x000182f1
    b83c:	09ce5400 	.word	0x09ce5400

0000b840 <preempt_calc>:
{
    b840:	b570      	push	{r4, r5, r6, lr}
    b842:	4614      	mov	r4, r2
    b844:	460e      	mov	r6, r1
    b846:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    b848:	f7fc fa26 	bl	7c98 <ticker_ticks_now_get>
	u32_t diff =
    b84c:	4621      	mov	r1, r4
    b84e:	f7fc fa25 	bl	7c9c <ticker_ticks_diff_get>
	diff += 3;
    b852:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    b854:	2c09      	cmp	r4, #9
    b856:	d90f      	bls.n	b878 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    b858:	2100      	movs	r1, #0
    b85a:	4608      	mov	r0, r1
    b85c:	f7fe fcb2 	bl	a1c4 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    b860:	4632      	mov	r2, r6
    b862:	2100      	movs	r1, #0
    b864:	4628      	mov	r0, r5
    b866:	f7ff fe91 	bl	b58c <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    b86a:	68ab      	ldr	r3, [r5, #8]
    b86c:	441c      	add	r4, r3
		if (diff <
    b86e:	2c26      	cmp	r4, #38	; 0x26
    b870:	d800      	bhi.n	b874 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    b872:	60ac      	str	r4, [r5, #8]
		return 1;
    b874:	2001      	movs	r0, #1
}
    b876:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    b878:	2000      	movs	r0, #0
    b87a:	bd70      	pop	{r4, r5, r6, pc}

0000b87c <adv_scan_configure.constprop.30>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    b87c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    b87e:	ad02      	add	r5, sp, #8
    b880:	4b10      	ldr	r3, [pc, #64]	; (b8c4 <adv_scan_configure.constprop.30+0x48>)
    b882:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    b886:	4604      	mov	r4, r0
	radio_reset();
    b888:	f007 fc6a 	bl	13160 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    b88c:	2000      	movs	r0, #0
    b88e:	f007 fc91 	bl	131b4 <radio_tx_power_set>
	radio_isr_set(isr);
    b892:	480d      	ldr	r0, [pc, #52]	; (b8c8 <adv_scan_configure.constprop.30+0x4c>)
    b894:	f007 fc2e 	bl	130f4 <radio_isr_set>
	radio_phy_set(phy, flags);
    b898:	2101      	movs	r1, #1
    b89a:	4620      	mov	r0, r4
    b89c:	f007 fc7a 	bl	13194 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    b8a0:	4628      	mov	r0, r5
    b8a2:	f007 fca5 	bl	131f0 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    b8a6:	0062      	lsls	r2, r4, #1
    b8a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b8ac:	2125      	movs	r1, #37	; 0x25
    b8ae:	2008      	movs	r0, #8
    b8b0:	f007 fcb6 	bl	13220 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    b8b4:	4905      	ldr	r1, [pc, #20]	; (b8cc <adv_scan_configure.constprop.30+0x50>)
    b8b6:	f240 605b 	movw	r0, #1627	; 0x65b
    b8ba:	f007 fd41 	bl	13340 <radio_crc_configure>
}
    b8be:	b003      	add	sp, #12
    b8c0:	bd30      	pop	{r4, r5, pc}
    b8c2:	bf00      	nop
    b8c4:	8e89bed6 	.word	0x8e89bed6
    b8c8:	0000ea69 	.word	0x0000ea69
    b8cc:	00555555 	.word	0x00555555

0000b8d0 <event_scan>:
{
    b8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    b8d2:	4b63      	ldr	r3, [pc, #396]	; (ba60 <event_scan+0x190>)
    b8d4:	7cda      	ldrb	r2, [r3, #19]
{
    b8d6:	b08d      	sub	sp, #52	; 0x34
    b8d8:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    b8da:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    b8de:	461c      	mov	r4, r3
    b8e0:	b172      	cbz	r2, b900 <event_scan+0x30>
    b8e2:	4a60      	ldr	r2, [pc, #384]	; (ba64 <event_scan+0x194>)
    b8e4:	4b60      	ldr	r3, [pc, #384]	; (ba68 <event_scan+0x198>)
    b8e6:	9201      	str	r2, [sp, #4]
    b8e8:	9200      	str	r2, [sp, #0]
    b8ea:	681c      	ldr	r4, [r3, #0]
    b8ec:	495f      	ldr	r1, [pc, #380]	; (ba6c <event_scan+0x19c>)
    b8ee:	4b60      	ldr	r3, [pc, #384]	; (ba70 <event_scan+0x1a0>)
    b8f0:	4860      	ldr	r0, [pc, #384]	; (ba74 <event_scan+0x1a4>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    b8f2:	47a0      	blx	r4
    b8f4:	4040      	eors	r0, r0
    b8f6:	f380 8811 	msr	BASEPRI, r0
    b8fa:	f04f 0004 	mov.w	r0, #4
    b8fe:	df02      	svc	2
    b900:	7c1b      	ldrb	r3, [r3, #16]
    b902:	b2db      	uxtb	r3, r3
    b904:	2b06      	cmp	r3, #6
    b906:	d008      	beq.n	b91a <event_scan+0x4a>
    b908:	4a56      	ldr	r2, [pc, #344]	; (ba64 <event_scan+0x194>)
    b90a:	4b57      	ldr	r3, [pc, #348]	; (ba68 <event_scan+0x198>)
    b90c:	9201      	str	r2, [sp, #4]
    b90e:	9200      	str	r2, [sp, #0]
    b910:	681c      	ldr	r4, [r3, #0]
    b912:	4956      	ldr	r1, [pc, #344]	; (ba6c <event_scan+0x19c>)
    b914:	4b56      	ldr	r3, [pc, #344]	; (ba70 <event_scan+0x1a0>)
    b916:	4858      	ldr	r0, [pc, #352]	; (ba78 <event_scan+0x1a8>)
    b918:	e7eb      	b.n	b8f2 <event_scan+0x22>
	_radio.role = ROLE_SCAN;
    b91a:	2202      	movs	r2, #2
    b91c:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    b91e:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    b920:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b922:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    b926:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    b928:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    b92c:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    b92e:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b932:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    b936:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    b938:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b93c:	f7ff ff9e 	bl	b87c <adv_scan_configure.constprop.30>
	chan_set(37 + _radio.scanner.chan++);
    b940:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b944:	f3c3 0081 	ubfx	r0, r3, #2, #2
    b948:	1c42      	adds	r2, r0, #1
    b94a:	f362 0383 	bfi	r3, r2, #2, #2
    b94e:	3025      	adds	r0, #37	; 0x25
    b950:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    b954:	f7ff fbc2 	bl	b0dc <chan_set>
	if (_radio.scanner.chan == 3) {
    b958:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b95c:	f003 020c 	and.w	r2, r3, #12
    b960:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    b962:	bf08      	it	eq
    b964:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    b968:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    b96c:	bf08      	it	eq
    b96e:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    b972:	f007 fd9f 	bl	134b4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    b976:	2300      	movs	r3, #0
    b978:	4619      	mov	r1, r3
    b97a:	461a      	mov	r2, r3
    b97c:	4618      	mov	r0, r3
    b97e:	f007 fd09 	bl	13394 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    b982:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    b986:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    b98a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b98e:	3008      	adds	r0, #8
    b990:	f007 fc74 	bl	1327c <radio_pkt_rx_set>
	radio_rssi_measure();
    b994:	f007 fd16 	bl	133c4 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    b998:	f006 feac 	bl	126f4 <ctrl_rl_enabled>
    b99c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    b9a0:	b340      	cbz	r0, b9f4 <event_scan+0x124>
		struct ll_filter *filter =
    b9a2:	f3c3 1000 	ubfx	r0, r3, #4, #1
    b9a6:	f006 fca3 	bl	122f0 <ctrl_filter_get>
    b9aa:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    b9ac:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    b9b0:	f006 fbce 	bl	12150 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    b9b4:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    b9b6:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    b9b8:	1cb2      	adds	r2, r6, #2
    b9ba:	7830      	ldrb	r0, [r6, #0]
    b9bc:	f007 fd24 	bl	13408 <radio_filter_configure>
		radio_ar_configure(count, irks);
    b9c0:	4639      	mov	r1, r7
    b9c2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    b9c6:	f007 fef9 	bl	137bc <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    b9ca:	68e2      	ldr	r2, [r4, #12]
    b9cc:	f105 0109 	add.w	r1, r5, #9
    b9d0:	2000      	movs	r0, #0
    b9d2:	f007 fd7b 	bl	134cc <radio_tmr_start>
	radio_tmr_end_capture();
    b9d6:	f007 fe49 	bl	1366c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    b9da:	2106      	movs	r1, #6
    b9dc:	462a      	mov	r2, r5
    b9de:	4827      	ldr	r0, [pc, #156]	; (ba7c <event_scan+0x1ac>)
    b9e0:	f7ff ff2e 	bl	b840 <preempt_calc>
    b9e4:	4601      	mov	r1, r0
    b9e6:	b188      	cbz	r0, ba0c <event_scan+0x13c>
		_radio.state = STATE_STOP;
    b9e8:	2304      	movs	r3, #4
    b9ea:	7523      	strb	r3, [r4, #20]
		radio_disable();
    b9ec:	f007 fc6c 	bl	132c8 <radio_disable>
}
    b9f0:	b00d      	add	sp, #52	; 0x34
    b9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    b9f4:	f013 0f30 	tst.w	r3, #48	; 0x30
    b9f8:	d0e7      	beq.n	b9ca <event_scan+0xfa>
		struct ll_filter *wl = ctrl_filter_get(true);
    b9fa:	2001      	movs	r0, #1
    b9fc:	f006 fc78 	bl	122f0 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    ba00:	1c82      	adds	r2, r0, #2
    ba02:	7841      	ldrb	r1, [r0, #1]
    ba04:	7800      	ldrb	r0, [r0, #0]
    ba06:	f007 fcff 	bl	13408 <radio_filter_configure>
    ba0a:	e7de      	b.n	b9ca <event_scan+0xfa>
		ret = ticker_start(
    ba0c:	f641 1336 	movw	r3, #6454	; 0x1936
    ba10:	9308      	str	r3, [sp, #32]
    ba12:	4b1b      	ldr	r3, [pc, #108]	; (ba80 <event_scan+0x1b0>)
    ba14:	9307      	str	r3, [sp, #28]
    ba16:	2204      	movs	r2, #4
    ba18:	4b1a      	ldr	r3, [pc, #104]	; (ba84 <event_scan+0x1b4>)
    ba1a:	9206      	str	r2, [sp, #24]
    ba1c:	9305      	str	r3, [sp, #20]
    ba1e:	9004      	str	r0, [sp, #16]
    ba20:	9003      	str	r0, [sp, #12]
    ba22:	9002      	str	r0, [sp, #8]
    ba24:	9001      	str	r0, [sp, #4]
    ba26:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    ba2a:	3309      	adds	r3, #9
    ba2c:	9300      	str	r3, [sp, #0]
    ba2e:	462b      	mov	r3, r5
    ba30:	f7fb ffc4 	bl	79bc <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    ba34:	f030 0302 	bics.w	r3, r0, #2
    ba38:	d008      	beq.n	ba4c <event_scan+0x17c>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    ba3a:	4a0a      	ldr	r2, [pc, #40]	; (ba64 <event_scan+0x194>)
    ba3c:	4b0a      	ldr	r3, [pc, #40]	; (ba68 <event_scan+0x198>)
    ba3e:	9201      	str	r2, [sp, #4]
    ba40:	9200      	str	r2, [sp, #0]
    ba42:	681c      	ldr	r4, [r3, #0]
    ba44:	4909      	ldr	r1, [pc, #36]	; (ba6c <event_scan+0x19c>)
    ba46:	4b0a      	ldr	r3, [pc, #40]	; (ba70 <event_scan+0x1a0>)
    ba48:	480f      	ldr	r0, [pc, #60]	; (ba88 <event_scan+0x1b8>)
    ba4a:	e752      	b.n	b8f2 <event_scan+0x22>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    ba4c:	4619      	mov	r1, r3
    ba4e:	4618      	mov	r0, r3
    ba50:	4a0e      	ldr	r2, [pc, #56]	; (ba8c <event_scan+0x1bc>)
    ba52:	f7fc f8cf 	bl	7bf4 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    ba56:	f030 0302 	bics.w	r3, r0, #2
    ba5a:	d1ee      	bne.n	ba3a <event_scan+0x16a>
    ba5c:	e7c8      	b.n	b9f0 <event_scan+0x120>
    ba5e:	bf00      	nop
    ba60:	200008f0 	.word	0x200008f0
    ba64:	000159e9 	.word	0x000159e9
    ba68:	20003ad4 	.word	0x20003ad4
    ba6c:	00016791 	.word	0x00016791
    ba70:	0001810a 	.word	0x0001810a
    ba74:	0001844c 	.word	0x0001844c
    ba78:	00018486 	.word	0x00018486
    ba7c:	200009c0 	.word	0x200009c0
    ba80:	0000aaa1 	.word	0x0000aaa1
    ba84:	0000ad0d 	.word	0x0000ad0d
    ba88:	000184c5 	.word	0x000184c5
    ba8c:	0000ac85 	.word	0x0000ac85

0000ba90 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    ba90:	4b3c      	ldr	r3, [pc, #240]	; (bb84 <event_adv+0xf4>)
    ba92:	7cda      	ldrb	r2, [r3, #19]
{
    ba94:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ba96:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    ba98:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    ba9c:	461c      	mov	r4, r3
    ba9e:	b172      	cbz	r2, babe <event_adv+0x2e>
    baa0:	4a39      	ldr	r2, [pc, #228]	; (bb88 <event_adv+0xf8>)
    baa2:	4b3a      	ldr	r3, [pc, #232]	; (bb8c <event_adv+0xfc>)
    baa4:	9201      	str	r2, [sp, #4]
    baa6:	9200      	str	r2, [sp, #0]
    baa8:	681c      	ldr	r4, [r3, #0]
    baaa:	4939      	ldr	r1, [pc, #228]	; (bb90 <event_adv+0x100>)
    baac:	4b39      	ldr	r3, [pc, #228]	; (bb94 <event_adv+0x104>)
    baae:	483a      	ldr	r0, [pc, #232]	; (bb98 <event_adv+0x108>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    bab0:	47a0      	blx	r4
    bab2:	4040      	eors	r0, r0
    bab4:	f380 8811 	msr	BASEPRI, r0
    bab8:	f04f 0004 	mov.w	r0, #4
    babc:	df02      	svc	2
    babe:	7c1b      	ldrb	r3, [r3, #16]
    bac0:	b2db      	uxtb	r3, r3
    bac2:	2b05      	cmp	r3, #5
    bac4:	d008      	beq.n	bad8 <event_adv+0x48>
    bac6:	4a30      	ldr	r2, [pc, #192]	; (bb88 <event_adv+0xf8>)
    bac8:	4b30      	ldr	r3, [pc, #192]	; (bb8c <event_adv+0xfc>)
    baca:	9201      	str	r2, [sp, #4]
    bacc:	9200      	str	r2, [sp, #0]
    bace:	681c      	ldr	r4, [r3, #0]
    bad0:	492f      	ldr	r1, [pc, #188]	; (bb90 <event_adv+0x100>)
    bad2:	4b30      	ldr	r3, [pc, #192]	; (bb94 <event_adv+0x104>)
    bad4:	4831      	ldr	r0, [pc, #196]	; (bb9c <event_adv+0x10c>)
    bad6:	e7eb      	b.n	bab0 <event_adv+0x20>
	_radio.ticks_anchor = ticks_at_expire;
    bad8:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    bada:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    bade:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    bae0:	f000 0007 	and.w	r0, r0, #7
	_radio.role = ROLE_ADV;
    bae4:	74e6      	strb	r6, [r4, #19]
	_radio.ticker_id_prepare = 0;
    bae6:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    bae8:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    baea:	f7ff fec7 	bl	b87c <adv_scan_configure.constprop.30>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    baee:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    baf2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    baf6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    bafa:	f363 0202 	bfi	r2, r3, #0, #3
    bafe:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    bb02:	f7ff fb23 	bl	b14c <adv_setup>
	if (ctrl_rl_enabled()) {
    bb06:	f006 fdf5 	bl	126f4 <ctrl_rl_enabled>
    bb0a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    bb0e:	b308      	cbz	r0, bb54 <event_adv+0xc4>
			ctrl_filter_get(!!(_radio.advertiser.filter_policy));
    bb10:	f013 0fc0 	tst.w	r3, #192	; 0xc0
		struct ll_filter *filter =
    bb14:	bf14      	ite	ne
    bb16:	4630      	movne	r0, r6
    bb18:	2000      	moveq	r0, #0
		struct ll_filter *wl = ctrl_filter_get(true);
    bb1a:	f006 fbe9 	bl	122f0 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    bb1e:	1c82      	adds	r2, r0, #2
    bb20:	7841      	ldrb	r1, [r0, #1]
    bb22:	7800      	ldrb	r0, [r0, #0]
    bb24:	f007 fc70 	bl	13408 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    bb28:	68e2      	ldr	r2, [r4, #12]
    bb2a:	f105 0109 	add.w	r1, r5, #9
    bb2e:	2001      	movs	r0, #1
    bb30:	f007 fccc 	bl	134cc <radio_tmr_start>
	radio_tmr_end_capture();
    bb34:	f007 fd9a 	bl	1366c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    bb38:	462a      	mov	r2, r5
    bb3a:	2105      	movs	r1, #5
    bb3c:	4818      	ldr	r0, [pc, #96]	; (bba0 <event_adv+0x110>)
    bb3e:	f7ff fe7f 	bl	b840 <preempt_calc>
    bb42:	4603      	mov	r3, r0
    bb44:	b158      	cbz	r0, bb5e <event_adv+0xce>
		_radio.state = STATE_STOP;
    bb46:	2304      	movs	r3, #4
    bb48:	7523      	strb	r3, [r4, #20]
}
    bb4a:	b002      	add	sp, #8
    bb4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    bb50:	f007 bbba 	b.w	132c8 <radio_disable>
	if (_radio.advertiser.filter_policy) {
    bb54:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    bb58:	d0e6      	beq.n	bb28 <event_adv+0x98>
		struct ll_filter *wl = ctrl_filter_get(true);
    bb5a:	4630      	mov	r0, r6
    bb5c:	e7dd      	b.n	bb1a <event_adv+0x8a>
		ticker_status =
    bb5e:	4a11      	ldr	r2, [pc, #68]	; (bba4 <event_adv+0x114>)
    bb60:	4601      	mov	r1, r0
    bb62:	f7fc f847 	bl	7bf4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bb66:	f030 0302 	bics.w	r3, r0, #2
    bb6a:	d008      	beq.n	bb7e <event_adv+0xee>
    bb6c:	4a06      	ldr	r2, [pc, #24]	; (bb88 <event_adv+0xf8>)
    bb6e:	4b07      	ldr	r3, [pc, #28]	; (bb8c <event_adv+0xfc>)
    bb70:	9201      	str	r2, [sp, #4]
    bb72:	9200      	str	r2, [sp, #0]
    bb74:	681c      	ldr	r4, [r3, #0]
    bb76:	4906      	ldr	r1, [pc, #24]	; (bb90 <event_adv+0x100>)
    bb78:	4b06      	ldr	r3, [pc, #24]	; (bb94 <event_adv+0x104>)
    bb7a:	480b      	ldr	r0, [pc, #44]	; (bba8 <event_adv+0x118>)
    bb7c:	e798      	b.n	bab0 <event_adv+0x20>
}
    bb7e:	b002      	add	sp, #8
    bb80:	bd70      	pop	{r4, r5, r6, pc}
    bb82:	bf00      	nop
    bb84:	200008f0 	.word	0x200008f0
    bb88:	000159e9 	.word	0x000159e9
    bb8c:	20003ad4 	.word	0x20003ad4
    bb90:	00016791 	.word	0x00016791
    bb94:	0001809d 	.word	0x0001809d
    bb98:	0001844c 	.word	0x0001844c
    bb9c:	0001833f 	.word	0x0001833f
    bba0:	20000908 	.word	0x20000908
    bba4:	0000ac85 	.word	0x0000ac85
    bba8:	000182f1 	.word	0x000182f1

0000bbac <event_stop.constprop.31>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    bbac:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    bbae:	4b05      	ldr	r3, [pc, #20]	; (bbc4 <event_stop.constprop.31+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bbb0:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    bbb2:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bbb4:	4611      	mov	r1, r2
    bbb6:	4610      	mov	r0, r2
    bbb8:	f7fb f942 	bl	6e40 <mayfly_enqueue>
	LL_ASSERT(!retval);
    bbbc:	b108      	cbz	r0, bbc2 <event_stop.constprop.31+0x16>
    bbbe:	f7ff f88b 	bl	acd8 <event_stop.part.10>
    bbc2:	bd08      	pop	{r3, pc}
    bbc4:	20003e08 	.word	0x20003e08

0000bbc8 <event_common_prepare>:
{
    bbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    bbcc:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    bbce:	681d      	ldr	r5, [r3, #0]
{
    bbd0:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    bbd2:	2c00      	cmp	r4, #0
{
    bbd4:	4681      	mov	r9, r0
    bbd6:	910b      	str	r1, [sp, #44]	; 0x2c
    bbd8:	4690      	mov	r8, r2
    bbda:	469b      	mov	fp, r3
    bbdc:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    bbe0:	da03      	bge.n	bbea <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    bbe2:	9c16      	ldr	r4, [sp, #88]	; 0x58
    bbe4:	42ac      	cmp	r4, r5
    bbe6:	bf38      	it	cc
    bbe8:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    bbea:	42ac      	cmp	r4, r5
    bbec:	4f56      	ldr	r7, [pc, #344]	; (bd48 <event_common_prepare+0x180>)
    bbee:	d924      	bls.n	bc3a <event_common_prepare+0x72>
		ticker_status =
    bbf0:	f241 5374 	movw	r3, #5492	; 0x1574
    bbf4:	9308      	str	r3, [sp, #32]
    bbf6:	4b55      	ldr	r3, [pc, #340]	; (bd4c <event_common_prepare+0x184>)
    bbf8:	9305      	str	r3, [sp, #20]
    bbfa:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    bbfc:	1b63      	subs	r3, r4, r5
		ticker_status =
    bbfe:	9300      	str	r3, [sp, #0]
    bc00:	9707      	str	r7, [sp, #28]
    bc02:	464b      	mov	r3, r9
    bc04:	9106      	str	r1, [sp, #24]
    bc06:	9104      	str	r1, [sp, #16]
    bc08:	9103      	str	r1, [sp, #12]
    bc0a:	9102      	str	r1, [sp, #8]
    bc0c:	9101      	str	r1, [sp, #4]
    bc0e:	2201      	movs	r2, #1
    bc10:	4608      	mov	r0, r1
    bc12:	f7fb fed3 	bl	79bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bc16:	f030 0302 	bics.w	r3, r0, #2
    bc1a:	d034      	beq.n	bc86 <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bc1c:	4a4c      	ldr	r2, [pc, #304]	; (bd50 <event_common_prepare+0x188>)
    bc1e:	4b4d      	ldr	r3, [pc, #308]	; (bd54 <event_common_prepare+0x18c>)
    bc20:	9201      	str	r2, [sp, #4]
    bc22:	9200      	str	r2, [sp, #0]
    bc24:	681c      	ldr	r4, [r3, #0]
    bc26:	494c      	ldr	r1, [pc, #304]	; (bd58 <event_common_prepare+0x190>)
    bc28:	4b4c      	ldr	r3, [pc, #304]	; (bd5c <event_common_prepare+0x194>)
    bc2a:	484d      	ldr	r0, [pc, #308]	; (bd60 <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
    bc2c:	47a0      	blx	r4
    bc2e:	4040      	eors	r0, r0
    bc30:	f380 8811 	msr	BASEPRI, r0
    bc34:	f04f 0004 	mov.w	r0, #4
    bc38:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    bc3a:	d21d      	bcs.n	bc78 <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
    bc3c:	2300      	movs	r3, #0
    bc3e:	461a      	mov	r2, r3
    bc40:	4619      	mov	r1, r3
    bc42:	4618      	mov	r0, r3
    bc44:	f7ff f872 	bl	ad2c <event_active>
		ticker_status =
    bc48:	f241 5389 	movw	r3, #5513	; 0x1589
    bc4c:	2100      	movs	r1, #0
    bc4e:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    bc50:	1b2c      	subs	r4, r5, r4
		ticker_status =
    bc52:	4b44      	ldr	r3, [pc, #272]	; (bd64 <event_common_prepare+0x19c>)
    bc54:	9305      	str	r3, [sp, #20]
    bc56:	9707      	str	r7, [sp, #28]
    bc58:	464b      	mov	r3, r9
    bc5a:	9106      	str	r1, [sp, #24]
    bc5c:	9104      	str	r1, [sp, #16]
    bc5e:	9103      	str	r1, [sp, #12]
    bc60:	9102      	str	r1, [sp, #8]
    bc62:	9101      	str	r1, [sp, #4]
    bc64:	9400      	str	r4, [sp, #0]
    bc66:	2201      	movs	r2, #1
    bc68:	4608      	mov	r0, r1
    bc6a:	f7fb fea7 	bl	79bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bc6e:	f030 0302 	bics.w	r3, r0, #2
    bc72:	d1d3      	bne.n	bc1c <event_common_prepare+0x54>
    bc74:	462c      	mov	r4, r5
    bc76:	e00b      	b.n	bc90 <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
    bc78:	2300      	movs	r3, #0
    bc7a:	461a      	mov	r2, r3
    bc7c:	4619      	mov	r1, r3
    bc7e:	4618      	mov	r0, r3
    bc80:	f7ff f854 	bl	ad2c <event_active>
		event_xtal(0, 0, 0, NULL);
    bc84:	2300      	movs	r3, #0
    bc86:	461a      	mov	r2, r3
    bc88:	4619      	mov	r1, r3
    bc8a:	4618      	mov	r0, r3
    bc8c:	f7ff f874 	bl	ad78 <event_xtal>
	_radio.remainder_anchor = remainder;
    bc90:	4e35      	ldr	r6, [pc, #212]	; (bd68 <event_common_prepare+0x1a0>)
    bc92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bc94:	60f3      	str	r3, [r6, #12]
	ticker_status =
    bc96:	f241 53a1 	movw	r3, #5537	; 0x15a1
    bc9a:	9308      	str	r3, [sp, #32]
    bc9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    bc9e:	9306      	str	r3, [sp, #24]
    bca0:	2200      	movs	r2, #0
    bca2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    bca4:	9305      	str	r3, [sp, #20]
    bca6:	9707      	str	r7, [sp, #28]
    bca8:	464b      	mov	r3, r9
    bcaa:	9204      	str	r2, [sp, #16]
    bcac:	9203      	str	r2, [sp, #12]
    bcae:	9202      	str	r2, [sp, #8]
    bcb0:	9201      	str	r2, [sp, #4]
    bcb2:	9400      	str	r4, [sp, #0]
    bcb4:	4611      	mov	r1, r2
    bcb6:	4610      	mov	r0, r2
    bcb8:	f7fb fe80 	bl	79bc <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bcbc:	f030 0302 	bics.w	r3, r0, #2
    bcc0:	d1ac      	bne.n	bc1c <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    bcc2:	2005      	movs	r0, #5
    bcc4:	f7ff ff72 	bl	bbac <event_stop.constprop.31>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    bcc8:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    bccc:	429d      	cmp	r5, r3
    bcce:	d023      	beq.n	bd18 <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    bcd0:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    bcd4:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    bcd8:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    bcda:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    bcdc:	bfbc      	itt	lt
    bcde:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    bce2:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    bce6:	f8d8 2000 	ldr.w	r2, [r8]
    bcea:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    bcee:	428a      	cmp	r2, r1
    bcf0:	bf38      	it	cc
    bcf2:	460a      	movcc	r2, r1
		ticker_status =
    bcf4:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    bcf8:	b2a3      	uxth	r3, r4
    bcfa:	b292      	uxth	r2, r2
		ticker_status =
    bcfc:	9106      	str	r1, [sp, #24]
    bcfe:	2100      	movs	r1, #0
    bd00:	9302      	str	r3, [sp, #8]
    bd02:	9201      	str	r2, [sp, #4]
    bd04:	9200      	str	r2, [sp, #0]
    bd06:	9104      	str	r1, [sp, #16]
    bd08:	9103      	str	r1, [sp, #12]
    bd0a:	4652      	mov	r2, sl
    bd0c:	4608      	mov	r0, r1
    bd0e:	f7fb fea5 	bl	7a5c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bd12:	f030 0302 	bics.w	r3, r0, #2
    bd16:	d181      	bne.n	bc1c <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    bd18:	20ff      	movs	r0, #255	; 0xff
    bd1a:	f7ff f8f5 	bl	af08 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    bd1e:	4b13      	ldr	r3, [pc, #76]	; (bd6c <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bd20:	2201      	movs	r2, #1
    bd22:	4611      	mov	r1, r2
    bd24:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    bd26:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bd2a:	f7fb f889 	bl	6e40 <mayfly_enqueue>
		LL_ASSERT(!retval);
    bd2e:	b140      	cbz	r0, bd42 <event_common_prepare+0x17a>
    bd30:	4a07      	ldr	r2, [pc, #28]	; (bd50 <event_common_prepare+0x188>)
    bd32:	4b08      	ldr	r3, [pc, #32]	; (bd54 <event_common_prepare+0x18c>)
    bd34:	9201      	str	r2, [sp, #4]
    bd36:	9200      	str	r2, [sp, #0]
    bd38:	681c      	ldr	r4, [r3, #0]
    bd3a:	4907      	ldr	r1, [pc, #28]	; (bd58 <event_common_prepare+0x190>)
    bd3c:	4b07      	ldr	r3, [pc, #28]	; (bd5c <event_common_prepare+0x194>)
    bd3e:	480c      	ldr	r0, [pc, #48]	; (bd70 <event_common_prepare+0x1a8>)
    bd40:	e774      	b.n	bc2c <event_common_prepare+0x64>
}
    bd42:	b00d      	add	sp, #52	; 0x34
    bd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd48:	0000aaa1 	.word	0x0000aaa1
    bd4c:	0000ad2d 	.word	0x0000ad2d
    bd50:	000159e9 	.word	0x000159e9
    bd54:	20003ad4 	.word	0x20003ad4
    bd58:	00016791 	.word	0x00016791
    bd5c:	00018057 	.word	0x00018057
    bd60:	000182f1 	.word	0x000182f1
    bd64:	0000ad79 	.word	0x0000ad79
    bd68:	200008f0 	.word	0x200008f0
    bd6c:	20003ec8 	.word	0x20003ec8
    bd70:	00018a6b 	.word	0x00018a6b

0000bd74 <radio_event_adv_prepare>:
{
    bd74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    bd76:	4a11      	ldr	r2, [pc, #68]	; (bdbc <radio_event_adv_prepare+0x48>)
    bd78:	7c13      	ldrb	r3, [r2, #16]
    bd7a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    bd7e:	b173      	cbz	r3, bd9e <radio_event_adv_prepare+0x2a>
    bd80:	4a0f      	ldr	r2, [pc, #60]	; (bdc0 <radio_event_adv_prepare+0x4c>)
    bd82:	4b10      	ldr	r3, [pc, #64]	; (bdc4 <radio_event_adv_prepare+0x50>)
    bd84:	9201      	str	r2, [sp, #4]
    bd86:	9200      	str	r2, [sp, #0]
    bd88:	681c      	ldr	r4, [r3, #0]
    bd8a:	490f      	ldr	r1, [pc, #60]	; (bdc8 <radio_event_adv_prepare+0x54>)
    bd8c:	4b0f      	ldr	r3, [pc, #60]	; (bdcc <radio_event_adv_prepare+0x58>)
    bd8e:	4810      	ldr	r0, [pc, #64]	; (bdd0 <radio_event_adv_prepare+0x5c>)
    bd90:	47a0      	blx	r4
    bd92:	4040      	eors	r0, r0
    bd94:	f380 8811 	msr	BASEPRI, r0
    bd98:	f04f 0004 	mov.w	r0, #4
    bd9c:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    bd9e:	2305      	movs	r3, #5
    bda0:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    bda2:	9403      	str	r4, [sp, #12]
    bda4:	4c0b      	ldr	r4, [pc, #44]	; (bdd4 <radio_event_adv_prepare+0x60>)
    bda6:	9402      	str	r4, [sp, #8]
    bda8:	9301      	str	r3, [sp, #4]
    bdaa:	6a13      	ldr	r3, [r2, #32]
    bdac:	9300      	str	r3, [sp, #0]
    bdae:	f102 031c 	add.w	r3, r2, #28
    bdb2:	3218      	adds	r2, #24
    bdb4:	f7ff ff08 	bl	bbc8 <event_common_prepare>
}
    bdb8:	b004      	add	sp, #16
    bdba:	bd10      	pop	{r4, pc}
    bdbc:	200008f0 	.word	0x200008f0
    bdc0:	000159e9 	.word	0x000159e9
    bdc4:	20003ad4 	.word	0x20003ad4
    bdc8:	00016791 	.word	0x00016791
    bdcc:	00018085 	.word	0x00018085
    bdd0:	00018ba7 	.word	0x00018ba7
    bdd4:	0000ba91 	.word	0x0000ba91

0000bdd8 <event_scan_prepare>:
{
    bdd8:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    bdda:	4c26      	ldr	r4, [pc, #152]	; (be74 <event_scan_prepare+0x9c>)
    bddc:	7c23      	ldrb	r3, [r4, #16]
{
    bdde:	b085      	sub	sp, #20
    bde0:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    bde2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    bde6:	b173      	cbz	r3, be06 <event_scan_prepare+0x2e>
    bde8:	4a23      	ldr	r2, [pc, #140]	; (be78 <event_scan_prepare+0xa0>)
    bdea:	4b24      	ldr	r3, [pc, #144]	; (be7c <event_scan_prepare+0xa4>)
    bdec:	9201      	str	r2, [sp, #4]
    bdee:	9200      	str	r2, [sp, #0]
    bdf0:	681c      	ldr	r4, [r3, #0]
    bdf2:	4923      	ldr	r1, [pc, #140]	; (be80 <event_scan_prepare+0xa8>)
    bdf4:	4b23      	ldr	r3, [pc, #140]	; (be84 <event_scan_prepare+0xac>)
    bdf6:	4824      	ldr	r0, [pc, #144]	; (be88 <event_scan_prepare+0xb0>)
		LL_ASSERT(!retval);
    bdf8:	47a0      	blx	r4
    bdfa:	4040      	eors	r0, r0
    bdfc:	f380 8811 	msr	BASEPRI, r0
    be00:	f04f 0004 	mov.w	r0, #4
    be04:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    be06:	2306      	movs	r3, #6
    be08:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    be0a:	9203      	str	r2, [sp, #12]
    be0c:	4a1f      	ldr	r2, [pc, #124]	; (be8c <event_scan_prepare+0xb4>)
    be0e:	9202      	str	r2, [sp, #8]
    be10:	9301      	str	r3, [sp, #4]
    be12:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    be16:	9300      	str	r3, [sp, #0]
    be18:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    be1c:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    be20:	f7ff fed2 	bl	bbc8 <event_common_prepare>
	if (_radio.scanner.conn) {
    be24:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    be28:	b30b      	cbz	r3, be6e <event_scan_prepare+0x96>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    be2a:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    be2e:	2b00      	cmp	r3, #0
    be30:	da0c      	bge.n	be4c <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
    be32:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    be36:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    be3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    be3e:	4291      	cmp	r1, r2
    be40:	bf2c      	ite	cs
    be42:	ebc3 0301 	rsbcs	r3, r3, r1
    be46:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    be4a:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    be4c:	4b10      	ldr	r3, [pc, #64]	; (be90 <event_scan_prepare+0xb8>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    be4e:	2201      	movs	r2, #1
    be50:	4611      	mov	r1, r2
    be52:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    be54:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    be56:	f7fa fff3 	bl	6e40 <mayfly_enqueue>
		LL_ASSERT(!retval);
    be5a:	b140      	cbz	r0, be6e <event_scan_prepare+0x96>
    be5c:	4a06      	ldr	r2, [pc, #24]	; (be78 <event_scan_prepare+0xa0>)
    be5e:	4b07      	ldr	r3, [pc, #28]	; (be7c <event_scan_prepare+0xa4>)
    be60:	9201      	str	r2, [sp, #4]
    be62:	9200      	str	r2, [sp, #0]
    be64:	681c      	ldr	r4, [r3, #0]
    be66:	4906      	ldr	r1, [pc, #24]	; (be80 <event_scan_prepare+0xa8>)
    be68:	4b06      	ldr	r3, [pc, #24]	; (be84 <event_scan_prepare+0xac>)
    be6a:	480a      	ldr	r0, [pc, #40]	; (be94 <event_scan_prepare+0xbc>)
    be6c:	e7c4      	b.n	bdf8 <event_scan_prepare+0x20>
}
    be6e:	b005      	add	sp, #20
    be70:	bd30      	pop	{r4, r5, pc}
    be72:	bf00      	nop
    be74:	200008f0 	.word	0x200008f0
    be78:	000159e9 	.word	0x000159e9
    be7c:	20003ad4 	.word	0x20003ad4
    be80:	00016791 	.word	0x00016791
    be84:	000180f7 	.word	0x000180f7
    be88:	00018ba7 	.word	0x00018ba7
    be8c:	0000b8d1 	.word	0x0000b8d1
    be90:	20003e38 	.word	0x20003e38
    be94:	00018a6b 	.word	0x00018a6b

0000be98 <event_adv_stop>:
{
    be98:	b513      	push	{r0, r1, r4, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    be9a:	2005      	movs	r0, #5
    be9c:	f7ff fe86 	bl	bbac <event_stop.constprop.31>
	ticker_status =
    bea0:	f641 0393 	movw	r3, #6291	; 0x1893
    bea4:	2100      	movs	r1, #0
    bea6:	9300      	str	r3, [sp, #0]
    bea8:	2205      	movs	r2, #5
    beaa:	4b0c      	ldr	r3, [pc, #48]	; (bedc <event_adv_stop+0x44>)
    beac:	4608      	mov	r0, r1
    beae:	f7fb fe23 	bl	7af8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    beb2:	f030 0302 	bics.w	r3, r0, #2
    beb6:	d00e      	beq.n	bed6 <event_adv_stop+0x3e>
    beb8:	4a09      	ldr	r2, [pc, #36]	; (bee0 <event_adv_stop+0x48>)
    beba:	4b0a      	ldr	r3, [pc, #40]	; (bee4 <event_adv_stop+0x4c>)
    bebc:	9201      	str	r2, [sp, #4]
    bebe:	9200      	str	r2, [sp, #0]
    bec0:	681c      	ldr	r4, [r3, #0]
    bec2:	4909      	ldr	r1, [pc, #36]	; (bee8 <event_adv_stop+0x50>)
    bec4:	4b09      	ldr	r3, [pc, #36]	; (beec <event_adv_stop+0x54>)
    bec6:	480a      	ldr	r0, [pc, #40]	; (bef0 <event_adv_stop+0x58>)
    bec8:	47a0      	blx	r4
    beca:	4040      	eors	r0, r0
    becc:	f380 8811 	msr	BASEPRI, r0
    bed0:	f04f 0004 	mov.w	r0, #4
    bed4:	df02      	svc	2
}
    bed6:	b002      	add	sp, #8
    bed8:	bd10      	pop	{r4, pc}
    beda:	bf00      	nop
    bedc:	0000b219 	.word	0x0000b219
    bee0:	000159e9 	.word	0x000159e9
    bee4:	20003ad4 	.word	0x20003ad4
    bee8:	00016791 	.word	0x00016791
    beec:	000180e8 	.word	0x000180e8
    bef0:	000182f1 	.word	0x000182f1

0000bef4 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    bef4:	4b02      	ldr	r3, [pc, #8]	; (bf00 <mayfly_xtal_start+0xc>)
    bef6:	6818      	ldr	r0, [r3, #0]
    bef8:	6843      	ldr	r3, [r0, #4]
    befa:	2100      	movs	r1, #0
    befc:	681b      	ldr	r3, [r3, #0]
    befe:	4718      	bx	r3
    bf00:	200008f0 	.word	0x200008f0

0000bf04 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    bf04:	4b02      	ldr	r3, [pc, #8]	; (bf10 <mayfly_xtal_stop+0xc>)
    bf06:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    bf08:	6843      	ldr	r3, [r0, #4]
    bf0a:	2100      	movs	r1, #0
    bf0c:	685b      	ldr	r3, [r3, #4]
    bf0e:	4718      	bx	r3
    bf10:	200008f0 	.word	0x200008f0

0000bf14 <chan_sel_2>:
{
    bf14:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    bf16:	4048      	eors	r0, r1
    bf18:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    bf1a:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    bf1e:	2608      	movs	r6, #8
	o = 0;
    bf20:	2400      	movs	r4, #0
		o |= (i & 1);
    bf22:	f00e 0501 	and.w	r5, lr, #1
    bf26:	3e01      	subs	r6, #1
    bf28:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    bf2c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    bf30:	b2ec      	uxtb	r4, r5
		i >>= 1;
    bf32:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    bf36:	d1f4      	bne.n	bf22 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    bf38:	0225      	lsls	r5, r4, #8
    bf3a:	b22d      	sxth	r5, r5
    bf3c:	b2c0      	uxtb	r0, r0
    bf3e:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    bf42:	4634      	mov	r4, r6
		o |= (i & 1);
    bf44:	f000 0601 	and.w	r6, r0, #1
    bf48:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    bf4c:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    bf50:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    bf54:	b2e4      	uxtb	r4, r4
		i >>= 1;
    bf56:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    bf5a:	d1f3      	bne.n	bf44 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    bf5c:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    bf5e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    bf62:	3f01      	subs	r7, #1
    bf64:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    bf66:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    bf6a:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    bf6c:	d1d5      	bne.n	bf1a <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    bf6e:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    bf70:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    bf72:	fbb1 f0f4 	udiv	r0, r1, r4
    bf76:	fb04 1010 	mls	r0, r4, r0, r1
    bf7a:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    bf7c:	08c4      	lsrs	r4, r0, #3
    bf7e:	f000 0507 	and.w	r5, r0, #7
    bf82:	5d14      	ldrb	r4, [r2, r4]
    bf84:	412c      	asrs	r4, r5
    bf86:	07e4      	lsls	r4, r4, #31
    bf88:	d407      	bmi.n	bf9a <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    bf8a:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    bf8c:	f3c1 4107 	ubfx	r1, r1, #16, #8
    bf90:	4610      	mov	r0, r2
}
    bf92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    bf96:	f7fd bdcd 	b.w	9b34 <chan_sel_remap>
}
    bf9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bf9c <ctrl_tx_enqueue>:
{
    bf9c:	b510      	push	{r4, lr}
	    !conn->empty &&
    bf9e:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    bfa2:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    bfa6:	f014 0f80 	tst.w	r4, #128	; 0x80
    bfaa:	d118      	bne.n	bfde <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    bfac:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    bfb0:	b1ab      	cbz	r3, bfde <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    bfb2:	0724      	lsls	r4, r4, #28
    bfb4:	d413      	bmi.n	bfde <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    bfb6:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    bfba:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    bfbc:	bf04      	itt	eq
    bfbe:	681c      	ldreq	r4, [r3, #0]
    bfc0:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    bfc4:	b992      	cbnz	r2, bfec <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    bfc6:	681a      	ldr	r2, [r3, #0]
    bfc8:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    bfca:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    bfcc:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    bfd0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    bfd4:	680b      	ldr	r3, [r1, #0]
    bfd6:	b90b      	cbnz	r3, bfdc <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    bfd8:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    bfdc:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    bfde:	b92a      	cbnz	r2, bfec <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    bfe0:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    bfe4:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    bfe6:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    bfea:	e7ef      	b.n	bfcc <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    bfec:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    bff0:	681a      	ldr	r2, [r3, #0]
    bff2:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    bff4:	6019      	str	r1, [r3, #0]
    bff6:	e7eb      	b.n	bfd0 <ctrl_tx_enqueue+0x34>

0000bff8 <ctrl_tx_sec_enqueue>:
{
    bff8:	b410      	push	{r4}
	if (conn->pause_tx) {
    bffa:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    bffe:	0724      	lsls	r4, r4, #28
{
    c000:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    c002:	d50f      	bpl.n	c024 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    c004:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    c008:	b931      	cbnz	r1, c018 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    c00a:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    c00e:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    c010:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    c014:	bc10      	pop	{r4}
    c016:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    c018:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    c01c:	6819      	ldr	r1, [r3, #0]
    c01e:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    c020:	601a      	str	r2, [r3, #0]
    c022:	e7f7      	b.n	c014 <ctrl_tx_sec_enqueue+0x1c>
}
    c024:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    c026:	f7ff bfb9 	b.w	bf9c <ctrl_tx_enqueue>
	...

0000c02c <feature_rsp_send>:
{
    c02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c02e:	4f21      	ldr	r7, [pc, #132]	; (c0b4 <feature_rsp_send+0x88>)
{
    c030:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c032:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    c036:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c038:	f7fa fe37 	bl	6caa <mem_acquire>
	if (!node_tx) {
    c03c:	4604      	mov	r4, r0
    c03e:	b3b0      	cbz	r0, c0ae <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    c040:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    c042:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    c044:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    c048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    c04c:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    c050:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    c054:	f043 0310 	orr.w	r3, r3, #16
    c058:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    c05c:	79b1      	ldrb	r1, [r6, #6]
    c05e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    c062:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    c066:	f3c1 0110 	ubfx	r1, r1, #0, #17
    c06a:	400b      	ands	r3, r1
    c06c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    c070:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    c074:	f043 0320 	orr.w	r3, r3, #32
    c078:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c07c:	7903      	ldrb	r3, [r0, #4]
    c07e:	f043 0303 	orr.w	r3, r3, #3
    c082:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    c084:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    c086:	2309      	movs	r3, #9
    c088:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    c08a:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    c08c:	2100      	movs	r1, #0
    c08e:	4410      	add	r0, r2
    c090:	f7f5 fdf2 	bl	1c78 <memset>
		conn->llcp_features & 0xFF;
    c094:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    c098:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    c09a:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    c09c:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    c09e:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    c0a0:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    c0a2:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    c0a4:	4621      	mov	r1, r4
    c0a6:	f7ff ffa7 	bl	bff8 <ctrl_tx_sec_enqueue>
	return 0;
    c0aa:	2000      	movs	r0, #0
    c0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    c0ae:	2001      	movs	r0, #1
}
    c0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c0b2:	bf00      	nop
    c0b4:	200008f0 	.word	0x200008f0

0000c0b8 <start_enc_rsp_send>:
{
    c0b8:	b510      	push	{r4, lr}
    c0ba:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    c0bc:	b9c9      	cbnz	r1, c0f2 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c0be:	480f      	ldr	r0, [pc, #60]	; (c0fc <start_enc_rsp_send+0x44>)
    c0c0:	f7fa fdf3 	bl	6caa <mem_acquire>
		if (!node_tx) {
    c0c4:	b1b8      	cbz	r0, c0f6 <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    c0c6:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    c0c8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c0cc:	f043 0320 	orr.w	r3, r3, #32
    c0d0:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c0d4:	780b      	ldrb	r3, [r1, #0]
    c0d6:	f043 0303 	orr.w	r3, r3, #3
    c0da:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    c0dc:	2301      	movs	r3, #1
    c0de:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    c0e0:	2306      	movs	r3, #6
    c0e2:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    c0e4:	b140      	cbz	r0, c0f8 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    c0e6:	4601      	mov	r1, r0
    c0e8:	4620      	mov	r0, r4
    c0ea:	f7ff ff57 	bl	bf9c <ctrl_tx_enqueue>
	return 0;
    c0ee:	2000      	movs	r0, #0
    c0f0:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    c0f2:	2000      	movs	r0, #0
    c0f4:	e7e8      	b.n	c0c8 <start_enc_rsp_send+0x10>
			return 1;
    c0f6:	2001      	movs	r0, #1
}
    c0f8:	bd10      	pop	{r4, pc}
    c0fa:	bf00      	nop
    c0fc:	20000a4c 	.word	0x20000a4c

0000c100 <reject_ext_ind_send>:
{
    c100:	b570      	push	{r4, r5, r6, lr}
    c102:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c104:	480b      	ldr	r0, [pc, #44]	; (c134 <reject_ext_ind_send+0x34>)
{
    c106:	460e      	mov	r6, r1
    c108:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c10a:	f7fa fdce 	bl	6caa <mem_acquire>
	if (!node_tx) {
    c10e:	b178      	cbz	r0, c130 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c110:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    c112:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c114:	f043 0303 	orr.w	r3, r3, #3
    c118:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    c11a:	2303      	movs	r3, #3
    c11c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c11e:	2311      	movs	r3, #17
    c120:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    c122:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    c124:	4601      	mov	r1, r0
    c126:	4620      	mov	r0, r4
    c128:	f7ff ff38 	bl	bf9c <ctrl_tx_enqueue>
	return 0;
    c12c:	2000      	movs	r0, #0
    c12e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    c130:	2001      	movs	r0, #1
}
    c132:	bd70      	pop	{r4, r5, r6, pc}
    c134:	20000a4c 	.word	0x20000a4c

0000c138 <event_connection_prepare>:
{
    c138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    c13c:	4db8      	ldr	r5, [pc, #736]	; (c420 <event_connection_prepare+0x2e8>)
{
    c13e:	b08f      	sub	sp, #60	; 0x3c
    c140:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    c142:	7c2b      	ldrb	r3, [r5, #16]
{
    c144:	910c      	str	r1, [sp, #48]	; 0x30
    c146:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    c148:	b173      	cbz	r3, c168 <event_connection_prepare+0x30>
    c14a:	4ab6      	ldr	r2, [pc, #728]	; (c424 <event_connection_prepare+0x2ec>)
    c14c:	4bb6      	ldr	r3, [pc, #728]	; (c428 <event_connection_prepare+0x2f0>)
    c14e:	9201      	str	r2, [sp, #4]
    c150:	9200      	str	r2, [sp, #0]
    c152:	681c      	ldr	r4, [r3, #0]
    c154:	49b5      	ldr	r1, [pc, #724]	; (c42c <event_connection_prepare+0x2f4>)
    c156:	4bb6      	ldr	r3, [pc, #728]	; (c430 <event_connection_prepare+0x2f8>)
    c158:	48b6      	ldr	r0, [pc, #728]	; (c434 <event_connection_prepare+0x2fc>)
		LL_ASSERT(!retval);
    c15a:	47a0      	blx	r4
    c15c:	4040      	eors	r0, r0
    c15e:	f380 8811 	msr	BASEPRI, r0
    c162:	f04f 0004 	mov.w	r0, #4
    c166:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    c168:	f894 3020 	ldrb.w	r3, [r4, #32]
    c16c:	3307      	adds	r3, #7
    c16e:	b2db      	uxtb	r3, r3
    c170:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    c172:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c176:	2b00      	cmp	r3, #0
    c178:	da09      	bge.n	c18e <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    c17a:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    c17c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    c17e:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    c182:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    c184:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    c186:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    c188:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    c18a:	bf88      	it	hi
    c18c:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    c18e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    c190:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    c194:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    c196:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    c198:	b292      	uxth	r2, r2
    c19a:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    c19c:	4432      	add	r2, r6
    c19e:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    c1a0:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    c1a4:	429a      	cmp	r2, r3
    c1a6:	f040 81bb 	bne.w	c520 <event_connection_prepare+0x3e8>
    c1aa:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c1ae:	075f      	lsls	r7, r3, #29
    c1b0:	f100 84b3 	bmi.w	cb1a <event_connection_prepare+0x9e2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    c1b4:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    c1b8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    c1bc:	429a      	cmp	r2, r3
    c1be:	f000 8097 	beq.w	c2f0 <event_connection_prepare+0x1b8>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    c1c2:	2005      	movs	r0, #5
    c1c4:	f7ff fcf2 	bl	bbac <event_stop.constprop.31>
	conn_upd = _radio.conn_upd;
    c1c8:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    c1cc:	b113      	cbz	r3, c1d4 <event_connection_prepare+0x9c>
    c1ce:	429c      	cmp	r4, r3
    c1d0:	f040 808e 	bne.w	c2f0 <event_connection_prepare+0x1b8>
	switch (conn->llcp_conn_param.state) {
    c1d4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    c1d8:	f003 0307 	and.w	r3, r3, #7
    c1dc:	2b05      	cmp	r3, #5
    c1de:	f200 815d 	bhi.w	c49c <event_connection_prepare+0x364>
    c1e2:	e8df f013 	tbh	[pc, r3, lsl #1]
    c1e6:	0006      	.short	0x0006
    c1e8:	01310066 	.word	0x01310066
    c1ec:	00850085 	.word	0x00850085
    c1f0:	0085      	.short	0x0085
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c1f2:	4891      	ldr	r0, [pc, #580]	; (c438 <event_connection_prepare+0x300>)
    c1f4:	f7fa fd59 	bl	6caa <mem_acquire>
	if (!node_tx) {
    c1f8:	4607      	mov	r7, r0
    c1fa:	2800      	cmp	r0, #0
    c1fc:	d078      	beq.n	c2f0 <event_connection_prepare+0x1b8>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    c1fe:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    c202:	2204      	movs	r2, #4
    c204:	f362 0302 	bfi	r3, r2, #0, #3
    c208:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c20c:	7903      	ldrb	r3, [r0, #4]
    c20e:	f043 0303 	orr.w	r3, r3, #3
    c212:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    c214:	2318      	movs	r3, #24
    c216:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    c218:	230f      	movs	r3, #15
    c21a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    c21c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c220:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    c222:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    c224:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c228:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    c22a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c22e:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    c230:	2300      	movs	r3, #0
    c232:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    c234:	74c3      	strb	r3, [r0, #19]
    c236:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    c238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c23c:	7543      	strb	r3, [r0, #21]
    c23e:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    c240:	75c3      	strb	r3, [r0, #23]
    c242:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    c244:	7643      	strb	r3, [r0, #25]
    c246:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    c248:	76c3      	strb	r3, [r0, #27]
    c24a:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    c24c:	7743      	strb	r3, [r0, #29]
    c24e:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    c250:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    c254:	4601      	mov	r1, r0
    c256:	4620      	mov	r0, r4
    c258:	f7ff fea0 	bl	bf9c <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c25c:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    c25e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    c262:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c266:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    c268:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    c26c:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c270:	da0b      	bge.n	c28a <event_connection_prepare+0x152>
			u32_t ticks_prepare_to_start =
    c272:	68a3      	ldr	r3, [r4, #8]
    c274:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    c276:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    c27a:	428b      	cmp	r3, r1
    c27c:	bf2c      	ite	cs
    c27e:	4443      	addcs	r3, r8
    c280:	eb08 0301 	addcc.w	r3, r8, r1
    c284:	1a9b      	subs	r3, r3, r2
    c286:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    c28a:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    c28c:	4b6b      	ldr	r3, [pc, #428]	; (c43c <event_connection_prepare+0x304>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    c28e:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c292:	2201      	movs	r2, #1
    c294:	4611      	mov	r1, r2
    c296:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    c298:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c29a:	f7fa fdd1 	bl	6e40 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c29e:	b338      	cbz	r0, c2f0 <event_connection_prepare+0x1b8>
    c2a0:	4a60      	ldr	r2, [pc, #384]	; (c424 <event_connection_prepare+0x2ec>)
    c2a2:	4b61      	ldr	r3, [pc, #388]	; (c428 <event_connection_prepare+0x2f0>)
    c2a4:	9201      	str	r2, [sp, #4]
    c2a6:	9200      	str	r2, [sp, #0]
    c2a8:	681c      	ldr	r4, [r3, #0]
    c2aa:	4b65      	ldr	r3, [pc, #404]	; (c440 <event_connection_prepare+0x308>)
    c2ac:	495f      	ldr	r1, [pc, #380]	; (c42c <event_connection_prepare+0x2f4>)
    c2ae:	4865      	ldr	r0, [pc, #404]	; (c444 <event_connection_prepare+0x30c>)
    c2b0:	e753      	b.n	c15a <event_connection_prepare+0x22>
	if (conn->llcp_conn_param.status) {
    c2b2:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    c2b6:	b397      	cbz	r7, c31e <event_connection_prepare+0x1e6>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c2b8:	485f      	ldr	r0, [pc, #380]	; (c438 <event_connection_prepare+0x300>)
    c2ba:	f7fa fcf6 	bl	6caa <mem_acquire>
		if (!node_tx) {
    c2be:	4601      	mov	r1, r0
    c2c0:	b1b0      	cbz	r0, c2f0 <event_connection_prepare+0x1b8>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    c2c2:	7903      	ldrb	r3, [r0, #4]
    c2c4:	f043 0303 	orr.w	r3, r3, #3
    c2c8:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c2ca:	2311      	movs	r3, #17
    c2cc:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    c2ce:	2303      	movs	r3, #3
    c2d0:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    c2d2:	230f      	movs	r3, #15
    c2d4:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    c2d6:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    c2da:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    c2dc:	4620      	mov	r0, r4
    c2de:	f7ff fe5d 	bl	bf9c <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c2e2:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    c2e6:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    c2ea:	2300      	movs	r3, #0
    c2ec:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    c2f0:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    c2f4:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    c2f8:	429a      	cmp	r2, r3
    c2fa:	f000 810a 	beq.w	c512 <event_connection_prepare+0x3da>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    c2fe:	2005      	movs	r0, #5
    c300:	f7ff fc54 	bl	bbac <event_stop.constprop.31>
	switch (conn->llcp_phy.state) {
    c304:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    c308:	f003 0203 	and.w	r2, r3, #3
    c30c:	2a03      	cmp	r2, #3
    c30e:	f200 8179 	bhi.w	c604 <event_connection_prepare+0x4cc>
    c312:	e8df f012 	tbh	[pc, r2, lsl #1]
    c316:	00cc      	.short	0x00cc
    c318:	00fe00fe 	.word	0x00fe00fe
    c31c:	0118      	.short	0x0118
	if (!conn->role) {
    c31e:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c322:	2b00      	cmp	r3, #0
    c324:	db3b      	blt.n	c39e <event_connection_prepare+0x266>
		if (conn->llcp_req != conn->llcp_ack) {
    c326:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    c32a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    c32e:	428b      	cmp	r3, r1
    c330:	d1de      	bne.n	c2f0 <event_connection_prepare+0x1b8>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c332:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    c336:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c33a:	2205      	movs	r2, #5
    c33c:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    c340:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c344:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    c348:	2301      	movs	r3, #1
    c34a:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    c34e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    c352:	b122      	cbz	r2, c35e <event_connection_prepare+0x226>
				((conn->llcp_conn_param.interval /
    c354:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    c358:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    c35a:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    c35e:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    c362:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c366:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    c36a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c36e:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    c372:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c376:	2202      	movs	r2, #2
    c378:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    c37c:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    c380:	f082 0208 	eor.w	r2, r2, #8
    c384:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    c388:	f362 0382 	bfi	r3, r2, #2, #1
    c38c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    c390:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    c392:	2301      	movs	r3, #1
    c394:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    c398:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    c39c:	e7a8      	b.n	c2f0 <event_connection_prepare+0x1b8>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c39e:	4826      	ldr	r0, [pc, #152]	; (c438 <event_connection_prepare+0x300>)
    c3a0:	f7fa fc83 	bl	6caa <mem_acquire>
	if (!node_tx) {
    c3a4:	4601      	mov	r1, r0
    c3a6:	2800      	cmp	r0, #0
    c3a8:	d0a2      	beq.n	c2f0 <event_connection_prepare+0x1b8>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c3aa:	7903      	ldrb	r3, [r0, #4]
    c3ac:	f043 0303 	orr.w	r3, r3, #3
    c3b0:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    c3b2:	2318      	movs	r3, #24
    c3b4:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    c3b6:	2310      	movs	r3, #16
    c3b8:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    c3ba:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c3be:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    c3c0:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    c3c2:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c3c6:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    c3c8:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c3cc:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    c3ce:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    c3d2:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    c3d4:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    c3d8:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    c3dc:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    c3e0:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    c3e4:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    c3e8:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    c3ec:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    c3f0:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    c3f4:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    c3f8:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    c3fc:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    c400:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    c404:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    c408:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    c40c:	4620      	mov	r0, r4
    c40e:	f7ff fdc5 	bl	bf9c <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c412:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    c416:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    c41a:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    c41e:	e767      	b.n	c2f0 <event_connection_prepare+0x1b8>
    c420:	200008f0 	.word	0x200008f0
    c424:	000159e9 	.word	0x000159e9
    c428:	20003ad4 	.word	0x20003ad4
    c42c:	00016791 	.word	0x00016791
    c430:	000181b0 	.word	0x000181b0
    c434:	00018ba7 	.word	0x00018ba7
    c438:	20000a4c 	.word	0x20000a4c
    c43c:	20003e58 	.word	0x20003e58
    c440:	0001814c 	.word	0x0001814c
    c444:	00018a6b 	.word	0x00018a6b
	if (conn->pause_tx) {
    c448:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c44c:	0718      	lsls	r0, r3, #28
    c44e:	f53f af4f 	bmi.w	c2f0 <event_connection_prepare+0x1b8>
	node_rx = packet_rx_reserve_get(2);
    c452:	2002      	movs	r0, #2
    c454:	f7fd fba0 	bl	9b98 <packet_rx_reserve_get>
	if (!node_rx) {
    c458:	2800      	cmp	r0, #0
    c45a:	f43f af49 	beq.w	c2f0 <event_connection_prepare+0x1b8>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    c45e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    c462:	2203      	movs	r2, #3
    c464:	f362 0302 	bfi	r3, r2, #0, #3
    c468:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    c46c:	8c23      	ldrh	r3, [r4, #32]
    c46e:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c470:	2301      	movs	r3, #1
    c472:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c474:	7a03      	ldrb	r3, [r0, #8]
    c476:	4313      	orrs	r3, r2
    c478:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    c47a:	2318      	movs	r3, #24
    c47c:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    c47e:	230f      	movs	r3, #15
    c480:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    c482:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c486:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    c488:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    c48a:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c48e:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    c490:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c494:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    c496:	f7fe f9f7 	bl	a888 <packet_rx_enqueue>
    c49a:	e729      	b.n	c2f0 <event_connection_prepare+0x1b8>
		LL_ASSERT(0);
    c49c:	4abd      	ldr	r2, [pc, #756]	; (c794 <event_connection_prepare+0x65c>)
    c49e:	4bbe      	ldr	r3, [pc, #760]	; (c798 <event_connection_prepare+0x660>)
    c4a0:	9201      	str	r2, [sp, #4]
    c4a2:	9200      	str	r2, [sp, #0]
    c4a4:	681c      	ldr	r4, [r3, #0]
    c4a6:	4bbd      	ldr	r3, [pc, #756]	; (c79c <event_connection_prepare+0x664>)
		LL_ASSERT(0);
    c4a8:	49bd      	ldr	r1, [pc, #756]	; (c7a0 <event_connection_prepare+0x668>)
    c4aa:	48be      	ldr	r0, [pc, #760]	; (c7a4 <event_connection_prepare+0x66c>)
    c4ac:	e655      	b.n	c15a <event_connection_prepare+0x22>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c4ae:	48be      	ldr	r0, [pc, #760]	; (c7a8 <event_connection_prepare+0x670>)
    c4b0:	f7fa fbfb 	bl	6caa <mem_acquire>
		if (!node_tx) {
    c4b4:	4601      	mov	r1, r0
    c4b6:	b360      	cbz	r0, c512 <event_connection_prepare+0x3da>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    c4b8:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c4bc:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    c4c0:	2201      	movs	r2, #1
    c4c2:	f362 0301 	bfi	r3, r2, #0, #2
    c4c6:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c4ca:	b2db      	uxtb	r3, r3
    c4cc:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c4d0:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c4d4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c4d8:	f363 07c5 	bfi	r7, r3, #3, #3
    c4dc:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    c4e0:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c4e4:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    c4e8:	f367 1286 	bfi	r2, r7, #6, #1
    c4ec:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c4f0:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    c4f2:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c4f4:	f042 0203 	orr.w	r2, r2, #3
    c4f8:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    c4fa:	2203      	movs	r2, #3
    c4fc:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    c4fe:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    c500:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    c502:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    c504:	4620      	mov	r0, r4
    c506:	f7ff fd49 	bl	bf9c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    c50a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c50e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    c512:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    c516:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c51a:	429a      	cmp	r2, r3
    c51c:	f000 82fd 	beq.w	cb1a <event_connection_prepare+0x9e2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c520:	2005      	movs	r0, #5
    c522:	f7ff fb43 	bl	bbac <event_stop.constprop.31>
		switch (conn->llcp_type) {
    c526:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    c52a:	3b01      	subs	r3, #1
    c52c:	2b07      	cmp	r3, #7
    c52e:	f200 85b5 	bhi.w	d09c <event_connection_prepare+0xf64>
    c532:	e8df f013 	tbh	[pc, r3, lsl #1]
    c536:	006e      	.short	0x006e
    c538:	034a02cb 	.word	0x034a02cb
    c53c:	04950465 	.word	0x04950465
    c540:	04f105b3 	.word	0x04f105b3
    c544:	0505      	.short	0x0505
		conn->llcp_phy.ack = conn->llcp_phy.req;
    c546:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    c54a:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    c54e:	f3c3 0282 	ubfx	r2, r3, #2, #3
    c552:	0791      	lsls	r1, r2, #30
    c554:	d544      	bpl.n	c5e0 <event_connection_prepare+0x4a8>
			conn->llcp_phy.tx = BIT(1);
    c556:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    c558:	f362 0384 	bfi	r3, r2, #2, #3
    c55c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    c560:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    c564:	095a      	lsrs	r2, r3, #5
    c566:	0790      	lsls	r0, r2, #30
    c568:	d543      	bpl.n	c5f2 <event_connection_prepare+0x4ba>
			conn->llcp_phy.rx = BIT(1);
    c56a:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    c56c:	f362 1347 	bfi	r3, r2, #5, #3
    c570:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    c574:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    c578:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c57c:	f3c2 0182 	ubfx	r1, r2, #2, #3
    c580:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c584:	428b      	cmp	r3, r1
    c586:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    c58a:	bf14      	ite	ne
    c58c:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    c590:	f36f 0384 	bfceq	r3, #2, #3
    c594:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    c598:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c59c:	0952      	lsrs	r2, r2, #5
    c59e:	f003 0307 	and.w	r3, r3, #7
    c5a2:	4293      	cmp	r3, r2
    c5a4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    c5a8:	bf14      	ite	ne
    c5aa:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    c5ae:	f36f 1347 	bfceq	r3, #5, #3
    c5b2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    c5b6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c5ba:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    c5be:	f043 0301 	orr.w	r3, r3, #1
    c5c2:	f3c2 0240 	ubfx	r2, r2, #1, #1
    c5c6:	f362 0341 	bfi	r3, r2, #1, #1
    c5ca:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    c5ce:	2308      	movs	r3, #8
    c5d0:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    c5d4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    c5d8:	3b01      	subs	r3, #1
    c5da:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    c5de:	e798      	b.n	c512 <event_connection_prepare+0x3da>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    c5e0:	07d7      	lsls	r7, r2, #31
    c5e2:	d501      	bpl.n	c5e8 <event_connection_prepare+0x4b0>
			conn->llcp_phy.tx = BIT(0);
    c5e4:	2201      	movs	r2, #1
    c5e6:	e7b7      	b.n	c558 <event_connection_prepare+0x420>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    c5e8:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    c5ec:	bf18      	it	ne
    c5ee:	2204      	movne	r2, #4
    c5f0:	e7b2      	b.n	c558 <event_connection_prepare+0x420>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    c5f2:	07d1      	lsls	r1, r2, #31
    c5f4:	d501      	bpl.n	c5fa <event_connection_prepare+0x4c2>
			conn->llcp_phy.rx = BIT(0);
    c5f6:	2201      	movs	r2, #1
    c5f8:	e7b8      	b.n	c56c <event_connection_prepare+0x434>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    c5fa:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    c5fe:	bf18      	it	ne
    c600:	2204      	movne	r2, #4
    c602:	e7b3      	b.n	c56c <event_connection_prepare+0x434>
		LL_ASSERT(0);
    c604:	4a63      	ldr	r2, [pc, #396]	; (c794 <event_connection_prepare+0x65c>)
    c606:	4b64      	ldr	r3, [pc, #400]	; (c798 <event_connection_prepare+0x660>)
    c608:	9201      	str	r2, [sp, #4]
    c60a:	9200      	str	r2, [sp, #0]
    c60c:	681c      	ldr	r4, [r3, #0]
    c60e:	4b67      	ldr	r3, [pc, #412]	; (c7ac <event_connection_prepare+0x674>)
    c610:	e74a      	b.n	c4a8 <event_connection_prepare+0x370>
	if (!conn_upd) {
    c612:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    c616:	b90b      	cbnz	r3, c61c <event_connection_prepare+0x4e4>
		_radio.conn_upd = conn;
    c618:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    c61c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c620:	f013 0303 	ands.w	r3, r3, #3
    c624:	d06c      	beq.n	c700 <event_connection_prepare+0x5c8>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c626:	4860      	ldr	r0, [pc, #384]	; (c7a8 <event_connection_prepare+0x670>)
    c628:	f7fa fb3f 	bl	6caa <mem_acquire>
		if (!node_tx) {
    c62c:	4607      	mov	r7, r0
    c62e:	2800      	cmp	r0, #0
    c630:	f000 8273 	beq.w	cb1a <event_connection_prepare+0x9e2>
		switch (conn->llcp.conn_upd.state) {
    c634:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c638:	f003 0303 	and.w	r3, r3, #3
    c63c:	2b01      	cmp	r3, #1
    c63e:	d05d      	beq.n	c6fc <event_connection_prepare+0x5c4>
    c640:	2b02      	cmp	r3, #2
    c642:	d154      	bne.n	c6ee <event_connection_prepare+0x5b6>
			fp_mayfly_select_or_use =
    c644:	4a5a      	ldr	r2, [pc, #360]	; (c7b0 <event_connection_prepare+0x678>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    c646:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c64a:	f36f 0301 	bfc	r3, #0, #2
    c64e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    c652:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c654:	3306      	adds	r3, #6
    c656:	4433      	add	r3, r6
    c658:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    c65a:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c65e:	7939      	ldrb	r1, [r7, #4]
    c660:	f041 0103 	orr.w	r1, r1, #3
    c664:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    c666:	210c      	movs	r1, #12
    c668:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    c66a:	2100      	movs	r1, #0
    c66c:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    c66e:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    c672:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    c674:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    c678:	f240 40e2 	movw	r0, #1250	; 0x4e2
    c67c:	fbb1 f1f0 	udiv	r1, r1, r0
    c680:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    c684:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    c688:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    c68c:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c690:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    c694:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    c698:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    c69c:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c6a0:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    c6a2:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c6a6:	2900      	cmp	r1, #0
    c6a8:	da0b      	bge.n	c6c2 <event_connection_prepare+0x58a>
			u32_t ticks_prepare_to_start =
    c6aa:	68a3      	ldr	r3, [r4, #8]
    c6ac:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    c6ae:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    c6b2:	4283      	cmp	r3, r0
    c6b4:	bf2c      	ite	cs
    c6b6:	4443      	addcs	r3, r8
    c6b8:	eb08 0300 	addcc.w	r3, r8, r0
    c6bc:	1a5b      	subs	r3, r3, r1
    c6be:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    c6c2:	f107 0309 	add.w	r3, r7, #9
    c6c6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    c6ca:	4b3a      	ldr	r3, [pc, #232]	; (c7b4 <event_connection_prepare+0x67c>)
    c6cc:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c6ce:	2201      	movs	r2, #1
    c6d0:	4611      	mov	r1, r2
    c6d2:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    c6d4:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c6d6:	f7fa fbb3 	bl	6e40 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c6da:	2800      	cmp	r0, #0
    c6dc:	f000 8219 	beq.w	cb12 <event_connection_prepare+0x9da>
    c6e0:	4a2c      	ldr	r2, [pc, #176]	; (c794 <event_connection_prepare+0x65c>)
    c6e2:	4b2d      	ldr	r3, [pc, #180]	; (c798 <event_connection_prepare+0x660>)
    c6e4:	9201      	str	r2, [sp, #4]
    c6e6:	9200      	str	r2, [sp, #0]
    c6e8:	681c      	ldr	r4, [r3, #0]
    c6ea:	4b33      	ldr	r3, [pc, #204]	; (c7b8 <event_connection_prepare+0x680>)
    c6ec:	e5de      	b.n	c2ac <event_connection_prepare+0x174>
			LL_ASSERT(0);
    c6ee:	4a29      	ldr	r2, [pc, #164]	; (c794 <event_connection_prepare+0x65c>)
    c6f0:	4b29      	ldr	r3, [pc, #164]	; (c798 <event_connection_prepare+0x660>)
    c6f2:	9201      	str	r2, [sp, #4]
    c6f4:	9200      	str	r2, [sp, #0]
    c6f6:	681c      	ldr	r4, [r3, #0]
    c6f8:	4b30      	ldr	r3, [pc, #192]	; (c7bc <event_connection_prepare+0x684>)
    c6fa:	e6d5      	b.n	c4a8 <event_connection_prepare+0x370>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    c6fc:	4a30      	ldr	r2, [pc, #192]	; (c7c0 <event_connection_prepare+0x688>)
    c6fe:	e7a2      	b.n	c646 <event_connection_prepare+0x50e>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    c700:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    c704:	1bf7      	subs	r7, r6, r7
    c706:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    c708:	043a      	lsls	r2, r7, #16
    c70a:	f100 8206 	bmi.w	cb1a <event_connection_prepare+0x9e2>
		conn->llcp_ack = conn->llcp_req;
    c70e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    c712:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c716:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    c71a:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    c71e:	428a      	cmp	r2, r1
    c720:	d009      	beq.n	c736 <event_connection_prepare+0x5fe>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    c722:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c726:	f002 0207 	and.w	r2, r2, #7
    c72a:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c72c:	bf04      	itt	eq
    c72e:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    c732:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    c736:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c73a:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    c73c:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    c73e:	bf08      	it	eq
    c740:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c744:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    c746:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    c748:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c74c:	429a      	cmp	r2, r3
    c74e:	d114      	bne.n	c77a <event_connection_prepare+0x642>
		     conn->conn_interval) ||
    c750:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c754:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c756:	4299      	cmp	r1, r3
    c758:	d10f      	bne.n	c77a <event_connection_prepare+0x642>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    c75a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    c75e:	435a      	muls	r2, r3
    c760:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c764:	f242 7110 	movw	r1, #10000	; 0x2710
    c768:	fb01 2303 	mla	r3, r1, r3, r2
    c76c:	3b01      	subs	r3, #1
    c76e:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    c772:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    c774:	b29b      	uxth	r3, r3
    c776:	429a      	cmp	r2, r3
    c778:	d037      	beq.n	c7ea <event_connection_prepare+0x6b2>
			node_rx = packet_rx_reserve_get(2);
    c77a:	2002      	movs	r0, #2
    c77c:	f7fd fa0c 	bl	9b98 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    c780:	bb10      	cbnz	r0, c7c8 <event_connection_prepare+0x690>
    c782:	4a04      	ldr	r2, [pc, #16]	; (c794 <event_connection_prepare+0x65c>)
    c784:	4b04      	ldr	r3, [pc, #16]	; (c798 <event_connection_prepare+0x660>)
    c786:	9201      	str	r2, [sp, #4]
    c788:	9200      	str	r2, [sp, #0]
    c78a:	681c      	ldr	r4, [r3, #0]
    c78c:	4b0b      	ldr	r3, [pc, #44]	; (c7bc <event_connection_prepare+0x684>)
		LL_ASSERT(node_rx);
    c78e:	4904      	ldr	r1, [pc, #16]	; (c7a0 <event_connection_prepare+0x668>)
    c790:	480c      	ldr	r0, [pc, #48]	; (c7c4 <event_connection_prepare+0x68c>)
    c792:	e4e2      	b.n	c15a <event_connection_prepare+0x22>
    c794:	000159e9 	.word	0x000159e9
    c798:	20003ad4 	.word	0x20003ad4
    c79c:	00018161 	.word	0x00018161
    c7a0:	00016791 	.word	0x00016791
    c7a4:	000166ef 	.word	0x000166ef
    c7a8:	20000a4c 	.word	0x20000a4c
    c7ac:	00018186 	.word	0x00018186
    c7b0:	0000a5d9 	.word	0x0000a5d9
    c7b4:	20003e48 	.word	0x20003e48
    c7b8:	00018115 	.word	0x00018115
    c7bc:	00018129 	.word	0x00018129
    c7c0:	0000b451 	.word	0x0000b451
    c7c4:	00018997 	.word	0x00018997
			node_rx->hdr.handle = conn->handle;
    c7c8:	8c23      	ldrh	r3, [r4, #32]
    c7ca:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c7cc:	2308      	movs	r3, #8
    c7ce:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    c7d0:	2300      	movs	r3, #0
    c7d2:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    c7d4:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c7d8:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    c7da:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    c7de:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    c7e0:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c7e4:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    c7e6:	f7fe f84f 	bl	a888 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c7ea:	6823      	ldr	r3, [r4, #0]
    c7ec:	6866      	ldr	r6, [r4, #4]
    c7ee:	2b00      	cmp	r3, #0
    c7f0:	da09      	bge.n	c806 <event_connection_prepare+0x6ce>
			u32_t ticks_prepare_to_start =
    c7f2:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c7f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c7f8:	42b0      	cmp	r0, r6
    c7fa:	bf2c      	ite	cs
    c7fc:	4480      	addcs	r8, r0
    c7fe:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c800:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c802:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    c806:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    c808:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    c80c:	49a0      	ldr	r1, [pc, #640]	; (ca90 <event_connection_prepare+0x958>)
		conn_interval_old = instant_latency * conn->conn_interval;
    c80e:	fb13 f307 	smulbb	r3, r3, r7
    c812:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    c814:	fbb3 f2fa 	udiv	r2, r3, sl
    c818:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    c81c:	fb1a f009 	smulbb	r0, sl, r9
    c820:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    c822:	4283      	cmp	r3, r0
    c824:	f080 80c0 	bcs.w	c9a8 <event_connection_prepare+0x870>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    c828:	1ac0      	subs	r0, r0, r3
    c82a:	f240 1223 	movw	r2, #291	; 0x123
    c82e:	4342      	muls	r2, r0
    c830:	17c3      	asrs	r3, r0, #31
    c832:	fb01 2303 	mla	r3, r1, r3, r2
    c836:	fba0 0101 	umull	r0, r1, r0, r1
    c83a:	4419      	add	r1, r3
    c83c:	a392      	add	r3, pc, #584	; (adr r3, ca88 <event_connection_prepare+0x950>)
    c83e:	e9d3 2300 	ldrd	r2, r3, [r3]
    c842:	f7f3 fce7 	bl	214 <__aeabi_uldivmod>
    c846:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c84a:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c84e:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    c850:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    c852:	f8df b274 	ldr.w	fp, [pc, #628]	; cac8 <event_connection_prepare+0x990>
    c856:	1bdb      	subs	r3, r3, r7
    c858:	444b      	add	r3, r9
    c85a:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    c85c:	6823      	ldr	r3, [r4, #0]
    c85e:	42b3      	cmp	r3, r6
    c860:	bf38      	it	cc
    c862:	4633      	movcc	r3, r6
    c864:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    c866:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c86a:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    c86e:	2b00      	cmp	r3, #0
    c870:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    c874:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c876:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    c87a:	f280 80a6 	bge.w	c9ca <event_connection_prepare+0x892>
				conn->slave.window_widening_periodic_us *
    c87e:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    c880:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    c882:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    c886:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    c88a:	4a82      	ldr	r2, [pc, #520]	; (ca94 <event_connection_prepare+0x95c>)
    c88c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    c890:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c894:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    c89c:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    c8a0:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    c8a2:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c8a4:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    c8a8:	4b7b      	ldr	r3, [pc, #492]	; (ca98 <event_connection_prepare+0x960>)
				conn->llcp.conn_upd.win_size * 1250;
    c8aa:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c8ae:	f205 253f 	addw	r5, r5, #575	; 0x23f
    c8b2:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    c8b6:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    c8b8:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    c8bc:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    c8be:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    c8c0:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    c8c2:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    c8c4:	429f      	cmp	r7, r3
    c8c6:	bf94      	ite	ls
    c8c8:	65e7      	strls	r7, [r4, #92]	; 0x5c
    c8ca:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    c8cc:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    c8ce:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    c8d0:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c8d2:	fba0 010b 	umull	r0, r1, r0, fp
    c8d6:	a36c      	add	r3, pc, #432	; (adr r3, ca88 <event_connection_prepare+0x950>)
    c8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    c8dc:	f7f3 fc9a 	bl	214 <__aeabi_uldivmod>
    c8e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8e2:	1a1b      	subs	r3, r3, r0
    c8e4:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c8e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c8e8:	fbb3 f0f8 	udiv	r0, r3, r8
    c8ec:	fb08 f000 	mul.w	r0, r8, r0
    c8f0:	a365      	add	r3, pc, #404	; (adr r3, ca88 <event_connection_prepare+0x950>)
    c8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    c8f6:	fba0 010b 	umull	r0, r1, r0, fp
    c8fa:	f7f3 fc8b 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    c8fe:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c900:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c904:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    c908:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    c90c:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c90e:	f242 7110 	movw	r1, #10000	; 0x2710
    c912:	fb01 6303 	mla	r3, r1, r3, r6
    c916:	3b01      	subs	r3, #1
    c918:	fbb3 f3f6 	udiv	r3, r3, r6
    c91c:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c91e:	4b5f      	ldr	r3, [pc, #380]	; (ca9c <event_connection_prepare+0x964>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    c920:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c924:	4433      	add	r3, r6
    c926:	fbb3 f3f6 	udiv	r3, r3, r6
    c92a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c92e:	4b5c      	ldr	r3, [pc, #368]	; (caa0 <event_connection_prepare+0x968>)
    c930:	4433      	add	r3, r6
    c932:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c936:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c938:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c93a:	4299      	cmp	r1, r3
    c93c:	bfc4      	itt	gt
    c93e:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    c942:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c944:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c948:	bfc8      	it	gt
    c94a:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    c94c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c950:	bfc8      	it	gt
    c952:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    c954:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    c958:	bf08      	it	eq
    c95a:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c95e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    c962:	2000      	movs	r0, #0
    c964:	2101      	movs	r1, #1
    c966:	f006 ffa9 	bl	138bc <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c96a:	2200      	movs	r2, #0
    c96c:	2101      	movs	r1, #1
		mayfly_was_enabled =
    c96e:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c970:	4610      	mov	r0, r2
    c972:	f7fa fa3d 	bl	6df0 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c976:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    c97a:	f641 2385 	movw	r3, #6789	; 0x1a85
    c97e:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c980:	3207      	adds	r2, #7
		ticker_status =
    c982:	9300      	str	r3, [sp, #0]
    c984:	b2d2      	uxtb	r2, r2
    c986:	4b47      	ldr	r3, [pc, #284]	; (caa4 <event_connection_prepare+0x96c>)
    c988:	4608      	mov	r0, r1
    c98a:	f7fb f8b5 	bl	7af8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c98e:	f030 0802 	bics.w	r8, r0, #2
    c992:	d027      	beq.n	c9e4 <event_connection_prepare+0x8ac>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c994:	4a44      	ldr	r2, [pc, #272]	; (caa8 <event_connection_prepare+0x970>)
    c996:	4b45      	ldr	r3, [pc, #276]	; (caac <event_connection_prepare+0x974>)
    c998:	9201      	str	r2, [sp, #4]
    c99a:	9200      	str	r2, [sp, #0]
    c99c:	681c      	ldr	r4, [r3, #0]
    c99e:	4944      	ldr	r1, [pc, #272]	; (cab0 <event_connection_prepare+0x978>)
    c9a0:	4b44      	ldr	r3, [pc, #272]	; (cab4 <event_connection_prepare+0x97c>)
    c9a2:	4845      	ldr	r0, [pc, #276]	; (cab8 <event_connection_prepare+0x980>)
    c9a4:	f7ff bbd9 	b.w	c15a <event_connection_prepare+0x22>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c9a8:	fb0a 3212 	mls	r2, sl, r2, r3
    c9ac:	b292      	uxth	r2, r2
    c9ae:	fba2 0101 	umull	r0, r1, r2, r1
    c9b2:	f240 1323 	movw	r3, #291	; 0x123
    c9b6:	fb03 1102 	mla	r1, r3, r2, r1
    c9ba:	a333      	add	r3, pc, #204	; (adr r3, ca88 <event_connection_prepare+0x950>)
    c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    c9c0:	f7f3 fc28 	bl	214 <__aeabi_uldivmod>
    c9c4:	eba8 0300 	sub.w	r3, r8, r0
    c9c8:	e741      	b.n	c84e <event_connection_prepare+0x716>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c9ca:	990c      	ldr	r1, [sp, #48]	; 0x30
    c9cc:	a32e      	add	r3, pc, #184	; (adr r3, ca88 <event_connection_prepare+0x950>)
    c9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    c9d2:	fba1 010b 	umull	r0, r1, r1, fp
    c9d6:	f7f3 fc1d 	bl	214 <__aeabi_uldivmod>
    c9da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    c9de:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    c9e0:	4635      	mov	r5, r6
    c9e2:	e78f      	b.n	c904 <event_connection_prepare+0x7cc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    c9e4:	fba5 ab0b 	umull	sl, fp, r5, fp
    c9e8:	a327      	add	r3, pc, #156	; (adr r3, ca88 <event_connection_prepare+0x950>)
    c9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    c9ee:	4650      	mov	r0, sl
    c9f0:	4659      	mov	r1, fp
    c9f2:	f7f3 fc0f 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    c9f6:	4a31      	ldr	r2, [pc, #196]	; (cabc <event_connection_prepare+0x984>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c9f8:	f894 6020 	ldrb.w	r6, [r4, #32]
    c9fc:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    ca00:	2307      	movs	r3, #7
    ca02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ca06:	2100      	movs	r1, #0
    ca08:	4343      	muls	r3, r0
    ca0a:	fb02 3301 	mla	r3, r2, r1, r3
    ca0e:	fba0 0102 	umull	r0, r1, r0, r2
    ca12:	ebba 0000 	subs.w	r0, sl, r0
    ca16:	4419      	add	r1, r3
    ca18:	eb6b 0101 	sbc.w	r1, fp, r1
    ca1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ca20:	2300      	movs	r3, #0
    ca22:	f7f3 fbf7 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ca26:	68e3      	ldr	r3, [r4, #12]
    ca28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ca2a:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    ca2e:	4924      	ldr	r1, [pc, #144]	; (cac0 <event_connection_prepare+0x988>)
		ticker_status =
    ca30:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ca32:	441a      	add	r2, r3
    ca34:	4613      	mov	r3, r2
    ca36:	4a23      	ldr	r2, [pc, #140]	; (cac4 <event_connection_prepare+0x98c>)
		ticker_status =
    ca38:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ca3a:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    ca3e:	bf38      	it	cc
    ca40:	460a      	movcc	r2, r1
    ca42:	3607      	adds	r6, #7
		ticker_status =
    ca44:	f641 2195 	movw	r1, #6805	; 0x1a95
    ca48:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ca4a:	b2f6      	uxtb	r6, r6
		ticker_status =
    ca4c:	4915      	ldr	r1, [pc, #84]	; (caa4 <event_connection_prepare+0x96c>)
    ca4e:	9107      	str	r1, [sp, #28]
    ca50:	9205      	str	r2, [sp, #20]
    ca52:	9406      	str	r4, [sp, #24]
    ca54:	f8cd 800c 	str.w	r8, [sp, #12]
    ca58:	9501      	str	r5, [sp, #4]
    ca5a:	9700      	str	r7, [sp, #0]
    ca5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca5e:	4632      	mov	r2, r6
    ca60:	4641      	mov	r1, r8
    ca62:	4640      	mov	r0, r8
    ca64:	f7fa ffaa 	bl	79bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ca68:	f030 0002 	bics.w	r0, r0, #2
    ca6c:	d192      	bne.n	c994 <event_connection_prepare+0x85c>
		if (mayfly_was_enabled) {
    ca6e:	f1b9 0f00 	cmp.w	r9, #0
    ca72:	f000 838c 	beq.w	d18e <event_connection_prepare+0x1056>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    ca76:	2201      	movs	r2, #1
    ca78:	4611      	mov	r1, r2
}
    ca7a:	b00f      	add	sp, #60	; 0x3c
    ca7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    ca80:	f7fa b9b6 	b.w	6df0 <mayfly_enable>
    ca84:	f3af 8000 	nop.w
    ca88:	1afd498d 	.word	0x1afd498d
    ca8c:	00000007 	.word	0x00000007
    ca90:	09ce5400 	.word	0x09ce5400
    ca94:	00018550 	.word	0x00018550
    ca98:	000f4240 	.word	0x000f4240
    ca9c:	026259ff 	.word	0x026259ff
    caa0:	01c9c37f 	.word	0x01c9c37f
    caa4:	0000aaa1 	.word	0x0000aaa1
    caa8:	000159e9 	.word	0x000159e9
    caac:	20003ad4 	.word	0x20003ad4
    cab0:	00016791 	.word	0x00016791
    cab4:	00018129 	.word	0x00018129
    cab8:	000182f1 	.word	0x000182f1
    cabc:	1afd498d 	.word	0x1afd498d
    cac0:	0000d349 	.word	0x0000d349
    cac4:	0000d34d 	.word	0x0000d34d
    cac8:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
    cacc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cad0:	2b00      	cmp	r3, #0
    cad2:	d05e      	beq.n	cb92 <event_connection_prepare+0xa5a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cad4:	48c9      	ldr	r0, [pc, #804]	; (cdfc <event_connection_prepare+0xcc4>)
    cad6:	f7fa f8e8 	bl	6caa <mem_acquire>
		if (node_tx) {
    cada:	4607      	mov	r7, r0
    cadc:	b1e8      	cbz	r0, cb1a <event_connection_prepare+0x9e2>
			conn->llcp.chan_map.initiate = 0;
    cade:	2300      	movs	r3, #0
    cae0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    cae4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    cae6:	3306      	adds	r3, #6
    cae8:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    caea:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    caee:	7903      	ldrb	r3, [r0, #4]
    caf0:	f043 0303 	orr.w	r3, r3, #3
    caf4:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    caf6:	2308      	movs	r3, #8
    caf8:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cafa:	2301      	movs	r3, #1
    cafc:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    cafe:	2205      	movs	r2, #5
    cb00:	f104 0179 	add.w	r1, r4, #121	; 0x79
    cb04:	3008      	adds	r0, #8
    cb06:	f7f5 f88b 	bl	1c20 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    cb0a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    cb0e:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    cb12:	4639      	mov	r1, r7
    cb14:	4620      	mov	r0, r4
    cb16:	f7ff fa41 	bl	bf9c <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    cb1a:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    cb1e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    cb22:	429a      	cmp	r2, r3
    cb24:	d01e      	beq.n	cb64 <event_connection_prepare+0xa2c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    cb26:	2005      	movs	r0, #5
    cb28:	f7ff f840 	bl	bbac <event_stop.constprop.31>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cb2c:	48b3      	ldr	r0, [pc, #716]	; (cdfc <event_connection_prepare+0xcc4>)
    cb2e:	f7fa f8bc 	bl	6caa <mem_acquire>
		if (node_tx) {
    cb32:	4601      	mov	r1, r0
    cb34:	b1b0      	cbz	r0, cb64 <event_connection_prepare+0xa2c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    cb36:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    cb3a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cb3e:	7903      	ldrb	r3, [r0, #4]
    cb40:	f043 0303 	orr.w	r3, r3, #3
    cb44:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    cb46:	2302      	movs	r3, #2
    cb48:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cb4a:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    cb4c:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    cb50:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    cb52:	4620      	mov	r0, r4
    cb54:	f7ff fa22 	bl	bf9c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    cb58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    cb5a:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    cb5c:	bf98      	it	ls
    cb5e:	3301      	addls	r3, #1
    cb60:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    cb64:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    cb68:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    cb6c:	429a      	cmp	r2, r3
    cb6e:	f000 82f5 	beq.w	d15c <event_connection_prepare+0x1024>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    cb72:	2005      	movs	r0, #5
    cb74:	f7ff f81a 	bl	bbac <event_stop.constprop.31>
	switch (conn->llcp_length.state) {
    cb78:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    cb7c:	f003 0303 	and.w	r3, r3, #3
    cb80:	2b03      	cmp	r3, #3
    cb82:	f200 8316 	bhi.w	d1b2 <event_connection_prepare+0x107a>
    cb86:	e8df f013 	tbh	[pc, r3, lsl #1]
    cb8a:	0291      	.short	0x0291
    cb8c:	02e902e9 	.word	0x02e902e9
    cb90:	0305      	.short	0x0305
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    cb92:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    cb96:	1af3      	subs	r3, r6, r3
    cb98:	041f      	lsls	r7, r3, #16
    cb9a:	d4be      	bmi.n	cb1a <event_connection_prepare+0x9e2>
		conn->llcp_ack = conn->llcp_req;
    cb9c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cba0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    cba4:	f104 0717 	add.w	r7, r4, #23
    cba8:	2205      	movs	r2, #5
    cbaa:	f104 0179 	add.w	r1, r4, #121	; 0x79
    cbae:	4638      	mov	r0, r7
    cbb0:	f7f5 f836 	bl	1c20 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    cbb4:	2105      	movs	r1, #5
    cbb6:	4638      	mov	r0, r7
    cbb8:	f7fa fa22 	bl	7000 <util_ones_count_get>
		conn->data_chan_count =
    cbbc:	7f63      	ldrb	r3, [r4, #29]
    cbbe:	f360 0305 	bfi	r3, r0, #0, #6
    cbc2:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    cbc4:	2301      	movs	r3, #1
    cbc6:	7723      	strb	r3, [r4, #28]
    cbc8:	e7a7      	b.n	cb1a <event_connection_prepare+0x9e2>
	if (conn->llcp.encryption.initiate) {
    cbca:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    cbce:	f1b9 0f00 	cmp.w	r9, #0
    cbd2:	d1a2      	bne.n	cb1a <event_connection_prepare+0x9e2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cbd4:	4889      	ldr	r0, [pc, #548]	; (cdfc <event_connection_prepare+0xcc4>)
    cbd6:	f7fa f868 	bl	6caa <mem_acquire>
	if (!node_tx) {
    cbda:	4607      	mov	r7, r0
    cbdc:	2800      	cmp	r0, #0
    cbde:	d09c      	beq.n	cb1a <event_connection_prepare+0x9e2>
	if (!conn->role) {
    cbe0:	f994 301d 	ldrsb.w	r3, [r4, #29]
    cbe4:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    cbe6:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    cbea:	db4d      	blt.n	cc88 <event_connection_prepare+0xb50>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    cbec:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    cbf0:	465b      	mov	r3, fp
    cbf2:	464a      	mov	r2, r9
    cbf4:	f104 0194 	add.w	r1, r4, #148	; 0x94
    cbf8:	f104 0084 	add.w	r0, r4, #132	; 0x84
    cbfc:	f006 f9d4 	bl	12fa8 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    cc00:	2210      	movs	r2, #16
    cc02:	4659      	mov	r1, fp
    cc04:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    cc08:	f7f5 f80a 	bl	1c20 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    cc0c:	f504 7189 	add.w	r1, r4, #274	; 0x112
    cc10:	2208      	movs	r2, #8
    cc12:	f204 1033 	addw	r0, r4, #307	; 0x133
    cc16:	f7f5 f803 	bl	1c20 <memcpy>
		conn->ccm_rx.direction = 0;
    cc1a:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    cc1e:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    cc22:	f369 0300 	bfi	r3, r9, #0, #1
    cc26:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    cc2a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    cc2e:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    cc32:	f043 0301 	orr.w	r3, r3, #1
    cc36:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    cc3a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    cc3e:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    cc42:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    cc46:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    cc4a:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    cc4e:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    cc52:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    cc56:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    cc5a:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    cc5e:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    cc62:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    cc66:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    cc6a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    cc6e:	4651      	mov	r1, sl
    cc70:	4620      	mov	r0, r4
    cc72:	f7ff fa21 	bl	c0b8 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    cc76:	4639      	mov	r1, r7
    cc78:	4620      	mov	r0, r4
    cc7a:	f7ff f98f 	bl	bf9c <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    cc7e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cc82:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    cc86:	e748      	b.n	cb1a <event_connection_prepare+0x9e2>
	else if (!conn->pause_tx || conn->refresh) {
    cc88:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    cc8c:	f003 0348 	and.w	r3, r3, #72	; 0x48
    cc90:	2b08      	cmp	r3, #8
    cc92:	f000 80a2 	beq.w	cdda <event_connection_prepare+0xca2>
		if (conn->llcp.encryption.error_code) {
    cc96:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    cc9a:	f1b9 0f00 	cmp.w	r9, #0
    cc9e:	d020      	beq.n	cce2 <event_connection_prepare+0xbaa>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    cca0:	7903      	ldrb	r3, [r0, #4]
    cca2:	f043 0303 	orr.w	r3, r3, #3
    cca6:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    cca8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    ccac:	0698      	lsls	r0, r3, #26
    ccae:	d512      	bpl.n	ccd6 <event_connection_prepare+0xb9e>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    ccb0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    ccb4:	0759      	lsls	r1, r3, #29
    ccb6:	d50e      	bpl.n	ccd6 <event_connection_prepare+0xb9e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    ccb8:	2311      	movs	r3, #17
    ccba:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    ccbc:	2303      	movs	r3, #3
    ccbe:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    ccc0:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    ccc4:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    ccc6:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    ccc8:	797b      	ldrb	r3, [r7, #5]
    ccca:	3301      	adds	r3, #1
    cccc:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    ccce:	2300      	movs	r3, #0
    ccd0:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    ccd4:	e7cf      	b.n	cc76 <event_connection_prepare+0xb3e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    ccd6:	230d      	movs	r3, #13
    ccd8:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    ccda:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    ccde:	2301      	movs	r3, #1
    cce0:	e7f1      	b.n	ccc6 <event_connection_prepare+0xb8e>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cce2:	4846      	ldr	r0, [pc, #280]	; (cdfc <event_connection_prepare+0xcc4>)
    cce4:	f7f9 ffe1 	bl	6caa <mem_acquire>
	if (!node_tx) {
    cce8:	4682      	mov	sl, r0
    ccea:	2800      	cmp	r0, #0
    ccec:	f000 8310 	beq.w	d310 <event_connection_prepare+0x11d8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ccf0:	7903      	ldrb	r3, [r0, #4]
    ccf2:	f043 0303 	orr.w	r3, r3, #3
    ccf6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    ccf8:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    ccfc:	230d      	movs	r3, #13
    ccfe:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    cd00:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    cd04:	f100 0308 	add.w	r3, r0, #8
    cd08:	4619      	mov	r1, r3
    cd0a:	2208      	movs	r2, #8
    cd0c:	6868      	ldr	r0, [r5, #4]
    cd0e:	930d      	str	r3, [sp, #52]	; 0x34
    cd10:	f007 fb1a 	bl	14348 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    cd14:	f10a 0310 	add.w	r3, sl, #16
    cd18:	4619      	mov	r1, r3
    cd1a:	465a      	mov	r2, fp
    cd1c:	6868      	ldr	r0, [r5, #4]
    cd1e:	930b      	str	r3, [sp, #44]	; 0x2c
    cd20:	f007 fb12 	bl	14348 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    cd24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cd26:	2208      	movs	r2, #8
    cd28:	4619      	mov	r1, r3
    cd2a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    cd2e:	f7f4 ff77 	bl	1c20 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    cd32:	465a      	mov	r2, fp
    cd34:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cd36:	f504 708b 	add.w	r0, r4, #278	; 0x116
    cd3a:	f7f4 ff71 	bl	1c20 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    cd3e:	4651      	mov	r1, sl
    cd40:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    cd42:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    cd46:	f7ff f929 	bl	bf9c <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    cd4a:	4653      	mov	r3, sl
    cd4c:	464a      	mov	r2, r9
    cd4e:	f104 0194 	add.w	r1, r4, #148	; 0x94
    cd52:	f104 0084 	add.w	r0, r4, #132	; 0x84
    cd56:	f006 f927 	bl	12fa8 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    cd5a:	2210      	movs	r2, #16
    cd5c:	4651      	mov	r1, sl
    cd5e:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    cd62:	f7f4 ff5d 	bl	1c20 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    cd66:	2208      	movs	r2, #8
    cd68:	f504 7189 	add.w	r1, r4, #274	; 0x112
    cd6c:	f204 1033 	addw	r0, r4, #307	; 0x133
    cd70:	f7f4 ff56 	bl	1c20 <memcpy>
			conn->ccm_rx.direction = 1;
    cd74:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    cd78:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    cd7c:	f043 0301 	orr.w	r3, r3, #1
    cd80:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    cd84:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    cd88:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    cd8c:	f369 0300 	bfi	r3, r9, #0, #1
    cd90:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    cd94:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    cd98:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    cd9c:	f043 0310 	orr.w	r3, r3, #16
    cda0:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cda4:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    cda6:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cdaa:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    cdae:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    cdb2:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    cdb6:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    cdba:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    cdbe:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    cdc2:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    cdc6:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    cdca:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cdce:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    cdd0:	2301      	movs	r3, #1
    cdd2:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cdd4:	2305      	movs	r3, #5
    cdd6:	71fb      	strb	r3, [r7, #7]
    cdd8:	e74d      	b.n	cc76 <event_connection_prepare+0xb3e>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    cdda:	4651      	mov	r1, sl
    cddc:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    cde0:	f7ff f96a 	bl	c0b8 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    cde4:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    cde8:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    cdec:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    cdf0:	f369 03c3 	bfi	r3, r9, #3, #1
    cdf4:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    cdf8:	e73d      	b.n	cc76 <event_connection_prepare+0xb3e>
    cdfa:	bf00      	nop
    cdfc:	20000a4c 	.word	0x20000a4c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ce00:	48b5      	ldr	r0, [pc, #724]	; (d0d8 <event_connection_prepare+0xfa0>)
    ce02:	f7f9 ff52 	bl	6caa <mem_acquire>
	if (node_tx) {
    ce06:	4607      	mov	r7, r0
    ce08:	2800      	cmp	r0, #0
    ce0a:	f43f ae86 	beq.w	cb1a <event_connection_prepare+0x9e2>
		conn->llcp_ack = conn->llcp_req;
    ce0e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ce12:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    ce16:	4bb1      	ldr	r3, [pc, #708]	; (d0dc <event_connection_prepare+0xfa4>)
    ce18:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ce1c:	7903      	ldrb	r3, [r0, #4]
    ce1e:	f043 0303 	orr.w	r3, r3, #3
    ce22:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    ce24:	2309      	movs	r3, #9
    ce26:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    ce28:	f994 301d 	ldrsb.w	r3, [r4, #29]
    ce2c:	2b00      	cmp	r3, #0
    ce2e:	bfac      	ite	ge
    ce30:	2308      	movge	r3, #8
    ce32:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    ce34:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    ce36:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    ce38:	2100      	movs	r1, #0
    ce3a:	4410      	add	r0, r2
    ce3c:	f7f4 ff1c 	bl	1c78 <memset>
			conn->llcp_features & 0xFF;
    ce40:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    ce44:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    ce46:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    ce48:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    ce4a:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    ce4c:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    ce4e:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    ce50:	4620      	mov	r0, r4
    ce52:	f7ff f8a3 	bl	bf9c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    ce56:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    ce5a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    ce5e:	e65c      	b.n	cb1a <event_connection_prepare+0x9e2>
	if (conn->llcp_version.tx == 0) {
    ce60:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    ce64:	07da      	lsls	r2, r3, #31
    ce66:	d424      	bmi.n	ceb2 <event_connection_prepare+0xd7a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ce68:	489b      	ldr	r0, [pc, #620]	; (d0d8 <event_connection_prepare+0xfa0>)
    ce6a:	f7f9 ff1e 	bl	6caa <mem_acquire>
		if (node_tx) {
    ce6e:	4601      	mov	r1, r0
    ce70:	2800      	cmp	r0, #0
    ce72:	f43f ae52 	beq.w	cb1a <event_connection_prepare+0x9e2>
			conn->llcp_ack = conn->llcp_req;
    ce76:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ce7a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    ce7e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    ce82:	f043 0301 	orr.w	r3, r3, #1
    ce86:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ce8a:	7903      	ldrb	r3, [r0, #4]
    ce8c:	f043 0303 	orr.w	r3, r3, #3
    ce90:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    ce92:	2306      	movs	r3, #6
    ce94:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    ce96:	230c      	movs	r3, #12
    ce98:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    ce9a:	2309      	movs	r3, #9
    ce9c:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    ce9e:	f06f 030e 	mvn.w	r3, #14
    cea2:	7243      	strb	r3, [r0, #9]
    cea4:	2305      	movs	r3, #5
    cea6:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    cea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ceac:	72c3      	strb	r3, [r0, #11]
    ceae:	7303      	strb	r3, [r0, #12]
    ceb0:	e7ce      	b.n	ce50 <event_connection_prepare+0xd18>
	} else if (conn->llcp_version.rx != 0) {
    ceb2:	079b      	lsls	r3, r3, #30
    ceb4:	d528      	bpl.n	cf08 <event_connection_prepare+0xdd0>
		conn->llcp_ack = conn->llcp_req;
    ceb6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ceba:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    cebe:	2002      	movs	r0, #2
    cec0:	f7fc fe6a 	bl	9b98 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    cec4:	b930      	cbnz	r0, ced4 <event_connection_prepare+0xd9c>
    cec6:	4a86      	ldr	r2, [pc, #536]	; (d0e0 <event_connection_prepare+0xfa8>)
    cec8:	4b86      	ldr	r3, [pc, #536]	; (d0e4 <event_connection_prepare+0xfac>)
    ceca:	9201      	str	r2, [sp, #4]
    cecc:	9200      	str	r2, [sp, #0]
    cece:	681c      	ldr	r4, [r3, #0]
    ced0:	4b85      	ldr	r3, [pc, #532]	; (d0e8 <event_connection_prepare+0xfb0>)
    ced2:	e45c      	b.n	c78e <event_connection_prepare+0x656>
		node_rx->hdr.handle = conn->handle;
    ced4:	8c23      	ldrh	r3, [r4, #32]
    ced6:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    ced8:	2301      	movs	r3, #1
    ceda:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    cedc:	7a03      	ldrb	r3, [r0, #8]
    cede:	f043 0303 	orr.w	r3, r3, #3
    cee2:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    cee4:	2306      	movs	r3, #6
    cee6:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    cee8:	230c      	movs	r3, #12
    ceea:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    ceec:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    cef0:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    cef2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    cef6:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    cefa:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    cefe:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    cf02:	f7fd fcc1 	bl	a888 <packet_rx_enqueue>
    cf06:	e608      	b.n	cb1a <event_connection_prepare+0x9e2>
		LL_ASSERT(0);
    cf08:	4a75      	ldr	r2, [pc, #468]	; (d0e0 <event_connection_prepare+0xfa8>)
    cf0a:	4b76      	ldr	r3, [pc, #472]	; (d0e4 <event_connection_prepare+0xfac>)
    cf0c:	9201      	str	r2, [sp, #4]
    cf0e:	9200      	str	r2, [sp, #0]
    cf10:	681c      	ldr	r4, [r3, #0]
    cf12:	4b75      	ldr	r3, [pc, #468]	; (d0e8 <event_connection_prepare+0xfb0>)
    cf14:	f7ff bac8 	b.w	c4a8 <event_connection_prepare+0x370>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cf18:	486f      	ldr	r0, [pc, #444]	; (d0d8 <event_connection_prepare+0xfa0>)
    cf1a:	f7f9 fec6 	bl	6caa <mem_acquire>
	if (node_tx) {
    cf1e:	4601      	mov	r1, r0
    cf20:	2800      	cmp	r0, #0
    cf22:	f43f adfa 	beq.w	cb1a <event_connection_prepare+0x9e2>
		conn->llcp_ack = conn->llcp_req;
    cf26:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cf2a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cf2e:	7903      	ldrb	r3, [r0, #4]
    cf30:	f043 0303 	orr.w	r3, r3, #3
    cf34:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    cf36:	2301      	movs	r3, #1
    cf38:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    cf3a:	2312      	movs	r3, #18
    cf3c:	71c3      	strb	r3, [r0, #7]
    cf3e:	e787      	b.n	ce50 <event_connection_prepare+0xd18>
	if (conn->llcp.phy_upd_ind.initiate) {
    cf40:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    cf44:	07d7      	lsls	r7, r2, #31
    cf46:	d554      	bpl.n	cff2 <event_connection_prepare+0xeba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cf48:	4863      	ldr	r0, [pc, #396]	; (d0d8 <event_connection_prepare+0xfa0>)
    cf4a:	f7f9 feae 	bl	6caa <mem_acquire>
		if (node_tx) {
    cf4e:	4607      	mov	r7, r0
    cf50:	2800      	cmp	r0, #0
    cf52:	f43f ade2 	beq.w	cb1a <event_connection_prepare+0x9e2>
			conn->llcp.phy_upd_ind.initiate = 0;
    cf56:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cf5a:	f36f 0300 	bfc	r3, #0, #1
    cf5e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    cf62:	b2db      	uxtb	r3, r3
    cf64:	f3c3 0982 	ubfx	r9, r3, #2, #3
    cf68:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    cf6c:	d13b      	bne.n	cfe6 <event_connection_prepare+0xeae>
				conn->llcp_ack = conn->llcp_req;
    cf6e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    cf72:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    cf76:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    cf78:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    cf7c:	d51d      	bpl.n	cfba <event_connection_prepare+0xe82>
					node_rx = packet_rx_reserve_get(2);
    cf7e:	2002      	movs	r0, #2
    cf80:	f7fc fe0a 	bl	9b98 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    cf84:	b938      	cbnz	r0, cf96 <event_connection_prepare+0xe5e>
		LL_ASSERT(node_rx);
    cf86:	4a56      	ldr	r2, [pc, #344]	; (d0e0 <event_connection_prepare+0xfa8>)
    cf88:	4b56      	ldr	r3, [pc, #344]	; (d0e4 <event_connection_prepare+0xfac>)
    cf8a:	9201      	str	r2, [sp, #4]
    cf8c:	9200      	str	r2, [sp, #0]
    cf8e:	681c      	ldr	r4, [r3, #0]
    cf90:	4b56      	ldr	r3, [pc, #344]	; (d0ec <event_connection_prepare+0xfb4>)
    cf92:	f7ff bbfc 	b.w	c78e <event_connection_prepare+0x656>
					node_rx->hdr.handle = conn->handle;
    cf96:	8c23      	ldrh	r3, [r4, #32]
    cf98:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    cf9a:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    cf9e:	230c      	movs	r3, #12
    cfa0:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    cfa2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    cfa6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    cfaa:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    cfac:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    cfb0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cfb4:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    cfb6:	f7fd fc67 	bl	a888 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cfba:	793b      	ldrb	r3, [r7, #4]
    cfbc:	f043 0303 	orr.w	r3, r3, #3
    cfc0:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    cfc2:	2305      	movs	r3, #5
    cfc4:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cfc6:	2318      	movs	r3, #24
    cfc8:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    cfca:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cfce:	f3c3 0382 	ubfx	r3, r3, #2, #3
    cfd2:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    cfd4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cfd8:	f3c3 1342 	ubfx	r3, r3, #5, #3
    cfdc:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    cfde:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    cfe2:	817b      	strh	r3, [r7, #10]
    cfe4:	e595      	b.n	cb12 <event_connection_prepare+0x9da>
								 conn->latency +
    cfe6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    cfe8:	3306      	adds	r3, #6
    cfea:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    cfec:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    cff0:	e7e3      	b.n	cfba <event_connection_prepare+0xe82>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    cff2:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    cff6:	1af3      	subs	r3, r6, r3
    cff8:	0419      	lsls	r1, r3, #16
    cffa:	f53f ad8e 	bmi.w	cb1a <event_connection_prepare+0x9e2>
		conn->llcp_ack = conn->llcp_req;
    cffe:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d002:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    d006:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    d00a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    d00e:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    d012:	bf18      	it	ne
    d014:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    d018:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    d01c:	bf1c      	itt	ne
    d01e:	f367 03c5 	bfine	r3, r7, #3, #3
    d022:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    d026:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    d02a:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    d02e:	d008      	beq.n	d042 <event_connection_prepare+0xf0a>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    d030:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d034:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    d038:	095b      	lsrs	r3, r3, #5
    d03a:	f363 0702 	bfi	r7, r3, #0, #3
    d03e:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    d042:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d046:	461f      	mov	r7, r3
    d048:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d04c:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    d050:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    d052:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    d056:	d40b      	bmi.n	d070 <event_connection_prepare+0xf38>
    d058:	b2fb      	uxtb	r3, r7
    d05a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d05e:	4283      	cmp	r3, r0
    d060:	d106      	bne.n	d070 <event_connection_prepare+0xf38>
		    (conn->phy_rx == old_rx)) {
    d062:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    d066:	f003 0307 	and.w	r3, r3, #7
    d06a:	428b      	cmp	r3, r1
    d06c:	f43f ad55 	beq.w	cb1a <event_connection_prepare+0x9e2>
		node_rx = packet_rx_reserve_get(2);
    d070:	2002      	movs	r0, #2
    d072:	f7fc fd91 	bl	9b98 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    d076:	2800      	cmp	r0, #0
    d078:	d085      	beq.n	cf86 <event_connection_prepare+0xe4e>
		node_rx->hdr.handle = conn->handle;
    d07a:	8c23      	ldrh	r3, [r4, #32]
    d07c:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d07e:	230c      	movs	r3, #12
    d080:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    d082:	2300      	movs	r3, #0
    d084:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    d086:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d08a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d08e:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    d090:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    d094:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d098:	7343      	strb	r3, [r0, #13]
    d09a:	e732      	b.n	cf02 <event_connection_prepare+0xdca>
			LL_ASSERT(0);
    d09c:	4a10      	ldr	r2, [pc, #64]	; (d0e0 <event_connection_prepare+0xfa8>)
    d09e:	4b11      	ldr	r3, [pc, #68]	; (d0e4 <event_connection_prepare+0xfac>)
    d0a0:	9201      	str	r2, [sp, #4]
    d0a2:	9200      	str	r2, [sp, #0]
    d0a4:	681c      	ldr	r4, [r3, #0]
    d0a6:	4b12      	ldr	r3, [pc, #72]	; (d0f0 <event_connection_prepare+0xfb8>)
    d0a8:	f7ff b9fe 	b.w	c4a8 <event_connection_prepare+0x370>
		free_count_rx = packet_rx_acquired_count_get() +
    d0ac:	f7fc fd5e 	bl	9b6c <packet_rx_acquired_count_get>
    d0b0:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    d0b2:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    d0b6:	f7f9 fe27 	bl	6d08 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    d0ba:	4438      	add	r0, r7
    d0bc:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    d0be:	28ff      	cmp	r0, #255	; 0xff
    d0c0:	d91e      	bls.n	d100 <event_connection_prepare+0xfc8>
		LL_ASSERT(free_count_rx <= 0xFF);
    d0c2:	4a07      	ldr	r2, [pc, #28]	; (d0e0 <event_connection_prepare+0xfa8>)
    d0c4:	4b07      	ldr	r3, [pc, #28]	; (d0e4 <event_connection_prepare+0xfac>)
    d0c6:	9201      	str	r2, [sp, #4]
    d0c8:	9200      	str	r2, [sp, #0]
    d0ca:	681c      	ldr	r4, [r3, #0]
    d0cc:	4909      	ldr	r1, [pc, #36]	; (d0f4 <event_connection_prepare+0xfbc>)
    d0ce:	4b0a      	ldr	r3, [pc, #40]	; (d0f8 <event_connection_prepare+0xfc0>)
    d0d0:	480a      	ldr	r0, [pc, #40]	; (d0fc <event_connection_prepare+0xfc4>)
    d0d2:	f7ff b842 	b.w	c15a <event_connection_prepare+0x22>
    d0d6:	bf00      	nop
    d0d8:	20000a4c 	.word	0x20000a4c
    d0dc:	000141ff 	.word	0x000141ff
    d0e0:	000159e9 	.word	0x000159e9
    d0e4:	20003ad4 	.word	0x20003ad4
    d0e8:	0001813d 	.word	0x0001813d
    d0ec:	00018199 	.word	0x00018199
    d0f0:	000181b0 	.word	0x000181b0
    d0f4:	00016791 	.word	0x00016791
    d0f8:	00018177 	.word	0x00018177
    d0fc:	0001837e 	.word	0x0001837e
		if (_radio.packet_rx_data_count != free_count_rx) {
    d100:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    d104:	4283      	cmp	r3, r0
    d106:	d129      	bne.n	d15c <event_connection_prepare+0x1024>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d108:	4884      	ldr	r0, [pc, #528]	; (d31c <event_connection_prepare+0x11e4>)
    d10a:	f7f9 fdce 	bl	6caa <mem_acquire>
		if (!node_tx) {
    d10e:	4601      	mov	r1, r0
    d110:	b320      	cbz	r0, d15c <event_connection_prepare+0x1024>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    d112:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    d116:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    d11a:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    d11e:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    d120:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    d122:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    d124:	f365 0301 	bfi	r3, r5, #0, #2
    d128:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d12c:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    d12e:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d130:	f043 0303 	orr.w	r3, r3, #3
    d134:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    d136:	2309      	movs	r3, #9
    d138:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    d13a:	2314      	movs	r3, #20
    d13c:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    d13e:	231b      	movs	r3, #27
    d140:	720b      	strb	r3, [r1, #8]
    d142:	2300      	movs	r3, #0
    d144:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    d146:	2348      	movs	r3, #72	; 0x48
    d148:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    d14a:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    d14c:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    d14e:	4620      	mov	r0, r4
    d150:	f7fe ff24 	bl	bf9c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    d154:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    d158:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    d15c:	f894 3020 	ldrb.w	r3, [r4, #32]
    d160:	f994 501d 	ldrsb.w	r5, [r4, #29]
    d164:	486e      	ldr	r0, [pc, #440]	; (d320 <event_connection_prepare+0x11e8>)
    d166:	496f      	ldr	r1, [pc, #444]	; (d324 <event_connection_prepare+0x11ec>)
    d168:	68a2      	ldr	r2, [r4, #8]
    d16a:	9403      	str	r4, [sp, #12]
    d16c:	3307      	adds	r3, #7
    d16e:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    d172:	bf38      	it	cc
    d174:	4601      	movcc	r1, r0
    d176:	b2db      	uxtb	r3, r3
    d178:	e88d 000c 	stmia.w	sp, {r2, r3}
    d17c:	9102      	str	r1, [sp, #8]
    d17e:	1d23      	adds	r3, r4, #4
    d180:	4622      	mov	r2, r4
    d182:	990c      	ldr	r1, [sp, #48]	; 0x30
    d184:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    d186:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    d188:	f7fe fd1e 	bl	bbc8 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    d18c:	8466      	strh	r6, [r4, #34]	; 0x22
}
    d18e:	b00f      	add	sp, #60	; 0x3c
    d190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    d194:	f7fc fcea 	bl	9b6c <packet_rx_acquired_count_get>
    d198:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    d19a:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    d19e:	f7f9 fdb3 	bl	6d08 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    d1a2:	4438      	add	r0, r7
    d1a4:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    d1a6:	28ff      	cmp	r0, #255	; 0xff
    d1a8:	d88b      	bhi.n	d0c2 <event_connection_prepare+0xf8a>
		if (_radio.packet_rx_data_count != free_count_rx) {
    d1aa:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    d1ae:	4283      	cmp	r3, r0
    d1b0:	d007      	beq.n	d1c2 <event_connection_prepare+0x108a>
		LL_ASSERT(0);
    d1b2:	4a5d      	ldr	r2, [pc, #372]	; (d328 <event_connection_prepare+0x11f0>)
    d1b4:	4b5d      	ldr	r3, [pc, #372]	; (d32c <event_connection_prepare+0x11f4>)
    d1b6:	9201      	str	r2, [sp, #4]
    d1b8:	9200      	str	r2, [sp, #0]
    d1ba:	681c      	ldr	r4, [r3, #0]
    d1bc:	4b5c      	ldr	r3, [pc, #368]	; (d330 <event_connection_prepare+0x11f8>)
    d1be:	f7ff b973 	b.w	c4a8 <event_connection_prepare+0x370>
		conn->llcp_length.ack = conn->llcp_length.req;
    d1c2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    d1c6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    d1ca:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    d1ce:	2100      	movs	r1, #0
    d1d0:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    d1d4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d1d8:	f361 02c3 	bfi	r2, r1, #3, #1
    d1dc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    d1e0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    d1e4:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    d1e6:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    d1ea:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    d1ec:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    d1f0:	f7f9 fd8a 	bl	6d08 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    d1f4:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    d1f8:	b10b      	cbz	r3, d1fe <event_connection_prepare+0x10c6>
			free_count_conn++;
    d1fa:	3001      	adds	r0, #1
    d1fc:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    d1fe:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    d202:	b10b      	cbz	r3, d208 <event_connection_prepare+0x10d0>
			free_count_conn++;
    d204:	3001      	adds	r0, #1
    d206:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d208:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d20a:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d20e:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d210:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d212:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d216:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d218:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d21a:	d056      	beq.n	d2ca <event_connection_prepare+0x1192>
    d21c:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    d220:	42bb      	cmp	r3, r7
    d222:	d352      	bcc.n	d2ca <event_connection_prepare+0x1192>
		node_rx = packet_rx_reserve_get(2);
    d224:	2002      	movs	r0, #2
    d226:	f7fc fcb7 	bl	9b98 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    d22a:	2800      	cmp	r0, #0
    d22c:	d159      	bne.n	d2e2 <event_connection_prepare+0x11aa>
    d22e:	4a3e      	ldr	r2, [pc, #248]	; (d328 <event_connection_prepare+0x11f0>)
    d230:	4b3e      	ldr	r3, [pc, #248]	; (d32c <event_connection_prepare+0x11f4>)
    d232:	9201      	str	r2, [sp, #4]
    d234:	9200      	str	r2, [sp, #0]
    d236:	681c      	ldr	r4, [r3, #0]
    d238:	4b3d      	ldr	r3, [pc, #244]	; (d330 <event_connection_prepare+0x11f8>)
    d23a:	f7ff baa8 	b.w	c78e <event_connection_prepare+0x656>
				if (_radio.packet_rx_acquire == 0) {
    d23e:	b90b      	cbnz	r3, d244 <event_connection_prepare+0x110c>
						_radio.packet_rx_count - 1;
    d240:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    d244:	3b01      	subs	r3, #1
    d246:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    d24a:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    d24e:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    d252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d256:	4649      	mov	r1, r9
    d258:	6818      	ldr	r0, [r3, #0]
    d25a:	f7f9 fd40 	bl	6cde <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    d25e:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    d262:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    d266:	3a01      	subs	r2, #1
    d268:	4293      	cmp	r3, r2
    d26a:	db09      	blt.n	d280 <event_connection_prepare+0x1148>
    d26c:	4a2e      	ldr	r2, [pc, #184]	; (d328 <event_connection_prepare+0x11f0>)
    d26e:	4b2f      	ldr	r3, [pc, #188]	; (d32c <event_connection_prepare+0x11f4>)
    d270:	9201      	str	r2, [sp, #4]
    d272:	9200      	str	r2, [sp, #0]
    d274:	681c      	ldr	r4, [r3, #0]
    d276:	492f      	ldr	r1, [pc, #188]	; (d334 <event_connection_prepare+0x11fc>)
    d278:	4b2d      	ldr	r3, [pc, #180]	; (d330 <event_connection_prepare+0x11f8>)
    d27a:	482f      	ldr	r0, [pc, #188]	; (d338 <event_connection_prepare+0x1200>)
    d27c:	f7fe bf6d 	b.w	c15a <event_connection_prepare+0x22>
				_radio.link_rx_data_quota++;
    d280:	3301      	adds	r3, #1
    d282:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    d286:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    d28a:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    d28e:	4293      	cmp	r3, r2
    d290:	d1d5      	bne.n	d23e <event_connection_prepare+0x1106>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    d292:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    d294:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    d298:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    d29a:	bf9a      	itte	ls
    d29c:	2334      	movls	r3, #52	; 0x34
    d29e:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    d2a2:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    d2a6:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    d2aa:	fbb2 f2f1 	udiv	r2, r2, r1
    d2ae:	b2d2      	uxtb	r2, r2
    d2b0:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    d2b4:	b962      	cbnz	r2, d2d0 <event_connection_prepare+0x1198>
    d2b6:	4a1c      	ldr	r2, [pc, #112]	; (d328 <event_connection_prepare+0x11f0>)
    d2b8:	4b1c      	ldr	r3, [pc, #112]	; (d32c <event_connection_prepare+0x11f4>)
    d2ba:	9201      	str	r2, [sp, #4]
    d2bc:	9200      	str	r2, [sp, #0]
    d2be:	681c      	ldr	r4, [r3, #0]
    d2c0:	491c      	ldr	r1, [pc, #112]	; (d334 <event_connection_prepare+0x11fc>)
    d2c2:	4b1b      	ldr	r3, [pc, #108]	; (d330 <event_connection_prepare+0x11f8>)
    d2c4:	481d      	ldr	r0, [pc, #116]	; (d33c <event_connection_prepare+0x1204>)
    d2c6:	f7fe bf48 	b.w	c15a <event_connection_prepare+0x22>
				mem_release(node_rx->hdr.onion.link,
    d2ca:	f8df 9078 	ldr.w	r9, [pc, #120]	; d344 <event_connection_prepare+0x120c>
    d2ce:	e7da      	b.n	d286 <event_connection_prepare+0x114e>
			mem_init(_radio.pkt_rx_data_pool,
    d2d0:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    d2d4:	4b1a      	ldr	r3, [pc, #104]	; (d340 <event_connection_prepare+0x1208>)
    d2d6:	f7f9 fcc1 	bl	6c5c <mem_init>
			packet_rx_allocate(4);
    d2da:	2004      	movs	r0, #4
    d2dc:	f7fc fcd4 	bl	9c88 <packet_rx_allocate>
    d2e0:	e7a0      	b.n	d224 <event_connection_prepare+0x10ec>
		node_rx->hdr.handle = conn->handle;
    d2e2:	8c23      	ldrh	r3, [r4, #32]
    d2e4:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d2e6:	2301      	movs	r3, #1
    d2e8:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    d2ea:	7a03      	ldrb	r3, [r0, #8]
    d2ec:	f043 0303 	orr.w	r3, r3, #3
    d2f0:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    d2f2:	2309      	movs	r3, #9
    d2f4:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    d2f6:	2315      	movs	r3, #21
    d2f8:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    d2fa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    d2fc:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    d2fe:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    d300:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    d302:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    d304:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    d306:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    d308:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    d30a:	f7fd fabd 	bl	a888 <packet_rx_enqueue>
    d30e:	e725      	b.n	d15c <event_connection_prepare+0x1024>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d310:	4902      	ldr	r1, [pc, #8]	; (d31c <event_connection_prepare+0x11e4>)
    d312:	4638      	mov	r0, r7
    d314:	f7f9 fce3 	bl	6cde <mem_release>
    d318:	f7ff bbff 	b.w	cb1a <event_connection_prepare+0x9e2>
    d31c:	20000a4c 	.word	0x20000a4c
    d320:	0000d679 	.word	0x0000d679
    d324:	0000d38d 	.word	0x0000d38d
    d328:	000159e9 	.word	0x000159e9
    d32c:	20003ad4 	.word	0x20003ad4
    d330:	00018177 	.word	0x00018177
    d334:	00016791 	.word	0x00016791
    d338:	000183b5 	.word	0x000183b5
    d33c:	0001840f 	.word	0x0001840f
    d340:	20000a20 	.word	0x20000a20
    d344:	20000a38 	.word	0x20000a38

0000d348 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    d348:	f7fe bef6 	b.w	c138 <event_connection_prepare>

0000d34c <event_slave_prepare>:
    d34c:	f7fe bef4 	b.w	c138 <event_connection_prepare>

0000d350 <connection_configure>:
{
    d350:	b510      	push	{r4, lr}
    d352:	4604      	mov	r4, r0
	radio_reset();
    d354:	f005 ff04 	bl	13160 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    d358:	2000      	movs	r0, #0
    d35a:	f005 ff2b 	bl	131b4 <radio_tx_power_set>
	radio_isr_set(isr);
    d35e:	480a      	ldr	r0, [pc, #40]	; (d388 <connection_configure+0x38>)
    d360:	f005 fec8 	bl	130f4 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    d364:	f104 0010 	add.w	r0, r4, #16
    d368:	f005 ff42 	bl	131f0 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    d36c:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    d36e:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    d370:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    d372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    d376:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    d378:	f240 605b 	movw	r0, #1627	; 0x65b
    d37c:	4319      	orrs	r1, r3
}
    d37e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    d382:	f005 bfdd 	b.w	13340 <radio_crc_configure>
    d386:	bf00      	nop
    d388:	0000ea69 	.word	0x0000ea69

0000d38c <event_slave>:
{
    d38c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d390:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    d392:	4b72      	ldr	r3, [pc, #456]	; (d55c <event_slave+0x1d0>)
    d394:	7cda      	ldrb	r2, [r3, #19]
{
    d396:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    d398:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    d39c:	461d      	mov	r5, r3
    d39e:	b172      	cbz	r2, d3be <event_slave+0x32>
    d3a0:	4a6f      	ldr	r2, [pc, #444]	; (d560 <event_slave+0x1d4>)
    d3a2:	4b70      	ldr	r3, [pc, #448]	; (d564 <event_slave+0x1d8>)
    d3a4:	9201      	str	r2, [sp, #4]
    d3a6:	9200      	str	r2, [sp, #0]
    d3a8:	681c      	ldr	r4, [r3, #0]
    d3aa:	496f      	ldr	r1, [pc, #444]	; (d568 <event_slave+0x1dc>)
    d3ac:	4b6f      	ldr	r3, [pc, #444]	; (d56c <event_slave+0x1e0>)
    d3ae:	4870      	ldr	r0, [pc, #448]	; (d570 <event_slave+0x1e4>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    d3b0:	47a0      	blx	r4
    d3b2:	4040      	eors	r0, r0
    d3b4:	f380 8811 	msr	BASEPRI, r0
    d3b8:	f04f 0004 	mov.w	r0, #4
    d3bc:	df02      	svc	2
    d3be:	7c1b      	ldrb	r3, [r3, #16]
    d3c0:	8c22      	ldrh	r2, [r4, #32]
    d3c2:	b2db      	uxtb	r3, r3
    d3c4:	3207      	adds	r2, #7
    d3c6:	4293      	cmp	r3, r2
    d3c8:	d008      	beq.n	d3dc <event_slave+0x50>
    d3ca:	4a65      	ldr	r2, [pc, #404]	; (d560 <event_slave+0x1d4>)
    d3cc:	4b65      	ldr	r3, [pc, #404]	; (d564 <event_slave+0x1d8>)
    d3ce:	9201      	str	r2, [sp, #4]
    d3d0:	9200      	str	r2, [sp, #0]
    d3d2:	681c      	ldr	r4, [r3, #0]
    d3d4:	4964      	ldr	r1, [pc, #400]	; (d568 <event_slave+0x1dc>)
    d3d6:	4b65      	ldr	r3, [pc, #404]	; (d56c <event_slave+0x1e0>)
    d3d8:	4866      	ldr	r0, [pc, #408]	; (d574 <event_slave+0x1e8>)
    d3da:	e7e9      	b.n	d3b0 <event_slave+0x24>
	_radio.packet_counter = 0;
    d3dc:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    d3e0:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    d3e4:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    d3e6:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    d3e8:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    d3ea:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    d3ec:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    d3ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    d3f0:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    d3f4:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    d3f6:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    d3f8:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    d3fa:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    d3fc:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    d3fe:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    d400:	f7ff ffa6 	bl	d350 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    d404:	2096      	movs	r0, #150	; 0x96
    d406:	f006 f855 	bl	134b4 <radio_tmr_tifs_set>
				     conn->phy_flags);
    d40a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    d40e:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d412:	09d3      	lsrs	r3, r2, #7
    d414:	4631      	mov	r1, r6
    d416:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    d41a:	f000 0007 	and.w	r0, r0, #7
    d41e:	f005 ffb9 	bl	13394 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    d422:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    d426:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    d42a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    d42e:	4620      	mov	r0, r4
    d430:	3108      	adds	r1, #8
    d432:	f7fc ff1b 	bl	a26c <rx_packet_set>
	if (conn->data_chan_sel) {
    d436:	7f63      	ldrb	r3, [r4, #29]
    d438:	f013 0f40 	tst.w	r3, #64	; 0x40
    d43c:	f104 0217 	add.w	r2, r4, #23
    d440:	d05a      	beq.n	d4f8 <event_slave+0x16c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d442:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    d444:	8be1      	ldrh	r1, [r4, #30]
    d446:	3801      	subs	r0, #1
    d448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d44c:	b280      	uxth	r0, r0
    d44e:	f7fe fd61 	bl	bf14 <chan_sel_2>
	chan_set(data_chan_use);
    d452:	f7fd fe43 	bl	b0dc <chan_set>
	conn->slave.window_widening_event_us +=
    d456:	6e23      	ldr	r3, [r4, #96]	; 0x60
    d458:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    d45a:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    d45c:	2200      	movs	r2, #0
    d45e:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    d460:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    d462:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    d464:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    d466:	bf88      	it	hi
    d468:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    d46a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d46c:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    d46e:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    d470:	4413      	add	r3, r2
    d472:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    d474:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    d476:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    d478:	f107 0109 	add.w	r1, r7, #9
    d47c:	4630      	mov	r0, r6
    d47e:	f006 f825 	bl	134cc <radio_tmr_start>
    d482:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    d484:	f006 f8be 	bl	13604 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    d488:	4630      	mov	r0, r6
    d48a:	f006 f8dd 	bl	13648 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d48e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    d490:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d492:	f103 0650 	add.w	r6, r3, #80	; 0x50
    d496:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    d49a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d49e:	2101      	movs	r1, #1
    d4a0:	f000 0007 	and.w	r0, r0, #7
    d4a4:	f005 fefd 	bl	132a2 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d4a8:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    d4aa:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    d4ac:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d4b0:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    d4b4:	2802      	cmp	r0, #2
    d4b6:	d03f      	beq.n	d538 <event_slave+0x1ac>
		return 40;
    d4b8:	2804      	cmp	r0, #4
    d4ba:	bf0c      	ite	eq
    d4bc:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    d4c0:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    d4c2:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    d4c4:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    d4c6:	f005 feee 	bl	132a6 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    d4ca:	4430      	add	r0, r6
    d4cc:	f006 f87c 	bl	135c8 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d4d0:	f894 1020 	ldrb.w	r1, [r4, #32]
    d4d4:	3107      	adds	r1, #7
    d4d6:	463a      	mov	r2, r7
    d4d8:	b2c9      	uxtb	r1, r1
    d4da:	4620      	mov	r0, r4
    d4dc:	f7fe f9b0 	bl	b840 <preempt_calc>
    d4e0:	4603      	mov	r3, r0
    d4e2:	b358      	cbz	r0, d53c <event_slave+0x1b0>
		_radio.state = STATE_STOP;
    d4e4:	2304      	movs	r3, #4
    d4e6:	752b      	strb	r3, [r5, #20]
		radio_disable();
    d4e8:	f005 feee 	bl	132c8 <radio_disable>
	packet_tx_enqueue(2);
    d4ec:	2002      	movs	r0, #2
}
    d4ee:	b002      	add	sp, #8
    d4f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    d4f4:	f7fd bd08 	b.w	af08 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d4f8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    d4fa:	7fa6      	ldrb	r6, [r4, #30]
    d4fc:	fb01 6606 	mla	r6, r1, r6, r6
    d500:	7fe1      	ldrb	r1, [r4, #31]
    d502:	2025      	movs	r0, #37	; 0x25
    d504:	440e      	add	r6, r1
    d506:	fb96 f1f0 	sdiv	r1, r6, r0
    d50a:	fb00 6611 	mls	r6, r0, r1, r6
    d50e:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d510:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    d512:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d514:	5c51      	ldrb	r1, [r2, r1]
    d516:	f006 0607 	and.w	r6, r6, #7
    d51a:	fa41 f606 	asr.w	r6, r1, r6
    d51e:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    d520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d524:	d495      	bmi.n	d452 <event_slave+0xc6>
		chan_index = chan_next % chan_count;
    d526:	fbb0 f1f3 	udiv	r1, r0, r3
    d52a:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    d52e:	b2c9      	uxtb	r1, r1
    d530:	4610      	mov	r0, r2
    d532:	f7fc faff 	bl	9b34 <chan_sel_remap>
    d536:	e78c      	b.n	d452 <event_slave+0xc6>
		return 24;
    d538:	2318      	movs	r3, #24
    d53a:	e7c2      	b.n	d4c2 <event_slave+0x136>
		ticker_status =
    d53c:	4a0e      	ldr	r2, [pc, #56]	; (d578 <event_slave+0x1ec>)
    d53e:	4601      	mov	r1, r0
    d540:	f7fa fb58 	bl	7bf4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d544:	f030 0302 	bics.w	r3, r0, #2
    d548:	d0d0      	beq.n	d4ec <event_slave+0x160>
    d54a:	4a05      	ldr	r2, [pc, #20]	; (d560 <event_slave+0x1d4>)
    d54c:	4b05      	ldr	r3, [pc, #20]	; (d564 <event_slave+0x1d8>)
    d54e:	9201      	str	r2, [sp, #4]
    d550:	9200      	str	r2, [sp, #0]
    d552:	681c      	ldr	r4, [r3, #0]
    d554:	4904      	ldr	r1, [pc, #16]	; (d568 <event_slave+0x1dc>)
    d556:	4b05      	ldr	r3, [pc, #20]	; (d56c <event_slave+0x1e0>)
    d558:	4808      	ldr	r0, [pc, #32]	; (d57c <event_slave+0x1f0>)
    d55a:	e729      	b.n	d3b0 <event_slave+0x24>
    d55c:	200008f0 	.word	0x200008f0
    d560:	000159e9 	.word	0x000159e9
    d564:	20003ad4 	.word	0x20003ad4
    d568:	00016791 	.word	0x00016791
    d56c:	000181c9 	.word	0x000181c9
    d570:	0001844c 	.word	0x0001844c
    d574:	000184ff 	.word	0x000184ff
    d578:	0000ac85 	.word	0x0000ac85
    d57c:	000182f1 	.word	0x000182f1

0000d580 <prepare_pdu_data_tx>:
	    conn->empty ||
    d580:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    d584:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    d588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d58a:	4604      	mov	r4, r0
    d58c:	460e      	mov	r6, r1
	if (/* empty packet */
    d58e:	d109      	bne.n	d5a4 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    d590:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    d594:	b131      	cbz	r1, d5a4 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    d596:	f01c 0f08 	tst.w	ip, #8
    d59a:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    d59e:	d022      	beq.n	d5e6 <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    d5a0:	4571      	cmp	r1, lr
    d5a2:	d020      	beq.n	d5e6 <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    d5a4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d5a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d5ac:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    d5b0:	f005 fedc 	bl	1336c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d5b4:	7803      	ldrb	r3, [r0, #0]
    d5b6:	2201      	movs	r2, #1
    d5b8:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    d5bc:	2200      	movs	r2, #0
    d5be:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    d5c0:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d5c4:	7003      	strb	r3, [r0, #0]
    d5c6:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    d5c8:	b152      	cbz	r2, d5e0 <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    d5ca:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    d5ce:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    d5d0:	7803      	ldrb	r3, [r0, #0]
    d5d2:	f36f 1347 	bfc	r3, #5, #3
    d5d6:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    d5d8:	2300      	movs	r3, #0
    d5da:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    d5dc:	6030      	str	r0, [r6, #0]
    d5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    d5e0:	f362 1304 	bfi	r3, r2, #4, #1
    d5e4:	e7f3      	b.n	d5ce <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    d5e6:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    d5ea:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    d5ee:	1d0d      	adds	r5, r1, #4
    d5f0:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    d5f2:	b913      	cbnz	r3, d5fa <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    d5f4:	7843      	ldrb	r3, [r0, #1]
    d5f6:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    d5fa:	b122      	cbz	r2, d606 <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d5fc:	5cab      	ldrb	r3, [r5, r2]
    d5fe:	2701      	movs	r7, #1
    d600:	f367 0301 	bfi	r3, r7, #0, #2
    d604:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    d606:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    d60a:	1abf      	subs	r7, r7, r2
    d60c:	b2ff      	uxtb	r7, r7
    d60e:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    d610:	5cab      	ldrb	r3, [r5, r2]
    d612:	f36f 1304 	bfc	r3, #4, #1
    d616:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    d618:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    d61c:	f003 0307 	and.w	r3, r3, #7
    d620:	2b02      	cmp	r3, #2
    d622:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    d624:	bf15      	itete	ne
    d626:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    d628:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    d62a:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    d62c:	3b0b      	subeq	r3, #11
    d62e:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    d630:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    d634:	bf18      	it	ne
    d636:	3b04      	subne	r3, #4
    d638:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    d63c:	bf18      	it	ne
    d63e:	b29b      	uxthne	r3, r3
    d640:	4563      	cmp	r3, ip
    d642:	bf28      	it	cs
    d644:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    d646:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    d648:	bf81      	itttt	hi
    d64a:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    d64c:	5cab      	ldrbhi	r3, [r5, r2]
    d64e:	f043 0310 	orrhi.w	r3, r3, #16
    d652:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    d654:	680b      	ldr	r3, [r1, #0]
    d656:	b11b      	cbz	r3, d660 <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    d658:	5cab      	ldrb	r3, [r5, r2]
    d65a:	f043 0310 	orr.w	r3, r3, #16
    d65e:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    d660:	f1be 0f00 	cmp.w	lr, #0
    d664:	d1b4      	bne.n	d5d0 <prepare_pdu_data_tx+0x50>
    d666:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    d66a:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    d66c:	bf1c      	itt	ne
    d66e:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    d672:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    d676:	e7ab      	b.n	d5d0 <prepare_pdu_data_tx+0x50>

0000d678 <event_master>:
{
    d678:	b5f0      	push	{r4, r5, r6, r7, lr}
    d67a:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    d67c:	4b57      	ldr	r3, [pc, #348]	; (d7dc <event_master+0x164>)
    d67e:	7cd9      	ldrb	r1, [r3, #19]
{
    d680:	b085      	sub	sp, #20
    d682:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    d684:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    d688:	461d      	mov	r5, r3
    d68a:	b171      	cbz	r1, d6aa <event_master+0x32>
    d68c:	4a54      	ldr	r2, [pc, #336]	; (d7e0 <event_master+0x168>)
    d68e:	4b55      	ldr	r3, [pc, #340]	; (d7e4 <event_master+0x16c>)
    d690:	9201      	str	r2, [sp, #4]
    d692:	9200      	str	r2, [sp, #0]
    d694:	681c      	ldr	r4, [r3, #0]
    d696:	4954      	ldr	r1, [pc, #336]	; (d7e8 <event_master+0x170>)
    d698:	4b54      	ldr	r3, [pc, #336]	; (d7ec <event_master+0x174>)
    d69a:	4855      	ldr	r0, [pc, #340]	; (d7f0 <event_master+0x178>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    d69c:	47a0      	blx	r4
    d69e:	4040      	eors	r0, r0
    d6a0:	f380 8811 	msr	BASEPRI, r0
    d6a4:	f04f 0004 	mov.w	r0, #4
    d6a8:	df02      	svc	2
    d6aa:	7c1b      	ldrb	r3, [r3, #16]
    d6ac:	8c21      	ldrh	r1, [r4, #32]
    d6ae:	b2db      	uxtb	r3, r3
    d6b0:	3107      	adds	r1, #7
    d6b2:	428b      	cmp	r3, r1
    d6b4:	d008      	beq.n	d6c8 <event_master+0x50>
    d6b6:	4a4a      	ldr	r2, [pc, #296]	; (d7e0 <event_master+0x168>)
    d6b8:	4b4a      	ldr	r3, [pc, #296]	; (d7e4 <event_master+0x16c>)
    d6ba:	9201      	str	r2, [sp, #4]
    d6bc:	9200      	str	r2, [sp, #0]
    d6be:	681c      	ldr	r4, [r3, #0]
    d6c0:	4949      	ldr	r1, [pc, #292]	; (d7e8 <event_master+0x170>)
    d6c2:	4b4a      	ldr	r3, [pc, #296]	; (d7ec <event_master+0x174>)
    d6c4:	484b      	ldr	r0, [pc, #300]	; (d7f4 <event_master+0x17c>)
    d6c6:	e7e9      	b.n	d69c <event_master+0x24>
	_radio.packet_counter = 0;
    d6c8:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    d6cc:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    d6d0:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    d6d2:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    d6d4:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    d6d6:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    d6d8:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    d6da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    d6dc:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    d6e0:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    d6e2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    d6e4:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    d6e6:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    d6e8:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    d6ea:	f7fd fc0d 	bl	af08 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    d6ee:	a903      	add	r1, sp, #12
    d6f0:	4620      	mov	r0, r4
    d6f2:	f7ff ff45 	bl	d580 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    d6f6:	9903      	ldr	r1, [sp, #12]
    d6f8:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    d6fc:	780b      	ldrb	r3, [r1, #0]
    d6fe:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    d702:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d706:	f362 0382 	bfi	r3, r2, #2, #1
    d70a:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    d70c:	4620      	mov	r0, r4
    d70e:	f7ff fe1f 	bl	d350 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    d712:	2096      	movs	r0, #150	; 0x96
    d714:	f005 fece 	bl	134b4 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    d718:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d71c:	f000 0007 	and.w	r0, r0, #7
    d720:	f005 fe2c 	bl	1337c <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    d724:	9903      	ldr	r1, [sp, #12]
    d726:	4620      	mov	r0, r4
    d728:	f7fc fdcc 	bl	a2c4 <tx_packet_set>
	if (conn->data_chan_sel) {
    d72c:	7f63      	ldrb	r3, [r4, #29]
    d72e:	f013 0f40 	tst.w	r3, #64	; 0x40
    d732:	f104 0217 	add.w	r2, r4, #23
    d736:	d021      	beq.n	d77c <event_master+0x104>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d738:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    d73a:	8be1      	ldrh	r1, [r4, #30]
    d73c:	3801      	subs	r0, #1
    d73e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d742:	b280      	uxth	r0, r0
    d744:	f7fe fbe6 	bl	bf14 <chan_sel_2>
	chan_set(data_chan_use);
    d748:	f7fd fcc8 	bl	b0dc <chan_set>
		remainder_us = radio_tmr_start(1,
    d74c:	68ea      	ldr	r2, [r5, #12]
    d74e:	f107 0109 	add.w	r1, r7, #9
    d752:	2001      	movs	r0, #1
    d754:	f005 feba 	bl	134cc <radio_tmr_start>
		radio_tmr_end_capture();
    d758:	f005 ff88 	bl	1366c <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d75c:	f894 1020 	ldrb.w	r1, [r4, #32]
    d760:	3107      	adds	r1, #7
    d762:	463a      	mov	r2, r7
    d764:	b2c9      	uxtb	r1, r1
    d766:	4620      	mov	r0, r4
    d768:	f7fe f86a 	bl	b840 <preempt_calc>
	if (0 !=
    d76c:	4603      	mov	r3, r0
    d76e:	b328      	cbz	r0, d7bc <event_master+0x144>
		_radio.state = STATE_STOP;
    d770:	2304      	movs	r3, #4
    d772:	752b      	strb	r3, [r5, #20]
		radio_disable();
    d774:	f005 fda8 	bl	132c8 <radio_disable>
}
    d778:	b005      	add	sp, #20
    d77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d77c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    d77e:	7fa6      	ldrb	r6, [r4, #30]
    d780:	fb01 6606 	mla	r6, r1, r6, r6
    d784:	7fe1      	ldrb	r1, [r4, #31]
    d786:	2025      	movs	r0, #37	; 0x25
    d788:	440e      	add	r6, r1
    d78a:	fb96 f1f0 	sdiv	r1, r6, r0
    d78e:	fb00 6611 	mls	r6, r0, r1, r6
    d792:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d794:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    d796:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d798:	5c51      	ldrb	r1, [r2, r1]
    d79a:	f006 0607 	and.w	r6, r6, #7
    d79e:	fa41 f606 	asr.w	r6, r1, r6
    d7a2:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    d7a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d7a8:	d4ce      	bmi.n	d748 <event_master+0xd0>
		chan_index = chan_next % chan_count;
    d7aa:	fbb0 f1f3 	udiv	r1, r0, r3
    d7ae:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    d7b2:	b2c9      	uxtb	r1, r1
    d7b4:	4610      	mov	r0, r2
    d7b6:	f7fc f9bd 	bl	9b34 <chan_sel_remap>
    d7ba:	e7c5      	b.n	d748 <event_master+0xd0>
		ticker_status =
    d7bc:	4a0e      	ldr	r2, [pc, #56]	; (d7f8 <event_master+0x180>)
    d7be:	4601      	mov	r1, r0
    d7c0:	f7fa fa18 	bl	7bf4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d7c4:	f030 0302 	bics.w	r3, r0, #2
    d7c8:	d0d6      	beq.n	d778 <event_master+0x100>
    d7ca:	4a05      	ldr	r2, [pc, #20]	; (d7e0 <event_master+0x168>)
    d7cc:	4b05      	ldr	r3, [pc, #20]	; (d7e4 <event_master+0x16c>)
    d7ce:	9201      	str	r2, [sp, #4]
    d7d0:	9200      	str	r2, [sp, #0]
    d7d2:	681c      	ldr	r4, [r3, #0]
    d7d4:	4904      	ldr	r1, [pc, #16]	; (d7e8 <event_master+0x170>)
    d7d6:	4b05      	ldr	r3, [pc, #20]	; (d7ec <event_master+0x174>)
    d7d8:	4808      	ldr	r0, [pc, #32]	; (d7fc <event_master+0x184>)
    d7da:	e75f      	b.n	d69c <event_master+0x24>
    d7dc:	200008f0 	.word	0x200008f0
    d7e0:	000159e9 	.word	0x000159e9
    d7e4:	20003ad4 	.word	0x20003ad4
    d7e8:	00016791 	.word	0x00016791
    d7ec:	000181d5 	.word	0x000181d5
    d7f0:	0001844c 	.word	0x0001844c
    d7f4:	000184ff 	.word	0x000184ff
    d7f8:	0000ac85 	.word	0x0000ac85
    d7fc:	000182f1 	.word	0x000182f1

0000d800 <isr_rx_conn_pkt_ctrl>:
{
    d800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    d804:	7ac7      	ldrb	r7, [r0, #11]
{
    d806:	4604      	mov	r4, r0
    d808:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    d80a:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    d80e:	2f19      	cmp	r7, #25
    d810:	f201 80ef 	bhi.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
    d814:	e8df f017 	tbh	[pc, r7, lsl #1]
    d818:	0082001a 	.word	0x0082001a
    d81c:	00cf00c0 	.word	0x00cf00c0
    d820:	012500fd 	.word	0x012500fd
    d824:	059c0157 	.word	0x059c0157
    d828:	01c60193 	.word	0x01c60193
    d82c:	021e01f4 	.word	0x021e01f4
    d830:	02b8024f 	.word	0x02b8024f
    d834:	02d001a9 	.word	0x02d001a9
    d838:	04a70424 	.word	0x04a70424
    d83c:	05800566 	.word	0x05800566
    d840:	06530653 	.word	0x06530653
    d844:	07f7072a 	.word	0x07f7072a
    d848:	08ba082e 	.word	0x08ba082e
		if (!_radio.conn_curr->role ||
    d84c:	4ecc      	ldr	r6, [pc, #816]	; (db80 <isr_rx_conn_pkt_ctrl+0x380>)
    d84e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d852:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d856:	2b00      	cmp	r3, #0
    d858:	f281 80cb 	bge.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    d85c:	7a41      	ldrb	r1, [r0, #9]
    d85e:	2000      	movs	r0, #0
    d860:	f7fc f93c 	bl	9adc <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d864:	2800      	cmp	r0, #0
    d866:	f001 80c4 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d86a:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    d86e:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    d870:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d872:	041b      	lsls	r3, r3, #16
    d874:	f101 80d3 	bmi.w	ea1e <isr_rx_conn_pkt_ctrl+0x121e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d878:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d87c:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    d880:	429a      	cmp	r2, r3
    d882:	d008      	beq.n	d896 <isr_rx_conn_pkt_ctrl+0x96>
    d884:	4abf      	ldr	r2, [pc, #764]	; (db84 <isr_rx_conn_pkt_ctrl+0x384>)
    d886:	4bc0      	ldr	r3, [pc, #768]	; (db88 <isr_rx_conn_pkt_ctrl+0x388>)
    d888:	9201      	str	r2, [sp, #4]
    d88a:	9200      	str	r2, [sp, #0]
    d88c:	681c      	ldr	r4, [r3, #0]
    d88e:	4bbf      	ldr	r3, [pc, #764]	; (db8c <isr_rx_conn_pkt_ctrl+0x38c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d890:	49bf      	ldr	r1, [pc, #764]	; (db90 <isr_rx_conn_pkt_ctrl+0x390>)
    d892:	48c0      	ldr	r0, [pc, #768]	; (db94 <isr_rx_conn_pkt_ctrl+0x394>)
    d894:	e0fa      	b.n	da8c <isr_rx_conn_pkt_ctrl+0x28c>
	if (_radio.conn_upd == 0) {
    d896:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    d89a:	b90a      	cbnz	r2, d8a0 <isr_rx_conn_pkt_ctrl+0xa0>
		_radio.conn_upd = conn;
    d89c:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    d8a0:	7b22      	ldrb	r2, [r4, #12]
    d8a2:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    d8a6:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    d8aa:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d8ae:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    d8b0:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    d8b4:	7c20      	ldrb	r0, [r4, #16]
    d8b6:	7be2      	ldrb	r2, [r4, #15]
    d8b8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    d8bc:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    d8c0:	7ca0      	ldrb	r0, [r4, #18]
    d8c2:	7c62      	ldrb	r2, [r4, #17]
    d8c4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    d8c8:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d8cc:	7ce2      	ldrb	r2, [r4, #19]
    d8ce:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    d8d0:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d8d4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    d8d8:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    d8dc:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    d8e0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    d8e4:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    d8e8:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    d8ea:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    d8ee:	2201      	movs	r2, #1
    d8f0:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d8f4:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d8f8:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d8fc:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d900:	4293      	cmp	r3, r2
    d902:	d007      	beq.n	d914 <isr_rx_conn_pkt_ctrl+0x114>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    d904:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d908:	f003 0307 	and.w	r3, r3, #7
    d90c:	2b04      	cmp	r3, #4
    d90e:	d101      	bne.n	d914 <isr_rx_conn_pkt_ctrl+0x114>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d910:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    d914:	2000      	movs	r0, #0
    d916:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    d91a:	e03a      	b.n	d992 <isr_rx_conn_pkt_ctrl+0x192>
		if (!_radio.conn_curr->role ||
    d91c:	4b98      	ldr	r3, [pc, #608]	; (db80 <isr_rx_conn_pkt_ctrl+0x380>)
    d91e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d922:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d926:	2b00      	cmp	r3, #0
    d928:	f281 8063 	bge.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    d92c:	7a41      	ldrb	r1, [r0, #9]
    d92e:	2001      	movs	r0, #1
    d930:	f7fc f8d4 	bl	9adc <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d934:	2800      	cmp	r0, #0
    d936:	f001 805c 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d93a:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    d93e:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    d940:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d942:	041f      	lsls	r7, r3, #16
    d944:	f101 806b 	bmi.w	ea1e <isr_rx_conn_pkt_ctrl+0x121e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d948:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    d94c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    d950:	429a      	cmp	r2, r3
    d952:	d006      	beq.n	d962 <isr_rx_conn_pkt_ctrl+0x162>
    d954:	4a8b      	ldr	r2, [pc, #556]	; (db84 <isr_rx_conn_pkt_ctrl+0x384>)
    d956:	4b8c      	ldr	r3, [pc, #560]	; (db88 <isr_rx_conn_pkt_ctrl+0x388>)
    d958:	9201      	str	r2, [sp, #4]
    d95a:	9200      	str	r2, [sp, #0]
    d95c:	681c      	ldr	r4, [r3, #0]
    d95e:	4b8e      	ldr	r3, [pc, #568]	; (db98 <isr_rx_conn_pkt_ctrl+0x398>)
    d960:	e796      	b.n	d890 <isr_rx_conn_pkt_ctrl+0x90>
	memcpy(&conn->llcp.chan_map.chm[0],
    d962:	2205      	movs	r2, #5
    d964:	f104 010c 	add.w	r1, r4, #12
    d968:	f105 0079 	add.w	r0, r5, #121	; 0x79
    d96c:	f7f4 f958 	bl	1c20 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    d970:	7c63      	ldrb	r3, [r4, #17]
    d972:	7ca2      	ldrb	r2, [r4, #18]
    d974:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    d978:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    d97c:	2302      	movs	r3, #2
    d97e:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d982:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    d986:	2000      	movs	r0, #0
	conn->llcp_ack--;
    d988:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    d98a:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    d98e:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    d992:	b003      	add	sp, #12
    d994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    d998:	7a41      	ldrb	r1, [r0, #9]
    d99a:	2002      	movs	r0, #2
    d99c:	f7fc f89e 	bl	9adc <pdu_len_cmp>
    d9a0:	2800      	cmp	r0, #0
    d9a2:	f001 8026 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		_radio.conn_curr->llcp_terminate.reason_peer =
    d9a6:	4b76      	ldr	r3, [pc, #472]	; (db80 <isr_rx_conn_pkt_ctrl+0x380>)
    d9a8:	7b22      	ldrb	r2, [r4, #12]
    d9aa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d9ae:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    d9b2:	2000      	movs	r0, #0
	return nack;
    d9b4:	e7ed      	b.n	d992 <isr_rx_conn_pkt_ctrl+0x192>
		if (!_radio.conn_curr->role ||
    d9b6:	4e72      	ldr	r6, [pc, #456]	; (db80 <isr_rx_conn_pkt_ctrl+0x380>)
    d9b8:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    d9bc:	f998 301d 	ldrsb.w	r3, [r8, #29]
    d9c0:	2b00      	cmp	r3, #0
    d9c2:	f281 8016 	bge.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    d9c6:	7a41      	ldrb	r1, [r0, #9]
    d9c8:	2003      	movs	r0, #3
    d9ca:	f7fc f887 	bl	9adc <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d9ce:	2800      	cmp	r0, #0
    d9d0:	f001 800f 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    d9d4:	2208      	movs	r2, #8
    d9d6:	f104 0116 	add.w	r1, r4, #22
    d9da:	f108 0094 	add.w	r0, r8, #148	; 0x94
    d9de:	f7f4 f91f 	bl	1c20 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    d9e2:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    d9e6:	2204      	movs	r2, #4
    d9e8:	f104 011e 	add.w	r1, r4, #30
    d9ec:	f500 7089 	add.w	r0, r0, #274	; 0x112
    d9f0:	f7f4 f916 	bl	1c20 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d9f4:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    d9f8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d9fc:	f042 0204 	orr.w	r2, r2, #4
    da00:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    da04:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    da08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    da0c:	2301      	movs	r3, #1
    da0e:	702b      	strb	r3, [r5, #0]
    da10:	e7cf      	b.n	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		if (_radio.conn_curr->role ||
    da12:	4d5b      	ldr	r5, [pc, #364]	; (db80 <isr_rx_conn_pkt_ctrl+0x380>)
    da14:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    da18:	f996 301d 	ldrsb.w	r3, [r6, #29]
    da1c:	2b00      	cmp	r3, #0
    da1e:	f2c0 87e8 	blt.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    da22:	7a41      	ldrb	r1, [r0, #9]
    da24:	2004      	movs	r0, #4
    da26:	f7fc f859 	bl	9adc <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    da2a:	2800      	cmp	r0, #0
    da2c:	f000 87e1 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    da30:	2208      	movs	r2, #8
    da32:	f104 010c 	add.w	r1, r4, #12
    da36:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    da3a:	f7f4 f8f1 	bl	1c20 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    da3e:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    da42:	2204      	movs	r2, #4
    da44:	f104 0114 	add.w	r1, r4, #20
    da48:	f500 708b 	add.w	r0, r0, #278	; 0x116
    da4c:	f7f4 f8e8 	bl	1c20 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    da50:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    da54:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    da58:	f043 0304 	orr.w	r3, r3, #4
    da5c:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    da60:	e7a7      	b.n	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    da62:	4b47      	ldr	r3, [pc, #284]	; (db80 <isr_rx_conn_pkt_ctrl+0x380>)
    da64:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    da68:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    da6c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    da70:	42b3      	cmp	r3, r6
    da72:	d012      	beq.n	da9a <isr_rx_conn_pkt_ctrl+0x29a>
    da74:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    da78:	2b03      	cmp	r3, #3
    da7a:	d00e      	beq.n	da9a <isr_rx_conn_pkt_ctrl+0x29a>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    da7c:	4a41      	ldr	r2, [pc, #260]	; (db84 <isr_rx_conn_pkt_ctrl+0x384>)
    da7e:	4b42      	ldr	r3, [pc, #264]	; (db88 <isr_rx_conn_pkt_ctrl+0x388>)
    da80:	9201      	str	r2, [sp, #4]
    da82:	9200      	str	r2, [sp, #0]
    da84:	681c      	ldr	r4, [r3, #0]
    da86:	4942      	ldr	r1, [pc, #264]	; (db90 <isr_rx_conn_pkt_ctrl+0x390>)
    da88:	4b44      	ldr	r3, [pc, #272]	; (db9c <isr_rx_conn_pkt_ctrl+0x39c>)
    da8a:	4845      	ldr	r0, [pc, #276]	; (dba0 <isr_rx_conn_pkt_ctrl+0x3a0>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    da8c:	47a0      	blx	r4
    da8e:	4040      	eors	r0, r0
    da90:	f380 8811 	msr	BASEPRI, r0
    da94:	f04f 0004 	mov.w	r0, #4
    da98:	df02      	svc	2
		if (_radio.conn_curr->role ||
    da9a:	f995 301d 	ldrsb.w	r3, [r5, #29]
    da9e:	2b00      	cmp	r3, #0
    daa0:	f2c0 87a7 	blt.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    daa4:	7a61      	ldrb	r1, [r4, #9]
    daa6:	2005      	movs	r0, #5
    daa8:	f7fc f818 	bl	9adc <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    daac:	2800      	cmp	r0, #0
    daae:	f000 87a0 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    dab2:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    dab4:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    dab6:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    dab8:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    dabc:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    dac0:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    dac4:	e765      	b.n	d992 <isr_rx_conn_pkt_ctrl+0x192>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    dac6:	7a41      	ldrb	r1, [r0, #9]
    dac8:	2006      	movs	r0, #6
    daca:	f7fc f807 	bl	9adc <pdu_len_cmp>
    dace:	2800      	cmp	r0, #0
    dad0:	f000 878f 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		if (_radio.role == ROLE_SLAVE) {
    dad4:	4b2a      	ldr	r3, [pc, #168]	; (db80 <isr_rx_conn_pkt_ctrl+0x380>)
    dad6:	7cda      	ldrb	r2, [r3, #19]
    dad8:	2a03      	cmp	r2, #3
    dada:	4619      	mov	r1, r3
    dadc:	d124      	bne.n	db28 <isr_rx_conn_pkt_ctrl+0x328>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    dade:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    dae2:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    dae6:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    daea:	4290      	cmp	r0, r2
    daec:	d003      	beq.n	daf6 <isr_rx_conn_pkt_ctrl+0x2f6>
    daee:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    daf2:	2803      	cmp	r0, #3
    daf4:	d1c2      	bne.n	da7c <isr_rx_conn_pkt_ctrl+0x27c>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    daf6:	2000      	movs	r0, #0
    daf8:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    dafc:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    dafe:	2003      	movs	r0, #3
    db00:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    db04:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    db08:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    db0c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    db10:	065e      	lsls	r6, r3, #25
    db12:	d505      	bpl.n	db20 <isr_rx_conn_pkt_ctrl+0x320>
			_radio.conn_curr->refresh = 0;
    db14:	f36f 1386 	bfc	r3, #6, #1
    db18:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    db1c:	2309      	movs	r3, #9
    db1e:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    db20:	2301      	movs	r3, #1
    db22:	702b      	strb	r3, [r5, #0]
				break;
    db24:	f000 bcc7 	b.w	e4b6 <isr_rx_conn_pkt_ctrl+0xcb6>
			_radio.conn_curr->pause_rx = 0;
    db28:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    db2c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    db30:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    db34:	f36f 03c3 	bfc	r3, #3, #1
    db38:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    db3c:	e7e4      	b.n	db08 <isr_rx_conn_pkt_ctrl+0x308>
		if (!_radio.conn_curr->role ||
    db3e:	4b10      	ldr	r3, [pc, #64]	; (db80 <isr_rx_conn_pkt_ctrl+0x380>)
    db40:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    db44:	f995 301d 	ldrsb.w	r3, [r5, #29]
    db48:	2b00      	cmp	r3, #0
    db4a:	f280 8752 	bge.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    db4e:	7a41      	ldrb	r1, [r0, #9]
    db50:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    db52:	f7fb ffc3 	bl	9adc <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    db56:	2800      	cmp	r0, #0
    db58:	f000 874b 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    db5c:	4631      	mov	r1, r6
    db5e:	4628      	mov	r0, r5
}
    db60:	b003      	add	sp, #12
    db62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    db66:	f7fe ba61 	b.w	c02c <feature_rsp_send>
		if (_radio.conn_curr->role ||
    db6a:	4b05      	ldr	r3, [pc, #20]	; (db80 <isr_rx_conn_pkt_ctrl+0x380>)
    db6c:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    db70:	f995 301d 	ldrsb.w	r3, [r5, #29]
    db74:	2b00      	cmp	r3, #0
    db76:	f2c0 873c 	blt.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    db7a:	7a41      	ldrb	r1, [r0, #9]
    db7c:	200e      	movs	r0, #14
    db7e:	e7e8      	b.n	db52 <isr_rx_conn_pkt_ctrl+0x352>
    db80:	200008f0 	.word	0x200008f0
    db84:	000159e9 	.word	0x000159e9
    db88:	20003ad4 	.word	0x20003ad4
    db8c:	00018234 	.word	0x00018234
    db90:	00016791 	.word	0x00016791
    db94:	000186fc 	.word	0x000186fc
    db98:	00018240 	.word	0x00018240
    db9c:	00017e74 	.word	0x00017e74
    dba0:	0001873e 	.word	0x0001873e
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    dba4:	7a41      	ldrb	r1, [r0, #9]
    dba6:	2009      	movs	r0, #9
    dba8:	f7fb ff98 	bl	9adc <pdu_len_cmp>
    dbac:	2800      	cmp	r0, #0
    dbae:	f000 8720 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    dbb2:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    dbb4:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    dbb6:	48b2      	ldr	r0, [pc, #712]	; (de80 <isr_rx_conn_pkt_ctrl+0x680>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    dbb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    dbbc:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    dbc0:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    dbc4:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    dbc8:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    dbcc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    dbd0:	7ba1      	ldrb	r1, [r4, #14]
    dbd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    dbd6:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    dbda:	f3c1 0110 	ubfx	r1, r1, #0, #17
    dbde:	400b      	ands	r3, r1
    dbe0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    dbe4:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    dbe8:	f043 0320 	orr.w	r3, r3, #32
    dbec:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    dbf0:	2301      	movs	r3, #1
    dbf2:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    dbf4:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    dbf8:	2000      	movs	r0, #0
    dbfa:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    dbfe:	e6c8      	b.n	d992 <isr_rx_conn_pkt_ctrl+0x192>
		if (!_radio.conn_curr->role ||
    dc00:	4e9f      	ldr	r6, [pc, #636]	; (de80 <isr_rx_conn_pkt_ctrl+0x680>)
    dc02:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    dc06:	f995 301d 	ldrsb.w	r3, [r5, #29]
    dc0a:	2b00      	cmp	r3, #0
    dc0c:	f280 86f1 	bge.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    dc10:	7a41      	ldrb	r1, [r0, #9]
    dc12:	200a      	movs	r0, #10
    dc14:	f7fb ff62 	bl	9adc <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    dc18:	2800      	cmp	r0, #0
    dc1a:	f000 86ea 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dc1e:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    dc22:	f7f9 f842 	bl	6caa <mem_acquire>
		if (!node_tx) {
    dc26:	4601      	mov	r1, r0
    dc28:	b908      	cbnz	r0, dc2e <isr_rx_conn_pkt_ctrl+0x42e>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    dc2a:	2001      	movs	r0, #1
    dc2c:	e6b1      	b.n	d992 <isr_rx_conn_pkt_ctrl+0x192>
		conn->refresh = 1;
    dc2e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    dc32:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    dc36:	f36f 1304 	bfc	r3, #4, #1
    dc3a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc3e:	7903      	ldrb	r3, [r0, #4]
    dc40:	f043 0303 	orr.w	r3, r3, #3
    dc44:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    dc46:	2301      	movs	r3, #1
    dc48:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    dc4a:	230b      	movs	r3, #11
    dc4c:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    dc4e:	4628      	mov	r0, r5
    dc50:	f000 bce7 	b.w	e622 <isr_rx_conn_pkt_ctrl+0xe22>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    dc54:	7a41      	ldrb	r1, [r0, #9]
    dc56:	200b      	movs	r0, #11
    dc58:	f7fb ff40 	bl	9adc <pdu_len_cmp>
    dc5c:	2800      	cmp	r0, #0
    dc5e:	f000 86c8 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    dc62:	4887      	ldr	r0, [pc, #540]	; (de80 <isr_rx_conn_pkt_ctrl+0x680>)
    dc64:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    dc68:	f994 301d 	ldrsb.w	r3, [r4, #29]
    dc6c:	2b00      	cmp	r3, #0
    dc6e:	db1b      	blt.n	dca8 <isr_rx_conn_pkt_ctrl+0x4a8>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dc70:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    dc74:	f7f9 f819 	bl	6caa <mem_acquire>
		if (!node_tx) {
    dc78:	4601      	mov	r1, r0
    dc7a:	2800      	cmp	r0, #0
    dc7c:	d0d5      	beq.n	dc2a <isr_rx_conn_pkt_ctrl+0x42a>
		conn->enc_tx = 0;
    dc7e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    dc82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    dc86:	f043 0304 	orr.w	r3, r3, #4
    dc8a:	f36f 1304 	bfc	r3, #4, #1
    dc8e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc92:	7903      	ldrb	r3, [r0, #4]
    dc94:	f043 0303 	orr.w	r3, r3, #3
    dc98:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    dc9a:	2301      	movs	r3, #1
    dc9c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    dc9e:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    dca0:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    dca2:	4620      	mov	r0, r4
    dca4:	f000 bcbd 	b.w	e622 <isr_rx_conn_pkt_ctrl+0xe22>
		conn->enc_tx = 0;
    dca8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    dcac:	f36f 1345 	bfc	r3, #5, #1
    dcb0:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    dcb4:	e67d      	b.n	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    dcb6:	7a41      	ldrb	r1, [r0, #9]
    dcb8:	200c      	movs	r0, #12
    dcba:	f7fb ff0f 	bl	9adc <pdu_len_cmp>
    dcbe:	2800      	cmp	r0, #0
    dcc0:	f000 8697 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    dcc4:	486e      	ldr	r0, [pc, #440]	; (de80 <isr_rx_conn_pkt_ctrl+0x680>)
    dcc6:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    dcca:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    dcce:	f013 0701 	ands.w	r7, r3, #1
    dcd2:	d150      	bne.n	dd76 <isr_rx_conn_pkt_ctrl+0x576>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dcd4:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    dcd8:	f7f8 ffe7 	bl	6caa <mem_acquire>
		if (!node_tx) {
    dcdc:	4601      	mov	r1, r0
    dcde:	2800      	cmp	r0, #0
    dce0:	d0a3      	beq.n	dc2a <isr_rx_conn_pkt_ctrl+0x42a>
		conn->llcp_version.tx = 1;
    dce2:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    dce6:	f043 0301 	orr.w	r3, r3, #1
    dcea:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dcee:	7903      	ldrb	r3, [r0, #4]
    dcf0:	f043 0303 	orr.w	r3, r3, #3
    dcf4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    dcf6:	2306      	movs	r3, #6
    dcf8:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    dcfa:	230c      	movs	r3, #12
    dcfc:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    dcfe:	2309      	movs	r3, #9
    dd00:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    dd02:	f06f 030e 	mvn.w	r3, #14
    dd06:	7243      	strb	r3, [r0, #9]
    dd08:	2305      	movs	r3, #5
    dd0a:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    dd0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dd10:	72c3      	strb	r3, [r0, #11]
    dd12:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    dd14:	4630      	mov	r0, r6
    dd16:	f7fe f96f 	bl	bff8 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    dd1a:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    dd1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dd22:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    dd26:	f005 fb21 	bl	1336c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    dd2a:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    dd2c:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    dd2e:	2201      	movs	r2, #1
    dd30:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    dd34:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    dd38:	7003      	strb	r3, [r0, #0]
    dd3a:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    dd3c:	b1c2      	cbz	r2, dd70 <isr_rx_conn_pkt_ctrl+0x570>
		pdu_data_tx->md = 1;
    dd3e:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    dd42:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    dd44:	7b23      	ldrb	r3, [r4, #12]
    dd46:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    dd4a:	7ba2      	ldrb	r2, [r4, #14]
    dd4c:	7b63      	ldrb	r3, [r4, #13]
    dd4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd52:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    dd56:	7be3      	ldrb	r3, [r4, #15]
    dd58:	7c22      	ldrb	r2, [r4, #16]
    dd5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd5e:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    dd62:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    dd66:	f043 0302 	orr.w	r3, r3, #2
    dd6a:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    dd6e:	e620      	b.n	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		pdu_data_tx->md = 0;
    dd70:	f362 1304 	bfi	r3, r2, #4, #1
    dd74:	e7e5      	b.n	dd42 <isr_rx_conn_pkt_ctrl+0x542>
	} else if (!conn->llcp_version.rx) {
    dd76:	f013 0302 	ands.w	r3, r3, #2
    dd7a:	f47f ae1a 	bne.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		conn->procedure_expire = 0;
    dd7e:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    dd82:	2301      	movs	r3, #1
    dd84:	702b      	strb	r3, [r5, #0]
    dd86:	e7dd      	b.n	dd44 <isr_rx_conn_pkt_ctrl+0x544>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    dd88:	7a41      	ldrb	r1, [r0, #9]
    dd8a:	200d      	movs	r0, #13
    dd8c:	f7fb fea6 	bl	9adc <pdu_len_cmp>
    dd90:	2800      	cmp	r0, #0
    dd92:	f000 862e 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		_radio.conn_curr->pause_rx = 0;
    dd96:	4b3a      	ldr	r3, [pc, #232]	; (de80 <isr_rx_conn_pkt_ctrl+0x680>)
    dd98:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    dd9c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    dda0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    dda4:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    dda8:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    ddaa:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    ddae:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    ddb2:	2301      	movs	r3, #1
    ddb4:	702b      	strb	r3, [r5, #0]
    ddb6:	e5ec      	b.n	d992 <isr_rx_conn_pkt_ctrl+0x192>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    ddb8:	7a41      	ldrb	r1, [r0, #9]
    ddba:	200f      	movs	r0, #15
    ddbc:	f7fb fe8e 	bl	9adc <pdu_len_cmp>
    ddc0:	2800      	cmp	r0, #0
    ddc2:	f000 8616 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    ddc6:	4b2e      	ldr	r3, [pc, #184]	; (de80 <isr_rx_conn_pkt_ctrl+0x680>)
    ddc8:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    ddcc:	461a      	mov	r2, r3
    ddce:	b151      	cbz	r1, dde6 <isr_rx_conn_pkt_ctrl+0x5e6>
    ddd0:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    ddd4:	4281      	cmp	r1, r0
    ddd6:	d006      	beq.n	dde6 <isr_rx_conn_pkt_ctrl+0x5e6>
			nack = reject_ext_ind_send(_radio.conn_curr,
    ddd8:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    ddda:	210f      	movs	r1, #15
}
    dddc:	b003      	add	sp, #12
    ddde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    dde2:	f7fe b98d 	b.w	c100 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    dde6:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    ddea:	f990 301d 	ldrsb.w	r3, [r0, #29]
    ddee:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    ddf2:	2b00      	cmp	r3, #0
    ddf4:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    ddf8:	f2c0 80a7 	blt.w	df4a <isr_rx_conn_pkt_ctrl+0x74a>
			if ((conn->llcp_conn_param.req !=
    ddfc:	4299      	cmp	r1, r3
    ddfe:	d009      	beq.n	de14 <isr_rx_conn_pkt_ctrl+0x614>
			    ((conn->llcp_conn_param.state ==
    de00:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    de04:	f013 0307 	ands.w	r3, r3, #7
    de08:	d002      	beq.n	de10 <isr_rx_conn_pkt_ctrl+0x610>
			      LLCP_CPR_STATE_REQ) ||
    de0a:	3b04      	subs	r3, #4
    de0c:	2b01      	cmp	r3, #1
    de0e:	d801      	bhi.n	de14 <isr_rx_conn_pkt_ctrl+0x614>
				nack = reject_ext_ind_send(_radio.conn_curr,
    de10:	2223      	movs	r2, #35	; 0x23
    de12:	e7e2      	b.n	ddda <isr_rx_conn_pkt_ctrl+0x5da>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    de14:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    de18:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    de1c:	4299      	cmp	r1, r3
    de1e:	d003      	beq.n	de28 <isr_rx_conn_pkt_ctrl+0x628>
    de20:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    de24:	2b03      	cmp	r3, #3
    de26:	d105      	bne.n	de34 <isr_rx_conn_pkt_ctrl+0x634>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    de28:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    de2c:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    de30:	4299      	cmp	r1, r3
    de32:	d001      	beq.n	de38 <isr_rx_conn_pkt_ctrl+0x638>
				nack = reject_ext_ind_send(_radio.conn_curr,
    de34:	222a      	movs	r2, #42	; 0x2a
    de36:	e7d0      	b.n	ddda <isr_rx_conn_pkt_ctrl+0x5da>
				if ((cpr->interval_min < 6) ||
    de38:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    de3c:	4643      	mov	r3, r8
    de3e:	2b05      	cmp	r3, #5
    de40:	d91b      	bls.n	de7a <isr_rx_conn_pkt_ctrl+0x67a>
				    (cpr->interval_max > 3200) ||
    de42:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    de44:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    de48:	d817      	bhi.n	de7a <isr_rx_conn_pkt_ctrl+0x67a>
				    (cpr->interval_max > 3200) ||
    de4a:	45b8      	cmp	r8, r7
    de4c:	d815      	bhi.n	de7a <isr_rx_conn_pkt_ctrl+0x67a>
				    (cpr->latency > 499) ||
    de4e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    de52:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    de56:	d210      	bcs.n	de7a <isr_rx_conn_pkt_ctrl+0x67a>
				    (cpr->timeout < 10) ||
    de58:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    de5c:	f1ae 060a 	sub.w	r6, lr, #10
    de60:	b2b6      	uxth	r6, r6
    de62:	f640 4976 	movw	r9, #3190	; 0xc76
    de66:	454e      	cmp	r6, r9
    de68:	d807      	bhi.n	de7a <isr_rx_conn_pkt_ctrl+0x67a>
				     ((cpr->latency + 1) *
    de6a:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    de6e:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    de72:	da02      	bge.n	de7a <isr_rx_conn_pkt_ctrl+0x67a>
				    (cpr->preferred_periodicity >
    de74:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    de76:	428f      	cmp	r7, r1
    de78:	d204      	bcs.n	de84 <isr_rx_conn_pkt_ctrl+0x684>
				nack = reject_ext_ind_send(conn,
    de7a:	221e      	movs	r2, #30
    de7c:	e7ad      	b.n	ddda <isr_rx_conn_pkt_ctrl+0x5da>
    de7e:	bf00      	nop
    de80:	200008f0 	.word	0x200008f0
				conn->llcp_conn_param.interval = cpr->interval_min;
    de84:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    de88:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    de8c:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    de90:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    de94:	7da6      	ldrb	r6, [r4, #22]
    de96:	7d61      	ldrb	r1, [r4, #21]
    de98:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    de9c:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    dea0:	7e26      	ldrb	r6, [r4, #24]
    dea2:	7de1      	ldrb	r1, [r4, #23]
    dea4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dea8:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    deac:	7ea6      	ldrb	r6, [r4, #26]
    deae:	7e61      	ldrb	r1, [r4, #25]
    deb0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    deb4:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    deb8:	7f26      	ldrb	r6, [r4, #28]
    deba:	7ee1      	ldrb	r1, [r4, #27]
    debc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dec0:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    dec4:	7fa6      	ldrb	r6, [r4, #30]
    dec6:	7f61      	ldrb	r1, [r4, #29]
    dec8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    decc:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    ded0:	7fe1      	ldrb	r1, [r4, #31]
    ded2:	f894 6020 	ldrb.w	r6, [r4, #32]
    ded6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    deda:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    dede:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    dee2:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    dee6:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    deea:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    deee:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    def2:	6a41      	ldr	r1, [r0, #36]	; 0x24
    def4:	428c      	cmp	r4, r1
    def6:	d10f      	bne.n	df18 <isr_rx_conn_pkt_ctrl+0x718>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    def8:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    defa:	f240 41e2 	movw	r1, #1250	; 0x4e2
    defe:	4361      	muls	r1, r4
    df00:	f242 7410 	movw	r4, #10000	; 0x2710
    df04:	fb04 130e 	mla	r3, r4, lr, r1
    df08:	3b01      	subs	r3, #1
    df0a:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    df0e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    df10:	b29b      	uxth	r3, r3
    df12:	4299      	cmp	r1, r3
    df14:	f000 8092 	beq.w	e03c <isr_rx_conn_pkt_ctrl+0x83c>
					if (conn->pause_tx) {
    df18:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    df1c:	071c      	lsls	r4, r3, #28
    df1e:	f140 8087 	bpl.w	e030 <isr_rx_conn_pkt_ctrl+0x830>
						conn->llcp_conn_param.state =
    df22:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    df26:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    df28:	f361 0302 	bfi	r3, r1, #0, #3
    df2c:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    df30:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    df34:	3b01      	subs	r3, #1
    df36:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    df3a:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    df3e:	2b00      	cmp	r3, #0
    df40:	f47f ad37 	bne.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
				_radio.conn_upd = conn;
    df44:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    df48:	e533      	b.n	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    df4a:	4299      	cmp	r1, r3
    df4c:	d003      	beq.n	df56 <isr_rx_conn_pkt_ctrl+0x756>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    df4e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    df52:	0799      	lsls	r1, r3, #30
    df54:	d17b      	bne.n	e04e <isr_rx_conn_pkt_ctrl+0x84e>
			if ((cpr->interval_min < 6) ||
    df56:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    df5a:	4643      	mov	r3, r8
    df5c:	2b05      	cmp	r3, #5
    df5e:	d98c      	bls.n	de7a <isr_rx_conn_pkt_ctrl+0x67a>
			    (cpr->interval_max > 3200) ||
    df60:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    df62:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    df66:	d888      	bhi.n	de7a <isr_rx_conn_pkt_ctrl+0x67a>
			    (cpr->interval_max > 3200) ||
    df68:	45b8      	cmp	r8, r7
    df6a:	d886      	bhi.n	de7a <isr_rx_conn_pkt_ctrl+0x67a>
			    (cpr->latency > 499) ||
    df6c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    df70:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    df74:	d281      	bcs.n	de7a <isr_rx_conn_pkt_ctrl+0x67a>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    df76:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    df7a:	f1ae 060a 	sub.w	r6, lr, #10
    df7e:	b2b6      	uxth	r6, r6
    df80:	f640 4976 	movw	r9, #3190	; 0xc76
    df84:	454e      	cmp	r6, r9
    df86:	f63f af78 	bhi.w	de7a <isr_rx_conn_pkt_ctrl+0x67a>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    df8a:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    df8e:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    df92:	f6bf af72 	bge.w	de7a <isr_rx_conn_pkt_ctrl+0x67a>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    df96:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    df98:	428f      	cmp	r7, r1
    df9a:	f4ff af6e 	bcc.w	de7a <isr_rx_conn_pkt_ctrl+0x67a>
			conn->llcp_conn_param.interval = cpr->interval_min;
    df9e:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    dfa2:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    dfa6:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    dfaa:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    dfae:	7da6      	ldrb	r6, [r4, #22]
    dfb0:	7d61      	ldrb	r1, [r4, #21]
    dfb2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    dfb6:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    dfba:	7e26      	ldrb	r6, [r4, #24]
    dfbc:	7de1      	ldrb	r1, [r4, #23]
    dfbe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dfc2:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    dfc6:	7ea6      	ldrb	r6, [r4, #26]
    dfc8:	7e61      	ldrb	r1, [r4, #25]
    dfca:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dfce:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    dfd2:	7f26      	ldrb	r6, [r4, #28]
    dfd4:	7ee1      	ldrb	r1, [r4, #27]
    dfd6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dfda:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    dfde:	7fa6      	ldrb	r6, [r4, #30]
    dfe0:	7f61      	ldrb	r1, [r4, #29]
    dfe2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dfe6:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    dfea:	7fe1      	ldrb	r1, [r4, #31]
    dfec:	f894 6020 	ldrb.w	r6, [r4, #32]
    dff0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dff4:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    dff8:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    dffc:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    e000:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    e004:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    e008:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    e00c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    e00e:	428c      	cmp	r4, r1
    e010:	d10e      	bne.n	e030 <isr_rx_conn_pkt_ctrl+0x830>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    e012:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    e014:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e018:	4361      	muls	r1, r4
    e01a:	f242 7410 	movw	r4, #10000	; 0x2710
    e01e:	fb04 130e 	mla	r3, r4, lr, r1
    e022:	3b01      	subs	r3, #1
    e024:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    e028:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    e02a:	b29b      	uxth	r3, r3
    e02c:	4299      	cmp	r1, r3
    e02e:	d005      	beq.n	e03c <isr_rx_conn_pkt_ctrl+0x83c>
				*rx_enqueue = 1;
    e030:	2301      	movs	r3, #1
    e032:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    e034:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e038:	2103      	movs	r1, #3
    e03a:	e775      	b.n	df28 <isr_rx_conn_pkt_ctrl+0x728>
				conn->llcp_conn_param.status = 0;
    e03c:	2300      	movs	r3, #0
    e03e:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    e042:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    e046:	2101      	movs	r1, #1
    e048:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    e04c:	e76c      	b.n	df28 <isr_rx_conn_pkt_ctrl+0x728>
			LL_ASSERT(0);
    e04e:	4ab8      	ldr	r2, [pc, #736]	; (e330 <isr_rx_conn_pkt_ctrl+0xb30>)
    e050:	4bb8      	ldr	r3, [pc, #736]	; (e334 <isr_rx_conn_pkt_ctrl+0xb34>)
    e052:	9201      	str	r2, [sp, #4]
    e054:	9200      	str	r2, [sp, #0]
    e056:	681c      	ldr	r4, [r3, #0]
    e058:	49b7      	ldr	r1, [pc, #732]	; (e338 <isr_rx_conn_pkt_ctrl+0xb38>)
    e05a:	4bb8      	ldr	r3, [pc, #736]	; (e33c <isr_rx_conn_pkt_ctrl+0xb3c>)
    e05c:	48b8      	ldr	r0, [pc, #736]	; (e340 <isr_rx_conn_pkt_ctrl+0xb40>)
    e05e:	e515      	b.n	da8c <isr_rx_conn_pkt_ctrl+0x28c>
		if (_radio.conn_curr->role ||
    e060:	4bb8      	ldr	r3, [pc, #736]	; (e344 <isr_rx_conn_pkt_ctrl+0xb44>)
    e062:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e066:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e06a:	2b00      	cmp	r3, #0
    e06c:	f2c0 84c1 	blt.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    e070:	7a41      	ldrb	r1, [r0, #9]
    e072:	2010      	movs	r0, #16
    e074:	f7fb fd32 	bl	9adc <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e078:	2800      	cmp	r0, #0
    e07a:	f000 84ba 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		if (!_radio.conn_curr->role &&
    e07e:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    e082:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    e086:	429a      	cmp	r2, r3
    e088:	f43f ac93 	beq.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		    (_radio.conn_curr->llcp_conn_param.state ==
    e08c:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    e090:	f003 0307 	and.w	r3, r3, #7
    e094:	2b04      	cmp	r3, #4
    e096:	f47f ac8c 	bne.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
			if ((cpr->interval_min < 6) ||
    e09a:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    e09e:	fa1f f28e 	uxth.w	r2, lr
    e0a2:	2a05      	cmp	r2, #5
    e0a4:	d91b      	bls.n	e0de <isr_rx_conn_pkt_ctrl+0x8de>
			    (cpr->interval_max > 3200) ||
    e0a6:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    e0a8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    e0ac:	d817      	bhi.n	e0de <isr_rx_conn_pkt_ctrl+0x8de>
			    (cpr->interval_max > 3200) ||
    e0ae:	429a      	cmp	r2, r3
    e0b0:	d815      	bhi.n	e0de <isr_rx_conn_pkt_ctrl+0x8de>
			    (cpr->latency > 499) ||
    e0b2:	8a27      	ldrh	r7, [r4, #16]
    e0b4:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    e0b6:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    e0ba:	d210      	bcs.n	e0de <isr_rx_conn_pkt_ctrl+0x8de>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e0bc:	8a66      	ldrh	r6, [r4, #18]
    e0be:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    e0c0:	f1a0 010a 	sub.w	r1, r0, #10
    e0c4:	b289      	uxth	r1, r1
    e0c6:	f640 4c76 	movw	ip, #3190	; 0xc76
    e0ca:	4561      	cmp	r1, ip
    e0cc:	d807      	bhi.n	e0de <isr_rx_conn_pkt_ctrl+0x8de>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    e0ce:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e0d2:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    e0d6:	da02      	bge.n	e0de <isr_rx_conn_pkt_ctrl+0x8de>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    e0d8:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    e0da:	4293      	cmp	r3, r2
    e0dc:	d203      	bcs.n	e0e6 <isr_rx_conn_pkt_ctrl+0x8e6>
				nack = reject_ext_ind_send(conn,
    e0de:	221e      	movs	r2, #30
    e0e0:	2110      	movs	r1, #16
    e0e2:	4628      	mov	r0, r5
    e0e4:	e67a      	b.n	dddc <isr_rx_conn_pkt_ctrl+0x5dc>
			_radio.conn_curr->procedure_expire = 0;
    e0e6:	2000      	movs	r0, #0
    e0e8:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    e0ec:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    e0f0:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    e0f4:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    e0f8:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    e0fc:	7da2      	ldrb	r2, [r4, #22]
    e0fe:	7d63      	ldrb	r3, [r4, #21]
    e100:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    e104:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    e108:	7e22      	ldrb	r2, [r4, #24]
    e10a:	7de3      	ldrb	r3, [r4, #23]
    e10c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e110:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    e114:	7ea2      	ldrb	r2, [r4, #26]
    e116:	7e63      	ldrb	r3, [r4, #25]
    e118:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e11c:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    e120:	7f22      	ldrb	r2, [r4, #28]
    e122:	7ee3      	ldrb	r3, [r4, #27]
    e124:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e128:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    e12c:	7fa2      	ldrb	r2, [r4, #30]
    e12e:	7f63      	ldrb	r3, [r4, #29]
    e130:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e134:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    e138:	f894 2020 	ldrb.w	r2, [r4, #32]
    e13c:	7fe3      	ldrb	r3, [r4, #31]
    e13e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e142:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    e146:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    e14a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    e14e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e152:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    e156:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    e15a:	2201      	movs	r2, #1
    e15c:	f362 0302 	bfi	r3, r2, #0, #3
    e160:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    e164:	e415      	b.n	d992 <isr_rx_conn_pkt_ctrl+0x192>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    e166:	7a41      	ldrb	r1, [r0, #9]
    e168:	2011      	movs	r0, #17
    e16a:	f7fb fcb7 	bl	9adc <pdu_len_cmp>
    e16e:	2800      	cmp	r0, #0
    e170:	f000 843f 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    e174:	4a73      	ldr	r2, [pc, #460]	; (e344 <isr_rx_conn_pkt_ctrl+0xb44>)
    e176:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    e17a:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    e17e:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    e182:	4281      	cmp	r1, r0
    e184:	7b21      	ldrb	r1, [r4, #12]
    e186:	d027      	beq.n	e1d8 <isr_rx_conn_pkt_ctrl+0x9d8>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    e188:	2916      	cmp	r1, #22
    e18a:	f47f ac12 	bne.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		if (rej_ext_ind->error_code != 0x23) {
    e18e:	7b61      	ldrb	r1, [r4, #13]
    e190:	2923      	cmp	r1, #35	; 0x23
    e192:	d00e      	beq.n	e1b2 <isr_rx_conn_pkt_ctrl+0x9b2>
				_radio.conn_curr->phy_tx;
    e194:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    e198:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    e19c:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    e1a0:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e1a4:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    e1a8:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    e1aa:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    e1ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    e1b2:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    e1b6:	0792      	lsls	r2, r2, #30
    e1b8:	f57f abfb 	bpl.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e1bc:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    e1be:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e1c0:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    e1c2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    e1c6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e1ca:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    e1cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    e1d0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e1d4:	7363      	strb	r3, [r4, #13]
    e1d6:	e419      	b.n	da0c <isr_rx_conn_pkt_ctrl+0x20c>
		   _radio.conn_curr->llcp_conn_param.req) {
    e1d8:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    e1dc:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    e1e0:	42b8      	cmp	r0, r7
    e1e2:	d04b      	beq.n	e27c <isr_rx_conn_pkt_ctrl+0xa7c>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    e1e4:	290f      	cmp	r1, #15
    e1e6:	f47f abe4 	bne.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
    e1ea:	f993 001d 	ldrsb.w	r0, [r3, #29]
    e1ee:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    e1f0:	2800      	cmp	r0, #0
    e1f2:	db10      	blt.n	e216 <isr_rx_conn_pkt_ctrl+0xa16>
    e1f4:	291a      	cmp	r1, #26
    e1f6:	d10e      	bne.n	e216 <isr_rx_conn_pkt_ctrl+0xa16>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e1f8:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    e1fc:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    e200:	4294      	cmp	r4, r2
    e202:	f000 80ce 	beq.w	e3a2 <isr_rx_conn_pkt_ctrl+0xba2>
    e206:	4a4a      	ldr	r2, [pc, #296]	; (e330 <isr_rx_conn_pkt_ctrl+0xb30>)
    e208:	4b4a      	ldr	r3, [pc, #296]	; (e334 <isr_rx_conn_pkt_ctrl+0xb34>)
    e20a:	9201      	str	r2, [sp, #4]
    e20c:	9200      	str	r2, [sp, #0]
    e20e:	681c      	ldr	r4, [r3, #0]
    e210:	4b4d      	ldr	r3, [pc, #308]	; (e348 <isr_rx_conn_pkt_ctrl+0xb48>)
    e212:	f7ff bb3d 	b.w	d890 <isr_rx_conn_pkt_ctrl+0x90>
	else if (rej_ext_ind->error_code != 0x23) {
    e216:	2923      	cmp	r1, #35	; 0x23
    e218:	d019      	beq.n	e24e <isr_rx_conn_pkt_ctrl+0xa4e>
		LL_ASSERT(_radio.conn_upd == conn);
    e21a:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    e21e:	42b3      	cmp	r3, r6
    e220:	d008      	beq.n	e234 <isr_rx_conn_pkt_ctrl+0xa34>
    e222:	4a43      	ldr	r2, [pc, #268]	; (e330 <isr_rx_conn_pkt_ctrl+0xb30>)
    e224:	4b43      	ldr	r3, [pc, #268]	; (e334 <isr_rx_conn_pkt_ctrl+0xb34>)
    e226:	9201      	str	r2, [sp, #4]
    e228:	9200      	str	r2, [sp, #0]
    e22a:	681c      	ldr	r4, [r3, #0]
    e22c:	4b46      	ldr	r3, [pc, #280]	; (e348 <isr_rx_conn_pkt_ctrl+0xb48>)
			LL_ASSERT(_radio.conn_upd == conn);
    e22e:	4942      	ldr	r1, [pc, #264]	; (e338 <isr_rx_conn_pkt_ctrl+0xb38>)
    e230:	4846      	ldr	r0, [pc, #280]	; (e34c <isr_rx_conn_pkt_ctrl+0xb4c>)
    e232:	e42b      	b.n	da8c <isr_rx_conn_pkt_ctrl+0x28c>
		_radio.conn_upd = NULL;
    e234:	2600      	movs	r6, #0
		if (conn->role) {
    e236:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    e238:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    e23c:	bfb8      	it	lt
    e23e:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    e242:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    e246:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    e24a:	bfb8      	it	lt
    e24c:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    e24e:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    e252:	0717      	lsls	r7, r2, #28
    e254:	f57f abad 	bpl.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
	cp->status = rej_ext_ind->error_code;
    e258:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e25a:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    e25c:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e25e:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    e260:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    e262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    e264:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    e266:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    e268:	237d      	movs	r3, #125	; 0x7d
    e26a:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    e26c:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    e26e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e272:	fb93 f3f2 	sdiv	r3, r3, r2
    e276:	8223      	strh	r3, [r4, #16]
    e278:	f7ff bbc8 	b.w	da0c <isr_rx_conn_pkt_ctrl+0x20c>
		   _radio.conn_curr->llcp_length.req) {
    e27c:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    e280:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    e284:	4290      	cmp	r0, r2
    e286:	d01a      	beq.n	e2be <isr_rx_conn_pkt_ctrl+0xabe>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    e288:	2914      	cmp	r1, #20
    e28a:	f47f ab92 	bne.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		conn->llcp_length.ack = conn->llcp_length.req;
    e28e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    e292:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    e296:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    e298:	f360 02c3 	bfi	r2, r0, #3, #1
    e29c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    e2a0:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    e2a2:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    e2a6:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e2a8:	2215      	movs	r2, #21
    e2aa:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    e2ac:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    e2ae:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    e2b0:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    e2b2:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    e2b4:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    e2b6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    e2b8:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    e2ba:	8263      	strh	r3, [r4, #18]
    e2bc:	e579      	b.n	ddb2 <isr_rx_conn_pkt_ctrl+0x5b2>
		switch (rej_ext_ind->reject_opcode) {
    e2be:	2903      	cmp	r1, #3
    e2c0:	f47f ab77 	bne.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
			_radio.conn_curr->pause_rx = 0;
    e2c4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    e2c8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    e2cc:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    e2d0:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    e2d2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    e2d6:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    e2da:	230d      	movs	r3, #13
    e2dc:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    e2de:	7b63      	ldrb	r3, [r4, #13]
    e2e0:	7323      	strb	r3, [r4, #12]
    e2e2:	e566      	b.n	ddb2 <isr_rx_conn_pkt_ctrl+0x5b2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    e2e4:	7a41      	ldrb	r1, [r0, #9]
    e2e6:	2012      	movs	r0, #18
    e2e8:	f7fb fbf8 	bl	9adc <pdu_len_cmp>
    e2ec:	2800      	cmp	r0, #0
    e2ee:	f000 8380 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		nack = ping_resp_send(_radio.conn_curr);
    e2f2:	4814      	ldr	r0, [pc, #80]	; (e344 <isr_rx_conn_pkt_ctrl+0xb44>)
    e2f4:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e2f8:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e2fc:	f7f8 fcd5 	bl	6caa <mem_acquire>
	if (!node_tx) {
    e300:	4601      	mov	r1, r0
    e302:	2800      	cmp	r0, #0
    e304:	f43f ac91 	beq.w	dc2a <isr_rx_conn_pkt_ctrl+0x42a>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e308:	7903      	ldrb	r3, [r0, #4]
    e30a:	f043 0303 	orr.w	r3, r3, #3
    e30e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    e310:	2301      	movs	r3, #1
    e312:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    e314:	2313      	movs	r3, #19
    e316:	e4c3      	b.n	dca0 <isr_rx_conn_pkt_ctrl+0x4a0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    e318:	7a41      	ldrb	r1, [r0, #9]
    e31a:	2013      	movs	r0, #19
    e31c:	f7fb fbde 	bl	9adc <pdu_len_cmp>
    e320:	2800      	cmp	r0, #0
    e322:	f000 8366 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		_radio.conn_curr->procedure_expire = 0;
    e326:	4b07      	ldr	r3, [pc, #28]	; (e344 <isr_rx_conn_pkt_ctrl+0xb44>)
    e328:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    e32c:	e464      	b.n	dbf8 <isr_rx_conn_pkt_ctrl+0x3f8>
    e32e:	bf00      	nop
    e330:	000159e9 	.word	0x000159e9
    e334:	20003ad4 	.word	0x20003ad4
    e338:	00016791 	.word	0x00016791
    e33c:	00017e74 	.word	0x00017e74
    e340:	000166ef 	.word	0x000166ef
    e344:	200008f0 	.word	0x200008f0
    e348:	00017e39 	.word	0x00017e39
    e34c:	000187ce 	.word	0x000187ce
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    e350:	7a41      	ldrb	r1, [r0, #9]
    e352:	2007      	movs	r0, #7
    e354:	f7fb fbc2 	bl	9adc <pdu_len_cmp>
    e358:	2800      	cmp	r0, #0
    e35a:	f000 834a 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    e35e:	4ad2      	ldr	r2, [pc, #840]	; (e6a8 <isr_rx_conn_pkt_ctrl+0xea8>)
    e360:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    e364:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    e368:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    e36c:	42b1      	cmp	r1, r6
    e36e:	4611      	mov	r1, r2
    e370:	d06b      	beq.n	e44a <isr_rx_conn_pkt_ctrl+0xc4a>
			conn->llcp_conn_param.disabled = 1;
    e372:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    e376:	f040 0010 	orr.w	r0, r0, #16
    e37a:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    e37e:	f993 001d 	ldrsb.w	r0, [r3, #29]
    e382:	2800      	cmp	r0, #0
    e384:	db39      	blt.n	e3fa <isr_rx_conn_pkt_ctrl+0xbfa>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e386:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    e38a:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    e38e:	4294      	cmp	r4, r2
    e390:	d007      	beq.n	e3a2 <isr_rx_conn_pkt_ctrl+0xba2>
    e392:	4ac6      	ldr	r2, [pc, #792]	; (e6ac <isr_rx_conn_pkt_ctrl+0xeac>)
    e394:	4bc6      	ldr	r3, [pc, #792]	; (e6b0 <isr_rx_conn_pkt_ctrl+0xeb0>)
    e396:	9201      	str	r2, [sp, #4]
    e398:	9200      	str	r2, [sp, #0]
    e39a:	681c      	ldr	r4, [r3, #0]
    e39c:	4bc5      	ldr	r3, [pc, #788]	; (e6b4 <isr_rx_conn_pkt_ctrl+0xeb4>)
    e39e:	f7ff ba77 	b.w	d890 <isr_rx_conn_pkt_ctrl+0x90>
				conn->llcp_conn_param.state =
    e3a2:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    e3a6:	2105      	movs	r1, #5
    e3a8:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    e3ac:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    e3b0:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    e3b4:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    e3b8:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    e3bc:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    e3c0:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e3c4:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    e3c8:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    e3cc:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    e3ce:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e3d2:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    e3d6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    e3da:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    e3dc:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    e3e0:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    e3e2:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    e3e6:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    e3ea:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    e3ee:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    e3f2:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    e3f6:	f7ff bacc 	b.w	d992 <isr_rx_conn_pkt_ctrl+0x192>
			LL_ASSERT(_radio.conn_upd == conn);
    e3fa:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    e3fe:	4293      	cmp	r3, r2
    e400:	d006      	beq.n	e410 <isr_rx_conn_pkt_ctrl+0xc10>
    e402:	4aaa      	ldr	r2, [pc, #680]	; (e6ac <isr_rx_conn_pkt_ctrl+0xeac>)
    e404:	4baa      	ldr	r3, [pc, #680]	; (e6b0 <isr_rx_conn_pkt_ctrl+0xeb0>)
    e406:	9201      	str	r2, [sp, #4]
    e408:	9200      	str	r2, [sp, #0]
    e40a:	681c      	ldr	r4, [r3, #0]
    e40c:	4ba9      	ldr	r3, [pc, #676]	; (e6b4 <isr_rx_conn_pkt_ctrl+0xeb4>)
    e40e:	e70e      	b.n	e22e <isr_rx_conn_pkt_ctrl+0xa2e>
			_radio.conn_upd = NULL;
    e410:	2200      	movs	r2, #0
    e412:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    e416:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e41a:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    e41e:	0716      	lsls	r6, r2, #28
    e420:	f57f aac7 	bpl.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e424:	2208      	movs	r2, #8
    e426:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e428:	221a      	movs	r2, #26
    e42a:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    e42c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    e42e:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    e430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    e432:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    e434:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    e436:	237d      	movs	r3, #125	; 0x7d
    e438:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    e43a:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    e43c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e440:	fb93 f3f2 	sdiv	r3, r3, r2
    e444:	8223      	strh	r3, [r4, #16]
    e446:	f7ff bb6b 	b.w	db20 <isr_rx_conn_pkt_ctrl+0x320>
		} else if (_radio.conn_curr->llcp_length.req !=
    e44a:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    e44e:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    e452:	4290      	cmp	r0, r2
    e454:	d009      	beq.n	e46a <isr_rx_conn_pkt_ctrl+0xc6a>
			_radio.conn_curr->llcp_length.ack =
    e456:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    e45a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    e45e:	f36f 02c3 	bfc	r2, #3, #1
    e462:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    e466:	f7ff bb5b 	b.w	db20 <isr_rx_conn_pkt_ctrl+0x320>
		} else if (_radio.conn_curr->llcp_phy.req !=
    e46a:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    e46e:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    e472:	4290      	cmp	r0, r2
    e474:	d01b      	beq.n	e4ae <isr_rx_conn_pkt_ctrl+0xcae>
			_radio.conn_curr->llcp_phy.ack =
    e476:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    e47a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    e47e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    e482:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    e486:	f362 0002 	bfi	r0, r2, #0, #3
    e48a:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    e48e:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    e492:	0780      	lsls	r0, r0, #30
    e494:	d50f      	bpl.n	e4b6 <isr_rx_conn_pkt_ctrl+0xcb6>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e496:	200c      	movs	r0, #12
    e498:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    e49a:	2000      	movs	r0, #0
    e49c:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    e49e:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    e4a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    e4a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e4a8:	7363      	strb	r3, [r4, #13]
    e4aa:	f7ff bb39 	b.w	db20 <isr_rx_conn_pkt_ctrl+0x320>
			switch (llctrl->unknown_rsp.type) {
    e4ae:	7b23      	ldrb	r3, [r4, #12]
    e4b0:	2b12      	cmp	r3, #18
    e4b2:	f47f ab35 	bne.w	db20 <isr_rx_conn_pkt_ctrl+0x320>
		_radio.conn_curr->procedure_expire = 0;
    e4b6:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    e4ba:	f7ff bb9d 	b.w	dbf8 <isr_rx_conn_pkt_ctrl+0x3f8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    e4be:	7a41      	ldrb	r1, [r0, #9]
    e4c0:	2014      	movs	r0, #20
    e4c2:	f7fb fb0b 	bl	9adc <pdu_len_cmp>
    e4c6:	2800      	cmp	r0, #0
    e4c8:	f000 8293 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    e4cc:	2f14      	cmp	r7, #20
    e4ce:	d128      	bne.n	e522 <isr_rx_conn_pkt_ctrl+0xd22>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e4d0:	4879      	ldr	r0, [pc, #484]	; (e6b8 <isr_rx_conn_pkt_ctrl+0xeb8>)
    e4d2:	f7f8 fbea 	bl	6caa <mem_acquire>
		if (!node_tx) {
    e4d6:	4606      	mov	r6, r0
    e4d8:	2800      	cmp	r0, #0
    e4da:	f43f aba6 	beq.w	dc2a <isr_rx_conn_pkt_ctrl+0x42a>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e4de:	4f72      	ldr	r7, [pc, #456]	; (e6a8 <isr_rx_conn_pkt_ctrl+0xea8>)
    e4e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    e4e4:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    e4e8:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e4ec:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e4ee:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    e4f0:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e4f2:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    e4f6:	45e0      	cmp	r8, ip
    e4f8:	46b9      	mov	r9, r7
    e4fa:	f894 800b 	ldrb.w	r8, [r4, #11]
    e4fe:	d112      	bne.n	e526 <isr_rx_conn_pkt_ctrl+0xd26>
	      _radio.conn_curr->llcp_length.ack) &&
    e500:	f1b8 0f14 	cmp.w	r8, #20
    e504:	d01b      	beq.n	e53e <isr_rx_conn_pkt_ctrl+0xd3e>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    e506:	f1b8 0f15 	cmp.w	r8, #21
    e50a:	f000 8296 	beq.w	ea3a <isr_rx_conn_pkt_ctrl+0x123a>
    e50e:	4a67      	ldr	r2, [pc, #412]	; (e6ac <isr_rx_conn_pkt_ctrl+0xeac>)
    e510:	4b67      	ldr	r3, [pc, #412]	; (e6b0 <isr_rx_conn_pkt_ctrl+0xeb0>)
    e512:	9201      	str	r2, [sp, #4]
    e514:	9200      	str	r2, [sp, #0]
    e516:	681c      	ldr	r4, [r3, #0]
    e518:	4968      	ldr	r1, [pc, #416]	; (e6bc <isr_rx_conn_pkt_ctrl+0xebc>)
    e51a:	4b69      	ldr	r3, [pc, #420]	; (e6c0 <isr_rx_conn_pkt_ctrl+0xec0>)
    e51c:	4869      	ldr	r0, [pc, #420]	; (e6c4 <isr_rx_conn_pkt_ctrl+0xec4>)
    e51e:	f7ff bab5 	b.w	da8c <isr_rx_conn_pkt_ctrl+0x28c>
	struct radio_pdu_node_tx *node_tx = NULL;
    e522:	2600      	movs	r6, #0
    e524:	e7db      	b.n	e4de <isr_rx_conn_pkt_ctrl+0xcde>
		 LLCP_LENGTH_STATE_REQ) ||
    e526:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    e52a:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    e52e:	2f01      	cmp	r7, #1
    e530:	d9e6      	bls.n	e500 <isr_rx_conn_pkt_ctrl+0xd00>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    e532:	2f02      	cmp	r7, #2
    e534:	d1e7      	bne.n	e506 <isr_rx_conn_pkt_ctrl+0xd06>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    e536:	f1a8 0714 	sub.w	r7, r8, #20
    e53a:	2f01      	cmp	r7, #1
    e53c:	d8e3      	bhi.n	e506 <isr_rx_conn_pkt_ctrl+0xd06>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    e53e:	89a7      	ldrh	r7, [r4, #12]
    e540:	2f1a      	cmp	r7, #26
    e542:	d935      	bls.n	e5b0 <isr_rx_conn_pkt_ctrl+0xdb0>
			eff_tx_octets = min(lr->max_rx_octets,
    e544:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    e548:	4547      	cmp	r7, r8
    e54a:	bf28      	it	cs
    e54c:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    e54e:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    e552:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    e556:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    e55a:	bf34      	ite	cc
    e55c:	4693      	movcc	fp, r2
    e55e:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    e562:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    e566:	d325      	bcc.n	e5b4 <isr_rx_conn_pkt_ctrl+0xdb4>
			eff_tx_time = min(lr->max_rx_time,
    e568:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    e56c:	45d0      	cmp	r8, sl
    e56e:	bf28      	it	cs
    e570:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    e572:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    e576:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    e57a:	bf34      	ite	cc
    e57c:	4682      	movcc	sl, r0
    e57e:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    e582:	455a      	cmp	r2, fp
    e584:	d051      	beq.n	e62a <isr_rx_conn_pkt_ctrl+0xe2a>
			free_count_rx = packet_rx_acquired_count_get() +
    e586:	f7fb faf1 	bl	9b6c <packet_rx_acquired_count_get>
    e58a:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    e58c:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    e590:	f7f8 fbba 	bl	6d08 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    e594:	4420      	add	r0, r4
    e596:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    e598:	28ff      	cmp	r0, #255	; 0xff
    e59a:	d90d      	bls.n	e5b8 <isr_rx_conn_pkt_ctrl+0xdb8>
    e59c:	4a43      	ldr	r2, [pc, #268]	; (e6ac <isr_rx_conn_pkt_ctrl+0xeac>)
    e59e:	4b44      	ldr	r3, [pc, #272]	; (e6b0 <isr_rx_conn_pkt_ctrl+0xeb0>)
    e5a0:	9201      	str	r2, [sp, #4]
    e5a2:	9200      	str	r2, [sp, #0]
    e5a4:	681c      	ldr	r4, [r3, #0]
    e5a6:	4945      	ldr	r1, [pc, #276]	; (e6bc <isr_rx_conn_pkt_ctrl+0xebc>)
    e5a8:	4b45      	ldr	r3, [pc, #276]	; (e6c0 <isr_rx_conn_pkt_ctrl+0xec0>)
    e5aa:	4847      	ldr	r0, [pc, #284]	; (e6c8 <isr_rx_conn_pkt_ctrl+0xec8>)
    e5ac:	f7ff ba6e 	b.w	da8c <isr_rx_conn_pkt_ctrl+0x28c>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e5b0:	460f      	mov	r7, r1
    e5b2:	e7cc      	b.n	e54e <isr_rx_conn_pkt_ctrl+0xd4e>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e5b4:	46f0      	mov	r8, lr
    e5b6:	e7dc      	b.n	e572 <isr_rx_conn_pkt_ctrl+0xd72>
			if (_radio.packet_rx_data_count == free_count_rx) {
    e5b8:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    e5bc:	4283      	cmp	r3, r0
    e5be:	f040 8233 	bne.w	ea28 <isr_rx_conn_pkt_ctrl+0x1228>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    e5c2:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    e5c6:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    e5ca:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    e5cc:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    e5ce:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    e5d2:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    e5d6:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    e5da:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    e5de:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    e5e2:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    e5e6:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    e5ea:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    e5ee:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    e5f2:	2303      	movs	r3, #3
    e5f4:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    e5f8:	2e00      	cmp	r6, #0
    e5fa:	f43f a9da 	beq.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e5fe:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    e600:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    e604:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e608:	f043 0303 	orr.w	r3, r3, #3
    e60c:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    e60e:	2309      	movs	r3, #9
    e610:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e612:	2315      	movs	r3, #21
    e614:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    e616:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    e618:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    e61c:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    e620:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    e622:	f7fd fcbb 	bl	bf9c <ctrl_tx_enqueue>
    e626:	f7ff b9c4 	b.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
			_radio.conn_curr->pause_tx = 0;
    e62a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    e62e:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    e632:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    e636:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    e63a:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    e63c:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    e640:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    e644:	d103      	bne.n	e64e <isr_rx_conn_pkt_ctrl+0xe4e>
    e646:	45c6      	cmp	lr, r8
    e648:	d101      	bne.n	e64e <isr_rx_conn_pkt_ctrl+0xe4e>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    e64a:	4550      	cmp	r0, sl
    e64c:	d0d4      	beq.n	e5f8 <isr_rx_conn_pkt_ctrl+0xdf8>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    e64e:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    e650:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    e654:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    e658:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    e65a:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    e65e:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    e660:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    e664:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    e668:	702b      	strb	r3, [r5, #0]
    e66a:	e7c5      	b.n	e5f8 <isr_rx_conn_pkt_ctrl+0xdf8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    e66c:	7a41      	ldrb	r1, [r0, #9]
    e66e:	2016      	movs	r0, #22
    e670:	f7fb fa34 	bl	9adc <pdu_len_cmp>
    e674:	2800      	cmp	r0, #0
    e676:	f000 81bc 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		if (_radio.role == ROLE_MASTER) {
    e67a:	480b      	ldr	r0, [pc, #44]	; (e6a8 <isr_rx_conn_pkt_ctrl+0xea8>)
    e67c:	7cc3      	ldrb	r3, [r0, #19]
    e67e:	2b04      	cmp	r3, #4
    e680:	d169      	bne.n	e756 <isr_rx_conn_pkt_ctrl+0xf56>
			if ((_radio.conn_curr->llcp_phy.ack !=
    e682:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    e686:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    e68a:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    e68e:	428b      	cmp	r3, r1
    e690:	d01c      	beq.n	e6cc <isr_rx_conn_pkt_ctrl+0xecc>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    e692:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    e696:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    e69a:	3a01      	subs	r2, #1
    e69c:	2a02      	cmp	r2, #2
    e69e:	d815      	bhi.n	e6cc <isr_rx_conn_pkt_ctrl+0xecc>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e6a0:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    e6a2:	2116      	movs	r1, #22
    e6a4:	f7ff bb9a 	b.w	dddc <isr_rx_conn_pkt_ctrl+0x5dc>
    e6a8:	200008f0 	.word	0x200008f0
    e6ac:	000159e9 	.word	0x000159e9
    e6b0:	20003ad4 	.word	0x20003ad4
    e6b4:	00017e74 	.word	0x00017e74
    e6b8:	20000a4c 	.word	0x20000a4c
    e6bc:	00016791 	.word	0x00016791
    e6c0:	00017e5b 	.word	0x00017e5b
    e6c4:	00018807 	.word	0x00018807
    e6c8:	0001837e 	.word	0x0001837e
			} else if (((_radio.conn_curr->llcp_req !=
    e6cc:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    e6d0:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    e6d4:	4295      	cmp	r5, r2
    e6d6:	d003      	beq.n	e6e0 <isr_rx_conn_pkt_ctrl+0xee0>
				     _radio.conn_curr->llcp_ack) &&
    e6d8:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    e6dc:	2a03      	cmp	r2, #3
    e6de:	d105      	bne.n	e6ec <isr_rx_conn_pkt_ctrl+0xeec>
				     LLCP_ENCRYPTION)) ||
    e6e0:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    e6e4:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    e6e8:	4295      	cmp	r5, r2
    e6ea:	d001      	beq.n	e6f0 <isr_rx_conn_pkt_ctrl+0xef0>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e6ec:	222a      	movs	r2, #42	; 0x2a
    e6ee:	e7d8      	b.n	e6a2 <isr_rx_conn_pkt_ctrl+0xea2>
				_radio.conn_curr->llcp_phy.state =
    e6f0:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    e6f4:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    e6f6:	f042 0203 	orr.w	r2, r2, #3
    e6fa:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    e6fe:	d116      	bne.n	e72e <isr_rx_conn_pkt_ctrl+0xf2e>
					_radio.conn_curr->llcp_phy.ack--;
    e700:	3b01      	subs	r3, #1
    e702:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    e706:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    e70a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    e70e:	f36f 0341 	bfc	r3, #1, #1
    e712:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    e716:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    e71a:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    e71e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    e722:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e726:	f362 1347 	bfi	r3, r2, #5, #3
    e72a:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    e72e:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    e732:	7b62      	ldrb	r2, [r4, #13]
    e734:	f3c3 0182 	ubfx	r1, r3, #2, #3
    e738:	400a      	ands	r2, r1
    e73a:	f362 0384 	bfi	r3, r2, #2, #3
    e73e:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    e742:	7b22      	ldrb	r2, [r4, #12]
    e744:	b2db      	uxtb	r3, r3
    e746:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e74a:	f362 1347 	bfi	r3, r2, #5, #3
    e74e:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    e752:	f7ff b92e 	b.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    e756:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e75a:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e75e:	f7f8 faa4 	bl	6caa <mem_acquire>
	if (!node_tx) {
    e762:	4601      	mov	r1, r0
    e764:	2800      	cmp	r0, #0
    e766:	f43f aa60 	beq.w	dc2a <isr_rx_conn_pkt_ctrl+0x42a>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    e76a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e76e:	2202      	movs	r2, #2
    e770:	f362 0301 	bfi	r3, r2, #0, #2
    e774:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    e778:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e77c:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e780:	4293      	cmp	r3, r2
    e782:	d11a      	bne.n	e7ba <isr_rx_conn_pkt_ctrl+0xfba>
		conn->llcp_phy.ack--;
    e784:	3b01      	subs	r3, #1
    e786:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    e78a:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    e78e:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    e792:	f36f 0341 	bfc	r3, #1, #1
    e796:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    e79a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e79e:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    e7a2:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    e7a6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e7aa:	f362 1347 	bfi	r3, r2, #5, #3
    e7ae:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    e7b2:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    e7b6:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    e7ba:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e7be:	7b62      	ldrb	r2, [r4, #13]
    e7c0:	f3c3 0082 	ubfx	r0, r3, #2, #3
    e7c4:	4002      	ands	r2, r0
    e7c6:	f362 0384 	bfi	r3, r2, #2, #3
    e7ca:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    e7ce:	7b22      	ldrb	r2, [r4, #12]
    e7d0:	b2db      	uxtb	r3, r3
    e7d2:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e7d6:	f362 1347 	bfi	r3, r2, #5, #3
    e7da:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e7de:	790b      	ldrb	r3, [r1, #4]
    e7e0:	f043 0303 	orr.w	r3, r3, #3
    e7e4:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    e7e6:	2303      	movs	r3, #3
    e7e8:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    e7ea:	2317      	movs	r3, #23
    e7ec:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    e7ee:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    e7f2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e7f6:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    e7f8:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    e7fc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e800:	724b      	strb	r3, [r1, #9]
    e802:	f7ff ba24 	b.w	dc4e <isr_rx_conn_pkt_ctrl+0x44e>
		if (_radio.conn_curr->role ||
    e806:	4e92      	ldr	r6, [pc, #584]	; (ea50 <isr_rx_conn_pkt_ctrl+0x1250>)
    e808:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e80c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e810:	2b00      	cmp	r3, #0
    e812:	f2c0 80ee 	blt.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    e816:	7a41      	ldrb	r1, [r0, #9]
    e818:	2017      	movs	r0, #23
    e81a:	f7fb f95f 	bl	9adc <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e81e:	2800      	cmp	r0, #0
    e820:	f000 80e7 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		if ((_radio.role == ROLE_MASTER) &&
    e824:	7cf3      	ldrb	r3, [r6, #19]
    e826:	2b04      	cmp	r3, #4
    e828:	f47f a8c3 	bne.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
    e82c:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e830:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e834:	429a      	cmp	r2, r3
    e836:	f43f a8bc 	beq.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		    (_radio.conn_curr->llcp_phy.state ==
    e83a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    e83e:	f003 0203 	and.w	r2, r3, #3
    e842:	2a02      	cmp	r2, #2
    e844:	f47f a8b5 	bne.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    e848:	f043 0303 	orr.w	r3, r3, #3
    e84c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    e850:	7b62      	ldrb	r2, [r4, #13]
    e852:	f3c3 0182 	ubfx	r1, r3, #2, #3
    e856:	400a      	ands	r2, r1
    e858:	f362 0384 	bfi	r3, r2, #2, #3
    e85c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    e860:	7b22      	ldrb	r2, [r4, #12]
    e862:	b2db      	uxtb	r3, r3
    e864:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e868:	f362 1347 	bfi	r3, r2, #5, #3
    e86c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    e870:	f7ff b850 	b.w	d914 <isr_rx_conn_pkt_ctrl+0x114>
		if (!_radio.conn_curr->role ||
    e874:	4b76      	ldr	r3, [pc, #472]	; (ea50 <isr_rx_conn_pkt_ctrl+0x1250>)
    e876:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    e87a:	f996 301d 	ldrsb.w	r3, [r6, #29]
    e87e:	2b00      	cmp	r3, #0
    e880:	f280 80b7 	bge.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    e884:	7a41      	ldrb	r1, [r0, #9]
    e886:	2018      	movs	r0, #24
    e888:	f7fb f928 	bl	9adc <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e88c:	2800      	cmp	r0, #0
    e88e:	f000 80b0 	beq.w	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    e892:	7b27      	ldrb	r7, [r4, #12]
    e894:	7b62      	ldrb	r2, [r4, #13]
    e896:	ea47 0002 	orr.w	r0, r7, r2
    e89a:	f010 0007 	ands.w	r0, r0, #7
    e89e:	d125      	bne.n	e8ec <isr_rx_conn_pkt_ctrl+0x10ec>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e8a0:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    e8a4:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e8a8:	4293      	cmp	r3, r2
    e8aa:	f43f a882 	beq.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    e8ae:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e8b2:	f003 0303 	and.w	r3, r3, #3
    e8b6:	2b02      	cmp	r3, #2
    e8b8:	f47f a87b 	bne.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		if (!conn->llcp_phy.cmd) {
    e8bc:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e8c0:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    e8c4:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    e8c6:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    e8ca:	f57f a872 	bpl.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e8ce:	230c      	movs	r3, #12
		upd->status = 0;
    e8d0:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e8d2:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    e8d4:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    e8d8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e8dc:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    e8de:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    e8e2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e8e6:	7363      	strb	r3, [r4, #13]
    e8e8:	f7ff ba63 	b.w	ddb2 <isr_rx_conn_pkt_ctrl+0x5b2>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    e8ec:	89e0      	ldrh	r0, [r4, #14]
    e8ee:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    e8f0:	1ac3      	subs	r3, r0, r3
    e8f2:	041b      	lsls	r3, r3, #16
    e8f4:	f100 80a6 	bmi.w	ea44 <isr_rx_conn_pkt_ctrl+0x1244>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e8f8:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    e8fc:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    e900:	428b      	cmp	r3, r1
    e902:	d007      	beq.n	e914 <isr_rx_conn_pkt_ctrl+0x1114>
    e904:	4a53      	ldr	r2, [pc, #332]	; (ea54 <isr_rx_conn_pkt_ctrl+0x1254>)
    e906:	4b54      	ldr	r3, [pc, #336]	; (ea58 <isr_rx_conn_pkt_ctrl+0x1258>)
    e908:	9201      	str	r2, [sp, #4]
    e90a:	9200      	str	r2, [sp, #0]
    e90c:	681c      	ldr	r4, [r3, #0]
    e90e:	4b53      	ldr	r3, [pc, #332]	; (ea5c <isr_rx_conn_pkt_ctrl+0x125c>)
    e910:	f7fe bfbe 	b.w	d890 <isr_rx_conn_pkt_ctrl+0x90>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e914:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    e918:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e91c:	42a3      	cmp	r3, r4
    e91e:	d014      	beq.n	e94a <isr_rx_conn_pkt_ctrl+0x114a>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    e920:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e924:	f003 0303 	and.w	r3, r3, #3
    e928:	2b02      	cmp	r3, #2
    e92a:	d10e      	bne.n	e94a <isr_rx_conn_pkt_ctrl+0x114a>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e92c:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e930:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e934:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    e938:	f3c3 0340 	ubfx	r3, r3, #1, #1
    e93c:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    e940:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e942:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    e946:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e94a:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    e94e:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e952:	f002 0207 	and.w	r2, r2, #7
    e956:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    e95a:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    e95e:	f36f 0300 	bfc	r3, #0, #1
    e962:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    e966:	2008      	movs	r0, #8
	conn->llcp_ack--;
    e968:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    e96a:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    e96e:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    e972:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    e976:	2b00      	cmp	r3, #0
    e978:	f43f a81b 	beq.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    e97c:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    e980:	f362 0302 	bfi	r3, r2, #0, #3
    e984:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    e988:	f7ff b813 	b.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		if (_radio.conn_curr->role ||
    e98c:	4e30      	ldr	r6, [pc, #192]	; (ea50 <isr_rx_conn_pkt_ctrl+0x1250>)
    e98e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e992:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e996:	2b00      	cmp	r3, #0
    e998:	db2b      	blt.n	e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    e99a:	7a41      	ldrb	r1, [r0, #9]
    e99c:	2019      	movs	r0, #25
    e99e:	f7fb f89d 	bl	9adc <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e9a2:	b330      	cbz	r0, e9f2 <isr_rx_conn_pkt_ctrl+0x11f2>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    e9a4:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    e9a8:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    e9ac:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    e9b0:	7b22      	ldrb	r2, [r4, #12]
    e9b2:	f003 0307 	and.w	r3, r3, #7
    e9b6:	4213      	tst	r3, r2
    e9b8:	f43e affb 	beq.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
			if (conn->llcp_req != conn->llcp_ack) {
    e9bc:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    e9c0:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e9c4:	429a      	cmp	r2, r3
    e9c6:	f47e aff4 	bne.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
			memcpy(&conn->llcp.chan_map.chm[0],
    e9ca:	2205      	movs	r2, #5
    e9cc:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    e9d0:	f105 0079 	add.w	r0, r5, #121	; 0x79
    e9d4:	f7f3 f924 	bl	1c20 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    e9d8:	2301      	movs	r3, #1
    e9da:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    e9de:	2302      	movs	r3, #2
    e9e0:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    e9e4:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e9e8:	3b01      	subs	r3, #1
    e9ea:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    e9ee:	f7fe bfe0 	b.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
		nack = unknown_rsp_send(_radio.conn_curr,
    e9f2:	4817      	ldr	r0, [pc, #92]	; (ea50 <isr_rx_conn_pkt_ctrl+0x1250>)
    e9f4:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e9f8:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e9fc:	f7f8 f955 	bl	6caa <mem_acquire>
	if (!node_tx) {
    ea00:	4601      	mov	r1, r0
    ea02:	2800      	cmp	r0, #0
    ea04:	f43f a911 	beq.w	dc2a <isr_rx_conn_pkt_ctrl+0x42a>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ea08:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    ea0a:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ea0c:	f043 0303 	orr.w	r3, r3, #3
    ea10:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    ea12:	2302      	movs	r3, #2
    ea14:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    ea16:	2307      	movs	r3, #7
    ea18:	71c3      	strb	r3, [r0, #7]
    ea1a:	f7ff b942 	b.w	dca2 <isr_rx_conn_pkt_ctrl+0x4a2>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    ea1e:	2328      	movs	r3, #40	; 0x28
    ea20:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    ea24:	f7fe bfc5 	b.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
	if (node_tx) {
    ea28:	2e00      	cmp	r6, #0
    ea2a:	f43f a8fe 	beq.w	dc2a <isr_rx_conn_pkt_ctrl+0x42a>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    ea2e:	490c      	ldr	r1, [pc, #48]	; (ea60 <isr_rx_conn_pkt_ctrl+0x1260>)
    ea30:	4630      	mov	r0, r6
    ea32:	f7f8 f954 	bl	6cde <mem_release>
    ea36:	f7ff b8f8 	b.w	dc2a <isr_rx_conn_pkt_ctrl+0x42a>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    ea3a:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    ea3c:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    ea3e:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    ea40:	4693      	mov	fp, r2
    ea42:	e5d9      	b.n	e5f8 <isr_rx_conn_pkt_ctrl+0xdf8>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    ea44:	2328      	movs	r3, #40	; 0x28
    ea46:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    ea4a:	f7fe bfb2 	b.w	d9b2 <isr_rx_conn_pkt_ctrl+0x1b2>
    ea4e:	bf00      	nop
    ea50:	200008f0 	.word	0x200008f0
    ea54:	000159e9 	.word	0x000159e9
    ea58:	20003ad4 	.word	0x20003ad4
    ea5c:	00018250 	.word	0x00018250
    ea60:	20000a4c 	.word	0x20000a4c
    ea64:	00000000 	.word	0x00000000

0000ea68 <isr>:
{
    ea68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea6c:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    ea6e:	f004 fc53 	bl	13318 <radio_is_done>
    ea72:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    ea74:	b366      	cbz	r6, ead0 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    ea76:	f004 fc6f 	bl	13358 <radio_crc_is_valid>
    ea7a:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    ea7c:	f004 fcf0 	bl	13460 <radio_filter_has_match>
    ea80:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    ea84:	f004 fcf6 	bl	13474 <radio_filter_match_get>
    ea88:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    ea8c:	f004 feda 	bl	13844 <radio_ar_has_match>
    ea90:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    ea94:	f004 fec4 	bl	13820 <radio_ar_match_get>
    ea98:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    ea9c:	f004 fcaa 	bl	133f4 <radio_rssi_is_ready>
    eaa0:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    eaa2:	4cb6      	ldr	r4, [pc, #728]	; (ed7c <isr+0x314>)
	radio_status_reset();
    eaa4:	f004 fc22 	bl	132ec <radio_status_reset>
	radio_tmr_status_reset();
    eaa8:	f004 fcf6 	bl	13498 <radio_tmr_status_reset>
	radio_filter_status_reset();
    eaac:	f004 fcd0 	bl	13450 <radio_filter_status_reset>
	radio_ar_status_reset();
    eab0:	f004 febc 	bl	1382c <radio_ar_status_reset>
	radio_rssi_status_reset();
    eab4:	f004 fc96 	bl	133e4 <radio_rssi_status_reset>
	switch (_radio.state) {
    eab8:	7d23      	ldrb	r3, [r4, #20]
    eaba:	2b05      	cmp	r3, #5
    eabc:	f201 848d 	bhi.w	103da <__kernel_ram_size+0x3da>
    eac0:	e8df f013 	tbh	[pc, r3, lsl #1]
    eac4:	00cf007d 	.word	0x00cf007d
    eac8:	0a32000e 	.word	0x0a32000e
    eacc:	0a320a32 	.word	0x0a320a32
		devmatch_id = irkmatch_id = 0xFF;
    ead0:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    ead4:	4635      	mov	r5, r6
    ead6:	46b2      	mov	sl, r6
    ead8:	46b1      	mov	r9, r6
    eada:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    eadc:	46d8      	mov	r8, fp
    eade:	e7e0      	b.n	eaa2 <isr+0x3a>
	_radio.state = STATE_RX;
    eae0:	2301      	movs	r3, #1
    eae2:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    eae4:	f004 fdda 	bl	1369c <radio_tmr_tifs_base_get>
    eae8:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    eaea:	2096      	movs	r0, #150	; 0x96
    eaec:	f004 fce2 	bl	134b4 <radio_tmr_tifs_set>
	switch (_radio.role) {
    eaf0:	7ce3      	ldrb	r3, [r4, #19]
    eaf2:	3b01      	subs	r3, #1
    eaf4:	2b03      	cmp	r3, #3
    eaf6:	f200 80ab 	bhi.w	ec50 <isr+0x1e8>
    eafa:	e8df f003 	tbb	[pc, r3]
    eafe:	3302      	.short	0x3302
    eb00:	6363      	.short	0x6363
		radio_switch_complete_and_tx(0, 0, 0, 0);
    eb02:	2300      	movs	r3, #0
    eb04:	461a      	mov	r2, r3
    eb06:	4619      	mov	r1, r3
    eb08:	4618      	mov	r0, r3
    eb0a:	f004 fc43 	bl	13394 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    eb0e:	f004 fc31 	bl	13374 <radio_pkt_scratch_get>
    eb12:	f004 fbb3 	bl	1327c <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    eb16:	f004 fbf5 	bl	13304 <radio_is_ready>
    eb1a:	b140      	cbz	r0, eb2e <isr+0xc6>
		LL_ASSERT(!radio_is_ready());
    eb1c:	4a98      	ldr	r2, [pc, #608]	; (ed80 <isr+0x318>)
    eb1e:	4b99      	ldr	r3, [pc, #612]	; (ed84 <isr+0x31c>)
    eb20:	9201      	str	r2, [sp, #4]
    eb22:	9200      	str	r2, [sp, #0]
    eb24:	681c      	ldr	r4, [r3, #0]
    eb26:	4b98      	ldr	r3, [pc, #608]	; (ed88 <isr+0x320>)
	LL_ASSERT(!radio_is_ready());
    eb28:	4998      	ldr	r1, [pc, #608]	; (ed8c <isr+0x324>)
    eb2a:	4899      	ldr	r0, [pc, #612]	; (ed90 <isr+0x328>)
    eb2c:	e34f      	b.n	f1ce <isr+0x766>
		if (ctrl_rl_enabled()) {
    eb2e:	f003 fde1 	bl	126f4 <ctrl_rl_enabled>
    eb32:	b138      	cbz	r0, eb44 <isr+0xdc>
			u8_t count, *irks = ctrl_irks_get(&count);
    eb34:	a810      	add	r0, sp, #64	; 0x40
    eb36:	f003 fb0b 	bl	12150 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    eb3a:	4601      	mov	r1, r0
    eb3c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    eb40:	f004 fe3c 	bl	137bc <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    eb44:	2100      	movs	r1, #0
    eb46:	4608      	mov	r0, r1
    eb48:	f004 fbad 	bl	132a6 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    eb4c:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    eb4e:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    eb50:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    eb52:	4608      	mov	r0, r1
    eb54:	f004 fba3 	bl	1329e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    eb58:	1a28      	subs	r0, r5, r0
    eb5a:	f004 fd35 	bl	135c8 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    eb5e:	f004 fd85 	bl	1366c <radio_tmr_end_capture>
    eb62:	e02c      	b.n	ebbe <isr+0x156>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    eb64:	2300      	movs	r3, #0
    eb66:	461a      	mov	r2, r3
    eb68:	4619      	mov	r1, r3
    eb6a:	4618      	mov	r0, r3
    eb6c:	f004 fc12 	bl	13394 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    eb70:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    eb74:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    eb78:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    eb7c:	3008      	adds	r0, #8
    eb7e:	f004 fb7d 	bl	1327c <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    eb82:	f004 fbbf 	bl	13304 <radio_is_ready>
    eb86:	2800      	cmp	r0, #0
    eb88:	d1c8      	bne.n	eb1c <isr+0xb4>
		if (ctrl_rl_enabled()) {
    eb8a:	f003 fdb3 	bl	126f4 <ctrl_rl_enabled>
    eb8e:	b138      	cbz	r0, eba0 <isr+0x138>
			u8_t count, *irks = ctrl_irks_get(&count);
    eb90:	a810      	add	r0, sp, #64	; 0x40
    eb92:	f003 fadd 	bl	12150 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    eb96:	4601      	mov	r1, r0
    eb98:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    eb9c:	f004 fe0e 	bl	137bc <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    eba0:	2100      	movs	r1, #0
    eba2:	4608      	mov	r0, r1
    eba4:	f004 fb7f 	bl	132a6 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    eba8:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    ebaa:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    ebac:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    ebae:	4608      	mov	r0, r1
    ebb0:	f004 fb75 	bl	1329e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    ebb4:	1a28      	subs	r0, r5, r0
    ebb6:	f004 fd07 	bl	135c8 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    ebba:	f004 fc03 	bl	133c4 <radio_rssi_measure>
}
    ebbe:	b013      	add	sp, #76	; 0x4c
    ebc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    ebc4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    ebc8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    ebcc:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    ebd0:	2100      	movs	r1, #0
    ebd2:	09d3      	lsrs	r3, r2, #7
    ebd4:	f000 0007 	and.w	r0, r0, #7
    ebd8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ebdc:	f004 fbda 	bl	13394 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    ebe0:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    ebe4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    ebe8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    ebec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    ebf0:	3108      	adds	r1, #8
    ebf2:	f7fb fb3b 	bl	a26c <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    ebf6:	f004 fb85 	bl	13304 <radio_is_ready>
    ebfa:	2800      	cmp	r0, #0
    ebfc:	d18e      	bne.n	eb1c <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    ebfe:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    ec02:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    ec06:	2101      	movs	r1, #1
    ec08:	f000 0007 	and.w	r0, r0, #7
    ec0c:	f004 fb4b 	bl	132a6 <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    ec10:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    ec14:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    ec18:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    ec1c:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    ec1e:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    ec20:	4405      	add	r5, r0
	switch (phy) {
    ec22:	d013      	beq.n	ec4c <isr+0x1e4>
		return 40;
    ec24:	2b04      	cmp	r3, #4
    ec26:	bf0c      	ite	eq
    ec28:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    ec2c:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    ec2e:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    ec30:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    ec34:	09c1      	lsrs	r1, r0, #7
    ec36:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    ec3a:	f004 fb30 	bl	1329e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    ec3e:	1a28      	subs	r0, r5, r0
    ec40:	f004 fcc2 	bl	135c8 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    ec44:	2001      	movs	r0, #1
    ec46:	f7fc f95f 	bl	af08 <packet_tx_enqueue>
    ec4a:	e7b8      	b.n	ebbe <isr+0x156>
		return 24;
    ec4c:	2018      	movs	r0, #24
    ec4e:	e7ee      	b.n	ec2e <isr+0x1c6>
		LL_ASSERT(0);
    ec50:	4a4b      	ldr	r2, [pc, #300]	; (ed80 <isr+0x318>)
    ec52:	4b4c      	ldr	r3, [pc, #304]	; (ed84 <isr+0x31c>)
    ec54:	9201      	str	r2, [sp, #4]
    ec56:	9200      	str	r2, [sp, #0]
    ec58:	681c      	ldr	r4, [r3, #0]
    ec5a:	4b4b      	ldr	r3, [pc, #300]	; (ed88 <isr+0x320>)
		LL_ASSERT(0);
    ec5c:	494b      	ldr	r1, [pc, #300]	; (ed8c <isr+0x324>)
    ec5e:	484d      	ldr	r0, [pc, #308]	; (ed94 <isr+0x32c>)
    ec60:	e2b5      	b.n	f1ce <isr+0x766>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    ec62:	b926      	cbnz	r6, ec6e <isr+0x206>
		_radio.state = STATE_CLOSE;
    ec64:	2303      	movs	r3, #3
    ec66:	7523      	strb	r3, [r4, #20]
		radio_disable();
    ec68:	f004 fb2e 	bl	132c8 <radio_disable>
    ec6c:	e7a7      	b.n	ebbe <isr+0x156>
	switch (_radio.role) {
    ec6e:	7ce3      	ldrb	r3, [r4, #19]
    ec70:	3b01      	subs	r3, #1
    ec72:	2b03      	cmp	r3, #3
    ec74:	f201 8150 	bhi.w	ff18 <isr+0x14b0>
    ec78:	e8df f013 	tbh	[pc, r3, lsl #1]
    ec7c:	02b00004 	.word	0x02b00004
    ec80:	05eb05eb 	.word	0x05eb05eb
		if (crc_ok) {
    ec84:	2f00      	cmp	r7, #0
    ec86:	d0ed      	beq.n	ec64 <isr+0x1fc>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    ec88:	f1ba 0f00 	cmp.w	sl, #0
    ec8c:	d039      	beq.n	ed02 <isr+0x29a>
    ec8e:	4658      	mov	r0, fp
    ec90:	f003 fabe 	bl	12210 <ctrl_rl_irk_idx>
    ec94:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    ec98:	f004 fb6c 	bl	13374 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    ec9c:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    eca0:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    eca2:	232b      	movs	r3, #43	; 0x2b
    eca4:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    eca6:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    eca8:	fb11 3302 	smlabb	r3, r1, r2, r3
    ecac:	930a      	str	r3, [sp, #40]	; 0x28
    ecae:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    ecb0:	f000 030f 	and.w	r3, r0, #15
    ecb4:	2b03      	cmp	r3, #3
    ecb6:	d10a      	bne.n	ecce <isr+0x266>
    ecb8:	7873      	ldrb	r3, [r6, #1]
    ecba:	2b0c      	cmp	r3, #12
    ecbc:	d107      	bne.n	ecce <isr+0x266>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    ecbe:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ecc2:	065f      	lsls	r7, r3, #25
    ecc4:	d51f      	bpl.n	ed06 <isr+0x29e>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    ecc6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    ecca:	0658      	lsls	r0, r3, #25
    eccc:	d44b      	bmi.n	ed66 <isr+0x2fe>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    ecce:	7830      	ldrb	r0, [r6, #0]
    ecd0:	f000 030f 	and.w	r3, r0, #15
    ecd4:	2b05      	cmp	r3, #5
    ecd6:	d1c5      	bne.n	ec64 <isr+0x1fc>
    ecd8:	7873      	ldrb	r3, [r6, #1]
    ecda:	2b22      	cmp	r3, #34	; 0x22
    ecdc:	d1c2      	bne.n	ec64 <isr+0x1fc>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    ecde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ece0:	5ce3      	ldrb	r3, [r4, r3]
    ece2:	f003 030f 	and.w	r3, r3, #15
    ece6:	2b01      	cmp	r3, #1
    ece8:	f040 8152 	bne.w	ef90 <isr+0x528>
					    ci->connect_ind.init_addr,
    ecec:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    ecee:	aa10      	add	r2, sp, #64	; 0x40
    ecf0:	4639      	mov	r1, r7
    ecf2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    ecf6:	f003 fca1 	bl	1263c <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    ecfa:	2800      	cmp	r0, #0
    ecfc:	d14e      	bne.n	ed9c <isr+0x334>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ecfe:	2000      	movs	r0, #0
    ed00:	e05c      	b.n	edbc <isr+0x354>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    ed02:	20ff      	movs	r0, #255	; 0xff
    ed04:	e7c6      	b.n	ec94 <isr+0x22c>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    ed06:	aa10      	add	r2, sp, #64	; 0x40
    ed08:	1cb1      	adds	r1, r6, #2
    ed0a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    ed0e:	f003 fc95 	bl	1263c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    ed12:	2800      	cmp	r0, #0
    ed14:	d0d7      	beq.n	ecc6 <isr+0x25e>
	return (adv->tx_addr == sr->rx_addr) &&
    ed16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ed18:	7832      	ldrb	r2, [r6, #0]
    ed1a:	5ce3      	ldrb	r3, [r4, r3]
    ed1c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ed20:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    ed24:	d1d3      	bne.n	ecce <isr+0x266>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    ed26:	2206      	movs	r2, #6
    ed28:	f106 0108 	add.w	r1, r6, #8
    ed2c:	1ca8      	adds	r0, r5, #2
    ed2e:	f7f2 ff62 	bl	1bf6 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    ed32:	2800      	cmp	r0, #0
    ed34:	d1cb      	bne.n	ecce <isr+0x266>
		_radio.state = STATE_CLOSE;
    ed36:	2303      	movs	r3, #3
    ed38:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    ed3a:	f004 fb35 	bl	133a8 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    ed3e:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    ed42:	2327      	movs	r3, #39	; 0x27
    ed44:	fb03 4000 	mla	r0, r3, r0, r4
    ed48:	307b      	adds	r0, #123	; 0x7b
    ed4a:	f004 fa9d 	bl	13288 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    ed4e:	f004 fad9 	bl	13304 <radio_is_ready>
    ed52:	2800      	cmp	r0, #0
    ed54:	f43f af33 	beq.w	ebbe <isr+0x156>
    ed58:	4a09      	ldr	r2, [pc, #36]	; (ed80 <isr+0x318>)
    ed5a:	4b0a      	ldr	r3, [pc, #40]	; (ed84 <isr+0x31c>)
    ed5c:	9201      	str	r2, [sp, #4]
    ed5e:	9200      	str	r2, [sp, #0]
    ed60:	681c      	ldr	r4, [r3, #0]
    ed62:	4b0d      	ldr	r3, [pc, #52]	; (ed98 <isr+0x330>)
    ed64:	e6e0      	b.n	eb28 <isr+0xc0>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    ed66:	f1b9 0f00 	cmp.w	r9, #0
    ed6a:	d1d4      	bne.n	ed16 <isr+0x2ae>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ed6c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    ed70:	f003 fa94 	bl	1229c <ctrl_irk_whitelisted>
    ed74:	2800      	cmp	r0, #0
    ed76:	d1ce      	bne.n	ed16 <isr+0x2ae>
    ed78:	e7a9      	b.n	ecce <isr+0x266>
    ed7a:	bf00      	nop
    ed7c:	200008f0 	.word	0x200008f0
    ed80:	000159e9 	.word	0x000159e9
    ed84:	20003ad4 	.word	0x20003ad4
    ed88:	00017de8 	.word	0x00017de8
    ed8c:	00016791 	.word	0x00016791
    ed90:	00018560 	.word	0x00018560
    ed94:	000166ef 	.word	0x000166ef
    ed98:	00017dfb 	.word	0x00017dfb
		       isr_adv_ci_adva_check(adv, ci) &&
    ed9c:	4631      	mov	r1, r6
    ed9e:	4628      	mov	r0, r5
    eda0:	f7fb fd4e 	bl	a840 <isr_adv_ci_adva_check>
					    rl_idx) &&
    eda4:	2800      	cmp	r0, #0
    eda6:	d0aa      	beq.n	ecfe <isr+0x296>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    eda8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    edac:	2bff      	cmp	r3, #255	; 0xff
    edae:	f000 80dc 	beq.w	ef6a <isr+0x502>
		return rl_idx == _radio.advertiser.rl_idx;
    edb2:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    edb6:	1ac1      	subs	r1, r0, r3
    edb8:	4248      	negs	r0, r1
    edba:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    edbc:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    edc0:	2800      	cmp	r0, #0
    edc2:	f43f af4f 	beq.w	ec64 <isr+0x1fc>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    edc6:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    edca:	b133      	cbz	r3, edda <isr+0x372>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    edcc:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    edd0:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    edd4:	429a      	cmp	r2, r3
    edd6:	f47f af45 	bne.w	ec64 <isr+0x1fc>
    edda:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    edde:	2b00      	cmp	r3, #0
    ede0:	f43f af40 	beq.w	ec64 <isr+0x1fc>
			node_rx = packet_rx_reserve_get(4);
    ede4:	2004      	movs	r0, #4
    ede6:	f7fa fed7 	bl	9b98 <packet_rx_reserve_get>
		if (!node_rx) {
    edea:	4607      	mov	r7, r0
    edec:	2800      	cmp	r0, #0
    edee:	f43f af39 	beq.w	ec64 <isr+0x1fc>
		_radio.state = STATE_STOP;
    edf2:	f04f 0904 	mov.w	r9, #4
    edf6:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    edfa:	f004 fa65 	bl	132c8 <radio_disable>
		conn = _radio.advertiser.conn;
    edfe:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ee02:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    ee06:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ee08:	f44f 72aa 	mov.w	r2, #340	; 0x154
    ee0c:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    ee0e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ee12:	f7f7 ff82 	bl	6d1a <mem_index_get>
		memcpy(&conn->access_addr[0],
    ee16:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ee1a:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    ee1c:	2203      	movs	r2, #3
    ee1e:	f106 0112 	add.w	r1, r6, #18
    ee22:	f105 0014 	add.w	r0, r5, #20
    ee26:	f7f2 fefb 	bl	1c20 <memcpy>
		memcpy(&conn->data_chan_map[0],
    ee2a:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    ee2e:	464a      	mov	r2, r9
    ee30:	f106 010e 	add.w	r1, r6, #14
    ee34:	4650      	mov	r0, sl
    ee36:	f7f2 fef3 	bl	1c20 <memcpy>
		memcpy(&conn->data_chan_map[0],
    ee3a:	2205      	movs	r2, #5
    ee3c:	f106 011e 	add.w	r1, r6, #30
    ee40:	4640      	mov	r0, r8
    ee42:	f7f2 feed 	bl	1c20 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    ee46:	2105      	movs	r1, #5
    ee48:	4640      	mov	r0, r8
    ee4a:	f7f8 f8d9 	bl	7000 <util_ones_count_get>
		conn->data_chan_count =
    ee4e:	7f6b      	ldrb	r3, [r5, #29]
    ee50:	f360 0305 	bfi	r3, r0, #0, #6
    ee54:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    ee56:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    ee5a:	f3c3 0304 	ubfx	r3, r3, #0, #5
    ee5e:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    ee60:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    ee62:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    ee64:	f240 48e2 	movw	r8, #1250	; 0x4e2
    ee68:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    ee6c:	7ef2      	ldrb	r2, [r6, #27]
    ee6e:	7eb3      	ldrb	r3, [r6, #26]
    ee70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    ee74:	4651      	mov	r1, sl
    ee76:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    ee78:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    ee7a:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    ee7e:	f7f2 fecf 	bl	1c20 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    ee82:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ee84:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    ee86:	f242 7210 	movw	r2, #10000	; 0x2710
    ee8a:	fb02 8303 	mla	r3, r2, r3, r8
    ee8e:	3b01      	subs	r3, #1
    ee90:	fbb3 f3f8 	udiv	r3, r3, r8
    ee94:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    ee96:	4b54      	ldr	r3, [pc, #336]	; (efe8 <isr+0x580>)
    ee98:	4443      	add	r3, r8
    ee9a:	fbb3 f3f8 	udiv	r3, r3, r8
    ee9e:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    eea2:	4b52      	ldr	r3, [pc, #328]	; (efec <isr+0x584>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eea4:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    eea6:	4443      	add	r3, r8
    eea8:	fbb3 f3f8 	udiv	r3, r3, r8
    eeac:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eeae:	4282      	cmp	r2, r0
    eeb0:	4613      	mov	r3, r2
    eeb2:	bfc4      	itt	gt
    eeb4:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    eeb8:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    eeba:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eebe:	bfc4      	itt	gt
    eec0:	18d2      	addgt	r2, r2, r3
    eec2:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    eec4:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eec6:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    eeca:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    eecc:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    eece:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    eed0:	2300      	movs	r3, #0
    eed2:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    eed4:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    eed6:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    eeda:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    eedc:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    eee0:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    eee4:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    eee6:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    eeea:	464a      	mov	r2, r9
    eeec:	f107 001b 	add.w	r0, r7, #27
    eef0:	f7f2 fe96 	bl	1c20 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    eef4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    eef8:	f107 030e 	add.w	r3, r7, #14
    eefc:	28ff      	cmp	r0, #255	; 0xff
    eefe:	930b      	str	r3, [sp, #44]	; 0x2c
    ef00:	f106 0a02 	add.w	sl, r6, #2
    ef04:	f107 0b14 	add.w	fp, r7, #20
    ef08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ef0a:	d060      	beq.n	efce <isr+0x566>
			ll_rl_id_addr_get(rl_idx,
    ef0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ef0e:	f107 010d 	add.w	r1, r7, #13
    ef12:	f003 fb53 	bl	125bc <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    ef16:	7b7b      	ldrb	r3, [r7, #13]
    ef18:	3302      	adds	r3, #2
    ef1a:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    ef1c:	464a      	mov	r2, r9
    ef1e:	4651      	mov	r1, sl
    ef20:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ef22:	f7f2 fe7d 	bl	1c20 <memcpy>
			pdu_adv->connect_ind.interval;
    ef26:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    ef28:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    ef2c:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    ef2e:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    ef32:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    ef34:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    ef38:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    ef3c:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    ef40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    ef44:	8c28      	ldrh	r0, [r5, #32]
    ef46:	f7fb fd91 	bl	aa6c <rx_fc_lock>
		packet_rx_enqueue();
    ef4a:	f7fb fc9d 	bl	a888 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    ef4e:	2003      	movs	r0, #3
    ef50:	f7fa fe22 	bl	9b98 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    ef54:	2800      	cmp	r0, #0
    ef56:	d155      	bne.n	f004 <isr+0x59c>
    ef58:	4a25      	ldr	r2, [pc, #148]	; (eff0 <isr+0x588>)
    ef5a:	4b26      	ldr	r3, [pc, #152]	; (eff4 <isr+0x58c>)
    ef5c:	9201      	str	r2, [sp, #4]
    ef5e:	9200      	str	r2, [sp, #0]
    ef60:	681c      	ldr	r4, [r3, #0]
    ef62:	4b25      	ldr	r3, [pc, #148]	; (eff8 <isr+0x590>)
			LL_ASSERT(node_rx);
    ef64:	4925      	ldr	r1, [pc, #148]	; (effc <isr+0x594>)
    ef66:	4826      	ldr	r0, [pc, #152]	; (f000 <isr+0x598>)
    ef68:	e131      	b.n	f1ce <isr+0x766>
	return (adv->rx_addr == ci->tx_addr) &&
    ef6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ef6c:	5ce2      	ldrb	r2, [r4, r3]
    ef6e:	7833      	ldrb	r3, [r6, #0]
    ef70:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ef74:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    ef78:	f47f aec1 	bne.w	ecfe <isr+0x296>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    ef7c:	2206      	movs	r2, #6
    ef7e:	4639      	mov	r1, r7
    ef80:	f105 0008 	add.w	r0, r5, #8
    ef84:	f7f2 fe37 	bl	1bf6 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    ef88:	fab0 f080 	clz	r0, r0
    ef8c:	0940      	lsrs	r0, r0, #5
    ef8e:	e715      	b.n	edbc <isr+0x354>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    ef90:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ef94:	09db      	lsrs	r3, r3, #7
    ef96:	d00d      	beq.n	efb4 <isr+0x54c>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    ef98:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    ef9c:	09db      	lsrs	r3, r3, #7
    ef9e:	f43f aeae 	beq.w	ecfe <isr+0x296>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    efa2:	f1b9 0f00 	cmp.w	r9, #0
    efa6:	d10d      	bne.n	efc4 <isr+0x55c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    efa8:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    efac:	f003 f976 	bl	1229c <ctrl_irk_whitelisted>
    efb0:	b940      	cbnz	r0, efc4 <isr+0x55c>
    efb2:	e6a4      	b.n	ecfe <isr+0x296>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    efb4:	aa10      	add	r2, sp, #64	; 0x40
    efb6:	1cb1      	adds	r1, r6, #2
    efb8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    efbc:	f003 fb3e 	bl	1263c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    efc0:	2800      	cmp	r0, #0
    efc2:	d0e9      	beq.n	ef98 <isr+0x530>
	       isr_adv_ci_adva_check(adv, ci);
    efc4:	4631      	mov	r1, r6
    efc6:	4628      	mov	r0, r5
    efc8:	f7fb fc3a 	bl	a840 <isr_adv_ci_adva_check>
    efcc:	e6f6      	b.n	edbc <isr+0x354>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    efce:	4619      	mov	r1, r3
    efd0:	464a      	mov	r2, r9
    efd2:	4658      	mov	r0, fp
    efd4:	f7f2 fe50 	bl	1c78 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    efd8:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    efda:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    efdc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    efe0:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    efe2:	464a      	mov	r2, r9
    efe4:	4651      	mov	r1, sl
    efe6:	e79c      	b.n	ef22 <isr+0x4ba>
    efe8:	026259ff 	.word	0x026259ff
    efec:	01c9c37f 	.word	0x01c9c37f
    eff0:	000159e9 	.word	0x000159e9
    eff4:	20003ad4 	.word	0x20003ad4
    eff8:	00017dfb 	.word	0x00017dfb
    effc:	00016791 	.word	0x00016791
    f000:	00018997 	.word	0x00018997
			node_rx->hdr.handle = conn->handle;
    f004:	8c2b      	ldrh	r3, [r5, #32]
    f006:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    f008:	230b      	movs	r3, #11
    f00a:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    f00c:	7833      	ldrb	r3, [r6, #0]
    f00e:	f013 0320 	ands.w	r3, r3, #32
    f012:	d00e      	beq.n	f032 <isr+0x5ca>
					((u16_t)conn->access_addr[1] << 8) |
    f014:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    f016:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    f018:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    f01a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    f01e:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    f020:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    f024:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    f026:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    f028:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    f02c:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    f02e:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    f030:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    f032:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    f034:	f7fb fc28 	bl	a888 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    f038:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    f03c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    f040:	497d      	ldr	r1, [pc, #500]	; (f238 <isr+0x7d0>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    f042:	0952      	lsrs	r2, r2, #5
    f044:	f362 0384 	bfi	r3, r2, #2, #3
    f048:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    f04c:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    f050:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    f054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    f058:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    f05a:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    f05e:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    f062:	4a76      	ldr	r2, [pc, #472]	; (f23c <isr+0x7d4>)
    f064:	f203 233f 	addw	r3, r3, #575	; 0x23f
    f068:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    f06c:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    f06e:	ea4f 0358 	mov.w	r3, r8, lsr #1
    f072:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    f074:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    f076:	7d73      	ldrb	r3, [r6, #21]
    f078:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    f07c:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    f07e:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    f082:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    f084:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    f086:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    f088:	4638      	mov	r0, r7
    f08a:	f004 f90a 	bl	132a2 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    f08e:	496c      	ldr	r1, [pc, #432]	; (f240 <isr+0x7d8>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    f090:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    f092:	f200 4052 	addw	r0, r0, #1106	; 0x452
    f096:	a366      	add	r3, pc, #408	; (adr r3, f230 <isr+0x7c8>)
    f098:	e9d3 2300 	ldrd	r2, r3, [r3]
    f09c:	fba0 0101 	umull	r0, r1, r0, r1
    f0a0:	f7f1 f8b8 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f0a4:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    f0a8:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    f0aa:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f0ac:	4293      	cmp	r3, r2
    f0ae:	bf38      	it	cc
    f0b0:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    f0b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f0b6:	469a      	mov	sl, r3
		conn_interval_us -=
    f0b8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    f0ba:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    f0bc:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    f0be:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    f0c0:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    f0c4:	f004 fae4 	bl	13690 <radio_tmr_end_get>
    f0c8:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    f0ca:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    f0cc:	4639      	mov	r1, r7
		conn_offset_us +=
    f0ce:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    f0d2:	4638      	mov	r0, r7
    f0d4:	f004 f8e3 	bl	1329e <radio_tx_chain_delay_get>
    f0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f0da:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    f0de:	4499      	add	r9, r3
    f0e0:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    f0e4:	eba9 030b 	sub.w	r3, r9, fp
    f0e8:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f0ea:	f240 4383 	movw	r3, #1155	; 0x483
    f0ee:	9300      	str	r3, [sp, #0]
    f0f0:	2205      	movs	r2, #5
    f0f2:	4b54      	ldr	r3, [pc, #336]	; (f244 <isr+0x7dc>)
    f0f4:	f8df b148 	ldr.w	fp, [pc, #328]	; f240 <isr+0x7d8>
    f0f8:	4639      	mov	r1, r7
    f0fa:	4638      	mov	r0, r7
    f0fc:	f7f8 fcfc 	bl	7af8 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    f100:	f240 4184 	movw	r1, #1156	; 0x484
    f104:	f7fb fcea 	bl	aadc <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    f108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f10a:	5ce3      	ldrb	r3, [r4, r3]
    f10c:	f003 030f 	and.w	r3, r3, #15
    f110:	2b01      	cmp	r3, #1
    f112:	d106      	bne.n	f122 <isr+0x6ba>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f114:	9700      	str	r7, [sp, #0]
    f116:	463b      	mov	r3, r7
    f118:	2203      	movs	r2, #3
    f11a:	4639      	mov	r1, r7
    f11c:	4638      	mov	r0, r7
    f11e:	f7f8 fceb 	bl	7af8 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f122:	fba8 890b 	umull	r8, r9, r8, fp
    f126:	a342      	add	r3, pc, #264	; (adr r3, f230 <isr+0x7c8>)
    f128:	e9d3 2300 	ldrd	r2, r3, [r3]
    f12c:	4640      	mov	r0, r8
    f12e:	4649      	mov	r1, r9
    f130:	f7f1 f870 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f134:	f895 3020 	ldrb.w	r3, [r5, #32]
    f138:	68a4      	ldr	r4, [r4, #8]
    f13a:	9506      	str	r5, [sp, #24]
    f13c:	3307      	adds	r3, #7
    f13e:	b2db      	uxtb	r3, r3
    f140:	930a      	str	r3, [sp, #40]	; 0x28
    f142:	f240 439b 	movw	r3, #1179	; 0x49b
    f146:	9308      	str	r3, [sp, #32]
    f148:	4b3f      	ldr	r3, [pc, #252]	; (f248 <isr+0x7e0>)
    f14a:	9307      	str	r3, [sp, #28]
    f14c:	4b3f      	ldr	r3, [pc, #252]	; (f24c <isr+0x7e4>)
    f14e:	9305      	str	r3, [sp, #20]
    f150:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f152:	4a3f      	ldr	r2, [pc, #252]	; (f250 <isr+0x7e8>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f154:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f156:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f158:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f15a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f15e:	2307      	movs	r3, #7
    f160:	2100      	movs	r1, #0
    f162:	4343      	muls	r3, r0
    f164:	fb02 3301 	mla	r3, r2, r1, r3
    f168:	fba0 1202 	umull	r1, r2, r0, r2
    f16c:	441a      	add	r2, r3
    f16e:	4608      	mov	r0, r1
    f170:	ebb8 0000 	subs.w	r0, r8, r0
    f174:	4611      	mov	r1, r2
    f176:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f17a:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f17c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f180:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f182:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f184:	f7f1 f846 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f188:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f18a:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f18c:	a328      	add	r3, pc, #160	; (adr r3, f230 <isr+0x7c8>)
    f18e:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f192:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f196:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f19a:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f19c:	f7f1 f83a 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f1a0:	eba4 040a 	sub.w	r4, r4, sl
    f1a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f1a8:	9000      	str	r0, [sp, #0]
    f1aa:	4623      	mov	r3, r4
    f1ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f1ae:	4629      	mov	r1, r5
    f1b0:	4628      	mov	r0, r5
    f1b2:	f7f8 fc03 	bl	79bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f1b6:	f030 0302 	bics.w	r3, r0, #2
    f1ba:	f43f ad00 	beq.w	ebbe <isr+0x156>
    f1be:	4a25      	ldr	r2, [pc, #148]	; (f254 <isr+0x7ec>)
    f1c0:	4b25      	ldr	r3, [pc, #148]	; (f258 <isr+0x7f0>)
    f1c2:	9201      	str	r2, [sp, #4]
    f1c4:	9200      	str	r2, [sp, #0]
    f1c6:	681c      	ldr	r4, [r3, #0]
    f1c8:	4b24      	ldr	r3, [pc, #144]	; (f25c <isr+0x7f4>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f1ca:	4925      	ldr	r1, [pc, #148]	; (f260 <isr+0x7f8>)
    f1cc:	4825      	ldr	r0, [pc, #148]	; (f264 <isr+0x7fc>)
		LL_ASSERT(0);
    f1ce:	47a0      	blx	r4
    f1d0:	4040      	eors	r0, r0
    f1d2:	f380 8811 	msr	BASEPRI, r0
    f1d6:	f04f 0004 	mov.w	r0, #4
    f1da:	df02      	svc	2
		rl_idx = devmatch_ok ?
    f1dc:	f1b9 0f00 	cmp.w	r9, #0
    f1e0:	d01c      	beq.n	f21c <isr+0x7b4>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    f1e2:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    f1e6:	4641      	mov	r1, r8
    f1e8:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f1ec:	f002 ffba 	bl	12164 <ctrl_rl_idx>
    f1f0:	4680      	mov	r8, r0
		if (crc_ok &&
    f1f2:	b147      	cbz	r7, f206 <isr+0x79e>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f1f4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f1f8:	06da      	lsls	r2, r3, #27
    f1fa:	d535      	bpl.n	f268 <isr+0x800>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f1fc:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f200:	06db      	lsls	r3, r3, #27
    f202:	f100 811f 	bmi.w	f444 <isr+0x9dc>
			_radio.state = STATE_CLOSE;
    f206:	2303      	movs	r3, #3
    f208:	7523      	strb	r3, [r4, #20]
			radio_disable();
    f20a:	f004 f85d 	bl	132c8 <radio_disable>
			_radio.scanner.state = 0;
    f20e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    f212:	f36f 0341 	bfc	r3, #1, #1
    f216:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    f21a:	e4d0      	b.n	ebbe <isr+0x156>
		rl_idx = devmatch_ok ?
    f21c:	f1ba 0f00 	cmp.w	sl, #0
    f220:	d003      	beq.n	f22a <isr+0x7c2>
    f222:	4658      	mov	r0, fp
    f224:	f002 fff4 	bl	12210 <ctrl_rl_irk_idx>
    f228:	e7e2      	b.n	f1f0 <isr+0x788>
    f22a:	f04f 08ff 	mov.w	r8, #255	; 0xff
    f22e:	e7e0      	b.n	f1f2 <isr+0x78a>
    f230:	1afd498d 	.word	0x1afd498d
    f234:	00000007 	.word	0x00000007
    f238:	00018550 	.word	0x00018550
    f23c:	000f4240 	.word	0x000f4240
    f240:	3b9aca00 	.word	0x3b9aca00
    f244:	0000aadd 	.word	0x0000aadd
    f248:	0000aaa1 	.word	0x0000aaa1
    f24c:	0000d34d 	.word	0x0000d34d
    f250:	1afd498d 	.word	0x1afd498d
    f254:	000159e9 	.word	0x000159e9
    f258:	20003ad4 	.word	0x20003ad4
    f25c:	00017dfb 	.word	0x00017dfb
    f260:	00016791 	.word	0x00016791
    f264:	000182f1 	.word	0x000182f1
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f268:	f1b9 0f00 	cmp.w	r9, #0
    f26c:	d005      	beq.n	f27a <isr+0x812>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f26e:	4641      	mov	r1, r8
    f270:	4650      	mov	r0, sl
    f272:	f003 f971 	bl	12558 <ctrl_rl_idx_allowed>
    f276:	2800      	cmp	r0, #0
    f278:	d0c0      	beq.n	f1fc <isr+0x794>
	bool dir_report = false;
    f27a:	2300      	movs	r3, #0
    f27c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    f280:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f284:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    f288:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    f28c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    f290:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    f294:	2b00      	cmp	r3, #0
    f296:	f000 80ee 	beq.w	f476 <isr+0xa0e>
    f29a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f29e:	b133      	cbz	r3, f2ae <isr+0x846>
				      (_radio.fc_req == _radio.fc_ack)) &&
    f2a0:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    f2a4:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f2a8:	429a      	cmp	r2, r3
    f2aa:	f040 80e4 	bne.w	f476 <isr+0xa0e>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    f2ae:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    f2b2:	f3c3 1000 	ubfx	r0, r3, #4, #1
    f2b6:	2800      	cmp	r0, #0
    f2b8:	f000 80cf 	beq.w	f45a <isr+0x9f2>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    f2bc:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    f2c0:	f010 000f 	ands.w	r0, r0, #15
    f2c4:	f040 814e 	bne.w	f564 <isr+0xafc>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    f2c8:	f004 f9e2 	bl	13690 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    f2cc:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    f2d0:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    f2d4:	48b8      	ldr	r0, [pc, #736]	; (f5b8 <isr+0xb50>)
    f2d6:	2207      	movs	r2, #7
    f2d8:	fba3 0100 	umull	r0, r1, r3, r0
    f2dc:	fb02 1103 	mla	r1, r2, r3, r1
    f2e0:	a3b3      	add	r3, pc, #716	; (adr r3, f5b0 <isr+0xb48>)
    f2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    f2e6:	f7f0 ff95 	bl	214 <__aeabi_uldivmod>
    f2ea:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    f2ee:	4287      	cmp	r7, r0
    f2f0:	f080 80c1 	bcs.w	f476 <isr+0xa0e>
			node_rx = packet_rx_reserve_get(4);
    f2f4:	2004      	movs	r0, #4
    f2f6:	f7fa fc4f 	bl	9b98 <packet_rx_reserve_get>
		if (node_rx == 0) {
    f2fa:	4607      	mov	r7, r0
    f2fc:	2800      	cmp	r0, #0
    f2fe:	d082      	beq.n	f206 <isr+0x79e>
		_radio.state = STATE_STOP;
    f300:	2304      	movs	r3, #4
    f302:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    f304:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    f306:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    f30a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f30e:	f004 f831 	bl	13374 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    f312:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    f314:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    f318:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    f31c:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f31e:	f899 3008 	ldrb.w	r3, [r9, #8]
    f322:	7802      	ldrb	r2, [r0, #0]
    f324:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f328:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    f32c:	2322      	movs	r3, #34	; 0x22
    f32e:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f330:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f332:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    f334:	4640      	mov	r0, r8
    f336:	f002 fef7 	bl	12128 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    f33a:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    f33e:	4601      	mov	r1, r0
    f340:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    f342:	f013 0f01 	tst.w	r3, #1
    f346:	f810 3b02 	ldrb.w	r3, [r0], #2
    f34a:	f000 8116 	beq.w	f57a <isr+0xb12>
    f34e:	2900      	cmp	r1, #0
    f350:	f000 8113 	beq.w	f57a <isr+0xb12>
			pdu_adv_tx->tx_addr = 1;
    f354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f358:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f35a:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f35c:	f7f2 fc60 	bl	1c20 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    f360:	f105 0308 	add.w	r3, r5, #8
    f364:	4618      	mov	r0, r3
    f366:	2206      	movs	r2, #6
    f368:	f109 010a 	add.w	r1, r9, #10
    f36c:	930a      	str	r3, [sp, #40]	; 0x28
    f36e:	f7f2 fc57 	bl	1c20 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    f372:	2204      	movs	r2, #4
    f374:	f106 0110 	add.w	r1, r6, #16
    f378:	f105 000e 	add.w	r0, r5, #14
    f37c:	f7f2 fc50 	bl	1c20 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    f380:	2203      	movs	r2, #3
    f382:	f106 0114 	add.w	r1, r6, #20
    f386:	f105 0012 	add.w	r0, r5, #18
    f38a:	f7f2 fc49 	bl	1c20 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    f38e:	2301      	movs	r3, #1
    f390:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    f392:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    f396:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f39a:	4353      	muls	r3, r2
    f39c:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    f39e:	f004 f977 	bl	13690 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    f3a2:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    f3a4:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    f3a8:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    f3aa:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    f3ae:	bfd8      	it	le
    f3b0:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    f3b4:	f1bb 0f00 	cmp.w	fp, #0
    f3b8:	f040 80ea 	bne.w	f590 <isr+0xb28>
			pdu_adv_tx->connect_ind.win_offset = 0;
    f3bc:	f885 b016 	strb.w	fp, [r5, #22]
    f3c0:	f885 b017 	strb.w	fp, [r5, #23]
    f3c4:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    f3c6:	2100      	movs	r1, #0
    f3c8:	4608      	mov	r0, r1
    f3ca:	f003 ff63 	bl	13294 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    f3ce:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    f3d0:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    f3d4:	4608      	mov	r0, r1
    f3d6:	f003 ff62 	bl	1329e <radio_tx_chain_delay_get>
    f3da:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    f3de:	f100 031e 	add.w	r3, r0, #30
    f3e2:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    f3e4:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    f3e8:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    f3ea:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    f3ee:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    f3f0:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    f3f4:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    f3f6:	f106 0117 	add.w	r1, r6, #23
    f3fa:	2205      	movs	r2, #5
    f3fc:	f105 001e 	add.w	r0, r5, #30
    f400:	f7f2 fc0e 	bl	1c20 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    f404:	7fb2      	ldrb	r2, [r6, #30]
    f406:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    f40a:	f362 0304 	bfi	r3, r2, #0, #5
    f40e:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    f412:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    f416:	f362 1347 	bfi	r3, r2, #5, #3
    f41a:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    f41e:	f003 ffc3 	bl	133a8 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    f422:	4628      	mov	r0, r5
    f424:	f003 ff30 	bl	13288 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    f428:	f003 ff6c 	bl	13304 <radio_is_ready>
    f42c:	4683      	mov	fp, r0
    f42e:	2800      	cmp	r0, #0
    f430:	f000 80ce 	beq.w	f5d0 <isr+0xb68>
		LL_ASSERT(!radio_is_ready());
    f434:	4a61      	ldr	r2, [pc, #388]	; (f5bc <isr+0xb54>)
    f436:	4b62      	ldr	r3, [pc, #392]	; (f5c0 <isr+0xb58>)
    f438:	9201      	str	r2, [sp, #4]
    f43a:	9200      	str	r2, [sp, #0]
    f43c:	681c      	ldr	r4, [r3, #0]
    f43e:	4b61      	ldr	r3, [pc, #388]	; (f5c4 <isr+0xb5c>)
    f440:	f7ff bb72 	b.w	eb28 <isr+0xc0>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f444:	f1b9 0f00 	cmp.w	r9, #0
    f448:	f47f af17 	bne.w	f27a <isr+0x812>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    f44c:	4640      	mov	r0, r8
    f44e:	f002 ff25 	bl	1229c <ctrl_irk_whitelisted>
		if (crc_ok &&
    f452:	2800      	cmp	r0, #0
    f454:	f43f aed7 	beq.w	f206 <isr+0x79e>
    f458:	e70f      	b.n	f27a <isr+0x812>
	if (rl_idx != FILTER_IDX_NONE) {
    f45a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    f45e:	d06f      	beq.n	f540 <isr+0xad8>
		return (rl_idx == _radio.scanner.rl_idx);
    f460:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    f464:	eba0 0e08 	sub.w	lr, r0, r8
    f468:	f1de 0000 	rsbs	r0, lr, #0
    f46c:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    f470:	2800      	cmp	r0, #0
    f472:	f47f af23 	bne.w	f2bc <isr+0x854>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f476:	f899 0008 	ldrb.w	r0, [r9, #8]
    f47a:	f010 000f 	ands.w	r0, r0, #15
    f47e:	d002      	beq.n	f486 <isr+0xa1e>
    f480:	2806      	cmp	r0, #6
    f482:	f040 81b0 	bne.w	f7e6 <isr+0xd7e>
		 (_radio.scanner.type != 0) &&
    f486:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    f48a:	071f      	lsls	r7, r3, #28
    f48c:	f140 8195 	bpl.w	f7ba <isr+0xd52>
		 (_radio.scanner.type != 0) &&
    f490:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    f494:	2a00      	cmp	r2, #0
    f496:	f040 8190 	bne.w	f7ba <isr+0xd52>
		err = isr_rx_scan_report(rssi_ready,
    f49a:	f1ba 0f00 	cmp.w	sl, #0
    f49e:	bf14      	ite	ne
    f4a0:	4641      	movne	r1, r8
    f4a2:	21ff      	moveq	r1, #255	; 0xff
    f4a4:	4628      	mov	r0, r5
    f4a6:	f7fb fa89 	bl	a9bc <isr_rx_scan_report>
		if (err) {
    f4aa:	2800      	cmp	r0, #0
    f4ac:	f47f aeab 	bne.w	f206 <isr+0x79e>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f4b0:	f003 ff60 	bl	13374 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    f4b4:	7803      	ldrb	r3, [r0, #0]
    f4b6:	2203      	movs	r2, #3
    f4b8:	f362 0303 	bfi	r3, r2, #0, #4
    f4bc:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f4be:	f899 3008 	ldrb.w	r3, [r9, #8]
    f4c2:	7802      	ldrb	r2, [r0, #0]
    f4c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f4c8:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    f4cc:	230c      	movs	r3, #12
    f4ce:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f4d0:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f4d2:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    f4d4:	4640      	mov	r0, r8
    f4d6:	f002 fe27 	bl	12128 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    f4da:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    f4de:	4601      	mov	r1, r0
    f4e0:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    f4e2:	f013 0f01 	tst.w	r3, #1
    f4e6:	f810 3b02 	ldrb.w	r3, [r0], #2
    f4ea:	f000 815d 	beq.w	f7a8 <isr+0xd40>
    f4ee:	2900      	cmp	r1, #0
    f4f0:	f000 815a 	beq.w	f7a8 <isr+0xd40>
			pdu_adv_tx->tx_addr = 1;
    f4f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f4f8:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f4fa:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f4fc:	f7f2 fb90 	bl	1c20 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    f500:	2206      	movs	r2, #6
    f502:	f109 010a 	add.w	r1, r9, #10
    f506:	f105 0008 	add.w	r0, r5, #8
    f50a:	f7f2 fb89 	bl	1c20 <memcpy>
		_radio.scanner.state = 1;
    f50e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    f512:	f043 0302 	orr.w	r3, r3, #2
    f516:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    f51a:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    f51c:	2302      	movs	r3, #2
    f51e:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    f520:	f003 ffc8 	bl	134b4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    f524:	2000      	movs	r0, #0
    f526:	f003 ff29 	bl	1337c <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    f52a:	4628      	mov	r0, r5
    f52c:	f003 feac 	bl	13288 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    f530:	f004 f89c 	bl	1366c <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    f534:	f003 fee6 	bl	13304 <radio_is_ready>
    f538:	2800      	cmp	r0, #0
    f53a:	f43f ab40 	beq.w	ebbe <isr+0x156>
    f53e:	e779      	b.n	f434 <isr+0x9cc>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    f540:	f899 2008 	ldrb.w	r2, [r9, #8]
    f544:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f548:	f3c2 1280 	ubfx	r2, r2, #6, #1
    f54c:	4293      	cmp	r3, r2
    f54e:	d18f      	bne.n	f470 <isr+0xa08>
		(memcmp(&_radio.scanner.adv_addr[0],
    f550:	2206      	movs	r2, #6
    f552:	f109 010a 	add.w	r1, r9, #10
    f556:	481c      	ldr	r0, [pc, #112]	; (f5c8 <isr+0xb60>)
    f558:	f7f2 fb4d 	bl	1bf6 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    f55c:	fab0 f080 	clz	r0, r0
    f560:	0940      	lsrs	r0, r0, #5
    f562:	e785      	b.n	f470 <isr+0xa08>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    f564:	2801      	cmp	r0, #1
    f566:	d18b      	bne.n	f480 <isr+0xa18>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    f568:	2300      	movs	r3, #0
    f56a:	4642      	mov	r2, r8
    f56c:	4631      	mov	r1, r6
    f56e:	f7fb f9d9 	bl	a924 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    f572:	2800      	cmp	r0, #0
    f574:	f43f af7f 	beq.w	f476 <isr+0xa0e>
    f578:	e6a6      	b.n	f2c8 <isr+0x860>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f57a:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f57e:	4913      	ldr	r1, [pc, #76]	; (f5cc <isr+0xb64>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f580:	09d2      	lsrs	r2, r2, #7
    f582:	f362 1386 	bfi	r3, r2, #6, #1
    f586:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f588:	2206      	movs	r2, #6
    f58a:	e6e7      	b.n	f35c <isr+0x8f4>
				conn_space_us += conn_interval_us;
    f58c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f58e:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    f590:	f1bb 0f00 	cmp.w	fp, #0
    f594:	dbfa      	blt.n	f58c <isr+0xb24>
    f596:	459b      	cmp	fp, r3
    f598:	d3f8      	bcc.n	f58c <isr+0xb24>
				(conn_space_us - conn_offset_us) / 1250;
    f59a:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    f59e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f5a2:	fbb3 f3f2 	udiv	r3, r3, r2
    f5a6:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    f5a8:	7d6b      	ldrb	r3, [r5, #21]
    f5aa:	3301      	adds	r3, #1
    f5ac:	756b      	strb	r3, [r5, #21]
    f5ae:	e70a      	b.n	f3c6 <isr+0x95e>
    f5b0:	3b9aca00 	.word	0x3b9aca00
    f5b4:	00000000 	.word	0x00000000
    f5b8:	1afd498d 	.word	0x1afd498d
    f5bc:	000159e9 	.word	0x000159e9
    f5c0:	20003ad4 	.word	0x20003ad4
    f5c4:	00017e19 	.word	0x00017e19
    f5c8:	200009da 	.word	0x200009da
    f5cc:	200009d4 	.word	0x200009d4
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f5d0:	f44f 72aa 	mov.w	r2, #340	; 0x154
    f5d4:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    f5d8:	4630      	mov	r0, r6
    f5da:	f7f7 fb9e 	bl	6d1a <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    f5de:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f5e0:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f5e2:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    f5e6:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    f5ea:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f5ee:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    f5f0:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    f5f4:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    f5f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f5fa:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    f5fc:	2206      	movs	r2, #6
    f5fe:	f107 001b 	add.w	r0, r7, #27
    f602:	f7f2 fb0d 	bl	1c20 <memcpy>
    f606:	f107 0b0e 	add.w	fp, r7, #14
    f60a:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    f60e:	f1ba 0f00 	cmp.w	sl, #0
    f612:	d034      	beq.n	f67e <isr+0xc16>
    f614:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    f618:	d031      	beq.n	f67e <isr+0xc16>
			ll_rl_id_addr_get(rl_idx,
    f61a:	465a      	mov	r2, fp
    f61c:	f107 010d 	add.w	r1, r7, #13
    f620:	4640      	mov	r0, r8
    f622:	930d      	str	r3, [sp, #52]	; 0x34
    f624:	f002 ffca 	bl	125bc <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    f628:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    f62a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f62c:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    f62e:	3202      	adds	r2, #2
    f630:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    f632:	4618      	mov	r0, r3
    f634:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f636:	f7f2 faf3 	bl	1c20 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    f63a:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    f63e:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    f642:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    f646:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    f64a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    f64e:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    f652:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    f656:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    f65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    f65e:	8c30      	ldrh	r0, [r6, #32]
    f660:	f7fb fa04 	bl	aa6c <rx_fc_lock>
		packet_rx_enqueue();
    f664:	f7fb f910 	bl	a888 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    f668:	2003      	movs	r0, #3
    f66a:	f7fa fa95 	bl	9b98 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    f66e:	b998      	cbnz	r0, f698 <isr+0xc30>
    f670:	4abd      	ldr	r2, [pc, #756]	; (f968 <isr+0xf00>)
    f672:	4bbe      	ldr	r3, [pc, #760]	; (f96c <isr+0xf04>)
    f674:	9201      	str	r2, [sp, #4]
    f676:	9200      	str	r2, [sp, #0]
    f678:	681c      	ldr	r4, [r3, #0]
    f67a:	4bbd      	ldr	r3, [pc, #756]	; (f970 <isr+0xf08>)
    f67c:	e472      	b.n	ef64 <isr+0x4fc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    f67e:	2206      	movs	r2, #6
    f680:	2100      	movs	r1, #0
    f682:	4618      	mov	r0, r3
    f684:	f7f2 faf8 	bl	1c78 <memset>
				pdu_adv_tx->rx_addr;
    f688:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f68a:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    f68c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    f690:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f692:	2206      	movs	r2, #6
    f694:	4658      	mov	r0, fp
    f696:	e7ce      	b.n	f636 <isr+0xbce>
			node_rx->hdr.handle = conn->handle;
    f698:	8c33      	ldrh	r3, [r6, #32]
    f69a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    f69c:	230b      	movs	r3, #11
    f69e:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    f6a0:	f899 3008 	ldrb.w	r3, [r9, #8]
    f6a4:	f013 0320 	ands.w	r3, r3, #32
    f6a8:	d00e      	beq.n	f6c8 <isr+0xc60>
					((u16_t)conn->access_addr[1] << 8) |
    f6aa:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    f6ac:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    f6ae:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    f6b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    f6b4:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    f6b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    f6ba:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    f6bc:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    f6be:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    f6c2:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    f6c4:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    f6c6:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    f6c8:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    f6ca:	f7fb f8dd 	bl	a888 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    f6ce:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f6d0:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    f6d4:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    f6d6:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    f6da:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    f6dc:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f6de:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f6e2:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f6e4:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f6e6:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    f6ea:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f6ec:	4629      	mov	r1, r5
    f6ee:	9300      	str	r3, [sp, #0]
    f6f0:	4628      	mov	r0, r5
    f6f2:	4ba0      	ldr	r3, [pc, #640]	; (f974 <isr+0xf0c>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f6f4:	f8df a290 	ldr.w	sl, [pc, #656]	; f988 <isr+0xf20>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f6f8:	bf38      	it	cc
    f6fa:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f6fc:	f7f8 f9fc 	bl	7af8 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    f700:	f240 6139 	movw	r1, #1593	; 0x639
    f704:	f7fb fa1e 	bl	ab44 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f708:	462b      	mov	r3, r5
    f70a:	2204      	movs	r2, #4
    f70c:	4629      	mov	r1, r5
    f70e:	9500      	str	r5, [sp, #0]
    f710:	4628      	mov	r0, r5
    f712:	f7f8 f9f1 	bl	7af8 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f718:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f71c:	68a3      	ldr	r3, [r4, #8]
    f71e:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    f722:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f724:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    f728:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    f72c:	9308      	str	r3, [sp, #32]
    f72e:	4b92      	ldr	r3, [pc, #584]	; (f978 <isr+0xf10>)
    f730:	9307      	str	r3, [sp, #28]
    f732:	4b92      	ldr	r3, [pc, #584]	; (f97c <isr+0xf14>)
    f734:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f736:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    f738:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f73a:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    f73c:	4640      	mov	r0, r8
    f73e:	a388      	add	r3, pc, #544	; (adr r3, f960 <isr+0xef8>)
    f740:	e9d3 2300 	ldrd	r2, r3, [r3]
    f744:	4649      	mov	r1, r9
		ticker_status =
    f746:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    f748:	f7f0 fd64 	bl	214 <__aeabi_uldivmod>
    f74c:	4610      	mov	r0, r2
    f74e:	4619      	mov	r1, r3
    f750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f754:	2300      	movs	r3, #0
    f756:	f7f0 fd5d 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f75a:	a381      	add	r3, pc, #516	; (adr r3, f960 <isr+0xef8>)
    f75c:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f760:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f762:	4649      	mov	r1, r9
    f764:	4640      	mov	r0, r8
    f766:	f7f0 fd55 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    f76a:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f76c:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    f76e:	a37c      	add	r3, pc, #496	; (adr r3, f960 <isr+0xef8>)
    f770:	e9d3 2300 	ldrd	r2, r3, [r3]
    f774:	fba1 010a 	umull	r0, r1, r1, sl
    f778:	f7f0 fd4c 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f77c:	3407      	adds	r4, #7
    f77e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    f782:	b2e4      	uxtb	r4, r4
    f784:	9000      	str	r0, [sp, #0]
    f786:	465b      	mov	r3, fp
    f788:	4622      	mov	r2, r4
    f78a:	4629      	mov	r1, r5
    f78c:	4628      	mov	r0, r5
    f78e:	f7f8 f915 	bl	79bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f792:	f030 0302 	bics.w	r3, r0, #2
    f796:	f43f aa12 	beq.w	ebbe <isr+0x156>
    f79a:	4a73      	ldr	r2, [pc, #460]	; (f968 <isr+0xf00>)
    f79c:	4b73      	ldr	r3, [pc, #460]	; (f96c <isr+0xf04>)
    f79e:	9201      	str	r2, [sp, #4]
    f7a0:	9200      	str	r2, [sp, #0]
    f7a2:	681c      	ldr	r4, [r3, #0]
    f7a4:	4b72      	ldr	r3, [pc, #456]	; (f970 <isr+0xf08>)
    f7a6:	e510      	b.n	f1ca <isr+0x762>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f7a8:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f7ac:	4974      	ldr	r1, [pc, #464]	; (f980 <isr+0xf18>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f7ae:	09d2      	lsrs	r2, r2, #7
    f7b0:	f362 1386 	bfi	r3, r2, #6, #1
    f7b4:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f7b6:	2206      	movs	r2, #6
    f7b8:	e6a0      	b.n	f4fc <isr+0xa94>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f7ba:	b9a0      	cbnz	r0, f7e6 <isr+0xd7e>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    f7bc:	f899 3009 	ldrb.w	r3, [r9, #9]
    f7c0:	2b00      	cmp	r3, #0
    f7c2:	f43f ad20 	beq.w	f206 <isr+0x79e>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    f7c6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f7ca:	2b00      	cmp	r3, #0
    f7cc:	f47f ad1b 	bne.w	f206 <isr+0x79e>
		err = isr_rx_scan_report(rssi_ready,
    f7d0:	f1ba 0f00 	cmp.w	sl, #0
    f7d4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    f7d8:	bf14      	ite	ne
    f7da:	4641      	movne	r1, r8
    f7dc:	21ff      	moveq	r1, #255	; 0xff
    f7de:	4628      	mov	r0, r5
    f7e0:	f7fb f8ec 	bl	a9bc <isr_rx_scan_report>
    f7e4:	e50f      	b.n	f206 <isr+0x79e>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f7e6:	2801      	cmp	r0, #1
    f7e8:	d00e      	beq.n	f808 <isr+0xda0>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f7ea:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
    f7ee:	f003 020b 	and.w	r2, r3, #11
    f7f2:	2a02      	cmp	r2, #2
    f7f4:	d0e2      	beq.n	f7bc <isr+0xd54>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f7f6:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    f7fa:	2b07      	cmp	r3, #7
    f7fc:	d10d      	bne.n	f81a <isr+0xdb2>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    f7fe:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f802:	0758      	lsls	r0, r3, #29
    f804:	d1da      	bne.n	f7bc <isr+0xd54>
    f806:	e4fe      	b.n	f206 <isr+0x79e>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    f808:	ab10      	add	r3, sp, #64	; 0x40
    f80a:	4642      	mov	r2, r8
    f80c:	4631      	mov	r1, r6
    f80e:	2000      	movs	r0, #0
    f810:	f7fb f888 	bl	a924 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    f814:	2800      	cmp	r0, #0
    f816:	d1d1      	bne.n	f7bc <isr+0xd54>
    f818:	e7e7      	b.n	f7ea <isr+0xd82>
		   (_radio.scanner.phy)) ||
    f81a:	2b04      	cmp	r3, #4
    f81c:	f47f acf3 	bne.w	f206 <isr+0x79e>
		   (_radio.scanner.state != 0) &&
    f820:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    f824:	0799      	lsls	r1, r3, #30
    f826:	f57f acee 	bpl.w	f206 <isr+0x79e>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    f82a:	f003 fda3 	bl	13374 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    f82e:	f899 3008 	ldrb.w	r3, [r9, #8]
    f832:	7802      	ldrb	r2, [r0, #0]
    f834:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f838:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f83c:	f47f ace3 	bne.w	f206 <isr+0x79e>
		(memcmp(&sreq->scan_req.adv_addr[0],
    f840:	2206      	movs	r2, #6
    f842:	f109 010a 	add.w	r1, r9, #10
    f846:	3008      	adds	r0, #8
    f848:	f7f2 f9d5 	bl	1bf6 <memcmp>
		   (_radio.scanner.state != 0) &&
    f84c:	2800      	cmp	r0, #0
    f84e:	d0b5      	beq.n	f7bc <isr+0xd54>
    f850:	e4d9      	b.n	f206 <isr+0x79e>
	_radio.packet_counter++;
    f852:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f856:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
    f85a:	3301      	adds	r3, #1
    f85c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
    f860:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f862:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
    f866:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f86a:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    f86e:	2301      	movs	r3, #1
    f870:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    f874:	2f00      	cmp	r7, #0
    f876:	f000 82da 	beq.w	fe2e <isr+0x13c6>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    f87a:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    f87e:	f898 1008 	ldrb.w	r1, [r8, #8]
    f882:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f886:	f3c1 0180 	ubfx	r1, r1, #2, #1
    f88a:	f003 0201 	and.w	r2, r3, #1
    f88e:	4291      	cmp	r1, r2
    f890:	f000 81a2 	beq.w	fbd8 <isr+0x1170>
		_radio.conn_curr->sn++;
    f894:	f082 0201 	eor.w	r2, r2, #1
    f898:	f362 0300 	bfi	r3, r2, #0, #1
    f89c:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    f8a0:	7ce3      	ldrb	r3, [r4, #19]
    f8a2:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    f8a4:	bf02      	ittt	eq
    f8a6:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    f8aa:	f043 0301 	orreq.w	r3, r3, #1
    f8ae:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    f8b2:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f8b6:	061a      	lsls	r2, r3, #24
    f8b8:	f100 8189 	bmi.w	fbce <isr+0x1166>
			node_tx = _radio.conn_curr->pkt_tx_head;
    f8bc:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    f8c0:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    f8c4:	1d30      	adds	r0, r6, #4
    f8c6:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    f8ca:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    f8ce:	f1b9 0f00 	cmp.w	r9, #0
    f8d2:	f000 80af 	beq.w	fa34 <isr+0xfcc>
				if (_radio.conn_curr->enc_tx) {
    f8d6:	069b      	lsls	r3, r3, #26
    f8d8:	d50b      	bpl.n	f8f2 <isr+0xe8a>
					_radio.conn_curr->ccm_tx.counter++;
    f8da:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    f8de:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    f8e2:	f11b 0201 	adds.w	r2, fp, #1
    f8e6:	f14c 0300 	adc.w	r3, ip, #0
    f8ea:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    f8ee:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    f8f2:	5c43      	ldrb	r3, [r0, r1]
    f8f4:	f003 0303 	and.w	r3, r3, #3
    f8f8:	2b03      	cmp	r3, #3
    f8fa:	f040 809b 	bne.w	fa34 <isr+0xfcc>
	switch (pdu_data_tx->llctrl.opcode) {
    f8fe:	f89a 3003 	ldrb.w	r3, [sl, #3]
    f902:	3b02      	subs	r3, #2
    f904:	2b16      	cmp	r3, #22
    f906:	f200 8095 	bhi.w	fa34 <isr+0xfcc>
    f90a:	e8df f013 	tbh	[pc, r3, lsl #1]
    f90e:	0017      	.short	0x0017
    f910:	00c90077 	.word	0x00c90077
    f914:	00930093 	.word	0x00930093
    f918:	00930093 	.word	0x00930093
    f91c:	00950093 	.word	0x00950093
    f920:	009300a0 	.word	0x009300a0
    f924:	009300d0 	.word	0x009300d0
    f928:	00930093 	.word	0x00930093
    f92c:	00930093 	.word	0x00930093
    f930:	00da0093 	.word	0x00da0093
    f934:	00f20093 	.word	0x00f20093
    f938:	012400f9 	.word	0x012400f9
		_radio.state = STATE_CLOSE;
    f93c:	2303      	movs	r3, #3
    f93e:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f940:	f003 fcc2 	bl	132c8 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    f944:	f003 fcde 	bl	13304 <radio_is_ready>
    f948:	b300      	cbz	r0, f98c <isr+0xf24>
    f94a:	4a07      	ldr	r2, [pc, #28]	; (f968 <isr+0xf00>)
    f94c:	4b07      	ldr	r3, [pc, #28]	; (f96c <isr+0xf04>)
    f94e:	9201      	str	r2, [sp, #4]
    f950:	9200      	str	r2, [sp, #0]
    f952:	681c      	ldr	r4, [r3, #0]
    f954:	4b0b      	ldr	r3, [pc, #44]	; (f984 <isr+0xf1c>)
    f956:	f7ff b8e7 	b.w	eb28 <isr+0xc0>
    f95a:	bf00      	nop
    f95c:	f3af 8000 	nop.w
    f960:	1afd498d 	.word	0x1afd498d
    f964:	00000007 	.word	0x00000007
    f968:	000159e9 	.word	0x000159e9
    f96c:	20003ad4 	.word	0x20003ad4
    f970:	00017e19 	.word	0x00017e19
    f974:	0000ab45 	.word	0x0000ab45
    f978:	0000aaa1 	.word	0x0000aaa1
    f97c:	0000d349 	.word	0x0000d349
    f980:	200009d4 	.word	0x200009d4
    f984:	00017e25 	.word	0x00017e25
    f988:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    f98c:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    f990:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f994:	2913      	cmp	r1, #19
    f996:	bf08      	it	eq
    f998:	2116      	moveq	r1, #22
    f99a:	f7fb fdb1 	bl	b500 <terminate_ind_rx_enqueue>
		terminate = 1;
    f99e:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f9a0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f9a4:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    f9a8:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    f9aa:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f9ae:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    f9b2:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f9b4:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    f9b8:	d11e      	bne.n	f9f8 <isr+0xf90>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f9ba:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    f9be:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    f9c2:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f9c4:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    f9c6:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    f9ca:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f9ce:	f040 80c9 	bne.w	fb64 <isr+0x10fc>
		if (node_tx) {
    f9d2:	b18e      	cbz	r6, f9f8 <isr+0xf90>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f9d4:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    f9d8:	f8d3 e000 	ldr.w	lr, [r3]
    f9dc:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f9e0:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    f9e2:	bf06      	itte	eq
    f9e4:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    f9e8:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    f9ec:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    f9f0:	49cf      	ldr	r1, [pc, #828]	; (fd30 <isr+0x12c8>)
    f9f2:	4630      	mov	r0, r6
    f9f4:	f7f7 f973 	bl	6cde <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    f9f8:	2600      	movs	r6, #0
    f9fa:	e0bc      	b.n	fb76 <isr+0x110e>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    f9fc:	2208      	movs	r2, #8
    f9fe:	f10a 010e 	add.w	r1, sl, #14
    fa02:	f105 0094 	add.w	r0, r5, #148	; 0x94
    fa06:	f7f2 f90b 	bl	1c20 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    fa0a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fa0e:	2204      	movs	r2, #4
    fa10:	f10a 0116 	add.w	r1, sl, #22
    fa14:	f500 7089 	add.w	r0, r0, #274	; 0x112
    fa18:	f7f2 f902 	bl	1c20 <memcpy>
		_radio.conn_curr->pause_tx = 1;
    fa1c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fa20:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    fa24:	f042 0208 	orr.w	r2, r2, #8
    fa28:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    fa2c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    fa30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    fa34:	2500      	movs	r5, #0
    fa36:	e7b3      	b.n	f9a0 <isr+0xf38>
		_radio.conn_curr->pause_tx = 1;
    fa38:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    fa3c:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    fa40:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    fa44:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    fa48:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    fa4c:	e7f2      	b.n	fa34 <isr+0xfcc>
		if (_radio.role == ROLE_MASTER) {
    fa4e:	f894 a013 	ldrb.w	sl, [r4, #19]
    fa52:	fa5f fa8a 	uxtb.w	sl, sl
    fa56:	f1ba 0f04 	cmp.w	sl, #4
    fa5a:	d121      	bne.n	faa0 <isr+0x1038>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fa5c:	7933      	ldrb	r3, [r6, #4]
    fa5e:	f043 0303 	orr.w	r3, r3, #3
    fa62:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    fa64:	2317      	movs	r3, #23
    fa66:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    fa68:	2303      	movs	r3, #3
    fa6a:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    fa6c:	2208      	movs	r2, #8
    fa6e:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    fa72:	3004      	adds	r0, #4
    fa74:	f7f2 f8d4 	bl	1c20 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    fa78:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    fa7c:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    fa7e:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    fa82:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    fa84:	f106 0112 	add.w	r1, r6, #18
    fa88:	2208      	movs	r2, #8
    fa8a:	6860      	ldr	r0, [r4, #4]
    fa8c:	f004 fc5c 	bl	14348 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    fa90:	f106 011a 	add.w	r1, r6, #26
    fa94:	4652      	mov	r2, sl
    fa96:	6860      	ldr	r0, [r4, #4]
    fa98:	f004 fc56 	bl	14348 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
    fa9c:	2600      	movs	r6, #0
    fa9e:	e7c9      	b.n	fa34 <isr+0xfcc>
			_radio.conn_curr->pause_tx = 1;
    faa0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    faa4:	f043 0308 	orr.w	r3, r3, #8
    faa8:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    faac:	e7c2      	b.n	fa34 <isr+0xfcc>
		_radio.conn_curr->pause_rx = 0;
    faae:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    fab2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    fab6:	f36f 03c3 	bfc	r3, #3, #1
    faba:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    fabe:	2300      	movs	r3, #0
    fac0:	e7c2      	b.n	fa48 <isr+0xfe0>
		if ((_radio.conn_curr->llcp_length.req !=
    fac2:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    fac6:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    faca:	429a      	cmp	r2, r3
    facc:	d0b2      	beq.n	fa34 <isr+0xfcc>
		    (_radio.conn_curr->llcp_length.state ==
    face:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    fad2:	f003 0203 	and.w	r2, r3, #3
    fad6:	2a01      	cmp	r2, #1
    fad8:	d1ac      	bne.n	fa34 <isr+0xfcc>
			_radio.conn_curr->pause_tx = 1;
    fada:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    fade:	f042 0208 	orr.w	r2, r2, #8
    fae2:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    fae6:	2202      	movs	r2, #2
    fae8:	f362 0301 	bfi	r3, r2, #0, #2
    faec:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    faf0:	e7a0      	b.n	fa34 <isr+0xfcc>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    faf2:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    faf6:	2202      	movs	r2, #2
    faf8:	f362 0301 	bfi	r3, r2, #0, #2
    fafc:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    fb00:	7ce3      	ldrb	r3, [r4, #19]
    fb02:	2b03      	cmp	r3, #3
    fb04:	d196      	bne.n	fa34 <isr+0xfcc>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    fb06:	2301      	movs	r3, #1
    fb08:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    fb0c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    fb10:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    fb14:	2202      	movs	r2, #2
    fb16:	2304      	movs	r3, #4
    fb18:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    fb1c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    fb20:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    fb24:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    fb28:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    fb2c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    fb30:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
    fb34:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    fb38:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
    fb3c:	f003 0307 	and.w	r3, r3, #7
    fb40:	aa12      	add	r2, sp, #72	; 0x48
    fb42:	4413      	add	r3, r2
    fb44:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    fb48:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    fb4c:	f363 0202 	bfi	r2, r3, #0, #3
    fb50:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    fb54:	e76e      	b.n	fa34 <isr+0xfcc>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    fb56:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    fb5a:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    fb5e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    fb62:	e7f3      	b.n	fb4c <isr+0x10e4>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    fb64:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    fb68:	4293      	cmp	r3, r2
    fb6a:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    fb6c:	bf08      	it	eq
    fb6e:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    fb72:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
    fb76:	b37d      	cbz	r5, fbd8 <isr+0x1170>
		connection_release(_radio.conn_curr);
    fb78:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fb7c:	f7fb fa12 	bl	afa4 <connection_release>
		_radio.conn_curr = NULL;
    fb80:	2300      	movs	r3, #0
    fb82:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    fb86:	f003 fd65 	bl	13654 <radio_tmr_aa_restore>
    fb8a:	b918      	cbnz	r0, fb94 <isr+0x112c>
		radio_tmr_aa_save(radio_tmr_aa_get());
    fb8c:	f003 fd56 	bl	1363c <radio_tmr_aa_get>
    fb90:	f003 fd5a 	bl	13648 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    fb94:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fb98:	2b00      	cmp	r3, #0
    fb9a:	f43f a810 	beq.w	ebbe <isr+0x156>
	if (tx_release) {
    fb9e:	b11e      	cbz	r6, fba8 <isr+0x1140>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    fba0:	4631      	mov	r1, r6
    fba2:	8c18      	ldrh	r0, [r3, #32]
    fba4:	f7fb f974 	bl	ae90 <pdu_node_tx_release>
	if (rx_enqueue) {
    fba8:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    fbac:	2b00      	cmp	r3, #0
    fbae:	f43f a806 	beq.w	ebbe <isr+0x156>
		rx_fc_lock(_radio.conn_curr->handle);
    fbb2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fbb6:	8c18      	ldrh	r0, [r3, #32]
    fbb8:	f7fa ff58 	bl	aa6c <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    fbbc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fbc0:	8c1b      	ldrh	r3, [r3, #32]
    fbc2:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
    fbc6:	f7fa fe5f 	bl	a888 <packet_rx_enqueue>
    fbca:	f7fe bff8 	b.w	ebbe <isr+0x156>
			_radio.conn_curr->empty = 0;
    fbce:	f36f 13c7 	bfc	r3, #7, #1
    fbd2:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    fbd6:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    fbd8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fbdc:	f898 2008 	ldrb.w	r2, [r8, #8]
    fbe0:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    fbe4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    fbe8:	f3c3 0340 	ubfx	r3, r3, #1, #1
    fbec:	429a      	cmp	r2, r3
    fbee:	f040 80ed 	bne.w	fdcc <isr+0x1364>
	    (packet_rx_reserve_get(3) != 0) &&
    fbf2:	2003      	movs	r0, #3
    fbf4:	f7f9 ffd0 	bl	9b98 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    fbf8:	2800      	cmp	r0, #0
    fbfa:	f000 80e7 	beq.w	fdcc <isr+0x1364>
	    (packet_rx_reserve_get(3) != 0) &&
    fbfe:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    fc02:	b393      	cbz	r3, fc6a <isr+0x1202>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    fc04:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    fc08:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
    fc0c:	4293      	cmp	r3, r2
    fc0e:	d105      	bne.n	fc1c <isr+0x11b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
    fc10:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    fc14:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
    fc18:	4291      	cmp	r1, r2
    fc1a:	d026      	beq.n	fc6a <isr+0x1202>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    fc1c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
    fc20:	4293      	cmp	r3, r2
    fc22:	f000 80d3 	beq.w	fdcc <isr+0x1364>
	      (_radio.fc_req != _radio.fc_ack) &&
    fc26:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    fc2a:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    fc2e:	429a      	cmp	r2, r3
    fc30:	f000 80cc 	beq.w	fdcc <isr+0x1364>
		(((_radio.fc_req == 0) &&
    fc34:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
    fc38:	b933      	cbnz	r3, fc48 <isr+0x11e0>
		   _radio.conn_curr->handle)) ||
    fc3a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
    fc3e:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
    fc42:	8c1b      	ldrh	r3, [r3, #32]
    fc44:	429a      	cmp	r2, r3
    fc46:	d010      	beq.n	fc6a <isr+0x1202>
		 ((_radio.fc_req != 0) &&
    fc48:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
    fc4c:	2b00      	cmp	r3, #0
    fc4e:	f000 80bd 	beq.w	fdcc <isr+0x1364>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    fc52:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
    fc56:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    fc5a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    fc5e:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
    fc62:	8c0b      	ldrh	r3, [r1, #32]
    fc64:	429a      	cmp	r2, r3
    fc66:	f040 80b1 	bne.w	fdcc <isr+0x1364>
		if (pdu_data_rx->len != 0) {
    fc6a:	f898 5009 	ldrb.w	r5, [r8, #9]
    fc6e:	2d00      	cmp	r5, #0
    fc70:	f000 80b5 	beq.w	fdde <isr+0x1376>
			if (_radio.conn_curr->enc_rx) {
    fc74:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fc78:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
    fc7c:	f015 0510 	ands.w	r5, r5, #16
    fc80:	d00d      	beq.n	fc9e <isr+0x1236>
				done = radio_ccm_is_done();
    fc82:	f003 fd73 	bl	1376c <radio_ccm_is_done>
				LL_ASSERT(done);
    fc86:	b948      	cbnz	r0, fc9c <isr+0x1234>
    fc88:	4a2a      	ldr	r2, [pc, #168]	; (fd34 <isr+0x12cc>)
    fc8a:	4b2b      	ldr	r3, [pc, #172]	; (fd38 <isr+0x12d0>)
    fc8c:	9201      	str	r2, [sp, #4]
    fc8e:	9200      	str	r2, [sp, #0]
    fc90:	681c      	ldr	r4, [r3, #0]
    fc92:	492a      	ldr	r1, [pc, #168]	; (fd3c <isr+0x12d4>)
    fc94:	4b2a      	ldr	r3, [pc, #168]	; (fd40 <isr+0x12d8>)
    fc96:	482b      	ldr	r0, [pc, #172]	; (fd44 <isr+0x12dc>)
    fc98:	f7ff ba99 	b.w	f1ce <isr+0x766>
				ccm_rx_increment = 1;
    fc9c:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
    fc9e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fca2:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    fca6:	06d9      	lsls	r1, r3, #27
    fca8:	d42c      	bmi.n	fd04 <isr+0x129c>
			    (_radio.conn_curr->pause_rx &&
    fcaa:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fcae:	f898 3008 	ldrb.w	r3, [r8, #8]
    fcb2:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
    fcb6:	f012 0f04 	tst.w	r2, #4
    fcba:	d145      	bne.n	fd48 <isr+0x12e0>
			_radio.conn_curr->appto_expire = 0;
    fcbc:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    fcbe:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
    fcc2:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
    fcc6:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    fcca:	d004      	beq.n	fcd6 <isr+0x126e>
    fccc:	2b02      	cmp	r3, #2
    fcce:	d876      	bhi.n	fdbe <isr+0x1356>
				*rx_enqueue = 1;
    fcd0:	2301      	movs	r3, #1
    fcd2:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
    fcd6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fcda:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    fcde:	f082 0202 	eor.w	r2, r2, #2
    fce2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
    fce6:	2d00      	cmp	r5, #0
    fce8:	d070      	beq.n	fdcc <isr+0x1364>
				_radio.conn_curr->ccm_rx.counter++;
    fcea:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
    fcee:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
    fcf2:	f119 0001 	adds.w	r0, r9, #1
    fcf6:	f14a 0100 	adc.w	r1, sl, #0
    fcfa:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
    fcfe:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
    fd02:	e063      	b.n	fdcc <isr+0x1364>
			     !radio_ccm_mic_is_valid()) ||
    fd04:	f003 fd50 	bl	137a8 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    fd08:	2800      	cmp	r0, #0
    fd0a:	d1ce      	bne.n	fcaa <isr+0x1242>
				_radio.state = STATE_CLOSE;
    fd0c:	2303      	movs	r3, #3
    fd0e:	7523      	strb	r3, [r4, #20]
				radio_disable();
    fd10:	f003 fada 	bl	132c8 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    fd14:	f003 faf6 	bl	13304 <radio_is_ready>
    fd18:	4605      	mov	r5, r0
    fd1a:	2800      	cmp	r0, #0
    fd1c:	d043      	beq.n	fda6 <isr+0x133e>
    fd1e:	4a05      	ldr	r2, [pc, #20]	; (fd34 <isr+0x12cc>)
    fd20:	4b05      	ldr	r3, [pc, #20]	; (fd38 <isr+0x12d0>)
    fd22:	9201      	str	r2, [sp, #4]
    fd24:	9200      	str	r2, [sp, #0]
    fd26:	681c      	ldr	r4, [r3, #0]
    fd28:	4b05      	ldr	r3, [pc, #20]	; (fd40 <isr+0x12d8>)
    fd2a:	f7fe befd 	b.w	eb28 <isr+0xc0>
    fd2e:	bf00      	nop
    fd30:	20000a4c 	.word	0x20000a4c
    fd34:	000159e9 	.word	0x000159e9
    fd38:	20003ad4 	.word	0x20003ad4
    fd3c:	00016791 	.word	0x00016791
    fd40:	00017e89 	.word	0x00017e89
    fd44:	00018593 	.word	0x00018593
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    fd48:	f003 0103 	and.w	r1, r3, #3
    fd4c:	2903      	cmp	r1, #3
    fd4e:	d1dd      	bne.n	fd0c <isr+0x12a4>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    fd50:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    fd54:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    fd58:	f1be 0f00 	cmp.w	lr, #0
    fd5c:	f002 0240 	and.w	r2, r2, #64	; 0x40
    fd60:	db15      	blt.n	fd8e <isr+0x1326>
	       (!conn->role &&
    fd62:	b922      	cbnz	r2, fd6e <isr+0x1306>
		((!conn->refresh &&
    fd64:	2902      	cmp	r1, #2
    fd66:	d0a9      	beq.n	fcbc <isr+0x1254>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fd68:	2911      	cmp	r1, #17
    fd6a:	d8cf      	bhi.n	fd0c <isr+0x12a4>
    fd6c:	e009      	b.n	fd82 <isr+0x131a>
		 (conn->refresh &&
    fd6e:	1e8a      	subs	r2, r1, #2
    fd70:	b2d2      	uxtb	r2, r2
    fd72:	2a09      	cmp	r2, #9
    fd74:	d8f8      	bhi.n	fd68 <isr+0x1300>
    fd76:	f240 2e05 	movw	lr, #517	; 0x205
    fd7a:	fa2e f202 	lsr.w	r2, lr, r2
    fd7e:	07d2      	lsls	r2, r2, #31
    fd80:	d49c      	bmi.n	fcbc <isr+0x1254>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fd82:	4aaf      	ldr	r2, [pc, #700]	; (10040 <__kernel_ram_size+0x40>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fd84:	fa22 f101 	lsr.w	r1, r2, r1
    fd88:	07ca      	lsls	r2, r1, #31
    fd8a:	d5bf      	bpl.n	fd0c <isr+0x12a4>
    fd8c:	e796      	b.n	fcbc <isr+0x1254>
	       (conn->role &&
    fd8e:	b92a      	cbnz	r2, fd9c <isr+0x1334>
		((!conn->refresh &&
    fd90:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    fd92:	d093      	beq.n	fcbc <isr+0x1254>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fd94:	2911      	cmp	r1, #17
    fd96:	d8b9      	bhi.n	fd0c <isr+0x12a4>
    fd98:	4aaa      	ldr	r2, [pc, #680]	; (10044 <__kernel_ram_size+0x44>)
    fd9a:	e7f3      	b.n	fd84 <isr+0x131c>
		 (conn->refresh &&
    fd9c:	1e8a      	subs	r2, r1, #2
    fd9e:	2a01      	cmp	r2, #1
    fda0:	d98c      	bls.n	fcbc <isr+0x1254>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    fda2:	290b      	cmp	r1, #11
    fda4:	e7f5      	b.n	fd92 <isr+0x132a>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    fda6:	213d      	movs	r1, #61	; 0x3d
    fda8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fdac:	f7fb fba8 	bl	b500 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    fdb0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fdb4:	f7fb f8f6 	bl	afa4 <connection_release>
				_radio.conn_curr = NULL;
    fdb8:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    fdbc:	e6e3      	b.n	fb86 <isr+0x111e>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    fdbe:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    fdc2:	4640      	mov	r0, r8
    fdc4:	f7fd fd1c 	bl	d800 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    fdc8:	2800      	cmp	r0, #0
    fdca:	d084      	beq.n	fcd6 <isr+0x126e>
		_radio.conn_curr->supervision_expire = 0;
    fdcc:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
    fdd0:	2300      	movs	r3, #0
    fdd2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
    fdd6:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
    fdd8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    fddc:	e03e      	b.n	fe5c <isr+0x13f4>
		} else if ((_radio.conn_curr->enc_rx) ||
    fdde:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    fde2:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    fde6:	f013 0f14 	tst.w	r3, #20
    fdea:	f43f af74 	beq.w	fcd6 <isr+0x126e>
					    (conn->latency + 6)) ?
    fdee:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    fdf0:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    fdf4:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    fdf6:	4299      	cmp	r1, r3
    fdf8:	bfc4      	itt	gt
    fdfa:	1f8b      	subgt	r3, r1, #6
    fdfc:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    fdfe:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    fe02:	bfcc      	ite	gt
    fe04:	b29b      	uxthgt	r3, r3
    fe06:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    fe08:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
    fe0a:	bf1e      	ittt	ne
    fe0c:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
    fe10:	2300      	movne	r3, #0
    fe12:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    fe16:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    fe1a:	2b00      	cmp	r3, #0
    fe1c:	f47f af5b 	bne.w	fcd6 <isr+0x126e>
				conn->appto_expire = conn->appto_reload;
    fe20:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    fe24:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    fe28:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
    fe2c:	e753      	b.n	fcd6 <isr+0x126e>
		if (_radio.crc_expire == 0) {
    fe2e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    fe32:	b913      	cbnz	r3, fe3a <isr+0x13d2>
			_radio.crc_expire = 2;
    fe34:	2302      	movs	r3, #2
    fe36:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
    fe3a:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    fe3e:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
    fe42:	3b01      	subs	r3, #1
    fe44:	b2db      	uxtb	r3, r3
    fe46:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    fe4a:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    fe4e:	fab3 f583 	clz	r5, r3
    fe52:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    fe54:	bb86      	cbnz	r6, feb8 <isr+0x1450>
			_radio.conn_curr->supervision_expire =
    fe56:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    fe58:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    fe5c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    fe60:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    fe62:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    fe66:	f7fd fb8b 	bl	d580 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fe6a:	7d23      	ldrb	r3, [r4, #20]
    fe6c:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    fe6e:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fe72:	d010      	beq.n	fe96 <isr+0x142e>
    fe74:	bb15      	cbnz	r5, febc <isr+0x1454>
    fe76:	b137      	cbz	r7, fe86 <isr+0x141e>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    fe78:	f898 3008 	ldrb.w	r3, [r8, #8]
    fe7c:	06d8      	lsls	r0, r3, #27
    fe7e:	d402      	bmi.n	fe86 <isr+0x141e>
			 (pdu_data_tx->len == 0)) ||
    fe80:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
    fe82:	785b      	ldrb	r3, [r3, #1]
    fe84:	b1d3      	cbz	r3, febc <isr+0x1454>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    fe86:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    fe8a:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fe8e:	2b00      	cmp	r3, #0
    fe90:	bf0c      	ite	eq
    fe92:	2302      	moveq	r3, #2
    fe94:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    fe96:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fe98:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
    fe9a:	d12f      	bne.n	fefc <isr+0x1494>
		if (_radio.role == ROLE_MASTER) {
    fe9c:	7ce3      	ldrb	r3, [r4, #19]
    fe9e:	2b04      	cmp	r3, #4
    fea0:	d10e      	bne.n	fec0 <isr+0x1458>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    fea2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fea6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    feaa:	f369 12c7 	bfi	r2, r9, #7, #1
    feae:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
    feb2:	f003 fa09 	bl	132c8 <radio_disable>
    feb6:	e666      	b.n	fb86 <isr+0x111e>
	struct radio_pdu_node_tx *tx_release = NULL;
    feb8:	2600      	movs	r6, #0
    feba:	e7cf      	b.n	fe5c <isr+0x13f4>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    febc:	2303      	movs	r3, #3
    febe:	e7ea      	b.n	fe96 <isr+0x142e>
			radio_switch_complete_and_disable();
    fec0:	f003 fa72 	bl	133a8 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    fec4:	9910      	ldr	r1, [sp, #64]	; 0x40
    fec6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    feca:	780b      	ldrb	r3, [r1, #0]
    fecc:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
    fed0:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    fed4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    fed8:	f362 0382 	bfi	r3, r2, #2, #1
    fedc:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    fede:	f7fa f9f1 	bl	a2c4 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    fee2:	f003 fa0f 	bl	13304 <radio_is_ready>
    fee6:	2800      	cmp	r0, #0
    fee8:	f43f ae4d 	beq.w	fb86 <isr+0x111e>
    feec:	4a56      	ldr	r2, [pc, #344]	; (10048 <__kernel_ram_size+0x48>)
    feee:	4b57      	ldr	r3, [pc, #348]	; (1004c <__kernel_ram_size+0x4c>)
    fef0:	9201      	str	r2, [sp, #4]
    fef2:	9200      	str	r2, [sp, #0]
    fef4:	681c      	ldr	r4, [r3, #0]
    fef6:	4b56      	ldr	r3, [pc, #344]	; (10050 <__kernel_ram_size+0x50>)
    fef8:	f7fe be16 	b.w	eb28 <isr+0xc0>
		radio_tmr_tifs_set(RADIO_TIFS);
    fefc:	2096      	movs	r0, #150	; 0x96
    fefe:	f003 fad9 	bl	134b4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    ff02:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    ff06:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    ff0a:	f000 0007 	and.w	r0, r0, #7
    ff0e:	f003 fa35 	bl	1337c <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    ff12:	f003 fbab 	bl	1366c <radio_tmr_end_capture>
    ff16:	e7d5      	b.n	fec4 <isr+0x145c>
		LL_ASSERT(0);
    ff18:	4a4b      	ldr	r2, [pc, #300]	; (10048 <__kernel_ram_size+0x48>)
    ff1a:	4b4c      	ldr	r3, [pc, #304]	; (1004c <__kernel_ram_size+0x4c>)
    ff1c:	9201      	str	r2, [sp, #4]
    ff1e:	9200      	str	r2, [sp, #0]
    ff20:	681c      	ldr	r4, [r3, #0]
    ff22:	4b4c      	ldr	r3, [pc, #304]	; (10054 <__kernel_ram_size+0x54>)
    ff24:	f7fe be9a 	b.w	ec5c <isr+0x1f4>
	switch (_radio.role) {
    ff28:	7ce2      	ldrb	r2, [r4, #19]
    ff2a:	2a04      	cmp	r2, #4
    ff2c:	f200 8241 	bhi.w	103b2 <__kernel_ram_size+0x3b2>
    ff30:	e8df f012 	tbh	[pc, r2, lsl #1]
    ff34:	0005022e 	.word	0x0005022e
    ff38:	00c20059 	.word	0x00c20059
    ff3c:	00c2      	.short	0x00c2
	if ((_radio.state == STATE_CLOSE) &&
    ff3e:	2b03      	cmp	r3, #3
    ff40:	d109      	bne.n	ff56 <isr+0x14ee>
	    (_radio.advertiser.chan_map_current != 0)) {
    ff42:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    ff46:	0759      	lsls	r1, r3, #29
    ff48:	d005      	beq.n	ff56 <isr+0x14ee>
		adv_setup();
    ff4a:	f7fb f8ff 	bl	b14c <adv_setup>
		radio_tx_enable();
    ff4e:	f003 f9b5 	bl	132bc <radio_tx_enable>
    ff52:	f7fe be04 	b.w	eb5e <isr+0xf6>
		radio_filter_disable();
    ff56:	f003 fa71 	bl	1343c <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    ff5a:	7d23      	ldrb	r3, [r4, #20]
    ff5c:	2b03      	cmp	r3, #3
    ff5e:	f040 8091 	bne.w	10084 <__kernel_ram_size+0x84>
		    (!_radio.advertiser.is_hdcd)) {
    ff62:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    ff66:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    ff6a:	f040 808b 	bne.w	10084 <__kernel_ram_size+0x84>
			entropy_nrf_get_entropy_isr(_radio.entropy,
    ff6e:	2201      	movs	r2, #1
    ff70:	a910      	add	r1, sp, #64	; 0x40
    ff72:	6860      	ldr	r0, [r4, #4]
    ff74:	f004 f9e8 	bl	14348 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
    ff78:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    ff7c:	4836      	ldr	r0, [pc, #216]	; (10058 <__kernel_ram_size+0x58>)
			random_delay %= 10;
    ff7e:	230a      	movs	r3, #10
    ff80:	fbb1 f2f3 	udiv	r2, r1, r3
    ff84:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    ff88:	3201      	adds	r2, #1
    ff8a:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    ff8c:	b2d6      	uxtb	r6, r2
    ff8e:	fba6 0100 	umull	r0, r1, r6, r0
    ff92:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    ff94:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    ff98:	fb03 1106 	mla	r1, r3, r6, r1
    ff9c:	a326      	add	r3, pc, #152	; (adr r3, 10038 <__kernel_ram_size+0x38>)
    ff9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ffa2:	f7f0 f937 	bl	214 <__aeabi_uldivmod>
			ticker_status =
    ffa6:	f640 734b 	movw	r3, #3915	; 0xf4b
    ffaa:	9306      	str	r3, [sp, #24]
    ffac:	4b2b      	ldr	r3, [pc, #172]	; (1005c <__kernel_ram_size+0x5c>)
    ffae:	9305      	str	r3, [sp, #20]
    ffb0:	9504      	str	r5, [sp, #16]
    ffb2:	b283      	uxth	r3, r0
    ffb4:	9503      	str	r5, [sp, #12]
    ffb6:	9502      	str	r5, [sp, #8]
    ffb8:	9501      	str	r5, [sp, #4]
    ffba:	9500      	str	r5, [sp, #0]
    ffbc:	2205      	movs	r2, #5
    ffbe:	4629      	mov	r1, r5
    ffc0:	4628      	mov	r0, r5
    ffc2:	f7f7 fd4b 	bl	7a5c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ffc6:	f030 0302 	bics.w	r3, r0, #2
    ffca:	d05b      	beq.n	10084 <__kernel_ram_size+0x84>
    ffcc:	7ca3      	ldrb	r3, [r4, #18]
    ffce:	2b05      	cmp	r3, #5
    ffd0:	d058      	beq.n	10084 <__kernel_ram_size+0x84>
    ffd2:	4a1d      	ldr	r2, [pc, #116]	; (10048 <__kernel_ram_size+0x48>)
    ffd4:	4b1d      	ldr	r3, [pc, #116]	; (1004c <__kernel_ram_size+0x4c>)
    ffd6:	9201      	str	r2, [sp, #4]
    ffd8:	9200      	str	r2, [sp, #0]
    ffda:	681c      	ldr	r4, [r3, #0]
    ffdc:	4920      	ldr	r1, [pc, #128]	; (10060 <__kernel_ram_size+0x60>)
    ffde:	4b21      	ldr	r3, [pc, #132]	; (10064 <__kernel_ram_size+0x64>)
    ffe0:	4821      	ldr	r0, [pc, #132]	; (10068 <__kernel_ram_size+0x68>)
    ffe2:	f7ff b8f4 	b.w	f1ce <isr+0x766>
	if (_radio.state == STATE_CLOSE) {
    ffe6:	2b03      	cmp	r3, #3
    ffe8:	d140      	bne.n	1006c <__kernel_ram_size+0x6c>
		radio_tmr_tifs_set(RADIO_TIFS);
    ffea:	2096      	movs	r0, #150	; 0x96
    ffec:	f003 fa62 	bl	134b4 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fff0:	2300      	movs	r3, #0
    fff2:	4619      	mov	r1, r3
    fff4:	461a      	mov	r2, r3
    fff6:	4618      	mov	r0, r3
    fff8:	f003 f9cc 	bl	13394 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    fffc:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   10000:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
   10004:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   10008:	3008      	adds	r0, #8
   1000a:	f003 f937 	bl	1327c <radio_pkt_rx_set>
		radio_rssi_measure();
   1000e:	f003 f9d9 	bl	133c4 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   10012:	f002 fb6f 	bl	126f4 <ctrl_rl_enabled>
   10016:	b138      	cbz	r0, 10028 <__kernel_ram_size+0x28>
			u8_t count, *irks = ctrl_irks_get(&count);
   10018:	a810      	add	r0, sp, #64	; 0x40
   1001a:	f002 f899 	bl	12150 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   1001e:	4601      	mov	r1, r0
   10020:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   10024:	f003 fbca 	bl	137bc <radio_ar_configure>
		_radio.state = STATE_RX;
   10028:	2301      	movs	r3, #1
   1002a:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
   1002c:	f003 f940 	bl	132b0 <radio_rx_enable>
   10030:	f7fe bd95 	b.w	eb5e <isr+0xf6>
   10034:	f3af 8000 	nop.w
   10038:	1afd498d 	.word	0x1afd498d
   1003c:	00000007 	.word	0x00000007
   10040:	00022060 	.word	0x00022060
   10044:	00022040 	.word	0x00022040
   10048:	000159e9 	.word	0x000159e9
   1004c:	20003ad4 	.word	0x20003ad4
   10050:	00017e99 	.word	0x00017e99
   10054:	00017ea5 	.word	0x00017ea5
   10058:	d4a51000 	.word	0xd4a51000
   1005c:	0000abad 	.word	0x0000abad
   10060:	00016791 	.word	0x00016791
   10064:	00017eb8 	.word	0x00017eb8
   10068:	000185b9 	.word	0x000185b9
		radio_filter_disable();
   1006c:	f003 f9e6 	bl	1343c <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   10070:	7d23      	ldrb	r3, [r4, #20]
   10072:	2b05      	cmp	r3, #5
   10074:	d106      	bne.n	10084 <__kernel_ram_size+0x84>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10076:	2300      	movs	r3, #0
   10078:	9300      	str	r3, [sp, #0]
   1007a:	2204      	movs	r2, #4
   1007c:	4619      	mov	r1, r3
   1007e:	4618      	mov	r0, r3
   10080:	f7f7 fd3a 	bl	7af8 <ticker_stop>
	_radio.role = ROLE_NONE;
   10084:	2500      	movs	r5, #0
   10086:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
   10088:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
   1008a:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
   1008c:	f003 fa90 	bl	135b0 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10090:	462a      	mov	r2, r5
   10092:	4629      	mov	r1, r5
   10094:	4628      	mov	r0, r5
   10096:	4baa      	ldr	r3, [pc, #680]	; (10340 <__kernel_ram_size+0x340>)
   10098:	f7f6 fed2 	bl	6e40 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1009c:	4605      	mov	r5, r0
   1009e:	2800      	cmp	r0, #0
   100a0:	f000 818f 	beq.w	103c2 <__kernel_ram_size+0x3c2>
   100a4:	4aa7      	ldr	r2, [pc, #668]	; (10344 <__kernel_ram_size+0x344>)
   100a6:	4ba8      	ldr	r3, [pc, #672]	; (10348 <__kernel_ram_size+0x348>)
   100a8:	9201      	str	r2, [sp, #4]
   100aa:	9200      	str	r2, [sp, #0]
   100ac:	681c      	ldr	r4, [r3, #0]
   100ae:	49a7      	ldr	r1, [pc, #668]	; (1034c <__kernel_ram_size+0x34c>)
   100b0:	4ba7      	ldr	r3, [pc, #668]	; (10350 <__kernel_ram_size+0x350>)
   100b2:	48a8      	ldr	r0, [pc, #672]	; (10354 <__kernel_ram_size+0x354>)
   100b4:	f7ff b88b 	b.w	f1ce <isr+0x766>
	if (_radio.conn_curr == 0) {
   100b8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   100bc:	2800      	cmp	r0, #0
   100be:	d0e1      	beq.n	10084 <__kernel_ram_size+0x84>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   100c0:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   100c4:	b181      	cbz	r1, 100e8 <__kernel_ram_size+0xe8>
   100c6:	7ce3      	ldrb	r3, [r4, #19]
   100c8:	2b03      	cmp	r3, #3
   100ca:	d003      	beq.n	100d4 <__kernel_ram_size+0xd4>
   100cc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   100d0:	07da      	lsls	r2, r3, #31
   100d2:	d509      	bpl.n	100e8 <__kernel_ram_size+0xe8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   100d4:	f7fb fa14 	bl	b500 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   100d8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   100dc:	f7fa ff62 	bl	afa4 <connection_release>
			_radio.conn_curr = NULL;
   100e0:	2300      	movs	r3, #0
   100e2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   100e6:	e7cd      	b.n	10084 <__kernel_ram_size+0x84>
	latency_event = _radio.conn_curr->latency_event;
   100e8:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   100ec:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
   100f0:	f10b 0601 	add.w	r6, fp, #1
   100f4:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
   100f6:	2f00      	cmp	r7, #0
   100f8:	f000 8084 	beq.w	10204 <__kernel_ram_size+0x204>
		if (_radio.role == ROLE_SLAVE) {
   100fc:	7ce3      	ldrb	r3, [r4, #19]
   100fe:	2b03      	cmp	r3, #3
   10100:	d173      	bne.n	101ea <__kernel_ram_size+0x1ea>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10102:	f003 faa7 	bl	13654 <radio_tmr_aa_restore>
   10106:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
   10108:	f003 faaa 	bl	13660 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   1010c:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
   10110:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
   10114:	f003 0307 	and.w	r3, r3, #7
   10118:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
   1011a:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
   1011e:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
   10120:	d052      	beq.n	101c8 <__kernel_ram_size+0x1c8>
		return 40;
   10122:	2b04      	cmp	r3, #4
   10124:	bf0c      	ite	eq
   10126:	f44f 78bc 	moveq.w	r8, #376	; 0x178
   1012a:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   1012e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   10132:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
   10134:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   10136:	930a      	str	r3, [sp, #40]	; 0x28
   10138:	f8df a228 	ldr.w	sl, [pc, #552]	; 10364 <__kernel_ram_size+0x364>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   1013c:	a37e      	add	r3, pc, #504	; (adr r3, 10338 <__kernel_ram_size+0x338>)
   1013e:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   10142:	d844      	bhi.n	101ce <__kernel_ram_size+0x1ce>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   10144:	fba0 010a 	umull	r0, r1, r0, sl
   10148:	f7f0 f864 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1014c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   1014e:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10150:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10154:	a378      	add	r3, pc, #480	; (adr r3, 10338 <__kernel_ram_size+0x338>)
   10156:	e9d3 2300 	ldrd	r2, r3, [r3]
   1015a:	fba0 010a 	umull	r0, r1, r0, sl
   1015e:	f7f0 f859 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
   10162:	2300      	movs	r3, #0
   10164:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   10166:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   10168:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1016c:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
   10170:	b3ab      	cbz	r3, 101de <__kernel_ram_size+0x1de>
				if (pdu_data_tx->len ||
   10172:	795b      	ldrb	r3, [r3, #5]
   10174:	b913      	cbnz	r3, 1017c <__kernel_ram_size+0x17c>
   10176:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
   1017a:	b10b      	cbz	r3, 10180 <__kernel_ram_size+0x180>
					_radio.conn_curr->latency_event = 0;
   1017c:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
   1017e:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   10180:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10184:	2200      	movs	r2, #0
   10186:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   10188:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1018c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   10190:	b1c3      	cbz	r3, 101c4 <__kernel_ram_size+0x1c4>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   10192:	429e      	cmp	r6, r3
   10194:	f080 80b1 	bcs.w	102fa <__kernel_ram_size+0x2fa>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   10198:	1b9b      	subs	r3, r3, r6
   1019a:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
   1019c:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   1019e:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   101a0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   101a4:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   101a6:	f240 80aa 	bls.w	102fe <__kernel_ram_size+0x2fe>
			else if (_radio.role == ROLE_SLAVE) {
   101aa:	7ce3      	ldrb	r3, [r4, #19]
   101ac:	2b03      	cmp	r3, #3
   101ae:	d109      	bne.n	101c4 <__kernel_ram_size+0x1c4>
				if (latency_event != 0) {
   101b0:	f1bb 0f00 	cmp.w	fp, #0
   101b4:	f040 80a3 	bne.w	102fe <__kernel_ram_size+0x2fe>
					force = _radio.conn_curr->slave.force & 0x01;
   101b8:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   101ba:	087b      	lsrs	r3, r7, #1
					if (force) {
   101bc:	f017 0701 	ands.w	r7, r7, #1
   101c0:	d13d      	bne.n	1023e <__kernel_ram_size+0x23e>
					_radio.conn_curr->slave.force >>= 1;
   101c2:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
   101c4:	2700      	movs	r7, #0
   101c6:	e03d      	b.n	10244 <__kernel_ram_size+0x244>
		return 24;
   101c8:	f04f 0818 	mov.w	r8, #24
   101cc:	e7af      	b.n	1012e <__kernel_ram_size+0x12e>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   101ce:	fba9 010a 	umull	r0, r1, r9, sl
   101d2:	f7f0 f81f 	bl	214 <__aeabi_uldivmod>
   101d6:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   101d8:	f108 0030 	add.w	r0, r8, #48	; 0x30
   101dc:	e7ba      	b.n	10154 <__kernel_ram_size+0x154>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   101de:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   101e2:	07db      	lsls	r3, r3, #31
   101e4:	d5cc      	bpl.n	10180 <__kernel_ram_size+0x180>
				_radio.conn_curr->latency_event =
   101e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   101e8:	e7c9      	b.n	1017e <__kernel_ram_size+0x17e>
		} else if (reason_peer) {
   101ea:	b149      	cbz	r1, 10200 <__kernel_ram_size+0x200>
			_radio.conn_curr->master.terminate_ack = 1;
   101ec:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   101f0:	f043 0301 	orr.w	r3, r3, #1
   101f4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   101f8:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
   101fc:	4645      	mov	r5, r8
   101fe:	e7bf      	b.n	10180 <__kernel_ram_size+0x180>
	ticks_drift_minus = 0;
   10200:	4688      	mov	r8, r1
   10202:	e7fb      	b.n	101fc <__kernel_ram_size+0x1fc>
	else if (_radio.conn_curr->connect_expire) {
   10204:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   10206:	b185      	cbz	r5, 1022a <__kernel_ram_size+0x22a>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   10208:	42ae      	cmp	r6, r5
   1020a:	d204      	bcs.n	10216 <__kernel_ram_size+0x216>
			_radio.conn_curr->connect_expire -= elapsed_event;
   1020c:	1bad      	subs	r5, r5, r6
   1020e:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   10210:	463d      	mov	r5, r7
   10212:	46a8      	mov	r8, r5
   10214:	e7b8      	b.n	10188 <__kernel_ram_size+0x188>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   10216:	213e      	movs	r1, #62	; 0x3e
   10218:	f7fb f972 	bl	b500 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   1021c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10220:	f7fa fec0 	bl	afa4 <connection_release>
			_radio.conn_curr = NULL;
   10224:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
   10228:	e72c      	b.n	10084 <__kernel_ram_size+0x84>
		if (!_radio.conn_curr->supervision_expire) {
   1022a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
   1022e:	f1b8 0f00 	cmp.w	r8, #0
   10232:	d1ee      	bne.n	10212 <__kernel_ram_size+0x212>
			_radio.conn_curr->supervision_expire =
   10234:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   10236:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   1023a:	4645      	mov	r5, r8
   1023c:	e7a4      	b.n	10188 <__kernel_ram_size+0x188>
						_radio.conn_curr->slave.force |=
   1023e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10242:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
   10244:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   10248:	b123      	cbz	r3, 10254 <__kernel_ram_size+0x254>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   1024a:	429e      	cmp	r6, r3
   1024c:	d259      	bcs.n	10302 <__kernel_ram_size+0x302>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   1024e:	1b9b      	subs	r3, r3, r6
   10250:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   10254:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   10258:	b123      	cbz	r3, 10264 <__kernel_ram_size+0x264>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   1025a:	429e      	cmp	r6, r3
   1025c:	d253      	bcs.n	10306 <__kernel_ram_size+0x306>
			_radio.conn_curr->apto_expire -= elapsed_event;
   1025e:	1b9b      	subs	r3, r3, r6
   10260:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   10264:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   10268:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   1026c:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   10270:	b123      	cbz	r3, 1027c <__kernel_ram_size+0x27c>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   10272:	429e      	cmp	r6, r3
   10274:	d278      	bcs.n	10368 <__kernel_ram_size+0x368>
			_radio.conn_curr->appto_expire -= elapsed_event;
   10276:	1b9e      	subs	r6, r3, r6
   10278:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   1027c:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   10280:	428b      	cmp	r3, r1
   10282:	d006      	beq.n	10292 <__kernel_ram_size+0x292>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   10284:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   10288:	3b01      	subs	r3, #1
   1028a:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
   1028c:	bf9c      	itt	ls
   1028e:	2300      	movls	r3, #0
   10290:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   10292:	b917      	cbnz	r7, 1029a <__kernel_ram_size+0x29a>
   10294:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   10296:	455b      	cmp	r3, fp
   10298:	d078      	beq.n	1038c <__kernel_ram_size+0x38c>
		lazy = _radio.conn_curr->latency_event + 1;
   1029a:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   1029c:	3301      	adds	r3, #1
   1029e:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   102a0:	b935      	cbnz	r5, 102b0 <__kernel_ram_size+0x2b0>
   102a2:	f1b8 0f00 	cmp.w	r8, #0
   102a6:	d103      	bne.n	102b0 <__kernel_ram_size+0x2b0>
   102a8:	b913      	cbnz	r3, 102b0 <__kernel_ram_size+0x2b0>
	    (lazy != 0) || (force != 0)) {
   102aa:	2f00      	cmp	r7, #0
   102ac:	f43f aeea 	beq.w	10084 <__kernel_ram_size+0x84>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   102b0:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
   102b4:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   102b6:	3207      	adds	r2, #7
		ticker_status =
   102b8:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   102ba:	b2d6      	uxtb	r6, r2
		ticker_status =
   102bc:	4a26      	ldr	r2, [pc, #152]	; (10358 <__kernel_ram_size+0x358>)
   102be:	9205      	str	r2, [sp, #20]
   102c0:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
   102c2:	9606      	str	r6, [sp, #24]
		ticker_status =
   102c4:	9704      	str	r7, [sp, #16]
   102c6:	9102      	str	r1, [sp, #8]
   102c8:	9101      	str	r1, [sp, #4]
   102ca:	f8cd 8000 	str.w	r8, [sp]
   102ce:	4632      	mov	r2, r6
   102d0:	4608      	mov	r0, r1
   102d2:	f7f7 fbc3 	bl	7a5c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   102d6:	f030 0302 	bics.w	r3, r0, #2
   102da:	f43f aed3 	beq.w	10084 <__kernel_ram_size+0x84>
   102de:	7ca3      	ldrb	r3, [r4, #18]
   102e0:	429e      	cmp	r6, r3
   102e2:	f43f aecf 	beq.w	10084 <__kernel_ram_size+0x84>
   102e6:	4a17      	ldr	r2, [pc, #92]	; (10344 <__kernel_ram_size+0x344>)
   102e8:	4b17      	ldr	r3, [pc, #92]	; (10348 <__kernel_ram_size+0x348>)
   102ea:	9201      	str	r2, [sp, #4]
   102ec:	9200      	str	r2, [sp, #0]
   102ee:	681c      	ldr	r4, [r3, #0]
   102f0:	4916      	ldr	r1, [pc, #88]	; (1034c <__kernel_ram_size+0x34c>)
   102f2:	4b1a      	ldr	r3, [pc, #104]	; (1035c <__kernel_ram_size+0x35c>)
   102f4:	481a      	ldr	r0, [pc, #104]	; (10360 <__kernel_ram_size+0x360>)
   102f6:	f7fe bf6a 	b.w	f1ce <isr+0x766>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   102fa:	2108      	movs	r1, #8
   102fc:	e6ea      	b.n	100d4 <__kernel_ram_size+0xd4>
				force = 1;
   102fe:	2701      	movs	r7, #1
   10300:	e7a0      	b.n	10244 <__kernel_ram_size+0x244>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   10302:	2122      	movs	r1, #34	; 0x22
   10304:	e6e6      	b.n	100d4 <__kernel_ram_size+0xd4>
			_radio.conn_curr->apto_expire = 0;
   10306:	2300      	movs	r3, #0
   10308:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
   1030c:	2002      	movs	r0, #2
   1030e:	f7f9 fc43 	bl	9b98 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   10312:	b938      	cbnz	r0, 10324 <__kernel_ram_size+0x324>
   10314:	4a0b      	ldr	r2, [pc, #44]	; (10344 <__kernel_ram_size+0x344>)
   10316:	4b0c      	ldr	r3, [pc, #48]	; (10348 <__kernel_ram_size+0x348>)
   10318:	9201      	str	r2, [sp, #4]
   1031a:	9200      	str	r2, [sp, #0]
   1031c:	681c      	ldr	r4, [r3, #0]
   1031e:	4b0f      	ldr	r3, [pc, #60]	; (1035c <__kernel_ram_size+0x35c>)
   10320:	f7fe be20 	b.w	ef64 <isr+0x4fc>
			node_rx->hdr.handle = _radio.conn_curr->handle;
   10324:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10328:	8c1b      	ldrh	r3, [r3, #32]
   1032a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
   1032c:	230a      	movs	r3, #10
   1032e:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
   10330:	f7fa faaa 	bl	a888 <packet_rx_enqueue>
   10334:	e796      	b.n	10264 <__kernel_ram_size+0x264>
   10336:	bf00      	nop
   10338:	1afd498d 	.word	0x1afd498d
   1033c:	00000007 	.word	0x00000007
   10340:	20003dd8 	.word	0x20003dd8
   10344:	000159e9 	.word	0x000159e9
   10348:	20003ad4 	.word	0x20003ad4
   1034c:	00016791 	.word	0x00016791
   10350:	00017f89 	.word	0x00017f89
   10354:	00018a6b 	.word	0x00018a6b
   10358:	0000abf5 	.word	0x0000abf5
   1035c:	00017ec6 	.word	0x00017ec6
   10360:	00018627 	.word	0x00018627
   10364:	3b9aca00 	.word	0x3b9aca00
			_radio.conn_curr->appto_expire = 0;
   10368:	2300      	movs	r3, #0
   1036a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   1036e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   10372:	2b00      	cmp	r3, #0
   10374:	d182      	bne.n	1027c <__kernel_ram_size+0x27c>
   10376:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   1037a:	428b      	cmp	r3, r1
   1037c:	d182      	bne.n	10284 <__kernel_ram_size+0x284>
				_radio.conn_curr->llcp_type = LLCP_PING;
   1037e:	2307      	movs	r3, #7
   10380:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   10384:	1e4b      	subs	r3, r1, #1
   10386:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   1038a:	e777      	b.n	1027c <__kernel_ram_size+0x27c>
	lazy = 0;
   1038c:	463b      	mov	r3, r7
   1038e:	e787      	b.n	102a0 <__kernel_ram_size+0x2a0>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   10390:	3b04      	subs	r3, #4
   10392:	2b01      	cmp	r3, #1
   10394:	d909      	bls.n	103aa <__kernel_ram_size+0x3aa>
   10396:	4a15      	ldr	r2, [pc, #84]	; (103ec <__kernel_ram_size+0x3ec>)
   10398:	4b15      	ldr	r3, [pc, #84]	; (103f0 <__kernel_ram_size+0x3f0>)
   1039a:	9201      	str	r2, [sp, #4]
   1039c:	9200      	str	r2, [sp, #0]
   1039e:	681c      	ldr	r4, [r3, #0]
   103a0:	4914      	ldr	r1, [pc, #80]	; (103f4 <__kernel_ram_size+0x3f4>)
   103a2:	4b15      	ldr	r3, [pc, #84]	; (103f8 <__kernel_ram_size+0x3f8>)
   103a4:	4815      	ldr	r0, [pc, #84]	; (103fc <__kernel_ram_size+0x3fc>)
   103a6:	f7fe bf12 	b.w	f1ce <isr+0x766>
		_radio.state = STATE_NONE;
   103aa:	2300      	movs	r3, #0
   103ac:	7523      	strb	r3, [r4, #20]
   103ae:	f7fe bc06 	b.w	ebbe <isr+0x156>
		LL_ASSERT(0);
   103b2:	4a0e      	ldr	r2, [pc, #56]	; (103ec <__kernel_ram_size+0x3ec>)
   103b4:	4b0e      	ldr	r3, [pc, #56]	; (103f0 <__kernel_ram_size+0x3f0>)
   103b6:	9201      	str	r2, [sp, #4]
   103b8:	9200      	str	r2, [sp, #0]
   103ba:	681c      	ldr	r4, [r3, #0]
   103bc:	4b0e      	ldr	r3, [pc, #56]	; (103f8 <__kernel_ram_size+0x3f8>)
   103be:	f7fe bc4d 	b.w	ec5c <isr+0x1f4>
	clock_control_off(_radio.hf_clock, NULL);
   103c2:	6820      	ldr	r0, [r4, #0]
   103c4:	6843      	ldr	r3, [r0, #4]
   103c6:	4629      	mov	r1, r5
   103c8:	685b      	ldr	r3, [r3, #4]
   103ca:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   103cc:	2201      	movs	r2, #1
   103ce:	4611      	mov	r1, r2
   103d0:	4628      	mov	r0, r5
   103d2:	f7f6 fd0d 	bl	6df0 <mayfly_enable>
   103d6:	f7fe bbf2 	b.w	ebbe <isr+0x156>
		LL_ASSERT(0);
   103da:	4a04      	ldr	r2, [pc, #16]	; (103ec <__kernel_ram_size+0x3ec>)
   103dc:	4b04      	ldr	r3, [pc, #16]	; (103f0 <__kernel_ram_size+0x3f0>)
   103de:	9201      	str	r2, [sp, #4]
   103e0:	9200      	str	r2, [sp, #0]
   103e2:	681c      	ldr	r4, [r3, #0]
   103e4:	4b06      	ldr	r3, [pc, #24]	; (10400 <__kernel_ram_size+0x400>)
   103e6:	f7fe bc39 	b.w	ec5c <isr+0x1f4>
   103ea:	bf00      	nop
   103ec:	000159e9 	.word	0x000159e9
   103f0:	20003ad4 	.word	0x20003ad4
   103f4:	00016791 	.word	0x00016791
   103f8:	00017ed5 	.word	0x00017ed5
   103fc:	0001869d 	.word	0x0001869d
   10400:	00017eeb 	.word	0x00017eeb

00010404 <radio_init>:
{
   10404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   10408:	4e3d      	ldr	r6, [pc, #244]	; (10500 <radio_init+0xfc>)
{
   1040a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1040c:	f89d c01c 	ldrb.w	ip, [sp, #28]
   10410:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
   10414:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   10418:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
   1041c:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   1041e:	f44f 70aa 	mov.w	r0, #340	; 0x154
   10422:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
   10426:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
   1042a:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
   1042e:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
   10430:	f10c 0401 	add.w	r4, ip, #1
   10434:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
   10436:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
   10438:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   1043c:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   10440:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
   10442:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   10444:	bf98      	it	ls
   10446:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
   1044a:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   1044e:	bf88      	it	hi
   10450:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   10454:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
   10458:	bf8c      	ite	hi
   1045a:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   1045e:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
   10462:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   10466:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   1046a:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
   1046e:	bf8c      	ite	hi
   10470:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   10474:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   10476:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   1047a:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
   1047e:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
   10482:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10486:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   1048a:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1048e:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
   10492:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10496:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10498:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
   1049a:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   1049e:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   104a0:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
   104a4:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   104a8:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   104ac:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   104ae:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   104b2:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   104b6:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   104ba:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   104be:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   104c2:	340a      	adds	r4, #10
   104c4:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   104c8:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   104ca:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   104cc:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   104d0:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   104d4:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   104d6:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
   104da:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   104de:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
   104e2:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
   104e6:	d003      	beq.n	104f0 <radio_init+0xec>
		return (retcode + mem_size);
   104e8:	442c      	add	r4, r5
}
   104ea:	4620      	mov	r0, r4
   104ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   104f0:	2301      	movs	r3, #1
   104f2:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
   104f6:	f7f9 fc13 	bl	9d20 <common_init>
	radio_setup();
   104fa:	f002 fe0f 	bl	1311c <radio_setup>
	return retcode;
   104fe:	e7f4      	b.n	104ea <radio_init+0xe6>
   10500:	200008f0 	.word	0x200008f0

00010504 <ll_reset>:
{
   10504:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   10506:	2103      	movs	r1, #3
   10508:	2005      	movs	r0, #5
   1050a:	f7f9 fcf3 	bl	9ef4 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   1050e:	2104      	movs	r1, #4
   10510:	2006      	movs	r0, #6
   10512:	f7f9 fcef 	bl	9ef4 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   10516:	4c22      	ldr	r4, [pc, #136]	; (105a0 <ll_reset+0x9c>)
   10518:	2500      	movs	r5, #0
   1051a:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   1051e:	b2ab      	uxth	r3, r5
   10520:	429a      	cmp	r2, r3
   10522:	f105 0501 	add.w	r5, r5, #1
   10526:	d834      	bhi.n	10592 <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
   10528:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1052c:	f36f 13c7 	bfc	r3, #7, #1
   10530:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   10534:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   10538:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   1053a:	f360 0300 	bfi	r3, r0, #0, #1
   1053e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10542:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10544:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   10548:	fbb3 f3f2 	udiv	r3, r3, r2
   1054c:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10550:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
   10554:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10558:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   1055a:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
   1055e:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10562:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
   10566:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
   1056a:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   1056e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10572:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
   10576:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
   1057a:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
   1057e:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
   10582:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
   10586:	f002 fc4b 	bl	12e20 <ll_filter_reset>
}
   1058a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   1058e:	f7f9 bbc7 	b.w	9d20 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   10592:	1da8      	adds	r0, r5, #6
   10594:	21ff      	movs	r1, #255	; 0xff
   10596:	b2c0      	uxtb	r0, r0
   10598:	f7f9 fcac 	bl	9ef4 <role_disable>
   1059c:	e7bd      	b.n	1051a <ll_reset+0x16>
   1059e:	bf00      	nop
   105a0:	200008f0 	.word	0x200008f0

000105a4 <radio_adv_data_get>:
}
   105a4:	4800      	ldr	r0, [pc, #0]	; (105a8 <radio_adv_data_get+0x4>)
   105a6:	4770      	bx	lr
   105a8:	2000091b 	.word	0x2000091b

000105ac <radio_scan_data_get>:
}
   105ac:	4800      	ldr	r0, [pc, #0]	; (105b0 <radio_scan_data_get+0x4>)
   105ae:	4770      	bx	lr
   105b0:	2000096b 	.word	0x2000096b

000105b4 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   105b4:	4b02      	ldr	r3, [pc, #8]	; (105c0 <ll_adv_is_enabled+0xc>)
   105b6:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   105ba:	09c0      	lsrs	r0, r0, #7
   105bc:	4770      	bx	lr
   105be:	bf00      	nop
   105c0:	200008f0 	.word	0x200008f0

000105c4 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   105c4:	4b04      	ldr	r3, [pc, #16]	; (105d8 <radio_adv_filter_pol_get+0x14>)
   105c6:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   105ca:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   105cc:	bfba      	itte	lt
   105ce:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   105d2:	0980      	lsrlt	r0, r0, #6
   105d4:	2000      	movge	r0, #0
}
   105d6:	4770      	bx	lr
   105d8:	200008f0 	.word	0x200008f0

000105dc <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   105dc:	4a09      	ldr	r2, [pc, #36]	; (10604 <ll_scan_is_enabled+0x28>)
   105de:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   105e2:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   105e6:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   105ea:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   105ee:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   105f0:	f003 0301 	and.w	r3, r3, #1
   105f4:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   105f8:	bf14      	ite	ne
   105fa:	2004      	movne	r0, #4
   105fc:	2000      	moveq	r0, #0
}
   105fe:	4318      	orrs	r0, r3
   10600:	4770      	bx	lr
   10602:	bf00      	nop
   10604:	200008f0 	.word	0x200008f0

00010608 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   10608:	4b05      	ldr	r3, [pc, #20]	; (10620 <radio_scan_filter_pol_get+0x18>)
   1060a:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   1060e:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   10612:	bf1c      	itt	ne
   10614:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   10618:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   1061c:	4770      	bx	lr
   1061e:	bf00      	nop
   10620:	200008f0 	.word	0x200008f0
   10624:	00000000 	.word	0x00000000

00010628 <radio_connect_enable>:
{
   10628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   1062c:	f8df 8384 	ldr.w	r8, [pc, #900]	; 109b4 <radio_connect_enable+0x38c>
{
   10630:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
   10632:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
   10636:	9303      	str	r3, [sp, #12]
   10638:	4683      	mov	fp, r0
   1063a:	468a      	mov	sl, r1
   1063c:	4691      	mov	r9, r2
   1063e:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   10640:	2e00      	cmp	r6, #0
   10642:	f040 819c 	bne.w	1097e <radio_connect_enable+0x356>
	link = mem_acquire(&_radio.link_rx_free);
   10646:	f508 70a4 	add.w	r0, r8, #328	; 0x148
   1064a:	f7f6 fb2e 	bl	6caa <mem_acquire>
	if (!link) {
   1064e:	4607      	mov	r7, r0
   10650:	b150      	cbz	r0, 10668 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   10652:	f508 7086 	add.w	r0, r8, #268	; 0x10c
   10656:	f7f6 fb28 	bl	6caa <mem_acquire>
	if (!conn) {
   1065a:	4604      	mov	r4, r0
   1065c:	b930      	cbnz	r0, 1066c <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   1065e:	f508 71a4 	add.w	r1, r8, #328	; 0x148
   10662:	4638      	mov	r0, r7
   10664:	f7f6 fb3b 	bl	6cde <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   10668:	2007      	movs	r0, #7
   1066a:	e15c      	b.n	10926 <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   1066c:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
   10670:	f36b 1386 	bfi	r3, fp, #6, #1
   10674:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   10678:	2206      	movs	r2, #6
   1067a:	4651      	mov	r1, sl
   1067c:	f108 00ea 	add.w	r0, r8, #234	; 0xea
   10680:	f7f1 face 	bl	1c20 <memcpy>
	_radio.scanner.conn_latency = latency;
   10684:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10688:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   1068c:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   1068e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
   10692:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10696:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   10698:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   1069c:	f002 fdfa 	bl	13294 <radio_tx_ready_delay_get>
   106a0:	49bb      	ldr	r1, [pc, #748]	; (10990 <radio_connect_enable+0x368>)
   106a2:	f200 4052 	addw	r0, r0, #1106	; 0x452
   106a6:	a3b8      	add	r3, pc, #736	; (adr r3, 10988 <radio_connect_enable+0x360>)
   106a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   106ac:	fba0 0101 	umull	r0, r1, r0, r1
   106b0:	f7ef fdb0 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   106b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   106b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   106bc:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
   106c0:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   106c2:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 109b8 <radio_connect_enable+0x390>
	conn->llcp_features = RADIO_BLE_FEAT;
   106c6:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   106ca:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   106ce:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   106d0:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   106d4:	2104      	movs	r1, #4
   106d6:	a805      	add	r0, sp, #20
   106d8:	f7f7 fb1e 	bl	7d18 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   106dc:	f8dd c014 	ldr.w	ip, [sp, #20]
   106e0:	2000      	movs	r0, #0
   106e2:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   106e6:	231f      	movs	r3, #31
	transitions = 0;
   106e8:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   106ea:	2101      	movs	r1, #1
	while (bit_idx--) {
   106ec:	3b01      	subs	r3, #1
   106ee:	b2db      	uxtb	r3, r3
   106f0:	2bff      	cmp	r3, #255	; 0xff
   106f2:	d103      	bne.n	106fc <radio_connect_enable+0xd4>
   106f4:	b3d0      	cbz	r0, 1076c <radio_connect_enable+0x144>
   106f6:	f8cd c014 	str.w	ip, [sp, #20]
   106fa:	e037      	b.n	1076c <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   106fc:	fa2c fe03 	lsr.w	lr, ip, r3
   10700:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   10704:	45d6      	cmp	lr, sl
   10706:	d11a      	bne.n	1073e <radio_connect_enable+0x116>
			consecutive_cnt++;
   10708:	3101      	adds	r1, #1
   1070a:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   1070c:	2906      	cmp	r1, #6
   1070e:	d807      	bhi.n	10720 <radio_connect_enable+0xf8>
   10710:	2b1b      	cmp	r3, #27
   10712:	d81a      	bhi.n	1074a <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   10714:	b122      	cbz	r2, 10720 <radio_connect_enable+0xf8>
   10716:	2b1b      	cmp	r3, #27
   10718:	d017      	beq.n	1074a <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   1071a:	2a01      	cmp	r2, #1
   1071c:	d815      	bhi.n	1074a <radio_connect_enable+0x122>
   1071e:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   10720:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   10724:	f1be 0f00 	cmp.w	lr, #0
   10728:	f000 8100 	beq.w	1092c <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   1072c:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   10730:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   10734:	3201      	adds	r2, #1
   10736:	2001      	movs	r0, #1
   10738:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   1073a:	4601      	mov	r1, r0
   1073c:	e005      	b.n	1074a <radio_connect_enable+0x122>
			transitions++;
   1073e:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   10740:	2b1b      	cmp	r3, #27
			transitions++;
   10742:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   10744:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   10748:	d9e5      	bls.n	10716 <radio_connect_enable+0xee>
		if (transitions > 24) {
   1074a:	2a18      	cmp	r2, #24
   1074c:	f240 80f6 	bls.w	1093c <radio_connect_enable+0x314>
   10750:	b108      	cbz	r0, 10756 <radio_connect_enable+0x12e>
   10752:	f8cd c014 	str.w	ip, [sp, #20]
   10756:	3301      	adds	r3, #1
   10758:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   1075a:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   1075e:	f1be 0f00 	cmp.w	lr, #0
   10762:	f000 80e8 	beq.w	10936 <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   10766:	425b      	negs	r3, r3
   10768:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   1076a:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   1076c:	9b05      	ldr	r3, [sp, #20]
   1076e:	a806      	add	r0, sp, #24
   10770:	ea83 0308 	eor.w	r3, r3, r8
   10774:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   10778:	2104      	movs	r1, #4
   1077a:	f7f6 fc41 	bl	7000 <util_ones_count_get>
   1077e:	2801      	cmp	r0, #1
   10780:	f240 80e3 	bls.w	1094a <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   10784:	9b05      	ldr	r3, [sp, #20]
   10786:	b29a      	uxth	r2, r3
   10788:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   1078c:	f000 80d8 	beq.w	10940 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   10790:	2204      	movs	r2, #4
   10792:	a905      	add	r1, sp, #20
   10794:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   10798:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   1079a:	f7f1 fa41 	bl	1c20 <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   1079e:	2103      	movs	r1, #3
   107a0:	f104 0014 	add.w	r0, r4, #20
   107a4:	f7f7 fab8 	bl	7d18 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   107a8:	2205      	movs	r2, #5
   107aa:	497a      	ldr	r1, [pc, #488]	; (10994 <radio_connect_enable+0x36c>)
   107ac:	f104 0017 	add.w	r0, r4, #23
   107b0:	f7f1 fa36 	bl	1c20 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   107b4:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
   107b8:	7f63      	ldrb	r3, [r4, #29]
   107ba:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   107be:	f36f 1386 	bfc	r3, #6, #1
   107c2:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   107c4:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   107c6:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   107c8:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   107ca:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   107cc:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
   107d0:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
   107d4:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
   107d8:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   107da:	211b      	movs	r1, #27
   107dc:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   107de:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   107e0:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
   107e4:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   107e6:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   107ea:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   107ee:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   107f0:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   107f2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   107f6:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   107f8:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   107fc:	2601      	movs	r6, #1
   107fe:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   10802:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   10806:	f363 11c7 	bfi	r1, r3, #7, #1
   1080a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   1080e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   10812:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   10816:	f366 0102 	bfi	r1, r6, #0, #3
   1081a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   1081e:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
   10822:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   10824:	b2c9      	uxtb	r1, r1
   10826:	f36c 01c5 	bfi	r1, ip, #3, #3
   1082a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   1082e:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   10832:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   10834:	f366 0102 	bfi	r1, r6, #0, #3
   10838:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   1083c:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   1083e:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   10840:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   10844:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   10846:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   10848:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   1084c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   10850:	f363 0100 	bfi	r1, r3, #0, #1
   10854:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   10858:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1085c:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10860:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
   10864:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10868:	1e56      	subs	r6, r2, #1
   1086a:	f242 7e10 	movw	lr, #10000	; 0x2710
   1086e:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   10872:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10876:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1087a:	4b47      	ldr	r3, [pc, #284]	; (10998 <radio_connect_enable+0x370>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   1087c:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   1087e:	4947      	ldr	r1, [pc, #284]	; (1099c <radio_connect_enable+0x374>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10880:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10882:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10884:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10888:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1088c:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   1088e:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10892:	1d81      	adds	r1, r0, #6
   10894:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10896:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1089a:	dc6a      	bgt.n	10972 <radio_connect_enable+0x34a>
	conn->llcp_version.tx = 0;
   1089c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   108a0:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   108a4:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   108a6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   108aa:	f360 0341 	bfi	r3, r0, #1, #1
   108ae:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   108b2:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   108b6:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   108ba:	f360 1304 	bfi	r3, r0, #4, #1
   108be:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   108c2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   108c6:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   108ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
   108ce:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   108d2:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   108d6:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   108da:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   108de:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   108e2:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   108e6:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   108ea:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   108ee:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   108f2:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   108f6:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   108fa:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   108fe:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   10902:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   10906:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   1090a:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   1090e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   10912:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   10916:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   1091a:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   1091e:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   10922:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
   10926:	b007      	add	sp, #28
   10928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   1092c:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   10930:	f04f 0e01 	mov.w	lr, #1
   10934:	e6fe      	b.n	10734 <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   10936:	3b01      	subs	r3, #1
   10938:	4313      	orrs	r3, r2
   1093a:	e716      	b.n	1076a <radio_connect_enable+0x142>
		if (transitions > 24) {
   1093c:	46f2      	mov	sl, lr
   1093e:	e6d5      	b.n	106ec <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   10940:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   10942:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   10946:	f47f af23 	bne.w	10790 <radio_connect_enable+0x168>
   1094a:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   1094c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   10950:	f47f aec0 	bne.w	106d4 <radio_connect_enable+0xac>
   10954:	4a12      	ldr	r2, [pc, #72]	; (109a0 <radio_connect_enable+0x378>)
   10956:	4b13      	ldr	r3, [pc, #76]	; (109a4 <radio_connect_enable+0x37c>)
   10958:	9201      	str	r2, [sp, #4]
   1095a:	9200      	str	r2, [sp, #0]
   1095c:	681c      	ldr	r4, [r3, #0]
   1095e:	4912      	ldr	r1, [pc, #72]	; (109a8 <radio_connect_enable+0x380>)
   10960:	4b12      	ldr	r3, [pc, #72]	; (109ac <radio_connect_enable+0x384>)
   10962:	4813      	ldr	r0, [pc, #76]	; (109b0 <radio_connect_enable+0x388>)
   10964:	47a0      	blx	r4
   10966:	4040      	eors	r0, r0
   10968:	f380 8811 	msr	BASEPRI, r0
   1096c:	f04f 0004 	mov.w	r0, #4
   10970:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10972:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   10976:	33fa      	adds	r3, #250	; 0xfa
   10978:	441a      	add	r2, r3
   1097a:	b292      	uxth	r2, r2
   1097c:	e78e      	b.n	1089c <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1097e:	200c      	movs	r0, #12
   10980:	e7d1      	b.n	10926 <radio_connect_enable+0x2fe>
   10982:	bf00      	nop
   10984:	f3af 8000 	nop.w
   10988:	1afd498d 	.word	0x1afd498d
   1098c:	00000007 	.word	0x00000007
   10990:	3b9aca00 	.word	0x3b9aca00
   10994:	20000a0a 	.word	0x20000a0a
   10998:	01c9c37f 	.word	0x01c9c37f
   1099c:	026259ff 	.word	0x026259ff
   109a0:	000159e9 	.word	0x000159e9
   109a4:	20003ad4 	.word	0x20003ad4
   109a8:	00016791 	.word	0x00016791
   109ac:	00018075 	.word	0x00018075
   109b0:	00018b80 	.word	0x00018b80
   109b4:	200008f0 	.word	0x200008f0
   109b8:	8e89bed6 	.word	0x8e89bed6

000109bc <ll_conn_update>:
{
   109bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   109c0:	460c      	mov	r4, r1
   109c2:	4690      	mov	r8, r2
   109c4:	461d      	mov	r5, r3
   109c6:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   109ca:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   109ce:	f7f9 fa7b 	bl	9ec8 <connection_get>
	if (!conn) {
   109d2:	b330      	cbz	r0, 10a22 <ll_conn_update+0x66>
	if (!cmd) {
   109d4:	2c00      	cmp	r4, #0
   109d6:	d14a      	bne.n	10a6e <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   109d8:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   109dc:	06d9      	lsls	r1, r3, #27
   109de:	d407      	bmi.n	109f0 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   109e0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   109e4:	069a      	lsls	r2, r3, #26
   109e6:	d541      	bpl.n	10a6c <ll_conn_update+0xb0>
		     (conn->llcp_features &
   109e8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   109ec:	079b      	lsls	r3, r3, #30
   109ee:	d43d      	bmi.n	10a6c <ll_conn_update+0xb0>
		} else if (conn->role) {
   109f0:	f990 301d 	ldrsb.w	r3, [r0, #29]
   109f4:	2b00      	cmp	r3, #0
   109f6:	da17      	bge.n	10a28 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   109f8:	201a      	movs	r0, #26
   109fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   109fe:	428b      	cmp	r3, r1
   10a00:	d00f      	beq.n	10a22 <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   10a02:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   10a06:	f003 0207 	and.w	r2, r3, #7
   10a0a:	2a03      	cmp	r2, #3
   10a0c:	d109      	bne.n	10a22 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   10a0e:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   10a12:	b2db      	uxtb	r3, r3
   10a14:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   10a18:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   10a1c:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   10a20:	e021      	b.n	10a66 <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10a22:	200c      	movs	r0, #12
   10a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   10a28:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   10a2c:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   10a30:	429a      	cmp	r2, r3
   10a32:	d1f6      	bne.n	10a22 <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10a34:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   10a38:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   10a3c:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   10a3e:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10a40:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   10a44:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   10a48:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   10a4a:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   10a4e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   10a52:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   10a56:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   10a5a:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   10a5e:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   10a62:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   10a66:	2000      	movs	r0, #0
   10a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   10a6c:	2401      	movs	r4, #1
		cmd--;
   10a6e:	3c01      	subs	r4, #1
		if (cmd) {
   10a70:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   10a74:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   10a78:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   10a7c:	d1bf      	bne.n	109fe <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   10a7e:	4299      	cmp	r1, r3
   10a80:	d1cf      	bne.n	10a22 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   10a82:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   10a86:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   10a8a:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   10a8e:	b2db      	uxtb	r3, r3
   10a90:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   10a94:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   10a96:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   10a9a:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   10a9e:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   10aa2:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   10aa6:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   10aaa:	e7dc      	b.n	10a66 <ll_conn_update+0xaa>

00010aac <ll_chm_update>:
{
   10aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   10ab0:	4c1e      	ldr	r4, [pc, #120]	; (10b2c <ll_chm_update+0x80>)
   10ab2:	4601      	mov	r1, r0
   10ab4:	2205      	movs	r2, #5
{
   10ab6:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   10ab8:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   10abc:	f7f1 f8b0 	bl	1c20 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   10ac0:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   10ac4:	2105      	movs	r1, #5
   10ac6:	f7f6 fa9b 	bl	7000 <util_ones_count_get>
	_radio.data_chan_count =
   10aca:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   10ace:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   10ad2:	3c01      	subs	r4, #1
   10ad4:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   10ad6:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   10ad8:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   10adc:	2cff      	cmp	r4, #255	; 0xff
   10ade:	d102      	bne.n	10ae6 <ll_chm_update+0x3a>
	return 0;
   10ae0:	2000      	movs	r0, #0
   10ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   10ae6:	4620      	mov	r0, r4
   10ae8:	f7f9 f9ee 	bl	9ec8 <connection_get>
		if (!conn || conn->role) {
   10aec:	4606      	mov	r6, r0
   10aee:	b1b8      	cbz	r0, 10b20 <ll_chm_update+0x74>
   10af0:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10af4:	2b00      	cmp	r3, #0
   10af6:	db13      	blt.n	10b20 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   10af8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10afc:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10b00:	429a      	cmp	r2, r3
   10b02:	d110      	bne.n	10b26 <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   10b04:	2205      	movs	r2, #5
   10b06:	4629      	mov	r1, r5
   10b08:	3079      	adds	r0, #121	; 0x79
   10b0a:	f7f1 f889 	bl	1c20 <memcpy>
		conn->llcp_req++;
   10b0e:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   10b12:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   10b16:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   10b18:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   10b1c:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   10b20:	3c01      	subs	r4, #1
   10b22:	b2e4      	uxtb	r4, r4
   10b24:	e7da      	b.n	10adc <ll_chm_update+0x30>
			return 1;
   10b26:	2001      	movs	r0, #1
}
   10b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b2c:	200008f0 	.word	0x200008f0

00010b30 <ll_chm_get>:
{
   10b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b32:	460d      	mov	r5, r1
	conn = connection_get(handle);
   10b34:	f7f9 f9c8 	bl	9ec8 <connection_get>
	if (!conn) {
   10b38:	4604      	mov	r4, r0
   10b3a:	b160      	cbz	r0, 10b56 <ll_chm_get+0x26>
		conn->chm_update = 0;
   10b3c:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   10b3e:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   10b42:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   10b44:	2205      	movs	r2, #5
   10b46:	4631      	mov	r1, r6
   10b48:	4628      	mov	r0, r5
   10b4a:	f7f1 f869 	bl	1c20 <memcpy>
	} while (conn->chm_update);
   10b4e:	7f20      	ldrb	r0, [r4, #28]
   10b50:	2800      	cmp	r0, #0
   10b52:	d1f6      	bne.n	10b42 <ll_chm_get+0x12>
   10b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   10b56:	2001      	movs	r0, #1
}
   10b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010b5a <ll_feature_req_send>:
{
   10b5a:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   10b5c:	f7f9 f9b4 	bl	9ec8 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10b60:	b168      	cbz	r0, 10b7e <ll_feature_req_send+0x24>
   10b62:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10b66:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10b6a:	4293      	cmp	r3, r2
   10b6c:	d107      	bne.n	10b7e <ll_feature_req_send+0x24>
	conn->llcp_req++;
   10b6e:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   10b70:	2204      	movs	r2, #4
	conn->llcp_req++;
   10b72:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   10b76:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   10b7a:	2000      	movs	r0, #0
   10b7c:	bd08      	pop	{r3, pc}
		return 1;
   10b7e:	2001      	movs	r0, #1
}
   10b80:	bd08      	pop	{r3, pc}

00010b82 <ll_version_ind_send>:
{
   10b82:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   10b84:	f7f9 f9a0 	bl	9ec8 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10b88:	b168      	cbz	r0, 10ba6 <ll_version_ind_send+0x24>
   10b8a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10b8e:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10b92:	4293      	cmp	r3, r2
   10b94:	d107      	bne.n	10ba6 <ll_version_ind_send+0x24>
	conn->llcp_req++;
   10b96:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   10b98:	2205      	movs	r2, #5
	conn->llcp_req++;
   10b9a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   10b9e:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   10ba2:	2000      	movs	r0, #0
   10ba4:	bd08      	pop	{r3, pc}
		return 1;
   10ba6:	2001      	movs	r0, #1
}
   10ba8:	bd08      	pop	{r3, pc}

00010baa <ll_terminate_ind_send>:
{
   10baa:	b510      	push	{r4, lr}
   10bac:	460c      	mov	r4, r1
	conn = connection_get(handle);
   10bae:	f7f9 f98b 	bl	9ec8 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   10bb2:	b160      	cbz	r0, 10bce <ll_terminate_ind_send+0x24>
   10bb4:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   10bb8:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   10bbc:	4293      	cmp	r3, r2
   10bbe:	d106      	bne.n	10bce <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   10bc0:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   10bc2:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   10bc6:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   10bca:	2000      	movs	r0, #0
   10bcc:	bd10      	pop	{r4, pc}
		return 1;
   10bce:	2001      	movs	r0, #1
}
   10bd0:	bd10      	pop	{r4, pc}

00010bd2 <ll_tx_pwr_lvl_get>:
{
   10bd2:	b510      	push	{r4, lr}
   10bd4:	4614      	mov	r4, r2
	conn = connection_get(handle);
   10bd6:	f7f9 f977 	bl	9ec8 <connection_get>
	if (!conn) {
   10bda:	b110      	cbz	r0, 10be2 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   10bdc:	2000      	movs	r0, #0
   10bde:	7020      	strb	r0, [r4, #0]
	return 0;
   10be0:	bd10      	pop	{r4, pc}
		return 1;
   10be2:	2001      	movs	r0, #1
}
   10be4:	bd10      	pop	{r4, pc}

00010be6 <ll_apto_get>:
{
   10be6:	b510      	push	{r4, lr}
   10be8:	460c      	mov	r4, r1
	conn = connection_get(handle);
   10bea:	f7f9 f96d 	bl	9ec8 <connection_get>
	if (!conn) {
   10bee:	b160      	cbz	r0, 10c0a <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   10bf0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   10bf2:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   10bf6:	435a      	muls	r2, r3
   10bf8:	237d      	movs	r3, #125	; 0x7d
   10bfa:	4353      	muls	r3, r2
	return 0;
   10bfc:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   10bfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10c02:	fb93 f3f2 	sdiv	r3, r3, r2
   10c06:	8023      	strh	r3, [r4, #0]
	return 0;
   10c08:	bd10      	pop	{r4, pc}
		return 1;
   10c0a:	2001      	movs	r0, #1
}
   10c0c:	bd10      	pop	{r4, pc}

00010c0e <ll_apto_set>:
{
   10c0e:	b510      	push	{r4, lr}
   10c10:	460c      	mov	r4, r1
	conn = connection_get(handle);
   10c12:	f7f9 f959 	bl	9ec8 <connection_get>
	if (!conn) {
   10c16:	b170      	cbz	r0, 10c36 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   10c18:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   10c1a:	f240 43e2 	movw	r3, #1250	; 0x4e2
   10c1e:	4353      	muls	r3, r2
   10c20:	f242 7110 	movw	r1, #10000	; 0x2710
   10c24:	fb01 3404 	mla	r4, r1, r4, r3
   10c28:	3c01      	subs	r4, #1
   10c2a:	fb94 f4f3 	sdiv	r4, r4, r3
   10c2e:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   10c32:	2000      	movs	r0, #0
   10c34:	bd10      	pop	{r4, pc}
		return 1;
   10c36:	2001      	movs	r0, #1
}
   10c38:	bd10      	pop	{r4, pc}

00010c3a <ll_length_req_send>:
{
   10c3a:	b570      	push	{r4, r5, r6, lr}
   10c3c:	460e      	mov	r6, r1
   10c3e:	4615      	mov	r5, r2
	conn = connection_get(handle);
   10c40:	f7f9 f942 	bl	9ec8 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10c44:	b1d0      	cbz	r0, 10c7c <ll_length_req_send+0x42>
   10c46:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10c4a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10c4e:	429a      	cmp	r2, r3
   10c50:	d114      	bne.n	10c7c <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   10c52:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10c56:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   10c5a:	4293      	cmp	r3, r2
   10c5c:	d10e      	bne.n	10c7c <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10c5e:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   10c62:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   10c66:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10c68:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   10c6c:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10c70:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   10c74:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   10c78:	2000      	movs	r0, #0
   10c7a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   10c7c:	2001      	movs	r0, #1
}
   10c7e:	bd70      	pop	{r4, r5, r6, pc}

00010c80 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   10c80:	4b03      	ldr	r3, [pc, #12]	; (10c90 <ll_length_default_get+0x10>)
   10c82:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   10c86:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   10c88:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   10c8c:	800b      	strh	r3, [r1, #0]
   10c8e:	4770      	bx	lr
   10c90:	200008f0 	.word	0x200008f0

00010c94 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   10c94:	4b03      	ldr	r3, [pc, #12]	; (10ca4 <ll_length_default_set+0x10>)
   10c96:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   10c9a:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   10c9e:	2000      	movs	r0, #0
   10ca0:	4770      	bx	lr
   10ca2:	bf00      	nop
   10ca4:	200008f0 	.word	0x200008f0

00010ca8 <ll_length_max_get>:
{
   10ca8:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10caa:	241b      	movs	r4, #27
   10cac:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   10cae:	f44f 70a4 	mov.w	r0, #328	; 0x148
   10cb2:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10cb4:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   10cb6:	8018      	strh	r0, [r3, #0]
   10cb8:	bd10      	pop	{r4, pc}

00010cba <ll_phy_get>:
{
   10cba:	b538      	push	{r3, r4, r5, lr}
   10cbc:	460d      	mov	r5, r1
   10cbe:	4614      	mov	r4, r2
	conn = connection_get(handle);
   10cc0:	f7f9 f902 	bl	9ec8 <connection_get>
	if (!conn) {
   10cc4:	b158      	cbz	r0, 10cde <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   10cc6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   10cca:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   10cce:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   10cd0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   10cd4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10cd8:	7023      	strb	r3, [r4, #0]
	return 0;
   10cda:	2000      	movs	r0, #0
   10cdc:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   10cde:	2001      	movs	r0, #1
}
   10ce0:	bd38      	pop	{r3, r4, r5, pc}
	...

00010ce4 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   10ce4:	4b03      	ldr	r3, [pc, #12]	; (10cf4 <ll_phy_default_set+0x10>)
   10ce6:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   10cea:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   10cee:	2000      	movs	r0, #0
   10cf0:	4770      	bx	lr
   10cf2:	bf00      	nop
   10cf4:	200008f0 	.word	0x200008f0

00010cf8 <ll_phy_req_send>:
{
   10cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10cfc:	4689      	mov	r9, r1
   10cfe:	4690      	mov	r8, r2
   10d00:	461f      	mov	r7, r3
	conn = connection_get(handle);
   10d02:	f7f9 f8e1 	bl	9ec8 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10d06:	b320      	cbz	r0, 10d52 <ll_phy_req_send+0x5a>
   10d08:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10d0c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10d10:	429a      	cmp	r2, r3
   10d12:	d11e      	bne.n	10d52 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   10d14:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10d18:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   10d1c:	429d      	cmp	r5, r3
   10d1e:	d118      	bne.n	10d52 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10d20:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   10d24:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   10d28:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   10d2c:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   10d30:	f046 0102 	orr.w	r1, r6, #2
   10d34:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   10d38:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   10d3a:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   10d3c:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   10d40:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   10d44:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   10d48:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   10d4c:	2000      	movs	r0, #0
   10d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   10d52:	2001      	movs	r0, #1
}
   10d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010d58 <ll_rx_get>:
{
   10d58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10d5c:	4605      	mov	r5, r0
   10d5e:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   10d60:	4918      	ldr	r1, [pc, #96]	; (10dc4 <ll_rx_get+0x6c>)
   10d62:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   10d66:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   10d6a:	4293      	cmp	r3, r2
   10d6c:	460f      	mov	r7, r1
   10d6e:	d01f      	beq.n	10db0 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   10d70:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   10d74:	f201 1177 	addw	r1, r1, #375	; 0x177
   10d78:	f898 2000 	ldrb.w	r2, [r8]
   10d7c:	f7f9 f85a 	bl	9e34 <tx_cmplt_get>
		if (!cmplt) {
   10d80:	4604      	mov	r4, r0
   10d82:	b9e0      	cbnz	r0, 10dbe <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   10d84:	ae02      	add	r6, sp, #8
   10d86:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   10d8a:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   10d8e:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   10d92:	4631      	mov	r1, r6
   10d94:	f10d 0006 	add.w	r0, sp, #6
   10d98:	f7f9 f84c 	bl	9e34 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   10d9c:	b934      	cbnz	r4, 10dac <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   10d9e:	b928      	cbnz	r0, 10dac <ll_rx_get+0x54>
			*node_rx = _node_rx;
   10da0:	f8c5 8000 	str.w	r8, [r5]
}
   10da4:	4620      	mov	r0, r4
   10da6:	b002      	add	sp, #8
   10da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   10dac:	4604      	mov	r4, r0
   10dae:	e7ee      	b.n	10d8e <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   10db0:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   10db4:	f201 1177 	addw	r1, r1, #375	; 0x177
   10db8:	f7f9 f83c 	bl	9e34 <tx_cmplt_get>
   10dbc:	4604      	mov	r4, r0
		*node_rx = NULL;
   10dbe:	2300      	movs	r3, #0
   10dc0:	602b      	str	r3, [r5, #0]
   10dc2:	e7ef      	b.n	10da4 <ll_rx_get+0x4c>
   10dc4:	200008f0 	.word	0x200008f0

00010dc8 <ll_rx_mem_release>:
{
   10dc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   10dcc:	4c1c      	ldr	r4, [pc, #112]	; (10e40 <ll_rx_mem_release+0x78>)
{
   10dce:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   10dd0:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   10dd2:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   10dd6:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   10dda:	b930      	cbnz	r0, 10dea <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   10ddc:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   10dde:	20ff      	movs	r0, #255	; 0xff
}
   10de0:	b002      	add	sp, #8
   10de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   10de6:	f7f8 bf4f 	b.w	9c88 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   10dea:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   10dec:	f8d0 8000 	ldr.w	r8, [r0]
   10df0:	2a0c      	cmp	r2, #12
   10df2:	d807      	bhi.n	10e04 <ll_rx_mem_release+0x3c>
   10df4:	2301      	movs	r3, #1
   10df6:	4093      	lsls	r3, r2
   10df8:	f641 727e 	movw	r2, #8062	; 0x1f7e
   10dfc:	4213      	tst	r3, r2
   10dfe:	d110      	bne.n	10e22 <ll_rx_mem_release+0x5a>
   10e00:	061b      	lsls	r3, r3, #24
   10e02:	d413      	bmi.n	10e2c <ll_rx_mem_release+0x64>
			LL_ASSERT(0);
   10e04:	4a0f      	ldr	r2, [pc, #60]	; (10e44 <ll_rx_mem_release+0x7c>)
   10e06:	4b10      	ldr	r3, [pc, #64]	; (10e48 <ll_rx_mem_release+0x80>)
   10e08:	9201      	str	r2, [sp, #4]
   10e0a:	9200      	str	r2, [sp, #0]
   10e0c:	681c      	ldr	r4, [r3, #0]
   10e0e:	490f      	ldr	r1, [pc, #60]	; (10e4c <ll_rx_mem_release+0x84>)
   10e10:	4b0f      	ldr	r3, [pc, #60]	; (10e50 <ll_rx_mem_release+0x88>)
   10e12:	4810      	ldr	r0, [pc, #64]	; (10e54 <ll_rx_mem_release+0x8c>)
   10e14:	47a0      	blx	r4
   10e16:	4040      	eors	r0, r0
   10e18:	f380 8811 	msr	BASEPRI, r0
   10e1c:	f04f 0004 	mov.w	r0, #4
   10e20:	df02      	svc	2
			mem_release(_node_rx_free,
   10e22:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   10e24:	f7f5 ff5b 	bl	6cde <mem_release>
{
   10e28:	4640      	mov	r0, r8
   10e2a:	e7d6      	b.n	10dda <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   10e2c:	88c2      	ldrh	r2, [r0, #6]
   10e2e:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   10e32:	f44f 71aa 	mov.w	r1, #340	; 0x154
   10e36:	f7f5 ff6d 	bl	6d14 <mem_get>
			mem_release(conn, &_radio.conn_free);
   10e3a:	4639      	mov	r1, r7
   10e3c:	e7f2      	b.n	10e24 <ll_rx_mem_release+0x5c>
   10e3e:	bf00      	nop
   10e40:	20000a20 	.word	0x20000a20
   10e44:	000159e9 	.word	0x000159e9
   10e48:	20003ad4 	.word	0x20003ad4
   10e4c:	00016791 	.word	0x00016791
   10e50:	0001828b 	.word	0x0001828b
   10e54:	000166ef 	.word	0x000166ef

00010e58 <do_radio_rx_fc_set>:
	if (req == ack) {
   10e58:	4291      	cmp	r1, r2
{
   10e5a:	b510      	push	{r4, lr}
   10e5c:	4b14      	ldr	r3, [pc, #80]	; (10eb0 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   10e5e:	d119      	bne.n	10e94 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   10e60:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   10e64:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   10e68:	4294      	cmp	r4, r2
   10e6a:	d111      	bne.n	10e90 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   10e6c:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   10e6e:	bf14      	ite	ne
   10e70:	460a      	movne	r2, r1
   10e72:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   10e74:	3a01      	subs	r2, #1
   10e76:	b2d2      	uxtb	r2, r2
   10e78:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   10e7c:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   10e80:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   10e84:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   10e88:	4291      	cmp	r1, r2
   10e8a:	d00f      	beq.n	10eac <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   10e8c:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   10e90:	2001      	movs	r0, #1
   10e92:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   10e94:	b929      	cbnz	r1, 10ea2 <do_radio_rx_fc_set+0x4a>
   10e96:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   10e9a:	1a18      	subs	r0, r3, r0
   10e9c:	bf18      	it	ne
   10e9e:	2001      	movne	r0, #1
   10ea0:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   10ea2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   10ea6:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   10eaa:	e7f6      	b.n	10e9a <do_radio_rx_fc_set+0x42>
	return 0;
   10eac:	2000      	movs	r0, #0
}
   10eae:	bd10      	pop	{r4, pc}
   10eb0:	200008f0 	.word	0x200008f0

00010eb4 <radio_rx_fc_set>:
{
   10eb4:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   10eb6:	4b14      	ldr	r3, [pc, #80]	; (10f08 <radio_rx_fc_set+0x54>)
   10eb8:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   10ebc:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   10ebe:	b302      	cbz	r2, 10f02 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   10ec0:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   10ec4:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   10ec6:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   10eca:	b135      	cbz	r5, 10eda <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   10ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10ed0:	4298      	cmp	r0, r3
   10ed2:	d016      	beq.n	10f02 <radio_rx_fc_set+0x4e>
}
   10ed4:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   10ed6:	f7ff bfbf 	b.w	10e58 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   10eda:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   10ede:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   10ee2:	42a0      	cmp	r0, r4
   10ee4:	d10d      	bne.n	10f02 <radio_rx_fc_set+0x4e>
   10ee6:	4291      	cmp	r1, r2
   10ee8:	d00b      	beq.n	10f02 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10eea:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   10eee:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10ef2:	42a0      	cmp	r0, r4
   10ef4:	d005      	beq.n	10f02 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   10ef6:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10efa:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   10efc:	bf08      	it	eq
   10efe:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   10f02:	2000      	movs	r0, #0
   10f04:	bc30      	pop	{r4, r5}
   10f06:	4770      	bx	lr
   10f08:	200008f0 	.word	0x200008f0

00010f0c <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   10f0c:	4801      	ldr	r0, [pc, #4]	; (10f14 <ll_tx_mem_acquire+0x8>)
   10f0e:	f7f5 becc 	b.w	6caa <mem_acquire>
   10f12:	bf00      	nop
   10f14:	20000a54 	.word	0x20000a54

00010f18 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   10f18:	4901      	ldr	r1, [pc, #4]	; (10f20 <ll_tx_mem_release+0x8>)
   10f1a:	f7f5 bee0 	b.w	6cde <mem_release>
   10f1e:	bf00      	nop
   10f20:	20000a54 	.word	0x20000a54

00010f24 <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   10f24:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   10f26:	4d33      	ldr	r5, [pc, #204]	; (10ff4 <ll_tx_mem_enqueue+0xd0>)
   10f28:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   10f2c:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   10f30:	3401      	adds	r4, #1
{
   10f32:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   10f34:	b2e4      	uxtb	r4, r4
{
   10f36:	4607      	mov	r7, r0
   10f38:	460e      	mov	r6, r1
		last = 0;
   10f3a:	42a3      	cmp	r3, r4
   10f3c:	bf08      	it	eq
   10f3e:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   10f40:	f7f8 ffc2 	bl	9ec8 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   10f44:	2800      	cmp	r0, #0
   10f46:	d053      	beq.n	10ff0 <ll_tx_mem_enqueue+0xcc>
   10f48:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   10f4c:	429c      	cmp	r4, r3
   10f4e:	d04f      	beq.n	10ff0 <ll_tx_mem_enqueue+0xcc>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   10f50:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   10f54:	7972      	ldrb	r2, [r6, #5]
   10f56:	3b07      	subs	r3, #7
   10f58:	429a      	cmp	r2, r3
   10f5a:	d90e      	bls.n	10f7a <ll_tx_mem_enqueue+0x56>
   10f5c:	4a26      	ldr	r2, [pc, #152]	; (10ff8 <ll_tx_mem_enqueue+0xd4>)
   10f5e:	4b27      	ldr	r3, [pc, #156]	; (10ffc <ll_tx_mem_enqueue+0xd8>)
   10f60:	9201      	str	r2, [sp, #4]
   10f62:	9200      	str	r2, [sp, #0]
   10f64:	681c      	ldr	r4, [r3, #0]
   10f66:	4926      	ldr	r1, [pc, #152]	; (11000 <ll_tx_mem_enqueue+0xdc>)
   10f68:	4b26      	ldr	r3, [pc, #152]	; (11004 <ll_tx_mem_enqueue+0xe0>)
   10f6a:	4827      	ldr	r0, [pc, #156]	; (11008 <ll_tx_mem_enqueue+0xe4>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10f6c:	47a0      	blx	r4
   10f6e:	4040      	eors	r0, r0
   10f70:	f380 8811 	msr	BASEPRI, r0
   10f74:	f04f 0004 	mov.w	r0, #4
   10f78:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   10f7a:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   10f7e:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   10f82:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   10f86:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   10f8a:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   10f8c:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   10f90:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10f94:	2b00      	cmp	r3, #0
   10f96:	db02      	blt.n	10f9e <ll_tx_mem_enqueue+0x7a>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   10f98:	2000      	movs	r0, #0
}
   10f9a:	b009      	add	sp, #36	; 0x24
   10f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   10f9e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   10fa0:	2b00      	cmp	r3, #0
   10fa2:	d0f9      	beq.n	10f98 <ll_tx_mem_enqueue+0x74>
   10fa4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   10fa8:	f012 0302 	ands.w	r3, r2, #2
   10fac:	d1f4      	bne.n	10f98 <ll_tx_mem_enqueue+0x74>
		conn->slave.latency_cancel = 1;
   10fae:	f042 0202 	orr.w	r2, r2, #2
   10fb2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   10fb6:	f890 2020 	ldrb.w	r2, [r0, #32]
   10fba:	4914      	ldr	r1, [pc, #80]	; (1100c <ll_tx_mem_enqueue+0xe8>)
   10fbc:	9105      	str	r1, [sp, #20]
   10fbe:	3207      	adds	r2, #7
   10fc0:	2101      	movs	r1, #1
   10fc2:	9006      	str	r0, [sp, #24]
   10fc4:	9304      	str	r3, [sp, #16]
   10fc6:	9103      	str	r1, [sp, #12]
   10fc8:	9302      	str	r3, [sp, #8]
   10fca:	9301      	str	r3, [sp, #4]
   10fcc:	9300      	str	r3, [sp, #0]
   10fce:	4618      	mov	r0, r3
   10fd0:	b2d2      	uxtb	r2, r2
   10fd2:	2103      	movs	r1, #3
   10fd4:	f7f6 fd42 	bl	7a5c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10fd8:	f030 0302 	bics.w	r3, r0, #2
   10fdc:	d0dc      	beq.n	10f98 <ll_tx_mem_enqueue+0x74>
   10fde:	4a06      	ldr	r2, [pc, #24]	; (10ff8 <ll_tx_mem_enqueue+0xd4>)
   10fe0:	4b06      	ldr	r3, [pc, #24]	; (10ffc <ll_tx_mem_enqueue+0xd8>)
   10fe2:	9201      	str	r2, [sp, #4]
   10fe4:	9200      	str	r2, [sp, #0]
   10fe6:	681c      	ldr	r4, [r3, #0]
   10fe8:	4905      	ldr	r1, [pc, #20]	; (11000 <ll_tx_mem_enqueue+0xdc>)
   10fea:	4b06      	ldr	r3, [pc, #24]	; (11004 <ll_tx_mem_enqueue+0xe0>)
   10fec:	4808      	ldr	r0, [pc, #32]	; (11010 <ll_tx_mem_enqueue+0xec>)
   10fee:	e7bd      	b.n	10f6c <ll_tx_mem_enqueue+0x48>
		return 1;
   10ff0:	2001      	movs	r0, #1
   10ff2:	e7d2      	b.n	10f9a <ll_tx_mem_enqueue+0x76>
   10ff4:	200008f0 	.word	0x200008f0
   10ff8:	000159e9 	.word	0x000159e9
   10ffc:	20003ad4 	.word	0x20003ad4
   11000:	00016791 	.word	0x00016791
   11004:	000182b9 	.word	0x000182b9
   11008:	000188df 	.word	0x000188df
   1100c:	0000ac3d 	.word	0x0000ac3d
   11010:	000182f1 	.word	0x000182f1

00011014 <ll_enc_req_send>:
{
   11014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11018:	4607      	mov	r7, r0
   1101a:	4688      	mov	r8, r1
   1101c:	4616      	mov	r6, r2
   1101e:	4699      	mov	r9, r3
	conn = connection_get(handle);
   11020:	f7f8 ff52 	bl	9ec8 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   11024:	4605      	mov	r5, r0
   11026:	b910      	cbnz	r0, 1102e <ll_enc_req_send+0x1a>
			return 1;
   11028:	2001      	movs	r0, #1
   1102a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1102e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11032:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11036:	429a      	cmp	r2, r3
   11038:	d1f6      	bne.n	11028 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   1103a:	f7ff ff67 	bl	10f0c <ll_tx_mem_acquire>
	if (node_tx) {
   1103e:	4604      	mov	r4, r0
   11040:	2800      	cmp	r0, #0
   11042:	d0f1      	beq.n	11028 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   11044:	2210      	movs	r2, #16
   11046:	4649      	mov	r1, r9
   11048:	f105 0084 	add.w	r0, r5, #132	; 0x84
   1104c:	f7f0 fde8 	bl	1c20 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   11050:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   11054:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   11058:	d124      	bne.n	110a4 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1105a:	7923      	ldrb	r3, [r4, #4]
   1105c:	f043 0303 	orr.w	r3, r3, #3
   11060:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   11062:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   11064:	2208      	movs	r2, #8
			pdu_data_tx->len =
   11066:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   11068:	2303      	movs	r3, #3
   1106a:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   1106c:	4641      	mov	r1, r8
   1106e:	18a0      	adds	r0, r4, r2
   11070:	f7f0 fdd6 	bl	1c20 <memcpy>
			enc_req->ediv[0] = ediv[0];
   11074:	7833      	ldrb	r3, [r6, #0]
   11076:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   11078:	7873      	ldrb	r3, [r6, #1]
   1107a:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   1107c:	2108      	movs	r1, #8
   1107e:	f104 0012 	add.w	r0, r4, #18
   11082:	f7f6 fe49 	bl	7d18 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   11086:	2104      	movs	r1, #4
   11088:	f104 001a 	add.w	r0, r4, #26
   1108c:	f7f6 fe44 	bl	7d18 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   11090:	4621      	mov	r1, r4
   11092:	4638      	mov	r0, r7
   11094:	f7ff ff46 	bl	10f24 <ll_tx_mem_enqueue>
   11098:	2601      	movs	r6, #1
   1109a:	b1d0      	cbz	r0, 110d2 <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   1109c:	4620      	mov	r0, r4
   1109e:	f7ff ff3b 	bl	10f18 <ll_tx_mem_release>
   110a2:	e7c1      	b.n	11028 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   110a4:	2b30      	cmp	r3, #48	; 0x30
   110a6:	d1f9      	bne.n	1109c <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   110a8:	2208      	movs	r2, #8
   110aa:	4641      	mov	r1, r8
   110ac:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   110b0:	f7f0 fdb6 	bl	1c20 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   110b4:	7833      	ldrb	r3, [r6, #0]
   110b6:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   110ba:	7873      	ldrb	r3, [r6, #1]
   110bc:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   110c0:	7923      	ldrb	r3, [r4, #4]
   110c2:	f043 0303 	orr.w	r3, r3, #3
   110c6:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   110c8:	2301      	movs	r3, #1
   110ca:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   110cc:	230a      	movs	r3, #10
   110ce:	71e3      	strb	r3, [r4, #7]
   110d0:	e7de      	b.n	11090 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   110d2:	2303      	movs	r3, #3
   110d4:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   110d8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   110dc:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   110e0:	3301      	adds	r3, #1
   110e2:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   110e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   110ea:	0000      	movs	r0, r0
   110ec:	0000      	movs	r0, r0
	...

000110f0 <radio_adv_enable>:
{
   110f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.advertiser.is_enabled) {
   110f4:	f8df b37c 	ldr.w	fp, [pc, #892]	; 11474 <radio_adv_enable+0x384>
{
   110f8:	b08f      	sub	sp, #60	; 0x3c
   110fa:	4699      	mov	r9, r3
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   110fc:	2302      	movs	r3, #2
   110fe:	930d      	str	r3, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
   11100:	f99b 3028 	ldrsb.w	r3, [fp, #40]	; 0x28
{
   11104:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	if (_radio.advertiser.is_enabled) {
   11108:	2b00      	cmp	r3, #0
{
   1110a:	4682      	mov	sl, r0
   1110c:	4688      	mov	r8, r1
   1110e:	465d      	mov	r5, fp
	if (_radio.advertiser.is_enabled) {
   11110:	da01      	bge.n	11116 <radio_adv_enable+0x26>
	return BT_HCI_ERR_CMD_DISALLOWED;
   11112:	200c      	movs	r0, #12
   11114:	e19c      	b.n	11450 <radio_adv_enable+0x360>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
   11116:	f89b 207a 	ldrb.w	r2, [fp, #122]	; 0x7a
   1111a:	232b      	movs	r3, #43	; 0x2b
   1111c:	2727      	movs	r7, #39	; 0x27
   1111e:	fb17 3702 	smlabb	r7, r7, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   11122:	f81b 3007 	ldrb.w	r3, [fp, r7]
   11126:	f003 030f 	and.w	r3, r3, #15
   1112a:	2b01      	cmp	r3, #1
   1112c:	f200 8146 	bhi.w	113bc <radio_adv_enable+0x2cc>
		if (_radio.advertiser.conn) {
   11130:	f8db 60cc 	ldr.w	r6, [fp, #204]	; 0xcc
   11134:	2e00      	cmp	r6, #0
   11136:	d1ec      	bne.n	11112 <radio_adv_enable+0x22>
		link = mem_acquire(&_radio.link_rx_free);
   11138:	f50b 70a4 	add.w	r0, fp, #328	; 0x148
   1113c:	f7f5 fdb5 	bl	6caa <mem_acquire>
		if (!link) {
   11140:	900a      	str	r0, [sp, #40]	; 0x28
   11142:	b158      	cbz	r0, 1115c <radio_adv_enable+0x6c>
		conn = mem_acquire(&_radio.conn_free);
   11144:	f50b 7086 	add.w	r0, fp, #268	; 0x10c
   11148:	f7f5 fdaf 	bl	6caa <mem_acquire>
		if (!conn) {
   1114c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1114e:	4604      	mov	r4, r0
   11150:	b930      	cbnz	r0, 11160 <radio_adv_enable+0x70>
			mem_release(link, &_radio.link_rx_free);
   11152:	f50b 71a4 	add.w	r1, fp, #328	; 0x148
   11156:	4610      	mov	r0, r2
   11158:	f7f5 fdc1 	bl	6cde <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1115c:	2007      	movs	r0, #7
   1115e:	e177      	b.n	11450 <radio_adv_enable+0x360>
		conn->handle = 0xFFFF;
   11160:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11164:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   11166:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   1116a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   1116e:	7f43      	ldrb	r3, [r0, #29]
		conn->data_chan_use = 0;
   11170:	77c6      	strb	r6, [r0, #31]
		conn->data_chan_sel = 0;
   11172:	f366 1386 	bfi	r3, r6, #6, #1
   11176:	7743      	strb	r3, [r0, #29]
		conn->default_tx_octets = _radio.default_tx_octets;
   11178:	f8bb 3122 	ldrh.w	r3, [fp, #290]	; 0x122
   1117c:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1117e:	231b      	movs	r3, #27
   11180:	85c3      	strh	r3, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   11182:	8603      	strh	r3, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   11184:	f8bb 3124 	ldrh.w	r3, [fp, #292]	; 0x124
   11188:	8643      	strh	r3, [r0, #50]	; 0x32
		conn->max_tx_time =
   1118a:	f44f 73a4 	mov.w	r3, #328	; 0x148
   1118e:	8683      	strh	r3, [r0, #52]	; 0x34
		conn->max_rx_time =
   11190:	86c3      	strh	r3, [r0, #54]	; 0x36
		conn->phy_pref_tx = _radio.default_phy_tx;
   11192:	f8bb 1126 	ldrh.w	r1, [fp, #294]	; 0x126
   11196:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->event_counter = 0;
   1119a:	8446      	strh	r6, [r0, #34]	; 0x22
		conn->phy_pref_tx = _radio.default_phy_tx;
   1119c:	f361 0302 	bfi	r3, r1, #0, #3
		conn->phy_tx = BIT(0);
   111a0:	2101      	movs	r1, #1
   111a2:	f361 03c5 	bfi	r3, r1, #3, #3
		conn->phy_pref_flags = 0;
   111a6:	f366 1386 	bfi	r3, r6, #6, #1
		conn->phy_flags = 0;
   111aa:	f366 13c7 	bfi	r3, r6, #7, #1
   111ae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   111b2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
		conn->latency_prepare = 0;
   111b6:	8506      	strh	r6, [r0, #40]	; 0x28
		conn->phy_tx_time = BIT(0);
   111b8:	f361 0302 	bfi	r3, r1, #0, #3
   111bc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		conn->latency_event = 0;
   111c0:	8546      	strh	r6, [r0, #42]	; 0x2a
		conn->phy_pref_rx = _radio.default_phy_rx;
   111c2:	f8bb 0128 	ldrh.w	r0, [fp, #296]	; 0x128
		conn->slave.window_widening_prepare_us = 0;
   111c6:	65e6      	str	r6, [r4, #92]	; 0x5c
		conn->phy_pref_rx = _radio.default_phy_rx;
   111c8:	b2db      	uxtb	r3, r3
   111ca:	f360 03c5 	bfi	r3, r0, #3, #3
   111ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->phy_rx = BIT(0);
   111d2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		conn->slave.window_widening_event_us = 0;
   111d6:	6626      	str	r6, [r4, #96]	; 0x60
		conn->phy_rx = BIT(0);
   111d8:	f361 0302 	bfi	r3, r1, #0, #3
   111dc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		conn->role = 1;
   111e0:	7f63      	ldrb	r3, [r4, #29]
   111e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   111e6:	7763      	strb	r3, [r4, #29]
		conn->connect_expire = 6;
   111e8:	2306      	movs	r3, #6
   111ea:	87a3      	strh	r3, [r4, #60]	; 0x3c
		conn->common.fex_valid = 0;
   111ec:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   111f0:	f366 1345 	bfi	r3, r6, #5, #1
		conn->slave.latency_enabled = 0;
   111f4:	f366 0300 	bfi	r3, r6, #0, #1
		conn->slave.latency_cancel = 0;
   111f8:	f366 0341 	bfi	r3, r6, #1, #1
   111fc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		conn->slave.ticks_to_offset = 0;
   11200:	6726      	str	r6, [r4, #112]	; 0x70
		conn->llcp_version.tx = 0;
   11202:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
		conn->supervision_expire = 0;
   11206:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
		conn->llcp_version.tx = 0;
   1120a:	f366 0300 	bfi	r3, r6, #0, #1
		conn->llcp_version.rx = 0;
   1120e:	f366 0341 	bfi	r3, r6, #1, #1
   11212:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
		conn->llcp_conn_param.disabled = 0;
   11216:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->procedure_expire = 0;
   1121a:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
		conn->llcp_conn_param.disabled = 0;
   1121e:	f366 1304 	bfi	r3, r6, #4, #1
   11222:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->sn = 0;
   11226:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->apto_expire = 0;
   1122a:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
		conn->sn = 0;
   1122e:	f366 0300 	bfi	r3, r6, #0, #1
		conn->nesn = 0;
   11232:	f366 0341 	bfi	r3, r6, #1, #1
		conn->pause_rx = 0;
   11236:	f366 0382 	bfi	r3, r6, #2, #1
		conn->pause_tx = 0;
   1123a:	f366 03c3 	bfi	r3, r6, #3, #1
		conn->enc_rx = 0;
   1123e:	f366 1304 	bfi	r3, r6, #4, #1
		conn->enc_tx = 0;
   11242:	f366 1345 	bfi	r3, r6, #5, #1
		conn->refresh = 0;
   11246:	f366 1386 	bfi	r3, r6, #6, #1
		conn->empty = 0;
   1124a:	f366 13c7 	bfi	r3, r6, #7, #1
		conn->appto_expire = 0;
   1124e:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
		conn->llcp_req = 0;
   11252:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
		conn->llcp_ack = 0;
   11256:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
		conn->llcp_terminate.req = 0;
   1125a:	f884 60b0 	strb.w	r6, [r4, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   1125e:	f884 60b1 	strb.w	r6, [r4, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   11262:	f884 60b3 	strb.w	r6, [r4, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   11266:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   1126a:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   1126e:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
		conn->llcp_length.req = 0;
   11272:	f884 60e8 	strb.w	r6, [r4, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   11276:	f884 60e9 	strb.w	r6, [r4, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   1127a:	f884 60f4 	strb.w	r6, [r4, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   1127e:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
		conn->empty = 0;
   11282:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   11286:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   1128a:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   1128e:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   11292:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   11296:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   1129a:	f884 6150 	strb.w	r6, [r4, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   1129e:	f884 6151 	strb.w	r6, [r4, #337]	; 0x151
		_radio.advertiser.conn = conn;
   112a2:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
	_radio.advertiser.chan_map = chan_map;
   112a6:	a80e      	add	r0, sp, #56	; 0x38
	_radio.advertiser.phy_p = phy_p;
   112a8:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;
   112ac:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p;
   112b0:	f36a 0302 	bfi	r3, sl, #0, #3
	_radio.advertiser.chan_map = chan_map;
   112b4:	f362 03c5 	bfi	r3, r2, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
   112b8:	f369 1387 	bfi	r3, r9, #6, #2
   112bc:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.rl_idx = rl_idx;
   112c0:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   112c4:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	_radio.advertiser.hdr.ticks_active_to_start =
   112c8:	f8d5 3184 	ldr.w	r3, [r5, #388]	; 0x184
   112cc:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   112ce:	2327      	movs	r3, #39	; 0x27
   112d0:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   112d2:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
   112d4:	2300      	movs	r3, #0
   112d6:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   112d8:	f7f5 fe92 	bl	7000 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   112dc:	f81b 6007 	ldrb.w	r6, [fp, r7]
   112e0:	f006 060f 	and.w	r6, r6, #15
   112e4:	2e01      	cmp	r6, #1
   112e6:	d16b      	bne.n	113c0 <radio_adv_enable+0x2d0>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   112e8:	f44f 7327 	mov.w	r3, #668	; 0x29c
   112ec:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
   112ee:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   112f2:	495b      	ldr	r1, [pc, #364]	; (11460 <radio_adv_enable+0x370>)
   112f4:	a358      	add	r3, pc, #352	; (adr r3, 11458 <radio_adv_enable+0x368>)
   112f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   112fa:	fba0 0101 	umull	r0, r1, r0, r1
   112fe:	f7ee ff89 	bl	214 <__aeabi_uldivmod>
	ticks_slot_offset =
   11302:	69af      	ldr	r7, [r5, #24]
   11304:	69eb      	ldr	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   11306:	6268      	str	r0, [r5, #36]	; 0x24
	ticks_slot_offset =
   11308:	429f      	cmp	r7, r3
   1130a:	bf38      	it	cc
   1130c:	461f      	movcc	r7, r3
	_radio.advertiser.is_hdcd = !interval &&
   1130e:	f1b8 0f00 	cmp.w	r8, #0
   11312:	d15d      	bne.n	113d0 <radio_adv_enable+0x2e0>
   11314:	1e72      	subs	r2, r6, #1
   11316:	4253      	negs	r3, r2
   11318:	4153      	adcs	r3, r2
   1131a:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
   1131e:	f8df 9158 	ldr.w	r9, [pc, #344]	; 11478 <radio_adv_enable+0x388>
   11322:	f8df b158 	ldr.w	fp, [pc, #344]	; 1147c <radio_adv_enable+0x38c>
   11326:	f363 1686 	bfi	r6, r3, #6, #1
   1132a:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
   1132e:	f016 0640 	ands.w	r6, r6, #64	; 0x40
   11332:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   11336:	d053      	beq.n	113e0 <radio_adv_enable+0x2f0>
		u32_t ticks_now = ticker_ticks_now_get();
   11338:	f7f6 fcae 	bl	7c98 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1133c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1133e:	f8cd a020 	str.w	sl, [sp, #32]
   11342:	441f      	add	r7, r3
		u32_t ticks_now = ticker_ticks_now_get();
   11344:	4606      	mov	r6, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11346:	2000      	movs	r0, #0
   11348:	f8cd 901c 	str.w	r9, [sp, #28]
   1134c:	9006      	str	r0, [sp, #24]
   1134e:	f8cd b014 	str.w	fp, [sp, #20]
   11352:	9704      	str	r7, [sp, #16]
   11354:	9003      	str	r0, [sp, #12]
   11356:	9002      	str	r0, [sp, #8]
   11358:	e88d 0081 	stmia.w	sp, {r0, r7}
   1135c:	4633      	mov	r3, r6
   1135e:	2205      	movs	r2, #5
   11360:	2103      	movs	r1, #3
   11362:	f7f6 fb2b 	bl	79bc <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   11366:	2802      	cmp	r0, #2
   11368:	d036      	beq.n	113d8 <radio_adv_enable+0x2e8>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   1136a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1136c:	b9c8      	cbnz	r0, 113a2 <radio_adv_enable+0x2b2>
		ret_cb = TICKER_STATUS_BUSY;
   1136e:	2302      	movs	r3, #2
   11370:	930d      	str	r3, [sp, #52]	; 0x34
		ret =
   11372:	4b3c      	ldr	r3, [pc, #240]	; (11464 <radio_adv_enable+0x374>)
   11374:	9305      	str	r3, [sp, #20]
   11376:	2203      	movs	r2, #3
   11378:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   1137c:	9300      	str	r3, [sp, #0]
   1137e:	f8cd a020 	str.w	sl, [sp, #32]
   11382:	f8cd 901c 	str.w	r9, [sp, #28]
   11386:	9006      	str	r0, [sp, #24]
   11388:	9004      	str	r0, [sp, #16]
   1138a:	9003      	str	r0, [sp, #12]
   1138c:	9002      	str	r0, [sp, #8]
   1138e:	9001      	str	r0, [sp, #4]
   11390:	4633      	mov	r3, r6
   11392:	4611      	mov	r1, r2
		ret =
   11394:	f7f6 fb12 	bl	79bc <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   11398:	2802      	cmp	r0, #2
   1139a:	d046      	beq.n	1142a <radio_adv_enable+0x33a>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   1139c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1139e:	2800      	cmp	r0, #0
   113a0:	d047      	beq.n	11432 <radio_adv_enable+0x342>
	if (conn) {
   113a2:	2c00      	cmp	r4, #0
   113a4:	f43f aeb5 	beq.w	11112 <radio_adv_enable+0x22>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   113a8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   113ac:	492e      	ldr	r1, [pc, #184]	; (11468 <radio_adv_enable+0x378>)
   113ae:	f7f5 fc96 	bl	6cde <mem_release>
		mem_release(conn, &_radio.conn_free);
   113b2:	492e      	ldr	r1, [pc, #184]	; (1146c <radio_adv_enable+0x37c>)
   113b4:	4620      	mov	r0, r4
   113b6:	f7f5 fc92 	bl	6cde <mem_release>
   113ba:	e6aa      	b.n	11112 <radio_adv_enable+0x22>
		conn = NULL;
   113bc:	2400      	movs	r4, #0
   113be:	e772      	b.n	112a6 <radio_adv_enable+0x1b6>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   113c0:	2e02      	cmp	r6, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   113c2:	bf0c      	ite	eq
   113c4:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
   113c8:	f240 53fc 	movwne	r3, #1532	; 0x5fc
   113cc:	4358      	muls	r0, r3
   113ce:	e790      	b.n	112f2 <radio_adv_enable+0x202>
   113d0:	2300      	movs	r3, #0
   113d2:	e7a2      	b.n	1131a <radio_adv_enable+0x22a>
				cpu_sleep();
   113d4:	f7f8 fb7e 	bl	9ad4 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   113d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   113da:	2b02      	cmp	r3, #2
   113dc:	d0fa      	beq.n	113d4 <radio_adv_enable+0x2e4>
   113de:	e7c4      	b.n	1136a <radio_adv_enable+0x27a>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   113e0:	f7f6 fc5a 	bl	7c98 <ticker_ticks_now_get>
		ret =
   113e4:	f8cd a020 	str.w	sl, [sp, #32]
   113e8:	f8cd 901c 	str.w	r9, [sp, #28]
   113ec:	9606      	str	r6, [sp, #24]
   113ee:	f8cd b014 	str.w	fp, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   113f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   113f4:	900a      	str	r0, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   113f6:	481e      	ldr	r0, [pc, #120]	; (11470 <radio_adv_enable+0x380>)
		ret =
   113f8:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   113fa:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   113fe:	441f      	add	r7, r3
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   11400:	fba8 0100 	umull	r0, r1, r8, r0
   11404:	2391      	movs	r3, #145	; 0x91
   11406:	fb03 1108 	mla	r1, r3, r8, r1
   1140a:	a313      	add	r3, pc, #76	; (adr r3, 11458 <radio_adv_enable+0x368>)
   1140c:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret =
   11410:	9704      	str	r7, [sp, #16]
   11412:	9602      	str	r6, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   11414:	f7ee fefe 	bl	214 <__aeabi_uldivmod>
		ret =
   11418:	9600      	str	r6, [sp, #0]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   1141a:	9001      	str	r0, [sp, #4]
		ret =
   1141c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1141e:	2205      	movs	r2, #5
   11420:	2103      	movs	r1, #3
   11422:	4630      	mov	r0, r6
   11424:	e7b6      	b.n	11394 <radio_adv_enable+0x2a4>
			cpu_sleep();
   11426:	f7f8 fb55 	bl	9ad4 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   1142a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1142c:	2b02      	cmp	r3, #2
   1142e:	d0fa      	beq.n	11426 <radio_adv_enable+0x336>
   11430:	e7b4      	b.n	1139c <radio_adv_enable+0x2ac>
		_radio.advertiser.is_enabled = 1;
   11432:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   11436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1143a:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   1143e:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
   11442:	f013 0401 	ands.w	r4, r3, #1
   11446:	d103      	bne.n	11450 <radio_adv_enable+0x360>
			ll_adv_scan_state_cb(BIT(0));
   11448:	2001      	movs	r0, #1
   1144a:	f001 faed 	bl	12a28 <ll_adv_scan_state_cb>
		return 0;
   1144e:	4620      	mov	r0, r4
}
   11450:	b00f      	add	sp, #60	; 0x3c
   11452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11456:	bf00      	nop
   11458:	1afd498d 	.word	0x1afd498d
   1145c:	00000007 	.word	0x00000007
   11460:	3b9aca00 	.word	0x3b9aca00
   11464:	0000be99 	.word	0x0000be99
   11468:	20000a38 	.word	0x20000a38
   1146c:	200009fc 	.word	0x200009fc
   11470:	84e72a00 	.word	0x84e72a00
   11474:	200008f0 	.word	0x200008f0
   11478:	00009b19 	.word	0x00009b19
   1147c:	0000bd75 	.word	0x0000bd75

00011480 <radio_adv_disable>:
{
   11480:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   11482:	2103      	movs	r1, #3
   11484:	2005      	movs	r0, #5
   11486:	f7f8 fd35 	bl	9ef4 <role_disable>
	if (!status) {
   1148a:	4605      	mov	r5, r0
   1148c:	b9e8      	cbnz	r0, 114ca <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
   1148e:	4c10      	ldr	r4, [pc, #64]	; (114d0 <radio_adv_disable+0x50>)
   11490:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   11494:	f360 12c7 	bfi	r2, r0, #7, #1
   11498:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   1149c:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   114a0:	07d3      	lsls	r3, r2, #31
   114a2:	d401      	bmi.n	114a8 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
   114a4:	f001 fac0 	bl	12a28 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
   114a8:	f8d4 60cc 	ldr.w	r6, [r4, #204]	; 0xcc
		if (conn) {
   114ac:	b15e      	cbz	r6, 114c6 <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
   114ae:	2300      	movs	r3, #0
   114b0:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   114b4:	4907      	ldr	r1, [pc, #28]	; (114d4 <radio_adv_disable+0x54>)
   114b6:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   114ba:	f7f5 fc10 	bl	6cde <mem_release>
			mem_release(conn, &_radio.conn_free);
   114be:	4906      	ldr	r1, [pc, #24]	; (114d8 <radio_adv_disable+0x58>)
   114c0:	4630      	mov	r0, r6
   114c2:	f7f5 fc0c 	bl	6cde <mem_release>
}
   114c6:	4628      	mov	r0, r5
   114c8:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   114ca:	250c      	movs	r5, #12
   114cc:	e7fb      	b.n	114c6 <radio_adv_disable+0x46>
   114ce:	bf00      	nop
   114d0:	200008f0 	.word	0x200008f0
   114d4:	20000a38 	.word	0x20000a38
   114d8:	200009fc 	.word	0x200009fc
   114dc:	00000000 	.word	0x00000000

000114e0 <radio_scan_enable>:
{
   114e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   114e4:	4c68      	ldr	r4, [pc, #416]	; (11688 <radio_scan_enable+0x1a8>)
   114e6:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   114ea:	b08e      	sub	sp, #56	; 0x38
   114ec:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   114ee:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   114f2:	f04f 0302 	mov.w	r3, #2
{
   114f6:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   114f8:	930b      	str	r3, [sp, #44]	; 0x2c
{
   114fa:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   114fc:	d003      	beq.n	11506 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   114fe:	200c      	movs	r0, #12
}
   11500:	b00e      	add	sp, #56	; 0x38
   11502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   11506:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   1150a:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   1150e:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   11512:	0840      	lsrs	r0, r0, #1
   11514:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   11518:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   1151c:	f360 0200 	bfi	r2, r0, #0, #1
   11520:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   11524:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   11528:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   1152c:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   11530:	2206      	movs	r2, #6
   11532:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   11536:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   1153a:	4e54      	ldr	r6, [pc, #336]	; (1168c <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   1153c:	f7f0 fb70 	bl	1c20 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   11540:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   11544:	f04f 0991 	mov.w	r9, #145	; 0x91
   11548:	fba2 0106 	umull	r0, r1, r2, r6
   1154c:	fb09 1102 	mla	r1, r9, r2, r1
   11550:	a34b      	add	r3, pc, #300	; (adr r3, 11680 <radio_scan_enable+0x1a0>)
   11552:	e9d3 2300 	ldrd	r2, r3, [r3]
   11556:	f7ee fe5d 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   1155a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1155e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   11562:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   11566:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   1156a:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   1156e:	b2ba      	uxth	r2, r7
   11570:	fba2 6706 	umull	r6, r7, r2, r6
   11574:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   11578:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   1157c:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   1157e:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   11582:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   11586:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   1158a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   1158e:	a33c      	add	r3, pc, #240	; (adr r3, 11680 <radio_scan_enable+0x1a0>)
   11590:	e9d3 2300 	ldrd	r2, r3, [r3]
   11594:	4630      	mov	r0, r6
   11596:	4639      	mov	r1, r7
   11598:	f7ee fe3c 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   1159c:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   115a0:	459a      	cmp	sl, r3
   115a2:	bf94      	ite	ls
   115a4:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   115a8:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   115ac:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   115b0:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   115b2:	bf38      	it	cc
   115b4:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   115b8:	f7f6 fb6e 	bl	7c98 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   115bc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   115c0:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   115c2:	2b00      	cmp	r3, #0
   115c4:	d045      	beq.n	11652 <radio_scan_enable+0x172>
		us_offset = 0;
   115c6:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   115c8:	980c      	ldr	r0, [sp, #48]	; 0x30
   115ca:	4931      	ldr	r1, [pc, #196]	; (11690 <radio_scan_enable+0x1b0>)
   115cc:	a32c      	add	r3, pc, #176	; (adr r3, 11680 <radio_scan_enable+0x1a0>)
   115ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   115d2:	fba0 0101 	umull	r0, r1, r0, r1
   115d6:	f7ee fe1d 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   115da:	ab0b      	add	r3, sp, #44	; 0x2c
   115dc:	9308      	str	r3, [sp, #32]
   115de:	4b2d      	ldr	r3, [pc, #180]	; (11694 <radio_scan_enable+0x1b4>)
   115e0:	9307      	str	r3, [sp, #28]
   115e2:	4b2d      	ldr	r3, [pc, #180]	; (11698 <radio_scan_enable+0x1b8>)
   115e4:	9305      	str	r3, [sp, #20]
   115e6:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   115ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   115ee:	4443      	add	r3, r8
   115f0:	2500      	movs	r5, #0
   115f2:	4482      	add	sl, r0
   115f4:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   115f6:	4630      	mov	r0, r6
   115f8:	a321      	add	r3, pc, #132	; (adr r3, 11680 <radio_scan_enable+0x1a0>)
   115fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   115fe:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11600:	9506      	str	r5, [sp, #24]
   11602:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   11604:	f7ee fe06 	bl	214 <__aeabi_uldivmod>
   11608:	4610      	mov	r0, r2
   1160a:	4619      	mov	r1, r3
   1160c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11610:	2300      	movs	r3, #0
   11612:	f7ee fdff 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11616:	e88d 0220 	stmia.w	sp, {r5, r9}
   1161a:	9002      	str	r0, [sp, #8]
   1161c:	4653      	mov	r3, sl
   1161e:	2206      	movs	r2, #6
   11620:	2103      	movs	r1, #3
   11622:	4628      	mov	r0, r5
   11624:	f7f6 f9ca 	bl	79bc <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   11628:	2802      	cmp	r0, #2
   1162a:	d023      	beq.n	11674 <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   1162c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1162e:	2d00      	cmp	r5, #0
   11630:	f47f af65 	bne.w	114fe <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   11634:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   11638:	f043 0301 	orr.w	r3, r3, #1
   1163c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   11640:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   11644:	2b00      	cmp	r3, #0
   11646:	db02      	blt.n	1164e <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   11648:	2002      	movs	r0, #2
   1164a:	f001 f9ed 	bl	12a28 <ll_adv_scan_state_cb>
	return 0;
   1164e:	4628      	mov	r0, r5
   11650:	e756      	b.n	11500 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   11652:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   11656:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   11658:	aa0d      	add	r2, sp, #52	; 0x34
   1165a:	ab0c      	add	r3, sp, #48	; 0x30
   1165c:	4441      	add	r1, r8
   1165e:	2003      	movs	r0, #3
   11660:	f7f9 f846 	bl	a6f0 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   11664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11666:	2b00      	cmp	r3, #0
   11668:	d0ae      	beq.n	115c8 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   1166a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   1166e:	e7ab      	b.n	115c8 <radio_scan_enable+0xe8>
			cpu_sleep();
   11670:	f7f8 fa30 	bl	9ad4 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   11674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11676:	2b02      	cmp	r3, #2
   11678:	d0fa      	beq.n	11670 <radio_scan_enable+0x190>
   1167a:	e7d7      	b.n	1162c <radio_scan_enable+0x14c>
   1167c:	f3af 8000 	nop.w
   11680:	1afd498d 	.word	0x1afd498d
   11684:	00000007 	.word	0x00000007
   11688:	200008f0 	.word	0x200008f0
   1168c:	84e72a00 	.word	0x84e72a00
   11690:	3b9aca00 	.word	0x3b9aca00
   11694:	00009b19 	.word	0x00009b19
   11698:	0000bdd9 	.word	0x0000bdd9

0001169c <radio_scan_disable>:
{
   1169c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   1169e:	2104      	movs	r1, #4
   116a0:	2006      	movs	r0, #6
   116a2:	f7f8 fc27 	bl	9ef4 <role_disable>
	if (!status) {
   116a6:	4605      	mov	r5, r0
   116a8:	b9e8      	cbnz	r0, 116e6 <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   116aa:	4c10      	ldr	r4, [pc, #64]	; (116ec <radio_scan_disable+0x50>)
   116ac:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   116b0:	f360 0200 	bfi	r2, r0, #0, #1
   116b4:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   116b8:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   116bc:	2a00      	cmp	r2, #0
   116be:	db01      	blt.n	116c4 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   116c0:	f001 f9b2 	bl	12a28 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   116c4:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   116c8:	b15e      	cbz	r6, 116e2 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   116ca:	2300      	movs	r3, #0
   116cc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   116d0:	4907      	ldr	r1, [pc, #28]	; (116f0 <radio_scan_disable+0x54>)
   116d2:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   116d6:	f7f5 fb02 	bl	6cde <mem_release>
			mem_release(conn, &_radio.conn_free);
   116da:	4906      	ldr	r1, [pc, #24]	; (116f4 <radio_scan_disable+0x58>)
   116dc:	4630      	mov	r0, r6
   116de:	f7f5 fafe 	bl	6cde <mem_release>
}
   116e2:	4628      	mov	r0, r5
   116e4:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   116e6:	250c      	movs	r5, #12
   116e8:	e7fb      	b.n	116e2 <radio_scan_disable+0x46>
   116ea:	bf00      	nop
   116ec:	200008f0 	.word	0x200008f0
   116f0:	20000a38 	.word	0x20000a38
   116f4:	200009fc 	.word	0x200009fc

000116f8 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   116f8:	4b03      	ldr	r3, [pc, #12]	; (11708 <ll_connect_disable+0x10>)
   116fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   116fe:	b10b      	cbz	r3, 11704 <ll_connect_disable+0xc>
	status = radio_scan_disable();
   11700:	f7ff bfcc 	b.w	1169c <radio_scan_disable>
}
   11704:	200c      	movs	r0, #12
   11706:	4770      	bx	lr
   11708:	200008f0 	.word	0x200008f0

0001170c <ll_rx_dequeue>:
{
   1170c:	b530      	push	{r4, r5, lr}
   1170e:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   11710:	4d49      	ldr	r5, [pc, #292]	; (11838 <ll_rx_dequeue+0x12c>)
	struct radio_pdu_node_rx *node_rx = NULL;
   11712:	aa04      	add	r2, sp, #16
   11714:	2300      	movs	r3, #0
   11716:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1171a:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   1171e:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   11722:	f7f5 fb2b 	bl	6d7c <memq_dequeue>
   11726:	462c      	mov	r4, r5
	LL_ASSERT(link);
   11728:	b970      	cbnz	r0, 11748 <ll_rx_dequeue+0x3c>
   1172a:	4a44      	ldr	r2, [pc, #272]	; (1183c <ll_rx_dequeue+0x130>)
   1172c:	4b44      	ldr	r3, [pc, #272]	; (11840 <ll_rx_dequeue+0x134>)
   1172e:	9201      	str	r2, [sp, #4]
   11730:	9200      	str	r2, [sp, #0]
   11732:	681c      	ldr	r4, [r3, #0]
   11734:	4943      	ldr	r1, [pc, #268]	; (11844 <ll_rx_dequeue+0x138>)
   11736:	4b44      	ldr	r3, [pc, #272]	; (11848 <ll_rx_dequeue+0x13c>)
   11738:	4844      	ldr	r0, [pc, #272]	; (1184c <ll_rx_dequeue+0x140>)
		LL_ASSERT(_radio.link_rx_data_quota <
   1173a:	47a0      	blx	r4
   1173c:	4040      	eors	r0, r0
   1173e:	f380 8811 	msr	BASEPRI, r0
   11742:	f04f 0004 	mov.w	r0, #4
   11746:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   11748:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   1174c:	f7f5 fac7 	bl	6cde <mem_release>
	switch (node_rx->hdr.type) {
   11750:	9a03      	ldr	r2, [sp, #12]
   11752:	7911      	ldrb	r1, [r2, #4]
   11754:	290c      	cmp	r1, #12
   11756:	d807      	bhi.n	11768 <ll_rx_dequeue+0x5c>
   11758:	2301      	movs	r3, #1
   1175a:	408b      	lsls	r3, r1
   1175c:	f641 707e 	movw	r0, #8062	; 0x1f7e
   11760:	4203      	tst	r3, r0
   11762:	d10a      	bne.n	1177a <ll_rx_dequeue+0x6e>
   11764:	0618      	lsls	r0, r3, #24
   11766:	d41b      	bmi.n	117a0 <ll_rx_dequeue+0x94>
		LL_ASSERT(0);
   11768:	4a34      	ldr	r2, [pc, #208]	; (1183c <ll_rx_dequeue+0x130>)
   1176a:	4b35      	ldr	r3, [pc, #212]	; (11840 <ll_rx_dequeue+0x134>)
   1176c:	9201      	str	r2, [sp, #4]
   1176e:	9200      	str	r2, [sp, #0]
   11770:	681c      	ldr	r4, [r3, #0]
   11772:	4934      	ldr	r1, [pc, #208]	; (11844 <ll_rx_dequeue+0x138>)
   11774:	4b34      	ldr	r3, [pc, #208]	; (11848 <ll_rx_dequeue+0x13c>)
   11776:	4836      	ldr	r0, [pc, #216]	; (11850 <ll_rx_dequeue+0x144>)
   11778:	e7df      	b.n	1173a <ll_rx_dequeue+0x2e>
		LL_ASSERT(_radio.link_rx_data_quota <
   1177a:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   1177e:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   11782:	3801      	subs	r0, #1
   11784:	4283      	cmp	r3, r0
   11786:	db08      	blt.n	1179a <ll_rx_dequeue+0x8e>
   11788:	4a2c      	ldr	r2, [pc, #176]	; (1183c <ll_rx_dequeue+0x130>)
   1178a:	4b2d      	ldr	r3, [pc, #180]	; (11840 <ll_rx_dequeue+0x134>)
   1178c:	9201      	str	r2, [sp, #4]
   1178e:	9200      	str	r2, [sp, #0]
   11790:	681c      	ldr	r4, [r3, #0]
   11792:	492c      	ldr	r1, [pc, #176]	; (11844 <ll_rx_dequeue+0x138>)
   11794:	4b2c      	ldr	r3, [pc, #176]	; (11848 <ll_rx_dequeue+0x13c>)
   11796:	482f      	ldr	r0, [pc, #188]	; (11854 <ll_rx_dequeue+0x148>)
   11798:	e7cf      	b.n	1173a <ll_rx_dequeue+0x2e>
		_radio.link_rx_data_quota++;
   1179a:	3301      	adds	r3, #1
   1179c:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   117a0:	2906      	cmp	r1, #6
   117a2:	d138      	bne.n	11816 <ll_rx_dequeue+0x10a>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   117a4:	7ad3      	ldrb	r3, [r2, #11]
   117a6:	2b3c      	cmp	r3, #60	; 0x3c
   117a8:	d00e      	beq.n	117c8 <ll_rx_dequeue+0xbc>
   117aa:	7b12      	ldrb	r2, [r2, #12]
   117ac:	b9f2      	cbnz	r2, 117ec <ll_rx_dequeue+0xe0>
			LL_ASSERT(_radio.scanner.is_enabled);
   117ae:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   117b2:	07d9      	lsls	r1, r3, #31
   117b4:	d431      	bmi.n	1181a <ll_rx_dequeue+0x10e>
   117b6:	4a21      	ldr	r2, [pc, #132]	; (1183c <ll_rx_dequeue+0x130>)
   117b8:	4b21      	ldr	r3, [pc, #132]	; (11840 <ll_rx_dequeue+0x134>)
   117ba:	9201      	str	r2, [sp, #4]
   117bc:	9200      	str	r2, [sp, #0]
   117be:	681c      	ldr	r4, [r3, #0]
   117c0:	4920      	ldr	r1, [pc, #128]	; (11844 <ll_rx_dequeue+0x138>)
   117c2:	4b21      	ldr	r3, [pc, #132]	; (11848 <ll_rx_dequeue+0x13c>)
   117c4:	4824      	ldr	r0, [pc, #144]	; (11858 <ll_rx_dequeue+0x14c>)
   117c6:	e7b8      	b.n	1173a <ll_rx_dequeue+0x2e>
				_radio.advertiser.conn = NULL;
   117c8:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   117ca:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   117ce:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   117d2:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   117d6:	2b00      	cmp	r3, #0
   117d8:	db0a      	blt.n	117f0 <ll_rx_dequeue+0xe4>
   117da:	4a18      	ldr	r2, [pc, #96]	; (1183c <ll_rx_dequeue+0x130>)
   117dc:	4b18      	ldr	r3, [pc, #96]	; (11840 <ll_rx_dequeue+0x134>)
   117de:	9201      	str	r2, [sp, #4]
   117e0:	9200      	str	r2, [sp, #0]
   117e2:	681c      	ldr	r4, [r3, #0]
   117e4:	4917      	ldr	r1, [pc, #92]	; (11844 <ll_rx_dequeue+0x138>)
   117e6:	4b18      	ldr	r3, [pc, #96]	; (11848 <ll_rx_dequeue+0x13c>)
   117e8:	481c      	ldr	r0, [pc, #112]	; (1185c <ll_rx_dequeue+0x150>)
   117ea:	e7a6      	b.n	1173a <ll_rx_dequeue+0x2e>
		struct connection *conn = NULL;
   117ec:	2500      	movs	r5, #0
   117ee:	e7f0      	b.n	117d2 <ll_rx_dequeue+0xc6>
			_radio.advertiser.is_enabled = 0;
   117f0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   117f4:	f36f 13c7 	bfc	r3, #7, #1
   117f8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   117fc:	b995      	cbnz	r5, 11824 <ll_rx_dequeue+0x118>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   117fe:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   11802:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   11806:	f000 0001 	and.w	r0, r0, #1
   1180a:	0040      	lsls	r0, r0, #1
		if (!bm) {
   1180c:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   11810:	d101      	bne.n	11816 <ll_rx_dequeue+0x10a>
			ll_adv_scan_state_cb(0);
   11812:	f001 f909 	bl	12a28 <ll_adv_scan_state_cb>
}
   11816:	b005      	add	sp, #20
   11818:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   1181a:	f362 0300 	bfi	r3, r2, #0, #1
   1181e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   11822:	e7ec      	b.n	117fe <ll_rx_dequeue+0xf2>
			mem_release(node_rx->hdr.onion.link,
   11824:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   11828:	490d      	ldr	r1, [pc, #52]	; (11860 <ll_rx_dequeue+0x154>)
   1182a:	f7f5 fa58 	bl	6cde <mem_release>
			mem_release(conn, &_radio.conn_free);
   1182e:	490d      	ldr	r1, [pc, #52]	; (11864 <ll_rx_dequeue+0x158>)
   11830:	4628      	mov	r0, r5
   11832:	f7f5 fa54 	bl	6cde <mem_release>
   11836:	e7e2      	b.n	117fe <ll_rx_dequeue+0xf2>
   11838:	200008f0 	.word	0x200008f0
   1183c:	000159e9 	.word	0x000159e9
   11840:	20003ad4 	.word	0x20003ad4
   11844:	00016791 	.word	0x00016791
   11848:	0001827d 	.word	0x0001827d
   1184c:	000182cb 	.word	0x000182cb
   11850:	000166ef 	.word	0x000166ef
   11854:	000183b5 	.word	0x000183b5
   11858:	000188a4 	.word	0x000188a4
   1185c:	00018866 	.word	0x00018866
   11860:	20000a38 	.word	0x20000a38
   11864:	200009fc 	.word	0x200009fc

00011868 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   11868:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   1186a:	4c0b      	ldr	r4, [pc, #44]	; (11898 <rtc0_nrf5_isr+0x30>)
   1186c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   11870:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   11874:	b122      	cbz	r2, 11880 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   11876:	2000      	movs	r0, #0
   11878:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   1187c:	f7f6 f88c 	bl	7998 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   11880:	b12d      	cbz	r5, 1188e <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   11882:	2300      	movs	r3, #0
   11884:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   11888:	2001      	movs	r0, #1
   1188a:	f7f6 f885 	bl	7998 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   1188e:	2000      	movs	r0, #0
}
   11890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   11894:	f7f5 bb22 	b.w	6edc <mayfly_run>
   11898:	4000b000 	.word	0x4000b000

0001189c <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   1189c:	2001      	movs	r0, #1
   1189e:	f7f5 bb1d 	b.w	6edc <mayfly_run>

000118a2 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   118a2:	4668      	mov	r0, sp
   118a4:	f020 0107 	bic.w	r1, r0, #7
   118a8:	468d      	mov	sp, r1
   118aa:	b501      	push	{r0, lr}
	isr_radio();
   118ac:	f001 fc1a 	bl	130e4 <isr_radio>
	ISR_DIRECT_PM();
   118b0:	f7f0 f824 	bl	18fc <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   118b4:	f7ef fe0a 	bl	14cc <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   118b8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   118bc:	4685      	mov	sp, r0
   118be:	4770      	bx	lr

000118c0 <radio_active_callback>:
{
   118c0:	4770      	bx	lr
	...

000118c4 <radio_event_callback>:
	k_sem_give(sem_recv);
   118c4:	4b01      	ldr	r3, [pc, #4]	; (118cc <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   118c6:	6818      	ldr	r0, [r3, #0]
   118c8:	f003 bab0 	b.w	14e2c <_impl_k_sem_give>
   118cc:	20001240 	.word	0x20001240

000118d0 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   118d0:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   118d2:	4b41      	ldr	r3, [pc, #260]	; (119d8 <ll_init+0x108>)
{
   118d4:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   118d6:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   118d8:	4840      	ldr	r0, [pc, #256]	; (119dc <ll_init+0x10c>)
   118da:	f002 fd51 	bl	14380 <device_get_binding>
	if (!clk_k32) {
   118de:	b918      	cbnz	r0, 118e8 <ll_init+0x18>
		return -ENODEV;
   118e0:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   118e4:	b006      	add	sp, #24
   118e6:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   118e8:	6843      	ldr	r3, [r0, #4]
   118ea:	2101      	movs	r1, #1
   118ec:	681b      	ldr	r3, [r3, #0]
   118ee:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   118f0:	483b      	ldr	r0, [pc, #236]	; (119e0 <ll_init+0x110>)
   118f2:	f002 fd45 	bl	14380 <device_get_binding>
	if (!entropy) {
   118f6:	4604      	mov	r4, r0
   118f8:	2800      	cmp	r0, #0
   118fa:	d0f1      	beq.n	118e0 <ll_init+0x10>
	cntr_init();
   118fc:	f001 fad8 	bl	12eb0 <cntr_init>
	mayfly_init();
   11900:	f7f5 fa4c 	bl	6d9c <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11904:	4b37      	ldr	r3, [pc, #220]	; (119e4 <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   11906:	2203      	movs	r2, #3
   11908:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1190a:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   1190c:	4a36      	ldr	r2, [pc, #216]	; (119e8 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1190e:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   11910:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   11912:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   11914:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   11916:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   11918:	9205      	str	r2, [sp, #20]
   1191a:	4a34      	ldr	r2, [pc, #208]	; (119ec <ll_init+0x11c>)
   1191c:	9204      	str	r2, [sp, #16]
   1191e:	4a34      	ldr	r2, [pc, #208]	; (119f0 <ll_init+0x120>)
   11920:	9203      	str	r2, [sp, #12]
   11922:	4a34      	ldr	r2, [pc, #208]	; (119f4 <ll_init+0x124>)
   11924:	9202      	str	r2, [sp, #8]
   11926:	220d      	movs	r2, #13
   11928:	9201      	str	r2, [sp, #4]
   1192a:	9300      	str	r3, [sp, #0]
   1192c:	4a32      	ldr	r2, [pc, #200]	; (119f8 <ll_init+0x128>)
   1192e:	2304      	movs	r3, #4
   11930:	f7f5 fffa 	bl	7928 <ticker_init>
	LL_ASSERT(!err);
   11934:	b170      	cbz	r0, 11954 <ll_init+0x84>
   11936:	4a31      	ldr	r2, [pc, #196]	; (119fc <ll_init+0x12c>)
   11938:	4b31      	ldr	r3, [pc, #196]	; (11a00 <ll_init+0x130>)
   1193a:	9201      	str	r2, [sp, #4]
   1193c:	9200      	str	r2, [sp, #0]
   1193e:	681c      	ldr	r4, [r3, #0]
   11940:	4930      	ldr	r1, [pc, #192]	; (11a04 <ll_init+0x134>)
   11942:	4b31      	ldr	r3, [pc, #196]	; (11a08 <ll_init+0x138>)
   11944:	4831      	ldr	r0, [pc, #196]	; (11a0c <ll_init+0x13c>)
   11946:	47a0      	blx	r4
   11948:	4040      	eors	r0, r0
   1194a:	f380 8811 	msr	BASEPRI, r0
   1194e:	f04f 0004 	mov.w	r0, #4
   11952:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   11954:	482e      	ldr	r0, [pc, #184]	; (11a10 <ll_init+0x140>)
   11956:	f002 fd13 	bl	14380 <device_get_binding>
	if (!clk_m16) {
   1195a:	2800      	cmp	r0, #0
   1195c:	d0c0      	beq.n	118e0 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   1195e:	4b2d      	ldr	r3, [pc, #180]	; (11a14 <ll_init+0x144>)
   11960:	9304      	str	r3, [sp, #16]
   11962:	9501      	str	r5, [sp, #4]
   11964:	231b      	movs	r3, #27
   11966:	2501      	movs	r5, #1
   11968:	f44f 7657 	mov.w	r6, #860	; 0x35c
   1196c:	9303      	str	r3, [sp, #12]
   1196e:	9302      	str	r3, [sp, #8]
   11970:	4622      	mov	r2, r4
   11972:	9605      	str	r6, [sp, #20]
   11974:	9500      	str	r5, [sp, #0]
   11976:	462b      	mov	r3, r5
   11978:	2107      	movs	r1, #7
   1197a:	f7fe fd43 	bl	10404 <radio_init>
	if (err) {
   1197e:	4604      	mov	r4, r0
   11980:	b160      	cbz	r0, 1199c <ll_init+0xcc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   11982:	4a1e      	ldr	r2, [pc, #120]	; (119fc <ll_init+0x12c>)
   11984:	4b1e      	ldr	r3, [pc, #120]	; (11a00 <ll_init+0x130>)
   11986:	9203      	str	r2, [sp, #12]
   11988:	e88d 0054 	stmia.w	sp, {r2, r4, r6}
   1198c:	4822      	ldr	r0, [pc, #136]	; (11a18 <ll_init+0x148>)
   1198e:	681c      	ldr	r4, [r3, #0]
   11990:	491c      	ldr	r1, [pc, #112]	; (11a04 <ll_init+0x134>)
   11992:	4b1d      	ldr	r3, [pc, #116]	; (11a08 <ll_init+0x138>)
   11994:	47a0      	blx	r4
		return -ENOMEM;
   11996:	f06f 000b 	mvn.w	r0, #11
   1199a:	e7a3      	b.n	118e4 <ll_init+0x14>
	ll_filter_reset(true);
   1199c:	4628      	mov	r0, r5
   1199e:	f001 fa3f 	bl	12e20 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   119a2:	4622      	mov	r2, r4
   119a4:	4621      	mov	r1, r4
   119a6:	4628      	mov	r0, r5
   119a8:	f7ef ff8e 	bl	18c8 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   119ac:	4622      	mov	r2, r4
   119ae:	4621      	mov	r1, r4
   119b0:	200b      	movs	r0, #11
   119b2:	f7ef ff89 	bl	18c8 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   119b6:	4622      	mov	r2, r4
   119b8:	4621      	mov	r1, r4
   119ba:	2018      	movs	r0, #24
   119bc:	f7ef ff84 	bl	18c8 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   119c0:	4628      	mov	r0, r5
   119c2:	f7ef ff4f 	bl	1864 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   119c6:	200b      	movs	r0, #11
   119c8:	f7ef ff4c 	bl	1864 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   119cc:	2018      	movs	r0, #24
   119ce:	f7ef ff49 	bl	1864 <_arch_irq_enable>
	return 0;
   119d2:	4620      	mov	r0, r4
   119d4:	e786      	b.n	118e4 <ll_init+0x14>
   119d6:	bf00      	nop
   119d8:	20001240 	.word	0x20001240
   119dc:	00015abc 	.word	0x00015abc
   119e0:	00015a90 	.word	0x00015a90
   119e4:	20001220 	.word	0x20001220
   119e8:	00013a81 	.word	0x00013a81
   119ec:	000139dd 	.word	0x000139dd
   119f0:	00013981 	.word	0x00013981
   119f4:	20000fb0 	.word	0x20000fb0
   119f8:	20000e70 	.word	0x20000e70
   119fc:	000159e9 	.word	0x000159e9
   11a00:	20003ad4 	.word	0x20003ad4
   11a04:	00016791 	.word	0x00016791
   11a08:	00019017 	.word	0x00019017
   11a0c:	0001901f 	.word	0x0001901f
   11a10:	00015ac7 	.word	0x00015ac7
   11a14:	20000b14 	.word	0x20000b14
   11a18:	00019045 	.word	0x00019045

00011a1c <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   11a1c:	4800      	ldr	r0, [pc, #0]	; (11a20 <ll_adv_set_get+0x4>)
   11a1e:	4770      	bx	lr
   11a20:	20001244 	.word	0x20001244

00011a24 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   11a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a28:	b087      	sub	sp, #28
   11a2a:	4698      	mov	r8, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   11a2c:	2300      	movs	r3, #0
   11a2e:	f88d 3010 	strb.w	r3, [sp, #16]
   11a32:	2306      	movs	r3, #6
   11a34:	2401      	movs	r4, #1
   11a36:	f88d 3012 	strb.w	r3, [sp, #18]
{
   11a3a:	460e      	mov	r6, r1
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   11a3c:	2302      	movs	r3, #2
   11a3e:	2107      	movs	r1, #7
   11a40:	f88d 3013 	strb.w	r3, [sp, #19]
   11a44:	9301      	str	r3, [sp, #4]
{
   11a46:	4615      	mov	r5, r2
   11a48:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
   11a4c:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   11a50:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   11a54:	f88d 4011 	strb.w	r4, [sp, #17]
   11a58:	f88d 4014 	strb.w	r4, [sp, #20]
   11a5c:	f88d 1015 	strb.w	r1, [sp, #21]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
   11a60:	f7fe fda8 	bl	105b4 <ll_adv_is_enabled>
   11a64:	9b01      	ldr	r3, [sp, #4]
   11a66:	4607      	mov	r7, r0
   11a68:	2800      	cmp	r0, #0
   11a6a:	f040 80ed 	bne.w	11c48 <ll_adv_params_set+0x224>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
   11a6e:	4978      	ldr	r1, [pc, #480]	; (11c50 <ll_adv_params_set+0x22c>)
   11a70:	7a08      	ldrb	r0, [r1, #8]

	/* extended */
	if (adv_type > 0x04) {
   11a72:	f1b8 0f04 	cmp.w	r8, #4
	ll_adv.phy_p = BIT(0);
   11a76:	f364 0002 	bfi	r0, r4, #0, #3
   11a7a:	7208      	strb	r0, [r1, #8]
	if (adv_type > 0x04) {
   11a7c:	d97d      	bls.n	11b7a <ll_adv_params_set+0x156>
		/* legacy */
		if (evt_prop & BIT(4)) {
   11a7e:	f016 0f10 	tst.w	r6, #16
   11a82:	f006 0203 	and.w	r2, r6, #3
   11a86:	d013      	beq.n	11ab0 <ll_adv_params_set+0x8c>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   11a88:	2003      	movs	r0, #3
   11a8a:	f88d 300e 	strb.w	r3, [sp, #14]

			adv_type = leg_adv_type[evt_prop & 0x03];
   11a8e:	ab06      	add	r3, sp, #24
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   11a90:	f88d 000c 	strb.w	r0, [sp, #12]
			adv_type = leg_adv_type[evt_prop & 0x03];
   11a94:	441a      	add	r2, r3
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   11a96:	2004      	movs	r0, #4
   11a98:	f88d 000d 	strb.w	r0, [sp, #13]
   11a9c:	f88d 700f 	strb.w	r7, [sp, #15]

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
   11aa0:	0733      	lsls	r3, r6, #28
			adv_type = leg_adv_type[evt_prop & 0x03];
   11aa2:	f812 8c0c 	ldrb.w	r8, [r2, #-12]
			if (evt_prop & BIT(3)) {
   11aa6:	d568      	bpl.n	11b7a <ll_adv_params_set+0x156>
				adv_type = 0x01;
   11aa8:	46a0      	mov	r8, r4
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
   11aaa:	2300      	movs	r3, #0
   11aac:	60cb      	str	r3, [r1, #12]
   11aae:	e00e      	b.n	11ace <ll_adv_params_set+0xaa>
			if (((evt_prop & 0x03) == 0x03) ||
   11ab0:	2a03      	cmp	r2, #3
   11ab2:	f000 80cb 	beq.w	11c4c <ll_adv_params_set+0x228>
   11ab6:	f006 030c 	and.w	r3, r6, #12
   11aba:	2b0c      	cmp	r3, #12
   11abc:	f000 80c6 	beq.w	11c4c <ll_adv_params_set+0x228>
			ll_adv.phy_p = phy_p;
   11ac0:	7a0b      	ldrb	r3, [r1, #8]
   11ac2:	f369 0302 	bfi	r3, r9, #0, #3
   11ac6:	720b      	strb	r3, [r1, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   11ac8:	f04f 0805 	mov.w	r8, #5
		ll_adv.interval = interval;
   11acc:	60cd      	str	r5, [r1, #12]
	}
	ll_adv.chan_map = chan_map;
   11ace:	780b      	ldrb	r3, [r1, #0]
   11ad0:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
	ll_adv.filter_policy = filter_policy;
   11ad4:	9101      	str	r1, [sp, #4]
	ll_adv.chan_map = chan_map;
   11ad6:	f360 0302 	bfi	r3, r0, #0, #3
	ll_adv.filter_policy = filter_policy;
   11ada:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
   11ade:	f360 03c4 	bfi	r3, r0, #3, #2
   11ae2:	700b      	strb	r3, [r1, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
   11ae4:	f7fe fd5e 	bl	105a4 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11ae8:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
	pdu->type = pdu_adv_type[adv_type];
	pdu->rfu = 0;

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   11aec:	9901      	ldr	r1, [sp, #4]
	radio_adv_data = radio_adv_data_get();
   11aee:	4603      	mov	r3, r0
	pdu->type = pdu_adv_type[adv_type];
   11af0:	aa06      	add	r2, sp, #24
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11af2:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   11af6:	ebc5 05c0 	rsb	r5, r5, r0, lsl #3
	pdu->type = pdu_adv_type[adv_type];
   11afa:	eb02 0008 	add.w	r0, r2, r8
   11afe:	5d5a      	ldrb	r2, [r3, r5]
   11b00:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   11b04:	f360 0203 	bfi	r2, r0, #0, #4
	pdu->rfu = 0;
   11b08:	f36f 1204 	bfc	r2, #4, #1
   11b0c:	555a      	strb	r2, [r3, r5]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   11b0e:	b2d2      	uxtb	r2, r2
   11b10:	f002 000f 	and.w	r0, r2, #15
   11b14:	2801      	cmp	r0, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
   11b16:	bf94      	ite	ls
   11b18:	f042 0220 	orrls.w	r2, r2, #32
	} else {
		pdu->chan_sel = 0;
   11b1c:	f36f 1245 	bfchi	r2, #5, #1
   11b20:	555a      	strb	r2, [r3, r5]
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   11b22:	780a      	ldrb	r2, [r1, #0]
   11b24:	f36b 1246 	bfi	r2, fp, #5, #2
   11b28:	700a      	strb	r2, [r1, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   11b2a:	b2d2      	uxtb	r2, r2
   11b2c:	0650      	lsls	r0, r2, #25
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11b2e:	eb03 0405 	add.w	r4, r3, r5
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   11b32:	d509      	bpl.n	11b48 <ll_adv_params_set+0x124>
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   11b34:	f36a 12c7 	bfi	r2, sl, #7, #1
   11b38:	700a      	strb	r2, [r1, #0]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   11b3a:	4846      	ldr	r0, [pc, #280]	; (11c54 <ll_adv_params_set+0x230>)
   11b3c:	9912      	ldr	r1, [sp, #72]	; 0x48
   11b3e:	9301      	str	r3, [sp, #4]
   11b40:	2206      	movs	r2, #6
   11b42:	f7f0 f86d 	bl	1c20 <memcpy>
   11b46:	9b01      	ldr	r3, [sp, #4]
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
   11b48:	5d5a      	ldrb	r2, [r3, r5]
   11b4a:	f00b 0b01 	and.w	fp, fp, #1
   11b4e:	f36b 1286 	bfi	r2, fp, #6, #1
	pdu->rx_addr = 0;
   11b52:	f36f 12c7 	bfc	r2, #7, #1
   11b56:	555a      	strb	r2, [r3, r5]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   11b58:	b2d2      	uxtb	r2, r2
   11b5a:	f002 010f 	and.w	r1, r2, #15
   11b5e:	2901      	cmp	r1, #1
   11b60:	d10f      	bne.n	11b82 <ll_adv_params_set+0x15e>
		pdu->rx_addr = direct_addr_type;
   11b62:	f36a 12c7 	bfi	r2, sl, #7, #1
   11b66:	555a      	strb	r2, [r3, r5]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   11b68:	9912      	ldr	r1, [sp, #72]	; 0x48
   11b6a:	2206      	movs	r2, #6
   11b6c:	f104 0008 	add.w	r0, r4, #8
   11b70:	f7f0 f856 	bl	1c20 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   11b74:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
   11b76:	7063      	strb	r3, [r4, #1]
   11b78:	e043      	b.n	11c02 <ll_adv_params_set+0x1de>
	if (adv_type != 0x01) {
   11b7a:	f1b8 0f01 	cmp.w	r8, #1
   11b7e:	d1a5      	bne.n	11acc <ll_adv_params_set+0xa8>
   11b80:	e793      	b.n	11aaa <ll_adv_params_set+0x86>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   11b82:	2907      	cmp	r1, #7
   11b84:	d15b      	bne.n	11c3e <ll_adv_params_set+0x21a>
		p->ext_hdr_len = 0;
   11b86:	78a1      	ldrb	r1, [r4, #2]
		p->adv_mode = evt_prop & 0x03;
   11b88:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
   11b8c:	f366 1187 	bfi	r1, r6, #6, #2
   11b90:	70a1      	strb	r1, [r4, #2]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   11b92:	06b0      	lsls	r0, r6, #26
		*(u8_t *)h = 0;
   11b94:	f04f 0100 	mov.w	r1, #0
		p = (void *)&pdu->adv_ext_ind;
   11b98:	f104 0302 	add.w	r3, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
   11b9c:	f104 0204 	add.w	r2, r4, #4
		*(u8_t *)h = 0;
   11ba0:	70e1      	strb	r1, [r4, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   11ba2:	d40a      	bmi.n	11bba <ll_adv_params_set+0x196>
   11ba4:	78a1      	ldrb	r1, [r4, #2]
   11ba6:	f011 0fc0 	tst.w	r1, #192	; 0xc0
   11baa:	d106      	bne.n	11bba <ll_adv_params_set+0x196>
   11bac:	f1b9 0f04 	cmp.w	r9, #4
			h->adv_addr = 1;
   11bb0:	bf1e      	ittt	ne
   11bb2:	2201      	movne	r2, #1
   11bb4:	70e2      	strbne	r2, [r4, #3]
			ptr += BDADDR_SIZE;
   11bb6:	f104 020a 	addne.w	r2, r4, #10
		if (evt_prop & BIT(6)) {
   11bba:	0671      	lsls	r1, r6, #25
			h->tx_pwr = 1;
   11bbc:	bf44      	itt	mi
   11bbe:	78e1      	ldrbmi	r1, [r4, #3]
			ptr++;
   11bc0:	3201      	addmi	r2, #1
		len = ptr - (u8_t *)p;
   11bc2:	eba2 0303 	sub.w	r3, r2, r3
			h->tx_pwr = 1;
   11bc6:	bf48      	it	mi
   11bc8:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
		len = ptr - (u8_t *)p;
   11bcc:	b2db      	uxtb	r3, r3
			h->tx_pwr = 1;
   11bce:	bf48      	it	mi
   11bd0:	70e1      	strbmi	r1, [r4, #3]
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
   11bd2:	2b02      	cmp	r3, #2
			p->ext_hdr_len = len -
   11bd4:	bf8a      	itet	hi
   11bd6:	78a1      	ldrbhi	r1, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   11bd8:	2301      	movls	r3, #1
			p->ext_hdr_len = len -
   11bda:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   11bde:	7063      	strb	r3, [r4, #1]
		if (h->tx_pwr) {
   11be0:	78e3      	ldrb	r3, [r4, #3]
			p->ext_hdr_len = len -
   11be2:	bf84      	itt	hi
   11be4:	f360 0105 	bfihi	r1, r0, #0, #6
   11be8:	70a1      	strbhi	r1, [r4, #2]
		if (h->tx_pwr) {
   11bea:	065b      	lsls	r3, r3, #25
   11bec:	d509      	bpl.n	11c02 <ll_adv_params_set+0x1de>
			if (tx_pwr) {
   11bee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11bf0:	b31b      	cbz	r3, 11c3a <ll_adv_params_set+0x216>
				if (*tx_pwr != 0x7F) {
   11bf2:	781b      	ldrb	r3, [r3, #0]
   11bf4:	2b7f      	cmp	r3, #127	; 0x7f
   11bf6:	d102      	bne.n	11bfe <ll_adv_params_set+0x1da>
					*tx_pwr = _tx_pwr;
   11bf8:	9915      	ldr	r1, [sp, #84]	; 0x54
   11bfa:	2300      	movs	r3, #0
   11bfc:	700b      	strb	r3, [r1, #0]
			*ptr = _tx_pwr;
   11bfe:	f802 3c01 	strb.w	r3, [r2, #-1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   11c02:	f7fe fcd3 	bl	105ac <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11c06:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   11c0a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   11c0e:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   11c12:	2404      	movs	r4, #4
   11c14:	5c83      	ldrb	r3, [r0, r2]
   11c16:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   11c1a:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   11c1e:	f36b 1386 	bfi	r3, fp, #6, #1
	pdu->rx_addr = 0;
   11c22:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11c26:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
   11c28:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   11c2a:	784b      	ldrb	r3, [r1, #1]
   11c2c:	b90b      	cbnz	r3, 11c32 <ll_adv_params_set+0x20e>
		pdu->len = BDADDR_SIZE;
   11c2e:	2306      	movs	r3, #6
   11c30:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
   11c32:	4638      	mov	r0, r7
   11c34:	b007      	add	sp, #28
   11c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_tx_pwr = 0;
   11c3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11c3c:	e7df      	b.n	11bfe <ll_adv_params_set+0x1da>
	} else if (pdu->len == 0) {
   11c3e:	7863      	ldrb	r3, [r4, #1]
   11c40:	2b00      	cmp	r3, #0
   11c42:	d1de      	bne.n	11c02 <ll_adv_params_set+0x1de>
		pdu->len = BDADDR_SIZE;
   11c44:	2306      	movs	r3, #6
   11c46:	e796      	b.n	11b76 <ll_adv_params_set+0x152>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11c48:	270c      	movs	r7, #12
   11c4a:	e7f2      	b.n	11c32 <ll_adv_params_set+0x20e>
				return 0x12; /* invalid HCI cmd param */
   11c4c:	2712      	movs	r7, #18
   11c4e:	e7f0      	b.n	11c32 <ll_adv_params_set+0x20e>
   11c50:	20001244 	.word	0x20001244
   11c54:	20001246 	.word	0x20001246

00011c58 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   11c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c5c:	460f      	mov	r7, r1
   11c5e:	4606      	mov	r6, r0
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   11c60:	f7fe fca0 	bl	105a4 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11c64:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   11c68:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   11c6c:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	radio_adv_data = radio_adv_data_get();
   11c70:	4604      	mov	r4, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   11c72:	f810 e002 	ldrb.w	lr, [r0, r2]
   11c76:	f00e 030f 	and.w	r3, lr, #15
   11c7a:	2b01      	cmp	r3, #1
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11c7c:	eb00 0102 	add.w	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   11c80:	d040      	beq.n	11d04 <ll_adv_data_set+0xac>
   11c82:	2b07      	cmp	r3, #7
   11c84:	d03e      	beq.n	11d04 <ll_adv_data_set+0xac>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   11c86:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   11c8a:	42ab      	cmp	r3, r5
   11c8c:	d104      	bne.n	11c98 <ll_adv_data_set+0x40>
		last = radio_adv_data->last + 1;
   11c8e:	3501      	adds	r5, #1
   11c90:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
   11c92:	2d02      	cmp	r5, #2
   11c94:	bf08      	it	eq
   11c96:	2500      	moveq	r5, #0
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   11c98:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   11c9c:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   11ca0:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   11ca4:	5ce0      	ldrb	r0, [r4, r3]
   11ca6:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
   11caa:	f36f 1004 	bfc	r0, #4, #1
   11cae:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   11cb0:	5ca0      	ldrb	r0, [r4, r2]
   11cb2:	f814 e003 	ldrb.w	lr, [r4, r3]
   11cb6:	f3c0 1040 	ubfx	r0, r0, #5, #1
   11cba:	f360 1e45 	bfi	lr, r0, #5, #1
   11cbe:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   11cc2:	5ca0      	ldrb	r0, [r4, r2]
   11cc4:	fa5f fe8e 	uxtb.w	lr, lr
   11cc8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   11ccc:	f360 1e86 	bfi	lr, r0, #6, #1
   11cd0:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   11cd4:	5ca2      	ldrb	r2, [r4, r2]
   11cd6:	fa5f f08e 	uxtb.w	r0, lr
   11cda:	09d2      	lsrs	r2, r2, #7
   11cdc:	f362 10c7 	bfi	r0, r2, #7, #1
   11ce0:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   11ce2:	2206      	movs	r2, #6
   11ce4:	3102      	adds	r1, #2
   11ce6:	f108 0002 	add.w	r0, r8, #2
   11cea:	f7ef ff99 	bl	1c20 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   11cee:	4632      	mov	r2, r6
   11cf0:	4639      	mov	r1, r7
   11cf2:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
   11cf6:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   11cf8:	f7ef ff92 	bl	1c20 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   11cfc:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   11d00:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   11d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011d08 <ll_scan_data_set>:
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   11d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d0c:	4606      	mov	r6, r0
   11d0e:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   11d10:	f7fe fc4c 	bl	105ac <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   11d14:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   11d18:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   11d1c:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
   11d1e:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   11d20:	d136      	bne.n	11d90 <ll_scan_data_set+0x88>
		last = radio_scan_data->last + 1;
   11d22:	1c5d      	adds	r5, r3, #1
   11d24:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   11d26:	2d02      	cmp	r5, #2
			last = 0;
   11d28:	bf08      	it	eq
   11d2a:	2500      	moveq	r5, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   11d2c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   11d30:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   11d34:	b22b      	sxth	r3, r5
   11d36:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   11d3a:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   11d3e:	f04f 0e04 	mov.w	lr, #4
   11d42:	5ce0      	ldrb	r0, [r4, r3]
   11d44:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   11d48:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   11d4c:	f36f 1045 	bfc	r0, #5, #1
   11d50:	54e0      	strb	r0, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
   11d52:	5ca0      	ldrb	r0, [r4, r2]
	prev = (struct pdu_adv *)
   11d54:	18a1      	adds	r1, r4, r2
	pdu->tx_addr = prev->tx_addr;
   11d56:	5ce2      	ldrb	r2, [r4, r3]
   11d58:	f3c0 1080 	ubfx	r0, r0, #6, #1
   11d5c:	f360 1286 	bfi	r2, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   11d60:	eb04 0803 	add.w	r8, r4, r3
	pdu->rx_addr = 0;
   11d64:	f36f 12c7 	bfc	r2, #7, #1
   11d68:	54e2      	strb	r2, [r4, r3]
	pdu->len = BDADDR_SIZE + len;
   11d6a:	1db3      	adds	r3, r6, #6
   11d6c:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   11d70:	2206      	movs	r2, #6
   11d72:	3102      	adds	r1, #2
   11d74:	f108 0002 	add.w	r0, r8, #2
   11d78:	f7ef ff52 	bl	1c20 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   11d7c:	4632      	mov	r2, r6
   11d7e:	4639      	mov	r1, r7
   11d80:	f108 0008 	add.w	r0, r8, #8
   11d84:	f7ef ff4c 	bl	1c20 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   11d88:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   11d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11d90:	461d      	mov	r5, r3
   11d92:	e7cb      	b.n	11d2c <ll_scan_data_set+0x24>

00011d94 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   11d94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   11d98:	b920      	cbnz	r0, 11da4 <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   11d9a:	b002      	add	sp, #8
   11d9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return radio_adv_disable();
   11da0:	f7ff bb6e 	b.w	11480 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
   11da4:	f7fe fc06 	bl	105b4 <ll_adv_is_enabled>
   11da8:	4681      	mov	r9, r0
   11daa:	2800      	cmp	r0, #0
   11dac:	d155      	bne.n	11e5a <ll_adv_enable+0xc6>
	radio_adv_data = radio_adv_data_get();
   11dae:	f7fe fbf9 	bl	105a4 <radio_adv_data_get>
   11db2:	4607      	mov	r7, r0
	radio_scan_data = radio_scan_data_get();
   11db4:	f7fe fbfa 	bl	105ac <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   11db8:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
   11dbc:	4d33      	ldr	r5, [pc, #204]	; (11e8c <ll_adv_enable+0xf8>)
   11dbe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   11dc2:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
   11dc6:	eb07 0804 	add.w	r8, r7, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   11dca:	5d3b      	ldrb	r3, [r7, r4]
   11dcc:	f003 020f 	and.w	r2, r3, #15
   11dd0:	2a07      	cmp	r2, #7
   11dd2:	d110      	bne.n	11df6 <ll_adv_enable+0x62>
		if (h->adv_addr) {
   11dd4:	f898 2003 	ldrb.w	r2, [r8, #3]
   11dd8:	07d2      	lsls	r2, r2, #31
   11dda:	d50a      	bpl.n	11df2 <ll_adv_enable+0x5e>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   11ddc:	4649      	mov	r1, r9
   11dde:	f3c3 1080 	ubfx	r0, r3, #6, #1
   11de2:	f7f5 ff5f 	bl	7ca4 <ll_addr_get>
   11de6:	2206      	movs	r2, #6
   11de8:	4601      	mov	r1, r0
   11dea:	f108 0004 	add.w	r0, r8, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
   11dee:	f7ef ff17 	bl	1c20 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   11df2:	24ff      	movs	r4, #255	; 0xff
   11df4:	e022      	b.n	11e3c <ll_adv_enable+0xa8>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   11df6:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   11dfa:	eb03 0683 	add.w	r6, r3, r3, lsl #2
   11dfe:	ebc3 03c6 	rsb	r3, r3, r6, lsl #3
   11e02:	18c6      	adds	r6, r0, r3
		ll_filters_adv_update(ll_adv.filter_policy);
   11e04:	7828      	ldrb	r0, [r5, #0]
   11e06:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   11e0a:	f000 fad5 	bl	123b8 <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   11e0e:	7828      	ldrb	r0, [r5, #0]
   11e10:	f010 0a40 	ands.w	sl, r0, #64	; 0x40
   11e14:	d023      	beq.n	11e5e <ll_adv_enable+0xca>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   11e16:	464a      	mov	r2, r9
   11e18:	1ca9      	adds	r1, r5, #2
   11e1a:	09c0      	lsrs	r0, r0, #7
   11e1c:	f000 fb10 	bl	12440 <ll_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
   11e20:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   11e22:	4604      	mov	r4, r0
			if (rl_idx != FILTER_IDX_NONE) {
   11e24:	d002      	beq.n	11e2c <ll_adv_enable+0x98>
				ll_rl_rpa_update(false);
   11e26:	4648      	mov	r0, r9
   11e28:	f000 fcd8 	bl	127dc <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   11e2c:	4641      	mov	r1, r8
   11e2e:	4620      	mov	r0, r4
   11e30:	f000 fc68 	bl	12704 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   11e34:	4631      	mov	r1, r6
   11e36:	4620      	mov	r0, r4
   11e38:	f000 fc64 	bl	12704 <ll_rl_pdu_adv_update>
				  ll_adv.chan_map, ll_adv.filter_policy,
   11e3c:	782a      	ldrb	r2, [r5, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   11e3e:	7a28      	ldrb	r0, [r5, #8]
   11e40:	89a9      	ldrh	r1, [r5, #12]
   11e42:	9400      	str	r4, [sp, #0]
   11e44:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   11e48:	f000 0007 	and.w	r0, r0, #7
   11e4c:	f002 0207 	and.w	r2, r2, #7
   11e50:	f7ff f94e 	bl	110f0 <radio_adv_enable>
}
   11e54:	b002      	add	sp, #8
   11e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   11e5a:	2000      	movs	r0, #0
   11e5c:	e7fa      	b.n	11e54 <ll_adv_enable+0xc0>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   11e5e:	5d38      	ldrb	r0, [r7, r4]
   11e60:	4651      	mov	r1, sl
   11e62:	f3c0 1080 	ubfx	r0, r0, #6, #1
   11e66:	f7f5 ff1d 	bl	7ca4 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
   11e6a:	2206      	movs	r2, #6
   11e6c:	4601      	mov	r1, r0
   11e6e:	f108 0002 	add.w	r0, r8, #2
   11e72:	f7ef fed5 	bl	1c20 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   11e76:	5d38      	ldrb	r0, [r7, r4]
   11e78:	4651      	mov	r1, sl
   11e7a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   11e7e:	f7f5 ff11 	bl	7ca4 <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
   11e82:	2206      	movs	r2, #6
   11e84:	4601      	mov	r1, r0
   11e86:	1cb0      	adds	r0, r6, #2
   11e88:	e7b1      	b.n	11dee <ll_adv_enable+0x5a>
   11e8a:	bf00      	nop
   11e8c:	20001244 	.word	0x20001244

00011e90 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   11e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11e94:	4681      	mov	r9, r0
   11e96:	4688      	mov	r8, r1
   11e98:	4617      	mov	r7, r2
   11e9a:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   11e9c:	f7fe fb9e 	bl	105dc <ll_scan_is_enabled>
   11ea0:	b988      	cbnz	r0, 11ec6 <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   11ea2:	4d0a      	ldr	r5, [pc, #40]	; (11ecc <ll_scan_params_set+0x3c>)
   11ea4:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   11ea6:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   11eaa:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   11eae:	4622      	mov	r2, r4
   11eb0:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   11eb4:	4613      	mov	r3, r2
   11eb6:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   11eba:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   11ebc:	f362 1387 	bfi	r3, r2, #6, #2
   11ec0:	712b      	strb	r3, [r5, #4]

	return 0;
   11ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11ec6:	200c      	movs	r0, #12
}
   11ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11ecc:	20001254 	.word	0x20001254

00011ed0 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   11ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ed2:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   11ed4:	b920      	cbnz	r0, 11ee0 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   11ed6:	b005      	add	sp, #20
   11ed8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   11edc:	f7ff bbde 	b.w	1169c <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   11ee0:	f7fe fb7c 	bl	105dc <ll_scan_is_enabled>
   11ee4:	4606      	mov	r6, r0
   11ee6:	bb40      	cbnz	r0, 11f3a <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   11ee8:	4c15      	ldr	r4, [pc, #84]	; (11f40 <ll_scan_enable+0x70>)
   11eea:	7920      	ldrb	r0, [r4, #4]
   11eec:	0980      	lsrs	r0, r0, #6
   11eee:	f000 fa85 	bl	123fc <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   11ef2:	7923      	ldrb	r3, [r4, #4]
   11ef4:	f013 0501 	ands.w	r5, r3, #1
   11ef8:	d006      	beq.n	11f08 <ll_scan_enable+0x38>
   11efa:	f013 0520 	ands.w	r5, r3, #32
   11efe:	d003      	beq.n	11f08 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   11f00:	4630      	mov	r0, r6
   11f02:	f000 fc6b 	bl	127dc <ll_rl_rpa_update>
		rpa_gen = 1;
   11f06:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   11f08:	7926      	ldrb	r6, [r4, #4]
   11f0a:	f006 070f 	and.w	r7, r6, #15
   11f0e:	f3c6 1600 	ubfx	r6, r6, #4, #1
   11f12:	2100      	movs	r1, #0
   11f14:	4630      	mov	r0, r6
   11f16:	f7f5 fec5 	bl	7ca4 <ll_addr_get>
   11f1a:	22ff      	movs	r2, #255	; 0xff
   11f1c:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   11f1e:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   11f20:	8823      	ldrh	r3, [r4, #0]
   11f22:	9502      	str	r5, [sp, #8]
   11f24:	0992      	lsrs	r2, r2, #6
   11f26:	9201      	str	r2, [sp, #4]
   11f28:	8862      	ldrh	r2, [r4, #2]
   11f2a:	9200      	str	r2, [sp, #0]
   11f2c:	4631      	mov	r1, r6
   11f2e:	4602      	mov	r2, r0
   11f30:	4638      	mov	r0, r7
   11f32:	f7ff fad5 	bl	114e0 <radio_scan_enable>
}
   11f36:	b005      	add	sp, #20
   11f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   11f3a:	2000      	movs	r0, #0
   11f3c:	e7fb      	b.n	11f36 <ll_scan_enable+0x66>
   11f3e:	bf00      	nop
   11f40:	20001254 	.word	0x20001254

00011f44 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   11f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f48:	b085      	sub	sp, #20
   11f4a:	461e      	mov	r6, r3
   11f4c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   11f50:	9303      	str	r3, [sp, #12]
   11f52:	4680      	mov	r8, r0
   11f54:	4689      	mov	r9, r1
   11f56:	4615      	mov	r5, r2
   11f58:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   11f5a:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   11f5e:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   11f62:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   11f66:	f7fe fb39 	bl	105dc <ll_scan_is_enabled>
   11f6a:	9b03      	ldr	r3, [sp, #12]
   11f6c:	bba0      	cbnz	r0, 11fd8 <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   11f6e:	9300      	str	r3, [sp, #0]
   11f70:	4652      	mov	r2, sl
   11f72:	465b      	mov	r3, fp
   11f74:	4639      	mov	r1, r7
   11f76:	4630      	mov	r0, r6
   11f78:	f7fe fb56 	bl	10628 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   11f7c:	bb68      	cbnz	r0, 11fda <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   11f7e:	4628      	mov	r0, r5
   11f80:	f000 fa3c 	bl	123fc <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   11f84:	b1dd      	cbz	r5, 11fbe <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   11f86:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   11f88:	1ea3      	subs	r3, r4, #2
   11f8a:	2b01      	cmp	r3, #1
   11f8c:	d822      	bhi.n	11fd4 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   11f8e:	2000      	movs	r0, #0
   11f90:	f000 fc24 	bl	127dc <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   11f94:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   11f98:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   11f9a:	2100      	movs	r1, #0
   11f9c:	4620      	mov	r0, r4
   11f9e:	f7f5 fe81 	bl	7ca4 <ll_addr_get>
   11fa2:	4643      	mov	r3, r8
   11fa4:	4602      	mov	r2, r0
   11fa6:	4621      	mov	r1, r4
   11fa8:	2000      	movs	r0, #0
   11faa:	9711      	str	r7, [sp, #68]	; 0x44
   11fac:	9610      	str	r6, [sp, #64]	; 0x40
   11fae:	950f      	str	r5, [sp, #60]	; 0x3c
   11fb0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   11fb4:	b005      	add	sp, #20
   11fb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   11fba:	f7ff ba91 	b.w	114e0 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   11fbe:	f000 fb99 	bl	126f4 <ctrl_rl_enabled>
   11fc2:	2800      	cmp	r0, #0
   11fc4:	d0df      	beq.n	11f86 <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   11fc6:	4639      	mov	r1, r7
   11fc8:	462a      	mov	r2, r5
   11fca:	4630      	mov	r0, r6
   11fcc:	f000 fa38 	bl	12440 <ll_rl_find>
   11fd0:	4607      	mov	r7, r0
   11fd2:	e7d9      	b.n	11f88 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   11fd4:	2600      	movs	r6, #0
   11fd6:	e7e0      	b.n	11f9a <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11fd8:	200c      	movs	r0, #12
}
   11fda:	b005      	add	sp, #20
   11fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011fe0 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   11fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11fe4:	4688      	mov	r8, r1
	int i;

	if (free) {
   11fe6:	4615      	mov	r5, r2
   11fe8:	b10a      	cbz	r2, 11fee <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   11fea:	23ff      	movs	r3, #255	; 0xff
   11fec:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   11fee:	4e14      	ldr	r6, [pc, #80]	; (12040 <wl_find+0x60>)
{
   11ff0:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   11ff2:	f000 0701 	and.w	r7, r0, #1
   11ff6:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11ffa:	07da      	lsls	r2, r3, #31
   11ffc:	d51d      	bpl.n	1203a <wl_find+0x5a>
   11ffe:	f3c3 0340 	ubfx	r3, r3, #1, #1
   12002:	42bb      	cmp	r3, r7
   12004:	d113      	bne.n	1202e <wl_find+0x4e>
   12006:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   1200a:	2206      	movs	r2, #6
   1200c:	4641      	mov	r1, r8
   1200e:	3002      	adds	r0, #2
   12010:	f7ef fdf1 	bl	1bf6 <memcmp>
   12014:	b910      	cbnz	r0, 1201c <wl_find+0x3c>
			return i;
   12016:	b2e0      	uxtb	r0, r4
   12018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1201c:	b13d      	cbz	r5, 1202e <wl_find+0x4e>
   1201e:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   12022:	07db      	lsls	r3, r3, #31
   12024:	d403      	bmi.n	1202e <wl_find+0x4e>
   12026:	782b      	ldrb	r3, [r5, #0]
   12028:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1202a:	bf08      	it	eq
   1202c:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   1202e:	3401      	adds	r4, #1
   12030:	2c08      	cmp	r4, #8
   12032:	d1e0      	bne.n	11ff6 <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   12034:	20ff      	movs	r0, #255	; 0xff
   12036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1203a:	2d00      	cmp	r5, #0
   1203c:	d1f3      	bne.n	12026 <wl_find+0x46>
   1203e:	e7f6      	b.n	1202e <wl_find+0x4e>
   12040:	20001487 	.word	0x20001487

00012044 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   12044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12048:	4d1a      	ldr	r5, [pc, #104]	; (120b4 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1204a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 120c0 <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   1204e:	1eae      	subs	r6, r5, #2
{
   12050:	2400      	movs	r4, #0
   12052:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   12054:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   12058:	07d9      	lsls	r1, r3, #31
   1205a:	d524      	bpl.n	120a6 <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1205c:	f898 3000 	ldrb.w	r3, [r8]
   12060:	b15b      	cbz	r3, 1207a <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   12062:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   12066:	2a07      	cmp	r2, #7
   12068:	d807      	bhi.n	1207a <filter_wl_update+0x36>
   1206a:	2328      	movs	r3, #40	; 0x28
   1206c:	4353      	muls	r3, r2
   1206e:	4a12      	ldr	r2, [pc, #72]	; (120b8 <filter_wl_update+0x74>)
   12070:	5cd3      	ldrb	r3, [r2, r3]
   12072:	075a      	lsls	r2, r3, #29
   12074:	d501      	bpl.n	1207a <filter_wl_update+0x36>
   12076:	06db      	lsls	r3, r3, #27
   12078:	d515      	bpl.n	120a6 <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   1207a:	4810      	ldr	r0, [pc, #64]	; (120bc <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1207c:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   12080:	2201      	movs	r2, #1
   12082:	fa02 f104 	lsl.w	r1, r2, r4
   12086:	7802      	ldrb	r2, [r0, #0]
   12088:	430a      	orrs	r2, r1
   1208a:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1208c:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12090:	7842      	ldrb	r2, [r0, #1]
   12092:	40a3      	lsls	r3, r4
   12094:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   12096:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12098:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1209a:	fb02 0004 	mla	r0, r2, r4, r0
   1209e:	4629      	mov	r1, r5
   120a0:	3002      	adds	r0, #2
   120a2:	f7ef fdbd 	bl	1c20 <memcpy>
   120a6:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   120a8:	2c08      	cmp	r4, #8
   120aa:	f105 0508 	add.w	r5, r5, #8
   120ae:	d1d1      	bne.n	12054 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   120b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   120b4:	20001489 	.word	0x20001489
   120b8:	20001314 	.word	0x20001314
   120bc:	200014c7 	.word	0x200014c7
   120c0:	20001454 	.word	0x20001454

000120c4 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   120c4:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   120c6:	f7fe fa75 	bl	105b4 <ll_adv_is_enabled>
   120ca:	b928      	cbnz	r0, 120d8 <rl_access_check.constprop.1+0x14>
   120cc:	f7fe fa86 	bl	105dc <ll_scan_is_enabled>
   120d0:	fab0 f080 	clz	r0, r0
   120d4:	0940      	lsrs	r0, r0, #5
   120d6:	bd08      	pop	{r3, pc}
   120d8:	2000      	movs	r0, #0
}
   120da:	bd08      	pop	{r3, pc}

000120dc <filter_rl_update>:
{
   120dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   120de:	4e10      	ldr	r6, [pc, #64]	; (12120 <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   120e0:	4d10      	ldr	r5, [pc, #64]	; (12124 <filter_rl_update+0x48>)
{
   120e2:	2400      	movs	r4, #0
		if (rl[i].taken) {
   120e4:	2728      	movs	r7, #40	; 0x28
   120e6:	fb07 f104 	mul.w	r1, r7, r4
   120ea:	5c73      	ldrb	r3, [r6, r1]
   120ec:	07da      	lsls	r2, r3, #31
   120ee:	d513      	bpl.n	12118 <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   120f0:	2201      	movs	r2, #1
   120f2:	fa02 f004 	lsl.w	r0, r2, r4
   120f6:	782a      	ldrb	r2, [r5, #0]
   120f8:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   120fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   120fe:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12100:	786a      	ldrb	r2, [r5, #1]
   12102:	40a3      	lsls	r3, r4
   12104:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   12106:	2206      	movs	r2, #6
   12108:	3101      	adds	r1, #1
   1210a:	fb02 5004 	mla	r0, r2, r4, r5
   1210e:	4431      	add	r1, r6
   12110:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12112:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   12114:	f7ef fd84 	bl	1c20 <memcpy>
   12118:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1211a:	2c08      	cmp	r4, #8
   1211c:	d1e3      	bne.n	120e6 <filter_rl_update+0xa>
}
   1211e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12120:	20001314 	.word	0x20001314
   12124:	20001455 	.word	0x20001455

00012128 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   12128:	2807      	cmp	r0, #7
   1212a:	d80c      	bhi.n	12146 <ctrl_lrpa_get+0x1e>
   1212c:	2328      	movs	r3, #40	; 0x28
   1212e:	4358      	muls	r0, r3
   12130:	4a06      	ldr	r2, [pc, #24]	; (1214c <ctrl_lrpa_get+0x24>)
   12132:	5c13      	ldrb	r3, [r2, r0]
   12134:	1811      	adds	r1, r2, r0
   12136:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1213a:	b128      	cbz	r0, 12148 <ctrl_lrpa_get+0x20>
   1213c:	f3c3 0040 	ubfx	r0, r3, #1, #1
   12140:	b110      	cbz	r0, 12148 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   12142:	6a48      	ldr	r0, [r1, #36]	; 0x24
   12144:	4770      	bx	lr
		return NULL;
   12146:	2000      	movs	r0, #0
}
   12148:	4770      	bx	lr
   1214a:	bf00      	nop
   1214c:	20001314 	.word	0x20001314

00012150 <ctrl_irks_get>:
	*count = peer_irk_count;
   12150:	4b02      	ldr	r3, [pc, #8]	; (1215c <ctrl_irks_get+0xc>)
   12152:	781b      	ldrb	r3, [r3, #0]
   12154:	7003      	strb	r3, [r0, #0]
}
   12156:	4802      	ldr	r0, [pc, #8]	; (12160 <ctrl_irks_get+0x10>)
   12158:	4770      	bx	lr
   1215a:	bf00      	nop
   1215c:	2000128a 	.word	0x2000128a
   12160:	20001293 	.word	0x20001293

00012164 <ctrl_rl_idx>:
{
   12164:	b513      	push	{r0, r1, r4, lr}
	if (whitelist) {
   12166:	b320      	cbz	r0, 121b2 <ctrl_rl_idx+0x4e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   12168:	2907      	cmp	r1, #7
   1216a:	d90e      	bls.n	1218a <ctrl_rl_idx+0x26>
		LL_ASSERT(wl[devmatch_id].taken);
   1216c:	4a1e      	ldr	r2, [pc, #120]	; (121e8 <ctrl_rl_idx+0x84>)
   1216e:	4b1f      	ldr	r3, [pc, #124]	; (121ec <ctrl_rl_idx+0x88>)
   12170:	9201      	str	r2, [sp, #4]
   12172:	9200      	str	r2, [sp, #0]
   12174:	681c      	ldr	r4, [r3, #0]
   12176:	491e      	ldr	r1, [pc, #120]	; (121f0 <ctrl_rl_idx+0x8c>)
   12178:	4b1e      	ldr	r3, [pc, #120]	; (121f4 <ctrl_rl_idx+0x90>)
   1217a:	481f      	ldr	r0, [pc, #124]	; (121f8 <ctrl_rl_idx+0x94>)
   1217c:	47a0      	blx	r4
   1217e:	4040      	eors	r0, r0
   12180:	f380 8811 	msr	BASEPRI, r0
   12184:	f04f 0004 	mov.w	r0, #4
   12188:	df02      	svc	2
   1218a:	4b1c      	ldr	r3, [pc, #112]	; (121fc <ctrl_rl_idx+0x98>)
   1218c:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   12190:	07d2      	lsls	r2, r2, #31
   12192:	d408      	bmi.n	121a6 <ctrl_rl_idx+0x42>
   12194:	4a14      	ldr	r2, [pc, #80]	; (121e8 <ctrl_rl_idx+0x84>)
   12196:	4b15      	ldr	r3, [pc, #84]	; (121ec <ctrl_rl_idx+0x88>)
   12198:	9201      	str	r2, [sp, #4]
   1219a:	9200      	str	r2, [sp, #0]
   1219c:	681c      	ldr	r4, [r3, #0]
   1219e:	4914      	ldr	r1, [pc, #80]	; (121f0 <ctrl_rl_idx+0x8c>)
   121a0:	4b14      	ldr	r3, [pc, #80]	; (121f4 <ctrl_rl_idx+0x90>)
   121a2:	4817      	ldr	r0, [pc, #92]	; (12200 <ctrl_rl_idx+0x9c>)
   121a4:	e7ea      	b.n	1217c <ctrl_rl_idx+0x18>
		i = wl[devmatch_id].rl_idx;
   121a6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   121aa:	7849      	ldrb	r1, [r1, #1]
}
   121ac:	4608      	mov	r0, r1
   121ae:	b002      	add	sp, #8
   121b0:	bd10      	pop	{r4, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   121b2:	2907      	cmp	r1, #7
   121b4:	d908      	bls.n	121c8 <ctrl_rl_idx+0x64>
   121b6:	4a0c      	ldr	r2, [pc, #48]	; (121e8 <ctrl_rl_idx+0x84>)
   121b8:	4b0c      	ldr	r3, [pc, #48]	; (121ec <ctrl_rl_idx+0x88>)
   121ba:	9201      	str	r2, [sp, #4]
   121bc:	9200      	str	r2, [sp, #0]
   121be:	681c      	ldr	r4, [r3, #0]
   121c0:	490b      	ldr	r1, [pc, #44]	; (121f0 <ctrl_rl_idx+0x8c>)
   121c2:	4b0c      	ldr	r3, [pc, #48]	; (121f4 <ctrl_rl_idx+0x90>)
   121c4:	480f      	ldr	r0, [pc, #60]	; (12204 <ctrl_rl_idx+0xa0>)
   121c6:	e7d9      	b.n	1217c <ctrl_rl_idx+0x18>
		LL_ASSERT(rl[i].taken);
   121c8:	2328      	movs	r3, #40	; 0x28
   121ca:	434b      	muls	r3, r1
   121cc:	4a0e      	ldr	r2, [pc, #56]	; (12208 <ctrl_rl_idx+0xa4>)
   121ce:	5cd3      	ldrb	r3, [r2, r3]
   121d0:	07db      	lsls	r3, r3, #31
   121d2:	d4eb      	bmi.n	121ac <ctrl_rl_idx+0x48>
   121d4:	4a04      	ldr	r2, [pc, #16]	; (121e8 <ctrl_rl_idx+0x84>)
   121d6:	4b05      	ldr	r3, [pc, #20]	; (121ec <ctrl_rl_idx+0x88>)
   121d8:	9201      	str	r2, [sp, #4]
   121da:	9200      	str	r2, [sp, #0]
   121dc:	681c      	ldr	r4, [r3, #0]
   121de:	4904      	ldr	r1, [pc, #16]	; (121f0 <ctrl_rl_idx+0x8c>)
   121e0:	4b04      	ldr	r3, [pc, #16]	; (121f4 <ctrl_rl_idx+0x90>)
   121e2:	480a      	ldr	r0, [pc, #40]	; (1220c <ctrl_rl_idx+0xa8>)
   121e4:	e7ca      	b.n	1217c <ctrl_rl_idx+0x18>
   121e6:	bf00      	nop
   121e8:	000159e9 	.word	0x000159e9
   121ec:	20003ad4 	.word	0x20003ad4
   121f0:	00016791 	.word	0x00016791
   121f4:	0001907a 	.word	0x0001907a
   121f8:	0001914b 	.word	0x0001914b
   121fc:	20001487 	.word	0x20001487
   12200:	00019218 	.word	0x00019218
   12204:	0001924f 	.word	0x0001924f
   12208:	20001314 	.word	0x20001314
   1220c:	0001931c 	.word	0x0001931c

00012210 <ctrl_rl_irk_idx>:
{
   12210:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   12212:	4b18      	ldr	r3, [pc, #96]	; (12274 <ctrl_rl_irk_idx+0x64>)
   12214:	781b      	ldrb	r3, [r3, #0]
   12216:	4283      	cmp	r3, r0
   12218:	d80e      	bhi.n	12238 <ctrl_rl_irk_idx+0x28>
   1221a:	4a17      	ldr	r2, [pc, #92]	; (12278 <ctrl_rl_irk_idx+0x68>)
   1221c:	4b17      	ldr	r3, [pc, #92]	; (1227c <ctrl_rl_irk_idx+0x6c>)
   1221e:	9201      	str	r2, [sp, #4]
   12220:	9200      	str	r2, [sp, #0]
   12222:	681c      	ldr	r4, [r3, #0]
   12224:	4916      	ldr	r1, [pc, #88]	; (12280 <ctrl_rl_irk_idx+0x70>)
   12226:	4b17      	ldr	r3, [pc, #92]	; (12284 <ctrl_rl_irk_idx+0x74>)
   12228:	4817      	ldr	r0, [pc, #92]	; (12288 <ctrl_rl_irk_idx+0x78>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1222a:	47a0      	blx	r4
   1222c:	4040      	eors	r0, r0
   1222e:	f380 8811 	msr	BASEPRI, r0
   12232:	f04f 0004 	mov.w	r0, #4
   12236:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   12238:	4b14      	ldr	r3, [pc, #80]	; (1228c <ctrl_rl_irk_idx+0x7c>)
   1223a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1223c:	2807      	cmp	r0, #7
   1223e:	d908      	bls.n	12252 <ctrl_rl_irk_idx+0x42>
   12240:	4a0d      	ldr	r2, [pc, #52]	; (12278 <ctrl_rl_irk_idx+0x68>)
   12242:	4b0e      	ldr	r3, [pc, #56]	; (1227c <ctrl_rl_irk_idx+0x6c>)
   12244:	9201      	str	r2, [sp, #4]
   12246:	9200      	str	r2, [sp, #0]
   12248:	681c      	ldr	r4, [r3, #0]
   1224a:	490d      	ldr	r1, [pc, #52]	; (12280 <ctrl_rl_irk_idx+0x70>)
   1224c:	4b0d      	ldr	r3, [pc, #52]	; (12284 <ctrl_rl_irk_idx+0x74>)
   1224e:	4810      	ldr	r0, [pc, #64]	; (12290 <ctrl_rl_irk_idx+0x80>)
   12250:	e7eb      	b.n	1222a <ctrl_rl_irk_idx+0x1a>
	LL_ASSERT(rl[i].taken);
   12252:	2328      	movs	r3, #40	; 0x28
   12254:	4343      	muls	r3, r0
   12256:	4a0f      	ldr	r2, [pc, #60]	; (12294 <ctrl_rl_irk_idx+0x84>)
   12258:	5cd3      	ldrb	r3, [r2, r3]
   1225a:	07db      	lsls	r3, r3, #31
   1225c:	d408      	bmi.n	12270 <ctrl_rl_irk_idx+0x60>
   1225e:	4a06      	ldr	r2, [pc, #24]	; (12278 <ctrl_rl_irk_idx+0x68>)
   12260:	4b06      	ldr	r3, [pc, #24]	; (1227c <ctrl_rl_irk_idx+0x6c>)
   12262:	9201      	str	r2, [sp, #4]
   12264:	9200      	str	r2, [sp, #0]
   12266:	681c      	ldr	r4, [r3, #0]
   12268:	4905      	ldr	r1, [pc, #20]	; (12280 <ctrl_rl_irk_idx+0x70>)
   1226a:	4b06      	ldr	r3, [pc, #24]	; (12284 <ctrl_rl_irk_idx+0x74>)
   1226c:	480a      	ldr	r0, [pc, #40]	; (12298 <ctrl_rl_irk_idx+0x88>)
   1226e:	e7dc      	b.n	1222a <ctrl_rl_irk_idx+0x1a>
}
   12270:	b002      	add	sp, #8
   12272:	bd10      	pop	{r4, pc}
   12274:	2000128a 	.word	0x2000128a
   12278:	000159e9 	.word	0x000159e9
   1227c:	20003ad4 	.word	0x20003ad4
   12280:	00016791 	.word	0x00016791
   12284:	00019086 	.word	0x00019086
   12288:	00019349 	.word	0x00019349
   1228c:	2000128b 	.word	0x2000128b
   12290:	00019387 	.word	0x00019387
   12294:	20001314 	.word	0x20001314
   12298:	0001931c 	.word	0x0001931c

0001229c <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1229c:	2807      	cmp	r0, #7
{
   1229e:	b513      	push	{r0, r1, r4, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   122a0:	d818      	bhi.n	122d4 <ctrl_irk_whitelisted+0x38>
	LL_ASSERT(rl[rl_idx].taken);
   122a2:	2328      	movs	r3, #40	; 0x28
   122a4:	4358      	muls	r0, r3
   122a6:	4b0c      	ldr	r3, [pc, #48]	; (122d8 <ctrl_irk_whitelisted+0x3c>)
   122a8:	5c18      	ldrb	r0, [r3, r0]
   122aa:	07c3      	lsls	r3, r0, #31
   122ac:	d40e      	bmi.n	122cc <ctrl_irk_whitelisted+0x30>
   122ae:	4a0b      	ldr	r2, [pc, #44]	; (122dc <ctrl_irk_whitelisted+0x40>)
   122b0:	4b0b      	ldr	r3, [pc, #44]	; (122e0 <ctrl_irk_whitelisted+0x44>)
   122b2:	9201      	str	r2, [sp, #4]
   122b4:	9200      	str	r2, [sp, #0]
   122b6:	681c      	ldr	r4, [r3, #0]
   122b8:	490a      	ldr	r1, [pc, #40]	; (122e4 <ctrl_irk_whitelisted+0x48>)
   122ba:	4b0b      	ldr	r3, [pc, #44]	; (122e8 <ctrl_irk_whitelisted+0x4c>)
   122bc:	480b      	ldr	r0, [pc, #44]	; (122ec <ctrl_irk_whitelisted+0x50>)
   122be:	47a0      	blx	r4
   122c0:	4040      	eors	r0, r0
   122c2:	f380 8811 	msr	BASEPRI, r0
   122c6:	f04f 0004 	mov.w	r0, #4
   122ca:	df02      	svc	2
	return rl[rl_idx].wl;
   122cc:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   122d0:	b002      	add	sp, #8
   122d2:	bd10      	pop	{r4, pc}
		return false;
   122d4:	2000      	movs	r0, #0
   122d6:	e7fb      	b.n	122d0 <ctrl_irk_whitelisted+0x34>
   122d8:	20001314 	.word	0x20001314
   122dc:	000159e9 	.word	0x000159e9
   122e0:	20003ad4 	.word	0x20003ad4
   122e4:	00016791 	.word	0x00016791
   122e8:	00019096 	.word	0x00019096
   122ec:	00019119 	.word	0x00019119

000122f0 <ctrl_filter_get>:
}
   122f0:	4b03      	ldr	r3, [pc, #12]	; (12300 <ctrl_filter_get+0x10>)
   122f2:	4a04      	ldr	r2, [pc, #16]	; (12304 <ctrl_filter_get+0x14>)
   122f4:	2800      	cmp	r0, #0
   122f6:	bf14      	ite	ne
   122f8:	4610      	movne	r0, r2
   122fa:	4618      	moveq	r0, r3
   122fc:	4770      	bx	lr
   122fe:	bf00      	nop
   12300:	20001455 	.word	0x20001455
   12304:	200014c7 	.word	0x200014c7

00012308 <ll_wl_size_get>:
   12308:	2008      	movs	r0, #8
   1230a:	4770      	bx	lr

0001230c <ll_wl_clear>:
{
   1230c:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1230e:	f7fe f959 	bl	105c4 <radio_adv_filter_pol_get>
   12312:	4604      	mov	r4, r0
   12314:	b110      	cbz	r0, 1231c <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12316:	240c      	movs	r4, #12
}
   12318:	4620      	mov	r0, r4
   1231a:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1231c:	f7fe f974 	bl	10608 <radio_scan_filter_pol_get>
   12320:	07c3      	lsls	r3, r0, #31
   12322:	d4f8      	bmi.n	12316 <ll_wl_clear+0xa>
		wl[i].taken = 0;
   12324:	4a07      	ldr	r2, [pc, #28]	; (12344 <ll_wl_clear+0x38>)
   12326:	4623      	mov	r3, r4
   12328:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1232c:	f36f 0100 	bfc	r1, #0, #1
   12330:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   12334:	3301      	adds	r3, #1
   12336:	2b08      	cmp	r3, #8
   12338:	d1f6      	bne.n	12328 <ll_wl_clear+0x1c>
	wl_anon = 0;
   1233a:	4b03      	ldr	r3, [pc, #12]	; (12348 <ll_wl_clear+0x3c>)
   1233c:	2200      	movs	r2, #0
   1233e:	701a      	strb	r2, [r3, #0]
	return 0;
   12340:	e7ea      	b.n	12318 <ll_wl_clear+0xc>
   12342:	bf00      	nop
   12344:	20001487 	.word	0x20001487
   12348:	20001980 	.word	0x20001980

0001234c <ll_wl_remove>:
{
   1234c:	b538      	push	{r3, r4, r5, lr}
   1234e:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12350:	f7fe f938 	bl	105c4 <radio_adv_filter_pol_get>
   12354:	4604      	mov	r4, r0
   12356:	b110      	cbz	r0, 1235e <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12358:	240c      	movs	r4, #12
}
   1235a:	4620      	mov	r0, r4
   1235c:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1235e:	f7fe f953 	bl	10608 <radio_scan_filter_pol_get>
   12362:	07c3      	lsls	r3, r0, #31
   12364:	d4f8      	bmi.n	12358 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   12366:	7828      	ldrb	r0, [r5, #0]
   12368:	28ff      	cmp	r0, #255	; 0xff
   1236a:	d102      	bne.n	12372 <ll_wl_remove+0x26>
		wl_anon = 0;
   1236c:	4b0f      	ldr	r3, [pc, #60]	; (123ac <ll_wl_remove+0x60>)
   1236e:	701c      	strb	r4, [r3, #0]
		return 0;
   12370:	e7f3      	b.n	1235a <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   12372:	4622      	mov	r2, r4
   12374:	1c69      	adds	r1, r5, #1
   12376:	f7ff fe33 	bl	11fe0 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1237a:	2807      	cmp	r0, #7
   1237c:	d813      	bhi.n	123a6 <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   1237e:	4b0c      	ldr	r3, [pc, #48]	; (123b0 <ll_wl_remove+0x64>)
   12380:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   12384:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   12386:	2d07      	cmp	r5, #7
   12388:	d806      	bhi.n	12398 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   1238a:	2228      	movs	r2, #40	; 0x28
   1238c:	4909      	ldr	r1, [pc, #36]	; (123b4 <ll_wl_remove+0x68>)
   1238e:	436a      	muls	r2, r5
   12390:	5c8d      	ldrb	r5, [r1, r2]
   12392:	f364 1545 	bfi	r5, r4, #5, #1
   12396:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   12398:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   1239c:	f36f 0200 	bfc	r2, #0, #1
   123a0:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   123a4:	e7d9      	b.n	1235a <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   123a6:	2402      	movs	r4, #2
   123a8:	e7d7      	b.n	1235a <ll_wl_remove+0xe>
   123aa:	bf00      	nop
   123ac:	20001980 	.word	0x20001980
   123b0:	20001487 	.word	0x20001487
   123b4:	20001314 	.word	0x20001314

000123b8 <ll_filters_adv_update>:
{
   123b8:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   123ba:	4b0d      	ldr	r3, [pc, #52]	; (123f0 <ll_filters_adv_update+0x38>)
   123bc:	2200      	movs	r2, #0
   123be:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   123c0:	705a      	strb	r2, [r3, #1]
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   123c2:	b128      	cbz	r0, 123d0 <ll_filters_adv_update+0x18>
   123c4:	f7fe f920 	bl	10608 <radio_scan_filter_pol_get>
   123c8:	07c3      	lsls	r3, r0, #31
   123ca:	d401      	bmi.n	123d0 <ll_filters_adv_update+0x18>
		filter_wl_update();
   123cc:	f7ff fe3a 	bl	12044 <filter_wl_update>
	filter->enable_bitmask = 0;
   123d0:	4b08      	ldr	r3, [pc, #32]	; (123f4 <ll_filters_adv_update+0x3c>)
   123d2:	2200      	movs	r2, #0
   123d4:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   123d6:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_scan_is_enabled()) {
   123d8:	4b07      	ldr	r3, [pc, #28]	; (123f8 <ll_filters_adv_update+0x40>)
   123da:	781b      	ldrb	r3, [r3, #0]
   123dc:	b133      	cbz	r3, 123ec <ll_filters_adv_update+0x34>
   123de:	f7fe f8fd 	bl	105dc <ll_scan_is_enabled>
   123e2:	b918      	cbnz	r0, 123ec <ll_filters_adv_update+0x34>
}
   123e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   123e8:	f7ff be78 	b.w	120dc <filter_rl_update>
   123ec:	bd08      	pop	{r3, pc}
   123ee:	bf00      	nop
   123f0:	200014c7 	.word	0x200014c7
   123f4:	20001455 	.word	0x20001455
   123f8:	20001454 	.word	0x20001454

000123fc <ll_filters_scan_update>:
{
   123fc:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   123fe:	4b0d      	ldr	r3, [pc, #52]	; (12434 <ll_filters_scan_update+0x38>)
   12400:	2200      	movs	r2, #0
   12402:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   12404:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   12406:	07c3      	lsls	r3, r0, #31
   12408:	d504      	bpl.n	12414 <ll_filters_scan_update+0x18>
   1240a:	f7fe f8db 	bl	105c4 <radio_adv_filter_pol_get>
   1240e:	b908      	cbnz	r0, 12414 <ll_filters_scan_update+0x18>
		filter_wl_update();
   12410:	f7ff fe18 	bl	12044 <filter_wl_update>
	filter->enable_bitmask = 0;
   12414:	4b08      	ldr	r3, [pc, #32]	; (12438 <ll_filters_scan_update+0x3c>)
   12416:	2200      	movs	r2, #0
   12418:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1241a:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   1241c:	4b07      	ldr	r3, [pc, #28]	; (1243c <ll_filters_scan_update+0x40>)
   1241e:	781b      	ldrb	r3, [r3, #0]
   12420:	b133      	cbz	r3, 12430 <ll_filters_scan_update+0x34>
   12422:	f7fe f8c7 	bl	105b4 <ll_adv_is_enabled>
   12426:	b918      	cbnz	r0, 12430 <ll_filters_scan_update+0x34>
}
   12428:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   1242c:	f7ff be56 	b.w	120dc <filter_rl_update>
   12430:	bd08      	pop	{r3, pc}
   12432:	bf00      	nop
   12434:	200014c7 	.word	0x200014c7
   12438:	20001455 	.word	0x20001455
   1243c:	20001454 	.word	0x20001454

00012440 <ll_rl_find>:
{
   12440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12444:	468a      	mov	sl, r1
	if (free) {
   12446:	4614      	mov	r4, r2
   12448:	b10a      	cbz	r2, 1244e <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1244a:	23ff      	movs	r3, #255	; 0xff
   1244c:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1244e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 124a4 <ll_rl_find+0x64>
{
   12452:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12454:	f000 0901 	and.w	r9, r0, #1
   12458:	2628      	movs	r6, #40	; 0x28
   1245a:	436e      	muls	r6, r5
   1245c:	b2ef      	uxtb	r7, r5
   1245e:	f818 3006 	ldrb.w	r3, [r8, r6]
   12462:	07da      	lsls	r2, r3, #31
   12464:	d51a      	bpl.n	1249c <ll_rl_find+0x5c>
   12466:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1246a:	454b      	cmp	r3, r9
   1246c:	d10f      	bne.n	1248e <ll_rl_find+0x4e>
   1246e:	1c70      	adds	r0, r6, #1
   12470:	2206      	movs	r2, #6
   12472:	4651      	mov	r1, sl
   12474:	4440      	add	r0, r8
   12476:	f7ef fbbe 	bl	1bf6 <memcmp>
   1247a:	b160      	cbz	r0, 12496 <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1247c:	b13c      	cbz	r4, 1248e <ll_rl_find+0x4e>
   1247e:	f818 3006 	ldrb.w	r3, [r8, r6]
   12482:	07db      	lsls	r3, r3, #31
   12484:	d403      	bmi.n	1248e <ll_rl_find+0x4e>
   12486:	7823      	ldrb	r3, [r4, #0]
   12488:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1248a:	bf08      	it	eq
   1248c:	7027      	strbeq	r7, [r4, #0]
   1248e:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12490:	2d08      	cmp	r5, #8
   12492:	d1e1      	bne.n	12458 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   12494:	27ff      	movs	r7, #255	; 0xff
}
   12496:	4638      	mov	r0, r7
   12498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1249c:	2c00      	cmp	r4, #0
   1249e:	d1f2      	bne.n	12486 <ll_rl_find+0x46>
   124a0:	e7f5      	b.n	1248e <ll_rl_find+0x4e>
   124a2:	bf00      	nop
   124a4:	20001314 	.word	0x20001314

000124a8 <ll_wl_add>:
{
   124a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   124ac:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   124ae:	f7fe f889 	bl	105c4 <radio_adv_filter_pol_get>
   124b2:	4605      	mov	r5, r0
   124b4:	b120      	cbz	r0, 124c0 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   124b6:	250c      	movs	r5, #12
}
   124b8:	4628      	mov	r0, r5
   124ba:	b002      	add	sp, #8
   124bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   124c0:	f7fe f8a2 	bl	10608 <radio_scan_filter_pol_get>
   124c4:	07c3      	lsls	r3, r0, #31
   124c6:	d4f6      	bmi.n	124b6 <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   124c8:	7838      	ldrb	r0, [r7, #0]
   124ca:	28ff      	cmp	r0, #255	; 0xff
   124cc:	d103      	bne.n	124d6 <ll_wl_add+0x2e>
		wl_anon = 1;
   124ce:	4b1f      	ldr	r3, [pc, #124]	; (1254c <ll_wl_add+0xa4>)
   124d0:	2201      	movs	r2, #1
   124d2:	701a      	strb	r2, [r3, #0]
		return 0;
   124d4:	e7f0      	b.n	124b8 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   124d6:	f107 0801 	add.w	r8, r7, #1
   124da:	f10d 0207 	add.w	r2, sp, #7
   124de:	4641      	mov	r1, r8
   124e0:	f7ff fd7e 	bl	11fe0 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   124e4:	2807      	cmp	r0, #7
   124e6:	d92d      	bls.n	12544 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   124e8:	f89d 6007 	ldrb.w	r6, [sp, #7]
   124ec:	2e07      	cmp	r6, #7
   124ee:	d82b      	bhi.n	12548 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   124f0:	4c17      	ldr	r4, [pc, #92]	; (12550 <ll_wl_add+0xa8>)
   124f2:	783a      	ldrb	r2, [r7, #0]
   124f4:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   124f8:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   124fc:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   12500:	4641      	mov	r1, r8
   12502:	2206      	movs	r2, #6
   12504:	3002      	adds	r0, #2
   12506:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   1250a:	f7ef fb89 	bl	1c20 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1250e:	462a      	mov	r2, r5
   12510:	4641      	mov	r1, r8
   12512:	7838      	ldrb	r0, [r7, #0]
   12514:	f7ff ff94 	bl	12440 <ll_rl_find>
   12518:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   1251a:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   1251c:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   1251e:	d80e      	bhi.n	1253e <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   12520:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   12522:	2328      	movs	r3, #40	; 0x28
   12524:	4a0b      	ldr	r2, [pc, #44]	; (12554 <ll_wl_add+0xac>)
   12526:	4358      	muls	r0, r3
   12528:	5c13      	ldrb	r3, [r2, r0]
   1252a:	f043 0320 	orr.w	r3, r3, #32
   1252e:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   12530:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   12534:	f043 0301 	orr.w	r3, r3, #1
   12538:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   1253c:	e7bc      	b.n	124b8 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1253e:	22ff      	movs	r2, #255	; 0xff
   12540:	705a      	strb	r2, [r3, #1]
   12542:	e7f5      	b.n	12530 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   12544:	2512      	movs	r5, #18
   12546:	e7b7      	b.n	124b8 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   12548:	2507      	movs	r5, #7
	return wl_add(addr);
   1254a:	e7b5      	b.n	124b8 <ll_wl_add+0x10>
   1254c:	20001980 	.word	0x20001980
   12550:	20001487 	.word	0x20001487
   12554:	20001314 	.word	0x20001314

00012558 <ctrl_rl_idx_allowed>:
{
   12558:	b513      	push	{r0, r1, r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1255a:	4b11      	ldr	r3, [pc, #68]	; (125a0 <ctrl_rl_idx_allowed+0x48>)
   1255c:	781b      	ldrb	r3, [r3, #0]
   1255e:	b1eb      	cbz	r3, 1259c <ctrl_rl_idx_allowed+0x44>
   12560:	2907      	cmp	r1, #7
   12562:	d81b      	bhi.n	1259c <ctrl_rl_idx_allowed+0x44>
   12564:	b9d0      	cbnz	r0, 1259c <ctrl_rl_idx_allowed+0x44>
	LL_ASSERT(rl[rl_idx].taken);
   12566:	2328      	movs	r3, #40	; 0x28
   12568:	4359      	muls	r1, r3
   1256a:	4b0e      	ldr	r3, [pc, #56]	; (125a4 <ctrl_rl_idx_allowed+0x4c>)
   1256c:	5c58      	ldrb	r0, [r3, r1]
   1256e:	07c2      	lsls	r2, r0, #31
   12570:	d40e      	bmi.n	12590 <ctrl_rl_idx_allowed+0x38>
   12572:	4a0d      	ldr	r2, [pc, #52]	; (125a8 <ctrl_rl_idx_allowed+0x50>)
   12574:	4b0d      	ldr	r3, [pc, #52]	; (125ac <ctrl_rl_idx_allowed+0x54>)
   12576:	9201      	str	r2, [sp, #4]
   12578:	9200      	str	r2, [sp, #0]
   1257a:	681c      	ldr	r4, [r3, #0]
   1257c:	490c      	ldr	r1, [pc, #48]	; (125b0 <ctrl_rl_idx_allowed+0x58>)
   1257e:	4b0d      	ldr	r3, [pc, #52]	; (125b4 <ctrl_rl_idx_allowed+0x5c>)
   12580:	480d      	ldr	r0, [pc, #52]	; (125b8 <ctrl_rl_idx_allowed+0x60>)
   12582:	47a0      	blx	r4
   12584:	4040      	eors	r0, r0
   12586:	f380 8811 	msr	BASEPRI, r0
   1258a:	f04f 0004 	mov.w	r0, #4
   1258e:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   12590:	0743      	lsls	r3, r0, #29
   12592:	d503      	bpl.n	1259c <ctrl_rl_idx_allowed+0x44>
   12594:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   12598:	b002      	add	sp, #8
   1259a:	bd10      	pop	{r4, pc}
		return true;
   1259c:	2001      	movs	r0, #1
   1259e:	e7fb      	b.n	12598 <ctrl_rl_idx_allowed+0x40>
   125a0:	20001454 	.word	0x20001454
   125a4:	20001314 	.word	0x20001314
   125a8:	000159e9 	.word	0x000159e9
   125ac:	20003ad4 	.word	0x20003ad4
   125b0:	00016791 	.word	0x00016791
   125b4:	000190ab 	.word	0x000190ab
   125b8:	00019119 	.word	0x00019119

000125bc <ll_rl_id_addr_get>:
{
   125bc:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   125be:	2b07      	cmp	r3, #7
{
   125c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   125c2:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   125c4:	d90e      	bls.n	125e4 <ll_rl_id_addr_get+0x28>
   125c6:	4a16      	ldr	r2, [pc, #88]	; (12620 <ll_rl_id_addr_get+0x64>)
   125c8:	4b16      	ldr	r3, [pc, #88]	; (12624 <ll_rl_id_addr_get+0x68>)
   125ca:	9201      	str	r2, [sp, #4]
   125cc:	9200      	str	r2, [sp, #0]
   125ce:	681c      	ldr	r4, [r3, #0]
   125d0:	4915      	ldr	r1, [pc, #84]	; (12628 <ll_rl_id_addr_get+0x6c>)
   125d2:	4b16      	ldr	r3, [pc, #88]	; (1262c <ll_rl_id_addr_get+0x70>)
   125d4:	4816      	ldr	r0, [pc, #88]	; (12630 <ll_rl_id_addr_get+0x74>)
	LL_ASSERT(rl[rl_idx].taken);
   125d6:	47a0      	blx	r4
   125d8:	4040      	eors	r0, r0
   125da:	f380 8811 	msr	BASEPRI, r0
   125de:	f04f 0004 	mov.w	r0, #4
   125e2:	df02      	svc	2
   125e4:	2528      	movs	r5, #40	; 0x28
   125e6:	4c13      	ldr	r4, [pc, #76]	; (12634 <ll_rl_id_addr_get+0x78>)
   125e8:	fb05 f203 	mul.w	r2, r5, r3
   125ec:	5ca2      	ldrb	r2, [r4, r2]
   125ee:	f012 0f01 	tst.w	r2, #1
   125f2:	d108      	bne.n	12606 <ll_rl_id_addr_get+0x4a>
   125f4:	4a0a      	ldr	r2, [pc, #40]	; (12620 <ll_rl_id_addr_get+0x64>)
   125f6:	4b0b      	ldr	r3, [pc, #44]	; (12624 <ll_rl_id_addr_get+0x68>)
   125f8:	9201      	str	r2, [sp, #4]
   125fa:	9200      	str	r2, [sp, #0]
   125fc:	681c      	ldr	r4, [r3, #0]
   125fe:	490a      	ldr	r1, [pc, #40]	; (12628 <ll_rl_id_addr_get+0x6c>)
   12600:	4b0a      	ldr	r3, [pc, #40]	; (1262c <ll_rl_id_addr_get+0x70>)
   12602:	480d      	ldr	r0, [pc, #52]	; (12638 <ll_rl_id_addr_get+0x7c>)
   12604:	e7e7      	b.n	125d6 <ll_rl_id_addr_get+0x1a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   12606:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1260a:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1260c:	fb05 4103 	mla	r1, r5, r3, r4
   12610:	2206      	movs	r2, #6
   12612:	3101      	adds	r1, #1
}
   12614:	b003      	add	sp, #12
   12616:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1261a:	f7ef bb01 	b.w	1c20 <memcpy>
   1261e:	bf00      	nop
   12620:	000159e9 	.word	0x000159e9
   12624:	20003ad4 	.word	0x20003ad4
   12628:	00016791 	.word	0x00016791
   1262c:	000190bf 	.word	0x000190bf
   12630:	000193ae 	.word	0x000193ae
   12634:	20001314 	.word	0x20001314
   12638:	00019119 	.word	0x00019119

0001263c <ctrl_rl_addr_allowed>:
{
   1263c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   12640:	4b1a      	ldr	r3, [pc, #104]	; (126ac <ctrl_rl_addr_allowed+0x70>)
   12642:	781b      	ldrb	r3, [r3, #0]
   12644:	b37b      	cbz	r3, 126a6 <ctrl_rl_addr_allowed+0x6a>
   12646:	7813      	ldrb	r3, [r2, #0]
   12648:	2bff      	cmp	r3, #255	; 0xff
   1264a:	d12c      	bne.n	126a6 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1264c:	4e18      	ldr	r6, [pc, #96]	; (126b0 <ctrl_rl_addr_allowed+0x74>)
   1264e:	2400      	movs	r4, #0
   12650:	f04f 0828 	mov.w	r8, #40	; 0x28
   12654:	46b6      	mov	lr, r6
   12656:	fb08 f304 	mul.w	r3, r8, r4
   1265a:	fa5f fc84 	uxtb.w	ip, r4
   1265e:	5cf7      	ldrb	r7, [r6, r3]
   12660:	f017 0f01 	tst.w	r7, #1
   12664:	eb06 0503 	add.w	r5, r6, r3
   12668:	d01a      	beq.n	126a0 <ctrl_rl_addr_allowed+0x64>
   1266a:	f3c7 1780 	ubfx	r7, r7, #6, #1
   1266e:	4287      	cmp	r7, r0
   12670:	d116      	bne.n	126a0 <ctrl_rl_addr_allowed+0x64>
   12672:	3306      	adds	r3, #6
   12674:	1e4f      	subs	r7, r1, #1
   12676:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   12678:	f815 af01 	ldrb.w	sl, [r5, #1]!
   1267c:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   12680:	45ca      	cmp	sl, r9
   12682:	d10d      	bne.n	126a0 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   12684:	429d      	cmp	r5, r3
   12686:	d1f7      	bne.n	12678 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   12688:	2328      	movs	r3, #40	; 0x28
   1268a:	435c      	muls	r4, r3
				*rl_idx = i;
   1268c:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   12690:	f81e 0004 	ldrb.w	r0, [lr, r4]
   12694:	0743      	lsls	r3, r0, #29
   12696:	d506      	bpl.n	126a6 <ctrl_rl_addr_allowed+0x6a>
   12698:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1269c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   126a0:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   126a2:	2c08      	cmp	r4, #8
   126a4:	d1d7      	bne.n	12656 <ctrl_rl_addr_allowed+0x1a>
   126a6:	2001      	movs	r0, #1
}
   126a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   126ac:	20001454 	.word	0x20001454
   126b0:	20001314 	.word	0x20001314

000126b4 <ctrl_rl_addr_resolve>:
{
   126b4:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   126b6:	4c0d      	ldr	r4, [pc, #52]	; (126ec <ctrl_rl_addr_resolve+0x38>)
   126b8:	7824      	ldrb	r4, [r4, #0]
   126ba:	b1a4      	cbz	r4, 126e6 <ctrl_rl_addr_resolve+0x32>
   126bc:	2a07      	cmp	r2, #7
   126be:	d812      	bhi.n	126e6 <ctrl_rl_addr_resolve+0x32>
   126c0:	2528      	movs	r5, #40	; 0x28
   126c2:	4c0b      	ldr	r4, [pc, #44]	; (126f0 <ctrl_rl_addr_resolve+0x3c>)
   126c4:	fb05 f602 	mul.w	r6, r5, r2
   126c8:	5da6      	ldrb	r6, [r4, r6]
   126ca:	0736      	lsls	r6, r6, #28
   126cc:	d50b      	bpl.n	126e6 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   126ce:	b150      	cbz	r0, 126e6 <ctrl_rl_addr_resolve+0x32>
   126d0:	794b      	ldrb	r3, [r1, #5]
   126d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   126d6:	2b40      	cmp	r3, #64	; 0x40
   126d8:	d105      	bne.n	126e6 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   126da:	fb05 4202 	mla	r2, r5, r2, r4
   126de:	1dd0      	adds	r0, r2, #7
}
   126e0:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   126e2:	f7ef bbb2 	b.w	1e4a <bt_rpa_irk_matches>
}
   126e6:	2000      	movs	r0, #0
   126e8:	bc70      	pop	{r4, r5, r6}
   126ea:	4770      	bx	lr
   126ec:	20001454 	.word	0x20001454
   126f0:	20001314 	.word	0x20001314

000126f4 <ctrl_rl_enabled>:
	return rl_enable;
   126f4:	4b02      	ldr	r3, [pc, #8]	; (12700 <ctrl_rl_enabled+0xc>)
   126f6:	7818      	ldrb	r0, [r3, #0]
}
   126f8:	3000      	adds	r0, #0
   126fa:	bf18      	it	ne
   126fc:	2001      	movne	r0, #1
   126fe:	4770      	bx	lr
   12700:	20001454 	.word	0x20001454

00012704 <ll_rl_pdu_adv_update>:
{
   12704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12706:	4605      	mov	r5, r0
   12708:	460c      	mov	r4, r1
				  &pdu->scan_rsp.addr[0] :
   1270a:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   1270c:	f7ff f986 	bl	11a1c <ll_adv_set_get>
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   12710:	2d07      	cmp	r5, #7
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   12712:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   12714:	d83c      	bhi.n	12790 <ll_rl_pdu_adv_update+0x8c>
   12716:	2328      	movs	r3, #40	; 0x28
   12718:	4a2a      	ldr	r2, [pc, #168]	; (127c4 <ll_rl_pdu_adv_update+0xc0>)
   1271a:	436b      	muls	r3, r5
   1271c:	18d1      	adds	r1, r2, r3
   1271e:	5cd3      	ldrb	r3, [r2, r3]
   12720:	071a      	lsls	r2, r3, #28
   12722:	d535      	bpl.n	12790 <ll_rl_pdu_adv_update+0x8c>
		LL_ASSERT(rl[idx].rpas_ready);
   12724:	079b      	lsls	r3, r3, #30
   12726:	d40e      	bmi.n	12746 <ll_rl_pdu_adv_update+0x42>
   12728:	4a27      	ldr	r2, [pc, #156]	; (127c8 <ll_rl_pdu_adv_update+0xc4>)
   1272a:	4b28      	ldr	r3, [pc, #160]	; (127cc <ll_rl_pdu_adv_update+0xc8>)
   1272c:	9201      	str	r2, [sp, #4]
   1272e:	9200      	str	r2, [sp, #0]
   12730:	681c      	ldr	r4, [r3, #0]
   12732:	4927      	ldr	r1, [pc, #156]	; (127d0 <ll_rl_pdu_adv_update+0xcc>)
   12734:	4b27      	ldr	r3, [pc, #156]	; (127d4 <ll_rl_pdu_adv_update+0xd0>)
   12736:	4828      	ldr	r0, [pc, #160]	; (127d8 <ll_rl_pdu_adv_update+0xd4>)
   12738:	47a0      	blx	r4
   1273a:	4040      	eors	r0, r0
   1273c:	f380 8811 	msr	BASEPRI, r0
   12740:	f04f 0004 	mov.w	r0, #4
   12744:	df02      	svc	2
		pdu->tx_addr = 1;
   12746:	7823      	ldrb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   12748:	6a49      	ldr	r1, [r1, #36]	; 0x24
		pdu->tx_addr = 1;
   1274a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1274e:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   12750:	2206      	movs	r2, #6
   12752:	4638      	mov	r0, r7
   12754:	f7ef fa64 	bl	1c20 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   12758:	7823      	ldrb	r3, [r4, #0]
   1275a:	f003 020f 	and.w	r2, r3, #15
   1275e:	2a01      	cmp	r2, #1
   12760:	d12d      	bne.n	127be <ll_rl_pdu_adv_update+0xba>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   12762:	2d07      	cmp	r5, #7
   12764:	f104 0008 	add.w	r0, r4, #8
   12768:	d81f      	bhi.n	127aa <ll_rl_pdu_adv_update+0xa6>
   1276a:	2228      	movs	r2, #40	; 0x28
   1276c:	4915      	ldr	r1, [pc, #84]	; (127c4 <ll_rl_pdu_adv_update+0xc0>)
   1276e:	fb02 f705 	mul.w	r7, r2, r5
   12772:	5dcf      	ldrb	r7, [r1, r7]
   12774:	077f      	lsls	r7, r7, #29
   12776:	d518      	bpl.n	127aa <ll_rl_pdu_adv_update+0xa6>
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   12778:	fb02 1105 	mla	r1, r2, r5, r1
			pdu->rx_addr = 1;
   1277c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12780:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   12782:	2206      	movs	r2, #6
   12784:	311e      	adds	r1, #30
}
   12786:	b003      	add	sp, #12
   12788:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1278c:	f7ef ba48 	b.w	1c20 <memcpy>
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   12790:	7830      	ldrb	r0, [r6, #0]
   12792:	7823      	ldrb	r3, [r4, #0]
   12794:	f3c0 1041 	ubfx	r0, r0, #5, #2
   12798:	f360 1386 	bfi	r3, r0, #6, #1
   1279c:	7023      	strb	r3, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   1279e:	4639      	mov	r1, r7
   127a0:	f000 0001 	and.w	r0, r0, #1
   127a4:	f7f5 fa7e 	bl	7ca4 <ll_addr_get>
   127a8:	e7d6      	b.n	12758 <ll_rl_pdu_adv_update+0x54>
			pdu->rx_addr = ll_adv->id_addr_type;
   127aa:	4631      	mov	r1, r6
   127ac:	7822      	ldrb	r2, [r4, #0]
   127ae:	f811 3b02 	ldrb.w	r3, [r1], #2
   127b2:	09db      	lsrs	r3, r3, #7
   127b4:	f363 12c7 	bfi	r2, r3, #7, #1
   127b8:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   127ba:	2206      	movs	r2, #6
   127bc:	e7e3      	b.n	12786 <ll_rl_pdu_adv_update+0x82>
}
   127be:	b003      	add	sp, #12
   127c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   127c2:	bf00      	nop
   127c4:	20001314 	.word	0x20001314
   127c8:	000159e9 	.word	0x000159e9
   127cc:	20003ad4 	.word	0x20003ad4
   127d0:	00016791 	.word	0x00016791
   127d4:	000190d1 	.word	0x000190d1
   127d8:	000193da 	.word	0x000193da

000127dc <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   127dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127e0:	b08d      	sub	sp, #52	; 0x34
   127e2:	9006      	str	r0, [sp, #24]
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   127e4:	f002 fb7e 	bl	14ee4 <_impl_k_uptime_get>
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   127e8:	9b06      	ldr	r3, [sp, #24]
   127ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
   127ee:	2b00      	cmp	r3, #0
   127f0:	d15d      	bne.n	128ae <ll_rl_rpa_update+0xd2>
   127f2:	4b77      	ldr	r3, [pc, #476]	; (129d0 <ll_rl_rpa_update+0x1f4>)
   127f4:	e9d3 0100 	ldrd	r0, r1, [r3]
   127f8:	1c4c      	adds	r4, r1, #1
   127fa:	bf08      	it	eq
   127fc:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   12800:	d055      	beq.n	128ae <ll_rl_rpa_update+0xd2>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   12802:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   12806:	1a1b      	subs	r3, r3, r0
   12808:	4618      	mov	r0, r3
   1280a:	4b72      	ldr	r3, [pc, #456]	; (129d4 <ll_rl_rpa_update+0x1f8>)
   1280c:	681a      	ldr	r2, [r3, #0]
   1280e:	eb64 0401 	sbc.w	r4, r4, r1
   12812:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   12814:	4290      	cmp	r0, r2
   12816:	eb74 0303 	sbcs.w	r3, r4, r3
   1281a:	bfac      	ite	ge
   1281c:	f04f 0801 	movge.w	r8, #1
   12820:	f04f 0800 	movlt.w	r8, #0
	BT_DBG("");
   12824:	4f6c      	ldr	r7, [pc, #432]	; (129d8 <ll_rl_rpa_update+0x1fc>)
   12826:	4c6d      	ldr	r4, [pc, #436]	; (129dc <ll_rl_rpa_update+0x200>)
   12828:	683d      	ldr	r5, [r7, #0]
   1282a:	4e6d      	ldr	r6, [pc, #436]	; (129e0 <ll_rl_rpa_update+0x204>)
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   1282c:	f002 fac4 	bl	14db8 <_impl_k_current_get>

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   12830:	f1a6 0b07 	sub.w	fp, r6, #7
	BT_DBG("");
   12834:	9001      	str	r0, [sp, #4]
   12836:	9402      	str	r4, [sp, #8]
   12838:	9400      	str	r4, [sp, #0]
   1283a:	4b6a      	ldr	r3, [pc, #424]	; (129e4 <ll_rl_rpa_update+0x208>)
   1283c:	496a      	ldr	r1, [pc, #424]	; (129e8 <ll_rl_rpa_update+0x20c>)
   1283e:	486b      	ldr	r0, [pc, #428]	; (129ec <ll_rl_rpa_update+0x210>)
   12840:	4622      	mov	r2, r4
   12842:	47a8      	blx	r5
   12844:	46d9      	mov	r9, fp
   12846:	2500      	movs	r5, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   12848:	2328      	movs	r3, #40	; 0x28
   1284a:	436b      	muls	r3, r5
   1284c:	f81b 3003 	ldrb.w	r3, [fp, r3]
   12850:	07da      	lsls	r2, r3, #31
   12852:	d553      	bpl.n	128fc <ll_rl_rpa_update+0x120>
   12854:	f1b8 0f00 	cmp.w	r8, #0
   12858:	d101      	bne.n	1285e <ll_rl_rpa_update+0x82>
   1285a:	0798      	lsls	r0, r3, #30
   1285c:	d44e      	bmi.n	128fc <ll_rl_rpa_update+0x120>

			if (rl[i].pirk) {
   1285e:	2328      	movs	r3, #40	; 0x28
   12860:	436b      	muls	r3, r5
   12862:	f819 3003 	ldrb.w	r3, [r9, r3]
   12866:	0759      	lsls	r1, r3, #29
   12868:	d524      	bpl.n	128b4 <ll_rl_rpa_update+0xd8>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   1286a:	7c32      	ldrb	r2, [r6, #16]
   1286c:	4b60      	ldr	r3, [pc, #384]	; (129f0 <ll_rl_rpa_update+0x214>)
   1286e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   12872:	f103 0210 	add.w	r2, r3, #16
   12876:	f10d 011f 	add.w	r1, sp, #31
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   1287a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   1287e:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   12882:	429a      	cmp	r2, r3
   12884:	d1f9      	bne.n	1287a <ll_rl_rpa_update+0x9e>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   12886:	f106 0117 	add.w	r1, r6, #23
   1288a:	a808      	add	r0, sp, #32
   1288c:	f7ef faf0 	bl	1e70 <bt_rpa_create>
				LL_ASSERT(!err);
   12890:	b180      	cbz	r0, 128b4 <ll_rl_rpa_update+0xd8>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   12892:	9401      	str	r4, [sp, #4]
   12894:	9400      	str	r4, [sp, #0]
   12896:	683c      	ldr	r4, [r7, #0]
   12898:	4b52      	ldr	r3, [pc, #328]	; (129e4 <ll_rl_rpa_update+0x208>)
   1289a:	4a50      	ldr	r2, [pc, #320]	; (129dc <ll_rl_rpa_update+0x200>)
   1289c:	4952      	ldr	r1, [pc, #328]	; (129e8 <ll_rl_rpa_update+0x20c>)
   1289e:	4855      	ldr	r0, [pc, #340]	; (129f4 <ll_rl_rpa_update+0x218>)
	ll_rl_pdu_adv_update(idx, pdu);
   128a0:	47a0      	blx	r4
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   128a2:	4040      	eors	r0, r0
   128a4:	f380 8811 	msr	BASEPRI, r0
   128a8:	f04f 0004 	mov.w	r0, #4
   128ac:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   128ae:	f04f 0801 	mov.w	r8, #1
   128b2:	e7b7      	b.n	12824 <ll_rl_rpa_update+0x48>
			if (rl[i].lirk) {
   128b4:	2328      	movs	r3, #40	; 0x28
   128b6:	436b      	muls	r3, r5
   128b8:	f819 3003 	ldrb.w	r3, [r9, r3]
   128bc:	071a      	lsls	r2, r3, #28
   128be:	d515      	bpl.n	128ec <ll_rl_rpa_update+0x110>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   128c0:	f10d 0a20 	add.w	sl, sp, #32
   128c4:	4651      	mov	r1, sl
   128c6:	4630      	mov	r0, r6
   128c8:	f7ef fad2 	bl	1e70 <bt_rpa_create>
				LL_ASSERT(!err);
   128cc:	2800      	cmp	r0, #0
   128ce:	d1e0      	bne.n	12892 <ll_rl_rpa_update+0xb6>
   128d0:	4b49      	ldr	r3, [pc, #292]	; (129f8 <ll_rl_rpa_update+0x21c>)
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   128d2:	f8c6 a01d 	str.w	sl, [r6, #29]
   128d6:	2206      	movs	r2, #6
   128d8:	fb02 3305 	mla	r3, r2, r5, r3
   128dc:	4618      	mov	r0, r3
   128de:	4651      	mov	r1, sl
   128e0:	9307      	str	r3, [sp, #28]
   128e2:	f7ef f99d 	bl	1c20 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   128e6:	9b07      	ldr	r3, [sp, #28]
   128e8:	f8c6 301d 	str.w	r3, [r6, #29]
			}

			rl[i].rpas_ready = 1;
   128ec:	2328      	movs	r3, #40	; 0x28
   128ee:	436b      	muls	r3, r5
   128f0:	f819 2003 	ldrb.w	r2, [r9, r3]
   128f4:	f042 0202 	orr.w	r2, r2, #2
   128f8:	f809 2003 	strb.w	r2, [r9, r3]
   128fc:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   128fe:	2d08      	cmp	r5, #8
   12900:	f106 0628 	add.w	r6, r6, #40	; 0x28
   12904:	d1a0      	bne.n	12848 <ll_rl_rpa_update+0x6c>
		}
	}

	if (all) {
   12906:	f1b8 0f00 	cmp.w	r8, #0
   1290a:	d004      	beq.n	12916 <ll_rl_rpa_update+0x13a>
		rpa_last_ms = now;
   1290c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   12910:	4b2f      	ldr	r3, [pc, #188]	; (129d0 <ll_rl_rpa_update+0x1f4>)
   12912:	e9c3 1200 	strd	r1, r2, [r3]
	}

	if (timeout) {
   12916:	9b06      	ldr	r3, [sp, #24]
   12918:	2b00      	cmp	r3, #0
   1291a:	d055      	beq.n	129c8 <ll_rl_rpa_update+0x1ec>
#if defined(CONFIG_BT_BROADCASTER)
		if (ll_adv_is_enabled()) {
   1291c:	f7fd fe4a 	bl	105b4 <ll_adv_is_enabled>
   12920:	2800      	cmp	r0, #0
   12922:	d051      	beq.n	129c8 <ll_rl_rpa_update+0x1ec>
	ll_adv = ll_adv_set_get();
   12924:	f7ff f87a 	bl	11a1c <ll_adv_set_get>
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   12928:	7803      	ldrb	r3, [r0, #0]
   1292a:	065b      	lsls	r3, r3, #25
	ll_adv = ll_adv_set_get();
   1292c:	4682      	mov	sl, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1292e:	d54b      	bpl.n	129c8 <ll_rl_rpa_update+0x1ec>
	radio_adv_data = radio_adv_data_get();
   12930:	f7fd fe38 	bl	105a4 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   12934:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
	if (radio_adv_data->first == radio_adv_data->last) {
   12938:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1293c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   12940:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	if (radio_adv_data->first == radio_adv_data->last) {
   12944:	42ab      	cmp	r3, r5
	radio_adv_data = radio_adv_data_get();
   12946:	4606      	mov	r6, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   12948:	eb00 0902 	add.w	r9, r0, r2
	if (radio_adv_data->first == radio_adv_data->last) {
   1294c:	d104      	bne.n	12958 <ll_rl_rpa_update+0x17c>
		last = radio_adv_data->last + 1;
   1294e:	3501      	adds	r5, #1
   12950:	b2ed      	uxtb	r5, r5
			last = 0;
   12952:	2d02      	cmp	r5, #2
   12954:	bf08      	it	eq
   12956:	2500      	moveq	r5, #0
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   12958:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1295c:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
	pdu->type = prev->type;
   12960:	5cb1      	ldrb	r1, [r6, r2]
   12962:	5cf0      	ldrb	r0, [r6, r3]
   12964:	f361 0003 	bfi	r0, r1, #0, #4
	pdu->rfu = 0;
   12968:	f36f 1004 	bfc	r0, #4, #1
   1296c:	54f0      	strb	r0, [r6, r3]
		pdu->chan_sel = prev->chan_sel;
   1296e:	5cb2      	ldrb	r2, [r6, r2]
   12970:	b2c1      	uxtb	r1, r0
   12972:	f3c2 1240 	ubfx	r2, r2, #5, #1
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   12976:	f89a 0000 	ldrb.w	r0, [sl]
		pdu->chan_sel = prev->chan_sel;
   1297a:	f362 1145 	bfi	r1, r2, #5, #1
   1297e:	54f1      	strb	r1, [r6, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   12980:	2200      	movs	r2, #0
   12982:	f10a 0102 	add.w	r1, sl, #2
   12986:	09c0      	lsrs	r0, r0, #7
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   12988:	eb06 0803 	add.w	r8, r6, r3
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   1298c:	f7ff fd58 	bl	12440 <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   12990:	2807      	cmp	r0, #7
   12992:	d907      	bls.n	129a4 <ll_rl_rpa_update+0x1c8>
	ll_rl_pdu_adv_update(idx, pdu);
   12994:	9401      	str	r4, [sp, #4]
   12996:	9400      	str	r4, [sp, #0]
   12998:	683c      	ldr	r4, [r7, #0]
   1299a:	4b18      	ldr	r3, [pc, #96]	; (129fc <ll_rl_rpa_update+0x220>)
   1299c:	4a0f      	ldr	r2, [pc, #60]	; (129dc <ll_rl_rpa_update+0x200>)
   1299e:	4912      	ldr	r1, [pc, #72]	; (129e8 <ll_rl_rpa_update+0x20c>)
   129a0:	4817      	ldr	r0, [pc, #92]	; (12a00 <ll_rl_rpa_update+0x224>)
   129a2:	e77d      	b.n	128a0 <ll_rl_rpa_update+0xc4>
   129a4:	4641      	mov	r1, r8
   129a6:	f7ff fead 	bl	12704 <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   129aa:	f899 2001 	ldrb.w	r2, [r9, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   129ae:	f109 0108 	add.w	r1, r9, #8
   129b2:	3a06      	subs	r2, #6
   129b4:	f108 0008 	add.w	r0, r8, #8
   129b8:	f7ef f932 	bl	1c20 <memcpy>
	pdu->len = prev->len;
   129bc:	f899 3001 	ldrb.w	r3, [r9, #1]
   129c0:	f888 3001 	strb.w	r3, [r8, #1]
	radio_adv_data->last = last;
   129c4:	f886 504f 	strb.w	r5, [r6, #79]	; 0x4f
			rpa_adv_refresh();
		}
#endif
	}
}
   129c8:	b00d      	add	sp, #52	; 0x34
   129ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129ce:	bf00      	nop
   129d0:	20001978 	.word	0x20001978
   129d4:	200019ac 	.word	0x200019ac
   129d8:	20003ad4 	.word	0x20003ad4
   129dc:	000159e9 	.word	0x000159e9
   129e0:	2000131b 	.word	0x2000131b
   129e4:	000190f6 	.word	0x000190f6
   129e8:	00016791 	.word	0x00016791
   129ec:	00016b52 	.word	0x00016b52
   129f0:	20001293 	.word	0x20001293
   129f4:	0001901f 	.word	0x0001901f
   129f8:	2000125a 	.word	0x2000125a
   129fc:	000190e6 	.word	0x000190e6
   12a00:	0001940e 	.word	0x0001940e

00012a04 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   12a04:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   12a06:	2001      	movs	r0, #1
   12a08:	f7ff fee8 	bl	127dc <ll_rl_rpa_update>
   12a0c:	4b03      	ldr	r3, [pc, #12]	; (12a1c <rpa_timeout+0x18>)
   12a0e:	4904      	ldr	r1, [pc, #16]	; (12a20 <rpa_timeout+0x1c>)
   12a10:	681a      	ldr	r2, [r3, #0]
   12a12:	4804      	ldr	r0, [pc, #16]	; (12a24 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   12a14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12a18:	f002 bd78 	b.w	1550c <k_delayed_work_submit_to_queue>
   12a1c:	200019ac 	.word	0x200019ac
   12a20:	20001984 	.word	0x20001984
   12a24:	200019f8 	.word	0x200019f8

00012a28 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   12a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   12a2a:	4b11      	ldr	r3, [pc, #68]	; (12a70 <ll_adv_scan_state_cb+0x48>)
	if (!rl_enable) {
   12a2c:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   12a2e:	b1a8      	cbz	r0, 12a5c <ll_adv_scan_state_cb+0x34>
	if (!rl_enable) {
   12a30:	b1db      	cbz	r3, 12a6a <ll_adv_scan_state_cb+0x42>
	BT_DBG("");
   12a32:	4b10      	ldr	r3, [pc, #64]	; (12a74 <ll_adv_scan_state_cb+0x4c>)
   12a34:	681c      	ldr	r4, [r3, #0]
   12a36:	f002 f9bf 	bl	14db8 <_impl_k_current_get>
   12a3a:	4a0f      	ldr	r2, [pc, #60]	; (12a78 <ll_adv_scan_state_cb+0x50>)
   12a3c:	9202      	str	r2, [sp, #8]
   12a3e:	9001      	str	r0, [sp, #4]
   12a40:	9200      	str	r2, [sp, #0]
   12a42:	4b0e      	ldr	r3, [pc, #56]	; (12a7c <ll_adv_scan_state_cb+0x54>)
   12a44:	490e      	ldr	r1, [pc, #56]	; (12a80 <ll_adv_scan_state_cb+0x58>)
   12a46:	480f      	ldr	r0, [pc, #60]	; (12a84 <ll_adv_scan_state_cb+0x5c>)
   12a48:	47a0      	blx	r4
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   12a4a:	4b0f      	ldr	r3, [pc, #60]	; (12a88 <ll_adv_scan_state_cb+0x60>)
   12a4c:	490f      	ldr	r1, [pc, #60]	; (12a8c <ll_adv_scan_state_cb+0x64>)
   12a4e:	681a      	ldr	r2, [r3, #0]
   12a50:	480f      	ldr	r0, [pc, #60]	; (12a90 <ll_adv_scan_state_cb+0x68>)
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
	}
}
   12a52:	b004      	add	sp, #16
   12a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12a58:	f002 bd58 	b.w	1550c <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   12a5c:	b12b      	cbz	r3, 12a6a <ll_adv_scan_state_cb+0x42>
	k_delayed_work_cancel(&rpa_work);
   12a5e:	480b      	ldr	r0, [pc, #44]	; (12a8c <ll_adv_scan_state_cb+0x64>)
}
   12a60:	b004      	add	sp, #16
   12a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_delayed_work_cancel(&rpa_work);
   12a66:	f002 bced 	b.w	15444 <k_delayed_work_cancel>
}
   12a6a:	b004      	add	sp, #16
   12a6c:	bd10      	pop	{r4, pc}
   12a6e:	bf00      	nop
   12a70:	20001454 	.word	0x20001454
   12a74:	20003ad4 	.word	0x20003ad4
   12a78:	000159e9 	.word	0x000159e9
   12a7c:	00019107 	.word	0x00019107
   12a80:	00016791 	.word	0x00016791
   12a84:	00016b52 	.word	0x00016b52
   12a88:	200019ac 	.word	0x200019ac
   12a8c:	20001984 	.word	0x20001984
   12a90:	200019f8 	.word	0x200019f8

00012a94 <ll_rl_size_get>:

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   12a94:	2008      	movs	r0, #8
   12a96:	4770      	bx	lr

00012a98 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   12a98:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   12a9a:	f7ff fb13 	bl	120c4 <rl_access_check.constprop.1>
   12a9e:	b178      	cbz	r0, 12ac0 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   12aa0:	4908      	ldr	r1, [pc, #32]	; (12ac4 <ll_rl_clear+0x2c>)
   12aa2:	2300      	movs	r3, #0
   12aa4:	2428      	movs	r4, #40	; 0x28
   12aa6:	fb04 f203 	mul.w	r2, r4, r3
   12aaa:	3301      	adds	r3, #1
   12aac:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12aae:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   12ab0:	f36f 0000 	bfc	r0, #0, #1
   12ab4:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12ab6:	d1f6      	bne.n	12aa6 <ll_rl_clear+0xe>
	peer_irk_count = 0;
   12ab8:	4b03      	ldr	r3, [pc, #12]	; (12ac8 <ll_rl_clear+0x30>)
   12aba:	2000      	movs	r0, #0
   12abc:	7018      	strb	r0, [r3, #0]
   12abe:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12ac0:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   12ac2:	bd10      	pop	{r4, pc}
   12ac4:	20001314 	.word	0x20001314
   12ac8:	2000128a 	.word	0x2000128a

00012acc <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   12acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ad0:	b085      	sub	sp, #20
   12ad2:	4607      	mov	r7, r0
   12ad4:	4689      	mov	r9, r1
   12ad6:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   12ad8:	f7ff faf4 	bl	120c4 <rl_access_check.constprop.1>
   12adc:	2800      	cmp	r0, #0
   12ade:	f000 8086 	beq.w	12bee <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   12ae2:	f107 0801 	add.w	r8, r7, #1
   12ae6:	f10d 020f 	add.w	r2, sp, #15
   12aea:	4641      	mov	r1, r8
   12aec:	7838      	ldrb	r0, [r7, #0]
   12aee:	f7ff fca7 	bl	12440 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   12af2:	2807      	cmp	r0, #7
   12af4:	d97d      	bls.n	12bf2 <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   12af6:	f89d 500f 	ldrb.w	r5, [sp, #15]
   12afa:	2d07      	cmp	r5, #7
   12afc:	d87b      	bhi.n	12bf6 <ll_rl_add+0x12a>
   12afe:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   12b02:	4c3e      	ldr	r4, [pc, #248]	; (12bfc <ll_rl_add+0x130>)
   12b04:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   12b08:	2628      	movs	r6, #40	; 0x28
   12b0a:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   12b0c:	f10b 0001 	add.w	r0, fp, #1
   12b10:	2206      	movs	r2, #6
   12b12:	4641      	mov	r1, r8
   12b14:	4420      	add	r0, r4
   12b16:	f7ef f883 	bl	1c20 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   12b1a:	7839      	ldrb	r1, [r7, #0]
   12b1c:	5da3      	ldrb	r3, [r4, r6]
   12b1e:	19a2      	adds	r2, r4, r6
   12b20:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12b24:	4648      	mov	r0, r9
   12b26:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   12b28:	9201      	str	r2, [sp, #4]
   12b2a:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12b2c:	f7f4 f909 	bl	6d42 <mem_nz>
   12b30:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12b32:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12b34:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12b38:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12b3a:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12b3c:	f7f4 f901 	bl	6d42 <mem_nz>
   12b40:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   12b42:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12b44:	f000 0001 	and.w	r0, r0, #1
   12b48:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   12b4c:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12b50:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   12b52:	d138      	bne.n	12bc6 <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   12b54:	b158      	cbz	r0, 12b6e <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   12b56:	f10b 0007 	add.w	r0, fp, #7
   12b5a:	2210      	movs	r2, #16
   12b5c:	4651      	mov	r1, sl
   12b5e:	4420      	add	r0, r4
   12b60:	f7ef f85e 	bl	1c20 <memcpy>
		rl[i].local_rpa = NULL;
   12b64:	2328      	movs	r3, #40	; 0x28
   12b66:	fb03 4305 	mla	r3, r3, r5, r4
   12b6a:	2200      	movs	r2, #0
   12b6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   12b6e:	2628      	movs	r6, #40	; 0x28
   12b70:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   12b72:	f10b 0018 	add.w	r0, fp, #24
   12b76:	2206      	movs	r2, #6
   12b78:	2100      	movs	r1, #0
   12b7a:	4420      	add	r0, r4
   12b7c:	f7ef f87c 	bl	1c78 <memset>
	rl[i].rpas_ready = 0;
   12b80:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   12b82:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   12b86:	f36f 1304 	bfc	r3, #4, #1
   12b8a:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   12b8c:	2200      	movs	r2, #0
   12b8e:	4641      	mov	r1, r8
   12b90:	7838      	ldrb	r0, [r7, #0]
   12b92:	f7ff fa25 	bl	11fe0 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   12b96:	2807      	cmp	r0, #7
   12b98:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   12b9a:	bf9d      	ittte	ls
   12b9c:	4a18      	ldrls	r2, [pc, #96]	; (12c00 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   12b9e:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   12ba2:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   12ba6:	f36f 1345 	bfchi	r3, #5, #1
   12baa:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   12bac:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   12bb0:	bf98      	it	ls
   12bb2:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   12bb4:	435d      	muls	r5, r3

	return 0;
   12bb6:	2000      	movs	r0, #0
	rl[i].taken = 1;
   12bb8:	5d63      	ldrb	r3, [r4, r5]
   12bba:	f043 0301 	orr.w	r3, r3, #1
   12bbe:	5563      	strb	r3, [r4, r5]
}
   12bc0:	b005      	add	sp, #20
   12bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   12bc6:	4b0f      	ldr	r3, [pc, #60]	; (12c04 <ll_rl_add+0x138>)
   12bc8:	7819      	ldrb	r1, [r3, #0]
   12bca:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   12bcc:	4a0e      	ldr	r2, [pc, #56]	; (12c08 <ll_rl_add+0x13c>)
   12bce:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   12bd0:	1c4a      	adds	r2, r1, #1
   12bd2:	701a      	strb	r2, [r3, #0]
   12bd4:	4b0d      	ldr	r3, [pc, #52]	; (12c0c <ll_rl_add+0x140>)
   12bd6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   12bda:	f109 0210 	add.w	r2, r9, #16
   12bde:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   12be0:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   12be4:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   12be8:	454a      	cmp	r2, r9
   12bea:	d1f9      	bne.n	12be0 <ll_rl_add+0x114>
   12bec:	e7b2      	b.n	12b54 <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12bee:	200c      	movs	r0, #12
   12bf0:	e7e6      	b.n	12bc0 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   12bf2:	2012      	movs	r0, #18
   12bf4:	e7e4      	b.n	12bc0 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   12bf6:	2007      	movs	r0, #7
   12bf8:	e7e2      	b.n	12bc0 <ll_rl_add+0xf4>
   12bfa:	bf00      	nop
   12bfc:	20001314 	.word	0x20001314
   12c00:	20001487 	.word	0x20001487
   12c04:	2000128a 	.word	0x2000128a
   12c08:	2000128b 	.word	0x2000128b
   12c0c:	20001293 	.word	0x20001293

00012c10 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   12c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c14:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   12c16:	f7ff fa55 	bl	120c4 <rl_access_check.constprop.1>
   12c1a:	2800      	cmp	r0, #0
   12c1c:	d053      	beq.n	12cc6 <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12c1e:	f109 0a01 	add.w	sl, r9, #1
   12c22:	2200      	movs	r2, #0
   12c24:	4651      	mov	r1, sl
   12c26:	f899 0000 	ldrb.w	r0, [r9]
   12c2a:	f7ff fc09 	bl	12440 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   12c2e:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12c30:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   12c32:	d84b      	bhi.n	12ccc <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   12c34:	f04f 0b28 	mov.w	fp, #40	; 0x28
   12c38:	4c26      	ldr	r4, [pc, #152]	; (12cd4 <ll_rl_remove+0xc4>)
   12c3a:	fb0b f300 	mul.w	r3, fp, r0
   12c3e:	18e2      	adds	r2, r4, r3
   12c40:	5ce3      	ldrb	r3, [r4, r3]
   12c42:	075b      	lsls	r3, r3, #29
   12c44:	d524      	bpl.n	12c90 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   12c46:	4e24      	ldr	r6, [pc, #144]	; (12cd8 <ll_rl_remove+0xc8>)
   12c48:	7835      	ldrb	r5, [r6, #0]
   12c4a:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   12c4c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   12c50:	d01b      	beq.n	12c8a <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   12c52:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   12c54:	42af      	cmp	r7, r5
   12c56:	d018      	beq.n	12c8a <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   12c58:	4820      	ldr	r0, [pc, #128]	; (12cdc <ll_rl_remove+0xcc>)
   12c5a:	2210      	movs	r2, #16
   12c5c:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   12c60:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   12c64:	f7ee ffdc 	bl	1c20 <memcpy>
   12c68:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   12c6a:	fb0b f103 	mul.w	r1, fp, r3
   12c6e:	1862      	adds	r2, r4, r1
   12c70:	5c61      	ldrb	r1, [r4, r1]
   12c72:	f011 0f01 	tst.w	r1, #1
   12c76:	b2d8      	uxtb	r0, r3
   12c78:	d021      	beq.n	12cbe <ll_rl_remove+0xae>
   12c7a:	0749      	lsls	r1, r1, #29
   12c7c:	d51f      	bpl.n	12cbe <ll_rl_remove+0xae>
   12c7e:	7dd1      	ldrb	r1, [r2, #23]
   12c80:	42a9      	cmp	r1, r5
   12c82:	d11c      	bne.n	12cbe <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   12c84:	4b16      	ldr	r3, [pc, #88]	; (12ce0 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   12c86:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   12c88:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   12c8a:	7833      	ldrb	r3, [r6, #0]
   12c8c:	3b01      	subs	r3, #1
   12c8e:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   12c90:	2200      	movs	r2, #0
   12c92:	4651      	mov	r1, sl
   12c94:	f899 0000 	ldrb.w	r0, [r9]
   12c98:	f7ff f9a2 	bl	11fe0 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   12c9c:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   12c9e:	bf9f      	itttt	ls
   12ca0:	4b10      	ldrls	r3, [pc, #64]	; (12ce4 <ll_rl_remove+0xd4>)
   12ca2:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   12ca6:	23ff      	movls	r3, #255	; 0xff
   12ca8:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   12caa:	2028      	movs	r0, #40	; 0x28
   12cac:	fb00 f008 	mul.w	r0, r0, r8
   12cb0:	5c23      	ldrb	r3, [r4, r0]
   12cb2:	f36f 0300 	bfc	r3, #0, #1
   12cb6:	5423      	strb	r3, [r4, r0]
		return 0;
   12cb8:	2000      	movs	r0, #0
   12cba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cbe:	3301      	adds	r3, #1
				for (k = 0;
   12cc0:	2b08      	cmp	r3, #8
   12cc2:	d1d2      	bne.n	12c6a <ll_rl_remove+0x5a>
   12cc4:	e7e1      	b.n	12c8a <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12cc6:	200c      	movs	r0, #12
   12cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12ccc:	2002      	movs	r0, #2
}
   12cce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cd2:	bf00      	nop
   12cd4:	20001314 	.word	0x20001314
   12cd8:	2000128a 	.word	0x2000128a
   12cdc:	20001293 	.word	0x20001293
   12ce0:	2000128b 	.word	0x2000128b
   12ce4:	20001487 	.word	0x20001487

00012ce8 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   12ce8:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   12cea:	795c      	ldrb	r4, [r3, #5]
   12cec:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   12cf0:	2c40      	cmp	r4, #64	; 0x40
{
   12cf2:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   12cf4:	d117      	bne.n	12d26 <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   12cf6:	b119      	cbz	r1, 12d00 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   12cf8:	2200      	movs	r2, #0
   12cfa:	f7ff fba1 	bl	12440 <ll_rl_find>
   12cfe:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   12d00:	2a07      	cmp	r2, #7
   12d02:	d810      	bhi.n	12d26 <ll_rl_crpa_set+0x3e>
   12d04:	2128      	movs	r1, #40	; 0x28
   12d06:	4c08      	ldr	r4, [pc, #32]	; (12d28 <ll_rl_crpa_set+0x40>)
   12d08:	fb01 f302 	mul.w	r3, r1, r2
   12d0c:	5ce3      	ldrb	r3, [r4, r3]
   12d0e:	07db      	lsls	r3, r3, #31
   12d10:	d509      	bpl.n	12d26 <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   12d12:	2018      	movs	r0, #24
   12d14:	fb11 0002 	smlabb	r0, r1, r2, r0
   12d18:	4420      	add	r0, r4
   12d1a:	4629      	mov	r1, r5
   12d1c:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   12d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   12d22:	f7ee bf7d 	b.w	1c20 <memcpy>
   12d26:	bd70      	pop	{r4, r5, r6, pc}
   12d28:	20001314 	.word	0x20001314

00012d2c <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   12d2c:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12d2e:	2200      	movs	r2, #0
{
   12d30:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12d32:	1c41      	adds	r1, r0, #1
   12d34:	7800      	ldrb	r0, [r0, #0]
   12d36:	f7ff fb83 	bl	12440 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   12d3a:	2807      	cmp	r0, #7
   12d3c:	d901      	bls.n	12d42 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12d3e:	2002      	movs	r0, #2
   12d40:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   12d42:	2428      	movs	r4, #40	; 0x28
   12d44:	2318      	movs	r3, #24
   12d46:	fb14 3000 	smlabb	r0, r4, r0, r3
   12d4a:	4c07      	ldr	r4, [pc, #28]	; (12d68 <ll_rl_crpa_get+0x3c>)
   12d4c:	4404      	add	r4, r0
   12d4e:	2106      	movs	r1, #6
   12d50:	4620      	mov	r0, r4
   12d52:	f7f3 fff6 	bl	6d42 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   12d56:	2800      	cmp	r0, #0
   12d58:	d0f1      	beq.n	12d3e <ll_rl_crpa_get+0x12>
   12d5a:	2206      	movs	r2, #6
   12d5c:	4621      	mov	r1, r4
   12d5e:	4628      	mov	r0, r5
   12d60:	f7ee ff5e 	bl	1c20 <memcpy>
			return 0;
   12d64:	2000      	movs	r0, #0
}
   12d66:	bd38      	pop	{r3, r4, r5, pc}
   12d68:	20001314 	.word	0x20001314

00012d6c <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   12d6c:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12d6e:	2200      	movs	r2, #0
{
   12d70:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12d72:	1c41      	adds	r1, r0, #1
   12d74:	7800      	ldrb	r0, [r0, #0]
   12d76:	f7ff fb63 	bl	12440 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   12d7a:	2807      	cmp	r0, #7
   12d7c:	d80a      	bhi.n	12d94 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   12d7e:	4b06      	ldr	r3, [pc, #24]	; (12d98 <ll_rl_lrpa_get+0x2c>)
   12d80:	2228      	movs	r2, #40	; 0x28
   12d82:	fb02 3000 	mla	r0, r2, r0, r3
   12d86:	2206      	movs	r2, #6
   12d88:	6a41      	ldr	r1, [r0, #36]	; 0x24
   12d8a:	4620      	mov	r0, r4
   12d8c:	f7ee ff48 	bl	1c20 <memcpy>
		return 0;
   12d90:	2000      	movs	r0, #0
   12d92:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12d94:	2002      	movs	r0, #2
}
   12d96:	bd10      	pop	{r4, pc}
   12d98:	20001314 	.word	0x20001314

00012d9c <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   12d9c:	b510      	push	{r4, lr}
   12d9e:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   12da0:	f7ff f990 	bl	120c4 <rl_access_check.constprop.1>
   12da4:	b140      	cbz	r0, 12db8 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   12da6:	b11c      	cbz	r4, 12db0 <ll_rl_enable+0x14>
   12da8:	2c01      	cmp	r4, #1
   12daa:	d001      	beq.n	12db0 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   12dac:	2012      	movs	r0, #18
	}

	return 0;
}
   12dae:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   12db0:	4b02      	ldr	r3, [pc, #8]	; (12dbc <ll_rl_enable+0x20>)
   12db2:	701c      	strb	r4, [r3, #0]
	return 0;
   12db4:	2000      	movs	r0, #0
		break;
   12db6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12db8:	200c      	movs	r0, #12
   12dba:	bd10      	pop	{r4, pc}
   12dbc:	20001454 	.word	0x20001454

00012dc0 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   12dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12dc4:	4358      	muls	r0, r3
   12dc6:	4b01      	ldr	r3, [pc, #4]	; (12dcc <ll_rl_timeout_set+0xc>)
   12dc8:	6018      	str	r0, [r3, #0]
   12dca:	4770      	bx	lr
   12dcc:	200019ac 	.word	0x200019ac

00012dd0 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   12dd0:	b538      	push	{r3, r4, r5, lr}
   12dd2:	4605      	mov	r5, r0
   12dd4:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   12dd6:	f7ff f975 	bl	120c4 <rl_access_check.constprop.1>
   12dda:	b1d8      	cbz	r0, 12e14 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12ddc:	2200      	movs	r2, #0
   12dde:	1c69      	adds	r1, r5, #1
   12de0:	7828      	ldrb	r0, [r5, #0]
   12de2:	f7ff fb2d 	bl	12440 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   12de6:	2807      	cmp	r0, #7
   12de8:	d816      	bhi.n	12e18 <ll_priv_mode_set+0x48>
		switch (mode) {
   12dea:	b11c      	cbz	r4, 12df4 <ll_priv_mode_set+0x24>
   12dec:	2c01      	cmp	r4, #1
   12dee:	d00a      	beq.n	12e06 <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   12df0:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   12df2:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   12df4:	2328      	movs	r3, #40	; 0x28
   12df6:	4a09      	ldr	r2, [pc, #36]	; (12e1c <ll_priv_mode_set+0x4c>)
   12df8:	4358      	muls	r0, r3
   12dfa:	5c13      	ldrb	r3, [r2, r0]
   12dfc:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   12e00:	5413      	strb	r3, [r2, r0]
	return 0;
   12e02:	2000      	movs	r0, #0
			break;
   12e04:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   12e06:	2328      	movs	r3, #40	; 0x28
   12e08:	4a04      	ldr	r2, [pc, #16]	; (12e1c <ll_priv_mode_set+0x4c>)
   12e0a:	4358      	muls	r0, r3
   12e0c:	5c13      	ldrb	r3, [r2, r0]
   12e0e:	f043 0310 	orr.w	r3, r3, #16
   12e12:	e7f5      	b.n	12e00 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12e14:	200c      	movs	r0, #12
   12e16:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12e18:	2002      	movs	r0, #2
   12e1a:	bd38      	pop	{r3, r4, r5, pc}
   12e1c:	20001314 	.word	0x20001314

00012e20 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   12e20:	4a19      	ldr	r2, [pc, #100]	; (12e88 <ll_filter_reset+0x68>)
   12e22:	2300      	movs	r3, #0
{
   12e24:	b430      	push	{r4, r5}
	wl_anon = 0;
   12e26:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   12e28:	4a18      	ldr	r2, [pc, #96]	; (12e8c <ll_filter_reset+0x6c>)
   12e2a:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   12e2e:	f36f 0100 	bfc	r1, #0, #1
   12e32:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   12e36:	3301      	adds	r3, #1
   12e38:	2b08      	cmp	r3, #8
   12e3a:	d1f6      	bne.n	12e2a <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   12e3c:	4a14      	ldr	r2, [pc, #80]	; (12e90 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12e3e:	4915      	ldr	r1, [pc, #84]	; (12e94 <ll_filter_reset+0x74>)
	rl_enable = 0;
   12e40:	2300      	movs	r3, #0
   12e42:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12e44:	4a14      	ldr	r2, [pc, #80]	; (12e98 <ll_filter_reset+0x78>)
   12e46:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   12e48:	4a14      	ldr	r2, [pc, #80]	; (12e9c <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   12e4a:	4915      	ldr	r1, [pc, #84]	; (12ea0 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   12e4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12e50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12e54:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   12e58:	2528      	movs	r5, #40	; 0x28
   12e5a:	fb05 f203 	mul.w	r2, r5, r3
   12e5e:	3301      	adds	r3, #1
   12e60:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12e62:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   12e64:	f36f 0400 	bfc	r4, #0, #1
   12e68:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12e6a:	d1f6      	bne.n	12e5a <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   12e6c:	4b0d      	ldr	r3, [pc, #52]	; (12ea4 <ll_filter_reset+0x84>)
   12e6e:	2200      	movs	r2, #0
   12e70:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   12e72:	b120      	cbz	r0, 12e7e <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   12e74:	490c      	ldr	r1, [pc, #48]	; (12ea8 <ll_filter_reset+0x88>)
   12e76:	480d      	ldr	r0, [pc, #52]	; (12eac <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   12e78:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   12e7a:	f002 bad3 	b.w	15424 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   12e7e:	480b      	ldr	r0, [pc, #44]	; (12eac <ll_filter_reset+0x8c>)
}
   12e80:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   12e82:	f002 badf 	b.w	15444 <k_delayed_work_cancel>
   12e86:	bf00      	nop
   12e88:	20001980 	.word	0x20001980
   12e8c:	20001487 	.word	0x20001487
   12e90:	20001454 	.word	0x20001454
   12e94:	000dbba0 	.word	0x000dbba0
   12e98:	200019ac 	.word	0x200019ac
   12e9c:	20001978 	.word	0x20001978
   12ea0:	20001314 	.word	0x20001314
   12ea4:	2000128a 	.word	0x2000128a
   12ea8:	00012a05 	.word	0x00012a05
   12eac:	20001984 	.word	0x20001984

00012eb0 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   12eb0:	4b05      	ldr	r3, [pc, #20]	; (12ec8 <cntr_init+0x18>)
   12eb2:	2200      	movs	r2, #0
   12eb4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   12eb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   12ebc:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   12ec0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   12ec4:	4770      	bx	lr
   12ec6:	bf00      	nop
   12ec8:	4000b000 	.word	0x4000b000

00012ecc <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   12ecc:	4a04      	ldr	r2, [pc, #16]	; (12ee0 <cntr_start+0x14>)
   12ece:	7813      	ldrb	r3, [r2, #0]
   12ed0:	1c59      	adds	r1, r3, #1
   12ed2:	7011      	strb	r1, [r2, #0]
   12ed4:	2001      	movs	r0, #1
   12ed6:	b913      	cbnz	r3, 12ede <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   12ed8:	4a02      	ldr	r2, [pc, #8]	; (12ee4 <cntr_start+0x18>)
   12eda:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   12edc:	4618      	mov	r0, r3
}
   12ede:	4770      	bx	lr
   12ee0:	200014f9 	.word	0x200014f9
   12ee4:	4000b000 	.word	0x4000b000

00012ee8 <cntr_stop>:

u32_t cntr_stop(void)
{
   12ee8:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_refcount);
   12eea:	4b0e      	ldr	r3, [pc, #56]	; (12f24 <cntr_stop+0x3c>)
   12eec:	7818      	ldrb	r0, [r3, #0]
   12eee:	b970      	cbnz	r0, 12f0e <cntr_stop+0x26>
   12ef0:	4a0d      	ldr	r2, [pc, #52]	; (12f28 <cntr_stop+0x40>)
   12ef2:	4b0e      	ldr	r3, [pc, #56]	; (12f2c <cntr_stop+0x44>)
   12ef4:	9201      	str	r2, [sp, #4]
   12ef6:	9200      	str	r2, [sp, #0]
   12ef8:	681c      	ldr	r4, [r3, #0]
   12efa:	490d      	ldr	r1, [pc, #52]	; (12f30 <cntr_stop+0x48>)
   12efc:	4b0d      	ldr	r3, [pc, #52]	; (12f34 <cntr_stop+0x4c>)
   12efe:	480e      	ldr	r0, [pc, #56]	; (12f38 <cntr_stop+0x50>)
   12f00:	47a0      	blx	r4
   12f02:	4040      	eors	r0, r0
   12f04:	f380 8811 	msr	BASEPRI, r0
   12f08:	f04f 0004 	mov.w	r0, #4
   12f0c:	df02      	svc	2

	if (--_refcount) {
   12f0e:	3801      	subs	r0, #1
   12f10:	b2c0      	uxtb	r0, r0
   12f12:	7018      	strb	r0, [r3, #0]
   12f14:	2301      	movs	r3, #1
   12f16:	b918      	cbnz	r0, 12f20 <cntr_stop+0x38>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   12f18:	4a08      	ldr	r2, [pc, #32]	; (12f3c <cntr_stop+0x54>)
   12f1a:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   12f1c:	b002      	add	sp, #8
   12f1e:	bd10      	pop	{r4, pc}
		return 1;
   12f20:	4618      	mov	r0, r3
   12f22:	e7fb      	b.n	12f1c <cntr_stop+0x34>
   12f24:	200014f9 	.word	0x200014f9
   12f28:	000159e9 	.word	0x000159e9
   12f2c:	20003ad4 	.word	0x20003ad4
   12f30:	00016791 	.word	0x00016791
   12f34:	000194d3 	.word	0x000194d3
   12f38:	000194dd 	.word	0x000194dd
   12f3c:	4000b000 	.word	0x4000b000

00012f40 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   12f40:	4b01      	ldr	r3, [pc, #4]	; (12f48 <cntr_cnt_get+0x8>)
   12f42:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   12f46:	4770      	bx	lr
   12f48:	4000b000 	.word	0x4000b000

00012f4c <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   12f4c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   12f50:	4b01      	ldr	r3, [pc, #4]	; (12f58 <cntr_cmp_set+0xc>)
   12f52:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   12f56:	4770      	bx	lr
   12f58:	4000b000 	.word	0x4000b000

00012f5c <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   12f5c:	4b11      	ldr	r3, [pc, #68]	; (12fa4 <do_ecb+0x48>)
{
   12f5e:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   12f60:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   12f62:	2500      	movs	r5, #0
   12f64:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   12f66:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   12f68:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   12f6c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   12f70:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   12f74:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   12f76:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   12f7a:	b934      	cbnz	r4, 12f8a <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12f7c:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   12f80:	b91c      	cbnz	r4, 12f8a <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   12f82:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12f86:	2c00      	cmp	r4, #0
   12f88:	d1f5      	bne.n	12f76 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   12f8a:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   12f8c:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   12f90:	2c00      	cmp	r4, #0
   12f92:	d1e8      	bne.n	12f66 <do_ecb+0xa>
   12f94:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   12f98:	2e00      	cmp	r6, #0
   12f9a:	d0e4      	beq.n	12f66 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   12f9c:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   12fa0:	bd70      	pop	{r4, r5, r6, pc}
   12fa2:	bf00      	nop
   12fa4:	4000e000 	.word	0x4000e000

00012fa8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   12fa8:	b570      	push	{r4, r5, r6, lr}
   12faa:	b08c      	sub	sp, #48	; 0x30
   12fac:	460e      	mov	r6, r1
   12fae:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12fb0:	4601      	mov	r1, r0
   12fb2:	2210      	movs	r2, #16
   12fb4:	4668      	mov	r0, sp
{
   12fb6:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12fb8:	f7f3 feb4 	bl	6d24 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   12fbc:	2210      	movs	r2, #16
   12fbe:	eb0d 0002 	add.w	r0, sp, r2
   12fc2:	4631      	mov	r1, r6
   12fc4:	f7f3 feae 	bl	6d24 <mem_rcopy>

	do_ecb(&ecb);
   12fc8:	4668      	mov	r0, sp
   12fca:	f7ff ffc7 	bl	12f5c <do_ecb>

	if (cipher_text_le) {
   12fce:	b125      	cbz	r5, 12fda <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   12fd0:	2210      	movs	r2, #16
   12fd2:	a908      	add	r1, sp, #32
   12fd4:	4628      	mov	r0, r5
   12fd6:	f7f3 fea5 	bl	6d24 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   12fda:	b124      	cbz	r4, 12fe6 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   12fdc:	2210      	movs	r2, #16
   12fde:	a908      	add	r1, sp, #32
   12fe0:	4620      	mov	r0, r4
   12fe2:	f7ee fe1d 	bl	1c20 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   12fe6:	b00c      	add	sp, #48	; 0x30
   12fe8:	bd70      	pop	{r4, r5, r6, pc}
	...

00012fec <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   12fec:	4b07      	ldr	r3, [pc, #28]	; (1300c <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   12fee:	4a08      	ldr	r2, [pc, #32]	; (13010 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   12ff0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   12ff4:	4907      	ldr	r1, [pc, #28]	; (13014 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   12ff6:	4a08      	ldr	r2, [pc, #32]	; (13018 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   12ff8:	2800      	cmp	r0, #0
   12ffa:	bf14      	ite	ne
   12ffc:	4610      	movne	r0, r2
   12ffe:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   13000:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   13002:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   13006:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1300a:	4770      	bx	lr
   1300c:	4001f000 	.word	0x4001f000
   13010:	40008140 	.word	0x40008140
   13014:	40001004 	.word	0x40001004
   13018:	40001000 	.word	0x40001000

0001301c <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   1301c:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1301e:	4e2c      	ldr	r6, [pc, #176]	; (130d0 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   13020:	4f2c      	ldr	r7, [pc, #176]	; (130d4 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   13022:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   13024:	4b2c      	ldr	r3, [pc, #176]	; (130d8 <sw_switch.isra.9+0xbc>)
   13026:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   1302a:	b22b      	sxth	r3, r5
   1302c:	00dc      	lsls	r4, r3, #3
   1302e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   13032:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   13036:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1303a:	f105 040b 	add.w	r4, r5, #11
   1303e:	b2e4      	uxtb	r4, r4
   13040:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   13042:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   13046:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1304a:	3fc0      	subs	r7, #192	; 0xc0
   1304c:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   13050:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   13054:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   13058:	2800      	cmp	r0, #0
   1305a:	d034      	beq.n	130c6 <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   1305c:	f24a 075a 	movw	r7, #41050	; 0xa05a
   13060:	f649 4040 	movw	r0, #40000	; 0x9c40
   13064:	2a02      	cmp	r2, #2
   13066:	bf0c      	ite	eq
   13068:	4602      	moveq	r2, r0
   1306a:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   1306c:	f242 47b8 	movw	r7, #9400	; 0x24b8
   13070:	f241 504a 	movw	r0, #5450	; 0x154a
   13074:	2902      	cmp	r1, #2
   13076:	bf18      	it	ne
   13078:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   1307a:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   1307e:	4401      	add	r1, r0
   13080:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13084:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   13088:	4a14      	ldr	r2, [pc, #80]	; (130dc <sw_switch.isra.9+0xc0>)
   1308a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   1308e:	009b      	lsls	r3, r3, #2
   13090:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13094:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   13098:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   1309c:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   1309e:	bf8b      	itete	hi
   130a0:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   130a4:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   130a6:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   130a8:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   130ac:	bf88      	it	hi
   130ae:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   130b2:	4b08      	ldr	r3, [pc, #32]	; (130d4 <sw_switch.isra.9+0xb8>)
   130b4:	f44f 6290 	mov.w	r2, #1152	; 0x480
   130b8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   130bc:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   130be:	f003 0301 	and.w	r3, r3, #1
   130c2:	7033      	strb	r3, [r6, #0]
   130c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   130c6:	4a06      	ldr	r2, [pc, #24]	; (130e0 <sw_switch.isra.9+0xc4>)
   130c8:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   130cc:	212d      	movs	r1, #45	; 0x2d
   130ce:	e7de      	b.n	1308e <sw_switch.isra.9+0x72>
   130d0:	2000171c 	.word	0x2000171c
   130d4:	4001f000 	.word	0x4001f000
   130d8:	4000110c 	.word	0x4000110c
   130dc:	40001000 	.word	0x40001000
   130e0:	40001004 	.word	0x40001004

000130e4 <isr_radio>:
	if (sfp_radio_isr) {
   130e4:	4b02      	ldr	r3, [pc, #8]	; (130f0 <isr_radio+0xc>)
   130e6:	681b      	ldr	r3, [r3, #0]
   130e8:	b103      	cbz	r3, 130ec <isr_radio+0x8>
		sfp_radio_isr();
   130ea:	4718      	bx	r3
   130ec:	4770      	bx	lr
   130ee:	bf00      	nop
   130f0:	20001718 	.word	0x20001718

000130f4 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   130f4:	4b06      	ldr	r3, [pc, #24]	; (13110 <radio_isr_set+0x1c>)
   130f6:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   130f8:	4b06      	ldr	r3, [pc, #24]	; (13114 <radio_isr_set+0x20>)
   130fa:	2210      	movs	r2, #16
   130fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13100:	4b05      	ldr	r3, [pc, #20]	; (13118 <radio_isr_set+0x24>)
   13102:	2202      	movs	r2, #2
   13104:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   13108:	2001      	movs	r0, #1
   1310a:	f7ee bbab 	b.w	1864 <_arch_irq_enable>
   1310e:	bf00      	nop
   13110:	20001718 	.word	0x20001718
   13114:	40001000 	.word	0x40001000
   13118:	e000e100 	.word	0xe000e100

0001311c <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1311c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   13124:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   13126:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1312a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1312e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   13132:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   13136:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1313a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1313e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   13142:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   13146:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1314a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1314e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   13152:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   13156:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1315a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   1315e:	4770      	bx	lr

00013160 <radio_reset>:
{
   13160:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   13162:	2001      	movs	r0, #1
   13164:	f7ee fb8e 	bl	1884 <_arch_irq_disable>
	NRF_RADIO->POWER =
   13168:	4b08      	ldr	r3, [pc, #32]	; (1318c <radio_reset+0x2c>)
   1316a:	2200      	movs	r2, #0
   1316c:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   13170:	2201      	movs	r2, #1
   13172:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   13176:	4a06      	ldr	r2, [pc, #24]	; (13190 <radio_reset+0x30>)
   13178:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   1317a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1317e:	f023 0301 	bic.w	r3, r3, #1
   13182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   13186:	6013      	str	r3, [r2, #0]
   13188:	bd08      	pop	{r3, pc}
   1318a:	bf00      	nop
   1318c:	40001000 	.word	0x40001000
   13190:	40001774 	.word	0x40001774

00013194 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   13194:	4b06      	ldr	r3, [pc, #24]	; (131b0 <radio_phy_set+0x1c>)
	switch (phy) {
   13196:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   13198:	bf0c      	ite	eq
   1319a:	2204      	moveq	r2, #4
   1319c:	2203      	movne	r2, #3
   1319e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   131a2:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   131a6:	f042 0201 	orr.w	r2, r2, #1
   131aa:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   131ae:	4770      	bx	lr
   131b0:	40001000 	.word	0x40001000

000131b4 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   131b4:	4b01      	ldr	r3, [pc, #4]	; (131bc <radio_tx_power_set+0x8>)
   131b6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   131ba:	4770      	bx	lr
   131bc:	40001000 	.word	0x40001000

000131c0 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   131c0:	4b01      	ldr	r3, [pc, #4]	; (131c8 <radio_freq_chan_set+0x8>)
   131c2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   131c6:	4770      	bx	lr
   131c8:	40001000 	.word	0x40001000

000131cc <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   131cc:	4b07      	ldr	r3, [pc, #28]	; (131ec <radio_whiten_iv_set+0x20>)
   131ce:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   131d2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   131d6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   131da:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   131de:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   131e2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   131e6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   131ea:	4770      	bx	lr
   131ec:	40001000 	.word	0x40001000

000131f0 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   131f0:	4a0a      	ldr	r2, [pc, #40]	; (1321c <radio_aa_set+0x2c>)
   131f2:	2300      	movs	r3, #0
   131f4:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   131f8:	2301      	movs	r3, #1
   131fa:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   131fe:	78c3      	ldrb	r3, [r0, #3]
   13200:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   13204:	7843      	ldrb	r3, [r0, #1]
   13206:	7881      	ldrb	r1, [r0, #2]
   13208:	041b      	lsls	r3, r3, #16
   1320a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1320e:	7801      	ldrb	r1, [r0, #0]
   13210:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   13214:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   13218:	4770      	bx	lr
   1321a:	bf00      	nop
   1321c:	40001000 	.word	0x40001000

00013220 <radio_pkt_configure>:
	switch (phy) {
   13220:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   13224:	2b02      	cmp	r3, #2
{
   13226:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   13228:	bf0c      	ite	eq
   1322a:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   1322e:	2400      	movne	r4, #0
	if (dc) {
   13230:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   13232:	f1c0 0308 	rsb	r3, r0, #8
   13236:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1323a:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1323e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   13242:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   13246:	4a0b      	ldr	r2, [pc, #44]	; (13274 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   13248:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1324c:	bf48      	it	mi
   1324e:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   13252:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   13254:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   13258:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1325c:	4b06      	ldr	r3, [pc, #24]	; (13278 <radio_pkt_configure+0x58>)
   1325e:	4003      	ands	r3, r0
   13260:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   13264:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   13268:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   1326c:	4319      	orrs	r1, r3
   1326e:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   13272:	bd10      	pop	{r4, pc}
   13274:	40001000 	.word	0x40001000
   13278:	fef80000 	.word	0xfef80000

0001327c <radio_pkt_rx_set>:
   1327c:	4b01      	ldr	r3, [pc, #4]	; (13284 <radio_pkt_rx_set+0x8>)
   1327e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   13282:	4770      	bx	lr
   13284:	40001000 	.word	0x40001000

00013288 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   13288:	4b01      	ldr	r3, [pc, #4]	; (13290 <radio_pkt_tx_set+0x8>)
   1328a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1328e:	4770      	bx	lr
   13290:	40001000 	.word	0x40001000

00013294 <radio_tx_ready_delay_get>:
	switch (phy) {
   13294:	2802      	cmp	r0, #2
}
   13296:	bf0c      	ite	eq
   13298:	2028      	moveq	r0, #40	; 0x28
   1329a:	2029      	movne	r0, #41	; 0x29
   1329c:	4770      	bx	lr

0001329e <radio_tx_chain_delay_get>:
}
   1329e:	2001      	movs	r0, #1
   132a0:	4770      	bx	lr

000132a2 <radio_rx_ready_delay_get>:
}
   132a2:	2029      	movs	r0, #41	; 0x29
   132a4:	4770      	bx	lr

000132a6 <radio_rx_chain_delay_get>:
	switch (phy) {
   132a6:	2802      	cmp	r0, #2
}
   132a8:	bf0c      	ite	eq
   132aa:	2006      	moveq	r0, #6
   132ac:	200a      	movne	r0, #10
   132ae:	4770      	bx	lr

000132b0 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   132b0:	4b01      	ldr	r3, [pc, #4]	; (132b8 <radio_rx_enable+0x8>)
   132b2:	2201      	movs	r2, #1
   132b4:	605a      	str	r2, [r3, #4]
   132b6:	4770      	bx	lr
   132b8:	40001000 	.word	0x40001000

000132bc <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   132bc:	4b01      	ldr	r3, [pc, #4]	; (132c4 <radio_tx_enable+0x8>)
   132be:	2201      	movs	r2, #1
   132c0:	601a      	str	r2, [r3, #0]
   132c2:	4770      	bx	lr
   132c4:	40001000 	.word	0x40001000

000132c8 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   132c8:	4a07      	ldr	r2, [pc, #28]	; (132e8 <radio_disable+0x20>)
   132ca:	f44f 6390 	mov.w	r3, #1152	; 0x480
   132ce:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   132d2:	2301      	movs	r3, #1
   132d4:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   132d6:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   132d8:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   132dc:	2100      	movs	r1, #0
   132de:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   132e2:	6113      	str	r3, [r2, #16]
   132e4:	4770      	bx	lr
   132e6:	bf00      	nop
   132e8:	4001f000 	.word	0x4001f000

000132ec <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   132ec:	4b04      	ldr	r3, [pc, #16]	; (13300 <radio_status_reset+0x14>)
   132ee:	2200      	movs	r2, #0
   132f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   132f4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   132f8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   132fc:	4770      	bx	lr
   132fe:	bf00      	nop
   13300:	40001000 	.word	0x40001000

00013304 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   13304:	4b03      	ldr	r3, [pc, #12]	; (13314 <radio_is_ready+0x10>)
   13306:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1330a:	3000      	adds	r0, #0
   1330c:	bf18      	it	ne
   1330e:	2001      	movne	r0, #1
   13310:	4770      	bx	lr
   13312:	bf00      	nop
   13314:	40001000 	.word	0x40001000

00013318 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   13318:	4b03      	ldr	r3, [pc, #12]	; (13328 <radio_is_done+0x10>)
   1331a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1331e:	3000      	adds	r0, #0
   13320:	bf18      	it	ne
   13322:	2001      	movne	r0, #1
   13324:	4770      	bx	lr
   13326:	bf00      	nop
   13328:	40001000 	.word	0x40001000

0001332c <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1332c:	4b03      	ldr	r3, [pc, #12]	; (1333c <radio_is_idle+0x10>)
   1332e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   13332:	fab0 f080 	clz	r0, r0
   13336:	0940      	lsrs	r0, r0, #5
   13338:	4770      	bx	lr
   1333a:	bf00      	nop
   1333c:	40001000 	.word	0x40001000

00013340 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   13340:	4b04      	ldr	r3, [pc, #16]	; (13354 <radio_crc_configure+0x14>)
   13342:	f240 1203 	movw	r2, #259	; 0x103
   13346:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1334a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1334e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   13352:	4770      	bx	lr
   13354:	40001000 	.word	0x40001000

00013358 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   13358:	4b03      	ldr	r3, [pc, #12]	; (13368 <radio_crc_is_valid+0x10>)
   1335a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1335e:	3000      	adds	r0, #0
   13360:	bf18      	it	ne
   13362:	2001      	movne	r0, #1
   13364:	4770      	bx	lr
   13366:	bf00      	nop
   13368:	40001000 	.word	0x40001000

0001336c <radio_pkt_empty_get>:
}
   1336c:	4800      	ldr	r0, [pc, #0]	; (13370 <radio_pkt_empty_get+0x4>)
   1336e:	4770      	bx	lr
   13370:	2000160c 	.word	0x2000160c

00013374 <radio_pkt_scratch_get>:
}
   13374:	4800      	ldr	r0, [pc, #0]	; (13378 <radio_pkt_scratch_get+0x4>)
   13376:	4770      	bx	lr
   13378:	20001610 	.word	0x20001610

0001337c <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1337c:	4b04      	ldr	r3, [pc, #16]	; (13390 <radio_switch_complete_and_rx+0x14>)
   1337e:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   13380:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   13382:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   13386:	4602      	mov	r2, r0
   13388:	4608      	mov	r0, r1
   1338a:	f7ff be47 	b.w	1301c <sw_switch.isra.9>
   1338e:	bf00      	nop
   13390:	40001000 	.word	0x40001000

00013394 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   13394:	4b03      	ldr	r3, [pc, #12]	; (133a4 <radio_switch_complete_and_tx+0x10>)
   13396:	2103      	movs	r1, #3
   13398:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1339c:	4601      	mov	r1, r0
   1339e:	2001      	movs	r0, #1
   133a0:	f7ff be3c 	b.w	1301c <sw_switch.isra.9>
   133a4:	40001000 	.word	0x40001000

000133a8 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   133a8:	4b05      	ldr	r3, [pc, #20]	; (133c0 <radio_switch_complete_and_disable+0x18>)
   133aa:	2203      	movs	r2, #3
   133ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   133b0:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   133b4:	f44f 6290 	mov.w	r2, #1152	; 0x480
   133b8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   133bc:	4770      	bx	lr
   133be:	bf00      	nop
   133c0:	40001000 	.word	0x40001000

000133c4 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   133c4:	4a03      	ldr	r2, [pc, #12]	; (133d4 <radio_rssi_measure+0x10>)
   133c6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   133ca:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   133ce:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   133d2:	4770      	bx	lr
   133d4:	40001000 	.word	0x40001000

000133d8 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   133d8:	4b01      	ldr	r3, [pc, #4]	; (133e0 <radio_rssi_get+0x8>)
   133da:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   133de:	4770      	bx	lr
   133e0:	40001000 	.word	0x40001000

000133e4 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   133e4:	4b02      	ldr	r3, [pc, #8]	; (133f0 <radio_rssi_status_reset+0xc>)
   133e6:	2200      	movs	r2, #0
   133e8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   133ec:	4770      	bx	lr
   133ee:	bf00      	nop
   133f0:	40001000 	.word	0x40001000

000133f4 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   133f4:	4b03      	ldr	r3, [pc, #12]	; (13404 <radio_rssi_is_ready+0x10>)
   133f6:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   133fa:	3000      	adds	r0, #0
   133fc:	bf18      	it	ne
   133fe:	2001      	movne	r0, #1
   13400:	4770      	bx	lr
   13402:	bf00      	nop
   13404:	40001000 	.word	0x40001000

00013408 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   13408:	b530      	push	{r4, r5, lr}
   1340a:	2400      	movs	r4, #0
   1340c:	00a3      	lsls	r3, r4, #2
   1340e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   13416:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   13418:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   1341c:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   1341e:	8895      	ldrh	r5, [r2, #4]
   13420:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   13424:	2c08      	cmp	r4, #8
		bdaddr += 6;
   13426:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   1342a:	d1ef      	bne.n	1340c <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   1342c:	4b02      	ldr	r3, [pc, #8]	; (13438 <radio_filter_configure+0x30>)
   1342e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   13432:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   13436:	bd30      	pop	{r4, r5, pc}
   13438:	40001000 	.word	0x40001000

0001343c <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1343c:	4a03      	ldr	r2, [pc, #12]	; (1344c <radio_filter_disable+0x10>)
   1343e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   13442:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13446:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   1344a:	4770      	bx	lr
   1344c:	40001000 	.word	0x40001000

00013450 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   13450:	4b02      	ldr	r3, [pc, #8]	; (1345c <radio_filter_status_reset+0xc>)
   13452:	2200      	movs	r2, #0
   13454:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   13458:	4770      	bx	lr
   1345a:	bf00      	nop
   1345c:	40001000 	.word	0x40001000

00013460 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   13460:	4b03      	ldr	r3, [pc, #12]	; (13470 <radio_filter_has_match+0x10>)
   13462:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   13466:	3000      	adds	r0, #0
   13468:	bf18      	it	ne
   1346a:	2001      	movne	r0, #1
   1346c:	4770      	bx	lr
   1346e:	bf00      	nop
   13470:	40001000 	.word	0x40001000

00013474 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   13474:	4b01      	ldr	r3, [pc, #4]	; (1347c <radio_filter_match_get+0x8>)
   13476:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1347a:	4770      	bx	lr
   1347c:	40001000 	.word	0x40001000

00013480 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   13480:	4b04      	ldr	r3, [pc, #16]	; (13494 <radio_bc_configure+0x14>)
   13482:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   13486:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1348a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1348e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   13492:	4770      	bx	lr
   13494:	40001000 	.word	0x40001000

00013498 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   13498:	4b05      	ldr	r3, [pc, #20]	; (134b0 <radio_tmr_status_reset+0x18>)
   1349a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1349e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   134a2:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   134a6:	227f      	movs	r2, #127	; 0x7f
   134a8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   134ac:	4770      	bx	lr
   134ae:	bf00      	nop
   134b0:	4000b000 	.word	0x4000b000

000134b4 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   134b4:	4b03      	ldr	r3, [pc, #12]	; (134c4 <radio_tmr_tifs_set+0x10>)
   134b6:	4a04      	ldr	r2, [pc, #16]	; (134c8 <radio_tmr_tifs_set+0x14>)
   134b8:	781b      	ldrb	r3, [r3, #0]
   134ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   134be:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   134c2:	4770      	bx	lr
   134c4:	2000171c 	.word	0x2000171c
   134c8:	40009000 	.word	0x40009000

000134cc <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   134cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   134d0:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   134d4:	4c30      	ldr	r4, [pc, #192]	; (13598 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   134d6:	4d31      	ldr	r5, [pc, #196]	; (1359c <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   134d8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   134dc:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   134de:	bf88      	it	hi
   134e0:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   134e4:	4b2e      	ldr	r3, [pc, #184]	; (135a0 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   134e6:	4c2f      	ldr	r4, [pc, #188]	; (135a4 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   134e8:	bf82      	ittt	hi
   134ea:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   134ee:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   134f2:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   134f6:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   134f8:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   134fc:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   134fe:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   13500:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   13504:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   13506:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   1350a:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1350e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   13512:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   13516:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   1351a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1351e:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   13522:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   13526:	4920      	ldr	r1, [pc, #128]	; (135a8 <radio_tmr_start+0xdc>)
   13528:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   1352c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   13530:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   13534:	f7ff fd5a 	bl	12fec <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   13538:	4b1c      	ldr	r3, [pc, #112]	; (135ac <radio_tmr_start+0xe0>)
   1353a:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   1353c:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   13540:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   13544:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   13548:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   1354a:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1354e:	3b74      	subs	r3, #116	; 0x74
   13550:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   13554:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   13558:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   1355c:	f503 739a 	add.w	r3, r3, #308	; 0x134
   13560:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   13564:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   13568:	33c4      	adds	r3, #196	; 0xc4
   1356a:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   1356e:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   13572:	3bc0      	subs	r3, #192	; 0xc0
   13574:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   13578:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1357c:	33c8      	adds	r3, #200	; 0xc8
   1357e:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   13582:	f44f 6310 	mov.w	r3, #2304	; 0x900
   13586:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1358a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   1358e:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   13592:	4628      	mov	r0, r5
   13594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13598:	7ff0bdbf 	.word	0x7ff0bdbf
   1359c:	000f4240 	.word	0x000f4240
   135a0:	40008000 	.word	0x40008000
   135a4:	4000b000 	.word	0x4000b000
   135a8:	4000b148 	.word	0x4000b148
   135ac:	40009000 	.word	0x40009000

000135b0 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   135b0:	4a04      	ldr	r2, [pc, #16]	; (135c4 <radio_tmr_stop+0x14>)
   135b2:	2301      	movs	r3, #1
   135b4:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   135b6:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   135b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   135bc:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   135be:	6113      	str	r3, [r2, #16]
   135c0:	4770      	bx	lr
   135c2:	bf00      	nop
   135c4:	40008000 	.word	0x40008000

000135c8 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   135c8:	4b0c      	ldr	r3, [pc, #48]	; (135fc <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   135ca:	4a0d      	ldr	r2, [pc, #52]	; (13600 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   135cc:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   135d0:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   135d4:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   135d8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   135dc:	3240      	adds	r2, #64	; 0x40
   135de:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   135e2:	f502 7280 	add.w	r2, r2, #256	; 0x100
   135e6:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   135ea:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   135ee:	3a34      	subs	r2, #52	; 0x34
   135f0:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   135f4:	2218      	movs	r2, #24
   135f6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   135fa:	4770      	bx	lr
   135fc:	40008000 	.word	0x40008000
   13600:	40001104 	.word	0x40001104

00013604 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   13604:	4b0b      	ldr	r3, [pc, #44]	; (13634 <radio_tmr_aa_capture+0x30>)
   13606:	4a0c      	ldr	r2, [pc, #48]	; (13638 <radio_tmr_aa_capture+0x34>)
   13608:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   1360c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13610:	3240      	adds	r2, #64	; 0x40
   13612:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   13616:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   1361a:	3a3c      	subs	r2, #60	; 0x3c
   1361c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   13620:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13624:	3240      	adds	r2, #64	; 0x40
   13626:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   1362a:	220c      	movs	r2, #12
   1362c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   13630:	4770      	bx	lr
   13632:	bf00      	nop
   13634:	4001f000 	.word	0x4001f000
   13638:	40001100 	.word	0x40001100

0001363c <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1363c:	4b01      	ldr	r3, [pc, #4]	; (13644 <radio_tmr_aa_get+0x8>)
   1363e:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   13642:	4770      	bx	lr
   13644:	40008000 	.word	0x40008000

00013648 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   13648:	4b01      	ldr	r3, [pc, #4]	; (13650 <radio_tmr_aa_save+0x8>)
   1364a:	6018      	str	r0, [r3, #0]
   1364c:	4770      	bx	lr
   1364e:	bf00      	nop
   13650:	20001714 	.word	0x20001714

00013654 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   13654:	4b01      	ldr	r3, [pc, #4]	; (1365c <radio_tmr_aa_restore+0x8>)
   13656:	6818      	ldr	r0, [r3, #0]
   13658:	4770      	bx	lr
   1365a:	bf00      	nop
   1365c:	20001714 	.word	0x20001714

00013660 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   13660:	4b01      	ldr	r3, [pc, #4]	; (13668 <radio_tmr_ready_get+0x8>)
   13662:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   13666:	4770      	bx	lr
   13668:	40008000 	.word	0x40008000

0001366c <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   1366c:	4b06      	ldr	r3, [pc, #24]	; (13688 <radio_tmr_end_capture+0x1c>)
   1366e:	4a07      	ldr	r2, [pc, #28]	; (1368c <radio_tmr_end_capture+0x20>)
   13670:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   13674:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13678:	323c      	adds	r2, #60	; 0x3c
   1367a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   1367e:	2220      	movs	r2, #32
   13680:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   13684:	4770      	bx	lr
   13686:	bf00      	nop
   13688:	4001f000 	.word	0x4001f000
   1368c:	4000110c 	.word	0x4000110c

00013690 <radio_tmr_end_get>:
   13690:	4b01      	ldr	r3, [pc, #4]	; (13698 <radio_tmr_end_get+0x8>)
   13692:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   13696:	4770      	bx	lr
   13698:	40008000 	.word	0x40008000

0001369c <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1369c:	4b01      	ldr	r3, [pc, #4]	; (136a4 <radio_tmr_tifs_base_get+0x8>)
   1369e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   136a2:	4770      	bx	lr
   136a4:	40008000 	.word	0x40008000

000136a8 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   136a8:	4b16      	ldr	r3, [pc, #88]	; (13704 <radio_ccm_rx_pkt_set+0x5c>)
{
   136aa:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   136ac:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   136ae:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   136b0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   136b4:	4e14      	ldr	r6, [pc, #80]	; (13708 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   136b6:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   136ba:	4d14      	ldr	r5, [pc, #80]	; (1370c <radio_ccm_rx_pkt_set+0x64>)
   136bc:	2902      	cmp	r1, #2
   136be:	bf0c      	ite	eq
   136c0:	4629      	moveq	r1, r5
   136c2:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   136c4:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   136c8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   136cc:	4810      	ldr	r0, [pc, #64]	; (13710 <radio_ccm_rx_pkt_set+0x68>)
   136ce:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   136d2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   136d6:	4a0f      	ldr	r2, [pc, #60]	; (13714 <radio_ccm_rx_pkt_set+0x6c>)
   136d8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   136dc:	490e      	ldr	r1, [pc, #56]	; (13718 <radio_ccm_rx_pkt_set+0x70>)
   136de:	4a0f      	ldr	r2, [pc, #60]	; (1371c <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   136e0:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   136e4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   136e8:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   136ec:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   136f0:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   136f4:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   136f8:	2140      	movs	r1, #64	; 0x40
   136fa:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   136fe:	2201      	movs	r2, #1
   13700:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   13702:	bd70      	pop	{r4, r5, r6, pc}
   13704:	4000f000 	.word	0x4000f000
   13708:	01000001 	.word	0x01000001
   1370c:	01010001 	.word	0x01010001
   13710:	20001610 	.word	0x20001610
   13714:	20001500 	.word	0x20001500
   13718:	40001104 	.word	0x40001104
   1371c:	4001f000 	.word	0x4001f000

00013720 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   13720:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13722:	4b0e      	ldr	r3, [pc, #56]	; (1375c <radio_ccm_tx_pkt_set+0x3c>)
   13724:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13726:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13728:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1372c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   13730:	4c0b      	ldr	r4, [pc, #44]	; (13760 <radio_ccm_tx_pkt_set+0x40>)
   13732:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   13736:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   1373a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1373e:	4809      	ldr	r0, [pc, #36]	; (13764 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   13740:	4909      	ldr	r1, [pc, #36]	; (13768 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   13742:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   13746:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1374a:	2101      	movs	r1, #1
   1374c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   13750:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   13754:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   13758:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   1375a:	bd10      	pop	{r4, pc}
   1375c:	4000f000 	.word	0x4000f000
   13760:	01010000 	.word	0x01010000
   13764:	20001610 	.word	0x20001610
   13768:	20001500 	.word	0x20001500

0001376c <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   1376c:	4b0c      	ldr	r3, [pc, #48]	; (137a0 <radio_ccm_is_done+0x34>)
   1376e:	2202      	movs	r2, #2
   13770:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   13774:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   13778:	b16a      	cbz	r2, 13796 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   1377a:	2202      	movs	r2, #2
   1377c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   13780:	4a08      	ldr	r2, [pc, #32]	; (137a4 <radio_ccm_is_done+0x38>)
   13782:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13786:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   1378a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1378e:	fab0 f080 	clz	r0, r0
   13792:	0940      	lsrs	r0, r0, #5
   13794:	4770      	bx	lr
		__WFE();
   13796:	bf20      	wfe
		__SEV();
   13798:	bf40      	sev
		__WFE();
   1379a:	bf20      	wfe
   1379c:	e7ea      	b.n	13774 <radio_ccm_is_done+0x8>
   1379e:	bf00      	nop
   137a0:	4000f000 	.word	0x4000f000
   137a4:	e000e100 	.word	0xe000e100

000137a8 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   137a8:	4b03      	ldr	r3, [pc, #12]	; (137b8 <radio_ccm_mic_is_valid+0x10>)
   137aa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   137ae:	3000      	adds	r0, #0
   137b0:	bf18      	it	ne
   137b2:	2001      	movne	r0, #1
   137b4:	4770      	bx	lr
   137b6:	bf00      	nop
   137b8:	4000f000 	.word	0x4000f000

000137bc <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   137bc:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   137be:	4c13      	ldr	r4, [pc, #76]	; (1380c <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   137c0:	4d13      	ldr	r5, [pc, #76]	; (13810 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   137c2:	2303      	movs	r3, #3
   137c4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   137c8:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   137cc:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   137d0:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   137d4:	3b01      	subs	r3, #1
   137d6:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   137da:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   137dc:	4b0d      	ldr	r3, [pc, #52]	; (13814 <radio_ar_configure+0x58>)
   137de:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   137e2:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   137e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   137e8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   137ec:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   137f0:	f7ff fe46 	bl	13480 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   137f4:	4b08      	ldr	r3, [pc, #32]	; (13818 <radio_ar_configure+0x5c>)
   137f6:	4a09      	ldr	r2, [pc, #36]	; (1381c <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   137f8:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   137fc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   13800:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   13802:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   13806:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1380a:	bd38      	pop	{r3, r4, r5, pc}
   1380c:	4000f000 	.word	0x4000f000
   13810:	40001000 	.word	0x40001000
   13814:	200014fc 	.word	0x200014fc
   13818:	4001f000 	.word	0x4001f000
   1381c:	40001128 	.word	0x40001128

00013820 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   13820:	4b01      	ldr	r3, [pc, #4]	; (13828 <radio_ar_match_get+0x8>)
   13822:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   13826:	4770      	bx	lr
   13828:	4000f000 	.word	0x4000f000

0001382c <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1382c:	4a04      	ldr	r2, [pc, #16]	; (13840 <radio_ar_status_reset+0x14>)
   1382e:	2300      	movs	r3, #0
   13830:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   13834:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   13838:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1383c:	4770      	bx	lr
   1383e:	bf00      	nop
   13840:	40001000 	.word	0x40001000

00013844 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   13844:	4b08      	ldr	r3, [pc, #32]	; (13868 <radio_ar_has_match+0x24>)
   13846:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1384a:	b160      	cbz	r0, 13866 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1384c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   13850:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   13854:	b138      	cbz	r0, 13866 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   13856:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1385a:	b120      	cbz	r0, 13866 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1385c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   13860:	fab0 f080 	clz	r0, r0
   13864:	0940      	lsrs	r0, r0, #5
}
   13866:	4770      	bx	lr
   13868:	40001000 	.word	0x40001000

0001386c <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1386c:	2901      	cmp	r1, #1
{
   1386e:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13870:	d00e      	beq.n	13890 <mayfly_enable_cb+0x24>
   13872:	4a0d      	ldr	r2, [pc, #52]	; (138a8 <mayfly_enable_cb+0x3c>)
   13874:	4b0d      	ldr	r3, [pc, #52]	; (138ac <mayfly_enable_cb+0x40>)
   13876:	9201      	str	r2, [sp, #4]
   13878:	9200      	str	r2, [sp, #0]
   1387a:	681c      	ldr	r4, [r3, #0]
   1387c:	490c      	ldr	r1, [pc, #48]	; (138b0 <mayfly_enable_cb+0x44>)
   1387e:	4b0d      	ldr	r3, [pc, #52]	; (138b4 <mayfly_enable_cb+0x48>)
   13880:	480d      	ldr	r0, [pc, #52]	; (138b8 <mayfly_enable_cb+0x4c>)
   13882:	47a0      	blx	r4
   13884:	4040      	eors	r0, r0
   13886:	f380 8811 	msr	BASEPRI, r0
   1388a:	f04f 0004 	mov.w	r0, #4
   1388e:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   13890:	2018      	movs	r0, #24
	if (enable) {
   13892:	b122      	cbz	r2, 1389e <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   13894:	b002      	add	sp, #8
   13896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(SWI4_IRQn);
   1389a:	f7ed bfe3 	b.w	1864 <_arch_irq_enable>
}
   1389e:	b002      	add	sp, #8
   138a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(SWI4_IRQn);
   138a4:	f7ed bfee 	b.w	1884 <_arch_irq_disable>
   138a8:	000159e9 	.word	0x000159e9
   138ac:	20003ad4 	.word	0x20003ad4
   138b0:	00016791 	.word	0x00016791
   138b4:	00019508 	.word	0x00019508
   138b8:	00019537 	.word	0x00019537

000138bc <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   138bc:	b513      	push	{r0, r1, r4, lr}
	(void)caller_id;

	switch (callee_id) {
   138be:	b181      	cbz	r1, 138e2 <mayfly_is_enabled+0x26>
   138c0:	2901      	cmp	r1, #1
   138c2:	d014      	beq.n	138ee <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   138c4:	4a0b      	ldr	r2, [pc, #44]	; (138f4 <mayfly_is_enabled+0x38>)
   138c6:	4b0c      	ldr	r3, [pc, #48]	; (138f8 <mayfly_is_enabled+0x3c>)
   138c8:	9201      	str	r2, [sp, #4]
   138ca:	9200      	str	r2, [sp, #0]
   138cc:	681c      	ldr	r4, [r3, #0]
   138ce:	490b      	ldr	r1, [pc, #44]	; (138fc <mayfly_is_enabled+0x40>)
   138d0:	4b0b      	ldr	r3, [pc, #44]	; (13900 <mayfly_is_enabled+0x44>)
   138d2:	480c      	ldr	r0, [pc, #48]	; (13904 <mayfly_is_enabled+0x48>)
   138d4:	47a0      	blx	r4
   138d6:	4040      	eors	r0, r0
   138d8:	f380 8811 	msr	BASEPRI, r0
   138dc:	f04f 0004 	mov.w	r0, #4
   138e0:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   138e2:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   138e4:	b002      	add	sp, #8
   138e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return irq_is_enabled(SWI4_IRQn);
   138ea:	f7ed bfdf 	b.w	18ac <_arch_irq_is_enabled>
   138ee:	2018      	movs	r0, #24
   138f0:	e7f8      	b.n	138e4 <mayfly_is_enabled+0x28>
   138f2:	bf00      	nop
   138f4:	000159e9 	.word	0x000159e9
   138f8:	20003ad4 	.word	0x20003ad4
   138fc:	00016791 	.word	0x00016791
   13900:	00019519 	.word	0x00019519
   13904:	000166ef 	.word	0x000166ef

00013908 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   13908:	4288      	cmp	r0, r1
   1390a:	d00a      	beq.n	13922 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   1390c:	b918      	cbnz	r0, 13916 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1390e:	1e4b      	subs	r3, r1, #1
   13910:	4258      	negs	r0, r3
   13912:	4158      	adcs	r0, r3
   13914:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   13916:	2801      	cmp	r0, #1
   13918:	d105      	bne.n	13926 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1391a:	fab1 f081 	clz	r0, r1
   1391e:	0940      	lsrs	r0, r0, #5
   13920:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   13922:	2001      	movs	r0, #1
   13924:	4770      	bx	lr
   13926:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   13928:	4770      	bx	lr
	...

0001392c <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   1392c:	b513      	push	{r0, r1, r4, lr}
   1392e:	4b0e      	ldr	r3, [pc, #56]	; (13968 <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   13930:	b181      	cbz	r1, 13954 <mayfly_pend+0x28>
   13932:	2901      	cmp	r1, #1
   13934:	d014      	beq.n	13960 <mayfly_pend+0x34>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   13936:	4a0d      	ldr	r2, [pc, #52]	; (1396c <mayfly_pend+0x40>)
   13938:	4b0d      	ldr	r3, [pc, #52]	; (13970 <mayfly_pend+0x44>)
   1393a:	9201      	str	r2, [sp, #4]
   1393c:	9200      	str	r2, [sp, #0]
   1393e:	681c      	ldr	r4, [r3, #0]
   13940:	490c      	ldr	r1, [pc, #48]	; (13974 <mayfly_pend+0x48>)
   13942:	4b0d      	ldr	r3, [pc, #52]	; (13978 <mayfly_pend+0x4c>)
   13944:	480d      	ldr	r0, [pc, #52]	; (1397c <mayfly_pend+0x50>)
   13946:	47a0      	blx	r4
   13948:	4040      	eors	r0, r0
   1394a:	f380 8811 	msr	BASEPRI, r0
   1394e:	f04f 0004 	mov.w	r0, #4
   13952:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13954:	f44f 6200 	mov.w	r2, #2048	; 0x800
   13958:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   1395c:	b002      	add	sp, #8
   1395e:	bd10      	pop	{r4, pc}
   13960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   13964:	e7f8      	b.n	13958 <mayfly_pend+0x2c>
   13966:	bf00      	nop
   13968:	e000e100 	.word	0xe000e100
   1396c:	000159e9 	.word	0x000159e9
   13970:	20003ad4 	.word	0x20003ad4
   13974:	00016791 	.word	0x00016791
   13978:	0001952b 	.word	0x0001952b
   1397c:	000166ef 	.word	0x000166ef

00013980 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13980:	2803      	cmp	r0, #3
{
   13982:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13984:	d90e      	bls.n	139a4 <hal_ticker_instance0_caller_id_get+0x24>
   13986:	4a0e      	ldr	r2, [pc, #56]	; (139c0 <hal_ticker_instance0_caller_id_get+0x40>)
   13988:	4b0e      	ldr	r3, [pc, #56]	; (139c4 <hal_ticker_instance0_caller_id_get+0x44>)
   1398a:	9201      	str	r2, [sp, #4]
   1398c:	9200      	str	r2, [sp, #0]
   1398e:	681c      	ldr	r4, [r3, #0]
   13990:	490d      	ldr	r1, [pc, #52]	; (139c8 <hal_ticker_instance0_caller_id_get+0x48>)
   13992:	4b0e      	ldr	r3, [pc, #56]	; (139cc <hal_ticker_instance0_caller_id_get+0x4c>)
   13994:	480e      	ldr	r0, [pc, #56]	; (139d0 <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   13996:	47a0      	blx	r4
   13998:	4040      	eors	r0, r0
   1399a:	f380 8811 	msr	BASEPRI, r0
   1399e:	f04f 0004 	mov.w	r0, #4
   139a2:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   139a4:	4b0b      	ldr	r3, [pc, #44]	; (139d4 <hal_ticker_instance0_caller_id_get+0x54>)
   139a6:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   139a8:	b940      	cbnz	r0, 139bc <hal_ticker_instance0_caller_id_get+0x3c>
   139aa:	4a05      	ldr	r2, [pc, #20]	; (139c0 <hal_ticker_instance0_caller_id_get+0x40>)
   139ac:	4b05      	ldr	r3, [pc, #20]	; (139c4 <hal_ticker_instance0_caller_id_get+0x44>)
   139ae:	9201      	str	r2, [sp, #4]
   139b0:	9200      	str	r2, [sp, #0]
   139b2:	681c      	ldr	r4, [r3, #0]
   139b4:	4904      	ldr	r1, [pc, #16]	; (139c8 <hal_ticker_instance0_caller_id_get+0x48>)
   139b6:	4b05      	ldr	r3, [pc, #20]	; (139cc <hal_ticker_instance0_caller_id_get+0x4c>)
   139b8:	4807      	ldr	r0, [pc, #28]	; (139d8 <hal_ticker_instance0_caller_id_get+0x58>)
   139ba:	e7ec      	b.n	13996 <hal_ticker_instance0_caller_id_get+0x16>

	return caller_id;
}
   139bc:	b002      	add	sp, #8
   139be:	bd10      	pop	{r4, pc}
   139c0:	000159e9 	.word	0x000159e9
   139c4:	20003ad4 	.word	0x20003ad4
   139c8:	00016791 	.word	0x00016791
   139cc:	00019567 	.word	0x00019567
   139d0:	000195a9 	.word	0x000195a9
   139d4:	000195a5 	.word	0x000195a5
   139d8:	000195ea 	.word	0x000195ea

000139dc <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   139dc:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   139de:	3802      	subs	r0, #2
{
   139e0:	461c      	mov	r4, r3
	switch (caller_id) {
   139e2:	2803      	cmp	r0, #3
   139e4:	d818      	bhi.n	13a18 <hal_ticker_instance0_sched+0x3c>
   139e6:	e8df f000 	tbb	[pc, r0]
   139ea:	0d02      	.short	0x0d02
   139ec:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   139ee:	2903      	cmp	r1, #3
   139f0:	d112      	bne.n	13a18 <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   139f2:	4b19      	ldr	r3, [pc, #100]	; (13a58 <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   139f4:	2100      	movs	r1, #0
			m.param = instance;
   139f6:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   139f8:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   139fa:	b002      	add	sp, #8
   139fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13a00:	f7f3 ba1e 	b.w	6e40 <mayfly_enqueue>
		switch (callee_id) {
   13a04:	2904      	cmp	r1, #4
   13a06:	d107      	bne.n	13a18 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   13a08:	4b14      	ldr	r3, [pc, #80]	; (13a5c <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   13a0a:	2101      	movs	r1, #1
			m.param = instance;
   13a0c:	609c      	str	r4, [r3, #8]
   13a0e:	e7f3      	b.n	139f8 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   13a10:	2903      	cmp	r1, #3
   13a12:	d010      	beq.n	13a36 <hal_ticker_instance0_sched+0x5a>
   13a14:	2904      	cmp	r1, #4
   13a16:	d013      	beq.n	13a40 <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
   13a18:	4a11      	ldr	r2, [pc, #68]	; (13a60 <hal_ticker_instance0_sched+0x84>)
   13a1a:	4b12      	ldr	r3, [pc, #72]	; (13a64 <hal_ticker_instance0_sched+0x88>)
   13a1c:	9201      	str	r2, [sp, #4]
   13a1e:	9200      	str	r2, [sp, #0]
   13a20:	681c      	ldr	r4, [r3, #0]
   13a22:	4911      	ldr	r1, [pc, #68]	; (13a68 <hal_ticker_instance0_sched+0x8c>)
   13a24:	4b11      	ldr	r3, [pc, #68]	; (13a6c <hal_ticker_instance0_sched+0x90>)
   13a26:	4812      	ldr	r0, [pc, #72]	; (13a70 <hal_ticker_instance0_sched+0x94>)
   13a28:	47a0      	blx	r4
   13a2a:	4040      	eors	r0, r0
   13a2c:	f380 8811 	msr	BASEPRI, r0
   13a30:	f04f 0004 	mov.w	r0, #4
   13a34:	df02      	svc	2
			m.param = instance;
   13a36:	4b0f      	ldr	r3, [pc, #60]	; (13a74 <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13a38:	2100      	movs	r1, #0
			m.param = instance;
   13a3a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13a3c:	2001      	movs	r0, #1
   13a3e:	e7dc      	b.n	139fa <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   13a40:	4b0d      	ldr	r3, [pc, #52]	; (13a78 <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13a42:	2101      	movs	r1, #1
			m.param = instance;
   13a44:	609c      	str	r4, [r3, #8]
   13a46:	e7f9      	b.n	13a3c <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
   13a48:	2904      	cmp	r1, #4
   13a4a:	d1e5      	bne.n	13a18 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   13a4c:	4b0b      	ldr	r3, [pc, #44]	; (13a7c <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13a4e:	2101      	movs	r1, #1
			m.param = instance;
   13a50:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13a52:	2003      	movs	r0, #3
   13a54:	e7d1      	b.n	139fa <hal_ticker_instance0_sched+0x1e>
   13a56:	bf00      	nop
   13a58:	20003ed8 	.word	0x20003ed8
   13a5c:	20003ee8 	.word	0x20003ee8
   13a60:	000159e9 	.word	0x000159e9
   13a64:	20003ad4 	.word	0x20003ad4
   13a68:	00016791 	.word	0x00016791
   13a6c:	0001958a 	.word	0x0001958a
   13a70:	000166ef 	.word	0x000166ef
   13a74:	20003ef8 	.word	0x20003ef8
   13a78:	20003f08 	.word	0x20003f08
   13a7c:	20003f18 	.word	0x20003f18

00013a80 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   13a80:	4601      	mov	r1, r0
   13a82:	2000      	movs	r0, #0
   13a84:	f7ff ba62 	b.w	12f4c <cntr_cmp_set>

00013a88 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   13a88:	4770      	bx	lr
	...

00013a8c <net_buf_pool_get>:
}
   13a8c:	4b02      	ldr	r3, [pc, #8]	; (13a98 <net_buf_pool_get+0xc>)
   13a8e:	2224      	movs	r2, #36	; 0x24
   13a90:	fb02 3000 	mla	r0, r2, r0, r3
   13a94:	4770      	bx	lr
   13a96:	bf00      	nop
   13a98:	20004018 	.word	0x20004018

00013a9c <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13a9c:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
   13a9e:	4a05      	ldr	r2, [pc, #20]	; (13ab4 <net_buf_id+0x18>)
   13aa0:	2124      	movs	r1, #36	; 0x24
   13aa2:	fb01 2303 	mla	r3, r1, r3, r2
   13aa6:	6a1b      	ldr	r3, [r3, #32]
   13aa8:	1ac0      	subs	r0, r0, r3
}
   13aaa:	4b03      	ldr	r3, [pc, #12]	; (13ab8 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   13aac:	10c0      	asrs	r0, r0, #3
}
   13aae:	4358      	muls	r0, r3
   13ab0:	4770      	bx	lr
   13ab2:	bf00      	nop
   13ab4:	20004018 	.word	0x20004018
   13ab8:	aaaaaaab 	.word	0xaaaaaaab

00013abc <fixed_data_alloc>:
{
   13abc:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13abe:	4a0a      	ldr	r2, [pc, #40]	; (13ae8 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13ac0:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13ac2:	2424      	movs	r4, #36	; 0x24
   13ac4:	fb04 2303 	mla	r3, r4, r3, r2
	*size = min(fixed->data_size, *size);
   13ac8:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13aca:	69db      	ldr	r3, [r3, #28]
   13acc:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   13ace:	6823      	ldr	r3, [r4, #0]
   13ad0:	429a      	cmp	r2, r3
   13ad2:	bf94      	ite	ls
   13ad4:	600a      	strls	r2, [r1, #0]
   13ad6:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   13ad8:	f7ff ffe0 	bl	13a9c <net_buf_id>
   13adc:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   13ae0:	fb02 3000 	mla	r0, r2, r0, r3
   13ae4:	bd10      	pop	{r4, pc}
   13ae6:	bf00      	nop
   13ae8:	20004018 	.word	0x20004018

00013aec <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   13aec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13af0:	4605      	mov	r5, r0
   13af2:	9101      	str	r1, [sp, #4]
   13af4:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13af6:	f001 f9dd 	bl	14eb4 <_impl_k_uptime_get_32>
   13afa:	4607      	mov	r7, r0
	__asm__ volatile(
   13afc:	f04f 0320 	mov.w	r3, #32
   13b00:	f3ef 8811 	mrs	r8, BASEPRI
   13b04:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   13b08:	8aeb      	ldrh	r3, [r5, #22]
   13b0a:	2b00      	cmp	r3, #0
   13b0c:	d042      	beq.n	13b94 <net_buf_alloc_len+0xa8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   13b0e:	8aaa      	ldrh	r2, [r5, #20]
   13b10:	429a      	cmp	r2, r3
   13b12:	d92d      	bls.n	13b70 <net_buf_alloc_len+0x84>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   13b14:	2100      	movs	r1, #0
   13b16:	4628      	mov	r0, r5
   13b18:	f000 febe 	bl	14898 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   13b1c:	b340      	cbz	r0, 13b70 <net_buf_alloc_len+0x84>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13b1e:	f388 8811 	msr	BASEPRI, r8
   13b22:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   13b24:	9b01      	ldr	r3, [sp, #4]
   13b26:	2b00      	cmp	r3, #0
   13b28:	d041      	beq.n	13bae <net_buf_alloc_len+0xc2>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   13b2a:	1c73      	adds	r3, r6, #1
   13b2c:	2b01      	cmp	r3, #1
   13b2e:	d906      	bls.n	13b3e <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13b30:	f001 f9c0 	bl	14eb4 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   13b34:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   13b36:	42b0      	cmp	r0, r6
   13b38:	bf94      	ite	ls
   13b3a:	1a36      	subls	r6, r6, r0
   13b3c:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13b3e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   13b40:	4f21      	ldr	r7, [pc, #132]	; (13bc8 <net_buf_alloc_len+0xdc>)
   13b42:	2224      	movs	r2, #36	; 0x24
   13b44:	fb02 7303 	mla	r3, r2, r3, r7
   13b48:	a901      	add	r1, sp, #4
   13b4a:	69db      	ldr	r3, [r3, #28]
   13b4c:	681b      	ldr	r3, [r3, #0]
   13b4e:	4632      	mov	r2, r6
   13b50:	681b      	ldr	r3, [r3, #0]
   13b52:	4620      	mov	r0, r4
   13b54:	4798      	blx	r3
   13b56:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   13b58:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   13b5a:	bb48      	cbnz	r0, 13bb0 <net_buf_alloc_len+0xc4>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   13b5c:	79a0      	ldrb	r0, [r4, #6]
   13b5e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   13b62:	4621      	mov	r1, r4
   13b64:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   13b68:	f000 fe77 	bl	1485a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   13b6c:	462c      	mov	r4, r5
   13b6e:	e01a      	b.n	13ba6 <net_buf_alloc_len+0xba>
		uninit_count = pool->uninit_count--;
   13b70:	8ae8      	ldrh	r0, [r5, #22]
   13b72:	1e43      	subs	r3, r0, #1
   13b74:	82eb      	strh	r3, [r5, #22]
   13b76:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   13b7a:	8aac      	ldrh	r4, [r5, #20]
   13b7c:	1a24      	subs	r4, r4, r0
   13b7e:	6a28      	ldr	r0, [r5, #32]
   13b80:	2318      	movs	r3, #24
   13b82:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   13b86:	4b10      	ldr	r3, [pc, #64]	; (13bc8 <net_buf_alloc_len+0xdc>)
   13b88:	1aed      	subs	r5, r5, r3
   13b8a:	4b10      	ldr	r3, [pc, #64]	; (13bcc <net_buf_alloc_len+0xe0>)
   13b8c:	10ad      	asrs	r5, r5, #2
   13b8e:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   13b90:	71a5      	strb	r5, [r4, #6]
		goto success;
   13b92:	e7c7      	b.n	13b24 <net_buf_alloc_len+0x38>
   13b94:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   13b98:	4631      	mov	r1, r6
   13b9a:	4628      	mov	r0, r5
   13b9c:	f000 fe7c 	bl	14898 <_impl_k_queue_get>
		return NULL;
   13ba0:	4604      	mov	r4, r0
	if (!buf) {
   13ba2:	2800      	cmp	r0, #0
   13ba4:	d1be      	bne.n	13b24 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   13ba6:	4620      	mov	r0, r4
   13ba8:	b002      	add	sp, #8
   13baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   13bae:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   13bb0:	2301      	movs	r3, #1
   13bb2:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   13bb4:	2300      	movs	r3, #0
	buf->frags = NULL;
   13bb6:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   13bb8:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   13bba:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   13bbc:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   13bbe:	6923      	ldr	r3, [r4, #16]
   13bc0:	81e2      	strh	r2, [r4, #14]
   13bc2:	60a3      	str	r3, [r4, #8]
	return buf;
   13bc4:	e7ef      	b.n	13ba6 <net_buf_alloc_len+0xba>
   13bc6:	bf00      	nop
   13bc8:	20004018 	.word	0x20004018
   13bcc:	38e38e39 	.word	0x38e38e39

00013bd0 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13bd0:	69c3      	ldr	r3, [r0, #28]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   13bd2:	685b      	ldr	r3, [r3, #4]
   13bd4:	460a      	mov	r2, r1
   13bd6:	6819      	ldr	r1, [r3, #0]
   13bd8:	f7ff bf88 	b.w	13aec <net_buf_alloc_len>

00013bdc <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   13bdc:	b570      	push	{r4, r5, r6, lr}
   13bde:	4606      	mov	r6, r0
   13be0:	f000 fe5a 	bl	14898 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   13be4:	4605      	mov	r5, r0
   13be6:	b128      	cbz	r0, 13bf4 <net_buf_get+0x18>
   13be8:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13bea:	7963      	ldrb	r3, [r4, #5]
   13bec:	f013 0301 	ands.w	r3, r3, #1
   13bf0:	d102      	bne.n	13bf8 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   13bf2:	6023      	str	r3, [r4, #0]

	return buf;
}
   13bf4:	4628      	mov	r0, r5
   13bf6:	bd70      	pop	{r4, r5, r6, pc}
   13bf8:	2100      	movs	r1, #0
   13bfa:	4630      	mov	r0, r6
   13bfc:	f000 fe4c 	bl	14898 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   13c00:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   13c02:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   13c04:	f023 0301 	bic.w	r3, r3, #1
   13c08:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13c0a:	4604      	mov	r4, r0
   13c0c:	e7ed      	b.n	13bea <net_buf_get+0xe>

00013c0e <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   13c0e:	6883      	ldr	r3, [r0, #8]
   13c10:	4419      	add	r1, r3
   13c12:	6001      	str	r1, [r0, #0]
   13c14:	4770      	bx	lr

00013c16 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   13c16:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   13c18:	460a      	mov	r2, r1
   13c1a:	6814      	ldr	r4, [r2, #0]
   13c1c:	b914      	cbnz	r4, 13c24 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   13c1e:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   13c20:	f000 be20 	b.w	14864 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   13c24:	7953      	ldrb	r3, [r2, #5]
   13c26:	f043 0301 	orr.w	r3, r3, #1
   13c2a:	7153      	strb	r3, [r2, #5]
   13c2c:	4622      	mov	r2, r4
   13c2e:	e7f4      	b.n	13c1a <net_buf_put+0x4>

00013c30 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   13c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c34:	4d17      	ldr	r5, [pc, #92]	; (13c94 <net_buf_unref+0x64>)
   13c36:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   13c38:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   13c3a:	2724      	movs	r7, #36	; 0x24
	while (buf) {
   13c3c:	b90c      	cbnz	r4, 13c42 <net_buf_unref+0x12>
   13c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   13c42:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   13c44:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   13c48:	3b01      	subs	r3, #1
   13c4a:	b2db      	uxtb	r3, r3
   13c4c:	7123      	strb	r3, [r4, #4]
   13c4e:	2b00      	cmp	r3, #0
   13c50:	d1f5      	bne.n	13c3e <net_buf_unref+0xe>
		if (buf->__buf) {
   13c52:	6921      	ldr	r1, [r4, #16]
   13c54:	b159      	cbz	r1, 13c6e <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   13c56:	7963      	ldrb	r3, [r4, #5]
   13c58:	079b      	lsls	r3, r3, #30
   13c5a:	d407      	bmi.n	13c6c <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13c5c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   13c5e:	fb07 5303 	mla	r3, r7, r3, r5
   13c62:	4620      	mov	r0, r4
   13c64:	69db      	ldr	r3, [r3, #28]
   13c66:	681b      	ldr	r3, [r3, #0]
   13c68:	689b      	ldr	r3, [r3, #8]
   13c6a:	4798      	blx	r3
			buf->__buf = NULL;
   13c6c:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   13c6e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   13c70:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   13c72:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   13c76:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   13c78:	699b      	ldr	r3, [r3, #24]
   13c7a:	b11b      	cbz	r3, 13c84 <net_buf_unref+0x54>
			pool->destroy(buf);
   13c7c:	4620      	mov	r0, r4
   13c7e:	4798      	blx	r3
{
   13c80:	4644      	mov	r4, r8
   13c82:	e7db      	b.n	13c3c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   13c84:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   13c88:	4621      	mov	r1, r4
   13c8a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   13c8e:	f000 fde4 	bl	1485a <k_queue_prepend>
   13c92:	e7f5      	b.n	13c80 <net_buf_unref+0x50>
   13c94:	20004018 	.word	0x20004018

00013c98 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   13c98:	7903      	ldrb	r3, [r0, #4]
   13c9a:	3301      	adds	r3, #1
   13c9c:	7103      	strb	r3, [r0, #4]
	return buf;
}
   13c9e:	4770      	bx	lr

00013ca0 <net_buf_simple_add>:
	return buf->data + buf->len;
   13ca0:	8883      	ldrh	r3, [r0, #4]
   13ca2:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   13ca4:	4419      	add	r1, r3
   13ca6:	8081      	strh	r1, [r0, #4]
	return tail;
}
   13ca8:	18d0      	adds	r0, r2, r3
   13caa:	4770      	bx	lr

00013cac <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   13cac:	b430      	push	{r4, r5}
   13cae:	8883      	ldrh	r3, [r0, #4]
   13cb0:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   13cb2:	189d      	adds	r5, r3, r2
   13cb4:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   13cb6:	18e0      	adds	r0, r4, r3
}
   13cb8:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   13cba:	f7ed bfb1 	b.w	1c20 <memcpy>

00013cbe <net_buf_simple_add_u8>:
   13cbe:	8883      	ldrh	r3, [r0, #4]
   13cc0:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   13cc2:	b510      	push	{r4, lr}
	buf->len += len;
   13cc4:	1c5c      	adds	r4, r3, #1
   13cc6:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   13cc8:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   13cca:	18d0      	adds	r0, r2, r3
   13ccc:	bd10      	pop	{r4, pc}

00013cce <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   13cce:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   13cd0:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   13cd2:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   13cd4:	4411      	add	r1, r2
	buf->data -= len;
   13cd6:	6003      	str	r3, [r0, #0]
	buf->len += len;
   13cd8:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   13cda:	4618      	mov	r0, r3
   13cdc:	4770      	bx	lr

00013cde <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   13cde:	8883      	ldrh	r3, [r0, #4]
   13ce0:	1a5b      	subs	r3, r3, r1
   13ce2:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   13ce4:	6803      	ldr	r3, [r0, #0]
   13ce6:	4419      	add	r1, r3
   13ce8:	6001      	str	r1, [r0, #0]
}
   13cea:	4608      	mov	r0, r1
   13cec:	4770      	bx	lr

00013cee <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   13cee:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   13cf0:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   13cf2:	2101      	movs	r1, #1
	val = buf->data[0];
   13cf4:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   13cf6:	f7ff fff2 	bl	13cde <net_buf_simple_pull>

	return val;
}
   13cfa:	4610      	mov	r0, r2
   13cfc:	bd08      	pop	{r3, pc}

00013cfe <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   13cfe:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   13d00:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   13d02:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   13d04:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   13d06:	f7ff ffea 	bl	13cde <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   13d0a:	4610      	mov	r0, r2
   13d0c:	bd08      	pop	{r3, pc}

00013d0e <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   13d0e:	6802      	ldr	r2, [r0, #0]
   13d10:	6880      	ldr	r0, [r0, #8]
}
   13d12:	1a10      	subs	r0, r2, r0
   13d14:	4770      	bx	lr

00013d16 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   13d16:	6802      	ldr	r2, [r0, #0]
   13d18:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   13d1a:	88c3      	ldrh	r3, [r0, #6]
   13d1c:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   13d1e:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   13d20:	1a9b      	subs	r3, r3, r2
}
   13d22:	1a18      	subs	r0, r3, r0
   13d24:	4770      	bx	lr

00013d26 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13d26:	6800      	ldr	r0, [r0, #0]
   13d28:	6880      	ldr	r0, [r0, #8]
   13d2a:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   13d2c:	b941      	cbnz	r1, 13d40 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   13d2e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   13d32:	fa21 f202 	lsr.w	r2, r1, r2
   13d36:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   13d3a:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   13d3c:	2000      	movs	r0, #0
   13d3e:	4770      	bx	lr
		*value = gpio->IN;
   13d40:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   13d44:	e7f9      	b.n	13d3a <gpio_nrf5_read+0x14>

00013d46 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13d46:	6800      	ldr	r0, [r0, #0]
   13d48:	6880      	ldr	r0, [r0, #8]
   13d4a:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   13d4c:	b949      	cbnz	r1, 13d62 <gpio_nrf5_write+0x1c>
   13d4e:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   13d50:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   13d52:	b11b      	cbz	r3, 13d5c <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   13d54:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   13d58:	2000      	movs	r0, #0
   13d5a:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   13d5c:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   13d60:	e7fa      	b.n	13d58 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   13d62:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   13d66:	e7f7      	b.n	13d58 <gpio_nrf5_write+0x12>

00013d68 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   13d68:	6883      	ldr	r3, [r0, #8]
   13d6a:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   13d6c:	b172      	cbz	r2, 13d8c <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   13d6e:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   13d70:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   13d72:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   13d74:	b902      	cbnz	r2, 13d78 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   13d76:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   13d78:	2000      	movs	r0, #0
   13d7a:	4770      	bx	lr
	parent->next = child;
   13d7c:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   13d7e:	6858      	ldr	r0, [r3, #4]
   13d80:	4281      	cmp	r1, r0
	list->tail = node;
   13d82:	bf08      	it	eq
   13d84:	605a      	streq	r2, [r3, #4]
   13d86:	e00d      	b.n	13da4 <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   13d88:	4602      	mov	r2, r0
   13d8a:	6800      	ldr	r0, [r0, #0]
   13d8c:	2800      	cmp	r0, #0
   13d8e:	d0f3      	beq.n	13d78 <gpio_nrf5_manage_callback+0x10>
   13d90:	4281      	cmp	r1, r0
   13d92:	d1f9      	bne.n	13d88 <gpio_nrf5_manage_callback+0x20>
   13d94:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   13d96:	2a00      	cmp	r2, #0
   13d98:	d1f0      	bne.n	13d7c <gpio_nrf5_manage_callback+0x14>
   13d9a:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   13d9c:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   13d9e:	4291      	cmp	r1, r2
   13da0:	d100      	bne.n	13da4 <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   13da2:	6058      	str	r0, [r3, #4]
	parent->next = child;
   13da4:	2300      	movs	r3, #0
   13da6:	600b      	str	r3, [r1, #0]
   13da8:	e7e6      	b.n	13d78 <gpio_nrf5_manage_callback+0x10>
	...

00013dac <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   13dac:	4b0c      	ldr	r3, [pc, #48]	; (13de0 <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   13dae:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   13db0:	4d0c      	ldr	r5, [pc, #48]	; (13de4 <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   13db2:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13db4:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   13db6:	fa24 f203 	lsr.w	r2, r4, r3
   13dba:	07d2      	lsls	r2, r2, #31
   13dbc:	d508      	bpl.n	13dd0 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   13dbe:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   13dc2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   13dc6:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   13dca:	4282      	cmp	r2, r0
   13dcc:	d100      	bne.n	13dd0 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   13dce:	b121      	cbz	r1, 13dda <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13dd0:	3301      	adds	r3, #1
   13dd2:	2b08      	cmp	r3, #8
   13dd4:	d1ef      	bne.n	13db6 <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   13dd6:	f06f 0312 	mvn.w	r3, #18
}
   13dda:	4618      	mov	r0, r3
   13ddc:	bd30      	pop	{r4, r5, pc}
   13dde:	bf00      	nop
   13de0:	20001754 	.word	0x20001754
   13de4:	40006000 	.word	0x40006000

00013de8 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   13de8:	b570      	push	{r4, r5, r6, lr}
   13dea:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   13dec:	460d      	mov	r5, r1
   13dee:	b9c9      	cbnz	r1, 13e24 <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   13df0:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   13df2:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   13df4:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   13df6:	4610      	mov	r0, r2
   13df8:	7919      	ldrb	r1, [r3, #4]
   13dfa:	f7ff ffd7 	bl	13dac <gpiote_find_channel.isra.4>
		if (i < 0) {
   13dfe:	2800      	cmp	r0, #0
   13e00:	db12      	blt.n	13e28 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   13e02:	68b2      	ldr	r2, [r6, #8]
   13e04:	2301      	movs	r3, #1
   13e06:	fa03 f404 	lsl.w	r4, r3, r4
   13e0a:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   13e0c:	f100 0140 	add.w	r1, r0, #64	; 0x40
   13e10:	4a06      	ldr	r2, [pc, #24]	; (13e2c <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   13e12:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   13e14:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   13e18:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   13e1c:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   13e20:	4628      	mov	r0, r5
   13e22:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   13e24:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   13e28:	bd70      	pop	{r4, r5, r6, pc}
   13e2a:	bf00      	nop
   13e2c:	40006000 	.word	0x40006000

00013e30 <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   13e30:	b570      	push	{r4, r5, r6, lr}
   13e32:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   13e34:	460d      	mov	r5, r1
   13e36:	b9b1      	cbnz	r1, 13e66 <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   13e38:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   13e3a:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   13e3c:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   13e3e:	4610      	mov	r0, r2
   13e40:	7919      	ldrb	r1, [r3, #4]
   13e42:	f7ff ffb3 	bl	13dac <gpiote_find_channel.isra.4>
		if (i < 0) {
   13e46:	2800      	cmp	r0, #0
   13e48:	db0f      	blt.n	13e6a <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   13e4a:	68b2      	ldr	r2, [r6, #8]
   13e4c:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   13e4e:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   13e52:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   13e56:	4b05      	ldr	r3, [pc, #20]	; (13e6c <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   13e58:	ea22 0404 	bic.w	r4, r2, r4
   13e5c:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   13e5e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   13e62:	4628      	mov	r0, r5
   13e64:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   13e66:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   13e6a:	bd70      	pop	{r4, r5, r6, pc}
   13e6c:	40006000 	.word	0x40006000

00013e70 <gpio_nrf5_config>:
{
   13e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13e74:	6806      	ldr	r6, [r0, #0]
{
   13e76:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13e78:	68b2      	ldr	r2, [r6, #8]
   13e7a:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   13e7c:	b119      	cbz	r1, 13e86 <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   13e7e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   13e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   13e86:	f403 7240 	and.w	r2, r3, #768	; 0x300
   13e8a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   13e8e:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   13e92:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   13e96:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   13e9a:	d058      	beq.n	13f4e <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   13e9c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   13ea0:	bf0c      	ite	eq
   13ea2:	2204      	moveq	r2, #4
   13ea4:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   13ea6:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   13eaa:	bf08      	it	eq
   13eac:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   13eae:	f013 0f01 	tst.w	r3, #1
   13eb2:	ea4f 0180 	mov.w	r1, r0, lsl #2
   13eb6:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 13f84 <gpio_nrf5_config+0x114>
   13eba:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   13ebe:	d04f      	beq.n	13f60 <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   13ec0:	2a0c      	cmp	r2, #12
   13ec2:	d146      	bne.n	13f52 <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   13ec4:	2701      	movs	r7, #1
   13ec6:	40a7      	lsls	r7, r4
   13ec8:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   13ecc:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   13ece:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   13ed2:	f041 0103 	orr.w	r1, r1, #3
   13ed6:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   13ed8:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   13edc:	f013 0002 	ands.w	r0, r3, #2
   13ee0:	d049      	beq.n	13f76 <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   13ee2:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   13ee4:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   13ee6:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   13eea:	d5c8      	bpl.n	13e7e <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   13eec:	065a      	lsls	r2, r3, #25
   13eee:	d43d      	bmi.n	13f6c <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   13ef0:	f013 0f04 	tst.w	r3, #4
   13ef4:	bf14      	ite	ne
   13ef6:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   13efa:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   13efe:	4e1f      	ldr	r6, [pc, #124]	; (13f7c <gpio_nrf5_config+0x10c>)
   13f00:	6837      	ldr	r7, [r6, #0]
   13f02:	4638      	mov	r0, r7
   13f04:	f7ec f99e 	bl	244 <__popcountsi2>
   13f08:	2808      	cmp	r0, #8
   13f0a:	d032      	beq.n	13f72 <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   13f0c:	4641      	mov	r1, r8
   13f0e:	4620      	mov	r0, r4
   13f10:	f7ff ff4c 	bl	13dac <gpiote_find_channel.isra.4>
		if (i < 0) {
   13f14:	2800      	cmp	r0, #0
   13f16:	da08      	bge.n	13f2a <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   13f18:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   13f1a:	fa93 f0a3 	rbit	r0, r3
   13f1e:	2b00      	cmp	r3, #0
   13f20:	fab0 f080 	clz	r0, r0
   13f24:	bf08      	it	eq
   13f26:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   13f2a:	2301      	movs	r3, #1
   13f2c:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   13f2e:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   13f30:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   13f32:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   13f36:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   13f38:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   13f3c:	4b10      	ldr	r3, [pc, #64]	; (13f80 <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   13f3e:	f044 0401 	orr.w	r4, r4, #1
   13f42:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   13f44:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   13f48:	2000      	movs	r0, #0
   13f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   13f4e:	220c      	movs	r2, #12
   13f50:	e7a9      	b.n	13ea6 <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   13f52:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   13f54:	bf02      	ittt	eq
   13f56:	2701      	moveq	r7, #1
   13f58:	40a7      	lsleq	r7, r4
   13f5a:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   13f5e:	e7b5      	b.n	13ecc <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   13f60:	4461      	add	r1, ip
   13f62:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   13f66:	430a      	orrs	r2, r1
   13f68:	433a      	orrs	r2, r7
   13f6a:	e7b5      	b.n	13ed8 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   13f6c:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   13f70:	e7c5      	b.n	13efe <gpio_nrf5_config+0x8e>
			return -EIO;
   13f72:	f06f 0004 	mvn.w	r0, #4
}
   13f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f7a:	bf00      	nop
   13f7c:	20001754 	.word	0x20001754
   13f80:	40006000 	.word	0x40006000
   13f84:	00019628 	.word	0x00019628

00013f88 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   13f88:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   13f8a:	2200      	movs	r2, #0
   13f8c:	2105      	movs	r1, #5
   13f8e:	2006      	movs	r0, #6
   13f90:	f7ed fc9a 	bl	18c8 <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   13f94:	2006      	movs	r0, #6
   13f96:	f7ed fc65 	bl	1864 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   13f9a:	2000      	movs	r0, #0
   13f9c:	bd08      	pop	{r3, pc}
	...

00013fa0 <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13fa0:	2100      	movs	r1, #0
{
   13fa2:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   13fa4:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   13fa6:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   13fa8:	2501      	movs	r5, #1
   13faa:	008b      	lsls	r3, r1, #2
   13fac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13fb0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   13fb4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   13fb8:	b140      	cbz	r0, 13fcc <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   13fba:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   13fbe:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   13fc2:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   13fc6:	fa05 f303 	lsl.w	r3, r5, r3
   13fca:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13fcc:	3101      	adds	r1, #1
   13fce:	2908      	cmp	r1, #8
   13fd0:	d1eb      	bne.n	13faa <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   13fd2:	4e08      	ldr	r6, [pc, #32]	; (13ff4 <gpio_nrf5_port_isr+0x54>)
   13fd4:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   13fd6:	689d      	ldr	r5, [r3, #8]
   13fd8:	681c      	ldr	r4, [r3, #0]
   13fda:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   13fdc:	b14c      	cbz	r4, 13ff2 <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   13fde:	68a3      	ldr	r3, [r4, #8]
   13fe0:	421d      	tst	r5, r3
   13fe2:	d004      	beq.n	13fee <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   13fe4:	6863      	ldr	r3, [r4, #4]
   13fe6:	462a      	mov	r2, r5
   13fe8:	4621      	mov	r1, r4
   13fea:	4630      	mov	r0, r6
   13fec:	4798      	blx	r3
	return node->next;
   13fee:	6824      	ldr	r4, [r4, #0]
   13ff0:	e7f4      	b.n	13fdc <gpio_nrf5_port_isr+0x3c>
   13ff2:	bd70      	pop	{r4, r5, r6, pc}
   13ff4:	20003fb8 	.word	0x20003fb8

00013ff8 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13ff8:	4b03      	ldr	r3, [pc, #12]	; (14008 <uart_nrfx_err_check+0x10>)
   13ffa:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   13ffc:	b118      	cbz	r0, 14006 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   13ffe:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   14002:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   14006:	4770      	bx	lr
   14008:	40002124 	.word	0x40002124

0001400c <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1400c:	4b07      	ldr	r3, [pc, #28]	; (1402c <uart_nrfx_poll_out+0x20>)
   1400e:	2200      	movs	r2, #0
   14010:	601a      	str	r2, [r3, #0]
{
   14012:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   14014:	681a      	ldr	r2, [r3, #0]
   14016:	9201      	str	r2, [sp, #4]
    (void)dummy;
   14018:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   1401a:	4a05      	ldr	r2, [pc, #20]	; (14030 <uart_nrfx_poll_out+0x24>)
   1401c:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14020:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   14022:	2a00      	cmp	r2, #0
   14024:	d0fc      	beq.n	14020 <uart_nrfx_poll_out+0x14>
}
   14026:	4608      	mov	r0, r1
   14028:	b002      	add	sp, #8
   1402a:	4770      	bx	lr
   1402c:	4000211c 	.word	0x4000211c
   14030:	40002000 	.word	0x40002000

00014034 <uart_nrfx_poll_in>:
   14034:	4b08      	ldr	r3, [pc, #32]	; (14058 <uart_nrfx_poll_in+0x24>)
   14036:	681a      	ldr	r2, [r3, #0]
{
   14038:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   1403a:	b152      	cbz	r2, 14052 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1403c:	2000      	movs	r0, #0
   1403e:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   14040:	681b      	ldr	r3, [r3, #0]
   14042:	9301      	str	r3, [sp, #4]
    (void)dummy;
   14044:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   14046:	4b05      	ldr	r3, [pc, #20]	; (1405c <uart_nrfx_poll_in+0x28>)
   14048:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1404c:	700b      	strb	r3, [r1, #0]
}
   1404e:	b002      	add	sp, #8
   14050:	4770      	bx	lr
		return -1;
   14052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14056:	e7fa      	b.n	1404e <uart_nrfx_poll_in+0x1a>
   14058:	40002108 	.word	0x40002108
   1405c:	40002000 	.word	0x40002000

00014060 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   14060:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   14062:	4819      	ldr	r0, [pc, #100]	; (140c8 <uart_nrfx_init+0x68>)
   14064:	f000 f98c 	bl	14380 <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   14068:	6843      	ldr	r3, [r0, #4]
   1406a:	4604      	mov	r4, r0
   1406c:	681d      	ldr	r5, [r3, #0]
   1406e:	2206      	movs	r2, #6
   14070:	f240 1301 	movw	r3, #257	; 0x101
   14074:	2100      	movs	r1, #0
   14076:	47a8      	blx	r5
   14078:	6863      	ldr	r3, [r4, #4]
   1407a:	681d      	ldr	r5, [r3, #0]
   1407c:	2300      	movs	r3, #0
   1407e:	4619      	mov	r1, r3
   14080:	2208      	movs	r2, #8
   14082:	4620      	mov	r0, r4
   14084:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   14086:	4b11      	ldr	r3, [pc, #68]	; (140cc <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14088:	4911      	ldr	r1, [pc, #68]	; (140d0 <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   1408a:	2208      	movs	r2, #8
   1408c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   14090:	2206      	movs	r2, #6
   14092:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   14096:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   14098:	4a0e      	ldr	r2, [pc, #56]	; (140d4 <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   1409a:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   1409e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   140a2:	2204      	movs	r2, #4
   140a4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   140a8:	4a0b      	ldr	r2, [pc, #44]	; (140d8 <uart_nrfx_init+0x78>)
   140aa:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   140ac:	6812      	ldr	r2, [r2, #0]
   140ae:	9201      	str	r2, [sp, #4]
    (void)dummy;
   140b0:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   140b2:	4a0a      	ldr	r2, [pc, #40]	; (140dc <uart_nrfx_init+0x7c>)
   140b4:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   140b6:	6812      	ldr	r2, [r2, #0]
   140b8:	9200      	str	r2, [sp, #0]
    (void)dummy;
   140ba:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   140bc:	2201      	movs	r2, #1
   140be:	600a      	str	r2, [r1, #0]
   140c0:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   140c2:	b003      	add	sp, #12
   140c4:	bd30      	pop	{r4, r5, pc}
   140c6:	bf00      	nop
   140c8:	0001968c 	.word	0x0001968c
   140cc:	40002000 	.word	0x40002000
   140d0:	40002008 	.word	0x40002008
   140d4:	01d7e000 	.word	0x01d7e000
   140d8:	4000211c 	.word	0x4000211c
   140dc:	40002108 	.word	0x40002108

000140e0 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   140e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   140e4:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   140e6:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   140e8:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   140ea:	42a3      	cmp	r3, r4
	d = &rand[octets];
   140ec:	440a      	add	r2, r1
	s = &rng->rand[first];
   140ee:	4406      	add	r6, r0
	if (first <= last) {
   140f0:	d81f      	bhi.n	14132 <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   140f2:	1ae4      	subs	r4, r4, r3
   140f4:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   140f6:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   140f8:	bf3e      	ittt	cc
   140fa:	1a64      	subcc	r4, r4, r1
   140fc:	b2e7      	uxtbcc	r7, r4
   140fe:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   14100:	4423      	add	r3, r4
		octets -= avail;
   14102:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   14106:	bf28      	it	cs
   14108:	2700      	movcs	r7, #0
		first += avail;
   1410a:	b2db      	uxtb	r3, r3
		octets -= avail;
   1410c:	b2c9      	uxtb	r1, r1
   1410e:	4434      	add	r4, r6

		while (avail--) {
   14110:	42a6      	cmp	r6, r4
   14112:	d109      	bne.n	14128 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   14114:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   14116:	7843      	ldrb	r3, [r0, #1]
   14118:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   1411a:	bf82      	ittt	hi
   1411c:	4b20      	ldrhi	r3, [pc, #128]	; (141a0 <get+0xc0>)
   1411e:	2201      	movhi	r2, #1
   14120:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   14122:	4608      	mov	r0, r1
   14124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   14128:	f816 5b01 	ldrb.w	r5, [r6], #1
   1412c:	f802 5d01 	strb.w	r5, [r2, #-1]!
   14130:	e7ee      	b.n	14110 <get+0x30>
		avail = rng->count - first;
   14132:	7805      	ldrb	r5, [r0, #0]
   14134:	1aed      	subs	r5, r5, r3
   14136:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   14138:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   1413a:	bf3f      	itttt	cc
   1413c:	1a67      	subcc	r7, r4, r1
   1413e:	19ed      	addcc	r5, r5, r7
   14140:	b2ef      	uxtbcc	r7, r5
   14142:	460d      	movcc	r5, r1
			first += avail;
   14144:	bf38      	it	cc
   14146:	185b      	addcc	r3, r3, r1
		octets -= avail;
   14148:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   1414c:	bf32      	itee	cc
   1414e:	b2db      	uxtbcc	r3, r3
   14150:	4627      	movcs	r7, r4
			first = 0;
   14152:	2300      	movcs	r3, #0
		octets -= avail;
   14154:	b2c9      	uxtb	r1, r1
   14156:	4696      	mov	lr, r2
   14158:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   1415c:	4566      	cmp	r6, ip
   1415e:	d119      	bne.n	14194 <get+0xb4>
   14160:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   14162:	2900      	cmp	r1, #0
   14164:	d0d6      	beq.n	14114 <get+0x34>
   14166:	2c00      	cmp	r4, #0
   14168:	d0d4      	beq.n	14114 <get+0x34>
			if (octets < last) {
   1416a:	428c      	cmp	r4, r1
   1416c:	bf8a      	itet	hi
   1416e:	460b      	movhi	r3, r1
   14170:	4623      	movls	r3, r4
				remaining = last - octets;
   14172:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   14174:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   14178:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   1417c:	bf8c      	ite	hi
   1417e:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   14180:	2700      	movls	r7, #0
			octets -= last;
   14182:	b2c9      	uxtb	r1, r1
   14184:	18f4      	adds	r4, r6, r3
			while (last--) {
   14186:	42a6      	cmp	r6, r4
   14188:	d0c4      	beq.n	14114 <get+0x34>
				*(--d) = *s++;
   1418a:	f816 5b01 	ldrb.w	r5, [r6], #1
   1418e:	f802 5d01 	strb.w	r5, [r2, #-1]!
   14192:	e7f8      	b.n	14186 <get+0xa6>
			*(--d) = *s++;
   14194:	f816 8b01 	ldrb.w	r8, [r6], #1
   14198:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   1419c:	e7de      	b.n	1415c <get+0x7c>
   1419e:	bf00      	nop
   141a0:	4000d000 	.word	0x4000d000

000141a4 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   141a4:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   141a6:	b1d0      	cbz	r0, 141de <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   141a8:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   141aa:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   141ac:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   141ae:	1c53      	adds	r3, r2, #1
   141b0:	b2db      	uxtb	r3, r3
		last = 0;
   141b2:	42ab      	cmp	r3, r5
   141b4:	bf08      	it	eq
   141b6:	2300      	moveq	r3, #0
	if (last == rng->first) {
   141b8:	42a3      	cmp	r3, r4
   141ba:	d010      	beq.n	141de <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   141bc:	b161      	cbz	r1, 141d8 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   141be:	490a      	ldr	r1, [pc, #40]	; (141e8 <isr+0x44>)
   141c0:	4402      	add	r2, r0
   141c2:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   141c6:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   141c8:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   141ca:	3301      	adds	r3, #1
   141cc:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   141ce:	429d      	cmp	r5, r3
   141d0:	bf08      	it	eq
   141d2:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   141d4:	42a3      	cmp	r3, r4
   141d6:	d005      	beq.n	141e4 <isr+0x40>
		return 0;
	}

	return -EBUSY;
   141d8:	f06f 000f 	mvn.w	r0, #15
   141dc:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   141de:	f06f 0036 	mvn.w	r0, #54	; 0x36
   141e2:	bd30      	pop	{r4, r5, pc}
		return 0;
   141e4:	2000      	movs	r0, #0
}
   141e6:	bd30      	pop	{r4, r5, pc}
   141e8:	4000d000 	.word	0x4000d000

000141ec <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   141ec:	07db      	lsls	r3, r3, #31
{
   141ee:	b570      	push	{r4, r5, r6, lr}
   141f0:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   141f2:	d507      	bpl.n	14204 <entropy_nrf5_get_entropy_isr+0x18>
   141f4:	4613      	mov	r3, r2
   141f6:	4a0d      	ldr	r2, [pc, #52]	; (1422c <entropy_nrf5_get_entropy_isr+0x40>)
   141f8:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   141fa:	2500      	movs	r5, #0
	while (len) {
   141fc:	b94b      	cbnz	r3, 14212 <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   141fe:	6050      	str	r0, [r2, #4]

	return cnt;
   14200:	4620      	mov	r0, r4
}
   14202:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   14204:	6880      	ldr	r0, [r0, #8]
   14206:	460a      	mov	r2, r1
   14208:	3044      	adds	r0, #68	; 0x44
   1420a:	b2e1      	uxtb	r1, r4
   1420c:	f7ff ff68 	bl	140e0 <get>
   14210:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   14212:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   14216:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   14218:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   1421c:	2e00      	cmp	r6, #0
   1421e:	d0fb      	beq.n	14218 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   14220:	3b01      	subs	r3, #1
   14222:	b29b      	uxth	r3, r3
   14224:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   14228:	54ce      	strb	r6, [r1, r3]
   1422a:	e7e7      	b.n	141fc <entropy_nrf5_get_entropy_isr+0x10>
   1422c:	4000d000 	.word	0x4000d000

00014230 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   14230:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   14232:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   14234:	2201      	movs	r2, #1
   14236:	4611      	mov	r1, r2
   14238:	4620      	mov	r0, r4
   1423a:	f000 fddf 	bl	14dfc <_impl_k_sem_init>
   1423e:	f104 001c 	add.w	r0, r4, #28
   14242:	2201      	movs	r2, #1
   14244:	2100      	movs	r1, #0
   14246:	f000 fdd9 	bl	14dfc <_impl_k_sem_init>
	rng->threshold = threshold;
   1424a:	2304      	movs	r3, #4
   1424c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   14250:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   14252:	2500      	movs	r5, #0
	rng->threshold = threshold;
   14254:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	rng->count = len;
   14258:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1425a:	4b11      	ldr	r3, [pc, #68]	; (142a0 <entropy_nrf5_init+0x70>)
	rng->count = len;
   1425c:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
   14260:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   14262:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
   14266:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
	rng->count = len;
   1426a:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
	rng->first = rng->last = 0;
   1426e:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
   14272:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   14276:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1427a:	f042 0201 	orr.w	r2, r2, #1
   1427e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   14282:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   14284:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   14288:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   1428a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   1428e:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   14290:	462a      	mov	r2, r5
   14292:	f7ed fb19 	bl	18c8 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   14296:	4630      	mov	r0, r6
   14298:	f7ed fae4 	bl	1864 <_arch_irq_enable>

	return 0;
}
   1429c:	4628      	mov	r0, r5
   1429e:	bd70      	pop	{r4, r5, r6, pc}
   142a0:	4000d000 	.word	0x4000d000

000142a4 <isr_rand>:
{
   142a4:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   142a6:	4b12      	ldr	r3, [pc, #72]	; (142f0 <isr_rand+0x4c>)
   142a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   142ac:	b1fb      	cbz	r3, 142ee <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   142ae:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   142b0:	2101      	movs	r1, #1
   142b2:	f105 0044 	add.w	r0, r5, #68	; 0x44
   142b6:	f7ff ff75 	bl	141a4 <isr>
		if (ret != -EBUSY) {
   142ba:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   142be:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   142c0:	d00d      	beq.n	142de <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   142c2:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   142c6:	bf14      	ite	ne
   142c8:	2100      	movne	r1, #0
   142ca:	2101      	moveq	r1, #1
   142cc:	f105 0038 	add.w	r0, r5, #56	; 0x38
   142d0:	f7ff ff68 	bl	141a4 <isr>
   142d4:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   142d6:	f105 001c 	add.w	r0, r5, #28
   142da:	f000 fda7 	bl	14e2c <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   142de:	4b04      	ldr	r3, [pc, #16]	; (142f0 <isr_rand+0x4c>)
   142e0:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   142e2:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   142e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   142e8:	bf1c      	itt	ne
   142ea:	2201      	movne	r2, #1
   142ec:	605a      	strne	r2, [r3, #4]
   142ee:	bd38      	pop	{r3, r4, r5, pc}
   142f0:	4000d000 	.word	0x4000d000

000142f4 <entropy_nrf5_get_entropy>:
{
   142f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   142f8:	6885      	ldr	r5, [r0, #8]
{
   142fa:	460f      	mov	r7, r1
   142fc:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   142fe:	f105 081c 	add.w	r8, r5, #28
	while (len) {
   14302:	b914      	cbnz	r4, 1430a <entropy_nrf5_get_entropy+0x16>
}
   14304:	4620      	mov	r0, r4
   14306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1430a:	2cff      	cmp	r4, #255	; 0xff
   1430c:	4623      	mov	r3, r4
   1430e:	bf28      	it	cs
   14310:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   14312:	1ae4      	subs	r4, r4, r3
   14314:	b2de      	uxtb	r6, r3
   14316:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   14318:	f105 0938 	add.w	r9, r5, #56	; 0x38
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1431c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14320:	4628      	mov	r0, r5
   14322:	f000 fdab 	bl	14e7c <_impl_k_sem_take>
   14326:	4631      	mov	r1, r6
   14328:	463a      	mov	r2, r7
   1432a:	4648      	mov	r0, r9
   1432c:	f7ff fed8 	bl	140e0 <get>
   14330:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   14332:	4628      	mov	r0, r5
   14334:	f000 fd7a 	bl	14e2c <_impl_k_sem_give>
			if (len8) {
   14338:	2e00      	cmp	r6, #0
   1433a:	d0e2      	beq.n	14302 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1433c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14340:	4640      	mov	r0, r8
   14342:	f000 fd9b 	bl	14e7c <_impl_k_sem_take>
   14346:	e7e9      	b.n	1431c <entropy_nrf5_get_entropy+0x28>

00014348 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   14348:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   1434a:	4802      	ldr	r0, [pc, #8]	; (14354 <entropy_nrf_get_entropy_isr+0xc>)
   1434c:	460a      	mov	r2, r1
   1434e:	4619      	mov	r1, r3
   14350:	f7ff bec6 	b.w	140e0 <get>
   14354:	2000179c 	.word	0x2000179c

00014358 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   14358:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   1435a:	4b08      	ldr	r3, [pc, #32]	; (1437c <_sys_device_do_config_level+0x24>)
   1435c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   14360:	3001      	adds	r0, #1
   14362:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   14366:	4620      	mov	r0, r4
   14368:	42a8      	cmp	r0, r5
   1436a:	f104 040c 	add.w	r4, r4, #12
   1436e:	d300      	bcc.n	14372 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   14370:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   14372:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   14376:	685b      	ldr	r3, [r3, #4]
   14378:	4798      	blx	r3
   1437a:	e7f4      	b.n	14366 <_sys_device_do_config_level+0xe>
   1437c:	000196a8 	.word	0x000196a8

00014380 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   14380:	4b10      	ldr	r3, [pc, #64]	; (143c4 <device_get_binding+0x44>)
{
   14382:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   14384:	4c10      	ldr	r4, [pc, #64]	; (143c8 <device_get_binding+0x48>)
{
   14386:	4605      	mov	r5, r0
   14388:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1438a:	429c      	cmp	r4, r3
   1438c:	d104      	bne.n	14398 <device_get_binding+0x18>
   1438e:	4c0e      	ldr	r4, [pc, #56]	; (143c8 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   14390:	42b4      	cmp	r4, r6
   14392:	d109      	bne.n	143a8 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   14394:	2400      	movs	r4, #0
   14396:	e012      	b.n	143be <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   14398:	6862      	ldr	r2, [r4, #4]
   1439a:	b11a      	cbz	r2, 143a4 <device_get_binding+0x24>
   1439c:	6822      	ldr	r2, [r4, #0]
   1439e:	6812      	ldr	r2, [r2, #0]
   143a0:	42aa      	cmp	r2, r5
   143a2:	d00c      	beq.n	143be <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   143a4:	340c      	adds	r4, #12
   143a6:	e7f0      	b.n	1438a <device_get_binding+0xa>
		if (!info->driver_api) {
   143a8:	6863      	ldr	r3, [r4, #4]
   143aa:	b90b      	cbnz	r3, 143b0 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   143ac:	340c      	adds	r4, #12
   143ae:	e7ef      	b.n	14390 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   143b0:	6823      	ldr	r3, [r4, #0]
   143b2:	4628      	mov	r0, r5
   143b4:	6819      	ldr	r1, [r3, #0]
   143b6:	f7ed fc11 	bl	1bdc <strcmp>
   143ba:	2800      	cmp	r0, #0
   143bc:	d1f6      	bne.n	143ac <device_get_binding+0x2c>
}
   143be:	4620      	mov	r0, r4
   143c0:	bd70      	pop	{r4, r5, r6, pc}
   143c2:	bf00      	nop
   143c4:	20003fe8 	.word	0x20003fe8
   143c8:	20003f34 	.word	0x20003f34

000143cc <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   143cc:	1c43      	adds	r3, r0, #1
   143ce:	d003      	beq.n	143d8 <_sys_power_save_idle_exit+0xc>
   143d0:	4b03      	ldr	r3, [pc, #12]	; (143e0 <_sys_power_save_idle_exit+0x14>)
   143d2:	681b      	ldr	r3, [r3, #0]
   143d4:	4298      	cmp	r0, r3
   143d6:	db01      	blt.n	143dc <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   143d8:	f7ed b808 	b.w	13ec <_timer_idle_exit>
   143dc:	4770      	bx	lr
   143de:	bf00      	nop
   143e0:	20003f28 	.word	0x20003f28

000143e4 <idle>:
	return list->head == list;
   143e4:	4d0f      	ldr	r5, [pc, #60]	; (14424 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   143e6:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   143e8:	4f0f      	ldr	r7, [pc, #60]	; (14428 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   143ea:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   143ee:	f04f 0220 	mov.w	r2, #32
   143f2:	f3ef 8311 	mrs	r3, BASEPRI
   143f6:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   143fa:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   143fc:	42b3      	cmp	r3, r6
   143fe:	d00a      	beq.n	14416 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   14400:	b14b      	cbz	r3, 14416 <idle+0x32>
   14402:	691c      	ldr	r4, [r3, #16]
   14404:	1c63      	adds	r3, r4, #1
   14406:	d008      	beq.n	1441a <idle+0x36>
   14408:	683b      	ldr	r3, [r7, #0]
   1440a:	42a3      	cmp	r3, r4
   1440c:	dd05      	ble.n	1441a <idle+0x36>
	_kernel.idle = ticks;
   1440e:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   14410:	f7ed fab2 	bl	1978 <k_cpu_idle>
   14414:	e7eb      	b.n	143ee <idle+0xa>
   14416:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   1441a:	4620      	mov	r0, r4
   1441c:	f7ec ffc8 	bl	13b0 <_timer_idle_enter>
   14420:	e7f5      	b.n	1440e <idle+0x2a>
   14422:	bf00      	nop
   14424:	200019b8 	.word	0x200019b8
   14428:	20003f28 	.word	0x20003f28

0001442c <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   1442c:	4802      	ldr	r0, [pc, #8]	; (14438 <_bss_zero+0xc>)
   1442e:	4a03      	ldr	r2, [pc, #12]	; (1443c <_bss_zero+0x10>)
   14430:	2100      	movs	r1, #0
   14432:	1a12      	subs	r2, r2, r0
   14434:	f7ed bc20 	b.w	1c78 <memset>
   14438:	20000000 	.word	0x20000000
   1443c:	20001a7c 	.word	0x20001a7c

00014440 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   14440:	4802      	ldr	r0, [pc, #8]	; (1444c <_data_copy+0xc>)
   14442:	4a03      	ldr	r2, [pc, #12]	; (14450 <_data_copy+0x10>)
   14444:	4903      	ldr	r1, [pc, #12]	; (14454 <_data_copy+0x14>)
   14446:	1a12      	subs	r2, r2, r0
   14448:	f7ed bbea 	b.w	1c20 <memcpy>
   1444c:	20003a98 	.word	0x20003a98
   14450:	200040a8 	.word	0x200040a8
   14454:	000196f8 	.word	0x000196f8

00014458 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   14458:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1445a:	2002      	movs	r0, #2
   1445c:	f7ff ff7c 	bl	14358 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   14460:	4807      	ldr	r0, [pc, #28]	; (14480 <bg_thread_main+0x28>)
   14462:	f7ec fd93 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   14466:	2003      	movs	r0, #3
   14468:	f7ff ff76 	bl	14358 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   1446c:	f000 ff2e 	bl	152cc <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   14470:	f7ec f926 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   14474:	4a03      	ldr	r2, [pc, #12]	; (14484 <bg_thread_main+0x2c>)
   14476:	7a13      	ldrb	r3, [r2, #8]
   14478:	f023 0301 	bic.w	r3, r3, #1
   1447c:	7213      	strb	r3, [r2, #8]
   1447e:	bd08      	pop	{r3, pc}
   14480:	000196c4 	.word	0x000196c4
   14484:	20001820 	.word	0x20001820

00014488 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   14488:	b580      	push	{r7, lr}
   1448a:	b086      	sub	sp, #24
   1448c:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   1448e:	f7ed f835 	bl	14fc <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   14492:	4b30      	ldr	r3, [pc, #192]	; (14554 <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   14494:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14498:	4b2f      	ldr	r3, [pc, #188]	; (14558 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   1449a:	4d30      	ldr	r5, [pc, #192]	; (1455c <_Cstart+0xd4>)
   1449c:	4e30      	ldr	r6, [pc, #192]	; (14560 <_Cstart+0xd8>)
   1449e:	2400      	movs	r4, #0
   144a0:	22e0      	movs	r2, #224	; 0xe0
   144a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   144a6:	77dc      	strb	r4, [r3, #31]
   144a8:	761c      	strb	r4, [r3, #24]
   144aa:	765c      	strb	r4, [r3, #25]
   144ac:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   144ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   144b0:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   144b4:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   144b6:	f7ed f9cd 	bl	1854 <_FaultInit>
	_CpuIdleInit();
   144ba:	f7ed fa57 	bl	196c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   144be:	4620      	mov	r0, r4
   144c0:	f7ff ff4a 	bl	14358 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   144c4:	2001      	movs	r0, #1
   144c6:	f7ff ff47 	bl	14358 <_sys_device_do_config_level>
	_sched_init();
   144ca:	f000 fc43 	bl	14d54 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   144ce:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   144d0:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   144d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   144d6:	9304      	str	r3, [sp, #16]
   144d8:	9403      	str	r4, [sp, #12]
   144da:	9402      	str	r4, [sp, #8]
   144dc:	9401      	str	r4, [sp, #4]
   144de:	9400      	str	r4, [sp, #0]
   144e0:	4b20      	ldr	r3, [pc, #128]	; (14564 <_Cstart+0xdc>)
   144e2:	4921      	ldr	r1, [pc, #132]	; (14568 <_Cstart+0xe0>)
   144e4:	4628      	mov	r0, r5
   144e6:	f000 fe99 	bl	1521c <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   144ea:	7a6b      	ldrb	r3, [r5, #9]
   144ec:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   144f0:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   144f4:	726a      	strb	r2, [r5, #9]
   144f6:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   144f8:	d102      	bne.n	14500 <_Cstart+0x78>
   144fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   144fc:	3301      	adds	r3, #1
   144fe:	d024      	beq.n	1454a <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   14500:	2301      	movs	r3, #1
   14502:	4e1a      	ldr	r6, [pc, #104]	; (1456c <_Cstart+0xe4>)
   14504:	9304      	str	r3, [sp, #16]
   14506:	230f      	movs	r3, #15
   14508:	9303      	str	r3, [sp, #12]
   1450a:	2300      	movs	r3, #0
   1450c:	9302      	str	r3, [sp, #8]
   1450e:	9301      	str	r3, [sp, #4]
   14510:	9300      	str	r3, [sp, #0]
   14512:	f44f 72a0 	mov.w	r2, #320	; 0x140
   14516:	4b16      	ldr	r3, [pc, #88]	; (14570 <_Cstart+0xe8>)
   14518:	4916      	ldr	r1, [pc, #88]	; (14574 <_Cstart+0xec>)
   1451a:	4630      	mov	r0, r6
   1451c:	f000 fe7e 	bl	1521c <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14520:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   14522:	60e6      	str	r6, [r4, #12]
   14524:	f023 0304 	bic.w	r3, r3, #4
   14528:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   1452a:	4b13      	ldr	r3, [pc, #76]	; (14578 <_Cstart+0xf0>)
   1452c:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   1452e:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   14530:	4b12      	ldr	r3, [pc, #72]	; (1457c <_Cstart+0xf4>)

	_current = main_thread;
   14532:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   14534:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   14538:	4c11      	ldr	r4, [pc, #68]	; (14580 <_Cstart+0xf8>)
   1453a:	4a0a      	ldr	r2, [pc, #40]	; (14564 <_Cstart+0xdc>)
   1453c:	f383 8809 	msr	PSP, r3
   14540:	2100      	movs	r1, #0
   14542:	f381 8811 	msr	BASEPRI, r1
   14546:	4610      	mov	r0, r2
   14548:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   1454a:	4628      	mov	r0, r5
   1454c:	f000 fb02 	bl	14b54 <_add_thread_to_ready_q>
   14550:	e7d6      	b.n	14500 <_Cstart+0x78>
   14552:	bf00      	nop
   14554:	20003698 	.word	0x20003698
   14558:	e000ed00 	.word	0xe000ed00
   1455c:	20001820 	.word	0x20001820
   14560:	200019b8 	.word	0x200019b8
   14564:	00014459 	.word	0x00014459
   14568:	20002958 	.word	0x20002958
   1456c:	200017b0 	.word	0x200017b0
   14570:	000143e5 	.word	0x000143e5
   14574:	20002d58 	.word	0x20002d58
   14578:	200019cc 	.word	0x200019cc
   1457c:	20002d58 	.word	0x20002d58
   14580:	00000899 	.word	0x00000899

00014584 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   14584:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   14586:	4c07      	ldr	r4, [pc, #28]	; (145a4 <init_static_pools+0x20>)
   14588:	4d07      	ldr	r5, [pc, #28]	; (145a8 <init_static_pools+0x24>)
   1458a:	42ac      	cmp	r4, r5
   1458c:	d301      	bcc.n	14592 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1458e:	2000      	movs	r0, #0
   14590:	bd38      	pop	{r3, r4, r5, pc}
   14592:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   14596:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   14598:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   1459a:	4620      	mov	r0, r4
   1459c:	f7ec f9b7 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   145a0:	341c      	adds	r4, #28
   145a2:	e7f2      	b.n	1458a <init_static_pools+0x6>
   145a4:	20003fe8 	.word	0x20003fe8
   145a8:	20003fe8 	.word	0x20003fe8

000145ac <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   145ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   145b0:	1e1d      	subs	r5, r3, #0
{
   145b2:	b085      	sub	sp, #20
   145b4:	4607      	mov	r7, r0
   145b6:	460c      	mov	r4, r1
   145b8:	4692      	mov	sl, r2
	if (timeout > 0) {
   145ba:	dd4c      	ble.n	14656 <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   145bc:	f000 fc84 	bl	14ec8 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   145c0:	f105 0309 	add.w	r3, r5, #9
   145c4:	220a      	movs	r2, #10
   145c6:	fbb3 f3f2 	udiv	r3, r3, r2
   145ca:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   145ce:	4b23      	ldr	r3, [pc, #140]	; (1465c <k_mem_pool_alloc+0xb0>)
   145d0:	4e23      	ldr	r6, [pc, #140]	; (14660 <k_mem_pool_alloc+0xb4>)
   145d2:	1afb      	subs	r3, r7, r3
   145d4:	109b      	asrs	r3, r3, #2
   145d6:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   145d8:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   145da:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   145de:	9400      	str	r4, [sp, #0]
   145e0:	ab03      	add	r3, sp, #12
   145e2:	aa02      	add	r2, sp, #8
   145e4:	4651      	mov	r1, sl
   145e6:	4638      	mov	r0, r7
   145e8:	f7ec f9dc 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   145ec:	f110 0f0b 	cmn.w	r0, #11
   145f0:	d10b      	bne.n	1460a <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   145f2:	9400      	str	r4, [sp, #0]
   145f4:	ab03      	add	r3, sp, #12
   145f6:	aa02      	add	r2, sp, #8
   145f8:	4651      	mov	r1, sl
   145fa:	4638      	mov	r0, r7
   145fc:	f7ec f9d2 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   14600:	f110 0f0b 	cmn.w	r0, #11
   14604:	bf08      	it	eq
   14606:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   1460a:	7963      	ldrb	r3, [r4, #5]
   1460c:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1460e:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   14610:	f362 0303 	bfi	r3, r2, #0, #4
   14614:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   14616:	6863      	ldr	r3, [r4, #4]
   14618:	9a03      	ldr	r2, [sp, #12]
   1461a:	f362 331f 	bfi	r3, r2, #12, #20
   1461e:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   14620:	b1b0      	cbz	r0, 14650 <k_mem_pool_alloc+0xa4>
   14622:	b1ad      	cbz	r5, 14650 <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   14624:	f110 0f0c 	cmn.w	r0, #12
   14628:	d112      	bne.n	14650 <k_mem_pool_alloc+0xa4>
   1462a:	f04f 0320 	mov.w	r3, #32
   1462e:	f3ef 8011 	mrs	r0, BASEPRI
   14632:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   14636:	462a      	mov	r2, r5
   14638:	4659      	mov	r1, fp
   1463a:	f000 fb39 	bl	14cb0 <_pend_current_thread>

		if (timeout != K_FOREVER) {
   1463e:	1c6b      	adds	r3, r5, #1
   14640:	d0cd      	beq.n	145de <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   14642:	f000 fc41 	bl	14ec8 <_tick_get>

			if (timeout < 0) {
   14646:	ebb8 0500 	subs.w	r5, r8, r0
   1464a:	d5c8      	bpl.n	145de <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   1464c:	f06f 000a 	mvn.w	r0, #10
}
   14650:	b005      	add	sp, #20
   14652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   14656:	f04f 0800 	mov.w	r8, #0
   1465a:	e7b8      	b.n	145ce <k_mem_pool_alloc+0x22>
   1465c:	20003fe8 	.word	0x20003fe8
   14660:	b6db6db7 	.word	0xb6db6db7

00014664 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   14664:	b570      	push	{r4, r5, r6, lr}
   14666:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   14668:	6802      	ldr	r2, [r0, #0]
   1466a:	7841      	ldrb	r1, [r0, #1]
   1466c:	4e13      	ldr	r6, [pc, #76]	; (146bc <k_mem_pool_free_id+0x58>)
   1466e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14672:	00a4      	lsls	r4, r4, #2
   14674:	0b12      	lsrs	r2, r2, #12
   14676:	f001 010f 	and.w	r1, r1, #15
   1467a:	1930      	adds	r0, r6, r4
   1467c:	f7ec fa44 	bl	b08 <_sys_mem_pool_block_free>
   14680:	f04f 0320 	mov.w	r3, #32
   14684:	f3ef 8511 	mrs	r5, BASEPRI
   14688:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   1468c:	f104 0014 	add.w	r0, r4, #20
   14690:	4430      	add	r0, r6
   14692:	f000 fb4f 	bl	14d34 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   14696:	b140      	cbz	r0, 146aa <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14698:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   1469c:	2b0d      	cmp	r3, #13
   1469e:	d804      	bhi.n	146aa <k_mem_pool_free_id+0x46>
   146a0:	b133      	cbz	r3, 146b0 <k_mem_pool_free_id+0x4c>
   146a2:	4b07      	ldr	r3, [pc, #28]	; (146c0 <k_mem_pool_free_id+0x5c>)
   146a4:	685b      	ldr	r3, [r3, #4]
   146a6:	051b      	lsls	r3, r3, #20
   146a8:	d402      	bmi.n	146b0 <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   146aa:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   146ae:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   146b0:	4628      	mov	r0, r5
}
   146b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   146b6:	f000 b9fb 	b.w	14ab0 <_reschedule>
   146ba:	bf00      	nop
   146bc:	20003fe8 	.word	0x20003fe8
   146c0:	e000ed00 	.word	0xe000ed00

000146c4 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   146c4:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   146c6:	1d0a      	adds	r2, r1, #4
   146c8:	d204      	bcs.n	146d4 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   146ca:	2300      	movs	r3, #0
   146cc:	4669      	mov	r1, sp
   146ce:	f7ff ff6d 	bl	145ac <k_mem_pool_alloc>
   146d2:	b118      	cbz	r0, 146dc <k_mem_pool_malloc+0x18>
		return NULL;
   146d4:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   146d6:	b003      	add	sp, #12
   146d8:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   146dc:	2204      	movs	r2, #4
   146de:	eb0d 0102 	add.w	r1, sp, r2
   146e2:	9800      	ldr	r0, [sp, #0]
   146e4:	f7ed fa9c 	bl	1c20 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   146e8:	9800      	ldr	r0, [sp, #0]
   146ea:	3004      	adds	r0, #4
   146ec:	e7f3      	b.n	146d6 <k_mem_pool_malloc+0x12>

000146ee <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   146ee:	b110      	cbz	r0, 146f6 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   146f0:	3804      	subs	r0, #4
   146f2:	f7ff bfb7 	b.w	14664 <k_mem_pool_free_id>
   146f6:	4770      	bx	lr

000146f8 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   146f8:	4b03      	ldr	r3, [pc, #12]	; (14708 <z_thread_malloc+0x10>)
   146fa:	689b      	ldr	r3, [r3, #8]
{
   146fc:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   146fe:	6e58      	ldr	r0, [r3, #100]	; 0x64
   14700:	b108      	cbz	r0, 14706 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   14702:	f7ff bfdf 	b.w	146c4 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   14706:	4770      	bx	lr
   14708:	200019b8 	.word	0x200019b8

0001470c <init_mutex_module>:

/*
 * Complete initialization of statically defined mutexes.
 */
static int init_mutex_module(struct device *dev)
{
   1470c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_mutex *mutex;

	for (mutex = _k_mutex_list_start; mutex < _k_mutex_list_end; mutex++) {
   1470e:	4b0a      	ldr	r3, [pc, #40]	; (14738 <init_mutex_module+0x2c>)
   14710:	490a      	ldr	r1, [pc, #40]	; (1473c <init_mutex_module+0x30>)
		SYS_TRACING_OBJ_INIT(k_mutex, mutex);
   14712:	4a0b      	ldr	r2, [pc, #44]	; (14740 <init_mutex_module+0x34>)
	for (mutex = _k_mutex_list_start; mutex < _k_mutex_list_end; mutex++) {
   14714:	428b      	cmp	r3, r1
   14716:	d301      	bcc.n	1471c <init_mutex_module+0x10>
	}
	return 0;
}
   14718:	2000      	movs	r0, #0
   1471a:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   1471c:	f04f 0420 	mov.w	r4, #32
   14720:	f3ef 8011 	mrs	r0, BASEPRI
   14724:	f384 8811 	msr	BASEPRI, r4
		SYS_TRACING_OBJ_INIT(k_mutex, mutex);
   14728:	6814      	ldr	r4, [r2, #0]
   1472a:	615c      	str	r4, [r3, #20]
   1472c:	6013      	str	r3, [r2, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1472e:	f380 8811 	msr	BASEPRI, r0
	for (mutex = _k_mutex_list_start; mutex < _k_mutex_list_end; mutex++) {
   14732:	3318      	adds	r3, #24
   14734:	e7ee      	b.n	14714 <init_mutex_module+0x8>
   14736:	bf00      	nop
   14738:	20004004 	.word	0x20004004
   1473c:	20004004 	.word	0x20004004
   14740:	200019b0 	.word	0x200019b0

00014744 <init_queue_module>:

/*
 * Complete initialization of statically defined queues.
 */
static int init_queue_module(struct device *dev)
{
   14744:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_queue *queue;

	for (queue = _k_queue_list_start; queue < _k_queue_list_end; queue++) {
   14746:	4b0a      	ldr	r3, [pc, #40]	; (14770 <init_queue_module+0x2c>)
   14748:	490a      	ldr	r1, [pc, #40]	; (14774 <init_queue_module+0x30>)
		SYS_TRACING_OBJ_INIT(k_queue, queue);
   1474a:	4a0b      	ldr	r2, [pc, #44]	; (14778 <init_queue_module+0x34>)
	for (queue = _k_queue_list_start; queue < _k_queue_list_end; queue++) {
   1474c:	428b      	cmp	r3, r1
   1474e:	d301      	bcc.n	14754 <init_queue_module+0x10>
	}
	return 0;
}
   14750:	2000      	movs	r0, #0
   14752:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   14754:	f04f 0420 	mov.w	r4, #32
   14758:	f3ef 8011 	mrs	r0, BASEPRI
   1475c:	f384 8811 	msr	BASEPRI, r4
		SYS_TRACING_OBJ_INIT(k_queue, queue);
   14760:	6814      	ldr	r4, [r2, #0]
   14762:	611c      	str	r4, [r3, #16]
   14764:	6013      	str	r3, [r2, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14766:	f380 8811 	msr	BASEPRI, r0
	for (queue = _k_queue_list_start; queue < _k_queue_list_end; queue++) {
   1476a:	3314      	adds	r3, #20
   1476c:	e7ee      	b.n	1474c <init_queue_module+0x8>
   1476e:	bf00      	nop
   14770:	20004004 	.word	0x20004004
   14774:	20004018 	.word	0x20004018
   14778:	200019b4 	.word	0x200019b4

0001477c <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   1477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1477e:	4605      	mov	r5, r0
   14780:	460f      	mov	r7, r1
   14782:	4614      	mov	r4, r2
	__asm__ volatile(
   14784:	f04f 0220 	mov.w	r2, #32
   14788:	f3ef 8611 	mrs	r6, BASEPRI
   1478c:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   14790:	b1a3      	cbz	r3, 147bc <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   14792:	2008      	movs	r0, #8
   14794:	f7ff ffb0 	bl	146f8 <z_thread_malloc>
		if (!anode) {
   14798:	2800      	cmp	r0, #0
   1479a:	d034      	beq.n	14806 <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   1479c:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   1479e:	6044      	str	r4, [r0, #4]
   147a0:	6003      	str	r3, [r0, #0]
   147a2:	4604      	mov	r4, r0
   147a4:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   147a6:	b95f      	cbnz	r7, 147c0 <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   147a8:	682a      	ldr	r2, [r5, #0]
   147aa:	f003 0303 	and.w	r3, r3, #3
   147ae:	4313      	orrs	r3, r2
   147b0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   147b2:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   147b4:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   147b6:	b973      	cbnz	r3, 147d6 <queue_insert+0x5a>
	list->tail = node;
   147b8:	606c      	str	r4, [r5, #4]
   147ba:	e00c      	b.n	147d6 <queue_insert+0x5a>
	node->next_and_flags = flags;
   147bc:	6023      	str	r3, [r4, #0]
   147be:	e7f1      	b.n	147a4 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   147c0:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   147c2:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   147c6:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   147ca:	d114      	bne.n	147f6 <queue_insert+0x7a>
   147cc:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   147ce:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   147d0:	b95a      	cbnz	r2, 147ea <queue_insert+0x6e>
	list->tail = node;
   147d2:	606c      	str	r4, [r5, #4]
	list->head = node;
   147d4:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   147d6:	2104      	movs	r1, #4
   147d8:	f105 0008 	add.w	r0, r5, #8
   147dc:	f001 f800 	bl	157e0 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   147e0:	4630      	mov	r0, r6
   147e2:	f000 f965 	bl	14ab0 <_reschedule>
	return 0;
   147e6:	2000      	movs	r0, #0
   147e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   147ea:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   147ec:	f003 0303 	and.w	r3, r3, #3
   147f0:	4323      	orrs	r3, r4
   147f2:	6013      	str	r3, [r2, #0]
   147f4:	e7e0      	b.n	147b8 <queue_insert+0x3c>
   147f6:	4313      	orrs	r3, r2
   147f8:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   147fa:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   147fc:	f002 0203 	and.w	r2, r2, #3
   14800:	4314      	orrs	r4, r2
   14802:	603c      	str	r4, [r7, #0]
   14804:	e7e7      	b.n	147d6 <queue_insert+0x5a>
			return -ENOMEM;
   14806:	f06f 000b 	mvn.w	r0, #11
}
   1480a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001480c <z_queue_node_peek>:
{
   1480c:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   1480e:	4604      	mov	r4, r0
   14810:	b130      	cbz	r0, 14820 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14812:	6802      	ldr	r2, [r0, #0]
   14814:	0793      	lsls	r3, r2, #30
   14816:	d003      	beq.n	14820 <z_queue_node_peek+0x14>
		ret = anode->data;
   14818:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1481a:	b109      	cbz	r1, 14820 <z_queue_node_peek+0x14>
			k_free(anode);
   1481c:	f7ff ff67 	bl	146ee <k_free>
}
   14820:	4620      	mov	r0, r4
   14822:	bd10      	pop	{r4, pc}

00014824 <_impl_k_queue_init>:
	list->head = NULL;
   14824:	2300      	movs	r3, #0
   14826:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   14828:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   1482a:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   1482e:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   14830:	60c3      	str	r3, [r0, #12]
   14832:	f04f 0320 	mov.w	r3, #32
   14836:	f3ef 8211 	mrs	r2, BASEPRI
   1483a:	f383 8811 	msr	BASEPRI, r3
	SYS_TRACING_OBJ_INIT(k_queue, queue);
   1483e:	4b03      	ldr	r3, [pc, #12]	; (1484c <_impl_k_queue_init+0x28>)
   14840:	6819      	ldr	r1, [r3, #0]
   14842:	6101      	str	r1, [r0, #16]
   14844:	6018      	str	r0, [r3, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14846:	f382 8811 	msr	BASEPRI, r2
   1484a:	4770      	bx	lr
   1484c:	200019b4 	.word	0x200019b4

00014850 <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   14850:	460a      	mov	r2, r1
   14852:	2300      	movs	r3, #0
   14854:	6841      	ldr	r1, [r0, #4]
   14856:	f7ff bf91 	b.w	1477c <queue_insert>

0001485a <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   1485a:	2300      	movs	r3, #0
   1485c:	460a      	mov	r2, r1
   1485e:	4619      	mov	r1, r3
   14860:	f7ff bf8c 	b.w	1477c <queue_insert>

00014864 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   14864:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   14866:	f04f 0320 	mov.w	r3, #32
   1486a:	f3ef 8511 	mrs	r5, BASEPRI
   1486e:	f383 8811 	msr	BASEPRI, r3
   14872:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   14874:	b953      	cbnz	r3, 1488c <k_queue_append_list+0x28>
	list->head = node;
   14876:	6001      	str	r1, [r0, #0]
	list->tail = node;
   14878:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   1487a:	2104      	movs	r1, #4
   1487c:	3008      	adds	r0, #8
   1487e:	f000 ffaf 	bl	157e0 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   14882:	4628      	mov	r0, r5
}
   14884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   14888:	f000 b912 	b.w	14ab0 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1488c:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1488e:	f004 0403 	and.w	r4, r4, #3
   14892:	4321      	orrs	r1, r4
   14894:	6019      	str	r1, [r3, #0]
   14896:	e7ef      	b.n	14878 <k_queue_append_list+0x14>

00014898 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   14898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1489c:	4604      	mov	r4, r0
   1489e:	b086      	sub	sp, #24
   148a0:	460d      	mov	r5, r1
   148a2:	f04f 0320 	mov.w	r3, #32
   148a6:	f3ef 8711 	mrs	r7, BASEPRI
   148aa:	f383 8811 	msr	BASEPRI, r3
   148ae:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   148b0:	b182      	cbz	r2, 148d4 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   148b2:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   148b4:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   148b6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   148ba:	428a      	cmp	r2, r1
	list->head = node;
   148bc:	6003      	str	r3, [r0, #0]
	list->tail = node;
   148be:	bf08      	it	eq
   148c0:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   148c2:	2101      	movs	r1, #1
   148c4:	4610      	mov	r0, r2
   148c6:	f7ff ffa1 	bl	1480c <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   148ca:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   148ce:	b006      	add	sp, #24
   148d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   148d4:	b919      	cbnz	r1, 148de <_impl_k_queue_get+0x46>
   148d6:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   148da:	2000      	movs	r0, #0
   148dc:	e7f7      	b.n	148ce <_impl_k_queue_get+0x36>
   148de:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   148e2:	2104      	movs	r1, #4
   148e4:	4603      	mov	r3, r0
   148e6:	eb0d 0001 	add.w	r0, sp, r1
   148ea:	f000 fee2 	bl	156b2 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   148ee:	1c6a      	adds	r2, r5, #1
   148f0:	d002      	beq.n	148f8 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   148f2:	f000 fadf 	bl	14eb4 <_impl_k_uptime_get_32>
   148f6:	4606      	mov	r6, r0
{
   148f8:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   148fa:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   148fe:	1bea      	subs	r2, r5, r7
   14900:	f36f 1307 	bfc	r3, #4, #4
   14904:	2101      	movs	r1, #1
   14906:	a801      	add	r0, sp, #4
   14908:	f88d 3011 	strb.w	r3, [sp, #17]
   1490c:	f000 fee4 	bl	156d8 <_impl_k_poll>
		if (err && err != -EAGAIN) {
   14910:	b108      	cbz	r0, 14916 <_impl_k_queue_get+0x7e>
   14912:	300b      	adds	r0, #11
   14914:	d1e1      	bne.n	148da <_impl_k_queue_get+0x42>
	__asm__ volatile(
   14916:	f04f 0320 	mov.w	r3, #32
   1491a:	f3ef 8811 	mrs	r8, BASEPRI
   1491e:	f383 8811 	msr	BASEPRI, r3
   14922:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   14924:	b138      	cbz	r0, 14936 <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14926:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14928:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1492a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   1492e:	4290      	cmp	r0, r2
	list->head = node;
   14930:	6023      	str	r3, [r4, #0]
	list->tail = node;
   14932:	bf08      	it	eq
   14934:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   14936:	2101      	movs	r1, #1
   14938:	f7ff ff68 	bl	1480c <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1493c:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   14940:	2800      	cmp	r0, #0
   14942:	d1c4      	bne.n	148ce <_impl_k_queue_get+0x36>
   14944:	1c6b      	adds	r3, r5, #1
   14946:	d0d8      	beq.n	148fa <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   14948:	f000 fab4 	bl	14eb4 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   1494c:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1494e:	42bd      	cmp	r5, r7
   14950:	dad3      	bge.n	148fa <_impl_k_queue_get+0x62>
   14952:	e7c2      	b.n	148da <_impl_k_queue_get+0x42>

00014954 <sys_dlist_remove>:
	node->prev->next = node->next;
   14954:	e890 000c 	ldmia.w	r0, {r2, r3}
   14958:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1495a:	6802      	ldr	r2, [r0, #0]
   1495c:	6053      	str	r3, [r2, #4]
   1495e:	4770      	bx	lr

00014960 <_abort_timeout>:
{
   14960:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14962:	6900      	ldr	r0, [r0, #16]
{
   14964:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14966:	1c43      	adds	r3, r0, #1
   14968:	d00e      	beq.n	14988 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1496a:	4b08      	ldr	r3, [pc, #32]	; (1498c <_abort_timeout+0x2c>)
   1496c:	699b      	ldr	r3, [r3, #24]
   1496e:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   14970:	bf1f      	itttt	ne
   14972:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14974:	6913      	ldrne	r3, [r2, #16]
   14976:	18c0      	addne	r0, r0, r3
   14978:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   1497a:	4608      	mov	r0, r1
   1497c:	f7ff ffea 	bl	14954 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   14980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14984:	610b      	str	r3, [r1, #16]
	return 0;
   14986:	2000      	movs	r0, #0
}
   14988:	bd08      	pop	{r3, pc}
   1498a:	bf00      	nop
   1498c:	200019b8 	.word	0x200019b8

00014990 <_Swap>:
{
   14990:	b510      	push	{r4, lr}
   14992:	4604      	mov	r4, r0
	_check_stack_sentinel();
   14994:	f000 fc14 	bl	151c0 <_check_stack_sentinel>
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   14998:	4b03      	ldr	r3, [pc, #12]	; (149a8 <_Swap+0x18>)
   1499a:	2200      	movs	r2, #0
	return __swap(key);
   1499c:	4620      	mov	r0, r4
}
   1499e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   149a2:	601a      	str	r2, [r3, #0]
	return __swap(key);
   149a4:	f7ec bdb6 	b.w	1514 <__swap>
   149a8:	200019ec 	.word	0x200019ec

000149ac <k_spin_lock.isra.11>:
	__asm__ volatile(
   149ac:	f04f 0320 	mov.w	r3, #32
   149b0:	f3ef 8011 	mrs	r0, BASEPRI
   149b4:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   149b8:	4770      	bx	lr
	...

000149bc <update_cache>:
	return list->head == list;
   149bc:	4b0d      	ldr	r3, [pc, #52]	; (149f4 <update_cache+0x38>)
   149be:	4619      	mov	r1, r3
   149c0:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   149c4:	428a      	cmp	r2, r1
   149c6:	d000      	beq.n	149ca <update_cache+0xe>
	return th ? th : _current_cpu->idle_thread;
   149c8:	b902      	cbnz	r2, 149cc <update_cache+0x10>
   149ca:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   149cc:	b970      	cbnz	r0, 149ec <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   149ce:	6899      	ldr	r1, [r3, #8]
   149d0:	b161      	cbz	r1, 149ec <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   149d2:	7a48      	ldrb	r0, [r1, #9]
   149d4:	06c0      	lsls	r0, r0, #27
   149d6:	d109      	bne.n	149ec <update_cache+0x30>
   149d8:	6a48      	ldr	r0, [r1, #36]	; 0x24
   149da:	3001      	adds	r0, #1
   149dc:	d106      	bne.n	149ec <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   149de:	8948      	ldrh	r0, [r1, #10]
   149e0:	287f      	cmp	r0, #127	; 0x7f
   149e2:	d903      	bls.n	149ec <update_cache+0x30>
	return thread == _idle_thread;
   149e4:	4804      	ldr	r0, [pc, #16]	; (149f8 <update_cache+0x3c>)
	if (_is_idle(_current)) {
   149e6:	6800      	ldr	r0, [r0, #0]
   149e8:	4281      	cmp	r1, r0
   149ea:	d101      	bne.n	149f0 <update_cache+0x34>
		_kernel.ready_q.cache = th;
   149ec:	621a      	str	r2, [r3, #32]
   149ee:	4770      	bx	lr
		_kernel.ready_q.cache = _current;
   149f0:	6219      	str	r1, [r3, #32]
}
   149f2:	4770      	bx	lr
   149f4:	200019b8 	.word	0x200019b8
   149f8:	000196c0 	.word	0x000196c0

000149fc <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   149fc:	f990 000a 	ldrsb.w	r0, [r0, #10]
   14a00:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   14a04:	4298      	cmp	r0, r3
   14a06:	bfac      	ite	ge
   14a08:	2000      	movge	r0, #0
   14a0a:	2001      	movlt	r0, #1
   14a0c:	4770      	bx	lr
	...

00014a10 <_remove_thread_from_ready_q>:
{
   14a10:	b510      	push	{r4, lr}
   14a12:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   14a14:	f7ff ffca 	bl	149ac <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   14a18:	7a4b      	ldrb	r3, [r1, #9]
   14a1a:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   14a1c:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   14a1e:	d50d      	bpl.n	14a3c <_remove_thread_from_ready_q+0x2c>
	sys_dlist_remove(&thread->base.qnode_dlist);
   14a20:	4608      	mov	r0, r1
   14a22:	f7ff ff97 	bl	14954 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   14a26:	7a4b      	ldrb	r3, [r1, #9]
   14a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14a2c:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   14a2e:	4b05      	ldr	r3, [pc, #20]	; (14a44 <_remove_thread_from_ready_q+0x34>)
   14a30:	6898      	ldr	r0, [r3, #8]
   14a32:	1a43      	subs	r3, r0, r1
   14a34:	4258      	negs	r0, r3
   14a36:	4158      	adcs	r0, r3
   14a38:	f7ff ffc0 	bl	149bc <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14a3c:	f384 8811 	msr	BASEPRI, r4
   14a40:	bd10      	pop	{r4, pc}
   14a42:	bf00      	nop
   14a44:	200019b8 	.word	0x200019b8

00014a48 <_find_first_thread_to_unpend>:
{
   14a48:	b508      	push	{r3, lr}
   14a4a:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   14a4c:	f7ff ffae 	bl	149ac <k_spin_lock.isra.11>
	return list->head == list;
   14a50:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14a52:	429a      	cmp	r2, r3
   14a54:	bf08      	it	eq
   14a56:	2300      	moveq	r3, #0
   14a58:	f380 8811 	msr	BASEPRI, r0
}
   14a5c:	4618      	mov	r0, r3
   14a5e:	bd08      	pop	{r3, pc}

00014a60 <_unpend_thread_no_timeout>:
{
   14a60:	b510      	push	{r4, lr}
   14a62:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   14a64:	f7ff ffa2 	bl	149ac <k_spin_lock.isra.11>
   14a68:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   14a6a:	4608      	mov	r0, r1
   14a6c:	f7ff ff72 	bl	14954 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14a70:	7a4b      	ldrb	r3, [r1, #9]
   14a72:	f023 0302 	bic.w	r3, r3, #2
   14a76:	724b      	strb	r3, [r1, #9]
   14a78:	f384 8811 	msr	BASEPRI, r4
   14a7c:	bd10      	pop	{r4, pc}

00014a7e <_unpend_first_thread>:
{
   14a7e:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   14a80:	2100      	movs	r1, #0
   14a82:	f7ff ffe1 	bl	14a48 <_find_first_thread_to_unpend>

	if (thread) {
   14a86:	4604      	mov	r4, r0
   14a88:	b128      	cbz	r0, 14a96 <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   14a8a:	f7ff ffe9 	bl	14a60 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   14a8e:	f104 0014 	add.w	r0, r4, #20
   14a92:	f7ff ff65 	bl	14960 <_abort_timeout>
}
   14a96:	4620      	mov	r0, r4
   14a98:	bd10      	pop	{r4, pc}

00014a9a <_unpend_thread>:
{
   14a9a:	b510      	push	{r4, lr}
   14a9c:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   14a9e:	f7ff ffdf 	bl	14a60 <_unpend_thread_no_timeout>
   14aa2:	f104 0014 	add.w	r0, r4, #20
}
   14aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14aaa:	f7ff bf59 	b.w	14960 <_abort_timeout>
	...

00014ab0 <_reschedule>:
   14ab0:	f3ef 8305 	mrs	r3, IPSR
   14ab4:	2b0d      	cmp	r3, #13
   14ab6:	d809      	bhi.n	14acc <_reschedule+0x1c>
   14ab8:	b11b      	cbz	r3, 14ac2 <_reschedule+0x12>
   14aba:	4b07      	ldr	r3, [pc, #28]	; (14ad8 <_reschedule+0x28>)
   14abc:	685b      	ldr	r3, [r3, #4]
   14abe:	051b      	lsls	r3, r3, #20
   14ac0:	d504      	bpl.n	14acc <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   14ac2:	4b06      	ldr	r3, [pc, #24]	; (14adc <_reschedule+0x2c>)
   14ac4:	689a      	ldr	r2, [r3, #8]
   14ac6:	6a1b      	ldr	r3, [r3, #32]
   14ac8:	429a      	cmp	r2, r3
   14aca:	d103      	bne.n	14ad4 <_reschedule+0x24>
   14acc:	f380 8811 	msr	BASEPRI, r0
}
   14ad0:	2000      	movs	r0, #0
   14ad2:	4770      	bx	lr
		return _Swap(key);
   14ad4:	f7ff bf5c 	b.w	14990 <_Swap>
   14ad8:	e000ed00 	.word	0xe000ed00
   14adc:	200019b8 	.word	0x200019b8

00014ae0 <k_sched_unlock>:
{
   14ae0:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   14ae2:	f7ff ff63 	bl	149ac <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   14ae6:	4b0a      	ldr	r3, [pc, #40]	; (14b10 <k_sched_unlock+0x30>)
   14ae8:	689a      	ldr	r2, [r3, #8]
   14aea:	7ad3      	ldrb	r3, [r2, #11]
   14aec:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   14aee:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   14af0:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   14af2:	2001      	movs	r0, #1
   14af4:	f7ff ff62 	bl	149bc <update_cache>
   14af8:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   14afc:	f04f 0320 	mov.w	r3, #32
   14b00:	f3ef 8011 	mrs	r0, BASEPRI
   14b04:	f383 8811 	msr	BASEPRI, r3
}
   14b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   14b0c:	f7ff bfd0 	b.w	14ab0 <_reschedule>
   14b10:	200019b8 	.word	0x200019b8

00014b14 <_priq_dumb_add>:
{
   14b14:	b510      	push	{r4, lr}
	return list->head == list;
   14b16:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14b18:	4298      	cmp	r0, r3
   14b1a:	bf08      	it	eq
   14b1c:	2300      	moveq	r3, #0
   14b1e:	b193      	cbz	r3, 14b46 <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   14b20:	f991 400a 	ldrsb.w	r4, [r1, #10]
   14b24:	f993 200a 	ldrsb.w	r2, [r3, #10]
   14b28:	4294      	cmp	r4, r2
   14b2a:	da06      	bge.n	14b3a <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   14b2c:	685a      	ldr	r2, [r3, #4]
   14b2e:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   14b30:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   14b32:	685a      	ldr	r2, [r3, #4]
   14b34:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   14b36:	6059      	str	r1, [r3, #4]
   14b38:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   14b3a:	6842      	ldr	r2, [r0, #4]
   14b3c:	4293      	cmp	r3, r2
   14b3e:	d002      	beq.n	14b46 <_priq_dumb_add+0x32>
   14b40:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14b42:	2b00      	cmp	r3, #0
   14b44:	d1eb      	bne.n	14b1e <_priq_dumb_add+0xa>
	node->next = list;
   14b46:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   14b48:	6843      	ldr	r3, [r0, #4]
   14b4a:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   14b4c:	6843      	ldr	r3, [r0, #4]
   14b4e:	6019      	str	r1, [r3, #0]
	list->tail = node;
   14b50:	6041      	str	r1, [r0, #4]
   14b52:	bd10      	pop	{r4, pc}

00014b54 <_add_thread_to_ready_q>:
{
   14b54:	b538      	push	{r3, r4, r5, lr}
   14b56:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   14b58:	f7ff ff28 	bl	149ac <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   14b5c:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   14b5e:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   14b60:	4806      	ldr	r0, [pc, #24]	; (14b7c <_add_thread_to_ready_q+0x28>)
   14b62:	f7ff ffd7 	bl	14b14 <_priq_dumb_add>
	thread->base.thread_state |= states;
   14b66:	7a63      	ldrb	r3, [r4, #9]
   14b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14b6c:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   14b6e:	2000      	movs	r0, #0
   14b70:	f7ff ff24 	bl	149bc <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14b74:	f385 8811 	msr	BASEPRI, r5
   14b78:	bd38      	pop	{r3, r4, r5, pc}
   14b7a:	bf00      	nop
   14b7c:	200019dc 	.word	0x200019dc

00014b80 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   14b80:	7a42      	ldrb	r2, [r0, #9]
   14b82:	06d2      	lsls	r2, r2, #27
   14b84:	d104      	bne.n	14b90 <_ready_thread+0x10>
   14b86:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14b88:	3301      	adds	r3, #1
   14b8a:	d101      	bne.n	14b90 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   14b8c:	f7ff bfe2 	b.w	14b54 <_add_thread_to_ready_q>
   14b90:	4770      	bx	lr
	...

00014b94 <_add_timeout>:
{
   14b94:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14b96:	610b      	str	r3, [r1, #16]
{
   14b98:	4604      	mov	r4, r0
   14b9a:	461d      	mov	r5, r3
	timeout->thread = thread;
   14b9c:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14b9e:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   14ba0:	bb03      	cbnz	r3, 14be4 <_add_timeout+0x50>
	__asm__ volatile(
   14ba2:	f04f 0320 	mov.w	r3, #32
   14ba6:	f3ef 8611 	mrs	r6, BASEPRI
   14baa:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   14bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14bb2:	610b      	str	r3, [r1, #16]
	if (thread) {
   14bb4:	b170      	cbz	r0, 14bd4 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   14bb6:	68cb      	ldr	r3, [r1, #12]
   14bb8:	b113      	cbz	r3, 14bc0 <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   14bba:	f7ff ff51 	bl	14a60 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   14bbe:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14bc0:	7a63      	ldrb	r3, [r4, #9]
   14bc2:	f023 0304 	bic.w	r3, r3, #4
   14bc6:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   14bc8:	4620      	mov	r0, r4
   14bca:	f7ff ffd9 	bl	14b80 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14bce:	f386 8811 	msr	BASEPRI, r6
   14bd2:	bd70      	pop	{r4, r5, r6, pc}
   14bd4:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   14bd8:	694b      	ldr	r3, [r1, #20]
   14bda:	b32b      	cbz	r3, 14c28 <_add_timeout+0x94>
			timeout->func(timeout);
   14bdc:	4608      	mov	r0, r1
}
   14bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   14be2:	4718      	bx	r3
	return list->head == list;
   14be4:	4a11      	ldr	r2, [pc, #68]	; (14c2c <_add_timeout+0x98>)
   14be6:	4610      	mov	r0, r2
   14be8:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14bec:	4283      	cmp	r3, r0
   14bee:	d10c      	bne.n	14c0a <_add_timeout+0x76>
	node->next = list;
   14bf0:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   14bf2:	6993      	ldr	r3, [r2, #24]
   14bf4:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   14bf6:	6993      	ldr	r3, [r2, #24]
   14bf8:	6019      	str	r1, [r3, #0]
	list->tail = node;
   14bfa:	6191      	str	r1, [r2, #24]
   14bfc:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   14bfe:	1b64      	subs	r4, r4, r5
   14c00:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   14c02:	6994      	ldr	r4, [r2, #24]
   14c04:	42a3      	cmp	r3, r4
   14c06:	d0f3      	beq.n	14bf0 <_add_timeout+0x5c>
   14c08:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14c0a:	2b00      	cmp	r3, #0
   14c0c:	d0f0      	beq.n	14bf0 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   14c0e:	690c      	ldr	r4, [r1, #16]
   14c10:	691d      	ldr	r5, [r3, #16]
   14c12:	42ac      	cmp	r4, r5
   14c14:	dcf3      	bgt.n	14bfe <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   14c16:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14c18:	1b2c      	subs	r4, r5, r4
   14c1a:	611c      	str	r4, [r3, #16]
   14c1c:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   14c1e:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   14c20:	685a      	ldr	r2, [r3, #4]
   14c22:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   14c24:	6059      	str	r1, [r3, #4]
   14c26:	bd70      	pop	{r4, r5, r6, pc}
   14c28:	bd70      	pop	{r4, r5, r6, pc}
   14c2a:	bf00      	nop
   14c2c:	200019b8 	.word	0x200019b8

00014c30 <_move_thread_to_end_of_prio_q>:
{
   14c30:	b538      	push	{r3, r4, r5, lr}
   14c32:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   14c34:	f7ff feba 	bl	149ac <k_spin_lock.isra.11>
   14c38:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   14c3a:	4620      	mov	r0, r4
   14c3c:	f7ff fe8a 	bl	14954 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   14c40:	4621      	mov	r1, r4
   14c42:	4806      	ldr	r0, [pc, #24]	; (14c5c <_move_thread_to_end_of_prio_q+0x2c>)
   14c44:	f7ff ff66 	bl	14b14 <_priq_dumb_add>
	thread->base.thread_state |= states;
   14c48:	7a63      	ldrb	r3, [r4, #9]
   14c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14c4e:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   14c50:	2000      	movs	r0, #0
   14c52:	f7ff feb3 	bl	149bc <update_cache>
   14c56:	f385 8811 	msr	BASEPRI, r5
   14c5a:	bd38      	pop	{r3, r4, r5, pc}
   14c5c:	200019dc 	.word	0x200019dc

00014c60 <pend>:
{
   14c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c62:	4605      	mov	r5, r0
   14c64:	4614      	mov	r4, r2
   14c66:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   14c68:	f7ff fed2 	bl	14a10 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   14c6c:	7a6b      	ldrb	r3, [r5, #9]
   14c6e:	f043 0302 	orr.w	r3, r3, #2
   14c72:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   14c74:	1c63      	adds	r3, r4, #1
   14c76:	d012      	beq.n	14c9e <pend+0x3e>
	__asm__ volatile(
   14c78:	f04f 0320 	mov.w	r3, #32
   14c7c:	f3ef 8711 	mrs	r7, BASEPRI
   14c80:	f383 8811 	msr	BASEPRI, r3
   14c84:	230a      	movs	r3, #10
   14c86:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   14c88:	4632      	mov	r2, r6
   14c8a:	fbb4 f3f3 	udiv	r3, r4, r3
   14c8e:	f105 0114 	add.w	r1, r5, #20
   14c92:	3301      	adds	r3, #1
   14c94:	4628      	mov	r0, r5
   14c96:	f7ff ff7d 	bl	14b94 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14c9a:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   14c9e:	b12e      	cbz	r6, 14cac <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   14ca0:	4629      	mov	r1, r5
   14ca2:	4630      	mov	r0, r6
}
   14ca4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   14ca8:	f7ff bf34 	b.w	14b14 <_priq_dumb_add>
   14cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00014cb0 <_pend_current_thread>:
{
   14cb0:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   14cb2:	4b05      	ldr	r3, [pc, #20]	; (14cc8 <_pend_current_thread+0x18>)
{
   14cb4:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   14cb6:	6898      	ldr	r0, [r3, #8]
   14cb8:	f7ff ffd2 	bl	14c60 <pend>
	return _Swap(key);
   14cbc:	4620      	mov	r0, r4
}
   14cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _Swap(key);
   14cc2:	f7ff be65 	b.w	14990 <_Swap>
   14cc6:	bf00      	nop
   14cc8:	200019b8 	.word	0x200019b8

00014ccc <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   14ccc:	4b13      	ldr	r3, [pc, #76]	; (14d1c <_is_thread_time_slicing+0x50>)
   14cce:	681b      	ldr	r3, [r3, #0]
   14cd0:	2b00      	cmp	r3, #0
{
   14cd2:	b510      	push	{r4, lr}
   14cd4:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   14cd6:	dd1f      	ble.n	14d18 <_is_thread_time_slicing+0x4c>
   14cd8:	8943      	ldrh	r3, [r0, #10]
   14cda:	2b7f      	cmp	r3, #127	; 0x7f
   14cdc:	d81c      	bhi.n	14d18 <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   14cde:	4b10      	ldr	r3, [pc, #64]	; (14d20 <_is_thread_time_slicing+0x54>)
   14ce0:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   14ce4:	681b      	ldr	r3, [r3, #0]
   14ce6:	4299      	cmp	r1, r3
   14ce8:	db16      	blt.n	14d18 <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   14cea:	f7ff fe5f 	bl	149ac <k_spin_lock.isra.11>
	return list->head == list;
   14cee:	490d      	ldr	r1, [pc, #52]	; (14d24 <_is_thread_time_slicing+0x58>)
   14cf0:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14cf4:	428b      	cmp	r3, r1
   14cf6:	4604      	mov	r4, r0
   14cf8:	d00a      	beq.n	14d10 <_is_thread_time_slicing+0x44>
		if (next) {
   14cfa:	b15b      	cbz	r3, 14d14 <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   14cfc:	f992 000a 	ldrsb.w	r0, [r2, #10]
   14d00:	f993 300a 	ldrsb.w	r3, [r3, #10]
   14d04:	1ac3      	subs	r3, r0, r3
   14d06:	4258      	negs	r0, r3
   14d08:	4158      	adcs	r0, r3
   14d0a:	f384 8811 	msr	BASEPRI, r4
	return ret;
   14d0e:	bd10      	pop	{r4, pc}
   14d10:	2000      	movs	r0, #0
   14d12:	e7fa      	b.n	14d0a <_is_thread_time_slicing+0x3e>
   14d14:	4618      	mov	r0, r3
   14d16:	e7f8      	b.n	14d0a <_is_thread_time_slicing+0x3e>
		return 0;
   14d18:	2000      	movs	r0, #0
}
   14d1a:	bd10      	pop	{r4, pc}
   14d1c:	20001890 	.word	0x20001890
   14d20:	20001894 	.word	0x20001894
   14d24:	200019b8 	.word	0x200019b8

00014d28 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   14d28:	4b01      	ldr	r3, [pc, #4]	; (14d30 <_update_time_slice_before_swap+0x8>)
   14d2a:	2200      	movs	r2, #0
   14d2c:	601a      	str	r2, [r3, #0]
   14d2e:	4770      	bx	lr
   14d30:	200019ec 	.word	0x200019ec

00014d34 <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   14d34:	b538      	push	{r3, r4, r5, lr}
   14d36:	4605      	mov	r5, r0
	int need_sched = 0;
   14d38:	2000      	movs	r0, #0
	return list->head == list;
   14d3a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14d3c:	42a5      	cmp	r5, r4
   14d3e:	d000      	beq.n	14d42 <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   14d40:	b904      	cbnz	r4, 14d44 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   14d42:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   14d44:	4620      	mov	r0, r4
   14d46:	f7ff fea8 	bl	14a9a <_unpend_thread>
		_ready_thread(th);
   14d4a:	4620      	mov	r0, r4
   14d4c:	f7ff ff18 	bl	14b80 <_ready_thread>
		need_sched = 1;
   14d50:	2001      	movs	r0, #1
   14d52:	e7f2      	b.n	14d3a <_unpend_all+0x6>

00014d54 <_sched_init>:
	list->head = (sys_dnode_t *)list;
   14d54:	4b02      	ldr	r3, [pc, #8]	; (14d60 <_sched_init+0xc>)
   14d56:	f103 0224 	add.w	r2, r3, #36	; 0x24
   14d5a:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   14d5c:	629a      	str	r2, [r3, #40]	; 0x28
   14d5e:	4770      	bx	lr
   14d60:	200019b8 	.word	0x200019b8

00014d64 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   14d64:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   14d66:	4c12      	ldr	r4, [pc, #72]	; (14db0 <_impl_k_yield+0x4c>)
   14d68:	4b12      	ldr	r3, [pc, #72]	; (14db4 <_impl_k_yield+0x50>)
   14d6a:	68a2      	ldr	r2, [r4, #8]
   14d6c:	681b      	ldr	r3, [r3, #0]
   14d6e:	429a      	cmp	r2, r3
   14d70:	d00f      	beq.n	14d92 <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   14d72:	f7ff fe1b 	bl	149ac <k_spin_lock.isra.11>
   14d76:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   14d78:	68a0      	ldr	r0, [r4, #8]
   14d7a:	f7ff fdeb 	bl	14954 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   14d7e:	68a1      	ldr	r1, [r4, #8]
   14d80:	f104 0024 	add.w	r0, r4, #36	; 0x24
   14d84:	f7ff fec6 	bl	14b14 <_priq_dumb_add>
			update_cache(1);
   14d88:	2001      	movs	r0, #1
   14d8a:	f7ff fe17 	bl	149bc <update_cache>
   14d8e:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   14d92:	6a22      	ldr	r2, [r4, #32]
   14d94:	68a3      	ldr	r3, [r4, #8]
   14d96:	429a      	cmp	r2, r3
   14d98:	d009      	beq.n	14dae <_impl_k_yield+0x4a>
	__asm__ volatile(
   14d9a:	f04f 0320 	mov.w	r3, #32
   14d9e:	f3ef 8011 	mrs	r0, BASEPRI
   14da2:	f383 8811 	msr	BASEPRI, r3
		_Swap(irq_lock());
	}
#endif
}
   14da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_Swap(irq_lock());
   14daa:	f7ff bdf1 	b.w	14990 <_Swap>
   14dae:	bd38      	pop	{r3, r4, r5, pc}
   14db0:	200019b8 	.word	0x200019b8
   14db4:	000196c0 	.word	0x000196c0

00014db8 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   14db8:	4b01      	ldr	r3, [pc, #4]	; (14dc0 <_impl_k_current_get+0x8>)
   14dba:	6898      	ldr	r0, [r3, #8]
   14dbc:	4770      	bx	lr
   14dbe:	bf00      	nop
   14dc0:	200019b8 	.word	0x200019b8

00014dc4 <init_sem_module>:

/*
 * Complete initialization of statically defined semaphores.
 */
static int init_sem_module(struct device *dev)
{
   14dc4:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_sem *sem;

	for (sem = _k_sem_list_start; sem < _k_sem_list_end; sem++) {
   14dc6:	4b0a      	ldr	r3, [pc, #40]	; (14df0 <init_sem_module+0x2c>)
   14dc8:	490a      	ldr	r1, [pc, #40]	; (14df4 <init_sem_module+0x30>)
		SYS_TRACING_OBJ_INIT(k_sem, sem);
   14dca:	4a0b      	ldr	r2, [pc, #44]	; (14df8 <init_sem_module+0x34>)
	for (sem = _k_sem_list_start; sem < _k_sem_list_end; sem++) {
   14dcc:	428b      	cmp	r3, r1
   14dce:	d301      	bcc.n	14dd4 <init_sem_module+0x10>
	}
	return 0;
}
   14dd0:	2000      	movs	r0, #0
   14dd2:	bd10      	pop	{r4, pc}
   14dd4:	f04f 0420 	mov.w	r4, #32
   14dd8:	f3ef 8011 	mrs	r0, BASEPRI
   14ddc:	f384 8811 	msr	BASEPRI, r4
		SYS_TRACING_OBJ_INIT(k_sem, sem);
   14de0:	6814      	ldr	r4, [r2, #0]
   14de2:	619c      	str	r4, [r3, #24]
   14de4:	6013      	str	r3, [r2, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14de6:	f380 8811 	msr	BASEPRI, r0
	for (sem = _k_sem_list_start; sem < _k_sem_list_end; sem++) {
   14dea:	331c      	adds	r3, #28
   14dec:	e7ee      	b.n	14dcc <init_sem_module+0x8>
   14dee:	bf00      	nop
   14df0:	20003fe8 	.word	0x20003fe8
   14df4:	20004004 	.word	0x20004004
   14df8:	200019e4 	.word	0x200019e4

00014dfc <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   14dfc:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   14e00:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   14e02:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   14e04:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   14e06:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   14e08:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   14e0a:	6143      	str	r3, [r0, #20]
	__asm__ volatile(
   14e0c:	f04f 0320 	mov.w	r3, #32
   14e10:	f3ef 8211 	mrs	r2, BASEPRI
   14e14:	f383 8811 	msr	BASEPRI, r3
#endif

	SYS_TRACING_OBJ_INIT(k_sem, sem);
   14e18:	4b03      	ldr	r3, [pc, #12]	; (14e28 <_impl_k_sem_init+0x2c>)
   14e1a:	6819      	ldr	r1, [r3, #0]
   14e1c:	6181      	str	r1, [r0, #24]
   14e1e:	6018      	str	r0, [r3, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14e20:	f382 8811 	msr	BASEPRI, r2
   14e24:	4770      	bx	lr
   14e26:	bf00      	nop
   14e28:	200019e4 	.word	0x200019e4

00014e2c <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   14e2c:	b570      	push	{r4, r5, r6, lr}
   14e2e:	4604      	mov	r4, r0
	__asm__ volatile(
   14e30:	f04f 0320 	mov.w	r3, #32
   14e34:	f3ef 8611 	mrs	r6, BASEPRI
   14e38:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   14e3c:	f7ff fe1f 	bl	14a7e <_unpend_first_thread>
	if (thread) {
   14e40:	4605      	mov	r5, r0
   14e42:	b160      	cbz	r0, 14e5e <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   14e44:	7a43      	ldrb	r3, [r0, #9]
   14e46:	06db      	lsls	r3, r3, #27
   14e48:	d102      	bne.n	14e50 <_impl_k_sem_give+0x24>
   14e4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14e4c:	3301      	adds	r3, #1
   14e4e:	d012      	beq.n	14e76 <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   14e50:	2300      	movs	r3, #0
   14e52:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   14e54:	4630      	mov	r0, r6
}
   14e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   14e5a:	f7ff be29 	b.w	14ab0 <_reschedule>
	sem->count += (sem->count != sem->limit);
   14e5e:	68a3      	ldr	r3, [r4, #8]
   14e60:	68e2      	ldr	r2, [r4, #12]
   14e62:	429a      	cmp	r2, r3
   14e64:	bf18      	it	ne
   14e66:	3301      	addne	r3, #1
   14e68:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   14e6a:	2102      	movs	r1, #2
   14e6c:	f104 0010 	add.w	r0, r4, #16
   14e70:	f000 fcb6 	bl	157e0 <_handle_obj_poll_events>
   14e74:	e7ee      	b.n	14e54 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   14e76:	f7ff fe6d 	bl	14b54 <_add_thread_to_ready_q>
   14e7a:	e7e9      	b.n	14e50 <_impl_k_sem_give+0x24>

00014e7c <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   14e7c:	b410      	push	{r4}
   14e7e:	460a      	mov	r2, r1
   14e80:	4604      	mov	r4, r0
   14e82:	f04f 0320 	mov.w	r3, #32
   14e86:	f3ef 8011 	mrs	r0, BASEPRI
   14e8a:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   14e8e:	68a3      	ldr	r3, [r4, #8]
   14e90:	b133      	cbz	r3, 14ea0 <_impl_k_sem_take+0x24>
		sem->count--;
   14e92:	3b01      	subs	r3, #1
   14e94:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14e96:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   14e9a:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   14e9c:	bc10      	pop	{r4}
   14e9e:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   14ea0:	b921      	cbnz	r1, 14eac <_impl_k_sem_take+0x30>
   14ea2:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   14ea6:	f06f 000f 	mvn.w	r0, #15
   14eaa:	e7f7      	b.n	14e9c <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   14eac:	4621      	mov	r1, r4
}
   14eae:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   14eb0:	f7ff befe 	b.w	14cb0 <_pend_current_thread>

00014eb4 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   14eb4:	4b03      	ldr	r3, [pc, #12]	; (14ec4 <_impl_k_uptime_get_32+0x10>)
   14eb6:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   14eba:	230a      	movs	r3, #10
   14ebc:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   14ec0:	4770      	bx	lr
   14ec2:	bf00      	nop
   14ec4:	200019f0 	.word	0x200019f0

00014ec8 <_tick_get>:
	__asm__ volatile(
   14ec8:	f04f 0220 	mov.w	r2, #32
   14ecc:	f3ef 8311 	mrs	r3, BASEPRI
   14ed0:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   14ed4:	4a02      	ldr	r2, [pc, #8]	; (14ee0 <_tick_get+0x18>)
   14ed6:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14eda:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   14ede:	4770      	bx	lr
   14ee0:	200019f0 	.word	0x200019f0

00014ee4 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   14ee4:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   14ee6:	f7ff ffef 	bl	14ec8 <_tick_get>
   14eea:	240a      	movs	r4, #10
   14eec:	fba0 2304 	umull	r2, r3, r0, r4
   14ef0:	fb04 3301 	mla	r3, r4, r1, r3
}
   14ef4:	4610      	mov	r0, r2
   14ef6:	4619      	mov	r1, r3
   14ef8:	bd10      	pop	{r4, pc}
	...

00014efc <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   14efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f00:	4607      	mov	r7, r0
   14f02:	b085      	sub	sp, #20
	__asm__ volatile(
   14f04:	f04f 0320 	mov.w	r3, #32
   14f08:	f3ef 8011 	mrs	r0, BASEPRI
   14f0c:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   14f10:	4961      	ldr	r1, [pc, #388]	; (15098 <_nano_sys_clock_tick_announce+0x19c>)
   14f12:	e9d1 4500 	ldrd	r4, r5, [r1]
   14f16:	19e2      	adds	r2, r4, r7
   14f18:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   14f1c:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14f20:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   14f24:	ae02      	add	r6, sp, #8
   14f26:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   14f28:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   14f2a:	f04f 0320 	mov.w	r3, #32
   14f2e:	f3ef 8011 	mrs	r0, BASEPRI
   14f32:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   14f36:	4c59      	ldr	r4, [pc, #356]	; (1509c <_nano_sys_clock_tick_announce+0x1a0>)
   14f38:	4621      	mov	r1, r4
   14f3a:	4602      	mov	r2, r0
   14f3c:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14f40:	428b      	cmp	r3, r1
   14f42:	d000      	beq.n	14f46 <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   14f44:	b9fb      	cbnz	r3, 14f86 <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14f46:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   14f4a:	68a0      	ldr	r0, [r4, #8]
   14f4c:	f7ff febe 	bl	14ccc <_is_thread_time_slicing>
   14f50:	b1b0      	cbz	r0, 14f80 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   14f52:	4a53      	ldr	r2, [pc, #332]	; (150a0 <_nano_sys_clock_tick_announce+0x1a4>)
   14f54:	6811      	ldr	r1, [r2, #0]
   14f56:	230a      	movs	r3, #10
   14f58:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   14f5c:	4b51      	ldr	r3, [pc, #324]	; (150a4 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   14f5e:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   14f60:	681b      	ldr	r3, [r3, #0]
   14f62:	429f      	cmp	r7, r3
   14f64:	db0c      	blt.n	14f80 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   14f66:	2300      	movs	r3, #0
   14f68:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   14f6a:	f04f 0320 	mov.w	r3, #32
   14f6e:	f3ef 8511 	mrs	r5, BASEPRI
   14f72:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   14f76:	68a0      	ldr	r0, [r4, #8]
   14f78:	f7ff fe5a 	bl	14c30 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14f7c:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   14f80:	b005      	add	sp, #20
   14f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   14f86:	4d48      	ldr	r5, [pc, #288]	; (150a8 <_nano_sys_clock_tick_announce+0x1ac>)
   14f88:	9501      	str	r5, [sp, #4]
   14f8a:	2101      	movs	r1, #1
   14f8c:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   14f8e:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   14f92:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   14f94:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   14f98:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   14f9a:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   14f9c:	bfaa      	itet	ge
   14f9e:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   14fa2:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   14fa6:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   14faa:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   14fac:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   14fae:	691d      	ldr	r5, [r3, #16]
   14fb0:	4298      	cmp	r0, r3
   14fb2:	bf14      	ite	ne
   14fb4:	6818      	ldrne	r0, [r3, #0]
   14fb6:	2000      	moveq	r0, #0
   14fb8:	b9d5      	cbnz	r5, 14ff0 <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   14fba:	e893 0220 	ldmia.w	r3, {r5, r9}
   14fbe:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   14fc2:	681d      	ldr	r5, [r3, #0]
   14fc4:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   14fc8:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   14fca:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   14fce:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   14fd0:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   14fd2:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   14fd4:	f8c3 c010 	str.w	ip, [r3, #16]
   14fd8:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   14fdc:	f04f 0320 	mov.w	r3, #32
   14fe0:	f3ef 8211 	mrs	r2, BASEPRI
   14fe4:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   14fe8:	4603      	mov	r3, r0
   14fea:	2800      	cmp	r0, #0
   14fec:	d1d4      	bne.n	14f98 <_nano_sys_clock_tick_announce+0x9c>
   14fee:	e001      	b.n	14ff4 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   14ff0:	2900      	cmp	r1, #0
   14ff2:	dcf1      	bgt.n	14fd8 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14ff4:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   14ff8:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14ffa:	42b0      	cmp	r0, r6
   14ffc:	d103      	bne.n	15006 <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   14ffe:	9a01      	ldr	r2, [sp, #4]
   15000:	2300      	movs	r3, #0
   15002:	6013      	str	r3, [r2, #0]
   15004:	e7a1      	b.n	14f4a <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   15006:	2800      	cmp	r0, #0
   15008:	d0f9      	beq.n	14ffe <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   1500a:	9b03      	ldr	r3, [sp, #12]
   1500c:	4298      	cmp	r0, r3
   1500e:	d102      	bne.n	15016 <_nano_sys_clock_tick_announce+0x11a>
   15010:	f04f 0b00 	mov.w	fp, #0
   15014:	e001      	b.n	1501a <_nano_sys_clock_tick_announce+0x11e>
   15016:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1501a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   1501e:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   15022:	e890 000c 	ldmia.w	r0, {r2, r3}
   15026:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   15028:	6802      	ldr	r2, [r0, #0]
   1502a:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   1502c:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   1502e:	f04f 0320 	mov.w	r3, #32
   15032:	f3ef 8811 	mrs	r8, BASEPRI
   15036:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   1503a:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   1503e:	b1d6      	cbz	r6, 15076 <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   15040:	68c3      	ldr	r3, [r0, #12]
   15042:	b123      	cbz	r3, 1504e <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   15044:	4630      	mov	r0, r6
   15046:	f7ff fd0b 	bl	14a60 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   1504a:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1504e:	7a73      	ldrb	r3, [r6, #9]
   15050:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   15054:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15058:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   1505a:	d102      	bne.n	15062 <_nano_sys_clock_tick_announce+0x166>
   1505c:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1505e:	3301      	adds	r3, #1
   15060:	d015      	beq.n	1508e <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15062:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   15066:	f1bb 0f00 	cmp.w	fp, #0
   1506a:	d0c8      	beq.n	14ffe <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   1506c:	9b03      	ldr	r3, [sp, #12]
   1506e:	455b      	cmp	r3, fp
   15070:	d108      	bne.n	15084 <_nano_sys_clock_tick_announce+0x188>
   15072:	2300      	movs	r3, #0
   15074:	e008      	b.n	15088 <_nano_sys_clock_tick_announce+0x18c>
   15076:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   1507a:	6943      	ldr	r3, [r0, #20]
   1507c:	2b00      	cmp	r3, #0
   1507e:	d0f2      	beq.n	15066 <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   15080:	4798      	blx	r3
   15082:	e7f0      	b.n	15066 <_nano_sys_clock_tick_announce+0x16a>
   15084:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   15088:	4658      	mov	r0, fp
   1508a:	469b      	mov	fp, r3
   1508c:	e7c9      	b.n	15022 <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   1508e:	4630      	mov	r0, r6
   15090:	f7ff fd60 	bl	14b54 <_add_thread_to_ready_q>
   15094:	e7e5      	b.n	15062 <_nano_sys_clock_tick_announce+0x166>
   15096:	bf00      	nop
   15098:	200019f0 	.word	0x200019f0
   1509c:	200019b8 	.word	0x200019b8
   150a0:	200019ec 	.word	0x200019ec
   150a4:	20001890 	.word	0x20001890
   150a8:	200019e8 	.word	0x200019e8

000150ac <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   150ac:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   150ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
   150b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   150b6:	4903      	ldr	r1, [pc, #12]	; (150c4 <k_sys_work_q_init+0x18>)
   150b8:	4803      	ldr	r0, [pc, #12]	; (150c8 <k_sys_work_q_init+0x1c>)
   150ba:	f000 f999 	bl	153f0 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   150be:	2000      	movs	r0, #0
   150c0:	bd08      	pop	{r3, pc}
   150c2:	bf00      	nop
   150c4:	20003698 	.word	0x20003698
   150c8:	200019f8 	.word	0x200019f8

000150cc <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   150cc:	6903      	ldr	r3, [r0, #16]
   150ce:	1c5a      	adds	r2, r3, #1
   150d0:	d011      	beq.n	150f6 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   150d2:	4a0a      	ldr	r2, [pc, #40]	; (150fc <_abort_timeout+0x30>)
   150d4:	6992      	ldr	r2, [r2, #24]
   150d6:	4290      	cmp	r0, r2
   150d8:	bf1f      	itttt	ne
   150da:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   150dc:	690a      	ldrne	r2, [r1, #16]
   150de:	189b      	addne	r3, r3, r2
   150e0:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   150e2:	e890 000c 	ldmia.w	r0, {r2, r3}
   150e6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   150e8:	6802      	ldr	r2, [r0, #0]
   150ea:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   150ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   150f0:	6103      	str	r3, [r0, #16]
	return 0;
   150f2:	2000      	movs	r0, #0
   150f4:	4770      	bx	lr
		return _INACTIVE;
   150f6:	4618      	mov	r0, r3
}
   150f8:	4770      	bx	lr
   150fa:	bf00      	nop
   150fc:	200019b8 	.word	0x200019b8

00015100 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   15100:	7a42      	ldrb	r2, [r0, #9]
   15102:	06d2      	lsls	r2, r2, #27
   15104:	d104      	bne.n	15110 <_ready_thread+0x10>
   15106:	6a43      	ldr	r3, [r0, #36]	; 0x24
   15108:	3301      	adds	r3, #1
   1510a:	d101      	bne.n	15110 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   1510c:	f7ff bd22 	b.w	14b54 <_add_thread_to_ready_q>
   15110:	4770      	bx	lr
	...

00015114 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   15114:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   15116:	f04f 0320 	mov.w	r3, #32
   1511a:	f3ef 8611 	mrs	r6, BASEPRI
   1511e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   15122:	4a19      	ldr	r2, [pc, #100]	; (15188 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   15124:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   15126:	230a      	movs	r3, #10
   15128:	3109      	adds	r1, #9
   1512a:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   1512e:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   15130:	6241      	str	r1, [r0, #36]	; 0x24
   15132:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   15134:	2300      	movs	r3, #0
   15136:	6203      	str	r3, [r0, #32]
   15138:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1513c:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   1513e:	f100 0514 	add.w	r5, r0, #20
   15142:	d108      	bne.n	15156 <schedule_new_thread.part.11+0x42>
	node->next = list;
   15144:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   15146:	6993      	ldr	r3, [r2, #24]
   15148:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   1514a:	6993      	ldr	r3, [r2, #24]
   1514c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1514e:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15150:	f386 8811 	msr	BASEPRI, r6
   15154:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   15156:	2b00      	cmp	r3, #0
   15158:	d0f4      	beq.n	15144 <schedule_new_thread.part.11+0x30>
   1515a:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   1515e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   15160:	691f      	ldr	r7, [r3, #16]
   15162:	42bc      	cmp	r4, r7
   15164:	dc08      	bgt.n	15178 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   15166:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   15168:	1b3c      	subs	r4, r7, r4
   1516a:	611c      	str	r4, [r3, #16]
   1516c:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   1516e:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   15170:	685a      	ldr	r2, [r3, #4]
   15172:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   15174:	605d      	str	r5, [r3, #4]
   15176:	e7eb      	b.n	15150 <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   15178:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   1517a:	4573      	cmp	r3, lr
   1517c:	6244      	str	r4, [r0, #36]	; 0x24
   1517e:	d0e1      	beq.n	15144 <schedule_new_thread.part.11+0x30>
   15180:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   15182:	2b00      	cmp	r3, #0
   15184:	d1eb      	bne.n	1515e <schedule_new_thread.part.11+0x4a>
   15186:	e7dd      	b.n	15144 <schedule_new_thread.part.11+0x30>
   15188:	200019b8 	.word	0x200019b8

0001518c <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   1518c:	4770      	bx	lr
	...

00015190 <k_is_in_isr>:
   15190:	f3ef 8005 	mrs	r0, IPSR
   15194:	280d      	cmp	r0, #13
   15196:	d807      	bhi.n	151a8 <k_is_in_isr+0x18>
   15198:	b138      	cbz	r0, 151aa <k_is_in_isr+0x1a>
   1519a:	4b04      	ldr	r3, [pc, #16]	; (151ac <k_is_in_isr+0x1c>)
   1519c:	6858      	ldr	r0, [r3, #4]
   1519e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   151a2:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   151a6:	4770      	bx	lr
   151a8:	2001      	movs	r0, #1
}
   151aa:	4770      	bx	lr
   151ac:	e000ed00 	.word	0xe000ed00

000151b0 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   151b0:	4b02      	ldr	r3, [pc, #8]	; (151bc <_is_thread_essential+0xc>)
   151b2:	689b      	ldr	r3, [r3, #8]
   151b4:	7a18      	ldrb	r0, [r3, #8]
}
   151b6:	f000 0001 	and.w	r0, r0, #1
   151ba:	4770      	bx	lr
   151bc:	200019b8 	.word	0x200019b8

000151c0 <_check_stack_sentinel>:
	if (_current->base.thread_state & _THREAD_DUMMY) {
   151c0:	4b09      	ldr	r3, [pc, #36]	; (151e8 <_check_stack_sentinel+0x28>)
   151c2:	689b      	ldr	r3, [r3, #8]
   151c4:	7a5a      	ldrb	r2, [r3, #9]
   151c6:	07d2      	lsls	r2, r2, #31
   151c8:	d40d      	bmi.n	151e6 <_check_stack_sentinel+0x26>
	stack = (u32_t *)_current->stack_info.start;
   151ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
	if (*stack != STACK_SENTINEL) {
   151cc:	681a      	ldr	r2, [r3, #0]
   151ce:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   151d2:	d008      	beq.n	151e6 <_check_stack_sentinel+0x26>
		*stack = STACK_SENTINEL;
   151d4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   151d8:	601a      	str	r2, [r3, #0]
		_k_except_reason(_NANO_ERR_STACK_CHK_FAIL);
   151da:	4040      	eors	r0, r0
   151dc:	f380 8811 	msr	BASEPRI, r0
   151e0:	f04f 0002 	mov.w	r0, #2
   151e4:	df02      	svc	2
   151e6:	4770      	bx	lr
   151e8:	200019b8 	.word	0x200019b8

000151ec <_impl_k_thread_start>:
{
   151ec:	b510      	push	{r4, lr}
	__asm__ volatile(
   151ee:	f04f 0320 	mov.w	r3, #32
   151f2:	f3ef 8411 	mrs	r4, BASEPRI
   151f6:	f383 8811 	msr	BASEPRI, r3
   151fa:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   151fc:	0759      	lsls	r1, r3, #29
   151fe:	d402      	bmi.n	15206 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15200:	f384 8811 	msr	BASEPRI, r4
   15204:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15206:	f023 0304 	bic.w	r3, r3, #4
   1520a:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   1520c:	f7ff ff78 	bl	15100 <_ready_thread>
	_reschedule(key);
   15210:	4620      	mov	r0, r4
}
   15212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   15216:	f7ff bc4b 	b.w	14ab0 <_reschedule>
	...

0001521c <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   1521c:	b530      	push	{r4, r5, lr}
   1521e:	b087      	sub	sp, #28
   15220:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15222:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   15224:	9504      	str	r5, [sp, #16]
   15226:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   15228:	9503      	str	r5, [sp, #12]
   1522a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1522c:	9502      	str	r5, [sp, #8]
   1522e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   15230:	9501      	str	r5, [sp, #4]
   15232:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   15234:	9500      	str	r5, [sp, #0]
   15236:	f7ec fb6f 	bl	1918 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1523a:	4b04      	ldr	r3, [pc, #16]	; (1524c <_setup_new_thread+0x30>)
   1523c:	689b      	ldr	r3, [r3, #8]
   1523e:	b913      	cbnz	r3, 15246 <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   15240:	6663      	str	r3, [r4, #100]	; 0x64
}
   15242:	b007      	add	sp, #28
   15244:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   15246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   15248:	e7fa      	b.n	15240 <_setup_new_thread+0x24>
   1524a:	bf00      	nop
   1524c:	200019b8 	.word	0x200019b8

00015250 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   15250:	b570      	push	{r4, r5, r6, lr}
   15252:	b086      	sub	sp, #24
   15254:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15256:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   15258:	9604      	str	r6, [sp, #16]
   1525a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1525c:	9603      	str	r6, [sp, #12]
   1525e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   15260:	9602      	str	r6, [sp, #8]
   15262:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   15264:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15266:	9601      	str	r6, [sp, #4]
   15268:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1526a:	9600      	str	r6, [sp, #0]
   1526c:	f7ff ffd6 	bl	1521c <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   15270:	1c6b      	adds	r3, r5, #1
   15272:	d003      	beq.n	1527c <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   15274:	b92d      	cbnz	r5, 15282 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   15276:	4620      	mov	r0, r4
   15278:	f7ff ffb8 	bl	151ec <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   1527c:	4620      	mov	r0, r4
   1527e:	b006      	add	sp, #24
   15280:	bd70      	pop	{r4, r5, r6, pc}
   15282:	4629      	mov	r1, r5
   15284:	4620      	mov	r0, r4
   15286:	f7ff ff45 	bl	15114 <schedule_new_thread.part.11>
   1528a:	e7f7      	b.n	1527c <_impl_k_thread_create+0x2c>

0001528c <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   1528c:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   1528e:	b510      	push	{r4, lr}
   15290:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   15292:	b103      	cbz	r3, 15296 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   15294:	4798      	blx	r3
   15296:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   15298:	06da      	lsls	r2, r3, #27
   1529a:	d106      	bne.n	152aa <_k_thread_single_abort+0x1e>
   1529c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1529e:	3201      	adds	r2, #1
   152a0:	d103      	bne.n	152aa <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   152a2:	4620      	mov	r0, r4
   152a4:	f7ff fbb4 	bl	14a10 <_remove_thread_from_ready_q>
   152a8:	e00b      	b.n	152c2 <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   152aa:	079b      	lsls	r3, r3, #30
   152ac:	d502      	bpl.n	152b4 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   152ae:	4620      	mov	r0, r4
   152b0:	f7ff fbd6 	bl	14a60 <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   152b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   152b6:	3301      	adds	r3, #1
   152b8:	d003      	beq.n	152c2 <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   152ba:	f104 0014 	add.w	r0, r4, #20
   152be:	f7ff ff05 	bl	150cc <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   152c2:	7a63      	ldrb	r3, [r4, #9]
   152c4:	f043 0308 	orr.w	r3, r3, #8
   152c8:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   152ca:	bd10      	pop	{r4, pc}

000152cc <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   152cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   152ce:	4f21      	ldr	r7, [pc, #132]	; (15354 <_init_static_threads+0x88>)
   152d0:	4d21      	ldr	r5, [pc, #132]	; (15358 <_init_static_threads+0x8c>)
{
   152d2:	b087      	sub	sp, #28
   152d4:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   152d6:	42bd      	cmp	r5, r7
   152d8:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   152dc:	d314      	bcc.n	15308 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   152de:	4b1f      	ldr	r3, [pc, #124]	; (1535c <_init_static_threads+0x90>)
   152e0:	689a      	ldr	r2, [r3, #8]
   152e2:	7ad3      	ldrb	r3, [r2, #11]
   152e4:	3b01      	subs	r3, #1
   152e6:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   152e8:	f04f 0320 	mov.w	r3, #32
   152ec:	f3ef 8511 	mrs	r5, BASEPRI
   152f0:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   152f4:	4c18      	ldr	r4, [pc, #96]	; (15358 <_init_static_threads+0x8c>)
   152f6:	42b4      	cmp	r4, r6
   152f8:	d31f      	bcc.n	1533a <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   152fa:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   152fe:	b007      	add	sp, #28
   15300:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   15304:	f7ff bbec 	b.w	14ae0 <k_sched_unlock>
		_setup_new_thread(
   15308:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1530c:	9304      	str	r3, [sp, #16]
   1530e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   15312:	9303      	str	r3, [sp, #12]
   15314:	f854 3c14 	ldr.w	r3, [r4, #-20]
   15318:	9302      	str	r3, [sp, #8]
   1531a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1531e:	9301      	str	r3, [sp, #4]
   15320:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   15324:	9300      	str	r3, [sp, #0]
   15326:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   1532a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1532c:	f7ff ff76 	bl	1521c <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   15330:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   15334:	651d      	str	r5, [r3, #80]	; 0x50
   15336:	4625      	mov	r5, r4
   15338:	e7cd      	b.n	152d6 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   1533a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1533c:	1c4b      	adds	r3, r1, #1
   1533e:	d003      	beq.n	15348 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   15340:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   15342:	b919      	cbnz	r1, 1534c <_init_static_threads+0x80>
   15344:	f7ff ff52 	bl	151ec <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   15348:	342c      	adds	r4, #44	; 0x2c
   1534a:	e7d4      	b.n	152f6 <_init_static_threads+0x2a>
   1534c:	f7ff fee2 	bl	15114 <schedule_new_thread.part.11>
   15350:	e7fa      	b.n	15348 <_init_static_threads+0x7c>
   15352:	bf00      	nop
   15354:	20003fe8 	.word	0x20003fe8
   15358:	20003fe8 	.word	0x20003fe8
   1535c:	200019b8 	.word	0x200019b8

00015360 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   15360:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   15362:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   15364:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   15366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   1536a:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   1536c:	72c3      	strb	r3, [r0, #11]
   1536e:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   15370:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   15372:	61c3      	str	r3, [r0, #28]
	t->func = func;
   15374:	6283      	str	r3, [r0, #40]	; 0x28
   15376:	4770      	bx	lr

00015378 <k_work_submit_to_queue>:
{
   15378:	b500      	push	{lr}
   1537a:	f101 0308 	add.w	r3, r1, #8
   1537e:	f3bf 8f5b 	dmb	ish
   15382:	e853 2f00 	ldrex	r2, [r3]
   15386:	f042 0e01 	orr.w	lr, r2, #1
   1538a:	e843 ec00 	strex	ip, lr, [r3]
   1538e:	f1bc 0f00 	cmp.w	ip, #0
   15392:	d1f6      	bne.n	15382 <k_work_submit_to_queue+0xa>
   15394:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   15398:	07d3      	lsls	r3, r2, #31
   1539a:	d403      	bmi.n	153a4 <k_work_submit_to_queue+0x2c>
}
   1539c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   153a0:	f7ff ba56 	b.w	14850 <k_queue_append>
   153a4:	f85d fb04 	ldr.w	pc, [sp], #4

000153a8 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   153a8:	f1a0 010c 	sub.w	r1, r0, #12
   153ac:	6980      	ldr	r0, [r0, #24]
   153ae:	f7ff bfe3 	b.w	15378 <k_work_submit_to_queue>

000153b2 <work_q_main>:
{
   153b2:	b510      	push	{r4, lr}
   153b4:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   153b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   153ba:	4620      	mov	r0, r4
   153bc:	f7ff fa6c 	bl	14898 <_impl_k_queue_get>
		if (!work) {
   153c0:	4603      	mov	r3, r0
   153c2:	2800      	cmp	r0, #0
   153c4:	d0f7      	beq.n	153b6 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   153c6:	3308      	adds	r3, #8
		handler = work->handler;
   153c8:	6842      	ldr	r2, [r0, #4]
   153ca:	f3bf 8f5b 	dmb	ish
   153ce:	e853 1f00 	ldrex	r1, [r3]
   153d2:	f021 0e01 	bic.w	lr, r1, #1
   153d6:	e843 ec00 	strex	ip, lr, [r3]
   153da:	f1bc 0f00 	cmp.w	ip, #0
   153de:	d1f6      	bne.n	153ce <work_q_main+0x1c>
   153e0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   153e4:	07cb      	lsls	r3, r1, #31
   153e6:	d500      	bpl.n	153ea <work_q_main+0x38>
			handler(work);
   153e8:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   153ea:	f7ff fcbb 	bl	14d64 <_impl_k_yield>
   153ee:	e7e2      	b.n	153b6 <work_q_main+0x4>

000153f0 <k_work_q_start>:
{
   153f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   153f2:	b087      	sub	sp, #28
   153f4:	4604      	mov	r4, r0
   153f6:	461f      	mov	r7, r3
   153f8:	460d      	mov	r5, r1
   153fa:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   153fc:	f7ff fa12 	bl	14824 <_impl_k_queue_init>

   15400:	2000      	movs	r0, #0
   15402:	9005      	str	r0, [sp, #20]
   15404:	9004      	str	r0, [sp, #16]
   15406:	9002      	str	r0, [sp, #8]
   15408:	9001      	str	r0, [sp, #4]
   1540a:	9703      	str	r7, [sp, #12]
   1540c:	9400      	str	r4, [sp, #0]
   1540e:	4b04      	ldr	r3, [pc, #16]	; (15420 <k_work_q_start+0x30>)
   15410:	4632      	mov	r2, r6
   15412:	4629      	mov	r1, r5
   15414:	f104 0014 	add.w	r0, r4, #20
   15418:	f7ff ff1a 	bl	15250 <_impl_k_thread_create>
}
   1541c:	b007      	add	sp, #28
   1541e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15420:	000153b3 	.word	0x000153b3

00015424 <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   15424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   15428:	2300      	movs	r3, #0
   1542a:	61c2      	str	r2, [r0, #28]
	t->func = func;
   1542c:	4a04      	ldr	r2, [pc, #16]	; (15440 <k_delayed_work_init+0x1c>)
   1542e:	6003      	str	r3, [r0, #0]
   15430:	6041      	str	r1, [r0, #4]
   15432:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   15434:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   15436:	6143      	str	r3, [r0, #20]
	t->func = func;
   15438:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   1543a:	6243      	str	r3, [r0, #36]	; 0x24
   1543c:	4770      	bx	lr
   1543e:	bf00      	nop
   15440:	000153a9 	.word	0x000153a9

00015444 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   15444:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   15446:	f04f 0320 	mov.w	r3, #32
   1544a:	f3ef 8411 	mrs	r4, BASEPRI
   1544e:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   15452:	6a43      	ldr	r3, [r0, #36]	; 0x24
   15454:	b923      	cbnz	r3, 15460 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15456:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   1545a:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   1545e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15460:	f3bf 8f5b 	dmb	ish
   15464:	6883      	ldr	r3, [r0, #8]
   15466:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   1546a:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1546c:	f100 0508 	add.w	r5, r0, #8
   15470:	d533      	bpl.n	154da <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   15472:	6a42      	ldr	r2, [r0, #36]	; 0x24
   15474:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   15476:	2100      	movs	r1, #0
   15478:	2b00      	cmp	r3, #0
   1547a:	d0ec      	beq.n	15456 <k_delayed_work_cancel+0x12>
   1547c:	4298      	cmp	r0, r3
   1547e:	d127      	bne.n	154d0 <k_delayed_work_cancel+0x8c>
   15480:	6803      	ldr	r3, [r0, #0]
   15482:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   15484:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   15488:	b9c9      	cbnz	r1, 154be <k_delayed_work_cancel+0x7a>
   1548a:	42b8      	cmp	r0, r7
	list->head = node;
   1548c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   1548e:	d100      	bne.n	15492 <k_delayed_work_cancel+0x4e>
	list->tail = node;
   15490:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   15492:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   15494:	f003 0303 	and.w	r3, r3, #3
   15498:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   1549a:	2300      	movs	r3, #0
   1549c:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1549e:	f3bf 8f5b 	dmb	ish
   154a2:	e855 2f00 	ldrex	r2, [r5]
   154a6:	f022 0201 	bic.w	r2, r2, #1
   154aa:	e845 2100 	strex	r1, r2, [r5]
   154ae:	2900      	cmp	r1, #0
   154b0:	d1f7      	bne.n	154a2 <k_delayed_work_cancel+0x5e>
   154b2:	f3bf 8f5b 	dmb	ish
   154b6:	f384 8811 	msr	BASEPRI, r4
	return 0;
   154ba:	4618      	mov	r0, r3
   154bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   154be:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   154c0:	f006 0603 	and.w	r6, r6, #3
   154c4:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   154c6:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   154c8:	600b      	str	r3, [r1, #0]
	list->tail = node;
   154ca:	bf08      	it	eq
   154cc:	6051      	streq	r1, [r2, #4]
   154ce:	e7e0      	b.n	15492 <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   154d0:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   154d2:	4619      	mov	r1, r3
   154d4:	f026 0303 	bic.w	r3, r6, #3
   154d8:	e7ce      	b.n	15478 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   154da:	69c1      	ldr	r1, [r0, #28]
   154dc:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   154de:	f100 020c 	add.w	r2, r0, #12
   154e2:	d0da      	beq.n	1549a <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   154e4:	4b08      	ldr	r3, [pc, #32]	; (15508 <k_delayed_work_cancel+0xc4>)
   154e6:	699b      	ldr	r3, [r3, #24]
   154e8:	429a      	cmp	r2, r3
   154ea:	bf1f      	itttt	ne
   154ec:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   154ee:	6913      	ldrne	r3, [r2, #16]
   154f0:	185b      	addne	r3, r3, r1
   154f2:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   154f4:	6903      	ldr	r3, [r0, #16]
   154f6:	68c2      	ldr	r2, [r0, #12]
   154f8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   154fa:	68c2      	ldr	r2, [r0, #12]
   154fc:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   154fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15502:	61c3      	str	r3, [r0, #28]
   15504:	e7c9      	b.n	1549a <k_delayed_work_cancel+0x56>
   15506:	bf00      	nop
   15508:	200019b8 	.word	0x200019b8

0001550c <k_delayed_work_submit_to_queue>:
{
   1550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1550e:	4607      	mov	r7, r0
   15510:	460c      	mov	r4, r1
   15512:	4615      	mov	r5, r2
	__asm__ volatile(
   15514:	f04f 0320 	mov.w	r3, #32
   15518:	f3ef 8611 	mrs	r6, BASEPRI
   1551c:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   15520:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   15522:	b123      	cbz	r3, 1552e <k_delayed_work_submit_to_queue+0x22>
   15524:	4283      	cmp	r3, r0
   15526:	d00b      	beq.n	15540 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   15528:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   1552c:	e00d      	b.n	1554a <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   1552e:	b138      	cbz	r0, 15540 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   15530:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   15532:	b96d      	cbnz	r5, 15550 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   15534:	4621      	mov	r1, r4
   15536:	4638      	mov	r0, r7
   15538:	f7ff ff1e 	bl	15378 <k_work_submit_to_queue>
	err = 0;
   1553c:	2000      	movs	r0, #0
   1553e:	e004      	b.n	1554a <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   15540:	4620      	mov	r0, r4
   15542:	f7ff ff7f 	bl	15444 <k_delayed_work_cancel>
		if (err < 0) {
   15546:	2800      	cmp	r0, #0
   15548:	daf2      	bge.n	15530 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1554a:	f386 8811 	msr	BASEPRI, r6
}
   1554e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   15550:	220a      	movs	r2, #10
   15552:	3509      	adds	r5, #9
   15554:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   15558:	4a16      	ldr	r2, [pc, #88]	; (155b4 <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   1555a:	2300      	movs	r3, #0
   1555c:	4611      	mov	r1, r2
   1555e:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   15560:	61a3      	str	r3, [r4, #24]
   15562:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   15566:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15568:	428b      	cmp	r3, r1
   1556a:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   1556e:	61e5      	str	r5, [r4, #28]
   15570:	d106      	bne.n	15580 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   15572:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   15574:	6993      	ldr	r3, [r2, #24]
   15576:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   15578:	6993      	ldr	r3, [r2, #24]
   1557a:	601f      	str	r7, [r3, #0]
	list->tail = node;
   1557c:	6197      	str	r7, [r2, #24]
   1557e:	e7dd      	b.n	1553c <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   15580:	2b00      	cmp	r3, #0
   15582:	d0f6      	beq.n	15572 <k_delayed_work_submit_to_queue+0x66>
   15584:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   15588:	69e0      	ldr	r0, [r4, #28]
   1558a:	691d      	ldr	r5, [r3, #16]
   1558c:	42a8      	cmp	r0, r5
   1558e:	dc08      	bgt.n	155a2 <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   15590:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   15592:	1a28      	subs	r0, r5, r0
   15594:	6118      	str	r0, [r3, #16]
   15596:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   15598:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   1559a:	685a      	ldr	r2, [r3, #4]
   1559c:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   1559e:	605f      	str	r7, [r3, #4]
   155a0:	e7cc      	b.n	1553c <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   155a2:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   155a4:	4573      	cmp	r3, lr
   155a6:	61e0      	str	r0, [r4, #28]
   155a8:	d0e3      	beq.n	15572 <k_delayed_work_submit_to_queue+0x66>
   155aa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   155ac:	2b00      	cmp	r3, #0
   155ae:	d1eb      	bne.n	15588 <k_delayed_work_submit_to_queue+0x7c>
   155b0:	e7df      	b.n	15572 <k_delayed_work_submit_to_queue+0x66>
   155b2:	bf00      	nop
   155b4:	200019b8 	.word	0x200019b8

000155b8 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   155b8:	2314      	movs	r3, #20
   155ba:	b530      	push	{r4, r5, lr}
   155bc:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   155c0:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   155c2:	2900      	cmp	r1, #0
   155c4:	da00      	bge.n	155c8 <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   155c6:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   155c8:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   155ca:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   155cc:	f003 030f 	and.w	r3, r3, #15
   155d0:	2b02      	cmp	r3, #2
   155d2:	d003      	beq.n	155dc <clear_event_registrations+0x24>
   155d4:	2b04      	cmp	r3, #4
   155d6:	d001      	beq.n	155dc <clear_event_registrations+0x24>
   155d8:	2b01      	cmp	r3, #1
   155da:	d104      	bne.n	155e6 <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   155dc:	6843      	ldr	r3, [r0, #4]
   155de:	6805      	ldr	r5, [r0, #0]
   155e0:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   155e2:	6805      	ldr	r5, [r0, #0]
   155e4:	606b      	str	r3, [r5, #4]
   155e6:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   155ea:	f04f 0320 	mov.w	r3, #32
   155ee:	f3ef 8211 	mrs	r2, BASEPRI
   155f2:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   155f6:	3901      	subs	r1, #1
   155f8:	3814      	subs	r0, #20
   155fa:	e7e2      	b.n	155c2 <clear_event_registrations+0xa>

000155fc <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   155fc:	6883      	ldr	r3, [r0, #8]
{
   155fe:	b570      	push	{r4, r5, r6, lr}
   15600:	4605      	mov	r5, r0
   15602:	460e      	mov	r6, r1
	if (!event->poller) {
   15604:	b1d3      	cbz	r3, 1563c <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   15606:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   15608:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   1560a:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   1560c:	7a63      	ldrb	r3, [r4, #9]
   1560e:	079a      	lsls	r2, r3, #30
   15610:	d514      	bpl.n	1563c <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   15612:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15614:	3302      	adds	r3, #2
   15616:	d01a      	beq.n	1564e <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   15618:	4620      	mov	r0, r4
   1561a:	f7ff fa3e 	bl	14a9a <_unpend_thread>
	_set_thread_return_value(thread,
   1561e:	2e00      	cmp	r6, #0
   15620:	bf0c      	ite	eq
   15622:	f06f 0303 	mvneq.w	r3, #3
   15626:	2300      	movne	r3, #0
   15628:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   1562a:	7a63      	ldrb	r3, [r4, #9]
   1562c:	06db      	lsls	r3, r3, #27
   1562e:	d105      	bne.n	1563c <signal_poll_event+0x40>
   15630:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15632:	3301      	adds	r3, #1
   15634:	d102      	bne.n	1563c <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   15636:	4620      	mov	r0, r4
   15638:	f7ff fa8c 	bl	14b54 <_add_thread_to_ready_q>
	event->state |= state;
   1563c:	7b6b      	ldrb	r3, [r5, #13]
   1563e:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   15642:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   15646:	2000      	movs	r0, #0
	event->state |= state;
   15648:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   1564a:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   1564c:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1564e:	f06f 000a 	mvn.w	r0, #10
}
   15652:	bd70      	pop	{r4, r5, r6, pc}

00015654 <add_event>:
{
   15654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   15656:	6803      	ldr	r3, [r0, #0]
   15658:	4298      	cmp	r0, r3
   1565a:	4604      	mov	r4, r0
   1565c:	460e      	mov	r6, r1
   1565e:	4617      	mov	r7, r2
   15660:	d106      	bne.n	15670 <add_event+0x1c>
	node->next = list;
   15662:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   15664:	6863      	ldr	r3, [r4, #4]
   15666:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   15668:	6863      	ldr	r3, [r4, #4]
   1566a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1566c:	6066      	str	r6, [r4, #4]
   1566e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   15670:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   15672:	2b00      	cmp	r3, #0
   15674:	d0f5      	beq.n	15662 <add_event+0xe>
   15676:	689b      	ldr	r3, [r3, #8]
   15678:	6811      	ldr	r1, [r2, #0]
   1567a:	6818      	ldr	r0, [r3, #0]
   1567c:	f7ff f9be 	bl	149fc <_is_t1_higher_prio_than_t2>
   15680:	2800      	cmp	r0, #0
   15682:	d1ee      	bne.n	15662 <add_event+0xe>
	return list->head == list;
   15684:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15686:	42ac      	cmp	r4, r5
   15688:	d0eb      	beq.n	15662 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1568a:	2d00      	cmp	r5, #0
   1568c:	d0e9      	beq.n	15662 <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   1568e:	68ab      	ldr	r3, [r5, #8]
   15690:	6838      	ldr	r0, [r7, #0]
   15692:	6819      	ldr	r1, [r3, #0]
   15694:	f7ff f9b2 	bl	149fc <_is_t1_higher_prio_than_t2>
   15698:	b130      	cbz	r0, 156a8 <add_event+0x54>
		node->prev = insert_point->prev;
   1569a:	686b      	ldr	r3, [r5, #4]
   1569c:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   1569e:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   156a0:	686b      	ldr	r3, [r5, #4]
   156a2:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   156a4:	606e      	str	r6, [r5, #4]
   156a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   156a8:	6863      	ldr	r3, [r4, #4]
   156aa:	429d      	cmp	r5, r3
   156ac:	d0d9      	beq.n	15662 <add_event+0xe>
   156ae:	682d      	ldr	r5, [r5, #0]
   156b0:	e7eb      	b.n	1568a <add_event+0x36>

000156b2 <k_poll_event_init>:
{
   156b2:	b530      	push	{r4, r5, lr}
	event->type = type;
   156b4:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   156b6:	6103      	str	r3, [r0, #16]
	event->type = type;
   156b8:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   156bc:	7b81      	ldrb	r1, [r0, #14]
   156be:	f362 0100 	bfi	r1, r2, #0, #1
   156c2:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   156c4:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   156c6:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   156c8:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   156cc:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   156d0:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   156d2:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   156d4:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   156d6:	bd30      	pop	{r4, r5, pc}

000156d8 <_impl_k_poll>:
{
   156d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   156dc:	4b3f      	ldr	r3, [pc, #252]	; (157dc <_impl_k_poll+0x104>)
{
   156de:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   156e0:	689b      	ldr	r3, [r3, #8]
   156e2:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   156e4:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   156e6:	2301      	movs	r3, #1
{
   156e8:	4607      	mov	r7, r0
   156ea:	468a      	mov	sl, r1
   156ec:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   156ee:	9301      	str	r3, [sp, #4]
   156f0:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   156f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   156f6:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   156f8:	4556      	cmp	r6, sl
   156fa:	db10      	blt.n	1571e <_impl_k_poll+0x46>
   156fc:	f04f 0320 	mov.w	r3, #32
   15700:	f3ef 8611 	mrs	r6, BASEPRI
   15704:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   15708:	9c01      	ldr	r4, [sp, #4]
   1570a:	2c00      	cmp	r4, #0
   1570c:	d13f      	bne.n	1578e <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   1570e:	4632      	mov	r2, r6
   15710:	4629      	mov	r1, r5
   15712:	4638      	mov	r0, r7
   15714:	f7ff ff50 	bl	155b8 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15718:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   1571c:	e040      	b.n	157a0 <_impl_k_poll+0xc8>
	__asm__ volatile(
   1571e:	f04f 0320 	mov.w	r3, #32
   15722:	f3ef 8b11 	mrs	fp, BASEPRI
   15726:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   1572a:	7b62      	ldrb	r2, [r4, #13]
   1572c:	f002 030f 	and.w	r3, r2, #15
   15730:	2b02      	cmp	r3, #2
   15732:	d003      	beq.n	1573c <_impl_k_poll+0x64>
   15734:	2b04      	cmp	r3, #4
   15736:	d004      	beq.n	15742 <_impl_k_poll+0x6a>
   15738:	2b01      	cmp	r3, #1
   1573a:	d106      	bne.n	1574a <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   1573c:	6921      	ldr	r1, [r4, #16]
   1573e:	6889      	ldr	r1, [r1, #8]
   15740:	e001      	b.n	15746 <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   15742:	6921      	ldr	r1, [r4, #16]
   15744:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   15746:	2900      	cmp	r1, #0
   15748:	d13d      	bne.n	157c6 <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   1574a:	f1b8 0f00 	cmp.w	r8, #0
   1574e:	d014      	beq.n	1577a <_impl_k_poll+0xa2>
   15750:	9a01      	ldr	r2, [sp, #4]
   15752:	b192      	cbz	r2, 1577a <_impl_k_poll+0xa2>
	switch (event->type) {
   15754:	2b02      	cmp	r3, #2
   15756:	d007      	beq.n	15768 <_impl_k_poll+0x90>
   15758:	2b04      	cmp	r3, #4
   1575a:	d013      	beq.n	15784 <_impl_k_poll+0xac>
   1575c:	2b01      	cmp	r3, #1
   1575e:	d109      	bne.n	15774 <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   15760:	466a      	mov	r2, sp
   15762:	4621      	mov	r1, r4
   15764:	6920      	ldr	r0, [r4, #16]
   15766:	e003      	b.n	15770 <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   15768:	6920      	ldr	r0, [r4, #16]
   1576a:	466a      	mov	r2, sp
   1576c:	4621      	mov	r1, r4
   1576e:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   15770:	f7ff ff70 	bl	15654 <add_event>
	event->poller = poller;
   15774:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   15778:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1577a:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   1577e:	3601      	adds	r6, #1
   15780:	3414      	adds	r4, #20
   15782:	e7b9      	b.n	156f8 <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   15784:	6920      	ldr	r0, [r4, #16]
   15786:	466a      	mov	r2, sp
   15788:	4621      	mov	r1, r4
   1578a:	3008      	adds	r0, #8
   1578c:	e7f0      	b.n	15770 <_impl_k_poll+0x98>
	poller.is_polling = 0;
   1578e:	2300      	movs	r3, #0
   15790:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   15792:	f1b8 0f00 	cmp.w	r8, #0
   15796:	d107      	bne.n	157a8 <_impl_k_poll+0xd0>
   15798:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   1579c:	f06f 040a 	mvn.w	r4, #10
}
   157a0:	4620      	mov	r0, r4
   157a2:	b005      	add	sp, #20
   157a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   157a8:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   157aa:	4642      	mov	r2, r8
   157ac:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   157ae:	9102      	str	r1, [sp, #8]
   157b0:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   157b2:	f7ff fa7d 	bl	14cb0 <_pend_current_thread>
   157b6:	4604      	mov	r4, r0
	__asm__ volatile(
   157b8:	f04f 0320 	mov.w	r3, #32
   157bc:	f3ef 8611 	mrs	r6, BASEPRI
   157c0:	f383 8811 	msr	BASEPRI, r3
   157c4:	e7a3      	b.n	1570e <_impl_k_poll+0x36>
	event->state |= state;
   157c6:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   157ca:	f363 1207 	bfi	r2, r3, #4, #4
   157ce:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   157d0:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   157d4:	f8cd 9004 	str.w	r9, [sp, #4]
   157d8:	e7cf      	b.n	1577a <_impl_k_poll+0xa2>
   157da:	bf00      	nop
   157dc:	200019b8 	.word	0x200019b8

000157e0 <_handle_obj_poll_events>:
	return list->head == list;
   157e0:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   157e2:	4298      	cmp	r0, r3
   157e4:	d007      	beq.n	157f6 <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   157e6:	e893 0005 	ldmia.w	r3, {r0, r2}
   157ea:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   157ec:	6818      	ldr	r0, [r3, #0]
   157ee:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   157f0:	4618      	mov	r0, r3
   157f2:	f7ff bf03 	b.w	155fc <signal_poll_event>
   157f6:	4770      	bx	lr

000157f8 <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   157f8:	b538      	push	{r3, r4, r5, lr}
   157fa:	f04f 0320 	mov.w	r3, #32
   157fe:	f3ef 8511 	mrs	r5, BASEPRI
   15802:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   15806:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   15808:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   1580a:	4298      	cmp	r0, r3
	signal->signaled = 1;
   1580c:	f04f 0101 	mov.w	r1, #1
   15810:	6081      	str	r1, [r0, #8]
   15812:	d00d      	beq.n	15830 <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   15814:	e893 0005 	ldmia.w	r3, {r0, r2}
   15818:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   1581a:	6818      	ldr	r0, [r3, #0]
   1581c:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1581e:	4618      	mov	r0, r3
   15820:	f7ff feec 	bl	155fc <signal_poll_event>
   15824:	4604      	mov	r4, r0

	_reschedule(key);
   15826:	4628      	mov	r0, r5
   15828:	f7ff f942 	bl	14ab0 <_reschedule>
	return rc;
}
   1582c:	4620      	mov	r0, r4
   1582e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15830:	f385 8811 	msr	BASEPRI, r5
		return 0;
   15834:	2400      	movs	r4, #0
   15836:	e7f9      	b.n	1582c <_impl_k_poll_signal+0x34>

00015838 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   15838:	4770      	bx	lr
