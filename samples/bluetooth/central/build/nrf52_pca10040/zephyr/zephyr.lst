
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002ce0 	.word	0x20002ce0

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001add 	.word	0x00001add
       8:	00001b31 	.word	0x00001b31
       c:	00001975 	.word	0x00001975
      10:	00001975 	.word	0x00001975
      14:	00001975 	.word	0x00001975
      18:	00001975 	.word	0x00001975
      1c:	00001975 	.word	0x00001975
      20:	00001975 	.word	0x00001975
      24:	00001975 	.word	0x00001975
      28:	00001975 	.word	0x00001975
      2c:	0000157d 	.word	0x0000157d
      30:	00001975 	.word	0x00001975
      34:	00001975 	.word	0x00001975
      38:	00001539 	.word	0x00001539
      3c:	00001975 	.word	0x00001975

00000040 <_irq_vector_table>:
      40:	00001aa1 0001097b 00001aa1 00001aa1     ....{...........
      50:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      60:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      70:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      80:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      90:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      a0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      b0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      c0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      d0:	00001aa1 00001aa1 00001aa1              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001275 00000000 000018ed     ....u...........
      ec:	00000000 000018ed 00000000 000018ed     ................
      fc:	00000000 000018ed 00000000 000018ed     ................
     10c:	00000000 0001298d 00000000 000018ed     .....)..........
     11c:	00000000 000018ed 00000000 000018ed     ................
     12c:	00000000 000018ed 00000000 00010941     ............A...
     13c:	00000000 000018ed 20003eb0 00012c91     .........>. .,..
     14c:	00000000 000018ed 00000000 000018ed     ................
     15c:	00000000 000018ed 00000000 0000139d     ................
     16c:	00000000 000018ed 00000000 000018ed     ................
     17c:	00000000 000018ed 00000000 000018ed     ................
     18c:	00000000 000018ed 00000000 000018ed     ................
     19c:	00000000 00010975 00000000 000018ed     ....u...........
     1ac:	00000000 000018ed 00000000 000018ed     ................
     1bc:	00000000 000018ed 00000000 000018ed     ................
     1cc:	00000000 000018ed 00000000 000018ed     ................
     1dc:	00000000 000018ed 00000000 000018ed     ................
     1ec:	00000000 000018ed 00000000 000018ed     ................
     1fc:	00000000 000018ed 00000000 000018ed     ................
     20c:	00000000 000018ed                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb14 	bl	1b94 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	00014215 	.word	0x00014215
     5b0:	0001423e 	.word	0x0001423e
     5b4:	0001421c 	.word	0x0001421c
     5b8:	00014223 	.word	0x00014223
     5bc:	0001422d 	.word	0x0001422d
     5c0:	00014237 	.word	0x00014237

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f003 fe9b 	bl	4306 <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f003 ff39 	bl	4470 <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	00014261 	.word	0x00014261
     604:	20000000 	.word	0x20000000
     608:	0001427f 	.word	0x0001427f

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f003 fe74 	bl	4306 <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f003 fe66 	bl	4300 <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 f9e8 	bl	3a1c <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	000142aa 	.word	0x000142aa
     664:	000141b8 	.word	0x000141b8
     668:	00000671 	.word	0x00000671
     66c:	000142c8 	.word	0x000142c8

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 fa13 	bl	3ac0 <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f003 fe2f 	bl	430c <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	0001428e 	.word	0x0001428e
     6bc:	000141be 	.word	0x000141be

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 f93a 	bl	393c <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f003 faaa 	bl	3c38 <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 f992 	bl	3a1c <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	000142eb 	.word	0x000142eb
     70c:	0001430b 	.word	0x0001430b
     710:	20003a20 	.word	0x20003a20
     714:	000141c6 	.word	0x000141c6
     718:	00000671 	.word	0x00000671
     71c:	000142c8 	.word	0x000142c8
     720:	00014322 	.word	0x00014322

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003a54 	.word	0x20003a54
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f012 ff3a 	bl	1371c <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8d4 	bl	1a54 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003a58 	.word	0x20003a58

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003a58 	.word	0x20003a58

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr
	...

00000fe4 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe4:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fe6:	4c11      	ldr	r4, [pc, #68]	; (102c <sys_rand32_get+0x48>)
     fe8:	f3bf 8f5b 	dmb	ish
     fec:	6820      	ldr	r0, [r4, #0]
     fee:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff2:	b960      	cbnz	r0, 100e <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff4:	480e      	ldr	r0, [pc, #56]	; (1030 <sys_rand32_get+0x4c>)
     ff6:	f011 feb9 	bl	12d6c <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffa:	f3bf 8f5b 	dmb	ish
     ffe:	e854 3f00 	ldrex	r3, [r4]
    1002:	e844 0200 	strex	r2, r0, [r4]
    1006:	2a00      	cmp	r2, #0
    1008:	d1f9      	bne.n	ffe <sys_rand32_get+0x1a>
    100a:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    100e:	6843      	ldr	r3, [r0, #4]
    1010:	2204      	movs	r2, #4
    1012:	681b      	ldr	r3, [r3, #0]
    1014:	eb0d 0102 	add.w	r1, sp, r2
    1018:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101a:	2800      	cmp	r0, #0
    101c:	da02      	bge.n	1024 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    101e:	f000 fa37 	bl	1490 <_timer_cycle_get_32>
    1022:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1024:	9801      	ldr	r0, [sp, #4]
    1026:	b002      	add	sp, #8
    1028:	bd10      	pop	{r4, pc}
    102a:	bf00      	nop
    102c:	20000004 	.word	0x20000004
    1030:	00014350 	.word	0x00014350

00001034 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1034:	280a      	cmp	r0, #10
{
    1036:	b538      	push	{r3, r4, r5, lr}
    1038:	4604      	mov	r4, r0
    103a:	4d07      	ldr	r5, [pc, #28]	; (1058 <console_out+0x24>)
	if ('\n' == c) {
    103c:	d104      	bne.n	1048 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    103e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1040:	6843      	ldr	r3, [r0, #4]
    1042:	210d      	movs	r1, #13
    1044:	685b      	ldr	r3, [r3, #4]
    1046:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1048:	6828      	ldr	r0, [r5, #0]
    104a:	6843      	ldr	r3, [r0, #4]
    104c:	b2e1      	uxtb	r1, r4
    104e:	685b      	ldr	r3, [r3, #4]
    1050:	4798      	blx	r3

	return c;
}
    1052:	4620      	mov	r0, r4
    1054:	bd38      	pop	{r3, r4, r5, pc}
    1056:	bf00      	nop
    1058:	20000008 	.word	0x20000008

0000105c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    105c:	4801      	ldr	r0, [pc, #4]	; (1064 <uart_console_hook_install+0x8>)
    105e:	f7ff be4f 	b.w	d00 <__printk_hook_install>
    1062:	bf00      	nop
    1064:	00001035 	.word	0x00001035

00001068 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1068:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    106a:	4804      	ldr	r0, [pc, #16]	; (107c <uart_console_init+0x14>)
    106c:	f011 fe7e 	bl	12d6c <device_get_binding>
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <uart_console_init+0x18>)
    1072:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1074:	f7ff fff2 	bl	105c <uart_console_hook_install>

	return 0;
}
    1078:	2000      	movs	r0, #0
    107a:	bd08      	pop	{r3, pc}
    107c:	0001435a 	.word	0x0001435a
    1080:	20000008 	.word	0x20000008

00001084 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1084:	b510      	push	{r4, lr}
	__asm__ volatile(
    1086:	f04f 0320 	mov.w	r3, #32
    108a:	f3ef 8211 	mrs	r2, BASEPRI
    108e:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1092:	4c11      	ldr	r4, [pc, #68]	; (10d8 <_m16src_stop+0x54>)
    1094:	7823      	ldrb	r3, [r4, #0]
    1096:	b923      	cbnz	r3, 10a2 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1098:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    109c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10a0:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10a2:	3b01      	subs	r3, #1
    10a4:	b2db      	uxtb	r3, r3
    10a6:	7023      	strb	r3, [r4, #0]
    10a8:	b123      	cbz	r3, 10b4 <_m16src_stop+0x30>
    10aa:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10ae:	f06f 000f 	mvn.w	r0, #15
    10b2:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10b4:	4b09      	ldr	r3, [pc, #36]	; (10dc <_m16src_stop+0x58>)
    10b6:	7818      	ldrb	r0, [r3, #0]
    10b8:	2101      	movs	r1, #1
    10ba:	b128      	cbz	r0, 10c8 <_m16src_stop+0x44>
		m16src_ref++;
    10bc:	7021      	strb	r1, [r4, #0]
    10be:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10c2:	f06f 000a 	mvn.w	r0, #10
    10c6:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10c8:	7019      	strb	r1, [r3, #0]
    10ca:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10d2:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10d4:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10d6:	bd10      	pop	{r4, pc}
    10d8:	2000000e 	.word	0x2000000e
    10dc:	2000000d 	.word	0x2000000d

000010e0 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10e0:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10e2:	2200      	movs	r2, #0
    10e4:	4610      	mov	r0, r2
    10e6:	2101      	movs	r1, #1
    10e8:	f000 fbe8 	bl	18bc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10ec:	2000      	movs	r0, #0
    10ee:	f000 fbb3 	bl	1858 <_arch_irq_enable>

	return 0;
}
    10f2:	2000      	movs	r0, #0
    10f4:	bd08      	pop	{r3, pc}
	...

000010f8 <_m16src_start>:
{
    10f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10fa:	f04f 0220 	mov.w	r2, #32
    10fe:	f3ef 8311 	mrs	r3, BASEPRI
    1102:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    1106:	4a25      	ldr	r2, [pc, #148]	; (119c <_m16src_start+0xa4>)
    1108:	7810      	ldrb	r0, [r2, #0]
    110a:	1c44      	adds	r4, r0, #1
    110c:	7014      	strb	r4, [r2, #0]
    110e:	b160      	cbz	r0, 112a <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1110:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1118:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    111c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1120:	bf14      	ite	ne
    1122:	2000      	movne	r0, #0
    1124:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    112a:	4d1d      	ldr	r5, [pc, #116]	; (11a0 <_m16src_start+0xa8>)
    112c:	782f      	ldrb	r7, [r5, #0]
    112e:	b12f      	cbz	r7, 113c <_m16src_start+0x44>
		m16src_ref--;
    1130:	7010      	strb	r0, [r2, #0]
    1132:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    1136:	f06f 000a 	mvn.w	r0, #10
    113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    113c:	2601      	movs	r6, #1
    113e:	702e      	strb	r6, [r5, #0]
    1140:	f383 8811 	msr	BASEPRI, r3
    1144:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1148:	b319      	cbz	r1, 1192 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    114a:	4638      	mov	r0, r7
    114c:	f000 fb94 	bl	1878 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1150:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1154:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1158:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    115c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    115e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1162:	b192      	cbz	r2, 118a <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1164:	2200      	movs	r2, #0
    1166:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116a:	4a0e      	ldr	r2, [pc, #56]	; (11a4 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    116c:	f013 0f01 	tst.w	r3, #1
    1170:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1174:	bf08      	it	eq
    1176:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    117a:	2000      	movs	r0, #0
    117c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1180:	f000 fb6a 	bl	1858 <_arch_irq_enable>
	m16src_grd = 0;
    1184:	2300      	movs	r3, #0
    1186:	702b      	strb	r3, [r5, #0]
    1188:	e7c4      	b.n	1114 <_m16src_start+0x1c>
			__WFE();
    118a:	bf20      	wfe
			__SEV();
    118c:	bf40      	sev
			__WFE();
    118e:	bf20      	wfe
    1190:	e7e5      	b.n	115e <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1192:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1196:	6026      	str	r6, [r4, #0]
    1198:	e7f4      	b.n	1184 <_m16src_start+0x8c>
    119a:	bf00      	nop
    119c:	2000000e 	.word	0x2000000e
    11a0:	2000000d 	.word	0x2000000d
    11a4:	e000e100 	.word	0xe000e100

000011a8 <_k32src_start>:
{
    11a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11aa:	4606      	mov	r6, r0
    11ac:	460c      	mov	r4, r1
	__asm__ volatile(
    11ae:	f04f 0220 	mov.w	r2, #32
    11b2:	f3ef 8311 	mrs	r3, BASEPRI
    11b6:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11ba:	4a2c      	ldr	r2, [pc, #176]	; (126c <_k32src_start+0xc4>)
    11bc:	7815      	ldrb	r5, [r2, #0]
    11be:	b165      	cbz	r5, 11da <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11c0:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11c8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11d0:	bf0c      	ite	eq
    11d2:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11d6:	2000      	movne	r0, #0
    11d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11da:	2701      	movs	r7, #1
    11dc:	7017      	strb	r7, [r2, #0]
    11de:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11e2:	4628      	mov	r0, r5
    11e4:	f000 fb48 	bl	1878 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11ec:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11ee:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11f2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11f6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11fa:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    11fe:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1200:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1204:	b371      	cbz	r1, 1264 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    1206:	0792      	lsls	r2, r2, #30
    1208:	4f19      	ldr	r7, [pc, #100]	; (1270 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    120a:	bf58      	it	pl
    120c:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    120e:	f04f 0100 	mov.w	r1, #0
    1212:	f04f 0501 	mov.w	r5, #1
    1216:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    121a:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    121e:	bf58      	it	pl
    1220:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1224:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1228:	f000 fb16 	bl	1858 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    122c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1230:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1232:	2218      	movs	r2, #24
    1234:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1238:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    123c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1240:	f014 0103 	ands.w	r1, r4, #3
    1244:	d1be      	bne.n	11c4 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1246:	2010      	movs	r0, #16
    1248:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    124c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1250:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1252:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1256:	f7ff ff4f 	bl	10f8 <_m16src_start>
		if (!err) {
    125a:	2800      	cmp	r0, #0
    125c:	d1b2      	bne.n	11c4 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    125e:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1262:	e7af      	b.n	11c4 <_k32src_start+0x1c>
		__WFE();
    1264:	bf20      	wfe
		__SEV();
    1266:	bf40      	sev
		__WFE();
    1268:	bf20      	wfe
    126a:	e7c9      	b.n	1200 <_k32src_start+0x58>
    126c:	2000000c 	.word	0x2000000c
    1270:	e000e100 	.word	0xe000e100

00001274 <_power_clock_isr>:
{
    1274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    127a:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    127c:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1280:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1284:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1288:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    128c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1290:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1294:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1298:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    129c:	f1be 0f00 	cmp.w	lr, #0
    12a0:	d003      	beq.n	12aa <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12a2:	f04f 0e00 	mov.w	lr, #0
    12a6:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12aa:	b127      	cbz	r7, 12b6 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12b0:	2700      	movs	r7, #0
    12b2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12b6:	b13a      	cbz	r2, 12c8 <_power_clock_isr+0x54>
    12b8:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12ba:	bf41      	itttt	mi
    12bc:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12c0:	2201      	movmi	r2, #1
    12c2:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12c6:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12c8:	b120      	cbz	r0, 12d4 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12ce:	2200      	movs	r2, #0
    12d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12d4:	b149      	cbz	r1, 12ea <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12da:	2100      	movs	r1, #0
    12dc:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12e0:	4628      	mov	r0, r5
    12e2:	f7ff fecf 	bl	1084 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12e6:	2301      	movs	r3, #1
    12e8:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12ea:	b176      	cbz	r6, 130a <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f0:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f2:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12f8:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fa:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    12fe:	f7ff fefb 	bl	10f8 <_m16src_start>
		if (!err) {
    1302:	b910      	cbnz	r0, 130a <_power_clock_isr+0x96>
    1304:	4b01      	ldr	r3, [pc, #4]	; (130c <_power_clock_isr+0x98>)
    1306:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130c:	e000e100 	.word	0xe000e100

00001310 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1310:	4b08      	ldr	r3, [pc, #32]	; (1334 <rtc_compare_set+0x24>)
    1312:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1316:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    131a:	1ac0      	subs	r0, r0, r3
    131c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1320:	4b05      	ldr	r3, [pc, #20]	; (1338 <rtc_compare_set+0x28>)
    1322:	3802      	subs	r0, #2
    1324:	4298      	cmp	r0, r3
    1326:	bf82      	ittt	hi
    1328:	4b04      	ldrhi	r3, [pc, #16]	; (133c <rtc_compare_set+0x2c>)
    132a:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    132e:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1332:	4770      	bx	lr
    1334:	40011000 	.word	0x40011000
    1338:	007ffffd 	.word	0x007ffffd
    133c:	e000e100 	.word	0xe000e100

00001340 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1340:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1342:	4b11      	ldr	r3, [pc, #68]	; (1388 <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1344:	4c11      	ldr	r4, [pc, #68]	; (138c <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    1346:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134a:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    134c:	4d10      	ldr	r5, [pc, #64]	; (1390 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134e:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1350:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1352:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1356:	4298      	cmp	r0, r3
    1358:	d30f      	bcc.n	137a <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    135a:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    135e:	490d      	ldr	r1, [pc, #52]	; (1394 <rtc_announce_set_next+0x54>)
    1360:	6809      	ldr	r1, [r1, #0]
    1362:	4288      	cmp	r0, r1
    1364:	bf28      	it	cs
    1366:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1368:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    136c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1370:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1372:	4b09      	ldr	r3, [pc, #36]	; (1398 <rtc_announce_set_next+0x58>)
    1374:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1376:	f012 fa49 	bl	1380c <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    137a:	6820      	ldr	r0, [r4, #0]
    137c:	682b      	ldr	r3, [r5, #0]
    137e:	4418      	add	r0, r3
}
    1380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1384:	f7ff bfc4 	b.w	1310 <rtc_compare_set>
    1388:	40011000 	.word	0x40011000
    138c:	20000014 	.word	0x20000014
    1390:	20003e70 	.word	0x20003e70
    1394:	20000010 	.word	0x20000010
    1398:	20003e6c 	.word	0x20003e6c

0000139c <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <rtc1_nrf5_isr+0xc>)
    139e:	2200      	movs	r2, #0
    13a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13a4:	f7ff bfcc 	b.w	1340 <rtc_announce_set_next>
    13a8:	40011000 	.word	0x40011000

000013ac <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13ac:	1e03      	subs	r3, r0, #0
    13ae:	4a0a      	ldr	r2, [pc, #40]	; (13d8 <_timer_idle_enter+0x2c>)
    13b0:	480a      	ldr	r0, [pc, #40]	; (13dc <_timer_idle_enter+0x30>)
    13b2:	db04      	blt.n	13be <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13b4:	6811      	ldr	r1, [r2, #0]
    13b6:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13ba:	428b      	cmp	r3, r1
    13bc:	dd02      	ble.n	13c4 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13be:	6813      	ldr	r3, [r2, #0]
    13c0:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13c4:	6810      	ldr	r0, [r2, #0]
    13c6:	4a06      	ldr	r2, [pc, #24]	; (13e0 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13c8:	4906      	ldr	r1, [pc, #24]	; (13e4 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ca:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13cc:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ce:	fb00 2003 	mla	r0, r0, r3, r2
    13d2:	f7ff bf9d 	b.w	1310 <rtc_compare_set>
    13d6:	bf00      	nop
    13d8:	20003e70 	.word	0x20003e70
    13dc:	007fffff 	.word	0x007fffff
    13e0:	20000014 	.word	0x20000014
    13e4:	20000010 	.word	0x20000010

000013e8 <_timer_idle_exit>:
{
    13e8:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13ea:	4b07      	ldr	r3, [pc, #28]	; (1408 <_timer_idle_exit+0x20>)
    13ec:	2200      	movs	r2, #0
    13ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f2:	4b06      	ldr	r3, [pc, #24]	; (140c <_timer_idle_exit+0x24>)
    13f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    13fc:	f7ff ffa0 	bl	1340 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1400:	4b03      	ldr	r3, [pc, #12]	; (1410 <_timer_idle_exit+0x28>)
    1402:	2201      	movs	r2, #1
    1404:	601a      	str	r2, [r3, #0]
    1406:	bd08      	pop	{r3, pc}
    1408:	40011000 	.word	0x40011000
    140c:	e000e100 	.word	0xe000e100
    1410:	20000010 	.word	0x20000010

00001414 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1414:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1416:	4818      	ldr	r0, [pc, #96]	; (1478 <_sys_clock_driver_init+0x64>)
    1418:	f011 fca8 	bl	12d6c <device_get_binding>
	if (!clock) {
    141c:	b348      	cbz	r0, 1472 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    141e:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1420:	4d16      	ldr	r5, [pc, #88]	; (147c <_sys_clock_driver_init+0x68>)
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	2101      	movs	r1, #1
    1426:	4798      	blx	r3
	rtc_past = 0;
    1428:	4b15      	ldr	r3, [pc, #84]	; (1480 <_sys_clock_driver_init+0x6c>)
    142a:	2400      	movs	r4, #0
    142c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    142e:	4b15      	ldr	r3, [pc, #84]	; (1484 <_sys_clock_driver_init+0x70>)
    1430:	2601      	movs	r6, #1
    1432:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1434:	4b14      	ldr	r3, [pc, #80]	; (1488 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    1436:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1444:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1448:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    144c:	4b0f      	ldr	r3, [pc, #60]	; (148c <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    144e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1456:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    145a:	4631      	mov	r1, r6
    145c:	4622      	mov	r2, r4
    145e:	2011      	movs	r0, #17
    1460:	f000 fa2c 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1464:	2011      	movs	r0, #17
    1466:	f000 f9f7 	bl	1858 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    146a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    146c:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    146e:	602e      	str	r6, [r5, #0]
	return 0;
    1470:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1476:	bd70      	pop	{r4, r5, r6, pc}
    1478:	0001437c 	.word	0x0001437c
    147c:	40011000 	.word	0x40011000
    1480:	20000014 	.word	0x20000014
    1484:	20000010 	.word	0x20000010
    1488:	20003e70 	.word	0x20003e70
    148c:	e000e100 	.word	0xe000e100

00001490 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1490:	4a0a      	ldr	r2, [pc, #40]	; (14bc <_timer_cycle_get_32+0x2c>)
{
    1492:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1494:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1498:	4d09      	ldr	r5, [pc, #36]	; (14c0 <_timer_cycle_get_32+0x30>)
    149a:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    149e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14a2:	42a3      	cmp	r3, r4
    14a4:	d107      	bne.n	14b6 <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14a6:	4a07      	ldr	r2, [pc, #28]	; (14c4 <_timer_cycle_get_32+0x34>)
    14a8:	6812      	ldr	r2, [r2, #0]
    14aa:	4350      	muls	r0, r2
    14ac:	1a1b      	subs	r3, r3, r0
    14ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14b2:	4418      	add	r0, r3
    14b4:	bd30      	pop	{r4, r5, pc}
    14b6:	4623      	mov	r3, r4
    14b8:	e7ef      	b.n	149a <_timer_cycle_get_32+0xa>
    14ba:	bf00      	nop
    14bc:	40011000 	.word	0x40011000
    14c0:	20001980 	.word	0x20001980
    14c4:	20003e70 	.word	0x20003e70

000014c8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14c8:	4807      	ldr	r0, [pc, #28]	; (14e8 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14ca:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14cc:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14ce:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14d0:	d008      	beq.n	14e4 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14d2:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14d4:	f012 f8d4 	bl	13680 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14d8:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14dc:	4903      	ldr	r1, [pc, #12]	; (14ec <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    14de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14e2:	600a      	str	r2, [r1, #0]

000014e4 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14e4:	4770      	bx	lr
    14e6:	0000      	.short	0x0000
    ldr r0, =_kernel
    14e8:	20001948 	.word	0x20001948
    ldr r1, =_SCS_ICSR
    14ec:	e000ed04 	.word	0xe000ed04

000014f0 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f0:	4804      	ldr	r0, [pc, #16]	; (1504 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    14f2:	2300      	movs	r3, #0
    14f4:	2120      	movs	r1, #32
    14f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    14f8:	3301      	adds	r3, #1
    14fa:	2b27      	cmp	r3, #39	; 0x27
    14fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1500:	d1f9      	bne.n	14f6 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1502:	4770      	bx	lr
    1504:	e000e100 	.word	0xe000e100

00001508 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1508:	4a08      	ldr	r2, [pc, #32]	; (152c <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    150a:	4909      	ldr	r1, [pc, #36]	; (1530 <__swap+0x28>)
	_current->arch.basepri = key;
    150c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    150e:	6809      	ldr	r1, [r1, #0]
    1510:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1512:	4908      	ldr	r1, [pc, #32]	; (1534 <__swap+0x2c>)
	_current->arch.basepri = key;
    1514:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1516:	684b      	ldr	r3, [r1, #4]
    1518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    151c:	604b      	str	r3, [r1, #4]
    151e:	2300      	movs	r3, #0
    1520:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1524:	6893      	ldr	r3, [r2, #8]
}
    1526:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1528:	4770      	bx	lr
    152a:	bf00      	nop
    152c:	20001948 	.word	0x20001948
    1530:	0001778c 	.word	0x0001778c
    1534:	e000ed00 	.word	0xe000ed00

00001538 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1538:	2020      	movs	r0, #32
    msr BASEPRI, r0
    153a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    153e:	490d      	ldr	r1, [pc, #52]	; (1574 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1540:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1542:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1544:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1546:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    154a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    154e:	4f0a      	ldr	r7, [pc, #40]	; (1578 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1550:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1554:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1556:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1558:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    155a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    155c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    155e:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1560:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1564:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1568:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    156c:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    1570:	4770      	bx	lr
    1572:	0000      	.short	0x0000
    ldr r1, =_kernel
    1574:	20001948 	.word	0x20001948
    ldr v4, =_SCS_ICSR
    1578:	e000ed04 	.word	0xe000ed04

0000157c <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    157c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1580:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1582:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1586:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    158a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    158c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1590:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    1594:	2902      	cmp	r1, #2
    beq _oops
    1596:	d0ff      	beq.n	1598 <_oops>

00001598 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    1598:	b500      	push	{lr}
    blx _do_kernel_oops
    159a:	f000 fa2b 	bl	19f4 <_do_kernel_oops>
    pop {pc}
    159e:	bd00      	pop	{pc}

000015a0 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15a0:	b510      	push	{r4, lr}
    15a2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15a4:	f012 f8ba 	bl	1371c <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15a8:	6822      	ldr	r2, [r4, #0]
    15aa:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15b0:	4801      	ldr	r0, [pc, #4]	; (15b8 <_FaultThreadShow.isra.2+0x18>)
    15b2:	f7ff bceb 	b.w	f8c <printk>
    15b6:	bf00      	nop
    15b8:	000144d5 	.word	0x000144d5

000015bc <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15bc:	b538      	push	{r3, r4, r5, lr}
    15be:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15c0:	481a      	ldr	r0, [pc, #104]	; (162c <_MpuFault+0x70>)
{
    15c2:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15c4:	f7ff fce2 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15c8:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15cc:	4c18      	ldr	r4, [pc, #96]	; (1630 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15ce:	f7ff ffe7 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15d4:	06d9      	lsls	r1, r3, #27
    15d6:	d502      	bpl.n	15de <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15d8:	4816      	ldr	r0, [pc, #88]	; (1634 <_MpuFault+0x78>)
    15da:	f7ff fcd7 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e0:	071a      	lsls	r2, r3, #28
    15e2:	d502      	bpl.n	15ea <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15e4:	4814      	ldr	r0, [pc, #80]	; (1638 <_MpuFault+0x7c>)
    15e6:	f7ff fcd1 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    15ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15ec:	079b      	lsls	r3, r3, #30
    15ee:	d50e      	bpl.n	160e <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    15f0:	4812      	ldr	r0, [pc, #72]	; (163c <_MpuFault+0x80>)
    15f2:	f7ff fccb 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    15f6:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    15f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fa:	0618      	lsls	r0, r3, #24
    15fc:	d507      	bpl.n	160e <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    15fe:	4810      	ldr	r0, [pc, #64]	; (1640 <_MpuFault+0x84>)
    1600:	f7ff fcc4 	bl	f8c <printk>
			if (fromHardFault) {
    1604:	b11d      	cbz	r5, 160e <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    160c:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    160e:	4c08      	ldr	r4, [pc, #32]	; (1630 <_MpuFault+0x74>)
    1610:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1612:	07d2      	lsls	r2, r2, #31
    1614:	d502      	bpl.n	161c <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    1616:	480b      	ldr	r0, [pc, #44]	; (1644 <_MpuFault+0x88>)
    1618:	f7ff fcb8 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    161c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    161e:	069b      	lsls	r3, r3, #26
    1620:	d502      	bpl.n	1628 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1622:	4809      	ldr	r0, [pc, #36]	; (1648 <_MpuFault+0x8c>)
    1624:	f7ff fcb2 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1628:	2000      	movs	r0, #0
    162a:	bd38      	pop	{r3, r4, r5, pc}
    162c:	0001451f 	.word	0x0001451f
    1630:	e000ed00 	.word	0xe000ed00
    1634:	00014536 	.word	0x00014536
    1638:	00014548 	.word	0x00014548
    163c:	0001455c 	.word	0x0001455c
    1640:	00014575 	.word	0x00014575
    1644:	00014586 	.word	0x00014586
    1648:	000145a6 	.word	0x000145a6

0000164c <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    164c:	b510      	push	{r4, lr}
    164e:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1650:	481a      	ldr	r0, [pc, #104]	; (16bc <_UsageFault+0x70>)
    1652:	f7ff fc9b 	bl	f8c <printk>

	_FaultThreadShow(esf);
    1656:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    165a:	4c19      	ldr	r4, [pc, #100]	; (16c0 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    165c:	f7ff ffa0 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1660:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1662:	019a      	lsls	r2, r3, #6
    1664:	d502      	bpl.n	166c <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    1666:	4817      	ldr	r0, [pc, #92]	; (16c4 <_UsageFault+0x78>)
    1668:	f7ff fc90 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    166e:	01db      	lsls	r3, r3, #7
    1670:	d502      	bpl.n	1678 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    1672:	4815      	ldr	r0, [pc, #84]	; (16c8 <_UsageFault+0x7c>)
    1674:	f7ff fc8a 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167a:	0318      	lsls	r0, r3, #12
    167c:	d502      	bpl.n	1684 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    167e:	4813      	ldr	r0, [pc, #76]	; (16cc <_UsageFault+0x80>)
    1680:	f7ff fc84 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1684:	4c0e      	ldr	r4, [pc, #56]	; (16c0 <_UsageFault+0x74>)
    1686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1688:	0359      	lsls	r1, r3, #13
    168a:	d502      	bpl.n	1692 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    168c:	4810      	ldr	r0, [pc, #64]	; (16d0 <_UsageFault+0x84>)
    168e:	f7ff fc7d 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1694:	039a      	lsls	r2, r3, #14
    1696:	d502      	bpl.n	169e <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    1698:	480e      	ldr	r0, [pc, #56]	; (16d4 <_UsageFault+0x88>)
    169a:	f7ff fc77 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    169e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a0:	03db      	lsls	r3, r3, #15
    16a2:	d502      	bpl.n	16aa <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16a4:	480c      	ldr	r0, [pc, #48]	; (16d8 <_UsageFault+0x8c>)
    16a6:	f7ff fc71 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16aa:	4a05      	ldr	r2, [pc, #20]	; (16c0 <_UsageFault+0x74>)
    16ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16ae:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16b2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16b6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16b8:	2000      	movs	r0, #0
    16ba:	bd10      	pop	{r4, pc}
    16bc:	000145d6 	.word	0x000145d6
    16c0:	e000ed00 	.word	0xe000ed00
    16c4:	000145ef 	.word	0x000145ef
    16c8:	00014603 	.word	0x00014603
    16cc:	0001461e 	.word	0x0001461e
    16d0:	0001463d 	.word	0x0001463d
    16d4:	00014663 	.word	0x00014663
    16d8:	0001467e 	.word	0x0001467e

000016dc <_BusFault>:
{
    16dc:	b538      	push	{r3, r4, r5, lr}
    16de:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16e0:	481d      	ldr	r0, [pc, #116]	; (1758 <_BusFault+0x7c>)
{
    16e2:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16e4:	f7ff fc52 	bl	f8c <printk>
	_FaultThreadShow(esf);
    16e8:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16ec:	4c1b      	ldr	r4, [pc, #108]	; (175c <_BusFault+0x80>)
	_FaultThreadShow(esf);
    16ee:	f7ff ff57 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16f4:	04d8      	lsls	r0, r3, #19
    16f6:	d504      	bpl.n	1702 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    16f8:	4819      	ldr	r0, [pc, #100]	; (1760 <_BusFault+0x84>)
}
    16fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    16fe:	f7ff bc45 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1702:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1704:	0519      	lsls	r1, r3, #20
    1706:	d501      	bpl.n	170c <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1708:	4816      	ldr	r0, [pc, #88]	; (1764 <_BusFault+0x88>)
    170a:	e7f6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    170c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    170e:	059a      	lsls	r2, r3, #22
    1710:	d514      	bpl.n	173c <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    1712:	4815      	ldr	r0, [pc, #84]	; (1768 <_BusFault+0x8c>)
    1714:	f7ff fc3a 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1718:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    171a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171c:	041b      	lsls	r3, r3, #16
    171e:	d507      	bpl.n	1730 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1720:	4812      	ldr	r0, [pc, #72]	; (176c <_BusFault+0x90>)
    1722:	f7ff fc33 	bl	f8c <printk>
			if (fromHardFault) {
    1726:	b11d      	cbz	r5, 1730 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    172a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    172e:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1730:	4b0a      	ldr	r3, [pc, #40]	; (175c <_BusFault+0x80>)
    1732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1734:	0558      	lsls	r0, r3, #21
    1736:	d50e      	bpl.n	1756 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1738:	480d      	ldr	r0, [pc, #52]	; (1770 <_BusFault+0x94>)
    173a:	e7de      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    173c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    173e:	0559      	lsls	r1, r3, #21
    1740:	d4fa      	bmi.n	1738 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1744:	05da      	lsls	r2, r3, #23
    1746:	d501      	bpl.n	174c <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1748:	480a      	ldr	r0, [pc, #40]	; (1774 <_BusFault+0x98>)
    174a:	e7d6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    174c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    174e:	049b      	lsls	r3, r3, #18
    1750:	d501      	bpl.n	1756 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1752:	4809      	ldr	r0, [pc, #36]	; (1778 <_BusFault+0x9c>)
    1754:	e7d1      	b.n	16fa <_BusFault+0x1e>
    1756:	bd38      	pop	{r3, r4, r5, pc}
    1758:	0001439c 	.word	0x0001439c
    175c:	e000ed00 	.word	0xe000ed00
    1760:	00014536 	.word	0x00014536
    1764:	00014548 	.word	0x00014548
    1768:	000143b3 	.word	0x000143b3
    176c:	00014575 	.word	0x00014575
    1770:	000143cd 	.word	0x000143cd
    1774:	000143e9 	.word	0x000143e9
    1778:	000145a6 	.word	0x000145a6

0000177c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    177c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    177e:	4c27      	ldr	r4, [pc, #156]	; (181c <_Fault+0xa0>)
    1780:	6863      	ldr	r3, [r4, #4]
    1782:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1786:	1eda      	subs	r2, r3, #3
{
    1788:	4605      	mov	r5, r0
	switch (fault) {
    178a:	2a09      	cmp	r2, #9
    178c:	d83b      	bhi.n	1806 <_Fault+0x8a>
    178e:	e8df f002 	tbb	[pc, r2]
    1792:	3405      	.short	0x3405
    1794:	3a3a3036 	.word	0x3a3a3036
    1798:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    179c:	4820      	ldr	r0, [pc, #128]	; (1820 <_Fault+0xa4>)
    179e:	f7ff fbf5 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17a4:	079a      	lsls	r2, r3, #30
    17a6:	d503      	bpl.n	17b0 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17a8:	481e      	ldr	r0, [pc, #120]	; (1824 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17aa:	f7ff fbef 	bl	f8c <printk>
    17ae:	e002      	b.n	17b6 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17b2:	005b      	lsls	r3, r3, #1
    17b4:	d401      	bmi.n	17ba <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17b6:	2000      	movs	r0, #0
    17b8:	e009      	b.n	17ce <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17ba:	481b      	ldr	r0, [pc, #108]	; (1828 <_Fault+0xac>)
    17bc:	f7ff fbe6 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17c0:	4b1a      	ldr	r3, [pc, #104]	; (182c <_Fault+0xb0>)
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	b143      	cbz	r3, 17d8 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17c6:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17c8:	4628      	mov	r0, r5
    17ca:	f7ff fef7 	bl	15bc <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17ce:	4629      	mov	r1, r5
}
    17d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17d4:	f000 b912 	b.w	19fc <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17d8:	4b15      	ldr	r3, [pc, #84]	; (1830 <_Fault+0xb4>)
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	b123      	cbz	r3, 17e8 <_Fault+0x6c>
			_BusFault(esf, 1);
    17de:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17e0:	4628      	mov	r0, r5
    17e2:	f7ff ff7b 	bl	16dc <_BusFault>
    17e6:	e7e6      	b.n	17b6 <_Fault+0x3a>
		} else if (SCB_UFSR) {
    17e8:	4b12      	ldr	r3, [pc, #72]	; (1834 <_Fault+0xb8>)
    17ea:	881b      	ldrh	r3, [r3, #0]
    17ec:	b29b      	uxth	r3, r3
    17ee:	2b00      	cmp	r3, #0
    17f0:	d0e1      	beq.n	17b6 <_Fault+0x3a>
		reason = _UsageFault(esf);
    17f2:	4628      	mov	r0, r5
    17f4:	f7ff ff2a 	bl	164c <_UsageFault>
    17f8:	e7e9      	b.n	17ce <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    17fa:	2100      	movs	r1, #0
    17fc:	e7e4      	b.n	17c8 <_Fault+0x4c>
		_BusFault(esf, 0);
    17fe:	2100      	movs	r1, #0
    1800:	e7ee      	b.n	17e0 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1802:	480d      	ldr	r0, [pc, #52]	; (1838 <_Fault+0xbc>)
    1804:	e7d1      	b.n	17aa <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    1806:	480d      	ldr	r0, [pc, #52]	; (183c <_Fault+0xc0>)
    1808:	490d      	ldr	r1, [pc, #52]	; (1840 <_Fault+0xc4>)
    180a:	f1a3 0210 	sub.w	r2, r3, #16
    180e:	2b0f      	cmp	r3, #15
    1810:	bfd8      	it	le
    1812:	4601      	movle	r1, r0
    1814:	480b      	ldr	r0, [pc, #44]	; (1844 <_Fault+0xc8>)
    1816:	f7ff fbb9 	bl	f8c <printk>
    181a:	e7cc      	b.n	17b6 <_Fault+0x3a>
    181c:	e000ed00 	.word	0xe000ed00
    1820:	00014430 	.word	0x00014430
    1824:	00014448 	.word	0x00014448
    1828:	0001446a 	.word	0x0001446a
    182c:	e000ed28 	.word	0xe000ed28
    1830:	e000ed29 	.word	0xe000ed29
    1834:	e000ed2a 	.word	0xe000ed2a
    1838:	0001448a 	.word	0x0001448a
    183c:	00014402 	.word	0x00014402
    1840:	00014417 	.word	0x00014417
    1844:	000144c1 	.word	0x000144c1

00001848 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1848:	4a02      	ldr	r2, [pc, #8]	; (1854 <_FaultInit+0xc>)
    184a:	6953      	ldr	r3, [r2, #20]
    184c:	f043 0310 	orr.w	r3, r3, #16
    1850:	6153      	str	r3, [r2, #20]
    1852:	4770      	bx	lr
    1854:	e000ed00 	.word	0xe000ed00

00001858 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1858:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    185a:	2b00      	cmp	r3, #0
    185c:	db08      	blt.n	1870 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    185e:	2201      	movs	r2, #1
    1860:	f000 001f 	and.w	r0, r0, #31
    1864:	fa02 f000 	lsl.w	r0, r2, r0
    1868:	095b      	lsrs	r3, r3, #5
    186a:	4a02      	ldr	r2, [pc, #8]	; (1874 <_arch_irq_enable+0x1c>)
    186c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1870:	4770      	bx	lr
    1872:	bf00      	nop
    1874:	e000e100 	.word	0xe000e100

00001878 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1878:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    187a:	2b00      	cmp	r3, #0
    187c:	db0d      	blt.n	189a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    187e:	2201      	movs	r2, #1
    1880:	095b      	lsrs	r3, r3, #5
    1882:	f000 001f 	and.w	r0, r0, #31
    1886:	fa02 f000 	lsl.w	r0, r2, r0
    188a:	3320      	adds	r3, #32
    188c:	4a03      	ldr	r2, [pc, #12]	; (189c <_arch_irq_disable+0x24>)
    188e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1892:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1896:	f3bf 8f6f 	isb	sy
    189a:	4770      	bx	lr
    189c:	e000e100 	.word	0xe000e100

000018a0 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18a0:	0942      	lsrs	r2, r0, #5
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <_arch_irq_is_enabled+0x18>)
    18a4:	f000 001f 	and.w	r0, r0, #31
    18a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18ac:	2301      	movs	r3, #1
    18ae:	fa03 f000 	lsl.w	r0, r3, r0
}
    18b2:	4010      	ands	r0, r2
    18b4:	4770      	bx	lr
    18b6:	bf00      	nop
    18b8:	e000e100 	.word	0xe000e100

000018bc <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18bc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18be:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18c0:	bfa8      	it	ge
    18c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18c6:	f101 0101 	add.w	r1, r1, #1
    18ca:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18ce:	bfad      	iteet	ge
    18d0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d4:	f000 000f 	andlt.w	r0, r0, #15
    18d8:	4b03      	ldrlt	r3, [pc, #12]	; (18e8 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18da:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18dc:	bfb6      	itet	lt
    18de:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e4:	5419      	strblt	r1, [r3, r0]
    18e6:	4770      	bx	lr
    18e8:	e000ed14 	.word	0xe000ed14

000018ec <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    18ec:	f000 b842 	b.w	1974 <__bus_fault>

000018f0 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    18f0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    18f2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    18f4:	4b04      	ldr	r3, [pc, #16]	; (1908 <_arch_isr_direct_pm+0x18>)
    18f6:	69d8      	ldr	r0, [r3, #28]
    18f8:	b118      	cbz	r0, 1902 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    18fa:	2200      	movs	r2, #0
    18fc:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    18fe:	f011 fa5b 	bl	12db8 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1902:	b662      	cpsie	i
    1904:	bd08      	pop	{r3, pc}
    1906:	bf00      	nop
    1908:	20001948 	.word	0x20001948

0000190c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    190e:	460c      	mov	r4, r1
    1910:	4616      	mov	r6, r2
    1912:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1914:	2204      	movs	r2, #4
    1916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1918:	9909      	ldr	r1, [sp, #36]	; 0x24
    191a:	4605      	mov	r5, r0
    191c:	f012 f992 	bl	13c44 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1920:	f1a6 0120 	sub.w	r1, r6, #32
    1924:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1926:	4a0c      	ldr	r2, [pc, #48]	; (1958 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1928:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    192a:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    192e:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1930:	f022 0201 	bic.w	r2, r2, #1
    1934:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1936:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    1938:	662e      	str	r6, [r5, #96]	; 0x60
    193a:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    193c:	9a06      	ldr	r2, [sp, #24]
    193e:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1940:	9a07      	ldr	r2, [sp, #28]
    1942:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1944:	9a08      	ldr	r2, [sp, #32]
    1946:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1948:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    194a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    194e:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1950:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1952:	66ab      	str	r3, [r5, #104]	; 0x68
    1954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1956:	bf00      	nop
    1958:	00000899 	.word	0x00000899

0000195c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    195c:	4901      	ldr	r1, [pc, #4]	; (1964 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    195e:	2210      	movs	r2, #16
	str r2, [r1]
    1960:	600a      	str	r2, [r1, #0]
	bx lr
    1962:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1964:	e000ed10 	.word	0xe000ed10

00001968 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1968:	4040      	eors	r0, r0
	msr BASEPRI, r0
    196a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    196e:	bf30      	wfi

	bx lr
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1974:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1976:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    197a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1998 <__bus_fault+0x24>
	ldr ip, [ip]
    197e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1982:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1986:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1988:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    198c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1990:	b500      	push	{lr}
	bl _Fault
    1992:	f7ff fef3 	bl	177c <_Fault>

	pop {pc}
    1996:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1998:	e000ed04 	.word	0xe000ed04

0000199c <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    199c:	2804      	cmp	r0, #4
{
    199e:	b538      	push	{r3, r4, r5, lr}
    19a0:	4604      	mov	r4, r0
    19a2:	460d      	mov	r5, r1
	switch (reason) {
    19a4:	d013      	beq.n	19ce <_NanoFatalErrorHandler+0x32>
    19a6:	2805      	cmp	r0, #5
    19a8:	d013      	beq.n	19d2 <_NanoFatalErrorHandler+0x36>
    19aa:	2803      	cmp	r0, #3
    19ac:	d113      	bne.n	19d6 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19ae:	480c      	ldr	r0, [pc, #48]	; (19e0 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    19b0:	f7ff faec 	bl	f8c <printk>
    19b4:	f011 feb2 	bl	1371c <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19b8:	69aa      	ldr	r2, [r5, #24]
    19ba:	4601      	mov	r1, r0
    19bc:	4809      	ldr	r0, [pc, #36]	; (19e4 <_NanoFatalErrorHandler+0x48>)
    19be:	f7ff fae5 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19c2:	4629      	mov	r1, r5
    19c4:	4620      	mov	r0, r4
}
    19c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19ca:	f000 b817 	b.w	19fc <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    19ce:	4806      	ldr	r0, [pc, #24]	; (19e8 <_NanoFatalErrorHandler+0x4c>)
    19d0:	e7ee      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    19d2:	4806      	ldr	r0, [pc, #24]	; (19ec <_NanoFatalErrorHandler+0x50>)
    19d4:	e7ec      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19d6:	4601      	mov	r1, r0
    19d8:	4805      	ldr	r0, [pc, #20]	; (19f0 <_NanoFatalErrorHandler+0x54>)
    19da:	f7ff fad7 	bl	f8c <printk>
		break;
    19de:	e7e9      	b.n	19b4 <_NanoFatalErrorHandler+0x18>
    19e0:	000146aa 	.word	0x000146aa
    19e4:	00014728 	.word	0x00014728
    19e8:	000146d0 	.word	0x000146d0
    19ec:	000146ea 	.word	0x000146ea
    19f0:	00014705 	.word	0x00014705

000019f4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    19f4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    19f6:	6800      	ldr	r0, [r0, #0]
    19f8:	f7ff bfd0 	b.w	199c <_NanoFatalErrorHandler>

000019fc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    19fc:	2805      	cmp	r0, #5
{
    19fe:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a00:	d00c      	beq.n	1a1c <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a02:	f012 f84d 	bl	13aa0 <k_is_in_isr>
    1a06:	b160      	cbz	r0, 1a22 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a08:	f012 f84a 	bl	13aa0 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a0c:	4b0c      	ldr	r3, [pc, #48]	; (1a40 <_SysFatalErrorHandler+0x44>)
    1a0e:	490d      	ldr	r1, [pc, #52]	; (1a44 <_SysFatalErrorHandler+0x48>)
    1a10:	2800      	cmp	r0, #0
    1a12:	bf08      	it	eq
    1a14:	4619      	moveq	r1, r3
    1a16:	480c      	ldr	r0, [pc, #48]	; (1a48 <_SysFatalErrorHandler+0x4c>)
    1a18:	f7ff fab8 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a1c:	f7ff ffa4 	bl	1968 <k_cpu_idle>
    1a20:	e7fc      	b.n	1a1c <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a22:	f012 f84d 	bl	13ac0 <_is_thread_essential>
    1a26:	2800      	cmp	r0, #0
    1a28:	d1ee      	bne.n	1a08 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a2a:	4c08      	ldr	r4, [pc, #32]	; (1a4c <_SysFatalErrorHandler+0x50>)
    1a2c:	4808      	ldr	r0, [pc, #32]	; (1a50 <_SysFatalErrorHandler+0x54>)
    1a2e:	68a1      	ldr	r1, [r4, #8]
    1a30:	f7ff faac 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a34:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a3a:	f000 b80b 	b.w	1a54 <_impl_k_thread_abort>
    1a3e:	bf00      	nop
    1a40:	00014768 	.word	0x00014768
    1a44:	00014764 	.word	0x00014764
    1a48:	00014779 	.word	0x00014779
    1a4c:	20001948 	.word	0x20001948
    1a50:	00014799 	.word	0x00014799

00001a54 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a54:	b538      	push	{r3, r4, r5, lr}
    1a56:	4605      	mov	r5, r0
	__asm__ volatile(
    1a58:	f04f 0320 	mov.w	r3, #32
    1a5c:	f3ef 8411 	mrs	r4, BASEPRI
    1a60:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a64:	f012 f884 	bl	13b70 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a68:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <_impl_k_thread_abort+0x44>)
    1a6a:	689b      	ldr	r3, [r3, #8]
    1a6c:	429d      	cmp	r5, r3
    1a6e:	d10d      	bne.n	1a8c <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a70:	4b0a      	ldr	r3, [pc, #40]	; (1a9c <_impl_k_thread_abort+0x48>)
    1a72:	685a      	ldr	r2, [r3, #4]
    1a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a78:	b922      	cbnz	r2, 1a84 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1a7a:	f011 fe01 	bl	13680 <_update_time_slice_before_swap>

	return __swap(key);
    1a7e:	4620      	mov	r0, r4
    1a80:	f7ff fd42 	bl	1508 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a84:	685a      	ldr	r2, [r3, #4]
    1a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a8a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1a8c:	4620      	mov	r0, r4
}
    1a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1a92:	f011 bcaf 	b.w	133f4 <_reschedule>
    1a96:	bf00      	nop
    1a98:	20001948 	.word	0x20001948
    1a9c:	e000ed00 	.word	0xe000ed00

00001aa0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1aa0:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1aa2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1aa4:	4a0b      	ldr	r2, [pc, #44]	; (1ad4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1aa6:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1aa8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1aaa:	bf1e      	ittt	ne
	movne	r1, #0
    1aac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1aae:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ab0:	f011 f982 	blne	12db8 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ab4:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ab6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1aba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1abe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ac2:	4905      	ldr	r1, [pc, #20]	; (1ad8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ac4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1ac6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1ac8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1aca:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1ace:	f7ff bcfb 	b.w	14c8 <_ExcExit>
    1ad2:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ad4:	20001948 	.word	0x20001948
	ldr r1, =_sw_isr_table
    1ad8:	000000dc 	.word	0x000000dc

00001adc <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1adc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ade:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1ae2:	4806      	ldr	r0, [pc, #24]	; (1afc <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1ae8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1aea:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1aee:	2002      	movs	r0, #2
    msr CONTROL, r0
    1af0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1af4:	f3bf 8f6f 	isb	sy

    b _PrepC
    1af8:	f000 b806 	b.w	1b08 <_PrepC>
    ldr r0, =_interrupt_stack
    1afc:	20002e20 	.word	0x20002e20

00001b00 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b00:	bf30      	wfi
    b _SysNmiOnReset
    1b02:	f7ff bffd 	b.w	1b00 <_SysNmiOnReset>
    1b06:	bf00      	nop

00001b08 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b08:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b0a:	4b07      	ldr	r3, [pc, #28]	; (1b28 <_PrepC+0x20>)
    1b0c:	4a07      	ldr	r2, [pc, #28]	; (1b2c <_PrepC+0x24>)
    1b0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b12:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b18:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b1c:	f011 f97c 	bl	12e18 <_bss_zero>
	_data_copy();
    1b20:	f011 f984 	bl	12e2c <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b24:	f011 f9a6 	bl	12e74 <_Cstart>
    1b28:	00000000 	.word	0x00000000
    1b2c:	e000ed00 	.word	0xe000ed00

00001b30 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b30:	b508      	push	{r3, lr}
	handler();
    1b32:	f7ff ffe5 	bl	1b00 <_SysNmiOnReset>
	_ExcExit();
}
    1b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b3a:	f7ff bcc5 	b.w	14c8 <_ExcExit>
	...

00001b40 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1b40:	4912      	ldr	r1, [pc, #72]	; (1b8c <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b42:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b44:	680d      	ldr	r5, [r1, #0]
    1b46:	2d08      	cmp	r5, #8
    1b48:	d80d      	bhi.n	1b66 <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1b4a:	4a11      	ldr	r2, [pc, #68]	; (1b90 <arm_mpu_init+0x50>)
    1b4c:	6848      	ldr	r0, [r1, #4]
    1b4e:	2300      	movs	r3, #0
    1b50:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b52:	429d      	cmp	r5, r3
    1b54:	f100 000c 	add.w	r0, r0, #12
    1b58:	d107      	bne.n	1b6a <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1b5a:	2305      	movs	r3, #5
    1b5c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b62:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1b66:	2000      	movs	r0, #0
    1b68:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1b6a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1b6e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1b72:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b74:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1b78:	f041 0110 	orr.w	r1, r1, #16
    1b7c:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b7e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b82:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b84:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b86:	6114      	str	r4, [r2, #16]
    1b88:	e7e3      	b.n	1b52 <arm_mpu_init+0x12>
    1b8a:	bf00      	nop
    1b8c:	20003a34 	.word	0x20003a34
    1b90:	e000ed90 	.word	0xe000ed90

00001b94 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1b94:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1b96:	4603      	mov	r3, r0
    1b98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1b9c:	b90a      	cbnz	r2, 1ba2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1b9e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1ba0:	4770      	bx	lr
		*d = *s;
    1ba2:	f803 2b01 	strb.w	r2, [r3], #1
    1ba6:	e7f7      	b.n	1b98 <strcpy+0x4>

00001ba8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1ba8:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1baa:	4603      	mov	r3, r0
    1bac:	1a98      	subs	r0, r3, r2
    1bae:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bb2:	2900      	cmp	r1, #0
    1bb4:	d1fa      	bne.n	1bac <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1bb6:	4770      	bx	lr

00001bb8 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1bb8:	3801      	subs	r0, #1
    1bba:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1bbc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1bc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bc4:	4293      	cmp	r3, r2
    1bc6:	d102      	bne.n	1bce <strcmp+0x16>
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d1f7      	bne.n	1bbc <strcmp+0x4>
    1bcc:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1bce:	1a98      	subs	r0, r3, r2
    1bd0:	4770      	bx	lr

00001bd2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1bd2:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1bd4:	b182      	cbz	r2, 1bf8 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1bd6:	3a01      	subs	r2, #1
    1bd8:	460c      	mov	r4, r1
    1bda:	4603      	mov	r3, r0
    1bdc:	d103      	bne.n	1be6 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1bde:	781a      	ldrb	r2, [r3, #0]
    1be0:	7820      	ldrb	r0, [r4, #0]
    1be2:	1a10      	subs	r0, r2, r0
    1be4:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1be6:	781e      	ldrb	r6, [r3, #0]
    1be8:	7825      	ldrb	r5, [r4, #0]
    1bea:	42ae      	cmp	r6, r5
    1bec:	f100 0001 	add.w	r0, r0, #1
    1bf0:	f101 0101 	add.w	r1, r1, #1
    1bf4:	d0ef      	beq.n	1bd6 <memcmp+0x4>
    1bf6:	e7f2      	b.n	1bde <memcmp+0xc>
		return 0;
    1bf8:	4610      	mov	r0, r2
}
    1bfa:	bd70      	pop	{r4, r5, r6, pc}

00001bfc <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1bfc:	ea81 0300 	eor.w	r3, r1, r0
    1c00:	f013 0f03 	tst.w	r3, #3
{
    1c04:	b570      	push	{r4, r5, r6, lr}
    1c06:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c08:	d00b      	beq.n	1c22 <memcpy+0x26>
    1c0a:	3b01      	subs	r3, #1
    1c0c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c0e:	4291      	cmp	r1, r2
    1c10:	d11b      	bne.n	1c4a <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c12:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c14:	2a00      	cmp	r2, #0
    1c16:	d0fc      	beq.n	1c12 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c18:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c1c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c20:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c22:	079c      	lsls	r4, r3, #30
    1c24:	d1f6      	bne.n	1c14 <memcpy+0x18>
    1c26:	1f1e      	subs	r6, r3, #4
    1c28:	460d      	mov	r5, r1
    1c2a:	1b54      	subs	r4, r2, r5
    1c2c:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c2e:	2c03      	cmp	r4, #3
    1c30:	d806      	bhi.n	1c40 <memcpy+0x44>
    1c32:	f022 0403 	bic.w	r4, r2, #3
    1c36:	4421      	add	r1, r4
    1c38:	4423      	add	r3, r4
    1c3a:	f002 0203 	and.w	r2, r2, #3
    1c3e:	e7e4      	b.n	1c0a <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c40:	f855 4b04 	ldr.w	r4, [r5], #4
    1c44:	f846 4f04 	str.w	r4, [r6, #4]!
    1c48:	e7ef      	b.n	1c2a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c52:	e7dc      	b.n	1c0e <memcpy+0x12>

00001c54 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1c54:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1c56:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1c58:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1c5a:	079c      	lsls	r4, r3, #30
    1c5c:	d111      	bne.n	1c82 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1c5e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1c62:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1c66:	461e      	mov	r6, r3
    1c68:	1b95      	subs	r5, r2, r6
    1c6a:	441d      	add	r5, r3
    1c6c:	2d03      	cmp	r5, #3
    1c6e:	d80e      	bhi.n	1c8e <memset+0x3a>
    1c70:	f022 0403 	bic.w	r4, r2, #3
    1c74:	4423      	add	r3, r4
    1c76:	f002 0203 	and.w	r2, r2, #3
    1c7a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1c7c:	4293      	cmp	r3, r2
    1c7e:	d109      	bne.n	1c94 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1c80:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1c82:	2a00      	cmp	r2, #0
    1c84:	d0fc      	beq.n	1c80 <memset+0x2c>
		*(d_byte++) = c_byte;
    1c86:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1c8a:	3a01      	subs	r2, #1
    1c8c:	e7e5      	b.n	1c5a <memset+0x6>
		*(d_word++) = c_word;
    1c8e:	f846 4b04 	str.w	r4, [r6], #4
    1c92:	e7e9      	b.n	1c68 <memset+0x14>
		*(d_byte++) = c_byte;
    1c94:	f803 1b01 	strb.w	r1, [r3], #1
    1c98:	e7f0      	b.n	1c7c <memset+0x28>
	...

00001c9c <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1c9c:	b570      	push	{r4, r5, r6, lr}
    1c9e:	f04f 0320 	mov.w	r3, #32
    1ca2:	f3ef 8511 	mrs	r5, BASEPRI
    1ca6:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1caa:	4c14      	ldr	r4, [pc, #80]	; (1cfc <bt_hex+0x60>)
    1cac:	4e14      	ldr	r6, [pc, #80]	; (1d00 <bt_hex+0x64>)
    1cae:	7823      	ldrb	r3, [r4, #0]
    1cb0:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1cb4:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1cb6:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1cba:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1cbc:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1cbe:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1cc2:	2940      	cmp	r1, #64	; 0x40
    1cc4:	bf28      	it	cs
    1cc6:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1cc8:	4d0e      	ldr	r5, [pc, #56]	; (1d04 <bt_hex+0x68>)
    1cca:	3801      	subs	r0, #1
    1ccc:	4613      	mov	r3, r2
    1cce:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1cd2:	42b3      	cmp	r3, r6
    1cd4:	d104      	bne.n	1ce0 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1cd6:	2300      	movs	r3, #0
    1cd8:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1cdc:	4610      	mov	r0, r2
    1cde:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1ce0:	7844      	ldrb	r4, [r0, #1]
    1ce2:	0924      	lsrs	r4, r4, #4
    1ce4:	3302      	adds	r3, #2
    1ce6:	5d2c      	ldrb	r4, [r5, r4]
    1ce8:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1cec:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1cf0:	f004 040f 	and.w	r4, r4, #15
    1cf4:	5d2c      	ldrb	r4, [r5, r4]
    1cf6:	f803 4c01 	strb.w	r4, [r3, #-1]
    1cfa:	e7ea      	b.n	1cd2 <bt_hex+0x36>
    1cfc:	20000074 	.word	0x20000074
    1d00:	20000075 	.word	0x20000075
    1d04:	000147dc 	.word	0x000147dc

00001d08 <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1d08:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d0a:	4a0f      	ldr	r2, [pc, #60]	; (1d48 <bt_addr_str+0x40>)
    1d0c:	4c0f      	ldr	r4, [pc, #60]	; (1d4c <bt_addr_str+0x44>)
    1d0e:	7813      	ldrb	r3, [r2, #0]
    1d10:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1d14:	3301      	adds	r3, #1
{
    1d16:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1d18:	f003 0301 	and.w	r3, r3, #1
    1d1c:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1d1e:	7802      	ldrb	r2, [r0, #0]
    1d20:	7943      	ldrb	r3, [r0, #5]
    1d22:	9204      	str	r2, [sp, #16]
    1d24:	7842      	ldrb	r2, [r0, #1]
    1d26:	9203      	str	r2, [sp, #12]
    1d28:	7882      	ldrb	r2, [r0, #2]
    1d2a:	9202      	str	r2, [sp, #8]
    1d2c:	78c2      	ldrb	r2, [r0, #3]
    1d2e:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1d30:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1d34:	7902      	ldrb	r2, [r0, #4]
    1d36:	9200      	str	r2, [sp, #0]
    1d38:	2112      	movs	r1, #18
    1d3a:	4a05      	ldr	r2, [pc, #20]	; (1d50 <bt_addr_str+0x48>)
    1d3c:	4620      	mov	r0, r4
    1d3e:	f7ff f933 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1d42:	4620      	mov	r0, r4
    1d44:	b006      	add	sp, #24
    1d46:	bd10      	pop	{r4, pc}
    1d48:	20000072 	.word	0x20000072
    1d4c:	20000018 	.word	0x20000018
    1d50:	000147be 	.word	0x000147be

00001d54 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1d54:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d56:	4a1d      	ldr	r2, [pc, #116]	; (1dcc <bt_addr_le_str+0x78>)
    1d58:	491d      	ldr	r1, [pc, #116]	; (1dd0 <bt_addr_le_str+0x7c>)
    1d5a:	7813      	ldrb	r3, [r2, #0]
    1d5c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1d60:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1d62:	f003 0301 	and.w	r3, r3, #1
    1d66:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1d68:	7803      	ldrb	r3, [r0, #0]
{
    1d6a:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1d6c:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1d70:	4604      	mov	r4, r0
	str = bufs[cur++];
    1d72:	440e      	add	r6, r1
    1d74:	ad07      	add	r5, sp, #28
    1d76:	2b03      	cmp	r3, #3
    1d78:	d821      	bhi.n	1dbe <bt_addr_le_str+0x6a>
    1d7a:	e8df f003 	tbb	[pc, r3]
    1d7e:	1a02      	.short	0x1a02
    1d80:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1d82:	4914      	ldr	r1, [pc, #80]	; (1dd4 <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1d84:	4628      	mov	r0, r5
    1d86:	f7ff ff05 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1d8a:	7862      	ldrb	r2, [r4, #1]
    1d8c:	9204      	str	r2, [sp, #16]
    1d8e:	78a2      	ldrb	r2, [r4, #2]
    1d90:	9203      	str	r2, [sp, #12]
    1d92:	78e2      	ldrb	r2, [r4, #3]
    1d94:	9202      	str	r2, [sp, #8]
    1d96:	7922      	ldrb	r2, [r4, #4]
    1d98:	9201      	str	r2, [sp, #4]
    1d9a:	7962      	ldrb	r2, [r4, #5]
    1d9c:	9200      	str	r2, [sp, #0]
    1d9e:	79a3      	ldrb	r3, [r4, #6]
    1da0:	9505      	str	r5, [sp, #20]
    1da2:	4a0d      	ldr	r2, [pc, #52]	; (1dd8 <bt_addr_le_str+0x84>)
    1da4:	211b      	movs	r1, #27
    1da6:	4630      	mov	r0, r6
    1da8:	f7ff f8fe 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1dac:	4630      	mov	r0, r6
    1dae:	b00a      	add	sp, #40	; 0x28
    1db0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1db2:	490a      	ldr	r1, [pc, #40]	; (1ddc <bt_addr_le_str+0x88>)
    1db4:	e7e6      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1db6:	490a      	ldr	r1, [pc, #40]	; (1de0 <bt_addr_le_str+0x8c>)
    1db8:	e7e4      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1dba:	490a      	ldr	r1, [pc, #40]	; (1de4 <bt_addr_le_str+0x90>)
    1dbc:	e7e2      	b.n	1d84 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1dbe:	4a0a      	ldr	r2, [pc, #40]	; (1de8 <bt_addr_le_str+0x94>)
    1dc0:	210a      	movs	r1, #10
    1dc2:	4628      	mov	r0, r5
    1dc4:	f7ff f8f0 	bl	fa8 <snprintk>
    1dc8:	e7df      	b.n	1d8a <bt_addr_le_str+0x36>
    1dca:	bf00      	nop
    1dcc:	20000073 	.word	0x20000073
    1dd0:	2000003c 	.word	0x2000003c
    1dd4:	00014215 	.word	0x00014215
    1dd8:	0001423e 	.word	0x0001423e
    1ddc:	0001421c 	.word	0x0001421c
    1de0:	00014223 	.word	0x00014223
    1de4:	0001422d 	.word	0x0001422d
    1de8:	00014237 	.word	0x00014237

00001dec <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1dec:	b530      	push	{r4, r5, lr}
    1dee:	b085      	sub	sp, #20
    1df0:	4604      	mov	r4, r0
    1df2:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1df4:	4668      	mov	r0, sp
    1df6:	2203      	movs	r2, #3
    1df8:	f7ff ff00 	bl	1bfc <memcpy>
	memset(res + 3, 0, 13);
    1dfc:	220d      	movs	r2, #13
    1dfe:	2100      	movs	r1, #0
    1e00:	f10d 0003 	add.w	r0, sp, #3
    1e04:	f7ff ff26 	bl	1c54 <memset>

	err = bt_encrypt_le(irk, res, res);
    1e08:	4620      	mov	r0, r4
    1e0a:	466a      	mov	r2, sp
    1e0c:	4669      	mov	r1, sp
    1e0e:	f005 fdbd 	bl	798c <bt_encrypt_le>
	if (err) {
    1e12:	4604      	mov	r4, r0
    1e14:	b920      	cbnz	r0, 1e20 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1e16:	2203      	movs	r2, #3
    1e18:	4669      	mov	r1, sp
    1e1a:	4628      	mov	r0, r5
    1e1c:	f7ff feee 	bl	1bfc <memcpy>

	return 0;
}
    1e20:	4620      	mov	r0, r4
    1e22:	b005      	add	sp, #20
    1e24:	bd30      	pop	{r4, r5, pc}

00001e26 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1e26:	b513      	push	{r0, r1, r4, lr}
    1e28:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1e2a:	aa01      	add	r2, sp, #4
    1e2c:	3103      	adds	r1, #3
    1e2e:	f7ff ffdd 	bl	1dec <ah>
	if (err) {
    1e32:	b948      	cbnz	r0, 1e48 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1e34:	2203      	movs	r2, #3
    1e36:	a901      	add	r1, sp, #4
    1e38:	4620      	mov	r0, r4
    1e3a:	f7ff feca 	bl	1bd2 <memcmp>
    1e3e:	fab0 f080 	clz	r0, r0
    1e42:	0940      	lsrs	r0, r0, #5
}
    1e44:	b002      	add	sp, #8
    1e46:	bd10      	pop	{r4, pc}
		return false;
    1e48:	2000      	movs	r0, #0
    1e4a:	e7fb      	b.n	1e44 <bt_rpa_irk_matches+0x1e>

00001e4c <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1e4e:	1ccd      	adds	r5, r1, #3
{
    1e50:	4606      	mov	r6, r0
    1e52:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1e54:	4628      	mov	r0, r5
    1e56:	2103      	movs	r1, #3
    1e58:	f005 fd7c 	bl	7954 <bt_rand>
	if (err) {
    1e5c:	b960      	cbnz	r0, 1e78 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1e5e:	7963      	ldrb	r3, [r4, #5]
    1e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e68:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1e6a:	4622      	mov	r2, r4
    1e6c:	4629      	mov	r1, r5
    1e6e:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1e74:	f7ff bfba 	b.w	1dec <ah>
}
    1e78:	bd70      	pop	{r4, r5, r6, pc}
	...

00001e7c <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1e7c:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1e7e:	7802      	ldrb	r2, [r0, #0]
    1e80:	2a01      	cmp	r2, #1
{
    1e82:	4604      	mov	r4, r0
    1e84:	460b      	mov	r3, r1
	switch (src->type) {
    1e86:	d017      	beq.n	1eb8 <uuid_to_uuid128+0x3c>
    1e88:	d303      	bcc.n	1e92 <uuid_to_uuid128+0x16>
    1e8a:	2a02      	cmp	r2, #2
    1e8c:	d02c      	beq.n	1ee8 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1e8e:	bcf0      	pop	{r4, r5, r6, r7}
    1e90:	4770      	bx	lr
		*dst = uuid128_base;
    1e92:	4a18      	ldr	r2, [pc, #96]	; (1ef4 <uuid_to_uuid128+0x78>)
    1e94:	460d      	mov	r5, r1
    1e96:	f102 0710 	add.w	r7, r2, #16
    1e9a:	6810      	ldr	r0, [r2, #0]
    1e9c:	6851      	ldr	r1, [r2, #4]
    1e9e:	462e      	mov	r6, r5
    1ea0:	c603      	stmia	r6!, {r0, r1}
    1ea2:	3208      	adds	r2, #8
    1ea4:	42ba      	cmp	r2, r7
    1ea6:	4635      	mov	r5, r6
    1ea8:	d1f7      	bne.n	1e9a <uuid_to_uuid128+0x1e>
    1eaa:	7812      	ldrb	r2, [r2, #0]
    1eac:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1eae:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1eb0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1eb2:	0a12      	lsrs	r2, r2, #8
    1eb4:	739a      	strb	r2, [r3, #14]
    1eb6:	e7ea      	b.n	1e8e <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1eb8:	4a0e      	ldr	r2, [pc, #56]	; (1ef4 <uuid_to_uuid128+0x78>)
    1eba:	460d      	mov	r5, r1
    1ebc:	f102 0710 	add.w	r7, r2, #16
    1ec0:	6810      	ldr	r0, [r2, #0]
    1ec2:	6851      	ldr	r1, [r2, #4]
    1ec4:	462e      	mov	r6, r5
    1ec6:	c603      	stmia	r6!, {r0, r1}
    1ec8:	3208      	adds	r2, #8
    1eca:	42ba      	cmp	r2, r7
    1ecc:	4635      	mov	r5, r6
    1ece:	d1f7      	bne.n	1ec0 <uuid_to_uuid128+0x44>
    1ed0:	7812      	ldrb	r2, [r2, #0]
    1ed2:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1ed4:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1ed6:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1ed8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1edc:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1ede:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1ee0:	0a12      	lsrs	r2, r2, #8
    1ee2:	7399      	strb	r1, [r3, #14]
    1ee4:	741a      	strb	r2, [r3, #16]
    1ee6:	e7d2      	b.n	1e8e <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1ee8:	4601      	mov	r1, r0
    1eea:	2211      	movs	r2, #17
    1eec:	4618      	mov	r0, r3
}
    1eee:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1ef0:	f7ff be84 	b.w	1bfc <memcpy>
    1ef4:	000147ed 	.word	0x000147ed

00001ef8 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1ef8:	b510      	push	{r4, lr}
    1efa:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1efc:	7801      	ldrb	r1, [r0, #0]
    1efe:	7822      	ldrb	r2, [r4, #0]
    1f00:	428a      	cmp	r2, r1
{
    1f02:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1f04:	d00e      	beq.n	1f24 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1f06:	4669      	mov	r1, sp
    1f08:	f7ff ffb8 	bl	1e7c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1f0c:	a905      	add	r1, sp, #20
    1f0e:	4620      	mov	r0, r4
    1f10:	f7ff ffb4 	bl	1e7c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1f14:	2210      	movs	r2, #16
    1f16:	f10d 0115 	add.w	r1, sp, #21
    1f1a:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f1e:	f7ff fe58 	bl	1bd2 <memcmp>
    1f22:	e00a      	b.n	1f3a <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1f24:	2a01      	cmp	r2, #1
    1f26:	d00a      	beq.n	1f3e <bt_uuid_cmp+0x46>
    1f28:	d304      	bcc.n	1f34 <bt_uuid_cmp+0x3c>
    1f2a:	2a02      	cmp	r2, #2
    1f2c:	d00a      	beq.n	1f44 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1f2e:	f06f 0015 	mvn.w	r0, #21
    1f32:	e002      	b.n	1f3a <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1f34:	8840      	ldrh	r0, [r0, #2]
    1f36:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f38:	1ac0      	subs	r0, r0, r3
}
    1f3a:	b00a      	add	sp, #40	; 0x28
    1f3c:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f3e:	6840      	ldr	r0, [r0, #4]
    1f40:	6863      	ldr	r3, [r4, #4]
    1f42:	e7f9      	b.n	1f38 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f44:	2210      	movs	r2, #16
    1f46:	1c61      	adds	r1, r4, #1
    1f48:	3001      	adds	r0, #1
    1f4a:	e7e8      	b.n	1f1e <bt_uuid_cmp+0x26>

00001f4c <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    1f4c:	4770      	bx	lr
	...

00001f50 <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    1f50:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    1f52:	4d0b      	ldr	r5, [pc, #44]	; (1f80 <ver_str+0x30>)
{
    1f54:	4606      	mov	r6, r0
	const char * const str[] = {
    1f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    1f58:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    1f5a:	466c      	mov	r4, sp
    1f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f62:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    1f66:	2e09      	cmp	r6, #9
	const char * const str[] = {
    1f68:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    1f6c:	bf9b      	ittet	ls
    1f6e:	ab0a      	addls	r3, sp, #40	; 0x28
    1f70:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    1f74:	4803      	ldrhi	r0, [pc, #12]	; (1f84 <ver_str+0x34>)
		return str[ver];
    1f76:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    1f7a:	b00a      	add	sp, #40	; 0x28
    1f7c:	bd70      	pop	{r4, r5, r6, pc}
    1f7e:	bf00      	nop
    1f80:	000141cc 	.word	0x000141cc
    1f84:	000152d0 	.word	0x000152d0

00001f88 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1f88:	2207      	movs	r2, #7
    1f8a:	f7ff be37 	b.w	1bfc <memcpy>

00001f8e <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1f8e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1f90:	f3bf 8f5b 	dmb	ish
    1f94:	e850 3f00 	ldrex	r3, [r0]
    1f98:	ea43 0201 	orr.w	r2, r3, r1
    1f9c:	e840 2e00 	strex	lr, r2, [r0]
    1fa0:	f1be 0f00 	cmp.w	lr, #0
    1fa4:	d1f6      	bne.n	1f94 <atomic_or+0x6>
    1fa6:	f3bf 8f5b 	dmb	ish
    1faa:	4618      	mov	r0, r3
    1fac:	f85d fb04 	ldr.w	pc, [sp], #4

00001fb0 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1fb0:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1fb2:	f3bf 8f5b 	dmb	ish
    1fb6:	e850 3f00 	ldrex	r3, [r0]
    1fba:	ea03 0201 	and.w	r2, r3, r1
    1fbe:	e840 2e00 	strex	lr, r2, [r0]
    1fc2:	f1be 0f00 	cmp.w	lr, #0
    1fc6:	d1f6      	bne.n	1fb6 <atomic_and+0x6>
    1fc8:	f3bf 8f5b 	dmb	ish
    1fcc:	4618      	mov	r0, r3
    1fce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001fd4 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    1fd4:	78c3      	ldrb	r3, [r0, #3]
    1fd6:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1fd8:	f241 3288 	movw	r2, #5000	; 0x1388
    1fdc:	f100 0170 	add.w	r1, r0, #112	; 0x70
    1fe0:	bf08      	it	eq
    1fe2:	2200      	moveq	r2, #0
    1fe4:	4801      	ldr	r0, [pc, #4]	; (1fec <update_conn_param+0x18>)
    1fe6:	f011 bf03 	b.w	13df0 <k_delayed_work_submit_to_queue>
    1fea:	bf00      	nop
    1fec:	20001988 	.word	0x20001988

00001ff0 <hci_cmd_done>:
{
    1ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ff4:	4606      	mov	r6, r0
    1ff6:	b086      	sub	sp, #24
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1ff8:	7990      	ldrb	r0, [r2, #6]
    1ffa:	4f26      	ldr	r7, [pc, #152]	; (2094 <hci_cmd_done+0xa4>)
{
    1ffc:	4688      	mov	r8, r1
    1ffe:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2000:	f010 fa4e 	bl	124a0 <net_buf_pool_get>
    2004:	4287      	cmp	r7, r0
    2006:	d013      	beq.n	2030 <hci_cmd_done+0x40>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    2008:	79ac      	ldrb	r4, [r5, #6]
    200a:	4620      	mov	r0, r4
    200c:	f010 fa48 	bl	124a0 <net_buf_pool_get>
    2010:	4b21      	ldr	r3, [pc, #132]	; (2098 <hci_cmd_done+0xa8>)
    2012:	9305      	str	r3, [sp, #20]
    2014:	9003      	str	r0, [sp, #12]
    2016:	e88d 0048 	stmia.w	sp, {r3, r6}
    201a:	9704      	str	r7, [sp, #16]
    201c:	9402      	str	r4, [sp, #8]
    201e:	4b1f      	ldr	r3, [pc, #124]	; (209c <hci_cmd_done+0xac>)
    2020:	4a1f      	ldr	r2, [pc, #124]	; (20a0 <hci_cmd_done+0xb0>)
    2022:	4920      	ldr	r1, [pc, #128]	; (20a4 <hci_cmd_done+0xb4>)
    2024:	4820      	ldr	r0, [pc, #128]	; (20a8 <hci_cmd_done+0xb8>)
    2026:	f7fe ffb1 	bl	f8c <printk>
}
    202a:	b006      	add	sp, #24
    202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    2030:	4628      	mov	r0, r5
    2032:	f010 fa3b 	bl	124ac <net_buf_id>
    2036:	4c1d      	ldr	r4, [pc, #116]	; (20ac <hci_cmd_done+0xbc>)
    2038:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    203c:	8843      	ldrh	r3, [r0, #2]
    203e:	42b3      	cmp	r3, r6
    2040:	d010      	beq.n	2064 <hci_cmd_done+0x74>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    2042:	4628      	mov	r0, r5
    2044:	f010 fa32 	bl	124ac <net_buf_id>
    2048:	4b13      	ldr	r3, [pc, #76]	; (2098 <hci_cmd_done+0xa8>)
    204a:	9303      	str	r3, [sp, #12]
    204c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2050:	4914      	ldr	r1, [pc, #80]	; (20a4 <hci_cmd_done+0xb4>)
    2052:	8842      	ldrh	r2, [r0, #2]
    2054:	9202      	str	r2, [sp, #8]
    2056:	e88d 0048 	stmia.w	sp, {r3, r6}
    205a:	4a11      	ldr	r2, [pc, #68]	; (20a0 <hci_cmd_done+0xb0>)
    205c:	4b0f      	ldr	r3, [pc, #60]	; (209c <hci_cmd_done+0xac>)
    205e:	4814      	ldr	r0, [pc, #80]	; (20b0 <hci_cmd_done+0xc0>)
    2060:	f7fe ff94 	bl	f8c <printk>
	if (cmd(buf)->sync) {
    2064:	4628      	mov	r0, r5
    2066:	f010 fa21 	bl	124ac <net_buf_id>
    206a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    206e:	6843      	ldr	r3, [r0, #4]
    2070:	2b00      	cmp	r3, #0
    2072:	d0da      	beq.n	202a <hci_cmd_done+0x3a>
		cmd(buf)->status = status;
    2074:	4628      	mov	r0, r5
    2076:	f010 fa19 	bl	124ac <net_buf_id>
    207a:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    207e:	4628      	mov	r0, r5
    2080:	f010 fa14 	bl	124ac <net_buf_id>
    2084:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2088:	6840      	ldr	r0, [r0, #4]
}
    208a:	b006      	add	sp, #24
    208c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2090:	f011 bb53 	b.w	1373a <_impl_k_sem_give>
    2094:	20003f6c 	.word	0x20003f6c
    2098:	000142a9 	.word	0x000142a9
    209c:	000148c6 	.word	0x000148c6
    20a0:	00015040 	.word	0x00015040
    20a4:	00015047 	.word	0x00015047
    20a8:	0001504a 	.word	0x0001504a
    20ac:	2000027c 	.word	0x2000027c
    20b0:	0001508f 	.word	0x0001508f

000020b4 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    20b4:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20b6:	f3bf 8f5b 	dmb	ish
    20ba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    20be:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    20c2:	f001 011f 	and.w	r1, r1, #31
    20c6:	4108      	asrs	r0, r1
}
    20c8:	f000 0001 	and.w	r0, r0, #1
    20cc:	4770      	bx	lr
	...

000020d0 <bt_hci_cmd_create>:
{
    20d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20d4:	4680      	mov	r8, r0
    20d6:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    20d8:	4813      	ldr	r0, [pc, #76]	; (2128 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    20da:	4d14      	ldr	r5, [pc, #80]	; (212c <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    20dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    20e0:	f010 fa72 	bl	125c8 <net_buf_alloc_fixed>
    20e4:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    20e6:	f100 0608 	add.w	r6, r0, #8
    20ea:	2100      	movs	r1, #0
    20ec:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    20ee:	2700      	movs	r7, #0
    20f0:	f010 fa89 	bl	12606 <net_buf_simple_reserve>
    20f4:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    20f6:	4620      	mov	r0, r4
    20f8:	f010 f9d8 	bl	124ac <net_buf_id>
    20fc:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2100:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    2104:	4620      	mov	r0, r4
    2106:	f010 f9d1 	bl	124ac <net_buf_id>
    210a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    210e:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    2110:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    2112:	4630      	mov	r0, r6
    2114:	f010 faba 	bl	1268c <net_buf_simple_add>
	hdr->param_len = param_len;
    2118:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    211c:	f8a0 8000 	strh.w	r8, [r0]
}
    2120:	4620      	mov	r0, r4
    2122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2126:	bf00      	nop
    2128:	20003f6c 	.word	0x20003f6c
    212c:	2000027c 	.word	0x2000027c

00002130 <bt_hci_cmd_send_sync>:
{
    2130:	b570      	push	{r4, r5, r6, lr}
    2132:	4615      	mov	r5, r2
    2134:	b086      	sub	sp, #24
	if (!buf) {
    2136:	460c      	mov	r4, r1
    2138:	b919      	cbnz	r1, 2142 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    213a:	f7ff ffc9 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    213e:	4604      	mov	r4, r0
    2140:	b368      	cbz	r0, 219e <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2142:	2201      	movs	r2, #1
    2144:	2100      	movs	r1, #0
    2146:	4668      	mov	r0, sp
    2148:	f011 faee 	bl	13728 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    214c:	4620      	mov	r0, r4
    214e:	f010 f9ad 	bl	124ac <net_buf_id>
    2152:	4e14      	ldr	r6, [pc, #80]	; (21a4 <bt_hci_cmd_send_sync+0x74>)
    2154:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    2158:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    215c:	4620      	mov	r0, r4
    215e:	f010 fa91 	bl	12684 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2162:	4621      	mov	r1, r4
    2164:	4810      	ldr	r0, [pc, #64]	; (21a8 <bt_hci_cmd_send_sync+0x78>)
    2166:	f010 fa52 	bl	1260e <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    216a:	f242 7110 	movw	r1, #10000	; 0x2710
    216e:	4668      	mov	r0, sp
    2170:	f011 fb0b 	bl	1378a <_impl_k_sem_take>
	if (cmd(buf)->status) {
    2174:	4620      	mov	r0, r4
    2176:	f010 f999 	bl	124ac <net_buf_id>
    217a:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    217e:	b130      	cbz	r0, 218e <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    2180:	4620      	mov	r0, r4
    2182:	f010 fa51 	bl	12628 <net_buf_unref>
		err = -EIO;
    2186:	f06f 0004 	mvn.w	r0, #4
}
    218a:	b006      	add	sp, #24
    218c:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    218e:	b10d      	cbz	r5, 2194 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    2190:	602c      	str	r4, [r5, #0]
    2192:	e7fa      	b.n	218a <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    2194:	4620      	mov	r0, r4
    2196:	f010 fa47 	bl	12628 <net_buf_unref>
		err = 0;
    219a:	4628      	mov	r0, r5
    219c:	e7f5      	b.n	218a <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    219e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    21a2:	e7f2      	b.n	218a <bt_hci_cmd_send_sync+0x5a>
    21a4:	2000027c 	.word	0x2000027c
    21a8:	20003b24 	.word	0x20003b24

000021ac <set_le_scan_enable>:
{
    21ac:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    21ae:	2102      	movs	r1, #2
{
    21b0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    21b2:	f242 000c 	movw	r0, #8204	; 0x200c
    21b6:	f7ff ff8b 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    21ba:	4604      	mov	r4, r0
    21bc:	b330      	cbz	r0, 220c <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    21be:	2102      	movs	r1, #2
    21c0:	3008      	adds	r0, #8
    21c2:	f010 fa63 	bl	1268c <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21c6:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    21c8:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21ca:	d116      	bne.n	21fa <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    21cc:	210b      	movs	r1, #11
    21ce:	4811      	ldr	r0, [pc, #68]	; (2214 <set_le_scan_enable+0x68>)
    21d0:	f7ff ff70 	bl	20b4 <atomic_test_bit>
    21d4:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    21d6:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    21d8:	4621      	mov	r1, r4
    21da:	2200      	movs	r2, #0
    21dc:	f242 000c 	movw	r0, #8204	; 0x200c
    21e0:	f7ff ffa6 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    21e4:	4604      	mov	r4, r0
    21e6:	b930      	cbnz	r0, 21f6 <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21e8:	2d01      	cmp	r5, #1
    21ea:	d109      	bne.n	2200 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    21ec:	f44f 7180 	mov.w	r1, #256	; 0x100
    21f0:	4808      	ldr	r0, [pc, #32]	; (2214 <set_le_scan_enable+0x68>)
    21f2:	f7ff fecc 	bl	1f8e <atomic_or>
}
    21f6:	4620      	mov	r0, r4
    21f8:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    21fa:	2300      	movs	r3, #0
    21fc:	7043      	strb	r3, [r0, #1]
    21fe:	e7ea      	b.n	21d6 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2200:	f46f 7180 	mvn.w	r1, #256	; 0x100
    2204:	4803      	ldr	r0, [pc, #12]	; (2214 <set_le_scan_enable+0x68>)
    2206:	f7ff fed3 	bl	1fb0 <atomic_and>
    220a:	e7f4      	b.n	21f6 <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    220c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2210:	e7f1      	b.n	21f6 <set_le_scan_enable+0x4a>
    2212:	bf00      	nop
    2214:	20003ad0 	.word	0x20003ad0

00002218 <set_random_address>:
{
    2218:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    221a:	4d15      	ldr	r5, [pc, #84]	; (2270 <set_random_address+0x58>)
    221c:	2206      	movs	r2, #6
    221e:	f105 0108 	add.w	r1, r5, #8
    2222:	4606      	mov	r6, r0
    2224:	f7ff fcd5 	bl	1bd2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2228:	4604      	mov	r4, r0
    222a:	b1d8      	cbz	r0, 2264 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    222c:	2106      	movs	r1, #6
    222e:	f242 0005 	movw	r0, #8197	; 0x2005
    2232:	f7ff ff4d 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2236:	4604      	mov	r4, r0
    2238:	b1b0      	cbz	r0, 2268 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    223a:	2206      	movs	r2, #6
    223c:	4631      	mov	r1, r6
    223e:	3008      	adds	r0, #8
    2240:	f010 fa2a 	bl	12698 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2244:	4621      	mov	r1, r4
    2246:	2200      	movs	r2, #0
    2248:	f242 0005 	movw	r0, #8197	; 0x2005
    224c:	f7ff ff70 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2250:	4604      	mov	r4, r0
    2252:	b938      	cbnz	r0, 2264 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    2254:	2206      	movs	r2, #6
    2256:	4631      	mov	r1, r6
    2258:	f105 0008 	add.w	r0, r5, #8
    225c:	f7ff fcce 	bl	1bfc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2260:	2301      	movs	r3, #1
    2262:	71eb      	strb	r3, [r5, #7]
}
    2264:	4620      	mov	r0, r4
    2266:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2268:	f06f 0436 	mvn.w	r4, #54	; 0x36
    226c:	e7fa      	b.n	2264 <set_random_address+0x4c>
    226e:	bf00      	nop
    2270:	20003a60 	.word	0x20003a60

00002274 <le_set_private_addr>:
{
    2274:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    2276:	2106      	movs	r1, #6
    2278:	4668      	mov	r0, sp
    227a:	f005 fb6b 	bl	7954 <bt_rand>
	if (err) {
    227e:	b940      	cbnz	r0, 2292 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    2280:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    2284:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    2286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    228a:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    228e:	f7ff ffc3 	bl	2218 <set_random_address>
}
    2292:	b003      	add	sp, #12
    2294:	f85d fb04 	ldr.w	pc, [sp], #4

00002298 <set_advertise_enable>:
{
    2298:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    229a:	2101      	movs	r1, #1
{
    229c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    229e:	f242 000a 	movw	r0, #8202	; 0x200a
    22a2:	f7ff ff15 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    22a6:	4604      	mov	r4, r0
    22a8:	b1d8      	cbz	r0, 22e2 <set_advertise_enable+0x4a>
    22aa:	3008      	adds	r0, #8
	if (enable) {
    22ac:	b18d      	cbz	r5, 22d2 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    22ae:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    22b0:	f010 f9fb 	bl	126aa <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    22b4:	4621      	mov	r1, r4
    22b6:	2200      	movs	r2, #0
    22b8:	f242 000a 	movw	r0, #8202	; 0x200a
    22bc:	f7ff ff38 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    22c0:	4604      	mov	r4, r0
    22c2:	b920      	cbnz	r0, 22ce <set_advertise_enable+0x36>
	if (enable) {
    22c4:	b13d      	cbz	r5, 22d6 <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    22c6:	2140      	movs	r1, #64	; 0x40
    22c8:	4807      	ldr	r0, [pc, #28]	; (22e8 <set_advertise_enable+0x50>)
    22ca:	f7ff fe60 	bl	1f8e <atomic_or>
}
    22ce:	4620      	mov	r0, r4
    22d0:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    22d2:	4629      	mov	r1, r5
    22d4:	e7ec      	b.n	22b0 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    22d6:	f06f 0140 	mvn.w	r1, #64	; 0x40
    22da:	4803      	ldr	r0, [pc, #12]	; (22e8 <set_advertise_enable+0x50>)
    22dc:	f7ff fe68 	bl	1fb0 <atomic_and>
    22e0:	e7f5      	b.n	22ce <set_advertise_enable+0x36>
		return -ENOBUFS;
    22e2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    22e6:	e7f2      	b.n	22ce <set_advertise_enable+0x36>
    22e8:	20003ad0 	.word	0x20003ad0

000022ec <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    22ec:	8802      	ldrh	r2, [r0, #0]
    22ee:	8843      	ldrh	r3, [r0, #2]
    22f0:	429a      	cmp	r2, r3
{
    22f2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    22f4:	d818      	bhi.n	2328 <bt_le_conn_params_valid+0x3c>
    22f6:	2a05      	cmp	r2, #5
    22f8:	d916      	bls.n	2328 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    22fa:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    22fe:	d813      	bhi.n	2328 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    2300:	8884      	ldrh	r4, [r0, #4]
    2302:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    2306:	d20f      	bcs.n	2328 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    2308:	88c1      	ldrh	r1, [r0, #6]
    230a:	f1a1 020a 	sub.w	r2, r1, #10
    230e:	b292      	uxth	r2, r2
    2310:	f640 4076 	movw	r0, #3190	; 0xc76
    2314:	4282      	cmp	r2, r0
    2316:	d807      	bhi.n	2328 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    2318:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    231c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    2320:	bfb4      	ite	lt
    2322:	2001      	movlt	r0, #1
    2324:	2000      	movge	r0, #0
    2326:	bd10      	pop	{r4, pc}
		return false;
    2328:	2000      	movs	r0, #0
}
    232a:	bd10      	pop	{r4, pc}

0000232c <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    232c:	2301      	movs	r3, #1
{
    232e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2330:	2106      	movs	r1, #6
{
    2332:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    2334:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2338:	f005 fb0c 	bl	7954 <bt_rand>
	if (err) {
    233c:	b918      	cbnz	r0, 2346 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    233e:	79a3      	ldrb	r3, [r4, #6]
    2340:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2344:	71a3      	strb	r3, [r4, #6]
}
    2346:	bd10      	pop	{r4, pc}

00002348 <bt_set_static_addr>:
{
    2348:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    234a:	4c11      	ldr	r4, [pc, #68]	; (2390 <bt_set_static_addr+0x48>)
    234c:	7823      	ldrb	r3, [r4, #0]
    234e:	2b01      	cmp	r3, #1
    2350:	d104      	bne.n	235c <bt_set_static_addr+0x14>
    2352:	79a3      	ldrb	r3, [r4, #6]
    2354:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2358:	2bc0      	cmp	r3, #192	; 0xc0
    235a:	d00d      	beq.n	2378 <bt_set_static_addr+0x30>
		BT_ERR("Only static random address supported as identity");
    235c:	4b0d      	ldr	r3, [pc, #52]	; (2394 <bt_set_static_addr+0x4c>)
    235e:	9301      	str	r3, [sp, #4]
    2360:	9300      	str	r3, [sp, #0]
    2362:	4a0d      	ldr	r2, [pc, #52]	; (2398 <bt_set_static_addr+0x50>)
    2364:	4b0d      	ldr	r3, [pc, #52]	; (239c <bt_set_static_addr+0x54>)
    2366:	490e      	ldr	r1, [pc, #56]	; (23a0 <bt_set_static_addr+0x58>)
    2368:	480e      	ldr	r0, [pc, #56]	; (23a4 <bt_set_static_addr+0x5c>)
    236a:	f7fe fe0f 	bl	f8c <printk>
    236e:	f06f 0515 	mvn.w	r5, #21
}
    2372:	4628      	mov	r0, r5
    2374:	b003      	add	sp, #12
    2376:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    2378:	1c60      	adds	r0, r4, #1
    237a:	f7ff ff4d 	bl	2218 <set_random_address>
	if (err) {
    237e:	4605      	mov	r5, r0
    2380:	2800      	cmp	r0, #0
    2382:	d1f6      	bne.n	2372 <bt_set_static_addr+0x2a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2384:	2104      	movs	r1, #4
    2386:	f104 0070 	add.w	r0, r4, #112	; 0x70
    238a:	f7ff fe00 	bl	1f8e <atomic_or>
	return 0;
    238e:	e7f0      	b.n	2372 <bt_set_static_addr+0x2a>
    2390:	20003a60 	.word	0x20003a60
    2394:	000142a9 	.word	0x000142a9
    2398:	00014ff8 	.word	0x00014ff8
    239c:	0001491d 	.word	0x0001491d
    23a0:	00015047 	.word	0x00015047
    23a4:	00014fff 	.word	0x00014fff

000023a8 <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    23a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    23ac:	4d1d      	ldr	r5, [pc, #116]	; (2424 <bt_dev_show_info+0x7c>)
    23ae:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2440 <bt_dev_show_info+0x98>
    23b2:	4f1d      	ldr	r7, [pc, #116]	; (2428 <bt_dev_show_info+0x80>)
    23b4:	4e1d      	ldr	r6, [pc, #116]	; (242c <bt_dev_show_info+0x84>)
    23b6:	4c1e      	ldr	r4, [pc, #120]	; (2430 <bt_dev_show_info+0x88>)
{
    23b8:	b087      	sub	sp, #28
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    23ba:	4628      	mov	r0, r5
    23bc:	f7ff fcca 	bl	1d54 <bt_addr_le_str>
    23c0:	4643      	mov	r3, r8
    23c2:	463a      	mov	r2, r7
    23c4:	4631      	mov	r1, r6
    23c6:	9001      	str	r0, [sp, #4]
    23c8:	9402      	str	r4, [sp, #8]
    23ca:	9400      	str	r4, [sp, #0]
    23cc:	4819      	ldr	r0, [pc, #100]	; (2434 <bt_dev_show_info+0x8c>)
    23ce:	f7fe fddd 	bl	f8c <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    23d2:	f895 900e 	ldrb.w	r9, [r5, #14]
    23d6:	4648      	mov	r0, r9
    23d8:	f7ff fdba 	bl	1f50 <ver_str>
    23dc:	8aab      	ldrh	r3, [r5, #20]
    23de:	9304      	str	r3, [sp, #16]
    23e0:	8a2b      	ldrh	r3, [r5, #16]
    23e2:	9303      	str	r3, [sp, #12]
    23e4:	463a      	mov	r2, r7
    23e6:	4643      	mov	r3, r8
    23e8:	4631      	mov	r1, r6
    23ea:	f8cd 9008 	str.w	r9, [sp, #8]
    23ee:	9001      	str	r0, [sp, #4]
    23f0:	9405      	str	r4, [sp, #20]
    23f2:	9400      	str	r4, [sp, #0]
    23f4:	4810      	ldr	r0, [pc, #64]	; (2438 <bt_dev_show_info+0x90>)
    23f6:	f7fe fdc9 	bl	f8c <printk>
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    23fa:	f895 900f 	ldrb.w	r9, [r5, #15]
    23fe:	4648      	mov	r0, r9
    2400:	f7ff fda6 	bl	1f50 <ver_str>
    2404:	8a6b      	ldrh	r3, [r5, #18]
    2406:	9303      	str	r3, [sp, #12]
    2408:	9001      	str	r0, [sp, #4]
    240a:	9404      	str	r4, [sp, #16]
    240c:	f8cd 9008 	str.w	r9, [sp, #8]
    2410:	9400      	str	r4, [sp, #0]
    2412:	4643      	mov	r3, r8
    2414:	463a      	mov	r2, r7
    2416:	4631      	mov	r1, r6
    2418:	4808      	ldr	r0, [pc, #32]	; (243c <bt_dev_show_info+0x94>)
    241a:	f7fe fdb7 	bl	f8c <printk>
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    241e:	b007      	add	sp, #28
    2420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2424:	20003a60 	.word	0x20003a60
    2428:	00014983 	.word	0x00014983
    242c:	00015047 	.word	0x00015047
    2430:	000142a9 	.word	0x000142a9
    2434:	0001498a 	.word	0x0001498a
    2438:	000149a7 	.word	0x000149a7
    243c:	000149f5 	.word	0x000149f5
    2440:	0001493e 	.word	0x0001493e

00002444 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2444:	4b02      	ldr	r3, [pc, #8]	; (2450 <bt_send+0xc>)
    2446:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    244a:	691b      	ldr	r3, [r3, #16]
    244c:	4718      	bx	r3
    244e:	bf00      	nop
    2450:	20003a60 	.word	0x20003a60

00002454 <bt_hci_cmd_send>:
{
    2454:	b530      	push	{r4, r5, lr}
    2456:	4604      	mov	r4, r0
    2458:	b085      	sub	sp, #20
	if (!buf) {
    245a:	460d      	mov	r5, r1
    245c:	b919      	cbnz	r1, 2466 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    245e:	f7ff fe37 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    2462:	4605      	mov	r5, r0
    2464:	b1f0      	cbz	r0, 24a4 <bt_hci_cmd_send+0x50>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2466:	f640 4335 	movw	r3, #3125	; 0xc35
    246a:	429c      	cmp	r4, r3
    246c:	d114      	bne.n	2498 <bt_hci_cmd_send+0x44>
		err = bt_send(buf);
    246e:	4628      	mov	r0, r5
    2470:	f7ff ffe8 	bl	2444 <bt_send>
		if (err) {
    2474:	4604      	mov	r4, r0
    2476:	b160      	cbz	r0, 2492 <bt_hci_cmd_send+0x3e>
			BT_ERR("Unable to send to driver (err %d)", err);
    2478:	4b0c      	ldr	r3, [pc, #48]	; (24ac <bt_hci_cmd_send+0x58>)
    247a:	9302      	str	r3, [sp, #8]
    247c:	e88d 0018 	stmia.w	sp, {r3, r4}
    2480:	4a0b      	ldr	r2, [pc, #44]	; (24b0 <bt_hci_cmd_send+0x5c>)
    2482:	4b0c      	ldr	r3, [pc, #48]	; (24b4 <bt_hci_cmd_send+0x60>)
    2484:	490c      	ldr	r1, [pc, #48]	; (24b8 <bt_hci_cmd_send+0x64>)
    2486:	480d      	ldr	r0, [pc, #52]	; (24bc <bt_hci_cmd_send+0x68>)
    2488:	f7fe fd80 	bl	f8c <printk>
			net_buf_unref(buf);
    248c:	4628      	mov	r0, r5
    248e:	f010 f8cb 	bl	12628 <net_buf_unref>
}
    2492:	4620      	mov	r0, r4
    2494:	b005      	add	sp, #20
    2496:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2498:	4629      	mov	r1, r5
    249a:	4809      	ldr	r0, [pc, #36]	; (24c0 <bt_hci_cmd_send+0x6c>)
    249c:	f010 f8b7 	bl	1260e <net_buf_put>
	return 0;
    24a0:	2400      	movs	r4, #0
    24a2:	e7f6      	b.n	2492 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    24a4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    24a8:	e7f3      	b.n	2492 <bt_hci_cmd_send+0x3e>
    24aa:	bf00      	nop
    24ac:	000142a9 	.word	0x000142a9
    24b0:	00014ff8 	.word	0x00014ff8
    24b4:	000147fe 	.word	0x000147fe
    24b8:	00015047 	.word	0x00015047
    24bc:	00014a81 	.word	0x00014a81
    24c0:	20003b24 	.word	0x20003b24

000024c4 <start_le_scan>:
{
    24c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    24c6:	4605      	mov	r5, r0
    24c8:	460e      	mov	r6, r1
    24ca:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    24cc:	2100      	movs	r1, #0
    24ce:	2207      	movs	r2, #7
    24d0:	4668      	mov	r0, sp
    24d2:	f7ff fbbf 	bl	1c54 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    24d6:	4821      	ldr	r0, [pc, #132]	; (255c <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    24d8:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    24dc:	2300      	movs	r3, #0
    24de:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    24e2:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    24e4:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    24e6:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    24ea:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    24ee:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    24f2:	d10a      	bne.n	250a <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    24f4:	2106      	movs	r1, #6
    24f6:	3070      	adds	r0, #112	; 0x70
    24f8:	f7ff fddc 	bl	20b4 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    24fc:	b928      	cbnz	r0, 250a <start_le_scan+0x46>
			err = le_set_private_addr();
    24fe:	f7ff feb9 	bl	2274 <le_set_private_addr>
			if (err) {
    2502:	4604      	mov	r4, r0
    2504:	b9f0      	cbnz	r0, 2544 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    2506:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    250a:	2107      	movs	r1, #7
    250c:	f242 000b 	movw	r0, #8203	; 0x200b
    2510:	f7ff fdde 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2514:	4604      	mov	r4, r0
    2516:	b1f0      	cbz	r0, 2556 <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    2518:	2207      	movs	r2, #7
    251a:	4669      	mov	r1, sp
    251c:	3008      	adds	r0, #8
    251e:	f010 f8bb 	bl	12698 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    2522:	4621      	mov	r1, r4
    2524:	f242 000b 	movw	r0, #8203	; 0x200b
    2528:	f7ff ff94 	bl	2454 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    252c:	2001      	movs	r0, #1
    252e:	f7ff fe3d 	bl	21ac <set_le_scan_enable>
	if (err) {
    2532:	4604      	mov	r4, r0
    2534:	b930      	cbnz	r0, 2544 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    2536:	2d01      	cmp	r5, #1
    2538:	d107      	bne.n	254a <start_le_scan+0x86>
    253a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    253e:	4808      	ldr	r0, [pc, #32]	; (2560 <start_le_scan+0x9c>)
    2540:	f7ff fd25 	bl	1f8e <atomic_or>
}
    2544:	4620      	mov	r0, r4
    2546:	b002      	add	sp, #8
    2548:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    254a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    254e:	4804      	ldr	r0, [pc, #16]	; (2560 <start_le_scan+0x9c>)
    2550:	f7ff fd2e 	bl	1fb0 <atomic_and>
    2554:	e7f6      	b.n	2544 <start_le_scan+0x80>
		return -ENOBUFS;
    2556:	f06f 0436 	mvn.w	r4, #54	; 0x36
    255a:	e7f3      	b.n	2544 <start_le_scan+0x80>
    255c:	20003a60 	.word	0x20003a60
    2560:	20003ad0 	.word	0x20003ad0

00002564 <bt_le_scan_update>:
{
    2564:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2566:	2109      	movs	r1, #9
{
    2568:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    256a:	4816      	ldr	r0, [pc, #88]	; (25c4 <bt_le_scan_update+0x60>)
    256c:	f7ff fda2 	bl	20b4 <atomic_test_bit>
    2570:	4602      	mov	r2, r0
    2572:	b108      	cbz	r0, 2578 <bt_le_scan_update+0x14>
		return 0;
    2574:	2000      	movs	r0, #0
    2576:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2578:	2108      	movs	r1, #8
    257a:	4812      	ldr	r0, [pc, #72]	; (25c4 <bt_le_scan_update+0x60>)
    257c:	f7ff fd9a 	bl	20b4 <atomic_test_bit>
    2580:	b9d0      	cbnz	r0, 25b8 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    2582:	2101      	movs	r1, #1
    2584:	2000      	movs	r0, #0
    2586:	f001 fe99 	bl	42bc <bt_conn_lookup_state_le>
		if (!conn) {
    258a:	4604      	mov	r4, r0
    258c:	2800      	cmp	r0, #0
    258e:	d0f1      	beq.n	2574 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2590:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2594:	480b      	ldr	r0, [pc, #44]	; (25c4 <bt_le_scan_update+0x60>)
    2596:	f7ff fcfa 	bl	1f8e <atomic_or>
		bt_conn_unref(conn);
    259a:	4620      	mov	r0, r4
    259c:	f001 feb0 	bl	4300 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    25a0:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    25a2:	bf15      	itete	ne
    25a4:	2230      	movne	r2, #48	; 0x30
    25a6:	2212      	moveq	r2, #18
    25a8:	2160      	movne	r1, #96	; 0x60
    25aa:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    25ae:	2000      	movs	r0, #0
}
    25b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    25b4:	f7ff bf86 	b.w	24c4 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    25b8:	4610      	mov	r0, r2
    25ba:	f7ff fdf7 	bl	21ac <set_le_scan_enable>
		if (err) {
    25be:	2800      	cmp	r0, #0
    25c0:	d0df      	beq.n	2582 <bt_le_scan_update+0x1e>
    25c2:	bd38      	pop	{r3, r4, r5, pc}
    25c4:	20003ad0 	.word	0x20003ad0

000025c8 <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    25c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    25cc:	4d4d      	ldr	r5, [pc, #308]	; (2704 <bt_init+0x13c>)
    25ce:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    25d2:	6899      	ldr	r1, [r3, #8]
    25d4:	f011 0101 	ands.w	r1, r1, #1
{
    25d8:	b08e      	sub	sp, #56	; 0x38
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    25da:	d124      	bne.n	2626 <bt_init+0x5e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    25dc:	aa0c      	add	r2, sp, #48	; 0x30
    25de:	f640 4003 	movw	r0, #3075	; 0xc03
    25e2:	f7ff fda5 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    25e6:	4604      	mov	r4, r0
    25e8:	2800      	cmp	r0, #0
    25ea:	f040 8087 	bne.w	26fc <bt_init+0x134>
	u8_t status = buf->data[0];
    25ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    25f0:	689b      	ldr	r3, [r3, #8]
	if (status) {
    25f2:	781b      	ldrb	r3, [r3, #0]
    25f4:	b9a3      	cbnz	r3, 2620 <bt_init+0x58>
	scan_dev_found_cb = NULL;
    25f6:	4a44      	ldr	r2, [pc, #272]	; (2708 <bt_init+0x140>)
    25f8:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    25fa:	462b      	mov	r3, r5
    25fc:	f3bf 8f5b 	dmb	ish
    2600:	f853 2f70 	ldr.w	r2, [r3, #112]!
    2604:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2608:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    260c:	f3bf 8f5b 	dmb	ish
    2610:	e853 1f00 	ldrex	r1, [r3]
    2614:	e843 2000 	strex	r0, r2, [r3]
    2618:	2800      	cmp	r0, #0
    261a:	d1f9      	bne.n	2610 <bt_init+0x48>
    261c:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    2620:	980c      	ldr	r0, [sp, #48]	; 0x30
    2622:	f010 f801 	bl	12628 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2626:	aa0c      	add	r2, sp, #48	; 0x30
    2628:	2100      	movs	r1, #0
    262a:	f241 0003 	movw	r0, #4099	; 0x1003
    262e:	f7ff fd7f 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2632:	4604      	mov	r4, r0
    2634:	2800      	cmp	r0, #0
    2636:	d161      	bne.n	26fc <bt_init+0x134>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    263a:	4834      	ldr	r0, [pc, #208]	; (270c <bt_init+0x144>)
    263c:	6899      	ldr	r1, [r3, #8]
    263e:	2208      	movs	r2, #8
    2640:	3101      	adds	r1, #1
    2642:	f7ff fadb 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2646:	980c      	ldr	r0, [sp, #48]	; 0x30
    2648:	f00f ffee 	bl	12628 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    264c:	4621      	mov	r1, r4
    264e:	aa0c      	add	r2, sp, #48	; 0x30
    2650:	f241 0001 	movw	r0, #4097	; 0x1001
    2654:	f7ff fd6c 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2658:	4604      	mov	r4, r0
    265a:	2800      	cmp	r0, #0
    265c:	d14e      	bne.n	26fc <bt_init+0x134>
	read_local_ver_complete(rsp);
    265e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2660:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    2662:	785a      	ldrb	r2, [r3, #1]
    2664:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2666:	78d9      	ldrb	r1, [r3, #3]
    2668:	789a      	ldrb	r2, [r3, #2]
    266a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    266e:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2670:	791a      	ldrb	r2, [r3, #4]
    2672:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2674:	7a19      	ldrb	r1, [r3, #8]
    2676:	79da      	ldrb	r2, [r3, #7]
    2678:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    267c:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    267e:	795a      	ldrb	r2, [r3, #5]
    2680:	799b      	ldrb	r3, [r3, #6]
    2682:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    2686:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    2688:	f00f ffce 	bl	12628 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    268c:	2103      	movs	r1, #3
    268e:	4820      	ldr	r0, [pc, #128]	; (2710 <bt_init+0x148>)
    2690:	f7ff fd10 	bl	20b4 <atomic_test_bit>
    2694:	4601      	mov	r1, r0
    2696:	b988      	cbnz	r0, 26bc <bt_init+0xf4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2698:	aa0c      	add	r2, sp, #48	; 0x30
    269a:	f241 0009 	movw	r0, #4105	; 0x1009
    269e:	f7ff fd47 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    26a2:	4604      	mov	r4, r0
    26a4:	bb50      	cbnz	r0, 26fc <bt_init+0x134>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    26a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    26a8:	481a      	ldr	r0, [pc, #104]	; (2714 <bt_init+0x14c>)
    26aa:	6899      	ldr	r1, [r3, #8]
    26ac:	2206      	movs	r2, #6
    26ae:	3101      	adds	r1, #1
    26b0:	f7ff faa4 	bl	1bfc <memcpy>
		net_buf_unref(rsp);
    26b4:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    26b6:	702c      	strb	r4, [r5, #0]
		net_buf_unref(rsp);
    26b8:	f00f ffb6 	bl	12628 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    26bc:	aa0c      	add	r2, sp, #48	; 0x30
    26be:	2100      	movs	r1, #0
    26c0:	f241 0002 	movw	r0, #4098	; 0x1002
    26c4:	f7ff fd34 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    26c8:	4604      	mov	r4, r0
    26ca:	b9b8      	cbnz	r0, 26fc <bt_init+0x134>
	memcpy(bt_dev.supported_commands, rp->commands,
    26cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    26ce:	4812      	ldr	r0, [pc, #72]	; (2718 <bt_init+0x150>)
    26d0:	6899      	ldr	r1, [r3, #8]
    26d2:	2240      	movs	r2, #64	; 0x40
    26d4:	3101      	adds	r1, #1
    26d6:	f7ff fa91 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    26da:	980c      	ldr	r0, [sp, #48]	; 0x30
    26dc:	f00f ffa4 	bl	12628 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    26e0:	7eab      	ldrb	r3, [r5, #26]
    26e2:	065a      	lsls	r2, r3, #25
    26e4:	d424      	bmi.n	2730 <bt_init+0x168>
		BT_ERR("Non-LE capable controller detected!");
    26e6:	4b0d      	ldr	r3, [pc, #52]	; (271c <bt_init+0x154>)
    26e8:	9301      	str	r3, [sp, #4]
    26ea:	9300      	str	r3, [sp, #0]
    26ec:	4a0c      	ldr	r2, [pc, #48]	; (2720 <bt_init+0x158>)
    26ee:	4b0d      	ldr	r3, [pc, #52]	; (2724 <bt_init+0x15c>)
    26f0:	490d      	ldr	r1, [pc, #52]	; (2728 <bt_init+0x160>)
    26f2:	480e      	ldr	r0, [pc, #56]	; (272c <bt_init+0x164>)
    26f4:	f7fe fc4a 	bl	f8c <printk>
		return -ENODEV;
    26f8:	f06f 0412 	mvn.w	r4, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    26fc:	4620      	mov	r0, r4
    26fe:	b00e      	add	sp, #56	; 0x38
    2700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2704:	20003a60 	.word	0x20003a60
    2708:	200002d8 	.word	0x200002d8
    270c:	20003a76 	.word	0x20003a76
    2710:	20003ad0 	.word	0x20003ad0
    2714:	20003a61 	.word	0x20003a61
    2718:	20003a7e 	.word	0x20003a7e
    271c:	000142a9 	.word	0x000142a9
    2720:	00014ff8 	.word	0x00014ff8
    2724:	00014915 	.word	0x00014915
    2728:	00015047 	.word	0x00015047
    272c:	00014ab3 	.word	0x00014ab3
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2730:	4621      	mov	r1, r4
    2732:	aa0c      	add	r2, sp, #48	; 0x30
    2734:	f242 0003 	movw	r0, #8195	; 0x2003
    2738:	f7ff fcfa 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    273c:	4604      	mov	r4, r0
    273e:	2800      	cmp	r0, #0
    2740:	d1dc      	bne.n	26fc <bt_init+0x134>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2744:	489b      	ldr	r0, [pc, #620]	; (29b4 <bt_init+0x3ec>)
    2746:	6899      	ldr	r1, [r3, #8]
    2748:	2208      	movs	r2, #8
    274a:	3101      	adds	r1, #1
    274c:	f7ff fa56 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2750:	980c      	ldr	r0, [sp, #48]	; 0x30
    2752:	f00f ff69 	bl	12628 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2756:	4621      	mov	r1, r4
    2758:	aa0c      	add	r2, sp, #48	; 0x30
    275a:	f242 0002 	movw	r0, #8194	; 0x2002
    275e:	f7ff fce7 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2762:	4604      	mov	r4, r0
    2764:	2800      	cmp	r0, #0
    2766:	d1c9      	bne.n	26fc <bt_init+0x134>
    2768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    276a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    276c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    2770:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    2774:	b13a      	cbz	r2, 2786 <bt_init+0x1be>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    2776:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2778:	488f      	ldr	r0, [pc, #572]	; (29b8 <bt_init+0x3f0>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    277a:	2a02      	cmp	r2, #2
    277c:	bf28      	it	cs
    277e:	2202      	movcs	r2, #2
    2780:	4611      	mov	r1, r2
    2782:	f010 ffd1 	bl	13728 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2786:	980c      	ldr	r0, [sp, #48]	; 0x30
    2788:	f00f ff4e 	bl	12628 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    278c:	7eac      	ldrb	r4, [r5, #26]
    278e:	f014 0420 	ands.w	r4, r4, #32
    2792:	f000 80c7 	beq.w	2924 <bt_init+0x35c>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2796:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    279a:	071b      	lsls	r3, r3, #28
    279c:	d513      	bpl.n	27c6 <bt_init+0x1fe>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    279e:	aa0c      	add	r2, sp, #48	; 0x30
    27a0:	2100      	movs	r1, #0
    27a2:	f242 001c 	movw	r0, #8220	; 0x201c
    27a6:	f7ff fcc3 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    27aa:	4604      	mov	r4, r0
    27ac:	2800      	cmp	r0, #0
    27ae:	d1a5      	bne.n	26fc <bt_init+0x134>
		le_read_supp_states_complete(rsp);
    27b0:	980c      	ldr	r0, [sp, #48]	; 0x30
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    27b2:	6883      	ldr	r3, [r0, #8]
    27b4:	f853 2f01 	ldr.w	r2, [r3, #1]!
    27b8:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    27ba:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    27be:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    27c2:	f00f ff31 	bl	12628 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    27c6:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    27ca:	069f      	lsls	r7, r3, #26
    27cc:	f100 80c6 	bmi.w	295c <bt_init+0x394>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    27d0:	2108      	movs	r1, #8
    27d2:	f242 0001 	movw	r0, #8193	; 0x2001
    27d6:	f7ff fc7b 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    27da:	4604      	mov	r4, r0
    27dc:	2800      	cmp	r0, #0
    27de:	f000 80a8 	beq.w	2932 <bt_init+0x36a>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    27e2:	2108      	movs	r1, #8
    27e4:	4408      	add	r0, r1
    27e6:	f00f ff51 	bl	1268c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    27ea:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
    27ee:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    27f0:	bf4c      	ite	mi
    27f2:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    27f4:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    27f6:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    27f8:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    27fc:	bf48      	it	mi
    27fe:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2802:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2806:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    280a:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    280e:	bf18      	it	ne
    2810:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2814:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2816:	bf08      	it	eq
    2818:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    281c:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    281e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2822:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    2824:	2200      	movs	r2, #0
    2826:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2828:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    282a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    282c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    282e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2830:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2832:	4621      	mov	r1, r4
    2834:	f242 0001 	movw	r0, #8193	; 0x2001
    2838:	f7ff fc7a 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    283c:	4604      	mov	r4, r0
    283e:	2800      	cmp	r0, #0
    2840:	f47f af5c 	bne.w	26fc <bt_init+0x134>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2844:	7eab      	ldrb	r3, [r5, #26]
    2846:	069a      	lsls	r2, r3, #26
    2848:	d421      	bmi.n	288e <bt_init+0x2c6>
	if (bt_dev.le.mtu) {
    284a:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    284e:	b9f1      	cbnz	r1, 288e <bt_init+0x2c6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2850:	aa0c      	add	r2, sp, #48	; 0x30
    2852:	f241 0005 	movw	r0, #4101	; 0x1005
    2856:	f7ff fc6b 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    285a:	4604      	mov	r4, r0
    285c:	2800      	cmp	r0, #0
    285e:	f47f af4d 	bne.w	26fc <bt_init+0x134>
	if (bt_dev.le.mtu) {
    2862:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2866:	b97b      	cbnz	r3, 2888 <bt_init+0x2c0>
    2868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    286a:	4853      	ldr	r0, [pc, #332]	; (29b8 <bt_init+0x3f0>)
    286c:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    286e:	7899      	ldrb	r1, [r3, #2]
    2870:	785a      	ldrb	r2, [r3, #1]
    2872:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2876:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    287a:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    287c:	2a02      	cmp	r2, #2
    287e:	bf28      	it	cs
    2880:	2202      	movcs	r2, #2
    2882:	4611      	mov	r1, r2
    2884:	f010 ff50 	bl	13728 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2888:	980c      	ldr	r0, [sp, #48]	; 0x30
    288a:	f00f fecd 	bl	12628 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    288e:	2108      	movs	r1, #8
    2890:	f640 4001 	movw	r0, #3073	; 0xc01
    2894:	f7ff fc1c 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2898:	4604      	mov	r4, r0
    289a:	2800      	cmp	r0, #0
    289c:	d049      	beq.n	2932 <bt_init+0x36a>
	ev = net_buf_add(buf, sizeof(*ev));
    289e:	2108      	movs	r1, #8
    28a0:	4408      	add	r0, r1
    28a2:	f00f fef3 	bl	1268c <net_buf_simple_add>
	dst[0] = val;
    28a6:	2310      	movs	r3, #16
    28a8:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    28aa:	2388      	movs	r3, #136	; 0x88
    28ac:	7043      	strb	r3, [r0, #1]
    28ae:	2302      	movs	r3, #2
	dst[0] = val;
    28b0:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    28b2:	70c3      	strb	r3, [r0, #3]
    28b4:	2320      	movs	r3, #32
	dst[0] = val;
    28b6:	7082      	strb	r2, [r0, #2]
    28b8:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    28ba:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    28bc:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    28be:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    28c0:	4621      	mov	r1, r4
    28c2:	f640 4001 	movw	r0, #3073	; 0xc01
    28c6:	f7ff fc33 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    28ca:	4604      	mov	r4, r0
    28cc:	2800      	cmp	r0, #0
    28ce:	f47f af15 	bne.w	26fc <bt_init+0x134>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    28d2:	4601      	mov	r1, r0
    28d4:	aa0c      	add	r2, sp, #48	; 0x30
    28d6:	f64f 4001 	movw	r0, #64513	; 0xfc01
    28da:	f7ff fc29 	bl	2130 <bt_hci_cmd_send_sync>
    28de:	4e37      	ldr	r6, [pc, #220]	; (29bc <bt_init+0x3f4>)
	if (err) {
    28e0:	2800      	cmp	r0, #0
    28e2:	d07b      	beq.n	29dc <bt_init+0x414>
		BT_WARN("Vendor HCI extensions not available");
    28e4:	4b36      	ldr	r3, [pc, #216]	; (29c0 <bt_init+0x3f8>)
    28e6:	4a37      	ldr	r2, [pc, #220]	; (29c4 <bt_init+0x3fc>)
    28e8:	4937      	ldr	r1, [pc, #220]	; (29c8 <bt_init+0x400>)
    28ea:	4838      	ldr	r0, [pc, #224]	; (29cc <bt_init+0x404>)
    28ec:	9601      	str	r6, [sp, #4]
    28ee:	9600      	str	r6, [sp, #0]
		BT_WARN("Failed to read supported vendor commands");
    28f0:	f7fe fb4c 	bl	f8c <printk>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    28f4:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    28f6:	2207      	movs	r2, #7
    28f8:	a90c      	add	r1, sp, #48	; 0x30
    28fa:	4835      	ldr	r0, [pc, #212]	; (29d0 <bt_init+0x408>)
    28fc:	930c      	str	r3, [sp, #48]	; 0x30
    28fe:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    2902:	f7ff f966 	bl	1bd2 <memcmp>
    2906:	2800      	cmp	r0, #0
    2908:	f040 80e2 	bne.w	2ad0 <bt_init+0x508>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    290c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2910:	07db      	lsls	r3, r3, #31
    2912:	f100 80fe 	bmi.w	2b12 <bt_init+0x54a>
		BT_WARN("Read Static Addresses command not available");
    2916:	9601      	str	r6, [sp, #4]
    2918:	9600      	str	r6, [sp, #0]
    291a:	4b2e      	ldr	r3, [pc, #184]	; (29d4 <bt_init+0x40c>)
    291c:	4a29      	ldr	r2, [pc, #164]	; (29c4 <bt_init+0x3fc>)
    291e:	492a      	ldr	r1, [pc, #168]	; (29c8 <bt_init+0x400>)
    2920:	482d      	ldr	r0, [pc, #180]	; (29d8 <bt_init+0x410>)
    2922:	e103      	b.n	2b2c <bt_init+0x564>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2924:	2102      	movs	r1, #2
    2926:	f640 406d 	movw	r0, #3181	; 0xc6d
    292a:	f7ff fbd1 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    292e:	4606      	mov	r6, r0
    2930:	b910      	cbnz	r0, 2938 <bt_init+0x370>
		return -ENOBUFS;
    2932:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2936:	e6e1      	b.n	26fc <bt_init+0x134>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2938:	2102      	movs	r1, #2
    293a:	3008      	adds	r0, #8
    293c:	f00f fea6 	bl	1268c <net_buf_simple_add>
		cp_le->le = 0x01;
    2940:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2942:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2944:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2946:	4622      	mov	r2, r4
    2948:	4631      	mov	r1, r6
    294a:	f640 406d 	movw	r0, #3181	; 0xc6d
    294e:	f7ff fbef 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    2952:	4604      	mov	r4, r0
    2954:	2800      	cmp	r0, #0
    2956:	f43f af1e 	beq.w	2796 <bt_init+0x1ce>
    295a:	e6cf      	b.n	26fc <bt_init+0x134>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    295c:	aa0c      	add	r2, sp, #48	; 0x30
    295e:	2100      	movs	r1, #0
    2960:	f242 002f 	movw	r0, #8239	; 0x202f
    2964:	f7ff fbe4 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    2968:	4604      	mov	r4, r0
    296a:	2800      	cmp	r0, #0
    296c:	f47f aec6 	bne.w	26fc <bt_init+0x134>
		rp = (void *)rsp->data;
    2970:	980c      	ldr	r0, [sp, #48]	; 0x30
    2972:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2974:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2978:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    297c:	f00f fe54 	bl	12628 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2980:	2104      	movs	r1, #4
    2982:	f242 0024 	movw	r0, #8228	; 0x2024
    2986:	f7ff fba3 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    298a:	4606      	mov	r6, r0
    298c:	2800      	cmp	r0, #0
    298e:	d0d0      	beq.n	2932 <bt_init+0x36a>
		cp = net_buf_add(buf, sizeof(*cp));
    2990:	2104      	movs	r1, #4
    2992:	3008      	adds	r0, #8
    2994:	f00f fe7a 	bl	1268c <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2998:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    299a:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    299e:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    29a0:	4631      	mov	r1, r6
    29a2:	f242 0024 	movw	r0, #8228	; 0x2024
    29a6:	f7ff fbc3 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    29aa:	4604      	mov	r4, r0
    29ac:	2800      	cmp	r0, #0
    29ae:	f43f af0f 	beq.w	27d0 <bt_init+0x208>
    29b2:	e6a3      	b.n	26fc <bt_init+0x134>
    29b4:	20003ad8 	.word	0x20003ad8
    29b8:	20003aec 	.word	0x20003aec
    29bc:	000142a9 	.word	0x000142a9
    29c0:	0001494f 	.word	0x0001494f
    29c4:	00015040 	.word	0x00015040
    29c8:	00015047 	.word	0x00015047
    29cc:	00014ae7 	.word	0x00014ae7
    29d0:	20003a60 	.word	0x20003a60
    29d4:	00014930 	.word	0x00014930
    29d8:	00014c84 	.word	0x00014c84
	rp.info = (void *)rsp->data;
    29dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    29de:	4972      	ldr	r1, [pc, #456]	; (2ba8 <bt_init+0x5e0>)
	rp.info = (void *)rsp->data;
    29e0:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    29e2:	4872      	ldr	r0, [pc, #456]	; (2bac <bt_init+0x5e4>)
    29e4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    29e8:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    29ea:	2b03      	cmp	r3, #3
		return plat_str[platform];
    29ec:	bf96      	itet	ls
    29ee:	4a70      	ldrls	r2, [pc, #448]	; (2bb0 <bt_init+0x5e8>)
	return "unknown";
    29f0:	4a70      	ldrhi	r2, [pc, #448]	; (2bb4 <bt_init+0x5ec>)
		return plat_str[platform];
    29f2:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    29f6:	9201      	str	r2, [sp, #4]
    29f8:	4b6f      	ldr	r3, [pc, #444]	; (2bb8 <bt_init+0x5f0>)
    29fa:	4a70      	ldr	r2, [pc, #448]	; (2bbc <bt_init+0x5f4>)
    29fc:	9603      	str	r6, [sp, #12]
    29fe:	9600      	str	r6, [sp, #0]
    2a00:	f7fe fac4 	bl	f8c <printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2a04:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2a08:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2a0c:	2b02      	cmp	r3, #2
    2a0e:	d13a      	bne.n	2a86 <bt_init+0x4be>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2a10:	2a02      	cmp	r2, #2
    2a12:	d838      	bhi.n	2a86 <bt_init+0x4be>
		return nordic_str[variant];
    2a14:	4b6a      	ldr	r3, [pc, #424]	; (2bc0 <bt_init+0x5f8>)
    2a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2a1a:	9202      	str	r2, [sp, #8]
    2a1c:	9301      	str	r3, [sp, #4]
    2a1e:	4a67      	ldr	r2, [pc, #412]	; (2bbc <bt_init+0x5f4>)
    2a20:	4b65      	ldr	r3, [pc, #404]	; (2bb8 <bt_init+0x5f0>)
    2a22:	4961      	ldr	r1, [pc, #388]	; (2ba8 <bt_init+0x5e0>)
    2a24:	9603      	str	r6, [sp, #12]
    2a26:	9600      	str	r6, [sp, #0]
    2a28:	4866      	ldr	r0, [pc, #408]	; (2bc4 <bt_init+0x5fc>)
    2a2a:	f7fe faaf 	bl	f8c <printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a2e:	7963      	ldrb	r3, [r4, #5]
    2a30:	9606      	str	r6, [sp, #24]
    2a32:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2a36:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    2a38:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a3a:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
    2a3e:	bf98      	it	ls
    2a40:	4a61      	ldrls	r2, [pc, #388]	; (2bc8 <bt_init+0x600>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a42:	9104      	str	r1, [sp, #16]
    2a44:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    2a46:	bf94      	ite	ls
    2a48:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2a4c:	4a59      	ldrhi	r2, [pc, #356]	; (2bb4 <bt_init+0x5ec>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a4e:	9103      	str	r1, [sp, #12]
    2a50:	9302      	str	r3, [sp, #8]
    2a52:	4955      	ldr	r1, [pc, #340]	; (2ba8 <bt_init+0x5e0>)
    2a54:	4b58      	ldr	r3, [pc, #352]	; (2bb8 <bt_init+0x5f0>)
    2a56:	9201      	str	r2, [sp, #4]
    2a58:	9600      	str	r6, [sp, #0]
    2a5a:	4a58      	ldr	r2, [pc, #352]	; (2bbc <bt_init+0x5f4>)
    2a5c:	485b      	ldr	r0, [pc, #364]	; (2bcc <bt_init+0x604>)
    2a5e:	f7fe fa95 	bl	f8c <printk>
	net_buf_unref(rsp);
    2a62:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a64:	f00f fde0 	bl	12628 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2a68:	aa0c      	add	r2, sp, #48	; 0x30
    2a6a:	2100      	movs	r1, #0
    2a6c:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2a70:	f7ff fb5e 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2a74:	4604      	mov	r4, r0
    2a76:	b140      	cbz	r0, 2a8a <bt_init+0x4c2>
		BT_WARN("Failed to read supported vendor features");
    2a78:	9601      	str	r6, [sp, #4]
    2a7a:	9600      	str	r6, [sp, #0]
    2a7c:	4b4e      	ldr	r3, [pc, #312]	; (2bb8 <bt_init+0x5f0>)
    2a7e:	4a54      	ldr	r2, [pc, #336]	; (2bd0 <bt_init+0x608>)
    2a80:	4949      	ldr	r1, [pc, #292]	; (2ba8 <bt_init+0x5e0>)
    2a82:	4854      	ldr	r0, [pc, #336]	; (2bd4 <bt_init+0x60c>)
    2a84:	e734      	b.n	28f0 <bt_init+0x328>
		return "unknown";
    2a86:	4b4b      	ldr	r3, [pc, #300]	; (2bb4 <bt_init+0x5ec>)
    2a88:	e7c7      	b.n	2a1a <bt_init+0x452>
	rp.cmds = (void *)rsp->data;
    2a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2a8c:	4852      	ldr	r0, [pc, #328]	; (2bd8 <bt_init+0x610>)
    2a8e:	6899      	ldr	r1, [r3, #8]
    2a90:	2202      	movs	r2, #2
    2a92:	3101      	adds	r1, #1
    2a94:	f7ff f8b2 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2a98:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a9a:	f00f fdc5 	bl	12628 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2a9e:	aa0c      	add	r2, sp, #48	; 0x30
    2aa0:	4621      	mov	r1, r4
    2aa2:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2aa6:	f7ff fb43 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2aaa:	b130      	cbz	r0, 2aba <bt_init+0x4f2>
		BT_WARN("Failed to read supported vendor commands");
    2aac:	9601      	str	r6, [sp, #4]
    2aae:	9600      	str	r6, [sp, #0]
    2ab0:	4b41      	ldr	r3, [pc, #260]	; (2bb8 <bt_init+0x5f0>)
    2ab2:	4a47      	ldr	r2, [pc, #284]	; (2bd0 <bt_init+0x608>)
    2ab4:	493c      	ldr	r1, [pc, #240]	; (2ba8 <bt_init+0x5e0>)
    2ab6:	4849      	ldr	r0, [pc, #292]	; (2bdc <bt_init+0x614>)
    2ab8:	e71a      	b.n	28f0 <bt_init+0x328>
	rp.feat = (void *)rsp->data;
    2aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2abc:	4848      	ldr	r0, [pc, #288]	; (2be0 <bt_init+0x618>)
    2abe:	6899      	ldr	r1, [r3, #8]
    2ac0:	2201      	movs	r2, #1
    2ac2:	4411      	add	r1, r2
    2ac4:	f7ff f89a 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2ac8:	980c      	ldr	r0, [sp, #48]	; 0x30
    2aca:	f00f fdad 	bl	12628 <net_buf_unref>
    2ace:	e711      	b.n	28f4 <bt_init+0x32c>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2ad0:	4b44      	ldr	r3, [pc, #272]	; (2be4 <bt_init+0x61c>)
    2ad2:	6818      	ldr	r0, [r3, #0]
    2ad4:	889a      	ldrh	r2, [r3, #4]
    2ad6:	900a      	str	r0, [sp, #40]	; 0x28
    2ad8:	799b      	ldrb	r3, [r3, #6]
    2ada:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    2ade:	a90a      	add	r1, sp, #40	; 0x28
    2ae0:	2207      	movs	r2, #7
    2ae2:	4841      	ldr	r0, [pc, #260]	; (2be8 <bt_init+0x620>)
    2ae4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    2ae8:	f7ff f873 	bl	1bd2 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2aec:	2800      	cmp	r0, #0
    2aee:	f43f af0d 	beq.w	290c <bt_init+0x344>
		bt_dev_show_info();
    2af2:	f7ff fc59 	bl	23a8 <bt_dev_show_info>
		err = bt_conn_init();
    2af6:	f001 fe47 	bl	4788 <bt_conn_init>
		if (err) {
    2afa:	4604      	mov	r4, r0
    2afc:	2800      	cmp	r0, #0
    2afe:	f47f adfd 	bne.w	26fc <bt_init+0x134>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2b02:	2102      	movs	r1, #2
    2b04:	4839      	ldr	r0, [pc, #228]	; (2bec <bt_init+0x624>)
    2b06:	f7ff fa42 	bl	1f8e <atomic_or>
	bt_le_scan_update(false);
    2b0a:	4620      	mov	r0, r4
    2b0c:	f7ff fd2a 	bl	2564 <bt_le_scan_update>
    2b10:	e5f4      	b.n	26fc <bt_init+0x134>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2b12:	aa09      	add	r2, sp, #36	; 0x24
    2b14:	2100      	movs	r1, #0
    2b16:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2b1a:	f7ff fb09 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    2b1e:	b140      	cbz	r0, 2b32 <bt_init+0x56a>
			BT_WARN("Failed to read static addresses");
    2b20:	4b33      	ldr	r3, [pc, #204]	; (2bf0 <bt_init+0x628>)
    2b22:	4a2b      	ldr	r2, [pc, #172]	; (2bd0 <bt_init+0x608>)
    2b24:	4920      	ldr	r1, [pc, #128]	; (2ba8 <bt_init+0x5e0>)
    2b26:	4833      	ldr	r0, [pc, #204]	; (2bf4 <bt_init+0x62c>)
    2b28:	9601      	str	r6, [sp, #4]
    2b2a:	9600      	str	r6, [sp, #0]
		BT_WARN("Read Static Addresses command not available");
    2b2c:	f7fe fa2e 	bl	f8c <printk>
    2b30:	e026      	b.n	2b80 <bt_init+0x5b8>
		rp = (void *)rsp->data;
    2b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2b34:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2b36:	784b      	ldrb	r3, [r1, #1]
    2b38:	b1bb      	cbz	r3, 2b6a <bt_init+0x5a2>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2b3a:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2b3c:	2206      	movs	r2, #6
    2b3e:	3102      	adds	r1, #2
    2b40:	482d      	ldr	r0, [pc, #180]	; (2bf8 <bt_init+0x630>)
    2b42:	702b      	strb	r3, [r5, #0]
    2b44:	f7ff f85a 	bl	1bfc <memcpy>
			net_buf_unref(rsp);
    2b48:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b4a:	f00f fd6d 	bl	12628 <net_buf_unref>
		return bt_set_static_addr();
    2b4e:	f7ff fbfb 	bl	2348 <bt_set_static_addr>
    2b52:	4604      	mov	r4, r0
		if (err) {
    2b54:	2800      	cmp	r0, #0
    2b56:	d0cc      	beq.n	2af2 <bt_init+0x52a>
			BT_ERR("Unable to set identity address");
    2b58:	9601      	str	r6, [sp, #4]
    2b5a:	9600      	str	r6, [sp, #0]
    2b5c:	4b27      	ldr	r3, [pc, #156]	; (2bfc <bt_init+0x634>)
    2b5e:	4a28      	ldr	r2, [pc, #160]	; (2c00 <bt_init+0x638>)
    2b60:	4911      	ldr	r1, [pc, #68]	; (2ba8 <bt_init+0x5e0>)
    2b62:	4828      	ldr	r0, [pc, #160]	; (2c04 <bt_init+0x63c>)
    2b64:	f7fe fa12 	bl	f8c <printk>
    2b68:	e5c8      	b.n	26fc <bt_init+0x134>
		BT_WARN("No static addresses stored in controller");
    2b6a:	9601      	str	r6, [sp, #4]
    2b6c:	9600      	str	r6, [sp, #0]
    2b6e:	4b20      	ldr	r3, [pc, #128]	; (2bf0 <bt_init+0x628>)
    2b70:	4a17      	ldr	r2, [pc, #92]	; (2bd0 <bt_init+0x608>)
    2b72:	490d      	ldr	r1, [pc, #52]	; (2ba8 <bt_init+0x5e0>)
    2b74:	4824      	ldr	r0, [pc, #144]	; (2c08 <bt_init+0x640>)
    2b76:	f7fe fa09 	bl	f8c <printk>
		net_buf_unref(rsp);
    2b7a:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b7c:	f00f fd54 	bl	12628 <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2b80:	4819      	ldr	r0, [pc, #100]	; (2be8 <bt_init+0x620>)
    2b82:	f7ff fbd3 	bl	232c <bt_addr_le_create_static>
		if (err) {
    2b86:	4604      	mov	r4, r0
    2b88:	2800      	cmp	r0, #0
    2b8a:	d1e5      	bne.n	2b58 <bt_init+0x590>
		BT_WARN("Using temporary static random address %s",
    2b8c:	481a      	ldr	r0, [pc, #104]	; (2bf8 <bt_init+0x630>)
    2b8e:	f7ff f8bb 	bl	1d08 <bt_addr_str>
    2b92:	9602      	str	r6, [sp, #8]
    2b94:	9001      	str	r0, [sp, #4]
    2b96:	9600      	str	r6, [sp, #0]
    2b98:	4b15      	ldr	r3, [pc, #84]	; (2bf0 <bt_init+0x628>)
    2b9a:	4a0d      	ldr	r2, [pc, #52]	; (2bd0 <bt_init+0x608>)
    2b9c:	4902      	ldr	r1, [pc, #8]	; (2ba8 <bt_init+0x5e0>)
    2b9e:	481b      	ldr	r0, [pc, #108]	; (2c0c <bt_init+0x644>)
    2ba0:	f7fe f9f4 	bl	f8c <printk>
    2ba4:	e7d3      	b.n	2b4e <bt_init+0x586>
    2ba6:	bf00      	nop
    2ba8:	00015047 	.word	0x00015047
    2bac:	00014b1b 	.word	0x00014b1b
    2bb0:	000151e0 	.word	0x000151e0
    2bb4:	000152d0 	.word	0x000152d0
    2bb8:	0001494f 	.word	0x0001494f
    2bbc:	00014983 	.word	0x00014983
    2bc0:	000151d4 	.word	0x000151d4
    2bc4:	00014b44 	.word	0x00014b44
    2bc8:	000152c0 	.word	0x000152c0
    2bcc:	00014b6c 	.word	0x00014b6c
    2bd0:	00015040 	.word	0x00015040
    2bd4:	00014ba9 	.word	0x00014ba9
    2bd8:	20003abf 	.word	0x20003abf
    2bdc:	00014be2 	.word	0x00014be2
    2be0:	20003abe 	.word	0x20003abe
    2be4:	000141f4 	.word	0x000141f4
    2be8:	20003a60 	.word	0x20003a60
    2bec:	20003ad0 	.word	0x20003ad0
    2bf0:	00014930 	.word	0x00014930
    2bf4:	00014c1b 	.word	0x00014c1b
    2bf8:	20003a61 	.word	0x20003a61
    2bfc:	0001495b 	.word	0x0001495b
    2c00:	00014ff8 	.word	0x00014ff8
    2c04:	00014cf9 	.word	0x00014cf9
    2c08:	00014c4b 	.word	0x00014c4b
    2c0c:	00014cc0 	.word	0x00014cc0

00002c10 <init_work>:

static void init_work(struct k_work *work)
{
    2c10:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    2c12:	f7ff fcd9 	bl	25c8 <bt_init>
	if (ready_cb) {
    2c16:	4b03      	ldr	r3, [pc, #12]	; (2c24 <init_work+0x14>)
    2c18:	681b      	ldr	r3, [r3, #0]
    2c1a:	b113      	cbz	r3, 2c22 <init_work+0x12>
		ready_cb(err);
	}
}
    2c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2c20:	4718      	bx	r3
    2c22:	bd10      	pop	{r4, pc}
    2c24:	200002d4 	.word	0x200002d4

00002c28 <hci_le_set_phy.isra.28>:
static int hci_le_set_phy(struct bt_conn *conn)
    2c28:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2c2a:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    2c2c:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2c2e:	f242 0032 	movw	r0, #8242	; 0x2032
    2c32:	f7ff fa4d 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2c36:	4605      	mov	r5, r0
    2c38:	b198      	cbz	r0, 2c62 <hci_le_set_phy.isra.28+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    2c3a:	2107      	movs	r1, #7
    2c3c:	3008      	adds	r0, #8
    2c3e:	f00f fd25 	bl	1268c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2c42:	8823      	ldrh	r3, [r4, #0]
    2c44:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    2c46:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c48:	2302      	movs	r3, #2
	cp->all_phys = 0;
    2c4a:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c4c:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c4e:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2c50:	7144      	strb	r4, [r0, #5]
    2c52:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    2c54:	4629      	mov	r1, r5
    2c56:	f242 0032 	movw	r0, #8242	; 0x2032
    2c5a:	f7ff fbfb 	bl	2454 <bt_hci_cmd_send>
	return 0;
    2c5e:	4620      	mov	r0, r4
    2c60:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    2c62:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2c66:	bd38      	pop	{r3, r4, r5, pc}

00002c68 <hci_le_set_data_len.isra.29>:
static int hci_le_set_data_len(struct bt_conn *conn)
    2c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2c6a:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    2c6c:	aa01      	add	r2, sp, #4
    2c6e:	2100      	movs	r1, #0
    2c70:	f242 002f 	movw	r0, #8239	; 0x202f
    2c74:	f7ff fa5c 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2c78:	b9d8      	cbnz	r0, 2cb2 <hci_le_set_data_len.isra.29+0x4a>
	rp = (void *)rsp->data;
    2c7a:	9801      	ldr	r0, [sp, #4]
    2c7c:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2c7e:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2c82:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    2c86:	f00f fccf 	bl	12628 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    2c8a:	2106      	movs	r1, #6
    2c8c:	f242 0022 	movw	r0, #8226	; 0x2022
    2c90:	f7ff fa1e 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2c94:	4604      	mov	r4, r0
    2c96:	b170      	cbz	r0, 2cb6 <hci_le_set_data_len.isra.29+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    2c98:	2106      	movs	r1, #6
    2c9a:	3008      	adds	r0, #8
    2c9c:	f00f fcf6 	bl	1268c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2ca0:	883b      	ldrh	r3, [r7, #0]
    2ca2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2ca4:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2ca6:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2ca8:	4621      	mov	r1, r4
    2caa:	f242 0022 	movw	r0, #8226	; 0x2022
    2cae:	f7ff fbd1 	bl	2454 <bt_hci_cmd_send>
}
    2cb2:	b003      	add	sp, #12
    2cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    2cb6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2cba:	e7fa      	b.n	2cb2 <hci_le_set_data_len.isra.29+0x4a>

00002cbc <le_enh_conn_complete>:
{
    2cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    2cbe:	7803      	ldrb	r3, [r0, #0]
{
    2cc0:	b089      	sub	sp, #36	; 0x24
    2cc2:	4605      	mov	r5, r0
	if (evt->status) {
    2cc4:	b17b      	cbz	r3, 2ce6 <le_enh_conn_complete+0x2a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    2cc6:	2102      	movs	r1, #2
    2cc8:	2000      	movs	r0, #0
    2cca:	f001 faf7 	bl	42bc <bt_conn_lookup_state_le>
		if (!conn) {
    2cce:	4604      	mov	r4, r0
    2cd0:	b138      	cbz	r0, 2ce2 <le_enh_conn_complete+0x26>
		conn->err = evt->status;
    2cd2:	782b      	ldrb	r3, [r5, #0]
    2cd4:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2cd6:	2100      	movs	r1, #0
    2cd8:	f001 f9c8 	bl	406c <bt_conn_set_state>
		bt_conn_unref(conn);
    2cdc:	4620      	mov	r0, r4
    2cde:	f001 fb0f 	bl	4300 <bt_conn_unref>
}
    2ce2:	b009      	add	sp, #36	; 0x24
    2ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2ce6:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2ce8:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2cec:	4621      	mov	r1, r4
    2cee:	a806      	add	r0, sp, #24
    2cf0:	f7ff f94a 	bl	1f88 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2cf4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2cf8:	3b02      	subs	r3, #2
    2cfa:	b2db      	uxtb	r3, r3
    2cfc:	2b01      	cmp	r3, #1
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2cfe:	b2b7      	uxth	r7, r6
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2d00:	d829      	bhi.n	2d56 <le_enh_conn_complete+0x9a>
    2d02:	2206      	movs	r2, #6
    2d04:	f105 0111 	add.w	r1, r5, #17
    2d08:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2d0c:	f88d 3018 	strb.w	r3, [sp, #24]
    2d10:	f7fe ff74 	bl	1bfc <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    2d14:	2301      	movs	r3, #1
    2d16:	f88d 3010 	strb.w	r3, [sp, #16]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2d1a:	2102      	movs	r1, #2
    2d1c:	a806      	add	r0, sp, #24
    2d1e:	f001 facd 	bl	42bc <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2d22:	78eb      	ldrb	r3, [r5, #3]
    2d24:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2d26:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2d28:	d109      	bne.n	2d3e <le_enh_conn_complete+0x82>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2d2a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    2d2e:	484a      	ldr	r0, [pc, #296]	; (2e58 <le_enh_conn_complete+0x19c>)
    2d30:	f7ff f93e 	bl	1fb0 <atomic_and>
		if (!conn) {
    2d34:	b9a4      	cbnz	r4, 2d60 <le_enh_conn_complete+0xa4>
			conn = bt_conn_add_le(&id_addr);
    2d36:	a806      	add	r0, sp, #24
    2d38:	f001 f964 	bl	4004 <bt_conn_add_le>
    2d3c:	4604      	mov	r4, r0
	if (!conn) {
    2d3e:	b97c      	cbnz	r4, 2d60 <le_enh_conn_complete+0xa4>
		BT_ERR("Unable to add new conn for handle %u", handle);
    2d40:	4b46      	ldr	r3, [pc, #280]	; (2e5c <le_enh_conn_complete+0x1a0>)
    2d42:	9302      	str	r3, [sp, #8]
    2d44:	e88d 0088 	stmia.w	sp, {r3, r7}
    2d48:	4a45      	ldr	r2, [pc, #276]	; (2e60 <le_enh_conn_complete+0x1a4>)
    2d4a:	4b46      	ldr	r3, [pc, #280]	; (2e64 <le_enh_conn_complete+0x1a8>)
    2d4c:	4946      	ldr	r1, [pc, #280]	; (2e68 <le_enh_conn_complete+0x1ac>)
    2d4e:	4847      	ldr	r0, [pc, #284]	; (2e6c <le_enh_conn_complete+0x1b0>)
    2d50:	f7fe f91c 	bl	f8c <printk>
		return;
    2d54:	e7c5      	b.n	2ce2 <le_enh_conn_complete+0x26>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    2d56:	4621      	mov	r1, r4
    2d58:	a804      	add	r0, sp, #16
    2d5a:	f7ff f915 	bl	1f88 <bt_addr_le_copy>
    2d5e:	e7dc      	b.n	2d1a <le_enh_conn_complete+0x5e>
	conn->handle   = handle;
    2d60:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2d62:	a906      	add	r1, sp, #24
	conn->handle   = handle;
    2d64:	f820 6b44 	strh.w	r6, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2d68:	f7ff f90e 	bl	1f88 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    2d6c:	7e2a      	ldrb	r2, [r5, #24]
    2d6e:	7deb      	ldrb	r3, [r5, #23]
    2d70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2d74:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    2d78:	7eaa      	ldrb	r2, [r5, #26]
    2d7a:	7e6b      	ldrb	r3, [r5, #25]
    2d7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2d80:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2d84:	7eeb      	ldrb	r3, [r5, #27]
    2d86:	7f2a      	ldrb	r2, [r5, #28]
    2d88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2d8c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    2d90:	78ee      	ldrb	r6, [r5, #3]
    2d92:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    2d94:	2e01      	cmp	r6, #1
    2d96:	d11a      	bne.n	2dce <le_enh_conn_complete+0x112>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2d98:	4f35      	ldr	r7, [pc, #212]	; (2e70 <le_enh_conn_complete+0x1b4>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    2d9a:	a904      	add	r1, sp, #16
    2d9c:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    2da0:	f7ff f8f2 	bl	1f88 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2da4:	4639      	mov	r1, r7
    2da6:	f104 0052 	add.w	r0, r4, #82	; 0x52
    2daa:	f7ff f8ed 	bl	1f88 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2dae:	2107      	movs	r1, #7
    2db0:	f107 0070 	add.w	r0, r7, #112	; 0x70
    2db4:	f7ff f97e 	bl	20b4 <atomic_test_bit>
    2db8:	b148      	cbz	r0, 2dce <le_enh_conn_complete+0x112>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    2dba:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    2dbe:	2200      	movs	r2, #0
    2dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2dc4:	4313      	orrs	r3, r2
    2dc6:	d002      	beq.n	2dce <le_enh_conn_complete+0x112>
			set_advertise_enable(true);
    2dc8:	4630      	mov	r0, r6
    2dca:	f7ff fa65 	bl	2298 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    2dce:	2103      	movs	r1, #3
    2dd0:	4620      	mov	r0, r4
    2dd2:	f001 f94b 	bl	406c <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    2dd6:	7a63      	ldrb	r3, [r4, #9]
    2dd8:	2b03      	cmp	r3, #3
    2dda:	d118      	bne.n	2e0e <le_enh_conn_complete+0x152>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2ddc:	78eb      	ldrb	r3, [r5, #3]
    2dde:	b123      	cbz	r3, 2dea <le_enh_conn_complete+0x12e>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    2de0:	4b23      	ldr	r3, [pc, #140]	; (2e70 <le_enh_conn_complete+0x1b4>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2de2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    2de6:	0719      	lsls	r1, r3, #28
    2de8:	d518      	bpl.n	2e1c <le_enh_conn_complete+0x160>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    2dea:	2102      	movs	r1, #2
    2dec:	f242 0016 	movw	r0, #8214	; 0x2016
    2df0:	f7ff f96e 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2df4:	4605      	mov	r5, r0
    2df6:	b188      	cbz	r0, 2e1c <le_enh_conn_complete+0x160>
	cp = net_buf_add(buf, sizeof(*cp));
    2df8:	2102      	movs	r1, #2
    2dfa:	3008      	adds	r0, #8
    2dfc:	f00f fc46 	bl	1268c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2e00:	8823      	ldrh	r3, [r4, #0]
    2e02:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    2e04:	4629      	mov	r1, r5
    2e06:	f242 0016 	movw	r0, #8214	; 0x2016
    2e0a:	f7ff fb23 	bl	2454 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    2e0e:	4620      	mov	r0, r4
    2e10:	f001 fa76 	bl	4300 <bt_conn_unref>
	bt_le_scan_update(false);
    2e14:	2000      	movs	r0, #0
    2e16:	f7ff fba5 	bl	2564 <bt_le_scan_update>
    2e1a:	e762      	b.n	2ce2 <le_enh_conn_complete+0x26>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    2e1c:	4d14      	ldr	r5, [pc, #80]	; (2e70 <le_enh_conn_complete+0x1b4>)
    2e1e:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    2e22:	07d2      	lsls	r2, r2, #31
    2e24:	d508      	bpl.n	2e38 <le_enh_conn_complete+0x17c>
		err = hci_le_set_phy(conn);
    2e26:	4620      	mov	r0, r4
    2e28:	f7ff fefe 	bl	2c28 <hci_le_set_phy.isra.28>
		if (!err) {
    2e2c:	b920      	cbnz	r0, 2e38 <le_enh_conn_complete+0x17c>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2e2e:	2180      	movs	r1, #128	; 0x80
    2e30:	1d20      	adds	r0, r4, #4
    2e32:	f7ff f8ac 	bl	1f8e <atomic_or>
    2e36:	e7ea      	b.n	2e0e <le_enh_conn_complete+0x152>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2e38:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2e3c:	069b      	lsls	r3, r3, #26
    2e3e:	d506      	bpl.n	2e4e <le_enh_conn_complete+0x192>
		err = hci_le_set_data_len(conn);
    2e40:	4620      	mov	r0, r4
    2e42:	f7ff ff11 	bl	2c68 <hci_le_set_data_len.isra.29>
		if (!err) {
    2e46:	b910      	cbnz	r0, 2e4e <le_enh_conn_complete+0x192>
    2e48:	f44f 7180 	mov.w	r1, #256	; 0x100
    2e4c:	e7f0      	b.n	2e30 <le_enh_conn_complete+0x174>
	update_conn_param(conn);
    2e4e:	4620      	mov	r0, r4
    2e50:	f7ff f8c0 	bl	1fd4 <update_conn_param>
    2e54:	e7db      	b.n	2e0e <le_enh_conn_complete+0x152>
    2e56:	bf00      	nop
    2e58:	20003ad0 	.word	0x20003ad0
    2e5c:	000142a9 	.word	0x000142a9
    2e60:	00014ff8 	.word	0x00014ff8
    2e64:	00014845 	.word	0x00014845
    2e68:	00015047 	.word	0x00015047
    2e6c:	0001517d 	.word	0x0001517d
    2e70:	20003a60 	.word	0x20003a60

00002e74 <le_conn_param_neg_reply>:
{
    2e74:	b570      	push	{r4, r5, r6, lr}
    2e76:	4606      	mov	r6, r0
    2e78:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    2e7a:	f242 0021 	movw	r0, #8225	; 0x2021
    2e7e:	2103      	movs	r1, #3
    2e80:	f7ff f926 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2e84:	4604      	mov	r4, r0
    2e86:	b160      	cbz	r0, 2ea2 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    2e88:	2103      	movs	r1, #3
    2e8a:	3008      	adds	r0, #8
    2e8c:	f00f fbfe 	bl	1268c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    2e90:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    2e92:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2e94:	4621      	mov	r1, r4
    2e96:	f242 0021 	movw	r0, #8225	; 0x2021
}
    2e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2e9e:	f7ff bad9 	b.w	2454 <bt_hci_cmd_send>
}
    2ea2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2ea6:	bd70      	pop	{r4, r5, r6, pc}

00002ea8 <hci_tx_thread>:
{
    2ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    2eac:	f8df a148 	ldr.w	sl, [pc, #328]	; 2ff8 <hci_tx_thread+0x150>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2eb0:	4d4f      	ldr	r5, [pc, #316]	; (2ff0 <hci_tx_thread+0x148>)
{
    2eb2:	b085      	sub	sp, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    2eb4:	f89a 300d 	ldrb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2eb8:	484e      	ldr	r0, [pc, #312]	; (2ff4 <hci_tx_thread+0x14c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2eba:	f36f 1307 	bfc	r3, #4, #4
    2ebe:	f88a 300d 	strb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2ec2:	f001 f857 	bl	3f74 <bt_conn_prepare_events>
    2ec6:	f100 0901 	add.w	r9, r0, #1

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    2eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ece:	4649      	mov	r1, r9
    2ed0:	4849      	ldr	r0, [pc, #292]	; (2ff8 <hci_tx_thread+0x150>)
    2ed2:	f011 f873 	bl	13fbc <_impl_k_poll>
		BT_ASSERT(err == 0);
    2ed6:	b948      	cbnz	r0, 2eec <hci_tx_thread+0x44>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2ed8:	4c48      	ldr	r4, [pc, #288]	; (2ffc <hci_tx_thread+0x154>)
    2eda:	4e47      	ldr	r6, [pc, #284]	; (2ff8 <hci_tx_thread+0x150>)
    2edc:	f104 0bc4 	add.w	fp, r4, #196	; 0xc4
	for (; count; ev++, count--) {
    2ee0:	f1b9 0f00 	cmp.w	r9, #0
    2ee4:	d111      	bne.n	2f0a <hci_tx_thread+0x62>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    2ee6:	f010 fbe9 	bl	136bc <_impl_k_yield>
    2eea:	e7e3      	b.n	2eb4 <hci_tx_thread+0xc>
		BT_ASSERT(err == 0);
    2eec:	4b40      	ldr	r3, [pc, #256]	; (2ff0 <hci_tx_thread+0x148>)
    2eee:	9301      	str	r3, [sp, #4]
    2ef0:	9300      	str	r3, [sp, #0]
    2ef2:	4a43      	ldr	r2, [pc, #268]	; (3000 <hci_tx_thread+0x158>)
    2ef4:	4b43      	ldr	r3, [pc, #268]	; (3004 <hci_tx_thread+0x15c>)
    2ef6:	4944      	ldr	r1, [pc, #272]	; (3008 <hci_tx_thread+0x160>)
    2ef8:	4844      	ldr	r0, [pc, #272]	; (300c <hci_tx_thread+0x164>)
	BT_ASSERT(buf);
    2efa:	f7fe f847 	bl	f8c <printk>
    2efe:	4040      	eors	r0, r0
    2f00:	f380 8811 	msr	BASEPRI, r0
    2f04:	f04f 0004 	mov.w	r0, #4
    2f08:	df02      	svc	2
		switch (ev->state) {
    2f0a:	7b73      	ldrb	r3, [r6, #13]
    2f0c:	091b      	lsrs	r3, r3, #4
    2f0e:	2b01      	cmp	r3, #1
    2f10:	d952      	bls.n	2fb8 <hci_tx_thread+0x110>
    2f12:	2b04      	cmp	r3, #4
    2f14:	d162      	bne.n	2fdc <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
    2f16:	7b37      	ldrb	r7, [r6, #12]
    2f18:	2f00      	cmp	r7, #0
    2f1a:	d151      	bne.n	2fc0 <hci_tx_thread+0x118>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2f1c:	4639      	mov	r1, r7
    2f1e:	4658      	mov	r0, fp
    2f20:	f00f fb58 	bl	125d4 <net_buf_get>
	BT_ASSERT(buf);
    2f24:	4680      	mov	r8, r0
    2f26:	b938      	cbnz	r0, 2f38 <hci_tx_thread+0x90>
    2f28:	4b31      	ldr	r3, [pc, #196]	; (2ff0 <hci_tx_thread+0x148>)
    2f2a:	9301      	str	r3, [sp, #4]
    2f2c:	9300      	str	r3, [sp, #0]
    2f2e:	4a34      	ldr	r2, [pc, #208]	; (3000 <hci_tx_thread+0x158>)
    2f30:	4b37      	ldr	r3, [pc, #220]	; (3010 <hci_tx_thread+0x168>)
    2f32:	4935      	ldr	r1, [pc, #212]	; (3008 <hci_tx_thread+0x160>)
    2f34:	4837      	ldr	r0, [pc, #220]	; (3014 <hci_tx_thread+0x16c>)
    2f36:	e7e0      	b.n	2efa <hci_tx_thread+0x52>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2f38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2f3c:	4836      	ldr	r0, [pc, #216]	; (3018 <hci_tx_thread+0x170>)
    2f3e:	f010 fc24 	bl	1378a <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    2f42:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    2f46:	b16b      	cbz	r3, 2f64 <hci_tx_thread+0xbc>
		BT_ERR("Uncleared pending sent_cmd");
    2f48:	4b31      	ldr	r3, [pc, #196]	; (3010 <hci_tx_thread+0x168>)
    2f4a:	4a2d      	ldr	r2, [pc, #180]	; (3000 <hci_tx_thread+0x158>)
    2f4c:	492e      	ldr	r1, [pc, #184]	; (3008 <hci_tx_thread+0x160>)
    2f4e:	9501      	str	r5, [sp, #4]
    2f50:	9500      	str	r5, [sp, #0]
    2f52:	4832      	ldr	r0, [pc, #200]	; (301c <hci_tx_thread+0x174>)
    2f54:	f7fe f81a 	bl	f8c <printk>
		net_buf_unref(bt_dev.sent_cmd);
    2f58:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2f5c:	f00f fb64 	bl	12628 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2f60:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    2f64:	4640      	mov	r0, r8
    2f66:	f00f fb8d 	bl	12684 <net_buf_ref>
    2f6a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    2f6e:	4640      	mov	r0, r8
    2f70:	f7ff fa68 	bl	2444 <bt_send>
	if (err) {
    2f74:	b300      	cbz	r0, 2fb8 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    2f76:	4b26      	ldr	r3, [pc, #152]	; (3010 <hci_tx_thread+0x168>)
    2f78:	4a21      	ldr	r2, [pc, #132]	; (3000 <hci_tx_thread+0x158>)
    2f7a:	4923      	ldr	r1, [pc, #140]	; (3008 <hci_tx_thread+0x160>)
    2f7c:	9001      	str	r0, [sp, #4]
    2f7e:	9502      	str	r5, [sp, #8]
    2f80:	9500      	str	r5, [sp, #0]
    2f82:	4827      	ldr	r0, [pc, #156]	; (3020 <hci_tx_thread+0x178>)
    2f84:	f7fe f802 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2f88:	4823      	ldr	r0, [pc, #140]	; (3018 <hci_tx_thread+0x170>)
    2f8a:	f010 fbd6 	bl	1373a <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    2f8e:	4640      	mov	r0, r8
    2f90:	f00f fa8c 	bl	124ac <net_buf_id>
    2f94:	4b23      	ldr	r3, [pc, #140]	; (3024 <hci_tx_thread+0x17c>)
    2f96:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2f9a:	2200      	movs	r2, #0
    2f9c:	211f      	movs	r1, #31
    2f9e:	8840      	ldrh	r0, [r0, #2]
    2fa0:	f7ff f826 	bl	1ff0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    2fa4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2fa8:	f00f fb3e 	bl	12628 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2fac:	2300      	movs	r3, #0
		net_buf_unref(buf);
    2fae:	4640      	mov	r0, r8
		bt_dev.sent_cmd = NULL;
    2fb0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    2fb4:	f00f fb38 	bl	12628 <net_buf_unref>
	for (; count; ev++, count--) {
    2fb8:	3614      	adds	r6, #20
    2fba:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    2fbe:	e78f      	b.n	2ee0 <hci_tx_thread+0x38>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    2fc0:	2f01      	cmp	r7, #1
    2fc2:	d104      	bne.n	2fce <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    2fc4:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    2fc6:	3818      	subs	r0, #24
    2fc8:	f000 fefe 	bl	3dc8 <bt_conn_notify_tx>
    2fcc:	e7f4      	b.n	2fb8 <hci_tx_thread+0x110>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    2fce:	2f02      	cmp	r7, #2
    2fd0:	d1f2      	bne.n	2fb8 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    2fd2:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    2fd4:	3828      	subs	r0, #40	; 0x28
    2fd6:	f001 fb5b 	bl	4690 <bt_conn_process_tx>
    2fda:	e7ed      	b.n	2fb8 <hci_tx_thread+0x110>
		switch (ev->state) {
    2fdc:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2fde:	9502      	str	r5, [sp, #8]
    2fe0:	9500      	str	r5, [sp, #0]
    2fe2:	4b11      	ldr	r3, [pc, #68]	; (3028 <hci_tx_thread+0x180>)
    2fe4:	4a11      	ldr	r2, [pc, #68]	; (302c <hci_tx_thread+0x184>)
    2fe6:	4908      	ldr	r1, [pc, #32]	; (3008 <hci_tx_thread+0x160>)
    2fe8:	4811      	ldr	r0, [pc, #68]	; (3030 <hci_tx_thread+0x188>)
    2fea:	f7fd ffcf 	bl	f8c <printk>
    2fee:	e7e3      	b.n	2fb8 <hci_tx_thread+0x110>
    2ff0:	000142a9 	.word	0x000142a9
    2ff4:	20003b4c 	.word	0x20003b4c
    2ff8:	20003b38 	.word	0x20003b38
    2ffc:	20003a60 	.word	0x20003a60
    3000:	00014ff8 	.word	0x00014ff8
    3004:	00014907 	.word	0x00014907
    3008:	00015047 	.word	0x00015047
    300c:	000150d2 	.word	0x000150d2
    3010:	000148ef 	.word	0x000148ef
    3014:	000150fc 	.word	0x000150fc
    3018:	20003b08 	.word	0x20003b08
    301c:	00015121 	.word	0x00015121
    3020:	00014a81 	.word	0x00014a81
    3024:	2000027c 	.word	0x2000027c
    3028:	000148f8 	.word	0x000148f8
    302c:	00015040 	.word	0x00015040
    3030:	0001514c 	.word	0x0001514c

00003034 <bt_recv>:
{
    3034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    3038:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    303a:	2b01      	cmp	r3, #1
{
    303c:	b095      	sub	sp, #84	; 0x54
    303e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    3040:	d040      	beq.n	30c4 <bt_recv+0x90>
    3042:	2b03      	cmp	r3, #3
    3044:	f040 8338 	bne.w	36b8 <bt_recv+0x684>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    3048:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    304a:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    304c:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    304e:	f3c6 030b 	ubfx	r3, r6, #0, #12
    3052:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    3054:	23ff      	movs	r3, #255	; 0xff
    3056:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    3058:	2104      	movs	r1, #4
    305a:	3008      	adds	r0, #8
    305c:	f00f fb35 	bl	126ca <net_buf_simple_pull>
	if (buf->len != len) {
    3060:	89a2      	ldrh	r2, [r4, #12]
    3062:	4295      	cmp	r5, r2
    3064:	d00e      	beq.n	3084 <bt_recv+0x50>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    3066:	4ba0      	ldr	r3, [pc, #640]	; (32e8 <bt_recv+0x2b4>)
    3068:	9303      	str	r3, [sp, #12]
    306a:	9201      	str	r2, [sp, #4]
    306c:	9300      	str	r3, [sp, #0]
    306e:	9502      	str	r5, [sp, #8]
    3070:	4b9e      	ldr	r3, [pc, #632]	; (32ec <bt_recv+0x2b8>)
    3072:	4a9f      	ldr	r2, [pc, #636]	; (32f0 <bt_recv+0x2bc>)
    3074:	499f      	ldr	r1, [pc, #636]	; (32f4 <bt_recv+0x2c0>)
    3076:	48a0      	ldr	r0, [pc, #640]	; (32f8 <bt_recv+0x2c4>)
    3078:	f7fd ff88 	bl	f8c <printk>
	net_buf_unref(buf);
    307c:	4620      	mov	r0, r4
    307e:	f00f fad3 	bl	12628 <net_buf_unref>
    3082:	e01b      	b.n	30bc <bt_recv+0x88>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    3084:	8ae0      	ldrh	r0, [r4, #22]
    3086:	f001 f8cd 	bl	4224 <bt_conn_lookup_handle>
	if (!conn) {
    308a:	4605      	mov	r5, r0
    308c:	b958      	cbnz	r0, 30a6 <bt_recv+0x72>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    308e:	4b96      	ldr	r3, [pc, #600]	; (32e8 <bt_recv+0x2b4>)
    3090:	8ae2      	ldrh	r2, [r4, #22]
    3092:	9302      	str	r3, [sp, #8]
    3094:	9201      	str	r2, [sp, #4]
    3096:	9300      	str	r3, [sp, #0]
    3098:	4a95      	ldr	r2, [pc, #596]	; (32f0 <bt_recv+0x2bc>)
    309a:	4b94      	ldr	r3, [pc, #592]	; (32ec <bt_recv+0x2b8>)
    309c:	4995      	ldr	r1, [pc, #596]	; (32f4 <bt_recv+0x2c0>)
    309e:	4897      	ldr	r0, [pc, #604]	; (32fc <bt_recv+0x2c8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    30a0:	f7fd ff74 	bl	f8c <printk>
    30a4:	e7ea      	b.n	307c <bt_recv+0x48>
	acl(buf)->id = bt_conn_get_id(conn);
    30a6:	f001 fb63 	bl	4770 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    30aa:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    30ac:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    30ae:	4621      	mov	r1, r4
    30b0:	4628      	mov	r0, r5
    30b2:	f000 fdc9 	bl	3c48 <bt_conn_recv>
	bt_conn_unref(conn);
    30b6:	4628      	mov	r0, r5
    30b8:	f001 f922 	bl	4300 <bt_conn_unref>
		return 0;
    30bc:	2000      	movs	r0, #0
}
    30be:	b015      	add	sp, #84	; 0x54
    30c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    30c4:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    30c6:	7832      	ldrb	r2, [r6, #0]
    30c8:	2a13      	cmp	r2, #19
    30ca:	f200 8305 	bhi.w	36d8 <bt_recv+0x6a4>
    30ce:	4093      	lsls	r3, r2
    30d0:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    30d4:	f000 8300 	beq.w	36d8 <bt_recv+0x6a4>
    30d8:	4b83      	ldr	r3, [pc, #524]	; (32e8 <bt_recv+0x2b4>)
    30da:	9301      	str	r3, [sp, #4]
    30dc:	9300      	str	r3, [sp, #0]
    30de:	4a84      	ldr	r2, [pc, #528]	; (32f0 <bt_recv+0x2bc>)
    30e0:	4b87      	ldr	r3, [pc, #540]	; (3300 <bt_recv+0x2cc>)
    30e2:	4984      	ldr	r1, [pc, #528]	; (32f4 <bt_recv+0x2c0>)
    30e4:	4887      	ldr	r0, [pc, #540]	; (3304 <bt_recv+0x2d0>)
    30e6:	f7fd ff51 	bl	f8c <printk>
    30ea:	4040      	eors	r0, r0
    30ec:	f380 8811 	msr	BASEPRI, r0
    30f0:	f04f 0004 	mov.w	r0, #4
    30f4:	df02      	svc	2
    30f6:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    30f8:	783e      	ldrb	r6, [r7, #0]
    30fa:	2e00      	cmp	r6, #0
    30fc:	d1be      	bne.n	307c <bt_recv+0x48>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    30fe:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    3102:	4640      	mov	r0, r8
    3104:	f001 f88e 	bl	4224 <bt_conn_lookup_handle>
	if (!conn) {
    3108:	4605      	mov	r5, r0
    310a:	b9c8      	cbnz	r0, 3140 <bt_recv+0x10c>
		BT_ERR("Unable to look up conn with handle %u", handle);
    310c:	4b76      	ldr	r3, [pc, #472]	; (32e8 <bt_recv+0x2b4>)
    310e:	9302      	str	r3, [sp, #8]
    3110:	e88d 0108 	stmia.w	sp, {r3, r8}
    3114:	4a76      	ldr	r2, [pc, #472]	; (32f0 <bt_recv+0x2bc>)
    3116:	4b7c      	ldr	r3, [pc, #496]	; (3308 <bt_recv+0x2d4>)
    3118:	4976      	ldr	r1, [pc, #472]	; (32f4 <bt_recv+0x2c0>)
    311a:	487c      	ldr	r0, [pc, #496]	; (330c <bt_recv+0x2d8>)
    311c:	f7fd ff36 	bl	f8c <printk>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3120:	2107      	movs	r1, #7
    3122:	487b      	ldr	r0, [pc, #492]	; (3310 <bt_recv+0x2dc>)
    3124:	f7fe ffc6 	bl	20b4 <atomic_test_bit>
    3128:	2800      	cmp	r0, #0
    312a:	d0a7      	beq.n	307c <bt_recv+0x48>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    312c:	2106      	movs	r1, #6
    312e:	4878      	ldr	r0, [pc, #480]	; (3310 <bt_recv+0x2dc>)
    3130:	f7fe ffc0 	bl	20b4 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3134:	2800      	cmp	r0, #0
    3136:	d1a1      	bne.n	307c <bt_recv+0x48>
		set_advertise_enable(true);
    3138:	2001      	movs	r0, #1
    313a:	f7ff f8ad 	bl	2298 <set_advertise_enable>
    313e:	e79d      	b.n	307c <bt_recv+0x48>
	conn->err = evt->reason;
    3140:	78fb      	ldrb	r3, [r7, #3]
    3142:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    3144:	4973      	ldr	r1, [pc, #460]	; (3314 <bt_recv+0x2e0>)
    3146:	4874      	ldr	r0, [pc, #464]	; (3318 <bt_recv+0x2e4>)
    3148:	f010 fca8 	bl	13a9c <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    314c:	4631      	mov	r1, r6
    314e:	4628      	mov	r0, r5
    3150:	f000 ff8c 	bl	406c <bt_conn_set_state>
	conn->handle = 0;
    3154:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    3156:	78ae      	ldrb	r6, [r5, #2]
    3158:	b10e      	cbz	r6, 315e <bt_recv+0x12a>
	bt_conn_unref(conn);
    315a:	4628      	mov	r0, r5
    315c:	e086      	b.n	326c <bt_recv+0x238>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    315e:	4631      	mov	r1, r6
    3160:	1d28      	adds	r0, r5, #4
    3162:	f7fe ffa7 	bl	20b4 <atomic_test_bit>
    3166:	b130      	cbz	r0, 3176 <bt_recv+0x142>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    3168:	4628      	mov	r0, r5
    316a:	2101      	movs	r1, #1
    316c:	f000 ff7e 	bl	406c <bt_conn_set_state>
		bt_le_scan_update(false);
    3170:	4630      	mov	r0, r6
    3172:	f7ff f9f7 	bl	2564 <bt_le_scan_update>
	bt_conn_unref(conn);
    3176:	4628      	mov	r0, r5
    3178:	f001 f8c2 	bl	4300 <bt_conn_unref>
    317c:	e7d0      	b.n	3120 <bt_recv+0xec>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    317e:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    3180:	2101      	movs	r1, #1
    3182:	4628      	mov	r0, r5
    3184:	f00f faa1 	bl	126ca <net_buf_simple_pull>
	switch (evt->subevent) {
    3188:	7836      	ldrb	r6, [r6, #0]
    318a:	1e73      	subs	r3, r6, #1
    318c:	2b0b      	cmp	r3, #11
    318e:	f200 8281 	bhi.w	3694 <bt_recv+0x660>
    3192:	e8df f013 	tbh	[pc, r3, lsl #1]
    3196:	000c      	.short	0x000c
    3198:	00430199 	.word	0x00430199
    319c:	027f006e 	.word	0x027f006e
    31a0:	012800cb 	.word	0x012800cb
    31a4:	018a016a 	.word	0x018a016a
    31a8:	027f0041 	.word	0x027f0041
    31ac:	0141      	.short	0x0141
    31ae:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    31b0:	780b      	ldrb	r3, [r1, #0]
    31b2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	enh.handle         = evt->handle;
    31b6:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    31ba:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
	enh.role           = evt->role;
    31be:	78cb      	ldrb	r3, [r1, #3]
    31c0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	enh.interval       = evt->interval;
    31c4:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    31c8:	f8ad 3047 	strh.w	r3, [sp, #71]	; 0x47
	enh.latency        = evt->latency;
    31cc:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    31d0:	f8ad 3049 	strh.w	r3, [sp, #73]	; 0x49
	enh.supv_timeout   = evt->supv_timeout;
    31d4:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    31d8:	f8ad 304b 	strh.w	r3, [sp, #75]	; 0x4b
	enh.clock_accuracy = evt->clock_accuracy;
    31dc:	7c4b      	ldrb	r3, [r1, #17]
    31de:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    31e2:	3104      	adds	r1, #4
    31e4:	a80d      	add	r0, sp, #52	; 0x34
    31e6:	f7fe fecf 	bl	1f88 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    31ea:	2500      	movs	r5, #0
    31ec:	2206      	movs	r2, #6
    31ee:	a908      	add	r1, sp, #32
    31f0:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
    31f4:	9508      	str	r5, [sp, #32]
    31f6:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
    31fa:	f7fe fcff 	bl	1bfc <memcpy>
    31fe:	2206      	movs	r2, #6
    3200:	a90a      	add	r1, sp, #40	; 0x28
    3202:	f10d 0041 	add.w	r0, sp, #65	; 0x41
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    3206:	950a      	str	r5, [sp, #40]	; 0x28
    3208:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    320c:	f7fe fcf6 	bl	1bfc <memcpy>
	le_enh_conn_complete(&enh);
    3210:	a80c      	add	r0, sp, #48	; 0x30
		le_enh_conn_complete((void *)buf->data);
    3212:	f7ff fd53 	bl	2cbc <le_enh_conn_complete>
    3216:	e731      	b.n	307c <bt_recv+0x48>
    3218:	68a0      	ldr	r0, [r4, #8]
    321a:	e7fa      	b.n	3212 <bt_recv+0x1de>
    321c:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    321e:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    3222:	4638      	mov	r0, r7
    3224:	f000 fffe 	bl	4224 <bt_conn_lookup_handle>
	if (!conn) {
    3228:	4606      	mov	r6, r0
    322a:	b940      	cbnz	r0, 323e <bt_recv+0x20a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    322c:	4b2e      	ldr	r3, [pc, #184]	; (32e8 <bt_recv+0x2b4>)
    322e:	9302      	str	r3, [sp, #8]
    3230:	e88d 0088 	stmia.w	sp, {r3, r7}
    3234:	4b39      	ldr	r3, [pc, #228]	; (331c <bt_recv+0x2e8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3236:	4a2e      	ldr	r2, [pc, #184]	; (32f0 <bt_recv+0x2bc>)
    3238:	492e      	ldr	r1, [pc, #184]	; (32f4 <bt_recv+0x2c0>)
    323a:	4839      	ldr	r0, [pc, #228]	; (3320 <bt_recv+0x2ec>)
    323c:	e730      	b.n	30a0 <bt_recv+0x6c>
	if (!evt->status) {
    323e:	782b      	ldrb	r3, [r5, #0]
    3240:	b99b      	cbnz	r3, 326a <bt_recv+0x236>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3242:	792a      	ldrb	r2, [r5, #4]
    3244:	78eb      	ldrb	r3, [r5, #3]
    3246:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    324a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    324e:	79aa      	ldrb	r2, [r5, #6]
    3250:	796b      	ldrb	r3, [r5, #5]
    3252:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3256:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    325a:	79eb      	ldrb	r3, [r5, #7]
    325c:	7a2a      	ldrb	r2, [r5, #8]
    325e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3262:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    3266:	f000 fcb3 	bl	3bd0 <notify_le_param_updated>
	bt_conn_unref(conn);
    326a:	4630      	mov	r0, r6
	bt_conn_unref(conn);
    326c:	f001 f848 	bl	4300 <bt_conn_unref>
    3270:	e704      	b.n	307c <bt_recv+0x48>
    3272:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3274:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    3278:	4638      	mov	r0, r7
    327a:	f000 ffd3 	bl	4224 <bt_conn_lookup_handle>
	if (!conn) {
    327e:	4605      	mov	r5, r0
    3280:	b928      	cbnz	r0, 328e <bt_recv+0x25a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3282:	4b19      	ldr	r3, [pc, #100]	; (32e8 <bt_recv+0x2b4>)
    3284:	9302      	str	r3, [sp, #8]
    3286:	e88d 0088 	stmia.w	sp, {r3, r7}
    328a:	4b26      	ldr	r3, [pc, #152]	; (3324 <bt_recv+0x2f0>)
    328c:	e7d3      	b.n	3236 <bt_recv+0x202>
	if (!evt->status) {
    328e:	7833      	ldrb	r3, [r6, #0]
    3290:	b923      	cbnz	r3, 329c <bt_recv+0x268>
		memcpy(conn->le.features, evt->features,
    3292:	2208      	movs	r2, #8
    3294:	1cf1      	adds	r1, r6, #3
    3296:	3064      	adds	r0, #100	; 0x64
    3298:	f7fe fcb0 	bl	1bfc <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    329c:	4e22      	ldr	r6, [pc, #136]	; (3328 <bt_recv+0x2f4>)
    329e:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    32a2:	07d2      	lsls	r2, r2, #31
    32a4:	d50c      	bpl.n	32c0 <bt_recv+0x28c>
    32a6:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
    32aa:	07db      	lsls	r3, r3, #31
    32ac:	d508      	bpl.n	32c0 <bt_recv+0x28c>
		err = hci_le_set_phy(conn);
    32ae:	4628      	mov	r0, r5
    32b0:	f7ff fcba 	bl	2c28 <hci_le_set_phy.isra.28>
		if (!err) {
    32b4:	b920      	cbnz	r0, 32c0 <bt_recv+0x28c>
    32b6:	2180      	movs	r1, #128	; 0x80
    32b8:	1d28      	adds	r0, r5, #4
    32ba:	f7fe fe68 	bl	1f8e <atomic_or>
    32be:	e74c      	b.n	315a <bt_recv+0x126>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    32c0:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    32c4:	069f      	lsls	r7, r3, #26
    32c6:	f140 80a3 	bpl.w	3410 <bt_recv+0x3dc>
    32ca:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    32ce:	069e      	lsls	r6, r3, #26
    32d0:	f140 809e 	bpl.w	3410 <bt_recv+0x3dc>
		err = hci_le_set_data_len(conn);
    32d4:	4628      	mov	r0, r5
    32d6:	f7ff fcc7 	bl	2c68 <hci_le_set_data_len.isra.29>
		if (!err) {
    32da:	2800      	cmp	r0, #0
    32dc:	f040 8098 	bne.w	3410 <bt_recv+0x3dc>
    32e0:	f44f 7180 	mov.w	r1, #256	; 0x100
    32e4:	e7e8      	b.n	32b8 <bt_recv+0x284>
    32e6:	bf00      	nop
    32e8:	000142a9 	.word	0x000142a9
    32ec:	0001480e 	.word	0x0001480e
    32f0:	00014ff8 	.word	0x00014ff8
    32f4:	00015047 	.word	0x00015047
    32f8:	00014d28 	.word	0x00014d28
    32fc:	00014d5c 	.word	0x00014d5c
    3300:	000148e5 	.word	0x000148e5
    3304:	00014e87 	.word	0x00014e87
    3308:	00014830 	.word	0x00014830
    330c:	00014d8e 	.word	0x00014d8e
    3310:	20003ad0 	.word	0x20003ad0
    3314:	00014dc4 	.word	0x00014dc4
    3318:	00001f4d 	.word	0x00001f4d
    331c:	000148ae 	.word	0x000148ae
    3320:	00014dc8 	.word	0x00014dc8
    3324:	0001485a 	.word	0x0001485a
    3328:	20003a60 	.word	0x20003a60
    332c:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    332e:	78d9      	ldrb	r1, [r3, #3]
    3330:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    3332:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3334:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3338:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    333c:	7959      	ldrb	r1, [r3, #5]
    333e:	791a      	ldrb	r2, [r3, #4]
    3340:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3344:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	param.latency = sys_le16_to_cpu(evt->latency);
    3348:	799a      	ldrb	r2, [r3, #6]
    334a:	79d9      	ldrb	r1, [r3, #7]
    334c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3350:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3354:	7a1a      	ldrb	r2, [r3, #8]
    3356:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    3358:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    335a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    335e:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3360:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	conn = bt_conn_lookup_handle(handle);
    3364:	f000 ff5e 	bl	4224 <bt_conn_lookup_handle>
	if (!conn) {
    3368:	4680      	mov	r8, r0
    336a:	b970      	cbnz	r0, 338a <bt_recv+0x356>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    336c:	4bbb      	ldr	r3, [pc, #748]	; (365c <bt_recv+0x628>)
    336e:	9302      	str	r3, [sp, #8]
    3370:	e88d 0028 	stmia.w	sp, {r3, r5}
    3374:	4aba      	ldr	r2, [pc, #744]	; (3660 <bt_recv+0x62c>)
    3376:	4bbb      	ldr	r3, [pc, #748]	; (3664 <bt_recv+0x630>)
    3378:	49bb      	ldr	r1, [pc, #748]	; (3668 <bt_recv+0x634>)
    337a:	48bc      	ldr	r0, [pc, #752]	; (366c <bt_recv+0x638>)
    337c:	f7fd fe06 	bl	f8c <printk>
		return le_conn_param_neg_reply(handle,
    3380:	2102      	movs	r1, #2
    3382:	4628      	mov	r0, r5
    3384:	f7ff fd76 	bl	2e74 <le_conn_param_neg_reply>
    3388:	e678      	b.n	307c <bt_recv+0x48>
	if (!le_param_req(conn, &param)) {
    338a:	a90c      	add	r1, sp, #48	; 0x30
    338c:	f000 fc34 	bl	3bf8 <le_param_req>
    3390:	b928      	cbnz	r0, 339e <bt_recv+0x36a>
		err = le_conn_param_neg_reply(handle,
    3392:	211e      	movs	r1, #30
    3394:	4628      	mov	r0, r5
    3396:	f7ff fd6d 	bl	2e74 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    339a:	4640      	mov	r0, r8
    339c:	e766      	b.n	326c <bt_recv+0x238>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    339e:	210e      	movs	r1, #14
    33a0:	f242 0020 	movw	r0, #8224	; 0x2020
    33a4:	f7fe fe94 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    33a8:	4606      	mov	r6, r0
    33aa:	2800      	cmp	r0, #0
    33ac:	d0f5      	beq.n	339a <bt_recv+0x366>
	cp = net_buf_add(buf, sizeof(*cp));
    33ae:	210e      	movs	r1, #14
    33b0:	3008      	adds	r0, #8
    33b2:	f00f f96b 	bl	1268c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    33b6:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    33b8:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    33ba:	2100      	movs	r1, #0
    33bc:	f7fe fc4a 	bl	1c54 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    33c0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    33c4:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    33c6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    33ca:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    33cc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    33d0:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    33d2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cp->handle = sys_cpu_to_le16(handle);
    33d6:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    33d8:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    33da:	4631      	mov	r1, r6
    33dc:	f242 0020 	movw	r0, #8224	; 0x2020
    33e0:	f7ff f838 	bl	2454 <bt_hci_cmd_send>
    33e4:	e7d9      	b.n	339a <bt_recv+0x366>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    33e6:	68a3      	ldr	r3, [r4, #8]
    33e8:	881e      	ldrh	r6, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    33ea:	4630      	mov	r0, r6
    33ec:	f000 ff1a 	bl	4224 <bt_conn_lookup_handle>
	if (!conn) {
    33f0:	4605      	mov	r5, r0
    33f2:	b928      	cbnz	r0, 3400 <bt_recv+0x3cc>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    33f4:	4b99      	ldr	r3, [pc, #612]	; (365c <bt_recv+0x628>)
    33f6:	9302      	str	r3, [sp, #8]
    33f8:	e88d 0048 	stmia.w	sp, {r3, r6}
    33fc:	4b9c      	ldr	r3, [pc, #624]	; (3670 <bt_recv+0x63c>)
    33fe:	e71a      	b.n	3236 <bt_recv+0x202>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3400:	f46f 7180 	mvn.w	r1, #256	; 0x100
    3404:	3004      	adds	r0, #4
    3406:	f7fe fdd3 	bl	1fb0 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    340a:	05c0      	lsls	r0, r0, #23
    340c:	f57f aea5 	bpl.w	315a <bt_recv+0x126>
	update_conn_param(conn);
    3410:	4628      	mov	r0, r5
    3412:	f7fe fddf 	bl	1fd4 <update_conn_param>
    3416:	e6a0      	b.n	315a <bt_recv+0x126>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3418:	68a3      	ldr	r3, [r4, #8]
    341a:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    341e:	4630      	mov	r0, r6
    3420:	f000 ff00 	bl	4224 <bt_conn_lookup_handle>
	if (!conn) {
    3424:	4605      	mov	r5, r0
    3426:	b928      	cbnz	r0, 3434 <bt_recv+0x400>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3428:	4b8c      	ldr	r3, [pc, #560]	; (365c <bt_recv+0x628>)
    342a:	9302      	str	r3, [sp, #8]
    342c:	e88d 0048 	stmia.w	sp, {r3, r6}
    3430:	4b90      	ldr	r3, [pc, #576]	; (3674 <bt_recv+0x640>)
    3432:	e700      	b.n	3236 <bt_recv+0x202>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3434:	1d06      	adds	r6, r0, #4
    3436:	f06f 0180 	mvn.w	r1, #128	; 0x80
    343a:	4630      	mov	r0, r6
    343c:	f7fe fdb8 	bl	1fb0 <atomic_and>
    3440:	0601      	lsls	r1, r0, #24
    3442:	f57f ae8a 	bpl.w	315a <bt_recv+0x126>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3446:	4b8c      	ldr	r3, [pc, #560]	; (3678 <bt_recv+0x644>)
    3448:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    344c:	069a      	lsls	r2, r3, #26
    344e:	d5df      	bpl.n	3410 <bt_recv+0x3dc>
    3450:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    3454:	069b      	lsls	r3, r3, #26
    3456:	d5db      	bpl.n	3410 <bt_recv+0x3dc>
		err = hci_le_set_data_len(conn);
    3458:	4628      	mov	r0, r5
    345a:	f7ff fc05 	bl	2c68 <hci_le_set_data_len.isra.29>
		if (!err) {
    345e:	2800      	cmp	r0, #0
    3460:	d1d6      	bne.n	3410 <bt_recv+0x3dc>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3462:	f44f 7180 	mov.w	r1, #256	; 0x100
    3466:	4630      	mov	r0, r6
    3468:	e727      	b.n	32ba <bt_recv+0x286>
    346a:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    346c:	4883      	ldr	r0, [pc, #524]	; (367c <bt_recv+0x648>)
    346e:	f06f 0120 	mvn.w	r1, #32
    3472:	f7fe fd9d 	bl	1fb0 <atomic_and>
	if (!evt->status) {
    3476:	7833      	ldrb	r3, [r6, #0]
    3478:	b943      	cbnz	r3, 348c <bt_recv+0x458>
		memcpy(pub_key, evt->key, 64);
    347a:	1c71      	adds	r1, r6, #1
    347c:	2240      	movs	r2, #64	; 0x40
    347e:	4880      	ldr	r0, [pc, #512]	; (3680 <bt_recv+0x64c>)
    3480:	f7fe fbbc 	bl	1bfc <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3484:	2110      	movs	r1, #16
    3486:	487d      	ldr	r0, [pc, #500]	; (367c <bt_recv+0x648>)
    3488:	f7fe fd81 	bl	1f8e <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    348c:	4b7d      	ldr	r3, [pc, #500]	; (3684 <bt_recv+0x650>)
    348e:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    3490:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3492:	2d00      	cmp	r5, #0
    3494:	f43f adf2 	beq.w	307c <bt_recv+0x48>
		cb->func(evt->status ? NULL : evt->key);
    3498:	7832      	ldrb	r2, [r6, #0]
    349a:	682b      	ldr	r3, [r5, #0]
    349c:	2a00      	cmp	r2, #0
    349e:	bf0c      	ite	eq
    34a0:	4638      	moveq	r0, r7
    34a2:	2000      	movne	r0, #0
    34a4:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    34a6:	686d      	ldr	r5, [r5, #4]
    34a8:	e7f3      	b.n	3492 <bt_recv+0x45e>
	if (dh_key_cb) {
    34aa:	4d77      	ldr	r5, [pc, #476]	; (3688 <bt_recv+0x654>)
    34ac:	68a0      	ldr	r0, [r4, #8]
    34ae:	682a      	ldr	r2, [r5, #0]
    34b0:	2a00      	cmp	r2, #0
    34b2:	f43f ade3 	beq.w	307c <bt_recv+0x48>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    34b6:	7803      	ldrb	r3, [r0, #0]
    34b8:	b923      	cbnz	r3, 34c4 <bt_recv+0x490>
    34ba:	3001      	adds	r0, #1
    34bc:	4790      	blx	r2
		dh_key_cb = NULL;
    34be:	2300      	movs	r3, #0
    34c0:	602b      	str	r3, [r5, #0]
    34c2:	e5db      	b.n	307c <bt_recv+0x48>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    34c4:	2000      	movs	r0, #0
    34c6:	e7f9      	b.n	34bc <bt_recv+0x488>
	u8_t num_reports = net_buf_pull_u8(buf);
    34c8:	4628      	mov	r0, r5
    34ca:	f00f f906 	bl	126da <net_buf_simple_pull_u8>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    34ce:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 367c <bt_recv+0x648>
	u8_t num_reports = net_buf_pull_u8(buf);
    34d2:	9006      	str	r0, [sp, #24]
	while (num_reports--) {
    34d4:	9b06      	ldr	r3, [sp, #24]
    34d6:	2b00      	cmp	r3, #0
    34d8:	f43f add0 	beq.w	307c <bt_recv+0x48>
		info = (void *)buf->data;
    34dc:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    34de:	2109      	movs	r1, #9
    34e0:	4628      	mov	r0, r5
    34e2:	f00f f8f2 	bl	126ca <net_buf_simple_pull>
		rssi = info->data[info->length];
    34e6:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    34e8:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    34ea:	4433      	add	r3, r6
			bt_addr_le_copy(&id_addr, &info->addr);
    34ec:	a80c      	add	r0, sp, #48	; 0x30
		rssi = info->data[info->length];
    34ee:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    34f2:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    34f6:	3b02      	subs	r3, #2
    34f8:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    34fa:	4641      	mov	r1, r8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    34fc:	f200 8099 	bhi.w	3632 <bt_recv+0x5fe>
			bt_addr_le_copy(&id_addr, &info->addr);
    3500:	f7fe fd42 	bl	1f88 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3504:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3508:	3b02      	subs	r3, #2
    350a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (scan_dev_found_cb) {
    350e:	4b5f      	ldr	r3, [pc, #380]	; (368c <bt_recv+0x658>)
    3510:	681b      	ldr	r3, [r3, #0]
    3512:	b1bb      	cbz	r3, 3544 <bt_recv+0x510>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3514:	4628      	mov	r0, r5
    3516:	f00f f8f0 	bl	126fa <net_buf_simple_headroom>
	state->len = buf->len;
    351a:	89a3      	ldrh	r3, [r4, #12]
    351c:	9307      	str	r3, [sp, #28]
			buf->len = info->length;
    351e:	7a33      	ldrb	r3, [r6, #8]
    3520:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    3522:	4b5a      	ldr	r3, [pc, #360]	; (368c <bt_recv+0x658>)
    3524:	7832      	ldrb	r2, [r6, #0]
    3526:	681b      	ldr	r3, [r3, #0]
	state->offset = net_buf_simple_headroom(buf);
    3528:	4682      	mov	sl, r0
    352a:	461f      	mov	r7, r3
    352c:	fa4f f18b 	sxtb.w	r1, fp
    3530:	462b      	mov	r3, r5
    3532:	a80c      	add	r0, sp, #48	; 0x30
    3534:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3536:	6923      	ldr	r3, [r4, #16]
    3538:	fa13 f38a 	uxtah	r3, r3, sl
    353c:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    353e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    3542:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3544:	2109      	movs	r1, #9
    3546:	4648      	mov	r0, r9
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    3548:	7832      	ldrb	r2, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    354a:	f7fe fdb3 	bl	20b4 <atomic_test_bit>
    354e:	4682      	mov	sl, r0
    3550:	2800      	cmp	r0, #0
    3552:	d164      	bne.n	361e <bt_recv+0x5ea>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    3554:	2a01      	cmp	r2, #1
    3556:	d862      	bhi.n	361e <bt_recv+0x5ea>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    3558:	2101      	movs	r1, #1
    355a:	a80c      	add	r0, sp, #48	; 0x30
    355c:	f000 feae 	bl	42bc <bt_conn_lookup_state_le>
	if (!conn) {
    3560:	4607      	mov	r7, r0
    3562:	2800      	cmp	r0, #0
    3564:	d05b      	beq.n	361e <bt_recv+0x5ea>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3566:	2108      	movs	r1, #8
    3568:	4648      	mov	r0, r9
    356a:	f7fe fda3 	bl	20b4 <atomic_test_bit>
    356e:	2800      	cmp	r0, #0
    3570:	d162      	bne.n	3638 <bt_recv+0x604>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    3572:	2102      	movs	r1, #2
    3574:	4648      	mov	r0, r9
    3576:	f7fe fd9d 	bl	20b4 <atomic_test_bit>
    357a:	b110      	cbz	r0, 3582 <bt_recv+0x54e>
			set_random_address(&bt_dev.id_addr.a);
    357c:	4844      	ldr	r0, [pc, #272]	; (3690 <bt_recv+0x65c>)
    357e:	f7fe fe4b 	bl	2218 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3582:	493d      	ldr	r1, [pc, #244]	; (3678 <bt_recv+0x644>)
    3584:	f107 004b 	add.w	r0, r7, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3588:	f107 0a52 	add.w	sl, r7, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    358c:	f7fe fcfc 	bl	1f88 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3590:	4641      	mov	r1, r8
    3592:	4650      	mov	r0, sl
    3594:	f7fe fcf8 	bl	1f88 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    3598:	2119      	movs	r1, #25
    359a:	f242 000d 	movw	r0, #8205	; 0x200d
    359e:	f7fe fd97 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    35a2:	4683      	mov	fp, r0
    35a4:	2800      	cmp	r0, #0
    35a6:	d04c      	beq.n	3642 <bt_recv+0x60e>
	cp = net_buf_add(buf, sizeof(*cp));
    35a8:	2119      	movs	r1, #25
    35aa:	3008      	adds	r0, #8
    35ac:	f00f f86e 	bl	1268c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    35b0:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    35b2:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
    35b4:	2100      	movs	r1, #0
    35b6:	f7fe fb4d 	bl	1c54 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    35ba:	2200      	movs	r2, #0
    35bc:	2360      	movs	r3, #96	; 0x60
    35be:	f888 3000 	strb.w	r3, [r8]
    35c2:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
    35c6:	f888 3002 	strb.w	r3, [r8, #2]
    35ca:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    35ce:	4651      	mov	r1, sl
    35d0:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
    35d4:	9207      	str	r2, [sp, #28]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    35d6:	f7fe fcd7 	bl	1f88 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    35da:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    35de:	f888 300c 	strb.w	r3, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    35e2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
    35e6:	f8a8 300d 	strh.w	r3, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    35ea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    35ee:	f8a8 300f 	strh.w	r3, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    35f2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    35f6:	f8a8 3011 	strh.w	r3, [r8, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    35fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    35fe:	f8a8 3013 	strh.w	r3, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3602:	9a07      	ldr	r2, [sp, #28]
    3604:	4659      	mov	r1, fp
    3606:	f242 000d 	movw	r0, #8205	; 0x200d
    360a:	f7fe fd91 	bl	2130 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    360e:	b9c0      	cbnz	r0, 3642 <bt_recv+0x60e>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    3610:	4638      	mov	r0, r7
    3612:	2102      	movs	r1, #2
    3614:	f000 fd2a 	bl	406c <bt_conn_set_state>
	bt_conn_unref(conn);
    3618:	4638      	mov	r0, r7
    361a:	f000 fe71 	bl	4300 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    361e:	7a31      	ldrb	r1, [r6, #8]
    3620:	4628      	mov	r0, r5
    3622:	3101      	adds	r1, #1
    3624:	f00f f851 	bl	126ca <net_buf_simple_pull>
    3628:	9b06      	ldr	r3, [sp, #24]
    362a:	3b01      	subs	r3, #1
    362c:	b2db      	uxtb	r3, r3
    362e:	9306      	str	r3, [sp, #24]
    3630:	e750      	b.n	34d4 <bt_recv+0x4a0>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    3632:	f7fe fca9 	bl	1f88 <bt_addr_le_copy>
    3636:	e76a      	b.n	350e <bt_recv+0x4da>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    3638:	4650      	mov	r0, sl
    363a:	f7fe fdb7 	bl	21ac <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    363e:	2800      	cmp	r0, #0
    3640:	d097      	beq.n	3572 <bt_recv+0x53e>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    3642:	231f      	movs	r3, #31
    3644:	723b      	strb	r3, [r7, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3646:	2100      	movs	r1, #0
    3648:	4638      	mov	r0, r7
    364a:	f000 fd0f 	bl	406c <bt_conn_set_state>
	bt_conn_unref(conn);
    364e:	4638      	mov	r0, r7
    3650:	f000 fe56 	bl	4300 <bt_conn_unref>
	bt_le_scan_update(false);
    3654:	2000      	movs	r0, #0
    3656:	f7fe ff85 	bl	2564 <bt_le_scan_update>
    365a:	e7e0      	b.n	361e <bt_recv+0x5ea>
    365c:	000142a9 	.word	0x000142a9
    3660:	00014ff8 	.word	0x00014ff8
    3664:	0001489c 	.word	0x0001489c
    3668:	00015047 	.word	0x00015047
    366c:	00014dc8 	.word	0x00014dc8
    3670:	00014872 	.word	0x00014872
    3674:	00014885 	.word	0x00014885
    3678:	20003a60 	.word	0x20003a60
    367c:	20003ad0 	.word	0x20003ad0
    3680:	20000290 	.word	0x20000290
    3684:	200002d0 	.word	0x200002d0
    3688:	2000028c 	.word	0x2000028c
    368c:	200002d8 	.word	0x200002d8
    3690:	20003a61 	.word	0x20003a61
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    3694:	89a5      	ldrh	r5, [r4, #12]
    3696:	68a0      	ldr	r0, [r4, #8]
    3698:	4629      	mov	r1, r5
    369a:	f7fe faff 	bl	1c9c <bt_hex>
    369e:	4b1d      	ldr	r3, [pc, #116]	; (3714 <bt_recv+0x6e0>)
    36a0:	9304      	str	r3, [sp, #16]
    36a2:	9003      	str	r0, [sp, #12]
    36a4:	e88d 0048 	stmia.w	sp, {r3, r6}
    36a8:	4a1b      	ldr	r2, [pc, #108]	; (3718 <bt_recv+0x6e4>)
    36aa:	4b1c      	ldr	r3, [pc, #112]	; (371c <bt_recv+0x6e8>)
    36ac:	491c      	ldr	r1, [pc, #112]	; (3720 <bt_recv+0x6ec>)
    36ae:	481d      	ldr	r0, [pc, #116]	; (3724 <bt_recv+0x6f0>)
    36b0:	9502      	str	r5, [sp, #8]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    36b2:	f7fd fc6b 	bl	f8c <printk>
    36b6:	e4e1      	b.n	307c <bt_recv+0x48>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    36b8:	4a16      	ldr	r2, [pc, #88]	; (3714 <bt_recv+0x6e0>)
    36ba:	9202      	str	r2, [sp, #8]
    36bc:	e88d 000c 	stmia.w	sp, {r2, r3}
    36c0:	4917      	ldr	r1, [pc, #92]	; (3720 <bt_recv+0x6ec>)
    36c2:	4b19      	ldr	r3, [pc, #100]	; (3728 <bt_recv+0x6f4>)
    36c4:	4a19      	ldr	r2, [pc, #100]	; (372c <bt_recv+0x6f8>)
    36c6:	481a      	ldr	r0, [pc, #104]	; (3730 <bt_recv+0x6fc>)
    36c8:	f7fd fc60 	bl	f8c <printk>
		net_buf_unref(buf);
    36cc:	4620      	mov	r0, r4
    36ce:	f00e ffab 	bl	12628 <net_buf_unref>
		return -EINVAL;
    36d2:	f06f 0015 	mvn.w	r0, #21
    36d6:	e4f2      	b.n	30be <bt_recv+0x8a>
	net_buf_pull(buf, sizeof(*hdr));
    36d8:	f104 0508 	add.w	r5, r4, #8
    36dc:	2102      	movs	r1, #2
    36de:	4628      	mov	r0, r5
    36e0:	f00e fff3 	bl	126ca <net_buf_simple_pull>
	switch (hdr->evt) {
    36e4:	7836      	ldrb	r6, [r6, #0]
    36e6:	2e05      	cmp	r6, #5
    36e8:	f43f ad05 	beq.w	30f6 <bt_recv+0xc2>
    36ec:	2e3e      	cmp	r6, #62	; 0x3e
    36ee:	f43f ad46 	beq.w	317e <bt_recv+0x14a>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    36f2:	89a5      	ldrh	r5, [r4, #12]
    36f4:	68a0      	ldr	r0, [r4, #8]
    36f6:	4629      	mov	r1, r5
    36f8:	f7fe fad0 	bl	1c9c <bt_hex>
    36fc:	4b05      	ldr	r3, [pc, #20]	; (3714 <bt_recv+0x6e0>)
    36fe:	9304      	str	r3, [sp, #16]
    3700:	9003      	str	r0, [sp, #12]
    3702:	e88d 0048 	stmia.w	sp, {r3, r6}
    3706:	9502      	str	r5, [sp, #8]
    3708:	4b0a      	ldr	r3, [pc, #40]	; (3734 <bt_recv+0x700>)
    370a:	4a03      	ldr	r2, [pc, #12]	; (3718 <bt_recv+0x6e4>)
    370c:	4904      	ldr	r1, [pc, #16]	; (3720 <bt_recv+0x6ec>)
    370e:	480a      	ldr	r0, [pc, #40]	; (3738 <bt_recv+0x704>)
    3710:	e7cf      	b.n	36b2 <bt_recv+0x67e>
    3712:	bf00      	nop
    3714:	000142a9 	.word	0x000142a9
    3718:	00015040 	.word	0x00015040
    371c:	000148d3 	.word	0x000148d3
    3720:	00015047 	.word	0x00015047
    3724:	00014dfc 	.word	0x00014dfc
    3728:	00014964 	.word	0x00014964
    372c:	00014ff8 	.word	0x00014ff8
    3730:	00014e63 	.word	0x00014e63
    3734:	000148e5 	.word	0x000148e5
    3738:	00014e31 	.word	0x00014e31

0000373c <bt_recv_prio>:
{
    373c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3740:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3742:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3744:	2b01      	cmp	r3, #1
{
    3746:	b087      	sub	sp, #28
    3748:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    374a:	d00e      	beq.n	376a <bt_recv_prio+0x2e>
    374c:	4b65      	ldr	r3, [pc, #404]	; (38e4 <bt_recv_prio+0x1a8>)
    374e:	9301      	str	r3, [sp, #4]
    3750:	9300      	str	r3, [sp, #0]
    3752:	4a65      	ldr	r2, [pc, #404]	; (38e8 <bt_recv_prio+0x1ac>)
    3754:	4b65      	ldr	r3, [pc, #404]	; (38ec <bt_recv_prio+0x1b0>)
    3756:	4966      	ldr	r1, [pc, #408]	; (38f0 <bt_recv_prio+0x1b4>)
    3758:	4866      	ldr	r0, [pc, #408]	; (38f4 <bt_recv_prio+0x1b8>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    375a:	f7fd fc17 	bl	f8c <printk>
    375e:	4040      	eors	r0, r0
    3760:	f380 8811 	msr	BASEPRI, r0
    3764:	f04f 0004 	mov.w	r0, #4
    3768:	df02      	svc	2
    376a:	8982      	ldrh	r2, [r0, #12]
    376c:	2a01      	cmp	r2, #1
    376e:	d807      	bhi.n	3780 <bt_recv_prio+0x44>
    3770:	4b5c      	ldr	r3, [pc, #368]	; (38e4 <bt_recv_prio+0x1a8>)
    3772:	9301      	str	r3, [sp, #4]
    3774:	9300      	str	r3, [sp, #0]
    3776:	4a5c      	ldr	r2, [pc, #368]	; (38e8 <bt_recv_prio+0x1ac>)
    3778:	4b5c      	ldr	r3, [pc, #368]	; (38ec <bt_recv_prio+0x1b0>)
    377a:	495d      	ldr	r1, [pc, #372]	; (38f0 <bt_recv_prio+0x1b4>)
    377c:	485e      	ldr	r0, [pc, #376]	; (38f8 <bt_recv_prio+0x1bc>)
    377e:	e7ec      	b.n	375a <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3780:	7832      	ldrb	r2, [r6, #0]
    3782:	2a13      	cmp	r2, #19
    3784:	f200 80a5 	bhi.w	38d2 <bt_recv_prio+0x196>
    3788:	4093      	lsls	r3, r2
    378a:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    378e:	f000 80a0 	beq.w	38d2 <bt_recv_prio+0x196>
	net_buf_pull(buf, sizeof(*hdr));
    3792:	f100 0508 	add.w	r5, r0, #8
    3796:	2102      	movs	r1, #2
    3798:	4628      	mov	r0, r5
    379a:	f00e ff96 	bl	126ca <net_buf_simple_pull>
	switch (hdr->evt) {
    379e:	7833      	ldrb	r3, [r6, #0]
    37a0:	2b0f      	cmp	r3, #15
    37a2:	d01d      	beq.n	37e0 <bt_recv_prio+0xa4>
    37a4:	2b13      	cmp	r3, #19
    37a6:	d02b      	beq.n	3800 <bt_recv_prio+0xc4>
    37a8:	2b0e      	cmp	r3, #14
    37aa:	f040 8087 	bne.w	38bc <bt_recv_prio+0x180>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    37ae:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    37b0:	2103      	movs	r1, #3
    37b2:	4628      	mov	r0, r5
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    37b4:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    37b8:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    37ba:	f00e ff86 	bl	126ca <net_buf_simple_pull>
	status = buf->data[0];
    37be:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    37c0:	4622      	mov	r2, r4
    37c2:	7819      	ldrb	r1, [r3, #0]
    37c4:	4638      	mov	r0, r7
    37c6:	f7fe fc13 	bl	1ff0 <hci_cmd_done>
	if (ncmd) {
    37ca:	b116      	cbz	r6, 37d2 <bt_recv_prio+0x96>
    37cc:	484b      	ldr	r0, [pc, #300]	; (38fc <bt_recv_prio+0x1c0>)
    37ce:	f00f ffb4 	bl	1373a <_impl_k_sem_give>
	net_buf_unref(buf);
    37d2:	4620      	mov	r0, r4
    37d4:	f00e ff28 	bl	12628 <net_buf_unref>
}
    37d8:	2000      	movs	r0, #0
    37da:	b007      	add	sp, #28
    37dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    37e0:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    37e2:	f8b6 8002 	ldrh.w	r8, [r6, #2]
	u8_t ncmd = evt->ncmd;
    37e6:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    37e8:	2104      	movs	r1, #4
    37ea:	4628      	mov	r0, r5
    37ec:	f00e ff6d 	bl	126ca <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    37f0:	4622      	mov	r2, r4
    37f2:	7831      	ldrb	r1, [r6, #0]
    37f4:	4640      	mov	r0, r8
    37f6:	f7fe fbfb 	bl	1ff0 <hci_cmd_done>
	if (ncmd) {
    37fa:	2f00      	cmp	r7, #0
    37fc:	d0e9      	beq.n	37d2 <bt_recv_prio+0x96>
    37fe:	e7e5      	b.n	37cc <bt_recv_prio+0x90>
    3800:	68a3      	ldr	r3, [r4, #8]
				BT_ERR("packets count mismatch");
    3802:	4f38      	ldr	r7, [pc, #224]	; (38e4 <bt_recv_prio+0x1a8>)
    3804:	f8df 9108 	ldr.w	r9, [pc, #264]	; 3910 <bt_recv_prio+0x1d4>
    3808:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 38e8 <bt_recv_prio+0x1ac>
    380c:	9304      	str	r3, [sp, #16]
	for (i = 0; i < evt->num_handles; i++) {
    380e:	2600      	movs	r6, #0
    3810:	9b04      	ldr	r3, [sp, #16]
    3812:	781b      	ldrb	r3, [r3, #0]
    3814:	429e      	cmp	r6, r3
    3816:	dadc      	bge.n	37d2 <bt_recv_prio+0x96>
    3818:	9b04      	ldr	r3, [sp, #16]
    381a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    381e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    3822:	f8b3 8003 	ldrh.w	r8, [r3, #3]
	__asm__ volatile(
    3826:	f04f 0120 	mov.w	r1, #32
    382a:	f3ef 8b11 	mrs	fp, BASEPRI
    382e:	f381 8811 	msr	BASEPRI, r1
		conn = bt_conn_lookup_handle(handle);
    3832:	4610      	mov	r0, r2
    3834:	9205      	str	r2, [sp, #20]
    3836:	f000 fcf5 	bl	4224 <bt_conn_lookup_handle>
		if (!conn) {
    383a:	9a05      	ldr	r2, [sp, #20]
    383c:	4605      	mov	r5, r0
    383e:	b960      	cbnz	r0, 385a <bt_recv_prio+0x11e>
			BT_ERR("No connection for handle %u", handle);
    3840:	9201      	str	r2, [sp, #4]
    3842:	9702      	str	r7, [sp, #8]
    3844:	9700      	str	r7, [sp, #0]
    3846:	464b      	mov	r3, r9
    3848:	4652      	mov	r2, sl
    384a:	4929      	ldr	r1, [pc, #164]	; (38f0 <bt_recv_prio+0x1b4>)
    384c:	482c      	ldr	r0, [pc, #176]	; (3900 <bt_recv_prio+0x1c4>)
    384e:	f7fd fb9d 	bl	f8c <printk>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3852:	f38b 8811 	msr	BASEPRI, fp
	for (i = 0; i < evt->num_handles; i++) {
    3856:	3601      	adds	r6, #1
    3858:	e7da      	b.n	3810 <bt_recv_prio+0xd4>
    385a:	f38b 8811 	msr	BASEPRI, fp
			k_fifo_put(&conn->tx_notify, node);
    385e:	f100 0b18 	add.w	fp, r0, #24
		while (count--) {
    3862:	f1b8 0f00 	cmp.w	r8, #0
    3866:	d01c      	beq.n	38a2 <bt_recv_prio+0x166>
	__asm__ volatile(
    3868:	f04f 0220 	mov.w	r2, #32
    386c:	f3ef 8e11 	mrs	lr, BASEPRI
    3870:	f382 8811 	msr	BASEPRI, r2
    3874:	6929      	ldr	r1, [r5, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    3876:	b129      	cbz	r1, 3884 <bt_recv_prio+0x148>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3878:	696a      	ldr	r2, [r5, #20]
	return node->next;
    387a:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    387c:	6128      	str	r0, [r5, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    387e:	4291      	cmp	r1, r2
	list->tail = node;
    3880:	bf08      	it	eq
    3882:	6168      	streq	r0, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3884:	f38e 8811 	msr	BASEPRI, lr
    3888:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    388c:	fa1f f883 	uxth.w	r8, r3
			if (!node) {
    3890:	b959      	cbnz	r1, 38aa <bt_recv_prio+0x16e>
				BT_ERR("packets count mismatch");
    3892:	9701      	str	r7, [sp, #4]
    3894:	9700      	str	r7, [sp, #0]
    3896:	464b      	mov	r3, r9
    3898:	4652      	mov	r2, sl
    389a:	4915      	ldr	r1, [pc, #84]	; (38f0 <bt_recv_prio+0x1b4>)
    389c:	4819      	ldr	r0, [pc, #100]	; (3904 <bt_recv_prio+0x1c8>)
    389e:	f7fd fb75 	bl	f8c <printk>
		bt_conn_unref(conn);
    38a2:	4628      	mov	r0, r5
    38a4:	f000 fd2c 	bl	4300 <bt_conn_unref>
    38a8:	e7d5      	b.n	3856 <bt_recv_prio+0x11a>
			k_fifo_put(&conn->tx_notify, node);
    38aa:	4658      	mov	r0, fp
    38ac:	f00f fc80 	bl	131b0 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    38b0:	4628      	mov	r0, r5
    38b2:	f000 f989 	bl	3bc8 <bt_conn_get_pkts>
    38b6:	f00f ff40 	bl	1373a <_impl_k_sem_give>
    38ba:	e7d2      	b.n	3862 <bt_recv_prio+0x126>
		net_buf_unref(buf);
    38bc:	4620      	mov	r0, r4
    38be:	f00e feb3 	bl	12628 <net_buf_unref>
		BT_ASSERT(0);
    38c2:	4b08      	ldr	r3, [pc, #32]	; (38e4 <bt_recv_prio+0x1a8>)
    38c4:	9301      	str	r3, [sp, #4]
    38c6:	9300      	str	r3, [sp, #0]
    38c8:	4a07      	ldr	r2, [pc, #28]	; (38e8 <bt_recv_prio+0x1ac>)
    38ca:	4b08      	ldr	r3, [pc, #32]	; (38ec <bt_recv_prio+0x1b0>)
    38cc:	4908      	ldr	r1, [pc, #32]	; (38f0 <bt_recv_prio+0x1b4>)
    38ce:	480e      	ldr	r0, [pc, #56]	; (3908 <bt_recv_prio+0x1cc>)
    38d0:	e743      	b.n	375a <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    38d2:	4b04      	ldr	r3, [pc, #16]	; (38e4 <bt_recv_prio+0x1a8>)
    38d4:	9301      	str	r3, [sp, #4]
    38d6:	9300      	str	r3, [sp, #0]
    38d8:	4a03      	ldr	r2, [pc, #12]	; (38e8 <bt_recv_prio+0x1ac>)
    38da:	4b04      	ldr	r3, [pc, #16]	; (38ec <bt_recv_prio+0x1b0>)
    38dc:	4904      	ldr	r1, [pc, #16]	; (38f0 <bt_recv_prio+0x1b4>)
    38de:	480b      	ldr	r0, [pc, #44]	; (390c <bt_recv_prio+0x1d0>)
    38e0:	e73b      	b.n	375a <bt_recv_prio+0x1e>
    38e2:	bf00      	nop
    38e4:	000142a9 	.word	0x000142a9
    38e8:	00014ff8 	.word	0x00014ff8
    38ec:	0001496c 	.word	0x0001496c
    38f0:	00015047 	.word	0x00015047
    38f4:	00014ec6 	.word	0x00014ec6
    38f8:	00014f0a 	.word	0x00014f0a
    38fc:	20003b08 	.word	0x20003b08
    3900:	00014f44 	.word	0x00014f44
    3904:	00014f70 	.word	0x00014f70
    3908:	00014f97 	.word	0x00014f97
    390c:	00014fba 	.word	0x00014fba
    3910:	00014816 	.word	0x00014816

00003914 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    3914:	4a08      	ldr	r2, [pc, #32]	; (3938 <bt_hci_driver_register+0x24>)
    3916:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    391a:	b93b      	cbnz	r3, 392c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    391c:	68c1      	ldr	r1, [r0, #12]
    391e:	b141      	cbz	r1, 3932 <bt_hci_driver_register+0x1e>
    3920:	6901      	ldr	r1, [r0, #16]
    3922:	b131      	cbz	r1, 3932 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    3924:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    3928:	4618      	mov	r0, r3
    392a:	4770      	bx	lr
		return -EALREADY;
    392c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3930:	4770      	bx	lr
		return -EINVAL;
    3932:	f06f 0015 	mvn.w	r0, #21
}
    3936:	4770      	bx	lr
    3938:	20003a60 	.word	0x20003a60

0000393c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    393c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    393e:	4d2a      	ldr	r5, [pc, #168]	; (39e8 <bt_enable+0xac>)
    3940:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    3944:	b086      	sub	sp, #24
    3946:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    3948:	b96b      	cbnz	r3, 3966 <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    394a:	4b28      	ldr	r3, [pc, #160]	; (39ec <bt_enable+0xb0>)
    394c:	9301      	str	r3, [sp, #4]
    394e:	9300      	str	r3, [sp, #0]
    3950:	4a27      	ldr	r2, [pc, #156]	; (39f0 <bt_enable+0xb4>)
    3952:	4b28      	ldr	r3, [pc, #160]	; (39f4 <bt_enable+0xb8>)
    3954:	4928      	ldr	r1, [pc, #160]	; (39f8 <bt_enable+0xbc>)
    3956:	4829      	ldr	r0, [pc, #164]	; (39fc <bt_enable+0xc0>)
    3958:	f7fd fb18 	bl	f8c <printk>
		return -ENODEV;
    395c:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    3960:	4620      	mov	r0, r4
    3962:	b006      	add	sp, #24
    3964:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3966:	2101      	movs	r1, #1
    3968:	f105 0070 	add.w	r0, r5, #112	; 0x70
    396c:	f7fe fb0f 	bl	1f8e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    3970:	f010 0001 	ands.w	r0, r0, #1
    3974:	d134      	bne.n	39e0 <bt_enable+0xa4>
	ready_cb = cb;
    3976:	4b22      	ldr	r3, [pc, #136]	; (3a00 <bt_enable+0xc4>)

    3978:	4922      	ldr	r1, [pc, #136]	; (3a04 <bt_enable+0xc8>)
    397a:	601e      	str	r6, [r3, #0]
    397c:	f06f 0308 	mvn.w	r3, #8
    3980:	9005      	str	r0, [sp, #20]
    3982:	9004      	str	r0, [sp, #16]
    3984:	9303      	str	r3, [sp, #12]
    3986:	9002      	str	r0, [sp, #8]
    3988:	9001      	str	r0, [sp, #4]
    398a:	9000      	str	r0, [sp, #0]
    398c:	4b1e      	ldr	r3, [pc, #120]	; (3a08 <bt_enable+0xcc>)
    398e:	481f      	ldr	r0, [pc, #124]	; (3a0c <bt_enable+0xd0>)
    3990:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    3994:	f010 f8ce 	bl	13b34 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    3998:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    399c:	68db      	ldr	r3, [r3, #12]
    399e:	4798      	blx	r3
	if (err) {
    39a0:	4604      	mov	r4, r0
    39a2:	b150      	cbz	r0, 39ba <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    39a4:	4b11      	ldr	r3, [pc, #68]	; (39ec <bt_enable+0xb0>)
    39a6:	9302      	str	r3, [sp, #8]
    39a8:	e88d 0018 	stmia.w	sp, {r3, r4}
    39ac:	4a10      	ldr	r2, [pc, #64]	; (39f0 <bt_enable+0xb4>)
    39ae:	4b11      	ldr	r3, [pc, #68]	; (39f4 <bt_enable+0xb8>)
    39b0:	4911      	ldr	r1, [pc, #68]	; (39f8 <bt_enable+0xbc>)
    39b2:	4817      	ldr	r0, [pc, #92]	; (3a10 <bt_enable+0xd4>)
    39b4:	f7fd faea 	bl	f8c <printk>
		return err;
    39b8:	e7d2      	b.n	3960 <bt_enable+0x24>
	if (!cb) {
    39ba:	b926      	cbnz	r6, 39c6 <bt_enable+0x8a>
}
    39bc:	b006      	add	sp, #24
    39be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    39c2:	f7fe be01 	b.w	25c8 <bt_init>
    39c6:	2101      	movs	r1, #1
    39c8:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    39cc:	f7fe fadf 	bl	1f8e <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    39d0:	07c3      	lsls	r3, r0, #31
    39d2:	d4c5      	bmi.n	3960 <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    39d4:	f105 0164 	add.w	r1, r5, #100	; 0x64
    39d8:	480e      	ldr	r0, [pc, #56]	; (3a14 <bt_enable+0xd8>)
    39da:	f00f fbe9 	bl	131b0 <k_queue_append>
    39de:	e7bf      	b.n	3960 <bt_enable+0x24>
		return -EALREADY;
    39e0:	f06f 0444 	mvn.w	r4, #68	; 0x44
    39e4:	e7bc      	b.n	3960 <bt_enable+0x24>
    39e6:	bf00      	nop
    39e8:	20003a60 	.word	0x20003a60
    39ec:	000142a9 	.word	0x000142a9
    39f0:	00014ff8 	.word	0x00014ff8
    39f4:	00014979 	.word	0x00014979
    39f8:	00015047 	.word	0x00015047
    39fc:	00014a2c 	.word	0x00014a2c
    3a00:	200002d4 	.word	0x200002d4
    3a04:	20001a08 	.word	0x20001a08
    3a08:	00002ea9 	.word	0x00002ea9
    3a0c:	200002dc 	.word	0x200002dc
    3a10:	00014a55 	.word	0x00014a55
    3a14:	20001988 	.word	0x20001988

00003a18 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    3a18:	2000      	movs	r0, #0
    3a1a:	4770      	bx	lr

00003a1c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    3a1c:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    3a1e:	7803      	ldrb	r3, [r0, #0]
    3a20:	2b01      	cmp	r3, #1
{
    3a22:	4605      	mov	r5, r0
    3a24:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    3a26:	d810      	bhi.n	3a4a <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    3a28:	7843      	ldrb	r3, [r0, #1]
    3a2a:	2b01      	cmp	r3, #1
    3a2c:	d80d      	bhi.n	3a4a <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    3a2e:	8841      	ldrh	r1, [r0, #2]
    3a30:	1f0b      	subs	r3, r1, #4
    3a32:	b29b      	uxth	r3, r3
    3a34:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    3a38:	4283      	cmp	r3, r0
    3a3a:	d806      	bhi.n	3a4a <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    3a3c:	88aa      	ldrh	r2, [r5, #4]
    3a3e:	1f13      	subs	r3, r2, #4
    3a40:	b29b      	uxth	r3, r3
    3a42:	4283      	cmp	r3, r0
    3a44:	d801      	bhi.n	3a4a <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    3a46:	4291      	cmp	r1, r2
    3a48:	d22b      	bcs.n	3aa2 <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    3a4a:	f06f 0415 	mvn.w	r4, #21
    3a4e:	e00e      	b.n	3a6e <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    3a50:	2108      	movs	r1, #8
    3a52:	4819      	ldr	r0, [pc, #100]	; (3ab8 <bt_le_scan_start+0x9c>)
    3a54:	f7fe fb2e 	bl	20b4 <atomic_test_bit>
    3a58:	b158      	cbz	r0, 3a72 <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3a5a:	4610      	mov	r0, r2
    3a5c:	f7fe fba6 	bl	21ac <set_le_scan_enable>
		if (err) {
    3a60:	4604      	mov	r4, r0
    3a62:	b130      	cbz	r0, 3a72 <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a64:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3a68:	4813      	ldr	r0, [pc, #76]	; (3ab8 <bt_le_scan_start+0x9c>)
    3a6a:	f7fe faa1 	bl	1fb0 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    3a6e:	4620      	mov	r0, r4
    3a70:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    3a72:	786b      	ldrb	r3, [r5, #1]
    3a74:	b17b      	cbz	r3, 3a96 <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a76:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3a7a:	480f      	ldr	r0, [pc, #60]	; (3ab8 <bt_le_scan_start+0x9c>)
    3a7c:	f7fe fa87 	bl	1f8e <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    3a80:	88aa      	ldrh	r2, [r5, #4]
    3a82:	8869      	ldrh	r1, [r5, #2]
    3a84:	7828      	ldrb	r0, [r5, #0]
    3a86:	f7fe fd1d 	bl	24c4 <start_le_scan>
	if (err) {
    3a8a:	4604      	mov	r4, r0
    3a8c:	2800      	cmp	r0, #0
    3a8e:	d1e9      	bne.n	3a64 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    3a90:	4b0a      	ldr	r3, [pc, #40]	; (3abc <bt_le_scan_start+0xa0>)
    3a92:	601e      	str	r6, [r3, #0]
	return 0;
    3a94:	e7eb      	b.n	3a6e <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a96:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    3a9a:	4807      	ldr	r0, [pc, #28]	; (3ab8 <bt_le_scan_start+0x9c>)
    3a9c:	f7fe fa88 	bl	1fb0 <atomic_and>
    3aa0:	e7ee      	b.n	3a80 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3aa2:	f44f 7100 	mov.w	r1, #512	; 0x200
    3aa6:	4804      	ldr	r0, [pc, #16]	; (3ab8 <bt_le_scan_start+0x9c>)
    3aa8:	f7fe fa71 	bl	1f8e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3aac:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    3ab0:	d0ce      	beq.n	3a50 <bt_le_scan_start+0x34>
		return -EALREADY;
    3ab2:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3ab6:	e7da      	b.n	3a6e <bt_le_scan_start+0x52>
    3ab8:	20003ad0 	.word	0x20003ad0
    3abc:	200002d8 	.word	0x200002d8

00003ac0 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    3ac0:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3ac2:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3ac6:	4807      	ldr	r0, [pc, #28]	; (3ae4 <bt_le_scan_stop+0x24>)
    3ac8:	f7fe fa72 	bl	1fb0 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3acc:	0583      	lsls	r3, r0, #22
    3ace:	d506      	bpl.n	3ade <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    3ad0:	4b05      	ldr	r3, [pc, #20]	; (3ae8 <bt_le_scan_stop+0x28>)
    3ad2:	2000      	movs	r0, #0
    3ad4:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    3ad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    3ada:	f7fe bd43 	b.w	2564 <bt_le_scan_update>
}
    3ade:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3ae2:	bd08      	pop	{r3, pc}
    3ae4:	20003ad0 	.word	0x20003ad0
    3ae8:	200002d8 	.word	0x200002d8

00003aec <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3aec:	b538      	push	{r3, r4, r5, lr}
    3aee:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3af0:	4805      	ldr	r0, [pc, #20]	; (3b08 <bt_buf_get_rx+0x1c>)
    3af2:	f00e fd69 	bl	125c8 <net_buf_alloc_fixed>
#endif

	if (buf) {
    3af6:	4604      	mov	r4, r0
    3af8:	b120      	cbz	r0, 3b04 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3afa:	2100      	movs	r1, #0
    3afc:	3008      	adds	r0, #8
    3afe:	f00e fd82 	bl	12606 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    3b02:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3b04:	4620      	mov	r0, r4
    3b06:	bd38      	pop	{r3, r4, r5, pc}
    3b08:	20003f8c 	.word	0x20003f8c

00003b0c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3b0c:	b510      	push	{r4, lr}
    3b0e:	4601      	mov	r1, r0
	__asm__ volatile(
    3b10:	f04f 0320 	mov.w	r3, #32
    3b14:	f3ef 8011 	mrs	r0, BASEPRI
    3b18:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3b1c:	4a0b      	ldr	r2, [pc, #44]	; (3b4c <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    3b1e:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    3b20:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    3b24:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3b28:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    3b2c:	b924      	cbnz	r4, 3b38 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3b2e:	2001      	movs	r0, #1
}
    3b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3b34:	f7ff bfda 	b.w	3aec <bt_buf_get_rx>
    3b38:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3b3a:	f104 0008 	add.w	r0, r4, #8
    3b3e:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    3b40:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3b42:	4619      	mov	r1, r3
    3b44:	f00e fd5f 	bl	12606 <net_buf_simple_reserve>
}
    3b48:	4620      	mov	r0, r4
    3b4a:	bd10      	pop	{r4, pc}
    3b4c:	20003a60 	.word	0x20003a60

00003b50 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    3b50:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3b52:	4b06      	ldr	r3, [pc, #24]	; (3b6c <notify_connected+0x1c>)
    3b54:	681c      	ldr	r4, [r3, #0]
{
    3b56:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3b58:	b904      	cbnz	r4, 3b5c <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    3b5a:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    3b5c:	6823      	ldr	r3, [r4, #0]
    3b5e:	b113      	cbz	r3, 3b66 <notify_connected+0x16>
			cb->connected(conn, conn->err);
    3b60:	7a29      	ldrb	r1, [r5, #8]
    3b62:	4628      	mov	r0, r5
    3b64:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    3b66:	6924      	ldr	r4, [r4, #16]
    3b68:	e7f6      	b.n	3b58 <notify_connected+0x8>
    3b6a:	bf00      	nop
    3b6c:	2000034c 	.word	0x2000034c

00003b70 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3b70:	f3bf 8f5b 	dmb	ish
    3b74:	6800      	ldr	r0, [r0, #0]
    3b76:	f3bf 8f5b 	dmb	ish
}
    3b7a:	4770      	bx	lr

00003b7c <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    3b7c:	8943      	ldrh	r3, [r0, #10]
{
    3b7e:	b510      	push	{r4, lr}
    3b80:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    3b82:	b12b      	cbz	r3, 3b90 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    3b84:	68c0      	ldr	r0, [r0, #12]
    3b86:	f00e fd4f 	bl	12628 <net_buf_unref>
	conn->rx = NULL;
    3b8a:	2300      	movs	r3, #0
    3b8c:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    3b8e:	8163      	strh	r3, [r4, #10]
    3b90:	bd10      	pop	{r4, pc}

00003b92 <atomic_dec>:
}
    3b92:	f3bf 8f5b 	dmb	ish
    3b96:	e850 3f00 	ldrex	r3, [r0]
    3b9a:	1e5a      	subs	r2, r3, #1
    3b9c:	e840 2100 	strex	r1, r2, [r0]
    3ba0:	2900      	cmp	r1, #0
    3ba2:	d1f8      	bne.n	3b96 <atomic_dec+0x4>
    3ba4:	f3bf 8f5b 	dmb	ish
    3ba8:	4618      	mov	r0, r3
    3baa:	4770      	bx	lr

00003bac <atomic_inc>:
}
    3bac:	f3bf 8f5b 	dmb	ish
    3bb0:	e850 3f00 	ldrex	r3, [r0]
    3bb4:	1c5a      	adds	r2, r3, #1
    3bb6:	e840 2100 	strex	r1, r2, [r0]
    3bba:	2900      	cmp	r1, #0
    3bbc:	d1f8      	bne.n	3bb0 <atomic_inc+0x4>
    3bbe:	f3bf 8f5b 	dmb	ish
    3bc2:	4618      	mov	r0, r3
    3bc4:	4770      	bx	lr
	...

00003bc8 <bt_conn_get_pkts>:
}
    3bc8:	4800      	ldr	r0, [pc, #0]	; (3bcc <bt_conn_get_pkts+0x4>)
    3bca:	4770      	bx	lr
    3bcc:	20003aec 	.word	0x20003aec

00003bd0 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    3bd0:	4b08      	ldr	r3, [pc, #32]	; (3bf4 <notify_le_param_updated+0x24>)
{
    3bd2:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    3bd4:	681c      	ldr	r4, [r3, #0]
{
    3bd6:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3bd8:	b904      	cbnz	r4, 3bdc <notify_le_param_updated+0xc>
}
    3bda:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    3bdc:	68e6      	ldr	r6, [r4, #12]
    3bde:	b13e      	cbz	r6, 3bf0 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    3be0:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    3be4:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    3be8:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    3bec:	4628      	mov	r0, r5
    3bee:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    3bf0:	6924      	ldr	r4, [r4, #16]
    3bf2:	e7f1      	b.n	3bd8 <notify_le_param_updated+0x8>
    3bf4:	2000034c 	.word	0x2000034c

00003bf8 <le_param_req>:
{
    3bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bfa:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    3bfc:	4608      	mov	r0, r1
{
    3bfe:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    3c00:	f7fe fb74 	bl	22ec <bt_le_conn_params_valid>
    3c04:	4605      	mov	r5, r0
    3c06:	b910      	cbnz	r0, 3c0e <le_param_req+0x16>
		return false;
    3c08:	2500      	movs	r5, #0
}
    3c0a:	4628      	mov	r0, r5
    3c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    3c0e:	4b09      	ldr	r3, [pc, #36]	; (3c34 <le_param_req+0x3c>)
    3c10:	681c      	ldr	r4, [r3, #0]
    3c12:	2c00      	cmp	r4, #0
    3c14:	d0f9      	beq.n	3c0a <le_param_req+0x12>
		if (!cb->le_param_req) {
    3c16:	68a3      	ldr	r3, [r4, #8]
    3c18:	b90b      	cbnz	r3, 3c1e <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    3c1a:	6924      	ldr	r4, [r4, #16]
    3c1c:	e7f9      	b.n	3c12 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    3c1e:	4631      	mov	r1, r6
    3c20:	4638      	mov	r0, r7
    3c22:	4798      	blx	r3
    3c24:	2800      	cmp	r0, #0
    3c26:	d0ef      	beq.n	3c08 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    3c28:	4630      	mov	r0, r6
    3c2a:	f7fe fb5f 	bl	22ec <bt_le_conn_params_valid>
    3c2e:	2800      	cmp	r0, #0
    3c30:	d1f3      	bne.n	3c1a <le_param_req+0x22>
    3c32:	e7e9      	b.n	3c08 <le_param_req+0x10>
    3c34:	2000034c 	.word	0x2000034c

00003c38 <bt_conn_cb_register>:
	cb->_next = callback_list;
    3c38:	4b02      	ldr	r3, [pc, #8]	; (3c44 <bt_conn_cb_register+0xc>)
    3c3a:	681a      	ldr	r2, [r3, #0]
    3c3c:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    3c3e:	6018      	str	r0, [r3, #0]
    3c40:	4770      	bx	lr
    3c42:	bf00      	nop
    3c44:	2000034c 	.word	0x2000034c

00003c48 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    3c48:	2a01      	cmp	r2, #1
{
    3c4a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3c4c:	4604      	mov	r4, r0
    3c4e:	460d      	mov	r5, r1
	switch (flags) {
    3c50:	d01b      	beq.n	3c8a <bt_conn_recv+0x42>
    3c52:	2a02      	cmp	r2, #2
    3c54:	d16b      	bne.n	3d2e <bt_conn_recv+0xe6>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    3c56:	688b      	ldr	r3, [r1, #8]
    3c58:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    3c5a:	8943      	ldrh	r3, [r0, #10]
    3c5c:	b15b      	cbz	r3, 3c76 <bt_conn_recv+0x2e>
			BT_ERR("Unexpected first L2CAP frame");
    3c5e:	4b3d      	ldr	r3, [pc, #244]	; (3d54 <bt_conn_recv+0x10c>)
    3c60:	9301      	str	r3, [sp, #4]
    3c62:	9300      	str	r3, [sp, #0]
    3c64:	4a3c      	ldr	r2, [pc, #240]	; (3d58 <bt_conn_recv+0x110>)
    3c66:	4b3d      	ldr	r3, [pc, #244]	; (3d5c <bt_conn_recv+0x114>)
    3c68:	493d      	ldr	r1, [pc, #244]	; (3d60 <bt_conn_recv+0x118>)
    3c6a:	483e      	ldr	r0, [pc, #248]	; (3d64 <bt_conn_recv+0x11c>)
    3c6c:	f7fd f98e 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    3c70:	4620      	mov	r0, r4
    3c72:	f7ff ff83 	bl	3b7c <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    3c76:	89ab      	ldrh	r3, [r5, #12]
    3c78:	1af3      	subs	r3, r6, r3
    3c7a:	3304      	adds	r3, #4
    3c7c:	b29b      	uxth	r3, r3
    3c7e:	8163      	strh	r3, [r4, #10]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    3c80:	2b00      	cmp	r3, #0
    3c82:	d042      	beq.n	3d0a <bt_conn_recv+0xc2>
			conn->rx = buf;
    3c84:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    3c86:	b004      	add	sp, #16
    3c88:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    3c8a:	8943      	ldrh	r3, [r0, #10]
    3c8c:	b98b      	cbnz	r3, 3cb2 <bt_conn_recv+0x6a>
			BT_ERR("Unexpected L2CAP continuation");
    3c8e:	4b31      	ldr	r3, [pc, #196]	; (3d54 <bt_conn_recv+0x10c>)
    3c90:	9301      	str	r3, [sp, #4]
    3c92:	9300      	str	r3, [sp, #0]
    3c94:	4a30      	ldr	r2, [pc, #192]	; (3d58 <bt_conn_recv+0x110>)
    3c96:	4b31      	ldr	r3, [pc, #196]	; (3d5c <bt_conn_recv+0x114>)
    3c98:	4931      	ldr	r1, [pc, #196]	; (3d60 <bt_conn_recv+0x118>)
    3c9a:	4833      	ldr	r0, [pc, #204]	; (3d68 <bt_conn_recv+0x120>)
			BT_ERR("L2CAP data overflow");
    3c9c:	f7fd f976 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    3ca0:	4620      	mov	r0, r4
    3ca2:	f7ff ff6b 	bl	3b7c <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    3ca6:	4628      	mov	r0, r5
}
    3ca8:	b004      	add	sp, #16
    3caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    3cae:	f00e bcbb 	b.w	12628 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    3cb2:	898e      	ldrh	r6, [r1, #12]
    3cb4:	42b3      	cmp	r3, r6
    3cb6:	d207      	bcs.n	3cc8 <bt_conn_recv+0x80>
			BT_ERR("L2CAP data overflow");
    3cb8:	4b26      	ldr	r3, [pc, #152]	; (3d54 <bt_conn_recv+0x10c>)
    3cba:	9301      	str	r3, [sp, #4]
    3cbc:	9300      	str	r3, [sp, #0]
    3cbe:	4a26      	ldr	r2, [pc, #152]	; (3d58 <bt_conn_recv+0x110>)
    3cc0:	4b26      	ldr	r3, [pc, #152]	; (3d5c <bt_conn_recv+0x114>)
    3cc2:	4927      	ldr	r1, [pc, #156]	; (3d60 <bt_conn_recv+0x118>)
    3cc4:	4829      	ldr	r0, [pc, #164]	; (3d6c <bt_conn_recv+0x124>)
    3cc6:	e7e9      	b.n	3c9c <bt_conn_recv+0x54>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    3cc8:	68c0      	ldr	r0, [r0, #12]
    3cca:	3008      	adds	r0, #8
    3ccc:	f00e fd19 	bl	12702 <net_buf_simple_tailroom>
    3cd0:	4286      	cmp	r6, r0
    3cd2:	d907      	bls.n	3ce4 <bt_conn_recv+0x9c>
			BT_ERR("Not enough buffer space for L2CAP data");
    3cd4:	4b1f      	ldr	r3, [pc, #124]	; (3d54 <bt_conn_recv+0x10c>)
    3cd6:	9301      	str	r3, [sp, #4]
    3cd8:	9300      	str	r3, [sp, #0]
    3cda:	4a1f      	ldr	r2, [pc, #124]	; (3d58 <bt_conn_recv+0x110>)
    3cdc:	4b1f      	ldr	r3, [pc, #124]	; (3d5c <bt_conn_recv+0x114>)
    3cde:	4920      	ldr	r1, [pc, #128]	; (3d60 <bt_conn_recv+0x118>)
    3ce0:	4823      	ldr	r0, [pc, #140]	; (3d70 <bt_conn_recv+0x128>)
    3ce2:	e7db      	b.n	3c9c <bt_conn_recv+0x54>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    3ce4:	68e0      	ldr	r0, [r4, #12]
    3ce6:	89aa      	ldrh	r2, [r5, #12]
    3ce8:	68a9      	ldr	r1, [r5, #8]
    3cea:	3008      	adds	r0, #8
    3cec:	f00e fcd4 	bl	12698 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    3cf0:	8963      	ldrh	r3, [r4, #10]
    3cf2:	89aa      	ldrh	r2, [r5, #12]
    3cf4:	1a9b      	subs	r3, r3, r2
    3cf6:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    3cf8:	4628      	mov	r0, r5
    3cfa:	f00e fc95 	bl	12628 <net_buf_unref>
		if (conn->rx_len) {
    3cfe:	8963      	ldrh	r3, [r4, #10]
    3d00:	2b00      	cmp	r3, #0
    3d02:	d1c0      	bne.n	3c86 <bt_conn_recv+0x3e>
		buf = conn->rx;
    3d04:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    3d06:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    3d08:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    3d0a:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    3d0c:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    3d0e:	881a      	ldrh	r2, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    3d10:	1d13      	adds	r3, r2, #4
    3d12:	428b      	cmp	r3, r1
    3d14:	d016      	beq.n	3d44 <bt_conn_recv+0xfc>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    3d16:	4b0f      	ldr	r3, [pc, #60]	; (3d54 <bt_conn_recv+0x10c>)
    3d18:	9303      	str	r3, [sp, #12]
    3d1a:	9102      	str	r1, [sp, #8]
    3d1c:	9201      	str	r2, [sp, #4]
    3d1e:	9300      	str	r3, [sp, #0]
    3d20:	4a0d      	ldr	r2, [pc, #52]	; (3d58 <bt_conn_recv+0x110>)
    3d22:	4b0e      	ldr	r3, [pc, #56]	; (3d5c <bt_conn_recv+0x114>)
    3d24:	490e      	ldr	r1, [pc, #56]	; (3d60 <bt_conn_recv+0x118>)
    3d26:	4813      	ldr	r0, [pc, #76]	; (3d74 <bt_conn_recv+0x12c>)
    3d28:	f7fd f930 	bl	f8c <printk>
    3d2c:	e7bb      	b.n	3ca6 <bt_conn_recv+0x5e>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    3d2e:	4b09      	ldr	r3, [pc, #36]	; (3d54 <bt_conn_recv+0x10c>)
    3d30:	9302      	str	r3, [sp, #8]
	switch (flags) {
    3d32:	9201      	str	r2, [sp, #4]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    3d34:	9300      	str	r3, [sp, #0]
    3d36:	4a08      	ldr	r2, [pc, #32]	; (3d58 <bt_conn_recv+0x110>)
    3d38:	4b08      	ldr	r3, [pc, #32]	; (3d5c <bt_conn_recv+0x114>)
    3d3a:	4909      	ldr	r1, [pc, #36]	; (3d60 <bt_conn_recv+0x118>)
    3d3c:	480e      	ldr	r0, [pc, #56]	; (3d78 <bt_conn_recv+0x130>)
    3d3e:	f7fd f925 	bl	f8c <printk>
    3d42:	e7ad      	b.n	3ca0 <bt_conn_recv+0x58>
	bt_l2cap_recv(conn, buf);
    3d44:	4629      	mov	r1, r5
    3d46:	4620      	mov	r0, r4
}
    3d48:	b004      	add	sp, #16
    3d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    3d4e:	f000 bf53 	b.w	4bf8 <bt_l2cap_recv>
    3d52:	bf00      	nop
    3d54:	000142a9 	.word	0x000142a9
    3d58:	00014ff8 	.word	0x00014ff8
    3d5c:	000152d8 	.word	0x000152d8
    3d60:	00015047 	.word	0x00015047
    3d64:	00015324 	.word	0x00015324
    3d68:	00015351 	.word	0x00015351
    3d6c:	0001537f 	.word	0x0001537f
    3d70:	000153a3 	.word	0x000153a3
    3d74:	00015408 	.word	0x00015408
    3d78:	000153da 	.word	0x000153da

00003d7c <bt_conn_send_cb>:
int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    3d7c:	7a43      	ldrb	r3, [r0, #9]
    3d7e:	2b03      	cmp	r3, #3
{
    3d80:	b513      	push	{r0, r1, r4, lr}
    3d82:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    3d84:	d00f      	beq.n	3da6 <bt_conn_send_cb+0x2a>
		BT_ERR("not connected!");
    3d86:	4b0b      	ldr	r3, [pc, #44]	; (3db4 <bt_conn_send_cb+0x38>)
    3d88:	9301      	str	r3, [sp, #4]
    3d8a:	9300      	str	r3, [sp, #0]
    3d8c:	4a0a      	ldr	r2, [pc, #40]	; (3db8 <bt_conn_send_cb+0x3c>)
    3d8e:	4b0b      	ldr	r3, [pc, #44]	; (3dbc <bt_conn_send_cb+0x40>)
    3d90:	490b      	ldr	r1, [pc, #44]	; (3dc0 <bt_conn_send_cb+0x44>)
    3d92:	480c      	ldr	r0, [pc, #48]	; (3dc4 <bt_conn_send_cb+0x48>)
    3d94:	f7fd f8fa 	bl	f8c <printk>
		net_buf_unref(buf);
    3d98:	4620      	mov	r0, r4
    3d9a:	f00e fc45 	bl	12628 <net_buf_unref>
		return -ENOTCONN;
    3d9e:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    3da2:	b002      	add	sp, #8
    3da4:	bd10      	pop	{r4, pc}
	net_buf_put(&conn->tx_queue, buf);
    3da6:	3028      	adds	r0, #40	; 0x28
	conn_tx(buf)->cb = cb;
    3da8:	614a      	str	r2, [r1, #20]
	net_buf_put(&conn->tx_queue, buf);
    3daa:	f00e fc30 	bl	1260e <net_buf_put>
	return 0;
    3dae:	2000      	movs	r0, #0
    3db0:	e7f7      	b.n	3da2 <bt_conn_send_cb+0x26>
    3db2:	bf00      	nop
    3db4:	000142a9 	.word	0x000142a9
    3db8:	00014ff8 	.word	0x00014ff8
    3dbc:	000152e5 	.word	0x000152e5
    3dc0:	00015047 	.word	0x00015047
    3dc4:	00015434 	.word	0x00015434

00003dc8 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    3dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3dcc:	4d0d      	ldr	r5, [pc, #52]	; (3e04 <bt_conn_notify_tx+0x3c>)
    3dce:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    3dd0:	f100 0718 	add.w	r7, r0, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    3dd4:	f04f 0800 	mov.w	r8, #0
    3dd8:	2100      	movs	r1, #0
    3dda:	4638      	mov	r0, r7
    3ddc:	f00f fa0c 	bl	131f8 <_impl_k_queue_get>
    3de0:	4604      	mov	r4, r0
    3de2:	b908      	cbnz	r0, 3de8 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    3de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    3de8:	6863      	ldr	r3, [r4, #4]
    3dea:	b10b      	cbz	r3, 3df0 <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    3dec:	4630      	mov	r0, r6
    3dee:	4798      	blx	r3
    3df0:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    3df2:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    3df4:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    3df6:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    3dfa:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    3dfc:	2b00      	cmp	r3, #0
    3dfe:	d1eb      	bne.n	3dd8 <bt_conn_notify_tx+0x10>
	list->tail = node;
    3e00:	606c      	str	r4, [r5, #4]
    3e02:	e7e7      	b.n	3dd4 <bt_conn_notify_tx+0xc>
    3e04:	200003f8 	.word	0x200003f8

00003e08 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    3e08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    3e0c:	4605      	mov	r5, r0
    3e0e:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3e10:	4844      	ldr	r0, [pc, #272]	; (3f24 <send_frag+0x11c>)
    3e12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3e16:	4698      	mov	r8, r3
    3e18:	4614      	mov	r4, r2
    3e1a:	f00f fcb6 	bl	1378a <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    3e1e:	4b42      	ldr	r3, [pc, #264]	; (3f28 <send_frag+0x120>)
    3e20:	f103 0040 	add.w	r0, r3, #64	; 0x40
    3e24:	f7ff fea4 	bl	3b70 <atomic_get>
    3e28:	b130      	cbz	r0, 3e38 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    3e2a:	7a5a      	ldrb	r2, [r3, #9]
    3e2c:	3a03      	subs	r2, #3
    3e2e:	2a01      	cmp	r2, #1
    3e30:	d802      	bhi.n	3e38 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    3e32:	4618      	mov	r0, r3
    3e34:	f7ff ffc8 	bl	3dc8 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    3e38:	7a6b      	ldrb	r3, [r5, #9]
    3e3a:	2b03      	cmp	r3, #3
    3e3c:	d153      	bne.n	3ee6 <send_frag+0xde>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    3e3e:	2104      	movs	r1, #4
    3e40:	f107 0008 	add.w	r0, r7, #8
    3e44:	f00e fc39 	bl	126ba <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    3e48:	882a      	ldrh	r2, [r5, #0]
    3e4a:	4e38      	ldr	r6, [pc, #224]	; (3f2c <send_frag+0x124>)
    3e4c:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    3e50:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3e52:	89bb      	ldrh	r3, [r7, #12]
    3e54:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3e56:	6871      	ldr	r1, [r6, #4]

	cb = conn_tx(buf)->cb;
    3e58:	697a      	ldr	r2, [r7, #20]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3e5a:	3b04      	subs	r3, #4
    3e5c:	8043      	strh	r3, [r0, #2]
    3e5e:	2302      	movs	r3, #2
    3e60:	753b      	strb	r3, [r7, #20]
	return node->next;
    3e62:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    3e64:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3e66:	428c      	cmp	r4, r1
	list->tail = node;
    3e68:	bf08      	it	eq
    3e6a:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    3e6c:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    3e6e:	f04f 0320 	mov.w	r3, #32
    3e72:	f3ef 8211 	mrs	r2, BASEPRI
    3e76:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    3e7a:	2300      	movs	r3, #0
    3e7c:	6023      	str	r3, [r4, #0]
    3e7e:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    3e80:	2b00      	cmp	r3, #0
    3e82:	d13f      	bne.n	3f04 <send_frag+0xfc>
	list->tail = node;
    3e84:	616c      	str	r4, [r5, #20]
	list->head = node;
    3e86:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3e88:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    3e8c:	4638      	mov	r0, r7
    3e8e:	f7fe fad9 	bl	2444 <bt_send>
	if (err) {
    3e92:	2800      	cmp	r0, #0
    3e94:	d042      	beq.n	3f1c <send_frag+0x114>
		BT_ERR("Unable to send to driver (err %d)", err);
    3e96:	4b26      	ldr	r3, [pc, #152]	; (3f30 <send_frag+0x128>)
    3e98:	9302      	str	r3, [sp, #8]
    3e9a:	9001      	str	r0, [sp, #4]
    3e9c:	9300      	str	r3, [sp, #0]
    3e9e:	4a25      	ldr	r2, [pc, #148]	; (3f34 <send_frag+0x12c>)
    3ea0:	4b25      	ldr	r3, [pc, #148]	; (3f38 <send_frag+0x130>)
    3ea2:	4926      	ldr	r1, [pc, #152]	; (3f3c <send_frag+0x134>)
    3ea4:	4826      	ldr	r0, [pc, #152]	; (3f40 <send_frag+0x138>)
    3ea6:	f7fd f871 	bl	f8c <printk>
	__asm__ volatile(
    3eaa:	f04f 0320 	mov.w	r3, #32
    3eae:	f3ef 8111 	mrs	r1, BASEPRI
    3eb2:	f383 8811 	msr	BASEPRI, r3
    3eb6:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    3eb8:	2200      	movs	r2, #0
    3eba:	b153      	cbz	r3, 3ed2 <send_frag+0xca>
    3ebc:	429c      	cmp	r4, r3
    3ebe:	d12a      	bne.n	3f16 <send_frag+0x10e>
    3ec0:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    3ec2:	bb12      	cbnz	r2, 3f0a <send_frag+0x102>
    3ec4:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    3ec6:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    3ec8:	4294      	cmp	r4, r2
    3eca:	d100      	bne.n	3ece <send_frag+0xc6>
	list->tail = node;
    3ecc:	616b      	str	r3, [r5, #20]
	parent->next = child;
    3ece:	2300      	movs	r3, #0
    3ed0:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3ed2:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    3ed6:	2300      	movs	r3, #0
    3ed8:	6063      	str	r3, [r4, #4]
    3eda:	6833      	ldr	r3, [r6, #0]
    3edc:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    3ede:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    3ee0:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    3ee2:	b903      	cbnz	r3, 3ee6 <send_frag+0xde>
	list->tail = node;
    3ee4:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3ee6:	480f      	ldr	r0, [pc, #60]	; (3f24 <send_frag+0x11c>)
    3ee8:	f00f fc27 	bl	1373a <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    3eec:	f1b8 0f00 	cmp.w	r8, #0
    3ef0:	d004      	beq.n	3efc <send_frag+0xf4>
		net_buf_unref(buf);
    3ef2:	4638      	mov	r0, r7
    3ef4:	f00e fb98 	bl	12628 <net_buf_unref>
	}
	return false;
    3ef8:	f04f 0800 	mov.w	r8, #0
}
    3efc:	4640      	mov	r0, r8
    3efe:	b004      	add	sp, #16
    3f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	parent->next = child;
    3f04:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3f06:	616c      	str	r4, [r5, #20]
    3f08:	e7be      	b.n	3e88 <send_frag+0x80>
	parent->next = child;
    3f0a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    3f0c:	696b      	ldr	r3, [r5, #20]
    3f0e:	429c      	cmp	r4, r3
	list->tail = node;
    3f10:	bf08      	it	eq
    3f12:	616a      	streq	r2, [r5, #20]
    3f14:	e7db      	b.n	3ece <send_frag+0xc6>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    3f16:	461a      	mov	r2, r3
    3f18:	681b      	ldr	r3, [r3, #0]
    3f1a:	e7ce      	b.n	3eba <send_frag+0xb2>
	return true;
    3f1c:	f04f 0801 	mov.w	r8, #1
    3f20:	e7ec      	b.n	3efc <send_frag+0xf4>
    3f22:	bf00      	nop
    3f24:	20003aec 	.word	0x20003aec
    3f28:	20000360 	.word	0x20000360
    3f2c:	200003f8 	.word	0x200003f8
    3f30:	000142a9 	.word	0x000142a9
    3f34:	00014ff8 	.word	0x00014ff8
    3f38:	000152f5 	.word	0x000152f5
    3f3c:	00015047 	.word	0x00015047
    3f40:	00014a81 	.word	0x00014a81

00003f44 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    3f44:	b538      	push	{r3, r4, r5, lr}
    3f46:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    3f48:	f100 0528 	add.w	r5, r0, #40	; 0x28
    3f4c:	2100      	movs	r1, #0
    3f4e:	4628      	mov	r0, r5
    3f50:	f00e fb40 	bl	125d4 <net_buf_get>
    3f54:	b958      	cbnz	r0, 3f6e <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
    3f56:	4620      	mov	r0, r4
    3f58:	f7ff ff36 	bl	3dc8 <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
    3f5c:	4620      	mov	r0, r4
    3f5e:	f7ff fe0d 	bl	3b7c <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    3f62:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
    3f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    3f6a:	f7ff be12 	b.w	3b92 <atomic_dec>
		net_buf_unref(buf);
    3f6e:	f00e fb5b 	bl	12628 <net_buf_unref>
    3f72:	e7eb      	b.n	3f4c <conn_cleanup+0x8>

00003f74 <bt_conn_prepare_events>:
{
    3f74:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
    3f76:	4b1f      	ldr	r3, [pc, #124]	; (3ff4 <bt_conn_prepare_events+0x80>)
    3f78:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    3f7a:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    3f7c:	609a      	str	r2, [r3, #8]
{
    3f7e:	4605      	mov	r5, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    3f80:	f010 f809 	bl	13f96 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    3f84:	4b1c      	ldr	r3, [pc, #112]	; (3ff8 <bt_conn_prepare_events+0x84>)
    3f86:	f103 0040 	add.w	r0, r3, #64	; 0x40
    3f8a:	f7ff fdf1 	bl	3b70 <atomic_get>
    3f8e:	4619      	mov	r1, r3
    3f90:	b908      	cbnz	r0, 3f96 <bt_conn_prepare_events+0x22>
			continue;
    3f92:	2001      	movs	r0, #1
    3f94:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    3f96:	7a5a      	ldrb	r2, [r3, #9]
    3f98:	b99a      	cbnz	r2, 3fc2 <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3f9a:	f3bf 8f5b 	dmb	ish
    3f9e:	1d1a      	adds	r2, r3, #4
    3fa0:	e852 0f00 	ldrex	r0, [r2]
    3fa4:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    3fa8:	e842 4e00 	strex	lr, r4, [r2]
    3fac:	f1be 0f00 	cmp.w	lr, #0
    3fb0:	d1f6      	bne.n	3fa0 <bt_conn_prepare_events+0x2c>
    3fb2:	f3bf 8f5b 	dmb	ish
    3fb6:	0642      	lsls	r2, r0, #25
    3fb8:	d503      	bpl.n	3fc2 <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    3fba:	4618      	mov	r0, r3
    3fbc:	f7ff ffc2 	bl	3f44 <conn_cleanup>
    3fc0:	e7e7      	b.n	3f92 <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    3fc2:	7a4c      	ldrb	r4, [r1, #9]
    3fc4:	2c03      	cmp	r4, #3
    3fc6:	d1e4      	bne.n	3f92 <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    3fc8:	f105 0014 	add.w	r0, r5, #20
    3fcc:	4b0b      	ldr	r3, [pc, #44]	; (3ffc <bt_conn_prepare_events+0x88>)
    3fce:	2200      	movs	r2, #0
    3fd0:	2104      	movs	r1, #4
    3fd2:	f00f ffe0 	bl	13f96 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    3fd6:	2301      	movs	r3, #1
    3fd8:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
    3fdc:	f105 0028 	add.w	r0, r5, #40	; 0x28
    3fe0:	4b07      	ldr	r3, [pc, #28]	; (4000 <bt_conn_prepare_events+0x8c>)
    3fe2:	2200      	movs	r2, #0
    3fe4:	2104      	movs	r1, #4
    3fe6:	f00f ffd6 	bl	13f96 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    3fea:	2302      	movs	r3, #2
    3fec:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    3ff0:	4620      	mov	r0, r4
}
    3ff2:	bd38      	pop	{r3, r4, r5, pc}
    3ff4:	20003b88 	.word	0x20003b88
    3ff8:	20000360 	.word	0x20000360
    3ffc:	20000378 	.word	0x20000378
    4000:	20000388 	.word	0x20000388

00004004 <bt_conn_add_le>:
{
    4004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    4006:	4c17      	ldr	r4, [pc, #92]	; (4064 <bt_conn_add_le+0x60>)
    4008:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    400c:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    400e:	4630      	mov	r0, r6
    4010:	f7ff fdae 	bl	3b70 <atomic_get>
    4014:	4605      	mov	r5, r0
    4016:	b108      	cbz	r0, 401c <bt_conn_add_le+0x18>
		return NULL;
    4018:	2000      	movs	r0, #0
    401a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    401c:	4601      	mov	r1, r0
    401e:	2298      	movs	r2, #152	; 0x98
    4020:	4620      	mov	r0, r4
    4022:	f7fd fe17 	bl	1c54 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4026:	f3bf 8f5b 	dmb	ish
    402a:	2301      	movs	r3, #1
    402c:	e856 2f00 	ldrex	r2, [r6]
    4030:	e846 3100 	strex	r1, r3, [r6]
    4034:	2900      	cmp	r1, #0
    4036:	d1f9      	bne.n	402c <bt_conn_add_le+0x28>
    4038:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    403c:	2207      	movs	r2, #7
    403e:	4639      	mov	r1, r7
    4040:	f104 0044 	add.w	r0, r4, #68	; 0x44
    4044:	f7fd fdda 	bl	1bfc <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    4048:	2318      	movs	r3, #24
    404a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    404e:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4050:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    4054:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4056:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    405a:	4903      	ldr	r1, [pc, #12]	; (4068 <bt_conn_add_le+0x64>)
    405c:	f00f fe54 	bl	13d08 <k_delayed_work_init>
			conn = &conns[i];
    4060:	4620      	mov	r0, r4
}
    4062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4064:	20000360 	.word	0x20000360
    4068:	000045b9 	.word	0x000045b9

0000406c <bt_conn_set_state>:
{
    406c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == state) {
    406e:	7a45      	ldrb	r5, [r0, #9]
    4070:	428d      	cmp	r5, r1
{
    4072:	b085      	sub	sp, #20
    4074:	4604      	mov	r4, r0
    4076:	460e      	mov	r6, r1
	if (conn->state == state) {
    4078:	d10a      	bne.n	4090 <bt_conn_set_state+0x24>
		BT_WARN("no transition");
    407a:	4b5f      	ldr	r3, [pc, #380]	; (41f8 <bt_conn_set_state+0x18c>)
    407c:	9301      	str	r3, [sp, #4]
    407e:	9300      	str	r3, [sp, #0]
    4080:	4a5e      	ldr	r2, [pc, #376]	; (41fc <bt_conn_set_state+0x190>)
    4082:	4b5f      	ldr	r3, [pc, #380]	; (4200 <bt_conn_set_state+0x194>)
    4084:	495f      	ldr	r1, [pc, #380]	; (4204 <bt_conn_set_state+0x198>)
    4086:	4860      	ldr	r0, [pc, #384]	; (4208 <bt_conn_set_state+0x19c>)
    4088:	f7fc ff80 	bl	f8c <printk>
}
    408c:	b005      	add	sp, #20
    408e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->state = state;
    4090:	7261      	strb	r1, [r4, #9]
	switch (old_state) {
    4092:	b19d      	cbz	r5, 40bc <bt_conn_set_state+0x50>
    4094:	2d02      	cmp	r5, #2
    4096:	d015      	beq.n	40c4 <bt_conn_set_state+0x58>
	switch (conn->state) {
    4098:	7a63      	ldrb	r3, [r4, #9]
    409a:	2b04      	cmp	r3, #4
    409c:	f200 80a1 	bhi.w	41e2 <bt_conn_set_state+0x176>
    40a0:	a201      	add	r2, pc, #4	; (adr r2, 40a8 <bt_conn_set_state+0x3c>)
    40a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    40a6:	bf00      	nop
    40a8:	00004109 	.word	0x00004109
    40ac:	0000408d 	.word	0x0000408d
    40b0:	000041c7 	.word	0x000041c7
    40b4:	000040d3 	.word	0x000040d3
    40b8:	0000408d 	.word	0x0000408d
	atomic_inc(&conn->ref);
    40bc:	3040      	adds	r0, #64	; 0x40
    40be:	f7ff fd75 	bl	3bac <atomic_inc>
    40c2:	e7e9      	b.n	4098 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    40c4:	7883      	ldrb	r3, [r0, #2]
    40c6:	2b00      	cmp	r3, #0
    40c8:	d1e6      	bne.n	4098 <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->le.update_work);
    40ca:	3070      	adds	r0, #112	; 0x70
    40cc:	f00f fe2c 	bl	13d28 <k_delayed_work_cancel>
    40d0:	e7e2      	b.n	4098 <bt_conn_set_state+0x2c>
		if (conn->type == BT_CONN_TYPE_SCO) {
    40d2:	78a3      	ldrb	r3, [r4, #2]
    40d4:	2b02      	cmp	r3, #2
    40d6:	d0d9      	beq.n	408c <bt_conn_set_state+0x20>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    40d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    40dc:	f00f f860 	bl	131a0 <_impl_k_queue_init>
    40e0:	f104 0018 	add.w	r0, r4, #24
    40e4:	f00f f85c 	bl	131a0 <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    40e8:	2100      	movs	r1, #0
    40ea:	4848      	ldr	r0, [pc, #288]	; (420c <bt_conn_set_state+0x1a0>)
    40ec:	f00f fff6 	bl	140dc <_impl_k_poll_signal>
	list->head = NULL;
    40f0:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    40f2:	4620      	mov	r0, r4
    40f4:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    40f6:	63e3      	str	r3, [r4, #60]	; 0x3c
    40f8:	f000 fc1c 	bl	4934 <bt_l2cap_connected>
		notify_connected(conn);
    40fc:	4620      	mov	r0, r4
}
    40fe:	b005      	add	sp, #20
    4100:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		notify_connected(conn);
    4104:	f7ff bd24 	b.w	3b50 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4108:	78a3      	ldrb	r3, [r4, #2]
    410a:	2b02      	cmp	r3, #2
    410c:	d106      	bne.n	411c <bt_conn_set_state+0xb0>
	atomic_dec(&conn->ref);
    410e:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
    4112:	b005      	add	sp, #20
    4114:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    4118:	f7ff bd3b 	b.w	3b92 <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    411c:	1eeb      	subs	r3, r5, #3
    411e:	2b01      	cmp	r3, #1
    4120:	d844      	bhi.n	41ac <bt_conn_set_state+0x140>
			bt_l2cap_disconnected(conn);
    4122:	4620      	mov	r0, r4
    4124:	f000 fc40 	bl	49a8 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    4128:	4b39      	ldr	r3, [pc, #228]	; (4210 <bt_conn_set_state+0x1a4>)
    412a:	681d      	ldr	r5, [r3, #0]
    412c:	b9ed      	cbnz	r5, 416a <bt_conn_set_state+0xfe>
    412e:	4e39      	ldr	r6, [pc, #228]	; (4214 <bt_conn_set_state+0x1a8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4130:	4f39      	ldr	r7, [pc, #228]	; (4218 <bt_conn_set_state+0x1ac>)
	__asm__ volatile(
    4132:	f04f 0320 	mov.w	r3, #32
    4136:	f3ef 8111 	mrs	r1, BASEPRI
    413a:	f383 8811 	msr	BASEPRI, r3
    413e:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    4140:	b12b      	cbz	r3, 414e <bt_conn_set_state+0xe2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4142:	6960      	ldr	r0, [r4, #20]
	return node->next;
    4144:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    4146:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4148:	4283      	cmp	r3, r0
	list->tail = node;
    414a:	bf08      	it	eq
    414c:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    414e:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    4152:	b18b      	cbz	r3, 4178 <bt_conn_set_state+0x10c>
    4154:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    4156:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4158:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    415a:	605d      	str	r5, [r3, #4]
	list->head = node;
    415c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    415e:	b902      	cbnz	r2, 4162 <bt_conn_set_state+0xf6>
	list->tail = node;
    4160:	6073      	str	r3, [r6, #4]
    4162:	4638      	mov	r0, r7
    4164:	f00f fae9 	bl	1373a <_impl_k_sem_give>
    4168:	e7e3      	b.n	4132 <bt_conn_set_state+0xc6>
		if (cb->disconnected) {
    416a:	686b      	ldr	r3, [r5, #4]
    416c:	b113      	cbz	r3, 4174 <bt_conn_set_state+0x108>
			cb->disconnected(conn, conn->err);
    416e:	7a21      	ldrb	r1, [r4, #8]
    4170:	4620      	mov	r0, r4
    4172:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    4174:	692d      	ldr	r5, [r5, #16]
    4176:	e7d9      	b.n	412c <bt_conn_set_state+0xc0>
			if (conn->type == BT_CONN_TYPE_LE) {
    4178:	78a3      	ldrb	r3, [r4, #2]
    417a:	b91b      	cbnz	r3, 4184 <bt_conn_set_state+0x118>
				k_delayed_work_cancel(&conn->le.update_work);
    417c:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4180:	f00f fdd2 	bl	13d28 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4184:	f3bf 8f5b 	dmb	ish
    4188:	3404      	adds	r4, #4
    418a:	e854 3f00 	ldrex	r3, [r4]
    418e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4192:	e844 3200 	strex	r2, r3, [r4]
    4196:	2a00      	cmp	r2, #0
    4198:	d1f7      	bne.n	418a <bt_conn_set_state+0x11e>
    419a:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    419e:	481b      	ldr	r0, [pc, #108]	; (420c <bt_conn_set_state+0x1a0>)
    41a0:	2100      	movs	r1, #0
}
    41a2:	b005      	add	sp, #20
    41a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    41a8:	f00f bf98 	b.w	140dc <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    41ac:	2d02      	cmp	r5, #2
    41ae:	d103      	bne.n	41b8 <bt_conn_set_state+0x14c>
			notify_connected(conn);
    41b0:	4620      	mov	r0, r4
    41b2:	f7ff fccd 	bl	3b50 <notify_connected>
    41b6:	e7aa      	b.n	410e <bt_conn_set_state+0xa2>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    41b8:	2d01      	cmp	r5, #1
    41ba:	f47f af67 	bne.w	408c <bt_conn_set_state+0x20>
			if (conn->err) {
    41be:	7a23      	ldrb	r3, [r4, #8]
    41c0:	2b00      	cmp	r3, #0
    41c2:	d0a4      	beq.n	410e <bt_conn_set_state+0xa2>
    41c4:	e7f4      	b.n	41b0 <bt_conn_set_state+0x144>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    41c6:	78a3      	ldrb	r3, [r4, #2]
    41c8:	2b00      	cmp	r3, #0
    41ca:	f47f af5f 	bne.w	408c <bt_conn_set_state+0x20>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    41ce:	4813      	ldr	r0, [pc, #76]	; (421c <bt_conn_set_state+0x1b0>)
    41d0:	f640 32b8 	movw	r2, #3000	; 0xbb8
    41d4:	f104 0170 	add.w	r1, r4, #112	; 0x70
}
    41d8:	b005      	add	sp, #20
    41da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    41de:	f00f be07 	b.w	13df0 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    41e2:	4b05      	ldr	r3, [pc, #20]	; (41f8 <bt_conn_set_state+0x18c>)
    41e4:	9302      	str	r3, [sp, #8]
    41e6:	e88d 0048 	stmia.w	sp, {r3, r6}
    41ea:	4a04      	ldr	r2, [pc, #16]	; (41fc <bt_conn_set_state+0x190>)
    41ec:	4b04      	ldr	r3, [pc, #16]	; (4200 <bt_conn_set_state+0x194>)
    41ee:	4905      	ldr	r1, [pc, #20]	; (4204 <bt_conn_set_state+0x198>)
    41f0:	480b      	ldr	r0, [pc, #44]	; (4220 <bt_conn_set_state+0x1b4>)
    41f2:	f7fc fecb 	bl	f8c <printk>
		break;
    41f6:	e749      	b.n	408c <bt_conn_set_state+0x20>
    41f8:	000142a9 	.word	0x000142a9
    41fc:	00015040 	.word	0x00015040
    4200:	00015312 	.word	0x00015312
    4204:	00015047 	.word	0x00015047
    4208:	00015453 	.word	0x00015453
    420c:	20003b88 	.word	0x20003b88
    4210:	2000034c 	.word	0x2000034c
    4214:	200003f8 	.word	0x200003f8
    4218:	20003aec 	.word	0x20003aec
    421c:	20001988 	.word	0x20001988
    4220:	00015471 	.word	0x00015471

00004224 <bt_conn_lookup_handle>:
{
    4224:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    4226:	4c0b      	ldr	r4, [pc, #44]	; (4254 <bt_conn_lookup_handle+0x30>)
{
    4228:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    422a:	f104 0040 	add.w	r0, r4, #64	; 0x40
    422e:	f7ff fc9f 	bl	3b70 <atomic_get>
    4232:	b168      	cbz	r0, 4250 <bt_conn_lookup_handle+0x2c>
		if (conns[i].state != BT_CONN_CONNECTED &&
    4234:	7a63      	ldrb	r3, [r4, #9]
    4236:	3b03      	subs	r3, #3
    4238:	2b01      	cmp	r3, #1
    423a:	d808      	bhi.n	424e <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    423c:	8823      	ldrh	r3, [r4, #0]
    423e:	4293      	cmp	r3, r2
    4240:	d105      	bne.n	424e <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    4242:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4246:	f7ff fcb1 	bl	3bac <atomic_inc>
			return bt_conn_ref(&conns[i]);
    424a:	4620      	mov	r0, r4
    424c:	bd10      	pop	{r4, pc}
	return NULL;
    424e:	2000      	movs	r0, #0
}
    4250:	bd10      	pop	{r4, pc}
    4252:	bf00      	nop
    4254:	20000360 	.word	0x20000360

00004258 <bt_conn_addr_le_cmp>:
{
    4258:	b538      	push	{r3, r4, r5, lr}
    425a:	460d      	mov	r5, r1
    425c:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    425e:	f100 0144 	add.w	r1, r0, #68	; 0x44
    4262:	2207      	movs	r2, #7
    4264:	4628      	mov	r0, r5
    4266:	f7fd fcb4 	bl	1bd2 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    426a:	b160      	cbz	r0, 4286 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    426c:	78e3      	ldrb	r3, [r4, #3]
    426e:	2207      	movs	r2, #7
    4270:	b933      	cbnz	r3, 4280 <bt_conn_addr_le_cmp+0x28>
    4272:	f104 0152 	add.w	r1, r4, #82	; 0x52
    4276:	4628      	mov	r0, r5
}
    4278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    427c:	f7fd bca9 	b.w	1bd2 <memcmp>
    4280:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    4284:	e7f7      	b.n	4276 <bt_conn_addr_le_cmp+0x1e>
    4286:	bd38      	pop	{r3, r4, r5, pc}

00004288 <bt_conn_lookup_addr_le>:
{
    4288:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    428a:	4c0b      	ldr	r4, [pc, #44]	; (42b8 <bt_conn_lookup_addr_le+0x30>)
{
    428c:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    428e:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4292:	f7ff fc6d 	bl	3b70 <atomic_get>
    4296:	b908      	cbnz	r0, 429c <bt_conn_lookup_addr_le+0x14>
	return NULL;
    4298:	2000      	movs	r0, #0
    429a:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    429c:	78a3      	ldrb	r3, [r4, #2]
    429e:	2b00      	cmp	r3, #0
    42a0:	d1fa      	bne.n	4298 <bt_conn_lookup_addr_le+0x10>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    42a2:	4620      	mov	r0, r4
    42a4:	f7ff ffd8 	bl	4258 <bt_conn_addr_le_cmp>
    42a8:	2800      	cmp	r0, #0
    42aa:	d1f5      	bne.n	4298 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    42ac:	f104 0040 	add.w	r0, r4, #64	; 0x40
    42b0:	f7ff fc7c 	bl	3bac <atomic_inc>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    42b4:	4620      	mov	r0, r4
}
    42b6:	bd10      	pop	{r4, pc}
    42b8:	20000360 	.word	0x20000360

000042bc <bt_conn_lookup_state_le>:
{
    42bc:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    42be:	4c0e      	ldr	r4, [pc, #56]	; (42f8 <bt_conn_lookup_state_le+0x3c>)
{
    42c0:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    42c2:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    42c6:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    42c8:	f7ff fc52 	bl	3b70 <atomic_get>
    42cc:	b908      	cbnz	r0, 42d2 <bt_conn_lookup_state_le+0x16>
	return NULL;
    42ce:	2000      	movs	r0, #0
    42d0:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    42d2:	78a2      	ldrb	r2, [r4, #2]
    42d4:	2a00      	cmp	r2, #0
    42d6:	d1fa      	bne.n	42ce <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    42d8:	b93b      	cbnz	r3, 42ea <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    42da:	7a63      	ldrb	r3, [r4, #9]
    42dc:	42ab      	cmp	r3, r5
    42de:	d1f6      	bne.n	42ce <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    42e0:	4806      	ldr	r0, [pc, #24]	; (42fc <bt_conn_lookup_state_le+0x40>)
    42e2:	f7ff fc63 	bl	3bac <atomic_inc>
			return bt_conn_ref(&conns[i]);
    42e6:	4804      	ldr	r0, [pc, #16]	; (42f8 <bt_conn_lookup_state_le+0x3c>)
}
    42e8:	bd38      	pop	{r3, r4, r5, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    42ea:	4619      	mov	r1, r3
    42ec:	4620      	mov	r0, r4
    42ee:	f7ff ffb3 	bl	4258 <bt_conn_addr_le_cmp>
    42f2:	2800      	cmp	r0, #0
    42f4:	d1eb      	bne.n	42ce <bt_conn_lookup_state_le+0x12>
    42f6:	e7f0      	b.n	42da <bt_conn_lookup_state_le+0x1e>
    42f8:	20000360 	.word	0x20000360
    42fc:	200003a0 	.word	0x200003a0

00004300 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    4300:	3040      	adds	r0, #64	; 0x40
    4302:	f7ff bc46 	b.w	3b92 <atomic_dec>

00004306 <bt_conn_get_dst>:
}

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    4306:	3044      	adds	r0, #68	; 0x44
    4308:	4770      	bx	lr
	...

0000430c <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    430c:	b570      	push	{r4, r5, r6, lr}
    430e:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    4310:	4608      	mov	r0, r1
{
    4312:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    4314:	f7fd ffea 	bl	22ec <bt_le_conn_params_valid>
    4318:	b908      	cbnz	r0, 431e <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    431a:	2400      	movs	r4, #0
    431c:	e01d      	b.n	435a <bt_conn_create_le+0x4e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    431e:	481e      	ldr	r0, [pc, #120]	; (4398 <bt_conn_create_le+0x8c>)
    4320:	f7ff fc26 	bl	3b70 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4324:	0583      	lsls	r3, r0, #22
    4326:	d4f8      	bmi.n	431a <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    4328:	4630      	mov	r0, r6
    432a:	f7ff ffad 	bl	4288 <bt_conn_lookup_addr_le>
	if (conn) {
    432e:	4604      	mov	r4, r0
    4330:	b1a8      	cbz	r0, 435e <bt_conn_create_le+0x52>
		switch (conn->state) {
    4332:	7a43      	ldrb	r3, [r0, #9]
    4334:	2b01      	cmp	r3, #1
    4336:	d007      	beq.n	4348 <bt_conn_create_le+0x3c>
    4338:	d301      	bcc.n	433e <bt_conn_create_le+0x32>
    433a:	2b03      	cmp	r3, #3
    433c:	d90d      	bls.n	435a <bt_conn_create_le+0x4e>
	atomic_dec(&conn->ref);
    433e:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4342:	f7ff fc26 	bl	3b92 <atomic_dec>
    4346:	e7e8      	b.n	431a <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    4348:	886b      	ldrh	r3, [r5, #2]
    434a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    434e:	88ab      	ldrh	r3, [r5, #4]
    4350:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4354:	88eb      	ldrh	r3, [r5, #6]
    4356:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    435a:	4620      	mov	r0, r4
    435c:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    435e:	4630      	mov	r0, r6
    4360:	f7ff fe50 	bl	4004 <bt_conn_add_le>
	if (!conn) {
    4364:	4604      	mov	r4, r0
    4366:	2800      	cmp	r0, #0
    4368:	d0f7      	beq.n	435a <bt_conn_create_le+0x4e>
	memcpy(dst, src, sizeof(*dst));
    436a:	2207      	movs	r2, #7
    436c:	4631      	mov	r1, r6
    436e:	3052      	adds	r0, #82	; 0x52
    4370:	f7fd fc44 	bl	1bfc <memcpy>
	conn->le.interval_max = param->interval_max;
    4374:	886b      	ldrh	r3, [r5, #2]
    4376:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    437a:	88ab      	ldrh	r3, [r5, #4]
    437c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4380:	88eb      	ldrh	r3, [r5, #6]
    4382:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4386:	4620      	mov	r0, r4
    4388:	2101      	movs	r1, #1
    438a:	f7ff fe6f 	bl	406c <bt_conn_set_state>
	bt_le_scan_update(true);
    438e:	2001      	movs	r0, #1
    4390:	f7fe f8e8 	bl	2564 <bt_le_scan_update>
	return conn;
    4394:	e7e1      	b.n	435a <bt_conn_create_le+0x4e>
    4396:	bf00      	nop
    4398:	20003ad0 	.word	0x20003ad0

0000439c <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    439c:	b570      	push	{r4, r5, r6, lr}
    439e:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    43a0:	460d      	mov	r5, r1
    43a2:	2900      	cmp	r1, #0
    43a4:	d13d      	bne.n	4422 <bt_le_set_auto_conn+0x86>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    43a6:	4630      	mov	r0, r6
    43a8:	f7ff ff6e 	bl	4288 <bt_conn_lookup_addr_le>
	if (!conn) {
    43ac:	4604      	mov	r4, r0
    43ae:	b928      	cbnz	r0, 43bc <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    43b0:	4630      	mov	r0, r6
    43b2:	f7ff fe27 	bl	4004 <bt_conn_add_le>
		if (!conn) {
    43b6:	4604      	mov	r4, r0
    43b8:	2800      	cmp	r0, #0
    43ba:	d053      	beq.n	4464 <bt_le_set_auto_conn+0xc8>
    43bc:	1d23      	adds	r3, r4, #4
    43be:	f104 0640 	add.w	r6, r4, #64	; 0x40
			return -ENOMEM;
		}
	}

	if (param) {
    43c2:	2d00      	cmp	r5, #0
    43c4:	d035      	beq.n	4432 <bt_le_set_auto_conn+0x96>
	conn->le.interval_max = param->interval_max;
    43c6:	886a      	ldrh	r2, [r5, #2]
    43c8:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    43cc:	88aa      	ldrh	r2, [r5, #4]
    43ce:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    43d2:	88ea      	ldrh	r2, [r5, #6]
    43d4:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    43d8:	f3bf 8f5b 	dmb	ish
    43dc:	e853 2f00 	ldrex	r2, [r3]
    43e0:	f042 0101 	orr.w	r1, r2, #1
    43e4:	e843 1000 	strex	r0, r1, [r3]
    43e8:	2800      	cmp	r0, #0
    43ea:	d1f7      	bne.n	43dc <bt_le_set_auto_conn+0x40>
    43ec:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    43f0:	07d1      	lsls	r1, r2, #31
    43f2:	d402      	bmi.n	43fa <bt_le_set_auto_conn+0x5e>
	atomic_inc(&conn->ref);
    43f4:	4630      	mov	r0, r6
    43f6:	f7ff fbd9 	bl	3bac <atomic_inc>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    43fa:	7a63      	ldrb	r3, [r4, #9]
    43fc:	b963      	cbnz	r3, 4418 <bt_le_set_auto_conn+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    43fe:	481b      	ldr	r0, [pc, #108]	; (446c <bt_le_set_auto_conn+0xd0>)
    4400:	f7ff fbb6 	bl	3b70 <atomic_get>
    4404:	0783      	lsls	r3, r0, #30
    4406:	d507      	bpl.n	4418 <bt_le_set_auto_conn+0x7c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    4408:	b11d      	cbz	r5, 4412 <bt_le_set_auto_conn+0x76>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    440a:	2101      	movs	r1, #1
    440c:	4620      	mov	r0, r4
    440e:	f7ff fe2d 	bl	406c <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    4412:	2000      	movs	r0, #0
    4414:	f7fe f8a6 	bl	2564 <bt_le_scan_update>
	atomic_dec(&conn->ref);
    4418:	4630      	mov	r0, r6
    441a:	f7ff fbba 	bl	3b92 <atomic_dec>
	}

	bt_conn_unref(conn);

	return 0;
    441e:	2000      	movs	r0, #0
    4420:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    4422:	4608      	mov	r0, r1
    4424:	f7fd ff62 	bl	22ec <bt_le_conn_params_valid>
    4428:	2800      	cmp	r0, #0
    442a:	d1bc      	bne.n	43a6 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    442c:	f06f 0015 	mvn.w	r0, #21
    4430:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4432:	f3bf 8f5b 	dmb	ish
    4436:	e853 2f00 	ldrex	r2, [r3]
    443a:	f022 0101 	bic.w	r1, r2, #1
    443e:	e843 1000 	strex	r0, r1, [r3]
    4442:	2800      	cmp	r0, #0
    4444:	d1f7      	bne.n	4436 <bt_le_set_auto_conn+0x9a>
    4446:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    444a:	07d2      	lsls	r2, r2, #31
    444c:	d5d5      	bpl.n	43fa <bt_le_set_auto_conn+0x5e>
	atomic_dec(&conn->ref);
    444e:	4630      	mov	r0, r6
    4450:	f7ff fb9f 	bl	3b92 <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    4454:	7a63      	ldrb	r3, [r4, #9]
    4456:	2b01      	cmp	r3, #1
    4458:	d1cf      	bne.n	43fa <bt_le_set_auto_conn+0x5e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    445a:	4629      	mov	r1, r5
    445c:	4620      	mov	r0, r4
    445e:	f7ff fe05 	bl	406c <bt_conn_set_state>
    4462:	e7ca      	b.n	43fa <bt_le_set_auto_conn+0x5e>
			return -ENOMEM;
    4464:	f06f 000b 	mvn.w	r0, #11
}
    4468:	bd70      	pop	{r4, r5, r6, pc}
    446a:	bf00      	nop
    446c:	20003ad0 	.word	0x20003ad0

00004470 <bt_conn_disconnect>:
{
    4470:	b570      	push	{r4, r5, r6, lr}
    4472:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4474:	7881      	ldrb	r1, [r0, #2]
{
    4476:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4478:	b911      	cbnz	r1, 4480 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    447a:	3044      	adds	r0, #68	; 0x44
    447c:	f7ff ff8e 	bl	439c <bt_le_set_auto_conn>
	switch (conn->state) {
    4480:	7a63      	ldrb	r3, [r4, #9]
    4482:	3b01      	subs	r3, #1
    4484:	2b03      	cmp	r3, #3
    4486:	d803      	bhi.n	4490 <bt_conn_disconnect+0x20>
    4488:	e8df f003 	tbb	[pc, r3]
    448c:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    4490:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    4494:	4628      	mov	r0, r5
    4496:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4498:	4620      	mov	r0, r4
		conn->err = reason;
    449a:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    449c:	2100      	movs	r1, #0
    449e:	f7ff fde5 	bl	406c <bt_conn_set_state>
		bt_le_scan_update(false);
    44a2:	2000      	movs	r0, #0
    44a4:	f7fe f85e 	bl	2564 <bt_le_scan_update>
		return 0;
    44a8:	2500      	movs	r5, #0
    44aa:	e7f3      	b.n	4494 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    44ac:	f104 0070 	add.w	r0, r4, #112	; 0x70
    44b0:	f00f fc3a 	bl	13d28 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    44b4:	2100      	movs	r1, #0
    44b6:	f242 000e 	movw	r0, #8206	; 0x200e
}
    44ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    44be:	f7fd bfc9 	b.w	2454 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    44c2:	2103      	movs	r1, #3
    44c4:	f240 4006 	movw	r0, #1030	; 0x406
    44c8:	f7fd fe02 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    44cc:	4605      	mov	r5, r0
    44ce:	b198      	cbz	r0, 44f8 <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    44d0:	2103      	movs	r1, #3
    44d2:	3008      	adds	r0, #8
    44d4:	f00e f8da 	bl	1268c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    44d8:	8823      	ldrh	r3, [r4, #0]
    44da:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    44dc:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    44de:	4629      	mov	r1, r5
    44e0:	f240 4006 	movw	r0, #1030	; 0x406
    44e4:	f7fd ffb6 	bl	2454 <bt_hci_cmd_send>
	if (err) {
    44e8:	4605      	mov	r5, r0
    44ea:	2800      	cmp	r0, #0
    44ec:	d1d2      	bne.n	4494 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    44ee:	2104      	movs	r1, #4
    44f0:	4620      	mov	r0, r4
    44f2:	f7ff fdbb 	bl	406c <bt_conn_set_state>
    44f6:	e7cd      	b.n	4494 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    44f8:	f06f 0536 	mvn.w	r5, #54	; 0x36
    44fc:	e7ca      	b.n	4494 <bt_conn_disconnect+0x24>

000044fe <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    44fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4500:	4607      	mov	r7, r0
    4502:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    4504:	f242 0013 	movw	r0, #8211	; 0x2013
    4508:	210e      	movs	r1, #14
    450a:	f7fd fde1 	bl	20d0 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    450e:	4606      	mov	r6, r0
    4510:	b1c8      	cbz	r0, 4546 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4512:	210e      	movs	r1, #14
    4514:	3008      	adds	r0, #8
    4516:	f00e f8b9 	bl	1268c <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    451a:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    451c:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    451e:	220e      	movs	r2, #14
    4520:	f7fd fb98 	bl	1c54 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4524:	883b      	ldrh	r3, [r7, #0]
    4526:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    4528:	882b      	ldrh	r3, [r5, #0]
    452a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    452c:	886b      	ldrh	r3, [r5, #2]
    452e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    4530:	88ab      	ldrh	r3, [r5, #4]
    4532:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    4534:	88eb      	ldrh	r3, [r5, #6]
    4536:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4538:	4631      	mov	r1, r6
    453a:	f242 0013 	movw	r0, #8211	; 0x2013
}
    453e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4542:	f7fd bf87 	b.w	2454 <bt_hci_cmd_send>
}
    4546:	f06f 0036 	mvn.w	r0, #54	; 0x36
    454a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000454c <bt_conn_le_param_update>:
{
    454c:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    454e:	880a      	ldrh	r2, [r1, #0]
    4550:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    4554:	429a      	cmp	r2, r3
{
    4556:	4604      	mov	r4, r0
    4558:	460d      	mov	r5, r1
	if (conn->le.interval >= param->interval_min &&
    455a:	d80c      	bhi.n	4576 <bt_conn_le_param_update+0x2a>
    455c:	884a      	ldrh	r2, [r1, #2]
    455e:	429a      	cmp	r2, r3
    4560:	d309      	bcc.n	4576 <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
    4562:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
    4566:	888b      	ldrh	r3, [r1, #4]
    4568:	429a      	cmp	r2, r3
    456a:	d104      	bne.n	4576 <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
    456c:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    4570:	88cb      	ldrh	r3, [r1, #6]
    4572:	429a      	cmp	r2, r3
    4574:	d01a      	beq.n	45ac <bt_conn_le_param_update+0x60>
	k_delayed_work_cancel(&conn->le.update_work);
    4576:	f104 0070 	add.w	r0, r4, #112	; 0x70
    457a:	f00f fbd5 	bl	13d28 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    457e:	4b0d      	ldr	r3, [pc, #52]	; (45b4 <bt_conn_le_param_update+0x68>)
    4580:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4584:	079a      	lsls	r2, r3, #30
    4586:	d503      	bpl.n	4590 <bt_conn_le_param_update+0x44>
    4588:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    458c:	079b      	lsls	r3, r3, #30
    458e:	d401      	bmi.n	4594 <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    4590:	78e3      	ldrb	r3, [r4, #3]
    4592:	b92b      	cbnz	r3, 45a0 <bt_conn_le_param_update+0x54>
		return bt_conn_le_conn_update(conn, param);
    4594:	4629      	mov	r1, r5
    4596:	4620      	mov	r0, r4
}
    4598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    459c:	f7ff bfaf 	b.w	44fe <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    45a0:	4629      	mov	r1, r5
    45a2:	4620      	mov	r0, r4
}
    45a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    45a8:	f000 bb66 	b.w	4c78 <bt_l2cap_update_conn_param>
}
    45ac:	f06f 0044 	mvn.w	r0, #68	; 0x44
    45b0:	bd38      	pop	{r3, r4, r5, pc}
    45b2:	bf00      	nop
    45b4:	20003a60 	.word	0x20003a60

000045b8 <le_conn_update>:
{
    45b8:	4603      	mov	r3, r0
    45ba:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    45bc:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    45c0:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    45c2:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    45c6:	d105      	bne.n	45d4 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    45c8:	2113      	movs	r1, #19
    45ca:	f7ff ff51 	bl	4470 <bt_conn_disconnect>
}
    45ce:	b003      	add	sp, #12
    45d0:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    45d4:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    45d8:	f8ad 2000 	strh.w	r2, [sp]
    45dc:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    45e0:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    45e4:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    45e6:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    45ea:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    45ee:	f8ad 2004 	strh.w	r2, [sp, #4]
    45f2:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    45f6:	f7ff ffa9 	bl	454c <bt_conn_le_param_update>
    45fa:	e7e8      	b.n	45ce <le_conn_update+0x16>

000045fc <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    45fc:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    45fe:	4b08      	ldr	r3, [pc, #32]	; (4620 <bt_conn_create_pdu+0x24>)
{
    4600:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    4602:	2800      	cmp	r0, #0
    4604:	bf08      	it	eq
    4606:	4618      	moveq	r0, r3
    4608:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    460c:	f00d ffdc 	bl	125c8 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    4610:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    4612:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    4614:	3008      	adds	r0, #8
    4616:	f00d fff6 	bl	12606 <net_buf_simple_reserve>

	return buf;
}
    461a:	4620      	mov	r0, r4
    461c:	bd38      	pop	{r3, r4, r5, pc}
    461e:	bf00      	nop
    4620:	20003f2c 	.word	0x20003f2c

00004624 <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    4624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4628:	4606      	mov	r6, r0
    462a:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    462c:	4816      	ldr	r0, [pc, #88]	; (4688 <create_frag.isra.8+0x64>)
    462e:	2100      	movs	r1, #0
    4630:	f7ff ffe4 	bl	45fc <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    4634:	7833      	ldrb	r3, [r6, #0]
    4636:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    4638:	4605      	mov	r5, r0
    463a:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    463e:	d005      	beq.n	464c <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    4640:	f00d fff2 	bl	12628 <net_buf_unref>
		return NULL;
    4644:	4635      	mov	r5, r6
}
    4646:	4628      	mov	r0, r5
    4648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    464c:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    464e:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    4652:	4e0e      	ldr	r6, [pc, #56]	; (468c <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4654:	4638      	mov	r0, r7
    4656:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    465a:	f00e f852 	bl	12702 <net_buf_simple_tailroom>
    465e:	4580      	cmp	r8, r0
    4660:	d20c      	bcs.n	467c <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    4662:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    4666:	f854 1f08 	ldr.w	r1, [r4, #8]!
    466a:	4632      	mov	r2, r6
    466c:	4638      	mov	r0, r7
    466e:	f00e f813 	bl	12698 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    4672:	4631      	mov	r1, r6
    4674:	4620      	mov	r0, r4
    4676:	f00e f828 	bl	126ca <net_buf_simple_pull>
    467a:	e7e4      	b.n	4646 <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    467c:	4638      	mov	r0, r7
    467e:	f00e f840 	bl	12702 <net_buf_simple_tailroom>
    4682:	b286      	uxth	r6, r0
    4684:	e7ef      	b.n	4666 <create_frag.isra.8+0x42>
    4686:	bf00      	nop
    4688:	20003f4c 	.word	0x20003f4c
    468c:	20003a60 	.word	0x20003a60

00004690 <bt_conn_process_tx>:
	if (conn->state == BT_CONN_DISCONNECTED &&
    4690:	7a43      	ldrb	r3, [r0, #9]
{
    4692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4694:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    4696:	b99b      	cbnz	r3, 46c0 <bt_conn_process_tx+0x30>
    4698:	f3bf 8f5b 	dmb	ish
    469c:	1d03      	adds	r3, r0, #4
    469e:	e853 2f00 	ldrex	r2, [r3]
    46a2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    46a6:	e843 1400 	strex	r4, r1, [r3]
    46aa:	2c00      	cmp	r4, #0
    46ac:	d1f7      	bne.n	469e <bt_conn_process_tx+0xe>
    46ae:	f3bf 8f5b 	dmb	ish
    46b2:	0653      	lsls	r3, r2, #25
    46b4:	d504      	bpl.n	46c0 <bt_conn_process_tx+0x30>
}
    46b6:	b003      	add	sp, #12
    46b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    46bc:	f7ff bc42 	b.w	3f44 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    46c0:	2100      	movs	r1, #0
    46c2:	f105 0028 	add.w	r0, r5, #40	; 0x28
    46c6:	f00d ff85 	bl	125d4 <net_buf_get>
	BT_ASSERT(buf);
    46ca:	4604      	mov	r4, r0
    46cc:	b970      	cbnz	r0, 46ec <bt_conn_process_tx+0x5c>
    46ce:	4b22      	ldr	r3, [pc, #136]	; (4758 <bt_conn_process_tx+0xc8>)
    46d0:	9301      	str	r3, [sp, #4]
    46d2:	9300      	str	r3, [sp, #0]
    46d4:	4a21      	ldr	r2, [pc, #132]	; (475c <bt_conn_process_tx+0xcc>)
    46d6:	4b22      	ldr	r3, [pc, #136]	; (4760 <bt_conn_process_tx+0xd0>)
    46d8:	4922      	ldr	r1, [pc, #136]	; (4764 <bt_conn_process_tx+0xd4>)
    46da:	4823      	ldr	r0, [pc, #140]	; (4768 <bt_conn_process_tx+0xd8>)
    46dc:	f7fc fc56 	bl	f8c <printk>
    46e0:	4040      	eors	r0, r0
    46e2:	f380 8811 	msr	BASEPRI, r0
    46e6:	f04f 0004 	mov.w	r0, #4
    46ea:	df02      	svc	2
	return bt_dev.le.mtu;
    46ec:	4e1f      	ldr	r6, [pc, #124]	; (476c <bt_conn_process_tx+0xdc>)
	if (buf->len <= conn_mtu(conn)) {
    46ee:	8981      	ldrh	r1, [r0, #12]
    46f0:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    46f4:	4291      	cmp	r1, r2
    46f6:	d808      	bhi.n	470a <bt_conn_process_tx+0x7a>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    46f8:	2300      	movs	r3, #0
    46fa:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    46fc:	4621      	mov	r1, r4
    46fe:	4628      	mov	r0, r5
    4700:	f7ff fb82 	bl	3e08 <send_frag>
	if (!send_buf(conn, buf)) {
    4704:	b148      	cbz	r0, 471a <bt_conn_process_tx+0x8a>
}
    4706:	b003      	add	sp, #12
    4708:	bdf0      	pop	{r4, r5, r6, r7, pc}
    470a:	f105 0709 	add.w	r7, r5, #9
	frag = create_frag(conn, buf);
    470e:	4601      	mov	r1, r0
    4710:	4638      	mov	r0, r7
    4712:	f7ff ff87 	bl	4624 <create_frag.isra.8>
	if (!frag) {
    4716:	4601      	mov	r1, r0
    4718:	b928      	cbnz	r0, 4726 <bt_conn_process_tx+0x96>
		net_buf_unref(buf);
    471a:	4620      	mov	r0, r4
}
    471c:	b003      	add	sp, #12
    471e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    4722:	f00d bf81 	b.w	12628 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    4726:	2301      	movs	r3, #1
    4728:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    472a:	4628      	mov	r0, r5
    472c:	f7ff fb6c 	bl	3e08 <send_frag>
    4730:	2800      	cmp	r0, #0
    4732:	d0f2      	beq.n	471a <bt_conn_process_tx+0x8a>
	while (buf->len > conn_mtu(conn)) {
    4734:	89a2      	ldrh	r2, [r4, #12]
    4736:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    473a:	429a      	cmp	r2, r3
    473c:	d802      	bhi.n	4744 <bt_conn_process_tx+0xb4>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    473e:	2300      	movs	r3, #0
    4740:	2201      	movs	r2, #1
    4742:	e7db      	b.n	46fc <bt_conn_process_tx+0x6c>
		frag = create_frag(conn, buf);
    4744:	4621      	mov	r1, r4
    4746:	4638      	mov	r0, r7
    4748:	f7ff ff6c 	bl	4624 <create_frag.isra.8>
		if (!frag) {
    474c:	4601      	mov	r1, r0
    474e:	2800      	cmp	r0, #0
    4750:	d0e3      	beq.n	471a <bt_conn_process_tx+0x8a>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4752:	2301      	movs	r3, #1
    4754:	461a      	mov	r2, r3
    4756:	e7e8      	b.n	472a <bt_conn_process_tx+0x9a>
    4758:	000142a9 	.word	0x000142a9
    475c:	00014ff8 	.word	0x00014ff8
    4760:	000152ff 	.word	0x000152ff
    4764:	00015047 	.word	0x00015047
    4768:	000150fc 	.word	0x000150fc
    476c:	20003a60 	.word	0x20003a60

00004770 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    4770:	4b03      	ldr	r3, [pc, #12]	; (4780 <bt_conn_get_id+0x10>)
    4772:	1ac0      	subs	r0, r0, r3
    4774:	4b03      	ldr	r3, [pc, #12]	; (4784 <bt_conn_get_id+0x14>)
    4776:	10c0      	asrs	r0, r0, #3
    4778:	4358      	muls	r0, r3
}
    477a:	b2c0      	uxtb	r0, r0
    477c:	4770      	bx	lr
    477e:	bf00      	nop
    4780:	20000360 	.word	0x20000360
    4784:	286bca1b 	.word	0x286bca1b

00004788 <bt_conn_init>:
	parent->next = child;
    4788:	4b12      	ldr	r3, [pc, #72]	; (47d4 <bt_conn_init+0x4c>)
    478a:	4a13      	ldr	r2, [pc, #76]	; (47d8 <bt_conn_init+0x50>)
    478c:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    478e:	b510      	push	{r4, lr}
    4790:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    4792:	6859      	ldr	r1, [r3, #4]
    4794:	b901      	cbnz	r1, 4798 <bt_conn_init+0x10>
	list->tail = node;
    4796:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    4798:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    479a:	6092      	str	r2, [r2, #8]
	list->head = node;
    479c:	4a0f      	ldr	r2, [pc, #60]	; (47dc <bt_conn_init+0x54>)
    479e:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    47a0:	b901      	cbnz	r1, 47a4 <bt_conn_init+0x1c>
	list->tail = node;
    47a2:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    47a4:	f001 fb56 	bl	5e54 <bt_att_init>

	err = bt_smp_init();
    47a8:	f002 f86e 	bl	6888 <bt_smp_init>
	if (err) {
    47ac:	4604      	mov	r4, r0
    47ae:	b970      	cbnz	r0, 47ce <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    47b0:	f000 fa8a 	bl	4cc8 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    47b4:	480a      	ldr	r0, [pc, #40]	; (47e0 <bt_conn_init+0x58>)
    47b6:	f7ff f9db 	bl	3b70 <atomic_get>
    47ba:	b140      	cbz	r0, 47ce <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    47bc:	4809      	ldr	r0, [pc, #36]	; (47e4 <bt_conn_init+0x5c>)
    47be:	f7ff f9d7 	bl	3b70 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    47c2:	07c3      	lsls	r3, r0, #31
    47c4:	d503      	bpl.n	47ce <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    47c6:	2101      	movs	r1, #1
    47c8:	4807      	ldr	r0, [pc, #28]	; (47e8 <bt_conn_init+0x60>)
    47ca:	f7ff fc4f 	bl	406c <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    47ce:	4620      	mov	r0, r4
    47d0:	bd10      	pop	{r4, pc}
    47d2:	bf00      	nop
    47d4:	200003f8 	.word	0x200003f8
    47d8:	20000350 	.word	0x20000350
    47dc:	20000358 	.word	0x20000358
    47e0:	200003a0 	.word	0x200003a0
    47e4:	20000364 	.word	0x20000364
    47e8:	20000360 	.word	0x20000360

000047ec <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    47ec:	4770      	bx	lr
	...

000047f0 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    47f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    47f2:	4a0b      	ldr	r2, [pc, #44]	; (4820 <l2cap_accept+0x30>)
    47f4:	6813      	ldr	r3, [r2, #0]
    47f6:	b933      	cbnz	r3, 4806 <l2cap_accept+0x16>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    47f8:	480a      	ldr	r0, [pc, #40]	; (4824 <l2cap_accept+0x34>)
    47fa:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    47fc:	600a      	str	r2, [r1, #0]

		return 0;
    47fe:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    4800:	b005      	add	sp, #20
    4802:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
    4806:	4b08      	ldr	r3, [pc, #32]	; (4828 <l2cap_accept+0x38>)
    4808:	9302      	str	r3, [sp, #8]
    480a:	9001      	str	r0, [sp, #4]
    480c:	9300      	str	r3, [sp, #0]
    480e:	4a07      	ldr	r2, [pc, #28]	; (482c <l2cap_accept+0x3c>)
    4810:	4b07      	ldr	r3, [pc, #28]	; (4830 <l2cap_accept+0x40>)
    4812:	4908      	ldr	r1, [pc, #32]	; (4834 <l2cap_accept+0x44>)
    4814:	4808      	ldr	r0, [pc, #32]	; (4838 <l2cap_accept+0x48>)
    4816:	f7fc fbb9 	bl	f8c <printk>
	return -ENOMEM;
    481a:	f06f 000b 	mvn.w	r0, #11
    481e:	e7ef      	b.n	4800 <l2cap_accept+0x10>
    4820:	20000400 	.word	0x20000400
    4824:	20003ba4 	.word	0x20003ba4
    4828:	000142a9 	.word	0x000142a9
    482c:	00014ff8 	.word	0x00014ff8
    4830:	00015516 	.word	0x00015516
    4834:	00015047 	.word	0x00015047
    4838:	00015585 	.word	0x00015585

0000483c <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    483e:	4607      	mov	r7, r0
    4840:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4842:	2000      	movs	r0, #0
    4844:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4846:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4848:	f7ff fed8 	bl	45fc <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    484c:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    484e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    4850:	3008      	adds	r0, #8
    4852:	f00d ff1b 	bl	1268c <net_buf_simple_add>
	hdr->code = code;
    4856:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    4858:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    485a:	8045      	strh	r5, [r0, #2]
}
    485c:	4620      	mov	r0, r4
    485e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004860 <l2cap_connected>:
    4860:	4770      	bx	lr
	...

00004864 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    4864:	2300      	movs	r3, #0
    4866:	6083      	str	r3, [r0, #8]
    4868:	4b05      	ldr	r3, [pc, #20]	; (4880 <bt_l2cap_le_fixed_chan_register+0x1c>)
    486a:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    486c:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    4870:	b911      	cbnz	r1, 4878 <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    4872:	605a      	str	r2, [r3, #4]
	list->head = node;
    4874:	601a      	str	r2, [r3, #0]
    4876:	4770      	bx	lr
	parent->next = child;
    4878:	600a      	str	r2, [r1, #0]
	list->tail = node;
    487a:	605a      	str	r2, [r3, #4]
    487c:	4770      	bx	lr
    487e:	bf00      	nop
    4880:	20000498 	.word	0x20000498

00004884 <bt_l2cap_chan_remove>:
{
    4884:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4886:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4888:	b113      	cbz	r3, 4890 <bt_l2cap_chan_remove+0xc>
    488a:	3b08      	subs	r3, #8
    488c:	2200      	movs	r2, #0
    488e:	b903      	cbnz	r3, 4892 <bt_l2cap_chan_remove+0xe>
    4890:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    4892:	428b      	cmp	r3, r1
    4894:	f103 0408 	add.w	r4, r3, #8
    4898:	d10f      	bne.n	48ba <bt_l2cap_chan_remove+0x36>
    489a:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    489c:	b93a      	cbnz	r2, 48ae <bt_l2cap_chan_remove+0x2a>
    489e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    48a0:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    48a2:	4294      	cmp	r4, r2
    48a4:	d100      	bne.n	48a8 <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    48a6:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    48a8:	2200      	movs	r2, #0
    48aa:	609a      	str	r2, [r3, #8]
    48ac:	bd10      	pop	{r4, pc}
    48ae:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    48b0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    48b2:	428c      	cmp	r4, r1
	list->tail = node;
    48b4:	bf08      	it	eq
    48b6:	63c2      	streq	r2, [r0, #60]	; 0x3c
    48b8:	e7f6      	b.n	48a8 <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    48ba:	4622      	mov	r2, r4
    48bc:	2c00      	cmp	r4, #0
    48be:	d0e7      	beq.n	4890 <bt_l2cap_chan_remove+0xc>
	return node->next;
    48c0:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    48c2:	2b00      	cmp	r3, #0
    48c4:	d0e4      	beq.n	4890 <bt_l2cap_chan_remove+0xc>
    48c6:	3b08      	subs	r3, #8
    48c8:	e7e1      	b.n	488e <bt_l2cap_chan_remove+0xa>

000048ca <bt_l2cap_chan_del>:
	if (!chan->conn) {
    48ca:	6803      	ldr	r3, [r0, #0]
{
    48cc:	b510      	push	{r4, lr}
    48ce:	4604      	mov	r4, r0
	if (!chan->conn) {
    48d0:	b12b      	cbz	r3, 48de <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    48d2:	6843      	ldr	r3, [r0, #4]
    48d4:	685b      	ldr	r3, [r3, #4]
    48d6:	b103      	cbz	r3, 48da <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    48d8:	4798      	blx	r3
	chan->conn = NULL;
    48da:	2300      	movs	r3, #0
    48dc:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    48de:	68e3      	ldr	r3, [r4, #12]
    48e0:	b11b      	cbz	r3, 48ea <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    48e2:	4620      	mov	r0, r4
}
    48e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    48e8:	4718      	bx	r3
    48ea:	bd10      	pop	{r4, pc}

000048ec <l2cap_rtx_timeout>:
{
    48ec:	b530      	push	{r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    48ee:	4b0c      	ldr	r3, [pc, #48]	; (4920 <l2cap_rtx_timeout+0x34>)
    48f0:	4a0c      	ldr	r2, [pc, #48]	; (4924 <l2cap_rtx_timeout+0x38>)
    48f2:	490d      	ldr	r1, [pc, #52]	; (4928 <l2cap_rtx_timeout+0x3c>)
{
    48f4:	b085      	sub	sp, #20
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    48f6:	f1a0 0410 	sub.w	r4, r0, #16
{
    48fa:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    48fc:	9302      	str	r3, [sp, #8]
    48fe:	e88d 0018 	stmia.w	sp, {r3, r4}
    4902:	480a      	ldr	r0, [pc, #40]	; (492c <l2cap_rtx_timeout+0x40>)
    4904:	4b0a      	ldr	r3, [pc, #40]	; (4930 <l2cap_rtx_timeout+0x44>)
    4906:	f7fc fb41 	bl	f8c <printk>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    490a:	f855 0c10 	ldr.w	r0, [r5, #-16]
    490e:	4621      	mov	r1, r4
    4910:	f7ff ffb8 	bl	4884 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    4914:	4620      	mov	r0, r4
}
    4916:	b005      	add	sp, #20
    4918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    491c:	f7ff bfd5 	b.w	48ca <bt_l2cap_chan_del>
    4920:	000142a9 	.word	0x000142a9
    4924:	00014ff8 	.word	0x00014ff8
    4928:	00015047 	.word	0x00015047
    492c:	000156d9 	.word	0x000156d9
    4930:	000154c0 	.word	0x000154c0

00004934 <bt_l2cap_connected>:
{
    4934:	4b1a      	ldr	r3, [pc, #104]	; (49a0 <bt_l2cap_connected+0x6c>)
    4936:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    493a:	681c      	ldr	r4, [r3, #0]
    493c:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    493e:	b12c      	cbz	r4, 494c <bt_l2cap_connected+0x18>
	parent->next = child;
    4940:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4942:	f8df 8060 	ldr.w	r8, [pc, #96]	; 49a4 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4946:	3c08      	subs	r4, #8
    4948:	46b9      	mov	r9, r7
    494a:	b914      	cbnz	r4, 4952 <bt_l2cap_connected+0x1e>
}
    494c:	b003      	add	sp, #12
    494e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    4952:	6863      	ldr	r3, [r4, #4]
    4954:	a901      	add	r1, sp, #4
    4956:	4630      	mov	r0, r6
    4958:	4798      	blx	r3
    495a:	2800      	cmp	r0, #0
    495c:	db18      	blt.n	4990 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    495e:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    4960:	8823      	ldrh	r3, [r4, #0]
    4962:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    4964:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4968:	4641      	mov	r1, r8
    496a:	f105 0010 	add.w	r0, r5, #16
    496e:	f00f f9cb 	bl	13d08 <k_delayed_work_init>
    4972:	60af      	str	r7, [r5, #8]
    4974:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	sys_slist_append(&conn->channels, &chan->node);
    4976:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    497a:	b972      	cbnz	r2, 499a <bt_l2cap_connected+0x66>
	list->tail = node;
    497c:	63f3      	str	r3, [r6, #60]	; 0x3c
	list->head = node;
    497e:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    4980:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    4982:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    4984:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    4986:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    498a:	681b      	ldr	r3, [r3, #0]
    498c:	b103      	cbz	r3, 4990 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    498e:	4798      	blx	r3
	return node->next;
    4990:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4992:	2c00      	cmp	r4, #0
    4994:	d0da      	beq.n	494c <bt_l2cap_connected+0x18>
    4996:	3c08      	subs	r4, #8
    4998:	e7d7      	b.n	494a <bt_l2cap_connected+0x16>
	parent->next = child;
    499a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    499c:	63f3      	str	r3, [r6, #60]	; 0x3c
    499e:	e7ef      	b.n	4980 <bt_l2cap_connected+0x4c>
    49a0:	20000498 	.word	0x20000498
    49a4:	000048ed 	.word	0x000048ed

000049a8 <bt_l2cap_disconnected>:
{
    49a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    49aa:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    49ac:	b1a3      	cbz	r3, 49d8 <bt_l2cap_disconnected+0x30>
    49ae:	f1b3 0008 	subs.w	r0, r3, #8
    49b2:	d10a      	bne.n	49ca <bt_l2cap_disconnected+0x22>
    49b4:	bd10      	pop	{r4, pc}
    49b6:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    49b8:	f7ff ff87 	bl	48ca <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    49bc:	b164      	cbz	r4, 49d8 <bt_l2cap_disconnected+0x30>
	return node->next;
    49be:	68a3      	ldr	r3, [r4, #8]
    49c0:	b103      	cbz	r3, 49c4 <bt_l2cap_disconnected+0x1c>
    49c2:	3b08      	subs	r3, #8
{
    49c4:	4620      	mov	r0, r4
    49c6:	461c      	mov	r4, r3
    49c8:	e7f6      	b.n	49b8 <bt_l2cap_disconnected+0x10>
    49ca:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    49cc:	2c00      	cmp	r4, #0
    49ce:	d1f2      	bne.n	49b6 <bt_l2cap_disconnected+0xe>
}
    49d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    49d4:	f7ff bf79 	b.w	48ca <bt_l2cap_chan_del>
    49d8:	bd10      	pop	{r4, pc}

000049da <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    49da:	3104      	adds	r1, #4
    49dc:	f7ff be0e 	b.w	45fc <bt_conn_create_pdu>

000049e0 <bt_l2cap_send_cb>:
{
    49e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49e2:	4614      	mov	r4, r2
    49e4:	4605      	mov	r5, r0
    49e6:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    49e8:	f102 0008 	add.w	r0, r2, #8
    49ec:	2104      	movs	r1, #4
{
    49ee:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    49f0:	f00d fe63 	bl	126ba <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    49f4:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    49f6:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    49f8:	3904      	subs	r1, #4
    49fa:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    49fc:	4632      	mov	r2, r6
    49fe:	4621      	mov	r1, r4
    4a00:	4628      	mov	r0, r5
}
    4a02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    4a06:	f7ff b9b9 	b.w	3d7c <bt_conn_send_cb>
	...

00004a0c <l2cap_recv>:
{
    4a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    4a0e:	898b      	ldrh	r3, [r1, #12]
    4a10:	2b03      	cmp	r3, #3
{
    4a12:	b087      	sub	sp, #28
    4a14:	4607      	mov	r7, r0
    4a16:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    4a18:	d809      	bhi.n	4a2e <l2cap_recv+0x22>
		BT_ERR("Too small L2CAP signaling PDU");
    4a1a:	4b5a      	ldr	r3, [pc, #360]	; (4b84 <l2cap_recv+0x178>)
    4a1c:	9301      	str	r3, [sp, #4]
    4a1e:	9300      	str	r3, [sp, #0]
    4a20:	4a59      	ldr	r2, [pc, #356]	; (4b88 <l2cap_recv+0x17c>)
    4a22:	4b5a      	ldr	r3, [pc, #360]	; (4b8c <l2cap_recv+0x180>)
    4a24:	495a      	ldr	r1, [pc, #360]	; (4b90 <l2cap_recv+0x184>)
    4a26:	485b      	ldr	r0, [pc, #364]	; (4b94 <l2cap_recv+0x188>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    4a28:	f7fc fab0 	bl	f8c <printk>
		return;
    4a2c:	e014      	b.n	4a58 <l2cap_recv+0x4c>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4a2e:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4a30:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4a32:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    4a36:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4a38:	f00d fe47 	bl	126ca <net_buf_simple_pull>
	if (buf->len != len) {
    4a3c:	89aa      	ldrh	r2, [r5, #12]
    4a3e:	4296      	cmp	r6, r2
    4a40:	d00c      	beq.n	4a5c <l2cap_recv+0x50>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    4a42:	4b50      	ldr	r3, [pc, #320]	; (4b84 <l2cap_recv+0x178>)
    4a44:	9303      	str	r3, [sp, #12]
    4a46:	9201      	str	r2, [sp, #4]
    4a48:	9300      	str	r3, [sp, #0]
    4a4a:	9602      	str	r6, [sp, #8]
    4a4c:	4b4f      	ldr	r3, [pc, #316]	; (4b8c <l2cap_recv+0x180>)
    4a4e:	4a4e      	ldr	r2, [pc, #312]	; (4b88 <l2cap_recv+0x17c>)
    4a50:	494f      	ldr	r1, [pc, #316]	; (4b90 <l2cap_recv+0x184>)
    4a52:	4851      	ldr	r0, [pc, #324]	; (4b98 <l2cap_recv+0x18c>)
    4a54:	f7fc fa9a 	bl	f8c <printk>
}
    4a58:	b007      	add	sp, #28
    4a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    4a5c:	7861      	ldrb	r1, [r4, #1]
    4a5e:	b939      	cbnz	r1, 4a70 <l2cap_recv+0x64>
		BT_ERR("Invalid ident value in L2CAP PDU");
    4a60:	4b48      	ldr	r3, [pc, #288]	; (4b84 <l2cap_recv+0x178>)
    4a62:	9301      	str	r3, [sp, #4]
    4a64:	9300      	str	r3, [sp, #0]
    4a66:	4a48      	ldr	r2, [pc, #288]	; (4b88 <l2cap_recv+0x17c>)
    4a68:	4b48      	ldr	r3, [pc, #288]	; (4b8c <l2cap_recv+0x180>)
    4a6a:	4949      	ldr	r1, [pc, #292]	; (4b90 <l2cap_recv+0x184>)
    4a6c:	484b      	ldr	r0, [pc, #300]	; (4b9c <l2cap_recv+0x190>)
    4a6e:	e7db      	b.n	4a28 <l2cap_recv+0x1c>
	switch (hdr->code) {
    4a70:	7823      	ldrb	r3, [r4, #0]
    4a72:	2b12      	cmp	r3, #18
    4a74:	d029      	beq.n	4aca <l2cap_recv+0xbe>
    4a76:	2b13      	cmp	r3, #19
    4a78:	d01d      	beq.n	4ab6 <l2cap_recv+0xaa>
    4a7a:	2b01      	cmp	r3, #1
    4a7c:	d0ec      	beq.n	4a58 <l2cap_recv+0x4c>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    4a7e:	4a41      	ldr	r2, [pc, #260]	; (4b84 <l2cap_recv+0x178>)
    4a80:	9202      	str	r2, [sp, #8]
    4a82:	e88d 000c 	stmia.w	sp, {r2, r3}
    4a86:	4942      	ldr	r1, [pc, #264]	; (4b90 <l2cap_recv+0x184>)
    4a88:	4b40      	ldr	r3, [pc, #256]	; (4b8c <l2cap_recv+0x180>)
    4a8a:	4a45      	ldr	r2, [pc, #276]	; (4ba0 <l2cap_recv+0x194>)
    4a8c:	4845      	ldr	r0, [pc, #276]	; (4ba4 <l2cap_recv+0x198>)
    4a8e:	f7fc fa7d 	bl	f8c <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4a92:	2202      	movs	r2, #2
    4a94:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    4a96:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4a98:	2001      	movs	r0, #1
    4a9a:	f7ff fecf 	bl	483c <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4a9e:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4aa0:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4aa2:	3008      	adds	r0, #8
    4aa4:	f00d fdf2 	bl	1268c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4aa8:	2300      	movs	r3, #0
    4aaa:	7003      	strb	r3, [r0, #0]
    4aac:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    4aae:	4622      	mov	r2, r4
    4ab0:	2105      	movs	r1, #5
    4ab2:	4628      	mov	r0, r5
    4ab4:	e025      	b.n	4b02 <l2cap_recv+0xf6>
	if (buf->len < sizeof(*rsp)) {
    4ab6:	2e01      	cmp	r6, #1
    4ab8:	d8ce      	bhi.n	4a58 <l2cap_recv+0x4c>
		BT_ERR("Too small LE conn param rsp");
    4aba:	4b32      	ldr	r3, [pc, #200]	; (4b84 <l2cap_recv+0x178>)
    4abc:	9301      	str	r3, [sp, #4]
    4abe:	9300      	str	r3, [sp, #0]
    4ac0:	4a31      	ldr	r2, [pc, #196]	; (4b88 <l2cap_recv+0x17c>)
    4ac2:	4b39      	ldr	r3, [pc, #228]	; (4ba8 <l2cap_recv+0x19c>)
    4ac4:	4932      	ldr	r1, [pc, #200]	; (4b90 <l2cap_recv+0x184>)
    4ac6:	4839      	ldr	r0, [pc, #228]	; (4bac <l2cap_recv+0x1a0>)
    4ac8:	e7ae      	b.n	4a28 <l2cap_recv+0x1c>
	if (buf->len < sizeof(*req)) {
    4aca:	2e07      	cmp	r6, #7
    4acc:	d807      	bhi.n	4ade <l2cap_recv+0xd2>
		BT_ERR("Too small LE conn update param req");
    4ace:	4b2d      	ldr	r3, [pc, #180]	; (4b84 <l2cap_recv+0x178>)
    4ad0:	9301      	str	r3, [sp, #4]
    4ad2:	9300      	str	r3, [sp, #0]
    4ad4:	4a2c      	ldr	r2, [pc, #176]	; (4b88 <l2cap_recv+0x17c>)
    4ad6:	4b36      	ldr	r3, [pc, #216]	; (4bb0 <l2cap_recv+0x1a4>)
    4ad8:	492d      	ldr	r1, [pc, #180]	; (4b90 <l2cap_recv+0x184>)
    4ada:	4836      	ldr	r0, [pc, #216]	; (4bb4 <l2cap_recv+0x1a8>)
    4adc:	e7a4      	b.n	4a28 <l2cap_recv+0x1c>
    4ade:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    4ae0:	78e6      	ldrb	r6, [r4, #3]
    4ae2:	b18e      	cbz	r6, 4b08 <l2cap_recv+0xfc>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4ae4:	2202      	movs	r2, #2
    4ae6:	2001      	movs	r0, #1
    4ae8:	f7ff fea8 	bl	483c <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4aec:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4aee:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4af0:	3008      	adds	r0, #8
    4af2:	f00d fdcb 	bl	1268c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4af6:	2300      	movs	r3, #0
    4af8:	7003      	strb	r3, [r0, #0]
    4afa:	7043      	strb	r3, [r0, #1]
    4afc:	462a      	mov	r2, r5
    4afe:	2105      	movs	r1, #5
    4b00:	4620      	mov	r0, r4
    4b02:	f7ff ff6d 	bl	49e0 <bt_l2cap_send_cb>
    4b06:	e7a7      	b.n	4a58 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    4b08:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    4b0a:	7858      	ldrb	r0, [r3, #1]
    4b0c:	781a      	ldrb	r2, [r3, #0]
    4b0e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4b12:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    4b16:	78d8      	ldrb	r0, [r3, #3]
    4b18:	789a      	ldrb	r2, [r3, #2]
    4b1a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4b1e:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    4b22:	7958      	ldrb	r0, [r3, #5]
    4b24:	791a      	ldrb	r2, [r3, #4]
    4b26:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4b2a:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    4b2e:	799a      	ldrb	r2, [r3, #6]
    4b30:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4b32:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    4b34:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4b38:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    4b3a:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4b3e:	f7ff fe7d 	bl	483c <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    4b42:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4b44:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    4b46:	4620      	mov	r0, r4
    4b48:	f7ff f856 	bl	3bf8 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    4b4c:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    4b4e:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    4b50:	f107 0008 	add.w	r0, r7, #8
    4b54:	f00d fd9a 	bl	1268c <net_buf_simple_add>
	if (accepted) {
    4b58:	b17d      	cbz	r5, 4b7a <l2cap_recv+0x16e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    4b5a:	7006      	strb	r6, [r0, #0]
    4b5c:	7046      	strb	r6, [r0, #1]
    4b5e:	2300      	movs	r3, #0
    4b60:	463a      	mov	r2, r7
    4b62:	2105      	movs	r1, #5
    4b64:	4620      	mov	r0, r4
    4b66:	f7ff ff3b 	bl	49e0 <bt_l2cap_send_cb>
	if (accepted) {
    4b6a:	2d00      	cmp	r5, #0
    4b6c:	f43f af74 	beq.w	4a58 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
    4b70:	a904      	add	r1, sp, #16
    4b72:	4620      	mov	r0, r4
    4b74:	f7ff fcc3 	bl	44fe <bt_conn_le_conn_update>
    4b78:	e76e      	b.n	4a58 <l2cap_recv+0x4c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    4b7a:	2301      	movs	r3, #1
    4b7c:	7003      	strb	r3, [r0, #0]
    4b7e:	7045      	strb	r5, [r0, #1]
    4b80:	e7ed      	b.n	4b5e <l2cap_recv+0x152>
    4b82:	bf00      	nop
    4b84:	000142a9 	.word	0x000142a9
    4b88:	00014ff8 	.word	0x00014ff8
    4b8c:	000154fd 	.word	0x000154fd
    4b90:	00015047 	.word	0x00015047
    4b94:	000155bc 	.word	0x000155bc
    4b98:	000155ea 	.word	0x000155ea
    4b9c:	0001561b 	.word	0x0001561b
    4ba0:	00015040 	.word	0x00015040
    4ba4:	000156ab 	.word	0x000156ab
    4ba8:	000154d2 	.word	0x000154d2
    4bac:	0001564c 	.word	0x0001564c
    4bb0:	000154e4 	.word	0x000154e4
    4bb4:	00015678 	.word	0x00015678

00004bb8 <bt_l2cap_le_lookup_tx_cid>:
{
    4bb8:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4bba:	b100      	cbz	r0, 4bbe <bt_l2cap_le_lookup_tx_cid+0x6>
    4bbc:	3808      	subs	r0, #8
    4bbe:	b900      	cbnz	r0, 4bc2 <bt_l2cap_le_lookup_tx_cid+0xa>
}
    4bc0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    4bc2:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    4bc6:	428b      	cmp	r3, r1
    4bc8:	d0fa      	beq.n	4bc0 <bt_l2cap_le_lookup_tx_cid+0x8>
    4bca:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4bcc:	2000      	movs	r0, #0
    4bce:	2b00      	cmp	r3, #0
    4bd0:	d0f6      	beq.n	4bc0 <bt_l2cap_le_lookup_tx_cid+0x8>
    4bd2:	f1a3 0008 	sub.w	r0, r3, #8
    4bd6:	e7f2      	b.n	4bbe <bt_l2cap_le_lookup_tx_cid+0x6>

00004bd8 <bt_l2cap_le_lookup_rx_cid>:
{
    4bd8:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4bda:	b100      	cbz	r0, 4bde <bt_l2cap_le_lookup_rx_cid+0x6>
    4bdc:	3808      	subs	r0, #8
    4bde:	b900      	cbnz	r0, 4be2 <bt_l2cap_le_lookup_rx_cid+0xa>
}
    4be0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    4be2:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    4be4:	428b      	cmp	r3, r1
    4be6:	d0fb      	beq.n	4be0 <bt_l2cap_le_lookup_rx_cid+0x8>
    4be8:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4bea:	2000      	movs	r0, #0
    4bec:	2b00      	cmp	r3, #0
    4bee:	d0f7      	beq.n	4be0 <bt_l2cap_le_lookup_rx_cid+0x8>
    4bf0:	f1a3 0008 	sub.w	r0, r3, #8
    4bf4:	e7f3      	b.n	4bde <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00004bf8 <bt_l2cap_recv>:
{
    4bf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    4bfa:	898b      	ldrh	r3, [r1, #12]
    4bfc:	2b03      	cmp	r3, #3
{
    4bfe:	4606      	mov	r6, r0
    4c00:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    4c02:	d80e      	bhi.n	4c22 <bt_l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP PDU received");
    4c04:	4b15      	ldr	r3, [pc, #84]	; (4c5c <bt_l2cap_recv+0x64>)
    4c06:	9301      	str	r3, [sp, #4]
    4c08:	9300      	str	r3, [sp, #0]
    4c0a:	4a15      	ldr	r2, [pc, #84]	; (4c60 <bt_l2cap_recv+0x68>)
    4c0c:	4b15      	ldr	r3, [pc, #84]	; (4c64 <bt_l2cap_recv+0x6c>)
    4c0e:	4916      	ldr	r1, [pc, #88]	; (4c68 <bt_l2cap_recv+0x70>)
    4c10:	4816      	ldr	r0, [pc, #88]	; (4c6c <bt_l2cap_recv+0x74>)
    4c12:	f7fc f9bb 	bl	f8c <printk>
	net_buf_unref(buf);
    4c16:	4620      	mov	r0, r4
}
    4c18:	b004      	add	sp, #16
    4c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    4c1e:	f00d bd03 	b.w	12628 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    4c22:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4c24:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    4c26:	f850 3f08 	ldr.w	r3, [r0, #8]!
    4c2a:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4c2c:	f00d fd4d 	bl	126ca <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    4c30:	4629      	mov	r1, r5
    4c32:	4630      	mov	r0, r6
    4c34:	f7ff ffd0 	bl	4bd8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    4c38:	b950      	cbnz	r0, 4c50 <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    4c3a:	4b08      	ldr	r3, [pc, #32]	; (4c5c <bt_l2cap_recv+0x64>)
    4c3c:	9302      	str	r3, [sp, #8]
    4c3e:	e88d 0028 	stmia.w	sp, {r3, r5}
    4c42:	4a0b      	ldr	r2, [pc, #44]	; (4c70 <bt_l2cap_recv+0x78>)
    4c44:	4b07      	ldr	r3, [pc, #28]	; (4c64 <bt_l2cap_recv+0x6c>)
    4c46:	4908      	ldr	r1, [pc, #32]	; (4c68 <bt_l2cap_recv+0x70>)
    4c48:	480a      	ldr	r0, [pc, #40]	; (4c74 <bt_l2cap_recv+0x7c>)
    4c4a:	f7fc f99f 	bl	f8c <printk>
    4c4e:	e7e2      	b.n	4c16 <bt_l2cap_recv+0x1e>
	chan->ops->recv(chan, buf);
    4c50:	6843      	ldr	r3, [r0, #4]
    4c52:	4621      	mov	r1, r4
    4c54:	691b      	ldr	r3, [r3, #16]
    4c56:	4798      	blx	r3
    4c58:	e7dd      	b.n	4c16 <bt_l2cap_recv+0x1e>
    4c5a:	bf00      	nop
    4c5c:	000142a9 	.word	0x000142a9
    4c60:	00014ff8 	.word	0x00014ff8
    4c64:	00015508 	.word	0x00015508
    4c68:	00015047 	.word	0x00015047
    4c6c:	00015523 	.word	0x00015523
    4c70:	00015040 	.word	0x00015040
    4c74:	00015550 	.word	0x00015550

00004c78 <bt_l2cap_update_conn_param>:
{
    4c78:	b570      	push	{r4, r5, r6, lr}
	ident++;
    4c7a:	4b12      	ldr	r3, [pc, #72]	; (4cc4 <bt_l2cap_update_conn_param+0x4c>)
    4c7c:	781a      	ldrb	r2, [r3, #0]
    4c7e:	3201      	adds	r2, #1
	if (!ident) {
    4c80:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    4c84:	bf08      	it	eq
    4c86:	2201      	moveq	r2, #1
    4c88:	701a      	strb	r2, [r3, #0]
{
    4c8a:	460c      	mov	r4, r1
    4c8c:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    4c8e:	7819      	ldrb	r1, [r3, #0]
    4c90:	2208      	movs	r2, #8
    4c92:	2012      	movs	r0, #18
    4c94:	f7ff fdd2 	bl	483c <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    4c98:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    4c9a:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    4c9c:	4408      	add	r0, r1
    4c9e:	f00d fcf5 	bl	1268c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    4ca2:	8823      	ldrh	r3, [r4, #0]
    4ca4:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    4ca6:	8863      	ldrh	r3, [r4, #2]
    4ca8:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    4caa:	88a3      	ldrh	r3, [r4, #4]
    4cac:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    4cae:	88e3      	ldrh	r3, [r4, #6]
    4cb0:	80c3      	strh	r3, [r0, #6]
    4cb2:	4632      	mov	r2, r6
    4cb4:	4628      	mov	r0, r5
    4cb6:	2300      	movs	r3, #0
    4cb8:	2105      	movs	r1, #5
    4cba:	f7ff fe91 	bl	49e0 <bt_l2cap_send_cb>
}
    4cbe:	2000      	movs	r0, #0
    4cc0:	bd70      	pop	{r4, r5, r6, pc}
    4cc2:	bf00      	nop
    4cc4:	20000494 	.word	0x20000494

00004cc8 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    4cc8:	4801      	ldr	r0, [pc, #4]	; (4cd0 <bt_l2cap_init+0x8>)
    4cca:	f7ff bdcb 	b.w	4864 <bt_l2cap_le_fixed_chan_register>
    4cce:	bf00      	nop
    4cd0:	20003b98 	.word	0x20003b98

00004cd4 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    4cd4:	2006      	movs	r0, #6
    4cd6:	4770      	bx	lr

00004cd8 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    4cd8:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    4cda:	4a0a      	ldr	r2, [pc, #40]	; (4d04 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4cdc:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    4cde:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    4ce2:	4284      	cmp	r4, r0
    4ce4:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    4ce8:	d102      	bne.n	4cf0 <att_op_get_type+0x18>
			return handlers[i].type;
    4cea:	440a      	add	r2, r1
    4cec:	7890      	ldrb	r0, [r2, #2]
    4cee:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4cf0:	3301      	adds	r3, #1
    4cf2:	2b1b      	cmp	r3, #27
    4cf4:	d1f3      	bne.n	4cde <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    4cf6:	f010 0f40 	tst.w	r0, #64	; 0x40
    4cfa:	bf14      	ite	ne
    4cfc:	2000      	movne	r0, #0
    4cfe:	2006      	moveq	r0, #6
}
    4d00:	bd10      	pop	{r4, pc}
    4d02:	bf00      	nop
    4d04:	000159d0 	.word	0x000159d0

00004d08 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4d08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    4d0a:	4d11      	ldr	r5, [pc, #68]	; (4d50 <bt_att_accept+0x48>)
    4d0c:	682c      	ldr	r4, [r5, #0]
{
    4d0e:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    4d10:	b984      	cbnz	r4, 4d34 <bt_att_accept+0x2c>
			continue;
		}

		memset(att, 0, sizeof(*att));
    4d12:	22e4      	movs	r2, #228	; 0xe4
    4d14:	4621      	mov	r1, r4
    4d16:	4628      	mov	r0, r5
    4d18:	f7fc ff9c 	bl	1c54 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    4d1c:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    4d1e:	4b0d      	ldr	r3, [pc, #52]	; (4d54 <bt_att_accept+0x4c>)
    4d20:	606b      	str	r3, [r5, #4]
    4d22:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    4d26:	4611      	mov	r1, r2
    4d28:	f00e fcfe 	bl	13728 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    4d2c:	6035      	str	r5, [r6, #0]

		return 0;
    4d2e:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    4d30:	b004      	add	sp, #16
    4d32:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    4d34:	4b08      	ldr	r3, [pc, #32]	; (4d58 <bt_att_accept+0x50>)
    4d36:	9302      	str	r3, [sp, #8]
    4d38:	9001      	str	r0, [sp, #4]
    4d3a:	9300      	str	r3, [sp, #0]
    4d3c:	4a07      	ldr	r2, [pc, #28]	; (4d5c <bt_att_accept+0x54>)
    4d3e:	4b08      	ldr	r3, [pc, #32]	; (4d60 <bt_att_accept+0x58>)
    4d40:	4908      	ldr	r1, [pc, #32]	; (4d64 <bt_att_accept+0x5c>)
    4d42:	4809      	ldr	r0, [pc, #36]	; (4d68 <bt_att_accept+0x60>)
    4d44:	f7fc f922 	bl	f8c <printk>
	return -ENOMEM;
    4d48:	f06f 000b 	mvn.w	r0, #11
    4d4c:	e7f0      	b.n	4d30 <bt_att_accept+0x28>
    4d4e:	bf00      	nop
    4d50:	200004a0 	.word	0x200004a0
    4d54:	20003bc4 	.word	0x20003bc4
    4d58:	000142a9 	.word	0x000142a9
    4d5c:	00014ff8 	.word	0x00014ff8
    4d60:	00015778 	.word	0x00015778
    4d64:	00015047 	.word	0x00015047
    4d68:	00015888 	.word	0x00015888

00004d6c <att_req_destroy>:
{
    4d6c:	b510      	push	{r4, lr}
    4d6e:	4604      	mov	r4, r0
	if (req->buf) {
    4d70:	6900      	ldr	r0, [r0, #16]
    4d72:	b108      	cbz	r0, 4d78 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    4d74:	f00d fc58 	bl	12628 <net_buf_unref>
	if (req->destroy) {
    4d78:	68a3      	ldr	r3, [r4, #8]
    4d7a:	b10b      	cbz	r3, 4d80 <att_req_destroy+0x14>
		req->destroy(req);
    4d7c:	4620      	mov	r0, r4
    4d7e:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    4d80:	4620      	mov	r0, r4
    4d82:	2214      	movs	r2, #20
    4d84:	2100      	movs	r1, #0
}
    4d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    4d8a:	f7fc bf63 	b.w	1c54 <memset>

00004d8e <att_notify>:
{
    4d8e:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    4d90:	f101 0008 	add.w	r0, r1, #8
    4d94:	f00d fca9 	bl	126ea <net_buf_simple_pull_le16>
}
    4d98:	2000      	movs	r0, #0
    4d9a:	bd08      	pop	{r3, pc}

00004d9c <read_group_cb>:
{
    4d9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    4da0:	680d      	ldr	r5, [r1, #0]
{
    4da2:	4606      	mov	r6, r0
    4da4:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4da6:	f04f 0800 	mov.w	r8, #0
    4daa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4dae:	a902      	add	r1, sp, #8
    4db0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    4db2:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4db4:	f88d 8008 	strb.w	r8, [sp, #8]
    4db8:	f8ad 300a 	strh.w	r3, [sp, #10]
    4dbc:	f7fd f89c 	bl	1ef8 <bt_uuid_cmp>
    4dc0:	b198      	cbz	r0, 4dea <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4dc2:	f642 0301 	movw	r3, #10241	; 0x2801
    4dc6:	a903      	add	r1, sp, #12
    4dc8:	6830      	ldr	r0, [r6, #0]
    4dca:	f88d 800c 	strb.w	r8, [sp, #12]
    4dce:	f8ad 300e 	strh.w	r3, [sp, #14]
    4dd2:	f7fd f891 	bl	1ef8 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4dd6:	b140      	cbz	r0, 4dea <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    4dd8:	6923      	ldr	r3, [r4, #16]
    4dda:	b123      	cbz	r3, 4de6 <read_group_cb+0x4a>
    4ddc:	8a32      	ldrh	r2, [r6, #16]
    4dde:	8859      	ldrh	r1, [r3, #2]
    4de0:	4291      	cmp	r1, r2
    4de2:	d200      	bcs.n	4de6 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4de4:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    4de6:	2001      	movs	r0, #1
    4de8:	e012      	b.n	4e10 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4dea:	6861      	ldr	r1, [r4, #4]
    4dec:	6830      	ldr	r0, [r6, #0]
    4dee:	f7fd f883 	bl	1ef8 <bt_uuid_cmp>
    4df2:	b110      	cbz	r0, 4dfa <read_group_cb+0x5e>
		data->group = NULL;
    4df4:	2300      	movs	r3, #0
    4df6:	6123      	str	r3, [r4, #16]
    4df8:	e7f5      	b.n	4de6 <read_group_cb+0x4a>
	if (data->rsp->len &&
    4dfa:	68e3      	ldr	r3, [r4, #12]
    4dfc:	68a0      	ldr	r0, [r4, #8]
    4dfe:	781a      	ldrb	r2, [r3, #0]
    4e00:	b14a      	cbz	r2, 4e16 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    4e02:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    4e06:	8981      	ldrh	r1, [r0, #12]
    4e08:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    4e0a:	4293      	cmp	r3, r2
    4e0c:	da03      	bge.n	4e16 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    4e0e:	2000      	movs	r0, #0
}
    4e10:	b004      	add	sp, #16
    4e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4e16:	2104      	movs	r1, #4
    4e18:	3008      	adds	r0, #8
    4e1a:	f00d fc37 	bl	1268c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4e1e:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4e20:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4e22:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4e24:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4e26:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4e28:	898a      	ldrh	r2, [r1, #12]
    4e2a:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    4e2e:	6889      	ldr	r1, [r1, #8]
    4e30:	f8d6 8004 	ldr.w	r8, [r6, #4]
    4e34:	1a9b      	subs	r3, r3, r2
    4e36:	2500      	movs	r5, #0
    4e38:	440a      	add	r2, r1
    4e3a:	9500      	str	r5, [sp, #0]
    4e3c:	4631      	mov	r1, r6
    4e3e:	b29b      	uxth	r3, r3
    4e40:	4638      	mov	r0, r7
    4e42:	47c0      	blx	r8
	if (read < 0) {
    4e44:	1e01      	subs	r1, r0, #0
    4e46:	dbe2      	blt.n	4e0e <read_group_cb+0x72>
	if (!data->rsp->len) {
    4e48:	68e0      	ldr	r0, [r4, #12]
    4e4a:	7802      	ldrb	r2, [r0, #0]
    4e4c:	1d0b      	adds	r3, r1, #4
    4e4e:	b92a      	cbnz	r2, 4e5c <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    4e50:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    4e52:	68a0      	ldr	r0, [r4, #8]
    4e54:	3008      	adds	r0, #8
    4e56:	f00d fc19 	bl	1268c <net_buf_simple_add>
    4e5a:	e7c4      	b.n	4de6 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    4e5c:	429a      	cmp	r2, r3
    4e5e:	d0f8      	beq.n	4e52 <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    4e60:	68a2      	ldr	r2, [r4, #8]
    4e62:	8993      	ldrh	r3, [r2, #12]
    4e64:	3b04      	subs	r3, #4
    4e66:	8193      	strh	r3, [r2, #12]
    4e68:	e7d1      	b.n	4e0e <read_group_cb+0x72>

00004e6a <find_info_cb>:
	if (!data->rsp) {
    4e6a:	688b      	ldr	r3, [r1, #8]
{
    4e6c:	b570      	push	{r4, r5, r6, lr}
    4e6e:	4605      	mov	r5, r0
    4e70:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    4e72:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    4e74:	b963      	cbnz	r3, 4e90 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4e76:	6848      	ldr	r0, [r1, #4]
    4e78:	2101      	movs	r1, #1
    4e7a:	3008      	adds	r0, #8
    4e7c:	f00d fc06 	bl	1268c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    4e80:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4e82:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    4e84:	781b      	ldrb	r3, [r3, #0]
    4e86:	2b00      	cmp	r3, #0
    4e88:	bf0c      	ite	eq
    4e8a:	2301      	moveq	r3, #1
    4e8c:	2302      	movne	r3, #2
    4e8e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    4e90:	68a3      	ldr	r3, [r4, #8]
    4e92:	781b      	ldrb	r3, [r3, #0]
    4e94:	2b01      	cmp	r3, #1
    4e96:	d003      	beq.n	4ea0 <find_info_cb+0x36>
    4e98:	2b02      	cmp	r3, #2
    4e9a:	d01a      	beq.n	4ed2 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    4e9c:	2000      	movs	r0, #0
}
    4e9e:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    4ea0:	682b      	ldr	r3, [r5, #0]
    4ea2:	781b      	ldrb	r3, [r3, #0]
    4ea4:	2b00      	cmp	r3, #0
    4ea6:	d1f9      	bne.n	4e9c <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    4ea8:	6860      	ldr	r0, [r4, #4]
    4eaa:	2104      	movs	r1, #4
    4eac:	3008      	adds	r0, #8
    4eae:	f00d fbed 	bl	1268c <net_buf_simple_add>
    4eb2:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    4eb4:	8a2b      	ldrh	r3, [r5, #16]
    4eb6:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    4eb8:	682b      	ldr	r3, [r5, #0]
    4eba:	885b      	ldrh	r3, [r3, #2]
    4ebc:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    4ebe:	6863      	ldr	r3, [r4, #4]
    4ec0:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    4ec4:	899b      	ldrh	r3, [r3, #12]
    4ec6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    4ec8:	2804      	cmp	r0, #4
    4eca:	bf94      	ite	ls
    4ecc:	2000      	movls	r0, #0
    4ece:	2001      	movhi	r0, #1
    4ed0:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    4ed2:	682b      	ldr	r3, [r5, #0]
    4ed4:	781b      	ldrb	r3, [r3, #0]
    4ed6:	2b02      	cmp	r3, #2
    4ed8:	d1e0      	bne.n	4e9c <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    4eda:	6860      	ldr	r0, [r4, #4]
    4edc:	2112      	movs	r1, #18
    4ede:	3008      	adds	r0, #8
    4ee0:	f00d fbd4 	bl	1268c <net_buf_simple_add>
    4ee4:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    4ee6:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    4ee8:	8a2b      	ldrh	r3, [r5, #16]
    4eea:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    4eee:	2210      	movs	r2, #16
    4ef0:	3101      	adds	r1, #1
    4ef2:	f7fc fe83 	bl	1bfc <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    4ef6:	6863      	ldr	r3, [r4, #4]
    4ef8:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    4efc:	899b      	ldrh	r3, [r3, #12]
    4efe:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    4f00:	2812      	cmp	r0, #18
    4f02:	e7e2      	b.n	4eca <find_info_cb+0x60>

00004f04 <find_type_cb>:
{
    4f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    4f08:	680e      	ldr	r6, [r1, #0]
{
    4f0a:	b088      	sub	sp, #32
    4f0c:	4605      	mov	r5, r0
    4f0e:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4f10:	2700      	movs	r7, #0
    4f12:	f642 0301 	movw	r3, #10241	; 0x2801
    4f16:	a902      	add	r1, sp, #8
    4f18:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    4f1a:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4f1e:	f88d 7008 	strb.w	r7, [sp, #8]
    4f22:	f8ad 300a 	strh.w	r3, [sp, #10]
    4f26:	f7fc ffe7 	bl	1ef8 <bt_uuid_cmp>
    4f2a:	b928      	cbnz	r0, 4f38 <find_type_cb+0x34>
		data->group = NULL;
    4f2c:	2300      	movs	r3, #0
    4f2e:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    4f30:	2001      	movs	r0, #1
}
    4f32:	b008      	add	sp, #32
    4f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    4f38:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4f3c:	a903      	add	r1, sp, #12
    4f3e:	6828      	ldr	r0, [r5, #0]
    4f40:	f88d 700c 	strb.w	r7, [sp, #12]
    4f44:	f8ad 300e 	strh.w	r3, [sp, #14]
    4f48:	f7fc ffd6 	bl	1ef8 <bt_uuid_cmp>
    4f4c:	b140      	cbz	r0, 4f60 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    4f4e:	68a3      	ldr	r3, [r4, #8]
    4f50:	2b00      	cmp	r3, #0
    4f52:	d0ed      	beq.n	4f30 <find_type_cb+0x2c>
    4f54:	8a2a      	ldrh	r2, [r5, #16]
    4f56:	8859      	ldrh	r1, [r3, #2]
    4f58:	4291      	cmp	r1, r2
    4f5a:	d2e9      	bcs.n	4f30 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4f5c:	805a      	strh	r2, [r3, #2]
    4f5e:	e7e7      	b.n	4f30 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    4f60:	6862      	ldr	r2, [r4, #4]
    4f62:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    4f66:	8992      	ldrh	r2, [r2, #12]
    4f68:	1a9b      	subs	r3, r3, r2
    4f6a:	2b03      	cmp	r3, #3
    4f6c:	d9e1      	bls.n	4f32 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    4f6e:	2310      	movs	r3, #16
    4f70:	9000      	str	r0, [sp, #0]
    4f72:	eb0d 0203 	add.w	r2, sp, r3
    4f76:	686e      	ldr	r6, [r5, #4]
    4f78:	4629      	mov	r1, r5
    4f7a:	4640      	mov	r0, r8
    4f7c:	47b0      	blx	r6
	if (read < 0) {
    4f7e:	1e02      	subs	r2, r0, #0
    4f80:	dbd4      	blt.n	4f2c <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    4f82:	7c23      	ldrb	r3, [r4, #16]
    4f84:	429a      	cmp	r2, r3
    4f86:	d1d1      	bne.n	4f2c <find_type_cb+0x28>
    4f88:	a904      	add	r1, sp, #16
    4f8a:	68e0      	ldr	r0, [r4, #12]
    4f8c:	f7fc fe21 	bl	1bd2 <memcmp>
    4f90:	2800      	cmp	r0, #0
    4f92:	d1cb      	bne.n	4f2c <find_type_cb+0x28>
	data->err = 0x00;
    4f94:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4f96:	6860      	ldr	r0, [r4, #4]
    4f98:	2104      	movs	r1, #4
    4f9a:	3008      	adds	r0, #8
    4f9c:	f00d fb76 	bl	1268c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4fa0:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4fa2:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4fa4:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4fa6:	8043      	strh	r3, [r0, #2]
    4fa8:	e7c2      	b.n	4f30 <find_type_cb+0x2c>
	...

00004fac <bt_att_connected>:
{
    4fac:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    4fae:	2317      	movs	r3, #23
{
    4fb0:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    4fb2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    4fb6:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    4fb8:	4906      	ldr	r1, [pc, #24]	; (4fd4 <bt_att_connected+0x28>)
    4fba:	30a4      	adds	r0, #164	; 0xa4
    4fbc:	f00e fea4 	bl	13d08 <k_delayed_work_init>
	list->head = NULL;
    4fc0:	2300      	movs	r3, #0
    4fc2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    4fc6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	bt_gatt_connected(ch->chan.conn);
    4fca:	6820      	ldr	r0, [r4, #0]
}
    4fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    4fd0:	f001 bc00 	b.w	67d4 <bt_gatt_connected>
    4fd4:	000054f9 	.word	0x000054f9

00004fd8 <check_perm.isra.5>:
	if ((mask & BT_GATT_PERM_READ) &&
    4fd8:	f011 0f01 	tst.w	r1, #1
    4fdc:	7c83      	ldrb	r3, [r0, #18]
    4fde:	d004      	beq.n	4fea <check_perm.isra.5+0x12>
    4fe0:	f013 0f15 	tst.w	r3, #21
    4fe4:	d012      	beq.n	500c <check_perm.isra.5+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    4fe6:	6842      	ldr	r2, [r0, #4]
    4fe8:	b182      	cbz	r2, 500c <check_perm.isra.5+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    4fea:	078a      	lsls	r2, r1, #30
    4fec:	d504      	bpl.n	4ff8 <check_perm.isra.5+0x20>
    4fee:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    4ff2:	d00d      	beq.n	5010 <check_perm.isra.5+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    4ff4:	6882      	ldr	r2, [r0, #8]
    4ff6:	b15a      	cbz	r2, 5010 <check_perm.isra.5+0x38>
	mask &= attr->perm;
    4ff8:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    4ffa:	f011 0f30 	tst.w	r1, #48	; 0x30
    4ffe:	d109      	bne.n	5014 <check_perm.isra.5+0x3c>
	return 0;
    5000:	f011 0f0c 	tst.w	r1, #12
    5004:	bf14      	ite	ne
    5006:	200f      	movne	r0, #15
    5008:	2000      	moveq	r0, #0
    500a:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    500c:	2002      	movs	r0, #2
    500e:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    5010:	2003      	movs	r0, #3
    5012:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    5014:	2005      	movs	r0, #5
}
    5016:	4770      	bx	lr

00005018 <read_type_cb>:
{
    5018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    501c:	680f      	ldr	r7, [r1, #0]
{
    501e:	4606      	mov	r6, r0
    5020:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5022:	6800      	ldr	r0, [r0, #0]
    5024:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    5026:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    502a:	f7fc ff65 	bl	1ef8 <bt_uuid_cmp>
    502e:	4680      	mov	r8, r0
    5030:	2800      	cmp	r0, #0
    5032:	d14d      	bne.n	50d0 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5034:	2115      	movs	r1, #21
    5036:	4630      	mov	r0, r6
    5038:	f7ff ffce 	bl	4fd8 <check_perm.isra.5>
    503c:	4605      	mov	r5, r0
    503e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5040:	b148      	cbz	r0, 5056 <read_type_cb+0x3e>
		if (data->rsp->len) {
    5042:	68e3      	ldr	r3, [r4, #12]
    5044:	781d      	ldrb	r5, [r3, #0]
    5046:	b115      	cbz	r5, 504e <read_type_cb+0x36>
			data->err = 0x00;
    5048:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    504c:	4645      	mov	r5, r8
}
    504e:	4628      	mov	r0, r5
    5050:	b003      	add	sp, #12
    5052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5056:	68a0      	ldr	r0, [r4, #8]
    5058:	2102      	movs	r1, #2
    505a:	3008      	adds	r0, #8
    505c:	f00d fb16 	bl	1268c <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5060:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5062:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5064:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5066:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5068:	898a      	ldrh	r2, [r1, #12]
    506a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    506e:	6889      	ldr	r1, [r1, #8]
    5070:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5074:	9500      	str	r5, [sp, #0]
    5076:	1a9b      	subs	r3, r3, r2
    5078:	b29b      	uxth	r3, r3
    507a:	440a      	add	r2, r1
    507c:	4648      	mov	r0, r9
    507e:	4631      	mov	r1, r6
    5080:	47c0      	blx	r8
	if (read < 0) {
    5082:	1e01      	subs	r1, r0, #0
    5084:	da08      	bge.n	5098 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    5086:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    508a:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    508c:	bf9a      	itte	ls
    508e:	4249      	negls	r1, r1
    5090:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    5092:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5094:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    5096:	e7da      	b.n	504e <read_type_cb+0x36>
	if (!data->rsp->len) {
    5098:	68e0      	ldr	r0, [r4, #12]
    509a:	7802      	ldrb	r2, [r0, #0]
    509c:	1c8b      	adds	r3, r1, #2
    509e:	b982      	cbnz	r2, 50c2 <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    50a0:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    50a2:	68a0      	ldr	r0, [r4, #8]
    50a4:	3008      	adds	r0, #8
    50a6:	f00d faf1 	bl	1268c <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    50aa:	68a3      	ldr	r3, [r4, #8]
    50ac:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    50b0:	899b      	ldrh	r3, [r3, #12]
    50b2:	1aed      	subs	r5, r5, r3
    50b4:	68e3      	ldr	r3, [r4, #12]
    50b6:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    50b8:	429d      	cmp	r5, r3
    50ba:	bfd4      	ite	le
    50bc:	2500      	movle	r5, #0
    50be:	2501      	movgt	r5, #1
    50c0:	e7c5      	b.n	504e <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    50c2:	429a      	cmp	r2, r3
    50c4:	d0ed      	beq.n	50a2 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    50c6:	68a2      	ldr	r2, [r4, #8]
    50c8:	8993      	ldrh	r3, [r2, #12]
    50ca:	3b02      	subs	r3, #2
    50cc:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    50ce:	e7be      	b.n	504e <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    50d0:	2501      	movs	r5, #1
    50d2:	e7bc      	b.n	504e <read_type_cb+0x36>

000050d4 <uuid_create>:
{
    50d4:	b510      	push	{r4, lr}
	switch (buf->len) {
    50d6:	898a      	ldrh	r2, [r1, #12]
    50d8:	2a02      	cmp	r2, #2
{
    50da:	4604      	mov	r4, r0
	switch (buf->len) {
    50dc:	d003      	beq.n	50e6 <uuid_create+0x12>
    50de:	2a10      	cmp	r2, #16
    50e0:	d00a      	beq.n	50f8 <uuid_create+0x24>
	return false;
    50e2:	2000      	movs	r0, #0
}
    50e4:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    50e6:	2300      	movs	r3, #0
    50e8:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    50ea:	f101 0008 	add.w	r0, r1, #8
    50ee:	f00d fafc 	bl	126ea <net_buf_simple_pull_le16>
    50f2:	8060      	strh	r0, [r4, #2]
		return true;
    50f4:	2001      	movs	r0, #1
    50f6:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    50f8:	2302      	movs	r3, #2
    50fa:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    50fe:	6889      	ldr	r1, [r1, #8]
    5100:	f7fc fd7c 	bl	1bfc <memcpy>
    5104:	e7f6      	b.n	50f4 <uuid_create+0x20>
	...

00005108 <att_req_sent>:
{
    5108:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    510a:	2104      	movs	r1, #4
    510c:	f7ff fd54 	bl	4bb8 <bt_l2cap_le_lookup_tx_cid>
    5110:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5112:	30cc      	adds	r0, #204	; 0xcc
    5114:	f00e fb11 	bl	1373a <_impl_k_sem_give>
	if (att->req) {
    5118:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    511c:	b143      	cbz	r3, 5130 <att_req_sent+0x28>
    511e:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    5122:	f247 5230 	movw	r2, #30000	; 0x7530
    5126:	4803      	ldr	r0, [pc, #12]	; (5134 <att_req_sent+0x2c>)
}
    5128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    512c:	f00e be60 	b.w	13df0 <k_delayed_work_submit_to_queue>
    5130:	bd10      	pop	{r4, pc}
    5132:	bf00      	nop
    5134:	20001988 	.word	0x20001988

00005138 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    5138:	6803      	ldr	r3, [r0, #0]
    513a:	7a5b      	ldrb	r3, [r3, #9]
    513c:	2b03      	cmp	r3, #3
    513e:	d10a      	bne.n	5156 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5140:	f3bf 8f5b 	dmb	ish
    5144:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    5148:	f3bf 8f5b 	dmb	ish
    514c:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    5150:	f000 0001 	and.w	r0, r0, #1
    5154:	4770      	bx	lr
    5156:	2001      	movs	r0, #1
}
    5158:	4770      	bx	lr

0000515a <att_prepare_write_req>:
    515a:	2006      	movs	r0, #6
    515c:	4770      	bx	lr

0000515e <att_pdu_sent>:
{
    515e:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5160:	2104      	movs	r1, #4
    5162:	f7ff fd29 	bl	4bb8 <bt_l2cap_le_lookup_tx_cid>
}
    5166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    516a:	30cc      	adds	r0, #204	; 0xcc
    516c:	f00e bae5 	b.w	1373a <_impl_k_sem_give>

00005170 <att_rsp_sent>:
{
    5170:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5172:	2104      	movs	r1, #4
    5174:	f7ff fd20 	bl	4bb8 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5178:	f3bf 8f5b 	dmb	ish
    517c:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5180:	e853 2f00 	ldrex	r2, [r3]
    5184:	f022 0201 	bic.w	r2, r2, #1
    5188:	e843 2100 	strex	r1, r2, [r3]
    518c:	2900      	cmp	r1, #0
    518e:	d1f7      	bne.n	5180 <att_rsp_sent+0x10>
    5190:	f3bf 8f5b 	dmb	ish
    5194:	30cc      	adds	r0, #204	; 0xcc
}
    5196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    519a:	f00e bace 	b.w	1373a <_impl_k_sem_give>

0000519e <att_cfm_sent>:
{
    519e:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    51a0:	2104      	movs	r1, #4
    51a2:	f7ff fd09 	bl	4bb8 <bt_l2cap_le_lookup_tx_cid>
    51a6:	f3bf 8f5b 	dmb	ish
    51aa:	f100 0394 	add.w	r3, r0, #148	; 0x94
    51ae:	e853 2f00 	ldrex	r2, [r3]
    51b2:	f022 0202 	bic.w	r2, r2, #2
    51b6:	e843 2100 	strex	r1, r2, [r3]
    51ba:	2900      	cmp	r1, #0
    51bc:	d1f7      	bne.n	51ae <att_cfm_sent+0x10>
    51be:	f3bf 8f5b 	dmb	ish
    51c2:	30cc      	adds	r0, #204	; 0xcc
}
    51c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    51c8:	f00e bab7 	b.w	1373a <_impl_k_sem_give>

000051cc <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    51cc:	7a43      	ldrb	r3, [r0, #9]
    51ce:	2b03      	cmp	r3, #3
{
    51d0:	b513      	push	{r0, r1, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    51d2:	d00b      	beq.n	51ec <att_chan_get+0x20>
		BT_WARN("Not connected");
    51d4:	4b15      	ldr	r3, [pc, #84]	; (522c <att_chan_get+0x60>)
    51d6:	9301      	str	r3, [sp, #4]
    51d8:	9300      	str	r3, [sp, #0]
    51da:	4a15      	ldr	r2, [pc, #84]	; (5230 <att_chan_get+0x64>)
    51dc:	4b15      	ldr	r3, [pc, #84]	; (5234 <att_chan_get+0x68>)
    51de:	4916      	ldr	r1, [pc, #88]	; (5238 <att_chan_get+0x6c>)
    51e0:	4816      	ldr	r0, [pc, #88]	; (523c <att_chan_get+0x70>)
		BT_WARN("ATT context flagged as disconnected");
    51e2:	f7fb fed3 	bl	f8c <printk>
		return NULL;
    51e6:	2000      	movs	r0, #0
}
    51e8:	b002      	add	sp, #8
    51ea:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    51ec:	2104      	movs	r1, #4
    51ee:	f7ff fcf3 	bl	4bd8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    51f2:	4604      	mov	r4, r0
    51f4:	b950      	cbnz	r0, 520c <att_chan_get+0x40>
		BT_ERR("Unable to find ATT channel");
    51f6:	4b0d      	ldr	r3, [pc, #52]	; (522c <att_chan_get+0x60>)
    51f8:	9301      	str	r3, [sp, #4]
    51fa:	9300      	str	r3, [sp, #0]
    51fc:	4a10      	ldr	r2, [pc, #64]	; (5240 <att_chan_get+0x74>)
    51fe:	4b0d      	ldr	r3, [pc, #52]	; (5234 <att_chan_get+0x68>)
    5200:	490d      	ldr	r1, [pc, #52]	; (5238 <att_chan_get+0x6c>)
    5202:	4810      	ldr	r0, [pc, #64]	; (5244 <att_chan_get+0x78>)
    5204:	f7fb fec2 	bl	f8c <printk>
    5208:	4620      	mov	r0, r4
    520a:	e7ed      	b.n	51e8 <att_chan_get+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    520c:	f3bf 8f5b 	dmb	ish
    5210:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    5214:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    5218:	075b      	lsls	r3, r3, #29
    521a:	d5f5      	bpl.n	5208 <att_chan_get+0x3c>
		BT_WARN("ATT context flagged as disconnected");
    521c:	4b03      	ldr	r3, [pc, #12]	; (522c <att_chan_get+0x60>)
    521e:	9301      	str	r3, [sp, #4]
    5220:	9300      	str	r3, [sp, #0]
    5222:	4a03      	ldr	r2, [pc, #12]	; (5230 <att_chan_get+0x64>)
    5224:	4b03      	ldr	r3, [pc, #12]	; (5234 <att_chan_get+0x68>)
    5226:	4904      	ldr	r1, [pc, #16]	; (5238 <att_chan_get+0x6c>)
    5228:	4807      	ldr	r0, [pc, #28]	; (5248 <att_chan_get+0x7c>)
    522a:	e7da      	b.n	51e2 <att_chan_get+0x16>
    522c:	000142a9 	.word	0x000142a9
    5230:	00015040 	.word	0x00015040
    5234:	0001574d 	.word	0x0001574d
    5238:	00015047 	.word	0x00015047
    523c:	00015786 	.word	0x00015786
    5240:	00014ff8 	.word	0x00014ff8
    5244:	000157a4 	.word	0x000157a4
    5248:	000157cf 	.word	0x000157cf

0000524c <write_cb>:
{
    524c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5250:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5252:	f8d1 8000 	ldr.w	r8, [r1]
    5256:	212a      	movs	r1, #42	; 0x2a
{
    5258:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    525a:	f7ff febd 	bl	4fd8 <check_perm.isra.5>
    525e:	4605      	mov	r5, r0
    5260:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5262:	b9e0      	cbnz	r0, 529e <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    5264:	8a62      	ldrh	r2, [r4, #18]
    5266:	9001      	str	r0, [sp, #4]
    5268:	9200      	str	r2, [sp, #0]
    526a:	7c23      	ldrb	r3, [r4, #16]
    526c:	68b7      	ldr	r7, [r6, #8]
    526e:	68e2      	ldr	r2, [r4, #12]
    5270:	4631      	mov	r1, r6
    5272:	4640      	mov	r0, r8
    5274:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    5276:	2800      	cmp	r0, #0
    5278:	db02      	blt.n	5280 <write_cb+0x34>
    527a:	7c23      	ldrb	r3, [r4, #16]
    527c:	4298      	cmp	r0, r3
    527e:	d00b      	beq.n	5298 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    5280:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    5284:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5286:	bf9a      	itte	ls
    5288:	4240      	negls	r0, r0
    528a:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    528c:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    528e:	7520      	strb	r0, [r4, #20]
}
    5290:	4628      	mov	r0, r5
    5292:	b002      	add	sp, #8
    5294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    5298:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    529a:	2501      	movs	r5, #1
    529c:	e7f8      	b.n	5290 <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    529e:	2500      	movs	r5, #0
    52a0:	e7f6      	b.n	5290 <write_cb+0x44>
	...

000052a4 <att_send_req>:
{
    52a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    52a6:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    52a8:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    52ac:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    52b0:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    52b2:	4630      	mov	r0, r6
    52b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    52b8:	f00e fa67 	bl	1378a <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    52bc:	4628      	mov	r0, r5
    52be:	f7ff ff3b 	bl	5138 <att_is_connected>
    52c2:	b978      	cbnz	r0, 52e4 <att_send_req+0x40>
		BT_WARN("Disconnected");
    52c4:	4b18      	ldr	r3, [pc, #96]	; (5328 <att_send_req+0x84>)
    52c6:	9301      	str	r3, [sp, #4]
    52c8:	9300      	str	r3, [sp, #0]
    52ca:	4a18      	ldr	r2, [pc, #96]	; (532c <att_send_req+0x88>)
    52cc:	4b18      	ldr	r3, [pc, #96]	; (5330 <att_send_req+0x8c>)
    52ce:	4919      	ldr	r1, [pc, #100]	; (5334 <att_send_req+0x90>)
    52d0:	4819      	ldr	r0, [pc, #100]	; (5338 <att_send_req+0x94>)
    52d2:	f7fb fe5b 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    52d6:	4630      	mov	r0, r6
    52d8:	f00e fa2f 	bl	1373a <_impl_k_sem_give>
		return -ENOTCONN;
    52dc:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    52e0:	b002      	add	sp, #8
    52e2:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    52e4:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    52e6:	f106 0008 	add.w	r0, r6, #8
    52ea:	f00d fa06 	bl	126fa <net_buf_simple_headroom>
	state->len = buf->len;
    52ee:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    52f0:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    52f2:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    52f4:	6920      	ldr	r0, [r4, #16]
    52f6:	682d      	ldr	r5, [r5, #0]
    52f8:	f00d f9c4 	bl	12684 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    52fc:	6923      	ldr	r3, [r4, #16]
    52fe:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5300:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    5302:	7818      	ldrb	r0, [r3, #0]
    5304:	f7ff fce8 	bl	4cd8 <att_op_get_type>
    5308:	3801      	subs	r0, #1
    530a:	b2c0      	uxtb	r0, r0
    530c:	2804      	cmp	r0, #4
    530e:	bf96      	itet	ls
    5310:	4b0a      	ldrls	r3, [pc, #40]	; (533c <att_send_req+0x98>)
    5312:	4b0b      	ldrhi	r3, [pc, #44]	; (5340 <att_send_req+0x9c>)
    5314:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5318:	4632      	mov	r2, r6
    531a:	4628      	mov	r0, r5
    531c:	2104      	movs	r1, #4
    531e:	f7ff fb5f 	bl	49e0 <bt_l2cap_send_cb>
	return 0;
    5322:	2000      	movs	r0, #0
    5324:	e7dc      	b.n	52e0 <att_send_req+0x3c>
    5326:	bf00      	nop
    5328:	000142a9 	.word	0x000142a9
    532c:	00015040 	.word	0x00015040
    5330:	00015710 	.word	0x00015710
    5334:	00015047 	.word	0x00015047
    5338:	0001582a 	.word	0x0001582a
    533c:	000156fc 	.word	0x000156fc
    5340:	0000515f 	.word	0x0000515f

00005344 <att_handle_rsp>:
{
    5344:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5348:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    534a:	30a4      	adds	r0, #164	; 0xa4
{
    534c:	461e      	mov	r6, r3
    534e:	460f      	mov	r7, r1
    5350:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    5352:	f00e fce9 	bl	13d28 <k_delayed_work_cancel>
	if (!att->req) {
    5356:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    535a:	b9db      	cbnz	r3, 5394 <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
    535c:	4b1c      	ldr	r3, [pc, #112]	; (53d0 <att_handle_rsp+0x8c>)
    535e:	9301      	str	r3, [sp, #4]
    5360:	9300      	str	r3, [sp, #0]
    5362:	4a1c      	ldr	r2, [pc, #112]	; (53d4 <att_handle_rsp+0x90>)
    5364:	4b1c      	ldr	r3, [pc, #112]	; (53d8 <att_handle_rsp+0x94>)
    5366:	491d      	ldr	r1, [pc, #116]	; (53dc <att_handle_rsp+0x98>)
    5368:	481d      	ldr	r0, [pc, #116]	; (53e0 <att_handle_rsp+0x9c>)
    536a:	f7fb fe0f 	bl	f8c <printk>
    536e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    5372:	b159      	cbz	r1, 538c <att_handle_rsp+0x48>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5374:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    5378:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    537a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    537e:	4291      	cmp	r1, r2
	list->tail = node;
    5380:	bf08      	it	eq
    5382:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    5386:	4620      	mov	r0, r4
    5388:	f7ff ff8c 	bl	52a4 <att_send_req>
}
    538c:	2000      	movs	r0, #0
    538e:	b003      	add	sp, #12
    5390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    5394:	6918      	ldr	r0, [r3, #16]
    5396:	b128      	cbz	r0, 53a4 <att_handle_rsp+0x60>
		net_buf_unref(att->req->buf);
    5398:	f00d f946 	bl	12628 <net_buf_unref>
		att->req->buf = NULL;
    539c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    53a0:	2200      	movs	r2, #0
    53a2:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    53a4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    53a8:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    53aa:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    53ae:	2500      	movs	r5, #0
    53b0:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    53b2:	463a      	mov	r2, r7
    53b4:	9300      	str	r3, [sp, #0]
    53b6:	4631      	mov	r1, r6
    53b8:	4643      	mov	r3, r8
    53ba:	47c8      	blx	r9
	if (!att->req->func) {
    53bc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    53c0:	6843      	ldr	r3, [r0, #4]
    53c2:	b90b      	cbnz	r3, 53c8 <att_handle_rsp+0x84>
		att_req_destroy(att->req);
    53c4:	f7ff fcd2 	bl	4d6c <att_req_destroy>
	att->req = NULL;
    53c8:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    53cc:	e7cf      	b.n	536e <att_handle_rsp+0x2a>
    53ce:	bf00      	nop
    53d0:	000142a9 	.word	0x000142a9
    53d4:	00015040 	.word	0x00015040
    53d8:	0001571d 	.word	0x0001571d
    53dc:	00015047 	.word	0x00015047
    53e0:	00015803 	.word	0x00015803

000053e4 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    53e4:	898a      	ldrh	r2, [r1, #12]
    53e6:	6889      	ldr	r1, [r1, #8]
    53e8:	2300      	movs	r3, #0
    53ea:	f7ff bfab 	b.w	5344 <att_handle_rsp>

000053ee <att_handle_exec_write_rsp>:
    53ee:	f7ff bff9 	b.w	53e4 <att_confirm>

000053f2 <att_handle_prepare_write_rsp>:
    53f2:	f7ff bff7 	b.w	53e4 <att_confirm>

000053f6 <att_handle_write_rsp>:
    53f6:	f7ff bff5 	b.w	53e4 <att_confirm>

000053fa <att_handle_read_mult_rsp>:
    53fa:	f7ff bff3 	b.w	53e4 <att_confirm>

000053fe <att_handle_read_blob_rsp>:
    53fe:	f7ff bff1 	b.w	53e4 <att_confirm>

00005402 <att_handle_read_rsp>:
    5402:	f7ff bfef 	b.w	53e4 <att_confirm>

00005406 <att_handle_read_type_rsp>:
    5406:	f7ff bfed 	b.w	53e4 <att_confirm>

0000540a <att_handle_find_type_rsp>:
    540a:	f7ff bfeb 	b.w	53e4 <att_confirm>

0000540e <att_handle_find_info_rsp>:
    540e:	f7ff bfe9 	b.w	53e4 <att_confirm>

00005412 <att_mtu_rsp>:
{
    5412:	b410      	push	{r4}
    5414:	460a      	mov	r2, r1
	if (!att) {
    5416:	4603      	mov	r3, r0
    5418:	b180      	cbz	r0, 543c <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    541a:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    541c:	880c      	ldrh	r4, [r1, #0]
    541e:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    5420:	bf83      	ittte	hi
    5422:	2417      	movhi	r4, #23
    5424:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5426:	f8a3 405a 	strhhi.w	r4, [r3, #90]	; 0x5a
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    542a:	2200      	movls	r2, #0
    542c:	bf99      	ittee	ls
    542e:	2304      	movls	r3, #4
    5430:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    5432:	2300      	movhi	r3, #0
    5434:	8992      	ldrhhi	r2, [r2, #12]
}
    5436:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    5438:	f7ff bf84 	b.w	5344 <att_handle_rsp>
}
    543c:	bc10      	pop	{r4}
    543e:	4770      	bx	lr

00005440 <att_error_rsp>:
{
    5440:	b430      	push	{r4, r5}
	if (!att->req) {
    5442:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    5446:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    5448:	b16a      	cbz	r2, 5466 <att_error_rsp+0x26>
	if (att->req->buf) {
    544a:	6913      	ldr	r3, [r2, #16]
    544c:	b12b      	cbz	r3, 545a <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    544e:	8995      	ldrh	r5, [r2, #12]
    5450:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    5452:	89d2      	ldrh	r2, [r2, #14]
    5454:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    5456:	4429      	add	r1, r5
    5458:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    545a:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    545c:	2200      	movs	r2, #0
    545e:	4611      	mov	r1, r2
}
    5460:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    5462:	f7ff bf6f 	b.w	5344 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    5466:	230e      	movs	r3, #14
    5468:	e7f8      	b.n	545c <att_error_rsp+0x1c>

0000546a <att_reset>:
{
    546a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    546c:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5470:	4605      	mov	r5, r0
    5472:	f3bf 8f5b 	dmb	ish
    5476:	e853 2f00 	ldrex	r2, [r3]
    547a:	f042 0204 	orr.w	r2, r2, #4
    547e:	e843 2100 	strex	r1, r2, [r3]
    5482:	2900      	cmp	r1, #0
    5484:	d1f7      	bne.n	5476 <att_reset+0xc>
    5486:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    548a:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    548e:	4620      	mov	r0, r4
    5490:	f00e f953 	bl	1373a <_impl_k_sem_give>
    5494:	4620      	mov	r0, r4
    5496:	f00e f950 	bl	1373a <_impl_k_sem_give>
    549a:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    549e:	b98c      	cbnz	r4, 54c4 <att_reset+0x5a>
	if (!att->req) {
    54a0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    54a4:	2200      	movs	r2, #0
    54a6:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    54aa:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    54ae:	b90b      	cbnz	r3, 54b4 <att_reset+0x4a>
}
    54b0:	b003      	add	sp, #12
    54b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    54b4:	230e      	movs	r3, #14
    54b6:	4611      	mov	r1, r2
    54b8:	4628      	mov	r0, r5
}
    54ba:	b003      	add	sp, #12
    54bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    54c0:	f7ff bf40 	b.w	5344 <att_handle_rsp>
	return node->next;
    54c4:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    54c6:	6867      	ldr	r7, [r4, #4]
    54c8:	b12f      	cbz	r7, 54d6 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    54ca:	2300      	movs	r3, #0
    54cc:	9400      	str	r4, [sp, #0]
    54ce:	461a      	mov	r2, r3
    54d0:	210e      	movs	r1, #14
    54d2:	4618      	mov	r0, r3
    54d4:	47b8      	blx	r7
		att_req_destroy(req);
    54d6:	4620      	mov	r0, r4
    54d8:	f7ff fc48 	bl	4d6c <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    54dc:	2e00      	cmp	r6, #0
    54de:	d0df      	beq.n	54a0 <att_reset+0x36>
    54e0:	4634      	mov	r4, r6
    54e2:	6836      	ldr	r6, [r6, #0]
    54e4:	e7ef      	b.n	54c6 <att_reset+0x5c>

000054e6 <bt_att_disconnected>:
{
    54e6:	b510      	push	{r4, lr}
    54e8:	4604      	mov	r4, r0
	att_reset(att);
    54ea:	f7ff ffbe 	bl	546a <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    54ee:	6820      	ldr	r0, [r4, #0]
}
    54f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    54f4:	f001 b978 	b.w	67e8 <bt_gatt_disconnected>

000054f8 <att_timeout>:
{
    54f8:	b513      	push	{r0, r1, r4, lr}
	BT_ERR("ATT Timeout");
    54fa:	4b0b      	ldr	r3, [pc, #44]	; (5528 <att_timeout+0x30>)
    54fc:	4a0b      	ldr	r2, [pc, #44]	; (552c <att_timeout+0x34>)
    54fe:	490c      	ldr	r1, [pc, #48]	; (5530 <att_timeout+0x38>)
    5500:	9301      	str	r3, [sp, #4]
{
    5502:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    5504:	9300      	str	r3, [sp, #0]
    5506:	480b      	ldr	r0, [pc, #44]	; (5534 <att_timeout+0x3c>)
    5508:	4b0b      	ldr	r3, [pc, #44]	; (5538 <att_timeout+0x40>)
    550a:	f7fb fd3f 	bl	f8c <printk>
	att_reset(att);
    550e:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
    5512:	f7ff ffaa 	bl	546a <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    5516:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    551a:	f001 f965 	bl	67e8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    551e:	2300      	movs	r3, #0
    5520:	f844 3ca4 	str.w	r3, [r4, #-164]
}
    5524:	b002      	add	sp, #8
    5526:	bd10      	pop	{r4, pc}
    5528:	000142a9 	.word	0x000142a9
    552c:	00014ff8 	.word	0x00014ff8
    5530:	00015047 	.word	0x00015047
    5534:	0001586c 	.word	0x0001586c
    5538:	0001576c 	.word	0x0001576c

0000553c <read_cb>:
{
    553c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5540:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5542:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    5544:	f8d1 9000 	ldr.w	r9, [r1]
{
    5548:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    554a:	3008      	adds	r0, #8
    554c:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    554e:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5552:	f00d f89b 	bl	1268c <net_buf_simple_add>
	data->err = 0x00;
    5556:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5558:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    555a:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    555c:	2115      	movs	r1, #21
    555e:	4630      	mov	r0, r6
    5560:	f7ff fd3a 	bl	4fd8 <check_perm.isra.5>
    5564:	4605      	mov	r5, r0
    5566:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    5568:	bb08      	cbnz	r0, 55ae <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    556a:	68a1      	ldr	r1, [r4, #8]
    556c:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    5570:	898a      	ldrh	r2, [r1, #12]
    5572:	6889      	ldr	r1, [r1, #8]
    5574:	88a0      	ldrh	r0, [r4, #4]
    5576:	9000      	str	r0, [sp, #0]
    5578:	1a9b      	subs	r3, r3, r2
    557a:	6877      	ldr	r7, [r6, #4]
    557c:	440a      	add	r2, r1
    557e:	b29b      	uxth	r3, r3
    5580:	4631      	mov	r1, r6
    5582:	4640      	mov	r0, r8
    5584:	47b8      	blx	r7
	if (read < 0) {
    5586:	1e01      	subs	r1, r0, #0
    5588:	da0b      	bge.n	55a2 <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    558a:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    558e:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5590:	bf9a      	itte	ls
    5592:	4249      	negls	r1, r1
    5594:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    5596:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5598:	7421      	strb	r1, [r4, #16]
}
    559a:	4628      	mov	r0, r5
    559c:	b003      	add	sp, #12
    559e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    55a2:	68a0      	ldr	r0, [r4, #8]
    55a4:	3008      	adds	r0, #8
    55a6:	f00d f871 	bl	1268c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    55aa:	2501      	movs	r5, #1
    55ac:	e7f5      	b.n	559a <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    55ae:	463d      	mov	r5, r7
    55b0:	e7f3      	b.n	559a <read_cb+0x5e>
	...

000055b4 <bt_att_create_pdu>:
{
    55b4:	b530      	push	{r4, r5, lr}
    55b6:	b085      	sub	sp, #20
    55b8:	460d      	mov	r5, r1
    55ba:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    55bc:	f7ff fe06 	bl	51cc <att_chan_get>
	if (!att) {
    55c0:	b1f0      	cbz	r0, 5600 <bt_att_create_pdu+0x4c>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    55c2:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
    55c6:	3401      	adds	r4, #1
    55c8:	428c      	cmp	r4, r1
    55ca:	d90e      	bls.n	55ea <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    55cc:	4b0d      	ldr	r3, [pc, #52]	; (5604 <bt_att_create_pdu+0x50>)
    55ce:	9303      	str	r3, [sp, #12]
    55d0:	9402      	str	r4, [sp, #8]
    55d2:	9101      	str	r1, [sp, #4]
    55d4:	9300      	str	r3, [sp, #0]
    55d6:	4a0c      	ldr	r2, [pc, #48]	; (5608 <bt_att_create_pdu+0x54>)
    55d8:	4b0c      	ldr	r3, [pc, #48]	; (560c <bt_att_create_pdu+0x58>)
    55da:	490d      	ldr	r1, [pc, #52]	; (5610 <bt_att_create_pdu+0x5c>)
    55dc:	480d      	ldr	r0, [pc, #52]	; (5614 <bt_att_create_pdu+0x60>)
    55de:	f7fb fcd5 	bl	f8c <printk>
		return NULL;
    55e2:	2400      	movs	r4, #0
}
    55e4:	4620      	mov	r0, r4
    55e6:	b005      	add	sp, #20
    55e8:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    55ea:	2100      	movs	r1, #0
    55ec:	4608      	mov	r0, r1
    55ee:	f7ff f9f4 	bl	49da <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    55f2:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    55f4:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    55f6:	3008      	adds	r0, #8
    55f8:	f00d f848 	bl	1268c <net_buf_simple_add>
	hdr->code = op;
    55fc:	7005      	strb	r5, [r0, #0]
	return buf;
    55fe:	e7f1      	b.n	55e4 <bt_att_create_pdu+0x30>
		return NULL;
    5600:	4604      	mov	r4, r0
    5602:	e7ef      	b.n	55e4 <bt_att_create_pdu+0x30>
    5604:	000142a9 	.word	0x000142a9
    5608:	00015040 	.word	0x00015040
    560c:	0001575a 	.word	0x0001575a
    5610:	00015047 	.word	0x00015047
    5614:	000158bd 	.word	0x000158bd

00005618 <att_indicate>:
{
    5618:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    561a:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    561c:	f101 0008 	add.w	r0, r1, #8
    5620:	f00d f863 	bl	126ea <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    5624:	2200      	movs	r2, #0
    5626:	211e      	movs	r1, #30
    5628:	4620      	mov	r0, r4
    562a:	f7ff ffc3 	bl	55b4 <bt_att_create_pdu>
	if (!buf) {
    562e:	4602      	mov	r2, r0
    5630:	b120      	cbz	r0, 563c <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    5632:	4b03      	ldr	r3, [pc, #12]	; (5640 <att_indicate+0x28>)
    5634:	2104      	movs	r1, #4
    5636:	4620      	mov	r0, r4
    5638:	f7ff f9d2 	bl	49e0 <bt_l2cap_send_cb>
}
    563c:	2000      	movs	r0, #0
    563e:	bd10      	pop	{r4, pc}
    5640:	0000519f 	.word	0x0000519f

00005644 <att_mtu_req>:
{
    5644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    5648:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    564a:	881b      	ldrh	r3, [r3, #0]
    564c:	2b16      	cmp	r3, #22
{
    564e:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5650:	d91c      	bls.n	568c <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    5652:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    5656:	2202      	movs	r2, #2
    5658:	2103      	movs	r1, #3
    565a:	4640      	mov	r0, r8
    565c:	f7ff ffaa 	bl	55b4 <bt_att_create_pdu>
	if (!pdu) {
    5660:	4607      	mov	r7, r0
    5662:	b1b0      	cbz	r0, 5692 <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    5664:	2102      	movs	r1, #2
    5666:	3008      	adds	r0, #8
    5668:	f00d f810 	bl	1268c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    566c:	2617      	movs	r6, #23
    566e:	2400      	movs	r4, #0
    5670:	7006      	strb	r6, [r0, #0]
    5672:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    5674:	4b08      	ldr	r3, [pc, #32]	; (5698 <att_mtu_req+0x54>)
    5676:	4640      	mov	r0, r8
    5678:	463a      	mov	r2, r7
    567a:	2104      	movs	r1, #4
    567c:	f7ff f9b0 	bl	49e0 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    5680:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5682:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	return 0;
    5686:	4620      	mov	r0, r4
    5688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    568c:	2004      	movs	r0, #4
    568e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    5692:	200e      	movs	r0, #14
}
    5694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5698:	00005171 	.word	0x00005171

0000569c <send_err_rsp.part.11>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    569c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56a0:	4688      	mov	r8, r1
    56a2:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    56a4:	2101      	movs	r1, #1
    56a6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    56a8:	4605      	mov	r5, r0
    56aa:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    56ac:	f7ff ff82 	bl	55b4 <bt_att_create_pdu>
	if (!buf) {
    56b0:	4604      	mov	r4, r0
    56b2:	b180      	cbz	r0, 56d6 <send_err_rsp.part.11+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    56b4:	2104      	movs	r1, #4
    56b6:	3008      	adds	r0, #8
    56b8:	f00c ffe8 	bl	1268c <net_buf_simple_add>
	rsp->request = req;
    56bc:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    56c0:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    56c2:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    56c6:	4622      	mov	r2, r4
    56c8:	4628      	mov	r0, r5
    56ca:	4b04      	ldr	r3, [pc, #16]	; (56dc <send_err_rsp.part.11+0x40>)
    56cc:	2104      	movs	r1, #4
}
    56ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    56d2:	f7ff b985 	b.w	49e0 <bt_l2cap_send_cb>
    56d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56da:	bf00      	nop
    56dc:	00005171 	.word	0x00005171

000056e0 <bt_att_recv>:
{
    56e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    56e2:	898b      	ldrh	r3, [r1, #12]
{
    56e4:	b085      	sub	sp, #20
    56e6:	4604      	mov	r4, r0
    56e8:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    56ea:	b953      	cbnz	r3, 5702 <bt_att_recv+0x22>
		BT_ERR("Too small ATT PDU received");
    56ec:	4b4b      	ldr	r3, [pc, #300]	; (581c <bt_att_recv+0x13c>)
    56ee:	9301      	str	r3, [sp, #4]
    56f0:	9300      	str	r3, [sp, #0]
    56f2:	4a4b      	ldr	r2, [pc, #300]	; (5820 <bt_att_recv+0x140>)
    56f4:	4b4b      	ldr	r3, [pc, #300]	; (5824 <bt_att_recv+0x144>)
    56f6:	494c      	ldr	r1, [pc, #304]	; (5828 <bt_att_recv+0x148>)
    56f8:	484c      	ldr	r0, [pc, #304]	; (582c <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected request");
    56fa:	f7fb fc47 	bl	f8c <printk>
}
    56fe:	b005      	add	sp, #20
    5700:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    5702:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5704:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    5706:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    570a:	f00c ffde 	bl	126ca <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    570e:	4a48      	ldr	r2, [pc, #288]	; (5830 <bt_att_recv+0x150>)
    5710:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5712:	2300      	movs	r3, #0
    5714:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    5716:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    571a:	4286      	cmp	r6, r0
    571c:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    5720:	d11c      	bne.n	575c <bt_att_recv+0x7c>
		if (handler->type == ATT_REQUEST &&
    5722:	4472      	add	r2, lr
    5724:	7896      	ldrb	r6, [r2, #2]
    5726:	2e01      	cmp	r6, #1
    5728:	d136      	bne.n	5798 <bt_att_recv+0xb8>
    572a:	f3bf 8f5b 	dmb	ish
    572e:	f104 0294 	add.w	r2, r4, #148	; 0x94
    5732:	e852 3f00 	ldrex	r3, [r2]
    5736:	f043 0001 	orr.w	r0, r3, #1
    573a:	e842 0c00 	strex	ip, r0, [r2]
    573e:	f1bc 0f00 	cmp.w	ip, #0
    5742:	d1f6      	bne.n	5732 <bt_att_recv+0x52>
    5744:	f3bf 8f5b 	dmb	ish
    5748:	07da      	lsls	r2, r3, #31
    574a:	d540      	bpl.n	57ce <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected request");
    574c:	4b33      	ldr	r3, [pc, #204]	; (581c <bt_att_recv+0x13c>)
    574e:	9301      	str	r3, [sp, #4]
    5750:	9300      	str	r3, [sp, #0]
    5752:	4a38      	ldr	r2, [pc, #224]	; (5834 <bt_att_recv+0x154>)
    5754:	4b33      	ldr	r3, [pc, #204]	; (5824 <bt_att_recv+0x144>)
    5756:	4934      	ldr	r1, [pc, #208]	; (5828 <bt_att_recv+0x148>)
    5758:	4837      	ldr	r0, [pc, #220]	; (5838 <bt_att_recv+0x158>)
    575a:	e7ce      	b.n	56fa <bt_att_recv+0x1a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    575c:	3301      	adds	r3, #1
    575e:	2b1b      	cmp	r3, #27
    5760:	d1d9      	bne.n	5716 <bt_att_recv+0x36>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    5762:	4b2e      	ldr	r3, [pc, #184]	; (581c <bt_att_recv+0x13c>)
    5764:	9302      	str	r3, [sp, #8]
    5766:	9001      	str	r0, [sp, #4]
    5768:	9300      	str	r3, [sp, #0]
    576a:	4a32      	ldr	r2, [pc, #200]	; (5834 <bt_att_recv+0x154>)
    576c:	4b2d      	ldr	r3, [pc, #180]	; (5824 <bt_att_recv+0x144>)
    576e:	492e      	ldr	r1, [pc, #184]	; (5828 <bt_att_recv+0x148>)
    5770:	4832      	ldr	r0, [pc, #200]	; (583c <bt_att_recv+0x15c>)
    5772:	f7fb fc0b 	bl	f8c <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    5776:	782d      	ldrb	r5, [r5, #0]
    5778:	4628      	mov	r0, r5
    577a:	f7ff faad 	bl	4cd8 <att_op_get_type>
    577e:	2800      	cmp	r0, #0
    5780:	d0bd      	beq.n	56fe <bt_att_recv+0x1e>
	if (!req) {
    5782:	2d00      	cmp	r5, #0
    5784:	d0bb      	beq.n	56fe <bt_att_recv+0x1e>
    5786:	2306      	movs	r3, #6
    5788:	2200      	movs	r2, #0
    578a:	4629      	mov	r1, r5
    578c:	6820      	ldr	r0, [r4, #0]
}
    578e:	b005      	add	sp, #20
    5790:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5794:	f7ff bf82 	b.w	569c <send_err_rsp.part.11>
		} else if (handler->type == ATT_INDICATION &&
    5798:	2e05      	cmp	r6, #5
    579a:	d118      	bne.n	57ce <bt_att_recv+0xee>
    579c:	f3bf 8f5b 	dmb	ish
    57a0:	f104 0294 	add.w	r2, r4, #148	; 0x94
    57a4:	e852 3f00 	ldrex	r3, [r2]
    57a8:	f043 0002 	orr.w	r0, r3, #2
    57ac:	e842 0c00 	strex	ip, r0, [r2]
    57b0:	f1bc 0f00 	cmp.w	ip, #0
    57b4:	d1f6      	bne.n	57a4 <bt_att_recv+0xc4>
    57b6:	f3bf 8f5b 	dmb	ish
    57ba:	079b      	lsls	r3, r3, #30
    57bc:	d507      	bpl.n	57ce <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected indication");
    57be:	4b17      	ldr	r3, [pc, #92]	; (581c <bt_att_recv+0x13c>)
    57c0:	9301      	str	r3, [sp, #4]
    57c2:	9300      	str	r3, [sp, #0]
    57c4:	4a1b      	ldr	r2, [pc, #108]	; (5834 <bt_att_recv+0x154>)
    57c6:	4b17      	ldr	r3, [pc, #92]	; (5824 <bt_att_recv+0x144>)
    57c8:	4917      	ldr	r1, [pc, #92]	; (5828 <bt_att_recv+0x148>)
    57ca:	481d      	ldr	r0, [pc, #116]	; (5840 <bt_att_recv+0x160>)
    57cc:	e795      	b.n	56fa <bt_att_recv+0x1a>
	if (buf->len < handler->expect_len) {
    57ce:	eb01 030e 	add.w	r3, r1, lr
    57d2:	89ba      	ldrh	r2, [r7, #12]
    57d4:	7859      	ldrb	r1, [r3, #1]
    57d6:	4291      	cmp	r1, r2
    57d8:	d90f      	bls.n	57fa <bt_att_recv+0x11a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    57da:	4b10      	ldr	r3, [pc, #64]	; (581c <bt_att_recv+0x13c>)
    57dc:	9303      	str	r3, [sp, #12]
    57de:	7829      	ldrb	r1, [r5, #0]
    57e0:	9102      	str	r1, [sp, #8]
    57e2:	9201      	str	r2, [sp, #4]
    57e4:	9300      	str	r3, [sp, #0]
    57e6:	4a0e      	ldr	r2, [pc, #56]	; (5820 <bt_att_recv+0x140>)
    57e8:	4b0e      	ldr	r3, [pc, #56]	; (5824 <bt_att_recv+0x144>)
    57ea:	490f      	ldr	r1, [pc, #60]	; (5828 <bt_att_recv+0x148>)
    57ec:	4815      	ldr	r0, [pc, #84]	; (5844 <bt_att_recv+0x164>)
    57ee:	f7fb fbcd 	bl	f8c <printk>
	if (handler->type == ATT_REQUEST && err) {
    57f2:	2e01      	cmp	r6, #1
    57f4:	d183      	bne.n	56fe <bt_att_recv+0x1e>
		err = BT_ATT_ERR_INVALID_PDU;
    57f6:	2304      	movs	r3, #4
    57f8:	e00a      	b.n	5810 <bt_att_recv+0x130>
		err = handler->func(att, buf);
    57fa:	685b      	ldr	r3, [r3, #4]
    57fc:	4639      	mov	r1, r7
    57fe:	4620      	mov	r0, r4
    5800:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    5802:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    5804:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    5806:	f47f af7a 	bne.w	56fe <bt_att_recv+0x1e>
    580a:	2800      	cmp	r0, #0
    580c:	f43f af77 	beq.w	56fe <bt_att_recv+0x1e>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    5810:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    5812:	2900      	cmp	r1, #0
    5814:	f43f af73 	beq.w	56fe <bt_att_recv+0x1e>
    5818:	2200      	movs	r2, #0
    581a:	e7b7      	b.n	578c <bt_att_recv+0xac>
    581c:	000142a9 	.word	0x000142a9
    5820:	00014ff8 	.word	0x00014ff8
    5824:	00015741 	.word	0x00015741
    5828:	00015047 	.word	0x00015047
    582c:	000158f2 	.word	0x000158f2
    5830:	000159d0 	.word	0x000159d0
    5834:	00015040 	.word	0x00015040
    5838:	0001591d 	.word	0x0001591d
    583c:	000159a7 	.word	0x000159a7
    5840:	00015949 	.word	0x00015949
    5844:	00015978 	.word	0x00015978

00005848 <att_read_group_req>:
{
    5848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    584c:	898b      	ldrh	r3, [r1, #12]
    584e:	2b06      	cmp	r3, #6
{
    5850:	b08d      	sub	sp, #52	; 0x34
    5852:	4680      	mov	r8, r0
    5854:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5856:	d001      	beq.n	585c <att_read_group_req+0x14>
    5858:	2b14      	cmp	r3, #20
    585a:	d168      	bne.n	592e <att_read_group_req+0xe6>
	req = (void *)buf->data;
    585c:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    585e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5860:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5864:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5868:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    586a:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    586c:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    586e:	f00c ff2c 	bl	126ca <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5872:	4621      	mov	r1, r4
    5874:	4638      	mov	r0, r7
    5876:	f7ff fc2d 	bl	50d4 <uuid_create>
    587a:	2800      	cmp	r0, #0
    587c:	d059      	beq.n	5932 <att_read_group_req+0xea>
	if (!start || !end) {
    587e:	2d00      	cmp	r5, #0
    5880:	d05a      	beq.n	5938 <att_read_group_req+0xf0>
    5882:	2400      	movs	r4, #0
    5884:	2e00      	cmp	r6, #0
    5886:	d056      	beq.n	5936 <att_read_group_req+0xee>
	if (start > end) {
    5888:	42b5      	cmp	r5, r6
    588a:	d855      	bhi.n	5938 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    588c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5890:	4669      	mov	r1, sp
    5892:	4638      	mov	r0, r7
    5894:	f88d 4000 	strb.w	r4, [sp]
    5898:	f8ad 3002 	strh.w	r3, [sp, #2]
    589c:	f7fc fb2c 	bl	1ef8 <bt_uuid_cmp>
    58a0:	bb38      	cbnz	r0, 58f2 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    58a2:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    58a6:	2214      	movs	r2, #20
    58a8:	2100      	movs	r1, #0
    58aa:	a807      	add	r0, sp, #28
    58ac:	f7fc f9d2 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    58b0:	2201      	movs	r2, #1
    58b2:	2111      	movs	r1, #17
    58b4:	4648      	mov	r0, r9
    58b6:	f7ff fe7d 	bl	55b4 <bt_att_create_pdu>
    58ba:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    58bc:	2800      	cmp	r0, #0
    58be:	d038      	beq.n	5932 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    58c0:	2101      	movs	r1, #1
    58c2:	3008      	adds	r0, #8
	data.uuid = uuid;
    58c4:	9708      	str	r7, [sp, #32]
	data.att = att;
    58c6:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    58ca:	f00c fedf 	bl	1268c <net_buf_simple_add>
	data.rsp->len = 0;
    58ce:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    58d0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    58d2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    58d4:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    58d6:	4a1c      	ldr	r2, [pc, #112]	; (5948 <att_read_group_req+0x100>)
	data.group = NULL;
    58d8:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    58da:	4631      	mov	r1, r6
    58dc:	4628      	mov	r0, r5
    58de:	f000 fe91 	bl	6604 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    58e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    58e4:	781c      	ldrb	r4, [r3, #0]
    58e6:	b9d4      	cbnz	r4, 591e <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    58e8:	9809      	ldr	r0, [sp, #36]	; 0x24
    58ea:	f00c fe9d 	bl	12628 <net_buf_unref>
    58ee:	230a      	movs	r3, #10
    58f0:	e00c      	b.n	590c <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    58f2:	f642 0301 	movw	r3, #10241	; 0x2801
    58f6:	a901      	add	r1, sp, #4
    58f8:	4638      	mov	r0, r7
    58fa:	f88d 4004 	strb.w	r4, [sp, #4]
    58fe:	f8ad 3006 	strh.w	r3, [sp, #6]
    5902:	f7fc faf9 	bl	1ef8 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5906:	2800      	cmp	r0, #0
    5908:	d0cb      	beq.n	58a2 <att_read_group_req+0x5a>
    590a:	2310      	movs	r3, #16
    590c:	462a      	mov	r2, r5
    590e:	2110      	movs	r1, #16
    5910:	4648      	mov	r0, r9
    5912:	f7ff fec3 	bl	569c <send_err_rsp.part.11>
}
    5916:	4620      	mov	r0, r4
    5918:	b00d      	add	sp, #52	; 0x34
    591a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    591e:	4b0b      	ldr	r3, [pc, #44]	; (594c <att_read_group_req+0x104>)
    5920:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5922:	2104      	movs	r1, #4
    5924:	4648      	mov	r0, r9
    5926:	f7ff f85b 	bl	49e0 <bt_l2cap_send_cb>
		return 0;
    592a:	2400      	movs	r4, #0
    592c:	e7f3      	b.n	5916 <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    592e:	2404      	movs	r4, #4
    5930:	e7f1      	b.n	5916 <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    5932:	240e      	movs	r4, #14
    5934:	e7ef      	b.n	5916 <att_read_group_req+0xce>
			*err = 0;
    5936:	4635      	mov	r5, r6
    5938:	2301      	movs	r3, #1
    593a:	462a      	mov	r2, r5
    593c:	2110      	movs	r1, #16
    593e:	4648      	mov	r0, r9
    5940:	f7ff feac 	bl	569c <send_err_rsp.part.11>
    5944:	e7f1      	b.n	592a <att_read_group_req+0xe2>
    5946:	bf00      	nop
    5948:	00004d9d 	.word	0x00004d9d
    594c:	00005171 	.word	0x00005171

00005950 <att_read_mult_req>:
{
    5950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5954:	6804      	ldr	r4, [r0, #0]
{
    5956:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    5958:	2214      	movs	r2, #20
{
    595a:	4606      	mov	r6, r0
    595c:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    595e:	a801      	add	r0, sp, #4
    5960:	2100      	movs	r1, #0
    5962:	f7fc f977 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    5966:	2200      	movs	r2, #0
    5968:	210f      	movs	r1, #15
    596a:	4620      	mov	r0, r4
    596c:	f7ff fe22 	bl	55b4 <bt_att_create_pdu>
    5970:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5972:	b368      	cbz	r0, 59d0 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5974:	f8df 9060 	ldr.w	r9, [pc, #96]	; 59d8 <att_read_mult_req+0x88>
	data.att = att;
    5978:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    597a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    597e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    5982:	89ab      	ldrh	r3, [r5, #12]
    5984:	2b01      	cmp	r3, #1
    5986:	d806      	bhi.n	5996 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5988:	4b12      	ldr	r3, [pc, #72]	; (59d4 <att_read_mult_req+0x84>)
    598a:	9a03      	ldr	r2, [sp, #12]
    598c:	2104      	movs	r1, #4
    598e:	4620      	mov	r0, r4
    5990:	f7ff f826 	bl	49e0 <bt_l2cap_send_cb>
    5994:	e018      	b.n	59c8 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    5996:	4638      	mov	r0, r7
    5998:	f00c fea7 	bl	126ea <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    599c:	ab01      	add	r3, sp, #4
    599e:	464a      	mov	r2, r9
    59a0:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    59a2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    59a4:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    59a8:	f000 fe2c 	bl	6604 <bt_gatt_foreach_attr>
		if (data.err) {
    59ac:	f89d 3014 	ldrb.w	r3, [sp, #20]
    59b0:	2b00      	cmp	r3, #0
    59b2:	d0e6      	beq.n	5982 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    59b4:	9803      	ldr	r0, [sp, #12]
    59b6:	f00c fe37 	bl	12628 <net_buf_unref>
    59ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
    59be:	4632      	mov	r2, r6
    59c0:	210e      	movs	r1, #14
    59c2:	4620      	mov	r0, r4
    59c4:	f7ff fe6a 	bl	569c <send_err_rsp.part.11>
	return 0;
    59c8:	2000      	movs	r0, #0
}
    59ca:	b007      	add	sp, #28
    59cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    59d0:	200e      	movs	r0, #14
    59d2:	e7fa      	b.n	59ca <att_read_mult_req+0x7a>
    59d4:	00005171 	.word	0x00005171
    59d8:	0000553d 	.word	0x0000553d

000059dc <att_read_rsp>:
{
    59dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59e0:	4607      	mov	r7, r0
    59e2:	b086      	sub	sp, #24
    59e4:	460c      	mov	r4, r1
    59e6:	4690      	mov	r8, r2
	if (!handle) {
    59e8:	461d      	mov	r5, r3
    59ea:	b3a3      	cbz	r3, 5a56 <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    59ec:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    59ee:	2214      	movs	r2, #20
    59f0:	2100      	movs	r1, #0
    59f2:	a801      	add	r0, sp, #4
    59f4:	f7fc f92e 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    59f8:	2200      	movs	r2, #0
    59fa:	4641      	mov	r1, r8
    59fc:	4630      	mov	r0, r6
    59fe:	f7ff fdd9 	bl	55b4 <bt_att_create_pdu>
    5a02:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5a04:	b348      	cbz	r0, 5a5a <att_read_rsp+0x7e>
	data.offset = offset;
    5a06:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    5a0a:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5a0e:	2301      	movs	r3, #1
    5a10:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5a14:	4a12      	ldr	r2, [pc, #72]	; (5a60 <att_read_rsp+0x84>)
	data.att = att;
    5a16:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5a18:	ab01      	add	r3, sp, #4
    5a1a:	4629      	mov	r1, r5
    5a1c:	4628      	mov	r0, r5
    5a1e:	f000 fdf1 	bl	6604 <bt_gatt_foreach_attr>
	if (data.err) {
    5a22:	f89d 7014 	ldrb.w	r7, [sp, #20]
    5a26:	b17f      	cbz	r7, 5a48 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    5a28:	9803      	ldr	r0, [sp, #12]
    5a2a:	f00c fdfd 	bl	12628 <net_buf_unref>
	if (!req) {
    5a2e:	b13c      	cbz	r4, 5a40 <att_read_rsp+0x64>
    5a30:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5a34:	462a      	mov	r2, r5
    5a36:	4621      	mov	r1, r4
    5a38:	4630      	mov	r0, r6
    5a3a:	f7ff fe2f 	bl	569c <send_err_rsp.part.11>
		return 0;
    5a3e:	2400      	movs	r4, #0
}
    5a40:	4620      	mov	r0, r4
    5a42:	b006      	add	sp, #24
    5a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5a48:	4b06      	ldr	r3, [pc, #24]	; (5a64 <att_read_rsp+0x88>)
    5a4a:	9a03      	ldr	r2, [sp, #12]
    5a4c:	2104      	movs	r1, #4
    5a4e:	4630      	mov	r0, r6
    5a50:	f7fe ffc6 	bl	49e0 <bt_l2cap_send_cb>
    5a54:	e7f3      	b.n	5a3e <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    5a56:	2401      	movs	r4, #1
    5a58:	e7f2      	b.n	5a40 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    5a5a:	240e      	movs	r4, #14
    5a5c:	e7f0      	b.n	5a40 <att_read_rsp+0x64>
    5a5e:	bf00      	nop
    5a60:	0000553d 	.word	0x0000553d
    5a64:	00005171 	.word	0x00005171

00005a68 <att_read_blob_req>:
{
    5a68:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    5a6a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    5a6c:	8813      	ldrh	r3, [r2, #0]
    5a6e:	8852      	ldrh	r2, [r2, #2]
    5a70:	9200      	str	r2, [sp, #0]
    5a72:	210c      	movs	r1, #12
    5a74:	220d      	movs	r2, #13
    5a76:	f7ff ffb1 	bl	59dc <att_read_rsp>
}
    5a7a:	b003      	add	sp, #12
    5a7c:	f85d fb04 	ldr.w	pc, [sp], #4

00005a80 <att_read_req>:
{
    5a80:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    5a82:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    5a84:	2200      	movs	r2, #0
    5a86:	881b      	ldrh	r3, [r3, #0]
    5a88:	9200      	str	r2, [sp, #0]
    5a8a:	210a      	movs	r1, #10
    5a8c:	220b      	movs	r2, #11
    5a8e:	f7ff ffa5 	bl	59dc <att_read_rsp>
}
    5a92:	b003      	add	sp, #12
    5a94:	f85d fb04 	ldr.w	pc, [sp], #4

00005a98 <att_read_type_req>:
{
    5a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5a9c:	898b      	ldrh	r3, [r1, #12]
    5a9e:	2b06      	cmp	r3, #6
{
    5aa0:	b08d      	sub	sp, #52	; 0x34
    5aa2:	4607      	mov	r7, r0
    5aa4:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5aa6:	d001      	beq.n	5aac <att_read_type_req+0x14>
    5aa8:	2b14      	cmp	r3, #20
    5aaa:	d152      	bne.n	5b52 <att_read_type_req+0xba>
	req = (void *)buf->data;
    5aac:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    5aae:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5ab0:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5ab4:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5ab8:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5aba:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    5abc:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    5ac0:	f00c fe03 	bl	126ca <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5ac4:	4631      	mov	r1, r6
    5ac6:	4640      	mov	r0, r8
    5ac8:	f7ff fb04 	bl	50d4 <uuid_create>
    5acc:	b198      	cbz	r0, 5af6 <att_read_type_req+0x5e>
	if (!start || !end) {
    5ace:	2d00      	cmp	r5, #0
    5ad0:	d042      	beq.n	5b58 <att_read_type_req+0xc0>
    5ad2:	2c00      	cmp	r4, #0
    5ad4:	d03f      	beq.n	5b56 <att_read_type_req+0xbe>
	if (start > end) {
    5ad6:	42a5      	cmp	r5, r4
    5ad8:	d83e      	bhi.n	5b58 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    5ada:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    5adc:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    5ade:	2100      	movs	r1, #0
    5ae0:	eb0d 0002 	add.w	r0, sp, r2
    5ae4:	f7fc f8b6 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    5ae8:	2201      	movs	r2, #1
    5aea:	2109      	movs	r1, #9
    5aec:	4630      	mov	r0, r6
    5aee:	f7ff fd61 	bl	55b4 <bt_att_create_pdu>
    5af2:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    5af4:	b908      	cbnz	r0, 5afa <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    5af6:	240e      	movs	r4, #14
    5af8:	e027      	b.n	5b4a <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5afa:	2101      	movs	r1, #1
    5afc:	3008      	adds	r0, #8
	data.att = att;
    5afe:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    5b00:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5b04:	f00c fdc2 	bl	1268c <net_buf_simple_add>
	data.rsp->len = 0;
    5b08:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5b0a:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5b0c:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5b0e:	4621      	mov	r1, r4
	data.rsp->len = 0;
    5b10:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5b12:	4a14      	ldr	r2, [pc, #80]	; (5b64 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5b14:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5b18:	4628      	mov	r0, r5
    5b1a:	ab06      	add	r3, sp, #24
    5b1c:	f000 fd72 	bl	6604 <bt_gatt_foreach_attr>
	if (data.err) {
    5b20:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    5b24:	b15c      	cbz	r4, 5b3e <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    5b26:	9808      	ldr	r0, [sp, #32]
    5b28:	f00c fd7e 	bl	12628 <net_buf_unref>
    5b2c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    5b30:	462a      	mov	r2, r5
    5b32:	2108      	movs	r1, #8
    5b34:	4630      	mov	r0, r6
    5b36:	f7ff fdb1 	bl	569c <send_err_rsp.part.11>
		return 0;
    5b3a:	2400      	movs	r4, #0
    5b3c:	e005      	b.n	5b4a <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5b3e:	4b0a      	ldr	r3, [pc, #40]	; (5b68 <att_read_type_req+0xd0>)
    5b40:	9a08      	ldr	r2, [sp, #32]
    5b42:	2104      	movs	r1, #4
    5b44:	4630      	mov	r0, r6
    5b46:	f7fe ff4b 	bl	49e0 <bt_l2cap_send_cb>
}
    5b4a:	4620      	mov	r0, r4
    5b4c:	b00d      	add	sp, #52	; 0x34
    5b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    5b52:	2404      	movs	r4, #4
    5b54:	e7f9      	b.n	5b4a <att_read_type_req+0xb2>
			*err = 0;
    5b56:	4625      	mov	r5, r4
    5b58:	2301      	movs	r3, #1
    5b5a:	462a      	mov	r2, r5
    5b5c:	2108      	movs	r1, #8
    5b5e:	4648      	mov	r0, r9
    5b60:	e7e9      	b.n	5b36 <att_read_type_req+0x9e>
    5b62:	bf00      	nop
    5b64:	00005019 	.word	0x00005019
    5b68:	00005171 	.word	0x00005171

00005b6c <att_find_type_req>:
{
    5b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5b70:	f8d0 9000 	ldr.w	r9, [r0]
{
    5b74:	4680      	mov	r8, r0
	req = (void *)buf->data;
    5b76:	4608      	mov	r0, r1
{
    5b78:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    5b7a:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    5b7e:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    5b80:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    5b82:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5b84:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    5b86:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    5b88:	f00c fd9f 	bl	126ca <net_buf_simple_pull>
    5b8c:	4682      	mov	sl, r0
	if (!start || !end) {
    5b8e:	2d00      	cmp	r5, #0
    5b90:	d057      	beq.n	5c42 <att_find_type_req+0xd6>
    5b92:	2400      	movs	r4, #0
    5b94:	2f00      	cmp	r7, #0
    5b96:	d053      	beq.n	5c40 <att_find_type_req+0xd4>
	if (start > end) {
    5b98:	42bd      	cmp	r5, r7
    5b9a:	d852      	bhi.n	5c42 <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    5b9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5ba0:	a902      	add	r1, sp, #8
    5ba2:	a801      	add	r0, sp, #4
    5ba4:	f8ad 6006 	strh.w	r6, [sp, #6]
    5ba8:	f88d 4004 	strb.w	r4, [sp, #4]
    5bac:	f88d 4008 	strb.w	r4, [sp, #8]
    5bb0:	f8ad 300a 	strh.w	r3, [sp, #10]
    5bb4:	f7fc f9a0 	bl	1ef8 <bt_uuid_cmp>
    5bb8:	4606      	mov	r6, r0
    5bba:	b148      	cbz	r0, 5bd0 <att_find_type_req+0x64>
    5bbc:	230a      	movs	r3, #10
    5bbe:	462a      	mov	r2, r5
    5bc0:	2106      	movs	r1, #6
    5bc2:	4648      	mov	r0, r9
    5bc4:	f7ff fd6a 	bl	569c <send_err_rsp.part.11>
}
    5bc8:	4620      	mov	r0, r4
    5bca:	b009      	add	sp, #36	; 0x24
    5bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    5bd0:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    5bd4:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    5bd8:	2214      	movs	r2, #20
    5bda:	4631      	mov	r1, r6
    5bdc:	a803      	add	r0, sp, #12
    5bde:	f7fc f839 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    5be2:	4632      	mov	r2, r6
    5be4:	2107      	movs	r1, #7
    5be6:	4648      	mov	r0, r9
    5be8:	f7ff fce4 	bl	55b4 <bt_att_create_pdu>
    5bec:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    5bee:	b328      	cbz	r0, 5c3c <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5bf0:	230a      	movs	r3, #10
    5bf2:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5bf6:	4a14      	ldr	r2, [pc, #80]	; (5c48 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    5bf8:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5bfc:	ab03      	add	r3, sp, #12
    5bfe:	4639      	mov	r1, r7
    5c00:	4628      	mov	r0, r5
	data.att = att;
    5c02:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    5c06:	9605      	str	r6, [sp, #20]
	data.value = value;
    5c08:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5c0c:	f000 fcfa 	bl	6604 <bt_gatt_foreach_attr>
	if (data.err) {
    5c10:	f89d 401d 	ldrb.w	r4, [sp, #29]
    5c14:	b15c      	cbz	r4, 5c2e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    5c16:	9804      	ldr	r0, [sp, #16]
    5c18:	f00c fd06 	bl	12628 <net_buf_unref>
    5c1c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    5c20:	462a      	mov	r2, r5
    5c22:	2106      	movs	r1, #6
    5c24:	4648      	mov	r0, r9
    5c26:	f7ff fd39 	bl	569c <send_err_rsp.part.11>
		return 0;
    5c2a:	2400      	movs	r4, #0
    5c2c:	e7cc      	b.n	5bc8 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5c2e:	4b07      	ldr	r3, [pc, #28]	; (5c4c <att_find_type_req+0xe0>)
    5c30:	9a04      	ldr	r2, [sp, #16]
    5c32:	2104      	movs	r1, #4
    5c34:	4648      	mov	r0, r9
    5c36:	f7fe fed3 	bl	49e0 <bt_l2cap_send_cb>
    5c3a:	e7c5      	b.n	5bc8 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    5c3c:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    5c3e:	e7c3      	b.n	5bc8 <att_find_type_req+0x5c>
			*err = 0;
    5c40:	463d      	mov	r5, r7
    5c42:	2301      	movs	r3, #1
    5c44:	e7ec      	b.n	5c20 <att_find_type_req+0xb4>
    5c46:	bf00      	nop
    5c48:	00004f05 	.word	0x00004f05
    5c4c:	00005171 	.word	0x00005171

00005c50 <att_find_info_req>:
{
    5c50:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    5c52:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    5c54:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5c56:	881d      	ldrh	r5, [r3, #0]
{
    5c58:	b085      	sub	sp, #20
    5c5a:	4607      	mov	r7, r0
	if (!start || !end) {
    5c5c:	b375      	cbz	r5, 5cbc <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    5c5e:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    5c60:	b35c      	cbz	r4, 5cba <att_find_info_req+0x6a>
	if (start > end) {
    5c62:	42a5      	cmp	r5, r4
    5c64:	d82a      	bhi.n	5cbc <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    5c66:	2210      	movs	r2, #16
    5c68:	2100      	movs	r1, #0
    5c6a:	4668      	mov	r0, sp
    5c6c:	f7fb fff2 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    5c70:	2200      	movs	r2, #0
    5c72:	2105      	movs	r1, #5
    5c74:	4630      	mov	r0, r6
    5c76:	f7ff fc9d 	bl	55b4 <bt_att_create_pdu>
    5c7a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    5c7c:	b910      	cbnz	r0, 5c84 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    5c7e:	200e      	movs	r0, #14
}
    5c80:	b005      	add	sp, #20
    5c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5c84:	4621      	mov	r1, r4
    5c86:	466b      	mov	r3, sp
    5c88:	4a0d      	ldr	r2, [pc, #52]	; (5cc0 <att_find_info_req+0x70>)
	data.att = att;
    5c8a:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5c8c:	4628      	mov	r0, r5
    5c8e:	f000 fcb9 	bl	6604 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    5c92:	9c02      	ldr	r4, [sp, #8]
    5c94:	b94c      	cbnz	r4, 5caa <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    5c96:	9801      	ldr	r0, [sp, #4]
    5c98:	f00c fcc6 	bl	12628 <net_buf_unref>
    5c9c:	230a      	movs	r3, #10
    5c9e:	462a      	mov	r2, r5
    5ca0:	2104      	movs	r1, #4
    5ca2:	4630      	mov	r0, r6
    5ca4:	f7ff fcfa 	bl	569c <send_err_rsp.part.11>
    5ca8:	e005      	b.n	5cb6 <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5caa:	4b06      	ldr	r3, [pc, #24]	; (5cc4 <att_find_info_req+0x74>)
    5cac:	9a01      	ldr	r2, [sp, #4]
    5cae:	2104      	movs	r1, #4
    5cb0:	4630      	mov	r0, r6
    5cb2:	f7fe fe95 	bl	49e0 <bt_l2cap_send_cb>
		return 0;
    5cb6:	2000      	movs	r0, #0
    5cb8:	e7e2      	b.n	5c80 <att_find_info_req+0x30>
			*err = 0;
    5cba:	4625      	mov	r5, r4
    5cbc:	2301      	movs	r3, #1
    5cbe:	e7ee      	b.n	5c9e <att_find_info_req+0x4e>
    5cc0:	00004e6b 	.word	0x00004e6b
    5cc4:	00005171 	.word	0x00005171

00005cc8 <att_write_rsp.part.12.constprop.17>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    5cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ccc:	b086      	sub	sp, #24
    5cce:	4690      	mov	r8, r2
    5cd0:	4605      	mov	r5, r0
    5cd2:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    5cd4:	2218      	movs	r2, #24
    5cd6:	2100      	movs	r1, #0
    5cd8:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    5cda:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    5cdc:	f7fb ffba 	bl	1c54 <memset>
	if (rsp) {
    5ce0:	f1b8 0f00 	cmp.w	r8, #0
    5ce4:	d11f      	bne.n	5d26 <att_write_rsp.part.12.constprop.17+0x5e>
	data.offset = offset;
    5ce6:	2300      	movs	r3, #0
    5ce8:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    5cec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5cee:	9303      	str	r3, [sp, #12]
	data.len = len;
    5cf0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    5cf4:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5cf8:	2301      	movs	r3, #1
    5cfa:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5cfe:	4a1b      	ldr	r2, [pc, #108]	; (5d6c <att_write_rsp.part.12.constprop.17+0xa4>)
	data.conn = conn;
    5d00:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5d02:	466b      	mov	r3, sp
    5d04:	4639      	mov	r1, r7
    5d06:	4638      	mov	r0, r7
	data.op = op;
    5d08:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5d0c:	f000 fc7a 	bl	6604 <bt_gatt_foreach_attr>
	if (data.err) {
    5d10:	f89d 4014 	ldrb.w	r4, [sp, #20]
    5d14:	b98c      	cbnz	r4, 5d3a <att_write_rsp.part.12.constprop.17+0x72>
	if (data.buf) {
    5d16:	9a01      	ldr	r2, [sp, #4]
    5d18:	b1b2      	cbz	r2, 5d48 <att_write_rsp.part.12.constprop.17+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    5d1a:	4b15      	ldr	r3, [pc, #84]	; (5d70 <att_write_rsp.part.12.constprop.17+0xa8>)
    5d1c:	2104      	movs	r1, #4
    5d1e:	4628      	mov	r0, r5
    5d20:	f7fe fe5e 	bl	49e0 <bt_l2cap_send_cb>
    5d24:	e011      	b.n	5d4a <att_write_rsp.part.12.constprop.17+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    5d26:	2200      	movs	r2, #0
    5d28:	4641      	mov	r1, r8
    5d2a:	4628      	mov	r0, r5
    5d2c:	f7ff fc42 	bl	55b4 <bt_att_create_pdu>
    5d30:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    5d32:	2800      	cmp	r0, #0
    5d34:	d1d7      	bne.n	5ce6 <att_write_rsp.part.12.constprop.17+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    5d36:	240e      	movs	r4, #14
    5d38:	e007      	b.n	5d4a <att_write_rsp.part.12.constprop.17+0x82>
		if (rsp) {
    5d3a:	f1b8 0f00 	cmp.w	r8, #0
    5d3e:	d00f      	beq.n	5d60 <att_write_rsp.part.12.constprop.17+0x98>
			net_buf_unref(data.buf);
    5d40:	9801      	ldr	r0, [sp, #4]
    5d42:	f00c fc71 	bl	12628 <net_buf_unref>
	if (!req) {
    5d46:	b926      	cbnz	r6, 5d52 <att_write_rsp.part.12.constprop.17+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    5d48:	2400      	movs	r4, #0
}
    5d4a:	4620      	mov	r0, r4
    5d4c:	b006      	add	sp, #24
    5d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d52:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5d56:	463a      	mov	r2, r7
    5d58:	4631      	mov	r1, r6
    5d5a:	4628      	mov	r0, r5
    5d5c:	f7ff fc9e 	bl	569c <send_err_rsp.part.11>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    5d60:	2e18      	cmp	r6, #24
    5d62:	d1f1      	bne.n	5d48 <att_write_rsp.part.12.constprop.17+0x80>
    5d64:	f89d 4014 	ldrb.w	r4, [sp, #20]
    5d68:	e7ef      	b.n	5d4a <att_write_rsp.part.12.constprop.17+0x82>
    5d6a:	bf00      	nop
    5d6c:	0000524d 	.word	0x0000524d
    5d70:	00005171 	.word	0x00005171

00005d74 <att_signed_write_cmd>:
{
    5d74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    5d78:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    5d7a:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    5d7c:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    5d80:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    5d82:	4620      	mov	r0, r4
    5d84:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    5d86:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    5d8a:	f00c fc96 	bl	126ba <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    5d8e:	4629      	mov	r1, r5
    5d90:	4630      	mov	r0, r6
    5d92:	f000 fd76 	bl	6882 <bt_smp_sign_verify>
	if (err) {
    5d96:	4607      	mov	r7, r0
    5d98:	b160      	cbz	r0, 5db4 <att_signed_write_cmd+0x40>
		BT_ERR("Error verifying data");
    5d9a:	4b13      	ldr	r3, [pc, #76]	; (5de8 <att_signed_write_cmd+0x74>)
    5d9c:	9301      	str	r3, [sp, #4]
    5d9e:	9300      	str	r3, [sp, #0]
    5da0:	4a12      	ldr	r2, [pc, #72]	; (5dec <att_signed_write_cmd+0x78>)
    5da2:	4b13      	ldr	r3, [pc, #76]	; (5df0 <att_signed_write_cmd+0x7c>)
    5da4:	4913      	ldr	r1, [pc, #76]	; (5df4 <att_signed_write_cmd+0x80>)
    5da6:	4814      	ldr	r0, [pc, #80]	; (5df8 <att_signed_write_cmd+0x84>)
    5da8:	f7fb f8f0 	bl	f8c <printk>
    5dac:	2000      	movs	r0, #0
}
    5dae:	b002      	add	sp, #8
    5db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    5db4:	2101      	movs	r1, #1
    5db6:	4620      	mov	r0, r4
    5db8:	f00c fc87 	bl	126ca <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    5dbc:	2102      	movs	r1, #2
    5dbe:	4620      	mov	r0, r4
    5dc0:	f00c fc83 	bl	126ca <net_buf_simple_pull>
	if (!handle) {
    5dc4:	f1b8 0f00 	cmp.w	r8, #0
    5dc8:	d00c      	beq.n	5de4 <att_signed_write_cmd+0x70>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    5dca:	7b2b      	ldrb	r3, [r5, #12]
    5dcc:	3b0c      	subs	r3, #12
    5dce:	b2db      	uxtb	r3, r3
    5dd0:	9301      	str	r3, [sp, #4]
    5dd2:	68ab      	ldr	r3, [r5, #8]
    5dd4:	9300      	str	r3, [sp, #0]
    5dd6:	463a      	mov	r2, r7
    5dd8:	4643      	mov	r3, r8
    5dda:	4639      	mov	r1, r7
    5ddc:	4630      	mov	r0, r6
    5dde:	f7ff ff73 	bl	5cc8 <att_write_rsp.part.12.constprop.17>
    5de2:	e7e4      	b.n	5dae <att_signed_write_cmd+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
    5de4:	2001      	movs	r0, #1
    5de6:	e7e2      	b.n	5dae <att_signed_write_cmd+0x3a>
    5de8:	000142a9 	.word	0x000142a9
    5dec:	00014ff8 	.word	0x00014ff8
    5df0:	0001572c 	.word	0x0001572c
    5df4:	00015047 	.word	0x00015047
    5df8:	00015847 	.word	0x00015847

00005dfc <att_write_cmd>:
{
    5dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5dfe:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    5e00:	f101 0008 	add.w	r0, r1, #8
{
    5e04:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    5e06:	f00c fc70 	bl	126ea <net_buf_simple_pull_le16>
	if (!handle) {
    5e0a:	4603      	mov	r3, r0
    5e0c:	b150      	cbz	r0, 5e24 <att_write_cmd+0x28>
    5e0e:	7b22      	ldrb	r2, [r4, #12]
    5e10:	9201      	str	r2, [sp, #4]
    5e12:	68a2      	ldr	r2, [r4, #8]
    5e14:	9200      	str	r2, [sp, #0]
    5e16:	2200      	movs	r2, #0
    5e18:	4611      	mov	r1, r2
    5e1a:	4628      	mov	r0, r5
    5e1c:	f7ff ff54 	bl	5cc8 <att_write_rsp.part.12.constprop.17>
}
    5e20:	b003      	add	sp, #12
    5e22:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    5e24:	2001      	movs	r0, #1
    5e26:	e7fb      	b.n	5e20 <att_write_cmd+0x24>

00005e28 <att_write_req>:
{
    5e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5e2a:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    5e2c:	f101 0008 	add.w	r0, r1, #8
{
    5e30:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    5e32:	f00c fc5a 	bl	126ea <net_buf_simple_pull_le16>
	if (!handle) {
    5e36:	4603      	mov	r3, r0
    5e38:	b150      	cbz	r0, 5e50 <att_write_req+0x28>
    5e3a:	7b22      	ldrb	r2, [r4, #12]
    5e3c:	9201      	str	r2, [sp, #4]
    5e3e:	68a2      	ldr	r2, [r4, #8]
    5e40:	9200      	str	r2, [sp, #0]
    5e42:	2112      	movs	r1, #18
    5e44:	2213      	movs	r2, #19
    5e46:	4628      	mov	r0, r5
    5e48:	f7ff ff3e 	bl	5cc8 <att_write_rsp.part.12.constprop.17>
}
    5e4c:	b003      	add	sp, #12
    5e4e:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    5e50:	2001      	movs	r0, #1
    5e52:	e7fb      	b.n	5e4c <att_write_req+0x24>

00005e54 <bt_att_init>:

void bt_att_init(void)
{
    5e54:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    5e56:	4803      	ldr	r0, [pc, #12]	; (5e64 <bt_att_init+0x10>)
    5e58:	f7fe fd04 	bl	4864 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    5e5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    5e60:	f000 bbba 	b.w	65d8 <bt_gatt_init>
    5e64:	20003bb8 	.word	0x20003bb8

00005e68 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    5e68:	b510      	push	{r4, lr}
    5e6a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    5e6c:	b1d8      	cbz	r0, 5ea6 <bt_att_req_send+0x3e>
    5e6e:	b1d1      	cbz	r1, 5ea6 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    5e70:	f7ff f9ac 	bl	51cc <att_chan_get>
	if (!att) {
    5e74:	4603      	mov	r3, r0
    5e76:	b1c8      	cbz	r0, 5eac <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    5e78:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    5e7c:	b172      	cbz	r2, 5e9c <bt_att_req_send+0x34>
	parent->next = child;
    5e7e:	2000      	movs	r0, #0
    5e80:	6020      	str	r0, [r4, #0]
    5e82:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    5e86:	b92a      	cbnz	r2, 5e94 <bt_att_req_send+0x2c>
	list->tail = node;
    5e88:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    5e8c:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    5e90:	4610      	mov	r0, r2
    5e92:	bd10      	pop	{r4, pc}
	parent->next = child;
    5e94:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5e96:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    5e9a:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    5e9c:	4621      	mov	r1, r4
}
    5e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    5ea2:	f7ff b9ff 	b.w	52a4 <att_send_req>
		return -EINVAL;
    5ea6:	f06f 0015 	mvn.w	r0, #21
    5eaa:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    5eac:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    5eb0:	bd10      	pop	{r4, pc}

00005eb2 <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    5eb2:	4770      	bx	lr

00005eb4 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    5eb4:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    5eb6:	2000      	movs	r0, #0
    5eb8:	4770      	bx	lr

00005eba <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    5eba:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    5ebc:	2300      	movs	r3, #0
    5ebe:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    5ec0:	461a      	mov	r2, r3
    5ec2:	42aa      	cmp	r2, r5
    5ec4:	d107      	bne.n	5ed6 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    5ec6:	890a      	ldrh	r2, [r1, #8]
    5ec8:	429a      	cmp	r2, r3
    5eca:	d00d      	beq.n	5ee8 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    5ecc:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    5ece:	68ca      	ldr	r2, [r1, #12]
	}
}
    5ed0:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    5ed2:	4619      	mov	r1, r3
    5ed4:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    5ed6:	680c      	ldr	r4, [r1, #0]
    5ed8:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    5edc:	3201      	adds	r2, #1
    5ede:	8924      	ldrh	r4, [r4, #8]
    5ee0:	42a3      	cmp	r3, r4
    5ee2:	bf38      	it	cc
    5ee4:	4623      	movcc	r3, r4
    5ee6:	e7ec      	b.n	5ec2 <gatt_ccc_changed+0x8>
}
    5ee8:	bc30      	pop	{r4, r5}
    5eea:	4770      	bx	lr

00005eec <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    5eec:	b410      	push	{r4}
    5eee:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    5ef0:	699c      	ldr	r4, [r3, #24]
    5ef2:	460a      	mov	r2, r1
    5ef4:	6959      	ldr	r1, [r3, #20]
    5ef6:	4623      	mov	r3, r4
}
    5ef8:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    5efa:	4718      	bx	r3

00005efc <gatt_register>:
{
    5efc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    5efe:	4a1e      	ldr	r2, [pc, #120]	; (5f78 <gatt_register+0x7c>)
    5f00:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    5f02:	e890 0022 	ldmia.w	r0, {r1, r5}
	if (sys_slist_is_empty(&db)) {
    5f06:	b14b      	cbz	r3, 5f1c <gatt_register+0x20>
    5f08:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    5f0a:	2b00      	cmp	r3, #0
    5f0c:	d032      	beq.n	5f74 <gatt_register+0x78>
	handle = last->attrs[last->attr_count - 1].handle;
    5f0e:	e913 0018 	ldmdb	r3, {r3, r4}
    5f12:	2614      	movs	r6, #20
    5f14:	fb06 3304 	mla	r3, r6, r4, r3
    5f18:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    5f1c:	b2ad      	uxth	r5, r5
    5f1e:	2414      	movs	r4, #20
    5f20:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    5f24:	b109      	cbz	r1, 5f2a <gatt_register+0x2e>
    5f26:	42a9      	cmp	r1, r5
    5f28:	d108      	bne.n	5f3c <gatt_register+0x40>
	parent->next = child;
    5f2a:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    5f2c:	f100 0108 	add.w	r1, r0, #8
    5f30:	6083      	str	r3, [r0, #8]
    5f32:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    5f34:	b9d0      	cbnz	r0, 5f6c <gatt_register+0x70>
	list->tail = node;
    5f36:	6051      	str	r1, [r2, #4]
	list->head = node;
    5f38:	6011      	str	r1, [r2, #0]
    5f3a:	e015      	b.n	5f68 <gatt_register+0x6c>
		if (!attrs->handle) {
    5f3c:	8a0c      	ldrh	r4, [r1, #16]
    5f3e:	b92c      	cbnz	r4, 5f4c <gatt_register+0x50>
			attrs->handle = ++handle;
    5f40:	3301      	adds	r3, #1
    5f42:	b29c      	uxth	r4, r3
    5f44:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    5f46:	3114      	adds	r1, #20
    5f48:	4623      	mov	r3, r4
    5f4a:	e7eb      	b.n	5f24 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    5f4c:	42a3      	cmp	r3, r4
    5f4e:	d3fa      	bcc.n	5f46 <gatt_register+0x4a>
			BT_ERR("Unable to register handle 0x%04x",
    5f50:	4b0a      	ldr	r3, [pc, #40]	; (5f7c <gatt_register+0x80>)
    5f52:	9302      	str	r3, [sp, #8]
    5f54:	e88d 0018 	stmia.w	sp, {r3, r4}
    5f58:	4a09      	ldr	r2, [pc, #36]	; (5f80 <gatt_register+0x84>)
    5f5a:	4b0a      	ldr	r3, [pc, #40]	; (5f84 <gatt_register+0x88>)
    5f5c:	490a      	ldr	r1, [pc, #40]	; (5f88 <gatt_register+0x8c>)
    5f5e:	480b      	ldr	r0, [pc, #44]	; (5f8c <gatt_register+0x90>)
    5f60:	f7fb f814 	bl	f8c <printk>
			return -EINVAL;
    5f64:	f06f 0015 	mvn.w	r0, #21
}
    5f68:	b004      	add	sp, #16
    5f6a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    5f6c:	6001      	str	r1, [r0, #0]
	list->tail = node;
    5f6e:	6051      	str	r1, [r2, #4]
	return 0;
    5f70:	4618      	mov	r0, r3
    5f72:	e7f9      	b.n	5f68 <gatt_register+0x6c>
	handle = last->attrs[last->attr_count - 1].handle;
    5f74:	681b      	ldr	r3, [r3, #0]
    5f76:	deff      	udf	#255	; 0xff
    5f78:	20000584 	.word	0x20000584
    5f7c:	000142a9 	.word	0x000142a9
    5f80:	00014ff8 	.word	0x00014ff8
    5f84:	00015aa8 	.word	0x00015aa8
    5f88:	00015047 	.word	0x00015047
    5f8c:	00015c02 	.word	0x00015c02

00005f90 <gatt_notify>:
{
    5f90:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    5f94:	468a      	mov	sl, r1
    5f96:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    5f98:	211b      	movs	r1, #27
    5f9a:	1c9a      	adds	r2, r3, #2
{
    5f9c:	4680      	mov	r8, r0
    5f9e:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    5fa0:	f7ff fb08 	bl	55b4 <bt_att_create_pdu>
	if (!buf) {
    5fa4:	4604      	mov	r4, r0
    5fa6:	b968      	cbnz	r0, 5fc4 <gatt_notify+0x34>
		BT_WARN("No buffer available to send notification");
    5fa8:	4b13      	ldr	r3, [pc, #76]	; (5ff8 <gatt_notify+0x68>)
    5faa:	9301      	str	r3, [sp, #4]
    5fac:	9300      	str	r3, [sp, #0]
    5fae:	4a13      	ldr	r2, [pc, #76]	; (5ffc <gatt_notify+0x6c>)
    5fb0:	4b13      	ldr	r3, [pc, #76]	; (6000 <gatt_notify+0x70>)
    5fb2:	4914      	ldr	r1, [pc, #80]	; (6004 <gatt_notify+0x74>)
    5fb4:	4814      	ldr	r0, [pc, #80]	; (6008 <gatt_notify+0x78>)
    5fb6:	f7fa ffe9 	bl	f8c <printk>
    5fba:	f06f 000b 	mvn.w	r0, #11
}
    5fbe:	b002      	add	sp, #8
    5fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    5fc4:	f100 0708 	add.w	r7, r0, #8
    5fc8:	2102      	movs	r1, #2
    5fca:	4638      	mov	r0, r7
    5fcc:	f00c fb5e 	bl	1268c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    5fd0:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    5fd2:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    5fd4:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    5fd8:	4638      	mov	r0, r7
    5fda:	f00c fb57 	bl	1268c <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    5fde:	4632      	mov	r2, r6
    5fe0:	4649      	mov	r1, r9
    5fe2:	4628      	mov	r0, r5
    5fe4:	f7fb fe0a 	bl	1bfc <memcpy>
    5fe8:	4640      	mov	r0, r8
    5fea:	2300      	movs	r3, #0
    5fec:	4622      	mov	r2, r4
    5fee:	2104      	movs	r1, #4
    5ff0:	f7fe fcf6 	bl	49e0 <bt_l2cap_send_cb>
	return 0;
    5ff4:	2000      	movs	r0, #0
    5ff6:	e7e2      	b.n	5fbe <gatt_notify+0x2e>
    5ff8:	000142a9 	.word	0x000142a9
    5ffc:	00015040 	.word	0x00015040
    6000:	00015ae4 	.word	0x00015ae4
    6004:	00015047 	.word	0x00015047
    6008:	00015bc9 	.word	0x00015bc9

0000600c <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    600c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;
	u16_t value_handle = params->attr->handle;
    6010:	694b      	ldr	r3, [r1, #20]
{
    6012:	b087      	sub	sp, #28
    6014:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    6016:	8a1d      	ldrh	r5, [r3, #16]

	/* Check if attribute is a characteristic then adjust the handle */
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6018:	6818      	ldr	r0, [r3, #0]
    601a:	2300      	movs	r3, #0
{
    601c:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    601e:	f88d 3014 	strb.w	r3, [sp, #20]
    6022:	a905      	add	r1, sp, #20
    6024:	f642 0303 	movw	r3, #10243	; 0x2803
    6028:	f8ad 3016 	strh.w	r3, [sp, #22]
    602c:	f7fb ff64 	bl	1ef8 <bt_uuid_cmp>
    6030:	b930      	cbnz	r0, 6040 <gatt_indicate+0x34>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    6032:	6963      	ldr	r3, [r4, #20]

		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    6034:	68db      	ldr	r3, [r3, #12]
    6036:	791b      	ldrb	r3, [r3, #4]
    6038:	069b      	lsls	r3, r3, #26
    603a:	d544      	bpl.n	60c6 <gatt_indicate+0xba>
			return -EINVAL;
		}

		value_handle += 1;
    603c:	3501      	adds	r5, #1
    603e:	b2ad      	uxth	r5, r5
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    6040:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    6042:	211d      	movs	r1, #29
    6044:	3202      	adds	r2, #2
    6046:	4648      	mov	r0, r9
    6048:	f7ff fab4 	bl	55b4 <bt_att_create_pdu>
	if (!buf) {
    604c:	4606      	mov	r6, r0
    604e:	b970      	cbnz	r0, 606e <gatt_indicate+0x62>
		BT_WARN("No buffer available to send indication");
    6050:	4b1e      	ldr	r3, [pc, #120]	; (60cc <gatt_indicate+0xc0>)
    6052:	9301      	str	r3, [sp, #4]
    6054:	9300      	str	r3, [sp, #0]
    6056:	4a1e      	ldr	r2, [pc, #120]	; (60d0 <gatt_indicate+0xc4>)
    6058:	4b1e      	ldr	r3, [pc, #120]	; (60d4 <gatt_indicate+0xc8>)
    605a:	491f      	ldr	r1, [pc, #124]	; (60d8 <gatt_indicate+0xcc>)
    605c:	481f      	ldr	r0, [pc, #124]	; (60dc <gatt_indicate+0xd0>)
    605e:	f7fa ff95 	bl	f8c <printk>
		return -ENOMEM;
    6062:	f06f 040b 	mvn.w	r4, #11

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    6066:	4620      	mov	r0, r4
    6068:	b007      	add	sp, #28
    606a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    606e:	f100 0708 	add.w	r7, r0, #8
    6072:	2102      	movs	r1, #2
    6074:	4638      	mov	r0, r7
    6076:	f00c fb09 	bl	1268c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    607a:	4680      	mov	r8, r0
	net_buf_add(buf, params->len);
    607c:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    607e:	f828 5b02 	strh.w	r5, [r8], #2
	net_buf_add(buf, params->len);
    6082:	4638      	mov	r0, r7
    6084:	f00c fb02 	bl	1268c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    6088:	8c22      	ldrh	r2, [r4, #32]
    608a:	69e1      	ldr	r1, [r4, #28]
    608c:	4640      	mov	r0, r8
    608e:	f7fb fdb5 	bl	1bfc <memcpy>
		req->func = func;
    6092:	4b13      	ldr	r3, [pc, #76]	; (60e0 <gatt_indicate+0xd4>)
    6094:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    6096:	2300      	movs	r3, #0
		req->buf = buf;
    6098:	6126      	str	r6, [r4, #16]
		req->destroy = destroy;
    609a:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    609c:	4621      	mov	r1, r4
    609e:	4648      	mov	r0, r9
    60a0:	f7ff fee2 	bl	5e68 <bt_att_req_send>
	if (err) {
    60a4:	4604      	mov	r4, r0
    60a6:	2800      	cmp	r0, #0
    60a8:	d0dd      	beq.n	6066 <gatt_indicate+0x5a>
		BT_ERR("Error sending ATT PDU: %d", err);
    60aa:	4b08      	ldr	r3, [pc, #32]	; (60cc <gatt_indicate+0xc0>)
    60ac:	9302      	str	r3, [sp, #8]
    60ae:	e88d 0018 	stmia.w	sp, {r3, r4}
    60b2:	4a0c      	ldr	r2, [pc, #48]	; (60e4 <gatt_indicate+0xd8>)
    60b4:	4b0c      	ldr	r3, [pc, #48]	; (60e8 <gatt_indicate+0xdc>)
    60b6:	4908      	ldr	r1, [pc, #32]	; (60d8 <gatt_indicate+0xcc>)
    60b8:	480c      	ldr	r0, [pc, #48]	; (60ec <gatt_indicate+0xe0>)
    60ba:	f7fa ff67 	bl	f8c <printk>
		net_buf_unref(buf);
    60be:	4630      	mov	r0, r6
    60c0:	f00c fab2 	bl	12628 <net_buf_unref>
    60c4:	e7cf      	b.n	6066 <gatt_indicate+0x5a>
			return -EINVAL;
    60c6:	f06f 0415 	mvn.w	r4, #21
    60ca:	e7cc      	b.n	6066 <gatt_indicate+0x5a>
    60cc:	000142a9 	.word	0x000142a9
    60d0:	00015040 	.word	0x00015040
    60d4:	00015afa 	.word	0x00015afa
    60d8:	00015047 	.word	0x00015047
    60dc:	00015b68 	.word	0x00015b68
    60e0:	00005eed 	.word	0x00005eed
    60e4:	00014ff8 	.word	0x00014ff8
    60e8:	00015af0 	.word	0x00015af0
    60ec:	00015b9f 	.word	0x00015b9f

000060f0 <sc_indicate.constprop.15>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    60f0:	b510      	push	{r4, lr}
    60f2:	4b17      	ldr	r3, [pc, #92]	; (6150 <sc_indicate.constprop.15+0x60>)
    60f4:	f3bf 8f5b 	dmb	ish
    60f8:	f103 0250 	add.w	r2, r3, #80	; 0x50
    60fc:	e852 4f00 	ldrex	r4, [r2]
    6100:	f044 0e01 	orr.w	lr, r4, #1
    6104:	e842 ec00 	strex	ip, lr, [r2]
    6108:	f1bc 0f00 	cmp.w	ip, #0
    610c:	d1f6      	bne.n	60fc <sc_indicate.constprop.15+0xc>
    610e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    6112:	07e2      	lsls	r2, r4, #31
    6114:	d402      	bmi.n	611c <sc_indicate.constprop.15+0x2c>
		sc->start = start;
    6116:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    6118:	84d9      	strh	r1, [r3, #38]	; 0x26
    611a:	e00a      	b.n	6132 <sc_indicate.constprop.15+0x42>
	if (new_start >= *start && new_end <= *end) {
    611c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    611e:	4282      	cmp	r2, r0
    6120:	d803      	bhi.n	612a <sc_indicate.constprop.15+0x3a>
    6122:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    6124:	428a      	cmp	r2, r1
    6126:	d301      	bcc.n	612c <sc_indicate.constprop.15+0x3c>
    6128:	bd10      	pop	{r4, pc}
		*start = new_start;
    612a:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    612c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    612e:	428a      	cmp	r2, r1
    6130:	d3f2      	bcc.n	6118 <sc_indicate.constprop.15+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6132:	f3bf 8f5b 	dmb	ish
    6136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6138:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    613c:	079b      	lsls	r3, r3, #30
    613e:	d406      	bmi.n	614e <sc_indicate.constprop.15+0x5e>
    6140:	220a      	movs	r2, #10
    6142:	4904      	ldr	r1, [pc, #16]	; (6154 <sc_indicate.constprop.15+0x64>)
    6144:	4804      	ldr	r0, [pc, #16]	; (6158 <sc_indicate.constprop.15+0x68>)
}
    6146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    614a:	f00d be51 	b.w	13df0 <k_delayed_work_submit_to_queue>
    614e:	bd10      	pop	{r4, pc}
    6150:	2000058c 	.word	0x2000058c
    6154:	200005b4 	.word	0x200005b4
    6158:	20001988 	.word	0x20001988

0000615c <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    615c:	6882      	ldr	r2, [r0, #8]
    615e:	4b19      	ldr	r3, [pc, #100]	; (61c4 <connected_cb+0x68>)
    6160:	429a      	cmp	r2, r3
{
    6162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6166:	4607      	mov	r7, r0
    6168:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    616a:	d125      	bne.n	61b8 <connected_cb+0x5c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    616c:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    616e:	2600      	movs	r6, #0
    6170:	686b      	ldr	r3, [r5, #4]
    6172:	429e      	cmp	r6, r3
    6174:	d220      	bcs.n	61b8 <connected_cb+0x5c>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6176:	6829      	ldr	r1, [r5, #0]
    6178:	ea4f 1806 	mov.w	r8, r6, lsl #4
    617c:	4441      	add	r1, r8
    617e:	4620      	mov	r0, r4
    6180:	f7fe f86a 	bl	4258 <bt_conn_addr_le_cmp>
    6184:	b9d8      	cbnz	r0, 61be <connected_cb+0x62>
			continue;
		}

		if (ccc->cfg[i].value) {
    6186:	682b      	ldr	r3, [r5, #0]
    6188:	4443      	add	r3, r8
    618a:	891b      	ldrh	r3, [r3, #8]
    618c:	b1bb      	cbz	r3, 61be <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    618e:	4629      	mov	r1, r5
    6190:	4638      	mov	r0, r7
    6192:	f7ff fe92 	bl	5eba <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    6196:	682c      	ldr	r4, [r5, #0]
    6198:	4b0b      	ldr	r3, [pc, #44]	; (61c8 <connected_cb+0x6c>)
    619a:	429c      	cmp	r4, r3
    619c:	d10c      	bne.n	61b8 <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    619e:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    61a0:	89a0      	ldrh	r0, [r4, #12]
    61a2:	89e1      	ldrh	r1, [r4, #14]
    61a4:	b900      	cbnz	r0, 61a8 <connected_cb+0x4c>
    61a6:	b139      	cbz	r1, 61b8 <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    61a8:	f7ff ffa2 	bl	60f0 <sc_indicate.constprop.15>
	memset(cfg->data, 0, sizeof(cfg->data));
    61ac:	2204      	movs	r2, #4
    61ae:	2100      	movs	r1, #0
    61b0:	f104 000c 	add.w	r0, r4, #12
    61b4:	f7fb fd4e 	bl	1c54 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    61b8:	2001      	movs	r0, #1
    61ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    61be:	3601      	adds	r6, #1
    61c0:	e7d6      	b.n	6170 <connected_cb+0x14>
    61c2:	bf00      	nop
    61c4:	000063e9 	.word	0x000063e9
    61c8:	200005e0 	.word	0x200005e0

000061cc <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    61cc:	490d      	ldr	r1, [pc, #52]	; (6204 <sc_indicate_rsp+0x38>)
    61ce:	f3bf 8f5b 	dmb	ish
    61d2:	f101 0350 	add.w	r3, r1, #80	; 0x50
    61d6:	e853 2f00 	ldrex	r2, [r3]
    61da:	f022 0202 	bic.w	r2, r2, #2
    61de:	e843 2000 	strex	r0, r2, [r3]
    61e2:	2800      	cmp	r0, #0
    61e4:	d1f7      	bne.n	61d6 <sc_indicate_rsp+0xa>
    61e6:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    61ea:	f3bf 8f5b 	dmb	ish
    61ee:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    61f0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    61f4:	07db      	lsls	r3, r3, #31
    61f6:	d504      	bpl.n	6202 <sc_indicate_rsp+0x36>
    61f8:	2200      	movs	r2, #0
    61fa:	3128      	adds	r1, #40	; 0x28
    61fc:	4802      	ldr	r0, [pc, #8]	; (6208 <sc_indicate_rsp+0x3c>)
    61fe:	f00d bdf7 	b.w	13df0 <k_delayed_work_submit_to_queue>
    6202:	4770      	bx	lr
    6204:	2000058c 	.word	0x2000058c
    6208:	20001988 	.word	0x20001988

0000620c <read_appearance>:
{
    620c:	b513      	push	{r0, r1, r4, lr}
    620e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    6212:	4610      	mov	r0, r2
	if (offset > value_len) {
    6214:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    6216:	f04f 0200 	mov.w	r2, #0
    621a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    621e:	d80d      	bhi.n	623c <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    6220:	f1c1 0402 	rsb	r4, r1, #2
    6224:	429c      	cmp	r4, r3
    6226:	bfa8      	it	ge
    6228:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    622a:	f10d 0306 	add.w	r3, sp, #6
    622e:	4622      	mov	r2, r4
    6230:	4419      	add	r1, r3
    6232:	f7fb fce3 	bl	1bfc <memcpy>
}
    6236:	4620      	mov	r0, r4
    6238:	b002      	add	sp, #8
    623a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    623c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    6240:	e7f9      	b.n	6236 <read_appearance+0x2a>
	...

00006244 <disconnected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6244:	6882      	ldr	r2, [r0, #8]
    6246:	4b27      	ldr	r3, [pc, #156]	; (62e4 <disconnected_cb+0xa0>)
    6248:	429a      	cmp	r2, r3
{
    624a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    624e:	4680      	mov	r8, r0
    6250:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    6252:	d127      	bne.n	62a4 <disconnected_cb+0x60>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6254:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    6256:	8923      	ldrh	r3, [r4, #8]
    6258:	b323      	cbz	r3, 62a4 <disconnected_cb+0x60>
    625a:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    625c:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    6260:	6863      	ldr	r3, [r4, #4]
    6262:	429e      	cmp	r6, r3
    6264:	d30b      	bcc.n	627e <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    6266:	2202      	movs	r2, #2
    6268:	2100      	movs	r1, #0
    626a:	f104 0008 	add.w	r0, r4, #8
    626e:	f7fb fcf1 	bl	1c54 <memset>
	if (ccc->cfg_changed) {
    6272:	68e3      	ldr	r3, [r4, #12]
    6274:	b1b3      	cbz	r3, 62a4 <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    6276:	8921      	ldrh	r1, [r4, #8]
    6278:	4640      	mov	r0, r8
    627a:	4798      	blx	r3
    627c:	e012      	b.n	62a4 <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    627e:	6821      	ldr	r1, [r4, #0]
    6280:	0135      	lsls	r5, r6, #4
    6282:	4429      	add	r1, r5
    6284:	890b      	ldrh	r3, [r1, #8]
    6286:	b19b      	cbz	r3, 62b0 <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6288:	4648      	mov	r0, r9
    628a:	f7fd ffe5 	bl	4258 <bt_conn_addr_le_cmp>
    628e:	b188      	cbz	r0, 62b4 <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6290:	6820      	ldr	r0, [r4, #0]
    6292:	4428      	add	r0, r5
    6294:	f7fd fff8 	bl	4288 <bt_conn_lookup_addr_le>
			if (tmp) {
    6298:	b150      	cbz	r0, 62b0 <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    629a:	7a43      	ldrb	r3, [r0, #9]
    629c:	2b03      	cmp	r3, #3
    629e:	d105      	bne.n	62ac <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    62a0:	f7fe f82e 	bl	4300 <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    62a4:	2001      	movs	r0, #1
    62a6:	b002      	add	sp, #8
    62a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    62ac:	f7fe f828 	bl	4300 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    62b0:	3601      	adds	r6, #1
    62b2:	e7d5      	b.n	6260 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    62b4:	4650      	mov	r0, sl
    62b6:	f7fd fbaf 	bl	3a18 <bt_addr_le_is_bonded>
    62ba:	4607      	mov	r7, r0
    62bc:	6820      	ldr	r0, [r4, #0]
    62be:	b95f      	cbnz	r7, 62d8 <disconnected_cb+0x94>
    62c0:	4428      	add	r0, r5
    62c2:	2207      	movs	r2, #7
    62c4:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    62c6:	9700      	str	r7, [sp, #0]
    62c8:	f8cd 7003 	str.w	r7, [sp, #3]
    62cc:	f7fb fc96 	bl	1bfc <memcpy>
				ccc->cfg[i].value = 0;
    62d0:	6823      	ldr	r3, [r4, #0]
    62d2:	441d      	add	r5, r3
    62d4:	812f      	strh	r7, [r5, #8]
    62d6:	e7eb      	b.n	62b0 <disconnected_cb+0x6c>
    62d8:	2207      	movs	r2, #7
    62da:	4651      	mov	r1, sl
    62dc:	4428      	add	r0, r5
    62de:	f7fb fc8d 	bl	1bfc <memcpy>
    62e2:	e7e5      	b.n	62b0 <disconnected_cb+0x6c>
    62e4:	000063e9 	.word	0x000063e9

000062e8 <read_name>:
{
    62e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    62ec:	4e0d      	ldr	r6, [pc, #52]	; (6324 <read_name+0x3c>)
{
    62ee:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    62f2:	4630      	mov	r0, r6
{
    62f4:	4698      	mov	r8, r3
    62f6:	4617      	mov	r7, r2
				 strlen(gap_name));
    62f8:	f7fb fc56 	bl	1ba8 <strlen>
	if (offset > value_len) {
    62fc:	b283      	uxth	r3, r0
    62fe:	42ab      	cmp	r3, r5
    6300:	d30d      	bcc.n	631e <read_name+0x36>
	len = min(buf_len, value_len - offset);
    6302:	1b5c      	subs	r4, r3, r5
    6304:	4544      	cmp	r4, r8
    6306:	4623      	mov	r3, r4
    6308:	bfa8      	it	ge
    630a:	4643      	movge	r3, r8
    630c:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    630e:	4622      	mov	r2, r4
    6310:	1971      	adds	r1, r6, r5
    6312:	4638      	mov	r0, r7
    6314:	f7fb fc72 	bl	1bfc <memcpy>
}
    6318:	4620      	mov	r0, r4
    631a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    631e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    6322:	e7f9      	b.n	6318 <read_name+0x30>
    6324:	00015c33 	.word	0x00015c33

00006328 <bt_gatt_attr_read_ccc>:
{
    6328:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    632c:	68ce      	ldr	r6, [r1, #12]
{
    632e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    6332:	4604      	mov	r4, r0
    6334:	4690      	mov	r8, r2
    6336:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    6338:	2500      	movs	r5, #0
    633a:	6873      	ldr	r3, [r6, #4]
    633c:	429d      	cmp	r5, r3
    633e:	d20e      	bcs.n	635e <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6340:	6831      	ldr	r1, [r6, #0]
    6342:	ea4f 1905 	mov.w	r9, r5, lsl #4
    6346:	4449      	add	r1, r9
    6348:	4620      	mov	r0, r4
    634a:	f7fd ff85 	bl	4258 <bt_conn_addr_le_cmp>
    634e:	b108      	cbz	r0, 6354 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    6350:	3501      	adds	r5, #1
    6352:	e7f2      	b.n	633a <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    6354:	6832      	ldr	r2, [r6, #0]
    6356:	444a      	add	r2, r9
    6358:	8913      	ldrh	r3, [r2, #8]
    635a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    635e:	6873      	ldr	r3, [r6, #4]
    6360:	429d      	cmp	r5, r3
		value = 0x0000;
    6362:	bf04      	itt	eq
    6364:	2300      	moveq	r3, #0
    6366:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    636a:	2f02      	cmp	r7, #2
    636c:	d80f      	bhi.n	638e <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    636e:	f1c7 0402 	rsb	r4, r7, #2
    6372:	4554      	cmp	r4, sl
    6374:	bfa8      	it	ge
    6376:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    6378:	f10d 0306 	add.w	r3, sp, #6
    637c:	4622      	mov	r2, r4
    637e:	19d9      	adds	r1, r3, r7
    6380:	4640      	mov	r0, r8
    6382:	f7fb fc3b 	bl	1bfc <memcpy>
}
    6386:	4620      	mov	r0, r4
    6388:	b002      	add	sp, #8
    638a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    638e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    6392:	e7f8      	b.n	6386 <bt_gatt_attr_read_ccc+0x5e>

00006394 <bt_gatt_attr_read_service>:
{
    6394:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    6396:	68c9      	ldr	r1, [r1, #12]
{
    6398:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    639c:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    639e:	780a      	ldrb	r2, [r1, #0]
    63a0:	b992      	cbnz	r2, 63c8 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    63a2:	884a      	ldrh	r2, [r1, #2]
    63a4:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    63a8:	2d02      	cmp	r5, #2
    63aa:	d819      	bhi.n	63e0 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    63ac:	f1c5 0402 	rsb	r4, r5, #2
    63b0:	429c      	cmp	r4, r3
    63b2:	bfa8      	it	ge
    63b4:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    63b6:	f10d 0306 	add.w	r3, sp, #6
    63ba:	4622      	mov	r2, r4
    63bc:	1959      	adds	r1, r3, r5
    63be:	f7fb fc1d 	bl	1bfc <memcpy>
}
    63c2:	4620      	mov	r0, r4
    63c4:	b003      	add	sp, #12
    63c6:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    63c8:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    63ca:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    63ce:	d807      	bhi.n	63e0 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    63d0:	f1c5 0410 	rsb	r4, r5, #16
    63d4:	429c      	cmp	r4, r3
    63d6:	bfa8      	it	ge
    63d8:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    63da:	4622      	mov	r2, r4
    63dc:	4429      	add	r1, r5
    63de:	e7ee      	b.n	63be <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    63e0:	f06f 0406 	mvn.w	r4, #6
    63e4:	e7ed      	b.n	63c2 <bt_gatt_attr_read_service+0x2e>
	...

000063e8 <bt_gatt_attr_write_ccc>:
{
    63e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63ec:	b087      	sub	sp, #28
    63ee:	4688      	mov	r8, r1
    63f0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    63f4:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    63f8:	2902      	cmp	r1, #2
{
    63fa:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    63fc:	d85f      	bhi.n	64be <bt_gatt_attr_write_ccc+0xd6>
	if (offset + len > sizeof(u16_t)) {
    63fe:	4419      	add	r1, r3
    6400:	2902      	cmp	r1, #2
    6402:	461f      	mov	r7, r3
    6404:	dc5e      	bgt.n	64c4 <bt_gatt_attr_write_ccc+0xdc>
	return ((u16_t)src[1] << 8) | src[0];
    6406:	7853      	ldrb	r3, [r2, #1]
    6408:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    640a:	2400      	movs	r4, #0
    640c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    6410:	686b      	ldr	r3, [r5, #4]
    6412:	429c      	cmp	r4, r3
    6414:	d206      	bcs.n	6424 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6416:	6829      	ldr	r1, [r5, #0]
    6418:	4648      	mov	r0, r9
    641a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    641e:	f7fd ff1b 	bl	4258 <bt_conn_addr_le_cmp>
    6422:	b9b8      	cbnz	r0, 6454 <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    6424:	686b      	ldr	r3, [r5, #4]
    6426:	429c      	cmp	r4, r3
    6428:	d12f      	bne.n	648a <bt_gatt_attr_write_ccc+0xa2>
		if (!value) {
    642a:	b356      	cbz	r6, 6482 <bt_gatt_attr_write_ccc+0x9a>
    642c:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    642e:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    6430:	686b      	ldr	r3, [r5, #4]
    6432:	429c      	cmp	r4, r3
    6434:	d217      	bcs.n	6466 <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    6436:	6828      	ldr	r0, [r5, #0]
    6438:	f8cd a008 	str.w	sl, [sp, #8]
    643c:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    6440:	2207      	movs	r2, #7
    6442:	a902      	add	r1, sp, #8
    6444:	4458      	add	r0, fp
    6446:	f8cd a00b 	str.w	sl, [sp, #11]
    644a:	f7fb fbc2 	bl	1bd2 <memcmp>
    644e:	b118      	cbz	r0, 6458 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    6450:	3401      	adds	r4, #1
    6452:	e7ed      	b.n	6430 <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    6454:	3401      	adds	r4, #1
    6456:	e7db      	b.n	6410 <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    6458:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    645a:	2207      	movs	r2, #7
    645c:	f109 0144 	add.w	r1, r9, #68	; 0x44
    6460:	4458      	add	r0, fp
    6462:	f7fb fbcb 	bl	1bfc <memcpy>
		if (i == ccc->cfg_len) {
    6466:	686b      	ldr	r3, [r5, #4]
    6468:	429c      	cmp	r4, r3
    646a:	d10e      	bne.n	648a <bt_gatt_attr_write_ccc+0xa2>
			BT_WARN("No space to store CCC cfg");
    646c:	4b17      	ldr	r3, [pc, #92]	; (64cc <bt_gatt_attr_write_ccc+0xe4>)
    646e:	9301      	str	r3, [sp, #4]
    6470:	9300      	str	r3, [sp, #0]
    6472:	4a17      	ldr	r2, [pc, #92]	; (64d0 <bt_gatt_attr_write_ccc+0xe8>)
    6474:	4b17      	ldr	r3, [pc, #92]	; (64d4 <bt_gatt_attr_write_ccc+0xec>)
    6476:	4918      	ldr	r1, [pc, #96]	; (64d8 <bt_gatt_attr_write_ccc+0xf0>)
    6478:	4818      	ldr	r0, [pc, #96]	; (64dc <bt_gatt_attr_write_ccc+0xf4>)
    647a:	f7fa fd87 	bl	f8c <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    647e:	f06f 0710 	mvn.w	r7, #16
}
    6482:	4638      	mov	r0, r7
    6484:	b007      	add	sp, #28
    6486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    648a:	682b      	ldr	r3, [r5, #0]
    648c:	0124      	lsls	r4, r4, #4
    648e:	4423      	add	r3, r4
    6490:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    6492:	892b      	ldrh	r3, [r5, #8]
    6494:	42b3      	cmp	r3, r6
    6496:	d003      	beq.n	64a0 <bt_gatt_attr_write_ccc+0xb8>
		gatt_ccc_changed(attr, ccc);
    6498:	4629      	mov	r1, r5
    649a:	4640      	mov	r0, r8
    649c:	f7ff fd0d 	bl	5eba <gatt_ccc_changed>
	if (!value) {
    64a0:	2e00      	cmp	r6, #0
    64a2:	d1ee      	bne.n	6482 <bt_gatt_attr_write_ccc+0x9a>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    64a4:	6828      	ldr	r0, [r5, #0]
    64a6:	9604      	str	r6, [sp, #16]
    64a8:	4420      	add	r0, r4
    64aa:	2207      	movs	r2, #7
    64ac:	a904      	add	r1, sp, #16
    64ae:	f8cd 6013 	str.w	r6, [sp, #19]
    64b2:	f7fb fba3 	bl	1bfc <memcpy>
		ccc->cfg[i].value = 0;
    64b6:	682b      	ldr	r3, [r5, #0]
    64b8:	441c      	add	r4, r3
    64ba:	8126      	strh	r6, [r4, #8]
    64bc:	e7e1      	b.n	6482 <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    64be:	f06f 0706 	mvn.w	r7, #6
    64c2:	e7de      	b.n	6482 <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    64c4:	f06f 070c 	mvn.w	r7, #12
    64c8:	e7db      	b.n	6482 <bt_gatt_attr_write_ccc+0x9a>
    64ca:	bf00      	nop
    64cc:	000142a9 	.word	0x000142a9
    64d0:	00015040 	.word	0x00015040
    64d4:	00015acd 	.word	0x00015acd
    64d8:	00015047 	.word	0x00015047
    64dc:	00015b3e 	.word	0x00015b3e

000064e0 <notify_cb>:
{
    64e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    64e4:	f642 1302 	movw	r3, #10498	; 0x2902
{
    64e8:	4605      	mov	r5, r0
    64ea:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    64ec:	2400      	movs	r4, #0
    64ee:	4669      	mov	r1, sp
    64f0:	6800      	ldr	r0, [r0, #0]
    64f2:	f88d 4000 	strb.w	r4, [sp]
    64f6:	f8ad 3002 	strh.w	r3, [sp, #2]
    64fa:	f7fb fcfd 	bl	1ef8 <bt_uuid_cmp>
    64fe:	b178      	cbz	r0, 6520 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    6500:	f642 0303 	movw	r3, #10243	; 0x2803
    6504:	6828      	ldr	r0, [r5, #0]
    6506:	f88d 4004 	strb.w	r4, [sp, #4]
    650a:	a901      	add	r1, sp, #4
    650c:	f8ad 3006 	strh.w	r3, [sp, #6]
    6510:	f7fb fcf2 	bl	1ef8 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    6514:	1b00      	subs	r0, r0, r4
    6516:	bf18      	it	ne
    6518:	2001      	movne	r0, #1
}
    651a:	b003      	add	sp, #12
    651c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    6520:	68aa      	ldr	r2, [r5, #8]
    6522:	4b2b      	ldr	r3, [pc, #172]	; (65d0 <notify_cb+0xf0>)
    6524:	429a      	cmp	r2, r3
    6526:	d001      	beq.n	652c <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    6528:	2001      	movs	r0, #1
    652a:	e7f6      	b.n	651a <notify_cb+0x3a>
	ccc = attr->user_data;
    652c:	68ef      	ldr	r7, [r5, #12]
    652e:	4d29      	ldr	r5, [pc, #164]	; (65d4 <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    6530:	4604      	mov	r4, r0
    6532:	46a8      	mov	r8, r5
    6534:	4681      	mov	r9, r0
    6536:	687b      	ldr	r3, [r7, #4]
    6538:	429c      	cmp	r4, r3
    653a:	d2f5      	bcs.n	6528 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    653c:	6838      	ldr	r0, [r7, #0]
    653e:	88b3      	ldrh	r3, [r6, #4]
    6540:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    6544:	8902      	ldrh	r2, [r0, #8]
    6546:	429a      	cmp	r2, r3
    6548:	d114      	bne.n	6574 <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    654a:	f7fd fe9d 	bl	4288 <bt_conn_lookup_addr_le>
		if (!conn) {
    654e:	4683      	mov	fp, r0
    6550:	b9f8      	cbnz	r0, 6592 <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    6552:	683b      	ldr	r3, [r7, #0]
    6554:	4543      	cmp	r3, r8
    6556:	d10d      	bne.n	6574 <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    6558:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    655a:	a801      	add	r0, sp, #4
    655c:	8c1a      	ldrh	r2, [r3, #32]
    655e:	69d9      	ldr	r1, [r3, #28]
    6560:	f7fb fb4c 	bl	1bfc <memcpy>
	if (!stored->start && !stored->end) {
    6564:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    6566:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    656a:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    656c:	b928      	cbnz	r0, 657a <notify_cb+0x9a>
    656e:	b942      	cbnz	r2, 6582 <notify_cb+0xa2>
		*stored = data;
    6570:	9801      	ldr	r0, [sp, #4]
    6572:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    6574:	3401      	adds	r4, #1
    6576:	3510      	adds	r5, #16
    6578:	e7dd      	b.n	6536 <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    657a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    657e:	4281      	cmp	r1, r0
    6580:	d305      	bcc.n	658e <notify_cb+0xae>
    6582:	429a      	cmp	r2, r3
    6584:	d2f6      	bcs.n	6574 <notify_cb+0x94>
	if (*end < new_end) {
    6586:	429a      	cmp	r2, r3
    6588:	d2f4      	bcs.n	6574 <notify_cb+0x94>
		*end = new_end;
    658a:	81eb      	strh	r3, [r5, #14]
    658c:	e7f2      	b.n	6574 <notify_cb+0x94>
		*start = new_start;
    658e:	81a9      	strh	r1, [r5, #12]
    6590:	e7f9      	b.n	6586 <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    6592:	7a43      	ldrb	r3, [r0, #9]
    6594:	2b03      	cmp	r3, #3
    6596:	d002      	beq.n	659e <notify_cb+0xbe>
			bt_conn_unref(conn);
    6598:	f7fd feb2 	bl	4300 <bt_conn_unref>
    659c:	e7ea      	b.n	6574 <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    659e:	88b3      	ldrh	r3, [r6, #4]
    65a0:	2b02      	cmp	r3, #2
    65a2:	d10c      	bne.n	65be <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    65a4:	6971      	ldr	r1, [r6, #20]
    65a6:	f7ff fd31 	bl	600c <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    65aa:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    65ac:	4658      	mov	r0, fp
    65ae:	f7fd fea7 	bl	4300 <bt_conn_unref>
		if (err < 0) {
    65b2:	f1ba 0f00 	cmp.w	sl, #0
    65b6:	db09      	blt.n	65cc <notify_cb+0xec>
		data->err = 0;
    65b8:	f8c6 9000 	str.w	r9, [r6]
    65bc:	e7da      	b.n	6574 <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    65be:	68b1      	ldr	r1, [r6, #8]
    65c0:	8a33      	ldrh	r3, [r6, #16]
    65c2:	68f2      	ldr	r2, [r6, #12]
    65c4:	8a09      	ldrh	r1, [r1, #16]
    65c6:	f7ff fce3 	bl	5f90 <gatt_notify>
    65ca:	e7ee      	b.n	65aa <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    65cc:	2000      	movs	r0, #0
    65ce:	e7a4      	b.n	651a <notify_cb+0x3a>
    65d0:	000063e9 	.word	0x000063e9
    65d4:	200005e0 	.word	0x200005e0

000065d8 <bt_gatt_init>:
{
    65d8:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    65da:	4806      	ldr	r0, [pc, #24]	; (65f4 <bt_gatt_init+0x1c>)
    65dc:	f7ff fc8e 	bl	5efc <gatt_register>
	gatt_register(&gatt_svc);
    65e0:	4805      	ldr	r0, [pc, #20]	; (65f8 <bt_gatt_init+0x20>)
    65e2:	f7ff fc8b 	bl	5efc <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    65e6:	4905      	ldr	r1, [pc, #20]	; (65fc <bt_gatt_init+0x24>)
    65e8:	4805      	ldr	r0, [pc, #20]	; (6600 <bt_gatt_init+0x28>)
}
    65ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    65ee:	f00d bb8b 	b.w	13d08 <k_delayed_work_init>
    65f2:	bf00      	nop
    65f4:	20003c9c 	.word	0x20003c9c
    65f8:	20003cf8 	.word	0x20003cf8
    65fc:	00006685 	.word	0x00006685
    6600:	200005b4 	.word	0x200005b4

00006604 <bt_gatt_foreach_attr>:
{
    6604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6608:	4699      	mov	r9, r3
    660a:	4b12      	ldr	r3, [pc, #72]	; (6654 <bt_gatt_foreach_attr+0x50>)
    660c:	681c      	ldr	r4, [r3, #0]
    660e:	4606      	mov	r6, r0
    6610:	460f      	mov	r7, r1
    6612:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6614:	b1dc      	cbz	r4, 664e <bt_gatt_foreach_attr+0x4a>
    6616:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    6618:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    661c:	b1bc      	cbz	r4, 664e <bt_gatt_foreach_attr+0x4a>
    661e:	2500      	movs	r5, #0
    6620:	e006      	b.n	6630 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    6622:	6820      	ldr	r0, [r4, #0]
    6624:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    6628:	8a03      	ldrh	r3, [r0, #16]
    662a:	42b3      	cmp	r3, r6
    662c:	d207      	bcs.n	663e <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    662e:	3501      	adds	r5, #1
    6630:	6863      	ldr	r3, [r4, #4]
    6632:	42ab      	cmp	r3, r5
    6634:	d8f5      	bhi.n	6622 <bt_gatt_foreach_attr+0x1e>
	return node->next;
    6636:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6638:	b14c      	cbz	r4, 664e <bt_gatt_foreach_attr+0x4a>
    663a:	3c08      	subs	r4, #8
    663c:	e7ee      	b.n	661c <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    663e:	42bb      	cmp	r3, r7
    6640:	d8f5      	bhi.n	662e <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    6642:	4649      	mov	r1, r9
    6644:	47c0      	blx	r8
    6646:	2800      	cmp	r0, #0
    6648:	d1f1      	bne.n	662e <bt_gatt_foreach_attr+0x2a>
    664a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    664e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6652:	bf00      	nop
    6654:	20000584 	.word	0x20000584

00006658 <bt_gatt_indicate.part.10>:
int bt_gatt_indicate(struct bt_conn *conn,
    6658:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    665a:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    665e:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6660:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    6662:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    6664:	2302      	movs	r3, #2
    6666:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    666a:	4a05      	ldr	r2, [pc, #20]	; (6680 <bt_gatt_indicate.part.10+0x28>)
    666c:	8a00      	ldrh	r0, [r0, #16]
    666e:	466b      	mov	r3, sp
    6670:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6674:	f7ff ffc6 	bl	6604 <bt_gatt_foreach_attr>
}
    6678:	9800      	ldr	r0, [sp, #0]
    667a:	b007      	add	sp, #28
    667c:	f85d fb04 	ldr.w	pc, [sp], #4
    6680:	000064e1 	.word	0x000064e1

00006684 <sc_process>:
{
    6684:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    6686:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    668a:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    668e:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    6690:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    6694:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    6698:	3828      	subs	r0, #40	; 0x28
    669a:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    669e:	f3bf 8f5b 	dmb	ish
    66a2:	e854 2f00 	ldrex	r2, [r4]
    66a6:	f022 0201 	bic.w	r2, r2, #1
    66aa:	e844 2100 	strex	r1, r2, [r4]
    66ae:	2900      	cmp	r1, #0
    66b0:	d1f7      	bne.n	66a2 <sc_process+0x1e>
    66b2:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    66b6:	2200      	movs	r2, #0
    66b8:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    66bc:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    66c0:	4a0e      	ldr	r2, [pc, #56]	; (66fc <sc_process+0x78>)
    66c2:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    66c6:	4a0e      	ldr	r2, [pc, #56]	; (6700 <sc_process+0x7c>)
    66c8:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    66cc:	aa01      	add	r2, sp, #4
    66ce:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    66d2:	2204      	movs	r2, #4
    66d4:	f823 2c08 	strh.w	r2, [r3, #-8]
    66d8:	f7ff ffbe 	bl	6658 <bt_gatt_indicate.part.10>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    66dc:	b958      	cbnz	r0, 66f6 <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    66de:	f3bf 8f5b 	dmb	ish
    66e2:	e854 3f00 	ldrex	r3, [r4]
    66e6:	f043 0302 	orr.w	r3, r3, #2
    66ea:	e844 3200 	strex	r2, r3, [r4]
    66ee:	2a00      	cmp	r2, #0
    66f0:	d1f7      	bne.n	66e2 <sc_process+0x5e>
    66f2:	f3bf 8f5b 	dmb	ish
}
    66f6:	b002      	add	sp, #8
    66f8:	bd10      	pop	{r4, pc}
    66fa:	bf00      	nop
    66fc:	20003cd0 	.word	0x20003cd0
    6700:	000061cd 	.word	0x000061cd

00006704 <bt_gatt_attr_next>:
{
    6704:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6706:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    6708:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    670a:	3101      	adds	r1, #1
    670c:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    670e:	2200      	movs	r2, #0
    6710:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6714:	4608      	mov	r0, r1
    6716:	4a03      	ldr	r2, [pc, #12]	; (6724 <bt_gatt_attr_next+0x20>)
    6718:	f7ff ff74 	bl	6604 <bt_gatt_foreach_attr>
}
    671c:	9801      	ldr	r0, [sp, #4]
    671e:	b003      	add	sp, #12
    6720:	f85d fb04 	ldr.w	pc, [sp], #4
    6724:	00005eb5 	.word	0x00005eb5

00006728 <bt_gatt_attr_read_chrc>:
{
    6728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    672c:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    6730:	b08b      	sub	sp, #44	; 0x2c
    6732:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    6734:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    6736:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    673a:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    673e:	f88d 3014 	strb.w	r3, [sp, #20]
{
    6742:	4688      	mov	r8, r1
    6744:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    6746:	f7ff ffdd 	bl	6704 <bt_gatt_attr_next>
	if (!next) {
    674a:	4605      	mov	r5, r0
    674c:	bb40      	cbnz	r0, 67a0 <bt_gatt_attr_read_chrc+0x78>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    674e:	4b1c      	ldr	r3, [pc, #112]	; (67c0 <bt_gatt_attr_read_chrc+0x98>)
    6750:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    6754:	9302      	str	r3, [sp, #8]
    6756:	9201      	str	r2, [sp, #4]
    6758:	9300      	str	r3, [sp, #0]
    675a:	4a1a      	ldr	r2, [pc, #104]	; (67c4 <bt_gatt_attr_read_chrc+0x9c>)
    675c:	4b1a      	ldr	r3, [pc, #104]	; (67c8 <bt_gatt_attr_read_chrc+0xa0>)
    675e:	491b      	ldr	r1, [pc, #108]	; (67cc <bt_gatt_attr_read_chrc+0xa4>)
    6760:	481b      	ldr	r0, [pc, #108]	; (67d0 <bt_gatt_attr_read_chrc+0xa8>)
    6762:	f7fa fc13 	bl	f8c <printk>
		pdu.value_handle = 0x0000;
    6766:	f88d 5015 	strb.w	r5, [sp, #21]
    676a:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    676e:	f8d9 1000 	ldr.w	r1, [r9]
    6772:	780b      	ldrb	r3, [r1, #0]
    6774:	b9c3      	cbnz	r3, 67a8 <bt_gatt_attr_read_chrc+0x80>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    6776:	884b      	ldrh	r3, [r1, #2]
    6778:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    677c:	2305      	movs	r3, #5
	if (offset > value_len) {
    677e:	42b3      	cmp	r3, r6
    6780:	d31a      	bcc.n	67b8 <bt_gatt_attr_read_chrc+0x90>
	len = min(buf_len, value_len - offset);
    6782:	1b9b      	subs	r3, r3, r6
    6784:	42a3      	cmp	r3, r4
    6786:	bfa8      	it	ge
    6788:	4623      	movge	r3, r4
    678a:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    678c:	ab05      	add	r3, sp, #20
    678e:	4622      	mov	r2, r4
    6790:	1999      	adds	r1, r3, r6
    6792:	4638      	mov	r0, r7
    6794:	f7fb fa32 	bl	1bfc <memcpy>
}
    6798:	4620      	mov	r0, r4
    679a:	b00b      	add	sp, #44	; 0x2c
    679c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    67a0:	8a03      	ldrh	r3, [r0, #16]
    67a2:	f8ad 3015 	strh.w	r3, [sp, #21]
    67a6:	e7e2      	b.n	676e <bt_gatt_attr_read_chrc+0x46>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    67a8:	2210      	movs	r2, #16
    67aa:	3101      	adds	r1, #1
    67ac:	f10d 0017 	add.w	r0, sp, #23
    67b0:	f7fb fa24 	bl	1bfc <memcpy>
		value_len += 16;
    67b4:	2313      	movs	r3, #19
    67b6:	e7e2      	b.n	677e <bt_gatt_attr_read_chrc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    67b8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    67bc:	e7ec      	b.n	6798 <bt_gatt_attr_read_chrc+0x70>
    67be:	bf00      	nop
    67c0:	000142a9 	.word	0x000142a9
    67c4:	00015040 	.word	0x00015040
    67c8:	00015ab6 	.word	0x00015ab6
    67cc:	00015047 	.word	0x00015047
    67d0:	00015b08 	.word	0x00015b08

000067d4 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    67d4:	4603      	mov	r3, r0
    67d6:	4a03      	ldr	r2, [pc, #12]	; (67e4 <bt_gatt_connected+0x10>)
    67d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    67dc:	2001      	movs	r0, #1
    67de:	f7ff bf11 	b.w	6604 <bt_gatt_foreach_attr>
    67e2:	bf00      	nop
    67e4:	0000615d 	.word	0x0000615d

000067e8 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    67e8:	4603      	mov	r3, r0
    67ea:	4a03      	ldr	r2, [pc, #12]	; (67f8 <bt_gatt_disconnected+0x10>)
    67ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    67f0:	2001      	movs	r0, #1
    67f2:	f7ff bf07 	b.w	6604 <bt_gatt_foreach_attr>
    67f6:	bf00      	nop
    67f8:	00006245 	.word	0x00006245

000067fc <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    67fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    67fe:	4a0b      	ldr	r2, [pc, #44]	; (682c <bt_smp_accept+0x30>)
    6800:	6813      	ldr	r3, [r2, #0]
    6802:	b933      	cbnz	r3, 6812 <bt_smp_accept+0x16>
			continue;
		}

		smp->chan.ops = &ops;
    6804:	480a      	ldr	r0, [pc, #40]	; (6830 <bt_smp_accept+0x34>)
    6806:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan;
    6808:	600a      	str	r2, [r1, #0]

		return 0;
    680a:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    680c:	b005      	add	sp, #20
    680e:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available SMP context for conn %p", conn);
    6812:	4b08      	ldr	r3, [pc, #32]	; (6834 <bt_smp_accept+0x38>)
    6814:	9302      	str	r3, [sp, #8]
    6816:	9001      	str	r0, [sp, #4]
    6818:	9300      	str	r3, [sp, #0]
    681a:	4a07      	ldr	r2, [pc, #28]	; (6838 <bt_smp_accept+0x3c>)
    681c:	4b07      	ldr	r3, [pc, #28]	; (683c <bt_smp_accept+0x40>)
    681e:	4908      	ldr	r1, [pc, #32]	; (6840 <bt_smp_accept+0x44>)
    6820:	4808      	ldr	r0, [pc, #32]	; (6844 <bt_smp_accept+0x48>)
    6822:	f7fa fbb3 	bl	f8c <printk>
	return -ENOMEM;
    6826:	f06f 000b 	mvn.w	r0, #11
    682a:	e7ef      	b.n	680c <bt_smp_accept+0x10>
    682c:	200005f0 	.word	0x200005f0
    6830:	20003d10 	.word	0x20003d10
    6834:	000142a9 	.word	0x000142a9
    6838:	00014ff8 	.word	0x00014ff8
    683c:	00015c3a 	.word	0x00015c3a
    6840:	00015047 	.word	0x00015047
    6844:	00015c48 	.word	0x00015c48

00006848 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    6848:	2100      	movs	r1, #0
{
    684a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    684e:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    6850:	4608      	mov	r0, r1
    6852:	f7fe f8c2 	bl	49da <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6856:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    685a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    685c:	2101      	movs	r1, #1
    685e:	4630      	mov	r0, r6
    6860:	f00b ff14 	bl	1268c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    6864:	2505      	movs	r5, #5
    6866:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    6868:	2101      	movs	r1, #1
    686a:	4630      	mov	r0, r6
    686c:	f00b ff0e 	bl	1268c <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    6870:	7005      	strb	r5, [r0, #0]
    6872:	4622      	mov	r2, r4
    6874:	4638      	mov	r0, r7
    6876:	2300      	movs	r3, #0
    6878:	2106      	movs	r1, #6
}
    687a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    687e:	f7fe b8af 	b.w	49e0 <bt_l2cap_send_cb>

00006882 <bt_smp_sign_verify>:
    6882:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6886:	4770      	bx	lr

00006888 <bt_smp_init>:

int bt_smp_init(void)
{
    6888:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    688a:	4802      	ldr	r0, [pc, #8]	; (6894 <bt_smp_init+0xc>)
    688c:	f7fd ffea 	bl	4864 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    6890:	2000      	movs	r0, #0
    6892:	bd08      	pop	{r3, pc}
    6894:	20003d04 	.word	0x20003d04

00006898 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    6898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    689a:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    689c:	1dc3      	adds	r3, r0, #7
{
    689e:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    68a0:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    68a4:	1e50      	subs	r0, r2, #1
{
    68a6:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    68a8:	b280      	uxth	r0, r0
{
    68aa:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    68ac:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    68ae:	2100      	movs	r1, #0
    68b0:	2204      	movs	r2, #4
    68b2:	fb06 5000 	mla	r0, r6, r0, r5
    68b6:	f7fb f9cd 	bl	1c54 <memset>
    68ba:	3c02      	subs	r4, #2
    68bc:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    68be:	f64f 77ff 	movw	r7, #65535	; 0xffff
    68c2:	42bc      	cmp	r4, r7
    68c4:	d101      	bne.n	68ca <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    68c6:	b003      	add	sp, #12
    68c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    68ca:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    68ce:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    68d0:	2204      	movs	r2, #4
    68d2:	1b80      	subs	r0, r0, r6
    68d4:	eb0d 0102 	add.w	r1, sp, r2
    68d8:	4428      	add	r0, r5
    68da:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    68dc:	9301      	str	r3, [sp, #4]
    68de:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    68e0:	f7fb f98c 	bl	1bfc <memcpy>
    68e4:	e7ed      	b.n	68c2 <mem_init+0x2a>

000068e6 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    68e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    68e8:	6805      	ldr	r5, [r0, #0]
{
    68ea:	4606      	mov	r6, r0
	if (*mem_head) {
    68ec:	b195      	cbz	r5, 6914 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    68ee:	1deb      	adds	r3, r5, #7
    68f0:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    68f4:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    68f6:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    68f8:	4629      	mov	r1, r5
    68fa:	eb0d 0002 	add.w	r0, sp, r2
    68fe:	f7fb f97d 	bl	1bfc <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    6902:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    6904:	3c01      	subs	r4, #1
    6906:	b2a4      	uxth	r4, r4
		if (head) {
    6908:	b11b      	cbz	r3, 6912 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    690a:	1dda      	adds	r2, r3, #7
    690c:	f022 0203 	bic.w	r2, r2, #3
    6910:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    6912:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    6914:	4628      	mov	r0, r5
    6916:	b002      	add	sp, #8
    6918:	bd70      	pop	{r4, r5, r6, pc}

0000691a <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    691a:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    691c:	680c      	ldr	r4, [r1, #0]
{
    691e:	4606      	mov	r6, r0
    6920:	460d      	mov	r5, r1
	if (*mem_head) {
    6922:	b11c      	cbz	r4, 692c <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6924:	1de3      	adds	r3, r4, #7
    6926:	f023 0303 	bic.w	r3, r3, #3
    692a:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    692c:	2204      	movs	r2, #4
    692e:	4629      	mov	r1, r5
    6930:	4630      	mov	r0, r6
    6932:	f7fb f963 	bl	1bfc <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    6936:	1df2      	adds	r2, r6, #7
    6938:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    693c:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    693e:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    6940:	602e      	str	r6, [r5, #0]
    6942:	bd70      	pop	{r4, r5, r6, pc}

00006944 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    6944:	b118      	cbz	r0, 694e <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    6946:	3007      	adds	r0, #7
    6948:	f020 0003 	bic.w	r0, r0, #3
    694c:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    694e:	4770      	bx	lr

00006950 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    6950:	fb02 0001 	mla	r0, r2, r1, r0
    6954:	4770      	bx	lr

00006956 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    6956:	1a40      	subs	r0, r0, r1
    6958:	b280      	uxth	r0, r0
}
    695a:	fbb0 f0f2 	udiv	r0, r0, r2
    695e:	4770      	bx	lr

00006960 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    6960:	b510      	push	{r4, lr}
	src += len;
    6962:	4411      	add	r1, r2
    6964:	3801      	subs	r0, #1
	while (len--) {
    6966:	f64f 73ff 	movw	r3, #65535	; 0xffff
    696a:	3a01      	subs	r2, #1
    696c:	b292      	uxth	r2, r2
    696e:	429a      	cmp	r2, r3
    6970:	d100      	bne.n	6974 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    6972:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    6974:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    6978:	f800 4f01 	strb.w	r4, [r0, #1]!
    697c:	e7f5      	b.n	696a <mem_rcopy+0xa>

0000697e <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    697e:	4401      	add	r1, r0
	while (len--) {
    6980:	4288      	cmp	r0, r1
    6982:	d101      	bne.n	6988 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    6984:	2000      	movs	r0, #0
    6986:	4770      	bx	lr
		if (*src++) {
    6988:	f810 3b01 	ldrb.w	r3, [r0], #1
    698c:	2b00      	cmp	r3, #0
    698e:	d0f7      	beq.n	6980 <mem_nz+0x2>
			return 1;
    6990:	2001      	movs	r0, #1
}
    6992:	4770      	bx	lr

00006994 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    6994:	6010      	str	r0, [r2, #0]
    6996:	6008      	str	r0, [r1, #0]

	return link;
}
    6998:	4770      	bx	lr

0000699a <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    699a:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    699c:	6814      	ldr	r4, [r2, #0]
    699e:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    69a0:	6814      	ldr	r4, [r2, #0]
    69a2:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    69a4:	6010      	str	r0, [r2, #0]

	return link;
}
    69a6:	bd10      	pop	{r4, pc}

000069a8 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    69a8:	4288      	cmp	r0, r1
    69aa:	d003      	beq.n	69b4 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    69ac:	b11a      	cbz	r2, 69b6 <memq_peek+0xe>
		*mem = head->mem;
    69ae:	6843      	ldr	r3, [r0, #4]
    69b0:	6013      	str	r3, [r2, #0]
    69b2:	4770      	bx	lr
		return NULL;
    69b4:	2000      	movs	r0, #0
	}

	return head;
}
    69b6:	4770      	bx	lr

000069b8 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    69b8:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    69ba:	4283      	cmp	r3, r0
    69bc:	d009      	beq.n	69d2 <memq_dequeue+0x1a>
	if (mem) {
    69be:	b122      	cbz	r2, 69ca <memq_dequeue+0x12>
		*mem = head->mem;
    69c0:	6858      	ldr	r0, [r3, #4]
    69c2:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    69c4:	681a      	ldr	r2, [r3, #0]
    69c6:	600a      	str	r2, [r1, #0]

	return link;
    69c8:	e001      	b.n	69ce <memq_dequeue+0x16>
	if (!link) {
    69ca:	2b00      	cmp	r3, #0
    69cc:	d1fa      	bne.n	69c4 <memq_dequeue+0xc>
}
    69ce:	4618      	mov	r0, r3
    69d0:	4770      	bx	lr
		return NULL;
    69d2:	2300      	movs	r3, #0
    69d4:	e7fb      	b.n	69ce <memq_dequeue+0x16>
	...

000069d8 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    69d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    69dc:	4f11      	ldr	r7, [pc, #68]	; (6a24 <mayfly_init+0x4c>)
    69de:	f8df 9048 	ldr.w	r9, [pc, #72]	; 6a28 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    69e2:	2604      	movs	r6, #4
	while (callee_id--) {
    69e4:	3e01      	subs	r6, #1
    69e6:	b2f6      	uxtb	r6, r6
    69e8:	2eff      	cmp	r6, #255	; 0xff
    69ea:	d019      	beq.n	6a20 <mayfly_init+0x48>
    69ec:	b233      	sxth	r3, r6
    69ee:	ea4f 0883 	mov.w	r8, r3, lsl #2
    69f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    69f6:	011d      	lsls	r5, r3, #4
    69f8:	2404      	movs	r4, #4
    69fa:	f04f 0a0c 	mov.w	sl, #12
    69fe:	e00a      	b.n	6a16 <mayfly_init+0x3e>
    6a00:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    6a04:	1d0a      	adds	r2, r1, #4
    6a06:	eb04 0008 	add.w	r0, r4, r8
    6a0a:	443a      	add	r2, r7
    6a0c:	4439      	add	r1, r7
    6a0e:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    6a12:	f7ff ffbf 	bl	6994 <memq_init>
		while (caller_id--) {
    6a16:	3c01      	subs	r4, #1
    6a18:	b2e4      	uxtb	r4, r4
    6a1a:	2cff      	cmp	r4, #255	; 0xff
    6a1c:	d1f0      	bne.n	6a00 <mayfly_init+0x28>
    6a1e:	e7e1      	b.n	69e4 <mayfly_init+0xc>
    6a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a24:	20000704 	.word	0x20000704
    6a28:	20000684 	.word	0x20000684

00006a2c <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    6a2c:	b4f0      	push	{r4, r5, r6, r7}
    6a2e:	4b12      	ldr	r3, [pc, #72]	; (6a78 <mayfly_enable+0x4c>)
    6a30:	4605      	mov	r5, r0
    6a32:	460f      	mov	r7, r1
    6a34:	260c      	movs	r6, #12
    6a36:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    6a38:	b172      	cbz	r2, 6a58 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    6a3a:	4361      	muls	r1, r4
    6a3c:	fb06 1400 	mla	r4, r6, r0, r1
    6a40:	4423      	add	r3, r4
    6a42:	7a59      	ldrb	r1, [r3, #9]
    6a44:	7a18      	ldrb	r0, [r3, #8]
    6a46:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    6a48:	bf04      	itt	eq
    6a4a:	3101      	addeq	r1, #1
    6a4c:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    6a4e:	4628      	mov	r0, r5
    6a50:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    6a52:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    6a54:	f00b bc14 	b.w	12280 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    6a58:	434c      	muls	r4, r1
    6a5a:	fb06 4400 	mla	r4, r6, r0, r4
    6a5e:	4423      	add	r3, r4
    6a60:	7a9c      	ldrb	r4, [r3, #10]
    6a62:	7ada      	ldrb	r2, [r3, #11]
    6a64:	42a2      	cmp	r2, r4
    6a66:	d104      	bne.n	6a72 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    6a68:	3201      	adds	r2, #1
    6a6a:	729a      	strb	r2, [r3, #10]
}
    6a6c:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    6a6e:	f00b bc67 	b.w	12340 <mayfly_pend>
}
    6a72:	bcf0      	pop	{r4, r5, r6, r7}
    6a74:	4770      	bx	lr
    6a76:	bf00      	nop
    6a78:	20000704 	.word	0x20000704

00006a7c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    6a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a7e:	4605      	mov	r5, r0
    6a80:	460e      	mov	r6, r1
    6a82:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    6a84:	b18a      	cbz	r2, 6aaa <mayfly_enqueue+0x2e>
    6a86:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    6a88:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    6a8a:	7820      	ldrb	r0, [r4, #0]
    6a8c:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    6a8e:	f010 0703 	ands.w	r7, r0, #3
    6a92:	d029      	beq.n	6ae8 <mayfly_enqueue+0x6c>
		if (chain) {
    6a94:	b303      	cbz	r3, 6ad8 <mayfly_enqueue+0x5c>
			if (state != 1) {
    6a96:	2f01      	cmp	r7, #1
    6a98:	d039      	beq.n	6b0e <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    6a9a:	3201      	adds	r2, #1
    6a9c:	b2d2      	uxtb	r2, r2
    6a9e:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    6aa0:	4631      	mov	r1, r6
    6aa2:	4628      	mov	r0, r5
    6aa4:	f00b fc4c 	bl	12340 <mayfly_pend>
    6aa8:	e01c      	b.n	6ae4 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6aaa:	f00b fc37 	bl	1231c <mayfly_prio_is_equal>
    6aae:	2800      	cmp	r0, #0
    6ab0:	d0e9      	beq.n	6a86 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    6ab2:	4631      	mov	r1, r6
    6ab4:	4628      	mov	r0, r5
    6ab6:	f00b fc0b 	bl	122d0 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6aba:	2800      	cmp	r0, #0
    6abc:	d0e3      	beq.n	6a86 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    6abe:	2330      	movs	r3, #48	; 0x30
    6ac0:	220c      	movs	r2, #12
    6ac2:	4373      	muls	r3, r6
    6ac4:	fb02 3305 	mla	r3, r2, r5, r3
    6ac8:	4a12      	ldr	r2, [pc, #72]	; (6b14 <mayfly_enqueue+0x98>)
    6aca:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    6acc:	7a93      	ldrb	r3, [r2, #10]
    6ace:	7ad2      	ldrb	r2, [r2, #11]
    6ad0:	1a9b      	subs	r3, r3, r2
    6ad2:	bf18      	it	ne
    6ad4:	2301      	movne	r3, #1
    6ad6:	e7d7      	b.n	6a88 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    6ad8:	3202      	adds	r2, #2
    6ada:	b2d2      	uxtb	r2, r2
    6adc:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    6ade:	68e3      	ldr	r3, [r4, #12]
    6ae0:	68a0      	ldr	r0, [r4, #8]
    6ae2:	4798      	blx	r3
		return 0;
    6ae4:	2000      	movs	r0, #0
    6ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    6ae8:	2b00      	cmp	r3, #0
    6aea:	d0f8      	beq.n	6ade <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    6aec:	3201      	adds	r2, #1
    6aee:	b2d2      	uxtb	r2, r2
    6af0:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    6af2:	2304      	movs	r3, #4
    6af4:	2230      	movs	r2, #48	; 0x30
    6af6:	fb12 3206 	smlabb	r2, r2, r6, r3
    6afa:	230c      	movs	r3, #12
    6afc:	fb13 2305 	smlabb	r3, r3, r5, r2
    6b00:	4a04      	ldr	r2, [pc, #16]	; (6b14 <mayfly_enqueue+0x98>)
    6b02:	6860      	ldr	r0, [r4, #4]
    6b04:	441a      	add	r2, r3
    6b06:	4621      	mov	r1, r4
    6b08:	f7ff ff47 	bl	699a <memq_enqueue>
    6b0c:	e7c8      	b.n	6aa0 <mayfly_enqueue+0x24>
			return 1;
    6b0e:	4638      	mov	r0, r7

	return 0;
}
    6b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b12:	bf00      	nop
    6b14:	20000704 	.word	0x20000704

00006b18 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    6b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b1c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6b20:	b089      	sub	sp, #36	; 0x24
    6b22:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    6b24:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    6b28:	4e43      	ldr	r6, [pc, #268]	; (6c38 <mayfly_run+0x120>)
    6b2a:	9304      	str	r3, [sp, #16]
{
    6b2c:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    6b2e:	2404      	movs	r4, #4
	u8_t disable = 0;
    6b30:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    6b34:	3c01      	subs	r4, #1
    6b36:	b2e4      	uxtb	r4, r4
    6b38:	2cff      	cmp	r4, #255	; 0xff
    6b3a:	d10b      	bne.n	6b54 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    6b3c:	9b01      	ldr	r3, [sp, #4]
    6b3e:	2b00      	cmp	r3, #0
    6b40:	d076      	beq.n	6c30 <mayfly_run+0x118>
    6b42:	f1b8 0f00 	cmp.w	r8, #0
    6b46:	d173      	bne.n	6c30 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    6b48:	4642      	mov	r2, r8
    6b4a:	4629      	mov	r1, r5
    6b4c:	4628      	mov	r0, r5
    6b4e:	f00b fb97 	bl	12280 <mayfly_enable_cb>
    6b52:	e06d      	b.n	6c30 <mayfly_run+0x118>
		struct mayfly *m = 0;
    6b54:	f10d 0b20 	add.w	fp, sp, #32
    6b58:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    6b5a:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    6b5c:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    6b60:	f04f 0930 	mov.w	r9, #48	; 0x30
    6b64:	fb07 f304 	mul.w	r3, r7, r4
    6b68:	fb09 3005 	mla	r0, r9, r5, r3
    6b6c:	1831      	adds	r1, r6, r0
    6b6e:	465a      	mov	r2, fp
    6b70:	6849      	ldr	r1, [r1, #4]
    6b72:	5830      	ldr	r0, [r6, r0]
    6b74:	9302      	str	r3, [sp, #8]
    6b76:	f7ff ff17 	bl	69a8 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    6b7a:	9b04      	ldr	r3, [sp, #16]
    6b7c:	fb17 3704 	smlabb	r7, r7, r4, r3
    6b80:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    6b82:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    6b84:	9303      	str	r3, [sp, #12]
		while (link) {
    6b86:	f1ba 0f00 	cmp.w	sl, #0
    6b8a:	d119      	bne.n	6bc0 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    6b8c:	2230      	movs	r2, #48	; 0x30
    6b8e:	230c      	movs	r3, #12
    6b90:	436a      	muls	r2, r5
    6b92:	fb03 2204 	mla	r2, r3, r4, r2
    6b96:	4432      	add	r2, r6
    6b98:	7a91      	ldrb	r1, [r2, #10]
    6b9a:	7ad0      	ldrb	r0, [r2, #11]
    6b9c:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    6b9e:	bf1e      	ittt	ne
    6ba0:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    6ba2:	2201      	movne	r2, #1
    6ba4:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    6ba6:	2230      	movs	r2, #48	; 0x30
    6ba8:	436a      	muls	r2, r5
    6baa:	fb03 2304 	mla	r3, r3, r4, r2
    6bae:	4433      	add	r3, r6
    6bb0:	7a1a      	ldrb	r2, [r3, #8]
    6bb2:	7a59      	ldrb	r1, [r3, #9]
    6bb4:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    6bb6:	bf1c      	itt	ne
    6bb8:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    6bba:	f04f 0801 	movne.w	r8, #1
    6bbe:	e7b9      	b.n	6b34 <mayfly_run+0x1c>
			req = m->_req;
    6bc0:	9b07      	ldr	r3, [sp, #28]
    6bc2:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    6bc4:	785a      	ldrb	r2, [r3, #1]
    6bc6:	1abf      	subs	r7, r7, r2
    6bc8:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    6bcc:	2f01      	cmp	r7, #1
    6bce:	d104      	bne.n	6bda <mayfly_run+0xc2>
				m->_ack--;
    6bd0:	3a01      	subs	r2, #1
    6bd2:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    6bd4:	6898      	ldr	r0, [r3, #8]
    6bd6:	68da      	ldr	r2, [r3, #12]
    6bd8:	4790      	blx	r2
			req = m->_req;
    6bda:	9a07      	ldr	r2, [sp, #28]
    6bdc:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    6bde:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    6be0:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    6be2:	1a9a      	subs	r2, r3, r2
    6be4:	f002 0203 	and.w	r2, r2, #3
    6be8:	2a01      	cmp	r2, #1
    6bea:	9305      	str	r3, [sp, #20]
    6bec:	d00d      	beq.n	6c0a <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    6bee:	9b02      	ldr	r3, [sp, #8]
    6bf0:	9903      	ldr	r1, [sp, #12]
    6bf2:	fb09 3005 	mla	r0, r9, r5, r3
    6bf6:	4430      	add	r0, r6
    6bf8:	2200      	movs	r2, #0
    6bfa:	6840      	ldr	r0, [r0, #4]
    6bfc:	f7ff fedc 	bl	69b8 <memq_dequeue>
				m->_link = link;
    6c00:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    6c02:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    6c04:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    6c08:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    6c0a:	9b02      	ldr	r3, [sp, #8]
    6c0c:	fb09 3305 	mla	r3, r9, r5, r3
    6c10:	18f1      	adds	r1, r6, r3
    6c12:	465a      	mov	r2, fp
    6c14:	6849      	ldr	r1, [r1, #4]
    6c16:	58f0      	ldr	r0, [r6, r3]
    6c18:	f7ff fec6 	bl	69a8 <memq_peek>
			if (state == 1) {
    6c1c:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    6c1e:	4682      	mov	sl, r0
			if (state == 1) {
    6c20:	d1b1      	bne.n	6b86 <mayfly_run+0x6e>
				if (caller_id || link) {
    6c22:	b90c      	cbnz	r4, 6c28 <mayfly_run+0x110>
    6c24:	2800      	cmp	r0, #0
    6c26:	d0b1      	beq.n	6b8c <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    6c28:	4629      	mov	r1, r5
    6c2a:	4628      	mov	r0, r5
    6c2c:	f00b fb88 	bl	12340 <mayfly_pend>
	}
}
    6c30:	b009      	add	sp, #36	; 0x24
    6c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c36:	bf00      	nop
    6c38:	20000704 	.word	0x20000704

00006c3c <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    6c3c:	b510      	push	{r4, lr}
    6c3e:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    6c40:	2000      	movs	r0, #0

	while (octets_len--) {
    6c42:	3901      	subs	r1, #1
    6c44:	b2c9      	uxtb	r1, r1
    6c46:	29ff      	cmp	r1, #255	; 0xff
    6c48:	d100      	bne.n	6c4c <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    6c4a:	bd10      	pop	{r4, pc}
		bite = *octets;
    6c4c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    6c50:	2b00      	cmp	r3, #0
    6c52:	d0f6      	beq.n	6c42 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    6c54:	1e5c      	subs	r4, r3, #1
			one_count++;
    6c56:	3001      	adds	r0, #1
			bite &= (bite - 1);
    6c58:	4023      	ands	r3, r4
			one_count++;
    6c5a:	b2c0      	uxtb	r0, r0
    6c5c:	e7f8      	b.n	6c50 <util_ones_count_get+0x14>

00006c5e <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    6c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    6c60:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    6c62:	6805      	ldr	r5, [r0, #0]
	current = previous;
    6c64:	461a      	mov	r2, r3
	total = 0;
    6c66:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    6c68:	2aff      	cmp	r2, #255	; 0xff
    6c6a:	d101      	bne.n	6c70 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    6c6c:	2000      	movs	r0, #0
    6c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    6c70:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    6c74:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    6c76:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    6c7a:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    6c7e:	d004      	beq.n	6c8a <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    6c80:	68b3      	ldr	r3, [r6, #8]
    6c82:	441c      	add	r4, r3
		current = ticker_current->next;
    6c84:	4613      	mov	r3, r2
    6c86:	463a      	mov	r2, r7
    6c88:	e7ee      	b.n	6c68 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    6c8a:	4293      	cmp	r3, r2
    6c8c:	d100      	bne.n	6c90 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    6c8e:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    6c90:	b21b      	sxth	r3, r3
    6c92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6c96:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    6c98:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    6c9a:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    6c9e:	7833      	ldrb	r3, [r6, #0]
    6ca0:	2bff      	cmp	r3, #255	; 0xff
    6ca2:	d006      	beq.n	6cb2 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    6ca4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6ca8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    6cac:	689a      	ldr	r2, [r3, #8]
    6cae:	4402      	add	r2, r0
    6cb0:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    6cb2:	4420      	add	r0, r4
    6cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006cb6 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    6cb6:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    6cb8:	1a55      	subs	r5, r2, r1
    6cba:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    6cbe:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    6cc0:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    6cc2:	d109      	bne.n	6cd8 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6cc4:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    6cc8:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    6cca:	42a2      	cmp	r2, r4
    6ccc:	d90e      	bls.n	6cec <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    6cce:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    6cd0:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    6cd2:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    6cd4:	6144      	str	r4, [r0, #20]
    6cd6:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6cd8:	1a8a      	subs	r2, r1, r2
    6cda:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    6cde:	4293      	cmp	r3, r2
    6ce0:	d901      	bls.n	6ce6 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    6ce2:	1a9a      	subs	r2, r3, r2
    6ce4:	e7f1      	b.n	6cca <ticks_to_expire_prep+0x14>
    6ce6:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    6ce8:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    6cea:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    6cec:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    6cee:	2200      	movs	r2, #0
    6cf0:	e7ef      	b.n	6cd2 <ticks_to_expire_prep+0x1c>

00006cf2 <ticker_job_op_cb>:
{
    6cf2:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    6cf4:	2200      	movs	r2, #0
    6cf6:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    6cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    6cfa:	6259      	str	r1, [r3, #36]	; 0x24
{
    6cfc:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    6cfe:	b10a      	cbz	r2, 6d04 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    6d00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    6d02:	4710      	bx	r2
    6d04:	4770      	bx	lr

00006d06 <ticker_worker>:
{
    6d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    6d0a:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    6d0c:	2301      	movs	r3, #1
{
    6d0e:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    6d10:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    6d12:	2d00      	cmp	r5, #0
    6d14:	d14c      	bne.n	6db0 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    6d16:	7f43      	ldrb	r3, [r0, #29]
    6d18:	2bff      	cmp	r3, #255	; 0xff
    6d1a:	d102      	bne.n	6d22 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    6d1c:	77c5      	strb	r5, [r0, #31]
		return;
    6d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    6d22:	f00a fe17 	bl	11954 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6d26:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    6d28:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    6d2a:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6d2e:	1bc7      	subs	r7, r0, r7
    6d30:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    6d34:	2eff      	cmp	r6, #255	; 0xff
    6d36:	d006      	beq.n	6d46 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    6d38:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    6d3c:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    6d40:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    6d42:	429f      	cmp	r7, r3
    6d44:	d218      	bcs.n	6d78 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    6d46:	7aa2      	ldrb	r2, [r4, #10]
    6d48:	7ae3      	ldrb	r3, [r4, #11]
    6d4a:	4293      	cmp	r3, r2
    6d4c:	d105      	bne.n	6d5a <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    6d4e:	3301      	adds	r3, #1
    6d50:	b2db      	uxtb	r3, r3
			last = 0;
    6d52:	2b02      	cmp	r3, #2
    6d54:	bf08      	it	eq
    6d56:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    6d58:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    6d5a:	7ae3      	ldrb	r3, [r4, #11]
    6d5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    6d60:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    6d62:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    6d64:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    6d66:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    6d68:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    6d6a:	46ac      	mov	ip, r5
    6d6c:	4623      	mov	r3, r4
    6d6e:	2104      	movs	r1, #4
    6d70:	2003      	movs	r0, #3
}
    6d72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    6d76:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    6d78:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    6d7a:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    6d7c:	788a      	ldrb	r2, [r1, #2]
    6d7e:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    6d80:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    6d84:	1a9b      	subs	r3, r3, r2
    6d86:	b2db      	uxtb	r3, r3
    6d88:	2b01      	cmp	r3, #1
    6d8a:	d1d3      	bne.n	6d34 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    6d8c:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    6d90:	3a01      	subs	r2, #1
    6d92:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    6d94:	f1b9 0f00 	cmp.w	r9, #0
    6d98:	d0cc      	beq.n	6d34 <ticker_worker+0x2e>
					   ticks_expired -
    6d9a:	6948      	ldr	r0, [r1, #20]
    6d9c:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    6d9e:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    6da0:	1a28      	subs	r0, r5, r0
    6da2:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    6da4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6da8:	690b      	ldr	r3, [r1, #16]
    6daa:	6a49      	ldr	r1, [r1, #36]	; 0x24
    6dac:	47c8      	blx	r9
    6dae:	e7c1      	b.n	6d34 <ticker_worker+0x2e>
    6db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006db4 <ticker_job>:
{
    6db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    6db8:	7fc2      	ldrb	r2, [r0, #31]
{
    6dba:	b095      	sub	sp, #84	; 0x54
    6dbc:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    6dbe:	2a00      	cmp	r2, #0
    6dc0:	f040 83be 	bne.w	7540 <ticker_job+0x78c>
	ticks_previous = instance->ticks_current;
    6dc4:	6943      	ldr	r3, [r0, #20]
    6dc6:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    6dc8:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    6dca:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    6dcc:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    6dce:	7ac0      	ldrb	r0, [r0, #11]
    6dd0:	4298      	cmp	r0, r3
    6dd2:	f000 808f 	beq.w	6ef4 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    6dd6:	440b      	add	r3, r1
    6dd8:	b2db      	uxtb	r3, r3
			first = 0;
    6dda:	2b02      	cmp	r3, #2
    6ddc:	bf08      	it	eq
    6dde:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    6de0:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    6de4:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    6de8:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    6dea:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    6dee:	9b07      	ldr	r3, [sp, #28]
    6df0:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    6df2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6df6:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    6dfa:	f89b 301d 	ldrb.w	r3, [fp, #29]
    6dfe:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    6e00:	f8db 3000 	ldr.w	r3, [fp]
    6e04:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    6e06:	f8db 3004 	ldr.w	r3, [fp, #4]
    6e0a:	930d      	str	r3, [sp, #52]	; 0x34
    6e0c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    6e10:	3b01      	subs	r3, #1
    6e12:	b2db      	uxtb	r3, r3
    6e14:	9304      	str	r3, [sp, #16]
	pending = 0;
    6e16:	2300      	movs	r3, #0
    6e18:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    6e1a:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    6e1e:	9b04      	ldr	r3, [sp, #16]
    6e20:	2bff      	cmp	r3, #255	; 0xff
    6e22:	d16a      	bne.n	6efa <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    6e24:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    6e28:	9a05      	ldr	r2, [sp, #20]
    6e2a:	1a9b      	subs	r3, r3, r2
    6e2c:	bf18      	it	ne
    6e2e:	2301      	movne	r3, #1
    6e30:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    6e32:	9b03      	ldr	r3, [sp, #12]
    6e34:	b1e3      	cbz	r3, 6e70 <ticker_job+0xbc>
	node = &instance->node[0];
    6e36:	f8db 3000 	ldr.w	r3, [fp]
    6e3a:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    6e3c:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    6e40:	f89b 601d 	ldrb.w	r6, [fp, #29]
    6e44:	2eff      	cmp	r6, #255	; 0xff
    6e46:	d00c      	beq.n	6e62 <ticker_job+0xae>
		ticker = &node[id_expired];
    6e48:	b237      	sxth	r7, r6
    6e4a:	9b06      	ldr	r3, [sp, #24]
    6e4c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    6e50:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    6e54:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    6e56:	4545      	cmp	r5, r8
    6e58:	f240 8136 	bls.w	70c8 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    6e5c:	eba5 0508 	sub.w	r5, r5, r8
    6e60:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    6e62:	9b04      	ldr	r3, [sp, #16]
    6e64:	9a03      	ldr	r2, [sp, #12]
    6e66:	9905      	ldr	r1, [sp, #20]
    6e68:	42b1      	cmp	r1, r6
    6e6a:	bf18      	it	ne
    6e6c:	4613      	movne	r3, r2
    6e6e:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    6e70:	f8db 3000 	ldr.w	r3, [fp]
    6e74:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    6e76:	f8db 3004 	ldr.w	r3, [fp, #4]
    6e7a:	9312      	str	r3, [sp, #72]	; 0x48
    6e7c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    6e80:	3b01      	subs	r3, #1
    6e82:	b2db      	uxtb	r3, r3
    6e84:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    6e86:	9b03      	ldr	r3, [sp, #12]
    6e88:	2bff      	cmp	r3, #255	; 0xff
    6e8a:	f040 8170 	bne.w	716e <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    6e8e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    6e92:	9a05      	ldr	r2, [sp, #20]
    6e94:	4293      	cmp	r3, r2
	if (!pending) {
    6e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    6e98:	f040 8349 	bne.w	752e <ticker_job+0x77a>
	if (!pending) {
    6e9c:	b95b      	cbnz	r3, 6eb6 <ticker_job+0x102>
    6e9e:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    6ea2:	f8db 3004 	ldr.w	r3, [fp, #4]
    6ea6:	9303      	str	r3, [sp, #12]
    6ea8:	3c01      	subs	r4, #1
    6eaa:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    6eac:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    6eb0:	2cff      	cmp	r4, #255	; 0xff
    6eb2:	f040 82a0 	bne.w	73f6 <ticker_job+0x642>
	instance->job_guard = 0;
    6eb6:	2300      	movs	r3, #0
    6eb8:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    6ebc:	9b04      	ldr	r3, [sp, #16]
    6ebe:	b14b      	cbz	r3, 6ed4 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    6ec0:	f89b 301d 	ldrb.w	r3, [fp, #29]
    6ec4:	2bff      	cmp	r3, #255	; 0xff
    6ec6:	f040 82e9 	bne.w	749c <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    6eca:	f00a fd15 	bl	118f8 <cntr_stop>
    6ece:	b908      	cbnz	r0, 6ed4 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    6ed0:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    6ed4:	f89b 301f 	ldrb.w	r3, [fp, #31]
    6ed8:	2b00      	cmp	r3, #0
    6eda:	f000 8331 	beq.w	7540 <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    6ede:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    6ee2:	465b      	mov	r3, fp
    6ee4:	2201      	movs	r2, #1
    6ee6:	2103      	movs	r1, #3
    6ee8:	2004      	movs	r0, #4
    6eea:	46a4      	mov	ip, r4
}
    6eec:	b015      	add	sp, #84	; 0x54
    6eee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    6ef2:	4760      	bx	ip
		flag_elapsed = 0;
    6ef4:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    6ef6:	4690      	mov	r8, r2
    6ef8:	e77f      	b.n	6dfa <ticker_job+0x46>
		user = &users[count_user];
    6efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6efc:	9a04      	ldr	r2, [sp, #16]
    6efe:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    6f02:	687b      	ldr	r3, [r7, #4]
    6f04:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    6f06:	78f9      	ldrb	r1, [r7, #3]
    6f08:	78be      	ldrb	r6, [r7, #2]
    6f0a:	428e      	cmp	r6, r1
    6f0c:	f000 80d7 	beq.w	70be <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    6f10:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    6f12:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    6f14:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    6f18:	0112      	lsls	r2, r2, #4
    6f1a:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    6f1c:	1c73      	adds	r3, r6, #1
    6f1e:	b2db      	uxtb	r3, r3
				middle = 0;
    6f20:	4298      	cmp	r0, r3
    6f22:	bf08      	it	eq
    6f24:	2300      	moveq	r3, #0
			user->middle = middle;
    6f26:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    6f28:	9b08      	ldr	r3, [sp, #32]
    6f2a:	5c9a      	ldrb	r2, [r3, r2]
    6f2c:	2a03      	cmp	r2, #3
    6f2e:	d9eb      	bls.n	6f08 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    6f30:	2a05      	cmp	r2, #5
    6f32:	d817      	bhi.n	6f64 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    6f34:	7869      	ldrb	r1, [r5, #1]
    6f36:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    6f3a:	930c      	str	r3, [sp, #48]	; 0x30
    6f3c:	980c      	ldr	r0, [sp, #48]	; 0x30
    6f3e:	9b06      	ldr	r3, [sp, #24]
    6f40:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    6f44:	7863      	ldrb	r3, [r4, #1]
    6f46:	78a0      	ldrb	r0, [r4, #2]
    6f48:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    6f4a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    6f4e:	d009      	beq.n	6f64 <ticker_job+0x1b0>
			    (state == 0) ||
    6f50:	2a04      	cmp	r2, #4
    6f52:	d10c      	bne.n	6f6e <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    6f54:	686a      	ldr	r2, [r5, #4]
    6f56:	b952      	cbnz	r2, 6f6e <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    6f58:	68aa      	ldr	r2, [r5, #8]
    6f5a:	b942      	cbnz	r2, 6f6e <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    6f5c:	68ea      	ldr	r2, [r5, #12]
    6f5e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    6f62:	d104      	bne.n	6f6e <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    6f64:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    6f66:	4628      	mov	r0, r5
    6f68:	f7ff fec3 	bl	6cf2 <ticker_job_op_cb>
    6f6c:	e7cb      	b.n	6f06 <ticker_job+0x152>
			if (state == 1) {
    6f6e:	2b01      	cmp	r3, #1
    6f70:	f040 809b 	bne.w	70aa <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    6f74:	4658      	mov	r0, fp
    6f76:	f7ff fe72 	bl	6c5e <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    6f7a:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    6f7c:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    6f7e:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    6f80:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    6f82:	f040 8084 	bne.w	708e <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    6f86:	f8db 3014 	ldr.w	r3, [fp, #20]
    6f8a:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    6f8c:	f00a fce2 	bl	11954 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    6f92:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6f94:	1ac3      	subs	r3, r0, r3
    6f96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    6f9a:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    6f9c:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6f9e:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    6fa0:	bf9e      	ittt	ls
    6fa2:	6962      	ldrls	r2, [r4, #20]
    6fa4:	1b92      	subls	r2, r2, r6
    6fa6:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    6fa8:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    6faa:	bf96      	itet	ls
    6fac:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    6fae:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    6fb0:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    6fb2:	b18a      	cbz	r2, 6fd8 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    6fb4:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    6fb6:	b179      	cbz	r1, 6fd8 <ticker_job+0x224>
		user_op->params.update.lazy--;
    6fb8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    6fbc:	fa1f fe8e 	uxth.w	lr, lr
    6fc0:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    6fc4:	429a      	cmp	r2, r3
    6fc6:	d32b      	bcc.n	7020 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    6fc8:	f8df 9324 	ldr.w	r9, [pc, #804]	; 72f0 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    6fcc:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    6fd0:	45e6      	cmp	lr, ip
    6fd2:	d847      	bhi.n	7064 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    6fd4:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    6fd8:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    6fda:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    6fdc:	4413      	add	r3, r2
    6fde:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    6fe0:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    6fe2:	6963      	ldr	r3, [r4, #20]
    6fe4:	4413      	add	r3, r2
    6fe6:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    6fe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6fea:	4620      	mov	r0, r4
    6fec:	f7ff fe63 	bl	6cb6 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    6ff0:	69a2      	ldr	r2, [r4, #24]
    6ff2:	892b      	ldrh	r3, [r5, #8]
    6ff4:	4413      	add	r3, r2
    6ff6:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    6ff8:	896a      	ldrh	r2, [r5, #10]
    6ffa:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    6ffc:	bf8c      	ite	hi
    6ffe:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    7000:	2300      	movls	r3, #0
    7002:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    7004:	7bab      	ldrb	r3, [r5, #14]
    7006:	b103      	cbz	r3, 700a <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    7008:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    700a:	9b06      	ldr	r3, [sp, #24]
    700c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    700e:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    7012:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    7014:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    7018:	3301      	adds	r3, #1
    701a:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    701c:	2100      	movs	r1, #0
    701e:	e7a2      	b.n	6f66 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    7020:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7024:	45e6      	cmp	lr, ip
    7026:	d2cf      	bcs.n	6fc8 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    7028:	6a61      	ldr	r1, [r4, #36]	; 0x24
    702a:	4eaf      	ldr	r6, [pc, #700]	; (72e8 <ticker_job+0x534>)
    702c:	48af      	ldr	r0, [pc, #700]	; (72ec <ticker_job+0x538>)
    702e:	198e      	adds	r6, r1, r6
    7030:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    7032:	bf81      	itttt	hi
    7034:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    7038:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    703c:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    7040:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    7042:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7044:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    7046:	bf8c      	ite	hi
    7048:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    704c:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    7050:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    7052:	4491      	add	r9, r2
			ticker->lazy_current--;
    7054:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    7058:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    705a:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    705e:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7062:	e7af      	b.n	6fc4 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    7064:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7066:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    7068:	48a0      	ldr	r0, [pc, #640]	; (72ec <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    706a:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    706c:	499e      	ldr	r1, [pc, #632]	; (72e8 <ticker_job+0x534>)
    706e:	1871      	adds	r1, r6, r1
    7070:	4281      	cmp	r1, r0
	return 0;
    7072:	bf8e      	itee	hi
    7074:	2100      	movhi	r1, #0
		return 1;
    7076:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    7078:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    707a:	4411      	add	r1, r2
			ticker->lazy_current++;
    707c:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    7080:	bf8c      	ite	hi
    7082:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7084:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    7086:	440b      	add	r3, r1
			ticker->lazy_current++;
    7088:	f8a4 c01e 	strh.w	ip, [r4, #30]
    708c:	e79e      	b.n	6fcc <ticker_job+0x218>
		ticker->req = ticker->ack;
    708e:	78a3      	ldrb	r3, [r4, #2]
    7090:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    7092:	786b      	ldrb	r3, [r5, #1]
    7094:	f89b 201c 	ldrb.w	r2, [fp, #28]
    7098:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    709a:	bf01      	itttt	eq
    709c:	23ff      	moveq	r3, #255	; 0xff
    709e:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    70a2:	2300      	moveq	r3, #0
    70a4:	f8cb 3018 	streq.w	r3, [fp, #24]
    70a8:	e7b8      	b.n	701c <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    70aa:	2104      	movs	r1, #4
    70ac:	465b      	mov	r3, fp
    70ae:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    70b2:	2201      	movs	r2, #1
    70b4:	4608      	mov	r0, r1
    70b6:	47a0      	blx	r4
				pending = 1;
    70b8:	2301      	movs	r3, #1
				user->middle = prev;
    70ba:	70be      	strb	r6, [r7, #2]
				pending = 1;
    70bc:	9309      	str	r3, [sp, #36]	; 0x24
    70be:	9b04      	ldr	r3, [sp, #16]
    70c0:	3b01      	subs	r3, #1
    70c2:	b2db      	uxtb	r3, r3
    70c4:	9304      	str	r3, [sp, #16]
    70c6:	e6aa      	b.n	6e1e <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    70c8:	f8db 3018 	ldr.w	r3, [fp, #24]
    70cc:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    70ce:	bf29      	itett	cs
    70d0:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    70d2:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    70d4:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    70d8:	2300      	movcs	r3, #0
    70da:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    70de:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    70e0:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    70e2:	b11b      	cbz	r3, 70ec <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    70e4:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    70e8:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    70ec:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    70ee:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    70f0:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    70f2:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    70f6:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    70fa:	f8d4 e004 	ldr.w	lr, [r4, #4]
    70fe:	f1be 0f00 	cmp.w	lr, #0
    7102:	d030      	beq.n	7166 <ticker_job+0x3b2>
    7104:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    7106:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 72ec <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    710a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    710c:	6a21      	ldr	r1, [r4, #32]
    710e:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7110:	4975      	ldr	r1, [pc, #468]	; (72e8 <ticker_job+0x534>)
    7112:	1859      	adds	r1, r3, r1
    7114:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    7116:	bf9f      	itttt	ls
    7118:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    711c:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    7120:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    7124:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    7126:	bf92      	itee	ls
    7128:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    712a:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    712c:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    712e:	4473      	add	r3, lr
			while (count--) {
    7130:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    7134:	441a      	add	r2, r3
			while (count--) {
    7136:	d2e8      	bcs.n	710a <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7138:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    713a:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    713c:	f8db 1014 	ldr.w	r1, [fp, #20]
    7140:	eb03 0209 	add.w	r2, r3, r9
    7144:	4620      	mov	r0, r4
    7146:	f7ff fdb6 	bl	6cb6 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    714a:	8ba3      	ldrh	r3, [r4, #28]
    714c:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    714e:	2300      	movs	r3, #0
    7150:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    7152:	9b06      	ldr	r3, [sp, #24]
    7154:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    7158:	7863      	ldrb	r3, [r4, #1]
    715a:	3301      	adds	r3, #1
    715c:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    715e:	eba8 0805 	sub.w	r8, r8, r5
    7162:	46b2      	mov	sl, r6
    7164:	e66c      	b.n	6e40 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    7166:	78a3      	ldrb	r3, [r4, #2]
    7168:	7063      	strb	r3, [r4, #1]
    716a:	4656      	mov	r6, sl
    716c:	e7f7      	b.n	715e <ticker_job+0x3aa>
		user = &users[count_user];
    716e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7170:	9a03      	ldr	r2, [sp, #12]
    7172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7176:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    7178:	685b      	ldr	r3, [r3, #4]
    717a:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    717c:	9b06      	ldr	r3, [sp, #24]
    717e:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    7182:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    7186:	f000 808e 	beq.w	72a6 <ticker_job+0x4f2>
				ticker = &node[id_insert];
    718a:	fa0f f38a 	sxth.w	r3, sl
    718e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    7194:	46d0      	mov	r8, sl
    7196:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    719a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    719e:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    71a0:	f8db 3000 	ldr.w	r3, [fp]
    71a4:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    71a6:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    71a8:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    71aa:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    71ac:	8be3      	ldrh	r3, [r4, #30]
    71ae:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    71b0:	bf86      	itte	hi
    71b2:	1a9b      	subhi	r3, r3, r2
    71b4:	b29b      	uxthhi	r3, r3
		skip = 0;
    71b6:	2300      	movls	r3, #0
    71b8:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    71ba:	fa0f f388 	sxth.w	r3, r8
    71be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    71c2:	00db      	lsls	r3, r3, #3
    71c4:	9313      	str	r3, [sp, #76]	; 0x4c
    71c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    71c8:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    71cc:	f8db 0018 	ldr.w	r0, [fp, #24]
    71d0:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    71d2:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    71d6:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    71d8:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    71dc:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    71e0:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    71e2:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    71e4:	2bff      	cmp	r3, #255	; 0xff
    71e6:	d007      	beq.n	71f8 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    71e8:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    71ec:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    71f0:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    71f2:	4281      	cmp	r1, r0
    71f4:	f200 80a9 	bhi.w	734a <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    71f8:	f8de 0018 	ldr.w	r0, [lr, #24]
    71fc:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    71fe:	eb01 0c00 	add.w	ip, r1, r0
    7202:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    7204:	2eff      	cmp	r6, #255	; 0xff
    7206:	f040 80ae 	bne.w	7366 <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    720a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    720c:	b130      	cbz	r0, 721c <ticker_job+0x468>
    720e:	9807      	ldr	r0, [sp, #28]
    7210:	4281      	cmp	r1, r0
    7212:	f0c0 80bf 	bcc.w	7394 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    7216:	2eff      	cmp	r6, #255	; 0xff
    7218:	f040 818e 	bne.w	7538 <ticker_job+0x784>
		if (previous == current) {
    721c:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    721e:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    7222:	4283      	cmp	r3, r0
			node[previous].next = id;
    7224:	bf18      	it	ne
    7226:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    722a:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    722e:	bf16      	itet	ne
    7230:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    7234:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    7238:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    723c:	2bff      	cmp	r3, #255	; 0xff
    723e:	d006      	beq.n	724e <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    7240:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7244:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7248:	689a      	ldr	r2, [r3, #8]
    724a:	1a51      	subs	r1, r2, r1
    724c:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    724e:	78a3      	ldrb	r3, [r4, #2]
    7250:	3301      	adds	r3, #1
    7252:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    7254:	2100      	movs	r1, #0
			if (user_op) {
    7256:	2d00      	cmp	r5, #0
    7258:	d093      	beq.n	7182 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    725a:	4628      	mov	r0, r5
    725c:	f7ff fd49 	bl	6cf2 <ticker_job_op_cb>
    7260:	e78f      	b.n	7182 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    7262:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    7266:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7268:	011b      	lsls	r3, r3, #4
    726a:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    726c:	f109 0201 	add.w	r2, r9, #1
    7270:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    7274:	9a06      	ldr	r2, [sp, #24]
    7276:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    7278:	454a      	cmp	r2, r9
    727a:	bf08      	it	eq
    727c:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    7280:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7282:	5cd3      	ldrb	r3, [r2, r3]
    7284:	2b03      	cmp	r3, #3
    7286:	d10e      	bne.n	72a6 <ticker_job+0x4f2>
				id_insert = user_op->id;
    7288:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    728c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    728e:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    7292:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    7296:	7862      	ldrb	r2, [r4, #1]
    7298:	78a3      	ldrb	r3, [r4, #2]
    729a:	429a      	cmp	r2, r3
    729c:	d009      	beq.n	72b2 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    729e:	2101      	movs	r1, #1
    72a0:	4628      	mov	r0, r5
    72a2:	f7ff fd26 	bl	6cf2 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    72a6:	9b06      	ldr	r3, [sp, #24]
    72a8:	789b      	ldrb	r3, [r3, #2]
    72aa:	454b      	cmp	r3, r9
    72ac:	d1d9      	bne.n	7262 <ticker_job+0x4ae>
    72ae:	9b03      	ldr	r3, [sp, #12]
    72b0:	e5e6      	b.n	6e80 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    72b2:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    72b4:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    72b8:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    72ba:	692b      	ldr	r3, [r5, #16]
    72bc:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    72be:	8aab      	ldrh	r3, [r5, #20]
    72c0:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    72c2:	69ab      	ldr	r3, [r5, #24]
    72c4:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    72c6:	69eb      	ldr	r3, [r5, #28]
    72c8:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    72ca:	6a2b      	ldr	r3, [r5, #32]
    72cc:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    72ce:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    72d0:	68ab      	ldr	r3, [r5, #8]
    72d2:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    72d4:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    72d6:	686a      	ldr	r2, [r5, #4]
    72d8:	4620      	mov	r0, r4
    72da:	f7ff fcec 	bl	6cb6 <ticks_to_expire_prep>
	ticker->force = 1;
    72de:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    72e0:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    72e2:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    72e4:	70e3      	strb	r3, [r4, #3]
    72e6:	e75b      	b.n	71a0 <ticker_job+0x3ec>
    72e8:	ff172b5a 	.word	0xff172b5a
    72ec:	7f172b59 	.word	0x7f172b59
    72f0:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    72f4:	6860      	ldr	r0, [r4, #4]
    72f6:	2800      	cmp	r0, #0
    72f8:	d07b      	beq.n	73f2 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    72fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
    72fc:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    72fe:	4b92      	ldr	r3, [pc, #584]	; (7548 <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    7300:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7302:	4992      	ldr	r1, [pc, #584]	; (754c <ticker_job+0x798>)
    7304:	18d3      	adds	r3, r2, r3
    7306:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    7308:	bf9c      	itt	ls
    730a:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    730e:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7312:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    7314:	bf8b      	itete	hi
    7316:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7318:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    731c:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    731e:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7320:	4403      	add	r3, r0
		return 1;
    7322:	bf98      	it	ls
    7324:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7326:	4413      	add	r3, r2
			ticker->lazy_current++;
    7328:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    732a:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    732c:	3201      	adds	r2, #1
    732e:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    7330:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    7332:	4293      	cmp	r3, r2
    7334:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    7338:	bf89      	itett	hi
    733a:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    733c:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    733e:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    7340:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    7342:	bf9c      	itt	ls
    7344:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    7346:	60a1      	strls	r1, [r4, #8]
    7348:	e73d      	b.n	71c6 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    734a:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    734c:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    734e:	b946      	cbnz	r6, 7362 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    7350:	9f07      	ldr	r7, [sp, #28]
    7352:	42b8      	cmp	r0, r7
    7354:	d200      	bcs.n	7358 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    7356:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    7358:	930b      	str	r3, [sp, #44]	; 0x2c
    735a:	9607      	str	r6, [sp, #28]
    735c:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    7360:	e740      	b.n	71e4 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    7362:	9308      	str	r3, [sp, #32]
    7364:	e7f8      	b.n	7358 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    7366:	b230      	sxth	r0, r6
    7368:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    736c:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    7370:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    7372:	68bf      	ldr	r7, [r7, #8]
    7374:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    7376:	4567      	cmp	r7, ip
    7378:	d20a      	bcs.n	7390 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    737a:	9f10      	ldr	r7, [sp, #64]	; 0x40
    737c:	69bf      	ldr	r7, [r7, #24]
    737e:	2f00      	cmp	r7, #0
    7380:	f47f af43 	bne.w	720a <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    7384:	9e11      	ldr	r6, [sp, #68]	; 0x44
    7386:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    738a:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    738e:	e739      	b.n	7204 <ticker_job+0x450>
			return TICKER_NULL;
    7390:	26ff      	movs	r6, #255	; 0xff
    7392:	e73a      	b.n	720a <ticker_job+0x456>
	while (id_insert !=
    7394:	9b08      	ldr	r3, [sp, #32]
    7396:	4598      	cmp	r8, r3
    7398:	f43f af59 	beq.w	724e <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    739c:	9b08      	ldr	r3, [sp, #32]
    739e:	2bff      	cmp	r3, #255	; 0xff
    73a0:	d0a8      	beq.n	72f4 <ticker_job+0x540>
    73a2:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    73a4:	b233      	sxth	r3, r6
    73a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    73aa:	9307      	str	r3, [sp, #28]
    73ac:	9a07      	ldr	r2, [sp, #28]
    73ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    73b0:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    73b4:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    73b6:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    73b8:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    73ba:	bf88      	it	hi
    73bc:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    73be:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    73c0:	bf8c      	ite	hi
    73c2:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    73c4:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    73c6:	2a00      	cmp	r2, #0
    73c8:	d094      	beq.n	72f4 <ticker_job+0x540>
    73ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    73cc:	4293      	cmp	r3, r2
    73ce:	d891      	bhi.n	72f4 <ticker_job+0x540>
			    skip_collide <= skip &&
    73d0:	78fa      	ldrb	r2, [r7, #3]
    73d2:	78e3      	ldrb	r3, [r4, #3]
    73d4:	429a      	cmp	r2, r3
    73d6:	d28d      	bcs.n	72f4 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    73d8:	4631      	mov	r1, r6
    73da:	4658      	mov	r0, fp
    73dc:	f7ff fc3f 	bl	6c5e <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    73e0:	78bb      	ldrb	r3, [r7, #2]
    73e2:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    73e4:	9a07      	ldr	r2, [sp, #28]
    73e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    73e8:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    73ea:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    73ee:	46b2      	mov	sl, r6
    73f0:	e6e9      	b.n	71c6 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    73f2:	2101      	movs	r1, #1
    73f4:	e72f      	b.n	7256 <ticker_job+0x4a2>
		user = &users[count_user];
    73f6:	9b03      	ldr	r3, [sp, #12]
    73f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    73fc:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    73fe:	786b      	ldrb	r3, [r5, #1]
    7400:	78ea      	ldrb	r2, [r5, #3]
    7402:	429a      	cmp	r2, r3
    7404:	d102      	bne.n	740c <ticker_job+0x658>
    7406:	3c01      	subs	r4, #1
    7408:	b2e4      	uxtb	r4, r4
    740a:	e551      	b.n	6eb0 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    740c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7410:	011b      	lsls	r3, r3, #4
    7412:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    7414:	5cf3      	ldrb	r3, [r6, r3]
    7416:	2b01      	cmp	r3, #1
    7418:	d025      	beq.n	7466 <ticker_job+0x6b2>
    741a:	2b02      	cmp	r3, #2
    741c:	d12a      	bne.n	7474 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    741e:	f8d2 c004 	ldr.w	ip, [r2, #4]
    7422:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    7424:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    7428:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    742c:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    7430:	28ff      	cmp	r0, #255	; 0xff
    7432:	d004      	beq.n	743e <ticker_job+0x68a>
    7434:	6819      	ldr	r1, [r3, #0]
    7436:	f8db 7014 	ldr.w	r7, [fp, #20]
    743a:	42b9      	cmp	r1, r7
    743c:	d023      	beq.n	7486 <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    743e:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    7442:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    7446:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    7448:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    744a:	29ff      	cmp	r1, #255	; 0xff
    744c:	d007      	beq.n	745e <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    744e:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    7452:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    7456:	6987      	ldr	r7, [r0, #24]
    7458:	6880      	ldr	r0, [r0, #8]
    745a:	b1df      	cbz	r7, 7494 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    745c:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    745e:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    7462:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    7466:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    7468:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    746c:	b113      	cbz	r3, 7474 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    746e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    7470:	2000      	movs	r0, #0
    7472:	4798      	blx	r3
			first = user->first + 1;
    7474:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    7476:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    7478:	3301      	adds	r3, #1
    747a:	b2db      	uxtb	r3, r3
				first = 0;
    747c:	429a      	cmp	r2, r3
    747e:	bf08      	it	eq
    7480:	2300      	moveq	r3, #0
			user->first = first;
    7482:	706b      	strb	r3, [r5, #1]
    7484:	e7bb      	b.n	73fe <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    7486:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    748a:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    748e:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    7492:	e7da      	b.n	744a <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    7494:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    7496:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    749a:	e7d6      	b.n	744a <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    749c:	9b05      	ldr	r3, [sp, #20]
    749e:	2bff      	cmp	r3, #255	; 0xff
    74a0:	d107      	bne.n	74b2 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    74a2:	f00a fa57 	bl	11954 <cntr_cnt_get>
    74a6:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    74a8:	f00a fa18 	bl	118dc <cntr_start>
    74ac:	b908      	cbnz	r0, 74b2 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    74ae:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    74b2:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    74b6:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    74ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    74be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    74c2:	260a      	movs	r6, #10
    74c4:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    74c6:	f00a fa45 	bl	11954 <cntr_cnt_get>
		cc = instance->ticks_current;
    74ca:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    74ce:	1b03      	subs	r3, r0, r4
    74d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    74d4:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    74d6:	42ab      	cmp	r3, r5
    74d8:	bf2c      	ite	cs
    74da:	18e4      	addcs	r4, r4, r3
    74dc:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    74de:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    74e2:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    74e4:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    74e8:	4620      	mov	r0, r4
    74ea:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    74ec:	f00a fa32 	bl	11954 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    74f0:	1bc0      	subs	r0, r0, r7
    74f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    74f6:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    74f8:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    74fa:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    74fe:	42a0      	cmp	r0, r4
    7500:	f67f ace8 	bls.w	6ed4 <ticker_job+0x120>
		LL_ASSERT(i);
    7504:	3e01      	subs	r6, #1
    7506:	d1de      	bne.n	74c6 <ticker_job+0x712>
    7508:	4b11      	ldr	r3, [pc, #68]	; (7550 <ticker_job+0x79c>)
    750a:	9301      	str	r3, [sp, #4]
    750c:	9300      	str	r3, [sp, #0]
    750e:	4a11      	ldr	r2, [pc, #68]	; (7554 <ticker_job+0x7a0>)
    7510:	4b11      	ldr	r3, [pc, #68]	; (7558 <ticker_job+0x7a4>)
    7512:	4912      	ldr	r1, [pc, #72]	; (755c <ticker_job+0x7a8>)
    7514:	4812      	ldr	r0, [pc, #72]	; (7560 <ticker_job+0x7ac>)
    7516:	f7f9 fd39 	bl	f8c <printk>
    751a:	4040      	eors	r0, r0
    751c:	f380 8811 	msr	BASEPRI, r0
    7520:	f04f 0004 	mov.w	r0, #4
    7524:	df02      	svc	2
	instance->job_guard = 0;
    7526:	2300      	movs	r3, #0
    7528:	f88b 301e 	strb.w	r3, [fp, #30]
    752c:	e4c8      	b.n	6ec0 <ticker_job+0x10c>
	if (!pending) {
    752e:	2b00      	cmp	r3, #0
    7530:	d1f9      	bne.n	7526 <ticker_job+0x772>
		flag_compare_update = 1;
    7532:	2301      	movs	r3, #1
    7534:	9304      	str	r3, [sp, #16]
    7536:	e4b2      	b.n	6e9e <ticker_job+0xea>
	while (id_insert !=
    7538:	45b0      	cmp	r8, r6
    753a:	f47f af33 	bne.w	73a4 <ticker_job+0x5f0>
    753e:	e686      	b.n	724e <ticker_job+0x49a>
}
    7540:	b015      	add	sp, #84	; 0x54
    7542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7546:	bf00      	nop
    7548:	ff172b5a 	.word	0xff172b5a
    754c:	7f172b59 	.word	0x7f172b59
    7550:	000142a9 	.word	0x000142a9
    7554:	00014ff8 	.word	0x00014ff8
    7558:	00015c7d 	.word	0x00015c7d
    755c:	00015047 	.word	0x00015047
    7560:	00015c97 	.word	0x00015c97

00007564 <ticker_init>:
{
    7564:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    7566:	4d1a      	ldr	r5, [pc, #104]	; (75d0 <ticker_init+0x6c>)
{
    7568:	9f05      	ldr	r7, [sp, #20]
    756a:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    756e:	262c      	movs	r6, #44	; 0x2c
    7570:	4346      	muls	r6, r0
    7572:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    7576:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    7578:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    757c:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    757e:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    7582:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    7586:	3b01      	subs	r3, #1
    7588:	b2db      	uxtb	r3, r3
    758a:	2bff      	cmp	r3, #255	; 0xff
    758c:	d111      	bne.n	75b2 <ticker_init+0x4e>
	if (count_op) {
    758e:	b9ec      	cbnz	r4, 75cc <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    7590:	222c      	movs	r2, #44	; 0x2c
    7592:	fb02 5200 	mla	r2, r2, r0, r5
    7596:	9908      	ldr	r1, [sp, #32]
    7598:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    759a:	9909      	ldr	r1, [sp, #36]	; 0x24
    759c:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    759e:	990a      	ldr	r1, [sp, #40]	; 0x28
    75a0:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    75a2:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    75a4:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    75a6:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    75a8:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    75aa:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    75ac:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    75ae:	4620      	mov	r0, r4
    75b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    75b2:	b21a      	sxth	r2, r3
    75b4:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    75b8:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    75ba:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    75be:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    75c2:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    75c4:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    75c8:	b2e4      	uxtb	r4, r4
    75ca:	e7dc      	b.n	7586 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    75cc:	2001      	movs	r0, #1
}
    75ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75d0:	200007c4 	.word	0x200007c4

000075d4 <ticker_trigger>:
	instance = &_instance[instance_index];
    75d4:	4a07      	ldr	r2, [pc, #28]	; (75f4 <ticker_trigger+0x20>)
    75d6:	212c      	movs	r1, #44	; 0x2c
    75d8:	fb00 2301 	mla	r3, r0, r1, r2
{
    75dc:	b410      	push	{r4}
	if (instance->sched_cb) {
    75de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    75e0:	b12c      	cbz	r4, 75ee <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    75e2:	46a4      	mov	ip, r4
    75e4:	2201      	movs	r2, #1
    75e6:	2103      	movs	r1, #3
    75e8:	2002      	movs	r0, #2
}
    75ea:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    75ec:	4760      	bx	ip
}
    75ee:	bc10      	pop	{r4}
    75f0:	4770      	bx	lr
    75f2:	bf00      	nop
    75f4:	200007c4 	.word	0x200007c4

000075f8 <ticker_start>:
{
    75f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    75fc:	4f25      	ldr	r7, [pc, #148]	; (7694 <ticker_start+0x9c>)
    75fe:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    7602:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7604:	fb08 7000 	mla	r0, r8, r0, r7
    7608:	fa0f fc81 	sxth.w	ip, r1
    760c:	f8d0 e004 	ldr.w	lr, [r0, #4]
    7610:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    7614:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    7618:	78f4      	ldrb	r4, [r6, #3]
    761a:	1c65      	adds	r5, r4, #1
    761c:	b2ed      	uxtb	r5, r5
		last = 0;
    761e:	45ae      	cmp	lr, r5
    7620:	bf98      	it	ls
    7622:	2500      	movls	r5, #0
	if (last == user->first) {
    7624:	f896 e001 	ldrb.w	lr, [r6, #1]
    7628:	45ae      	cmp	lr, r5
    762a:	d02f      	beq.n	768c <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    762c:	f8d6 c004 	ldr.w	ip, [r6, #4]
    7630:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7634:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    7638:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    763c:	f04f 0a03 	mov.w	sl, #3
    7640:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    7644:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    7646:	9b08      	ldr	r3, [sp, #32]
    7648:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    764a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    764c:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    764e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7650:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    7652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7654:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    7656:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    765a:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    765c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    765e:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    7660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7662:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    7664:	2302      	movs	r3, #2
    7666:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    766a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    766c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    766e:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    7670:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7672:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7674:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7676:	6a03      	ldr	r3, [r0, #32]
    7678:	4608      	mov	r0, r1
    767a:	4798      	blx	r3
    767c:	fb09 7308 	mla	r3, r9, r8, r7
    7680:	2200      	movs	r2, #0
    7682:	2104      	movs	r1, #4
    7684:	47a8      	blx	r5
	return user_op->status;
    7686:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    768c:	2001      	movs	r0, #1
}
    768e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7692:	bf00      	nop
    7694:	200007c4 	.word	0x200007c4

00007698 <ticker_update>:
{
    7698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    769c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 7730 <ticker_update+0x98>
    76a0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    76a4:	fb0a 8e00 	mla	lr, sl, r0, r8
    76a8:	b20f      	sxth	r7, r1
    76aa:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    76ae:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    76b0:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    76b4:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    76b8:	78c4      	ldrb	r4, [r0, #3]
    76ba:	1c66      	adds	r6, r4, #1
    76bc:	b2f6      	uxtb	r6, r6
		last = 0;
    76be:	42b5      	cmp	r5, r6
    76c0:	bf98      	it	ls
    76c2:	2600      	movls	r6, #0
	if (last == user->first) {
    76c4:	7845      	ldrb	r5, [r0, #1]
    76c6:	42b5      	cmp	r5, r6
    76c8:	d02f      	beq.n	772a <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    76ca:	f8d0 c004 	ldr.w	ip, [r0, #4]
    76ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    76d2:	0125      	lsls	r5, r4, #4
    76d4:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    76d8:	2704      	movs	r7, #4
    76da:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    76de:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    76e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    76e4:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    76e6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    76ea:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    76ec:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    76f0:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    76f2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    76f6:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    76f8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    76fc:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    76fe:	2302      	movs	r3, #2
    7700:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7704:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    7708:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    770a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    770c:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    770e:	f8de 3020 	ldr.w	r3, [lr, #32]
    7712:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    7716:	4608      	mov	r0, r1
    7718:	4798      	blx	r3
    771a:	fb09 830a 	mla	r3, r9, sl, r8
    771e:	2200      	movs	r2, #0
    7720:	4639      	mov	r1, r7
    7722:	47a8      	blx	r5
	return user_op->status;
    7724:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    772a:	2001      	movs	r0, #1
}
    772c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7730:	200007c4 	.word	0x200007c4

00007734 <ticker_stop>:
{
    7734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7738:	f8df 906c 	ldr.w	r9, [pc, #108]	; 77a8 <ticker_stop+0x74>
    773c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7740:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7744:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7746:	f8de 0004 	ldr.w	r0, [lr, #4]
    774a:	b20e      	sxth	r6, r1
    774c:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    7750:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7754:	78fc      	ldrb	r4, [r7, #3]
    7756:	1c65      	adds	r5, r4, #1
    7758:	b2ed      	uxtb	r5, r5
		last = 0;
    775a:	42a8      	cmp	r0, r5
    775c:	bf98      	it	ls
    775e:	2500      	movls	r5, #0
	if (last == user->first) {
    7760:	7878      	ldrb	r0, [r7, #1]
    7762:	42a8      	cmp	r0, r5
    7764:	d01d      	beq.n	77a2 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    7766:	6878      	ldr	r0, [r7, #4]
    7768:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    776c:	0124      	lsls	r4, r4, #4
    776e:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    7770:	f04f 0c05 	mov.w	ip, #5
    7774:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    7778:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    777a:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    777c:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    777e:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    7780:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    7782:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    7784:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7786:	f8de 3020 	ldr.w	r3, [lr, #32]
    778a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    778e:	4608      	mov	r0, r1
    7790:	4798      	blx	r3
    7792:	fb08 930a 	mla	r3, r8, sl, r9
    7796:	2200      	movs	r2, #0
    7798:	2104      	movs	r1, #4
    779a:	47a0      	blx	r4
	return user_op->status;
    779c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    779e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    77a2:	2001      	movs	r0, #1
}
    77a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77a8:	200007c4 	.word	0x200007c4

000077ac <ticker_next_slot_get>:
{
    77ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    77b0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 782c <ticker_next_slot_get+0x80>
    77b4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    77b8:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    77ba:	fb0a 8000 	mla	r0, sl, r0, r8
    77be:	fa0f fe81 	sxth.w	lr, r1
    77c2:	6845      	ldr	r5, [r0, #4]
    77c4:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    77c8:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    77cc:	78fc      	ldrb	r4, [r7, #3]
    77ce:	1c66      	adds	r6, r4, #1
    77d0:	b2f6      	uxtb	r6, r6
		last = 0;
    77d2:	42b5      	cmp	r5, r6
    77d4:	bf98      	it	ls
    77d6:	2600      	movls	r6, #0
	if (last == user->first) {
    77d8:	787d      	ldrb	r5, [r7, #1]
    77da:	42b5      	cmp	r5, r6
    77dc:	d023      	beq.n	7826 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    77de:	f8d7 c004 	ldr.w	ip, [r7, #4]
    77e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    77e6:	0125      	lsls	r5, r4, #4
    77e8:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    77ec:	f04f 0e02 	mov.w	lr, #2
    77f0:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    77f4:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    77f6:	9b08      	ldr	r3, [sp, #32]
    77f8:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    77fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    77fc:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    77fe:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    7800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    7802:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    7804:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7806:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    780a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    780c:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    780e:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7810:	6a03      	ldr	r3, [r0, #32]
    7812:	4608      	mov	r0, r1
    7814:	4798      	blx	r3
    7816:	fb09 830a 	mla	r3, r9, sl, r8
    781a:	2200      	movs	r2, #0
    781c:	2104      	movs	r1, #4
    781e:	47a8      	blx	r5
	return user_op->status;
    7820:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7826:	2001      	movs	r0, #1
}
    7828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    782c:	200007c4 	.word	0x200007c4

00007830 <ticker_job_idle_get>:
{
    7830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7834:	f8df 906c 	ldr.w	r9, [pc, #108]	; 78a4 <ticker_job_idle_get+0x74>
    7838:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    783c:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7840:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7842:	f8de 0004 	ldr.w	r0, [lr, #4]
    7846:	b20e      	sxth	r6, r1
    7848:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    784c:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7850:	78fc      	ldrb	r4, [r7, #3]
    7852:	1c65      	adds	r5, r4, #1
    7854:	b2ed      	uxtb	r5, r5
		last = 0;
    7856:	42a8      	cmp	r0, r5
    7858:	bf98      	it	ls
    785a:	2500      	movls	r5, #0
	if (last == user->first) {
    785c:	7878      	ldrb	r0, [r7, #1]
    785e:	42a8      	cmp	r0, r5
    7860:	d01d      	beq.n	789e <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    7862:	6878      	ldr	r0, [r7, #4]
    7864:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7868:	0124      	lsls	r4, r4, #4
    786a:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    786c:	f04f 0c01 	mov.w	ip, #1
    7870:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    7874:	20ff      	movs	r0, #255	; 0xff
    7876:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7878:	2002      	movs	r0, #2
    787a:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    787c:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    787e:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    7880:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7882:	f8de 3020 	ldr.w	r3, [lr, #32]
    7886:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    788a:	4608      	mov	r0, r1
    788c:	4798      	blx	r3
    788e:	fb08 930a 	mla	r3, r8, sl, r9
    7892:	2200      	movs	r2, #0
    7894:	2104      	movs	r1, #4
    7896:	47a0      	blx	r4
	return user_op->status;
    7898:	6a70      	ldr	r0, [r6, #36]	; 0x24
    789a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    789e:	2001      	movs	r0, #1
}
    78a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    78a4:	200007c4 	.word	0x200007c4

000078a8 <ticker_job_sched>:
{
    78a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    78ac:	4c08      	ldr	r4, [pc, #32]	; (78d0 <ticker_job_sched+0x28>)
    78ae:	252c      	movs	r5, #44	; 0x2c
    78b0:	fb05 4300 	mla	r3, r5, r0, r4
{
    78b4:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    78b6:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    78b8:	6a1b      	ldr	r3, [r3, #32]
    78ba:	4608      	mov	r0, r1
    78bc:	4798      	blx	r3
    78be:	fb06 4305 	mla	r3, r6, r5, r4
    78c2:	46bc      	mov	ip, r7
    78c4:	2200      	movs	r2, #0
    78c6:	2104      	movs	r1, #4
}
    78c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    78cc:	4760      	bx	ip
    78ce:	bf00      	nop
    78d0:	200007c4 	.word	0x200007c4

000078d4 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    78d4:	f00a b83e 	b.w	11954 <cntr_cnt_get>

000078d8 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    78d8:	1a40      	subs	r0, r0, r1
}
    78da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    78de:	4770      	bx	lr

000078e0 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    78e0:	b508      	push	{r3, lr}
    78e2:	4603      	mov	r3, r0
	if (addr_type > 1) {
    78e4:	2b01      	cmp	r3, #1
{
    78e6:	4608      	mov	r0, r1
	if (addr_type > 1) {
    78e8:	d80e      	bhi.n	7908 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    78ea:	b133      	cbz	r3, 78fa <ll_addr_get+0x1a>
		if (bdaddr) {
    78ec:	b119      	cbz	r1, 78f6 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    78ee:	2206      	movs	r2, #6
    78f0:	4906      	ldr	r1, [pc, #24]	; (790c <ll_addr_get+0x2c>)
    78f2:	f7fa f983 	bl	1bfc <memcpy>
		}

		return rnd_addr;
    78f6:	4805      	ldr	r0, [pc, #20]	; (790c <ll_addr_get+0x2c>)
    78f8:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    78fa:	b119      	cbz	r1, 7904 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    78fc:	2206      	movs	r2, #6
    78fe:	4904      	ldr	r1, [pc, #16]	; (7910 <ll_addr_get+0x30>)
    7900:	f7fa f97c 	bl	1bfc <memcpy>
	}

	return pub_addr;
    7904:	4802      	ldr	r0, [pc, #8]	; (7910 <ll_addr_get+0x30>)
}
    7906:	bd08      	pop	{r3, pc}
		return NULL;
    7908:	2000      	movs	r0, #0
    790a:	bd08      	pop	{r3, pc}
    790c:	20000822 	.word	0x20000822
    7910:	2000081c 	.word	0x2000081c

00007914 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    7914:	b570      	push	{r4, r5, r6, lr}
    7916:	4606      	mov	r6, r0
    7918:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    791a:	f008 f8b5 	bl	fa88 <ll_adv_is_enabled>
    791e:	4604      	mov	r4, r0
    7920:	b110      	cbz	r0, 7928 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    7922:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    7924:	4620      	mov	r0, r4
    7926:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    7928:	f008 f8c2 	bl	fab0 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    792c:	f010 0f06 	tst.w	r0, #6
    7930:	d1f7      	bne.n	7922 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7932:	2206      	movs	r2, #6
    7934:	4629      	mov	r1, r5
	if (addr_type) {
    7936:	b11e      	cbz	r6, 7940 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7938:	4802      	ldr	r0, [pc, #8]	; (7944 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    793a:	f7fa f95f 	bl	1bfc <memcpy>
    793e:	e7f1      	b.n	7924 <ll_addr_set+0x10>
    7940:	4801      	ldr	r0, [pc, #4]	; (7948 <ll_addr_set+0x34>)
    7942:	e7fa      	b.n	793a <ll_addr_set+0x26>
    7944:	20000822 	.word	0x20000822
    7948:	2000081c 	.word	0x2000081c

0000794c <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    794c:	2300      	movs	r3, #0
    794e:	7003      	strb	r3, [r0, #0]
	*max = 0;
    7950:	700b      	strb	r3, [r1, #0]
    7952:	4770      	bx	lr

00007954 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    7954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7956:	4607      	mov	r7, r0
    7958:	460e      	mov	r6, r1
	while (len) {
    795a:	460c      	mov	r4, r1
    795c:	1b35      	subs	r5, r6, r4
    795e:	443d      	add	r5, r7
    7960:	b18c      	cbz	r4, 7986 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    7962:	f7f9 fb3f 	bl	fe4 <sys_rand32_get>

		if (len >= sizeof(v)) {
    7966:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    7968:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    796a:	d907      	bls.n	797c <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    796c:	2204      	movs	r2, #4
    796e:	eb0d 0102 	add.w	r1, sp, r2
    7972:	4628      	mov	r0, r5
    7974:	f7fa f942 	bl	1bfc <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    7978:	3c04      	subs	r4, #4
    797a:	e7ef      	b.n	795c <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    797c:	4622      	mov	r2, r4
    797e:	a901      	add	r1, sp, #4
    7980:	4628      	mov	r0, r5
    7982:	f7fa f93b 	bl	1bfc <memcpy>
			break;
		}
	}

	return 0;
}
    7986:	2000      	movs	r0, #0
    7988:	b003      	add	sp, #12
    798a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000798c <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    798c:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    798e:	2300      	movs	r3, #0
    7990:	f00a f814 	bl	119bc <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    7994:	2000      	movs	r0, #0
    7996:	bd08      	pop	{r3, pc}

00007998 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    7998:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    799a:	4802      	ldr	r0, [pc, #8]	; (79a4 <_hci_driver_init+0xc>)
    799c:	f7fb ffba 	bl	3914 <bt_hci_driver_register>

	return 0;
}
    79a0:	2000      	movs	r0, #0
    79a2:	bd08      	pop	{r3, pc}
    79a4:	00015ce8 	.word	0x00015ce8

000079a8 <recv_thread>:
{
    79a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    79aa:	4d28      	ldr	r5, [pc, #160]	; (7a4c <recv_thread+0xa4>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    79ac:	2600      	movs	r6, #0
    79ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    79b2:	4628      	mov	r0, r5
    79b4:	f00b fc20 	bl	131f8 <_impl_k_queue_get>
		if (node_rx && !buf) {
    79b8:	4604      	mov	r4, r0
    79ba:	2800      	cmp	r0, #0
    79bc:	d036      	beq.n	7a2c <recv_thread+0x84>
	s8_t class = hci_get_class(node_rx);
    79be:	f001 fd0f 	bl	93e0 <hci_get_class>
	switch (class) {
    79c2:	1e03      	subs	r3, r0, #0
    79c4:	9403      	str	r4, [sp, #12]
    79c6:	db03      	blt.n	79d0 <recv_thread+0x28>
    79c8:	2b02      	cmp	r3, #2
    79ca:	dd10      	ble.n	79ee <recv_thread+0x46>
    79cc:	2b03      	cmp	r3, #3
    79ce:	d030      	beq.n	7a32 <recv_thread+0x8a>
		LL_ASSERT(0);
    79d0:	4b1f      	ldr	r3, [pc, #124]	; (7a50 <recv_thread+0xa8>)
    79d2:	9301      	str	r3, [sp, #4]
    79d4:	9300      	str	r3, [sp, #0]
    79d6:	4a1f      	ldr	r2, [pc, #124]	; (7a54 <recv_thread+0xac>)
    79d8:	4b1f      	ldr	r3, [pc, #124]	; (7a58 <recv_thread+0xb0>)
    79da:	4920      	ldr	r1, [pc, #128]	; (7a5c <recv_thread+0xb4>)
    79dc:	4820      	ldr	r0, [pc, #128]	; (7a60 <recv_thread+0xb8>)
    79de:	f7f9 fad5 	bl	f8c <printk>
    79e2:	4040      	eors	r0, r0
    79e4:	f380 8811 	msr	BASEPRI, r0
    79e8:	f04f 0004 	mov.w	r0, #4
    79ec:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    79ee:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    79f0:	bf0e      	itee	eq
    79f2:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    79f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    79f8:	2001      	movne	r0, #1
    79fa:	f7fc f877 	bl	3aec <bt_buf_get_rx>
    79fe:	4604      	mov	r4, r0
		if (buf) {
    7a00:	b118      	cbz	r0, 7a0a <recv_thread+0x62>
			hci_evt_encode(node_rx, buf);
    7a02:	4601      	mov	r1, r0
    7a04:	9803      	ldr	r0, [sp, #12]
    7a06:	f001 f935 	bl	8c74 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    7a0a:	9b03      	ldr	r3, [sp, #12]
    7a0c:	2100      	movs	r1, #0
    7a0e:	88d8      	ldrh	r0, [r3, #6]
    7a10:	f008 fcb8 	bl	10384 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    7a14:	a804      	add	r0, sp, #16
    7a16:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    7a1a:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    7a1c:	f008 fc3c 	bl	10298 <ll_rx_mem_release>
		if (buf) {
    7a20:	b124      	cbz	r4, 7a2c <recv_thread+0x84>
			if (buf->len) {
    7a22:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    7a24:	4620      	mov	r0, r4
			if (buf->len) {
    7a26:	b173      	cbz	r3, 7a46 <recv_thread+0x9e>
				bt_recv(buf);
    7a28:	f7fb fb04 	bl	3034 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    7a2c:	f00b fe46 	bl	136bc <_impl_k_yield>
    7a30:	e7bd      	b.n	79ae <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    7a32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7a36:	f7fc f859 	bl	3aec <bt_buf_get_rx>
    7a3a:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    7a3c:	4601      	mov	r1, r0
    7a3e:	9803      	ldr	r0, [sp, #12]
    7a40:	f001 f8d8 	bl	8bf4 <hci_acl_encode>
    7a44:	e7e1      	b.n	7a0a <recv_thread+0x62>
				net_buf_unref(buf);
    7a46:	f00a fdef 	bl	12628 <net_buf_unref>
    7a4a:	e7ef      	b.n	7a2c <recv_thread+0x84>
    7a4c:	20003f1c 	.word	0x20003f1c
    7a50:	000142a9 	.word	0x000142a9
    7a54:	00014ff8 	.word	0x00014ff8
    7a58:	00015cba 	.word	0x00015cba
    7a5c:	00015047 	.word	0x00015047
    7a60:	00014f97 	.word	0x00014f97

00007a64 <hci_driver_send>:
{
    7a64:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    7a66:	8983      	ldrh	r3, [r0, #12]
{
    7a68:	b087      	sub	sp, #28
    7a6a:	4605      	mov	r5, r0
	if (!buf->len) {
    7a6c:	b96b      	cbnz	r3, 7a8a <hci_driver_send+0x26>
		BT_ERR("Empty HCI packet");
    7a6e:	4b20      	ldr	r3, [pc, #128]	; (7af0 <hci_driver_send+0x8c>)
    7a70:	9301      	str	r3, [sp, #4]
    7a72:	9300      	str	r3, [sp, #0]
    7a74:	4a1f      	ldr	r2, [pc, #124]	; (7af4 <hci_driver_send+0x90>)
    7a76:	4b20      	ldr	r3, [pc, #128]	; (7af8 <hci_driver_send+0x94>)
    7a78:	4920      	ldr	r1, [pc, #128]	; (7afc <hci_driver_send+0x98>)
    7a7a:	4821      	ldr	r0, [pc, #132]	; (7b00 <hci_driver_send+0x9c>)
    7a7c:	f7f9 fa86 	bl	f8c <printk>
		return -EINVAL;
    7a80:	f06f 0415 	mvn.w	r4, #21
}
    7a84:	4620      	mov	r0, r4
    7a86:	b007      	add	sp, #28
    7a88:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    7a8a:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    7a8c:	b183      	cbz	r3, 7ab0 <hci_driver_send+0x4c>
    7a8e:	2b02      	cmp	r3, #2
    7a90:	d11f      	bne.n	7ad2 <hci_driver_send+0x6e>
	err = hci_acl_handle(buf, &evt);
    7a92:	a905      	add	r1, sp, #20
    7a94:	f001 f81e 	bl	8ad4 <hci_acl_handle>
    7a98:	4604      	mov	r4, r0
	if (evt) {
    7a9a:	9805      	ldr	r0, [sp, #20]
    7a9c:	b108      	cbz	r0, 7aa2 <hci_driver_send+0x3e>
		bt_recv_prio(evt);
    7a9e:	f7fb fe4d 	bl	373c <bt_recv_prio>
	if (!err) {
    7aa2:	2c00      	cmp	r4, #0
    7aa4:	d1ee      	bne.n	7a84 <hci_driver_send+0x20>
		net_buf_unref(buf);
    7aa6:	4628      	mov	r0, r5
    7aa8:	f00a fdbe 	bl	12628 <net_buf_unref>
    7aac:	2400      	movs	r4, #0
    7aae:	e7e9      	b.n	7a84 <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    7ab0:	f000 faaa 	bl	8008 <hci_cmd_handle>
	if (evt) {
    7ab4:	4602      	mov	r2, r0
    7ab6:	2800      	cmp	r0, #0
    7ab8:	d0f5      	beq.n	7aa6 <hci_driver_send+0x42>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    7aba:	6883      	ldr	r3, [r0, #8]
    7abc:	7819      	ldrb	r1, [r3, #0]
    7abe:	2913      	cmp	r1, #19
    7ac0:	d812      	bhi.n	7ae8 <hci_driver_send+0x84>
    7ac2:	2301      	movs	r3, #1
    7ac4:	408b      	lsls	r3, r1
    7ac6:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    7aca:	d00d      	beq.n	7ae8 <hci_driver_send+0x84>
			bt_recv_prio(evt);
    7acc:	f7fb fe36 	bl	373c <bt_recv_prio>
    7ad0:	e7e9      	b.n	7aa6 <hci_driver_send+0x42>
		BT_ERR("Unknown HCI type %u", type);
    7ad2:	4a07      	ldr	r2, [pc, #28]	; (7af0 <hci_driver_send+0x8c>)
    7ad4:	9202      	str	r2, [sp, #8]
    7ad6:	e88d 000c 	stmia.w	sp, {r2, r3}
    7ada:	4908      	ldr	r1, [pc, #32]	; (7afc <hci_driver_send+0x98>)
    7adc:	4b06      	ldr	r3, [pc, #24]	; (7af8 <hci_driver_send+0x94>)
    7ade:	4a05      	ldr	r2, [pc, #20]	; (7af4 <hci_driver_send+0x90>)
    7ae0:	4808      	ldr	r0, [pc, #32]	; (7b04 <hci_driver_send+0xa0>)
    7ae2:	f7f9 fa53 	bl	f8c <printk>
    7ae6:	e7cb      	b.n	7a80 <hci_driver_send+0x1c>
			bt_recv(evt);
    7ae8:	4610      	mov	r0, r2
    7aea:	f7fb faa3 	bl	3034 <bt_recv>
    7aee:	e7da      	b.n	7aa6 <hci_driver_send+0x42>
    7af0:	000142a9 	.word	0x000142a9
    7af4:	00014ff8 	.word	0x00014ff8
    7af8:	00015cc6 	.word	0x00015cc6
    7afc:	00015047 	.word	0x00015047
    7b00:	00015d29 	.word	0x00015d29
    7b04:	00015d4a 	.word	0x00015d4a

00007b08 <prio_recv_thread>:
{
    7b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7b0a:	4d14      	ldr	r5, [pc, #80]	; (7b5c <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    7b0c:	4e14      	ldr	r6, [pc, #80]	; (7b60 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    7b0e:	f10d 0102 	add.w	r1, sp, #2
    7b12:	a801      	add	r0, sp, #4
    7b14:	f008 fb88 	bl	10228 <ll_rx_get>
    7b18:	4604      	mov	r4, r0
    7b1a:	b940      	cbnz	r0, 7b2e <prio_recv_thread+0x26>
		if (node_rx) {
    7b1c:	9b01      	ldr	r3, [sp, #4]
    7b1e:	b1bb      	cbz	r3, 7b50 <prio_recv_thread+0x48>
			ll_rx_dequeue();
    7b20:	f008 fe64 	bl	107ec <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    7b24:	9901      	ldr	r1, [sp, #4]
    7b26:	4630      	mov	r0, r6
    7b28:	f00b fb42 	bl	131b0 <k_queue_append>
    7b2c:	e7ef      	b.n	7b0e <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7b2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7b32:	2001      	movs	r0, #1
    7b34:	f7fb ffda 	bl	3aec <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    7b38:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7b3a:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    7b3c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7b40:	f001 fc3a 	bl	93b8 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    7b44:	4638      	mov	r0, r7
    7b46:	f7fb fdf9 	bl	373c <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    7b4a:	f00b fdb7 	bl	136bc <_impl_k_yield>
    7b4e:	e7de      	b.n	7b0e <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7b54:	4628      	mov	r0, r5
    7b56:	f00b fe18 	bl	1378a <_impl_k_sem_take>
    7b5a:	e7d8      	b.n	7b0e <prio_recv_thread+0x6>
    7b5c:	20003f04 	.word	0x20003f04
    7b60:	20003f1c 	.word	0x20003f1c

00007b64 <hci_driver_open>:
{
    7b64:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    7b66:	481a      	ldr	r0, [pc, #104]	; (7bd0 <hci_driver_open+0x6c>)
{
    7b68:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    7b6a:	f008 ff1d 	bl	109a8 <ll_init>
	if (err) {
    7b6e:	4604      	mov	r4, r0
    7b70:	b160      	cbz	r0, 7b8c <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    7b72:	4b18      	ldr	r3, [pc, #96]	; (7bd4 <hci_driver_open+0x70>)
    7b74:	9302      	str	r3, [sp, #8]
    7b76:	e88d 0018 	stmia.w	sp, {r3, r4}
    7b7a:	4a17      	ldr	r2, [pc, #92]	; (7bd8 <hci_driver_open+0x74>)
    7b7c:	4b17      	ldr	r3, [pc, #92]	; (7bdc <hci_driver_open+0x78>)
    7b7e:	4918      	ldr	r1, [pc, #96]	; (7be0 <hci_driver_open+0x7c>)
    7b80:	4818      	ldr	r0, [pc, #96]	; (7be4 <hci_driver_open+0x80>)
    7b82:	f7f9 fa03 	bl	f8c <printk>
}
    7b86:	4620      	mov	r0, r4
    7b88:	b006      	add	sp, #24
    7b8a:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    7b8c:	f001 fc40 	bl	9410 <hci_init>

    7b90:	f06f 0309 	mvn.w	r3, #9
    7b94:	9303      	str	r3, [sp, #12]
    7b96:	9405      	str	r4, [sp, #20]
    7b98:	9404      	str	r4, [sp, #16]
    7b9a:	9402      	str	r4, [sp, #8]
    7b9c:	9401      	str	r4, [sp, #4]
    7b9e:	9400      	str	r4, [sp, #0]
    7ba0:	4b11      	ldr	r3, [pc, #68]	; (7be8 <hci_driver_open+0x84>)
    7ba2:	4912      	ldr	r1, [pc, #72]	; (7bec <hci_driver_open+0x88>)
    7ba4:	4812      	ldr	r0, [pc, #72]	; (7bf0 <hci_driver_open+0x8c>)
    7ba6:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    7baa:	f00b ffc3 	bl	13b34 <_impl_k_thread_create>
    7bae:	f06f 0307 	mvn.w	r3, #7
    7bb2:	9303      	str	r3, [sp, #12]
    7bb4:	9405      	str	r4, [sp, #20]
    7bb6:	9404      	str	r4, [sp, #16]
    7bb8:	9402      	str	r4, [sp, #8]
    7bba:	9401      	str	r4, [sp, #4]
    7bbc:	9400      	str	r4, [sp, #0]
    7bbe:	4b0d      	ldr	r3, [pc, #52]	; (7bf4 <hci_driver_open+0x90>)
    7bc0:	490d      	ldr	r1, [pc, #52]	; (7bf8 <hci_driver_open+0x94>)
    7bc2:	480e      	ldr	r0, [pc, #56]	; (7bfc <hci_driver_open+0x98>)
    7bc4:	f240 522c 	movw	r2, #1324	; 0x52c
    7bc8:	f00b ffb4 	bl	13b34 <_impl_k_thread_create>
    7bcc:	e7db      	b.n	7b86 <hci_driver_open+0x22>
    7bce:	bf00      	nop
    7bd0:	20003f04 	.word	0x20003f04
    7bd4:	000142a9 	.word	0x000142a9
    7bd8:	00014ff8 	.word	0x00014ff8
    7bdc:	00015cd6 	.word	0x00015cd6
    7be0:	00015047 	.word	0x00015047
    7be4:	00015cfc 	.word	0x00015cfc
    7be8:	00007b09 	.word	0x00007b09
    7bec:	200020c0 	.word	0x200020c0
    7bf0:	200018a0 	.word	0x200018a0
    7bf4:	000079a9 	.word	0x000079a9
    7bf8:	200023b0 	.word	0x200023b0
    7bfc:	20001830 	.word	0x20001830

00007c00 <sys_put_le32>:
	dst[1] = val >> 8;
    7c00:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    7c04:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    7c06:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    7c08:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    7c0a:	0a00      	lsrs	r0, r0, #8
    7c0c:	704b      	strb	r3, [r1, #1]
    7c0e:	70c8      	strb	r0, [r1, #3]
    7c10:	4770      	bx	lr

00007c12 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    7c12:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    7c14:	3008      	adds	r0, #8
{
    7c16:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    7c18:	2102      	movs	r1, #2
{
    7c1a:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    7c1c:	f00a fd36 	bl	1268c <net_buf_simple_add>
	hdr->evt = evt;
    7c20:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    7c22:	7044      	strb	r4, [r0, #1]
    7c24:	bd38      	pop	{r3, r4, r5, pc}
	...

00007c28 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    7c28:	b538      	push	{r3, r4, r5, lr}
    7c2a:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    7c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7c30:	f7fb ff6c 	bl	3b0c <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    7c34:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    7c36:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    7c38:	210f      	movs	r1, #15
    7c3a:	f7ff ffea 	bl	7c12 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    7c3e:	2104      	movs	r1, #4
    7c40:	f104 0008 	add.w	r0, r4, #8
    7c44:	f00a fd22 	bl	1268c <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    7c48:	2301      	movs	r3, #1
    7c4a:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    7c4c:	4b02      	ldr	r3, [pc, #8]	; (7c58 <cmd_status+0x30>)
	cs->status = status;
    7c4e:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    7c50:	881b      	ldrh	r3, [r3, #0]
    7c52:	8043      	strh	r3, [r0, #2]

	return buf;
}
    7c54:	4620      	mov	r0, r4
    7c56:	bd38      	pop	{r3, r4, r5, pc}
    7c58:	20000828 	.word	0x20000828

00007c5c <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    7c5c:	b570      	push	{r4, r5, r6, lr}
    7c5e:	4604      	mov	r4, r0
    7c60:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    7c62:	3201      	adds	r2, #1
{
    7c64:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    7c66:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    7c68:	b2d2      	uxtb	r2, r2
    7c6a:	213e      	movs	r1, #62	; 0x3e
    7c6c:	f7ff ffd1 	bl	7c12 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    7c70:	2101      	movs	r1, #1
    7c72:	4620      	mov	r0, r4
    7c74:	f00a fd0a 	bl	1268c <net_buf_simple_add>
	me->subevent = subevt;
    7c78:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    7c7a:	4629      	mov	r1, r5
    7c7c:	4620      	mov	r0, r4
}
    7c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    7c82:	f00a bd03 	b.w	1268c <net_buf_simple_add>
	...

00007c88 <cmd_complete>:
{
    7c88:	b538      	push	{r3, r4, r5, lr}
    7c8a:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    7c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    7c90:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    7c92:	f7fb ff3b 	bl	3b0c <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    7c96:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    7c98:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    7c9a:	b2d2      	uxtb	r2, r2
    7c9c:	210e      	movs	r1, #14
    7c9e:	f7ff ffb8 	bl	7c12 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    7ca2:	6820      	ldr	r0, [r4, #0]
    7ca4:	2103      	movs	r1, #3
    7ca6:	3008      	adds	r0, #8
    7ca8:	f00a fcf0 	bl	1268c <net_buf_simple_add>
	cc->ncmd = 1;
    7cac:	2301      	movs	r3, #1
    7cae:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    7cb0:	4b05      	ldr	r3, [pc, #20]	; (7cc8 <cmd_complete+0x40>)
    7cb2:	881b      	ldrh	r3, [r3, #0]
    7cb4:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    7cb8:	6820      	ldr	r0, [r4, #0]
    7cba:	4629      	mov	r1, r5
    7cbc:	3008      	adds	r0, #8
}
    7cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    7cc2:	f00a bce3 	b.w	1268c <net_buf_simple_add>
    7cc6:	bf00      	nop
    7cc8:	20000828 	.word	0x20000828

00007ccc <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    7ccc:	4b0e      	ldr	r3, [pc, #56]	; (7d08 <encrypt_change+0x3c>)
{
    7cce:	b570      	push	{r4, r5, r6, lr}
    7cd0:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    7cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
    7cd6:	2300      	movs	r3, #0
    7cd8:	f002 0280 	and.w	r2, r2, #128	; 0x80
    7cdc:	4313      	orrs	r3, r2
{
    7cde:	4604      	mov	r4, r0
    7ce0:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    7ce2:	d010      	beq.n	7d06 <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    7ce4:	2204      	movs	r2, #4
    7ce6:	2108      	movs	r1, #8
    7ce8:	4628      	mov	r0, r5
    7cea:	f7ff ff92 	bl	7c12 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    7cee:	2104      	movs	r1, #4
    7cf0:	f105 0008 	add.w	r0, r5, #8
    7cf4:	f00a fcca 	bl	1268c <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    7cf8:	fab4 f384 	clz	r3, r4
    7cfc:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    7cfe:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    7d00:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    7d04:	70c3      	strb	r3, [r0, #3]
    7d06:	bd70      	pop	{r4, r5, r6, pc}
    7d08:	20003d28 	.word	0x20003d28

00007d0c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    7d0c:	b570      	push	{r4, r5, r6, lr}
    7d0e:	4604      	mov	r4, r0
    7d10:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7d12:	4b13      	ldr	r3, [pc, #76]	; (7d60 <le_remote_feat_complete+0x54>)
{
    7d14:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7d16:	e9d3 2300 	ldrd	r2, r3, [r3]
    7d1a:	2200      	movs	r2, #0
    7d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    7d20:	4313      	orrs	r3, r2
{
    7d22:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7d24:	d01b      	beq.n	7d5e <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    7d26:	4b0f      	ldr	r3, [pc, #60]	; (7d64 <le_remote_feat_complete+0x58>)
    7d28:	e9d3 2300 	ldrd	r2, r3, [r3]
    7d2c:	2300      	movs	r3, #0
    7d2e:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7d32:	4313      	orrs	r3, r2
    7d34:	d013      	beq.n	7d5e <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    7d36:	220b      	movs	r2, #11
    7d38:	2104      	movs	r1, #4
    7d3a:	f7ff ff8f 	bl	7c5c <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    7d3e:	2208      	movs	r2, #8
	sep->status = status;
    7d40:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    7d42:	f8a0 6001 	strh.w	r6, [r0, #1]
    7d46:	3003      	adds	r0, #3
	if (!status) {
    7d48:	b924      	cbnz	r4, 7d54 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    7d4a:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    7d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    7d50:	f7f9 bf54 	b.w	1bfc <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    7d54:	2100      	movs	r1, #0
}
    7d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    7d5a:	f7f9 bf7b 	b.w	1c54 <memset>
    7d5e:	bd70      	pop	{r4, r5, r6, pc}
    7d60:	20003d28 	.word	0x20003d28
    7d64:	20003d30 	.word	0x20003d30

00007d68 <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    7d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d6c:	4605      	mov	r5, r0
    7d6e:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    7d70:	4b46      	ldr	r3, [pc, #280]	; (7e8c <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    7d72:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    7d74:	e9d3 2300 	ldrd	r2, r3, [r3]
    7d78:	f240 2801 	movw	r8, #513	; 0x201
    7d7c:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    7d80:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    7d84:	ea03 0309 	and.w	r3, r3, r9
    7d88:	ea02 0208 	and.w	r2, r2, r8
    7d8c:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    7d8e:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    7d90:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    7d94:	d077      	beq.n	7e86 <le_conn_complete.part.39+0x11e>
	if (!status) {
    7d96:	2d00      	cmp	r5, #0
    7d98:	d150      	bne.n	7e3c <le_conn_complete.part.39+0xd4>
		conn_count++;
    7d9a:	4a3d      	ldr	r2, [pc, #244]	; (7e90 <le_conn_complete.part.39+0x128>)
    7d9c:	6813      	ldr	r3, [r2, #0]
    7d9e:	3301      	adds	r3, #1
    7da0:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    7da2:	ea5a 030b 	orrs.w	r3, sl, fp
    7da6:	f101 0803 	add.w	r8, r1, #3
    7daa:	d151      	bne.n	7e50 <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    7dac:	2212      	movs	r2, #18
    7dae:	2101      	movs	r1, #1
    7db0:	f7ff ff54 	bl	7c5c <meta_evt>
	lecc->status = 0x00;
    7db4:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    7db6:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    7dba:	7863      	ldrb	r3, [r4, #1]
    7dbc:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    7dbe:	78a3      	ldrb	r3, [r4, #2]
    7dc0:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    7dc2:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    7dc4:	2206      	movs	r2, #6
    7dc6:	4641      	mov	r1, r8
    7dc8:	3005      	adds	r0, #5
    7dca:	f7f9 ff17 	bl	1bfc <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    7dce:	8ae3      	ldrh	r3, [r4, #22]
    7dd0:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    7dd4:	8b23      	ldrh	r3, [r4, #24]
    7dd6:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    7dda:	8b63      	ldrh	r3, [r4, #26]
    7ddc:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    7de0:	7f23      	ldrb	r3, [r4, #28]
    7de2:	747b      	strb	r3, [r7, #17]
    7de4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    7de8:	221e      	movs	r2, #30
    7dea:	210a      	movs	r1, #10
    7dec:	f7ff ff36 	bl	7c5c <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    7df0:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    7df2:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    7df4:	2100      	movs	r1, #0
    7df6:	f7f9 ff2d 	bl	1c54 <memset>
		lecc->status = status;
    7dfa:	7025      	strb	r5, [r4, #0]
    7dfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    7e00:	7d63      	ldrb	r3, [r4, #21]
    7e02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7e06:	2b40      	cmp	r3, #64	; 0x40
    7e08:	d138      	bne.n	7e7c <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    7e0a:	2206      	movs	r2, #6
    7e0c:	f104 0110 	add.w	r1, r4, #16
    7e10:	f7f9 fef4 	bl	1bfc <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    7e14:	2206      	movs	r2, #6
    7e16:	f104 0109 	add.w	r1, r4, #9
    7e1a:	f107 0011 	add.w	r0, r7, #17
    7e1e:	f7f9 feed 	bl	1bfc <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    7e22:	8ae3      	ldrh	r3, [r4, #22]
    7e24:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    7e28:	8b23      	ldrh	r3, [r4, #24]
    7e2a:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    7e2e:	8b63      	ldrh	r3, [r4, #26]
    7e30:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    7e34:	7f23      	ldrb	r3, [r4, #28]
    7e36:	777b      	strb	r3, [r7, #29]
    7e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    7e3c:	ea5a 030b 	orrs.w	r3, sl, fp
    7e40:	d1d2      	bne.n	7de8 <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    7e42:	2212      	movs	r2, #18
    7e44:	2101      	movs	r1, #1
    7e46:	f7ff ff09 	bl	7c5c <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    7e4a:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    7e4c:	4604      	mov	r4, r0
    7e4e:	e7d1      	b.n	7df4 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    7e50:	221e      	movs	r2, #30
    7e52:	210a      	movs	r1, #10
    7e54:	f7ff ff02 	bl	7c5c <meta_evt>
		leecc->status = 0x00;
    7e58:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    7e5a:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    7e5e:	7863      	ldrb	r3, [r4, #1]
    7e60:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    7e62:	78a3      	ldrb	r3, [r4, #2]
    7e64:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    7e66:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    7e68:	2206      	movs	r2, #6
    7e6a:	4641      	mov	r1, r8
    7e6c:	3005      	adds	r0, #5
    7e6e:	f7f9 fec5 	bl	1bfc <memcpy>
		if ((radio_cc->own_addr_type) &&
    7e72:	7be3      	ldrb	r3, [r4, #15]
    7e74:	f107 000b 	add.w	r0, r7, #11
    7e78:	2b00      	cmp	r3, #0
    7e7a:	d1c1      	bne.n	7e00 <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    7e7c:	2206      	movs	r2, #6
    7e7e:	2100      	movs	r1, #0
    7e80:	f7f9 fee8 	bl	1c54 <memset>
    7e84:	e7c6      	b.n	7e14 <le_conn_complete.part.39+0xac>
    7e86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e8a:	bf00      	nop
    7e8c:	20003d30 	.word	0x20003d30
    7e90:	2000082c 	.word	0x2000082c

00007e94 <bt_addr_le_to_str.constprop.70>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    7e94:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    7e96:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    7e98:	b08a      	sub	sp, #40	; 0x28
    7e9a:	4604      	mov	r4, r0
    7e9c:	460e      	mov	r6, r1
    7e9e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    7ea0:	2b03      	cmp	r3, #3
    7ea2:	d820      	bhi.n	7ee6 <bt_addr_le_to_str.constprop.70+0x52>
    7ea4:	e8df f003 	tbb	[pc, r3]
    7ea8:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    7eac:	4911      	ldr	r1, [pc, #68]	; (7ef4 <bt_addr_le_to_str.constprop.70+0x60>)
		strcpy(type, "random");
    7eae:	4628      	mov	r0, r5
    7eb0:	f7f9 fe70 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    7eb4:	7862      	ldrb	r2, [r4, #1]
    7eb6:	9204      	str	r2, [sp, #16]
    7eb8:	78a2      	ldrb	r2, [r4, #2]
    7eba:	9203      	str	r2, [sp, #12]
    7ebc:	78e2      	ldrb	r2, [r4, #3]
    7ebe:	9202      	str	r2, [sp, #8]
    7ec0:	7922      	ldrb	r2, [r4, #4]
    7ec2:	9201      	str	r2, [sp, #4]
    7ec4:	7962      	ldrb	r2, [r4, #5]
    7ec6:	9200      	str	r2, [sp, #0]
    7ec8:	79a3      	ldrb	r3, [r4, #6]
    7eca:	9505      	str	r5, [sp, #20]
    7ecc:	4a0a      	ldr	r2, [pc, #40]	; (7ef8 <bt_addr_le_to_str.constprop.70+0x64>)
    7ece:	211b      	movs	r1, #27
    7ed0:	4630      	mov	r0, r6
    7ed2:	f7f9 f869 	bl	fa8 <snprintk>
}
    7ed6:	b00a      	add	sp, #40	; 0x28
    7ed8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    7eda:	4908      	ldr	r1, [pc, #32]	; (7efc <bt_addr_le_to_str.constprop.70+0x68>)
    7edc:	e7e7      	b.n	7eae <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "public id");
    7ede:	4908      	ldr	r1, [pc, #32]	; (7f00 <bt_addr_le_to_str.constprop.70+0x6c>)
    7ee0:	e7e5      	b.n	7eae <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "random id");
    7ee2:	4908      	ldr	r1, [pc, #32]	; (7f04 <bt_addr_le_to_str.constprop.70+0x70>)
    7ee4:	e7e3      	b.n	7eae <bt_addr_le_to_str.constprop.70+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    7ee6:	4a08      	ldr	r2, [pc, #32]	; (7f08 <bt_addr_le_to_str.constprop.70+0x74>)
    7ee8:	210a      	movs	r1, #10
    7eea:	4628      	mov	r0, r5
    7eec:	f7f9 f85c 	bl	fa8 <snprintk>
    7ef0:	e7e0      	b.n	7eb4 <bt_addr_le_to_str.constprop.70+0x20>
    7ef2:	bf00      	nop
    7ef4:	00014215 	.word	0x00014215
    7ef8:	0001423e 	.word	0x0001423e
    7efc:	0001421c 	.word	0x0001421c
    7f00:	00014223 	.word	0x00014223
    7f04:	0001422d 	.word	0x0001422d
    7f08:	00014237 	.word	0x00014237

00007f0c <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    7f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f10:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    7f12:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    7f14:	4d32      	ldr	r5, [pc, #200]	; (7fe0 <le_adv_ext_report.isra.66+0xd4>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    7f16:	b092      	sub	sp, #72	; 0x48
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7f18:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    7f1a:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7f1c:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    7f1e:	9003      	str	r0, [sp, #12]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7f20:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    7f22:	b25b      	sxtb	r3, r3
    7f24:	9306      	str	r3, [sp, #24]
    7f26:	7823      	ldrb	r3, [r4, #0]
    7f28:	9201      	str	r2, [sp, #4]
    7f2a:	09d9      	lsrs	r1, r3, #7
    7f2c:	9105      	str	r1, [sp, #20]
    7f2e:	f3c3 1180 	ubfx	r1, r3, #6, #1
    7f32:	f003 030f 	and.w	r3, r3, #15
    7f36:	9104      	str	r1, [sp, #16]
    7f38:	9302      	str	r3, [sp, #8]
    7f3a:	9500      	str	r5, [sp, #0]
    7f3c:	4b29      	ldr	r3, [pc, #164]	; (7fe4 <le_adv_ext_report.isra.66+0xd8>)
    7f3e:	4a2a      	ldr	r2, [pc, #168]	; (7fe8 <le_adv_ext_report.isra.66+0xdc>)
    7f40:	492a      	ldr	r1, [pc, #168]	; (7fec <le_adv_ext_report.isra.66+0xe0>)
    7f42:	482b      	ldr	r0, [pc, #172]	; (7ff0 <le_adv_ext_report.isra.66+0xe4>)
    7f44:	f7f9 f822 	bl	f8c <printk>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    7f48:	7823      	ldrb	r3, [r4, #0]
    7f4a:	f003 030f 	and.w	r3, r3, #15
    7f4e:	2b07      	cmp	r3, #7
    7f50:	d143      	bne.n	7fda <le_adv_ext_report.isra.66+0xce>
    7f52:	7863      	ldrb	r3, [r4, #1]
    7f54:	2b00      	cmp	r3, #0
    7f56:	d040      	beq.n	7fda <le_adv_ext_report.isra.66+0xce>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    7f58:	78a3      	ldrb	r3, [r4, #2]
    7f5a:	4924      	ldr	r1, [pc, #144]	; (7fec <le_adv_ext_report.isra.66+0xe0>)
    7f5c:	9503      	str	r5, [sp, #12]
    7f5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    7f62:	099b      	lsrs	r3, r3, #6
    7f64:	9202      	str	r2, [sp, #8]
    7f66:	9301      	str	r3, [sp, #4]
    7f68:	9500      	str	r5, [sp, #0]
    7f6a:	4b1e      	ldr	r3, [pc, #120]	; (7fe4 <le_adv_ext_report.isra.66+0xd8>)
    7f6c:	4a1e      	ldr	r2, [pc, #120]	; (7fe8 <le_adv_ext_report.isra.66+0xdc>)
    7f6e:	4821      	ldr	r0, [pc, #132]	; (7ff4 <le_adv_ext_report.isra.66+0xe8>)
    7f70:	f7f9 f80c 	bl	f8c <printk>
		if (!p->ext_hdr_len) {
    7f74:	78a3      	ldrb	r3, [r4, #2]
    7f76:	0699      	lsls	r1, r3, #26
    7f78:	d02f      	beq.n	7fda <le_adv_ext_report.isra.66+0xce>
		if (h->adv_addr) {
    7f7a:	78e3      	ldrb	r3, [r4, #3]
    7f7c:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    7f7e:	f104 0604 	add.w	r6, r4, #4
		if (h->adv_addr) {
    7f82:	d51c      	bpl.n	7fbe <le_adv_ext_report.isra.66+0xb2>
			addr.type = adv->tx_addr;
    7f84:	7823      	ldrb	r3, [r4, #0]
    7f86:	af12      	add	r7, sp, #72	; 0x48
    7f88:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7f8c:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    7f90:	2206      	movs	r2, #6
    7f92:	4631      	mov	r1, r6
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    7f94:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    7f98:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    7f9c:	f7f9 fe2e 	bl	1bfc <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    7fa0:	4641      	mov	r1, r8
    7fa2:	4638      	mov	r0, r7
    7fa4:	f7ff ff76 	bl	7e94 <bt_addr_le_to_str.constprop.70>
			BT_WARN("AdvA: %s", addr_str);
    7fa8:	9502      	str	r5, [sp, #8]
    7faa:	e88d 0120 	stmia.w	sp, {r5, r8}
    7fae:	4b0d      	ldr	r3, [pc, #52]	; (7fe4 <le_adv_ext_report.isra.66+0xd8>)
    7fb0:	4a0d      	ldr	r2, [pc, #52]	; (7fe8 <le_adv_ext_report.isra.66+0xdc>)
    7fb2:	490e      	ldr	r1, [pc, #56]	; (7fec <le_adv_ext_report.isra.66+0xe0>)
    7fb4:	4810      	ldr	r0, [pc, #64]	; (7ff8 <le_adv_ext_report.isra.66+0xec>)
			ptr += BDADDR_SIZE;
    7fb6:	f104 060a 	add.w	r6, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    7fba:	f7f8 ffe7 	bl	f8c <printk>
		if (h->tx_pwr) {
    7fbe:	78e3      	ldrb	r3, [r4, #3]
    7fc0:	065b      	lsls	r3, r3, #25
    7fc2:	d50a      	bpl.n	7fda <le_adv_ext_report.isra.66+0xce>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    7fc4:	9502      	str	r5, [sp, #8]
    7fc6:	f996 3000 	ldrsb.w	r3, [r6]
    7fca:	9301      	str	r3, [sp, #4]
    7fcc:	9500      	str	r5, [sp, #0]
    7fce:	4b05      	ldr	r3, [pc, #20]	; (7fe4 <le_adv_ext_report.isra.66+0xd8>)
    7fd0:	4a05      	ldr	r2, [pc, #20]	; (7fe8 <le_adv_ext_report.isra.66+0xdc>)
    7fd2:	4906      	ldr	r1, [pc, #24]	; (7fec <le_adv_ext_report.isra.66+0xe0>)
    7fd4:	4809      	ldr	r0, [pc, #36]	; (7ffc <le_adv_ext_report.isra.66+0xf0>)
    7fd6:	f7f8 ffd9 	bl	f8c <printk>
}
    7fda:	b012      	add	sp, #72	; 0x48
    7fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7fe0:	000142a9 	.word	0x000142a9
    7fe4:	00015db8 	.word	0x00015db8
    7fe8:	00015040 	.word	0x00015040
    7fec:	00015047 	.word	0x00015047
    7ff0:	00016015 	.word	0x00016015
    7ff4:	00016062 	.word	0x00016062
    7ff8:	00016093 	.word	0x00016093
    7ffc:	000160ac 	.word	0x000160ac

00008000 <sys_get_le64>:
{
    8000:	4603      	mov	r3, r0
}
    8002:	6800      	ldr	r0, [r0, #0]
    8004:	6859      	ldr	r1, [r3, #4]
    8006:	4770      	bx	lr

00008008 <hci_cmd_handle>:
{
    8008:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    800a:	8981      	ldrh	r1, [r0, #12]
{
    800c:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    800e:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    8010:	2902      	cmp	r1, #2
{
    8012:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    8014:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    8016:	d80b      	bhi.n	8030 <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    8018:	4bbe      	ldr	r3, [pc, #760]	; (8314 <hci_cmd_handle+0x30c>)
    801a:	9301      	str	r3, [sp, #4]
    801c:	9300      	str	r3, [sp, #0]
    801e:	4abe      	ldr	r2, [pc, #760]	; (8318 <hci_cmd_handle+0x310>)
    8020:	4bbe      	ldr	r3, [pc, #760]	; (831c <hci_cmd_handle+0x314>)
    8022:	49bf      	ldr	r1, [pc, #764]	; (8320 <hci_cmd_handle+0x318>)
    8024:	48bf      	ldr	r0, [pc, #764]	; (8324 <hci_cmd_handle+0x31c>)
		BT_ERR("Invalid HCI CMD packet length");
    8026:	f7f8 ffb1 	bl	f8c <printk>
		return NULL;
    802a:	4628      	mov	r0, r5
}
    802c:	b013      	add	sp, #76	; 0x4c
    802e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    8030:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8032:	4ebd      	ldr	r6, [pc, #756]	; (8328 <hci_cmd_handle+0x320>)
    8034:	781a      	ldrb	r2, [r3, #0]
    8036:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    8038:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    803a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    803e:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8040:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    8042:	d907      	bls.n	8054 <hci_cmd_handle+0x4c>
		BT_ERR("Invalid HCI CMD packet length");
    8044:	4bb3      	ldr	r3, [pc, #716]	; (8314 <hci_cmd_handle+0x30c>)
    8046:	9301      	str	r3, [sp, #4]
    8048:	9300      	str	r3, [sp, #0]
    804a:	4ab3      	ldr	r2, [pc, #716]	; (8318 <hci_cmd_handle+0x310>)
    804c:	4bb3      	ldr	r3, [pc, #716]	; (831c <hci_cmd_handle+0x314>)
    804e:	49b4      	ldr	r1, [pc, #720]	; (8320 <hci_cmd_handle+0x318>)
    8050:	48b6      	ldr	r0, [pc, #728]	; (832c <hci_cmd_handle+0x324>)
    8052:	e7e8      	b.n	8026 <hci_cmd_handle+0x1e>
	net_buf_pull(cmd, sizeof(*chdr));
    8054:	2103      	movs	r1, #3
    8056:	f104 0008 	add.w	r0, r4, #8
    805a:	f00a fb36 	bl	126ca <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    805e:	8833      	ldrh	r3, [r6, #0]
    8060:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    8064:	0a9b      	lsrs	r3, r3, #10
    8066:	2b04      	cmp	r3, #4
    8068:	f000 80bc 	beq.w	81e4 <hci_cmd_handle+0x1dc>
    806c:	d809      	bhi.n	8082 <hci_cmd_handle+0x7a>
    806e:	2b01      	cmp	r3, #1
    8070:	d026      	beq.n	80c0 <hci_cmd_handle+0xb8>
    8072:	2b03      	cmp	r3, #3
    8074:	d03b      	beq.n	80ee <hci_cmd_handle+0xe6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    8076:	2101      	movs	r1, #1
    8078:	a807      	add	r0, sp, #28
    807a:	f7ff fe05 	bl	7c88 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    807e:	2301      	movs	r3, #1
    8080:	e298      	b.n	85b4 <hci_cmd_handle+0x5ac>
	switch (BT_OGF(_opcode)) {
    8082:	2b08      	cmp	r3, #8
    8084:	f000 8168 	beq.w	8358 <hci_cmd_handle+0x350>
    8088:	2b3f      	cmp	r3, #63	; 0x3f
    808a:	d1f4      	bne.n	8076 <hci_cmd_handle+0x6e>
	switch (ocf) {
    808c:	3a01      	subs	r2, #1
    808e:	2a09      	cmp	r2, #9
    8090:	d8f1      	bhi.n	8076 <hci_cmd_handle+0x6e>
    8092:	a301      	add	r3, pc, #4	; (adr r3, 8098 <hci_cmd_handle+0x90>)
    8094:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8098:	000088ed 	.word	0x000088ed
    809c:	0000891d 	.word	0x0000891d
    80a0:	00008947 	.word	0x00008947
    80a4:	00008077 	.word	0x00008077
    80a8:	00008077 	.word	0x00008077
    80ac:	0000898d 	.word	0x0000898d
    80b0:	00008077 	.word	0x00008077
    80b4:	0000895f 	.word	0x0000895f
    80b8:	00008999 	.word	0x00008999
    80bc:	00008a07 	.word	0x00008a07
	switch (ocf) {
    80c0:	2a06      	cmp	r2, #6
    80c2:	d006      	beq.n	80d2 <hci_cmd_handle+0xca>
    80c4:	2a1d      	cmp	r2, #29
    80c6:	d1d6      	bne.n	8076 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    80c8:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    80ca:	8818      	ldrh	r0, [r3, #0]
    80cc:	f007 ffc1 	bl	10052 <ll_version_ind_send>
    80d0:	e004      	b.n	80dc <hci_cmd_handle+0xd4>
    80d2:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    80d4:	7899      	ldrb	r1, [r3, #2]
    80d6:	8818      	ldrh	r0, [r3, #0]
    80d8:	f007 ffcf 	bl	1007a <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    80dc:	2800      	cmp	r0, #0
    80de:	bf14      	ite	ne
    80e0:	200c      	movne	r0, #12
    80e2:	2000      	moveq	r0, #0
    80e4:	f7ff fda0 	bl	7c28 <cmd_status>
    80e8:	9007      	str	r0, [sp, #28]
	return evt;
    80ea:	9807      	ldr	r0, [sp, #28]
    80ec:	e79e      	b.n	802c <hci_cmd_handle+0x24>
	switch (ocf) {
    80ee:	2a2d      	cmp	r2, #45	; 0x2d
    80f0:	d03a      	beq.n	8168 <hci_cmd_handle+0x160>
    80f2:	d820      	bhi.n	8136 <hci_cmd_handle+0x12e>
    80f4:	2a01      	cmp	r2, #1
    80f6:	d02b      	beq.n	8150 <hci_cmd_handle+0x148>
    80f8:	2a03      	cmp	r2, #3
    80fa:	d1bc      	bne.n	8076 <hci_cmd_handle+0x6e>
	dup_count = -1;
    80fc:	4b8c      	ldr	r3, [pc, #560]	; (8330 <hci_cmd_handle+0x328>)
    80fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8102:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    8104:	4b8b      	ldr	r3, [pc, #556]	; (8334 <hci_cmd_handle+0x32c>)
    8106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    810a:	f641 71ff 	movw	r1, #8191	; 0x1fff
    810e:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    8112:	4b89      	ldr	r3, [pc, #548]	; (8338 <hci_cmd_handle+0x330>)
    8114:	2000      	movs	r0, #0
    8116:	2100      	movs	r1, #0
    8118:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    811c:	4b87      	ldr	r3, [pc, #540]	; (833c <hci_cmd_handle+0x334>)
    811e:	201f      	movs	r0, #31
    8120:	2100      	movs	r1, #0
    8122:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    8126:	f007 fc5f 	bl	f9e8 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    812a:	2101      	movs	r1, #1
    812c:	a807      	add	r0, sp, #28
    812e:	f7ff fdab 	bl	7c88 <cmd_complete>
	ccst->status = 0x00;
    8132:	2300      	movs	r3, #0
    8134:	e23e      	b.n	85b4 <hci_cmd_handle+0x5ac>
	switch (ocf) {
    8136:	2a7b      	cmp	r2, #123	; 0x7b
    8138:	d02c      	beq.n	8194 <hci_cmd_handle+0x18c>
    813a:	2a7c      	cmp	r2, #124	; 0x7c
    813c:	d041      	beq.n	81c2 <hci_cmd_handle+0x1ba>
    813e:	2a63      	cmp	r2, #99	; 0x63
    8140:	d199      	bne.n	8076 <hci_cmd_handle+0x6e>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    8142:	68a0      	ldr	r0, [r4, #8]
    8144:	f7ff ff5c 	bl	8000 <sys_get_le64>
    8148:	4b7b      	ldr	r3, [pc, #492]	; (8338 <hci_cmd_handle+0x330>)
	le_event_mask = sys_get_le64(cmd->events);
    814a:	e9c3 0100 	strd	r0, r1, [r3]
    814e:	e7ec      	b.n	812a <hci_cmd_handle+0x122>
	event_mask = sys_get_le64(cmd->events);
    8150:	68a0      	ldr	r0, [r4, #8]
    8152:	f7ff ff55 	bl	8000 <sys_get_le64>
    8156:	4b77      	ldr	r3, [pc, #476]	; (8334 <hci_cmd_handle+0x32c>)
    8158:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    815c:	4611      	mov	r1, r2
    815e:	a807      	add	r0, sp, #28
    8160:	f7ff fd92 	bl	7c88 <cmd_complete>
	ccst->status = 0x00;
    8164:	7005      	strb	r5, [r0, #0]
    8166:	e7c0      	b.n	80ea <hci_cmd_handle+0xe2>
    8168:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    816a:	2104      	movs	r1, #4
    816c:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    816e:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    8170:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    8172:	f7ff fd89 	bl	7c88 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8176:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8178:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    817a:	1cc2      	adds	r2, r0, #3
    817c:	4639      	mov	r1, r7
    817e:	4630      	mov	r0, r6
    8180:	f007 ff8f 	bl	100a2 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    8184:	2800      	cmp	r0, #0
    8186:	bf14      	ite	ne
    8188:	2302      	movne	r3, #2
    818a:	2300      	moveq	r3, #0
    818c:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    818e:	f8a4 5001 	strh.w	r5, [r4, #1]
    8192:	e7aa      	b.n	80ea <hci_cmd_handle+0xe2>
	handle = sys_le16_to_cpu(cmd->handle);
    8194:	68a3      	ldr	r3, [r4, #8]
    8196:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    8198:	a908      	add	r1, sp, #32
    819a:	b2a0      	uxth	r0, r4
    819c:	f007 ff8b 	bl	100b6 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    81a0:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    81a2:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    81a4:	a807      	add	r0, sp, #28
    81a6:	f7ff fd6f 	bl	7c88 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    81aa:	2d00      	cmp	r5, #0
    81ac:	bf14      	ite	ne
    81ae:	230c      	movne	r3, #12
    81b0:	2300      	moveq	r3, #0
    81b2:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    81b4:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    81b8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    81bc:	f8a0 3003 	strh.w	r3, [r0, #3]
    81c0:	e793      	b.n	80ea <hci_cmd_handle+0xe2>
    81c2:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    81c4:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    81c6:	8859      	ldrh	r1, [r3, #2]
    81c8:	b2a0      	uxth	r0, r4
    81ca:	f007 ff88 	bl	100de <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    81ce:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    81d0:	2103      	movs	r1, #3
    81d2:	a807      	add	r0, sp, #28
    81d4:	f7ff fd58 	bl	7c88 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    81d8:	2d00      	cmp	r5, #0
    81da:	bf14      	ite	ne
    81dc:	230c      	movne	r3, #12
    81de:	2300      	moveq	r3, #0
    81e0:	7003      	strb	r3, [r0, #0]
    81e2:	e27d      	b.n	86e0 <hci_cmd_handle+0x6d8>
	switch (ocf) {
    81e4:	3a01      	subs	r2, #1
    81e6:	2a08      	cmp	r2, #8
    81e8:	f63f af45 	bhi.w	8076 <hci_cmd_handle+0x6e>
    81ec:	a301      	add	r3, pc, #4	; (adr r3, 81f4 <hci_cmd_handle+0x1ec>)
    81ee:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    81f2:	bf00      	nop
    81f4:	00008219 	.word	0x00008219
    81f8:	00008243 	.word	0x00008243
    81fc:	000082f7 	.word	0x000082f7
    8200:	00008077 	.word	0x00008077
    8204:	00008077 	.word	0x00008077
    8208:	00008077 	.word	0x00008077
    820c:	00008077 	.word	0x00008077
    8210:	00008077 	.word	0x00008077
    8214:	00008341 	.word	0x00008341
	rp = cmd_complete(evt, sizeof(*rp));
    8218:	2109      	movs	r1, #9
    821a:	a807      	add	r0, sp, #28
    821c:	f7ff fd34 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    8220:	2300      	movs	r3, #0
    8222:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    8224:	7083      	strb	r3, [r0, #2]
    8226:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8228:	f06f 030e 	mvn.w	r3, #14
    822c:	7143      	strb	r3, [r0, #5]
    822e:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    8230:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8232:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    8234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    8238:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    823a:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    823c:	71c3      	strb	r3, [r0, #7]
    823e:	7203      	strb	r3, [r0, #8]
    8240:	e753      	b.n	80ea <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8242:	2141      	movs	r1, #65	; 0x41
    8244:	a807      	add	r0, sp, #28
    8246:	f7ff fd1f 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    824a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    824c:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    824e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    8250:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8254:	f7f9 fcfe 	bl	1c54 <memset>
	rp->commands[2] |= BIT(7);
    8258:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    825a:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    825c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8260:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    8262:	79a3      	ldrb	r3, [r4, #6]
    8264:	f063 033f 	orn	r3, r3, #63	; 0x3f
    8268:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    826a:	7ae3      	ldrb	r3, [r4, #11]
    826c:	f043 0304 	orr.w	r3, r3, #4
    8270:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    8272:	7be3      	ldrb	r3, [r4, #15]
    8274:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    8278:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    827a:	7c23      	ldrb	r3, [r4, #16]
    827c:	f043 0302 	orr.w	r3, r3, #2
    8280:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    8282:	7de3      	ldrb	r3, [r4, #23]
    8284:	f043 0304 	orr.w	r3, r3, #4
    8288:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    828a:	7ea3      	ldrb	r3, [r4, #26]
    828c:	f043 0317 	orr.w	r3, r3, #23
    8290:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    8292:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    8294:	f043 0309 	orr.w	r3, r3, #9
    8298:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    829a:	7863      	ldrb	r3, [r4, #1]
    829c:	f043 0320 	orr.w	r3, r3, #32
    82a0:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    82a2:	23ff      	movs	r3, #255	; 0xff
    82a4:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    82a6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    82aa:	f063 030f 	orn	r3, r3, #15
    82ae:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    82b2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    82b6:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    82ba:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    82be:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    82c0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    82c4:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    82c8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    82cc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    82d0:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    82d4:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    82d8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    82dc:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    82e0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    82e4:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    82e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    82ec:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    82f0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    82f4:	e6f9      	b.n	80ea <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    82f6:	2109      	movs	r1, #9
    82f8:	a807      	add	r0, sp, #28
    82fa:	f7ff fcc5 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    82fe:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8300:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8302:	2208      	movs	r2, #8
	rp->status = 0x00;
    8304:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8308:	f7f9 fca4 	bl	1c54 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    830c:	2360      	movs	r3, #96	; 0x60
    830e:	7163      	strb	r3, [r4, #5]
    8310:	e6eb      	b.n	80ea <hci_cmd_handle+0xe2>
    8312:	bf00      	nop
    8314:	000142a9 	.word	0x000142a9
    8318:	00014ff8 	.word	0x00014ff8
    831c:	00015d84 	.word	0x00015d84
    8320:	00015047 	.word	0x00015047
    8324:	00015ec7 	.word	0x00015ec7
    8328:	20000828 	.word	0x20000828
    832c:	00015eed 	.word	0x00015eed
    8330:	20000830 	.word	0x20000830
    8334:	20003d28 	.word	0x20003d28
    8338:	200008b8 	.word	0x200008b8
    833c:	20003d30 	.word	0x20003d30
	rp = cmd_complete(evt, sizeof(*rp));
    8340:	2107      	movs	r1, #7
    8342:	a807      	add	r0, sp, #28
    8344:	f7ff fca0 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    8348:	4601      	mov	r1, r0
    834a:	2300      	movs	r3, #0
    834c:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    8350:	4618      	mov	r0, r3
    8352:	f7ff fac5 	bl	78e0 <ll_addr_get>
    8356:	e6c8      	b.n	80ea <hci_cmd_handle+0xe2>
	switch (ocf) {
    8358:	3a01      	subs	r2, #1
    835a:	2a4d      	cmp	r2, #77	; 0x4d
    835c:	f63f ae8b 	bhi.w	8076 <hci_cmd_handle+0x6e>
    8360:	a301      	add	r3, pc, #4	; (adr r3, 8368 <hci_cmd_handle+0x360>)
    8362:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8366:	bf00      	nop
    8368:	000084a1 	.word	0x000084a1
    836c:	000084ab 	.word	0x000084ab
    8370:	000084c3 	.word	0x000084c3
    8374:	00008077 	.word	0x00008077
    8378:	000084e7 	.word	0x000084e7
    837c:	00008077 	.word	0x00008077
    8380:	00008077 	.word	0x00008077
    8384:	00008077 	.word	0x00008077
    8388:	00008077 	.word	0x00008077
    838c:	00008077 	.word	0x00008077
    8390:	0000858b 	.word	0x0000858b
    8394:	000085b9 	.word	0x000085b9
    8398:	000085d9 	.word	0x000085d9
    839c:	00008603 	.word	0x00008603
    83a0:	000084f3 	.word	0x000084f3
    83a4:	00008509 	.word	0x00008509
    83a8:	0000851b 	.word	0x0000851b
    83ac:	00008523 	.word	0x00008523
    83b0:	000086a3 	.word	0x000086a3
    83b4:	00008663 	.word	0x00008663
    83b8:	0000867f 	.word	0x0000867f
    83bc:	00008699 	.word	0x00008699
    83c0:	0000852b 	.word	0x0000852b
    83c4:	00008551 	.word	0x00008551
    83c8:	0000866b 	.word	0x0000866b
    83cc:	00008077 	.word	0x00008077
    83d0:	00008077 	.word	0x00008077
    83d4:	00008567 	.word	0x00008567
    83d8:	00008077 	.word	0x00008077
    83dc:	00008077 	.word	0x00008077
    83e0:	00008077 	.word	0x00008077
    83e4:	000086bd 	.word	0x000086bd
    83e8:	000086e7 	.word	0x000086e7
    83ec:	000086f5 	.word	0x000086f5
    83f0:	00008705 	.word	0x00008705
    83f4:	0000871d 	.word	0x0000871d
    83f8:	00008077 	.word	0x00008077
    83fc:	00008077 	.word	0x00008077
    8400:	00008835 	.word	0x00008835
    8404:	00008843 	.word	0x00008843
    8408:	0000884b 	.word	0x0000884b
    840c:	0000885b 	.word	0x0000885b
    8410:	0000886d 	.word	0x0000886d
    8414:	0000888b 	.word	0x0000888b
    8418:	000088a9 	.word	0x000088a9
    841c:	000088bf 	.word	0x000088bf
    8420:	00008739 	.word	0x00008739
    8424:	00008765 	.word	0x00008765
    8428:	000087bb 	.word	0x000087bb
    842c:	000087d9 	.word	0x000087d9
    8430:	00008077 	.word	0x00008077
    8434:	00008077 	.word	0x00008077
    8438:	00008077 	.word	0x00008077
    843c:	00008077 	.word	0x00008077
    8440:	00008077 	.word	0x00008077
    8444:	00008077 	.word	0x00008077
    8448:	00008077 	.word	0x00008077
    844c:	00008077 	.word	0x00008077
    8450:	00008077 	.word	0x00008077
    8454:	00008077 	.word	0x00008077
    8458:	00008077 	.word	0x00008077
    845c:	00008077 	.word	0x00008077
    8460:	00008077 	.word	0x00008077
    8464:	00008077 	.word	0x00008077
    8468:	00008077 	.word	0x00008077
    846c:	00008077 	.word	0x00008077
    8470:	00008077 	.word	0x00008077
    8474:	00008077 	.word	0x00008077
    8478:	00008077 	.word	0x00008077
    847c:	00008077 	.word	0x00008077
    8480:	00008077 	.word	0x00008077
    8484:	00008077 	.word	0x00008077
    8488:	00008077 	.word	0x00008077
    848c:	00008077 	.word	0x00008077
    8490:	000088d3 	.word	0x000088d3
    8494:	00008077 	.word	0x00008077
    8498:	00008077 	.word	0x00008077
    849c:	000088c9 	.word	0x000088c9
	le_event_mask = sys_get_le64(cmd->events);
    84a0:	68a0      	ldr	r0, [r4, #8]
    84a2:	f7ff fdad 	bl	8000 <sys_get_le64>
    84a6:	4baa      	ldr	r3, [pc, #680]	; (8750 <hci_cmd_handle+0x748>)
    84a8:	e64f      	b.n	814a <hci_cmd_handle+0x142>
	rp = cmd_complete(evt, sizeof(*rp));
    84aa:	2104      	movs	r1, #4
    84ac:	a807      	add	r0, sp, #28
    84ae:	f7ff fbeb 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    84b2:	2300      	movs	r3, #0
    84b4:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    84b6:	221b      	movs	r2, #27
    84b8:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    84ba:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    84bc:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    84be:	70c3      	strb	r3, [r0, #3]
    84c0:	e613      	b.n	80ea <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    84c2:	2109      	movs	r1, #9
    84c4:	a807      	add	r0, sp, #28
    84c6:	f7ff fbdf 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    84ca:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    84cc:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    84ce:	2208      	movs	r2, #8
	rp->status = 0x00;
    84d0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    84d4:	f7f9 fbbe 	bl	1c54 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    84d8:	23ff      	movs	r3, #255	; 0xff
    84da:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    84dc:	2341      	movs	r3, #65	; 0x41
    84de:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    84e0:	2301      	movs	r3, #1
    84e2:	70e3      	strb	r3, [r4, #3]
    84e4:	e601      	b.n	80ea <hci_cmd_handle+0xe2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    84e6:	68a1      	ldr	r1, [r4, #8]
    84e8:	2001      	movs	r0, #1
    84ea:	f7ff fa13 	bl	7914 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    84ee:	4604      	mov	r4, r0
    84f0:	e0af      	b.n	8652 <hci_cmd_handle+0x64a>
	rp = cmd_complete(evt, sizeof(*rp));
    84f2:	2102      	movs	r1, #2
    84f4:	a807      	add	r0, sp, #28
    84f6:	f7ff fbc7 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    84fa:	2300      	movs	r3, #0
    84fc:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    84fe:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    8500:	f008 fd34 	bl	10f6c <ll_wl_size_get>
    8504:	7060      	strb	r0, [r4, #1]
    8506:	e5f0      	b.n	80ea <hci_cmd_handle+0xe2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8508:	2101      	movs	r1, #1
    850a:	a807      	add	r0, sp, #28
    850c:	f7ff fbbc 	bl	7c88 <cmd_complete>
    8510:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    8512:	f008 fd2d 	bl	10f70 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    8516:	7020      	strb	r0, [r4, #0]
    8518:	e5e7      	b.n	80ea <hci_cmd_handle+0xe2>
	status = ll_wl_add(&cmd->addr);
    851a:	68a0      	ldr	r0, [r4, #8]
    851c:	f008 fdd4 	bl	110c8 <ll_wl_add>
    8520:	e7e5      	b.n	84ee <hci_cmd_handle+0x4e6>
	status = ll_wl_remove(&cmd->addr);
    8522:	68a0      	ldr	r0, [r4, #8]
    8524:	f008 fd44 	bl	10fb0 <ll_wl_remove>
    8528:	e7e1      	b.n	84ee <hci_cmd_handle+0x4e6>
    852a:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    852c:	2300      	movs	r3, #0
    852e:	aa08      	add	r2, sp, #32
    8530:	f100 0110 	add.w	r1, r0, #16
    8534:	f009 fa42 	bl	119bc <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    8538:	2111      	movs	r1, #17
    853a:	a807      	add	r0, sp, #28
    853c:	f7ff fba4 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    8540:	2300      	movs	r3, #0
    8542:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    8546:	2210      	movs	r2, #16
    8548:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    854a:	f7f9 fb57 	bl	1bfc <memcpy>
    854e:	e5cc      	b.n	80ea <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8550:	2109      	movs	r1, #9
    8552:	a807      	add	r0, sp, #28
    8554:	f7ff fb98 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    8558:	2300      	movs	r3, #0
    855a:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    855e:	2108      	movs	r1, #8
    8560:	f7ff f9f8 	bl	7954 <bt_rand>
    8564:	e5c1      	b.n	80ea <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8566:	2109      	movs	r1, #9
    8568:	a807      	add	r0, sp, #28
    856a:	f7ff fb8d 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    856e:	4601      	mov	r1, r0
    8570:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8572:	4602      	mov	r2, r0
	rp->status = 0x00;
    8574:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    8578:	4876      	ldr	r0, [pc, #472]	; (8754 <hci_cmd_handle+0x74c>)
    857a:	f7ff fb41 	bl	7c00 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    857e:	f240 203f 	movw	r0, #575	; 0x23f
    8582:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    8584:	f7ff fb3c 	bl	7c00 <sys_put_le32>
    8588:	e5af      	b.n	80ea <hci_cmd_handle+0xe2>
    858a:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    858c:	7963      	ldrb	r3, [r4, #5]
    858e:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    8592:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    8596:	7820      	ldrb	r0, [r4, #0]
    8598:	79a4      	ldrb	r4, [r4, #6]
    859a:	9400      	str	r4, [sp, #0]
    859c:	f008 faaa 	bl	10af4 <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    85a0:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    85a2:	2101      	movs	r1, #1
    85a4:	a807      	add	r0, sp, #28
    85a6:	f7ff fb6f 	bl	7c88 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    85aa:	2c00      	cmp	r4, #0
    85ac:	bf18      	it	ne
    85ae:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    85b0:	bf08      	it	eq
    85b2:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    85b4:	7003      	strb	r3, [r0, #0]
    85b6:	e598      	b.n	80ea <hci_cmd_handle+0xe2>
    85b8:	68a2      	ldr	r2, [r4, #8]
    85ba:	4b67      	ldr	r3, [pc, #412]	; (8758 <hci_cmd_handle+0x750>)
	if (cmd->enable && cmd->filter_dup) {
    85bc:	7810      	ldrb	r0, [r2, #0]
    85be:	b140      	cbz	r0, 85d2 <hci_cmd_handle+0x5ca>
    85c0:	7852      	ldrb	r2, [r2, #1]
    85c2:	b132      	cbz	r2, 85d2 <hci_cmd_handle+0x5ca>
		dup_count = 0;
    85c4:	2200      	movs	r2, #0
    85c6:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    85c8:	4b64      	ldr	r3, [pc, #400]	; (875c <hci_cmd_handle+0x754>)
		dup_count = -1;
    85ca:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    85cc:	f008 fab2 	bl	10b34 <ll_scan_enable>
    85d0:	e7e6      	b.n	85a0 <hci_cmd_handle+0x598>
		dup_count = -1;
    85d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    85d6:	e7f8      	b.n	85ca <hci_cmd_handle+0x5c2>
    85d8:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    85da:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    85de:	7963      	ldrb	r3, [r4, #5]
    85e0:	7922      	ldrb	r2, [r4, #4]
    85e2:	8861      	ldrh	r1, [r4, #2]
    85e4:	8820      	ldrh	r0, [r4, #0]
    85e6:	9504      	str	r5, [sp, #16]
    85e8:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    85ec:	9503      	str	r5, [sp, #12]
    85ee:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    85f2:	9502      	str	r5, [sp, #8]
    85f4:	7b25      	ldrb	r5, [r4, #12]
    85f6:	9501      	str	r5, [sp, #4]
    85f8:	3406      	adds	r4, #6
    85fa:	9400      	str	r4, [sp, #0]
    85fc:	f008 fad4 	bl	10ba8 <ll_create_connection>
    8600:	e56c      	b.n	80dc <hci_cmd_handle+0xd4>
	status = ll_connect_disable();
    8602:	f008 f8e9 	bl	107d8 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    8606:	4606      	mov	r6, r0
    8608:	bb48      	cbnz	r0, 865e <hci_cmd_handle+0x656>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    860a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    860e:	2001      	movs	r0, #1
    8610:	f7fb fa6c 	bl	3aec <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8614:	4a52      	ldr	r2, [pc, #328]	; (8760 <hci_cmd_handle+0x758>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8616:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8618:	e9d2 4500 	ldrd	r4, r5, [r2]
    861c:	2400      	movs	r4, #0
    861e:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    8622:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8626:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8628:	d004      	beq.n	8634 <hci_cmd_handle+0x62c>
    862a:	4632      	mov	r2, r6
    862c:	4631      	mov	r1, r6
    862e:	2002      	movs	r0, #2
    8630:	f7ff fb9a 	bl	7d68 <le_conn_complete.part.39>
		if ((*evt)->len) {
    8634:	9807      	ldr	r0, [sp, #28]
    8636:	8984      	ldrh	r4, [r0, #12]
    8638:	b14c      	cbz	r4, 864e <hci_cmd_handle+0x646>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    863a:	2101      	movs	r1, #1
    863c:	a808      	add	r0, sp, #32
    863e:	f7ff fb23 	bl	7c88 <cmd_complete>
			ccst->status = cmd_status;
    8642:	2300      	movs	r3, #0
    8644:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    8646:	9808      	ldr	r0, [sp, #32]
    8648:	f7fb f878 	bl	373c <bt_recv_prio>
    864c:	e54d      	b.n	80ea <hci_cmd_handle+0xe2>
			net_buf_unref(*evt);
    864e:	f009 ffeb 	bl	12628 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8652:	2101      	movs	r1, #1
    8654:	a807      	add	r0, sp, #28
    8656:	f7ff fb17 	bl	7c88 <cmd_complete>
	ccst->status = status;
    865a:	7004      	strb	r4, [r0, #0]
    865c:	e545      	b.n	80ea <hci_cmd_handle+0xe2>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    865e:	240c      	movs	r4, #12
    8660:	e7f7      	b.n	8652 <hci_cmd_handle+0x64a>
	status = ll_chm_update(&cmd->ch_map[0]);
    8662:	68a0      	ldr	r0, [r4, #8]
    8664:	f007 fc8a 	bl	ff7c <ll_chm_update>
    8668:	e79a      	b.n	85a0 <hci_cmd_handle+0x598>
    866a:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    866c:	f100 030c 	add.w	r3, r0, #12
    8670:	f100 020a 	add.w	r2, r0, #10
    8674:	1c81      	adds	r1, r0, #2
    8676:	8800      	ldrh	r0, [r0, #0]
    8678:	f007 ff34 	bl	104e4 <ll_enc_req_send>
    867c:	e52e      	b.n	80dc <hci_cmd_handle+0xd4>
	handle = sys_le16_to_cpu(cmd->handle);
    867e:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8680:	2108      	movs	r1, #8
    8682:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8684:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8686:	f7ff faff 	bl	7c88 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    868a:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    868c:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    868e:	1cc1      	adds	r1, r0, #3
    8690:	4630      	mov	r0, r6
    8692:	f007 fcb5 	bl	10000 <ll_chm_get>
    8696:	e575      	b.n	8184 <hci_cmd_handle+0x17c>
	handle = sys_le16_to_cpu(cmd->handle);
    8698:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    869a:	8818      	ldrh	r0, [r3, #0]
    869c:	f007 fcc5 	bl	1002a <ll_feature_req_send>
    86a0:	e51c      	b.n	80dc <hci_cmd_handle+0xd4>
    86a2:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    86a4:	8911      	ldrh	r1, [r2, #8]
    86a6:	8893      	ldrh	r3, [r2, #4]
    86a8:	8810      	ldrh	r0, [r2, #0]
    86aa:	9101      	str	r1, [sp, #4]
    86ac:	88d2      	ldrh	r2, [r2, #6]
    86ae:	9200      	str	r2, [sp, #0]
    86b0:	2200      	movs	r2, #0
    86b2:	4611      	mov	r1, r2
    86b4:	f007 fbea 	bl	fe8c <ll_conn_update>
	*evt = cmd_status(status);
    86b8:	b2c0      	uxtb	r0, r0
    86ba:	e513      	b.n	80e4 <hci_cmd_handle+0xdc>
    86bc:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    86be:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    86c0:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    86c2:	8893      	ldrh	r3, [r2, #4]
    86c4:	9101      	str	r1, [sp, #4]
    86c6:	88d2      	ldrh	r2, [r2, #6]
    86c8:	9200      	str	r2, [sp, #0]
    86ca:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    86cc:	2102      	movs	r1, #2
    86ce:	b2a0      	uxth	r0, r4
    86d0:	f007 fbdc 	bl	fe8c <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    86d4:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    86d6:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    86d8:	a807      	add	r0, sp, #28
    86da:	f7ff fad5 	bl	7c88 <cmd_complete>
	rp->status = status;
    86de:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    86e0:	f8a0 4001 	strh.w	r4, [r0, #1]
    86e4:	e501      	b.n	80ea <hci_cmd_handle+0xe2>
    86e6:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    86e8:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    86ea:	789a      	ldrb	r2, [r3, #2]
    86ec:	2300      	movs	r3, #0
    86ee:	9301      	str	r3, [sp, #4]
    86f0:	9300      	str	r3, [sp, #0]
    86f2:	e7eb      	b.n	86cc <hci_cmd_handle+0x6c4>
    86f4:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    86f6:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    86f8:	889a      	ldrh	r2, [r3, #4]
    86fa:	8859      	ldrh	r1, [r3, #2]
    86fc:	b2a0      	uxth	r0, r4
    86fe:	f007 fd04 	bl	1010a <ll_length_req_send>
    8702:	e564      	b.n	81ce <hci_cmd_handle+0x1c6>
	rp = cmd_complete(evt, sizeof(*rp));
    8704:	2105      	movs	r1, #5
    8706:	a807      	add	r0, sp, #28
    8708:	f7ff fabe 	bl	7c88 <cmd_complete>
    870c:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    870e:	1cc1      	adds	r1, r0, #3
    8710:	3001      	adds	r0, #1
    8712:	f007 fd1d 	bl	10150 <ll_length_default_get>
	rp->status = 0x00;
    8716:	2300      	movs	r3, #0
    8718:	7023      	strb	r3, [r4, #0]
    871a:	e4e6      	b.n	80ea <hci_cmd_handle+0xe2>
    871c:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    871e:	8859      	ldrh	r1, [r3, #2]
    8720:	8818      	ldrh	r0, [r3, #0]
    8722:	f007 fd1f 	bl	10164 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8726:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    8728:	2101      	movs	r1, #1
    872a:	a807      	add	r0, sp, #28
    872c:	f7ff faac 	bl	7c88 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8730:	2c00      	cmp	r4, #0
    8732:	bf18      	it	ne
    8734:	231e      	movne	r3, #30
    8736:	e73b      	b.n	85b0 <hci_cmd_handle+0x5a8>
	rp = cmd_complete(evt, sizeof(*rp));
    8738:	2109      	movs	r1, #9
    873a:	a807      	add	r0, sp, #28
    873c:	f7ff faa4 	bl	7c88 <cmd_complete>
    8740:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    8742:	1dc3      	adds	r3, r0, #7
    8744:	1d42      	adds	r2, r0, #5
    8746:	1cc1      	adds	r1, r0, #3
    8748:	3001      	adds	r0, #1
    874a:	f007 fd15 	bl	10178 <ll_length_max_get>
    874e:	e7e2      	b.n	8716 <hci_cmd_handle+0x70e>
    8750:	20003d30 	.word	0x20003d30
    8754:	130f3370 	.word	0x130f3370
    8758:	20000830 	.word	0x20000830
    875c:	20000834 	.word	0x20000834
    8760:	20003d28 	.word	0x20003d28
	handle = sys_le16_to_cpu(cmd->handle);
    8764:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8766:	2105      	movs	r1, #5
    8768:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    876a:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    876c:	f7ff fa8c 	bl	7c88 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8770:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8772:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    8774:	1d02      	adds	r2, r0, #4
    8776:	1cc1      	adds	r1, r0, #3
    8778:	4630      	mov	r0, r6
    877a:	f007 fd06 	bl	1018a <ll_phy_get>
	return __builtin_ffs(op);
    877e:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    8780:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8784:	2800      	cmp	r0, #0
    8786:	bf14      	ite	ne
    8788:	230c      	movne	r3, #12
    878a:	2300      	moveq	r3, #0
    878c:	7023      	strb	r3, [r4, #0]
    878e:	2a00      	cmp	r2, #0
    8790:	fa92 f3a2 	rbit	r3, r2
    8794:	fab3 f383 	clz	r3, r3
    8798:	7922      	ldrb	r2, [r4, #4]
    879a:	bf08      	it	eq
    879c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    87a0:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    87a2:	70e3      	strb	r3, [r4, #3]
    87a4:	2a00      	cmp	r2, #0
    87a6:	fa92 f3a2 	rbit	r3, r2
    87aa:	fab3 f383 	clz	r3, r3
    87ae:	bf08      	it	eq
    87b0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    87b4:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    87b6:	7123      	strb	r3, [r4, #4]
    87b8:	e497      	b.n	80ea <hci_cmd_handle+0xe2>
    87ba:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    87bc:	781a      	ldrb	r2, [r3, #0]
    87be:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    87c0:	bf44      	itt	mi
    87c2:	2107      	movmi	r1, #7
    87c4:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    87c6:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    87c8:	bf44      	itt	mi
    87ca:	2207      	movmi	r2, #7
    87cc:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    87ce:	7899      	ldrb	r1, [r3, #2]
    87d0:	7858      	ldrb	r0, [r3, #1]
    87d2:	f007 fcef 	bl	101b4 <ll_phy_default_set>
    87d6:	e7a6      	b.n	8726 <hci_cmd_handle+0x71e>
    87d8:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    87da:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    87dc:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    87de:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    87e2:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    87e4:	bf44      	itt	mi
    87e6:	2103      	movmi	r1, #3
    87e8:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    87ea:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    87ec:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    87ee:	bf44      	itt	mi
    87f0:	2203      	movmi	r2, #3
    87f2:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    87f4:	074d      	lsls	r5, r1, #29
    87f6:	d002      	beq.n	87fe <hci_cmd_handle+0x7f6>
	    !(cmd->rx_phys & 0x07)) {
    87f8:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    87fa:	075a      	lsls	r2, r3, #29
    87fc:	d105      	bne.n	880a <hci_cmd_handle+0x802>
		ccst = cmd_complete(evt, sizeof(*ccst));
    87fe:	2101      	movs	r1, #1
    8800:	a807      	add	r0, sp, #28
    8802:	f7ff fa41 	bl	7c88 <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    8806:	2312      	movs	r3, #18
    8808:	e6d4      	b.n	85b4 <hci_cmd_handle+0x5ac>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    880a:	ea41 0203 	orr.w	r2, r1, r3
    880e:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    8812:	d005      	beq.n	8820 <hci_cmd_handle+0x818>
		ccst = cmd_complete(evt, sizeof(*ccst));
    8814:	2101      	movs	r1, #1
    8816:	a807      	add	r0, sp, #28
    8818:	f7ff fa36 	bl	7c88 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    881c:	2311      	movs	r3, #17
    881e:	e6c9      	b.n	85b4 <hci_cmd_handle+0x5ac>
	if (phy_opts & 0x03) {
    8820:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    8824:	bf1c      	itt	ne
    8826:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    882a:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    882e:	f007 fccb 	bl	101c8 <ll_phy_req_send>
    8832:	e453      	b.n	80dc <hci_cmd_handle+0xd4>
    8834:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    8836:	f100 0217 	add.w	r2, r0, #23
    883a:	1dc1      	adds	r1, r0, #7
    883c:	f008 fe4e 	bl	114dc <ll_rl_add>
    8840:	e655      	b.n	84ee <hci_cmd_handle+0x4e6>
	status = ll_rl_remove(&cmd->peer_id_addr);
    8842:	68a0      	ldr	r0, [r4, #8]
    8844:	f008 feec 	bl	11620 <ll_rl_remove>
    8848:	e651      	b.n	84ee <hci_cmd_handle+0x4e6>
	ccst = cmd_complete(evt, sizeof(*ccst));
    884a:	2101      	movs	r1, #1
    884c:	a807      	add	r0, sp, #28
    884e:	f7ff fa1b 	bl	7c88 <cmd_complete>
    8852:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    8854:	f008 fe28 	bl	114a8 <ll_rl_clear>
    8858:	e65d      	b.n	8516 <hci_cmd_handle+0x50e>
	rp = cmd_complete(evt, sizeof(*rp));
    885a:	2102      	movs	r1, #2
    885c:	a807      	add	r0, sp, #28
    885e:	f7ff fa13 	bl	7c88 <cmd_complete>
    8862:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    8864:	f008 fe1e 	bl	114a4 <ll_rl_size_get>
    8868:	7060      	strb	r0, [r4, #1]
    886a:	e754      	b.n	8716 <hci_cmd_handle+0x70e>
    886c:	2207      	movs	r2, #7
    886e:	68a1      	ldr	r1, [r4, #8]
    8870:	a808      	add	r0, sp, #32
    8872:	f7f9 f9c3 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    8876:	2107      	movs	r1, #7
    8878:	a807      	add	r0, sp, #28
    887a:	f7ff fa05 	bl	7c88 <cmd_complete>
    887e:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    8880:	1c41      	adds	r1, r0, #1
    8882:	a808      	add	r0, sp, #32
    8884:	f008 ff5a 	bl	1173c <ll_rl_crpa_get>
    8888:	e645      	b.n	8516 <hci_cmd_handle+0x50e>
    888a:	2207      	movs	r2, #7
    888c:	68a1      	ldr	r1, [r4, #8]
    888e:	a808      	add	r0, sp, #32
    8890:	f7f9 f9b4 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    8894:	2107      	movs	r1, #7
    8896:	a807      	add	r0, sp, #28
    8898:	f7ff f9f6 	bl	7c88 <cmd_complete>
    889c:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    889e:	1c41      	adds	r1, r0, #1
    88a0:	a808      	add	r0, sp, #32
    88a2:	f008 ff6b 	bl	1177c <ll_rl_lrpa_get>
    88a6:	e636      	b.n	8516 <hci_cmd_handle+0x50e>
	u8_t enable = cmd->enable;
    88a8:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    88aa:	2101      	movs	r1, #1
    88ac:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    88ae:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    88b0:	f7ff f9ea 	bl	7c88 <cmd_complete>
    88b4:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    88b6:	4628      	mov	r0, r5
    88b8:	f008 ff78 	bl	117ac <ll_rl_enable>
    88bc:	e62b      	b.n	8516 <hci_cmd_handle+0x50e>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    88be:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    88c0:	8818      	ldrh	r0, [r3, #0]
    88c2:	f008 ff85 	bl	117d0 <ll_rl_timeout_set>
    88c6:	e430      	b.n	812a <hci_cmd_handle+0x122>
    88c8:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    88ca:	79c1      	ldrb	r1, [r0, #7]
    88cc:	f008 ff88 	bl	117e0 <ll_priv_mode_set>
    88d0:	e60d      	b.n	84ee <hci_cmd_handle+0x4e6>
	rp = cmd_complete(evt, sizeof(*rp));
    88d2:	2103      	movs	r1, #3
    88d4:	a807      	add	r0, sp, #28
    88d6:	f7ff f9d7 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    88da:	4601      	mov	r1, r0
    88dc:	2300      	movs	r3, #0
    88de:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    88e2:	3001      	adds	r0, #1
    88e4:	f7ff f832 	bl	794c <ll_tx_pwr_get>
    88e8:	f7ff bbff 	b.w	80ea <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    88ec:	210d      	movs	r1, #13
    88ee:	a807      	add	r0, sp, #28
    88f0:	f7ff f9ca 	bl	7c88 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    88f4:	2202      	movs	r2, #2
    88f6:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    88f8:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    88fa:	2201      	movs	r2, #1
    88fc:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    88fe:	220c      	movs	r2, #12
	rp->status = 0x00;
    8900:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8902:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    8904:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    8906:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    8908:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    890a:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    890c:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    890e:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    8910:	7242      	strb	r2, [r0, #9]
    8912:	7283      	strb	r3, [r0, #10]
    8914:	72c3      	strb	r3, [r0, #11]
    8916:	7303      	strb	r3, [r0, #12]
    8918:	f7ff bbe7 	b.w	80ea <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    891c:	2141      	movs	r1, #65	; 0x41
    891e:	a807      	add	r0, sp, #28
    8920:	f7ff f9b2 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    8924:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8926:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8928:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    892a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    892e:	f7f9 f991 	bl	1c54 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    8932:	7863      	ldrb	r3, [r4, #1]
    8934:	f063 0358 	orn	r3, r3, #88	; 0x58
    8938:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    893a:	78a3      	ldrb	r3, [r4, #2]
    893c:	f043 0303 	orr.w	r3, r3, #3
    8940:	70a3      	strb	r3, [r4, #2]
    8942:	f7ff bbd2 	b.w	80ea <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8946:	2109      	movs	r1, #9
    8948:	a807      	add	r0, sp, #28
    894a:	f7ff f99d 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    894e:	2100      	movs	r1, #0
    8950:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8954:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    8956:	f7f9 f97d 	bl	1c54 <memset>
    895a:	f7ff bbc6 	b.w	80ea <hci_cmd_handle+0xe2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    895e:	4b5c      	ldr	r3, [pc, #368]	; (8ad0 <hci_cmd_handle+0xac8>)
    8960:	aa08      	add	r2, sp, #32
    8962:	f103 0628 	add.w	r6, r3, #40	; 0x28
    8966:	4615      	mov	r5, r2
    8968:	6818      	ldr	r0, [r3, #0]
    896a:	6859      	ldr	r1, [r3, #4]
    896c:	4614      	mov	r4, r2
    896e:	c403      	stmia	r4!, {r0, r1}
    8970:	3308      	adds	r3, #8
    8972:	42b3      	cmp	r3, r6
    8974:	4622      	mov	r2, r4
    8976:	d1f7      	bne.n	8968 <hci_cmd_handle+0x960>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    8978:	2129      	movs	r1, #41	; 0x29
    897a:	a807      	add	r0, sp, #28
    897c:	f7ff f984 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    8980:	2300      	movs	r3, #0
    8982:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    8986:	2228      	movs	r2, #40	; 0x28
    8988:	4629      	mov	r1, r5
    898a:	e5de      	b.n	854a <hci_cmd_handle+0x542>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    898c:	68a1      	ldr	r1, [r4, #8]
    898e:	2000      	movs	r0, #0
    8990:	f7fe ffc0 	bl	7914 <ll_addr_set>
    8994:	f7ff bbc9 	b.w	812a <hci_cmd_handle+0x122>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    8998:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    899c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    89a0:	3201      	adds	r2, #1
    89a2:	d106      	bne.n	89b2 <hci_cmd_handle+0x9aa>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    89a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    89a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    89ac:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    89ae:	4293      	cmp	r3, r2
    89b0:	d020      	beq.n	89f4 <hci_cmd_handle+0x9ec>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    89b2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    89b6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    89ba:	07db      	lsls	r3, r3, #31
    89bc:	d51a      	bpl.n	89f4 <hci_cmd_handle+0x9ec>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    89be:	2118      	movs	r1, #24
    89c0:	a807      	add	r0, sp, #28
    89c2:	f7ff f961 	bl	7c88 <cmd_complete>
		rp->status = 0x00;
    89c6:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    89c8:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    89ca:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    89cc:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    89ce:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    89d0:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    89d4:	1ca1      	adds	r1, r4, #2
    89d6:	f7ff f913 	bl	7c00 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    89da:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    89de:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    89e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    89e4:	f063 033f 	orn	r3, r3, #63	; 0x3f
    89e8:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    89ea:	2210      	movs	r2, #16
    89ec:	4631      	mov	r1, r6
    89ee:	f104 0008 	add.w	r0, r4, #8
    89f2:	e7b0      	b.n	8956 <hci_cmd_handle+0x94e>
	rp = cmd_complete(evt, sizeof(*rp));
    89f4:	2102      	movs	r1, #2
    89f6:	a807      	add	r0, sp, #28
    89f8:	f7ff f946 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    89fc:	2300      	movs	r3, #0
    89fe:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    8a00:	7043      	strb	r3, [r0, #1]
    8a02:	f7ff bb72 	b.w	80ea <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8a06:	2121      	movs	r1, #33	; 0x21
    8a08:	a807      	add	r0, sp, #28
    8a0a:	f7ff f93d 	bl	7c88 <cmd_complete>
	rp->status = 0x00;
    8a0e:	4603      	mov	r3, r0
    8a10:	2200      	movs	r2, #0
    8a12:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    8a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    8a1a:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    8a1c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    8a20:	3101      	adds	r1, #1
    8a22:	d04b      	beq.n	8abc <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    8a24:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    8a28:	3101      	adds	r1, #1
    8a2a:	d047      	beq.n	8abc <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    8a2c:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    8a30:	3101      	adds	r1, #1
    8a32:	d043      	beq.n	8abc <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    8a34:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    8a38:	3101      	adds	r1, #1
    8a3a:	d03f      	beq.n	8abc <hci_cmd_handle+0xab4>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    8a3c:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    8a40:	4619      	mov	r1, r3
    8a42:	f7ff f8dd 	bl	7c00 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    8a46:	1d61      	adds	r1, r4, #5
    8a48:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    8a4c:	f7ff f8d8 	bl	7c00 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    8a50:	f104 0109 	add.w	r1, r4, #9
    8a54:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    8a58:	f7ff f8d2 	bl	7c00 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    8a5c:	f104 010d 	add.w	r1, r4, #13
    8a60:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    8a64:	f7ff f8cc 	bl	7c00 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    8a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8a6c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    8a70:	3301      	adds	r3, #1
    8a72:	f104 0311 	add.w	r3, r4, #17
    8a76:	d027      	beq.n	8ac8 <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    8a78:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    8a7c:	3101      	adds	r1, #1
    8a7e:	d023      	beq.n	8ac8 <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    8a80:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    8a84:	3101      	adds	r1, #1
    8a86:	d01f      	beq.n	8ac8 <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    8a88:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    8a8c:	3101      	adds	r1, #1
    8a8e:	d01b      	beq.n	8ac8 <hci_cmd_handle+0xac0>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    8a90:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    8a94:	4619      	mov	r1, r3
    8a96:	f7ff f8b3 	bl	7c00 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    8a9a:	f104 0115 	add.w	r1, r4, #21
    8a9e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    8aa2:	f7ff f8ad 	bl	7c00 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    8aa6:	f104 0119 	add.w	r1, r4, #25
    8aaa:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    8aae:	f7ff f8a7 	bl	7c00 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    8ab2:	f104 011d 	add.w	r1, r4, #29
    8ab6:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    8aba:	e563      	b.n	8584 <hci_cmd_handle+0x57c>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    8abc:	2210      	movs	r2, #16
    8abe:	2100      	movs	r1, #0
    8ac0:	4618      	mov	r0, r3
    8ac2:	f7f9 f8c7 	bl	1c54 <memset>
    8ac6:	e7cf      	b.n	8a68 <hci_cmd_handle+0xa60>
		memset(rp->er, 0x00, sizeof(rp->er));
    8ac8:	2210      	movs	r2, #16
    8aca:	2100      	movs	r1, #0
    8acc:	4618      	mov	r0, r3
    8ace:	e742      	b.n	8956 <hci_cmd_handle+0x94e>
    8ad0:	00015f1b 	.word	0x00015f1b

00008ad4 <hci_acl_handle>:
{
    8ad4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    8ad8:	2300      	movs	r3, #0
    8ada:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    8adc:	8983      	ldrh	r3, [r0, #12]
    8ade:	2b03      	cmp	r3, #3
{
    8ae0:	4606      	mov	r6, r0
    8ae2:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    8ae4:	d80d      	bhi.n	8b02 <hci_acl_handle+0x2e>
		BT_ERR("No HCI ACL header");
    8ae6:	4b3a      	ldr	r3, [pc, #232]	; (8bd0 <hci_acl_handle+0xfc>)
    8ae8:	9301      	str	r3, [sp, #4]
    8aea:	9300      	str	r3, [sp, #0]
    8aec:	4a39      	ldr	r2, [pc, #228]	; (8bd4 <hci_acl_handle+0x100>)
    8aee:	4b3a      	ldr	r3, [pc, #232]	; (8bd8 <hci_acl_handle+0x104>)
    8af0:	493a      	ldr	r1, [pc, #232]	; (8bdc <hci_acl_handle+0x108>)
    8af2:	483b      	ldr	r0, [pc, #236]	; (8be0 <hci_acl_handle+0x10c>)
		BT_ERR("Invalid HCI ACL packet length");
    8af4:	f7f8 fa4a 	bl	f8c <printk>
		return -EINVAL;
    8af8:	f06f 0015 	mvn.w	r0, #21
}
    8afc:	b003      	add	sp, #12
    8afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    8b02:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    8b06:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    8b08:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    8b0a:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    8b0c:	f009 fddd 	bl	126ca <net_buf_simple_pull>
	if (buf->len < len) {
    8b10:	89b3      	ldrh	r3, [r6, #12]
    8b12:	42bb      	cmp	r3, r7
    8b14:	d207      	bcs.n	8b26 <hci_acl_handle+0x52>
		BT_ERR("Invalid HCI ACL packet length");
    8b16:	4b2e      	ldr	r3, [pc, #184]	; (8bd0 <hci_acl_handle+0xfc>)
    8b18:	9301      	str	r3, [sp, #4]
    8b1a:	9300      	str	r3, [sp, #0]
    8b1c:	4a2d      	ldr	r2, [pc, #180]	; (8bd4 <hci_acl_handle+0x100>)
    8b1e:	4b2e      	ldr	r3, [pc, #184]	; (8bd8 <hci_acl_handle+0x104>)
    8b20:	492e      	ldr	r1, [pc, #184]	; (8bdc <hci_acl_handle+0x108>)
    8b22:	4830      	ldr	r0, [pc, #192]	; (8be4 <hci_acl_handle+0x110>)
    8b24:	e7e6      	b.n	8af4 <hci_acl_handle+0x20>
	node_tx = ll_tx_mem_acquire();
    8b26:	f007 fc59 	bl	103dc <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    8b2a:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    8b2e:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    8b30:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    8b34:	bb30      	cbnz	r0, 8b84 <hci_acl_handle+0xb0>
		BT_ERR("Tx Buffer Overflow");
    8b36:	4b26      	ldr	r3, [pc, #152]	; (8bd0 <hci_acl_handle+0xfc>)
    8b38:	9301      	str	r3, [sp, #4]
    8b3a:	9300      	str	r3, [sp, #0]
    8b3c:	4a25      	ldr	r2, [pc, #148]	; (8bd4 <hci_acl_handle+0x100>)
    8b3e:	4b26      	ldr	r3, [pc, #152]	; (8bd8 <hci_acl_handle+0x104>)
    8b40:	4926      	ldr	r1, [pc, #152]	; (8bdc <hci_acl_handle+0x108>)
    8b42:	4829      	ldr	r0, [pc, #164]	; (8be8 <hci_acl_handle+0x114>)
    8b44:	f7f8 fa22 	bl	f8c <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    8b48:	4b28      	ldr	r3, [pc, #160]	; (8bec <hci_acl_handle+0x118>)
    8b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    8b4e:	2300      	movs	r3, #0
    8b50:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    8b54:	4313      	orrs	r3, r2
    8b56:	d012      	beq.n	8b7e <hci_acl_handle+0xaa>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8b58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8b5c:	2001      	movs	r0, #1
    8b5e:	f7fa ffc5 	bl	3aec <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    8b62:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8b64:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    8b68:	211a      	movs	r1, #26
    8b6a:	f7ff f852 	bl	7c12 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    8b6e:	f8d8 0000 	ldr.w	r0, [r8]
    8b72:	2101      	movs	r1, #1
    8b74:	3008      	adds	r0, #8
    8b76:	f009 fd89 	bl	1268c <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    8b7a:	2301      	movs	r3, #1
    8b7c:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    8b7e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8b82:	e7bb      	b.n	8afc <hci_acl_handle+0x28>
    8b84:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    8b86:	f1b9 0f00 	cmp.w	r9, #0
    8b8a:	d002      	beq.n	8b92 <hci_acl_handle+0xbe>
    8b8c:	f1b9 0f02 	cmp.w	r9, #2
    8b90:	d11c      	bne.n	8bcc <hci_acl_handle+0xf8>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    8b92:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8b94:	f362 0301 	bfi	r3, r2, #0, #2
    8b98:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    8b9a:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    8b9c:	68b1      	ldr	r1, [r6, #8]
    8b9e:	463a      	mov	r2, r7
    8ba0:	1de0      	adds	r0, r4, #7
    8ba2:	f7f9 f82b 	bl	1bfc <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    8ba6:	4621      	mov	r1, r4
    8ba8:	4628      	mov	r0, r5
    8baa:	f007 fc23 	bl	103f4 <ll_tx_mem_enqueue>
    8bae:	2800      	cmp	r0, #0
    8bb0:	d0a4      	beq.n	8afc <hci_acl_handle+0x28>
		BT_ERR("Invalid Tx Enqueue");
    8bb2:	4b07      	ldr	r3, [pc, #28]	; (8bd0 <hci_acl_handle+0xfc>)
    8bb4:	9301      	str	r3, [sp, #4]
    8bb6:	9300      	str	r3, [sp, #0]
    8bb8:	4a06      	ldr	r2, [pc, #24]	; (8bd4 <hci_acl_handle+0x100>)
    8bba:	4b07      	ldr	r3, [pc, #28]	; (8bd8 <hci_acl_handle+0x104>)
    8bbc:	4907      	ldr	r1, [pc, #28]	; (8bdc <hci_acl_handle+0x108>)
    8bbe:	480c      	ldr	r0, [pc, #48]	; (8bf0 <hci_acl_handle+0x11c>)
    8bc0:	f7f8 f9e4 	bl	f8c <printk>
		ll_tx_mem_release(node_tx);
    8bc4:	4620      	mov	r0, r4
    8bc6:	f007 fc0f 	bl	103e8 <ll_tx_mem_release>
    8bca:	e795      	b.n	8af8 <hci_acl_handle+0x24>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8bcc:	2201      	movs	r2, #1
    8bce:	e7e1      	b.n	8b94 <hci_acl_handle+0xc0>
    8bd0:	000142a9 	.word	0x000142a9
    8bd4:	00014ff8 	.word	0x00014ff8
    8bd8:	00015d93 	.word	0x00015d93
    8bdc:	00015047 	.word	0x00015047
    8be0:	00015e31 	.word	0x00015e31
    8be4:	00015e53 	.word	0x00015e53
    8be8:	00015e81 	.word	0x00015e81
    8bec:	20003d28 	.word	0x20003d28
    8bf0:	00015ea4 	.word	0x00015ea4

00008bf4 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    8bf4:	7a03      	ldrb	r3, [r0, #8]
    8bf6:	f003 0303 	and.w	r3, r3, #3
    8bfa:	3b01      	subs	r3, #1
    8bfc:	2b01      	cmp	r3, #1
{
    8bfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8c00:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    8c02:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    8c04:	d81c      	bhi.n	8c40 <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    8c06:	f101 0608 	add.w	r6, r1, #8
    8c0a:	4630      	mov	r0, r6
    8c0c:	2104      	movs	r1, #4
    8c0e:	f009 fd3d 	bl	1268c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    8c12:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    8c14:	7a61      	ldrb	r1, [r4, #9]
    8c16:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    8c18:	f003 0303 	and.w	r3, r3, #3
    8c1c:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    8c1e:	bf0c      	ite	eq
    8c20:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    8c24:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    8c28:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    8c2a:	4630      	mov	r0, r6
    8c2c:	f009 fd2e 	bl	1268c <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    8c30:	7a62      	ldrb	r2, [r4, #9]
    8c32:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    8c36:	b002      	add	sp, #8
    8c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    8c3c:	f7f8 bfde 	b.w	1bfc <memcpy>
		LL_ASSERT(0);
    8c40:	4b07      	ldr	r3, [pc, #28]	; (8c60 <hci_acl_encode+0x6c>)
    8c42:	9301      	str	r3, [sp, #4]
    8c44:	9300      	str	r3, [sp, #0]
    8c46:	4a07      	ldr	r2, [pc, #28]	; (8c64 <hci_acl_encode+0x70>)
    8c48:	4b07      	ldr	r3, [pc, #28]	; (8c68 <hci_acl_encode+0x74>)
    8c4a:	4908      	ldr	r1, [pc, #32]	; (8c6c <hci_acl_encode+0x78>)
    8c4c:	4808      	ldr	r0, [pc, #32]	; (8c70 <hci_acl_encode+0x7c>)
    8c4e:	f7f8 f99d 	bl	f8c <printk>
    8c52:	4040      	eors	r0, r0
    8c54:	f380 8811 	msr	BASEPRI, r0
    8c58:	f04f 0004 	mov.w	r0, #4
    8c5c:	df02      	svc	2
    8c5e:	bf00      	nop
    8c60:	000142a9 	.word	0x000142a9
    8c64:	00014ff8 	.word	0x00014ff8
    8c68:	00015e22 	.word	0x00015e22
    8c6c:	00015047 	.word	0x00015047
    8c70:	00014f97 	.word	0x00014f97

00008c74 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    8c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8c78:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    8c7a:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8c7c:	2b01      	cmp	r3, #1
{
    8c7e:	b093      	sub	sp, #76	; 0x4c
    8c80:	4604      	mov	r4, r0
    8c82:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    8c84:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8c88:	f000 82a6 	beq.w	91d8 <hci_evt_encode+0x564>
	switch (node_rx->hdr.type) {
    8c8c:	3b02      	subs	r3, #2
    8c8e:	2b0a      	cmp	r3, #10
    8c90:	f200 829a 	bhi.w	91c8 <hci_evt_encode+0x554>
    8c94:	e8df f013 	tbh	[pc, r3, lsl #1]
    8c98:	0134000b 	.word	0x0134000b
    8c9c:	013c013a 	.word	0x013c013a
    8ca0:	01ba0183 	.word	0x01ba0183
    8ca4:	01fd01d8 	.word	0x01fd01d8
    8ca8:	022a0215 	.word	0x022a0215
    8cac:	0245      	.short	0x0245
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    8cae:	2301      	movs	r3, #1
    8cb0:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    8cb4:	2303      	movs	r3, #3
    8cb6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    8cba:	23ff      	movs	r3, #255	; 0xff
    8cbc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    8cc0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    8cc4:	2302      	movs	r3, #2
    8cc6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8cca:	7a43      	ldrb	r3, [r0, #9]
    8ccc:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    8cce:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8cd0:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    8cd4:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    8cd6:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    8cda:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    8cdc:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    8cde:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (adv->tx_addr) {
    8ce2:	d505      	bpl.n	8cf0 <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    8ce4:	f104 030a 	add.w	r3, r4, #10
    8ce8:	464a      	mov	r2, r9
    8cea:	4608      	mov	r0, r1
    8cec:	f008 fd04 	bl	116f8 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    8cf0:	4bb8      	ldr	r3, [pc, #736]	; (8fd4 <hci_evt_encode+0x360>)
    8cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
    8cf6:	2200      	movs	r2, #0
    8cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8cfc:	4313      	orrs	r3, r2
    8cfe:	f000 80b9 	beq.w	8e74 <hci_evt_encode+0x200>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8d02:	7a63      	ldrb	r3, [r4, #9]
    8d04:	4423      	add	r3, r4
    8d06:	f893 a00c 	ldrb.w	sl, [r3, #12]
    8d0a:	4bb3      	ldr	r3, [pc, #716]	; (8fd8 <hci_evt_encode+0x364>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    8d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8d10:	f1ba 0f00 	cmp.w	sl, #0
    8d14:	d13d      	bne.n	8d92 <hci_evt_encode+0x11e>
    8d16:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    8d1a:	2300      	movs	r3, #0
    8d1c:	4313      	orrs	r3, r2
    8d1e:	f000 80a9 	beq.w	8e74 <hci_evt_encode+0x200>
	if (dup_count >= 0) {
    8d22:	4bae      	ldr	r3, [pc, #696]	; (8fdc <hci_evt_encode+0x368>)
    8d24:	681a      	ldr	r2, [r3, #0]
    8d26:	2a00      	cmp	r2, #0
    8d28:	4698      	mov	r8, r3
    8d2a:	db54      	blt.n	8dd6 <hci_evt_encode+0x162>
    8d2c:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 9008 <hci_evt_encode+0x394>
    8d30:	2600      	movs	r6, #0
    8d32:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    8d36:	f8d8 2000 	ldr.w	r2, [r8]
    8d3a:	4296      	cmp	r6, r2
    8d3c:	db2c      	blt.n	8d98 <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    8d3e:	4ea8      	ldr	r6, [pc, #672]	; (8fe0 <hci_evt_encode+0x36c>)
    8d40:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 8fe4 <hci_evt_encode+0x370>
    8d44:	6830      	ldr	r0, [r6, #0]
    8d46:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    8d4a:	4619      	mov	r1, r3
    8d4c:	2206      	movs	r2, #6
    8d4e:	3002      	adds	r0, #2
    8d50:	f7f8 ff54 	bl	1bfc <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    8d54:	6832      	ldr	r2, [r6, #0]
    8d56:	7a23      	ldrb	r3, [r4, #8]
    8d58:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    8d5c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8d60:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    8d62:	7a23      	ldrb	r3, [r4, #8]
    8d64:	f003 010f 	and.w	r1, r3, #15
    8d68:	2301      	movs	r3, #1
    8d6a:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    8d6c:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    8d70:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    8d74:	290f      	cmp	r1, #15
			dup_count++;
    8d76:	bfd5      	itete	le
    8d78:	3101      	addle	r1, #1
			dup_curr++;
    8d7a:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    8d7c:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    8d7e:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    8d80:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    8d82:	bfd8      	it	le
    8d84:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    8d88:	2a10      	cmp	r2, #16
    8d8a:	d124      	bne.n	8dd6 <hci_evt_encode+0x162>
			dup_curr = 0;
    8d8c:	2200      	movs	r2, #0
    8d8e:	6032      	str	r2, [r6, #0]
    8d90:	e021      	b.n	8dd6 <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    8d92:	f002 020b 	and.w	r2, r2, #11
    8d96:	e7c0      	b.n	8d1a <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    8d98:	4618      	mov	r0, r3
    8d9a:	2206      	movs	r2, #6
    8d9c:	4659      	mov	r1, fp
    8d9e:	9307      	str	r3, [sp, #28]
    8da0:	f7f8 ff17 	bl	1bd2 <memcmp>
    8da4:	9b07      	ldr	r3, [sp, #28]
    8da6:	bb00      	cbnz	r0, 8dea <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    8da8:	7a21      	ldrb	r1, [r4, #8]
    8daa:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    8dae:	460a      	mov	r2, r1
    8db0:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    8db4:	4281      	cmp	r1, r0
    8db6:	d118      	bne.n	8dea <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    8db8:	488a      	ldr	r0, [pc, #552]	; (8fe4 <hci_evt_encode+0x370>)
    8dba:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    8dbe:	f002 020f 	and.w	r2, r2, #15
    8dc2:	fa23 f102 	lsr.w	r1, r3, r2
    8dc6:	07c9      	lsls	r1, r1, #31
    8dc8:	d454      	bmi.n	8e74 <hci_evt_encode+0x200>
				dup_filter[i].mask |= BIT(adv->type);
    8dca:	2101      	movs	r1, #1
    8dcc:	fa01 f202 	lsl.w	r2, r1, r2
    8dd0:	4313      	orrs	r3, r2
    8dd2:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    8dd6:	f894 b008 	ldrb.w	fp, [r4, #8]
    8dda:	7a63      	ldrb	r3, [r4, #9]
    8ddc:	f00b 0b0f 	and.w	fp, fp, #15
    8de0:	f1bb 0f01 	cmp.w	fp, #1
    8de4:	d105      	bne.n	8df2 <hci_evt_encode+0x17e>
		data_len = 0;
    8de6:	2600      	movs	r6, #0
    8de8:	e005      	b.n	8df6 <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    8dea:	3601      	adds	r6, #1
    8dec:	f10b 0b08 	add.w	fp, fp, #8
    8df0:	e7a1      	b.n	8d36 <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    8df2:	1f9e      	subs	r6, r3, #6
    8df4:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8df6:	4423      	add	r3, r4
    8df8:	f893 800a 	ldrb.w	r8, [r3, #10]
    8dfc:	f1c8 0800 	rsb	r8, r8, #0
    8e00:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    8e04:	f1ba 0f00 	cmp.w	sl, #0
    8e08:	d041      	beq.n	8e8e <hci_evt_encode+0x21a>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    8e0a:	f1bb 0f01 	cmp.w	fp, #1
    8e0e:	d00e      	beq.n	8e2e <hci_evt_encode+0x1ba>
    8e10:	4b75      	ldr	r3, [pc, #468]	; (8fe8 <hci_evt_encode+0x374>)
    8e12:	9301      	str	r3, [sp, #4]
    8e14:	9300      	str	r3, [sp, #0]
    8e16:	4a75      	ldr	r2, [pc, #468]	; (8fec <hci_evt_encode+0x378>)
    8e18:	4b75      	ldr	r3, [pc, #468]	; (8ff0 <hci_evt_encode+0x37c>)
    8e1a:	4976      	ldr	r1, [pc, #472]	; (8ff4 <hci_evt_encode+0x380>)
    8e1c:	4876      	ldr	r0, [pc, #472]	; (8ff8 <hci_evt_encode+0x384>)
		LL_ASSERT(0);
    8e1e:	f7f8 f8b5 	bl	f8c <printk>
    8e22:	4040      	eors	r0, r0
    8e24:	f380 8811 	msr	BASEPRI, r0
    8e28:	f04f 0004 	mov.w	r0, #4
    8e2c:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    8e2e:	2211      	movs	r2, #17
    8e30:	210b      	movs	r1, #11
    8e32:	4628      	mov	r0, r5
    8e34:	f7fe ff12 	bl	7c5c <meta_evt>
		drp->num_reports = 1;
    8e38:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    8e3c:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    8e40:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    8e42:	f008 fb2f 	bl	114a4 <ll_rl_size_get>
    8e46:	4581      	cmp	r9, r0
    8e48:	f105 0003 	add.w	r0, r5, #3
    8e4c:	d215      	bcs.n	8e7a <hci_evt_encode+0x206>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    8e4e:	4602      	mov	r2, r0
    8e50:	1ca9      	adds	r1, r5, #2
    8e52:	4648      	mov	r0, r9
    8e54:	f008 f9c4 	bl	111e0 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    8e58:	78ab      	ldrb	r3, [r5, #2]
    8e5a:	3302      	adds	r3, #2
    8e5c:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    8e5e:	2301      	movs	r3, #1
    8e60:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    8e62:	2206      	movs	r2, #6
    8e64:	f107 0108 	add.w	r1, r7, #8
    8e68:	f105 000a 	add.w	r0, r5, #10
    8e6c:	f7f8 fec6 	bl	1bfc <memcpy>
		dir_info->rssi = rssi;
    8e70:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    8e74:	b013      	add	sp, #76	; 0x4c
    8e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    8e7a:	7a23      	ldrb	r3, [r4, #8]
    8e7c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8e80:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    8e82:	2206      	movs	r2, #6
    8e84:	f104 010a 	add.w	r1, r4, #10
    8e88:	f7f8 feb8 	bl	1bfc <memcpy>
    8e8c:	e7e7      	b.n	8e5e <hci_evt_encode+0x1ea>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    8e8e:	f106 020b 	add.w	r2, r6, #11
    8e92:	b2d2      	uxtb	r2, r2
    8e94:	2102      	movs	r1, #2
    8e96:	4628      	mov	r0, r5
    8e98:	f7fe fee0 	bl	7c5c <meta_evt>
	sep->num_reports = 1;
    8e9c:	2301      	movs	r3, #1
    8e9e:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    8ea0:	7a23      	ldrb	r3, [r4, #8]
    8ea2:	aa12      	add	r2, sp, #72	; 0x48
    8ea4:	f003 030f 	and.w	r3, r3, #15
    8ea8:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    8eaa:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    8eac:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    8eb0:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8eb2:	7a63      	ldrb	r3, [r4, #9]
    8eb4:	4423      	add	r3, r4
    8eb6:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    8eba:	f008 faf3 	bl	114a4 <ll_rl_size_get>
    8ebe:	4581      	cmp	r9, r0
    8ec0:	f105 0003 	add.w	r0, r5, #3
    8ec4:	d212      	bcs.n	8eec <hci_evt_encode+0x278>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    8ec6:	4602      	mov	r2, r0
    8ec8:	1ca9      	adds	r1, r5, #2
    8eca:	4648      	mov	r0, r9
    8ecc:	f008 f988 	bl	111e0 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    8ed0:	78ab      	ldrb	r3, [r5, #2]
    8ed2:	3302      	adds	r3, #2
    8ed4:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    8ed6:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    8ed8:	350a      	adds	r5, #10
    8eda:	4632      	mov	r2, r6
    8edc:	f107 0108 	add.w	r1, r7, #8
    8ee0:	4628      	mov	r0, r5
    8ee2:	f7f8 fe8b 	bl	1bfc <memcpy>
	*prssi = rssi;
    8ee6:	f805 8006 	strb.w	r8, [r5, r6]
    8eea:	e7c3      	b.n	8e74 <hci_evt_encode+0x200>
		adv_info->addr.type = adv->tx_addr;
    8eec:	7a23      	ldrb	r3, [r4, #8]
    8eee:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8ef2:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    8ef4:	2206      	movs	r2, #6
    8ef6:	f104 010a 	add.w	r1, r4, #10
    8efa:	f7f8 fe7f 	bl	1bfc <memcpy>
    8efe:	e7ea      	b.n	8ed6 <hci_evt_encode+0x262>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    8f00:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    8f02:	4621      	mov	r1, r4
    8f04:	4638      	mov	r0, r7
    8f06:	f7ff f801 	bl	7f0c <le_adv_ext_report.isra.66>
    8f0a:	e7b3      	b.n	8e74 <hci_evt_encode+0x200>
    8f0c:	2204      	movs	r2, #4
    8f0e:	e7f8      	b.n	8f02 <hci_evt_encode+0x28e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8f10:	4b30      	ldr	r3, [pc, #192]	; (8fd4 <hci_evt_encode+0x360>)
    8f12:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f16:	2200      	movs	r2, #0
    8f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8f1c:	4313      	orrs	r3, r2
    8f1e:	f100 060a 	add.w	r6, r0, #10
    8f22:	d007      	beq.n	8f34 <hci_evt_encode+0x2c0>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    8f24:	4b2c      	ldr	r3, [pc, #176]	; (8fd8 <hci_evt_encode+0x364>)
    8f26:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f2a:	2300      	movs	r3, #0
    8f2c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8f30:	4313      	orrs	r3, r2
    8f32:	d123      	bne.n	8f7c <hci_evt_encode+0x308>
		addr.type = adv->tx_addr;
    8f34:	7a23      	ldrb	r3, [r4, #8]
    8f36:	ad12      	add	r5, sp, #72	; 0x48
    8f38:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    8f3c:	2206      	movs	r2, #6
    8f3e:	4631      	mov	r1, r6
    8f40:	f10d 0025 	add.w	r0, sp, #37	; 0x25
		addr.type = adv->tx_addr;
    8f44:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    8f48:	f7f8 fe58 	bl	1bfc <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    8f4c:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8f4e:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8f50:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8f52:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8f54:	4631      	mov	r1, r6
    8f56:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8f58:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8f5a:	f7fe ff9b 	bl	7e94 <bt_addr_le_to_str.constprop.70>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8f5e:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    8f60:	4b21      	ldr	r3, [pc, #132]	; (8fe8 <hci_evt_encode+0x374>)
    8f62:	9304      	str	r3, [sp, #16]
    8f64:	2200      	movs	r2, #0
    8f66:	9201      	str	r2, [sp, #4]
    8f68:	9300      	str	r3, [sp, #0]
    8f6a:	9403      	str	r4, [sp, #12]
    8f6c:	9602      	str	r6, [sp, #8]
    8f6e:	4b23      	ldr	r3, [pc, #140]	; (8ffc <hci_evt_encode+0x388>)
    8f70:	4a23      	ldr	r2, [pc, #140]	; (9000 <hci_evt_encode+0x38c>)
    8f72:	4920      	ldr	r1, [pc, #128]	; (8ff4 <hci_evt_encode+0x380>)
    8f74:	4823      	ldr	r0, [pc, #140]	; (9004 <hci_evt_encode+0x390>)
    8f76:	f7f8 f809 	bl	f8c <printk>
    8f7a:	e77b      	b.n	8e74 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    8f7c:	2208      	movs	r2, #8
    8f7e:	2113      	movs	r1, #19
    8f80:	4628      	mov	r0, r5
    8f82:	f7fe fe6b 	bl	7c5c <meta_evt>
	sep->handle = 0;
    8f86:	2300      	movs	r3, #0
    8f88:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    8f8a:	7a23      	ldrb	r3, [r4, #8]
    8f8c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8f90:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    8f92:	2206      	movs	r2, #6
    8f94:	4631      	mov	r1, r6
    8f96:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    8f98:	f7f8 fe30 	bl	1bfc <memcpy>
    8f9c:	e76a      	b.n	8e74 <hci_evt_encode+0x200>
			le_conn_complete(cc->status, cc, handle, buf);
    8f9e:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    8fa0:	b93f      	cbnz	r7, 8fb2 <hci_evt_encode+0x33e>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    8fa2:	f100 0314 	add.w	r3, r0, #20
    8fa6:	f100 010e 	add.w	r1, r0, #14
    8faa:	22ff      	movs	r2, #255	; 0xff
    8fac:	7b40      	ldrb	r0, [r0, #13]
    8fae:	f008 fba3 	bl	116f8 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8fb2:	4b08      	ldr	r3, [pc, #32]	; (8fd4 <hci_evt_encode+0x360>)
    8fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
    8fb8:	2200      	movs	r2, #0
    8fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8fbe:	4313      	orrs	r3, r2
    8fc0:	f43f af58 	beq.w	8e74 <hci_evt_encode+0x200>
    8fc4:	462b      	mov	r3, r5
    8fc6:	4632      	mov	r2, r6
    8fc8:	f104 010b 	add.w	r1, r4, #11
    8fcc:	4638      	mov	r0, r7
    8fce:	f7fe fecb 	bl	7d68 <le_conn_complete.part.39>
    8fd2:	e74f      	b.n	8e74 <hci_evt_encode+0x200>
    8fd4:	20003d28 	.word	0x20003d28
    8fd8:	20003d30 	.word	0x20003d30
    8fdc:	20000830 	.word	0x20000830
    8fe0:	20000834 	.word	0x20000834
    8fe4:	20000838 	.word	0x20000838
    8fe8:	000142a9 	.word	0x000142a9
    8fec:	00014ff8 	.word	0x00014ff8
    8ff0:	00015da2 	.word	0x00015da2
    8ff4:	00015047 	.word	0x00015047
    8ff8:	00015f43 	.word	0x00015f43
    8ffc:	00015dca 	.word	0x00015dca
    9000:	00015040 	.word	0x00015040
    9004:	00015f89 	.word	0x00015f89
    9008:	2000083a 	.word	0x2000083a
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    900c:	4bb2      	ldr	r3, [pc, #712]	; (92d8 <hci_evt_encode+0x664>)
    900e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9012:	2300      	movs	r3, #0
    9014:	f002 0210 	and.w	r2, r2, #16
    9018:	4313      	orrs	r3, r2
    901a:	f43f af2b 	beq.w	8e74 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    901e:	2204      	movs	r2, #4
    9020:	2105      	movs	r1, #5
    9022:	4628      	mov	r0, r5
    9024:	f7fe fdf5 	bl	7c12 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9028:	2104      	movs	r1, #4
    902a:	f105 0008 	add.w	r0, r5, #8
    902e:	f009 fb2d 	bl	1268c <net_buf_simple_add>
	ep->status = 0x00;
    9032:	2300      	movs	r3, #0
	conn_count--;
    9034:	4aa9      	ldr	r2, [pc, #676]	; (92dc <hci_evt_encode+0x668>)
	ep->status = 0x00;
    9036:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9038:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    903c:	7a23      	ldrb	r3, [r4, #8]
    903e:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    9040:	6813      	ldr	r3, [r2, #0]
    9042:	3b01      	subs	r3, #1
    9044:	6013      	str	r3, [r2, #0]
    9046:	e715      	b.n	8e74 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9048:	4ba3      	ldr	r3, [pc, #652]	; (92d8 <hci_evt_encode+0x664>)
    904a:	e9d3 2300 	ldrd	r2, r3, [r3]
    904e:	2200      	movs	r2, #0
    9050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9054:	4313      	orrs	r3, r2
    9056:	f43f af0d 	beq.w	8e74 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    905a:	4ba1      	ldr	r3, [pc, #644]	; (92e0 <hci_evt_encode+0x66c>)
    905c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9060:	2300      	movs	r3, #0
    9062:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9066:	4313      	orrs	r3, r2
    9068:	f43f af04 	beq.w	8e74 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    906c:	2209      	movs	r2, #9
    906e:	2103      	movs	r1, #3
    9070:	4628      	mov	r0, r5
    9072:	f7fe fdf3 	bl	7c5c <meta_evt>
	sep->status = radio_cu->status;
    9076:	7ae3      	ldrb	r3, [r4, #11]
    9078:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    907a:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    907c:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    9080:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    9084:	89e3      	ldrh	r3, [r4, #14]
    9086:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    908a:	8a23      	ldrh	r3, [r4, #16]
    908c:	f8a0 3007 	strh.w	r3, [r0, #7]
    9090:	e6f0      	b.n	8e74 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    9092:	4b91      	ldr	r3, [pc, #580]	; (92d8 <hci_evt_encode+0x664>)
    9094:	e9d3 2300 	ldrd	r2, r3, [r3]
    9098:	2200      	movs	r2, #0
    909a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    909e:	4313      	orrs	r3, r2
    90a0:	f43f aee8 	beq.w	8e74 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    90a4:	2203      	movs	r2, #3
    90a6:	2130      	movs	r1, #48	; 0x30
    90a8:	4628      	mov	r0, r5
    90aa:	f7fe fdb2 	bl	7c12 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    90ae:	2103      	movs	r1, #3
    90b0:	f105 0008 	add.w	r0, r5, #8
    90b4:	f009 faea 	bl	1268c <net_buf_simple_add>
	ep->status = 0x00;
    90b8:	2300      	movs	r3, #0
    90ba:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    90bc:	f8a0 6001 	strh.w	r6, [r0, #1]
    90c0:	e6d8      	b.n	8e74 <hci_evt_encode+0x200>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    90c2:	4b88      	ldr	r3, [pc, #544]	; (92e4 <hci_evt_encode+0x670>)
    90c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    90c8:	2300      	movs	r3, #0
    90ca:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    90ce:	4313      	orrs	r3, r2
    90d0:	f43f aed0 	beq.w	8e74 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    90d4:	2202      	movs	r2, #2
    90d6:	2157      	movs	r1, #87	; 0x57
    90d8:	4628      	mov	r0, r5
    90da:	f7fe fd9a 	bl	7c12 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    90de:	2102      	movs	r1, #2
    90e0:	f105 0008 	add.w	r0, r5, #8
    90e4:	f009 fad2 	bl	1268c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    90e8:	8006      	strh	r6, [r0, #0]
    90ea:	e6c3      	b.n	8e74 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    90ec:	4b7a      	ldr	r3, [pc, #488]	; (92d8 <hci_evt_encode+0x664>)
    90ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    90f2:	2200      	movs	r2, #0
    90f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    90f8:	4313      	orrs	r3, r2
    90fa:	f43f aebb 	beq.w	8e74 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    90fe:	4b78      	ldr	r3, [pc, #480]	; (92e0 <hci_evt_encode+0x66c>)
    9100:	e9d3 2300 	ldrd	r2, r3, [r3]
    9104:	2300      	movs	r3, #0
    9106:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    910a:	4313      	orrs	r3, r2
    910c:	f43f aeb2 	beq.w	8e74 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    9110:	2203      	movs	r2, #3
    9112:	2114      	movs	r1, #20
    9114:	4628      	mov	r0, r5
    9116:	f7fe fda1 	bl	7c5c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    911a:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    911c:	7ae3      	ldrb	r3, [r4, #11]
    911e:	7083      	strb	r3, [r0, #2]
    9120:	e6a8      	b.n	8e74 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9122:	4b6d      	ldr	r3, [pc, #436]	; (92d8 <hci_evt_encode+0x664>)
    9124:	e9d3 2300 	ldrd	r2, r3, [r3]
    9128:	2200      	movs	r2, #0
    912a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    912e:	4313      	orrs	r3, r2
    9130:	d007      	beq.n	9142 <hci_evt_encode+0x4ce>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    9132:	4b6b      	ldr	r3, [pc, #428]	; (92e0 <hci_evt_encode+0x66c>)
    9134:	e9d3 2300 	ldrd	r2, r3, [r3]
    9138:	2300      	movs	r3, #0
    913a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    913e:	4313      	orrs	r3, r2
    9140:	d122      	bne.n	9188 <hci_evt_encode+0x514>
    9142:	7b22      	ldrb	r2, [r4, #12]
    9144:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    9146:	4868      	ldr	r0, [pc, #416]	; (92e8 <hci_evt_encode+0x674>)
    9148:	2a00      	cmp	r2, #0
    914a:	fa92 f3a2 	rbit	r3, r2
    914e:	fab3 f383 	clz	r3, r3
    9152:	fa91 f2a1 	rbit	r2, r1
    9156:	bf08      	it	eq
    9158:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    915c:	2900      	cmp	r1, #0
    915e:	fab2 f282 	clz	r2, r2
    9162:	bf08      	it	eq
    9164:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    9168:	4960      	ldr	r1, [pc, #384]	; (92ec <hci_evt_encode+0x678>)
    916a:	9105      	str	r1, [sp, #20]
    916c:	3301      	adds	r3, #1
    916e:	3201      	adds	r2, #1
    9170:	9204      	str	r2, [sp, #16]
    9172:	9303      	str	r3, [sp, #12]
    9174:	7ae3      	ldrb	r3, [r4, #11]
    9176:	9302      	str	r3, [sp, #8]
    9178:	e88d 0042 	stmia.w	sp, {r1, r6}
    917c:	4b5c      	ldr	r3, [pc, #368]	; (92f0 <hci_evt_encode+0x67c>)
    917e:	4a5d      	ldr	r2, [pc, #372]	; (92f4 <hci_evt_encode+0x680>)
    9180:	495d      	ldr	r1, [pc, #372]	; (92f8 <hci_evt_encode+0x684>)
    9182:	f7f7 ff03 	bl	f8c <printk>
    9186:	e675      	b.n	8e74 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    9188:	2205      	movs	r2, #5
    918a:	210c      	movs	r1, #12
    918c:	4628      	mov	r0, r5
    918e:	f7fe fd65 	bl	7c5c <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    9192:	7ae3      	ldrb	r3, [r4, #11]
    9194:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9196:	f8a0 6001 	strh.w	r6, [r0, #1]
    919a:	7b22      	ldrb	r2, [r4, #12]
    919c:	2a00      	cmp	r2, #0
    919e:	fa92 f3a2 	rbit	r3, r2
    91a2:	fab3 f383 	clz	r3, r3
    91a6:	bf08      	it	eq
    91a8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    91ac:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    91ae:	70c3      	strb	r3, [r0, #3]
    91b0:	7b62      	ldrb	r2, [r4, #13]
    91b2:	fa92 f3a2 	rbit	r3, r2
    91b6:	2a00      	cmp	r2, #0
    91b8:	fab3 f383 	clz	r3, r3
    91bc:	bf08      	it	eq
    91be:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    91c2:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    91c4:	7103      	strb	r3, [r0, #4]
    91c6:	e655      	b.n	8e74 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    91c8:	4b48      	ldr	r3, [pc, #288]	; (92ec <hci_evt_encode+0x678>)
    91ca:	9301      	str	r3, [sp, #4]
    91cc:	9300      	str	r3, [sp, #0]
    91ce:	4b4b      	ldr	r3, [pc, #300]	; (92fc <hci_evt_encode+0x688>)
    91d0:	4a4b      	ldr	r2, [pc, #300]	; (9300 <hci_evt_encode+0x68c>)
    91d2:	4949      	ldr	r1, [pc, #292]	; (92f8 <hci_evt_encode+0x684>)
    91d4:	484b      	ldr	r0, [pc, #300]	; (9304 <hci_evt_encode+0x690>)
    91d6:	e622      	b.n	8e1e <hci_evt_encode+0x1aa>
	switch (pdu_data->llctrl.opcode) {
    91d8:	7ac3      	ldrb	r3, [r0, #11]
    91da:	3b03      	subs	r3, #3
    91dc:	2b12      	cmp	r3, #18
    91de:	f200 80d5 	bhi.w	938c <hci_evt_encode+0x718>
    91e2:	e8df f003 	tbb	[pc, r3]
    91e6:	d30a      	.short	0xd30a
    91e8:	d3c02fd3 	.word	0xd3c02fd3
    91ec:	3cd3d335 	.word	0x3cd3d335
    91f0:	d35fd35b 	.word	0xd35fd35b
    91f4:	a0d3d3d3 	.word	0xa0d3d3d3
    91f8:	a0          	.byte	0xa0
    91f9:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    91fa:	4b37      	ldr	r3, [pc, #220]	; (92d8 <hci_evt_encode+0x664>)
    91fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    9200:	2200      	movs	r2, #0
    9202:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9206:	4313      	orrs	r3, r2
    9208:	f43f ae34 	beq.w	8e74 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    920c:	4b34      	ldr	r3, [pc, #208]	; (92e0 <hci_evt_encode+0x66c>)
    920e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9212:	2300      	movs	r3, #0
    9214:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9218:	4313      	orrs	r3, r2
    921a:	f43f ae2b 	beq.w	8e74 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    921e:	220c      	movs	r2, #12
    9220:	2105      	movs	r1, #5
    9222:	4628      	mov	r0, r5
    9224:	f7fe fd1a 	bl	7c5c <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    9228:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    922a:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    922c:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    9230:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    9234:	f7f8 fce2 	bl	1bfc <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    9238:	2202      	movs	r2, #2
    923a:	f104 0114 	add.w	r1, r4, #20
    923e:	f105 000a 	add.w	r0, r5, #10
    9242:	e6a9      	b.n	8f98 <hci_evt_encode+0x324>
		encrypt_change(0x00, handle, buf);
    9244:	460a      	mov	r2, r1
    9246:	2000      	movs	r0, #0
    9248:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    924a:	f7fe fd3f 	bl	7ccc <encrypt_change>
    924e:	e611      	b.n	8e74 <hci_evt_encode+0x200>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    9250:	460b      	mov	r3, r1
    9252:	4632      	mov	r2, r6
    9254:	4639      	mov	r1, r7
    9256:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9258:	f7fe fd58 	bl	7d0c <le_remote_feat_complete>
    925c:	e60a      	b.n	8e74 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    925e:	4b1e      	ldr	r3, [pc, #120]	; (92d8 <hci_evt_encode+0x664>)
    9260:	e9d3 2300 	ldrd	r2, r3, [r3]
    9264:	2300      	movs	r3, #0
    9266:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    926a:	4313      	orrs	r3, r2
    926c:	f43f ae02 	beq.w	8e74 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    9270:	2208      	movs	r2, #8
    9272:	210c      	movs	r1, #12
    9274:	4628      	mov	r0, r5
    9276:	f7fe fccc 	bl	7c12 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    927a:	2108      	movs	r1, #8
    927c:	1868      	adds	r0, r5, r1
    927e:	f009 fa05 	bl	1268c <net_buf_simple_add>
	ep->status = 0x00;
    9282:	2300      	movs	r3, #0
    9284:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9286:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    928a:	7b23      	ldrb	r3, [r4, #12]
    928c:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    928e:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    9292:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    9294:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    9298:	80c3      	strh	r3, [r0, #6]
    929a:	e5eb      	b.n	8e74 <hci_evt_encode+0x200>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    929c:	460a      	mov	r2, r1
    929e:	7b00      	ldrb	r0, [r0, #12]
    92a0:	4631      	mov	r1, r6
    92a2:	e7d2      	b.n	924a <hci_evt_encode+0x5d6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    92a4:	4b0c      	ldr	r3, [pc, #48]	; (92d8 <hci_evt_encode+0x664>)
    92a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    92aa:	2200      	movs	r2, #0
    92ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    92b0:	4313      	orrs	r3, r2
    92b2:	d007      	beq.n	92c4 <hci_evt_encode+0x650>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    92b4:	4b0a      	ldr	r3, [pc, #40]	; (92e0 <hci_evt_encode+0x66c>)
    92b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    92ba:	2300      	movs	r3, #0
    92bc:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    92c0:	4313      	orrs	r3, r2
    92c2:	d121      	bne.n	9308 <hci_evt_encode+0x694>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    92c4:	2300      	movs	r3, #0
    92c6:	9301      	str	r3, [sp, #4]
    92c8:	9300      	str	r3, [sp, #0]
    92ca:	221a      	movs	r2, #26
    92cc:	2102      	movs	r1, #2
    92ce:	4630      	mov	r0, r6
    92d0:	f006 fddc 	bl	fe8c <ll_conn_update>
    92d4:	e5ce      	b.n	8e74 <hci_evt_encode+0x200>
    92d6:	bf00      	nop
    92d8:	20003d28 	.word	0x20003d28
    92dc:	2000082c 	.word	0x2000082c
    92e0:	20003d30 	.word	0x20003d30
    92e4:	200008b8 	.word	0x200008b8
    92e8:	00015fbc 	.word	0x00015fbc
    92ec:	000142a9 	.word	0x000142a9
    92f0:	00015ddf 	.word	0x00015ddf
    92f4:	00015040 	.word	0x00015040
    92f8:	00015047 	.word	0x00015047
    92fc:	00015df3 	.word	0x00015df3
    9300:	00014ff8 	.word	0x00014ff8
    9304:	00014f97 	.word	0x00014f97
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    9308:	220a      	movs	r2, #10
    930a:	2106      	movs	r1, #6
    930c:	4628      	mov	r0, r5
    930e:	f7fe fca5 	bl	7c5c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9312:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    9314:	89a3      	ldrh	r3, [r4, #12]
    9316:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    9318:	89e3      	ldrh	r3, [r4, #14]
    931a:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    931c:	8a23      	ldrh	r3, [r4, #16]
    931e:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    9320:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    9322:	8103      	strh	r3, [r0, #8]
    9324:	e5a6      	b.n	8e74 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9326:	4b1c      	ldr	r3, [pc, #112]	; (9398 <hci_evt_encode+0x724>)
    9328:	e9d3 2300 	ldrd	r2, r3, [r3]
    932c:	2200      	movs	r2, #0
    932e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9332:	4313      	orrs	r3, r2
    9334:	f43f ad9e 	beq.w	8e74 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    9338:	4b18      	ldr	r3, [pc, #96]	; (939c <hci_evt_encode+0x728>)
    933a:	e9d3 2300 	ldrd	r2, r3, [r3]
    933e:	2300      	movs	r3, #0
    9340:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9344:	4313      	orrs	r3, r2
    9346:	f43f ad95 	beq.w	8e74 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    934a:	220a      	movs	r2, #10
    934c:	2107      	movs	r1, #7
    934e:	4628      	mov	r0, r5
    9350:	f7fe fc84 	bl	7c5c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9354:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    9356:	8a23      	ldrh	r3, [r4, #16]
    9358:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    935a:	8a63      	ldrh	r3, [r4, #18]
    935c:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    935e:	89a3      	ldrh	r3, [r4, #12]
    9360:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    9362:	89e3      	ldrh	r3, [r4, #14]
    9364:	e7dd      	b.n	9322 <hci_evt_encode+0x6ae>
    9366:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    9368:	2a0e      	cmp	r2, #14
    936a:	d104      	bne.n	9376 <hci_evt_encode+0x702>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    936c:	460b      	mov	r3, r1
    936e:	4632      	mov	r2, r6
    9370:	2100      	movs	r1, #0
    9372:	201a      	movs	r0, #26
    9374:	e770      	b.n	9258 <hci_evt_encode+0x5e4>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    9376:	4b0a      	ldr	r3, [pc, #40]	; (93a0 <hci_evt_encode+0x72c>)
    9378:	9302      	str	r3, [sp, #8]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    937a:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    937c:	9300      	str	r3, [sp, #0]
    937e:	4a09      	ldr	r2, [pc, #36]	; (93a4 <hci_evt_encode+0x730>)
    9380:	4b09      	ldr	r3, [pc, #36]	; (93a8 <hci_evt_encode+0x734>)
    9382:	490a      	ldr	r1, [pc, #40]	; (93ac <hci_evt_encode+0x738>)
    9384:	480a      	ldr	r0, [pc, #40]	; (93b0 <hci_evt_encode+0x73c>)
    9386:	f7f7 fe01 	bl	f8c <printk>
    938a:	e573      	b.n	8e74 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    938c:	4b04      	ldr	r3, [pc, #16]	; (93a0 <hci_evt_encode+0x72c>)
    938e:	9301      	str	r3, [sp, #4]
    9390:	9300      	str	r3, [sp, #0]
    9392:	4b08      	ldr	r3, [pc, #32]	; (93b4 <hci_evt_encode+0x740>)
    9394:	e71c      	b.n	91d0 <hci_evt_encode+0x55c>
    9396:	bf00      	nop
    9398:	20003d28 	.word	0x20003d28
    939c:	20003d30 	.word	0x20003d30
    93a0:	000142a9 	.word	0x000142a9
    93a4:	00015040 	.word	0x00015040
    93a8:	00015e02 	.word	0x00015e02
    93ac:	00015047 	.word	0x00015047
    93b0:	00015ff8 	.word	0x00015ff8
    93b4:	00015e11 	.word	0x00015e11

000093b8 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    93b8:	b570      	push	{r4, r5, r6, lr}
    93ba:	4606      	mov	r6, r0
    93bc:	460d      	mov	r5, r1
    93be:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    93c0:	2113      	movs	r1, #19
    93c2:	2205      	movs	r2, #5
    93c4:	f7fe fc25 	bl	7c12 <evt_create>

	ep = net_buf_add(buf, len);
    93c8:	2105      	movs	r1, #5
    93ca:	f106 0008 	add.w	r0, r6, #8
    93ce:	f009 f95d 	bl	1268c <net_buf_simple_add>
	ep->num_handles = num_handles;
    93d2:	2301      	movs	r3, #1
    93d4:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    93d6:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    93da:	f8a0 4003 	strh.w	r4, [r0, #3]
    93de:	bd70      	pop	{r4, r5, r6, pc}

000093e0 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    93e0:	7903      	ldrb	r3, [r0, #4]
    93e2:	2b01      	cmp	r3, #1
    93e4:	d006      	beq.n	93f4 <hci_get_class+0x14>
    93e6:	3b02      	subs	r3, #2
    93e8:	b2db      	uxtb	r3, r3
    93ea:	2b0a      	cmp	r3, #10
    93ec:	d80a      	bhi.n	9404 <hci_get_class+0x24>
    93ee:	4a07      	ldr	r2, [pc, #28]	; (940c <hci_get_class+0x2c>)
    93f0:	56d0      	ldrsb	r0, [r2, r3]
    93f2:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    93f4:	7a03      	ldrb	r3, [r0, #8]
    93f6:	f003 0303 	and.w	r3, r3, #3
    93fa:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    93fc:	bf0c      	ite	eq
    93fe:	2002      	moveq	r0, #2
    9400:	2003      	movne	r0, #3
    9402:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    9408:	4770      	bx	lr
    940a:	bf00      	nop
    940c:	00015d79 	.word	0x00015d79

00009410 <hci_init>:
	dup_count = -1;
    9410:	4b0a      	ldr	r3, [pc, #40]	; (943c <hci_init+0x2c>)
    9412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9416:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    9418:	4b09      	ldr	r3, [pc, #36]	; (9440 <hci_init+0x30>)
    941a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    941e:	f641 71ff 	movw	r1, #8191	; 0x1fff
    9422:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9426:	4b07      	ldr	r3, [pc, #28]	; (9444 <hci_init+0x34>)
    9428:	2000      	movs	r0, #0
    942a:	2100      	movs	r1, #0
    942c:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9430:	4b05      	ldr	r3, [pc, #20]	; (9448 <hci_init+0x38>)
    9432:	201f      	movs	r0, #31
    9434:	2100      	movs	r1, #0
    9436:	e9c3 0100 	strd	r0, r1, [r3]
    943a:	4770      	bx	lr
    943c:	20000830 	.word	0x20000830
    9440:	20003d28 	.word	0x20003d28
    9444:	200008b8 	.word	0x200008b8
    9448:	20003d30 	.word	0x20003d30

0000944c <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    944c:	bf20      	wfe
	__SEV();
    944e:	bf40      	sev
	__WFE();
    9450:	bf20      	wfe
    9452:	4770      	bx	lr

00009454 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    9454:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    9456:	4b0d      	ldr	r3, [pc, #52]	; (948c <pdu_len_cmp+0x38>)
{
    9458:	b089      	sub	sp, #36	; 0x24
    945a:	4605      	mov	r5, r0
    945c:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    945e:	aa01      	add	r2, sp, #4
    9460:	f103 0718 	add.w	r7, r3, #24
    9464:	6818      	ldr	r0, [r3, #0]
    9466:	6859      	ldr	r1, [r3, #4]
    9468:	4614      	mov	r4, r2
    946a:	c403      	stmia	r4!, {r0, r1}
    946c:	3308      	adds	r3, #8
    946e:	42bb      	cmp	r3, r7
    9470:	4622      	mov	r2, r4
    9472:	d1f7      	bne.n	9464 <pdu_len_cmp+0x10>
    9474:	881b      	ldrh	r3, [r3, #0]
    9476:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    9478:	ab08      	add	r3, sp, #32
    947a:	441d      	add	r5, r3
    947c:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    9480:	1b83      	subs	r3, r0, r6
    9482:	4258      	negs	r0, r3
    9484:	4158      	adcs	r0, r3
    9486:	b009      	add	sp, #36	; 0x24
    9488:	bdf0      	pop	{r4, r5, r6, r7, pc}
    948a:	bf00      	nop
    948c:	000141fb 	.word	0x000141fb

00009490 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    9490:	6008      	str	r0, [r1, #0]
    9492:	4770      	bx	lr

00009494 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9494:	b918      	cbnz	r0, 949e <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    9496:	680b      	ldr	r3, [r1, #0]
    9498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    949c:	600b      	str	r3, [r1, #0]
    949e:	4770      	bx	lr

000094a0 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    94a0:	b918      	cbnz	r0, 94aa <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    94a2:	680b      	ldr	r3, [r1, #0]
    94a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    94a8:	600b      	str	r3, [r1, #0]
    94aa:	4770      	bx	lr

000094ac <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    94ac:	b570      	push	{r4, r5, r6, lr}
    94ae:	1d03      	adds	r3, r0, #4
    94b0:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    94b2:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    94b4:	429d      	cmp	r5, r3
    94b6:	d101      	bne.n	94bc <chan_sel_remap+0x10>
    94b8:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    94ba:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    94bc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    94c0:	2200      	movs	r2, #0
    94c2:	18a0      	adds	r0, r4, r2
    94c4:	2a08      	cmp	r2, #8
    94c6:	b2c0      	uxtb	r0, r0
    94c8:	d101      	bne.n	94ce <chan_sel_remap+0x22>
    94ca:	4604      	mov	r4, r0
    94cc:	e7f2      	b.n	94b4 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    94ce:	f016 0f01 	tst.w	r6, #1
    94d2:	d003      	beq.n	94dc <chan_sel_remap+0x30>
				if (chan_index == 0) {
    94d4:	2900      	cmp	r1, #0
    94d6:	d0f0      	beq.n	94ba <chan_sel_remap+0xe>
				chan_index--;
    94d8:	3901      	subs	r1, #1
    94da:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    94dc:	0876      	lsrs	r6, r6, #1
    94de:	3201      	adds	r2, #1
    94e0:	e7ef      	b.n	94c2 <chan_sel_remap+0x16>
	...

000094e4 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    94e4:	4b09      	ldr	r3, [pc, #36]	; (950c <packet_rx_acquired_count_get+0x28>)
    94e6:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    94ea:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    94ee:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    94f0:	bf3b      	ittet	cc
    94f2:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    94f6:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    94fa:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    94fe:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    9500:	bf2c      	ite	cs
    9502:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    9504:	1a80      	subcc	r0, r0, r2
    9506:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    9508:	4770      	bx	lr
    950a:	bf00      	nop
    950c:	200008c0 	.word	0x200008c0

00009510 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    9510:	b508      	push	{r3, lr}
    9512:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    9514:	f7ff ffe6 	bl	94e4 <packet_rx_acquired_count_get>
    9518:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    951a:	bf21      	itttt	cs
    951c:	4b04      	ldrcs	r3, [pc, #16]	; (9530 <packet_rx_reserve_get+0x20>)
    951e:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    9522:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    9526:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    952a:	bf38      	it	cc
    952c:	2000      	movcc	r0, #0
}
    952e:	bd08      	pop	{r3, pc}
    9530:	200008c0 	.word	0x200008c0

00009534 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    9534:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    9536:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    953a:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    953e:	429c      	cmp	r4, r3
    9540:	d15a      	bne.n	95f8 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    9542:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    9546:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    954a:	428b      	cmp	r3, r1
    954c:	d154      	bne.n	95f8 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    954e:	f990 301d 	ldrsb.w	r3, [r0, #29]
    9552:	2b00      	cmp	r3, #0
    9554:	db25      	blt.n	95a2 <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    9556:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    9558:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    955a:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    955e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    9560:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    9564:	4351      	muls	r1, r2
					      conn->supervision_reload *
    9566:	227d      	movs	r2, #125	; 0x7d
    9568:	434a      	muls	r2, r1
					      125 / 1000;
    956a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    956e:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    9572:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9576:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    957a:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    957c:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    9580:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    9582:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    9584:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    9588:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    958a:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    958e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    9592:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    9596:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    959a:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    959e:	4618      	mov	r0, r3
    95a0:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    95a2:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    95a6:	06dc      	lsls	r4, r3, #27
    95a8:	d428      	bmi.n	95fc <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    95aa:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    95ae:	069a      	lsls	r2, r3, #26
    95b0:	d503      	bpl.n	95ba <conn_update_req+0x86>
		    (conn->llcp_features &
    95b2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    95b6:	079b      	lsls	r3, r3, #30
    95b8:	d520      	bpl.n	95fc <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    95ba:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    95bc:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    95be:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    95c2:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    95c4:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    95c8:	4354      	muls	r4, r2
						conn->supervision_reload *
    95ca:	227d      	movs	r2, #125	; 0x7d
    95cc:	4362      	muls	r2, r4
						125 / 1000;
    95ce:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    95d2:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    95d6:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    95da:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    95de:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    95e0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    95e4:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    95e8:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    95ea:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    95ee:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    95f2:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    95f6:	e7d2      	b.n	959e <conn_update_req+0x6a>
		return 1;
    95f8:	2001      	movs	r0, #1
    95fa:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    95fc:	2002      	movs	r0, #2
}
    95fe:	bd30      	pop	{r4, r5, pc}

00009600 <packet_rx_allocate>:
{
    9600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    9604:	4d22      	ldr	r5, [pc, #136]	; (9690 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    9606:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    960a:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    960e:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    9612:	3401      	adds	r4, #1
    9614:	4581      	cmp	r9, r0
    9616:	b2e4      	uxtb	r4, r4
    9618:	bf28      	it	cs
    961a:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    961c:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    9620:	42a3      	cmp	r3, r4
    9622:	bf08      	it	eq
    9624:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9626:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    962a:	f1b9 0f00 	cmp.w	r9, #0
    962e:	d003      	beq.n	9638 <packet_rx_allocate+0x38>
    9630:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    9634:	429c      	cmp	r4, r3
    9636:	d101      	bne.n	963c <packet_rx_allocate+0x3c>
    9638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    963c:	4638      	mov	r0, r7
    963e:	f7fd f952 	bl	68e6 <mem_acquire>
		if (!link) {
    9642:	4606      	mov	r6, r0
    9644:	2800      	cmp	r0, #0
    9646:	d0f7      	beq.n	9638 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9648:	4640      	mov	r0, r8
    964a:	f7fd f94c 	bl	68e6 <mem_acquire>
		if (!node_rx) {
    964e:	b928      	cbnz	r0, 965c <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    9650:	4630      	mov	r0, r6
    9652:	4910      	ldr	r1, [pc, #64]	; (9694 <packet_rx_allocate+0x94>)
}
    9654:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    9658:	f7fd b95f 	b.w	691a <mem_release>
		node_rx->hdr.onion.link = link;
    965c:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    965e:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    9662:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    9666:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    966a:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    966e:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    9672:	3401      	adds	r4, #1
    9674:	b2e4      	uxtb	r4, r4
			acquire = 0;
    9676:	42a3      	cmp	r3, r4
    9678:	bf08      	it	eq
    967a:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    967c:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    9680:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    9684:	3b01      	subs	r3, #1
    9686:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    968a:	fa5f f989 	uxtb.w	r9, r9
    968e:	e7cc      	b.n	962a <packet_rx_allocate+0x2a>
    9690:	200008c0 	.word	0x200008c0
    9694:	20000a08 	.word	0x20000a08

00009698 <common_init>:
{
    9698:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    969a:	4c39      	ldr	r4, [pc, #228]	; (9780 <common_init+0xe8>)
    969c:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    96a0:	2a00      	cmp	r2, #0
    96a2:	d040      	beq.n	9726 <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    96a4:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    96a8:	f44f 71aa 	mov.w	r1, #340	; 0x154
    96ac:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    96b0:	f7fd f8f2 	bl	6898 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    96b4:	4b33      	ldr	r3, [pc, #204]	; (9784 <common_init+0xec>)
    96b6:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    96ba:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    96be:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    96c2:	f7fd f8e9 	bl	6898 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    96c6:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    96ca:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    96ce:	4b2e      	ldr	r3, [pc, #184]	; (9788 <common_init+0xf0>)
    96d0:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    96d4:	440a      	add	r2, r1
    96d6:	2108      	movs	r1, #8
    96d8:	f7fd f8de 	bl	6898 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    96dc:	4b2b      	ldr	r3, [pc, #172]	; (978c <common_init+0xf4>)
    96de:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    96e2:	2202      	movs	r2, #2
    96e4:	2124      	movs	r1, #36	; 0x24
    96e6:	f7fd f8d7 	bl	6898 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    96ea:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    96ee:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    96f2:	4b27      	ldr	r3, [pc, #156]	; (9790 <common_init+0xf8>)
    96f4:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    96f8:	3a01      	subs	r2, #1
    96fa:	b292      	uxth	r2, r2
    96fc:	f7fd f8cc 	bl	6898 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    9700:	4821      	ldr	r0, [pc, #132]	; (9788 <common_init+0xf0>)
    9702:	f7fd f8f0 	bl	68e6 <mem_acquire>
	LL_ASSERT(link);
    9706:	b988      	cbnz	r0, 972c <common_init+0x94>
    9708:	4b22      	ldr	r3, [pc, #136]	; (9794 <common_init+0xfc>)
    970a:	9301      	str	r3, [sp, #4]
    970c:	9300      	str	r3, [sp, #0]
    970e:	4a22      	ldr	r2, [pc, #136]	; (9798 <common_init+0x100>)
    9710:	4b22      	ldr	r3, [pc, #136]	; (979c <common_init+0x104>)
    9712:	4923      	ldr	r1, [pc, #140]	; (97a0 <common_init+0x108>)
    9714:	4823      	ldr	r0, [pc, #140]	; (97a4 <common_init+0x10c>)
    9716:	f7f7 fc39 	bl	f8c <printk>
    971a:	4040      	eors	r0, r0
    971c:	f380 8811 	msr	BASEPRI, r0
    9720:	f04f 0004 	mov.w	r0, #4
    9724:	df02      	svc	2
		_radio.conn_free = NULL;
    9726:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    972a:	e7c3      	b.n	96b4 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    972c:	4a1e      	ldr	r2, [pc, #120]	; (97a8 <common_init+0x110>)
    972e:	1f11      	subs	r1, r2, #4
    9730:	f7fd f930 	bl	6994 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    9734:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    9738:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    973c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    9740:	231f      	movs	r3, #31
    9742:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    9746:	2325      	movs	r3, #37	; 0x25
    9748:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    974c:	231b      	movs	r3, #27
    974e:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9752:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    9756:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9758:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    975c:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    975e:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    9762:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    9766:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    976a:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    976e:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    9772:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    9776:	b002      	add	sp, #8
    9778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    977c:	f7ff bf40 	b.w	9600 <packet_rx_allocate>
    9780:	200008c0 	.word	0x200008c0
    9784:	200009f0 	.word	0x200009f0
    9788:	20000a08 	.word	0x20000a08
    978c:	20000a1c 	.word	0x20000a1c
    9790:	20000a24 	.word	0x20000a24
    9794:	000142a9 	.word	0x000142a9
    9798:	00014ff8 	.word	0x00014ff8
    979c:	000160ca 	.word	0x000160ca
    97a0:	00015047 	.word	0x00015047
    97a4:	00016547 	.word	0x00016547
    97a8:	20000a10 	.word	0x20000a10

000097ac <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    97ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    97b0:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    97b2:	4294      	cmp	r4, r2
{
    97b4:	4681      	mov	r9, r0
    97b6:	460f      	mov	r7, r1
    97b8:	4690      	mov	r8, r2
	if (_first == last) {
    97ba:	d03d      	beq.n	9838 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    97bc:	4e1f      	ldr	r6, [pc, #124]	; (983c <tx_cmplt_get+0x90>)
    97be:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    97c2:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    97c6:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    97c8:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    97ca:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    97ce:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    97d2:	b222      	sxth	r2, r4
    97d4:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    97d8:	f8b9 e000 	ldrh.w	lr, [r9]
    97dc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    97e0:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    97e4:	4596      	cmp	lr, r2
    97e6:	d120      	bne.n	982a <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    97e8:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    97ea:	2801      	cmp	r0, #1
    97ec:	f020 0303 	bic.w	r3, r0, #3
    97f0:	d90a      	bls.n	9808 <tx_cmplt_get+0x5c>
    97f2:	b1f3      	cbz	r3, 9832 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    97f4:	1d02      	adds	r2, r0, #4
    97f6:	d01c      	beq.n	9832 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    97f8:	7942      	ldrb	r2, [r0, #5]
    97fa:	b1d2      	cbz	r2, 9832 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    97fc:	7902      	ldrb	r2, [r0, #4]
    97fe:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    9802:	3a01      	subs	r2, #1
    9804:	2a01      	cmp	r2, #1
    9806:	d814      	bhi.n	9832 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    9808:	2201      	movs	r2, #1
			cmplt++;
    980a:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    980c:	604a      	str	r2, [r1, #4]
			cmplt++;
    980e:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    9810:	b113      	cbz	r3, 9818 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    9812:	4651      	mov	r1, sl
    9814:	f7fd f881 	bl	691a <mem_release>
		}

		_first = _first + 1;
    9818:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    981a:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    981e:	b2e4      	uxtb	r4, r4
			_first = 0;
    9820:	42a2      	cmp	r2, r4
    9822:	bf08      	it	eq
    9824:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    9826:	4544      	cmp	r4, r8
    9828:	d1d3      	bne.n	97d2 <tx_cmplt_get+0x26>

	*first = _first;
    982a:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    982c:	4628      	mov	r0, r5
    982e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    9832:	f8c1 b004 	str.w	fp, [r1, #4]
    9836:	e7eb      	b.n	9810 <tx_cmplt_get+0x64>
		return 0;
    9838:	2500      	movs	r5, #0
    983a:	e7f7      	b.n	982c <tx_cmplt_get+0x80>
    983c:	200008c0 	.word	0x200008c0

00009840 <connection_get>:
{
    9840:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    9842:	4b09      	ldr	r3, [pc, #36]	; (9868 <connection_get+0x28>)
    9844:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    9848:	4282      	cmp	r2, r0
{
    984a:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    984c:	d90a      	bls.n	9864 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    984e:	4602      	mov	r2, r0
    9850:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9854:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    9858:	f7fd f87a 	bl	6950 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    985c:	b110      	cbz	r0, 9864 <connection_get+0x24>
    985e:	8c03      	ldrh	r3, [r0, #32]
    9860:	42a3      	cmp	r3, r4
    9862:	d000      	beq.n	9866 <connection_get+0x26>
	return 0;
    9864:	2000      	movs	r0, #0
}
    9866:	bd10      	pop	{r4, pc}
    9868:	200008c0 	.word	0x200008c0

0000986c <role_disable>:
{
    986c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9870:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9872:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    9874:	2805      	cmp	r0, #5
{
    9876:	4605      	mov	r5, r0
    9878:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    987a:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    987c:	d00c      	beq.n	9898 <role_disable+0x2c>
    987e:	2806      	cmp	r0, #6
    9880:	d040      	beq.n	9904 <role_disable+0x98>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    9882:	d945      	bls.n	9910 <role_disable+0xa4>
			conn_handle = ticker_id_primary -
    9884:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    9886:	b280      	uxth	r0, r0
    9888:	f7ff ffda 	bl	9840 <connection_get>
			if (!conn) {
    988c:	2800      	cmp	r0, #0
    988e:	f000 8123 	beq.w	9ad8 <role_disable+0x26c>
			ticks_active_to_start =
    9892:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    9896:	e00f      	b.n	98b8 <role_disable+0x4c>
		ticks_xtal_to_start =
    9898:	4b90      	ldr	r3, [pc, #576]	; (9adc <role_disable+0x270>)
    989a:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    989c:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    98a0:	ab02      	add	r3, sp, #8
    98a2:	9300      	str	r3, [sp, #0]
    98a4:	460a      	mov	r2, r1
    98a6:	4b8e      	ldr	r3, [pc, #568]	; (9ae0 <role_disable+0x274>)
    98a8:	2103      	movs	r1, #3
    98aa:	2000      	movs	r0, #0
    98ac:	f7fd ff42 	bl	7734 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    98b0:	2802      	cmp	r0, #2
    98b2:	d011      	beq.n	98d8 <role_disable+0x6c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    98b4:	9b02      	ldr	r3, [sp, #8]
    98b6:	b99b      	cbnz	r3, 98e0 <role_disable+0x74>
	LL_ASSERT(!_radio.ticker_id_stop);
    98b8:	4c88      	ldr	r4, [pc, #544]	; (9adc <role_disable+0x270>)
    98ba:	7ca3      	ldrb	r3, [r4, #18]
    98bc:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    98c0:	2b00      	cmp	r3, #0
    98c2:	d02d      	beq.n	9920 <role_disable+0xb4>
    98c4:	4b87      	ldr	r3, [pc, #540]	; (9ae4 <role_disable+0x278>)
    98c6:	9301      	str	r3, [sp, #4]
    98c8:	9300      	str	r3, [sp, #0]
    98ca:	4a87      	ldr	r2, [pc, #540]	; (9ae8 <role_disable+0x27c>)
    98cc:	4b87      	ldr	r3, [pc, #540]	; (9aec <role_disable+0x280>)
    98ce:	4988      	ldr	r1, [pc, #544]	; (9af0 <role_disable+0x284>)
    98d0:	4888      	ldr	r0, [pc, #544]	; (9af4 <role_disable+0x288>)
    98d2:	e00f      	b.n	98f4 <role_disable+0x88>
				cpu_sleep();
    98d4:	f7ff fdba 	bl	944c <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    98d8:	9b02      	ldr	r3, [sp, #8]
    98da:	2b02      	cmp	r3, #2
    98dc:	d0fa      	beq.n	98d4 <role_disable+0x68>
    98de:	e7e9      	b.n	98b4 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    98e0:	9b02      	ldr	r3, [sp, #8]
    98e2:	2b01      	cmp	r3, #1
    98e4:	d0e8      	beq.n	98b8 <role_disable+0x4c>
    98e6:	4b7f      	ldr	r3, [pc, #508]	; (9ae4 <role_disable+0x278>)
    98e8:	9301      	str	r3, [sp, #4]
    98ea:	9300      	str	r3, [sp, #0]
    98ec:	4a7e      	ldr	r2, [pc, #504]	; (9ae8 <role_disable+0x27c>)
    98ee:	4b7f      	ldr	r3, [pc, #508]	; (9aec <role_disable+0x280>)
    98f0:	497f      	ldr	r1, [pc, #508]	; (9af0 <role_disable+0x284>)
    98f2:	4881      	ldr	r0, [pc, #516]	; (9af8 <role_disable+0x28c>)
			LL_ASSERT(0);
    98f4:	f7f7 fb4a 	bl	f8c <printk>
    98f8:	4040      	eors	r0, r0
    98fa:	f380 8811 	msr	BASEPRI, r0
    98fe:	f04f 0004 	mov.w	r0, #4
    9902:	df02      	svc	2
		ticks_xtal_to_start =
    9904:	4b75      	ldr	r3, [pc, #468]	; (9adc <role_disable+0x270>)
    9906:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    990a:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    990e:	e7d3      	b.n	98b8 <role_disable+0x4c>
			LL_ASSERT(0);
    9910:	4b74      	ldr	r3, [pc, #464]	; (9ae4 <role_disable+0x278>)
    9912:	9301      	str	r3, [sp, #4]
    9914:	9300      	str	r3, [sp, #0]
    9916:	4b75      	ldr	r3, [pc, #468]	; (9aec <role_disable+0x280>)
    9918:	4a73      	ldr	r2, [pc, #460]	; (9ae8 <role_disable+0x27c>)
    991a:	4975      	ldr	r1, [pc, #468]	; (9af0 <role_disable+0x284>)
    991c:	4877      	ldr	r0, [pc, #476]	; (9afc <role_disable+0x290>)
    991e:	e7e9      	b.n	98f4 <role_disable+0x88>
	ret_cb = TICKER_STATUS_BUSY;
    9920:	ab06      	add	r3, sp, #24
    9922:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    9924:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    9926:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    992a:	2103      	movs	r1, #3
    992c:	9300      	str	r3, [sp, #0]
    992e:	462a      	mov	r2, r5
    9930:	4b6b      	ldr	r3, [pc, #428]	; (9ae0 <role_disable+0x274>)
    9932:	f7fd feff 	bl	7734 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    9936:	2802      	cmp	r0, #2
    9938:	d025      	beq.n	9986 <role_disable+0x11a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    993a:	9b02      	ldr	r3, [sp, #8]
    993c:	2b00      	cmp	r3, #0
    993e:	d169      	bne.n	9a14 <role_disable+0x1a8>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    9940:	7c23      	ldrb	r3, [r4, #16]
    9942:	429d      	cmp	r5, r3
    9944:	d002      	beq.n	994c <role_disable+0xe0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    9946:	7c63      	ldrb	r3, [r4, #17]
    9948:	429d      	cmp	r5, r3
    994a:	d15f      	bne.n	9a0c <role_disable+0x1a0>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    994c:	ab06      	add	r3, sp, #24
    994e:	2202      	movs	r2, #2
    9950:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9954:	2200      	movs	r2, #0
    9956:	9300      	str	r3, [sp, #0]
    9958:	2103      	movs	r1, #3
    995a:	4b61      	ldr	r3, [pc, #388]	; (9ae0 <role_disable+0x274>)
    995c:	4610      	mov	r0, r2
    995e:	f7fd fee9 	bl	7734 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    9962:	2802      	cmp	r0, #2
    9964:	d11d      	bne.n	99a2 <role_disable+0x136>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9966:	2201      	movs	r2, #1
    9968:	4611      	mov	r1, r2
    996a:	2003      	movs	r0, #3
    996c:	f7fd f85e 	bl	6a2c <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    9970:	9b03      	ldr	r3, [sp, #12]
    9972:	2b02      	cmp	r3, #2
    9974:	d115      	bne.n	99a2 <role_disable+0x136>
    9976:	4b5b      	ldr	r3, [pc, #364]	; (9ae4 <role_disable+0x278>)
    9978:	9301      	str	r3, [sp, #4]
    997a:	9300      	str	r3, [sp, #0]
    997c:	4a5a      	ldr	r2, [pc, #360]	; (9ae8 <role_disable+0x27c>)
    997e:	4b60      	ldr	r3, [pc, #384]	; (9b00 <role_disable+0x294>)
    9980:	495b      	ldr	r1, [pc, #364]	; (9af0 <role_disable+0x284>)
    9982:	4860      	ldr	r0, [pc, #384]	; (9b04 <role_disable+0x298>)
    9984:	e7b6      	b.n	98f4 <role_disable+0x88>
		if (_radio.ticker_id_event == ticker_id_primary) {
    9986:	7c63      	ldrb	r3, [r4, #17]
    9988:	429d      	cmp	r5, r3
    998a:	d104      	bne.n	9996 <role_disable+0x12a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    998c:	2201      	movs	r2, #1
    998e:	4611      	mov	r1, r2
    9990:	2003      	movs	r0, #3
    9992:	f7fd f84b 	bl	6a2c <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    9996:	9b02      	ldr	r3, [sp, #8]
    9998:	2b02      	cmp	r3, #2
    999a:	d1ce      	bne.n	993a <role_disable+0xce>
			cpu_sleep();
    999c:	f7ff fd56 	bl	944c <cpu_sleep>
    99a0:	e7f9      	b.n	9996 <role_disable+0x12a>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    99a2:	9803      	ldr	r0, [sp, #12]
    99a4:	2800      	cmp	r0, #0
    99a6:	d150      	bne.n	9a4a <role_disable+0x1de>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    99a8:	2302      	movs	r3, #2
    99aa:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    99ac:	7c23      	ldrb	r3, [r4, #16]
    99ae:	b93b      	cbnz	r3, 99c0 <role_disable+0x154>
    99b0:	4b4c      	ldr	r3, [pc, #304]	; (9ae4 <role_disable+0x278>)
    99b2:	9301      	str	r3, [sp, #4]
    99b4:	9300      	str	r3, [sp, #0]
    99b6:	4a4c      	ldr	r2, [pc, #304]	; (9ae8 <role_disable+0x27c>)
    99b8:	4b51      	ldr	r3, [pc, #324]	; (9b00 <role_disable+0x294>)
    99ba:	494d      	ldr	r1, [pc, #308]	; (9af0 <role_disable+0x284>)
    99bc:	4852      	ldr	r0, [pc, #328]	; (9b08 <role_disable+0x29c>)
    99be:	e799      	b.n	98f4 <role_disable+0x88>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    99c0:	ab04      	add	r3, sp, #16
    99c2:	9300      	str	r3, [sp, #0]
    99c4:	2201      	movs	r2, #1
    99c6:	4b46      	ldr	r3, [pc, #280]	; (9ae0 <role_disable+0x274>)
		_radio.ticker_id_prepare = 0;
    99c8:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    99ca:	2103      	movs	r1, #3
    99cc:	f7fd feb2 	bl	7734 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    99d0:	2802      	cmp	r0, #2
    99d2:	d10f      	bne.n	99f4 <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    99d4:	2201      	movs	r2, #1
    99d6:	4611      	mov	r1, r2
    99d8:	2003      	movs	r0, #3
    99da:	f7fd f827 	bl	6a2c <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    99de:	9b04      	ldr	r3, [sp, #16]
    99e0:	2b02      	cmp	r3, #2
    99e2:	d107      	bne.n	99f4 <role_disable+0x188>
    99e4:	4b3f      	ldr	r3, [pc, #252]	; (9ae4 <role_disable+0x278>)
    99e6:	9301      	str	r3, [sp, #4]
    99e8:	9300      	str	r3, [sp, #0]
    99ea:	4a3f      	ldr	r2, [pc, #252]	; (9ae8 <role_disable+0x27c>)
    99ec:	4b44      	ldr	r3, [pc, #272]	; (9b00 <role_disable+0x294>)
    99ee:	4940      	ldr	r1, [pc, #256]	; (9af0 <role_disable+0x284>)
    99f0:	4846      	ldr	r0, [pc, #280]	; (9b0c <role_disable+0x2a0>)
    99f2:	e77f      	b.n	98f4 <role_disable+0x88>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    99f4:	9a04      	ldr	r2, [sp, #16]
    99f6:	b99a      	cbnz	r2, 9a20 <role_disable+0x1b4>
			ticks_xtal_to_start &= ~XON_BITMASK;
    99f8:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    99fc:	45b0      	cmp	r8, r6
    99fe:	d922      	bls.n	9a46 <role_disable+0x1da>
				ret = mayfly_enqueue(
    9a00:	4b43      	ldr	r3, [pc, #268]	; (9b10 <role_disable+0x2a4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9a02:	4611      	mov	r1, r2
    9a04:	2003      	movs	r0, #3
    9a06:	f7fd f839 	bl	6a7c <mayfly_enqueue>
			LL_ASSERT(!ret);
    9a0a:	b9a0      	cbnz	r0, 9a36 <role_disable+0x1ca>
	if (!_radio.ticker_id_stop) {
    9a0c:	7ca3      	ldrb	r3, [r4, #18]
    9a0e:	b90b      	cbnz	r3, 9a14 <role_disable+0x1a8>
		ret_cb = TICKER_STATUS_FAILURE;
    9a10:	2301      	movs	r3, #1
    9a12:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    9a14:	2300      	movs	r3, #0
    9a16:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    9a18:	9802      	ldr	r0, [sp, #8]
}
    9a1a:	b006      	add	sp, #24
    9a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    9a20:	9b04      	ldr	r3, [sp, #16]
    9a22:	2b01      	cmp	r3, #1
    9a24:	d153      	bne.n	9ace <role_disable+0x262>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9a26:	2200      	movs	r2, #0
    9a28:	4611      	mov	r1, r2
    9a2a:	4b39      	ldr	r3, [pc, #228]	; (9b10 <role_disable+0x2a4>)
    9a2c:	2003      	movs	r0, #3
    9a2e:	f7fd f825 	bl	6a7c <mayfly_enqueue>
			LL_ASSERT(!ret);
    9a32:	4602      	mov	r2, r0
    9a34:	b138      	cbz	r0, 9a46 <role_disable+0x1da>
			LL_ASSERT(!ret);
    9a36:	4b2b      	ldr	r3, [pc, #172]	; (9ae4 <role_disable+0x278>)
    9a38:	9301      	str	r3, [sp, #4]
    9a3a:	9300      	str	r3, [sp, #0]
    9a3c:	4a2a      	ldr	r2, [pc, #168]	; (9ae8 <role_disable+0x27c>)
    9a3e:	4b30      	ldr	r3, [pc, #192]	; (9b00 <role_disable+0x294>)
    9a40:	492b      	ldr	r1, [pc, #172]	; (9af0 <role_disable+0x284>)
    9a42:	4834      	ldr	r0, [pc, #208]	; (9b14 <role_disable+0x2a8>)
    9a44:	e756      	b.n	98f4 <role_disable+0x88>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9a46:	4b34      	ldr	r3, [pc, #208]	; (9b18 <role_disable+0x2ac>)
    9a48:	e7db      	b.n	9a02 <role_disable+0x196>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    9a4a:	9d03      	ldr	r5, [sp, #12]
    9a4c:	2d01      	cmp	r5, #1
    9a4e:	d13e      	bne.n	9ace <role_disable+0x262>
		if (ticker_id_stop != TICKER_NULL) {
    9a50:	2fff      	cmp	r7, #255	; 0xff
    9a52:	d029      	beq.n	9aa8 <role_disable+0x23c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    9a54:	ab06      	add	r3, sp, #24
    9a56:	2202      	movs	r2, #2
    9a58:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9a5c:	2103      	movs	r1, #3
    9a5e:	9300      	str	r3, [sp, #0]
    9a60:	463a      	mov	r2, r7
    9a62:	4b1f      	ldr	r3, [pc, #124]	; (9ae0 <role_disable+0x274>)
    9a64:	2000      	movs	r0, #0
    9a66:	f7fd fe65 	bl	7734 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    9a6a:	2802      	cmp	r0, #2
    9a6c:	d10f      	bne.n	9a8e <role_disable+0x222>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9a6e:	462a      	mov	r2, r5
    9a70:	4629      	mov	r1, r5
    9a72:	2003      	movs	r0, #3
    9a74:	f7fc ffda 	bl	6a2c <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    9a78:	9b05      	ldr	r3, [sp, #20]
    9a7a:	2b02      	cmp	r3, #2
    9a7c:	d107      	bne.n	9a8e <role_disable+0x222>
    9a7e:	4b19      	ldr	r3, [pc, #100]	; (9ae4 <role_disable+0x278>)
    9a80:	9301      	str	r3, [sp, #4]
    9a82:	9300      	str	r3, [sp, #0]
    9a84:	4a18      	ldr	r2, [pc, #96]	; (9ae8 <role_disable+0x27c>)
    9a86:	4b1e      	ldr	r3, [pc, #120]	; (9b00 <role_disable+0x294>)
    9a88:	4919      	ldr	r1, [pc, #100]	; (9af0 <role_disable+0x284>)
    9a8a:	4824      	ldr	r0, [pc, #144]	; (9b1c <role_disable+0x2b0>)
    9a8c:	e732      	b.n	98f4 <role_disable+0x88>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    9a8e:	9b05      	ldr	r3, [sp, #20]
    9a90:	b153      	cbz	r3, 9aa8 <role_disable+0x23c>
    9a92:	9b05      	ldr	r3, [sp, #20]
    9a94:	2b01      	cmp	r3, #1
    9a96:	d007      	beq.n	9aa8 <role_disable+0x23c>
    9a98:	4b12      	ldr	r3, [pc, #72]	; (9ae4 <role_disable+0x278>)
    9a9a:	9301      	str	r3, [sp, #4]
    9a9c:	9300      	str	r3, [sp, #0]
    9a9e:	4a12      	ldr	r2, [pc, #72]	; (9ae8 <role_disable+0x27c>)
    9aa0:	4b17      	ldr	r3, [pc, #92]	; (9b00 <role_disable+0x294>)
    9aa2:	4913      	ldr	r1, [pc, #76]	; (9af0 <role_disable+0x284>)
    9aa4:	481e      	ldr	r0, [pc, #120]	; (9b20 <role_disable+0x2b4>)
    9aa6:	e725      	b.n	98f4 <role_disable+0x88>
		if (_radio.role != ROLE_NONE) {
    9aa8:	7ce3      	ldrb	r3, [r4, #19]
    9aaa:	2b00      	cmp	r3, #0
    9aac:	d0ae      	beq.n	9a0c <role_disable+0x1a0>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    9aae:	4b1d      	ldr	r3, [pc, #116]	; (9b24 <role_disable+0x2b8>)
    9ab0:	2204      	movs	r2, #4
    9ab2:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9ab4:	2200      	movs	r2, #0
    9ab6:	4611      	mov	r1, r2
    9ab8:	2003      	movs	r0, #3
    9aba:	f7fc ffdf 	bl	6a7c <mayfly_enqueue>
			LL_ASSERT(!ret);
    9abe:	2800      	cmp	r0, #0
    9ac0:	d1b9      	bne.n	9a36 <role_disable+0x1ca>
			while (_radio.role != ROLE_NONE) {
    9ac2:	7ce3      	ldrb	r3, [r4, #19]
    9ac4:	2b00      	cmp	r3, #0
    9ac6:	d0a1      	beq.n	9a0c <role_disable+0x1a0>
				cpu_sleep();
    9ac8:	f7ff fcc0 	bl	944c <cpu_sleep>
    9acc:	e7f9      	b.n	9ac2 <role_disable+0x256>
		LL_ASSERT(0);
    9ace:	4b05      	ldr	r3, [pc, #20]	; (9ae4 <role_disable+0x278>)
    9ad0:	9301      	str	r3, [sp, #4]
    9ad2:	9300      	str	r3, [sp, #0]
    9ad4:	4b0a      	ldr	r3, [pc, #40]	; (9b00 <role_disable+0x294>)
    9ad6:	e71f      	b.n	9918 <role_disable+0xac>
				return 1;
    9ad8:	2001      	movs	r0, #1
    9ada:	e79e      	b.n	9a1a <role_disable+0x1ae>
    9adc:	200008c0 	.word	0x200008c0
    9ae0:	00009491 	.word	0x00009491
    9ae4:	000142a9 	.word	0x000142a9
    9ae8:	00014ff8 	.word	0x00014ff8
    9aec:	000164ec 	.word	0x000164ec
    9af0:	00015047 	.word	0x00015047
    9af4:	00016e5e 	.word	0x00016e5e
    9af8:	00016e1e 	.word	0x00016e1e
    9afc:	00014f97 	.word	0x00014f97
    9b00:	000164d8 	.word	0x000164d8
    9b04:	00016e96 	.word	0x00016e96
    9b08:	00016ec7 	.word	0x00016ec7
    9b0c:	00016f01 	.word	0x00016f01
    9b10:	20003d58 	.word	0x20003d58
    9b14:	00016f31 	.word	0x00016f31
    9b18:	20003df8 	.word	0x20003df8
    9b1c:	00016f57 	.word	0x00016f57
    9b20:	00016f89 	.word	0x00016f89
    9b24:	20003d78 	.word	0x20003d78

00009b28 <mayfly_xtal_retain>:
{
    9b28:	b513      	push	{r0, r1, r4, lr}
    9b2a:	4b1d      	ldr	r3, [pc, #116]	; (9ba0 <mayfly_xtal_retain+0x78>)
    9b2c:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    9b2e:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    9b30:	b301      	cbz	r1, 9b74 <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    9b32:	2a00      	cmp	r2, #0
    9b34:	d132      	bne.n	9b9c <mayfly_xtal_retain+0x74>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    9b36:	2801      	cmp	r0, #1
    9b38:	d00e      	beq.n	9b58 <mayfly_xtal_retain+0x30>
    9b3a:	4b1a      	ldr	r3, [pc, #104]	; (9ba4 <mayfly_xtal_retain+0x7c>)
    9b3c:	9301      	str	r3, [sp, #4]
    9b3e:	9300      	str	r3, [sp, #0]
    9b40:	4a19      	ldr	r2, [pc, #100]	; (9ba8 <mayfly_xtal_retain+0x80>)
    9b42:	4b1a      	ldr	r3, [pc, #104]	; (9bac <mayfly_xtal_retain+0x84>)
    9b44:	491a      	ldr	r1, [pc, #104]	; (9bb0 <mayfly_xtal_retain+0x88>)
    9b46:	481b      	ldr	r0, [pc, #108]	; (9bb4 <mayfly_xtal_retain+0x8c>)
			LL_ASSERT(!retval);
    9b48:	f7f7 fa20 	bl	f8c <printk>
    9b4c:	4040      	eors	r0, r0
    9b4e:	f380 8811 	msr	BASEPRI, r0
    9b52:	f04f 0004 	mov.w	r0, #4
    9b56:	df02      	svc	2
			s_xtal_retained = 1;
    9b58:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    9b5a:	4b17      	ldr	r3, [pc, #92]	; (9bb8 <mayfly_xtal_retain+0x90>)
    9b5c:	4611      	mov	r1, r2
    9b5e:	f7fc ff8d 	bl	6a7c <mayfly_enqueue>
			LL_ASSERT(!retval);
    9b62:	b1d8      	cbz	r0, 9b9c <mayfly_xtal_retain+0x74>
    9b64:	4b0f      	ldr	r3, [pc, #60]	; (9ba4 <mayfly_xtal_retain+0x7c>)
    9b66:	9301      	str	r3, [sp, #4]
    9b68:	9300      	str	r3, [sp, #0]
    9b6a:	4a0f      	ldr	r2, [pc, #60]	; (9ba8 <mayfly_xtal_retain+0x80>)
    9b6c:	4b0f      	ldr	r3, [pc, #60]	; (9bac <mayfly_xtal_retain+0x84>)
    9b6e:	4910      	ldr	r1, [pc, #64]	; (9bb0 <mayfly_xtal_retain+0x88>)
    9b70:	4812      	ldr	r0, [pc, #72]	; (9bbc <mayfly_xtal_retain+0x94>)
    9b72:	e7e9      	b.n	9b48 <mayfly_xtal_retain+0x20>
		if (s_xtal_retained) {
    9b74:	b192      	cbz	r2, 9b9c <mayfly_xtal_retain+0x74>
			s_xtal_retained = 0;
    9b76:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    9b78:	b170      	cbz	r0, 9b98 <mayfly_xtal_retain+0x70>
    9b7a:	2801      	cmp	r0, #1
    9b7c:	d104      	bne.n	9b88 <mayfly_xtal_retain+0x60>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    9b7e:	4b10      	ldr	r3, [pc, #64]	; (9bc0 <mayfly_xtal_retain+0x98>)
			retval = mayfly_enqueue(caller_id,
    9b80:	2200      	movs	r2, #0
    9b82:	4611      	mov	r1, r2
    9b84:	4620      	mov	r0, r4
    9b86:	e7ea      	b.n	9b5e <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    9b88:	4b06      	ldr	r3, [pc, #24]	; (9ba4 <mayfly_xtal_retain+0x7c>)
    9b8a:	9301      	str	r3, [sp, #4]
    9b8c:	9300      	str	r3, [sp, #0]
    9b8e:	4a06      	ldr	r2, [pc, #24]	; (9ba8 <mayfly_xtal_retain+0x80>)
    9b90:	4b06      	ldr	r3, [pc, #24]	; (9bac <mayfly_xtal_retain+0x84>)
    9b92:	4907      	ldr	r1, [pc, #28]	; (9bb0 <mayfly_xtal_retain+0x88>)
    9b94:	480b      	ldr	r0, [pc, #44]	; (9bc4 <mayfly_xtal_retain+0x9c>)
    9b96:	e7d7      	b.n	9b48 <mayfly_xtal_retain+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    9b98:	4b0b      	ldr	r3, [pc, #44]	; (9bc8 <mayfly_xtal_retain+0xa0>)
    9b9a:	e7f1      	b.n	9b80 <mayfly_xtal_retain+0x58>
}
    9b9c:	b002      	add	sp, #8
    9b9e:	bd10      	pop	{r4, pc}
    9ba0:	20000ac0 	.word	0x20000ac0
    9ba4:	000142a9 	.word	0x000142a9
    9ba8:	00014ff8 	.word	0x00014ff8
    9bac:	00016291 	.word	0x00016291
    9bb0:	00015047 	.word	0x00015047
    9bb4:	00016c77 	.word	0x00016c77
    9bb8:	20003dc8 	.word	0x20003dc8
    9bbc:	00016ca7 	.word	0x00016ca7
    9bc0:	20003de8 	.word	0x20003de8
    9bc4:	00014f97 	.word	0x00014f97
    9bc8:	20003dd8 	.word	0x20003dd8

00009bcc <rx_packet_set>:
{
    9bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    9bce:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    9bd2:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    9bd4:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    9bd6:	f004 0407 	and.w	r4, r4, #7
{
    9bda:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    9bdc:	4620      	mov	r0, r4
    9bde:	2100      	movs	r1, #0
    9be0:	f007 ffe2 	bl	11ba8 <radio_phy_set>
	if (conn->enc_rx) {
    9be4:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    9be8:	f013 0f10 	tst.w	r3, #16
    9bec:	ea4f 0244 	mov.w	r2, r4, lsl #1
    9bf0:	d010      	beq.n	9c14 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    9bf2:	1d29      	adds	r1, r5, #4
    9bf4:	f042 0201 	orr.w	r2, r2, #1
    9bf8:	b2c9      	uxtb	r1, r1
    9bfa:	2008      	movs	r0, #8
    9bfc:	f008 f81a 	bl	11c34 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    9c00:	463a      	mov	r2, r7
    9c02:	4621      	mov	r1, r4
    9c04:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    9c08:	f008 fa58 	bl	120bc <radio_ccm_rx_pkt_set>
}
    9c0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    9c10:	f008 b83e 	b.w	11c90 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    9c14:	2008      	movs	r0, #8
    9c16:	f042 0201 	orr.w	r2, r2, #1
    9c1a:	b2e9      	uxtb	r1, r5
    9c1c:	f008 f80a 	bl	11c34 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    9c20:	4638      	mov	r0, r7
    9c22:	e7f3      	b.n	9c0c <rx_packet_set+0x40>

00009c24 <tx_packet_set>:
{
    9c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c26:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    9c28:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    9c2c:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    9c2e:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    9c32:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    9c34:	09c9      	lsrs	r1, r1, #7
    9c36:	4620      	mov	r0, r4
    9c38:	f007 ffb6 	bl	11ba8 <radio_phy_set>
	if (conn->enc_tx) {
    9c3c:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    9c40:	f013 0f20 	tst.w	r3, #32
    9c44:	ea4f 0244 	mov.w	r2, r4, lsl #1
    9c48:	d00f      	beq.n	9c6a <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    9c4a:	1d29      	adds	r1, r5, #4
    9c4c:	b2c9      	uxtb	r1, r1
    9c4e:	2008      	movs	r0, #8
    9c50:	f042 0201 	orr.w	r2, r2, #1
    9c54:	f007 ffee 	bl	11c34 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    9c58:	4639      	mov	r1, r7
    9c5a:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    9c5e:	f008 fa69 	bl	12134 <radio_ccm_tx_pkt_set>
}
    9c62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    9c66:	f008 b819 	b.w	11c9c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    9c6a:	2008      	movs	r0, #8
    9c6c:	f042 0201 	orr.w	r2, r2, #1
    9c70:	b2e9      	uxtb	r1, r5
    9c72:	f007 ffdf 	bl	11c34 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    9c76:	4638      	mov	r0, r7
    9c78:	e7f3      	b.n	9c62 <tx_packet_set+0x3e>
    9c7a:	0000      	movs	r0, r0
    9c7c:	0000      	movs	r0, r0
	...

00009c80 <sched_free_win_offset_calc>:
{
    9c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c84:	b08f      	sub	sp, #60	; 0x3c
    9c86:	4692      	mov	sl, r2
    9c88:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    9c8a:	6803      	ldr	r3, [r0, #0]
{
    9c8c:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    9c8e:	2b00      	cmp	r3, #0
{
    9c90:	4680      	mov	r8, r0
    9c92:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    9c94:	da3a      	bge.n	9d0c <sched_free_win_offset_calc+0x8c>
		u32_t ticks_prepare_to_start =
    9c96:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    9c98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    9c9c:	4291      	cmp	r1, r2
    9c9e:	bf2c      	ite	cs
    9ca0:	1a5a      	subcs	r2, r3, r1
    9ca2:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    9ca4:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    9ca6:	f8d8 200c 	ldr.w	r2, [r8, #12]
    9caa:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    9cac:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    9cae:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    9cb0:	18d3      	adds	r3, r2, r3
    9cb2:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    9cb4:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    9cb8:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    9cbc:	940c      	str	r4, [sp, #48]	; 0x30
    9cbe:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    9cc0:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    9cc2:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    9cc4:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    9cc6:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9cc8:	2302      	movs	r3, #2
    9cca:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    9ccc:	ab0d      	add	r3, sp, #52	; 0x34
    9cce:	9302      	str	r3, [sp, #8]
    9cd0:	4b81      	ldr	r3, [pc, #516]	; (9ed8 <sched_free_win_offset_calc+0x258>)
    9cd2:	9301      	str	r3, [sp, #4]
    9cd4:	ab0b      	add	r3, sp, #44	; 0x2c
    9cd6:	9300      	str	r3, [sp, #0]
    9cd8:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    9cdc:	ab0c      	add	r3, sp, #48	; 0x30
    9cde:	2101      	movs	r1, #1
    9ce0:	2000      	movs	r0, #0
    9ce2:	f7fd fd63 	bl	77ac <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    9ce6:	2802      	cmp	r0, #2
    9ce8:	d019      	beq.n	9d1e <sched_free_win_offset_calc+0x9e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    9cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9cec:	b1db      	cbz	r3, 9d26 <sched_free_win_offset_calc+0xa6>
    9cee:	4b7b      	ldr	r3, [pc, #492]	; (9edc <sched_free_win_offset_calc+0x25c>)
    9cf0:	9301      	str	r3, [sp, #4]
    9cf2:	9300      	str	r3, [sp, #0]
    9cf4:	4a7a      	ldr	r2, [pc, #488]	; (9ee0 <sched_free_win_offset_calc+0x260>)
    9cf6:	4b7b      	ldr	r3, [pc, #492]	; (9ee4 <sched_free_win_offset_calc+0x264>)
    9cf8:	497b      	ldr	r1, [pc, #492]	; (9ee8 <sched_free_win_offset_calc+0x268>)
    9cfa:	487c      	ldr	r0, [pc, #496]	; (9eec <sched_free_win_offset_calc+0x26c>)
			LL_ASSERT(0);
    9cfc:	f7f7 f946 	bl	f8c <printk>
    9d00:	4040      	eors	r0, r0
    9d02:	f380 8811 	msr	BASEPRI, r0
    9d06:	f04f 0004 	mov.w	r0, #4
    9d0a:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    9d0c:	4293      	cmp	r3, r2
    9d0e:	bf38      	it	cc
    9d10:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    9d12:	2200      	movs	r2, #0
    9d14:	e7c6      	b.n	9ca4 <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    9d16:	2101      	movs	r1, #1
    9d18:	2000      	movs	r0, #0
    9d1a:	f7fd fdc5 	bl	78a8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    9d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9d20:	2b02      	cmp	r3, #2
    9d22:	d0f8      	beq.n	9d16 <sched_free_win_offset_calc+0x96>
    9d24:	e7e1      	b.n	9cea <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    9d26:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    9d2a:	2aff      	cmp	r2, #255	; 0xff
    9d2c:	d065      	beq.n	9dfa <sched_free_win_offset_calc+0x17a>
		if ((ticker_id_prev != 0xff) &&
    9d2e:	2fff      	cmp	r7, #255	; 0xff
    9d30:	d00a      	beq.n	9d48 <sched_free_win_offset_calc+0xc8>
    9d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9d34:	4599      	cmp	r9, r3
    9d36:	d007      	beq.n	9d48 <sched_free_win_offset_calc+0xc8>
			LL_ASSERT(0);
    9d38:	4b68      	ldr	r3, [pc, #416]	; (9edc <sched_free_win_offset_calc+0x25c>)
    9d3a:	9301      	str	r3, [sp, #4]
    9d3c:	9300      	str	r3, [sp, #0]
    9d3e:	4a68      	ldr	r2, [pc, #416]	; (9ee0 <sched_free_win_offset_calc+0x260>)
    9d40:	4b68      	ldr	r3, [pc, #416]	; (9ee4 <sched_free_win_offset_calc+0x264>)
    9d42:	4969      	ldr	r1, [pc, #420]	; (9ee8 <sched_free_win_offset_calc+0x268>)
    9d44:	486a      	ldr	r0, [pc, #424]	; (9ef0 <sched_free_win_offset_calc+0x270>)
    9d46:	e7d9      	b.n	9cfc <sched_free_win_offset_calc+0x7c>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    9d48:	2a05      	cmp	r2, #5
    9d4a:	d951      	bls.n	9df0 <sched_free_win_offset_calc+0x170>
				  _radio.connection_count)) {
    9d4c:	4869      	ldr	r0, [pc, #420]	; (9ef4 <sched_free_win_offset_calc+0x274>)
    9d4e:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    9d52:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    9d54:	429a      	cmp	r2, r3
    9d56:	da4b      	bge.n	9df0 <sched_free_win_offset_calc+0x170>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    9d58:	2a06      	cmp	r2, #6
    9d5a:	f000 8092 	beq.w	9e82 <sched_free_win_offset_calc+0x202>
		if (ticker_id_other != 0xFF) {
    9d5e:	9b06      	ldr	r3, [sp, #24]
    9d60:	2bff      	cmp	r3, #255	; 0xff
    9d62:	d14a      	bne.n	9dfa <sched_free_win_offset_calc+0x17a>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9d64:	3a07      	subs	r2, #7
    9d66:	b292      	uxth	r2, r2
    9d68:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9d6c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    9d70:	f7fc fdee 	bl	6950 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    9d74:	4580      	cmp	r8, r0
    9d76:	d03b      	beq.n	9df0 <sched_free_win_offset_calc+0x170>
    9d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d7a:	b91b      	cbnz	r3, 9d84 <sched_free_win_offset_calc+0x104>
    9d7c:	f990 301d 	ldrsb.w	r3, [r0, #29]
    9d80:	2b00      	cmp	r3, #0
    9d82:	db35      	blt.n	9df0 <sched_free_win_offset_calc+0x170>
			u32_t ticks_to_expire_normal =
    9d84:	9b05      	ldr	r3, [sp, #20]
    9d86:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9d88:	6841      	ldr	r1, [r0, #4]
    9d8a:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    9d8c:	6803      	ldr	r3, [r0, #0]
    9d8e:	2b00      	cmp	r3, #0
    9d90:	da4e      	bge.n	9e30 <sched_free_win_offset_calc+0x1b0>
				u32_t ticks_prepare_to_start =
    9d92:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    9d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9d98:	428a      	cmp	r2, r1
    9d9a:	bf2c      	ite	cs
    9d9c:	18b6      	addcs	r6, r6, r2
    9d9e:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    9da0:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    9da2:	68c2      	ldr	r2, [r0, #12]
    9da4:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    9da8:	444b      	add	r3, r9
    9daa:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    9dac:	f8da 3000 	ldr.w	r3, [sl]
    9db0:	429e      	cmp	r6, r3
    9db2:	d916      	bls.n	9de2 <sched_free_win_offset_calc+0x162>
    9db4:	429d      	cmp	r5, r3
    9db6:	bf38      	it	cc
    9db8:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    9dba:	9b07      	ldr	r3, [sp, #28]
    9dbc:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    9dc0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9dc2:	781b      	ldrb	r3, [r3, #0]
    9dc4:	42a3      	cmp	r3, r4
    9dc6:	d905      	bls.n	9dd4 <sched_free_win_offset_calc+0x154>
				       (ticker_ticks_diff_get(
    9dc8:	4629      	mov	r1, r5
    9dca:	4630      	mov	r0, r6
    9dcc:	f7fd fd84 	bl	78d8 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    9dd0:	42b8      	cmp	r0, r7
    9dd2:	d231      	bcs.n	9e38 <sched_free_win_offset_calc+0x1b8>
				if (_win_offset >= conn_interval) {
    9dd4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    9dd8:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    9dda:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    9dde:	4293      	cmp	r3, r2
    9de0:	d20b      	bcs.n	9dfa <sched_free_win_offset_calc+0x17a>
			ticks_anchor_prev = ticks_anchor;
    9de2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    9de6:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    9dea:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    9dee:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    9df0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9df2:	781b      	ldrb	r3, [r3, #0]
    9df4:	42a3      	cmp	r3, r4
    9df6:	f63f af67 	bhi.w	9cc8 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    9dfa:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    9dfe:	2bff      	cmp	r3, #255	; 0xff
    9e00:	d111      	bne.n	9e26 <sched_free_win_offset_calc+0x1a6>
    9e02:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    9e06:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 9ef8 <sched_free_win_offset_calc+0x278>
    9e0a:	a731      	add	r7, pc, #196	; (adr r7, 9ed0 <sched_free_win_offset_calc+0x250>)
    9e0c:	e9d7 6700 	ldrd	r6, r7, [r7]
    9e10:	429d      	cmp	r5, r3
    9e12:	bf38      	it	cc
    9e14:	461d      	movcc	r5, r3
    9e16:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    9e1a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9e1c:	781b      	ldrb	r3, [r3, #0]
    9e1e:	42a3      	cmp	r3, r4
    9e20:	d831      	bhi.n	9e86 <sched_free_win_offset_calc+0x206>
		*ticks_to_offset_next = ticks_to_expire_prev;
    9e22:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    9e26:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9e28:	701c      	strb	r4, [r3, #0]
}
    9e2a:	b00f      	add	sp, #60	; 0x3c
    9e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    9e30:	428b      	cmp	r3, r1
    9e32:	bf38      	it	cc
    9e34:	460b      	movcc	r3, r1
    9e36:	e7b4      	b.n	9da2 <sched_free_win_offset_calc+0x122>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    9e38:	4a2f      	ldr	r2, [pc, #188]	; (9ef8 <sched_free_win_offset_calc+0x278>)
    9e3a:	eb05 030b 	add.w	r3, r5, fp
    9e3e:	fba3 0102 	umull	r0, r1, r3, r2
    9e42:	2207      	movs	r2, #7
    9e44:	fb02 1103 	mla	r1, r2, r3, r1
    9e48:	a321      	add	r3, pc, #132	; (adr r3, 9ed0 <sched_free_win_offset_calc+0x250>)
    9e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e4e:	f7f6 f9e1 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    9e52:	f240 43e2 	movw	r3, #1250	; 0x4e2
    9e56:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    9e5a:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    9e5c:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    9e5e:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    9e60:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    9e64:	d20b      	bcs.n	9e7e <sched_free_win_offset_calc+0x1fe>
					memcpy(win_offset +
    9e66:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9e68:	2202      	movs	r2, #2
    9e6a:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    9e6e:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    9e72:	3401      	adds	r4, #1
					memcpy(win_offset +
    9e74:	f7f7 fec2 	bl	1bfc <memcpy>
					offset_index++;
    9e78:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    9e7a:	3528      	adds	r5, #40	; 0x28
    9e7c:	e7a0      	b.n	9dc0 <sched_free_win_offset_calc+0x140>
						ticks_to_expire_prev = 0;
    9e7e:	2500      	movs	r5, #0
    9e80:	e7a8      	b.n	9dd4 <sched_free_win_offset_calc+0x154>
    9e82:	9206      	str	r2, [sp, #24]
    9e84:	e7b4      	b.n	9df0 <sched_free_win_offset_calc+0x170>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    9e86:	eb05 030b 	add.w	r3, r5, fp
    9e8a:	fba3 0108 	umull	r0, r1, r3, r8
    9e8e:	fb09 1103 	mla	r1, r9, r3, r1
    9e92:	4632      	mov	r2, r6
    9e94:	463b      	mov	r3, r7
    9e96:	f7f6 f9bd 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    9e9a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    9e9e:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    9ea2:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    9ea4:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    9ea6:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    9ea8:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    9eac:	d90b      	bls.n	9ec6 <sched_free_win_offset_calc+0x246>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    9eae:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9eb0:	2202      	movs	r2, #2
    9eb2:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    9eb6:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    9eba:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    9ebc:	f7f7 fe9e 	bl	1bfc <memcpy>
			offset_index++;
    9ec0:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    9ec2:	3528      	adds	r5, #40	; 0x28
    9ec4:	e7a9      	b.n	9e1a <sched_free_win_offset_calc+0x19a>
				ticks_to_expire_prev = 0;
    9ec6:	2500      	movs	r5, #0
    9ec8:	e7ab      	b.n	9e22 <sched_free_win_offset_calc+0x1a2>
    9eca:	bf00      	nop
    9ecc:	f3af 8000 	nop.w
    9ed0:	3b9aca00 	.word	0x3b9aca00
    9ed4:	00000000 	.word	0x00000000
    9ed8:	00009491 	.word	0x00009491
    9edc:	000142a9 	.word	0x000142a9
    9ee0:	00014ff8 	.word	0x00014ff8
    9ee4:	0001630d 	.word	0x0001630d
    9ee8:	00015047 	.word	0x00015047
    9eec:	0001702c 	.word	0x0001702c
    9ef0:	00014f97 	.word	0x00014f97
    9ef4:	200008c0 	.word	0x200008c0
    9ef8:	1afd498d 	.word	0x1afd498d

00009efc <mayfly_sched_free_win_offset_calc>:
{
    9efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    9efe:	2300      	movs	r3, #0
    9f00:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    9f02:	2306      	movs	r3, #6
    9f04:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    9f08:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    9f0c:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    9f10:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    9f12:	bfbe      	ittt	lt
    9f14:	4602      	movlt	r2, r0
    9f16:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    9f18:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    9f1c:	9101      	str	r1, [sp, #4]
    9f1e:	f10d 010b 	add.w	r1, sp, #11
    9f22:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    9f24:	bfa8      	it	ge
    9f26:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    9f28:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    9f2c:	2100      	movs	r1, #0
    9f2e:	f7ff fea7 	bl	9c80 <sched_free_win_offset_calc>
}
    9f32:	b005      	add	sp, #20
    9f34:	f85d fb04 	ldr.w	pc, [sp], #4

00009f38 <mayfly_sched_win_offset_select>:
{
    9f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    9f3c:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    9f40:	b089      	sub	sp, #36	; 0x24
    9f42:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    9f44:	4840      	ldr	r0, [pc, #256]	; (a048 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    9f46:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    9f48:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    9f4a:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    9f4e:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    9f52:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    9f56:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    9f58:	fb03 1102 	mla	r1, r3, r2, r1
    9f5c:	a338      	add	r3, pc, #224	; (adr r3, a040 <mayfly_sched_win_offset_select+0x108>)
    9f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    9f62:	9505      	str	r5, [sp, #20]
    9f64:	6075      	str	r5, [r6, #4]
    9f66:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    9f68:	f7f6 f954 	bl	214 <__aeabi_uldivmod>
    9f6c:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    9f6e:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    9f72:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    9f76:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    9f7a:	9100      	str	r1, [sp, #0]
    9f7c:	9601      	str	r6, [sp, #4]
    9f7e:	2101      	movs	r1, #1
    9f80:	4620      	mov	r0, r4
    9f82:	f7ff fe7d 	bl	9c80 <sched_free_win_offset_calc>
    9f86:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    9f8a:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    9f8e:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    9f92:	2202      	movs	r2, #2
    9f94:	4639      	mov	r1, r7
    9f96:	f10d 000e 	add.w	r0, sp, #14
    9f9a:	f7f7 fe2f 	bl	1bfc <memcpy>
		while (offset_index_m < offset_m_max) {
    9f9e:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    9fa2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    9fa6:	2300      	movs	r3, #0
    9fa8:	b2d9      	uxtb	r1, r3
    9faa:	4288      	cmp	r0, r1
    9fac:	d811      	bhi.n	9fd2 <mayfly_sched_win_offset_select+0x9a>
    9fae:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    9fb0:	4547      	cmp	r7, r8
    9fb2:	d1ee      	bne.n	9f92 <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    9fb4:	b9b5      	cbnz	r5, 9fe4 <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    9fb6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    9fba:	f240 43e2 	movw	r3, #1250	; 0x4e2
    9fbe:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    9fc0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    9fc4:	2202      	movs	r2, #2
    9fc6:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    9fc8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    9fcc:	f7f7 fe16 	bl	1bfc <memcpy>
    9fd0:	e027      	b.n	a022 <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    9fd2:	454a      	cmp	r2, r9
    9fd4:	d004      	beq.n	9fe0 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    9fd6:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    9fda:	4291      	cmp	r1, r2
    9fdc:	d024      	beq.n	a028 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    9fde:	2501      	movs	r5, #1
    9fe0:	3301      	adds	r3, #1
    9fe2:	e7e1      	b.n	9fa8 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    9fe4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    9fe8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    9fec:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    9ff0:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    9ff4:	4b15      	ldr	r3, [pc, #84]	; (a04c <mayfly_sched_win_offset_select+0x114>)
    9ff6:	2200      	movs	r2, #0
    9ff8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    9ffc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a000:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    a004:	f042 0203 	orr.w	r2, r2, #3
    a008:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    a00c:	2203      	movs	r2, #3
    a00e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    a012:	2211      	movs	r2, #17
    a014:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    a018:	220f      	movs	r2, #15
    a01a:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    a01e:	2220      	movs	r2, #32
    a020:	701a      	strb	r2, [r3, #0]
}
    a022:	b009      	add	sp, #36	; 0x24
    a024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    a028:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a02c:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a02e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a032:	2202      	movs	r2, #2
    a034:	f10d 010e 	add.w	r1, sp, #14
    a038:	e7c6      	b.n	9fc8 <mayfly_sched_win_offset_select+0x90>
    a03a:	bf00      	nop
    a03c:	f3af 8000 	nop.w
    a040:	1afd498d 	.word	0x1afd498d
    a044:	00000007 	.word	0x00000007
    a048:	09ce5400 	.word	0x09ce5400
    a04c:	200008c0 	.word	0x200008c0

0000a050 <sched_after_mstr_free_slot_get>:
{
    a050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a054:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a056:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    a058:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    a05a:	f8df 9140 	ldr.w	r9, [pc, #320]	; a19c <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    a05e:	f88d 501f 	strb.w	r5, [sp, #31]
{
    a062:	4680      	mov	r8, r0
    a064:	4693      	mov	fp, r2
    a066:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    a068:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a06c:	601c      	str	r4, [r3, #0]
    a06e:	9408      	str	r4, [sp, #32]
    a070:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a072:	2302      	movs	r3, #2
    a074:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a076:	ab09      	add	r3, sp, #36	; 0x24
    a078:	9302      	str	r3, [sp, #8]
    a07a:	4b41      	ldr	r3, [pc, #260]	; (a180 <sched_after_mstr_free_slot_get+0x130>)
    a07c:	9301      	str	r3, [sp, #4]
    a07e:	ab08      	add	r3, sp, #32
    a080:	9300      	str	r3, [sp, #0]
    a082:	f10d 021f 	add.w	r2, sp, #31
    a086:	465b      	mov	r3, fp
    a088:	4641      	mov	r1, r8
    a08a:	2000      	movs	r0, #0
    a08c:	f7fd fb8e 	bl	77ac <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a090:	2802      	cmp	r0, #2
    a092:	d014      	beq.n	a0be <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a094:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a096:	b1b3      	cbz	r3, a0c6 <sched_after_mstr_free_slot_get+0x76>
    a098:	4b3a      	ldr	r3, [pc, #232]	; (a184 <sched_after_mstr_free_slot_get+0x134>)
    a09a:	9301      	str	r3, [sp, #4]
    a09c:	9300      	str	r3, [sp, #0]
    a09e:	4a3a      	ldr	r2, [pc, #232]	; (a188 <sched_after_mstr_free_slot_get+0x138>)
    a0a0:	4b3a      	ldr	r3, [pc, #232]	; (a18c <sched_after_mstr_free_slot_get+0x13c>)
    a0a2:	493b      	ldr	r1, [pc, #236]	; (a190 <sched_after_mstr_free_slot_get+0x140>)
    a0a4:	483b      	ldr	r0, [pc, #236]	; (a194 <sched_after_mstr_free_slot_get+0x144>)
    a0a6:	f7f6 ff71 	bl	f8c <printk>
    a0aa:	4040      	eors	r0, r0
    a0ac:	f380 8811 	msr	BASEPRI, r0
    a0b0:	f04f 0004 	mov.w	r0, #4
    a0b4:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a0b6:	4641      	mov	r1, r8
    a0b8:	2000      	movs	r0, #0
    a0ba:	f7fd fbf5 	bl	78a8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a0c0:	2b02      	cmp	r3, #2
    a0c2:	d0f8      	beq.n	a0b6 <sched_after_mstr_free_slot_get+0x66>
    a0c4:	e7e6      	b.n	a094 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    a0c6:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a0ca:	2aff      	cmp	r2, #255	; 0xff
    a0cc:	d04e      	beq.n	a16c <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a0ce:	2a06      	cmp	r2, #6
    a0d0:	d9cf      	bls.n	a072 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    a0d2:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a0d6:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a0d8:	429a      	cmp	r2, r3
    a0da:	daca      	bge.n	a072 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a0dc:	3a07      	subs	r2, #7
    a0de:	b292      	uxth	r2, r2
    a0e0:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a0e4:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    a0e8:	f7fc fc32 	bl	6950 <mem_get>
		if (conn && !conn->role) {
    a0ec:	2800      	cmp	r0, #0
    a0ee:	d0c0      	beq.n	a072 <sched_after_mstr_free_slot_get+0x22>
    a0f0:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a0f4:	2b00      	cmp	r3, #0
    a0f6:	dbbc      	blt.n	a072 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a0f8:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    a0fa:	9a08      	ldr	r2, [sp, #32]
    a0fc:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a100:	2b00      	cmp	r3, #0
    a102:	da12      	bge.n	a12a <sched_after_mstr_free_slot_get+0xda>
    a104:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    a106:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a10a:	4571      	cmp	r1, lr
    a10c:	bf2c      	ite	cs
    a10e:	1852      	addcs	r2, r2, r1
    a110:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    a112:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    a114:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    a116:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    a118:	f101 0104 	add.w	r1, r1, #4
    a11c:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    a11e:	d108      	bne.n	a132 <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    a120:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a124:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    a126:	4616      	mov	r6, r2
    a128:	e7a3      	b.n	a072 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    a12a:	4573      	cmp	r3, lr
    a12c:	bf38      	it	cc
    a12e:	4673      	movcc	r3, lr
    a130:	e7f0      	b.n	a114 <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    a132:	4631      	mov	r1, r6
    a134:	4610      	mov	r0, r2
    a136:	9305      	str	r3, [sp, #20]
    a138:	9204      	str	r2, [sp, #16]
    a13a:	f7fd fbcd 	bl	78d8 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    a13e:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    a142:	4288      	cmp	r0, r1
    a144:	9a04      	ldr	r2, [sp, #16]
    a146:	9b05      	ldr	r3, [sp, #20]
    a148:	d9ea      	bls.n	a120 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a14a:	4813      	ldr	r0, [pc, #76]	; (a198 <sched_after_mstr_free_slot_get+0x148>)
    a14c:	4434      	add	r4, r6
    a14e:	fba4 0100 	umull	r0, r1, r4, r0
    a152:	2307      	movs	r3, #7
    a154:	fb03 1104 	mla	r1, r3, r4, r1
    a158:	a307      	add	r3, pc, #28	; (adr r3, a178 <sched_after_mstr_free_slot_get+0x128>)
    a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a15e:	f7f6 f859 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    a162:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a164:	6038      	str	r0, [r7, #0]
}
    a166:	b00b      	add	sp, #44	; 0x2c
    a168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    a16c:	2dff      	cmp	r5, #255	; 0xff
    a16e:	d1ec      	bne.n	a14a <sched_after_mstr_free_slot_get+0xfa>
    a170:	e7f9      	b.n	a166 <sched_after_mstr_free_slot_get+0x116>
    a172:	bf00      	nop
    a174:	f3af 8000 	nop.w
    a178:	3b9aca00 	.word	0x3b9aca00
    a17c:	00000000 	.word	0x00000000
    a180:	00009491 	.word	0x00009491
    a184:	000142a9 	.word	0x000142a9
    a188:	00014ff8 	.word	0x00014ff8
    a18c:	000162cd 	.word	0x000162cd
    a190:	00015047 	.word	0x00015047
    a194:	0001702c 	.word	0x0001702c
    a198:	1afd498d 	.word	0x1afd498d
    a19c:	200008c0 	.word	0x200008c0

0000a1a0 <isr_adv_ci_adva_check>:
{
    a1a0:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    a1a2:	7804      	ldrb	r4, [r0, #0]
    a1a4:	780a      	ldrb	r2, [r1, #0]
    a1a6:	f3c4 1380 	ubfx	r3, r4, #6, #1
    a1aa:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a1ae:	d119      	bne.n	a1e4 <isr_adv_ci_adva_check+0x44>
    a1b0:	f004 040f 	and.w	r4, r4, #15
    a1b4:	2c01      	cmp	r4, #1
    a1b6:	f101 0608 	add.w	r6, r1, #8
    a1ba:	f100 0502 	add.w	r5, r0, #2
    a1be:	d008      	beq.n	a1d2 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    a1c0:	2206      	movs	r2, #6
    a1c2:	4631      	mov	r1, r6
    a1c4:	4628      	mov	r0, r5
    a1c6:	f7f7 fd04 	bl	1bd2 <memcmp>
			 BDADDR_SIZE)) ||
    a1ca:	fab0 f080 	clz	r0, r0
    a1ce:	0940      	lsrs	r0, r0, #5
    a1d0:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    a1d2:	2206      	movs	r2, #6
    a1d4:	4631      	mov	r1, r6
    a1d6:	4628      	mov	r0, r5
    a1d8:	f7f7 fcfb 	bl	1bd2 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    a1dc:	2800      	cmp	r0, #0
    a1de:	d1ef      	bne.n	a1c0 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    a1e0:	4620      	mov	r0, r4
    a1e2:	bd70      	pop	{r4, r5, r6, pc}
    a1e4:	2000      	movs	r0, #0
}
    a1e6:	bd70      	pop	{r4, r5, r6, pc}

0000a1e8 <packet_rx_enqueue>:
{
    a1e8:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    a1ea:	4a1e      	ldr	r2, [pc, #120]	; (a264 <packet_rx_enqueue+0x7c>)
    a1ec:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    a1f0:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    a1f4:	4299      	cmp	r1, r3
    a1f6:	d10e      	bne.n	a216 <packet_rx_enqueue+0x2e>
    a1f8:	4b1b      	ldr	r3, [pc, #108]	; (a268 <packet_rx_enqueue+0x80>)
    a1fa:	9301      	str	r3, [sp, #4]
    a1fc:	9300      	str	r3, [sp, #0]
    a1fe:	4a1b      	ldr	r2, [pc, #108]	; (a26c <packet_rx_enqueue+0x84>)
    a200:	4b1b      	ldr	r3, [pc, #108]	; (a270 <packet_rx_enqueue+0x88>)
    a202:	491c      	ldr	r1, [pc, #112]	; (a274 <packet_rx_enqueue+0x8c>)
    a204:	481c      	ldr	r0, [pc, #112]	; (a278 <packet_rx_enqueue+0x90>)
	LL_ASSERT(link);
    a206:	f7f6 fec1 	bl	f8c <printk>
    a20a:	4040      	eors	r0, r0
    a20c:	f380 8811 	msr	BASEPRI, r0
    a210:	f04f 0004 	mov.w	r0, #4
    a214:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    a216:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    a21a:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    a21e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a222:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    a226:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a228:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    a22a:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    a22e:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    a232:	3301      	adds	r3, #1
    a234:	b2db      	uxtb	r3, r3
		last = 0;
    a236:	429c      	cmp	r4, r3
    a238:	bf08      	it	eq
    a23a:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    a23c:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    a240:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    a244:	f7fc fba9 	bl	699a <memq_enqueue>
	LL_ASSERT(link);
    a248:	b938      	cbnz	r0, a25a <packet_rx_enqueue+0x72>
    a24a:	4b07      	ldr	r3, [pc, #28]	; (a268 <packet_rx_enqueue+0x80>)
    a24c:	9301      	str	r3, [sp, #4]
    a24e:	9300      	str	r3, [sp, #0]
    a250:	4a06      	ldr	r2, [pc, #24]	; (a26c <packet_rx_enqueue+0x84>)
    a252:	4b07      	ldr	r3, [pc, #28]	; (a270 <packet_rx_enqueue+0x88>)
    a254:	4907      	ldr	r1, [pc, #28]	; (a274 <packet_rx_enqueue+0x8c>)
    a256:	4809      	ldr	r0, [pc, #36]	; (a27c <packet_rx_enqueue+0x94>)
    a258:	e7d5      	b.n	a206 <packet_rx_enqueue+0x1e>
}
    a25a:	b002      	add	sp, #8
    a25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    a260:	f006 bb9c 	b.w	1099c <radio_event_callback>
    a264:	200008c0 	.word	0x200008c0
    a268:	000142a9 	.word	0x000142a9
    a26c:	00014ff8 	.word	0x00014ff8
    a270:	0001645e 	.word	0x0001645e
    a274:	00015047 	.word	0x00015047
    a278:	00016d24 	.word	0x00016d24
    a27c:	00016547 	.word	0x00016547

0000a280 <isr_scan_tgta_check>:
{
    a280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a284:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a286:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    a288:	f101 0808 	add.w	r8, r1, #8
{
    a28c:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a28e:	09c0      	lsrs	r0, r0, #7
    a290:	4641      	mov	r1, r8
{
    a292:	4691      	mov	r9, r2
    a294:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a296:	f007 f81d 	bl	112d4 <ctrl_rl_addr_resolve>
    a29a:	4604      	mov	r4, r0
    a29c:	b9d8      	cbnz	r0, a2d6 <isr_scan_tgta_check+0x56>
    a29e:	4f1c      	ldr	r7, [pc, #112]	; (a310 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a2a0:	f1ba 0f00 	cmp.w	sl, #0
    a2a4:	d10e      	bne.n	a2c4 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a2a6:	782b      	ldrb	r3, [r5, #0]
    a2a8:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    a2ac:	09db      	lsrs	r3, r3, #7
    a2ae:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a2b2:	d113      	bne.n	a2dc <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    a2b4:	2206      	movs	r2, #6
    a2b6:	4641      	mov	r1, r8
    a2b8:	4816      	ldr	r0, [pc, #88]	; (a314 <isr_scan_tgta_check+0x94>)
    a2ba:	f7f7 fc8a 	bl	1bd2 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a2be:	b968      	cbnz	r0, a2dc <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    a2c0:	2001      	movs	r0, #1
    a2c2:	e012      	b.n	a2ea <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a2c4:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    a2c8:	07db      	lsls	r3, r3, #31
    a2ca:	d5ec      	bpl.n	a2a6 <isr_scan_tgta_check+0x26>
    a2cc:	4648      	mov	r0, r9
    a2ce:	f006 fd5d 	bl	10d8c <ctrl_lrpa_get>
    a2d2:	2800      	cmp	r0, #0
    a2d4:	d0e7      	beq.n	a2a6 <isr_scan_tgta_check+0x26>
}
    a2d6:	4620      	mov	r0, r4
    a2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a2dc:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    a2e0:	f3c0 1001 	ubfx	r0, r0, #4, #2
    a2e4:	f010 0002 	ands.w	r0, r0, #2
    a2e8:	d101      	bne.n	a2ee <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    a2ea:	4604      	mov	r4, r0
    a2ec:	e7f3      	b.n	a2d6 <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a2ee:	f995 3000 	ldrsb.w	r3, [r5]
    a2f2:	2b00      	cmp	r3, #0
    a2f4:	da09      	bge.n	a30a <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    a2f6:	7b6b      	ldrb	r3, [r5, #13]
    a2f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a2fc:	2b40      	cmp	r3, #64	; 0x40
    a2fe:	d104      	bne.n	a30a <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    a300:	2e00      	cmp	r6, #0
    a302:	d0dd      	beq.n	a2c0 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    a304:	2001      	movs	r0, #1
    a306:	7030      	strb	r0, [r6, #0]
    a308:	e7ef      	b.n	a2ea <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    a30a:	2000      	movs	r0, #0
    a30c:	e7ed      	b.n	a2ea <isr_scan_tgta_check+0x6a>
    a30e:	bf00      	nop
    a310:	200008c0 	.word	0x200008c0
    a314:	200009a4 	.word	0x200009a4

0000a318 <isr_rx_scan_report>:
{
    a318:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a31c:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    a31e:	2003      	movs	r0, #3
{
    a320:	460f      	mov	r7, r1
    a322:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    a324:	f7ff f8f4 	bl	9510 <packet_rx_reserve_get>
	if (node_rx == 0) {
    a328:	4604      	mov	r4, r0
    a32a:	2800      	cmp	r0, #0
    a32c:	d03e      	beq.n	a3ac <isr_rx_scan_report+0x94>
	node_rx->hdr.handle = 0xffff;
    a32e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a332:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    a334:	4b1e      	ldr	r3, [pc, #120]	; (a3b0 <isr_rx_scan_report+0x98>)
    a336:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    a33a:	075a      	lsls	r2, r3, #29
    a33c:	d032      	beq.n	a3a4 <isr_rx_scan_report+0x8c>
		switch (_radio.scanner.phy) {
    a33e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a342:	b2da      	uxtb	r2, r3
    a344:	2a01      	cmp	r2, #1
    a346:	d010      	beq.n	a36a <isr_rx_scan_report+0x52>
    a348:	2a04      	cmp	r2, #4
    a34a:	d00f      	beq.n	a36c <isr_rx_scan_report+0x54>
			LL_ASSERT(0);
    a34c:	4b19      	ldr	r3, [pc, #100]	; (a3b4 <isr_rx_scan_report+0x9c>)
    a34e:	9301      	str	r3, [sp, #4]
    a350:	9300      	str	r3, [sp, #0]
    a352:	4a19      	ldr	r2, [pc, #100]	; (a3b8 <isr_rx_scan_report+0xa0>)
    a354:	4b19      	ldr	r3, [pc, #100]	; (a3bc <isr_rx_scan_report+0xa4>)
    a356:	491a      	ldr	r1, [pc, #104]	; (a3c0 <isr_rx_scan_report+0xa8>)
    a358:	481a      	ldr	r0, [pc, #104]	; (a3c4 <isr_rx_scan_report+0xac>)
    a35a:	f7f6 fe17 	bl	f8c <printk>
    a35e:	4040      	eors	r0, r0
    a360:	f380 8811 	msr	BASEPRI, r0
    a364:	f04f 0004 	mov.w	r0, #4
    a368:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    a36a:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    a36c:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    a370:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    a372:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a376:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    a37a:	f1b9 0f00 	cmp.w	r9, #0
    a37e:	d013      	beq.n	a3a8 <isr_rx_scan_report+0x90>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    a380:	f007 fd34 	bl	11dec <radio_rssi_get>
			     pdu_adv_rx->len] =
    a384:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    a388:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a38c:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    a38e:	442b      	add	r3, r5
    a390:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a392:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    a394:	441d      	add	r5, r3
    a396:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    a398:	f7ff ff26 	bl	a1e8 <packet_rx_enqueue>
	return 0;
    a39c:	2000      	movs	r0, #0
}
    a39e:	b003      	add	sp, #12
    a3a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    a3a4:	2302      	movs	r3, #2
    a3a6:	e7e1      	b.n	a36c <isr_rx_scan_report+0x54>
			     pdu_adv_rx->len] =
    a3a8:	207f      	movs	r0, #127	; 0x7f
    a3aa:	e7ed      	b.n	a388 <isr_rx_scan_report+0x70>
		return 1;
    a3ac:	2001      	movs	r0, #1
    a3ae:	e7f6      	b.n	a39e <isr_rx_scan_report+0x86>
    a3b0:	200008c0 	.word	0x200008c0
    a3b4:	000142a9 	.word	0x000142a9
    a3b8:	00014ff8 	.word	0x00014ff8
    a3bc:	000160f4 	.word	0x000160f4
    a3c0:	00015047 	.word	0x00015047
    a3c4:	00014f97 	.word	0x00014f97

0000a3c8 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    a3c8:	4a0b      	ldr	r2, [pc, #44]	; (a3f8 <rx_fc_lock+0x30>)
    a3ca:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a3ce:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    a3d2:	4299      	cmp	r1, r3
    a3d4:	d10e      	bne.n	a3f4 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    a3d6:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a3da:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    a3de:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    a3e2:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a3e6:	3301      	adds	r3, #1
    a3e8:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    a3ea:	2b03      	cmp	r3, #3
    a3ec:	bf08      	it	eq
    a3ee:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    a3f0:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    a3f4:	4770      	bx	lr
    a3f6:	bf00      	nop
    a3f8:	200008c0 	.word	0x200008c0

0000a3fc <ticker_success_assert>:
{
    a3fc:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    a3fe:	b170      	cbz	r0, a41e <ticker_success_assert+0x22>
    a400:	4b08      	ldr	r3, [pc, #32]	; (a424 <ticker_success_assert+0x28>)
    a402:	9301      	str	r3, [sp, #4]
    a404:	9300      	str	r3, [sp, #0]
    a406:	4a08      	ldr	r2, [pc, #32]	; (a428 <ticker_success_assert+0x2c>)
    a408:	4b08      	ldr	r3, [pc, #32]	; (a42c <ticker_success_assert+0x30>)
    a40a:	4909      	ldr	r1, [pc, #36]	; (a430 <ticker_success_assert+0x34>)
    a40c:	4809      	ldr	r0, [pc, #36]	; (a434 <ticker_success_assert+0x38>)
    a40e:	f7f6 fdbd 	bl	f8c <printk>
    a412:	4040      	eors	r0, r0
    a414:	f380 8811 	msr	BASEPRI, r0
    a418:	f04f 0004 	mov.w	r0, #4
    a41c:	df02      	svc	2
}
    a41e:	b003      	add	sp, #12
    a420:	f85d fb04 	ldr.w	pc, [sp], #4
    a424:	000142a9 	.word	0x000142a9
    a428:	00014ff8 	.word	0x00014ff8
    a42c:	000161dd 	.word	0x000161dd
    a430:	00015047 	.word	0x00015047
    a434:	00017144 	.word	0x00017144

0000a438 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    a438:	2801      	cmp	r0, #1
{
    a43a:	b507      	push	{r0, r1, r2, lr}
    a43c:	4b11      	ldr	r3, [pc, #68]	; (a484 <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    a43e:	d116      	bne.n	a46e <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    a440:	7c9a      	ldrb	r2, [r3, #18]
    a442:	2a05      	cmp	r2, #5
    a444:	d104      	bne.n	a450 <ticker_stop_adv_assert+0x18>
			_radio.ticker_id_stop = 0;
    a446:	2200      	movs	r2, #0
    a448:	749a      	strb	r2, [r3, #18]
}
    a44a:	b003      	add	sp, #12
    a44c:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    a450:	4b0d      	ldr	r3, [pc, #52]	; (a488 <ticker_stop_adv_assert+0x50>)
    a452:	9301      	str	r3, [sp, #4]
    a454:	9300      	str	r3, [sp, #0]
    a456:	4a0d      	ldr	r2, [pc, #52]	; (a48c <ticker_stop_adv_assert+0x54>)
    a458:	4b0d      	ldr	r3, [pc, #52]	; (a490 <ticker_stop_adv_assert+0x58>)
    a45a:	490e      	ldr	r1, [pc, #56]	; (a494 <ticker_stop_adv_assert+0x5c>)
    a45c:	480e      	ldr	r0, [pc, #56]	; (a498 <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    a45e:	f7f6 fd95 	bl	f8c <printk>
    a462:	4040      	eors	r0, r0
    a464:	f380 8811 	msr	BASEPRI, r0
    a468:	f04f 0004 	mov.w	r0, #4
    a46c:	df02      	svc	2
    a46e:	7c1b      	ldrb	r3, [r3, #16]
    a470:	2b05      	cmp	r3, #5
    a472:	d1ea      	bne.n	a44a <ticker_stop_adv_assert+0x12>
    a474:	4b04      	ldr	r3, [pc, #16]	; (a488 <ticker_stop_adv_assert+0x50>)
    a476:	9301      	str	r3, [sp, #4]
    a478:	9300      	str	r3, [sp, #0]
    a47a:	4a04      	ldr	r2, [pc, #16]	; (a48c <ticker_stop_adv_assert+0x54>)
    a47c:	4b04      	ldr	r3, [pc, #16]	; (a490 <ticker_stop_adv_assert+0x58>)
    a47e:	4905      	ldr	r1, [pc, #20]	; (a494 <ticker_stop_adv_assert+0x5c>)
    a480:	4806      	ldr	r0, [pc, #24]	; (a49c <ticker_stop_adv_assert+0x64>)
    a482:	e7ec      	b.n	a45e <ticker_stop_adv_assert+0x26>
    a484:	200008c0 	.word	0x200008c0
    a488:	000142a9 	.word	0x000142a9
    a48c:	00014ff8 	.word	0x00014ff8
    a490:	000161f3 	.word	0x000161f3
    a494:	00015047 	.word	0x00015047
    a498:	00014f97 	.word	0x00014f97
    a49c:	000170c6 	.word	0x000170c6

0000a4a0 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    a4a0:	2801      	cmp	r0, #1
{
    a4a2:	b507      	push	{r0, r1, r2, lr}
    a4a4:	4b11      	ldr	r3, [pc, #68]	; (a4ec <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    a4a6:	d116      	bne.n	a4d6 <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    a4a8:	7c9a      	ldrb	r2, [r3, #18]
    a4aa:	2a06      	cmp	r2, #6
    a4ac:	d104      	bne.n	a4b8 <ticker_stop_scan_assert+0x18>
			_radio.ticker_id_stop = 0;
    a4ae:	2200      	movs	r2, #0
    a4b0:	749a      	strb	r2, [r3, #18]
}
    a4b2:	b003      	add	sp, #12
    a4b4:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    a4b8:	4b0d      	ldr	r3, [pc, #52]	; (a4f0 <ticker_stop_scan_assert+0x50>)
    a4ba:	9301      	str	r3, [sp, #4]
    a4bc:	9300      	str	r3, [sp, #0]
    a4be:	4a0d      	ldr	r2, [pc, #52]	; (a4f4 <ticker_stop_scan_assert+0x54>)
    a4c0:	4b0d      	ldr	r3, [pc, #52]	; (a4f8 <ticker_stop_scan_assert+0x58>)
    a4c2:	490e      	ldr	r1, [pc, #56]	; (a4fc <ticker_stop_scan_assert+0x5c>)
    a4c4:	480e      	ldr	r0, [pc, #56]	; (a500 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    a4c6:	f7f6 fd61 	bl	f8c <printk>
    a4ca:	4040      	eors	r0, r0
    a4cc:	f380 8811 	msr	BASEPRI, r0
    a4d0:	f04f 0004 	mov.w	r0, #4
    a4d4:	df02      	svc	2
    a4d6:	7c1b      	ldrb	r3, [r3, #16]
    a4d8:	2b06      	cmp	r3, #6
    a4da:	d1ea      	bne.n	a4b2 <ticker_stop_scan_assert+0x12>
    a4dc:	4b04      	ldr	r3, [pc, #16]	; (a4f0 <ticker_stop_scan_assert+0x50>)
    a4de:	9301      	str	r3, [sp, #4]
    a4e0:	9300      	str	r3, [sp, #0]
    a4e2:	4a04      	ldr	r2, [pc, #16]	; (a4f4 <ticker_stop_scan_assert+0x54>)
    a4e4:	4b04      	ldr	r3, [pc, #16]	; (a4f8 <ticker_stop_scan_assert+0x58>)
    a4e6:	4905      	ldr	r1, [pc, #20]	; (a4fc <ticker_stop_scan_assert+0x5c>)
    a4e8:	4806      	ldr	r0, [pc, #24]	; (a504 <ticker_stop_scan_assert+0x64>)
    a4ea:	e7ec      	b.n	a4c6 <ticker_stop_scan_assert+0x26>
    a4ec:	200008c0 	.word	0x200008c0
    a4f0:	000142a9 	.word	0x000142a9
    a4f4:	00014ff8 	.word	0x00014ff8
    a4f8:	0001620a 	.word	0x0001620a
    a4fc:	00015047 	.word	0x00015047
    a500:	00014f97 	.word	0x00014f97
    a504:	00017105 	.word	0x00017105

0000a508 <ticker_update_adv_assert>:
{
    a508:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    a50a:	b190      	cbz	r0, a532 <ticker_update_adv_assert+0x2a>
    a50c:	4b0a      	ldr	r3, [pc, #40]	; (a538 <ticker_update_adv_assert+0x30>)
    a50e:	7c9b      	ldrb	r3, [r3, #18]
    a510:	2b05      	cmp	r3, #5
    a512:	d00e      	beq.n	a532 <ticker_update_adv_assert+0x2a>
    a514:	4b09      	ldr	r3, [pc, #36]	; (a53c <ticker_update_adv_assert+0x34>)
    a516:	9301      	str	r3, [sp, #4]
    a518:	9300      	str	r3, [sp, #0]
    a51a:	4a09      	ldr	r2, [pc, #36]	; (a540 <ticker_update_adv_assert+0x38>)
    a51c:	4b09      	ldr	r3, [pc, #36]	; (a544 <ticker_update_adv_assert+0x3c>)
    a51e:	490a      	ldr	r1, [pc, #40]	; (a548 <ticker_update_adv_assert+0x40>)
    a520:	480a      	ldr	r0, [pc, #40]	; (a54c <ticker_update_adv_assert+0x44>)
    a522:	f7f6 fd33 	bl	f8c <printk>
    a526:	4040      	eors	r0, r0
    a528:	f380 8811 	msr	BASEPRI, r0
    a52c:	f04f 0004 	mov.w	r0, #4
    a530:	df02      	svc	2
}
    a532:	b003      	add	sp, #12
    a534:	f85d fb04 	ldr.w	pc, [sp], #4
    a538:	200008c0 	.word	0x200008c0
    a53c:	000142a9 	.word	0x000142a9
    a540:	00014ff8 	.word	0x00014ff8
    a544:	00016222 	.word	0x00016222
    a548:	00015047 	.word	0x00015047
    a54c:	00017171 	.word	0x00017171

0000a550 <ticker_update_slave_assert>:
{
    a550:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    a552:	b198      	cbz	r0, a57c <ticker_update_slave_assert+0x2c>
    a554:	4b0b      	ldr	r3, [pc, #44]	; (a584 <ticker_update_slave_assert+0x34>)
    a556:	7c9b      	ldrb	r3, [r3, #18]
    a558:	b2c9      	uxtb	r1, r1
    a55a:	4299      	cmp	r1, r3
    a55c:	d00e      	beq.n	a57c <ticker_update_slave_assert+0x2c>
    a55e:	4b0a      	ldr	r3, [pc, #40]	; (a588 <ticker_update_slave_assert+0x38>)
    a560:	9301      	str	r3, [sp, #4]
    a562:	9300      	str	r3, [sp, #0]
    a564:	4a09      	ldr	r2, [pc, #36]	; (a58c <ticker_update_slave_assert+0x3c>)
    a566:	4b0a      	ldr	r3, [pc, #40]	; (a590 <ticker_update_slave_assert+0x40>)
    a568:	490a      	ldr	r1, [pc, #40]	; (a594 <ticker_update_slave_assert+0x44>)
    a56a:	480b      	ldr	r0, [pc, #44]	; (a598 <ticker_update_slave_assert+0x48>)
    a56c:	f7f6 fd0e 	bl	f8c <printk>
    a570:	4040      	eors	r0, r0
    a572:	f380 8811 	msr	BASEPRI, r0
    a576:	f04f 0004 	mov.w	r0, #4
    a57a:	df02      	svc	2
}
    a57c:	b003      	add	sp, #12
    a57e:	f85d fb04 	ldr.w	pc, [sp], #4
    a582:	bf00      	nop
    a584:	200008c0 	.word	0x200008c0
    a588:	000142a9 	.word	0x000142a9
    a58c:	00014ff8 	.word	0x00014ff8
    a590:	0001623b 	.word	0x0001623b
    a594:	00015047 	.word	0x00015047
    a598:	000171c0 	.word	0x000171c0

0000a59c <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    a59c:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    a59e:	b170      	cbz	r0, a5be <ticker_op_latency_cancelled+0x22>
    a5a0:	4b0b      	ldr	r3, [pc, #44]	; (a5d0 <ticker_op_latency_cancelled+0x34>)
    a5a2:	9301      	str	r3, [sp, #4]
    a5a4:	9300      	str	r3, [sp, #0]
    a5a6:	4a0b      	ldr	r2, [pc, #44]	; (a5d4 <ticker_op_latency_cancelled+0x38>)
    a5a8:	4b0b      	ldr	r3, [pc, #44]	; (a5d8 <ticker_op_latency_cancelled+0x3c>)
    a5aa:	490c      	ldr	r1, [pc, #48]	; (a5dc <ticker_op_latency_cancelled+0x40>)
    a5ac:	480c      	ldr	r0, [pc, #48]	; (a5e0 <ticker_op_latency_cancelled+0x44>)
    a5ae:	f7f6 fced 	bl	f8c <printk>
    a5b2:	4040      	eors	r0, r0
    a5b4:	f380 8811 	msr	BASEPRI, r0
    a5b8:	f04f 0004 	mov.w	r0, #4
    a5bc:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    a5be:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    a5c2:	f360 0341 	bfi	r3, r0, #1, #1
    a5c6:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    a5ca:	b003      	add	sp, #12
    a5cc:	f85d fb04 	ldr.w	pc, [sp], #4
    a5d0:	000142a9 	.word	0x000142a9
    a5d4:	00014ff8 	.word	0x00014ff8
    a5d8:	00016519 	.word	0x00016519
    a5dc:	00015047 	.word	0x00015047
    a5e0:	00017092 	.word	0x00017092

0000a5e4 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    a5e4:	4b04      	ldr	r3, [pc, #16]	; (a5f8 <ticker_job_disable+0x14>)
    a5e6:	7d1b      	ldrb	r3, [r3, #20]
    a5e8:	b123      	cbz	r3, a5f4 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    a5ea:	2101      	movs	r1, #1
    a5ec:	2200      	movs	r2, #0
    a5ee:	4608      	mov	r0, r1
    a5f0:	f7fc ba1c 	b.w	6a2c <mayfly_enable>
    a5f4:	4770      	bx	lr
    a5f6:	bf00      	nop
    a5f8:	200008c0 	.word	0x200008c0

0000a5fc <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a5fc:	2806      	cmp	r0, #6
{
    a5fe:	b510      	push	{r4, lr}
    a600:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a602:	d90a      	bls.n	a61a <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a604:	4b09      	ldr	r3, [pc, #36]	; (a62c <hdr_conn_get+0x30>)
    a606:	1fc2      	subs	r2, r0, #7
    a608:	b292      	uxth	r2, r2
    a60a:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a60e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    a612:	f7fc f99d 	bl	6950 <mem_get>
    a616:	6020      	str	r0, [r4, #0]
    a618:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    a61a:	2805      	cmp	r0, #5
    a61c:	d004      	beq.n	a628 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    a61e:	2806      	cmp	r0, #6
	return NULL;
    a620:	4803      	ldr	r0, [pc, #12]	; (a630 <hdr_conn_get+0x34>)
    a622:	bf18      	it	ne
    a624:	2000      	movne	r0, #0
    a626:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    a628:	4802      	ldr	r0, [pc, #8]	; (a634 <hdr_conn_get+0x38>)
}
    a62a:	bd10      	pop	{r4, pc}
    a62c:	200008c0 	.word	0x200008c0
    a630:	20000990 	.word	0x20000990
    a634:	200008d8 	.word	0x200008d8

0000a638 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    a638:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    a63a:	4b07      	ldr	r3, [pc, #28]	; (a658 <event_stop.part.10+0x20>)
    a63c:	9301      	str	r3, [sp, #4]
    a63e:	9300      	str	r3, [sp, #0]
    a640:	4a06      	ldr	r2, [pc, #24]	; (a65c <event_stop.part.10+0x24>)
    a642:	4b07      	ldr	r3, [pc, #28]	; (a660 <event_stop.part.10+0x28>)
    a644:	4907      	ldr	r1, [pc, #28]	; (a664 <event_stop.part.10+0x2c>)
    a646:	4808      	ldr	r0, [pc, #32]	; (a668 <event_stop.part.10+0x30>)
    a648:	f7f6 fca0 	bl	f8c <printk>
    a64c:	4040      	eors	r0, r0
    a64e:	f380 8811 	msr	BASEPRI, r0
    a652:	f04f 0004 	mov.w	r0, #4
    a656:	df02      	svc	2
    a658:	000142a9 	.word	0x000142a9
    a65c:	00014ff8 	.word	0x00014ff8
    a660:	0001633a 	.word	0x0001633a
    a664:	00015047 	.word	0x00015047
    a668:	00016ca7 	.word	0x00016ca7

0000a66c <event_stop>:
	s_mfy_radio_stop.param = context;
    a66c:	4a06      	ldr	r2, [pc, #24]	; (a688 <event_stop+0x1c>)
{
    a66e:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    a670:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a672:	4613      	mov	r3, r2
    a674:	2200      	movs	r2, #0
    a676:	4611      	mov	r1, r2
    a678:	4610      	mov	r0, r2
    a67a:	f7fc f9ff 	bl	6a7c <mayfly_enqueue>
	LL_ASSERT(!retval);
    a67e:	b108      	cbz	r0, a684 <event_stop+0x18>
    a680:	f7ff ffda 	bl	a638 <event_stop.part.10>
    a684:	bd08      	pop	{r3, pc}
    a686:	bf00      	nop
    a688:	20003d68 	.word	0x20003d68

0000a68c <event_active>:
{
    a68c:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a68e:	2200      	movs	r2, #0
    a690:	4b0b      	ldr	r3, [pc, #44]	; (a6c0 <event_active+0x34>)
    a692:	4611      	mov	r1, r2
    a694:	4610      	mov	r0, r2
    a696:	f7fc f9f1 	bl	6a7c <mayfly_enqueue>
	LL_ASSERT(!retval);
    a69a:	b170      	cbz	r0, a6ba <event_active+0x2e>
    a69c:	4b09      	ldr	r3, [pc, #36]	; (a6c4 <event_active+0x38>)
    a69e:	9301      	str	r3, [sp, #4]
    a6a0:	9300      	str	r3, [sp, #0]
    a6a2:	4a09      	ldr	r2, [pc, #36]	; (a6c8 <event_active+0x3c>)
    a6a4:	4b09      	ldr	r3, [pc, #36]	; (a6cc <event_active+0x40>)
    a6a6:	490a      	ldr	r1, [pc, #40]	; (a6d0 <event_active+0x44>)
    a6a8:	480a      	ldr	r0, [pc, #40]	; (a6d4 <event_active+0x48>)
    a6aa:	f7f6 fc6f 	bl	f8c <printk>
    a6ae:	4040      	eors	r0, r0
    a6b0:	f380 8811 	msr	BASEPRI, r0
    a6b4:	f04f 0004 	mov.w	r0, #4
    a6b8:	df02      	svc	2
}
    a6ba:	b003      	add	sp, #12
    a6bc:	f85d fb04 	ldr.w	pc, [sp], #4
    a6c0:	20003d38 	.word	0x20003d38
    a6c4:	000142a9 	.word	0x000142a9
    a6c8:	00014ff8 	.word	0x00014ff8
    a6cc:	0001626a 	.word	0x0001626a
    a6d0:	00015047 	.word	0x00015047
    a6d4:	00016ca7 	.word	0x00016ca7

0000a6d8 <event_xtal>:
{
    a6d8:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a6da:	2200      	movs	r2, #0
    a6dc:	4b0b      	ldr	r3, [pc, #44]	; (a70c <event_xtal+0x34>)
    a6de:	4611      	mov	r1, r2
    a6e0:	4610      	mov	r0, r2
    a6e2:	f7fc f9cb 	bl	6a7c <mayfly_enqueue>
	LL_ASSERT(!retval);
    a6e6:	b170      	cbz	r0, a706 <event_xtal+0x2e>
    a6e8:	4b09      	ldr	r3, [pc, #36]	; (a710 <event_xtal+0x38>)
    a6ea:	9301      	str	r3, [sp, #4]
    a6ec:	9300      	str	r3, [sp, #0]
    a6ee:	4a09      	ldr	r2, [pc, #36]	; (a714 <event_xtal+0x3c>)
    a6f0:	4b09      	ldr	r3, [pc, #36]	; (a718 <event_xtal+0x40>)
    a6f2:	490a      	ldr	r1, [pc, #40]	; (a71c <event_xtal+0x44>)
    a6f4:	480a      	ldr	r0, [pc, #40]	; (a720 <event_xtal+0x48>)
    a6f6:	f7f6 fc49 	bl	f8c <printk>
    a6fa:	4040      	eors	r0, r0
    a6fc:	f380 8811 	msr	BASEPRI, r0
    a700:	f04f 0004 	mov.w	r0, #4
    a704:	df02      	svc	2
}
    a706:	b003      	add	sp, #12
    a708:	f85d fb04 	ldr.w	pc, [sp], #4
    a70c:	20003db8 	.word	0x20003db8
    a710:	000142a9 	.word	0x000142a9
    a714:	00014ff8 	.word	0x00014ff8
    a718:	00016286 	.word	0x00016286
    a71c:	00015047 	.word	0x00015047
    a720:	00016ca7 	.word	0x00016ca7

0000a724 <mayfly_radio_active>:
{
    a724:	b507      	push	{r0, r1, r2, lr}
    a726:	4a12      	ldr	r2, [pc, #72]	; (a770 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    a728:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    a72a:	b140      	cbz	r0, a73e <mayfly_radio_active+0x1a>
		if (s_active++) {
    a72c:	1c59      	adds	r1, r3, #1
    a72e:	7011      	strb	r1, [r2, #0]
    a730:	b9d3      	cbnz	r3, a768 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    a732:	2001      	movs	r0, #1
}
    a734:	b003      	add	sp, #12
    a736:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_active_callback(0);
    a73a:	f006 b92d 	b.w	10998 <radio_active_callback>
		LL_ASSERT(s_active);
    a73e:	b973      	cbnz	r3, a75e <mayfly_radio_active+0x3a>
    a740:	4b0c      	ldr	r3, [pc, #48]	; (a774 <mayfly_radio_active+0x50>)
    a742:	9301      	str	r3, [sp, #4]
    a744:	9300      	str	r3, [sp, #0]
    a746:	4a0c      	ldr	r2, [pc, #48]	; (a778 <mayfly_radio_active+0x54>)
    a748:	4b0c      	ldr	r3, [pc, #48]	; (a77c <mayfly_radio_active+0x58>)
    a74a:	490d      	ldr	r1, [pc, #52]	; (a780 <mayfly_radio_active+0x5c>)
    a74c:	480d      	ldr	r0, [pc, #52]	; (a784 <mayfly_radio_active+0x60>)
    a74e:	f7f6 fc1d 	bl	f8c <printk>
    a752:	4040      	eors	r0, r0
    a754:	f380 8811 	msr	BASEPRI, r0
    a758:	f04f 0004 	mov.w	r0, #4
    a75c:	df02      	svc	2
		if (--s_active) {
    a75e:	3b01      	subs	r3, #1
    a760:	b2db      	uxtb	r3, r3
    a762:	7013      	strb	r3, [r2, #0]
    a764:	2b00      	cmp	r3, #0
    a766:	d0e5      	beq.n	a734 <mayfly_radio_active+0x10>
}
    a768:	b003      	add	sp, #12
    a76a:	f85d fb04 	ldr.w	pc, [sp], #4
    a76e:	bf00      	nop
    a770:	20000a64 	.word	0x20000a64
    a774:	000142a9 	.word	0x000142a9
    a778:	00014ff8 	.word	0x00014ff8
    a77c:	00016256 	.word	0x00016256
    a780:	00015047 	.word	0x00015047
    a784:	00016bfc 	.word	0x00016bfc

0000a788 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    a788:	2000      	movs	r0, #0
    a78a:	f7ff bfcb 	b.w	a724 <mayfly_radio_active>
	...

0000a790 <mayfly_radio_stop>:
{
    a790:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    a792:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    a794:	1f03      	subs	r3, r0, #4
    a796:	2b01      	cmp	r3, #1
    a798:	d90e      	bls.n	a7b8 <mayfly_radio_stop+0x28>
    a79a:	4b11      	ldr	r3, [pc, #68]	; (a7e0 <mayfly_radio_stop+0x50>)
    a79c:	9301      	str	r3, [sp, #4]
    a79e:	9300      	str	r3, [sp, #0]
    a7a0:	4a10      	ldr	r2, [pc, #64]	; (a7e4 <mayfly_radio_stop+0x54>)
    a7a2:	4b11      	ldr	r3, [pc, #68]	; (a7e8 <mayfly_radio_stop+0x58>)
    a7a4:	4911      	ldr	r1, [pc, #68]	; (a7ec <mayfly_radio_stop+0x5c>)
    a7a6:	4812      	ldr	r0, [pc, #72]	; (a7f0 <mayfly_radio_stop+0x60>)
    a7a8:	f7f6 fbf0 	bl	f8c <printk>
    a7ac:	4040      	eors	r0, r0
    a7ae:	f380 8811 	msr	BASEPRI, r0
    a7b2:	f04f 0004 	mov.w	r0, #4
    a7b6:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    a7b8:	4a0e      	ldr	r2, [pc, #56]	; (a7f4 <mayfly_radio_stop+0x64>)
    a7ba:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    a7bc:	b143      	cbz	r3, a7d0 <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    a7be:	3b04      	subs	r3, #4
    a7c0:	2b01      	cmp	r3, #1
    a7c2:	d905      	bls.n	a7d0 <mayfly_radio_stop+0x40>
			_radio.state = state;
    a7c4:	7510      	strb	r0, [r2, #20]
}
    a7c6:	b003      	add	sp, #12
    a7c8:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_disable();
    a7cc:	f007 ba86 	b.w	11cdc <radio_disable>
	if (radio_used || !radio_is_idle()) {
    a7d0:	f007 fab6 	bl	11d40 <radio_is_idle>
    a7d4:	2800      	cmp	r0, #0
    a7d6:	d0f6      	beq.n	a7c6 <mayfly_radio_stop+0x36>
}
    a7d8:	b003      	add	sp, #12
    a7da:	f85d fb04 	ldr.w	pc, [sp], #4
    a7de:	bf00      	nop
    a7e0:	000142a9 	.word	0x000142a9
    a7e4:	00014ff8 	.word	0x00014ff8
    a7e8:	00016328 	.word	0x00016328
    a7ec:	00015047 	.word	0x00015047
    a7f0:	00016c26 	.word	0x00016c26
    a7f4:	200008c0 	.word	0x200008c0

0000a7f8 <pdu_node_tx_release>:
{
    a7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    a7fa:	4a17      	ldr	r2, [pc, #92]	; (a858 <pdu_node_tx_release+0x60>)
    a7fc:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    a800:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    a804:	3301      	adds	r3, #1
    a806:	b2db      	uxtb	r3, r3
		last = 0;
    a808:	429c      	cmp	r4, r3
    a80a:	bf08      	it	eq
    a80c:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    a80e:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    a812:	429c      	cmp	r4, r3
    a814:	d10e      	bne.n	a834 <pdu_node_tx_release+0x3c>
    a816:	4b11      	ldr	r3, [pc, #68]	; (a85c <pdu_node_tx_release+0x64>)
    a818:	9301      	str	r3, [sp, #4]
    a81a:	9300      	str	r3, [sp, #0]
    a81c:	4a10      	ldr	r2, [pc, #64]	; (a860 <pdu_node_tx_release+0x68>)
    a81e:	4b11      	ldr	r3, [pc, #68]	; (a864 <pdu_node_tx_release+0x6c>)
    a820:	4911      	ldr	r1, [pc, #68]	; (a868 <pdu_node_tx_release+0x70>)
    a822:	4812      	ldr	r0, [pc, #72]	; (a86c <pdu_node_tx_release+0x74>)
    a824:	f7f6 fbb2 	bl	f8c <printk>
    a828:	4040      	eors	r0, r0
    a82a:	f380 8811 	msr	BASEPRI, r0
    a82e:	f04f 0004 	mov.w	r0, #4
    a832:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    a834:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    a838:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    a83c:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    a840:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    a844:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    a848:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    a84a:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    a84e:	b003      	add	sp, #12
    a850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    a854:	f006 b8a2 	b.w	1099c <radio_event_callback>
    a858:	200008c0 	.word	0x200008c0
    a85c:	000142a9 	.word	0x000142a9
    a860:	00014ff8 	.word	0x00014ff8
    a864:	00016470 	.word	0x00016470
    a868:	00015047 	.word	0x00015047
    a86c:	00016d77 	.word	0x00016d77

0000a870 <packet_tx_enqueue>:
{
    a870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    a874:	4c24      	ldr	r4, [pc, #144]	; (a908 <packet_tx_enqueue+0x98>)
{
    a876:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    a878:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    a87a:	b12e      	cbz	r6, a888 <packet_tx_enqueue+0x18>
    a87c:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    a880:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    a884:	429a      	cmp	r2, r3
    a886:	d101      	bne.n	a88c <packet_tx_enqueue+0x1c>
    a888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    a88c:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    a890:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a894:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    a898:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    a89c:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a8a0:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    a8a4:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    a8a6:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a8a8:	f7fc f852 	bl	6950 <mem_get>
    a8ac:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    a8ae:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    a8b2:	8c1a      	ldrh	r2, [r3, #32]
    a8b4:	4282      	cmp	r2, r0
    a8b6:	d11f      	bne.n	a8f8 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    a8b8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    a8bc:	b942      	cbnz	r2, a8d0 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    a8be:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    a8c2:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    a8c6:	b91a      	cbnz	r2, a8d0 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    a8c8:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    a8cc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    a8d0:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    a8d4:	b102      	cbz	r2, a8d8 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    a8d6:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    a8d8:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    a8dc:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    a8e0:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    a8e4:	3301      	adds	r3, #1
    a8e6:	b2db      	uxtb	r3, r3
			first = 0;
    a8e8:	429a      	cmp	r2, r3
    a8ea:	bf08      	it	eq
    a8ec:	2300      	moveq	r3, #0
    a8ee:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    a8f0:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    a8f4:	b2f6      	uxtb	r6, r6
    a8f6:	e7c0      	b.n	a87a <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    a8f8:	792b      	ldrb	r3, [r5, #4]
    a8fa:	f367 0301 	bfi	r3, r7, #0, #2
    a8fe:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    a900:	4629      	mov	r1, r5
    a902:	f7ff ff79 	bl	a7f8 <pdu_node_tx_release>
    a906:	e7e9      	b.n	a8dc <packet_tx_enqueue+0x6c>
    a908:	200008c0 	.word	0x200008c0

0000a90c <connection_release>:
{
    a90c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    a90e:	2201      	movs	r2, #1
{
    a910:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    a912:	4611      	mov	r1, r2
    a914:	2000      	movs	r0, #0
    a916:	f7fc f889 	bl	6a2c <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a91a:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    a91e:	2100      	movs	r1, #0
    a920:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a924:	3207      	adds	r2, #7
	ticker_status =
    a926:	9300      	str	r3, [sp, #0]
    a928:	4608      	mov	r0, r1
    a92a:	4b3e      	ldr	r3, [pc, #248]	; (aa24 <connection_release+0x118>)
    a92c:	b2d2      	uxtb	r2, r2
    a92e:	f7fc ff01 	bl	7734 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a932:	f030 0102 	bics.w	r1, r0, #2
    a936:	d00e      	beq.n	a956 <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a938:	4b3b      	ldr	r3, [pc, #236]	; (aa28 <connection_release+0x11c>)
    a93a:	9301      	str	r3, [sp, #4]
    a93c:	9300      	str	r3, [sp, #0]
    a93e:	4a3b      	ldr	r2, [pc, #236]	; (aa2c <connection_release+0x120>)
    a940:	4b3b      	ldr	r3, [pc, #236]	; (aa30 <connection_release+0x124>)
    a942:	493c      	ldr	r1, [pc, #240]	; (aa34 <connection_release+0x128>)
    a944:	483c      	ldr	r0, [pc, #240]	; (aa38 <connection_release+0x12c>)
    a946:	f7f6 fb21 	bl	f8c <printk>
    a94a:	4040      	eors	r0, r0
    a94c:	f380 8811 	msr	BASEPRI, r0
    a950:	f04f 0004 	mov.w	r0, #4
    a954:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    a956:	4b39      	ldr	r3, [pc, #228]	; (aa3c <connection_release+0x130>)
    a958:	7d1a      	ldrb	r2, [r3, #20]
    a95a:	2a05      	cmp	r2, #5
    a95c:	461d      	mov	r5, r3
    a95e:	d11b      	bne.n	a998 <connection_release+0x8c>
					  conn->handle))) {
    a960:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    a962:	7c18      	ldrb	r0, [r3, #16]
    a964:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    a966:	4290      	cmp	r0, r2
    a968:	d116      	bne.n	a998 <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    a96a:	7419      	strb	r1, [r3, #16]
		ticker_status =
    a96c:	f242 23fb 	movw	r3, #8955	; 0x22fb
    a970:	9300      	str	r3, [sp, #0]
    a972:	2201      	movs	r2, #1
    a974:	4b2b      	ldr	r3, [pc, #172]	; (aa24 <connection_release+0x118>)
    a976:	4608      	mov	r0, r1
    a978:	f7fc fedc 	bl	7734 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a97c:	f030 0202 	bics.w	r2, r0, #2
    a980:	d1da      	bne.n	a938 <connection_release+0x2c>
		ticker_status =
    a982:	f242 3302 	movw	r3, #8962	; 0x2302
    a986:	9300      	str	r3, [sp, #0]
    a988:	4611      	mov	r1, r2
    a98a:	4b26      	ldr	r3, [pc, #152]	; (aa24 <connection_release+0x118>)
    a98c:	4610      	mov	r0, r2
    a98e:	f7fc fed1 	bl	7734 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a992:	f030 0302 	bics.w	r3, r0, #2
    a996:	d1cf      	bne.n	a938 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    a998:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    a99c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    a9a0:	4299      	cmp	r1, r3
    a9a2:	d003      	beq.n	a9ac <connection_release+0xa0>
    a9a4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    a9a8:	4299      	cmp	r1, r3
    a9aa:	d101      	bne.n	a9b0 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    a9ac:	4e24      	ldr	r6, [pc, #144]	; (aa40 <connection_release+0x134>)
    a9ae:	e012      	b.n	a9d6 <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    a9b0:	790b      	ldrb	r3, [r1, #4]
    a9b2:	f36f 0301 	bfc	r3, #0, #2
    a9b6:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    a9b8:	680b      	ldr	r3, [r1, #0]
    a9ba:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    a9be:	8c20      	ldrh	r0, [r4, #32]
    a9c0:	f7ff ff1a 	bl	a7f8 <pdu_node_tx_release>
    a9c4:	e7e8      	b.n	a998 <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    a9c6:	6803      	ldr	r3, [r0, #0]
    a9c8:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    a9cc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    a9d0:	4631      	mov	r1, r6
    a9d2:	f7fb ffa2 	bl	691a <mem_release>
	while ((conn->pkt_tx_head) &&
    a9d6:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    a9da:	b118      	cbz	r0, a9e4 <connection_release+0xd8>
    a9dc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    a9e0:	4298      	cmp	r0, r3
    a9e2:	d1f0      	bne.n	a9c6 <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    a9e4:	2300      	movs	r3, #0
    a9e6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    a9ea:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    a9ee:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    a9f2:	b951      	cbnz	r1, aa0a <connection_release+0xfe>
	conn->handle = 0xffff;
    a9f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a9f8:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    a9fa:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    a9fe:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    aa00:	bf08      	it	eq
    aa02:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    aa06:	b002      	add	sp, #8
    aa08:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    aa0a:	790b      	ldrb	r3, [r1, #4]
    aa0c:	f36f 0301 	bfc	r3, #0, #2
    aa10:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    aa12:	680b      	ldr	r3, [r1, #0]
    aa14:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    aa18:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    aa1c:	8c20      	ldrh	r0, [r4, #32]
    aa1e:	f7ff feeb 	bl	a7f8 <pdu_node_tx_release>
    aa22:	e7e4      	b.n	a9ee <connection_release+0xe2>
    aa24:	0000a3fd 	.word	0x0000a3fd
    aa28:	000142a9 	.word	0x000142a9
    aa2c:	00014ff8 	.word	0x00014ff8
    aa30:	00016484 	.word	0x00016484
    aa34:	00015047 	.word	0x00015047
    aa38:	0001656d 	.word	0x0001656d
    aa3c:	200008c0 	.word	0x200008c0
    aa40:	20000a1c 	.word	0x20000a1c

0000aa44 <chan_set>:
	switch (chan) {
    aa44:	2826      	cmp	r0, #38	; 0x26
{
    aa46:	b513      	push	{r0, r1, r4, lr}
    aa48:	4604      	mov	r4, r0
	switch (chan) {
    aa4a:	d00c      	beq.n	aa66 <chan_set+0x22>
    aa4c:	2827      	cmp	r0, #39	; 0x27
    aa4e:	d00c      	beq.n	aa6a <chan_set+0x26>
    aa50:	2825      	cmp	r0, #37	; 0x25
    aa52:	d10c      	bne.n	aa6e <chan_set+0x2a>
		radio_freq_chan_set(2);
    aa54:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    aa56:	f007 f8bd 	bl	11bd4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    aa5a:	4620      	mov	r0, r4
}
    aa5c:	b002      	add	sp, #8
    aa5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    aa62:	f007 b8bd 	b.w	11be0 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    aa66:	201a      	movs	r0, #26
    aa68:	e7f5      	b.n	aa56 <chan_set+0x12>
		radio_freq_chan_set(80);
    aa6a:	2050      	movs	r0, #80	; 0x50
    aa6c:	e7f3      	b.n	aa56 <chan_set+0x12>
		if (chan < 11) {
    aa6e:	280a      	cmp	r0, #10
    aa70:	d802      	bhi.n	aa78 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    aa72:	3002      	adds	r0, #2
    aa74:	0040      	lsls	r0, r0, #1
    aa76:	e7ee      	b.n	aa56 <chan_set+0x12>
		} else if (chan < 40) {
    aa78:	2827      	cmp	r0, #39	; 0x27
    aa7a:	d801      	bhi.n	aa80 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    aa7c:	3003      	adds	r0, #3
    aa7e:	e7f9      	b.n	aa74 <chan_set+0x30>
			LL_ASSERT(0);
    aa80:	4b07      	ldr	r3, [pc, #28]	; (aaa0 <chan_set+0x5c>)
    aa82:	9301      	str	r3, [sp, #4]
    aa84:	9300      	str	r3, [sp, #0]
    aa86:	4a07      	ldr	r2, [pc, #28]	; (aaa4 <chan_set+0x60>)
    aa88:	4b07      	ldr	r3, [pc, #28]	; (aaa8 <chan_set+0x64>)
    aa8a:	4908      	ldr	r1, [pc, #32]	; (aaac <chan_set+0x68>)
    aa8c:	4808      	ldr	r0, [pc, #32]	; (aab0 <chan_set+0x6c>)
    aa8e:	f7f6 fa7d 	bl	f8c <printk>
    aa92:	4040      	eors	r0, r0
    aa94:	f380 8811 	msr	BASEPRI, r0
    aa98:	f04f 0004 	mov.w	r0, #4
    aa9c:	df02      	svc	2
    aa9e:	bf00      	nop
    aaa0:	000142a9 	.word	0x000142a9
    aaa4:	00014ff8 	.word	0x00014ff8
    aaa8:	0001635a 	.word	0x0001635a
    aaac:	00015047 	.word	0x00015047
    aab0:	00014f97 	.word	0x00014f97

0000aab4 <adv_setup>:
{
    aab4:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    aab6:	4c31      	ldr	r4, [pc, #196]	; (ab7c <adv_setup+0xc8>)
    aab8:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    aabc:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    aac0:	429a      	cmp	r2, r3
    aac2:	d051      	beq.n	ab68 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    aac4:	3301      	adds	r3, #1
    aac6:	b2db      	uxtb	r3, r3
			first = 0;
    aac8:	2b02      	cmp	r3, #2
    aaca:	bf08      	it	eq
    aacc:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    aace:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    aad2:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    aad4:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    aad8:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    aadc:	4299      	cmp	r1, r3
    aade:	d007      	beq.n	aaf0 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    aae0:	3301      	adds	r3, #1
    aae2:	b2db      	uxtb	r3, r3
			first = 0;
    aae4:	2b02      	cmp	r3, #2
    aae6:	bf08      	it	eq
    aae8:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    aaea:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    aaee:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    aaf0:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    aaf4:	2327      	movs	r3, #39	; 0x27
    aaf6:	212b      	movs	r1, #43	; 0x2b
    aaf8:	fb13 1505 	smlabb	r5, r3, r5, r1
    aafc:	1966      	adds	r6, r4, r5
	if (upd) {
    aafe:	b142      	cbz	r2, ab12 <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    ab00:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    ab04:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    ab08:	2206      	movs	r2, #6
    ab0a:	1cb1      	adds	r1, r6, #2
    ab0c:	307d      	adds	r0, #125	; 0x7d
    ab0e:	f7f7 f875 	bl	1bfc <memcpy>
	radio_pkt_tx_set(pdu);
    ab12:	4630      	mov	r0, r6
    ab14:	f007 f8c2 	bl	11c9c <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    ab18:	5d63      	ldrb	r3, [r4, r5]
    ab1a:	f003 030f 	and.w	r3, r3, #15
    ab1e:	2b02      	cmp	r3, #2
    ab20:	d024      	beq.n	ab6c <adv_setup+0xb8>
    ab22:	2b07      	cmp	r3, #7
    ab24:	d022      	beq.n	ab6c <adv_setup+0xb8>
		_radio.state = STATE_TX;
    ab26:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    ab28:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    ab2a:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    ab2c:	f007 f9cc 	bl	11ec8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    ab30:	2000      	movs	r0, #0
    ab32:	f007 f92d 	bl	11d90 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    ab36:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    ab3a:	f3c3 0202 	ubfx	r2, r3, #0, #3
    ab3e:	b2d3      	uxtb	r3, r2
    ab40:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    ab42:	2000      	movs	r0, #0
    ab44:	07ce      	lsls	r6, r1, #31
    ab46:	f100 0501 	add.w	r5, r0, #1
    ab4a:	d514      	bpl.n	ab76 <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    ab4c:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    ab4e:	4013      	ands	r3, r2
    ab50:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    ab54:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    ab56:	f363 0202 	bfi	r2, r3, #0, #3
    ab5a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    ab5e:	3025      	adds	r0, #37	; 0x25
}
    ab60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    ab64:	f7ff bf6e 	b.w	aa44 <chan_set>
	u8_t upd = 0;
    ab68:	2200      	movs	r2, #0
    ab6a:	e7b3      	b.n	aad4 <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    ab6c:	2303      	movs	r3, #3
    ab6e:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    ab70:	f007 f924 	bl	11dbc <radio_switch_complete_and_disable>
    ab74:	e7df      	b.n	ab36 <adv_setup+0x82>
		bitmap >>= 1;
    ab76:	0849      	lsrs	r1, r1, #1
    ab78:	4628      	mov	r0, r5
    ab7a:	e7e3      	b.n	ab44 <adv_setup+0x90>
    ab7c:	200008c0 	.word	0x200008c0

0000ab80 <sched_after_mstr_free_offset_get>:
{
    ab80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ab82:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    ab84:	aa04      	add	r2, sp, #16
{
    ab86:	461c      	mov	r4, r3
    ab88:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    ab8a:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    ab8e:	3127      	adds	r1, #39	; 0x27
    ab90:	2001      	movs	r0, #1
    ab92:	f7ff fa5d 	bl	a050 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    ab96:	6823      	ldr	r3, [r4, #0]
    ab98:	b363      	cbz	r3, abf4 <sched_after_mstr_free_offset_get+0x74>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    ab9a:	9803      	ldr	r0, [sp, #12]
    ab9c:	1b83      	subs	r3, r0, r6
    ab9e:	021b      	lsls	r3, r3, #8
    aba0:	d50e      	bpl.n	abc0 <sched_after_mstr_free_offset_get+0x40>
    aba2:	4b19      	ldr	r3, [pc, #100]	; (ac08 <sched_after_mstr_free_offset_get+0x88>)
    aba4:	9301      	str	r3, [sp, #4]
    aba6:	9300      	str	r3, [sp, #0]
    aba8:	4a18      	ldr	r2, [pc, #96]	; (ac0c <sched_after_mstr_free_offset_get+0x8c>)
    abaa:	4b19      	ldr	r3, [pc, #100]	; (ac10 <sched_after_mstr_free_offset_get+0x90>)
    abac:	4919      	ldr	r1, [pc, #100]	; (ac14 <sched_after_mstr_free_offset_get+0x94>)
    abae:	481a      	ldr	r0, [pc, #104]	; (ac18 <sched_after_mstr_free_offset_get+0x98>)
    abb0:	f7f6 f9ec 	bl	f8c <printk>
    abb4:	4040      	eors	r0, r0
    abb6:	f380 8811 	msr	BASEPRI, r0
    abba:	f04f 0004 	mov.w	r0, #4
    abbe:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    abc0:	4631      	mov	r1, r6
    abc2:	f7fc fe89 	bl	78d8 <ticker_ticks_diff_get>
    abc6:	4602      	mov	r2, r0
    abc8:	4814      	ldr	r0, [pc, #80]	; (ac1c <sched_after_mstr_free_offset_get+0x9c>)
    abca:	2307      	movs	r3, #7
    abcc:	fba2 0100 	umull	r0, r1, r2, r0
    abd0:	fb03 1102 	mla	r1, r3, r2, r1
    abd4:	a30a      	add	r3, pc, #40	; (adr r3, ac00 <sched_after_mstr_free_offset_get+0x80>)
    abd6:	e9d3 2300 	ldrd	r2, r3, [r3]
    abda:	f7f5 fb1b 	bl	214 <__aeabi_uldivmod>
    abde:	6823      	ldr	r3, [r4, #0]
    abe0:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    abe2:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    abe4:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    abe6:	db05      	blt.n	abf4 <sched_after_mstr_free_offset_get+0x74>
		u32_t conn_interval_us = conn_interval * 1250;
    abe8:	f240 40e2 	movw	r0, #1250	; 0x4e2
    abec:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    abee:	6823      	ldr	r3, [r4, #0]
    abf0:	4298      	cmp	r0, r3
    abf2:	d301      	bcc.n	abf8 <sched_after_mstr_free_offset_get+0x78>
}
    abf4:	b004      	add	sp, #16
    abf6:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    abf8:	1a1b      	subs	r3, r3, r0
    abfa:	6023      	str	r3, [r4, #0]
    abfc:	e7f7      	b.n	abee <sched_after_mstr_free_offset_get+0x6e>
    abfe:	bf00      	nop
    ac00:	3b9aca00 	.word	0x3b9aca00
    ac04:	00000000 	.word	0x00000000
    ac08:	000142a9 	.word	0x000142a9
    ac0c:	00014ff8 	.word	0x00014ff8
    ac10:	000162ec 	.word	0x000162ec
    ac14:	00015047 	.word	0x00015047
    ac18:	00016fd3 	.word	0x00016fd3
    ac1c:	1afd498d 	.word	0x1afd498d

0000ac20 <mayfly_sched_win_offset_use>:
{
    ac20:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    ac22:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    ac26:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    ac28:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    ac2c:	68c1      	ldr	r1, [r0, #12]
    ac2e:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    ac30:	f7ff ffa6 	bl	ab80 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    ac34:	a902      	add	r1, sp, #8
    ac36:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    ac3a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    ac3e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ac42:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    ac46:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    ac48:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    ac4c:	f7f6 ffd6 	bl	1bfc <memcpy>
}
    ac50:	b002      	add	sp, #8
    ac52:	bd10      	pop	{r4, pc}

0000ac54 <mayfly_sched_after_mstr_free_offset_get>:
{
    ac54:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    ac56:	4c05      	ldr	r4, [pc, #20]	; (ac6c <mayfly_sched_after_mstr_free_offset_get+0x18>)
    ac58:	4602      	mov	r2, r0
    ac5a:	f504 7382 	add.w	r3, r4, #260	; 0x104
    ac5e:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    ac62:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    ac66:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    ac68:	f7ff bf8a 	b.w	ab80 <sched_after_mstr_free_offset_get>
    ac6c:	200008c0 	.word	0x200008c0

0000ac70 <terminate_ind_rx_enqueue>:
{
    ac70:	b513      	push	{r0, r1, r4, lr}
    ac72:	4603      	mov	r3, r0
    ac74:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    ac76:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    ac7a:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    ac7e:	b970      	cbnz	r0, ac9e <terminate_ind_rx_enqueue+0x2e>
    ac80:	4b16      	ldr	r3, [pc, #88]	; (acdc <terminate_ind_rx_enqueue+0x6c>)
    ac82:	9301      	str	r3, [sp, #4]
    ac84:	9300      	str	r3, [sp, #0]
    ac86:	4a16      	ldr	r2, [pc, #88]	; (ace0 <terminate_ind_rx_enqueue+0x70>)
    ac88:	4b16      	ldr	r3, [pc, #88]	; (ace4 <terminate_ind_rx_enqueue+0x74>)
    ac8a:	4917      	ldr	r1, [pc, #92]	; (ace8 <terminate_ind_rx_enqueue+0x78>)
    ac8c:	4817      	ldr	r0, [pc, #92]	; (acec <terminate_ind_rx_enqueue+0x7c>)
	LL_ASSERT(link);
    ac8e:	f7f6 f97d 	bl	f8c <printk>
    ac92:	4040      	eors	r0, r0
    ac94:	f380 8811 	msr	BASEPRI, r0
    ac98:	f04f 0004 	mov.w	r0, #4
    ac9c:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    ac9e:	8c1c      	ldrh	r4, [r3, #32]
    aca0:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    aca4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    aca8:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    acaa:	4a11      	ldr	r2, [pc, #68]	; (acf0 <terminate_ind_rx_enqueue+0x80>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    acac:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    acb0:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    acb4:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    acb8:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    acbc:	f7fb fe6d 	bl	699a <memq_enqueue>
	LL_ASSERT(link);
    acc0:	b938      	cbnz	r0, acd2 <terminate_ind_rx_enqueue+0x62>
    acc2:	4b06      	ldr	r3, [pc, #24]	; (acdc <terminate_ind_rx_enqueue+0x6c>)
    acc4:	9301      	str	r3, [sp, #4]
    acc6:	9300      	str	r3, [sp, #0]
    acc8:	4a05      	ldr	r2, [pc, #20]	; (ace0 <terminate_ind_rx_enqueue+0x70>)
    acca:	4b06      	ldr	r3, [pc, #24]	; (ace4 <terminate_ind_rx_enqueue+0x74>)
    accc:	4906      	ldr	r1, [pc, #24]	; (ace8 <terminate_ind_rx_enqueue+0x78>)
    acce:	4809      	ldr	r0, [pc, #36]	; (acf4 <terminate_ind_rx_enqueue+0x84>)
    acd0:	e7dd      	b.n	ac8e <terminate_ind_rx_enqueue+0x1e>
}
    acd2:	b002      	add	sp, #8
    acd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    acd8:	f005 be60 	b.w	1099c <radio_event_callback>
    acdc:	000142a9 	.word	0x000142a9
    ace0:	00014ff8 	.word	0x00014ff8
    ace4:	00016497 	.word	0x00016497
    ace8:	00015047 	.word	0x00015047
    acec:	00017059 	.word	0x00017059
    acf0:	200008c0 	.word	0x200008c0
    acf4:	00016547 	.word	0x00016547

0000acf8 <prepare_normal_set>:
{
    acf8:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    acfa:	6804      	ldr	r4, [r0, #0]
    acfc:	2c00      	cmp	r4, #0
{
    acfe:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    ad00:	da26      	bge.n	ad50 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
    ad02:	6843      	ldr	r3, [r0, #4]
    ad04:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    ad06:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    ad08:	429d      	cmp	r5, r3
    ad0a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    ad0e:	bf34      	ite	cc
    ad10:	1ae4      	subcc	r4, r4, r3
    ad12:	1b64      	subcs	r4, r4, r5
		ticker_status =
    ad14:	4b0f      	ldr	r3, [pc, #60]	; (ad54 <prepare_normal_set+0x5c>)
    ad16:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    ad18:	b2a4      	uxth	r4, r4
		ticker_status =
    ad1a:	2300      	movs	r3, #0
    ad1c:	9304      	str	r3, [sp, #16]
    ad1e:	9303      	str	r3, [sp, #12]
    ad20:	9302      	str	r3, [sp, #8]
    ad22:	4618      	mov	r0, r3
    ad24:	9401      	str	r4, [sp, #4]
    ad26:	9400      	str	r4, [sp, #0]
    ad28:	f7fc fcb6 	bl	7698 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ad2c:	f030 0302 	bics.w	r3, r0, #2
    ad30:	d00e      	beq.n	ad50 <prepare_normal_set+0x58>
    ad32:	4b09      	ldr	r3, [pc, #36]	; (ad58 <prepare_normal_set+0x60>)
    ad34:	9301      	str	r3, [sp, #4]
    ad36:	9300      	str	r3, [sp, #0]
    ad38:	4a08      	ldr	r2, [pc, #32]	; (ad5c <prepare_normal_set+0x64>)
    ad3a:	4b09      	ldr	r3, [pc, #36]	; (ad60 <prepare_normal_set+0x68>)
    ad3c:	4909      	ldr	r1, [pc, #36]	; (ad64 <prepare_normal_set+0x6c>)
    ad3e:	480a      	ldr	r0, [pc, #40]	; (ad68 <prepare_normal_set+0x70>)
    ad40:	f7f6 f924 	bl	f8c <printk>
    ad44:	4040      	eors	r0, r0
    ad46:	f380 8811 	msr	BASEPRI, r0
    ad4a:	f04f 0004 	mov.w	r0, #4
    ad4e:	df02      	svc	2
}
    ad50:	b009      	add	sp, #36	; 0x24
    ad52:	bd30      	pop	{r4, r5, pc}
    ad54:	000094a1 	.word	0x000094a1
    ad58:	000142a9 	.word	0x000142a9
    ad5c:	00014ff8 	.word	0x00014ff8
    ad60:	000162a4 	.word	0x000162a4
    ad64:	00015047 	.word	0x00015047
    ad68:	0001656d 	.word	0x0001656d
    ad6c:	00000000 	.word	0x00000000

0000ad70 <mayfly_xtal_stop_calc>:
{
    ad70:	b570      	push	{r4, r5, r6, lr}
    ad72:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ad74:	2302      	movs	r3, #2
    ad76:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    ad78:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    ad7a:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    ad7c:	4e7e      	ldr	r6, [pc, #504]	; (af78 <mayfly_xtal_stop_calc+0x208>)
				    _radio.connection_count));
    ad7e:	4d7f      	ldr	r5, [pc, #508]	; (af7c <mayfly_xtal_stop_calc+0x20c>)
	struct connection *conn_curr = NULL;
    ad80:	930a      	str	r3, [sp, #40]	; 0x28
{
    ad82:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    ad84:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    ad86:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    ad8a:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    ad8c:	ab09      	add	r3, sp, #36	; 0x24
    ad8e:	9302      	str	r3, [sp, #8]
    ad90:	ab0c      	add	r3, sp, #48	; 0x30
    ad92:	9300      	str	r3, [sp, #0]
    ad94:	9601      	str	r6, [sp, #4]
    ad96:	ab0d      	add	r3, sp, #52	; 0x34
    ad98:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    ad9c:	2101      	movs	r1, #1
    ad9e:	2000      	movs	r0, #0
    ada0:	f7fc fd04 	bl	77ac <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    ada4:	2802      	cmp	r0, #2
    ada6:	d014      	beq.n	add2 <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    ada8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    adaa:	b1b3      	cbz	r3, adda <mayfly_xtal_stop_calc+0x6a>
    adac:	4b74      	ldr	r3, [pc, #464]	; (af80 <mayfly_xtal_stop_calc+0x210>)
    adae:	9301      	str	r3, [sp, #4]
    adb0:	9300      	str	r3, [sp, #0]
    adb2:	4a74      	ldr	r2, [pc, #464]	; (af84 <mayfly_xtal_stop_calc+0x214>)
    adb4:	4b74      	ldr	r3, [pc, #464]	; (af88 <mayfly_xtal_stop_calc+0x218>)
    adb6:	4975      	ldr	r1, [pc, #468]	; (af8c <mayfly_xtal_stop_calc+0x21c>)
    adb8:	4875      	ldr	r0, [pc, #468]	; (af90 <mayfly_xtal_stop_calc+0x220>)
	LL_ASSERT(hdr_curr);
    adba:	f7f6 f8e7 	bl	f8c <printk>
    adbe:	4040      	eors	r0, r0
    adc0:	f380 8811 	msr	BASEPRI, r0
    adc4:	f04f 0004 	mov.w	r0, #4
    adc8:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    adca:	2101      	movs	r1, #1
    adcc:	2000      	movs	r0, #0
    adce:	f7fc fd6b 	bl	78a8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    add2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    add4:	2b02      	cmp	r3, #2
    add6:	d0f8      	beq.n	adca <mayfly_xtal_stop_calc+0x5a>
    add8:	e7e6      	b.n	ada8 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    adda:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    adde:	2bff      	cmp	r3, #255	; 0xff
    ade0:	d004      	beq.n	adec <mayfly_xtal_stop_calc+0x7c>
    ade2:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    ade6:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    ade8:	4293      	cmp	r3, r2
    adea:	dacf      	bge.n	ad8c <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    adec:	1f5a      	subs	r2, r3, #5
    adee:	b2d2      	uxtb	r2, r2
    adf0:	2af9      	cmp	r2, #249	; 0xf9
    adf2:	d805      	bhi.n	ae00 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
    adf4:	4a61      	ldr	r2, [pc, #388]	; (af7c <mayfly_xtal_stop_calc+0x20c>)
    adf6:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    adfa:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    adfc:	4293      	cmp	r3, r2
    adfe:	db05      	blt.n	ae0c <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    ae00:	2100      	movs	r1, #0
    ae02:	2001      	movs	r0, #1
    ae04:	f7fe fe90 	bl	9b28 <mayfly_xtal_retain>
}
    ae08:	b00e      	add	sp, #56	; 0x38
    ae0a:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    ae0c:	a90a      	add	r1, sp, #40	; 0x28
    ae0e:	b2e0      	uxtb	r0, r4
    ae10:	f7ff fbf4 	bl	a5fc <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    ae14:	b938      	cbnz	r0, ae26 <mayfly_xtal_stop_calc+0xb6>
    ae16:	4b5a      	ldr	r3, [pc, #360]	; (af80 <mayfly_xtal_stop_calc+0x210>)
    ae18:	9301      	str	r3, [sp, #4]
    ae1a:	9300      	str	r3, [sp, #0]
    ae1c:	4a59      	ldr	r2, [pc, #356]	; (af84 <mayfly_xtal_stop_calc+0x214>)
    ae1e:	4b5a      	ldr	r3, [pc, #360]	; (af88 <mayfly_xtal_stop_calc+0x218>)
    ae20:	495a      	ldr	r1, [pc, #360]	; (af8c <mayfly_xtal_stop_calc+0x21c>)
    ae22:	485c      	ldr	r0, [pc, #368]	; (af94 <mayfly_xtal_stop_calc+0x224>)
    ae24:	e7c9      	b.n	adba <mayfly_xtal_stop_calc+0x4a>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    ae26:	6803      	ldr	r3, [r0, #0]
    ae28:	6844      	ldr	r4, [r0, #4]
    ae2a:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    ae2c:	bfb8      	it	lt
    ae2e:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    ae30:	429c      	cmp	r4, r3
    ae32:	bf38      	it	cc
    ae34:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    ae36:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    ae38:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    ae3c:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    ae3e:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    ae40:	f7ff fbdc 	bl	a5fc <hdr_conn_get>
	LL_ASSERT(hdr_next);
    ae44:	4605      	mov	r5, r0
    ae46:	b938      	cbnz	r0, ae58 <mayfly_xtal_stop_calc+0xe8>
    ae48:	4b4d      	ldr	r3, [pc, #308]	; (af80 <mayfly_xtal_stop_calc+0x210>)
    ae4a:	9301      	str	r3, [sp, #4]
    ae4c:	9300      	str	r3, [sp, #0]
    ae4e:	4a4d      	ldr	r2, [pc, #308]	; (af84 <mayfly_xtal_stop_calc+0x214>)
    ae50:	4b4d      	ldr	r3, [pc, #308]	; (af88 <mayfly_xtal_stop_calc+0x218>)
    ae52:	494e      	ldr	r1, [pc, #312]	; (af8c <mayfly_xtal_stop_calc+0x21c>)
    ae54:	4850      	ldr	r0, [pc, #320]	; (af98 <mayfly_xtal_stop_calc+0x228>)
    ae56:	e7b0      	b.n	adba <mayfly_xtal_stop_calc+0x4a>
	ticks_prepare_to_start_next =
    ae58:	6886      	ldr	r6, [r0, #8]
    ae5a:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    ae5c:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    ae5e:	429e      	cmp	r6, r3
    ae60:	bf38      	it	cc
    ae62:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    ae64:	2a00      	cmp	r2, #0
    ae66:	da05      	bge.n	ae74 <mayfly_xtal_stop_calc+0x104>
		ticks_to_expire -=
    ae68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    ae6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    ae6e:	4433      	add	r3, r6
    ae70:	1a9b      	subs	r3, r3, r2
    ae72:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    ae74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    ae76:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    ae7a:	4293      	cmp	r3, r2
    ae7c:	d20a      	bcs.n	ae94 <mayfly_xtal_stop_calc+0x124>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    ae7e:	2100      	movs	r1, #0
    ae80:	2001      	movs	r0, #1
    ae82:	f7fe fe51 	bl	9b28 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    ae86:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    ae8a:	2101      	movs	r1, #1
    ae8c:	4628      	mov	r0, r5
    ae8e:	f7ff ff33 	bl	acf8 <prepare_normal_set>
    ae92:	e7b9      	b.n	ae08 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    ae94:	2101      	movs	r1, #1
    ae96:	4608      	mov	r0, r1
    ae98:	f7fe fe46 	bl	9b28 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    ae9c:	682b      	ldr	r3, [r5, #0]
    ae9e:	2b00      	cmp	r3, #0
    aea0:	db1c      	blt.n	aedc <mayfly_xtal_stop_calc+0x16c>
    aea2:	429e      	cmp	r6, r3
    aea4:	d21a      	bcs.n	aedc <mayfly_xtal_stop_calc+0x16c>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    aea6:	1b9b      	subs	r3, r3, r6
			ticker_status =
    aea8:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    aeaa:	b29b      	uxth	r3, r3
			ticker_status =
    aeac:	493b      	ldr	r1, [pc, #236]	; (af9c <mayfly_xtal_stop_calc+0x22c>)
    aeae:	9105      	str	r1, [sp, #20]
    aeb0:	9302      	str	r3, [sp, #8]
    aeb2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    aeb6:	9506      	str	r5, [sp, #24]
    aeb8:	9004      	str	r0, [sp, #16]
    aeba:	9003      	str	r0, [sp, #12]
    aebc:	9001      	str	r0, [sp, #4]
    aebe:	9000      	str	r0, [sp, #0]
    aec0:	2101      	movs	r1, #1
    aec2:	f7fc fbe9 	bl	7698 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    aec6:	f030 0302 	bics.w	r3, r0, #2
    aeca:	d007      	beq.n	aedc <mayfly_xtal_stop_calc+0x16c>
    aecc:	4b2c      	ldr	r3, [pc, #176]	; (af80 <mayfly_xtal_stop_calc+0x210>)
    aece:	9301      	str	r3, [sp, #4]
    aed0:	9300      	str	r3, [sp, #0]
    aed2:	4a2c      	ldr	r2, [pc, #176]	; (af84 <mayfly_xtal_stop_calc+0x214>)
    aed4:	4b2c      	ldr	r3, [pc, #176]	; (af88 <mayfly_xtal_stop_calc+0x218>)
    aed6:	492d      	ldr	r1, [pc, #180]	; (af8c <mayfly_xtal_stop_calc+0x21c>)
    aed8:	4831      	ldr	r0, [pc, #196]	; (afa0 <mayfly_xtal_stop_calc+0x230>)
    aeda:	e76e      	b.n	adba <mayfly_xtal_stop_calc+0x4a>
		if (!conn_curr || !conn_next) {
    aedc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    aede:	2e00      	cmp	r6, #0
    aee0:	d092      	beq.n	ae08 <mayfly_xtal_stop_calc+0x98>
    aee2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    aee4:	2d00      	cmp	r5, #0
    aee6:	d08f      	beq.n	ae08 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    aee8:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    aeea:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    aeec:	429a      	cmp	r2, r3
    aeee:	d18b      	bne.n	ae08 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    aef0:	482c      	ldr	r0, [pc, #176]	; (afa4 <mayfly_xtal_stop_calc+0x234>)
    aef2:	b292      	uxth	r2, r2
    aef4:	fba2 0100 	umull	r0, r1, r2, r0
    aef8:	f240 1323 	movw	r3, #291	; 0x123
    aefc:	fb03 1102 	mla	r1, r3, r2, r1
    af00:	a31b      	add	r3, pc, #108	; (adr r3, af70 <mayfly_xtal_stop_calc+0x200>)
    af02:	e9d3 2300 	ldrd	r2, r3, [r3]
    af06:	f7f5 f985 	bl	214 <__aeabi_uldivmod>
    af0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    af10:	2200      	movs	r2, #0
    af12:	4298      	cmp	r0, r3
    af14:	d318      	bcc.n	af48 <mayfly_xtal_stop_calc+0x1d8>
    af16:	b102      	cbz	r2, af1a <mayfly_xtal_stop_calc+0x1aa>
    af18:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    af1a:	f996 201d 	ldrsb.w	r2, [r6, #29]
    af1e:	2a00      	cmp	r2, #0
    af20:	f995 201d 	ldrsb.w	r2, [r5, #29]
    af24:	da13      	bge.n	af4e <mayfly_xtal_stop_calc+0x1de>
    af26:	2a00      	cmp	r2, #0
    af28:	f6ff af6e 	blt.w	ae08 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
    af2c:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    af2e:	429c      	cmp	r4, r3
    af30:	f67f af6a 	bls.w	ae08 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
    af34:	4630      	mov	r0, r6
    af36:	f7fe fafd 	bl	9534 <conn_update_req>
				if (status == 2) {
    af3a:	2802      	cmp	r0, #2
    af3c:	f47f af64 	bne.w	ae08 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
    af40:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    af42:	f7fe faf7 	bl	9534 <conn_update_req>
    af46:	e75f      	b.n	ae08 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
    af48:	1a1b      	subs	r3, r3, r0
    af4a:	2201      	movs	r2, #1
    af4c:	e7e1      	b.n	af12 <mayfly_xtal_stop_calc+0x1a2>
			} else if (!conn_curr->role && conn_next->role &&
    af4e:	2a00      	cmp	r2, #0
    af50:	f6bf af5a 	bge.w	ae08 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
    af54:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    af56:	429c      	cmp	r4, r3
    af58:	f67f af56 	bls.w	ae08 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
    af5c:	4628      	mov	r0, r5
    af5e:	f7fe fae9 	bl	9534 <conn_update_req>
				if (status == 2) {
    af62:	2802      	cmp	r0, #2
    af64:	f47f af50 	bne.w	ae08 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
    af68:	980a      	ldr	r0, [sp, #40]	; 0x28
    af6a:	e7ea      	b.n	af42 <mayfly_xtal_stop_calc+0x1d2>
    af6c:	f3af 8000 	nop.w
    af70:	1afd498d 	.word	0x1afd498d
    af74:	00000007 	.word	0x00000007
    af78:	00009491 	.word	0x00009491
    af7c:	200008c0 	.word	0x200008c0
    af80:	000142a9 	.word	0x000142a9
    af84:	00014ff8 	.word	0x00014ff8
    af88:	000162b7 	.word	0x000162b7
    af8c:	00015047 	.word	0x00015047
    af90:	0001702c 	.word	0x0001702c
    af94:	00016cd0 	.word	0x00016cd0
    af98:	00016cfa 	.word	0x00016cfa
    af9c:	00009495 	.word	0x00009495
    afa0:	0001656d 	.word	0x0001656d
    afa4:	09ce5400 	.word	0x09ce5400

0000afa8 <preempt_calc>:
{
    afa8:	b570      	push	{r4, r5, r6, lr}
    afaa:	4614      	mov	r4, r2
    afac:	460e      	mov	r6, r1
    afae:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    afb0:	f7fc fc90 	bl	78d4 <ticker_ticks_now_get>
	u32_t diff =
    afb4:	4621      	mov	r1, r4
    afb6:	f7fc fc8f 	bl	78d8 <ticker_ticks_diff_get>
	diff += 3;
    afba:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    afbc:	2c09      	cmp	r4, #9
    afbe:	d90f      	bls.n	afe0 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    afc0:	2100      	movs	r1, #0
    afc2:	4608      	mov	r0, r1
    afc4:	f7fe fdb0 	bl	9b28 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    afc8:	4632      	mov	r2, r6
    afca:	2100      	movs	r1, #0
    afcc:	4628      	mov	r0, r5
    afce:	f7ff fe93 	bl	acf8 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    afd2:	68ab      	ldr	r3, [r5, #8]
    afd4:	441c      	add	r4, r3
		if (diff <
    afd6:	2c26      	cmp	r4, #38	; 0x26
    afd8:	d800      	bhi.n	afdc <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    afda:	60ac      	str	r4, [r5, #8]
		return 1;
    afdc:	2001      	movs	r0, #1
}
    afde:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    afe0:	2000      	movs	r0, #0
    afe2:	bd70      	pop	{r4, r5, r6, pc}

0000afe4 <adv_scan_configure.constprop.30>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    afe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    afe6:	ad02      	add	r5, sp, #8
    afe8:	4b10      	ldr	r3, [pc, #64]	; (b02c <adv_scan_configure.constprop.30+0x48>)
    afea:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    afee:	4604      	mov	r4, r0
	radio_reset();
    aff0:	f006 fdc0 	bl	11b74 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    aff4:	2000      	movs	r0, #0
    aff6:	f006 fde7 	bl	11bc8 <radio_tx_power_set>
	radio_isr_set(isr);
    affa:	480d      	ldr	r0, [pc, #52]	; (b030 <adv_scan_configure.constprop.30+0x4c>)
    affc:	f006 fd84 	bl	11b08 <radio_isr_set>
	radio_phy_set(phy, flags);
    b000:	2101      	movs	r1, #1
    b002:	4620      	mov	r0, r4
    b004:	f006 fdd0 	bl	11ba8 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    b008:	4628      	mov	r0, r5
    b00a:	f006 fdfb 	bl	11c04 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    b00e:	0062      	lsls	r2, r4, #1
    b010:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b014:	2125      	movs	r1, #37	; 0x25
    b016:	2008      	movs	r0, #8
    b018:	f006 fe0c 	bl	11c34 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    b01c:	4905      	ldr	r1, [pc, #20]	; (b034 <adv_scan_configure.constprop.30+0x50>)
    b01e:	f240 605b 	movw	r0, #1627	; 0x65b
    b022:	f006 fe97 	bl	11d54 <radio_crc_configure>
}
    b026:	b003      	add	sp, #12
    b028:	bd30      	pop	{r4, r5, pc}
    b02a:	bf00      	nop
    b02c:	8e89bed6 	.word	0x8e89bed6
    b030:	0000df91 	.word	0x0000df91
    b034:	00555555 	.word	0x00555555

0000b038 <event_scan>:
{
    b038:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    b03a:	4b62      	ldr	r3, [pc, #392]	; (b1c4 <event_scan+0x18c>)
    b03c:	7cda      	ldrb	r2, [r3, #19]
{
    b03e:	b08d      	sub	sp, #52	; 0x34
    b040:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    b042:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    b046:	461c      	mov	r4, r3
    b048:	b172      	cbz	r2, b068 <event_scan+0x30>
    b04a:	4b5f      	ldr	r3, [pc, #380]	; (b1c8 <event_scan+0x190>)
    b04c:	9301      	str	r3, [sp, #4]
    b04e:	9300      	str	r3, [sp, #0]
    b050:	4a5e      	ldr	r2, [pc, #376]	; (b1cc <event_scan+0x194>)
    b052:	4b5f      	ldr	r3, [pc, #380]	; (b1d0 <event_scan+0x198>)
    b054:	495f      	ldr	r1, [pc, #380]	; (b1d4 <event_scan+0x19c>)
    b056:	4860      	ldr	r0, [pc, #384]	; (b1d8 <event_scan+0x1a0>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    b058:	f7f5 ff98 	bl	f8c <printk>
    b05c:	4040      	eors	r0, r0
    b05e:	f380 8811 	msr	BASEPRI, r0
    b062:	f04f 0004 	mov.w	r0, #4
    b066:	df02      	svc	2
    b068:	7c1b      	ldrb	r3, [r3, #16]
    b06a:	b2db      	uxtb	r3, r3
    b06c:	2b06      	cmp	r3, #6
    b06e:	d007      	beq.n	b080 <event_scan+0x48>
    b070:	4b55      	ldr	r3, [pc, #340]	; (b1c8 <event_scan+0x190>)
    b072:	9301      	str	r3, [sp, #4]
    b074:	9300      	str	r3, [sp, #0]
    b076:	4a55      	ldr	r2, [pc, #340]	; (b1cc <event_scan+0x194>)
    b078:	4b55      	ldr	r3, [pc, #340]	; (b1d0 <event_scan+0x198>)
    b07a:	4956      	ldr	r1, [pc, #344]	; (b1d4 <event_scan+0x19c>)
    b07c:	4857      	ldr	r0, [pc, #348]	; (b1dc <event_scan+0x1a4>)
    b07e:	e7eb      	b.n	b058 <event_scan+0x20>
	_radio.role = ROLE_SCAN;
    b080:	2202      	movs	r2, #2
    b082:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    b084:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    b086:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b088:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    b08c:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    b08e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    b092:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    b094:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b098:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    b09c:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    b09e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b0a2:	f7ff ff9f 	bl	afe4 <adv_scan_configure.constprop.30>
	chan_set(37 + _radio.scanner.chan++);
    b0a6:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b0aa:	f3c3 0081 	ubfx	r0, r3, #2, #2
    b0ae:	1c42      	adds	r2, r0, #1
    b0b0:	f362 0383 	bfi	r3, r2, #2, #2
    b0b4:	3025      	adds	r0, #37	; 0x25
    b0b6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    b0ba:	f7ff fcc3 	bl	aa44 <chan_set>
	if (_radio.scanner.chan == 3) {
    b0be:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b0c2:	f003 020c 	and.w	r2, r3, #12
    b0c6:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    b0c8:	bf08      	it	eq
    b0ca:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    b0ce:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    b0d2:	bf08      	it	eq
    b0d4:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    b0d8:	f006 fef6 	bl	11ec8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    b0dc:	2300      	movs	r3, #0
    b0de:	4619      	mov	r1, r3
    b0e0:	461a      	mov	r2, r3
    b0e2:	4618      	mov	r0, r3
    b0e4:	f006 fe60 	bl	11da8 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    b0e8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    b0ec:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    b0f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b0f4:	3008      	adds	r0, #8
    b0f6:	f006 fdcb 	bl	11c90 <radio_pkt_rx_set>
	radio_rssi_measure();
    b0fa:	f006 fe6d 	bl	11dd8 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    b0fe:	f006 f909 	bl	11314 <ctrl_rl_enabled>
    b102:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    b106:	b340      	cbz	r0, b15a <event_scan+0x122>
		struct ll_filter *filter =
    b108:	f3c3 1000 	ubfx	r0, r3, #4, #1
    b10c:	f005 ff22 	bl	10f54 <ctrl_filter_get>
    b110:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    b112:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    b116:	f005 fe4d 	bl	10db4 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    b11a:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    b11c:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    b11e:	1cb2      	adds	r2, r6, #2
    b120:	7830      	ldrb	r0, [r6, #0]
    b122:	f006 fe7b 	bl	11e1c <radio_filter_configure>
		radio_ar_configure(count, irks);
    b126:	4639      	mov	r1, r7
    b128:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    b12c:	f007 f850 	bl	121d0 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    b130:	68e2      	ldr	r2, [r4, #12]
    b132:	f105 0109 	add.w	r1, r5, #9
    b136:	2000      	movs	r0, #0
    b138:	f006 fed2 	bl	11ee0 <radio_tmr_start>
	radio_tmr_end_capture();
    b13c:	f006 ffa0 	bl	12080 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    b140:	2106      	movs	r1, #6
    b142:	462a      	mov	r2, r5
    b144:	4826      	ldr	r0, [pc, #152]	; (b1e0 <event_scan+0x1a8>)
    b146:	f7ff ff2f 	bl	afa8 <preempt_calc>
    b14a:	4601      	mov	r1, r0
    b14c:	b188      	cbz	r0, b172 <event_scan+0x13a>
		_radio.state = STATE_STOP;
    b14e:	2304      	movs	r3, #4
    b150:	7523      	strb	r3, [r4, #20]
		radio_disable();
    b152:	f006 fdc3 	bl	11cdc <radio_disable>
}
    b156:	b00d      	add	sp, #52	; 0x34
    b158:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    b15a:	f013 0f30 	tst.w	r3, #48	; 0x30
    b15e:	d0e7      	beq.n	b130 <event_scan+0xf8>
		struct ll_filter *wl = ctrl_filter_get(true);
    b160:	2001      	movs	r0, #1
    b162:	f005 fef7 	bl	10f54 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    b166:	1c82      	adds	r2, r0, #2
    b168:	7841      	ldrb	r1, [r0, #1]
    b16a:	7800      	ldrb	r0, [r0, #0]
    b16c:	f006 fe56 	bl	11e1c <radio_filter_configure>
    b170:	e7de      	b.n	b130 <event_scan+0xf8>
		ret = ticker_start(
    b172:	f641 1336 	movw	r3, #6454	; 0x1936
    b176:	9308      	str	r3, [sp, #32]
    b178:	4b1a      	ldr	r3, [pc, #104]	; (b1e4 <event_scan+0x1ac>)
    b17a:	9307      	str	r3, [sp, #28]
    b17c:	2204      	movs	r2, #4
    b17e:	4b1a      	ldr	r3, [pc, #104]	; (b1e8 <event_scan+0x1b0>)
    b180:	9206      	str	r2, [sp, #24]
    b182:	9305      	str	r3, [sp, #20]
    b184:	9004      	str	r0, [sp, #16]
    b186:	9003      	str	r0, [sp, #12]
    b188:	9002      	str	r0, [sp, #8]
    b18a:	9001      	str	r0, [sp, #4]
    b18c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    b190:	3309      	adds	r3, #9
    b192:	9300      	str	r3, [sp, #0]
    b194:	462b      	mov	r3, r5
    b196:	f7fc fa2f 	bl	75f8 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b19a:	f030 0302 	bics.w	r3, r0, #2
    b19e:	d007      	beq.n	b1b0 <event_scan+0x178>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b1a0:	4b09      	ldr	r3, [pc, #36]	; (b1c8 <event_scan+0x190>)
    b1a2:	9301      	str	r3, [sp, #4]
    b1a4:	9300      	str	r3, [sp, #0]
    b1a6:	4a09      	ldr	r2, [pc, #36]	; (b1cc <event_scan+0x194>)
    b1a8:	4b09      	ldr	r3, [pc, #36]	; (b1d0 <event_scan+0x198>)
    b1aa:	490a      	ldr	r1, [pc, #40]	; (b1d4 <event_scan+0x19c>)
    b1ac:	480f      	ldr	r0, [pc, #60]	; (b1ec <event_scan+0x1b4>)
    b1ae:	e753      	b.n	b058 <event_scan+0x20>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b1b0:	4619      	mov	r1, r3
    b1b2:	4618      	mov	r0, r3
    b1b4:	4a0e      	ldr	r2, [pc, #56]	; (b1f0 <event_scan+0x1b8>)
    b1b6:	f7fc fb3b 	bl	7830 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b1ba:	f030 0302 	bics.w	r3, r0, #2
    b1be:	d1ef      	bne.n	b1a0 <event_scan+0x168>
    b1c0:	e7c9      	b.n	b156 <event_scan+0x11e>
    b1c2:	bf00      	nop
    b1c4:	200008c0 	.word	0x200008c0
    b1c8:	000142a9 	.word	0x000142a9
    b1cc:	00014ff8 	.word	0x00014ff8
    b1d0:	00016386 	.word	0x00016386
    b1d4:	00015047 	.word	0x00015047
    b1d8:	00016689 	.word	0x00016689
    b1dc:	000166c3 	.word	0x000166c3
    b1e0:	20000990 	.word	0x20000990
    b1e4:	0000a3fd 	.word	0x0000a3fd
    b1e8:	0000a66d 	.word	0x0000a66d
    b1ec:	00016702 	.word	0x00016702
    b1f0:	0000a5e5 	.word	0x0000a5e5

0000b1f4 <event_stop.constprop.31>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    b1f4:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    b1f6:	4b05      	ldr	r3, [pc, #20]	; (b20c <event_stop.constprop.31+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b1f8:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    b1fa:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b1fc:	4611      	mov	r1, r2
    b1fe:	4610      	mov	r0, r2
    b200:	f7fb fc3c 	bl	6a7c <mayfly_enqueue>
	LL_ASSERT(!retval);
    b204:	b108      	cbz	r0, b20a <event_stop.constprop.31+0x16>
    b206:	f7ff fa17 	bl	a638 <event_stop.part.10>
    b20a:	bd08      	pop	{r3, pc}
    b20c:	20003d68 	.word	0x20003d68

0000b210 <event_common_prepare>:
{
    b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    b214:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    b216:	681d      	ldr	r5, [r3, #0]
{
    b218:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b21a:	2c00      	cmp	r4, #0
{
    b21c:	4681      	mov	r9, r0
    b21e:	910b      	str	r1, [sp, #44]	; 0x2c
    b220:	4690      	mov	r8, r2
    b222:	469b      	mov	fp, r3
    b224:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b228:	da03      	bge.n	b232 <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    b22a:	9c16      	ldr	r4, [sp, #88]	; 0x58
    b22c:	42ac      	cmp	r4, r5
    b22e:	bf38      	it	cc
    b230:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    b232:	42ac      	cmp	r4, r5
    b234:	4f56      	ldr	r7, [pc, #344]	; (b390 <event_common_prepare+0x180>)
    b236:	d924      	bls.n	b282 <event_common_prepare+0x72>
		ticker_status =
    b238:	f241 5374 	movw	r3, #5492	; 0x1574
    b23c:	9308      	str	r3, [sp, #32]
    b23e:	4b55      	ldr	r3, [pc, #340]	; (b394 <event_common_prepare+0x184>)
    b240:	9305      	str	r3, [sp, #20]
    b242:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    b244:	1b63      	subs	r3, r4, r5
		ticker_status =
    b246:	9300      	str	r3, [sp, #0]
    b248:	9707      	str	r7, [sp, #28]
    b24a:	464b      	mov	r3, r9
    b24c:	9106      	str	r1, [sp, #24]
    b24e:	9104      	str	r1, [sp, #16]
    b250:	9103      	str	r1, [sp, #12]
    b252:	9102      	str	r1, [sp, #8]
    b254:	9101      	str	r1, [sp, #4]
    b256:	2201      	movs	r2, #1
    b258:	4608      	mov	r0, r1
    b25a:	f7fc f9cd 	bl	75f8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b25e:	f030 0302 	bics.w	r3, r0, #2
    b262:	d034      	beq.n	b2ce <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b264:	4b4c      	ldr	r3, [pc, #304]	; (b398 <event_common_prepare+0x188>)
    b266:	9301      	str	r3, [sp, #4]
    b268:	9300      	str	r3, [sp, #0]
    b26a:	4a4c      	ldr	r2, [pc, #304]	; (b39c <event_common_prepare+0x18c>)
    b26c:	4b4c      	ldr	r3, [pc, #304]	; (b3a0 <event_common_prepare+0x190>)
    b26e:	494d      	ldr	r1, [pc, #308]	; (b3a4 <event_common_prepare+0x194>)
    b270:	484d      	ldr	r0, [pc, #308]	; (b3a8 <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
    b272:	f7f5 fe8b 	bl	f8c <printk>
    b276:	4040      	eors	r0, r0
    b278:	f380 8811 	msr	BASEPRI, r0
    b27c:	f04f 0004 	mov.w	r0, #4
    b280:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    b282:	d21d      	bcs.n	b2c0 <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
    b284:	2300      	movs	r3, #0
    b286:	461a      	mov	r2, r3
    b288:	4619      	mov	r1, r3
    b28a:	4618      	mov	r0, r3
    b28c:	f7ff f9fe 	bl	a68c <event_active>
		ticker_status =
    b290:	f241 5389 	movw	r3, #5513	; 0x1589
    b294:	2100      	movs	r1, #0
    b296:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    b298:	1b2c      	subs	r4, r5, r4
		ticker_status =
    b29a:	4b44      	ldr	r3, [pc, #272]	; (b3ac <event_common_prepare+0x19c>)
    b29c:	9305      	str	r3, [sp, #20]
    b29e:	9707      	str	r7, [sp, #28]
    b2a0:	464b      	mov	r3, r9
    b2a2:	9106      	str	r1, [sp, #24]
    b2a4:	9104      	str	r1, [sp, #16]
    b2a6:	9103      	str	r1, [sp, #12]
    b2a8:	9102      	str	r1, [sp, #8]
    b2aa:	9101      	str	r1, [sp, #4]
    b2ac:	9400      	str	r4, [sp, #0]
    b2ae:	2201      	movs	r2, #1
    b2b0:	4608      	mov	r0, r1
    b2b2:	f7fc f9a1 	bl	75f8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b2b6:	f030 0302 	bics.w	r3, r0, #2
    b2ba:	d1d3      	bne.n	b264 <event_common_prepare+0x54>
    b2bc:	462c      	mov	r4, r5
    b2be:	e00b      	b.n	b2d8 <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
    b2c0:	2300      	movs	r3, #0
    b2c2:	461a      	mov	r2, r3
    b2c4:	4619      	mov	r1, r3
    b2c6:	4618      	mov	r0, r3
    b2c8:	f7ff f9e0 	bl	a68c <event_active>
		event_xtal(0, 0, 0, NULL);
    b2cc:	2300      	movs	r3, #0
    b2ce:	461a      	mov	r2, r3
    b2d0:	4619      	mov	r1, r3
    b2d2:	4618      	mov	r0, r3
    b2d4:	f7ff fa00 	bl	a6d8 <event_xtal>
	_radio.remainder_anchor = remainder;
    b2d8:	4e35      	ldr	r6, [pc, #212]	; (b3b0 <event_common_prepare+0x1a0>)
    b2da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b2dc:	60f3      	str	r3, [r6, #12]
	ticker_status =
    b2de:	f241 53a1 	movw	r3, #5537	; 0x15a1
    b2e2:	9308      	str	r3, [sp, #32]
    b2e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b2e6:	9306      	str	r3, [sp, #24]
    b2e8:	2200      	movs	r2, #0
    b2ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b2ec:	9305      	str	r3, [sp, #20]
    b2ee:	9707      	str	r7, [sp, #28]
    b2f0:	464b      	mov	r3, r9
    b2f2:	9204      	str	r2, [sp, #16]
    b2f4:	9203      	str	r2, [sp, #12]
    b2f6:	9202      	str	r2, [sp, #8]
    b2f8:	9201      	str	r2, [sp, #4]
    b2fa:	9400      	str	r4, [sp, #0]
    b2fc:	4611      	mov	r1, r2
    b2fe:	4610      	mov	r0, r2
    b300:	f7fc f97a 	bl	75f8 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b304:	f030 0302 	bics.w	r3, r0, #2
    b308:	d1ac      	bne.n	b264 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    b30a:	2005      	movs	r0, #5
    b30c:	f7ff ff72 	bl	b1f4 <event_stop.constprop.31>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    b310:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    b314:	429d      	cmp	r5, r3
    b316:	d023      	beq.n	b360 <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    b318:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b31c:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    b320:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b322:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    b324:	bfbc      	itt	lt
    b326:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    b32a:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    b32e:	f8d8 2000 	ldr.w	r2, [r8]
    b332:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    b336:	428a      	cmp	r2, r1
    b338:	bf38      	it	cc
    b33a:	460a      	movcc	r2, r1
		ticker_status =
    b33c:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b340:	b2a3      	uxth	r3, r4
    b342:	b292      	uxth	r2, r2
		ticker_status =
    b344:	9106      	str	r1, [sp, #24]
    b346:	2100      	movs	r1, #0
    b348:	9302      	str	r3, [sp, #8]
    b34a:	9201      	str	r2, [sp, #4]
    b34c:	9200      	str	r2, [sp, #0]
    b34e:	9104      	str	r1, [sp, #16]
    b350:	9103      	str	r1, [sp, #12]
    b352:	4652      	mov	r2, sl
    b354:	4608      	mov	r0, r1
    b356:	f7fc f99f 	bl	7698 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b35a:	f030 0302 	bics.w	r3, r0, #2
    b35e:	d181      	bne.n	b264 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    b360:	20ff      	movs	r0, #255	; 0xff
    b362:	f7ff fa85 	bl	a870 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    b366:	4b13      	ldr	r3, [pc, #76]	; (b3b4 <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b368:	2201      	movs	r2, #1
    b36a:	4611      	mov	r1, r2
    b36c:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    b36e:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b372:	f7fb fb83 	bl	6a7c <mayfly_enqueue>
		LL_ASSERT(!retval);
    b376:	b138      	cbz	r0, b388 <event_common_prepare+0x178>
    b378:	4b07      	ldr	r3, [pc, #28]	; (b398 <event_common_prepare+0x188>)
    b37a:	9301      	str	r3, [sp, #4]
    b37c:	9300      	str	r3, [sp, #0]
    b37e:	4a07      	ldr	r2, [pc, #28]	; (b39c <event_common_prepare+0x18c>)
    b380:	4b07      	ldr	r3, [pc, #28]	; (b3a0 <event_common_prepare+0x190>)
    b382:	4908      	ldr	r1, [pc, #32]	; (b3a4 <event_common_prepare+0x194>)
    b384:	480c      	ldr	r0, [pc, #48]	; (b3b8 <event_common_prepare+0x1a8>)
    b386:	e774      	b.n	b272 <event_common_prepare+0x62>
}
    b388:	b00d      	add	sp, #52	; 0x34
    b38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b38e:	bf00      	nop
    b390:	0000a3fd 	.word	0x0000a3fd
    b394:	0000a68d 	.word	0x0000a68d
    b398:	000142a9 	.word	0x000142a9
    b39c:	00014ff8 	.word	0x00014ff8
    b3a0:	00016345 	.word	0x00016345
    b3a4:	00015047 	.word	0x00015047
    b3a8:	0001656d 	.word	0x0001656d
    b3ac:	0000a6d9 	.word	0x0000a6d9
    b3b0:	200008c0 	.word	0x200008c0
    b3b4:	20003e08 	.word	0x20003e08
    b3b8:	00016ca7 	.word	0x00016ca7

0000b3bc <event_scan_prepare>:
{
    b3bc:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    b3be:	4c25      	ldr	r4, [pc, #148]	; (b454 <event_scan_prepare+0x98>)
    b3c0:	7c23      	ldrb	r3, [r4, #16]
{
    b3c2:	b085      	sub	sp, #20
    b3c4:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    b3c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    b3ca:	b173      	cbz	r3, b3ea <event_scan_prepare+0x2e>
    b3cc:	4b22      	ldr	r3, [pc, #136]	; (b458 <event_scan_prepare+0x9c>)
    b3ce:	9301      	str	r3, [sp, #4]
    b3d0:	9300      	str	r3, [sp, #0]
    b3d2:	4a22      	ldr	r2, [pc, #136]	; (b45c <event_scan_prepare+0xa0>)
    b3d4:	4b22      	ldr	r3, [pc, #136]	; (b460 <event_scan_prepare+0xa4>)
    b3d6:	4923      	ldr	r1, [pc, #140]	; (b464 <event_scan_prepare+0xa8>)
    b3d8:	4823      	ldr	r0, [pc, #140]	; (b468 <event_scan_prepare+0xac>)
		LL_ASSERT(!retval);
    b3da:	f7f5 fdd7 	bl	f8c <printk>
    b3de:	4040      	eors	r0, r0
    b3e0:	f380 8811 	msr	BASEPRI, r0
    b3e4:	f04f 0004 	mov.w	r0, #4
    b3e8:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    b3ea:	2306      	movs	r3, #6
    b3ec:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    b3ee:	9203      	str	r2, [sp, #12]
    b3f0:	9301      	str	r3, [sp, #4]
    b3f2:	4a1e      	ldr	r2, [pc, #120]	; (b46c <event_scan_prepare+0xb0>)
    b3f4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    b3f8:	9202      	str	r2, [sp, #8]
    b3fa:	9300      	str	r3, [sp, #0]
    b3fc:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    b400:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    b404:	f7ff ff04 	bl	b210 <event_common_prepare>
	if (_radio.scanner.conn) {
    b408:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    b40c:	b303      	cbz	r3, b450 <event_scan_prepare+0x94>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    b40e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    b412:	2b00      	cmp	r3, #0
    b414:	da0c      	bge.n	b430 <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
    b416:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    b41a:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    b41e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    b422:	4291      	cmp	r1, r2
    b424:	bf2c      	ite	cs
    b426:	ebc3 0301 	rsbcs	r3, r3, r1
    b42a:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    b42e:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    b430:	4b0f      	ldr	r3, [pc, #60]	; (b470 <event_scan_prepare+0xb4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b432:	2201      	movs	r2, #1
    b434:	4611      	mov	r1, r2
    b436:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    b438:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b43a:	f7fb fb1f 	bl	6a7c <mayfly_enqueue>
		LL_ASSERT(!retval);
    b43e:	b138      	cbz	r0, b450 <event_scan_prepare+0x94>
    b440:	4b05      	ldr	r3, [pc, #20]	; (b458 <event_scan_prepare+0x9c>)
    b442:	9301      	str	r3, [sp, #4]
    b444:	9300      	str	r3, [sp, #0]
    b446:	4a05      	ldr	r2, [pc, #20]	; (b45c <event_scan_prepare+0xa0>)
    b448:	4b05      	ldr	r3, [pc, #20]	; (b460 <event_scan_prepare+0xa4>)
    b44a:	4906      	ldr	r1, [pc, #24]	; (b464 <event_scan_prepare+0xa8>)
    b44c:	4809      	ldr	r0, [pc, #36]	; (b474 <event_scan_prepare+0xb8>)
    b44e:	e7c4      	b.n	b3da <event_scan_prepare+0x1e>
}
    b450:	b005      	add	sp, #20
    b452:	bd30      	pop	{r4, r5, pc}
    b454:	200008c0 	.word	0x200008c0
    b458:	000142a9 	.word	0x000142a9
    b45c:	00014ff8 	.word	0x00014ff8
    b460:	00016373 	.word	0x00016373
    b464:	00015047 	.word	0x00015047
    b468:	00016de3 	.word	0x00016de3
    b46c:	0000b039 	.word	0x0000b039
    b470:	20003d88 	.word	0x20003d88
    b474:	00016ca7 	.word	0x00016ca7

0000b478 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    b478:	4b02      	ldr	r3, [pc, #8]	; (b484 <mayfly_xtal_start+0xc>)
    b47a:	6818      	ldr	r0, [r3, #0]
    b47c:	6843      	ldr	r3, [r0, #4]
    b47e:	2100      	movs	r1, #0
    b480:	681b      	ldr	r3, [r3, #0]
    b482:	4718      	bx	r3
    b484:	200008c0 	.word	0x200008c0

0000b488 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    b488:	4b02      	ldr	r3, [pc, #8]	; (b494 <mayfly_xtal_stop+0xc>)
    b48a:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    b48c:	6843      	ldr	r3, [r0, #4]
    b48e:	2100      	movs	r1, #0
    b490:	685b      	ldr	r3, [r3, #4]
    b492:	4718      	bx	r3
    b494:	200008c0 	.word	0x200008c0

0000b498 <chan_sel_2>:
{
    b498:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    b49a:	4048      	eors	r0, r1
    b49c:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b49e:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    b4a2:	2608      	movs	r6, #8
	o = 0;
    b4a4:	2400      	movs	r4, #0
		o |= (i & 1);
    b4a6:	f00e 0501 	and.w	r5, lr, #1
    b4aa:	3e01      	subs	r6, #1
    b4ac:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    b4b0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    b4b4:	b2ec      	uxtb	r4, r5
		i >>= 1;
    b4b6:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    b4ba:	d1f4      	bne.n	b4a6 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b4bc:	0225      	lsls	r5, r4, #8
    b4be:	b22d      	sxth	r5, r5
    b4c0:	b2c0      	uxtb	r0, r0
    b4c2:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    b4c6:	4634      	mov	r4, r6
		o |= (i & 1);
    b4c8:	f000 0601 	and.w	r6, r0, #1
    b4cc:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    b4d0:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    b4d4:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    b4d8:	b2e4      	uxtb	r4, r4
		i >>= 1;
    b4da:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    b4de:	d1f3      	bne.n	b4c8 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b4e0:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    b4e2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    b4e6:	3f01      	subs	r7, #1
    b4e8:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    b4ea:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    b4ee:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    b4f0:	d1d5      	bne.n	b49e <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    b4f2:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    b4f4:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    b4f6:	fbb1 f0f4 	udiv	r0, r1, r4
    b4fa:	fb04 1010 	mls	r0, r4, r0, r1
    b4fe:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b500:	08c4      	lsrs	r4, r0, #3
    b502:	f000 0507 	and.w	r5, r0, #7
    b506:	5d14      	ldrb	r4, [r2, r4]
    b508:	412c      	asrs	r4, r5
    b50a:	07e4      	lsls	r4, r4, #31
    b50c:	d407      	bmi.n	b51e <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    b50e:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    b510:	f3c1 4107 	ubfx	r1, r1, #16, #8
    b514:	4610      	mov	r0, r2
}
    b516:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    b51a:	f7fd bfc7 	b.w	94ac <chan_sel_remap>
}
    b51e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b520 <ctrl_tx_enqueue>:
{
    b520:	b510      	push	{r4, lr}
	    !conn->empty &&
    b522:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    b526:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    b52a:	f014 0f80 	tst.w	r4, #128	; 0x80
    b52e:	d118      	bne.n	b562 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    b530:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    b534:	b1ab      	cbz	r3, b562 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    b536:	0724      	lsls	r4, r4, #28
    b538:	d413      	bmi.n	b562 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    b53a:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    b53e:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    b540:	bf04      	itt	eq
    b542:	681c      	ldreq	r4, [r3, #0]
    b544:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    b548:	b992      	cbnz	r2, b570 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    b54a:	681a      	ldr	r2, [r3, #0]
    b54c:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    b54e:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    b550:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    b554:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    b558:	680b      	ldr	r3, [r1, #0]
    b55a:	b90b      	cbnz	r3, b560 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    b55c:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    b560:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    b562:	b92a      	cbnz	r2, b570 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    b564:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    b568:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    b56a:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    b56e:	e7ef      	b.n	b550 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    b570:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    b574:	681a      	ldr	r2, [r3, #0]
    b576:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    b578:	6019      	str	r1, [r3, #0]
    b57a:	e7eb      	b.n	b554 <ctrl_tx_enqueue+0x34>

0000b57c <ctrl_tx_sec_enqueue>:
{
    b57c:	b410      	push	{r4}
	if (conn->pause_tx) {
    b57e:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    b582:	0724      	lsls	r4, r4, #28
{
    b584:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    b586:	d50f      	bpl.n	b5a8 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    b588:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    b58c:	b931      	cbnz	r1, b59c <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    b58e:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    b592:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    b594:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    b598:	bc10      	pop	{r4}
    b59a:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    b59c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    b5a0:	6819      	ldr	r1, [r3, #0]
    b5a2:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    b5a4:	601a      	str	r2, [r3, #0]
    b5a6:	e7f7      	b.n	b598 <ctrl_tx_sec_enqueue+0x1c>
}
    b5a8:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    b5aa:	f7ff bfb9 	b.w	b520 <ctrl_tx_enqueue>
	...

0000b5b0 <feature_rsp_send>:
{
    b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b5b2:	4f21      	ldr	r7, [pc, #132]	; (b638 <feature_rsp_send+0x88>)
{
    b5b4:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b5b6:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    b5ba:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b5bc:	f7fb f993 	bl	68e6 <mem_acquire>
	if (!node_tx) {
    b5c0:	4604      	mov	r4, r0
    b5c2:	b3b0      	cbz	r0, b632 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b5c4:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    b5c6:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    b5c8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b5cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    b5d0:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    b5d4:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    b5d8:	f043 0310 	orr.w	r3, r3, #16
    b5dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    b5e0:	79b1      	ldrb	r1, [r6, #6]
    b5e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    b5e6:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    b5ea:	f3c1 0110 	ubfx	r1, r1, #0, #17
    b5ee:	400b      	ands	r3, r1
    b5f0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    b5f4:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    b5f8:	f043 0320 	orr.w	r3, r3, #32
    b5fc:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b600:	7903      	ldrb	r3, [r0, #4]
    b602:	f043 0303 	orr.w	r3, r3, #3
    b606:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    b608:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    b60a:	2309      	movs	r3, #9
    b60c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    b60e:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    b610:	2100      	movs	r1, #0
    b612:	4410      	add	r0, r2
    b614:	f7f6 fb1e 	bl	1c54 <memset>
		conn->llcp_features & 0xFF;
    b618:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    b61c:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    b61e:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    b620:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    b622:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    b624:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    b626:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    b628:	4621      	mov	r1, r4
    b62a:	f7ff ffa7 	bl	b57c <ctrl_tx_sec_enqueue>
	return 0;
    b62e:	2000      	movs	r0, #0
    b630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    b632:	2001      	movs	r0, #1
}
    b634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b636:	bf00      	nop
    b638:	200008c0 	.word	0x200008c0

0000b63c <start_enc_rsp_send>:
{
    b63c:	b510      	push	{r4, lr}
    b63e:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    b640:	b9c9      	cbnz	r1, b676 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b642:	480f      	ldr	r0, [pc, #60]	; (b680 <start_enc_rsp_send+0x44>)
    b644:	f7fb f94f 	bl	68e6 <mem_acquire>
		if (!node_tx) {
    b648:	b1b8      	cbz	r0, b67a <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    b64a:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    b64c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    b650:	f043 0320 	orr.w	r3, r3, #32
    b654:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b658:	780b      	ldrb	r3, [r1, #0]
    b65a:	f043 0303 	orr.w	r3, r3, #3
    b65e:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    b660:	2301      	movs	r3, #1
    b662:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    b664:	2306      	movs	r3, #6
    b666:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    b668:	b140      	cbz	r0, b67c <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    b66a:	4601      	mov	r1, r0
    b66c:	4620      	mov	r0, r4
    b66e:	f7ff ff57 	bl	b520 <ctrl_tx_enqueue>
	return 0;
    b672:	2000      	movs	r0, #0
    b674:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    b676:	2000      	movs	r0, #0
    b678:	e7e8      	b.n	b64c <start_enc_rsp_send+0x10>
			return 1;
    b67a:	2001      	movs	r0, #1
}
    b67c:	bd10      	pop	{r4, pc}
    b67e:	bf00      	nop
    b680:	20000a1c 	.word	0x20000a1c

0000b684 <reject_ext_ind_send>:
{
    b684:	b570      	push	{r4, r5, r6, lr}
    b686:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b688:	480b      	ldr	r0, [pc, #44]	; (b6b8 <reject_ext_ind_send+0x34>)
{
    b68a:	460e      	mov	r6, r1
    b68c:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b68e:	f7fb f92a 	bl	68e6 <mem_acquire>
	if (!node_tx) {
    b692:	b178      	cbz	r0, b6b4 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b694:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    b696:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b698:	f043 0303 	orr.w	r3, r3, #3
    b69c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    b69e:	2303      	movs	r3, #3
    b6a0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    b6a2:	2311      	movs	r3, #17
    b6a4:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    b6a6:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    b6a8:	4601      	mov	r1, r0
    b6aa:	4620      	mov	r0, r4
    b6ac:	f7ff ff38 	bl	b520 <ctrl_tx_enqueue>
	return 0;
    b6b0:	2000      	movs	r0, #0
    b6b2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    b6b4:	2001      	movs	r0, #1
}
    b6b6:	bd70      	pop	{r4, r5, r6, pc}
    b6b8:	20000a1c 	.word	0x20000a1c
    b6bc:	00000000 	.word	0x00000000

0000b6c0 <event_connection_prepare>:
{
    b6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    b6c4:	4db8      	ldr	r5, [pc, #736]	; (b9a8 <event_connection_prepare+0x2e8>)
{
    b6c6:	b08f      	sub	sp, #60	; 0x3c
    b6c8:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    b6ca:	7c2b      	ldrb	r3, [r5, #16]
{
    b6cc:	910c      	str	r1, [sp, #48]	; 0x30
    b6ce:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    b6d0:	b173      	cbz	r3, b6f0 <event_connection_prepare+0x30>
    b6d2:	4bb6      	ldr	r3, [pc, #728]	; (b9ac <event_connection_prepare+0x2ec>)
    b6d4:	9301      	str	r3, [sp, #4]
    b6d6:	9300      	str	r3, [sp, #0]
    b6d8:	4ab5      	ldr	r2, [pc, #724]	; (b9b0 <event_connection_prepare+0x2f0>)
    b6da:	4bb6      	ldr	r3, [pc, #728]	; (b9b4 <event_connection_prepare+0x2f4>)
    b6dc:	49b6      	ldr	r1, [pc, #728]	; (b9b8 <event_connection_prepare+0x2f8>)
    b6de:	48b7      	ldr	r0, [pc, #732]	; (b9bc <event_connection_prepare+0x2fc>)
		LL_ASSERT(!retval);
    b6e0:	f7f5 fc54 	bl	f8c <printk>
    b6e4:	4040      	eors	r0, r0
    b6e6:	f380 8811 	msr	BASEPRI, r0
    b6ea:	f04f 0004 	mov.w	r0, #4
    b6ee:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    b6f0:	f894 3020 	ldrb.w	r3, [r4, #32]
    b6f4:	3307      	adds	r3, #7
    b6f6:	b2db      	uxtb	r3, r3
    b6f8:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    b6fa:	f994 301d 	ldrsb.w	r3, [r4, #29]
    b6fe:	2b00      	cmp	r3, #0
    b700:	da09      	bge.n	b716 <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    b702:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    b704:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    b706:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    b70a:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    b70c:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    b70e:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    b710:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    b712:	bf88      	it	hi
    b714:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    b716:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    b718:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    b71c:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    b71e:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    b720:	b292      	uxth	r2, r2
    b722:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    b724:	4432      	add	r2, r6
    b726:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    b728:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    b72c:	429a      	cmp	r2, r3
    b72e:	f040 81ba 	bne.w	baa6 <event_connection_prepare+0x3e6>
    b732:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    b736:	075f      	lsls	r7, r3, #29
    b738:	f100 84ab 	bmi.w	c092 <event_connection_prepare+0x9d2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    b73c:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    b740:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    b744:	429a      	cmp	r2, r3
    b746:	f000 8096 	beq.w	b876 <event_connection_prepare+0x1b6>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    b74a:	2005      	movs	r0, #5
    b74c:	f7ff fd52 	bl	b1f4 <event_stop.constprop.31>
	conn_upd = _radio.conn_upd;
    b750:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    b754:	b113      	cbz	r3, b75c <event_connection_prepare+0x9c>
    b756:	429c      	cmp	r4, r3
    b758:	f040 808d 	bne.w	b876 <event_connection_prepare+0x1b6>
	switch (conn->llcp_conn_param.state) {
    b75c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    b760:	f003 0307 	and.w	r3, r3, #7
    b764:	2b05      	cmp	r3, #5
    b766:	f200 815d 	bhi.w	ba24 <event_connection_prepare+0x364>
    b76a:	e8df f013 	tbh	[pc, r3, lsl #1]
    b76e:	0006      	.short	0x0006
    b770:	01310065 	.word	0x01310065
    b774:	00840084 	.word	0x00840084
    b778:	0084      	.short	0x0084
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b77a:	4891      	ldr	r0, [pc, #580]	; (b9c0 <event_connection_prepare+0x300>)
    b77c:	f7fb f8b3 	bl	68e6 <mem_acquire>
	if (!node_tx) {
    b780:	4607      	mov	r7, r0
    b782:	2800      	cmp	r0, #0
    b784:	d077      	beq.n	b876 <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    b786:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    b78a:	2204      	movs	r2, #4
    b78c:	f362 0302 	bfi	r3, r2, #0, #3
    b790:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b794:	7903      	ldrb	r3, [r0, #4]
    b796:	f043 0303 	orr.w	r3, r3, #3
    b79a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    b79c:	2318      	movs	r3, #24
    b79e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    b7a0:	230f      	movs	r3, #15
    b7a2:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    b7a4:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    b7a8:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    b7aa:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    b7ac:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    b7b0:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    b7b2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    b7b6:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    b7b8:	2300      	movs	r3, #0
    b7ba:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    b7bc:	74c3      	strb	r3, [r0, #19]
    b7be:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    b7c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b7c4:	7543      	strb	r3, [r0, #21]
    b7c6:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    b7c8:	75c3      	strb	r3, [r0, #23]
    b7ca:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    b7cc:	7643      	strb	r3, [r0, #25]
    b7ce:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    b7d0:	76c3      	strb	r3, [r0, #27]
    b7d2:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    b7d4:	7743      	strb	r3, [r0, #29]
    b7d6:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    b7d8:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    b7dc:	4601      	mov	r1, r0
    b7de:	4620      	mov	r0, r4
    b7e0:	f7ff fe9e 	bl	b520 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b7e4:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    b7e6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    b7ea:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b7ee:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    b7f0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    b7f4:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b7f8:	da0b      	bge.n	b812 <event_connection_prepare+0x152>
			u32_t ticks_prepare_to_start =
    b7fa:	68a3      	ldr	r3, [r4, #8]
    b7fc:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    b7fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    b802:	428b      	cmp	r3, r1
    b804:	bf2c      	ite	cs
    b806:	4443      	addcs	r3, r8
    b808:	eb08 0301 	addcc.w	r3, r8, r1
    b80c:	1a9b      	subs	r3, r3, r2
    b80e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    b812:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    b814:	4b6b      	ldr	r3, [pc, #428]	; (b9c4 <event_connection_prepare+0x304>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    b816:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b81a:	2201      	movs	r2, #1
    b81c:	4611      	mov	r1, r2
    b81e:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    b820:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b822:	f7fb f92b 	bl	6a7c <mayfly_enqueue>
		LL_ASSERT(!retval);
    b826:	b330      	cbz	r0, b876 <event_connection_prepare+0x1b6>
    b828:	4b60      	ldr	r3, [pc, #384]	; (b9ac <event_connection_prepare+0x2ec>)
    b82a:	9301      	str	r3, [sp, #4]
    b82c:	9300      	str	r3, [sp, #0]
    b82e:	4b66      	ldr	r3, [pc, #408]	; (b9c8 <event_connection_prepare+0x308>)
    b830:	4a5f      	ldr	r2, [pc, #380]	; (b9b0 <event_connection_prepare+0x2f0>)
    b832:	4961      	ldr	r1, [pc, #388]	; (b9b8 <event_connection_prepare+0x2f8>)
    b834:	4865      	ldr	r0, [pc, #404]	; (b9cc <event_connection_prepare+0x30c>)
    b836:	e753      	b.n	b6e0 <event_connection_prepare+0x20>
	if (conn->llcp_conn_param.status) {
    b838:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    b83c:	b397      	cbz	r7, b8a4 <event_connection_prepare+0x1e4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b83e:	4860      	ldr	r0, [pc, #384]	; (b9c0 <event_connection_prepare+0x300>)
    b840:	f7fb f851 	bl	68e6 <mem_acquire>
		if (!node_tx) {
    b844:	4601      	mov	r1, r0
    b846:	b1b0      	cbz	r0, b876 <event_connection_prepare+0x1b6>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    b848:	7903      	ldrb	r3, [r0, #4]
    b84a:	f043 0303 	orr.w	r3, r3, #3
    b84e:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    b850:	2311      	movs	r3, #17
    b852:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    b854:	2303      	movs	r3, #3
    b856:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    b858:	230f      	movs	r3, #15
    b85a:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    b85c:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    b860:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    b862:	4620      	mov	r0, r4
    b864:	f7ff fe5c 	bl	b520 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    b868:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    b86c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    b870:	2300      	movs	r3, #0
    b872:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    b876:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    b87a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    b87e:	429a      	cmp	r2, r3
    b880:	f000 810a 	beq.w	ba98 <event_connection_prepare+0x3d8>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    b884:	2005      	movs	r0, #5
    b886:	f7ff fcb5 	bl	b1f4 <event_stop.constprop.31>
	switch (conn->llcp_phy.state) {
    b88a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    b88e:	f003 0203 	and.w	r2, r3, #3
    b892:	2a03      	cmp	r2, #3
    b894:	f200 8179 	bhi.w	bb8a <event_connection_prepare+0x4ca>
    b898:	e8df f012 	tbh	[pc, r2, lsl #1]
    b89c:	00fe00cc 	.word	0x00fe00cc
    b8a0:	011800fe 	.word	0x011800fe
	if (!conn->role) {
    b8a4:	f994 301d 	ldrsb.w	r3, [r4, #29]
    b8a8:	2b00      	cmp	r3, #0
    b8aa:	db3b      	blt.n	b924 <event_connection_prepare+0x264>
		if (conn->llcp_req != conn->llcp_ack) {
    b8ac:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    b8b0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    b8b4:	428b      	cmp	r3, r1
    b8b6:	d1de      	bne.n	b876 <event_connection_prepare+0x1b6>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    b8b8:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    b8bc:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    b8c0:	2205      	movs	r2, #5
    b8c2:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    b8c6:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    b8ca:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    b8ce:	2301      	movs	r3, #1
    b8d0:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    b8d4:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    b8d8:	b122      	cbz	r2, b8e4 <event_connection_prepare+0x224>
				((conn->llcp_conn_param.interval /
    b8da:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    b8de:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    b8e0:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    b8e4:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    b8e8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    b8ec:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    b8f0:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    b8f4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    b8f8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    b8fc:	2202      	movs	r2, #2
    b8fe:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    b902:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    b906:	f082 0208 	eor.w	r2, r2, #8
    b90a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    b90e:	f362 0382 	bfi	r3, r2, #2, #1
    b912:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    b916:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    b918:	2301      	movs	r3, #1
    b91a:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    b91e:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    b922:	e7a8      	b.n	b876 <event_connection_prepare+0x1b6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b924:	4826      	ldr	r0, [pc, #152]	; (b9c0 <event_connection_prepare+0x300>)
    b926:	f7fa ffde 	bl	68e6 <mem_acquire>
	if (!node_tx) {
    b92a:	4601      	mov	r1, r0
    b92c:	2800      	cmp	r0, #0
    b92e:	d0a2      	beq.n	b876 <event_connection_prepare+0x1b6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    b930:	7903      	ldrb	r3, [r0, #4]
    b932:	f043 0303 	orr.w	r3, r3, #3
    b936:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    b938:	2318      	movs	r3, #24
    b93a:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    b93c:	2310      	movs	r3, #16
    b93e:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    b940:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    b944:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    b946:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    b948:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    b94c:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    b94e:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    b952:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    b954:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    b958:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    b95a:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    b95e:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    b962:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    b966:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    b96a:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    b96e:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    b972:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    b976:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    b97a:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    b97e:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    b982:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    b986:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    b98a:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    b98e:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    b992:	4620      	mov	r0, r4
    b994:	f7ff fdc4 	bl	b520 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    b998:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    b99c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    b9a0:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    b9a4:	e767      	b.n	b876 <event_connection_prepare+0x1b6>
    b9a6:	bf00      	nop
    b9a8:	200008c0 	.word	0x200008c0
    b9ac:	000142a9 	.word	0x000142a9
    b9b0:	00014ff8 	.word	0x00014ff8
    b9b4:	0001642c 	.word	0x0001642c
    b9b8:	00015047 	.word	0x00015047
    b9bc:	00016de3 	.word	0x00016de3
    b9c0:	20000a1c 	.word	0x20000a1c
    b9c4:	20003da8 	.word	0x20003da8
    b9c8:	000163c8 	.word	0x000163c8
    b9cc:	00016ca7 	.word	0x00016ca7
	if (conn->pause_tx) {
    b9d0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    b9d4:	0718      	lsls	r0, r3, #28
    b9d6:	f53f af4e 	bmi.w	b876 <event_connection_prepare+0x1b6>
	node_rx = packet_rx_reserve_get(2);
    b9da:	2002      	movs	r0, #2
    b9dc:	f7fd fd98 	bl	9510 <packet_rx_reserve_get>
	if (!node_rx) {
    b9e0:	2800      	cmp	r0, #0
    b9e2:	f43f af48 	beq.w	b876 <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    b9e6:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    b9ea:	2203      	movs	r2, #3
    b9ec:	f362 0302 	bfi	r3, r2, #0, #3
    b9f0:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    b9f4:	8c23      	ldrh	r3, [r4, #32]
    b9f6:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    b9f8:	2301      	movs	r3, #1
    b9fa:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    b9fc:	7a03      	ldrb	r3, [r0, #8]
    b9fe:	4313      	orrs	r3, r2
    ba00:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    ba02:	2318      	movs	r3, #24
    ba04:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    ba06:	230f      	movs	r3, #15
    ba08:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    ba0a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    ba0e:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    ba10:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    ba12:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    ba16:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    ba18:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    ba1c:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    ba1e:	f7fe fbe3 	bl	a1e8 <packet_rx_enqueue>
    ba22:	e728      	b.n	b876 <event_connection_prepare+0x1b6>
		LL_ASSERT(0);
    ba24:	4bb9      	ldr	r3, [pc, #740]	; (bd0c <event_connection_prepare+0x64c>)
    ba26:	9301      	str	r3, [sp, #4]
    ba28:	9300      	str	r3, [sp, #0]
    ba2a:	4bb9      	ldr	r3, [pc, #740]	; (bd10 <event_connection_prepare+0x650>)
		LL_ASSERT(0);
    ba2c:	4ab9      	ldr	r2, [pc, #740]	; (bd14 <event_connection_prepare+0x654>)
    ba2e:	49ba      	ldr	r1, [pc, #744]	; (bd18 <event_connection_prepare+0x658>)
    ba30:	48ba      	ldr	r0, [pc, #744]	; (bd1c <event_connection_prepare+0x65c>)
    ba32:	e655      	b.n	b6e0 <event_connection_prepare+0x20>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ba34:	48ba      	ldr	r0, [pc, #744]	; (bd20 <event_connection_prepare+0x660>)
    ba36:	f7fa ff56 	bl	68e6 <mem_acquire>
		if (!node_tx) {
    ba3a:	4601      	mov	r1, r0
    ba3c:	b360      	cbz	r0, ba98 <event_connection_prepare+0x3d8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    ba3e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    ba42:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    ba46:	2201      	movs	r2, #1
    ba48:	f362 0301 	bfi	r3, r2, #0, #2
    ba4c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    ba50:	b2db      	uxtb	r3, r3
    ba52:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    ba56:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    ba5a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    ba5e:	f363 07c5 	bfi	r7, r3, #3, #3
    ba62:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    ba66:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    ba6a:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    ba6e:	f367 1286 	bfi	r2, r7, #6, #1
    ba72:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ba76:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    ba78:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ba7a:	f042 0203 	orr.w	r2, r2, #3
    ba7e:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    ba80:	2203      	movs	r2, #3
    ba82:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    ba84:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    ba86:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    ba88:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    ba8a:	4620      	mov	r0, r4
    ba8c:	f7ff fd48 	bl	b520 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    ba90:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    ba94:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    ba98:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    ba9c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    baa0:	429a      	cmp	r2, r3
    baa2:	f000 82f6 	beq.w	c092 <event_connection_prepare+0x9d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    baa6:	2005      	movs	r0, #5
    baa8:	f7ff fba4 	bl	b1f4 <event_stop.constprop.31>
		switch (conn->llcp_type) {
    baac:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    bab0:	3b01      	subs	r3, #1
    bab2:	2b07      	cmp	r3, #7
    bab4:	f200 85a7 	bhi.w	c606 <event_connection_prepare+0xf46>
    bab8:	e8df f013 	tbh	[pc, r3, lsl #1]
    babc:	02c4006c 	.word	0x02c4006c
    bac0:	045e0343 	.word	0x045e0343
    bac4:	05a5048e 	.word	0x05a5048e
    bac8:	04fa04e6 	.word	0x04fa04e6
		conn->llcp_phy.ack = conn->llcp_phy.req;
    bacc:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    bad0:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    bad4:	f3c3 0282 	ubfx	r2, r3, #2, #3
    bad8:	0791      	lsls	r1, r2, #30
    bada:	d544      	bpl.n	bb66 <event_connection_prepare+0x4a6>
			conn->llcp_phy.tx = BIT(1);
    badc:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    bade:	f362 0384 	bfi	r3, r2, #2, #3
    bae2:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    bae6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    baea:	095a      	lsrs	r2, r3, #5
    baec:	0790      	lsls	r0, r2, #30
    baee:	d543      	bpl.n	bb78 <event_connection_prepare+0x4b8>
			conn->llcp_phy.rx = BIT(1);
    baf0:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    baf2:	f362 1347 	bfi	r3, r2, #5, #3
    baf6:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    bafa:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    bafe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    bb02:	f3c2 0182 	ubfx	r1, r2, #2, #3
    bb06:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    bb0a:	428b      	cmp	r3, r1
    bb0c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    bb10:	bf14      	ite	ne
    bb12:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    bb16:	f36f 0384 	bfceq	r3, #2, #3
    bb1a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    bb1e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    bb22:	0952      	lsrs	r2, r2, #5
    bb24:	f003 0307 	and.w	r3, r3, #7
    bb28:	4293      	cmp	r3, r2
    bb2a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    bb2e:	bf14      	ite	ne
    bb30:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    bb34:	f36f 1347 	bfceq	r3, #5, #3
    bb38:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    bb3c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    bb40:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    bb44:	f043 0301 	orr.w	r3, r3, #1
    bb48:	f3c2 0240 	ubfx	r2, r2, #1, #1
    bb4c:	f362 0341 	bfi	r3, r2, #1, #1
    bb50:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    bb54:	2308      	movs	r3, #8
    bb56:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    bb5a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    bb5e:	3b01      	subs	r3, #1
    bb60:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    bb64:	e798      	b.n	ba98 <event_connection_prepare+0x3d8>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    bb66:	07d7      	lsls	r7, r2, #31
    bb68:	d501      	bpl.n	bb6e <event_connection_prepare+0x4ae>
			conn->llcp_phy.tx = BIT(0);
    bb6a:	2201      	movs	r2, #1
    bb6c:	e7b7      	b.n	bade <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    bb6e:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    bb72:	bf18      	it	ne
    bb74:	2204      	movne	r2, #4
    bb76:	e7b2      	b.n	bade <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    bb78:	07d1      	lsls	r1, r2, #31
    bb7a:	d501      	bpl.n	bb80 <event_connection_prepare+0x4c0>
			conn->llcp_phy.rx = BIT(0);
    bb7c:	2201      	movs	r2, #1
    bb7e:	e7b8      	b.n	baf2 <event_connection_prepare+0x432>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    bb80:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    bb84:	bf18      	it	ne
    bb86:	2204      	movne	r2, #4
    bb88:	e7b3      	b.n	baf2 <event_connection_prepare+0x432>
		LL_ASSERT(0);
    bb8a:	4b60      	ldr	r3, [pc, #384]	; (bd0c <event_connection_prepare+0x64c>)
    bb8c:	9301      	str	r3, [sp, #4]
    bb8e:	9300      	str	r3, [sp, #0]
    bb90:	4b64      	ldr	r3, [pc, #400]	; (bd24 <event_connection_prepare+0x664>)
    bb92:	e74b      	b.n	ba2c <event_connection_prepare+0x36c>
	if (!conn_upd) {
    bb94:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    bb98:	b90b      	cbnz	r3, bb9e <event_connection_prepare+0x4de>
		_radio.conn_upd = conn;
    bb9a:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    bb9e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bba2:	f013 0303 	ands.w	r3, r3, #3
    bba6:	d068      	beq.n	bc7a <event_connection_prepare+0x5ba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bba8:	485d      	ldr	r0, [pc, #372]	; (bd20 <event_connection_prepare+0x660>)
    bbaa:	f7fa fe9c 	bl	68e6 <mem_acquire>
		if (!node_tx) {
    bbae:	4607      	mov	r7, r0
    bbb0:	2800      	cmp	r0, #0
    bbb2:	f000 826e 	beq.w	c092 <event_connection_prepare+0x9d2>
		switch (conn->llcp.conn_upd.state) {
    bbb6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bbba:	f003 0303 	and.w	r3, r3, #3
    bbbe:	2b01      	cmp	r3, #1
    bbc0:	d059      	beq.n	bc76 <event_connection_prepare+0x5b6>
    bbc2:	2b02      	cmp	r3, #2
    bbc4:	d152      	bne.n	bc6c <event_connection_prepare+0x5ac>
			fp_mayfly_select_or_use =
    bbc6:	4a58      	ldr	r2, [pc, #352]	; (bd28 <event_connection_prepare+0x668>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    bbc8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bbcc:	f36f 0301 	bfc	r3, #0, #2
    bbd0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    bbd4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    bbd6:	3306      	adds	r3, #6
    bbd8:	4433      	add	r3, r6
    bbda:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    bbdc:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bbe0:	7939      	ldrb	r1, [r7, #4]
    bbe2:	f041 0103 	orr.w	r1, r1, #3
    bbe6:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    bbe8:	210c      	movs	r1, #12
    bbea:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    bbec:	2100      	movs	r1, #0
    bbee:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    bbf0:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    bbf4:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    bbf6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    bbfa:	f240 40e2 	movw	r0, #1250	; 0x4e2
    bbfe:	fbb1 f1f0 	udiv	r1, r1, r0
    bc02:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    bc06:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    bc0a:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    bc0e:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    bc12:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    bc16:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    bc1a:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    bc1e:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bc22:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    bc24:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bc28:	2900      	cmp	r1, #0
    bc2a:	da0b      	bge.n	bc44 <event_connection_prepare+0x584>
			u32_t ticks_prepare_to_start =
    bc2c:	68a3      	ldr	r3, [r4, #8]
    bc2e:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    bc30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    bc34:	4283      	cmp	r3, r0
    bc36:	bf2c      	ite	cs
    bc38:	4443      	addcs	r3, r8
    bc3a:	eb08 0300 	addcc.w	r3, r8, r0
    bc3e:	1a5b      	subs	r3, r3, r1
    bc40:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    bc44:	f107 0309 	add.w	r3, r7, #9
    bc48:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    bc4c:	4b37      	ldr	r3, [pc, #220]	; (bd2c <event_connection_prepare+0x66c>)
    bc4e:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bc50:	2201      	movs	r2, #1
    bc52:	4611      	mov	r1, r2
    bc54:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    bc56:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bc58:	f7fa ff10 	bl	6a7c <mayfly_enqueue>
		LL_ASSERT(!retval);
    bc5c:	2800      	cmp	r0, #0
    bc5e:	f000 8214 	beq.w	c08a <event_connection_prepare+0x9ca>
    bc62:	4b2a      	ldr	r3, [pc, #168]	; (bd0c <event_connection_prepare+0x64c>)
    bc64:	9301      	str	r3, [sp, #4]
    bc66:	9300      	str	r3, [sp, #0]
    bc68:	4b31      	ldr	r3, [pc, #196]	; (bd30 <event_connection_prepare+0x670>)
    bc6a:	e5e1      	b.n	b830 <event_connection_prepare+0x170>
			LL_ASSERT(0);
    bc6c:	4b27      	ldr	r3, [pc, #156]	; (bd0c <event_connection_prepare+0x64c>)
    bc6e:	9301      	str	r3, [sp, #4]
    bc70:	9300      	str	r3, [sp, #0]
    bc72:	4b30      	ldr	r3, [pc, #192]	; (bd34 <event_connection_prepare+0x674>)
    bc74:	e6da      	b.n	ba2c <event_connection_prepare+0x36c>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    bc76:	4a30      	ldr	r2, [pc, #192]	; (bd38 <event_connection_prepare+0x678>)
    bc78:	e7a6      	b.n	bbc8 <event_connection_prepare+0x508>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    bc7a:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    bc7e:	1bf7      	subs	r7, r6, r7
    bc80:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    bc82:	043a      	lsls	r2, r7, #16
    bc84:	f100 8205 	bmi.w	c092 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    bc88:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    bc8c:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    bc90:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    bc94:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    bc98:	428a      	cmp	r2, r1
    bc9a:	d009      	beq.n	bcb0 <event_connection_prepare+0x5f0>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    bc9c:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    bca0:	f002 0207 	and.w	r2, r2, #7
    bca4:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bca6:	bf04      	itt	eq
    bca8:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    bcac:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    bcb0:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    bcb4:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    bcb6:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    bcb8:	bf08      	it	eq
    bcba:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    bcbe:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    bcc0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    bcc2:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    bcc6:	429a      	cmp	r2, r3
    bcc8:	d114      	bne.n	bcf4 <event_connection_prepare+0x634>
		     conn->conn_interval) ||
    bcca:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    bcce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    bcd0:	4299      	cmp	r1, r3
    bcd2:	d10f      	bne.n	bcf4 <event_connection_prepare+0x634>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    bcd4:	f240 43e2 	movw	r3, #1250	; 0x4e2
    bcd8:	435a      	muls	r2, r3
    bcda:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    bcde:	f242 7110 	movw	r1, #10000	; 0x2710
    bce2:	fb01 2303 	mla	r3, r1, r3, r2
    bce6:	3b01      	subs	r3, #1
    bce8:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    bcec:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    bcee:	b29b      	uxth	r3, r3
    bcf0:	429a      	cmp	r2, r3
    bcf2:	d036      	beq.n	bd62 <event_connection_prepare+0x6a2>
			node_rx = packet_rx_reserve_get(2);
    bcf4:	2002      	movs	r0, #2
    bcf6:	f7fd fc0b 	bl	9510 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    bcfa:	bb08      	cbnz	r0, bd40 <event_connection_prepare+0x680>
    bcfc:	4b03      	ldr	r3, [pc, #12]	; (bd0c <event_connection_prepare+0x64c>)
    bcfe:	9301      	str	r3, [sp, #4]
    bd00:	9300      	str	r3, [sp, #0]
    bd02:	4b0c      	ldr	r3, [pc, #48]	; (bd34 <event_connection_prepare+0x674>)
		LL_ASSERT(node_rx);
    bd04:	4a03      	ldr	r2, [pc, #12]	; (bd14 <event_connection_prepare+0x654>)
    bd06:	4904      	ldr	r1, [pc, #16]	; (bd18 <event_connection_prepare+0x658>)
    bd08:	480c      	ldr	r0, [pc, #48]	; (bd3c <event_connection_prepare+0x67c>)
    bd0a:	e4e9      	b.n	b6e0 <event_connection_prepare+0x20>
    bd0c:	000142a9 	.word	0x000142a9
    bd10:	000163dd 	.word	0x000163dd
    bd14:	00014ff8 	.word	0x00014ff8
    bd18:	00015047 	.word	0x00015047
    bd1c:	00014f97 	.word	0x00014f97
    bd20:	20000a1c 	.word	0x20000a1c
    bd24:	00016402 	.word	0x00016402
    bd28:	00009f39 	.word	0x00009f39
    bd2c:	20003d98 	.word	0x20003d98
    bd30:	00016391 	.word	0x00016391
    bd34:	000163a5 	.word	0x000163a5
    bd38:	0000ac21 	.word	0x0000ac21
    bd3c:	00016bd3 	.word	0x00016bd3
			node_rx->hdr.handle = conn->handle;
    bd40:	8c23      	ldrh	r3, [r4, #32]
    bd42:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    bd44:	2308      	movs	r3, #8
    bd46:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    bd48:	2300      	movs	r3, #0
    bd4a:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    bd4c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    bd50:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    bd52:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    bd56:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    bd58:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    bd5c:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    bd5e:	f7fe fa43 	bl	a1e8 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bd62:	6823      	ldr	r3, [r4, #0]
    bd64:	6866      	ldr	r6, [r4, #4]
    bd66:	2b00      	cmp	r3, #0
    bd68:	da09      	bge.n	bd7e <event_connection_prepare+0x6be>
			u32_t ticks_prepare_to_start =
    bd6a:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    bd6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    bd70:	42b0      	cmp	r0, r6
    bd72:	bf2c      	ite	cs
    bd74:	4480      	addcs	r8, r0
    bd76:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    bd78:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    bd7a:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    bd7e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    bd80:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    bd84:	49a0      	ldr	r1, [pc, #640]	; (c008 <event_connection_prepare+0x948>)
		conn_interval_old = instant_latency * conn->conn_interval;
    bd86:	fb13 f307 	smulbb	r3, r3, r7
    bd8a:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    bd8c:	fbb3 f2fa 	udiv	r2, r3, sl
    bd90:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    bd94:	fb1a f009 	smulbb	r0, sl, r9
    bd98:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    bd9a:	4283      	cmp	r3, r0
    bd9c:	f080 80bf 	bcs.w	bf1e <event_connection_prepare+0x85e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    bda0:	1ac0      	subs	r0, r0, r3
    bda2:	f240 1223 	movw	r2, #291	; 0x123
    bda6:	4342      	muls	r2, r0
    bda8:	17c3      	asrs	r3, r0, #31
    bdaa:	fb01 2303 	mla	r3, r1, r3, r2
    bdae:	fba0 0101 	umull	r0, r1, r0, r1
    bdb2:	4419      	add	r1, r3
    bdb4:	a392      	add	r3, pc, #584	; (adr r3, c000 <event_connection_prepare+0x940>)
    bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    bdba:	f7f4 fa2b 	bl	214 <__aeabi_uldivmod>
    bdbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bdc2:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    bdc6:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    bdc8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    bdca:	f8df b274 	ldr.w	fp, [pc, #628]	; c040 <event_connection_prepare+0x980>
    bdce:	1bdb      	subs	r3, r3, r7
    bdd0:	444b      	add	r3, r9
    bdd2:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    bdd4:	6823      	ldr	r3, [r4, #0]
    bdd6:	42b3      	cmp	r3, r6
    bdd8:	bf38      	it	cc
    bdda:	4633      	movcc	r3, r6
    bddc:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    bdde:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    bde2:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    bde6:	2b00      	cmp	r3, #0
    bde8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    bdec:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    bdee:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    bdf2:	f280 80a5 	bge.w	bf40 <event_connection_prepare+0x880>
				conn->slave.window_widening_periodic_us *
    bdf6:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    bdf8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    bdfa:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    bdfe:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    be02:	4a82      	ldr	r2, [pc, #520]	; (c00c <event_connection_prepare+0x94c>)
    be04:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    be08:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    be0c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    be10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    be14:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    be18:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    be1a:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    be1c:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    be20:	4b7b      	ldr	r3, [pc, #492]	; (c010 <event_connection_prepare+0x950>)
				conn->llcp.conn_upd.win_size * 1250;
    be22:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    be26:	f205 253f 	addw	r5, r5, #575	; 0x23f
    be2a:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    be2e:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    be30:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    be34:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    be36:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    be38:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    be3a:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    be3c:	429f      	cmp	r7, r3
    be3e:	bf94      	ite	ls
    be40:	65e7      	strls	r7, [r4, #92]	; 0x5c
    be42:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    be44:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    be46:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    be48:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    be4a:	fba0 010b 	umull	r0, r1, r0, fp
    be4e:	a36c      	add	r3, pc, #432	; (adr r3, c000 <event_connection_prepare+0x940>)
    be50:	e9d3 2300 	ldrd	r2, r3, [r3]
    be54:	f7f4 f9de 	bl	214 <__aeabi_uldivmod>
    be58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    be5a:	1a1b      	subs	r3, r3, r0
    be5c:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    be5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    be60:	fbb3 f0f8 	udiv	r0, r3, r8
    be64:	fb08 f000 	mul.w	r0, r8, r0
    be68:	a365      	add	r3, pc, #404	; (adr r3, c000 <event_connection_prepare+0x940>)
    be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
    be6e:	fba0 010b 	umull	r0, r1, r0, fp
    be72:	f7f4 f9cf 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    be76:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    be78:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    be7c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    be80:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    be84:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    be86:	f242 7110 	movw	r1, #10000	; 0x2710
    be8a:	fb01 6303 	mla	r3, r1, r3, r6
    be8e:	3b01      	subs	r3, #1
    be90:	fbb3 f3f6 	udiv	r3, r3, r6
    be94:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    be96:	4b5f      	ldr	r3, [pc, #380]	; (c014 <event_connection_prepare+0x954>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    be98:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    be9c:	4433      	add	r3, r6
    be9e:	fbb3 f3f6 	udiv	r3, r3, r6
    bea2:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    bea6:	4b5c      	ldr	r3, [pc, #368]	; (c018 <event_connection_prepare+0x958>)
    bea8:	4433      	add	r3, r6
    beaa:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    beae:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    beb0:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    beb2:	4299      	cmp	r1, r3
    beb4:	bfc4      	itt	gt
    beb6:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    beba:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    bebc:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    bec0:	bfc8      	it	gt
    bec2:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    bec4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    bec8:	bfc8      	it	gt
    beca:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    becc:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    bed0:	bf08      	it	eq
    bed2:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    bed6:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    beda:	2000      	movs	r0, #0
    bedc:	2101      	movs	r1, #1
    bede:	f006 f9f7 	bl	122d0 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    bee2:	2200      	movs	r2, #0
    bee4:	2101      	movs	r1, #1
		mayfly_was_enabled =
    bee6:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    bee8:	4610      	mov	r0, r2
    beea:	f7fa fd9f 	bl	6a2c <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    beee:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    bef2:	f641 2385 	movw	r3, #6789	; 0x1a85
    bef6:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    bef8:	3207      	adds	r2, #7
		ticker_status =
    befa:	9300      	str	r3, [sp, #0]
    befc:	b2d2      	uxtb	r2, r2
    befe:	4b47      	ldr	r3, [pc, #284]	; (c01c <event_connection_prepare+0x95c>)
    bf00:	4608      	mov	r0, r1
    bf02:	f7fb fc17 	bl	7734 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bf06:	f030 0802 	bics.w	r8, r0, #2
    bf0a:	d026      	beq.n	bf5a <event_connection_prepare+0x89a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bf0c:	4b44      	ldr	r3, [pc, #272]	; (c020 <event_connection_prepare+0x960>)
    bf0e:	9301      	str	r3, [sp, #4]
    bf10:	9300      	str	r3, [sp, #0]
    bf12:	4a44      	ldr	r2, [pc, #272]	; (c024 <event_connection_prepare+0x964>)
    bf14:	4b44      	ldr	r3, [pc, #272]	; (c028 <event_connection_prepare+0x968>)
    bf16:	4945      	ldr	r1, [pc, #276]	; (c02c <event_connection_prepare+0x96c>)
    bf18:	4845      	ldr	r0, [pc, #276]	; (c030 <event_connection_prepare+0x970>)
    bf1a:	f7ff bbe1 	b.w	b6e0 <event_connection_prepare+0x20>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    bf1e:	fb0a 3212 	mls	r2, sl, r2, r3
    bf22:	b292      	uxth	r2, r2
    bf24:	fba2 0101 	umull	r0, r1, r2, r1
    bf28:	f240 1323 	movw	r3, #291	; 0x123
    bf2c:	fb03 1102 	mla	r1, r3, r2, r1
    bf30:	a333      	add	r3, pc, #204	; (adr r3, c000 <event_connection_prepare+0x940>)
    bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf36:	f7f4 f96d 	bl	214 <__aeabi_uldivmod>
    bf3a:	eba8 0300 	sub.w	r3, r8, r0
    bf3e:	e742      	b.n	bdc6 <event_connection_prepare+0x706>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    bf40:	990c      	ldr	r1, [sp, #48]	; 0x30
    bf42:	a32f      	add	r3, pc, #188	; (adr r3, c000 <event_connection_prepare+0x940>)
    bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf48:	fba1 010b 	umull	r0, r1, r1, fp
    bf4c:	f7f4 f962 	bl	214 <__aeabi_uldivmod>
    bf50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    bf54:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    bf56:	4635      	mov	r5, r6
    bf58:	e790      	b.n	be7c <event_connection_prepare+0x7bc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    bf5a:	fba5 ab0b 	umull	sl, fp, r5, fp
    bf5e:	a328      	add	r3, pc, #160	; (adr r3, c000 <event_connection_prepare+0x940>)
    bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf64:	4650      	mov	r0, sl
    bf66:	4659      	mov	r1, fp
    bf68:	f7f4 f954 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    bf6c:	4a31      	ldr	r2, [pc, #196]	; (c034 <event_connection_prepare+0x974>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    bf6e:	f894 6020 	ldrb.w	r6, [r4, #32]
    bf72:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    bf76:	2307      	movs	r3, #7
    bf78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bf7c:	2100      	movs	r1, #0
    bf7e:	4343      	muls	r3, r0
    bf80:	fb02 3301 	mla	r3, r2, r1, r3
    bf84:	fba0 0102 	umull	r0, r1, r0, r2
    bf88:	ebba 0000 	subs.w	r0, sl, r0
    bf8c:	4419      	add	r1, r3
    bf8e:	eb6b 0101 	sbc.w	r1, fp, r1
    bf92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bf96:	2300      	movs	r3, #0
    bf98:	f7f4 f93c 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    bf9c:	68e3      	ldr	r3, [r4, #12]
    bf9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bfa0:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    bfa4:	4924      	ldr	r1, [pc, #144]	; (c038 <event_connection_prepare+0x978>)
		ticker_status =
    bfa6:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    bfa8:	441a      	add	r2, r3
    bfaa:	4613      	mov	r3, r2
    bfac:	4a23      	ldr	r2, [pc, #140]	; (c03c <event_connection_prepare+0x97c>)
		ticker_status =
    bfae:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    bfb0:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    bfb4:	bf38      	it	cc
    bfb6:	460a      	movcc	r2, r1
    bfb8:	3607      	adds	r6, #7
		ticker_status =
    bfba:	f641 2195 	movw	r1, #6805	; 0x1a95
    bfbe:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    bfc0:	b2f6      	uxtb	r6, r6
		ticker_status =
    bfc2:	4916      	ldr	r1, [pc, #88]	; (c01c <event_connection_prepare+0x95c>)
    bfc4:	9107      	str	r1, [sp, #28]
    bfc6:	9205      	str	r2, [sp, #20]
    bfc8:	9406      	str	r4, [sp, #24]
    bfca:	f8cd 800c 	str.w	r8, [sp, #12]
    bfce:	9501      	str	r5, [sp, #4]
    bfd0:	9700      	str	r7, [sp, #0]
    bfd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bfd4:	4632      	mov	r2, r6
    bfd6:	4641      	mov	r1, r8
    bfd8:	4640      	mov	r0, r8
    bfda:	f7fb fb0d 	bl	75f8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bfde:	f030 0002 	bics.w	r0, r0, #2
    bfe2:	d193      	bne.n	bf0c <event_connection_prepare+0x84c>
		if (mayfly_was_enabled) {
    bfe4:	f1b9 0f00 	cmp.w	r9, #0
    bfe8:	f000 8383 	beq.w	c6f2 <event_connection_prepare+0x1032>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    bfec:	2201      	movs	r2, #1
    bfee:	4611      	mov	r1, r2
}
    bff0:	b00f      	add	sp, #60	; 0x3c
    bff2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    bff6:	f7fa bd19 	b.w	6a2c <mayfly_enable>
    bffa:	bf00      	nop
    bffc:	f3af 8000 	nop.w
    c000:	1afd498d 	.word	0x1afd498d
    c004:	00000007 	.word	0x00000007
    c008:	09ce5400 	.word	0x09ce5400
    c00c:	0001678c 	.word	0x0001678c
    c010:	000f4240 	.word	0x000f4240
    c014:	026259ff 	.word	0x026259ff
    c018:	01c9c37f 	.word	0x01c9c37f
    c01c:	0000a3fd 	.word	0x0000a3fd
    c020:	000142a9 	.word	0x000142a9
    c024:	00014ff8 	.word	0x00014ff8
    c028:	000163a5 	.word	0x000163a5
    c02c:	00015047 	.word	0x00015047
    c030:	0001656d 	.word	0x0001656d
    c034:	1afd498d 	.word	0x1afd498d
    c038:	0000c8a1 	.word	0x0000c8a1
    c03c:	0000c8a5 	.word	0x0000c8a5
    c040:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
    c044:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c048:	2b00      	cmp	r3, #0
    c04a:	d05e      	beq.n	c10a <event_connection_prepare+0xa4a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c04c:	48c9      	ldr	r0, [pc, #804]	; (c374 <event_connection_prepare+0xcb4>)
    c04e:	f7fa fc4a 	bl	68e6 <mem_acquire>
		if (node_tx) {
    c052:	4607      	mov	r7, r0
    c054:	b1e8      	cbz	r0, c092 <event_connection_prepare+0x9d2>
			conn->llcp.chan_map.initiate = 0;
    c056:	2300      	movs	r3, #0
    c058:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    c05c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c05e:	3306      	adds	r3, #6
    c060:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    c062:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c066:	7903      	ldrb	r3, [r0, #4]
    c068:	f043 0303 	orr.w	r3, r3, #3
    c06c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c06e:	2308      	movs	r3, #8
    c070:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c072:	2301      	movs	r3, #1
    c074:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    c076:	2205      	movs	r2, #5
    c078:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c07c:	3008      	adds	r0, #8
    c07e:	f7f5 fdbd 	bl	1bfc <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    c082:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c086:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    c08a:	4639      	mov	r1, r7
    c08c:	4620      	mov	r0, r4
    c08e:	f7ff fa47 	bl	b520 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    c092:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    c096:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c09a:	429a      	cmp	r2, r3
    c09c:	d01e      	beq.n	c0dc <event_connection_prepare+0xa1c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c09e:	2005      	movs	r0, #5
    c0a0:	f7ff f8a8 	bl	b1f4 <event_stop.constprop.31>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c0a4:	48b3      	ldr	r0, [pc, #716]	; (c374 <event_connection_prepare+0xcb4>)
    c0a6:	f7fa fc1e 	bl	68e6 <mem_acquire>
		if (node_tx) {
    c0aa:	4601      	mov	r1, r0
    c0ac:	b1b0      	cbz	r0, c0dc <event_connection_prepare+0xa1c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    c0ae:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c0b2:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c0b6:	7903      	ldrb	r3, [r0, #4]
    c0b8:	f043 0303 	orr.w	r3, r3, #3
    c0bc:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c0be:	2302      	movs	r3, #2
    c0c0:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c0c2:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    c0c4:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    c0c8:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    c0ca:	4620      	mov	r0, r4
    c0cc:	f7ff fa28 	bl	b520 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    c0d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    c0d2:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    c0d4:	bf98      	it	ls
    c0d6:	3301      	addls	r3, #1
    c0d8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    c0dc:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    c0e0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    c0e4:	429a      	cmp	r2, r3
    c0e6:	f000 82eb 	beq.w	c6c0 <event_connection_prepare+0x1000>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c0ea:	2005      	movs	r0, #5
    c0ec:	f7ff f882 	bl	b1f4 <event_stop.constprop.31>
	switch (conn->llcp_length.state) {
    c0f0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    c0f4:	f003 0303 	and.w	r3, r3, #3
    c0f8:	2b03      	cmp	r3, #3
    c0fa:	f200 830c 	bhi.w	c716 <event_connection_prepare+0x1056>
    c0fe:	e8df f013 	tbh	[pc, r3, lsl #1]
    c102:	0288      	.short	0x0288
    c104:	02df02df 	.word	0x02df02df
    c108:	02fb      	.short	0x02fb
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    c10a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c10e:	1af3      	subs	r3, r6, r3
    c110:	041f      	lsls	r7, r3, #16
    c112:	d4be      	bmi.n	c092 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c114:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c118:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    c11c:	f104 0717 	add.w	r7, r4, #23
    c120:	2205      	movs	r2, #5
    c122:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c126:	4638      	mov	r0, r7
    c128:	f7f5 fd68 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    c12c:	2105      	movs	r1, #5
    c12e:	4638      	mov	r0, r7
    c130:	f7fa fd84 	bl	6c3c <util_ones_count_get>
		conn->data_chan_count =
    c134:	7f63      	ldrb	r3, [r4, #29]
    c136:	f360 0305 	bfi	r3, r0, #0, #6
    c13a:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    c13c:	2301      	movs	r3, #1
    c13e:	7723      	strb	r3, [r4, #28]
    c140:	e7a7      	b.n	c092 <event_connection_prepare+0x9d2>
	if (conn->llcp.encryption.initiate) {
    c142:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    c146:	f1b9 0f00 	cmp.w	r9, #0
    c14a:	d1a2      	bne.n	c092 <event_connection_prepare+0x9d2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c14c:	4889      	ldr	r0, [pc, #548]	; (c374 <event_connection_prepare+0xcb4>)
    c14e:	f7fa fbca 	bl	68e6 <mem_acquire>
	if (!node_tx) {
    c152:	4607      	mov	r7, r0
    c154:	2800      	cmp	r0, #0
    c156:	d09c      	beq.n	c092 <event_connection_prepare+0x9d2>
	if (!conn->role) {
    c158:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c15c:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    c15e:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    c162:	db4d      	blt.n	c200 <event_connection_prepare+0xb40>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c164:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    c168:	465b      	mov	r3, fp
    c16a:	464a      	mov	r2, r9
    c16c:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c170:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c174:	f005 fc22 	bl	119bc <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    c178:	2210      	movs	r2, #16
    c17a:	4659      	mov	r1, fp
    c17c:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c180:	f7f5 fd3c 	bl	1bfc <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c184:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c188:	2208      	movs	r2, #8
    c18a:	f204 1033 	addw	r0, r4, #307	; 0x133
    c18e:	f7f5 fd35 	bl	1bfc <memcpy>
		conn->ccm_rx.direction = 0;
    c192:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    c196:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    c19a:	f369 0300 	bfi	r3, r9, #0, #1
    c19e:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    c1a2:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    c1a6:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    c1aa:	f043 0301 	orr.w	r3, r3, #1
    c1ae:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    c1b2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    c1b6:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    c1ba:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    c1be:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    c1c2:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c1c6:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c1ca:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c1ce:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    c1d2:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c1d6:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c1da:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c1de:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    c1e2:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    c1e6:	4651      	mov	r1, sl
    c1e8:	4620      	mov	r0, r4
    c1ea:	f7ff fa27 	bl	b63c <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    c1ee:	4639      	mov	r1, r7
    c1f0:	4620      	mov	r0, r4
    c1f2:	f7ff f995 	bl	b520 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    c1f6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c1fa:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    c1fe:	e748      	b.n	c092 <event_connection_prepare+0x9d2>
	else if (!conn->pause_tx || conn->refresh) {
    c200:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c204:	f003 0348 	and.w	r3, r3, #72	; 0x48
    c208:	2b08      	cmp	r3, #8
    c20a:	f000 80a2 	beq.w	c352 <event_connection_prepare+0xc92>
		if (conn->llcp.encryption.error_code) {
    c20e:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    c212:	f1b9 0f00 	cmp.w	r9, #0
    c216:	d020      	beq.n	c25a <event_connection_prepare+0xb9a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c218:	7903      	ldrb	r3, [r0, #4]
    c21a:	f043 0303 	orr.w	r3, r3, #3
    c21e:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    c220:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c224:	0698      	lsls	r0, r3, #26
    c226:	d512      	bpl.n	c24e <event_connection_prepare+0xb8e>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    c228:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    c22c:	0759      	lsls	r1, r3, #29
    c22e:	d50e      	bpl.n	c24e <event_connection_prepare+0xb8e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c230:	2311      	movs	r3, #17
    c232:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    c234:	2303      	movs	r3, #3
    c236:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    c238:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    c23c:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c23e:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    c240:	797b      	ldrb	r3, [r7, #5]
    c242:	3301      	adds	r3, #1
    c244:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    c246:	2300      	movs	r3, #0
    c248:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    c24c:	e7cf      	b.n	c1ee <event_connection_prepare+0xb2e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    c24e:	230d      	movs	r3, #13
    c250:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    c252:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c256:	2301      	movs	r3, #1
    c258:	e7f1      	b.n	c23e <event_connection_prepare+0xb7e>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c25a:	4846      	ldr	r0, [pc, #280]	; (c374 <event_connection_prepare+0xcb4>)
    c25c:	f7fa fb43 	bl	68e6 <mem_acquire>
	if (!node_tx) {
    c260:	4682      	mov	sl, r0
    c262:	2800      	cmp	r0, #0
    c264:	f000 8300 	beq.w	c868 <event_connection_prepare+0x11a8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c268:	7903      	ldrb	r3, [r0, #4]
    c26a:	f043 0303 	orr.w	r3, r3, #3
    c26e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c270:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    c274:	230d      	movs	r3, #13
    c276:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c278:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    c27c:	f100 0308 	add.w	r3, r0, #8
    c280:	4619      	mov	r1, r3
    c282:	2208      	movs	r2, #8
    c284:	6868      	ldr	r0, [r5, #4]
    c286:	930d      	str	r3, [sp, #52]	; 0x34
    c288:	f006 fd54 	bl	12d34 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    c28c:	f10a 0310 	add.w	r3, sl, #16
    c290:	4619      	mov	r1, r3
    c292:	465a      	mov	r2, fp
    c294:	6868      	ldr	r0, [r5, #4]
    c296:	930b      	str	r3, [sp, #44]	; 0x2c
    c298:	f006 fd4c 	bl	12d34 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    c29c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c29e:	2208      	movs	r2, #8
    c2a0:	4619      	mov	r1, r3
    c2a2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    c2a6:	f7f5 fca9 	bl	1bfc <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    c2aa:	465a      	mov	r2, fp
    c2ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c2ae:	f504 708b 	add.w	r0, r4, #278	; 0x116
    c2b2:	f7f5 fca3 	bl	1bfc <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    c2b6:	4651      	mov	r1, sl
    c2b8:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c2ba:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    c2be:	f7ff f92f 	bl	b520 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c2c2:	4653      	mov	r3, sl
    c2c4:	464a      	mov	r2, r9
    c2c6:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c2ca:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c2ce:	f005 fb75 	bl	119bc <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    c2d2:	2210      	movs	r2, #16
    c2d4:	4651      	mov	r1, sl
    c2d6:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c2da:	f7f5 fc8f 	bl	1bfc <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c2de:	2208      	movs	r2, #8
    c2e0:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c2e4:	f204 1033 	addw	r0, r4, #307	; 0x133
    c2e8:	f7f5 fc88 	bl	1bfc <memcpy>
			conn->ccm_rx.direction = 1;
    c2ec:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    c2f0:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    c2f4:	f043 0301 	orr.w	r3, r3, #1
    c2f8:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    c2fc:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    c300:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    c304:	f369 0300 	bfi	r3, r9, #0, #1
    c308:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    c30c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    c310:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    c314:	f043 0310 	orr.w	r3, r3, #16
    c318:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c31c:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    c31e:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c322:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    c326:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c32a:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c32e:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c332:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    c336:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c33a:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c33e:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c342:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c346:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c348:	2301      	movs	r3, #1
    c34a:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c34c:	2305      	movs	r3, #5
    c34e:	71fb      	strb	r3, [r7, #7]
    c350:	e74d      	b.n	c1ee <event_connection_prepare+0xb2e>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    c352:	4651      	mov	r1, sl
    c354:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    c358:	f7ff f970 	bl	b63c <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    c35c:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    c360:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    c364:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    c368:	f369 03c3 	bfi	r3, r9, #3, #1
    c36c:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    c370:	e73d      	b.n	c1ee <event_connection_prepare+0xb2e>
    c372:	bf00      	nop
    c374:	20000a1c 	.word	0x20000a1c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c378:	48b0      	ldr	r0, [pc, #704]	; (c63c <event_connection_prepare+0xf7c>)
    c37a:	f7fa fab4 	bl	68e6 <mem_acquire>
	if (node_tx) {
    c37e:	4607      	mov	r7, r0
    c380:	2800      	cmp	r0, #0
    c382:	f43f ae86 	beq.w	c092 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c386:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c38a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    c38e:	4bac      	ldr	r3, [pc, #688]	; (c640 <event_connection_prepare+0xf80>)
    c390:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c394:	7903      	ldrb	r3, [r0, #4]
    c396:	f043 0303 	orr.w	r3, r3, #3
    c39a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    c39c:	2309      	movs	r3, #9
    c39e:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    c3a0:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c3a4:	2b00      	cmp	r3, #0
    c3a6:	bfac      	ite	ge
    c3a8:	2308      	movge	r3, #8
    c3aa:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    c3ac:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    c3ae:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    c3b0:	2100      	movs	r1, #0
    c3b2:	4410      	add	r0, r2
    c3b4:	f7f5 fc4e 	bl	1c54 <memset>
			conn->llcp_features & 0xFF;
    c3b8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    c3bc:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    c3be:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    c3c0:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    c3c2:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    c3c4:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    c3c6:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    c3c8:	4620      	mov	r0, r4
    c3ca:	f7ff f8a9 	bl	b520 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    c3ce:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c3d2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    c3d6:	e65c      	b.n	c092 <event_connection_prepare+0x9d2>
	if (conn->llcp_version.tx == 0) {
    c3d8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    c3dc:	07da      	lsls	r2, r3, #31
    c3de:	d424      	bmi.n	c42a <event_connection_prepare+0xd6a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c3e0:	4896      	ldr	r0, [pc, #600]	; (c63c <event_connection_prepare+0xf7c>)
    c3e2:	f7fa fa80 	bl	68e6 <mem_acquire>
		if (node_tx) {
    c3e6:	4601      	mov	r1, r0
    c3e8:	2800      	cmp	r0, #0
    c3ea:	f43f ae52 	beq.w	c092 <event_connection_prepare+0x9d2>
			conn->llcp_ack = conn->llcp_req;
    c3ee:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c3f2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    c3f6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    c3fa:	f043 0301 	orr.w	r3, r3, #1
    c3fe:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c402:	7903      	ldrb	r3, [r0, #4]
    c404:	f043 0303 	orr.w	r3, r3, #3
    c408:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    c40a:	2306      	movs	r3, #6
    c40c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c40e:	230c      	movs	r3, #12
    c410:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    c412:	2309      	movs	r3, #9
    c414:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    c416:	f06f 030e 	mvn.w	r3, #14
    c41a:	7243      	strb	r3, [r0, #9]
    c41c:	2305      	movs	r3, #5
    c41e:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    c420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c424:	72c3      	strb	r3, [r0, #11]
    c426:	7303      	strb	r3, [r0, #12]
    c428:	e7ce      	b.n	c3c8 <event_connection_prepare+0xd08>
	} else if (conn->llcp_version.rx != 0) {
    c42a:	079b      	lsls	r3, r3, #30
    c42c:	d526      	bpl.n	c47c <event_connection_prepare+0xdbc>
		conn->llcp_ack = conn->llcp_req;
    c42e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c432:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    c436:	2002      	movs	r0, #2
    c438:	f7fd f86a 	bl	9510 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    c43c:	b920      	cbnz	r0, c448 <event_connection_prepare+0xd88>
    c43e:	4b81      	ldr	r3, [pc, #516]	; (c644 <event_connection_prepare+0xf84>)
    c440:	9301      	str	r3, [sp, #4]
    c442:	9300      	str	r3, [sp, #0]
    c444:	4b80      	ldr	r3, [pc, #512]	; (c648 <event_connection_prepare+0xf88>)
    c446:	e45d      	b.n	bd04 <event_connection_prepare+0x644>
		node_rx->hdr.handle = conn->handle;
    c448:	8c23      	ldrh	r3, [r4, #32]
    c44a:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c44c:	2301      	movs	r3, #1
    c44e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    c450:	7a03      	ldrb	r3, [r0, #8]
    c452:	f043 0303 	orr.w	r3, r3, #3
    c456:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    c458:	2306      	movs	r3, #6
    c45a:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    c45c:	230c      	movs	r3, #12
    c45e:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    c460:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    c464:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    c466:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    c46a:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    c46e:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    c472:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    c476:	f7fd feb7 	bl	a1e8 <packet_rx_enqueue>
    c47a:	e60a      	b.n	c092 <event_connection_prepare+0x9d2>
		LL_ASSERT(0);
    c47c:	4b71      	ldr	r3, [pc, #452]	; (c644 <event_connection_prepare+0xf84>)
    c47e:	9301      	str	r3, [sp, #4]
    c480:	9300      	str	r3, [sp, #0]
    c482:	4b71      	ldr	r3, [pc, #452]	; (c648 <event_connection_prepare+0xf88>)
    c484:	f7ff bad2 	b.w	ba2c <event_connection_prepare+0x36c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c488:	486c      	ldr	r0, [pc, #432]	; (c63c <event_connection_prepare+0xf7c>)
    c48a:	f7fa fa2c 	bl	68e6 <mem_acquire>
	if (node_tx) {
    c48e:	4601      	mov	r1, r0
    c490:	2800      	cmp	r0, #0
    c492:	f43f adfe 	beq.w	c092 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c496:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c49a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c49e:	7903      	ldrb	r3, [r0, #4]
    c4a0:	f043 0303 	orr.w	r3, r3, #3
    c4a4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    c4a6:	2301      	movs	r3, #1
    c4a8:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    c4aa:	2312      	movs	r3, #18
    c4ac:	71c3      	strb	r3, [r0, #7]
    c4ae:	e78b      	b.n	c3c8 <event_connection_prepare+0xd08>
	if (conn->llcp.phy_upd_ind.initiate) {
    c4b0:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    c4b4:	07d7      	lsls	r7, r2, #31
    c4b6:	d551      	bpl.n	c55c <event_connection_prepare+0xe9c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c4b8:	4860      	ldr	r0, [pc, #384]	; (c63c <event_connection_prepare+0xf7c>)
    c4ba:	f7fa fa14 	bl	68e6 <mem_acquire>
		if (node_tx) {
    c4be:	4607      	mov	r7, r0
    c4c0:	2800      	cmp	r0, #0
    c4c2:	f43f ade6 	beq.w	c092 <event_connection_prepare+0x9d2>
			conn->llcp.phy_upd_ind.initiate = 0;
    c4c6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c4ca:	f36f 0300 	bfc	r3, #0, #1
    c4ce:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    c4d2:	b2db      	uxtb	r3, r3
    c4d4:	f3c3 0982 	ubfx	r9, r3, #2, #3
    c4d8:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    c4dc:	d138      	bne.n	c550 <event_connection_prepare+0xe90>
				conn->llcp_ack = conn->llcp_req;
    c4de:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    c4e2:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    c4e6:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    c4e8:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    c4ec:	d51a      	bpl.n	c524 <event_connection_prepare+0xe64>
					node_rx = packet_rx_reserve_get(2);
    c4ee:	2002      	movs	r0, #2
    c4f0:	f7fd f80e 	bl	9510 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    c4f4:	b920      	cbnz	r0, c500 <event_connection_prepare+0xe40>
		LL_ASSERT(node_rx);
    c4f6:	4b53      	ldr	r3, [pc, #332]	; (c644 <event_connection_prepare+0xf84>)
    c4f8:	9301      	str	r3, [sp, #4]
    c4fa:	9300      	str	r3, [sp, #0]
    c4fc:	4b53      	ldr	r3, [pc, #332]	; (c64c <event_connection_prepare+0xf8c>)
    c4fe:	e401      	b.n	bd04 <event_connection_prepare+0x644>
					node_rx->hdr.handle = conn->handle;
    c500:	8c23      	ldrh	r3, [r4, #32]
    c502:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    c504:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    c508:	230c      	movs	r3, #12
    c50a:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    c50c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c510:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c514:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    c516:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c51a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c51e:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    c520:	f7fd fe62 	bl	a1e8 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c524:	793b      	ldrb	r3, [r7, #4]
    c526:	f043 0303 	orr.w	r3, r3, #3
    c52a:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    c52c:	2305      	movs	r3, #5
    c52e:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c530:	2318      	movs	r3, #24
    c532:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    c534:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c538:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c53c:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    c53e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c542:	f3c3 1342 	ubfx	r3, r3, #5, #3
    c546:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    c548:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c54c:	817b      	strh	r3, [r7, #10]
    c54e:	e59c      	b.n	c08a <event_connection_prepare+0x9ca>
								 conn->latency +
    c550:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c552:	3306      	adds	r3, #6
    c554:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    c556:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    c55a:	e7e3      	b.n	c524 <event_connection_prepare+0xe64>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    c55c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c560:	1af3      	subs	r3, r6, r3
    c562:	0419      	lsls	r1, r3, #16
    c564:	f53f ad95 	bmi.w	c092 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c568:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c56c:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    c570:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    c574:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    c578:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    c57c:	bf18      	it	ne
    c57e:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    c582:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    c586:	bf1c      	itt	ne
    c588:	f367 03c5 	bfine	r3, r7, #3, #3
    c58c:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    c590:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    c594:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    c598:	d008      	beq.n	c5ac <event_connection_prepare+0xeec>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    c59a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c59e:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    c5a2:	095b      	lsrs	r3, r3, #5
    c5a4:	f363 0702 	bfi	r7, r3, #0, #3
    c5a8:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    c5ac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c5b0:	461f      	mov	r7, r3
    c5b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c5b6:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c5ba:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    c5bc:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c5c0:	d40b      	bmi.n	c5da <event_connection_prepare+0xf1a>
    c5c2:	b2fb      	uxtb	r3, r7
    c5c4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c5c8:	4283      	cmp	r3, r0
    c5ca:	d106      	bne.n	c5da <event_connection_prepare+0xf1a>
		    (conn->phy_rx == old_rx)) {
    c5cc:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c5d0:	f003 0307 	and.w	r3, r3, #7
    c5d4:	428b      	cmp	r3, r1
    c5d6:	f43f ad5c 	beq.w	c092 <event_connection_prepare+0x9d2>
		node_rx = packet_rx_reserve_get(2);
    c5da:	2002      	movs	r0, #2
    c5dc:	f7fc ff98 	bl	9510 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    c5e0:	2800      	cmp	r0, #0
    c5e2:	d088      	beq.n	c4f6 <event_connection_prepare+0xe36>
		node_rx->hdr.handle = conn->handle;
    c5e4:	8c23      	ldrh	r3, [r4, #32]
    c5e6:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c5e8:	230c      	movs	r3, #12
    c5ea:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    c5ec:	2300      	movs	r3, #0
    c5ee:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    c5f0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c5f4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c5f8:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    c5fa:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c5fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c602:	7343      	strb	r3, [r0, #13]
    c604:	e737      	b.n	c476 <event_connection_prepare+0xdb6>
			LL_ASSERT(0);
    c606:	4b0f      	ldr	r3, [pc, #60]	; (c644 <event_connection_prepare+0xf84>)
    c608:	9301      	str	r3, [sp, #4]
    c60a:	9300      	str	r3, [sp, #0]
    c60c:	4b10      	ldr	r3, [pc, #64]	; (c650 <event_connection_prepare+0xf90>)
    c60e:	f7ff ba0d 	b.w	ba2c <event_connection_prepare+0x36c>
		free_count_rx = packet_rx_acquired_count_get() +
    c612:	f7fc ff67 	bl	94e4 <packet_rx_acquired_count_get>
    c616:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    c618:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    c61c:	f7fa f992 	bl	6944 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    c620:	4438      	add	r0, r7
    c622:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    c624:	28ff      	cmp	r0, #255	; 0xff
    c626:	d91d      	bls.n	c664 <event_connection_prepare+0xfa4>
		LL_ASSERT(free_count_rx <= 0xFF);
    c628:	4b06      	ldr	r3, [pc, #24]	; (c644 <event_connection_prepare+0xf84>)
    c62a:	9301      	str	r3, [sp, #4]
    c62c:	9300      	str	r3, [sp, #0]
    c62e:	4a09      	ldr	r2, [pc, #36]	; (c654 <event_connection_prepare+0xf94>)
    c630:	4b09      	ldr	r3, [pc, #36]	; (c658 <event_connection_prepare+0xf98>)
    c632:	490a      	ldr	r1, [pc, #40]	; (c65c <event_connection_prepare+0xf9c>)
    c634:	480a      	ldr	r0, [pc, #40]	; (c660 <event_connection_prepare+0xfa0>)
    c636:	f7ff b853 	b.w	b6e0 <event_connection_prepare+0x20>
    c63a:	bf00      	nop
    c63c:	20000a1c 	.word	0x20000a1c
    c640:	000141ff 	.word	0x000141ff
    c644:	000142a9 	.word	0x000142a9
    c648:	000163b9 	.word	0x000163b9
    c64c:	00016415 	.word	0x00016415
    c650:	0001642c 	.word	0x0001642c
    c654:	00014ff8 	.word	0x00014ff8
    c658:	000163f3 	.word	0x000163f3
    c65c:	00015047 	.word	0x00015047
    c660:	000165bb 	.word	0x000165bb
		if (_radio.packet_rx_data_count != free_count_rx) {
    c664:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    c668:	4283      	cmp	r3, r0
    c66a:	d129      	bne.n	c6c0 <event_connection_prepare+0x1000>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c66c:	4881      	ldr	r0, [pc, #516]	; (c874 <event_connection_prepare+0x11b4>)
    c66e:	f7fa f93a 	bl	68e6 <mem_acquire>
		if (!node_tx) {
    c672:	4601      	mov	r1, r0
    c674:	b320      	cbz	r0, c6c0 <event_connection_prepare+0x1000>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    c676:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    c67a:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    c67e:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    c682:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    c684:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    c686:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    c688:	f365 0301 	bfi	r3, r5, #0, #2
    c68c:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c690:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    c692:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c694:	f043 0303 	orr.w	r3, r3, #3
    c698:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    c69a:	2309      	movs	r3, #9
    c69c:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    c69e:	2314      	movs	r3, #20
    c6a0:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    c6a2:	231b      	movs	r3, #27
    c6a4:	720b      	strb	r3, [r1, #8]
    c6a6:	2300      	movs	r3, #0
    c6a8:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    c6aa:	2348      	movs	r3, #72	; 0x48
    c6ac:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    c6ae:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    c6b0:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    c6b2:	4620      	mov	r0, r4
    c6b4:	f7fe ff34 	bl	b520 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    c6b8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c6bc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    c6c0:	f894 3020 	ldrb.w	r3, [r4, #32]
    c6c4:	f994 501d 	ldrsb.w	r5, [r4, #29]
    c6c8:	486b      	ldr	r0, [pc, #428]	; (c878 <event_connection_prepare+0x11b8>)
    c6ca:	496c      	ldr	r1, [pc, #432]	; (c87c <event_connection_prepare+0x11bc>)
    c6cc:	68a2      	ldr	r2, [r4, #8]
    c6ce:	9403      	str	r4, [sp, #12]
    c6d0:	3307      	adds	r3, #7
    c6d2:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    c6d6:	bf38      	it	cc
    c6d8:	4601      	movcc	r1, r0
    c6da:	b2db      	uxtb	r3, r3
    c6dc:	e88d 000c 	stmia.w	sp, {r2, r3}
    c6e0:	9102      	str	r1, [sp, #8]
    c6e2:	1d23      	adds	r3, r4, #4
    c6e4:	4622      	mov	r2, r4
    c6e6:	990c      	ldr	r1, [sp, #48]	; 0x30
    c6e8:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    c6ea:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    c6ec:	f7fe fd90 	bl	b210 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    c6f0:	8466      	strh	r6, [r4, #34]	; 0x22
}
    c6f2:	b00f      	add	sp, #60	; 0x3c
    c6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    c6f8:	f7fc fef4 	bl	94e4 <packet_rx_acquired_count_get>
    c6fc:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    c6fe:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    c702:	f7fa f91f 	bl	6944 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    c706:	4438      	add	r0, r7
    c708:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    c70a:	28ff      	cmp	r0, #255	; 0xff
    c70c:	d88c      	bhi.n	c628 <event_connection_prepare+0xf68>
		if (_radio.packet_rx_data_count != free_count_rx) {
    c70e:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    c712:	4283      	cmp	r3, r0
    c714:	d005      	beq.n	c722 <event_connection_prepare+0x1062>
		LL_ASSERT(0);
    c716:	4b5a      	ldr	r3, [pc, #360]	; (c880 <event_connection_prepare+0x11c0>)
    c718:	9301      	str	r3, [sp, #4]
    c71a:	9300      	str	r3, [sp, #0]
    c71c:	4b59      	ldr	r3, [pc, #356]	; (c884 <event_connection_prepare+0x11c4>)
    c71e:	f7ff b985 	b.w	ba2c <event_connection_prepare+0x36c>
		conn->llcp_length.ack = conn->llcp_length.req;
    c722:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    c726:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    c72a:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    c72e:	2100      	movs	r1, #0
    c730:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    c734:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    c738:	f361 02c3 	bfi	r2, r1, #3, #1
    c73c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    c740:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    c744:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    c746:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    c74a:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    c74c:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    c750:	f7fa f8f8 	bl	6944 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    c754:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    c758:	b10b      	cbz	r3, c75e <event_connection_prepare+0x109e>
			free_count_conn++;
    c75a:	3001      	adds	r0, #1
    c75c:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    c75e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    c762:	b10b      	cbz	r3, c768 <event_connection_prepare+0x10a8>
			free_count_conn++;
    c764:	3001      	adds	r0, #1
    c766:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    c768:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    c76a:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    c76e:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    c770:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    c772:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    c776:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    c778:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    c77a:	d052      	beq.n	c822 <event_connection_prepare+0x1162>
    c77c:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    c780:	42bb      	cmp	r3, r7
    c782:	d34e      	bcc.n	c822 <event_connection_prepare+0x1162>
		node_rx = packet_rx_reserve_get(2);
    c784:	2002      	movs	r0, #2
    c786:	f7fc fec3 	bl	9510 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    c78a:	2800      	cmp	r0, #0
    c78c:	d155      	bne.n	c83a <event_connection_prepare+0x117a>
    c78e:	4b3c      	ldr	r3, [pc, #240]	; (c880 <event_connection_prepare+0x11c0>)
    c790:	9301      	str	r3, [sp, #4]
    c792:	9300      	str	r3, [sp, #0]
    c794:	4b3b      	ldr	r3, [pc, #236]	; (c884 <event_connection_prepare+0x11c4>)
    c796:	f7ff bab5 	b.w	bd04 <event_connection_prepare+0x644>
				if (_radio.packet_rx_acquire == 0) {
    c79a:	b90b      	cbnz	r3, c7a0 <event_connection_prepare+0x10e0>
						_radio.packet_rx_count - 1;
    c79c:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    c7a0:	3b01      	subs	r3, #1
    c7a2:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    c7a6:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    c7aa:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    c7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c7b2:	4649      	mov	r1, r9
    c7b4:	6818      	ldr	r0, [r3, #0]
    c7b6:	f7fa f8b0 	bl	691a <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    c7ba:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    c7be:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    c7c2:	3a01      	subs	r2, #1
    c7c4:	4293      	cmp	r3, r2
    c7c6:	db08      	blt.n	c7da <event_connection_prepare+0x111a>
    c7c8:	4b2d      	ldr	r3, [pc, #180]	; (c880 <event_connection_prepare+0x11c0>)
    c7ca:	9301      	str	r3, [sp, #4]
    c7cc:	9300      	str	r3, [sp, #0]
    c7ce:	4a2e      	ldr	r2, [pc, #184]	; (c888 <event_connection_prepare+0x11c8>)
    c7d0:	4b2c      	ldr	r3, [pc, #176]	; (c884 <event_connection_prepare+0x11c4>)
    c7d2:	492e      	ldr	r1, [pc, #184]	; (c88c <event_connection_prepare+0x11cc>)
    c7d4:	482e      	ldr	r0, [pc, #184]	; (c890 <event_connection_prepare+0x11d0>)
    c7d6:	f7fe bf83 	b.w	b6e0 <event_connection_prepare+0x20>
				_radio.link_rx_data_quota++;
    c7da:	3301      	adds	r3, #1
    c7dc:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    c7e0:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    c7e4:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    c7e8:	4293      	cmp	r3, r2
    c7ea:	d1d6      	bne.n	c79a <event_connection_prepare+0x10da>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    c7ec:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    c7ee:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    c7f2:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    c7f4:	bf9a      	itte	ls
    c7f6:	2334      	movls	r3, #52	; 0x34
    c7f8:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    c7fc:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    c800:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    c804:	fbb2 f2f1 	udiv	r2, r2, r1
    c808:	b2d2      	uxtb	r2, r2
    c80a:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    c80e:	b95a      	cbnz	r2, c828 <event_connection_prepare+0x1168>
    c810:	4b1b      	ldr	r3, [pc, #108]	; (c880 <event_connection_prepare+0x11c0>)
    c812:	9301      	str	r3, [sp, #4]
    c814:	9300      	str	r3, [sp, #0]
    c816:	4a1c      	ldr	r2, [pc, #112]	; (c888 <event_connection_prepare+0x11c8>)
    c818:	4b1a      	ldr	r3, [pc, #104]	; (c884 <event_connection_prepare+0x11c4>)
    c81a:	491c      	ldr	r1, [pc, #112]	; (c88c <event_connection_prepare+0x11cc>)
    c81c:	481d      	ldr	r0, [pc, #116]	; (c894 <event_connection_prepare+0x11d4>)
    c81e:	f7fe bf5f 	b.w	b6e0 <event_connection_prepare+0x20>
				mem_release(node_rx->hdr.onion.link,
    c822:	f8df 9078 	ldr.w	r9, [pc, #120]	; c89c <event_connection_prepare+0x11dc>
    c826:	e7db      	b.n	c7e0 <event_connection_prepare+0x1120>
			mem_init(_radio.pkt_rx_data_pool,
    c828:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    c82c:	4b1a      	ldr	r3, [pc, #104]	; (c898 <event_connection_prepare+0x11d8>)
    c82e:	f7fa f833 	bl	6898 <mem_init>
			packet_rx_allocate(4);
    c832:	2004      	movs	r0, #4
    c834:	f7fc fee4 	bl	9600 <packet_rx_allocate>
    c838:	e7a4      	b.n	c784 <event_connection_prepare+0x10c4>
		node_rx->hdr.handle = conn->handle;
    c83a:	8c23      	ldrh	r3, [r4, #32]
    c83c:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c83e:	2301      	movs	r3, #1
    c840:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    c842:	7a03      	ldrb	r3, [r0, #8]
    c844:	f043 0303 	orr.w	r3, r3, #3
    c848:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    c84a:	2309      	movs	r3, #9
    c84c:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    c84e:	2315      	movs	r3, #21
    c850:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    c852:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    c854:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    c856:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    c858:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    c85a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    c85c:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    c85e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    c860:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    c862:	f7fd fcc1 	bl	a1e8 <packet_rx_enqueue>
    c866:	e72b      	b.n	c6c0 <event_connection_prepare+0x1000>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    c868:	4902      	ldr	r1, [pc, #8]	; (c874 <event_connection_prepare+0x11b4>)
    c86a:	4638      	mov	r0, r7
    c86c:	f7fa f855 	bl	691a <mem_release>
    c870:	e40f      	b.n	c092 <event_connection_prepare+0x9d2>
    c872:	bf00      	nop
    c874:	20000a1c 	.word	0x20000a1c
    c878:	0000cbcd 	.word	0x0000cbcd
    c87c:	0000c8e5 	.word	0x0000c8e5
    c880:	000142a9 	.word	0x000142a9
    c884:	000163f3 	.word	0x000163f3
    c888:	00014ff8 	.word	0x00014ff8
    c88c:	00015047 	.word	0x00015047
    c890:	000165f2 	.word	0x000165f2
    c894:	0001664c 	.word	0x0001664c
    c898:	200009f0 	.word	0x200009f0
    c89c:	20000a08 	.word	0x20000a08

0000c8a0 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    c8a0:	f7fe bf0e 	b.w	b6c0 <event_connection_prepare>

0000c8a4 <event_slave_prepare>:
    c8a4:	f7fe bf0c 	b.w	b6c0 <event_connection_prepare>

0000c8a8 <connection_configure>:
{
    c8a8:	b510      	push	{r4, lr}
    c8aa:	4604      	mov	r4, r0
	radio_reset();
    c8ac:	f005 f962 	bl	11b74 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    c8b0:	2000      	movs	r0, #0
    c8b2:	f005 f989 	bl	11bc8 <radio_tx_power_set>
	radio_isr_set(isr);
    c8b6:	480a      	ldr	r0, [pc, #40]	; (c8e0 <connection_configure+0x38>)
    c8b8:	f005 f926 	bl	11b08 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    c8bc:	f104 0010 	add.w	r0, r4, #16
    c8c0:	f005 f9a0 	bl	11c04 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    c8c4:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    c8c6:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    c8c8:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    c8ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    c8ce:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    c8d0:	f240 605b 	movw	r0, #1627	; 0x65b
    c8d4:	4319      	orrs	r1, r3
}
    c8d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    c8da:	f005 ba3b 	b.w	11d54 <radio_crc_configure>
    c8de:	bf00      	nop
    c8e0:	0000df91 	.word	0x0000df91

0000c8e4 <event_slave>:
{
    c8e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c8e8:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    c8ea:	4b71      	ldr	r3, [pc, #452]	; (cab0 <event_slave+0x1cc>)
    c8ec:	7cda      	ldrb	r2, [r3, #19]
{
    c8ee:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    c8f0:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    c8f4:	461d      	mov	r5, r3
    c8f6:	b172      	cbz	r2, c916 <event_slave+0x32>
    c8f8:	4b6e      	ldr	r3, [pc, #440]	; (cab4 <event_slave+0x1d0>)
    c8fa:	9301      	str	r3, [sp, #4]
    c8fc:	9300      	str	r3, [sp, #0]
    c8fe:	4a6e      	ldr	r2, [pc, #440]	; (cab8 <event_slave+0x1d4>)
    c900:	4b6e      	ldr	r3, [pc, #440]	; (cabc <event_slave+0x1d8>)
    c902:	496f      	ldr	r1, [pc, #444]	; (cac0 <event_slave+0x1dc>)
    c904:	486f      	ldr	r0, [pc, #444]	; (cac4 <event_slave+0x1e0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    c906:	f7f4 fb41 	bl	f8c <printk>
    c90a:	4040      	eors	r0, r0
    c90c:	f380 8811 	msr	BASEPRI, r0
    c910:	f04f 0004 	mov.w	r0, #4
    c914:	df02      	svc	2
    c916:	7c1b      	ldrb	r3, [r3, #16]
    c918:	8c22      	ldrh	r2, [r4, #32]
    c91a:	b2db      	uxtb	r3, r3
    c91c:	3207      	adds	r2, #7
    c91e:	4293      	cmp	r3, r2
    c920:	d007      	beq.n	c932 <event_slave+0x4e>
    c922:	4b64      	ldr	r3, [pc, #400]	; (cab4 <event_slave+0x1d0>)
    c924:	9301      	str	r3, [sp, #4]
    c926:	9300      	str	r3, [sp, #0]
    c928:	4a63      	ldr	r2, [pc, #396]	; (cab8 <event_slave+0x1d4>)
    c92a:	4b64      	ldr	r3, [pc, #400]	; (cabc <event_slave+0x1d8>)
    c92c:	4964      	ldr	r1, [pc, #400]	; (cac0 <event_slave+0x1dc>)
    c92e:	4866      	ldr	r0, [pc, #408]	; (cac8 <event_slave+0x1e4>)
    c930:	e7e9      	b.n	c906 <event_slave+0x22>
	_radio.packet_counter = 0;
    c932:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    c936:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    c93a:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    c93c:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    c93e:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    c940:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    c942:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    c944:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    c946:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    c94a:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    c94c:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    c94e:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    c950:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    c952:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    c954:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    c956:	f7ff ffa7 	bl	c8a8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    c95a:	2096      	movs	r0, #150	; 0x96
    c95c:	f005 fab4 	bl	11ec8 <radio_tmr_tifs_set>
				     conn->phy_flags);
    c960:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    c964:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    c968:	09d3      	lsrs	r3, r2, #7
    c96a:	4631      	mov	r1, r6
    c96c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    c970:	f000 0007 	and.w	r0, r0, #7
    c974:	f005 fa18 	bl	11da8 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    c978:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    c97c:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    c980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    c984:	4620      	mov	r0, r4
    c986:	3108      	adds	r1, #8
    c988:	f7fd f920 	bl	9bcc <rx_packet_set>
	if (conn->data_chan_sel) {
    c98c:	7f63      	ldrb	r3, [r4, #29]
    c98e:	f013 0f40 	tst.w	r3, #64	; 0x40
    c992:	f104 0217 	add.w	r2, r4, #23
    c996:	d05a      	beq.n	ca4e <event_slave+0x16a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    c998:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    c99a:	8be1      	ldrh	r1, [r4, #30]
    c99c:	3801      	subs	r0, #1
    c99e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c9a2:	b280      	uxth	r0, r0
    c9a4:	f7fe fd78 	bl	b498 <chan_sel_2>
	chan_set(data_chan_use);
    c9a8:	f7fe f84c 	bl	aa44 <chan_set>
	conn->slave.window_widening_event_us +=
    c9ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
    c9ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    c9b0:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    c9b2:	2200      	movs	r2, #0
    c9b4:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    c9b6:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    c9b8:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    c9ba:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    c9bc:	bf88      	it	hi
    c9be:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    c9c0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    c9c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    c9c4:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    c9c6:	4413      	add	r3, r2
    c9c8:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    c9ca:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    c9cc:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    c9ce:	f107 0109 	add.w	r1, r7, #9
    c9d2:	4630      	mov	r0, r6
    c9d4:	f005 fa84 	bl	11ee0 <radio_tmr_start>
    c9d8:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    c9da:	f005 fb1d 	bl	12018 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    c9de:	4630      	mov	r0, r6
    c9e0:	f005 fb3c 	bl	1205c <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    c9e4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    c9e6:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    c9e8:	f103 0650 	add.w	r6, r3, #80	; 0x50
    c9ec:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    c9f0:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    c9f4:	2101      	movs	r1, #1
    c9f6:	f000 0007 	and.w	r0, r0, #7
    c9fa:	f005 f95c 	bl	11cb6 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    c9fe:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    ca00:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    ca02:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    ca06:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    ca0a:	2802      	cmp	r0, #2
    ca0c:	d03f      	beq.n	ca8e <event_slave+0x1aa>
		return 40;
    ca0e:	2804      	cmp	r0, #4
    ca10:	bf0c      	ite	eq
    ca12:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    ca16:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    ca18:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    ca1a:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    ca1c:	f005 f94d 	bl	11cba <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    ca20:	4430      	add	r0, r6
    ca22:	f005 fadb 	bl	11fdc <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    ca26:	f894 1020 	ldrb.w	r1, [r4, #32]
    ca2a:	3107      	adds	r1, #7
    ca2c:	463a      	mov	r2, r7
    ca2e:	b2c9      	uxtb	r1, r1
    ca30:	4620      	mov	r0, r4
    ca32:	f7fe fab9 	bl	afa8 <preempt_calc>
    ca36:	4603      	mov	r3, r0
    ca38:	b358      	cbz	r0, ca92 <event_slave+0x1ae>
		_radio.state = STATE_STOP;
    ca3a:	2304      	movs	r3, #4
    ca3c:	752b      	strb	r3, [r5, #20]
		radio_disable();
    ca3e:	f005 f94d 	bl	11cdc <radio_disable>
	packet_tx_enqueue(2);
    ca42:	2002      	movs	r0, #2
}
    ca44:	b002      	add	sp, #8
    ca46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    ca4a:	f7fd bf11 	b.w	a870 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    ca4e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    ca50:	7fa6      	ldrb	r6, [r4, #30]
    ca52:	fb01 6606 	mla	r6, r1, r6, r6
    ca56:	7fe1      	ldrb	r1, [r4, #31]
    ca58:	2025      	movs	r0, #37	; 0x25
    ca5a:	440e      	add	r6, r1
    ca5c:	fb96 f1f0 	sdiv	r1, r6, r0
    ca60:	fb00 6611 	mls	r6, r0, r1, r6
    ca64:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    ca66:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    ca68:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    ca6a:	5c51      	ldrb	r1, [r2, r1]
    ca6c:	f006 0607 	and.w	r6, r6, #7
    ca70:	fa41 f606 	asr.w	r6, r1, r6
    ca74:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    ca76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    ca7a:	d495      	bmi.n	c9a8 <event_slave+0xc4>
		chan_index = chan_next % chan_count;
    ca7c:	fbb0 f1f3 	udiv	r1, r0, r3
    ca80:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    ca84:	b2c9      	uxtb	r1, r1
    ca86:	4610      	mov	r0, r2
    ca88:	f7fc fd10 	bl	94ac <chan_sel_remap>
    ca8c:	e78c      	b.n	c9a8 <event_slave+0xc4>
		return 24;
    ca8e:	2318      	movs	r3, #24
    ca90:	e7c2      	b.n	ca18 <event_slave+0x134>
		ticker_status =
    ca92:	4a0e      	ldr	r2, [pc, #56]	; (cacc <event_slave+0x1e8>)
    ca94:	4601      	mov	r1, r0
    ca96:	f7fa fecb 	bl	7830 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ca9a:	f030 0302 	bics.w	r3, r0, #2
    ca9e:	d0d0      	beq.n	ca42 <event_slave+0x15e>
    caa0:	4b04      	ldr	r3, [pc, #16]	; (cab4 <event_slave+0x1d0>)
    caa2:	9301      	str	r3, [sp, #4]
    caa4:	9300      	str	r3, [sp, #0]
    caa6:	4a04      	ldr	r2, [pc, #16]	; (cab8 <event_slave+0x1d4>)
    caa8:	4b04      	ldr	r3, [pc, #16]	; (cabc <event_slave+0x1d8>)
    caaa:	4905      	ldr	r1, [pc, #20]	; (cac0 <event_slave+0x1dc>)
    caac:	4808      	ldr	r0, [pc, #32]	; (cad0 <event_slave+0x1ec>)
    caae:	e72a      	b.n	c906 <event_slave+0x22>
    cab0:	200008c0 	.word	0x200008c0
    cab4:	000142a9 	.word	0x000142a9
    cab8:	00014ff8 	.word	0x00014ff8
    cabc:	00016445 	.word	0x00016445
    cac0:	00015047 	.word	0x00015047
    cac4:	00016689 	.word	0x00016689
    cac8:	0001673c 	.word	0x0001673c
    cacc:	0000a5e5 	.word	0x0000a5e5
    cad0:	0001656d 	.word	0x0001656d

0000cad4 <prepare_pdu_data_tx>:
	    conn->empty ||
    cad4:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    cad8:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    cadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cade:	4604      	mov	r4, r0
    cae0:	460e      	mov	r6, r1
	if (/* empty packet */
    cae2:	d109      	bne.n	caf8 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    cae4:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    cae8:	b131      	cbz	r1, caf8 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    caea:	f01c 0f08 	tst.w	ip, #8
    caee:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    caf2:	d022      	beq.n	cb3a <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    caf4:	4571      	cmp	r1, lr
    caf6:	d020      	beq.n	cb3a <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    caf8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    cafc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cb00:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    cb04:	f005 f93c 	bl	11d80 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cb08:	7803      	ldrb	r3, [r0, #0]
    cb0a:	2201      	movs	r2, #1
    cb0c:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    cb10:	2200      	movs	r2, #0
    cb12:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    cb14:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cb18:	7003      	strb	r3, [r0, #0]
    cb1a:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    cb1c:	b152      	cbz	r2, cb34 <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    cb1e:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    cb22:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    cb24:	7803      	ldrb	r3, [r0, #0]
    cb26:	f36f 1347 	bfc	r3, #5, #3
    cb2a:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    cb2c:	2300      	movs	r3, #0
    cb2e:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    cb30:	6030      	str	r0, [r6, #0]
    cb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    cb34:	f362 1304 	bfi	r3, r2, #4, #1
    cb38:	e7f3      	b.n	cb22 <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    cb3a:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    cb3e:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    cb42:	1d0d      	adds	r5, r1, #4
    cb44:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    cb46:	b913      	cbnz	r3, cb4e <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    cb48:	7843      	ldrb	r3, [r0, #1]
    cb4a:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    cb4e:	b122      	cbz	r2, cb5a <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cb50:	5cab      	ldrb	r3, [r5, r2]
    cb52:	2701      	movs	r7, #1
    cb54:	f367 0301 	bfi	r3, r7, #0, #2
    cb58:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    cb5a:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    cb5e:	1abf      	subs	r7, r7, r2
    cb60:	b2ff      	uxtb	r7, r7
    cb62:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    cb64:	5cab      	ldrb	r3, [r5, r2]
    cb66:	f36f 1304 	bfc	r3, #4, #1
    cb6a:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    cb6c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    cb70:	f003 0307 	and.w	r3, r3, #7
    cb74:	2b02      	cmp	r3, #2
    cb76:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    cb78:	bf15      	itete	ne
    cb7a:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    cb7c:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    cb7e:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    cb80:	3b0b      	subeq	r3, #11
    cb82:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    cb84:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    cb88:	bf18      	it	ne
    cb8a:	3b04      	subne	r3, #4
    cb8c:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    cb90:	bf18      	it	ne
    cb92:	b29b      	uxthne	r3, r3
    cb94:	4563      	cmp	r3, ip
    cb96:	bf28      	it	cs
    cb98:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    cb9a:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    cb9c:	bf81      	itttt	hi
    cb9e:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    cba0:	5cab      	ldrbhi	r3, [r5, r2]
    cba2:	f043 0310 	orrhi.w	r3, r3, #16
    cba6:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    cba8:	680b      	ldr	r3, [r1, #0]
    cbaa:	b11b      	cbz	r3, cbb4 <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    cbac:	5cab      	ldrb	r3, [r5, r2]
    cbae:	f043 0310 	orr.w	r3, r3, #16
    cbb2:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    cbb4:	f1be 0f00 	cmp.w	lr, #0
    cbb8:	d1b4      	bne.n	cb24 <prepare_pdu_data_tx+0x50>
    cbba:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    cbbe:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    cbc0:	bf1c      	itt	ne
    cbc2:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    cbc6:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    cbca:	e7ab      	b.n	cb24 <prepare_pdu_data_tx+0x50>

0000cbcc <event_master>:
{
    cbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbce:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    cbd0:	4b56      	ldr	r3, [pc, #344]	; (cd2c <event_master+0x160>)
    cbd2:	7cd9      	ldrb	r1, [r3, #19]
{
    cbd4:	b085      	sub	sp, #20
    cbd6:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    cbd8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    cbdc:	461d      	mov	r5, r3
    cbde:	b171      	cbz	r1, cbfe <event_master+0x32>
    cbe0:	4b53      	ldr	r3, [pc, #332]	; (cd30 <event_master+0x164>)
    cbe2:	9301      	str	r3, [sp, #4]
    cbe4:	9300      	str	r3, [sp, #0]
    cbe6:	4a53      	ldr	r2, [pc, #332]	; (cd34 <event_master+0x168>)
    cbe8:	4b53      	ldr	r3, [pc, #332]	; (cd38 <event_master+0x16c>)
    cbea:	4954      	ldr	r1, [pc, #336]	; (cd3c <event_master+0x170>)
    cbec:	4854      	ldr	r0, [pc, #336]	; (cd40 <event_master+0x174>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    cbee:	f7f4 f9cd 	bl	f8c <printk>
    cbf2:	4040      	eors	r0, r0
    cbf4:	f380 8811 	msr	BASEPRI, r0
    cbf8:	f04f 0004 	mov.w	r0, #4
    cbfc:	df02      	svc	2
    cbfe:	7c1b      	ldrb	r3, [r3, #16]
    cc00:	8c21      	ldrh	r1, [r4, #32]
    cc02:	b2db      	uxtb	r3, r3
    cc04:	3107      	adds	r1, #7
    cc06:	428b      	cmp	r3, r1
    cc08:	d007      	beq.n	cc1a <event_master+0x4e>
    cc0a:	4b49      	ldr	r3, [pc, #292]	; (cd30 <event_master+0x164>)
    cc0c:	9301      	str	r3, [sp, #4]
    cc0e:	9300      	str	r3, [sp, #0]
    cc10:	4a48      	ldr	r2, [pc, #288]	; (cd34 <event_master+0x168>)
    cc12:	4b49      	ldr	r3, [pc, #292]	; (cd38 <event_master+0x16c>)
    cc14:	4949      	ldr	r1, [pc, #292]	; (cd3c <event_master+0x170>)
    cc16:	484b      	ldr	r0, [pc, #300]	; (cd44 <event_master+0x178>)
    cc18:	e7e9      	b.n	cbee <event_master+0x22>
	_radio.packet_counter = 0;
    cc1a:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    cc1e:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    cc22:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    cc24:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    cc26:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    cc28:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    cc2a:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    cc2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    cc2e:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    cc32:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    cc34:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    cc36:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    cc38:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    cc3a:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    cc3c:	f7fd fe18 	bl	a870 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    cc40:	a903      	add	r1, sp, #12
    cc42:	4620      	mov	r0, r4
    cc44:	f7ff ff46 	bl	cad4 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    cc48:	9903      	ldr	r1, [sp, #12]
    cc4a:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    cc4e:	780b      	ldrb	r3, [r1, #0]
    cc50:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    cc54:	f3c2 0240 	ubfx	r2, r2, #1, #1
    cc58:	f362 0382 	bfi	r3, r2, #2, #1
    cc5c:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    cc5e:	4620      	mov	r0, r4
    cc60:	f7ff fe22 	bl	c8a8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    cc64:	2096      	movs	r0, #150	; 0x96
    cc66:	f005 f92f 	bl	11ec8 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    cc6a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    cc6e:	f000 0007 	and.w	r0, r0, #7
    cc72:	f005 f88d 	bl	11d90 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    cc76:	9903      	ldr	r1, [sp, #12]
    cc78:	4620      	mov	r0, r4
    cc7a:	f7fc ffd3 	bl	9c24 <tx_packet_set>
	if (conn->data_chan_sel) {
    cc7e:	7f63      	ldrb	r3, [r4, #29]
    cc80:	f013 0f40 	tst.w	r3, #64	; 0x40
    cc84:	f104 0217 	add.w	r2, r4, #23
    cc88:	d021      	beq.n	ccce <event_master+0x102>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    cc8a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    cc8c:	8be1      	ldrh	r1, [r4, #30]
    cc8e:	3801      	subs	r0, #1
    cc90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cc94:	b280      	uxth	r0, r0
    cc96:	f7fe fbff 	bl	b498 <chan_sel_2>
	chan_set(data_chan_use);
    cc9a:	f7fd fed3 	bl	aa44 <chan_set>
		remainder_us = radio_tmr_start(1,
    cc9e:	68ea      	ldr	r2, [r5, #12]
    cca0:	f107 0109 	add.w	r1, r7, #9
    cca4:	2001      	movs	r0, #1
    cca6:	f005 f91b 	bl	11ee0 <radio_tmr_start>
		radio_tmr_end_capture();
    ccaa:	f005 f9e9 	bl	12080 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    ccae:	f894 1020 	ldrb.w	r1, [r4, #32]
    ccb2:	3107      	adds	r1, #7
    ccb4:	463a      	mov	r2, r7
    ccb6:	b2c9      	uxtb	r1, r1
    ccb8:	4620      	mov	r0, r4
    ccba:	f7fe f975 	bl	afa8 <preempt_calc>
	if (0 !=
    ccbe:	4603      	mov	r3, r0
    ccc0:	b328      	cbz	r0, cd0e <event_master+0x142>
		_radio.state = STATE_STOP;
    ccc2:	2304      	movs	r3, #4
    ccc4:	752b      	strb	r3, [r5, #20]
		radio_disable();
    ccc6:	f005 f809 	bl	11cdc <radio_disable>
}
    ccca:	b005      	add	sp, #20
    cccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    ccce:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    ccd0:	7fa6      	ldrb	r6, [r4, #30]
    ccd2:	fb01 6606 	mla	r6, r1, r6, r6
    ccd6:	7fe1      	ldrb	r1, [r4, #31]
    ccd8:	2025      	movs	r0, #37	; 0x25
    ccda:	440e      	add	r6, r1
    ccdc:	fb96 f1f0 	sdiv	r1, r6, r0
    cce0:	fb00 6611 	mls	r6, r0, r1, r6
    cce4:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cce6:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    cce8:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    ccea:	5c51      	ldrb	r1, [r2, r1]
    ccec:	f006 0607 	and.w	r6, r6, #7
    ccf0:	fa41 f606 	asr.w	r6, r1, r6
    ccf4:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    ccf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    ccfa:	d4ce      	bmi.n	cc9a <event_master+0xce>
		chan_index = chan_next % chan_count;
    ccfc:	fbb0 f1f3 	udiv	r1, r0, r3
    cd00:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    cd04:	b2c9      	uxtb	r1, r1
    cd06:	4610      	mov	r0, r2
    cd08:	f7fc fbd0 	bl	94ac <chan_sel_remap>
    cd0c:	e7c5      	b.n	cc9a <event_master+0xce>
		ticker_status =
    cd0e:	4a0e      	ldr	r2, [pc, #56]	; (cd48 <event_master+0x17c>)
    cd10:	4601      	mov	r1, r0
    cd12:	f7fa fd8d 	bl	7830 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cd16:	f030 0302 	bics.w	r3, r0, #2
    cd1a:	d0d6      	beq.n	ccca <event_master+0xfe>
    cd1c:	4b04      	ldr	r3, [pc, #16]	; (cd30 <event_master+0x164>)
    cd1e:	9301      	str	r3, [sp, #4]
    cd20:	9300      	str	r3, [sp, #0]
    cd22:	4a04      	ldr	r2, [pc, #16]	; (cd34 <event_master+0x168>)
    cd24:	4b04      	ldr	r3, [pc, #16]	; (cd38 <event_master+0x16c>)
    cd26:	4905      	ldr	r1, [pc, #20]	; (cd3c <event_master+0x170>)
    cd28:	4808      	ldr	r0, [pc, #32]	; (cd4c <event_master+0x180>)
    cd2a:	e760      	b.n	cbee <event_master+0x22>
    cd2c:	200008c0 	.word	0x200008c0
    cd30:	000142a9 	.word	0x000142a9
    cd34:	00014ff8 	.word	0x00014ff8
    cd38:	00016451 	.word	0x00016451
    cd3c:	00015047 	.word	0x00015047
    cd40:	00016689 	.word	0x00016689
    cd44:	0001673c 	.word	0x0001673c
    cd48:	0000a5e5 	.word	0x0000a5e5
    cd4c:	0001656d 	.word	0x0001656d

0000cd50 <isr_rx_conn_pkt_ctrl>:
{
    cd50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    cd54:	7ac7      	ldrb	r7, [r0, #11]
{
    cd56:	4604      	mov	r4, r0
    cd58:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    cd5a:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    cd5e:	2f19      	cmp	r7, #25
    cd60:	f201 80e0 	bhi.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
    cd64:	e8df f017 	tbh	[pc, r7, lsl #1]
    cd68:	0081001a 	.word	0x0081001a
    cd6c:	00cc00bd 	.word	0x00cc00bd
    cd70:	012200fa 	.word	0x012200fa
    cd74:	05850154 	.word	0x05850154
    cd78:	01c40190 	.word	0x01c40190
    cd7c:	021c01f2 	.word	0x021c01f2
    cd80:	02b6024d 	.word	0x02b6024d
    cd84:	02ce01a6 	.word	0x02ce01a6
    cd88:	04a40421 	.word	0x04a40421
    cd8c:	057a0560 	.word	0x057a0560
    cd90:	06480648 	.word	0x06480648
    cd94:	07ea071d 	.word	0x07ea071d
    cd98:	08ab0821 	.word	0x08ab0821
		if (!_radio.conn_curr->role ||
    cd9c:	4ecb      	ldr	r6, [pc, #812]	; (d0cc <isr_rx_conn_pkt_ctrl+0x37c>)
    cd9e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    cda2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    cda6:	2b00      	cmp	r3, #0
    cda8:	f281 80bc 	bge.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    cdac:	7a41      	ldrb	r1, [r0, #9]
    cdae:	2000      	movs	r0, #0
    cdb0:	f7fc fb50 	bl	9454 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    cdb4:	2800      	cmp	r0, #0
    cdb6:	f001 80b5 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    cdba:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    cdbe:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    cdc0:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    cdc2:	041b      	lsls	r3, r3, #16
    cdc4:	f101 80c4 	bmi.w	df50 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    cdc8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    cdcc:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    cdd0:	429a      	cmp	r2, r3
    cdd2:	d007      	beq.n	cde4 <isr_rx_conn_pkt_ctrl+0x94>
    cdd4:	4bbe      	ldr	r3, [pc, #760]	; (d0d0 <isr_rx_conn_pkt_ctrl+0x380>)
    cdd6:	9301      	str	r3, [sp, #4]
    cdd8:	9300      	str	r3, [sp, #0]
    cdda:	4bbe      	ldr	r3, [pc, #760]	; (d0d4 <isr_rx_conn_pkt_ctrl+0x384>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    cddc:	4abe      	ldr	r2, [pc, #760]	; (d0d8 <isr_rx_conn_pkt_ctrl+0x388>)
    cdde:	49bf      	ldr	r1, [pc, #764]	; (d0dc <isr_rx_conn_pkt_ctrl+0x38c>)
    cde0:	48bf      	ldr	r0, [pc, #764]	; (d0e0 <isr_rx_conn_pkt_ctrl+0x390>)
    cde2:	e0f7      	b.n	cfd4 <isr_rx_conn_pkt_ctrl+0x284>
	if (_radio.conn_upd == 0) {
    cde4:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    cde8:	b90a      	cbnz	r2, cdee <isr_rx_conn_pkt_ctrl+0x9e>
		_radio.conn_upd = conn;
    cdea:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    cdee:	7b22      	ldrb	r2, [r4, #12]
    cdf0:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    cdf4:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    cdf8:	f240 42e2 	movw	r2, #1250	; 0x4e2
    cdfc:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    cdfe:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    ce02:	7c20      	ldrb	r0, [r4, #16]
    ce04:	7be2      	ldrb	r2, [r4, #15]
    ce06:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    ce0a:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    ce0e:	7ca0      	ldrb	r0, [r4, #18]
    ce10:	7c62      	ldrb	r2, [r4, #17]
    ce12:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    ce16:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    ce1a:	7ce2      	ldrb	r2, [r4, #19]
    ce1c:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    ce1e:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    ce22:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    ce26:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    ce2a:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    ce2e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    ce32:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    ce36:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    ce38:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    ce3c:	2201      	movs	r2, #1
    ce3e:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    ce42:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    ce46:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    ce4a:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    ce4e:	4293      	cmp	r3, r2
    ce50:	d007      	beq.n	ce62 <isr_rx_conn_pkt_ctrl+0x112>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    ce52:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    ce56:	f003 0307 	and.w	r3, r3, #7
    ce5a:	2b04      	cmp	r3, #4
    ce5c:	d101      	bne.n	ce62 <isr_rx_conn_pkt_ctrl+0x112>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    ce5e:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    ce62:	2000      	movs	r0, #0
    ce64:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    ce68:	e038      	b.n	cedc <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    ce6a:	4b98      	ldr	r3, [pc, #608]	; (d0cc <isr_rx_conn_pkt_ctrl+0x37c>)
    ce6c:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    ce70:	f995 301d 	ldrsb.w	r3, [r5, #29]
    ce74:	2b00      	cmp	r3, #0
    ce76:	f281 8055 	bge.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    ce7a:	7a41      	ldrb	r1, [r0, #9]
    ce7c:	2001      	movs	r0, #1
    ce7e:	f7fc fae9 	bl	9454 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    ce82:	2800      	cmp	r0, #0
    ce84:	f001 804e 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    ce88:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    ce8c:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    ce8e:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    ce90:	041f      	lsls	r7, r3, #16
    ce92:	f101 805d 	bmi.w	df50 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    ce96:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    ce9a:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    ce9e:	429a      	cmp	r2, r3
    cea0:	d004      	beq.n	ceac <isr_rx_conn_pkt_ctrl+0x15c>
    cea2:	4b8b      	ldr	r3, [pc, #556]	; (d0d0 <isr_rx_conn_pkt_ctrl+0x380>)
    cea4:	9301      	str	r3, [sp, #4]
    cea6:	9300      	str	r3, [sp, #0]
    cea8:	4b8e      	ldr	r3, [pc, #568]	; (d0e4 <isr_rx_conn_pkt_ctrl+0x394>)
    ceaa:	e797      	b.n	cddc <isr_rx_conn_pkt_ctrl+0x8c>
	memcpy(&conn->llcp.chan_map.chm[0],
    ceac:	2205      	movs	r2, #5
    ceae:	f104 010c 	add.w	r1, r4, #12
    ceb2:	f105 0079 	add.w	r0, r5, #121	; 0x79
    ceb6:	f7f4 fea1 	bl	1bfc <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    ceba:	7c63      	ldrb	r3, [r4, #17]
    cebc:	7ca2      	ldrb	r2, [r4, #18]
    cebe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    cec2:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    cec6:	2302      	movs	r3, #2
    cec8:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    cecc:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    ced0:	2000      	movs	r0, #0
	conn->llcp_ack--;
    ced2:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    ced4:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    ced8:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    cedc:	b003      	add	sp, #12
    cede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    cee2:	7a41      	ldrb	r1, [r0, #9]
    cee4:	2002      	movs	r0, #2
    cee6:	f7fc fab5 	bl	9454 <pdu_len_cmp>
    ceea:	2800      	cmp	r0, #0
    ceec:	f001 801a 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp_terminate.reason_peer =
    cef0:	4b76      	ldr	r3, [pc, #472]	; (d0cc <isr_rx_conn_pkt_ctrl+0x37c>)
    cef2:	7b22      	ldrb	r2, [r4, #12]
    cef4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    cef8:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    cefc:	2000      	movs	r0, #0
	return nack;
    cefe:	e7ed      	b.n	cedc <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    cf00:	4e72      	ldr	r6, [pc, #456]	; (d0cc <isr_rx_conn_pkt_ctrl+0x37c>)
    cf02:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    cf06:	f998 301d 	ldrsb.w	r3, [r8, #29]
    cf0a:	2b00      	cmp	r3, #0
    cf0c:	f281 800a 	bge.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    cf10:	7a41      	ldrb	r1, [r0, #9]
    cf12:	2003      	movs	r0, #3
    cf14:	f7fc fa9e 	bl	9454 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    cf18:	2800      	cmp	r0, #0
    cf1a:	f001 8003 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    cf1e:	2208      	movs	r2, #8
    cf20:	f104 0116 	add.w	r1, r4, #22
    cf24:	f108 0094 	add.w	r0, r8, #148	; 0x94
    cf28:	f7f4 fe68 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    cf2c:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    cf30:	2204      	movs	r2, #4
    cf32:	f104 011e 	add.w	r1, r4, #30
    cf36:	f500 7089 	add.w	r0, r0, #274	; 0x112
    cf3a:	f7f4 fe5f 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    cf3e:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    cf42:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    cf46:	f042 0204 	orr.w	r2, r2, #4
    cf4a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    cf4e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    cf52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    cf56:	2301      	movs	r3, #1
    cf58:	702b      	strb	r3, [r5, #0]
    cf5a:	e7cf      	b.n	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    cf5c:	4d5b      	ldr	r5, [pc, #364]	; (d0cc <isr_rx_conn_pkt_ctrl+0x37c>)
    cf5e:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    cf62:	f996 301d 	ldrsb.w	r3, [r6, #29]
    cf66:	2b00      	cmp	r3, #0
    cf68:	f2c0 87dc 	blt.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    cf6c:	7a41      	ldrb	r1, [r0, #9]
    cf6e:	2004      	movs	r0, #4
    cf70:	f7fc fa70 	bl	9454 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    cf74:	2800      	cmp	r0, #0
    cf76:	f000 87d5 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    cf7a:	2208      	movs	r2, #8
    cf7c:	f104 010c 	add.w	r1, r4, #12
    cf80:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    cf84:	f7f4 fe3a 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    cf88:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    cf8c:	2204      	movs	r2, #4
    cf8e:	f104 0114 	add.w	r1, r4, #20
    cf92:	f500 708b 	add.w	r0, r0, #278	; 0x116
    cf96:	f7f4 fe31 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    cf9a:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    cf9e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    cfa2:	f043 0304 	orr.w	r3, r3, #4
    cfa6:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    cfaa:	e7a7      	b.n	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    cfac:	4b47      	ldr	r3, [pc, #284]	; (d0cc <isr_rx_conn_pkt_ctrl+0x37c>)
    cfae:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    cfb2:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    cfb6:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    cfba:	42b3      	cmp	r3, r6
    cfbc:	d012      	beq.n	cfe4 <isr_rx_conn_pkt_ctrl+0x294>
    cfbe:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    cfc2:	2b03      	cmp	r3, #3
    cfc4:	d00e      	beq.n	cfe4 <isr_rx_conn_pkt_ctrl+0x294>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    cfc6:	4b42      	ldr	r3, [pc, #264]	; (d0d0 <isr_rx_conn_pkt_ctrl+0x380>)
    cfc8:	9301      	str	r3, [sp, #4]
    cfca:	9300      	str	r3, [sp, #0]
    cfcc:	4a42      	ldr	r2, [pc, #264]	; (d0d8 <isr_rx_conn_pkt_ctrl+0x388>)
    cfce:	4b46      	ldr	r3, [pc, #280]	; (d0e8 <isr_rx_conn_pkt_ctrl+0x398>)
    cfd0:	4942      	ldr	r1, [pc, #264]	; (d0dc <isr_rx_conn_pkt_ctrl+0x38c>)
    cfd2:	4846      	ldr	r0, [pc, #280]	; (d0ec <isr_rx_conn_pkt_ctrl+0x39c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    cfd4:	f7f3 ffda 	bl	f8c <printk>
    cfd8:	4040      	eors	r0, r0
    cfda:	f380 8811 	msr	BASEPRI, r0
    cfde:	f04f 0004 	mov.w	r0, #4
    cfe2:	df02      	svc	2
		if (_radio.conn_curr->role ||
    cfe4:	f995 301d 	ldrsb.w	r3, [r5, #29]
    cfe8:	2b00      	cmp	r3, #0
    cfea:	f2c0 879b 	blt.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    cfee:	7a61      	ldrb	r1, [r4, #9]
    cff0:	2005      	movs	r0, #5
    cff2:	f7fc fa2f 	bl	9454 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    cff6:	2800      	cmp	r0, #0
    cff8:	f000 8794 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    cffc:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    cffe:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    d000:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d002:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d006:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    d00a:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    d00e:	e765      	b.n	cedc <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    d010:	7a41      	ldrb	r1, [r0, #9]
    d012:	2006      	movs	r0, #6
    d014:	f7fc fa1e 	bl	9454 <pdu_len_cmp>
    d018:	2800      	cmp	r0, #0
    d01a:	f000 8783 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_SLAVE) {
    d01e:	4b2b      	ldr	r3, [pc, #172]	; (d0cc <isr_rx_conn_pkt_ctrl+0x37c>)
    d020:	7cda      	ldrb	r2, [r3, #19]
    d022:	2a03      	cmp	r2, #3
    d024:	4619      	mov	r1, r3
    d026:	d124      	bne.n	d072 <isr_rx_conn_pkt_ctrl+0x322>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    d028:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d02c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    d030:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    d034:	4290      	cmp	r0, r2
    d036:	d003      	beq.n	d040 <isr_rx_conn_pkt_ctrl+0x2f0>
    d038:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    d03c:	2803      	cmp	r0, #3
    d03e:	d1c2      	bne.n	cfc6 <isr_rx_conn_pkt_ctrl+0x276>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    d040:	2000      	movs	r0, #0
    d042:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    d046:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d048:	2003      	movs	r0, #3
    d04a:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    d04e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    d052:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    d056:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d05a:	065e      	lsls	r6, r3, #25
    d05c:	d505      	bpl.n	d06a <isr_rx_conn_pkt_ctrl+0x31a>
			_radio.conn_curr->refresh = 0;
    d05e:	f36f 1386 	bfc	r3, #6, #1
    d062:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    d066:	2309      	movs	r3, #9
    d068:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    d06a:	2301      	movs	r3, #1
    d06c:	702b      	strb	r3, [r5, #0]
				break;
    d06e:	f000 bcbf 	b.w	d9f0 <isr_rx_conn_pkt_ctrl+0xca0>
			_radio.conn_curr->pause_rx = 0;
    d072:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d076:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    d07a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d07e:	f36f 03c3 	bfc	r3, #3, #1
    d082:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d086:	e7e4      	b.n	d052 <isr_rx_conn_pkt_ctrl+0x302>
		if (!_radio.conn_curr->role ||
    d088:	4b10      	ldr	r3, [pc, #64]	; (d0cc <isr_rx_conn_pkt_ctrl+0x37c>)
    d08a:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d08e:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d092:	2b00      	cmp	r3, #0
    d094:	f280 8746 	bge.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    d098:	7a41      	ldrb	r1, [r0, #9]
    d09a:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d09c:	f7fc f9da 	bl	9454 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d0a0:	2800      	cmp	r0, #0
    d0a2:	f000 873f 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d0a6:	4631      	mov	r1, r6
    d0a8:	4628      	mov	r0, r5
}
    d0aa:	b003      	add	sp, #12
    d0ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d0b0:	f7fe ba7e 	b.w	b5b0 <feature_rsp_send>
		if (_radio.conn_curr->role ||
    d0b4:	4b05      	ldr	r3, [pc, #20]	; (d0cc <isr_rx_conn_pkt_ctrl+0x37c>)
    d0b6:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d0ba:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d0be:	2b00      	cmp	r3, #0
    d0c0:	f2c0 8730 	blt.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d0c4:	7a41      	ldrb	r1, [r0, #9]
    d0c6:	200e      	movs	r0, #14
    d0c8:	e7e8      	b.n	d09c <isr_rx_conn_pkt_ctrl+0x34c>
    d0ca:	bf00      	nop
    d0cc:	200008c0 	.word	0x200008c0
    d0d0:	000142a9 	.word	0x000142a9
    d0d4:	000164b0 	.word	0x000164b0
    d0d8:	00014ff8 	.word	0x00014ff8
    d0dc:	00015047 	.word	0x00015047
    d0e0:	00016938 	.word	0x00016938
    d0e4:	000164bc 	.word	0x000164bc
    d0e8:	00016162 	.word	0x00016162
    d0ec:	0001697a 	.word	0x0001697a
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    d0f0:	7a41      	ldrb	r1, [r0, #9]
    d0f2:	2009      	movs	r0, #9
    d0f4:	f7fc f9ae 	bl	9454 <pdu_len_cmp>
    d0f8:	2800      	cmp	r0, #0
    d0fa:	f000 8713 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d0fe:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    d100:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d102:	48b2      	ldr	r0, [pc, #712]	; (d3cc <isr_rx_conn_pkt_ctrl+0x67c>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    d108:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    d10c:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    d110:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d114:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d118:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    d11c:	7ba1      	ldrb	r1, [r4, #14]
    d11e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d122:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    d126:	f3c1 0110 	ubfx	r1, r1, #0, #17
    d12a:	400b      	ands	r3, r1
    d12c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    d130:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    d134:	f043 0320 	orr.w	r3, r3, #32
    d138:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    d13c:	2301      	movs	r3, #1
    d13e:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    d140:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    d144:	2000      	movs	r0, #0
    d146:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    d14a:	e6c7      	b.n	cedc <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    d14c:	4e9f      	ldr	r6, [pc, #636]	; (d3cc <isr_rx_conn_pkt_ctrl+0x67c>)
    d14e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d152:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d156:	2b00      	cmp	r3, #0
    d158:	f280 86e4 	bge.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    d15c:	7a41      	ldrb	r1, [r0, #9]
    d15e:	200a      	movs	r0, #10
    d160:	f7fc f978 	bl	9454 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d164:	2800      	cmp	r0, #0
    d166:	f000 86dd 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d16a:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    d16e:	f7f9 fbba 	bl	68e6 <mem_acquire>
		if (!node_tx) {
    d172:	4601      	mov	r1, r0
    d174:	b908      	cbnz	r0, d17a <isr_rx_conn_pkt_ctrl+0x42a>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d176:	2001      	movs	r0, #1
    d178:	e6b0      	b.n	cedc <isr_rx_conn_pkt_ctrl+0x18c>
		conn->refresh = 1;
    d17a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    d17e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    d182:	f36f 1304 	bfc	r3, #4, #1
    d186:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d18a:	7903      	ldrb	r3, [r0, #4]
    d18c:	f043 0303 	orr.w	r3, r3, #3
    d190:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d192:	2301      	movs	r3, #1
    d194:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d196:	230b      	movs	r3, #11
    d198:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d19a:	4628      	mov	r0, r5
    d19c:	f000 bcdc 	b.w	db58 <isr_rx_conn_pkt_ctrl+0xe08>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    d1a0:	7a41      	ldrb	r1, [r0, #9]
    d1a2:	200b      	movs	r0, #11
    d1a4:	f7fc f956 	bl	9454 <pdu_len_cmp>
    d1a8:	2800      	cmp	r0, #0
    d1aa:	f000 86bb 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    d1ae:	4887      	ldr	r0, [pc, #540]	; (d3cc <isr_rx_conn_pkt_ctrl+0x67c>)
    d1b0:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    d1b4:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d1b8:	2b00      	cmp	r3, #0
    d1ba:	db1b      	blt.n	d1f4 <isr_rx_conn_pkt_ctrl+0x4a4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d1bc:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d1c0:	f7f9 fb91 	bl	68e6 <mem_acquire>
		if (!node_tx) {
    d1c4:	4601      	mov	r1, r0
    d1c6:	2800      	cmp	r0, #0
    d1c8:	d0d5      	beq.n	d176 <isr_rx_conn_pkt_ctrl+0x426>
		conn->enc_tx = 0;
    d1ca:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    d1ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    d1d2:	f043 0304 	orr.w	r3, r3, #4
    d1d6:	f36f 1304 	bfc	r3, #4, #1
    d1da:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d1de:	7903      	ldrb	r3, [r0, #4]
    d1e0:	f043 0303 	orr.w	r3, r3, #3
    d1e4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d1e6:	2301      	movs	r3, #1
    d1e8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d1ea:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    d1ec:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d1ee:	4620      	mov	r0, r4
    d1f0:	f000 bcb2 	b.w	db58 <isr_rx_conn_pkt_ctrl+0xe08>
		conn->enc_tx = 0;
    d1f4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d1f8:	f36f 1345 	bfc	r3, #5, #1
    d1fc:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    d200:	e67c      	b.n	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    d202:	7a41      	ldrb	r1, [r0, #9]
    d204:	200c      	movs	r0, #12
    d206:	f7fc f925 	bl	9454 <pdu_len_cmp>
    d20a:	2800      	cmp	r0, #0
    d20c:	f000 868a 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    d210:	486e      	ldr	r0, [pc, #440]	; (d3cc <isr_rx_conn_pkt_ctrl+0x67c>)
    d212:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    d216:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d21a:	f013 0701 	ands.w	r7, r3, #1
    d21e:	d150      	bne.n	d2c2 <isr_rx_conn_pkt_ctrl+0x572>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d220:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d224:	f7f9 fb5f 	bl	68e6 <mem_acquire>
		if (!node_tx) {
    d228:	4601      	mov	r1, r0
    d22a:	2800      	cmp	r0, #0
    d22c:	d0a3      	beq.n	d176 <isr_rx_conn_pkt_ctrl+0x426>
		conn->llcp_version.tx = 1;
    d22e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d232:	f043 0301 	orr.w	r3, r3, #1
    d236:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d23a:	7903      	ldrb	r3, [r0, #4]
    d23c:	f043 0303 	orr.w	r3, r3, #3
    d240:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    d242:	2306      	movs	r3, #6
    d244:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    d246:	230c      	movs	r3, #12
    d248:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    d24a:	2309      	movs	r3, #9
    d24c:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    d24e:	f06f 030e 	mvn.w	r3, #14
    d252:	7243      	strb	r3, [r0, #9]
    d254:	2305      	movs	r3, #5
    d256:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    d258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d25c:	72c3      	strb	r3, [r0, #11]
    d25e:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    d260:	4630      	mov	r0, r6
    d262:	f7fe f98b 	bl	b57c <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    d266:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    d26a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d26e:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    d272:	f004 fd85 	bl	11d80 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d276:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    d278:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d27a:	2201      	movs	r2, #1
    d27c:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    d280:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d284:	7003      	strb	r3, [r0, #0]
    d286:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    d288:	b1c2      	cbz	r2, d2bc <isr_rx_conn_pkt_ctrl+0x56c>
		pdu_data_tx->md = 1;
    d28a:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    d28e:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    d290:	7b23      	ldrb	r3, [r4, #12]
    d292:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    d296:	7ba2      	ldrb	r2, [r4, #14]
    d298:	7b63      	ldrb	r3, [r4, #13]
    d29a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d29e:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    d2a2:	7be3      	ldrb	r3, [r4, #15]
    d2a4:	7c22      	ldrb	r2, [r4, #16]
    d2a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d2aa:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    d2ae:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d2b2:	f043 0302 	orr.w	r3, r3, #2
    d2b6:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    d2ba:	e61f      	b.n	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		pdu_data_tx->md = 0;
    d2bc:	f362 1304 	bfi	r3, r2, #4, #1
    d2c0:	e7e5      	b.n	d28e <isr_rx_conn_pkt_ctrl+0x53e>
	} else if (!conn->llcp_version.rx) {
    d2c2:	f013 0302 	ands.w	r3, r3, #2
    d2c6:	f47f ae19 	bne.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->procedure_expire = 0;
    d2ca:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    d2ce:	2301      	movs	r3, #1
    d2d0:	702b      	strb	r3, [r5, #0]
    d2d2:	e7dd      	b.n	d290 <isr_rx_conn_pkt_ctrl+0x540>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    d2d4:	7a41      	ldrb	r1, [r0, #9]
    d2d6:	200d      	movs	r0, #13
    d2d8:	f7fc f8bc 	bl	9454 <pdu_len_cmp>
    d2dc:	2800      	cmp	r0, #0
    d2de:	f000 8621 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->pause_rx = 0;
    d2e2:	4b3a      	ldr	r3, [pc, #232]	; (d3cc <isr_rx_conn_pkt_ctrl+0x67c>)
    d2e4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d2e8:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    d2ec:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d2f0:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    d2f4:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    d2f6:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    d2fa:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    d2fe:	2301      	movs	r3, #1
    d300:	702b      	strb	r3, [r5, #0]
    d302:	e5eb      	b.n	cedc <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    d304:	7a41      	ldrb	r1, [r0, #9]
    d306:	200f      	movs	r0, #15
    d308:	f7fc f8a4 	bl	9454 <pdu_len_cmp>
    d30c:	2800      	cmp	r0, #0
    d30e:	f000 8609 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    d312:	4b2e      	ldr	r3, [pc, #184]	; (d3cc <isr_rx_conn_pkt_ctrl+0x67c>)
    d314:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    d318:	461a      	mov	r2, r3
    d31a:	b151      	cbz	r1, d332 <isr_rx_conn_pkt_ctrl+0x5e2>
    d31c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    d320:	4281      	cmp	r1, r0
    d322:	d006      	beq.n	d332 <isr_rx_conn_pkt_ctrl+0x5e2>
			nack = reject_ext_ind_send(_radio.conn_curr,
    d324:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    d326:	210f      	movs	r1, #15
}
    d328:	b003      	add	sp, #12
    d32a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    d32e:	f7fe b9a9 	b.w	b684 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    d332:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    d336:	f990 301d 	ldrsb.w	r3, [r0, #29]
    d33a:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    d33e:	2b00      	cmp	r3, #0
    d340:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d344:	f2c0 80a7 	blt.w	d496 <isr_rx_conn_pkt_ctrl+0x746>
			if ((conn->llcp_conn_param.req !=
    d348:	4299      	cmp	r1, r3
    d34a:	d009      	beq.n	d360 <isr_rx_conn_pkt_ctrl+0x610>
			    ((conn->llcp_conn_param.state ==
    d34c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    d350:	f013 0307 	ands.w	r3, r3, #7
    d354:	d002      	beq.n	d35c <isr_rx_conn_pkt_ctrl+0x60c>
			      LLCP_CPR_STATE_REQ) ||
    d356:	3b04      	subs	r3, #4
    d358:	2b01      	cmp	r3, #1
    d35a:	d801      	bhi.n	d360 <isr_rx_conn_pkt_ctrl+0x610>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d35c:	2223      	movs	r2, #35	; 0x23
    d35e:	e7e2      	b.n	d326 <isr_rx_conn_pkt_ctrl+0x5d6>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    d360:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    d364:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    d368:	4299      	cmp	r1, r3
    d36a:	d003      	beq.n	d374 <isr_rx_conn_pkt_ctrl+0x624>
    d36c:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    d370:	2b03      	cmp	r3, #3
    d372:	d105      	bne.n	d380 <isr_rx_conn_pkt_ctrl+0x630>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    d374:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    d378:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    d37c:	4299      	cmp	r1, r3
    d37e:	d001      	beq.n	d384 <isr_rx_conn_pkt_ctrl+0x634>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d380:	222a      	movs	r2, #42	; 0x2a
    d382:	e7d0      	b.n	d326 <isr_rx_conn_pkt_ctrl+0x5d6>
				if ((cpr->interval_min < 6) ||
    d384:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    d388:	4643      	mov	r3, r8
    d38a:	2b05      	cmp	r3, #5
    d38c:	d91b      	bls.n	d3c6 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    d38e:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    d390:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    d394:	d817      	bhi.n	d3c6 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    d396:	45b8      	cmp	r8, r7
    d398:	d815      	bhi.n	d3c6 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->latency > 499) ||
    d39a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    d39e:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    d3a2:	d210      	bcs.n	d3c6 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->timeout < 10) ||
    d3a4:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    d3a8:	f1ae 060a 	sub.w	r6, lr, #10
    d3ac:	b2b6      	uxth	r6, r6
    d3ae:	f640 4976 	movw	r9, #3190	; 0xc76
    d3b2:	454e      	cmp	r6, r9
    d3b4:	d807      	bhi.n	d3c6 <isr_rx_conn_pkt_ctrl+0x676>
				     ((cpr->latency + 1) *
    d3b6:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    d3ba:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    d3be:	da02      	bge.n	d3c6 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->preferred_periodicity >
    d3c0:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    d3c2:	428f      	cmp	r7, r1
    d3c4:	d204      	bcs.n	d3d0 <isr_rx_conn_pkt_ctrl+0x680>
				nack = reject_ext_ind_send(conn,
    d3c6:	221e      	movs	r2, #30
    d3c8:	e7ad      	b.n	d326 <isr_rx_conn_pkt_ctrl+0x5d6>
    d3ca:	bf00      	nop
    d3cc:	200008c0 	.word	0x200008c0
				conn->llcp_conn_param.interval = cpr->interval_min;
    d3d0:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    d3d4:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    d3d8:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    d3dc:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    d3e0:	7da6      	ldrb	r6, [r4, #22]
    d3e2:	7d61      	ldrb	r1, [r4, #21]
    d3e4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    d3e8:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    d3ec:	7e26      	ldrb	r6, [r4, #24]
    d3ee:	7de1      	ldrb	r1, [r4, #23]
    d3f0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d3f4:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    d3f8:	7ea6      	ldrb	r6, [r4, #26]
    d3fa:	7e61      	ldrb	r1, [r4, #25]
    d3fc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d400:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    d404:	7f26      	ldrb	r6, [r4, #28]
    d406:	7ee1      	ldrb	r1, [r4, #27]
    d408:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d40c:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    d410:	7fa6      	ldrb	r6, [r4, #30]
    d412:	7f61      	ldrb	r1, [r4, #29]
    d414:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d418:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    d41c:	7fe1      	ldrb	r1, [r4, #31]
    d41e:	f894 6020 	ldrb.w	r6, [r4, #32]
    d422:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d426:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    d42a:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    d42e:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    d432:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    d436:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    d43a:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    d43e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d440:	428c      	cmp	r4, r1
    d442:	d10f      	bne.n	d464 <isr_rx_conn_pkt_ctrl+0x714>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d444:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    d446:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d44a:	4361      	muls	r1, r4
    d44c:	f242 7410 	movw	r4, #10000	; 0x2710
    d450:	fb04 130e 	mla	r3, r4, lr, r1
    d454:	3b01      	subs	r3, #1
    d456:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    d45a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d45c:	b29b      	uxth	r3, r3
    d45e:	4299      	cmp	r1, r3
    d460:	f000 8092 	beq.w	d588 <isr_rx_conn_pkt_ctrl+0x838>
					if (conn->pause_tx) {
    d464:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    d468:	071c      	lsls	r4, r3, #28
    d46a:	f140 8087 	bpl.w	d57c <isr_rx_conn_pkt_ctrl+0x82c>
						conn->llcp_conn_param.state =
    d46e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d472:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    d474:	f361 0302 	bfi	r3, r1, #0, #3
    d478:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    d47c:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d480:	3b01      	subs	r3, #1
    d482:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    d486:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    d48a:	2b00      	cmp	r3, #0
    d48c:	f47f ad36 	bne.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
				_radio.conn_upd = conn;
    d490:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    d494:	e532      	b.n	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    d496:	4299      	cmp	r1, r3
    d498:	d003      	beq.n	d4a2 <isr_rx_conn_pkt_ctrl+0x752>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    d49a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d49e:	0799      	lsls	r1, r3, #30
    d4a0:	d17b      	bne.n	d59a <isr_rx_conn_pkt_ctrl+0x84a>
			if ((cpr->interval_min < 6) ||
    d4a2:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    d4a6:	4643      	mov	r3, r8
    d4a8:	2b05      	cmp	r3, #5
    d4aa:	d98c      	bls.n	d3c6 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    d4ac:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    d4ae:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    d4b2:	d888      	bhi.n	d3c6 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    d4b4:	45b8      	cmp	r8, r7
    d4b6:	d886      	bhi.n	d3c6 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->latency > 499) ||
    d4b8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    d4bc:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    d4c0:	d281      	bcs.n	d3c6 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d4c2:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    d4c6:	f1ae 060a 	sub.w	r6, lr, #10
    d4ca:	b2b6      	uxth	r6, r6
    d4cc:	f640 4976 	movw	r9, #3190	; 0xc76
    d4d0:	454e      	cmp	r6, r9
    d4d2:	f63f af78 	bhi.w	d3c6 <isr_rx_conn_pkt_ctrl+0x676>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    d4d6:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d4da:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    d4de:	f6bf af72 	bge.w	d3c6 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    d4e2:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    d4e4:	428f      	cmp	r7, r1
    d4e6:	f4ff af6e 	bcc.w	d3c6 <isr_rx_conn_pkt_ctrl+0x676>
			conn->llcp_conn_param.interval = cpr->interval_min;
    d4ea:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    d4ee:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    d4f2:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    d4f6:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    d4fa:	7da6      	ldrb	r6, [r4, #22]
    d4fc:	7d61      	ldrb	r1, [r4, #21]
    d4fe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    d502:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    d506:	7e26      	ldrb	r6, [r4, #24]
    d508:	7de1      	ldrb	r1, [r4, #23]
    d50a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d50e:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    d512:	7ea6      	ldrb	r6, [r4, #26]
    d514:	7e61      	ldrb	r1, [r4, #25]
    d516:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d51a:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    d51e:	7f26      	ldrb	r6, [r4, #28]
    d520:	7ee1      	ldrb	r1, [r4, #27]
    d522:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d526:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    d52a:	7fa6      	ldrb	r6, [r4, #30]
    d52c:	7f61      	ldrb	r1, [r4, #29]
    d52e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d532:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    d536:	7fe1      	ldrb	r1, [r4, #31]
    d538:	f894 6020 	ldrb.w	r6, [r4, #32]
    d53c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d540:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    d544:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    d548:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    d54c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    d550:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    d554:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    d558:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d55a:	428c      	cmp	r4, r1
    d55c:	d10e      	bne.n	d57c <isr_rx_conn_pkt_ctrl+0x82c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d55e:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    d560:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d564:	4361      	muls	r1, r4
    d566:	f242 7410 	movw	r4, #10000	; 0x2710
    d56a:	fb04 130e 	mla	r3, r4, lr, r1
    d56e:	3b01      	subs	r3, #1
    d570:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    d574:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d576:	b29b      	uxth	r3, r3
    d578:	4299      	cmp	r1, r3
    d57a:	d005      	beq.n	d588 <isr_rx_conn_pkt_ctrl+0x838>
				*rx_enqueue = 1;
    d57c:	2301      	movs	r3, #1
    d57e:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    d580:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d584:	2103      	movs	r1, #3
    d586:	e775      	b.n	d474 <isr_rx_conn_pkt_ctrl+0x724>
				conn->llcp_conn_param.status = 0;
    d588:	2300      	movs	r3, #0
    d58a:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    d58e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    d592:	2101      	movs	r1, #1
    d594:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    d598:	e76c      	b.n	d474 <isr_rx_conn_pkt_ctrl+0x724>
			LL_ASSERT(0);
    d59a:	4bc9      	ldr	r3, [pc, #804]	; (d8c0 <isr_rx_conn_pkt_ctrl+0xb70>)
    d59c:	9301      	str	r3, [sp, #4]
    d59e:	9300      	str	r3, [sp, #0]
    d5a0:	4ac8      	ldr	r2, [pc, #800]	; (d8c4 <isr_rx_conn_pkt_ctrl+0xb74>)
    d5a2:	4bc9      	ldr	r3, [pc, #804]	; (d8c8 <isr_rx_conn_pkt_ctrl+0xb78>)
    d5a4:	49c9      	ldr	r1, [pc, #804]	; (d8cc <isr_rx_conn_pkt_ctrl+0xb7c>)
    d5a6:	48ca      	ldr	r0, [pc, #808]	; (d8d0 <isr_rx_conn_pkt_ctrl+0xb80>)
    d5a8:	e514      	b.n	cfd4 <isr_rx_conn_pkt_ctrl+0x284>
		if (_radio.conn_curr->role ||
    d5aa:	4bca      	ldr	r3, [pc, #808]	; (d8d4 <isr_rx_conn_pkt_ctrl+0xb84>)
    d5ac:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d5b0:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d5b4:	2b00      	cmp	r3, #0
    d5b6:	f2c0 84b5 	blt.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    d5ba:	7a41      	ldrb	r1, [r0, #9]
    d5bc:	2010      	movs	r0, #16
    d5be:	f7fb ff49 	bl	9454 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d5c2:	2800      	cmp	r0, #0
    d5c4:	f000 84ae 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (!_radio.conn_curr->role &&
    d5c8:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d5cc:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d5d0:	429a      	cmp	r2, r3
    d5d2:	f43f ac93 	beq.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_conn_param.state ==
    d5d6:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    d5da:	f003 0307 	and.w	r3, r3, #7
    d5de:	2b04      	cmp	r3, #4
    d5e0:	f47f ac8c 	bne.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
			if ((cpr->interval_min < 6) ||
    d5e4:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    d5e8:	fa1f f28e 	uxth.w	r2, lr
    d5ec:	2a05      	cmp	r2, #5
    d5ee:	d91b      	bls.n	d628 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    d5f0:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    d5f2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    d5f6:	d817      	bhi.n	d628 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    d5f8:	429a      	cmp	r2, r3
    d5fa:	d815      	bhi.n	d628 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->latency > 499) ||
    d5fc:	8a27      	ldrh	r7, [r4, #16]
    d5fe:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    d600:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    d604:	d210      	bcs.n	d628 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d606:	8a66      	ldrh	r6, [r4, #18]
    d608:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    d60a:	f1a0 010a 	sub.w	r1, r0, #10
    d60e:	b289      	uxth	r1, r1
    d610:	f640 4c76 	movw	ip, #3190	; 0xc76
    d614:	4561      	cmp	r1, ip
    d616:	d807      	bhi.n	d628 <isr_rx_conn_pkt_ctrl+0x8d8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    d618:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d61c:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    d620:	da02      	bge.n	d628 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    d622:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    d624:	4293      	cmp	r3, r2
    d626:	d203      	bcs.n	d630 <isr_rx_conn_pkt_ctrl+0x8e0>
				nack = reject_ext_ind_send(conn,
    d628:	221e      	movs	r2, #30
    d62a:	2110      	movs	r1, #16
    d62c:	4628      	mov	r0, r5
    d62e:	e67b      	b.n	d328 <isr_rx_conn_pkt_ctrl+0x5d8>
			_radio.conn_curr->procedure_expire = 0;
    d630:	2000      	movs	r0, #0
    d632:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    d636:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    d63a:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    d63e:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    d642:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    d646:	7da2      	ldrb	r2, [r4, #22]
    d648:	7d63      	ldrb	r3, [r4, #21]
    d64a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    d64e:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    d652:	7e22      	ldrb	r2, [r4, #24]
    d654:	7de3      	ldrb	r3, [r4, #23]
    d656:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d65a:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    d65e:	7ea2      	ldrb	r2, [r4, #26]
    d660:	7e63      	ldrb	r3, [r4, #25]
    d662:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d666:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    d66a:	7f22      	ldrb	r2, [r4, #28]
    d66c:	7ee3      	ldrb	r3, [r4, #27]
    d66e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d672:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    d676:	7fa2      	ldrb	r2, [r4, #30]
    d678:	7f63      	ldrb	r3, [r4, #29]
    d67a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d67e:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    d682:	f894 2020 	ldrb.w	r2, [r4, #32]
    d686:	7fe3      	ldrb	r3, [r4, #31]
    d688:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d68c:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    d690:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    d694:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    d698:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d69c:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    d6a0:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    d6a4:	2201      	movs	r2, #1
    d6a6:	f362 0302 	bfi	r3, r2, #0, #3
    d6aa:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    d6ae:	e415      	b.n	cedc <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    d6b0:	7a41      	ldrb	r1, [r0, #9]
    d6b2:	2011      	movs	r0, #17
    d6b4:	f7fb fece 	bl	9454 <pdu_len_cmp>
    d6b8:	2800      	cmp	r0, #0
    d6ba:	f000 8433 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    d6be:	4a85      	ldr	r2, [pc, #532]	; (d8d4 <isr_rx_conn_pkt_ctrl+0xb84>)
    d6c0:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    d6c4:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    d6c8:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    d6cc:	4281      	cmp	r1, r0
    d6ce:	7b21      	ldrb	r1, [r4, #12]
    d6d0:	d027      	beq.n	d722 <isr_rx_conn_pkt_ctrl+0x9d2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    d6d2:	2916      	cmp	r1, #22
    d6d4:	f47f ac12 	bne.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		if (rej_ext_ind->error_code != 0x23) {
    d6d8:	7b61      	ldrb	r1, [r4, #13]
    d6da:	2923      	cmp	r1, #35	; 0x23
    d6dc:	d00e      	beq.n	d6fc <isr_rx_conn_pkt_ctrl+0x9ac>
				_radio.conn_curr->phy_tx;
    d6de:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    d6e2:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    d6e6:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    d6ea:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    d6ee:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    d6f2:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    d6f4:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    d6f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    d6fc:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    d700:	0792      	lsls	r2, r2, #30
    d702:	f57f abfb 	bpl.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d706:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    d708:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d70a:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    d70c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    d710:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    d714:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    d716:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    d71a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d71e:	7363      	strb	r3, [r4, #13]
    d720:	e419      	b.n	cf56 <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_conn_param.req) {
    d722:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    d726:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    d72a:	42b8      	cmp	r0, r7
    d72c:	d048      	beq.n	d7c0 <isr_rx_conn_pkt_ctrl+0xa70>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    d72e:	290f      	cmp	r1, #15
    d730:	f47f abe4 	bne.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
    d734:	f993 001d 	ldrsb.w	r0, [r3, #29]
    d738:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    d73a:	2800      	cmp	r0, #0
    d73c:	db0e      	blt.n	d75c <isr_rx_conn_pkt_ctrl+0xa0c>
    d73e:	291a      	cmp	r1, #26
    d740:	d10c      	bne.n	d75c <isr_rx_conn_pkt_ctrl+0xa0c>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d742:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    d746:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    d74a:	4294      	cmp	r4, r2
    d74c:	f000 80c8 	beq.w	d8e0 <isr_rx_conn_pkt_ctrl+0xb90>
    d750:	4b5b      	ldr	r3, [pc, #364]	; (d8c0 <isr_rx_conn_pkt_ctrl+0xb70>)
    d752:	9301      	str	r3, [sp, #4]
    d754:	9300      	str	r3, [sp, #0]
    d756:	4b60      	ldr	r3, [pc, #384]	; (d8d8 <isr_rx_conn_pkt_ctrl+0xb88>)
    d758:	f7ff bb40 	b.w	cddc <isr_rx_conn_pkt_ctrl+0x8c>
	else if (rej_ext_ind->error_code != 0x23) {
    d75c:	2923      	cmp	r1, #35	; 0x23
    d75e:	d018      	beq.n	d792 <isr_rx_conn_pkt_ctrl+0xa42>
		LL_ASSERT(_radio.conn_upd == conn);
    d760:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    d764:	42b3      	cmp	r3, r6
    d766:	d007      	beq.n	d778 <isr_rx_conn_pkt_ctrl+0xa28>
    d768:	4b55      	ldr	r3, [pc, #340]	; (d8c0 <isr_rx_conn_pkt_ctrl+0xb70>)
    d76a:	9301      	str	r3, [sp, #4]
    d76c:	9300      	str	r3, [sp, #0]
    d76e:	4b5a      	ldr	r3, [pc, #360]	; (d8d8 <isr_rx_conn_pkt_ctrl+0xb88>)
			LL_ASSERT(_radio.conn_upd == conn);
    d770:	4a54      	ldr	r2, [pc, #336]	; (d8c4 <isr_rx_conn_pkt_ctrl+0xb74>)
    d772:	4956      	ldr	r1, [pc, #344]	; (d8cc <isr_rx_conn_pkt_ctrl+0xb7c>)
    d774:	4859      	ldr	r0, [pc, #356]	; (d8dc <isr_rx_conn_pkt_ctrl+0xb8c>)
    d776:	e42d      	b.n	cfd4 <isr_rx_conn_pkt_ctrl+0x284>
		_radio.conn_upd = NULL;
    d778:	2600      	movs	r6, #0
		if (conn->role) {
    d77a:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    d77c:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    d780:	bfb8      	it	lt
    d782:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    d786:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    d78a:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    d78e:	bfb8      	it	lt
    d790:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    d792:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    d796:	0717      	lsls	r7, r2, #28
    d798:	f57f abb0 	bpl.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
	cp->status = rej_ext_ind->error_code;
    d79c:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d79e:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    d7a0:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d7a2:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    d7a4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    d7a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    d7a8:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    d7aa:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    d7ac:	237d      	movs	r3, #125	; 0x7d
    d7ae:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    d7b0:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    d7b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d7b6:	fb93 f3f2 	sdiv	r3, r3, r2
    d7ba:	8223      	strh	r3, [r4, #16]
    d7bc:	f7ff bbcb 	b.w	cf56 <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_length.req) {
    d7c0:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    d7c4:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    d7c8:	4290      	cmp	r0, r2
    d7ca:	d01a      	beq.n	d802 <isr_rx_conn_pkt_ctrl+0xab2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    d7cc:	2914      	cmp	r1, #20
    d7ce:	f47f ab95 	bne.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->llcp_length.ack = conn->llcp_length.req;
    d7d2:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    d7d6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    d7da:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    d7dc:	f360 02c3 	bfi	r2, r0, #3, #1
    d7e0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    d7e4:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    d7e6:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    d7ea:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    d7ec:	2215      	movs	r2, #21
    d7ee:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    d7f0:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    d7f2:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    d7f4:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    d7f6:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    d7f8:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    d7fa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    d7fc:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    d7fe:	8263      	strh	r3, [r4, #18]
    d800:	e57d      	b.n	d2fe <isr_rx_conn_pkt_ctrl+0x5ae>
		switch (rej_ext_ind->reject_opcode) {
    d802:	2903      	cmp	r1, #3
    d804:	f47f ab7a 	bne.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_rx = 0;
    d808:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    d80c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    d810:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    d814:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    d816:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    d81a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    d81e:	230d      	movs	r3, #13
    d820:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    d822:	7b63      	ldrb	r3, [r4, #13]
    d824:	7323      	strb	r3, [r4, #12]
    d826:	e56a      	b.n	d2fe <isr_rx_conn_pkt_ctrl+0x5ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    d828:	7a41      	ldrb	r1, [r0, #9]
    d82a:	2012      	movs	r0, #18
    d82c:	f7fb fe12 	bl	9454 <pdu_len_cmp>
    d830:	2800      	cmp	r0, #0
    d832:	f000 8377 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = ping_resp_send(_radio.conn_curr);
    d836:	4827      	ldr	r0, [pc, #156]	; (d8d4 <isr_rx_conn_pkt_ctrl+0xb84>)
    d838:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d83c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d840:	f7f9 f851 	bl	68e6 <mem_acquire>
	if (!node_tx) {
    d844:	4601      	mov	r1, r0
    d846:	2800      	cmp	r0, #0
    d848:	f43f ac95 	beq.w	d176 <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d84c:	7903      	ldrb	r3, [r0, #4]
    d84e:	f043 0303 	orr.w	r3, r3, #3
    d852:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    d854:	2301      	movs	r3, #1
    d856:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    d858:	2313      	movs	r3, #19
    d85a:	e4c7      	b.n	d1ec <isr_rx_conn_pkt_ctrl+0x49c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    d85c:	7a41      	ldrb	r1, [r0, #9]
    d85e:	2013      	movs	r0, #19
    d860:	f7fb fdf8 	bl	9454 <pdu_len_cmp>
    d864:	2800      	cmp	r0, #0
    d866:	f000 835d 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->procedure_expire = 0;
    d86a:	4b1a      	ldr	r3, [pc, #104]	; (d8d4 <isr_rx_conn_pkt_ctrl+0xb84>)
    d86c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d870:	e468      	b.n	d144 <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    d872:	7a41      	ldrb	r1, [r0, #9]
    d874:	2007      	movs	r0, #7
    d876:	f7fb fded 	bl	9454 <pdu_len_cmp>
    d87a:	2800      	cmp	r0, #0
    d87c:	f000 8352 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    d880:	4a14      	ldr	r2, [pc, #80]	; (d8d4 <isr_rx_conn_pkt_ctrl+0xb84>)
    d882:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    d886:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    d88a:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    d88e:	42b1      	cmp	r1, r6
    d890:	4611      	mov	r1, r2
    d892:	d077      	beq.n	d984 <isr_rx_conn_pkt_ctrl+0xc34>
			conn->llcp_conn_param.disabled = 1;
    d894:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    d898:	f040 0010 	orr.w	r0, r0, #16
    d89c:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    d8a0:	f993 001d 	ldrsb.w	r0, [r3, #29]
    d8a4:	2800      	cmp	r0, #0
    d8a6:	db47      	blt.n	d938 <isr_rx_conn_pkt_ctrl+0xbe8>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d8a8:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    d8ac:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    d8b0:	4294      	cmp	r4, r2
    d8b2:	d015      	beq.n	d8e0 <isr_rx_conn_pkt_ctrl+0xb90>
    d8b4:	4b02      	ldr	r3, [pc, #8]	; (d8c0 <isr_rx_conn_pkt_ctrl+0xb70>)
    d8b6:	9301      	str	r3, [sp, #4]
    d8b8:	9300      	str	r3, [sp, #0]
    d8ba:	4b03      	ldr	r3, [pc, #12]	; (d8c8 <isr_rx_conn_pkt_ctrl+0xb78>)
    d8bc:	f7ff ba8e 	b.w	cddc <isr_rx_conn_pkt_ctrl+0x8c>
    d8c0:	000142a9 	.word	0x000142a9
    d8c4:	00014ff8 	.word	0x00014ff8
    d8c8:	00016162 	.word	0x00016162
    d8cc:	00015047 	.word	0x00015047
    d8d0:	00014f97 	.word	0x00014f97
    d8d4:	200008c0 	.word	0x200008c0
    d8d8:	00016127 	.word	0x00016127
    d8dc:	00016a0a 	.word	0x00016a0a
				conn->llcp_conn_param.state =
    d8e0:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    d8e4:	2105      	movs	r1, #5
    d8e6:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    d8ea:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    d8ee:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    d8f2:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    d8f6:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    d8fa:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    d8fe:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    d902:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    d906:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    d90a:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    d90c:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    d910:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    d914:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    d918:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    d91a:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    d91e:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    d920:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    d924:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    d928:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    d92c:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    d930:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    d934:	f7ff bad2 	b.w	cedc <isr_rx_conn_pkt_ctrl+0x18c>
			LL_ASSERT(_radio.conn_upd == conn);
    d938:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    d93c:	4293      	cmp	r3, r2
    d93e:	d004      	beq.n	d94a <isr_rx_conn_pkt_ctrl+0xbfa>
    d940:	4bc9      	ldr	r3, [pc, #804]	; (dc68 <isr_rx_conn_pkt_ctrl+0xf18>)
    d942:	9301      	str	r3, [sp, #4]
    d944:	9300      	str	r3, [sp, #0]
    d946:	4bc9      	ldr	r3, [pc, #804]	; (dc6c <isr_rx_conn_pkt_ctrl+0xf1c>)
    d948:	e712      	b.n	d770 <isr_rx_conn_pkt_ctrl+0xa20>
			_radio.conn_upd = NULL;
    d94a:	2200      	movs	r2, #0
    d94c:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    d950:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d954:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    d958:	0716      	lsls	r6, r2, #28
    d95a:	f57f aacf 	bpl.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d95e:	2208      	movs	r2, #8
    d960:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    d962:	221a      	movs	r2, #26
    d964:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    d966:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    d968:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    d96a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    d96c:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    d96e:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    d970:	237d      	movs	r3, #125	; 0x7d
    d972:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    d974:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    d976:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d97a:	fb93 f3f2 	sdiv	r3, r3, r2
    d97e:	8223      	strh	r3, [r4, #16]
    d980:	f7ff bb73 	b.w	d06a <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_length.req !=
    d984:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    d988:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    d98c:	4290      	cmp	r0, r2
    d98e:	d009      	beq.n	d9a4 <isr_rx_conn_pkt_ctrl+0xc54>
			_radio.conn_curr->llcp_length.ack =
    d990:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    d994:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d998:	f36f 02c3 	bfc	r2, #3, #1
    d99c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    d9a0:	f7ff bb63 	b.w	d06a <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_phy.req !=
    d9a4:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    d9a8:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    d9ac:	4290      	cmp	r0, r2
    d9ae:	d01b      	beq.n	d9e8 <isr_rx_conn_pkt_ctrl+0xc98>
			_radio.conn_curr->llcp_phy.ack =
    d9b0:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    d9b4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    d9b8:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    d9bc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    d9c0:	f362 0002 	bfi	r0, r2, #0, #3
    d9c4:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    d9c8:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    d9cc:	0780      	lsls	r0, r0, #30
    d9ce:	d50f      	bpl.n	d9f0 <isr_rx_conn_pkt_ctrl+0xca0>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d9d0:	200c      	movs	r0, #12
    d9d2:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    d9d4:	2000      	movs	r0, #0
    d9d6:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    d9d8:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    d9da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    d9de:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d9e2:	7363      	strb	r3, [r4, #13]
    d9e4:	f7ff bb41 	b.w	d06a <isr_rx_conn_pkt_ctrl+0x31a>
			switch (llctrl->unknown_rsp.type) {
    d9e8:	7b23      	ldrb	r3, [r4, #12]
    d9ea:	2b12      	cmp	r3, #18
    d9ec:	f47f ab3d 	bne.w	d06a <isr_rx_conn_pkt_ctrl+0x31a>
		_radio.conn_curr->procedure_expire = 0;
    d9f0:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    d9f4:	f7ff bba6 	b.w	d144 <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    d9f8:	7a41      	ldrb	r1, [r0, #9]
    d9fa:	2014      	movs	r0, #20
    d9fc:	f7fb fd2a 	bl	9454 <pdu_len_cmp>
    da00:	2800      	cmp	r0, #0
    da02:	f000 828f 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    da06:	2f14      	cmp	r7, #20
    da08:	d127      	bne.n	da5a <isr_rx_conn_pkt_ctrl+0xd0a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    da0a:	4899      	ldr	r0, [pc, #612]	; (dc70 <isr_rx_conn_pkt_ctrl+0xf20>)
    da0c:	f7f8 ff6b 	bl	68e6 <mem_acquire>
		if (!node_tx) {
    da10:	4606      	mov	r6, r0
    da12:	2800      	cmp	r0, #0
    da14:	f43f abaf 	beq.w	d176 <isr_rx_conn_pkt_ctrl+0x426>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    da18:	4f96      	ldr	r7, [pc, #600]	; (dc74 <isr_rx_conn_pkt_ctrl+0xf24>)
    da1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    da1e:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    da22:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    da26:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    da28:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    da2a:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    da2c:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    da30:	45e0      	cmp	r8, ip
    da32:	46b9      	mov	r9, r7
    da34:	f894 800b 	ldrb.w	r8, [r4, #11]
    da38:	d111      	bne.n	da5e <isr_rx_conn_pkt_ctrl+0xd0e>
	      _radio.conn_curr->llcp_length.ack) &&
    da3a:	f1b8 0f14 	cmp.w	r8, #20
    da3e:	d01a      	beq.n	da76 <isr_rx_conn_pkt_ctrl+0xd26>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    da40:	f1b8 0f15 	cmp.w	r8, #21
    da44:	f000 8292 	beq.w	df6c <isr_rx_conn_pkt_ctrl+0x121c>
    da48:	4b87      	ldr	r3, [pc, #540]	; (dc68 <isr_rx_conn_pkt_ctrl+0xf18>)
    da4a:	9301      	str	r3, [sp, #4]
    da4c:	9300      	str	r3, [sp, #0]
    da4e:	4a8a      	ldr	r2, [pc, #552]	; (dc78 <isr_rx_conn_pkt_ctrl+0xf28>)
    da50:	4b8a      	ldr	r3, [pc, #552]	; (dc7c <isr_rx_conn_pkt_ctrl+0xf2c>)
    da52:	498b      	ldr	r1, [pc, #556]	; (dc80 <isr_rx_conn_pkt_ctrl+0xf30>)
    da54:	488b      	ldr	r0, [pc, #556]	; (dc84 <isr_rx_conn_pkt_ctrl+0xf34>)
    da56:	f7ff babd 	b.w	cfd4 <isr_rx_conn_pkt_ctrl+0x284>
	struct radio_pdu_node_tx *node_tx = NULL;
    da5a:	2600      	movs	r6, #0
    da5c:	e7dc      	b.n	da18 <isr_rx_conn_pkt_ctrl+0xcc8>
		 LLCP_LENGTH_STATE_REQ) ||
    da5e:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    da62:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    da66:	2f01      	cmp	r7, #1
    da68:	d9e7      	bls.n	da3a <isr_rx_conn_pkt_ctrl+0xcea>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    da6a:	2f02      	cmp	r7, #2
    da6c:	d1e8      	bne.n	da40 <isr_rx_conn_pkt_ctrl+0xcf0>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    da6e:	f1a8 0714 	sub.w	r7, r8, #20
    da72:	2f01      	cmp	r7, #1
    da74:	d8e4      	bhi.n	da40 <isr_rx_conn_pkt_ctrl+0xcf0>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    da76:	89a7      	ldrh	r7, [r4, #12]
    da78:	2f1a      	cmp	r7, #26
    da7a:	d934      	bls.n	dae6 <isr_rx_conn_pkt_ctrl+0xd96>
			eff_tx_octets = min(lr->max_rx_octets,
    da7c:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    da80:	4547      	cmp	r7, r8
    da82:	bf28      	it	cs
    da84:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    da86:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    da8a:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    da8e:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    da92:	bf34      	ite	cc
    da94:	4693      	movcc	fp, r2
    da96:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    da9a:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    da9e:	d324      	bcc.n	daea <isr_rx_conn_pkt_ctrl+0xd9a>
			eff_tx_time = min(lr->max_rx_time,
    daa0:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    daa4:	45d0      	cmp	r8, sl
    daa6:	bf28      	it	cs
    daa8:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    daaa:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    daae:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    dab2:	bf34      	ite	cc
    dab4:	4682      	movcc	sl, r0
    dab6:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    daba:	455a      	cmp	r2, fp
    dabc:	d050      	beq.n	db60 <isr_rx_conn_pkt_ctrl+0xe10>
			free_count_rx = packet_rx_acquired_count_get() +
    dabe:	f7fb fd11 	bl	94e4 <packet_rx_acquired_count_get>
    dac2:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    dac4:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    dac8:	f7f8 ff3c 	bl	6944 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    dacc:	4420      	add	r0, r4
    dace:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    dad0:	28ff      	cmp	r0, #255	; 0xff
    dad2:	d90c      	bls.n	daee <isr_rx_conn_pkt_ctrl+0xd9e>
    dad4:	4b64      	ldr	r3, [pc, #400]	; (dc68 <isr_rx_conn_pkt_ctrl+0xf18>)
    dad6:	9301      	str	r3, [sp, #4]
    dad8:	9300      	str	r3, [sp, #0]
    dada:	4a67      	ldr	r2, [pc, #412]	; (dc78 <isr_rx_conn_pkt_ctrl+0xf28>)
    dadc:	4b67      	ldr	r3, [pc, #412]	; (dc7c <isr_rx_conn_pkt_ctrl+0xf2c>)
    dade:	4968      	ldr	r1, [pc, #416]	; (dc80 <isr_rx_conn_pkt_ctrl+0xf30>)
    dae0:	4869      	ldr	r0, [pc, #420]	; (dc88 <isr_rx_conn_pkt_ctrl+0xf38>)
    dae2:	f7ff ba77 	b.w	cfd4 <isr_rx_conn_pkt_ctrl+0x284>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    dae6:	460f      	mov	r7, r1
    dae8:	e7cd      	b.n	da86 <isr_rx_conn_pkt_ctrl+0xd36>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    daea:	46f0      	mov	r8, lr
    daec:	e7dd      	b.n	daaa <isr_rx_conn_pkt_ctrl+0xd5a>
			if (_radio.packet_rx_data_count == free_count_rx) {
    daee:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    daf2:	4283      	cmp	r3, r0
    daf4:	f040 8231 	bne.w	df5a <isr_rx_conn_pkt_ctrl+0x120a>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    daf8:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    dafc:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    db00:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    db02:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    db04:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    db08:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    db0c:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    db10:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    db14:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    db18:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    db1c:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    db20:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    db24:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    db28:	2303      	movs	r3, #3
    db2a:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    db2e:	2e00      	cmp	r6, #0
    db30:	f43f a9e4 	beq.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    db34:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    db36:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    db3a:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    db3e:	f043 0303 	orr.w	r3, r3, #3
    db42:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    db44:	2309      	movs	r3, #9
    db46:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    db48:	2315      	movs	r3, #21
    db4a:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    db4c:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    db4e:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    db52:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    db56:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    db58:	f7fd fce2 	bl	b520 <ctrl_tx_enqueue>
    db5c:	f7ff b9ce 	b.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_tx = 0;
    db60:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    db64:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    db68:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    db6c:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    db70:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    db72:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    db76:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    db7a:	d103      	bne.n	db84 <isr_rx_conn_pkt_ctrl+0xe34>
    db7c:	45c6      	cmp	lr, r8
    db7e:	d101      	bne.n	db84 <isr_rx_conn_pkt_ctrl+0xe34>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    db80:	4550      	cmp	r0, sl
    db82:	d0d4      	beq.n	db2e <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    db84:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    db86:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    db8a:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    db8e:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    db90:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    db94:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    db96:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    db9a:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    db9e:	702b      	strb	r3, [r5, #0]
    dba0:	e7c5      	b.n	db2e <isr_rx_conn_pkt_ctrl+0xdde>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    dba2:	7a41      	ldrb	r1, [r0, #9]
    dba4:	2016      	movs	r0, #22
    dba6:	f7fb fc55 	bl	9454 <pdu_len_cmp>
    dbaa:	2800      	cmp	r0, #0
    dbac:	f000 81ba 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_MASTER) {
    dbb0:	4830      	ldr	r0, [pc, #192]	; (dc74 <isr_rx_conn_pkt_ctrl+0xf24>)
    dbb2:	7cc3      	ldrb	r3, [r0, #19]
    dbb4:	2b04      	cmp	r3, #4
    dbb6:	d169      	bne.n	dc8c <isr_rx_conn_pkt_ctrl+0xf3c>
			if ((_radio.conn_curr->llcp_phy.ack !=
    dbb8:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    dbbc:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    dbc0:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    dbc4:	428b      	cmp	r3, r1
    dbc6:	d00a      	beq.n	dbde <isr_rx_conn_pkt_ctrl+0xe8e>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    dbc8:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    dbcc:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    dbd0:	3a01      	subs	r2, #1
    dbd2:	2a02      	cmp	r2, #2
    dbd4:	d803      	bhi.n	dbde <isr_rx_conn_pkt_ctrl+0xe8e>
				nack = reject_ext_ind_send(_radio.conn_curr,
    dbd6:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    dbd8:	2116      	movs	r1, #22
    dbda:	f7ff bba5 	b.w	d328 <isr_rx_conn_pkt_ctrl+0x5d8>
			} else if (((_radio.conn_curr->llcp_req !=
    dbde:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    dbe2:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    dbe6:	4295      	cmp	r5, r2
    dbe8:	d003      	beq.n	dbf2 <isr_rx_conn_pkt_ctrl+0xea2>
				     _radio.conn_curr->llcp_ack) &&
    dbea:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    dbee:	2a03      	cmp	r2, #3
    dbf0:	d105      	bne.n	dbfe <isr_rx_conn_pkt_ctrl+0xeae>
				     LLCP_ENCRYPTION)) ||
    dbf2:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    dbf6:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    dbfa:	4295      	cmp	r5, r2
    dbfc:	d001      	beq.n	dc02 <isr_rx_conn_pkt_ctrl+0xeb2>
				nack = reject_ext_ind_send(_radio.conn_curr,
    dbfe:	222a      	movs	r2, #42	; 0x2a
    dc00:	e7ea      	b.n	dbd8 <isr_rx_conn_pkt_ctrl+0xe88>
				_radio.conn_curr->llcp_phy.state =
    dc02:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    dc06:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    dc08:	f042 0203 	orr.w	r2, r2, #3
    dc0c:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    dc10:	d116      	bne.n	dc40 <isr_rx_conn_pkt_ctrl+0xef0>
					_radio.conn_curr->llcp_phy.ack--;
    dc12:	3b01      	subs	r3, #1
    dc14:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    dc18:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    dc1c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    dc20:	f36f 0341 	bfc	r3, #1, #1
    dc24:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    dc28:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    dc2c:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    dc30:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    dc34:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    dc38:	f362 1347 	bfi	r3, r2, #5, #3
    dc3c:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    dc40:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    dc44:	7b62      	ldrb	r2, [r4, #13]
    dc46:	f3c3 0182 	ubfx	r1, r3, #2, #3
    dc4a:	400a      	ands	r2, r1
    dc4c:	f362 0384 	bfi	r3, r2, #2, #3
    dc50:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    dc54:	7b22      	ldrb	r2, [r4, #12]
    dc56:	b2db      	uxtb	r3, r3
    dc58:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    dc5c:	f362 1347 	bfi	r3, r2, #5, #3
    dc60:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    dc64:	f7ff b94a 	b.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
    dc68:	000142a9 	.word	0x000142a9
    dc6c:	00016162 	.word	0x00016162
    dc70:	20000a1c 	.word	0x20000a1c
    dc74:	200008c0 	.word	0x200008c0
    dc78:	00014ff8 	.word	0x00014ff8
    dc7c:	00016149 	.word	0x00016149
    dc80:	00015047 	.word	0x00015047
    dc84:	00016a43 	.word	0x00016a43
    dc88:	000165bb 	.word	0x000165bb
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    dc8c:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dc90:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    dc94:	f7f8 fe27 	bl	68e6 <mem_acquire>
	if (!node_tx) {
    dc98:	4601      	mov	r1, r0
    dc9a:	2800      	cmp	r0, #0
    dc9c:	f43f aa6b 	beq.w	d176 <isr_rx_conn_pkt_ctrl+0x426>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    dca0:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    dca4:	2202      	movs	r2, #2
    dca6:	f362 0301 	bfi	r3, r2, #0, #2
    dcaa:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    dcae:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    dcb2:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    dcb6:	4293      	cmp	r3, r2
    dcb8:	d11a      	bne.n	dcf0 <isr_rx_conn_pkt_ctrl+0xfa0>
		conn->llcp_phy.ack--;
    dcba:	3b01      	subs	r3, #1
    dcbc:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    dcc0:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    dcc4:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    dcc8:	f36f 0341 	bfc	r3, #1, #1
    dccc:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    dcd0:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    dcd4:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    dcd8:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    dcdc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    dce0:	f362 1347 	bfi	r3, r2, #5, #3
    dce4:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    dce8:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    dcec:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    dcf0:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    dcf4:	7b62      	ldrb	r2, [r4, #13]
    dcf6:	f3c3 0082 	ubfx	r0, r3, #2, #3
    dcfa:	4002      	ands	r2, r0
    dcfc:	f362 0384 	bfi	r3, r2, #2, #3
    dd00:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    dd04:	7b22      	ldrb	r2, [r4, #12]
    dd06:	b2db      	uxtb	r3, r3
    dd08:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    dd0c:	f362 1347 	bfi	r3, r2, #5, #3
    dd10:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dd14:	790b      	ldrb	r3, [r1, #4]
    dd16:	f043 0303 	orr.w	r3, r3, #3
    dd1a:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    dd1c:	2303      	movs	r3, #3
    dd1e:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    dd20:	2317      	movs	r3, #23
    dd22:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    dd24:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    dd28:	f3c3 0302 	ubfx	r3, r3, #0, #3
    dd2c:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    dd2e:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    dd32:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    dd36:	724b      	strb	r3, [r1, #9]
    dd38:	f7ff ba2f 	b.w	d19a <isr_rx_conn_pkt_ctrl+0x44a>
		if (_radio.conn_curr->role ||
    dd3c:	4e90      	ldr	r6, [pc, #576]	; (df80 <isr_rx_conn_pkt_ctrl+0x1230>)
    dd3e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    dd42:	f995 301d 	ldrsb.w	r3, [r5, #29]
    dd46:	2b00      	cmp	r3, #0
    dd48:	f2c0 80ec 	blt.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    dd4c:	7a41      	ldrb	r1, [r0, #9]
    dd4e:	2017      	movs	r0, #23
    dd50:	f7fb fb80 	bl	9454 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    dd54:	2800      	cmp	r0, #0
    dd56:	f000 80e5 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		if ((_radio.role == ROLE_MASTER) &&
    dd5a:	7cf3      	ldrb	r3, [r6, #19]
    dd5c:	2b04      	cmp	r3, #4
    dd5e:	f47f a8cd 	bne.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
    dd62:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    dd66:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    dd6a:	429a      	cmp	r2, r3
    dd6c:	f43f a8c6 	beq.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_phy.state ==
    dd70:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    dd74:	f003 0203 	and.w	r2, r3, #3
    dd78:	2a02      	cmp	r2, #2
    dd7a:	f47f a8bf 	bne.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    dd7e:	f043 0303 	orr.w	r3, r3, #3
    dd82:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    dd86:	7b62      	ldrb	r2, [r4, #13]
    dd88:	f3c3 0182 	ubfx	r1, r3, #2, #3
    dd8c:	400a      	ands	r2, r1
    dd8e:	f362 0384 	bfi	r3, r2, #2, #3
    dd92:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    dd96:	7b22      	ldrb	r2, [r4, #12]
    dd98:	b2db      	uxtb	r3, r3
    dd9a:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    dd9e:	f362 1347 	bfi	r3, r2, #5, #3
    dda2:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    dda6:	f7ff b85c 	b.w	ce62 <isr_rx_conn_pkt_ctrl+0x112>
		if (!_radio.conn_curr->role ||
    ddaa:	4b75      	ldr	r3, [pc, #468]	; (df80 <isr_rx_conn_pkt_ctrl+0x1230>)
    ddac:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    ddb0:	f996 301d 	ldrsb.w	r3, [r6, #29]
    ddb4:	2b00      	cmp	r3, #0
    ddb6:	f280 80b5 	bge.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    ddba:	7a41      	ldrb	r1, [r0, #9]
    ddbc:	2018      	movs	r0, #24
    ddbe:	f7fb fb49 	bl	9454 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    ddc2:	2800      	cmp	r0, #0
    ddc4:	f000 80ae 	beq.w	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    ddc8:	7b27      	ldrb	r7, [r4, #12]
    ddca:	7b62      	ldrb	r2, [r4, #13]
    ddcc:	ea47 0002 	orr.w	r0, r7, r2
    ddd0:	f010 0007 	ands.w	r0, r0, #7
    ddd4:	d125      	bne.n	de22 <isr_rx_conn_pkt_ctrl+0x10d2>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    ddd6:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    ddda:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    ddde:	4293      	cmp	r3, r2
    dde0:	f43f a88c 	beq.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    dde4:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    dde8:	f003 0303 	and.w	r3, r3, #3
    ddec:	2b02      	cmp	r3, #2
    ddee:	f47f a885 	bne.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!conn->llcp_phy.cmd) {
    ddf2:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    ddf6:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    ddfa:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    ddfc:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    de00:	f57f a87c 	bpl.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    de04:	230c      	movs	r3, #12
		upd->status = 0;
    de06:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    de08:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    de0a:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    de0e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    de12:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    de14:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    de18:	f3c3 0302 	ubfx	r3, r3, #0, #3
    de1c:	7363      	strb	r3, [r4, #13]
    de1e:	f7ff ba6e 	b.w	d2fe <isr_rx_conn_pkt_ctrl+0x5ae>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    de22:	89e0      	ldrh	r0, [r4, #14]
    de24:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    de26:	1ac3      	subs	r3, r0, r3
    de28:	041b      	lsls	r3, r3, #16
    de2a:	f100 80a4 	bmi.w	df76 <isr_rx_conn_pkt_ctrl+0x1226>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    de2e:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    de32:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    de36:	428b      	cmp	r3, r1
    de38:	d005      	beq.n	de46 <isr_rx_conn_pkt_ctrl+0x10f6>
    de3a:	4b52      	ldr	r3, [pc, #328]	; (df84 <isr_rx_conn_pkt_ctrl+0x1234>)
    de3c:	9301      	str	r3, [sp, #4]
    de3e:	9300      	str	r3, [sp, #0]
    de40:	4b51      	ldr	r3, [pc, #324]	; (df88 <isr_rx_conn_pkt_ctrl+0x1238>)
    de42:	f7fe bfcb 	b.w	cddc <isr_rx_conn_pkt_ctrl+0x8c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    de46:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    de4a:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    de4e:	42a3      	cmp	r3, r4
    de50:	d014      	beq.n	de7c <isr_rx_conn_pkt_ctrl+0x112c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    de52:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    de56:	f003 0303 	and.w	r3, r3, #3
    de5a:	2b02      	cmp	r3, #2
    de5c:	d10e      	bne.n	de7c <isr_rx_conn_pkt_ctrl+0x112c>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    de5e:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    de62:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    de66:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    de6a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    de6e:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    de72:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    de74:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    de78:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    de7c:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    de80:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    de84:	f002 0207 	and.w	r2, r2, #7
    de88:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    de8c:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    de90:	f36f 0300 	bfc	r3, #0, #1
    de94:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    de98:	2008      	movs	r0, #8
	conn->llcp_ack--;
    de9a:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    de9c:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    dea0:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    dea4:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    dea8:	2b00      	cmp	r3, #0
    deaa:	f43f a827 	beq.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    deae:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    deb2:	f362 0302 	bfi	r3, r2, #0, #3
    deb6:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    deba:	f7ff b81f 	b.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    debe:	4e30      	ldr	r6, [pc, #192]	; (df80 <isr_rx_conn_pkt_ctrl+0x1230>)
    dec0:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    dec4:	f995 301d 	ldrsb.w	r3, [r5, #29]
    dec8:	2b00      	cmp	r3, #0
    deca:	db2b      	blt.n	df24 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    decc:	7a41      	ldrb	r1, [r0, #9]
    dece:	2019      	movs	r0, #25
    ded0:	f7fb fac0 	bl	9454 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    ded4:	b330      	cbz	r0, df24 <isr_rx_conn_pkt_ctrl+0x11d4>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    ded6:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    deda:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    dede:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    dee2:	7b22      	ldrb	r2, [r4, #12]
    dee4:	f003 0307 	and.w	r3, r3, #7
    dee8:	4213      	tst	r3, r2
    deea:	f43f a807 	beq.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
			if (conn->llcp_req != conn->llcp_ack) {
    deee:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    def2:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    def6:	429a      	cmp	r2, r3
    def8:	f47f a800 	bne.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
			memcpy(&conn->llcp.chan_map.chm[0],
    defc:	2205      	movs	r2, #5
    defe:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    df02:	f105 0079 	add.w	r0, r5, #121	; 0x79
    df06:	f7f3 fe79 	bl	1bfc <memcpy>
			conn->llcp.chan_map.initiate = 1;
    df0a:	2301      	movs	r3, #1
    df0c:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    df10:	2302      	movs	r3, #2
    df12:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    df16:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    df1a:	3b01      	subs	r3, #1
    df1c:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    df20:	f7fe bfec 	b.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
		nack = unknown_rsp_send(_radio.conn_curr,
    df24:	4816      	ldr	r0, [pc, #88]	; (df80 <isr_rx_conn_pkt_ctrl+0x1230>)
    df26:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    df2a:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    df2e:	f7f8 fcda 	bl	68e6 <mem_acquire>
	if (!node_tx) {
    df32:	4601      	mov	r1, r0
    df34:	2800      	cmp	r0, #0
    df36:	f43f a91e 	beq.w	d176 <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    df3a:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    df3c:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    df3e:	f043 0303 	orr.w	r3, r3, #3
    df42:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    df44:	2302      	movs	r3, #2
    df46:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    df48:	2307      	movs	r3, #7
    df4a:	71c3      	strb	r3, [r0, #7]
    df4c:	f7ff b94f 	b.w	d1ee <isr_rx_conn_pkt_ctrl+0x49e>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    df50:	2328      	movs	r3, #40	; 0x28
    df52:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    df56:	f7fe bfd1 	b.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
	if (node_tx) {
    df5a:	2e00      	cmp	r6, #0
    df5c:	f43f a90b 	beq.w	d176 <isr_rx_conn_pkt_ctrl+0x426>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    df60:	490a      	ldr	r1, [pc, #40]	; (df8c <isr_rx_conn_pkt_ctrl+0x123c>)
    df62:	4630      	mov	r0, r6
    df64:	f7f8 fcd9 	bl	691a <mem_release>
    df68:	f7ff b905 	b.w	d176 <isr_rx_conn_pkt_ctrl+0x426>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    df6c:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    df6e:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    df70:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    df72:	4693      	mov	fp, r2
    df74:	e5db      	b.n	db2e <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    df76:	2328      	movs	r3, #40	; 0x28
    df78:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    df7c:	f7fe bfbe 	b.w	cefc <isr_rx_conn_pkt_ctrl+0x1ac>
    df80:	200008c0 	.word	0x200008c0
    df84:	000142a9 	.word	0x000142a9
    df88:	000164cc 	.word	0x000164cc
    df8c:	20000a1c 	.word	0x20000a1c

0000df90 <isr>:
{
    df90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df94:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    df96:	f003 fec9 	bl	11d2c <radio_is_done>
    df9a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    df9c:	b366      	cbz	r6, dff8 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    df9e:	f003 fee5 	bl	11d6c <radio_crc_is_valid>
    dfa2:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    dfa4:	f003 ff66 	bl	11e74 <radio_filter_has_match>
    dfa8:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    dfac:	f003 ff6c 	bl	11e88 <radio_filter_match_get>
    dfb0:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    dfb4:	f004 f950 	bl	12258 <radio_ar_has_match>
    dfb8:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    dfbc:	f004 f93a 	bl	12234 <radio_ar_match_get>
    dfc0:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    dfc4:	f003 ff20 	bl	11e08 <radio_rssi_is_ready>
    dfc8:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    dfca:	4cb4      	ldr	r4, [pc, #720]	; (e29c <isr+0x30c>)
	radio_status_reset();
    dfcc:	f003 fe98 	bl	11d00 <radio_status_reset>
	radio_tmr_status_reset();
    dfd0:	f003 ff6c 	bl	11eac <radio_tmr_status_reset>
	radio_filter_status_reset();
    dfd4:	f003 ff46 	bl	11e64 <radio_filter_status_reset>
	radio_ar_status_reset();
    dfd8:	f004 f932 	bl	12240 <radio_ar_status_reset>
	radio_rssi_status_reset();
    dfdc:	f003 ff0c 	bl	11df8 <radio_rssi_status_reset>
	switch (_radio.state) {
    dfe0:	7d23      	ldrb	r3, [r4, #20]
    dfe2:	2b05      	cmp	r3, #5
    dfe4:	f201 846e 	bhi.w	f8c4 <isr+0x1934>
    dfe8:	e8df f013 	tbh	[pc, r3, lsl #1]
    dfec:	00cd007c 	.word	0x00cd007c
    dff0:	0a1c000e 	.word	0x0a1c000e
    dff4:	0a1c0a1c 	.word	0x0a1c0a1c
		devmatch_id = irkmatch_id = 0xFF;
    dff8:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    dffc:	4635      	mov	r5, r6
    dffe:	46b2      	mov	sl, r6
    e000:	46b1      	mov	r9, r6
    e002:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    e004:	46d8      	mov	r8, fp
    e006:	e7e0      	b.n	dfca <isr+0x3a>
	_radio.state = STATE_RX;
    e008:	2301      	movs	r3, #1
    e00a:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    e00c:	f004 f850 	bl	120b0 <radio_tmr_tifs_base_get>
    e010:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    e012:	2096      	movs	r0, #150	; 0x96
    e014:	f003 ff58 	bl	11ec8 <radio_tmr_tifs_set>
	switch (_radio.role) {
    e018:	7ce3      	ldrb	r3, [r4, #19]
    e01a:	3b01      	subs	r3, #1
    e01c:	2b03      	cmp	r3, #3
    e01e:	f200 80aa 	bhi.w	e176 <isr+0x1e6>
    e022:	e8df f003 	tbb	[pc, r3]
    e026:	3202      	.short	0x3202
    e028:	6262      	.short	0x6262
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e02a:	2300      	movs	r3, #0
    e02c:	461a      	mov	r2, r3
    e02e:	4619      	mov	r1, r3
    e030:	4618      	mov	r0, r3
    e032:	f003 feb9 	bl	11da8 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    e036:	f003 fea7 	bl	11d88 <radio_pkt_scratch_get>
    e03a:	f003 fe29 	bl	11c90 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e03e:	f003 fe6b 	bl	11d18 <radio_is_ready>
    e042:	b138      	cbz	r0, e054 <isr+0xc4>
		LL_ASSERT(!radio_is_ready());
    e044:	4b96      	ldr	r3, [pc, #600]	; (e2a0 <isr+0x310>)
    e046:	9301      	str	r3, [sp, #4]
    e048:	9300      	str	r3, [sp, #0]
    e04a:	4b96      	ldr	r3, [pc, #600]	; (e2a4 <isr+0x314>)
	LL_ASSERT(!radio_is_ready());
    e04c:	4a96      	ldr	r2, [pc, #600]	; (e2a8 <isr+0x318>)
    e04e:	4997      	ldr	r1, [pc, #604]	; (e2ac <isr+0x31c>)
    e050:	4897      	ldr	r0, [pc, #604]	; (e2b0 <isr+0x320>)
    e052:	e34b      	b.n	e6ec <isr+0x75c>
		if (ctrl_rl_enabled()) {
    e054:	f003 f95e 	bl	11314 <ctrl_rl_enabled>
    e058:	b138      	cbz	r0, e06a <isr+0xda>
			u8_t count, *irks = ctrl_irks_get(&count);
    e05a:	a810      	add	r0, sp, #64	; 0x40
    e05c:	f002 feaa 	bl	10db4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e060:	4601      	mov	r1, r0
    e062:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e066:	f004 f8b3 	bl	121d0 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e06a:	2100      	movs	r1, #0
    e06c:	4608      	mov	r0, r1
    e06e:	f003 fe24 	bl	11cba <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e072:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e074:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e076:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e078:	4608      	mov	r0, r1
    e07a:	f003 fe1a 	bl	11cb2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e07e:	1a28      	subs	r0, r5, r0
    e080:	f003 ffac 	bl	11fdc <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    e084:	f003 fffc 	bl	12080 <radio_tmr_end_capture>
    e088:	e02c      	b.n	e0e4 <isr+0x154>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e08a:	2300      	movs	r3, #0
    e08c:	461a      	mov	r2, r3
    e08e:	4619      	mov	r1, r3
    e090:	4618      	mov	r0, r3
    e092:	f003 fe89 	bl	11da8 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    e096:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e09a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    e09e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e0a2:	3008      	adds	r0, #8
    e0a4:	f003 fdf4 	bl	11c90 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e0a8:	f003 fe36 	bl	11d18 <radio_is_ready>
    e0ac:	2800      	cmp	r0, #0
    e0ae:	d1c9      	bne.n	e044 <isr+0xb4>
		if (ctrl_rl_enabled()) {
    e0b0:	f003 f930 	bl	11314 <ctrl_rl_enabled>
    e0b4:	b138      	cbz	r0, e0c6 <isr+0x136>
			u8_t count, *irks = ctrl_irks_get(&count);
    e0b6:	a810      	add	r0, sp, #64	; 0x40
    e0b8:	f002 fe7c 	bl	10db4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e0bc:	4601      	mov	r1, r0
    e0be:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e0c2:	f004 f885 	bl	121d0 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e0c6:	2100      	movs	r1, #0
    e0c8:	4608      	mov	r0, r1
    e0ca:	f003 fdf6 	bl	11cba <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e0ce:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e0d0:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e0d2:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e0d4:	4608      	mov	r0, r1
    e0d6:	f003 fdec 	bl	11cb2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e0da:	1a28      	subs	r0, r5, r0
    e0dc:	f003 ff7e 	bl	11fdc <radio_tmr_hcto_configure>
		radio_rssi_measure();
    e0e0:	f003 fe7a 	bl	11dd8 <radio_rssi_measure>
}
    e0e4:	b013      	add	sp, #76	; 0x4c
    e0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e0ea:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    e0ee:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e0f2:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e0f6:	2100      	movs	r1, #0
    e0f8:	09d3      	lsrs	r3, r2, #7
    e0fa:	f000 0007 	and.w	r0, r0, #7
    e0fe:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e102:	f003 fe51 	bl	11da8 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e106:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e10a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    e10e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e112:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    e116:	3108      	adds	r1, #8
    e118:	f7fb fd58 	bl	9bcc <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    e11c:	f003 fdfc 	bl	11d18 <radio_is_ready>
    e120:	2800      	cmp	r0, #0
    e122:	d18f      	bne.n	e044 <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e124:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    e128:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e12c:	2101      	movs	r1, #1
    e12e:	f000 0007 	and.w	r0, r0, #7
    e132:	f003 fdc2 	bl	11cba <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e136:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    e13a:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    e13e:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    e142:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    e144:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e146:	4405      	add	r5, r0
	switch (phy) {
    e148:	d013      	beq.n	e172 <isr+0x1e2>
		return 40;
    e14a:	2b04      	cmp	r3, #4
    e14c:	bf0c      	ite	eq
    e14e:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    e152:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e154:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    e156:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    e15a:	09c1      	lsrs	r1, r0, #7
    e15c:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e160:	f003 fda7 	bl	11cb2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e164:	1a28      	subs	r0, r5, r0
    e166:	f003 ff39 	bl	11fdc <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    e16a:	2001      	movs	r0, #1
    e16c:	f7fc fb80 	bl	a870 <packet_tx_enqueue>
    e170:	e7b8      	b.n	e0e4 <isr+0x154>
		return 24;
    e172:	2018      	movs	r0, #24
    e174:	e7ee      	b.n	e154 <isr+0x1c4>
		LL_ASSERT(0);
    e176:	4b4a      	ldr	r3, [pc, #296]	; (e2a0 <isr+0x310>)
    e178:	9301      	str	r3, [sp, #4]
    e17a:	9300      	str	r3, [sp, #0]
    e17c:	4b49      	ldr	r3, [pc, #292]	; (e2a4 <isr+0x314>)
		LL_ASSERT(0);
    e17e:	4a4a      	ldr	r2, [pc, #296]	; (e2a8 <isr+0x318>)
    e180:	494a      	ldr	r1, [pc, #296]	; (e2ac <isr+0x31c>)
    e182:	484c      	ldr	r0, [pc, #304]	; (e2b4 <isr+0x324>)
    e184:	e2b2      	b.n	e6ec <isr+0x75c>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    e186:	b926      	cbnz	r6, e192 <isr+0x202>
		_radio.state = STATE_CLOSE;
    e188:	2303      	movs	r3, #3
    e18a:	7523      	strb	r3, [r4, #20]
		radio_disable();
    e18c:	f003 fda6 	bl	11cdc <radio_disable>
    e190:	e7a8      	b.n	e0e4 <isr+0x154>
	switch (_radio.role) {
    e192:	7ce3      	ldrb	r3, [r4, #19]
    e194:	3b01      	subs	r3, #1
    e196:	2b03      	cmp	r3, #3
    e198:	f201 813e 	bhi.w	f418 <isr+0x1488>
    e19c:	e8df f013 	tbh	[pc, r3, lsl #1]
    e1a0:	02ae0004 	.word	0x02ae0004
    e1a4:	05e305e3 	.word	0x05e305e3
		if (crc_ok) {
    e1a8:	2f00      	cmp	r7, #0
    e1aa:	d0ed      	beq.n	e188 <isr+0x1f8>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e1ac:	f1ba 0f00 	cmp.w	sl, #0
    e1b0:	d039      	beq.n	e226 <isr+0x296>
    e1b2:	4658      	mov	r0, fp
    e1b4:	f002 fe5c 	bl	10e70 <ctrl_rl_irk_idx>
    e1b8:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    e1bc:	f003 fde4 	bl	11d88 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e1c0:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    e1c4:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e1c6:	232b      	movs	r3, #43	; 0x2b
    e1c8:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e1ca:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e1cc:	fb11 3302 	smlabb	r3, r1, r2, r3
    e1d0:	930a      	str	r3, [sp, #40]	; 0x28
    e1d2:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e1d4:	f000 030f 	and.w	r3, r0, #15
    e1d8:	2b03      	cmp	r3, #3
    e1da:	d10a      	bne.n	e1f2 <isr+0x262>
    e1dc:	7873      	ldrb	r3, [r6, #1]
    e1de:	2b0c      	cmp	r3, #12
    e1e0:	d107      	bne.n	e1f2 <isr+0x262>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e1e2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e1e6:	065f      	lsls	r7, r3, #25
    e1e8:	d51f      	bpl.n	e22a <isr+0x29a>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e1ea:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    e1ee:	0658      	lsls	r0, r3, #25
    e1f0:	d449      	bmi.n	e286 <isr+0x2f6>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    e1f2:	7830      	ldrb	r0, [r6, #0]
    e1f4:	f000 030f 	and.w	r3, r0, #15
    e1f8:	2b05      	cmp	r3, #5
    e1fa:	d1c5      	bne.n	e188 <isr+0x1f8>
    e1fc:	7873      	ldrb	r3, [r6, #1]
    e1fe:	2b22      	cmp	r3, #34	; 0x22
    e200:	d1c2      	bne.n	e188 <isr+0x1f8>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    e202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e204:	5ce3      	ldrb	r3, [r4, r3]
    e206:	f003 030f 	and.w	r3, r3, #15
    e20a:	2b01      	cmp	r3, #1
    e20c:	f040 814f 	bne.w	e4ae <isr+0x51e>
					    ci->connect_ind.init_addr,
    e210:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    e212:	aa10      	add	r2, sp, #64	; 0x40
    e214:	4639      	mov	r1, r7
    e216:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e21a:	f003 f81f 	bl	1125c <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    e21e:	2800      	cmp	r0, #0
    e220:	d14c      	bne.n	e2bc <isr+0x32c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e222:	2000      	movs	r0, #0
    e224:	e05a      	b.n	e2dc <isr+0x34c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e226:	20ff      	movs	r0, #255	; 0xff
    e228:	e7c6      	b.n	e1b8 <isr+0x228>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    e22a:	aa10      	add	r2, sp, #64	; 0x40
    e22c:	1cb1      	adds	r1, r6, #2
    e22e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e232:	f003 f813 	bl	1125c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e236:	2800      	cmp	r0, #0
    e238:	d0d7      	beq.n	e1ea <isr+0x25a>
	return (adv->tx_addr == sr->rx_addr) &&
    e23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e23c:	7832      	ldrb	r2, [r6, #0]
    e23e:	5ce3      	ldrb	r3, [r4, r3]
    e240:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e244:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e248:	d1d3      	bne.n	e1f2 <isr+0x262>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    e24a:	2206      	movs	r2, #6
    e24c:	f106 0108 	add.w	r1, r6, #8
    e250:	1ca8      	adds	r0, r5, #2
    e252:	f7f3 fcbe 	bl	1bd2 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    e256:	2800      	cmp	r0, #0
    e258:	d1cb      	bne.n	e1f2 <isr+0x262>
		_radio.state = STATE_CLOSE;
    e25a:	2303      	movs	r3, #3
    e25c:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    e25e:	f003 fdad 	bl	11dbc <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    e262:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    e266:	2327      	movs	r3, #39	; 0x27
    e268:	fb03 4000 	mla	r0, r3, r0, r4
    e26c:	307b      	adds	r0, #123	; 0x7b
    e26e:	f003 fd15 	bl	11c9c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    e272:	f003 fd51 	bl	11d18 <radio_is_ready>
    e276:	2800      	cmp	r0, #0
    e278:	f43f af34 	beq.w	e0e4 <isr+0x154>
    e27c:	4b08      	ldr	r3, [pc, #32]	; (e2a0 <isr+0x310>)
    e27e:	9301      	str	r3, [sp, #4]
    e280:	9300      	str	r3, [sp, #0]
    e282:	4b0d      	ldr	r3, [pc, #52]	; (e2b8 <isr+0x328>)
    e284:	e6e2      	b.n	e04c <isr+0xbc>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e286:	f1b9 0f00 	cmp.w	r9, #0
    e28a:	d1d6      	bne.n	e23a <isr+0x2aa>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e28c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e290:	f002 fe34 	bl	10efc <ctrl_irk_whitelisted>
    e294:	2800      	cmp	r0, #0
    e296:	d1d0      	bne.n	e23a <isr+0x2aa>
    e298:	e7ab      	b.n	e1f2 <isr+0x262>
    e29a:	bf00      	nop
    e29c:	200008c0 	.word	0x200008c0
    e2a0:	000142a9 	.word	0x000142a9
    e2a4:	000160d6 	.word	0x000160d6
    e2a8:	00014ff8 	.word	0x00014ff8
    e2ac:	00015047 	.word	0x00015047
    e2b0:	0001679c 	.word	0x0001679c
    e2b4:	00014f97 	.word	0x00014f97
    e2b8:	000160e9 	.word	0x000160e9
		       isr_adv_ci_adva_check(adv, ci) &&
    e2bc:	4631      	mov	r1, r6
    e2be:	4628      	mov	r0, r5
    e2c0:	f7fb ff6e 	bl	a1a0 <isr_adv_ci_adva_check>
					    rl_idx) &&
    e2c4:	2800      	cmp	r0, #0
    e2c6:	d0ac      	beq.n	e222 <isr+0x292>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    e2c8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    e2cc:	2bff      	cmp	r3, #255	; 0xff
    e2ce:	f000 80db 	beq.w	e488 <isr+0x4f8>
		return rl_idx == _radio.advertiser.rl_idx;
    e2d2:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    e2d6:	1ac1      	subs	r1, r0, r3
    e2d8:	4248      	negs	r0, r1
    e2da:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e2dc:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    e2e0:	2800      	cmp	r0, #0
    e2e2:	f43f af51 	beq.w	e188 <isr+0x1f8>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    e2e6:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    e2ea:	b133      	cbz	r3, e2fa <isr+0x36a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    e2ec:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    e2f0:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    e2f4:	429a      	cmp	r2, r3
    e2f6:	f47f af47 	bne.w	e188 <isr+0x1f8>
    e2fa:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    e2fe:	2b00      	cmp	r3, #0
    e300:	f43f af42 	beq.w	e188 <isr+0x1f8>
			node_rx = packet_rx_reserve_get(4);
    e304:	2004      	movs	r0, #4
    e306:	f7fb f903 	bl	9510 <packet_rx_reserve_get>
		if (!node_rx) {
    e30a:	4607      	mov	r7, r0
    e30c:	2800      	cmp	r0, #0
    e30e:	f43f af3b 	beq.w	e188 <isr+0x1f8>
		_radio.state = STATE_STOP;
    e312:	f04f 0904 	mov.w	r9, #4
    e316:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    e31a:	f003 fcdf 	bl	11cdc <radio_disable>
		conn = _radio.advertiser.conn;
    e31e:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e322:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    e326:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e328:	f44f 72aa 	mov.w	r2, #340	; 0x154
    e32c:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    e32e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e332:	f7f8 fb10 	bl	6956 <mem_index_get>
		memcpy(&conn->access_addr[0],
    e336:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e33a:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    e33c:	2203      	movs	r2, #3
    e33e:	f106 0112 	add.w	r1, r6, #18
    e342:	f105 0014 	add.w	r0, r5, #20
    e346:	f7f3 fc59 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    e34a:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    e34e:	464a      	mov	r2, r9
    e350:	f106 010e 	add.w	r1, r6, #14
    e354:	4650      	mov	r0, sl
    e356:	f7f3 fc51 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    e35a:	2205      	movs	r2, #5
    e35c:	f106 011e 	add.w	r1, r6, #30
    e360:	4640      	mov	r0, r8
    e362:	f7f3 fc4b 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    e366:	2105      	movs	r1, #5
    e368:	4640      	mov	r0, r8
    e36a:	f7f8 fc67 	bl	6c3c <util_ones_count_get>
		conn->data_chan_count =
    e36e:	7f6b      	ldrb	r3, [r5, #29]
    e370:	f360 0305 	bfi	r3, r0, #0, #6
    e374:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    e376:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    e37a:	f3c3 0304 	ubfx	r3, r3, #0, #5
    e37e:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    e380:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    e382:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    e384:	f240 48e2 	movw	r8, #1250	; 0x4e2
    e388:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    e38c:	7ef2      	ldrb	r2, [r6, #27]
    e38e:	7eb3      	ldrb	r3, [r6, #26]
    e390:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    e394:	4651      	mov	r1, sl
    e396:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    e398:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    e39a:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    e39e:	f7f3 fc2d 	bl	1bfc <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    e3a2:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e3a4:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    e3a6:	f242 7210 	movw	r2, #10000	; 0x2710
    e3aa:	fb02 8303 	mla	r3, r2, r3, r8
    e3ae:	3b01      	subs	r3, #1
    e3b0:	fbb3 f3f8 	udiv	r3, r3, r8
    e3b4:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    e3b6:	4b54      	ldr	r3, [pc, #336]	; (e508 <isr+0x578>)
    e3b8:	4443      	add	r3, r8
    e3ba:	fbb3 f3f8 	udiv	r3, r3, r8
    e3be:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e3c2:	4b52      	ldr	r3, [pc, #328]	; (e50c <isr+0x57c>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e3c4:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e3c6:	4443      	add	r3, r8
    e3c8:	fbb3 f3f8 	udiv	r3, r3, r8
    e3cc:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e3ce:	4282      	cmp	r2, r0
    e3d0:	4613      	mov	r3, r2
    e3d2:	bfc4      	itt	gt
    e3d4:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    e3d8:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e3da:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e3de:	bfc4      	itt	gt
    e3e0:	18d2      	addgt	r2, r2, r3
    e3e2:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    e3e4:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e3e6:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e3ea:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    e3ec:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    e3ee:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    e3f0:	2300      	movs	r3, #0
    e3f2:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    e3f4:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e3f6:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    e3fa:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    e3fc:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e400:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    e404:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    e406:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    e40a:	464a      	mov	r2, r9
    e40c:	f107 001b 	add.w	r0, r7, #27
    e410:	f7f3 fbf4 	bl	1bfc <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    e414:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e418:	f107 030e 	add.w	r3, r7, #14
    e41c:	28ff      	cmp	r0, #255	; 0xff
    e41e:	930b      	str	r3, [sp, #44]	; 0x2c
    e420:	f106 0a02 	add.w	sl, r6, #2
    e424:	f107 0b14 	add.w	fp, r7, #20
    e428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e42a:	d05f      	beq.n	e4ec <isr+0x55c>
			ll_rl_id_addr_get(rl_idx,
    e42c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e42e:	f107 010d 	add.w	r1, r7, #13
    e432:	f002 fed5 	bl	111e0 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    e436:	7b7b      	ldrb	r3, [r7, #13]
    e438:	3302      	adds	r3, #2
    e43a:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    e43c:	464a      	mov	r2, r9
    e43e:	4651      	mov	r1, sl
    e440:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e442:	f7f3 fbdb 	bl	1bfc <memcpy>
			pdu_adv->connect_ind.interval;
    e446:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    e448:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    e44c:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    e44e:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    e452:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    e454:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    e458:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    e45c:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    e460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    e464:	8c28      	ldrh	r0, [r5, #32]
    e466:	f7fb ffaf 	bl	a3c8 <rx_fc_lock>
		packet_rx_enqueue();
    e46a:	f7fb febd 	bl	a1e8 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    e46e:	2003      	movs	r0, #3
    e470:	f7fb f84e 	bl	9510 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    e474:	2800      	cmp	r0, #0
    e476:	d155      	bne.n	e524 <isr+0x594>
    e478:	4b25      	ldr	r3, [pc, #148]	; (e510 <isr+0x580>)
    e47a:	9301      	str	r3, [sp, #4]
    e47c:	9300      	str	r3, [sp, #0]
    e47e:	4b25      	ldr	r3, [pc, #148]	; (e514 <isr+0x584>)
			LL_ASSERT(node_rx);
    e480:	4a25      	ldr	r2, [pc, #148]	; (e518 <isr+0x588>)
    e482:	4926      	ldr	r1, [pc, #152]	; (e51c <isr+0x58c>)
    e484:	4826      	ldr	r0, [pc, #152]	; (e520 <isr+0x590>)
    e486:	e131      	b.n	e6ec <isr+0x75c>
	return (adv->rx_addr == ci->tx_addr) &&
    e488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e48a:	5ce2      	ldrb	r2, [r4, r3]
    e48c:	7833      	ldrb	r3, [r6, #0]
    e48e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e492:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e496:	f47f aec4 	bne.w	e222 <isr+0x292>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    e49a:	2206      	movs	r2, #6
    e49c:	4639      	mov	r1, r7
    e49e:	f105 0008 	add.w	r0, r5, #8
    e4a2:	f7f3 fb96 	bl	1bd2 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    e4a6:	fab0 f080 	clz	r0, r0
    e4aa:	0940      	lsrs	r0, r0, #5
    e4ac:	e716      	b.n	e2dc <isr+0x34c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    e4ae:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e4b2:	09db      	lsrs	r3, r3, #7
    e4b4:	d00d      	beq.n	e4d2 <isr+0x542>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    e4b6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    e4ba:	09db      	lsrs	r3, r3, #7
    e4bc:	f43f aeb1 	beq.w	e222 <isr+0x292>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    e4c0:	f1b9 0f00 	cmp.w	r9, #0
    e4c4:	d10d      	bne.n	e4e2 <isr+0x552>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e4c6:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e4ca:	f002 fd17 	bl	10efc <ctrl_irk_whitelisted>
    e4ce:	b940      	cbnz	r0, e4e2 <isr+0x552>
    e4d0:	e6a7      	b.n	e222 <isr+0x292>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    e4d2:	aa10      	add	r2, sp, #64	; 0x40
    e4d4:	1cb1      	adds	r1, r6, #2
    e4d6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e4da:	f002 febf 	bl	1125c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    e4de:	2800      	cmp	r0, #0
    e4e0:	d0e9      	beq.n	e4b6 <isr+0x526>
	       isr_adv_ci_adva_check(adv, ci);
    e4e2:	4631      	mov	r1, r6
    e4e4:	4628      	mov	r0, r5
    e4e6:	f7fb fe5b 	bl	a1a0 <isr_adv_ci_adva_check>
    e4ea:	e6f7      	b.n	e2dc <isr+0x34c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    e4ec:	4619      	mov	r1, r3
    e4ee:	464a      	mov	r2, r9
    e4f0:	4658      	mov	r0, fp
    e4f2:	f7f3 fbaf 	bl	1c54 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    e4f6:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e4f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    e4fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e4fe:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e500:	464a      	mov	r2, r9
    e502:	4651      	mov	r1, sl
    e504:	e79d      	b.n	e442 <isr+0x4b2>
    e506:	bf00      	nop
    e508:	026259ff 	.word	0x026259ff
    e50c:	01c9c37f 	.word	0x01c9c37f
    e510:	000142a9 	.word	0x000142a9
    e514:	000160e9 	.word	0x000160e9
    e518:	00014ff8 	.word	0x00014ff8
    e51c:	00015047 	.word	0x00015047
    e520:	00016bd3 	.word	0x00016bd3
			node_rx->hdr.handle = conn->handle;
    e524:	8c2b      	ldrh	r3, [r5, #32]
    e526:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    e528:	230b      	movs	r3, #11
    e52a:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    e52c:	7833      	ldrb	r3, [r6, #0]
    e52e:	f013 0320 	ands.w	r3, r3, #32
    e532:	d00e      	beq.n	e552 <isr+0x5c2>
					((u16_t)conn->access_addr[1] << 8) |
    e534:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    e536:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    e538:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    e53a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    e53e:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    e540:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    e544:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    e546:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    e548:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    e54c:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    e54e:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    e550:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    e552:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    e554:	f7fb fe48 	bl	a1e8 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    e558:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    e55c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    e560:	497d      	ldr	r1, [pc, #500]	; (e758 <isr+0x7c8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    e562:	0952      	lsrs	r2, r2, #5
    e564:	f362 0384 	bfi	r3, r2, #2, #3
    e568:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    e56c:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    e570:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    e574:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    e578:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    e57a:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    e57e:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    e582:	4a76      	ldr	r2, [pc, #472]	; (e75c <isr+0x7cc>)
    e584:	f203 233f 	addw	r3, r3, #575	; 0x23f
    e588:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    e58c:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    e58e:	ea4f 0358 	mov.w	r3, r8, lsr #1
    e592:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    e594:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    e596:	7d73      	ldrb	r3, [r6, #21]
    e598:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    e59c:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    e59e:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    e5a2:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e5a4:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    e5a6:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e5a8:	4638      	mov	r0, r7
    e5aa:	f003 fb84 	bl	11cb6 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e5ae:	496c      	ldr	r1, [pc, #432]	; (e760 <isr+0x7d0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e5b0:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e5b2:	f200 4052 	addw	r0, r0, #1106	; 0x452
    e5b6:	a366      	add	r3, pc, #408	; (adr r3, e750 <isr+0x7c0>)
    e5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    e5bc:	fba0 0101 	umull	r0, r1, r0, r1
    e5c0:	f7f1 fe28 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    e5c4:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    e5c8:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    e5ca:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    e5cc:	4293      	cmp	r3, r2
    e5ce:	bf38      	it	cc
    e5d0:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e5d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    e5d6:	469a      	mov	sl, r3
		conn_interval_us -=
    e5d8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    e5da:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    e5dc:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    e5de:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    e5e0:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    e5e4:	f003 fd5e 	bl	120a4 <radio_tmr_end_get>
    e5e8:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    e5ea:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    e5ec:	4639      	mov	r1, r7
		conn_offset_us +=
    e5ee:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    e5f2:	4638      	mov	r0, r7
    e5f4:	f003 fb5d 	bl	11cb2 <radio_tx_chain_delay_get>
    e5f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e5fa:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    e5fe:	4499      	add	r9, r3
    e600:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    e604:	eba9 030b 	sub.w	r3, r9, fp
    e608:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    e60a:	f240 4383 	movw	r3, #1155	; 0x483
    e60e:	9300      	str	r3, [sp, #0]
    e610:	2205      	movs	r2, #5
    e612:	4b54      	ldr	r3, [pc, #336]	; (e764 <isr+0x7d4>)
    e614:	f8df b148 	ldr.w	fp, [pc, #328]	; e760 <isr+0x7d0>
    e618:	4639      	mov	r1, r7
    e61a:	4638      	mov	r0, r7
    e61c:	f7f9 f88a 	bl	7734 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    e620:	f240 4184 	movw	r1, #1156	; 0x484
    e624:	f7fb ff08 	bl	a438 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    e628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e62a:	5ce3      	ldrb	r3, [r4, r3]
    e62c:	f003 030f 	and.w	r3, r3, #15
    e630:	2b01      	cmp	r3, #1
    e632:	d106      	bne.n	e642 <isr+0x6b2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    e634:	9700      	str	r7, [sp, #0]
    e636:	463b      	mov	r3, r7
    e638:	2203      	movs	r2, #3
    e63a:	4639      	mov	r1, r7
    e63c:	4638      	mov	r0, r7
    e63e:	f7f9 f879 	bl	7734 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    e642:	fba8 890b 	umull	r8, r9, r8, fp
    e646:	a342      	add	r3, pc, #264	; (adr r3, e750 <isr+0x7c0>)
    e648:	e9d3 2300 	ldrd	r2, r3, [r3]
    e64c:	4640      	mov	r0, r8
    e64e:	4649      	mov	r1, r9
    e650:	f7f1 fde0 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e654:	f895 3020 	ldrb.w	r3, [r5, #32]
    e658:	68a4      	ldr	r4, [r4, #8]
    e65a:	9506      	str	r5, [sp, #24]
    e65c:	3307      	adds	r3, #7
    e65e:	b2db      	uxtb	r3, r3
    e660:	930a      	str	r3, [sp, #40]	; 0x28
    e662:	f240 439b 	movw	r3, #1179	; 0x49b
    e666:	9308      	str	r3, [sp, #32]
    e668:	4b3f      	ldr	r3, [pc, #252]	; (e768 <isr+0x7d8>)
    e66a:	9307      	str	r3, [sp, #28]
    e66c:	4b3f      	ldr	r3, [pc, #252]	; (e76c <isr+0x7dc>)
    e66e:	9305      	str	r3, [sp, #20]
    e670:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e672:	4a3f      	ldr	r2, [pc, #252]	; (e770 <isr+0x7e0>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e674:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    e676:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e678:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e67a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e67e:	2307      	movs	r3, #7
    e680:	2100      	movs	r1, #0
    e682:	4343      	muls	r3, r0
    e684:	fb02 3301 	mla	r3, r2, r1, r3
    e688:	fba0 1202 	umull	r1, r2, r0, r2
    e68c:	441a      	add	r2, r3
    e68e:	4608      	mov	r0, r1
    e690:	ebb8 0000 	subs.w	r0, r8, r0
    e694:	4611      	mov	r1, r2
    e696:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e69a:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e69c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e6a0:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e6a2:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e6a4:	f7f1 fdb6 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    e6a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e6aa:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    e6ac:	a328      	add	r3, pc, #160	; (adr r3, e750 <isr+0x7c0>)
    e6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e6b2:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    e6b6:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e6ba:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    e6bc:	f7f1 fdaa 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e6c0:	eba4 040a 	sub.w	r4, r4, sl
    e6c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e6c8:	9000      	str	r0, [sp, #0]
    e6ca:	4623      	mov	r3, r4
    e6cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e6ce:	4629      	mov	r1, r5
    e6d0:	4628      	mov	r0, r5
    e6d2:	f7f8 ff91 	bl	75f8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e6d6:	f030 0302 	bics.w	r3, r0, #2
    e6da:	f43f ad03 	beq.w	e0e4 <isr+0x154>
    e6de:	4b25      	ldr	r3, [pc, #148]	; (e774 <isr+0x7e4>)
    e6e0:	9301      	str	r3, [sp, #4]
    e6e2:	9300      	str	r3, [sp, #0]
    e6e4:	4b24      	ldr	r3, [pc, #144]	; (e778 <isr+0x7e8>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e6e6:	4a25      	ldr	r2, [pc, #148]	; (e77c <isr+0x7ec>)
    e6e8:	4925      	ldr	r1, [pc, #148]	; (e780 <isr+0x7f0>)
    e6ea:	4826      	ldr	r0, [pc, #152]	; (e784 <isr+0x7f4>)
		LL_ASSERT(0);
    e6ec:	f7f2 fc4e 	bl	f8c <printk>
    e6f0:	4040      	eors	r0, r0
    e6f2:	f380 8811 	msr	BASEPRI, r0
    e6f6:	f04f 0004 	mov.w	r0, #4
    e6fa:	df02      	svc	2
		rl_idx = devmatch_ok ?
    e6fc:	f1b9 0f00 	cmp.w	r9, #0
    e700:	d01c      	beq.n	e73c <isr+0x7ac>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    e702:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    e706:	4641      	mov	r1, r8
    e708:	f3c0 1000 	ubfx	r0, r0, #4, #1
    e70c:	f002 fb5c 	bl	10dc8 <ctrl_rl_idx>
    e710:	4680      	mov	r8, r0
		if (crc_ok &&
    e712:	b147      	cbz	r7, e726 <isr+0x796>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    e714:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    e718:	06da      	lsls	r2, r3, #27
    e71a:	d535      	bpl.n	e788 <isr+0x7f8>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    e71c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    e720:	06db      	lsls	r3, r3, #27
    e722:	f100 811d 	bmi.w	e960 <isr+0x9d0>
			_radio.state = STATE_CLOSE;
    e726:	2303      	movs	r3, #3
    e728:	7523      	strb	r3, [r4, #20]
			radio_disable();
    e72a:	f003 fad7 	bl	11cdc <radio_disable>
			_radio.scanner.state = 0;
    e72e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    e732:	f36f 0341 	bfc	r3, #1, #1
    e736:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    e73a:	e4d3      	b.n	e0e4 <isr+0x154>
		rl_idx = devmatch_ok ?
    e73c:	f1ba 0f00 	cmp.w	sl, #0
    e740:	d003      	beq.n	e74a <isr+0x7ba>
    e742:	4658      	mov	r0, fp
    e744:	f002 fb94 	bl	10e70 <ctrl_rl_irk_idx>
    e748:	e7e2      	b.n	e710 <isr+0x780>
    e74a:	f04f 08ff 	mov.w	r8, #255	; 0xff
    e74e:	e7e0      	b.n	e712 <isr+0x782>
    e750:	1afd498d 	.word	0x1afd498d
    e754:	00000007 	.word	0x00000007
    e758:	0001678c 	.word	0x0001678c
    e75c:	000f4240 	.word	0x000f4240
    e760:	3b9aca00 	.word	0x3b9aca00
    e764:	0000a439 	.word	0x0000a439
    e768:	0000a3fd 	.word	0x0000a3fd
    e76c:	0000c8a5 	.word	0x0000c8a5
    e770:	1afd498d 	.word	0x1afd498d
    e774:	000142a9 	.word	0x000142a9
    e778:	000160e9 	.word	0x000160e9
    e77c:	00014ff8 	.word	0x00014ff8
    e780:	00015047 	.word	0x00015047
    e784:	0001656d 	.word	0x0001656d
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    e788:	f1b9 0f00 	cmp.w	r9, #0
    e78c:	d005      	beq.n	e79a <isr+0x80a>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    e78e:	4641      	mov	r1, r8
    e790:	4650      	mov	r0, sl
    e792:	f002 fcf1 	bl	11178 <ctrl_rl_idx_allowed>
    e796:	2800      	cmp	r0, #0
    e798:	d0c0      	beq.n	e71c <isr+0x78c>
	bool dir_report = false;
    e79a:	2300      	movs	r3, #0
    e79c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    e7a0:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e7a4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    e7a8:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    e7ac:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    e7b0:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    e7b4:	2b00      	cmp	r3, #0
    e7b6:	f000 80ec 	beq.w	e992 <isr+0xa02>
    e7ba:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    e7be:	b133      	cbz	r3, e7ce <isr+0x83e>
				      (_radio.fc_req == _radio.fc_ack)) &&
    e7c0:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    e7c4:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    e7c8:	429a      	cmp	r2, r3
    e7ca:	f040 80e2 	bne.w	e992 <isr+0xa02>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    e7ce:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    e7d2:	f3c3 1000 	ubfx	r0, r3, #4, #1
    e7d6:	2800      	cmp	r0, #0
    e7d8:	f000 80cd 	beq.w	e976 <isr+0x9e6>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    e7dc:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    e7e0:	f010 000f 	ands.w	r0, r0, #15
    e7e4:	f040 814c 	bne.w	ea80 <isr+0xaf0>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    e7e8:	f003 fc5c 	bl	120a4 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    e7ec:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    e7f0:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    e7f4:	48b8      	ldr	r0, [pc, #736]	; (ead8 <isr+0xb48>)
    e7f6:	2207      	movs	r2, #7
    e7f8:	fba3 0100 	umull	r0, r1, r3, r0
    e7fc:	fb02 1103 	mla	r1, r2, r3, r1
    e800:	a3b3      	add	r3, pc, #716	; (adr r3, ead0 <isr+0xb40>)
    e802:	e9d3 2300 	ldrd	r2, r3, [r3]
    e806:	f7f1 fd05 	bl	214 <__aeabi_uldivmod>
    e80a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    e80e:	4287      	cmp	r7, r0
    e810:	f080 80bf 	bcs.w	e992 <isr+0xa02>
			node_rx = packet_rx_reserve_get(4);
    e814:	2004      	movs	r0, #4
    e816:	f7fa fe7b 	bl	9510 <packet_rx_reserve_get>
		if (node_rx == 0) {
    e81a:	4607      	mov	r7, r0
    e81c:	2800      	cmp	r0, #0
    e81e:	d082      	beq.n	e726 <isr+0x796>
		_radio.state = STATE_STOP;
    e820:	2304      	movs	r3, #4
    e822:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    e824:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    e826:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    e82a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    e82e:	f003 faab 	bl	11d88 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    e832:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    e834:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    e838:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    e83c:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    e83e:	f899 3008 	ldrb.w	r3, [r9, #8]
    e842:	7802      	ldrb	r2, [r0, #0]
    e844:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e848:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    e84c:	2322      	movs	r3, #34	; 0x22
    e84e:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    e850:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    e852:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    e854:	4640      	mov	r0, r8
    e856:	f002 fa99 	bl	10d8c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    e85a:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    e85e:	4601      	mov	r1, r0
    e860:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    e862:	f013 0f01 	tst.w	r3, #1
    e866:	f810 3b02 	ldrb.w	r3, [r0], #2
    e86a:	f000 8114 	beq.w	ea96 <isr+0xb06>
    e86e:	2900      	cmp	r1, #0
    e870:	f000 8111 	beq.w	ea96 <isr+0xb06>
			pdu_adv_tx->tx_addr = 1;
    e874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e878:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    e87a:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    e87c:	f7f3 f9be 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    e880:	f105 0308 	add.w	r3, r5, #8
    e884:	4618      	mov	r0, r3
    e886:	2206      	movs	r2, #6
    e888:	f109 010a 	add.w	r1, r9, #10
    e88c:	930a      	str	r3, [sp, #40]	; 0x28
    e88e:	f7f3 f9b5 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    e892:	2204      	movs	r2, #4
    e894:	f106 0110 	add.w	r1, r6, #16
    e898:	f105 000e 	add.w	r0, r5, #14
    e89c:	f7f3 f9ae 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    e8a0:	2203      	movs	r2, #3
    e8a2:	f106 0114 	add.w	r1, r6, #20
    e8a6:	f105 0012 	add.w	r0, r5, #18
    e8aa:	f7f3 f9a7 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    e8ae:	2301      	movs	r3, #1
    e8b0:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    e8b2:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    e8b6:	f240 42e2 	movw	r2, #1250	; 0x4e2
    e8ba:	4353      	muls	r3, r2
    e8bc:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    e8be:	f003 fbf1 	bl	120a4 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    e8c2:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    e8c4:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    e8c8:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    e8ca:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    e8ce:	bfd8      	it	le
    e8d0:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    e8d4:	f1bb 0f00 	cmp.w	fp, #0
    e8d8:	f040 80e8 	bne.w	eaac <isr+0xb1c>
			pdu_adv_tx->connect_ind.win_offset = 0;
    e8dc:	f885 b016 	strb.w	fp, [r5, #22]
    e8e0:	f885 b017 	strb.w	fp, [r5, #23]
    e8e4:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    e8e6:	2100      	movs	r1, #0
    e8e8:	4608      	mov	r0, r1
    e8ea:	f003 f9dd 	bl	11ca8 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    e8ee:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    e8f0:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    e8f4:	4608      	mov	r0, r1
    e8f6:	f003 f9dc 	bl	11cb2 <radio_tx_chain_delay_get>
    e8fa:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    e8fe:	f100 031e 	add.w	r3, r0, #30
    e902:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    e904:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    e908:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    e90a:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    e90e:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    e910:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    e914:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    e916:	f106 0117 	add.w	r1, r6, #23
    e91a:	2205      	movs	r2, #5
    e91c:	f105 001e 	add.w	r0, r5, #30
    e920:	f7f3 f96c 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.hop =
    e924:	7fb2      	ldrb	r2, [r6, #30]
    e926:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    e92a:	f362 0304 	bfi	r3, r2, #0, #5
    e92e:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    e932:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    e936:	f362 1347 	bfi	r3, r2, #5, #3
    e93a:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    e93e:	f003 fa3d 	bl	11dbc <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    e942:	4628      	mov	r0, r5
    e944:	f003 f9aa 	bl	11c9c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    e948:	f003 f9e6 	bl	11d18 <radio_is_ready>
    e94c:	4683      	mov	fp, r0
    e94e:	2800      	cmp	r0, #0
    e950:	f000 80cc 	beq.w	eaec <isr+0xb5c>
		LL_ASSERT(!radio_is_ready());
    e954:	4b61      	ldr	r3, [pc, #388]	; (eadc <isr+0xb4c>)
    e956:	9301      	str	r3, [sp, #4]
    e958:	9300      	str	r3, [sp, #0]
    e95a:	4b61      	ldr	r3, [pc, #388]	; (eae0 <isr+0xb50>)
    e95c:	f7ff bb76 	b.w	e04c <isr+0xbc>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    e960:	f1b9 0f00 	cmp.w	r9, #0
    e964:	f47f af19 	bne.w	e79a <isr+0x80a>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    e968:	4640      	mov	r0, r8
    e96a:	f002 fac7 	bl	10efc <ctrl_irk_whitelisted>
		if (crc_ok &&
    e96e:	2800      	cmp	r0, #0
    e970:	f43f aed9 	beq.w	e726 <isr+0x796>
    e974:	e711      	b.n	e79a <isr+0x80a>
	if (rl_idx != FILTER_IDX_NONE) {
    e976:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    e97a:	d06f      	beq.n	ea5c <isr+0xacc>
		return (rl_idx == _radio.scanner.rl_idx);
    e97c:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    e980:	eba0 0e08 	sub.w	lr, r0, r8
    e984:	f1de 0000 	rsbs	r0, lr, #0
    e988:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    e98c:	2800      	cmp	r0, #0
    e98e:	f47f af25 	bne.w	e7dc <isr+0x84c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    e992:	f899 0008 	ldrb.w	r0, [r9, #8]
    e996:	f010 000f 	ands.w	r0, r0, #15
    e99a:	d002      	beq.n	e9a2 <isr+0xa12>
    e99c:	2806      	cmp	r0, #6
    e99e:	f040 81ac 	bne.w	ecfa <isr+0xd6a>
		 (_radio.scanner.type != 0) &&
    e9a2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    e9a6:	071f      	lsls	r7, r3, #28
    e9a8:	f140 8191 	bpl.w	ecce <isr+0xd3e>
		 (_radio.scanner.type != 0) &&
    e9ac:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    e9b0:	2a00      	cmp	r2, #0
    e9b2:	f040 818c 	bne.w	ecce <isr+0xd3e>
		err = isr_rx_scan_report(rssi_ready,
    e9b6:	f1ba 0f00 	cmp.w	sl, #0
    e9ba:	bf14      	ite	ne
    e9bc:	4641      	movne	r1, r8
    e9be:	21ff      	moveq	r1, #255	; 0xff
    e9c0:	4628      	mov	r0, r5
    e9c2:	f7fb fca9 	bl	a318 <isr_rx_scan_report>
		if (err) {
    e9c6:	2800      	cmp	r0, #0
    e9c8:	f47f aead 	bne.w	e726 <isr+0x796>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    e9cc:	f003 f9dc 	bl	11d88 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    e9d0:	7803      	ldrb	r3, [r0, #0]
    e9d2:	2203      	movs	r2, #3
    e9d4:	f362 0303 	bfi	r3, r2, #0, #4
    e9d8:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    e9da:	f899 3008 	ldrb.w	r3, [r9, #8]
    e9de:	7802      	ldrb	r2, [r0, #0]
    e9e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e9e4:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    e9e8:	230c      	movs	r3, #12
    e9ea:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    e9ec:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    e9ee:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    e9f0:	4640      	mov	r0, r8
    e9f2:	f002 f9cb 	bl	10d8c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    e9f6:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    e9fa:	4601      	mov	r1, r0
    e9fc:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    e9fe:	f013 0f01 	tst.w	r3, #1
    ea02:	f810 3b02 	ldrb.w	r3, [r0], #2
    ea06:	f000 8159 	beq.w	ecbc <isr+0xd2c>
    ea0a:	2900      	cmp	r1, #0
    ea0c:	f000 8156 	beq.w	ecbc <isr+0xd2c>
			pdu_adv_tx->tx_addr = 1;
    ea10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ea14:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ea16:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ea18:	f7f3 f8f0 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    ea1c:	2206      	movs	r2, #6
    ea1e:	f109 010a 	add.w	r1, r9, #10
    ea22:	f105 0008 	add.w	r0, r5, #8
    ea26:	f7f3 f8e9 	bl	1bfc <memcpy>
		_radio.scanner.state = 1;
    ea2a:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    ea2e:	f043 0302 	orr.w	r3, r3, #2
    ea32:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    ea36:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    ea38:	2302      	movs	r3, #2
    ea3a:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    ea3c:	f003 fa44 	bl	11ec8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    ea40:	2000      	movs	r0, #0
    ea42:	f003 f9a5 	bl	11d90 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    ea46:	4628      	mov	r0, r5
    ea48:	f003 f928 	bl	11c9c <radio_pkt_tx_set>
		radio_tmr_end_capture();
    ea4c:	f003 fb18 	bl	12080 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    ea50:	f003 f962 	bl	11d18 <radio_is_ready>
    ea54:	2800      	cmp	r0, #0
    ea56:	f43f ab45 	beq.w	e0e4 <isr+0x154>
    ea5a:	e77b      	b.n	e954 <isr+0x9c4>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    ea5c:	f899 2008 	ldrb.w	r2, [r9, #8]
    ea60:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ea64:	f3c2 1280 	ubfx	r2, r2, #6, #1
    ea68:	4293      	cmp	r3, r2
    ea6a:	d18f      	bne.n	e98c <isr+0x9fc>
		(memcmp(&_radio.scanner.adv_addr[0],
    ea6c:	2206      	movs	r2, #6
    ea6e:	f109 010a 	add.w	r1, r9, #10
    ea72:	481c      	ldr	r0, [pc, #112]	; (eae4 <isr+0xb54>)
    ea74:	f7f3 f8ad 	bl	1bd2 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    ea78:	fab0 f080 	clz	r0, r0
    ea7c:	0940      	lsrs	r0, r0, #5
    ea7e:	e785      	b.n	e98c <isr+0x9fc>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    ea80:	2801      	cmp	r0, #1
    ea82:	d18b      	bne.n	e99c <isr+0xa0c>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    ea84:	2300      	movs	r3, #0
    ea86:	4642      	mov	r2, r8
    ea88:	4631      	mov	r1, r6
    ea8a:	f7fb fbf9 	bl	a280 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    ea8e:	2800      	cmp	r0, #0
    ea90:	f43f af7f 	beq.w	e992 <isr+0xa02>
    ea94:	e6a8      	b.n	e7e8 <isr+0x858>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    ea96:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ea9a:	4913      	ldr	r1, [pc, #76]	; (eae8 <isr+0xb58>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    ea9c:	09d2      	lsrs	r2, r2, #7
    ea9e:	f362 1386 	bfi	r3, r2, #6, #1
    eaa2:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    eaa4:	2206      	movs	r2, #6
    eaa6:	e6e9      	b.n	e87c <isr+0x8ec>
				conn_space_us += conn_interval_us;
    eaa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    eaaa:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    eaac:	f1bb 0f00 	cmp.w	fp, #0
    eab0:	dbfa      	blt.n	eaa8 <isr+0xb18>
    eab2:	459b      	cmp	fp, r3
    eab4:	d3f8      	bcc.n	eaa8 <isr+0xb18>
				(conn_space_us - conn_offset_us) / 1250;
    eab6:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    eaba:	f240 42e2 	movw	r2, #1250	; 0x4e2
    eabe:	fbb3 f3f2 	udiv	r3, r3, r2
    eac2:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    eac4:	7d6b      	ldrb	r3, [r5, #21]
    eac6:	3301      	adds	r3, #1
    eac8:	756b      	strb	r3, [r5, #21]
    eaca:	e70c      	b.n	e8e6 <isr+0x956>
    eacc:	f3af 8000 	nop.w
    ead0:	3b9aca00 	.word	0x3b9aca00
    ead4:	00000000 	.word	0x00000000
    ead8:	1afd498d 	.word	0x1afd498d
    eadc:	000142a9 	.word	0x000142a9
    eae0:	00016107 	.word	0x00016107
    eae4:	200009aa 	.word	0x200009aa
    eae8:	200009a4 	.word	0x200009a4
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    eaec:	f44f 72aa 	mov.w	r2, #340	; 0x154
    eaf0:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    eaf4:	4630      	mov	r0, r6
    eaf6:	f7f7 ff2e 	bl	6956 <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    eafa:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    eafc:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    eafe:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    eb02:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    eb06:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    eb0a:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    eb0c:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    eb10:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    eb12:	f3c3 1380 	ubfx	r3, r3, #6, #1
    eb16:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    eb18:	2206      	movs	r2, #6
    eb1a:	f107 001b 	add.w	r0, r7, #27
    eb1e:	f7f3 f86d 	bl	1bfc <memcpy>
    eb22:	f107 0b0e 	add.w	fp, r7, #14
    eb26:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    eb2a:	f1ba 0f00 	cmp.w	sl, #0
    eb2e:	d032      	beq.n	eb96 <isr+0xc06>
    eb30:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    eb34:	d02f      	beq.n	eb96 <isr+0xc06>
			ll_rl_id_addr_get(rl_idx,
    eb36:	465a      	mov	r2, fp
    eb38:	f107 010d 	add.w	r1, r7, #13
    eb3c:	4640      	mov	r0, r8
    eb3e:	930d      	str	r3, [sp, #52]	; 0x34
    eb40:	f002 fb4e 	bl	111e0 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    eb44:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    eb46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    eb48:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    eb4a:	3202      	adds	r2, #2
    eb4c:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    eb4e:	4618      	mov	r0, r3
    eb50:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    eb52:	f7f3 f853 	bl	1bfc <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    eb56:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    eb5a:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    eb5e:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    eb62:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    eb66:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    eb6a:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    eb6e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    eb72:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    eb76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    eb7a:	8c30      	ldrh	r0, [r6, #32]
    eb7c:	f7fb fc24 	bl	a3c8 <rx_fc_lock>
		packet_rx_enqueue();
    eb80:	f7fb fb32 	bl	a1e8 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    eb84:	2003      	movs	r0, #3
    eb86:	f7fa fcc3 	bl	9510 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    eb8a:	b988      	cbnz	r0, ebb0 <isr+0xc20>
    eb8c:	4bba      	ldr	r3, [pc, #744]	; (ee78 <isr+0xee8>)
    eb8e:	9301      	str	r3, [sp, #4]
    eb90:	9300      	str	r3, [sp, #0]
    eb92:	4bba      	ldr	r3, [pc, #744]	; (ee7c <isr+0xeec>)
    eb94:	e474      	b.n	e480 <isr+0x4f0>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    eb96:	2206      	movs	r2, #6
    eb98:	2100      	movs	r1, #0
    eb9a:	4618      	mov	r0, r3
    eb9c:	f7f3 f85a 	bl	1c54 <memset>
				pdu_adv_tx->rx_addr;
    eba0:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    eba2:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    eba4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    eba8:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ebaa:	2206      	movs	r2, #6
    ebac:	4658      	mov	r0, fp
    ebae:	e7d0      	b.n	eb52 <isr+0xbc2>
			node_rx->hdr.handle = conn->handle;
    ebb0:	8c33      	ldrh	r3, [r6, #32]
    ebb2:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    ebb4:	230b      	movs	r3, #11
    ebb6:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    ebb8:	f899 3008 	ldrb.w	r3, [r9, #8]
    ebbc:	f013 0320 	ands.w	r3, r3, #32
    ebc0:	d00e      	beq.n	ebe0 <isr+0xc50>
					((u16_t)conn->access_addr[1] << 8) |
    ebc2:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    ebc4:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    ebc6:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    ebc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    ebcc:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    ebce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    ebd2:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    ebd4:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    ebd6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    ebda:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    ebdc:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    ebde:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    ebe0:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    ebe2:	f7fb fb01 	bl	a1e8 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    ebe6:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    ebe8:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    ebec:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    ebee:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    ebf2:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    ebf4:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ebf6:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ebfa:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    ebfc:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ebfe:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    ec02:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec04:	4629      	mov	r1, r5
    ec06:	9300      	str	r3, [sp, #0]
    ec08:	4628      	mov	r0, r5
    ec0a:	4b9d      	ldr	r3, [pc, #628]	; (ee80 <isr+0xef0>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ec0c:	f8df a284 	ldr.w	sl, [pc, #644]	; ee94 <isr+0xf04>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ec10:	bf38      	it	cc
    ec12:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec14:	f7f8 fd8e 	bl	7734 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    ec18:	f240 6139 	movw	r1, #1593	; 0x639
    ec1c:	f7fb fc40 	bl	a4a0 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec20:	462b      	mov	r3, r5
    ec22:	2204      	movs	r2, #4
    ec24:	4629      	mov	r1, r5
    ec26:	9500      	str	r5, [sp, #0]
    ec28:	4628      	mov	r0, r5
    ec2a:	f7f8 fd83 	bl	7734 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ec2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ec30:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec34:	68a3      	ldr	r3, [r4, #8]
    ec36:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    ec3a:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec3c:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    ec40:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    ec44:	9308      	str	r3, [sp, #32]
    ec46:	4b8f      	ldr	r3, [pc, #572]	; (ee84 <isr+0xef4>)
    ec48:	9307      	str	r3, [sp, #28]
    ec4a:	4b8f      	ldr	r3, [pc, #572]	; (ee88 <isr+0xef8>)
    ec4c:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec4e:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    ec50:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec52:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    ec54:	4640      	mov	r0, r8
    ec56:	a386      	add	r3, pc, #536	; (adr r3, ee70 <isr+0xee0>)
    ec58:	e9d3 2300 	ldrd	r2, r3, [r3]
    ec5c:	4649      	mov	r1, r9
		ticker_status =
    ec5e:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    ec60:	f7f1 fad8 	bl	214 <__aeabi_uldivmod>
    ec64:	4610      	mov	r0, r2
    ec66:	4619      	mov	r1, r3
    ec68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ec6c:	2300      	movs	r3, #0
    ec6e:	f7f1 fad1 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ec72:	a37f      	add	r3, pc, #508	; (adr r3, ee70 <isr+0xee0>)
    ec74:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec78:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ec7a:	4649      	mov	r1, r9
    ec7c:	4640      	mov	r0, r8
    ec7e:	f7f1 fac9 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    ec82:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ec84:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    ec86:	a37a      	add	r3, pc, #488	; (adr r3, ee70 <isr+0xee0>)
    ec88:	e9d3 2300 	ldrd	r2, r3, [r3]
    ec8c:	fba1 010a 	umull	r0, r1, r1, sl
    ec90:	f7f1 fac0 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec94:	3407      	adds	r4, #7
    ec96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    ec9a:	b2e4      	uxtb	r4, r4
    ec9c:	9000      	str	r0, [sp, #0]
    ec9e:	465b      	mov	r3, fp
    eca0:	4622      	mov	r2, r4
    eca2:	4629      	mov	r1, r5
    eca4:	4628      	mov	r0, r5
    eca6:	f7f8 fca7 	bl	75f8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ecaa:	f030 0302 	bics.w	r3, r0, #2
    ecae:	f43f aa19 	beq.w	e0e4 <isr+0x154>
    ecb2:	4b71      	ldr	r3, [pc, #452]	; (ee78 <isr+0xee8>)
    ecb4:	9301      	str	r3, [sp, #4]
    ecb6:	9300      	str	r3, [sp, #0]
    ecb8:	4b70      	ldr	r3, [pc, #448]	; (ee7c <isr+0xeec>)
    ecba:	e514      	b.n	e6e6 <isr+0x756>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    ecbc:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ecc0:	4972      	ldr	r1, [pc, #456]	; (ee8c <isr+0xefc>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    ecc2:	09d2      	lsrs	r2, r2, #7
    ecc4:	f362 1386 	bfi	r3, r2, #6, #1
    ecc8:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ecca:	2206      	movs	r2, #6
    eccc:	e6a4      	b.n	ea18 <isr+0xa88>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    ecce:	b9a0      	cbnz	r0, ecfa <isr+0xd6a>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    ecd0:	f899 3009 	ldrb.w	r3, [r9, #9]
    ecd4:	2b00      	cmp	r3, #0
    ecd6:	f43f ad26 	beq.w	e726 <isr+0x796>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    ecda:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ecde:	2b00      	cmp	r3, #0
    ece0:	f47f ad21 	bne.w	e726 <isr+0x796>
		err = isr_rx_scan_report(rssi_ready,
    ece4:	f1ba 0f00 	cmp.w	sl, #0
    ece8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    ecec:	bf14      	ite	ne
    ecee:	4641      	movne	r1, r8
    ecf0:	21ff      	moveq	r1, #255	; 0xff
    ecf2:	4628      	mov	r0, r5
    ecf4:	f7fb fb10 	bl	a318 <isr_rx_scan_report>
    ecf8:	e515      	b.n	e726 <isr+0x796>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    ecfa:	2801      	cmp	r0, #1
    ecfc:	d00e      	beq.n	ed1c <isr+0xd8c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    ecfe:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
    ed02:	f003 020b 	and.w	r2, r3, #11
    ed06:	2a02      	cmp	r2, #2
    ed08:	d0e2      	beq.n	ecd0 <isr+0xd40>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    ed0a:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    ed0e:	2b07      	cmp	r3, #7
    ed10:	d10d      	bne.n	ed2e <isr+0xd9e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    ed12:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    ed16:	0758      	lsls	r0, r3, #29
    ed18:	d1da      	bne.n	ecd0 <isr+0xd40>
    ed1a:	e504      	b.n	e726 <isr+0x796>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    ed1c:	ab10      	add	r3, sp, #64	; 0x40
    ed1e:	4642      	mov	r2, r8
    ed20:	4631      	mov	r1, r6
    ed22:	2000      	movs	r0, #0
    ed24:	f7fb faac 	bl	a280 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    ed28:	2800      	cmp	r0, #0
    ed2a:	d1d1      	bne.n	ecd0 <isr+0xd40>
    ed2c:	e7e7      	b.n	ecfe <isr+0xd6e>
		   (_radio.scanner.phy)) ||
    ed2e:	2b04      	cmp	r3, #4
    ed30:	f47f acf9 	bne.w	e726 <isr+0x796>
		   (_radio.scanner.state != 0) &&
    ed34:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    ed38:	0799      	lsls	r1, r3, #30
    ed3a:	f57f acf4 	bpl.w	e726 <isr+0x796>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    ed3e:	f003 f823 	bl	11d88 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    ed42:	f899 3008 	ldrb.w	r3, [r9, #8]
    ed46:	7802      	ldrb	r2, [r0, #0]
    ed48:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ed4c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    ed50:	f47f ace9 	bne.w	e726 <isr+0x796>
		(memcmp(&sreq->scan_req.adv_addr[0],
    ed54:	2206      	movs	r2, #6
    ed56:	f109 010a 	add.w	r1, r9, #10
    ed5a:	3008      	adds	r0, #8
    ed5c:	f7f2 ff39 	bl	1bd2 <memcmp>
		   (_radio.scanner.state != 0) &&
    ed60:	2800      	cmp	r0, #0
    ed62:	d0b5      	beq.n	ecd0 <isr+0xd40>
    ed64:	e4df      	b.n	e726 <isr+0x796>
	_radio.packet_counter++;
    ed66:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    ed6a:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
    ed6e:	3301      	adds	r3, #1
    ed70:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
    ed74:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    ed76:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
    ed7a:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    ed7e:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    ed82:	2301      	movs	r3, #1
    ed84:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    ed88:	2f00      	cmp	r7, #0
    ed8a:	f000 82d2 	beq.w	f332 <isr+0x13a2>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    ed8e:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    ed92:	f898 1008 	ldrb.w	r1, [r8, #8]
    ed96:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    ed9a:	f3c1 0180 	ubfx	r1, r1, #2, #1
    ed9e:	f003 0201 	and.w	r2, r3, #1
    eda2:	4291      	cmp	r1, r2
    eda4:	f000 819e 	beq.w	f0e4 <isr+0x1154>
		_radio.conn_curr->sn++;
    eda8:	f082 0201 	eor.w	r2, r2, #1
    edac:	f362 0300 	bfi	r3, r2, #0, #1
    edb0:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    edb4:	7ce3      	ldrb	r3, [r4, #19]
    edb6:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    edb8:	bf02      	ittt	eq
    edba:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    edbe:	f043 0301 	orreq.w	r3, r3, #1
    edc2:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    edc6:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    edca:	061a      	lsls	r2, r3, #24
    edcc:	f100 8185 	bmi.w	f0da <isr+0x114a>
			node_tx = _radio.conn_curr->pkt_tx_head;
    edd0:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    edd4:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    edd8:	1d30      	adds	r0, r6, #4
    edda:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    edde:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    ede2:	f1b9 0f00 	cmp.w	r9, #0
    ede6:	f000 80ab 	beq.w	ef40 <isr+0xfb0>
				if (_radio.conn_curr->enc_tx) {
    edea:	069b      	lsls	r3, r3, #26
    edec:	d50b      	bpl.n	ee06 <isr+0xe76>
					_radio.conn_curr->ccm_tx.counter++;
    edee:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    edf2:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    edf6:	f11b 0201 	adds.w	r2, fp, #1
    edfa:	f14c 0300 	adc.w	r3, ip, #0
    edfe:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    ee02:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    ee06:	5c43      	ldrb	r3, [r0, r1]
    ee08:	f003 0303 	and.w	r3, r3, #3
    ee0c:	2b03      	cmp	r3, #3
    ee0e:	f040 8097 	bne.w	ef40 <isr+0xfb0>
	switch (pdu_data_tx->llctrl.opcode) {
    ee12:	f89a 3003 	ldrb.w	r3, [sl, #3]
    ee16:	3b02      	subs	r3, #2
    ee18:	2b16      	cmp	r3, #22
    ee1a:	f200 8091 	bhi.w	ef40 <isr+0xfb0>
    ee1e:	e8df f013 	tbh	[pc, r3, lsl #1]
    ee22:	0017      	.short	0x0017
    ee24:	00c50073 	.word	0x00c50073
    ee28:	008f008f 	.word	0x008f008f
    ee2c:	008f008f 	.word	0x008f008f
    ee30:	0091008f 	.word	0x0091008f
    ee34:	008f009c 	.word	0x008f009c
    ee38:	008f00cc 	.word	0x008f00cc
    ee3c:	008f008f 	.word	0x008f008f
    ee40:	008f008f 	.word	0x008f008f
    ee44:	00d6008f 	.word	0x00d6008f
    ee48:	00ee008f 	.word	0x00ee008f
    ee4c:	012000f5 	.word	0x012000f5
		_radio.state = STATE_CLOSE;
    ee50:	2303      	movs	r3, #3
    ee52:	7523      	strb	r3, [r4, #20]
		radio_disable();
    ee54:	f002 ff42 	bl	11cdc <radio_disable>
		LL_ASSERT(!radio_is_ready());
    ee58:	f002 ff5e 	bl	11d18 <radio_is_ready>
    ee5c:	b1e0      	cbz	r0, ee98 <isr+0xf08>
    ee5e:	4b06      	ldr	r3, [pc, #24]	; (ee78 <isr+0xee8>)
    ee60:	9301      	str	r3, [sp, #4]
    ee62:	9300      	str	r3, [sp, #0]
    ee64:	4b0a      	ldr	r3, [pc, #40]	; (ee90 <isr+0xf00>)
    ee66:	f7ff b8f1 	b.w	e04c <isr+0xbc>
    ee6a:	bf00      	nop
    ee6c:	f3af 8000 	nop.w
    ee70:	1afd498d 	.word	0x1afd498d
    ee74:	00000007 	.word	0x00000007
    ee78:	000142a9 	.word	0x000142a9
    ee7c:	00016107 	.word	0x00016107
    ee80:	0000a4a1 	.word	0x0000a4a1
    ee84:	0000a3fd 	.word	0x0000a3fd
    ee88:	0000c8a1 	.word	0x0000c8a1
    ee8c:	200009a4 	.word	0x200009a4
    ee90:	00016113 	.word	0x00016113
    ee94:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    ee98:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    ee9c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    eea0:	2913      	cmp	r1, #19
    eea2:	bf08      	it	eq
    eea4:	2116      	moveq	r1, #22
    eea6:	f7fb fee3 	bl	ac70 <terminate_ind_rx_enqueue>
		terminate = 1;
    eeaa:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    eeac:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    eeb0:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    eeb4:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    eeb6:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    eeba:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    eebe:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    eec0:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    eec4:	d11e      	bne.n	ef04 <isr+0xf74>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    eec6:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    eeca:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    eece:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    eed0:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    eed2:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    eed6:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    eeda:	f040 80c9 	bne.w	f070 <isr+0x10e0>
		if (node_tx) {
    eede:	b18e      	cbz	r6, ef04 <isr+0xf74>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    eee0:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    eee4:	f8d3 e000 	ldr.w	lr, [r3]
    eee8:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    eeec:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    eeee:	bf06      	itte	eq
    eef0:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    eef4:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    eef8:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    eefc:	49cd      	ldr	r1, [pc, #820]	; (f234 <isr+0x12a4>)
    eefe:	4630      	mov	r0, r6
    ef00:	f7f7 fd0b 	bl	691a <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    ef04:	2600      	movs	r6, #0
    ef06:	e0bc      	b.n	f082 <isr+0x10f2>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    ef08:	2208      	movs	r2, #8
    ef0a:	f10a 010e 	add.w	r1, sl, #14
    ef0e:	f105 0094 	add.w	r0, r5, #148	; 0x94
    ef12:	f7f2 fe73 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    ef16:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    ef1a:	2204      	movs	r2, #4
    ef1c:	f10a 0116 	add.w	r1, sl, #22
    ef20:	f500 7089 	add.w	r0, r0, #274	; 0x112
    ef24:	f7f2 fe6a 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_tx = 1;
    ef28:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    ef2c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    ef30:	f042 0208 	orr.w	r2, r2, #8
    ef34:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    ef38:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    ef3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    ef40:	2500      	movs	r5, #0
    ef42:	e7b3      	b.n	eeac <isr+0xf1c>
		_radio.conn_curr->pause_tx = 1;
    ef44:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    ef48:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    ef4c:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    ef50:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    ef54:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    ef58:	e7f2      	b.n	ef40 <isr+0xfb0>
		if (_radio.role == ROLE_MASTER) {
    ef5a:	f894 a013 	ldrb.w	sl, [r4, #19]
    ef5e:	fa5f fa8a 	uxtb.w	sl, sl
    ef62:	f1ba 0f04 	cmp.w	sl, #4
    ef66:	d121      	bne.n	efac <isr+0x101c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ef68:	7933      	ldrb	r3, [r6, #4]
    ef6a:	f043 0303 	orr.w	r3, r3, #3
    ef6e:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    ef70:	2317      	movs	r3, #23
    ef72:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    ef74:	2303      	movs	r3, #3
    ef76:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    ef78:	2208      	movs	r2, #8
    ef7a:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    ef7e:	3004      	adds	r0, #4
    ef80:	f7f2 fe3c 	bl	1bfc <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    ef84:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    ef88:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    ef8a:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    ef8e:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    ef90:	f106 0112 	add.w	r1, r6, #18
    ef94:	2208      	movs	r2, #8
    ef96:	6860      	ldr	r0, [r4, #4]
    ef98:	f003 fecc 	bl	12d34 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    ef9c:	f106 011a 	add.w	r1, r6, #26
    efa0:	4652      	mov	r2, sl
    efa2:	6860      	ldr	r0, [r4, #4]
    efa4:	f003 fec6 	bl	12d34 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
    efa8:	2600      	movs	r6, #0
    efaa:	e7c9      	b.n	ef40 <isr+0xfb0>
			_radio.conn_curr->pause_tx = 1;
    efac:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    efb0:	f043 0308 	orr.w	r3, r3, #8
    efb4:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    efb8:	e7c2      	b.n	ef40 <isr+0xfb0>
		_radio.conn_curr->pause_rx = 0;
    efba:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    efbe:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    efc2:	f36f 03c3 	bfc	r3, #3, #1
    efc6:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    efca:	2300      	movs	r3, #0
    efcc:	e7c2      	b.n	ef54 <isr+0xfc4>
		if ((_radio.conn_curr->llcp_length.req !=
    efce:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    efd2:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    efd6:	429a      	cmp	r2, r3
    efd8:	d0b2      	beq.n	ef40 <isr+0xfb0>
		    (_radio.conn_curr->llcp_length.state ==
    efda:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    efde:	f003 0203 	and.w	r2, r3, #3
    efe2:	2a01      	cmp	r2, #1
    efe4:	d1ac      	bne.n	ef40 <isr+0xfb0>
			_radio.conn_curr->pause_tx = 1;
    efe6:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    efea:	f042 0208 	orr.w	r2, r2, #8
    efee:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    eff2:	2202      	movs	r2, #2
    eff4:	f362 0301 	bfi	r3, r2, #0, #2
    eff8:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    effc:	e7a0      	b.n	ef40 <isr+0xfb0>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    effe:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f002:	2202      	movs	r2, #2
    f004:	f362 0301 	bfi	r3, r2, #0, #2
    f008:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    f00c:	7ce3      	ldrb	r3, [r4, #19]
    f00e:	2b03      	cmp	r3, #3
    f010:	d196      	bne.n	ef40 <isr+0xfb0>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    f012:	2301      	movs	r3, #1
    f014:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    f018:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    f01c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    f020:	2202      	movs	r2, #2
    f022:	2304      	movs	r3, #4
    f024:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    f028:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    f02c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    f030:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    f034:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    f038:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    f03c:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
    f040:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f044:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
    f048:	f003 0307 	and.w	r3, r3, #7
    f04c:	aa12      	add	r2, sp, #72	; 0x48
    f04e:	4413      	add	r3, r2
    f050:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f054:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    f058:	f363 0202 	bfi	r2, r3, #0, #3
    f05c:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    f060:	e76e      	b.n	ef40 <isr+0xfb0>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    f062:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    f066:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f06a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    f06e:	e7f3      	b.n	f058 <isr+0x10c8>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    f070:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    f074:	4293      	cmp	r3, r2
    f076:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    f078:	bf08      	it	eq
    f07a:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    f07e:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
    f082:	b37d      	cbz	r5, f0e4 <isr+0x1154>
		connection_release(_radio.conn_curr);
    f084:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f088:	f7fb fc40 	bl	a90c <connection_release>
		_radio.conn_curr = NULL;
    f08c:	2300      	movs	r3, #0
    f08e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    f092:	f002 ffe9 	bl	12068 <radio_tmr_aa_restore>
    f096:	b918      	cbnz	r0, f0a0 <isr+0x1110>
		radio_tmr_aa_save(radio_tmr_aa_get());
    f098:	f002 ffda 	bl	12050 <radio_tmr_aa_get>
    f09c:	f002 ffde 	bl	1205c <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    f0a0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f0a4:	2b00      	cmp	r3, #0
    f0a6:	f43f a81d 	beq.w	e0e4 <isr+0x154>
	if (tx_release) {
    f0aa:	b11e      	cbz	r6, f0b4 <isr+0x1124>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    f0ac:	4631      	mov	r1, r6
    f0ae:	8c18      	ldrh	r0, [r3, #32]
    f0b0:	f7fb fba2 	bl	a7f8 <pdu_node_tx_release>
	if (rx_enqueue) {
    f0b4:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    f0b8:	2b00      	cmp	r3, #0
    f0ba:	f43f a813 	beq.w	e0e4 <isr+0x154>
		rx_fc_lock(_radio.conn_curr->handle);
    f0be:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f0c2:	8c18      	ldrh	r0, [r3, #32]
    f0c4:	f7fb f980 	bl	a3c8 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    f0c8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f0cc:	8c1b      	ldrh	r3, [r3, #32]
    f0ce:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
    f0d2:	f7fb f889 	bl	a1e8 <packet_rx_enqueue>
    f0d6:	f7ff b805 	b.w	e0e4 <isr+0x154>
			_radio.conn_curr->empty = 0;
    f0da:	f36f 13c7 	bfc	r3, #7, #1
    f0de:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f0e2:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f0e4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f0e8:	f898 2008 	ldrb.w	r2, [r8, #8]
    f0ec:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f0f0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    f0f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f0f8:	429a      	cmp	r2, r3
    f0fa:	f040 80e9 	bne.w	f2d0 <isr+0x1340>
	    (packet_rx_reserve_get(3) != 0) &&
    f0fe:	2003      	movs	r0, #3
    f100:	f7fa fa06 	bl	9510 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f104:	2800      	cmp	r0, #0
    f106:	f000 80e3 	beq.w	f2d0 <isr+0x1340>
	    (packet_rx_reserve_get(3) != 0) &&
    f10a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f10e:	b393      	cbz	r3, f176 <isr+0x11e6>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f110:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    f114:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
    f118:	4293      	cmp	r3, r2
    f11a:	d105      	bne.n	f128 <isr+0x1198>
	      (_radio.fc_req == _radio.fc_ack)) ||
    f11c:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f120:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
    f124:	4291      	cmp	r1, r2
    f126:	d026      	beq.n	f176 <isr+0x11e6>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f128:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
    f12c:	4293      	cmp	r3, r2
    f12e:	f000 80cf 	beq.w	f2d0 <isr+0x1340>
	      (_radio.fc_req != _radio.fc_ack) &&
    f132:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f136:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f13a:	429a      	cmp	r2, r3
    f13c:	f000 80c8 	beq.w	f2d0 <isr+0x1340>
		(((_radio.fc_req == 0) &&
    f140:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
    f144:	b933      	cbnz	r3, f154 <isr+0x11c4>
		   _radio.conn_curr->handle)) ||
    f146:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
    f14a:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
    f14e:	8c1b      	ldrh	r3, [r3, #32]
    f150:	429a      	cmp	r2, r3
    f152:	d010      	beq.n	f176 <isr+0x11e6>
		 ((_radio.fc_req != 0) &&
    f154:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
    f158:	2b00      	cmp	r3, #0
    f15a:	f000 80b9 	beq.w	f2d0 <isr+0x1340>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f15e:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
    f162:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f166:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    f16a:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
    f16e:	8c0b      	ldrh	r3, [r1, #32]
    f170:	429a      	cmp	r2, r3
    f172:	f040 80ad 	bne.w	f2d0 <isr+0x1340>
		if (pdu_data_rx->len != 0) {
    f176:	f898 5009 	ldrb.w	r5, [r8, #9]
    f17a:	2d00      	cmp	r5, #0
    f17c:	f000 80b1 	beq.w	f2e2 <isr+0x1352>
			if (_radio.conn_curr->enc_rx) {
    f180:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f184:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
    f188:	f015 0510 	ands.w	r5, r5, #16
    f18c:	d00c      	beq.n	f1a8 <isr+0x1218>
				done = radio_ccm_is_done();
    f18e:	f002 fff7 	bl	12180 <radio_ccm_is_done>
				LL_ASSERT(done);
    f192:	b940      	cbnz	r0, f1a6 <isr+0x1216>
    f194:	4b28      	ldr	r3, [pc, #160]	; (f238 <isr+0x12a8>)
    f196:	9301      	str	r3, [sp, #4]
    f198:	9300      	str	r3, [sp, #0]
    f19a:	4a28      	ldr	r2, [pc, #160]	; (f23c <isr+0x12ac>)
    f19c:	4b28      	ldr	r3, [pc, #160]	; (f240 <isr+0x12b0>)
    f19e:	4929      	ldr	r1, [pc, #164]	; (f244 <isr+0x12b4>)
    f1a0:	4829      	ldr	r0, [pc, #164]	; (f248 <isr+0x12b8>)
    f1a2:	f7ff baa3 	b.w	e6ec <isr+0x75c>
				ccm_rx_increment = 1;
    f1a6:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
    f1a8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f1ac:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f1b0:	06d9      	lsls	r1, r3, #27
    f1b2:	d42c      	bmi.n	f20e <isr+0x127e>
			    (_radio.conn_curr->pause_rx &&
    f1b4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f1b8:	f898 3008 	ldrb.w	r3, [r8, #8]
    f1bc:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
    f1c0:	f012 0f04 	tst.w	r2, #4
    f1c4:	d142      	bne.n	f24c <isr+0x12bc>
			_radio.conn_curr->appto_expire = 0;
    f1c6:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    f1c8:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
    f1cc:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
    f1d0:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    f1d4:	d004      	beq.n	f1e0 <isr+0x1250>
    f1d6:	2b02      	cmp	r3, #2
    f1d8:	d873      	bhi.n	f2c2 <isr+0x1332>
				*rx_enqueue = 1;
    f1da:	2301      	movs	r3, #1
    f1dc:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
    f1e0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f1e4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f1e8:	f082 0202 	eor.w	r2, r2, #2
    f1ec:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
    f1f0:	2d00      	cmp	r5, #0
    f1f2:	d06d      	beq.n	f2d0 <isr+0x1340>
				_radio.conn_curr->ccm_rx.counter++;
    f1f4:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
    f1f8:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
    f1fc:	f119 0001 	adds.w	r0, r9, #1
    f200:	f14a 0100 	adc.w	r1, sl, #0
    f204:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
    f208:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
    f20c:	e060      	b.n	f2d0 <isr+0x1340>
			     !radio_ccm_mic_is_valid()) ||
    f20e:	f002 ffd5 	bl	121bc <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    f212:	2800      	cmp	r0, #0
    f214:	d1ce      	bne.n	f1b4 <isr+0x1224>
				_radio.state = STATE_CLOSE;
    f216:	2303      	movs	r3, #3
    f218:	7523      	strb	r3, [r4, #20]
				radio_disable();
    f21a:	f002 fd5f 	bl	11cdc <radio_disable>
				LL_ASSERT(!radio_is_ready());
    f21e:	f002 fd7b 	bl	11d18 <radio_is_ready>
    f222:	4605      	mov	r5, r0
    f224:	2800      	cmp	r0, #0
    f226:	d040      	beq.n	f2aa <isr+0x131a>
    f228:	4b03      	ldr	r3, [pc, #12]	; (f238 <isr+0x12a8>)
    f22a:	9301      	str	r3, [sp, #4]
    f22c:	9300      	str	r3, [sp, #0]
    f22e:	4b04      	ldr	r3, [pc, #16]	; (f240 <isr+0x12b0>)
    f230:	f7fe bf0c 	b.w	e04c <isr+0xbc>
    f234:	20000a1c 	.word	0x20000a1c
    f238:	000142a9 	.word	0x000142a9
    f23c:	00014ff8 	.word	0x00014ff8
    f240:	00016177 	.word	0x00016177
    f244:	00015047 	.word	0x00015047
    f248:	000167cf 	.word	0x000167cf
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    f24c:	f003 0103 	and.w	r1, r3, #3
    f250:	2903      	cmp	r1, #3
    f252:	d1e0      	bne.n	f216 <isr+0x1286>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f254:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    f258:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f25c:	f1be 0f00 	cmp.w	lr, #0
    f260:	f002 0240 	and.w	r2, r2, #64	; 0x40
    f264:	db15      	blt.n	f292 <isr+0x1302>
	       (!conn->role &&
    f266:	b922      	cbnz	r2, f272 <isr+0x12e2>
		((!conn->refresh &&
    f268:	2902      	cmp	r1, #2
    f26a:	d0ac      	beq.n	f1c6 <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f26c:	2911      	cmp	r1, #17
    f26e:	d8d2      	bhi.n	f216 <isr+0x1286>
    f270:	e009      	b.n	f286 <isr+0x12f6>
		 (conn->refresh &&
    f272:	1e8a      	subs	r2, r1, #2
    f274:	b2d2      	uxtb	r2, r2
    f276:	2a09      	cmp	r2, #9
    f278:	d8f8      	bhi.n	f26c <isr+0x12dc>
    f27a:	f240 2e05 	movw	lr, #517	; 0x205
    f27e:	fa2e f202 	lsr.w	r2, lr, r2
    f282:	07d2      	lsls	r2, r2, #31
    f284:	d49f      	bmi.n	f1c6 <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f286:	4aac      	ldr	r2, [pc, #688]	; (f538 <isr+0x15a8>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f288:	fa22 f101 	lsr.w	r1, r2, r1
    f28c:	07ca      	lsls	r2, r1, #31
    f28e:	d5c2      	bpl.n	f216 <isr+0x1286>
    f290:	e799      	b.n	f1c6 <isr+0x1236>
	       (conn->role &&
    f292:	b92a      	cbnz	r2, f2a0 <isr+0x1310>
		((!conn->refresh &&
    f294:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    f296:	d096      	beq.n	f1c6 <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f298:	2911      	cmp	r1, #17
    f29a:	d8bc      	bhi.n	f216 <isr+0x1286>
    f29c:	4aa7      	ldr	r2, [pc, #668]	; (f53c <isr+0x15ac>)
    f29e:	e7f3      	b.n	f288 <isr+0x12f8>
		 (conn->refresh &&
    f2a0:	1e8a      	subs	r2, r1, #2
    f2a2:	2a01      	cmp	r2, #1
    f2a4:	d98f      	bls.n	f1c6 <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    f2a6:	290b      	cmp	r1, #11
    f2a8:	e7f5      	b.n	f296 <isr+0x1306>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    f2aa:	213d      	movs	r1, #61	; 0x3d
    f2ac:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f2b0:	f7fb fcde 	bl	ac70 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    f2b4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f2b8:	f7fb fb28 	bl	a90c <connection_release>
				_radio.conn_curr = NULL;
    f2bc:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    f2c0:	e6e7      	b.n	f092 <isr+0x1102>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    f2c2:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    f2c6:	4640      	mov	r0, r8
    f2c8:	f7fd fd42 	bl	cd50 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    f2cc:	2800      	cmp	r0, #0
    f2ce:	d087      	beq.n	f1e0 <isr+0x1250>
		_radio.conn_curr->supervision_expire = 0;
    f2d0:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
    f2d4:	2300      	movs	r3, #0
    f2d6:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
    f2da:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
    f2dc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    f2e0:	e03e      	b.n	f360 <isr+0x13d0>
		} else if ((_radio.conn_curr->enc_rx) ||
    f2e2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    f2e6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    f2ea:	f013 0f14 	tst.w	r3, #20
    f2ee:	f43f af77 	beq.w	f1e0 <isr+0x1250>
					    (conn->latency + 6)) ?
    f2f2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    f2f4:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    f2f8:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    f2fa:	4299      	cmp	r1, r3
    f2fc:	bfc4      	itt	gt
    f2fe:	1f8b      	subgt	r3, r1, #6
    f300:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    f302:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    f306:	bfcc      	ite	gt
    f308:	b29b      	uxthgt	r3, r3
    f30a:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    f30c:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
    f30e:	bf1e      	ittt	ne
    f310:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
    f314:	2300      	movne	r3, #0
    f316:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    f31a:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    f31e:	2b00      	cmp	r3, #0
    f320:	f47f af5e 	bne.w	f1e0 <isr+0x1250>
				conn->appto_expire = conn->appto_reload;
    f324:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    f328:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    f32c:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
    f330:	e756      	b.n	f1e0 <isr+0x1250>
		if (_radio.crc_expire == 0) {
    f332:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    f336:	b913      	cbnz	r3, f33e <isr+0x13ae>
			_radio.crc_expire = 2;
    f338:	2302      	movs	r3, #2
    f33a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
    f33e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    f342:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
    f346:	3b01      	subs	r3, #1
    f348:	b2db      	uxtb	r3, r3
    f34a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    f34e:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    f352:	fab3 f583 	clz	r5, r3
    f356:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    f358:	bb86      	cbnz	r6, f3bc <isr+0x142c>
			_radio.conn_curr->supervision_expire =
    f35a:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    f35c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f360:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    f364:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f366:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    f36a:	f7fd fbb3 	bl	cad4 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f36e:	7d23      	ldrb	r3, [r4, #20]
    f370:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f372:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f376:	d010      	beq.n	f39a <isr+0x140a>
    f378:	bb15      	cbnz	r5, f3c0 <isr+0x1430>
    f37a:	b137      	cbz	r7, f38a <isr+0x13fa>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    f37c:	f898 3008 	ldrb.w	r3, [r8, #8]
    f380:	06d8      	lsls	r0, r3, #27
    f382:	d402      	bmi.n	f38a <isr+0x13fa>
			 (pdu_data_tx->len == 0)) ||
    f384:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
    f386:	785b      	ldrb	r3, [r3, #1]
    f388:	b1d3      	cbz	r3, f3c0 <isr+0x1430>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    f38a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    f38e:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f392:	2b00      	cmp	r3, #0
    f394:	bf0c      	ite	eq
    f396:	2302      	moveq	r3, #2
    f398:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    f39a:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f39c:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
    f39e:	d12d      	bne.n	f3fc <isr+0x146c>
		if (_radio.role == ROLE_MASTER) {
    f3a0:	7ce3      	ldrb	r3, [r4, #19]
    f3a2:	2b04      	cmp	r3, #4
    f3a4:	d10e      	bne.n	f3c4 <isr+0x1434>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    f3a6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f3aa:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f3ae:	f369 12c7 	bfi	r2, r9, #7, #1
    f3b2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
    f3b6:	f002 fc91 	bl	11cdc <radio_disable>
    f3ba:	e66a      	b.n	f092 <isr+0x1102>
	struct radio_pdu_node_tx *tx_release = NULL;
    f3bc:	2600      	movs	r6, #0
    f3be:	e7cf      	b.n	f360 <isr+0x13d0>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f3c0:	2303      	movs	r3, #3
    f3c2:	e7ea      	b.n	f39a <isr+0x140a>
			radio_switch_complete_and_disable();
    f3c4:	f002 fcfa 	bl	11dbc <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    f3c8:	9910      	ldr	r1, [sp, #64]	; 0x40
    f3ca:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f3ce:	780b      	ldrb	r3, [r1, #0]
    f3d0:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
    f3d4:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    f3d8:	f3c2 0240 	ubfx	r2, r2, #1, #1
    f3dc:	f362 0382 	bfi	r3, r2, #2, #1
    f3e0:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    f3e2:	f7fa fc1f 	bl	9c24 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    f3e6:	f002 fc97 	bl	11d18 <radio_is_ready>
    f3ea:	2800      	cmp	r0, #0
    f3ec:	f43f ae51 	beq.w	f092 <isr+0x1102>
    f3f0:	4b53      	ldr	r3, [pc, #332]	; (f540 <isr+0x15b0>)
    f3f2:	9301      	str	r3, [sp, #4]
    f3f4:	9300      	str	r3, [sp, #0]
    f3f6:	4b53      	ldr	r3, [pc, #332]	; (f544 <isr+0x15b4>)
    f3f8:	f7fe be28 	b.w	e04c <isr+0xbc>
		radio_tmr_tifs_set(RADIO_TIFS);
    f3fc:	2096      	movs	r0, #150	; 0x96
    f3fe:	f002 fd63 	bl	11ec8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    f402:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f406:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f40a:	f000 0007 	and.w	r0, r0, #7
    f40e:	f002 fcbf 	bl	11d90 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    f412:	f002 fe35 	bl	12080 <radio_tmr_end_capture>
    f416:	e7d7      	b.n	f3c8 <isr+0x1438>
		LL_ASSERT(0);
    f418:	4b49      	ldr	r3, [pc, #292]	; (f540 <isr+0x15b0>)
    f41a:	9301      	str	r3, [sp, #4]
    f41c:	9300      	str	r3, [sp, #0]
    f41e:	4b4a      	ldr	r3, [pc, #296]	; (f548 <isr+0x15b8>)
    f420:	f7fe bead 	b.w	e17e <isr+0x1ee>
	switch (_radio.role) {
    f424:	7ce2      	ldrb	r2, [r4, #19]
    f426:	2a04      	cmp	r2, #4
    f428:	f200 823a 	bhi.w	f8a0 <isr+0x1910>
    f42c:	e8df f012 	tbh	[pc, r2, lsl #1]
    f430:	00050228 	.word	0x00050228
    f434:	00bf0058 	.word	0x00bf0058
    f438:	00bf      	.short	0x00bf
	if ((_radio.state == STATE_CLOSE) &&
    f43a:	2b03      	cmp	r3, #3
    f43c:	d109      	bne.n	f452 <isr+0x14c2>
	    (_radio.advertiser.chan_map_current != 0)) {
    f43e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    f442:	0759      	lsls	r1, r3, #29
    f444:	d005      	beq.n	f452 <isr+0x14c2>
		adv_setup();
    f446:	f7fb fb35 	bl	aab4 <adv_setup>
		radio_tx_enable();
    f44a:	f002 fc41 	bl	11cd0 <radio_tx_enable>
    f44e:	f7fe be19 	b.w	e084 <isr+0xf4>
		radio_filter_disable();
    f452:	f002 fcfd 	bl	11e50 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    f456:	7d23      	ldrb	r3, [r4, #20]
    f458:	2b03      	cmp	r3, #3
    f45a:	f040 808f 	bne.w	f57c <isr+0x15ec>
		    (!_radio.advertiser.is_hdcd)) {
    f45e:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    f462:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    f466:	f040 8089 	bne.w	f57c <isr+0x15ec>
			entropy_nrf_get_entropy_isr(_radio.entropy,
    f46a:	2201      	movs	r2, #1
    f46c:	a910      	add	r1, sp, #64	; 0x40
    f46e:	6860      	ldr	r0, [r4, #4]
    f470:	f003 fc60 	bl	12d34 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
    f474:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    f478:	4834      	ldr	r0, [pc, #208]	; (f54c <isr+0x15bc>)
			random_delay %= 10;
    f47a:	230a      	movs	r3, #10
    f47c:	fbb1 f2f3 	udiv	r2, r1, r3
    f480:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    f484:	3201      	adds	r2, #1
    f486:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    f488:	b2d6      	uxtb	r6, r2
    f48a:	fba6 0100 	umull	r0, r1, r6, r0
    f48e:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    f490:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    f494:	fb03 1106 	mla	r1, r3, r6, r1
    f498:	a325      	add	r3, pc, #148	; (adr r3, f530 <isr+0x15a0>)
    f49a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f49e:	f7f0 feb9 	bl	214 <__aeabi_uldivmod>
			ticker_status =
    f4a2:	f640 734b 	movw	r3, #3915	; 0xf4b
    f4a6:	9306      	str	r3, [sp, #24]
    f4a8:	4b29      	ldr	r3, [pc, #164]	; (f550 <isr+0x15c0>)
    f4aa:	9305      	str	r3, [sp, #20]
    f4ac:	9504      	str	r5, [sp, #16]
    f4ae:	b283      	uxth	r3, r0
    f4b0:	9503      	str	r5, [sp, #12]
    f4b2:	9502      	str	r5, [sp, #8]
    f4b4:	9501      	str	r5, [sp, #4]
    f4b6:	9500      	str	r5, [sp, #0]
    f4b8:	2205      	movs	r2, #5
    f4ba:	4629      	mov	r1, r5
    f4bc:	4628      	mov	r0, r5
    f4be:	f7f8 f8eb 	bl	7698 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f4c2:	f030 0302 	bics.w	r3, r0, #2
    f4c6:	d059      	beq.n	f57c <isr+0x15ec>
    f4c8:	7ca3      	ldrb	r3, [r4, #18]
    f4ca:	2b05      	cmp	r3, #5
    f4cc:	d056      	beq.n	f57c <isr+0x15ec>
    f4ce:	4b1c      	ldr	r3, [pc, #112]	; (f540 <isr+0x15b0>)
    f4d0:	9301      	str	r3, [sp, #4]
    f4d2:	9300      	str	r3, [sp, #0]
    f4d4:	4a1f      	ldr	r2, [pc, #124]	; (f554 <isr+0x15c4>)
    f4d6:	4b20      	ldr	r3, [pc, #128]	; (f558 <isr+0x15c8>)
    f4d8:	4920      	ldr	r1, [pc, #128]	; (f55c <isr+0x15cc>)
    f4da:	4821      	ldr	r0, [pc, #132]	; (f560 <isr+0x15d0>)
    f4dc:	f7ff b906 	b.w	e6ec <isr+0x75c>
	if (_radio.state == STATE_CLOSE) {
    f4e0:	2b03      	cmp	r3, #3
    f4e2:	d13f      	bne.n	f564 <isr+0x15d4>
		radio_tmr_tifs_set(RADIO_TIFS);
    f4e4:	2096      	movs	r0, #150	; 0x96
    f4e6:	f002 fcef 	bl	11ec8 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f4ea:	2300      	movs	r3, #0
    f4ec:	4619      	mov	r1, r3
    f4ee:	461a      	mov	r2, r3
    f4f0:	4618      	mov	r0, r3
    f4f2:	f002 fc59 	bl	11da8 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    f4f6:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f4fa:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    f4fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    f502:	3008      	adds	r0, #8
    f504:	f002 fbc4 	bl	11c90 <radio_pkt_rx_set>
		radio_rssi_measure();
    f508:	f002 fc66 	bl	11dd8 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    f50c:	f001 ff02 	bl	11314 <ctrl_rl_enabled>
    f510:	b138      	cbz	r0, f522 <isr+0x1592>
			u8_t count, *irks = ctrl_irks_get(&count);
    f512:	a810      	add	r0, sp, #64	; 0x40
    f514:	f001 fc4e 	bl	10db4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f518:	4601      	mov	r1, r0
    f51a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f51e:	f002 fe57 	bl	121d0 <radio_ar_configure>
		_radio.state = STATE_RX;
    f522:	2301      	movs	r3, #1
    f524:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
    f526:	f002 fbcd 	bl	11cc4 <radio_rx_enable>
    f52a:	f7fe bdab 	b.w	e084 <isr+0xf4>
    f52e:	bf00      	nop
    f530:	1afd498d 	.word	0x1afd498d
    f534:	00000007 	.word	0x00000007
    f538:	00022060 	.word	0x00022060
    f53c:	00022040 	.word	0x00022040
    f540:	000142a9 	.word	0x000142a9
    f544:	00016187 	.word	0x00016187
    f548:	00016193 	.word	0x00016193
    f54c:	d4a51000 	.word	0xd4a51000
    f550:	0000a509 	.word	0x0000a509
    f554:	00014ff8 	.word	0x00014ff8
    f558:	000161a6 	.word	0x000161a6
    f55c:	00015047 	.word	0x00015047
    f560:	000167f5 	.word	0x000167f5
		radio_filter_disable();
    f564:	f002 fc74 	bl	11e50 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    f568:	7d23      	ldrb	r3, [r4, #20]
    f56a:	2b05      	cmp	r3, #5
    f56c:	d106      	bne.n	f57c <isr+0x15ec>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f56e:	2300      	movs	r3, #0
    f570:	9300      	str	r3, [sp, #0]
    f572:	2204      	movs	r2, #4
    f574:	4619      	mov	r1, r3
    f576:	4618      	mov	r0, r3
    f578:	f7f8 f8dc 	bl	7734 <ticker_stop>
	_radio.role = ROLE_NONE;
    f57c:	2500      	movs	r5, #0
    f57e:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
    f580:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
    f582:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    f584:	f002 fd1e 	bl	11fc4 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f588:	462a      	mov	r2, r5
    f58a:	4629      	mov	r1, r5
    f58c:	4628      	mov	r0, r5
    f58e:	4bb2      	ldr	r3, [pc, #712]	; (f858 <isr+0x18c8>)
    f590:	f7f7 fa74 	bl	6a7c <mayfly_enqueue>
	LL_ASSERT(!retval);
    f594:	4605      	mov	r5, r0
    f596:	2800      	cmp	r0, #0
    f598:	f000 8188 	beq.w	f8ac <isr+0x191c>
    f59c:	4baf      	ldr	r3, [pc, #700]	; (f85c <isr+0x18cc>)
    f59e:	9301      	str	r3, [sp, #4]
    f5a0:	9300      	str	r3, [sp, #0]
    f5a2:	4aaf      	ldr	r2, [pc, #700]	; (f860 <isr+0x18d0>)
    f5a4:	4baf      	ldr	r3, [pc, #700]	; (f864 <isr+0x18d4>)
    f5a6:	49b0      	ldr	r1, [pc, #704]	; (f868 <isr+0x18d8>)
    f5a8:	48b0      	ldr	r0, [pc, #704]	; (f86c <isr+0x18dc>)
    f5aa:	f7ff b89f 	b.w	e6ec <isr+0x75c>
	if (_radio.conn_curr == 0) {
    f5ae:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f5b2:	2800      	cmp	r0, #0
    f5b4:	d0e2      	beq.n	f57c <isr+0x15ec>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    f5b6:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    f5ba:	b181      	cbz	r1, f5de <isr+0x164e>
    f5bc:	7ce3      	ldrb	r3, [r4, #19]
    f5be:	2b03      	cmp	r3, #3
    f5c0:	d003      	beq.n	f5ca <isr+0x163a>
    f5c2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f5c6:	07da      	lsls	r2, r3, #31
    f5c8:	d509      	bpl.n	f5de <isr+0x164e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    f5ca:	f7fb fb51 	bl	ac70 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f5ce:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f5d2:	f7fb f99b 	bl	a90c <connection_release>
			_radio.conn_curr = NULL;
    f5d6:	2300      	movs	r3, #0
    f5d8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f5dc:	e7ce      	b.n	f57c <isr+0x15ec>
	latency_event = _radio.conn_curr->latency_event;
    f5de:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    f5e2:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
    f5e6:	f10b 0601 	add.w	r6, fp, #1
    f5ea:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    f5ec:	2f00      	cmp	r7, #0
    f5ee:	f000 8084 	beq.w	f6fa <isr+0x176a>
		if (_radio.role == ROLE_SLAVE) {
    f5f2:	7ce3      	ldrb	r3, [r4, #19]
    f5f4:	2b03      	cmp	r3, #3
    f5f6:	d173      	bne.n	f6e0 <isr+0x1750>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f5f8:	f002 fd36 	bl	12068 <radio_tmr_aa_restore>
    f5fc:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
    f5fe:	f002 fd39 	bl	12074 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    f602:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
    f606:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
    f60a:	f003 0307 	and.w	r3, r3, #7
    f60e:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f610:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
    f614:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
    f616:	d052      	beq.n	f6be <isr+0x172e>
		return 40;
    f618:	2b04      	cmp	r3, #4
    f61a:	bf0c      	ite	eq
    f61c:	f44f 78bc 	moveq.w	r8, #376	; 0x178
    f620:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    f624:	f100 0330 	add.w	r3, r0, #48	; 0x30
    f628:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
    f62a:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    f62c:	930a      	str	r3, [sp, #40]	; 0x28
    f62e:	f8df a24c 	ldr.w	sl, [pc, #588]	; f87c <isr+0x18ec>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f632:	a387      	add	r3, pc, #540	; (adr r3, f850 <isr+0x18c0>)
    f634:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    f638:	d844      	bhi.n	f6c4 <isr+0x1734>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f63a:	fba0 010a 	umull	r0, r1, r0, sl
    f63e:	f7f0 fde9 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f644:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f646:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f64a:	a381      	add	r3, pc, #516	; (adr r3, f850 <isr+0x18c0>)
    f64c:	e9d3 2300 	ldrd	r2, r3, [r3]
    f650:	fba0 010a 	umull	r0, r1, r0, sl
    f654:	f7f0 fdde 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
    f658:	2300      	movs	r3, #0
    f65a:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    f65c:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    f65e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f662:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
    f666:	b3ab      	cbz	r3, f6d4 <isr+0x1744>
				if (pdu_data_tx->len ||
    f668:	795b      	ldrb	r3, [r3, #5]
    f66a:	b913      	cbnz	r3, f672 <isr+0x16e2>
    f66c:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
    f670:	b10b      	cbz	r3, f676 <isr+0x16e6>
					_radio.conn_curr->latency_event = 0;
    f672:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    f674:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    f676:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f67a:	2200      	movs	r2, #0
    f67c:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    f67e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f682:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    f686:	b1c3      	cbz	r3, f6ba <isr+0x172a>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    f688:	429e      	cmp	r6, r3
    f68a:	f080 80b0 	bcs.w	f7ee <isr+0x185e>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    f68e:	1b9b      	subs	r3, r3, r6
    f690:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    f692:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    f694:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    f696:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    f69a:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    f69c:	f240 80a9 	bls.w	f7f2 <isr+0x1862>
			else if (_radio.role == ROLE_SLAVE) {
    f6a0:	7ce3      	ldrb	r3, [r4, #19]
    f6a2:	2b03      	cmp	r3, #3
    f6a4:	d109      	bne.n	f6ba <isr+0x172a>
				if (latency_event != 0) {
    f6a6:	f1bb 0f00 	cmp.w	fp, #0
    f6aa:	f040 80a2 	bne.w	f7f2 <isr+0x1862>
					force = _radio.conn_curr->slave.force & 0x01;
    f6ae:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    f6b0:	087b      	lsrs	r3, r7, #1
					if (force) {
    f6b2:	f017 0701 	ands.w	r7, r7, #1
    f6b6:	d13d      	bne.n	f734 <isr+0x17a4>
					_radio.conn_curr->slave.force >>= 1;
    f6b8:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
    f6ba:	2700      	movs	r7, #0
    f6bc:	e03d      	b.n	f73a <isr+0x17aa>
		return 24;
    f6be:	f04f 0818 	mov.w	r8, #24
    f6c2:	e7af      	b.n	f624 <isr+0x1694>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f6c4:	fba9 010a 	umull	r0, r1, r9, sl
    f6c8:	f7f0 fda4 	bl	214 <__aeabi_uldivmod>
    f6cc:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f6ce:	f108 0030 	add.w	r0, r8, #48	; 0x30
    f6d2:	e7ba      	b.n	f64a <isr+0x16ba>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    f6d4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    f6d8:	07db      	lsls	r3, r3, #31
    f6da:	d5cc      	bpl.n	f676 <isr+0x16e6>
				_radio.conn_curr->latency_event =
    f6dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    f6de:	e7c9      	b.n	f674 <isr+0x16e4>
		} else if (reason_peer) {
    f6e0:	b149      	cbz	r1, f6f6 <isr+0x1766>
			_radio.conn_curr->master.terminate_ack = 1;
    f6e2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f6e6:	f043 0301 	orr.w	r3, r3, #1
    f6ea:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    f6ee:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
    f6f2:	4645      	mov	r5, r8
    f6f4:	e7bf      	b.n	f676 <isr+0x16e6>
	ticks_drift_minus = 0;
    f6f6:	4688      	mov	r8, r1
    f6f8:	e7fb      	b.n	f6f2 <isr+0x1762>
	else if (_radio.conn_curr->connect_expire) {
    f6fa:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    f6fc:	b185      	cbz	r5, f720 <isr+0x1790>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    f6fe:	42ae      	cmp	r6, r5
    f700:	d204      	bcs.n	f70c <isr+0x177c>
			_radio.conn_curr->connect_expire -= elapsed_event;
    f702:	1bad      	subs	r5, r5, r6
    f704:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    f706:	463d      	mov	r5, r7
    f708:	46a8      	mov	r8, r5
    f70a:	e7b8      	b.n	f67e <isr+0x16ee>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    f70c:	213e      	movs	r1, #62	; 0x3e
    f70e:	f7fb faaf 	bl	ac70 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f712:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f716:	f7fb f8f9 	bl	a90c <connection_release>
			_radio.conn_curr = NULL;
    f71a:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    f71e:	e72d      	b.n	f57c <isr+0x15ec>
		if (!_radio.conn_curr->supervision_expire) {
    f720:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
    f724:	f1b8 0f00 	cmp.w	r8, #0
    f728:	d1ee      	bne.n	f708 <isr+0x1778>
			_radio.conn_curr->supervision_expire =
    f72a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    f72c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    f730:	4645      	mov	r5, r8
    f732:	e7a4      	b.n	f67e <isr+0x16ee>
						_radio.conn_curr->slave.force |=
    f734:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f738:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
    f73a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    f73e:	b123      	cbz	r3, f74a <isr+0x17ba>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    f740:	429e      	cmp	r6, r3
    f742:	d258      	bcs.n	f7f6 <isr+0x1866>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    f744:	1b9b      	subs	r3, r3, r6
    f746:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    f74a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    f74e:	b123      	cbz	r3, f75a <isr+0x17ca>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    f750:	429e      	cmp	r6, r3
    f752:	d252      	bcs.n	f7fa <isr+0x186a>
			_radio.conn_curr->apto_expire -= elapsed_event;
    f754:	1b9b      	subs	r3, r3, r6
    f756:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    f75a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    f75e:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    f762:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    f766:	b123      	cbz	r3, f772 <isr+0x17e2>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    f768:	429e      	cmp	r6, r3
    f76a:	d25c      	bcs.n	f826 <isr+0x1896>
			_radio.conn_curr->appto_expire -= elapsed_event;
    f76c:	1b9e      	subs	r6, r3, r6
    f76e:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    f772:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    f776:	428b      	cmp	r3, r1
    f778:	d006      	beq.n	f788 <isr+0x17f8>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    f77a:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    f77e:	3b01      	subs	r3, #1
    f780:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
    f782:	bf9c      	itt	ls
    f784:	2300      	movls	r3, #0
    f786:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    f788:	b917      	cbnz	r7, f790 <isr+0x1800>
    f78a:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    f78c:	455b      	cmp	r3, fp
    f78e:	d05c      	beq.n	f84a <isr+0x18ba>
		lazy = _radio.conn_curr->latency_event + 1;
    f790:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    f792:	3301      	adds	r3, #1
    f794:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    f796:	b935      	cbnz	r5, f7a6 <isr+0x1816>
    f798:	f1b8 0f00 	cmp.w	r8, #0
    f79c:	d103      	bne.n	f7a6 <isr+0x1816>
    f79e:	b913      	cbnz	r3, f7a6 <isr+0x1816>
	    (lazy != 0) || (force != 0)) {
    f7a0:	2f00      	cmp	r7, #0
    f7a2:	f43f aeeb 	beq.w	f57c <isr+0x15ec>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    f7a6:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
    f7aa:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    f7ac:	3207      	adds	r2, #7
		ticker_status =
    f7ae:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    f7b0:	b2d6      	uxtb	r6, r2
		ticker_status =
    f7b2:	4a2f      	ldr	r2, [pc, #188]	; (f870 <isr+0x18e0>)
    f7b4:	9205      	str	r2, [sp, #20]
    f7b6:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
    f7b8:	9606      	str	r6, [sp, #24]
		ticker_status =
    f7ba:	9704      	str	r7, [sp, #16]
    f7bc:	9102      	str	r1, [sp, #8]
    f7be:	9101      	str	r1, [sp, #4]
    f7c0:	f8cd 8000 	str.w	r8, [sp]
    f7c4:	4632      	mov	r2, r6
    f7c6:	4608      	mov	r0, r1
    f7c8:	f7f7 ff66 	bl	7698 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f7cc:	f030 0302 	bics.w	r3, r0, #2
    f7d0:	f43f aed4 	beq.w	f57c <isr+0x15ec>
    f7d4:	7ca3      	ldrb	r3, [r4, #18]
    f7d6:	429e      	cmp	r6, r3
    f7d8:	f43f aed0 	beq.w	f57c <isr+0x15ec>
    f7dc:	4b1f      	ldr	r3, [pc, #124]	; (f85c <isr+0x18cc>)
    f7de:	9301      	str	r3, [sp, #4]
    f7e0:	9300      	str	r3, [sp, #0]
    f7e2:	4a1f      	ldr	r2, [pc, #124]	; (f860 <isr+0x18d0>)
    f7e4:	4b23      	ldr	r3, [pc, #140]	; (f874 <isr+0x18e4>)
    f7e6:	4920      	ldr	r1, [pc, #128]	; (f868 <isr+0x18d8>)
    f7e8:	4823      	ldr	r0, [pc, #140]	; (f878 <isr+0x18e8>)
    f7ea:	f7fe bf7f 	b.w	e6ec <isr+0x75c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    f7ee:	2108      	movs	r1, #8
    f7f0:	e6eb      	b.n	f5ca <isr+0x163a>
				force = 1;
    f7f2:	2701      	movs	r7, #1
    f7f4:	e7a1      	b.n	f73a <isr+0x17aa>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    f7f6:	2122      	movs	r1, #34	; 0x22
    f7f8:	e6e7      	b.n	f5ca <isr+0x163a>
			_radio.conn_curr->apto_expire = 0;
    f7fa:	2300      	movs	r3, #0
    f7fc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
    f800:	2002      	movs	r0, #2
    f802:	f7f9 fe85 	bl	9510 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    f806:	b928      	cbnz	r0, f814 <isr+0x1884>
    f808:	4b14      	ldr	r3, [pc, #80]	; (f85c <isr+0x18cc>)
    f80a:	9301      	str	r3, [sp, #4]
    f80c:	9300      	str	r3, [sp, #0]
    f80e:	4b19      	ldr	r3, [pc, #100]	; (f874 <isr+0x18e4>)
    f810:	f7fe be36 	b.w	e480 <isr+0x4f0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
    f814:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f818:	8c1b      	ldrh	r3, [r3, #32]
    f81a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
    f81c:	230a      	movs	r3, #10
    f81e:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
    f820:	f7fa fce2 	bl	a1e8 <packet_rx_enqueue>
    f824:	e799      	b.n	f75a <isr+0x17ca>
			_radio.conn_curr->appto_expire = 0;
    f826:	2300      	movs	r3, #0
    f828:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    f82c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
    f830:	2b00      	cmp	r3, #0
    f832:	d19e      	bne.n	f772 <isr+0x17e2>
    f834:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    f838:	428b      	cmp	r3, r1
    f83a:	d19e      	bne.n	f77a <isr+0x17ea>
				_radio.conn_curr->llcp_type = LLCP_PING;
    f83c:	2307      	movs	r3, #7
    f83e:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    f842:	1e4b      	subs	r3, r1, #1
    f844:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    f848:	e793      	b.n	f772 <isr+0x17e2>
	lazy = 0;
    f84a:	463b      	mov	r3, r7
    f84c:	e7a3      	b.n	f796 <isr+0x1806>
    f84e:	bf00      	nop
    f850:	1afd498d 	.word	0x1afd498d
    f854:	00000007 	.word	0x00000007
    f858:	20003d48 	.word	0x20003d48
    f85c:	000142a9 	.word	0x000142a9
    f860:	00014ff8 	.word	0x00014ff8
    f864:	00016277 	.word	0x00016277
    f868:	00015047 	.word	0x00015047
    f86c:	00016ca7 	.word	0x00016ca7
    f870:	0000a551 	.word	0x0000a551
    f874:	000161b4 	.word	0x000161b4
    f878:	00016863 	.word	0x00016863
    f87c:	3b9aca00 	.word	0x3b9aca00
		LL_ASSERT((_radio.state == STATE_STOP) ||
    f880:	3b04      	subs	r3, #4
    f882:	2b01      	cmp	r3, #1
    f884:	d908      	bls.n	f898 <isr+0x1908>
    f886:	4b12      	ldr	r3, [pc, #72]	; (f8d0 <isr+0x1940>)
    f888:	9301      	str	r3, [sp, #4]
    f88a:	9300      	str	r3, [sp, #0]
    f88c:	4a11      	ldr	r2, [pc, #68]	; (f8d4 <isr+0x1944>)
    f88e:	4b12      	ldr	r3, [pc, #72]	; (f8d8 <isr+0x1948>)
    f890:	4912      	ldr	r1, [pc, #72]	; (f8dc <isr+0x194c>)
    f892:	4813      	ldr	r0, [pc, #76]	; (f8e0 <isr+0x1950>)
    f894:	f7fe bf2a 	b.w	e6ec <isr+0x75c>
		_radio.state = STATE_NONE;
    f898:	2300      	movs	r3, #0
    f89a:	7523      	strb	r3, [r4, #20]
    f89c:	f7fe bc22 	b.w	e0e4 <isr+0x154>
		LL_ASSERT(0);
    f8a0:	4b0b      	ldr	r3, [pc, #44]	; (f8d0 <isr+0x1940>)
    f8a2:	9301      	str	r3, [sp, #4]
    f8a4:	9300      	str	r3, [sp, #0]
    f8a6:	4b0c      	ldr	r3, [pc, #48]	; (f8d8 <isr+0x1948>)
    f8a8:	f7fe bc69 	b.w	e17e <isr+0x1ee>
	clock_control_off(_radio.hf_clock, NULL);
    f8ac:	6820      	ldr	r0, [r4, #0]
    f8ae:	6843      	ldr	r3, [r0, #4]
    f8b0:	4629      	mov	r1, r5
    f8b2:	685b      	ldr	r3, [r3, #4]
    f8b4:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    f8b6:	2201      	movs	r2, #1
    f8b8:	4611      	mov	r1, r2
    f8ba:	4628      	mov	r0, r5
    f8bc:	f7f7 f8b6 	bl	6a2c <mayfly_enable>
    f8c0:	f7fe bc10 	b.w	e0e4 <isr+0x154>
		LL_ASSERT(0);
    f8c4:	4b02      	ldr	r3, [pc, #8]	; (f8d0 <isr+0x1940>)
    f8c6:	9301      	str	r3, [sp, #4]
    f8c8:	9300      	str	r3, [sp, #0]
    f8ca:	4b06      	ldr	r3, [pc, #24]	; (f8e4 <isr+0x1954>)
    f8cc:	f7fe bc57 	b.w	e17e <isr+0x1ee>
    f8d0:	000142a9 	.word	0x000142a9
    f8d4:	00014ff8 	.word	0x00014ff8
    f8d8:	000161c3 	.word	0x000161c3
    f8dc:	00015047 	.word	0x00015047
    f8e0:	000168d9 	.word	0x000168d9
    f8e4:	000161d9 	.word	0x000161d9

0000f8e8 <radio_init>:
{
    f8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    f8ec:	4e3d      	ldr	r6, [pc, #244]	; (f9e4 <radio_init+0xfc>)
{
    f8ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f8f0:	f89d c01c 	ldrb.w	ip, [sp, #28]
    f8f4:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    f8f8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    f8fc:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    f900:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    f902:	f44f 70aa 	mov.w	r0, #340	; 0x154
    f906:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    f90a:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    f90e:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
    f912:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    f914:	f10c 0401 	add.w	r4, ip, #1
    f918:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    f91a:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    f91c:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    f920:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    f924:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
    f926:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    f928:	bf98      	it	ls
    f92a:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
    f92e:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    f932:	bf88      	it	hi
    f934:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    f938:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
    f93c:	bf8c      	ite	hi
    f93e:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    f942:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
    f946:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    f94a:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    f94e:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    f952:	bf8c      	ite	hi
    f954:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    f958:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    f95a:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    f95e:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
    f962:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
    f966:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    f96a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    f96e:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    f972:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
    f976:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    f97a:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    f97c:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
    f97e:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    f982:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    f984:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
    f988:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    f98c:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    f990:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    f992:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    f996:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    f99a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    f99e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    f9a2:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    f9a6:	340a      	adds	r4, #10
    f9a8:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    f9ac:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    f9ae:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    f9b0:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    f9b4:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    f9b8:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    f9ba:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
    f9be:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    f9c2:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
    f9c6:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
    f9ca:	d003      	beq.n	f9d4 <radio_init+0xec>
		return (retcode + mem_size);
    f9cc:	442c      	add	r4, r5
}
    f9ce:	4620      	mov	r0, r4
    f9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    f9d4:	2301      	movs	r3, #1
    f9d6:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
    f9da:	f7f9 fe5d 	bl	9698 <common_init>
	radio_setup();
    f9de:	f002 f8a7 	bl	11b30 <radio_setup>
	return retcode;
    f9e2:	e7f4      	b.n	f9ce <radio_init+0xe6>
    f9e4:	200008c0 	.word	0x200008c0

0000f9e8 <ll_reset>:
{
    f9e8:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    f9ea:	2103      	movs	r1, #3
    f9ec:	2005      	movs	r0, #5
    f9ee:	f7f9 ff3d 	bl	986c <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    f9f2:	2104      	movs	r1, #4
    f9f4:	2006      	movs	r0, #6
    f9f6:	f7f9 ff39 	bl	986c <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    f9fa:	4c22      	ldr	r4, [pc, #136]	; (fa84 <ll_reset+0x9c>)
    f9fc:	2500      	movs	r5, #0
    f9fe:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    fa02:	b2ab      	uxth	r3, r5
    fa04:	429a      	cmp	r2, r3
    fa06:	f105 0501 	add.w	r5, r5, #1
    fa0a:	d834      	bhi.n	fa76 <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
    fa0c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    fa10:	f36f 13c7 	bfc	r3, #7, #1
    fa14:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    fa18:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
    fa1c:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    fa1e:	f360 0300 	bfi	r3, r0, #0, #1
    fa22:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fa26:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fa28:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
    fa2c:	fbb3 f3f2 	udiv	r3, r3, r2
    fa30:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fa34:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
    fa38:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fa3c:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    fa3e:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
    fa42:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fa46:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
    fa4a:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
    fa4e:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
    fa52:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fa56:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
    fa5a:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
    fa5e:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
    fa62:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
    fa66:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
    fa6a:	f001 fee1 	bl	11830 <ll_filter_reset>
}
    fa6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    fa72:	f7f9 be11 	b.w	9698 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    fa76:	1da8      	adds	r0, r5, #6
    fa78:	21ff      	movs	r1, #255	; 0xff
    fa7a:	b2c0      	uxtb	r0, r0
    fa7c:	f7f9 fef6 	bl	986c <role_disable>
    fa80:	e7bd      	b.n	f9fe <ll_reset+0x16>
    fa82:	bf00      	nop
    fa84:	200008c0 	.word	0x200008c0

0000fa88 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    fa88:	4b02      	ldr	r3, [pc, #8]	; (fa94 <ll_adv_is_enabled+0xc>)
    fa8a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    fa8e:	09c0      	lsrs	r0, r0, #7
    fa90:	4770      	bx	lr
    fa92:	bf00      	nop
    fa94:	200008c0 	.word	0x200008c0

0000fa98 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    fa98:	4b04      	ldr	r3, [pc, #16]	; (faac <radio_adv_filter_pol_get+0x14>)
    fa9a:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    fa9e:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    faa0:	bfba      	itte	lt
    faa2:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
    faa6:	0980      	lsrlt	r0, r0, #6
    faa8:	2000      	movge	r0, #0
}
    faaa:	4770      	bx	lr
    faac:	200008c0 	.word	0x200008c0

0000fab0 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    fab0:	4a09      	ldr	r2, [pc, #36]	; (fad8 <ll_scan_is_enabled+0x28>)
    fab2:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
    fab6:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
    faba:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    fabe:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    fac2:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    fac4:	f003 0301 	and.w	r3, r3, #1
    fac8:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    facc:	bf14      	ite	ne
    face:	2004      	movne	r0, #4
    fad0:	2000      	moveq	r0, #0
}
    fad2:	4318      	orrs	r0, r3
    fad4:	4770      	bx	lr
    fad6:	bf00      	nop
    fad8:	200008c0 	.word	0x200008c0

0000fadc <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    fadc:	4b05      	ldr	r3, [pc, #20]	; (faf4 <radio_scan_filter_pol_get+0x18>)
    fade:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    fae2:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    fae6:	bf1c      	itt	ne
    fae8:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
    faec:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    faf0:	4770      	bx	lr
    faf2:	bf00      	nop
    faf4:	200008c0 	.word	0x200008c0

0000faf8 <radio_connect_enable>:
{
    faf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
    fafc:	f8df 8384 	ldr.w	r8, [pc, #900]	; fe84 <radio_connect_enable+0x38c>
{
    fb00:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
    fb02:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
    fb06:	9303      	str	r3, [sp, #12]
    fb08:	4683      	mov	fp, r0
    fb0a:	468a      	mov	sl, r1
    fb0c:	4691      	mov	r9, r2
    fb0e:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
    fb10:	2e00      	cmp	r6, #0
    fb12:	f040 819c 	bne.w	fe4e <radio_connect_enable+0x356>
	link = mem_acquire(&_radio.link_rx_free);
    fb16:	f508 70a4 	add.w	r0, r8, #328	; 0x148
    fb1a:	f7f6 fee4 	bl	68e6 <mem_acquire>
	if (!link) {
    fb1e:	4607      	mov	r7, r0
    fb20:	b150      	cbz	r0, fb38 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
    fb22:	f508 7086 	add.w	r0, r8, #268	; 0x10c
    fb26:	f7f6 fede 	bl	68e6 <mem_acquire>
	if (!conn) {
    fb2a:	4604      	mov	r4, r0
    fb2c:	b930      	cbnz	r0, fb3c <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
    fb2e:	f508 71a4 	add.w	r1, r8, #328	; 0x148
    fb32:	4638      	mov	r0, r7
    fb34:	f7f6 fef1 	bl	691a <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    fb38:	2007      	movs	r0, #7
    fb3a:	e15c      	b.n	fdf6 <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
    fb3c:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
    fb40:	f36b 1386 	bfi	r3, fp, #6, #1
    fb44:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
    fb48:	2206      	movs	r2, #6
    fb4a:	4651      	mov	r1, sl
    fb4c:	f108 00ea 	add.w	r0, r8, #234	; 0xea
    fb50:	f7f2 f854 	bl	1bfc <memcpy>
	_radio.scanner.conn_latency = latency;
    fb54:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    fb58:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    fb5c:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
    fb5e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
    fb62:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    fb66:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
    fb68:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    fb6c:	f002 f89c 	bl	11ca8 <radio_tx_ready_delay_get>
    fb70:	49bb      	ldr	r1, [pc, #748]	; (fe60 <radio_connect_enable+0x368>)
    fb72:	f200 4052 	addw	r0, r0, #1106	; 0x452
    fb76:	a3b8      	add	r3, pc, #736	; (adr r3, fe58 <radio_connect_enable+0x360>)
    fb78:	e9d3 2300 	ldrd	r2, r3, [r3]
    fb7c:	fba0 0101 	umull	r0, r1, r0, r1
    fb80:	f7f0 fb48 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
    fb84:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    fb88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fb8c:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
    fb90:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
    fb92:	f8df 82f4 	ldr.w	r8, [pc, #756]	; fe88 <radio_connect_enable+0x390>
	conn->llcp_features = RADIO_BLE_FEAT;
    fb96:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
    fb9a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    fb9e:	2603      	movs	r6, #3
	consecutive_cnt = 1;
    fba0:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
    fba4:	2104      	movs	r1, #4
    fba6:	a805      	add	r0, sp, #20
    fba8:	f7f7 fed4 	bl	7954 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
    fbac:	f8dd c014 	ldr.w	ip, [sp, #20]
    fbb0:	2000      	movs	r0, #0
    fbb2:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
    fbb6:	231f      	movs	r3, #31
	transitions = 0;
    fbb8:	4602      	mov	r2, r0
	consecutive_cnt = 1;
    fbba:	2101      	movs	r1, #1
	while (bit_idx--) {
    fbbc:	3b01      	subs	r3, #1
    fbbe:	b2db      	uxtb	r3, r3
    fbc0:	2bff      	cmp	r3, #255	; 0xff
    fbc2:	d103      	bne.n	fbcc <radio_connect_enable+0xd4>
    fbc4:	b3d0      	cbz	r0, fc3c <radio_connect_enable+0x144>
    fbc6:	f8cd c014 	str.w	ip, [sp, #20]
    fbca:	e037      	b.n	fc3c <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
    fbcc:	fa2c fe03 	lsr.w	lr, ip, r3
    fbd0:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
    fbd4:	45d6      	cmp	lr, sl
    fbd6:	d11a      	bne.n	fc0e <radio_connect_enable+0x116>
			consecutive_cnt++;
    fbd8:	3101      	adds	r1, #1
    fbda:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
    fbdc:	2906      	cmp	r1, #6
    fbde:	d807      	bhi.n	fbf0 <radio_connect_enable+0xf8>
    fbe0:	2b1b      	cmp	r3, #27
    fbe2:	d81a      	bhi.n	fc1a <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
    fbe4:	b122      	cbz	r2, fbf0 <radio_connect_enable+0xf8>
    fbe6:	2b1b      	cmp	r3, #27
    fbe8:	d017      	beq.n	fc1a <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
    fbea:	2a01      	cmp	r2, #1
    fbec:	d815      	bhi.n	fc1a <radio_connect_enable+0x122>
    fbee:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
    fbf0:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
    fbf4:	f1be 0f00 	cmp.w	lr, #0
    fbf8:	f000 8100 	beq.w	fdfc <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
    fbfc:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
    fc00:	f04f 0e00 	mov.w	lr, #0
			transitions++;
    fc04:	3201      	adds	r2, #1
    fc06:	2001      	movs	r0, #1
    fc08:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    fc0a:	4601      	mov	r1, r0
    fc0c:	e005      	b.n	fc1a <radio_connect_enable+0x122>
			transitions++;
    fc0e:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
    fc10:	2b1b      	cmp	r3, #27
			transitions++;
    fc12:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    fc14:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
    fc18:	d9e5      	bls.n	fbe6 <radio_connect_enable+0xee>
		if (transitions > 24) {
    fc1a:	2a18      	cmp	r2, #24
    fc1c:	f240 80f6 	bls.w	fe0c <radio_connect_enable+0x314>
    fc20:	b108      	cbz	r0, fc26 <radio_connect_enable+0x12e>
    fc22:	f8cd c014 	str.w	ip, [sp, #20]
    fc26:	3301      	adds	r3, #1
    fc28:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    fc2a:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
    fc2e:	f1be 0f00 	cmp.w	lr, #0
    fc32:	f000 80e8 	beq.w	fe06 <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    fc36:	425b      	negs	r3, r3
    fc38:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
    fc3a:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
    fc3c:	9b05      	ldr	r3, [sp, #20]
    fc3e:	a806      	add	r0, sp, #24
    fc40:	ea83 0308 	eor.w	r3, r3, r8
    fc44:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
    fc48:	2104      	movs	r1, #4
    fc4a:	f7f6 fff7 	bl	6c3c <util_ones_count_get>
    fc4e:	2801      	cmp	r0, #1
    fc50:	f240 80e3 	bls.w	fe1a <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
    fc54:	9b05      	ldr	r3, [sp, #20]
    fc56:	b29a      	uxth	r2, r3
    fc58:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
    fc5c:	f000 80d8 	beq.w	fe10 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    fc60:	2204      	movs	r2, #4
    fc62:	a905      	add	r1, sp, #20
    fc64:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
    fc68:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    fc6a:	f7f1 ffc7 	bl	1bfc <memcpy>
	bt_rand(&conn->crc_init[0], 3);
    fc6e:	2103      	movs	r1, #3
    fc70:	f104 0014 	add.w	r0, r4, #20
    fc74:	f7f7 fe6e 	bl	7954 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
    fc78:	2205      	movs	r2, #5
    fc7a:	497a      	ldr	r1, [pc, #488]	; (fe64 <radio_connect_enable+0x36c>)
    fc7c:	f104 0017 	add.w	r0, r4, #23
    fc80:	f7f1 ffbc 	bl	1bfc <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
    fc84:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
    fc88:	7f63      	ldrb	r3, [r4, #29]
    fc8a:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
    fc8e:	f36f 1386 	bfc	r3, #6, #1
    fc92:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
    fc94:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
    fc96:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
    fc98:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
    fc9a:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
    fc9c:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
    fca0:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
    fca4:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
    fca8:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    fcaa:	211b      	movs	r1, #27
    fcac:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    fcae:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
    fcb0:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
    fcb4:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    fcb6:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
    fcba:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    fcbe:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    fcc0:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
    fcc2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
    fcc6:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
    fcc8:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
    fccc:	2601      	movs	r6, #1
    fcce:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
    fcd2:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
    fcd6:	f363 11c7 	bfi	r1, r3, #7, #1
    fcda:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
    fcde:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
    fce2:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
    fce6:	f366 0102 	bfi	r1, r6, #0, #3
    fcea:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
    fcee:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
    fcf2:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
    fcf4:	b2c9      	uxtb	r1, r1
    fcf6:	f36c 01c5 	bfi	r1, ip, #3, #3
    fcfa:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
    fcfe:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
    fd02:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
    fd04:	f366 0102 	bfi	r1, r6, #0, #3
    fd08:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
    fd0c:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
    fd0e:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
    fd10:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
    fd14:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
    fd16:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
    fd18:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
    fd1c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    fd20:	f363 0100 	bfi	r1, r3, #0, #1
    fd24:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
    fd28:	f240 42e2 	movw	r2, #1250	; 0x4e2
    fd2c:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    fd30:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
    fd34:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    fd38:	1e56      	subs	r6, r2, #1
    fd3a:	f242 7e10 	movw	lr, #10000	; 0x2710
    fd3e:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
    fd42:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    fd46:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    fd4a:	4b47      	ldr	r3, [pc, #284]	; (fe68 <radio_connect_enable+0x370>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    fd4c:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    fd4e:	4947      	ldr	r1, [pc, #284]	; (fe6c <radio_connect_enable+0x374>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    fd50:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    fd52:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    fd54:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    fd58:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    fd5c:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    fd5e:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    fd62:	1d81      	adds	r1, r0, #6
    fd64:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    fd66:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    fd6a:	dc6a      	bgt.n	fe42 <radio_connect_enable+0x34a>
	conn->llcp_version.tx = 0;
    fd6c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    fd70:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
    fd74:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
    fd76:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    fd7a:	f360 0341 	bfi	r3, r0, #1, #1
    fd7e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
    fd82:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
    fd86:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
    fd8a:	f360 1304 	bfi	r3, r0, #4, #1
    fd8e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
    fd92:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
    fd96:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
    fd9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fd9e:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
    fda2:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
    fda6:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
    fdaa:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
    fdae:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
    fdb2:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    fdb6:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
    fdba:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
    fdbe:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
    fdc2:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
    fdc6:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
    fdca:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
    fdce:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
    fdd2:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
    fdd6:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
    fdda:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    fdde:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
    fde2:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
    fde6:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
    fdea:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    fdee:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
    fdf2:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
    fdf6:	b007      	add	sp, #28
    fdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
    fdfc:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
    fe00:	f04f 0e01 	mov.w	lr, #1
    fe04:	e6fe      	b.n	fc04 <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
    fe06:	3b01      	subs	r3, #1
    fe08:	4313      	orrs	r3, r2
    fe0a:	e716      	b.n	fc3a <radio_connect_enable+0x142>
		if (transitions > 24) {
    fe0c:	46f2      	mov	sl, lr
    fe0e:	e6d5      	b.n	fbbc <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
    fe10:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
    fe12:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
    fe16:	f47f af23 	bne.w	fc60 <radio_connect_enable+0x168>
    fe1a:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
    fe1c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    fe20:	f47f aec0 	bne.w	fba4 <radio_connect_enable+0xac>
    fe24:	4b12      	ldr	r3, [pc, #72]	; (fe70 <radio_connect_enable+0x378>)
    fe26:	9301      	str	r3, [sp, #4]
    fe28:	9300      	str	r3, [sp, #0]
    fe2a:	4a12      	ldr	r2, [pc, #72]	; (fe74 <radio_connect_enable+0x37c>)
    fe2c:	4b12      	ldr	r3, [pc, #72]	; (fe78 <radio_connect_enable+0x380>)
    fe2e:	4913      	ldr	r1, [pc, #76]	; (fe7c <radio_connect_enable+0x384>)
    fe30:	4813      	ldr	r0, [pc, #76]	; (fe80 <radio_connect_enable+0x388>)
    fe32:	f7f1 f8ab 	bl	f8c <printk>
    fe36:	4040      	eors	r0, r0
    fe38:	f380 8811 	msr	BASEPRI, r0
    fe3c:	f04f 0004 	mov.w	r0, #4
    fe40:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    fe42:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
    fe46:	33fa      	adds	r3, #250	; 0xfa
    fe48:	441a      	add	r2, r3
    fe4a:	b292      	uxth	r2, r2
    fe4c:	e78e      	b.n	fd6c <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
    fe4e:	200c      	movs	r0, #12
    fe50:	e7d1      	b.n	fdf6 <radio_connect_enable+0x2fe>
    fe52:	bf00      	nop
    fe54:	f3af 8000 	nop.w
    fe58:	1afd498d 	.word	0x1afd498d
    fe5c:	00000007 	.word	0x00000007
    fe60:	3b9aca00 	.word	0x3b9aca00
    fe64:	200009da 	.word	0x200009da
    fe68:	01c9c37f 	.word	0x01c9c37f
    fe6c:	026259ff 	.word	0x026259ff
    fe70:	000142a9 	.word	0x000142a9
    fe74:	00014ff8 	.word	0x00014ff8
    fe78:	00016363 	.word	0x00016363
    fe7c:	00015047 	.word	0x00015047
    fe80:	00016dbc 	.word	0x00016dbc
    fe84:	200008c0 	.word	0x200008c0
    fe88:	8e89bed6 	.word	0x8e89bed6

0000fe8c <ll_conn_update>:
{
    fe8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe90:	460c      	mov	r4, r1
    fe92:	4690      	mov	r8, r2
    fe94:	461d      	mov	r5, r3
    fe96:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    fe9a:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
    fe9e:	f7f9 fccf 	bl	9840 <connection_get>
	if (!conn) {
    fea2:	b330      	cbz	r0, fef2 <ll_conn_update+0x66>
	if (!cmd) {
    fea4:	2c00      	cmp	r4, #0
    fea6:	d14a      	bne.n	ff3e <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
    fea8:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    feac:	06d9      	lsls	r1, r3, #27
    feae:	d407      	bmi.n	fec0 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
    feb0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
    feb4:	069a      	lsls	r2, r3, #26
    feb6:	d541      	bpl.n	ff3c <ll_conn_update+0xb0>
		     (conn->llcp_features &
    feb8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
    febc:	079b      	lsls	r3, r3, #30
    febe:	d43d      	bmi.n	ff3c <ll_conn_update+0xb0>
		} else if (conn->role) {
    fec0:	f990 301d 	ldrsb.w	r3, [r0, #29]
    fec4:	2b00      	cmp	r3, #0
    fec6:	da17      	bge.n	fef8 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    fec8:	201a      	movs	r0, #26
    feca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
    fece:	428b      	cmp	r3, r1
    fed0:	d00f      	beq.n	fef2 <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
    fed2:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
    fed6:	f003 0207 	and.w	r2, r3, #7
    feda:	2a03      	cmp	r2, #3
    fedc:	d109      	bne.n	fef2 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
    fede:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
    fee2:	b2db      	uxtb	r3, r3
    fee4:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
    fee8:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
    feec:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    fef0:	e021      	b.n	ff36 <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
    fef2:	200c      	movs	r0, #12
    fef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
    fef8:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    fefc:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    ff00:	429a      	cmp	r2, r3
    ff02:	d1f6      	bne.n	fef2 <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    ff04:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
    ff08:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
    ff0c:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
    ff0e:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    ff10:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
    ff14:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
    ff18:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
    ff1a:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    ff1e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
    ff22:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
    ff26:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
    ff2a:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    ff2e:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
    ff32:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
    ff36:	2000      	movs	r0, #0
    ff38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
    ff3c:	2401      	movs	r4, #1
		cmd--;
    ff3e:	3c01      	subs	r4, #1
		if (cmd) {
    ff40:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ff44:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    ff48:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
    ff4c:	d1bf      	bne.n	fece <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
    ff4e:	4299      	cmp	r1, r3
    ff50:	d1cf      	bne.n	fef2 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
    ff52:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
    ff56:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
    ff5a:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
    ff5e:	b2db      	uxtb	r3, r3
    ff60:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
    ff64:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
    ff66:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
    ff6a:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
    ff6e:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
    ff72:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
    ff76:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
    ff7a:	e7dc      	b.n	ff36 <ll_conn_update+0xaa>

0000ff7c <ll_chm_update>:
{
    ff7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
    ff80:	4c1e      	ldr	r4, [pc, #120]	; (fffc <ll_chm_update+0x80>)
    ff82:	4601      	mov	r1, r0
    ff84:	2205      	movs	r2, #5
{
    ff86:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
    ff88:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    ff8c:	f7f1 fe36 	bl	1bfc <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
    ff90:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    ff94:	2105      	movs	r1, #5
    ff96:	f7f6 fe51 	bl	6c3c <util_ones_count_get>
	_radio.data_chan_count =
    ff9a:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
    ff9e:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
    ffa2:	3c01      	subs	r4, #1
    ffa4:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
    ffa6:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
    ffa8:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
    ffac:	2cff      	cmp	r4, #255	; 0xff
    ffae:	d102      	bne.n	ffb6 <ll_chm_update+0x3a>
	return 0;
    ffb0:	2000      	movs	r0, #0
    ffb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
    ffb6:	4620      	mov	r0, r4
    ffb8:	f7f9 fc42 	bl	9840 <connection_get>
		if (!conn || conn->role) {
    ffbc:	4606      	mov	r6, r0
    ffbe:	b1b8      	cbz	r0, fff0 <ll_chm_update+0x74>
    ffc0:	f990 301d 	ldrsb.w	r3, [r0, #29]
    ffc4:	2b00      	cmp	r3, #0
    ffc6:	db13      	blt.n	fff0 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
    ffc8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    ffcc:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    ffd0:	429a      	cmp	r2, r3
    ffd2:	d110      	bne.n	fff6 <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
    ffd4:	2205      	movs	r2, #5
    ffd6:	4629      	mov	r1, r5
    ffd8:	3079      	adds	r0, #121	; 0x79
    ffda:	f7f1 fe0f 	bl	1bfc <memcpy>
		conn->llcp_req++;
    ffde:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
    ffe2:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
    ffe6:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
    ffe8:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
    ffec:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
    fff0:	3c01      	subs	r4, #1
    fff2:	b2e4      	uxtb	r4, r4
    fff4:	e7da      	b.n	ffac <ll_chm_update+0x30>
			return 1;
    fff6:	2001      	movs	r0, #1
}
    fff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fffc:	200008c0 	.word	0x200008c0

00010000 <ll_chm_get>:
{
   10000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10002:	460d      	mov	r5, r1
	conn = connection_get(handle);
   10004:	f7f9 fc1c 	bl	9840 <connection_get>
	if (!conn) {
   10008:	4604      	mov	r4, r0
   1000a:	b160      	cbz	r0, 10026 <ll_chm_get+0x26>
		conn->chm_update = 0;
   1000c:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   1000e:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   10012:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   10014:	2205      	movs	r2, #5
   10016:	4631      	mov	r1, r6
   10018:	4628      	mov	r0, r5
   1001a:	f7f1 fdef 	bl	1bfc <memcpy>
	} while (conn->chm_update);
   1001e:	7f20      	ldrb	r0, [r4, #28]
   10020:	2800      	cmp	r0, #0
   10022:	d1f6      	bne.n	10012 <ll_chm_get+0x12>
   10024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   10026:	2001      	movs	r0, #1
}
   10028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001002a <ll_feature_req_send>:
{
   1002a:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   1002c:	f7f9 fc08 	bl	9840 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10030:	b168      	cbz	r0, 1004e <ll_feature_req_send+0x24>
   10032:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10036:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1003a:	4293      	cmp	r3, r2
   1003c:	d107      	bne.n	1004e <ll_feature_req_send+0x24>
	conn->llcp_req++;
   1003e:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   10040:	2204      	movs	r2, #4
	conn->llcp_req++;
   10042:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   10046:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   1004a:	2000      	movs	r0, #0
   1004c:	bd08      	pop	{r3, pc}
		return 1;
   1004e:	2001      	movs	r0, #1
}
   10050:	bd08      	pop	{r3, pc}

00010052 <ll_version_ind_send>:
{
   10052:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   10054:	f7f9 fbf4 	bl	9840 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10058:	b168      	cbz	r0, 10076 <ll_version_ind_send+0x24>
   1005a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1005e:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10062:	4293      	cmp	r3, r2
   10064:	d107      	bne.n	10076 <ll_version_ind_send+0x24>
	conn->llcp_req++;
   10066:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   10068:	2205      	movs	r2, #5
	conn->llcp_req++;
   1006a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   1006e:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   10072:	2000      	movs	r0, #0
   10074:	bd08      	pop	{r3, pc}
		return 1;
   10076:	2001      	movs	r0, #1
}
   10078:	bd08      	pop	{r3, pc}

0001007a <ll_terminate_ind_send>:
{
   1007a:	b510      	push	{r4, lr}
   1007c:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1007e:	f7f9 fbdf 	bl	9840 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   10082:	b160      	cbz	r0, 1009e <ll_terminate_ind_send+0x24>
   10084:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   10088:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   1008c:	4293      	cmp	r3, r2
   1008e:	d106      	bne.n	1009e <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   10090:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   10092:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   10096:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   1009a:	2000      	movs	r0, #0
   1009c:	bd10      	pop	{r4, pc}
		return 1;
   1009e:	2001      	movs	r0, #1
}
   100a0:	bd10      	pop	{r4, pc}

000100a2 <ll_tx_pwr_lvl_get>:
{
   100a2:	b510      	push	{r4, lr}
   100a4:	4614      	mov	r4, r2
	conn = connection_get(handle);
   100a6:	f7f9 fbcb 	bl	9840 <connection_get>
	if (!conn) {
   100aa:	b110      	cbz	r0, 100b2 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   100ac:	2000      	movs	r0, #0
   100ae:	7020      	strb	r0, [r4, #0]
	return 0;
   100b0:	bd10      	pop	{r4, pc}
		return 1;
   100b2:	2001      	movs	r0, #1
}
   100b4:	bd10      	pop	{r4, pc}

000100b6 <ll_apto_get>:
{
   100b6:	b510      	push	{r4, lr}
   100b8:	460c      	mov	r4, r1
	conn = connection_get(handle);
   100ba:	f7f9 fbc1 	bl	9840 <connection_get>
	if (!conn) {
   100be:	b160      	cbz	r0, 100da <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   100c0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   100c2:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   100c6:	435a      	muls	r2, r3
   100c8:	237d      	movs	r3, #125	; 0x7d
   100ca:	4353      	muls	r3, r2
	return 0;
   100cc:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   100ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   100d2:	fb93 f3f2 	sdiv	r3, r3, r2
   100d6:	8023      	strh	r3, [r4, #0]
	return 0;
   100d8:	bd10      	pop	{r4, pc}
		return 1;
   100da:	2001      	movs	r0, #1
}
   100dc:	bd10      	pop	{r4, pc}

000100de <ll_apto_set>:
{
   100de:	b510      	push	{r4, lr}
   100e0:	460c      	mov	r4, r1
	conn = connection_get(handle);
   100e2:	f7f9 fbad 	bl	9840 <connection_get>
	if (!conn) {
   100e6:	b170      	cbz	r0, 10106 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   100e8:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   100ea:	f240 43e2 	movw	r3, #1250	; 0x4e2
   100ee:	4353      	muls	r3, r2
   100f0:	f242 7110 	movw	r1, #10000	; 0x2710
   100f4:	fb01 3404 	mla	r4, r1, r4, r3
   100f8:	3c01      	subs	r4, #1
   100fa:	fb94 f4f3 	sdiv	r4, r4, r3
   100fe:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   10102:	2000      	movs	r0, #0
   10104:	bd10      	pop	{r4, pc}
		return 1;
   10106:	2001      	movs	r0, #1
}
   10108:	bd10      	pop	{r4, pc}

0001010a <ll_length_req_send>:
{
   1010a:	b570      	push	{r4, r5, r6, lr}
   1010c:	460e      	mov	r6, r1
   1010e:	4615      	mov	r5, r2
	conn = connection_get(handle);
   10110:	f7f9 fb96 	bl	9840 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10114:	b1d0      	cbz	r0, 1014c <ll_length_req_send+0x42>
   10116:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1011a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1011e:	429a      	cmp	r2, r3
   10120:	d114      	bne.n	1014c <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   10122:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10126:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1012a:	4293      	cmp	r3, r2
   1012c:	d10e      	bne.n	1014c <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1012e:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   10132:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   10136:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10138:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   1013c:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10140:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   10144:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   10148:	2000      	movs	r0, #0
   1014a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   1014c:	2001      	movs	r0, #1
}
   1014e:	bd70      	pop	{r4, r5, r6, pc}

00010150 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   10150:	4b03      	ldr	r3, [pc, #12]	; (10160 <ll_length_default_get+0x10>)
   10152:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   10156:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   10158:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   1015c:	800b      	strh	r3, [r1, #0]
   1015e:	4770      	bx	lr
   10160:	200008c0 	.word	0x200008c0

00010164 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   10164:	4b03      	ldr	r3, [pc, #12]	; (10174 <ll_length_default_set+0x10>)
   10166:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   1016a:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   1016e:	2000      	movs	r0, #0
   10170:	4770      	bx	lr
   10172:	bf00      	nop
   10174:	200008c0 	.word	0x200008c0

00010178 <ll_length_max_get>:
{
   10178:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   1017a:	241b      	movs	r4, #27
   1017c:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1017e:	f44f 70a4 	mov.w	r0, #328	; 0x148
   10182:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10184:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   10186:	8018      	strh	r0, [r3, #0]
   10188:	bd10      	pop	{r4, pc}

0001018a <ll_phy_get>:
{
   1018a:	b538      	push	{r3, r4, r5, lr}
   1018c:	460d      	mov	r5, r1
   1018e:	4614      	mov	r4, r2
	conn = connection_get(handle);
   10190:	f7f9 fb56 	bl	9840 <connection_get>
	if (!conn) {
   10194:	b158      	cbz	r0, 101ae <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   10196:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1019a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1019e:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   101a0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   101a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   101a8:	7023      	strb	r3, [r4, #0]
	return 0;
   101aa:	2000      	movs	r0, #0
   101ac:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   101ae:	2001      	movs	r0, #1
}
   101b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000101b4 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   101b4:	4b03      	ldr	r3, [pc, #12]	; (101c4 <ll_phy_default_set+0x10>)
   101b6:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   101ba:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   101be:	2000      	movs	r0, #0
   101c0:	4770      	bx	lr
   101c2:	bf00      	nop
   101c4:	200008c0 	.word	0x200008c0

000101c8 <ll_phy_req_send>:
{
   101c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   101cc:	4689      	mov	r9, r1
   101ce:	4690      	mov	r8, r2
   101d0:	461f      	mov	r7, r3
	conn = connection_get(handle);
   101d2:	f7f9 fb35 	bl	9840 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   101d6:	b320      	cbz	r0, 10222 <ll_phy_req_send+0x5a>
   101d8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   101dc:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   101e0:	429a      	cmp	r2, r3
   101e2:	d11e      	bne.n	10222 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   101e4:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   101e8:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   101ec:	429d      	cmp	r5, r3
   101ee:	d118      	bne.n	10222 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   101f0:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   101f4:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   101f8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   101fc:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   10200:	f046 0102 	orr.w	r1, r6, #2
   10204:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   10208:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   1020a:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   1020c:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   10210:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   10214:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   10218:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   1021c:	2000      	movs	r0, #0
   1021e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   10222:	2001      	movs	r0, #1
}
   10224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010228 <ll_rx_get>:
{
   10228:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1022c:	4605      	mov	r5, r0
   1022e:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   10230:	4918      	ldr	r1, [pc, #96]	; (10294 <ll_rx_get+0x6c>)
   10232:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   10236:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   1023a:	4293      	cmp	r3, r2
   1023c:	460f      	mov	r7, r1
   1023e:	d01f      	beq.n	10280 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   10240:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   10244:	f201 1177 	addw	r1, r1, #375	; 0x177
   10248:	f898 2000 	ldrb.w	r2, [r8]
   1024c:	f7f9 faae 	bl	97ac <tx_cmplt_get>
		if (!cmplt) {
   10250:	4604      	mov	r4, r0
   10252:	b9e0      	cbnz	r0, 1028e <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   10254:	ae02      	add	r6, sp, #8
   10256:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   1025a:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   1025e:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   10262:	4631      	mov	r1, r6
   10264:	f10d 0006 	add.w	r0, sp, #6
   10268:	f7f9 faa0 	bl	97ac <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   1026c:	b934      	cbnz	r4, 1027c <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   1026e:	b928      	cbnz	r0, 1027c <ll_rx_get+0x54>
			*node_rx = _node_rx;
   10270:	f8c5 8000 	str.w	r8, [r5]
}
   10274:	4620      	mov	r0, r4
   10276:	b002      	add	sp, #8
   10278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1027c:	4604      	mov	r4, r0
   1027e:	e7ee      	b.n	1025e <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   10280:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   10284:	f201 1177 	addw	r1, r1, #375	; 0x177
   10288:	f7f9 fa90 	bl	97ac <tx_cmplt_get>
   1028c:	4604      	mov	r4, r0
		*node_rx = NULL;
   1028e:	2300      	movs	r3, #0
   10290:	602b      	str	r3, [r5, #0]
   10292:	e7ef      	b.n	10274 <ll_rx_get+0x4c>
   10294:	200008c0 	.word	0x200008c0

00010298 <ll_rx_mem_release>:
{
   10298:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   1029c:	4c1c      	ldr	r4, [pc, #112]	; (10310 <ll_rx_mem_release+0x78>)
{
   1029e:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   102a0:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   102a2:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   102a6:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   102aa:	b930      	cbnz	r0, 102ba <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   102ac:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   102ae:	20ff      	movs	r0, #255	; 0xff
}
   102b0:	b002      	add	sp, #8
   102b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   102b6:	f7f9 b9a3 	b.w	9600 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   102ba:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   102bc:	f8d0 8000 	ldr.w	r8, [r0]
   102c0:	2a0c      	cmp	r2, #12
   102c2:	d807      	bhi.n	102d4 <ll_rx_mem_release+0x3c>
   102c4:	2301      	movs	r3, #1
   102c6:	4093      	lsls	r3, r2
   102c8:	f641 727e 	movw	r2, #8062	; 0x1f7e
   102cc:	4213      	tst	r3, r2
   102ce:	d110      	bne.n	102f2 <ll_rx_mem_release+0x5a>
   102d0:	061b      	lsls	r3, r3, #24
   102d2:	d413      	bmi.n	102fc <ll_rx_mem_release+0x64>
			LL_ASSERT(0);
   102d4:	4b0f      	ldr	r3, [pc, #60]	; (10314 <ll_rx_mem_release+0x7c>)
   102d6:	9301      	str	r3, [sp, #4]
   102d8:	9300      	str	r3, [sp, #0]
   102da:	4a0f      	ldr	r2, [pc, #60]	; (10318 <ll_rx_mem_release+0x80>)
   102dc:	4b0f      	ldr	r3, [pc, #60]	; (1031c <ll_rx_mem_release+0x84>)
   102de:	4910      	ldr	r1, [pc, #64]	; (10320 <ll_rx_mem_release+0x88>)
   102e0:	4810      	ldr	r0, [pc, #64]	; (10324 <ll_rx_mem_release+0x8c>)
   102e2:	f7f0 fe53 	bl	f8c <printk>
   102e6:	4040      	eors	r0, r0
   102e8:	f380 8811 	msr	BASEPRI, r0
   102ec:	f04f 0004 	mov.w	r0, #4
   102f0:	df02      	svc	2
			mem_release(_node_rx_free,
   102f2:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   102f4:	f7f6 fb11 	bl	691a <mem_release>
{
   102f8:	4640      	mov	r0, r8
   102fa:	e7d6      	b.n	102aa <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   102fc:	88c2      	ldrh	r2, [r0, #6]
   102fe:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   10302:	f44f 71aa 	mov.w	r1, #340	; 0x154
   10306:	f7f6 fb23 	bl	6950 <mem_get>
			mem_release(conn, &_radio.conn_free);
   1030a:	4639      	mov	r1, r7
   1030c:	e7f2      	b.n	102f4 <ll_rx_mem_release+0x5c>
   1030e:	bf00      	nop
   10310:	200009f0 	.word	0x200009f0
   10314:	000142a9 	.word	0x000142a9
   10318:	00014ff8 	.word	0x00014ff8
   1031c:	00016507 	.word	0x00016507
   10320:	00015047 	.word	0x00015047
   10324:	00014f97 	.word	0x00014f97

00010328 <do_radio_rx_fc_set>:
	if (req == ack) {
   10328:	4291      	cmp	r1, r2
{
   1032a:	b510      	push	{r4, lr}
   1032c:	4b14      	ldr	r3, [pc, #80]	; (10380 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   1032e:	d119      	bne.n	10364 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   10330:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   10334:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   10338:	4294      	cmp	r4, r2
   1033a:	d111      	bne.n	10360 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   1033c:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   1033e:	bf14      	ite	ne
   10340:	460a      	movne	r2, r1
   10342:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   10344:	3a01      	subs	r2, #1
   10346:	b2d2      	uxtb	r2, r2
   10348:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   1034c:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   10350:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   10354:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   10358:	4291      	cmp	r1, r2
   1035a:	d00f      	beq.n	1037c <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   1035c:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   10360:	2001      	movs	r0, #1
   10362:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   10364:	b929      	cbnz	r1, 10372 <do_radio_rx_fc_set+0x4a>
   10366:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   1036a:	1a18      	subs	r0, r3, r0
   1036c:	bf18      	it	ne
   1036e:	2001      	movne	r0, #1
   10370:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   10372:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   10376:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   1037a:	e7f6      	b.n	1036a <do_radio_rx_fc_set+0x42>
	return 0;
   1037c:	2000      	movs	r0, #0
}
   1037e:	bd10      	pop	{r4, pc}
   10380:	200008c0 	.word	0x200008c0

00010384 <radio_rx_fc_set>:
{
   10384:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   10386:	4b14      	ldr	r3, [pc, #80]	; (103d8 <radio_rx_fc_set+0x54>)
   10388:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   1038c:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   1038e:	b302      	cbz	r2, 103d2 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   10390:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   10394:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   10396:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   1039a:	b135      	cbz	r5, 103aa <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   1039c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   103a0:	4298      	cmp	r0, r3
   103a2:	d016      	beq.n	103d2 <radio_rx_fc_set+0x4e>
}
   103a4:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   103a6:	f7ff bfbf 	b.w	10328 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   103aa:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   103ae:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   103b2:	42a0      	cmp	r0, r4
   103b4:	d10d      	bne.n	103d2 <radio_rx_fc_set+0x4e>
   103b6:	4291      	cmp	r1, r2
   103b8:	d00b      	beq.n	103d2 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   103ba:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   103be:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   103c2:	42a0      	cmp	r0, r4
   103c4:	d005      	beq.n	103d2 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   103c6:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   103ca:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   103cc:	bf08      	it	eq
   103ce:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   103d2:	2000      	movs	r0, #0
   103d4:	bc30      	pop	{r4, r5}
   103d6:	4770      	bx	lr
   103d8:	200008c0 	.word	0x200008c0

000103dc <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   103dc:	4801      	ldr	r0, [pc, #4]	; (103e4 <ll_tx_mem_acquire+0x8>)
   103de:	f7f6 ba82 	b.w	68e6 <mem_acquire>
   103e2:	bf00      	nop
   103e4:	20000a24 	.word	0x20000a24

000103e8 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   103e8:	4901      	ldr	r1, [pc, #4]	; (103f0 <ll_tx_mem_release+0x8>)
   103ea:	f7f6 ba96 	b.w	691a <mem_release>
   103ee:	bf00      	nop
   103f0:	20000a24 	.word	0x20000a24

000103f4 <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   103f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   103f6:	4d33      	ldr	r5, [pc, #204]	; (104c4 <ll_tx_mem_enqueue+0xd0>)
   103f8:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   103fc:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   10400:	3401      	adds	r4, #1
{
   10402:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   10404:	b2e4      	uxtb	r4, r4
{
   10406:	4607      	mov	r7, r0
   10408:	460e      	mov	r6, r1
		last = 0;
   1040a:	42a3      	cmp	r3, r4
   1040c:	bf08      	it	eq
   1040e:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   10410:	f7f9 fa16 	bl	9840 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   10414:	2800      	cmp	r0, #0
   10416:	d052      	beq.n	104be <ll_tx_mem_enqueue+0xca>
   10418:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   1041c:	429c      	cmp	r4, r3
   1041e:	d04e      	beq.n	104be <ll_tx_mem_enqueue+0xca>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   10420:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   10424:	7972      	ldrb	r2, [r6, #5]
   10426:	3b07      	subs	r3, #7
   10428:	429a      	cmp	r2, r3
   1042a:	d90e      	bls.n	1044a <ll_tx_mem_enqueue+0x56>
   1042c:	4b26      	ldr	r3, [pc, #152]	; (104c8 <ll_tx_mem_enqueue+0xd4>)
   1042e:	9301      	str	r3, [sp, #4]
   10430:	9300      	str	r3, [sp, #0]
   10432:	4a26      	ldr	r2, [pc, #152]	; (104cc <ll_tx_mem_enqueue+0xd8>)
   10434:	4b26      	ldr	r3, [pc, #152]	; (104d0 <ll_tx_mem_enqueue+0xdc>)
   10436:	4927      	ldr	r1, [pc, #156]	; (104d4 <ll_tx_mem_enqueue+0xe0>)
   10438:	4827      	ldr	r0, [pc, #156]	; (104d8 <ll_tx_mem_enqueue+0xe4>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1043a:	f7f0 fda7 	bl	f8c <printk>
   1043e:	4040      	eors	r0, r0
   10440:	f380 8811 	msr	BASEPRI, r0
   10444:	f04f 0004 	mov.w	r0, #4
   10448:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   1044a:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   1044e:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   10452:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   10456:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   1045a:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   1045c:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   10460:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10464:	2b00      	cmp	r3, #0
   10466:	db02      	blt.n	1046e <ll_tx_mem_enqueue+0x7a>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   10468:	2000      	movs	r0, #0
}
   1046a:	b009      	add	sp, #36	; 0x24
   1046c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   1046e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   10470:	2b00      	cmp	r3, #0
   10472:	d0f9      	beq.n	10468 <ll_tx_mem_enqueue+0x74>
   10474:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   10478:	f012 0302 	ands.w	r3, r2, #2
   1047c:	d1f4      	bne.n	10468 <ll_tx_mem_enqueue+0x74>
		conn->slave.latency_cancel = 1;
   1047e:	f042 0202 	orr.w	r2, r2, #2
   10482:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   10486:	f890 2020 	ldrb.w	r2, [r0, #32]
   1048a:	4914      	ldr	r1, [pc, #80]	; (104dc <ll_tx_mem_enqueue+0xe8>)
   1048c:	9105      	str	r1, [sp, #20]
   1048e:	3207      	adds	r2, #7
   10490:	2101      	movs	r1, #1
   10492:	9006      	str	r0, [sp, #24]
   10494:	9304      	str	r3, [sp, #16]
   10496:	9103      	str	r1, [sp, #12]
   10498:	9302      	str	r3, [sp, #8]
   1049a:	9301      	str	r3, [sp, #4]
   1049c:	9300      	str	r3, [sp, #0]
   1049e:	4618      	mov	r0, r3
   104a0:	b2d2      	uxtb	r2, r2
   104a2:	2103      	movs	r1, #3
   104a4:	f7f7 f8f8 	bl	7698 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   104a8:	f030 0302 	bics.w	r3, r0, #2
   104ac:	d0dc      	beq.n	10468 <ll_tx_mem_enqueue+0x74>
   104ae:	4b06      	ldr	r3, [pc, #24]	; (104c8 <ll_tx_mem_enqueue+0xd4>)
   104b0:	9301      	str	r3, [sp, #4]
   104b2:	9300      	str	r3, [sp, #0]
   104b4:	4a05      	ldr	r2, [pc, #20]	; (104cc <ll_tx_mem_enqueue+0xd8>)
   104b6:	4b06      	ldr	r3, [pc, #24]	; (104d0 <ll_tx_mem_enqueue+0xdc>)
   104b8:	4906      	ldr	r1, [pc, #24]	; (104d4 <ll_tx_mem_enqueue+0xe0>)
   104ba:	4809      	ldr	r0, [pc, #36]	; (104e0 <ll_tx_mem_enqueue+0xec>)
   104bc:	e7bd      	b.n	1043a <ll_tx_mem_enqueue+0x46>
		return 1;
   104be:	2001      	movs	r0, #1
   104c0:	e7d3      	b.n	1046a <ll_tx_mem_enqueue+0x76>
   104c2:	bf00      	nop
   104c4:	200008c0 	.word	0x200008c0
   104c8:	000142a9 	.word	0x000142a9
   104cc:	00014ff8 	.word	0x00014ff8
   104d0:	00016535 	.word	0x00016535
   104d4:	00015047 	.word	0x00015047
   104d8:	00016b1b 	.word	0x00016b1b
   104dc:	0000a59d 	.word	0x0000a59d
   104e0:	0001656d 	.word	0x0001656d

000104e4 <ll_enc_req_send>:
{
   104e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   104e8:	4607      	mov	r7, r0
   104ea:	4688      	mov	r8, r1
   104ec:	4616      	mov	r6, r2
   104ee:	4699      	mov	r9, r3
	conn = connection_get(handle);
   104f0:	f7f9 f9a6 	bl	9840 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   104f4:	4605      	mov	r5, r0
   104f6:	b910      	cbnz	r0, 104fe <ll_enc_req_send+0x1a>
			return 1;
   104f8:	2001      	movs	r0, #1
   104fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   104fe:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10502:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10506:	429a      	cmp	r2, r3
   10508:	d1f6      	bne.n	104f8 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   1050a:	f7ff ff67 	bl	103dc <ll_tx_mem_acquire>
	if (node_tx) {
   1050e:	4604      	mov	r4, r0
   10510:	2800      	cmp	r0, #0
   10512:	d0f1      	beq.n	104f8 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   10514:	2210      	movs	r2, #16
   10516:	4649      	mov	r1, r9
   10518:	f105 0084 	add.w	r0, r5, #132	; 0x84
   1051c:	f7f1 fb6e 	bl	1bfc <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   10520:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   10524:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   10528:	d124      	bne.n	10574 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1052a:	7923      	ldrb	r3, [r4, #4]
   1052c:	f043 0303 	orr.w	r3, r3, #3
   10530:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   10532:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   10534:	2208      	movs	r2, #8
			pdu_data_tx->len =
   10536:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   10538:	2303      	movs	r3, #3
   1053a:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   1053c:	4641      	mov	r1, r8
   1053e:	18a0      	adds	r0, r4, r2
   10540:	f7f1 fb5c 	bl	1bfc <memcpy>
			enc_req->ediv[0] = ediv[0];
   10544:	7833      	ldrb	r3, [r6, #0]
   10546:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   10548:	7873      	ldrb	r3, [r6, #1]
   1054a:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   1054c:	2108      	movs	r1, #8
   1054e:	f104 0012 	add.w	r0, r4, #18
   10552:	f7f7 f9ff 	bl	7954 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   10556:	2104      	movs	r1, #4
   10558:	f104 001a 	add.w	r0, r4, #26
   1055c:	f7f7 f9fa 	bl	7954 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   10560:	4621      	mov	r1, r4
   10562:	4638      	mov	r0, r7
   10564:	f7ff ff46 	bl	103f4 <ll_tx_mem_enqueue>
   10568:	2601      	movs	r6, #1
   1056a:	b1d0      	cbz	r0, 105a2 <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   1056c:	4620      	mov	r0, r4
   1056e:	f7ff ff3b 	bl	103e8 <ll_tx_mem_release>
   10572:	e7c1      	b.n	104f8 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   10574:	2b30      	cmp	r3, #48	; 0x30
   10576:	d1f9      	bne.n	1056c <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   10578:	2208      	movs	r2, #8
   1057a:	4641      	mov	r1, r8
   1057c:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   10580:	f7f1 fb3c 	bl	1bfc <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   10584:	7833      	ldrb	r3, [r6, #0]
   10586:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   1058a:	7873      	ldrb	r3, [r6, #1]
   1058c:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   10590:	7923      	ldrb	r3, [r4, #4]
   10592:	f043 0303 	orr.w	r3, r3, #3
   10596:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   10598:	2301      	movs	r3, #1
   1059a:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   1059c:	230a      	movs	r3, #10
   1059e:	71e3      	strb	r3, [r4, #7]
   105a0:	e7de      	b.n	10560 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   105a2:	2303      	movs	r3, #3
   105a4:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   105a8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   105ac:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   105b0:	3301      	adds	r3, #1
   105b2:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   105b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   105ba:	0000      	movs	r0, r0
   105bc:	0000      	movs	r0, r0
	...

000105c0 <radio_scan_enable>:
{
   105c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   105c4:	4c68      	ldr	r4, [pc, #416]	; (10768 <radio_scan_enable+0x1a8>)
   105c6:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   105ca:	b08e      	sub	sp, #56	; 0x38
   105cc:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   105ce:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   105d2:	f04f 0302 	mov.w	r3, #2
{
   105d6:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   105d8:	930b      	str	r3, [sp, #44]	; 0x2c
{
   105da:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   105dc:	d003      	beq.n	105e6 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   105de:	200c      	movs	r0, #12
}
   105e0:	b00e      	add	sp, #56	; 0x38
   105e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   105e6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   105ea:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   105ee:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   105f2:	0840      	lsrs	r0, r0, #1
   105f4:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   105f8:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   105fc:	f360 0200 	bfi	r2, r0, #0, #1
   10600:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   10604:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   10608:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   1060c:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   10610:	2206      	movs	r2, #6
   10612:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   10616:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   1061a:	4e54      	ldr	r6, [pc, #336]	; (1076c <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   1061c:	f7f1 faee 	bl	1bfc <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10620:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   10624:	f04f 0991 	mov.w	r9, #145	; 0x91
   10628:	fba2 0106 	umull	r0, r1, r2, r6
   1062c:	fb09 1102 	mla	r1, r9, r2, r1
   10630:	a34b      	add	r3, pc, #300	; (adr r3, 10760 <radio_scan_enable+0x1a0>)
   10632:	e9d3 2300 	ldrd	r2, r3, [r3]
   10636:	f7ef fded 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   1063a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1063e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   10642:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10646:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   1064a:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   1064e:	b2ba      	uxth	r2, r7
   10650:	fba2 6706 	umull	r6, r7, r2, r6
   10654:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   10658:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   1065c:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   1065e:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   10662:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   10666:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   1066a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   1066e:	a33c      	add	r3, pc, #240	; (adr r3, 10760 <radio_scan_enable+0x1a0>)
   10670:	e9d3 2300 	ldrd	r2, r3, [r3]
   10674:	4630      	mov	r0, r6
   10676:	4639      	mov	r1, r7
   10678:	f7ef fdcc 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   1067c:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   10680:	459a      	cmp	sl, r3
   10682:	bf94      	ite	ls
   10684:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   10688:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   1068c:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10690:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   10692:	bf38      	it	cc
   10694:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   10698:	f7f7 f91c 	bl	78d4 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   1069c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   106a0:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   106a2:	2b00      	cmp	r3, #0
   106a4:	d045      	beq.n	10732 <radio_scan_enable+0x172>
		us_offset = 0;
   106a6:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   106a8:	980c      	ldr	r0, [sp, #48]	; 0x30
   106aa:	4931      	ldr	r1, [pc, #196]	; (10770 <radio_scan_enable+0x1b0>)
   106ac:	a32c      	add	r3, pc, #176	; (adr r3, 10760 <radio_scan_enable+0x1a0>)
   106ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   106b2:	fba0 0101 	umull	r0, r1, r0, r1
   106b6:	f7ef fdad 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   106ba:	ab0b      	add	r3, sp, #44	; 0x2c
   106bc:	9308      	str	r3, [sp, #32]
   106be:	4b2d      	ldr	r3, [pc, #180]	; (10774 <radio_scan_enable+0x1b4>)
   106c0:	9307      	str	r3, [sp, #28]
   106c2:	4b2d      	ldr	r3, [pc, #180]	; (10778 <radio_scan_enable+0x1b8>)
   106c4:	9305      	str	r3, [sp, #20]
   106c6:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   106ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   106ce:	4443      	add	r3, r8
   106d0:	2500      	movs	r5, #0
   106d2:	4482      	add	sl, r0
   106d4:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   106d6:	4630      	mov	r0, r6
   106d8:	a321      	add	r3, pc, #132	; (adr r3, 10760 <radio_scan_enable+0x1a0>)
   106da:	e9d3 2300 	ldrd	r2, r3, [r3]
   106de:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   106e0:	9506      	str	r5, [sp, #24]
   106e2:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   106e4:	f7ef fd96 	bl	214 <__aeabi_uldivmod>
   106e8:	4610      	mov	r0, r2
   106ea:	4619      	mov	r1, r3
   106ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   106f0:	2300      	movs	r3, #0
   106f2:	f7ef fd8f 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   106f6:	e88d 0220 	stmia.w	sp, {r5, r9}
   106fa:	9002      	str	r0, [sp, #8]
   106fc:	4653      	mov	r3, sl
   106fe:	2206      	movs	r2, #6
   10700:	2103      	movs	r1, #3
   10702:	4628      	mov	r0, r5
   10704:	f7f6 ff78 	bl	75f8 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   10708:	2802      	cmp	r0, #2
   1070a:	d023      	beq.n	10754 <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   1070c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1070e:	2d00      	cmp	r5, #0
   10710:	f47f af65 	bne.w	105de <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   10714:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   10718:	f043 0301 	orr.w	r3, r3, #1
   1071c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   10720:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   10724:	2b00      	cmp	r3, #0
   10726:	db02      	blt.n	1072e <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   10728:	2002      	movs	r0, #2
   1072a:	f000 fea3 	bl	11474 <ll_adv_scan_state_cb>
	return 0;
   1072e:	4628      	mov	r0, r5
   10730:	e756      	b.n	105e0 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   10732:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   10736:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   10738:	aa0d      	add	r2, sp, #52	; 0x34
   1073a:	ab0c      	add	r3, sp, #48	; 0x30
   1073c:	4441      	add	r1, r8
   1073e:	2003      	movs	r0, #3
   10740:	f7f9 fc86 	bl	a050 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   10744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10746:	2b00      	cmp	r3, #0
   10748:	d0ae      	beq.n	106a8 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   1074a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   1074e:	e7ab      	b.n	106a8 <radio_scan_enable+0xe8>
			cpu_sleep();
   10750:	f7f8 fe7c 	bl	944c <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   10754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10756:	2b02      	cmp	r3, #2
   10758:	d0fa      	beq.n	10750 <radio_scan_enable+0x190>
   1075a:	e7d7      	b.n	1070c <radio_scan_enable+0x14c>
   1075c:	f3af 8000 	nop.w
   10760:	1afd498d 	.word	0x1afd498d
   10764:	00000007 	.word	0x00000007
   10768:	200008c0 	.word	0x200008c0
   1076c:	84e72a00 	.word	0x84e72a00
   10770:	3b9aca00 	.word	0x3b9aca00
   10774:	00009491 	.word	0x00009491
   10778:	0000b3bd 	.word	0x0000b3bd

0001077c <radio_scan_disable>:
{
   1077c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   1077e:	2104      	movs	r1, #4
   10780:	2006      	movs	r0, #6
   10782:	f7f9 f873 	bl	986c <role_disable>
	if (!status) {
   10786:	4605      	mov	r5, r0
   10788:	b9e8      	cbnz	r0, 107c6 <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   1078a:	4c10      	ldr	r4, [pc, #64]	; (107cc <radio_scan_disable+0x50>)
   1078c:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   10790:	f360 0200 	bfi	r2, r0, #0, #1
   10794:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   10798:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   1079c:	2a00      	cmp	r2, #0
   1079e:	db01      	blt.n	107a4 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   107a0:	f000 fe68 	bl	11474 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   107a4:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   107a8:	b15e      	cbz	r6, 107c2 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   107aa:	2300      	movs	r3, #0
   107ac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   107b0:	4907      	ldr	r1, [pc, #28]	; (107d0 <radio_scan_disable+0x54>)
   107b2:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   107b6:	f7f6 f8b0 	bl	691a <mem_release>
			mem_release(conn, &_radio.conn_free);
   107ba:	4906      	ldr	r1, [pc, #24]	; (107d4 <radio_scan_disable+0x58>)
   107bc:	4630      	mov	r0, r6
   107be:	f7f6 f8ac 	bl	691a <mem_release>
}
   107c2:	4628      	mov	r0, r5
   107c4:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   107c6:	250c      	movs	r5, #12
   107c8:	e7fb      	b.n	107c2 <radio_scan_disable+0x46>
   107ca:	bf00      	nop
   107cc:	200008c0 	.word	0x200008c0
   107d0:	20000a08 	.word	0x20000a08
   107d4:	200009cc 	.word	0x200009cc

000107d8 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   107d8:	4b03      	ldr	r3, [pc, #12]	; (107e8 <ll_connect_disable+0x10>)
   107da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   107de:	b10b      	cbz	r3, 107e4 <ll_connect_disable+0xc>
	status = radio_scan_disable();
   107e0:	f7ff bfcc 	b.w	1077c <radio_scan_disable>
}
   107e4:	200c      	movs	r0, #12
   107e6:	4770      	bx	lr
   107e8:	200008c0 	.word	0x200008c0

000107ec <ll_rx_dequeue>:
{
   107ec:	b530      	push	{r4, r5, lr}
   107ee:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   107f0:	4d47      	ldr	r5, [pc, #284]	; (10910 <ll_rx_dequeue+0x124>)
	struct radio_pdu_node_rx *node_rx = NULL;
   107f2:	aa04      	add	r2, sp, #16
   107f4:	2300      	movs	r3, #0
   107f6:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   107fa:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   107fe:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   10802:	f7f6 f8d9 	bl	69b8 <memq_dequeue>
   10806:	462c      	mov	r4, r5
	LL_ASSERT(link);
   10808:	b970      	cbnz	r0, 10828 <ll_rx_dequeue+0x3c>
   1080a:	4b42      	ldr	r3, [pc, #264]	; (10914 <ll_rx_dequeue+0x128>)
   1080c:	9301      	str	r3, [sp, #4]
   1080e:	9300      	str	r3, [sp, #0]
   10810:	4a41      	ldr	r2, [pc, #260]	; (10918 <ll_rx_dequeue+0x12c>)
   10812:	4b42      	ldr	r3, [pc, #264]	; (1091c <ll_rx_dequeue+0x130>)
   10814:	4942      	ldr	r1, [pc, #264]	; (10920 <ll_rx_dequeue+0x134>)
   10816:	4843      	ldr	r0, [pc, #268]	; (10924 <ll_rx_dequeue+0x138>)
		LL_ASSERT(_radio.link_rx_data_quota <
   10818:	f7f0 fbb8 	bl	f8c <printk>
   1081c:	4040      	eors	r0, r0
   1081e:	f380 8811 	msr	BASEPRI, r0
   10822:	f04f 0004 	mov.w	r0, #4
   10826:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   10828:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   1082c:	f7f6 f875 	bl	691a <mem_release>
	switch (node_rx->hdr.type) {
   10830:	9a03      	ldr	r2, [sp, #12]
   10832:	7911      	ldrb	r1, [r2, #4]
   10834:	290c      	cmp	r1, #12
   10836:	d807      	bhi.n	10848 <ll_rx_dequeue+0x5c>
   10838:	2301      	movs	r3, #1
   1083a:	408b      	lsls	r3, r1
   1083c:	f641 707e 	movw	r0, #8062	; 0x1f7e
   10840:	4203      	tst	r3, r0
   10842:	d109      	bne.n	10858 <ll_rx_dequeue+0x6c>
   10844:	0618      	lsls	r0, r3, #24
   10846:	d419      	bmi.n	1087c <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
   10848:	4b32      	ldr	r3, [pc, #200]	; (10914 <ll_rx_dequeue+0x128>)
   1084a:	9301      	str	r3, [sp, #4]
   1084c:	9300      	str	r3, [sp, #0]
   1084e:	4a32      	ldr	r2, [pc, #200]	; (10918 <ll_rx_dequeue+0x12c>)
   10850:	4b32      	ldr	r3, [pc, #200]	; (1091c <ll_rx_dequeue+0x130>)
   10852:	4933      	ldr	r1, [pc, #204]	; (10920 <ll_rx_dequeue+0x134>)
   10854:	4834      	ldr	r0, [pc, #208]	; (10928 <ll_rx_dequeue+0x13c>)
   10856:	e7df      	b.n	10818 <ll_rx_dequeue+0x2c>
		LL_ASSERT(_radio.link_rx_data_quota <
   10858:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   1085c:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   10860:	3801      	subs	r0, #1
   10862:	4283      	cmp	r3, r0
   10864:	db07      	blt.n	10876 <ll_rx_dequeue+0x8a>
   10866:	4b2b      	ldr	r3, [pc, #172]	; (10914 <ll_rx_dequeue+0x128>)
   10868:	9301      	str	r3, [sp, #4]
   1086a:	9300      	str	r3, [sp, #0]
   1086c:	4a2a      	ldr	r2, [pc, #168]	; (10918 <ll_rx_dequeue+0x12c>)
   1086e:	4b2b      	ldr	r3, [pc, #172]	; (1091c <ll_rx_dequeue+0x130>)
   10870:	492b      	ldr	r1, [pc, #172]	; (10920 <ll_rx_dequeue+0x134>)
   10872:	482e      	ldr	r0, [pc, #184]	; (1092c <ll_rx_dequeue+0x140>)
   10874:	e7d0      	b.n	10818 <ll_rx_dequeue+0x2c>
		_radio.link_rx_data_quota++;
   10876:	3301      	adds	r3, #1
   10878:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   1087c:	2906      	cmp	r1, #6
   1087e:	d136      	bne.n	108ee <ll_rx_dequeue+0x102>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   10880:	7ad3      	ldrb	r3, [r2, #11]
   10882:	2b3c      	cmp	r3, #60	; 0x3c
   10884:	d00d      	beq.n	108a2 <ll_rx_dequeue+0xb6>
   10886:	7b12      	ldrb	r2, [r2, #12]
   10888:	b9e2      	cbnz	r2, 108c4 <ll_rx_dequeue+0xd8>
			LL_ASSERT(_radio.scanner.is_enabled);
   1088a:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1088e:	07d9      	lsls	r1, r3, #31
   10890:	d42f      	bmi.n	108f2 <ll_rx_dequeue+0x106>
   10892:	4b20      	ldr	r3, [pc, #128]	; (10914 <ll_rx_dequeue+0x128>)
   10894:	9301      	str	r3, [sp, #4]
   10896:	9300      	str	r3, [sp, #0]
   10898:	4a1f      	ldr	r2, [pc, #124]	; (10918 <ll_rx_dequeue+0x12c>)
   1089a:	4b20      	ldr	r3, [pc, #128]	; (1091c <ll_rx_dequeue+0x130>)
   1089c:	4920      	ldr	r1, [pc, #128]	; (10920 <ll_rx_dequeue+0x134>)
   1089e:	4824      	ldr	r0, [pc, #144]	; (10930 <ll_rx_dequeue+0x144>)
   108a0:	e7ba      	b.n	10818 <ll_rx_dequeue+0x2c>
				_radio.advertiser.conn = NULL;
   108a2:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   108a4:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   108a8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   108ac:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   108b0:	2b00      	cmp	r3, #0
   108b2:	db09      	blt.n	108c8 <ll_rx_dequeue+0xdc>
   108b4:	4b17      	ldr	r3, [pc, #92]	; (10914 <ll_rx_dequeue+0x128>)
   108b6:	9301      	str	r3, [sp, #4]
   108b8:	9300      	str	r3, [sp, #0]
   108ba:	4a17      	ldr	r2, [pc, #92]	; (10918 <ll_rx_dequeue+0x12c>)
   108bc:	4b17      	ldr	r3, [pc, #92]	; (1091c <ll_rx_dequeue+0x130>)
   108be:	4918      	ldr	r1, [pc, #96]	; (10920 <ll_rx_dequeue+0x134>)
   108c0:	481c      	ldr	r0, [pc, #112]	; (10934 <ll_rx_dequeue+0x148>)
   108c2:	e7a9      	b.n	10818 <ll_rx_dequeue+0x2c>
		struct connection *conn = NULL;
   108c4:	2500      	movs	r5, #0
   108c6:	e7f1      	b.n	108ac <ll_rx_dequeue+0xc0>
			_radio.advertiser.is_enabled = 0;
   108c8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   108cc:	f36f 13c7 	bfc	r3, #7, #1
   108d0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   108d4:	b995      	cbnz	r5, 108fc <ll_rx_dequeue+0x110>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   108d6:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   108da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   108de:	f000 0001 	and.w	r0, r0, #1
   108e2:	0040      	lsls	r0, r0, #1
		if (!bm) {
   108e4:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   108e8:	d101      	bne.n	108ee <ll_rx_dequeue+0x102>
			ll_adv_scan_state_cb(0);
   108ea:	f000 fdc3 	bl	11474 <ll_adv_scan_state_cb>
}
   108ee:	b005      	add	sp, #20
   108f0:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   108f2:	f362 0300 	bfi	r3, r2, #0, #1
   108f6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   108fa:	e7ec      	b.n	108d6 <ll_rx_dequeue+0xea>
			mem_release(node_rx->hdr.onion.link,
   108fc:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   10900:	490d      	ldr	r1, [pc, #52]	; (10938 <ll_rx_dequeue+0x14c>)
   10902:	f7f6 f80a 	bl	691a <mem_release>
			mem_release(conn, &_radio.conn_free);
   10906:	490d      	ldr	r1, [pc, #52]	; (1093c <ll_rx_dequeue+0x150>)
   10908:	4628      	mov	r0, r5
   1090a:	f7f6 f806 	bl	691a <mem_release>
   1090e:	e7e2      	b.n	108d6 <ll_rx_dequeue+0xea>
   10910:	200008c0 	.word	0x200008c0
   10914:	000142a9 	.word	0x000142a9
   10918:	00014ff8 	.word	0x00014ff8
   1091c:	000164f9 	.word	0x000164f9
   10920:	00015047 	.word	0x00015047
   10924:	00016547 	.word	0x00016547
   10928:	00014f97 	.word	0x00014f97
   1092c:	000165f2 	.word	0x000165f2
   10930:	00016ae0 	.word	0x00016ae0
   10934:	00016aa2 	.word	0x00016aa2
   10938:	20000a08 	.word	0x20000a08
   1093c:	200009cc 	.word	0x200009cc

00010940 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   10940:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   10942:	4c0b      	ldr	r4, [pc, #44]	; (10970 <rtc0_nrf5_isr+0x30>)
   10944:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   10948:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   1094c:	b122      	cbz	r2, 10958 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1094e:	2000      	movs	r0, #0
   10950:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   10954:	f7f6 fe3e 	bl	75d4 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   10958:	b12d      	cbz	r5, 10966 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   1095a:	2300      	movs	r3, #0
   1095c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   10960:	2001      	movs	r0, #1
   10962:	f7f6 fe37 	bl	75d4 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   10966:	2000      	movs	r0, #0
}
   10968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   1096c:	f7f6 b8d4 	b.w	6b18 <mayfly_run>
   10970:	4000b000 	.word	0x4000b000

00010974 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   10974:	2001      	movs	r0, #1
   10976:	f7f6 b8cf 	b.w	6b18 <mayfly_run>

0001097a <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1097a:	4668      	mov	r0, sp
   1097c:	f020 0107 	bic.w	r1, r0, #7
   10980:	468d      	mov	sp, r1
   10982:	b501      	push	{r0, lr}
	isr_radio();
   10984:	f001 f8b8 	bl	11af8 <isr_radio>
	ISR_DIRECT_PM();
   10988:	f7f0 ffb2 	bl	18f0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   1098c:	f7f0 fd9c 	bl	14c8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   10990:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   10994:	4685      	mov	sp, r0
   10996:	4770      	bx	lr

00010998 <radio_active_callback>:
{
   10998:	4770      	bx	lr
	...

0001099c <radio_event_callback>:
	k_sem_give(sem_recv);
   1099c:	4b01      	ldr	r3, [pc, #4]	; (109a4 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1099e:	6818      	ldr	r0, [r3, #0]
   109a0:	f002 becb 	b.w	1373a <_impl_k_sem_give>
   109a4:	200011f0 	.word	0x200011f0

000109a8 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   109a8:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   109aa:	4b41      	ldr	r3, [pc, #260]	; (10ab0 <ll_init+0x108>)
{
   109ac:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   109ae:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   109b0:	4840      	ldr	r0, [pc, #256]	; (10ab4 <ll_init+0x10c>)
   109b2:	f002 f9db 	bl	12d6c <device_get_binding>
	if (!clk_k32) {
   109b6:	b918      	cbnz	r0, 109c0 <ll_init+0x18>
		return -ENODEV;
   109b8:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   109bc:	b006      	add	sp, #24
   109be:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   109c0:	6843      	ldr	r3, [r0, #4]
   109c2:	2101      	movs	r1, #1
   109c4:	681b      	ldr	r3, [r3, #0]
   109c6:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   109c8:	483b      	ldr	r0, [pc, #236]	; (10ab8 <ll_init+0x110>)
   109ca:	f002 f9cf 	bl	12d6c <device_get_binding>
	if (!entropy) {
   109ce:	4604      	mov	r4, r0
   109d0:	2800      	cmp	r0, #0
   109d2:	d0f1      	beq.n	109b8 <ll_init+0x10>
	cntr_init();
   109d4:	f000 ff74 	bl	118c0 <cntr_init>
	mayfly_init();
   109d8:	f7f5 fffe 	bl	69d8 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   109dc:	4b37      	ldr	r3, [pc, #220]	; (10abc <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   109de:	2203      	movs	r2, #3
   109e0:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   109e2:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   109e4:	4a36      	ldr	r2, [pc, #216]	; (10ac0 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   109e6:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   109e8:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   109ea:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   109ec:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   109ee:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   109f0:	9205      	str	r2, [sp, #20]
   109f2:	4a34      	ldr	r2, [pc, #208]	; (10ac4 <ll_init+0x11c>)
   109f4:	9204      	str	r2, [sp, #16]
   109f6:	4a34      	ldr	r2, [pc, #208]	; (10ac8 <ll_init+0x120>)
   109f8:	9203      	str	r2, [sp, #12]
   109fa:	4a34      	ldr	r2, [pc, #208]	; (10acc <ll_init+0x124>)
   109fc:	9202      	str	r2, [sp, #8]
   109fe:	220d      	movs	r2, #13
   10a00:	9201      	str	r2, [sp, #4]
   10a02:	9300      	str	r3, [sp, #0]
   10a04:	4a32      	ldr	r2, [pc, #200]	; (10ad0 <ll_init+0x128>)
   10a06:	2304      	movs	r3, #4
   10a08:	f7f6 fdac 	bl	7564 <ticker_init>
	LL_ASSERT(!err);
   10a0c:	b170      	cbz	r0, 10a2c <ll_init+0x84>
   10a0e:	4b31      	ldr	r3, [pc, #196]	; (10ad4 <ll_init+0x12c>)
   10a10:	9301      	str	r3, [sp, #4]
   10a12:	9300      	str	r3, [sp, #0]
   10a14:	4a30      	ldr	r2, [pc, #192]	; (10ad8 <ll_init+0x130>)
   10a16:	4b31      	ldr	r3, [pc, #196]	; (10adc <ll_init+0x134>)
   10a18:	4931      	ldr	r1, [pc, #196]	; (10ae0 <ll_init+0x138>)
   10a1a:	4832      	ldr	r0, [pc, #200]	; (10ae4 <ll_init+0x13c>)
   10a1c:	f7f0 fab6 	bl	f8c <printk>
   10a20:	4040      	eors	r0, r0
   10a22:	f380 8811 	msr	BASEPRI, r0
   10a26:	f04f 0004 	mov.w	r0, #4
   10a2a:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   10a2c:	482e      	ldr	r0, [pc, #184]	; (10ae8 <ll_init+0x140>)
   10a2e:	f002 f99d 	bl	12d6c <device_get_binding>
	if (!clk_m16) {
   10a32:	2800      	cmp	r0, #0
   10a34:	d0c0      	beq.n	109b8 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   10a36:	4b2d      	ldr	r3, [pc, #180]	; (10aec <ll_init+0x144>)
   10a38:	9304      	str	r3, [sp, #16]
   10a3a:	9501      	str	r5, [sp, #4]
   10a3c:	231b      	movs	r3, #27
   10a3e:	2501      	movs	r5, #1
   10a40:	f44f 7657 	mov.w	r6, #860	; 0x35c
   10a44:	9303      	str	r3, [sp, #12]
   10a46:	9302      	str	r3, [sp, #8]
   10a48:	4622      	mov	r2, r4
   10a4a:	9605      	str	r6, [sp, #20]
   10a4c:	9500      	str	r5, [sp, #0]
   10a4e:	462b      	mov	r3, r5
   10a50:	2107      	movs	r1, #7
   10a52:	f7fe ff49 	bl	f8e8 <radio_init>
	if (err) {
   10a56:	4604      	mov	r4, r0
   10a58:	b160      	cbz	r0, 10a74 <ll_init+0xcc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   10a5a:	4b1e      	ldr	r3, [pc, #120]	; (10ad4 <ll_init+0x12c>)
   10a5c:	9303      	str	r3, [sp, #12]
   10a5e:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
   10a62:	4a1d      	ldr	r2, [pc, #116]	; (10ad8 <ll_init+0x130>)
   10a64:	4b1d      	ldr	r3, [pc, #116]	; (10adc <ll_init+0x134>)
   10a66:	491e      	ldr	r1, [pc, #120]	; (10ae0 <ll_init+0x138>)
   10a68:	4821      	ldr	r0, [pc, #132]	; (10af0 <ll_init+0x148>)
   10a6a:	f7f0 fa8f 	bl	f8c <printk>
		return -ENOMEM;
   10a6e:	f06f 000b 	mvn.w	r0, #11
   10a72:	e7a3      	b.n	109bc <ll_init+0x14>
	ll_filter_reset(true);
   10a74:	4628      	mov	r0, r5
   10a76:	f000 fedb 	bl	11830 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   10a7a:	4622      	mov	r2, r4
   10a7c:	4621      	mov	r1, r4
   10a7e:	4628      	mov	r0, r5
   10a80:	f7f0 ff1c 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   10a84:	4622      	mov	r2, r4
   10a86:	4621      	mov	r1, r4
   10a88:	200b      	movs	r0, #11
   10a8a:	f7f0 ff17 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   10a8e:	4622      	mov	r2, r4
   10a90:	4621      	mov	r1, r4
   10a92:	2018      	movs	r0, #24
   10a94:	f7f0 ff12 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   10a98:	4628      	mov	r0, r5
   10a9a:	f7f0 fedd 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   10a9e:	200b      	movs	r0, #11
   10aa0:	f7f0 feda 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   10aa4:	2018      	movs	r0, #24
   10aa6:	f7f0 fed7 	bl	1858 <_arch_irq_enable>
	return 0;
   10aaa:	4620      	mov	r0, r4
   10aac:	e786      	b.n	109bc <ll_init+0x14>
   10aae:	bf00      	nop
   10ab0:	200011f0 	.word	0x200011f0
   10ab4:	0001437c 	.word	0x0001437c
   10ab8:	00014350 	.word	0x00014350
   10abc:	200011d0 	.word	0x200011d0
   10ac0:	00012495 	.word	0x00012495
   10ac4:	000123f1 	.word	0x000123f1
   10ac8:	00012395 	.word	0x00012395
   10acc:	20000f60 	.word	0x20000f60
   10ad0:	20000e20 	.word	0x20000e20
   10ad4:	000142a9 	.word	0x000142a9
   10ad8:	00014ff8 	.word	0x00014ff8
   10adc:	00017217 	.word	0x00017217
   10ae0:	00015047 	.word	0x00015047
   10ae4:	0001721f 	.word	0x0001721f
   10ae8:	00014387 	.word	0x00014387
   10aec:	20000ac4 	.word	0x20000ac4
   10af0:	00017245 	.word	0x00017245

00010af4 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   10af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10af8:	4681      	mov	r9, r0
   10afa:	4688      	mov	r8, r1
   10afc:	4617      	mov	r7, r2
   10afe:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   10b00:	f7fe ffd6 	bl	fab0 <ll_scan_is_enabled>
   10b04:	b988      	cbnz	r0, 10b2a <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   10b06:	4d0a      	ldr	r5, [pc, #40]	; (10b30 <ll_scan_params_set+0x3c>)
   10b08:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   10b0a:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   10b0e:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   10b12:	4622      	mov	r2, r4
   10b14:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   10b18:	4613      	mov	r3, r2
   10b1a:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   10b1e:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   10b20:	f362 1387 	bfi	r3, r2, #6, #2
   10b24:	712b      	strb	r3, [r5, #4]

	return 0;
   10b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10b2a:	200c      	movs	r0, #12
}
   10b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10b30:	200011f4 	.word	0x200011f4

00010b34 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   10b34:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b36:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   10b38:	b920      	cbnz	r0, 10b44 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   10b3a:	b005      	add	sp, #20
   10b3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   10b40:	f7ff be1c 	b.w	1077c <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   10b44:	f7fe ffb4 	bl	fab0 <ll_scan_is_enabled>
   10b48:	4606      	mov	r6, r0
   10b4a:	bb40      	cbnz	r0, 10b9e <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   10b4c:	4c15      	ldr	r4, [pc, #84]	; (10ba4 <ll_scan_enable+0x70>)
   10b4e:	7920      	ldrb	r0, [r4, #4]
   10b50:	0980      	lsrs	r0, r0, #6
   10b52:	f000 fa63 	bl	1101c <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   10b56:	7923      	ldrb	r3, [r4, #4]
   10b58:	f013 0501 	ands.w	r5, r3, #1
   10b5c:	d006      	beq.n	10b6c <ll_scan_enable+0x38>
   10b5e:	f013 0520 	ands.w	r5, r3, #32
   10b62:	d003      	beq.n	10b6c <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   10b64:	4630      	mov	r0, r6
   10b66:	f000 fbdd 	bl	11324 <ll_rl_rpa_update>
		rpa_gen = 1;
   10b6a:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   10b6c:	7926      	ldrb	r6, [r4, #4]
   10b6e:	f006 070f 	and.w	r7, r6, #15
   10b72:	f3c6 1600 	ubfx	r6, r6, #4, #1
   10b76:	2100      	movs	r1, #0
   10b78:	4630      	mov	r0, r6
   10b7a:	f7f6 feb1 	bl	78e0 <ll_addr_get>
   10b7e:	22ff      	movs	r2, #255	; 0xff
   10b80:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   10b82:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   10b84:	8823      	ldrh	r3, [r4, #0]
   10b86:	9502      	str	r5, [sp, #8]
   10b88:	0992      	lsrs	r2, r2, #6
   10b8a:	9201      	str	r2, [sp, #4]
   10b8c:	8862      	ldrh	r2, [r4, #2]
   10b8e:	9200      	str	r2, [sp, #0]
   10b90:	4631      	mov	r1, r6
   10b92:	4602      	mov	r2, r0
   10b94:	4638      	mov	r0, r7
   10b96:	f7ff fd13 	bl	105c0 <radio_scan_enable>
}
   10b9a:	b005      	add	sp, #20
   10b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   10b9e:	2000      	movs	r0, #0
   10ba0:	e7fb      	b.n	10b9a <ll_scan_enable+0x66>
   10ba2:	bf00      	nop
   10ba4:	200011f4 	.word	0x200011f4

00010ba8 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   10ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bac:	b085      	sub	sp, #20
   10bae:	461e      	mov	r6, r3
   10bb0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   10bb4:	9303      	str	r3, [sp, #12]
   10bb6:	4680      	mov	r8, r0
   10bb8:	4689      	mov	r9, r1
   10bba:	4615      	mov	r5, r2
   10bbc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10bbe:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   10bc2:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   10bc6:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   10bca:	f7fe ff71 	bl	fab0 <ll_scan_is_enabled>
   10bce:	9b03      	ldr	r3, [sp, #12]
   10bd0:	bba0      	cbnz	r0, 10c3c <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   10bd2:	9300      	str	r3, [sp, #0]
   10bd4:	4652      	mov	r2, sl
   10bd6:	465b      	mov	r3, fp
   10bd8:	4639      	mov	r1, r7
   10bda:	4630      	mov	r0, r6
   10bdc:	f7fe ff8c 	bl	faf8 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   10be0:	bb68      	cbnz	r0, 10c3e <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   10be2:	4628      	mov	r0, r5
   10be4:	f000 fa1a 	bl	1101c <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   10be8:	b1dd      	cbz	r5, 10c22 <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   10bea:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   10bec:	1ea3      	subs	r3, r4, #2
   10bee:	2b01      	cmp	r3, #1
   10bf0:	d822      	bhi.n	10c38 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   10bf2:	2000      	movs	r0, #0
   10bf4:	f000 fb96 	bl	11324 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   10bf8:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   10bfc:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   10bfe:	2100      	movs	r1, #0
   10c00:	4620      	mov	r0, r4
   10c02:	f7f6 fe6d 	bl	78e0 <ll_addr_get>
   10c06:	4643      	mov	r3, r8
   10c08:	4602      	mov	r2, r0
   10c0a:	4621      	mov	r1, r4
   10c0c:	2000      	movs	r0, #0
   10c0e:	9711      	str	r7, [sp, #68]	; 0x44
   10c10:	9610      	str	r6, [sp, #64]	; 0x40
   10c12:	950f      	str	r5, [sp, #60]	; 0x3c
   10c14:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   10c18:	b005      	add	sp, #20
   10c1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   10c1e:	f7ff bccf 	b.w	105c0 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   10c22:	f000 fb77 	bl	11314 <ctrl_rl_enabled>
   10c26:	2800      	cmp	r0, #0
   10c28:	d0df      	beq.n	10bea <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   10c2a:	4639      	mov	r1, r7
   10c2c:	462a      	mov	r2, r5
   10c2e:	4630      	mov	r0, r6
   10c30:	f000 fa16 	bl	11060 <ll_rl_find>
   10c34:	4607      	mov	r7, r0
   10c36:	e7d9      	b.n	10bec <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   10c38:	2600      	movs	r6, #0
   10c3a:	e7e0      	b.n	10bfe <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10c3c:	200c      	movs	r0, #12
}
   10c3e:	b005      	add	sp, #20
   10c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010c44 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   10c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c48:	4688      	mov	r8, r1
	int i;

	if (free) {
   10c4a:	4615      	mov	r5, r2
   10c4c:	b10a      	cbz	r2, 10c52 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   10c4e:	23ff      	movs	r3, #255	; 0xff
   10c50:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10c52:	4e14      	ldr	r6, [pc, #80]	; (10ca4 <wl_find+0x60>)
{
   10c54:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10c56:	f000 0701 	and.w	r7, r0, #1
   10c5a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   10c5e:	07da      	lsls	r2, r3, #31
   10c60:	d51d      	bpl.n	10c9e <wl_find+0x5a>
   10c62:	f3c3 0340 	ubfx	r3, r3, #1, #1
   10c66:	42bb      	cmp	r3, r7
   10c68:	d113      	bne.n	10c92 <wl_find+0x4e>
   10c6a:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   10c6e:	2206      	movs	r2, #6
   10c70:	4641      	mov	r1, r8
   10c72:	3002      	adds	r0, #2
   10c74:	f7f0 ffad 	bl	1bd2 <memcmp>
   10c78:	b910      	cbnz	r0, 10c80 <wl_find+0x3c>
			return i;
   10c7a:	b2e0      	uxtb	r0, r4
   10c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   10c80:	b13d      	cbz	r5, 10c92 <wl_find+0x4e>
   10c82:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   10c86:	07db      	lsls	r3, r3, #31
   10c88:	d403      	bmi.n	10c92 <wl_find+0x4e>
   10c8a:	782b      	ldrb	r3, [r5, #0]
   10c8c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   10c8e:	bf08      	it	eq
   10c90:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   10c92:	3401      	adds	r4, #1
   10c94:	2c08      	cmp	r4, #8
   10c96:	d1e0      	bne.n	10c5a <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   10c98:	20ff      	movs	r0, #255	; 0xff
   10c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   10c9e:	2d00      	cmp	r5, #0
   10ca0:	d1f3      	bne.n	10c8a <wl_find+0x46>
   10ca2:	e7f6      	b.n	10c92 <wl_find+0x4e>
   10ca4:	20001427 	.word	0x20001427

00010ca8 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   10ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10cac:	4d1a      	ldr	r5, [pc, #104]	; (10d18 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   10cae:	f8df 8074 	ldr.w	r8, [pc, #116]	; 10d24 <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   10cb2:	1eae      	subs	r6, r5, #2
{
   10cb4:	2400      	movs	r4, #0
   10cb6:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   10cb8:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   10cbc:	07d9      	lsls	r1, r3, #31
   10cbe:	d524      	bpl.n	10d0a <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   10cc0:	f898 3000 	ldrb.w	r3, [r8]
   10cc4:	b15b      	cbz	r3, 10cde <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   10cc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   10cca:	2a07      	cmp	r2, #7
   10ccc:	d807      	bhi.n	10cde <filter_wl_update+0x36>
   10cce:	2328      	movs	r3, #40	; 0x28
   10cd0:	4353      	muls	r3, r2
   10cd2:	4a12      	ldr	r2, [pc, #72]	; (10d1c <filter_wl_update+0x74>)
   10cd4:	5cd3      	ldrb	r3, [r2, r3]
   10cd6:	075a      	lsls	r2, r3, #29
   10cd8:	d501      	bpl.n	10cde <filter_wl_update+0x36>
   10cda:	06db      	lsls	r3, r3, #27
   10cdc:	d515      	bpl.n	10d0a <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   10cde:	4810      	ldr	r0, [pc, #64]	; (10d20 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   10ce0:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   10ce4:	2201      	movs	r2, #1
   10ce6:	fa02 f104 	lsl.w	r1, r2, r4
   10cea:	7802      	ldrb	r2, [r0, #0]
   10cec:	430a      	orrs	r2, r1
   10cee:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   10cf0:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10cf4:	7842      	ldrb	r2, [r0, #1]
   10cf6:	40a3      	lsls	r3, r4
   10cf8:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10cfa:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10cfc:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10cfe:	fb02 0004 	mla	r0, r2, r4, r0
   10d02:	4629      	mov	r1, r5
   10d04:	3002      	adds	r0, #2
   10d06:	f7f0 ff79 	bl	1bfc <memcpy>
   10d0a:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   10d0c:	2c08      	cmp	r4, #8
   10d0e:	f105 0508 	add.w	r5, r5, #8
   10d12:	d1d1      	bne.n	10cb8 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   10d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d18:	20001429 	.word	0x20001429
   10d1c:	200012b4 	.word	0x200012b4
   10d20:	20001467 	.word	0x20001467
   10d24:	200013f4 	.word	0x200013f4

00010d28 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   10d28:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   10d2a:	f7fe fead 	bl	fa88 <ll_adv_is_enabled>
   10d2e:	b928      	cbnz	r0, 10d3c <rl_access_check.constprop.1+0x14>
   10d30:	f7fe febe 	bl	fab0 <ll_scan_is_enabled>
   10d34:	fab0 f080 	clz	r0, r0
   10d38:	0940      	lsrs	r0, r0, #5
   10d3a:	bd08      	pop	{r3, pc}
   10d3c:	2000      	movs	r0, #0
}
   10d3e:	bd08      	pop	{r3, pc}

00010d40 <filter_rl_update>:
{
   10d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   10d42:	4e10      	ldr	r6, [pc, #64]	; (10d84 <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   10d44:	4d10      	ldr	r5, [pc, #64]	; (10d88 <filter_rl_update+0x48>)
{
   10d46:	2400      	movs	r4, #0
		if (rl[i].taken) {
   10d48:	2728      	movs	r7, #40	; 0x28
   10d4a:	fb07 f104 	mul.w	r1, r7, r4
   10d4e:	5c73      	ldrb	r3, [r6, r1]
   10d50:	07da      	lsls	r2, r3, #31
   10d52:	d513      	bpl.n	10d7c <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   10d54:	2201      	movs	r2, #1
   10d56:	fa02 f004 	lsl.w	r0, r2, r4
   10d5a:	782a      	ldrb	r2, [r5, #0]
   10d5c:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   10d5e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   10d62:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10d64:	786a      	ldrb	r2, [r5, #1]
   10d66:	40a3      	lsls	r3, r4
   10d68:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10d6a:	2206      	movs	r2, #6
   10d6c:	3101      	adds	r1, #1
   10d6e:	fb02 5004 	mla	r0, r2, r4, r5
   10d72:	4431      	add	r1, r6
   10d74:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10d76:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10d78:	f7f0 ff40 	bl	1bfc <memcpy>
   10d7c:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10d7e:	2c08      	cmp	r4, #8
   10d80:	d1e3      	bne.n	10d4a <filter_rl_update+0xa>
}
   10d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d84:	200012b4 	.word	0x200012b4
   10d88:	200013f5 	.word	0x200013f5

00010d8c <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   10d8c:	2807      	cmp	r0, #7
   10d8e:	d80c      	bhi.n	10daa <ctrl_lrpa_get+0x1e>
   10d90:	2328      	movs	r3, #40	; 0x28
   10d92:	4358      	muls	r0, r3
   10d94:	4a06      	ldr	r2, [pc, #24]	; (10db0 <ctrl_lrpa_get+0x24>)
   10d96:	5c13      	ldrb	r3, [r2, r0]
   10d98:	1811      	adds	r1, r2, r0
   10d9a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   10d9e:	b128      	cbz	r0, 10dac <ctrl_lrpa_get+0x20>
   10da0:	f3c3 0040 	ubfx	r0, r3, #1, #1
   10da4:	b110      	cbz	r0, 10dac <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   10da6:	6a48      	ldr	r0, [r1, #36]	; 0x24
   10da8:	4770      	bx	lr
		return NULL;
   10daa:	2000      	movs	r0, #0
}
   10dac:	4770      	bx	lr
   10dae:	bf00      	nop
   10db0:	200012b4 	.word	0x200012b4

00010db4 <ctrl_irks_get>:
	*count = peer_irk_count;
   10db4:	4b02      	ldr	r3, [pc, #8]	; (10dc0 <ctrl_irks_get+0xc>)
   10db6:	781b      	ldrb	r3, [r3, #0]
   10db8:	7003      	strb	r3, [r0, #0]
}
   10dba:	4802      	ldr	r0, [pc, #8]	; (10dc4 <ctrl_irks_get+0x10>)
   10dbc:	4770      	bx	lr
   10dbe:	bf00      	nop
   10dc0:	2000122a 	.word	0x2000122a
   10dc4:	20001233 	.word	0x20001233

00010dc8 <ctrl_rl_idx>:
{
   10dc8:	b507      	push	{r0, r1, r2, lr}
	if (whitelist) {
   10dca:	b320      	cbz	r0, 10e16 <ctrl_rl_idx+0x4e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   10dcc:	2907      	cmp	r1, #7
   10dce:	d90e      	bls.n	10dee <ctrl_rl_idx+0x26>
		LL_ASSERT(wl[devmatch_id].taken);
   10dd0:	4b1d      	ldr	r3, [pc, #116]	; (10e48 <ctrl_rl_idx+0x80>)
   10dd2:	9301      	str	r3, [sp, #4]
   10dd4:	9300      	str	r3, [sp, #0]
   10dd6:	4a1d      	ldr	r2, [pc, #116]	; (10e4c <ctrl_rl_idx+0x84>)
   10dd8:	4b1d      	ldr	r3, [pc, #116]	; (10e50 <ctrl_rl_idx+0x88>)
   10dda:	491e      	ldr	r1, [pc, #120]	; (10e54 <ctrl_rl_idx+0x8c>)
   10ddc:	481e      	ldr	r0, [pc, #120]	; (10e58 <ctrl_rl_idx+0x90>)
   10dde:	f7f0 f8d5 	bl	f8c <printk>
   10de2:	4040      	eors	r0, r0
   10de4:	f380 8811 	msr	BASEPRI, r0
   10de8:	f04f 0004 	mov.w	r0, #4
   10dec:	df02      	svc	2
   10dee:	4b1b      	ldr	r3, [pc, #108]	; (10e5c <ctrl_rl_idx+0x94>)
   10df0:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   10df4:	07d2      	lsls	r2, r2, #31
   10df6:	d407      	bmi.n	10e08 <ctrl_rl_idx+0x40>
   10df8:	4b13      	ldr	r3, [pc, #76]	; (10e48 <ctrl_rl_idx+0x80>)
   10dfa:	9301      	str	r3, [sp, #4]
   10dfc:	9300      	str	r3, [sp, #0]
   10dfe:	4a13      	ldr	r2, [pc, #76]	; (10e4c <ctrl_rl_idx+0x84>)
   10e00:	4b13      	ldr	r3, [pc, #76]	; (10e50 <ctrl_rl_idx+0x88>)
   10e02:	4914      	ldr	r1, [pc, #80]	; (10e54 <ctrl_rl_idx+0x8c>)
   10e04:	4816      	ldr	r0, [pc, #88]	; (10e60 <ctrl_rl_idx+0x98>)
   10e06:	e7ea      	b.n	10dde <ctrl_rl_idx+0x16>
		i = wl[devmatch_id].rl_idx;
   10e08:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   10e0c:	7849      	ldrb	r1, [r1, #1]
}
   10e0e:	4608      	mov	r0, r1
   10e10:	b003      	add	sp, #12
   10e12:	f85d fb04 	ldr.w	pc, [sp], #4
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   10e16:	2907      	cmp	r1, #7
   10e18:	d907      	bls.n	10e2a <ctrl_rl_idx+0x62>
   10e1a:	4b0b      	ldr	r3, [pc, #44]	; (10e48 <ctrl_rl_idx+0x80>)
   10e1c:	9301      	str	r3, [sp, #4]
   10e1e:	9300      	str	r3, [sp, #0]
   10e20:	4a0a      	ldr	r2, [pc, #40]	; (10e4c <ctrl_rl_idx+0x84>)
   10e22:	4b0b      	ldr	r3, [pc, #44]	; (10e50 <ctrl_rl_idx+0x88>)
   10e24:	490b      	ldr	r1, [pc, #44]	; (10e54 <ctrl_rl_idx+0x8c>)
   10e26:	480f      	ldr	r0, [pc, #60]	; (10e64 <ctrl_rl_idx+0x9c>)
   10e28:	e7d9      	b.n	10dde <ctrl_rl_idx+0x16>
		LL_ASSERT(rl[i].taken);
   10e2a:	2328      	movs	r3, #40	; 0x28
   10e2c:	434b      	muls	r3, r1
   10e2e:	4a0e      	ldr	r2, [pc, #56]	; (10e68 <ctrl_rl_idx+0xa0>)
   10e30:	5cd3      	ldrb	r3, [r2, r3]
   10e32:	07db      	lsls	r3, r3, #31
   10e34:	d4eb      	bmi.n	10e0e <ctrl_rl_idx+0x46>
   10e36:	4b04      	ldr	r3, [pc, #16]	; (10e48 <ctrl_rl_idx+0x80>)
   10e38:	9301      	str	r3, [sp, #4]
   10e3a:	9300      	str	r3, [sp, #0]
   10e3c:	4a03      	ldr	r2, [pc, #12]	; (10e4c <ctrl_rl_idx+0x84>)
   10e3e:	4b04      	ldr	r3, [pc, #16]	; (10e50 <ctrl_rl_idx+0x88>)
   10e40:	4904      	ldr	r1, [pc, #16]	; (10e54 <ctrl_rl_idx+0x8c>)
   10e42:	480a      	ldr	r0, [pc, #40]	; (10e6c <ctrl_rl_idx+0xa4>)
   10e44:	e7cb      	b.n	10dde <ctrl_rl_idx+0x16>
   10e46:	bf00      	nop
   10e48:	000142a9 	.word	0x000142a9
   10e4c:	00014ff8 	.word	0x00014ff8
   10e50:	0001727a 	.word	0x0001727a
   10e54:	00015047 	.word	0x00015047
   10e58:	00017314 	.word	0x00017314
   10e5c:	20001427 	.word	0x20001427
   10e60:	000173e1 	.word	0x000173e1
   10e64:	00017418 	.word	0x00017418
   10e68:	200012b4 	.word	0x200012b4
   10e6c:	000174e5 	.word	0x000174e5

00010e70 <ctrl_rl_irk_idx>:
{
   10e70:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   10e72:	4b18      	ldr	r3, [pc, #96]	; (10ed4 <ctrl_rl_irk_idx+0x64>)
   10e74:	781b      	ldrb	r3, [r3, #0]
   10e76:	4283      	cmp	r3, r0
   10e78:	d80e      	bhi.n	10e98 <ctrl_rl_irk_idx+0x28>
   10e7a:	4b17      	ldr	r3, [pc, #92]	; (10ed8 <ctrl_rl_irk_idx+0x68>)
   10e7c:	9301      	str	r3, [sp, #4]
   10e7e:	9300      	str	r3, [sp, #0]
   10e80:	4a16      	ldr	r2, [pc, #88]	; (10edc <ctrl_rl_irk_idx+0x6c>)
   10e82:	4b17      	ldr	r3, [pc, #92]	; (10ee0 <ctrl_rl_irk_idx+0x70>)
   10e84:	4917      	ldr	r1, [pc, #92]	; (10ee4 <ctrl_rl_irk_idx+0x74>)
   10e86:	4818      	ldr	r0, [pc, #96]	; (10ee8 <ctrl_rl_irk_idx+0x78>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   10e88:	f7f0 f880 	bl	f8c <printk>
   10e8c:	4040      	eors	r0, r0
   10e8e:	f380 8811 	msr	BASEPRI, r0
   10e92:	f04f 0004 	mov.w	r0, #4
   10e96:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   10e98:	4b14      	ldr	r3, [pc, #80]	; (10eec <ctrl_rl_irk_idx+0x7c>)
   10e9a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   10e9c:	2807      	cmp	r0, #7
   10e9e:	d907      	bls.n	10eb0 <ctrl_rl_irk_idx+0x40>
   10ea0:	4b0d      	ldr	r3, [pc, #52]	; (10ed8 <ctrl_rl_irk_idx+0x68>)
   10ea2:	9301      	str	r3, [sp, #4]
   10ea4:	9300      	str	r3, [sp, #0]
   10ea6:	4a0d      	ldr	r2, [pc, #52]	; (10edc <ctrl_rl_irk_idx+0x6c>)
   10ea8:	4b0d      	ldr	r3, [pc, #52]	; (10ee0 <ctrl_rl_irk_idx+0x70>)
   10eaa:	490e      	ldr	r1, [pc, #56]	; (10ee4 <ctrl_rl_irk_idx+0x74>)
   10eac:	4810      	ldr	r0, [pc, #64]	; (10ef0 <ctrl_rl_irk_idx+0x80>)
   10eae:	e7eb      	b.n	10e88 <ctrl_rl_irk_idx+0x18>
	LL_ASSERT(rl[i].taken);
   10eb0:	2328      	movs	r3, #40	; 0x28
   10eb2:	4343      	muls	r3, r0
   10eb4:	4a0f      	ldr	r2, [pc, #60]	; (10ef4 <ctrl_rl_irk_idx+0x84>)
   10eb6:	5cd3      	ldrb	r3, [r2, r3]
   10eb8:	07db      	lsls	r3, r3, #31
   10eba:	d407      	bmi.n	10ecc <ctrl_rl_irk_idx+0x5c>
   10ebc:	4b06      	ldr	r3, [pc, #24]	; (10ed8 <ctrl_rl_irk_idx+0x68>)
   10ebe:	9301      	str	r3, [sp, #4]
   10ec0:	9300      	str	r3, [sp, #0]
   10ec2:	4a06      	ldr	r2, [pc, #24]	; (10edc <ctrl_rl_irk_idx+0x6c>)
   10ec4:	4b06      	ldr	r3, [pc, #24]	; (10ee0 <ctrl_rl_irk_idx+0x70>)
   10ec6:	4907      	ldr	r1, [pc, #28]	; (10ee4 <ctrl_rl_irk_idx+0x74>)
   10ec8:	480b      	ldr	r0, [pc, #44]	; (10ef8 <ctrl_rl_irk_idx+0x88>)
   10eca:	e7dd      	b.n	10e88 <ctrl_rl_irk_idx+0x18>
}
   10ecc:	b003      	add	sp, #12
   10ece:	f85d fb04 	ldr.w	pc, [sp], #4
   10ed2:	bf00      	nop
   10ed4:	2000122a 	.word	0x2000122a
   10ed8:	000142a9 	.word	0x000142a9
   10edc:	00014ff8 	.word	0x00014ff8
   10ee0:	00017286 	.word	0x00017286
   10ee4:	00015047 	.word	0x00015047
   10ee8:	00017512 	.word	0x00017512
   10eec:	2000122b 	.word	0x2000122b
   10ef0:	00017550 	.word	0x00017550
   10ef4:	200012b4 	.word	0x200012b4
   10ef8:	000174e5 	.word	0x000174e5

00010efc <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   10efc:	2807      	cmp	r0, #7
{
   10efe:	b507      	push	{r0, r1, r2, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   10f00:	d819      	bhi.n	10f36 <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   10f02:	2328      	movs	r3, #40	; 0x28
   10f04:	4358      	muls	r0, r3
   10f06:	4b0d      	ldr	r3, [pc, #52]	; (10f3c <ctrl_irk_whitelisted+0x40>)
   10f08:	5c18      	ldrb	r0, [r3, r0]
   10f0a:	07c3      	lsls	r3, r0, #31
   10f0c:	d40e      	bmi.n	10f2c <ctrl_irk_whitelisted+0x30>
   10f0e:	4b0c      	ldr	r3, [pc, #48]	; (10f40 <ctrl_irk_whitelisted+0x44>)
   10f10:	9301      	str	r3, [sp, #4]
   10f12:	9300      	str	r3, [sp, #0]
   10f14:	4a0b      	ldr	r2, [pc, #44]	; (10f44 <ctrl_irk_whitelisted+0x48>)
   10f16:	4b0c      	ldr	r3, [pc, #48]	; (10f48 <ctrl_irk_whitelisted+0x4c>)
   10f18:	490c      	ldr	r1, [pc, #48]	; (10f4c <ctrl_irk_whitelisted+0x50>)
   10f1a:	480d      	ldr	r0, [pc, #52]	; (10f50 <ctrl_irk_whitelisted+0x54>)
   10f1c:	f7f0 f836 	bl	f8c <printk>
   10f20:	4040      	eors	r0, r0
   10f22:	f380 8811 	msr	BASEPRI, r0
   10f26:	f04f 0004 	mov.w	r0, #4
   10f2a:	df02      	svc	2
	return rl[rl_idx].wl;
   10f2c:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   10f30:	b003      	add	sp, #12
   10f32:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   10f36:	2000      	movs	r0, #0
   10f38:	e7fa      	b.n	10f30 <ctrl_irk_whitelisted+0x34>
   10f3a:	bf00      	nop
   10f3c:	200012b4 	.word	0x200012b4
   10f40:	000142a9 	.word	0x000142a9
   10f44:	00014ff8 	.word	0x00014ff8
   10f48:	00017296 	.word	0x00017296
   10f4c:	00015047 	.word	0x00015047
   10f50:	000172e2 	.word	0x000172e2

00010f54 <ctrl_filter_get>:
}
   10f54:	4b03      	ldr	r3, [pc, #12]	; (10f64 <ctrl_filter_get+0x10>)
   10f56:	4a04      	ldr	r2, [pc, #16]	; (10f68 <ctrl_filter_get+0x14>)
   10f58:	2800      	cmp	r0, #0
   10f5a:	bf14      	ite	ne
   10f5c:	4610      	movne	r0, r2
   10f5e:	4618      	moveq	r0, r3
   10f60:	4770      	bx	lr
   10f62:	bf00      	nop
   10f64:	200013f5 	.word	0x200013f5
   10f68:	20001467 	.word	0x20001467

00010f6c <ll_wl_size_get>:
   10f6c:	2008      	movs	r0, #8
   10f6e:	4770      	bx	lr

00010f70 <ll_wl_clear>:
{
   10f70:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   10f72:	f7fe fd91 	bl	fa98 <radio_adv_filter_pol_get>
   10f76:	4604      	mov	r4, r0
   10f78:	b110      	cbz	r0, 10f80 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10f7a:	240c      	movs	r4, #12
}
   10f7c:	4620      	mov	r0, r4
   10f7e:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   10f80:	f7fe fdac 	bl	fadc <radio_scan_filter_pol_get>
   10f84:	07c3      	lsls	r3, r0, #31
   10f86:	d4f8      	bmi.n	10f7a <ll_wl_clear+0xa>
		wl[i].taken = 0;
   10f88:	4a07      	ldr	r2, [pc, #28]	; (10fa8 <ll_wl_clear+0x38>)
   10f8a:	4623      	mov	r3, r4
   10f8c:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   10f90:	f36f 0100 	bfc	r1, #0, #1
   10f94:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   10f98:	3301      	adds	r3, #1
   10f9a:	2b08      	cmp	r3, #8
   10f9c:	d1f6      	bne.n	10f8c <ll_wl_clear+0x1c>
	wl_anon = 0;
   10f9e:	4b03      	ldr	r3, [pc, #12]	; (10fac <ll_wl_clear+0x3c>)
   10fa0:	2200      	movs	r2, #0
   10fa2:	701a      	strb	r2, [r3, #0]
	return 0;
   10fa4:	e7ea      	b.n	10f7c <ll_wl_clear+0xc>
   10fa6:	bf00      	nop
   10fa8:	20001427 	.word	0x20001427
   10fac:	20001918 	.word	0x20001918

00010fb0 <ll_wl_remove>:
{
   10fb0:	b538      	push	{r3, r4, r5, lr}
   10fb2:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   10fb4:	f7fe fd70 	bl	fa98 <radio_adv_filter_pol_get>
   10fb8:	4604      	mov	r4, r0
   10fba:	b110      	cbz	r0, 10fc2 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10fbc:	240c      	movs	r4, #12
}
   10fbe:	4620      	mov	r0, r4
   10fc0:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   10fc2:	f7fe fd8b 	bl	fadc <radio_scan_filter_pol_get>
   10fc6:	07c3      	lsls	r3, r0, #31
   10fc8:	d4f8      	bmi.n	10fbc <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   10fca:	7828      	ldrb	r0, [r5, #0]
   10fcc:	28ff      	cmp	r0, #255	; 0xff
   10fce:	d102      	bne.n	10fd6 <ll_wl_remove+0x26>
		wl_anon = 0;
   10fd0:	4b0f      	ldr	r3, [pc, #60]	; (11010 <ll_wl_remove+0x60>)
   10fd2:	701c      	strb	r4, [r3, #0]
		return 0;
   10fd4:	e7f3      	b.n	10fbe <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   10fd6:	4622      	mov	r2, r4
   10fd8:	1c69      	adds	r1, r5, #1
   10fda:	f7ff fe33 	bl	10c44 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   10fde:	2807      	cmp	r0, #7
   10fe0:	d813      	bhi.n	1100a <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   10fe2:	4b0c      	ldr	r3, [pc, #48]	; (11014 <ll_wl_remove+0x64>)
   10fe4:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   10fe8:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   10fea:	2d07      	cmp	r5, #7
   10fec:	d806      	bhi.n	10ffc <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   10fee:	2228      	movs	r2, #40	; 0x28
   10ff0:	4909      	ldr	r1, [pc, #36]	; (11018 <ll_wl_remove+0x68>)
   10ff2:	436a      	muls	r2, r5
   10ff4:	5c8d      	ldrb	r5, [r1, r2]
   10ff6:	f364 1545 	bfi	r5, r4, #5, #1
   10ffa:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   10ffc:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   11000:	f36f 0200 	bfc	r2, #0, #1
   11004:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   11008:	e7d9      	b.n	10fbe <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1100a:	2402      	movs	r4, #2
   1100c:	e7d7      	b.n	10fbe <ll_wl_remove+0xe>
   1100e:	bf00      	nop
   11010:	20001918 	.word	0x20001918
   11014:	20001427 	.word	0x20001427
   11018:	200012b4 	.word	0x200012b4

0001101c <ll_filters_scan_update>:
{
   1101c:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1101e:	4b0d      	ldr	r3, [pc, #52]	; (11054 <ll_filters_scan_update+0x38>)
   11020:	2200      	movs	r2, #0
   11022:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   11024:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   11026:	07c3      	lsls	r3, r0, #31
   11028:	d504      	bpl.n	11034 <ll_filters_scan_update+0x18>
   1102a:	f7fe fd35 	bl	fa98 <radio_adv_filter_pol_get>
   1102e:	b908      	cbnz	r0, 11034 <ll_filters_scan_update+0x18>
		filter_wl_update();
   11030:	f7ff fe3a 	bl	10ca8 <filter_wl_update>
	filter->enable_bitmask = 0;
   11034:	4b08      	ldr	r3, [pc, #32]	; (11058 <ll_filters_scan_update+0x3c>)
   11036:	2200      	movs	r2, #0
   11038:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1103a:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   1103c:	4b07      	ldr	r3, [pc, #28]	; (1105c <ll_filters_scan_update+0x40>)
   1103e:	781b      	ldrb	r3, [r3, #0]
   11040:	b133      	cbz	r3, 11050 <ll_filters_scan_update+0x34>
   11042:	f7fe fd21 	bl	fa88 <ll_adv_is_enabled>
   11046:	b918      	cbnz	r0, 11050 <ll_filters_scan_update+0x34>
}
   11048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   1104c:	f7ff be78 	b.w	10d40 <filter_rl_update>
   11050:	bd08      	pop	{r3, pc}
   11052:	bf00      	nop
   11054:	20001467 	.word	0x20001467
   11058:	200013f5 	.word	0x200013f5
   1105c:	200013f4 	.word	0x200013f4

00011060 <ll_rl_find>:
{
   11060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11064:	468a      	mov	sl, r1
	if (free) {
   11066:	4614      	mov	r4, r2
   11068:	b10a      	cbz	r2, 1106e <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1106a:	23ff      	movs	r3, #255	; 0xff
   1106c:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1106e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 110c4 <ll_rl_find+0x64>
{
   11072:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   11074:	f000 0901 	and.w	r9, r0, #1
   11078:	2628      	movs	r6, #40	; 0x28
   1107a:	436e      	muls	r6, r5
   1107c:	b2ef      	uxtb	r7, r5
   1107e:	f818 3006 	ldrb.w	r3, [r8, r6]
   11082:	07da      	lsls	r2, r3, #31
   11084:	d51a      	bpl.n	110bc <ll_rl_find+0x5c>
   11086:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1108a:	454b      	cmp	r3, r9
   1108c:	d10f      	bne.n	110ae <ll_rl_find+0x4e>
   1108e:	1c70      	adds	r0, r6, #1
   11090:	2206      	movs	r2, #6
   11092:	4651      	mov	r1, sl
   11094:	4440      	add	r0, r8
   11096:	f7f0 fd9c 	bl	1bd2 <memcmp>
   1109a:	b160      	cbz	r0, 110b6 <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1109c:	b13c      	cbz	r4, 110ae <ll_rl_find+0x4e>
   1109e:	f818 3006 	ldrb.w	r3, [r8, r6]
   110a2:	07db      	lsls	r3, r3, #31
   110a4:	d403      	bmi.n	110ae <ll_rl_find+0x4e>
   110a6:	7823      	ldrb	r3, [r4, #0]
   110a8:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   110aa:	bf08      	it	eq
   110ac:	7027      	strbeq	r7, [r4, #0]
   110ae:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   110b0:	2d08      	cmp	r5, #8
   110b2:	d1e1      	bne.n	11078 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   110b4:	27ff      	movs	r7, #255	; 0xff
}
   110b6:	4638      	mov	r0, r7
   110b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   110bc:	2c00      	cmp	r4, #0
   110be:	d1f2      	bne.n	110a6 <ll_rl_find+0x46>
   110c0:	e7f5      	b.n	110ae <ll_rl_find+0x4e>
   110c2:	bf00      	nop
   110c4:	200012b4 	.word	0x200012b4

000110c8 <ll_wl_add>:
{
   110c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   110cc:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   110ce:	f7fe fce3 	bl	fa98 <radio_adv_filter_pol_get>
   110d2:	4605      	mov	r5, r0
   110d4:	b120      	cbz	r0, 110e0 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   110d6:	250c      	movs	r5, #12
}
   110d8:	4628      	mov	r0, r5
   110da:	b002      	add	sp, #8
   110dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   110e0:	f7fe fcfc 	bl	fadc <radio_scan_filter_pol_get>
   110e4:	07c3      	lsls	r3, r0, #31
   110e6:	d4f6      	bmi.n	110d6 <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   110e8:	7838      	ldrb	r0, [r7, #0]
   110ea:	28ff      	cmp	r0, #255	; 0xff
   110ec:	d103      	bne.n	110f6 <ll_wl_add+0x2e>
		wl_anon = 1;
   110ee:	4b1f      	ldr	r3, [pc, #124]	; (1116c <ll_wl_add+0xa4>)
   110f0:	2201      	movs	r2, #1
   110f2:	701a      	strb	r2, [r3, #0]
		return 0;
   110f4:	e7f0      	b.n	110d8 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   110f6:	f107 0801 	add.w	r8, r7, #1
   110fa:	f10d 0207 	add.w	r2, sp, #7
   110fe:	4641      	mov	r1, r8
   11100:	f7ff fda0 	bl	10c44 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   11104:	2807      	cmp	r0, #7
   11106:	d92d      	bls.n	11164 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   11108:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1110c:	2e07      	cmp	r6, #7
   1110e:	d82b      	bhi.n	11168 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   11110:	4c17      	ldr	r4, [pc, #92]	; (11170 <ll_wl_add+0xa8>)
   11112:	783a      	ldrb	r2, [r7, #0]
   11114:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   11118:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   1111c:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   11120:	4641      	mov	r1, r8
   11122:	2206      	movs	r2, #6
   11124:	3002      	adds	r0, #2
   11126:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   1112a:	f7f0 fd67 	bl	1bfc <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1112e:	462a      	mov	r2, r5
   11130:	4641      	mov	r1, r8
   11132:	7838      	ldrb	r0, [r7, #0]
   11134:	f7ff ff94 	bl	11060 <ll_rl_find>
   11138:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   1113a:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   1113c:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   1113e:	d80e      	bhi.n	1115e <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   11140:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   11142:	2328      	movs	r3, #40	; 0x28
   11144:	4a0b      	ldr	r2, [pc, #44]	; (11174 <ll_wl_add+0xac>)
   11146:	4358      	muls	r0, r3
   11148:	5c13      	ldrb	r3, [r2, r0]
   1114a:	f043 0320 	orr.w	r3, r3, #32
   1114e:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   11150:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   11154:	f043 0301 	orr.w	r3, r3, #1
   11158:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   1115c:	e7bc      	b.n	110d8 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1115e:	22ff      	movs	r2, #255	; 0xff
   11160:	705a      	strb	r2, [r3, #1]
   11162:	e7f5      	b.n	11150 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   11164:	2512      	movs	r5, #18
   11166:	e7b7      	b.n	110d8 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11168:	2507      	movs	r5, #7
	return wl_add(addr);
   1116a:	e7b5      	b.n	110d8 <ll_wl_add+0x10>
   1116c:	20001918 	.word	0x20001918
   11170:	20001427 	.word	0x20001427
   11174:	200012b4 	.word	0x200012b4

00011178 <ctrl_rl_idx_allowed>:
{
   11178:	b507      	push	{r0, r1, r2, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1117a:	4b12      	ldr	r3, [pc, #72]	; (111c4 <ctrl_rl_idx_allowed+0x4c>)
   1117c:	781b      	ldrb	r3, [r3, #0]
   1117e:	b1f3      	cbz	r3, 111be <ctrl_rl_idx_allowed+0x46>
   11180:	2907      	cmp	r1, #7
   11182:	d81c      	bhi.n	111be <ctrl_rl_idx_allowed+0x46>
   11184:	b9d8      	cbnz	r0, 111be <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   11186:	2328      	movs	r3, #40	; 0x28
   11188:	4359      	muls	r1, r3
   1118a:	4b0f      	ldr	r3, [pc, #60]	; (111c8 <ctrl_rl_idx_allowed+0x50>)
   1118c:	5c58      	ldrb	r0, [r3, r1]
   1118e:	07c2      	lsls	r2, r0, #31
   11190:	d40e      	bmi.n	111b0 <ctrl_rl_idx_allowed+0x38>
   11192:	4b0e      	ldr	r3, [pc, #56]	; (111cc <ctrl_rl_idx_allowed+0x54>)
   11194:	9301      	str	r3, [sp, #4]
   11196:	9300      	str	r3, [sp, #0]
   11198:	4a0d      	ldr	r2, [pc, #52]	; (111d0 <ctrl_rl_idx_allowed+0x58>)
   1119a:	4b0e      	ldr	r3, [pc, #56]	; (111d4 <ctrl_rl_idx_allowed+0x5c>)
   1119c:	490e      	ldr	r1, [pc, #56]	; (111d8 <ctrl_rl_idx_allowed+0x60>)
   1119e:	480f      	ldr	r0, [pc, #60]	; (111dc <ctrl_rl_idx_allowed+0x64>)
   111a0:	f7ef fef4 	bl	f8c <printk>
   111a4:	4040      	eors	r0, r0
   111a6:	f380 8811 	msr	BASEPRI, r0
   111aa:	f04f 0004 	mov.w	r0, #4
   111ae:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   111b0:	0743      	lsls	r3, r0, #29
   111b2:	d504      	bpl.n	111be <ctrl_rl_idx_allowed+0x46>
   111b4:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   111b8:	b003      	add	sp, #12
   111ba:	f85d fb04 	ldr.w	pc, [sp], #4
		return true;
   111be:	2001      	movs	r0, #1
   111c0:	e7fa      	b.n	111b8 <ctrl_rl_idx_allowed+0x40>
   111c2:	bf00      	nop
   111c4:	200013f4 	.word	0x200013f4
   111c8:	200012b4 	.word	0x200012b4
   111cc:	000142a9 	.word	0x000142a9
   111d0:	00014ff8 	.word	0x00014ff8
   111d4:	000172ab 	.word	0x000172ab
   111d8:	00015047 	.word	0x00015047
   111dc:	000172e2 	.word	0x000172e2

000111e0 <ll_rl_id_addr_get>:
{
   111e0:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   111e2:	2b07      	cmp	r3, #7
{
   111e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   111e6:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   111e8:	d90e      	bls.n	11208 <ll_rl_id_addr_get+0x28>
   111ea:	4b15      	ldr	r3, [pc, #84]	; (11240 <ll_rl_id_addr_get+0x60>)
   111ec:	9301      	str	r3, [sp, #4]
   111ee:	9300      	str	r3, [sp, #0]
   111f0:	4a14      	ldr	r2, [pc, #80]	; (11244 <ll_rl_id_addr_get+0x64>)
   111f2:	4b15      	ldr	r3, [pc, #84]	; (11248 <ll_rl_id_addr_get+0x68>)
   111f4:	4915      	ldr	r1, [pc, #84]	; (1124c <ll_rl_id_addr_get+0x6c>)
   111f6:	4816      	ldr	r0, [pc, #88]	; (11250 <ll_rl_id_addr_get+0x70>)
	LL_ASSERT(rl[rl_idx].taken);
   111f8:	f7ef fec8 	bl	f8c <printk>
   111fc:	4040      	eors	r0, r0
   111fe:	f380 8811 	msr	BASEPRI, r0
   11202:	f04f 0004 	mov.w	r0, #4
   11206:	df02      	svc	2
   11208:	2528      	movs	r5, #40	; 0x28
   1120a:	4c12      	ldr	r4, [pc, #72]	; (11254 <ll_rl_id_addr_get+0x74>)
   1120c:	fb05 f203 	mul.w	r2, r5, r3
   11210:	5ca2      	ldrb	r2, [r4, r2]
   11212:	f012 0f01 	tst.w	r2, #1
   11216:	d107      	bne.n	11228 <ll_rl_id_addr_get+0x48>
   11218:	4b09      	ldr	r3, [pc, #36]	; (11240 <ll_rl_id_addr_get+0x60>)
   1121a:	9301      	str	r3, [sp, #4]
   1121c:	9300      	str	r3, [sp, #0]
   1121e:	4a09      	ldr	r2, [pc, #36]	; (11244 <ll_rl_id_addr_get+0x64>)
   11220:	4b09      	ldr	r3, [pc, #36]	; (11248 <ll_rl_id_addr_get+0x68>)
   11222:	490a      	ldr	r1, [pc, #40]	; (1124c <ll_rl_id_addr_get+0x6c>)
   11224:	480c      	ldr	r0, [pc, #48]	; (11258 <ll_rl_id_addr_get+0x78>)
   11226:	e7e7      	b.n	111f8 <ll_rl_id_addr_get+0x18>
	*id_addr_type = rl[rl_idx].id_addr_type;
   11228:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1122c:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1122e:	fb05 4103 	mla	r1, r5, r3, r4
   11232:	2206      	movs	r2, #6
   11234:	3101      	adds	r1, #1
}
   11236:	b003      	add	sp, #12
   11238:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1123c:	f7f0 bcde 	b.w	1bfc <memcpy>
   11240:	000142a9 	.word	0x000142a9
   11244:	00014ff8 	.word	0x00014ff8
   11248:	000172bf 	.word	0x000172bf
   1124c:	00015047 	.word	0x00015047
   11250:	00017577 	.word	0x00017577
   11254:	200012b4 	.word	0x200012b4
   11258:	000172e2 	.word	0x000172e2

0001125c <ctrl_rl_addr_allowed>:
{
   1125c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   11260:	4b1a      	ldr	r3, [pc, #104]	; (112cc <ctrl_rl_addr_allowed+0x70>)
   11262:	781b      	ldrb	r3, [r3, #0]
   11264:	b37b      	cbz	r3, 112c6 <ctrl_rl_addr_allowed+0x6a>
   11266:	7813      	ldrb	r3, [r2, #0]
   11268:	2bff      	cmp	r3, #255	; 0xff
   1126a:	d12c      	bne.n	112c6 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1126c:	4e18      	ldr	r6, [pc, #96]	; (112d0 <ctrl_rl_addr_allowed+0x74>)
   1126e:	2400      	movs	r4, #0
   11270:	f04f 0828 	mov.w	r8, #40	; 0x28
   11274:	46b6      	mov	lr, r6
   11276:	fb08 f304 	mul.w	r3, r8, r4
   1127a:	fa5f fc84 	uxtb.w	ip, r4
   1127e:	5cf7      	ldrb	r7, [r6, r3]
   11280:	f017 0f01 	tst.w	r7, #1
   11284:	eb06 0503 	add.w	r5, r6, r3
   11288:	d01a      	beq.n	112c0 <ctrl_rl_addr_allowed+0x64>
   1128a:	f3c7 1780 	ubfx	r7, r7, #6, #1
   1128e:	4287      	cmp	r7, r0
   11290:	d116      	bne.n	112c0 <ctrl_rl_addr_allowed+0x64>
   11292:	3306      	adds	r3, #6
   11294:	1e4f      	subs	r7, r1, #1
   11296:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   11298:	f815 af01 	ldrb.w	sl, [r5, #1]!
   1129c:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   112a0:	45ca      	cmp	sl, r9
   112a2:	d10d      	bne.n	112c0 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   112a4:	429d      	cmp	r5, r3
   112a6:	d1f7      	bne.n	11298 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   112a8:	2328      	movs	r3, #40	; 0x28
   112aa:	435c      	muls	r4, r3
				*rl_idx = i;
   112ac:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   112b0:	f81e 0004 	ldrb.w	r0, [lr, r4]
   112b4:	0743      	lsls	r3, r0, #29
   112b6:	d506      	bpl.n	112c6 <ctrl_rl_addr_allowed+0x6a>
   112b8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   112bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   112c0:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   112c2:	2c08      	cmp	r4, #8
   112c4:	d1d7      	bne.n	11276 <ctrl_rl_addr_allowed+0x1a>
   112c6:	2001      	movs	r0, #1
}
   112c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   112cc:	200013f4 	.word	0x200013f4
   112d0:	200012b4 	.word	0x200012b4

000112d4 <ctrl_rl_addr_resolve>:
{
   112d4:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   112d6:	4c0d      	ldr	r4, [pc, #52]	; (1130c <ctrl_rl_addr_resolve+0x38>)
   112d8:	7824      	ldrb	r4, [r4, #0]
   112da:	b1a4      	cbz	r4, 11306 <ctrl_rl_addr_resolve+0x32>
   112dc:	2a07      	cmp	r2, #7
   112de:	d812      	bhi.n	11306 <ctrl_rl_addr_resolve+0x32>
   112e0:	2528      	movs	r5, #40	; 0x28
   112e2:	4c0b      	ldr	r4, [pc, #44]	; (11310 <ctrl_rl_addr_resolve+0x3c>)
   112e4:	fb05 f602 	mul.w	r6, r5, r2
   112e8:	5da6      	ldrb	r6, [r4, r6]
   112ea:	0736      	lsls	r6, r6, #28
   112ec:	d50b      	bpl.n	11306 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   112ee:	b150      	cbz	r0, 11306 <ctrl_rl_addr_resolve+0x32>
   112f0:	794b      	ldrb	r3, [r1, #5]
   112f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   112f6:	2b40      	cmp	r3, #64	; 0x40
   112f8:	d105      	bne.n	11306 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   112fa:	fb05 4202 	mla	r2, r5, r2, r4
   112fe:	1dd0      	adds	r0, r2, #7
}
   11300:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   11302:	f7f0 bd90 	b.w	1e26 <bt_rpa_irk_matches>
}
   11306:	2000      	movs	r0, #0
   11308:	bc70      	pop	{r4, r5, r6}
   1130a:	4770      	bx	lr
   1130c:	200013f4 	.word	0x200013f4
   11310:	200012b4 	.word	0x200012b4

00011314 <ctrl_rl_enabled>:
	return rl_enable;
   11314:	4b02      	ldr	r3, [pc, #8]	; (11320 <ctrl_rl_enabled+0xc>)
   11316:	7818      	ldrb	r0, [r3, #0]
}
   11318:	3000      	adds	r0, #0
   1131a:	bf18      	it	ne
   1131c:	2001      	movne	r0, #1
   1131e:	4770      	bx	lr
   11320:	200013f4 	.word	0x200013f4

00011324 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   11324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11328:	b089      	sub	sp, #36	; 0x24
   1132a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   1132c:	f002 fa62 	bl	137f4 <_impl_k_uptime_get>
   11330:	4680      	mov	r8, r0
   11332:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   11334:	2c00      	cmp	r4, #0
   11336:	d148      	bne.n	113ca <ll_rl_rpa_update+0xa6>
   11338:	4b3b      	ldr	r3, [pc, #236]	; (11428 <ll_rl_rpa_update+0x104>)
   1133a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1133e:	1c5c      	adds	r4, r3, #1
   11340:	bf08      	it	eq
   11342:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   11346:	d040      	beq.n	113ca <ll_rl_rpa_update+0xa6>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   11348:	1a82      	subs	r2, r0, r2
   1134a:	eb61 0303 	sbc.w	r3, r1, r3
   1134e:	4937      	ldr	r1, [pc, #220]	; (1142c <ll_rl_rpa_update+0x108>)
   11350:	6808      	ldr	r0, [r1, #0]
   11352:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   11354:	4282      	cmp	r2, r0
   11356:	418b      	sbcs	r3, r1
   11358:	bfac      	ite	ge
   1135a:	2601      	movge	r6, #1
   1135c:	2600      	movlt	r6, #0
   1135e:	4d34      	ldr	r5, [pc, #208]	; (11430 <ll_rl_rpa_update+0x10c>)
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11360:	f1a5 0b07 	sub.w	fp, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   11364:	2400      	movs	r4, #0
   11366:	465f      	mov	r7, fp
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11368:	2328      	movs	r3, #40	; 0x28
   1136a:	4363      	muls	r3, r4
   1136c:	f81b 3003 	ldrb.w	r3, [fp, r3]
   11370:	07d8      	lsls	r0, r3, #31
   11372:	d54d      	bpl.n	11410 <ll_rl_rpa_update+0xec>
   11374:	b90e      	cbnz	r6, 1137a <ll_rl_rpa_update+0x56>
   11376:	0799      	lsls	r1, r3, #30
   11378:	d44a      	bmi.n	11410 <ll_rl_rpa_update+0xec>

			if (rl[i].pirk) {
   1137a:	2328      	movs	r3, #40	; 0x28
   1137c:	4363      	muls	r3, r4
   1137e:	5cfb      	ldrb	r3, [r7, r3]
   11380:	075a      	lsls	r2, r3, #29
   11382:	d524      	bpl.n	113ce <ll_rl_rpa_update+0xaa>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   11384:	7c2a      	ldrb	r2, [r5, #16]
   11386:	4b2b      	ldr	r3, [pc, #172]	; (11434 <ll_rl_rpa_update+0x110>)
   11388:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1138c:	f103 0210 	add.w	r2, r3, #16
   11390:	f10d 010f 	add.w	r1, sp, #15
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   11394:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   11398:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   1139c:	429a      	cmp	r2, r3
   1139e:	d1f9      	bne.n	11394 <ll_rl_rpa_update+0x70>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   113a0:	f105 0117 	add.w	r1, r5, #23
   113a4:	a804      	add	r0, sp, #16
   113a6:	f7f0 fd51 	bl	1e4c <bt_rpa_create>
				LL_ASSERT(!err);
   113aa:	b180      	cbz	r0, 113ce <ll_rl_rpa_update+0xaa>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   113ac:	4b22      	ldr	r3, [pc, #136]	; (11438 <ll_rl_rpa_update+0x114>)
   113ae:	9301      	str	r3, [sp, #4]
   113b0:	9300      	str	r3, [sp, #0]
   113b2:	4a22      	ldr	r2, [pc, #136]	; (1143c <ll_rl_rpa_update+0x118>)
   113b4:	4b22      	ldr	r3, [pc, #136]	; (11440 <ll_rl_rpa_update+0x11c>)
   113b6:	4923      	ldr	r1, [pc, #140]	; (11444 <ll_rl_rpa_update+0x120>)
   113b8:	4823      	ldr	r0, [pc, #140]	; (11448 <ll_rl_rpa_update+0x124>)
   113ba:	f7ef fde7 	bl	f8c <printk>
   113be:	4040      	eors	r0, r0
   113c0:	f380 8811 	msr	BASEPRI, r0
   113c4:	f04f 0004 	mov.w	r0, #4
   113c8:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   113ca:	2601      	movs	r6, #1
   113cc:	e7c7      	b.n	1135e <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
   113ce:	2328      	movs	r3, #40	; 0x28
   113d0:	4363      	muls	r3, r4
   113d2:	5cfb      	ldrb	r3, [r7, r3]
   113d4:	071b      	lsls	r3, r3, #28
   113d6:	d515      	bpl.n	11404 <ll_rl_rpa_update+0xe0>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   113d8:	f10d 0a10 	add.w	sl, sp, #16
   113dc:	4651      	mov	r1, sl
   113de:	4628      	mov	r0, r5
   113e0:	f7f0 fd34 	bl	1e4c <bt_rpa_create>
				LL_ASSERT(!err);
   113e4:	2800      	cmp	r0, #0
   113e6:	d1e1      	bne.n	113ac <ll_rl_rpa_update+0x88>
   113e8:	4b18      	ldr	r3, [pc, #96]	; (1144c <ll_rl_rpa_update+0x128>)
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   113ea:	f8c5 a01d 	str.w	sl, [r5, #29]
   113ee:	2206      	movs	r2, #6
   113f0:	fb02 3304 	mla	r3, r2, r4, r3
   113f4:	4618      	mov	r0, r3
   113f6:	4651      	mov	r1, sl
   113f8:	9303      	str	r3, [sp, #12]
   113fa:	f7f0 fbff 	bl	1bfc <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   113fe:	9b03      	ldr	r3, [sp, #12]
   11400:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   11404:	2328      	movs	r3, #40	; 0x28
   11406:	4363      	muls	r3, r4
   11408:	5cfa      	ldrb	r2, [r7, r3]
   1140a:	f042 0202 	orr.w	r2, r2, #2
   1140e:	54fa      	strb	r2, [r7, r3]
   11410:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11412:	2c08      	cmp	r4, #8
   11414:	f105 0528 	add.w	r5, r5, #40	; 0x28
   11418:	d1a6      	bne.n	11368 <ll_rl_rpa_update+0x44>
		}
	}

	if (all) {
   1141a:	b116      	cbz	r6, 11422 <ll_rl_rpa_update+0xfe>
		rpa_last_ms = now;
   1141c:	4b02      	ldr	r3, [pc, #8]	; (11428 <ll_rl_rpa_update+0x104>)
   1141e:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   11422:	b009      	add	sp, #36	; 0x24
   11424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11428:	20001910 	.word	0x20001910
   1142c:	20001944 	.word	0x20001944
   11430:	200012bb 	.word	0x200012bb
   11434:	20001233 	.word	0x20001233
   11438:	000142a9 	.word	0x000142a9
   1143c:	00014ff8 	.word	0x00014ff8
   11440:	000172d1 	.word	0x000172d1
   11444:	00015047 	.word	0x00015047
   11448:	0001721f 	.word	0x0001721f
   1144c:	200011fa 	.word	0x200011fa

00011450 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   11450:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   11452:	2001      	movs	r0, #1
   11454:	f7ff ff66 	bl	11324 <ll_rl_rpa_update>
   11458:	4b03      	ldr	r3, [pc, #12]	; (11468 <rpa_timeout+0x18>)
   1145a:	4904      	ldr	r1, [pc, #16]	; (1146c <rpa_timeout+0x1c>)
   1145c:	681a      	ldr	r2, [r3, #0]
   1145e:	4804      	ldr	r0, [pc, #16]	; (11470 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   11460:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11464:	f002 bcc4 	b.w	13df0 <k_delayed_work_submit_to_queue>
   11468:	20001944 	.word	0x20001944
   1146c:	2000191c 	.word	0x2000191c
   11470:	20001988 	.word	0x20001988

00011474 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   11474:	4b07      	ldr	r3, [pc, #28]	; (11494 <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   11476:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   11478:	b130      	cbz	r0, 11488 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   1147a:	b14b      	cbz	r3, 11490 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   1147c:	4b06      	ldr	r3, [pc, #24]	; (11498 <ll_adv_scan_state_cb+0x24>)
   1147e:	4907      	ldr	r1, [pc, #28]	; (1149c <ll_adv_scan_state_cb+0x28>)
   11480:	681a      	ldr	r2, [r3, #0]
   11482:	4807      	ldr	r0, [pc, #28]	; (114a0 <ll_adv_scan_state_cb+0x2c>)
   11484:	f002 bcb4 	b.w	13df0 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   11488:	b113      	cbz	r3, 11490 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   1148a:	4804      	ldr	r0, [pc, #16]	; (1149c <ll_adv_scan_state_cb+0x28>)
   1148c:	f002 bc4c 	b.w	13d28 <k_delayed_work_cancel>
   11490:	4770      	bx	lr
   11492:	bf00      	nop
   11494:	200013f4 	.word	0x200013f4
   11498:	20001944 	.word	0x20001944
   1149c:	2000191c 	.word	0x2000191c
   114a0:	20001988 	.word	0x20001988

000114a4 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   114a4:	2008      	movs	r0, #8
   114a6:	4770      	bx	lr

000114a8 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   114a8:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   114aa:	f7ff fc3d 	bl	10d28 <rl_access_check.constprop.1>
   114ae:	b178      	cbz	r0, 114d0 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   114b0:	4908      	ldr	r1, [pc, #32]	; (114d4 <ll_rl_clear+0x2c>)
   114b2:	2300      	movs	r3, #0
   114b4:	2428      	movs	r4, #40	; 0x28
   114b6:	fb04 f203 	mul.w	r2, r4, r3
   114ba:	3301      	adds	r3, #1
   114bc:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   114be:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   114c0:	f36f 0000 	bfc	r0, #0, #1
   114c4:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   114c6:	d1f6      	bne.n	114b6 <ll_rl_clear+0xe>
	peer_irk_count = 0;
   114c8:	4b03      	ldr	r3, [pc, #12]	; (114d8 <ll_rl_clear+0x30>)
   114ca:	2000      	movs	r0, #0
   114cc:	7018      	strb	r0, [r3, #0]
   114ce:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   114d0:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   114d2:	bd10      	pop	{r4, pc}
   114d4:	200012b4 	.word	0x200012b4
   114d8:	2000122a 	.word	0x2000122a

000114dc <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   114dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114e0:	b085      	sub	sp, #20
   114e2:	4607      	mov	r7, r0
   114e4:	4689      	mov	r9, r1
   114e6:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   114e8:	f7ff fc1e 	bl	10d28 <rl_access_check.constprop.1>
   114ec:	2800      	cmp	r0, #0
   114ee:	f000 8086 	beq.w	115fe <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   114f2:	f107 0801 	add.w	r8, r7, #1
   114f6:	f10d 020f 	add.w	r2, sp, #15
   114fa:	4641      	mov	r1, r8
   114fc:	7838      	ldrb	r0, [r7, #0]
   114fe:	f7ff fdaf 	bl	11060 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   11502:	2807      	cmp	r0, #7
   11504:	d97d      	bls.n	11602 <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   11506:	f89d 500f 	ldrb.w	r5, [sp, #15]
   1150a:	2d07      	cmp	r5, #7
   1150c:	d87b      	bhi.n	11606 <ll_rl_add+0x12a>
   1150e:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   11512:	4c3e      	ldr	r4, [pc, #248]	; (1160c <ll_rl_add+0x130>)
   11514:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   11518:	2628      	movs	r6, #40	; 0x28
   1151a:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1151c:	f10b 0001 	add.w	r0, fp, #1
   11520:	2206      	movs	r2, #6
   11522:	4641      	mov	r1, r8
   11524:	4420      	add	r0, r4
   11526:	f7f0 fb69 	bl	1bfc <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1152a:	7839      	ldrb	r1, [r7, #0]
   1152c:	5da3      	ldrb	r3, [r4, r6]
   1152e:	19a2      	adds	r2, r4, r6
   11530:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11534:	4648      	mov	r0, r9
   11536:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   11538:	9201      	str	r2, [sp, #4]
   1153a:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1153c:	f7f5 fa1f 	bl	697e <mem_nz>
   11540:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11542:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11544:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11548:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1154a:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1154c:	f7f5 fa17 	bl	697e <mem_nz>
   11550:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   11552:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11554:	f000 0001 	and.w	r0, r0, #1
   11558:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   1155c:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11560:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   11562:	d138      	bne.n	115d6 <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   11564:	b158      	cbz	r0, 1157e <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   11566:	f10b 0007 	add.w	r0, fp, #7
   1156a:	2210      	movs	r2, #16
   1156c:	4651      	mov	r1, sl
   1156e:	4420      	add	r0, r4
   11570:	f7f0 fb44 	bl	1bfc <memcpy>
		rl[i].local_rpa = NULL;
   11574:	2328      	movs	r3, #40	; 0x28
   11576:	fb03 4305 	mla	r3, r3, r5, r4
   1157a:	2200      	movs	r2, #0
   1157c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   1157e:	2628      	movs	r6, #40	; 0x28
   11580:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   11582:	f10b 0018 	add.w	r0, fp, #24
   11586:	2206      	movs	r2, #6
   11588:	2100      	movs	r1, #0
   1158a:	4420      	add	r0, r4
   1158c:	f7f0 fb62 	bl	1c54 <memset>
	rl[i].rpas_ready = 0;
   11590:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   11592:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   11596:	f36f 1304 	bfc	r3, #4, #1
   1159a:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1159c:	2200      	movs	r2, #0
   1159e:	4641      	mov	r1, r8
   115a0:	7838      	ldrb	r0, [r7, #0]
   115a2:	f7ff fb4f 	bl	10c44 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   115a6:	2807      	cmp	r0, #7
   115a8:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   115aa:	bf9d      	ittte	ls
   115ac:	4a18      	ldrls	r2, [pc, #96]	; (11610 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   115ae:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   115b2:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   115b6:	f36f 1345 	bfchi	r3, #5, #1
   115ba:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   115bc:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   115c0:	bf98      	it	ls
   115c2:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   115c4:	435d      	muls	r5, r3

	return 0;
   115c6:	2000      	movs	r0, #0
	rl[i].taken = 1;
   115c8:	5d63      	ldrb	r3, [r4, r5]
   115ca:	f043 0301 	orr.w	r3, r3, #1
   115ce:	5563      	strb	r3, [r4, r5]
}
   115d0:	b005      	add	sp, #20
   115d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   115d6:	4b0f      	ldr	r3, [pc, #60]	; (11614 <ll_rl_add+0x138>)
   115d8:	7819      	ldrb	r1, [r3, #0]
   115da:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   115dc:	4a0e      	ldr	r2, [pc, #56]	; (11618 <ll_rl_add+0x13c>)
   115de:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   115e0:	1c4a      	adds	r2, r1, #1
   115e2:	701a      	strb	r2, [r3, #0]
   115e4:	4b0d      	ldr	r3, [pc, #52]	; (1161c <ll_rl_add+0x140>)
   115e6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   115ea:	f109 0210 	add.w	r2, r9, #16
   115ee:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   115f0:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   115f4:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   115f8:	454a      	cmp	r2, r9
   115fa:	d1f9      	bne.n	115f0 <ll_rl_add+0x114>
   115fc:	e7b2      	b.n	11564 <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   115fe:	200c      	movs	r0, #12
   11600:	e7e6      	b.n	115d0 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   11602:	2012      	movs	r0, #18
   11604:	e7e4      	b.n	115d0 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11606:	2007      	movs	r0, #7
   11608:	e7e2      	b.n	115d0 <ll_rl_add+0xf4>
   1160a:	bf00      	nop
   1160c:	200012b4 	.word	0x200012b4
   11610:	20001427 	.word	0x20001427
   11614:	2000122a 	.word	0x2000122a
   11618:	2000122b 	.word	0x2000122b
   1161c:	20001233 	.word	0x20001233

00011620 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   11620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11624:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   11626:	f7ff fb7f 	bl	10d28 <rl_access_check.constprop.1>
   1162a:	2800      	cmp	r0, #0
   1162c:	d053      	beq.n	116d6 <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1162e:	f109 0a01 	add.w	sl, r9, #1
   11632:	2200      	movs	r2, #0
   11634:	4651      	mov	r1, sl
   11636:	f899 0000 	ldrb.w	r0, [r9]
   1163a:	f7ff fd11 	bl	11060 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1163e:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11640:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   11642:	d84b      	bhi.n	116dc <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   11644:	f04f 0b28 	mov.w	fp, #40	; 0x28
   11648:	4c26      	ldr	r4, [pc, #152]	; (116e4 <ll_rl_remove+0xc4>)
   1164a:	fb0b f300 	mul.w	r3, fp, r0
   1164e:	18e2      	adds	r2, r4, r3
   11650:	5ce3      	ldrb	r3, [r4, r3]
   11652:	075b      	lsls	r3, r3, #29
   11654:	d524      	bpl.n	116a0 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   11656:	4e24      	ldr	r6, [pc, #144]	; (116e8 <ll_rl_remove+0xc8>)
   11658:	7835      	ldrb	r5, [r6, #0]
   1165a:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   1165c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   11660:	d01b      	beq.n	1169a <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   11662:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   11664:	42af      	cmp	r7, r5
   11666:	d018      	beq.n	1169a <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   11668:	4820      	ldr	r0, [pc, #128]	; (116ec <ll_rl_remove+0xcc>)
   1166a:	2210      	movs	r2, #16
   1166c:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   11670:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   11674:	f7f0 fac2 	bl	1bfc <memcpy>
   11678:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   1167a:	fb0b f103 	mul.w	r1, fp, r3
   1167e:	1862      	adds	r2, r4, r1
   11680:	5c61      	ldrb	r1, [r4, r1]
   11682:	f011 0f01 	tst.w	r1, #1
   11686:	b2d8      	uxtb	r0, r3
   11688:	d021      	beq.n	116ce <ll_rl_remove+0xae>
   1168a:	0749      	lsls	r1, r1, #29
   1168c:	d51f      	bpl.n	116ce <ll_rl_remove+0xae>
   1168e:	7dd1      	ldrb	r1, [r2, #23]
   11690:	42a9      	cmp	r1, r5
   11692:	d11c      	bne.n	116ce <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   11694:	4b16      	ldr	r3, [pc, #88]	; (116f0 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   11696:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   11698:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   1169a:	7833      	ldrb	r3, [r6, #0]
   1169c:	3b01      	subs	r3, #1
   1169e:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   116a0:	2200      	movs	r2, #0
   116a2:	4651      	mov	r1, sl
   116a4:	f899 0000 	ldrb.w	r0, [r9]
   116a8:	f7ff facc 	bl	10c44 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   116ac:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   116ae:	bf9f      	itttt	ls
   116b0:	4b10      	ldrls	r3, [pc, #64]	; (116f4 <ll_rl_remove+0xd4>)
   116b2:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   116b6:	23ff      	movls	r3, #255	; 0xff
   116b8:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   116ba:	2028      	movs	r0, #40	; 0x28
   116bc:	fb00 f008 	mul.w	r0, r0, r8
   116c0:	5c23      	ldrb	r3, [r4, r0]
   116c2:	f36f 0300 	bfc	r3, #0, #1
   116c6:	5423      	strb	r3, [r4, r0]
		return 0;
   116c8:	2000      	movs	r0, #0
   116ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116ce:	3301      	adds	r3, #1
				for (k = 0;
   116d0:	2b08      	cmp	r3, #8
   116d2:	d1d2      	bne.n	1167a <ll_rl_remove+0x5a>
   116d4:	e7e1      	b.n	1169a <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   116d6:	200c      	movs	r0, #12
   116d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   116dc:	2002      	movs	r0, #2
}
   116de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116e2:	bf00      	nop
   116e4:	200012b4 	.word	0x200012b4
   116e8:	2000122a 	.word	0x2000122a
   116ec:	20001233 	.word	0x20001233
   116f0:	2000122b 	.word	0x2000122b
   116f4:	20001427 	.word	0x20001427

000116f8 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   116f8:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   116fa:	795c      	ldrb	r4, [r3, #5]
   116fc:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   11700:	2c40      	cmp	r4, #64	; 0x40
{
   11702:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   11704:	d117      	bne.n	11736 <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   11706:	b119      	cbz	r1, 11710 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   11708:	2200      	movs	r2, #0
   1170a:	f7ff fca9 	bl	11060 <ll_rl_find>
   1170e:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   11710:	2a07      	cmp	r2, #7
   11712:	d810      	bhi.n	11736 <ll_rl_crpa_set+0x3e>
   11714:	2128      	movs	r1, #40	; 0x28
   11716:	4c08      	ldr	r4, [pc, #32]	; (11738 <ll_rl_crpa_set+0x40>)
   11718:	fb01 f302 	mul.w	r3, r1, r2
   1171c:	5ce3      	ldrb	r3, [r4, r3]
   1171e:	07db      	lsls	r3, r3, #31
   11720:	d509      	bpl.n	11736 <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   11722:	2018      	movs	r0, #24
   11724:	fb11 0002 	smlabb	r0, r1, r2, r0
   11728:	4420      	add	r0, r4
   1172a:	4629      	mov	r1, r5
   1172c:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   1172e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   11732:	f7f0 ba63 	b.w	1bfc <memcpy>
   11736:	bd70      	pop	{r4, r5, r6, pc}
   11738:	200012b4 	.word	0x200012b4

0001173c <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   1173c:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1173e:	2200      	movs	r2, #0
{
   11740:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11742:	1c41      	adds	r1, r0, #1
   11744:	7800      	ldrb	r0, [r0, #0]
   11746:	f7ff fc8b 	bl	11060 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1174a:	2807      	cmp	r0, #7
   1174c:	d901      	bls.n	11752 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1174e:	2002      	movs	r0, #2
   11750:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   11752:	2428      	movs	r4, #40	; 0x28
   11754:	2318      	movs	r3, #24
   11756:	fb14 3000 	smlabb	r0, r4, r0, r3
   1175a:	4c07      	ldr	r4, [pc, #28]	; (11778 <ll_rl_crpa_get+0x3c>)
   1175c:	4404      	add	r4, r0
   1175e:	2106      	movs	r1, #6
   11760:	4620      	mov	r0, r4
   11762:	f7f5 f90c 	bl	697e <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   11766:	2800      	cmp	r0, #0
   11768:	d0f1      	beq.n	1174e <ll_rl_crpa_get+0x12>
   1176a:	2206      	movs	r2, #6
   1176c:	4621      	mov	r1, r4
   1176e:	4628      	mov	r0, r5
   11770:	f7f0 fa44 	bl	1bfc <memcpy>
			return 0;
   11774:	2000      	movs	r0, #0
}
   11776:	bd38      	pop	{r3, r4, r5, pc}
   11778:	200012b4 	.word	0x200012b4

0001177c <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   1177c:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1177e:	2200      	movs	r2, #0
{
   11780:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11782:	1c41      	adds	r1, r0, #1
   11784:	7800      	ldrb	r0, [r0, #0]
   11786:	f7ff fc6b 	bl	11060 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1178a:	2807      	cmp	r0, #7
   1178c:	d80a      	bhi.n	117a4 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1178e:	4b06      	ldr	r3, [pc, #24]	; (117a8 <ll_rl_lrpa_get+0x2c>)
   11790:	2228      	movs	r2, #40	; 0x28
   11792:	fb02 3000 	mla	r0, r2, r0, r3
   11796:	2206      	movs	r2, #6
   11798:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1179a:	4620      	mov	r0, r4
   1179c:	f7f0 fa2e 	bl	1bfc <memcpy>
		return 0;
   117a0:	2000      	movs	r0, #0
   117a2:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   117a4:	2002      	movs	r0, #2
}
   117a6:	bd10      	pop	{r4, pc}
   117a8:	200012b4 	.word	0x200012b4

000117ac <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   117ac:	b510      	push	{r4, lr}
   117ae:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   117b0:	f7ff faba 	bl	10d28 <rl_access_check.constprop.1>
   117b4:	b140      	cbz	r0, 117c8 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   117b6:	b11c      	cbz	r4, 117c0 <ll_rl_enable+0x14>
   117b8:	2c01      	cmp	r4, #1
   117ba:	d001      	beq.n	117c0 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   117bc:	2012      	movs	r0, #18
	}

	return 0;
}
   117be:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   117c0:	4b02      	ldr	r3, [pc, #8]	; (117cc <ll_rl_enable+0x20>)
   117c2:	701c      	strb	r4, [r3, #0]
	return 0;
   117c4:	2000      	movs	r0, #0
		break;
   117c6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   117c8:	200c      	movs	r0, #12
   117ca:	bd10      	pop	{r4, pc}
   117cc:	200013f4 	.word	0x200013f4

000117d0 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   117d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   117d4:	4358      	muls	r0, r3
   117d6:	4b01      	ldr	r3, [pc, #4]	; (117dc <ll_rl_timeout_set+0xc>)
   117d8:	6018      	str	r0, [r3, #0]
   117da:	4770      	bx	lr
   117dc:	20001944 	.word	0x20001944

000117e0 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   117e0:	b538      	push	{r3, r4, r5, lr}
   117e2:	4605      	mov	r5, r0
   117e4:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   117e6:	f7ff fa9f 	bl	10d28 <rl_access_check.constprop.1>
   117ea:	b1d8      	cbz	r0, 11824 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   117ec:	2200      	movs	r2, #0
   117ee:	1c69      	adds	r1, r5, #1
   117f0:	7828      	ldrb	r0, [r5, #0]
   117f2:	f7ff fc35 	bl	11060 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   117f6:	2807      	cmp	r0, #7
   117f8:	d816      	bhi.n	11828 <ll_priv_mode_set+0x48>
		switch (mode) {
   117fa:	b11c      	cbz	r4, 11804 <ll_priv_mode_set+0x24>
   117fc:	2c01      	cmp	r4, #1
   117fe:	d00a      	beq.n	11816 <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   11800:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   11802:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   11804:	2328      	movs	r3, #40	; 0x28
   11806:	4a09      	ldr	r2, [pc, #36]	; (1182c <ll_priv_mode_set+0x4c>)
   11808:	4358      	muls	r0, r3
   1180a:	5c13      	ldrb	r3, [r2, r0]
   1180c:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   11810:	5413      	strb	r3, [r2, r0]
	return 0;
   11812:	2000      	movs	r0, #0
			break;
   11814:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   11816:	2328      	movs	r3, #40	; 0x28
   11818:	4a04      	ldr	r2, [pc, #16]	; (1182c <ll_priv_mode_set+0x4c>)
   1181a:	4358      	muls	r0, r3
   1181c:	5c13      	ldrb	r3, [r2, r0]
   1181e:	f043 0310 	orr.w	r3, r3, #16
   11822:	e7f5      	b.n	11810 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11824:	200c      	movs	r0, #12
   11826:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11828:	2002      	movs	r0, #2
   1182a:	bd38      	pop	{r3, r4, r5, pc}
   1182c:	200012b4 	.word	0x200012b4

00011830 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   11830:	4a19      	ldr	r2, [pc, #100]	; (11898 <ll_filter_reset+0x68>)
   11832:	2300      	movs	r3, #0
{
   11834:	b430      	push	{r4, r5}
	wl_anon = 0;
   11836:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   11838:	4a18      	ldr	r2, [pc, #96]	; (1189c <ll_filter_reset+0x6c>)
   1183a:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1183e:	f36f 0100 	bfc	r1, #0, #1
   11842:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   11846:	3301      	adds	r3, #1
   11848:	2b08      	cmp	r3, #8
   1184a:	d1f6      	bne.n	1183a <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   1184c:	4a14      	ldr	r2, [pc, #80]	; (118a0 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1184e:	4915      	ldr	r1, [pc, #84]	; (118a4 <ll_filter_reset+0x74>)
	rl_enable = 0;
   11850:	2300      	movs	r3, #0
   11852:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11854:	4a14      	ldr	r2, [pc, #80]	; (118a8 <ll_filter_reset+0x78>)
   11856:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   11858:	4a14      	ldr	r2, [pc, #80]	; (118ac <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   1185a:	4915      	ldr	r1, [pc, #84]	; (118b0 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   1185c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11860:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11864:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   11868:	2528      	movs	r5, #40	; 0x28
   1186a:	fb05 f203 	mul.w	r2, r5, r3
   1186e:	3301      	adds	r3, #1
   11870:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11872:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   11874:	f36f 0400 	bfc	r4, #0, #1
   11878:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1187a:	d1f6      	bne.n	1186a <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   1187c:	4b0d      	ldr	r3, [pc, #52]	; (118b4 <ll_filter_reset+0x84>)
   1187e:	2200      	movs	r2, #0
   11880:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   11882:	b120      	cbz	r0, 1188e <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   11884:	490c      	ldr	r1, [pc, #48]	; (118b8 <ll_filter_reset+0x88>)
   11886:	480d      	ldr	r0, [pc, #52]	; (118bc <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   11888:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1188a:	f002 ba3d 	b.w	13d08 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   1188e:	480b      	ldr	r0, [pc, #44]	; (118bc <ll_filter_reset+0x8c>)
}
   11890:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   11892:	f002 ba49 	b.w	13d28 <k_delayed_work_cancel>
   11896:	bf00      	nop
   11898:	20001918 	.word	0x20001918
   1189c:	20001427 	.word	0x20001427
   118a0:	200013f4 	.word	0x200013f4
   118a4:	000dbba0 	.word	0x000dbba0
   118a8:	20001944 	.word	0x20001944
   118ac:	20001910 	.word	0x20001910
   118b0:	200012b4 	.word	0x200012b4
   118b4:	2000122a 	.word	0x2000122a
   118b8:	00011451 	.word	0x00011451
   118bc:	2000191c 	.word	0x2000191c

000118c0 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   118c0:	4b05      	ldr	r3, [pc, #20]	; (118d8 <cntr_init+0x18>)
   118c2:	2200      	movs	r2, #0
   118c4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   118c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   118cc:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   118d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   118d4:	4770      	bx	lr
   118d6:	bf00      	nop
   118d8:	4000b000 	.word	0x4000b000

000118dc <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   118dc:	4a04      	ldr	r2, [pc, #16]	; (118f0 <cntr_start+0x14>)
   118de:	7813      	ldrb	r3, [r2, #0]
   118e0:	1c59      	adds	r1, r3, #1
   118e2:	7011      	strb	r1, [r2, #0]
   118e4:	2001      	movs	r0, #1
   118e6:	b913      	cbnz	r3, 118ee <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   118e8:	4a02      	ldr	r2, [pc, #8]	; (118f4 <cntr_start+0x18>)
   118ea:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   118ec:	4618      	mov	r0, r3
}
   118ee:	4770      	bx	lr
   118f0:	20001499 	.word	0x20001499
   118f4:	4000b000 	.word	0x4000b000

000118f8 <cntr_stop>:

u32_t cntr_stop(void)
{
   118f8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
   118fa:	4b0f      	ldr	r3, [pc, #60]	; (11938 <cntr_stop+0x40>)
   118fc:	7818      	ldrb	r0, [r3, #0]
   118fe:	b970      	cbnz	r0, 1191e <cntr_stop+0x26>
   11900:	4b0e      	ldr	r3, [pc, #56]	; (1193c <cntr_stop+0x44>)
   11902:	9301      	str	r3, [sp, #4]
   11904:	9300      	str	r3, [sp, #0]
   11906:	4a0e      	ldr	r2, [pc, #56]	; (11940 <cntr_stop+0x48>)
   11908:	4b0e      	ldr	r3, [pc, #56]	; (11944 <cntr_stop+0x4c>)
   1190a:	490f      	ldr	r1, [pc, #60]	; (11948 <cntr_stop+0x50>)
   1190c:	480f      	ldr	r0, [pc, #60]	; (1194c <cntr_stop+0x54>)
   1190e:	f7ef fb3d 	bl	f8c <printk>
   11912:	4040      	eors	r0, r0
   11914:	f380 8811 	msr	BASEPRI, r0
   11918:	f04f 0004 	mov.w	r0, #4
   1191c:	df02      	svc	2

	if (--_refcount) {
   1191e:	3801      	subs	r0, #1
   11920:	b2c0      	uxtb	r0, r0
   11922:	7018      	strb	r0, [r3, #0]
   11924:	2301      	movs	r3, #1
   11926:	b920      	cbnz	r0, 11932 <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   11928:	4a09      	ldr	r2, [pc, #36]	; (11950 <cntr_stop+0x58>)
   1192a:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   1192c:	b003      	add	sp, #12
   1192e:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
   11932:	4618      	mov	r0, r3
   11934:	e7fa      	b.n	1192c <cntr_stop+0x34>
   11936:	bf00      	nop
   11938:	20001499 	.word	0x20001499
   1193c:	000142a9 	.word	0x000142a9
   11940:	00014ff8 	.word	0x00014ff8
   11944:	000175a3 	.word	0x000175a3
   11948:	00015047 	.word	0x00015047
   1194c:	000175ad 	.word	0x000175ad
   11950:	4000b000 	.word	0x4000b000

00011954 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   11954:	4b01      	ldr	r3, [pc, #4]	; (1195c <cntr_cnt_get+0x8>)
   11956:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   1195a:	4770      	bx	lr
   1195c:	4000b000 	.word	0x4000b000

00011960 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   11960:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   11964:	4b01      	ldr	r3, [pc, #4]	; (1196c <cntr_cmp_set+0xc>)
   11966:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   1196a:	4770      	bx	lr
   1196c:	4000b000 	.word	0x4000b000

00011970 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   11970:	4b11      	ldr	r3, [pc, #68]	; (119b8 <do_ecb+0x48>)
{
   11972:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   11974:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   11976:	2500      	movs	r5, #0
   11978:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   1197a:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   1197c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   11980:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   11984:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   11988:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1198a:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   1198e:	b934      	cbnz	r4, 1199e <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   11990:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   11994:	b91c      	cbnz	r4, 1199e <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   11996:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1199a:	2c00      	cmp	r4, #0
   1199c:	d1f5      	bne.n	1198a <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   1199e:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   119a0:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   119a4:	2c00      	cmp	r4, #0
   119a6:	d1e8      	bne.n	1197a <do_ecb+0xa>
   119a8:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   119ac:	2e00      	cmp	r6, #0
   119ae:	d0e4      	beq.n	1197a <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   119b0:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   119b4:	bd70      	pop	{r4, r5, r6, pc}
   119b6:	bf00      	nop
   119b8:	4000e000 	.word	0x4000e000

000119bc <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   119bc:	b570      	push	{r4, r5, r6, lr}
   119be:	b08c      	sub	sp, #48	; 0x30
   119c0:	460e      	mov	r6, r1
   119c2:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   119c4:	4601      	mov	r1, r0
   119c6:	2210      	movs	r2, #16
   119c8:	4668      	mov	r0, sp
{
   119ca:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   119cc:	f7f4 ffc8 	bl	6960 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   119d0:	2210      	movs	r2, #16
   119d2:	eb0d 0002 	add.w	r0, sp, r2
   119d6:	4631      	mov	r1, r6
   119d8:	f7f4 ffc2 	bl	6960 <mem_rcopy>

	do_ecb(&ecb);
   119dc:	4668      	mov	r0, sp
   119de:	f7ff ffc7 	bl	11970 <do_ecb>

	if (cipher_text_le) {
   119e2:	b125      	cbz	r5, 119ee <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   119e4:	2210      	movs	r2, #16
   119e6:	a908      	add	r1, sp, #32
   119e8:	4628      	mov	r0, r5
   119ea:	f7f4 ffb9 	bl	6960 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   119ee:	b124      	cbz	r4, 119fa <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   119f0:	2210      	movs	r2, #16
   119f2:	a908      	add	r1, sp, #32
   119f4:	4620      	mov	r0, r4
   119f6:	f7f0 f901 	bl	1bfc <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   119fa:	b00c      	add	sp, #48	; 0x30
   119fc:	bd70      	pop	{r4, r5, r6, pc}
	...

00011a00 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   11a00:	4b07      	ldr	r3, [pc, #28]	; (11a20 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   11a02:	4a08      	ldr	r2, [pc, #32]	; (11a24 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   11a04:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   11a08:	4907      	ldr	r1, [pc, #28]	; (11a28 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   11a0a:	4a08      	ldr	r2, [pc, #32]	; (11a2c <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   11a0c:	2800      	cmp	r0, #0
   11a0e:	bf14      	ite	ne
   11a10:	4610      	movne	r0, r2
   11a12:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   11a14:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   11a16:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   11a1a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   11a1e:	4770      	bx	lr
   11a20:	4001f000 	.word	0x4001f000
   11a24:	40008140 	.word	0x40008140
   11a28:	40001004 	.word	0x40001004
   11a2c:	40001000 	.word	0x40001000

00011a30 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   11a30:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11a32:	4e2c      	ldr	r6, [pc, #176]	; (11ae4 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   11a34:	4f2c      	ldr	r7, [pc, #176]	; (11ae8 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11a36:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   11a38:	4b2c      	ldr	r3, [pc, #176]	; (11aec <sw_switch.isra.9+0xbc>)
   11a3a:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   11a3e:	b22b      	sxth	r3, r5
   11a40:	00dc      	lsls	r4, r3, #3
   11a42:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   11a46:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   11a4a:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11a4e:	f105 040b 	add.w	r4, r5, #11
   11a52:	b2e4      	uxtb	r4, r4
   11a54:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   11a56:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   11a5a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   11a5e:	3fc0      	subs	r7, #192	; 0xc0
   11a60:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   11a64:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   11a68:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   11a6c:	2800      	cmp	r0, #0
   11a6e:	d034      	beq.n	11ada <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   11a70:	f24a 075a 	movw	r7, #41050	; 0xa05a
   11a74:	f649 4040 	movw	r0, #40000	; 0x9c40
   11a78:	2a02      	cmp	r2, #2
   11a7a:	bf0c      	ite	eq
   11a7c:	4602      	moveq	r2, r0
   11a7e:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   11a80:	f242 47b8 	movw	r7, #9400	; 0x24b8
   11a84:	f241 504a 	movw	r0, #5450	; 0x154a
   11a88:	2902      	cmp	r1, #2
   11a8a:	bf18      	it	ne
   11a8c:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   11a8e:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   11a92:	4401      	add	r1, r0
   11a94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11a98:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   11a9c:	4a14      	ldr	r2, [pc, #80]	; (11af0 <sw_switch.isra.9+0xc0>)
   11a9e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   11aa2:	009b      	lsls	r3, r3, #2
   11aa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11aa8:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   11aac:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   11ab0:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   11ab2:	bf8b      	itete	hi
   11ab4:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   11ab8:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   11aba:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   11abc:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   11ac0:	bf88      	it	hi
   11ac2:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   11ac6:	4b08      	ldr	r3, [pc, #32]	; (11ae8 <sw_switch.isra.9+0xb8>)
   11ac8:	f44f 6290 	mov.w	r2, #1152	; 0x480
   11acc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   11ad0:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   11ad2:	f003 0301 	and.w	r3, r3, #1
   11ad6:	7033      	strb	r3, [r6, #0]
   11ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   11ada:	4a06      	ldr	r2, [pc, #24]	; (11af4 <sw_switch.isra.9+0xc4>)
   11adc:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   11ae0:	212d      	movs	r1, #45	; 0x2d
   11ae2:	e7de      	b.n	11aa2 <sw_switch.isra.9+0x72>
   11ae4:	200016bc 	.word	0x200016bc
   11ae8:	4001f000 	.word	0x4001f000
   11aec:	4000110c 	.word	0x4000110c
   11af0:	40001000 	.word	0x40001000
   11af4:	40001004 	.word	0x40001004

00011af8 <isr_radio>:
	if (sfp_radio_isr) {
   11af8:	4b02      	ldr	r3, [pc, #8]	; (11b04 <isr_radio+0xc>)
   11afa:	681b      	ldr	r3, [r3, #0]
   11afc:	b103      	cbz	r3, 11b00 <isr_radio+0x8>
		sfp_radio_isr();
   11afe:	4718      	bx	r3
   11b00:	4770      	bx	lr
   11b02:	bf00      	nop
   11b04:	200016b8 	.word	0x200016b8

00011b08 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   11b08:	4b06      	ldr	r3, [pc, #24]	; (11b24 <radio_isr_set+0x1c>)
   11b0a:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   11b0c:	4b06      	ldr	r3, [pc, #24]	; (11b28 <radio_isr_set+0x20>)
   11b0e:	2210      	movs	r2, #16
   11b10:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11b14:	4b05      	ldr	r3, [pc, #20]	; (11b2c <radio_isr_set+0x24>)
   11b16:	2202      	movs	r2, #2
   11b18:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   11b1c:	2001      	movs	r0, #1
   11b1e:	f7ef be9b 	b.w	1858 <_arch_irq_enable>
   11b22:	bf00      	nop
   11b24:	200016b8 	.word	0x200016b8
   11b28:	40001000 	.word	0x40001000
   11b2c:	e000e100 	.word	0xe000e100

00011b30 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   11b30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   11b38:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   11b3a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   11b3e:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   11b42:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   11b46:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   11b4a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   11b4e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   11b52:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   11b56:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   11b5a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   11b5e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   11b62:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   11b66:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   11b6a:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   11b6e:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   11b72:	4770      	bx	lr

00011b74 <radio_reset>:
{
   11b74:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   11b76:	2001      	movs	r0, #1
   11b78:	f7ef fe7e 	bl	1878 <_arch_irq_disable>
	NRF_RADIO->POWER =
   11b7c:	4b08      	ldr	r3, [pc, #32]	; (11ba0 <radio_reset+0x2c>)
   11b7e:	2200      	movs	r2, #0
   11b80:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   11b84:	2201      	movs	r2, #1
   11b86:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   11b8a:	4a06      	ldr	r2, [pc, #24]	; (11ba4 <radio_reset+0x30>)
   11b8c:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   11b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   11b92:	f023 0301 	bic.w	r3, r3, #1
   11b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   11b9a:	6013      	str	r3, [r2, #0]
   11b9c:	bd08      	pop	{r3, pc}
   11b9e:	bf00      	nop
   11ba0:	40001000 	.word	0x40001000
   11ba4:	40001774 	.word	0x40001774

00011ba8 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   11ba8:	4b06      	ldr	r3, [pc, #24]	; (11bc4 <radio_phy_set+0x1c>)
	switch (phy) {
   11baa:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   11bac:	bf0c      	ite	eq
   11bae:	2204      	moveq	r2, #4
   11bb0:	2203      	movne	r2, #3
   11bb2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   11bb6:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   11bba:	f042 0201 	orr.w	r2, r2, #1
   11bbe:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   11bc2:	4770      	bx	lr
   11bc4:	40001000 	.word	0x40001000

00011bc8 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   11bc8:	4b01      	ldr	r3, [pc, #4]	; (11bd0 <radio_tx_power_set+0x8>)
   11bca:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   11bce:	4770      	bx	lr
   11bd0:	40001000 	.word	0x40001000

00011bd4 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   11bd4:	4b01      	ldr	r3, [pc, #4]	; (11bdc <radio_freq_chan_set+0x8>)
   11bd6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   11bda:	4770      	bx	lr
   11bdc:	40001000 	.word	0x40001000

00011be0 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   11be0:	4b07      	ldr	r3, [pc, #28]	; (11c00 <radio_whiten_iv_set+0x20>)
   11be2:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   11be6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   11bea:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   11bee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   11bf2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   11bf6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   11bfa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   11bfe:	4770      	bx	lr
   11c00:	40001000 	.word	0x40001000

00011c04 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   11c04:	4a0a      	ldr	r2, [pc, #40]	; (11c30 <radio_aa_set+0x2c>)
   11c06:	2300      	movs	r3, #0
   11c08:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   11c0c:	2301      	movs	r3, #1
   11c0e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   11c12:	78c3      	ldrb	r3, [r0, #3]
   11c14:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   11c18:	7843      	ldrb	r3, [r0, #1]
   11c1a:	7881      	ldrb	r1, [r0, #2]
   11c1c:	041b      	lsls	r3, r3, #16
   11c1e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   11c22:	7801      	ldrb	r1, [r0, #0]
   11c24:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   11c28:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   11c2c:	4770      	bx	lr
   11c2e:	bf00      	nop
   11c30:	40001000 	.word	0x40001000

00011c34 <radio_pkt_configure>:
	switch (phy) {
   11c34:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   11c38:	2b02      	cmp	r3, #2
{
   11c3a:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   11c3c:	bf0c      	ite	eq
   11c3e:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   11c42:	2400      	movne	r4, #0
	if (dc) {
   11c44:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   11c46:	f1c0 0308 	rsb	r3, r0, #8
   11c4a:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   11c4e:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   11c52:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   11c56:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   11c5a:	4a0b      	ldr	r2, [pc, #44]	; (11c88 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   11c5c:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   11c60:	bf48      	it	mi
   11c62:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   11c66:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   11c68:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   11c6c:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   11c70:	4b06      	ldr	r3, [pc, #24]	; (11c8c <radio_pkt_configure+0x58>)
   11c72:	4003      	ands	r3, r0
   11c74:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   11c78:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   11c7c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   11c80:	4319      	orrs	r1, r3
   11c82:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   11c86:	bd10      	pop	{r4, pc}
   11c88:	40001000 	.word	0x40001000
   11c8c:	fef80000 	.word	0xfef80000

00011c90 <radio_pkt_rx_set>:
   11c90:	4b01      	ldr	r3, [pc, #4]	; (11c98 <radio_pkt_rx_set+0x8>)
   11c92:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   11c96:	4770      	bx	lr
   11c98:	40001000 	.word	0x40001000

00011c9c <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   11c9c:	4b01      	ldr	r3, [pc, #4]	; (11ca4 <radio_pkt_tx_set+0x8>)
   11c9e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   11ca2:	4770      	bx	lr
   11ca4:	40001000 	.word	0x40001000

00011ca8 <radio_tx_ready_delay_get>:
	switch (phy) {
   11ca8:	2802      	cmp	r0, #2
}
   11caa:	bf0c      	ite	eq
   11cac:	2028      	moveq	r0, #40	; 0x28
   11cae:	2029      	movne	r0, #41	; 0x29
   11cb0:	4770      	bx	lr

00011cb2 <radio_tx_chain_delay_get>:
}
   11cb2:	2001      	movs	r0, #1
   11cb4:	4770      	bx	lr

00011cb6 <radio_rx_ready_delay_get>:
}
   11cb6:	2029      	movs	r0, #41	; 0x29
   11cb8:	4770      	bx	lr

00011cba <radio_rx_chain_delay_get>:
	switch (phy) {
   11cba:	2802      	cmp	r0, #2
}
   11cbc:	bf0c      	ite	eq
   11cbe:	2006      	moveq	r0, #6
   11cc0:	200a      	movne	r0, #10
   11cc2:	4770      	bx	lr

00011cc4 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   11cc4:	4b01      	ldr	r3, [pc, #4]	; (11ccc <radio_rx_enable+0x8>)
   11cc6:	2201      	movs	r2, #1
   11cc8:	605a      	str	r2, [r3, #4]
   11cca:	4770      	bx	lr
   11ccc:	40001000 	.word	0x40001000

00011cd0 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   11cd0:	4b01      	ldr	r3, [pc, #4]	; (11cd8 <radio_tx_enable+0x8>)
   11cd2:	2201      	movs	r2, #1
   11cd4:	601a      	str	r2, [r3, #0]
   11cd6:	4770      	bx	lr
   11cd8:	40001000 	.word	0x40001000

00011cdc <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   11cdc:	4a07      	ldr	r2, [pc, #28]	; (11cfc <radio_disable+0x20>)
   11cde:	f44f 6390 	mov.w	r3, #1152	; 0x480
   11ce2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   11ce6:	2301      	movs	r3, #1
   11ce8:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   11cea:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   11cec:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   11cf0:	2100      	movs	r1, #0
   11cf2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   11cf6:	6113      	str	r3, [r2, #16]
   11cf8:	4770      	bx	lr
   11cfa:	bf00      	nop
   11cfc:	4001f000 	.word	0x4001f000

00011d00 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   11d00:	4b04      	ldr	r3, [pc, #16]	; (11d14 <radio_status_reset+0x14>)
   11d02:	2200      	movs	r2, #0
   11d04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   11d08:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   11d0c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   11d10:	4770      	bx	lr
   11d12:	bf00      	nop
   11d14:	40001000 	.word	0x40001000

00011d18 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   11d18:	4b03      	ldr	r3, [pc, #12]	; (11d28 <radio_is_ready+0x10>)
   11d1a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   11d1e:	3000      	adds	r0, #0
   11d20:	bf18      	it	ne
   11d22:	2001      	movne	r0, #1
   11d24:	4770      	bx	lr
   11d26:	bf00      	nop
   11d28:	40001000 	.word	0x40001000

00011d2c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   11d2c:	4b03      	ldr	r3, [pc, #12]	; (11d3c <radio_is_done+0x10>)
   11d2e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   11d32:	3000      	adds	r0, #0
   11d34:	bf18      	it	ne
   11d36:	2001      	movne	r0, #1
   11d38:	4770      	bx	lr
   11d3a:	bf00      	nop
   11d3c:	40001000 	.word	0x40001000

00011d40 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   11d40:	4b03      	ldr	r3, [pc, #12]	; (11d50 <radio_is_idle+0x10>)
   11d42:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   11d46:	fab0 f080 	clz	r0, r0
   11d4a:	0940      	lsrs	r0, r0, #5
   11d4c:	4770      	bx	lr
   11d4e:	bf00      	nop
   11d50:	40001000 	.word	0x40001000

00011d54 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   11d54:	4b04      	ldr	r3, [pc, #16]	; (11d68 <radio_crc_configure+0x14>)
   11d56:	f240 1203 	movw	r2, #259	; 0x103
   11d5a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   11d5e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   11d62:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   11d66:	4770      	bx	lr
   11d68:	40001000 	.word	0x40001000

00011d6c <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   11d6c:	4b03      	ldr	r3, [pc, #12]	; (11d7c <radio_crc_is_valid+0x10>)
   11d6e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   11d72:	3000      	adds	r0, #0
   11d74:	bf18      	it	ne
   11d76:	2001      	movne	r0, #1
   11d78:	4770      	bx	lr
   11d7a:	bf00      	nop
   11d7c:	40001000 	.word	0x40001000

00011d80 <radio_pkt_empty_get>:
}
   11d80:	4800      	ldr	r0, [pc, #0]	; (11d84 <radio_pkt_empty_get+0x4>)
   11d82:	4770      	bx	lr
   11d84:	200015ac 	.word	0x200015ac

00011d88 <radio_pkt_scratch_get>:
}
   11d88:	4800      	ldr	r0, [pc, #0]	; (11d8c <radio_pkt_scratch_get+0x4>)
   11d8a:	4770      	bx	lr
   11d8c:	200015b0 	.word	0x200015b0

00011d90 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   11d90:	4b04      	ldr	r3, [pc, #16]	; (11da4 <radio_switch_complete_and_rx+0x14>)
   11d92:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   11d94:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   11d96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   11d9a:	4602      	mov	r2, r0
   11d9c:	4608      	mov	r0, r1
   11d9e:	f7ff be47 	b.w	11a30 <sw_switch.isra.9>
   11da2:	bf00      	nop
   11da4:	40001000 	.word	0x40001000

00011da8 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   11da8:	4b03      	ldr	r3, [pc, #12]	; (11db8 <radio_switch_complete_and_tx+0x10>)
   11daa:	2103      	movs	r1, #3
   11dac:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   11db0:	4601      	mov	r1, r0
   11db2:	2001      	movs	r0, #1
   11db4:	f7ff be3c 	b.w	11a30 <sw_switch.isra.9>
   11db8:	40001000 	.word	0x40001000

00011dbc <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   11dbc:	4b05      	ldr	r3, [pc, #20]	; (11dd4 <radio_switch_complete_and_disable+0x18>)
   11dbe:	2203      	movs	r2, #3
   11dc0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   11dc4:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   11dc8:	f44f 6290 	mov.w	r2, #1152	; 0x480
   11dcc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   11dd0:	4770      	bx	lr
   11dd2:	bf00      	nop
   11dd4:	40001000 	.word	0x40001000

00011dd8 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   11dd8:	4a03      	ldr	r2, [pc, #12]	; (11de8 <radio_rssi_measure+0x10>)
   11dda:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   11dde:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   11de2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   11de6:	4770      	bx	lr
   11de8:	40001000 	.word	0x40001000

00011dec <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   11dec:	4b01      	ldr	r3, [pc, #4]	; (11df4 <radio_rssi_get+0x8>)
   11dee:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   11df2:	4770      	bx	lr
   11df4:	40001000 	.word	0x40001000

00011df8 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   11df8:	4b02      	ldr	r3, [pc, #8]	; (11e04 <radio_rssi_status_reset+0xc>)
   11dfa:	2200      	movs	r2, #0
   11dfc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   11e00:	4770      	bx	lr
   11e02:	bf00      	nop
   11e04:	40001000 	.word	0x40001000

00011e08 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   11e08:	4b03      	ldr	r3, [pc, #12]	; (11e18 <radio_rssi_is_ready+0x10>)
   11e0a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   11e0e:	3000      	adds	r0, #0
   11e10:	bf18      	it	ne
   11e12:	2001      	movne	r0, #1
   11e14:	4770      	bx	lr
   11e16:	bf00      	nop
   11e18:	40001000 	.word	0x40001000

00011e1c <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   11e1c:	b530      	push	{r4, r5, lr}
   11e1e:	2400      	movs	r4, #0
   11e20:	00a3      	lsls	r3, r4, #2
   11e22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   11e2a:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   11e2c:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   11e30:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   11e32:	8895      	ldrh	r5, [r2, #4]
   11e34:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   11e38:	2c08      	cmp	r4, #8
		bdaddr += 6;
   11e3a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   11e3e:	d1ef      	bne.n	11e20 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   11e40:	4b02      	ldr	r3, [pc, #8]	; (11e4c <radio_filter_configure+0x30>)
   11e42:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   11e46:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   11e4a:	bd30      	pop	{r4, r5, pc}
   11e4c:	40001000 	.word	0x40001000

00011e50 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   11e50:	4a03      	ldr	r2, [pc, #12]	; (11e60 <radio_filter_disable+0x10>)
   11e52:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   11e56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11e5a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   11e5e:	4770      	bx	lr
   11e60:	40001000 	.word	0x40001000

00011e64 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   11e64:	4b02      	ldr	r3, [pc, #8]	; (11e70 <radio_filter_status_reset+0xc>)
   11e66:	2200      	movs	r2, #0
   11e68:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   11e6c:	4770      	bx	lr
   11e6e:	bf00      	nop
   11e70:	40001000 	.word	0x40001000

00011e74 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   11e74:	4b03      	ldr	r3, [pc, #12]	; (11e84 <radio_filter_has_match+0x10>)
   11e76:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   11e7a:	3000      	adds	r0, #0
   11e7c:	bf18      	it	ne
   11e7e:	2001      	movne	r0, #1
   11e80:	4770      	bx	lr
   11e82:	bf00      	nop
   11e84:	40001000 	.word	0x40001000

00011e88 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   11e88:	4b01      	ldr	r3, [pc, #4]	; (11e90 <radio_filter_match_get+0x8>)
   11e8a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   11e8e:	4770      	bx	lr
   11e90:	40001000 	.word	0x40001000

00011e94 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   11e94:	4b04      	ldr	r3, [pc, #16]	; (11ea8 <radio_bc_configure+0x14>)
   11e96:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   11e9a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   11e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11ea2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   11ea6:	4770      	bx	lr
   11ea8:	40001000 	.word	0x40001000

00011eac <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   11eac:	4b05      	ldr	r3, [pc, #20]	; (11ec4 <radio_tmr_status_reset+0x18>)
   11eae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   11eb2:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   11eb6:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   11eba:	227f      	movs	r2, #127	; 0x7f
   11ebc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   11ec0:	4770      	bx	lr
   11ec2:	bf00      	nop
   11ec4:	4000b000 	.word	0x4000b000

00011ec8 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   11ec8:	4b03      	ldr	r3, [pc, #12]	; (11ed8 <radio_tmr_tifs_set+0x10>)
   11eca:	4a04      	ldr	r2, [pc, #16]	; (11edc <radio_tmr_tifs_set+0x14>)
   11ecc:	781b      	ldrb	r3, [r3, #0]
   11ece:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   11ed2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   11ed6:	4770      	bx	lr
   11ed8:	200016bc 	.word	0x200016bc
   11edc:	40009000 	.word	0x40009000

00011ee0 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   11ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   11ee4:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   11ee8:	4c30      	ldr	r4, [pc, #192]	; (11fac <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   11eea:	4d31      	ldr	r5, [pc, #196]	; (11fb0 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   11eec:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   11ef0:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   11ef2:	bf88      	it	hi
   11ef4:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   11ef8:	4b2e      	ldr	r3, [pc, #184]	; (11fb4 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   11efa:	4c2f      	ldr	r4, [pc, #188]	; (11fb8 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   11efc:	bf82      	ittt	hi
   11efe:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   11f02:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   11f06:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   11f0a:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   11f0c:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   11f10:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   11f12:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   11f14:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   11f18:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   11f1a:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   11f1e:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   11f22:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   11f26:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   11f2a:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   11f2e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   11f32:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   11f36:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   11f3a:	4920      	ldr	r1, [pc, #128]	; (11fbc <radio_tmr_start+0xdc>)
   11f3c:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   11f40:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   11f44:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   11f48:	f7ff fd5a 	bl	11a00 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   11f4c:	4b1c      	ldr	r3, [pc, #112]	; (11fc0 <radio_tmr_start+0xe0>)
   11f4e:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   11f50:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   11f54:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   11f58:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   11f5c:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   11f5e:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   11f62:	3b74      	subs	r3, #116	; 0x74
   11f64:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   11f68:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   11f6c:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   11f70:	f503 739a 	add.w	r3, r3, #308	; 0x134
   11f74:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   11f78:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   11f7c:	33c4      	adds	r3, #196	; 0xc4
   11f7e:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   11f82:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   11f86:	3bc0      	subs	r3, #192	; 0xc0
   11f88:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   11f8c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   11f90:	33c8      	adds	r3, #200	; 0xc8
   11f92:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   11f96:	f44f 6310 	mov.w	r3, #2304	; 0x900
   11f9a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   11f9e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   11fa2:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   11fa6:	4628      	mov	r0, r5
   11fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11fac:	7ff0bdbf 	.word	0x7ff0bdbf
   11fb0:	000f4240 	.word	0x000f4240
   11fb4:	40008000 	.word	0x40008000
   11fb8:	4000b000 	.word	0x4000b000
   11fbc:	4000b148 	.word	0x4000b148
   11fc0:	40009000 	.word	0x40009000

00011fc4 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   11fc4:	4a04      	ldr	r2, [pc, #16]	; (11fd8 <radio_tmr_stop+0x14>)
   11fc6:	2301      	movs	r3, #1
   11fc8:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   11fca:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   11fcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   11fd0:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   11fd2:	6113      	str	r3, [r2, #16]
   11fd4:	4770      	bx	lr
   11fd6:	bf00      	nop
   11fd8:	40008000 	.word	0x40008000

00011fdc <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   11fdc:	4b0c      	ldr	r3, [pc, #48]	; (12010 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   11fde:	4a0d      	ldr	r2, [pc, #52]	; (12014 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   11fe0:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   11fe4:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   11fe8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   11fec:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   11ff0:	3240      	adds	r2, #64	; 0x40
   11ff2:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   11ff6:	f502 7280 	add.w	r2, r2, #256	; 0x100
   11ffa:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   11ffe:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   12002:	3a34      	subs	r2, #52	; 0x34
   12004:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   12008:	2218      	movs	r2, #24
   1200a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1200e:	4770      	bx	lr
   12010:	40008000 	.word	0x40008000
   12014:	40001104 	.word	0x40001104

00012018 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   12018:	4b0b      	ldr	r3, [pc, #44]	; (12048 <radio_tmr_aa_capture+0x30>)
   1201a:	4a0c      	ldr	r2, [pc, #48]	; (1204c <radio_tmr_aa_capture+0x34>)
   1201c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   12020:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12024:	3240      	adds	r2, #64	; 0x40
   12026:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1202a:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   1202e:	3a3c      	subs	r2, #60	; 0x3c
   12030:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   12034:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12038:	3240      	adds	r2, #64	; 0x40
   1203a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   1203e:	220c      	movs	r2, #12
   12040:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12044:	4770      	bx	lr
   12046:	bf00      	nop
   12048:	4001f000 	.word	0x4001f000
   1204c:	40001100 	.word	0x40001100

00012050 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   12050:	4b01      	ldr	r3, [pc, #4]	; (12058 <radio_tmr_aa_get+0x8>)
   12052:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   12056:	4770      	bx	lr
   12058:	40008000 	.word	0x40008000

0001205c <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   1205c:	4b01      	ldr	r3, [pc, #4]	; (12064 <radio_tmr_aa_save+0x8>)
   1205e:	6018      	str	r0, [r3, #0]
   12060:	4770      	bx	lr
   12062:	bf00      	nop
   12064:	200016b4 	.word	0x200016b4

00012068 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   12068:	4b01      	ldr	r3, [pc, #4]	; (12070 <radio_tmr_aa_restore+0x8>)
   1206a:	6818      	ldr	r0, [r3, #0]
   1206c:	4770      	bx	lr
   1206e:	bf00      	nop
   12070:	200016b4 	.word	0x200016b4

00012074 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   12074:	4b01      	ldr	r3, [pc, #4]	; (1207c <radio_tmr_ready_get+0x8>)
   12076:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1207a:	4770      	bx	lr
   1207c:	40008000 	.word	0x40008000

00012080 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   12080:	4b06      	ldr	r3, [pc, #24]	; (1209c <radio_tmr_end_capture+0x1c>)
   12082:	4a07      	ldr	r2, [pc, #28]	; (120a0 <radio_tmr_end_capture+0x20>)
   12084:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   12088:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1208c:	323c      	adds	r2, #60	; 0x3c
   1208e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   12092:	2220      	movs	r2, #32
   12094:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12098:	4770      	bx	lr
   1209a:	bf00      	nop
   1209c:	4001f000 	.word	0x4001f000
   120a0:	4000110c 	.word	0x4000110c

000120a4 <radio_tmr_end_get>:
   120a4:	4b01      	ldr	r3, [pc, #4]	; (120ac <radio_tmr_end_get+0x8>)
   120a6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   120aa:	4770      	bx	lr
   120ac:	40008000 	.word	0x40008000

000120b0 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   120b0:	4b01      	ldr	r3, [pc, #4]	; (120b8 <radio_tmr_tifs_base_get+0x8>)
   120b2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   120b6:	4770      	bx	lr
   120b8:	40008000 	.word	0x40008000

000120bc <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   120bc:	4b16      	ldr	r3, [pc, #88]	; (12118 <radio_ccm_rx_pkt_set+0x5c>)
{
   120be:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   120c0:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   120c2:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   120c4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   120c8:	4e14      	ldr	r6, [pc, #80]	; (1211c <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   120ca:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   120ce:	4d14      	ldr	r5, [pc, #80]	; (12120 <radio_ccm_rx_pkt_set+0x64>)
   120d0:	2902      	cmp	r1, #2
   120d2:	bf0c      	ite	eq
   120d4:	4629      	moveq	r1, r5
   120d6:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   120d8:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   120dc:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   120e0:	4810      	ldr	r0, [pc, #64]	; (12124 <radio_ccm_rx_pkt_set+0x68>)
   120e2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   120e6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   120ea:	4a0f      	ldr	r2, [pc, #60]	; (12128 <radio_ccm_rx_pkt_set+0x6c>)
   120ec:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   120f0:	490e      	ldr	r1, [pc, #56]	; (1212c <radio_ccm_rx_pkt_set+0x70>)
   120f2:	4a0f      	ldr	r2, [pc, #60]	; (12130 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   120f4:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   120f8:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   120fc:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   12100:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   12104:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   12108:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   1210c:	2140      	movs	r1, #64	; 0x40
   1210e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   12112:	2201      	movs	r2, #1
   12114:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   12116:	bd70      	pop	{r4, r5, r6, pc}
   12118:	4000f000 	.word	0x4000f000
   1211c:	01000001 	.word	0x01000001
   12120:	01010001 	.word	0x01010001
   12124:	200015b0 	.word	0x200015b0
   12128:	200014a0 	.word	0x200014a0
   1212c:	40001104 	.word	0x40001104
   12130:	4001f000 	.word	0x4001f000

00012134 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   12134:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12136:	4b0e      	ldr	r3, [pc, #56]	; (12170 <radio_ccm_tx_pkt_set+0x3c>)
   12138:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1213a:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1213c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12140:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   12144:	4c0b      	ldr	r4, [pc, #44]	; (12174 <radio_ccm_tx_pkt_set+0x40>)
   12146:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1214a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   1214e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   12152:	4809      	ldr	r0, [pc, #36]	; (12178 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12154:	4909      	ldr	r1, [pc, #36]	; (1217c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   12156:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1215a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1215e:	2101      	movs	r1, #1
   12160:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12164:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12168:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   1216c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   1216e:	bd10      	pop	{r4, pc}
   12170:	4000f000 	.word	0x4000f000
   12174:	01010000 	.word	0x01010000
   12178:	200015b0 	.word	0x200015b0
   1217c:	200014a0 	.word	0x200014a0

00012180 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   12180:	4b0c      	ldr	r3, [pc, #48]	; (121b4 <radio_ccm_is_done+0x34>)
   12182:	2202      	movs	r2, #2
   12184:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   12188:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1218c:	b16a      	cbz	r2, 121aa <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   1218e:	2202      	movs	r2, #2
   12190:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   12194:	4a08      	ldr	r2, [pc, #32]	; (121b8 <radio_ccm_is_done+0x38>)
   12196:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1219a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   1219e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   121a2:	fab0 f080 	clz	r0, r0
   121a6:	0940      	lsrs	r0, r0, #5
   121a8:	4770      	bx	lr
		__WFE();
   121aa:	bf20      	wfe
		__SEV();
   121ac:	bf40      	sev
		__WFE();
   121ae:	bf20      	wfe
   121b0:	e7ea      	b.n	12188 <radio_ccm_is_done+0x8>
   121b2:	bf00      	nop
   121b4:	4000f000 	.word	0x4000f000
   121b8:	e000e100 	.word	0xe000e100

000121bc <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   121bc:	4b03      	ldr	r3, [pc, #12]	; (121cc <radio_ccm_mic_is_valid+0x10>)
   121be:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   121c2:	3000      	adds	r0, #0
   121c4:	bf18      	it	ne
   121c6:	2001      	movne	r0, #1
   121c8:	4770      	bx	lr
   121ca:	bf00      	nop
   121cc:	4000f000 	.word	0x4000f000

000121d0 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   121d0:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   121d2:	4c13      	ldr	r4, [pc, #76]	; (12220 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   121d4:	4d13      	ldr	r5, [pc, #76]	; (12224 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   121d6:	2303      	movs	r3, #3
   121d8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   121dc:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   121e0:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   121e4:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   121e8:	3b01      	subs	r3, #1
   121ea:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   121ee:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   121f0:	4b0d      	ldr	r3, [pc, #52]	; (12228 <radio_ar_configure+0x58>)
   121f2:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   121f6:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   121f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   121fc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   12200:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   12204:	f7ff fe46 	bl	11e94 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   12208:	4b08      	ldr	r3, [pc, #32]	; (1222c <radio_ar_configure+0x5c>)
   1220a:	4a09      	ldr	r2, [pc, #36]	; (12230 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1220c:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   12210:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   12214:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   12216:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   1221a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1221e:	bd38      	pop	{r3, r4, r5, pc}
   12220:	4000f000 	.word	0x4000f000
   12224:	40001000 	.word	0x40001000
   12228:	2000149c 	.word	0x2000149c
   1222c:	4001f000 	.word	0x4001f000
   12230:	40001128 	.word	0x40001128

00012234 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   12234:	4b01      	ldr	r3, [pc, #4]	; (1223c <radio_ar_match_get+0x8>)
   12236:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1223a:	4770      	bx	lr
   1223c:	4000f000 	.word	0x4000f000

00012240 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   12240:	4a04      	ldr	r2, [pc, #16]	; (12254 <radio_ar_status_reset+0x14>)
   12242:	2300      	movs	r3, #0
   12244:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   12248:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1224c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   12250:	4770      	bx	lr
   12252:	bf00      	nop
   12254:	40001000 	.word	0x40001000

00012258 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   12258:	4b08      	ldr	r3, [pc, #32]	; (1227c <radio_ar_has_match+0x24>)
   1225a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1225e:	b160      	cbz	r0, 1227a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   12260:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   12264:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   12268:	b138      	cbz	r0, 1227a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1226a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1226e:	b120      	cbz	r0, 1227a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   12270:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   12274:	fab0 f080 	clz	r0, r0
   12278:	0940      	lsrs	r0, r0, #5
}
   1227a:	4770      	bx	lr
   1227c:	40001000 	.word	0x40001000

00012280 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12280:	2901      	cmp	r1, #1
{
   12282:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12284:	d00e      	beq.n	122a4 <mayfly_enable_cb+0x24>
   12286:	4b0d      	ldr	r3, [pc, #52]	; (122bc <mayfly_enable_cb+0x3c>)
   12288:	9301      	str	r3, [sp, #4]
   1228a:	9300      	str	r3, [sp, #0]
   1228c:	4a0c      	ldr	r2, [pc, #48]	; (122c0 <mayfly_enable_cb+0x40>)
   1228e:	4b0d      	ldr	r3, [pc, #52]	; (122c4 <mayfly_enable_cb+0x44>)
   12290:	490d      	ldr	r1, [pc, #52]	; (122c8 <mayfly_enable_cb+0x48>)
   12292:	480e      	ldr	r0, [pc, #56]	; (122cc <mayfly_enable_cb+0x4c>)
   12294:	f7ee fe7a 	bl	f8c <printk>
   12298:	4040      	eors	r0, r0
   1229a:	f380 8811 	msr	BASEPRI, r0
   1229e:	f04f 0004 	mov.w	r0, #4
   122a2:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   122a4:	2018      	movs	r0, #24
	if (enable) {
   122a6:	b122      	cbz	r2, 122b2 <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   122a8:	b003      	add	sp, #12
   122aa:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(SWI4_IRQn);
   122ae:	f7ef bad3 	b.w	1858 <_arch_irq_enable>
}
   122b2:	b003      	add	sp, #12
   122b4:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_disable(SWI4_IRQn);
   122b8:	f7ef bade 	b.w	1878 <_arch_irq_disable>
   122bc:	000142a9 	.word	0x000142a9
   122c0:	00014ff8 	.word	0x00014ff8
   122c4:	000175d8 	.word	0x000175d8
   122c8:	00015047 	.word	0x00015047
   122cc:	00017607 	.word	0x00017607

000122d0 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   122d0:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	switch (callee_id) {
   122d2:	b181      	cbz	r1, 122f6 <mayfly_is_enabled+0x26>
   122d4:	2901      	cmp	r1, #1
   122d6:	d014      	beq.n	12302 <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   122d8:	4b0b      	ldr	r3, [pc, #44]	; (12308 <mayfly_is_enabled+0x38>)
   122da:	9301      	str	r3, [sp, #4]
   122dc:	9300      	str	r3, [sp, #0]
   122de:	4a0b      	ldr	r2, [pc, #44]	; (1230c <mayfly_is_enabled+0x3c>)
   122e0:	4b0b      	ldr	r3, [pc, #44]	; (12310 <mayfly_is_enabled+0x40>)
   122e2:	490c      	ldr	r1, [pc, #48]	; (12314 <mayfly_is_enabled+0x44>)
   122e4:	480c      	ldr	r0, [pc, #48]	; (12318 <mayfly_is_enabled+0x48>)
   122e6:	f7ee fe51 	bl	f8c <printk>
   122ea:	4040      	eors	r0, r0
   122ec:	f380 8811 	msr	BASEPRI, r0
   122f0:	f04f 0004 	mov.w	r0, #4
   122f4:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   122f6:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   122f8:	b003      	add	sp, #12
   122fa:	f85d eb04 	ldr.w	lr, [sp], #4
		return irq_is_enabled(SWI4_IRQn);
   122fe:	f7ef bacf 	b.w	18a0 <_arch_irq_is_enabled>
   12302:	2018      	movs	r0, #24
   12304:	e7f8      	b.n	122f8 <mayfly_is_enabled+0x28>
   12306:	bf00      	nop
   12308:	000142a9 	.word	0x000142a9
   1230c:	00014ff8 	.word	0x00014ff8
   12310:	000175e9 	.word	0x000175e9
   12314:	00015047 	.word	0x00015047
   12318:	00014f97 	.word	0x00014f97

0001231c <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1231c:	4288      	cmp	r0, r1
   1231e:	d00a      	beq.n	12336 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   12320:	b918      	cbnz	r0, 1232a <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   12322:	1e4b      	subs	r3, r1, #1
   12324:	4258      	negs	r0, r3
   12326:	4158      	adcs	r0, r3
   12328:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1232a:	2801      	cmp	r0, #1
   1232c:	d105      	bne.n	1233a <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1232e:	fab1 f081 	clz	r0, r1
   12332:	0940      	lsrs	r0, r0, #5
   12334:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   12336:	2001      	movs	r0, #1
   12338:	4770      	bx	lr
   1233a:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   1233c:	4770      	bx	lr
	...

00012340 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   12340:	b507      	push	{r0, r1, r2, lr}
   12342:	4b0e      	ldr	r3, [pc, #56]	; (1237c <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   12344:	b181      	cbz	r1, 12368 <mayfly_pend+0x28>
   12346:	2901      	cmp	r1, #1
   12348:	d015      	beq.n	12376 <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   1234a:	4b0d      	ldr	r3, [pc, #52]	; (12380 <mayfly_pend+0x40>)
   1234c:	9301      	str	r3, [sp, #4]
   1234e:	9300      	str	r3, [sp, #0]
   12350:	4a0c      	ldr	r2, [pc, #48]	; (12384 <mayfly_pend+0x44>)
   12352:	4b0d      	ldr	r3, [pc, #52]	; (12388 <mayfly_pend+0x48>)
   12354:	490d      	ldr	r1, [pc, #52]	; (1238c <mayfly_pend+0x4c>)
   12356:	480e      	ldr	r0, [pc, #56]	; (12390 <mayfly_pend+0x50>)
   12358:	f7ee fe18 	bl	f8c <printk>
   1235c:	4040      	eors	r0, r0
   1235e:	f380 8811 	msr	BASEPRI, r0
   12362:	f04f 0004 	mov.w	r0, #4
   12366:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12368:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1236c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   12370:	b003      	add	sp, #12
   12372:	f85d fb04 	ldr.w	pc, [sp], #4
   12376:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1237a:	e7f7      	b.n	1236c <mayfly_pend+0x2c>
   1237c:	e000e100 	.word	0xe000e100
   12380:	000142a9 	.word	0x000142a9
   12384:	00014ff8 	.word	0x00014ff8
   12388:	000175fb 	.word	0x000175fb
   1238c:	00015047 	.word	0x00015047
   12390:	00014f97 	.word	0x00014f97

00012394 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12394:	2803      	cmp	r0, #3
{
   12396:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12398:	d90e      	bls.n	123b8 <hal_ticker_instance0_caller_id_get+0x24>
   1239a:	4b0e      	ldr	r3, [pc, #56]	; (123d4 <hal_ticker_instance0_caller_id_get+0x40>)
   1239c:	9301      	str	r3, [sp, #4]
   1239e:	9300      	str	r3, [sp, #0]
   123a0:	4a0d      	ldr	r2, [pc, #52]	; (123d8 <hal_ticker_instance0_caller_id_get+0x44>)
   123a2:	4b0e      	ldr	r3, [pc, #56]	; (123dc <hal_ticker_instance0_caller_id_get+0x48>)
   123a4:	490e      	ldr	r1, [pc, #56]	; (123e0 <hal_ticker_instance0_caller_id_get+0x4c>)
   123a6:	480f      	ldr	r0, [pc, #60]	; (123e4 <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   123a8:	f7ee fdf0 	bl	f8c <printk>
   123ac:	4040      	eors	r0, r0
   123ae:	f380 8811 	msr	BASEPRI, r0
   123b2:	f04f 0004 	mov.w	r0, #4
   123b6:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   123b8:	4b0b      	ldr	r3, [pc, #44]	; (123e8 <hal_ticker_instance0_caller_id_get+0x54>)
   123ba:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   123bc:	b938      	cbnz	r0, 123ce <hal_ticker_instance0_caller_id_get+0x3a>
   123be:	4b05      	ldr	r3, [pc, #20]	; (123d4 <hal_ticker_instance0_caller_id_get+0x40>)
   123c0:	9301      	str	r3, [sp, #4]
   123c2:	9300      	str	r3, [sp, #0]
   123c4:	4a04      	ldr	r2, [pc, #16]	; (123d8 <hal_ticker_instance0_caller_id_get+0x44>)
   123c6:	4b05      	ldr	r3, [pc, #20]	; (123dc <hal_ticker_instance0_caller_id_get+0x48>)
   123c8:	4905      	ldr	r1, [pc, #20]	; (123e0 <hal_ticker_instance0_caller_id_get+0x4c>)
   123ca:	4808      	ldr	r0, [pc, #32]	; (123ec <hal_ticker_instance0_caller_id_get+0x58>)
   123cc:	e7ec      	b.n	123a8 <hal_ticker_instance0_caller_id_get+0x14>

	return caller_id;
}
   123ce:	b003      	add	sp, #12
   123d0:	f85d fb04 	ldr.w	pc, [sp], #4
   123d4:	000142a9 	.word	0x000142a9
   123d8:	00014ff8 	.word	0x00014ff8
   123dc:	00017637 	.word	0x00017637
   123e0:	00015047 	.word	0x00015047
   123e4:	00017679 	.word	0x00017679
   123e8:	00017675 	.word	0x00017675
   123ec:	000176ba 	.word	0x000176ba

000123f0 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   123f0:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   123f2:	3802      	subs	r0, #2
{
   123f4:	461c      	mov	r4, r3
	switch (caller_id) {
   123f6:	2803      	cmp	r0, #3
   123f8:	d818      	bhi.n	1242c <hal_ticker_instance0_sched+0x3c>
   123fa:	e8df f000 	tbb	[pc, r0]
   123fe:	0d02      	.short	0x0d02
   12400:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   12402:	2903      	cmp	r1, #3
   12404:	d112      	bne.n	1242c <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   12406:	4b19      	ldr	r3, [pc, #100]	; (1246c <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   12408:	2100      	movs	r1, #0
			m.param = instance;
   1240a:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1240c:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   1240e:	b002      	add	sp, #8
   12410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12414:	f7f4 bb32 	b.w	6a7c <mayfly_enqueue>
		switch (callee_id) {
   12418:	2904      	cmp	r1, #4
   1241a:	d107      	bne.n	1242c <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   1241c:	4b14      	ldr	r3, [pc, #80]	; (12470 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1241e:	2101      	movs	r1, #1
			m.param = instance;
   12420:	609c      	str	r4, [r3, #8]
   12422:	e7f3      	b.n	1240c <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   12424:	2903      	cmp	r1, #3
   12426:	d010      	beq.n	1244a <hal_ticker_instance0_sched+0x5a>
   12428:	2904      	cmp	r1, #4
   1242a:	d013      	beq.n	12454 <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
   1242c:	4b11      	ldr	r3, [pc, #68]	; (12474 <hal_ticker_instance0_sched+0x84>)
   1242e:	9301      	str	r3, [sp, #4]
   12430:	9300      	str	r3, [sp, #0]
   12432:	4a11      	ldr	r2, [pc, #68]	; (12478 <hal_ticker_instance0_sched+0x88>)
   12434:	4b11      	ldr	r3, [pc, #68]	; (1247c <hal_ticker_instance0_sched+0x8c>)
   12436:	4912      	ldr	r1, [pc, #72]	; (12480 <hal_ticker_instance0_sched+0x90>)
   12438:	4812      	ldr	r0, [pc, #72]	; (12484 <hal_ticker_instance0_sched+0x94>)
   1243a:	f7ee fda7 	bl	f8c <printk>
   1243e:	4040      	eors	r0, r0
   12440:	f380 8811 	msr	BASEPRI, r0
   12444:	f04f 0004 	mov.w	r0, #4
   12448:	df02      	svc	2
			m.param = instance;
   1244a:	4b0f      	ldr	r3, [pc, #60]	; (12488 <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1244c:	2100      	movs	r1, #0
			m.param = instance;
   1244e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12450:	2001      	movs	r0, #1
   12452:	e7dc      	b.n	1240e <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   12454:	4b0d      	ldr	r3, [pc, #52]	; (1248c <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12456:	2101      	movs	r1, #1
			m.param = instance;
   12458:	609c      	str	r4, [r3, #8]
   1245a:	e7f9      	b.n	12450 <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
   1245c:	2904      	cmp	r1, #4
   1245e:	d1e5      	bne.n	1242c <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   12460:	4b0b      	ldr	r3, [pc, #44]	; (12490 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12462:	2101      	movs	r1, #1
			m.param = instance;
   12464:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12466:	2003      	movs	r0, #3
   12468:	e7d1      	b.n	1240e <hal_ticker_instance0_sched+0x1e>
   1246a:	bf00      	nop
   1246c:	20003e18 	.word	0x20003e18
   12470:	20003e28 	.word	0x20003e28
   12474:	000142a9 	.word	0x000142a9
   12478:	00014ff8 	.word	0x00014ff8
   1247c:	0001765a 	.word	0x0001765a
   12480:	00015047 	.word	0x00015047
   12484:	00014f97 	.word	0x00014f97
   12488:	20003e38 	.word	0x20003e38
   1248c:	20003e48 	.word	0x20003e48
   12490:	20003e58 	.word	0x20003e58

00012494 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   12494:	4601      	mov	r1, r0
   12496:	2000      	movs	r0, #0
   12498:	f7ff ba62 	b.w	11960 <cntr_cmp_set>

0001249c <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   1249c:	4770      	bx	lr
	...

000124a0 <net_buf_pool_get>:
}
   124a0:	4b01      	ldr	r3, [pc, #4]	; (124a8 <net_buf_pool_get+0x8>)
   124a2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   124a6:	4770      	bx	lr
   124a8:	20003f2c 	.word	0x20003f2c

000124ac <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   124ac:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   124ae:	4b04      	ldr	r3, [pc, #16]	; (124c0 <net_buf_id+0x14>)
   124b0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   124b4:	69db      	ldr	r3, [r3, #28]
   124b6:	1ac0      	subs	r0, r0, r3
}
   124b8:	4b02      	ldr	r3, [pc, #8]	; (124c4 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   124ba:	10c0      	asrs	r0, r0, #3
}
   124bc:	4358      	muls	r0, r3
   124be:	4770      	bx	lr
   124c0:	20003f2c 	.word	0x20003f2c
   124c4:	aaaaaaab 	.word	0xaaaaaaab

000124c8 <fixed_data_alloc>:
{
   124c8:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   124ca:	4b09      	ldr	r3, [pc, #36]	; (124f0 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   124cc:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   124ce:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   124d2:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   124d4:	699b      	ldr	r3, [r3, #24]
   124d6:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   124d8:	6823      	ldr	r3, [r4, #0]
   124da:	429a      	cmp	r2, r3
   124dc:	bf94      	ite	ls
   124de:	600a      	strls	r2, [r1, #0]
   124e0:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   124e2:	f7ff ffe3 	bl	124ac <net_buf_id>
   124e6:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   124ea:	fb02 3000 	mla	r0, r2, r0, r3
   124ee:	bd10      	pop	{r4, pc}
   124f0:	20003f2c 	.word	0x20003f2c

000124f4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   124f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   124f8:	4605      	mov	r5, r0
   124fa:	9101      	str	r1, [sp, #4]
   124fc:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   124fe:	f001 f961 	bl	137c4 <_impl_k_uptime_get_32>
   12502:	4607      	mov	r7, r0
	__asm__ volatile(
   12504:	f04f 0320 	mov.w	r3, #32
   12508:	f3ef 8811 	mrs	r8, BASEPRI
   1250c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   12510:	8a6b      	ldrh	r3, [r5, #18]
   12512:	2b00      	cmp	r3, #0
   12514:	d03d      	beq.n	12592 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   12516:	8a2a      	ldrh	r2, [r5, #16]
   12518:	429a      	cmp	r2, r3
   1251a:	d92a      	bls.n	12572 <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   1251c:	2100      	movs	r1, #0
   1251e:	4628      	mov	r0, r5
   12520:	f000 fe6a 	bl	131f8 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   12524:	b328      	cbz	r0, 12572 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12526:	f388 8811 	msr	BASEPRI, r8
   1252a:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1252c:	9b01      	ldr	r3, [sp, #4]
   1252e:	2b00      	cmp	r3, #0
   12530:	d03c      	beq.n	125ac <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   12532:	1c73      	adds	r3, r6, #1
   12534:	2b01      	cmp	r3, #1
   12536:	d906      	bls.n	12546 <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   12538:	f001 f944 	bl	137c4 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   1253c:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   1253e:	42b0      	cmp	r0, r6
   12540:	bf94      	ite	ls
   12542:	1a36      	subls	r6, r6, r0
   12544:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12546:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   12548:	4f1e      	ldr	r7, [pc, #120]	; (125c4 <net_buf_alloc_len+0xd0>)
   1254a:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   1254e:	4632      	mov	r2, r6
   12550:	699b      	ldr	r3, [r3, #24]
   12552:	681b      	ldr	r3, [r3, #0]
   12554:	a901      	add	r1, sp, #4
   12556:	681b      	ldr	r3, [r3, #0]
   12558:	4620      	mov	r0, r4
   1255a:	4798      	blx	r3
   1255c:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1255e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   12560:	bb28      	cbnz	r0, 125ae <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   12562:	79a0      	ldrb	r0, [r4, #6]
   12564:	4621      	mov	r1, r4
   12566:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1256a:	f000 fe26 	bl	131ba <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1256e:	462c      	mov	r4, r5
   12570:	e018      	b.n	125a4 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   12572:	8a68      	ldrh	r0, [r5, #18]
   12574:	1e43      	subs	r3, r0, #1
   12576:	826b      	strh	r3, [r5, #18]
   12578:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1257c:	8a2c      	ldrh	r4, [r5, #16]
   1257e:	1a24      	subs	r4, r4, r0
   12580:	69e8      	ldr	r0, [r5, #28]
   12582:	2318      	movs	r3, #24
   12584:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   12588:	4b0e      	ldr	r3, [pc, #56]	; (125c4 <net_buf_alloc_len+0xd0>)
   1258a:	1aed      	subs	r5, r5, r3
   1258c:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   1258e:	71a5      	strb	r5, [r4, #6]
		goto success;
   12590:	e7cc      	b.n	1252c <net_buf_alloc_len+0x38>
   12592:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   12596:	4631      	mov	r1, r6
   12598:	4628      	mov	r0, r5
   1259a:	f000 fe2d 	bl	131f8 <_impl_k_queue_get>
		return NULL;
   1259e:	4604      	mov	r4, r0
	if (!buf) {
   125a0:	2800      	cmp	r0, #0
   125a2:	d1c3      	bne.n	1252c <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   125a4:	4620      	mov	r0, r4
   125a6:	b002      	add	sp, #8
   125a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   125ac:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   125ae:	2301      	movs	r3, #1
   125b0:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   125b2:	2300      	movs	r3, #0
	buf->frags = NULL;
   125b4:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   125b6:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   125b8:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   125ba:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   125bc:	6923      	ldr	r3, [r4, #16]
   125be:	81e2      	strh	r2, [r4, #14]
   125c0:	60a3      	str	r3, [r4, #8]
	return buf;
   125c2:	e7ef      	b.n	125a4 <net_buf_alloc_len+0xb0>
   125c4:	20003f2c 	.word	0x20003f2c

000125c8 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   125c8:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   125ca:	685b      	ldr	r3, [r3, #4]
   125cc:	460a      	mov	r2, r1
   125ce:	6819      	ldr	r1, [r3, #0]
   125d0:	f7ff bf90 	b.w	124f4 <net_buf_alloc_len>

000125d4 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   125d4:	b570      	push	{r4, r5, r6, lr}
   125d6:	4606      	mov	r6, r0
   125d8:	f000 fe0e 	bl	131f8 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   125dc:	4605      	mov	r5, r0
   125de:	b128      	cbz	r0, 125ec <net_buf_get+0x18>
   125e0:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   125e2:	7963      	ldrb	r3, [r4, #5]
   125e4:	f013 0301 	ands.w	r3, r3, #1
   125e8:	d102      	bne.n	125f0 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   125ea:	6023      	str	r3, [r4, #0]

	return buf;
}
   125ec:	4628      	mov	r0, r5
   125ee:	bd70      	pop	{r4, r5, r6, pc}
   125f0:	2100      	movs	r1, #0
   125f2:	4630      	mov	r0, r6
   125f4:	f000 fe00 	bl	131f8 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   125f8:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   125fa:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   125fc:	f023 0301 	bic.w	r3, r3, #1
   12600:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12602:	4604      	mov	r4, r0
   12604:	e7ed      	b.n	125e2 <net_buf_get+0xe>

00012606 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   12606:	6883      	ldr	r3, [r0, #8]
   12608:	4419      	add	r1, r3
   1260a:	6001      	str	r1, [r0, #0]
   1260c:	4770      	bx	lr

0001260e <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1260e:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   12610:	460a      	mov	r2, r1
   12612:	6814      	ldr	r4, [r2, #0]
   12614:	b914      	cbnz	r4, 1261c <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   12616:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   12618:	f000 bdd4 	b.w	131c4 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1261c:	7953      	ldrb	r3, [r2, #5]
   1261e:	f043 0301 	orr.w	r3, r3, #1
   12622:	7153      	strb	r3, [r2, #5]
   12624:	4622      	mov	r2, r4
   12626:	e7f4      	b.n	12612 <net_buf_put+0x4>

00012628 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   12628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1262a:	4d15      	ldr	r5, [pc, #84]	; (12680 <net_buf_unref+0x58>)
   1262c:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1262e:	2600      	movs	r6, #0
	while (buf) {
   12630:	b904      	cbnz	r4, 12634 <net_buf_unref+0xc>
   12632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   12634:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   12636:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   12638:	3b01      	subs	r3, #1
   1263a:	b2db      	uxtb	r3, r3
   1263c:	7123      	strb	r3, [r4, #4]
   1263e:	2b00      	cmp	r3, #0
   12640:	d1f7      	bne.n	12632 <net_buf_unref+0xa>
		if (buf->__buf) {
   12642:	6921      	ldr	r1, [r4, #16]
   12644:	b159      	cbz	r1, 1265e <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   12646:	7963      	ldrb	r3, [r4, #5]
   12648:	079b      	lsls	r3, r3, #30
   1264a:	d407      	bmi.n	1265c <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1264c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1264e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   12652:	4620      	mov	r0, r4
   12654:	699b      	ldr	r3, [r3, #24]
   12656:	681b      	ldr	r3, [r3, #0]
   12658:	689b      	ldr	r3, [r3, #8]
   1265a:	4798      	blx	r3
			buf->__buf = NULL;
   1265c:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1265e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   12660:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   12662:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   12666:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   12668:	695b      	ldr	r3, [r3, #20]
   1266a:	b11b      	cbz	r3, 12674 <net_buf_unref+0x4c>
			pool->destroy(buf);
   1266c:	4620      	mov	r0, r4
   1266e:	4798      	blx	r3
{
   12670:	463c      	mov	r4, r7
   12672:	e7dd      	b.n	12630 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   12674:	4621      	mov	r1, r4
   12676:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   1267a:	f000 fd9e 	bl	131ba <k_queue_prepend>
   1267e:	e7f7      	b.n	12670 <net_buf_unref+0x48>
   12680:	20003f2c 	.word	0x20003f2c

00012684 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   12684:	7903      	ldrb	r3, [r0, #4]
   12686:	3301      	adds	r3, #1
   12688:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1268a:	4770      	bx	lr

0001268c <net_buf_simple_add>:
	return buf->data + buf->len;
   1268c:	8883      	ldrh	r3, [r0, #4]
   1268e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   12690:	4419      	add	r1, r3
   12692:	8081      	strh	r1, [r0, #4]
	return tail;
}
   12694:	18d0      	adds	r0, r2, r3
   12696:	4770      	bx	lr

00012698 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   12698:	b430      	push	{r4, r5}
   1269a:	8883      	ldrh	r3, [r0, #4]
   1269c:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   1269e:	189d      	adds	r5, r3, r2
   126a0:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   126a2:	18e0      	adds	r0, r4, r3
}
   126a4:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   126a6:	f7ef baa9 	b.w	1bfc <memcpy>

000126aa <net_buf_simple_add_u8>:
   126aa:	8883      	ldrh	r3, [r0, #4]
   126ac:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   126ae:	b510      	push	{r4, lr}
	buf->len += len;
   126b0:	1c5c      	adds	r4, r3, #1
   126b2:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   126b4:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   126b6:	18d0      	adds	r0, r2, r3
   126b8:	bd10      	pop	{r4, pc}

000126ba <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   126ba:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   126bc:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   126be:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   126c0:	4411      	add	r1, r2
	buf->data -= len;
   126c2:	6003      	str	r3, [r0, #0]
	buf->len += len;
   126c4:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   126c6:	4618      	mov	r0, r3
   126c8:	4770      	bx	lr

000126ca <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   126ca:	8883      	ldrh	r3, [r0, #4]
   126cc:	1a5b      	subs	r3, r3, r1
   126ce:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   126d0:	6803      	ldr	r3, [r0, #0]
   126d2:	4419      	add	r1, r3
   126d4:	6001      	str	r1, [r0, #0]
}
   126d6:	4608      	mov	r0, r1
   126d8:	4770      	bx	lr

000126da <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   126da:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   126dc:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   126de:	2101      	movs	r1, #1
	val = buf->data[0];
   126e0:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   126e2:	f7ff fff2 	bl	126ca <net_buf_simple_pull>

	return val;
}
   126e6:	4610      	mov	r0, r2
   126e8:	bd08      	pop	{r3, pc}

000126ea <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   126ea:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   126ec:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   126ee:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   126f0:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   126f2:	f7ff ffea 	bl	126ca <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   126f6:	4610      	mov	r0, r2
   126f8:	bd08      	pop	{r3, pc}

000126fa <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   126fa:	6802      	ldr	r2, [r0, #0]
   126fc:	6880      	ldr	r0, [r0, #8]
}
   126fe:	1a10      	subs	r0, r2, r0
   12700:	4770      	bx	lr

00012702 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   12702:	6802      	ldr	r2, [r0, #0]
   12704:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   12706:	88c3      	ldrh	r3, [r0, #6]
   12708:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   1270a:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1270c:	1a9b      	subs	r3, r3, r2
}
   1270e:	1a18      	subs	r0, r3, r0
   12710:	4770      	bx	lr

00012712 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12712:	6800      	ldr	r0, [r0, #0]
   12714:	6880      	ldr	r0, [r0, #8]
   12716:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   12718:	b941      	cbnz	r1, 1272c <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   1271a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   1271e:	fa21 f202 	lsr.w	r2, r1, r2
   12722:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   12726:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   12728:	2000      	movs	r0, #0
   1272a:	4770      	bx	lr
		*value = gpio->IN;
   1272c:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   12730:	e7f9      	b.n	12726 <gpio_nrf5_read+0x14>

00012732 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12732:	6800      	ldr	r0, [r0, #0]
   12734:	6880      	ldr	r0, [r0, #8]
   12736:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   12738:	b949      	cbnz	r1, 1274e <gpio_nrf5_write+0x1c>
   1273a:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   1273c:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   1273e:	b11b      	cbz	r3, 12748 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   12740:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   12744:	2000      	movs	r0, #0
   12746:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   12748:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   1274c:	e7fa      	b.n	12744 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   1274e:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   12752:	e7f7      	b.n	12744 <gpio_nrf5_write+0x12>

00012754 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12754:	6883      	ldr	r3, [r0, #8]
   12756:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   12758:	b172      	cbz	r2, 12778 <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   1275a:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   1275c:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1275e:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   12760:	b902      	cbnz	r2, 12764 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   12762:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   12764:	2000      	movs	r0, #0
   12766:	4770      	bx	lr
	parent->next = child;
   12768:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   1276a:	6858      	ldr	r0, [r3, #4]
   1276c:	4281      	cmp	r1, r0
	list->tail = node;
   1276e:	bf08      	it	eq
   12770:	605a      	streq	r2, [r3, #4]
   12772:	e00d      	b.n	12790 <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   12774:	4602      	mov	r2, r0
   12776:	6800      	ldr	r0, [r0, #0]
   12778:	2800      	cmp	r0, #0
   1277a:	d0f3      	beq.n	12764 <gpio_nrf5_manage_callback+0x10>
   1277c:	4281      	cmp	r1, r0
   1277e:	d1f9      	bne.n	12774 <gpio_nrf5_manage_callback+0x20>
   12780:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   12782:	2a00      	cmp	r2, #0
   12784:	d1f0      	bne.n	12768 <gpio_nrf5_manage_callback+0x14>
   12786:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12788:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   1278a:	4291      	cmp	r1, r2
   1278c:	d100      	bne.n	12790 <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   1278e:	6058      	str	r0, [r3, #4]
	parent->next = child;
   12790:	2300      	movs	r3, #0
   12792:	600b      	str	r3, [r1, #0]
   12794:	e7e6      	b.n	12764 <gpio_nrf5_manage_callback+0x10>
	...

00012798 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   12798:	4b0c      	ldr	r3, [pc, #48]	; (127cc <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   1279a:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   1279c:	4d0c      	ldr	r5, [pc, #48]	; (127d0 <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   1279e:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   127a0:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   127a2:	fa24 f203 	lsr.w	r2, r4, r3
   127a6:	07d2      	lsls	r2, r2, #31
   127a8:	d508      	bpl.n	127bc <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   127aa:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   127ae:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   127b2:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   127b6:	4282      	cmp	r2, r0
   127b8:	d100      	bne.n	127bc <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   127ba:	b121      	cbz	r1, 127c6 <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   127bc:	3301      	adds	r3, #1
   127be:	2b08      	cmp	r3, #8
   127c0:	d1ef      	bne.n	127a2 <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   127c2:	f06f 0312 	mvn.w	r3, #18
}
   127c6:	4618      	mov	r0, r3
   127c8:	bd30      	pop	{r4, r5, pc}
   127ca:	bf00      	nop
   127cc:	200016f4 	.word	0x200016f4
   127d0:	40006000 	.word	0x40006000

000127d4 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   127d4:	b570      	push	{r4, r5, r6, lr}
   127d6:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   127d8:	460d      	mov	r5, r1
   127da:	b9c9      	cbnz	r1, 12810 <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   127dc:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   127de:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   127e0:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   127e2:	4610      	mov	r0, r2
   127e4:	7919      	ldrb	r1, [r3, #4]
   127e6:	f7ff ffd7 	bl	12798 <gpiote_find_channel.isra.4>
		if (i < 0) {
   127ea:	2800      	cmp	r0, #0
   127ec:	db12      	blt.n	12814 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   127ee:	68b2      	ldr	r2, [r6, #8]
   127f0:	2301      	movs	r3, #1
   127f2:	fa03 f404 	lsl.w	r4, r3, r4
   127f6:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   127f8:	f100 0140 	add.w	r1, r0, #64	; 0x40
   127fc:	4a06      	ldr	r2, [pc, #24]	; (12818 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   127fe:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   12800:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   12804:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   12808:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   1280c:	4628      	mov	r0, r5
   1280e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   12810:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   12814:	bd70      	pop	{r4, r5, r6, pc}
   12816:	bf00      	nop
   12818:	40006000 	.word	0x40006000

0001281c <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   1281c:	b570      	push	{r4, r5, r6, lr}
   1281e:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12820:	460d      	mov	r5, r1
   12822:	b9b1      	cbnz	r1, 12852 <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   12824:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12826:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   12828:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   1282a:	4610      	mov	r0, r2
   1282c:	7919      	ldrb	r1, [r3, #4]
   1282e:	f7ff ffb3 	bl	12798 <gpiote_find_channel.isra.4>
		if (i < 0) {
   12832:	2800      	cmp	r0, #0
   12834:	db0f      	blt.n	12856 <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   12836:	68b2      	ldr	r2, [r6, #8]
   12838:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   1283a:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   1283e:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   12842:	4b05      	ldr	r3, [pc, #20]	; (12858 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   12844:	ea22 0404 	bic.w	r4, r2, r4
   12848:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   1284a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   1284e:	4628      	mov	r0, r5
   12850:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   12852:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   12856:	bd70      	pop	{r4, r5, r6, pc}
   12858:	40006000 	.word	0x40006000

0001285c <gpio_nrf5_config>:
{
   1285c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12860:	6806      	ldr	r6, [r0, #0]
{
   12862:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12864:	68b2      	ldr	r2, [r6, #8]
   12866:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12868:	b119      	cbz	r1, 12872 <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   1286a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1286e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   12872:	f403 7240 	and.w	r2, r3, #768	; 0x300
   12876:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   1287a:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   1287e:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   12882:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   12886:	d058      	beq.n	1293a <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   12888:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1288c:	bf0c      	ite	eq
   1288e:	2204      	moveq	r2, #4
   12890:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   12892:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   12896:	bf08      	it	eq
   12898:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   1289a:	f013 0f01 	tst.w	r3, #1
   1289e:	ea4f 0180 	mov.w	r1, r0, lsl #2
   128a2:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 12970 <gpio_nrf5_config+0x114>
   128a6:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   128aa:	d04f      	beq.n	1294c <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   128ac:	2a0c      	cmp	r2, #12
   128ae:	d146      	bne.n	1293e <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   128b0:	2701      	movs	r7, #1
   128b2:	40a7      	lsls	r7, r4
   128b4:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   128b8:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   128ba:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   128be:	f041 0103 	orr.w	r1, r1, #3
   128c2:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   128c4:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   128c8:	f013 0002 	ands.w	r0, r3, #2
   128cc:	d049      	beq.n	12962 <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   128ce:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   128d0:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   128d2:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   128d6:	d5c8      	bpl.n	1286a <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   128d8:	065a      	lsls	r2, r3, #25
   128da:	d43d      	bmi.n	12958 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   128dc:	f013 0f04 	tst.w	r3, #4
   128e0:	bf14      	ite	ne
   128e2:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   128e6:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   128ea:	4e1f      	ldr	r6, [pc, #124]	; (12968 <gpio_nrf5_config+0x10c>)
   128ec:	6837      	ldr	r7, [r6, #0]
   128ee:	4638      	mov	r0, r7
   128f0:	f7ed fca8 	bl	244 <__popcountsi2>
   128f4:	2808      	cmp	r0, #8
   128f6:	d032      	beq.n	1295e <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   128f8:	4641      	mov	r1, r8
   128fa:	4620      	mov	r0, r4
   128fc:	f7ff ff4c 	bl	12798 <gpiote_find_channel.isra.4>
		if (i < 0) {
   12900:	2800      	cmp	r0, #0
   12902:	da08      	bge.n	12916 <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   12904:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   12906:	fa93 f0a3 	rbit	r0, r3
   1290a:	2b00      	cmp	r3, #0
   1290c:	fab0 f080 	clz	r0, r0
   12910:	bf08      	it	eq
   12912:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   12916:	2301      	movs	r3, #1
   12918:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   1291a:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   1291c:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   1291e:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   12922:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   12924:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   12928:	4b10      	ldr	r3, [pc, #64]	; (1296c <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   1292a:	f044 0401 	orr.w	r4, r4, #1
   1292e:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   12930:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   12934:	2000      	movs	r0, #0
   12936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   1293a:	220c      	movs	r2, #12
   1293c:	e7a9      	b.n	12892 <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   1293e:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   12940:	bf02      	ittt	eq
   12942:	2701      	moveq	r7, #1
   12944:	40a7      	lsleq	r7, r4
   12946:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   1294a:	e7b5      	b.n	128b8 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   1294c:	4461      	add	r1, ip
   1294e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   12952:	430a      	orrs	r2, r1
   12954:	433a      	orrs	r2, r7
   12956:	e7b5      	b.n	128c4 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   12958:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   1295c:	e7c5      	b.n	128ea <gpio_nrf5_config+0x8e>
			return -EIO;
   1295e:	f06f 0004 	mvn.w	r0, #4
}
   12962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12966:	bf00      	nop
   12968:	200016f4 	.word	0x200016f4
   1296c:	40006000 	.word	0x40006000
   12970:	000176f8 	.word	0x000176f8

00012974 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   12974:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   12976:	2200      	movs	r2, #0
   12978:	2105      	movs	r1, #5
   1297a:	2006      	movs	r0, #6
   1297c:	f7ee ff9e 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   12980:	2006      	movs	r0, #6
   12982:	f7ee ff69 	bl	1858 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   12986:	2000      	movs	r0, #0
   12988:	bd08      	pop	{r3, pc}
	...

0001298c <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   1298c:	2100      	movs	r1, #0
{
   1298e:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   12990:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   12992:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   12994:	2501      	movs	r5, #1
   12996:	008b      	lsls	r3, r1, #2
   12998:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1299c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   129a0:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   129a4:	b140      	cbz	r0, 129b8 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   129a6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   129aa:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   129ae:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   129b2:	fa05 f303 	lsl.w	r3, r5, r3
   129b6:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   129b8:	3101      	adds	r1, #1
   129ba:	2908      	cmp	r1, #8
   129bc:	d1eb      	bne.n	12996 <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   129be:	4e08      	ldr	r6, [pc, #32]	; (129e0 <gpio_nrf5_port_isr+0x54>)
   129c0:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   129c2:	689d      	ldr	r5, [r3, #8]
   129c4:	681c      	ldr	r4, [r3, #0]
   129c6:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   129c8:	b14c      	cbz	r4, 129de <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   129ca:	68a3      	ldr	r3, [r4, #8]
   129cc:	421d      	tst	r5, r3
   129ce:	d004      	beq.n	129da <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   129d0:	6863      	ldr	r3, [r4, #4]
   129d2:	462a      	mov	r2, r5
   129d4:	4621      	mov	r1, r4
   129d6:	4630      	mov	r0, r6
   129d8:	4798      	blx	r3
	return node->next;
   129da:	6824      	ldr	r4, [r4, #0]
   129dc:	e7f4      	b.n	129c8 <gpio_nrf5_port_isr+0x3c>
   129de:	bd70      	pop	{r4, r5, r6, pc}
   129e0:	20003ed4 	.word	0x20003ed4

000129e4 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   129e4:	4b03      	ldr	r3, [pc, #12]	; (129f4 <uart_nrfx_err_check+0x10>)
   129e6:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   129e8:	b118      	cbz	r0, 129f2 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   129ea:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   129ee:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   129f2:	4770      	bx	lr
   129f4:	40002124 	.word	0x40002124

000129f8 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   129f8:	4b07      	ldr	r3, [pc, #28]	; (12a18 <uart_nrfx_poll_out+0x20>)
   129fa:	2200      	movs	r2, #0
   129fc:	601a      	str	r2, [r3, #0]
{
   129fe:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12a00:	681a      	ldr	r2, [r3, #0]
   12a02:	9201      	str	r2, [sp, #4]
    (void)dummy;
   12a04:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   12a06:	4a05      	ldr	r2, [pc, #20]	; (12a1c <uart_nrfx_poll_out+0x24>)
   12a08:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12a0c:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   12a0e:	2a00      	cmp	r2, #0
   12a10:	d0fc      	beq.n	12a0c <uart_nrfx_poll_out+0x14>
}
   12a12:	4608      	mov	r0, r1
   12a14:	b002      	add	sp, #8
   12a16:	4770      	bx	lr
   12a18:	4000211c 	.word	0x4000211c
   12a1c:	40002000 	.word	0x40002000

00012a20 <uart_nrfx_poll_in>:
   12a20:	4b08      	ldr	r3, [pc, #32]	; (12a44 <uart_nrfx_poll_in+0x24>)
   12a22:	681a      	ldr	r2, [r3, #0]
{
   12a24:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   12a26:	b152      	cbz	r2, 12a3e <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12a28:	2000      	movs	r0, #0
   12a2a:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12a2c:	681b      	ldr	r3, [r3, #0]
   12a2e:	9301      	str	r3, [sp, #4]
    (void)dummy;
   12a30:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   12a32:	4b05      	ldr	r3, [pc, #20]	; (12a48 <uart_nrfx_poll_in+0x28>)
   12a34:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   12a38:	700b      	strb	r3, [r1, #0]
}
   12a3a:	b002      	add	sp, #8
   12a3c:	4770      	bx	lr
		return -1;
   12a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12a42:	e7fa      	b.n	12a3a <uart_nrfx_poll_in+0x1a>
   12a44:	40002108 	.word	0x40002108
   12a48:	40002000 	.word	0x40002000

00012a4c <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   12a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   12a4e:	4819      	ldr	r0, [pc, #100]	; (12ab4 <uart_nrfx_init+0x68>)
   12a50:	f000 f98c 	bl	12d6c <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   12a54:	6843      	ldr	r3, [r0, #4]
   12a56:	4604      	mov	r4, r0
   12a58:	681d      	ldr	r5, [r3, #0]
   12a5a:	2206      	movs	r2, #6
   12a5c:	f240 1301 	movw	r3, #257	; 0x101
   12a60:	2100      	movs	r1, #0
   12a62:	47a8      	blx	r5
   12a64:	6863      	ldr	r3, [r4, #4]
   12a66:	681d      	ldr	r5, [r3, #0]
   12a68:	2300      	movs	r3, #0
   12a6a:	4619      	mov	r1, r3
   12a6c:	2208      	movs	r2, #8
   12a6e:	4620      	mov	r0, r4
   12a70:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   12a72:	4b11      	ldr	r3, [pc, #68]	; (12ab8 <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12a74:	4911      	ldr	r1, [pc, #68]	; (12abc <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   12a76:	2208      	movs	r2, #8
   12a78:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   12a7c:	2206      	movs	r2, #6
   12a7e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   12a82:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   12a84:	4a0e      	ldr	r2, [pc, #56]	; (12ac0 <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   12a86:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   12a8a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   12a8e:	2204      	movs	r2, #4
   12a90:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12a94:	4a0b      	ldr	r2, [pc, #44]	; (12ac4 <uart_nrfx_init+0x78>)
   12a96:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12a98:	6812      	ldr	r2, [r2, #0]
   12a9a:	9201      	str	r2, [sp, #4]
    (void)dummy;
   12a9c:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12a9e:	4a0a      	ldr	r2, [pc, #40]	; (12ac8 <uart_nrfx_init+0x7c>)
   12aa0:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12aa2:	6812      	ldr	r2, [r2, #0]
   12aa4:	9200      	str	r2, [sp, #0]
    (void)dummy;
   12aa6:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12aa8:	2201      	movs	r2, #1
   12aaa:	600a      	str	r2, [r1, #0]
   12aac:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   12aae:	b003      	add	sp, #12
   12ab0:	bd30      	pop	{r4, r5, pc}
   12ab2:	bf00      	nop
   12ab4:	0001775c 	.word	0x0001775c
   12ab8:	40002000 	.word	0x40002000
   12abc:	40002008 	.word	0x40002008
   12ac0:	01d7e000 	.word	0x01d7e000
   12ac4:	4000211c 	.word	0x4000211c
   12ac8:	40002108 	.word	0x40002108

00012acc <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   12acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   12ad0:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   12ad2:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   12ad4:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   12ad6:	42a3      	cmp	r3, r4
	d = &rand[octets];
   12ad8:	440a      	add	r2, r1
	s = &rng->rand[first];
   12ada:	4406      	add	r6, r0
	if (first <= last) {
   12adc:	d81f      	bhi.n	12b1e <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   12ade:	1ae4      	subs	r4, r4, r3
   12ae0:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   12ae2:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   12ae4:	bf3e      	ittt	cc
   12ae6:	1a64      	subcc	r4, r4, r1
   12ae8:	b2e7      	uxtbcc	r7, r4
   12aea:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   12aec:	4423      	add	r3, r4
		octets -= avail;
   12aee:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   12af2:	bf28      	it	cs
   12af4:	2700      	movcs	r7, #0
		first += avail;
   12af6:	b2db      	uxtb	r3, r3
		octets -= avail;
   12af8:	b2c9      	uxtb	r1, r1
   12afa:	4434      	add	r4, r6

		while (avail--) {
   12afc:	42a6      	cmp	r6, r4
   12afe:	d109      	bne.n	12b14 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   12b00:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   12b02:	7843      	ldrb	r3, [r0, #1]
   12b04:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   12b06:	bf82      	ittt	hi
   12b08:	4b20      	ldrhi	r3, [pc, #128]	; (12b8c <get+0xc0>)
   12b0a:	2201      	movhi	r2, #1
   12b0c:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   12b0e:	4608      	mov	r0, r1
   12b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   12b14:	f816 5b01 	ldrb.w	r5, [r6], #1
   12b18:	f802 5d01 	strb.w	r5, [r2, #-1]!
   12b1c:	e7ee      	b.n	12afc <get+0x30>
		avail = rng->count - first;
   12b1e:	7805      	ldrb	r5, [r0, #0]
   12b20:	1aed      	subs	r5, r5, r3
   12b22:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   12b24:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   12b26:	bf3f      	itttt	cc
   12b28:	1a67      	subcc	r7, r4, r1
   12b2a:	19ed      	addcc	r5, r5, r7
   12b2c:	b2ef      	uxtbcc	r7, r5
   12b2e:	460d      	movcc	r5, r1
			first += avail;
   12b30:	bf38      	it	cc
   12b32:	185b      	addcc	r3, r3, r1
		octets -= avail;
   12b34:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   12b38:	bf32      	itee	cc
   12b3a:	b2db      	uxtbcc	r3, r3
   12b3c:	4627      	movcs	r7, r4
			first = 0;
   12b3e:	2300      	movcs	r3, #0
		octets -= avail;
   12b40:	b2c9      	uxtb	r1, r1
   12b42:	4696      	mov	lr, r2
   12b44:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   12b48:	4566      	cmp	r6, ip
   12b4a:	d119      	bne.n	12b80 <get+0xb4>
   12b4c:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   12b4e:	2900      	cmp	r1, #0
   12b50:	d0d6      	beq.n	12b00 <get+0x34>
   12b52:	2c00      	cmp	r4, #0
   12b54:	d0d4      	beq.n	12b00 <get+0x34>
			if (octets < last) {
   12b56:	428c      	cmp	r4, r1
   12b58:	bf8a      	itet	hi
   12b5a:	460b      	movhi	r3, r1
   12b5c:	4623      	movls	r3, r4
				remaining = last - octets;
   12b5e:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   12b60:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   12b64:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   12b68:	bf8c      	ite	hi
   12b6a:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   12b6c:	2700      	movls	r7, #0
			octets -= last;
   12b6e:	b2c9      	uxtb	r1, r1
   12b70:	18f4      	adds	r4, r6, r3
			while (last--) {
   12b72:	42a6      	cmp	r6, r4
   12b74:	d0c4      	beq.n	12b00 <get+0x34>
				*(--d) = *s++;
   12b76:	f816 5b01 	ldrb.w	r5, [r6], #1
   12b7a:	f802 5d01 	strb.w	r5, [r2, #-1]!
   12b7e:	e7f8      	b.n	12b72 <get+0xa6>
			*(--d) = *s++;
   12b80:	f816 8b01 	ldrb.w	r8, [r6], #1
   12b84:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   12b88:	e7de      	b.n	12b48 <get+0x7c>
   12b8a:	bf00      	nop
   12b8c:	4000d000 	.word	0x4000d000

00012b90 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   12b90:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   12b92:	b1d0      	cbz	r0, 12bca <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   12b94:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   12b96:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   12b98:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   12b9a:	1c53      	adds	r3, r2, #1
   12b9c:	b2db      	uxtb	r3, r3
		last = 0;
   12b9e:	42ab      	cmp	r3, r5
   12ba0:	bf08      	it	eq
   12ba2:	2300      	moveq	r3, #0
	if (last == rng->first) {
   12ba4:	42a3      	cmp	r3, r4
   12ba6:	d010      	beq.n	12bca <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   12ba8:	b161      	cbz	r1, 12bc4 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   12baa:	490a      	ldr	r1, [pc, #40]	; (12bd4 <isr+0x44>)
   12bac:	4402      	add	r2, r0
   12bae:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   12bb2:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   12bb4:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   12bb6:	3301      	adds	r3, #1
   12bb8:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   12bba:	429d      	cmp	r5, r3
   12bbc:	bf08      	it	eq
   12bbe:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   12bc0:	42a3      	cmp	r3, r4
   12bc2:	d005      	beq.n	12bd0 <isr+0x40>
		return 0;
	}

	return -EBUSY;
   12bc4:	f06f 000f 	mvn.w	r0, #15
   12bc8:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   12bca:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12bce:	bd30      	pop	{r4, r5, pc}
		return 0;
   12bd0:	2000      	movs	r0, #0
}
   12bd2:	bd30      	pop	{r4, r5, pc}
   12bd4:	4000d000 	.word	0x4000d000

00012bd8 <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   12bd8:	07db      	lsls	r3, r3, #31
{
   12bda:	b570      	push	{r4, r5, r6, lr}
   12bdc:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   12bde:	d507      	bpl.n	12bf0 <entropy_nrf5_get_entropy_isr+0x18>
   12be0:	4613      	mov	r3, r2
   12be2:	4a0d      	ldr	r2, [pc, #52]	; (12c18 <entropy_nrf5_get_entropy_isr+0x40>)
   12be4:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   12be6:	2500      	movs	r5, #0
	while (len) {
   12be8:	b94b      	cbnz	r3, 12bfe <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   12bea:	6050      	str	r0, [r2, #4]

	return cnt;
   12bec:	4620      	mov	r0, r4
}
   12bee:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   12bf0:	6880      	ldr	r0, [r0, #8]
   12bf2:	460a      	mov	r2, r1
   12bf4:	303c      	adds	r0, #60	; 0x3c
   12bf6:	b2e1      	uxtb	r1, r4
   12bf8:	f7ff ff68 	bl	12acc <get>
   12bfc:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   12bfe:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   12c02:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   12c04:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   12c08:	2e00      	cmp	r6, #0
   12c0a:	d0fb      	beq.n	12c04 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   12c0c:	3b01      	subs	r3, #1
   12c0e:	b29b      	uxth	r3, r3
   12c10:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   12c14:	54ce      	strb	r6, [r1, r3]
   12c16:	e7e7      	b.n	12be8 <entropy_nrf5_get_entropy_isr+0x10>
   12c18:	4000d000 	.word	0x4000d000

00012c1c <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   12c1c:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   12c1e:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   12c20:	2201      	movs	r2, #1
   12c22:	4611      	mov	r1, r2
   12c24:	4620      	mov	r0, r4
   12c26:	f000 fd7f 	bl	13728 <_impl_k_sem_init>
   12c2a:	f104 0018 	add.w	r0, r4, #24
   12c2e:	2201      	movs	r2, #1
   12c30:	2100      	movs	r1, #0
   12c32:	f000 fd79 	bl	13728 <_impl_k_sem_init>
	rng->threshold = threshold;
   12c36:	2304      	movs	r3, #4
   12c38:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   12c3c:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   12c3e:	2500      	movs	r5, #0
	rng->threshold = threshold;
   12c40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   12c44:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   12c46:	4b11      	ldr	r3, [pc, #68]	; (12c8c <entropy_nrf5_init+0x70>)
	rng->count = len;
   12c48:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   12c4c:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   12c4e:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   12c52:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   12c56:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   12c5a:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   12c5e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   12c62:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   12c66:	f042 0201 	orr.w	r2, r2, #1
   12c6a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   12c6e:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   12c70:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   12c74:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   12c76:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   12c7a:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   12c7c:	462a      	mov	r2, r5
   12c7e:	f7ee fe1d 	bl	18bc <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   12c82:	4630      	mov	r0, r6
   12c84:	f7ee fde8 	bl	1858 <_arch_irq_enable>

	return 0;
}
   12c88:	4628      	mov	r0, r5
   12c8a:	bd70      	pop	{r4, r5, r6, pc}
   12c8c:	4000d000 	.word	0x4000d000

00012c90 <isr_rand>:
{
   12c90:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   12c92:	4b12      	ldr	r3, [pc, #72]	; (12cdc <isr_rand+0x4c>)
   12c94:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   12c98:	b1fb      	cbz	r3, 12cda <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   12c9a:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   12c9c:	2101      	movs	r1, #1
   12c9e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   12ca2:	f7ff ff75 	bl	12b90 <isr>
		if (ret != -EBUSY) {
   12ca6:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   12caa:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   12cac:	d00d      	beq.n	12cca <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   12cae:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   12cb2:	bf14      	ite	ne
   12cb4:	2100      	movne	r1, #0
   12cb6:	2101      	moveq	r1, #1
   12cb8:	f105 0030 	add.w	r0, r5, #48	; 0x30
   12cbc:	f7ff ff68 	bl	12b90 <isr>
   12cc0:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   12cc2:	f105 0018 	add.w	r0, r5, #24
   12cc6:	f000 fd38 	bl	1373a <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   12cca:	4b04      	ldr	r3, [pc, #16]	; (12cdc <isr_rand+0x4c>)
   12ccc:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   12cce:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   12cd0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   12cd4:	bf1c      	itt	ne
   12cd6:	2201      	movne	r2, #1
   12cd8:	605a      	strne	r2, [r3, #4]
   12cda:	bd38      	pop	{r3, r4, r5, pc}
   12cdc:	4000d000 	.word	0x4000d000

00012ce0 <entropy_nrf5_get_entropy>:
{
   12ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   12ce4:	6885      	ldr	r5, [r0, #8]
{
   12ce6:	460f      	mov	r7, r1
   12ce8:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   12cea:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   12cee:	b914      	cbnz	r4, 12cf6 <entropy_nrf5_get_entropy+0x16>
}
   12cf0:	4620      	mov	r0, r4
   12cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12cf6:	2cff      	cmp	r4, #255	; 0xff
   12cf8:	4623      	mov	r3, r4
   12cfa:	bf28      	it	cs
   12cfc:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   12cfe:	1ae4      	subs	r4, r4, r3
   12d00:	b2de      	uxtb	r6, r3
   12d02:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   12d04:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   12d08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12d0c:	4628      	mov	r0, r5
   12d0e:	f000 fd3c 	bl	1378a <_impl_k_sem_take>
   12d12:	4631      	mov	r1, r6
   12d14:	463a      	mov	r2, r7
   12d16:	4648      	mov	r0, r9
   12d18:	f7ff fed8 	bl	12acc <get>
   12d1c:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   12d1e:	4628      	mov	r0, r5
   12d20:	f000 fd0b 	bl	1373a <_impl_k_sem_give>
			if (len8) {
   12d24:	2e00      	cmp	r6, #0
   12d26:	d0e2      	beq.n	12cee <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   12d28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12d2c:	4640      	mov	r0, r8
   12d2e:	f000 fd2c 	bl	1378a <_impl_k_sem_take>
   12d32:	e7e9      	b.n	12d08 <entropy_nrf5_get_entropy+0x28>

00012d34 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   12d34:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   12d36:	4802      	ldr	r0, [pc, #8]	; (12d40 <entropy_nrf_get_entropy_isr+0xc>)
   12d38:	460a      	mov	r2, r1
   12d3a:	4619      	mov	r1, r3
   12d3c:	f7ff bec6 	b.w	12acc <get>
   12d40:	20001734 	.word	0x20001734

00012d44 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   12d44:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   12d46:	4b08      	ldr	r3, [pc, #32]	; (12d68 <_sys_device_do_config_level+0x24>)
   12d48:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   12d4c:	3001      	adds	r0, #1
   12d4e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   12d52:	4620      	mov	r0, r4
   12d54:	42a8      	cmp	r0, r5
   12d56:	f104 040c 	add.w	r4, r4, #12
   12d5a:	d300      	bcc.n	12d5e <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   12d5c:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   12d5e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   12d62:	685b      	ldr	r3, [r3, #4]
   12d64:	4798      	blx	r3
   12d66:	e7f4      	b.n	12d52 <_sys_device_do_config_level+0xe>
   12d68:	00017778 	.word	0x00017778

00012d6c <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   12d6c:	4b10      	ldr	r3, [pc, #64]	; (12db0 <device_get_binding+0x44>)
{
   12d6e:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   12d70:	4c10      	ldr	r4, [pc, #64]	; (12db4 <device_get_binding+0x48>)
{
   12d72:	4605      	mov	r5, r0
   12d74:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   12d76:	429c      	cmp	r4, r3
   12d78:	d104      	bne.n	12d84 <device_get_binding+0x18>
   12d7a:	4c0e      	ldr	r4, [pc, #56]	; (12db4 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   12d7c:	42b4      	cmp	r4, r6
   12d7e:	d109      	bne.n	12d94 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   12d80:	2400      	movs	r4, #0
   12d82:	e012      	b.n	12daa <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   12d84:	6862      	ldr	r2, [r4, #4]
   12d86:	b11a      	cbz	r2, 12d90 <device_get_binding+0x24>
   12d88:	6822      	ldr	r2, [r4, #0]
   12d8a:	6812      	ldr	r2, [r2, #0]
   12d8c:	42aa      	cmp	r2, r5
   12d8e:	d00c      	beq.n	12daa <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   12d90:	340c      	adds	r4, #12
   12d92:	e7f0      	b.n	12d76 <device_get_binding+0xa>
		if (!info->driver_api) {
   12d94:	6863      	ldr	r3, [r4, #4]
   12d96:	b90b      	cbnz	r3, 12d9c <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   12d98:	340c      	adds	r4, #12
   12d9a:	e7ef      	b.n	12d7c <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   12d9c:	6823      	ldr	r3, [r4, #0]
   12d9e:	4628      	mov	r0, r5
   12da0:	6819      	ldr	r1, [r3, #0]
   12da2:	f7ee ff09 	bl	1bb8 <strcmp>
   12da6:	2800      	cmp	r0, #0
   12da8:	d1f6      	bne.n	12d98 <device_get_binding+0x2c>
}
   12daa:	4620      	mov	r0, r4
   12dac:	bd70      	pop	{r4, r5, r6, pc}
   12dae:	bf00      	nop
   12db0:	20003f04 	.word	0x20003f04
   12db4:	20003e74 	.word	0x20003e74

00012db8 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   12db8:	1c43      	adds	r3, r0, #1
   12dba:	d003      	beq.n	12dc4 <_sys_power_save_idle_exit+0xc>
   12dbc:	4b03      	ldr	r3, [pc, #12]	; (12dcc <_sys_power_save_idle_exit+0x14>)
   12dbe:	681b      	ldr	r3, [r3, #0]
   12dc0:	4298      	cmp	r0, r3
   12dc2:	db01      	blt.n	12dc8 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   12dc4:	f7ee bb10 	b.w	13e8 <_timer_idle_exit>
   12dc8:	4770      	bx	lr
   12dca:	bf00      	nop
   12dcc:	20003e68 	.word	0x20003e68

00012dd0 <idle>:
	return list->head == list;
   12dd0:	4d0f      	ldr	r5, [pc, #60]	; (12e10 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   12dd2:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   12dd4:	4f0f      	ldr	r7, [pc, #60]	; (12e14 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12dd6:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   12dda:	f04f 0220 	mov.w	r2, #32
   12dde:	f3ef 8311 	mrs	r3, BASEPRI
   12de2:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   12de6:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12de8:	42b3      	cmp	r3, r6
   12dea:	d00a      	beq.n	12e02 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   12dec:	b14b      	cbz	r3, 12e02 <idle+0x32>
   12dee:	691c      	ldr	r4, [r3, #16]
   12df0:	1c63      	adds	r3, r4, #1
   12df2:	d008      	beq.n	12e06 <idle+0x36>
   12df4:	683b      	ldr	r3, [r7, #0]
   12df6:	42a3      	cmp	r3, r4
   12df8:	dd05      	ble.n	12e06 <idle+0x36>
	_kernel.idle = ticks;
   12dfa:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   12dfc:	f7ee fdb4 	bl	1968 <k_cpu_idle>
   12e00:	e7eb      	b.n	12dda <idle+0xa>
   12e02:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   12e06:	4620      	mov	r0, r4
   12e08:	f7ee fad0 	bl	13ac <_timer_idle_enter>
   12e0c:	e7f5      	b.n	12dfa <idle+0x2a>
   12e0e:	bf00      	nop
   12e10:	20001948 	.word	0x20001948
   12e14:	20003e68 	.word	0x20003e68

00012e18 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   12e18:	4802      	ldr	r0, [pc, #8]	; (12e24 <_bss_zero+0xc>)
   12e1a:	4a03      	ldr	r2, [pc, #12]	; (12e28 <_bss_zero+0x10>)
   12e1c:	2100      	movs	r1, #0
   12e1e:	1a12      	subs	r2, r2, r0
   12e20:	f7ee bf18 	b.w	1c54 <memset>
   12e24:	20000000 	.word	0x20000000
   12e28:	20001a08 	.word	0x20001a08

00012e2c <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   12e2c:	4802      	ldr	r0, [pc, #8]	; (12e38 <_data_copy+0xc>)
   12e2e:	4a03      	ldr	r2, [pc, #12]	; (12e3c <_data_copy+0x10>)
   12e30:	4903      	ldr	r1, [pc, #12]	; (12e40 <_data_copy+0x14>)
   12e32:	1a12      	subs	r2, r2, r0
   12e34:	f7ee bee2 	b.w	1bfc <memcpy>
   12e38:	20003a20 	.word	0x20003a20
   12e3c:	20003fac 	.word	0x20003fac
   12e40:	000177c8 	.word	0x000177c8

00012e44 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   12e44:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   12e46:	2002      	movs	r0, #2
   12e48:	f7ff ff7c 	bl	12d44 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   12e4c:	4807      	ldr	r0, [pc, #28]	; (12e6c <bg_thread_main+0x28>)
   12e4e:	f7ee f89d 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   12e52:	2003      	movs	r0, #3
   12e54:	f7ff ff76 	bl	12d44 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   12e58:	f000 feaa 	bl	13bb0 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   12e5c:	f7ed fc30 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   12e60:	4a03      	ldr	r2, [pc, #12]	; (12e70 <bg_thread_main+0x2c>)
   12e62:	7a13      	ldrb	r3, [r2, #8]
   12e64:	f023 0301 	bic.w	r3, r3, #1
   12e68:	7213      	strb	r3, [r2, #8]
   12e6a:	bd08      	pop	{r3, pc}
   12e6c:	00017794 	.word	0x00017794
   12e70:	200017b8 	.word	0x200017b8

00012e74 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   12e74:	b580      	push	{r7, lr}
   12e76:	b086      	sub	sp, #24
   12e78:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   12e7a:	f7ee fb39 	bl	14f0 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   12e7e:	4b30      	ldr	r3, [pc, #192]	; (12f40 <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   12e80:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12e84:	4b2f      	ldr	r3, [pc, #188]	; (12f44 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   12e86:	4d30      	ldr	r5, [pc, #192]	; (12f48 <_Cstart+0xd4>)
   12e88:	4e30      	ldr	r6, [pc, #192]	; (12f4c <_Cstart+0xd8>)
   12e8a:	2400      	movs	r4, #0
   12e8c:	22e0      	movs	r2, #224	; 0xe0
   12e8e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   12e92:	77dc      	strb	r4, [r3, #31]
   12e94:	761c      	strb	r4, [r3, #24]
   12e96:	765c      	strb	r4, [r3, #25]
   12e98:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   12e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   12e9c:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   12ea0:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   12ea2:	f7ee fcd1 	bl	1848 <_FaultInit>
	_CpuIdleInit();
   12ea6:	f7ee fd59 	bl	195c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   12eaa:	4620      	mov	r0, r4
   12eac:	f7ff ff4a 	bl	12d44 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   12eb0:	2001      	movs	r0, #1
   12eb2:	f7ff ff47 	bl	12d44 <_sys_device_do_config_level>
	_sched_init();
   12eb6:	f000 fbf9 	bl	136ac <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   12eba:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   12ebc:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   12ebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12ec2:	9304      	str	r3, [sp, #16]
   12ec4:	9403      	str	r4, [sp, #12]
   12ec6:	9402      	str	r4, [sp, #8]
   12ec8:	9401      	str	r4, [sp, #4]
   12eca:	9400      	str	r4, [sp, #0]
   12ecc:	4b20      	ldr	r3, [pc, #128]	; (12f50 <_Cstart+0xdc>)
   12ece:	4921      	ldr	r1, [pc, #132]	; (12f54 <_Cstart+0xe0>)
   12ed0:	4628      	mov	r0, r5
   12ed2:	f000 fe15 	bl	13b00 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12ed6:	7a6b      	ldrb	r3, [r5, #9]
   12ed8:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   12edc:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12ee0:	726a      	strb	r2, [r5, #9]
   12ee2:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   12ee4:	d102      	bne.n	12eec <_Cstart+0x78>
   12ee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   12ee8:	3301      	adds	r3, #1
   12eea:	d024      	beq.n	12f36 <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   12eec:	2301      	movs	r3, #1
   12eee:	4e1a      	ldr	r6, [pc, #104]	; (12f58 <_Cstart+0xe4>)
   12ef0:	9304      	str	r3, [sp, #16]
   12ef2:	230f      	movs	r3, #15
   12ef4:	9303      	str	r3, [sp, #12]
   12ef6:	2300      	movs	r3, #0
   12ef8:	9302      	str	r3, [sp, #8]
   12efa:	9301      	str	r3, [sp, #4]
   12efc:	9300      	str	r3, [sp, #0]
   12efe:	f44f 72a0 	mov.w	r2, #320	; 0x140
   12f02:	4b16      	ldr	r3, [pc, #88]	; (12f5c <_Cstart+0xe8>)
   12f04:	4916      	ldr	r1, [pc, #88]	; (12f60 <_Cstart+0xec>)
   12f06:	4630      	mov	r0, r6
   12f08:	f000 fdfa 	bl	13b00 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12f0c:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   12f0e:	60e6      	str	r6, [r4, #12]
   12f10:	f023 0304 	bic.w	r3, r3, #4
   12f14:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   12f16:	4b13      	ldr	r3, [pc, #76]	; (12f64 <_Cstart+0xf0>)
   12f18:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   12f1a:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   12f1c:	4b12      	ldr	r3, [pc, #72]	; (12f68 <_Cstart+0xf4>)

	_current = main_thread;
   12f1e:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   12f20:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   12f24:	4c11      	ldr	r4, [pc, #68]	; (12f6c <_Cstart+0xf8>)
   12f26:	4a0a      	ldr	r2, [pc, #40]	; (12f50 <_Cstart+0xdc>)
   12f28:	f383 8809 	msr	PSP, r3
   12f2c:	2100      	movs	r1, #0
   12f2e:	f381 8811 	msr	BASEPRI, r1
   12f32:	4610      	mov	r0, r2
   12f34:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   12f36:	4628      	mov	r0, r5
   12f38:	f000 fab4 	bl	134a4 <_add_thread_to_ready_q>
   12f3c:	e7d6      	b.n	12eec <_Cstart+0x78>
   12f3e:	bf00      	nop
   12f40:	20003620 	.word	0x20003620
   12f44:	e000ed00 	.word	0xe000ed00
   12f48:	200017b8 	.word	0x200017b8
   12f4c:	20001948 	.word	0x20001948
   12f50:	00012e45 	.word	0x00012e45
   12f54:	200028e0 	.word	0x200028e0
   12f58:	20001748 	.word	0x20001748
   12f5c:	00012dd1 	.word	0x00012dd1
   12f60:	20002ce0 	.word	0x20002ce0
   12f64:	2000195c 	.word	0x2000195c
   12f68:	20002ce0 	.word	0x20002ce0
   12f6c:	00000899 	.word	0x00000899

00012f70 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   12f70:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   12f72:	4c07      	ldr	r4, [pc, #28]	; (12f90 <init_static_pools+0x20>)
   12f74:	4d07      	ldr	r5, [pc, #28]	; (12f94 <init_static_pools+0x24>)
   12f76:	42ac      	cmp	r4, r5
   12f78:	d301      	bcc.n	12f7e <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   12f7a:	2000      	movs	r0, #0
   12f7c:	bd38      	pop	{r3, r4, r5, pc}
   12f7e:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   12f82:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   12f84:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   12f86:	4620      	mov	r0, r4
   12f88:	f7ed fcc1 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   12f8c:	341c      	adds	r4, #28
   12f8e:	e7f2      	b.n	12f76 <init_static_pools+0x6>
   12f90:	20003f04 	.word	0x20003f04
   12f94:	20003f04 	.word	0x20003f04

00012f98 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   12f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   12f9c:	1e1d      	subs	r5, r3, #0
{
   12f9e:	b085      	sub	sp, #20
   12fa0:	4607      	mov	r7, r0
   12fa2:	460c      	mov	r4, r1
   12fa4:	4692      	mov	sl, r2
	if (timeout > 0) {
   12fa6:	dd4c      	ble.n	13042 <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   12fa8:	f000 fc16 	bl	137d8 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   12fac:	f105 0309 	add.w	r3, r5, #9
   12fb0:	220a      	movs	r2, #10
   12fb2:	fbb3 f3f2 	udiv	r3, r3, r2
   12fb6:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   12fba:	4b23      	ldr	r3, [pc, #140]	; (13048 <k_mem_pool_alloc+0xb0>)
   12fbc:	4e23      	ldr	r6, [pc, #140]	; (1304c <k_mem_pool_alloc+0xb4>)
   12fbe:	1afb      	subs	r3, r7, r3
   12fc0:	109b      	asrs	r3, r3, #2
   12fc2:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   12fc4:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   12fc6:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   12fca:	9400      	str	r4, [sp, #0]
   12fcc:	ab03      	add	r3, sp, #12
   12fce:	aa02      	add	r2, sp, #8
   12fd0:	4651      	mov	r1, sl
   12fd2:	4638      	mov	r0, r7
   12fd4:	f7ed fce6 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   12fd8:	f110 0f0b 	cmn.w	r0, #11
   12fdc:	d10b      	bne.n	12ff6 <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   12fde:	9400      	str	r4, [sp, #0]
   12fe0:	ab03      	add	r3, sp, #12
   12fe2:	aa02      	add	r2, sp, #8
   12fe4:	4651      	mov	r1, sl
   12fe6:	4638      	mov	r0, r7
   12fe8:	f7ed fcdc 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   12fec:	f110 0f0b 	cmn.w	r0, #11
   12ff0:	bf08      	it	eq
   12ff2:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   12ff6:	7963      	ldrb	r3, [r4, #5]
   12ff8:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   12ffa:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   12ffc:	f362 0303 	bfi	r3, r2, #0, #4
   13000:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   13002:	6863      	ldr	r3, [r4, #4]
   13004:	9a03      	ldr	r2, [sp, #12]
   13006:	f362 331f 	bfi	r3, r2, #12, #20
   1300a:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1300c:	b1b0      	cbz	r0, 1303c <k_mem_pool_alloc+0xa4>
   1300e:	b1ad      	cbz	r5, 1303c <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   13010:	f110 0f0c 	cmn.w	r0, #12
   13014:	d112      	bne.n	1303c <k_mem_pool_alloc+0xa4>
   13016:	f04f 0320 	mov.w	r3, #32
   1301a:	f3ef 8011 	mrs	r0, BASEPRI
   1301e:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   13022:	462a      	mov	r2, r5
   13024:	4659      	mov	r1, fp
   13026:	f000 faeb 	bl	13600 <_pend_current_thread>

		if (timeout != K_FOREVER) {
   1302a:	1c6b      	adds	r3, r5, #1
   1302c:	d0cd      	beq.n	12fca <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   1302e:	f000 fbd3 	bl	137d8 <_tick_get>

			if (timeout < 0) {
   13032:	ebb8 0500 	subs.w	r5, r8, r0
   13036:	d5c8      	bpl.n	12fca <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   13038:	f06f 000a 	mvn.w	r0, #10
}
   1303c:	b005      	add	sp, #20
   1303e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   13042:	f04f 0800 	mov.w	r8, #0
   13046:	e7b8      	b.n	12fba <k_mem_pool_alloc+0x22>
   13048:	20003f04 	.word	0x20003f04
   1304c:	b6db6db7 	.word	0xb6db6db7

00013050 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   13050:	b570      	push	{r4, r5, r6, lr}
   13052:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   13054:	6802      	ldr	r2, [r0, #0]
   13056:	7841      	ldrb	r1, [r0, #1]
   13058:	4e13      	ldr	r6, [pc, #76]	; (130a8 <k_mem_pool_free_id+0x58>)
   1305a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1305e:	00a4      	lsls	r4, r4, #2
   13060:	0b12      	lsrs	r2, r2, #12
   13062:	f001 010f 	and.w	r1, r1, #15
   13066:	1930      	adds	r0, r6, r4
   13068:	f7ed fd4e 	bl	b08 <_sys_mem_pool_block_free>
   1306c:	f04f 0320 	mov.w	r3, #32
   13070:	f3ef 8511 	mrs	r5, BASEPRI
   13074:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   13078:	f104 0014 	add.w	r0, r4, #20
   1307c:	4430      	add	r0, r6
   1307e:	f000 fb05 	bl	1368c <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   13082:	b140      	cbz	r0, 13096 <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13084:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   13088:	2b0d      	cmp	r3, #13
   1308a:	d804      	bhi.n	13096 <k_mem_pool_free_id+0x46>
   1308c:	b133      	cbz	r3, 1309c <k_mem_pool_free_id+0x4c>
   1308e:	4b07      	ldr	r3, [pc, #28]	; (130ac <k_mem_pool_free_id+0x5c>)
   13090:	685b      	ldr	r3, [r3, #4]
   13092:	051b      	lsls	r3, r3, #20
   13094:	d402      	bmi.n	1309c <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13096:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   1309a:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   1309c:	4628      	mov	r0, r5
}
   1309e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   130a2:	f000 b9a7 	b.w	133f4 <_reschedule>
   130a6:	bf00      	nop
   130a8:	20003f04 	.word	0x20003f04
   130ac:	e000ed00 	.word	0xe000ed00

000130b0 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   130b0:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   130b2:	1d0a      	adds	r2, r1, #4
   130b4:	d204      	bcs.n	130c0 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   130b6:	2300      	movs	r3, #0
   130b8:	4669      	mov	r1, sp
   130ba:	f7ff ff6d 	bl	12f98 <k_mem_pool_alloc>
   130be:	b118      	cbz	r0, 130c8 <k_mem_pool_malloc+0x18>
		return NULL;
   130c0:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   130c2:	b003      	add	sp, #12
   130c4:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   130c8:	2204      	movs	r2, #4
   130ca:	eb0d 0102 	add.w	r1, sp, r2
   130ce:	9800      	ldr	r0, [sp, #0]
   130d0:	f7ee fd94 	bl	1bfc <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   130d4:	9800      	ldr	r0, [sp, #0]
   130d6:	3004      	adds	r0, #4
   130d8:	e7f3      	b.n	130c2 <k_mem_pool_malloc+0x12>

000130da <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   130da:	b110      	cbz	r0, 130e2 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   130dc:	3804      	subs	r0, #4
   130de:	f7ff bfb7 	b.w	13050 <k_mem_pool_free_id>
   130e2:	4770      	bx	lr

000130e4 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   130e4:	4b03      	ldr	r3, [pc, #12]	; (130f4 <z_thread_malloc+0x10>)
   130e6:	689b      	ldr	r3, [r3, #8]
{
   130e8:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   130ea:	6e58      	ldr	r0, [r3, #100]	; 0x64
   130ec:	b108      	cbz	r0, 130f2 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   130ee:	f7ff bfdf 	b.w	130b0 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   130f2:	4770      	bx	lr
   130f4:	20001948 	.word	0x20001948

000130f8 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   130f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   130fa:	4605      	mov	r5, r0
   130fc:	460f      	mov	r7, r1
   130fe:	4614      	mov	r4, r2
	__asm__ volatile(
   13100:	f04f 0220 	mov.w	r2, #32
   13104:	f3ef 8611 	mrs	r6, BASEPRI
   13108:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1310c:	b1a3      	cbz	r3, 13138 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1310e:	2008      	movs	r0, #8
   13110:	f7ff ffe8 	bl	130e4 <z_thread_malloc>
		if (!anode) {
   13114:	2800      	cmp	r0, #0
   13116:	d034      	beq.n	13182 <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   13118:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   1311a:	6044      	str	r4, [r0, #4]
   1311c:	6003      	str	r3, [r0, #0]
   1311e:	4604      	mov	r4, r0
   13120:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   13122:	b95f      	cbnz	r7, 1313c <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   13124:	682a      	ldr	r2, [r5, #0]
   13126:	f003 0303 	and.w	r3, r3, #3
   1312a:	4313      	orrs	r3, r2
   1312c:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   1312e:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   13130:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   13132:	b973      	cbnz	r3, 13152 <queue_insert+0x5a>
	list->tail = node;
   13134:	606c      	str	r4, [r5, #4]
   13136:	e00c      	b.n	13152 <queue_insert+0x5a>
	node->next_and_flags = flags;
   13138:	6023      	str	r3, [r4, #0]
   1313a:	e7f1      	b.n	13120 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1313c:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   1313e:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   13142:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   13146:	d114      	bne.n	13172 <queue_insert+0x7a>
   13148:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1314a:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   1314c:	b95a      	cbnz	r2, 13166 <queue_insert+0x6e>
	list->tail = node;
   1314e:	606c      	str	r4, [r5, #4]
	list->head = node;
   13150:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   13152:	2104      	movs	r1, #4
   13154:	f105 0008 	add.w	r0, r5, #8
   13158:	f000 ffb4 	bl	140c4 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   1315c:	4630      	mov	r0, r6
   1315e:	f000 f949 	bl	133f4 <_reschedule>
	return 0;
   13162:	2000      	movs	r0, #0
   13164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13166:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13168:	f003 0303 	and.w	r3, r3, #3
   1316c:	4323      	orrs	r3, r4
   1316e:	6013      	str	r3, [r2, #0]
   13170:	e7e0      	b.n	13134 <queue_insert+0x3c>
   13172:	4313      	orrs	r3, r2
   13174:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13176:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13178:	f002 0203 	and.w	r2, r2, #3
   1317c:	4314      	orrs	r4, r2
   1317e:	603c      	str	r4, [r7, #0]
   13180:	e7e7      	b.n	13152 <queue_insert+0x5a>
			return -ENOMEM;
   13182:	f06f 000b 	mvn.w	r0, #11
}
   13186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013188 <z_queue_node_peek>:
{
   13188:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   1318a:	4604      	mov	r4, r0
   1318c:	b130      	cbz	r0, 1319c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1318e:	6802      	ldr	r2, [r0, #0]
   13190:	0793      	lsls	r3, r2, #30
   13192:	d003      	beq.n	1319c <z_queue_node_peek+0x14>
		ret = anode->data;
   13194:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   13196:	b109      	cbz	r1, 1319c <z_queue_node_peek+0x14>
			k_free(anode);
   13198:	f7ff ff9f 	bl	130da <k_free>
}
   1319c:	4620      	mov	r0, r4
   1319e:	bd10      	pop	{r4, pc}

000131a0 <_impl_k_queue_init>:
	list->head = NULL;
   131a0:	2300      	movs	r3, #0
   131a2:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   131a4:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   131a6:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   131aa:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   131ac:	60c3      	str	r3, [r0, #12]
   131ae:	4770      	bx	lr

000131b0 <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   131b0:	460a      	mov	r2, r1
   131b2:	2300      	movs	r3, #0
   131b4:	6841      	ldr	r1, [r0, #4]
   131b6:	f7ff bf9f 	b.w	130f8 <queue_insert>

000131ba <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   131ba:	2300      	movs	r3, #0
   131bc:	460a      	mov	r2, r1
   131be:	4619      	mov	r1, r3
   131c0:	f7ff bf9a 	b.w	130f8 <queue_insert>

000131c4 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   131c4:	b538      	push	{r3, r4, r5, lr}
   131c6:	f04f 0320 	mov.w	r3, #32
   131ca:	f3ef 8511 	mrs	r5, BASEPRI
   131ce:	f383 8811 	msr	BASEPRI, r3
   131d2:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   131d4:	b953      	cbnz	r3, 131ec <k_queue_append_list+0x28>
	list->head = node;
   131d6:	6001      	str	r1, [r0, #0]
	list->tail = node;
   131d8:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   131da:	2104      	movs	r1, #4
   131dc:	3008      	adds	r0, #8
   131de:	f000 ff71 	bl	140c4 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   131e2:	4628      	mov	r0, r5
}
   131e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   131e8:	f000 b904 	b.w	133f4 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   131ec:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   131ee:	f004 0403 	and.w	r4, r4, #3
   131f2:	4321      	orrs	r1, r4
   131f4:	6019      	str	r1, [r3, #0]
   131f6:	e7ef      	b.n	131d8 <k_queue_append_list+0x14>

000131f8 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   131f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   131fc:	4604      	mov	r4, r0
   131fe:	b086      	sub	sp, #24
   13200:	460d      	mov	r5, r1
   13202:	f04f 0320 	mov.w	r3, #32
   13206:	f3ef 8711 	mrs	r7, BASEPRI
   1320a:	f383 8811 	msr	BASEPRI, r3
   1320e:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   13210:	b182      	cbz	r2, 13234 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13212:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13214:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13216:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   1321a:	428a      	cmp	r2, r1
	list->head = node;
   1321c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1321e:	bf08      	it	eq
   13220:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   13222:	2101      	movs	r1, #1
   13224:	4610      	mov	r0, r2
   13226:	f7ff ffaf 	bl	13188 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1322a:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1322e:	b006      	add	sp, #24
   13230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   13234:	b919      	cbnz	r1, 1323e <_impl_k_queue_get+0x46>
   13236:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   1323a:	2000      	movs	r0, #0
   1323c:	e7f7      	b.n	1322e <_impl_k_queue_get+0x36>
   1323e:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   13242:	2104      	movs	r1, #4
   13244:	4603      	mov	r3, r0
   13246:	eb0d 0001 	add.w	r0, sp, r1
   1324a:	f000 fea4 	bl	13f96 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1324e:	1c6a      	adds	r2, r5, #1
   13250:	d002      	beq.n	13258 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13252:	f000 fab7 	bl	137c4 <_impl_k_uptime_get_32>
   13256:	4606      	mov	r6, r0
{
   13258:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1325a:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   1325e:	1bea      	subs	r2, r5, r7
   13260:	f36f 1307 	bfc	r3, #4, #4
   13264:	2101      	movs	r1, #1
   13266:	a801      	add	r0, sp, #4
   13268:	f88d 3011 	strb.w	r3, [sp, #17]
   1326c:	f000 fea6 	bl	13fbc <_impl_k_poll>
		if (err && err != -EAGAIN) {
   13270:	b108      	cbz	r0, 13276 <_impl_k_queue_get+0x7e>
   13272:	300b      	adds	r0, #11
   13274:	d1e1      	bne.n	1323a <_impl_k_queue_get+0x42>
	__asm__ volatile(
   13276:	f04f 0320 	mov.w	r3, #32
   1327a:	f3ef 8811 	mrs	r8, BASEPRI
   1327e:	f383 8811 	msr	BASEPRI, r3
   13282:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   13284:	b138      	cbz	r0, 13296 <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13286:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13288:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1328a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   1328e:	4290      	cmp	r0, r2
	list->head = node;
   13290:	6023      	str	r3, [r4, #0]
	list->tail = node;
   13292:	bf08      	it	eq
   13294:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   13296:	2101      	movs	r1, #1
   13298:	f7ff ff76 	bl	13188 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1329c:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   132a0:	2800      	cmp	r0, #0
   132a2:	d1c4      	bne.n	1322e <_impl_k_queue_get+0x36>
   132a4:	1c6b      	adds	r3, r5, #1
   132a6:	d0d8      	beq.n	1325a <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   132a8:	f000 fa8c 	bl	137c4 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   132ac:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   132ae:	42bd      	cmp	r5, r7
   132b0:	dad3      	bge.n	1325a <_impl_k_queue_get+0x62>
   132b2:	e7c2      	b.n	1323a <_impl_k_queue_get+0x42>

000132b4 <sys_dlist_remove>:
	node->prev->next = node->next;
   132b4:	e890 000c 	ldmia.w	r0, {r2, r3}
   132b8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   132ba:	6802      	ldr	r2, [r0, #0]
   132bc:	6053      	str	r3, [r2, #4]
   132be:	4770      	bx	lr

000132c0 <_abort_timeout>:
{
   132c0:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   132c2:	6900      	ldr	r0, [r0, #16]
{
   132c4:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   132c6:	1c43      	adds	r3, r0, #1
   132c8:	d00e      	beq.n	132e8 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   132ca:	4b08      	ldr	r3, [pc, #32]	; (132ec <_abort_timeout+0x2c>)
   132cc:	699b      	ldr	r3, [r3, #24]
   132ce:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   132d0:	bf1f      	itttt	ne
   132d2:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   132d4:	6913      	ldrne	r3, [r2, #16]
   132d6:	18c0      	addne	r0, r0, r3
   132d8:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   132da:	4608      	mov	r0, r1
   132dc:	f7ff ffea 	bl	132b4 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   132e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   132e4:	610b      	str	r3, [r1, #16]
	return 0;
   132e6:	2000      	movs	r0, #0
}
   132e8:	bd08      	pop	{r3, pc}
   132ea:	bf00      	nop
   132ec:	20001948 	.word	0x20001948

000132f0 <k_spin_lock.isra.11>:
	__asm__ volatile(
   132f0:	f04f 0320 	mov.w	r3, #32
   132f4:	f3ef 8011 	mrs	r0, BASEPRI
   132f8:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   132fc:	4770      	bx	lr
	...

00013300 <update_cache>:
	return list->head == list;
   13300:	4b0d      	ldr	r3, [pc, #52]	; (13338 <update_cache+0x38>)
   13302:	4619      	mov	r1, r3
   13304:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13308:	428a      	cmp	r2, r1
   1330a:	d000      	beq.n	1330e <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   1330c:	b902      	cbnz	r2, 13310 <update_cache+0x10>
   1330e:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   13310:	b970      	cbnz	r0, 13330 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   13312:	6899      	ldr	r1, [r3, #8]
   13314:	b161      	cbz	r1, 13330 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   13316:	7a48      	ldrb	r0, [r1, #9]
   13318:	06c0      	lsls	r0, r0, #27
   1331a:	d109      	bne.n	13330 <update_cache+0x30>
   1331c:	6a48      	ldr	r0, [r1, #36]	; 0x24
   1331e:	3001      	adds	r0, #1
   13320:	d106      	bne.n	13330 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   13322:	8948      	ldrh	r0, [r1, #10]
   13324:	287f      	cmp	r0, #127	; 0x7f
   13326:	d903      	bls.n	13330 <update_cache+0x30>
	return thread == _idle_thread;
   13328:	4804      	ldr	r0, [pc, #16]	; (1333c <update_cache+0x3c>)
	if (_is_idle(_current)) {
   1332a:	6800      	ldr	r0, [r0, #0]
   1332c:	4281      	cmp	r1, r0
   1332e:	d101      	bne.n	13334 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   13330:	621a      	str	r2, [r3, #32]
   13332:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   13334:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   13336:	4770      	bx	lr
   13338:	20001948 	.word	0x20001948
   1333c:	00017790 	.word	0x00017790

00013340 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   13340:	f990 000a 	ldrsb.w	r0, [r0, #10]
   13344:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   13348:	4298      	cmp	r0, r3
   1334a:	bfac      	ite	ge
   1334c:	2000      	movge	r0, #0
   1334e:	2001      	movlt	r0, #1
   13350:	4770      	bx	lr
	...

00013354 <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   13354:	b510      	push	{r4, lr}
   13356:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   13358:	f7ff ffca 	bl	132f0 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   1335c:	7a4b      	ldrb	r3, [r1, #9]
   1335e:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   13360:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   13362:	d50d      	bpl.n	13380 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   13364:	4608      	mov	r0, r1
   13366:	f7ff ffa5 	bl	132b4 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   1336a:	7a4b      	ldrb	r3, [r1, #9]
   1336c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13370:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   13372:	4b05      	ldr	r3, [pc, #20]	; (13388 <_remove_thread_from_ready_q+0x34>)
   13374:	6898      	ldr	r0, [r3, #8]
   13376:	1a43      	subs	r3, r0, r1
   13378:	4258      	negs	r0, r3
   1337a:	4158      	adcs	r0, r3
   1337c:	f7ff ffc0 	bl	13300 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13380:	f384 8811 	msr	BASEPRI, r4
   13384:	bd10      	pop	{r4, pc}
   13386:	bf00      	nop
   13388:	20001948 	.word	0x20001948

0001338c <_find_first_thread_to_unpend>:
{
   1338c:	b508      	push	{r3, lr}
   1338e:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   13390:	f7ff ffae 	bl	132f0 <k_spin_lock.isra.11>
	return list->head == list;
   13394:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13396:	429a      	cmp	r2, r3
   13398:	bf08      	it	eq
   1339a:	2300      	moveq	r3, #0
   1339c:	f380 8811 	msr	BASEPRI, r0
}
   133a0:	4618      	mov	r0, r3
   133a2:	bd08      	pop	{r3, pc}

000133a4 <_unpend_thread_no_timeout>:
{
   133a4:	b510      	push	{r4, lr}
   133a6:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   133a8:	f7ff ffa2 	bl	132f0 <k_spin_lock.isra.11>
   133ac:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   133ae:	4608      	mov	r0, r1
   133b0:	f7ff ff80 	bl	132b4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   133b4:	7a4b      	ldrb	r3, [r1, #9]
   133b6:	f023 0302 	bic.w	r3, r3, #2
   133ba:	724b      	strb	r3, [r1, #9]
   133bc:	f384 8811 	msr	BASEPRI, r4
   133c0:	bd10      	pop	{r4, pc}

000133c2 <_unpend_first_thread>:
{
   133c2:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   133c4:	2100      	movs	r1, #0
   133c6:	f7ff ffe1 	bl	1338c <_find_first_thread_to_unpend>

	if (thread) {
   133ca:	4604      	mov	r4, r0
   133cc:	b128      	cbz	r0, 133da <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   133ce:	f7ff ffe9 	bl	133a4 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   133d2:	f104 0014 	add.w	r0, r4, #20
   133d6:	f7ff ff73 	bl	132c0 <_abort_timeout>
}
   133da:	4620      	mov	r0, r4
   133dc:	bd10      	pop	{r4, pc}

000133de <_unpend_thread>:
{
   133de:	b510      	push	{r4, lr}
   133e0:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   133e2:	f7ff ffdf 	bl	133a4 <_unpend_thread_no_timeout>
   133e6:	f104 0014 	add.w	r0, r4, #20
}
   133ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   133ee:	f7ff bf67 	b.w	132c0 <_abort_timeout>
	...

000133f4 <_reschedule>:
   133f4:	f3ef 8305 	mrs	r3, IPSR
   133f8:	2b0d      	cmp	r3, #13
   133fa:	d809      	bhi.n	13410 <_reschedule+0x1c>
   133fc:	b11b      	cbz	r3, 13406 <_reschedule+0x12>
   133fe:	4b09      	ldr	r3, [pc, #36]	; (13424 <_reschedule+0x30>)
   13400:	685b      	ldr	r3, [r3, #4]
   13402:	051b      	lsls	r3, r3, #20
   13404:	d504      	bpl.n	13410 <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   13406:	4b08      	ldr	r3, [pc, #32]	; (13428 <_reschedule+0x34>)
   13408:	689a      	ldr	r2, [r3, #8]
   1340a:	6a1b      	ldr	r3, [r3, #32]
   1340c:	429a      	cmp	r2, r3
   1340e:	d103      	bne.n	13418 <_reschedule+0x24>
   13410:	f380 8811 	msr	BASEPRI, r0
}
   13414:	2000      	movs	r0, #0
   13416:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   13418:	4b04      	ldr	r3, [pc, #16]	; (1342c <_reschedule+0x38>)
   1341a:	2200      	movs	r2, #0
   1341c:	601a      	str	r2, [r3, #0]
   1341e:	f7ee b873 	b.w	1508 <__swap>
   13422:	bf00      	nop
   13424:	e000ed00 	.word	0xe000ed00
   13428:	20001948 	.word	0x20001948
   1342c:	2000197c 	.word	0x2000197c

00013430 <k_sched_unlock>:
{
   13430:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   13432:	f7ff ff5d 	bl	132f0 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   13436:	4b0a      	ldr	r3, [pc, #40]	; (13460 <k_sched_unlock+0x30>)
   13438:	689a      	ldr	r2, [r3, #8]
   1343a:	7ad3      	ldrb	r3, [r2, #11]
   1343c:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   1343e:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   13440:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   13442:	2001      	movs	r0, #1
   13444:	f7ff ff5c 	bl	13300 <update_cache>
   13448:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   1344c:	f04f 0320 	mov.w	r3, #32
   13450:	f3ef 8011 	mrs	r0, BASEPRI
   13454:	f383 8811 	msr	BASEPRI, r3
}
   13458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   1345c:	f7ff bfca 	b.w	133f4 <_reschedule>
   13460:	20001948 	.word	0x20001948

00013464 <_priq_dumb_add>:
{
   13464:	b510      	push	{r4, lr}
	return list->head == list;
   13466:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13468:	4298      	cmp	r0, r3
   1346a:	bf08      	it	eq
   1346c:	2300      	moveq	r3, #0
   1346e:	b193      	cbz	r3, 13496 <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   13470:	f991 400a 	ldrsb.w	r4, [r1, #10]
   13474:	f993 200a 	ldrsb.w	r2, [r3, #10]
   13478:	4294      	cmp	r4, r2
   1347a:	da06      	bge.n	1348a <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   1347c:	685a      	ldr	r2, [r3, #4]
   1347e:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   13480:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   13482:	685a      	ldr	r2, [r3, #4]
   13484:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   13486:	6059      	str	r1, [r3, #4]
   13488:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   1348a:	6842      	ldr	r2, [r0, #4]
   1348c:	4293      	cmp	r3, r2
   1348e:	d002      	beq.n	13496 <_priq_dumb_add+0x32>
   13490:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13492:	2b00      	cmp	r3, #0
   13494:	d1eb      	bne.n	1346e <_priq_dumb_add+0xa>
	node->next = list;
   13496:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   13498:	6843      	ldr	r3, [r0, #4]
   1349a:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   1349c:	6843      	ldr	r3, [r0, #4]
   1349e:	6019      	str	r1, [r3, #0]
	list->tail = node;
   134a0:	6041      	str	r1, [r0, #4]
   134a2:	bd10      	pop	{r4, pc}

000134a4 <_add_thread_to_ready_q>:
{
   134a4:	b538      	push	{r3, r4, r5, lr}
   134a6:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   134a8:	f7ff ff22 	bl	132f0 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   134ac:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   134ae:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   134b0:	4806      	ldr	r0, [pc, #24]	; (134cc <_add_thread_to_ready_q+0x28>)
   134b2:	f7ff ffd7 	bl	13464 <_priq_dumb_add>
	thread->base.thread_state |= states;
   134b6:	7a63      	ldrb	r3, [r4, #9]
   134b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   134bc:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   134be:	2000      	movs	r0, #0
   134c0:	f7ff ff1e 	bl	13300 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   134c4:	f385 8811 	msr	BASEPRI, r5
   134c8:	bd38      	pop	{r3, r4, r5, pc}
   134ca:	bf00      	nop
   134cc:	2000196c 	.word	0x2000196c

000134d0 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   134d0:	7a42      	ldrb	r2, [r0, #9]
   134d2:	06d2      	lsls	r2, r2, #27
   134d4:	d104      	bne.n	134e0 <_ready_thread+0x10>
   134d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   134d8:	3301      	adds	r3, #1
   134da:	d101      	bne.n	134e0 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   134dc:	f7ff bfe2 	b.w	134a4 <_add_thread_to_ready_q>
   134e0:	4770      	bx	lr
	...

000134e4 <_add_timeout>:
{
   134e4:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   134e6:	610b      	str	r3, [r1, #16]
{
   134e8:	4604      	mov	r4, r0
   134ea:	461d      	mov	r5, r3
	timeout->thread = thread;
   134ec:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   134ee:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   134f0:	bb03      	cbnz	r3, 13534 <_add_timeout+0x50>
	__asm__ volatile(
   134f2:	f04f 0320 	mov.w	r3, #32
   134f6:	f3ef 8611 	mrs	r6, BASEPRI
   134fa:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   134fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13502:	610b      	str	r3, [r1, #16]
	if (thread) {
   13504:	b170      	cbz	r0, 13524 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   13506:	68cb      	ldr	r3, [r1, #12]
   13508:	b113      	cbz	r3, 13510 <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   1350a:	f7ff ff4b 	bl	133a4 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   1350e:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13510:	7a63      	ldrb	r3, [r4, #9]
   13512:	f023 0304 	bic.w	r3, r3, #4
   13516:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   13518:	4620      	mov	r0, r4
   1351a:	f7ff ffd9 	bl	134d0 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1351e:	f386 8811 	msr	BASEPRI, r6
   13522:	bd70      	pop	{r4, r5, r6, pc}
   13524:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   13528:	694b      	ldr	r3, [r1, #20]
   1352a:	b32b      	cbz	r3, 13578 <_add_timeout+0x94>
			timeout->func(timeout);
   1352c:	4608      	mov	r0, r1
}
   1352e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   13532:	4718      	bx	r3
	return list->head == list;
   13534:	4a11      	ldr	r2, [pc, #68]	; (1357c <_add_timeout+0x98>)
   13536:	4610      	mov	r0, r2
   13538:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1353c:	4283      	cmp	r3, r0
   1353e:	d10c      	bne.n	1355a <_add_timeout+0x76>
	node->next = list;
   13540:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   13542:	6993      	ldr	r3, [r2, #24]
   13544:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   13546:	6993      	ldr	r3, [r2, #24]
   13548:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1354a:	6191      	str	r1, [r2, #24]
   1354c:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   1354e:	1b64      	subs	r4, r4, r5
   13550:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   13552:	6994      	ldr	r4, [r2, #24]
   13554:	42a3      	cmp	r3, r4
   13556:	d0f3      	beq.n	13540 <_add_timeout+0x5c>
   13558:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   1355a:	2b00      	cmp	r3, #0
   1355c:	d0f0      	beq.n	13540 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   1355e:	690c      	ldr	r4, [r1, #16]
   13560:	691d      	ldr	r5, [r3, #16]
   13562:	42ac      	cmp	r4, r5
   13564:	dcf3      	bgt.n	1354e <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   13566:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   13568:	1b2c      	subs	r4, r5, r4
   1356a:	611c      	str	r4, [r3, #16]
   1356c:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   1356e:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   13570:	685a      	ldr	r2, [r3, #4]
   13572:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   13574:	6059      	str	r1, [r3, #4]
   13576:	bd70      	pop	{r4, r5, r6, pc}
   13578:	bd70      	pop	{r4, r5, r6, pc}
   1357a:	bf00      	nop
   1357c:	20001948 	.word	0x20001948

00013580 <_move_thread_to_end_of_prio_q>:
{
   13580:	b538      	push	{r3, r4, r5, lr}
   13582:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   13584:	f7ff feb4 	bl	132f0 <k_spin_lock.isra.11>
   13588:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   1358a:	4620      	mov	r0, r4
   1358c:	f7ff fe92 	bl	132b4 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   13590:	4621      	mov	r1, r4
   13592:	4806      	ldr	r0, [pc, #24]	; (135ac <_move_thread_to_end_of_prio_q+0x2c>)
   13594:	f7ff ff66 	bl	13464 <_priq_dumb_add>
	thread->base.thread_state |= states;
   13598:	7a63      	ldrb	r3, [r4, #9]
   1359a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1359e:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   135a0:	2000      	movs	r0, #0
   135a2:	f7ff fead 	bl	13300 <update_cache>
   135a6:	f385 8811 	msr	BASEPRI, r5
   135aa:	bd38      	pop	{r3, r4, r5, pc}
   135ac:	2000196c 	.word	0x2000196c

000135b0 <pend>:
{
   135b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   135b2:	4605      	mov	r5, r0
   135b4:	4614      	mov	r4, r2
   135b6:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   135b8:	f7ff fecc 	bl	13354 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   135bc:	7a6b      	ldrb	r3, [r5, #9]
   135be:	f043 0302 	orr.w	r3, r3, #2
   135c2:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   135c4:	1c63      	adds	r3, r4, #1
   135c6:	d012      	beq.n	135ee <pend+0x3e>
	__asm__ volatile(
   135c8:	f04f 0320 	mov.w	r3, #32
   135cc:	f3ef 8711 	mrs	r7, BASEPRI
   135d0:	f383 8811 	msr	BASEPRI, r3
   135d4:	230a      	movs	r3, #10
   135d6:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   135d8:	4632      	mov	r2, r6
   135da:	fbb4 f3f3 	udiv	r3, r4, r3
   135de:	f105 0114 	add.w	r1, r5, #20
   135e2:	3301      	adds	r3, #1
   135e4:	4628      	mov	r0, r5
   135e6:	f7ff ff7d 	bl	134e4 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   135ea:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   135ee:	b12e      	cbz	r6, 135fc <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   135f0:	4629      	mov	r1, r5
   135f2:	4630      	mov	r0, r6
}
   135f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   135f8:	f7ff bf34 	b.w	13464 <_priq_dumb_add>
   135fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00013600 <_pend_current_thread>:
{
   13600:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   13602:	4b06      	ldr	r3, [pc, #24]	; (1361c <_pend_current_thread+0x1c>)
{
   13604:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   13606:	6898      	ldr	r0, [r3, #8]
   13608:	f7ff ffd2 	bl	135b0 <pend>
	_time_slice_elapsed = 0;
   1360c:	4b04      	ldr	r3, [pc, #16]	; (13620 <_pend_current_thread+0x20>)
   1360e:	2200      	movs	r2, #0
   13610:	4620      	mov	r0, r4
}
   13612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   13616:	601a      	str	r2, [r3, #0]
   13618:	f7ed bf76 	b.w	1508 <__swap>
   1361c:	20001948 	.word	0x20001948
   13620:	2000197c 	.word	0x2000197c

00013624 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   13624:	4b13      	ldr	r3, [pc, #76]	; (13674 <_is_thread_time_slicing+0x50>)
   13626:	681b      	ldr	r3, [r3, #0]
   13628:	2b00      	cmp	r3, #0
{
   1362a:	b510      	push	{r4, lr}
   1362c:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   1362e:	dd1f      	ble.n	13670 <_is_thread_time_slicing+0x4c>
   13630:	8943      	ldrh	r3, [r0, #10]
   13632:	2b7f      	cmp	r3, #127	; 0x7f
   13634:	d81c      	bhi.n	13670 <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   13636:	4b10      	ldr	r3, [pc, #64]	; (13678 <_is_thread_time_slicing+0x54>)
   13638:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   1363c:	681b      	ldr	r3, [r3, #0]
   1363e:	4299      	cmp	r1, r3
   13640:	db16      	blt.n	13670 <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   13642:	f7ff fe55 	bl	132f0 <k_spin_lock.isra.11>
	return list->head == list;
   13646:	490d      	ldr	r1, [pc, #52]	; (1367c <_is_thread_time_slicing+0x58>)
   13648:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1364c:	428b      	cmp	r3, r1
   1364e:	4604      	mov	r4, r0
   13650:	d00a      	beq.n	13668 <_is_thread_time_slicing+0x44>
		if (next) {
   13652:	b15b      	cbz	r3, 1366c <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   13654:	f992 000a 	ldrsb.w	r0, [r2, #10]
   13658:	f993 300a 	ldrsb.w	r3, [r3, #10]
   1365c:	1ac3      	subs	r3, r0, r3
   1365e:	4258      	negs	r0, r3
   13660:	4158      	adcs	r0, r3
   13662:	f384 8811 	msr	BASEPRI, r4
	return ret;
   13666:	bd10      	pop	{r4, pc}
   13668:	2000      	movs	r0, #0
   1366a:	e7fa      	b.n	13662 <_is_thread_time_slicing+0x3e>
   1366c:	4618      	mov	r0, r3
   1366e:	e7f8      	b.n	13662 <_is_thread_time_slicing+0x3e>
		return 0;
   13670:	2000      	movs	r0, #0
}
   13672:	bd10      	pop	{r4, pc}
   13674:	20001828 	.word	0x20001828
   13678:	2000182c 	.word	0x2000182c
   1367c:	20001948 	.word	0x20001948

00013680 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   13680:	4b01      	ldr	r3, [pc, #4]	; (13688 <_update_time_slice_before_swap+0x8>)
   13682:	2200      	movs	r2, #0
   13684:	601a      	str	r2, [r3, #0]
   13686:	4770      	bx	lr
   13688:	2000197c 	.word	0x2000197c

0001368c <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   1368c:	b538      	push	{r3, r4, r5, lr}
   1368e:	4605      	mov	r5, r0
	int need_sched = 0;
   13690:	2000      	movs	r0, #0
	return list->head == list;
   13692:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13694:	42a5      	cmp	r5, r4
   13696:	d000      	beq.n	1369a <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   13698:	b904      	cbnz	r4, 1369c <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   1369a:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   1369c:	4620      	mov	r0, r4
   1369e:	f7ff fe9e 	bl	133de <_unpend_thread>
		_ready_thread(th);
   136a2:	4620      	mov	r0, r4
   136a4:	f7ff ff14 	bl	134d0 <_ready_thread>
		need_sched = 1;
   136a8:	2001      	movs	r0, #1
   136aa:	e7f2      	b.n	13692 <_unpend_all+0x6>

000136ac <_sched_init>:
	list->head = (sys_dnode_t *)list;
   136ac:	4b02      	ldr	r3, [pc, #8]	; (136b8 <_sched_init+0xc>)
   136ae:	f103 0224 	add.w	r2, r3, #36	; 0x24
   136b2:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   136b4:	629a      	str	r2, [r3, #40]	; 0x28
   136b6:	4770      	bx	lr
   136b8:	20001948 	.word	0x20001948

000136bc <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   136bc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   136be:	4c14      	ldr	r4, [pc, #80]	; (13710 <_impl_k_yield+0x54>)
   136c0:	4b14      	ldr	r3, [pc, #80]	; (13714 <_impl_k_yield+0x58>)
   136c2:	68a2      	ldr	r2, [r4, #8]
   136c4:	681b      	ldr	r3, [r3, #0]
   136c6:	429a      	cmp	r2, r3
   136c8:	d00f      	beq.n	136ea <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   136ca:	f7ff fe11 	bl	132f0 <k_spin_lock.isra.11>
   136ce:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   136d0:	68a0      	ldr	r0, [r4, #8]
   136d2:	f7ff fdef 	bl	132b4 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   136d6:	68a1      	ldr	r1, [r4, #8]
   136d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   136dc:	f7ff fec2 	bl	13464 <_priq_dumb_add>
			update_cache(1);
   136e0:	2001      	movs	r0, #1
   136e2:	f7ff fe0d 	bl	13300 <update_cache>
   136e6:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   136ea:	6a22      	ldr	r2, [r4, #32]
   136ec:	68a3      	ldr	r3, [r4, #8]
   136ee:	429a      	cmp	r2, r3
   136f0:	d00c      	beq.n	1370c <_impl_k_yield+0x50>
	__asm__ volatile(
   136f2:	f04f 0320 	mov.w	r3, #32
   136f6:	f3ef 8011 	mrs	r0, BASEPRI
   136fa:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   136fe:	4b06      	ldr	r3, [pc, #24]	; (13718 <_impl_k_yield+0x5c>)
   13700:	2200      	movs	r2, #0
   13702:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   13704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13708:	f7ed befe 	b.w	1508 <__swap>
   1370c:	bd38      	pop	{r3, r4, r5, pc}
   1370e:	bf00      	nop
   13710:	20001948 	.word	0x20001948
   13714:	00017790 	.word	0x00017790
   13718:	2000197c 	.word	0x2000197c

0001371c <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   1371c:	4b01      	ldr	r3, [pc, #4]	; (13724 <_impl_k_current_get+0x8>)
   1371e:	6898      	ldr	r0, [r3, #8]
   13720:	4770      	bx	lr
   13722:	bf00      	nop
   13724:	20001948 	.word	0x20001948

00013728 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   13728:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   1372c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1372e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   13730:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   13732:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   13734:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   13736:	6143      	str	r3, [r0, #20]
   13738:	4770      	bx	lr

0001373a <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   1373a:	b570      	push	{r4, r5, r6, lr}
   1373c:	4604      	mov	r4, r0
   1373e:	f04f 0320 	mov.w	r3, #32
   13742:	f3ef 8611 	mrs	r6, BASEPRI
   13746:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   1374a:	f7ff fe3a 	bl	133c2 <_unpend_first_thread>
	if (thread) {
   1374e:	4605      	mov	r5, r0
   13750:	b160      	cbz	r0, 1376c <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   13752:	7a43      	ldrb	r3, [r0, #9]
   13754:	06db      	lsls	r3, r3, #27
   13756:	d102      	bne.n	1375e <_impl_k_sem_give+0x24>
   13758:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1375a:	3301      	adds	r3, #1
   1375c:	d012      	beq.n	13784 <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1375e:	2300      	movs	r3, #0
   13760:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   13762:	4630      	mov	r0, r6
}
   13764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   13768:	f7ff be44 	b.w	133f4 <_reschedule>
	sem->count += (sem->count != sem->limit);
   1376c:	68a3      	ldr	r3, [r4, #8]
   1376e:	68e2      	ldr	r2, [r4, #12]
   13770:	429a      	cmp	r2, r3
   13772:	bf18      	it	ne
   13774:	3301      	addne	r3, #1
   13776:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   13778:	2102      	movs	r1, #2
   1377a:	f104 0010 	add.w	r0, r4, #16
   1377e:	f000 fca1 	bl	140c4 <_handle_obj_poll_events>
   13782:	e7ee      	b.n	13762 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   13784:	f7ff fe8e 	bl	134a4 <_add_thread_to_ready_q>
   13788:	e7e9      	b.n	1375e <_impl_k_sem_give+0x24>

0001378a <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1378a:	b410      	push	{r4}
   1378c:	460a      	mov	r2, r1
   1378e:	4604      	mov	r4, r0
   13790:	f04f 0320 	mov.w	r3, #32
   13794:	f3ef 8011 	mrs	r0, BASEPRI
   13798:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   1379c:	68a3      	ldr	r3, [r4, #8]
   1379e:	b133      	cbz	r3, 137ae <_impl_k_sem_take+0x24>
		sem->count--;
   137a0:	3b01      	subs	r3, #1
   137a2:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   137a4:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   137a8:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   137aa:	bc10      	pop	{r4}
   137ac:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   137ae:	b921      	cbnz	r1, 137ba <_impl_k_sem_take+0x30>
   137b0:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   137b4:	f06f 000f 	mvn.w	r0, #15
   137b8:	e7f7      	b.n	137aa <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   137ba:	4621      	mov	r1, r4
}
   137bc:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   137be:	f7ff bf1f 	b.w	13600 <_pend_current_thread>
	...

000137c4 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   137c4:	4b03      	ldr	r3, [pc, #12]	; (137d4 <_impl_k_uptime_get_32+0x10>)
   137c6:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   137ca:	230a      	movs	r3, #10
   137cc:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   137d0:	4770      	bx	lr
   137d2:	bf00      	nop
   137d4:	20001980 	.word	0x20001980

000137d8 <_tick_get>:
	__asm__ volatile(
   137d8:	f04f 0220 	mov.w	r2, #32
   137dc:	f3ef 8311 	mrs	r3, BASEPRI
   137e0:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   137e4:	4a02      	ldr	r2, [pc, #8]	; (137f0 <_tick_get+0x18>)
   137e6:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   137ea:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   137ee:	4770      	bx	lr
   137f0:	20001980 	.word	0x20001980

000137f4 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   137f4:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   137f6:	f7ff ffef 	bl	137d8 <_tick_get>
   137fa:	240a      	movs	r4, #10
   137fc:	fba0 2304 	umull	r2, r3, r0, r4
   13800:	fb04 3301 	mla	r3, r4, r1, r3
}
   13804:	4610      	mov	r0, r2
   13806:	4619      	mov	r1, r3
   13808:	bd10      	pop	{r4, pc}
	...

0001380c <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   1380c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13810:	4607      	mov	r7, r0
   13812:	b085      	sub	sp, #20
	__asm__ volatile(
   13814:	f04f 0320 	mov.w	r3, #32
   13818:	f3ef 8011 	mrs	r0, BASEPRI
   1381c:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   13820:	4961      	ldr	r1, [pc, #388]	; (139a8 <_nano_sys_clock_tick_announce+0x19c>)
   13822:	e9d1 4500 	ldrd	r4, r5, [r1]
   13826:	19e2      	adds	r2, r4, r7
   13828:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   1382c:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13830:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   13834:	ae02      	add	r6, sp, #8
   13836:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   13838:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   1383a:	f04f 0320 	mov.w	r3, #32
   1383e:	f3ef 8011 	mrs	r0, BASEPRI
   13842:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   13846:	4c59      	ldr	r4, [pc, #356]	; (139ac <_nano_sys_clock_tick_announce+0x1a0>)
   13848:	4621      	mov	r1, r4
   1384a:	4602      	mov	r2, r0
   1384c:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13850:	428b      	cmp	r3, r1
   13852:	d000      	beq.n	13856 <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   13854:	b9fb      	cbnz	r3, 13896 <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13856:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   1385a:	68a0      	ldr	r0, [r4, #8]
   1385c:	f7ff fee2 	bl	13624 <_is_thread_time_slicing>
   13860:	b1b0      	cbz	r0, 13890 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   13862:	4a53      	ldr	r2, [pc, #332]	; (139b0 <_nano_sys_clock_tick_announce+0x1a4>)
   13864:	6811      	ldr	r1, [r2, #0]
   13866:	230a      	movs	r3, #10
   13868:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   1386c:	4b51      	ldr	r3, [pc, #324]	; (139b4 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   1386e:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   13870:	681b      	ldr	r3, [r3, #0]
   13872:	429f      	cmp	r7, r3
   13874:	db0c      	blt.n	13890 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   13876:	2300      	movs	r3, #0
   13878:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   1387a:	f04f 0320 	mov.w	r3, #32
   1387e:	f3ef 8511 	mrs	r5, BASEPRI
   13882:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   13886:	68a0      	ldr	r0, [r4, #8]
   13888:	f7ff fe7a 	bl	13580 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1388c:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   13890:	b005      	add	sp, #20
   13892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   13896:	4d48      	ldr	r5, [pc, #288]	; (139b8 <_nano_sys_clock_tick_announce+0x1ac>)
   13898:	9501      	str	r5, [sp, #4]
   1389a:	2101      	movs	r1, #1
   1389c:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   1389e:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   138a2:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   138a4:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   138a8:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   138aa:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   138ac:	bfaa      	itet	ge
   138ae:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   138b2:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   138b6:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   138ba:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   138bc:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   138be:	691d      	ldr	r5, [r3, #16]
   138c0:	4298      	cmp	r0, r3
   138c2:	bf14      	ite	ne
   138c4:	6818      	ldrne	r0, [r3, #0]
   138c6:	2000      	moveq	r0, #0
   138c8:	b9d5      	cbnz	r5, 13900 <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   138ca:	e893 0220 	ldmia.w	r3, {r5, r9}
   138ce:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   138d2:	681d      	ldr	r5, [r3, #0]
   138d4:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   138d8:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   138da:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   138de:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   138e0:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   138e2:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   138e4:	f8c3 c010 	str.w	ip, [r3, #16]
   138e8:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   138ec:	f04f 0320 	mov.w	r3, #32
   138f0:	f3ef 8211 	mrs	r2, BASEPRI
   138f4:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   138f8:	4603      	mov	r3, r0
   138fa:	2800      	cmp	r0, #0
   138fc:	d1d4      	bne.n	138a8 <_nano_sys_clock_tick_announce+0x9c>
   138fe:	e001      	b.n	13904 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   13900:	2900      	cmp	r1, #0
   13902:	dcf1      	bgt.n	138e8 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13904:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   13908:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1390a:	42b0      	cmp	r0, r6
   1390c:	d103      	bne.n	13916 <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   1390e:	9a01      	ldr	r2, [sp, #4]
   13910:	2300      	movs	r3, #0
   13912:	6013      	str	r3, [r2, #0]
   13914:	e7a1      	b.n	1385a <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13916:	2800      	cmp	r0, #0
   13918:	d0f9      	beq.n	1390e <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   1391a:	9b03      	ldr	r3, [sp, #12]
   1391c:	4298      	cmp	r0, r3
   1391e:	d102      	bne.n	13926 <_nano_sys_clock_tick_announce+0x11a>
   13920:	f04f 0b00 	mov.w	fp, #0
   13924:	e001      	b.n	1392a <_nano_sys_clock_tick_announce+0x11e>
   13926:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1392a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   1392e:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   13932:	e890 000c 	ldmia.w	r0, {r2, r3}
   13936:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13938:	6802      	ldr	r2, [r0, #0]
   1393a:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   1393c:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   1393e:	f04f 0320 	mov.w	r3, #32
   13942:	f3ef 8811 	mrs	r8, BASEPRI
   13946:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   1394a:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   1394e:	b1d6      	cbz	r6, 13986 <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   13950:	68c3      	ldr	r3, [r0, #12]
   13952:	b123      	cbz	r3, 1395e <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   13954:	4630      	mov	r0, r6
   13956:	f7ff fd25 	bl	133a4 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   1395a:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1395e:	7a73      	ldrb	r3, [r6, #9]
   13960:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   13964:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13968:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   1396a:	d102      	bne.n	13972 <_nano_sys_clock_tick_announce+0x166>
   1396c:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1396e:	3301      	adds	r3, #1
   13970:	d015      	beq.n	1399e <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13972:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13976:	f1bb 0f00 	cmp.w	fp, #0
   1397a:	d0c8      	beq.n	1390e <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   1397c:	9b03      	ldr	r3, [sp, #12]
   1397e:	455b      	cmp	r3, fp
   13980:	d108      	bne.n	13994 <_nano_sys_clock_tick_announce+0x188>
   13982:	2300      	movs	r3, #0
   13984:	e008      	b.n	13998 <_nano_sys_clock_tick_announce+0x18c>
   13986:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   1398a:	6943      	ldr	r3, [r0, #20]
   1398c:	2b00      	cmp	r3, #0
   1398e:	d0f2      	beq.n	13976 <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   13990:	4798      	blx	r3
   13992:	e7f0      	b.n	13976 <_nano_sys_clock_tick_announce+0x16a>
   13994:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13998:	4658      	mov	r0, fp
   1399a:	469b      	mov	fp, r3
   1399c:	e7c9      	b.n	13932 <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   1399e:	4630      	mov	r0, r6
   139a0:	f7ff fd80 	bl	134a4 <_add_thread_to_ready_q>
   139a4:	e7e5      	b.n	13972 <_nano_sys_clock_tick_announce+0x166>
   139a6:	bf00      	nop
   139a8:	20001980 	.word	0x20001980
   139ac:	20001948 	.word	0x20001948
   139b0:	2000197c 	.word	0x2000197c
   139b4:	20001828 	.word	0x20001828
   139b8:	20001978 	.word	0x20001978

000139bc <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   139bc:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   139be:	f44f 6280 	mov.w	r2, #1024	; 0x400
   139c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   139c6:	4903      	ldr	r1, [pc, #12]	; (139d4 <k_sys_work_q_init+0x18>)
   139c8:	4803      	ldr	r0, [pc, #12]	; (139d8 <k_sys_work_q_init+0x1c>)
   139ca:	f000 f983 	bl	13cd4 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   139ce:	2000      	movs	r0, #0
   139d0:	bd08      	pop	{r3, pc}
   139d2:	bf00      	nop
   139d4:	20003620 	.word	0x20003620
   139d8:	20001988 	.word	0x20001988

000139dc <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   139dc:	6903      	ldr	r3, [r0, #16]
   139de:	1c5a      	adds	r2, r3, #1
   139e0:	d011      	beq.n	13a06 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   139e2:	4a0a      	ldr	r2, [pc, #40]	; (13a0c <_abort_timeout+0x30>)
   139e4:	6992      	ldr	r2, [r2, #24]
   139e6:	4290      	cmp	r0, r2
   139e8:	bf1f      	itttt	ne
   139ea:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   139ec:	690a      	ldrne	r2, [r1, #16]
   139ee:	189b      	addne	r3, r3, r2
   139f0:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   139f2:	e890 000c 	ldmia.w	r0, {r2, r3}
   139f6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   139f8:	6802      	ldr	r2, [r0, #0]
   139fa:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   139fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a00:	6103      	str	r3, [r0, #16]
	return 0;
   13a02:	2000      	movs	r0, #0
   13a04:	4770      	bx	lr
		return _INACTIVE;
   13a06:	4618      	mov	r0, r3
}
   13a08:	4770      	bx	lr
   13a0a:	bf00      	nop
   13a0c:	20001948 	.word	0x20001948

00013a10 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   13a10:	7a42      	ldrb	r2, [r0, #9]
   13a12:	06d2      	lsls	r2, r2, #27
   13a14:	d104      	bne.n	13a20 <_ready_thread+0x10>
   13a16:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13a18:	3301      	adds	r3, #1
   13a1a:	d101      	bne.n	13a20 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   13a1c:	f7ff bd42 	b.w	134a4 <_add_thread_to_ready_q>
   13a20:	4770      	bx	lr
	...

00013a24 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   13a24:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   13a26:	f04f 0320 	mov.w	r3, #32
   13a2a:	f3ef 8611 	mrs	r6, BASEPRI
   13a2e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   13a32:	4a19      	ldr	r2, [pc, #100]	; (13a98 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   13a34:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   13a36:	230a      	movs	r3, #10
   13a38:	3109      	adds	r1, #9
   13a3a:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   13a3e:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13a40:	6241      	str	r1, [r0, #36]	; 0x24
   13a42:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13a44:	2300      	movs	r3, #0
   13a46:	6203      	str	r3, [r0, #32]
   13a48:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13a4c:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   13a4e:	f100 0514 	add.w	r5, r0, #20
   13a52:	d108      	bne.n	13a66 <schedule_new_thread.part.11+0x42>
	node->next = list;
   13a54:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   13a56:	6993      	ldr	r3, [r2, #24]
   13a58:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   13a5a:	6993      	ldr	r3, [r2, #24]
   13a5c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   13a5e:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13a60:	f386 8811 	msr	BASEPRI, r6
   13a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13a66:	2b00      	cmp	r3, #0
   13a68:	d0f4      	beq.n	13a54 <schedule_new_thread.part.11+0x30>
   13a6a:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   13a6e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   13a70:	691f      	ldr	r7, [r3, #16]
   13a72:	42bc      	cmp	r4, r7
   13a74:	dc08      	bgt.n	13a88 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   13a76:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   13a78:	1b3c      	subs	r4, r7, r4
   13a7a:	611c      	str	r4, [r3, #16]
   13a7c:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   13a7e:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   13a80:	685a      	ldr	r2, [r3, #4]
   13a82:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   13a84:	605d      	str	r5, [r3, #4]
   13a86:	e7eb      	b.n	13a60 <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   13a88:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   13a8a:	4573      	cmp	r3, lr
   13a8c:	6244      	str	r4, [r0, #36]	; 0x24
   13a8e:	d0e1      	beq.n	13a54 <schedule_new_thread.part.11+0x30>
   13a90:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13a92:	2b00      	cmp	r3, #0
   13a94:	d1eb      	bne.n	13a6e <schedule_new_thread.part.11+0x4a>
   13a96:	e7dd      	b.n	13a54 <schedule_new_thread.part.11+0x30>
   13a98:	20001948 	.word	0x20001948

00013a9c <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   13a9c:	4770      	bx	lr
	...

00013aa0 <k_is_in_isr>:
   13aa0:	f3ef 8005 	mrs	r0, IPSR
   13aa4:	280d      	cmp	r0, #13
   13aa6:	d807      	bhi.n	13ab8 <k_is_in_isr+0x18>
   13aa8:	b138      	cbz	r0, 13aba <k_is_in_isr+0x1a>
   13aaa:	4b04      	ldr	r3, [pc, #16]	; (13abc <k_is_in_isr+0x1c>)
   13aac:	6858      	ldr	r0, [r3, #4]
   13aae:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   13ab2:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   13ab6:	4770      	bx	lr
   13ab8:	2001      	movs	r0, #1
}
   13aba:	4770      	bx	lr
   13abc:	e000ed00 	.word	0xe000ed00

00013ac0 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   13ac0:	4b02      	ldr	r3, [pc, #8]	; (13acc <_is_thread_essential+0xc>)
   13ac2:	689b      	ldr	r3, [r3, #8]
   13ac4:	7a18      	ldrb	r0, [r3, #8]
}
   13ac6:	f000 0001 	and.w	r0, r0, #1
   13aca:	4770      	bx	lr
   13acc:	20001948 	.word	0x20001948

00013ad0 <_impl_k_thread_start>:
{
   13ad0:	b510      	push	{r4, lr}
	__asm__ volatile(
   13ad2:	f04f 0320 	mov.w	r3, #32
   13ad6:	f3ef 8411 	mrs	r4, BASEPRI
   13ada:	f383 8811 	msr	BASEPRI, r3
   13ade:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   13ae0:	0759      	lsls	r1, r3, #29
   13ae2:	d402      	bmi.n	13aea <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13ae4:	f384 8811 	msr	BASEPRI, r4
   13ae8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13aea:	f023 0304 	bic.w	r3, r3, #4
   13aee:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   13af0:	f7ff ff8e 	bl	13a10 <_ready_thread>
	_reschedule(key);
   13af4:	4620      	mov	r0, r4
}
   13af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   13afa:	f7ff bc7b 	b.w	133f4 <_reschedule>
	...

00013b00 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   13b00:	b530      	push	{r4, r5, lr}
   13b02:	b087      	sub	sp, #28
   13b04:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13b06:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   13b08:	9504      	str	r5, [sp, #16]
   13b0a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13b0c:	9503      	str	r5, [sp, #12]
   13b0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   13b10:	9502      	str	r5, [sp, #8]
   13b12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   13b14:	9501      	str	r5, [sp, #4]
   13b16:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   13b18:	9500      	str	r5, [sp, #0]
   13b1a:	f7ed fef7 	bl	190c <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   13b1e:	4b04      	ldr	r3, [pc, #16]	; (13b30 <_setup_new_thread+0x30>)
   13b20:	689b      	ldr	r3, [r3, #8]
   13b22:	b913      	cbnz	r3, 13b2a <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   13b24:	6663      	str	r3, [r4, #100]	; 0x64
}
   13b26:	b007      	add	sp, #28
   13b28:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   13b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   13b2c:	e7fa      	b.n	13b24 <_setup_new_thread+0x24>
   13b2e:	bf00      	nop
   13b30:	20001948 	.word	0x20001948

00013b34 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   13b34:	b570      	push	{r4, r5, r6, lr}
   13b36:	b086      	sub	sp, #24
   13b38:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13b3a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   13b3c:	9604      	str	r6, [sp, #16]
   13b3e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   13b40:	9603      	str	r6, [sp, #12]
   13b42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   13b44:	9602      	str	r6, [sp, #8]
   13b46:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   13b48:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13b4a:	9601      	str	r6, [sp, #4]
   13b4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   13b4e:	9600      	str	r6, [sp, #0]
   13b50:	f7ff ffd6 	bl	13b00 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   13b54:	1c6b      	adds	r3, r5, #1
   13b56:	d003      	beq.n	13b60 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   13b58:	b92d      	cbnz	r5, 13b66 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   13b5a:	4620      	mov	r0, r4
   13b5c:	f7ff ffb8 	bl	13ad0 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   13b60:	4620      	mov	r0, r4
   13b62:	b006      	add	sp, #24
   13b64:	bd70      	pop	{r4, r5, r6, pc}
   13b66:	4629      	mov	r1, r5
   13b68:	4620      	mov	r0, r4
   13b6a:	f7ff ff5b 	bl	13a24 <schedule_new_thread.part.11>
   13b6e:	e7f7      	b.n	13b60 <_impl_k_thread_create+0x2c>

00013b70 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   13b70:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   13b72:	b510      	push	{r4, lr}
   13b74:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   13b76:	b103      	cbz	r3, 13b7a <_k_thread_single_abort+0xa>
		thread->fn_abort();
   13b78:	4798      	blx	r3
   13b7a:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   13b7c:	06da      	lsls	r2, r3, #27
   13b7e:	d106      	bne.n	13b8e <_k_thread_single_abort+0x1e>
   13b80:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13b82:	3201      	adds	r2, #1
   13b84:	d103      	bne.n	13b8e <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   13b86:	4620      	mov	r0, r4
   13b88:	f7ff fbe4 	bl	13354 <_remove_thread_from_ready_q>
   13b8c:	e00b      	b.n	13ba6 <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   13b8e:	079b      	lsls	r3, r3, #30
   13b90:	d502      	bpl.n	13b98 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   13b92:	4620      	mov	r0, r4
   13b94:	f7ff fc06 	bl	133a4 <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   13b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13b9a:	3301      	adds	r3, #1
   13b9c:	d003      	beq.n	13ba6 <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   13b9e:	f104 0014 	add.w	r0, r4, #20
   13ba2:	f7ff ff1b 	bl	139dc <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   13ba6:	7a63      	ldrb	r3, [r4, #9]
   13ba8:	f043 0308 	orr.w	r3, r3, #8
   13bac:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   13bae:	bd10      	pop	{r4, pc}

00013bb0 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   13bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   13bb2:	4f21      	ldr	r7, [pc, #132]	; (13c38 <_init_static_threads+0x88>)
   13bb4:	4d21      	ldr	r5, [pc, #132]	; (13c3c <_init_static_threads+0x8c>)
{
   13bb6:	b087      	sub	sp, #28
   13bb8:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   13bba:	42bd      	cmp	r5, r7
   13bbc:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   13bc0:	d314      	bcc.n	13bec <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   13bc2:	4b1f      	ldr	r3, [pc, #124]	; (13c40 <_init_static_threads+0x90>)
   13bc4:	689a      	ldr	r2, [r3, #8]
   13bc6:	7ad3      	ldrb	r3, [r2, #11]
   13bc8:	3b01      	subs	r3, #1
   13bca:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   13bcc:	f04f 0320 	mov.w	r3, #32
   13bd0:	f3ef 8511 	mrs	r5, BASEPRI
   13bd4:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   13bd8:	4c18      	ldr	r4, [pc, #96]	; (13c3c <_init_static_threads+0x8c>)
   13bda:	42b4      	cmp	r4, r6
   13bdc:	d31f      	bcc.n	13c1e <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13bde:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   13be2:	b007      	add	sp, #28
   13be4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   13be8:	f7ff bc22 	b.w	13430 <k_sched_unlock>
		_setup_new_thread(
   13bec:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   13bf0:	9304      	str	r3, [sp, #16]
   13bf2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   13bf6:	9303      	str	r3, [sp, #12]
   13bf8:	f854 3c14 	ldr.w	r3, [r4, #-20]
   13bfc:	9302      	str	r3, [sp, #8]
   13bfe:	f854 3c18 	ldr.w	r3, [r4, #-24]
   13c02:	9301      	str	r3, [sp, #4]
   13c04:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   13c08:	9300      	str	r3, [sp, #0]
   13c0a:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   13c0e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   13c10:	f7ff ff76 	bl	13b00 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   13c14:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   13c18:	651d      	str	r5, [r3, #80]	; 0x50
   13c1a:	4625      	mov	r5, r4
   13c1c:	e7cd      	b.n	13bba <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   13c1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13c20:	1c4b      	adds	r3, r1, #1
   13c22:	d003      	beq.n	13c2c <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   13c24:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   13c26:	b919      	cbnz	r1, 13c30 <_init_static_threads+0x80>
   13c28:	f7ff ff52 	bl	13ad0 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   13c2c:	342c      	adds	r4, #44	; 0x2c
   13c2e:	e7d4      	b.n	13bda <_init_static_threads+0x2a>
   13c30:	f7ff fef8 	bl	13a24 <schedule_new_thread.part.11>
   13c34:	e7fa      	b.n	13c2c <_init_static_threads+0x7c>
   13c36:	bf00      	nop
   13c38:	20003f04 	.word	0x20003f04
   13c3c:	20003f04 	.word	0x20003f04
   13c40:	20001948 	.word	0x20001948

00013c44 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   13c44:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   13c46:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   13c48:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   13c4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   13c4e:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   13c50:	72c3      	strb	r3, [r0, #11]
   13c52:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   13c54:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   13c56:	61c3      	str	r3, [r0, #28]
	t->func = func;
   13c58:	6283      	str	r3, [r0, #40]	; 0x28
   13c5a:	4770      	bx	lr

00013c5c <k_work_submit_to_queue>:
{
   13c5c:	b500      	push	{lr}
   13c5e:	f101 0308 	add.w	r3, r1, #8
   13c62:	f3bf 8f5b 	dmb	ish
   13c66:	e853 2f00 	ldrex	r2, [r3]
   13c6a:	f042 0e01 	orr.w	lr, r2, #1
   13c6e:	e843 ec00 	strex	ip, lr, [r3]
   13c72:	f1bc 0f00 	cmp.w	ip, #0
   13c76:	d1f6      	bne.n	13c66 <k_work_submit_to_queue+0xa>
   13c78:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   13c7c:	07d3      	lsls	r3, r2, #31
   13c7e:	d403      	bmi.n	13c88 <k_work_submit_to_queue+0x2c>
}
   13c80:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   13c84:	f7ff ba94 	b.w	131b0 <k_queue_append>
   13c88:	f85d fb04 	ldr.w	pc, [sp], #4

00013c8c <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   13c8c:	f1a0 010c 	sub.w	r1, r0, #12
   13c90:	6980      	ldr	r0, [r0, #24]
   13c92:	f7ff bfe3 	b.w	13c5c <k_work_submit_to_queue>

00013c96 <work_q_main>:
{
   13c96:	b510      	push	{r4, lr}
   13c98:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   13c9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13c9e:	4620      	mov	r0, r4
   13ca0:	f7ff faaa 	bl	131f8 <_impl_k_queue_get>
		if (!work) {
   13ca4:	4603      	mov	r3, r0
   13ca6:	2800      	cmp	r0, #0
   13ca8:	d0f7      	beq.n	13c9a <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13caa:	3308      	adds	r3, #8
		handler = work->handler;
   13cac:	6842      	ldr	r2, [r0, #4]
   13cae:	f3bf 8f5b 	dmb	ish
   13cb2:	e853 1f00 	ldrex	r1, [r3]
   13cb6:	f021 0e01 	bic.w	lr, r1, #1
   13cba:	e843 ec00 	strex	ip, lr, [r3]
   13cbe:	f1bc 0f00 	cmp.w	ip, #0
   13cc2:	d1f6      	bne.n	13cb2 <work_q_main+0x1c>
   13cc4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   13cc8:	07cb      	lsls	r3, r1, #31
   13cca:	d500      	bpl.n	13cce <work_q_main+0x38>
			handler(work);
   13ccc:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   13cce:	f7ff fcf5 	bl	136bc <_impl_k_yield>
   13cd2:	e7e2      	b.n	13c9a <work_q_main+0x4>

00013cd4 <k_work_q_start>:
{
   13cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13cd6:	b087      	sub	sp, #28
   13cd8:	4604      	mov	r4, r0
   13cda:	461f      	mov	r7, r3
   13cdc:	460d      	mov	r5, r1
   13cde:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   13ce0:	f7ff fa5e 	bl	131a0 <_impl_k_queue_init>

   13ce4:	2000      	movs	r0, #0
   13ce6:	9005      	str	r0, [sp, #20]
   13ce8:	9004      	str	r0, [sp, #16]
   13cea:	9002      	str	r0, [sp, #8]
   13cec:	9001      	str	r0, [sp, #4]
   13cee:	9703      	str	r7, [sp, #12]
   13cf0:	9400      	str	r4, [sp, #0]
   13cf2:	4b04      	ldr	r3, [pc, #16]	; (13d04 <k_work_q_start+0x30>)
   13cf4:	4632      	mov	r2, r6
   13cf6:	4629      	mov	r1, r5
   13cf8:	f104 0010 	add.w	r0, r4, #16
   13cfc:	f7ff ff1a 	bl	13b34 <_impl_k_thread_create>
}
   13d00:	b007      	add	sp, #28
   13d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d04:	00013c97 	.word	0x00013c97

00013d08 <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   13d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   13d0c:	2300      	movs	r3, #0
   13d0e:	61c2      	str	r2, [r0, #28]
	t->func = func;
   13d10:	4a04      	ldr	r2, [pc, #16]	; (13d24 <k_delayed_work_init+0x1c>)
   13d12:	6003      	str	r3, [r0, #0]
   13d14:	6041      	str	r1, [r0, #4]
   13d16:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   13d18:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   13d1a:	6143      	str	r3, [r0, #20]
	t->func = func;
   13d1c:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   13d1e:	6243      	str	r3, [r0, #36]	; 0x24
   13d20:	4770      	bx	lr
   13d22:	bf00      	nop
   13d24:	00013c8d 	.word	0x00013c8d

00013d28 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   13d28:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   13d2a:	f04f 0320 	mov.w	r3, #32
   13d2e:	f3ef 8411 	mrs	r4, BASEPRI
   13d32:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   13d36:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13d38:	b923      	cbnz	r3, 13d44 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13d3a:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   13d3e:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   13d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13d44:	f3bf 8f5b 	dmb	ish
   13d48:	6883      	ldr	r3, [r0, #8]
   13d4a:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   13d4e:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   13d50:	f100 0508 	add.w	r5, r0, #8
   13d54:	d533      	bpl.n	13dbe <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   13d56:	6a42      	ldr	r2, [r0, #36]	; 0x24
   13d58:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   13d5a:	2100      	movs	r1, #0
   13d5c:	2b00      	cmp	r3, #0
   13d5e:	d0ec      	beq.n	13d3a <k_delayed_work_cancel+0x12>
   13d60:	4298      	cmp	r0, r3
   13d62:	d127      	bne.n	13db4 <k_delayed_work_cancel+0x8c>
   13d64:	6803      	ldr	r3, [r0, #0]
   13d66:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13d68:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   13d6c:	b9c9      	cbnz	r1, 13da2 <k_delayed_work_cancel+0x7a>
   13d6e:	42b8      	cmp	r0, r7
	list->head = node;
   13d70:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   13d72:	d100      	bne.n	13d76 <k_delayed_work_cancel+0x4e>
	list->tail = node;
   13d74:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13d76:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13d78:	f003 0303 	and.w	r3, r3, #3
   13d7c:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   13d7e:	2300      	movs	r3, #0
   13d80:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13d82:	f3bf 8f5b 	dmb	ish
   13d86:	e855 2f00 	ldrex	r2, [r5]
   13d8a:	f022 0201 	bic.w	r2, r2, #1
   13d8e:	e845 2100 	strex	r1, r2, [r5]
   13d92:	2900      	cmp	r1, #0
   13d94:	d1f7      	bne.n	13d86 <k_delayed_work_cancel+0x5e>
   13d96:	f3bf 8f5b 	dmb	ish
   13d9a:	f384 8811 	msr	BASEPRI, r4
	return 0;
   13d9e:	4618      	mov	r0, r3
   13da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13da2:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13da4:	f006 0603 	and.w	r6, r6, #3
   13da8:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   13daa:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   13dac:	600b      	str	r3, [r1, #0]
	list->tail = node;
   13dae:	bf08      	it	eq
   13db0:	6051      	streq	r1, [r2, #4]
   13db2:	e7e0      	b.n	13d76 <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13db4:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   13db6:	4619      	mov	r1, r3
   13db8:	f026 0303 	bic.w	r3, r6, #3
   13dbc:	e7ce      	b.n	13d5c <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13dbe:	69c1      	ldr	r1, [r0, #28]
   13dc0:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   13dc2:	f100 020c 	add.w	r2, r0, #12
   13dc6:	d0da      	beq.n	13d7e <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13dc8:	4b08      	ldr	r3, [pc, #32]	; (13dec <k_delayed_work_cancel+0xc4>)
   13dca:	699b      	ldr	r3, [r3, #24]
   13dcc:	429a      	cmp	r2, r3
   13dce:	bf1f      	itttt	ne
   13dd0:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13dd2:	6913      	ldrne	r3, [r2, #16]
   13dd4:	185b      	addne	r3, r3, r1
   13dd6:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   13dd8:	6903      	ldr	r3, [r0, #16]
   13dda:	68c2      	ldr	r2, [r0, #12]
   13ddc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13dde:	68c2      	ldr	r2, [r0, #12]
   13de0:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   13de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13de6:	61c3      	str	r3, [r0, #28]
   13de8:	e7c9      	b.n	13d7e <k_delayed_work_cancel+0x56>
   13dea:	bf00      	nop
   13dec:	20001948 	.word	0x20001948

00013df0 <k_delayed_work_submit_to_queue>:
{
   13df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13df2:	4607      	mov	r7, r0
   13df4:	460c      	mov	r4, r1
   13df6:	4615      	mov	r5, r2
	__asm__ volatile(
   13df8:	f04f 0320 	mov.w	r3, #32
   13dfc:	f3ef 8611 	mrs	r6, BASEPRI
   13e00:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   13e04:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   13e06:	b123      	cbz	r3, 13e12 <k_delayed_work_submit_to_queue+0x22>
   13e08:	4283      	cmp	r3, r0
   13e0a:	d00b      	beq.n	13e24 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   13e0c:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   13e10:	e00d      	b.n	13e2e <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   13e12:	b138      	cbz	r0, 13e24 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   13e14:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   13e16:	b96d      	cbnz	r5, 13e34 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   13e18:	4621      	mov	r1, r4
   13e1a:	4638      	mov	r0, r7
   13e1c:	f7ff ff1e 	bl	13c5c <k_work_submit_to_queue>
	err = 0;
   13e20:	2000      	movs	r0, #0
   13e22:	e004      	b.n	13e2e <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   13e24:	4620      	mov	r0, r4
   13e26:	f7ff ff7f 	bl	13d28 <k_delayed_work_cancel>
		if (err < 0) {
   13e2a:	2800      	cmp	r0, #0
   13e2c:	daf2      	bge.n	13e14 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13e2e:	f386 8811 	msr	BASEPRI, r6
}
   13e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   13e34:	220a      	movs	r2, #10
   13e36:	3509      	adds	r5, #9
   13e38:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   13e3c:	4a16      	ldr	r2, [pc, #88]	; (13e98 <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   13e3e:	2300      	movs	r3, #0
   13e40:	4611      	mov	r1, r2
   13e42:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13e44:	61a3      	str	r3, [r4, #24]
   13e46:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   13e4a:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13e4c:	428b      	cmp	r3, r1
   13e4e:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13e52:	61e5      	str	r5, [r4, #28]
   13e54:	d106      	bne.n	13e64 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   13e56:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   13e58:	6993      	ldr	r3, [r2, #24]
   13e5a:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   13e5c:	6993      	ldr	r3, [r2, #24]
   13e5e:	601f      	str	r7, [r3, #0]
	list->tail = node;
   13e60:	6197      	str	r7, [r2, #24]
   13e62:	e7dd      	b.n	13e20 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13e64:	2b00      	cmp	r3, #0
   13e66:	d0f6      	beq.n	13e56 <k_delayed_work_submit_to_queue+0x66>
   13e68:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   13e6c:	69e0      	ldr	r0, [r4, #28]
   13e6e:	691d      	ldr	r5, [r3, #16]
   13e70:	42a8      	cmp	r0, r5
   13e72:	dc08      	bgt.n	13e86 <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   13e74:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   13e76:	1a28      	subs	r0, r5, r0
   13e78:	6118      	str	r0, [r3, #16]
   13e7a:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   13e7c:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   13e7e:	685a      	ldr	r2, [r3, #4]
   13e80:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   13e82:	605f      	str	r7, [r3, #4]
   13e84:	e7cc      	b.n	13e20 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   13e86:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   13e88:	4573      	cmp	r3, lr
   13e8a:	61e0      	str	r0, [r4, #28]
   13e8c:	d0e3      	beq.n	13e56 <k_delayed_work_submit_to_queue+0x66>
   13e8e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13e90:	2b00      	cmp	r3, #0
   13e92:	d1eb      	bne.n	13e6c <k_delayed_work_submit_to_queue+0x7c>
   13e94:	e7df      	b.n	13e56 <k_delayed_work_submit_to_queue+0x66>
   13e96:	bf00      	nop
   13e98:	20001948 	.word	0x20001948

00013e9c <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   13e9c:	2314      	movs	r3, #20
   13e9e:	b530      	push	{r4, r5, lr}
   13ea0:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   13ea4:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   13ea6:	2900      	cmp	r1, #0
   13ea8:	da00      	bge.n	13eac <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   13eaa:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   13eac:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   13eae:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   13eb0:	f003 030f 	and.w	r3, r3, #15
   13eb4:	2b02      	cmp	r3, #2
   13eb6:	d003      	beq.n	13ec0 <clear_event_registrations+0x24>
   13eb8:	2b04      	cmp	r3, #4
   13eba:	d001      	beq.n	13ec0 <clear_event_registrations+0x24>
   13ebc:	2b01      	cmp	r3, #1
   13ebe:	d104      	bne.n	13eca <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   13ec0:	6843      	ldr	r3, [r0, #4]
   13ec2:	6805      	ldr	r5, [r0, #0]
   13ec4:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   13ec6:	6805      	ldr	r5, [r0, #0]
   13ec8:	606b      	str	r3, [r5, #4]
   13eca:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   13ece:	f04f 0320 	mov.w	r3, #32
   13ed2:	f3ef 8211 	mrs	r2, BASEPRI
   13ed6:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   13eda:	3901      	subs	r1, #1
   13edc:	3814      	subs	r0, #20
   13ede:	e7e2      	b.n	13ea6 <clear_event_registrations+0xa>

00013ee0 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   13ee0:	6883      	ldr	r3, [r0, #8]
{
   13ee2:	b570      	push	{r4, r5, r6, lr}
   13ee4:	4605      	mov	r5, r0
   13ee6:	460e      	mov	r6, r1
	if (!event->poller) {
   13ee8:	b1d3      	cbz	r3, 13f20 <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   13eea:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   13eec:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   13eee:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   13ef0:	7a63      	ldrb	r3, [r4, #9]
   13ef2:	079a      	lsls	r2, r3, #30
   13ef4:	d514      	bpl.n	13f20 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   13ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13ef8:	3302      	adds	r3, #2
   13efa:	d01a      	beq.n	13f32 <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   13efc:	4620      	mov	r0, r4
   13efe:	f7ff fa6e 	bl	133de <_unpend_thread>
	_set_thread_return_value(thread,
   13f02:	2e00      	cmp	r6, #0
   13f04:	bf0c      	ite	eq
   13f06:	f06f 0303 	mvneq.w	r3, #3
   13f0a:	2300      	movne	r3, #0
   13f0c:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   13f0e:	7a63      	ldrb	r3, [r4, #9]
   13f10:	06db      	lsls	r3, r3, #27
   13f12:	d105      	bne.n	13f20 <signal_poll_event+0x40>
   13f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13f16:	3301      	adds	r3, #1
   13f18:	d102      	bne.n	13f20 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   13f1a:	4620      	mov	r0, r4
   13f1c:	f7ff fac2 	bl	134a4 <_add_thread_to_ready_q>
	event->state |= state;
   13f20:	7b6b      	ldrb	r3, [r5, #13]
   13f22:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   13f26:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   13f2a:	2000      	movs	r0, #0
	event->state |= state;
   13f2c:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   13f2e:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   13f30:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   13f32:	f06f 000a 	mvn.w	r0, #10
}
   13f36:	bd70      	pop	{r4, r5, r6, pc}

00013f38 <add_event>:
{
   13f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   13f3a:	6803      	ldr	r3, [r0, #0]
   13f3c:	4298      	cmp	r0, r3
   13f3e:	4604      	mov	r4, r0
   13f40:	460e      	mov	r6, r1
   13f42:	4617      	mov	r7, r2
   13f44:	d106      	bne.n	13f54 <add_event+0x1c>
	node->next = list;
   13f46:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   13f48:	6863      	ldr	r3, [r4, #4]
   13f4a:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   13f4c:	6863      	ldr	r3, [r4, #4]
   13f4e:	601e      	str	r6, [r3, #0]
	list->tail = node;
   13f50:	6066      	str	r6, [r4, #4]
   13f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   13f54:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   13f56:	2b00      	cmp	r3, #0
   13f58:	d0f5      	beq.n	13f46 <add_event+0xe>
   13f5a:	689b      	ldr	r3, [r3, #8]
   13f5c:	6811      	ldr	r1, [r2, #0]
   13f5e:	6818      	ldr	r0, [r3, #0]
   13f60:	f7ff f9ee 	bl	13340 <_is_t1_higher_prio_than_t2>
   13f64:	2800      	cmp	r0, #0
   13f66:	d1ee      	bne.n	13f46 <add_event+0xe>
	return list->head == list;
   13f68:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13f6a:	42ac      	cmp	r4, r5
   13f6c:	d0eb      	beq.n	13f46 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   13f6e:	2d00      	cmp	r5, #0
   13f70:	d0e9      	beq.n	13f46 <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   13f72:	68ab      	ldr	r3, [r5, #8]
   13f74:	6838      	ldr	r0, [r7, #0]
   13f76:	6819      	ldr	r1, [r3, #0]
   13f78:	f7ff f9e2 	bl	13340 <_is_t1_higher_prio_than_t2>
   13f7c:	b130      	cbz	r0, 13f8c <add_event+0x54>
		node->prev = insert_point->prev;
   13f7e:	686b      	ldr	r3, [r5, #4]
   13f80:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   13f82:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   13f84:	686b      	ldr	r3, [r5, #4]
   13f86:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   13f88:	606e      	str	r6, [r5, #4]
   13f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   13f8c:	6863      	ldr	r3, [r4, #4]
   13f8e:	429d      	cmp	r5, r3
   13f90:	d0d9      	beq.n	13f46 <add_event+0xe>
   13f92:	682d      	ldr	r5, [r5, #0]
   13f94:	e7eb      	b.n	13f6e <add_event+0x36>

00013f96 <k_poll_event_init>:
{
   13f96:	b530      	push	{r4, r5, lr}
	event->type = type;
   13f98:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   13f9a:	6103      	str	r3, [r0, #16]
	event->type = type;
   13f9c:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   13fa0:	7b81      	ldrb	r1, [r0, #14]
   13fa2:	f362 0100 	bfi	r1, r2, #0, #1
   13fa6:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   13fa8:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   13faa:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   13fac:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   13fb0:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   13fb4:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   13fb6:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   13fb8:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   13fba:	bd30      	pop	{r4, r5, pc}

00013fbc <_impl_k_poll>:
{
   13fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   13fc0:	4b3f      	ldr	r3, [pc, #252]	; (140c0 <_impl_k_poll+0x104>)
{
   13fc2:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   13fc4:	689b      	ldr	r3, [r3, #8]
   13fc6:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   13fc8:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   13fca:	2301      	movs	r3, #1
{
   13fcc:	4607      	mov	r7, r0
   13fce:	468a      	mov	sl, r1
   13fd0:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   13fd2:	9301      	str	r3, [sp, #4]
   13fd4:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   13fd6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   13fda:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   13fdc:	4556      	cmp	r6, sl
   13fde:	db10      	blt.n	14002 <_impl_k_poll+0x46>
   13fe0:	f04f 0320 	mov.w	r3, #32
   13fe4:	f3ef 8611 	mrs	r6, BASEPRI
   13fe8:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   13fec:	9c01      	ldr	r4, [sp, #4]
   13fee:	2c00      	cmp	r4, #0
   13ff0:	d13f      	bne.n	14072 <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   13ff2:	4632      	mov	r2, r6
   13ff4:	4629      	mov	r1, r5
   13ff6:	4638      	mov	r0, r7
   13ff8:	f7ff ff50 	bl	13e9c <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13ffc:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   14000:	e040      	b.n	14084 <_impl_k_poll+0xc8>
	__asm__ volatile(
   14002:	f04f 0320 	mov.w	r3, #32
   14006:	f3ef 8b11 	mrs	fp, BASEPRI
   1400a:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   1400e:	7b62      	ldrb	r2, [r4, #13]
   14010:	f002 030f 	and.w	r3, r2, #15
   14014:	2b02      	cmp	r3, #2
   14016:	d003      	beq.n	14020 <_impl_k_poll+0x64>
   14018:	2b04      	cmp	r3, #4
   1401a:	d004      	beq.n	14026 <_impl_k_poll+0x6a>
   1401c:	2b01      	cmp	r3, #1
   1401e:	d106      	bne.n	1402e <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   14020:	6921      	ldr	r1, [r4, #16]
   14022:	6889      	ldr	r1, [r1, #8]
   14024:	e001      	b.n	1402a <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   14026:	6921      	ldr	r1, [r4, #16]
   14028:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   1402a:	2900      	cmp	r1, #0
   1402c:	d13d      	bne.n	140aa <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   1402e:	f1b8 0f00 	cmp.w	r8, #0
   14032:	d014      	beq.n	1405e <_impl_k_poll+0xa2>
   14034:	9a01      	ldr	r2, [sp, #4]
   14036:	b192      	cbz	r2, 1405e <_impl_k_poll+0xa2>
	switch (event->type) {
   14038:	2b02      	cmp	r3, #2
   1403a:	d007      	beq.n	1404c <_impl_k_poll+0x90>
   1403c:	2b04      	cmp	r3, #4
   1403e:	d013      	beq.n	14068 <_impl_k_poll+0xac>
   14040:	2b01      	cmp	r3, #1
   14042:	d109      	bne.n	14058 <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   14044:	466a      	mov	r2, sp
   14046:	4621      	mov	r1, r4
   14048:	6920      	ldr	r0, [r4, #16]
   1404a:	e003      	b.n	14054 <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   1404c:	6920      	ldr	r0, [r4, #16]
   1404e:	466a      	mov	r2, sp
   14050:	4621      	mov	r1, r4
   14052:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   14054:	f7ff ff70 	bl	13f38 <add_event>
	event->poller = poller;
   14058:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   1405c:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1405e:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   14062:	3601      	adds	r6, #1
   14064:	3414      	adds	r4, #20
   14066:	e7b9      	b.n	13fdc <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   14068:	6920      	ldr	r0, [r4, #16]
   1406a:	466a      	mov	r2, sp
   1406c:	4621      	mov	r1, r4
   1406e:	3008      	adds	r0, #8
   14070:	e7f0      	b.n	14054 <_impl_k_poll+0x98>
	poller.is_polling = 0;
   14072:	2300      	movs	r3, #0
   14074:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   14076:	f1b8 0f00 	cmp.w	r8, #0
   1407a:	d107      	bne.n	1408c <_impl_k_poll+0xd0>
   1407c:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   14080:	f06f 040a 	mvn.w	r4, #10
}
   14084:	4620      	mov	r0, r4
   14086:	b005      	add	sp, #20
   14088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   1408c:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   1408e:	4642      	mov	r2, r8
   14090:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   14092:	9102      	str	r1, [sp, #8]
   14094:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   14096:	f7ff fab3 	bl	13600 <_pend_current_thread>
   1409a:	4604      	mov	r4, r0
	__asm__ volatile(
   1409c:	f04f 0320 	mov.w	r3, #32
   140a0:	f3ef 8611 	mrs	r6, BASEPRI
   140a4:	f383 8811 	msr	BASEPRI, r3
   140a8:	e7a3      	b.n	13ff2 <_impl_k_poll+0x36>
	event->state |= state;
   140aa:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   140ae:	f363 1207 	bfi	r2, r3, #4, #4
   140b2:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   140b4:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   140b8:	f8cd 9004 	str.w	r9, [sp, #4]
   140bc:	e7cf      	b.n	1405e <_impl_k_poll+0xa2>
   140be:	bf00      	nop
   140c0:	20001948 	.word	0x20001948

000140c4 <_handle_obj_poll_events>:
	return list->head == list;
   140c4:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   140c6:	4298      	cmp	r0, r3
   140c8:	d007      	beq.n	140da <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   140ca:	e893 0005 	ldmia.w	r3, {r0, r2}
   140ce:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   140d0:	6818      	ldr	r0, [r3, #0]
   140d2:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   140d4:	4618      	mov	r0, r3
   140d6:	f7ff bf03 	b.w	13ee0 <signal_poll_event>
   140da:	4770      	bx	lr

000140dc <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   140dc:	b538      	push	{r3, r4, r5, lr}
   140de:	f04f 0320 	mov.w	r3, #32
   140e2:	f3ef 8511 	mrs	r5, BASEPRI
   140e6:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   140ea:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   140ec:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   140ee:	4298      	cmp	r0, r3
	signal->signaled = 1;
   140f0:	f04f 0101 	mov.w	r1, #1
   140f4:	6081      	str	r1, [r0, #8]
   140f6:	d00d      	beq.n	14114 <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   140f8:	e893 0005 	ldmia.w	r3, {r0, r2}
   140fc:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   140fe:	6818      	ldr	r0, [r3, #0]
   14100:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   14102:	4618      	mov	r0, r3
   14104:	f7ff feec 	bl	13ee0 <signal_poll_event>
   14108:	4604      	mov	r4, r0

	_reschedule(key);
   1410a:	4628      	mov	r0, r5
   1410c:	f7ff f972 	bl	133f4 <_reschedule>
	return rc;
}
   14110:	4620      	mov	r0, r4
   14112:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14114:	f385 8811 	msr	BASEPRI, r5
		return 0;
   14118:	2400      	movs	r4, #0
   1411a:	e7f9      	b.n	14110 <_impl_k_poll_signal+0x34>

0001411c <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   1411c:	4770      	bx	lr
