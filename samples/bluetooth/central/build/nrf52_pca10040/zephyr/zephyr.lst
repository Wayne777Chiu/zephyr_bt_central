
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002ce8 	.word	0x20002ce8

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001add 	.word	0x00001add
       8:	00001b31 	.word	0x00001b31
       c:	00001975 	.word	0x00001975
      10:	00001975 	.word	0x00001975
      14:	00001975 	.word	0x00001975
      18:	00001975 	.word	0x00001975
      1c:	00001975 	.word	0x00001975
      20:	00001975 	.word	0x00001975
      24:	00001975 	.word	0x00001975
      28:	00001975 	.word	0x00001975
      2c:	0000157d 	.word	0x0000157d
      30:	00001975 	.word	0x00001975
      34:	00001975 	.word	0x00001975
      38:	00001539 	.word	0x00001539
      3c:	00001975 	.word	0x00001975

00000040 <_irq_vector_table>:
      40:	00001aa1 00011023 00001aa1 00001aa1     ....#...........
      50:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      60:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      70:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      80:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      90:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      a0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      b0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      c0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      d0:	00001aa1 00001aa1 00001aa1              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001275 00000000 000018ed     ....u...........
      ec:	00000000 000018ed 00000000 000018ed     ................
      fc:	00000000 000018ed 00000000 000018ed     ................
     10c:	00000000 00013051 00000000 000018ed     ....Q0..........
     11c:	00000000 000018ed 00000000 000018ed     ................
     12c:	00000000 000018ed 00000000 00010fe9     ................
     13c:	00000000 000018ed 20003eb8 00013355     .........>. U3..
     14c:	00000000 000018ed 00000000 000018ed     ................
     15c:	00000000 000018ed 00000000 0000139d     ................
     16c:	00000000 000018ed 00000000 000018ed     ................
     17c:	00000000 000018ed 00000000 000018ed     ................
     18c:	00000000 000018ed 00000000 000018ed     ................
     19c:	00000000 0001101d 00000000 000018ed     ................
     1ac:	00000000 000018ed 00000000 000018ed     ................
     1bc:	00000000 000018ed 00000000 000018ed     ................
     1cc:	00000000 000018ed 00000000 000018ed     ................
     1dc:	00000000 000018ed 00000000 000018ed     ................
     1ec:	00000000 000018ed 00000000 000018ed     ................
     1fc:	00000000 000018ed 00000000 000018ed     ................
     20c:	00000000 000018ed                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb14 	bl	1b94 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	000148d9 	.word	0x000148d9
     5b0:	00014902 	.word	0x00014902
     5b4:	000148e0 	.word	0x000148e0
     5b8:	000148e7 	.word	0x000148e7
     5bc:	000148f1 	.word	0x000148f1
     5c0:	000148fb 	.word	0x000148fb

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f003 ffba 	bl	4544 <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f004 f853 	bl	46a4 <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	00014925 	.word	0x00014925
     604:	20000000 	.word	0x20000000
     608:	00014943 	.word	0x00014943

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f003 ff93 	bl	4544 <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f003 fdd0 	bl	41d4 <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 f9ca 	bl	39e0 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	0001496e 	.word	0x0001496e
     664:	0001487c 	.word	0x0001487c
     668:	00000671 	.word	0x00000671
     66c:	0001498c 	.word	0x0001498c

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 f9f5 	bl	3a84 <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f003 ff4d 	bl	4548 <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	00014952 	.word	0x00014952
     6bc:	00014882 	.word	0x00014882

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 f91c 	bl	3900 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f003 fa72 	bl	3bc8 <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 f974 	bl	39e0 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	000149af 	.word	0x000149af
     70c:	000149cf 	.word	0x000149cf
     710:	20003a28 	.word	0x20003a28
     714:	0001488a 	.word	0x0001488a
     718:	00000671 	.word	0x00000671
     71c:	0001498c 	.word	0x0001498c
     720:	000149e6 	.word	0x000149e6

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003a5c 	.word	0x20003a5c
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f013 fa9c 	bl	13de0 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8d4 	bl	1a54 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003a60 	.word	0x20003a60

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003a60 	.word	0x20003a60

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr
	...

00000fe4 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe4:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fe6:	4c11      	ldr	r4, [pc, #68]	; (102c <sys_rand32_get+0x48>)
     fe8:	f3bf 8f5b 	dmb	ish
     fec:	6820      	ldr	r0, [r4, #0]
     fee:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff2:	b960      	cbnz	r0, 100e <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff4:	480e      	ldr	r0, [pc, #56]	; (1030 <sys_rand32_get+0x4c>)
     ff6:	f012 fa1b 	bl	13430 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffa:	f3bf 8f5b 	dmb	ish
     ffe:	e854 3f00 	ldrex	r3, [r4]
    1002:	e844 0200 	strex	r2, r0, [r4]
    1006:	2a00      	cmp	r2, #0
    1008:	d1f9      	bne.n	ffe <sys_rand32_get+0x1a>
    100a:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    100e:	6843      	ldr	r3, [r0, #4]
    1010:	2204      	movs	r2, #4
    1012:	681b      	ldr	r3, [r3, #0]
    1014:	eb0d 0102 	add.w	r1, sp, r2
    1018:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101a:	2800      	cmp	r0, #0
    101c:	da02      	bge.n	1024 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    101e:	f000 fa37 	bl	1490 <_timer_cycle_get_32>
    1022:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1024:	9801      	ldr	r0, [sp, #4]
    1026:	b002      	add	sp, #8
    1028:	bd10      	pop	{r4, pc}
    102a:	bf00      	nop
    102c:	20000004 	.word	0x20000004
    1030:	00014a14 	.word	0x00014a14

00001034 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1034:	280a      	cmp	r0, #10
{
    1036:	b538      	push	{r3, r4, r5, lr}
    1038:	4604      	mov	r4, r0
    103a:	4d07      	ldr	r5, [pc, #28]	; (1058 <console_out+0x24>)
	if ('\n' == c) {
    103c:	d104      	bne.n	1048 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    103e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1040:	6843      	ldr	r3, [r0, #4]
    1042:	210d      	movs	r1, #13
    1044:	685b      	ldr	r3, [r3, #4]
    1046:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1048:	6828      	ldr	r0, [r5, #0]
    104a:	6843      	ldr	r3, [r0, #4]
    104c:	b2e1      	uxtb	r1, r4
    104e:	685b      	ldr	r3, [r3, #4]
    1050:	4798      	blx	r3

	return c;
}
    1052:	4620      	mov	r0, r4
    1054:	bd38      	pop	{r3, r4, r5, pc}
    1056:	bf00      	nop
    1058:	20000008 	.word	0x20000008

0000105c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    105c:	4801      	ldr	r0, [pc, #4]	; (1064 <uart_console_hook_install+0x8>)
    105e:	f7ff be4f 	b.w	d00 <__printk_hook_install>
    1062:	bf00      	nop
    1064:	00001035 	.word	0x00001035

00001068 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1068:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    106a:	4804      	ldr	r0, [pc, #16]	; (107c <uart_console_init+0x14>)
    106c:	f012 f9e0 	bl	13430 <device_get_binding>
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <uart_console_init+0x18>)
    1072:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1074:	f7ff fff2 	bl	105c <uart_console_hook_install>

	return 0;
}
    1078:	2000      	movs	r0, #0
    107a:	bd08      	pop	{r3, pc}
    107c:	00014a1e 	.word	0x00014a1e
    1080:	20000008 	.word	0x20000008

00001084 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1084:	b510      	push	{r4, lr}
	__asm__ volatile(
    1086:	f04f 0320 	mov.w	r3, #32
    108a:	f3ef 8211 	mrs	r2, BASEPRI
    108e:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1092:	4c11      	ldr	r4, [pc, #68]	; (10d8 <_m16src_stop+0x54>)
    1094:	7823      	ldrb	r3, [r4, #0]
    1096:	b923      	cbnz	r3, 10a2 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1098:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    109c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10a0:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10a2:	3b01      	subs	r3, #1
    10a4:	b2db      	uxtb	r3, r3
    10a6:	7023      	strb	r3, [r4, #0]
    10a8:	b123      	cbz	r3, 10b4 <_m16src_stop+0x30>
    10aa:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10ae:	f06f 000f 	mvn.w	r0, #15
    10b2:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10b4:	4b09      	ldr	r3, [pc, #36]	; (10dc <_m16src_stop+0x58>)
    10b6:	7818      	ldrb	r0, [r3, #0]
    10b8:	2101      	movs	r1, #1
    10ba:	b128      	cbz	r0, 10c8 <_m16src_stop+0x44>
		m16src_ref++;
    10bc:	7021      	strb	r1, [r4, #0]
    10be:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10c2:	f06f 000a 	mvn.w	r0, #10
    10c6:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10c8:	7019      	strb	r1, [r3, #0]
    10ca:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10d2:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10d4:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10d6:	bd10      	pop	{r4, pc}
    10d8:	2000000e 	.word	0x2000000e
    10dc:	2000000d 	.word	0x2000000d

000010e0 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10e0:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10e2:	2200      	movs	r2, #0
    10e4:	4610      	mov	r0, r2
    10e6:	2101      	movs	r1, #1
    10e8:	f000 fbe8 	bl	18bc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10ec:	2000      	movs	r0, #0
    10ee:	f000 fbb3 	bl	1858 <_arch_irq_enable>

	return 0;
}
    10f2:	2000      	movs	r0, #0
    10f4:	bd08      	pop	{r3, pc}
	...

000010f8 <_m16src_start>:
{
    10f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10fa:	f04f 0220 	mov.w	r2, #32
    10fe:	f3ef 8311 	mrs	r3, BASEPRI
    1102:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    1106:	4a25      	ldr	r2, [pc, #148]	; (119c <_m16src_start+0xa4>)
    1108:	7810      	ldrb	r0, [r2, #0]
    110a:	1c44      	adds	r4, r0, #1
    110c:	7014      	strb	r4, [r2, #0]
    110e:	b160      	cbz	r0, 112a <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1110:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1118:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    111c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1120:	bf14      	ite	ne
    1122:	2000      	movne	r0, #0
    1124:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    112a:	4d1d      	ldr	r5, [pc, #116]	; (11a0 <_m16src_start+0xa8>)
    112c:	782f      	ldrb	r7, [r5, #0]
    112e:	b12f      	cbz	r7, 113c <_m16src_start+0x44>
		m16src_ref--;
    1130:	7010      	strb	r0, [r2, #0]
    1132:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    1136:	f06f 000a 	mvn.w	r0, #10
    113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    113c:	2601      	movs	r6, #1
    113e:	702e      	strb	r6, [r5, #0]
    1140:	f383 8811 	msr	BASEPRI, r3
    1144:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1148:	b319      	cbz	r1, 1192 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    114a:	4638      	mov	r0, r7
    114c:	f000 fb94 	bl	1878 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1150:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1154:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1158:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    115c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    115e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1162:	b192      	cbz	r2, 118a <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1164:	2200      	movs	r2, #0
    1166:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116a:	4a0e      	ldr	r2, [pc, #56]	; (11a4 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    116c:	f013 0f01 	tst.w	r3, #1
    1170:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1174:	bf08      	it	eq
    1176:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    117a:	2000      	movs	r0, #0
    117c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1180:	f000 fb6a 	bl	1858 <_arch_irq_enable>
	m16src_grd = 0;
    1184:	2300      	movs	r3, #0
    1186:	702b      	strb	r3, [r5, #0]
    1188:	e7c4      	b.n	1114 <_m16src_start+0x1c>
			__WFE();
    118a:	bf20      	wfe
			__SEV();
    118c:	bf40      	sev
			__WFE();
    118e:	bf20      	wfe
    1190:	e7e5      	b.n	115e <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1192:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1196:	6026      	str	r6, [r4, #0]
    1198:	e7f4      	b.n	1184 <_m16src_start+0x8c>
    119a:	bf00      	nop
    119c:	2000000e 	.word	0x2000000e
    11a0:	2000000d 	.word	0x2000000d
    11a4:	e000e100 	.word	0xe000e100

000011a8 <_k32src_start>:
{
    11a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11aa:	4606      	mov	r6, r0
    11ac:	460c      	mov	r4, r1
	__asm__ volatile(
    11ae:	f04f 0220 	mov.w	r2, #32
    11b2:	f3ef 8311 	mrs	r3, BASEPRI
    11b6:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11ba:	4a2c      	ldr	r2, [pc, #176]	; (126c <_k32src_start+0xc4>)
    11bc:	7815      	ldrb	r5, [r2, #0]
    11be:	b165      	cbz	r5, 11da <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11c0:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11c8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11d0:	bf0c      	ite	eq
    11d2:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11d6:	2000      	movne	r0, #0
    11d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11da:	2701      	movs	r7, #1
    11dc:	7017      	strb	r7, [r2, #0]
    11de:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11e2:	4628      	mov	r0, r5
    11e4:	f000 fb48 	bl	1878 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11ec:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11ee:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11f2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11f6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11fa:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    11fe:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1200:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1204:	b371      	cbz	r1, 1264 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    1206:	0792      	lsls	r2, r2, #30
    1208:	4f19      	ldr	r7, [pc, #100]	; (1270 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    120a:	bf58      	it	pl
    120c:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    120e:	f04f 0100 	mov.w	r1, #0
    1212:	f04f 0501 	mov.w	r5, #1
    1216:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    121a:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    121e:	bf58      	it	pl
    1220:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1224:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1228:	f000 fb16 	bl	1858 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    122c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1230:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1232:	2218      	movs	r2, #24
    1234:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1238:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    123c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1240:	f014 0103 	ands.w	r1, r4, #3
    1244:	d1be      	bne.n	11c4 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1246:	2010      	movs	r0, #16
    1248:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    124c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1250:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1252:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1256:	f7ff ff4f 	bl	10f8 <_m16src_start>
		if (!err) {
    125a:	2800      	cmp	r0, #0
    125c:	d1b2      	bne.n	11c4 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    125e:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1262:	e7af      	b.n	11c4 <_k32src_start+0x1c>
		__WFE();
    1264:	bf20      	wfe
		__SEV();
    1266:	bf40      	sev
		__WFE();
    1268:	bf20      	wfe
    126a:	e7c9      	b.n	1200 <_k32src_start+0x58>
    126c:	2000000c 	.word	0x2000000c
    1270:	e000e100 	.word	0xe000e100

00001274 <_power_clock_isr>:
{
    1274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    127a:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    127c:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1280:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1284:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1288:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    128c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1290:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1294:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1298:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    129c:	f1be 0f00 	cmp.w	lr, #0
    12a0:	d003      	beq.n	12aa <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12a2:	f04f 0e00 	mov.w	lr, #0
    12a6:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12aa:	b127      	cbz	r7, 12b6 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12b0:	2700      	movs	r7, #0
    12b2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12b6:	b13a      	cbz	r2, 12c8 <_power_clock_isr+0x54>
    12b8:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12ba:	bf41      	itttt	mi
    12bc:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12c0:	2201      	movmi	r2, #1
    12c2:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12c6:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12c8:	b120      	cbz	r0, 12d4 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12ce:	2200      	movs	r2, #0
    12d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12d4:	b149      	cbz	r1, 12ea <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12da:	2100      	movs	r1, #0
    12dc:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12e0:	4628      	mov	r0, r5
    12e2:	f7ff fecf 	bl	1084 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12e6:	2301      	movs	r3, #1
    12e8:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12ea:	b176      	cbz	r6, 130a <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f0:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f2:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12f8:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fa:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    12fe:	f7ff fefb 	bl	10f8 <_m16src_start>
		if (!err) {
    1302:	b910      	cbnz	r0, 130a <_power_clock_isr+0x96>
    1304:	4b01      	ldr	r3, [pc, #4]	; (130c <_power_clock_isr+0x98>)
    1306:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130c:	e000e100 	.word	0xe000e100

00001310 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1310:	4b08      	ldr	r3, [pc, #32]	; (1334 <rtc_compare_set+0x24>)
    1312:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1316:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    131a:	1ac0      	subs	r0, r0, r3
    131c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1320:	4b05      	ldr	r3, [pc, #20]	; (1338 <rtc_compare_set+0x28>)
    1322:	3802      	subs	r0, #2
    1324:	4298      	cmp	r0, r3
    1326:	bf82      	ittt	hi
    1328:	4b04      	ldrhi	r3, [pc, #16]	; (133c <rtc_compare_set+0x2c>)
    132a:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    132e:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1332:	4770      	bx	lr
    1334:	40011000 	.word	0x40011000
    1338:	007ffffd 	.word	0x007ffffd
    133c:	e000e100 	.word	0xe000e100

00001340 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1340:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1342:	4b11      	ldr	r3, [pc, #68]	; (1388 <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1344:	4c11      	ldr	r4, [pc, #68]	; (138c <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    1346:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134a:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    134c:	4d10      	ldr	r5, [pc, #64]	; (1390 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134e:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1350:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1352:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1356:	4298      	cmp	r0, r3
    1358:	d30f      	bcc.n	137a <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    135a:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    135e:	490d      	ldr	r1, [pc, #52]	; (1394 <rtc_announce_set_next+0x54>)
    1360:	6809      	ldr	r1, [r1, #0]
    1362:	4288      	cmp	r0, r1
    1364:	bf28      	it	cs
    1366:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1368:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    136c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1370:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1372:	4b09      	ldr	r3, [pc, #36]	; (1398 <rtc_announce_set_next+0x58>)
    1374:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1376:	f012 fdab 	bl	13ed0 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    137a:	6820      	ldr	r0, [r4, #0]
    137c:	682b      	ldr	r3, [r5, #0]
    137e:	4418      	add	r0, r3
}
    1380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1384:	f7ff bfc4 	b.w	1310 <rtc_compare_set>
    1388:	40011000 	.word	0x40011000
    138c:	20000014 	.word	0x20000014
    1390:	20003e78 	.word	0x20003e78
    1394:	20000010 	.word	0x20000010
    1398:	20003e74 	.word	0x20003e74

0000139c <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <rtc1_nrf5_isr+0xc>)
    139e:	2200      	movs	r2, #0
    13a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13a4:	f7ff bfcc 	b.w	1340 <rtc_announce_set_next>
    13a8:	40011000 	.word	0x40011000

000013ac <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13ac:	1e03      	subs	r3, r0, #0
    13ae:	4a0a      	ldr	r2, [pc, #40]	; (13d8 <_timer_idle_enter+0x2c>)
    13b0:	480a      	ldr	r0, [pc, #40]	; (13dc <_timer_idle_enter+0x30>)
    13b2:	db04      	blt.n	13be <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13b4:	6811      	ldr	r1, [r2, #0]
    13b6:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13ba:	428b      	cmp	r3, r1
    13bc:	dd02      	ble.n	13c4 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13be:	6813      	ldr	r3, [r2, #0]
    13c0:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13c4:	6810      	ldr	r0, [r2, #0]
    13c6:	4a06      	ldr	r2, [pc, #24]	; (13e0 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13c8:	4906      	ldr	r1, [pc, #24]	; (13e4 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ca:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13cc:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ce:	fb00 2003 	mla	r0, r0, r3, r2
    13d2:	f7ff bf9d 	b.w	1310 <rtc_compare_set>
    13d6:	bf00      	nop
    13d8:	20003e78 	.word	0x20003e78
    13dc:	007fffff 	.word	0x007fffff
    13e0:	20000014 	.word	0x20000014
    13e4:	20000010 	.word	0x20000010

000013e8 <_timer_idle_exit>:
{
    13e8:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13ea:	4b07      	ldr	r3, [pc, #28]	; (1408 <_timer_idle_exit+0x20>)
    13ec:	2200      	movs	r2, #0
    13ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f2:	4b06      	ldr	r3, [pc, #24]	; (140c <_timer_idle_exit+0x24>)
    13f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    13fc:	f7ff ffa0 	bl	1340 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1400:	4b03      	ldr	r3, [pc, #12]	; (1410 <_timer_idle_exit+0x28>)
    1402:	2201      	movs	r2, #1
    1404:	601a      	str	r2, [r3, #0]
    1406:	bd08      	pop	{r3, pc}
    1408:	40011000 	.word	0x40011000
    140c:	e000e100 	.word	0xe000e100
    1410:	20000010 	.word	0x20000010

00001414 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1414:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1416:	4818      	ldr	r0, [pc, #96]	; (1478 <_sys_clock_driver_init+0x64>)
    1418:	f012 f80a 	bl	13430 <device_get_binding>
	if (!clock) {
    141c:	b348      	cbz	r0, 1472 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    141e:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1420:	4d16      	ldr	r5, [pc, #88]	; (147c <_sys_clock_driver_init+0x68>)
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	2101      	movs	r1, #1
    1426:	4798      	blx	r3
	rtc_past = 0;
    1428:	4b15      	ldr	r3, [pc, #84]	; (1480 <_sys_clock_driver_init+0x6c>)
    142a:	2400      	movs	r4, #0
    142c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    142e:	4b15      	ldr	r3, [pc, #84]	; (1484 <_sys_clock_driver_init+0x70>)
    1430:	2601      	movs	r6, #1
    1432:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1434:	4b14      	ldr	r3, [pc, #80]	; (1488 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    1436:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1444:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1448:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    144c:	4b0f      	ldr	r3, [pc, #60]	; (148c <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    144e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1456:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    145a:	4631      	mov	r1, r6
    145c:	4622      	mov	r2, r4
    145e:	2011      	movs	r0, #17
    1460:	f000 fa2c 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1464:	2011      	movs	r0, #17
    1466:	f000 f9f7 	bl	1858 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    146a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    146c:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    146e:	602e      	str	r6, [r5, #0]
	return 0;
    1470:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1476:	bd70      	pop	{r4, r5, r6, pc}
    1478:	00014a40 	.word	0x00014a40
    147c:	40011000 	.word	0x40011000
    1480:	20000014 	.word	0x20000014
    1484:	20000010 	.word	0x20000010
    1488:	20003e78 	.word	0x20003e78
    148c:	e000e100 	.word	0xe000e100

00001490 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1490:	4a0a      	ldr	r2, [pc, #40]	; (14bc <_timer_cycle_get_32+0x2c>)
{
    1492:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1494:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1498:	4d09      	ldr	r5, [pc, #36]	; (14c0 <_timer_cycle_get_32+0x30>)
    149a:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    149e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14a2:	42a3      	cmp	r3, r4
    14a4:	d107      	bne.n	14b6 <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14a6:	4a07      	ldr	r2, [pc, #28]	; (14c4 <_timer_cycle_get_32+0x34>)
    14a8:	6812      	ldr	r2, [r2, #0]
    14aa:	4350      	muls	r0, r2
    14ac:	1a1b      	subs	r3, r3, r0
    14ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14b2:	4418      	add	r0, r3
    14b4:	bd30      	pop	{r4, r5, pc}
    14b6:	4623      	mov	r3, r4
    14b8:	e7ef      	b.n	149a <_timer_cycle_get_32+0xa>
    14ba:	bf00      	nop
    14bc:	40011000 	.word	0x40011000
    14c0:	20001988 	.word	0x20001988
    14c4:	20003e78 	.word	0x20003e78

000014c8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14c8:	4807      	ldr	r0, [pc, #28]	; (14e8 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14ca:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14cc:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14ce:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14d0:	d008      	beq.n	14e4 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14d2:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14d4:	f012 fc36 	bl	13d44 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14d8:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14dc:	4903      	ldr	r1, [pc, #12]	; (14ec <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    14de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14e2:	600a      	str	r2, [r1, #0]

000014e4 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14e4:	4770      	bx	lr
    14e6:	0000      	.short	0x0000
    ldr r0, =_kernel
    14e8:	20001950 	.word	0x20001950
    ldr r1, =_SCS_ICSR
    14ec:	e000ed04 	.word	0xe000ed04

000014f0 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f0:	4804      	ldr	r0, [pc, #16]	; (1504 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    14f2:	2300      	movs	r3, #0
    14f4:	2120      	movs	r1, #32
    14f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    14f8:	3301      	adds	r3, #1
    14fa:	2b27      	cmp	r3, #39	; 0x27
    14fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1500:	d1f9      	bne.n	14f6 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1502:	4770      	bx	lr
    1504:	e000e100 	.word	0xe000e100

00001508 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1508:	4a08      	ldr	r2, [pc, #32]	; (152c <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    150a:	4909      	ldr	r1, [pc, #36]	; (1530 <__swap+0x28>)
	_current->arch.basepri = key;
    150c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    150e:	6809      	ldr	r1, [r1, #0]
    1510:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1512:	4908      	ldr	r1, [pc, #32]	; (1534 <__swap+0x2c>)
	_current->arch.basepri = key;
    1514:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1516:	684b      	ldr	r3, [r1, #4]
    1518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    151c:	604b      	str	r3, [r1, #4]
    151e:	2300      	movs	r3, #0
    1520:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1524:	6893      	ldr	r3, [r2, #8]
}
    1526:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1528:	4770      	bx	lr
    152a:	bf00      	nop
    152c:	20001950 	.word	0x20001950
    1530:	00018200 	.word	0x00018200
    1534:	e000ed00 	.word	0xe000ed00

00001538 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1538:	2020      	movs	r0, #32
    msr BASEPRI, r0
    153a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    153e:	490d      	ldr	r1, [pc, #52]	; (1574 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1540:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1542:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1544:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1546:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    154a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    154e:	4f0a      	ldr	r7, [pc, #40]	; (1578 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1550:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1554:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1556:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1558:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    155a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    155c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    155e:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1560:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1564:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1568:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    156c:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    1570:	4770      	bx	lr
    1572:	0000      	.short	0x0000
    ldr r1, =_kernel
    1574:	20001950 	.word	0x20001950
    ldr v4, =_SCS_ICSR
    1578:	e000ed04 	.word	0xe000ed04

0000157c <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    157c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1580:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1582:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1586:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    158a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    158c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1590:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    1594:	2902      	cmp	r1, #2
    beq _oops
    1596:	d0ff      	beq.n	1598 <_oops>

00001598 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    1598:	b500      	push	{lr}
    blx _do_kernel_oops
    159a:	f000 fa2b 	bl	19f4 <_do_kernel_oops>
    pop {pc}
    159e:	bd00      	pop	{pc}

000015a0 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15a0:	b510      	push	{r4, lr}
    15a2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15a4:	f012 fc1c 	bl	13de0 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15a8:	6822      	ldr	r2, [r4, #0]
    15aa:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15b0:	4801      	ldr	r0, [pc, #4]	; (15b8 <_FaultThreadShow.isra.2+0x18>)
    15b2:	f7ff bceb 	b.w	f8c <printk>
    15b6:	bf00      	nop
    15b8:	00014b99 	.word	0x00014b99

000015bc <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15bc:	b538      	push	{r3, r4, r5, lr}
    15be:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15c0:	481a      	ldr	r0, [pc, #104]	; (162c <_MpuFault+0x70>)
{
    15c2:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15c4:	f7ff fce2 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15c8:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15cc:	4c18      	ldr	r4, [pc, #96]	; (1630 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15ce:	f7ff ffe7 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15d4:	06d9      	lsls	r1, r3, #27
    15d6:	d502      	bpl.n	15de <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15d8:	4816      	ldr	r0, [pc, #88]	; (1634 <_MpuFault+0x78>)
    15da:	f7ff fcd7 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e0:	071a      	lsls	r2, r3, #28
    15e2:	d502      	bpl.n	15ea <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15e4:	4814      	ldr	r0, [pc, #80]	; (1638 <_MpuFault+0x7c>)
    15e6:	f7ff fcd1 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    15ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15ec:	079b      	lsls	r3, r3, #30
    15ee:	d50e      	bpl.n	160e <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    15f0:	4812      	ldr	r0, [pc, #72]	; (163c <_MpuFault+0x80>)
    15f2:	f7ff fccb 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    15f6:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    15f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fa:	0618      	lsls	r0, r3, #24
    15fc:	d507      	bpl.n	160e <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    15fe:	4810      	ldr	r0, [pc, #64]	; (1640 <_MpuFault+0x84>)
    1600:	f7ff fcc4 	bl	f8c <printk>
			if (fromHardFault) {
    1604:	b11d      	cbz	r5, 160e <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    160c:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    160e:	4c08      	ldr	r4, [pc, #32]	; (1630 <_MpuFault+0x74>)
    1610:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1612:	07d2      	lsls	r2, r2, #31
    1614:	d502      	bpl.n	161c <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    1616:	480b      	ldr	r0, [pc, #44]	; (1644 <_MpuFault+0x88>)
    1618:	f7ff fcb8 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    161c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    161e:	069b      	lsls	r3, r3, #26
    1620:	d502      	bpl.n	1628 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1622:	4809      	ldr	r0, [pc, #36]	; (1648 <_MpuFault+0x8c>)
    1624:	f7ff fcb2 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1628:	2000      	movs	r0, #0
    162a:	bd38      	pop	{r3, r4, r5, pc}
    162c:	00014be3 	.word	0x00014be3
    1630:	e000ed00 	.word	0xe000ed00
    1634:	00014bfa 	.word	0x00014bfa
    1638:	00014c0c 	.word	0x00014c0c
    163c:	00014c20 	.word	0x00014c20
    1640:	00014c39 	.word	0x00014c39
    1644:	00014c4a 	.word	0x00014c4a
    1648:	00014c6a 	.word	0x00014c6a

0000164c <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    164c:	b510      	push	{r4, lr}
    164e:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1650:	481a      	ldr	r0, [pc, #104]	; (16bc <_UsageFault+0x70>)
    1652:	f7ff fc9b 	bl	f8c <printk>

	_FaultThreadShow(esf);
    1656:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    165a:	4c19      	ldr	r4, [pc, #100]	; (16c0 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    165c:	f7ff ffa0 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1660:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1662:	019a      	lsls	r2, r3, #6
    1664:	d502      	bpl.n	166c <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    1666:	4817      	ldr	r0, [pc, #92]	; (16c4 <_UsageFault+0x78>)
    1668:	f7ff fc90 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    166e:	01db      	lsls	r3, r3, #7
    1670:	d502      	bpl.n	1678 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    1672:	4815      	ldr	r0, [pc, #84]	; (16c8 <_UsageFault+0x7c>)
    1674:	f7ff fc8a 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167a:	0318      	lsls	r0, r3, #12
    167c:	d502      	bpl.n	1684 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    167e:	4813      	ldr	r0, [pc, #76]	; (16cc <_UsageFault+0x80>)
    1680:	f7ff fc84 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1684:	4c0e      	ldr	r4, [pc, #56]	; (16c0 <_UsageFault+0x74>)
    1686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1688:	0359      	lsls	r1, r3, #13
    168a:	d502      	bpl.n	1692 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    168c:	4810      	ldr	r0, [pc, #64]	; (16d0 <_UsageFault+0x84>)
    168e:	f7ff fc7d 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1694:	039a      	lsls	r2, r3, #14
    1696:	d502      	bpl.n	169e <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    1698:	480e      	ldr	r0, [pc, #56]	; (16d4 <_UsageFault+0x88>)
    169a:	f7ff fc77 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    169e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a0:	03db      	lsls	r3, r3, #15
    16a2:	d502      	bpl.n	16aa <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16a4:	480c      	ldr	r0, [pc, #48]	; (16d8 <_UsageFault+0x8c>)
    16a6:	f7ff fc71 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16aa:	4a05      	ldr	r2, [pc, #20]	; (16c0 <_UsageFault+0x74>)
    16ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16ae:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16b2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16b6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16b8:	2000      	movs	r0, #0
    16ba:	bd10      	pop	{r4, pc}
    16bc:	00014c9a 	.word	0x00014c9a
    16c0:	e000ed00 	.word	0xe000ed00
    16c4:	00014cb3 	.word	0x00014cb3
    16c8:	00014cc7 	.word	0x00014cc7
    16cc:	00014ce2 	.word	0x00014ce2
    16d0:	00014d01 	.word	0x00014d01
    16d4:	00014d27 	.word	0x00014d27
    16d8:	00014d42 	.word	0x00014d42

000016dc <_BusFault>:
{
    16dc:	b538      	push	{r3, r4, r5, lr}
    16de:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16e0:	481d      	ldr	r0, [pc, #116]	; (1758 <_BusFault+0x7c>)
{
    16e2:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16e4:	f7ff fc52 	bl	f8c <printk>
	_FaultThreadShow(esf);
    16e8:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16ec:	4c1b      	ldr	r4, [pc, #108]	; (175c <_BusFault+0x80>)
	_FaultThreadShow(esf);
    16ee:	f7ff ff57 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16f4:	04d8      	lsls	r0, r3, #19
    16f6:	d504      	bpl.n	1702 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    16f8:	4819      	ldr	r0, [pc, #100]	; (1760 <_BusFault+0x84>)
}
    16fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    16fe:	f7ff bc45 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1702:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1704:	0519      	lsls	r1, r3, #20
    1706:	d501      	bpl.n	170c <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1708:	4816      	ldr	r0, [pc, #88]	; (1764 <_BusFault+0x88>)
    170a:	e7f6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    170c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    170e:	059a      	lsls	r2, r3, #22
    1710:	d514      	bpl.n	173c <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    1712:	4815      	ldr	r0, [pc, #84]	; (1768 <_BusFault+0x8c>)
    1714:	f7ff fc3a 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1718:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    171a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171c:	041b      	lsls	r3, r3, #16
    171e:	d507      	bpl.n	1730 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1720:	4812      	ldr	r0, [pc, #72]	; (176c <_BusFault+0x90>)
    1722:	f7ff fc33 	bl	f8c <printk>
			if (fromHardFault) {
    1726:	b11d      	cbz	r5, 1730 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    172a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    172e:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1730:	4b0a      	ldr	r3, [pc, #40]	; (175c <_BusFault+0x80>)
    1732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1734:	0558      	lsls	r0, r3, #21
    1736:	d50e      	bpl.n	1756 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1738:	480d      	ldr	r0, [pc, #52]	; (1770 <_BusFault+0x94>)
    173a:	e7de      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    173c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    173e:	0559      	lsls	r1, r3, #21
    1740:	d4fa      	bmi.n	1738 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1744:	05da      	lsls	r2, r3, #23
    1746:	d501      	bpl.n	174c <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1748:	480a      	ldr	r0, [pc, #40]	; (1774 <_BusFault+0x98>)
    174a:	e7d6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    174c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    174e:	049b      	lsls	r3, r3, #18
    1750:	d501      	bpl.n	1756 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1752:	4809      	ldr	r0, [pc, #36]	; (1778 <_BusFault+0x9c>)
    1754:	e7d1      	b.n	16fa <_BusFault+0x1e>
    1756:	bd38      	pop	{r3, r4, r5, pc}
    1758:	00014a60 	.word	0x00014a60
    175c:	e000ed00 	.word	0xe000ed00
    1760:	00014bfa 	.word	0x00014bfa
    1764:	00014c0c 	.word	0x00014c0c
    1768:	00014a77 	.word	0x00014a77
    176c:	00014c39 	.word	0x00014c39
    1770:	00014a91 	.word	0x00014a91
    1774:	00014aad 	.word	0x00014aad
    1778:	00014c6a 	.word	0x00014c6a

0000177c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    177c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    177e:	4c27      	ldr	r4, [pc, #156]	; (181c <_Fault+0xa0>)
    1780:	6863      	ldr	r3, [r4, #4]
    1782:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1786:	1eda      	subs	r2, r3, #3
{
    1788:	4605      	mov	r5, r0
	switch (fault) {
    178a:	2a09      	cmp	r2, #9
    178c:	d83b      	bhi.n	1806 <_Fault+0x8a>
    178e:	e8df f002 	tbb	[pc, r2]
    1792:	3405      	.short	0x3405
    1794:	3a3a3036 	.word	0x3a3a3036
    1798:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    179c:	4820      	ldr	r0, [pc, #128]	; (1820 <_Fault+0xa4>)
    179e:	f7ff fbf5 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17a4:	079a      	lsls	r2, r3, #30
    17a6:	d503      	bpl.n	17b0 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17a8:	481e      	ldr	r0, [pc, #120]	; (1824 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17aa:	f7ff fbef 	bl	f8c <printk>
    17ae:	e002      	b.n	17b6 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17b2:	005b      	lsls	r3, r3, #1
    17b4:	d401      	bmi.n	17ba <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17b6:	2000      	movs	r0, #0
    17b8:	e009      	b.n	17ce <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17ba:	481b      	ldr	r0, [pc, #108]	; (1828 <_Fault+0xac>)
    17bc:	f7ff fbe6 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17c0:	4b1a      	ldr	r3, [pc, #104]	; (182c <_Fault+0xb0>)
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	b143      	cbz	r3, 17d8 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17c6:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17c8:	4628      	mov	r0, r5
    17ca:	f7ff fef7 	bl	15bc <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17ce:	4629      	mov	r1, r5
}
    17d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17d4:	f000 b912 	b.w	19fc <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17d8:	4b15      	ldr	r3, [pc, #84]	; (1830 <_Fault+0xb4>)
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	b123      	cbz	r3, 17e8 <_Fault+0x6c>
			_BusFault(esf, 1);
    17de:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17e0:	4628      	mov	r0, r5
    17e2:	f7ff ff7b 	bl	16dc <_BusFault>
    17e6:	e7e6      	b.n	17b6 <_Fault+0x3a>
		} else if (SCB_UFSR) {
    17e8:	4b12      	ldr	r3, [pc, #72]	; (1834 <_Fault+0xb8>)
    17ea:	881b      	ldrh	r3, [r3, #0]
    17ec:	b29b      	uxth	r3, r3
    17ee:	2b00      	cmp	r3, #0
    17f0:	d0e1      	beq.n	17b6 <_Fault+0x3a>
		reason = _UsageFault(esf);
    17f2:	4628      	mov	r0, r5
    17f4:	f7ff ff2a 	bl	164c <_UsageFault>
    17f8:	e7e9      	b.n	17ce <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    17fa:	2100      	movs	r1, #0
    17fc:	e7e4      	b.n	17c8 <_Fault+0x4c>
		_BusFault(esf, 0);
    17fe:	2100      	movs	r1, #0
    1800:	e7ee      	b.n	17e0 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1802:	480d      	ldr	r0, [pc, #52]	; (1838 <_Fault+0xbc>)
    1804:	e7d1      	b.n	17aa <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    1806:	480d      	ldr	r0, [pc, #52]	; (183c <_Fault+0xc0>)
    1808:	490d      	ldr	r1, [pc, #52]	; (1840 <_Fault+0xc4>)
    180a:	f1a3 0210 	sub.w	r2, r3, #16
    180e:	2b0f      	cmp	r3, #15
    1810:	bfd8      	it	le
    1812:	4601      	movle	r1, r0
    1814:	480b      	ldr	r0, [pc, #44]	; (1844 <_Fault+0xc8>)
    1816:	f7ff fbb9 	bl	f8c <printk>
    181a:	e7cc      	b.n	17b6 <_Fault+0x3a>
    181c:	e000ed00 	.word	0xe000ed00
    1820:	00014af4 	.word	0x00014af4
    1824:	00014b0c 	.word	0x00014b0c
    1828:	00014b2e 	.word	0x00014b2e
    182c:	e000ed28 	.word	0xe000ed28
    1830:	e000ed29 	.word	0xe000ed29
    1834:	e000ed2a 	.word	0xe000ed2a
    1838:	00014b4e 	.word	0x00014b4e
    183c:	00014ac6 	.word	0x00014ac6
    1840:	00014adb 	.word	0x00014adb
    1844:	00014b85 	.word	0x00014b85

00001848 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1848:	4a02      	ldr	r2, [pc, #8]	; (1854 <_FaultInit+0xc>)
    184a:	6953      	ldr	r3, [r2, #20]
    184c:	f043 0310 	orr.w	r3, r3, #16
    1850:	6153      	str	r3, [r2, #20]
    1852:	4770      	bx	lr
    1854:	e000ed00 	.word	0xe000ed00

00001858 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1858:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    185a:	2b00      	cmp	r3, #0
    185c:	db08      	blt.n	1870 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    185e:	2201      	movs	r2, #1
    1860:	f000 001f 	and.w	r0, r0, #31
    1864:	fa02 f000 	lsl.w	r0, r2, r0
    1868:	095b      	lsrs	r3, r3, #5
    186a:	4a02      	ldr	r2, [pc, #8]	; (1874 <_arch_irq_enable+0x1c>)
    186c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1870:	4770      	bx	lr
    1872:	bf00      	nop
    1874:	e000e100 	.word	0xe000e100

00001878 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1878:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    187a:	2b00      	cmp	r3, #0
    187c:	db0d      	blt.n	189a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    187e:	2201      	movs	r2, #1
    1880:	095b      	lsrs	r3, r3, #5
    1882:	f000 001f 	and.w	r0, r0, #31
    1886:	fa02 f000 	lsl.w	r0, r2, r0
    188a:	3320      	adds	r3, #32
    188c:	4a03      	ldr	r2, [pc, #12]	; (189c <_arch_irq_disable+0x24>)
    188e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1892:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1896:	f3bf 8f6f 	isb	sy
    189a:	4770      	bx	lr
    189c:	e000e100 	.word	0xe000e100

000018a0 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18a0:	0942      	lsrs	r2, r0, #5
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <_arch_irq_is_enabled+0x18>)
    18a4:	f000 001f 	and.w	r0, r0, #31
    18a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18ac:	2301      	movs	r3, #1
    18ae:	fa03 f000 	lsl.w	r0, r3, r0
}
    18b2:	4010      	ands	r0, r2
    18b4:	4770      	bx	lr
    18b6:	bf00      	nop
    18b8:	e000e100 	.word	0xe000e100

000018bc <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18bc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18be:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18c0:	bfa8      	it	ge
    18c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18c6:	f101 0101 	add.w	r1, r1, #1
    18ca:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18ce:	bfad      	iteet	ge
    18d0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d4:	f000 000f 	andlt.w	r0, r0, #15
    18d8:	4b03      	ldrlt	r3, [pc, #12]	; (18e8 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18da:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18dc:	bfb6      	itet	lt
    18de:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e4:	5419      	strblt	r1, [r3, r0]
    18e6:	4770      	bx	lr
    18e8:	e000ed14 	.word	0xe000ed14

000018ec <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    18ec:	f000 b842 	b.w	1974 <__bus_fault>

000018f0 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    18f0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    18f2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    18f4:	4b04      	ldr	r3, [pc, #16]	; (1908 <_arch_isr_direct_pm+0x18>)
    18f6:	69d8      	ldr	r0, [r3, #28]
    18f8:	b118      	cbz	r0, 1902 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    18fa:	2200      	movs	r2, #0
    18fc:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    18fe:	f011 fdbd 	bl	1347c <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1902:	b662      	cpsie	i
    1904:	bd08      	pop	{r3, pc}
    1906:	bf00      	nop
    1908:	20001950 	.word	0x20001950

0000190c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    190e:	460c      	mov	r4, r1
    1910:	4616      	mov	r6, r2
    1912:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1914:	2204      	movs	r2, #4
    1916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1918:	9909      	ldr	r1, [sp, #36]	; 0x24
    191a:	4605      	mov	r5, r0
    191c:	f012 fcf4 	bl	14308 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1920:	f1a6 0120 	sub.w	r1, r6, #32
    1924:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1926:	4a0c      	ldr	r2, [pc, #48]	; (1958 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1928:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    192a:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    192e:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1930:	f022 0201 	bic.w	r2, r2, #1
    1934:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1936:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    1938:	662e      	str	r6, [r5, #96]	; 0x60
    193a:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    193c:	9a06      	ldr	r2, [sp, #24]
    193e:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1940:	9a07      	ldr	r2, [sp, #28]
    1942:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1944:	9a08      	ldr	r2, [sp, #32]
    1946:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1948:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    194a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    194e:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1950:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1952:	66ab      	str	r3, [r5, #104]	; 0x68
    1954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1956:	bf00      	nop
    1958:	00000899 	.word	0x00000899

0000195c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    195c:	4901      	ldr	r1, [pc, #4]	; (1964 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    195e:	2210      	movs	r2, #16
	str r2, [r1]
    1960:	600a      	str	r2, [r1, #0]
	bx lr
    1962:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1964:	e000ed10 	.word	0xe000ed10

00001968 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1968:	4040      	eors	r0, r0
	msr BASEPRI, r0
    196a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    196e:	bf30      	wfi

	bx lr
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1974:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1976:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    197a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1998 <__bus_fault+0x24>
	ldr ip, [ip]
    197e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1982:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1986:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1988:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    198c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1990:	b500      	push	{lr}
	bl _Fault
    1992:	f7ff fef3 	bl	177c <_Fault>

	pop {pc}
    1996:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1998:	e000ed04 	.word	0xe000ed04

0000199c <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    199c:	2804      	cmp	r0, #4
{
    199e:	b538      	push	{r3, r4, r5, lr}
    19a0:	4604      	mov	r4, r0
    19a2:	460d      	mov	r5, r1
	switch (reason) {
    19a4:	d013      	beq.n	19ce <_NanoFatalErrorHandler+0x32>
    19a6:	2805      	cmp	r0, #5
    19a8:	d013      	beq.n	19d2 <_NanoFatalErrorHandler+0x36>
    19aa:	2803      	cmp	r0, #3
    19ac:	d113      	bne.n	19d6 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19ae:	480c      	ldr	r0, [pc, #48]	; (19e0 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    19b0:	f7ff faec 	bl	f8c <printk>
    19b4:	f012 fa14 	bl	13de0 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19b8:	69aa      	ldr	r2, [r5, #24]
    19ba:	4601      	mov	r1, r0
    19bc:	4809      	ldr	r0, [pc, #36]	; (19e4 <_NanoFatalErrorHandler+0x48>)
    19be:	f7ff fae5 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19c2:	4629      	mov	r1, r5
    19c4:	4620      	mov	r0, r4
}
    19c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19ca:	f000 b817 	b.w	19fc <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    19ce:	4806      	ldr	r0, [pc, #24]	; (19e8 <_NanoFatalErrorHandler+0x4c>)
    19d0:	e7ee      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    19d2:	4806      	ldr	r0, [pc, #24]	; (19ec <_NanoFatalErrorHandler+0x50>)
    19d4:	e7ec      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19d6:	4601      	mov	r1, r0
    19d8:	4805      	ldr	r0, [pc, #20]	; (19f0 <_NanoFatalErrorHandler+0x54>)
    19da:	f7ff fad7 	bl	f8c <printk>
		break;
    19de:	e7e9      	b.n	19b4 <_NanoFatalErrorHandler+0x18>
    19e0:	00014d6e 	.word	0x00014d6e
    19e4:	00014dec 	.word	0x00014dec
    19e8:	00014d94 	.word	0x00014d94
    19ec:	00014dae 	.word	0x00014dae
    19f0:	00014dc9 	.word	0x00014dc9

000019f4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    19f4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    19f6:	6800      	ldr	r0, [r0, #0]
    19f8:	f7ff bfd0 	b.w	199c <_NanoFatalErrorHandler>

000019fc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    19fc:	2805      	cmp	r0, #5
{
    19fe:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a00:	d00c      	beq.n	1a1c <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a02:	f012 fbaf 	bl	14164 <k_is_in_isr>
    1a06:	b160      	cbz	r0, 1a22 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a08:	f012 fbac 	bl	14164 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a0c:	4b0c      	ldr	r3, [pc, #48]	; (1a40 <_SysFatalErrorHandler+0x44>)
    1a0e:	490d      	ldr	r1, [pc, #52]	; (1a44 <_SysFatalErrorHandler+0x48>)
    1a10:	2800      	cmp	r0, #0
    1a12:	bf08      	it	eq
    1a14:	4619      	moveq	r1, r3
    1a16:	480c      	ldr	r0, [pc, #48]	; (1a48 <_SysFatalErrorHandler+0x4c>)
    1a18:	f7ff fab8 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a1c:	f7ff ffa4 	bl	1968 <k_cpu_idle>
    1a20:	e7fc      	b.n	1a1c <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a22:	f012 fbaf 	bl	14184 <_is_thread_essential>
    1a26:	2800      	cmp	r0, #0
    1a28:	d1ee      	bne.n	1a08 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a2a:	4c08      	ldr	r4, [pc, #32]	; (1a4c <_SysFatalErrorHandler+0x50>)
    1a2c:	4808      	ldr	r0, [pc, #32]	; (1a50 <_SysFatalErrorHandler+0x54>)
    1a2e:	68a1      	ldr	r1, [r4, #8]
    1a30:	f7ff faac 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a34:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a3a:	f000 b80b 	b.w	1a54 <_impl_k_thread_abort>
    1a3e:	bf00      	nop
    1a40:	00014e2c 	.word	0x00014e2c
    1a44:	00014e28 	.word	0x00014e28
    1a48:	00014e3d 	.word	0x00014e3d
    1a4c:	20001950 	.word	0x20001950
    1a50:	00014e5d 	.word	0x00014e5d

00001a54 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a54:	b538      	push	{r3, r4, r5, lr}
    1a56:	4605      	mov	r5, r0
	__asm__ volatile(
    1a58:	f04f 0320 	mov.w	r3, #32
    1a5c:	f3ef 8411 	mrs	r4, BASEPRI
    1a60:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a64:	f012 fbe6 	bl	14234 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a68:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <_impl_k_thread_abort+0x44>)
    1a6a:	689b      	ldr	r3, [r3, #8]
    1a6c:	429d      	cmp	r5, r3
    1a6e:	d10d      	bne.n	1a8c <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a70:	4b0a      	ldr	r3, [pc, #40]	; (1a9c <_impl_k_thread_abort+0x48>)
    1a72:	685a      	ldr	r2, [r3, #4]
    1a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a78:	b922      	cbnz	r2, 1a84 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1a7a:	f012 f963 	bl	13d44 <_update_time_slice_before_swap>

	return __swap(key);
    1a7e:	4620      	mov	r0, r4
    1a80:	f7ff fd42 	bl	1508 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a84:	685a      	ldr	r2, [r3, #4]
    1a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a8a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1a8c:	4620      	mov	r0, r4
}
    1a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1a92:	f012 b811 	b.w	13ab8 <_reschedule>
    1a96:	bf00      	nop
    1a98:	20001950 	.word	0x20001950
    1a9c:	e000ed00 	.word	0xe000ed00

00001aa0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1aa0:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1aa2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1aa4:	4a0b      	ldr	r2, [pc, #44]	; (1ad4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1aa6:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1aa8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1aaa:	bf1e      	ittt	ne
	movne	r1, #0
    1aac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1aae:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ab0:	f011 fce4 	blne	1347c <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ab4:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ab6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1aba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1abe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ac2:	4905      	ldr	r1, [pc, #20]	; (1ad8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ac4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1ac6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1ac8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1aca:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1ace:	f7ff bcfb 	b.w	14c8 <_ExcExit>
    1ad2:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ad4:	20001950 	.word	0x20001950
	ldr r1, =_sw_isr_table
    1ad8:	000000dc 	.word	0x000000dc

00001adc <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1adc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ade:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1ae2:	4806      	ldr	r0, [pc, #24]	; (1afc <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1ae8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1aea:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1aee:	2002      	movs	r0, #2
    msr CONTROL, r0
    1af0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1af4:	f3bf 8f6f 	isb	sy

    b _PrepC
    1af8:	f000 b806 	b.w	1b08 <_PrepC>
    ldr r0, =_interrupt_stack
    1afc:	20002e28 	.word	0x20002e28

00001b00 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b00:	bf30      	wfi
    b _SysNmiOnReset
    1b02:	f7ff bffd 	b.w	1b00 <_SysNmiOnReset>
    1b06:	bf00      	nop

00001b08 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b08:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b0a:	4b07      	ldr	r3, [pc, #28]	; (1b28 <_PrepC+0x20>)
    1b0c:	4a07      	ldr	r2, [pc, #28]	; (1b2c <_PrepC+0x24>)
    1b0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b12:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b18:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b1c:	f011 fcde 	bl	134dc <_bss_zero>
	_data_copy();
    1b20:	f011 fce6 	bl	134f0 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b24:	f011 fd08 	bl	13538 <_Cstart>
    1b28:	00000000 	.word	0x00000000
    1b2c:	e000ed00 	.word	0xe000ed00

00001b30 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b30:	b508      	push	{r3, lr}
	handler();
    1b32:	f7ff ffe5 	bl	1b00 <_SysNmiOnReset>
	_ExcExit();
}
    1b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b3a:	f7ff bcc5 	b.w	14c8 <_ExcExit>
	...

00001b40 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1b40:	4912      	ldr	r1, [pc, #72]	; (1b8c <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b42:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b44:	680d      	ldr	r5, [r1, #0]
    1b46:	2d08      	cmp	r5, #8
    1b48:	d80d      	bhi.n	1b66 <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1b4a:	4a11      	ldr	r2, [pc, #68]	; (1b90 <arm_mpu_init+0x50>)
    1b4c:	6848      	ldr	r0, [r1, #4]
    1b4e:	2300      	movs	r3, #0
    1b50:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b52:	429d      	cmp	r5, r3
    1b54:	f100 000c 	add.w	r0, r0, #12
    1b58:	d107      	bne.n	1b6a <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1b5a:	2305      	movs	r3, #5
    1b5c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b62:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1b66:	2000      	movs	r0, #0
    1b68:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1b6a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1b6e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1b72:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b74:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1b78:	f041 0110 	orr.w	r1, r1, #16
    1b7c:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b7e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b82:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b84:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b86:	6114      	str	r4, [r2, #16]
    1b88:	e7e3      	b.n	1b52 <arm_mpu_init+0x12>
    1b8a:	bf00      	nop
    1b8c:	20003a3c 	.word	0x20003a3c
    1b90:	e000ed90 	.word	0xe000ed90

00001b94 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1b94:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1b96:	4603      	mov	r3, r0
    1b98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1b9c:	b90a      	cbnz	r2, 1ba2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1b9e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1ba0:	4770      	bx	lr
		*d = *s;
    1ba2:	f803 2b01 	strb.w	r2, [r3], #1
    1ba6:	e7f7      	b.n	1b98 <strcpy+0x4>

00001ba8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1ba8:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1baa:	4603      	mov	r3, r0
    1bac:	1a98      	subs	r0, r3, r2
    1bae:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bb2:	2900      	cmp	r1, #0
    1bb4:	d1fa      	bne.n	1bac <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1bb6:	4770      	bx	lr

00001bb8 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1bb8:	3801      	subs	r0, #1
    1bba:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1bbc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1bc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bc4:	4293      	cmp	r3, r2
    1bc6:	d102      	bne.n	1bce <strcmp+0x16>
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d1f7      	bne.n	1bbc <strcmp+0x4>
    1bcc:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1bce:	1a98      	subs	r0, r3, r2
    1bd0:	4770      	bx	lr

00001bd2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1bd2:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1bd4:	b182      	cbz	r2, 1bf8 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1bd6:	3a01      	subs	r2, #1
    1bd8:	460c      	mov	r4, r1
    1bda:	4603      	mov	r3, r0
    1bdc:	d103      	bne.n	1be6 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1bde:	781a      	ldrb	r2, [r3, #0]
    1be0:	7820      	ldrb	r0, [r4, #0]
    1be2:	1a10      	subs	r0, r2, r0
    1be4:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1be6:	781e      	ldrb	r6, [r3, #0]
    1be8:	7825      	ldrb	r5, [r4, #0]
    1bea:	42ae      	cmp	r6, r5
    1bec:	f100 0001 	add.w	r0, r0, #1
    1bf0:	f101 0101 	add.w	r1, r1, #1
    1bf4:	d0ef      	beq.n	1bd6 <memcmp+0x4>
    1bf6:	e7f2      	b.n	1bde <memcmp+0xc>
		return 0;
    1bf8:	4610      	mov	r0, r2
}
    1bfa:	bd70      	pop	{r4, r5, r6, pc}

00001bfc <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1bfc:	ea81 0300 	eor.w	r3, r1, r0
    1c00:	f013 0f03 	tst.w	r3, #3
{
    1c04:	b570      	push	{r4, r5, r6, lr}
    1c06:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c08:	d00b      	beq.n	1c22 <memcpy+0x26>
    1c0a:	3b01      	subs	r3, #1
    1c0c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c0e:	4291      	cmp	r1, r2
    1c10:	d11b      	bne.n	1c4a <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c12:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c14:	2a00      	cmp	r2, #0
    1c16:	d0fc      	beq.n	1c12 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c18:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c1c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c20:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c22:	079c      	lsls	r4, r3, #30
    1c24:	d1f6      	bne.n	1c14 <memcpy+0x18>
    1c26:	1f1e      	subs	r6, r3, #4
    1c28:	460d      	mov	r5, r1
    1c2a:	1b54      	subs	r4, r2, r5
    1c2c:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c2e:	2c03      	cmp	r4, #3
    1c30:	d806      	bhi.n	1c40 <memcpy+0x44>
    1c32:	f022 0403 	bic.w	r4, r2, #3
    1c36:	4421      	add	r1, r4
    1c38:	4423      	add	r3, r4
    1c3a:	f002 0203 	and.w	r2, r2, #3
    1c3e:	e7e4      	b.n	1c0a <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c40:	f855 4b04 	ldr.w	r4, [r5], #4
    1c44:	f846 4f04 	str.w	r4, [r6, #4]!
    1c48:	e7ef      	b.n	1c2a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c52:	e7dc      	b.n	1c0e <memcpy+0x12>

00001c54 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1c54:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1c56:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1c58:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1c5a:	079c      	lsls	r4, r3, #30
    1c5c:	d111      	bne.n	1c82 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1c5e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1c62:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1c66:	461e      	mov	r6, r3
    1c68:	1b95      	subs	r5, r2, r6
    1c6a:	441d      	add	r5, r3
    1c6c:	2d03      	cmp	r5, #3
    1c6e:	d80e      	bhi.n	1c8e <memset+0x3a>
    1c70:	f022 0403 	bic.w	r4, r2, #3
    1c74:	4423      	add	r3, r4
    1c76:	f002 0203 	and.w	r2, r2, #3
    1c7a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1c7c:	4293      	cmp	r3, r2
    1c7e:	d109      	bne.n	1c94 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1c80:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1c82:	2a00      	cmp	r2, #0
    1c84:	d0fc      	beq.n	1c80 <memset+0x2c>
		*(d_byte++) = c_byte;
    1c86:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1c8a:	3a01      	subs	r2, #1
    1c8c:	e7e5      	b.n	1c5a <memset+0x6>
		*(d_word++) = c_word;
    1c8e:	f846 4b04 	str.w	r4, [r6], #4
    1c92:	e7e9      	b.n	1c68 <memset+0x14>
		*(d_byte++) = c_byte;
    1c94:	f803 1b01 	strb.w	r1, [r3], #1
    1c98:	e7f0      	b.n	1c7c <memset+0x28>
	...

00001c9c <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1c9c:	b570      	push	{r4, r5, r6, lr}
    1c9e:	f04f 0320 	mov.w	r3, #32
    1ca2:	f3ef 8511 	mrs	r5, BASEPRI
    1ca6:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1caa:	4c14      	ldr	r4, [pc, #80]	; (1cfc <bt_hex+0x60>)
    1cac:	4e14      	ldr	r6, [pc, #80]	; (1d00 <bt_hex+0x64>)
    1cae:	7823      	ldrb	r3, [r4, #0]
    1cb0:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1cb4:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1cb6:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1cba:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1cbc:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1cbe:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1cc2:	2940      	cmp	r1, #64	; 0x40
    1cc4:	bf28      	it	cs
    1cc6:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1cc8:	4d0e      	ldr	r5, [pc, #56]	; (1d04 <bt_hex+0x68>)
    1cca:	3801      	subs	r0, #1
    1ccc:	4613      	mov	r3, r2
    1cce:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1cd2:	42b3      	cmp	r3, r6
    1cd4:	d104      	bne.n	1ce0 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1cd6:	2300      	movs	r3, #0
    1cd8:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1cdc:	4610      	mov	r0, r2
    1cde:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1ce0:	7844      	ldrb	r4, [r0, #1]
    1ce2:	0924      	lsrs	r4, r4, #4
    1ce4:	3302      	adds	r3, #2
    1ce6:	5d2c      	ldrb	r4, [r5, r4]
    1ce8:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1cec:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1cf0:	f004 040f 	and.w	r4, r4, #15
    1cf4:	5d2c      	ldrb	r4, [r5, r4]
    1cf6:	f803 4c01 	strb.w	r4, [r3, #-1]
    1cfa:	e7ea      	b.n	1cd2 <bt_hex+0x36>
    1cfc:	20000074 	.word	0x20000074
    1d00:	20000075 	.word	0x20000075
    1d04:	00014ea0 	.word	0x00014ea0

00001d08 <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1d08:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d0a:	4a0f      	ldr	r2, [pc, #60]	; (1d48 <bt_addr_str+0x40>)
    1d0c:	4c0f      	ldr	r4, [pc, #60]	; (1d4c <bt_addr_str+0x44>)
    1d0e:	7813      	ldrb	r3, [r2, #0]
    1d10:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1d14:	3301      	adds	r3, #1
{
    1d16:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1d18:	f003 0301 	and.w	r3, r3, #1
    1d1c:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1d1e:	7802      	ldrb	r2, [r0, #0]
    1d20:	7943      	ldrb	r3, [r0, #5]
    1d22:	9204      	str	r2, [sp, #16]
    1d24:	7842      	ldrb	r2, [r0, #1]
    1d26:	9203      	str	r2, [sp, #12]
    1d28:	7882      	ldrb	r2, [r0, #2]
    1d2a:	9202      	str	r2, [sp, #8]
    1d2c:	78c2      	ldrb	r2, [r0, #3]
    1d2e:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1d30:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1d34:	7902      	ldrb	r2, [r0, #4]
    1d36:	9200      	str	r2, [sp, #0]
    1d38:	2112      	movs	r1, #18
    1d3a:	4a05      	ldr	r2, [pc, #20]	; (1d50 <bt_addr_str+0x48>)
    1d3c:	4620      	mov	r0, r4
    1d3e:	f7ff f933 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1d42:	4620      	mov	r0, r4
    1d44:	b006      	add	sp, #24
    1d46:	bd10      	pop	{r4, pc}
    1d48:	20000072 	.word	0x20000072
    1d4c:	20000018 	.word	0x20000018
    1d50:	00014e82 	.word	0x00014e82

00001d54 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1d54:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d56:	4a1d      	ldr	r2, [pc, #116]	; (1dcc <bt_addr_le_str+0x78>)
    1d58:	491d      	ldr	r1, [pc, #116]	; (1dd0 <bt_addr_le_str+0x7c>)
    1d5a:	7813      	ldrb	r3, [r2, #0]
    1d5c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1d60:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1d62:	f003 0301 	and.w	r3, r3, #1
    1d66:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1d68:	7803      	ldrb	r3, [r0, #0]
{
    1d6a:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1d6c:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1d70:	4604      	mov	r4, r0
	str = bufs[cur++];
    1d72:	440e      	add	r6, r1
    1d74:	ad07      	add	r5, sp, #28
    1d76:	2b03      	cmp	r3, #3
    1d78:	d821      	bhi.n	1dbe <bt_addr_le_str+0x6a>
    1d7a:	e8df f003 	tbb	[pc, r3]
    1d7e:	1a02      	.short	0x1a02
    1d80:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1d82:	4914      	ldr	r1, [pc, #80]	; (1dd4 <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1d84:	4628      	mov	r0, r5
    1d86:	f7ff ff05 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1d8a:	7862      	ldrb	r2, [r4, #1]
    1d8c:	9204      	str	r2, [sp, #16]
    1d8e:	78a2      	ldrb	r2, [r4, #2]
    1d90:	9203      	str	r2, [sp, #12]
    1d92:	78e2      	ldrb	r2, [r4, #3]
    1d94:	9202      	str	r2, [sp, #8]
    1d96:	7922      	ldrb	r2, [r4, #4]
    1d98:	9201      	str	r2, [sp, #4]
    1d9a:	7962      	ldrb	r2, [r4, #5]
    1d9c:	9200      	str	r2, [sp, #0]
    1d9e:	79a3      	ldrb	r3, [r4, #6]
    1da0:	9505      	str	r5, [sp, #20]
    1da2:	4a0d      	ldr	r2, [pc, #52]	; (1dd8 <bt_addr_le_str+0x84>)
    1da4:	211b      	movs	r1, #27
    1da6:	4630      	mov	r0, r6
    1da8:	f7ff f8fe 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1dac:	4630      	mov	r0, r6
    1dae:	b00a      	add	sp, #40	; 0x28
    1db0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1db2:	490a      	ldr	r1, [pc, #40]	; (1ddc <bt_addr_le_str+0x88>)
    1db4:	e7e6      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1db6:	490a      	ldr	r1, [pc, #40]	; (1de0 <bt_addr_le_str+0x8c>)
    1db8:	e7e4      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1dba:	490a      	ldr	r1, [pc, #40]	; (1de4 <bt_addr_le_str+0x90>)
    1dbc:	e7e2      	b.n	1d84 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1dbe:	4a0a      	ldr	r2, [pc, #40]	; (1de8 <bt_addr_le_str+0x94>)
    1dc0:	210a      	movs	r1, #10
    1dc2:	4628      	mov	r0, r5
    1dc4:	f7ff f8f0 	bl	fa8 <snprintk>
    1dc8:	e7df      	b.n	1d8a <bt_addr_le_str+0x36>
    1dca:	bf00      	nop
    1dcc:	20000073 	.word	0x20000073
    1dd0:	2000003c 	.word	0x2000003c
    1dd4:	000148d9 	.word	0x000148d9
    1dd8:	00014902 	.word	0x00014902
    1ddc:	000148e0 	.word	0x000148e0
    1de0:	000148e7 	.word	0x000148e7
    1de4:	000148f1 	.word	0x000148f1
    1de8:	000148fb 	.word	0x000148fb

00001dec <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1dec:	b530      	push	{r4, r5, lr}
    1dee:	b085      	sub	sp, #20
    1df0:	4604      	mov	r4, r0
    1df2:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1df4:	4668      	mov	r0, sp
    1df6:	2203      	movs	r2, #3
    1df8:	f7ff ff00 	bl	1bfc <memcpy>
	memset(res + 3, 0, 13);
    1dfc:	220d      	movs	r2, #13
    1dfe:	2100      	movs	r1, #0
    1e00:	f10d 0003 	add.w	r0, sp, #3
    1e04:	f7ff ff26 	bl	1c54 <memset>

	err = bt_encrypt_le(irk, res, res);
    1e08:	4620      	mov	r0, r4
    1e0a:	466a      	mov	r2, sp
    1e0c:	4669      	mov	r1, sp
    1e0e:	f006 f913 	bl	8038 <bt_encrypt_le>
	if (err) {
    1e12:	4604      	mov	r4, r0
    1e14:	b920      	cbnz	r0, 1e20 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1e16:	2203      	movs	r2, #3
    1e18:	4669      	mov	r1, sp
    1e1a:	4628      	mov	r0, r5
    1e1c:	f7ff feee 	bl	1bfc <memcpy>

	return 0;
}
    1e20:	4620      	mov	r0, r4
    1e22:	b005      	add	sp, #20
    1e24:	bd30      	pop	{r4, r5, pc}

00001e26 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1e26:	b513      	push	{r0, r1, r4, lr}
    1e28:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1e2a:	aa01      	add	r2, sp, #4
    1e2c:	3103      	adds	r1, #3
    1e2e:	f7ff ffdd 	bl	1dec <ah>
	if (err) {
    1e32:	b948      	cbnz	r0, 1e48 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1e34:	2203      	movs	r2, #3
    1e36:	a901      	add	r1, sp, #4
    1e38:	4620      	mov	r0, r4
    1e3a:	f7ff feca 	bl	1bd2 <memcmp>
    1e3e:	fab0 f080 	clz	r0, r0
    1e42:	0940      	lsrs	r0, r0, #5
}
    1e44:	b002      	add	sp, #8
    1e46:	bd10      	pop	{r4, pc}
		return false;
    1e48:	2000      	movs	r0, #0
    1e4a:	e7fb      	b.n	1e44 <bt_rpa_irk_matches+0x1e>

00001e4c <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1e4e:	1ccd      	adds	r5, r1, #3
{
    1e50:	4606      	mov	r6, r0
    1e52:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1e54:	4628      	mov	r0, r5
    1e56:	2103      	movs	r1, #3
    1e58:	f006 f8d2 	bl	8000 <bt_rand>
	if (err) {
    1e5c:	b960      	cbnz	r0, 1e78 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1e5e:	7963      	ldrb	r3, [r4, #5]
    1e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e68:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1e6a:	4622      	mov	r2, r4
    1e6c:	4629      	mov	r1, r5
    1e6e:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1e74:	f7ff bfba 	b.w	1dec <ah>
}
    1e78:	bd70      	pop	{r4, r5, r6, pc}
	...

00001e7c <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1e7c:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1e7e:	7802      	ldrb	r2, [r0, #0]
    1e80:	2a01      	cmp	r2, #1
{
    1e82:	4604      	mov	r4, r0
    1e84:	460b      	mov	r3, r1
	switch (src->type) {
    1e86:	d017      	beq.n	1eb8 <uuid_to_uuid128+0x3c>
    1e88:	d303      	bcc.n	1e92 <uuid_to_uuid128+0x16>
    1e8a:	2a02      	cmp	r2, #2
    1e8c:	d02c      	beq.n	1ee8 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1e8e:	bcf0      	pop	{r4, r5, r6, r7}
    1e90:	4770      	bx	lr
		*dst = uuid128_base;
    1e92:	4a18      	ldr	r2, [pc, #96]	; (1ef4 <uuid_to_uuid128+0x78>)
    1e94:	460d      	mov	r5, r1
    1e96:	f102 0710 	add.w	r7, r2, #16
    1e9a:	6810      	ldr	r0, [r2, #0]
    1e9c:	6851      	ldr	r1, [r2, #4]
    1e9e:	462e      	mov	r6, r5
    1ea0:	c603      	stmia	r6!, {r0, r1}
    1ea2:	3208      	adds	r2, #8
    1ea4:	42ba      	cmp	r2, r7
    1ea6:	4635      	mov	r5, r6
    1ea8:	d1f7      	bne.n	1e9a <uuid_to_uuid128+0x1e>
    1eaa:	7812      	ldrb	r2, [r2, #0]
    1eac:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1eae:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1eb0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1eb2:	0a12      	lsrs	r2, r2, #8
    1eb4:	739a      	strb	r2, [r3, #14]
    1eb6:	e7ea      	b.n	1e8e <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1eb8:	4a0e      	ldr	r2, [pc, #56]	; (1ef4 <uuid_to_uuid128+0x78>)
    1eba:	460d      	mov	r5, r1
    1ebc:	f102 0710 	add.w	r7, r2, #16
    1ec0:	6810      	ldr	r0, [r2, #0]
    1ec2:	6851      	ldr	r1, [r2, #4]
    1ec4:	462e      	mov	r6, r5
    1ec6:	c603      	stmia	r6!, {r0, r1}
    1ec8:	3208      	adds	r2, #8
    1eca:	42ba      	cmp	r2, r7
    1ecc:	4635      	mov	r5, r6
    1ece:	d1f7      	bne.n	1ec0 <uuid_to_uuid128+0x44>
    1ed0:	7812      	ldrb	r2, [r2, #0]
    1ed2:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1ed4:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1ed6:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1ed8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1edc:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1ede:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1ee0:	0a12      	lsrs	r2, r2, #8
    1ee2:	7399      	strb	r1, [r3, #14]
    1ee4:	741a      	strb	r2, [r3, #16]
    1ee6:	e7d2      	b.n	1e8e <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1ee8:	4601      	mov	r1, r0
    1eea:	2211      	movs	r2, #17
    1eec:	4618      	mov	r0, r3
}
    1eee:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1ef0:	f7ff be84 	b.w	1bfc <memcpy>
    1ef4:	00014eb1 	.word	0x00014eb1

00001ef8 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1ef8:	b510      	push	{r4, lr}
    1efa:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1efc:	7801      	ldrb	r1, [r0, #0]
    1efe:	7822      	ldrb	r2, [r4, #0]
    1f00:	428a      	cmp	r2, r1
{
    1f02:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1f04:	d00e      	beq.n	1f24 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1f06:	4669      	mov	r1, sp
    1f08:	f7ff ffb8 	bl	1e7c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1f0c:	a905      	add	r1, sp, #20
    1f0e:	4620      	mov	r0, r4
    1f10:	f7ff ffb4 	bl	1e7c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1f14:	2210      	movs	r2, #16
    1f16:	f10d 0115 	add.w	r1, sp, #21
    1f1a:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f1e:	f7ff fe58 	bl	1bd2 <memcmp>
    1f22:	e00a      	b.n	1f3a <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1f24:	2a01      	cmp	r2, #1
    1f26:	d00a      	beq.n	1f3e <bt_uuid_cmp+0x46>
    1f28:	d304      	bcc.n	1f34 <bt_uuid_cmp+0x3c>
    1f2a:	2a02      	cmp	r2, #2
    1f2c:	d00a      	beq.n	1f44 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1f2e:	f06f 0015 	mvn.w	r0, #21
    1f32:	e002      	b.n	1f3a <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1f34:	8840      	ldrh	r0, [r0, #2]
    1f36:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f38:	1ac0      	subs	r0, r0, r3
}
    1f3a:	b00a      	add	sp, #40	; 0x28
    1f3c:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f3e:	6840      	ldr	r0, [r0, #4]
    1f40:	6863      	ldr	r3, [r4, #4]
    1f42:	e7f9      	b.n	1f38 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f44:	2210      	movs	r2, #16
    1f46:	1c61      	adds	r1, r4, #1
    1f48:	3001      	adds	r0, #1
    1f4a:	e7e8      	b.n	1f1e <bt_uuid_cmp+0x26>

00001f4c <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    1f4c:	4770      	bx	lr
	...

00001f50 <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    1f50:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    1f52:	4d0b      	ldr	r5, [pc, #44]	; (1f80 <ver_str+0x30>)
{
    1f54:	4606      	mov	r6, r0
	const char * const str[] = {
    1f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    1f58:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    1f5a:	466c      	mov	r4, sp
    1f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f62:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    1f66:	2e09      	cmp	r6, #9
	const char * const str[] = {
    1f68:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    1f6c:	bf9b      	ittet	ls
    1f6e:	ab0a      	addls	r3, sp, #40	; 0x28
    1f70:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    1f74:	4803      	ldrhi	r0, [pc, #12]	; (1f84 <ver_str+0x34>)
		return str[ver];
    1f76:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    1f7a:	b00a      	add	sp, #40	; 0x28
    1f7c:	bd70      	pop	{r4, r5, r6, pc}
    1f7e:	bf00      	nop
    1f80:	00014890 	.word	0x00014890
    1f84:	00015994 	.word	0x00015994

00001f88 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1f88:	2207      	movs	r2, #7
    1f8a:	f7ff be37 	b.w	1bfc <memcpy>

00001f8e <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1f8e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1f90:	f3bf 8f5b 	dmb	ish
    1f94:	e850 3f00 	ldrex	r3, [r0]
    1f98:	ea43 0201 	orr.w	r2, r3, r1
    1f9c:	e840 2e00 	strex	lr, r2, [r0]
    1fa0:	f1be 0f00 	cmp.w	lr, #0
    1fa4:	d1f6      	bne.n	1f94 <atomic_or+0x6>
    1fa6:	f3bf 8f5b 	dmb	ish
    1faa:	4618      	mov	r0, r3
    1fac:	f85d fb04 	ldr.w	pc, [sp], #4

00001fb0 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1fb0:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1fb2:	f3bf 8f5b 	dmb	ish
    1fb6:	e850 3f00 	ldrex	r3, [r0]
    1fba:	ea03 0201 	and.w	r2, r3, r1
    1fbe:	e840 2e00 	strex	lr, r2, [r0]
    1fc2:	f1be 0f00 	cmp.w	lr, #0
    1fc6:	d1f6      	bne.n	1fb6 <atomic_and+0x6>
    1fc8:	f3bf 8f5b 	dmb	ish
    1fcc:	4618      	mov	r0, r3
    1fce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001fd4 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    1fd4:	78c3      	ldrb	r3, [r0, #3]
    1fd6:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1fd8:	f241 3288 	movw	r2, #5000	; 0x1388
    1fdc:	f100 0170 	add.w	r1, r0, #112	; 0x70
    1fe0:	bf08      	it	eq
    1fe2:	2200      	moveq	r2, #0
    1fe4:	4801      	ldr	r0, [pc, #4]	; (1fec <update_conn_param+0x18>)
    1fe6:	f012 ba65 	b.w	144b4 <k_delayed_work_submit_to_queue>
    1fea:	bf00      	nop
    1fec:	20001990 	.word	0x20001990

00001ff0 <hci_cmd_done>:
{
    1ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ff4:	4606      	mov	r6, r0
    1ff6:	b086      	sub	sp, #24
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1ff8:	7990      	ldrb	r0, [r2, #6]
    1ffa:	4f26      	ldr	r7, [pc, #152]	; (2094 <hci_cmd_done+0xa4>)
{
    1ffc:	4688      	mov	r8, r1
    1ffe:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2000:	f010 fda2 	bl	12b48 <net_buf_pool_get>
    2004:	4287      	cmp	r7, r0
    2006:	d013      	beq.n	2030 <hci_cmd_done+0x40>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    2008:	79ac      	ldrb	r4, [r5, #6]
    200a:	4620      	mov	r0, r4
    200c:	f010 fd9c 	bl	12b48 <net_buf_pool_get>
    2010:	4b21      	ldr	r3, [pc, #132]	; (2098 <hci_cmd_done+0xa8>)
    2012:	9305      	str	r3, [sp, #20]
    2014:	9003      	str	r0, [sp, #12]
    2016:	e88d 0048 	stmia.w	sp, {r3, r6}
    201a:	9704      	str	r7, [sp, #16]
    201c:	9402      	str	r4, [sp, #8]
    201e:	4b1f      	ldr	r3, [pc, #124]	; (209c <hci_cmd_done+0xac>)
    2020:	4a1f      	ldr	r2, [pc, #124]	; (20a0 <hci_cmd_done+0xb0>)
    2022:	4920      	ldr	r1, [pc, #128]	; (20a4 <hci_cmd_done+0xb4>)
    2024:	4820      	ldr	r0, [pc, #128]	; (20a8 <hci_cmd_done+0xb8>)
    2026:	f7fe ffb1 	bl	f8c <printk>
}
    202a:	b006      	add	sp, #24
    202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    2030:	4628      	mov	r0, r5
    2032:	f010 fd8f 	bl	12b54 <net_buf_id>
    2036:	4c1d      	ldr	r4, [pc, #116]	; (20ac <hci_cmd_done+0xbc>)
    2038:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    203c:	8843      	ldrh	r3, [r0, #2]
    203e:	42b3      	cmp	r3, r6
    2040:	d010      	beq.n	2064 <hci_cmd_done+0x74>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    2042:	4628      	mov	r0, r5
    2044:	f010 fd86 	bl	12b54 <net_buf_id>
    2048:	4b13      	ldr	r3, [pc, #76]	; (2098 <hci_cmd_done+0xa8>)
    204a:	9303      	str	r3, [sp, #12]
    204c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2050:	4914      	ldr	r1, [pc, #80]	; (20a4 <hci_cmd_done+0xb4>)
    2052:	8842      	ldrh	r2, [r0, #2]
    2054:	9202      	str	r2, [sp, #8]
    2056:	e88d 0048 	stmia.w	sp, {r3, r6}
    205a:	4a11      	ldr	r2, [pc, #68]	; (20a0 <hci_cmd_done+0xb0>)
    205c:	4b0f      	ldr	r3, [pc, #60]	; (209c <hci_cmd_done+0xac>)
    205e:	4814      	ldr	r0, [pc, #80]	; (20b0 <hci_cmd_done+0xc0>)
    2060:	f7fe ff94 	bl	f8c <printk>
	if (cmd(buf)->sync) {
    2064:	4628      	mov	r0, r5
    2066:	f010 fd75 	bl	12b54 <net_buf_id>
    206a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    206e:	6843      	ldr	r3, [r0, #4]
    2070:	2b00      	cmp	r3, #0
    2072:	d0da      	beq.n	202a <hci_cmd_done+0x3a>
		cmd(buf)->status = status;
    2074:	4628      	mov	r0, r5
    2076:	f010 fd6d 	bl	12b54 <net_buf_id>
    207a:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    207e:	4628      	mov	r0, r5
    2080:	f010 fd68 	bl	12b54 <net_buf_id>
    2084:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2088:	6840      	ldr	r0, [r0, #4]
}
    208a:	b006      	add	sp, #24
    208c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2090:	f011 beb5 	b.w	13dfe <_impl_k_sem_give>
    2094:	20003f74 	.word	0x20003f74
    2098:	0001496d 	.word	0x0001496d
    209c:	00014f8a 	.word	0x00014f8a
    20a0:	00015704 	.word	0x00015704
    20a4:	0001570b 	.word	0x0001570b
    20a8:	0001570e 	.word	0x0001570e
    20ac:	2000027c 	.word	0x2000027c
    20b0:	00015753 	.word	0x00015753

000020b4 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    20b4:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20b6:	f3bf 8f5b 	dmb	ish
    20ba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    20be:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    20c2:	f001 011f 	and.w	r1, r1, #31
    20c6:	4108      	asrs	r0, r1
}
    20c8:	f000 0001 	and.w	r0, r0, #1
    20cc:	4770      	bx	lr
	...

000020d0 <bt_hci_cmd_create>:
{
    20d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20d4:	4680      	mov	r8, r0
    20d6:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    20d8:	4813      	ldr	r0, [pc, #76]	; (2128 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    20da:	4d14      	ldr	r5, [pc, #80]	; (212c <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    20dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    20e0:	f010 fdc6 	bl	12c70 <net_buf_alloc_fixed>
    20e4:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    20e6:	f100 0608 	add.w	r6, r0, #8
    20ea:	2100      	movs	r1, #0
    20ec:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    20ee:	2700      	movs	r7, #0
    20f0:	f010 fddd 	bl	12cae <net_buf_simple_reserve>
    20f4:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    20f6:	4620      	mov	r0, r4
    20f8:	f010 fd2c 	bl	12b54 <net_buf_id>
    20fc:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2100:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    2104:	4620      	mov	r0, r4
    2106:	f010 fd25 	bl	12b54 <net_buf_id>
    210a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    210e:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    2110:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    2112:	4630      	mov	r0, r6
    2114:	f010 fe0e 	bl	12d34 <net_buf_simple_add>
	hdr->param_len = param_len;
    2118:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    211c:	f8a0 8000 	strh.w	r8, [r0]
}
    2120:	4620      	mov	r0, r4
    2122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2126:	bf00      	nop
    2128:	20003f74 	.word	0x20003f74
    212c:	2000027c 	.word	0x2000027c

00002130 <bt_hci_cmd_send_sync>:
{
    2130:	b570      	push	{r4, r5, r6, lr}
    2132:	4615      	mov	r5, r2
    2134:	b086      	sub	sp, #24
	if (!buf) {
    2136:	460c      	mov	r4, r1
    2138:	b919      	cbnz	r1, 2142 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    213a:	f7ff ffc9 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    213e:	4604      	mov	r4, r0
    2140:	b368      	cbz	r0, 219e <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2142:	2201      	movs	r2, #1
    2144:	2100      	movs	r1, #0
    2146:	4668      	mov	r0, sp
    2148:	f011 fe50 	bl	13dec <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    214c:	4620      	mov	r0, r4
    214e:	f010 fd01 	bl	12b54 <net_buf_id>
    2152:	4e14      	ldr	r6, [pc, #80]	; (21a4 <bt_hci_cmd_send_sync+0x74>)
    2154:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    2158:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    215c:	4620      	mov	r0, r4
    215e:	f010 fde5 	bl	12d2c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2162:	4621      	mov	r1, r4
    2164:	4810      	ldr	r0, [pc, #64]	; (21a8 <bt_hci_cmd_send_sync+0x78>)
    2166:	f010 fda6 	bl	12cb6 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    216a:	f242 7110 	movw	r1, #10000	; 0x2710
    216e:	4668      	mov	r0, sp
    2170:	f011 fe6d 	bl	13e4e <_impl_k_sem_take>
	if (cmd(buf)->status) {
    2174:	4620      	mov	r0, r4
    2176:	f010 fced 	bl	12b54 <net_buf_id>
    217a:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    217e:	b130      	cbz	r0, 218e <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    2180:	4620      	mov	r0, r4
    2182:	f010 fda5 	bl	12cd0 <net_buf_unref>
		err = -EIO;
    2186:	f06f 0004 	mvn.w	r0, #4
}
    218a:	b006      	add	sp, #24
    218c:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    218e:	b10d      	cbz	r5, 2194 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    2190:	602c      	str	r4, [r5, #0]
    2192:	e7fa      	b.n	218a <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    2194:	4620      	mov	r0, r4
    2196:	f010 fd9b 	bl	12cd0 <net_buf_unref>
		err = 0;
    219a:	4628      	mov	r0, r5
    219c:	e7f5      	b.n	218a <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    219e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    21a2:	e7f2      	b.n	218a <bt_hci_cmd_send_sync+0x5a>
    21a4:	2000027c 	.word	0x2000027c
    21a8:	20003b2c 	.word	0x20003b2c

000021ac <set_le_scan_enable>:
{
    21ac:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    21ae:	2102      	movs	r1, #2
{
    21b0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    21b2:	f242 000c 	movw	r0, #8204	; 0x200c
    21b6:	f7ff ff8b 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    21ba:	4604      	mov	r4, r0
    21bc:	b330      	cbz	r0, 220c <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    21be:	2102      	movs	r1, #2
    21c0:	3008      	adds	r0, #8
    21c2:	f010 fdb7 	bl	12d34 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21c6:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    21c8:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21ca:	d116      	bne.n	21fa <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    21cc:	210b      	movs	r1, #11
    21ce:	4811      	ldr	r0, [pc, #68]	; (2214 <set_le_scan_enable+0x68>)
    21d0:	f7ff ff70 	bl	20b4 <atomic_test_bit>
    21d4:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    21d6:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    21d8:	4621      	mov	r1, r4
    21da:	2200      	movs	r2, #0
    21dc:	f242 000c 	movw	r0, #8204	; 0x200c
    21e0:	f7ff ffa6 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    21e4:	4604      	mov	r4, r0
    21e6:	b930      	cbnz	r0, 21f6 <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21e8:	2d01      	cmp	r5, #1
    21ea:	d109      	bne.n	2200 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    21ec:	f44f 7180 	mov.w	r1, #256	; 0x100
    21f0:	4808      	ldr	r0, [pc, #32]	; (2214 <set_le_scan_enable+0x68>)
    21f2:	f7ff fecc 	bl	1f8e <atomic_or>
}
    21f6:	4620      	mov	r0, r4
    21f8:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    21fa:	2300      	movs	r3, #0
    21fc:	7043      	strb	r3, [r0, #1]
    21fe:	e7ea      	b.n	21d6 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2200:	f46f 7180 	mvn.w	r1, #256	; 0x100
    2204:	4803      	ldr	r0, [pc, #12]	; (2214 <set_le_scan_enable+0x68>)
    2206:	f7ff fed3 	bl	1fb0 <atomic_and>
    220a:	e7f4      	b.n	21f6 <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    220c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2210:	e7f1      	b.n	21f6 <set_le_scan_enable+0x4a>
    2212:	bf00      	nop
    2214:	20003ad8 	.word	0x20003ad8

00002218 <set_random_address>:
{
    2218:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    221a:	4d15      	ldr	r5, [pc, #84]	; (2270 <set_random_address+0x58>)
    221c:	2206      	movs	r2, #6
    221e:	f105 0108 	add.w	r1, r5, #8
    2222:	4606      	mov	r6, r0
    2224:	f7ff fcd5 	bl	1bd2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2228:	4604      	mov	r4, r0
    222a:	b1d8      	cbz	r0, 2264 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    222c:	2106      	movs	r1, #6
    222e:	f242 0005 	movw	r0, #8197	; 0x2005
    2232:	f7ff ff4d 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2236:	4604      	mov	r4, r0
    2238:	b1b0      	cbz	r0, 2268 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    223a:	2206      	movs	r2, #6
    223c:	4631      	mov	r1, r6
    223e:	3008      	adds	r0, #8
    2240:	f010 fd7e 	bl	12d40 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2244:	4621      	mov	r1, r4
    2246:	2200      	movs	r2, #0
    2248:	f242 0005 	movw	r0, #8197	; 0x2005
    224c:	f7ff ff70 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2250:	4604      	mov	r4, r0
    2252:	b938      	cbnz	r0, 2264 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    2254:	2206      	movs	r2, #6
    2256:	4631      	mov	r1, r6
    2258:	f105 0008 	add.w	r0, r5, #8
    225c:	f7ff fcce 	bl	1bfc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2260:	2301      	movs	r3, #1
    2262:	71eb      	strb	r3, [r5, #7]
}
    2264:	4620      	mov	r0, r4
    2266:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2268:	f06f 0436 	mvn.w	r4, #54	; 0x36
    226c:	e7fa      	b.n	2264 <set_random_address+0x4c>
    226e:	bf00      	nop
    2270:	20003a68 	.word	0x20003a68

00002274 <set_advertise_enable>:
{
    2274:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2276:	2101      	movs	r1, #1
{
    2278:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    227a:	f242 000a 	movw	r0, #8202	; 0x200a
    227e:	f7ff ff27 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2282:	4604      	mov	r4, r0
    2284:	b1d8      	cbz	r0, 22be <set_advertise_enable+0x4a>
    2286:	3008      	adds	r0, #8
	if (enable) {
    2288:	b18d      	cbz	r5, 22ae <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    228a:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    228c:	f010 fd61 	bl	12d52 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    2290:	4621      	mov	r1, r4
    2292:	2200      	movs	r2, #0
    2294:	f242 000a 	movw	r0, #8202	; 0x200a
    2298:	f7ff ff4a 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    229c:	4604      	mov	r4, r0
    229e:	b920      	cbnz	r0, 22aa <set_advertise_enable+0x36>
	if (enable) {
    22a0:	b13d      	cbz	r5, 22b2 <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    22a2:	2140      	movs	r1, #64	; 0x40
    22a4:	4807      	ldr	r0, [pc, #28]	; (22c4 <set_advertise_enable+0x50>)
    22a6:	f7ff fe72 	bl	1f8e <atomic_or>
}
    22aa:	4620      	mov	r0, r4
    22ac:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    22ae:	4629      	mov	r1, r5
    22b0:	e7ec      	b.n	228c <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    22b2:	f06f 0140 	mvn.w	r1, #64	; 0x40
    22b6:	4803      	ldr	r0, [pc, #12]	; (22c4 <set_advertise_enable+0x50>)
    22b8:	f7ff fe7a 	bl	1fb0 <atomic_and>
    22bc:	e7f5      	b.n	22aa <set_advertise_enable+0x36>
		return -ENOBUFS;
    22be:	f06f 0436 	mvn.w	r4, #54	; 0x36
    22c2:	e7f2      	b.n	22aa <set_advertise_enable+0x36>
    22c4:	20003ad8 	.word	0x20003ad8

000022c8 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    22c8:	8802      	ldrh	r2, [r0, #0]
    22ca:	8843      	ldrh	r3, [r0, #2]
    22cc:	429a      	cmp	r2, r3
{
    22ce:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    22d0:	d818      	bhi.n	2304 <bt_le_conn_params_valid+0x3c>
    22d2:	2a05      	cmp	r2, #5
    22d4:	d916      	bls.n	2304 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    22d6:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    22da:	d813      	bhi.n	2304 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    22dc:	8884      	ldrh	r4, [r0, #4]
    22de:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    22e2:	d20f      	bcs.n	2304 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    22e4:	88c1      	ldrh	r1, [r0, #6]
    22e6:	f1a1 020a 	sub.w	r2, r1, #10
    22ea:	b292      	uxth	r2, r2
    22ec:	f640 4076 	movw	r0, #3190	; 0xc76
    22f0:	4282      	cmp	r2, r0
    22f2:	d807      	bhi.n	2304 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    22f4:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    22f8:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    22fc:	bfb4      	ite	lt
    22fe:	2001      	movlt	r0, #1
    2300:	2000      	movge	r0, #0
    2302:	bd10      	pop	{r4, pc}
		return false;
    2304:	2000      	movs	r0, #0
}
    2306:	bd10      	pop	{r4, pc}

00002308 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    2308:	2301      	movs	r3, #1
{
    230a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    230c:	2106      	movs	r1, #6
{
    230e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    2310:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2314:	f005 fe74 	bl	8000 <bt_rand>
	if (err) {
    2318:	b918      	cbnz	r0, 2322 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    231a:	79a3      	ldrb	r3, [r4, #6]
    231c:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2320:	71a3      	strb	r3, [r4, #6]
}
    2322:	bd10      	pop	{r4, pc}

00002324 <bt_set_static_addr>:
{
    2324:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2326:	4c11      	ldr	r4, [pc, #68]	; (236c <bt_set_static_addr+0x48>)
    2328:	7823      	ldrb	r3, [r4, #0]
    232a:	2b01      	cmp	r3, #1
    232c:	d104      	bne.n	2338 <bt_set_static_addr+0x14>
    232e:	79a3      	ldrb	r3, [r4, #6]
    2330:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2334:	2bc0      	cmp	r3, #192	; 0xc0
    2336:	d00d      	beq.n	2354 <bt_set_static_addr+0x30>
		BT_ERR("Only static random address supported as identity");
    2338:	4b0d      	ldr	r3, [pc, #52]	; (2370 <bt_set_static_addr+0x4c>)
    233a:	9301      	str	r3, [sp, #4]
    233c:	9300      	str	r3, [sp, #0]
    233e:	4a0d      	ldr	r2, [pc, #52]	; (2374 <bt_set_static_addr+0x50>)
    2340:	4b0d      	ldr	r3, [pc, #52]	; (2378 <bt_set_static_addr+0x54>)
    2342:	490e      	ldr	r1, [pc, #56]	; (237c <bt_set_static_addr+0x58>)
    2344:	480e      	ldr	r0, [pc, #56]	; (2380 <bt_set_static_addr+0x5c>)
    2346:	f7fe fe21 	bl	f8c <printk>
    234a:	f06f 0515 	mvn.w	r5, #21
}
    234e:	4628      	mov	r0, r5
    2350:	b003      	add	sp, #12
    2352:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    2354:	1c60      	adds	r0, r4, #1
    2356:	f7ff ff5f 	bl	2218 <set_random_address>
	if (err) {
    235a:	4605      	mov	r5, r0
    235c:	2800      	cmp	r0, #0
    235e:	d1f6      	bne.n	234e <bt_set_static_addr+0x2a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2360:	2104      	movs	r1, #4
    2362:	f104 0070 	add.w	r0, r4, #112	; 0x70
    2366:	f7ff fe12 	bl	1f8e <atomic_or>
	return 0;
    236a:	e7f0      	b.n	234e <bt_set_static_addr+0x2a>
    236c:	20003a68 	.word	0x20003a68
    2370:	0001496d 	.word	0x0001496d
    2374:	000156bc 	.word	0x000156bc
    2378:	00014fe1 	.word	0x00014fe1
    237c:	0001570b 	.word	0x0001570b
    2380:	000156c3 	.word	0x000156c3

00002384 <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    2384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    2388:	4d1d      	ldr	r5, [pc, #116]	; (2400 <bt_dev_show_info+0x7c>)
    238a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 241c <bt_dev_show_info+0x98>
    238e:	4f1d      	ldr	r7, [pc, #116]	; (2404 <bt_dev_show_info+0x80>)
    2390:	4e1d      	ldr	r6, [pc, #116]	; (2408 <bt_dev_show_info+0x84>)
    2392:	4c1e      	ldr	r4, [pc, #120]	; (240c <bt_dev_show_info+0x88>)
{
    2394:	b087      	sub	sp, #28
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    2396:	4628      	mov	r0, r5
    2398:	f7ff fcdc 	bl	1d54 <bt_addr_le_str>
    239c:	4643      	mov	r3, r8
    239e:	463a      	mov	r2, r7
    23a0:	4631      	mov	r1, r6
    23a2:	9001      	str	r0, [sp, #4]
    23a4:	9402      	str	r4, [sp, #8]
    23a6:	9400      	str	r4, [sp, #0]
    23a8:	4819      	ldr	r0, [pc, #100]	; (2410 <bt_dev_show_info+0x8c>)
    23aa:	f7fe fdef 	bl	f8c <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    23ae:	f895 900e 	ldrb.w	r9, [r5, #14]
    23b2:	4648      	mov	r0, r9
    23b4:	f7ff fdcc 	bl	1f50 <ver_str>
    23b8:	8aab      	ldrh	r3, [r5, #20]
    23ba:	9304      	str	r3, [sp, #16]
    23bc:	8a2b      	ldrh	r3, [r5, #16]
    23be:	9303      	str	r3, [sp, #12]
    23c0:	463a      	mov	r2, r7
    23c2:	4643      	mov	r3, r8
    23c4:	4631      	mov	r1, r6
    23c6:	f8cd 9008 	str.w	r9, [sp, #8]
    23ca:	9001      	str	r0, [sp, #4]
    23cc:	9405      	str	r4, [sp, #20]
    23ce:	9400      	str	r4, [sp, #0]
    23d0:	4810      	ldr	r0, [pc, #64]	; (2414 <bt_dev_show_info+0x90>)
    23d2:	f7fe fddb 	bl	f8c <printk>
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    23d6:	f895 900f 	ldrb.w	r9, [r5, #15]
    23da:	4648      	mov	r0, r9
    23dc:	f7ff fdb8 	bl	1f50 <ver_str>
    23e0:	8a6b      	ldrh	r3, [r5, #18]
    23e2:	9303      	str	r3, [sp, #12]
    23e4:	9001      	str	r0, [sp, #4]
    23e6:	9404      	str	r4, [sp, #16]
    23e8:	f8cd 9008 	str.w	r9, [sp, #8]
    23ec:	9400      	str	r4, [sp, #0]
    23ee:	4643      	mov	r3, r8
    23f0:	463a      	mov	r2, r7
    23f2:	4631      	mov	r1, r6
    23f4:	4808      	ldr	r0, [pc, #32]	; (2418 <bt_dev_show_info+0x94>)
    23f6:	f7fe fdc9 	bl	f8c <printk>
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    23fa:	b007      	add	sp, #28
    23fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2400:	20003a68 	.word	0x20003a68
    2404:	00015047 	.word	0x00015047
    2408:	0001570b 	.word	0x0001570b
    240c:	0001496d 	.word	0x0001496d
    2410:	0001504e 	.word	0x0001504e
    2414:	0001506b 	.word	0x0001506b
    2418:	000150b9 	.word	0x000150b9
    241c:	00015002 	.word	0x00015002

00002420 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2420:	4b02      	ldr	r3, [pc, #8]	; (242c <bt_send+0xc>)
    2422:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    2426:	691b      	ldr	r3, [r3, #16]
    2428:	4718      	bx	r3
    242a:	bf00      	nop
    242c:	20003a68 	.word	0x20003a68

00002430 <bt_hci_cmd_send>:
{
    2430:	b530      	push	{r4, r5, lr}
    2432:	4604      	mov	r4, r0
    2434:	b085      	sub	sp, #20
	if (!buf) {
    2436:	460d      	mov	r5, r1
    2438:	b919      	cbnz	r1, 2442 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    243a:	f7ff fe49 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    243e:	4605      	mov	r5, r0
    2440:	b1f0      	cbz	r0, 2480 <bt_hci_cmd_send+0x50>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2442:	f640 4335 	movw	r3, #3125	; 0xc35
    2446:	429c      	cmp	r4, r3
    2448:	d114      	bne.n	2474 <bt_hci_cmd_send+0x44>
		err = bt_send(buf);
    244a:	4628      	mov	r0, r5
    244c:	f7ff ffe8 	bl	2420 <bt_send>
		if (err) {
    2450:	4604      	mov	r4, r0
    2452:	b160      	cbz	r0, 246e <bt_hci_cmd_send+0x3e>
			BT_ERR("Unable to send to driver (err %d)", err);
    2454:	4b0c      	ldr	r3, [pc, #48]	; (2488 <bt_hci_cmd_send+0x58>)
    2456:	9302      	str	r3, [sp, #8]
    2458:	e88d 0018 	stmia.w	sp, {r3, r4}
    245c:	4a0b      	ldr	r2, [pc, #44]	; (248c <bt_hci_cmd_send+0x5c>)
    245e:	4b0c      	ldr	r3, [pc, #48]	; (2490 <bt_hci_cmd_send+0x60>)
    2460:	490c      	ldr	r1, [pc, #48]	; (2494 <bt_hci_cmd_send+0x64>)
    2462:	480d      	ldr	r0, [pc, #52]	; (2498 <bt_hci_cmd_send+0x68>)
    2464:	f7fe fd92 	bl	f8c <printk>
			net_buf_unref(buf);
    2468:	4628      	mov	r0, r5
    246a:	f010 fc31 	bl	12cd0 <net_buf_unref>
}
    246e:	4620      	mov	r0, r4
    2470:	b005      	add	sp, #20
    2472:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2474:	4629      	mov	r1, r5
    2476:	4809      	ldr	r0, [pc, #36]	; (249c <bt_hci_cmd_send+0x6c>)
    2478:	f010 fc1d 	bl	12cb6 <net_buf_put>
	return 0;
    247c:	2400      	movs	r4, #0
    247e:	e7f6      	b.n	246e <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    2480:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2484:	e7f3      	b.n	246e <bt_hci_cmd_send+0x3e>
    2486:	bf00      	nop
    2488:	0001496d 	.word	0x0001496d
    248c:	000156bc 	.word	0x000156bc
    2490:	00014ec2 	.word	0x00014ec2
    2494:	0001570b 	.word	0x0001570b
    2498:	00015145 	.word	0x00015145
    249c:	20003b2c 	.word	0x20003b2c

000024a0 <start_le_scan>:
{
    24a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    24a2:	460d      	mov	r5, r1
    24a4:	4614      	mov	r4, r2
    24a6:	4606      	mov	r6, r0
	memset(&set_param, 0, sizeof(set_param));
    24a8:	2207      	movs	r2, #7
    24aa:	2100      	movs	r1, #0
    24ac:	4668      	mov	r0, sp
    24ae:	f7ff fbd1 	bl	1c54 <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    24b2:	f8ad 5001 	strh.w	r5, [sp, #1]
		set_param.addr_type =  bt_dev.id_addr.type;
    24b6:	4d1b      	ldr	r5, [pc, #108]	; (2524 <start_le_scan+0x84>)
	set_param.window = sys_cpu_to_le16(window);
    24b8:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.filter_policy = 0x00;
    24bc:	2300      	movs	r3, #0
    24be:	f88d 3006 	strb.w	r3, [sp, #6]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    24c2:	2107      	movs	r1, #7
		set_param.addr_type =  bt_dev.id_addr.type;
    24c4:	782b      	ldrb	r3, [r5, #0]
	set_param.scan_type = scan_type;
    24c6:	f88d 6000 	strb.w	r6, [sp]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    24ca:	f242 000b 	movw	r0, #8203	; 0x200b
		set_param.addr_type =  bt_dev.id_addr.type;
    24ce:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    24d2:	f7ff fdfd 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    24d6:	4604      	mov	r4, r0
    24d8:	b300      	cbz	r0, 251c <start_le_scan+0x7c>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    24da:	2207      	movs	r2, #7
    24dc:	4669      	mov	r1, sp
    24de:	3008      	adds	r0, #8
    24e0:	f010 fc2e 	bl	12d40 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    24e4:	4621      	mov	r1, r4
    24e6:	f242 000b 	movw	r0, #8203	; 0x200b
    24ea:	f7ff ffa1 	bl	2430 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    24ee:	2001      	movs	r0, #1
    24f0:	f7ff fe5c 	bl	21ac <set_le_scan_enable>
	if (err) {
    24f4:	4604      	mov	r4, r0
    24f6:	b938      	cbnz	r0, 2508 <start_le_scan+0x68>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    24f8:	2e01      	cmp	r6, #1
    24fa:	d108      	bne.n	250e <start_le_scan+0x6e>
    24fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2500:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2504:	f7ff fd43 	bl	1f8e <atomic_or>
}
    2508:	4620      	mov	r0, r4
    250a:	b002      	add	sp, #8
    250c:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    250e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    2512:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2516:	f7ff fd4b 	bl	1fb0 <atomic_and>
    251a:	e7f5      	b.n	2508 <start_le_scan+0x68>
		return -ENOBUFS;
    251c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2520:	e7f2      	b.n	2508 <start_le_scan+0x68>
    2522:	bf00      	nop
    2524:	20003a68 	.word	0x20003a68

00002528 <bt_le_scan_update>:
{
    2528:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    252a:	2109      	movs	r1, #9
{
    252c:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    252e:	4816      	ldr	r0, [pc, #88]	; (2588 <bt_le_scan_update+0x60>)
    2530:	f7ff fdc0 	bl	20b4 <atomic_test_bit>
    2534:	4602      	mov	r2, r0
    2536:	b108      	cbz	r0, 253c <bt_le_scan_update+0x14>
		return 0;
    2538:	2000      	movs	r0, #0
    253a:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    253c:	2108      	movs	r1, #8
    253e:	4812      	ldr	r0, [pc, #72]	; (2588 <bt_le_scan_update+0x60>)
    2540:	f7ff fdb8 	bl	20b4 <atomic_test_bit>
    2544:	b9d0      	cbnz	r0, 257c <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    2546:	2101      	movs	r1, #1
    2548:	2000      	movs	r0, #0
    254a:	f001 fe25 	bl	4198 <bt_conn_lookup_state_le>
		if (!conn) {
    254e:	4604      	mov	r4, r0
    2550:	2800      	cmp	r0, #0
    2552:	d0f1      	beq.n	2538 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2554:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2558:	480b      	ldr	r0, [pc, #44]	; (2588 <bt_le_scan_update+0x60>)
    255a:	f7ff fd18 	bl	1f8e <atomic_or>
		bt_conn_unref(conn);
    255e:	4620      	mov	r0, r4
    2560:	f001 fe38 	bl	41d4 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    2564:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    2566:	bf15      	itete	ne
    2568:	2230      	movne	r2, #48	; 0x30
    256a:	2212      	moveq	r2, #18
    256c:	2160      	movne	r1, #96	; 0x60
    256e:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    2572:	2000      	movs	r0, #0
}
    2574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    2578:	f7ff bf92 	b.w	24a0 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    257c:	4610      	mov	r0, r2
    257e:	f7ff fe15 	bl	21ac <set_le_scan_enable>
		if (err) {
    2582:	2800      	cmp	r0, #0
    2584:	d0df      	beq.n	2546 <bt_le_scan_update+0x1e>
    2586:	bd38      	pop	{r3, r4, r5, pc}
    2588:	20003ad8 	.word	0x20003ad8

0000258c <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    258c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2590:	4d4d      	ldr	r5, [pc, #308]	; (26c8 <bt_init+0x13c>)
    2592:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    2596:	6899      	ldr	r1, [r3, #8]
    2598:	f011 0101 	ands.w	r1, r1, #1
{
    259c:	b08e      	sub	sp, #56	; 0x38
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    259e:	d124      	bne.n	25ea <bt_init+0x5e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    25a0:	aa0c      	add	r2, sp, #48	; 0x30
    25a2:	f640 4003 	movw	r0, #3075	; 0xc03
    25a6:	f7ff fdc3 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    25aa:	4604      	mov	r4, r0
    25ac:	2800      	cmp	r0, #0
    25ae:	f040 8087 	bne.w	26c0 <bt_init+0x134>
	u8_t status = buf->data[0];
    25b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    25b4:	689b      	ldr	r3, [r3, #8]
	if (status) {
    25b6:	781b      	ldrb	r3, [r3, #0]
    25b8:	b9a3      	cbnz	r3, 25e4 <bt_init+0x58>
	scan_dev_found_cb = NULL;
    25ba:	4a44      	ldr	r2, [pc, #272]	; (26cc <bt_init+0x140>)
    25bc:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    25be:	462b      	mov	r3, r5
    25c0:	f3bf 8f5b 	dmb	ish
    25c4:	f853 2f70 	ldr.w	r2, [r3, #112]!
    25c8:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    25cc:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    25d0:	f3bf 8f5b 	dmb	ish
    25d4:	e853 1f00 	ldrex	r1, [r3]
    25d8:	e843 2000 	strex	r0, r2, [r3]
    25dc:	2800      	cmp	r0, #0
    25de:	d1f9      	bne.n	25d4 <bt_init+0x48>
    25e0:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    25e4:	980c      	ldr	r0, [sp, #48]	; 0x30
    25e6:	f010 fb73 	bl	12cd0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    25ea:	aa0c      	add	r2, sp, #48	; 0x30
    25ec:	2100      	movs	r1, #0
    25ee:	f241 0003 	movw	r0, #4099	; 0x1003
    25f2:	f7ff fd9d 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    25f6:	4604      	mov	r4, r0
    25f8:	2800      	cmp	r0, #0
    25fa:	d161      	bne.n	26c0 <bt_init+0x134>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    25fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    25fe:	4834      	ldr	r0, [pc, #208]	; (26d0 <bt_init+0x144>)
    2600:	6899      	ldr	r1, [r3, #8]
    2602:	2208      	movs	r2, #8
    2604:	3101      	adds	r1, #1
    2606:	f7ff faf9 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    260a:	980c      	ldr	r0, [sp, #48]	; 0x30
    260c:	f010 fb60 	bl	12cd0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    2610:	4621      	mov	r1, r4
    2612:	aa0c      	add	r2, sp, #48	; 0x30
    2614:	f241 0001 	movw	r0, #4097	; 0x1001
    2618:	f7ff fd8a 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    261c:	4604      	mov	r4, r0
    261e:	2800      	cmp	r0, #0
    2620:	d14e      	bne.n	26c0 <bt_init+0x134>
	read_local_ver_complete(rsp);
    2622:	980c      	ldr	r0, [sp, #48]	; 0x30
    2624:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    2626:	785a      	ldrb	r2, [r3, #1]
    2628:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    262a:	78d9      	ldrb	r1, [r3, #3]
    262c:	789a      	ldrb	r2, [r3, #2]
    262e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2632:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2634:	791a      	ldrb	r2, [r3, #4]
    2636:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2638:	7a19      	ldrb	r1, [r3, #8]
    263a:	79da      	ldrb	r2, [r3, #7]
    263c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2640:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2642:	795a      	ldrb	r2, [r3, #5]
    2644:	799b      	ldrb	r3, [r3, #6]
    2646:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    264a:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    264c:	f010 fb40 	bl	12cd0 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    2650:	2103      	movs	r1, #3
    2652:	4820      	ldr	r0, [pc, #128]	; (26d4 <bt_init+0x148>)
    2654:	f7ff fd2e 	bl	20b4 <atomic_test_bit>
    2658:	4601      	mov	r1, r0
    265a:	b988      	cbnz	r0, 2680 <bt_init+0xf4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    265c:	aa0c      	add	r2, sp, #48	; 0x30
    265e:	f241 0009 	movw	r0, #4105	; 0x1009
    2662:	f7ff fd65 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    2666:	4604      	mov	r4, r0
    2668:	bb50      	cbnz	r0, 26c0 <bt_init+0x134>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    266a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    266c:	481a      	ldr	r0, [pc, #104]	; (26d8 <bt_init+0x14c>)
    266e:	6899      	ldr	r1, [r3, #8]
    2670:	2206      	movs	r2, #6
    2672:	3101      	adds	r1, #1
    2674:	f7ff fac2 	bl	1bfc <memcpy>
		net_buf_unref(rsp);
    2678:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    267a:	702c      	strb	r4, [r5, #0]
		net_buf_unref(rsp);
    267c:	f010 fb28 	bl	12cd0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2680:	aa0c      	add	r2, sp, #48	; 0x30
    2682:	2100      	movs	r1, #0
    2684:	f241 0002 	movw	r0, #4098	; 0x1002
    2688:	f7ff fd52 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    268c:	4604      	mov	r4, r0
    268e:	b9b8      	cbnz	r0, 26c0 <bt_init+0x134>
	memcpy(bt_dev.supported_commands, rp->commands,
    2690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2692:	4812      	ldr	r0, [pc, #72]	; (26dc <bt_init+0x150>)
    2694:	6899      	ldr	r1, [r3, #8]
    2696:	2240      	movs	r2, #64	; 0x40
    2698:	3101      	adds	r1, #1
    269a:	f7ff faaf 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    269e:	980c      	ldr	r0, [sp, #48]	; 0x30
    26a0:	f010 fb16 	bl	12cd0 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    26a4:	7eab      	ldrb	r3, [r5, #26]
    26a6:	065a      	lsls	r2, r3, #25
    26a8:	d424      	bmi.n	26f4 <bt_init+0x168>
		BT_ERR("Non-LE capable controller detected!");
    26aa:	4b0d      	ldr	r3, [pc, #52]	; (26e0 <bt_init+0x154>)
    26ac:	9301      	str	r3, [sp, #4]
    26ae:	9300      	str	r3, [sp, #0]
    26b0:	4a0c      	ldr	r2, [pc, #48]	; (26e4 <bt_init+0x158>)
    26b2:	4b0d      	ldr	r3, [pc, #52]	; (26e8 <bt_init+0x15c>)
    26b4:	490d      	ldr	r1, [pc, #52]	; (26ec <bt_init+0x160>)
    26b6:	480e      	ldr	r0, [pc, #56]	; (26f0 <bt_init+0x164>)
    26b8:	f7fe fc68 	bl	f8c <printk>
		return -ENODEV;
    26bc:	f06f 0412 	mvn.w	r4, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    26c0:	4620      	mov	r0, r4
    26c2:	b00e      	add	sp, #56	; 0x38
    26c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26c8:	20003a68 	.word	0x20003a68
    26cc:	200002d8 	.word	0x200002d8
    26d0:	20003a7e 	.word	0x20003a7e
    26d4:	20003ad8 	.word	0x20003ad8
    26d8:	20003a69 	.word	0x20003a69
    26dc:	20003a86 	.word	0x20003a86
    26e0:	0001496d 	.word	0x0001496d
    26e4:	000156bc 	.word	0x000156bc
    26e8:	00014fd9 	.word	0x00014fd9
    26ec:	0001570b 	.word	0x0001570b
    26f0:	00015177 	.word	0x00015177
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    26f4:	4621      	mov	r1, r4
    26f6:	aa0c      	add	r2, sp, #48	; 0x30
    26f8:	f242 0003 	movw	r0, #8195	; 0x2003
    26fc:	f7ff fd18 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2700:	4604      	mov	r4, r0
    2702:	2800      	cmp	r0, #0
    2704:	d1dc      	bne.n	26c0 <bt_init+0x134>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2708:	489b      	ldr	r0, [pc, #620]	; (2978 <bt_init+0x3ec>)
    270a:	6899      	ldr	r1, [r3, #8]
    270c:	2208      	movs	r2, #8
    270e:	3101      	adds	r1, #1
    2710:	f7ff fa74 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2714:	980c      	ldr	r0, [sp, #48]	; 0x30
    2716:	f010 fadb 	bl	12cd0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    271a:	4621      	mov	r1, r4
    271c:	aa0c      	add	r2, sp, #48	; 0x30
    271e:	f242 0002 	movw	r0, #8194	; 0x2002
    2722:	f7ff fd05 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2726:	4604      	mov	r4, r0
    2728:	2800      	cmp	r0, #0
    272a:	d1c9      	bne.n	26c0 <bt_init+0x134>
    272c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    272e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    2730:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    2734:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    2738:	b13a      	cbz	r2, 274a <bt_init+0x1be>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    273a:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    273c:	488f      	ldr	r0, [pc, #572]	; (297c <bt_init+0x3f0>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    273e:	2a02      	cmp	r2, #2
    2740:	bf28      	it	cs
    2742:	2202      	movcs	r2, #2
    2744:	4611      	mov	r1, r2
    2746:	f011 fb51 	bl	13dec <_impl_k_sem_init>
	net_buf_unref(rsp);
    274a:	980c      	ldr	r0, [sp, #48]	; 0x30
    274c:	f010 fac0 	bl	12cd0 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2750:	7eac      	ldrb	r4, [r5, #26]
    2752:	f014 0420 	ands.w	r4, r4, #32
    2756:	f000 80c7 	beq.w	28e8 <bt_init+0x35c>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    275a:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    275e:	071b      	lsls	r3, r3, #28
    2760:	d513      	bpl.n	278a <bt_init+0x1fe>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2762:	aa0c      	add	r2, sp, #48	; 0x30
    2764:	2100      	movs	r1, #0
    2766:	f242 001c 	movw	r0, #8220	; 0x201c
    276a:	f7ff fce1 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    276e:	4604      	mov	r4, r0
    2770:	2800      	cmp	r0, #0
    2772:	d1a5      	bne.n	26c0 <bt_init+0x134>
		le_read_supp_states_complete(rsp);
    2774:	980c      	ldr	r0, [sp, #48]	; 0x30
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2776:	6883      	ldr	r3, [r0, #8]
    2778:	f853 2f01 	ldr.w	r2, [r3, #1]!
    277c:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    277e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    2782:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    2786:	f010 faa3 	bl	12cd0 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    278a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    278e:	069f      	lsls	r7, r3, #26
    2790:	f100 80c6 	bmi.w	2920 <bt_init+0x394>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2794:	2108      	movs	r1, #8
    2796:	f242 0001 	movw	r0, #8193	; 0x2001
    279a:	f7ff fc99 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    279e:	4604      	mov	r4, r0
    27a0:	2800      	cmp	r0, #0
    27a2:	f000 80a8 	beq.w	28f6 <bt_init+0x36a>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    27a6:	2108      	movs	r1, #8
    27a8:	4408      	add	r0, r1
    27aa:	f010 fac3 	bl	12d34 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    27ae:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
    27b2:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    27b4:	bf4c      	ite	mi
    27b6:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    27b8:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    27ba:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    27bc:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    27c0:	bf48      	it	mi
    27c2:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    27c6:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    27ca:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    27ce:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    27d2:	bf18      	it	ne
    27d4:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    27d8:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    27da:	bf08      	it	eq
    27dc:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    27e0:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    27e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
    27e6:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    27e8:	2200      	movs	r2, #0
    27ea:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    27ec:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    27ee:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    27f0:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    27f2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    27f4:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    27f6:	4621      	mov	r1, r4
    27f8:	f242 0001 	movw	r0, #8193	; 0x2001
    27fc:	f7ff fc98 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2800:	4604      	mov	r4, r0
    2802:	2800      	cmp	r0, #0
    2804:	f47f af5c 	bne.w	26c0 <bt_init+0x134>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2808:	7eab      	ldrb	r3, [r5, #26]
    280a:	069a      	lsls	r2, r3, #26
    280c:	d421      	bmi.n	2852 <bt_init+0x2c6>
	if (bt_dev.le.mtu) {
    280e:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    2812:	b9f1      	cbnz	r1, 2852 <bt_init+0x2c6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2814:	aa0c      	add	r2, sp, #48	; 0x30
    2816:	f241 0005 	movw	r0, #4101	; 0x1005
    281a:	f7ff fc89 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    281e:	4604      	mov	r4, r0
    2820:	2800      	cmp	r0, #0
    2822:	f47f af4d 	bne.w	26c0 <bt_init+0x134>
	if (bt_dev.le.mtu) {
    2826:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    282a:	b97b      	cbnz	r3, 284c <bt_init+0x2c0>
    282c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    282e:	4853      	ldr	r0, [pc, #332]	; (297c <bt_init+0x3f0>)
    2830:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2832:	7899      	ldrb	r1, [r3, #2]
    2834:	785a      	ldrb	r2, [r3, #1]
    2836:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    283a:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    283e:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2840:	2a02      	cmp	r2, #2
    2842:	bf28      	it	cs
    2844:	2202      	movcs	r2, #2
    2846:	4611      	mov	r1, r2
    2848:	f011 fad0 	bl	13dec <_impl_k_sem_init>
	net_buf_unref(rsp);
    284c:	980c      	ldr	r0, [sp, #48]	; 0x30
    284e:	f010 fa3f 	bl	12cd0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2852:	2108      	movs	r1, #8
    2854:	f640 4001 	movw	r0, #3073	; 0xc01
    2858:	f7ff fc3a 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    285c:	4604      	mov	r4, r0
    285e:	2800      	cmp	r0, #0
    2860:	d049      	beq.n	28f6 <bt_init+0x36a>
	ev = net_buf_add(buf, sizeof(*ev));
    2862:	2108      	movs	r1, #8
    2864:	4408      	add	r0, r1
    2866:	f010 fa65 	bl	12d34 <net_buf_simple_add>
	dst[0] = val;
    286a:	2310      	movs	r3, #16
    286c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    286e:	2388      	movs	r3, #136	; 0x88
    2870:	7043      	strb	r3, [r0, #1]
    2872:	2302      	movs	r3, #2
	dst[0] = val;
    2874:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    2876:	70c3      	strb	r3, [r0, #3]
    2878:	2320      	movs	r3, #32
	dst[0] = val;
    287a:	7082      	strb	r2, [r0, #2]
    287c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    287e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2880:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2882:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2884:	4621      	mov	r1, r4
    2886:	f640 4001 	movw	r0, #3073	; 0xc01
    288a:	f7ff fc51 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    288e:	4604      	mov	r4, r0
    2890:	2800      	cmp	r0, #0
    2892:	f47f af15 	bne.w	26c0 <bt_init+0x134>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2896:	4601      	mov	r1, r0
    2898:	aa0c      	add	r2, sp, #48	; 0x30
    289a:	f64f 4001 	movw	r0, #64513	; 0xfc01
    289e:	f7ff fc47 	bl	2130 <bt_hci_cmd_send_sync>
    28a2:	4e37      	ldr	r6, [pc, #220]	; (2980 <bt_init+0x3f4>)
	if (err) {
    28a4:	2800      	cmp	r0, #0
    28a6:	d07b      	beq.n	29a0 <bt_init+0x414>
		BT_WARN("Vendor HCI extensions not available");
    28a8:	4b36      	ldr	r3, [pc, #216]	; (2984 <bt_init+0x3f8>)
    28aa:	4a37      	ldr	r2, [pc, #220]	; (2988 <bt_init+0x3fc>)
    28ac:	4937      	ldr	r1, [pc, #220]	; (298c <bt_init+0x400>)
    28ae:	4838      	ldr	r0, [pc, #224]	; (2990 <bt_init+0x404>)
    28b0:	9601      	str	r6, [sp, #4]
    28b2:	9600      	str	r6, [sp, #0]
		BT_WARN("Failed to read supported vendor commands");
    28b4:	f7fe fb6a 	bl	f8c <printk>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    28b8:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    28ba:	2207      	movs	r2, #7
    28bc:	a90c      	add	r1, sp, #48	; 0x30
    28be:	4835      	ldr	r0, [pc, #212]	; (2994 <bt_init+0x408>)
    28c0:	930c      	str	r3, [sp, #48]	; 0x30
    28c2:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    28c6:	f7ff f984 	bl	1bd2 <memcmp>
    28ca:	2800      	cmp	r0, #0
    28cc:	f040 80e2 	bne.w	2a94 <bt_init+0x508>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    28d0:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    28d4:	07db      	lsls	r3, r3, #31
    28d6:	f100 80fe 	bmi.w	2ad6 <bt_init+0x54a>
		BT_WARN("Read Static Addresses command not available");
    28da:	9601      	str	r6, [sp, #4]
    28dc:	9600      	str	r6, [sp, #0]
    28de:	4b2e      	ldr	r3, [pc, #184]	; (2998 <bt_init+0x40c>)
    28e0:	4a29      	ldr	r2, [pc, #164]	; (2988 <bt_init+0x3fc>)
    28e2:	492a      	ldr	r1, [pc, #168]	; (298c <bt_init+0x400>)
    28e4:	482d      	ldr	r0, [pc, #180]	; (299c <bt_init+0x410>)
    28e6:	e103      	b.n	2af0 <bt_init+0x564>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    28e8:	2102      	movs	r1, #2
    28ea:	f640 406d 	movw	r0, #3181	; 0xc6d
    28ee:	f7ff fbef 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    28f2:	4606      	mov	r6, r0
    28f4:	b910      	cbnz	r0, 28fc <bt_init+0x370>
		return -ENOBUFS;
    28f6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    28fa:	e6e1      	b.n	26c0 <bt_init+0x134>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    28fc:	2102      	movs	r1, #2
    28fe:	3008      	adds	r0, #8
    2900:	f010 fa18 	bl	12d34 <net_buf_simple_add>
		cp_le->le = 0x01;
    2904:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2906:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2908:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    290a:	4622      	mov	r2, r4
    290c:	4631      	mov	r1, r6
    290e:	f640 406d 	movw	r0, #3181	; 0xc6d
    2912:	f7ff fc0d 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    2916:	4604      	mov	r4, r0
    2918:	2800      	cmp	r0, #0
    291a:	f43f af1e 	beq.w	275a <bt_init+0x1ce>
    291e:	e6cf      	b.n	26c0 <bt_init+0x134>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2920:	aa0c      	add	r2, sp, #48	; 0x30
    2922:	2100      	movs	r1, #0
    2924:	f242 002f 	movw	r0, #8239	; 0x202f
    2928:	f7ff fc02 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    292c:	4604      	mov	r4, r0
    292e:	2800      	cmp	r0, #0
    2930:	f47f aec6 	bne.w	26c0 <bt_init+0x134>
		rp = (void *)rsp->data;
    2934:	980c      	ldr	r0, [sp, #48]	; 0x30
    2936:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2938:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    293c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    2940:	f010 f9c6 	bl	12cd0 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2944:	2104      	movs	r1, #4
    2946:	f242 0024 	movw	r0, #8228	; 0x2024
    294a:	f7ff fbc1 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    294e:	4606      	mov	r6, r0
    2950:	2800      	cmp	r0, #0
    2952:	d0d0      	beq.n	28f6 <bt_init+0x36a>
		cp = net_buf_add(buf, sizeof(*cp));
    2954:	2104      	movs	r1, #4
    2956:	3008      	adds	r0, #8
    2958:	f010 f9ec 	bl	12d34 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    295c:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    295e:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2962:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2964:	4631      	mov	r1, r6
    2966:	f242 0024 	movw	r0, #8228	; 0x2024
    296a:	f7ff fbe1 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    296e:	4604      	mov	r4, r0
    2970:	2800      	cmp	r0, #0
    2972:	f43f af0f 	beq.w	2794 <bt_init+0x208>
    2976:	e6a3      	b.n	26c0 <bt_init+0x134>
    2978:	20003ae0 	.word	0x20003ae0
    297c:	20003af4 	.word	0x20003af4
    2980:	0001496d 	.word	0x0001496d
    2984:	00015013 	.word	0x00015013
    2988:	00015704 	.word	0x00015704
    298c:	0001570b 	.word	0x0001570b
    2990:	000151ab 	.word	0x000151ab
    2994:	20003a68 	.word	0x20003a68
    2998:	00014ff4 	.word	0x00014ff4
    299c:	00015348 	.word	0x00015348
	rp.info = (void *)rsp->data;
    29a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    29a2:	4972      	ldr	r1, [pc, #456]	; (2b6c <bt_init+0x5e0>)
	rp.info = (void *)rsp->data;
    29a4:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    29a6:	4872      	ldr	r0, [pc, #456]	; (2b70 <bt_init+0x5e4>)
    29a8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    29ac:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    29ae:	2b03      	cmp	r3, #3
		return plat_str[platform];
    29b0:	bf96      	itet	ls
    29b2:	4a70      	ldrls	r2, [pc, #448]	; (2b74 <bt_init+0x5e8>)
	return "unknown";
    29b4:	4a70      	ldrhi	r2, [pc, #448]	; (2b78 <bt_init+0x5ec>)
		return plat_str[platform];
    29b6:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    29ba:	9201      	str	r2, [sp, #4]
    29bc:	4b6f      	ldr	r3, [pc, #444]	; (2b7c <bt_init+0x5f0>)
    29be:	4a70      	ldr	r2, [pc, #448]	; (2b80 <bt_init+0x5f4>)
    29c0:	9603      	str	r6, [sp, #12]
    29c2:	9600      	str	r6, [sp, #0]
    29c4:	f7fe fae2 	bl	f8c <printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    29c8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    29cc:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    29d0:	2b02      	cmp	r3, #2
    29d2:	d13a      	bne.n	2a4a <bt_init+0x4be>
	if (variant < ARRAY_SIZE(nordic_str)) {
    29d4:	2a02      	cmp	r2, #2
    29d6:	d838      	bhi.n	2a4a <bt_init+0x4be>
		return nordic_str[variant];
    29d8:	4b6a      	ldr	r3, [pc, #424]	; (2b84 <bt_init+0x5f8>)
    29da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    29de:	9202      	str	r2, [sp, #8]
    29e0:	9301      	str	r3, [sp, #4]
    29e2:	4a67      	ldr	r2, [pc, #412]	; (2b80 <bt_init+0x5f4>)
    29e4:	4b65      	ldr	r3, [pc, #404]	; (2b7c <bt_init+0x5f0>)
    29e6:	4961      	ldr	r1, [pc, #388]	; (2b6c <bt_init+0x5e0>)
    29e8:	9603      	str	r6, [sp, #12]
    29ea:	9600      	str	r6, [sp, #0]
    29ec:	4866      	ldr	r0, [pc, #408]	; (2b88 <bt_init+0x5fc>)
    29ee:	f7fe facd 	bl	f8c <printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    29f2:	7963      	ldrb	r3, [r4, #5]
    29f4:	9606      	str	r6, [sp, #24]
    29f6:	f8d4 1009 	ldr.w	r1, [r4, #9]
    29fa:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    29fc:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    29fe:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
    2a02:	bf98      	it	ls
    2a04:	4a61      	ldrls	r2, [pc, #388]	; (2b8c <bt_init+0x600>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a06:	9104      	str	r1, [sp, #16]
    2a08:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    2a0a:	bf94      	ite	ls
    2a0c:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2a10:	4a59      	ldrhi	r2, [pc, #356]	; (2b78 <bt_init+0x5ec>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a12:	9103      	str	r1, [sp, #12]
    2a14:	9302      	str	r3, [sp, #8]
    2a16:	4955      	ldr	r1, [pc, #340]	; (2b6c <bt_init+0x5e0>)
    2a18:	4b58      	ldr	r3, [pc, #352]	; (2b7c <bt_init+0x5f0>)
    2a1a:	9201      	str	r2, [sp, #4]
    2a1c:	9600      	str	r6, [sp, #0]
    2a1e:	4a58      	ldr	r2, [pc, #352]	; (2b80 <bt_init+0x5f4>)
    2a20:	485b      	ldr	r0, [pc, #364]	; (2b90 <bt_init+0x604>)
    2a22:	f7fe fab3 	bl	f8c <printk>
	net_buf_unref(rsp);
    2a26:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a28:	f010 f952 	bl	12cd0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2a2c:	aa0c      	add	r2, sp, #48	; 0x30
    2a2e:	2100      	movs	r1, #0
    2a30:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2a34:	f7ff fb7c 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2a38:	4604      	mov	r4, r0
    2a3a:	b140      	cbz	r0, 2a4e <bt_init+0x4c2>
		BT_WARN("Failed to read supported vendor features");
    2a3c:	9601      	str	r6, [sp, #4]
    2a3e:	9600      	str	r6, [sp, #0]
    2a40:	4b4e      	ldr	r3, [pc, #312]	; (2b7c <bt_init+0x5f0>)
    2a42:	4a54      	ldr	r2, [pc, #336]	; (2b94 <bt_init+0x608>)
    2a44:	4949      	ldr	r1, [pc, #292]	; (2b6c <bt_init+0x5e0>)
    2a46:	4854      	ldr	r0, [pc, #336]	; (2b98 <bt_init+0x60c>)
    2a48:	e734      	b.n	28b4 <bt_init+0x328>
		return "unknown";
    2a4a:	4b4b      	ldr	r3, [pc, #300]	; (2b78 <bt_init+0x5ec>)
    2a4c:	e7c7      	b.n	29de <bt_init+0x452>
	rp.cmds = (void *)rsp->data;
    2a4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2a50:	4852      	ldr	r0, [pc, #328]	; (2b9c <bt_init+0x610>)
    2a52:	6899      	ldr	r1, [r3, #8]
    2a54:	2202      	movs	r2, #2
    2a56:	3101      	adds	r1, #1
    2a58:	f7ff f8d0 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2a5c:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a5e:	f010 f937 	bl	12cd0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2a62:	aa0c      	add	r2, sp, #48	; 0x30
    2a64:	4621      	mov	r1, r4
    2a66:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2a6a:	f7ff fb61 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2a6e:	b130      	cbz	r0, 2a7e <bt_init+0x4f2>
		BT_WARN("Failed to read supported vendor commands");
    2a70:	9601      	str	r6, [sp, #4]
    2a72:	9600      	str	r6, [sp, #0]
    2a74:	4b41      	ldr	r3, [pc, #260]	; (2b7c <bt_init+0x5f0>)
    2a76:	4a47      	ldr	r2, [pc, #284]	; (2b94 <bt_init+0x608>)
    2a78:	493c      	ldr	r1, [pc, #240]	; (2b6c <bt_init+0x5e0>)
    2a7a:	4849      	ldr	r0, [pc, #292]	; (2ba0 <bt_init+0x614>)
    2a7c:	e71a      	b.n	28b4 <bt_init+0x328>
	rp.feat = (void *)rsp->data;
    2a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2a80:	4848      	ldr	r0, [pc, #288]	; (2ba4 <bt_init+0x618>)
    2a82:	6899      	ldr	r1, [r3, #8]
    2a84:	2201      	movs	r2, #1
    2a86:	4411      	add	r1, r2
    2a88:	f7ff f8b8 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2a8c:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a8e:	f010 f91f 	bl	12cd0 <net_buf_unref>
    2a92:	e711      	b.n	28b8 <bt_init+0x32c>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2a94:	4b44      	ldr	r3, [pc, #272]	; (2ba8 <bt_init+0x61c>)
    2a96:	6818      	ldr	r0, [r3, #0]
    2a98:	889a      	ldrh	r2, [r3, #4]
    2a9a:	900a      	str	r0, [sp, #40]	; 0x28
    2a9c:	799b      	ldrb	r3, [r3, #6]
    2a9e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    2aa2:	a90a      	add	r1, sp, #40	; 0x28
    2aa4:	2207      	movs	r2, #7
    2aa6:	4841      	ldr	r0, [pc, #260]	; (2bac <bt_init+0x620>)
    2aa8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    2aac:	f7ff f891 	bl	1bd2 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2ab0:	2800      	cmp	r0, #0
    2ab2:	f43f af0d 	beq.w	28d0 <bt_init+0x344>
		bt_dev_show_info();
    2ab6:	f7ff fc65 	bl	2384 <bt_dev_show_info>
		err = bt_conn_init();
    2aba:	f001 ffdb 	bl	4a74 <bt_conn_init>
		if (err) {
    2abe:	4604      	mov	r4, r0
    2ac0:	2800      	cmp	r0, #0
    2ac2:	f47f adfd 	bne.w	26c0 <bt_init+0x134>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2ac6:	2102      	movs	r1, #2
    2ac8:	4839      	ldr	r0, [pc, #228]	; (2bb0 <bt_init+0x624>)
    2aca:	f7ff fa60 	bl	1f8e <atomic_or>
	bt_le_scan_update(false);
    2ace:	4620      	mov	r0, r4
    2ad0:	f7ff fd2a 	bl	2528 <bt_le_scan_update>
    2ad4:	e5f4      	b.n	26c0 <bt_init+0x134>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2ad6:	aa09      	add	r2, sp, #36	; 0x24
    2ad8:	2100      	movs	r1, #0
    2ada:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2ade:	f7ff fb27 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    2ae2:	b140      	cbz	r0, 2af6 <bt_init+0x56a>
			BT_WARN("Failed to read static addresses");
    2ae4:	4b33      	ldr	r3, [pc, #204]	; (2bb4 <bt_init+0x628>)
    2ae6:	4a2b      	ldr	r2, [pc, #172]	; (2b94 <bt_init+0x608>)
    2ae8:	4920      	ldr	r1, [pc, #128]	; (2b6c <bt_init+0x5e0>)
    2aea:	4833      	ldr	r0, [pc, #204]	; (2bb8 <bt_init+0x62c>)
    2aec:	9601      	str	r6, [sp, #4]
    2aee:	9600      	str	r6, [sp, #0]
		BT_WARN("Read Static Addresses command not available");
    2af0:	f7fe fa4c 	bl	f8c <printk>
    2af4:	e026      	b.n	2b44 <bt_init+0x5b8>
		rp = (void *)rsp->data;
    2af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2af8:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2afa:	784b      	ldrb	r3, [r1, #1]
    2afc:	b1bb      	cbz	r3, 2b2e <bt_init+0x5a2>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2afe:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2b00:	2206      	movs	r2, #6
    2b02:	3102      	adds	r1, #2
    2b04:	482d      	ldr	r0, [pc, #180]	; (2bbc <bt_init+0x630>)
    2b06:	702b      	strb	r3, [r5, #0]
    2b08:	f7ff f878 	bl	1bfc <memcpy>
			net_buf_unref(rsp);
    2b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b0e:	f010 f8df 	bl	12cd0 <net_buf_unref>
		return bt_set_static_addr();
    2b12:	f7ff fc07 	bl	2324 <bt_set_static_addr>
    2b16:	4604      	mov	r4, r0
		if (err) {
    2b18:	2800      	cmp	r0, #0
    2b1a:	d0cc      	beq.n	2ab6 <bt_init+0x52a>
			BT_ERR("Unable to set identity address");
    2b1c:	9601      	str	r6, [sp, #4]
    2b1e:	9600      	str	r6, [sp, #0]
    2b20:	4b27      	ldr	r3, [pc, #156]	; (2bc0 <bt_init+0x634>)
    2b22:	4a28      	ldr	r2, [pc, #160]	; (2bc4 <bt_init+0x638>)
    2b24:	4911      	ldr	r1, [pc, #68]	; (2b6c <bt_init+0x5e0>)
    2b26:	4828      	ldr	r0, [pc, #160]	; (2bc8 <bt_init+0x63c>)
    2b28:	f7fe fa30 	bl	f8c <printk>
    2b2c:	e5c8      	b.n	26c0 <bt_init+0x134>
		BT_WARN("No static addresses stored in controller");
    2b2e:	9601      	str	r6, [sp, #4]
    2b30:	9600      	str	r6, [sp, #0]
    2b32:	4b20      	ldr	r3, [pc, #128]	; (2bb4 <bt_init+0x628>)
    2b34:	4a17      	ldr	r2, [pc, #92]	; (2b94 <bt_init+0x608>)
    2b36:	490d      	ldr	r1, [pc, #52]	; (2b6c <bt_init+0x5e0>)
    2b38:	4824      	ldr	r0, [pc, #144]	; (2bcc <bt_init+0x640>)
    2b3a:	f7fe fa27 	bl	f8c <printk>
		net_buf_unref(rsp);
    2b3e:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b40:	f010 f8c6 	bl	12cd0 <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2b44:	4819      	ldr	r0, [pc, #100]	; (2bac <bt_init+0x620>)
    2b46:	f7ff fbdf 	bl	2308 <bt_addr_le_create_static>
		if (err) {
    2b4a:	4604      	mov	r4, r0
    2b4c:	2800      	cmp	r0, #0
    2b4e:	d1e5      	bne.n	2b1c <bt_init+0x590>
		BT_WARN("Using temporary static random address %s",
    2b50:	481a      	ldr	r0, [pc, #104]	; (2bbc <bt_init+0x630>)
    2b52:	f7ff f8d9 	bl	1d08 <bt_addr_str>
    2b56:	9602      	str	r6, [sp, #8]
    2b58:	9001      	str	r0, [sp, #4]
    2b5a:	9600      	str	r6, [sp, #0]
    2b5c:	4b15      	ldr	r3, [pc, #84]	; (2bb4 <bt_init+0x628>)
    2b5e:	4a0d      	ldr	r2, [pc, #52]	; (2b94 <bt_init+0x608>)
    2b60:	4902      	ldr	r1, [pc, #8]	; (2b6c <bt_init+0x5e0>)
    2b62:	481b      	ldr	r0, [pc, #108]	; (2bd0 <bt_init+0x644>)
    2b64:	f7fe fa12 	bl	f8c <printk>
    2b68:	e7d3      	b.n	2b12 <bt_init+0x586>
    2b6a:	bf00      	nop
    2b6c:	0001570b 	.word	0x0001570b
    2b70:	000151df 	.word	0x000151df
    2b74:	000158a4 	.word	0x000158a4
    2b78:	00015994 	.word	0x00015994
    2b7c:	00015013 	.word	0x00015013
    2b80:	00015047 	.word	0x00015047
    2b84:	00015898 	.word	0x00015898
    2b88:	00015208 	.word	0x00015208
    2b8c:	00015984 	.word	0x00015984
    2b90:	00015230 	.word	0x00015230
    2b94:	00015704 	.word	0x00015704
    2b98:	0001526d 	.word	0x0001526d
    2b9c:	20003ac7 	.word	0x20003ac7
    2ba0:	000152a6 	.word	0x000152a6
    2ba4:	20003ac6 	.word	0x20003ac6
    2ba8:	000148b8 	.word	0x000148b8
    2bac:	20003a68 	.word	0x20003a68
    2bb0:	20003ad8 	.word	0x20003ad8
    2bb4:	00014ff4 	.word	0x00014ff4
    2bb8:	000152df 	.word	0x000152df
    2bbc:	20003a69 	.word	0x20003a69
    2bc0:	0001501f 	.word	0x0001501f
    2bc4:	000156bc 	.word	0x000156bc
    2bc8:	000153bd 	.word	0x000153bd
    2bcc:	0001530f 	.word	0x0001530f
    2bd0:	00015384 	.word	0x00015384

00002bd4 <init_work>:

static void init_work(struct k_work *work)
{
    2bd4:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    2bd6:	f7ff fcd9 	bl	258c <bt_init>
	if (ready_cb) {
    2bda:	4b03      	ldr	r3, [pc, #12]	; (2be8 <init_work+0x14>)
    2bdc:	681b      	ldr	r3, [r3, #0]
    2bde:	b113      	cbz	r3, 2be6 <init_work+0x12>
		ready_cb(err);
	}
}
    2be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2be4:	4718      	bx	r3
    2be6:	bd10      	pop	{r4, pc}
    2be8:	200002d4 	.word	0x200002d4

00002bec <hci_le_set_phy.isra.29>:
static int hci_le_set_phy(struct bt_conn *conn)
    2bec:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2bee:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    2bf0:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2bf2:	f242 0032 	movw	r0, #8242	; 0x2032
    2bf6:	f7ff fa6b 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2bfa:	4605      	mov	r5, r0
    2bfc:	b198      	cbz	r0, 2c26 <hci_le_set_phy.isra.29+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    2bfe:	2107      	movs	r1, #7
    2c00:	3008      	adds	r0, #8
    2c02:	f010 f897 	bl	12d34 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2c06:	8823      	ldrh	r3, [r4, #0]
    2c08:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    2c0a:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c0c:	2302      	movs	r3, #2
	cp->all_phys = 0;
    2c0e:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c10:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c12:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2c14:	7144      	strb	r4, [r0, #5]
    2c16:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    2c18:	4629      	mov	r1, r5
    2c1a:	f242 0032 	movw	r0, #8242	; 0x2032
    2c1e:	f7ff fc07 	bl	2430 <bt_hci_cmd_send>
	return 0;
    2c22:	4620      	mov	r0, r4
    2c24:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    2c26:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2c2a:	bd38      	pop	{r3, r4, r5, pc}

00002c2c <hci_le_set_data_len.isra.30>:
static int hci_le_set_data_len(struct bt_conn *conn)
    2c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2c2e:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    2c30:	aa01      	add	r2, sp, #4
    2c32:	2100      	movs	r1, #0
    2c34:	f242 002f 	movw	r0, #8239	; 0x202f
    2c38:	f7ff fa7a 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2c3c:	b9d8      	cbnz	r0, 2c76 <hci_le_set_data_len.isra.30+0x4a>
	rp = (void *)rsp->data;
    2c3e:	9801      	ldr	r0, [sp, #4]
    2c40:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2c42:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2c46:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    2c4a:	f010 f841 	bl	12cd0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    2c4e:	2106      	movs	r1, #6
    2c50:	f242 0022 	movw	r0, #8226	; 0x2022
    2c54:	f7ff fa3c 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2c58:	4604      	mov	r4, r0
    2c5a:	b170      	cbz	r0, 2c7a <hci_le_set_data_len.isra.30+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    2c5c:	2106      	movs	r1, #6
    2c5e:	3008      	adds	r0, #8
    2c60:	f010 f868 	bl	12d34 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2c64:	883b      	ldrh	r3, [r7, #0]
    2c66:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2c68:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2c6a:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2c6c:	4621      	mov	r1, r4
    2c6e:	f242 0022 	movw	r0, #8226	; 0x2022
    2c72:	f7ff fbdd 	bl	2430 <bt_hci_cmd_send>
}
    2c76:	b003      	add	sp, #12
    2c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    2c7a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2c7e:	e7fa      	b.n	2c76 <hci_le_set_data_len.isra.30+0x4a>

00002c80 <le_enh_conn_complete>:
{
    2c80:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    2c82:	7803      	ldrb	r3, [r0, #0]
{
    2c84:	b089      	sub	sp, #36	; 0x24
    2c86:	4605      	mov	r5, r0
	if (evt->status) {
    2c88:	b17b      	cbz	r3, 2caa <le_enh_conn_complete+0x2a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    2c8a:	2102      	movs	r1, #2
    2c8c:	2000      	movs	r0, #0
    2c8e:	f001 fa83 	bl	4198 <bt_conn_lookup_state_le>
		if (!conn) {
    2c92:	4604      	mov	r4, r0
    2c94:	b138      	cbz	r0, 2ca6 <le_enh_conn_complete+0x26>
		conn->err = evt->status;
    2c96:	782b      	ldrb	r3, [r5, #0]
    2c98:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2c9a:	2100      	movs	r1, #0
    2c9c:	f001 fb50 	bl	4340 <bt_conn_set_state>
		bt_conn_unref(conn);
    2ca0:	4620      	mov	r0, r4
    2ca2:	f001 fa97 	bl	41d4 <bt_conn_unref>
}
    2ca6:	b009      	add	sp, #36	; 0x24
    2ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2caa:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2cac:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2cb0:	4621      	mov	r1, r4
    2cb2:	a806      	add	r0, sp, #24
    2cb4:	f7ff f968 	bl	1f88 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2cb8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2cbc:	3b02      	subs	r3, #2
    2cbe:	b2db      	uxtb	r3, r3
    2cc0:	2b01      	cmp	r3, #1
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2cc2:	b2b7      	uxth	r7, r6
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2cc4:	d829      	bhi.n	2d1a <le_enh_conn_complete+0x9a>
    2cc6:	2206      	movs	r2, #6
    2cc8:	f105 0111 	add.w	r1, r5, #17
    2ccc:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2cd0:	f88d 3018 	strb.w	r3, [sp, #24]
    2cd4:	f7fe ff92 	bl	1bfc <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    2cd8:	2301      	movs	r3, #1
    2cda:	f88d 3010 	strb.w	r3, [sp, #16]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2cde:	2102      	movs	r1, #2
    2ce0:	a806      	add	r0, sp, #24
    2ce2:	f001 fa59 	bl	4198 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2ce6:	78eb      	ldrb	r3, [r5, #3]
    2ce8:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2cea:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2cec:	d109      	bne.n	2d02 <le_enh_conn_complete+0x82>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2cee:	f06f 0140 	mvn.w	r1, #64	; 0x40
    2cf2:	484a      	ldr	r0, [pc, #296]	; (2e1c <le_enh_conn_complete+0x19c>)
    2cf4:	f7ff f95c 	bl	1fb0 <atomic_and>
		if (!conn) {
    2cf8:	b9a4      	cbnz	r4, 2d24 <le_enh_conn_complete+0xa4>
			conn = bt_conn_add_le(&id_addr);
    2cfa:	a806      	add	r0, sp, #24
    2cfc:	f001 f9a0 	bl	4040 <bt_conn_add_le>
    2d00:	4604      	mov	r4, r0
	if (!conn) {
    2d02:	b97c      	cbnz	r4, 2d24 <le_enh_conn_complete+0xa4>
		BT_ERR("Unable to add new conn for handle %u", handle);
    2d04:	4b46      	ldr	r3, [pc, #280]	; (2e20 <le_enh_conn_complete+0x1a0>)
    2d06:	9302      	str	r3, [sp, #8]
    2d08:	e88d 0088 	stmia.w	sp, {r3, r7}
    2d0c:	4a45      	ldr	r2, [pc, #276]	; (2e24 <le_enh_conn_complete+0x1a4>)
    2d0e:	4b46      	ldr	r3, [pc, #280]	; (2e28 <le_enh_conn_complete+0x1a8>)
    2d10:	4946      	ldr	r1, [pc, #280]	; (2e2c <le_enh_conn_complete+0x1ac>)
    2d12:	4847      	ldr	r0, [pc, #284]	; (2e30 <le_enh_conn_complete+0x1b0>)
    2d14:	f7fe f93a 	bl	f8c <printk>
		return;
    2d18:	e7c5      	b.n	2ca6 <le_enh_conn_complete+0x26>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    2d1a:	4621      	mov	r1, r4
    2d1c:	a804      	add	r0, sp, #16
    2d1e:	f7ff f933 	bl	1f88 <bt_addr_le_copy>
    2d22:	e7dc      	b.n	2cde <le_enh_conn_complete+0x5e>
	conn->handle   = handle;
    2d24:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2d26:	a906      	add	r1, sp, #24
	conn->handle   = handle;
    2d28:	f820 6b44 	strh.w	r6, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2d2c:	f7ff f92c 	bl	1f88 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    2d30:	7e2a      	ldrb	r2, [r5, #24]
    2d32:	7deb      	ldrb	r3, [r5, #23]
    2d34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2d38:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    2d3c:	7eaa      	ldrb	r2, [r5, #26]
    2d3e:	7e6b      	ldrb	r3, [r5, #25]
    2d40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2d44:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2d48:	7eeb      	ldrb	r3, [r5, #27]
    2d4a:	7f2a      	ldrb	r2, [r5, #28]
    2d4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2d50:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    2d54:	78ee      	ldrb	r6, [r5, #3]
    2d56:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    2d58:	2e01      	cmp	r6, #1
    2d5a:	d11a      	bne.n	2d92 <le_enh_conn_complete+0x112>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2d5c:	4f35      	ldr	r7, [pc, #212]	; (2e34 <le_enh_conn_complete+0x1b4>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    2d5e:	a904      	add	r1, sp, #16
    2d60:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    2d64:	f7ff f910 	bl	1f88 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2d68:	4639      	mov	r1, r7
    2d6a:	f104 0052 	add.w	r0, r4, #82	; 0x52
    2d6e:	f7ff f90b 	bl	1f88 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2d72:	2107      	movs	r1, #7
    2d74:	f107 0070 	add.w	r0, r7, #112	; 0x70
    2d78:	f7ff f99c 	bl	20b4 <atomic_test_bit>
    2d7c:	b148      	cbz	r0, 2d92 <le_enh_conn_complete+0x112>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    2d7e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    2d82:	2200      	movs	r2, #0
    2d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2d88:	4313      	orrs	r3, r2
    2d8a:	d002      	beq.n	2d92 <le_enh_conn_complete+0x112>
			set_advertise_enable(true);
    2d8c:	4630      	mov	r0, r6
    2d8e:	f7ff fa71 	bl	2274 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    2d92:	2103      	movs	r1, #3
    2d94:	4620      	mov	r0, r4
    2d96:	f001 fad3 	bl	4340 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    2d9a:	7a63      	ldrb	r3, [r4, #9]
    2d9c:	2b03      	cmp	r3, #3
    2d9e:	d118      	bne.n	2dd2 <le_enh_conn_complete+0x152>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2da0:	78eb      	ldrb	r3, [r5, #3]
    2da2:	b123      	cbz	r3, 2dae <le_enh_conn_complete+0x12e>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    2da4:	4b23      	ldr	r3, [pc, #140]	; (2e34 <le_enh_conn_complete+0x1b4>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2da6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    2daa:	0719      	lsls	r1, r3, #28
    2dac:	d518      	bpl.n	2de0 <le_enh_conn_complete+0x160>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    2dae:	2102      	movs	r1, #2
    2db0:	f242 0016 	movw	r0, #8214	; 0x2016
    2db4:	f7ff f98c 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2db8:	4605      	mov	r5, r0
    2dba:	b188      	cbz	r0, 2de0 <le_enh_conn_complete+0x160>
	cp = net_buf_add(buf, sizeof(*cp));
    2dbc:	2102      	movs	r1, #2
    2dbe:	3008      	adds	r0, #8
    2dc0:	f00f ffb8 	bl	12d34 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2dc4:	8823      	ldrh	r3, [r4, #0]
    2dc6:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    2dc8:	4629      	mov	r1, r5
    2dca:	f242 0016 	movw	r0, #8214	; 0x2016
    2dce:	f7ff fb2f 	bl	2430 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    2dd2:	4620      	mov	r0, r4
    2dd4:	f001 f9fe 	bl	41d4 <bt_conn_unref>
	bt_le_scan_update(false);
    2dd8:	2000      	movs	r0, #0
    2dda:	f7ff fba5 	bl	2528 <bt_le_scan_update>
    2dde:	e762      	b.n	2ca6 <le_enh_conn_complete+0x26>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    2de0:	4d14      	ldr	r5, [pc, #80]	; (2e34 <le_enh_conn_complete+0x1b4>)
    2de2:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    2de6:	07d2      	lsls	r2, r2, #31
    2de8:	d508      	bpl.n	2dfc <le_enh_conn_complete+0x17c>
		err = hci_le_set_phy(conn);
    2dea:	4620      	mov	r0, r4
    2dec:	f7ff fefe 	bl	2bec <hci_le_set_phy.isra.29>
		if (!err) {
    2df0:	b920      	cbnz	r0, 2dfc <le_enh_conn_complete+0x17c>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2df2:	2180      	movs	r1, #128	; 0x80
    2df4:	1d20      	adds	r0, r4, #4
    2df6:	f7ff f8ca 	bl	1f8e <atomic_or>
    2dfa:	e7ea      	b.n	2dd2 <le_enh_conn_complete+0x152>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2dfc:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2e00:	069b      	lsls	r3, r3, #26
    2e02:	d506      	bpl.n	2e12 <le_enh_conn_complete+0x192>
		err = hci_le_set_data_len(conn);
    2e04:	4620      	mov	r0, r4
    2e06:	f7ff ff11 	bl	2c2c <hci_le_set_data_len.isra.30>
		if (!err) {
    2e0a:	b910      	cbnz	r0, 2e12 <le_enh_conn_complete+0x192>
    2e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
    2e10:	e7f0      	b.n	2df4 <le_enh_conn_complete+0x174>
	update_conn_param(conn);
    2e12:	4620      	mov	r0, r4
    2e14:	f7ff f8de 	bl	1fd4 <update_conn_param>
    2e18:	e7db      	b.n	2dd2 <le_enh_conn_complete+0x152>
    2e1a:	bf00      	nop
    2e1c:	20003ad8 	.word	0x20003ad8
    2e20:	0001496d 	.word	0x0001496d
    2e24:	000156bc 	.word	0x000156bc
    2e28:	00014f09 	.word	0x00014f09
    2e2c:	0001570b 	.word	0x0001570b
    2e30:	00015841 	.word	0x00015841
    2e34:	20003a68 	.word	0x20003a68

00002e38 <le_conn_param_neg_reply>:
{
    2e38:	b570      	push	{r4, r5, r6, lr}
    2e3a:	4606      	mov	r6, r0
    2e3c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    2e3e:	f242 0021 	movw	r0, #8225	; 0x2021
    2e42:	2103      	movs	r1, #3
    2e44:	f7ff f944 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2e48:	4604      	mov	r4, r0
    2e4a:	b160      	cbz	r0, 2e66 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    2e4c:	2103      	movs	r1, #3
    2e4e:	3008      	adds	r0, #8
    2e50:	f00f ff70 	bl	12d34 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    2e54:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    2e56:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2e58:	4621      	mov	r1, r4
    2e5a:	f242 0021 	movw	r0, #8225	; 0x2021
}
    2e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2e62:	f7ff bae5 	b.w	2430 <bt_hci_cmd_send>
}
    2e66:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2e6a:	bd70      	pop	{r4, r5, r6, pc}

00002e6c <hci_tx_thread>:
{
    2e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    2e70:	f8df a148 	ldr.w	sl, [pc, #328]	; 2fbc <hci_tx_thread+0x150>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2e74:	4d4f      	ldr	r5, [pc, #316]	; (2fb4 <hci_tx_thread+0x148>)
{
    2e76:	b085      	sub	sp, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    2e78:	f89a 300d 	ldrb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2e7c:	484e      	ldr	r0, [pc, #312]	; (2fb8 <hci_tx_thread+0x14c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2e7e:	f36f 1307 	bfc	r3, #4, #4
    2e82:	f88a 300d 	strb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2e86:	f001 f9ed 	bl	4264 <bt_conn_prepare_events>
    2e8a:	f100 0901 	add.w	r9, r0, #1

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    2e8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e92:	4649      	mov	r1, r9
    2e94:	4849      	ldr	r0, [pc, #292]	; (2fbc <hci_tx_thread+0x150>)
    2e96:	f011 fbf3 	bl	14680 <_impl_k_poll>
		BT_ASSERT(err == 0);
    2e9a:	b948      	cbnz	r0, 2eb0 <hci_tx_thread+0x44>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2e9c:	4c48      	ldr	r4, [pc, #288]	; (2fc0 <hci_tx_thread+0x154>)
    2e9e:	4e47      	ldr	r6, [pc, #284]	; (2fbc <hci_tx_thread+0x150>)
    2ea0:	f104 0bc4 	add.w	fp, r4, #196	; 0xc4
	for (; count; ev++, count--) {
    2ea4:	f1b9 0f00 	cmp.w	r9, #0
    2ea8:	d111      	bne.n	2ece <hci_tx_thread+0x62>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    2eaa:	f010 ff69 	bl	13d80 <_impl_k_yield>
    2eae:	e7e3      	b.n	2e78 <hci_tx_thread+0xc>
		BT_ASSERT(err == 0);
    2eb0:	4b40      	ldr	r3, [pc, #256]	; (2fb4 <hci_tx_thread+0x148>)
    2eb2:	9301      	str	r3, [sp, #4]
    2eb4:	9300      	str	r3, [sp, #0]
    2eb6:	4a43      	ldr	r2, [pc, #268]	; (2fc4 <hci_tx_thread+0x158>)
    2eb8:	4b43      	ldr	r3, [pc, #268]	; (2fc8 <hci_tx_thread+0x15c>)
    2eba:	4944      	ldr	r1, [pc, #272]	; (2fcc <hci_tx_thread+0x160>)
    2ebc:	4844      	ldr	r0, [pc, #272]	; (2fd0 <hci_tx_thread+0x164>)
	BT_ASSERT(buf);
    2ebe:	f7fe f865 	bl	f8c <printk>
    2ec2:	4040      	eors	r0, r0
    2ec4:	f380 8811 	msr	BASEPRI, r0
    2ec8:	f04f 0004 	mov.w	r0, #4
    2ecc:	df02      	svc	2
		switch (ev->state) {
    2ece:	7b73      	ldrb	r3, [r6, #13]
    2ed0:	091b      	lsrs	r3, r3, #4
    2ed2:	2b01      	cmp	r3, #1
    2ed4:	d952      	bls.n	2f7c <hci_tx_thread+0x110>
    2ed6:	2b04      	cmp	r3, #4
    2ed8:	d162      	bne.n	2fa0 <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
    2eda:	7b37      	ldrb	r7, [r6, #12]
    2edc:	2f00      	cmp	r7, #0
    2ede:	d151      	bne.n	2f84 <hci_tx_thread+0x118>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2ee0:	4639      	mov	r1, r7
    2ee2:	4658      	mov	r0, fp
    2ee4:	f00f feca 	bl	12c7c <net_buf_get>
	BT_ASSERT(buf);
    2ee8:	4680      	mov	r8, r0
    2eea:	b938      	cbnz	r0, 2efc <hci_tx_thread+0x90>
    2eec:	4b31      	ldr	r3, [pc, #196]	; (2fb4 <hci_tx_thread+0x148>)
    2eee:	9301      	str	r3, [sp, #4]
    2ef0:	9300      	str	r3, [sp, #0]
    2ef2:	4a34      	ldr	r2, [pc, #208]	; (2fc4 <hci_tx_thread+0x158>)
    2ef4:	4b37      	ldr	r3, [pc, #220]	; (2fd4 <hci_tx_thread+0x168>)
    2ef6:	4935      	ldr	r1, [pc, #212]	; (2fcc <hci_tx_thread+0x160>)
    2ef8:	4837      	ldr	r0, [pc, #220]	; (2fd8 <hci_tx_thread+0x16c>)
    2efa:	e7e0      	b.n	2ebe <hci_tx_thread+0x52>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2efc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2f00:	4836      	ldr	r0, [pc, #216]	; (2fdc <hci_tx_thread+0x170>)
    2f02:	f010 ffa4 	bl	13e4e <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    2f06:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    2f0a:	b16b      	cbz	r3, 2f28 <hci_tx_thread+0xbc>
		BT_ERR("Uncleared pending sent_cmd");
    2f0c:	4b31      	ldr	r3, [pc, #196]	; (2fd4 <hci_tx_thread+0x168>)
    2f0e:	4a2d      	ldr	r2, [pc, #180]	; (2fc4 <hci_tx_thread+0x158>)
    2f10:	492e      	ldr	r1, [pc, #184]	; (2fcc <hci_tx_thread+0x160>)
    2f12:	9501      	str	r5, [sp, #4]
    2f14:	9500      	str	r5, [sp, #0]
    2f16:	4832      	ldr	r0, [pc, #200]	; (2fe0 <hci_tx_thread+0x174>)
    2f18:	f7fe f838 	bl	f8c <printk>
		net_buf_unref(bt_dev.sent_cmd);
    2f1c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2f20:	f00f fed6 	bl	12cd0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2f24:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    2f28:	4640      	mov	r0, r8
    2f2a:	f00f feff 	bl	12d2c <net_buf_ref>
    2f2e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    2f32:	4640      	mov	r0, r8
    2f34:	f7ff fa74 	bl	2420 <bt_send>
	if (err) {
    2f38:	b300      	cbz	r0, 2f7c <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    2f3a:	4b26      	ldr	r3, [pc, #152]	; (2fd4 <hci_tx_thread+0x168>)
    2f3c:	4a21      	ldr	r2, [pc, #132]	; (2fc4 <hci_tx_thread+0x158>)
    2f3e:	4923      	ldr	r1, [pc, #140]	; (2fcc <hci_tx_thread+0x160>)
    2f40:	9001      	str	r0, [sp, #4]
    2f42:	9502      	str	r5, [sp, #8]
    2f44:	9500      	str	r5, [sp, #0]
    2f46:	4827      	ldr	r0, [pc, #156]	; (2fe4 <hci_tx_thread+0x178>)
    2f48:	f7fe f820 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2f4c:	4823      	ldr	r0, [pc, #140]	; (2fdc <hci_tx_thread+0x170>)
    2f4e:	f010 ff56 	bl	13dfe <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    2f52:	4640      	mov	r0, r8
    2f54:	f00f fdfe 	bl	12b54 <net_buf_id>
    2f58:	4b23      	ldr	r3, [pc, #140]	; (2fe8 <hci_tx_thread+0x17c>)
    2f5a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2f5e:	2200      	movs	r2, #0
    2f60:	211f      	movs	r1, #31
    2f62:	8840      	ldrh	r0, [r0, #2]
    2f64:	f7ff f844 	bl	1ff0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    2f68:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2f6c:	f00f feb0 	bl	12cd0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2f70:	2300      	movs	r3, #0
		net_buf_unref(buf);
    2f72:	4640      	mov	r0, r8
		bt_dev.sent_cmd = NULL;
    2f74:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    2f78:	f00f feaa 	bl	12cd0 <net_buf_unref>
	for (; count; ev++, count--) {
    2f7c:	3614      	adds	r6, #20
    2f7e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    2f82:	e78f      	b.n	2ea4 <hci_tx_thread+0x38>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    2f84:	2f01      	cmp	r7, #1
    2f86:	d104      	bne.n	2f92 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    2f88:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    2f8a:	3818      	subs	r0, #24
    2f8c:	f000 ff54 	bl	3e38 <bt_conn_notify_tx>
    2f90:	e7f4      	b.n	2f7c <hci_tx_thread+0x110>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    2f92:	2f02      	cmp	r7, #2
    2f94:	d1f2      	bne.n	2f7c <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    2f96:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    2f98:	3828      	subs	r0, #40	; 0x28
    2f9a:	f001 fcb9 	bl	4910 <bt_conn_process_tx>
    2f9e:	e7ed      	b.n	2f7c <hci_tx_thread+0x110>
		switch (ev->state) {
    2fa0:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2fa2:	9502      	str	r5, [sp, #8]
    2fa4:	9500      	str	r5, [sp, #0]
    2fa6:	4b11      	ldr	r3, [pc, #68]	; (2fec <hci_tx_thread+0x180>)
    2fa8:	4a11      	ldr	r2, [pc, #68]	; (2ff0 <hci_tx_thread+0x184>)
    2faa:	4908      	ldr	r1, [pc, #32]	; (2fcc <hci_tx_thread+0x160>)
    2fac:	4811      	ldr	r0, [pc, #68]	; (2ff4 <hci_tx_thread+0x188>)
    2fae:	f7fd ffed 	bl	f8c <printk>
    2fb2:	e7e3      	b.n	2f7c <hci_tx_thread+0x110>
    2fb4:	0001496d 	.word	0x0001496d
    2fb8:	20003b54 	.word	0x20003b54
    2fbc:	20003b40 	.word	0x20003b40
    2fc0:	20003a68 	.word	0x20003a68
    2fc4:	000156bc 	.word	0x000156bc
    2fc8:	00014fcb 	.word	0x00014fcb
    2fcc:	0001570b 	.word	0x0001570b
    2fd0:	00015796 	.word	0x00015796
    2fd4:	00014fb3 	.word	0x00014fb3
    2fd8:	000157c0 	.word	0x000157c0
    2fdc:	20003b10 	.word	0x20003b10
    2fe0:	000157e5 	.word	0x000157e5
    2fe4:	00015145 	.word	0x00015145
    2fe8:	2000027c 	.word	0x2000027c
    2fec:	00014fbc 	.word	0x00014fbc
    2ff0:	00015704 	.word	0x00015704
    2ff4:	00015810 	.word	0x00015810

00002ff8 <bt_recv>:
{
    2ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    2ffc:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    2ffe:	2b01      	cmp	r3, #1
{
    3000:	b095      	sub	sp, #84	; 0x54
    3002:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    3004:	d040      	beq.n	3088 <bt_recv+0x90>
    3006:	2b03      	cmp	r3, #3
    3008:	f040 8338 	bne.w	367c <bt_recv+0x684>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    300c:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    300e:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    3010:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    3012:	f3c6 030b 	ubfx	r3, r6, #0, #12
    3016:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    3018:	23ff      	movs	r3, #255	; 0xff
    301a:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    301c:	2104      	movs	r1, #4
    301e:	3008      	adds	r0, #8
    3020:	f00f feb6 	bl	12d90 <net_buf_simple_pull>
	if (buf->len != len) {
    3024:	89a2      	ldrh	r2, [r4, #12]
    3026:	4295      	cmp	r5, r2
    3028:	d00e      	beq.n	3048 <bt_recv+0x50>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    302a:	4ba0      	ldr	r3, [pc, #640]	; (32ac <bt_recv+0x2b4>)
    302c:	9303      	str	r3, [sp, #12]
    302e:	9201      	str	r2, [sp, #4]
    3030:	9300      	str	r3, [sp, #0]
    3032:	9502      	str	r5, [sp, #8]
    3034:	4b9e      	ldr	r3, [pc, #632]	; (32b0 <bt_recv+0x2b8>)
    3036:	4a9f      	ldr	r2, [pc, #636]	; (32b4 <bt_recv+0x2bc>)
    3038:	499f      	ldr	r1, [pc, #636]	; (32b8 <bt_recv+0x2c0>)
    303a:	48a0      	ldr	r0, [pc, #640]	; (32bc <bt_recv+0x2c4>)
    303c:	f7fd ffa6 	bl	f8c <printk>
	net_buf_unref(buf);
    3040:	4620      	mov	r0, r4
    3042:	f00f fe45 	bl	12cd0 <net_buf_unref>
    3046:	e01b      	b.n	3080 <bt_recv+0x88>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    3048:	8ae0      	ldrh	r0, [r4, #22]
    304a:	f001 f875 	bl	4138 <bt_conn_lookup_handle>
	if (!conn) {
    304e:	4605      	mov	r5, r0
    3050:	b958      	cbnz	r0, 306a <bt_recv+0x72>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    3052:	4b96      	ldr	r3, [pc, #600]	; (32ac <bt_recv+0x2b4>)
    3054:	8ae2      	ldrh	r2, [r4, #22]
    3056:	9302      	str	r3, [sp, #8]
    3058:	9201      	str	r2, [sp, #4]
    305a:	9300      	str	r3, [sp, #0]
    305c:	4a95      	ldr	r2, [pc, #596]	; (32b4 <bt_recv+0x2bc>)
    305e:	4b94      	ldr	r3, [pc, #592]	; (32b0 <bt_recv+0x2b8>)
    3060:	4995      	ldr	r1, [pc, #596]	; (32b8 <bt_recv+0x2c0>)
    3062:	4897      	ldr	r0, [pc, #604]	; (32c0 <bt_recv+0x2c8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3064:	f7fd ff92 	bl	f8c <printk>
    3068:	e7ea      	b.n	3040 <bt_recv+0x48>
	acl(buf)->id = bt_conn_get_id(conn);
    306a:	f001 fcf7 	bl	4a5c <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    306e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    3070:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    3072:	4621      	mov	r1, r4
    3074:	4628      	mov	r0, r5
    3076:	f000 fdaf 	bl	3bd8 <bt_conn_recv>
	bt_conn_unref(conn);
    307a:	4628      	mov	r0, r5
    307c:	f001 f8aa 	bl	41d4 <bt_conn_unref>
		return 0;
    3080:	2000      	movs	r0, #0
}
    3082:	b015      	add	sp, #84	; 0x54
    3084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3088:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    308a:	7832      	ldrb	r2, [r6, #0]
    308c:	2a13      	cmp	r2, #19
    308e:	f200 8305 	bhi.w	369c <bt_recv+0x6a4>
    3092:	4093      	lsls	r3, r2
    3094:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3098:	f000 8300 	beq.w	369c <bt_recv+0x6a4>
    309c:	4b83      	ldr	r3, [pc, #524]	; (32ac <bt_recv+0x2b4>)
    309e:	9301      	str	r3, [sp, #4]
    30a0:	9300      	str	r3, [sp, #0]
    30a2:	4a84      	ldr	r2, [pc, #528]	; (32b4 <bt_recv+0x2bc>)
    30a4:	4b87      	ldr	r3, [pc, #540]	; (32c4 <bt_recv+0x2cc>)
    30a6:	4984      	ldr	r1, [pc, #528]	; (32b8 <bt_recv+0x2c0>)
    30a8:	4887      	ldr	r0, [pc, #540]	; (32c8 <bt_recv+0x2d0>)
    30aa:	f7fd ff6f 	bl	f8c <printk>
    30ae:	4040      	eors	r0, r0
    30b0:	f380 8811 	msr	BASEPRI, r0
    30b4:	f04f 0004 	mov.w	r0, #4
    30b8:	df02      	svc	2
    30ba:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    30bc:	783e      	ldrb	r6, [r7, #0]
    30be:	2e00      	cmp	r6, #0
    30c0:	d1be      	bne.n	3040 <bt_recv+0x48>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    30c2:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    30c6:	4640      	mov	r0, r8
    30c8:	f001 f836 	bl	4138 <bt_conn_lookup_handle>
	if (!conn) {
    30cc:	4605      	mov	r5, r0
    30ce:	b9c8      	cbnz	r0, 3104 <bt_recv+0x10c>
		BT_ERR("Unable to look up conn with handle %u", handle);
    30d0:	4b76      	ldr	r3, [pc, #472]	; (32ac <bt_recv+0x2b4>)
    30d2:	9302      	str	r3, [sp, #8]
    30d4:	e88d 0108 	stmia.w	sp, {r3, r8}
    30d8:	4a76      	ldr	r2, [pc, #472]	; (32b4 <bt_recv+0x2bc>)
    30da:	4b7c      	ldr	r3, [pc, #496]	; (32cc <bt_recv+0x2d4>)
    30dc:	4976      	ldr	r1, [pc, #472]	; (32b8 <bt_recv+0x2c0>)
    30de:	487c      	ldr	r0, [pc, #496]	; (32d0 <bt_recv+0x2d8>)
    30e0:	f7fd ff54 	bl	f8c <printk>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    30e4:	2107      	movs	r1, #7
    30e6:	487b      	ldr	r0, [pc, #492]	; (32d4 <bt_recv+0x2dc>)
    30e8:	f7fe ffe4 	bl	20b4 <atomic_test_bit>
    30ec:	2800      	cmp	r0, #0
    30ee:	d0a7      	beq.n	3040 <bt_recv+0x48>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    30f0:	2106      	movs	r1, #6
    30f2:	4878      	ldr	r0, [pc, #480]	; (32d4 <bt_recv+0x2dc>)
    30f4:	f7fe ffde 	bl	20b4 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    30f8:	2800      	cmp	r0, #0
    30fa:	d1a1      	bne.n	3040 <bt_recv+0x48>
		set_advertise_enable(true);
    30fc:	2001      	movs	r0, #1
    30fe:	f7ff f8b9 	bl	2274 <set_advertise_enable>
    3102:	e79d      	b.n	3040 <bt_recv+0x48>
	conn->err = evt->reason;
    3104:	78fb      	ldrb	r3, [r7, #3]
    3106:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    3108:	4973      	ldr	r1, [pc, #460]	; (32d8 <bt_recv+0x2e0>)
    310a:	4874      	ldr	r0, [pc, #464]	; (32dc <bt_recv+0x2e4>)
    310c:	f011 f828 	bl	14160 <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3110:	4631      	mov	r1, r6
    3112:	4628      	mov	r0, r5
    3114:	f001 f914 	bl	4340 <bt_conn_set_state>
	conn->handle = 0;
    3118:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    311a:	78ae      	ldrb	r6, [r5, #2]
    311c:	b10e      	cbz	r6, 3122 <bt_recv+0x12a>
	bt_conn_unref(conn);
    311e:	4628      	mov	r0, r5
    3120:	e086      	b.n	3230 <bt_recv+0x238>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    3122:	4631      	mov	r1, r6
    3124:	1d28      	adds	r0, r5, #4
    3126:	f7fe ffc5 	bl	20b4 <atomic_test_bit>
    312a:	b130      	cbz	r0, 313a <bt_recv+0x142>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    312c:	4628      	mov	r0, r5
    312e:	2101      	movs	r1, #1
    3130:	f001 f906 	bl	4340 <bt_conn_set_state>
		bt_le_scan_update(false);
    3134:	4630      	mov	r0, r6
    3136:	f7ff f9f7 	bl	2528 <bt_le_scan_update>
	bt_conn_unref(conn);
    313a:	4628      	mov	r0, r5
    313c:	f001 f84a 	bl	41d4 <bt_conn_unref>
    3140:	e7d0      	b.n	30e4 <bt_recv+0xec>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    3142:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    3144:	2101      	movs	r1, #1
    3146:	4628      	mov	r0, r5
    3148:	f00f fe22 	bl	12d90 <net_buf_simple_pull>
	switch (evt->subevent) {
    314c:	7836      	ldrb	r6, [r6, #0]
    314e:	1e73      	subs	r3, r6, #1
    3150:	2b0b      	cmp	r3, #11
    3152:	f200 8281 	bhi.w	3658 <bt_recv+0x660>
    3156:	e8df f013 	tbh	[pc, r3, lsl #1]
    315a:	000c      	.short	0x000c
    315c:	00430199 	.word	0x00430199
    3160:	027f006e 	.word	0x027f006e
    3164:	012800cb 	.word	0x012800cb
    3168:	018a016a 	.word	0x018a016a
    316c:	027f0041 	.word	0x027f0041
    3170:	0141      	.short	0x0141
    3172:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    3174:	780b      	ldrb	r3, [r1, #0]
    3176:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	enh.handle         = evt->handle;
    317a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    317e:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
	enh.role           = evt->role;
    3182:	78cb      	ldrb	r3, [r1, #3]
    3184:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	enh.interval       = evt->interval;
    3188:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    318c:	f8ad 3047 	strh.w	r3, [sp, #71]	; 0x47
	enh.latency        = evt->latency;
    3190:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    3194:	f8ad 3049 	strh.w	r3, [sp, #73]	; 0x49
	enh.supv_timeout   = evt->supv_timeout;
    3198:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    319c:	f8ad 304b 	strh.w	r3, [sp, #75]	; 0x4b
	enh.clock_accuracy = evt->clock_accuracy;
    31a0:	7c4b      	ldrb	r3, [r1, #17]
    31a2:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    31a6:	3104      	adds	r1, #4
    31a8:	a80d      	add	r0, sp, #52	; 0x34
    31aa:	f7fe feed 	bl	1f88 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    31ae:	2500      	movs	r5, #0
    31b0:	2206      	movs	r2, #6
    31b2:	a908      	add	r1, sp, #32
    31b4:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
    31b8:	9508      	str	r5, [sp, #32]
    31ba:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
    31be:	f7fe fd1d 	bl	1bfc <memcpy>
    31c2:	2206      	movs	r2, #6
    31c4:	a90a      	add	r1, sp, #40	; 0x28
    31c6:	f10d 0041 	add.w	r0, sp, #65	; 0x41
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    31ca:	950a      	str	r5, [sp, #40]	; 0x28
    31cc:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    31d0:	f7fe fd14 	bl	1bfc <memcpy>
	le_enh_conn_complete(&enh);
    31d4:	a80c      	add	r0, sp, #48	; 0x30
		le_enh_conn_complete((void *)buf->data);
    31d6:	f7ff fd53 	bl	2c80 <le_enh_conn_complete>
    31da:	e731      	b.n	3040 <bt_recv+0x48>
    31dc:	68a0      	ldr	r0, [r4, #8]
    31de:	e7fa      	b.n	31d6 <bt_recv+0x1de>
    31e0:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    31e2:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    31e6:	4638      	mov	r0, r7
    31e8:	f000 ffa6 	bl	4138 <bt_conn_lookup_handle>
	if (!conn) {
    31ec:	4606      	mov	r6, r0
    31ee:	b940      	cbnz	r0, 3202 <bt_recv+0x20a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    31f0:	4b2e      	ldr	r3, [pc, #184]	; (32ac <bt_recv+0x2b4>)
    31f2:	9302      	str	r3, [sp, #8]
    31f4:	e88d 0088 	stmia.w	sp, {r3, r7}
    31f8:	4b39      	ldr	r3, [pc, #228]	; (32e0 <bt_recv+0x2e8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    31fa:	4a2e      	ldr	r2, [pc, #184]	; (32b4 <bt_recv+0x2bc>)
    31fc:	492e      	ldr	r1, [pc, #184]	; (32b8 <bt_recv+0x2c0>)
    31fe:	4839      	ldr	r0, [pc, #228]	; (32e4 <bt_recv+0x2ec>)
    3200:	e730      	b.n	3064 <bt_recv+0x6c>
	if (!evt->status) {
    3202:	782b      	ldrb	r3, [r5, #0]
    3204:	b99b      	cbnz	r3, 322e <bt_recv+0x236>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3206:	792a      	ldrb	r2, [r5, #4]
    3208:	78eb      	ldrb	r3, [r5, #3]
    320a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    320e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3212:	79aa      	ldrb	r2, [r5, #6]
    3214:	796b      	ldrb	r3, [r5, #5]
    3216:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    321a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    321e:	79eb      	ldrb	r3, [r5, #7]
    3220:	7a2a      	ldrb	r2, [r5, #8]
    3222:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3226:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    322a:	f000 fc99 	bl	3b60 <notify_le_param_updated>
	bt_conn_unref(conn);
    322e:	4630      	mov	r0, r6
	bt_conn_unref(conn);
    3230:	f000 ffd0 	bl	41d4 <bt_conn_unref>
    3234:	e704      	b.n	3040 <bt_recv+0x48>
    3236:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3238:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    323c:	4638      	mov	r0, r7
    323e:	f000 ff7b 	bl	4138 <bt_conn_lookup_handle>
	if (!conn) {
    3242:	4605      	mov	r5, r0
    3244:	b928      	cbnz	r0, 3252 <bt_recv+0x25a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3246:	4b19      	ldr	r3, [pc, #100]	; (32ac <bt_recv+0x2b4>)
    3248:	9302      	str	r3, [sp, #8]
    324a:	e88d 0088 	stmia.w	sp, {r3, r7}
    324e:	4b26      	ldr	r3, [pc, #152]	; (32e8 <bt_recv+0x2f0>)
    3250:	e7d3      	b.n	31fa <bt_recv+0x202>
	if (!evt->status) {
    3252:	7833      	ldrb	r3, [r6, #0]
    3254:	b923      	cbnz	r3, 3260 <bt_recv+0x268>
		memcpy(conn->le.features, evt->features,
    3256:	2208      	movs	r2, #8
    3258:	1cf1      	adds	r1, r6, #3
    325a:	3064      	adds	r0, #100	; 0x64
    325c:	f7fe fcce 	bl	1bfc <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    3260:	4e22      	ldr	r6, [pc, #136]	; (32ec <bt_recv+0x2f4>)
    3262:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    3266:	07d2      	lsls	r2, r2, #31
    3268:	d50c      	bpl.n	3284 <bt_recv+0x28c>
    326a:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
    326e:	07db      	lsls	r3, r3, #31
    3270:	d508      	bpl.n	3284 <bt_recv+0x28c>
		err = hci_le_set_phy(conn);
    3272:	4628      	mov	r0, r5
    3274:	f7ff fcba 	bl	2bec <hci_le_set_phy.isra.29>
		if (!err) {
    3278:	b920      	cbnz	r0, 3284 <bt_recv+0x28c>
    327a:	2180      	movs	r1, #128	; 0x80
    327c:	1d28      	adds	r0, r5, #4
    327e:	f7fe fe86 	bl	1f8e <atomic_or>
    3282:	e74c      	b.n	311e <bt_recv+0x126>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3284:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    3288:	069f      	lsls	r7, r3, #26
    328a:	f140 80a3 	bpl.w	33d4 <bt_recv+0x3dc>
    328e:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    3292:	069e      	lsls	r6, r3, #26
    3294:	f140 809e 	bpl.w	33d4 <bt_recv+0x3dc>
		err = hci_le_set_data_len(conn);
    3298:	4628      	mov	r0, r5
    329a:	f7ff fcc7 	bl	2c2c <hci_le_set_data_len.isra.30>
		if (!err) {
    329e:	2800      	cmp	r0, #0
    32a0:	f040 8098 	bne.w	33d4 <bt_recv+0x3dc>
    32a4:	f44f 7180 	mov.w	r1, #256	; 0x100
    32a8:	e7e8      	b.n	327c <bt_recv+0x284>
    32aa:	bf00      	nop
    32ac:	0001496d 	.word	0x0001496d
    32b0:	00014ed2 	.word	0x00014ed2
    32b4:	000156bc 	.word	0x000156bc
    32b8:	0001570b 	.word	0x0001570b
    32bc:	000153ec 	.word	0x000153ec
    32c0:	00015420 	.word	0x00015420
    32c4:	00014fa9 	.word	0x00014fa9
    32c8:	0001554b 	.word	0x0001554b
    32cc:	00014ef4 	.word	0x00014ef4
    32d0:	00015452 	.word	0x00015452
    32d4:	20003ad8 	.word	0x20003ad8
    32d8:	00015488 	.word	0x00015488
    32dc:	00001f4d 	.word	0x00001f4d
    32e0:	00014f72 	.word	0x00014f72
    32e4:	0001548c 	.word	0x0001548c
    32e8:	00014f1e 	.word	0x00014f1e
    32ec:	20003a68 	.word	0x20003a68
    32f0:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    32f2:	78d9      	ldrb	r1, [r3, #3]
    32f4:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    32f6:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    32f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    32fc:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    3300:	7959      	ldrb	r1, [r3, #5]
    3302:	791a      	ldrb	r2, [r3, #4]
    3304:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3308:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	param.latency = sys_le16_to_cpu(evt->latency);
    330c:	799a      	ldrb	r2, [r3, #6]
    330e:	79d9      	ldrb	r1, [r3, #7]
    3310:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3314:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3318:	7a1a      	ldrb	r2, [r3, #8]
    331a:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    331c:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    331e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    3322:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3324:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	conn = bt_conn_lookup_handle(handle);
    3328:	f000 ff06 	bl	4138 <bt_conn_lookup_handle>
	if (!conn) {
    332c:	4680      	mov	r8, r0
    332e:	b970      	cbnz	r0, 334e <bt_recv+0x356>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3330:	4bbb      	ldr	r3, [pc, #748]	; (3620 <bt_recv+0x628>)
    3332:	9302      	str	r3, [sp, #8]
    3334:	e88d 0028 	stmia.w	sp, {r3, r5}
    3338:	4aba      	ldr	r2, [pc, #744]	; (3624 <bt_recv+0x62c>)
    333a:	4bbb      	ldr	r3, [pc, #748]	; (3628 <bt_recv+0x630>)
    333c:	49bb      	ldr	r1, [pc, #748]	; (362c <bt_recv+0x634>)
    333e:	48bc      	ldr	r0, [pc, #752]	; (3630 <bt_recv+0x638>)
    3340:	f7fd fe24 	bl	f8c <printk>
		return le_conn_param_neg_reply(handle,
    3344:	2102      	movs	r1, #2
    3346:	4628      	mov	r0, r5
    3348:	f7ff fd76 	bl	2e38 <le_conn_param_neg_reply>
    334c:	e678      	b.n	3040 <bt_recv+0x48>
	if (!le_param_req(conn, &param)) {
    334e:	a90c      	add	r1, sp, #48	; 0x30
    3350:	f000 fc1a 	bl	3b88 <le_param_req>
    3354:	b928      	cbnz	r0, 3362 <bt_recv+0x36a>
		err = le_conn_param_neg_reply(handle,
    3356:	211e      	movs	r1, #30
    3358:	4628      	mov	r0, r5
    335a:	f7ff fd6d 	bl	2e38 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    335e:	4640      	mov	r0, r8
    3360:	e766      	b.n	3230 <bt_recv+0x238>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    3362:	210e      	movs	r1, #14
    3364:	f242 0020 	movw	r0, #8224	; 0x2020
    3368:	f7fe feb2 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    336c:	4606      	mov	r6, r0
    336e:	2800      	cmp	r0, #0
    3370:	d0f5      	beq.n	335e <bt_recv+0x366>
	cp = net_buf_add(buf, sizeof(*cp));
    3372:	210e      	movs	r1, #14
    3374:	3008      	adds	r0, #8
    3376:	f00f fcdd 	bl	12d34 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    337a:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    337c:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    337e:	2100      	movs	r1, #0
    3380:	f7fe fc68 	bl	1c54 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    3384:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    3388:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    338a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    338e:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    3390:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    3394:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    3396:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cp->handle = sys_cpu_to_le16(handle);
    339a:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    339c:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    339e:	4631      	mov	r1, r6
    33a0:	f242 0020 	movw	r0, #8224	; 0x2020
    33a4:	f7ff f844 	bl	2430 <bt_hci_cmd_send>
    33a8:	e7d9      	b.n	335e <bt_recv+0x366>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    33aa:	68a3      	ldr	r3, [r4, #8]
    33ac:	881e      	ldrh	r6, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    33ae:	4630      	mov	r0, r6
    33b0:	f000 fec2 	bl	4138 <bt_conn_lookup_handle>
	if (!conn) {
    33b4:	4605      	mov	r5, r0
    33b6:	b928      	cbnz	r0, 33c4 <bt_recv+0x3cc>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    33b8:	4b99      	ldr	r3, [pc, #612]	; (3620 <bt_recv+0x628>)
    33ba:	9302      	str	r3, [sp, #8]
    33bc:	e88d 0048 	stmia.w	sp, {r3, r6}
    33c0:	4b9c      	ldr	r3, [pc, #624]	; (3634 <bt_recv+0x63c>)
    33c2:	e71a      	b.n	31fa <bt_recv+0x202>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    33c4:	f46f 7180 	mvn.w	r1, #256	; 0x100
    33c8:	3004      	adds	r0, #4
    33ca:	f7fe fdf1 	bl	1fb0 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    33ce:	05c0      	lsls	r0, r0, #23
    33d0:	f57f aea5 	bpl.w	311e <bt_recv+0x126>
	update_conn_param(conn);
    33d4:	4628      	mov	r0, r5
    33d6:	f7fe fdfd 	bl	1fd4 <update_conn_param>
    33da:	e6a0      	b.n	311e <bt_recv+0x126>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    33dc:	68a3      	ldr	r3, [r4, #8]
    33de:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    33e2:	4630      	mov	r0, r6
    33e4:	f000 fea8 	bl	4138 <bt_conn_lookup_handle>
	if (!conn) {
    33e8:	4605      	mov	r5, r0
    33ea:	b928      	cbnz	r0, 33f8 <bt_recv+0x400>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    33ec:	4b8c      	ldr	r3, [pc, #560]	; (3620 <bt_recv+0x628>)
    33ee:	9302      	str	r3, [sp, #8]
    33f0:	e88d 0048 	stmia.w	sp, {r3, r6}
    33f4:	4b90      	ldr	r3, [pc, #576]	; (3638 <bt_recv+0x640>)
    33f6:	e700      	b.n	31fa <bt_recv+0x202>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    33f8:	1d06      	adds	r6, r0, #4
    33fa:	f06f 0180 	mvn.w	r1, #128	; 0x80
    33fe:	4630      	mov	r0, r6
    3400:	f7fe fdd6 	bl	1fb0 <atomic_and>
    3404:	0601      	lsls	r1, r0, #24
    3406:	f57f ae8a 	bpl.w	311e <bt_recv+0x126>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    340a:	4b8c      	ldr	r3, [pc, #560]	; (363c <bt_recv+0x644>)
    340c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3410:	069a      	lsls	r2, r3, #26
    3412:	d5df      	bpl.n	33d4 <bt_recv+0x3dc>
    3414:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    3418:	069b      	lsls	r3, r3, #26
    341a:	d5db      	bpl.n	33d4 <bt_recv+0x3dc>
		err = hci_le_set_data_len(conn);
    341c:	4628      	mov	r0, r5
    341e:	f7ff fc05 	bl	2c2c <hci_le_set_data_len.isra.30>
		if (!err) {
    3422:	2800      	cmp	r0, #0
    3424:	d1d6      	bne.n	33d4 <bt_recv+0x3dc>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3426:	f44f 7180 	mov.w	r1, #256	; 0x100
    342a:	4630      	mov	r0, r6
    342c:	e727      	b.n	327e <bt_recv+0x286>
    342e:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3430:	4883      	ldr	r0, [pc, #524]	; (3640 <bt_recv+0x648>)
    3432:	f06f 0120 	mvn.w	r1, #32
    3436:	f7fe fdbb 	bl	1fb0 <atomic_and>
	if (!evt->status) {
    343a:	7833      	ldrb	r3, [r6, #0]
    343c:	b943      	cbnz	r3, 3450 <bt_recv+0x458>
		memcpy(pub_key, evt->key, 64);
    343e:	1c71      	adds	r1, r6, #1
    3440:	2240      	movs	r2, #64	; 0x40
    3442:	4880      	ldr	r0, [pc, #512]	; (3644 <bt_recv+0x64c>)
    3444:	f7fe fbda 	bl	1bfc <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3448:	2110      	movs	r1, #16
    344a:	487d      	ldr	r0, [pc, #500]	; (3640 <bt_recv+0x648>)
    344c:	f7fe fd9f 	bl	1f8e <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3450:	4b7d      	ldr	r3, [pc, #500]	; (3648 <bt_recv+0x650>)
    3452:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    3454:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3456:	2d00      	cmp	r5, #0
    3458:	f43f adf2 	beq.w	3040 <bt_recv+0x48>
		cb->func(evt->status ? NULL : evt->key);
    345c:	7832      	ldrb	r2, [r6, #0]
    345e:	682b      	ldr	r3, [r5, #0]
    3460:	2a00      	cmp	r2, #0
    3462:	bf0c      	ite	eq
    3464:	4638      	moveq	r0, r7
    3466:	2000      	movne	r0, #0
    3468:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    346a:	686d      	ldr	r5, [r5, #4]
    346c:	e7f3      	b.n	3456 <bt_recv+0x45e>
	if (dh_key_cb) {
    346e:	4d77      	ldr	r5, [pc, #476]	; (364c <bt_recv+0x654>)
    3470:	68a0      	ldr	r0, [r4, #8]
    3472:	682a      	ldr	r2, [r5, #0]
    3474:	2a00      	cmp	r2, #0
    3476:	f43f ade3 	beq.w	3040 <bt_recv+0x48>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    347a:	7803      	ldrb	r3, [r0, #0]
    347c:	b923      	cbnz	r3, 3488 <bt_recv+0x490>
    347e:	3001      	adds	r0, #1
    3480:	4790      	blx	r2
		dh_key_cb = NULL;
    3482:	2300      	movs	r3, #0
    3484:	602b      	str	r3, [r5, #0]
    3486:	e5db      	b.n	3040 <bt_recv+0x48>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3488:	2000      	movs	r0, #0
    348a:	e7f9      	b.n	3480 <bt_recv+0x488>
	u8_t num_reports = net_buf_pull_u8(buf);
    348c:	4628      	mov	r0, r5
    348e:	f00f fc87 	bl	12da0 <net_buf_simple_pull_u8>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3492:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 3640 <bt_recv+0x648>
	u8_t num_reports = net_buf_pull_u8(buf);
    3496:	9006      	str	r0, [sp, #24]
	while (num_reports--) {
    3498:	9b06      	ldr	r3, [sp, #24]
    349a:	2b00      	cmp	r3, #0
    349c:	f43f add0 	beq.w	3040 <bt_recv+0x48>
		info = (void *)buf->data;
    34a0:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    34a2:	2109      	movs	r1, #9
    34a4:	4628      	mov	r0, r5
    34a6:	f00f fc73 	bl	12d90 <net_buf_simple_pull>
		rssi = info->data[info->length];
    34aa:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    34ac:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    34ae:	4433      	add	r3, r6
			bt_addr_le_copy(&id_addr, &info->addr);
    34b0:	a80c      	add	r0, sp, #48	; 0x30
		rssi = info->data[info->length];
    34b2:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    34b6:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    34ba:	3b02      	subs	r3, #2
    34bc:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    34be:	4641      	mov	r1, r8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    34c0:	f200 8099 	bhi.w	35f6 <bt_recv+0x5fe>
			bt_addr_le_copy(&id_addr, &info->addr);
    34c4:	f7fe fd60 	bl	1f88 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    34c8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    34cc:	3b02      	subs	r3, #2
    34ce:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (scan_dev_found_cb) {
    34d2:	4b5f      	ldr	r3, [pc, #380]	; (3650 <bt_recv+0x658>)
    34d4:	681b      	ldr	r3, [r3, #0]
    34d6:	b1bb      	cbz	r3, 3508 <bt_recv+0x510>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    34d8:	4628      	mov	r0, r5
    34da:	f00f fc71 	bl	12dc0 <net_buf_simple_headroom>
	state->len = buf->len;
    34de:	89a3      	ldrh	r3, [r4, #12]
    34e0:	9307      	str	r3, [sp, #28]
			buf->len = info->length;
    34e2:	7a33      	ldrb	r3, [r6, #8]
    34e4:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    34e6:	4b5a      	ldr	r3, [pc, #360]	; (3650 <bt_recv+0x658>)
    34e8:	7832      	ldrb	r2, [r6, #0]
    34ea:	681b      	ldr	r3, [r3, #0]
	state->offset = net_buf_simple_headroom(buf);
    34ec:	4682      	mov	sl, r0
    34ee:	461f      	mov	r7, r3
    34f0:	fa4f f18b 	sxtb.w	r1, fp
    34f4:	462b      	mov	r3, r5
    34f6:	a80c      	add	r0, sp, #48	; 0x30
    34f8:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    34fa:	6923      	ldr	r3, [r4, #16]
    34fc:	fa13 f38a 	uxtah	r3, r3, sl
    3500:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    3502:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    3506:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3508:	2109      	movs	r1, #9
    350a:	4648      	mov	r0, r9
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    350c:	7832      	ldrb	r2, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    350e:	f7fe fdd1 	bl	20b4 <atomic_test_bit>
    3512:	4682      	mov	sl, r0
    3514:	2800      	cmp	r0, #0
    3516:	d164      	bne.n	35e2 <bt_recv+0x5ea>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    3518:	2a01      	cmp	r2, #1
    351a:	d862      	bhi.n	35e2 <bt_recv+0x5ea>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    351c:	2101      	movs	r1, #1
    351e:	a80c      	add	r0, sp, #48	; 0x30
    3520:	f000 fe3a 	bl	4198 <bt_conn_lookup_state_le>
	if (!conn) {
    3524:	4607      	mov	r7, r0
    3526:	2800      	cmp	r0, #0
    3528:	d05b      	beq.n	35e2 <bt_recv+0x5ea>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    352a:	2108      	movs	r1, #8
    352c:	4648      	mov	r0, r9
    352e:	f7fe fdc1 	bl	20b4 <atomic_test_bit>
    3532:	2800      	cmp	r0, #0
    3534:	d162      	bne.n	35fc <bt_recv+0x604>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    3536:	2102      	movs	r1, #2
    3538:	4648      	mov	r0, r9
    353a:	f7fe fdbb 	bl	20b4 <atomic_test_bit>
    353e:	b110      	cbz	r0, 3546 <bt_recv+0x54e>
			set_random_address(&bt_dev.id_addr.a);
    3540:	4844      	ldr	r0, [pc, #272]	; (3654 <bt_recv+0x65c>)
    3542:	f7fe fe69 	bl	2218 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3546:	493d      	ldr	r1, [pc, #244]	; (363c <bt_recv+0x644>)
    3548:	f107 004b 	add.w	r0, r7, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    354c:	f107 0a52 	add.w	sl, r7, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3550:	f7fe fd1a 	bl	1f88 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3554:	4641      	mov	r1, r8
    3556:	4650      	mov	r0, sl
    3558:	f7fe fd16 	bl	1f88 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    355c:	2119      	movs	r1, #25
    355e:	f242 000d 	movw	r0, #8205	; 0x200d
    3562:	f7fe fdb5 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    3566:	4683      	mov	fp, r0
    3568:	2800      	cmp	r0, #0
    356a:	d04c      	beq.n	3606 <bt_recv+0x60e>
	cp = net_buf_add(buf, sizeof(*cp));
    356c:	2119      	movs	r1, #25
    356e:	3008      	adds	r0, #8
    3570:	f00f fbe0 	bl	12d34 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3574:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    3576:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
    3578:	2100      	movs	r1, #0
    357a:	f7fe fb6b 	bl	1c54 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    357e:	2200      	movs	r2, #0
    3580:	2360      	movs	r3, #96	; 0x60
    3582:	f888 3000 	strb.w	r3, [r8]
    3586:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
    358a:	f888 3002 	strb.w	r3, [r8, #2]
    358e:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3592:	4651      	mov	r1, sl
    3594:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
    3598:	9207      	str	r2, [sp, #28]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    359a:	f7fe fcf5 	bl	1f88 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    359e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    35a2:	f888 300c 	strb.w	r3, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    35a6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
    35aa:	f8a8 300d 	strh.w	r3, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    35ae:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    35b2:	f8a8 300f 	strh.w	r3, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    35b6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    35ba:	f8a8 3011 	strh.w	r3, [r8, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    35be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    35c2:	f8a8 3013 	strh.w	r3, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    35c6:	9a07      	ldr	r2, [sp, #28]
    35c8:	4659      	mov	r1, fp
    35ca:	f242 000d 	movw	r0, #8205	; 0x200d
    35ce:	f7fe fdaf 	bl	2130 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    35d2:	b9c0      	cbnz	r0, 3606 <bt_recv+0x60e>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    35d4:	4638      	mov	r0, r7
    35d6:	2102      	movs	r1, #2
    35d8:	f000 feb2 	bl	4340 <bt_conn_set_state>
	bt_conn_unref(conn);
    35dc:	4638      	mov	r0, r7
    35de:	f000 fdf9 	bl	41d4 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    35e2:	7a31      	ldrb	r1, [r6, #8]
    35e4:	4628      	mov	r0, r5
    35e6:	3101      	adds	r1, #1
    35e8:	f00f fbd2 	bl	12d90 <net_buf_simple_pull>
    35ec:	9b06      	ldr	r3, [sp, #24]
    35ee:	3b01      	subs	r3, #1
    35f0:	b2db      	uxtb	r3, r3
    35f2:	9306      	str	r3, [sp, #24]
    35f4:	e750      	b.n	3498 <bt_recv+0x4a0>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    35f6:	f7fe fcc7 	bl	1f88 <bt_addr_le_copy>
    35fa:	e76a      	b.n	34d2 <bt_recv+0x4da>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    35fc:	4650      	mov	r0, sl
    35fe:	f7fe fdd5 	bl	21ac <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3602:	2800      	cmp	r0, #0
    3604:	d097      	beq.n	3536 <bt_recv+0x53e>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    3606:	231f      	movs	r3, #31
    3608:	723b      	strb	r3, [r7, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    360a:	2100      	movs	r1, #0
    360c:	4638      	mov	r0, r7
    360e:	f000 fe97 	bl	4340 <bt_conn_set_state>
	bt_conn_unref(conn);
    3612:	4638      	mov	r0, r7
    3614:	f000 fdde 	bl	41d4 <bt_conn_unref>
	bt_le_scan_update(false);
    3618:	2000      	movs	r0, #0
    361a:	f7fe ff85 	bl	2528 <bt_le_scan_update>
    361e:	e7e0      	b.n	35e2 <bt_recv+0x5ea>
    3620:	0001496d 	.word	0x0001496d
    3624:	000156bc 	.word	0x000156bc
    3628:	00014f60 	.word	0x00014f60
    362c:	0001570b 	.word	0x0001570b
    3630:	0001548c 	.word	0x0001548c
    3634:	00014f36 	.word	0x00014f36
    3638:	00014f49 	.word	0x00014f49
    363c:	20003a68 	.word	0x20003a68
    3640:	20003ad8 	.word	0x20003ad8
    3644:	20000290 	.word	0x20000290
    3648:	200002d0 	.word	0x200002d0
    364c:	2000028c 	.word	0x2000028c
    3650:	200002d8 	.word	0x200002d8
    3654:	20003a69 	.word	0x20003a69
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    3658:	89a5      	ldrh	r5, [r4, #12]
    365a:	68a0      	ldr	r0, [r4, #8]
    365c:	4629      	mov	r1, r5
    365e:	f7fe fb1d 	bl	1c9c <bt_hex>
    3662:	4b1d      	ldr	r3, [pc, #116]	; (36d8 <bt_recv+0x6e0>)
    3664:	9304      	str	r3, [sp, #16]
    3666:	9003      	str	r0, [sp, #12]
    3668:	e88d 0048 	stmia.w	sp, {r3, r6}
    366c:	4a1b      	ldr	r2, [pc, #108]	; (36dc <bt_recv+0x6e4>)
    366e:	4b1c      	ldr	r3, [pc, #112]	; (36e0 <bt_recv+0x6e8>)
    3670:	491c      	ldr	r1, [pc, #112]	; (36e4 <bt_recv+0x6ec>)
    3672:	481d      	ldr	r0, [pc, #116]	; (36e8 <bt_recv+0x6f0>)
    3674:	9502      	str	r5, [sp, #8]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3676:	f7fd fc89 	bl	f8c <printk>
    367a:	e4e1      	b.n	3040 <bt_recv+0x48>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    367c:	4a16      	ldr	r2, [pc, #88]	; (36d8 <bt_recv+0x6e0>)
    367e:	9202      	str	r2, [sp, #8]
    3680:	e88d 000c 	stmia.w	sp, {r2, r3}
    3684:	4917      	ldr	r1, [pc, #92]	; (36e4 <bt_recv+0x6ec>)
    3686:	4b19      	ldr	r3, [pc, #100]	; (36ec <bt_recv+0x6f4>)
    3688:	4a19      	ldr	r2, [pc, #100]	; (36f0 <bt_recv+0x6f8>)
    368a:	481a      	ldr	r0, [pc, #104]	; (36f4 <bt_recv+0x6fc>)
    368c:	f7fd fc7e 	bl	f8c <printk>
		net_buf_unref(buf);
    3690:	4620      	mov	r0, r4
    3692:	f00f fb1d 	bl	12cd0 <net_buf_unref>
		return -EINVAL;
    3696:	f06f 0015 	mvn.w	r0, #21
    369a:	e4f2      	b.n	3082 <bt_recv+0x8a>
	net_buf_pull(buf, sizeof(*hdr));
    369c:	f104 0508 	add.w	r5, r4, #8
    36a0:	2102      	movs	r1, #2
    36a2:	4628      	mov	r0, r5
    36a4:	f00f fb74 	bl	12d90 <net_buf_simple_pull>
	switch (hdr->evt) {
    36a8:	7836      	ldrb	r6, [r6, #0]
    36aa:	2e05      	cmp	r6, #5
    36ac:	f43f ad05 	beq.w	30ba <bt_recv+0xc2>
    36b0:	2e3e      	cmp	r6, #62	; 0x3e
    36b2:	f43f ad46 	beq.w	3142 <bt_recv+0x14a>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    36b6:	89a5      	ldrh	r5, [r4, #12]
    36b8:	68a0      	ldr	r0, [r4, #8]
    36ba:	4629      	mov	r1, r5
    36bc:	f7fe faee 	bl	1c9c <bt_hex>
    36c0:	4b05      	ldr	r3, [pc, #20]	; (36d8 <bt_recv+0x6e0>)
    36c2:	9304      	str	r3, [sp, #16]
    36c4:	9003      	str	r0, [sp, #12]
    36c6:	e88d 0048 	stmia.w	sp, {r3, r6}
    36ca:	9502      	str	r5, [sp, #8]
    36cc:	4b0a      	ldr	r3, [pc, #40]	; (36f8 <bt_recv+0x700>)
    36ce:	4a03      	ldr	r2, [pc, #12]	; (36dc <bt_recv+0x6e4>)
    36d0:	4904      	ldr	r1, [pc, #16]	; (36e4 <bt_recv+0x6ec>)
    36d2:	480a      	ldr	r0, [pc, #40]	; (36fc <bt_recv+0x704>)
    36d4:	e7cf      	b.n	3676 <bt_recv+0x67e>
    36d6:	bf00      	nop
    36d8:	0001496d 	.word	0x0001496d
    36dc:	00015704 	.word	0x00015704
    36e0:	00014f97 	.word	0x00014f97
    36e4:	0001570b 	.word	0x0001570b
    36e8:	000154c0 	.word	0x000154c0
    36ec:	00015028 	.word	0x00015028
    36f0:	000156bc 	.word	0x000156bc
    36f4:	00015527 	.word	0x00015527
    36f8:	00014fa9 	.word	0x00014fa9
    36fc:	000154f5 	.word	0x000154f5

00003700 <bt_recv_prio>:
{
    3700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3704:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3706:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3708:	2b01      	cmp	r3, #1
{
    370a:	b087      	sub	sp, #28
    370c:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    370e:	d00e      	beq.n	372e <bt_recv_prio+0x2e>
    3710:	4b65      	ldr	r3, [pc, #404]	; (38a8 <bt_recv_prio+0x1a8>)
    3712:	9301      	str	r3, [sp, #4]
    3714:	9300      	str	r3, [sp, #0]
    3716:	4a65      	ldr	r2, [pc, #404]	; (38ac <bt_recv_prio+0x1ac>)
    3718:	4b65      	ldr	r3, [pc, #404]	; (38b0 <bt_recv_prio+0x1b0>)
    371a:	4966      	ldr	r1, [pc, #408]	; (38b4 <bt_recv_prio+0x1b4>)
    371c:	4866      	ldr	r0, [pc, #408]	; (38b8 <bt_recv_prio+0x1b8>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    371e:	f7fd fc35 	bl	f8c <printk>
    3722:	4040      	eors	r0, r0
    3724:	f380 8811 	msr	BASEPRI, r0
    3728:	f04f 0004 	mov.w	r0, #4
    372c:	df02      	svc	2
    372e:	8982      	ldrh	r2, [r0, #12]
    3730:	2a01      	cmp	r2, #1
    3732:	d807      	bhi.n	3744 <bt_recv_prio+0x44>
    3734:	4b5c      	ldr	r3, [pc, #368]	; (38a8 <bt_recv_prio+0x1a8>)
    3736:	9301      	str	r3, [sp, #4]
    3738:	9300      	str	r3, [sp, #0]
    373a:	4a5c      	ldr	r2, [pc, #368]	; (38ac <bt_recv_prio+0x1ac>)
    373c:	4b5c      	ldr	r3, [pc, #368]	; (38b0 <bt_recv_prio+0x1b0>)
    373e:	495d      	ldr	r1, [pc, #372]	; (38b4 <bt_recv_prio+0x1b4>)
    3740:	485e      	ldr	r0, [pc, #376]	; (38bc <bt_recv_prio+0x1bc>)
    3742:	e7ec      	b.n	371e <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3744:	7832      	ldrb	r2, [r6, #0]
    3746:	2a13      	cmp	r2, #19
    3748:	f200 80a5 	bhi.w	3896 <bt_recv_prio+0x196>
    374c:	4093      	lsls	r3, r2
    374e:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3752:	f000 80a0 	beq.w	3896 <bt_recv_prio+0x196>
	net_buf_pull(buf, sizeof(*hdr));
    3756:	f100 0508 	add.w	r5, r0, #8
    375a:	2102      	movs	r1, #2
    375c:	4628      	mov	r0, r5
    375e:	f00f fb17 	bl	12d90 <net_buf_simple_pull>
	switch (hdr->evt) {
    3762:	7833      	ldrb	r3, [r6, #0]
    3764:	2b0f      	cmp	r3, #15
    3766:	d01d      	beq.n	37a4 <bt_recv_prio+0xa4>
    3768:	2b13      	cmp	r3, #19
    376a:	d02b      	beq.n	37c4 <bt_recv_prio+0xc4>
    376c:	2b0e      	cmp	r3, #14
    376e:	f040 8087 	bne.w	3880 <bt_recv_prio+0x180>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    3772:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    3774:	2103      	movs	r1, #3
    3776:	4628      	mov	r0, r5
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3778:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    377c:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    377e:	f00f fb07 	bl	12d90 <net_buf_simple_pull>
	status = buf->data[0];
    3782:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    3784:	4622      	mov	r2, r4
    3786:	7819      	ldrb	r1, [r3, #0]
    3788:	4638      	mov	r0, r7
    378a:	f7fe fc31 	bl	1ff0 <hci_cmd_done>
	if (ncmd) {
    378e:	b116      	cbz	r6, 3796 <bt_recv_prio+0x96>
    3790:	484b      	ldr	r0, [pc, #300]	; (38c0 <bt_recv_prio+0x1c0>)
    3792:	f010 fb34 	bl	13dfe <_impl_k_sem_give>
	net_buf_unref(buf);
    3796:	4620      	mov	r0, r4
    3798:	f00f fa9a 	bl	12cd0 <net_buf_unref>
}
    379c:	2000      	movs	r0, #0
    379e:	b007      	add	sp, #28
    37a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    37a4:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    37a6:	f8b6 8002 	ldrh.w	r8, [r6, #2]
	u8_t ncmd = evt->ncmd;
    37aa:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    37ac:	2104      	movs	r1, #4
    37ae:	4628      	mov	r0, r5
    37b0:	f00f faee 	bl	12d90 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    37b4:	4622      	mov	r2, r4
    37b6:	7831      	ldrb	r1, [r6, #0]
    37b8:	4640      	mov	r0, r8
    37ba:	f7fe fc19 	bl	1ff0 <hci_cmd_done>
	if (ncmd) {
    37be:	2f00      	cmp	r7, #0
    37c0:	d0e9      	beq.n	3796 <bt_recv_prio+0x96>
    37c2:	e7e5      	b.n	3790 <bt_recv_prio+0x90>
    37c4:	68a3      	ldr	r3, [r4, #8]
				BT_ERR("packets count mismatch");
    37c6:	4f38      	ldr	r7, [pc, #224]	; (38a8 <bt_recv_prio+0x1a8>)
    37c8:	f8df 9108 	ldr.w	r9, [pc, #264]	; 38d4 <bt_recv_prio+0x1d4>
    37cc:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 38ac <bt_recv_prio+0x1ac>
    37d0:	9304      	str	r3, [sp, #16]
	for (i = 0; i < evt->num_handles; i++) {
    37d2:	2600      	movs	r6, #0
    37d4:	9b04      	ldr	r3, [sp, #16]
    37d6:	781b      	ldrb	r3, [r3, #0]
    37d8:	429e      	cmp	r6, r3
    37da:	dadc      	bge.n	3796 <bt_recv_prio+0x96>
    37dc:	9b04      	ldr	r3, [sp, #16]
    37de:	eb03 0386 	add.w	r3, r3, r6, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    37e2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    37e6:	f8b3 8003 	ldrh.w	r8, [r3, #3]
	__asm__ volatile(
    37ea:	f04f 0120 	mov.w	r1, #32
    37ee:	f3ef 8b11 	mrs	fp, BASEPRI
    37f2:	f381 8811 	msr	BASEPRI, r1
		conn = bt_conn_lookup_handle(handle);
    37f6:	4610      	mov	r0, r2
    37f8:	9205      	str	r2, [sp, #20]
    37fa:	f000 fc9d 	bl	4138 <bt_conn_lookup_handle>
		if (!conn) {
    37fe:	9a05      	ldr	r2, [sp, #20]
    3800:	4605      	mov	r5, r0
    3802:	b960      	cbnz	r0, 381e <bt_recv_prio+0x11e>
			BT_ERR("No connection for handle %u", handle);
    3804:	9201      	str	r2, [sp, #4]
    3806:	9702      	str	r7, [sp, #8]
    3808:	9700      	str	r7, [sp, #0]
    380a:	464b      	mov	r3, r9
    380c:	4652      	mov	r2, sl
    380e:	4929      	ldr	r1, [pc, #164]	; (38b4 <bt_recv_prio+0x1b4>)
    3810:	482c      	ldr	r0, [pc, #176]	; (38c4 <bt_recv_prio+0x1c4>)
    3812:	f7fd fbbb 	bl	f8c <printk>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3816:	f38b 8811 	msr	BASEPRI, fp
	for (i = 0; i < evt->num_handles; i++) {
    381a:	3601      	adds	r6, #1
    381c:	e7da      	b.n	37d4 <bt_recv_prio+0xd4>
    381e:	f38b 8811 	msr	BASEPRI, fp
			k_fifo_put(&conn->tx_notify, node);
    3822:	f100 0b18 	add.w	fp, r0, #24
		while (count--) {
    3826:	f1b8 0f00 	cmp.w	r8, #0
    382a:	d01c      	beq.n	3866 <bt_recv_prio+0x166>
	__asm__ volatile(
    382c:	f04f 0220 	mov.w	r2, #32
    3830:	f3ef 8e11 	mrs	lr, BASEPRI
    3834:	f382 8811 	msr	BASEPRI, r2
    3838:	6929      	ldr	r1, [r5, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    383a:	b129      	cbz	r1, 3848 <bt_recv_prio+0x148>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    383c:	696a      	ldr	r2, [r5, #20]
	return node->next;
    383e:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    3840:	6128      	str	r0, [r5, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3842:	4291      	cmp	r1, r2
	list->tail = node;
    3844:	bf08      	it	eq
    3846:	6168      	streq	r0, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3848:	f38e 8811 	msr	BASEPRI, lr
    384c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    3850:	fa1f f883 	uxth.w	r8, r3
			if (!node) {
    3854:	b959      	cbnz	r1, 386e <bt_recv_prio+0x16e>
				BT_ERR("packets count mismatch");
    3856:	9701      	str	r7, [sp, #4]
    3858:	9700      	str	r7, [sp, #0]
    385a:	464b      	mov	r3, r9
    385c:	4652      	mov	r2, sl
    385e:	4915      	ldr	r1, [pc, #84]	; (38b4 <bt_recv_prio+0x1b4>)
    3860:	4819      	ldr	r0, [pc, #100]	; (38c8 <bt_recv_prio+0x1c8>)
    3862:	f7fd fb93 	bl	f8c <printk>
		bt_conn_unref(conn);
    3866:	4628      	mov	r0, r5
    3868:	f000 fcb4 	bl	41d4 <bt_conn_unref>
    386c:	e7d5      	b.n	381a <bt_recv_prio+0x11a>
			k_fifo_put(&conn->tx_notify, node);
    386e:	4658      	mov	r0, fp
    3870:	f010 f800 	bl	13874 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    3874:	4628      	mov	r0, r5
    3876:	f000 f96f 	bl	3b58 <bt_conn_get_pkts>
    387a:	f010 fac0 	bl	13dfe <_impl_k_sem_give>
    387e:	e7d2      	b.n	3826 <bt_recv_prio+0x126>
		net_buf_unref(buf);
    3880:	4620      	mov	r0, r4
    3882:	f00f fa25 	bl	12cd0 <net_buf_unref>
		BT_ASSERT(0);
    3886:	4b08      	ldr	r3, [pc, #32]	; (38a8 <bt_recv_prio+0x1a8>)
    3888:	9301      	str	r3, [sp, #4]
    388a:	9300      	str	r3, [sp, #0]
    388c:	4a07      	ldr	r2, [pc, #28]	; (38ac <bt_recv_prio+0x1ac>)
    388e:	4b08      	ldr	r3, [pc, #32]	; (38b0 <bt_recv_prio+0x1b0>)
    3890:	4908      	ldr	r1, [pc, #32]	; (38b4 <bt_recv_prio+0x1b4>)
    3892:	480e      	ldr	r0, [pc, #56]	; (38cc <bt_recv_prio+0x1cc>)
    3894:	e743      	b.n	371e <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3896:	4b04      	ldr	r3, [pc, #16]	; (38a8 <bt_recv_prio+0x1a8>)
    3898:	9301      	str	r3, [sp, #4]
    389a:	9300      	str	r3, [sp, #0]
    389c:	4a03      	ldr	r2, [pc, #12]	; (38ac <bt_recv_prio+0x1ac>)
    389e:	4b04      	ldr	r3, [pc, #16]	; (38b0 <bt_recv_prio+0x1b0>)
    38a0:	4904      	ldr	r1, [pc, #16]	; (38b4 <bt_recv_prio+0x1b4>)
    38a2:	480b      	ldr	r0, [pc, #44]	; (38d0 <bt_recv_prio+0x1d0>)
    38a4:	e73b      	b.n	371e <bt_recv_prio+0x1e>
    38a6:	bf00      	nop
    38a8:	0001496d 	.word	0x0001496d
    38ac:	000156bc 	.word	0x000156bc
    38b0:	00015030 	.word	0x00015030
    38b4:	0001570b 	.word	0x0001570b
    38b8:	0001558a 	.word	0x0001558a
    38bc:	000155ce 	.word	0x000155ce
    38c0:	20003b10 	.word	0x20003b10
    38c4:	00015608 	.word	0x00015608
    38c8:	00015634 	.word	0x00015634
    38cc:	0001565b 	.word	0x0001565b
    38d0:	0001567e 	.word	0x0001567e
    38d4:	00014eda 	.word	0x00014eda

000038d8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    38d8:	4a08      	ldr	r2, [pc, #32]	; (38fc <bt_hci_driver_register+0x24>)
    38da:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    38de:	b93b      	cbnz	r3, 38f0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    38e0:	68c1      	ldr	r1, [r0, #12]
    38e2:	b141      	cbz	r1, 38f6 <bt_hci_driver_register+0x1e>
    38e4:	6901      	ldr	r1, [r0, #16]
    38e6:	b131      	cbz	r1, 38f6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    38e8:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    38ec:	4618      	mov	r0, r3
    38ee:	4770      	bx	lr
		return -EALREADY;
    38f0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    38f4:	4770      	bx	lr
		return -EINVAL;
    38f6:	f06f 0015 	mvn.w	r0, #21
}
    38fa:	4770      	bx	lr
    38fc:	20003a68 	.word	0x20003a68

00003900 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3900:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    3902:	4d2a      	ldr	r5, [pc, #168]	; (39ac <bt_enable+0xac>)
    3904:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    3908:	b086      	sub	sp, #24
    390a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    390c:	b96b      	cbnz	r3, 392a <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    390e:	4b28      	ldr	r3, [pc, #160]	; (39b0 <bt_enable+0xb0>)
    3910:	9301      	str	r3, [sp, #4]
    3912:	9300      	str	r3, [sp, #0]
    3914:	4a27      	ldr	r2, [pc, #156]	; (39b4 <bt_enable+0xb4>)
    3916:	4b28      	ldr	r3, [pc, #160]	; (39b8 <bt_enable+0xb8>)
    3918:	4928      	ldr	r1, [pc, #160]	; (39bc <bt_enable+0xbc>)
    391a:	4829      	ldr	r0, [pc, #164]	; (39c0 <bt_enable+0xc0>)
    391c:	f7fd fb36 	bl	f8c <printk>
		return -ENODEV;
    3920:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    3924:	4620      	mov	r0, r4
    3926:	b006      	add	sp, #24
    3928:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    392a:	2101      	movs	r1, #1
    392c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    3930:	f7fe fb2d 	bl	1f8e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    3934:	f010 0001 	ands.w	r0, r0, #1
    3938:	d134      	bne.n	39a4 <bt_enable+0xa4>
	ready_cb = cb;
    393a:	4b22      	ldr	r3, [pc, #136]	; (39c4 <bt_enable+0xc4>)

    393c:	4922      	ldr	r1, [pc, #136]	; (39c8 <bt_enable+0xc8>)
    393e:	601e      	str	r6, [r3, #0]
    3940:	f06f 0308 	mvn.w	r3, #8
    3944:	9005      	str	r0, [sp, #20]
    3946:	9004      	str	r0, [sp, #16]
    3948:	9303      	str	r3, [sp, #12]
    394a:	9002      	str	r0, [sp, #8]
    394c:	9001      	str	r0, [sp, #4]
    394e:	9000      	str	r0, [sp, #0]
    3950:	4b1e      	ldr	r3, [pc, #120]	; (39cc <bt_enable+0xcc>)
    3952:	481f      	ldr	r0, [pc, #124]	; (39d0 <bt_enable+0xd0>)
    3954:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    3958:	f010 fc4e 	bl	141f8 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    395c:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    3960:	68db      	ldr	r3, [r3, #12]
    3962:	4798      	blx	r3
	if (err) {
    3964:	4604      	mov	r4, r0
    3966:	b150      	cbz	r0, 397e <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    3968:	4b11      	ldr	r3, [pc, #68]	; (39b0 <bt_enable+0xb0>)
    396a:	9302      	str	r3, [sp, #8]
    396c:	e88d 0018 	stmia.w	sp, {r3, r4}
    3970:	4a10      	ldr	r2, [pc, #64]	; (39b4 <bt_enable+0xb4>)
    3972:	4b11      	ldr	r3, [pc, #68]	; (39b8 <bt_enable+0xb8>)
    3974:	4911      	ldr	r1, [pc, #68]	; (39bc <bt_enable+0xbc>)
    3976:	4817      	ldr	r0, [pc, #92]	; (39d4 <bt_enable+0xd4>)
    3978:	f7fd fb08 	bl	f8c <printk>
		return err;
    397c:	e7d2      	b.n	3924 <bt_enable+0x24>
	if (!cb) {
    397e:	b926      	cbnz	r6, 398a <bt_enable+0x8a>
}
    3980:	b006      	add	sp, #24
    3982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    3986:	f7fe be01 	b.w	258c <bt_init>
    398a:	2101      	movs	r1, #1
    398c:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    3990:	f7fe fafd 	bl	1f8e <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3994:	07c3      	lsls	r3, r0, #31
    3996:	d4c5      	bmi.n	3924 <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    3998:	f105 0164 	add.w	r1, r5, #100	; 0x64
    399c:	480e      	ldr	r0, [pc, #56]	; (39d8 <bt_enable+0xd8>)
    399e:	f00f ff69 	bl	13874 <k_queue_append>
    39a2:	e7bf      	b.n	3924 <bt_enable+0x24>
		return -EALREADY;
    39a4:	f06f 0444 	mvn.w	r4, #68	; 0x44
    39a8:	e7bc      	b.n	3924 <bt_enable+0x24>
    39aa:	bf00      	nop
    39ac:	20003a68 	.word	0x20003a68
    39b0:	0001496d 	.word	0x0001496d
    39b4:	000156bc 	.word	0x000156bc
    39b8:	0001503d 	.word	0x0001503d
    39bc:	0001570b 	.word	0x0001570b
    39c0:	000150f0 	.word	0x000150f0
    39c4:	200002d4 	.word	0x200002d4
    39c8:	20001a10 	.word	0x20001a10
    39cc:	00002e6d 	.word	0x00002e6d
    39d0:	200002dc 	.word	0x200002dc
    39d4:	00015119 	.word	0x00015119
    39d8:	20001990 	.word	0x20001990

000039dc <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    39dc:	2000      	movs	r0, #0
    39de:	4770      	bx	lr

000039e0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    39e0:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    39e2:	7803      	ldrb	r3, [r0, #0]
    39e4:	2b01      	cmp	r3, #1
{
    39e6:	4605      	mov	r5, r0
    39e8:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    39ea:	d810      	bhi.n	3a0e <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    39ec:	7843      	ldrb	r3, [r0, #1]
    39ee:	2b01      	cmp	r3, #1
    39f0:	d80d      	bhi.n	3a0e <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    39f2:	8841      	ldrh	r1, [r0, #2]
    39f4:	1f0b      	subs	r3, r1, #4
    39f6:	b29b      	uxth	r3, r3
    39f8:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    39fc:	4283      	cmp	r3, r0
    39fe:	d806      	bhi.n	3a0e <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    3a00:	88aa      	ldrh	r2, [r5, #4]
    3a02:	1f13      	subs	r3, r2, #4
    3a04:	b29b      	uxth	r3, r3
    3a06:	4283      	cmp	r3, r0
    3a08:	d801      	bhi.n	3a0e <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    3a0a:	4291      	cmp	r1, r2
    3a0c:	d22b      	bcs.n	3a66 <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    3a0e:	f06f 0415 	mvn.w	r4, #21
    3a12:	e00e      	b.n	3a32 <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    3a14:	2108      	movs	r1, #8
    3a16:	4819      	ldr	r0, [pc, #100]	; (3a7c <bt_le_scan_start+0x9c>)
    3a18:	f7fe fb4c 	bl	20b4 <atomic_test_bit>
    3a1c:	b158      	cbz	r0, 3a36 <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3a1e:	4610      	mov	r0, r2
    3a20:	f7fe fbc4 	bl	21ac <set_le_scan_enable>
		if (err) {
    3a24:	4604      	mov	r4, r0
    3a26:	b130      	cbz	r0, 3a36 <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a28:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3a2c:	4813      	ldr	r0, [pc, #76]	; (3a7c <bt_le_scan_start+0x9c>)
    3a2e:	f7fe fabf 	bl	1fb0 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    3a32:	4620      	mov	r0, r4
    3a34:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    3a36:	786b      	ldrb	r3, [r5, #1]
    3a38:	b17b      	cbz	r3, 3a5a <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3a3e:	480f      	ldr	r0, [pc, #60]	; (3a7c <bt_le_scan_start+0x9c>)
    3a40:	f7fe faa5 	bl	1f8e <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    3a44:	88aa      	ldrh	r2, [r5, #4]
    3a46:	8869      	ldrh	r1, [r5, #2]
    3a48:	7828      	ldrb	r0, [r5, #0]
    3a4a:	f7fe fd29 	bl	24a0 <start_le_scan>
	if (err) {
    3a4e:	4604      	mov	r4, r0
    3a50:	2800      	cmp	r0, #0
    3a52:	d1e9      	bne.n	3a28 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    3a54:	4b0a      	ldr	r3, [pc, #40]	; (3a80 <bt_le_scan_start+0xa0>)
    3a56:	601e      	str	r6, [r3, #0]
	return 0;
    3a58:	e7eb      	b.n	3a32 <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a5a:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    3a5e:	4807      	ldr	r0, [pc, #28]	; (3a7c <bt_le_scan_start+0x9c>)
    3a60:	f7fe faa6 	bl	1fb0 <atomic_and>
    3a64:	e7ee      	b.n	3a44 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a66:	f44f 7100 	mov.w	r1, #512	; 0x200
    3a6a:	4804      	ldr	r0, [pc, #16]	; (3a7c <bt_le_scan_start+0x9c>)
    3a6c:	f7fe fa8f 	bl	1f8e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3a70:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    3a74:	d0ce      	beq.n	3a14 <bt_le_scan_start+0x34>
		return -EALREADY;
    3a76:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3a7a:	e7da      	b.n	3a32 <bt_le_scan_start+0x52>
    3a7c:	20003ad8 	.word	0x20003ad8
    3a80:	200002d8 	.word	0x200002d8

00003a84 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    3a84:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a86:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3a8a:	4807      	ldr	r0, [pc, #28]	; (3aa8 <bt_le_scan_stop+0x24>)
    3a8c:	f7fe fa90 	bl	1fb0 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3a90:	0583      	lsls	r3, r0, #22
    3a92:	d506      	bpl.n	3aa2 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    3a94:	4b05      	ldr	r3, [pc, #20]	; (3aac <bt_le_scan_stop+0x28>)
    3a96:	2000      	movs	r0, #0
    3a98:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    3a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    3a9e:	f7fe bd43 	b.w	2528 <bt_le_scan_update>
}
    3aa2:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3aa6:	bd08      	pop	{r3, pc}
    3aa8:	20003ad8 	.word	0x20003ad8
    3aac:	200002d8 	.word	0x200002d8

00003ab0 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3ab0:	b538      	push	{r3, r4, r5, lr}
    3ab2:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3ab4:	4805      	ldr	r0, [pc, #20]	; (3acc <bt_buf_get_rx+0x1c>)
    3ab6:	f00f f8db 	bl	12c70 <net_buf_alloc_fixed>
#endif

	if (buf) {
    3aba:	4604      	mov	r4, r0
    3abc:	b120      	cbz	r0, 3ac8 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3abe:	2100      	movs	r1, #0
    3ac0:	3008      	adds	r0, #8
    3ac2:	f00f f8f4 	bl	12cae <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    3ac6:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3ac8:	4620      	mov	r0, r4
    3aca:	bd38      	pop	{r3, r4, r5, pc}
    3acc:	20003f94 	.word	0x20003f94

00003ad0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3ad0:	b510      	push	{r4, lr}
    3ad2:	4601      	mov	r1, r0
	__asm__ volatile(
    3ad4:	f04f 0320 	mov.w	r3, #32
    3ad8:	f3ef 8011 	mrs	r0, BASEPRI
    3adc:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3ae0:	4a0b      	ldr	r2, [pc, #44]	; (3b10 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    3ae2:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    3ae4:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    3ae8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3aec:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    3af0:	b924      	cbnz	r4, 3afc <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3af2:	2001      	movs	r0, #1
}
    3af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3af8:	f7ff bfda 	b.w	3ab0 <bt_buf_get_rx>
    3afc:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3afe:	f104 0008 	add.w	r0, r4, #8
    3b02:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    3b04:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3b06:	4619      	mov	r1, r3
    3b08:	f00f f8d1 	bl	12cae <net_buf_simple_reserve>
}
    3b0c:	4620      	mov	r0, r4
    3b0e:	bd10      	pop	{r4, pc}
    3b10:	20003a68 	.word	0x20003a68

00003b14 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    3b14:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3b16:	4b06      	ldr	r3, [pc, #24]	; (3b30 <notify_connected+0x1c>)
    3b18:	681c      	ldr	r4, [r3, #0]
{
    3b1a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3b1c:	b904      	cbnz	r4, 3b20 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    3b1e:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    3b20:	6823      	ldr	r3, [r4, #0]
    3b22:	b113      	cbz	r3, 3b2a <notify_connected+0x16>
			cb->connected(conn, conn->err);
    3b24:	7a29      	ldrb	r1, [r5, #8]
    3b26:	4628      	mov	r0, r5
    3b28:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    3b2a:	6924      	ldr	r4, [r4, #16]
    3b2c:	e7f6      	b.n	3b1c <notify_connected+0x8>
    3b2e:	bf00      	nop
    3b30:	2000034c 	.word	0x2000034c

00003b34 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3b34:	f3bf 8f5b 	dmb	ish
    3b38:	6800      	ldr	r0, [r0, #0]
    3b3a:	f3bf 8f5b 	dmb	ish
}
    3b3e:	4770      	bx	lr

00003b40 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    3b40:	8943      	ldrh	r3, [r0, #10]
{
    3b42:	b510      	push	{r4, lr}
    3b44:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    3b46:	b12b      	cbz	r3, 3b54 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    3b48:	68c0      	ldr	r0, [r0, #12]
    3b4a:	f00f f8c1 	bl	12cd0 <net_buf_unref>
	conn->rx = NULL;
    3b4e:	2300      	movs	r3, #0
    3b50:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    3b52:	8163      	strh	r3, [r4, #10]
    3b54:	bd10      	pop	{r4, pc}
	...

00003b58 <bt_conn_get_pkts>:
}
    3b58:	4800      	ldr	r0, [pc, #0]	; (3b5c <bt_conn_get_pkts+0x4>)
    3b5a:	4770      	bx	lr
    3b5c:	20003af4 	.word	0x20003af4

00003b60 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    3b60:	4b08      	ldr	r3, [pc, #32]	; (3b84 <notify_le_param_updated+0x24>)
{
    3b62:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    3b64:	681c      	ldr	r4, [r3, #0]
{
    3b66:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3b68:	b904      	cbnz	r4, 3b6c <notify_le_param_updated+0xc>
}
    3b6a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    3b6c:	68e6      	ldr	r6, [r4, #12]
    3b6e:	b13e      	cbz	r6, 3b80 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    3b70:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    3b74:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    3b78:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    3b7c:	4628      	mov	r0, r5
    3b7e:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    3b80:	6924      	ldr	r4, [r4, #16]
    3b82:	e7f1      	b.n	3b68 <notify_le_param_updated+0x8>
    3b84:	2000034c 	.word	0x2000034c

00003b88 <le_param_req>:
{
    3b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b8a:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    3b8c:	4608      	mov	r0, r1
{
    3b8e:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    3b90:	f7fe fb9a 	bl	22c8 <bt_le_conn_params_valid>
    3b94:	4605      	mov	r5, r0
    3b96:	b910      	cbnz	r0, 3b9e <le_param_req+0x16>
		return false;
    3b98:	2500      	movs	r5, #0
}
    3b9a:	4628      	mov	r0, r5
    3b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    3b9e:	4b09      	ldr	r3, [pc, #36]	; (3bc4 <le_param_req+0x3c>)
    3ba0:	681c      	ldr	r4, [r3, #0]
    3ba2:	2c00      	cmp	r4, #0
    3ba4:	d0f9      	beq.n	3b9a <le_param_req+0x12>
		if (!cb->le_param_req) {
    3ba6:	68a3      	ldr	r3, [r4, #8]
    3ba8:	b90b      	cbnz	r3, 3bae <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    3baa:	6924      	ldr	r4, [r4, #16]
    3bac:	e7f9      	b.n	3ba2 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    3bae:	4631      	mov	r1, r6
    3bb0:	4638      	mov	r0, r7
    3bb2:	4798      	blx	r3
    3bb4:	2800      	cmp	r0, #0
    3bb6:	d0ef      	beq.n	3b98 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    3bb8:	4630      	mov	r0, r6
    3bba:	f7fe fb85 	bl	22c8 <bt_le_conn_params_valid>
    3bbe:	2800      	cmp	r0, #0
    3bc0:	d1f3      	bne.n	3baa <le_param_req+0x22>
    3bc2:	e7e9      	b.n	3b98 <le_param_req+0x10>
    3bc4:	2000034c 	.word	0x2000034c

00003bc8 <bt_conn_cb_register>:
	cb->_next = callback_list;
    3bc8:	4b02      	ldr	r3, [pc, #8]	; (3bd4 <bt_conn_cb_register+0xc>)
    3bca:	681a      	ldr	r2, [r3, #0]
    3bcc:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    3bce:	6018      	str	r0, [r3, #0]
    3bd0:	4770      	bx	lr
    3bd2:	bf00      	nop
    3bd4:	2000034c 	.word	0x2000034c

00003bd8 <bt_conn_recv>:
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    3bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3bdc:	b086      	sub	sp, #24
    3bde:	4690      	mov	r8, r2
    3be0:	460d      	mov	r5, r1
	struct bt_l2cap_hdr *hdr;
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    3be2:	4e66      	ldr	r6, [pc, #408]	; (3d7c <bt_conn_recv+0x1a4>)
{
    3be4:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3be6:	f010 f8fb 	bl	13de0 <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    3bea:	9605      	str	r6, [sp, #20]
    3bec:	f8cd 8010 	str.w	r8, [sp, #16]
    3bf0:	89ab      	ldrh	r3, [r5, #12]
    3bf2:	9303      	str	r3, [sp, #12]
    3bf4:	8823      	ldrh	r3, [r4, #0]
    3bf6:	9302      	str	r3, [sp, #8]
    3bf8:	9001      	str	r0, [sp, #4]
    3bfa:	9600      	str	r6, [sp, #0]
    3bfc:	4b60      	ldr	r3, [pc, #384]	; (3d80 <bt_conn_recv+0x1a8>)
    3bfe:	4a61      	ldr	r2, [pc, #388]	; (3d84 <bt_conn_recv+0x1ac>)
    3c00:	4961      	ldr	r1, [pc, #388]	; (3d88 <bt_conn_recv+0x1b0>)
    3c02:	4862      	ldr	r0, [pc, #392]	; (3d8c <bt_conn_recv+0x1b4>)
    3c04:	f7fd f9c2 	bl	f8c <printk>

	/* Check packet boundary flags */
	switch (flags) {
    3c08:	f1b8 0f01 	cmp.w	r8, #1
    3c0c:	4637      	mov	r7, r6
    3c0e:	d038      	beq.n	3c82 <bt_conn_recv+0xaa>
    3c10:	f1b8 0f02 	cmp.w	r8, #2
    3c14:	f040 8094 	bne.w	3d40 <bt_conn_recv+0x168>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    3c18:	68ab      	ldr	r3, [r5, #8]
    3c1a:	881e      	ldrh	r6, [r3, #0]
    3c1c:	f010 f8e0 	bl	13de0 <_impl_k_current_get>

		BT_DBG("First, len %u final %u", buf->len, len);
    3c20:	9704      	str	r7, [sp, #16]
    3c22:	9603      	str	r6, [sp, #12]
    3c24:	89ab      	ldrh	r3, [r5, #12]
    3c26:	9302      	str	r3, [sp, #8]
    3c28:	9001      	str	r0, [sp, #4]
    3c2a:	4b55      	ldr	r3, [pc, #340]	; (3d80 <bt_conn_recv+0x1a8>)
    3c2c:	9700      	str	r7, [sp, #0]
    3c2e:	4a55      	ldr	r2, [pc, #340]	; (3d84 <bt_conn_recv+0x1ac>)
    3c30:	4955      	ldr	r1, [pc, #340]	; (3d88 <bt_conn_recv+0x1b0>)
    3c32:	4857      	ldr	r0, [pc, #348]	; (3d90 <bt_conn_recv+0x1b8>)
    3c34:	f7fd f9aa 	bl	f8c <printk>

		if (conn->rx_len) {
    3c38:	8963      	ldrh	r3, [r4, #10]
    3c3a:	b153      	cbz	r3, 3c52 <bt_conn_recv+0x7a>
			BT_ERR("Unexpected first L2CAP frame");
    3c3c:	9701      	str	r7, [sp, #4]
    3c3e:	9700      	str	r7, [sp, #0]
    3c40:	4b4f      	ldr	r3, [pc, #316]	; (3d80 <bt_conn_recv+0x1a8>)
    3c42:	4a54      	ldr	r2, [pc, #336]	; (3d94 <bt_conn_recv+0x1bc>)
    3c44:	4950      	ldr	r1, [pc, #320]	; (3d88 <bt_conn_recv+0x1b0>)
    3c46:	4854      	ldr	r0, [pc, #336]	; (3d98 <bt_conn_recv+0x1c0>)
    3c48:	f7fd f9a0 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    3c4c:	4620      	mov	r0, r4
    3c4e:	f7ff ff77 	bl	3b40 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    3c52:	89ab      	ldrh	r3, [r5, #12]
    3c54:	1af6      	subs	r6, r6, r3
    3c56:	3604      	adds	r6, #4
    3c58:	8166      	strh	r6, [r4, #10]
    3c5a:	f010 f8c1 	bl	13de0 <_impl_k_current_get>
		BT_DBG("rx_len %u", conn->rx_len);
    3c5e:	8963      	ldrh	r3, [r4, #10]
    3c60:	9302      	str	r3, [sp, #8]
    3c62:	9001      	str	r0, [sp, #4]
    3c64:	4b46      	ldr	r3, [pc, #280]	; (3d80 <bt_conn_recv+0x1a8>)
    3c66:	9703      	str	r7, [sp, #12]
    3c68:	9700      	str	r7, [sp, #0]
    3c6a:	4a46      	ldr	r2, [pc, #280]	; (3d84 <bt_conn_recv+0x1ac>)
    3c6c:	4946      	ldr	r1, [pc, #280]	; (3d88 <bt_conn_recv+0x1b0>)
    3c6e:	484b      	ldr	r0, [pc, #300]	; (3d9c <bt_conn_recv+0x1c4>)
    3c70:	f7fd f98c 	bl	f8c <printk>
		if (conn->rx_len) {
    3c74:	8963      	ldrh	r3, [r4, #10]
    3c76:	2b00      	cmp	r3, #0
    3c78:	d051      	beq.n	3d1e <bt_conn_recv+0x146>
			conn->rx = buf;
    3c7a:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    3c7c:	b006      	add	sp, #24
    3c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!conn->rx_len) {
    3c82:	8963      	ldrh	r3, [r4, #10]
    3c84:	b983      	cbnz	r3, 3ca8 <bt_conn_recv+0xd0>
			BT_ERR("Unexpected L2CAP continuation");
    3c86:	4b3e      	ldr	r3, [pc, #248]	; (3d80 <bt_conn_recv+0x1a8>)
    3c88:	4a42      	ldr	r2, [pc, #264]	; (3d94 <bt_conn_recv+0x1bc>)
    3c8a:	493f      	ldr	r1, [pc, #252]	; (3d88 <bt_conn_recv+0x1b0>)
    3c8c:	4844      	ldr	r0, [pc, #272]	; (3da0 <bt_conn_recv+0x1c8>)
    3c8e:	9601      	str	r6, [sp, #4]
    3c90:	9600      	str	r6, [sp, #0]
			BT_ERR("L2CAP data overflow");
    3c92:	f7fd f97b 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    3c96:	4620      	mov	r0, r4
    3c98:	f7ff ff52 	bl	3b40 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    3c9c:	4628      	mov	r0, r5
}
    3c9e:	b006      	add	sp, #24
    3ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			net_buf_unref(buf);
    3ca4:	f00f b814 	b.w	12cd0 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    3ca8:	89aa      	ldrh	r2, [r5, #12]
    3caa:	429a      	cmp	r2, r3
    3cac:	d906      	bls.n	3cbc <bt_conn_recv+0xe4>
			BT_ERR("L2CAP data overflow");
    3cae:	9601      	str	r6, [sp, #4]
    3cb0:	9600      	str	r6, [sp, #0]
    3cb2:	4b33      	ldr	r3, [pc, #204]	; (3d80 <bt_conn_recv+0x1a8>)
    3cb4:	4a37      	ldr	r2, [pc, #220]	; (3d94 <bt_conn_recv+0x1bc>)
    3cb6:	4934      	ldr	r1, [pc, #208]	; (3d88 <bt_conn_recv+0x1b0>)
    3cb8:	483a      	ldr	r0, [pc, #232]	; (3da4 <bt_conn_recv+0x1cc>)
    3cba:	e7ea      	b.n	3c92 <bt_conn_recv+0xba>
    3cbc:	f010 f890 	bl	13de0 <_impl_k_current_get>
		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);
    3cc0:	8963      	ldrh	r3, [r4, #10]
    3cc2:	9604      	str	r6, [sp, #16]
    3cc4:	9303      	str	r3, [sp, #12]
    3cc6:	89ab      	ldrh	r3, [r5, #12]
    3cc8:	9302      	str	r3, [sp, #8]
    3cca:	9001      	str	r0, [sp, #4]
    3ccc:	4b2c      	ldr	r3, [pc, #176]	; (3d80 <bt_conn_recv+0x1a8>)
    3cce:	4a2d      	ldr	r2, [pc, #180]	; (3d84 <bt_conn_recv+0x1ac>)
    3cd0:	492d      	ldr	r1, [pc, #180]	; (3d88 <bt_conn_recv+0x1b0>)
    3cd2:	9600      	str	r6, [sp, #0]
    3cd4:	4834      	ldr	r0, [pc, #208]	; (3da8 <bt_conn_recv+0x1d0>)
    3cd6:	f7fd f959 	bl	f8c <printk>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    3cda:	68e0      	ldr	r0, [r4, #12]
    3cdc:	f8b5 800c 	ldrh.w	r8, [r5, #12]
    3ce0:	3008      	adds	r0, #8
    3ce2:	f00f f871 	bl	12dc8 <net_buf_simple_tailroom>
    3ce6:	4580      	cmp	r8, r0
    3ce8:	d906      	bls.n	3cf8 <bt_conn_recv+0x120>
			BT_ERR("Not enough buffer space for L2CAP data");
    3cea:	9601      	str	r6, [sp, #4]
    3cec:	9600      	str	r6, [sp, #0]
    3cee:	4b24      	ldr	r3, [pc, #144]	; (3d80 <bt_conn_recv+0x1a8>)
    3cf0:	4a28      	ldr	r2, [pc, #160]	; (3d94 <bt_conn_recv+0x1bc>)
    3cf2:	4925      	ldr	r1, [pc, #148]	; (3d88 <bt_conn_recv+0x1b0>)
    3cf4:	482d      	ldr	r0, [pc, #180]	; (3dac <bt_conn_recv+0x1d4>)
    3cf6:	e7cc      	b.n	3c92 <bt_conn_recv+0xba>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    3cf8:	68e0      	ldr	r0, [r4, #12]
    3cfa:	89aa      	ldrh	r2, [r5, #12]
    3cfc:	68a9      	ldr	r1, [r5, #8]
    3cfe:	3008      	adds	r0, #8
    3d00:	f00f f81e 	bl	12d40 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    3d04:	8963      	ldrh	r3, [r4, #10]
    3d06:	89aa      	ldrh	r2, [r5, #12]
    3d08:	1a9b      	subs	r3, r3, r2
    3d0a:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    3d0c:	4628      	mov	r0, r5
    3d0e:	f00e ffdf 	bl	12cd0 <net_buf_unref>
		if (conn->rx_len) {
    3d12:	8963      	ldrh	r3, [r4, #10]
    3d14:	2b00      	cmp	r3, #0
    3d16:	d1b1      	bne.n	3c7c <bt_conn_recv+0xa4>
		buf = conn->rx;
    3d18:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    3d1a:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    3d1c:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    3d1e:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    3d20:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    3d22:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    3d24:	1d19      	adds	r1, r3, #4
    3d26:	4291      	cmp	r1, r2
    3d28:	d014      	beq.n	3d54 <bt_conn_recv+0x17c>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    3d2a:	9202      	str	r2, [sp, #8]
    3d2c:	9301      	str	r3, [sp, #4]
    3d2e:	9703      	str	r7, [sp, #12]
    3d30:	9700      	str	r7, [sp, #0]
    3d32:	4b13      	ldr	r3, [pc, #76]	; (3d80 <bt_conn_recv+0x1a8>)
    3d34:	4a17      	ldr	r2, [pc, #92]	; (3d94 <bt_conn_recv+0x1bc>)
    3d36:	4914      	ldr	r1, [pc, #80]	; (3d88 <bt_conn_recv+0x1b0>)
    3d38:	481d      	ldr	r0, [pc, #116]	; (3db0 <bt_conn_recv+0x1d8>)
    3d3a:	f7fd f927 	bl	f8c <printk>
    3d3e:	e7ad      	b.n	3c9c <bt_conn_recv+0xc4>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    3d40:	9602      	str	r6, [sp, #8]
    3d42:	e88d 0140 	stmia.w	sp, {r6, r8}
    3d46:	4b0e      	ldr	r3, [pc, #56]	; (3d80 <bt_conn_recv+0x1a8>)
    3d48:	4a12      	ldr	r2, [pc, #72]	; (3d94 <bt_conn_recv+0x1bc>)
    3d4a:	490f      	ldr	r1, [pc, #60]	; (3d88 <bt_conn_recv+0x1b0>)
    3d4c:	4819      	ldr	r0, [pc, #100]	; (3db4 <bt_conn_recv+0x1dc>)
    3d4e:	f7fd f91d 	bl	f8c <printk>
    3d52:	e7a0      	b.n	3c96 <bt_conn_recv+0xbe>
    3d54:	f010 f844 	bl	13de0 <_impl_k_current_get>
	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
    3d58:	9703      	str	r7, [sp, #12]
    3d5a:	89ab      	ldrh	r3, [r5, #12]
    3d5c:	9302      	str	r3, [sp, #8]
    3d5e:	9001      	str	r0, [sp, #4]
    3d60:	9700      	str	r7, [sp, #0]
    3d62:	4b07      	ldr	r3, [pc, #28]	; (3d80 <bt_conn_recv+0x1a8>)
    3d64:	4a07      	ldr	r2, [pc, #28]	; (3d84 <bt_conn_recv+0x1ac>)
    3d66:	4908      	ldr	r1, [pc, #32]	; (3d88 <bt_conn_recv+0x1b0>)
    3d68:	4813      	ldr	r0, [pc, #76]	; (3db8 <bt_conn_recv+0x1e0>)
    3d6a:	f7fd f90f 	bl	f8c <printk>
	bt_l2cap_recv(conn, buf);
    3d6e:	4629      	mov	r1, r5
    3d70:	4620      	mov	r0, r4
}
    3d72:	b006      	add	sp, #24
    3d74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_recv(conn, buf);
    3d78:	f001 b8b4 	b.w	4ee4 <bt_l2cap_recv>
    3d7c:	0001496d 	.word	0x0001496d
    3d80:	000159b0 	.word	0x000159b0
    3d84:	00015b7a 	.word	0x00015b7a
    3d88:	0001570b 	.word	0x0001570b
    3d8c:	00015b81 	.word	0x00015b81
    3d90:	00015bb2 	.word	0x00015bb2
    3d94:	000156bc 	.word	0x000156bc
    3d98:	00015bde 	.word	0x00015bde
    3d9c:	00015c0b 	.word	0x00015c0b
    3da0:	00015c2a 	.word	0x00015c2a
    3da4:	00015c58 	.word	0x00015c58
    3da8:	00015c7c 	.word	0x00015c7c
    3dac:	00015ca8 	.word	0x00015ca8
    3db0:	00015d0d 	.word	0x00015d0d
    3db4:	00015cdf 	.word	0x00015cdf
    3db8:	00015d39 	.word	0x00015d39

00003dbc <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    3dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dbe:	460c      	mov	r4, r1
    3dc0:	b087      	sub	sp, #28
    3dc2:	4606      	mov	r6, r0
    3dc4:	4617      	mov	r7, r2
    3dc6:	f010 f80b 	bl	13de0 <_impl_k_current_get>
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    3dca:	89a3      	ldrh	r3, [r4, #12]
    3dcc:	4d13      	ldr	r5, [pc, #76]	; (3e1c <bt_conn_send_cb+0x60>)
    3dce:	9303      	str	r3, [sp, #12]
    3dd0:	8833      	ldrh	r3, [r6, #0]
    3dd2:	9302      	str	r3, [sp, #8]
    3dd4:	9001      	str	r0, [sp, #4]
    3dd6:	4b12      	ldr	r3, [pc, #72]	; (3e20 <bt_conn_send_cb+0x64>)
    3dd8:	9505      	str	r5, [sp, #20]
    3dda:	9704      	str	r7, [sp, #16]
    3ddc:	9500      	str	r5, [sp, #0]
    3dde:	4a11      	ldr	r2, [pc, #68]	; (3e24 <bt_conn_send_cb+0x68>)
    3de0:	4911      	ldr	r1, [pc, #68]	; (3e28 <bt_conn_send_cb+0x6c>)
    3de2:	4812      	ldr	r0, [pc, #72]	; (3e2c <bt_conn_send_cb+0x70>)
    3de4:	f7fd f8d2 	bl	f8c <printk>

	if (conn->state != BT_CONN_CONNECTED) {
    3de8:	7a73      	ldrb	r3, [r6, #9]
    3dea:	2b03      	cmp	r3, #3
    3dec:	d00e      	beq.n	3e0c <bt_conn_send_cb+0x50>
		BT_ERR("not connected!");
    3dee:	4b0c      	ldr	r3, [pc, #48]	; (3e20 <bt_conn_send_cb+0x64>)
    3df0:	4a0f      	ldr	r2, [pc, #60]	; (3e30 <bt_conn_send_cb+0x74>)
    3df2:	490d      	ldr	r1, [pc, #52]	; (3e28 <bt_conn_send_cb+0x6c>)
    3df4:	9501      	str	r5, [sp, #4]
    3df6:	9500      	str	r5, [sp, #0]
    3df8:	480e      	ldr	r0, [pc, #56]	; (3e34 <bt_conn_send_cb+0x78>)
    3dfa:	f7fd f8c7 	bl	f8c <printk>
		net_buf_unref(buf);
    3dfe:	4620      	mov	r0, r4
    3e00:	f00e ff66 	bl	12cd0 <net_buf_unref>
		return -ENOTCONN;
    3e04:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    3e08:	b007      	add	sp, #28
    3e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_put(&conn->tx_queue, buf);
    3e0c:	f106 0028 	add.w	r0, r6, #40	; 0x28
	conn_tx(buf)->cb = cb;
    3e10:	6167      	str	r7, [r4, #20]
	net_buf_put(&conn->tx_queue, buf);
    3e12:	4621      	mov	r1, r4
    3e14:	f00e ff4f 	bl	12cb6 <net_buf_put>
	return 0;
    3e18:	2000      	movs	r0, #0
    3e1a:	e7f5      	b.n	3e08 <bt_conn_send_cb+0x4c>
    3e1c:	0001496d 	.word	0x0001496d
    3e20:	000159bd 	.word	0x000159bd
    3e24:	00015b7a 	.word	0x00015b7a
    3e28:	0001570b 	.word	0x0001570b
    3e2c:	00015d9d 	.word	0x00015d9d
    3e30:	000156bc 	.word	0x000156bc
    3e34:	00015dd2 	.word	0x00015dd2

00003e38 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    3e38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    3e3c:	4606      	mov	r6, r0
    3e3e:	f00f ffcf 	bl	13de0 <_impl_k_current_get>
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);
    3e42:	4b13      	ldr	r3, [pc, #76]	; (3e90 <bt_conn_notify_tx+0x58>)
    3e44:	9303      	str	r3, [sp, #12]
    3e46:	9001      	str	r0, [sp, #4]
    3e48:	9300      	str	r3, [sp, #0]
    3e4a:	9602      	str	r6, [sp, #8]
    3e4c:	4b11      	ldr	r3, [pc, #68]	; (3e94 <bt_conn_notify_tx+0x5c>)
    3e4e:	4a12      	ldr	r2, [pc, #72]	; (3e98 <bt_conn_notify_tx+0x60>)
    3e50:	4912      	ldr	r1, [pc, #72]	; (3e9c <bt_conn_notify_tx+0x64>)
    3e52:	4813      	ldr	r0, [pc, #76]	; (3ea0 <bt_conn_notify_tx+0x68>)
    3e54:	4d13      	ldr	r5, [pc, #76]	; (3ea4 <bt_conn_notify_tx+0x6c>)
    3e56:	f7fd f899 	bl	f8c <printk>

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    3e5a:	f106 0718 	add.w	r7, r6, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    3e5e:	f04f 0800 	mov.w	r8, #0
    3e62:	2100      	movs	r1, #0
    3e64:	4638      	mov	r0, r7
    3e66:	f00f fd29 	bl	138bc <_impl_k_queue_get>
    3e6a:	4604      	mov	r4, r0
    3e6c:	b910      	cbnz	r0, 3e74 <bt_conn_notify_tx+0x3c>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    3e6e:	b004      	add	sp, #16
    3e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    3e74:	6863      	ldr	r3, [r4, #4]
    3e76:	b10b      	cbz	r3, 3e7c <bt_conn_notify_tx+0x44>
			tx->cb(conn);
    3e78:	4630      	mov	r0, r6
    3e7a:	4798      	blx	r3
    3e7c:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    3e7e:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    3e80:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    3e82:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    3e86:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    3e88:	2b00      	cmp	r3, #0
    3e8a:	d1ea      	bne.n	3e62 <bt_conn_notify_tx+0x2a>
	list->tail = node;
    3e8c:	606c      	str	r4, [r5, #4]
    3e8e:	e7e6      	b.n	3e5e <bt_conn_notify_tx+0x26>
    3e90:	0001496d 	.word	0x0001496d
    3e94:	000159cd 	.word	0x000159cd
    3e98:	00015b7a 	.word	0x00015b7a
    3e9c:	0001570b 	.word	0x0001570b
    3ea0:	00015ab1 	.word	0x00015ab1
    3ea4:	200003f8 	.word	0x200003f8

00003ea8 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    3ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3eac:	b088      	sub	sp, #32
    3eae:	460f      	mov	r7, r1
    3eb0:	4614      	mov	r4, r2
	struct bt_hci_acl_hdr *hdr;
	bt_conn_tx_cb_t cb;
	sys_snode_t *node;
	int err;

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    3eb2:	4e57      	ldr	r6, [pc, #348]	; (4010 <send_frag+0x168>)
{
    3eb4:	4605      	mov	r5, r0
    3eb6:	4699      	mov	r9, r3
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3eb8:	f00f ff92 	bl	13de0 <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    3ebc:	9606      	str	r6, [sp, #24]
    3ebe:	9405      	str	r4, [sp, #20]
    3ec0:	89bb      	ldrh	r3, [r7, #12]
    3ec2:	4a54      	ldr	r2, [pc, #336]	; (4014 <send_frag+0x16c>)
    3ec4:	9304      	str	r3, [sp, #16]
    3ec6:	9001      	str	r0, [sp, #4]
    3ec8:	4b53      	ldr	r3, [pc, #332]	; (4018 <send_frag+0x170>)
    3eca:	4954      	ldr	r1, [pc, #336]	; (401c <send_frag+0x174>)
    3ecc:	9703      	str	r7, [sp, #12]
    3ece:	9502      	str	r5, [sp, #8]
    3ed0:	9600      	str	r6, [sp, #0]
    3ed2:	4853      	ldr	r0, [pc, #332]	; (4020 <send_frag+0x178>)
    3ed4:	f7fd f85a 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3edc:	4851      	ldr	r0, [pc, #324]	; (4024 <send_frag+0x17c>)
    3ede:	f00f ffb6 	bl	13e4e <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    3ee2:	4b51      	ldr	r3, [pc, #324]	; (4028 <send_frag+0x180>)
    3ee4:	f103 0040 	add.w	r0, r3, #64	; 0x40
    3ee8:	f7ff fe24 	bl	3b34 <atomic_get>
    3eec:	46b0      	mov	r8, r6
    3eee:	b130      	cbz	r0, 3efe <send_frag+0x56>
		if (conns[i].state == BT_CONN_CONNECTED ||
    3ef0:	7a5a      	ldrb	r2, [r3, #9]
    3ef2:	3a03      	subs	r2, #3
    3ef4:	2a01      	cmp	r2, #1
    3ef6:	d802      	bhi.n	3efe <send_frag+0x56>
			bt_conn_notify_tx(&conns[i]);
    3ef8:	4618      	mov	r0, r3
    3efa:	f7ff ff9d 	bl	3e38 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    3efe:	7a6b      	ldrb	r3, [r5, #9]
    3f00:	2b03      	cmp	r3, #3
    3f02:	d166      	bne.n	3fd2 <send_frag+0x12a>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    3f04:	2104      	movs	r1, #4
    3f06:	f107 0008 	add.w	r0, r7, #8
    3f0a:	f00e ff39 	bl	12d80 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    3f0e:	882a      	ldrh	r2, [r5, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));

	cb = conn_tx(buf)->cb;
    3f10:	f8d7 a014 	ldr.w	sl, [r7, #20]
    3f14:	4e45      	ldr	r6, [pc, #276]	; (402c <send_frag+0x184>)
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    3f16:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    3f1a:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3f1c:	89bb      	ldrh	r3, [r7, #12]
    3f1e:	3b04      	subs	r3, #4
    3f20:	8043      	strh	r3, [r0, #2]
    3f22:	2302      	movs	r3, #2
    3f24:	753b      	strb	r3, [r7, #20]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3f26:	f00f ff5b 	bl	13de0 <_impl_k_current_get>
	BT_DBG("conn %p cb %p", conn, cb);
    3f2a:	f8cd 8010 	str.w	r8, [sp, #16]
    3f2e:	9001      	str	r0, [sp, #4]
    3f30:	f8cd a00c 	str.w	sl, [sp, #12]
    3f34:	9502      	str	r5, [sp, #8]
    3f36:	f8cd 8000 	str.w	r8, [sp]
    3f3a:	4b3d      	ldr	r3, [pc, #244]	; (4030 <send_frag+0x188>)
    3f3c:	4a35      	ldr	r2, [pc, #212]	; (4014 <send_frag+0x16c>)
    3f3e:	4937      	ldr	r1, [pc, #220]	; (401c <send_frag+0x174>)
    3f40:	483c      	ldr	r0, [pc, #240]	; (4034 <send_frag+0x18c>)
    3f42:	f7fd f823 	bl	f8c <printk>
    3f46:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3f48:	6872      	ldr	r2, [r6, #4]
	return node->next;
    3f4a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    3f4c:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3f4e:	4294      	cmp	r4, r2
	list->tail = node;
    3f50:	bf08      	it	eq
    3f52:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    3f54:	f8c4 a004 	str.w	sl, [r4, #4]
	__asm__ volatile(
    3f58:	f04f 0320 	mov.w	r3, #32
    3f5c:	f3ef 8211 	mrs	r2, BASEPRI
    3f60:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    3f64:	2300      	movs	r3, #0
    3f66:	6023      	str	r3, [r4, #0]
    3f68:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    3f6a:	2b00      	cmp	r3, #0
    3f6c:	d140      	bne.n	3ff0 <send_frag+0x148>
	list->tail = node;
    3f6e:	616c      	str	r4, [r5, #20]
	list->head = node;
    3f70:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3f72:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    3f76:	4638      	mov	r0, r7
    3f78:	f7fe fa52 	bl	2420 <bt_send>
	if (err) {
    3f7c:	2800      	cmp	r0, #0
    3f7e:	d043      	beq.n	4008 <send_frag+0x160>
		BT_ERR("Unable to send to driver (err %d)", err);
    3f80:	9001      	str	r0, [sp, #4]
    3f82:	f8cd 8008 	str.w	r8, [sp, #8]
    3f86:	f8cd 8000 	str.w	r8, [sp]
    3f8a:	4b23      	ldr	r3, [pc, #140]	; (4018 <send_frag+0x170>)
    3f8c:	4a2a      	ldr	r2, [pc, #168]	; (4038 <send_frag+0x190>)
    3f8e:	4923      	ldr	r1, [pc, #140]	; (401c <send_frag+0x174>)
    3f90:	482a      	ldr	r0, [pc, #168]	; (403c <send_frag+0x194>)
    3f92:	f7fc fffb 	bl	f8c <printk>
	__asm__ volatile(
    3f96:	f04f 0320 	mov.w	r3, #32
    3f9a:	f3ef 8111 	mrs	r1, BASEPRI
    3f9e:	f383 8811 	msr	BASEPRI, r3
    3fa2:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    3fa4:	2200      	movs	r2, #0
    3fa6:	b153      	cbz	r3, 3fbe <send_frag+0x116>
    3fa8:	429c      	cmp	r4, r3
    3faa:	d12a      	bne.n	4002 <send_frag+0x15a>
    3fac:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    3fae:	bb12      	cbnz	r2, 3ff6 <send_frag+0x14e>
    3fb0:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    3fb2:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    3fb4:	4294      	cmp	r4, r2
    3fb6:	d100      	bne.n	3fba <send_frag+0x112>
	list->tail = node;
    3fb8:	616b      	str	r3, [r5, #20]
	parent->next = child;
    3fba:	2300      	movs	r3, #0
    3fbc:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3fbe:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    3fc2:	2300      	movs	r3, #0
    3fc4:	6063      	str	r3, [r4, #4]
    3fc6:	6833      	ldr	r3, [r6, #0]
    3fc8:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    3fca:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    3fcc:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    3fce:	b903      	cbnz	r3, 3fd2 <send_frag+0x12a>
	list->tail = node;
    3fd0:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3fd2:	4814      	ldr	r0, [pc, #80]	; (4024 <send_frag+0x17c>)
    3fd4:	f00f ff13 	bl	13dfe <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    3fd8:	f1b9 0f00 	cmp.w	r9, #0
    3fdc:	d004      	beq.n	3fe8 <send_frag+0x140>
		net_buf_unref(buf);
    3fde:	4638      	mov	r0, r7
    3fe0:	f00e fe76 	bl	12cd0 <net_buf_unref>
	}
	return false;
    3fe4:	f04f 0900 	mov.w	r9, #0
}
    3fe8:	4648      	mov	r0, r9
    3fea:	b008      	add	sp, #32
    3fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	parent->next = child;
    3ff0:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3ff2:	616c      	str	r4, [r5, #20]
    3ff4:	e7bd      	b.n	3f72 <send_frag+0xca>
	parent->next = child;
    3ff6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    3ff8:	696b      	ldr	r3, [r5, #20]
    3ffa:	429c      	cmp	r4, r3
	list->tail = node;
    3ffc:	bf08      	it	eq
    3ffe:	616a      	streq	r2, [r5, #20]
    4000:	e7db      	b.n	3fba <send_frag+0x112>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4002:	461a      	mov	r2, r3
    4004:	681b      	ldr	r3, [r3, #0]
    4006:	e7ce      	b.n	3fa6 <send_frag+0xfe>
	return true;
    4008:	f04f 0901 	mov.w	r9, #1
    400c:	e7ec      	b.n	3fe8 <send_frag+0x140>
    400e:	bf00      	nop
    4010:	0001496d 	.word	0x0001496d
    4014:	00015b7a 	.word	0x00015b7a
    4018:	000159ee 	.word	0x000159ee
    401c:	0001570b 	.word	0x0001570b
    4020:	00015e84 	.word	0x00015e84
    4024:	20003af4 	.word	0x20003af4
    4028:	20000360 	.word	0x20000360
    402c:	200003f8 	.word	0x200003f8
    4030:	000159df 	.word	0x000159df
    4034:	00015ebc 	.word	0x00015ebc
    4038:	000156bc 	.word	0x000156bc
    403c:	00015145 	.word	0x00015145

00004040 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    4040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    4042:	4c17      	ldr	r4, [pc, #92]	; (40a0 <bt_conn_add_le+0x60>)
    4044:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    4048:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    404a:	4630      	mov	r0, r6
    404c:	f7ff fd72 	bl	3b34 <atomic_get>
    4050:	4605      	mov	r5, r0
    4052:	b108      	cbz	r0, 4058 <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    4054:	2000      	movs	r0, #0
    4056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    4058:	4601      	mov	r1, r0
    405a:	2298      	movs	r2, #152	; 0x98
    405c:	4620      	mov	r0, r4
    405e:	f7fd fdf9 	bl	1c54 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4062:	f3bf 8f5b 	dmb	ish
    4066:	2301      	movs	r3, #1
    4068:	e856 2f00 	ldrex	r2, [r6]
    406c:	e846 3100 	strex	r1, r3, [r6]
    4070:	2900      	cmp	r1, #0
    4072:	d1f9      	bne.n	4068 <bt_conn_add_le+0x28>
    4074:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    4078:	2207      	movs	r2, #7
    407a:	4639      	mov	r1, r7
    407c:	f104 0044 	add.w	r0, r4, #68	; 0x44
    4080:	f7fd fdbc 	bl	1bfc <memcpy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    4084:	2318      	movs	r3, #24
    4086:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    408a:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    408c:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    4090:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4092:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4096:	4903      	ldr	r1, [pc, #12]	; (40a4 <bt_conn_add_le+0x64>)
    4098:	f010 f998 	bl	143cc <k_delayed_work_init>
			conn = &conns[i];
    409c:	4620      	mov	r0, r4

	return conn;
}
    409e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40a0:	20000360 	.word	0x20000360
    40a4:	00004839 	.word	0x00004839

000040a8 <bt_conn_addr_le_cmp>:

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    40a8:	b538      	push	{r3, r4, r5, lr}
    40aa:	460d      	mov	r5, r1
    40ac:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    40ae:	f100 0144 	add.w	r1, r0, #68	; 0x44
    40b2:	2207      	movs	r2, #7
    40b4:	4628      	mov	r0, r5
    40b6:	f7fd fd8c 	bl	1bd2 <memcmp>
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    40ba:	b160      	cbz	r0, 40d6 <bt_conn_addr_le_cmp+0x2e>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    40bc:	78e3      	ldrb	r3, [r4, #3]
    40be:	2207      	movs	r2, #7
    40c0:	b933      	cbnz	r3, 40d0 <bt_conn_addr_le_cmp+0x28>
    40c2:	f104 0152 	add.w	r1, r4, #82	; 0x52
    40c6:	4628      	mov	r0, r5
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}
    40c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    40cc:	f7fd bd81 	b.w	1bd2 <memcmp>
    40d0:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    40d4:	e7f7      	b.n	40c6 <bt_conn_addr_le_cmp+0x1e>
    40d6:	bd38      	pop	{r3, r4, r5, pc}

000040d8 <bt_conn_ref>:
		}
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
    40d8:	b530      	push	{r4, r5, lr}
    40da:	4604      	mov	r4, r0
    40dc:	b087      	sub	sp, #28
	atomic_inc(&conn->ref);
    40de:	f100 0540 	add.w	r5, r0, #64	; 0x40
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    40e2:	f3bf 8f5b 	dmb	ish
    40e6:	e855 3f00 	ldrex	r3, [r5]
    40ea:	3301      	adds	r3, #1
    40ec:	e845 3200 	strex	r2, r3, [r5]
    40f0:	2a00      	cmp	r2, #0
    40f2:	d1f8      	bne.n	40e6 <bt_conn_ref+0xe>
    40f4:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    40f8:	f00f fe72 	bl	13de0 <_impl_k_current_get>
    40fc:	4602      	mov	r2, r0

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    40fe:	4628      	mov	r0, r5
    4100:	8821      	ldrh	r1, [r4, #0]
    4102:	f7ff fd17 	bl	3b34 <atomic_get>
    4106:	4b07      	ldr	r3, [pc, #28]	; (4124 <bt_conn_ref+0x4c>)
    4108:	9304      	str	r3, [sp, #16]
    410a:	9003      	str	r0, [sp, #12]
    410c:	9102      	str	r1, [sp, #8]
    410e:	9201      	str	r2, [sp, #4]
    4110:	9300      	str	r3, [sp, #0]
    4112:	4a05      	ldr	r2, [pc, #20]	; (4128 <bt_conn_ref+0x50>)
    4114:	4b05      	ldr	r3, [pc, #20]	; (412c <bt_conn_ref+0x54>)
    4116:	4906      	ldr	r1, [pc, #24]	; (4130 <bt_conn_ref+0x58>)
    4118:	4806      	ldr	r0, [pc, #24]	; (4134 <bt_conn_ref+0x5c>)
    411a:	f7fc ff37 	bl	f8c <printk>

	return conn;
}
    411e:	4620      	mov	r0, r4
    4120:	b007      	add	sp, #28
    4122:	bd30      	pop	{r4, r5, pc}
    4124:	0001496d 	.word	0x0001496d
    4128:	00015b7a 	.word	0x00015b7a
    412c:	00015a3d 	.word	0x00015a3d
    4130:	0001570b 	.word	0x0001570b
    4134:	00015d77 	.word	0x00015d77

00004138 <bt_conn_lookup_handle>:
{
    4138:	b508      	push	{r3, lr}
		if (!atomic_get(&conns[i].ref)) {
    413a:	4b0a      	ldr	r3, [pc, #40]	; (4164 <bt_conn_lookup_handle+0x2c>)
{
    413c:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    413e:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4142:	f7ff fcf7 	bl	3b34 <atomic_get>
    4146:	b158      	cbz	r0, 4160 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    4148:	7a5a      	ldrb	r2, [r3, #9]
    414a:	3a03      	subs	r2, #3
    414c:	2a01      	cmp	r2, #1
    414e:	d807      	bhi.n	4160 <bt_conn_lookup_handle+0x28>
		if (conns[i].handle == handle) {
    4150:	881a      	ldrh	r2, [r3, #0]
    4152:	428a      	cmp	r2, r1
    4154:	d104      	bne.n	4160 <bt_conn_lookup_handle+0x28>
			return bt_conn_ref(&conns[i]);
    4156:	4618      	mov	r0, r3
}
    4158:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return bt_conn_ref(&conns[i]);
    415c:	f7ff bfbc 	b.w	40d8 <bt_conn_ref>
}
    4160:	2000      	movs	r0, #0
    4162:	bd08      	pop	{r3, pc}
    4164:	20000360 	.word	0x20000360

00004168 <bt_conn_lookup_addr_le>:
{
    4168:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    416a:	4c0a      	ldr	r4, [pc, #40]	; (4194 <bt_conn_lookup_addr_le+0x2c>)
{
    416c:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    416e:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4172:	f7ff fcdf 	bl	3b34 <atomic_get>
    4176:	b150      	cbz	r0, 418e <bt_conn_lookup_addr_le+0x26>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4178:	78a3      	ldrb	r3, [r4, #2]
    417a:	b943      	cbnz	r3, 418e <bt_conn_lookup_addr_le+0x26>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    417c:	4620      	mov	r0, r4
    417e:	f7ff ff93 	bl	40a8 <bt_conn_addr_le_cmp>
    4182:	b920      	cbnz	r0, 418e <bt_conn_lookup_addr_le+0x26>
			return bt_conn_ref(&conns[i]);
    4184:	4620      	mov	r0, r4
}
    4186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return bt_conn_ref(&conns[i]);
    418a:	f7ff bfa5 	b.w	40d8 <bt_conn_ref>
}
    418e:	2000      	movs	r0, #0
    4190:	bd10      	pop	{r4, pc}
    4192:	bf00      	nop
    4194:	20000360 	.word	0x20000360

00004198 <bt_conn_lookup_state_le>:
{
    4198:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    419a:	4c0d      	ldr	r4, [pc, #52]	; (41d0 <bt_conn_lookup_state_le+0x38>)
{
    419c:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    419e:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    41a2:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    41a4:	f7ff fcc6 	bl	3b34 <atomic_get>
    41a8:	b180      	cbz	r0, 41cc <bt_conn_lookup_state_le+0x34>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    41aa:	78a2      	ldrb	r2, [r4, #2]
    41ac:	b972      	cbnz	r2, 41cc <bt_conn_lookup_state_le+0x34>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    41ae:	b93b      	cbnz	r3, 41c0 <bt_conn_lookup_state_le+0x28>
		if (conns[i].state == state) {
    41b0:	7a63      	ldrb	r3, [r4, #9]
    41b2:	42ab      	cmp	r3, r5
    41b4:	d10a      	bne.n	41cc <bt_conn_lookup_state_le+0x34>
			return bt_conn_ref(&conns[i]);
    41b6:	4806      	ldr	r0, [pc, #24]	; (41d0 <bt_conn_lookup_state_le+0x38>)
}
    41b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_conn_ref(&conns[i]);
    41bc:	f7ff bf8c 	b.w	40d8 <bt_conn_ref>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    41c0:	4619      	mov	r1, r3
    41c2:	4620      	mov	r0, r4
    41c4:	f7ff ff70 	bl	40a8 <bt_conn_addr_le_cmp>
    41c8:	2800      	cmp	r0, #0
    41ca:	d0f1      	beq.n	41b0 <bt_conn_lookup_state_le+0x18>
}
    41cc:	2000      	movs	r0, #0
    41ce:	bd38      	pop	{r3, r4, r5, pc}
    41d0:	20000360 	.word	0x20000360

000041d4 <bt_conn_unref>:

void bt_conn_unref(struct bt_conn *conn)
{
    41d4:	b530      	push	{r4, r5, lr}
    41d6:	4605      	mov	r5, r0
    41d8:	b087      	sub	sp, #28
	atomic_dec(&conn->ref);
    41da:	f100 0440 	add.w	r4, r0, #64	; 0x40
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    41de:	f3bf 8f5b 	dmb	ish
    41e2:	e854 3f00 	ldrex	r3, [r4]
    41e6:	3b01      	subs	r3, #1
    41e8:	e844 3200 	strex	r2, r3, [r4]
    41ec:	2a00      	cmp	r2, #0
    41ee:	d1f8      	bne.n	41e2 <bt_conn_unref+0xe>
    41f0:	f3bf 8f5b 	dmb	ish
    41f4:	f00f fdf4 	bl	13de0 <_impl_k_current_get>
    41f8:	4602      	mov	r2, r0

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    41fa:	4620      	mov	r0, r4
    41fc:	8829      	ldrh	r1, [r5, #0]
    41fe:	f7ff fc99 	bl	3b34 <atomic_get>
    4202:	4b07      	ldr	r3, [pc, #28]	; (4220 <bt_conn_unref+0x4c>)
    4204:	9304      	str	r3, [sp, #16]
    4206:	9003      	str	r0, [sp, #12]
    4208:	9102      	str	r1, [sp, #8]
    420a:	9201      	str	r2, [sp, #4]
    420c:	9300      	str	r3, [sp, #0]
    420e:	4a05      	ldr	r2, [pc, #20]	; (4224 <bt_conn_unref+0x50>)
    4210:	4b05      	ldr	r3, [pc, #20]	; (4228 <bt_conn_unref+0x54>)
    4212:	4906      	ldr	r1, [pc, #24]	; (422c <bt_conn_unref+0x58>)
    4214:	4806      	ldr	r0, [pc, #24]	; (4230 <bt_conn_unref+0x5c>)
    4216:	f7fc feb9 	bl	f8c <printk>
}
    421a:	b007      	add	sp, #28
    421c:	bd30      	pop	{r4, r5, pc}
    421e:	bf00      	nop
    4220:	0001496d 	.word	0x0001496d
    4224:	00015b7a 	.word	0x00015b7a
    4228:	00015a49 	.word	0x00015a49
    422c:	0001570b 	.word	0x0001570b
    4230:	00015d77 	.word	0x00015d77

00004234 <conn_cleanup>:
{
    4234:	b538      	push	{r3, r4, r5, lr}
    4236:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    4238:	f100 0528 	add.w	r5, r0, #40	; 0x28
    423c:	2100      	movs	r1, #0
    423e:	4628      	mov	r0, r5
    4240:	f00e fd1c 	bl	12c7c <net_buf_get>
    4244:	b950      	cbnz	r0, 425c <conn_cleanup+0x28>
	bt_conn_notify_tx(conn);
    4246:	4620      	mov	r0, r4
    4248:	f7ff fdf6 	bl	3e38 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    424c:	4620      	mov	r0, r4
    424e:	f7ff fc77 	bl	3b40 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    4252:	4620      	mov	r0, r4
}
    4254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    4258:	f7ff bfbc 	b.w	41d4 <bt_conn_unref>
		net_buf_unref(buf);
    425c:	f00e fd38 	bl	12cd0 <net_buf_unref>
    4260:	e7ec      	b.n	423c <conn_cleanup+0x8>
	...

00004264 <bt_conn_prepare_events>:
{
    4264:	b5f0      	push	{r4, r5, r6, r7, lr}
    4266:	b085      	sub	sp, #20
    4268:	4606      	mov	r6, r0
    426a:	f00f fdb9 	bl	13de0 <_impl_k_current_get>
	BT_DBG("");
    426e:	4d2a      	ldr	r5, [pc, #168]	; (4318 <bt_conn_prepare_events+0xb4>)
    4270:	9001      	str	r0, [sp, #4]
    4272:	4b2a      	ldr	r3, [pc, #168]	; (431c <bt_conn_prepare_events+0xb8>)
    4274:	4a2a      	ldr	r2, [pc, #168]	; (4320 <bt_conn_prepare_events+0xbc>)
    4276:	492b      	ldr	r1, [pc, #172]	; (4324 <bt_conn_prepare_events+0xc0>)
    4278:	9502      	str	r5, [sp, #8]
    427a:	9500      	str	r5, [sp, #0]
    427c:	482a      	ldr	r0, [pc, #168]	; (4328 <bt_conn_prepare_events+0xc4>)
    427e:	f7fc fe85 	bl	f8c <printk>
	conn_change.signaled = 0;
    4282:	4b2a      	ldr	r3, [pc, #168]	; (432c <bt_conn_prepare_events+0xc8>)
    4284:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4286:	2101      	movs	r1, #1
    4288:	4630      	mov	r0, r6
	conn_change.signaled = 0;
    428a:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    428c:	f010 f9e5 	bl	1465a <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    4290:	4b27      	ldr	r3, [pc, #156]	; (4330 <bt_conn_prepare_events+0xcc>)
    4292:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4296:	f7ff fc4d 	bl	3b34 <atomic_get>
    429a:	461f      	mov	r7, r3
    429c:	b910      	cbnz	r0, 42a4 <bt_conn_prepare_events+0x40>
			continue;
    429e:	2001      	movs	r0, #1
}
    42a0:	b005      	add	sp, #20
    42a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    42a4:	7a5a      	ldrb	r2, [r3, #9]
    42a6:	b992      	cbnz	r2, 42ce <bt_conn_prepare_events+0x6a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    42a8:	f3bf 8f5b 	dmb	ish
    42ac:	1d1a      	adds	r2, r3, #4
    42ae:	e852 1f00 	ldrex	r1, [r2]
    42b2:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    42b6:	e842 0400 	strex	r4, r0, [r2]
    42ba:	2c00      	cmp	r4, #0
    42bc:	d1f7      	bne.n	42ae <bt_conn_prepare_events+0x4a>
    42be:	f3bf 8f5b 	dmb	ish
    42c2:	064a      	lsls	r2, r1, #25
    42c4:	d503      	bpl.n	42ce <bt_conn_prepare_events+0x6a>
			conn_cleanup(conn);
    42c6:	4618      	mov	r0, r3
    42c8:	f7ff ffb4 	bl	4234 <conn_cleanup>
    42cc:	e7e7      	b.n	429e <bt_conn_prepare_events+0x3a>
		if (conn->state != BT_CONN_CONNECTED) {
    42ce:	7a7c      	ldrb	r4, [r7, #9]
    42d0:	2c03      	cmp	r4, #3
    42d2:	d1e4      	bne.n	429e <bt_conn_prepare_events+0x3a>
    42d4:	f00f fd84 	bl	13de0 <_impl_k_current_get>
		BT_DBG("Adding conn %p to poll list", conn);
    42d8:	4b10      	ldr	r3, [pc, #64]	; (431c <bt_conn_prepare_events+0xb8>)
    42da:	9001      	str	r0, [sp, #4]
    42dc:	4a10      	ldr	r2, [pc, #64]	; (4320 <bt_conn_prepare_events+0xbc>)
    42de:	4911      	ldr	r1, [pc, #68]	; (4324 <bt_conn_prepare_events+0xc0>)
    42e0:	9503      	str	r5, [sp, #12]
    42e2:	9702      	str	r7, [sp, #8]
    42e4:	9500      	str	r5, [sp, #0]
    42e6:	4813      	ldr	r0, [pc, #76]	; (4334 <bt_conn_prepare_events+0xd0>)
    42e8:	f7fc fe50 	bl	f8c <printk>
		k_poll_event_init(&events[ev_count],
    42ec:	4b12      	ldr	r3, [pc, #72]	; (4338 <bt_conn_prepare_events+0xd4>)
    42ee:	2200      	movs	r2, #0
    42f0:	2104      	movs	r1, #4
    42f2:	f106 0014 	add.w	r0, r6, #20
    42f6:	f010 f9b0 	bl	1465a <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    42fa:	2301      	movs	r3, #1
    42fc:	f886 3020 	strb.w	r3, [r6, #32]
		k_poll_event_init(&events[ev_count],
    4300:	f106 0028 	add.w	r0, r6, #40	; 0x28
    4304:	4b0d      	ldr	r3, [pc, #52]	; (433c <bt_conn_prepare_events+0xd8>)
    4306:	2200      	movs	r2, #0
    4308:	2104      	movs	r1, #4
    430a:	f010 f9a6 	bl	1465a <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    430e:	2302      	movs	r3, #2
    4310:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    4314:	4620      	mov	r0, r4
	return ev_count;
    4316:	e7c3      	b.n	42a0 <bt_conn_prepare_events+0x3c>
    4318:	0001496d 	.word	0x0001496d
    431c:	00015a01 	.word	0x00015a01
    4320:	00015b7a 	.word	0x00015b7a
    4324:	0001570b 	.word	0x0001570b
    4328:	00015ace 	.word	0x00015ace
    432c:	20003b90 	.word	0x20003b90
    4330:	20000360 	.word	0x20000360
    4334:	00015ae4 	.word	0x00015ae4
    4338:	20000378 	.word	0x20000378
    433c:	20000388 	.word	0x20000388

00004340 <bt_conn_set_state>:
{
    4340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4344:	4604      	mov	r4, r0
    4346:	b086      	sub	sp, #24
    4348:	460e      	mov	r6, r1
    434a:	f00f fd49 	bl	13de0 <_impl_k_current_get>
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    434e:	7a63      	ldrb	r3, [r4, #9]
    4350:	4f6d      	ldr	r7, [pc, #436]	; (4508 <bt_conn_set_state+0x1c8>)
    4352:	9001      	str	r0, [sp, #4]
    4354:	2b04      	cmp	r3, #4
    4356:	bf96      	itet	ls
    4358:	4a6c      	ldrls	r2, [pc, #432]	; (450c <bt_conn_set_state+0x1cc>)
    435a:	4b6d      	ldrhi	r3, [pc, #436]	; (4510 <bt_conn_set_state+0x1d0>)
    435c:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    4360:	9302      	str	r3, [sp, #8]
    4362:	2e04      	cmp	r6, #4
    4364:	bf96      	itet	ls
    4366:	4a69      	ldrls	r2, [pc, #420]	; (450c <bt_conn_set_state+0x1cc>)
    4368:	4a69      	ldrhi	r2, [pc, #420]	; (4510 <bt_conn_set_state+0x1d0>)
    436a:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    436e:	9203      	str	r2, [sp, #12]
    4370:	9704      	str	r7, [sp, #16]
    4372:	9700      	str	r7, [sp, #0]
    4374:	4b67      	ldr	r3, [pc, #412]	; (4514 <bt_conn_set_state+0x1d4>)
    4376:	4a68      	ldr	r2, [pc, #416]	; (4518 <bt_conn_set_state+0x1d8>)
    4378:	4968      	ldr	r1, [pc, #416]	; (451c <bt_conn_set_state+0x1dc>)
    437a:	4869      	ldr	r0, [pc, #420]	; (4520 <bt_conn_set_state+0x1e0>)
    437c:	f7fc fe06 	bl	f8c <printk>
	if (conn->state == state) {
    4380:	7a65      	ldrb	r5, [r4, #9]
    4382:	42ae      	cmp	r6, r5
    4384:	46b8      	mov	r8, r7
    4386:	d10a      	bne.n	439e <bt_conn_set_state+0x5e>
		BT_WARN("no transition");
    4388:	9701      	str	r7, [sp, #4]
    438a:	9700      	str	r7, [sp, #0]
    438c:	4b61      	ldr	r3, [pc, #388]	; (4514 <bt_conn_set_state+0x1d4>)
    438e:	4a65      	ldr	r2, [pc, #404]	; (4524 <bt_conn_set_state+0x1e4>)
    4390:	4962      	ldr	r1, [pc, #392]	; (451c <bt_conn_set_state+0x1dc>)
    4392:	4865      	ldr	r0, [pc, #404]	; (4528 <bt_conn_set_state+0x1e8>)
    4394:	f7fc fdfa 	bl	f8c <printk>
}
    4398:	b006      	add	sp, #24
    439a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->state = state;
    439e:	7266      	strb	r6, [r4, #9]
	switch (old_state) {
    43a0:	b195      	cbz	r5, 43c8 <bt_conn_set_state+0x88>
    43a2:	2d02      	cmp	r5, #2
    43a4:	d014      	beq.n	43d0 <bt_conn_set_state+0x90>
	switch (conn->state) {
    43a6:	7a63      	ldrb	r3, [r4, #9]
    43a8:	2b04      	cmp	r3, #4
    43aa:	f200 80a0 	bhi.w	44ee <bt_conn_set_state+0x1ae>
    43ae:	a201      	add	r2, pc, #4	; (adr r2, 43b4 <bt_conn_set_state+0x74>)
    43b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    43b4:	00004417 	.word	0x00004417
    43b8:	00004399 	.word	0x00004399
    43bc:	000044d3 	.word	0x000044d3
    43c0:	000043e1 	.word	0x000043e1
    43c4:	00004399 	.word	0x00004399
		bt_conn_ref(conn);
    43c8:	4620      	mov	r0, r4
    43ca:	f7ff fe85 	bl	40d8 <bt_conn_ref>
		break;
    43ce:	e7ea      	b.n	43a6 <bt_conn_set_state+0x66>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    43d0:	78a3      	ldrb	r3, [r4, #2]
    43d2:	2b00      	cmp	r3, #0
    43d4:	d1e7      	bne.n	43a6 <bt_conn_set_state+0x66>
			k_delayed_work_cancel(&conn->le.update_work);
    43d6:	f104 0070 	add.w	r0, r4, #112	; 0x70
    43da:	f010 f807 	bl	143ec <k_delayed_work_cancel>
    43de:	e7e2      	b.n	43a6 <bt_conn_set_state+0x66>
		if (conn->type == BT_CONN_TYPE_SCO) {
    43e0:	78a3      	ldrb	r3, [r4, #2]
    43e2:	2b02      	cmp	r3, #2
    43e4:	d0d8      	beq.n	4398 <bt_conn_set_state+0x58>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    43e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    43ea:	f00f fa3b 	bl	13864 <_impl_k_queue_init>
    43ee:	f104 0018 	add.w	r0, r4, #24
    43f2:	f00f fa37 	bl	13864 <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    43f6:	2100      	movs	r1, #0
    43f8:	484c      	ldr	r0, [pc, #304]	; (452c <bt_conn_set_state+0x1ec>)
    43fa:	f010 f9d1 	bl	147a0 <_impl_k_poll_signal>
	list->head = NULL;
    43fe:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    4400:	4620      	mov	r0, r4
    4402:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    4404:	63e3      	str	r3, [r4, #60]	; 0x3c
    4406:	f000 fc0b 	bl	4c20 <bt_l2cap_connected>
		notify_connected(conn);
    440a:	4620      	mov	r0, r4
}
    440c:	b006      	add	sp, #24
    440e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify_connected(conn);
    4412:	f7ff bb7f 	b.w	3b14 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4416:	78a3      	ldrb	r3, [r4, #2]
    4418:	2b02      	cmp	r3, #2
    441a:	d105      	bne.n	4428 <bt_conn_set_state+0xe8>
			bt_conn_unref(conn);
    441c:	4620      	mov	r0, r4
}
    441e:	b006      	add	sp, #24
    4420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
    4424:	f7ff bed6 	b.w	41d4 <bt_conn_unref>
		if (old_state == BT_CONN_CONNECTED ||
    4428:	1eeb      	subs	r3, r5, #3
    442a:	2b01      	cmp	r3, #1
    442c:	d844      	bhi.n	44b8 <bt_conn_set_state+0x178>
			bt_l2cap_disconnected(conn);
    442e:	4620      	mov	r0, r4
    4430:	f000 fc30 	bl	4c94 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    4434:	4b3e      	ldr	r3, [pc, #248]	; (4530 <bt_conn_set_state+0x1f0>)
    4436:	681d      	ldr	r5, [r3, #0]
    4438:	b9ed      	cbnz	r5, 4476 <bt_conn_set_state+0x136>
    443a:	4e3e      	ldr	r6, [pc, #248]	; (4534 <bt_conn_set_state+0x1f4>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    443c:	4f3e      	ldr	r7, [pc, #248]	; (4538 <bt_conn_set_state+0x1f8>)
	__asm__ volatile(
    443e:	f04f 0320 	mov.w	r3, #32
    4442:	f3ef 8111 	mrs	r1, BASEPRI
    4446:	f383 8811 	msr	BASEPRI, r3
    444a:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    444c:	b12b      	cbz	r3, 445a <bt_conn_set_state+0x11a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    444e:	6960      	ldr	r0, [r4, #20]
	return node->next;
    4450:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    4452:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4454:	4283      	cmp	r3, r0
	list->tail = node;
    4456:	bf08      	it	eq
    4458:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    445a:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    445e:	b18b      	cbz	r3, 4484 <bt_conn_set_state+0x144>
    4460:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    4462:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4464:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    4466:	605d      	str	r5, [r3, #4]
	list->head = node;
    4468:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    446a:	b902      	cbnz	r2, 446e <bt_conn_set_state+0x12e>
	list->tail = node;
    446c:	6073      	str	r3, [r6, #4]
    446e:	4638      	mov	r0, r7
    4470:	f00f fcc5 	bl	13dfe <_impl_k_sem_give>
    4474:	e7e3      	b.n	443e <bt_conn_set_state+0xfe>
		if (cb->disconnected) {
    4476:	686b      	ldr	r3, [r5, #4]
    4478:	b113      	cbz	r3, 4480 <bt_conn_set_state+0x140>
			cb->disconnected(conn, conn->err);
    447a:	7a21      	ldrb	r1, [r4, #8]
    447c:	4620      	mov	r0, r4
    447e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    4480:	692d      	ldr	r5, [r5, #16]
    4482:	e7d9      	b.n	4438 <bt_conn_set_state+0xf8>
			if (conn->type == BT_CONN_TYPE_LE) {
    4484:	78a3      	ldrb	r3, [r4, #2]
    4486:	b91b      	cbnz	r3, 4490 <bt_conn_set_state+0x150>
				k_delayed_work_cancel(&conn->le.update_work);
    4488:	f104 0070 	add.w	r0, r4, #112	; 0x70
    448c:	f00f ffae 	bl	143ec <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4490:	f3bf 8f5b 	dmb	ish
    4494:	3404      	adds	r4, #4
    4496:	e854 3f00 	ldrex	r3, [r4]
    449a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    449e:	e844 3200 	strex	r2, r3, [r4]
    44a2:	2a00      	cmp	r2, #0
    44a4:	d1f7      	bne.n	4496 <bt_conn_set_state+0x156>
    44a6:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    44aa:	4820      	ldr	r0, [pc, #128]	; (452c <bt_conn_set_state+0x1ec>)
    44ac:	2100      	movs	r1, #0
}
    44ae:	b006      	add	sp, #24
    44b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    44b4:	f010 b974 	b.w	147a0 <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    44b8:	2d02      	cmp	r5, #2
    44ba:	d103      	bne.n	44c4 <bt_conn_set_state+0x184>
			notify_connected(conn);
    44bc:	4620      	mov	r0, r4
    44be:	f7ff fb29 	bl	3b14 <notify_connected>
    44c2:	e7ab      	b.n	441c <bt_conn_set_state+0xdc>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    44c4:	2d01      	cmp	r5, #1
    44c6:	f47f af67 	bne.w	4398 <bt_conn_set_state+0x58>
			if (conn->err) {
    44ca:	7a23      	ldrb	r3, [r4, #8]
    44cc:	2b00      	cmp	r3, #0
    44ce:	d0a5      	beq.n	441c <bt_conn_set_state+0xdc>
    44d0:	e7f4      	b.n	44bc <bt_conn_set_state+0x17c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    44d2:	78a3      	ldrb	r3, [r4, #2]
    44d4:	2b00      	cmp	r3, #0
    44d6:	f47f af5f 	bne.w	4398 <bt_conn_set_state+0x58>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    44da:	4818      	ldr	r0, [pc, #96]	; (453c <bt_conn_set_state+0x1fc>)
    44dc:	f640 32b8 	movw	r2, #3000	; 0xbb8
    44e0:	f104 0170 	add.w	r1, r4, #112	; 0x70
}
    44e4:	b006      	add	sp, #24
    44e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    44ea:	f00f bfe3 	b.w	144b4 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    44ee:	f8cd 8008 	str.w	r8, [sp, #8]
    44f2:	9601      	str	r6, [sp, #4]
    44f4:	f8cd 8000 	str.w	r8, [sp]
    44f8:	4b06      	ldr	r3, [pc, #24]	; (4514 <bt_conn_set_state+0x1d4>)
    44fa:	4a0a      	ldr	r2, [pc, #40]	; (4524 <bt_conn_set_state+0x1e4>)
    44fc:	4907      	ldr	r1, [pc, #28]	; (451c <bt_conn_set_state+0x1dc>)
    44fe:	4810      	ldr	r0, [pc, #64]	; (4540 <bt_conn_set_state+0x200>)
    4500:	f7fc fd44 	bl	f8c <printk>
		break;
    4504:	e748      	b.n	4398 <bt_conn_set_state+0x58>
    4506:	bf00      	nop
    4508:	0001496d 	.word	0x0001496d
    450c:	0001599c 	.word	0x0001599c
    4510:	00015df1 	.word	0x00015df1
    4514:	00015a2b 	.word	0x00015a2b
    4518:	00015b7a 	.word	0x00015b7a
    451c:	0001570b 	.word	0x0001570b
    4520:	00015dfb 	.word	0x00015dfb
    4524:	00015704 	.word	0x00015704
    4528:	00015e19 	.word	0x00015e19
    452c:	20003b90 	.word	0x20003b90
    4530:	2000034c 	.word	0x2000034c
    4534:	200003f8 	.word	0x200003f8
    4538:	20003af4 	.word	0x20003af4
    453c:	20001990 	.word	0x20001990
    4540:	00015e37 	.word	0x00015e37

00004544 <bt_conn_get_dst>:

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    4544:	3044      	adds	r0, #68	; 0x44
    4546:	4770      	bx	lr

00004548 <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    4548:	b570      	push	{r4, r5, r6, lr}
    454a:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    454c:	4608      	mov	r0, r1
{
    454e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    4550:	f7fd feba 	bl	22c8 <bt_le_conn_params_valid>
    4554:	b908      	cbnz	r0, 455a <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    4556:	2400      	movs	r4, #0
    4558:	e01c      	b.n	4594 <bt_conn_create_le+0x4c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    455a:	481d      	ldr	r0, [pc, #116]	; (45d0 <bt_conn_create_le+0x88>)
    455c:	f7ff faea 	bl	3b34 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4560:	0583      	lsls	r3, r0, #22
    4562:	d4f8      	bmi.n	4556 <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    4564:	4630      	mov	r0, r6
    4566:	f7ff fdff 	bl	4168 <bt_conn_lookup_addr_le>
	if (conn) {
    456a:	4604      	mov	r4, r0
    456c:	b1a0      	cbz	r0, 4598 <bt_conn_create_le+0x50>
		switch (conn->state) {
    456e:	7a43      	ldrb	r3, [r0, #9]
    4570:	2b01      	cmp	r3, #1
    4572:	d006      	beq.n	4582 <bt_conn_create_le+0x3a>
    4574:	d301      	bcc.n	457a <bt_conn_create_le+0x32>
    4576:	2b03      	cmp	r3, #3
    4578:	d90c      	bls.n	4594 <bt_conn_create_le+0x4c>
			bt_conn_unref(conn);
    457a:	4620      	mov	r0, r4
    457c:	f7ff fe2a 	bl	41d4 <bt_conn_unref>
    4580:	e7e9      	b.n	4556 <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    4582:	886b      	ldrh	r3, [r5, #2]
    4584:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    4588:	88ab      	ldrh	r3, [r5, #4]
    458a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    458e:	88eb      	ldrh	r3, [r5, #6]
    4590:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    4594:	4620      	mov	r0, r4
    4596:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    4598:	4630      	mov	r0, r6
    459a:	f7ff fd51 	bl	4040 <bt_conn_add_le>
	if (!conn) {
    459e:	4604      	mov	r4, r0
    45a0:	2800      	cmp	r0, #0
    45a2:	d0f7      	beq.n	4594 <bt_conn_create_le+0x4c>
	memcpy(dst, src, sizeof(*dst));
    45a4:	2207      	movs	r2, #7
    45a6:	4631      	mov	r1, r6
    45a8:	3052      	adds	r0, #82	; 0x52
    45aa:	f7fd fb27 	bl	1bfc <memcpy>
	conn->le.interval_max = param->interval_max;
    45ae:	886b      	ldrh	r3, [r5, #2]
    45b0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    45b4:	88ab      	ldrh	r3, [r5, #4]
    45b6:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    45ba:	88eb      	ldrh	r3, [r5, #6]
    45bc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    45c0:	4620      	mov	r0, r4
    45c2:	2101      	movs	r1, #1
    45c4:	f7ff febc 	bl	4340 <bt_conn_set_state>
	bt_le_scan_update(true);
    45c8:	2001      	movs	r0, #1
    45ca:	f7fd ffad 	bl	2528 <bt_le_scan_update>
	return conn;
    45ce:	e7e1      	b.n	4594 <bt_conn_create_le+0x4c>
    45d0:	20003ad8 	.word	0x20003ad8

000045d4 <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    45d4:	b570      	push	{r4, r5, r6, lr}
    45d6:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    45d8:	460d      	mov	r5, r1
    45da:	2900      	cmp	r1, #0
    45dc:	d13b      	bne.n	4656 <bt_le_set_auto_conn+0x82>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    45de:	4630      	mov	r0, r6
    45e0:	f7ff fdc2 	bl	4168 <bt_conn_lookup_addr_le>
	if (!conn) {
    45e4:	4604      	mov	r4, r0
    45e6:	b928      	cbnz	r0, 45f4 <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    45e8:	4630      	mov	r0, r6
    45ea:	f7ff fd29 	bl	4040 <bt_conn_add_le>
		if (!conn) {
    45ee:	4604      	mov	r4, r0
    45f0:	2800      	cmp	r0, #0
    45f2:	d051      	beq.n	4698 <bt_le_set_auto_conn+0xc4>
    45f4:	1d23      	adds	r3, r4, #4
			return -ENOMEM;
		}
	}

	if (param) {
    45f6:	2d00      	cmp	r5, #0
    45f8:	d035      	beq.n	4666 <bt_le_set_auto_conn+0x92>
	conn->le.interval_max = param->interval_max;
    45fa:	886a      	ldrh	r2, [r5, #2]
    45fc:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4600:	88aa      	ldrh	r2, [r5, #4]
    4602:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4606:	88ea      	ldrh	r2, [r5, #6]
    4608:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    460c:	f3bf 8f5b 	dmb	ish
    4610:	e853 2f00 	ldrex	r2, [r3]
    4614:	f042 0101 	orr.w	r1, r2, #1
    4618:	e843 1000 	strex	r0, r1, [r3]
    461c:	2800      	cmp	r0, #0
    461e:	d1f7      	bne.n	4610 <bt_le_set_auto_conn+0x3c>
    4620:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    4624:	07d1      	lsls	r1, r2, #31
    4626:	d402      	bmi.n	462e <bt_le_set_auto_conn+0x5a>
					     BT_CONN_AUTO_CONNECT)) {
			bt_conn_ref(conn);
    4628:	4620      	mov	r0, r4
    462a:	f7ff fd55 	bl	40d8 <bt_conn_ref>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    462e:	7a63      	ldrb	r3, [r4, #9]
    4630:	b963      	cbnz	r3, 464c <bt_le_set_auto_conn+0x78>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4632:	481b      	ldr	r0, [pc, #108]	; (46a0 <bt_le_set_auto_conn+0xcc>)
    4634:	f7ff fa7e 	bl	3b34 <atomic_get>
    4638:	0783      	lsls	r3, r0, #30
    463a:	d507      	bpl.n	464c <bt_le_set_auto_conn+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    463c:	b11d      	cbz	r5, 4646 <bt_le_set_auto_conn+0x72>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    463e:	2101      	movs	r1, #1
    4640:	4620      	mov	r0, r4
    4642:	f7ff fe7d 	bl	4340 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    4646:	2000      	movs	r0, #0
    4648:	f7fd ff6e 	bl	2528 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    464c:	4620      	mov	r0, r4
    464e:	f7ff fdc1 	bl	41d4 <bt_conn_unref>

	return 0;
    4652:	2000      	movs	r0, #0
    4654:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    4656:	4608      	mov	r0, r1
    4658:	f7fd fe36 	bl	22c8 <bt_le_conn_params_valid>
    465c:	2800      	cmp	r0, #0
    465e:	d1be      	bne.n	45de <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    4660:	f06f 0015 	mvn.w	r0, #21
    4664:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4666:	f3bf 8f5b 	dmb	ish
    466a:	e853 2f00 	ldrex	r2, [r3]
    466e:	f022 0101 	bic.w	r1, r2, #1
    4672:	e843 1000 	strex	r0, r1, [r3]
    4676:	2800      	cmp	r0, #0
    4678:	d1f7      	bne.n	466a <bt_le_set_auto_conn+0x96>
    467a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    467e:	07d2      	lsls	r2, r2, #31
    4680:	d5d5      	bpl.n	462e <bt_le_set_auto_conn+0x5a>
			bt_conn_unref(conn);
    4682:	4620      	mov	r0, r4
    4684:	f7ff fda6 	bl	41d4 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    4688:	7a63      	ldrb	r3, [r4, #9]
    468a:	2b01      	cmp	r3, #1
    468c:	d1cf      	bne.n	462e <bt_le_set_auto_conn+0x5a>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    468e:	4629      	mov	r1, r5
    4690:	4620      	mov	r0, r4
    4692:	f7ff fe55 	bl	4340 <bt_conn_set_state>
    4696:	e7ca      	b.n	462e <bt_le_set_auto_conn+0x5a>
			return -ENOMEM;
    4698:	f06f 000b 	mvn.w	r0, #11
}
    469c:	bd70      	pop	{r4, r5, r6, pc}
    469e:	bf00      	nop
    46a0:	20003ad8 	.word	0x20003ad8

000046a4 <bt_conn_disconnect>:
{
    46a4:	b570      	push	{r4, r5, r6, lr}
    46a6:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    46a8:	7881      	ldrb	r1, [r0, #2]
{
    46aa:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    46ac:	b911      	cbnz	r1, 46b4 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    46ae:	3044      	adds	r0, #68	; 0x44
    46b0:	f7ff ff90 	bl	45d4 <bt_le_set_auto_conn>
	switch (conn->state) {
    46b4:	7a63      	ldrb	r3, [r4, #9]
    46b6:	3b01      	subs	r3, #1
    46b8:	2b03      	cmp	r3, #3
    46ba:	d803      	bhi.n	46c4 <bt_conn_disconnect+0x20>
    46bc:	e8df f003 	tbb	[pc, r3]
    46c0:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    46c4:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    46c8:	4628      	mov	r0, r5
    46ca:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    46cc:	4620      	mov	r0, r4
		conn->err = reason;
    46ce:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    46d0:	2100      	movs	r1, #0
    46d2:	f7ff fe35 	bl	4340 <bt_conn_set_state>
		bt_le_scan_update(false);
    46d6:	2000      	movs	r0, #0
    46d8:	f7fd ff26 	bl	2528 <bt_le_scan_update>
		return 0;
    46dc:	2500      	movs	r5, #0
    46de:	e7f3      	b.n	46c8 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    46e0:	f104 0070 	add.w	r0, r4, #112	; 0x70
    46e4:	f00f fe82 	bl	143ec <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    46e8:	2100      	movs	r1, #0
    46ea:	f242 000e 	movw	r0, #8206	; 0x200e
}
    46ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    46f2:	f7fd be9d 	b.w	2430 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    46f6:	2103      	movs	r1, #3
    46f8:	f240 4006 	movw	r0, #1030	; 0x406
    46fc:	f7fd fce8 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    4700:	4605      	mov	r5, r0
    4702:	b198      	cbz	r0, 472c <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    4704:	2103      	movs	r1, #3
    4706:	3008      	adds	r0, #8
    4708:	f00e fb14 	bl	12d34 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    470c:	8823      	ldrh	r3, [r4, #0]
    470e:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    4710:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    4712:	4629      	mov	r1, r5
    4714:	f240 4006 	movw	r0, #1030	; 0x406
    4718:	f7fd fe8a 	bl	2430 <bt_hci_cmd_send>
	if (err) {
    471c:	4605      	mov	r5, r0
    471e:	2800      	cmp	r0, #0
    4720:	d1d2      	bne.n	46c8 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    4722:	2104      	movs	r1, #4
    4724:	4620      	mov	r0, r4
    4726:	f7ff fe0b 	bl	4340 <bt_conn_set_state>
    472a:	e7cd      	b.n	46c8 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    472c:	f06f 0536 	mvn.w	r5, #54	; 0x36
    4730:	e7ca      	b.n	46c8 <bt_conn_disconnect+0x24>

00004732 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    4732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4734:	4607      	mov	r7, r0
    4736:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    4738:	f242 0013 	movw	r0, #8211	; 0x2013
    473c:	210e      	movs	r1, #14
    473e:	f7fd fcc7 	bl	20d0 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    4742:	4606      	mov	r6, r0
    4744:	b1c8      	cbz	r0, 477a <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4746:	210e      	movs	r1, #14
    4748:	3008      	adds	r0, #8
    474a:	f00e faf3 	bl	12d34 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    474e:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4750:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    4752:	220e      	movs	r2, #14
    4754:	f7fd fa7e 	bl	1c54 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4758:	883b      	ldrh	r3, [r7, #0]
    475a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    475c:	882b      	ldrh	r3, [r5, #0]
    475e:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    4760:	886b      	ldrh	r3, [r5, #2]
    4762:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    4764:	88ab      	ldrh	r3, [r5, #4]
    4766:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    4768:	88eb      	ldrh	r3, [r5, #6]
    476a:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    476c:	4631      	mov	r1, r6
    476e:	f242 0013 	movw	r0, #8211	; 0x2013
}
    4772:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4776:	f7fd be5b 	b.w	2430 <bt_hci_cmd_send>
}
    477a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    477e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004780 <bt_conn_le_param_update>:
{
    4780:	b530      	push	{r4, r5, lr}
    4782:	460d      	mov	r5, r1
    4784:	b08b      	sub	sp, #44	; 0x2c
    4786:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4788:	f00f fb2a 	bl	13de0 <_impl_k_current_get>
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    478c:	88ea      	ldrh	r2, [r5, #6]
    478e:	9207      	str	r2, [sp, #28]
    4790:	88aa      	ldrh	r2, [r5, #4]
    4792:	9206      	str	r2, [sp, #24]
    4794:	886a      	ldrh	r2, [r5, #2]
    4796:	9205      	str	r2, [sp, #20]
    4798:	882a      	ldrh	r2, [r5, #0]
    479a:	4b21      	ldr	r3, [pc, #132]	; (4820 <bt_conn_le_param_update+0xa0>)
    479c:	9204      	str	r2, [sp, #16]
    479e:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    47a2:	9308      	str	r3, [sp, #32]
    47a4:	9203      	str	r2, [sp, #12]
    47a6:	9001      	str	r0, [sp, #4]
    47a8:	9300      	str	r3, [sp, #0]
    47aa:	4a1e      	ldr	r2, [pc, #120]	; (4824 <bt_conn_le_param_update+0xa4>)
    47ac:	4b1e      	ldr	r3, [pc, #120]	; (4828 <bt_conn_le_param_update+0xa8>)
    47ae:	9402      	str	r4, [sp, #8]
    47b0:	491e      	ldr	r1, [pc, #120]	; (482c <bt_conn_le_param_update+0xac>)
    47b2:	481f      	ldr	r0, [pc, #124]	; (4830 <bt_conn_le_param_update+0xb0>)
    47b4:	f7fc fbea 	bl	f8c <printk>
	if (conn->le.interval >= param->interval_min &&
    47b8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    47bc:	882a      	ldrh	r2, [r5, #0]
    47be:	429a      	cmp	r2, r3
    47c0:	d80c      	bhi.n	47dc <bt_conn_le_param_update+0x5c>
    47c2:	886a      	ldrh	r2, [r5, #2]
    47c4:	429a      	cmp	r2, r3
    47c6:	d309      	bcc.n	47dc <bt_conn_le_param_update+0x5c>
	    conn->le.interval <= param->interval_max &&
    47c8:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    47cc:	88ab      	ldrh	r3, [r5, #4]
    47ce:	429a      	cmp	r2, r3
    47d0:	d104      	bne.n	47dc <bt_conn_le_param_update+0x5c>
	    conn->le.latency == param->latency &&
    47d2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    47d6:	88eb      	ldrh	r3, [r5, #6]
    47d8:	429a      	cmp	r2, r3
    47da:	d01c      	beq.n	4816 <bt_conn_le_param_update+0x96>
	k_delayed_work_cancel(&conn->le.update_work);
    47dc:	f104 0070 	add.w	r0, r4, #112	; 0x70
    47e0:	f00f fe04 	bl	143ec <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    47e4:	4b13      	ldr	r3, [pc, #76]	; (4834 <bt_conn_le_param_update+0xb4>)
    47e6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    47ea:	079a      	lsls	r2, r3, #30
    47ec:	d503      	bpl.n	47f6 <bt_conn_le_param_update+0x76>
    47ee:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    47f2:	079b      	lsls	r3, r3, #30
    47f4:	d401      	bmi.n	47fa <bt_conn_le_param_update+0x7a>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    47f6:	78e3      	ldrb	r3, [r4, #3]
    47f8:	b933      	cbnz	r3, 4808 <bt_conn_le_param_update+0x88>
		return bt_conn_le_conn_update(conn, param);
    47fa:	4629      	mov	r1, r5
    47fc:	4620      	mov	r0, r4
}
    47fe:	b00b      	add	sp, #44	; 0x2c
    4800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    4804:	f7ff bf95 	b.w	4732 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    4808:	4629      	mov	r1, r5
    480a:	4620      	mov	r0, r4
}
    480c:	b00b      	add	sp, #44	; 0x2c
    480e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    4812:	f000 bba7 	b.w	4f64 <bt_l2cap_update_conn_param>
}
    4816:	f06f 0044 	mvn.w	r0, #68	; 0x44
    481a:	b00b      	add	sp, #44	; 0x2c
    481c:	bd30      	pop	{r4, r5, pc}
    481e:	bf00      	nop
    4820:	0001496d 	.word	0x0001496d
    4824:	00015b7a 	.word	0x00015b7a
    4828:	00015a57 	.word	0x00015a57
    482c:	0001570b 	.word	0x0001570b
    4830:	00015a6f 	.word	0x00015a6f
    4834:	20003a68 	.word	0x20003a68

00004838 <le_conn_update>:
{
    4838:	4603      	mov	r3, r0
    483a:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    483c:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    4840:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    4842:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4846:	d105      	bne.n	4854 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    4848:	2113      	movs	r1, #19
    484a:	f7ff ff2b 	bl	46a4 <bt_conn_disconnect>
}
    484e:	b003      	add	sp, #12
    4850:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4854:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    4858:	f8ad 2000 	strh.w	r2, [sp]
    485c:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    4860:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    4864:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4866:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    486a:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    486e:	f8ad 2004 	strh.w	r2, [sp, #4]
    4872:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    4876:	f7ff ff83 	bl	4780 <bt_conn_le_param_update>
    487a:	e7e8      	b.n	484e <le_conn_update+0x16>

0000487c <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    487c:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    487e:	4b08      	ldr	r3, [pc, #32]	; (48a0 <bt_conn_create_pdu+0x24>)
{
    4880:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    4882:	2800      	cmp	r0, #0
    4884:	bf08      	it	eq
    4886:	4618      	moveq	r0, r3
    4888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    488c:	f00e f9f0 	bl	12c70 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    4890:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    4892:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    4894:	3008      	adds	r0, #8
    4896:	f00e fa0a 	bl	12cae <net_buf_simple_reserve>

	return buf;
}
    489a:	4620      	mov	r0, r4
    489c:	bd38      	pop	{r3, r4, r5, pc}
    489e:	bf00      	nop
    48a0:	20003f34 	.word	0x20003f34

000048a4 <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    48a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48a8:	4606      	mov	r6, r0
    48aa:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    48ac:	4816      	ldr	r0, [pc, #88]	; (4908 <create_frag.isra.8+0x64>)
    48ae:	2100      	movs	r1, #0
    48b0:	f7ff ffe4 	bl	487c <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    48b4:	7833      	ldrb	r3, [r6, #0]
    48b6:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    48b8:	4605      	mov	r5, r0
    48ba:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    48be:	d005      	beq.n	48cc <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    48c0:	f00e fa06 	bl	12cd0 <net_buf_unref>
		return NULL;
    48c4:	4635      	mov	r5, r6
}
    48c6:	4628      	mov	r0, r5
    48c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    48cc:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    48ce:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    48d2:	4e0e      	ldr	r6, [pc, #56]	; (490c <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    48d4:	4638      	mov	r0, r7
    48d6:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    48da:	f00e fa75 	bl	12dc8 <net_buf_simple_tailroom>
    48de:	4580      	cmp	r8, r0
    48e0:	d20c      	bcs.n	48fc <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    48e2:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    48e6:	f854 1f08 	ldr.w	r1, [r4, #8]!
    48ea:	4632      	mov	r2, r6
    48ec:	4638      	mov	r0, r7
    48ee:	f00e fa27 	bl	12d40 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    48f2:	4631      	mov	r1, r6
    48f4:	4620      	mov	r0, r4
    48f6:	f00e fa4b 	bl	12d90 <net_buf_simple_pull>
    48fa:	e7e4      	b.n	48c6 <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    48fc:	4638      	mov	r0, r7
    48fe:	f00e fa63 	bl	12dc8 <net_buf_simple_tailroom>
    4902:	b286      	uxth	r6, r0
    4904:	e7ef      	b.n	48e6 <create_frag.isra.8+0x42>
    4906:	bf00      	nop
    4908:	20003f54 	.word	0x20003f54
    490c:	20003a68 	.word	0x20003a68

00004910 <bt_conn_process_tx>:
{
    4910:	b5f0      	push	{r4, r5, r6, r7, lr}
    4912:	b087      	sub	sp, #28
    4914:	4604      	mov	r4, r0
    4916:	f00f fa63 	bl	13de0 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    491a:	4d45      	ldr	r5, [pc, #276]	; (4a30 <bt_conn_process_tx+0x120>)
    491c:	9001      	str	r0, [sp, #4]
    491e:	4b45      	ldr	r3, [pc, #276]	; (4a34 <bt_conn_process_tx+0x124>)
    4920:	9503      	str	r5, [sp, #12]
    4922:	9402      	str	r4, [sp, #8]
    4924:	9500      	str	r5, [sp, #0]
    4926:	4a44      	ldr	r2, [pc, #272]	; (4a38 <bt_conn_process_tx+0x128>)
    4928:	4944      	ldr	r1, [pc, #272]	; (4a3c <bt_conn_process_tx+0x12c>)
    492a:	4845      	ldr	r0, [pc, #276]	; (4a40 <bt_conn_process_tx+0x130>)
    492c:	f7fc fb2e 	bl	f8c <printk>
	if (conn->state == BT_CONN_DISCONNECTED &&
    4930:	7a63      	ldrb	r3, [r4, #9]
    4932:	462e      	mov	r6, r5
    4934:	bb0b      	cbnz	r3, 497a <bt_conn_process_tx+0x6a>
    4936:	f3bf 8f5b 	dmb	ish
    493a:	1d23      	adds	r3, r4, #4
    493c:	e853 2f00 	ldrex	r2, [r3]
    4940:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    4944:	e843 1000 	strex	r0, r1, [r3]
    4948:	2800      	cmp	r0, #0
    494a:	d1f7      	bne.n	493c <bt_conn_process_tx+0x2c>
    494c:	f3bf 8f5b 	dmb	ish
    4950:	0653      	lsls	r3, r2, #25
    4952:	d512      	bpl.n	497a <bt_conn_process_tx+0x6a>
    4954:	f00f fa44 	bl	13de0 <_impl_k_current_get>
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
    4958:	8823      	ldrh	r3, [r4, #0]
    495a:	9302      	str	r3, [sp, #8]
    495c:	9001      	str	r0, [sp, #4]
    495e:	9503      	str	r5, [sp, #12]
    4960:	9500      	str	r5, [sp, #0]
    4962:	4b34      	ldr	r3, [pc, #208]	; (4a34 <bt_conn_process_tx+0x124>)
    4964:	4a34      	ldr	r2, [pc, #208]	; (4a38 <bt_conn_process_tx+0x128>)
    4966:	4935      	ldr	r1, [pc, #212]	; (4a3c <bt_conn_process_tx+0x12c>)
    4968:	4836      	ldr	r0, [pc, #216]	; (4a44 <bt_conn_process_tx+0x134>)
    496a:	f7fc fb0f 	bl	f8c <printk>
		conn_cleanup(conn);
    496e:	4620      	mov	r0, r4
}
    4970:	b007      	add	sp, #28
    4972:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    4976:	f7ff bc5d 	b.w	4234 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    497a:	2100      	movs	r1, #0
    497c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4980:	f00e f97c 	bl	12c7c <net_buf_get>
	BT_ASSERT(buf);
    4984:	4605      	mov	r5, r0
    4986:	b968      	cbnz	r0, 49a4 <bt_conn_process_tx+0x94>
    4988:	9601      	str	r6, [sp, #4]
    498a:	9600      	str	r6, [sp, #0]
    498c:	4b29      	ldr	r3, [pc, #164]	; (4a34 <bt_conn_process_tx+0x124>)
    498e:	4a2e      	ldr	r2, [pc, #184]	; (4a48 <bt_conn_process_tx+0x138>)
    4990:	492a      	ldr	r1, [pc, #168]	; (4a3c <bt_conn_process_tx+0x12c>)
    4992:	482e      	ldr	r0, [pc, #184]	; (4a4c <bt_conn_process_tx+0x13c>)
    4994:	f7fc fafa 	bl	f8c <printk>
    4998:	4040      	eors	r0, r0
    499a:	f380 8811 	msr	BASEPRI, r0
    499e:	f04f 0004 	mov.w	r0, #4
    49a2:	df02      	svc	2
    49a4:	f00f fa1c 	bl	13de0 <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    49a8:	9605      	str	r6, [sp, #20]
    49aa:	89ab      	ldrh	r3, [r5, #12]
    49ac:	9600      	str	r6, [sp, #0]
	return bt_dev.le.mtu;
    49ae:	4e28      	ldr	r6, [pc, #160]	; (4a50 <bt_conn_process_tx+0x140>)
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    49b0:	9304      	str	r3, [sp, #16]
    49b2:	9001      	str	r0, [sp, #4]
    49b4:	4a20      	ldr	r2, [pc, #128]	; (4a38 <bt_conn_process_tx+0x128>)
    49b6:	4921      	ldr	r1, [pc, #132]	; (4a3c <bt_conn_process_tx+0x12c>)
    49b8:	9503      	str	r5, [sp, #12]
    49ba:	9402      	str	r4, [sp, #8]
    49bc:	4b25      	ldr	r3, [pc, #148]	; (4a54 <bt_conn_process_tx+0x144>)
    49be:	4826      	ldr	r0, [pc, #152]	; (4a58 <bt_conn_process_tx+0x148>)
    49c0:	f7fc fae4 	bl	f8c <printk>
	if (buf->len <= conn_mtu(conn)) {
    49c4:	89a9      	ldrh	r1, [r5, #12]
    49c6:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    49ca:	4291      	cmp	r1, r2
    49cc:	d808      	bhi.n	49e0 <bt_conn_process_tx+0xd0>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    49ce:	2300      	movs	r3, #0
    49d0:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    49d2:	4629      	mov	r1, r5
    49d4:	4620      	mov	r0, r4
    49d6:	f7ff fa67 	bl	3ea8 <send_frag>
	if (!send_buf(conn, buf)) {
    49da:	b148      	cbz	r0, 49f0 <bt_conn_process_tx+0xe0>
}
    49dc:	b007      	add	sp, #28
    49de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49e0:	f104 0709 	add.w	r7, r4, #9
	frag = create_frag(conn, buf);
    49e4:	4629      	mov	r1, r5
    49e6:	4638      	mov	r0, r7
    49e8:	f7ff ff5c 	bl	48a4 <create_frag.isra.8>
	if (!frag) {
    49ec:	4601      	mov	r1, r0
    49ee:	b928      	cbnz	r0, 49fc <bt_conn_process_tx+0xec>
		net_buf_unref(buf);
    49f0:	4628      	mov	r0, r5
}
    49f2:	b007      	add	sp, #28
    49f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    49f8:	f00e b96a 	b.w	12cd0 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    49fc:	2301      	movs	r3, #1
    49fe:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4a00:	4620      	mov	r0, r4
    4a02:	f7ff fa51 	bl	3ea8 <send_frag>
    4a06:	2800      	cmp	r0, #0
    4a08:	d0f2      	beq.n	49f0 <bt_conn_process_tx+0xe0>
	while (buf->len > conn_mtu(conn)) {
    4a0a:	89aa      	ldrh	r2, [r5, #12]
    4a0c:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    4a10:	429a      	cmp	r2, r3
    4a12:	d802      	bhi.n	4a1a <bt_conn_process_tx+0x10a>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4a14:	2300      	movs	r3, #0
    4a16:	2201      	movs	r2, #1
    4a18:	e7db      	b.n	49d2 <bt_conn_process_tx+0xc2>
		frag = create_frag(conn, buf);
    4a1a:	4629      	mov	r1, r5
    4a1c:	4638      	mov	r0, r7
    4a1e:	f7ff ff41 	bl	48a4 <create_frag.isra.8>
		if (!frag) {
    4a22:	4601      	mov	r1, r0
    4a24:	2800      	cmp	r0, #0
    4a26:	d0e3      	beq.n	49f0 <bt_conn_process_tx+0xe0>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4a28:	2301      	movs	r3, #1
    4a2a:	461a      	mov	r2, r3
    4a2c:	e7e8      	b.n	4a00 <bt_conn_process_tx+0xf0>
    4a2e:	bf00      	nop
    4a30:	0001496d 	.word	0x0001496d
    4a34:	00015a18 	.word	0x00015a18
    4a38:	00015b7a 	.word	0x00015b7a
    4a3c:	0001570b 	.word	0x0001570b
    4a40:	00015ab1 	.word	0x00015ab1
    4a44:	00015b15 	.word	0x00015b15
    4a48:	000156bc 	.word	0x000156bc
    4a4c:	000157c0 	.word	0x000157c0
    4a50:	20003a68 	.word	0x20003a68
    4a54:	000159f8 	.word	0x000159f8
    4a58:	00015b4f 	.word	0x00015b4f

00004a5c <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    4a5c:	4b03      	ldr	r3, [pc, #12]	; (4a6c <bt_conn_get_id+0x10>)
    4a5e:	1ac0      	subs	r0, r0, r3
    4a60:	4b03      	ldr	r3, [pc, #12]	; (4a70 <bt_conn_get_id+0x14>)
    4a62:	10c0      	asrs	r0, r0, #3
    4a64:	4358      	muls	r0, r3
}
    4a66:	b2c0      	uxtb	r0, r0
    4a68:	4770      	bx	lr
    4a6a:	bf00      	nop
    4a6c:	20000360 	.word	0x20000360
    4a70:	286bca1b 	.word	0x286bca1b

00004a74 <bt_conn_init>:
	parent->next = child;
    4a74:	4b12      	ldr	r3, [pc, #72]	; (4ac0 <bt_conn_init+0x4c>)
    4a76:	4a13      	ldr	r2, [pc, #76]	; (4ac4 <bt_conn_init+0x50>)
    4a78:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    4a7a:	b510      	push	{r4, lr}
    4a7c:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    4a7e:	6859      	ldr	r1, [r3, #4]
    4a80:	b901      	cbnz	r1, 4a84 <bt_conn_init+0x10>
	list->tail = node;
    4a82:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    4a84:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    4a86:	6092      	str	r2, [r2, #8]
	list->head = node;
    4a88:	4a0f      	ldr	r2, [pc, #60]	; (4ac8 <bt_conn_init+0x54>)
    4a8a:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4a8c:	b901      	cbnz	r1, 4a90 <bt_conn_init+0x1c>
	list->tail = node;
    4a8e:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    4a90:	f001 fb66 	bl	6160 <bt_att_init>

	err = bt_smp_init();
    4a94:	f002 fa4e 	bl	6f34 <bt_smp_init>
	if (err) {
    4a98:	4604      	mov	r4, r0
    4a9a:	b970      	cbnz	r0, 4aba <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    4a9c:	f000 fa8a 	bl	4fb4 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    4aa0:	480a      	ldr	r0, [pc, #40]	; (4acc <bt_conn_init+0x58>)
    4aa2:	f7ff f847 	bl	3b34 <atomic_get>
    4aa6:	b140      	cbz	r0, 4aba <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4aa8:	4809      	ldr	r0, [pc, #36]	; (4ad0 <bt_conn_init+0x5c>)
    4aaa:	f7ff f843 	bl	3b34 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    4aae:	07c3      	lsls	r3, r0, #31
    4ab0:	d503      	bpl.n	4aba <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4ab2:	2101      	movs	r1, #1
    4ab4:	4807      	ldr	r0, [pc, #28]	; (4ad4 <bt_conn_init+0x60>)
    4ab6:	f7ff fc43 	bl	4340 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    4aba:	4620      	mov	r0, r4
    4abc:	bd10      	pop	{r4, pc}
    4abe:	bf00      	nop
    4ac0:	200003f8 	.word	0x200003f8
    4ac4:	20000350 	.word	0x20000350
    4ac8:	20000358 	.word	0x20000358
    4acc:	200003a0 	.word	0x200003a0
    4ad0:	20000364 	.word	0x20000364
    4ad4:	20000360 	.word	0x20000360

00004ad8 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    4ad8:	4770      	bx	lr
	...

00004adc <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    4ade:	4a0b      	ldr	r2, [pc, #44]	; (4b0c <l2cap_accept+0x30>)
    4ae0:	6813      	ldr	r3, [r2, #0]
    4ae2:	b933      	cbnz	r3, 4af2 <l2cap_accept+0x16>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    4ae4:	480a      	ldr	r0, [pc, #40]	; (4b10 <l2cap_accept+0x34>)
    4ae6:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    4ae8:	600a      	str	r2, [r1, #0]

		return 0;
    4aea:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    4aec:	b005      	add	sp, #20
    4aee:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
    4af2:	4b08      	ldr	r3, [pc, #32]	; (4b14 <l2cap_accept+0x38>)
    4af4:	9302      	str	r3, [sp, #8]
    4af6:	9001      	str	r0, [sp, #4]
    4af8:	9300      	str	r3, [sp, #0]
    4afa:	4a07      	ldr	r2, [pc, #28]	; (4b18 <l2cap_accept+0x3c>)
    4afc:	4b07      	ldr	r3, [pc, #28]	; (4b1c <l2cap_accept+0x40>)
    4afe:	4908      	ldr	r1, [pc, #32]	; (4b20 <l2cap_accept+0x44>)
    4b00:	4808      	ldr	r0, [pc, #32]	; (4b24 <l2cap_accept+0x48>)
    4b02:	f7fc fa43 	bl	f8c <printk>
	return -ENOMEM;
    4b06:	f06f 000b 	mvn.w	r0, #11
    4b0a:	e7ef      	b.n	4aec <l2cap_accept+0x10>
    4b0c:	20000400 	.word	0x20000400
    4b10:	20003bac 	.word	0x20003bac
    4b14:	0001496d 	.word	0x0001496d
    4b18:	000156bc 	.word	0x000156bc
    4b1c:	00015f5a 	.word	0x00015f5a
    4b20:	0001570b 	.word	0x0001570b
    4b24:	00015fc9 	.word	0x00015fc9

00004b28 <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b2a:	4607      	mov	r7, r0
    4b2c:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4b2e:	2000      	movs	r0, #0
    4b30:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4b32:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4b34:	f7ff fea2 	bl	487c <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    4b38:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4b3a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    4b3c:	3008      	adds	r0, #8
    4b3e:	f00e f8f9 	bl	12d34 <net_buf_simple_add>
	hdr->code = code;
    4b42:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    4b44:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    4b46:	8045      	strh	r5, [r0, #2]
}
    4b48:	4620      	mov	r0, r4
    4b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004b4c <l2cap_connected>:
    4b4c:	4770      	bx	lr
	...

00004b50 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    4b50:	2300      	movs	r3, #0
    4b52:	6083      	str	r3, [r0, #8]
    4b54:	4b05      	ldr	r3, [pc, #20]	; (4b6c <bt_l2cap_le_fixed_chan_register+0x1c>)
    4b56:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    4b58:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    4b5c:	b911      	cbnz	r1, 4b64 <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    4b5e:	605a      	str	r2, [r3, #4]
	list->head = node;
    4b60:	601a      	str	r2, [r3, #0]
    4b62:	4770      	bx	lr
	parent->next = child;
    4b64:	600a      	str	r2, [r1, #0]
	list->tail = node;
    4b66:	605a      	str	r2, [r3, #4]
    4b68:	4770      	bx	lr
    4b6a:	bf00      	nop
    4b6c:	20000498 	.word	0x20000498

00004b70 <bt_l2cap_chan_remove>:
{
    4b70:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4b72:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4b74:	b113      	cbz	r3, 4b7c <bt_l2cap_chan_remove+0xc>
    4b76:	3b08      	subs	r3, #8
    4b78:	2200      	movs	r2, #0
    4b7a:	b903      	cbnz	r3, 4b7e <bt_l2cap_chan_remove+0xe>
    4b7c:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    4b7e:	428b      	cmp	r3, r1
    4b80:	f103 0408 	add.w	r4, r3, #8
    4b84:	d10f      	bne.n	4ba6 <bt_l2cap_chan_remove+0x36>
    4b86:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    4b88:	b93a      	cbnz	r2, 4b9a <bt_l2cap_chan_remove+0x2a>
    4b8a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    4b8c:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    4b8e:	4294      	cmp	r4, r2
    4b90:	d100      	bne.n	4b94 <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    4b92:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    4b94:	2200      	movs	r2, #0
    4b96:	609a      	str	r2, [r3, #8]
    4b98:	bd10      	pop	{r4, pc}
    4b9a:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    4b9c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    4b9e:	428c      	cmp	r4, r1
	list->tail = node;
    4ba0:	bf08      	it	eq
    4ba2:	63c2      	streq	r2, [r0, #60]	; 0x3c
    4ba4:	e7f6      	b.n	4b94 <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    4ba6:	4622      	mov	r2, r4
    4ba8:	2c00      	cmp	r4, #0
    4baa:	d0e7      	beq.n	4b7c <bt_l2cap_chan_remove+0xc>
	return node->next;
    4bac:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4bae:	2b00      	cmp	r3, #0
    4bb0:	d0e4      	beq.n	4b7c <bt_l2cap_chan_remove+0xc>
    4bb2:	3b08      	subs	r3, #8
    4bb4:	e7e1      	b.n	4b7a <bt_l2cap_chan_remove+0xa>

00004bb6 <bt_l2cap_chan_del>:
	if (!chan->conn) {
    4bb6:	6803      	ldr	r3, [r0, #0]
{
    4bb8:	b510      	push	{r4, lr}
    4bba:	4604      	mov	r4, r0
	if (!chan->conn) {
    4bbc:	b12b      	cbz	r3, 4bca <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    4bbe:	6843      	ldr	r3, [r0, #4]
    4bc0:	685b      	ldr	r3, [r3, #4]
    4bc2:	b103      	cbz	r3, 4bc6 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    4bc4:	4798      	blx	r3
	chan->conn = NULL;
    4bc6:	2300      	movs	r3, #0
    4bc8:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    4bca:	68e3      	ldr	r3, [r4, #12]
    4bcc:	b11b      	cbz	r3, 4bd6 <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    4bce:	4620      	mov	r0, r4
}
    4bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    4bd4:	4718      	bx	r3
    4bd6:	bd10      	pop	{r4, pc}

00004bd8 <l2cap_rtx_timeout>:
{
    4bd8:	b530      	push	{r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    4bda:	4b0c      	ldr	r3, [pc, #48]	; (4c0c <l2cap_rtx_timeout+0x34>)
    4bdc:	4a0c      	ldr	r2, [pc, #48]	; (4c10 <l2cap_rtx_timeout+0x38>)
    4bde:	490d      	ldr	r1, [pc, #52]	; (4c14 <l2cap_rtx_timeout+0x3c>)
{
    4be0:	b085      	sub	sp, #20
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    4be2:	f1a0 0410 	sub.w	r4, r0, #16
{
    4be6:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    4be8:	9302      	str	r3, [sp, #8]
    4bea:	e88d 0018 	stmia.w	sp, {r3, r4}
    4bee:	480a      	ldr	r0, [pc, #40]	; (4c18 <l2cap_rtx_timeout+0x40>)
    4bf0:	4b0a      	ldr	r3, [pc, #40]	; (4c1c <l2cap_rtx_timeout+0x44>)
    4bf2:	f7fc f9cb 	bl	f8c <printk>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    4bf6:	f855 0c10 	ldr.w	r0, [r5, #-16]
    4bfa:	4621      	mov	r1, r4
    4bfc:	f7ff ffb8 	bl	4b70 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    4c00:	4620      	mov	r0, r4
}
    4c02:	b005      	add	sp, #20
    4c04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    4c08:	f7ff bfd5 	b.w	4bb6 <bt_l2cap_chan_del>
    4c0c:	0001496d 	.word	0x0001496d
    4c10:	000156bc 	.word	0x000156bc
    4c14:	0001570b 	.word	0x0001570b
    4c18:	0001611d 	.word	0x0001611d
    4c1c:	00015f04 	.word	0x00015f04

00004c20 <bt_l2cap_connected>:
{
    4c20:	4b1a      	ldr	r3, [pc, #104]	; (4c8c <bt_l2cap_connected+0x6c>)
    4c22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4c26:	681c      	ldr	r4, [r3, #0]
    4c28:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4c2a:	b12c      	cbz	r4, 4c38 <bt_l2cap_connected+0x18>
	parent->next = child;
    4c2c:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4c2e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4c90 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4c32:	3c08      	subs	r4, #8
    4c34:	46b9      	mov	r9, r7
    4c36:	b914      	cbnz	r4, 4c3e <bt_l2cap_connected+0x1e>
}
    4c38:	b003      	add	sp, #12
    4c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    4c3e:	6863      	ldr	r3, [r4, #4]
    4c40:	a901      	add	r1, sp, #4
    4c42:	4630      	mov	r0, r6
    4c44:	4798      	blx	r3
    4c46:	2800      	cmp	r0, #0
    4c48:	db18      	blt.n	4c7c <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    4c4a:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    4c4c:	8823      	ldrh	r3, [r4, #0]
    4c4e:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    4c50:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4c54:	4641      	mov	r1, r8
    4c56:	f105 0010 	add.w	r0, r5, #16
    4c5a:	f00f fbb7 	bl	143cc <k_delayed_work_init>
    4c5e:	60af      	str	r7, [r5, #8]
    4c60:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	sys_slist_append(&conn->channels, &chan->node);
    4c62:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    4c66:	b972      	cbnz	r2, 4c86 <bt_l2cap_connected+0x66>
	list->tail = node;
    4c68:	63f3      	str	r3, [r6, #60]	; 0x3c
	list->head = node;
    4c6a:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    4c6c:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    4c6e:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    4c70:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    4c72:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    4c76:	681b      	ldr	r3, [r3, #0]
    4c78:	b103      	cbz	r3, 4c7c <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    4c7a:	4798      	blx	r3
	return node->next;
    4c7c:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4c7e:	2c00      	cmp	r4, #0
    4c80:	d0da      	beq.n	4c38 <bt_l2cap_connected+0x18>
    4c82:	3c08      	subs	r4, #8
    4c84:	e7d7      	b.n	4c36 <bt_l2cap_connected+0x16>
	parent->next = child;
    4c86:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4c88:	63f3      	str	r3, [r6, #60]	; 0x3c
    4c8a:	e7ef      	b.n	4c6c <bt_l2cap_connected+0x4c>
    4c8c:	20000498 	.word	0x20000498
    4c90:	00004bd9 	.word	0x00004bd9

00004c94 <bt_l2cap_disconnected>:
{
    4c94:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4c96:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4c98:	b1a3      	cbz	r3, 4cc4 <bt_l2cap_disconnected+0x30>
    4c9a:	f1b3 0008 	subs.w	r0, r3, #8
    4c9e:	d10a      	bne.n	4cb6 <bt_l2cap_disconnected+0x22>
    4ca0:	bd10      	pop	{r4, pc}
    4ca2:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    4ca4:	f7ff ff87 	bl	4bb6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4ca8:	b164      	cbz	r4, 4cc4 <bt_l2cap_disconnected+0x30>
	return node->next;
    4caa:	68a3      	ldr	r3, [r4, #8]
    4cac:	b103      	cbz	r3, 4cb0 <bt_l2cap_disconnected+0x1c>
    4cae:	3b08      	subs	r3, #8
{
    4cb0:	4620      	mov	r0, r4
    4cb2:	461c      	mov	r4, r3
    4cb4:	e7f6      	b.n	4ca4 <bt_l2cap_disconnected+0x10>
    4cb6:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4cb8:	2c00      	cmp	r4, #0
    4cba:	d1f2      	bne.n	4ca2 <bt_l2cap_disconnected+0xe>
}
    4cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    4cc0:	f7ff bf79 	b.w	4bb6 <bt_l2cap_chan_del>
    4cc4:	bd10      	pop	{r4, pc}

00004cc6 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4cc6:	3104      	adds	r1, #4
    4cc8:	f7ff bdd8 	b.w	487c <bt_conn_create_pdu>

00004ccc <bt_l2cap_send_cb>:
{
    4ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cce:	4614      	mov	r4, r2
    4cd0:	4605      	mov	r5, r0
    4cd2:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    4cd4:	f102 0008 	add.w	r0, r2, #8
    4cd8:	2104      	movs	r1, #4
{
    4cda:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    4cdc:	f00e f850 	bl	12d80 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4ce0:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    4ce2:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4ce4:	3904      	subs	r1, #4
    4ce6:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    4ce8:	4632      	mov	r2, r6
    4cea:	4621      	mov	r1, r4
    4cec:	4628      	mov	r0, r5
}
    4cee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    4cf2:	f7ff b863 	b.w	3dbc <bt_conn_send_cb>
	...

00004cf8 <l2cap_recv>:
{
    4cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    4cfa:	898b      	ldrh	r3, [r1, #12]
    4cfc:	2b03      	cmp	r3, #3
{
    4cfe:	b087      	sub	sp, #28
    4d00:	4607      	mov	r7, r0
    4d02:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    4d04:	d809      	bhi.n	4d1a <l2cap_recv+0x22>
		BT_ERR("Too small L2CAP signaling PDU");
    4d06:	4b5a      	ldr	r3, [pc, #360]	; (4e70 <l2cap_recv+0x178>)
    4d08:	9301      	str	r3, [sp, #4]
    4d0a:	9300      	str	r3, [sp, #0]
    4d0c:	4a59      	ldr	r2, [pc, #356]	; (4e74 <l2cap_recv+0x17c>)
    4d0e:	4b5a      	ldr	r3, [pc, #360]	; (4e78 <l2cap_recv+0x180>)
    4d10:	495a      	ldr	r1, [pc, #360]	; (4e7c <l2cap_recv+0x184>)
    4d12:	485b      	ldr	r0, [pc, #364]	; (4e80 <l2cap_recv+0x188>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    4d14:	f7fc f93a 	bl	f8c <printk>
		return;
    4d18:	e014      	b.n	4d44 <l2cap_recv+0x4c>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4d1a:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4d1c:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4d1e:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    4d22:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4d24:	f00e f834 	bl	12d90 <net_buf_simple_pull>
	if (buf->len != len) {
    4d28:	89aa      	ldrh	r2, [r5, #12]
    4d2a:	4296      	cmp	r6, r2
    4d2c:	d00c      	beq.n	4d48 <l2cap_recv+0x50>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    4d2e:	4b50      	ldr	r3, [pc, #320]	; (4e70 <l2cap_recv+0x178>)
    4d30:	9303      	str	r3, [sp, #12]
    4d32:	9201      	str	r2, [sp, #4]
    4d34:	9300      	str	r3, [sp, #0]
    4d36:	9602      	str	r6, [sp, #8]
    4d38:	4b4f      	ldr	r3, [pc, #316]	; (4e78 <l2cap_recv+0x180>)
    4d3a:	4a4e      	ldr	r2, [pc, #312]	; (4e74 <l2cap_recv+0x17c>)
    4d3c:	494f      	ldr	r1, [pc, #316]	; (4e7c <l2cap_recv+0x184>)
    4d3e:	4851      	ldr	r0, [pc, #324]	; (4e84 <l2cap_recv+0x18c>)
    4d40:	f7fc f924 	bl	f8c <printk>
}
    4d44:	b007      	add	sp, #28
    4d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    4d48:	7861      	ldrb	r1, [r4, #1]
    4d4a:	b939      	cbnz	r1, 4d5c <l2cap_recv+0x64>
		BT_ERR("Invalid ident value in L2CAP PDU");
    4d4c:	4b48      	ldr	r3, [pc, #288]	; (4e70 <l2cap_recv+0x178>)
    4d4e:	9301      	str	r3, [sp, #4]
    4d50:	9300      	str	r3, [sp, #0]
    4d52:	4a48      	ldr	r2, [pc, #288]	; (4e74 <l2cap_recv+0x17c>)
    4d54:	4b48      	ldr	r3, [pc, #288]	; (4e78 <l2cap_recv+0x180>)
    4d56:	4949      	ldr	r1, [pc, #292]	; (4e7c <l2cap_recv+0x184>)
    4d58:	484b      	ldr	r0, [pc, #300]	; (4e88 <l2cap_recv+0x190>)
    4d5a:	e7db      	b.n	4d14 <l2cap_recv+0x1c>
	switch (hdr->code) {
    4d5c:	7823      	ldrb	r3, [r4, #0]
    4d5e:	2b12      	cmp	r3, #18
    4d60:	d029      	beq.n	4db6 <l2cap_recv+0xbe>
    4d62:	2b13      	cmp	r3, #19
    4d64:	d01d      	beq.n	4da2 <l2cap_recv+0xaa>
    4d66:	2b01      	cmp	r3, #1
    4d68:	d0ec      	beq.n	4d44 <l2cap_recv+0x4c>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    4d6a:	4a41      	ldr	r2, [pc, #260]	; (4e70 <l2cap_recv+0x178>)
    4d6c:	9202      	str	r2, [sp, #8]
    4d6e:	e88d 000c 	stmia.w	sp, {r2, r3}
    4d72:	4942      	ldr	r1, [pc, #264]	; (4e7c <l2cap_recv+0x184>)
    4d74:	4b40      	ldr	r3, [pc, #256]	; (4e78 <l2cap_recv+0x180>)
    4d76:	4a45      	ldr	r2, [pc, #276]	; (4e8c <l2cap_recv+0x194>)
    4d78:	4845      	ldr	r0, [pc, #276]	; (4e90 <l2cap_recv+0x198>)
    4d7a:	f7fc f907 	bl	f8c <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4d7e:	2202      	movs	r2, #2
    4d80:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    4d82:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4d84:	2001      	movs	r0, #1
    4d86:	f7ff fecf 	bl	4b28 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4d8a:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4d8c:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4d8e:	3008      	adds	r0, #8
    4d90:	f00d ffd0 	bl	12d34 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4d94:	2300      	movs	r3, #0
    4d96:	7003      	strb	r3, [r0, #0]
    4d98:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    4d9a:	4622      	mov	r2, r4
    4d9c:	2105      	movs	r1, #5
    4d9e:	4628      	mov	r0, r5
    4da0:	e025      	b.n	4dee <l2cap_recv+0xf6>
	if (buf->len < sizeof(*rsp)) {
    4da2:	2e01      	cmp	r6, #1
    4da4:	d8ce      	bhi.n	4d44 <l2cap_recv+0x4c>
		BT_ERR("Too small LE conn param rsp");
    4da6:	4b32      	ldr	r3, [pc, #200]	; (4e70 <l2cap_recv+0x178>)
    4da8:	9301      	str	r3, [sp, #4]
    4daa:	9300      	str	r3, [sp, #0]
    4dac:	4a31      	ldr	r2, [pc, #196]	; (4e74 <l2cap_recv+0x17c>)
    4dae:	4b39      	ldr	r3, [pc, #228]	; (4e94 <l2cap_recv+0x19c>)
    4db0:	4932      	ldr	r1, [pc, #200]	; (4e7c <l2cap_recv+0x184>)
    4db2:	4839      	ldr	r0, [pc, #228]	; (4e98 <l2cap_recv+0x1a0>)
    4db4:	e7ae      	b.n	4d14 <l2cap_recv+0x1c>
	if (buf->len < sizeof(*req)) {
    4db6:	2e07      	cmp	r6, #7
    4db8:	d807      	bhi.n	4dca <l2cap_recv+0xd2>
		BT_ERR("Too small LE conn update param req");
    4dba:	4b2d      	ldr	r3, [pc, #180]	; (4e70 <l2cap_recv+0x178>)
    4dbc:	9301      	str	r3, [sp, #4]
    4dbe:	9300      	str	r3, [sp, #0]
    4dc0:	4a2c      	ldr	r2, [pc, #176]	; (4e74 <l2cap_recv+0x17c>)
    4dc2:	4b36      	ldr	r3, [pc, #216]	; (4e9c <l2cap_recv+0x1a4>)
    4dc4:	492d      	ldr	r1, [pc, #180]	; (4e7c <l2cap_recv+0x184>)
    4dc6:	4836      	ldr	r0, [pc, #216]	; (4ea0 <l2cap_recv+0x1a8>)
    4dc8:	e7a4      	b.n	4d14 <l2cap_recv+0x1c>
    4dca:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    4dcc:	78e6      	ldrb	r6, [r4, #3]
    4dce:	b18e      	cbz	r6, 4df4 <l2cap_recv+0xfc>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4dd0:	2202      	movs	r2, #2
    4dd2:	2001      	movs	r0, #1
    4dd4:	f7ff fea8 	bl	4b28 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4dd8:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4dda:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4ddc:	3008      	adds	r0, #8
    4dde:	f00d ffa9 	bl	12d34 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4de2:	2300      	movs	r3, #0
    4de4:	7003      	strb	r3, [r0, #0]
    4de6:	7043      	strb	r3, [r0, #1]
    4de8:	462a      	mov	r2, r5
    4dea:	2105      	movs	r1, #5
    4dec:	4620      	mov	r0, r4
    4dee:	f7ff ff6d 	bl	4ccc <bt_l2cap_send_cb>
    4df2:	e7a7      	b.n	4d44 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    4df4:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    4df6:	7858      	ldrb	r0, [r3, #1]
    4df8:	781a      	ldrb	r2, [r3, #0]
    4dfa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4dfe:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    4e02:	78d8      	ldrb	r0, [r3, #3]
    4e04:	789a      	ldrb	r2, [r3, #2]
    4e06:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4e0a:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    4e0e:	7958      	ldrb	r0, [r3, #5]
    4e10:	791a      	ldrb	r2, [r3, #4]
    4e12:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4e16:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    4e1a:	799a      	ldrb	r2, [r3, #6]
    4e1c:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4e1e:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    4e20:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4e24:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    4e26:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4e2a:	f7ff fe7d 	bl	4b28 <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    4e2e:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4e30:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    4e32:	4620      	mov	r0, r4
    4e34:	f7fe fea8 	bl	3b88 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    4e38:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    4e3a:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    4e3c:	f107 0008 	add.w	r0, r7, #8
    4e40:	f00d ff78 	bl	12d34 <net_buf_simple_add>
	if (accepted) {
    4e44:	b17d      	cbz	r5, 4e66 <l2cap_recv+0x16e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    4e46:	7006      	strb	r6, [r0, #0]
    4e48:	7046      	strb	r6, [r0, #1]
    4e4a:	2300      	movs	r3, #0
    4e4c:	463a      	mov	r2, r7
    4e4e:	2105      	movs	r1, #5
    4e50:	4620      	mov	r0, r4
    4e52:	f7ff ff3b 	bl	4ccc <bt_l2cap_send_cb>
	if (accepted) {
    4e56:	2d00      	cmp	r5, #0
    4e58:	f43f af74 	beq.w	4d44 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
    4e5c:	a904      	add	r1, sp, #16
    4e5e:	4620      	mov	r0, r4
    4e60:	f7ff fc67 	bl	4732 <bt_conn_le_conn_update>
    4e64:	e76e      	b.n	4d44 <l2cap_recv+0x4c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    4e66:	2301      	movs	r3, #1
    4e68:	7003      	strb	r3, [r0, #0]
    4e6a:	7045      	strb	r5, [r0, #1]
    4e6c:	e7ed      	b.n	4e4a <l2cap_recv+0x152>
    4e6e:	bf00      	nop
    4e70:	0001496d 	.word	0x0001496d
    4e74:	000156bc 	.word	0x000156bc
    4e78:	00015f41 	.word	0x00015f41
    4e7c:	0001570b 	.word	0x0001570b
    4e80:	00016000 	.word	0x00016000
    4e84:	0001602e 	.word	0x0001602e
    4e88:	0001605f 	.word	0x0001605f
    4e8c:	00015704 	.word	0x00015704
    4e90:	000160ef 	.word	0x000160ef
    4e94:	00015f16 	.word	0x00015f16
    4e98:	00016090 	.word	0x00016090
    4e9c:	00015f28 	.word	0x00015f28
    4ea0:	000160bc 	.word	0x000160bc

00004ea4 <bt_l2cap_le_lookup_tx_cid>:
{
    4ea4:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4ea6:	b100      	cbz	r0, 4eaa <bt_l2cap_le_lookup_tx_cid+0x6>
    4ea8:	3808      	subs	r0, #8
    4eaa:	b900      	cbnz	r0, 4eae <bt_l2cap_le_lookup_tx_cid+0xa>
}
    4eac:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    4eae:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    4eb2:	428b      	cmp	r3, r1
    4eb4:	d0fa      	beq.n	4eac <bt_l2cap_le_lookup_tx_cid+0x8>
    4eb6:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4eb8:	2000      	movs	r0, #0
    4eba:	2b00      	cmp	r3, #0
    4ebc:	d0f6      	beq.n	4eac <bt_l2cap_le_lookup_tx_cid+0x8>
    4ebe:	f1a3 0008 	sub.w	r0, r3, #8
    4ec2:	e7f2      	b.n	4eaa <bt_l2cap_le_lookup_tx_cid+0x6>

00004ec4 <bt_l2cap_le_lookup_rx_cid>:
{
    4ec4:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4ec6:	b100      	cbz	r0, 4eca <bt_l2cap_le_lookup_rx_cid+0x6>
    4ec8:	3808      	subs	r0, #8
    4eca:	b900      	cbnz	r0, 4ece <bt_l2cap_le_lookup_rx_cid+0xa>
}
    4ecc:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    4ece:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    4ed0:	428b      	cmp	r3, r1
    4ed2:	d0fb      	beq.n	4ecc <bt_l2cap_le_lookup_rx_cid+0x8>
    4ed4:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4ed6:	2000      	movs	r0, #0
    4ed8:	2b00      	cmp	r3, #0
    4eda:	d0f7      	beq.n	4ecc <bt_l2cap_le_lookup_rx_cid+0x8>
    4edc:	f1a3 0008 	sub.w	r0, r3, #8
    4ee0:	e7f3      	b.n	4eca <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00004ee4 <bt_l2cap_recv>:
{
    4ee4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    4ee6:	898b      	ldrh	r3, [r1, #12]
    4ee8:	2b03      	cmp	r3, #3
{
    4eea:	4606      	mov	r6, r0
    4eec:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    4eee:	d80e      	bhi.n	4f0e <bt_l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP PDU received");
    4ef0:	4b15      	ldr	r3, [pc, #84]	; (4f48 <bt_l2cap_recv+0x64>)
    4ef2:	9301      	str	r3, [sp, #4]
    4ef4:	9300      	str	r3, [sp, #0]
    4ef6:	4a15      	ldr	r2, [pc, #84]	; (4f4c <bt_l2cap_recv+0x68>)
    4ef8:	4b15      	ldr	r3, [pc, #84]	; (4f50 <bt_l2cap_recv+0x6c>)
    4efa:	4916      	ldr	r1, [pc, #88]	; (4f54 <bt_l2cap_recv+0x70>)
    4efc:	4816      	ldr	r0, [pc, #88]	; (4f58 <bt_l2cap_recv+0x74>)
    4efe:	f7fc f845 	bl	f8c <printk>
	net_buf_unref(buf);
    4f02:	4620      	mov	r0, r4
}
    4f04:	b004      	add	sp, #16
    4f06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    4f0a:	f00d bee1 	b.w	12cd0 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    4f0e:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4f10:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    4f12:	f850 3f08 	ldr.w	r3, [r0, #8]!
    4f16:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4f18:	f00d ff3a 	bl	12d90 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    4f1c:	4629      	mov	r1, r5
    4f1e:	4630      	mov	r0, r6
    4f20:	f7ff ffd0 	bl	4ec4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    4f24:	b950      	cbnz	r0, 4f3c <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    4f26:	4b08      	ldr	r3, [pc, #32]	; (4f48 <bt_l2cap_recv+0x64>)
    4f28:	9302      	str	r3, [sp, #8]
    4f2a:	e88d 0028 	stmia.w	sp, {r3, r5}
    4f2e:	4a0b      	ldr	r2, [pc, #44]	; (4f5c <bt_l2cap_recv+0x78>)
    4f30:	4b07      	ldr	r3, [pc, #28]	; (4f50 <bt_l2cap_recv+0x6c>)
    4f32:	4908      	ldr	r1, [pc, #32]	; (4f54 <bt_l2cap_recv+0x70>)
    4f34:	480a      	ldr	r0, [pc, #40]	; (4f60 <bt_l2cap_recv+0x7c>)
    4f36:	f7fc f829 	bl	f8c <printk>
    4f3a:	e7e2      	b.n	4f02 <bt_l2cap_recv+0x1e>
	chan->ops->recv(chan, buf);
    4f3c:	6843      	ldr	r3, [r0, #4]
    4f3e:	4621      	mov	r1, r4
    4f40:	691b      	ldr	r3, [r3, #16]
    4f42:	4798      	blx	r3
    4f44:	e7dd      	b.n	4f02 <bt_l2cap_recv+0x1e>
    4f46:	bf00      	nop
    4f48:	0001496d 	.word	0x0001496d
    4f4c:	000156bc 	.word	0x000156bc
    4f50:	00015f4c 	.word	0x00015f4c
    4f54:	0001570b 	.word	0x0001570b
    4f58:	00015f67 	.word	0x00015f67
    4f5c:	00015704 	.word	0x00015704
    4f60:	00015f94 	.word	0x00015f94

00004f64 <bt_l2cap_update_conn_param>:
{
    4f64:	b570      	push	{r4, r5, r6, lr}
	ident++;
    4f66:	4b12      	ldr	r3, [pc, #72]	; (4fb0 <bt_l2cap_update_conn_param+0x4c>)
    4f68:	781a      	ldrb	r2, [r3, #0]
    4f6a:	3201      	adds	r2, #1
	if (!ident) {
    4f6c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    4f70:	bf08      	it	eq
    4f72:	2201      	moveq	r2, #1
    4f74:	701a      	strb	r2, [r3, #0]
{
    4f76:	460c      	mov	r4, r1
    4f78:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    4f7a:	7819      	ldrb	r1, [r3, #0]
    4f7c:	2208      	movs	r2, #8
    4f7e:	2012      	movs	r0, #18
    4f80:	f7ff fdd2 	bl	4b28 <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    4f84:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    4f86:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    4f88:	4408      	add	r0, r1
    4f8a:	f00d fed3 	bl	12d34 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    4f8e:	8823      	ldrh	r3, [r4, #0]
    4f90:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    4f92:	8863      	ldrh	r3, [r4, #2]
    4f94:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    4f96:	88a3      	ldrh	r3, [r4, #4]
    4f98:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    4f9a:	88e3      	ldrh	r3, [r4, #6]
    4f9c:	80c3      	strh	r3, [r0, #6]
    4f9e:	4632      	mov	r2, r6
    4fa0:	4628      	mov	r0, r5
    4fa2:	2300      	movs	r3, #0
    4fa4:	2105      	movs	r1, #5
    4fa6:	f7ff fe91 	bl	4ccc <bt_l2cap_send_cb>
}
    4faa:	2000      	movs	r0, #0
    4fac:	bd70      	pop	{r4, r5, r6, pc}
    4fae:	bf00      	nop
    4fb0:	20000494 	.word	0x20000494

00004fb4 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    4fb4:	4801      	ldr	r0, [pc, #4]	; (4fbc <bt_l2cap_init+0x8>)
    4fb6:	f7ff bdcb 	b.w	4b50 <bt_l2cap_le_fixed_chan_register>
    4fba:	bf00      	nop
    4fbc:	20003ba0 	.word	0x20003ba0

00004fc0 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    4fc0:	2006      	movs	r0, #6
    4fc2:	4770      	bx	lr

00004fc4 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    4fc4:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    4fc6:	4a0a      	ldr	r2, [pc, #40]	; (4ff0 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4fc8:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    4fca:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    4fce:	4284      	cmp	r4, r0
    4fd0:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    4fd4:	d102      	bne.n	4fdc <att_op_get_type+0x18>
			return handlers[i].type;
    4fd6:	440a      	add	r2, r1
    4fd8:	7890      	ldrb	r0, [r2, #2]
    4fda:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4fdc:	3301      	adds	r3, #1
    4fde:	2b1b      	cmp	r3, #27
    4fe0:	d1f3      	bne.n	4fca <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    4fe2:	f010 0f40 	tst.w	r0, #64	; 0x40
    4fe6:	bf14      	ite	ne
    4fe8:	2000      	movne	r0, #0
    4fea:	2006      	moveq	r0, #6
}
    4fec:	bd10      	pop	{r4, pc}
    4fee:	bf00      	nop
    4ff0:	00016444 	.word	0x00016444

00004ff4 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4ff4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    4ff6:	4d11      	ldr	r5, [pc, #68]	; (503c <bt_att_accept+0x48>)
    4ff8:	682c      	ldr	r4, [r5, #0]
{
    4ffa:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    4ffc:	b984      	cbnz	r4, 5020 <bt_att_accept+0x2c>
			continue;
		}

		memset(att, 0, sizeof(*att));
    4ffe:	22e4      	movs	r2, #228	; 0xe4
    5000:	4621      	mov	r1, r4
    5002:	4628      	mov	r0, r5
    5004:	f7fc fe26 	bl	1c54 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    5008:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    500a:	4b0d      	ldr	r3, [pc, #52]	; (5040 <bt_att_accept+0x4c>)
    500c:	606b      	str	r3, [r5, #4]
    500e:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    5012:	4611      	mov	r1, r2
    5014:	f00e feea 	bl	13dec <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    5018:	6035      	str	r5, [r6, #0]

		return 0;
    501a:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    501c:	b004      	add	sp, #16
    501e:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    5020:	4b08      	ldr	r3, [pc, #32]	; (5044 <bt_att_accept+0x50>)
    5022:	9302      	str	r3, [sp, #8]
    5024:	9001      	str	r0, [sp, #4]
    5026:	9300      	str	r3, [sp, #0]
    5028:	4a07      	ldr	r2, [pc, #28]	; (5048 <bt_att_accept+0x54>)
    502a:	4b08      	ldr	r3, [pc, #32]	; (504c <bt_att_accept+0x58>)
    502c:	4908      	ldr	r1, [pc, #32]	; (5050 <bt_att_accept+0x5c>)
    502e:	4809      	ldr	r0, [pc, #36]	; (5054 <bt_att_accept+0x60>)
    5030:	f7fb ffac 	bl	f8c <printk>
	return -ENOMEM;
    5034:	f06f 000b 	mvn.w	r0, #11
    5038:	e7f0      	b.n	501c <bt_att_accept+0x28>
    503a:	bf00      	nop
    503c:	200004a0 	.word	0x200004a0
    5040:	20003bcc 	.word	0x20003bcc
    5044:	0001496d 	.word	0x0001496d
    5048:	000156bc 	.word	0x000156bc
    504c:	000161bc 	.word	0x000161bc
    5050:	0001570b 	.word	0x0001570b
    5054:	000162d8 	.word	0x000162d8

00005058 <att_req_destroy>:
{
    5058:	b510      	push	{r4, lr}
    505a:	4604      	mov	r4, r0
	if (req->buf) {
    505c:	6900      	ldr	r0, [r0, #16]
    505e:	b108      	cbz	r0, 5064 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    5060:	f00d fe36 	bl	12cd0 <net_buf_unref>
	if (req->destroy) {
    5064:	68a3      	ldr	r3, [r4, #8]
    5066:	b10b      	cbz	r3, 506c <att_req_destroy+0x14>
		req->destroy(req);
    5068:	4620      	mov	r0, r4
    506a:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    506c:	4620      	mov	r0, r4
    506e:	2214      	movs	r2, #20
    5070:	2100      	movs	r1, #0
}
    5072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    5076:	f7fc bded 	b.w	1c54 <memset>

0000507a <att_notify>:
{
    507a:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    507c:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    507e:	f101 0008 	add.w	r0, r1, #8
{
    5082:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    5084:	f00d fe94 	bl	12db0 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    5088:	89a3      	ldrh	r3, [r4, #12]
    508a:	68a2      	ldr	r2, [r4, #8]
    508c:	4601      	mov	r1, r0
    508e:	4628      	mov	r0, r5
    5090:	f001 fe66 	bl	6d60 <bt_gatt_notification>
}
    5094:	2000      	movs	r0, #0
    5096:	bd38      	pop	{r3, r4, r5, pc}

00005098 <read_group_cb>:
{
    5098:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    509c:	680d      	ldr	r5, [r1, #0]
{
    509e:	4606      	mov	r6, r0
    50a0:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    50a2:	f04f 0800 	mov.w	r8, #0
    50a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    50aa:	a902      	add	r1, sp, #8
    50ac:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    50ae:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    50b0:	f88d 8008 	strb.w	r8, [sp, #8]
    50b4:	f8ad 300a 	strh.w	r3, [sp, #10]
    50b8:	f7fc ff1e 	bl	1ef8 <bt_uuid_cmp>
    50bc:	b198      	cbz	r0, 50e6 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    50be:	f642 0301 	movw	r3, #10241	; 0x2801
    50c2:	a903      	add	r1, sp, #12
    50c4:	6830      	ldr	r0, [r6, #0]
    50c6:	f88d 800c 	strb.w	r8, [sp, #12]
    50ca:	f8ad 300e 	strh.w	r3, [sp, #14]
    50ce:	f7fc ff13 	bl	1ef8 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    50d2:	b140      	cbz	r0, 50e6 <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    50d4:	6923      	ldr	r3, [r4, #16]
    50d6:	b123      	cbz	r3, 50e2 <read_group_cb+0x4a>
    50d8:	8a32      	ldrh	r2, [r6, #16]
    50da:	8859      	ldrh	r1, [r3, #2]
    50dc:	4291      	cmp	r1, r2
    50de:	d200      	bcs.n	50e2 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    50e0:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    50e2:	2001      	movs	r0, #1
    50e4:	e012      	b.n	510c <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    50e6:	6861      	ldr	r1, [r4, #4]
    50e8:	6830      	ldr	r0, [r6, #0]
    50ea:	f7fc ff05 	bl	1ef8 <bt_uuid_cmp>
    50ee:	b110      	cbz	r0, 50f6 <read_group_cb+0x5e>
		data->group = NULL;
    50f0:	2300      	movs	r3, #0
    50f2:	6123      	str	r3, [r4, #16]
    50f4:	e7f5      	b.n	50e2 <read_group_cb+0x4a>
	if (data->rsp->len &&
    50f6:	68e3      	ldr	r3, [r4, #12]
    50f8:	68a0      	ldr	r0, [r4, #8]
    50fa:	781a      	ldrb	r2, [r3, #0]
    50fc:	b14a      	cbz	r2, 5112 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    50fe:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    5102:	8981      	ldrh	r1, [r0, #12]
    5104:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    5106:	4293      	cmp	r3, r2
    5108:	da03      	bge.n	5112 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    510a:	2000      	movs	r0, #0
}
    510c:	b004      	add	sp, #16
    510e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5112:	2104      	movs	r1, #4
    5114:	3008      	adds	r0, #8
    5116:	f00d fe0d 	bl	12d34 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    511a:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    511c:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    511e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5120:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5122:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5124:	898a      	ldrh	r2, [r1, #12]
    5126:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    512a:	6889      	ldr	r1, [r1, #8]
    512c:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5130:	1a9b      	subs	r3, r3, r2
    5132:	2500      	movs	r5, #0
    5134:	440a      	add	r2, r1
    5136:	9500      	str	r5, [sp, #0]
    5138:	4631      	mov	r1, r6
    513a:	b29b      	uxth	r3, r3
    513c:	4638      	mov	r0, r7
    513e:	47c0      	blx	r8
	if (read < 0) {
    5140:	1e01      	subs	r1, r0, #0
    5142:	dbe2      	blt.n	510a <read_group_cb+0x72>
	if (!data->rsp->len) {
    5144:	68e0      	ldr	r0, [r4, #12]
    5146:	7802      	ldrb	r2, [r0, #0]
    5148:	1d0b      	adds	r3, r1, #4
    514a:	b92a      	cbnz	r2, 5158 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    514c:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    514e:	68a0      	ldr	r0, [r4, #8]
    5150:	3008      	adds	r0, #8
    5152:	f00d fdef 	bl	12d34 <net_buf_simple_add>
    5156:	e7c4      	b.n	50e2 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    5158:	429a      	cmp	r2, r3
    515a:	d0f8      	beq.n	514e <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    515c:	68a2      	ldr	r2, [r4, #8]
    515e:	8993      	ldrh	r3, [r2, #12]
    5160:	3b04      	subs	r3, #4
    5162:	8193      	strh	r3, [r2, #12]
    5164:	e7d1      	b.n	510a <read_group_cb+0x72>

00005166 <find_info_cb>:
	if (!data->rsp) {
    5166:	688b      	ldr	r3, [r1, #8]
{
    5168:	b570      	push	{r4, r5, r6, lr}
    516a:	4605      	mov	r5, r0
    516c:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    516e:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    5170:	b963      	cbnz	r3, 518c <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5172:	6848      	ldr	r0, [r1, #4]
    5174:	2101      	movs	r1, #1
    5176:	3008      	adds	r0, #8
    5178:	f00d fddc 	bl	12d34 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    517c:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    517e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5180:	781b      	ldrb	r3, [r3, #0]
    5182:	2b00      	cmp	r3, #0
    5184:	bf0c      	ite	eq
    5186:	2301      	moveq	r3, #1
    5188:	2302      	movne	r3, #2
    518a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    518c:	68a3      	ldr	r3, [r4, #8]
    518e:	781b      	ldrb	r3, [r3, #0]
    5190:	2b01      	cmp	r3, #1
    5192:	d003      	beq.n	519c <find_info_cb+0x36>
    5194:	2b02      	cmp	r3, #2
    5196:	d01a      	beq.n	51ce <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    5198:	2000      	movs	r0, #0
}
    519a:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    519c:	682b      	ldr	r3, [r5, #0]
    519e:	781b      	ldrb	r3, [r3, #0]
    51a0:	2b00      	cmp	r3, #0
    51a2:	d1f9      	bne.n	5198 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    51a4:	6860      	ldr	r0, [r4, #4]
    51a6:	2104      	movs	r1, #4
    51a8:	3008      	adds	r0, #8
    51aa:	f00d fdc3 	bl	12d34 <net_buf_simple_add>
    51ae:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    51b0:	8a2b      	ldrh	r3, [r5, #16]
    51b2:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    51b4:	682b      	ldr	r3, [r5, #0]
    51b6:	885b      	ldrh	r3, [r3, #2]
    51b8:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    51ba:	6863      	ldr	r3, [r4, #4]
    51bc:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    51c0:	899b      	ldrh	r3, [r3, #12]
    51c2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    51c4:	2804      	cmp	r0, #4
    51c6:	bf94      	ite	ls
    51c8:	2000      	movls	r0, #0
    51ca:	2001      	movhi	r0, #1
    51cc:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    51ce:	682b      	ldr	r3, [r5, #0]
    51d0:	781b      	ldrb	r3, [r3, #0]
    51d2:	2b02      	cmp	r3, #2
    51d4:	d1e0      	bne.n	5198 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    51d6:	6860      	ldr	r0, [r4, #4]
    51d8:	2112      	movs	r1, #18
    51da:	3008      	adds	r0, #8
    51dc:	f00d fdaa 	bl	12d34 <net_buf_simple_add>
    51e0:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    51e2:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    51e4:	8a2b      	ldrh	r3, [r5, #16]
    51e6:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    51ea:	2210      	movs	r2, #16
    51ec:	3101      	adds	r1, #1
    51ee:	f7fc fd05 	bl	1bfc <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    51f2:	6863      	ldr	r3, [r4, #4]
    51f4:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    51f8:	899b      	ldrh	r3, [r3, #12]
    51fa:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    51fc:	2812      	cmp	r0, #18
    51fe:	e7e2      	b.n	51c6 <find_info_cb+0x60>

00005200 <find_type_cb>:
{
    5200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5204:	680e      	ldr	r6, [r1, #0]
{
    5206:	b088      	sub	sp, #32
    5208:	4605      	mov	r5, r0
    520a:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    520c:	2700      	movs	r7, #0
    520e:	f642 0301 	movw	r3, #10241	; 0x2801
    5212:	a902      	add	r1, sp, #8
    5214:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    5216:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    521a:	f88d 7008 	strb.w	r7, [sp, #8]
    521e:	f8ad 300a 	strh.w	r3, [sp, #10]
    5222:	f7fc fe69 	bl	1ef8 <bt_uuid_cmp>
    5226:	b928      	cbnz	r0, 5234 <find_type_cb+0x34>
		data->group = NULL;
    5228:	2300      	movs	r3, #0
    522a:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    522c:	2001      	movs	r0, #1
}
    522e:	b008      	add	sp, #32
    5230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    5234:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5238:	a903      	add	r1, sp, #12
    523a:	6828      	ldr	r0, [r5, #0]
    523c:	f88d 700c 	strb.w	r7, [sp, #12]
    5240:	f8ad 300e 	strh.w	r3, [sp, #14]
    5244:	f7fc fe58 	bl	1ef8 <bt_uuid_cmp>
    5248:	b140      	cbz	r0, 525c <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    524a:	68a3      	ldr	r3, [r4, #8]
    524c:	2b00      	cmp	r3, #0
    524e:	d0ed      	beq.n	522c <find_type_cb+0x2c>
    5250:	8a2a      	ldrh	r2, [r5, #16]
    5252:	8859      	ldrh	r1, [r3, #2]
    5254:	4291      	cmp	r1, r2
    5256:	d2e9      	bcs.n	522c <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5258:	805a      	strh	r2, [r3, #2]
    525a:	e7e7      	b.n	522c <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    525c:	6862      	ldr	r2, [r4, #4]
    525e:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    5262:	8992      	ldrh	r2, [r2, #12]
    5264:	1a9b      	subs	r3, r3, r2
    5266:	2b03      	cmp	r3, #3
    5268:	d9e1      	bls.n	522e <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    526a:	2310      	movs	r3, #16
    526c:	9000      	str	r0, [sp, #0]
    526e:	eb0d 0203 	add.w	r2, sp, r3
    5272:	686e      	ldr	r6, [r5, #4]
    5274:	4629      	mov	r1, r5
    5276:	4640      	mov	r0, r8
    5278:	47b0      	blx	r6
	if (read < 0) {
    527a:	1e02      	subs	r2, r0, #0
    527c:	dbd4      	blt.n	5228 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    527e:	7c23      	ldrb	r3, [r4, #16]
    5280:	429a      	cmp	r2, r3
    5282:	d1d1      	bne.n	5228 <find_type_cb+0x28>
    5284:	a904      	add	r1, sp, #16
    5286:	68e0      	ldr	r0, [r4, #12]
    5288:	f7fc fca3 	bl	1bd2 <memcmp>
    528c:	2800      	cmp	r0, #0
    528e:	d1cb      	bne.n	5228 <find_type_cb+0x28>
	data->err = 0x00;
    5290:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5292:	6860      	ldr	r0, [r4, #4]
    5294:	2104      	movs	r1, #4
    5296:	3008      	adds	r0, #8
    5298:	f00d fd4c 	bl	12d34 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    529c:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    529e:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    52a0:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    52a2:	8043      	strh	r3, [r0, #2]
    52a4:	e7c2      	b.n	522c <find_type_cb+0x2c>
	...

000052a8 <bt_att_connected>:
{
    52a8:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    52aa:	2317      	movs	r3, #23
{
    52ac:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    52ae:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    52b2:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    52b4:	4906      	ldr	r1, [pc, #24]	; (52d0 <bt_att_connected+0x28>)
    52b6:	30a4      	adds	r0, #164	; 0xa4
    52b8:	f00f f888 	bl	143cc <k_delayed_work_init>
	list->head = NULL;
    52bc:	2300      	movs	r3, #0
    52be:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    52c2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	bt_gatt_connected(ch->chan.conn);
    52c6:	6820      	ldr	r0, [r4, #0]
}
    52c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    52cc:	f001 bd7c 	b.w	6dc8 <bt_gatt_connected>
    52d0:	000057f5 	.word	0x000057f5

000052d4 <check_perm.isra.4>:
	if ((mask & BT_GATT_PERM_READ) &&
    52d4:	f011 0f01 	tst.w	r1, #1
    52d8:	7c83      	ldrb	r3, [r0, #18]
    52da:	d004      	beq.n	52e6 <check_perm.isra.4+0x12>
    52dc:	f013 0f15 	tst.w	r3, #21
    52e0:	d012      	beq.n	5308 <check_perm.isra.4+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    52e2:	6842      	ldr	r2, [r0, #4]
    52e4:	b182      	cbz	r2, 5308 <check_perm.isra.4+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    52e6:	078a      	lsls	r2, r1, #30
    52e8:	d504      	bpl.n	52f4 <check_perm.isra.4+0x20>
    52ea:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    52ee:	d00d      	beq.n	530c <check_perm.isra.4+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    52f0:	6882      	ldr	r2, [r0, #8]
    52f2:	b15a      	cbz	r2, 530c <check_perm.isra.4+0x38>
	mask &= attr->perm;
    52f4:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    52f6:	f011 0f30 	tst.w	r1, #48	; 0x30
    52fa:	d109      	bne.n	5310 <check_perm.isra.4+0x3c>
	return 0;
    52fc:	f011 0f0c 	tst.w	r1, #12
    5300:	bf14      	ite	ne
    5302:	200f      	movne	r0, #15
    5304:	2000      	moveq	r0, #0
    5306:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    5308:	2002      	movs	r0, #2
    530a:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    530c:	2003      	movs	r0, #3
    530e:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    5310:	2005      	movs	r0, #5
}
    5312:	4770      	bx	lr

00005314 <read_type_cb>:
{
    5314:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    5318:	680f      	ldr	r7, [r1, #0]
{
    531a:	4606      	mov	r6, r0
    531c:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    531e:	6800      	ldr	r0, [r0, #0]
    5320:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    5322:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5326:	f7fc fde7 	bl	1ef8 <bt_uuid_cmp>
    532a:	4680      	mov	r8, r0
    532c:	2800      	cmp	r0, #0
    532e:	d14d      	bne.n	53cc <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5330:	2115      	movs	r1, #21
    5332:	4630      	mov	r0, r6
    5334:	f7ff ffce 	bl	52d4 <check_perm.isra.4>
    5338:	4605      	mov	r5, r0
    533a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    533c:	b148      	cbz	r0, 5352 <read_type_cb+0x3e>
		if (data->rsp->len) {
    533e:	68e3      	ldr	r3, [r4, #12]
    5340:	781d      	ldrb	r5, [r3, #0]
    5342:	b115      	cbz	r5, 534a <read_type_cb+0x36>
			data->err = 0x00;
    5344:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    5348:	4645      	mov	r5, r8
}
    534a:	4628      	mov	r0, r5
    534c:	b003      	add	sp, #12
    534e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5352:	68a0      	ldr	r0, [r4, #8]
    5354:	2102      	movs	r1, #2
    5356:	3008      	adds	r0, #8
    5358:	f00d fcec 	bl	12d34 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    535c:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    535e:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5360:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5362:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5364:	898a      	ldrh	r2, [r1, #12]
    5366:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    536a:	6889      	ldr	r1, [r1, #8]
    536c:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5370:	9500      	str	r5, [sp, #0]
    5372:	1a9b      	subs	r3, r3, r2
    5374:	b29b      	uxth	r3, r3
    5376:	440a      	add	r2, r1
    5378:	4648      	mov	r0, r9
    537a:	4631      	mov	r1, r6
    537c:	47c0      	blx	r8
	if (read < 0) {
    537e:	1e01      	subs	r1, r0, #0
    5380:	da08      	bge.n	5394 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    5382:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5386:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5388:	bf9a      	itte	ls
    538a:	4249      	negls	r1, r1
    538c:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    538e:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5390:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    5392:	e7da      	b.n	534a <read_type_cb+0x36>
	if (!data->rsp->len) {
    5394:	68e0      	ldr	r0, [r4, #12]
    5396:	7802      	ldrb	r2, [r0, #0]
    5398:	1c8b      	adds	r3, r1, #2
    539a:	b982      	cbnz	r2, 53be <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    539c:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    539e:	68a0      	ldr	r0, [r4, #8]
    53a0:	3008      	adds	r0, #8
    53a2:	f00d fcc7 	bl	12d34 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    53a6:	68a3      	ldr	r3, [r4, #8]
    53a8:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    53ac:	899b      	ldrh	r3, [r3, #12]
    53ae:	1aed      	subs	r5, r5, r3
    53b0:	68e3      	ldr	r3, [r4, #12]
    53b2:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    53b4:	429d      	cmp	r5, r3
    53b6:	bfd4      	ite	le
    53b8:	2500      	movle	r5, #0
    53ba:	2501      	movgt	r5, #1
    53bc:	e7c5      	b.n	534a <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    53be:	429a      	cmp	r2, r3
    53c0:	d0ed      	beq.n	539e <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    53c2:	68a2      	ldr	r2, [r4, #8]
    53c4:	8993      	ldrh	r3, [r2, #12]
    53c6:	3b02      	subs	r3, #2
    53c8:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    53ca:	e7be      	b.n	534a <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    53cc:	2501      	movs	r5, #1
    53ce:	e7bc      	b.n	534a <read_type_cb+0x36>

000053d0 <uuid_create>:
{
    53d0:	b510      	push	{r4, lr}
	switch (buf->len) {
    53d2:	898a      	ldrh	r2, [r1, #12]
    53d4:	2a02      	cmp	r2, #2
{
    53d6:	4604      	mov	r4, r0
	switch (buf->len) {
    53d8:	d003      	beq.n	53e2 <uuid_create+0x12>
    53da:	2a10      	cmp	r2, #16
    53dc:	d00a      	beq.n	53f4 <uuid_create+0x24>
	return false;
    53de:	2000      	movs	r0, #0
}
    53e0:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    53e2:	2300      	movs	r3, #0
    53e4:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    53e6:	f101 0008 	add.w	r0, r1, #8
    53ea:	f00d fce1 	bl	12db0 <net_buf_simple_pull_le16>
    53ee:	8060      	strh	r0, [r4, #2]
		return true;
    53f0:	2001      	movs	r0, #1
    53f2:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    53f4:	2302      	movs	r3, #2
    53f6:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    53fa:	6889      	ldr	r1, [r1, #8]
    53fc:	f7fc fbfe 	bl	1bfc <memcpy>
    5400:	e7f6      	b.n	53f0 <uuid_create+0x20>
	...

00005404 <att_req_sent>:
{
    5404:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5406:	2104      	movs	r1, #4
    5408:	f7ff fd4c 	bl	4ea4 <bt_l2cap_le_lookup_tx_cid>
    540c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    540e:	30cc      	adds	r0, #204	; 0xcc
    5410:	f00e fcf5 	bl	13dfe <_impl_k_sem_give>
	if (att->req) {
    5414:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5418:	b143      	cbz	r3, 542c <att_req_sent+0x28>
    541a:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    541e:	f247 5230 	movw	r2, #30000	; 0x7530
    5422:	4803      	ldr	r0, [pc, #12]	; (5430 <att_req_sent+0x2c>)
}
    5424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5428:	f00f b844 	b.w	144b4 <k_delayed_work_submit_to_queue>
    542c:	bd10      	pop	{r4, pc}
    542e:	bf00      	nop
    5430:	20001990 	.word	0x20001990

00005434 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    5434:	6803      	ldr	r3, [r0, #0]
    5436:	7a5b      	ldrb	r3, [r3, #9]
    5438:	2b03      	cmp	r3, #3
    543a:	d10a      	bne.n	5452 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    543c:	f3bf 8f5b 	dmb	ish
    5440:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    5444:	f3bf 8f5b 	dmb	ish
    5448:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    544c:	f000 0001 	and.w	r0, r0, #1
    5450:	4770      	bx	lr
    5452:	2001      	movs	r0, #1
}
    5454:	4770      	bx	lr

00005456 <att_prepare_write_req>:
    5456:	2006      	movs	r0, #6
    5458:	4770      	bx	lr

0000545a <att_pdu_sent>:
{
    545a:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    545c:	2104      	movs	r1, #4
    545e:	f7ff fd21 	bl	4ea4 <bt_l2cap_le_lookup_tx_cid>
}
    5462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5466:	30cc      	adds	r0, #204	; 0xcc
    5468:	f00e bcc9 	b.w	13dfe <_impl_k_sem_give>

0000546c <att_rsp_sent>:
{
    546c:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    546e:	2104      	movs	r1, #4
    5470:	f7ff fd18 	bl	4ea4 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5474:	f3bf 8f5b 	dmb	ish
    5478:	f100 0394 	add.w	r3, r0, #148	; 0x94
    547c:	e853 2f00 	ldrex	r2, [r3]
    5480:	f022 0201 	bic.w	r2, r2, #1
    5484:	e843 2100 	strex	r1, r2, [r3]
    5488:	2900      	cmp	r1, #0
    548a:	d1f7      	bne.n	547c <att_rsp_sent+0x10>
    548c:	f3bf 8f5b 	dmb	ish
    5490:	30cc      	adds	r0, #204	; 0xcc
}
    5492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5496:	f00e bcb2 	b.w	13dfe <_impl_k_sem_give>

0000549a <att_cfm_sent>:
{
    549a:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    549c:	2104      	movs	r1, #4
    549e:	f7ff fd01 	bl	4ea4 <bt_l2cap_le_lookup_tx_cid>
    54a2:	f3bf 8f5b 	dmb	ish
    54a6:	f100 0394 	add.w	r3, r0, #148	; 0x94
    54aa:	e853 2f00 	ldrex	r2, [r3]
    54ae:	f022 0202 	bic.w	r2, r2, #2
    54b2:	e843 2100 	strex	r1, r2, [r3]
    54b6:	2900      	cmp	r1, #0
    54b8:	d1f7      	bne.n	54aa <att_cfm_sent+0x10>
    54ba:	f3bf 8f5b 	dmb	ish
    54be:	30cc      	adds	r0, #204	; 0xcc
}
    54c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    54c4:	f00e bc9b 	b.w	13dfe <_impl_k_sem_give>

000054c8 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    54c8:	7a43      	ldrb	r3, [r0, #9]
    54ca:	2b03      	cmp	r3, #3
{
    54cc:	b513      	push	{r0, r1, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    54ce:	d00b      	beq.n	54e8 <att_chan_get+0x20>
		BT_WARN("Not connected");
    54d0:	4b15      	ldr	r3, [pc, #84]	; (5528 <att_chan_get+0x60>)
    54d2:	9301      	str	r3, [sp, #4]
    54d4:	9300      	str	r3, [sp, #0]
    54d6:	4a15      	ldr	r2, [pc, #84]	; (552c <att_chan_get+0x64>)
    54d8:	4b15      	ldr	r3, [pc, #84]	; (5530 <att_chan_get+0x68>)
    54da:	4916      	ldr	r1, [pc, #88]	; (5534 <att_chan_get+0x6c>)
    54dc:	4816      	ldr	r0, [pc, #88]	; (5538 <att_chan_get+0x70>)
		BT_WARN("ATT context flagged as disconnected");
    54de:	f7fb fd55 	bl	f8c <printk>
		return NULL;
    54e2:	2000      	movs	r0, #0
}
    54e4:	b002      	add	sp, #8
    54e6:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    54e8:	2104      	movs	r1, #4
    54ea:	f7ff fceb 	bl	4ec4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    54ee:	4604      	mov	r4, r0
    54f0:	b950      	cbnz	r0, 5508 <att_chan_get+0x40>
		BT_ERR("Unable to find ATT channel");
    54f2:	4b0d      	ldr	r3, [pc, #52]	; (5528 <att_chan_get+0x60>)
    54f4:	9301      	str	r3, [sp, #4]
    54f6:	9300      	str	r3, [sp, #0]
    54f8:	4a10      	ldr	r2, [pc, #64]	; (553c <att_chan_get+0x74>)
    54fa:	4b0d      	ldr	r3, [pc, #52]	; (5530 <att_chan_get+0x68>)
    54fc:	490d      	ldr	r1, [pc, #52]	; (5534 <att_chan_get+0x6c>)
    54fe:	4810      	ldr	r0, [pc, #64]	; (5540 <att_chan_get+0x78>)
    5500:	f7fb fd44 	bl	f8c <printk>
    5504:	4620      	mov	r0, r4
    5506:	e7ed      	b.n	54e4 <att_chan_get+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5508:	f3bf 8f5b 	dmb	ish
    550c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    5510:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    5514:	075b      	lsls	r3, r3, #29
    5516:	d5f5      	bpl.n	5504 <att_chan_get+0x3c>
		BT_WARN("ATT context flagged as disconnected");
    5518:	4b03      	ldr	r3, [pc, #12]	; (5528 <att_chan_get+0x60>)
    551a:	9301      	str	r3, [sp, #4]
    551c:	9300      	str	r3, [sp, #0]
    551e:	4a03      	ldr	r2, [pc, #12]	; (552c <att_chan_get+0x64>)
    5520:	4b03      	ldr	r3, [pc, #12]	; (5530 <att_chan_get+0x68>)
    5522:	4904      	ldr	r1, [pc, #16]	; (5534 <att_chan_get+0x6c>)
    5524:	4807      	ldr	r0, [pc, #28]	; (5544 <att_chan_get+0x7c>)
    5526:	e7da      	b.n	54de <att_chan_get+0x16>
    5528:	0001496d 	.word	0x0001496d
    552c:	00015704 	.word	0x00015704
    5530:	00016191 	.word	0x00016191
    5534:	0001570b 	.word	0x0001570b
    5538:	000161d6 	.word	0x000161d6
    553c:	000156bc 	.word	0x000156bc
    5540:	000161f4 	.word	0x000161f4
    5544:	0001621f 	.word	0x0001621f

00005548 <write_cb>:
{
    5548:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    554c:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    554e:	f8d1 8000 	ldr.w	r8, [r1]
    5552:	212a      	movs	r1, #42	; 0x2a
{
    5554:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5556:	f7ff febd 	bl	52d4 <check_perm.isra.4>
    555a:	4605      	mov	r5, r0
    555c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    555e:	b9e0      	cbnz	r0, 559a <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    5560:	8a62      	ldrh	r2, [r4, #18]
    5562:	9001      	str	r0, [sp, #4]
    5564:	9200      	str	r2, [sp, #0]
    5566:	7c23      	ldrb	r3, [r4, #16]
    5568:	68b7      	ldr	r7, [r6, #8]
    556a:	68e2      	ldr	r2, [r4, #12]
    556c:	4631      	mov	r1, r6
    556e:	4640      	mov	r0, r8
    5570:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    5572:	2800      	cmp	r0, #0
    5574:	db02      	blt.n	557c <write_cb+0x34>
    5576:	7c23      	ldrb	r3, [r4, #16]
    5578:	4298      	cmp	r0, r3
    557a:	d00b      	beq.n	5594 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    557c:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    5580:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5582:	bf9a      	itte	ls
    5584:	4240      	negls	r0, r0
    5586:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    5588:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    558a:	7520      	strb	r0, [r4, #20]
}
    558c:	4628      	mov	r0, r5
    558e:	b002      	add	sp, #8
    5590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    5594:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    5596:	2501      	movs	r5, #1
    5598:	e7f8      	b.n	558c <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    559a:	2500      	movs	r5, #0
    559c:	e7f6      	b.n	558c <write_cb+0x44>
	...

000055a0 <att_send_req>:
{
    55a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    55a2:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    55a4:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    55a8:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    55ac:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    55ae:	4630      	mov	r0, r6
    55b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    55b4:	f00e fc4b 	bl	13e4e <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    55b8:	4628      	mov	r0, r5
    55ba:	f7ff ff3b 	bl	5434 <att_is_connected>
    55be:	b978      	cbnz	r0, 55e0 <att_send_req+0x40>
		BT_WARN("Disconnected");
    55c0:	4b18      	ldr	r3, [pc, #96]	; (5624 <att_send_req+0x84>)
    55c2:	9301      	str	r3, [sp, #4]
    55c4:	9300      	str	r3, [sp, #0]
    55c6:	4a18      	ldr	r2, [pc, #96]	; (5628 <att_send_req+0x88>)
    55c8:	4b18      	ldr	r3, [pc, #96]	; (562c <att_send_req+0x8c>)
    55ca:	4919      	ldr	r1, [pc, #100]	; (5630 <att_send_req+0x90>)
    55cc:	4819      	ldr	r0, [pc, #100]	; (5634 <att_send_req+0x94>)
    55ce:	f7fb fcdd 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    55d2:	4630      	mov	r0, r6
    55d4:	f00e fc13 	bl	13dfe <_impl_k_sem_give>
		return -ENOTCONN;
    55d8:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    55dc:	b002      	add	sp, #8
    55de:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    55e0:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    55e2:	f106 0008 	add.w	r0, r6, #8
    55e6:	f00d fbeb 	bl	12dc0 <net_buf_simple_headroom>
	state->len = buf->len;
    55ea:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    55ec:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    55ee:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    55f0:	6920      	ldr	r0, [r4, #16]
    55f2:	682d      	ldr	r5, [r5, #0]
    55f4:	f00d fb9a 	bl	12d2c <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    55f8:	6923      	ldr	r3, [r4, #16]
    55fa:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    55fc:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    55fe:	7818      	ldrb	r0, [r3, #0]
    5600:	f7ff fce0 	bl	4fc4 <att_op_get_type>
    5604:	3801      	subs	r0, #1
    5606:	b2c0      	uxtb	r0, r0
    5608:	2804      	cmp	r0, #4
    560a:	bf96      	itet	ls
    560c:	4b0a      	ldrls	r3, [pc, #40]	; (5638 <att_send_req+0x98>)
    560e:	4b0b      	ldrhi	r3, [pc, #44]	; (563c <att_send_req+0x9c>)
    5610:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5614:	4632      	mov	r2, r6
    5616:	4628      	mov	r0, r5
    5618:	2104      	movs	r1, #4
    561a:	f7ff fb57 	bl	4ccc <bt_l2cap_send_cb>
	return 0;
    561e:	2000      	movs	r0, #0
    5620:	e7dc      	b.n	55dc <att_send_req+0x3c>
    5622:	bf00      	nop
    5624:	0001496d 	.word	0x0001496d
    5628:	00015704 	.word	0x00015704
    562c:	00016154 	.word	0x00016154
    5630:	0001570b 	.word	0x0001570b
    5634:	0001627a 	.word	0x0001627a
    5638:	00016140 	.word	0x00016140
    563c:	0000545b 	.word	0x0000545b

00005640 <att_handle_rsp>:
{
    5640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5644:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    5646:	30a4      	adds	r0, #164	; 0xa4
{
    5648:	461e      	mov	r6, r3
    564a:	460f      	mov	r7, r1
    564c:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    564e:	f00e fecd 	bl	143ec <k_delayed_work_cancel>
	if (!att->req) {
    5652:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5656:	b9db      	cbnz	r3, 5690 <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
    5658:	4b1c      	ldr	r3, [pc, #112]	; (56cc <att_handle_rsp+0x8c>)
    565a:	9301      	str	r3, [sp, #4]
    565c:	9300      	str	r3, [sp, #0]
    565e:	4a1c      	ldr	r2, [pc, #112]	; (56d0 <att_handle_rsp+0x90>)
    5660:	4b1c      	ldr	r3, [pc, #112]	; (56d4 <att_handle_rsp+0x94>)
    5662:	491d      	ldr	r1, [pc, #116]	; (56d8 <att_handle_rsp+0x98>)
    5664:	481d      	ldr	r0, [pc, #116]	; (56dc <att_handle_rsp+0x9c>)
    5666:	f7fb fc91 	bl	f8c <printk>
    566a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    566e:	b159      	cbz	r1, 5688 <att_handle_rsp+0x48>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5670:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    5674:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5676:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    567a:	4291      	cmp	r1, r2
	list->tail = node;
    567c:	bf08      	it	eq
    567e:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    5682:	4620      	mov	r0, r4
    5684:	f7ff ff8c 	bl	55a0 <att_send_req>
}
    5688:	2000      	movs	r0, #0
    568a:	b003      	add	sp, #12
    568c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    5690:	6918      	ldr	r0, [r3, #16]
    5692:	b128      	cbz	r0, 56a0 <att_handle_rsp+0x60>
		net_buf_unref(att->req->buf);
    5694:	f00d fb1c 	bl	12cd0 <net_buf_unref>
		att->req->buf = NULL;
    5698:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    569c:	2200      	movs	r2, #0
    569e:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    56a0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    56a4:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    56a6:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    56aa:	2500      	movs	r5, #0
    56ac:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    56ae:	463a      	mov	r2, r7
    56b0:	9300      	str	r3, [sp, #0]
    56b2:	4631      	mov	r1, r6
    56b4:	4643      	mov	r3, r8
    56b6:	47c8      	blx	r9
	if (!att->req->func) {
    56b8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    56bc:	6843      	ldr	r3, [r0, #4]
    56be:	b90b      	cbnz	r3, 56c4 <att_handle_rsp+0x84>
		att_req_destroy(att->req);
    56c0:	f7ff fcca 	bl	5058 <att_req_destroy>
	att->req = NULL;
    56c4:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    56c8:	e7cf      	b.n	566a <att_handle_rsp+0x2a>
    56ca:	bf00      	nop
    56cc:	0001496d 	.word	0x0001496d
    56d0:	00015704 	.word	0x00015704
    56d4:	00016161 	.word	0x00016161
    56d8:	0001570b 	.word	0x0001570b
    56dc:	00016253 	.word	0x00016253

000056e0 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    56e0:	898a      	ldrh	r2, [r1, #12]
    56e2:	6889      	ldr	r1, [r1, #8]
    56e4:	2300      	movs	r3, #0
    56e6:	f7ff bfab 	b.w	5640 <att_handle_rsp>

000056ea <att_handle_exec_write_rsp>:
    56ea:	f7ff bff9 	b.w	56e0 <att_confirm>

000056ee <att_handle_prepare_write_rsp>:
    56ee:	f7ff bff7 	b.w	56e0 <att_confirm>

000056f2 <att_handle_write_rsp>:
    56f2:	f7ff bff5 	b.w	56e0 <att_confirm>

000056f6 <att_handle_read_mult_rsp>:
    56f6:	f7ff bff3 	b.w	56e0 <att_confirm>

000056fa <att_handle_read_blob_rsp>:
    56fa:	f7ff bff1 	b.w	56e0 <att_confirm>

000056fe <att_handle_read_rsp>:
    56fe:	f7ff bfef 	b.w	56e0 <att_confirm>

00005702 <att_handle_read_type_rsp>:
    5702:	f7ff bfed 	b.w	56e0 <att_confirm>

00005706 <att_handle_find_type_rsp>:
    5706:	f7ff bfeb 	b.w	56e0 <att_confirm>

0000570a <att_handle_find_info_rsp>:
    570a:	f7ff bfe9 	b.w	56e0 <att_confirm>

0000570e <att_mtu_rsp>:
{
    570e:	b410      	push	{r4}
    5710:	460a      	mov	r2, r1
	if (!att) {
    5712:	4603      	mov	r3, r0
    5714:	b180      	cbz	r0, 5738 <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    5716:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    5718:	880c      	ldrh	r4, [r1, #0]
    571a:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    571c:	bf83      	ittte	hi
    571e:	2417      	movhi	r4, #23
    5720:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5722:	f8a3 405a 	strhhi.w	r4, [r3, #90]	; 0x5a
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    5726:	2200      	movls	r2, #0
    5728:	bf99      	ittee	ls
    572a:	2304      	movls	r3, #4
    572c:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    572e:	2300      	movhi	r3, #0
    5730:	8992      	ldrhhi	r2, [r2, #12]
}
    5732:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    5734:	f7ff bf84 	b.w	5640 <att_handle_rsp>
}
    5738:	bc10      	pop	{r4}
    573a:	4770      	bx	lr

0000573c <att_error_rsp>:
{
    573c:	b430      	push	{r4, r5}
	if (!att->req) {
    573e:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    5742:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    5744:	b16a      	cbz	r2, 5762 <att_error_rsp+0x26>
	if (att->req->buf) {
    5746:	6913      	ldr	r3, [r2, #16]
    5748:	b12b      	cbz	r3, 5756 <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    574a:	8995      	ldrh	r5, [r2, #12]
    574c:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    574e:	89d2      	ldrh	r2, [r2, #14]
    5750:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    5752:	4429      	add	r1, r5
    5754:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    5756:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    5758:	2200      	movs	r2, #0
    575a:	4611      	mov	r1, r2
}
    575c:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    575e:	f7ff bf6f 	b.w	5640 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    5762:	230e      	movs	r3, #14
    5764:	e7f8      	b.n	5758 <att_error_rsp+0x1c>

00005766 <att_reset>:
{
    5766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5768:	f100 0394 	add.w	r3, r0, #148	; 0x94
    576c:	4605      	mov	r5, r0
    576e:	f3bf 8f5b 	dmb	ish
    5772:	e853 2f00 	ldrex	r2, [r3]
    5776:	f042 0204 	orr.w	r2, r2, #4
    577a:	e843 2100 	strex	r1, r2, [r3]
    577e:	2900      	cmp	r1, #0
    5780:	d1f7      	bne.n	5772 <att_reset+0xc>
    5782:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    5786:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    578a:	4620      	mov	r0, r4
    578c:	f00e fb37 	bl	13dfe <_impl_k_sem_give>
    5790:	4620      	mov	r0, r4
    5792:	f00e fb34 	bl	13dfe <_impl_k_sem_give>
    5796:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    579a:	b98c      	cbnz	r4, 57c0 <att_reset+0x5a>
	if (!att->req) {
    579c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    57a0:	2200      	movs	r2, #0
    57a2:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    57a6:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    57aa:	b90b      	cbnz	r3, 57b0 <att_reset+0x4a>
}
    57ac:	b003      	add	sp, #12
    57ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    57b0:	230e      	movs	r3, #14
    57b2:	4611      	mov	r1, r2
    57b4:	4628      	mov	r0, r5
}
    57b6:	b003      	add	sp, #12
    57b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    57bc:	f7ff bf40 	b.w	5640 <att_handle_rsp>
	return node->next;
    57c0:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    57c2:	6867      	ldr	r7, [r4, #4]
    57c4:	b12f      	cbz	r7, 57d2 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    57c6:	2300      	movs	r3, #0
    57c8:	9400      	str	r4, [sp, #0]
    57ca:	461a      	mov	r2, r3
    57cc:	210e      	movs	r1, #14
    57ce:	4618      	mov	r0, r3
    57d0:	47b8      	blx	r7
		att_req_destroy(req);
    57d2:	4620      	mov	r0, r4
    57d4:	f7ff fc40 	bl	5058 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    57d8:	2e00      	cmp	r6, #0
    57da:	d0df      	beq.n	579c <att_reset+0x36>
    57dc:	4634      	mov	r4, r6
    57de:	6836      	ldr	r6, [r6, #0]
    57e0:	e7ef      	b.n	57c2 <att_reset+0x5c>

000057e2 <bt_att_disconnected>:
{
    57e2:	b510      	push	{r4, lr}
    57e4:	4604      	mov	r4, r0
	att_reset(att);
    57e6:	f7ff ffbe 	bl	5766 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    57ea:	6820      	ldr	r0, [r4, #0]
}
    57ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    57f0:	f001 bb0c 	b.w	6e0c <bt_gatt_disconnected>

000057f4 <att_timeout>:
{
    57f4:	b513      	push	{r0, r1, r4, lr}
	BT_ERR("ATT Timeout");
    57f6:	4b0b      	ldr	r3, [pc, #44]	; (5824 <att_timeout+0x30>)
    57f8:	4a0b      	ldr	r2, [pc, #44]	; (5828 <att_timeout+0x34>)
    57fa:	490c      	ldr	r1, [pc, #48]	; (582c <att_timeout+0x38>)
    57fc:	9301      	str	r3, [sp, #4]
{
    57fe:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    5800:	9300      	str	r3, [sp, #0]
    5802:	480b      	ldr	r0, [pc, #44]	; (5830 <att_timeout+0x3c>)
    5804:	4b0b      	ldr	r3, [pc, #44]	; (5834 <att_timeout+0x40>)
    5806:	f7fb fbc1 	bl	f8c <printk>
	att_reset(att);
    580a:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
    580e:	f7ff ffaa 	bl	5766 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    5812:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    5816:	f001 faf9 	bl	6e0c <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    581a:	2300      	movs	r3, #0
    581c:	f844 3ca4 	str.w	r3, [r4, #-164]
}
    5820:	b002      	add	sp, #8
    5822:	bd10      	pop	{r4, pc}
    5824:	0001496d 	.word	0x0001496d
    5828:	000156bc 	.word	0x000156bc
    582c:	0001570b 	.word	0x0001570b
    5830:	000162bc 	.word	0x000162bc
    5834:	000161b0 	.word	0x000161b0

00005838 <read_cb>:
{
    5838:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    583c:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    583e:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    5840:	f8d1 9000 	ldr.w	r9, [r1]
{
    5844:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5846:	3008      	adds	r0, #8
    5848:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    584a:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    584e:	f00d fa71 	bl	12d34 <net_buf_simple_add>
	data->err = 0x00;
    5852:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5854:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    5856:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5858:	2115      	movs	r1, #21
    585a:	4630      	mov	r0, r6
    585c:	f7ff fd3a 	bl	52d4 <check_perm.isra.4>
    5860:	4605      	mov	r5, r0
    5862:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    5864:	bb08      	cbnz	r0, 58aa <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5866:	68a1      	ldr	r1, [r4, #8]
    5868:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    586c:	898a      	ldrh	r2, [r1, #12]
    586e:	6889      	ldr	r1, [r1, #8]
    5870:	88a0      	ldrh	r0, [r4, #4]
    5872:	9000      	str	r0, [sp, #0]
    5874:	1a9b      	subs	r3, r3, r2
    5876:	6877      	ldr	r7, [r6, #4]
    5878:	440a      	add	r2, r1
    587a:	b29b      	uxth	r3, r3
    587c:	4631      	mov	r1, r6
    587e:	4640      	mov	r0, r8
    5880:	47b8      	blx	r7
	if (read < 0) {
    5882:	1e01      	subs	r1, r0, #0
    5884:	da0b      	bge.n	589e <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    5886:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    588a:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    588c:	bf9a      	itte	ls
    588e:	4249      	negls	r1, r1
    5890:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    5892:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5894:	7421      	strb	r1, [r4, #16]
}
    5896:	4628      	mov	r0, r5
    5898:	b003      	add	sp, #12
    589a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    589e:	68a0      	ldr	r0, [r4, #8]
    58a0:	3008      	adds	r0, #8
    58a2:	f00d fa47 	bl	12d34 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    58a6:	2501      	movs	r5, #1
    58a8:	e7f5      	b.n	5896 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    58aa:	463d      	mov	r5, r7
    58ac:	e7f3      	b.n	5896 <read_cb+0x5e>
	...

000058b0 <bt_att_create_pdu>:
{
    58b0:	b530      	push	{r4, r5, lr}
    58b2:	b085      	sub	sp, #20
    58b4:	460d      	mov	r5, r1
    58b6:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    58b8:	f7ff fe06 	bl	54c8 <att_chan_get>
	if (!att) {
    58bc:	b1f0      	cbz	r0, 58fc <bt_att_create_pdu+0x4c>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    58be:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
    58c2:	3401      	adds	r4, #1
    58c4:	428c      	cmp	r4, r1
    58c6:	d90e      	bls.n	58e6 <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    58c8:	4b0d      	ldr	r3, [pc, #52]	; (5900 <bt_att_create_pdu+0x50>)
    58ca:	9303      	str	r3, [sp, #12]
    58cc:	9402      	str	r4, [sp, #8]
    58ce:	9101      	str	r1, [sp, #4]
    58d0:	9300      	str	r3, [sp, #0]
    58d2:	4a0c      	ldr	r2, [pc, #48]	; (5904 <bt_att_create_pdu+0x54>)
    58d4:	4b0c      	ldr	r3, [pc, #48]	; (5908 <bt_att_create_pdu+0x58>)
    58d6:	490d      	ldr	r1, [pc, #52]	; (590c <bt_att_create_pdu+0x5c>)
    58d8:	480d      	ldr	r0, [pc, #52]	; (5910 <bt_att_create_pdu+0x60>)
    58da:	f7fb fb57 	bl	f8c <printk>
		return NULL;
    58de:	2400      	movs	r4, #0
}
    58e0:	4620      	mov	r0, r4
    58e2:	b005      	add	sp, #20
    58e4:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    58e6:	2100      	movs	r1, #0
    58e8:	4608      	mov	r0, r1
    58ea:	f7ff f9ec 	bl	4cc6 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    58ee:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    58f0:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    58f2:	3008      	adds	r0, #8
    58f4:	f00d fa1e 	bl	12d34 <net_buf_simple_add>
	hdr->code = op;
    58f8:	7005      	strb	r5, [r0, #0]
	return buf;
    58fa:	e7f1      	b.n	58e0 <bt_att_create_pdu+0x30>
		return NULL;
    58fc:	4604      	mov	r4, r0
    58fe:	e7ef      	b.n	58e0 <bt_att_create_pdu+0x30>
    5900:	0001496d 	.word	0x0001496d
    5904:	00015704 	.word	0x00015704
    5908:	0001619e 	.word	0x0001619e
    590c:	0001570b 	.word	0x0001570b
    5910:	0001630d 	.word	0x0001630d

00005914 <att_indicate>:
{
    5914:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5916:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    5918:	f101 0008 	add.w	r0, r1, #8
{
    591c:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    591e:	f00d fa47 	bl	12db0 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    5922:	89ab      	ldrh	r3, [r5, #12]
    5924:	68aa      	ldr	r2, [r5, #8]
    5926:	4601      	mov	r1, r0
    5928:	4620      	mov	r0, r4
    592a:	f001 fa19 	bl	6d60 <bt_gatt_notification>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    592e:	2200      	movs	r2, #0
    5930:	211e      	movs	r1, #30
    5932:	4620      	mov	r0, r4
    5934:	f7ff ffbc 	bl	58b0 <bt_att_create_pdu>
	if (!buf) {
    5938:	4602      	mov	r2, r0
    593a:	b120      	cbz	r0, 5946 <att_indicate+0x32>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    593c:	4b03      	ldr	r3, [pc, #12]	; (594c <att_indicate+0x38>)
    593e:	2104      	movs	r1, #4
    5940:	4620      	mov	r0, r4
    5942:	f7ff f9c3 	bl	4ccc <bt_l2cap_send_cb>
}
    5946:	2000      	movs	r0, #0
    5948:	bd38      	pop	{r3, r4, r5, pc}
    594a:	bf00      	nop
    594c:	0000549b 	.word	0x0000549b

00005950 <att_mtu_req>:
{
    5950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    5954:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5956:	881b      	ldrh	r3, [r3, #0]
    5958:	2b16      	cmp	r3, #22
{
    595a:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    595c:	d91c      	bls.n	5998 <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    595e:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    5962:	2202      	movs	r2, #2
    5964:	2103      	movs	r1, #3
    5966:	4640      	mov	r0, r8
    5968:	f7ff ffa2 	bl	58b0 <bt_att_create_pdu>
	if (!pdu) {
    596c:	4607      	mov	r7, r0
    596e:	b1b0      	cbz	r0, 599e <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    5970:	2102      	movs	r1, #2
    5972:	3008      	adds	r0, #8
    5974:	f00d f9de 	bl	12d34 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    5978:	2617      	movs	r6, #23
    597a:	2400      	movs	r4, #0
    597c:	7006      	strb	r6, [r0, #0]
    597e:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    5980:	4b08      	ldr	r3, [pc, #32]	; (59a4 <att_mtu_req+0x54>)
    5982:	4640      	mov	r0, r8
    5984:	463a      	mov	r2, r7
    5986:	2104      	movs	r1, #4
    5988:	f7ff f9a0 	bl	4ccc <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    598c:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    598e:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	return 0;
    5992:	4620      	mov	r0, r4
    5994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    5998:	2004      	movs	r0, #4
    599a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    599e:	200e      	movs	r0, #14
}
    59a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59a4:	0000546d 	.word	0x0000546d

000059a8 <send_err_rsp.part.10>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    59a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59ac:	4688      	mov	r8, r1
    59ae:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    59b0:	2101      	movs	r1, #1
    59b2:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    59b4:	4605      	mov	r5, r0
    59b6:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    59b8:	f7ff ff7a 	bl	58b0 <bt_att_create_pdu>
	if (!buf) {
    59bc:	4604      	mov	r4, r0
    59be:	b180      	cbz	r0, 59e2 <send_err_rsp.part.10+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    59c0:	2104      	movs	r1, #4
    59c2:	3008      	adds	r0, #8
    59c4:	f00d f9b6 	bl	12d34 <net_buf_simple_add>
	rsp->request = req;
    59c8:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    59cc:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    59ce:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    59d2:	4622      	mov	r2, r4
    59d4:	4628      	mov	r0, r5
    59d6:	4b04      	ldr	r3, [pc, #16]	; (59e8 <send_err_rsp.part.10+0x40>)
    59d8:	2104      	movs	r1, #4
}
    59da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    59de:	f7ff b975 	b.w	4ccc <bt_l2cap_send_cb>
    59e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59e6:	bf00      	nop
    59e8:	0000546d 	.word	0x0000546d

000059ec <bt_att_recv>:
{
    59ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    59ee:	898b      	ldrh	r3, [r1, #12]
{
    59f0:	b085      	sub	sp, #20
    59f2:	4604      	mov	r4, r0
    59f4:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    59f6:	b953      	cbnz	r3, 5a0e <bt_att_recv+0x22>
		BT_ERR("Too small ATT PDU received");
    59f8:	4b4b      	ldr	r3, [pc, #300]	; (5b28 <bt_att_recv+0x13c>)
    59fa:	9301      	str	r3, [sp, #4]
    59fc:	9300      	str	r3, [sp, #0]
    59fe:	4a4b      	ldr	r2, [pc, #300]	; (5b2c <bt_att_recv+0x140>)
    5a00:	4b4b      	ldr	r3, [pc, #300]	; (5b30 <bt_att_recv+0x144>)
    5a02:	494c      	ldr	r1, [pc, #304]	; (5b34 <bt_att_recv+0x148>)
    5a04:	484c      	ldr	r0, [pc, #304]	; (5b38 <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected request");
    5a06:	f7fb fac1 	bl	f8c <printk>
}
    5a0a:	b005      	add	sp, #20
    5a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    5a0e:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5a10:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    5a12:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    5a16:	f00d f9bb 	bl	12d90 <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    5a1a:	4a48      	ldr	r2, [pc, #288]	; (5b3c <bt_att_recv+0x150>)
    5a1c:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5a1e:	2300      	movs	r3, #0
    5a20:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    5a22:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    5a26:	4286      	cmp	r6, r0
    5a28:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    5a2c:	d11c      	bne.n	5a68 <bt_att_recv+0x7c>
		if (handler->type == ATT_REQUEST &&
    5a2e:	4472      	add	r2, lr
    5a30:	7896      	ldrb	r6, [r2, #2]
    5a32:	2e01      	cmp	r6, #1
    5a34:	d136      	bne.n	5aa4 <bt_att_recv+0xb8>
    5a36:	f3bf 8f5b 	dmb	ish
    5a3a:	f104 0294 	add.w	r2, r4, #148	; 0x94
    5a3e:	e852 3f00 	ldrex	r3, [r2]
    5a42:	f043 0001 	orr.w	r0, r3, #1
    5a46:	e842 0c00 	strex	ip, r0, [r2]
    5a4a:	f1bc 0f00 	cmp.w	ip, #0
    5a4e:	d1f6      	bne.n	5a3e <bt_att_recv+0x52>
    5a50:	f3bf 8f5b 	dmb	ish
    5a54:	07da      	lsls	r2, r3, #31
    5a56:	d540      	bpl.n	5ada <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected request");
    5a58:	4b33      	ldr	r3, [pc, #204]	; (5b28 <bt_att_recv+0x13c>)
    5a5a:	9301      	str	r3, [sp, #4]
    5a5c:	9300      	str	r3, [sp, #0]
    5a5e:	4a38      	ldr	r2, [pc, #224]	; (5b40 <bt_att_recv+0x154>)
    5a60:	4b33      	ldr	r3, [pc, #204]	; (5b30 <bt_att_recv+0x144>)
    5a62:	4934      	ldr	r1, [pc, #208]	; (5b34 <bt_att_recv+0x148>)
    5a64:	4837      	ldr	r0, [pc, #220]	; (5b44 <bt_att_recv+0x158>)
    5a66:	e7ce      	b.n	5a06 <bt_att_recv+0x1a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5a68:	3301      	adds	r3, #1
    5a6a:	2b1b      	cmp	r3, #27
    5a6c:	d1d9      	bne.n	5a22 <bt_att_recv+0x36>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    5a6e:	4b2e      	ldr	r3, [pc, #184]	; (5b28 <bt_att_recv+0x13c>)
    5a70:	9302      	str	r3, [sp, #8]
    5a72:	9001      	str	r0, [sp, #4]
    5a74:	9300      	str	r3, [sp, #0]
    5a76:	4a32      	ldr	r2, [pc, #200]	; (5b40 <bt_att_recv+0x154>)
    5a78:	4b2d      	ldr	r3, [pc, #180]	; (5b30 <bt_att_recv+0x144>)
    5a7a:	492e      	ldr	r1, [pc, #184]	; (5b34 <bt_att_recv+0x148>)
    5a7c:	4832      	ldr	r0, [pc, #200]	; (5b48 <bt_att_recv+0x15c>)
    5a7e:	f7fb fa85 	bl	f8c <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    5a82:	782d      	ldrb	r5, [r5, #0]
    5a84:	4628      	mov	r0, r5
    5a86:	f7ff fa9d 	bl	4fc4 <att_op_get_type>
    5a8a:	2800      	cmp	r0, #0
    5a8c:	d0bd      	beq.n	5a0a <bt_att_recv+0x1e>
	if (!req) {
    5a8e:	2d00      	cmp	r5, #0
    5a90:	d0bb      	beq.n	5a0a <bt_att_recv+0x1e>
    5a92:	2306      	movs	r3, #6
    5a94:	2200      	movs	r2, #0
    5a96:	4629      	mov	r1, r5
    5a98:	6820      	ldr	r0, [r4, #0]
}
    5a9a:	b005      	add	sp, #20
    5a9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5aa0:	f7ff bf82 	b.w	59a8 <send_err_rsp.part.10>
		} else if (handler->type == ATT_INDICATION &&
    5aa4:	2e05      	cmp	r6, #5
    5aa6:	d118      	bne.n	5ada <bt_att_recv+0xee>
    5aa8:	f3bf 8f5b 	dmb	ish
    5aac:	f104 0294 	add.w	r2, r4, #148	; 0x94
    5ab0:	e852 3f00 	ldrex	r3, [r2]
    5ab4:	f043 0002 	orr.w	r0, r3, #2
    5ab8:	e842 0c00 	strex	ip, r0, [r2]
    5abc:	f1bc 0f00 	cmp.w	ip, #0
    5ac0:	d1f6      	bne.n	5ab0 <bt_att_recv+0xc4>
    5ac2:	f3bf 8f5b 	dmb	ish
    5ac6:	079b      	lsls	r3, r3, #30
    5ac8:	d507      	bpl.n	5ada <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected indication");
    5aca:	4b17      	ldr	r3, [pc, #92]	; (5b28 <bt_att_recv+0x13c>)
    5acc:	9301      	str	r3, [sp, #4]
    5ace:	9300      	str	r3, [sp, #0]
    5ad0:	4a1b      	ldr	r2, [pc, #108]	; (5b40 <bt_att_recv+0x154>)
    5ad2:	4b17      	ldr	r3, [pc, #92]	; (5b30 <bt_att_recv+0x144>)
    5ad4:	4917      	ldr	r1, [pc, #92]	; (5b34 <bt_att_recv+0x148>)
    5ad6:	481d      	ldr	r0, [pc, #116]	; (5b4c <bt_att_recv+0x160>)
    5ad8:	e795      	b.n	5a06 <bt_att_recv+0x1a>
	if (buf->len < handler->expect_len) {
    5ada:	eb01 030e 	add.w	r3, r1, lr
    5ade:	89ba      	ldrh	r2, [r7, #12]
    5ae0:	7859      	ldrb	r1, [r3, #1]
    5ae2:	4291      	cmp	r1, r2
    5ae4:	d90f      	bls.n	5b06 <bt_att_recv+0x11a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    5ae6:	4b10      	ldr	r3, [pc, #64]	; (5b28 <bt_att_recv+0x13c>)
    5ae8:	9303      	str	r3, [sp, #12]
    5aea:	7829      	ldrb	r1, [r5, #0]
    5aec:	9102      	str	r1, [sp, #8]
    5aee:	9201      	str	r2, [sp, #4]
    5af0:	9300      	str	r3, [sp, #0]
    5af2:	4a0e      	ldr	r2, [pc, #56]	; (5b2c <bt_att_recv+0x140>)
    5af4:	4b0e      	ldr	r3, [pc, #56]	; (5b30 <bt_att_recv+0x144>)
    5af6:	490f      	ldr	r1, [pc, #60]	; (5b34 <bt_att_recv+0x148>)
    5af8:	4815      	ldr	r0, [pc, #84]	; (5b50 <bt_att_recv+0x164>)
    5afa:	f7fb fa47 	bl	f8c <printk>
	if (handler->type == ATT_REQUEST && err) {
    5afe:	2e01      	cmp	r6, #1
    5b00:	d183      	bne.n	5a0a <bt_att_recv+0x1e>
		err = BT_ATT_ERR_INVALID_PDU;
    5b02:	2304      	movs	r3, #4
    5b04:	e00a      	b.n	5b1c <bt_att_recv+0x130>
		err = handler->func(att, buf);
    5b06:	685b      	ldr	r3, [r3, #4]
    5b08:	4639      	mov	r1, r7
    5b0a:	4620      	mov	r0, r4
    5b0c:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    5b0e:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    5b10:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    5b12:	f47f af7a 	bne.w	5a0a <bt_att_recv+0x1e>
    5b16:	2800      	cmp	r0, #0
    5b18:	f43f af77 	beq.w	5a0a <bt_att_recv+0x1e>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    5b1c:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    5b1e:	2900      	cmp	r1, #0
    5b20:	f43f af73 	beq.w	5a0a <bt_att_recv+0x1e>
    5b24:	2200      	movs	r2, #0
    5b26:	e7b7      	b.n	5a98 <bt_att_recv+0xac>
    5b28:	0001496d 	.word	0x0001496d
    5b2c:	000156bc 	.word	0x000156bc
    5b30:	00016185 	.word	0x00016185
    5b34:	0001570b 	.word	0x0001570b
    5b38:	00016342 	.word	0x00016342
    5b3c:	00016444 	.word	0x00016444
    5b40:	00015704 	.word	0x00015704
    5b44:	0001636d 	.word	0x0001636d
    5b48:	000163f7 	.word	0x000163f7
    5b4c:	00016399 	.word	0x00016399
    5b50:	000163c8 	.word	0x000163c8

00005b54 <att_read_group_req>:
{
    5b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5b58:	898b      	ldrh	r3, [r1, #12]
    5b5a:	2b06      	cmp	r3, #6
{
    5b5c:	b08d      	sub	sp, #52	; 0x34
    5b5e:	4680      	mov	r8, r0
    5b60:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5b62:	d001      	beq.n	5b68 <att_read_group_req+0x14>
    5b64:	2b14      	cmp	r3, #20
    5b66:	d168      	bne.n	5c3a <att_read_group_req+0xe6>
	req = (void *)buf->data;
    5b68:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    5b6a:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5b6c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5b70:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5b74:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5b76:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    5b78:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    5b7a:	f00d f909 	bl	12d90 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5b7e:	4621      	mov	r1, r4
    5b80:	4638      	mov	r0, r7
    5b82:	f7ff fc25 	bl	53d0 <uuid_create>
    5b86:	2800      	cmp	r0, #0
    5b88:	d059      	beq.n	5c3e <att_read_group_req+0xea>
	if (!start || !end) {
    5b8a:	2d00      	cmp	r5, #0
    5b8c:	d05a      	beq.n	5c44 <att_read_group_req+0xf0>
    5b8e:	2400      	movs	r4, #0
    5b90:	2e00      	cmp	r6, #0
    5b92:	d056      	beq.n	5c42 <att_read_group_req+0xee>
	if (start > end) {
    5b94:	42b5      	cmp	r5, r6
    5b96:	d855      	bhi.n	5c44 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5b98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5b9c:	4669      	mov	r1, sp
    5b9e:	4638      	mov	r0, r7
    5ba0:	f88d 4000 	strb.w	r4, [sp]
    5ba4:	f8ad 3002 	strh.w	r3, [sp, #2]
    5ba8:	f7fc f9a6 	bl	1ef8 <bt_uuid_cmp>
    5bac:	bb38      	cbnz	r0, 5bfe <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    5bae:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    5bb2:	2214      	movs	r2, #20
    5bb4:	2100      	movs	r1, #0
    5bb6:	a807      	add	r0, sp, #28
    5bb8:	f7fc f84c 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    5bbc:	2201      	movs	r2, #1
    5bbe:	2111      	movs	r1, #17
    5bc0:	4648      	mov	r0, r9
    5bc2:	f7ff fe75 	bl	58b0 <bt_att_create_pdu>
    5bc6:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    5bc8:	2800      	cmp	r0, #0
    5bca:	d038      	beq.n	5c3e <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5bcc:	2101      	movs	r1, #1
    5bce:	3008      	adds	r0, #8
	data.uuid = uuid;
    5bd0:	9708      	str	r7, [sp, #32]
	data.att = att;
    5bd2:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5bd6:	f00d f8ad 	bl	12d34 <net_buf_simple_add>
	data.rsp->len = 0;
    5bda:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5bdc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5bde:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    5be0:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5be2:	4a1c      	ldr	r2, [pc, #112]	; (5c54 <att_read_group_req+0x100>)
	data.group = NULL;
    5be4:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5be6:	4631      	mov	r1, r6
    5be8:	4628      	mov	r0, r5
    5bea:	f000 ff71 	bl	6ad0 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    5bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5bf0:	781c      	ldrb	r4, [r3, #0]
    5bf2:	b9d4      	cbnz	r4, 5c2a <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    5bf4:	9809      	ldr	r0, [sp, #36]	; 0x24
    5bf6:	f00d f86b 	bl	12cd0 <net_buf_unref>
    5bfa:	230a      	movs	r3, #10
    5bfc:	e00c      	b.n	5c18 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    5bfe:	f642 0301 	movw	r3, #10241	; 0x2801
    5c02:	a901      	add	r1, sp, #4
    5c04:	4638      	mov	r0, r7
    5c06:	f88d 4004 	strb.w	r4, [sp, #4]
    5c0a:	f8ad 3006 	strh.w	r3, [sp, #6]
    5c0e:	f7fc f973 	bl	1ef8 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5c12:	2800      	cmp	r0, #0
    5c14:	d0cb      	beq.n	5bae <att_read_group_req+0x5a>
    5c16:	2310      	movs	r3, #16
    5c18:	462a      	mov	r2, r5
    5c1a:	2110      	movs	r1, #16
    5c1c:	4648      	mov	r0, r9
    5c1e:	f7ff fec3 	bl	59a8 <send_err_rsp.part.10>
}
    5c22:	4620      	mov	r0, r4
    5c24:	b00d      	add	sp, #52	; 0x34
    5c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5c2a:	4b0b      	ldr	r3, [pc, #44]	; (5c58 <att_read_group_req+0x104>)
    5c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5c2e:	2104      	movs	r1, #4
    5c30:	4648      	mov	r0, r9
    5c32:	f7ff f84b 	bl	4ccc <bt_l2cap_send_cb>
		return 0;
    5c36:	2400      	movs	r4, #0
    5c38:	e7f3      	b.n	5c22 <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    5c3a:	2404      	movs	r4, #4
    5c3c:	e7f1      	b.n	5c22 <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    5c3e:	240e      	movs	r4, #14
    5c40:	e7ef      	b.n	5c22 <att_read_group_req+0xce>
			*err = 0;
    5c42:	4635      	mov	r5, r6
    5c44:	2301      	movs	r3, #1
    5c46:	462a      	mov	r2, r5
    5c48:	2110      	movs	r1, #16
    5c4a:	4648      	mov	r0, r9
    5c4c:	f7ff feac 	bl	59a8 <send_err_rsp.part.10>
    5c50:	e7f1      	b.n	5c36 <att_read_group_req+0xe2>
    5c52:	bf00      	nop
    5c54:	00005099 	.word	0x00005099
    5c58:	0000546d 	.word	0x0000546d

00005c5c <att_read_mult_req>:
{
    5c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5c60:	6804      	ldr	r4, [r0, #0]
{
    5c62:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    5c64:	2214      	movs	r2, #20
{
    5c66:	4606      	mov	r6, r0
    5c68:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    5c6a:	a801      	add	r0, sp, #4
    5c6c:	2100      	movs	r1, #0
    5c6e:	f7fb fff1 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    5c72:	2200      	movs	r2, #0
    5c74:	210f      	movs	r1, #15
    5c76:	4620      	mov	r0, r4
    5c78:	f7ff fe1a 	bl	58b0 <bt_att_create_pdu>
    5c7c:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5c7e:	b368      	cbz	r0, 5cdc <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5c80:	f8df 9060 	ldr.w	r9, [pc, #96]	; 5ce4 <att_read_mult_req+0x88>
	data.att = att;
    5c84:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    5c86:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5c8a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    5c8e:	89ab      	ldrh	r3, [r5, #12]
    5c90:	2b01      	cmp	r3, #1
    5c92:	d806      	bhi.n	5ca2 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5c94:	4b12      	ldr	r3, [pc, #72]	; (5ce0 <att_read_mult_req+0x84>)
    5c96:	9a03      	ldr	r2, [sp, #12]
    5c98:	2104      	movs	r1, #4
    5c9a:	4620      	mov	r0, r4
    5c9c:	f7ff f816 	bl	4ccc <bt_l2cap_send_cb>
    5ca0:	e018      	b.n	5cd4 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    5ca2:	4638      	mov	r0, r7
    5ca4:	f00d f884 	bl	12db0 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5ca8:	ab01      	add	r3, sp, #4
    5caa:	464a      	mov	r2, r9
    5cac:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    5cae:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5cb0:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5cb4:	f000 ff0c 	bl	6ad0 <bt_gatt_foreach_attr>
		if (data.err) {
    5cb8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5cbc:	2b00      	cmp	r3, #0
    5cbe:	d0e6      	beq.n	5c8e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    5cc0:	9803      	ldr	r0, [sp, #12]
    5cc2:	f00d f805 	bl	12cd0 <net_buf_unref>
    5cc6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5cca:	4632      	mov	r2, r6
    5ccc:	210e      	movs	r1, #14
    5cce:	4620      	mov	r0, r4
    5cd0:	f7ff fe6a 	bl	59a8 <send_err_rsp.part.10>
	return 0;
    5cd4:	2000      	movs	r0, #0
}
    5cd6:	b007      	add	sp, #28
    5cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    5cdc:	200e      	movs	r0, #14
    5cde:	e7fa      	b.n	5cd6 <att_read_mult_req+0x7a>
    5ce0:	0000546d 	.word	0x0000546d
    5ce4:	00005839 	.word	0x00005839

00005ce8 <att_read_rsp>:
{
    5ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cec:	4607      	mov	r7, r0
    5cee:	b086      	sub	sp, #24
    5cf0:	460c      	mov	r4, r1
    5cf2:	4690      	mov	r8, r2
	if (!handle) {
    5cf4:	461d      	mov	r5, r3
    5cf6:	b3a3      	cbz	r3, 5d62 <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    5cf8:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    5cfa:	2214      	movs	r2, #20
    5cfc:	2100      	movs	r1, #0
    5cfe:	a801      	add	r0, sp, #4
    5d00:	f7fb ffa8 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    5d04:	2200      	movs	r2, #0
    5d06:	4641      	mov	r1, r8
    5d08:	4630      	mov	r0, r6
    5d0a:	f7ff fdd1 	bl	58b0 <bt_att_create_pdu>
    5d0e:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5d10:	b348      	cbz	r0, 5d66 <att_read_rsp+0x7e>
	data.offset = offset;
    5d12:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    5d16:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5d1a:	2301      	movs	r3, #1
    5d1c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5d20:	4a12      	ldr	r2, [pc, #72]	; (5d6c <att_read_rsp+0x84>)
	data.att = att;
    5d22:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5d24:	ab01      	add	r3, sp, #4
    5d26:	4629      	mov	r1, r5
    5d28:	4628      	mov	r0, r5
    5d2a:	f000 fed1 	bl	6ad0 <bt_gatt_foreach_attr>
	if (data.err) {
    5d2e:	f89d 7014 	ldrb.w	r7, [sp, #20]
    5d32:	b17f      	cbz	r7, 5d54 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    5d34:	9803      	ldr	r0, [sp, #12]
    5d36:	f00c ffcb 	bl	12cd0 <net_buf_unref>
	if (!req) {
    5d3a:	b13c      	cbz	r4, 5d4c <att_read_rsp+0x64>
    5d3c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5d40:	462a      	mov	r2, r5
    5d42:	4621      	mov	r1, r4
    5d44:	4630      	mov	r0, r6
    5d46:	f7ff fe2f 	bl	59a8 <send_err_rsp.part.10>
		return 0;
    5d4a:	2400      	movs	r4, #0
}
    5d4c:	4620      	mov	r0, r4
    5d4e:	b006      	add	sp, #24
    5d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5d54:	4b06      	ldr	r3, [pc, #24]	; (5d70 <att_read_rsp+0x88>)
    5d56:	9a03      	ldr	r2, [sp, #12]
    5d58:	2104      	movs	r1, #4
    5d5a:	4630      	mov	r0, r6
    5d5c:	f7fe ffb6 	bl	4ccc <bt_l2cap_send_cb>
    5d60:	e7f3      	b.n	5d4a <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    5d62:	2401      	movs	r4, #1
    5d64:	e7f2      	b.n	5d4c <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    5d66:	240e      	movs	r4, #14
    5d68:	e7f0      	b.n	5d4c <att_read_rsp+0x64>
    5d6a:	bf00      	nop
    5d6c:	00005839 	.word	0x00005839
    5d70:	0000546d 	.word	0x0000546d

00005d74 <att_read_blob_req>:
{
    5d74:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    5d76:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    5d78:	8813      	ldrh	r3, [r2, #0]
    5d7a:	8852      	ldrh	r2, [r2, #2]
    5d7c:	9200      	str	r2, [sp, #0]
    5d7e:	210c      	movs	r1, #12
    5d80:	220d      	movs	r2, #13
    5d82:	f7ff ffb1 	bl	5ce8 <att_read_rsp>
}
    5d86:	b003      	add	sp, #12
    5d88:	f85d fb04 	ldr.w	pc, [sp], #4

00005d8c <att_read_req>:
{
    5d8c:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    5d8e:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    5d90:	2200      	movs	r2, #0
    5d92:	881b      	ldrh	r3, [r3, #0]
    5d94:	9200      	str	r2, [sp, #0]
    5d96:	210a      	movs	r1, #10
    5d98:	220b      	movs	r2, #11
    5d9a:	f7ff ffa5 	bl	5ce8 <att_read_rsp>
}
    5d9e:	b003      	add	sp, #12
    5da0:	f85d fb04 	ldr.w	pc, [sp], #4

00005da4 <att_read_type_req>:
{
    5da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5da8:	898b      	ldrh	r3, [r1, #12]
    5daa:	2b06      	cmp	r3, #6
{
    5dac:	b08d      	sub	sp, #52	; 0x34
    5dae:	4607      	mov	r7, r0
    5db0:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5db2:	d001      	beq.n	5db8 <att_read_type_req+0x14>
    5db4:	2b14      	cmp	r3, #20
    5db6:	d152      	bne.n	5e5e <att_read_type_req+0xba>
	req = (void *)buf->data;
    5db8:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    5dba:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5dbc:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5dc0:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5dc4:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5dc6:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    5dc8:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    5dcc:	f00c ffe0 	bl	12d90 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5dd0:	4631      	mov	r1, r6
    5dd2:	4640      	mov	r0, r8
    5dd4:	f7ff fafc 	bl	53d0 <uuid_create>
    5dd8:	b198      	cbz	r0, 5e02 <att_read_type_req+0x5e>
	if (!start || !end) {
    5dda:	2d00      	cmp	r5, #0
    5ddc:	d042      	beq.n	5e64 <att_read_type_req+0xc0>
    5dde:	2c00      	cmp	r4, #0
    5de0:	d03f      	beq.n	5e62 <att_read_type_req+0xbe>
	if (start > end) {
    5de2:	42a5      	cmp	r5, r4
    5de4:	d83e      	bhi.n	5e64 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    5de6:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    5de8:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    5dea:	2100      	movs	r1, #0
    5dec:	eb0d 0002 	add.w	r0, sp, r2
    5df0:	f7fb ff30 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    5df4:	2201      	movs	r2, #1
    5df6:	2109      	movs	r1, #9
    5df8:	4630      	mov	r0, r6
    5dfa:	f7ff fd59 	bl	58b0 <bt_att_create_pdu>
    5dfe:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    5e00:	b908      	cbnz	r0, 5e06 <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    5e02:	240e      	movs	r4, #14
    5e04:	e027      	b.n	5e56 <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5e06:	2101      	movs	r1, #1
    5e08:	3008      	adds	r0, #8
	data.att = att;
    5e0a:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    5e0c:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5e10:	f00c ff90 	bl	12d34 <net_buf_simple_add>
	data.rsp->len = 0;
    5e14:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5e16:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5e18:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5e1a:	4621      	mov	r1, r4
	data.rsp->len = 0;
    5e1c:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5e1e:	4a14      	ldr	r2, [pc, #80]	; (5e70 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5e20:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5e24:	4628      	mov	r0, r5
    5e26:	ab06      	add	r3, sp, #24
    5e28:	f000 fe52 	bl	6ad0 <bt_gatt_foreach_attr>
	if (data.err) {
    5e2c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    5e30:	b15c      	cbz	r4, 5e4a <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    5e32:	9808      	ldr	r0, [sp, #32]
    5e34:	f00c ff4c 	bl	12cd0 <net_buf_unref>
    5e38:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    5e3c:	462a      	mov	r2, r5
    5e3e:	2108      	movs	r1, #8
    5e40:	4630      	mov	r0, r6
    5e42:	f7ff fdb1 	bl	59a8 <send_err_rsp.part.10>
		return 0;
    5e46:	2400      	movs	r4, #0
    5e48:	e005      	b.n	5e56 <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5e4a:	4b0a      	ldr	r3, [pc, #40]	; (5e74 <att_read_type_req+0xd0>)
    5e4c:	9a08      	ldr	r2, [sp, #32]
    5e4e:	2104      	movs	r1, #4
    5e50:	4630      	mov	r0, r6
    5e52:	f7fe ff3b 	bl	4ccc <bt_l2cap_send_cb>
}
    5e56:	4620      	mov	r0, r4
    5e58:	b00d      	add	sp, #52	; 0x34
    5e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    5e5e:	2404      	movs	r4, #4
    5e60:	e7f9      	b.n	5e56 <att_read_type_req+0xb2>
			*err = 0;
    5e62:	4625      	mov	r5, r4
    5e64:	2301      	movs	r3, #1
    5e66:	462a      	mov	r2, r5
    5e68:	2108      	movs	r1, #8
    5e6a:	4648      	mov	r0, r9
    5e6c:	e7e9      	b.n	5e42 <att_read_type_req+0x9e>
    5e6e:	bf00      	nop
    5e70:	00005315 	.word	0x00005315
    5e74:	0000546d 	.word	0x0000546d

00005e78 <att_find_type_req>:
{
    5e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5e7c:	f8d0 9000 	ldr.w	r9, [r0]
{
    5e80:	4680      	mov	r8, r0
	req = (void *)buf->data;
    5e82:	4608      	mov	r0, r1
{
    5e84:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    5e86:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    5e8a:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    5e8c:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    5e8e:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5e90:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    5e92:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    5e94:	f00c ff7c 	bl	12d90 <net_buf_simple_pull>
    5e98:	4682      	mov	sl, r0
	if (!start || !end) {
    5e9a:	2d00      	cmp	r5, #0
    5e9c:	d057      	beq.n	5f4e <att_find_type_req+0xd6>
    5e9e:	2400      	movs	r4, #0
    5ea0:	2f00      	cmp	r7, #0
    5ea2:	d053      	beq.n	5f4c <att_find_type_req+0xd4>
	if (start > end) {
    5ea4:	42bd      	cmp	r5, r7
    5ea6:	d852      	bhi.n	5f4e <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    5ea8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5eac:	a902      	add	r1, sp, #8
    5eae:	a801      	add	r0, sp, #4
    5eb0:	f8ad 6006 	strh.w	r6, [sp, #6]
    5eb4:	f88d 4004 	strb.w	r4, [sp, #4]
    5eb8:	f88d 4008 	strb.w	r4, [sp, #8]
    5ebc:	f8ad 300a 	strh.w	r3, [sp, #10]
    5ec0:	f7fc f81a 	bl	1ef8 <bt_uuid_cmp>
    5ec4:	4606      	mov	r6, r0
    5ec6:	b148      	cbz	r0, 5edc <att_find_type_req+0x64>
    5ec8:	230a      	movs	r3, #10
    5eca:	462a      	mov	r2, r5
    5ecc:	2106      	movs	r1, #6
    5ece:	4648      	mov	r0, r9
    5ed0:	f7ff fd6a 	bl	59a8 <send_err_rsp.part.10>
}
    5ed4:	4620      	mov	r0, r4
    5ed6:	b009      	add	sp, #36	; 0x24
    5ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    5edc:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    5ee0:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    5ee4:	2214      	movs	r2, #20
    5ee6:	4631      	mov	r1, r6
    5ee8:	a803      	add	r0, sp, #12
    5eea:	f7fb feb3 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    5eee:	4632      	mov	r2, r6
    5ef0:	2107      	movs	r1, #7
    5ef2:	4648      	mov	r0, r9
    5ef4:	f7ff fcdc 	bl	58b0 <bt_att_create_pdu>
    5ef8:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    5efa:	b328      	cbz	r0, 5f48 <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5efc:	230a      	movs	r3, #10
    5efe:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5f02:	4a14      	ldr	r2, [pc, #80]	; (5f54 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    5f04:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5f08:	ab03      	add	r3, sp, #12
    5f0a:	4639      	mov	r1, r7
    5f0c:	4628      	mov	r0, r5
	data.att = att;
    5f0e:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    5f12:	9605      	str	r6, [sp, #20]
	data.value = value;
    5f14:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5f18:	f000 fdda 	bl	6ad0 <bt_gatt_foreach_attr>
	if (data.err) {
    5f1c:	f89d 401d 	ldrb.w	r4, [sp, #29]
    5f20:	b15c      	cbz	r4, 5f3a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    5f22:	9804      	ldr	r0, [sp, #16]
    5f24:	f00c fed4 	bl	12cd0 <net_buf_unref>
    5f28:	f89d 301d 	ldrb.w	r3, [sp, #29]
    5f2c:	462a      	mov	r2, r5
    5f2e:	2106      	movs	r1, #6
    5f30:	4648      	mov	r0, r9
    5f32:	f7ff fd39 	bl	59a8 <send_err_rsp.part.10>
		return 0;
    5f36:	2400      	movs	r4, #0
    5f38:	e7cc      	b.n	5ed4 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5f3a:	4b07      	ldr	r3, [pc, #28]	; (5f58 <att_find_type_req+0xe0>)
    5f3c:	9a04      	ldr	r2, [sp, #16]
    5f3e:	2104      	movs	r1, #4
    5f40:	4648      	mov	r0, r9
    5f42:	f7fe fec3 	bl	4ccc <bt_l2cap_send_cb>
    5f46:	e7c5      	b.n	5ed4 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    5f48:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    5f4a:	e7c3      	b.n	5ed4 <att_find_type_req+0x5c>
			*err = 0;
    5f4c:	463d      	mov	r5, r7
    5f4e:	2301      	movs	r3, #1
    5f50:	e7ec      	b.n	5f2c <att_find_type_req+0xb4>
    5f52:	bf00      	nop
    5f54:	00005201 	.word	0x00005201
    5f58:	0000546d 	.word	0x0000546d

00005f5c <att_find_info_req>:
{
    5f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    5f5e:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    5f60:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5f62:	881d      	ldrh	r5, [r3, #0]
{
    5f64:	b085      	sub	sp, #20
    5f66:	4607      	mov	r7, r0
	if (!start || !end) {
    5f68:	b375      	cbz	r5, 5fc8 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    5f6a:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    5f6c:	b35c      	cbz	r4, 5fc6 <att_find_info_req+0x6a>
	if (start > end) {
    5f6e:	42a5      	cmp	r5, r4
    5f70:	d82a      	bhi.n	5fc8 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    5f72:	2210      	movs	r2, #16
    5f74:	2100      	movs	r1, #0
    5f76:	4668      	mov	r0, sp
    5f78:	f7fb fe6c 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    5f7c:	2200      	movs	r2, #0
    5f7e:	2105      	movs	r1, #5
    5f80:	4630      	mov	r0, r6
    5f82:	f7ff fc95 	bl	58b0 <bt_att_create_pdu>
    5f86:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    5f88:	b910      	cbnz	r0, 5f90 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    5f8a:	200e      	movs	r0, #14
}
    5f8c:	b005      	add	sp, #20
    5f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5f90:	4621      	mov	r1, r4
    5f92:	466b      	mov	r3, sp
    5f94:	4a0d      	ldr	r2, [pc, #52]	; (5fcc <att_find_info_req+0x70>)
	data.att = att;
    5f96:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5f98:	4628      	mov	r0, r5
    5f9a:	f000 fd99 	bl	6ad0 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    5f9e:	9c02      	ldr	r4, [sp, #8]
    5fa0:	b94c      	cbnz	r4, 5fb6 <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    5fa2:	9801      	ldr	r0, [sp, #4]
    5fa4:	f00c fe94 	bl	12cd0 <net_buf_unref>
    5fa8:	230a      	movs	r3, #10
    5faa:	462a      	mov	r2, r5
    5fac:	2104      	movs	r1, #4
    5fae:	4630      	mov	r0, r6
    5fb0:	f7ff fcfa 	bl	59a8 <send_err_rsp.part.10>
    5fb4:	e005      	b.n	5fc2 <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5fb6:	4b06      	ldr	r3, [pc, #24]	; (5fd0 <att_find_info_req+0x74>)
    5fb8:	9a01      	ldr	r2, [sp, #4]
    5fba:	2104      	movs	r1, #4
    5fbc:	4630      	mov	r0, r6
    5fbe:	f7fe fe85 	bl	4ccc <bt_l2cap_send_cb>
		return 0;
    5fc2:	2000      	movs	r0, #0
    5fc4:	e7e2      	b.n	5f8c <att_find_info_req+0x30>
			*err = 0;
    5fc6:	4625      	mov	r5, r4
    5fc8:	2301      	movs	r3, #1
    5fca:	e7ee      	b.n	5faa <att_find_info_req+0x4e>
    5fcc:	00005167 	.word	0x00005167
    5fd0:	0000546d 	.word	0x0000546d

00005fd4 <att_write_rsp.part.11.constprop.17>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    5fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fd8:	b086      	sub	sp, #24
    5fda:	4690      	mov	r8, r2
    5fdc:	4605      	mov	r5, r0
    5fde:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    5fe0:	2218      	movs	r2, #24
    5fe2:	2100      	movs	r1, #0
    5fe4:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    5fe6:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    5fe8:	f7fb fe34 	bl	1c54 <memset>
	if (rsp) {
    5fec:	f1b8 0f00 	cmp.w	r8, #0
    5ff0:	d11f      	bne.n	6032 <att_write_rsp.part.11.constprop.17+0x5e>
	data.offset = offset;
    5ff2:	2300      	movs	r3, #0
    5ff4:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    5ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5ffa:	9303      	str	r3, [sp, #12]
	data.len = len;
    5ffc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    6000:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6004:	2301      	movs	r3, #1
    6006:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    600a:	4a1b      	ldr	r2, [pc, #108]	; (6078 <att_write_rsp.part.11.constprop.17+0xa4>)
	data.conn = conn;
    600c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    600e:	466b      	mov	r3, sp
    6010:	4639      	mov	r1, r7
    6012:	4638      	mov	r0, r7
	data.op = op;
    6014:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6018:	f000 fd5a 	bl	6ad0 <bt_gatt_foreach_attr>
	if (data.err) {
    601c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6020:	b98c      	cbnz	r4, 6046 <att_write_rsp.part.11.constprop.17+0x72>
	if (data.buf) {
    6022:	9a01      	ldr	r2, [sp, #4]
    6024:	b1b2      	cbz	r2, 6054 <att_write_rsp.part.11.constprop.17+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    6026:	4b15      	ldr	r3, [pc, #84]	; (607c <att_write_rsp.part.11.constprop.17+0xa8>)
    6028:	2104      	movs	r1, #4
    602a:	4628      	mov	r0, r5
    602c:	f7fe fe4e 	bl	4ccc <bt_l2cap_send_cb>
    6030:	e011      	b.n	6056 <att_write_rsp.part.11.constprop.17+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    6032:	2200      	movs	r2, #0
    6034:	4641      	mov	r1, r8
    6036:	4628      	mov	r0, r5
    6038:	f7ff fc3a 	bl	58b0 <bt_att_create_pdu>
    603c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    603e:	2800      	cmp	r0, #0
    6040:	d1d7      	bne.n	5ff2 <att_write_rsp.part.11.constprop.17+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    6042:	240e      	movs	r4, #14
    6044:	e007      	b.n	6056 <att_write_rsp.part.11.constprop.17+0x82>
		if (rsp) {
    6046:	f1b8 0f00 	cmp.w	r8, #0
    604a:	d00f      	beq.n	606c <att_write_rsp.part.11.constprop.17+0x98>
			net_buf_unref(data.buf);
    604c:	9801      	ldr	r0, [sp, #4]
    604e:	f00c fe3f 	bl	12cd0 <net_buf_unref>
	if (!req) {
    6052:	b926      	cbnz	r6, 605e <att_write_rsp.part.11.constprop.17+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6054:	2400      	movs	r4, #0
}
    6056:	4620      	mov	r0, r4
    6058:	b006      	add	sp, #24
    605a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    605e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6062:	463a      	mov	r2, r7
    6064:	4631      	mov	r1, r6
    6066:	4628      	mov	r0, r5
    6068:	f7ff fc9e 	bl	59a8 <send_err_rsp.part.10>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    606c:	2e18      	cmp	r6, #24
    606e:	d1f1      	bne.n	6054 <att_write_rsp.part.11.constprop.17+0x80>
    6070:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6074:	e7ef      	b.n	6056 <att_write_rsp.part.11.constprop.17+0x82>
    6076:	bf00      	nop
    6078:	00005549 	.word	0x00005549
    607c:	0000546d 	.word	0x0000546d

00006080 <att_signed_write_cmd>:
{
    6080:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    6084:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    6086:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    6088:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    608c:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    608e:	4620      	mov	r0, r4
    6090:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    6092:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    6096:	f00c fe73 	bl	12d80 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    609a:	4629      	mov	r1, r5
    609c:	4630      	mov	r0, r6
    609e:	f000 ff42 	bl	6f26 <bt_smp_sign_verify>
	if (err) {
    60a2:	4607      	mov	r7, r0
    60a4:	b160      	cbz	r0, 60c0 <att_signed_write_cmd+0x40>
		BT_ERR("Error verifying data");
    60a6:	4b13      	ldr	r3, [pc, #76]	; (60f4 <att_signed_write_cmd+0x74>)
    60a8:	9301      	str	r3, [sp, #4]
    60aa:	9300      	str	r3, [sp, #0]
    60ac:	4a12      	ldr	r2, [pc, #72]	; (60f8 <att_signed_write_cmd+0x78>)
    60ae:	4b13      	ldr	r3, [pc, #76]	; (60fc <att_signed_write_cmd+0x7c>)
    60b0:	4913      	ldr	r1, [pc, #76]	; (6100 <att_signed_write_cmd+0x80>)
    60b2:	4814      	ldr	r0, [pc, #80]	; (6104 <att_signed_write_cmd+0x84>)
    60b4:	f7fa ff6a 	bl	f8c <printk>
    60b8:	2000      	movs	r0, #0
}
    60ba:	b002      	add	sp, #8
    60bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    60c0:	2101      	movs	r1, #1
    60c2:	4620      	mov	r0, r4
    60c4:	f00c fe64 	bl	12d90 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    60c8:	2102      	movs	r1, #2
    60ca:	4620      	mov	r0, r4
    60cc:	f00c fe60 	bl	12d90 <net_buf_simple_pull>
	if (!handle) {
    60d0:	f1b8 0f00 	cmp.w	r8, #0
    60d4:	d00c      	beq.n	60f0 <att_signed_write_cmd+0x70>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    60d6:	7b2b      	ldrb	r3, [r5, #12]
    60d8:	3b0c      	subs	r3, #12
    60da:	b2db      	uxtb	r3, r3
    60dc:	9301      	str	r3, [sp, #4]
    60de:	68ab      	ldr	r3, [r5, #8]
    60e0:	9300      	str	r3, [sp, #0]
    60e2:	463a      	mov	r2, r7
    60e4:	4643      	mov	r3, r8
    60e6:	4639      	mov	r1, r7
    60e8:	4630      	mov	r0, r6
    60ea:	f7ff ff73 	bl	5fd4 <att_write_rsp.part.11.constprop.17>
    60ee:	e7e4      	b.n	60ba <att_signed_write_cmd+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
    60f0:	2001      	movs	r0, #1
    60f2:	e7e2      	b.n	60ba <att_signed_write_cmd+0x3a>
    60f4:	0001496d 	.word	0x0001496d
    60f8:	000156bc 	.word	0x000156bc
    60fc:	00016170 	.word	0x00016170
    6100:	0001570b 	.word	0x0001570b
    6104:	00016297 	.word	0x00016297

00006108 <att_write_cmd>:
{
    6108:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    610a:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    610c:	f101 0008 	add.w	r0, r1, #8
{
    6110:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6112:	f00c fe4d 	bl	12db0 <net_buf_simple_pull_le16>
	if (!handle) {
    6116:	4603      	mov	r3, r0
    6118:	b150      	cbz	r0, 6130 <att_write_cmd+0x28>
    611a:	7b22      	ldrb	r2, [r4, #12]
    611c:	9201      	str	r2, [sp, #4]
    611e:	68a2      	ldr	r2, [r4, #8]
    6120:	9200      	str	r2, [sp, #0]
    6122:	2200      	movs	r2, #0
    6124:	4611      	mov	r1, r2
    6126:	4628      	mov	r0, r5
    6128:	f7ff ff54 	bl	5fd4 <att_write_rsp.part.11.constprop.17>
}
    612c:	b003      	add	sp, #12
    612e:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6130:	2001      	movs	r0, #1
    6132:	e7fb      	b.n	612c <att_write_cmd+0x24>

00006134 <att_write_req>:
{
    6134:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6136:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6138:	f101 0008 	add.w	r0, r1, #8
{
    613c:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    613e:	f00c fe37 	bl	12db0 <net_buf_simple_pull_le16>
	if (!handle) {
    6142:	4603      	mov	r3, r0
    6144:	b150      	cbz	r0, 615c <att_write_req+0x28>
    6146:	7b22      	ldrb	r2, [r4, #12]
    6148:	9201      	str	r2, [sp, #4]
    614a:	68a2      	ldr	r2, [r4, #8]
    614c:	9200      	str	r2, [sp, #0]
    614e:	2112      	movs	r1, #18
    6150:	2213      	movs	r2, #19
    6152:	4628      	mov	r0, r5
    6154:	f7ff ff3e 	bl	5fd4 <att_write_rsp.part.11.constprop.17>
}
    6158:	b003      	add	sp, #12
    615a:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    615c:	2001      	movs	r0, #1
    615e:	e7fb      	b.n	6158 <att_write_req+0x24>

00006160 <bt_att_init>:

void bt_att_init(void)
{
    6160:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6162:	4803      	ldr	r0, [pc, #12]	; (6170 <bt_att_init+0x10>)
    6164:	f7fe fcf4 	bl	4b50 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    6168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    616c:	f000 bc9a 	b.w	6aa4 <bt_gatt_init>
    6170:	20003bc0 	.word	0x20003bc0

00006174 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    6174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6176:	460d      	mov	r5, r1
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    6178:	4607      	mov	r7, r0
    617a:	2800      	cmp	r0, #0
    617c:	d04b      	beq.n	6216 <bt_att_send+0xa2>
    617e:	2900      	cmp	r1, #0
    6180:	d049      	beq.n	6216 <bt_att_send+0xa2>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6182:	f7ff f9a1 	bl	54c8 <att_chan_get>
	if (!att) {
    6186:	4604      	mov	r4, r0
    6188:	b1b0      	cbz	r0, 61b8 <bt_att_send+0x44>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    618a:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    618e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6192:	4630      	mov	r0, r6
    6194:	f00d fe5b 	bl	13e4e <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    6198:	4620      	mov	r0, r4
    619a:	f7ff f94b 	bl	5434 <att_is_connected>
    619e:	b970      	cbnz	r0, 61be <bt_att_send+0x4a>
		BT_WARN("Disconnected");
    61a0:	4b1e      	ldr	r3, [pc, #120]	; (621c <bt_att_send+0xa8>)
    61a2:	9301      	str	r3, [sp, #4]
    61a4:	9300      	str	r3, [sp, #0]
    61a6:	4a1e      	ldr	r2, [pc, #120]	; (6220 <bt_att_send+0xac>)
    61a8:	4b1e      	ldr	r3, [pc, #120]	; (6224 <bt_att_send+0xb0>)
    61aa:	491f      	ldr	r1, [pc, #124]	; (6228 <bt_att_send+0xb4>)
    61ac:	481f      	ldr	r0, [pc, #124]	; (622c <bt_att_send+0xb8>)
    61ae:	f7fa feed 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    61b2:	4630      	mov	r0, r6
    61b4:	f00d fe23 	bl	13dfe <_impl_k_sem_give>
		return -ENOTCONN;
    61b8:	f06f 0438 	mvn.w	r4, #56	; 0x38
    61bc:	e015      	b.n	61ea <bt_att_send+0x76>

	hdr = (void *)buf->data;

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    61be:	68ab      	ldr	r3, [r5, #8]
    61c0:	781b      	ldrb	r3, [r3, #0]
    61c2:	2bd2      	cmp	r3, #210	; 0xd2
    61c4:	d114      	bne.n	61f0 <bt_att_send+0x7c>
		int err;

		err = bt_smp_sign(conn, buf);
    61c6:	4629      	mov	r1, r5
    61c8:	4638      	mov	r0, r7
    61ca:	f000 feaf 	bl	6f2c <bt_smp_sign>
		if (err) {
    61ce:	4604      	mov	r4, r0
    61d0:	b170      	cbz	r0, 61f0 <bt_att_send+0x7c>
			BT_ERR("Error signing data");
    61d2:	4b12      	ldr	r3, [pc, #72]	; (621c <bt_att_send+0xa8>)
    61d4:	9301      	str	r3, [sp, #4]
    61d6:	9300      	str	r3, [sp, #0]
    61d8:	4a15      	ldr	r2, [pc, #84]	; (6230 <bt_att_send+0xbc>)
    61da:	4b12      	ldr	r3, [pc, #72]	; (6224 <bt_att_send+0xb0>)
    61dc:	4912      	ldr	r1, [pc, #72]	; (6228 <bt_att_send+0xb4>)
    61de:	4815      	ldr	r0, [pc, #84]	; (6234 <bt_att_send+0xc0>)
    61e0:	f7fa fed4 	bl	f8c <printk>
    61e4:	4630      	mov	r0, r6
    61e6:	f00d fe0a 	bl	13dfe <_impl_k_sem_give>
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));

	return 0;
}
    61ea:	4620      	mov	r0, r4
    61ec:	b003      	add	sp, #12
    61ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (att_op_get_type(buf->data[0])) {
    61f0:	68ab      	ldr	r3, [r5, #8]
    61f2:	7818      	ldrb	r0, [r3, #0]
    61f4:	f7fe fee6 	bl	4fc4 <att_op_get_type>
    61f8:	3801      	subs	r0, #1
    61fa:	b2c0      	uxtb	r0, r0
    61fc:	2804      	cmp	r0, #4
    61fe:	bf96      	itet	ls
    6200:	4b0d      	ldrls	r3, [pc, #52]	; (6238 <bt_att_send+0xc4>)
    6202:	4b0e      	ldrhi	r3, [pc, #56]	; (623c <bt_att_send+0xc8>)
    6204:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    6208:	462a      	mov	r2, r5
    620a:	2104      	movs	r1, #4
    620c:	4638      	mov	r0, r7
    620e:	f7fe fd5d 	bl	4ccc <bt_l2cap_send_cb>
	return 0;
    6212:	2400      	movs	r4, #0
    6214:	e7e9      	b.n	61ea <bt_att_send+0x76>
		return -EINVAL;
    6216:	f06f 0415 	mvn.w	r4, #21
    621a:	e7e6      	b.n	61ea <bt_att_send+0x76>
    621c:	0001496d 	.word	0x0001496d
    6220:	00015704 	.word	0x00015704
    6224:	000161ca 	.word	0x000161ca
    6228:	0001570b 	.word	0x0001570b
    622c:	0001627a 	.word	0x0001627a
    6230:	000156bc 	.word	0x000156bc
    6234:	0001641f 	.word	0x0001641f
    6238:	00016140 	.word	0x00016140
    623c:	0000545b 	.word	0x0000545b

00006240 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    6240:	b510      	push	{r4, lr}
    6242:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    6244:	b1d8      	cbz	r0, 627e <bt_att_req_send+0x3e>
    6246:	b1d1      	cbz	r1, 627e <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6248:	f7ff f93e 	bl	54c8 <att_chan_get>
	if (!att) {
    624c:	4603      	mov	r3, r0
    624e:	b1c8      	cbz	r0, 6284 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    6250:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    6254:	b172      	cbz	r2, 6274 <bt_att_req_send+0x34>
	parent->next = child;
    6256:	2000      	movs	r0, #0
    6258:	6020      	str	r0, [r4, #0]
    625a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    625e:	b92a      	cbnz	r2, 626c <bt_att_req_send+0x2c>
	list->tail = node;
    6260:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    6264:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    6268:	4610      	mov	r0, r2
    626a:	bd10      	pop	{r4, pc}
	parent->next = child;
    626c:	6014      	str	r4, [r2, #0]
	list->tail = node;
    626e:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    6272:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    6274:	4621      	mov	r1, r4
}
    6276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    627a:	f7ff b991 	b.w	55a0 <att_send_req>
		return -EINVAL;
    627e:	f06f 0015 	mvn.w	r0, #21
    6282:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    6284:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    6288:	bd10      	pop	{r4, pc}

0000628a <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode);
    628a:	6813      	ldr	r3, [r2, #0]
    628c:	b939      	cbnz	r1, 629e <sys_slist_remove+0x14>
    628e:	6841      	ldr	r1, [r0, #4]
	list->head = node;
    6290:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode);
    6292:	428a      	cmp	r2, r1
    6294:	d100      	bne.n	6298 <sys_slist_remove+0xe>
	list->tail = node;
    6296:	6043      	str	r3, [r0, #4]
	parent->next = child;
    6298:	2300      	movs	r3, #0
    629a:	6013      	str	r3, [r2, #0]
    629c:	4770      	bx	lr
    629e:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
    62a0:	6843      	ldr	r3, [r0, #4]
    62a2:	429a      	cmp	r2, r3
	list->tail = node;
    62a4:	bf08      	it	eq
    62a6:	6041      	streq	r1, [r0, #4]
    62a8:	e7f6      	b.n	6298 <sys_slist_remove+0xe>

000062aa <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    62aa:	4770      	bx	lr

000062ac <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    62ac:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    62ae:	2000      	movs	r0, #0
    62b0:	4770      	bx	lr

000062b2 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    62b2:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    62b4:	2300      	movs	r3, #0
    62b6:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    62b8:	461a      	mov	r2, r3
    62ba:	42aa      	cmp	r2, r5
    62bc:	d107      	bne.n	62ce <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    62be:	890a      	ldrh	r2, [r1, #8]
    62c0:	429a      	cmp	r2, r3
    62c2:	d00d      	beq.n	62e0 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    62c4:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    62c6:	68ca      	ldr	r2, [r1, #12]
	}
}
    62c8:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    62ca:	4619      	mov	r1, r3
    62cc:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    62ce:	680c      	ldr	r4, [r1, #0]
    62d0:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    62d4:	3201      	adds	r2, #1
    62d6:	8924      	ldrh	r4, [r4, #8]
    62d8:	42a3      	cmp	r3, r4
    62da:	bf38      	it	cc
    62dc:	4623      	movcc	r3, r4
    62de:	e7ec      	b.n	62ba <gatt_ccc_changed+0x8>
}
    62e0:	bc30      	pop	{r4, r5}
    62e2:	4770      	bx	lr

000062e4 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    62e4:	b410      	push	{r4}
    62e6:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    62e8:	699c      	ldr	r4, [r3, #24]
    62ea:	460a      	mov	r2, r1
    62ec:	6959      	ldr	r1, [r3, #20]
    62ee:	4623      	mov	r3, r4
}
    62f0:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    62f2:	4718      	bx	r3

000062f4 <gatt_subscription_remove>:
	bt_addr_le_copy(&params->_peer, &conn->le.dst);
}

static void gatt_subscription_remove(struct bt_conn *conn, sys_snode_t *prev,
				     struct bt_gatt_subscribe_params *params)
{
    62f4:	b570      	push	{r4, r5, r6, lr}
    62f6:	4614      	mov	r4, r2
    62f8:	4606      	mov	r6, r0
	/* Remove subscription from the list*/
	sys_slist_remove(&subscriptions, prev, &params->node);
    62fa:	3228      	adds	r2, #40	; 0x28
    62fc:	4805      	ldr	r0, [pc, #20]	; (6314 <gatt_subscription_remove+0x20>)
    62fe:	f7ff ffc4 	bl	628a <sys_slist_remove>

	params->notify(conn, params, NULL, 0);
    6302:	69e5      	ldr	r5, [r4, #28]
    6304:	2300      	movs	r3, #0
    6306:	4621      	mov	r1, r4
    6308:	4630      	mov	r0, r6
    630a:	46ac      	mov	ip, r5
    630c:	461a      	mov	r2, r3
}
    630e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->notify(conn, params, NULL, 0);
    6312:	4760      	bx	ip
    6314:	200005f0 	.word	0x200005f0

00006318 <gatt_write_ccc_rsp>:
}

static void gatt_write_ccc_rsp(struct bt_conn *conn, u8_t err,
			       const void *pdu, u16_t length,
			       void *user_data)
{
    6318:	b430      	push	{r4, r5}
    631a:	9c02      	ldr	r4, [sp, #8]
    631c:	4605      	mov	r5, r0
	struct bt_gatt_subscribe_params *params = user_data;

	BT_DBG("err 0x%02x", err);

	/* if write to CCC failed we remove subscription and notify app */
	if (err) {
    631e:	b181      	cbz	r1, 6342 <gatt_write_ccc_rsp+0x2a>
    6320:	4b0d      	ldr	r3, [pc, #52]	; (6358 <gatt_write_ccc_rsp+0x40>)
    6322:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_PEEK_NEXT(slist, snode);
    6324:	b1ab      	cbz	r3, 6352 <gatt_write_ccc_rsp+0x3a>
	return node->next;
    6326:	6819      	ldr	r1, [r3, #0]
		sys_snode_t *node, *tmp, *prev = NULL;

		SYS_SLIST_FOR_EACH_NODE_SAFE(&subscriptions, node, tmp) {
			if (node == &params->node) {
    6328:	f104 0228 	add.w	r2, r4, #40	; 0x28
    632c:	4293      	cmp	r3, r2
    632e:	d104      	bne.n	633a <gatt_write_ccc_rsp+0x22>
				gatt_subscription_remove(conn, tmp, params);
    6330:	4622      	mov	r2, r4
    6332:	4628      	mov	r0, r5
		}
	} else if (!params->value) {
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}
}
    6334:	bc30      	pop	{r4, r5}
				gatt_subscription_remove(conn, tmp, params);
    6336:	f7ff bfdd 	b.w	62f4 <gatt_subscription_remove>
Z_GENLIST_PEEK_NEXT(slist, snode);
    633a:	b151      	cbz	r1, 6352 <gatt_write_ccc_rsp+0x3a>
    633c:	460b      	mov	r3, r1
    633e:	6809      	ldr	r1, [r1, #0]
    6340:	e7f4      	b.n	632c <gatt_write_ccc_rsp+0x14>
	} else if (!params->value) {
    6342:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    6344:	b92b      	cbnz	r3, 6352 <gatt_write_ccc_rsp+0x3a>
		params->notify(conn, params, NULL, 0);
    6346:	69e5      	ldr	r5, [r4, #28]
    6348:	4621      	mov	r1, r4
    634a:	46ac      	mov	ip, r5
    634c:	461a      	mov	r2, r3
}
    634e:	bc30      	pop	{r4, r5}
		params->notify(conn, params, NULL, 0);
    6350:	4760      	bx	ip
}
    6352:	bc30      	pop	{r4, r5}
    6354:	4770      	bx	lr
    6356:	bf00      	nop
    6358:	200005f0 	.word	0x200005f0

0000635c <gatt_register>:
{
    635c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    635e:	4a1e      	ldr	r2, [pc, #120]	; (63d8 <gatt_register+0x7c>)
    6360:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    6362:	e890 0022 	ldmia.w	r0, {r1, r5}
	if (sys_slist_is_empty(&db)) {
    6366:	b14b      	cbz	r3, 637c <gatt_register+0x20>
    6368:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    636a:	2b00      	cmp	r3, #0
    636c:	d032      	beq.n	63d4 <gatt_register+0x78>
	handle = last->attrs[last->attr_count - 1].handle;
    636e:	e913 0018 	ldmdb	r3, {r3, r4}
    6372:	2614      	movs	r6, #20
    6374:	fb06 3304 	mla	r3, r6, r4, r3
    6378:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    637c:	b2ad      	uxth	r5, r5
    637e:	2414      	movs	r4, #20
    6380:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    6384:	b109      	cbz	r1, 638a <gatt_register+0x2e>
    6386:	42a9      	cmp	r1, r5
    6388:	d108      	bne.n	639c <gatt_register+0x40>
	parent->next = child;
    638a:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    638c:	f100 0108 	add.w	r1, r0, #8
    6390:	6083      	str	r3, [r0, #8]
    6392:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    6394:	b9d0      	cbnz	r0, 63cc <gatt_register+0x70>
	list->tail = node;
    6396:	6051      	str	r1, [r2, #4]
	list->head = node;
    6398:	6011      	str	r1, [r2, #0]
    639a:	e015      	b.n	63c8 <gatt_register+0x6c>
		if (!attrs->handle) {
    639c:	8a0c      	ldrh	r4, [r1, #16]
    639e:	b92c      	cbnz	r4, 63ac <gatt_register+0x50>
			attrs->handle = ++handle;
    63a0:	3301      	adds	r3, #1
    63a2:	b29c      	uxth	r4, r3
    63a4:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    63a6:	3114      	adds	r1, #20
    63a8:	4623      	mov	r3, r4
    63aa:	e7eb      	b.n	6384 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    63ac:	42a3      	cmp	r3, r4
    63ae:	d3fa      	bcc.n	63a6 <gatt_register+0x4a>
			BT_ERR("Unable to register handle 0x%04x",
    63b0:	4b0a      	ldr	r3, [pc, #40]	; (63dc <gatt_register+0x80>)
    63b2:	9302      	str	r3, [sp, #8]
    63b4:	e88d 0018 	stmia.w	sp, {r3, r4}
    63b8:	4a09      	ldr	r2, [pc, #36]	; (63e0 <gatt_register+0x84>)
    63ba:	4b0a      	ldr	r3, [pc, #40]	; (63e4 <gatt_register+0x88>)
    63bc:	490a      	ldr	r1, [pc, #40]	; (63e8 <gatt_register+0x8c>)
    63be:	480b      	ldr	r0, [pc, #44]	; (63ec <gatt_register+0x90>)
    63c0:	f7fa fde4 	bl	f8c <printk>
			return -EINVAL;
    63c4:	f06f 0015 	mvn.w	r0, #21
}
    63c8:	b004      	add	sp, #16
    63ca:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    63cc:	6001      	str	r1, [r0, #0]
	list->tail = node;
    63ce:	6051      	str	r1, [r2, #4]
	return 0;
    63d0:	4618      	mov	r0, r3
    63d2:	e7f9      	b.n	63c8 <gatt_register+0x6c>
	handle = last->attrs[last->attr_count - 1].handle;
    63d4:	681b      	ldr	r3, [r3, #0]
    63d6:	deff      	udf	#255	; 0xff
    63d8:	20000584 	.word	0x20000584
    63dc:	0001496d 	.word	0x0001496d
    63e0:	000156bc 	.word	0x000156bc
    63e4:	0001651c 	.word	0x0001651c
    63e8:	0001570b 	.word	0x0001570b
    63ec:	0001664c 	.word	0x0001664c

000063f0 <gatt_notify>:
{
    63f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    63f4:	468a      	mov	sl, r1
    63f6:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    63f8:	211b      	movs	r1, #27
    63fa:	1c9a      	adds	r2, r3, #2
{
    63fc:	4680      	mov	r8, r0
    63fe:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6400:	f7ff fa56 	bl	58b0 <bt_att_create_pdu>
	if (!buf) {
    6404:	4604      	mov	r4, r0
    6406:	b968      	cbnz	r0, 6424 <gatt_notify+0x34>
		BT_WARN("No buffer available to send notification");
    6408:	4b13      	ldr	r3, [pc, #76]	; (6458 <gatt_notify+0x68>)
    640a:	9301      	str	r3, [sp, #4]
    640c:	9300      	str	r3, [sp, #0]
    640e:	4a13      	ldr	r2, [pc, #76]	; (645c <gatt_notify+0x6c>)
    6410:	4b13      	ldr	r3, [pc, #76]	; (6460 <gatt_notify+0x70>)
    6412:	4914      	ldr	r1, [pc, #80]	; (6464 <gatt_notify+0x74>)
    6414:	4814      	ldr	r0, [pc, #80]	; (6468 <gatt_notify+0x78>)
    6416:	f7fa fdb9 	bl	f8c <printk>
    641a:	f06f 000b 	mvn.w	r0, #11
}
    641e:	b002      	add	sp, #8
    6420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    6424:	f100 0708 	add.w	r7, r0, #8
    6428:	2102      	movs	r1, #2
    642a:	4638      	mov	r0, r7
    642c:	f00c fc82 	bl	12d34 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    6430:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    6432:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    6434:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    6438:	4638      	mov	r0, r7
    643a:	f00c fc7b 	bl	12d34 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    643e:	4632      	mov	r2, r6
    6440:	4649      	mov	r1, r9
    6442:	4628      	mov	r0, r5
    6444:	f7fb fbda 	bl	1bfc <memcpy>
    6448:	4640      	mov	r0, r8
    644a:	2300      	movs	r3, #0
    644c:	4622      	mov	r2, r4
    644e:	2104      	movs	r1, #4
    6450:	f7fe fc3c 	bl	4ccc <bt_l2cap_send_cb>
	return 0;
    6454:	2000      	movs	r0, #0
    6456:	e7e2      	b.n	641e <gatt_notify+0x2e>
    6458:	0001496d 	.word	0x0001496d
    645c:	00015704 	.word	0x00015704
    6460:	00016558 	.word	0x00016558
    6464:	0001570b 	.word	0x0001570b
    6468:	00016613 	.word	0x00016613

0000646c <gatt_send.constprop.29>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    646c:	b530      	push	{r4, r5, lr}
    646e:	460d      	mov	r5, r1
    6470:	b085      	sub	sp, #20
	if (params) {
    6472:	b1c3      	cbz	r3, 64a6 <gatt_send.constprop.29+0x3a>
		req->func = func;
    6474:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    6476:	2200      	movs	r2, #0
		req->buf = buf;
    6478:	6119      	str	r1, [r3, #16]
		req->destroy = destroy;
    647a:	609a      	str	r2, [r3, #8]
		err = bt_att_req_send(conn, req);
    647c:	4619      	mov	r1, r3
    647e:	f7ff fedf 	bl	6240 <bt_att_req_send>
		err = bt_att_send(conn, buf);
    6482:	4604      	mov	r4, r0
	if (err) {
    6484:	b160      	cbz	r0, 64a0 <gatt_send.constprop.29+0x34>
		BT_ERR("Error sending ATT PDU: %d", err);
    6486:	4b09      	ldr	r3, [pc, #36]	; (64ac <gatt_send.constprop.29+0x40>)
    6488:	9302      	str	r3, [sp, #8]
    648a:	e88d 0018 	stmia.w	sp, {r3, r4}
    648e:	4a08      	ldr	r2, [pc, #32]	; (64b0 <gatt_send.constprop.29+0x44>)
    6490:	4b08      	ldr	r3, [pc, #32]	; (64b4 <gatt_send.constprop.29+0x48>)
    6492:	4909      	ldr	r1, [pc, #36]	; (64b8 <gatt_send.constprop.29+0x4c>)
    6494:	4809      	ldr	r0, [pc, #36]	; (64bc <gatt_send.constprop.29+0x50>)
    6496:	f7fa fd79 	bl	f8c <printk>
		net_buf_unref(buf);
    649a:	4628      	mov	r0, r5
    649c:	f00c fc18 	bl	12cd0 <net_buf_unref>
}
    64a0:	4620      	mov	r0, r4
    64a2:	b005      	add	sp, #20
    64a4:	bd30      	pop	{r4, r5, pc}
		err = bt_att_send(conn, buf);
    64a6:	f7ff fe65 	bl	6174 <bt_att_send>
    64aa:	e7ea      	b.n	6482 <gatt_send.constprop.29+0x16>
    64ac:	0001496d 	.word	0x0001496d
    64b0:	000156bc 	.word	0x000156bc
    64b4:	00016564 	.word	0x00016564
    64b8:	0001570b 	.word	0x0001570b
    64bc:	0001667d 	.word	0x0001667d

000064c0 <gatt_write_ccc.constprop.19>:

static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    64c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    64c4:	4689      	mov	r9, r1
    64c6:	4690      	mov	r8, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    64c8:	2112      	movs	r1, #18
    64ca:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    64cc:	4606      	mov	r6, r0
    64ce:	461f      	mov	r7, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    64d0:	f7ff f9ee 	bl	58b0 <bt_att_create_pdu>
				sizeof(*req) + sizeof(u16_t));
	if (!buf) {
    64d4:	4604      	mov	r4, r0
    64d6:	b198      	cbz	r0, 6500 <gatt_write_ccc.constprop.19+0x40>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    64d8:	f100 0508 	add.w	r5, r0, #8
    64dc:	2102      	movs	r1, #2
    64de:	4628      	mov	r0, r5
    64e0:	f00c fc28 	bl	12d34 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    64e4:	4641      	mov	r1, r8
	req->handle = sys_cpu_to_le16(handle);
    64e6:	f8a0 9000 	strh.w	r9, [r0]
	net_buf_add_le16(buf, value);
    64ea:	4628      	mov	r0, r5
    64ec:	f00c fc39 	bl	12d62 <net_buf_simple_add_le16>

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	return gatt_send(conn, buf, func, params, NULL);
    64f0:	463b      	mov	r3, r7
    64f2:	4621      	mov	r1, r4
    64f4:	4630      	mov	r0, r6
    64f6:	4a04      	ldr	r2, [pc, #16]	; (6508 <gatt_write_ccc.constprop.19+0x48>)
}
    64f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    64fc:	f7ff bfb6 	b.w	646c <gatt_send.constprop.29>
}
    6500:	f06f 000b 	mvn.w	r0, #11
    6504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6508:	00006319 	.word	0x00006319

0000650c <gatt_indicate>:
{
    650c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u16_t value_handle = params->attr->handle;
    6510:	694b      	ldr	r3, [r1, #20]
{
    6512:	b085      	sub	sp, #20
    6514:	4680      	mov	r8, r0
	u16_t value_handle = params->attr->handle;
    6516:	8a1d      	ldrh	r5, [r3, #16]
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6518:	6818      	ldr	r0, [r3, #0]
    651a:	2300      	movs	r3, #0
{
    651c:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    651e:	f88d 300c 	strb.w	r3, [sp, #12]
    6522:	a903      	add	r1, sp, #12
    6524:	f642 0303 	movw	r3, #10243	; 0x2803
    6528:	f8ad 300e 	strh.w	r3, [sp, #14]
    652c:	f7fb fce4 	bl	1ef8 <bt_uuid_cmp>
    6530:	b930      	cbnz	r0, 6540 <gatt_indicate+0x34>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    6532:	6963      	ldr	r3, [r4, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    6534:	68db      	ldr	r3, [r3, #12]
    6536:	791b      	ldrb	r3, [r3, #4]
    6538:	069b      	lsls	r3, r3, #26
    653a:	d530      	bpl.n	659e <gatt_indicate+0x92>
		value_handle += 1;
    653c:	3501      	adds	r5, #1
    653e:	b2ad      	uxth	r5, r5
				sizeof(*ind) + params->len);
    6540:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    6542:	211d      	movs	r1, #29
    6544:	3202      	adds	r2, #2
    6546:	4640      	mov	r0, r8
    6548:	f7ff f9b2 	bl	58b0 <bt_att_create_pdu>
	if (!buf) {
    654c:	4606      	mov	r6, r0
    654e:	b968      	cbnz	r0, 656c <gatt_indicate+0x60>
		BT_WARN("No buffer available to send indication");
    6550:	4b14      	ldr	r3, [pc, #80]	; (65a4 <gatt_indicate+0x98>)
    6552:	9301      	str	r3, [sp, #4]
    6554:	9300      	str	r3, [sp, #0]
    6556:	4a14      	ldr	r2, [pc, #80]	; (65a8 <gatt_indicate+0x9c>)
    6558:	4b14      	ldr	r3, [pc, #80]	; (65ac <gatt_indicate+0xa0>)
    655a:	4915      	ldr	r1, [pc, #84]	; (65b0 <gatt_indicate+0xa4>)
    655c:	4815      	ldr	r0, [pc, #84]	; (65b4 <gatt_indicate+0xa8>)
    655e:	f7fa fd15 	bl	f8c <printk>
		return -ENOMEM;
    6562:	f06f 000b 	mvn.w	r0, #11
}
    6566:	b005      	add	sp, #20
    6568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    656c:	f100 0908 	add.w	r9, r0, #8
    6570:	2102      	movs	r1, #2
    6572:	4648      	mov	r0, r9
    6574:	f00c fbde 	bl	12d34 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    6578:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
    657a:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    657c:	f827 5b02 	strh.w	r5, [r7], #2
	net_buf_add(buf, params->len);
    6580:	4648      	mov	r0, r9
    6582:	f00c fbd7 	bl	12d34 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    6586:	8c22      	ldrh	r2, [r4, #32]
    6588:	69e1      	ldr	r1, [r4, #28]
    658a:	4638      	mov	r0, r7
    658c:	f7fb fb36 	bl	1bfc <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    6590:	4623      	mov	r3, r4
    6592:	4a09      	ldr	r2, [pc, #36]	; (65b8 <gatt_indicate+0xac>)
    6594:	4631      	mov	r1, r6
    6596:	4640      	mov	r0, r8
    6598:	f7ff ff68 	bl	646c <gatt_send.constprop.29>
    659c:	e7e3      	b.n	6566 <gatt_indicate+0x5a>
			return -EINVAL;
    659e:	f06f 0015 	mvn.w	r0, #21
    65a2:	e7e0      	b.n	6566 <gatt_indicate+0x5a>
    65a4:	0001496d 	.word	0x0001496d
    65a8:	00015704 	.word	0x00015704
    65ac:	0001656e 	.word	0x0001656e
    65b0:	0001570b 	.word	0x0001570b
    65b4:	000165dc 	.word	0x000165dc
    65b8:	000062e5 	.word	0x000062e5

000065bc <sc_indicate.constprop.24>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    65bc:	b510      	push	{r4, lr}
    65be:	4b17      	ldr	r3, [pc, #92]	; (661c <sc_indicate.constprop.24+0x60>)
    65c0:	f3bf 8f5b 	dmb	ish
    65c4:	f103 0250 	add.w	r2, r3, #80	; 0x50
    65c8:	e852 4f00 	ldrex	r4, [r2]
    65cc:	f044 0e01 	orr.w	lr, r4, #1
    65d0:	e842 ec00 	strex	ip, lr, [r2]
    65d4:	f1bc 0f00 	cmp.w	ip, #0
    65d8:	d1f6      	bne.n	65c8 <sc_indicate.constprop.24+0xc>
    65da:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    65de:	07e2      	lsls	r2, r4, #31
    65e0:	d402      	bmi.n	65e8 <sc_indicate.constprop.24+0x2c>
		sc->start = start;
    65e2:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    65e4:	84d9      	strh	r1, [r3, #38]	; 0x26
    65e6:	e00a      	b.n	65fe <sc_indicate.constprop.24+0x42>
	if (new_start >= *start && new_end <= *end) {
    65e8:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    65ea:	4282      	cmp	r2, r0
    65ec:	d803      	bhi.n	65f6 <sc_indicate.constprop.24+0x3a>
    65ee:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    65f0:	428a      	cmp	r2, r1
    65f2:	d301      	bcc.n	65f8 <sc_indicate.constprop.24+0x3c>
    65f4:	bd10      	pop	{r4, pc}
		*start = new_start;
    65f6:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    65f8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    65fa:	428a      	cmp	r2, r1
    65fc:	d3f2      	bcc.n	65e4 <sc_indicate.constprop.24+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    65fe:	f3bf 8f5b 	dmb	ish
    6602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6604:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    6608:	079b      	lsls	r3, r3, #30
    660a:	d406      	bmi.n	661a <sc_indicate.constprop.24+0x5e>
    660c:	220a      	movs	r2, #10
    660e:	4904      	ldr	r1, [pc, #16]	; (6620 <sc_indicate.constprop.24+0x64>)
    6610:	4804      	ldr	r0, [pc, #16]	; (6624 <sc_indicate.constprop.24+0x68>)
}
    6612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6616:	f00d bf4d 	b.w	144b4 <k_delayed_work_submit_to_queue>
    661a:	bd10      	pop	{r4, pc}
    661c:	2000058c 	.word	0x2000058c
    6620:	200005b4 	.word	0x200005b4
    6624:	20001990 	.word	0x20001990

00006628 <connected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    6628:	6882      	ldr	r2, [r0, #8]
    662a:	4b19      	ldr	r3, [pc, #100]	; (6690 <connected_cb+0x68>)
    662c:	429a      	cmp	r2, r3
{
    662e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6632:	4607      	mov	r7, r0
    6634:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    6636:	d125      	bne.n	6684 <connected_cb+0x5c>
	ccc = attr->user_data;
    6638:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    663a:	2600      	movs	r6, #0
    663c:	686b      	ldr	r3, [r5, #4]
    663e:	429e      	cmp	r6, r3
    6640:	d220      	bcs.n	6684 <connected_cb+0x5c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6642:	6829      	ldr	r1, [r5, #0]
    6644:	ea4f 1806 	mov.w	r8, r6, lsl #4
    6648:	4441      	add	r1, r8
    664a:	4620      	mov	r0, r4
    664c:	f7fd fd2c 	bl	40a8 <bt_conn_addr_le_cmp>
    6650:	b9d8      	cbnz	r0, 668a <connected_cb+0x62>
		if (ccc->cfg[i].value) {
    6652:	682b      	ldr	r3, [r5, #0]
    6654:	4443      	add	r3, r8
    6656:	891b      	ldrh	r3, [r3, #8]
    6658:	b1bb      	cbz	r3, 668a <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    665a:	4629      	mov	r1, r5
    665c:	4638      	mov	r0, r7
    665e:	f7ff fe28 	bl	62b2 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    6662:	682c      	ldr	r4, [r5, #0]
    6664:	4b0b      	ldr	r3, [pc, #44]	; (6694 <connected_cb+0x6c>)
    6666:	429c      	cmp	r4, r3
    6668:	d10c      	bne.n	6684 <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    666a:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    666c:	89a0      	ldrh	r0, [r4, #12]
    666e:	89e1      	ldrh	r1, [r4, #14]
    6670:	b900      	cbnz	r0, 6674 <connected_cb+0x4c>
    6672:	b139      	cbz	r1, 6684 <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    6674:	f7ff ffa2 	bl	65bc <sc_indicate.constprop.24>
	memset(cfg->data, 0, sizeof(cfg->data));
    6678:	2204      	movs	r2, #4
    667a:	2100      	movs	r1, #0
    667c:	f104 000c 	add.w	r0, r4, #12
    6680:	f7fb fae8 	bl	1c54 <memset>
}
    6684:	2001      	movs	r0, #1
    6686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    668a:	3601      	adds	r6, #1
    668c:	e7d6      	b.n	663c <connected_cb+0x14>
    668e:	bf00      	nop
    6690:	000068b5 	.word	0x000068b5
    6694:	200005e0 	.word	0x200005e0

00006698 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6698:	490d      	ldr	r1, [pc, #52]	; (66d0 <sc_indicate_rsp+0x38>)
    669a:	f3bf 8f5b 	dmb	ish
    669e:	f101 0350 	add.w	r3, r1, #80	; 0x50
    66a2:	e853 2f00 	ldrex	r2, [r3]
    66a6:	f022 0202 	bic.w	r2, r2, #2
    66aa:	e843 2000 	strex	r0, r2, [r3]
    66ae:	2800      	cmp	r0, #0
    66b0:	d1f7      	bne.n	66a2 <sc_indicate_rsp+0xa>
    66b2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    66b6:	f3bf 8f5b 	dmb	ish
    66ba:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    66bc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    66c0:	07db      	lsls	r3, r3, #31
    66c2:	d504      	bpl.n	66ce <sc_indicate_rsp+0x36>
    66c4:	2200      	movs	r2, #0
    66c6:	3128      	adds	r1, #40	; 0x28
    66c8:	4802      	ldr	r0, [pc, #8]	; (66d4 <sc_indicate_rsp+0x3c>)
    66ca:	f00d bef3 	b.w	144b4 <k_delayed_work_submit_to_queue>
    66ce:	4770      	bx	lr
    66d0:	2000058c 	.word	0x2000058c
    66d4:	20001990 	.word	0x20001990

000066d8 <read_appearance>:
{
    66d8:	b513      	push	{r0, r1, r4, lr}
    66da:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    66de:	4610      	mov	r0, r2
	if (offset > value_len) {
    66e0:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    66e2:	f04f 0200 	mov.w	r2, #0
    66e6:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    66ea:	d80d      	bhi.n	6708 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    66ec:	f1c1 0402 	rsb	r4, r1, #2
    66f0:	429c      	cmp	r4, r3
    66f2:	bfa8      	it	ge
    66f4:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    66f6:	f10d 0306 	add.w	r3, sp, #6
    66fa:	4622      	mov	r2, r4
    66fc:	4419      	add	r1, r3
    66fe:	f7fb fa7d 	bl	1bfc <memcpy>
}
    6702:	4620      	mov	r0, r4
    6704:	b002      	add	sp, #8
    6706:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6708:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    670c:	e7f9      	b.n	6702 <read_appearance+0x2a>
	...

00006710 <disconnected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    6710:	6882      	ldr	r2, [r0, #8]
    6712:	4b27      	ldr	r3, [pc, #156]	; (67b0 <disconnected_cb+0xa0>)
    6714:	429a      	cmp	r2, r3
{
    6716:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    671a:	4680      	mov	r8, r0
    671c:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    671e:	d127      	bne.n	6770 <disconnected_cb+0x60>
	ccc = attr->user_data;
    6720:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    6722:	8923      	ldrh	r3, [r4, #8]
    6724:	b323      	cbz	r3, 6770 <disconnected_cb+0x60>
    6726:	2600      	movs	r6, #0
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6728:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    672c:	6863      	ldr	r3, [r4, #4]
    672e:	429e      	cmp	r6, r3
    6730:	d30b      	bcc.n	674a <disconnected_cb+0x3a>
	memset(&ccc->value, 0, sizeof(ccc->value));
    6732:	2202      	movs	r2, #2
    6734:	2100      	movs	r1, #0
    6736:	f104 0008 	add.w	r0, r4, #8
    673a:	f7fb fa8b 	bl	1c54 <memset>
	if (ccc->cfg_changed) {
    673e:	68e3      	ldr	r3, [r4, #12]
    6740:	b1b3      	cbz	r3, 6770 <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    6742:	8921      	ldrh	r1, [r4, #8]
    6744:	4640      	mov	r0, r8
    6746:	4798      	blx	r3
    6748:	e012      	b.n	6770 <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    674a:	6821      	ldr	r1, [r4, #0]
    674c:	0135      	lsls	r5, r6, #4
    674e:	4429      	add	r1, r5
    6750:	890b      	ldrh	r3, [r1, #8]
    6752:	b19b      	cbz	r3, 677c <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6754:	4648      	mov	r0, r9
    6756:	f7fd fca7 	bl	40a8 <bt_conn_addr_le_cmp>
    675a:	b188      	cbz	r0, 6780 <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    675c:	6820      	ldr	r0, [r4, #0]
    675e:	4428      	add	r0, r5
    6760:	f7fd fd02 	bl	4168 <bt_conn_lookup_addr_le>
			if (tmp) {
    6764:	b150      	cbz	r0, 677c <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    6766:	7a43      	ldrb	r3, [r0, #9]
    6768:	2b03      	cmp	r3, #3
    676a:	d105      	bne.n	6778 <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    676c:	f7fd fd32 	bl	41d4 <bt_conn_unref>
}
    6770:	2001      	movs	r0, #1
    6772:	b002      	add	sp, #8
    6774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    6778:	f7fd fd2c 	bl	41d4 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    677c:	3601      	adds	r6, #1
    677e:	e7d5      	b.n	672c <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6780:	4650      	mov	r0, sl
    6782:	f7fd f92b 	bl	39dc <bt_addr_le_is_bonded>
    6786:	4607      	mov	r7, r0
    6788:	6820      	ldr	r0, [r4, #0]
    678a:	b95f      	cbnz	r7, 67a4 <disconnected_cb+0x94>
    678c:	4428      	add	r0, r5
    678e:	2207      	movs	r2, #7
    6790:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    6792:	9700      	str	r7, [sp, #0]
    6794:	f8cd 7003 	str.w	r7, [sp, #3]
    6798:	f7fb fa30 	bl	1bfc <memcpy>
				ccc->cfg[i].value = 0;
    679c:	6823      	ldr	r3, [r4, #0]
    679e:	441d      	add	r5, r3
    67a0:	812f      	strh	r7, [r5, #8]
    67a2:	e7eb      	b.n	677c <disconnected_cb+0x6c>
    67a4:	2207      	movs	r2, #7
    67a6:	4651      	mov	r1, sl
    67a8:	4428      	add	r0, r5
    67aa:	f7fb fa27 	bl	1bfc <memcpy>
    67ae:	e7e5      	b.n	677c <disconnected_cb+0x6c>
    67b0:	000068b5 	.word	0x000068b5

000067b4 <read_name>:
{
    67b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    67b8:	4e0d      	ldr	r6, [pc, #52]	; (67f0 <read_name+0x3c>)
{
    67ba:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    67be:	4630      	mov	r0, r6
{
    67c0:	4698      	mov	r8, r3
    67c2:	4617      	mov	r7, r2
				 strlen(gap_name));
    67c4:	f7fb f9f0 	bl	1ba8 <strlen>
	if (offset > value_len) {
    67c8:	b283      	uxth	r3, r0
    67ca:	42ab      	cmp	r3, r5
    67cc:	d30d      	bcc.n	67ea <read_name+0x36>
	len = min(buf_len, value_len - offset);
    67ce:	1b5c      	subs	r4, r3, r5
    67d0:	4544      	cmp	r4, r8
    67d2:	4623      	mov	r3, r4
    67d4:	bfa8      	it	ge
    67d6:	4643      	movge	r3, r8
    67d8:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    67da:	4622      	mov	r2, r4
    67dc:	1971      	adds	r1, r6, r5
    67de:	4638      	mov	r0, r7
    67e0:	f7fb fa0c 	bl	1bfc <memcpy>
}
    67e4:	4620      	mov	r0, r4
    67e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    67ea:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    67ee:	e7f9      	b.n	67e4 <read_name+0x30>
    67f0:	000166a7 	.word	0x000166a7

000067f4 <bt_gatt_attr_read_ccc>:
{
    67f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    67f8:	68ce      	ldr	r6, [r1, #12]
{
    67fa:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    67fe:	4604      	mov	r4, r0
    6800:	4690      	mov	r8, r2
    6802:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    6804:	2500      	movs	r5, #0
    6806:	6873      	ldr	r3, [r6, #4]
    6808:	429d      	cmp	r5, r3
    680a:	d20e      	bcs.n	682a <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    680c:	6831      	ldr	r1, [r6, #0]
    680e:	ea4f 1905 	mov.w	r9, r5, lsl #4
    6812:	4449      	add	r1, r9
    6814:	4620      	mov	r0, r4
    6816:	f7fd fc47 	bl	40a8 <bt_conn_addr_le_cmp>
    681a:	b108      	cbz	r0, 6820 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    681c:	3501      	adds	r5, #1
    681e:	e7f2      	b.n	6806 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    6820:	6832      	ldr	r2, [r6, #0]
    6822:	444a      	add	r2, r9
    6824:	8913      	ldrh	r3, [r2, #8]
    6826:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    682a:	6873      	ldr	r3, [r6, #4]
    682c:	429d      	cmp	r5, r3
		value = 0x0000;
    682e:	bf04      	itt	eq
    6830:	2300      	moveq	r3, #0
    6832:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    6836:	2f02      	cmp	r7, #2
    6838:	d80f      	bhi.n	685a <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    683a:	f1c7 0402 	rsb	r4, r7, #2
    683e:	4554      	cmp	r4, sl
    6840:	bfa8      	it	ge
    6842:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    6844:	f10d 0306 	add.w	r3, sp, #6
    6848:	4622      	mov	r2, r4
    684a:	19d9      	adds	r1, r3, r7
    684c:	4640      	mov	r0, r8
    684e:	f7fb f9d5 	bl	1bfc <memcpy>
}
    6852:	4620      	mov	r0, r4
    6854:	b002      	add	sp, #8
    6856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    685a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    685e:	e7f8      	b.n	6852 <bt_gatt_attr_read_ccc+0x5e>

00006860 <bt_gatt_attr_read_service>:
{
    6860:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    6862:	68c9      	ldr	r1, [r1, #12]
{
    6864:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    6868:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    686a:	780a      	ldrb	r2, [r1, #0]
    686c:	b992      	cbnz	r2, 6894 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    686e:	884a      	ldrh	r2, [r1, #2]
    6870:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    6874:	2d02      	cmp	r5, #2
    6876:	d819      	bhi.n	68ac <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    6878:	f1c5 0402 	rsb	r4, r5, #2
    687c:	429c      	cmp	r4, r3
    687e:	bfa8      	it	ge
    6880:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6882:	f10d 0306 	add.w	r3, sp, #6
    6886:	4622      	mov	r2, r4
    6888:	1959      	adds	r1, r3, r5
    688a:	f7fb f9b7 	bl	1bfc <memcpy>
}
    688e:	4620      	mov	r0, r4
    6890:	b003      	add	sp, #12
    6892:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    6894:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    6896:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    689a:	d807      	bhi.n	68ac <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    689c:	f1c5 0410 	rsb	r4, r5, #16
    68a0:	429c      	cmp	r4, r3
    68a2:	bfa8      	it	ge
    68a4:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    68a6:	4622      	mov	r2, r4
    68a8:	4429      	add	r1, r5
    68aa:	e7ee      	b.n	688a <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    68ac:	f06f 0406 	mvn.w	r4, #6
    68b0:	e7ed      	b.n	688e <bt_gatt_attr_read_service+0x2e>
	...

000068b4 <bt_gatt_attr_write_ccc>:
{
    68b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68b8:	b087      	sub	sp, #28
    68ba:	4688      	mov	r8, r1
    68bc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    68c0:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    68c4:	2902      	cmp	r1, #2
{
    68c6:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    68c8:	d85f      	bhi.n	698a <bt_gatt_attr_write_ccc+0xd6>
	if (offset + len > sizeof(u16_t)) {
    68ca:	4419      	add	r1, r3
    68cc:	2902      	cmp	r1, #2
    68ce:	461f      	mov	r7, r3
    68d0:	dc5e      	bgt.n	6990 <bt_gatt_attr_write_ccc+0xdc>
	return ((u16_t)src[1] << 8) | src[0];
    68d2:	7853      	ldrb	r3, [r2, #1]
    68d4:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    68d6:	2400      	movs	r4, #0
    68d8:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    68dc:	686b      	ldr	r3, [r5, #4]
    68de:	429c      	cmp	r4, r3
    68e0:	d206      	bcs.n	68f0 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    68e2:	6829      	ldr	r1, [r5, #0]
    68e4:	4648      	mov	r0, r9
    68e6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    68ea:	f7fd fbdd 	bl	40a8 <bt_conn_addr_le_cmp>
    68ee:	b9b8      	cbnz	r0, 6920 <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    68f0:	686b      	ldr	r3, [r5, #4]
    68f2:	429c      	cmp	r4, r3
    68f4:	d12f      	bne.n	6956 <bt_gatt_attr_write_ccc+0xa2>
		if (!value) {
    68f6:	b356      	cbz	r6, 694e <bt_gatt_attr_write_ccc+0x9a>
    68f8:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    68fa:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    68fc:	686b      	ldr	r3, [r5, #4]
    68fe:	429c      	cmp	r4, r3
    6900:	d217      	bcs.n	6932 <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    6902:	6828      	ldr	r0, [r5, #0]
    6904:	f8cd a008 	str.w	sl, [sp, #8]
    6908:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    690c:	2207      	movs	r2, #7
    690e:	a902      	add	r1, sp, #8
    6910:	4458      	add	r0, fp
    6912:	f8cd a00b 	str.w	sl, [sp, #11]
    6916:	f7fb f95c 	bl	1bd2 <memcmp>
    691a:	b118      	cbz	r0, 6924 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    691c:	3401      	adds	r4, #1
    691e:	e7ed      	b.n	68fc <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    6920:	3401      	adds	r4, #1
    6922:	e7db      	b.n	68dc <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    6924:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    6926:	2207      	movs	r2, #7
    6928:	f109 0144 	add.w	r1, r9, #68	; 0x44
    692c:	4458      	add	r0, fp
    692e:	f7fb f965 	bl	1bfc <memcpy>
		if (i == ccc->cfg_len) {
    6932:	686b      	ldr	r3, [r5, #4]
    6934:	429c      	cmp	r4, r3
    6936:	d10e      	bne.n	6956 <bt_gatt_attr_write_ccc+0xa2>
			BT_WARN("No space to store CCC cfg");
    6938:	4b17      	ldr	r3, [pc, #92]	; (6998 <bt_gatt_attr_write_ccc+0xe4>)
    693a:	9301      	str	r3, [sp, #4]
    693c:	9300      	str	r3, [sp, #0]
    693e:	4a17      	ldr	r2, [pc, #92]	; (699c <bt_gatt_attr_write_ccc+0xe8>)
    6940:	4b17      	ldr	r3, [pc, #92]	; (69a0 <bt_gatt_attr_write_ccc+0xec>)
    6942:	4918      	ldr	r1, [pc, #96]	; (69a4 <bt_gatt_attr_write_ccc+0xf0>)
    6944:	4818      	ldr	r0, [pc, #96]	; (69a8 <bt_gatt_attr_write_ccc+0xf4>)
    6946:	f7fa fb21 	bl	f8c <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    694a:	f06f 0710 	mvn.w	r7, #16
}
    694e:	4638      	mov	r0, r7
    6950:	b007      	add	sp, #28
    6952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    6956:	682b      	ldr	r3, [r5, #0]
    6958:	0124      	lsls	r4, r4, #4
    695a:	4423      	add	r3, r4
    695c:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    695e:	892b      	ldrh	r3, [r5, #8]
    6960:	42b3      	cmp	r3, r6
    6962:	d003      	beq.n	696c <bt_gatt_attr_write_ccc+0xb8>
		gatt_ccc_changed(attr, ccc);
    6964:	4629      	mov	r1, r5
    6966:	4640      	mov	r0, r8
    6968:	f7ff fca3 	bl	62b2 <gatt_ccc_changed>
	if (!value) {
    696c:	2e00      	cmp	r6, #0
    696e:	d1ee      	bne.n	694e <bt_gatt_attr_write_ccc+0x9a>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    6970:	6828      	ldr	r0, [r5, #0]
    6972:	9604      	str	r6, [sp, #16]
    6974:	4420      	add	r0, r4
    6976:	2207      	movs	r2, #7
    6978:	a904      	add	r1, sp, #16
    697a:	f8cd 6013 	str.w	r6, [sp, #19]
    697e:	f7fb f93d 	bl	1bfc <memcpy>
		ccc->cfg[i].value = 0;
    6982:	682b      	ldr	r3, [r5, #0]
    6984:	441c      	add	r4, r3
    6986:	8126      	strh	r6, [r4, #8]
    6988:	e7e1      	b.n	694e <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    698a:	f06f 0706 	mvn.w	r7, #6
    698e:	e7de      	b.n	694e <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    6990:	f06f 070c 	mvn.w	r7, #12
    6994:	e7db      	b.n	694e <bt_gatt_attr_write_ccc+0x9a>
    6996:	bf00      	nop
    6998:	0001496d 	.word	0x0001496d
    699c:	00015704 	.word	0x00015704
    69a0:	00016541 	.word	0x00016541
    69a4:	0001570b 	.word	0x0001570b
    69a8:	000165b2 	.word	0x000165b2

000069ac <notify_cb>:
{
    69ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    69b0:	f642 1302 	movw	r3, #10498	; 0x2902
{
    69b4:	4605      	mov	r5, r0
    69b6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    69b8:	2400      	movs	r4, #0
    69ba:	4669      	mov	r1, sp
    69bc:	6800      	ldr	r0, [r0, #0]
    69be:	f88d 4000 	strb.w	r4, [sp]
    69c2:	f8ad 3002 	strh.w	r3, [sp, #2]
    69c6:	f7fb fa97 	bl	1ef8 <bt_uuid_cmp>
    69ca:	b178      	cbz	r0, 69ec <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    69cc:	f642 0303 	movw	r3, #10243	; 0x2803
    69d0:	6828      	ldr	r0, [r5, #0]
    69d2:	f88d 4004 	strb.w	r4, [sp, #4]
    69d6:	a901      	add	r1, sp, #4
    69d8:	f8ad 3006 	strh.w	r3, [sp, #6]
    69dc:	f7fb fa8c 	bl	1ef8 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    69e0:	1b00      	subs	r0, r0, r4
    69e2:	bf18      	it	ne
    69e4:	2001      	movne	r0, #1
}
    69e6:	b003      	add	sp, #12
    69e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    69ec:	68aa      	ldr	r2, [r5, #8]
    69ee:	4b2b      	ldr	r3, [pc, #172]	; (6a9c <notify_cb+0xf0>)
    69f0:	429a      	cmp	r2, r3
    69f2:	d001      	beq.n	69f8 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    69f4:	2001      	movs	r0, #1
    69f6:	e7f6      	b.n	69e6 <notify_cb+0x3a>
	ccc = attr->user_data;
    69f8:	68ef      	ldr	r7, [r5, #12]
    69fa:	4d29      	ldr	r5, [pc, #164]	; (6aa0 <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    69fc:	4604      	mov	r4, r0
    69fe:	46a8      	mov	r8, r5
    6a00:	4681      	mov	r9, r0
    6a02:	687b      	ldr	r3, [r7, #4]
    6a04:	429c      	cmp	r4, r3
    6a06:	d2f5      	bcs.n	69f4 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    6a08:	6838      	ldr	r0, [r7, #0]
    6a0a:	88b3      	ldrh	r3, [r6, #4]
    6a0c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    6a10:	8902      	ldrh	r2, [r0, #8]
    6a12:	429a      	cmp	r2, r3
    6a14:	d114      	bne.n	6a40 <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6a16:	f7fd fba7 	bl	4168 <bt_conn_lookup_addr_le>
		if (!conn) {
    6a1a:	4683      	mov	fp, r0
    6a1c:	b9f8      	cbnz	r0, 6a5e <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    6a1e:	683b      	ldr	r3, [r7, #0]
    6a20:	4543      	cmp	r3, r8
    6a22:	d10d      	bne.n	6a40 <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    6a24:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    6a26:	a801      	add	r0, sp, #4
    6a28:	8c1a      	ldrh	r2, [r3, #32]
    6a2a:	69d9      	ldr	r1, [r3, #28]
    6a2c:	f7fb f8e6 	bl	1bfc <memcpy>
	if (!stored->start && !stored->end) {
    6a30:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    6a32:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6a36:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    6a38:	b928      	cbnz	r0, 6a46 <notify_cb+0x9a>
    6a3a:	b942      	cbnz	r2, 6a4e <notify_cb+0xa2>
		*stored = data;
    6a3c:	9801      	ldr	r0, [sp, #4]
    6a3e:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    6a40:	3401      	adds	r4, #1
    6a42:	3510      	adds	r5, #16
    6a44:	e7dd      	b.n	6a02 <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    6a46:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    6a4a:	4281      	cmp	r1, r0
    6a4c:	d305      	bcc.n	6a5a <notify_cb+0xae>
    6a4e:	429a      	cmp	r2, r3
    6a50:	d2f6      	bcs.n	6a40 <notify_cb+0x94>
	if (*end < new_end) {
    6a52:	429a      	cmp	r2, r3
    6a54:	d2f4      	bcs.n	6a40 <notify_cb+0x94>
		*end = new_end;
    6a56:	81eb      	strh	r3, [r5, #14]
    6a58:	e7f2      	b.n	6a40 <notify_cb+0x94>
		*start = new_start;
    6a5a:	81a9      	strh	r1, [r5, #12]
    6a5c:	e7f9      	b.n	6a52 <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    6a5e:	7a43      	ldrb	r3, [r0, #9]
    6a60:	2b03      	cmp	r3, #3
    6a62:	d002      	beq.n	6a6a <notify_cb+0xbe>
			bt_conn_unref(conn);
    6a64:	f7fd fbb6 	bl	41d4 <bt_conn_unref>
    6a68:	e7ea      	b.n	6a40 <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    6a6a:	88b3      	ldrh	r3, [r6, #4]
    6a6c:	2b02      	cmp	r3, #2
    6a6e:	d10c      	bne.n	6a8a <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    6a70:	6971      	ldr	r1, [r6, #20]
    6a72:	f7ff fd4b 	bl	650c <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    6a76:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    6a78:	4658      	mov	r0, fp
    6a7a:	f7fd fbab 	bl	41d4 <bt_conn_unref>
		if (err < 0) {
    6a7e:	f1ba 0f00 	cmp.w	sl, #0
    6a82:	db09      	blt.n	6a98 <notify_cb+0xec>
		data->err = 0;
    6a84:	f8c6 9000 	str.w	r9, [r6]
    6a88:	e7da      	b.n	6a40 <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    6a8a:	68b1      	ldr	r1, [r6, #8]
    6a8c:	8a33      	ldrh	r3, [r6, #16]
    6a8e:	68f2      	ldr	r2, [r6, #12]
    6a90:	8a09      	ldrh	r1, [r1, #16]
    6a92:	f7ff fcad 	bl	63f0 <gatt_notify>
    6a96:	e7ee      	b.n	6a76 <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    6a98:	2000      	movs	r0, #0
    6a9a:	e7a4      	b.n	69e6 <notify_cb+0x3a>
    6a9c:	000068b5 	.word	0x000068b5
    6aa0:	200005e0 	.word	0x200005e0

00006aa4 <bt_gatt_init>:
{
    6aa4:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    6aa6:	4806      	ldr	r0, [pc, #24]	; (6ac0 <bt_gatt_init+0x1c>)
    6aa8:	f7ff fc58 	bl	635c <gatt_register>
	gatt_register(&gatt_svc);
    6aac:	4805      	ldr	r0, [pc, #20]	; (6ac4 <bt_gatt_init+0x20>)
    6aae:	f7ff fc55 	bl	635c <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    6ab2:	4905      	ldr	r1, [pc, #20]	; (6ac8 <bt_gatt_init+0x24>)
    6ab4:	4805      	ldr	r0, [pc, #20]	; (6acc <bt_gatt_init+0x28>)
}
    6ab6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    6aba:	f00d bc87 	b.w	143cc <k_delayed_work_init>
    6abe:	bf00      	nop
    6ac0:	20003ca4 	.word	0x20003ca4
    6ac4:	20003d00 	.word	0x20003d00
    6ac8:	00006b51 	.word	0x00006b51
    6acc:	200005b4 	.word	0x200005b4

00006ad0 <bt_gatt_foreach_attr>:
{
    6ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ad4:	4699      	mov	r9, r3
    6ad6:	4b12      	ldr	r3, [pc, #72]	; (6b20 <bt_gatt_foreach_attr+0x50>)
    6ad8:	681c      	ldr	r4, [r3, #0]
    6ada:	4606      	mov	r6, r0
    6adc:	460f      	mov	r7, r1
    6ade:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6ae0:	b1dc      	cbz	r4, 6b1a <bt_gatt_foreach_attr+0x4a>
    6ae2:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    6ae4:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6ae8:	b1bc      	cbz	r4, 6b1a <bt_gatt_foreach_attr+0x4a>
    6aea:	2500      	movs	r5, #0
    6aec:	e006      	b.n	6afc <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    6aee:	6820      	ldr	r0, [r4, #0]
    6af0:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    6af4:	8a03      	ldrh	r3, [r0, #16]
    6af6:	42b3      	cmp	r3, r6
    6af8:	d207      	bcs.n	6b0a <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    6afa:	3501      	adds	r5, #1
    6afc:	6863      	ldr	r3, [r4, #4]
    6afe:	42ab      	cmp	r3, r5
    6b00:	d8f5      	bhi.n	6aee <bt_gatt_foreach_attr+0x1e>
	return node->next;
    6b02:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6b04:	b14c      	cbz	r4, 6b1a <bt_gatt_foreach_attr+0x4a>
    6b06:	3c08      	subs	r4, #8
    6b08:	e7ee      	b.n	6ae8 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    6b0a:	42bb      	cmp	r3, r7
    6b0c:	d8f5      	bhi.n	6afa <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    6b0e:	4649      	mov	r1, r9
    6b10:	47c0      	blx	r8
    6b12:	2800      	cmp	r0, #0
    6b14:	d1f1      	bne.n	6afa <bt_gatt_foreach_attr+0x2a>
    6b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b1e:	bf00      	nop
    6b20:	20000584 	.word	0x20000584

00006b24 <bt_gatt_indicate.part.12>:
int bt_gatt_indicate(struct bt_conn *conn,
    6b24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    6b26:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    6b2a:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6b2c:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    6b2e:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    6b30:	2302      	movs	r3, #2
    6b32:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6b36:	4a05      	ldr	r2, [pc, #20]	; (6b4c <bt_gatt_indicate.part.12+0x28>)
    6b38:	8a00      	ldrh	r0, [r0, #16]
    6b3a:	466b      	mov	r3, sp
    6b3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6b40:	f7ff ffc6 	bl	6ad0 <bt_gatt_foreach_attr>
}
    6b44:	9800      	ldr	r0, [sp, #0]
    6b46:	b007      	add	sp, #28
    6b48:	f85d fb04 	ldr.w	pc, [sp], #4
    6b4c:	000069ad 	.word	0x000069ad

00006b50 <sc_process>:
{
    6b50:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    6b52:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    6b56:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    6b5a:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    6b5c:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    6b60:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    6b64:	3828      	subs	r0, #40	; 0x28
    6b66:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6b6a:	f3bf 8f5b 	dmb	ish
    6b6e:	e854 2f00 	ldrex	r2, [r4]
    6b72:	f022 0201 	bic.w	r2, r2, #1
    6b76:	e844 2100 	strex	r1, r2, [r4]
    6b7a:	2900      	cmp	r1, #0
    6b7c:	d1f7      	bne.n	6b6e <sc_process+0x1e>
    6b7e:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    6b82:	2200      	movs	r2, #0
    6b84:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    6b88:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    6b8c:	4a0e      	ldr	r2, [pc, #56]	; (6bc8 <sc_process+0x78>)
    6b8e:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    6b92:	4a0e      	ldr	r2, [pc, #56]	; (6bcc <sc_process+0x7c>)
    6b94:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    6b98:	aa01      	add	r2, sp, #4
    6b9a:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    6b9e:	2204      	movs	r2, #4
    6ba0:	f823 2c08 	strh.w	r2, [r3, #-8]
    6ba4:	f7ff ffbe 	bl	6b24 <bt_gatt_indicate.part.12>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    6ba8:	b958      	cbnz	r0, 6bc2 <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6baa:	f3bf 8f5b 	dmb	ish
    6bae:	e854 3f00 	ldrex	r3, [r4]
    6bb2:	f043 0302 	orr.w	r3, r3, #2
    6bb6:	e844 3200 	strex	r2, r3, [r4]
    6bba:	2a00      	cmp	r2, #0
    6bbc:	d1f7      	bne.n	6bae <sc_process+0x5e>
    6bbe:	f3bf 8f5b 	dmb	ish
}
    6bc2:	b002      	add	sp, #8
    6bc4:	bd10      	pop	{r4, pc}
    6bc6:	bf00      	nop
    6bc8:	20003cd8 	.word	0x20003cd8
    6bcc:	00006699 	.word	0x00006699

00006bd0 <bt_gatt_attr_next>:
{
    6bd0:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6bd2:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    6bd4:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6bd6:	3101      	adds	r1, #1
    6bd8:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    6bda:	2200      	movs	r2, #0
    6bdc:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6be0:	4608      	mov	r0, r1
    6be2:	4a03      	ldr	r2, [pc, #12]	; (6bf0 <bt_gatt_attr_next+0x20>)
    6be4:	f7ff ff74 	bl	6ad0 <bt_gatt_foreach_attr>
}
    6be8:	9801      	ldr	r0, [sp, #4]
    6bea:	b003      	add	sp, #12
    6bec:	f85d fb04 	ldr.w	pc, [sp], #4
    6bf0:	000062ad 	.word	0x000062ad

00006bf4 <bt_gatt_attr_read_chrc>:
{
    6bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    6bf8:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    6bfc:	b08b      	sub	sp, #44	; 0x2c
    6bfe:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    6c00:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    6c02:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    6c06:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    6c0a:	f88d 3014 	strb.w	r3, [sp, #20]
{
    6c0e:	4688      	mov	r8, r1
    6c10:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    6c12:	f7ff ffdd 	bl	6bd0 <bt_gatt_attr_next>
	if (!next) {
    6c16:	4605      	mov	r5, r0
    6c18:	bb40      	cbnz	r0, 6c6c <bt_gatt_attr_read_chrc+0x78>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    6c1a:	4b1c      	ldr	r3, [pc, #112]	; (6c8c <bt_gatt_attr_read_chrc+0x98>)
    6c1c:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    6c20:	9302      	str	r3, [sp, #8]
    6c22:	9201      	str	r2, [sp, #4]
    6c24:	9300      	str	r3, [sp, #0]
    6c26:	4a1a      	ldr	r2, [pc, #104]	; (6c90 <bt_gatt_attr_read_chrc+0x9c>)
    6c28:	4b1a      	ldr	r3, [pc, #104]	; (6c94 <bt_gatt_attr_read_chrc+0xa0>)
    6c2a:	491b      	ldr	r1, [pc, #108]	; (6c98 <bt_gatt_attr_read_chrc+0xa4>)
    6c2c:	481b      	ldr	r0, [pc, #108]	; (6c9c <bt_gatt_attr_read_chrc+0xa8>)
    6c2e:	f7fa f9ad 	bl	f8c <printk>
		pdu.value_handle = 0x0000;
    6c32:	f88d 5015 	strb.w	r5, [sp, #21]
    6c36:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    6c3a:	f8d9 1000 	ldr.w	r1, [r9]
    6c3e:	780b      	ldrb	r3, [r1, #0]
    6c40:	b9c3      	cbnz	r3, 6c74 <bt_gatt_attr_read_chrc+0x80>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    6c42:	884b      	ldrh	r3, [r1, #2]
    6c44:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    6c48:	2305      	movs	r3, #5
	if (offset > value_len) {
    6c4a:	42b3      	cmp	r3, r6
    6c4c:	d31a      	bcc.n	6c84 <bt_gatt_attr_read_chrc+0x90>
	len = min(buf_len, value_len - offset);
    6c4e:	1b9b      	subs	r3, r3, r6
    6c50:	42a3      	cmp	r3, r4
    6c52:	bfa8      	it	ge
    6c54:	4623      	movge	r3, r4
    6c56:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    6c58:	ab05      	add	r3, sp, #20
    6c5a:	4622      	mov	r2, r4
    6c5c:	1999      	adds	r1, r3, r6
    6c5e:	4638      	mov	r0, r7
    6c60:	f7fa ffcc 	bl	1bfc <memcpy>
}
    6c64:	4620      	mov	r0, r4
    6c66:	b00b      	add	sp, #44	; 0x2c
    6c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    6c6c:	8a03      	ldrh	r3, [r0, #16]
    6c6e:	f8ad 3015 	strh.w	r3, [sp, #21]
    6c72:	e7e2      	b.n	6c3a <bt_gatt_attr_read_chrc+0x46>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    6c74:	2210      	movs	r2, #16
    6c76:	3101      	adds	r1, #1
    6c78:	f10d 0017 	add.w	r0, sp, #23
    6c7c:	f7fa ffbe 	bl	1bfc <memcpy>
		value_len += 16;
    6c80:	2313      	movs	r3, #19
    6c82:	e7e2      	b.n	6c4a <bt_gatt_attr_read_chrc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6c84:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    6c88:	e7ec      	b.n	6c64 <bt_gatt_attr_read_chrc+0x70>
    6c8a:	bf00      	nop
    6c8c:	0001496d 	.word	0x0001496d
    6c90:	00015704 	.word	0x00015704
    6c94:	0001652a 	.word	0x0001652a
    6c98:	0001570b 	.word	0x0001570b
    6c9c:	0001657c 	.word	0x0001657c

00006ca0 <bt_gatt_unsubscribe>:
	sys_snode_t *prev = NULL;

	__ASSERT(conn, "invalid parameters\n");
	__ASSERT(params, "invalid parameters\n");

	if (conn->state != BT_CONN_CONNECTED) {
    6ca0:	7a43      	ldrb	r3, [r0, #9]
    6ca2:	2b03      	cmp	r3, #3
{
    6ca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ca8:	4680      	mov	r8, r0
    6caa:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
    6cac:	d144      	bne.n	6d38 <bt_gatt_unsubscribe+0x98>
    6cae:	4b2b      	ldr	r3, [pc, #172]	; (6d5c <bt_gatt_unsubscribe+0xbc>)
    6cb0:	681c      	ldr	r4, [r3, #0]
		return -ENOTCONN;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    6cb2:	b1cc      	cbz	r4, 6ce8 <bt_gatt_unsubscribe+0x48>
    6cb4:	f1b4 0528 	subs.w	r5, r4, #40	; 0x28
    6cb8:	d144      	bne.n	6d44 <bt_gatt_unsubscribe+0xa4>
    6cba:	462c      	mov	r4, r5
    6cbc:	f04f 0b00 	mov.w	fp, #0
		/* Remove subscription */
		if (params == tmp) {
			found = true;
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    6cc0:	f8df a098 	ldr.w	sl, [pc, #152]	; 6d5c <bt_gatt_unsubscribe+0xbc>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    6cc4:	465a      	mov	r2, fp
    6cc6:	465f      	mov	r7, fp
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    6cc8:	f106 0928 	add.w	r9, r6, #40	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    6ccc:	b975      	cbnz	r5, 6cec <bt_gatt_unsubscribe+0x4c>
		    tmp->value_handle == params->value_handle) {
			has_subscription = true;
		}
	}

	if (!found) {
    6cce:	2a00      	cmp	r2, #0
    6cd0:	d035      	beq.n	6d3e <bt_gatt_unsubscribe+0x9e>
		return -EINVAL;
	}

	if (has_subscription) {
    6cd2:	b33f      	cbz	r7, 6d24 <bt_gatt_unsubscribe+0x84>
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
    6cd4:	69f4      	ldr	r4, [r6, #28]
    6cd6:	462b      	mov	r3, r5
    6cd8:	462a      	mov	r2, r5
    6cda:	4631      	mov	r1, r6
    6cdc:	4640      	mov	r0, r8
    6cde:	47a0      	blx	r4
		return 0;
    6ce0:	4628      	mov	r0, r5

	params->value = 0x0000;

	return gatt_write_ccc(conn, params->ccc_handle, params->value,
			      gatt_write_ccc_rsp, params);
}
    6ce2:	b003      	add	sp, #12
    6ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ce8:	4625      	mov	r5, r4
    6cea:	e7e7      	b.n	6cbc <bt_gatt_unsubscribe+0x1c>
		if (params == tmp) {
    6cec:	42b5      	cmp	r5, r6
    6cee:	d108      	bne.n	6d02 <bt_gatt_unsubscribe+0x62>
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    6cf0:	464a      	mov	r2, r9
    6cf2:	4659      	mov	r1, fp
    6cf4:	4650      	mov	r0, sl
    6cf6:	f7ff fac8 	bl	628a <sys_slist_remove>
			found = true;
    6cfa:	2201      	movs	r2, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    6cfc:	bb3c      	cbnz	r4, 6d4e <bt_gatt_unsubscribe+0xae>
    6cfe:	4623      	mov	r3, r4
    6d00:	e028      	b.n	6d54 <bt_gatt_unsubscribe+0xb4>
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    6d02:	f105 0114 	add.w	r1, r5, #20
    6d06:	4640      	mov	r0, r8
    6d08:	9201      	str	r2, [sp, #4]
    6d0a:	f7fd f9cd 	bl	40a8 <bt_conn_addr_le_cmp>
			prev = &tmp->node;
    6d0e:	f105 0b28 	add.w	fp, r5, #40	; 0x28
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    6d12:	9a01      	ldr	r2, [sp, #4]
    6d14:	2800      	cmp	r0, #0
    6d16:	d1f1      	bne.n	6cfc <bt_gatt_unsubscribe+0x5c>
    6d18:	8c29      	ldrh	r1, [r5, #32]
    6d1a:	8c33      	ldrh	r3, [r6, #32]
			has_subscription = true;
    6d1c:	4299      	cmp	r1, r3
    6d1e:	bf08      	it	eq
    6d20:	2701      	moveq	r7, #1
    6d22:	e7eb      	b.n	6cfc <bt_gatt_unsubscribe+0x5c>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    6d24:	8c71      	ldrh	r1, [r6, #34]	; 0x22
	params->value = 0x0000;
    6d26:	84b7      	strh	r7, [r6, #36]	; 0x24
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    6d28:	4633      	mov	r3, r6
    6d2a:	463a      	mov	r2, r7
    6d2c:	4640      	mov	r0, r8
}
    6d2e:	b003      	add	sp, #12
    6d30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    6d34:	f7ff bbc4 	b.w	64c0 <gatt_write_ccc.constprop.19>
		return -ENOTCONN;
    6d38:	f06f 0038 	mvn.w	r0, #56	; 0x38
    6d3c:	e7d1      	b.n	6ce2 <bt_gatt_unsubscribe+0x42>
		return -EINVAL;
    6d3e:	f06f 0015 	mvn.w	r0, #21
    6d42:	e7ce      	b.n	6ce2 <bt_gatt_unsubscribe+0x42>
    6d44:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    6d46:	2c00      	cmp	r4, #0
    6d48:	d0b8      	beq.n	6cbc <bt_gatt_unsubscribe+0x1c>
    6d4a:	3c28      	subs	r4, #40	; 0x28
    6d4c:	e7b6      	b.n	6cbc <bt_gatt_unsubscribe+0x1c>
    6d4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6d50:	b103      	cbz	r3, 6d54 <bt_gatt_unsubscribe+0xb4>
    6d52:	3b28      	subs	r3, #40	; 0x28
    6d54:	4625      	mov	r5, r4
    6d56:	461c      	mov	r4, r3
    6d58:	e7b8      	b.n	6ccc <bt_gatt_unsubscribe+0x2c>
    6d5a:	bf00      	nop
    6d5c:	200005f0 	.word	0x200005f0

00006d60 <bt_gatt_notification>:
{
    6d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d64:	4699      	mov	r9, r3
    6d66:	4b17      	ldr	r3, [pc, #92]	; (6dc4 <bt_gatt_notification+0x64>)
    6d68:	681b      	ldr	r3, [r3, #0]
    6d6a:	4605      	mov	r5, r0
    6d6c:	460e      	mov	r6, r1
    6d6e:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    6d70:	b333      	cbz	r3, 6dc0 <bt_gatt_notification+0x60>
    6d72:	f1b3 0a28 	subs.w	sl, r3, #40	; 0x28
    6d76:	d101      	bne.n	6d7c <bt_gatt_notification+0x1c>
    6d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d7c:	681c      	ldr	r4, [r3, #0]
    6d7e:	b104      	cbz	r4, 6d82 <bt_gatt_notification+0x22>
    6d80:	3c28      	subs	r4, #40	; 0x28
		if (bt_conn_addr_le_cmp(conn, &params->_peer) ||
    6d82:	f10a 0114 	add.w	r1, sl, #20
    6d86:	4628      	mov	r0, r5
    6d88:	f7fd f98e 	bl	40a8 <bt_conn_addr_le_cmp>
    6d8c:	b978      	cbnz	r0, 6dae <bt_gatt_notification+0x4e>
    6d8e:	f8ba 3020 	ldrh.w	r3, [sl, #32]
    6d92:	42b3      	cmp	r3, r6
    6d94:	d10b      	bne.n	6dae <bt_gatt_notification+0x4e>
		if (params->notify(conn, params, data, length) ==
    6d96:	f8da 701c 	ldr.w	r7, [sl, #28]
    6d9a:	464b      	mov	r3, r9
    6d9c:	4642      	mov	r2, r8
    6d9e:	4651      	mov	r1, sl
    6da0:	4628      	mov	r0, r5
    6da2:	47b8      	blx	r7
    6da4:	b918      	cbnz	r0, 6dae <bt_gatt_notification+0x4e>
			bt_gatt_unsubscribe(conn, params);
    6da6:	4651      	mov	r1, sl
    6da8:	4628      	mov	r0, r5
    6daa:	f7ff ff79 	bl	6ca0 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    6dae:	b90c      	cbnz	r4, 6db4 <bt_gatt_notification+0x54>
    6db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6db4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6db6:	b103      	cbz	r3, 6dba <bt_gatt_notification+0x5a>
    6db8:	3b28      	subs	r3, #40	; 0x28
    6dba:	46a2      	mov	sl, r4
    6dbc:	461c      	mov	r4, r3
    6dbe:	e7e0      	b.n	6d82 <bt_gatt_notification+0x22>
    6dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6dc4:	200005f0 	.word	0x200005f0

00006dc8 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    6dc8:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    6dca:	4a0e      	ldr	r2, [pc, #56]	; (6e04 <bt_gatt_connected+0x3c>)
    6dcc:	4603      	mov	r3, r0
{
    6dce:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    6dd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6dd4:	2001      	movs	r0, #1
    6dd6:	f7ff fe7b 	bl	6ad0 <bt_gatt_foreach_attr>
    6dda:	4b0b      	ldr	r3, [pc, #44]	; (6e08 <bt_gatt_connected+0x40>)
    6ddc:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&subscriptions, params, node) {
    6dde:	b10c      	cbz	r4, 6de4 <bt_gatt_connected+0x1c>
    6de0:	3c28      	subs	r4, #40	; 0x28
    6de2:	b904      	cbnz	r4, 6de6 <bt_gatt_connected+0x1e>
    6de4:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    6de6:	f104 0114 	add.w	r1, r4, #20
    6dea:	4628      	mov	r0, r5
    6dec:	f7fd f95c 	bl	40a8 <bt_conn_addr_le_cmp>
    6df0:	b928      	cbnz	r0, 6dfe <bt_gatt_connected+0x36>
		gatt_write_ccc(conn, params->ccc_handle, params->value,
    6df2:	4623      	mov	r3, r4
    6df4:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    6df6:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    6df8:	4628      	mov	r0, r5
    6dfa:	f7ff fb61 	bl	64c0 <gatt_write_ccc.constprop.19>
    6dfe:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    6e00:	e7ed      	b.n	6dde <bt_gatt_connected+0x16>
    6e02:	bf00      	nop
    6e04:	00006629 	.word	0x00006629
    6e08:	200005f0 	.word	0x200005f0

00006e0c <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6e0c:	4603      	mov	r3, r0
{
    6e0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6e12:	4a21      	ldr	r2, [pc, #132]	; (6e98 <bt_gatt_disconnected+0x8c>)
{
    6e14:	4607      	mov	r7, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6e16:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6e1a:	2001      	movs	r0, #1
    6e1c:	f7ff fe58 	bl	6ad0 <bt_gatt_foreach_attr>
    6e20:	4b1e      	ldr	r3, [pc, #120]	; (6e9c <bt_gatt_disconnected+0x90>)
    6e22:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    6e24:	b3b3      	cbz	r3, 6e94 <bt_gatt_disconnected+0x88>
    6e26:	f1b3 0628 	subs.w	r6, r3, #40	; 0x28
    6e2a:	d11b      	bne.n	6e64 <bt_gatt_disconnected+0x58>
    6e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    6e30:	4640      	mov	r0, r8
    6e32:	f7fc fdd3 	bl	39dc <bt_addr_le_is_bonded>
    6e36:	b118      	cbz	r0, 6e40 <bt_gatt_disconnected+0x34>
    6e38:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
    6e3c:	07db      	lsls	r3, r3, #31
    6e3e:	d509      	bpl.n	6e54 <bt_gatt_disconnected+0x48>
			params->value = 0;
    6e40:	f8a6 9024 	strh.w	r9, [r6, #36]	; 0x24
			gatt_subscription_remove(conn, prev, params);
    6e44:	4632      	mov	r2, r6
    6e46:	4629      	mov	r1, r5
    6e48:	4638      	mov	r0, r7
    6e4a:	f7ff fa53 	bl	62f4 <gatt_subscription_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    6e4e:	b9dc      	cbnz	r4, 6e88 <bt_gatt_disconnected+0x7c>
    6e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (params->_peer.type == BT_ADDR_LE_PUBLIC) {
    6e54:	7d33      	ldrb	r3, [r6, #20]
    6e56:	b1a3      	cbz	r3, 6e82 <bt_gatt_disconnected+0x76>
    6e58:	2207      	movs	r2, #7
    6e5a:	4641      	mov	r1, r8
    6e5c:	4650      	mov	r0, sl
    6e5e:	f7fa fecd 	bl	1bfc <memcpy>
    6e62:	e00e      	b.n	6e82 <bt_gatt_disconnected+0x76>
    6e64:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    6e66:	b104      	cbz	r4, 6e6a <bt_gatt_disconnected+0x5e>
    6e68:	3c28      	subs	r4, #40	; 0x28
    6e6a:	2500      	movs	r5, #0
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    6e6c:	f107 0844 	add.w	r8, r7, #68	; 0x44
			params->value = 0;
    6e70:	46a9      	mov	r9, r5
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    6e72:	f106 0a14 	add.w	sl, r6, #20
    6e76:	4651      	mov	r1, sl
    6e78:	4638      	mov	r0, r7
    6e7a:	f7fd f915 	bl	40a8 <bt_conn_addr_le_cmp>
    6e7e:	2800      	cmp	r0, #0
    6e80:	d0d6      	beq.n	6e30 <bt_gatt_disconnected+0x24>
			prev = &params->node;
    6e82:	f106 0528 	add.w	r5, r6, #40	; 0x28
    6e86:	e7e2      	b.n	6e4e <bt_gatt_disconnected+0x42>
    6e88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    6e8a:	b103      	cbz	r3, 6e8e <bt_gatt_disconnected+0x82>
    6e8c:	3b28      	subs	r3, #40	; 0x28
    6e8e:	4626      	mov	r6, r4
    6e90:	461c      	mov	r4, r3
    6e92:	e7ee      	b.n	6e72 <bt_gatt_disconnected+0x66>
    6e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e98:	00006711 	.word	0x00006711
    6e9c:	200005f0 	.word	0x200005f0

00006ea0 <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    6ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    6ea2:	4a0b      	ldr	r2, [pc, #44]	; (6ed0 <bt_smp_accept+0x30>)
    6ea4:	6813      	ldr	r3, [r2, #0]
    6ea6:	b933      	cbnz	r3, 6eb6 <bt_smp_accept+0x16>
			continue;
		}

		smp->chan.ops = &ops;
    6ea8:	480a      	ldr	r0, [pc, #40]	; (6ed4 <bt_smp_accept+0x34>)
    6eaa:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan;
    6eac:	600a      	str	r2, [r1, #0]

		return 0;
    6eae:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    6eb0:	b005      	add	sp, #20
    6eb2:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available SMP context for conn %p", conn);
    6eb6:	4b08      	ldr	r3, [pc, #32]	; (6ed8 <bt_smp_accept+0x38>)
    6eb8:	9302      	str	r3, [sp, #8]
    6eba:	9001      	str	r0, [sp, #4]
    6ebc:	9300      	str	r3, [sp, #0]
    6ebe:	4a07      	ldr	r2, [pc, #28]	; (6edc <bt_smp_accept+0x3c>)
    6ec0:	4b07      	ldr	r3, [pc, #28]	; (6ee0 <bt_smp_accept+0x40>)
    6ec2:	4908      	ldr	r1, [pc, #32]	; (6ee4 <bt_smp_accept+0x44>)
    6ec4:	4808      	ldr	r0, [pc, #32]	; (6ee8 <bt_smp_accept+0x48>)
    6ec6:	f7fa f861 	bl	f8c <printk>
	return -ENOMEM;
    6eca:	f06f 000b 	mvn.w	r0, #11
    6ece:	e7ef      	b.n	6eb0 <bt_smp_accept+0x10>
    6ed0:	200005f8 	.word	0x200005f8
    6ed4:	20003d18 	.word	0x20003d18
    6ed8:	0001496d 	.word	0x0001496d
    6edc:	000156bc 	.word	0x000156bc
    6ee0:	000166ae 	.word	0x000166ae
    6ee4:	0001570b 	.word	0x0001570b
    6ee8:	000166bc 	.word	0x000166bc

00006eec <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    6eec:	2100      	movs	r1, #0
{
    6eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    6ef2:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    6ef4:	4608      	mov	r0, r1
    6ef6:	f7fd fee6 	bl	4cc6 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6efa:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    6efe:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6f00:	2101      	movs	r1, #1
    6f02:	4630      	mov	r0, r6
    6f04:	f00b ff16 	bl	12d34 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    6f08:	2505      	movs	r5, #5
    6f0a:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    6f0c:	2101      	movs	r1, #1
    6f0e:	4630      	mov	r0, r6
    6f10:	f00b ff10 	bl	12d34 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    6f14:	7005      	strb	r5, [r0, #0]
    6f16:	4622      	mov	r2, r4
    6f18:	4638      	mov	r0, r7
    6f1a:	2300      	movs	r3, #0
    6f1c:	2106      	movs	r1, #6
}
    6f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6f22:	f7fd bed3 	b.w	4ccc <bt_l2cap_send_cb>

00006f26 <bt_smp_sign_verify>:
    6f26:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6f2a:	4770      	bx	lr

00006f2c <bt_smp_sign>:
}
    6f2c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6f30:	4770      	bx	lr
	...

00006f34 <bt_smp_init>:

int bt_smp_init(void)
{
    6f34:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6f36:	4802      	ldr	r0, [pc, #8]	; (6f40 <bt_smp_init+0xc>)
    6f38:	f7fd fe0a 	bl	4b50 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    6f3c:	2000      	movs	r0, #0
    6f3e:	bd08      	pop	{r3, pc}
    6f40:	20003d0c 	.word	0x20003d0c

00006f44 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    6f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    6f46:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6f48:	1dc3      	adds	r3, r0, #7
{
    6f4a:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6f4c:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6f50:	1e50      	subs	r0, r2, #1
{
    6f52:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6f54:	b280      	uxth	r0, r0
{
    6f56:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6f58:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6f5a:	2100      	movs	r1, #0
    6f5c:	2204      	movs	r2, #4
    6f5e:	fb06 5000 	mla	r0, r6, r0, r5
    6f62:	f7fa fe77 	bl	1c54 <memset>
    6f66:	3c02      	subs	r4, #2
    6f68:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    6f6a:	f64f 77ff 	movw	r7, #65535	; 0xffff
    6f6e:	42bc      	cmp	r4, r7
    6f70:	d101      	bne.n	6f76 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    6f72:	b003      	add	sp, #12
    6f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    6f76:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    6f7a:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    6f7c:	2204      	movs	r2, #4
    6f7e:	1b80      	subs	r0, r0, r6
    6f80:	eb0d 0102 	add.w	r1, sp, r2
    6f84:	4428      	add	r0, r5
    6f86:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    6f88:	9301      	str	r3, [sp, #4]
    6f8a:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    6f8c:	f7fa fe36 	bl	1bfc <memcpy>
    6f90:	e7ed      	b.n	6f6e <mem_init+0x2a>

00006f92 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    6f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    6f94:	6805      	ldr	r5, [r0, #0]
{
    6f96:	4606      	mov	r6, r0
	if (*mem_head) {
    6f98:	b195      	cbz	r5, 6fc0 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6f9a:	1deb      	adds	r3, r5, #7
    6f9c:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    6fa0:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6fa2:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    6fa4:	4629      	mov	r1, r5
    6fa6:	eb0d 0002 	add.w	r0, sp, r2
    6faa:	f7fa fe27 	bl	1bfc <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    6fae:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    6fb0:	3c01      	subs	r4, #1
    6fb2:	b2a4      	uxth	r4, r4
		if (head) {
    6fb4:	b11b      	cbz	r3, 6fbe <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    6fb6:	1dda      	adds	r2, r3, #7
    6fb8:	f022 0203 	bic.w	r2, r2, #3
    6fbc:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    6fbe:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    6fc0:	4628      	mov	r0, r5
    6fc2:	b002      	add	sp, #8
    6fc4:	bd70      	pop	{r4, r5, r6, pc}

00006fc6 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    6fc6:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    6fc8:	680c      	ldr	r4, [r1, #0]
{
    6fca:	4606      	mov	r6, r0
    6fcc:	460d      	mov	r5, r1
	if (*mem_head) {
    6fce:	b11c      	cbz	r4, 6fd8 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6fd0:	1de3      	adds	r3, r4, #7
    6fd2:	f023 0303 	bic.w	r3, r3, #3
    6fd6:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    6fd8:	2204      	movs	r2, #4
    6fda:	4629      	mov	r1, r5
    6fdc:	4630      	mov	r0, r6
    6fde:	f7fa fe0d 	bl	1bfc <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    6fe2:	1df2      	adds	r2, r6, #7
    6fe4:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    6fe8:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    6fea:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    6fec:	602e      	str	r6, [r5, #0]
    6fee:	bd70      	pop	{r4, r5, r6, pc}

00006ff0 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    6ff0:	b118      	cbz	r0, 6ffa <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    6ff2:	3007      	adds	r0, #7
    6ff4:	f020 0003 	bic.w	r0, r0, #3
    6ff8:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    6ffa:	4770      	bx	lr

00006ffc <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    6ffc:	fb02 0001 	mla	r0, r2, r1, r0
    7000:	4770      	bx	lr

00007002 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    7002:	1a40      	subs	r0, r0, r1
    7004:	b280      	uxth	r0, r0
}
    7006:	fbb0 f0f2 	udiv	r0, r0, r2
    700a:	4770      	bx	lr

0000700c <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    700c:	b510      	push	{r4, lr}
	src += len;
    700e:	4411      	add	r1, r2
    7010:	3801      	subs	r0, #1
	while (len--) {
    7012:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7016:	3a01      	subs	r2, #1
    7018:	b292      	uxth	r2, r2
    701a:	429a      	cmp	r2, r3
    701c:	d100      	bne.n	7020 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    701e:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    7020:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    7024:	f800 4f01 	strb.w	r4, [r0, #1]!
    7028:	e7f5      	b.n	7016 <mem_rcopy+0xa>

0000702a <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    702a:	4401      	add	r1, r0
	while (len--) {
    702c:	4288      	cmp	r0, r1
    702e:	d101      	bne.n	7034 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    7030:	2000      	movs	r0, #0
    7032:	4770      	bx	lr
		if (*src++) {
    7034:	f810 3b01 	ldrb.w	r3, [r0], #1
    7038:	2b00      	cmp	r3, #0
    703a:	d0f7      	beq.n	702c <mem_nz+0x2>
			return 1;
    703c:	2001      	movs	r0, #1
}
    703e:	4770      	bx	lr

00007040 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    7040:	6010      	str	r0, [r2, #0]
    7042:	6008      	str	r0, [r1, #0]

	return link;
}
    7044:	4770      	bx	lr

00007046 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    7046:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    7048:	6814      	ldr	r4, [r2, #0]
    704a:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    704c:	6814      	ldr	r4, [r2, #0]
    704e:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    7050:	6010      	str	r0, [r2, #0]

	return link;
}
    7052:	bd10      	pop	{r4, pc}

00007054 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    7054:	4288      	cmp	r0, r1
    7056:	d003      	beq.n	7060 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    7058:	b11a      	cbz	r2, 7062 <memq_peek+0xe>
		*mem = head->mem;
    705a:	6843      	ldr	r3, [r0, #4]
    705c:	6013      	str	r3, [r2, #0]
    705e:	4770      	bx	lr
		return NULL;
    7060:	2000      	movs	r0, #0
	}

	return head;
}
    7062:	4770      	bx	lr

00007064 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    7064:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    7066:	4283      	cmp	r3, r0
    7068:	d009      	beq.n	707e <memq_dequeue+0x1a>
	if (mem) {
    706a:	b122      	cbz	r2, 7076 <memq_dequeue+0x12>
		*mem = head->mem;
    706c:	6858      	ldr	r0, [r3, #4]
    706e:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    7070:	681a      	ldr	r2, [r3, #0]
    7072:	600a      	str	r2, [r1, #0]

	return link;
    7074:	e001      	b.n	707a <memq_dequeue+0x16>
	if (!link) {
    7076:	2b00      	cmp	r3, #0
    7078:	d1fa      	bne.n	7070 <memq_dequeue+0xc>
}
    707a:	4618      	mov	r0, r3
    707c:	4770      	bx	lr
		return NULL;
    707e:	2300      	movs	r3, #0
    7080:	e7fb      	b.n	707a <memq_dequeue+0x16>
	...

00007084 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    7084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    7088:	4f11      	ldr	r7, [pc, #68]	; (70d0 <mayfly_init+0x4c>)
    708a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 70d4 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    708e:	2604      	movs	r6, #4
	while (callee_id--) {
    7090:	3e01      	subs	r6, #1
    7092:	b2f6      	uxtb	r6, r6
    7094:	2eff      	cmp	r6, #255	; 0xff
    7096:	d019      	beq.n	70cc <mayfly_init+0x48>
    7098:	b233      	sxth	r3, r6
    709a:	ea4f 0883 	mov.w	r8, r3, lsl #2
    709e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    70a2:	011d      	lsls	r5, r3, #4
    70a4:	2404      	movs	r4, #4
    70a6:	f04f 0a0c 	mov.w	sl, #12
    70aa:	e00a      	b.n	70c2 <mayfly_init+0x3e>
    70ac:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    70b0:	1d0a      	adds	r2, r1, #4
    70b2:	eb04 0008 	add.w	r0, r4, r8
    70b6:	443a      	add	r2, r7
    70b8:	4439      	add	r1, r7
    70ba:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    70be:	f7ff ffbf 	bl	7040 <memq_init>
		while (caller_id--) {
    70c2:	3c01      	subs	r4, #1
    70c4:	b2e4      	uxtb	r4, r4
    70c6:	2cff      	cmp	r4, #255	; 0xff
    70c8:	d1f0      	bne.n	70ac <mayfly_init+0x28>
    70ca:	e7e1      	b.n	7090 <mayfly_init+0xc>
    70cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    70d0:	2000070c 	.word	0x2000070c
    70d4:	2000068c 	.word	0x2000068c

000070d8 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    70d8:	b4f0      	push	{r4, r5, r6, r7}
    70da:	4b12      	ldr	r3, [pc, #72]	; (7124 <mayfly_enable+0x4c>)
    70dc:	4605      	mov	r5, r0
    70de:	460f      	mov	r7, r1
    70e0:	260c      	movs	r6, #12
    70e2:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    70e4:	b172      	cbz	r2, 7104 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    70e6:	4361      	muls	r1, r4
    70e8:	fb06 1400 	mla	r4, r6, r0, r1
    70ec:	4423      	add	r3, r4
    70ee:	7a59      	ldrb	r1, [r3, #9]
    70f0:	7a18      	ldrb	r0, [r3, #8]
    70f2:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    70f4:	bf04      	itt	eq
    70f6:	3101      	addeq	r1, #1
    70f8:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    70fa:	4628      	mov	r0, r5
    70fc:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    70fe:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    7100:	f00b bc12 	b.w	12928 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    7104:	434c      	muls	r4, r1
    7106:	fb06 4400 	mla	r4, r6, r0, r4
    710a:	4423      	add	r3, r4
    710c:	7a9c      	ldrb	r4, [r3, #10]
    710e:	7ada      	ldrb	r2, [r3, #11]
    7110:	42a2      	cmp	r2, r4
    7112:	d104      	bne.n	711e <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    7114:	3201      	adds	r2, #1
    7116:	729a      	strb	r2, [r3, #10]
}
    7118:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    711a:	f00b bc65 	b.w	129e8 <mayfly_pend>
}
    711e:	bcf0      	pop	{r4, r5, r6, r7}
    7120:	4770      	bx	lr
    7122:	bf00      	nop
    7124:	2000070c 	.word	0x2000070c

00007128 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    7128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    712a:	4605      	mov	r5, r0
    712c:	460e      	mov	r6, r1
    712e:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    7130:	b18a      	cbz	r2, 7156 <mayfly_enqueue+0x2e>
    7132:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    7134:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    7136:	7820      	ldrb	r0, [r4, #0]
    7138:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    713a:	f010 0703 	ands.w	r7, r0, #3
    713e:	d029      	beq.n	7194 <mayfly_enqueue+0x6c>
		if (chain) {
    7140:	b303      	cbz	r3, 7184 <mayfly_enqueue+0x5c>
			if (state != 1) {
    7142:	2f01      	cmp	r7, #1
    7144:	d039      	beq.n	71ba <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    7146:	3201      	adds	r2, #1
    7148:	b2d2      	uxtb	r2, r2
    714a:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    714c:	4631      	mov	r1, r6
    714e:	4628      	mov	r0, r5
    7150:	f00b fc4a 	bl	129e8 <mayfly_pend>
    7154:	e01c      	b.n	7190 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    7156:	f00b fc35 	bl	129c4 <mayfly_prio_is_equal>
    715a:	2800      	cmp	r0, #0
    715c:	d0e9      	beq.n	7132 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    715e:	4631      	mov	r1, r6
    7160:	4628      	mov	r0, r5
    7162:	f00b fc09 	bl	12978 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    7166:	2800      	cmp	r0, #0
    7168:	d0e3      	beq.n	7132 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    716a:	2330      	movs	r3, #48	; 0x30
    716c:	220c      	movs	r2, #12
    716e:	4373      	muls	r3, r6
    7170:	fb02 3305 	mla	r3, r2, r5, r3
    7174:	4a12      	ldr	r2, [pc, #72]	; (71c0 <mayfly_enqueue+0x98>)
    7176:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    7178:	7a93      	ldrb	r3, [r2, #10]
    717a:	7ad2      	ldrb	r2, [r2, #11]
    717c:	1a9b      	subs	r3, r3, r2
    717e:	bf18      	it	ne
    7180:	2301      	movne	r3, #1
    7182:	e7d7      	b.n	7134 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    7184:	3202      	adds	r2, #2
    7186:	b2d2      	uxtb	r2, r2
    7188:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    718a:	68e3      	ldr	r3, [r4, #12]
    718c:	68a0      	ldr	r0, [r4, #8]
    718e:	4798      	blx	r3
		return 0;
    7190:	2000      	movs	r0, #0
    7192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    7194:	2b00      	cmp	r3, #0
    7196:	d0f8      	beq.n	718a <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    7198:	3201      	adds	r2, #1
    719a:	b2d2      	uxtb	r2, r2
    719c:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    719e:	2304      	movs	r3, #4
    71a0:	2230      	movs	r2, #48	; 0x30
    71a2:	fb12 3206 	smlabb	r2, r2, r6, r3
    71a6:	230c      	movs	r3, #12
    71a8:	fb13 2305 	smlabb	r3, r3, r5, r2
    71ac:	4a04      	ldr	r2, [pc, #16]	; (71c0 <mayfly_enqueue+0x98>)
    71ae:	6860      	ldr	r0, [r4, #4]
    71b0:	441a      	add	r2, r3
    71b2:	4621      	mov	r1, r4
    71b4:	f7ff ff47 	bl	7046 <memq_enqueue>
    71b8:	e7c8      	b.n	714c <mayfly_enqueue+0x24>
			return 1;
    71ba:	4638      	mov	r0, r7

	return 0;
}
    71bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71be:	bf00      	nop
    71c0:	2000070c 	.word	0x2000070c

000071c4 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    71c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    71c8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    71cc:	b089      	sub	sp, #36	; 0x24
    71ce:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    71d0:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    71d4:	4e43      	ldr	r6, [pc, #268]	; (72e4 <mayfly_run+0x120>)
    71d6:	9304      	str	r3, [sp, #16]
{
    71d8:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    71da:	2404      	movs	r4, #4
	u8_t disable = 0;
    71dc:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    71e0:	3c01      	subs	r4, #1
    71e2:	b2e4      	uxtb	r4, r4
    71e4:	2cff      	cmp	r4, #255	; 0xff
    71e6:	d10b      	bne.n	7200 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    71e8:	9b01      	ldr	r3, [sp, #4]
    71ea:	2b00      	cmp	r3, #0
    71ec:	d076      	beq.n	72dc <mayfly_run+0x118>
    71ee:	f1b8 0f00 	cmp.w	r8, #0
    71f2:	d173      	bne.n	72dc <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    71f4:	4642      	mov	r2, r8
    71f6:	4629      	mov	r1, r5
    71f8:	4628      	mov	r0, r5
    71fa:	f00b fb95 	bl	12928 <mayfly_enable_cb>
    71fe:	e06d      	b.n	72dc <mayfly_run+0x118>
		struct mayfly *m = 0;
    7200:	f10d 0b20 	add.w	fp, sp, #32
    7204:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    7206:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    7208:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    720c:	f04f 0930 	mov.w	r9, #48	; 0x30
    7210:	fb07 f304 	mul.w	r3, r7, r4
    7214:	fb09 3005 	mla	r0, r9, r5, r3
    7218:	1831      	adds	r1, r6, r0
    721a:	465a      	mov	r2, fp
    721c:	6849      	ldr	r1, [r1, #4]
    721e:	5830      	ldr	r0, [r6, r0]
    7220:	9302      	str	r3, [sp, #8]
    7222:	f7ff ff17 	bl	7054 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    7226:	9b04      	ldr	r3, [sp, #16]
    7228:	fb17 3704 	smlabb	r7, r7, r4, r3
    722c:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    722e:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    7230:	9303      	str	r3, [sp, #12]
		while (link) {
    7232:	f1ba 0f00 	cmp.w	sl, #0
    7236:	d119      	bne.n	726c <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    7238:	2230      	movs	r2, #48	; 0x30
    723a:	230c      	movs	r3, #12
    723c:	436a      	muls	r2, r5
    723e:	fb03 2204 	mla	r2, r3, r4, r2
    7242:	4432      	add	r2, r6
    7244:	7a91      	ldrb	r1, [r2, #10]
    7246:	7ad0      	ldrb	r0, [r2, #11]
    7248:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    724a:	bf1e      	ittt	ne
    724c:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    724e:	2201      	movne	r2, #1
    7250:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    7252:	2230      	movs	r2, #48	; 0x30
    7254:	436a      	muls	r2, r5
    7256:	fb03 2304 	mla	r3, r3, r4, r2
    725a:	4433      	add	r3, r6
    725c:	7a1a      	ldrb	r2, [r3, #8]
    725e:	7a59      	ldrb	r1, [r3, #9]
    7260:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    7262:	bf1c      	itt	ne
    7264:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    7266:	f04f 0801 	movne.w	r8, #1
    726a:	e7b9      	b.n	71e0 <mayfly_run+0x1c>
			req = m->_req;
    726c:	9b07      	ldr	r3, [sp, #28]
    726e:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    7270:	785a      	ldrb	r2, [r3, #1]
    7272:	1abf      	subs	r7, r7, r2
    7274:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    7278:	2f01      	cmp	r7, #1
    727a:	d104      	bne.n	7286 <mayfly_run+0xc2>
				m->_ack--;
    727c:	3a01      	subs	r2, #1
    727e:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    7280:	6898      	ldr	r0, [r3, #8]
    7282:	68da      	ldr	r2, [r3, #12]
    7284:	4790      	blx	r2
			req = m->_req;
    7286:	9a07      	ldr	r2, [sp, #28]
    7288:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    728a:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    728c:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    728e:	1a9a      	subs	r2, r3, r2
    7290:	f002 0203 	and.w	r2, r2, #3
    7294:	2a01      	cmp	r2, #1
    7296:	9305      	str	r3, [sp, #20]
    7298:	d00d      	beq.n	72b6 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    729a:	9b02      	ldr	r3, [sp, #8]
    729c:	9903      	ldr	r1, [sp, #12]
    729e:	fb09 3005 	mla	r0, r9, r5, r3
    72a2:	4430      	add	r0, r6
    72a4:	2200      	movs	r2, #0
    72a6:	6840      	ldr	r0, [r0, #4]
    72a8:	f7ff fedc 	bl	7064 <memq_dequeue>
				m->_link = link;
    72ac:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    72ae:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    72b0:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    72b4:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    72b6:	9b02      	ldr	r3, [sp, #8]
    72b8:	fb09 3305 	mla	r3, r9, r5, r3
    72bc:	18f1      	adds	r1, r6, r3
    72be:	465a      	mov	r2, fp
    72c0:	6849      	ldr	r1, [r1, #4]
    72c2:	58f0      	ldr	r0, [r6, r3]
    72c4:	f7ff fec6 	bl	7054 <memq_peek>
			if (state == 1) {
    72c8:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    72ca:	4682      	mov	sl, r0
			if (state == 1) {
    72cc:	d1b1      	bne.n	7232 <mayfly_run+0x6e>
				if (caller_id || link) {
    72ce:	b90c      	cbnz	r4, 72d4 <mayfly_run+0x110>
    72d0:	2800      	cmp	r0, #0
    72d2:	d0b1      	beq.n	7238 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    72d4:	4629      	mov	r1, r5
    72d6:	4628      	mov	r0, r5
    72d8:	f00b fb86 	bl	129e8 <mayfly_pend>
	}
}
    72dc:	b009      	add	sp, #36	; 0x24
    72de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    72e2:	bf00      	nop
    72e4:	2000070c 	.word	0x2000070c

000072e8 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    72e8:	b510      	push	{r4, lr}
    72ea:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    72ec:	2000      	movs	r0, #0

	while (octets_len--) {
    72ee:	3901      	subs	r1, #1
    72f0:	b2c9      	uxtb	r1, r1
    72f2:	29ff      	cmp	r1, #255	; 0xff
    72f4:	d100      	bne.n	72f8 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    72f6:	bd10      	pop	{r4, pc}
		bite = *octets;
    72f8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    72fc:	2b00      	cmp	r3, #0
    72fe:	d0f6      	beq.n	72ee <util_ones_count_get+0x6>
			bite &= (bite - 1);
    7300:	1e5c      	subs	r4, r3, #1
			one_count++;
    7302:	3001      	adds	r0, #1
			bite &= (bite - 1);
    7304:	4023      	ands	r3, r4
			one_count++;
    7306:	b2c0      	uxtb	r0, r0
    7308:	e7f8      	b.n	72fc <util_ones_count_get+0x14>

0000730a <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    730a:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    730c:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    730e:	6805      	ldr	r5, [r0, #0]
	current = previous;
    7310:	461a      	mov	r2, r3
	total = 0;
    7312:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    7314:	2aff      	cmp	r2, #255	; 0xff
    7316:	d101      	bne.n	731c <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    7318:	2000      	movs	r0, #0
    731a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    731c:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    7320:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    7322:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    7326:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    732a:	d004      	beq.n	7336 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    732c:	68b3      	ldr	r3, [r6, #8]
    732e:	441c      	add	r4, r3
		current = ticker_current->next;
    7330:	4613      	mov	r3, r2
    7332:	463a      	mov	r2, r7
    7334:	e7ee      	b.n	7314 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    7336:	4293      	cmp	r3, r2
    7338:	d100      	bne.n	733c <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    733a:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    733c:	b21b      	sxth	r3, r3
    733e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7342:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    7344:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    7346:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    734a:	7833      	ldrb	r3, [r6, #0]
    734c:	2bff      	cmp	r3, #255	; 0xff
    734e:	d006      	beq.n	735e <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    7350:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7354:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    7358:	689a      	ldr	r2, [r3, #8]
    735a:	4402      	add	r2, r0
    735c:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    735e:	4420      	add	r0, r4
    7360:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007362 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    7362:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7364:	1a55      	subs	r5, r2, r1
    7366:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    736a:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    736c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    736e:	d109      	bne.n	7384 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7370:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    7374:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    7376:	42a2      	cmp	r2, r4
    7378:	d90e      	bls.n	7398 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    737a:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    737c:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    737e:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    7380:	6144      	str	r4, [r0, #20]
    7382:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7384:	1a8a      	subs	r2, r1, r2
    7386:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    738a:	4293      	cmp	r3, r2
    738c:	d901      	bls.n	7392 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    738e:	1a9a      	subs	r2, r3, r2
    7390:	e7f1      	b.n	7376 <ticks_to_expire_prep+0x14>
    7392:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    7394:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    7396:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    7398:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    739a:	2200      	movs	r2, #0
    739c:	e7ef      	b.n	737e <ticks_to_expire_prep+0x1c>

0000739e <ticker_job_op_cb>:
{
    739e:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    73a0:	2200      	movs	r2, #0
    73a2:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    73a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    73a6:	6259      	str	r1, [r3, #36]	; 0x24
{
    73a8:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    73aa:	b10a      	cbz	r2, 73b0 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    73ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    73ae:	4710      	bx	r2
    73b0:	4770      	bx	lr

000073b2 <ticker_worker>:
{
    73b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    73b6:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    73b8:	2301      	movs	r3, #1
{
    73ba:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    73bc:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    73be:	2d00      	cmp	r5, #0
    73c0:	d14c      	bne.n	745c <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    73c2:	7f43      	ldrb	r3, [r0, #29]
    73c4:	2bff      	cmp	r3, #255	; 0xff
    73c6:	d102      	bne.n	73ce <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    73c8:	77c5      	strb	r5, [r0, #31]
		return;
    73ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    73ce:	f00a fe15 	bl	11ffc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    73d2:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    73d4:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    73d6:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    73da:	1bc7      	subs	r7, r0, r7
    73dc:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    73e0:	2eff      	cmp	r6, #255	; 0xff
    73e2:	d006      	beq.n	73f2 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    73e4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    73e8:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    73ec:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    73ee:	429f      	cmp	r7, r3
    73f0:	d218      	bcs.n	7424 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    73f2:	7aa2      	ldrb	r2, [r4, #10]
    73f4:	7ae3      	ldrb	r3, [r4, #11]
    73f6:	4293      	cmp	r3, r2
    73f8:	d105      	bne.n	7406 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    73fa:	3301      	adds	r3, #1
    73fc:	b2db      	uxtb	r3, r3
			last = 0;
    73fe:	2b02      	cmp	r3, #2
    7400:	bf08      	it	eq
    7402:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    7404:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7406:	7ae3      	ldrb	r3, [r4, #11]
    7408:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    740c:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    740e:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    7410:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7412:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    7414:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7416:	46ac      	mov	ip, r5
    7418:	4623      	mov	r3, r4
    741a:	2104      	movs	r1, #4
    741c:	2003      	movs	r0, #3
}
    741e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7422:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    7424:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    7426:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7428:	788a      	ldrb	r2, [r1, #2]
    742a:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    742c:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7430:	1a9b      	subs	r3, r3, r2
    7432:	b2db      	uxtb	r3, r3
    7434:	2b01      	cmp	r3, #1
    7436:	d1d3      	bne.n	73e0 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    7438:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    743c:	3a01      	subs	r2, #1
    743e:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    7440:	f1b9 0f00 	cmp.w	r9, #0
    7444:	d0cc      	beq.n	73e0 <ticker_worker+0x2e>
					   ticks_expired -
    7446:	6948      	ldr	r0, [r1, #20]
    7448:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    744a:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    744c:	1a28      	subs	r0, r5, r0
    744e:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    7450:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7454:	690b      	ldr	r3, [r1, #16]
    7456:	6a49      	ldr	r1, [r1, #36]	; 0x24
    7458:	47c8      	blx	r9
    745a:	e7c1      	b.n	73e0 <ticker_worker+0x2e>
    745c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007460 <ticker_job>:
{
    7460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    7464:	7fc2      	ldrb	r2, [r0, #31]
{
    7466:	b095      	sub	sp, #84	; 0x54
    7468:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    746a:	2a00      	cmp	r2, #0
    746c:	f040 83be 	bne.w	7bec <ticker_job+0x78c>
	ticks_previous = instance->ticks_current;
    7470:	6943      	ldr	r3, [r0, #20]
    7472:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    7474:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7476:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    7478:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    747a:	7ac0      	ldrb	r0, [r0, #11]
    747c:	4298      	cmp	r0, r3
    747e:	f000 808f 	beq.w	75a0 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    7482:	440b      	add	r3, r1
    7484:	b2db      	uxtb	r3, r3
			first = 0;
    7486:	2b02      	cmp	r3, #2
    7488:	bf08      	it	eq
    748a:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    748c:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    7490:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    7494:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    7496:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    749a:	9b07      	ldr	r3, [sp, #28]
    749c:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    749e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    74a2:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    74a6:	f89b 301d 	ldrb.w	r3, [fp, #29]
    74aa:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    74ac:	f8db 3000 	ldr.w	r3, [fp]
    74b0:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    74b2:	f8db 3004 	ldr.w	r3, [fp, #4]
    74b6:	930d      	str	r3, [sp, #52]	; 0x34
    74b8:	f89b 3009 	ldrb.w	r3, [fp, #9]
    74bc:	3b01      	subs	r3, #1
    74be:	b2db      	uxtb	r3, r3
    74c0:	9304      	str	r3, [sp, #16]
	pending = 0;
    74c2:	2300      	movs	r3, #0
    74c4:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    74c6:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    74ca:	9b04      	ldr	r3, [sp, #16]
    74cc:	2bff      	cmp	r3, #255	; 0xff
    74ce:	d16a      	bne.n	75a6 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    74d0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    74d4:	9a05      	ldr	r2, [sp, #20]
    74d6:	1a9b      	subs	r3, r3, r2
    74d8:	bf18      	it	ne
    74da:	2301      	movne	r3, #1
    74dc:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    74de:	9b03      	ldr	r3, [sp, #12]
    74e0:	b1e3      	cbz	r3, 751c <ticker_job+0xbc>
	node = &instance->node[0];
    74e2:	f8db 3000 	ldr.w	r3, [fp]
    74e6:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    74e8:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    74ec:	f89b 601d 	ldrb.w	r6, [fp, #29]
    74f0:	2eff      	cmp	r6, #255	; 0xff
    74f2:	d00c      	beq.n	750e <ticker_job+0xae>
		ticker = &node[id_expired];
    74f4:	b237      	sxth	r7, r6
    74f6:	9b06      	ldr	r3, [sp, #24]
    74f8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    74fc:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7500:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7502:	4545      	cmp	r5, r8
    7504:	f240 8136 	bls.w	7774 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    7508:	eba5 0508 	sub.w	r5, r5, r8
    750c:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    750e:	9b04      	ldr	r3, [sp, #16]
    7510:	9a03      	ldr	r2, [sp, #12]
    7512:	9905      	ldr	r1, [sp, #20]
    7514:	42b1      	cmp	r1, r6
    7516:	bf18      	it	ne
    7518:	4613      	movne	r3, r2
    751a:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    751c:	f8db 3000 	ldr.w	r3, [fp]
    7520:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    7522:	f8db 3004 	ldr.w	r3, [fp, #4]
    7526:	9312      	str	r3, [sp, #72]	; 0x48
    7528:	f89b 3009 	ldrb.w	r3, [fp, #9]
    752c:	3b01      	subs	r3, #1
    752e:	b2db      	uxtb	r3, r3
    7530:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    7532:	9b03      	ldr	r3, [sp, #12]
    7534:	2bff      	cmp	r3, #255	; 0xff
    7536:	f040 8170 	bne.w	781a <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    753a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    753e:	9a05      	ldr	r2, [sp, #20]
    7540:	4293      	cmp	r3, r2
	if (!pending) {
    7542:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    7544:	f040 8349 	bne.w	7bda <ticker_job+0x77a>
	if (!pending) {
    7548:	b95b      	cbnz	r3, 7562 <ticker_job+0x102>
    754a:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    754e:	f8db 3004 	ldr.w	r3, [fp, #4]
    7552:	9303      	str	r3, [sp, #12]
    7554:	3c01      	subs	r4, #1
    7556:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    7558:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    755c:	2cff      	cmp	r4, #255	; 0xff
    755e:	f040 82a0 	bne.w	7aa2 <ticker_job+0x642>
	instance->job_guard = 0;
    7562:	2300      	movs	r3, #0
    7564:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    7568:	9b04      	ldr	r3, [sp, #16]
    756a:	b14b      	cbz	r3, 7580 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    756c:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7570:	2bff      	cmp	r3, #255	; 0xff
    7572:	f040 82e9 	bne.w	7b48 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    7576:	f00a fd13 	bl	11fa0 <cntr_stop>
    757a:	b908      	cbnz	r0, 7580 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    757c:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    7580:	f89b 301f 	ldrb.w	r3, [fp, #31]
    7584:	2b00      	cmp	r3, #0
    7586:	f000 8331 	beq.w	7bec <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    758a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    758e:	465b      	mov	r3, fp
    7590:	2201      	movs	r2, #1
    7592:	2103      	movs	r1, #3
    7594:	2004      	movs	r0, #4
    7596:	46a4      	mov	ip, r4
}
    7598:	b015      	add	sp, #84	; 0x54
    759a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    759e:	4760      	bx	ip
		flag_elapsed = 0;
    75a0:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    75a2:	4690      	mov	r8, r2
    75a4:	e77f      	b.n	74a6 <ticker_job+0x46>
		user = &users[count_user];
    75a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    75a8:	9a04      	ldr	r2, [sp, #16]
    75aa:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    75ae:	687b      	ldr	r3, [r7, #4]
    75b0:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    75b2:	78f9      	ldrb	r1, [r7, #3]
    75b4:	78be      	ldrb	r6, [r7, #2]
    75b6:	428e      	cmp	r6, r1
    75b8:	f000 80d7 	beq.w	776a <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    75bc:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    75be:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    75c0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    75c4:	0112      	lsls	r2, r2, #4
    75c6:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    75c8:	1c73      	adds	r3, r6, #1
    75ca:	b2db      	uxtb	r3, r3
				middle = 0;
    75cc:	4298      	cmp	r0, r3
    75ce:	bf08      	it	eq
    75d0:	2300      	moveq	r3, #0
			user->middle = middle;
    75d2:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    75d4:	9b08      	ldr	r3, [sp, #32]
    75d6:	5c9a      	ldrb	r2, [r3, r2]
    75d8:	2a03      	cmp	r2, #3
    75da:	d9eb      	bls.n	75b4 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    75dc:	2a05      	cmp	r2, #5
    75de:	d817      	bhi.n	7610 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    75e0:	7869      	ldrb	r1, [r5, #1]
    75e2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    75e6:	930c      	str	r3, [sp, #48]	; 0x30
    75e8:	980c      	ldr	r0, [sp, #48]	; 0x30
    75ea:	9b06      	ldr	r3, [sp, #24]
    75ec:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    75f0:	7863      	ldrb	r3, [r4, #1]
    75f2:	78a0      	ldrb	r0, [r4, #2]
    75f4:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    75f6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    75fa:	d009      	beq.n	7610 <ticker_job+0x1b0>
			    (state == 0) ||
    75fc:	2a04      	cmp	r2, #4
    75fe:	d10c      	bne.n	761a <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    7600:	686a      	ldr	r2, [r5, #4]
    7602:	b952      	cbnz	r2, 761a <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    7604:	68aa      	ldr	r2, [r5, #8]
    7606:	b942      	cbnz	r2, 761a <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    7608:	68ea      	ldr	r2, [r5, #12]
    760a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    760e:	d104      	bne.n	761a <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    7610:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    7612:	4628      	mov	r0, r5
    7614:	f7ff fec3 	bl	739e <ticker_job_op_cb>
    7618:	e7cb      	b.n	75b2 <ticker_job+0x152>
			if (state == 1) {
    761a:	2b01      	cmp	r3, #1
    761c:	f040 809b 	bne.w	7756 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7620:	4658      	mov	r0, fp
    7622:	f7ff fe72 	bl	730a <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7626:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7628:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    762a:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    762c:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    762e:	f040 8084 	bne.w	773a <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    7632:	f8db 3014 	ldr.w	r3, [fp, #20]
    7636:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    7638:	f00a fce0 	bl	11ffc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    763c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    763e:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7640:	1ac3      	subs	r3, r0, r3
    7642:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    7646:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    7648:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    764a:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    764c:	bf9e      	ittt	ls
    764e:	6962      	ldrls	r2, [r4, #20]
    7650:	1b92      	subls	r2, r2, r6
    7652:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    7654:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    7656:	bf96      	itet	ls
    7658:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    765a:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    765c:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    765e:	b18a      	cbz	r2, 7684 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    7660:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    7662:	b179      	cbz	r1, 7684 <ticker_job+0x224>
		user_op->params.update.lazy--;
    7664:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    7668:	fa1f fe8e 	uxth.w	lr, lr
    766c:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7670:	429a      	cmp	r2, r3
    7672:	d32b      	bcc.n	76cc <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    7674:	f8df 9324 	ldr.w	r9, [pc, #804]	; 799c <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7678:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    767c:	45e6      	cmp	lr, ip
    767e:	d847      	bhi.n	7710 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    7680:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    7684:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    7686:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    7688:	4413      	add	r3, r2
    768a:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    768c:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    768e:	6963      	ldr	r3, [r4, #20]
    7690:	4413      	add	r3, r2
    7692:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    7694:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7696:	4620      	mov	r0, r4
    7698:	f7ff fe63 	bl	7362 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    769c:	69a2      	ldr	r2, [r4, #24]
    769e:	892b      	ldrh	r3, [r5, #8]
    76a0:	4413      	add	r3, r2
    76a2:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    76a4:	896a      	ldrh	r2, [r5, #10]
    76a6:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    76a8:	bf8c      	ite	hi
    76aa:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    76ac:	2300      	movls	r3, #0
    76ae:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    76b0:	7bab      	ldrb	r3, [r5, #14]
    76b2:	b103      	cbz	r3, 76b6 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    76b4:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    76b6:	9b06      	ldr	r3, [sp, #24]
    76b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    76ba:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    76be:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    76c0:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    76c4:	3301      	adds	r3, #1
    76c6:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    76c8:	2100      	movs	r1, #0
    76ca:	e7a2      	b.n	7612 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    76cc:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    76d0:	45e6      	cmp	lr, ip
    76d2:	d2cf      	bcs.n	7674 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    76d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    76d6:	4eaf      	ldr	r6, [pc, #700]	; (7994 <ticker_job+0x534>)
    76d8:	48af      	ldr	r0, [pc, #700]	; (7998 <ticker_job+0x538>)
    76da:	198e      	adds	r6, r1, r6
    76dc:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    76de:	bf81      	itttt	hi
    76e0:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    76e4:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    76e8:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    76ec:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    76ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
    76f0:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    76f2:	bf8c      	ite	hi
    76f4:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    76f8:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    76fc:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    76fe:	4491      	add	r9, r2
			ticker->lazy_current--;
    7700:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    7704:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    7706:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    770a:	f8a4 c01e 	strh.w	ip, [r4, #30]
    770e:	e7af      	b.n	7670 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    7710:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7712:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    7714:	48a0      	ldr	r0, [pc, #640]	; (7998 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    7716:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7718:	499e      	ldr	r1, [pc, #632]	; (7994 <ticker_job+0x534>)
    771a:	1871      	adds	r1, r6, r1
    771c:	4281      	cmp	r1, r0
	return 0;
    771e:	bf8e      	itee	hi
    7720:	2100      	movhi	r1, #0
		return 1;
    7722:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    7724:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    7726:	4411      	add	r1, r2
			ticker->lazy_current++;
    7728:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    772c:	bf8c      	ite	hi
    772e:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7730:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    7732:	440b      	add	r3, r1
			ticker->lazy_current++;
    7734:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7738:	e79e      	b.n	7678 <ticker_job+0x218>
		ticker->req = ticker->ack;
    773a:	78a3      	ldrb	r3, [r4, #2]
    773c:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    773e:	786b      	ldrb	r3, [r5, #1]
    7740:	f89b 201c 	ldrb.w	r2, [fp, #28]
    7744:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    7746:	bf01      	itttt	eq
    7748:	23ff      	moveq	r3, #255	; 0xff
    774a:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    774e:	2300      	moveq	r3, #0
    7750:	f8cb 3018 	streq.w	r3, [fp, #24]
    7754:	e7b8      	b.n	76c8 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    7756:	2104      	movs	r1, #4
    7758:	465b      	mov	r3, fp
    775a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    775e:	2201      	movs	r2, #1
    7760:	4608      	mov	r0, r1
    7762:	47a0      	blx	r4
				pending = 1;
    7764:	2301      	movs	r3, #1
				user->middle = prev;
    7766:	70be      	strb	r6, [r7, #2]
				pending = 1;
    7768:	9309      	str	r3, [sp, #36]	; 0x24
    776a:	9b04      	ldr	r3, [sp, #16]
    776c:	3b01      	subs	r3, #1
    776e:	b2db      	uxtb	r3, r3
    7770:	9304      	str	r3, [sp, #16]
    7772:	e6aa      	b.n	74ca <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    7774:	f8db 3018 	ldr.w	r3, [fp, #24]
    7778:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    777a:	bf29      	itett	cs
    777c:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    777e:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    7780:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    7784:	2300      	movcs	r3, #0
    7786:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    778a:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    778c:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    778e:	b11b      	cbz	r3, 7798 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    7790:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    7794:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    7798:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    779a:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    779c:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    779e:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    77a2:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    77a6:	f8d4 e004 	ldr.w	lr, [r4, #4]
    77aa:	f1be 0f00 	cmp.w	lr, #0
    77ae:	d030      	beq.n	7812 <ticker_job+0x3b2>
    77b0:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    77b2:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 7998 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    77b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    77b8:	6a21      	ldr	r1, [r4, #32]
    77ba:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    77bc:	4975      	ldr	r1, [pc, #468]	; (7994 <ticker_job+0x534>)
    77be:	1859      	adds	r1, r3, r1
    77c0:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    77c2:	bf9f      	itttt	ls
    77c4:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    77c8:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    77cc:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    77d0:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    77d2:	bf92      	itee	ls
    77d4:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    77d6:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    77d8:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    77da:	4473      	add	r3, lr
			while (count--) {
    77dc:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    77e0:	441a      	add	r2, r3
			while (count--) {
    77e2:	d2e8      	bcs.n	77b6 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    77e4:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    77e6:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    77e8:	f8db 1014 	ldr.w	r1, [fp, #20]
    77ec:	eb03 0209 	add.w	r2, r3, r9
    77f0:	4620      	mov	r0, r4
    77f2:	f7ff fdb6 	bl	7362 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    77f6:	8ba3      	ldrh	r3, [r4, #28]
    77f8:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    77fa:	2300      	movs	r3, #0
    77fc:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    77fe:	9b06      	ldr	r3, [sp, #24]
    7800:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    7804:	7863      	ldrb	r3, [r4, #1]
    7806:	3301      	adds	r3, #1
    7808:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    780a:	eba8 0805 	sub.w	r8, r8, r5
    780e:	46b2      	mov	sl, r6
    7810:	e66c      	b.n	74ec <ticker_job+0x8c>
			ticker->req = ticker->ack;
    7812:	78a3      	ldrb	r3, [r4, #2]
    7814:	7063      	strb	r3, [r4, #1]
    7816:	4656      	mov	r6, sl
    7818:	e7f7      	b.n	780a <ticker_job+0x3aa>
		user = &users[count_user];
    781a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    781c:	9a03      	ldr	r2, [sp, #12]
    781e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7822:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    7824:	685b      	ldr	r3, [r3, #4]
    7826:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    7828:	9b06      	ldr	r3, [sp, #24]
    782a:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    782e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    7832:	f000 808e 	beq.w	7952 <ticker_job+0x4f2>
				ticker = &node[id_insert];
    7836:	fa0f f38a 	sxth.w	r3, sl
    783a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    783e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    7840:	46d0      	mov	r8, sl
    7842:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    7846:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    784a:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    784c:	f8db 3000 	ldr.w	r3, [fp]
    7850:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    7852:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7854:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    7856:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7858:	8be3      	ldrh	r3, [r4, #30]
    785a:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    785c:	bf86      	itte	hi
    785e:	1a9b      	subhi	r3, r3, r2
    7860:	b29b      	uxthhi	r3, r3
		skip = 0;
    7862:	2300      	movls	r3, #0
    7864:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    7866:	fa0f f388 	sxth.w	r3, r8
    786a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    786e:	00db      	lsls	r3, r3, #3
    7870:	9313      	str	r3, [sp, #76]	; 0x4c
    7872:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    7874:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    7878:	f8db 0018 	ldr.w	r0, [fp, #24]
    787c:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    787e:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    7882:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    7884:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    7888:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    788c:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    788e:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    7890:	2bff      	cmp	r3, #255	; 0xff
    7892:	d007      	beq.n	78a4 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    7894:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    7898:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    789c:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    789e:	4281      	cmp	r1, r0
    78a0:	f200 80a9 	bhi.w	79f6 <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    78a4:	f8de 0018 	ldr.w	r0, [lr, #24]
    78a8:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    78aa:	eb01 0c00 	add.w	ip, r1, r0
    78ae:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    78b0:	2eff      	cmp	r6, #255	; 0xff
    78b2:	f040 80ae 	bne.w	7a12 <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    78b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    78b8:	b130      	cbz	r0, 78c8 <ticker_job+0x468>
    78ba:	9807      	ldr	r0, [sp, #28]
    78bc:	4281      	cmp	r1, r0
    78be:	f0c0 80bf 	bcc.w	7a40 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    78c2:	2eff      	cmp	r6, #255	; 0xff
    78c4:	f040 818e 	bne.w	7be4 <ticker_job+0x784>
		if (previous == current) {
    78c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    78ca:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    78ce:	4283      	cmp	r3, r0
			node[previous].next = id;
    78d0:	bf18      	it	ne
    78d2:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    78d6:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    78da:	bf16      	itet	ne
    78dc:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    78e0:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    78e4:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    78e8:	2bff      	cmp	r3, #255	; 0xff
    78ea:	d006      	beq.n	78fa <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    78ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    78f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    78f4:	689a      	ldr	r2, [r3, #8]
    78f6:	1a51      	subs	r1, r2, r1
    78f8:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    78fa:	78a3      	ldrb	r3, [r4, #2]
    78fc:	3301      	adds	r3, #1
    78fe:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    7900:	2100      	movs	r1, #0
			if (user_op) {
    7902:	2d00      	cmp	r5, #0
    7904:	d093      	beq.n	782e <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    7906:	4628      	mov	r0, r5
    7908:	f7ff fd49 	bl	739e <ticker_job_op_cb>
    790c:	e78f      	b.n	782e <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    790e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    7912:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7914:	011b      	lsls	r3, r3, #4
    7916:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    7918:	f109 0201 	add.w	r2, r9, #1
    791c:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    7920:	9a06      	ldr	r2, [sp, #24]
    7922:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    7924:	454a      	cmp	r2, r9
    7926:	bf08      	it	eq
    7928:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    792c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    792e:	5cd3      	ldrb	r3, [r2, r3]
    7930:	2b03      	cmp	r3, #3
    7932:	d10e      	bne.n	7952 <ticker_job+0x4f2>
				id_insert = user_op->id;
    7934:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    7938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    793a:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    793e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    7942:	7862      	ldrb	r2, [r4, #1]
    7944:	78a3      	ldrb	r3, [r4, #2]
    7946:	429a      	cmp	r2, r3
    7948:	d009      	beq.n	795e <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    794a:	2101      	movs	r1, #1
    794c:	4628      	mov	r0, r5
    794e:	f7ff fd26 	bl	739e <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    7952:	9b06      	ldr	r3, [sp, #24]
    7954:	789b      	ldrb	r3, [r3, #2]
    7956:	454b      	cmp	r3, r9
    7958:	d1d9      	bne.n	790e <ticker_job+0x4ae>
    795a:	9b03      	ldr	r3, [sp, #12]
    795c:	e5e6      	b.n	752c <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    795e:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    7960:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    7964:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    7966:	692b      	ldr	r3, [r5, #16]
    7968:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    796a:	8aab      	ldrh	r3, [r5, #20]
    796c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    796e:	69ab      	ldr	r3, [r5, #24]
    7970:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    7972:	69eb      	ldr	r3, [r5, #28]
    7974:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    7976:	6a2b      	ldr	r3, [r5, #32]
    7978:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    797a:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    797c:	68ab      	ldr	r3, [r5, #8]
    797e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    7980:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    7982:	686a      	ldr	r2, [r5, #4]
    7984:	4620      	mov	r0, r4
    7986:	f7ff fcec 	bl	7362 <ticks_to_expire_prep>
	ticker->force = 1;
    798a:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    798c:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    798e:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    7990:	70e3      	strb	r3, [r4, #3]
    7992:	e75b      	b.n	784c <ticker_job+0x3ec>
    7994:	ff172b5a 	.word	0xff172b5a
    7998:	7f172b59 	.word	0x7f172b59
    799c:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    79a0:	6860      	ldr	r0, [r4, #4]
    79a2:	2800      	cmp	r0, #0
    79a4:	d07b      	beq.n	7a9e <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    79a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    79a8:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    79aa:	4b92      	ldr	r3, [pc, #584]	; (7bf4 <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    79ac:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    79ae:	4992      	ldr	r1, [pc, #584]	; (7bf8 <ticker_job+0x798>)
    79b0:	18d3      	adds	r3, r2, r3
    79b2:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    79b4:	bf9c      	itt	ls
    79b6:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    79ba:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    79be:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    79c0:	bf8b      	itete	hi
    79c2:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    79c4:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    79c8:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    79ca:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    79cc:	4403      	add	r3, r0
		return 1;
    79ce:	bf98      	it	ls
    79d0:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    79d2:	4413      	add	r3, r2
			ticker->lazy_current++;
    79d4:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    79d6:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    79d8:	3201      	adds	r2, #1
    79da:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    79dc:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    79de:	4293      	cmp	r3, r2
    79e0:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    79e4:	bf89      	itett	hi
    79e6:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    79e8:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    79ea:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    79ec:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    79ee:	bf9c      	itt	ls
    79f0:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    79f2:	60a1      	strls	r1, [r4, #8]
    79f4:	e73d      	b.n	7872 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    79f6:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    79f8:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    79fa:	b946      	cbnz	r6, 7a0e <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    79fc:	9f07      	ldr	r7, [sp, #28]
    79fe:	42b8      	cmp	r0, r7
    7a00:	d200      	bcs.n	7a04 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    7a02:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    7a04:	930b      	str	r3, [sp, #44]	; 0x2c
    7a06:	9607      	str	r6, [sp, #28]
    7a08:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    7a0c:	e740      	b.n	7890 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    7a0e:	9308      	str	r3, [sp, #32]
    7a10:	e7f8      	b.n	7a04 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    7a12:	b230      	sxth	r0, r6
    7a14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    7a18:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    7a1c:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    7a1e:	68bf      	ldr	r7, [r7, #8]
    7a20:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    7a22:	4567      	cmp	r7, ip
    7a24:	d20a      	bcs.n	7a3c <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    7a26:	9f10      	ldr	r7, [sp, #64]	; 0x40
    7a28:	69bf      	ldr	r7, [r7, #24]
    7a2a:	2f00      	cmp	r7, #0
    7a2c:	f47f af43 	bne.w	78b6 <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    7a30:	9e11      	ldr	r6, [sp, #68]	; 0x44
    7a32:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    7a36:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    7a3a:	e739      	b.n	78b0 <ticker_job+0x450>
			return TICKER_NULL;
    7a3c:	26ff      	movs	r6, #255	; 0xff
    7a3e:	e73a      	b.n	78b6 <ticker_job+0x456>
	while (id_insert !=
    7a40:	9b08      	ldr	r3, [sp, #32]
    7a42:	4598      	cmp	r8, r3
    7a44:	f43f af59 	beq.w	78fa <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    7a48:	9b08      	ldr	r3, [sp, #32]
    7a4a:	2bff      	cmp	r3, #255	; 0xff
    7a4c:	d0a8      	beq.n	79a0 <ticker_job+0x540>
    7a4e:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    7a50:	b233      	sxth	r3, r6
    7a52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7a56:	9307      	str	r3, [sp, #28]
    7a58:	9a07      	ldr	r2, [sp, #28]
    7a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7a5c:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    7a60:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    7a62:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    7a64:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    7a66:	bf88      	it	hi
    7a68:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    7a6a:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    7a6c:	bf8c      	ite	hi
    7a6e:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    7a70:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    7a72:	2a00      	cmp	r2, #0
    7a74:	d094      	beq.n	79a0 <ticker_job+0x540>
    7a76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7a78:	4293      	cmp	r3, r2
    7a7a:	d891      	bhi.n	79a0 <ticker_job+0x540>
			    skip_collide <= skip &&
    7a7c:	78fa      	ldrb	r2, [r7, #3]
    7a7e:	78e3      	ldrb	r3, [r4, #3]
    7a80:	429a      	cmp	r2, r3
    7a82:	d28d      	bcs.n	79a0 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    7a84:	4631      	mov	r1, r6
    7a86:	4658      	mov	r0, fp
    7a88:	f7ff fc3f 	bl	730a <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    7a8c:	78bb      	ldrb	r3, [r7, #2]
    7a8e:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    7a90:	9a07      	ldr	r2, [sp, #28]
    7a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    7a94:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    7a96:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    7a9a:	46b2      	mov	sl, r6
    7a9c:	e6e9      	b.n	7872 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    7a9e:	2101      	movs	r1, #1
    7aa0:	e72f      	b.n	7902 <ticker_job+0x4a2>
		user = &users[count_user];
    7aa2:	9b03      	ldr	r3, [sp, #12]
    7aa4:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    7aa8:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    7aaa:	786b      	ldrb	r3, [r5, #1]
    7aac:	78ea      	ldrb	r2, [r5, #3]
    7aae:	429a      	cmp	r2, r3
    7ab0:	d102      	bne.n	7ab8 <ticker_job+0x658>
    7ab2:	3c01      	subs	r4, #1
    7ab4:	b2e4      	uxtb	r4, r4
    7ab6:	e551      	b.n	755c <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    7ab8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7abc:	011b      	lsls	r3, r3, #4
    7abe:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    7ac0:	5cf3      	ldrb	r3, [r6, r3]
    7ac2:	2b01      	cmp	r3, #1
    7ac4:	d025      	beq.n	7b12 <ticker_job+0x6b2>
    7ac6:	2b02      	cmp	r3, #2
    7ac8:	d12a      	bne.n	7b20 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    7aca:	f8d2 c004 	ldr.w	ip, [r2, #4]
    7ace:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    7ad0:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    7ad4:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    7ad8:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    7adc:	28ff      	cmp	r0, #255	; 0xff
    7ade:	d004      	beq.n	7aea <ticker_job+0x68a>
    7ae0:	6819      	ldr	r1, [r3, #0]
    7ae2:	f8db 7014 	ldr.w	r7, [fp, #20]
    7ae6:	42b9      	cmp	r1, r7
    7ae8:	d023      	beq.n	7b32 <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    7aea:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    7aee:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    7af2:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    7af4:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    7af6:	29ff      	cmp	r1, #255	; 0xff
    7af8:	d007      	beq.n	7b0a <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    7afa:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    7afe:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    7b02:	6987      	ldr	r7, [r0, #24]
    7b04:	6880      	ldr	r0, [r0, #8]
    7b06:	b1df      	cbz	r7, 7b40 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    7b08:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    7b0a:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    7b0e:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    7b12:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    7b14:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    7b18:	b113      	cbz	r3, 7b20 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    7b1a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    7b1c:	2000      	movs	r0, #0
    7b1e:	4798      	blx	r3
			first = user->first + 1;
    7b20:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    7b22:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    7b24:	3301      	adds	r3, #1
    7b26:	b2db      	uxtb	r3, r3
				first = 0;
    7b28:	429a      	cmp	r2, r3
    7b2a:	bf08      	it	eq
    7b2c:	2300      	moveq	r3, #0
			user->first = first;
    7b2e:	706b      	strb	r3, [r5, #1]
    7b30:	e7bb      	b.n	7aaa <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    7b32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    7b36:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    7b3a:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    7b3e:	e7da      	b.n	7af6 <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    7b40:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    7b42:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    7b46:	e7d6      	b.n	7af6 <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    7b48:	9b05      	ldr	r3, [sp, #20]
    7b4a:	2bff      	cmp	r3, #255	; 0xff
    7b4c:	d107      	bne.n	7b5e <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    7b4e:	f00a fa55 	bl	11ffc <cntr_cnt_get>
    7b52:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    7b54:	f00a fa16 	bl	11f84 <cntr_start>
    7b58:	b908      	cbnz	r0, 7b5e <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    7b5a:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    7b5e:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    7b62:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    7b66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    7b6a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7b6e:	260a      	movs	r6, #10
    7b70:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    7b72:	f00a fa43 	bl	11ffc <cntr_cnt_get>
		cc = instance->ticks_current;
    7b76:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7b7a:	1b03      	subs	r3, r0, r4
    7b7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    7b80:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    7b82:	42ab      	cmp	r3, r5
    7b84:	bf2c      	ite	cs
    7b86:	18e4      	addcs	r4, r4, r3
    7b88:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    7b8a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    7b8e:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    7b90:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    7b94:	4620      	mov	r0, r4
    7b96:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    7b98:	f00a fa30 	bl	11ffc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7b9c:	1bc0      	subs	r0, r0, r7
    7b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7ba2:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    7ba4:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7ba6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    7baa:	42a0      	cmp	r0, r4
    7bac:	f67f ace8 	bls.w	7580 <ticker_job+0x120>
		LL_ASSERT(i);
    7bb0:	3e01      	subs	r6, #1
    7bb2:	d1de      	bne.n	7b72 <ticker_job+0x712>
    7bb4:	4b11      	ldr	r3, [pc, #68]	; (7bfc <ticker_job+0x79c>)
    7bb6:	9301      	str	r3, [sp, #4]
    7bb8:	9300      	str	r3, [sp, #0]
    7bba:	4a11      	ldr	r2, [pc, #68]	; (7c00 <ticker_job+0x7a0>)
    7bbc:	4b11      	ldr	r3, [pc, #68]	; (7c04 <ticker_job+0x7a4>)
    7bbe:	4912      	ldr	r1, [pc, #72]	; (7c08 <ticker_job+0x7a8>)
    7bc0:	4812      	ldr	r0, [pc, #72]	; (7c0c <ticker_job+0x7ac>)
    7bc2:	f7f9 f9e3 	bl	f8c <printk>
    7bc6:	4040      	eors	r0, r0
    7bc8:	f380 8811 	msr	BASEPRI, r0
    7bcc:	f04f 0004 	mov.w	r0, #4
    7bd0:	df02      	svc	2
	instance->job_guard = 0;
    7bd2:	2300      	movs	r3, #0
    7bd4:	f88b 301e 	strb.w	r3, [fp, #30]
    7bd8:	e4c8      	b.n	756c <ticker_job+0x10c>
	if (!pending) {
    7bda:	2b00      	cmp	r3, #0
    7bdc:	d1f9      	bne.n	7bd2 <ticker_job+0x772>
		flag_compare_update = 1;
    7bde:	2301      	movs	r3, #1
    7be0:	9304      	str	r3, [sp, #16]
    7be2:	e4b2      	b.n	754a <ticker_job+0xea>
	while (id_insert !=
    7be4:	45b0      	cmp	r8, r6
    7be6:	f47f af33 	bne.w	7a50 <ticker_job+0x5f0>
    7bea:	e686      	b.n	78fa <ticker_job+0x49a>
}
    7bec:	b015      	add	sp, #84	; 0x54
    7bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7bf2:	bf00      	nop
    7bf4:	ff172b5a 	.word	0xff172b5a
    7bf8:	7f172b59 	.word	0x7f172b59
    7bfc:	0001496d 	.word	0x0001496d
    7c00:	000156bc 	.word	0x000156bc
    7c04:	000166f1 	.word	0x000166f1
    7c08:	0001570b 	.word	0x0001570b
    7c0c:	0001670b 	.word	0x0001670b

00007c10 <ticker_init>:
{
    7c10:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    7c12:	4d1a      	ldr	r5, [pc, #104]	; (7c7c <ticker_init+0x6c>)
{
    7c14:	9f05      	ldr	r7, [sp, #20]
    7c16:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    7c1a:	262c      	movs	r6, #44	; 0x2c
    7c1c:	4346      	muls	r6, r0
    7c1e:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    7c22:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    7c24:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    7c28:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    7c2a:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    7c2e:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    7c32:	3b01      	subs	r3, #1
    7c34:	b2db      	uxtb	r3, r3
    7c36:	2bff      	cmp	r3, #255	; 0xff
    7c38:	d111      	bne.n	7c5e <ticker_init+0x4e>
	if (count_op) {
    7c3a:	b9ec      	cbnz	r4, 7c78 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    7c3c:	222c      	movs	r2, #44	; 0x2c
    7c3e:	fb02 5200 	mla	r2, r2, r0, r5
    7c42:	9908      	ldr	r1, [sp, #32]
    7c44:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    7c46:	9909      	ldr	r1, [sp, #36]	; 0x24
    7c48:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    7c4a:	990a      	ldr	r1, [sp, #40]	; 0x28
    7c4c:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    7c4e:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    7c50:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    7c52:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    7c54:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    7c56:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    7c58:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    7c5a:	4620      	mov	r0, r4
    7c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    7c5e:	b21a      	sxth	r2, r3
    7c60:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    7c64:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    7c66:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    7c6a:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    7c6e:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    7c70:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    7c74:	b2e4      	uxtb	r4, r4
    7c76:	e7dc      	b.n	7c32 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    7c78:	2001      	movs	r0, #1
}
    7c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c7c:	200007cc 	.word	0x200007cc

00007c80 <ticker_trigger>:
	instance = &_instance[instance_index];
    7c80:	4a07      	ldr	r2, [pc, #28]	; (7ca0 <ticker_trigger+0x20>)
    7c82:	212c      	movs	r1, #44	; 0x2c
    7c84:	fb00 2301 	mla	r3, r0, r1, r2
{
    7c88:	b410      	push	{r4}
	if (instance->sched_cb) {
    7c8a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    7c8c:	b12c      	cbz	r4, 7c9a <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7c8e:	46a4      	mov	ip, r4
    7c90:	2201      	movs	r2, #1
    7c92:	2103      	movs	r1, #3
    7c94:	2002      	movs	r0, #2
}
    7c96:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7c98:	4760      	bx	ip
}
    7c9a:	bc10      	pop	{r4}
    7c9c:	4770      	bx	lr
    7c9e:	bf00      	nop
    7ca0:	200007cc 	.word	0x200007cc

00007ca4 <ticker_start>:
{
    7ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7ca8:	4f25      	ldr	r7, [pc, #148]	; (7d40 <ticker_start+0x9c>)
    7caa:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    7cae:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7cb0:	fb08 7000 	mla	r0, r8, r0, r7
    7cb4:	fa0f fc81 	sxth.w	ip, r1
    7cb8:	f8d0 e004 	ldr.w	lr, [r0, #4]
    7cbc:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    7cc0:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    7cc4:	78f4      	ldrb	r4, [r6, #3]
    7cc6:	1c65      	adds	r5, r4, #1
    7cc8:	b2ed      	uxtb	r5, r5
		last = 0;
    7cca:	45ae      	cmp	lr, r5
    7ccc:	bf98      	it	ls
    7cce:	2500      	movls	r5, #0
	if (last == user->first) {
    7cd0:	f896 e001 	ldrb.w	lr, [r6, #1]
    7cd4:	45ae      	cmp	lr, r5
    7cd6:	d02f      	beq.n	7d38 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    7cd8:	f8d6 c004 	ldr.w	ip, [r6, #4]
    7cdc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7ce0:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    7ce4:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    7ce8:	f04f 0a03 	mov.w	sl, #3
    7cec:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    7cf0:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    7cf2:	9b08      	ldr	r3, [sp, #32]
    7cf4:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    7cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7cf8:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    7cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7cfc:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    7cfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7d00:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    7d02:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    7d06:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    7d08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7d0a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    7d0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7d0e:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    7d10:	2302      	movs	r3, #2
    7d12:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7d16:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7d18:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    7d1a:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    7d1c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7d1e:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7d20:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7d22:	6a03      	ldr	r3, [r0, #32]
    7d24:	4608      	mov	r0, r1
    7d26:	4798      	blx	r3
    7d28:	fb09 7308 	mla	r3, r9, r8, r7
    7d2c:	2200      	movs	r2, #0
    7d2e:	2104      	movs	r1, #4
    7d30:	47a8      	blx	r5
	return user_op->status;
    7d32:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7d38:	2001      	movs	r0, #1
}
    7d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7d3e:	bf00      	nop
    7d40:	200007cc 	.word	0x200007cc

00007d44 <ticker_update>:
{
    7d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7d48:	f8df 8090 	ldr.w	r8, [pc, #144]	; 7ddc <ticker_update+0x98>
    7d4c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7d50:	fb0a 8e00 	mla	lr, sl, r0, r8
    7d54:	b20f      	sxth	r7, r1
    7d56:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    7d5a:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7d5c:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    7d60:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    7d64:	78c4      	ldrb	r4, [r0, #3]
    7d66:	1c66      	adds	r6, r4, #1
    7d68:	b2f6      	uxtb	r6, r6
		last = 0;
    7d6a:	42b5      	cmp	r5, r6
    7d6c:	bf98      	it	ls
    7d6e:	2600      	movls	r6, #0
	if (last == user->first) {
    7d70:	7845      	ldrb	r5, [r0, #1]
    7d72:	42b5      	cmp	r5, r6
    7d74:	d02f      	beq.n	7dd6 <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    7d76:	f8d0 c004 	ldr.w	ip, [r0, #4]
    7d7a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7d7e:	0125      	lsls	r5, r4, #4
    7d80:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    7d84:	2704      	movs	r7, #4
    7d86:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    7d8a:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    7d8c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    7d90:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    7d92:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7d96:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    7d98:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7d9c:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    7d9e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    7da2:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    7da4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    7da8:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    7daa:	2302      	movs	r3, #2
    7dac:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7db0:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    7db4:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    7db6:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7db8:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7dba:	f8de 3020 	ldr.w	r3, [lr, #32]
    7dbe:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    7dc2:	4608      	mov	r0, r1
    7dc4:	4798      	blx	r3
    7dc6:	fb09 830a 	mla	r3, r9, sl, r8
    7dca:	2200      	movs	r2, #0
    7dcc:	4639      	mov	r1, r7
    7dce:	47a8      	blx	r5
	return user_op->status;
    7dd0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7dd6:	2001      	movs	r0, #1
}
    7dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ddc:	200007cc 	.word	0x200007cc

00007de0 <ticker_stop>:
{
    7de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7de4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 7e54 <ticker_stop+0x74>
    7de8:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7dec:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7df0:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7df2:	f8de 0004 	ldr.w	r0, [lr, #4]
    7df6:	b20e      	sxth	r6, r1
    7df8:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    7dfc:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7e00:	78fc      	ldrb	r4, [r7, #3]
    7e02:	1c65      	adds	r5, r4, #1
    7e04:	b2ed      	uxtb	r5, r5
		last = 0;
    7e06:	42a8      	cmp	r0, r5
    7e08:	bf98      	it	ls
    7e0a:	2500      	movls	r5, #0
	if (last == user->first) {
    7e0c:	7878      	ldrb	r0, [r7, #1]
    7e0e:	42a8      	cmp	r0, r5
    7e10:	d01d      	beq.n	7e4e <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    7e12:	6878      	ldr	r0, [r7, #4]
    7e14:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7e18:	0124      	lsls	r4, r4, #4
    7e1a:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    7e1c:	f04f 0c05 	mov.w	ip, #5
    7e20:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    7e24:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    7e26:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    7e28:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    7e2a:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    7e2c:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    7e2e:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    7e30:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7e32:	f8de 3020 	ldr.w	r3, [lr, #32]
    7e36:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    7e3a:	4608      	mov	r0, r1
    7e3c:	4798      	blx	r3
    7e3e:	fb08 930a 	mla	r3, r8, sl, r9
    7e42:	2200      	movs	r2, #0
    7e44:	2104      	movs	r1, #4
    7e46:	47a0      	blx	r4
	return user_op->status;
    7e48:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7e4e:	2001      	movs	r0, #1
}
    7e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e54:	200007cc 	.word	0x200007cc

00007e58 <ticker_next_slot_get>:
{
    7e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7e5c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 7ed8 <ticker_next_slot_get+0x80>
    7e60:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    7e64:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7e66:	fb0a 8000 	mla	r0, sl, r0, r8
    7e6a:	fa0f fe81 	sxth.w	lr, r1
    7e6e:	6845      	ldr	r5, [r0, #4]
    7e70:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    7e74:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    7e78:	78fc      	ldrb	r4, [r7, #3]
    7e7a:	1c66      	adds	r6, r4, #1
    7e7c:	b2f6      	uxtb	r6, r6
		last = 0;
    7e7e:	42b5      	cmp	r5, r6
    7e80:	bf98      	it	ls
    7e82:	2600      	movls	r6, #0
	if (last == user->first) {
    7e84:	787d      	ldrb	r5, [r7, #1]
    7e86:	42b5      	cmp	r5, r6
    7e88:	d023      	beq.n	7ed2 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    7e8a:	f8d7 c004 	ldr.w	ip, [r7, #4]
    7e8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7e92:	0125      	lsls	r5, r4, #4
    7e94:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    7e98:	f04f 0e02 	mov.w	lr, #2
    7e9c:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    7ea0:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    7ea2:	9b08      	ldr	r3, [sp, #32]
    7ea4:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    7ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7ea8:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    7eaa:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    7eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    7eae:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    7eb0:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7eb2:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    7eb6:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7eb8:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7eba:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7ebc:	6a03      	ldr	r3, [r0, #32]
    7ebe:	4608      	mov	r0, r1
    7ec0:	4798      	blx	r3
    7ec2:	fb09 830a 	mla	r3, r9, sl, r8
    7ec6:	2200      	movs	r2, #0
    7ec8:	2104      	movs	r1, #4
    7eca:	47a8      	blx	r5
	return user_op->status;
    7ecc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7ed2:	2001      	movs	r0, #1
}
    7ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ed8:	200007cc 	.word	0x200007cc

00007edc <ticker_job_idle_get>:
{
    7edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7ee0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 7f50 <ticker_job_idle_get+0x74>
    7ee4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7ee8:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7eec:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7eee:	f8de 0004 	ldr.w	r0, [lr, #4]
    7ef2:	b20e      	sxth	r6, r1
    7ef4:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    7ef8:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7efc:	78fc      	ldrb	r4, [r7, #3]
    7efe:	1c65      	adds	r5, r4, #1
    7f00:	b2ed      	uxtb	r5, r5
		last = 0;
    7f02:	42a8      	cmp	r0, r5
    7f04:	bf98      	it	ls
    7f06:	2500      	movls	r5, #0
	if (last == user->first) {
    7f08:	7878      	ldrb	r0, [r7, #1]
    7f0a:	42a8      	cmp	r0, r5
    7f0c:	d01d      	beq.n	7f4a <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    7f0e:	6878      	ldr	r0, [r7, #4]
    7f10:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7f14:	0124      	lsls	r4, r4, #4
    7f16:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    7f18:	f04f 0c01 	mov.w	ip, #1
    7f1c:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    7f20:	20ff      	movs	r0, #255	; 0xff
    7f22:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7f24:	2002      	movs	r0, #2
    7f26:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7f28:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    7f2a:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    7f2c:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7f2e:	f8de 3020 	ldr.w	r3, [lr, #32]
    7f32:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    7f36:	4608      	mov	r0, r1
    7f38:	4798      	blx	r3
    7f3a:	fb08 930a 	mla	r3, r8, sl, r9
    7f3e:	2200      	movs	r2, #0
    7f40:	2104      	movs	r1, #4
    7f42:	47a0      	blx	r4
	return user_op->status;
    7f44:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7f4a:	2001      	movs	r0, #1
}
    7f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f50:	200007cc 	.word	0x200007cc

00007f54 <ticker_job_sched>:
{
    7f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7f58:	4c08      	ldr	r4, [pc, #32]	; (7f7c <ticker_job_sched+0x28>)
    7f5a:	252c      	movs	r5, #44	; 0x2c
    7f5c:	fb05 4300 	mla	r3, r5, r0, r4
{
    7f60:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7f62:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    7f64:	6a1b      	ldr	r3, [r3, #32]
    7f66:	4608      	mov	r0, r1
    7f68:	4798      	blx	r3
    7f6a:	fb06 4305 	mla	r3, r6, r5, r4
    7f6e:	46bc      	mov	ip, r7
    7f70:	2200      	movs	r2, #0
    7f72:	2104      	movs	r1, #4
}
    7f74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7f78:	4760      	bx	ip
    7f7a:	bf00      	nop
    7f7c:	200007cc 	.word	0x200007cc

00007f80 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    7f80:	f00a b83c 	b.w	11ffc <cntr_cnt_get>

00007f84 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7f84:	1a40      	subs	r0, r0, r1
}
    7f86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7f8a:	4770      	bx	lr

00007f8c <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    7f8c:	b508      	push	{r3, lr}
    7f8e:	4603      	mov	r3, r0
	if (addr_type > 1) {
    7f90:	2b01      	cmp	r3, #1
{
    7f92:	4608      	mov	r0, r1
	if (addr_type > 1) {
    7f94:	d80e      	bhi.n	7fb4 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    7f96:	b133      	cbz	r3, 7fa6 <ll_addr_get+0x1a>
		if (bdaddr) {
    7f98:	b119      	cbz	r1, 7fa2 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    7f9a:	2206      	movs	r2, #6
    7f9c:	4906      	ldr	r1, [pc, #24]	; (7fb8 <ll_addr_get+0x2c>)
    7f9e:	f7f9 fe2d 	bl	1bfc <memcpy>
		}

		return rnd_addr;
    7fa2:	4805      	ldr	r0, [pc, #20]	; (7fb8 <ll_addr_get+0x2c>)
    7fa4:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    7fa6:	b119      	cbz	r1, 7fb0 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    7fa8:	2206      	movs	r2, #6
    7faa:	4904      	ldr	r1, [pc, #16]	; (7fbc <ll_addr_get+0x30>)
    7fac:	f7f9 fe26 	bl	1bfc <memcpy>
	}

	return pub_addr;
    7fb0:	4802      	ldr	r0, [pc, #8]	; (7fbc <ll_addr_get+0x30>)
}
    7fb2:	bd08      	pop	{r3, pc}
		return NULL;
    7fb4:	2000      	movs	r0, #0
    7fb6:	bd08      	pop	{r3, pc}
    7fb8:	2000082a 	.word	0x2000082a
    7fbc:	20000824 	.word	0x20000824

00007fc0 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    7fc0:	b570      	push	{r4, r5, r6, lr}
    7fc2:	4606      	mov	r6, r0
    7fc4:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    7fc6:	f008 f8b3 	bl	10130 <ll_adv_is_enabled>
    7fca:	4604      	mov	r4, r0
    7fcc:	b110      	cbz	r0, 7fd4 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    7fce:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    7fd0:	4620      	mov	r0, r4
    7fd2:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    7fd4:	f008 f8c0 	bl	10158 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    7fd8:	f010 0f06 	tst.w	r0, #6
    7fdc:	d1f7      	bne.n	7fce <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7fde:	2206      	movs	r2, #6
    7fe0:	4629      	mov	r1, r5
	if (addr_type) {
    7fe2:	b11e      	cbz	r6, 7fec <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7fe4:	4802      	ldr	r0, [pc, #8]	; (7ff0 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    7fe6:	f7f9 fe09 	bl	1bfc <memcpy>
    7fea:	e7f1      	b.n	7fd0 <ll_addr_set+0x10>
    7fec:	4801      	ldr	r0, [pc, #4]	; (7ff4 <ll_addr_set+0x34>)
    7fee:	e7fa      	b.n	7fe6 <ll_addr_set+0x26>
    7ff0:	2000082a 	.word	0x2000082a
    7ff4:	20000824 	.word	0x20000824

00007ff8 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    7ff8:	2300      	movs	r3, #0
    7ffa:	7003      	strb	r3, [r0, #0]
	*max = 0;
    7ffc:	700b      	strb	r3, [r1, #0]
    7ffe:	4770      	bx	lr

00008000 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    8000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8002:	4607      	mov	r7, r0
    8004:	460e      	mov	r6, r1
	while (len) {
    8006:	460c      	mov	r4, r1
    8008:	1b35      	subs	r5, r6, r4
    800a:	443d      	add	r5, r7
    800c:	b18c      	cbz	r4, 8032 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    800e:	f7f8 ffe9 	bl	fe4 <sys_rand32_get>

		if (len >= sizeof(v)) {
    8012:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    8014:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    8016:	d907      	bls.n	8028 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    8018:	2204      	movs	r2, #4
    801a:	eb0d 0102 	add.w	r1, sp, r2
    801e:	4628      	mov	r0, r5
    8020:	f7f9 fdec 	bl	1bfc <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    8024:	3c04      	subs	r4, #4
    8026:	e7ef      	b.n	8008 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    8028:	4622      	mov	r2, r4
    802a:	a901      	add	r1, sp, #4
    802c:	4628      	mov	r0, r5
    802e:	f7f9 fde5 	bl	1bfc <memcpy>
			break;
		}
	}

	return 0;
}
    8032:	2000      	movs	r0, #0
    8034:	b003      	add	sp, #12
    8036:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008038 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    8038:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    803a:	2300      	movs	r3, #0
    803c:	f00a f812 	bl	12064 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    8040:	2000      	movs	r0, #0
    8042:	bd08      	pop	{r3, pc}

00008044 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    8044:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    8046:	4802      	ldr	r0, [pc, #8]	; (8050 <_hci_driver_init+0xc>)
    8048:	f7fb fc46 	bl	38d8 <bt_hci_driver_register>

	return 0;
}
    804c:	2000      	movs	r0, #0
    804e:	bd08      	pop	{r3, pc}
    8050:	0001675c 	.word	0x0001675c

00008054 <recv_thread>:
{
    8054:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    8056:	4d28      	ldr	r5, [pc, #160]	; (80f8 <recv_thread+0xa4>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    8058:	2600      	movs	r6, #0
    805a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    805e:	4628      	mov	r0, r5
    8060:	f00b fc2c 	bl	138bc <_impl_k_queue_get>
		if (node_rx && !buf) {
    8064:	4604      	mov	r4, r0
    8066:	2800      	cmp	r0, #0
    8068:	d036      	beq.n	80d8 <recv_thread+0x84>
	s8_t class = hci_get_class(node_rx);
    806a:	f001 fd0f 	bl	9a8c <hci_get_class>
	switch (class) {
    806e:	1e03      	subs	r3, r0, #0
    8070:	9403      	str	r4, [sp, #12]
    8072:	db03      	blt.n	807c <recv_thread+0x28>
    8074:	2b02      	cmp	r3, #2
    8076:	dd10      	ble.n	809a <recv_thread+0x46>
    8078:	2b03      	cmp	r3, #3
    807a:	d030      	beq.n	80de <recv_thread+0x8a>
		LL_ASSERT(0);
    807c:	4b1f      	ldr	r3, [pc, #124]	; (80fc <recv_thread+0xa8>)
    807e:	9301      	str	r3, [sp, #4]
    8080:	9300      	str	r3, [sp, #0]
    8082:	4a1f      	ldr	r2, [pc, #124]	; (8100 <recv_thread+0xac>)
    8084:	4b1f      	ldr	r3, [pc, #124]	; (8104 <recv_thread+0xb0>)
    8086:	4920      	ldr	r1, [pc, #128]	; (8108 <recv_thread+0xb4>)
    8088:	4820      	ldr	r0, [pc, #128]	; (810c <recv_thread+0xb8>)
    808a:	f7f8 ff7f 	bl	f8c <printk>
    808e:	4040      	eors	r0, r0
    8090:	f380 8811 	msr	BASEPRI, r0
    8094:	f04f 0004 	mov.w	r0, #4
    8098:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    809a:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    809c:	bf0e      	itee	eq
    809e:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    80a0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    80a4:	2001      	movne	r0, #1
    80a6:	f7fb fd03 	bl	3ab0 <bt_buf_get_rx>
    80aa:	4604      	mov	r4, r0
		if (buf) {
    80ac:	b118      	cbz	r0, 80b6 <recv_thread+0x62>
			hci_evt_encode(node_rx, buf);
    80ae:	4601      	mov	r1, r0
    80b0:	9803      	ldr	r0, [sp, #12]
    80b2:	f001 f935 	bl	9320 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    80b6:	9b03      	ldr	r3, [sp, #12]
    80b8:	2100      	movs	r1, #0
    80ba:	88d8      	ldrh	r0, [r3, #6]
    80bc:	f008 fcb6 	bl	10a2c <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    80c0:	a804      	add	r0, sp, #16
    80c2:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    80c6:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    80c8:	f008 fc3a 	bl	10940 <ll_rx_mem_release>
		if (buf) {
    80cc:	b124      	cbz	r4, 80d8 <recv_thread+0x84>
			if (buf->len) {
    80ce:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    80d0:	4620      	mov	r0, r4
			if (buf->len) {
    80d2:	b173      	cbz	r3, 80f2 <recv_thread+0x9e>
				bt_recv(buf);
    80d4:	f7fa ff90 	bl	2ff8 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    80d8:	f00b fe52 	bl	13d80 <_impl_k_yield>
    80dc:	e7bd      	b.n	805a <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    80de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    80e2:	f7fb fce5 	bl	3ab0 <bt_buf_get_rx>
    80e6:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    80e8:	4601      	mov	r1, r0
    80ea:	9803      	ldr	r0, [sp, #12]
    80ec:	f001 f8d8 	bl	92a0 <hci_acl_encode>
    80f0:	e7e1      	b.n	80b6 <recv_thread+0x62>
				net_buf_unref(buf);
    80f2:	f00a fded 	bl	12cd0 <net_buf_unref>
    80f6:	e7ef      	b.n	80d8 <recv_thread+0x84>
    80f8:	20003f24 	.word	0x20003f24
    80fc:	0001496d 	.word	0x0001496d
    8100:	000156bc 	.word	0x000156bc
    8104:	0001672e 	.word	0x0001672e
    8108:	0001570b 	.word	0x0001570b
    810c:	0001565b 	.word	0x0001565b

00008110 <hci_driver_send>:
{
    8110:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    8112:	8983      	ldrh	r3, [r0, #12]
{
    8114:	b087      	sub	sp, #28
    8116:	4605      	mov	r5, r0
	if (!buf->len) {
    8118:	b96b      	cbnz	r3, 8136 <hci_driver_send+0x26>
		BT_ERR("Empty HCI packet");
    811a:	4b20      	ldr	r3, [pc, #128]	; (819c <hci_driver_send+0x8c>)
    811c:	9301      	str	r3, [sp, #4]
    811e:	9300      	str	r3, [sp, #0]
    8120:	4a1f      	ldr	r2, [pc, #124]	; (81a0 <hci_driver_send+0x90>)
    8122:	4b20      	ldr	r3, [pc, #128]	; (81a4 <hci_driver_send+0x94>)
    8124:	4920      	ldr	r1, [pc, #128]	; (81a8 <hci_driver_send+0x98>)
    8126:	4821      	ldr	r0, [pc, #132]	; (81ac <hci_driver_send+0x9c>)
    8128:	f7f8 ff30 	bl	f8c <printk>
		return -EINVAL;
    812c:	f06f 0415 	mvn.w	r4, #21
}
    8130:	4620      	mov	r0, r4
    8132:	b007      	add	sp, #28
    8134:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    8136:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    8138:	b183      	cbz	r3, 815c <hci_driver_send+0x4c>
    813a:	2b02      	cmp	r3, #2
    813c:	d11f      	bne.n	817e <hci_driver_send+0x6e>
	err = hci_acl_handle(buf, &evt);
    813e:	a905      	add	r1, sp, #20
    8140:	f001 f81e 	bl	9180 <hci_acl_handle>
    8144:	4604      	mov	r4, r0
	if (evt) {
    8146:	9805      	ldr	r0, [sp, #20]
    8148:	b108      	cbz	r0, 814e <hci_driver_send+0x3e>
		bt_recv_prio(evt);
    814a:	f7fb fad9 	bl	3700 <bt_recv_prio>
	if (!err) {
    814e:	2c00      	cmp	r4, #0
    8150:	d1ee      	bne.n	8130 <hci_driver_send+0x20>
		net_buf_unref(buf);
    8152:	4628      	mov	r0, r5
    8154:	f00a fdbc 	bl	12cd0 <net_buf_unref>
    8158:	2400      	movs	r4, #0
    815a:	e7e9      	b.n	8130 <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    815c:	f000 faaa 	bl	86b4 <hci_cmd_handle>
	if (evt) {
    8160:	4602      	mov	r2, r0
    8162:	2800      	cmp	r0, #0
    8164:	d0f5      	beq.n	8152 <hci_driver_send+0x42>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    8166:	6883      	ldr	r3, [r0, #8]
    8168:	7819      	ldrb	r1, [r3, #0]
    816a:	2913      	cmp	r1, #19
    816c:	d812      	bhi.n	8194 <hci_driver_send+0x84>
    816e:	2301      	movs	r3, #1
    8170:	408b      	lsls	r3, r1
    8172:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    8176:	d00d      	beq.n	8194 <hci_driver_send+0x84>
			bt_recv_prio(evt);
    8178:	f7fb fac2 	bl	3700 <bt_recv_prio>
    817c:	e7e9      	b.n	8152 <hci_driver_send+0x42>
		BT_ERR("Unknown HCI type %u", type);
    817e:	4a07      	ldr	r2, [pc, #28]	; (819c <hci_driver_send+0x8c>)
    8180:	9202      	str	r2, [sp, #8]
    8182:	e88d 000c 	stmia.w	sp, {r2, r3}
    8186:	4908      	ldr	r1, [pc, #32]	; (81a8 <hci_driver_send+0x98>)
    8188:	4b06      	ldr	r3, [pc, #24]	; (81a4 <hci_driver_send+0x94>)
    818a:	4a05      	ldr	r2, [pc, #20]	; (81a0 <hci_driver_send+0x90>)
    818c:	4808      	ldr	r0, [pc, #32]	; (81b0 <hci_driver_send+0xa0>)
    818e:	f7f8 fefd 	bl	f8c <printk>
    8192:	e7cb      	b.n	812c <hci_driver_send+0x1c>
			bt_recv(evt);
    8194:	4610      	mov	r0, r2
    8196:	f7fa ff2f 	bl	2ff8 <bt_recv>
    819a:	e7da      	b.n	8152 <hci_driver_send+0x42>
    819c:	0001496d 	.word	0x0001496d
    81a0:	000156bc 	.word	0x000156bc
    81a4:	0001673a 	.word	0x0001673a
    81a8:	0001570b 	.word	0x0001570b
    81ac:	0001679d 	.word	0x0001679d
    81b0:	000167be 	.word	0x000167be

000081b4 <prio_recv_thread>:
{
    81b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    81b6:	4d14      	ldr	r5, [pc, #80]	; (8208 <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    81b8:	4e14      	ldr	r6, [pc, #80]	; (820c <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    81ba:	f10d 0102 	add.w	r1, sp, #2
    81be:	a801      	add	r0, sp, #4
    81c0:	f008 fb86 	bl	108d0 <ll_rx_get>
    81c4:	4604      	mov	r4, r0
    81c6:	b940      	cbnz	r0, 81da <prio_recv_thread+0x26>
		if (node_rx) {
    81c8:	9b01      	ldr	r3, [sp, #4]
    81ca:	b1bb      	cbz	r3, 81fc <prio_recv_thread+0x48>
			ll_rx_dequeue();
    81cc:	f008 fe62 	bl	10e94 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    81d0:	9901      	ldr	r1, [sp, #4]
    81d2:	4630      	mov	r0, r6
    81d4:	f00b fb4e 	bl	13874 <k_queue_append>
    81d8:	e7ef      	b.n	81ba <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    81da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    81de:	2001      	movs	r0, #1
    81e0:	f7fb fc66 	bl	3ab0 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    81e4:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    81e6:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    81e8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    81ec:	f001 fc3a 	bl	9a64 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    81f0:	4638      	mov	r0, r7
    81f2:	f7fb fa85 	bl	3700 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    81f6:	f00b fdc3 	bl	13d80 <_impl_k_yield>
    81fa:	e7de      	b.n	81ba <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    81fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8200:	4628      	mov	r0, r5
    8202:	f00b fe24 	bl	13e4e <_impl_k_sem_take>
    8206:	e7d8      	b.n	81ba <prio_recv_thread+0x6>
    8208:	20003f0c 	.word	0x20003f0c
    820c:	20003f24 	.word	0x20003f24

00008210 <hci_driver_open>:
{
    8210:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    8212:	481a      	ldr	r0, [pc, #104]	; (827c <hci_driver_open+0x6c>)
{
    8214:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    8216:	f008 ff1b 	bl	11050 <ll_init>
	if (err) {
    821a:	4604      	mov	r4, r0
    821c:	b160      	cbz	r0, 8238 <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    821e:	4b18      	ldr	r3, [pc, #96]	; (8280 <hci_driver_open+0x70>)
    8220:	9302      	str	r3, [sp, #8]
    8222:	e88d 0018 	stmia.w	sp, {r3, r4}
    8226:	4a17      	ldr	r2, [pc, #92]	; (8284 <hci_driver_open+0x74>)
    8228:	4b17      	ldr	r3, [pc, #92]	; (8288 <hci_driver_open+0x78>)
    822a:	4918      	ldr	r1, [pc, #96]	; (828c <hci_driver_open+0x7c>)
    822c:	4818      	ldr	r0, [pc, #96]	; (8290 <hci_driver_open+0x80>)
    822e:	f7f8 fead 	bl	f8c <printk>
}
    8232:	4620      	mov	r0, r4
    8234:	b006      	add	sp, #24
    8236:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    8238:	f001 fc40 	bl	9abc <hci_init>

    823c:	f06f 0309 	mvn.w	r3, #9
    8240:	9303      	str	r3, [sp, #12]
    8242:	9405      	str	r4, [sp, #20]
    8244:	9404      	str	r4, [sp, #16]
    8246:	9402      	str	r4, [sp, #8]
    8248:	9401      	str	r4, [sp, #4]
    824a:	9400      	str	r4, [sp, #0]
    824c:	4b11      	ldr	r3, [pc, #68]	; (8294 <hci_driver_open+0x84>)
    824e:	4912      	ldr	r1, [pc, #72]	; (8298 <hci_driver_open+0x88>)
    8250:	4812      	ldr	r0, [pc, #72]	; (829c <hci_driver_open+0x8c>)
    8252:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    8256:	f00b ffcf 	bl	141f8 <_impl_k_thread_create>
    825a:	f06f 0307 	mvn.w	r3, #7
    825e:	9303      	str	r3, [sp, #12]
    8260:	9405      	str	r4, [sp, #20]
    8262:	9404      	str	r4, [sp, #16]
    8264:	9402      	str	r4, [sp, #8]
    8266:	9401      	str	r4, [sp, #4]
    8268:	9400      	str	r4, [sp, #0]
    826a:	4b0d      	ldr	r3, [pc, #52]	; (82a0 <hci_driver_open+0x90>)
    826c:	490d      	ldr	r1, [pc, #52]	; (82a4 <hci_driver_open+0x94>)
    826e:	480e      	ldr	r0, [pc, #56]	; (82a8 <hci_driver_open+0x98>)
    8270:	f240 522c 	movw	r2, #1324	; 0x52c
    8274:	f00b ffc0 	bl	141f8 <_impl_k_thread_create>
    8278:	e7db      	b.n	8232 <hci_driver_open+0x22>
    827a:	bf00      	nop
    827c:	20003f0c 	.word	0x20003f0c
    8280:	0001496d 	.word	0x0001496d
    8284:	000156bc 	.word	0x000156bc
    8288:	0001674a 	.word	0x0001674a
    828c:	0001570b 	.word	0x0001570b
    8290:	00016770 	.word	0x00016770
    8294:	000081b5 	.word	0x000081b5
    8298:	200020c8 	.word	0x200020c8
    829c:	200018a8 	.word	0x200018a8
    82a0:	00008055 	.word	0x00008055
    82a4:	200023b8 	.word	0x200023b8
    82a8:	20001838 	.word	0x20001838

000082ac <sys_put_le32>:
	dst[1] = val >> 8;
    82ac:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    82b0:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    82b2:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    82b4:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    82b6:	0a00      	lsrs	r0, r0, #8
    82b8:	704b      	strb	r3, [r1, #1]
    82ba:	70c8      	strb	r0, [r1, #3]
    82bc:	4770      	bx	lr

000082be <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    82be:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    82c0:	3008      	adds	r0, #8
{
    82c2:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    82c4:	2102      	movs	r1, #2
{
    82c6:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    82c8:	f00a fd34 	bl	12d34 <net_buf_simple_add>
	hdr->evt = evt;
    82cc:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    82ce:	7044      	strb	r4, [r0, #1]
    82d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000082d4 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    82d4:	b538      	push	{r3, r4, r5, lr}
    82d6:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    82d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    82dc:	f7fb fbf8 	bl	3ad0 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    82e0:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    82e2:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    82e4:	210f      	movs	r1, #15
    82e6:	f7ff ffea 	bl	82be <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    82ea:	2104      	movs	r1, #4
    82ec:	f104 0008 	add.w	r0, r4, #8
    82f0:	f00a fd20 	bl	12d34 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    82f4:	2301      	movs	r3, #1
    82f6:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    82f8:	4b02      	ldr	r3, [pc, #8]	; (8304 <cmd_status+0x30>)
	cs->status = status;
    82fa:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    82fc:	881b      	ldrh	r3, [r3, #0]
    82fe:	8043      	strh	r3, [r0, #2]

	return buf;
}
    8300:	4620      	mov	r0, r4
    8302:	bd38      	pop	{r3, r4, r5, pc}
    8304:	20000830 	.word	0x20000830

00008308 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    8308:	b570      	push	{r4, r5, r6, lr}
    830a:	4604      	mov	r4, r0
    830c:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    830e:	3201      	adds	r2, #1
{
    8310:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    8312:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    8314:	b2d2      	uxtb	r2, r2
    8316:	213e      	movs	r1, #62	; 0x3e
    8318:	f7ff ffd1 	bl	82be <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    831c:	2101      	movs	r1, #1
    831e:	4620      	mov	r0, r4
    8320:	f00a fd08 	bl	12d34 <net_buf_simple_add>
	me->subevent = subevt;
    8324:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    8326:	4629      	mov	r1, r5
    8328:	4620      	mov	r0, r4
}
    832a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    832e:	f00a bd01 	b.w	12d34 <net_buf_simple_add>
	...

00008334 <cmd_complete>:
{
    8334:	b538      	push	{r3, r4, r5, lr}
    8336:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    833c:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    833e:	f7fb fbc7 	bl	3ad0 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    8342:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8344:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    8346:	b2d2      	uxtb	r2, r2
    8348:	210e      	movs	r1, #14
    834a:	f7ff ffb8 	bl	82be <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    834e:	6820      	ldr	r0, [r4, #0]
    8350:	2103      	movs	r1, #3
    8352:	3008      	adds	r0, #8
    8354:	f00a fcee 	bl	12d34 <net_buf_simple_add>
	cc->ncmd = 1;
    8358:	2301      	movs	r3, #1
    835a:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    835c:	4b05      	ldr	r3, [pc, #20]	; (8374 <cmd_complete+0x40>)
    835e:	881b      	ldrh	r3, [r3, #0]
    8360:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    8364:	6820      	ldr	r0, [r4, #0]
    8366:	4629      	mov	r1, r5
    8368:	3008      	adds	r0, #8
}
    836a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    836e:	f00a bce1 	b.w	12d34 <net_buf_simple_add>
    8372:	bf00      	nop
    8374:	20000830 	.word	0x20000830

00008378 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8378:	4b0e      	ldr	r3, [pc, #56]	; (83b4 <encrypt_change+0x3c>)
{
    837a:	b570      	push	{r4, r5, r6, lr}
    837c:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    837e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8382:	2300      	movs	r3, #0
    8384:	f002 0280 	and.w	r2, r2, #128	; 0x80
    8388:	4313      	orrs	r3, r2
{
    838a:	4604      	mov	r4, r0
    838c:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    838e:	d010      	beq.n	83b2 <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    8390:	2204      	movs	r2, #4
    8392:	2108      	movs	r1, #8
    8394:	4628      	mov	r0, r5
    8396:	f7ff ff92 	bl	82be <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    839a:	2104      	movs	r1, #4
    839c:	f105 0008 	add.w	r0, r5, #8
    83a0:	f00a fcc8 	bl	12d34 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    83a4:	fab4 f384 	clz	r3, r4
    83a8:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    83aa:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    83ac:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    83b0:	70c3      	strb	r3, [r0, #3]
    83b2:	bd70      	pop	{r4, r5, r6, pc}
    83b4:	20003d30 	.word	0x20003d30

000083b8 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    83b8:	b570      	push	{r4, r5, r6, lr}
    83ba:	4604      	mov	r4, r0
    83bc:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    83be:	4b13      	ldr	r3, [pc, #76]	; (840c <le_remote_feat_complete+0x54>)
{
    83c0:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    83c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    83c6:	2200      	movs	r2, #0
    83c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    83cc:	4313      	orrs	r3, r2
{
    83ce:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    83d0:	d01b      	beq.n	840a <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    83d2:	4b0f      	ldr	r3, [pc, #60]	; (8410 <le_remote_feat_complete+0x58>)
    83d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    83d8:	2300      	movs	r3, #0
    83da:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    83de:	4313      	orrs	r3, r2
    83e0:	d013      	beq.n	840a <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    83e2:	220b      	movs	r2, #11
    83e4:	2104      	movs	r1, #4
    83e6:	f7ff ff8f 	bl	8308 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    83ea:	2208      	movs	r2, #8
	sep->status = status;
    83ec:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    83ee:	f8a0 6001 	strh.w	r6, [r0, #1]
    83f2:	3003      	adds	r0, #3
	if (!status) {
    83f4:	b924      	cbnz	r4, 8400 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    83f6:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    83f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    83fc:	f7f9 bbfe 	b.w	1bfc <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    8400:	2100      	movs	r1, #0
}
    8402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    8406:	f7f9 bc25 	b.w	1c54 <memset>
    840a:	bd70      	pop	{r4, r5, r6, pc}
    840c:	20003d30 	.word	0x20003d30
    8410:	20003d38 	.word	0x20003d38

00008414 <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8418:	4605      	mov	r5, r0
    841a:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    841c:	4b46      	ldr	r3, [pc, #280]	; (8538 <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    841e:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8420:	e9d3 2300 	ldrd	r2, r3, [r3]
    8424:	f240 2801 	movw	r8, #513	; 0x201
    8428:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    842c:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8430:	ea03 0309 	and.w	r3, r3, r9
    8434:	ea02 0208 	and.w	r2, r2, r8
    8438:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    843a:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    843c:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8440:	d077      	beq.n	8532 <le_conn_complete.part.39+0x11e>
	if (!status) {
    8442:	2d00      	cmp	r5, #0
    8444:	d150      	bne.n	84e8 <le_conn_complete.part.39+0xd4>
		conn_count++;
    8446:	4a3d      	ldr	r2, [pc, #244]	; (853c <le_conn_complete.part.39+0x128>)
    8448:	6813      	ldr	r3, [r2, #0]
    844a:	3301      	adds	r3, #1
    844c:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    844e:	ea5a 030b 	orrs.w	r3, sl, fp
    8452:	f101 0803 	add.w	r8, r1, #3
    8456:	d151      	bne.n	84fc <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8458:	2212      	movs	r2, #18
    845a:	2101      	movs	r1, #1
    845c:	f7ff ff54 	bl	8308 <meta_evt>
	lecc->status = 0x00;
    8460:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    8462:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    8466:	7863      	ldrb	r3, [r4, #1]
    8468:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    846a:	78a3      	ldrb	r3, [r4, #2]
    846c:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    846e:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    8470:	2206      	movs	r2, #6
    8472:	4641      	mov	r1, r8
    8474:	3005      	adds	r0, #5
    8476:	f7f9 fbc1 	bl	1bfc <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    847a:	8ae3      	ldrh	r3, [r4, #22]
    847c:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    8480:	8b23      	ldrh	r3, [r4, #24]
    8482:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    8486:	8b63      	ldrh	r3, [r4, #26]
    8488:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    848c:	7f23      	ldrb	r3, [r4, #28]
    848e:	747b      	strb	r3, [r7, #17]
    8490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8494:	221e      	movs	r2, #30
    8496:	210a      	movs	r1, #10
    8498:	f7ff ff36 	bl	8308 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    849c:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    849e:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    84a0:	2100      	movs	r1, #0
    84a2:	f7f9 fbd7 	bl	1c54 <memset>
		lecc->status = status;
    84a6:	7025      	strb	r5, [r4, #0]
    84a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    84ac:	7d63      	ldrb	r3, [r4, #21]
    84ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    84b2:	2b40      	cmp	r3, #64	; 0x40
    84b4:	d138      	bne.n	8528 <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    84b6:	2206      	movs	r2, #6
    84b8:	f104 0110 	add.w	r1, r4, #16
    84bc:	f7f9 fb9e 	bl	1bfc <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    84c0:	2206      	movs	r2, #6
    84c2:	f104 0109 	add.w	r1, r4, #9
    84c6:	f107 0011 	add.w	r0, r7, #17
    84ca:	f7f9 fb97 	bl	1bfc <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    84ce:	8ae3      	ldrh	r3, [r4, #22]
    84d0:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    84d4:	8b23      	ldrh	r3, [r4, #24]
    84d6:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    84da:	8b63      	ldrh	r3, [r4, #26]
    84dc:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    84e0:	7f23      	ldrb	r3, [r4, #28]
    84e2:	777b      	strb	r3, [r7, #29]
    84e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    84e8:	ea5a 030b 	orrs.w	r3, sl, fp
    84ec:	d1d2      	bne.n	8494 <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    84ee:	2212      	movs	r2, #18
    84f0:	2101      	movs	r1, #1
    84f2:	f7ff ff09 	bl	8308 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    84f6:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    84f8:	4604      	mov	r4, r0
    84fa:	e7d1      	b.n	84a0 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    84fc:	221e      	movs	r2, #30
    84fe:	210a      	movs	r1, #10
    8500:	f7ff ff02 	bl	8308 <meta_evt>
		leecc->status = 0x00;
    8504:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    8506:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    850a:	7863      	ldrb	r3, [r4, #1]
    850c:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    850e:	78a3      	ldrb	r3, [r4, #2]
    8510:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8512:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    8514:	2206      	movs	r2, #6
    8516:	4641      	mov	r1, r8
    8518:	3005      	adds	r0, #5
    851a:	f7f9 fb6f 	bl	1bfc <memcpy>
		if ((radio_cc->own_addr_type) &&
    851e:	7be3      	ldrb	r3, [r4, #15]
    8520:	f107 000b 	add.w	r0, r7, #11
    8524:	2b00      	cmp	r3, #0
    8526:	d1c1      	bne.n	84ac <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    8528:	2206      	movs	r2, #6
    852a:	2100      	movs	r1, #0
    852c:	f7f9 fb92 	bl	1c54 <memset>
    8530:	e7c6      	b.n	84c0 <le_conn_complete.part.39+0xac>
    8532:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8536:	bf00      	nop
    8538:	20003d38 	.word	0x20003d38
    853c:	20000834 	.word	0x20000834

00008540 <bt_addr_le_to_str.constprop.70>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8540:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    8542:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8544:	b08a      	sub	sp, #40	; 0x28
    8546:	4604      	mov	r4, r0
    8548:	460e      	mov	r6, r1
    854a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    854c:	2b03      	cmp	r3, #3
    854e:	d820      	bhi.n	8592 <bt_addr_le_to_str.constprop.70+0x52>
    8550:	e8df f003 	tbb	[pc, r3]
    8554:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    8558:	4911      	ldr	r1, [pc, #68]	; (85a0 <bt_addr_le_to_str.constprop.70+0x60>)
		strcpy(type, "random");
    855a:	4628      	mov	r0, r5
    855c:	f7f9 fb1a 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8560:	7862      	ldrb	r2, [r4, #1]
    8562:	9204      	str	r2, [sp, #16]
    8564:	78a2      	ldrb	r2, [r4, #2]
    8566:	9203      	str	r2, [sp, #12]
    8568:	78e2      	ldrb	r2, [r4, #3]
    856a:	9202      	str	r2, [sp, #8]
    856c:	7922      	ldrb	r2, [r4, #4]
    856e:	9201      	str	r2, [sp, #4]
    8570:	7962      	ldrb	r2, [r4, #5]
    8572:	9200      	str	r2, [sp, #0]
    8574:	79a3      	ldrb	r3, [r4, #6]
    8576:	9505      	str	r5, [sp, #20]
    8578:	4a0a      	ldr	r2, [pc, #40]	; (85a4 <bt_addr_le_to_str.constprop.70+0x64>)
    857a:	211b      	movs	r1, #27
    857c:	4630      	mov	r0, r6
    857e:	f7f8 fd13 	bl	fa8 <snprintk>
}
    8582:	b00a      	add	sp, #40	; 0x28
    8584:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    8586:	4908      	ldr	r1, [pc, #32]	; (85a8 <bt_addr_le_to_str.constprop.70+0x68>)
    8588:	e7e7      	b.n	855a <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "public id");
    858a:	4908      	ldr	r1, [pc, #32]	; (85ac <bt_addr_le_to_str.constprop.70+0x6c>)
    858c:	e7e5      	b.n	855a <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "random id");
    858e:	4908      	ldr	r1, [pc, #32]	; (85b0 <bt_addr_le_to_str.constprop.70+0x70>)
    8590:	e7e3      	b.n	855a <bt_addr_le_to_str.constprop.70+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    8592:	4a08      	ldr	r2, [pc, #32]	; (85b4 <bt_addr_le_to_str.constprop.70+0x74>)
    8594:	210a      	movs	r1, #10
    8596:	4628      	mov	r0, r5
    8598:	f7f8 fd06 	bl	fa8 <snprintk>
    859c:	e7e0      	b.n	8560 <bt_addr_le_to_str.constprop.70+0x20>
    859e:	bf00      	nop
    85a0:	000148d9 	.word	0x000148d9
    85a4:	00014902 	.word	0x00014902
    85a8:	000148e0 	.word	0x000148e0
    85ac:	000148e7 	.word	0x000148e7
    85b0:	000148f1 	.word	0x000148f1
    85b4:	000148fb 	.word	0x000148fb

000085b8 <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    85b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85bc:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    85be:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    85c0:	4d32      	ldr	r5, [pc, #200]	; (868c <le_adv_ext_report.isra.66+0xd4>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    85c2:	b092      	sub	sp, #72	; 0x48
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    85c4:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    85c6:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    85c8:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    85ca:	9003      	str	r0, [sp, #12]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    85cc:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    85ce:	b25b      	sxtb	r3, r3
    85d0:	9306      	str	r3, [sp, #24]
    85d2:	7823      	ldrb	r3, [r4, #0]
    85d4:	9201      	str	r2, [sp, #4]
    85d6:	09d9      	lsrs	r1, r3, #7
    85d8:	9105      	str	r1, [sp, #20]
    85da:	f3c3 1180 	ubfx	r1, r3, #6, #1
    85de:	f003 030f 	and.w	r3, r3, #15
    85e2:	9104      	str	r1, [sp, #16]
    85e4:	9302      	str	r3, [sp, #8]
    85e6:	9500      	str	r5, [sp, #0]
    85e8:	4b29      	ldr	r3, [pc, #164]	; (8690 <le_adv_ext_report.isra.66+0xd8>)
    85ea:	4a2a      	ldr	r2, [pc, #168]	; (8694 <le_adv_ext_report.isra.66+0xdc>)
    85ec:	492a      	ldr	r1, [pc, #168]	; (8698 <le_adv_ext_report.isra.66+0xe0>)
    85ee:	482b      	ldr	r0, [pc, #172]	; (869c <le_adv_ext_report.isra.66+0xe4>)
    85f0:	f7f8 fccc 	bl	f8c <printk>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    85f4:	7823      	ldrb	r3, [r4, #0]
    85f6:	f003 030f 	and.w	r3, r3, #15
    85fa:	2b07      	cmp	r3, #7
    85fc:	d143      	bne.n	8686 <le_adv_ext_report.isra.66+0xce>
    85fe:	7863      	ldrb	r3, [r4, #1]
    8600:	2b00      	cmp	r3, #0
    8602:	d040      	beq.n	8686 <le_adv_ext_report.isra.66+0xce>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    8604:	78a3      	ldrb	r3, [r4, #2]
    8606:	4924      	ldr	r1, [pc, #144]	; (8698 <le_adv_ext_report.isra.66+0xe0>)
    8608:	9503      	str	r5, [sp, #12]
    860a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    860e:	099b      	lsrs	r3, r3, #6
    8610:	9202      	str	r2, [sp, #8]
    8612:	9301      	str	r3, [sp, #4]
    8614:	9500      	str	r5, [sp, #0]
    8616:	4b1e      	ldr	r3, [pc, #120]	; (8690 <le_adv_ext_report.isra.66+0xd8>)
    8618:	4a1e      	ldr	r2, [pc, #120]	; (8694 <le_adv_ext_report.isra.66+0xdc>)
    861a:	4821      	ldr	r0, [pc, #132]	; (86a0 <le_adv_ext_report.isra.66+0xe8>)
    861c:	f7f8 fcb6 	bl	f8c <printk>
		if (!p->ext_hdr_len) {
    8620:	78a3      	ldrb	r3, [r4, #2]
    8622:	0699      	lsls	r1, r3, #26
    8624:	d02f      	beq.n	8686 <le_adv_ext_report.isra.66+0xce>
		if (h->adv_addr) {
    8626:	78e3      	ldrb	r3, [r4, #3]
    8628:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    862a:	f104 0604 	add.w	r6, r4, #4
		if (h->adv_addr) {
    862e:	d51c      	bpl.n	866a <le_adv_ext_report.isra.66+0xb2>
			addr.type = adv->tx_addr;
    8630:	7823      	ldrb	r3, [r4, #0]
    8632:	af12      	add	r7, sp, #72	; 0x48
    8634:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8638:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    863c:	2206      	movs	r2, #6
    863e:	4631      	mov	r1, r6
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8640:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8644:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    8648:	f7f9 fad8 	bl	1bfc <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    864c:	4641      	mov	r1, r8
    864e:	4638      	mov	r0, r7
    8650:	f7ff ff76 	bl	8540 <bt_addr_le_to_str.constprop.70>
			BT_WARN("AdvA: %s", addr_str);
    8654:	9502      	str	r5, [sp, #8]
    8656:	e88d 0120 	stmia.w	sp, {r5, r8}
    865a:	4b0d      	ldr	r3, [pc, #52]	; (8690 <le_adv_ext_report.isra.66+0xd8>)
    865c:	4a0d      	ldr	r2, [pc, #52]	; (8694 <le_adv_ext_report.isra.66+0xdc>)
    865e:	490e      	ldr	r1, [pc, #56]	; (8698 <le_adv_ext_report.isra.66+0xe0>)
    8660:	4810      	ldr	r0, [pc, #64]	; (86a4 <le_adv_ext_report.isra.66+0xec>)
			ptr += BDADDR_SIZE;
    8662:	f104 060a 	add.w	r6, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    8666:	f7f8 fc91 	bl	f8c <printk>
		if (h->tx_pwr) {
    866a:	78e3      	ldrb	r3, [r4, #3]
    866c:	065b      	lsls	r3, r3, #25
    866e:	d50a      	bpl.n	8686 <le_adv_ext_report.isra.66+0xce>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    8670:	9502      	str	r5, [sp, #8]
    8672:	f996 3000 	ldrsb.w	r3, [r6]
    8676:	9301      	str	r3, [sp, #4]
    8678:	9500      	str	r5, [sp, #0]
    867a:	4b05      	ldr	r3, [pc, #20]	; (8690 <le_adv_ext_report.isra.66+0xd8>)
    867c:	4a05      	ldr	r2, [pc, #20]	; (8694 <le_adv_ext_report.isra.66+0xdc>)
    867e:	4906      	ldr	r1, [pc, #24]	; (8698 <le_adv_ext_report.isra.66+0xe0>)
    8680:	4809      	ldr	r0, [pc, #36]	; (86a8 <le_adv_ext_report.isra.66+0xf0>)
    8682:	f7f8 fc83 	bl	f8c <printk>
}
    8686:	b012      	add	sp, #72	; 0x48
    8688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    868c:	0001496d 	.word	0x0001496d
    8690:	0001682c 	.word	0x0001682c
    8694:	00015704 	.word	0x00015704
    8698:	0001570b 	.word	0x0001570b
    869c:	00016a89 	.word	0x00016a89
    86a0:	00016ad6 	.word	0x00016ad6
    86a4:	00016b07 	.word	0x00016b07
    86a8:	00016b20 	.word	0x00016b20

000086ac <sys_get_le64>:
{
    86ac:	4603      	mov	r3, r0
}
    86ae:	6800      	ldr	r0, [r0, #0]
    86b0:	6859      	ldr	r1, [r3, #4]
    86b2:	4770      	bx	lr

000086b4 <hci_cmd_handle>:
{
    86b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    86b6:	8981      	ldrh	r1, [r0, #12]
{
    86b8:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    86ba:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    86bc:	2902      	cmp	r1, #2
{
    86be:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    86c0:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    86c2:	d80b      	bhi.n	86dc <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    86c4:	4bbe      	ldr	r3, [pc, #760]	; (89c0 <hci_cmd_handle+0x30c>)
    86c6:	9301      	str	r3, [sp, #4]
    86c8:	9300      	str	r3, [sp, #0]
    86ca:	4abe      	ldr	r2, [pc, #760]	; (89c4 <hci_cmd_handle+0x310>)
    86cc:	4bbe      	ldr	r3, [pc, #760]	; (89c8 <hci_cmd_handle+0x314>)
    86ce:	49bf      	ldr	r1, [pc, #764]	; (89cc <hci_cmd_handle+0x318>)
    86d0:	48bf      	ldr	r0, [pc, #764]	; (89d0 <hci_cmd_handle+0x31c>)
		BT_ERR("Invalid HCI CMD packet length");
    86d2:	f7f8 fc5b 	bl	f8c <printk>
		return NULL;
    86d6:	4628      	mov	r0, r5
}
    86d8:	b013      	add	sp, #76	; 0x4c
    86da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    86dc:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    86de:	4ebd      	ldr	r6, [pc, #756]	; (89d4 <hci_cmd_handle+0x320>)
    86e0:	781a      	ldrb	r2, [r3, #0]
    86e2:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    86e4:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    86e6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    86ea:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    86ec:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    86ee:	d907      	bls.n	8700 <hci_cmd_handle+0x4c>
		BT_ERR("Invalid HCI CMD packet length");
    86f0:	4bb3      	ldr	r3, [pc, #716]	; (89c0 <hci_cmd_handle+0x30c>)
    86f2:	9301      	str	r3, [sp, #4]
    86f4:	9300      	str	r3, [sp, #0]
    86f6:	4ab3      	ldr	r2, [pc, #716]	; (89c4 <hci_cmd_handle+0x310>)
    86f8:	4bb3      	ldr	r3, [pc, #716]	; (89c8 <hci_cmd_handle+0x314>)
    86fa:	49b4      	ldr	r1, [pc, #720]	; (89cc <hci_cmd_handle+0x318>)
    86fc:	48b6      	ldr	r0, [pc, #728]	; (89d8 <hci_cmd_handle+0x324>)
    86fe:	e7e8      	b.n	86d2 <hci_cmd_handle+0x1e>
	net_buf_pull(cmd, sizeof(*chdr));
    8700:	2103      	movs	r1, #3
    8702:	f104 0008 	add.w	r0, r4, #8
    8706:	f00a fb43 	bl	12d90 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    870a:	8833      	ldrh	r3, [r6, #0]
    870c:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    8710:	0a9b      	lsrs	r3, r3, #10
    8712:	2b04      	cmp	r3, #4
    8714:	f000 80bc 	beq.w	8890 <hci_cmd_handle+0x1dc>
    8718:	d809      	bhi.n	872e <hci_cmd_handle+0x7a>
    871a:	2b01      	cmp	r3, #1
    871c:	d026      	beq.n	876c <hci_cmd_handle+0xb8>
    871e:	2b03      	cmp	r3, #3
    8720:	d03b      	beq.n	879a <hci_cmd_handle+0xe6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    8722:	2101      	movs	r1, #1
    8724:	a807      	add	r0, sp, #28
    8726:	f7ff fe05 	bl	8334 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    872a:	2301      	movs	r3, #1
    872c:	e298      	b.n	8c60 <hci_cmd_handle+0x5ac>
	switch (BT_OGF(_opcode)) {
    872e:	2b08      	cmp	r3, #8
    8730:	f000 8168 	beq.w	8a04 <hci_cmd_handle+0x350>
    8734:	2b3f      	cmp	r3, #63	; 0x3f
    8736:	d1f4      	bne.n	8722 <hci_cmd_handle+0x6e>
	switch (ocf) {
    8738:	3a01      	subs	r2, #1
    873a:	2a09      	cmp	r2, #9
    873c:	d8f1      	bhi.n	8722 <hci_cmd_handle+0x6e>
    873e:	a301      	add	r3, pc, #4	; (adr r3, 8744 <hci_cmd_handle+0x90>)
    8740:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8744:	00008f99 	.word	0x00008f99
    8748:	00008fc9 	.word	0x00008fc9
    874c:	00008ff3 	.word	0x00008ff3
    8750:	00008723 	.word	0x00008723
    8754:	00008723 	.word	0x00008723
    8758:	00009039 	.word	0x00009039
    875c:	00008723 	.word	0x00008723
    8760:	0000900b 	.word	0x0000900b
    8764:	00009045 	.word	0x00009045
    8768:	000090b3 	.word	0x000090b3
	switch (ocf) {
    876c:	2a06      	cmp	r2, #6
    876e:	d006      	beq.n	877e <hci_cmd_handle+0xca>
    8770:	2a1d      	cmp	r2, #29
    8772:	d1d6      	bne.n	8722 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    8774:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    8776:	8818      	ldrh	r0, [r3, #0]
    8778:	f007 ffbf 	bl	106fa <ll_version_ind_send>
    877c:	e004      	b.n	8788 <hci_cmd_handle+0xd4>
    877e:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    8780:	7899      	ldrb	r1, [r3, #2]
    8782:	8818      	ldrh	r0, [r3, #0]
    8784:	f007 ffcd 	bl	10722 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    8788:	2800      	cmp	r0, #0
    878a:	bf14      	ite	ne
    878c:	200c      	movne	r0, #12
    878e:	2000      	moveq	r0, #0
    8790:	f7ff fda0 	bl	82d4 <cmd_status>
    8794:	9007      	str	r0, [sp, #28]
	return evt;
    8796:	9807      	ldr	r0, [sp, #28]
    8798:	e79e      	b.n	86d8 <hci_cmd_handle+0x24>
	switch (ocf) {
    879a:	2a2d      	cmp	r2, #45	; 0x2d
    879c:	d03a      	beq.n	8814 <hci_cmd_handle+0x160>
    879e:	d820      	bhi.n	87e2 <hci_cmd_handle+0x12e>
    87a0:	2a01      	cmp	r2, #1
    87a2:	d02b      	beq.n	87fc <hci_cmd_handle+0x148>
    87a4:	2a03      	cmp	r2, #3
    87a6:	d1bc      	bne.n	8722 <hci_cmd_handle+0x6e>
	dup_count = -1;
    87a8:	4b8c      	ldr	r3, [pc, #560]	; (89dc <hci_cmd_handle+0x328>)
    87aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    87ae:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    87b0:	4b8b      	ldr	r3, [pc, #556]	; (89e0 <hci_cmd_handle+0x32c>)
    87b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    87b6:	f641 71ff 	movw	r1, #8191	; 0x1fff
    87ba:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    87be:	4b89      	ldr	r3, [pc, #548]	; (89e4 <hci_cmd_handle+0x330>)
    87c0:	2000      	movs	r0, #0
    87c2:	2100      	movs	r1, #0
    87c4:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    87c8:	4b87      	ldr	r3, [pc, #540]	; (89e8 <hci_cmd_handle+0x334>)
    87ca:	201f      	movs	r0, #31
    87cc:	2100      	movs	r1, #0
    87ce:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    87d2:	f007 fc5d 	bl	10090 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    87d6:	2101      	movs	r1, #1
    87d8:	a807      	add	r0, sp, #28
    87da:	f7ff fdab 	bl	8334 <cmd_complete>
	ccst->status = 0x00;
    87de:	2300      	movs	r3, #0
    87e0:	e23e      	b.n	8c60 <hci_cmd_handle+0x5ac>
	switch (ocf) {
    87e2:	2a7b      	cmp	r2, #123	; 0x7b
    87e4:	d02c      	beq.n	8840 <hci_cmd_handle+0x18c>
    87e6:	2a7c      	cmp	r2, #124	; 0x7c
    87e8:	d041      	beq.n	886e <hci_cmd_handle+0x1ba>
    87ea:	2a63      	cmp	r2, #99	; 0x63
    87ec:	d199      	bne.n	8722 <hci_cmd_handle+0x6e>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    87ee:	68a0      	ldr	r0, [r4, #8]
    87f0:	f7ff ff5c 	bl	86ac <sys_get_le64>
    87f4:	4b7b      	ldr	r3, [pc, #492]	; (89e4 <hci_cmd_handle+0x330>)
	le_event_mask = sys_get_le64(cmd->events);
    87f6:	e9c3 0100 	strd	r0, r1, [r3]
    87fa:	e7ec      	b.n	87d6 <hci_cmd_handle+0x122>
	event_mask = sys_get_le64(cmd->events);
    87fc:	68a0      	ldr	r0, [r4, #8]
    87fe:	f7ff ff55 	bl	86ac <sys_get_le64>
    8802:	4b77      	ldr	r3, [pc, #476]	; (89e0 <hci_cmd_handle+0x32c>)
    8804:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8808:	4611      	mov	r1, r2
    880a:	a807      	add	r0, sp, #28
    880c:	f7ff fd92 	bl	8334 <cmd_complete>
	ccst->status = 0x00;
    8810:	7005      	strb	r5, [r0, #0]
    8812:	e7c0      	b.n	8796 <hci_cmd_handle+0xe2>
    8814:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8816:	2104      	movs	r1, #4
    8818:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    881a:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    881c:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    881e:	f7ff fd89 	bl	8334 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8822:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8824:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    8826:	1cc2      	adds	r2, r0, #3
    8828:	4639      	mov	r1, r7
    882a:	4630      	mov	r0, r6
    882c:	f007 ff8d 	bl	1074a <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    8830:	2800      	cmp	r0, #0
    8832:	bf14      	ite	ne
    8834:	2302      	movne	r3, #2
    8836:	2300      	moveq	r3, #0
    8838:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    883a:	f8a4 5001 	strh.w	r5, [r4, #1]
    883e:	e7aa      	b.n	8796 <hci_cmd_handle+0xe2>
	handle = sys_le16_to_cpu(cmd->handle);
    8840:	68a3      	ldr	r3, [r4, #8]
    8842:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    8844:	a908      	add	r1, sp, #32
    8846:	b2a0      	uxth	r0, r4
    8848:	f007 ff89 	bl	1075e <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    884c:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    884e:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8850:	a807      	add	r0, sp, #28
    8852:	f7ff fd6f 	bl	8334 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8856:	2d00      	cmp	r5, #0
    8858:	bf14      	ite	ne
    885a:	230c      	movne	r3, #12
    885c:	2300      	moveq	r3, #0
    885e:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8860:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    8864:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8868:	f8a0 3003 	strh.w	r3, [r0, #3]
    886c:	e793      	b.n	8796 <hci_cmd_handle+0xe2>
    886e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8870:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    8872:	8859      	ldrh	r1, [r3, #2]
    8874:	b2a0      	uxth	r0, r4
    8876:	f007 ff86 	bl	10786 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    887a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    887c:	2103      	movs	r1, #3
    887e:	a807      	add	r0, sp, #28
    8880:	f7ff fd58 	bl	8334 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8884:	2d00      	cmp	r5, #0
    8886:	bf14      	ite	ne
    8888:	230c      	movne	r3, #12
    888a:	2300      	moveq	r3, #0
    888c:	7003      	strb	r3, [r0, #0]
    888e:	e27d      	b.n	8d8c <hci_cmd_handle+0x6d8>
	switch (ocf) {
    8890:	3a01      	subs	r2, #1
    8892:	2a08      	cmp	r2, #8
    8894:	f63f af45 	bhi.w	8722 <hci_cmd_handle+0x6e>
    8898:	a301      	add	r3, pc, #4	; (adr r3, 88a0 <hci_cmd_handle+0x1ec>)
    889a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    889e:	bf00      	nop
    88a0:	000088c5 	.word	0x000088c5
    88a4:	000088ef 	.word	0x000088ef
    88a8:	000089a3 	.word	0x000089a3
    88ac:	00008723 	.word	0x00008723
    88b0:	00008723 	.word	0x00008723
    88b4:	00008723 	.word	0x00008723
    88b8:	00008723 	.word	0x00008723
    88bc:	00008723 	.word	0x00008723
    88c0:	000089ed 	.word	0x000089ed
	rp = cmd_complete(evt, sizeof(*rp));
    88c4:	2109      	movs	r1, #9
    88c6:	a807      	add	r0, sp, #28
    88c8:	f7ff fd34 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    88cc:	2300      	movs	r3, #0
    88ce:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    88d0:	7083      	strb	r3, [r0, #2]
    88d2:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    88d4:	f06f 030e 	mvn.w	r3, #14
    88d8:	7143      	strb	r3, [r0, #5]
    88da:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    88dc:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    88de:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    88e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    88e4:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    88e6:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    88e8:	71c3      	strb	r3, [r0, #7]
    88ea:	7203      	strb	r3, [r0, #8]
    88ec:	e753      	b.n	8796 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    88ee:	2141      	movs	r1, #65	; 0x41
    88f0:	a807      	add	r0, sp, #28
    88f2:	f7ff fd1f 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    88f6:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    88f8:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    88fa:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    88fc:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8900:	f7f9 f9a8 	bl	1c54 <memset>
	rp->commands[2] |= BIT(7);
    8904:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    8906:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    8908:	f063 037f 	orn	r3, r3, #127	; 0x7f
    890c:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    890e:	79a3      	ldrb	r3, [r4, #6]
    8910:	f063 033f 	orn	r3, r3, #63	; 0x3f
    8914:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    8916:	7ae3      	ldrb	r3, [r4, #11]
    8918:	f043 0304 	orr.w	r3, r3, #4
    891c:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    891e:	7be3      	ldrb	r3, [r4, #15]
    8920:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    8924:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    8926:	7c23      	ldrb	r3, [r4, #16]
    8928:	f043 0302 	orr.w	r3, r3, #2
    892c:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    892e:	7de3      	ldrb	r3, [r4, #23]
    8930:	f043 0304 	orr.w	r3, r3, #4
    8934:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    8936:	7ea3      	ldrb	r3, [r4, #26]
    8938:	f043 0317 	orr.w	r3, r3, #23
    893c:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    893e:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    8940:	f043 0309 	orr.w	r3, r3, #9
    8944:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    8946:	7863      	ldrb	r3, [r4, #1]
    8948:	f043 0320 	orr.w	r3, r3, #32
    894c:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    894e:	23ff      	movs	r3, #255	; 0xff
    8950:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    8952:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    8956:	f063 030f 	orn	r3, r3, #15
    895a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    895e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    8962:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    8966:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    896a:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    896c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    8970:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    8974:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    8978:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    897c:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    8980:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    8984:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8988:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    898c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8990:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    8994:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8998:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    899c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    89a0:	e6f9      	b.n	8796 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    89a2:	2109      	movs	r1, #9
    89a4:	a807      	add	r0, sp, #28
    89a6:	f7ff fcc5 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    89aa:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    89ac:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    89ae:	2208      	movs	r2, #8
	rp->status = 0x00;
    89b0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    89b4:	f7f9 f94e 	bl	1c54 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    89b8:	2360      	movs	r3, #96	; 0x60
    89ba:	7163      	strb	r3, [r4, #5]
    89bc:	e6eb      	b.n	8796 <hci_cmd_handle+0xe2>
    89be:	bf00      	nop
    89c0:	0001496d 	.word	0x0001496d
    89c4:	000156bc 	.word	0x000156bc
    89c8:	000167f8 	.word	0x000167f8
    89cc:	0001570b 	.word	0x0001570b
    89d0:	0001693b 	.word	0x0001693b
    89d4:	20000830 	.word	0x20000830
    89d8:	00016961 	.word	0x00016961
    89dc:	20000838 	.word	0x20000838
    89e0:	20003d30 	.word	0x20003d30
    89e4:	200008c0 	.word	0x200008c0
    89e8:	20003d38 	.word	0x20003d38
	rp = cmd_complete(evt, sizeof(*rp));
    89ec:	2107      	movs	r1, #7
    89ee:	a807      	add	r0, sp, #28
    89f0:	f7ff fca0 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    89f4:	4601      	mov	r1, r0
    89f6:	2300      	movs	r3, #0
    89f8:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    89fc:	4618      	mov	r0, r3
    89fe:	f7ff fac5 	bl	7f8c <ll_addr_get>
    8a02:	e6c8      	b.n	8796 <hci_cmd_handle+0xe2>
	switch (ocf) {
    8a04:	3a01      	subs	r2, #1
    8a06:	2a4d      	cmp	r2, #77	; 0x4d
    8a08:	f63f ae8b 	bhi.w	8722 <hci_cmd_handle+0x6e>
    8a0c:	a301      	add	r3, pc, #4	; (adr r3, 8a14 <hci_cmd_handle+0x360>)
    8a0e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8a12:	bf00      	nop
    8a14:	00008b4d 	.word	0x00008b4d
    8a18:	00008b57 	.word	0x00008b57
    8a1c:	00008b6f 	.word	0x00008b6f
    8a20:	00008723 	.word	0x00008723
    8a24:	00008b93 	.word	0x00008b93
    8a28:	00008723 	.word	0x00008723
    8a2c:	00008723 	.word	0x00008723
    8a30:	00008723 	.word	0x00008723
    8a34:	00008723 	.word	0x00008723
    8a38:	00008723 	.word	0x00008723
    8a3c:	00008c37 	.word	0x00008c37
    8a40:	00008c65 	.word	0x00008c65
    8a44:	00008c85 	.word	0x00008c85
    8a48:	00008caf 	.word	0x00008caf
    8a4c:	00008b9f 	.word	0x00008b9f
    8a50:	00008bb5 	.word	0x00008bb5
    8a54:	00008bc7 	.word	0x00008bc7
    8a58:	00008bcf 	.word	0x00008bcf
    8a5c:	00008d4f 	.word	0x00008d4f
    8a60:	00008d0f 	.word	0x00008d0f
    8a64:	00008d2b 	.word	0x00008d2b
    8a68:	00008d45 	.word	0x00008d45
    8a6c:	00008bd7 	.word	0x00008bd7
    8a70:	00008bfd 	.word	0x00008bfd
    8a74:	00008d17 	.word	0x00008d17
    8a78:	00008723 	.word	0x00008723
    8a7c:	00008723 	.word	0x00008723
    8a80:	00008c13 	.word	0x00008c13
    8a84:	00008723 	.word	0x00008723
    8a88:	00008723 	.word	0x00008723
    8a8c:	00008723 	.word	0x00008723
    8a90:	00008d69 	.word	0x00008d69
    8a94:	00008d93 	.word	0x00008d93
    8a98:	00008da1 	.word	0x00008da1
    8a9c:	00008db1 	.word	0x00008db1
    8aa0:	00008dc9 	.word	0x00008dc9
    8aa4:	00008723 	.word	0x00008723
    8aa8:	00008723 	.word	0x00008723
    8aac:	00008ee1 	.word	0x00008ee1
    8ab0:	00008eef 	.word	0x00008eef
    8ab4:	00008ef7 	.word	0x00008ef7
    8ab8:	00008f07 	.word	0x00008f07
    8abc:	00008f19 	.word	0x00008f19
    8ac0:	00008f37 	.word	0x00008f37
    8ac4:	00008f55 	.word	0x00008f55
    8ac8:	00008f6b 	.word	0x00008f6b
    8acc:	00008de5 	.word	0x00008de5
    8ad0:	00008e11 	.word	0x00008e11
    8ad4:	00008e67 	.word	0x00008e67
    8ad8:	00008e85 	.word	0x00008e85
    8adc:	00008723 	.word	0x00008723
    8ae0:	00008723 	.word	0x00008723
    8ae4:	00008723 	.word	0x00008723
    8ae8:	00008723 	.word	0x00008723
    8aec:	00008723 	.word	0x00008723
    8af0:	00008723 	.word	0x00008723
    8af4:	00008723 	.word	0x00008723
    8af8:	00008723 	.word	0x00008723
    8afc:	00008723 	.word	0x00008723
    8b00:	00008723 	.word	0x00008723
    8b04:	00008723 	.word	0x00008723
    8b08:	00008723 	.word	0x00008723
    8b0c:	00008723 	.word	0x00008723
    8b10:	00008723 	.word	0x00008723
    8b14:	00008723 	.word	0x00008723
    8b18:	00008723 	.word	0x00008723
    8b1c:	00008723 	.word	0x00008723
    8b20:	00008723 	.word	0x00008723
    8b24:	00008723 	.word	0x00008723
    8b28:	00008723 	.word	0x00008723
    8b2c:	00008723 	.word	0x00008723
    8b30:	00008723 	.word	0x00008723
    8b34:	00008723 	.word	0x00008723
    8b38:	00008723 	.word	0x00008723
    8b3c:	00008f7f 	.word	0x00008f7f
    8b40:	00008723 	.word	0x00008723
    8b44:	00008723 	.word	0x00008723
    8b48:	00008f75 	.word	0x00008f75
	le_event_mask = sys_get_le64(cmd->events);
    8b4c:	68a0      	ldr	r0, [r4, #8]
    8b4e:	f7ff fdad 	bl	86ac <sys_get_le64>
    8b52:	4baa      	ldr	r3, [pc, #680]	; (8dfc <hci_cmd_handle+0x748>)
    8b54:	e64f      	b.n	87f6 <hci_cmd_handle+0x142>
	rp = cmd_complete(evt, sizeof(*rp));
    8b56:	2104      	movs	r1, #4
    8b58:	a807      	add	r0, sp, #28
    8b5a:	f7ff fbeb 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    8b5e:	2300      	movs	r3, #0
    8b60:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8b62:	221b      	movs	r2, #27
    8b64:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8b66:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8b68:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8b6a:	70c3      	strb	r3, [r0, #3]
    8b6c:	e613      	b.n	8796 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8b6e:	2109      	movs	r1, #9
    8b70:	a807      	add	r0, sp, #28
    8b72:	f7ff fbdf 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    8b76:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8b78:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8b7a:	2208      	movs	r2, #8
	rp->status = 0x00;
    8b7c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8b80:	f7f9 f868 	bl	1c54 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    8b84:	23ff      	movs	r3, #255	; 0xff
    8b86:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    8b88:	2341      	movs	r3, #65	; 0x41
    8b8a:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    8b8c:	2301      	movs	r3, #1
    8b8e:	70e3      	strb	r3, [r4, #3]
    8b90:	e601      	b.n	8796 <hci_cmd_handle+0xe2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    8b92:	68a1      	ldr	r1, [r4, #8]
    8b94:	2001      	movs	r0, #1
    8b96:	f7ff fa13 	bl	7fc0 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    8b9a:	4604      	mov	r4, r0
    8b9c:	e0af      	b.n	8cfe <hci_cmd_handle+0x64a>
	rp = cmd_complete(evt, sizeof(*rp));
    8b9e:	2102      	movs	r1, #2
    8ba0:	a807      	add	r0, sp, #28
    8ba2:	f7ff fbc7 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    8ba6:	2300      	movs	r3, #0
    8ba8:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8baa:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    8bac:	f008 fd32 	bl	11614 <ll_wl_size_get>
    8bb0:	7060      	strb	r0, [r4, #1]
    8bb2:	e5f0      	b.n	8796 <hci_cmd_handle+0xe2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8bb4:	2101      	movs	r1, #1
    8bb6:	a807      	add	r0, sp, #28
    8bb8:	f7ff fbbc 	bl	8334 <cmd_complete>
    8bbc:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    8bbe:	f008 fd2b 	bl	11618 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    8bc2:	7020      	strb	r0, [r4, #0]
    8bc4:	e5e7      	b.n	8796 <hci_cmd_handle+0xe2>
	status = ll_wl_add(&cmd->addr);
    8bc6:	68a0      	ldr	r0, [r4, #8]
    8bc8:	f008 fdd2 	bl	11770 <ll_wl_add>
    8bcc:	e7e5      	b.n	8b9a <hci_cmd_handle+0x4e6>
	status = ll_wl_remove(&cmd->addr);
    8bce:	68a0      	ldr	r0, [r4, #8]
    8bd0:	f008 fd42 	bl	11658 <ll_wl_remove>
    8bd4:	e7e1      	b.n	8b9a <hci_cmd_handle+0x4e6>
    8bd6:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    8bd8:	2300      	movs	r3, #0
    8bda:	aa08      	add	r2, sp, #32
    8bdc:	f100 0110 	add.w	r1, r0, #16
    8be0:	f009 fa40 	bl	12064 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    8be4:	2111      	movs	r1, #17
    8be6:	a807      	add	r0, sp, #28
    8be8:	f7ff fba4 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    8bec:	2300      	movs	r3, #0
    8bee:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    8bf2:	2210      	movs	r2, #16
    8bf4:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    8bf6:	f7f9 f801 	bl	1bfc <memcpy>
    8bfa:	e5cc      	b.n	8796 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8bfc:	2109      	movs	r1, #9
    8bfe:	a807      	add	r0, sp, #28
    8c00:	f7ff fb98 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    8c04:	2300      	movs	r3, #0
    8c06:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    8c0a:	2108      	movs	r1, #8
    8c0c:	f7ff f9f8 	bl	8000 <bt_rand>
    8c10:	e5c1      	b.n	8796 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8c12:	2109      	movs	r1, #9
    8c14:	a807      	add	r0, sp, #28
    8c16:	f7ff fb8d 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    8c1a:	4601      	mov	r1, r0
    8c1c:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8c1e:	4602      	mov	r2, r0
	rp->status = 0x00;
    8c20:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    8c24:	4876      	ldr	r0, [pc, #472]	; (8e00 <hci_cmd_handle+0x74c>)
    8c26:	f7ff fb41 	bl	82ac <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    8c2a:	f240 203f 	movw	r0, #575	; 0x23f
    8c2e:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    8c30:	f7ff fb3c 	bl	82ac <sys_put_le32>
    8c34:	e5af      	b.n	8796 <hci_cmd_handle+0xe2>
    8c36:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    8c38:	7963      	ldrb	r3, [r4, #5]
    8c3a:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    8c3e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    8c42:	7820      	ldrb	r0, [r4, #0]
    8c44:	79a4      	ldrb	r4, [r4, #6]
    8c46:	9400      	str	r4, [sp, #0]
    8c48:	f008 faa8 	bl	1119c <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    8c4c:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    8c4e:	2101      	movs	r1, #1
    8c50:	a807      	add	r0, sp, #28
    8c52:	f7ff fb6f 	bl	8334 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8c56:	2c00      	cmp	r4, #0
    8c58:	bf18      	it	ne
    8c5a:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8c5c:	bf08      	it	eq
    8c5e:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8c60:	7003      	strb	r3, [r0, #0]
    8c62:	e598      	b.n	8796 <hci_cmd_handle+0xe2>
    8c64:	68a2      	ldr	r2, [r4, #8]
    8c66:	4b67      	ldr	r3, [pc, #412]	; (8e04 <hci_cmd_handle+0x750>)
	if (cmd->enable && cmd->filter_dup) {
    8c68:	7810      	ldrb	r0, [r2, #0]
    8c6a:	b140      	cbz	r0, 8c7e <hci_cmd_handle+0x5ca>
    8c6c:	7852      	ldrb	r2, [r2, #1]
    8c6e:	b132      	cbz	r2, 8c7e <hci_cmd_handle+0x5ca>
		dup_count = 0;
    8c70:	2200      	movs	r2, #0
    8c72:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    8c74:	4b64      	ldr	r3, [pc, #400]	; (8e08 <hci_cmd_handle+0x754>)
		dup_count = -1;
    8c76:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    8c78:	f008 fab0 	bl	111dc <ll_scan_enable>
    8c7c:	e7e6      	b.n	8c4c <hci_cmd_handle+0x598>
		dup_count = -1;
    8c7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8c82:	e7f8      	b.n	8c76 <hci_cmd_handle+0x5c2>
    8c84:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    8c86:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    8c8a:	7963      	ldrb	r3, [r4, #5]
    8c8c:	7922      	ldrb	r2, [r4, #4]
    8c8e:	8861      	ldrh	r1, [r4, #2]
    8c90:	8820      	ldrh	r0, [r4, #0]
    8c92:	9504      	str	r5, [sp, #16]
    8c94:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    8c98:	9503      	str	r5, [sp, #12]
    8c9a:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    8c9e:	9502      	str	r5, [sp, #8]
    8ca0:	7b25      	ldrb	r5, [r4, #12]
    8ca2:	9501      	str	r5, [sp, #4]
    8ca4:	3406      	adds	r4, #6
    8ca6:	9400      	str	r4, [sp, #0]
    8ca8:	f008 fad2 	bl	11250 <ll_create_connection>
    8cac:	e56c      	b.n	8788 <hci_cmd_handle+0xd4>
	status = ll_connect_disable();
    8cae:	f008 f8e7 	bl	10e80 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    8cb2:	4606      	mov	r6, r0
    8cb4:	bb48      	cbnz	r0, 8d0a <hci_cmd_handle+0x656>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8cb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8cba:	2001      	movs	r0, #1
    8cbc:	f7fa fef8 	bl	3ab0 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8cc0:	4a52      	ldr	r2, [pc, #328]	; (8e0c <hci_cmd_handle+0x758>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8cc2:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8cc4:	e9d2 4500 	ldrd	r4, r5, [r2]
    8cc8:	2400      	movs	r4, #0
    8cca:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    8cce:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8cd2:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8cd4:	d004      	beq.n	8ce0 <hci_cmd_handle+0x62c>
    8cd6:	4632      	mov	r2, r6
    8cd8:	4631      	mov	r1, r6
    8cda:	2002      	movs	r0, #2
    8cdc:	f7ff fb9a 	bl	8414 <le_conn_complete.part.39>
		if ((*evt)->len) {
    8ce0:	9807      	ldr	r0, [sp, #28]
    8ce2:	8984      	ldrh	r4, [r0, #12]
    8ce4:	b14c      	cbz	r4, 8cfa <hci_cmd_handle+0x646>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    8ce6:	2101      	movs	r1, #1
    8ce8:	a808      	add	r0, sp, #32
    8cea:	f7ff fb23 	bl	8334 <cmd_complete>
			ccst->status = cmd_status;
    8cee:	2300      	movs	r3, #0
    8cf0:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    8cf2:	9808      	ldr	r0, [sp, #32]
    8cf4:	f7fa fd04 	bl	3700 <bt_recv_prio>
    8cf8:	e54d      	b.n	8796 <hci_cmd_handle+0xe2>
			net_buf_unref(*evt);
    8cfa:	f009 ffe9 	bl	12cd0 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8cfe:	2101      	movs	r1, #1
    8d00:	a807      	add	r0, sp, #28
    8d02:	f7ff fb17 	bl	8334 <cmd_complete>
	ccst->status = status;
    8d06:	7004      	strb	r4, [r0, #0]
    8d08:	e545      	b.n	8796 <hci_cmd_handle+0xe2>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    8d0a:	240c      	movs	r4, #12
    8d0c:	e7f7      	b.n	8cfe <hci_cmd_handle+0x64a>
	status = ll_chm_update(&cmd->ch_map[0]);
    8d0e:	68a0      	ldr	r0, [r4, #8]
    8d10:	f007 fc88 	bl	10624 <ll_chm_update>
    8d14:	e79a      	b.n	8c4c <hci_cmd_handle+0x598>
    8d16:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    8d18:	f100 030c 	add.w	r3, r0, #12
    8d1c:	f100 020a 	add.w	r2, r0, #10
    8d20:	1c81      	adds	r1, r0, #2
    8d22:	8800      	ldrh	r0, [r0, #0]
    8d24:	f007 ff32 	bl	10b8c <ll_enc_req_send>
    8d28:	e52e      	b.n	8788 <hci_cmd_handle+0xd4>
	handle = sys_le16_to_cpu(cmd->handle);
    8d2a:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8d2c:	2108      	movs	r1, #8
    8d2e:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8d30:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8d32:	f7ff faff 	bl	8334 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8d36:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8d38:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    8d3a:	1cc1      	adds	r1, r0, #3
    8d3c:	4630      	mov	r0, r6
    8d3e:	f007 fcb3 	bl	106a8 <ll_chm_get>
    8d42:	e575      	b.n	8830 <hci_cmd_handle+0x17c>
	handle = sys_le16_to_cpu(cmd->handle);
    8d44:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    8d46:	8818      	ldrh	r0, [r3, #0]
    8d48:	f007 fcc3 	bl	106d2 <ll_feature_req_send>
    8d4c:	e51c      	b.n	8788 <hci_cmd_handle+0xd4>
    8d4e:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    8d50:	8911      	ldrh	r1, [r2, #8]
    8d52:	8893      	ldrh	r3, [r2, #4]
    8d54:	8810      	ldrh	r0, [r2, #0]
    8d56:	9101      	str	r1, [sp, #4]
    8d58:	88d2      	ldrh	r2, [r2, #6]
    8d5a:	9200      	str	r2, [sp, #0]
    8d5c:	2200      	movs	r2, #0
    8d5e:	4611      	mov	r1, r2
    8d60:	f007 fbe8 	bl	10534 <ll_conn_update>
	*evt = cmd_status(status);
    8d64:	b2c0      	uxtb	r0, r0
    8d66:	e513      	b.n	8790 <hci_cmd_handle+0xdc>
    8d68:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8d6a:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8d6c:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8d6e:	8893      	ldrh	r3, [r2, #4]
    8d70:	9101      	str	r1, [sp, #4]
    8d72:	88d2      	ldrh	r2, [r2, #6]
    8d74:	9200      	str	r2, [sp, #0]
    8d76:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8d78:	2102      	movs	r1, #2
    8d7a:	b2a0      	uxth	r0, r4
    8d7c:	f007 fbda 	bl	10534 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    8d80:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8d82:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8d84:	a807      	add	r0, sp, #28
    8d86:	f7ff fad5 	bl	8334 <cmd_complete>
	rp->status = status;
    8d8a:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8d8c:	f8a0 4001 	strh.w	r4, [r0, #1]
    8d90:	e501      	b.n	8796 <hci_cmd_handle+0xe2>
    8d92:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8d94:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8d96:	789a      	ldrb	r2, [r3, #2]
    8d98:	2300      	movs	r3, #0
    8d9a:	9301      	str	r3, [sp, #4]
    8d9c:	9300      	str	r3, [sp, #0]
    8d9e:	e7eb      	b.n	8d78 <hci_cmd_handle+0x6c4>
    8da0:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8da2:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8da4:	889a      	ldrh	r2, [r3, #4]
    8da6:	8859      	ldrh	r1, [r3, #2]
    8da8:	b2a0      	uxth	r0, r4
    8daa:	f007 fd02 	bl	107b2 <ll_length_req_send>
    8dae:	e564      	b.n	887a <hci_cmd_handle+0x1c6>
	rp = cmd_complete(evt, sizeof(*rp));
    8db0:	2105      	movs	r1, #5
    8db2:	a807      	add	r0, sp, #28
    8db4:	f7ff fabe 	bl	8334 <cmd_complete>
    8db8:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    8dba:	1cc1      	adds	r1, r0, #3
    8dbc:	3001      	adds	r0, #1
    8dbe:	f007 fd1b 	bl	107f8 <ll_length_default_get>
	rp->status = 0x00;
    8dc2:	2300      	movs	r3, #0
    8dc4:	7023      	strb	r3, [r4, #0]
    8dc6:	e4e6      	b.n	8796 <hci_cmd_handle+0xe2>
    8dc8:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    8dca:	8859      	ldrh	r1, [r3, #2]
    8dcc:	8818      	ldrh	r0, [r3, #0]
    8dce:	f007 fd1d 	bl	1080c <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8dd2:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    8dd4:	2101      	movs	r1, #1
    8dd6:	a807      	add	r0, sp, #28
    8dd8:	f7ff faac 	bl	8334 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8ddc:	2c00      	cmp	r4, #0
    8dde:	bf18      	it	ne
    8de0:	231e      	movne	r3, #30
    8de2:	e73b      	b.n	8c5c <hci_cmd_handle+0x5a8>
	rp = cmd_complete(evt, sizeof(*rp));
    8de4:	2109      	movs	r1, #9
    8de6:	a807      	add	r0, sp, #28
    8de8:	f7ff faa4 	bl	8334 <cmd_complete>
    8dec:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    8dee:	1dc3      	adds	r3, r0, #7
    8df0:	1d42      	adds	r2, r0, #5
    8df2:	1cc1      	adds	r1, r0, #3
    8df4:	3001      	adds	r0, #1
    8df6:	f007 fd13 	bl	10820 <ll_length_max_get>
    8dfa:	e7e2      	b.n	8dc2 <hci_cmd_handle+0x70e>
    8dfc:	20003d38 	.word	0x20003d38
    8e00:	130f3370 	.word	0x130f3370
    8e04:	20000838 	.word	0x20000838
    8e08:	2000083c 	.word	0x2000083c
    8e0c:	20003d30 	.word	0x20003d30
	handle = sys_le16_to_cpu(cmd->handle);
    8e10:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8e12:	2105      	movs	r1, #5
    8e14:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8e16:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8e18:	f7ff fa8c 	bl	8334 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8e1c:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8e1e:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    8e20:	1d02      	adds	r2, r0, #4
    8e22:	1cc1      	adds	r1, r0, #3
    8e24:	4630      	mov	r0, r6
    8e26:	f007 fd04 	bl	10832 <ll_phy_get>
	return __builtin_ffs(op);
    8e2a:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    8e2c:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8e30:	2800      	cmp	r0, #0
    8e32:	bf14      	ite	ne
    8e34:	230c      	movne	r3, #12
    8e36:	2300      	moveq	r3, #0
    8e38:	7023      	strb	r3, [r4, #0]
    8e3a:	2a00      	cmp	r2, #0
    8e3c:	fa92 f3a2 	rbit	r3, r2
    8e40:	fab3 f383 	clz	r3, r3
    8e44:	7922      	ldrb	r2, [r4, #4]
    8e46:	bf08      	it	eq
    8e48:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8e4c:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    8e4e:	70e3      	strb	r3, [r4, #3]
    8e50:	2a00      	cmp	r2, #0
    8e52:	fa92 f3a2 	rbit	r3, r2
    8e56:	fab3 f383 	clz	r3, r3
    8e5a:	bf08      	it	eq
    8e5c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8e60:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    8e62:	7123      	strb	r3, [r4, #4]
    8e64:	e497      	b.n	8796 <hci_cmd_handle+0xe2>
    8e66:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8e68:	781a      	ldrb	r2, [r3, #0]
    8e6a:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    8e6c:	bf44      	itt	mi
    8e6e:	2107      	movmi	r1, #7
    8e70:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8e72:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    8e74:	bf44      	itt	mi
    8e76:	2207      	movmi	r2, #7
    8e78:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8e7a:	7899      	ldrb	r1, [r3, #2]
    8e7c:	7858      	ldrb	r0, [r3, #1]
    8e7e:	f007 fced 	bl	1085c <ll_phy_default_set>
    8e82:	e7a6      	b.n	8dd2 <hci_cmd_handle+0x71e>
    8e84:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8e86:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    8e88:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    8e8a:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8e8e:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    8e90:	bf44      	itt	mi
    8e92:	2103      	movmi	r1, #3
    8e94:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    8e96:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8e98:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    8e9a:	bf44      	itt	mi
    8e9c:	2203      	movmi	r2, #3
    8e9e:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    8ea0:	074d      	lsls	r5, r1, #29
    8ea2:	d002      	beq.n	8eaa <hci_cmd_handle+0x7f6>
	    !(cmd->rx_phys & 0x07)) {
    8ea4:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    8ea6:	075a      	lsls	r2, r3, #29
    8ea8:	d105      	bne.n	8eb6 <hci_cmd_handle+0x802>
		ccst = cmd_complete(evt, sizeof(*ccst));
    8eaa:	2101      	movs	r1, #1
    8eac:	a807      	add	r0, sp, #28
    8eae:	f7ff fa41 	bl	8334 <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    8eb2:	2312      	movs	r3, #18
    8eb4:	e6d4      	b.n	8c60 <hci_cmd_handle+0x5ac>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    8eb6:	ea41 0203 	orr.w	r2, r1, r3
    8eba:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    8ebe:	d005      	beq.n	8ecc <hci_cmd_handle+0x818>
		ccst = cmd_complete(evt, sizeof(*ccst));
    8ec0:	2101      	movs	r1, #1
    8ec2:	a807      	add	r0, sp, #28
    8ec4:	f7ff fa36 	bl	8334 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    8ec8:	2311      	movs	r3, #17
    8eca:	e6c9      	b.n	8c60 <hci_cmd_handle+0x5ac>
	if (phy_opts & 0x03) {
    8ecc:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    8ed0:	bf1c      	itt	ne
    8ed2:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    8ed6:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    8eda:	f007 fcc9 	bl	10870 <ll_phy_req_send>
    8ede:	e453      	b.n	8788 <hci_cmd_handle+0xd4>
    8ee0:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    8ee2:	f100 0217 	add.w	r2, r0, #23
    8ee6:	1dc1      	adds	r1, r0, #7
    8ee8:	f008 fe4c 	bl	11b84 <ll_rl_add>
    8eec:	e655      	b.n	8b9a <hci_cmd_handle+0x4e6>
	status = ll_rl_remove(&cmd->peer_id_addr);
    8eee:	68a0      	ldr	r0, [r4, #8]
    8ef0:	f008 feea 	bl	11cc8 <ll_rl_remove>
    8ef4:	e651      	b.n	8b9a <hci_cmd_handle+0x4e6>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8ef6:	2101      	movs	r1, #1
    8ef8:	a807      	add	r0, sp, #28
    8efa:	f7ff fa1b 	bl	8334 <cmd_complete>
    8efe:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    8f00:	f008 fe26 	bl	11b50 <ll_rl_clear>
    8f04:	e65d      	b.n	8bc2 <hci_cmd_handle+0x50e>
	rp = cmd_complete(evt, sizeof(*rp));
    8f06:	2102      	movs	r1, #2
    8f08:	a807      	add	r0, sp, #28
    8f0a:	f7ff fa13 	bl	8334 <cmd_complete>
    8f0e:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    8f10:	f008 fe1c 	bl	11b4c <ll_rl_size_get>
    8f14:	7060      	strb	r0, [r4, #1]
    8f16:	e754      	b.n	8dc2 <hci_cmd_handle+0x70e>
    8f18:	2207      	movs	r2, #7
    8f1a:	68a1      	ldr	r1, [r4, #8]
    8f1c:	a808      	add	r0, sp, #32
    8f1e:	f7f8 fe6d 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    8f22:	2107      	movs	r1, #7
    8f24:	a807      	add	r0, sp, #28
    8f26:	f7ff fa05 	bl	8334 <cmd_complete>
    8f2a:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    8f2c:	1c41      	adds	r1, r0, #1
    8f2e:	a808      	add	r0, sp, #32
    8f30:	f008 ff58 	bl	11de4 <ll_rl_crpa_get>
    8f34:	e645      	b.n	8bc2 <hci_cmd_handle+0x50e>
    8f36:	2207      	movs	r2, #7
    8f38:	68a1      	ldr	r1, [r4, #8]
    8f3a:	a808      	add	r0, sp, #32
    8f3c:	f7f8 fe5e 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    8f40:	2107      	movs	r1, #7
    8f42:	a807      	add	r0, sp, #28
    8f44:	f7ff f9f6 	bl	8334 <cmd_complete>
    8f48:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    8f4a:	1c41      	adds	r1, r0, #1
    8f4c:	a808      	add	r0, sp, #32
    8f4e:	f008 ff69 	bl	11e24 <ll_rl_lrpa_get>
    8f52:	e636      	b.n	8bc2 <hci_cmd_handle+0x50e>
	u8_t enable = cmd->enable;
    8f54:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8f56:	2101      	movs	r1, #1
    8f58:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    8f5a:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8f5c:	f7ff f9ea 	bl	8334 <cmd_complete>
    8f60:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    8f62:	4628      	mov	r0, r5
    8f64:	f008 ff76 	bl	11e54 <ll_rl_enable>
    8f68:	e62b      	b.n	8bc2 <hci_cmd_handle+0x50e>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    8f6a:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    8f6c:	8818      	ldrh	r0, [r3, #0]
    8f6e:	f008 ff83 	bl	11e78 <ll_rl_timeout_set>
    8f72:	e430      	b.n	87d6 <hci_cmd_handle+0x122>
    8f74:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    8f76:	79c1      	ldrb	r1, [r0, #7]
    8f78:	f008 ff86 	bl	11e88 <ll_priv_mode_set>
    8f7c:	e60d      	b.n	8b9a <hci_cmd_handle+0x4e6>
	rp = cmd_complete(evt, sizeof(*rp));
    8f7e:	2103      	movs	r1, #3
    8f80:	a807      	add	r0, sp, #28
    8f82:	f7ff f9d7 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    8f86:	4601      	mov	r1, r0
    8f88:	2300      	movs	r3, #0
    8f8a:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    8f8e:	3001      	adds	r0, #1
    8f90:	f7ff f832 	bl	7ff8 <ll_tx_pwr_get>
    8f94:	f7ff bbff 	b.w	8796 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8f98:	210d      	movs	r1, #13
    8f9a:	a807      	add	r0, sp, #28
    8f9c:	f7ff f9ca 	bl	8334 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    8fa0:	2202      	movs	r2, #2
    8fa2:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    8fa4:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    8fa6:	2201      	movs	r2, #1
    8fa8:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8faa:	220c      	movs	r2, #12
	rp->status = 0x00;
    8fac:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8fae:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    8fb0:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    8fb2:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    8fb4:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    8fb6:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    8fb8:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8fba:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    8fbc:	7242      	strb	r2, [r0, #9]
    8fbe:	7283      	strb	r3, [r0, #10]
    8fc0:	72c3      	strb	r3, [r0, #11]
    8fc2:	7303      	strb	r3, [r0, #12]
    8fc4:	f7ff bbe7 	b.w	8796 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8fc8:	2141      	movs	r1, #65	; 0x41
    8fca:	a807      	add	r0, sp, #28
    8fcc:	f7ff f9b2 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    8fd0:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8fd2:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8fd4:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    8fd6:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8fda:	f7f8 fe3b 	bl	1c54 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    8fde:	7863      	ldrb	r3, [r4, #1]
    8fe0:	f063 0358 	orn	r3, r3, #88	; 0x58
    8fe4:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    8fe6:	78a3      	ldrb	r3, [r4, #2]
    8fe8:	f043 0303 	orr.w	r3, r3, #3
    8fec:	70a3      	strb	r3, [r4, #2]
    8fee:	f7ff bbd2 	b.w	8796 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8ff2:	2109      	movs	r1, #9
    8ff4:	a807      	add	r0, sp, #28
    8ff6:	f7ff f99d 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    8ffa:	2100      	movs	r1, #0
    8ffc:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9000:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    9002:	f7f8 fe27 	bl	1c54 <memset>
    9006:	f7ff bbc6 	b.w	8796 <hci_cmd_handle+0xe2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    900a:	4b5c      	ldr	r3, [pc, #368]	; (917c <hci_cmd_handle+0xac8>)
    900c:	aa08      	add	r2, sp, #32
    900e:	f103 0628 	add.w	r6, r3, #40	; 0x28
    9012:	4615      	mov	r5, r2
    9014:	6818      	ldr	r0, [r3, #0]
    9016:	6859      	ldr	r1, [r3, #4]
    9018:	4614      	mov	r4, r2
    901a:	c403      	stmia	r4!, {r0, r1}
    901c:	3308      	adds	r3, #8
    901e:	42b3      	cmp	r3, r6
    9020:	4622      	mov	r2, r4
    9022:	d1f7      	bne.n	9014 <hci_cmd_handle+0x960>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    9024:	2129      	movs	r1, #41	; 0x29
    9026:	a807      	add	r0, sp, #28
    9028:	f7ff f984 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    902c:	2300      	movs	r3, #0
    902e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    9032:	2228      	movs	r2, #40	; 0x28
    9034:	4629      	mov	r1, r5
    9036:	e5de      	b.n	8bf6 <hci_cmd_handle+0x542>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    9038:	68a1      	ldr	r1, [r4, #8]
    903a:	2000      	movs	r0, #0
    903c:	f7fe ffc0 	bl	7fc0 <ll_addr_set>
    9040:	f7ff bbc9 	b.w	87d6 <hci_cmd_handle+0x122>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9044:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9048:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    904c:	3201      	adds	r2, #1
    904e:	d106      	bne.n	905e <hci_cmd_handle+0x9aa>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9050:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9054:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9058:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    905a:	4293      	cmp	r3, r2
    905c:	d020      	beq.n	90a0 <hci_cmd_handle+0x9ec>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    905e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    9062:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9066:	07db      	lsls	r3, r3, #31
    9068:	d51a      	bpl.n	90a0 <hci_cmd_handle+0x9ec>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    906a:	2118      	movs	r1, #24
    906c:	a807      	add	r0, sp, #28
    906e:	f7ff f961 	bl	8334 <cmd_complete>
		rp->status = 0x00;
    9072:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    9074:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    9076:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    9078:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    907a:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    907c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    9080:	1ca1      	adds	r1, r4, #2
    9082:	f7ff f913 	bl	82ac <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    9086:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    908a:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    908c:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    9090:	f063 033f 	orn	r3, r3, #63	; 0x3f
    9094:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    9096:	2210      	movs	r2, #16
    9098:	4631      	mov	r1, r6
    909a:	f104 0008 	add.w	r0, r4, #8
    909e:	e7b0      	b.n	9002 <hci_cmd_handle+0x94e>
	rp = cmd_complete(evt, sizeof(*rp));
    90a0:	2102      	movs	r1, #2
    90a2:	a807      	add	r0, sp, #28
    90a4:	f7ff f946 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    90a8:	2300      	movs	r3, #0
    90aa:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    90ac:	7043      	strb	r3, [r0, #1]
    90ae:	f7ff bb72 	b.w	8796 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    90b2:	2121      	movs	r1, #33	; 0x21
    90b4:	a807      	add	r0, sp, #28
    90b6:	f7ff f93d 	bl	8334 <cmd_complete>
	rp->status = 0x00;
    90ba:	4603      	mov	r3, r0
    90bc:	2200      	movs	r2, #0
    90be:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    90c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    90c6:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    90c8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    90cc:	3101      	adds	r1, #1
    90ce:	d04b      	beq.n	9168 <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    90d0:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    90d4:	3101      	adds	r1, #1
    90d6:	d047      	beq.n	9168 <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    90d8:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    90dc:	3101      	adds	r1, #1
    90de:	d043      	beq.n	9168 <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    90e0:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    90e4:	3101      	adds	r1, #1
    90e6:	d03f      	beq.n	9168 <hci_cmd_handle+0xab4>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    90e8:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    90ec:	4619      	mov	r1, r3
    90ee:	f7ff f8dd 	bl	82ac <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    90f2:	1d61      	adds	r1, r4, #5
    90f4:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    90f8:	f7ff f8d8 	bl	82ac <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    90fc:	f104 0109 	add.w	r1, r4, #9
    9100:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    9104:	f7ff f8d2 	bl	82ac <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    9108:	f104 010d 	add.w	r1, r4, #13
    910c:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    9110:	f7ff f8cc 	bl	82ac <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9118:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    911c:	3301      	adds	r3, #1
    911e:	f104 0311 	add.w	r3, r4, #17
    9122:	d027      	beq.n	9174 <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    9124:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9128:	3101      	adds	r1, #1
    912a:	d023      	beq.n	9174 <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    912c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    9130:	3101      	adds	r1, #1
    9132:	d01f      	beq.n	9174 <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    9134:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9138:	3101      	adds	r1, #1
    913a:	d01b      	beq.n	9174 <hci_cmd_handle+0xac0>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    913c:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    9140:	4619      	mov	r1, r3
    9142:	f7ff f8b3 	bl	82ac <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    9146:	f104 0115 	add.w	r1, r4, #21
    914a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    914e:	f7ff f8ad 	bl	82ac <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    9152:	f104 0119 	add.w	r1, r4, #25
    9156:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    915a:	f7ff f8a7 	bl	82ac <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    915e:	f104 011d 	add.w	r1, r4, #29
    9162:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    9166:	e563      	b.n	8c30 <hci_cmd_handle+0x57c>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    9168:	2210      	movs	r2, #16
    916a:	2100      	movs	r1, #0
    916c:	4618      	mov	r0, r3
    916e:	f7f8 fd71 	bl	1c54 <memset>
    9172:	e7cf      	b.n	9114 <hci_cmd_handle+0xa60>
		memset(rp->er, 0x00, sizeof(rp->er));
    9174:	2210      	movs	r2, #16
    9176:	2100      	movs	r1, #0
    9178:	4618      	mov	r0, r3
    917a:	e742      	b.n	9002 <hci_cmd_handle+0x94e>
    917c:	0001698f 	.word	0x0001698f

00009180 <hci_acl_handle>:
{
    9180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    9184:	2300      	movs	r3, #0
    9186:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    9188:	8983      	ldrh	r3, [r0, #12]
    918a:	2b03      	cmp	r3, #3
{
    918c:	4606      	mov	r6, r0
    918e:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    9190:	d80d      	bhi.n	91ae <hci_acl_handle+0x2e>
		BT_ERR("No HCI ACL header");
    9192:	4b3a      	ldr	r3, [pc, #232]	; (927c <hci_acl_handle+0xfc>)
    9194:	9301      	str	r3, [sp, #4]
    9196:	9300      	str	r3, [sp, #0]
    9198:	4a39      	ldr	r2, [pc, #228]	; (9280 <hci_acl_handle+0x100>)
    919a:	4b3a      	ldr	r3, [pc, #232]	; (9284 <hci_acl_handle+0x104>)
    919c:	493a      	ldr	r1, [pc, #232]	; (9288 <hci_acl_handle+0x108>)
    919e:	483b      	ldr	r0, [pc, #236]	; (928c <hci_acl_handle+0x10c>)
		BT_ERR("Invalid HCI ACL packet length");
    91a0:	f7f7 fef4 	bl	f8c <printk>
		return -EINVAL;
    91a4:	f06f 0015 	mvn.w	r0, #21
}
    91a8:	b003      	add	sp, #12
    91aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    91ae:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    91b2:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    91b4:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    91b6:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    91b8:	f009 fdea 	bl	12d90 <net_buf_simple_pull>
	if (buf->len < len) {
    91bc:	89b3      	ldrh	r3, [r6, #12]
    91be:	42bb      	cmp	r3, r7
    91c0:	d207      	bcs.n	91d2 <hci_acl_handle+0x52>
		BT_ERR("Invalid HCI ACL packet length");
    91c2:	4b2e      	ldr	r3, [pc, #184]	; (927c <hci_acl_handle+0xfc>)
    91c4:	9301      	str	r3, [sp, #4]
    91c6:	9300      	str	r3, [sp, #0]
    91c8:	4a2d      	ldr	r2, [pc, #180]	; (9280 <hci_acl_handle+0x100>)
    91ca:	4b2e      	ldr	r3, [pc, #184]	; (9284 <hci_acl_handle+0x104>)
    91cc:	492e      	ldr	r1, [pc, #184]	; (9288 <hci_acl_handle+0x108>)
    91ce:	4830      	ldr	r0, [pc, #192]	; (9290 <hci_acl_handle+0x110>)
    91d0:	e7e6      	b.n	91a0 <hci_acl_handle+0x20>
	node_tx = ll_tx_mem_acquire();
    91d2:	f007 fc57 	bl	10a84 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    91d6:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    91da:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    91dc:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    91e0:	bb30      	cbnz	r0, 9230 <hci_acl_handle+0xb0>
		BT_ERR("Tx Buffer Overflow");
    91e2:	4b26      	ldr	r3, [pc, #152]	; (927c <hci_acl_handle+0xfc>)
    91e4:	9301      	str	r3, [sp, #4]
    91e6:	9300      	str	r3, [sp, #0]
    91e8:	4a25      	ldr	r2, [pc, #148]	; (9280 <hci_acl_handle+0x100>)
    91ea:	4b26      	ldr	r3, [pc, #152]	; (9284 <hci_acl_handle+0x104>)
    91ec:	4926      	ldr	r1, [pc, #152]	; (9288 <hci_acl_handle+0x108>)
    91ee:	4829      	ldr	r0, [pc, #164]	; (9294 <hci_acl_handle+0x114>)
    91f0:	f7f7 fecc 	bl	f8c <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    91f4:	4b28      	ldr	r3, [pc, #160]	; (9298 <hci_acl_handle+0x118>)
    91f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    91fa:	2300      	movs	r3, #0
    91fc:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    9200:	4313      	orrs	r3, r2
    9202:	d012      	beq.n	922a <hci_acl_handle+0xaa>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9208:	2001      	movs	r0, #1
    920a:	f7fa fc51 	bl	3ab0 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    920e:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9210:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    9214:	211a      	movs	r1, #26
    9216:	f7ff f852 	bl	82be <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    921a:	f8d8 0000 	ldr.w	r0, [r8]
    921e:	2101      	movs	r1, #1
    9220:	3008      	adds	r0, #8
    9222:	f009 fd87 	bl	12d34 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    9226:	2301      	movs	r3, #1
    9228:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    922a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    922e:	e7bb      	b.n	91a8 <hci_acl_handle+0x28>
    9230:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    9232:	f1b9 0f00 	cmp.w	r9, #0
    9236:	d002      	beq.n	923e <hci_acl_handle+0xbe>
    9238:	f1b9 0f02 	cmp.w	r9, #2
    923c:	d11c      	bne.n	9278 <hci_acl_handle+0xf8>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    923e:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9240:	f362 0301 	bfi	r3, r2, #0, #2
    9244:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    9246:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    9248:	68b1      	ldr	r1, [r6, #8]
    924a:	463a      	mov	r2, r7
    924c:	1de0      	adds	r0, r4, #7
    924e:	f7f8 fcd5 	bl	1bfc <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    9252:	4621      	mov	r1, r4
    9254:	4628      	mov	r0, r5
    9256:	f007 fc21 	bl	10a9c <ll_tx_mem_enqueue>
    925a:	2800      	cmp	r0, #0
    925c:	d0a4      	beq.n	91a8 <hci_acl_handle+0x28>
		BT_ERR("Invalid Tx Enqueue");
    925e:	4b07      	ldr	r3, [pc, #28]	; (927c <hci_acl_handle+0xfc>)
    9260:	9301      	str	r3, [sp, #4]
    9262:	9300      	str	r3, [sp, #0]
    9264:	4a06      	ldr	r2, [pc, #24]	; (9280 <hci_acl_handle+0x100>)
    9266:	4b07      	ldr	r3, [pc, #28]	; (9284 <hci_acl_handle+0x104>)
    9268:	4907      	ldr	r1, [pc, #28]	; (9288 <hci_acl_handle+0x108>)
    926a:	480c      	ldr	r0, [pc, #48]	; (929c <hci_acl_handle+0x11c>)
    926c:	f7f7 fe8e 	bl	f8c <printk>
		ll_tx_mem_release(node_tx);
    9270:	4620      	mov	r0, r4
    9272:	f007 fc0d 	bl	10a90 <ll_tx_mem_release>
    9276:	e795      	b.n	91a4 <hci_acl_handle+0x24>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9278:	2201      	movs	r2, #1
    927a:	e7e1      	b.n	9240 <hci_acl_handle+0xc0>
    927c:	0001496d 	.word	0x0001496d
    9280:	000156bc 	.word	0x000156bc
    9284:	00016807 	.word	0x00016807
    9288:	0001570b 	.word	0x0001570b
    928c:	000168a5 	.word	0x000168a5
    9290:	000168c7 	.word	0x000168c7
    9294:	000168f5 	.word	0x000168f5
    9298:	20003d30 	.word	0x20003d30
    929c:	00016918 	.word	0x00016918

000092a0 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    92a0:	7a03      	ldrb	r3, [r0, #8]
    92a2:	f003 0303 	and.w	r3, r3, #3
    92a6:	3b01      	subs	r3, #1
    92a8:	2b01      	cmp	r3, #1
{
    92aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    92ac:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    92ae:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    92b0:	d81c      	bhi.n	92ec <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    92b2:	f101 0608 	add.w	r6, r1, #8
    92b6:	4630      	mov	r0, r6
    92b8:	2104      	movs	r1, #4
    92ba:	f009 fd3b 	bl	12d34 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    92be:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    92c0:	7a61      	ldrb	r1, [r4, #9]
    92c2:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    92c4:	f003 0303 	and.w	r3, r3, #3
    92c8:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    92ca:	bf0c      	ite	eq
    92cc:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    92d0:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    92d4:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    92d6:	4630      	mov	r0, r6
    92d8:	f009 fd2c 	bl	12d34 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    92dc:	7a62      	ldrb	r2, [r4, #9]
    92de:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    92e2:	b002      	add	sp, #8
    92e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    92e8:	f7f8 bc88 	b.w	1bfc <memcpy>
		LL_ASSERT(0);
    92ec:	4b07      	ldr	r3, [pc, #28]	; (930c <hci_acl_encode+0x6c>)
    92ee:	9301      	str	r3, [sp, #4]
    92f0:	9300      	str	r3, [sp, #0]
    92f2:	4a07      	ldr	r2, [pc, #28]	; (9310 <hci_acl_encode+0x70>)
    92f4:	4b07      	ldr	r3, [pc, #28]	; (9314 <hci_acl_encode+0x74>)
    92f6:	4908      	ldr	r1, [pc, #32]	; (9318 <hci_acl_encode+0x78>)
    92f8:	4808      	ldr	r0, [pc, #32]	; (931c <hci_acl_encode+0x7c>)
    92fa:	f7f7 fe47 	bl	f8c <printk>
    92fe:	4040      	eors	r0, r0
    9300:	f380 8811 	msr	BASEPRI, r0
    9304:	f04f 0004 	mov.w	r0, #4
    9308:	df02      	svc	2
    930a:	bf00      	nop
    930c:	0001496d 	.word	0x0001496d
    9310:	000156bc 	.word	0x000156bc
    9314:	00016896 	.word	0x00016896
    9318:	0001570b 	.word	0x0001570b
    931c:	0001565b 	.word	0x0001565b

00009320 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    9320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9324:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    9326:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9328:	2b01      	cmp	r3, #1
{
    932a:	b093      	sub	sp, #76	; 0x4c
    932c:	4604      	mov	r4, r0
    932e:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    9330:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9334:	f000 82a6 	beq.w	9884 <hci_evt_encode+0x564>
	switch (node_rx->hdr.type) {
    9338:	3b02      	subs	r3, #2
    933a:	2b0a      	cmp	r3, #10
    933c:	f200 829a 	bhi.w	9874 <hci_evt_encode+0x554>
    9340:	e8df f013 	tbh	[pc, r3, lsl #1]
    9344:	0134000b 	.word	0x0134000b
    9348:	013c013a 	.word	0x013c013a
    934c:	01ba0183 	.word	0x01ba0183
    9350:	01fd01d8 	.word	0x01fd01d8
    9354:	022a0215 	.word	0x022a0215
    9358:	0245      	.short	0x0245
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    935a:	2301      	movs	r3, #1
    935c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    9360:	2303      	movs	r3, #3
    9362:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    9366:	23ff      	movs	r3, #255	; 0xff
    9368:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    936c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    9370:	2302      	movs	r3, #2
    9372:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9376:	7a43      	ldrb	r3, [r0, #9]
    9378:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    937a:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    937c:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    9380:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9382:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    9386:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    9388:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    938a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (adv->tx_addr) {
    938e:	d505      	bpl.n	939c <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    9390:	f104 030a 	add.w	r3, r4, #10
    9394:	464a      	mov	r2, r9
    9396:	4608      	mov	r0, r1
    9398:	f008 fd02 	bl	11da0 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    939c:	4bb8      	ldr	r3, [pc, #736]	; (9680 <hci_evt_encode+0x360>)
    939e:	e9d3 2300 	ldrd	r2, r3, [r3]
    93a2:	2200      	movs	r2, #0
    93a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    93a8:	4313      	orrs	r3, r2
    93aa:	f000 80b9 	beq.w	9520 <hci_evt_encode+0x200>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    93ae:	7a63      	ldrb	r3, [r4, #9]
    93b0:	4423      	add	r3, r4
    93b2:	f893 a00c 	ldrb.w	sl, [r3, #12]
    93b6:	4bb3      	ldr	r3, [pc, #716]	; (9684 <hci_evt_encode+0x364>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    93b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    93bc:	f1ba 0f00 	cmp.w	sl, #0
    93c0:	d13d      	bne.n	943e <hci_evt_encode+0x11e>
    93c2:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    93c6:	2300      	movs	r3, #0
    93c8:	4313      	orrs	r3, r2
    93ca:	f000 80a9 	beq.w	9520 <hci_evt_encode+0x200>
	if (dup_count >= 0) {
    93ce:	4bae      	ldr	r3, [pc, #696]	; (9688 <hci_evt_encode+0x368>)
    93d0:	681a      	ldr	r2, [r3, #0]
    93d2:	2a00      	cmp	r2, #0
    93d4:	4698      	mov	r8, r3
    93d6:	db54      	blt.n	9482 <hci_evt_encode+0x162>
    93d8:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 96b4 <hci_evt_encode+0x394>
    93dc:	2600      	movs	r6, #0
    93de:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    93e2:	f8d8 2000 	ldr.w	r2, [r8]
    93e6:	4296      	cmp	r6, r2
    93e8:	db2c      	blt.n	9444 <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    93ea:	4ea8      	ldr	r6, [pc, #672]	; (968c <hci_evt_encode+0x36c>)
    93ec:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 9690 <hci_evt_encode+0x370>
    93f0:	6830      	ldr	r0, [r6, #0]
    93f2:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    93f6:	4619      	mov	r1, r3
    93f8:	2206      	movs	r2, #6
    93fa:	3002      	adds	r0, #2
    93fc:	f7f8 fbfe 	bl	1bfc <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    9400:	6832      	ldr	r2, [r6, #0]
    9402:	7a23      	ldrb	r3, [r4, #8]
    9404:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    9408:	f3c3 1380 	ubfx	r3, r3, #6, #1
    940c:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    940e:	7a23      	ldrb	r3, [r4, #8]
    9410:	f003 010f 	and.w	r1, r3, #15
    9414:	2301      	movs	r3, #1
    9416:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9418:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    941c:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9420:	290f      	cmp	r1, #15
			dup_count++;
    9422:	bfd5      	itete	le
    9424:	3101      	addle	r1, #1
			dup_curr++;
    9426:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    9428:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    942a:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    942c:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    942e:	bfd8      	it	le
    9430:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9434:	2a10      	cmp	r2, #16
    9436:	d124      	bne.n	9482 <hci_evt_encode+0x162>
			dup_curr = 0;
    9438:	2200      	movs	r2, #0
    943a:	6032      	str	r2, [r6, #0]
    943c:	e021      	b.n	9482 <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    943e:	f002 020b 	and.w	r2, r2, #11
    9442:	e7c0      	b.n	93c6 <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    9444:	4618      	mov	r0, r3
    9446:	2206      	movs	r2, #6
    9448:	4659      	mov	r1, fp
    944a:	9307      	str	r3, [sp, #28]
    944c:	f7f8 fbc1 	bl	1bd2 <memcmp>
    9450:	9b07      	ldr	r3, [sp, #28]
    9452:	bb00      	cbnz	r0, 9496 <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    9454:	7a21      	ldrb	r1, [r4, #8]
    9456:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    945a:	460a      	mov	r2, r1
    945c:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    9460:	4281      	cmp	r1, r0
    9462:	d118      	bne.n	9496 <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    9464:	488a      	ldr	r0, [pc, #552]	; (9690 <hci_evt_encode+0x370>)
    9466:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    946a:	f002 020f 	and.w	r2, r2, #15
    946e:	fa23 f102 	lsr.w	r1, r3, r2
    9472:	07c9      	lsls	r1, r1, #31
    9474:	d454      	bmi.n	9520 <hci_evt_encode+0x200>
				dup_filter[i].mask |= BIT(adv->type);
    9476:	2101      	movs	r1, #1
    9478:	fa01 f202 	lsl.w	r2, r1, r2
    947c:	4313      	orrs	r3, r2
    947e:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    9482:	f894 b008 	ldrb.w	fp, [r4, #8]
    9486:	7a63      	ldrb	r3, [r4, #9]
    9488:	f00b 0b0f 	and.w	fp, fp, #15
    948c:	f1bb 0f01 	cmp.w	fp, #1
    9490:	d105      	bne.n	949e <hci_evt_encode+0x17e>
		data_len = 0;
    9492:	2600      	movs	r6, #0
    9494:	e005      	b.n	94a2 <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    9496:	3601      	adds	r6, #1
    9498:	f10b 0b08 	add.w	fp, fp, #8
    949c:	e7a1      	b.n	93e2 <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    949e:	1f9e      	subs	r6, r3, #6
    94a0:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    94a2:	4423      	add	r3, r4
    94a4:	f893 800a 	ldrb.w	r8, [r3, #10]
    94a8:	f1c8 0800 	rsb	r8, r8, #0
    94ac:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    94b0:	f1ba 0f00 	cmp.w	sl, #0
    94b4:	d041      	beq.n	953a <hci_evt_encode+0x21a>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    94b6:	f1bb 0f01 	cmp.w	fp, #1
    94ba:	d00e      	beq.n	94da <hci_evt_encode+0x1ba>
    94bc:	4b75      	ldr	r3, [pc, #468]	; (9694 <hci_evt_encode+0x374>)
    94be:	9301      	str	r3, [sp, #4]
    94c0:	9300      	str	r3, [sp, #0]
    94c2:	4a75      	ldr	r2, [pc, #468]	; (9698 <hci_evt_encode+0x378>)
    94c4:	4b75      	ldr	r3, [pc, #468]	; (969c <hci_evt_encode+0x37c>)
    94c6:	4976      	ldr	r1, [pc, #472]	; (96a0 <hci_evt_encode+0x380>)
    94c8:	4876      	ldr	r0, [pc, #472]	; (96a4 <hci_evt_encode+0x384>)
		LL_ASSERT(0);
    94ca:	f7f7 fd5f 	bl	f8c <printk>
    94ce:	4040      	eors	r0, r0
    94d0:	f380 8811 	msr	BASEPRI, r0
    94d4:	f04f 0004 	mov.w	r0, #4
    94d8:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    94da:	2211      	movs	r2, #17
    94dc:	210b      	movs	r1, #11
    94de:	4628      	mov	r0, r5
    94e0:	f7fe ff12 	bl	8308 <meta_evt>
		drp->num_reports = 1;
    94e4:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    94e8:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    94ec:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    94ee:	f008 fb2d 	bl	11b4c <ll_rl_size_get>
    94f2:	4581      	cmp	r9, r0
    94f4:	f105 0003 	add.w	r0, r5, #3
    94f8:	d215      	bcs.n	9526 <hci_evt_encode+0x206>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    94fa:	4602      	mov	r2, r0
    94fc:	1ca9      	adds	r1, r5, #2
    94fe:	4648      	mov	r0, r9
    9500:	f008 f9c2 	bl	11888 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    9504:	78ab      	ldrb	r3, [r5, #2]
    9506:	3302      	adds	r3, #2
    9508:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    950a:	2301      	movs	r3, #1
    950c:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    950e:	2206      	movs	r2, #6
    9510:	f107 0108 	add.w	r1, r7, #8
    9514:	f105 000a 	add.w	r0, r5, #10
    9518:	f7f8 fb70 	bl	1bfc <memcpy>
		dir_info->rssi = rssi;
    951c:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    9520:	b013      	add	sp, #76	; 0x4c
    9522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    9526:	7a23      	ldrb	r3, [r4, #8]
    9528:	f3c3 1380 	ubfx	r3, r3, #6, #1
    952c:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    952e:	2206      	movs	r2, #6
    9530:	f104 010a 	add.w	r1, r4, #10
    9534:	f7f8 fb62 	bl	1bfc <memcpy>
    9538:	e7e7      	b.n	950a <hci_evt_encode+0x1ea>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    953a:	f106 020b 	add.w	r2, r6, #11
    953e:	b2d2      	uxtb	r2, r2
    9540:	2102      	movs	r1, #2
    9542:	4628      	mov	r0, r5
    9544:	f7fe fee0 	bl	8308 <meta_evt>
	sep->num_reports = 1;
    9548:	2301      	movs	r3, #1
    954a:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    954c:	7a23      	ldrb	r3, [r4, #8]
    954e:	aa12      	add	r2, sp, #72	; 0x48
    9550:	f003 030f 	and.w	r3, r3, #15
    9554:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    9556:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    9558:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    955c:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    955e:	7a63      	ldrb	r3, [r4, #9]
    9560:	4423      	add	r3, r4
    9562:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    9566:	f008 faf1 	bl	11b4c <ll_rl_size_get>
    956a:	4581      	cmp	r9, r0
    956c:	f105 0003 	add.w	r0, r5, #3
    9570:	d212      	bcs.n	9598 <hci_evt_encode+0x278>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    9572:	4602      	mov	r2, r0
    9574:	1ca9      	adds	r1, r5, #2
    9576:	4648      	mov	r0, r9
    9578:	f008 f986 	bl	11888 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    957c:	78ab      	ldrb	r3, [r5, #2]
    957e:	3302      	adds	r3, #2
    9580:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    9582:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    9584:	350a      	adds	r5, #10
    9586:	4632      	mov	r2, r6
    9588:	f107 0108 	add.w	r1, r7, #8
    958c:	4628      	mov	r0, r5
    958e:	f7f8 fb35 	bl	1bfc <memcpy>
	*prssi = rssi;
    9592:	f805 8006 	strb.w	r8, [r5, r6]
    9596:	e7c3      	b.n	9520 <hci_evt_encode+0x200>
		adv_info->addr.type = adv->tx_addr;
    9598:	7a23      	ldrb	r3, [r4, #8]
    959a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    959e:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    95a0:	2206      	movs	r2, #6
    95a2:	f104 010a 	add.w	r1, r4, #10
    95a6:	f7f8 fb29 	bl	1bfc <memcpy>
    95aa:	e7ea      	b.n	9582 <hci_evt_encode+0x262>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    95ac:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    95ae:	4621      	mov	r1, r4
    95b0:	4638      	mov	r0, r7
    95b2:	f7ff f801 	bl	85b8 <le_adv_ext_report.isra.66>
    95b6:	e7b3      	b.n	9520 <hci_evt_encode+0x200>
    95b8:	2204      	movs	r2, #4
    95ba:	e7f8      	b.n	95ae <hci_evt_encode+0x28e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    95bc:	4b30      	ldr	r3, [pc, #192]	; (9680 <hci_evt_encode+0x360>)
    95be:	e9d3 2300 	ldrd	r2, r3, [r3]
    95c2:	2200      	movs	r2, #0
    95c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    95c8:	4313      	orrs	r3, r2
    95ca:	f100 060a 	add.w	r6, r0, #10
    95ce:	d007      	beq.n	95e0 <hci_evt_encode+0x2c0>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    95d0:	4b2c      	ldr	r3, [pc, #176]	; (9684 <hci_evt_encode+0x364>)
    95d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    95d6:	2300      	movs	r3, #0
    95d8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    95dc:	4313      	orrs	r3, r2
    95de:	d123      	bne.n	9628 <hci_evt_encode+0x308>
		addr.type = adv->tx_addr;
    95e0:	7a23      	ldrb	r3, [r4, #8]
    95e2:	ad12      	add	r5, sp, #72	; 0x48
    95e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    95e8:	2206      	movs	r2, #6
    95ea:	4631      	mov	r1, r6
    95ec:	f10d 0025 	add.w	r0, sp, #37	; 0x25
		addr.type = adv->tx_addr;
    95f0:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    95f4:	f7f8 fb02 	bl	1bfc <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    95f8:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    95fa:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    95fc:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    95fe:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9600:	4631      	mov	r1, r6
    9602:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9604:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9606:	f7fe ff9b 	bl	8540 <bt_addr_le_to_str.constprop.70>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    960a:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    960c:	4b21      	ldr	r3, [pc, #132]	; (9694 <hci_evt_encode+0x374>)
    960e:	9304      	str	r3, [sp, #16]
    9610:	2200      	movs	r2, #0
    9612:	9201      	str	r2, [sp, #4]
    9614:	9300      	str	r3, [sp, #0]
    9616:	9403      	str	r4, [sp, #12]
    9618:	9602      	str	r6, [sp, #8]
    961a:	4b23      	ldr	r3, [pc, #140]	; (96a8 <hci_evt_encode+0x388>)
    961c:	4a23      	ldr	r2, [pc, #140]	; (96ac <hci_evt_encode+0x38c>)
    961e:	4920      	ldr	r1, [pc, #128]	; (96a0 <hci_evt_encode+0x380>)
    9620:	4823      	ldr	r0, [pc, #140]	; (96b0 <hci_evt_encode+0x390>)
    9622:	f7f7 fcb3 	bl	f8c <printk>
    9626:	e77b      	b.n	9520 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    9628:	2208      	movs	r2, #8
    962a:	2113      	movs	r1, #19
    962c:	4628      	mov	r0, r5
    962e:	f7fe fe6b 	bl	8308 <meta_evt>
	sep->handle = 0;
    9632:	2300      	movs	r3, #0
    9634:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    9636:	7a23      	ldrb	r3, [r4, #8]
    9638:	f3c3 1380 	ubfx	r3, r3, #6, #1
    963c:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    963e:	2206      	movs	r2, #6
    9640:	4631      	mov	r1, r6
    9642:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    9644:	f7f8 fada 	bl	1bfc <memcpy>
    9648:	e76a      	b.n	9520 <hci_evt_encode+0x200>
			le_conn_complete(cc->status, cc, handle, buf);
    964a:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    964c:	b93f      	cbnz	r7, 965e <hci_evt_encode+0x33e>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    964e:	f100 0314 	add.w	r3, r0, #20
    9652:	f100 010e 	add.w	r1, r0, #14
    9656:	22ff      	movs	r2, #255	; 0xff
    9658:	7b40      	ldrb	r0, [r0, #13]
    965a:	f008 fba1 	bl	11da0 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    965e:	4b08      	ldr	r3, [pc, #32]	; (9680 <hci_evt_encode+0x360>)
    9660:	e9d3 2300 	ldrd	r2, r3, [r3]
    9664:	2200      	movs	r2, #0
    9666:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    966a:	4313      	orrs	r3, r2
    966c:	f43f af58 	beq.w	9520 <hci_evt_encode+0x200>
    9670:	462b      	mov	r3, r5
    9672:	4632      	mov	r2, r6
    9674:	f104 010b 	add.w	r1, r4, #11
    9678:	4638      	mov	r0, r7
    967a:	f7fe fecb 	bl	8414 <le_conn_complete.part.39>
    967e:	e74f      	b.n	9520 <hci_evt_encode+0x200>
    9680:	20003d30 	.word	0x20003d30
    9684:	20003d38 	.word	0x20003d38
    9688:	20000838 	.word	0x20000838
    968c:	2000083c 	.word	0x2000083c
    9690:	20000840 	.word	0x20000840
    9694:	0001496d 	.word	0x0001496d
    9698:	000156bc 	.word	0x000156bc
    969c:	00016816 	.word	0x00016816
    96a0:	0001570b 	.word	0x0001570b
    96a4:	000169b7 	.word	0x000169b7
    96a8:	0001683e 	.word	0x0001683e
    96ac:	00015704 	.word	0x00015704
    96b0:	000169fd 	.word	0x000169fd
    96b4:	20000842 	.word	0x20000842
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    96b8:	4bb2      	ldr	r3, [pc, #712]	; (9984 <hci_evt_encode+0x664>)
    96ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    96be:	2300      	movs	r3, #0
    96c0:	f002 0210 	and.w	r2, r2, #16
    96c4:	4313      	orrs	r3, r2
    96c6:	f43f af2b 	beq.w	9520 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    96ca:	2204      	movs	r2, #4
    96cc:	2105      	movs	r1, #5
    96ce:	4628      	mov	r0, r5
    96d0:	f7fe fdf5 	bl	82be <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    96d4:	2104      	movs	r1, #4
    96d6:	f105 0008 	add.w	r0, r5, #8
    96da:	f009 fb2b 	bl	12d34 <net_buf_simple_add>
	ep->status = 0x00;
    96de:	2300      	movs	r3, #0
	conn_count--;
    96e0:	4aa9      	ldr	r2, [pc, #676]	; (9988 <hci_evt_encode+0x668>)
	ep->status = 0x00;
    96e2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    96e4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    96e8:	7a23      	ldrb	r3, [r4, #8]
    96ea:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    96ec:	6813      	ldr	r3, [r2, #0]
    96ee:	3b01      	subs	r3, #1
    96f0:	6013      	str	r3, [r2, #0]
    96f2:	e715      	b.n	9520 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    96f4:	4ba3      	ldr	r3, [pc, #652]	; (9984 <hci_evt_encode+0x664>)
    96f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    96fa:	2200      	movs	r2, #0
    96fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9700:	4313      	orrs	r3, r2
    9702:	f43f af0d 	beq.w	9520 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    9706:	4ba1      	ldr	r3, [pc, #644]	; (998c <hci_evt_encode+0x66c>)
    9708:	e9d3 2300 	ldrd	r2, r3, [r3]
    970c:	2300      	movs	r3, #0
    970e:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9712:	4313      	orrs	r3, r2
    9714:	f43f af04 	beq.w	9520 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    9718:	2209      	movs	r2, #9
    971a:	2103      	movs	r1, #3
    971c:	4628      	mov	r0, r5
    971e:	f7fe fdf3 	bl	8308 <meta_evt>
	sep->status = radio_cu->status;
    9722:	7ae3      	ldrb	r3, [r4, #11]
    9724:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    9726:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    9728:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    972c:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    9730:	89e3      	ldrh	r3, [r4, #14]
    9732:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    9736:	8a23      	ldrh	r3, [r4, #16]
    9738:	f8a0 3007 	strh.w	r3, [r0, #7]
    973c:	e6f0      	b.n	9520 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    973e:	4b91      	ldr	r3, [pc, #580]	; (9984 <hci_evt_encode+0x664>)
    9740:	e9d3 2300 	ldrd	r2, r3, [r3]
    9744:	2200      	movs	r2, #0
    9746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    974a:	4313      	orrs	r3, r2
    974c:	f43f aee8 	beq.w	9520 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    9750:	2203      	movs	r2, #3
    9752:	2130      	movs	r1, #48	; 0x30
    9754:	4628      	mov	r0, r5
    9756:	f7fe fdb2 	bl	82be <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    975a:	2103      	movs	r1, #3
    975c:	f105 0008 	add.w	r0, r5, #8
    9760:	f009 fae8 	bl	12d34 <net_buf_simple_add>
	ep->status = 0x00;
    9764:	2300      	movs	r3, #0
    9766:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9768:	f8a0 6001 	strh.w	r6, [r0, #1]
    976c:	e6d8      	b.n	9520 <hci_evt_encode+0x200>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    976e:	4b88      	ldr	r3, [pc, #544]	; (9990 <hci_evt_encode+0x670>)
    9770:	e9d3 2300 	ldrd	r2, r3, [r3]
    9774:	2300      	movs	r3, #0
    9776:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    977a:	4313      	orrs	r3, r2
    977c:	f43f aed0 	beq.w	9520 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    9780:	2202      	movs	r2, #2
    9782:	2157      	movs	r1, #87	; 0x57
    9784:	4628      	mov	r0, r5
    9786:	f7fe fd9a 	bl	82be <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    978a:	2102      	movs	r1, #2
    978c:	f105 0008 	add.w	r0, r5, #8
    9790:	f009 fad0 	bl	12d34 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    9794:	8006      	strh	r6, [r0, #0]
    9796:	e6c3      	b.n	9520 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9798:	4b7a      	ldr	r3, [pc, #488]	; (9984 <hci_evt_encode+0x664>)
    979a:	e9d3 2300 	ldrd	r2, r3, [r3]
    979e:	2200      	movs	r2, #0
    97a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    97a4:	4313      	orrs	r3, r2
    97a6:	f43f aebb 	beq.w	9520 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    97aa:	4b78      	ldr	r3, [pc, #480]	; (998c <hci_evt_encode+0x66c>)
    97ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    97b0:	2300      	movs	r3, #0
    97b2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    97b6:	4313      	orrs	r3, r2
    97b8:	f43f aeb2 	beq.w	9520 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    97bc:	2203      	movs	r2, #3
    97be:	2114      	movs	r1, #20
    97c0:	4628      	mov	r0, r5
    97c2:	f7fe fda1 	bl	8308 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    97c6:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    97c8:	7ae3      	ldrb	r3, [r4, #11]
    97ca:	7083      	strb	r3, [r0, #2]
    97cc:	e6a8      	b.n	9520 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    97ce:	4b6d      	ldr	r3, [pc, #436]	; (9984 <hci_evt_encode+0x664>)
    97d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    97d4:	2200      	movs	r2, #0
    97d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    97da:	4313      	orrs	r3, r2
    97dc:	d007      	beq.n	97ee <hci_evt_encode+0x4ce>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    97de:	4b6b      	ldr	r3, [pc, #428]	; (998c <hci_evt_encode+0x66c>)
    97e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    97e4:	2300      	movs	r3, #0
    97e6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    97ea:	4313      	orrs	r3, r2
    97ec:	d122      	bne.n	9834 <hci_evt_encode+0x514>
    97ee:	7b22      	ldrb	r2, [r4, #12]
    97f0:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    97f2:	4868      	ldr	r0, [pc, #416]	; (9994 <hci_evt_encode+0x674>)
    97f4:	2a00      	cmp	r2, #0
    97f6:	fa92 f3a2 	rbit	r3, r2
    97fa:	fab3 f383 	clz	r3, r3
    97fe:	fa91 f2a1 	rbit	r2, r1
    9802:	bf08      	it	eq
    9804:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9808:	2900      	cmp	r1, #0
    980a:	fab2 f282 	clz	r2, r2
    980e:	bf08      	it	eq
    9810:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    9814:	4960      	ldr	r1, [pc, #384]	; (9998 <hci_evt_encode+0x678>)
    9816:	9105      	str	r1, [sp, #20]
    9818:	3301      	adds	r3, #1
    981a:	3201      	adds	r2, #1
    981c:	9204      	str	r2, [sp, #16]
    981e:	9303      	str	r3, [sp, #12]
    9820:	7ae3      	ldrb	r3, [r4, #11]
    9822:	9302      	str	r3, [sp, #8]
    9824:	e88d 0042 	stmia.w	sp, {r1, r6}
    9828:	4b5c      	ldr	r3, [pc, #368]	; (999c <hci_evt_encode+0x67c>)
    982a:	4a5d      	ldr	r2, [pc, #372]	; (99a0 <hci_evt_encode+0x680>)
    982c:	495d      	ldr	r1, [pc, #372]	; (99a4 <hci_evt_encode+0x684>)
    982e:	f7f7 fbad 	bl	f8c <printk>
    9832:	e675      	b.n	9520 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    9834:	2205      	movs	r2, #5
    9836:	210c      	movs	r1, #12
    9838:	4628      	mov	r0, r5
    983a:	f7fe fd65 	bl	8308 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    983e:	7ae3      	ldrb	r3, [r4, #11]
    9840:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9842:	f8a0 6001 	strh.w	r6, [r0, #1]
    9846:	7b22      	ldrb	r2, [r4, #12]
    9848:	2a00      	cmp	r2, #0
    984a:	fa92 f3a2 	rbit	r3, r2
    984e:	fab3 f383 	clz	r3, r3
    9852:	bf08      	it	eq
    9854:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9858:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    985a:	70c3      	strb	r3, [r0, #3]
    985c:	7b62      	ldrb	r2, [r4, #13]
    985e:	fa92 f3a2 	rbit	r3, r2
    9862:	2a00      	cmp	r2, #0
    9864:	fab3 f383 	clz	r3, r3
    9868:	bf08      	it	eq
    986a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    986e:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    9870:	7103      	strb	r3, [r0, #4]
    9872:	e655      	b.n	9520 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    9874:	4b48      	ldr	r3, [pc, #288]	; (9998 <hci_evt_encode+0x678>)
    9876:	9301      	str	r3, [sp, #4]
    9878:	9300      	str	r3, [sp, #0]
    987a:	4b4b      	ldr	r3, [pc, #300]	; (99a8 <hci_evt_encode+0x688>)
    987c:	4a4b      	ldr	r2, [pc, #300]	; (99ac <hci_evt_encode+0x68c>)
    987e:	4949      	ldr	r1, [pc, #292]	; (99a4 <hci_evt_encode+0x684>)
    9880:	484b      	ldr	r0, [pc, #300]	; (99b0 <hci_evt_encode+0x690>)
    9882:	e622      	b.n	94ca <hci_evt_encode+0x1aa>
	switch (pdu_data->llctrl.opcode) {
    9884:	7ac3      	ldrb	r3, [r0, #11]
    9886:	3b03      	subs	r3, #3
    9888:	2b12      	cmp	r3, #18
    988a:	f200 80d5 	bhi.w	9a38 <hci_evt_encode+0x718>
    988e:	e8df f003 	tbb	[pc, r3]
    9892:	d30a      	.short	0xd30a
    9894:	d3c02fd3 	.word	0xd3c02fd3
    9898:	3cd3d335 	.word	0x3cd3d335
    989c:	d35fd35b 	.word	0xd35fd35b
    98a0:	a0d3d3d3 	.word	0xa0d3d3d3
    98a4:	a0          	.byte	0xa0
    98a5:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    98a6:	4b37      	ldr	r3, [pc, #220]	; (9984 <hci_evt_encode+0x664>)
    98a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    98ac:	2200      	movs	r2, #0
    98ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    98b2:	4313      	orrs	r3, r2
    98b4:	f43f ae34 	beq.w	9520 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    98b8:	4b34      	ldr	r3, [pc, #208]	; (998c <hci_evt_encode+0x66c>)
    98ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    98be:	2300      	movs	r3, #0
    98c0:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    98c4:	4313      	orrs	r3, r2
    98c6:	f43f ae2b 	beq.w	9520 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    98ca:	220c      	movs	r2, #12
    98cc:	2105      	movs	r1, #5
    98ce:	4628      	mov	r0, r5
    98d0:	f7fe fd1a 	bl	8308 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    98d4:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    98d6:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    98d8:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    98dc:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    98e0:	f7f8 f98c 	bl	1bfc <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    98e4:	2202      	movs	r2, #2
    98e6:	f104 0114 	add.w	r1, r4, #20
    98ea:	f105 000a 	add.w	r0, r5, #10
    98ee:	e6a9      	b.n	9644 <hci_evt_encode+0x324>
		encrypt_change(0x00, handle, buf);
    98f0:	460a      	mov	r2, r1
    98f2:	2000      	movs	r0, #0
    98f4:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    98f6:	f7fe fd3f 	bl	8378 <encrypt_change>
    98fa:	e611      	b.n	9520 <hci_evt_encode+0x200>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    98fc:	460b      	mov	r3, r1
    98fe:	4632      	mov	r2, r6
    9900:	4639      	mov	r1, r7
    9902:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9904:	f7fe fd58 	bl	83b8 <le_remote_feat_complete>
    9908:	e60a      	b.n	9520 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    990a:	4b1e      	ldr	r3, [pc, #120]	; (9984 <hci_evt_encode+0x664>)
    990c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9910:	2300      	movs	r3, #0
    9912:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    9916:	4313      	orrs	r3, r2
    9918:	f43f ae02 	beq.w	9520 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    991c:	2208      	movs	r2, #8
    991e:	210c      	movs	r1, #12
    9920:	4628      	mov	r0, r5
    9922:	f7fe fccc 	bl	82be <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9926:	2108      	movs	r1, #8
    9928:	1868      	adds	r0, r5, r1
    992a:	f009 fa03 	bl	12d34 <net_buf_simple_add>
	ep->status = 0x00;
    992e:	2300      	movs	r3, #0
    9930:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9932:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    9936:	7b23      	ldrb	r3, [r4, #12]
    9938:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    993a:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    993e:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    9940:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    9944:	80c3      	strh	r3, [r0, #6]
    9946:	e5eb      	b.n	9520 <hci_evt_encode+0x200>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    9948:	460a      	mov	r2, r1
    994a:	7b00      	ldrb	r0, [r0, #12]
    994c:	4631      	mov	r1, r6
    994e:	e7d2      	b.n	98f6 <hci_evt_encode+0x5d6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9950:	4b0c      	ldr	r3, [pc, #48]	; (9984 <hci_evt_encode+0x664>)
    9952:	e9d3 2300 	ldrd	r2, r3, [r3]
    9956:	2200      	movs	r2, #0
    9958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    995c:	4313      	orrs	r3, r2
    995e:	d007      	beq.n	9970 <hci_evt_encode+0x650>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    9960:	4b0a      	ldr	r3, [pc, #40]	; (998c <hci_evt_encode+0x66c>)
    9962:	e9d3 2300 	ldrd	r2, r3, [r3]
    9966:	2300      	movs	r3, #0
    9968:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    996c:	4313      	orrs	r3, r2
    996e:	d121      	bne.n	99b4 <hci_evt_encode+0x694>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9970:	2300      	movs	r3, #0
    9972:	9301      	str	r3, [sp, #4]
    9974:	9300      	str	r3, [sp, #0]
    9976:	221a      	movs	r2, #26
    9978:	2102      	movs	r1, #2
    997a:	4630      	mov	r0, r6
    997c:	f006 fdda 	bl	10534 <ll_conn_update>
    9980:	e5ce      	b.n	9520 <hci_evt_encode+0x200>
    9982:	bf00      	nop
    9984:	20003d30 	.word	0x20003d30
    9988:	20000834 	.word	0x20000834
    998c:	20003d38 	.word	0x20003d38
    9990:	200008c0 	.word	0x200008c0
    9994:	00016a30 	.word	0x00016a30
    9998:	0001496d 	.word	0x0001496d
    999c:	00016853 	.word	0x00016853
    99a0:	00015704 	.word	0x00015704
    99a4:	0001570b 	.word	0x0001570b
    99a8:	00016867 	.word	0x00016867
    99ac:	000156bc 	.word	0x000156bc
    99b0:	0001565b 	.word	0x0001565b
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    99b4:	220a      	movs	r2, #10
    99b6:	2106      	movs	r1, #6
    99b8:	4628      	mov	r0, r5
    99ba:	f7fe fca5 	bl	8308 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    99be:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    99c0:	89a3      	ldrh	r3, [r4, #12]
    99c2:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    99c4:	89e3      	ldrh	r3, [r4, #14]
    99c6:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    99c8:	8a23      	ldrh	r3, [r4, #16]
    99ca:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    99cc:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    99ce:	8103      	strh	r3, [r0, #8]
    99d0:	e5a6      	b.n	9520 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    99d2:	4b1c      	ldr	r3, [pc, #112]	; (9a44 <hci_evt_encode+0x724>)
    99d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    99d8:	2200      	movs	r2, #0
    99da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    99de:	4313      	orrs	r3, r2
    99e0:	f43f ad9e 	beq.w	9520 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    99e4:	4b18      	ldr	r3, [pc, #96]	; (9a48 <hci_evt_encode+0x728>)
    99e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    99ea:	2300      	movs	r3, #0
    99ec:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    99f0:	4313      	orrs	r3, r2
    99f2:	f43f ad95 	beq.w	9520 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    99f6:	220a      	movs	r2, #10
    99f8:	2107      	movs	r1, #7
    99fa:	4628      	mov	r0, r5
    99fc:	f7fe fc84 	bl	8308 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9a00:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    9a02:	8a23      	ldrh	r3, [r4, #16]
    9a04:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    9a06:	8a63      	ldrh	r3, [r4, #18]
    9a08:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    9a0a:	89a3      	ldrh	r3, [r4, #12]
    9a0c:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    9a0e:	89e3      	ldrh	r3, [r4, #14]
    9a10:	e7dd      	b.n	99ce <hci_evt_encode+0x6ae>
    9a12:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    9a14:	2a0e      	cmp	r2, #14
    9a16:	d104      	bne.n	9a22 <hci_evt_encode+0x702>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9a18:	460b      	mov	r3, r1
    9a1a:	4632      	mov	r2, r6
    9a1c:	2100      	movs	r1, #0
    9a1e:	201a      	movs	r0, #26
    9a20:	e770      	b.n	9904 <hci_evt_encode+0x5e4>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    9a22:	4b0a      	ldr	r3, [pc, #40]	; (9a4c <hci_evt_encode+0x72c>)
    9a24:	9302      	str	r3, [sp, #8]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    9a26:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    9a28:	9300      	str	r3, [sp, #0]
    9a2a:	4a09      	ldr	r2, [pc, #36]	; (9a50 <hci_evt_encode+0x730>)
    9a2c:	4b09      	ldr	r3, [pc, #36]	; (9a54 <hci_evt_encode+0x734>)
    9a2e:	490a      	ldr	r1, [pc, #40]	; (9a58 <hci_evt_encode+0x738>)
    9a30:	480a      	ldr	r0, [pc, #40]	; (9a5c <hci_evt_encode+0x73c>)
    9a32:	f7f7 faab 	bl	f8c <printk>
    9a36:	e573      	b.n	9520 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    9a38:	4b04      	ldr	r3, [pc, #16]	; (9a4c <hci_evt_encode+0x72c>)
    9a3a:	9301      	str	r3, [sp, #4]
    9a3c:	9300      	str	r3, [sp, #0]
    9a3e:	4b08      	ldr	r3, [pc, #32]	; (9a60 <hci_evt_encode+0x740>)
    9a40:	e71c      	b.n	987c <hci_evt_encode+0x55c>
    9a42:	bf00      	nop
    9a44:	20003d30 	.word	0x20003d30
    9a48:	20003d38 	.word	0x20003d38
    9a4c:	0001496d 	.word	0x0001496d
    9a50:	00015704 	.word	0x00015704
    9a54:	00016876 	.word	0x00016876
    9a58:	0001570b 	.word	0x0001570b
    9a5c:	00016a6c 	.word	0x00016a6c
    9a60:	00016885 	.word	0x00016885

00009a64 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    9a64:	b570      	push	{r4, r5, r6, lr}
    9a66:	4606      	mov	r6, r0
    9a68:	460d      	mov	r5, r1
    9a6a:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    9a6c:	2113      	movs	r1, #19
    9a6e:	2205      	movs	r2, #5
    9a70:	f7fe fc25 	bl	82be <evt_create>

	ep = net_buf_add(buf, len);
    9a74:	2105      	movs	r1, #5
    9a76:	f106 0008 	add.w	r0, r6, #8
    9a7a:	f009 f95b 	bl	12d34 <net_buf_simple_add>
	ep->num_handles = num_handles;
    9a7e:	2301      	movs	r3, #1
    9a80:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    9a82:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    9a86:	f8a0 4003 	strh.w	r4, [r0, #3]
    9a8a:	bd70      	pop	{r4, r5, r6, pc}

00009a8c <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9a8c:	7903      	ldrb	r3, [r0, #4]
    9a8e:	2b01      	cmp	r3, #1
    9a90:	d006      	beq.n	9aa0 <hci_get_class+0x14>
    9a92:	3b02      	subs	r3, #2
    9a94:	b2db      	uxtb	r3, r3
    9a96:	2b0a      	cmp	r3, #10
    9a98:	d80a      	bhi.n	9ab0 <hci_get_class+0x24>
    9a9a:	4a07      	ldr	r2, [pc, #28]	; (9ab8 <hci_get_class+0x2c>)
    9a9c:	56d0      	ldrsb	r0, [r2, r3]
    9a9e:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    9aa0:	7a03      	ldrb	r3, [r0, #8]
    9aa2:	f003 0303 	and.w	r3, r3, #3
    9aa6:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    9aa8:	bf0c      	ite	eq
    9aaa:	2002      	moveq	r0, #2
    9aac:	2003      	movne	r0, #3
    9aae:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    9ab4:	4770      	bx	lr
    9ab6:	bf00      	nop
    9ab8:	000167ed 	.word	0x000167ed

00009abc <hci_init>:
	dup_count = -1;
    9abc:	4b0a      	ldr	r3, [pc, #40]	; (9ae8 <hci_init+0x2c>)
    9abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9ac2:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    9ac4:	4b09      	ldr	r3, [pc, #36]	; (9aec <hci_init+0x30>)
    9ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9aca:	f641 71ff 	movw	r1, #8191	; 0x1fff
    9ace:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9ad2:	4b07      	ldr	r3, [pc, #28]	; (9af0 <hci_init+0x34>)
    9ad4:	2000      	movs	r0, #0
    9ad6:	2100      	movs	r1, #0
    9ad8:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9adc:	4b05      	ldr	r3, [pc, #20]	; (9af4 <hci_init+0x38>)
    9ade:	201f      	movs	r0, #31
    9ae0:	2100      	movs	r1, #0
    9ae2:	e9c3 0100 	strd	r0, r1, [r3]
    9ae6:	4770      	bx	lr
    9ae8:	20000838 	.word	0x20000838
    9aec:	20003d30 	.word	0x20003d30
    9af0:	200008c0 	.word	0x200008c0
    9af4:	20003d38 	.word	0x20003d38

00009af8 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    9af8:	bf20      	wfe
	__SEV();
    9afa:	bf40      	sev
	__WFE();
    9afc:	bf20      	wfe
    9afe:	4770      	bx	lr

00009b00 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    9b00:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    9b02:	4b0d      	ldr	r3, [pc, #52]	; (9b38 <pdu_len_cmp+0x38>)
{
    9b04:	b089      	sub	sp, #36	; 0x24
    9b06:	4605      	mov	r5, r0
    9b08:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    9b0a:	aa01      	add	r2, sp, #4
    9b0c:	f103 0718 	add.w	r7, r3, #24
    9b10:	6818      	ldr	r0, [r3, #0]
    9b12:	6859      	ldr	r1, [r3, #4]
    9b14:	4614      	mov	r4, r2
    9b16:	c403      	stmia	r4!, {r0, r1}
    9b18:	3308      	adds	r3, #8
    9b1a:	42bb      	cmp	r3, r7
    9b1c:	4622      	mov	r2, r4
    9b1e:	d1f7      	bne.n	9b10 <pdu_len_cmp+0x10>
    9b20:	881b      	ldrh	r3, [r3, #0]
    9b22:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    9b24:	ab08      	add	r3, sp, #32
    9b26:	441d      	add	r5, r3
    9b28:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    9b2c:	1b83      	subs	r3, r0, r6
    9b2e:	4258      	negs	r0, r3
    9b30:	4158      	adcs	r0, r3
    9b32:	b009      	add	sp, #36	; 0x24
    9b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b36:	bf00      	nop
    9b38:	000148bf 	.word	0x000148bf

00009b3c <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    9b3c:	6008      	str	r0, [r1, #0]
    9b3e:	4770      	bx	lr

00009b40 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9b40:	b918      	cbnz	r0, 9b4a <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    9b42:	680b      	ldr	r3, [r1, #0]
    9b44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9b48:	600b      	str	r3, [r1, #0]
    9b4a:	4770      	bx	lr

00009b4c <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9b4c:	b918      	cbnz	r0, 9b56 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    9b4e:	680b      	ldr	r3, [r1, #0]
    9b50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9b54:	600b      	str	r3, [r1, #0]
    9b56:	4770      	bx	lr

00009b58 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    9b58:	b570      	push	{r4, r5, r6, lr}
    9b5a:	1d03      	adds	r3, r0, #4
    9b5c:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    9b5e:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    9b60:	429d      	cmp	r5, r3
    9b62:	d101      	bne.n	9b68 <chan_sel_remap+0x10>
    9b64:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    9b66:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    9b68:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    9b6c:	2200      	movs	r2, #0
    9b6e:	18a0      	adds	r0, r4, r2
    9b70:	2a08      	cmp	r2, #8
    9b72:	b2c0      	uxtb	r0, r0
    9b74:	d101      	bne.n	9b7a <chan_sel_remap+0x22>
    9b76:	4604      	mov	r4, r0
    9b78:	e7f2      	b.n	9b60 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    9b7a:	f016 0f01 	tst.w	r6, #1
    9b7e:	d003      	beq.n	9b88 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    9b80:	2900      	cmp	r1, #0
    9b82:	d0f0      	beq.n	9b66 <chan_sel_remap+0xe>
				chan_index--;
    9b84:	3901      	subs	r1, #1
    9b86:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    9b88:	0876      	lsrs	r6, r6, #1
    9b8a:	3201      	adds	r2, #1
    9b8c:	e7ef      	b.n	9b6e <chan_sel_remap+0x16>
	...

00009b90 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    9b90:	4b09      	ldr	r3, [pc, #36]	; (9bb8 <packet_rx_acquired_count_get+0x28>)
    9b92:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    9b96:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    9b9a:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    9b9c:	bf3b      	ittet	cc
    9b9e:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    9ba2:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    9ba6:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    9baa:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    9bac:	bf2c      	ite	cs
    9bae:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    9bb0:	1a80      	subcc	r0, r0, r2
    9bb2:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    9bb4:	4770      	bx	lr
    9bb6:	bf00      	nop
    9bb8:	200008c8 	.word	0x200008c8

00009bbc <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    9bbc:	b508      	push	{r3, lr}
    9bbe:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    9bc0:	f7ff ffe6 	bl	9b90 <packet_rx_acquired_count_get>
    9bc4:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    9bc6:	bf21      	itttt	cs
    9bc8:	4b04      	ldrcs	r3, [pc, #16]	; (9bdc <packet_rx_reserve_get+0x20>)
    9bca:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    9bce:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    9bd2:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    9bd6:	bf38      	it	cc
    9bd8:	2000      	movcc	r0, #0
}
    9bda:	bd08      	pop	{r3, pc}
    9bdc:	200008c8 	.word	0x200008c8

00009be0 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    9be0:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    9be2:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    9be6:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    9bea:	429c      	cmp	r4, r3
    9bec:	d15a      	bne.n	9ca4 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    9bee:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    9bf2:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    9bf6:	428b      	cmp	r3, r1
    9bf8:	d154      	bne.n	9ca4 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    9bfa:	f990 301d 	ldrsb.w	r3, [r0, #29]
    9bfe:	2b00      	cmp	r3, #0
    9c00:	db25      	blt.n	9c4e <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    9c02:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    9c04:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    9c06:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    9c0a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    9c0c:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    9c10:	4351      	muls	r1, r2
					      conn->supervision_reload *
    9c12:	227d      	movs	r2, #125	; 0x7d
    9c14:	434a      	muls	r2, r1
					      125 / 1000;
    9c16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9c1a:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    9c1e:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9c22:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    9c26:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9c28:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    9c2c:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    9c2e:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    9c30:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    9c34:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    9c36:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    9c3a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    9c3e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    9c42:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    9c46:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    9c4a:	4618      	mov	r0, r3
    9c4c:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    9c4e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    9c52:	06dc      	lsls	r4, r3, #27
    9c54:	d428      	bmi.n	9ca8 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    9c56:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    9c5a:	069a      	lsls	r2, r3, #26
    9c5c:	d503      	bpl.n	9c66 <conn_update_req+0x86>
		    (conn->llcp_features &
    9c5e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    9c62:	079b      	lsls	r3, r3, #30
    9c64:	d520      	bpl.n	9ca8 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    9c66:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    9c68:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    9c6a:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    9c6e:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    9c70:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    9c74:	4354      	muls	r4, r2
						conn->supervision_reload *
    9c76:	227d      	movs	r2, #125	; 0x7d
    9c78:	4362      	muls	r2, r4
						125 / 1000;
    9c7a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    9c7e:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    9c82:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    9c86:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    9c8a:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    9c8c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    9c90:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    9c94:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    9c96:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    9c9a:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    9c9e:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    9ca2:	e7d2      	b.n	9c4a <conn_update_req+0x6a>
		return 1;
    9ca4:	2001      	movs	r0, #1
    9ca6:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    9ca8:	2002      	movs	r0, #2
}
    9caa:	bd30      	pop	{r4, r5, pc}

00009cac <packet_rx_allocate>:
{
    9cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    9cb0:	4d22      	ldr	r5, [pc, #136]	; (9d3c <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    9cb2:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    9cb6:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    9cba:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    9cbe:	3401      	adds	r4, #1
    9cc0:	4581      	cmp	r9, r0
    9cc2:	b2e4      	uxtb	r4, r4
    9cc4:	bf28      	it	cs
    9cc6:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    9cc8:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    9ccc:	42a3      	cmp	r3, r4
    9cce:	bf08      	it	eq
    9cd0:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9cd2:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    9cd6:	f1b9 0f00 	cmp.w	r9, #0
    9cda:	d003      	beq.n	9ce4 <packet_rx_allocate+0x38>
    9cdc:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    9ce0:	429c      	cmp	r4, r3
    9ce2:	d101      	bne.n	9ce8 <packet_rx_allocate+0x3c>
    9ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    9ce8:	4638      	mov	r0, r7
    9cea:	f7fd f952 	bl	6f92 <mem_acquire>
		if (!link) {
    9cee:	4606      	mov	r6, r0
    9cf0:	2800      	cmp	r0, #0
    9cf2:	d0f7      	beq.n	9ce4 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9cf4:	4640      	mov	r0, r8
    9cf6:	f7fd f94c 	bl	6f92 <mem_acquire>
		if (!node_rx) {
    9cfa:	b928      	cbnz	r0, 9d08 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    9cfc:	4630      	mov	r0, r6
    9cfe:	4910      	ldr	r1, [pc, #64]	; (9d40 <packet_rx_allocate+0x94>)
}
    9d00:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    9d04:	f7fd b95f 	b.w	6fc6 <mem_release>
		node_rx->hdr.onion.link = link;
    9d08:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    9d0a:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    9d0e:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    9d12:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    9d16:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    9d1a:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    9d1e:	3401      	adds	r4, #1
    9d20:	b2e4      	uxtb	r4, r4
			acquire = 0;
    9d22:	42a3      	cmp	r3, r4
    9d24:	bf08      	it	eq
    9d26:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    9d28:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    9d2c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    9d30:	3b01      	subs	r3, #1
    9d32:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    9d36:	fa5f f989 	uxtb.w	r9, r9
    9d3a:	e7cc      	b.n	9cd6 <packet_rx_allocate+0x2a>
    9d3c:	200008c8 	.word	0x200008c8
    9d40:	20000a10 	.word	0x20000a10

00009d44 <common_init>:
{
    9d44:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    9d46:	4c39      	ldr	r4, [pc, #228]	; (9e2c <common_init+0xe8>)
    9d48:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    9d4c:	2a00      	cmp	r2, #0
    9d4e:	d040      	beq.n	9dd2 <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    9d50:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    9d54:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9d58:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    9d5c:	f7fd f8f2 	bl	6f44 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    9d60:	4b33      	ldr	r3, [pc, #204]	; (9e30 <common_init+0xec>)
    9d62:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    9d66:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    9d6a:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    9d6e:	f7fd f8e9 	bl	6f44 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    9d72:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    9d76:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    9d7a:	4b2e      	ldr	r3, [pc, #184]	; (9e34 <common_init+0xf0>)
    9d7c:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    9d80:	440a      	add	r2, r1
    9d82:	2108      	movs	r1, #8
    9d84:	f7fd f8de 	bl	6f44 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    9d88:	4b2b      	ldr	r3, [pc, #172]	; (9e38 <common_init+0xf4>)
    9d8a:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    9d8e:	2202      	movs	r2, #2
    9d90:	2124      	movs	r1, #36	; 0x24
    9d92:	f7fd f8d7 	bl	6f44 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    9d96:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    9d9a:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    9d9e:	4b27      	ldr	r3, [pc, #156]	; (9e3c <common_init+0xf8>)
    9da0:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    9da4:	3a01      	subs	r2, #1
    9da6:	b292      	uxth	r2, r2
    9da8:	f7fd f8cc 	bl	6f44 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    9dac:	4821      	ldr	r0, [pc, #132]	; (9e34 <common_init+0xf0>)
    9dae:	f7fd f8f0 	bl	6f92 <mem_acquire>
	LL_ASSERT(link);
    9db2:	b988      	cbnz	r0, 9dd8 <common_init+0x94>
    9db4:	4b22      	ldr	r3, [pc, #136]	; (9e40 <common_init+0xfc>)
    9db6:	9301      	str	r3, [sp, #4]
    9db8:	9300      	str	r3, [sp, #0]
    9dba:	4a22      	ldr	r2, [pc, #136]	; (9e44 <common_init+0x100>)
    9dbc:	4b22      	ldr	r3, [pc, #136]	; (9e48 <common_init+0x104>)
    9dbe:	4923      	ldr	r1, [pc, #140]	; (9e4c <common_init+0x108>)
    9dc0:	4823      	ldr	r0, [pc, #140]	; (9e50 <common_init+0x10c>)
    9dc2:	f7f7 f8e3 	bl	f8c <printk>
    9dc6:	4040      	eors	r0, r0
    9dc8:	f380 8811 	msr	BASEPRI, r0
    9dcc:	f04f 0004 	mov.w	r0, #4
    9dd0:	df02      	svc	2
		_radio.conn_free = NULL;
    9dd2:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    9dd6:	e7c3      	b.n	9d60 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    9dd8:	4a1e      	ldr	r2, [pc, #120]	; (9e54 <common_init+0x110>)
    9dda:	1f11      	subs	r1, r2, #4
    9ddc:	f7fd f930 	bl	7040 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    9de0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    9de4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    9de8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    9dec:	231f      	movs	r3, #31
    9dee:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    9df2:	2325      	movs	r3, #37	; 0x25
    9df4:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    9df8:	231b      	movs	r3, #27
    9dfa:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9dfe:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    9e02:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9e04:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    9e08:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    9e0a:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    9e0e:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    9e12:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    9e16:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    9e1a:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    9e1e:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    9e22:	b002      	add	sp, #8
    9e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    9e28:	f7ff bf40 	b.w	9cac <packet_rx_allocate>
    9e2c:	200008c8 	.word	0x200008c8
    9e30:	200009f8 	.word	0x200009f8
    9e34:	20000a10 	.word	0x20000a10
    9e38:	20000a24 	.word	0x20000a24
    9e3c:	20000a2c 	.word	0x20000a2c
    9e40:	0001496d 	.word	0x0001496d
    9e44:	000156bc 	.word	0x000156bc
    9e48:	00016b3e 	.word	0x00016b3e
    9e4c:	0001570b 	.word	0x0001570b
    9e50:	00016fbb 	.word	0x00016fbb
    9e54:	20000a18 	.word	0x20000a18

00009e58 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    9e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    9e5c:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    9e5e:	4294      	cmp	r4, r2
{
    9e60:	4681      	mov	r9, r0
    9e62:	460f      	mov	r7, r1
    9e64:	4690      	mov	r8, r2
	if (_first == last) {
    9e66:	d03d      	beq.n	9ee4 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    9e68:	4e1f      	ldr	r6, [pc, #124]	; (9ee8 <tx_cmplt_get+0x90>)
    9e6a:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    9e6e:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    9e72:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    9e74:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    9e76:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    9e7a:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    9e7e:	b222      	sxth	r2, r4
    9e80:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    9e84:	f8b9 e000 	ldrh.w	lr, [r9]
    9e88:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    9e8c:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    9e90:	4596      	cmp	lr, r2
    9e92:	d120      	bne.n	9ed6 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    9e94:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    9e96:	2801      	cmp	r0, #1
    9e98:	f020 0303 	bic.w	r3, r0, #3
    9e9c:	d90a      	bls.n	9eb4 <tx_cmplt_get+0x5c>
    9e9e:	b1f3      	cbz	r3, 9ede <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    9ea0:	1d02      	adds	r2, r0, #4
    9ea2:	d01c      	beq.n	9ede <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    9ea4:	7942      	ldrb	r2, [r0, #5]
    9ea6:	b1d2      	cbz	r2, 9ede <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    9ea8:	7902      	ldrb	r2, [r0, #4]
    9eaa:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    9eae:	3a01      	subs	r2, #1
    9eb0:	2a01      	cmp	r2, #1
    9eb2:	d814      	bhi.n	9ede <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    9eb4:	2201      	movs	r2, #1
			cmplt++;
    9eb6:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    9eb8:	604a      	str	r2, [r1, #4]
			cmplt++;
    9eba:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    9ebc:	b113      	cbz	r3, 9ec4 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    9ebe:	4651      	mov	r1, sl
    9ec0:	f7fd f881 	bl	6fc6 <mem_release>
		}

		_first = _first + 1;
    9ec4:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    9ec6:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    9eca:	b2e4      	uxtb	r4, r4
			_first = 0;
    9ecc:	42a2      	cmp	r2, r4
    9ece:	bf08      	it	eq
    9ed0:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    9ed2:	4544      	cmp	r4, r8
    9ed4:	d1d3      	bne.n	9e7e <tx_cmplt_get+0x26>

	*first = _first;
    9ed6:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    9ed8:	4628      	mov	r0, r5
    9eda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    9ede:	f8c1 b004 	str.w	fp, [r1, #4]
    9ee2:	e7eb      	b.n	9ebc <tx_cmplt_get+0x64>
		return 0;
    9ee4:	2500      	movs	r5, #0
    9ee6:	e7f7      	b.n	9ed8 <tx_cmplt_get+0x80>
    9ee8:	200008c8 	.word	0x200008c8

00009eec <connection_get>:
{
    9eec:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    9eee:	4b09      	ldr	r3, [pc, #36]	; (9f14 <connection_get+0x28>)
    9ef0:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    9ef4:	4282      	cmp	r2, r0
{
    9ef6:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    9ef8:	d90a      	bls.n	9f10 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    9efa:	4602      	mov	r2, r0
    9efc:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9f00:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    9f04:	f7fd f87a 	bl	6ffc <mem_get>
		if ((conn) && (conn->handle == handle)) {
    9f08:	b110      	cbz	r0, 9f10 <connection_get+0x24>
    9f0a:	8c03      	ldrh	r3, [r0, #32]
    9f0c:	42a3      	cmp	r3, r4
    9f0e:	d000      	beq.n	9f12 <connection_get+0x26>
	return 0;
    9f10:	2000      	movs	r0, #0
}
    9f12:	bd10      	pop	{r4, pc}
    9f14:	200008c8 	.word	0x200008c8

00009f18 <role_disable>:
{
    9f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f1c:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9f1e:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    9f20:	2805      	cmp	r0, #5
{
    9f22:	4605      	mov	r5, r0
    9f24:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9f26:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    9f28:	d00c      	beq.n	9f44 <role_disable+0x2c>
    9f2a:	2806      	cmp	r0, #6
    9f2c:	d040      	beq.n	9fb0 <role_disable+0x98>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    9f2e:	d945      	bls.n	9fbc <role_disable+0xa4>
			conn_handle = ticker_id_primary -
    9f30:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    9f32:	b280      	uxth	r0, r0
    9f34:	f7ff ffda 	bl	9eec <connection_get>
			if (!conn) {
    9f38:	2800      	cmp	r0, #0
    9f3a:	f000 8123 	beq.w	a184 <role_disable+0x26c>
			ticks_active_to_start =
    9f3e:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    9f42:	e00f      	b.n	9f64 <role_disable+0x4c>
		ticks_xtal_to_start =
    9f44:	4b90      	ldr	r3, [pc, #576]	; (a188 <role_disable+0x270>)
    9f46:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    9f48:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9f4c:	ab02      	add	r3, sp, #8
    9f4e:	9300      	str	r3, [sp, #0]
    9f50:	460a      	mov	r2, r1
    9f52:	4b8e      	ldr	r3, [pc, #568]	; (a18c <role_disable+0x274>)
    9f54:	2103      	movs	r1, #3
    9f56:	2000      	movs	r0, #0
    9f58:	f7fd ff42 	bl	7de0 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    9f5c:	2802      	cmp	r0, #2
    9f5e:	d011      	beq.n	9f84 <role_disable+0x6c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    9f60:	9b02      	ldr	r3, [sp, #8]
    9f62:	b99b      	cbnz	r3, 9f8c <role_disable+0x74>
	LL_ASSERT(!_radio.ticker_id_stop);
    9f64:	4c88      	ldr	r4, [pc, #544]	; (a188 <role_disable+0x270>)
    9f66:	7ca3      	ldrb	r3, [r4, #18]
    9f68:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    9f6c:	2b00      	cmp	r3, #0
    9f6e:	d02d      	beq.n	9fcc <role_disable+0xb4>
    9f70:	4b87      	ldr	r3, [pc, #540]	; (a190 <role_disable+0x278>)
    9f72:	9301      	str	r3, [sp, #4]
    9f74:	9300      	str	r3, [sp, #0]
    9f76:	4a87      	ldr	r2, [pc, #540]	; (a194 <role_disable+0x27c>)
    9f78:	4b87      	ldr	r3, [pc, #540]	; (a198 <role_disable+0x280>)
    9f7a:	4988      	ldr	r1, [pc, #544]	; (a19c <role_disable+0x284>)
    9f7c:	4888      	ldr	r0, [pc, #544]	; (a1a0 <role_disable+0x288>)
    9f7e:	e00f      	b.n	9fa0 <role_disable+0x88>
				cpu_sleep();
    9f80:	f7ff fdba 	bl	9af8 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    9f84:	9b02      	ldr	r3, [sp, #8]
    9f86:	2b02      	cmp	r3, #2
    9f88:	d0fa      	beq.n	9f80 <role_disable+0x68>
    9f8a:	e7e9      	b.n	9f60 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    9f8c:	9b02      	ldr	r3, [sp, #8]
    9f8e:	2b01      	cmp	r3, #1
    9f90:	d0e8      	beq.n	9f64 <role_disable+0x4c>
    9f92:	4b7f      	ldr	r3, [pc, #508]	; (a190 <role_disable+0x278>)
    9f94:	9301      	str	r3, [sp, #4]
    9f96:	9300      	str	r3, [sp, #0]
    9f98:	4a7e      	ldr	r2, [pc, #504]	; (a194 <role_disable+0x27c>)
    9f9a:	4b7f      	ldr	r3, [pc, #508]	; (a198 <role_disable+0x280>)
    9f9c:	497f      	ldr	r1, [pc, #508]	; (a19c <role_disable+0x284>)
    9f9e:	4881      	ldr	r0, [pc, #516]	; (a1a4 <role_disable+0x28c>)
			LL_ASSERT(0);
    9fa0:	f7f6 fff4 	bl	f8c <printk>
    9fa4:	4040      	eors	r0, r0
    9fa6:	f380 8811 	msr	BASEPRI, r0
    9faa:	f04f 0004 	mov.w	r0, #4
    9fae:	df02      	svc	2
		ticks_xtal_to_start =
    9fb0:	4b75      	ldr	r3, [pc, #468]	; (a188 <role_disable+0x270>)
    9fb2:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    9fb6:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    9fba:	e7d3      	b.n	9f64 <role_disable+0x4c>
			LL_ASSERT(0);
    9fbc:	4b74      	ldr	r3, [pc, #464]	; (a190 <role_disable+0x278>)
    9fbe:	9301      	str	r3, [sp, #4]
    9fc0:	9300      	str	r3, [sp, #0]
    9fc2:	4b75      	ldr	r3, [pc, #468]	; (a198 <role_disable+0x280>)
    9fc4:	4a73      	ldr	r2, [pc, #460]	; (a194 <role_disable+0x27c>)
    9fc6:	4975      	ldr	r1, [pc, #468]	; (a19c <role_disable+0x284>)
    9fc8:	4877      	ldr	r0, [pc, #476]	; (a1a8 <role_disable+0x290>)
    9fca:	e7e9      	b.n	9fa0 <role_disable+0x88>
	ret_cb = TICKER_STATUS_BUSY;
    9fcc:	ab06      	add	r3, sp, #24
    9fce:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    9fd0:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    9fd2:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9fd6:	2103      	movs	r1, #3
    9fd8:	9300      	str	r3, [sp, #0]
    9fda:	462a      	mov	r2, r5
    9fdc:	4b6b      	ldr	r3, [pc, #428]	; (a18c <role_disable+0x274>)
    9fde:	f7fd feff 	bl	7de0 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    9fe2:	2802      	cmp	r0, #2
    9fe4:	d025      	beq.n	a032 <role_disable+0x11a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    9fe6:	9b02      	ldr	r3, [sp, #8]
    9fe8:	2b00      	cmp	r3, #0
    9fea:	d169      	bne.n	a0c0 <role_disable+0x1a8>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    9fec:	7c23      	ldrb	r3, [r4, #16]
    9fee:	429d      	cmp	r5, r3
    9ff0:	d002      	beq.n	9ff8 <role_disable+0xe0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    9ff2:	7c63      	ldrb	r3, [r4, #17]
    9ff4:	429d      	cmp	r5, r3
    9ff6:	d15f      	bne.n	a0b8 <role_disable+0x1a0>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    9ff8:	ab06      	add	r3, sp, #24
    9ffa:	2202      	movs	r2, #2
    9ffc:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a000:	2200      	movs	r2, #0
    a002:	9300      	str	r3, [sp, #0]
    a004:	2103      	movs	r1, #3
    a006:	4b61      	ldr	r3, [pc, #388]	; (a18c <role_disable+0x274>)
    a008:	4610      	mov	r0, r2
    a00a:	f7fd fee9 	bl	7de0 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    a00e:	2802      	cmp	r0, #2
    a010:	d11d      	bne.n	a04e <role_disable+0x136>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a012:	2201      	movs	r2, #1
    a014:	4611      	mov	r1, r2
    a016:	2003      	movs	r0, #3
    a018:	f7fd f85e 	bl	70d8 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    a01c:	9b03      	ldr	r3, [sp, #12]
    a01e:	2b02      	cmp	r3, #2
    a020:	d115      	bne.n	a04e <role_disable+0x136>
    a022:	4b5b      	ldr	r3, [pc, #364]	; (a190 <role_disable+0x278>)
    a024:	9301      	str	r3, [sp, #4]
    a026:	9300      	str	r3, [sp, #0]
    a028:	4a5a      	ldr	r2, [pc, #360]	; (a194 <role_disable+0x27c>)
    a02a:	4b60      	ldr	r3, [pc, #384]	; (a1ac <role_disable+0x294>)
    a02c:	495b      	ldr	r1, [pc, #364]	; (a19c <role_disable+0x284>)
    a02e:	4860      	ldr	r0, [pc, #384]	; (a1b0 <role_disable+0x298>)
    a030:	e7b6      	b.n	9fa0 <role_disable+0x88>
		if (_radio.ticker_id_event == ticker_id_primary) {
    a032:	7c63      	ldrb	r3, [r4, #17]
    a034:	429d      	cmp	r5, r3
    a036:	d104      	bne.n	a042 <role_disable+0x12a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a038:	2201      	movs	r2, #1
    a03a:	4611      	mov	r1, r2
    a03c:	2003      	movs	r0, #3
    a03e:	f7fd f84b 	bl	70d8 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    a042:	9b02      	ldr	r3, [sp, #8]
    a044:	2b02      	cmp	r3, #2
    a046:	d1ce      	bne.n	9fe6 <role_disable+0xce>
			cpu_sleep();
    a048:	f7ff fd56 	bl	9af8 <cpu_sleep>
    a04c:	e7f9      	b.n	a042 <role_disable+0x12a>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    a04e:	9803      	ldr	r0, [sp, #12]
    a050:	2800      	cmp	r0, #0
    a052:	d150      	bne.n	a0f6 <role_disable+0x1de>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    a054:	2302      	movs	r3, #2
    a056:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    a058:	7c23      	ldrb	r3, [r4, #16]
    a05a:	b93b      	cbnz	r3, a06c <role_disable+0x154>
    a05c:	4b4c      	ldr	r3, [pc, #304]	; (a190 <role_disable+0x278>)
    a05e:	9301      	str	r3, [sp, #4]
    a060:	9300      	str	r3, [sp, #0]
    a062:	4a4c      	ldr	r2, [pc, #304]	; (a194 <role_disable+0x27c>)
    a064:	4b51      	ldr	r3, [pc, #324]	; (a1ac <role_disable+0x294>)
    a066:	494d      	ldr	r1, [pc, #308]	; (a19c <role_disable+0x284>)
    a068:	4852      	ldr	r0, [pc, #328]	; (a1b4 <role_disable+0x29c>)
    a06a:	e799      	b.n	9fa0 <role_disable+0x88>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a06c:	ab04      	add	r3, sp, #16
    a06e:	9300      	str	r3, [sp, #0]
    a070:	2201      	movs	r2, #1
    a072:	4b46      	ldr	r3, [pc, #280]	; (a18c <role_disable+0x274>)
		_radio.ticker_id_prepare = 0;
    a074:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a076:	2103      	movs	r1, #3
    a078:	f7fd feb2 	bl	7de0 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    a07c:	2802      	cmp	r0, #2
    a07e:	d10f      	bne.n	a0a0 <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a080:	2201      	movs	r2, #1
    a082:	4611      	mov	r1, r2
    a084:	2003      	movs	r0, #3
    a086:	f7fd f827 	bl	70d8 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    a08a:	9b04      	ldr	r3, [sp, #16]
    a08c:	2b02      	cmp	r3, #2
    a08e:	d107      	bne.n	a0a0 <role_disable+0x188>
    a090:	4b3f      	ldr	r3, [pc, #252]	; (a190 <role_disable+0x278>)
    a092:	9301      	str	r3, [sp, #4]
    a094:	9300      	str	r3, [sp, #0]
    a096:	4a3f      	ldr	r2, [pc, #252]	; (a194 <role_disable+0x27c>)
    a098:	4b44      	ldr	r3, [pc, #272]	; (a1ac <role_disable+0x294>)
    a09a:	4940      	ldr	r1, [pc, #256]	; (a19c <role_disable+0x284>)
    a09c:	4846      	ldr	r0, [pc, #280]	; (a1b8 <role_disable+0x2a0>)
    a09e:	e77f      	b.n	9fa0 <role_disable+0x88>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    a0a0:	9a04      	ldr	r2, [sp, #16]
    a0a2:	b99a      	cbnz	r2, a0cc <role_disable+0x1b4>
			ticks_xtal_to_start &= ~XON_BITMASK;
    a0a4:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    a0a8:	45b0      	cmp	r8, r6
    a0aa:	d922      	bls.n	a0f2 <role_disable+0x1da>
				ret = mayfly_enqueue(
    a0ac:	4b43      	ldr	r3, [pc, #268]	; (a1bc <role_disable+0x2a4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a0ae:	4611      	mov	r1, r2
    a0b0:	2003      	movs	r0, #3
    a0b2:	f7fd f839 	bl	7128 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a0b6:	b9a0      	cbnz	r0, a0e2 <role_disable+0x1ca>
	if (!_radio.ticker_id_stop) {
    a0b8:	7ca3      	ldrb	r3, [r4, #18]
    a0ba:	b90b      	cbnz	r3, a0c0 <role_disable+0x1a8>
		ret_cb = TICKER_STATUS_FAILURE;
    a0bc:	2301      	movs	r3, #1
    a0be:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    a0c0:	2300      	movs	r3, #0
    a0c2:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    a0c4:	9802      	ldr	r0, [sp, #8]
}
    a0c6:	b006      	add	sp, #24
    a0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    a0cc:	9b04      	ldr	r3, [sp, #16]
    a0ce:	2b01      	cmp	r3, #1
    a0d0:	d153      	bne.n	a17a <role_disable+0x262>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a0d2:	2200      	movs	r2, #0
    a0d4:	4611      	mov	r1, r2
    a0d6:	4b39      	ldr	r3, [pc, #228]	; (a1bc <role_disable+0x2a4>)
    a0d8:	2003      	movs	r0, #3
    a0da:	f7fd f825 	bl	7128 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a0de:	4602      	mov	r2, r0
    a0e0:	b138      	cbz	r0, a0f2 <role_disable+0x1da>
			LL_ASSERT(!ret);
    a0e2:	4b2b      	ldr	r3, [pc, #172]	; (a190 <role_disable+0x278>)
    a0e4:	9301      	str	r3, [sp, #4]
    a0e6:	9300      	str	r3, [sp, #0]
    a0e8:	4a2a      	ldr	r2, [pc, #168]	; (a194 <role_disable+0x27c>)
    a0ea:	4b30      	ldr	r3, [pc, #192]	; (a1ac <role_disable+0x294>)
    a0ec:	492b      	ldr	r1, [pc, #172]	; (a19c <role_disable+0x284>)
    a0ee:	4834      	ldr	r0, [pc, #208]	; (a1c0 <role_disable+0x2a8>)
    a0f0:	e756      	b.n	9fa0 <role_disable+0x88>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a0f2:	4b34      	ldr	r3, [pc, #208]	; (a1c4 <role_disable+0x2ac>)
    a0f4:	e7db      	b.n	a0ae <role_disable+0x196>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    a0f6:	9d03      	ldr	r5, [sp, #12]
    a0f8:	2d01      	cmp	r5, #1
    a0fa:	d13e      	bne.n	a17a <role_disable+0x262>
		if (ticker_id_stop != TICKER_NULL) {
    a0fc:	2fff      	cmp	r7, #255	; 0xff
    a0fe:	d029      	beq.n	a154 <role_disable+0x23c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    a100:	ab06      	add	r3, sp, #24
    a102:	2202      	movs	r2, #2
    a104:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a108:	2103      	movs	r1, #3
    a10a:	9300      	str	r3, [sp, #0]
    a10c:	463a      	mov	r2, r7
    a10e:	4b1f      	ldr	r3, [pc, #124]	; (a18c <role_disable+0x274>)
    a110:	2000      	movs	r0, #0
    a112:	f7fd fe65 	bl	7de0 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    a116:	2802      	cmp	r0, #2
    a118:	d10f      	bne.n	a13a <role_disable+0x222>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a11a:	462a      	mov	r2, r5
    a11c:	4629      	mov	r1, r5
    a11e:	2003      	movs	r0, #3
    a120:	f7fc ffda 	bl	70d8 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    a124:	9b05      	ldr	r3, [sp, #20]
    a126:	2b02      	cmp	r3, #2
    a128:	d107      	bne.n	a13a <role_disable+0x222>
    a12a:	4b19      	ldr	r3, [pc, #100]	; (a190 <role_disable+0x278>)
    a12c:	9301      	str	r3, [sp, #4]
    a12e:	9300      	str	r3, [sp, #0]
    a130:	4a18      	ldr	r2, [pc, #96]	; (a194 <role_disable+0x27c>)
    a132:	4b1e      	ldr	r3, [pc, #120]	; (a1ac <role_disable+0x294>)
    a134:	4919      	ldr	r1, [pc, #100]	; (a19c <role_disable+0x284>)
    a136:	4824      	ldr	r0, [pc, #144]	; (a1c8 <role_disable+0x2b0>)
    a138:	e732      	b.n	9fa0 <role_disable+0x88>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    a13a:	9b05      	ldr	r3, [sp, #20]
    a13c:	b153      	cbz	r3, a154 <role_disable+0x23c>
    a13e:	9b05      	ldr	r3, [sp, #20]
    a140:	2b01      	cmp	r3, #1
    a142:	d007      	beq.n	a154 <role_disable+0x23c>
    a144:	4b12      	ldr	r3, [pc, #72]	; (a190 <role_disable+0x278>)
    a146:	9301      	str	r3, [sp, #4]
    a148:	9300      	str	r3, [sp, #0]
    a14a:	4a12      	ldr	r2, [pc, #72]	; (a194 <role_disable+0x27c>)
    a14c:	4b17      	ldr	r3, [pc, #92]	; (a1ac <role_disable+0x294>)
    a14e:	4913      	ldr	r1, [pc, #76]	; (a19c <role_disable+0x284>)
    a150:	481e      	ldr	r0, [pc, #120]	; (a1cc <role_disable+0x2b4>)
    a152:	e725      	b.n	9fa0 <role_disable+0x88>
		if (_radio.role != ROLE_NONE) {
    a154:	7ce3      	ldrb	r3, [r4, #19]
    a156:	2b00      	cmp	r3, #0
    a158:	d0ae      	beq.n	a0b8 <role_disable+0x1a0>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    a15a:	4b1d      	ldr	r3, [pc, #116]	; (a1d0 <role_disable+0x2b8>)
    a15c:	2204      	movs	r2, #4
    a15e:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a160:	2200      	movs	r2, #0
    a162:	4611      	mov	r1, r2
    a164:	2003      	movs	r0, #3
    a166:	f7fc ffdf 	bl	7128 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a16a:	2800      	cmp	r0, #0
    a16c:	d1b9      	bne.n	a0e2 <role_disable+0x1ca>
			while (_radio.role != ROLE_NONE) {
    a16e:	7ce3      	ldrb	r3, [r4, #19]
    a170:	2b00      	cmp	r3, #0
    a172:	d0a1      	beq.n	a0b8 <role_disable+0x1a0>
				cpu_sleep();
    a174:	f7ff fcc0 	bl	9af8 <cpu_sleep>
    a178:	e7f9      	b.n	a16e <role_disable+0x256>
		LL_ASSERT(0);
    a17a:	4b05      	ldr	r3, [pc, #20]	; (a190 <role_disable+0x278>)
    a17c:	9301      	str	r3, [sp, #4]
    a17e:	9300      	str	r3, [sp, #0]
    a180:	4b0a      	ldr	r3, [pc, #40]	; (a1ac <role_disable+0x294>)
    a182:	e71f      	b.n	9fc4 <role_disable+0xac>
				return 1;
    a184:	2001      	movs	r0, #1
    a186:	e79e      	b.n	a0c6 <role_disable+0x1ae>
    a188:	200008c8 	.word	0x200008c8
    a18c:	00009b3d 	.word	0x00009b3d
    a190:	0001496d 	.word	0x0001496d
    a194:	000156bc 	.word	0x000156bc
    a198:	00016f60 	.word	0x00016f60
    a19c:	0001570b 	.word	0x0001570b
    a1a0:	000178d2 	.word	0x000178d2
    a1a4:	00017892 	.word	0x00017892
    a1a8:	0001565b 	.word	0x0001565b
    a1ac:	00016f4c 	.word	0x00016f4c
    a1b0:	0001790a 	.word	0x0001790a
    a1b4:	0001793b 	.word	0x0001793b
    a1b8:	00017975 	.word	0x00017975
    a1bc:	20003d60 	.word	0x20003d60
    a1c0:	000179a5 	.word	0x000179a5
    a1c4:	20003e00 	.word	0x20003e00
    a1c8:	000179cb 	.word	0x000179cb
    a1cc:	000179fd 	.word	0x000179fd
    a1d0:	20003d80 	.word	0x20003d80

0000a1d4 <mayfly_xtal_retain>:
{
    a1d4:	b513      	push	{r0, r1, r4, lr}
    a1d6:	4b1d      	ldr	r3, [pc, #116]	; (a24c <mayfly_xtal_retain+0x78>)
    a1d8:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    a1da:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    a1dc:	b301      	cbz	r1, a220 <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    a1de:	2a00      	cmp	r2, #0
    a1e0:	d132      	bne.n	a248 <mayfly_xtal_retain+0x74>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    a1e2:	2801      	cmp	r0, #1
    a1e4:	d00e      	beq.n	a204 <mayfly_xtal_retain+0x30>
    a1e6:	4b1a      	ldr	r3, [pc, #104]	; (a250 <mayfly_xtal_retain+0x7c>)
    a1e8:	9301      	str	r3, [sp, #4]
    a1ea:	9300      	str	r3, [sp, #0]
    a1ec:	4a19      	ldr	r2, [pc, #100]	; (a254 <mayfly_xtal_retain+0x80>)
    a1ee:	4b1a      	ldr	r3, [pc, #104]	; (a258 <mayfly_xtal_retain+0x84>)
    a1f0:	491a      	ldr	r1, [pc, #104]	; (a25c <mayfly_xtal_retain+0x88>)
    a1f2:	481b      	ldr	r0, [pc, #108]	; (a260 <mayfly_xtal_retain+0x8c>)
			LL_ASSERT(!retval);
    a1f4:	f7f6 feca 	bl	f8c <printk>
    a1f8:	4040      	eors	r0, r0
    a1fa:	f380 8811 	msr	BASEPRI, r0
    a1fe:	f04f 0004 	mov.w	r0, #4
    a202:	df02      	svc	2
			s_xtal_retained = 1;
    a204:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    a206:	4b17      	ldr	r3, [pc, #92]	; (a264 <mayfly_xtal_retain+0x90>)
    a208:	4611      	mov	r1, r2
    a20a:	f7fc ff8d 	bl	7128 <mayfly_enqueue>
			LL_ASSERT(!retval);
    a20e:	b1d8      	cbz	r0, a248 <mayfly_xtal_retain+0x74>
    a210:	4b0f      	ldr	r3, [pc, #60]	; (a250 <mayfly_xtal_retain+0x7c>)
    a212:	9301      	str	r3, [sp, #4]
    a214:	9300      	str	r3, [sp, #0]
    a216:	4a0f      	ldr	r2, [pc, #60]	; (a254 <mayfly_xtal_retain+0x80>)
    a218:	4b0f      	ldr	r3, [pc, #60]	; (a258 <mayfly_xtal_retain+0x84>)
    a21a:	4910      	ldr	r1, [pc, #64]	; (a25c <mayfly_xtal_retain+0x88>)
    a21c:	4812      	ldr	r0, [pc, #72]	; (a268 <mayfly_xtal_retain+0x94>)
    a21e:	e7e9      	b.n	a1f4 <mayfly_xtal_retain+0x20>
		if (s_xtal_retained) {
    a220:	b192      	cbz	r2, a248 <mayfly_xtal_retain+0x74>
			s_xtal_retained = 0;
    a222:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    a224:	b170      	cbz	r0, a244 <mayfly_xtal_retain+0x70>
    a226:	2801      	cmp	r0, #1
    a228:	d104      	bne.n	a234 <mayfly_xtal_retain+0x60>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    a22a:	4b10      	ldr	r3, [pc, #64]	; (a26c <mayfly_xtal_retain+0x98>)
			retval = mayfly_enqueue(caller_id,
    a22c:	2200      	movs	r2, #0
    a22e:	4611      	mov	r1, r2
    a230:	4620      	mov	r0, r4
    a232:	e7ea      	b.n	a20a <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    a234:	4b06      	ldr	r3, [pc, #24]	; (a250 <mayfly_xtal_retain+0x7c>)
    a236:	9301      	str	r3, [sp, #4]
    a238:	9300      	str	r3, [sp, #0]
    a23a:	4a06      	ldr	r2, [pc, #24]	; (a254 <mayfly_xtal_retain+0x80>)
    a23c:	4b06      	ldr	r3, [pc, #24]	; (a258 <mayfly_xtal_retain+0x84>)
    a23e:	4907      	ldr	r1, [pc, #28]	; (a25c <mayfly_xtal_retain+0x88>)
    a240:	480b      	ldr	r0, [pc, #44]	; (a270 <mayfly_xtal_retain+0x9c>)
    a242:	e7d7      	b.n	a1f4 <mayfly_xtal_retain+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    a244:	4b0b      	ldr	r3, [pc, #44]	; (a274 <mayfly_xtal_retain+0xa0>)
    a246:	e7f1      	b.n	a22c <mayfly_xtal_retain+0x58>
}
    a248:	b002      	add	sp, #8
    a24a:	bd10      	pop	{r4, pc}
    a24c:	20000ac8 	.word	0x20000ac8
    a250:	0001496d 	.word	0x0001496d
    a254:	000156bc 	.word	0x000156bc
    a258:	00016d05 	.word	0x00016d05
    a25c:	0001570b 	.word	0x0001570b
    a260:	000176eb 	.word	0x000176eb
    a264:	20003dd0 	.word	0x20003dd0
    a268:	0001771b 	.word	0x0001771b
    a26c:	20003df0 	.word	0x20003df0
    a270:	0001565b 	.word	0x0001565b
    a274:	20003de0 	.word	0x20003de0

0000a278 <rx_packet_set>:
{
    a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    a27a:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    a27e:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    a280:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    a282:	f004 0407 	and.w	r4, r4, #7
{
    a286:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    a288:	4620      	mov	r0, r4
    a28a:	2100      	movs	r1, #0
    a28c:	f007 ffe0 	bl	12250 <radio_phy_set>
	if (conn->enc_rx) {
    a290:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    a294:	f013 0f10 	tst.w	r3, #16
    a298:	ea4f 0244 	mov.w	r2, r4, lsl #1
    a29c:	d010      	beq.n	a2c0 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    a29e:	1d29      	adds	r1, r5, #4
    a2a0:	f042 0201 	orr.w	r2, r2, #1
    a2a4:	b2c9      	uxtb	r1, r1
    a2a6:	2008      	movs	r0, #8
    a2a8:	f008 f818 	bl	122dc <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    a2ac:	463a      	mov	r2, r7
    a2ae:	4621      	mov	r1, r4
    a2b0:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    a2b4:	f008 fa56 	bl	12764 <radio_ccm_rx_pkt_set>
}
    a2b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    a2bc:	f008 b83c 	b.w	12338 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    a2c0:	2008      	movs	r0, #8
    a2c2:	f042 0201 	orr.w	r2, r2, #1
    a2c6:	b2e9      	uxtb	r1, r5
    a2c8:	f008 f808 	bl	122dc <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    a2cc:	4638      	mov	r0, r7
    a2ce:	e7f3      	b.n	a2b8 <rx_packet_set+0x40>

0000a2d0 <tx_packet_set>:
{
    a2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a2d2:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    a2d4:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    a2d8:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    a2da:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    a2de:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    a2e0:	09c9      	lsrs	r1, r1, #7
    a2e2:	4620      	mov	r0, r4
    a2e4:	f007 ffb4 	bl	12250 <radio_phy_set>
	if (conn->enc_tx) {
    a2e8:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    a2ec:	f013 0f20 	tst.w	r3, #32
    a2f0:	ea4f 0244 	mov.w	r2, r4, lsl #1
    a2f4:	d00f      	beq.n	a316 <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    a2f6:	1d29      	adds	r1, r5, #4
    a2f8:	b2c9      	uxtb	r1, r1
    a2fa:	2008      	movs	r0, #8
    a2fc:	f042 0201 	orr.w	r2, r2, #1
    a300:	f007 ffec 	bl	122dc <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    a304:	4639      	mov	r1, r7
    a306:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    a30a:	f008 fa67 	bl	127dc <radio_ccm_tx_pkt_set>
}
    a30e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    a312:	f008 b817 	b.w	12344 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    a316:	2008      	movs	r0, #8
    a318:	f042 0201 	orr.w	r2, r2, #1
    a31c:	b2e9      	uxtb	r1, r5
    a31e:	f007 ffdd 	bl	122dc <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    a322:	4638      	mov	r0, r7
    a324:	e7f3      	b.n	a30e <tx_packet_set+0x3e>
	...

0000a328 <sched_free_win_offset_calc>:
{
    a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a32c:	b08f      	sub	sp, #60	; 0x3c
    a32e:	4692      	mov	sl, r2
    a330:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a332:	6803      	ldr	r3, [r0, #0]
{
    a334:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a336:	2b00      	cmp	r3, #0
{
    a338:	4680      	mov	r8, r0
    a33a:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a33c:	da3a      	bge.n	a3b4 <sched_free_win_offset_calc+0x8c>
		u32_t ticks_prepare_to_start =
    a33e:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    a340:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    a344:	4291      	cmp	r1, r2
    a346:	bf2c      	ite	cs
    a348:	1a5a      	subcs	r2, r3, r1
    a34a:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    a34c:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a34e:	f8d8 200c 	ldr.w	r2, [r8, #12]
    a352:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a354:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a356:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a358:	18d3      	adds	r3, r2, r3
    a35a:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a35c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a360:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a364:	940c      	str	r4, [sp, #48]	; 0x30
    a366:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a368:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a36a:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    a36c:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a36e:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a370:	2302      	movs	r3, #2
    a372:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a374:	ab0d      	add	r3, sp, #52	; 0x34
    a376:	9302      	str	r3, [sp, #8]
    a378:	4b81      	ldr	r3, [pc, #516]	; (a580 <sched_free_win_offset_calc+0x258>)
    a37a:	9301      	str	r3, [sp, #4]
    a37c:	ab0b      	add	r3, sp, #44	; 0x2c
    a37e:	9300      	str	r3, [sp, #0]
    a380:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    a384:	ab0c      	add	r3, sp, #48	; 0x30
    a386:	2101      	movs	r1, #1
    a388:	2000      	movs	r0, #0
    a38a:	f7fd fd65 	bl	7e58 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a38e:	2802      	cmp	r0, #2
    a390:	d019      	beq.n	a3c6 <sched_free_win_offset_calc+0x9e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a394:	b1db      	cbz	r3, a3ce <sched_free_win_offset_calc+0xa6>
    a396:	4b7b      	ldr	r3, [pc, #492]	; (a584 <sched_free_win_offset_calc+0x25c>)
    a398:	9301      	str	r3, [sp, #4]
    a39a:	9300      	str	r3, [sp, #0]
    a39c:	4a7a      	ldr	r2, [pc, #488]	; (a588 <sched_free_win_offset_calc+0x260>)
    a39e:	4b7b      	ldr	r3, [pc, #492]	; (a58c <sched_free_win_offset_calc+0x264>)
    a3a0:	497b      	ldr	r1, [pc, #492]	; (a590 <sched_free_win_offset_calc+0x268>)
    a3a2:	487c      	ldr	r0, [pc, #496]	; (a594 <sched_free_win_offset_calc+0x26c>)
			LL_ASSERT(0);
    a3a4:	f7f6 fdf2 	bl	f8c <printk>
    a3a8:	4040      	eors	r0, r0
    a3aa:	f380 8811 	msr	BASEPRI, r0
    a3ae:	f04f 0004 	mov.w	r0, #4
    a3b2:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    a3b4:	4293      	cmp	r3, r2
    a3b6:	bf38      	it	cc
    a3b8:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    a3ba:	2200      	movs	r2, #0
    a3bc:	e7c6      	b.n	a34c <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a3be:	2101      	movs	r1, #1
    a3c0:	2000      	movs	r0, #0
    a3c2:	f7fd fdc7 	bl	7f54 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a3c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a3c8:	2b02      	cmp	r3, #2
    a3ca:	d0f8      	beq.n	a3be <sched_free_win_offset_calc+0x96>
    a3cc:	e7e1      	b.n	a392 <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    a3ce:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    a3d2:	2aff      	cmp	r2, #255	; 0xff
    a3d4:	d065      	beq.n	a4a2 <sched_free_win_offset_calc+0x17a>
		if ((ticker_id_prev != 0xff) &&
    a3d6:	2fff      	cmp	r7, #255	; 0xff
    a3d8:	d00a      	beq.n	a3f0 <sched_free_win_offset_calc+0xc8>
    a3da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a3dc:	4599      	cmp	r9, r3
    a3de:	d007      	beq.n	a3f0 <sched_free_win_offset_calc+0xc8>
			LL_ASSERT(0);
    a3e0:	4b68      	ldr	r3, [pc, #416]	; (a584 <sched_free_win_offset_calc+0x25c>)
    a3e2:	9301      	str	r3, [sp, #4]
    a3e4:	9300      	str	r3, [sp, #0]
    a3e6:	4a68      	ldr	r2, [pc, #416]	; (a588 <sched_free_win_offset_calc+0x260>)
    a3e8:	4b68      	ldr	r3, [pc, #416]	; (a58c <sched_free_win_offset_calc+0x264>)
    a3ea:	4969      	ldr	r1, [pc, #420]	; (a590 <sched_free_win_offset_calc+0x268>)
    a3ec:	486a      	ldr	r0, [pc, #424]	; (a598 <sched_free_win_offset_calc+0x270>)
    a3ee:	e7d9      	b.n	a3a4 <sched_free_win_offset_calc+0x7c>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a3f0:	2a05      	cmp	r2, #5
    a3f2:	d951      	bls.n	a498 <sched_free_win_offset_calc+0x170>
				  _radio.connection_count)) {
    a3f4:	4869      	ldr	r0, [pc, #420]	; (a59c <sched_free_win_offset_calc+0x274>)
    a3f6:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a3fa:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a3fc:	429a      	cmp	r2, r3
    a3fe:	da4b      	bge.n	a498 <sched_free_win_offset_calc+0x170>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    a400:	2a06      	cmp	r2, #6
    a402:	f000 8092 	beq.w	a52a <sched_free_win_offset_calc+0x202>
		if (ticker_id_other != 0xFF) {
    a406:	9b06      	ldr	r3, [sp, #24]
    a408:	2bff      	cmp	r3, #255	; 0xff
    a40a:	d14a      	bne.n	a4a2 <sched_free_win_offset_calc+0x17a>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a40c:	3a07      	subs	r2, #7
    a40e:	b292      	uxth	r2, r2
    a410:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a414:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a418:	f7fc fdf0 	bl	6ffc <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    a41c:	4580      	cmp	r8, r0
    a41e:	d03b      	beq.n	a498 <sched_free_win_offset_calc+0x170>
    a420:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a422:	b91b      	cbnz	r3, a42c <sched_free_win_offset_calc+0x104>
    a424:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a428:	2b00      	cmp	r3, #0
    a42a:	db35      	blt.n	a498 <sched_free_win_offset_calc+0x170>
			u32_t ticks_to_expire_normal =
    a42c:	9b05      	ldr	r3, [sp, #20]
    a42e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    a430:	6841      	ldr	r1, [r0, #4]
    a432:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a434:	6803      	ldr	r3, [r0, #0]
    a436:	2b00      	cmp	r3, #0
    a438:	da4e      	bge.n	a4d8 <sched_free_win_offset_calc+0x1b0>
				u32_t ticks_prepare_to_start =
    a43a:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    a43c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a440:	428a      	cmp	r2, r1
    a442:	bf2c      	ite	cs
    a444:	18b6      	addcs	r6, r6, r2
    a446:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    a448:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    a44a:	68c2      	ldr	r2, [r0, #12]
    a44c:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    a450:	444b      	add	r3, r9
    a452:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    a454:	f8da 3000 	ldr.w	r3, [sl]
    a458:	429e      	cmp	r6, r3
    a45a:	d916      	bls.n	a48a <sched_free_win_offset_calc+0x162>
    a45c:	429d      	cmp	r5, r3
    a45e:	bf38      	it	cc
    a460:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    a462:	9b07      	ldr	r3, [sp, #28]
    a464:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    a468:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a46a:	781b      	ldrb	r3, [r3, #0]
    a46c:	42a3      	cmp	r3, r4
    a46e:	d905      	bls.n	a47c <sched_free_win_offset_calc+0x154>
				       (ticker_ticks_diff_get(
    a470:	4629      	mov	r1, r5
    a472:	4630      	mov	r0, r6
    a474:	f7fd fd86 	bl	7f84 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    a478:	42b8      	cmp	r0, r7
    a47a:	d231      	bcs.n	a4e0 <sched_free_win_offset_calc+0x1b8>
				if (_win_offset >= conn_interval) {
    a47c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    a480:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    a482:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    a486:	4293      	cmp	r3, r2
    a488:	d20b      	bcs.n	a4a2 <sched_free_win_offset_calc+0x17a>
			ticks_anchor_prev = ticks_anchor;
    a48a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    a48e:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a492:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    a496:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    a498:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a49a:	781b      	ldrb	r3, [r3, #0]
    a49c:	42a3      	cmp	r3, r4
    a49e:	f63f af67 	bhi.w	a370 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    a4a2:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    a4a6:	2bff      	cmp	r3, #255	; 0xff
    a4a8:	d111      	bne.n	a4ce <sched_free_win_offset_calc+0x1a6>
    a4aa:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a4ae:	f8df 80f0 	ldr.w	r8, [pc, #240]	; a5a0 <sched_free_win_offset_calc+0x278>
    a4b2:	a731      	add	r7, pc, #196	; (adr r7, a578 <sched_free_win_offset_calc+0x250>)
    a4b4:	e9d7 6700 	ldrd	r6, r7, [r7]
    a4b8:	429d      	cmp	r5, r3
    a4ba:	bf38      	it	cc
    a4bc:	461d      	movcc	r5, r3
    a4be:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    a4c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a4c4:	781b      	ldrb	r3, [r3, #0]
    a4c6:	42a3      	cmp	r3, r4
    a4c8:	d831      	bhi.n	a52e <sched_free_win_offset_calc+0x206>
		*ticks_to_offset_next = ticks_to_expire_prev;
    a4ca:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    a4ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a4d0:	701c      	strb	r4, [r3, #0]
}
    a4d2:	b00f      	add	sp, #60	; 0x3c
    a4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    a4d8:	428b      	cmp	r3, r1
    a4da:	bf38      	it	cc
    a4dc:	460b      	movcc	r3, r1
    a4de:	e7b4      	b.n	a44a <sched_free_win_offset_calc+0x122>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a4e0:	4a2f      	ldr	r2, [pc, #188]	; (a5a0 <sched_free_win_offset_calc+0x278>)
    a4e2:	eb05 030b 	add.w	r3, r5, fp
    a4e6:	fba3 0102 	umull	r0, r1, r3, r2
    a4ea:	2207      	movs	r2, #7
    a4ec:	fb02 1103 	mla	r1, r2, r3, r1
    a4f0:	a321      	add	r3, pc, #132	; (adr r3, a578 <sched_free_win_offset_calc+0x250>)
    a4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4f6:	f7f5 fe8d 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    a4fa:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a4fe:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    a502:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a504:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    a506:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a508:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    a50c:	d20b      	bcs.n	a526 <sched_free_win_offset_calc+0x1fe>
					memcpy(win_offset +
    a50e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a510:	2202      	movs	r2, #2
    a512:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a516:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    a51a:	3401      	adds	r4, #1
					memcpy(win_offset +
    a51c:	f7f7 fb6e 	bl	1bfc <memcpy>
					offset_index++;
    a520:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    a522:	3528      	adds	r5, #40	; 0x28
    a524:	e7a0      	b.n	a468 <sched_free_win_offset_calc+0x140>
						ticks_to_expire_prev = 0;
    a526:	2500      	movs	r5, #0
    a528:	e7a8      	b.n	a47c <sched_free_win_offset_calc+0x154>
    a52a:	9206      	str	r2, [sp, #24]
    a52c:	e7b4      	b.n	a498 <sched_free_win_offset_calc+0x170>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a52e:	eb05 030b 	add.w	r3, r5, fp
    a532:	fba3 0108 	umull	r0, r1, r3, r8
    a536:	fb09 1103 	mla	r1, r9, r3, r1
    a53a:	4632      	mov	r2, r6
    a53c:	463b      	mov	r3, r7
    a53e:	f7f5 fe69 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    a542:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a546:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    a54a:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a54c:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    a54e:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a550:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    a554:	d90b      	bls.n	a56e <sched_free_win_offset_calc+0x246>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a556:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a558:	2202      	movs	r2, #2
    a55a:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a55e:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    a562:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a564:	f7f7 fb4a 	bl	1bfc <memcpy>
			offset_index++;
    a568:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    a56a:	3528      	adds	r5, #40	; 0x28
    a56c:	e7a9      	b.n	a4c2 <sched_free_win_offset_calc+0x19a>
				ticks_to_expire_prev = 0;
    a56e:	2500      	movs	r5, #0
    a570:	e7ab      	b.n	a4ca <sched_free_win_offset_calc+0x1a2>
    a572:	bf00      	nop
    a574:	f3af 8000 	nop.w
    a578:	3b9aca00 	.word	0x3b9aca00
    a57c:	00000000 	.word	0x00000000
    a580:	00009b3d 	.word	0x00009b3d
    a584:	0001496d 	.word	0x0001496d
    a588:	000156bc 	.word	0x000156bc
    a58c:	00016d81 	.word	0x00016d81
    a590:	0001570b 	.word	0x0001570b
    a594:	00017aa0 	.word	0x00017aa0
    a598:	0001565b 	.word	0x0001565b
    a59c:	200008c8 	.word	0x200008c8
    a5a0:	1afd498d 	.word	0x1afd498d

0000a5a4 <mayfly_sched_free_win_offset_calc>:
{
    a5a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    a5a6:	2300      	movs	r3, #0
    a5a8:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    a5aa:	2306      	movs	r3, #6
    a5ac:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    a5b0:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a5b4:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    a5b8:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    a5ba:	bfbe      	ittt	lt
    a5bc:	4602      	movlt	r2, r0
    a5be:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    a5c0:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a5c4:	9101      	str	r1, [sp, #4]
    a5c6:	f10d 010b 	add.w	r1, sp, #11
    a5ca:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    a5cc:	bfa8      	it	ge
    a5ce:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a5d0:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    a5d4:	2100      	movs	r1, #0
    a5d6:	f7ff fea7 	bl	a328 <sched_free_win_offset_calc>
}
    a5da:	b005      	add	sp, #20
    a5dc:	f85d fb04 	ldr.w	pc, [sp], #4

0000a5e0 <mayfly_sched_win_offset_select>:
{
    a5e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a5e4:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    a5e8:	b089      	sub	sp, #36	; 0x24
    a5ea:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a5ec:	4840      	ldr	r0, [pc, #256]	; (a6f0 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    a5ee:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a5f0:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a5f2:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    a5f6:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a5fa:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a5fe:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a600:	fb03 1102 	mla	r1, r3, r2, r1
    a604:	a338      	add	r3, pc, #224	; (adr r3, a6e8 <mayfly_sched_win_offset_select+0x108>)
    a606:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a60a:	9505      	str	r5, [sp, #20]
    a60c:	6075      	str	r5, [r6, #4]
    a60e:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a610:	f7f5 fe00 	bl	214 <__aeabi_uldivmod>
    a614:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a616:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a61a:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a61e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a622:	9100      	str	r1, [sp, #0]
    a624:	9601      	str	r6, [sp, #4]
    a626:	2101      	movs	r1, #1
    a628:	4620      	mov	r0, r4
    a62a:	f7ff fe7d 	bl	a328 <sched_free_win_offset_calc>
    a62e:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    a632:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    a636:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    a63a:	2202      	movs	r2, #2
    a63c:	4639      	mov	r1, r7
    a63e:	f10d 000e 	add.w	r0, sp, #14
    a642:	f7f7 fadb 	bl	1bfc <memcpy>
		while (offset_index_m < offset_m_max) {
    a646:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    a64a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    a64e:	2300      	movs	r3, #0
    a650:	b2d9      	uxtb	r1, r3
    a652:	4288      	cmp	r0, r1
    a654:	d811      	bhi.n	a67a <mayfly_sched_win_offset_select+0x9a>
    a656:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    a658:	4547      	cmp	r7, r8
    a65a:	d1ee      	bne.n	a63a <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    a65c:	b9b5      	cbnz	r5, a68c <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    a65e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    a662:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a666:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a668:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a66c:	2202      	movs	r2, #2
    a66e:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a670:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    a674:	f7f7 fac2 	bl	1bfc <memcpy>
    a678:	e027      	b.n	a6ca <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    a67a:	454a      	cmp	r2, r9
    a67c:	d004      	beq.n	a688 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    a67e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    a682:	4291      	cmp	r1, r2
    a684:	d024      	beq.n	a6d0 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    a686:	2501      	movs	r5, #1
    a688:	3301      	adds	r3, #1
    a68a:	e7e1      	b.n	a650 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    a68c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a690:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a694:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a698:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    a69c:	4b15      	ldr	r3, [pc, #84]	; (a6f4 <mayfly_sched_win_offset_select+0x114>)
    a69e:	2200      	movs	r2, #0
    a6a0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    a6a4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a6a8:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    a6ac:	f042 0203 	orr.w	r2, r2, #3
    a6b0:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    a6b4:	2203      	movs	r2, #3
    a6b6:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    a6ba:	2211      	movs	r2, #17
    a6bc:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    a6c0:	220f      	movs	r2, #15
    a6c2:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    a6c6:	2220      	movs	r2, #32
    a6c8:	701a      	strb	r2, [r3, #0]
}
    a6ca:	b009      	add	sp, #36	; 0x24
    a6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    a6d0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a6d4:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a6d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a6da:	2202      	movs	r2, #2
    a6dc:	f10d 010e 	add.w	r1, sp, #14
    a6e0:	e7c6      	b.n	a670 <mayfly_sched_win_offset_select+0x90>
    a6e2:	bf00      	nop
    a6e4:	f3af 8000 	nop.w
    a6e8:	1afd498d 	.word	0x1afd498d
    a6ec:	00000007 	.word	0x00000007
    a6f0:	09ce5400 	.word	0x09ce5400
    a6f4:	200008c8 	.word	0x200008c8

0000a6f8 <sched_after_mstr_free_slot_get>:
{
    a6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6fc:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a6fe:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    a700:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    a702:	f8df 9140 	ldr.w	r9, [pc, #320]	; a844 <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    a706:	f88d 501f 	strb.w	r5, [sp, #31]
{
    a70a:	4680      	mov	r8, r0
    a70c:	4693      	mov	fp, r2
    a70e:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    a710:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a714:	601c      	str	r4, [r3, #0]
    a716:	9408      	str	r4, [sp, #32]
    a718:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a71a:	2302      	movs	r3, #2
    a71c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a71e:	ab09      	add	r3, sp, #36	; 0x24
    a720:	9302      	str	r3, [sp, #8]
    a722:	4b41      	ldr	r3, [pc, #260]	; (a828 <sched_after_mstr_free_slot_get+0x130>)
    a724:	9301      	str	r3, [sp, #4]
    a726:	ab08      	add	r3, sp, #32
    a728:	9300      	str	r3, [sp, #0]
    a72a:	f10d 021f 	add.w	r2, sp, #31
    a72e:	465b      	mov	r3, fp
    a730:	4641      	mov	r1, r8
    a732:	2000      	movs	r0, #0
    a734:	f7fd fb90 	bl	7e58 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a738:	2802      	cmp	r0, #2
    a73a:	d014      	beq.n	a766 <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a73e:	b1b3      	cbz	r3, a76e <sched_after_mstr_free_slot_get+0x76>
    a740:	4b3a      	ldr	r3, [pc, #232]	; (a82c <sched_after_mstr_free_slot_get+0x134>)
    a742:	9301      	str	r3, [sp, #4]
    a744:	9300      	str	r3, [sp, #0]
    a746:	4a3a      	ldr	r2, [pc, #232]	; (a830 <sched_after_mstr_free_slot_get+0x138>)
    a748:	4b3a      	ldr	r3, [pc, #232]	; (a834 <sched_after_mstr_free_slot_get+0x13c>)
    a74a:	493b      	ldr	r1, [pc, #236]	; (a838 <sched_after_mstr_free_slot_get+0x140>)
    a74c:	483b      	ldr	r0, [pc, #236]	; (a83c <sched_after_mstr_free_slot_get+0x144>)
    a74e:	f7f6 fc1d 	bl	f8c <printk>
    a752:	4040      	eors	r0, r0
    a754:	f380 8811 	msr	BASEPRI, r0
    a758:	f04f 0004 	mov.w	r0, #4
    a75c:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a75e:	4641      	mov	r1, r8
    a760:	2000      	movs	r0, #0
    a762:	f7fd fbf7 	bl	7f54 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a766:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a768:	2b02      	cmp	r3, #2
    a76a:	d0f8      	beq.n	a75e <sched_after_mstr_free_slot_get+0x66>
    a76c:	e7e6      	b.n	a73c <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    a76e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a772:	2aff      	cmp	r2, #255	; 0xff
    a774:	d04e      	beq.n	a814 <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a776:	2a06      	cmp	r2, #6
    a778:	d9cf      	bls.n	a71a <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    a77a:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a77e:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a780:	429a      	cmp	r2, r3
    a782:	daca      	bge.n	a71a <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a784:	3a07      	subs	r2, #7
    a786:	b292      	uxth	r2, r2
    a788:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a78c:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    a790:	f7fc fc34 	bl	6ffc <mem_get>
		if (conn && !conn->role) {
    a794:	2800      	cmp	r0, #0
    a796:	d0c0      	beq.n	a71a <sched_after_mstr_free_slot_get+0x22>
    a798:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a79c:	2b00      	cmp	r3, #0
    a79e:	dbbc      	blt.n	a71a <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a7a0:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    a7a2:	9a08      	ldr	r2, [sp, #32]
    a7a4:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a7a8:	2b00      	cmp	r3, #0
    a7aa:	da12      	bge.n	a7d2 <sched_after_mstr_free_slot_get+0xda>
    a7ac:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    a7ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a7b2:	4571      	cmp	r1, lr
    a7b4:	bf2c      	ite	cs
    a7b6:	1852      	addcs	r2, r2, r1
    a7b8:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    a7ba:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    a7bc:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    a7be:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    a7c0:	f101 0104 	add.w	r1, r1, #4
    a7c4:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    a7c6:	d108      	bne.n	a7da <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    a7c8:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a7cc:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    a7ce:	4616      	mov	r6, r2
    a7d0:	e7a3      	b.n	a71a <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    a7d2:	4573      	cmp	r3, lr
    a7d4:	bf38      	it	cc
    a7d6:	4673      	movcc	r3, lr
    a7d8:	e7f0      	b.n	a7bc <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    a7da:	4631      	mov	r1, r6
    a7dc:	4610      	mov	r0, r2
    a7de:	9305      	str	r3, [sp, #20]
    a7e0:	9204      	str	r2, [sp, #16]
    a7e2:	f7fd fbcf 	bl	7f84 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    a7e6:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    a7ea:	4288      	cmp	r0, r1
    a7ec:	9a04      	ldr	r2, [sp, #16]
    a7ee:	9b05      	ldr	r3, [sp, #20]
    a7f0:	d9ea      	bls.n	a7c8 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a7f2:	4813      	ldr	r0, [pc, #76]	; (a840 <sched_after_mstr_free_slot_get+0x148>)
    a7f4:	4434      	add	r4, r6
    a7f6:	fba4 0100 	umull	r0, r1, r4, r0
    a7fa:	2307      	movs	r3, #7
    a7fc:	fb03 1104 	mla	r1, r3, r4, r1
    a800:	a307      	add	r3, pc, #28	; (adr r3, a820 <sched_after_mstr_free_slot_get+0x128>)
    a802:	e9d3 2300 	ldrd	r2, r3, [r3]
    a806:	f7f5 fd05 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    a80a:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a80c:	6038      	str	r0, [r7, #0]
}
    a80e:	b00b      	add	sp, #44	; 0x2c
    a810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    a814:	2dff      	cmp	r5, #255	; 0xff
    a816:	d1ec      	bne.n	a7f2 <sched_after_mstr_free_slot_get+0xfa>
    a818:	e7f9      	b.n	a80e <sched_after_mstr_free_slot_get+0x116>
    a81a:	bf00      	nop
    a81c:	f3af 8000 	nop.w
    a820:	3b9aca00 	.word	0x3b9aca00
    a824:	00000000 	.word	0x00000000
    a828:	00009b3d 	.word	0x00009b3d
    a82c:	0001496d 	.word	0x0001496d
    a830:	000156bc 	.word	0x000156bc
    a834:	00016d41 	.word	0x00016d41
    a838:	0001570b 	.word	0x0001570b
    a83c:	00017aa0 	.word	0x00017aa0
    a840:	1afd498d 	.word	0x1afd498d
    a844:	200008c8 	.word	0x200008c8

0000a848 <isr_adv_ci_adva_check>:
{
    a848:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    a84a:	7804      	ldrb	r4, [r0, #0]
    a84c:	780a      	ldrb	r2, [r1, #0]
    a84e:	f3c4 1380 	ubfx	r3, r4, #6, #1
    a852:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a856:	d119      	bne.n	a88c <isr_adv_ci_adva_check+0x44>
    a858:	f004 040f 	and.w	r4, r4, #15
    a85c:	2c01      	cmp	r4, #1
    a85e:	f101 0608 	add.w	r6, r1, #8
    a862:	f100 0502 	add.w	r5, r0, #2
    a866:	d008      	beq.n	a87a <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    a868:	2206      	movs	r2, #6
    a86a:	4631      	mov	r1, r6
    a86c:	4628      	mov	r0, r5
    a86e:	f7f7 f9b0 	bl	1bd2 <memcmp>
			 BDADDR_SIZE)) ||
    a872:	fab0 f080 	clz	r0, r0
    a876:	0940      	lsrs	r0, r0, #5
    a878:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    a87a:	2206      	movs	r2, #6
    a87c:	4631      	mov	r1, r6
    a87e:	4628      	mov	r0, r5
    a880:	f7f7 f9a7 	bl	1bd2 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    a884:	2800      	cmp	r0, #0
    a886:	d1ef      	bne.n	a868 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    a888:	4620      	mov	r0, r4
    a88a:	bd70      	pop	{r4, r5, r6, pc}
    a88c:	2000      	movs	r0, #0
}
    a88e:	bd70      	pop	{r4, r5, r6, pc}

0000a890 <packet_rx_enqueue>:
{
    a890:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    a892:	4a1e      	ldr	r2, [pc, #120]	; (a90c <packet_rx_enqueue+0x7c>)
    a894:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    a898:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    a89c:	4299      	cmp	r1, r3
    a89e:	d10e      	bne.n	a8be <packet_rx_enqueue+0x2e>
    a8a0:	4b1b      	ldr	r3, [pc, #108]	; (a910 <packet_rx_enqueue+0x80>)
    a8a2:	9301      	str	r3, [sp, #4]
    a8a4:	9300      	str	r3, [sp, #0]
    a8a6:	4a1b      	ldr	r2, [pc, #108]	; (a914 <packet_rx_enqueue+0x84>)
    a8a8:	4b1b      	ldr	r3, [pc, #108]	; (a918 <packet_rx_enqueue+0x88>)
    a8aa:	491c      	ldr	r1, [pc, #112]	; (a91c <packet_rx_enqueue+0x8c>)
    a8ac:	481c      	ldr	r0, [pc, #112]	; (a920 <packet_rx_enqueue+0x90>)
	LL_ASSERT(link);
    a8ae:	f7f6 fb6d 	bl	f8c <printk>
    a8b2:	4040      	eors	r0, r0
    a8b4:	f380 8811 	msr	BASEPRI, r0
    a8b8:	f04f 0004 	mov.w	r0, #4
    a8bc:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    a8be:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    a8c2:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    a8c6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a8ca:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    a8ce:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a8d0:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    a8d2:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    a8d6:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    a8da:	3301      	adds	r3, #1
    a8dc:	b2db      	uxtb	r3, r3
		last = 0;
    a8de:	429c      	cmp	r4, r3
    a8e0:	bf08      	it	eq
    a8e2:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    a8e4:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    a8e8:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    a8ec:	f7fc fbab 	bl	7046 <memq_enqueue>
	LL_ASSERT(link);
    a8f0:	b938      	cbnz	r0, a902 <packet_rx_enqueue+0x72>
    a8f2:	4b07      	ldr	r3, [pc, #28]	; (a910 <packet_rx_enqueue+0x80>)
    a8f4:	9301      	str	r3, [sp, #4]
    a8f6:	9300      	str	r3, [sp, #0]
    a8f8:	4a06      	ldr	r2, [pc, #24]	; (a914 <packet_rx_enqueue+0x84>)
    a8fa:	4b07      	ldr	r3, [pc, #28]	; (a918 <packet_rx_enqueue+0x88>)
    a8fc:	4907      	ldr	r1, [pc, #28]	; (a91c <packet_rx_enqueue+0x8c>)
    a8fe:	4809      	ldr	r0, [pc, #36]	; (a924 <packet_rx_enqueue+0x94>)
    a900:	e7d5      	b.n	a8ae <packet_rx_enqueue+0x1e>
}
    a902:	b002      	add	sp, #8
    a904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    a908:	f006 bb9c 	b.w	11044 <radio_event_callback>
    a90c:	200008c8 	.word	0x200008c8
    a910:	0001496d 	.word	0x0001496d
    a914:	000156bc 	.word	0x000156bc
    a918:	00016ed2 	.word	0x00016ed2
    a91c:	0001570b 	.word	0x0001570b
    a920:	00017798 	.word	0x00017798
    a924:	00016fbb 	.word	0x00016fbb

0000a928 <isr_scan_tgta_check>:
{
    a928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a92c:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a92e:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    a930:	f101 0808 	add.w	r8, r1, #8
{
    a934:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a936:	09c0      	lsrs	r0, r0, #7
    a938:	4641      	mov	r1, r8
{
    a93a:	4691      	mov	r9, r2
    a93c:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a93e:	f007 f81d 	bl	1197c <ctrl_rl_addr_resolve>
    a942:	4604      	mov	r4, r0
    a944:	b9d8      	cbnz	r0, a97e <isr_scan_tgta_check+0x56>
    a946:	4f1c      	ldr	r7, [pc, #112]	; (a9b8 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a948:	f1ba 0f00 	cmp.w	sl, #0
    a94c:	d10e      	bne.n	a96c <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a94e:	782b      	ldrb	r3, [r5, #0]
    a950:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    a954:	09db      	lsrs	r3, r3, #7
    a956:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a95a:	d113      	bne.n	a984 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    a95c:	2206      	movs	r2, #6
    a95e:	4641      	mov	r1, r8
    a960:	4816      	ldr	r0, [pc, #88]	; (a9bc <isr_scan_tgta_check+0x94>)
    a962:	f7f7 f936 	bl	1bd2 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a966:	b968      	cbnz	r0, a984 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    a968:	2001      	movs	r0, #1
    a96a:	e012      	b.n	a992 <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a96c:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    a970:	07db      	lsls	r3, r3, #31
    a972:	d5ec      	bpl.n	a94e <isr_scan_tgta_check+0x26>
    a974:	4648      	mov	r0, r9
    a976:	f006 fd5d 	bl	11434 <ctrl_lrpa_get>
    a97a:	2800      	cmp	r0, #0
    a97c:	d0e7      	beq.n	a94e <isr_scan_tgta_check+0x26>
}
    a97e:	4620      	mov	r0, r4
    a980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a984:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    a988:	f3c0 1001 	ubfx	r0, r0, #4, #2
    a98c:	f010 0002 	ands.w	r0, r0, #2
    a990:	d101      	bne.n	a996 <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    a992:	4604      	mov	r4, r0
    a994:	e7f3      	b.n	a97e <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a996:	f995 3000 	ldrsb.w	r3, [r5]
    a99a:	2b00      	cmp	r3, #0
    a99c:	da09      	bge.n	a9b2 <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    a99e:	7b6b      	ldrb	r3, [r5, #13]
    a9a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a9a4:	2b40      	cmp	r3, #64	; 0x40
    a9a6:	d104      	bne.n	a9b2 <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    a9a8:	2e00      	cmp	r6, #0
    a9aa:	d0dd      	beq.n	a968 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    a9ac:	2001      	movs	r0, #1
    a9ae:	7030      	strb	r0, [r6, #0]
    a9b0:	e7ef      	b.n	a992 <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    a9b2:	2000      	movs	r0, #0
    a9b4:	e7ed      	b.n	a992 <isr_scan_tgta_check+0x6a>
    a9b6:	bf00      	nop
    a9b8:	200008c8 	.word	0x200008c8
    a9bc:	200009ac 	.word	0x200009ac

0000a9c0 <isr_rx_scan_report>:
{
    a9c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a9c4:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    a9c6:	2003      	movs	r0, #3
{
    a9c8:	460f      	mov	r7, r1
    a9ca:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    a9cc:	f7ff f8f6 	bl	9bbc <packet_rx_reserve_get>
	if (node_rx == 0) {
    a9d0:	4604      	mov	r4, r0
    a9d2:	2800      	cmp	r0, #0
    a9d4:	d03e      	beq.n	aa54 <isr_rx_scan_report+0x94>
	node_rx->hdr.handle = 0xffff;
    a9d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a9da:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    a9dc:	4b1e      	ldr	r3, [pc, #120]	; (aa58 <isr_rx_scan_report+0x98>)
    a9de:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    a9e2:	075a      	lsls	r2, r3, #29
    a9e4:	d032      	beq.n	aa4c <isr_rx_scan_report+0x8c>
		switch (_radio.scanner.phy) {
    a9e6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a9ea:	b2da      	uxtb	r2, r3
    a9ec:	2a01      	cmp	r2, #1
    a9ee:	d010      	beq.n	aa12 <isr_rx_scan_report+0x52>
    a9f0:	2a04      	cmp	r2, #4
    a9f2:	d00f      	beq.n	aa14 <isr_rx_scan_report+0x54>
			LL_ASSERT(0);
    a9f4:	4b19      	ldr	r3, [pc, #100]	; (aa5c <isr_rx_scan_report+0x9c>)
    a9f6:	9301      	str	r3, [sp, #4]
    a9f8:	9300      	str	r3, [sp, #0]
    a9fa:	4a19      	ldr	r2, [pc, #100]	; (aa60 <isr_rx_scan_report+0xa0>)
    a9fc:	4b19      	ldr	r3, [pc, #100]	; (aa64 <isr_rx_scan_report+0xa4>)
    a9fe:	491a      	ldr	r1, [pc, #104]	; (aa68 <isr_rx_scan_report+0xa8>)
    aa00:	481a      	ldr	r0, [pc, #104]	; (aa6c <isr_rx_scan_report+0xac>)
    aa02:	f7f6 fac3 	bl	f8c <printk>
    aa06:	4040      	eors	r0, r0
    aa08:	f380 8811 	msr	BASEPRI, r0
    aa0c:	f04f 0004 	mov.w	r0, #4
    aa10:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    aa12:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    aa14:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    aa18:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    aa1a:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    aa1e:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    aa22:	f1b9 0f00 	cmp.w	r9, #0
    aa26:	d013      	beq.n	aa50 <isr_rx_scan_report+0x90>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    aa28:	f007 fd34 	bl	12494 <radio_rssi_get>
			     pdu_adv_rx->len] =
    aa2c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    aa30:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    aa34:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    aa36:	442b      	add	r3, r5
    aa38:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    aa3a:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    aa3c:	441d      	add	r5, r3
    aa3e:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    aa40:	f7ff ff26 	bl	a890 <packet_rx_enqueue>
	return 0;
    aa44:	2000      	movs	r0, #0
}
    aa46:	b003      	add	sp, #12
    aa48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    aa4c:	2302      	movs	r3, #2
    aa4e:	e7e1      	b.n	aa14 <isr_rx_scan_report+0x54>
			     pdu_adv_rx->len] =
    aa50:	207f      	movs	r0, #127	; 0x7f
    aa52:	e7ed      	b.n	aa30 <isr_rx_scan_report+0x70>
		return 1;
    aa54:	2001      	movs	r0, #1
    aa56:	e7f6      	b.n	aa46 <isr_rx_scan_report+0x86>
    aa58:	200008c8 	.word	0x200008c8
    aa5c:	0001496d 	.word	0x0001496d
    aa60:	000156bc 	.word	0x000156bc
    aa64:	00016b68 	.word	0x00016b68
    aa68:	0001570b 	.word	0x0001570b
    aa6c:	0001565b 	.word	0x0001565b

0000aa70 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    aa70:	4a0b      	ldr	r2, [pc, #44]	; (aaa0 <rx_fc_lock+0x30>)
    aa72:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    aa76:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    aa7a:	4299      	cmp	r1, r3
    aa7c:	d10e      	bne.n	aa9c <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    aa7e:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    aa82:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    aa86:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    aa8a:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    aa8e:	3301      	adds	r3, #1
    aa90:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    aa92:	2b03      	cmp	r3, #3
    aa94:	bf08      	it	eq
    aa96:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    aa98:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    aa9c:	4770      	bx	lr
    aa9e:	bf00      	nop
    aaa0:	200008c8 	.word	0x200008c8

0000aaa4 <ticker_success_assert>:
{
    aaa4:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    aaa6:	b170      	cbz	r0, aac6 <ticker_success_assert+0x22>
    aaa8:	4b08      	ldr	r3, [pc, #32]	; (aacc <ticker_success_assert+0x28>)
    aaaa:	9301      	str	r3, [sp, #4]
    aaac:	9300      	str	r3, [sp, #0]
    aaae:	4a08      	ldr	r2, [pc, #32]	; (aad0 <ticker_success_assert+0x2c>)
    aab0:	4b08      	ldr	r3, [pc, #32]	; (aad4 <ticker_success_assert+0x30>)
    aab2:	4909      	ldr	r1, [pc, #36]	; (aad8 <ticker_success_assert+0x34>)
    aab4:	4809      	ldr	r0, [pc, #36]	; (aadc <ticker_success_assert+0x38>)
    aab6:	f7f6 fa69 	bl	f8c <printk>
    aaba:	4040      	eors	r0, r0
    aabc:	f380 8811 	msr	BASEPRI, r0
    aac0:	f04f 0004 	mov.w	r0, #4
    aac4:	df02      	svc	2
}
    aac6:	b003      	add	sp, #12
    aac8:	f85d fb04 	ldr.w	pc, [sp], #4
    aacc:	0001496d 	.word	0x0001496d
    aad0:	000156bc 	.word	0x000156bc
    aad4:	00016c51 	.word	0x00016c51
    aad8:	0001570b 	.word	0x0001570b
    aadc:	00017bb8 	.word	0x00017bb8

0000aae0 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    aae0:	2801      	cmp	r0, #1
{
    aae2:	b507      	push	{r0, r1, r2, lr}
    aae4:	4b11      	ldr	r3, [pc, #68]	; (ab2c <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    aae6:	d116      	bne.n	ab16 <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    aae8:	7c9a      	ldrb	r2, [r3, #18]
    aaea:	2a05      	cmp	r2, #5
    aaec:	d104      	bne.n	aaf8 <ticker_stop_adv_assert+0x18>
			_radio.ticker_id_stop = 0;
    aaee:	2200      	movs	r2, #0
    aaf0:	749a      	strb	r2, [r3, #18]
}
    aaf2:	b003      	add	sp, #12
    aaf4:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    aaf8:	4b0d      	ldr	r3, [pc, #52]	; (ab30 <ticker_stop_adv_assert+0x50>)
    aafa:	9301      	str	r3, [sp, #4]
    aafc:	9300      	str	r3, [sp, #0]
    aafe:	4a0d      	ldr	r2, [pc, #52]	; (ab34 <ticker_stop_adv_assert+0x54>)
    ab00:	4b0d      	ldr	r3, [pc, #52]	; (ab38 <ticker_stop_adv_assert+0x58>)
    ab02:	490e      	ldr	r1, [pc, #56]	; (ab3c <ticker_stop_adv_assert+0x5c>)
    ab04:	480e      	ldr	r0, [pc, #56]	; (ab40 <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    ab06:	f7f6 fa41 	bl	f8c <printk>
    ab0a:	4040      	eors	r0, r0
    ab0c:	f380 8811 	msr	BASEPRI, r0
    ab10:	f04f 0004 	mov.w	r0, #4
    ab14:	df02      	svc	2
    ab16:	7c1b      	ldrb	r3, [r3, #16]
    ab18:	2b05      	cmp	r3, #5
    ab1a:	d1ea      	bne.n	aaf2 <ticker_stop_adv_assert+0x12>
    ab1c:	4b04      	ldr	r3, [pc, #16]	; (ab30 <ticker_stop_adv_assert+0x50>)
    ab1e:	9301      	str	r3, [sp, #4]
    ab20:	9300      	str	r3, [sp, #0]
    ab22:	4a04      	ldr	r2, [pc, #16]	; (ab34 <ticker_stop_adv_assert+0x54>)
    ab24:	4b04      	ldr	r3, [pc, #16]	; (ab38 <ticker_stop_adv_assert+0x58>)
    ab26:	4905      	ldr	r1, [pc, #20]	; (ab3c <ticker_stop_adv_assert+0x5c>)
    ab28:	4806      	ldr	r0, [pc, #24]	; (ab44 <ticker_stop_adv_assert+0x64>)
    ab2a:	e7ec      	b.n	ab06 <ticker_stop_adv_assert+0x26>
    ab2c:	200008c8 	.word	0x200008c8
    ab30:	0001496d 	.word	0x0001496d
    ab34:	000156bc 	.word	0x000156bc
    ab38:	00016c67 	.word	0x00016c67
    ab3c:	0001570b 	.word	0x0001570b
    ab40:	0001565b 	.word	0x0001565b
    ab44:	00017b3a 	.word	0x00017b3a

0000ab48 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    ab48:	2801      	cmp	r0, #1
{
    ab4a:	b507      	push	{r0, r1, r2, lr}
    ab4c:	4b11      	ldr	r3, [pc, #68]	; (ab94 <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    ab4e:	d116      	bne.n	ab7e <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    ab50:	7c9a      	ldrb	r2, [r3, #18]
    ab52:	2a06      	cmp	r2, #6
    ab54:	d104      	bne.n	ab60 <ticker_stop_scan_assert+0x18>
			_radio.ticker_id_stop = 0;
    ab56:	2200      	movs	r2, #0
    ab58:	749a      	strb	r2, [r3, #18]
}
    ab5a:	b003      	add	sp, #12
    ab5c:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    ab60:	4b0d      	ldr	r3, [pc, #52]	; (ab98 <ticker_stop_scan_assert+0x50>)
    ab62:	9301      	str	r3, [sp, #4]
    ab64:	9300      	str	r3, [sp, #0]
    ab66:	4a0d      	ldr	r2, [pc, #52]	; (ab9c <ticker_stop_scan_assert+0x54>)
    ab68:	4b0d      	ldr	r3, [pc, #52]	; (aba0 <ticker_stop_scan_assert+0x58>)
    ab6a:	490e      	ldr	r1, [pc, #56]	; (aba4 <ticker_stop_scan_assert+0x5c>)
    ab6c:	480e      	ldr	r0, [pc, #56]	; (aba8 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    ab6e:	f7f6 fa0d 	bl	f8c <printk>
    ab72:	4040      	eors	r0, r0
    ab74:	f380 8811 	msr	BASEPRI, r0
    ab78:	f04f 0004 	mov.w	r0, #4
    ab7c:	df02      	svc	2
    ab7e:	7c1b      	ldrb	r3, [r3, #16]
    ab80:	2b06      	cmp	r3, #6
    ab82:	d1ea      	bne.n	ab5a <ticker_stop_scan_assert+0x12>
    ab84:	4b04      	ldr	r3, [pc, #16]	; (ab98 <ticker_stop_scan_assert+0x50>)
    ab86:	9301      	str	r3, [sp, #4]
    ab88:	9300      	str	r3, [sp, #0]
    ab8a:	4a04      	ldr	r2, [pc, #16]	; (ab9c <ticker_stop_scan_assert+0x54>)
    ab8c:	4b04      	ldr	r3, [pc, #16]	; (aba0 <ticker_stop_scan_assert+0x58>)
    ab8e:	4905      	ldr	r1, [pc, #20]	; (aba4 <ticker_stop_scan_assert+0x5c>)
    ab90:	4806      	ldr	r0, [pc, #24]	; (abac <ticker_stop_scan_assert+0x64>)
    ab92:	e7ec      	b.n	ab6e <ticker_stop_scan_assert+0x26>
    ab94:	200008c8 	.word	0x200008c8
    ab98:	0001496d 	.word	0x0001496d
    ab9c:	000156bc 	.word	0x000156bc
    aba0:	00016c7e 	.word	0x00016c7e
    aba4:	0001570b 	.word	0x0001570b
    aba8:	0001565b 	.word	0x0001565b
    abac:	00017b79 	.word	0x00017b79

0000abb0 <ticker_update_adv_assert>:
{
    abb0:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    abb2:	b190      	cbz	r0, abda <ticker_update_adv_assert+0x2a>
    abb4:	4b0a      	ldr	r3, [pc, #40]	; (abe0 <ticker_update_adv_assert+0x30>)
    abb6:	7c9b      	ldrb	r3, [r3, #18]
    abb8:	2b05      	cmp	r3, #5
    abba:	d00e      	beq.n	abda <ticker_update_adv_assert+0x2a>
    abbc:	4b09      	ldr	r3, [pc, #36]	; (abe4 <ticker_update_adv_assert+0x34>)
    abbe:	9301      	str	r3, [sp, #4]
    abc0:	9300      	str	r3, [sp, #0]
    abc2:	4a09      	ldr	r2, [pc, #36]	; (abe8 <ticker_update_adv_assert+0x38>)
    abc4:	4b09      	ldr	r3, [pc, #36]	; (abec <ticker_update_adv_assert+0x3c>)
    abc6:	490a      	ldr	r1, [pc, #40]	; (abf0 <ticker_update_adv_assert+0x40>)
    abc8:	480a      	ldr	r0, [pc, #40]	; (abf4 <ticker_update_adv_assert+0x44>)
    abca:	f7f6 f9df 	bl	f8c <printk>
    abce:	4040      	eors	r0, r0
    abd0:	f380 8811 	msr	BASEPRI, r0
    abd4:	f04f 0004 	mov.w	r0, #4
    abd8:	df02      	svc	2
}
    abda:	b003      	add	sp, #12
    abdc:	f85d fb04 	ldr.w	pc, [sp], #4
    abe0:	200008c8 	.word	0x200008c8
    abe4:	0001496d 	.word	0x0001496d
    abe8:	000156bc 	.word	0x000156bc
    abec:	00016c96 	.word	0x00016c96
    abf0:	0001570b 	.word	0x0001570b
    abf4:	00017be5 	.word	0x00017be5

0000abf8 <ticker_update_slave_assert>:
{
    abf8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    abfa:	b198      	cbz	r0, ac24 <ticker_update_slave_assert+0x2c>
    abfc:	4b0b      	ldr	r3, [pc, #44]	; (ac2c <ticker_update_slave_assert+0x34>)
    abfe:	7c9b      	ldrb	r3, [r3, #18]
    ac00:	b2c9      	uxtb	r1, r1
    ac02:	4299      	cmp	r1, r3
    ac04:	d00e      	beq.n	ac24 <ticker_update_slave_assert+0x2c>
    ac06:	4b0a      	ldr	r3, [pc, #40]	; (ac30 <ticker_update_slave_assert+0x38>)
    ac08:	9301      	str	r3, [sp, #4]
    ac0a:	9300      	str	r3, [sp, #0]
    ac0c:	4a09      	ldr	r2, [pc, #36]	; (ac34 <ticker_update_slave_assert+0x3c>)
    ac0e:	4b0a      	ldr	r3, [pc, #40]	; (ac38 <ticker_update_slave_assert+0x40>)
    ac10:	490a      	ldr	r1, [pc, #40]	; (ac3c <ticker_update_slave_assert+0x44>)
    ac12:	480b      	ldr	r0, [pc, #44]	; (ac40 <ticker_update_slave_assert+0x48>)
    ac14:	f7f6 f9ba 	bl	f8c <printk>
    ac18:	4040      	eors	r0, r0
    ac1a:	f380 8811 	msr	BASEPRI, r0
    ac1e:	f04f 0004 	mov.w	r0, #4
    ac22:	df02      	svc	2
}
    ac24:	b003      	add	sp, #12
    ac26:	f85d fb04 	ldr.w	pc, [sp], #4
    ac2a:	bf00      	nop
    ac2c:	200008c8 	.word	0x200008c8
    ac30:	0001496d 	.word	0x0001496d
    ac34:	000156bc 	.word	0x000156bc
    ac38:	00016caf 	.word	0x00016caf
    ac3c:	0001570b 	.word	0x0001570b
    ac40:	00017c34 	.word	0x00017c34

0000ac44 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    ac44:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    ac46:	b170      	cbz	r0, ac66 <ticker_op_latency_cancelled+0x22>
    ac48:	4b0b      	ldr	r3, [pc, #44]	; (ac78 <ticker_op_latency_cancelled+0x34>)
    ac4a:	9301      	str	r3, [sp, #4]
    ac4c:	9300      	str	r3, [sp, #0]
    ac4e:	4a0b      	ldr	r2, [pc, #44]	; (ac7c <ticker_op_latency_cancelled+0x38>)
    ac50:	4b0b      	ldr	r3, [pc, #44]	; (ac80 <ticker_op_latency_cancelled+0x3c>)
    ac52:	490c      	ldr	r1, [pc, #48]	; (ac84 <ticker_op_latency_cancelled+0x40>)
    ac54:	480c      	ldr	r0, [pc, #48]	; (ac88 <ticker_op_latency_cancelled+0x44>)
    ac56:	f7f6 f999 	bl	f8c <printk>
    ac5a:	4040      	eors	r0, r0
    ac5c:	f380 8811 	msr	BASEPRI, r0
    ac60:	f04f 0004 	mov.w	r0, #4
    ac64:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    ac66:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    ac6a:	f360 0341 	bfi	r3, r0, #1, #1
    ac6e:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    ac72:	b003      	add	sp, #12
    ac74:	f85d fb04 	ldr.w	pc, [sp], #4
    ac78:	0001496d 	.word	0x0001496d
    ac7c:	000156bc 	.word	0x000156bc
    ac80:	00016f8d 	.word	0x00016f8d
    ac84:	0001570b 	.word	0x0001570b
    ac88:	00017b06 	.word	0x00017b06

0000ac8c <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    ac8c:	4b04      	ldr	r3, [pc, #16]	; (aca0 <ticker_job_disable+0x14>)
    ac8e:	7d1b      	ldrb	r3, [r3, #20]
    ac90:	b123      	cbz	r3, ac9c <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    ac92:	2101      	movs	r1, #1
    ac94:	2200      	movs	r2, #0
    ac96:	4608      	mov	r0, r1
    ac98:	f7fc ba1e 	b.w	70d8 <mayfly_enable>
    ac9c:	4770      	bx	lr
    ac9e:	bf00      	nop
    aca0:	200008c8 	.word	0x200008c8

0000aca4 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    aca4:	2806      	cmp	r0, #6
{
    aca6:	b510      	push	{r4, lr}
    aca8:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    acaa:	d90a      	bls.n	acc2 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    acac:	4b09      	ldr	r3, [pc, #36]	; (acd4 <hdr_conn_get+0x30>)
    acae:	1fc2      	subs	r2, r0, #7
    acb0:	b292      	uxth	r2, r2
    acb2:	f44f 71aa 	mov.w	r1, #340	; 0x154
    acb6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    acba:	f7fc f99f 	bl	6ffc <mem_get>
    acbe:	6020      	str	r0, [r4, #0]
    acc0:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    acc2:	2805      	cmp	r0, #5
    acc4:	d004      	beq.n	acd0 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    acc6:	2806      	cmp	r0, #6
	return NULL;
    acc8:	4803      	ldr	r0, [pc, #12]	; (acd8 <hdr_conn_get+0x34>)
    acca:	bf18      	it	ne
    accc:	2000      	movne	r0, #0
    acce:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    acd0:	4802      	ldr	r0, [pc, #8]	; (acdc <hdr_conn_get+0x38>)
}
    acd2:	bd10      	pop	{r4, pc}
    acd4:	200008c8 	.word	0x200008c8
    acd8:	20000998 	.word	0x20000998
    acdc:	200008e0 	.word	0x200008e0

0000ace0 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    ace0:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    ace2:	4b07      	ldr	r3, [pc, #28]	; (ad00 <event_stop.part.10+0x20>)
    ace4:	9301      	str	r3, [sp, #4]
    ace6:	9300      	str	r3, [sp, #0]
    ace8:	4a06      	ldr	r2, [pc, #24]	; (ad04 <event_stop.part.10+0x24>)
    acea:	4b07      	ldr	r3, [pc, #28]	; (ad08 <event_stop.part.10+0x28>)
    acec:	4907      	ldr	r1, [pc, #28]	; (ad0c <event_stop.part.10+0x2c>)
    acee:	4808      	ldr	r0, [pc, #32]	; (ad10 <event_stop.part.10+0x30>)
    acf0:	f7f6 f94c 	bl	f8c <printk>
    acf4:	4040      	eors	r0, r0
    acf6:	f380 8811 	msr	BASEPRI, r0
    acfa:	f04f 0004 	mov.w	r0, #4
    acfe:	df02      	svc	2
    ad00:	0001496d 	.word	0x0001496d
    ad04:	000156bc 	.word	0x000156bc
    ad08:	00016dae 	.word	0x00016dae
    ad0c:	0001570b 	.word	0x0001570b
    ad10:	0001771b 	.word	0x0001771b

0000ad14 <event_stop>:
	s_mfy_radio_stop.param = context;
    ad14:	4a06      	ldr	r2, [pc, #24]	; (ad30 <event_stop+0x1c>)
{
    ad16:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    ad18:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ad1a:	4613      	mov	r3, r2
    ad1c:	2200      	movs	r2, #0
    ad1e:	4611      	mov	r1, r2
    ad20:	4610      	mov	r0, r2
    ad22:	f7fc fa01 	bl	7128 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ad26:	b108      	cbz	r0, ad2c <event_stop+0x18>
    ad28:	f7ff ffda 	bl	ace0 <event_stop.part.10>
    ad2c:	bd08      	pop	{r3, pc}
    ad2e:	bf00      	nop
    ad30:	20003d70 	.word	0x20003d70

0000ad34 <event_active>:
{
    ad34:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ad36:	2200      	movs	r2, #0
    ad38:	4b0b      	ldr	r3, [pc, #44]	; (ad68 <event_active+0x34>)
    ad3a:	4611      	mov	r1, r2
    ad3c:	4610      	mov	r0, r2
    ad3e:	f7fc f9f3 	bl	7128 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ad42:	b170      	cbz	r0, ad62 <event_active+0x2e>
    ad44:	4b09      	ldr	r3, [pc, #36]	; (ad6c <event_active+0x38>)
    ad46:	9301      	str	r3, [sp, #4]
    ad48:	9300      	str	r3, [sp, #0]
    ad4a:	4a09      	ldr	r2, [pc, #36]	; (ad70 <event_active+0x3c>)
    ad4c:	4b09      	ldr	r3, [pc, #36]	; (ad74 <event_active+0x40>)
    ad4e:	490a      	ldr	r1, [pc, #40]	; (ad78 <event_active+0x44>)
    ad50:	480a      	ldr	r0, [pc, #40]	; (ad7c <event_active+0x48>)
    ad52:	f7f6 f91b 	bl	f8c <printk>
    ad56:	4040      	eors	r0, r0
    ad58:	f380 8811 	msr	BASEPRI, r0
    ad5c:	f04f 0004 	mov.w	r0, #4
    ad60:	df02      	svc	2
}
    ad62:	b003      	add	sp, #12
    ad64:	f85d fb04 	ldr.w	pc, [sp], #4
    ad68:	20003d40 	.word	0x20003d40
    ad6c:	0001496d 	.word	0x0001496d
    ad70:	000156bc 	.word	0x000156bc
    ad74:	00016cde 	.word	0x00016cde
    ad78:	0001570b 	.word	0x0001570b
    ad7c:	0001771b 	.word	0x0001771b

0000ad80 <event_xtal>:
{
    ad80:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ad82:	2200      	movs	r2, #0
    ad84:	4b0b      	ldr	r3, [pc, #44]	; (adb4 <event_xtal+0x34>)
    ad86:	4611      	mov	r1, r2
    ad88:	4610      	mov	r0, r2
    ad8a:	f7fc f9cd 	bl	7128 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ad8e:	b170      	cbz	r0, adae <event_xtal+0x2e>
    ad90:	4b09      	ldr	r3, [pc, #36]	; (adb8 <event_xtal+0x38>)
    ad92:	9301      	str	r3, [sp, #4]
    ad94:	9300      	str	r3, [sp, #0]
    ad96:	4a09      	ldr	r2, [pc, #36]	; (adbc <event_xtal+0x3c>)
    ad98:	4b09      	ldr	r3, [pc, #36]	; (adc0 <event_xtal+0x40>)
    ad9a:	490a      	ldr	r1, [pc, #40]	; (adc4 <event_xtal+0x44>)
    ad9c:	480a      	ldr	r0, [pc, #40]	; (adc8 <event_xtal+0x48>)
    ad9e:	f7f6 f8f5 	bl	f8c <printk>
    ada2:	4040      	eors	r0, r0
    ada4:	f380 8811 	msr	BASEPRI, r0
    ada8:	f04f 0004 	mov.w	r0, #4
    adac:	df02      	svc	2
}
    adae:	b003      	add	sp, #12
    adb0:	f85d fb04 	ldr.w	pc, [sp], #4
    adb4:	20003dc0 	.word	0x20003dc0
    adb8:	0001496d 	.word	0x0001496d
    adbc:	000156bc 	.word	0x000156bc
    adc0:	00016cfa 	.word	0x00016cfa
    adc4:	0001570b 	.word	0x0001570b
    adc8:	0001771b 	.word	0x0001771b

0000adcc <mayfly_radio_active>:
{
    adcc:	b507      	push	{r0, r1, r2, lr}
    adce:	4a12      	ldr	r2, [pc, #72]	; (ae18 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    add0:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    add2:	b140      	cbz	r0, ade6 <mayfly_radio_active+0x1a>
		if (s_active++) {
    add4:	1c59      	adds	r1, r3, #1
    add6:	7011      	strb	r1, [r2, #0]
    add8:	b9d3      	cbnz	r3, ae10 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    adda:	2001      	movs	r0, #1
}
    addc:	b003      	add	sp, #12
    adde:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_active_callback(0);
    ade2:	f006 b92d 	b.w	11040 <radio_active_callback>
		LL_ASSERT(s_active);
    ade6:	b973      	cbnz	r3, ae06 <mayfly_radio_active+0x3a>
    ade8:	4b0c      	ldr	r3, [pc, #48]	; (ae1c <mayfly_radio_active+0x50>)
    adea:	9301      	str	r3, [sp, #4]
    adec:	9300      	str	r3, [sp, #0]
    adee:	4a0c      	ldr	r2, [pc, #48]	; (ae20 <mayfly_radio_active+0x54>)
    adf0:	4b0c      	ldr	r3, [pc, #48]	; (ae24 <mayfly_radio_active+0x58>)
    adf2:	490d      	ldr	r1, [pc, #52]	; (ae28 <mayfly_radio_active+0x5c>)
    adf4:	480d      	ldr	r0, [pc, #52]	; (ae2c <mayfly_radio_active+0x60>)
    adf6:	f7f6 f8c9 	bl	f8c <printk>
    adfa:	4040      	eors	r0, r0
    adfc:	f380 8811 	msr	BASEPRI, r0
    ae00:	f04f 0004 	mov.w	r0, #4
    ae04:	df02      	svc	2
		if (--s_active) {
    ae06:	3b01      	subs	r3, #1
    ae08:	b2db      	uxtb	r3, r3
    ae0a:	7013      	strb	r3, [r2, #0]
    ae0c:	2b00      	cmp	r3, #0
    ae0e:	d0e5      	beq.n	addc <mayfly_radio_active+0x10>
}
    ae10:	b003      	add	sp, #12
    ae12:	f85d fb04 	ldr.w	pc, [sp], #4
    ae16:	bf00      	nop
    ae18:	20000a6c 	.word	0x20000a6c
    ae1c:	0001496d 	.word	0x0001496d
    ae20:	000156bc 	.word	0x000156bc
    ae24:	00016cca 	.word	0x00016cca
    ae28:	0001570b 	.word	0x0001570b
    ae2c:	00017670 	.word	0x00017670

0000ae30 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    ae30:	2000      	movs	r0, #0
    ae32:	f7ff bfcb 	b.w	adcc <mayfly_radio_active>
	...

0000ae38 <mayfly_radio_stop>:
{
    ae38:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    ae3a:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    ae3c:	1f03      	subs	r3, r0, #4
    ae3e:	2b01      	cmp	r3, #1
    ae40:	d90e      	bls.n	ae60 <mayfly_radio_stop+0x28>
    ae42:	4b11      	ldr	r3, [pc, #68]	; (ae88 <mayfly_radio_stop+0x50>)
    ae44:	9301      	str	r3, [sp, #4]
    ae46:	9300      	str	r3, [sp, #0]
    ae48:	4a10      	ldr	r2, [pc, #64]	; (ae8c <mayfly_radio_stop+0x54>)
    ae4a:	4b11      	ldr	r3, [pc, #68]	; (ae90 <mayfly_radio_stop+0x58>)
    ae4c:	4911      	ldr	r1, [pc, #68]	; (ae94 <mayfly_radio_stop+0x5c>)
    ae4e:	4812      	ldr	r0, [pc, #72]	; (ae98 <mayfly_radio_stop+0x60>)
    ae50:	f7f6 f89c 	bl	f8c <printk>
    ae54:	4040      	eors	r0, r0
    ae56:	f380 8811 	msr	BASEPRI, r0
    ae5a:	f04f 0004 	mov.w	r0, #4
    ae5e:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    ae60:	4a0e      	ldr	r2, [pc, #56]	; (ae9c <mayfly_radio_stop+0x64>)
    ae62:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    ae64:	b143      	cbz	r3, ae78 <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    ae66:	3b04      	subs	r3, #4
    ae68:	2b01      	cmp	r3, #1
    ae6a:	d905      	bls.n	ae78 <mayfly_radio_stop+0x40>
			_radio.state = state;
    ae6c:	7510      	strb	r0, [r2, #20]
}
    ae6e:	b003      	add	sp, #12
    ae70:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_disable();
    ae74:	f007 ba86 	b.w	12384 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    ae78:	f007 fab6 	bl	123e8 <radio_is_idle>
    ae7c:	2800      	cmp	r0, #0
    ae7e:	d0f6      	beq.n	ae6e <mayfly_radio_stop+0x36>
}
    ae80:	b003      	add	sp, #12
    ae82:	f85d fb04 	ldr.w	pc, [sp], #4
    ae86:	bf00      	nop
    ae88:	0001496d 	.word	0x0001496d
    ae8c:	000156bc 	.word	0x000156bc
    ae90:	00016d9c 	.word	0x00016d9c
    ae94:	0001570b 	.word	0x0001570b
    ae98:	0001769a 	.word	0x0001769a
    ae9c:	200008c8 	.word	0x200008c8

0000aea0 <pdu_node_tx_release>:
{
    aea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    aea2:	4a17      	ldr	r2, [pc, #92]	; (af00 <pdu_node_tx_release+0x60>)
    aea4:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    aea8:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    aeac:	3301      	adds	r3, #1
    aeae:	b2db      	uxtb	r3, r3
		last = 0;
    aeb0:	429c      	cmp	r4, r3
    aeb2:	bf08      	it	eq
    aeb4:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    aeb6:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    aeba:	429c      	cmp	r4, r3
    aebc:	d10e      	bne.n	aedc <pdu_node_tx_release+0x3c>
    aebe:	4b11      	ldr	r3, [pc, #68]	; (af04 <pdu_node_tx_release+0x64>)
    aec0:	9301      	str	r3, [sp, #4]
    aec2:	9300      	str	r3, [sp, #0]
    aec4:	4a10      	ldr	r2, [pc, #64]	; (af08 <pdu_node_tx_release+0x68>)
    aec6:	4b11      	ldr	r3, [pc, #68]	; (af0c <pdu_node_tx_release+0x6c>)
    aec8:	4911      	ldr	r1, [pc, #68]	; (af10 <pdu_node_tx_release+0x70>)
    aeca:	4812      	ldr	r0, [pc, #72]	; (af14 <pdu_node_tx_release+0x74>)
    aecc:	f7f6 f85e 	bl	f8c <printk>
    aed0:	4040      	eors	r0, r0
    aed2:	f380 8811 	msr	BASEPRI, r0
    aed6:	f04f 0004 	mov.w	r0, #4
    aeda:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    aedc:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    aee0:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    aee4:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    aee8:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    aeec:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    aef0:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    aef2:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    aef6:	b003      	add	sp, #12
    aef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    aefc:	f006 b8a2 	b.w	11044 <radio_event_callback>
    af00:	200008c8 	.word	0x200008c8
    af04:	0001496d 	.word	0x0001496d
    af08:	000156bc 	.word	0x000156bc
    af0c:	00016ee4 	.word	0x00016ee4
    af10:	0001570b 	.word	0x0001570b
    af14:	000177eb 	.word	0x000177eb

0000af18 <packet_tx_enqueue>:
{
    af18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    af1c:	4c24      	ldr	r4, [pc, #144]	; (afb0 <packet_tx_enqueue+0x98>)
{
    af1e:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    af20:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    af22:	b12e      	cbz	r6, af30 <packet_tx_enqueue+0x18>
    af24:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    af28:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    af2c:	429a      	cmp	r2, r3
    af2e:	d101      	bne.n	af34 <packet_tx_enqueue+0x1c>
    af30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    af34:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    af38:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    af3c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    af40:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    af44:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    af48:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    af4c:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    af4e:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    af50:	f7fc f854 	bl	6ffc <mem_get>
    af54:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    af56:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    af5a:	8c1a      	ldrh	r2, [r3, #32]
    af5c:	4282      	cmp	r2, r0
    af5e:	d11f      	bne.n	afa0 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    af60:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    af64:	b942      	cbnz	r2, af78 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    af66:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    af6a:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    af6e:	b91a      	cbnz	r2, af78 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    af70:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    af74:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    af78:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    af7c:	b102      	cbz	r2, af80 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    af7e:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    af80:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    af84:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    af88:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    af8c:	3301      	adds	r3, #1
    af8e:	b2db      	uxtb	r3, r3
			first = 0;
    af90:	429a      	cmp	r2, r3
    af92:	bf08      	it	eq
    af94:	2300      	moveq	r3, #0
    af96:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    af98:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    af9c:	b2f6      	uxtb	r6, r6
    af9e:	e7c0      	b.n	af22 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    afa0:	792b      	ldrb	r3, [r5, #4]
    afa2:	f367 0301 	bfi	r3, r7, #0, #2
    afa6:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    afa8:	4629      	mov	r1, r5
    afaa:	f7ff ff79 	bl	aea0 <pdu_node_tx_release>
    afae:	e7e9      	b.n	af84 <packet_tx_enqueue+0x6c>
    afb0:	200008c8 	.word	0x200008c8

0000afb4 <connection_release>:
{
    afb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    afb6:	2201      	movs	r2, #1
{
    afb8:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    afba:	4611      	mov	r1, r2
    afbc:	2000      	movs	r0, #0
    afbe:	f7fc f88b 	bl	70d8 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    afc2:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    afc6:	2100      	movs	r1, #0
    afc8:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    afcc:	3207      	adds	r2, #7
	ticker_status =
    afce:	9300      	str	r3, [sp, #0]
    afd0:	4608      	mov	r0, r1
    afd2:	4b3e      	ldr	r3, [pc, #248]	; (b0cc <connection_release+0x118>)
    afd4:	b2d2      	uxtb	r2, r2
    afd6:	f7fc ff03 	bl	7de0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    afda:	f030 0102 	bics.w	r1, r0, #2
    afde:	d00e      	beq.n	affe <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    afe0:	4b3b      	ldr	r3, [pc, #236]	; (b0d0 <connection_release+0x11c>)
    afe2:	9301      	str	r3, [sp, #4]
    afe4:	9300      	str	r3, [sp, #0]
    afe6:	4a3b      	ldr	r2, [pc, #236]	; (b0d4 <connection_release+0x120>)
    afe8:	4b3b      	ldr	r3, [pc, #236]	; (b0d8 <connection_release+0x124>)
    afea:	493c      	ldr	r1, [pc, #240]	; (b0dc <connection_release+0x128>)
    afec:	483c      	ldr	r0, [pc, #240]	; (b0e0 <connection_release+0x12c>)
    afee:	f7f5 ffcd 	bl	f8c <printk>
    aff2:	4040      	eors	r0, r0
    aff4:	f380 8811 	msr	BASEPRI, r0
    aff8:	f04f 0004 	mov.w	r0, #4
    affc:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    affe:	4b39      	ldr	r3, [pc, #228]	; (b0e4 <connection_release+0x130>)
    b000:	7d1a      	ldrb	r2, [r3, #20]
    b002:	2a05      	cmp	r2, #5
    b004:	461d      	mov	r5, r3
    b006:	d11b      	bne.n	b040 <connection_release+0x8c>
					  conn->handle))) {
    b008:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    b00a:	7c18      	ldrb	r0, [r3, #16]
    b00c:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    b00e:	4290      	cmp	r0, r2
    b010:	d116      	bne.n	b040 <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    b012:	7419      	strb	r1, [r3, #16]
		ticker_status =
    b014:	f242 23fb 	movw	r3, #8955	; 0x22fb
    b018:	9300      	str	r3, [sp, #0]
    b01a:	2201      	movs	r2, #1
    b01c:	4b2b      	ldr	r3, [pc, #172]	; (b0cc <connection_release+0x118>)
    b01e:	4608      	mov	r0, r1
    b020:	f7fc fede 	bl	7de0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b024:	f030 0202 	bics.w	r2, r0, #2
    b028:	d1da      	bne.n	afe0 <connection_release+0x2c>
		ticker_status =
    b02a:	f242 3302 	movw	r3, #8962	; 0x2302
    b02e:	9300      	str	r3, [sp, #0]
    b030:	4611      	mov	r1, r2
    b032:	4b26      	ldr	r3, [pc, #152]	; (b0cc <connection_release+0x118>)
    b034:	4610      	mov	r0, r2
    b036:	f7fc fed3 	bl	7de0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b03a:	f030 0302 	bics.w	r3, r0, #2
    b03e:	d1cf      	bne.n	afe0 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    b040:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    b044:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    b048:	4299      	cmp	r1, r3
    b04a:	d003      	beq.n	b054 <connection_release+0xa0>
    b04c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b050:	4299      	cmp	r1, r3
    b052:	d101      	bne.n	b058 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    b054:	4e24      	ldr	r6, [pc, #144]	; (b0e8 <connection_release+0x134>)
    b056:	e012      	b.n	b07e <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b058:	790b      	ldrb	r3, [r1, #4]
    b05a:	f36f 0301 	bfc	r3, #0, #2
    b05e:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b060:	680b      	ldr	r3, [r1, #0]
    b062:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    b066:	8c20      	ldrh	r0, [r4, #32]
    b068:	f7ff ff1a 	bl	aea0 <pdu_node_tx_release>
    b06c:	e7e8      	b.n	b040 <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b06e:	6803      	ldr	r3, [r0, #0]
    b070:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    b074:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    b078:	4631      	mov	r1, r6
    b07a:	f7fb ffa4 	bl	6fc6 <mem_release>
	while ((conn->pkt_tx_head) &&
    b07e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    b082:	b118      	cbz	r0, b08c <connection_release+0xd8>
    b084:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b088:	4298      	cmp	r0, r3
    b08a:	d1f0      	bne.n	b06e <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    b08c:	2300      	movs	r3, #0
    b08e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    b092:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    b096:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    b09a:	b951      	cbnz	r1, b0b2 <connection_release+0xfe>
	conn->handle = 0xffff;
    b09c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b0a0:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    b0a2:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    b0a6:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    b0a8:	bf08      	it	eq
    b0aa:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    b0ae:	b002      	add	sp, #8
    b0b0:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b0b2:	790b      	ldrb	r3, [r1, #4]
    b0b4:	f36f 0301 	bfc	r3, #0, #2
    b0b8:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b0ba:	680b      	ldr	r3, [r1, #0]
    b0bc:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    b0c0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    b0c4:	8c20      	ldrh	r0, [r4, #32]
    b0c6:	f7ff feeb 	bl	aea0 <pdu_node_tx_release>
    b0ca:	e7e4      	b.n	b096 <connection_release+0xe2>
    b0cc:	0000aaa5 	.word	0x0000aaa5
    b0d0:	0001496d 	.word	0x0001496d
    b0d4:	000156bc 	.word	0x000156bc
    b0d8:	00016ef8 	.word	0x00016ef8
    b0dc:	0001570b 	.word	0x0001570b
    b0e0:	00016fe1 	.word	0x00016fe1
    b0e4:	200008c8 	.word	0x200008c8
    b0e8:	20000a24 	.word	0x20000a24

0000b0ec <chan_set>:
	switch (chan) {
    b0ec:	2826      	cmp	r0, #38	; 0x26
{
    b0ee:	b513      	push	{r0, r1, r4, lr}
    b0f0:	4604      	mov	r4, r0
	switch (chan) {
    b0f2:	d00c      	beq.n	b10e <chan_set+0x22>
    b0f4:	2827      	cmp	r0, #39	; 0x27
    b0f6:	d00c      	beq.n	b112 <chan_set+0x26>
    b0f8:	2825      	cmp	r0, #37	; 0x25
    b0fa:	d10c      	bne.n	b116 <chan_set+0x2a>
		radio_freq_chan_set(2);
    b0fc:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    b0fe:	f007 f8bd 	bl	1227c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    b102:	4620      	mov	r0, r4
}
    b104:	b002      	add	sp, #8
    b106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    b10a:	f007 b8bd 	b.w	12288 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    b10e:	201a      	movs	r0, #26
    b110:	e7f5      	b.n	b0fe <chan_set+0x12>
		radio_freq_chan_set(80);
    b112:	2050      	movs	r0, #80	; 0x50
    b114:	e7f3      	b.n	b0fe <chan_set+0x12>
		if (chan < 11) {
    b116:	280a      	cmp	r0, #10
    b118:	d802      	bhi.n	b120 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    b11a:	3002      	adds	r0, #2
    b11c:	0040      	lsls	r0, r0, #1
    b11e:	e7ee      	b.n	b0fe <chan_set+0x12>
		} else if (chan < 40) {
    b120:	2827      	cmp	r0, #39	; 0x27
    b122:	d801      	bhi.n	b128 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    b124:	3003      	adds	r0, #3
    b126:	e7f9      	b.n	b11c <chan_set+0x30>
			LL_ASSERT(0);
    b128:	4b07      	ldr	r3, [pc, #28]	; (b148 <chan_set+0x5c>)
    b12a:	9301      	str	r3, [sp, #4]
    b12c:	9300      	str	r3, [sp, #0]
    b12e:	4a07      	ldr	r2, [pc, #28]	; (b14c <chan_set+0x60>)
    b130:	4b07      	ldr	r3, [pc, #28]	; (b150 <chan_set+0x64>)
    b132:	4908      	ldr	r1, [pc, #32]	; (b154 <chan_set+0x68>)
    b134:	4808      	ldr	r0, [pc, #32]	; (b158 <chan_set+0x6c>)
    b136:	f7f5 ff29 	bl	f8c <printk>
    b13a:	4040      	eors	r0, r0
    b13c:	f380 8811 	msr	BASEPRI, r0
    b140:	f04f 0004 	mov.w	r0, #4
    b144:	df02      	svc	2
    b146:	bf00      	nop
    b148:	0001496d 	.word	0x0001496d
    b14c:	000156bc 	.word	0x000156bc
    b150:	00016dce 	.word	0x00016dce
    b154:	0001570b 	.word	0x0001570b
    b158:	0001565b 	.word	0x0001565b

0000b15c <adv_setup>:
{
    b15c:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    b15e:	4c31      	ldr	r4, [pc, #196]	; (b224 <adv_setup+0xc8>)
    b160:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    b164:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    b168:	429a      	cmp	r2, r3
    b16a:	d051      	beq.n	b210 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    b16c:	3301      	adds	r3, #1
    b16e:	b2db      	uxtb	r3, r3
			first = 0;
    b170:	2b02      	cmp	r3, #2
    b172:	bf08      	it	eq
    b174:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    b176:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    b17a:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    b17c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b180:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    b184:	4299      	cmp	r1, r3
    b186:	d007      	beq.n	b198 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    b188:	3301      	adds	r3, #1
    b18a:	b2db      	uxtb	r3, r3
			first = 0;
    b18c:	2b02      	cmp	r3, #2
    b18e:	bf08      	it	eq
    b190:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    b192:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    b196:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    b198:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    b19c:	2327      	movs	r3, #39	; 0x27
    b19e:	212b      	movs	r1, #43	; 0x2b
    b1a0:	fb13 1505 	smlabb	r5, r3, r5, r1
    b1a4:	1966      	adds	r6, r4, r5
	if (upd) {
    b1a6:	b142      	cbz	r2, b1ba <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    b1a8:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    b1ac:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    b1b0:	2206      	movs	r2, #6
    b1b2:	1cb1      	adds	r1, r6, #2
    b1b4:	307d      	adds	r0, #125	; 0x7d
    b1b6:	f7f6 fd21 	bl	1bfc <memcpy>
	radio_pkt_tx_set(pdu);
    b1ba:	4630      	mov	r0, r6
    b1bc:	f007 f8c2 	bl	12344 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    b1c0:	5d63      	ldrb	r3, [r4, r5]
    b1c2:	f003 030f 	and.w	r3, r3, #15
    b1c6:	2b02      	cmp	r3, #2
    b1c8:	d024      	beq.n	b214 <adv_setup+0xb8>
    b1ca:	2b07      	cmp	r3, #7
    b1cc:	d022      	beq.n	b214 <adv_setup+0xb8>
		_radio.state = STATE_TX;
    b1ce:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    b1d0:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    b1d2:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    b1d4:	f007 f9cc 	bl	12570 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    b1d8:	2000      	movs	r0, #0
    b1da:	f007 f92d 	bl	12438 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    b1de:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b1e2:	f3c3 0202 	ubfx	r2, r3, #0, #3
    b1e6:	b2d3      	uxtb	r3, r2
    b1e8:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    b1ea:	2000      	movs	r0, #0
    b1ec:	07ce      	lsls	r6, r1, #31
    b1ee:	f100 0501 	add.w	r5, r0, #1
    b1f2:	d514      	bpl.n	b21e <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    b1f4:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    b1f6:	4013      	ands	r3, r2
    b1f8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    b1fc:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    b1fe:	f363 0202 	bfi	r2, r3, #0, #3
    b202:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    b206:	3025      	adds	r0, #37	; 0x25
}
    b208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    b20c:	f7ff bf6e 	b.w	b0ec <chan_set>
	u8_t upd = 0;
    b210:	2200      	movs	r2, #0
    b212:	e7b3      	b.n	b17c <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    b214:	2303      	movs	r3, #3
    b216:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    b218:	f007 f924 	bl	12464 <radio_switch_complete_and_disable>
    b21c:	e7df      	b.n	b1de <adv_setup+0x82>
		bitmap >>= 1;
    b21e:	0849      	lsrs	r1, r1, #1
    b220:	4628      	mov	r0, r5
    b222:	e7e3      	b.n	b1ec <adv_setup+0x90>
    b224:	200008c8 	.word	0x200008c8

0000b228 <sched_after_mstr_free_offset_get>:
{
    b228:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    b22a:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    b22c:	aa04      	add	r2, sp, #16
{
    b22e:	461c      	mov	r4, r3
    b230:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    b232:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    b236:	3127      	adds	r1, #39	; 0x27
    b238:	2001      	movs	r0, #1
    b23a:	f7ff fa5d 	bl	a6f8 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    b23e:	6823      	ldr	r3, [r4, #0]
    b240:	b363      	cbz	r3, b29c <sched_after_mstr_free_offset_get+0x74>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    b242:	9803      	ldr	r0, [sp, #12]
    b244:	1b83      	subs	r3, r0, r6
    b246:	021b      	lsls	r3, r3, #8
    b248:	d50e      	bpl.n	b268 <sched_after_mstr_free_offset_get+0x40>
    b24a:	4b19      	ldr	r3, [pc, #100]	; (b2b0 <sched_after_mstr_free_offset_get+0x88>)
    b24c:	9301      	str	r3, [sp, #4]
    b24e:	9300      	str	r3, [sp, #0]
    b250:	4a18      	ldr	r2, [pc, #96]	; (b2b4 <sched_after_mstr_free_offset_get+0x8c>)
    b252:	4b19      	ldr	r3, [pc, #100]	; (b2b8 <sched_after_mstr_free_offset_get+0x90>)
    b254:	4919      	ldr	r1, [pc, #100]	; (b2bc <sched_after_mstr_free_offset_get+0x94>)
    b256:	481a      	ldr	r0, [pc, #104]	; (b2c0 <sched_after_mstr_free_offset_get+0x98>)
    b258:	f7f5 fe98 	bl	f8c <printk>
    b25c:	4040      	eors	r0, r0
    b25e:	f380 8811 	msr	BASEPRI, r0
    b262:	f04f 0004 	mov.w	r0, #4
    b266:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    b268:	4631      	mov	r1, r6
    b26a:	f7fc fe8b 	bl	7f84 <ticker_ticks_diff_get>
    b26e:	4602      	mov	r2, r0
    b270:	4814      	ldr	r0, [pc, #80]	; (b2c4 <sched_after_mstr_free_offset_get+0x9c>)
    b272:	2307      	movs	r3, #7
    b274:	fba2 0100 	umull	r0, r1, r2, r0
    b278:	fb03 1102 	mla	r1, r3, r2, r1
    b27c:	a30a      	add	r3, pc, #40	; (adr r3, b2a8 <sched_after_mstr_free_offset_get+0x80>)
    b27e:	e9d3 2300 	ldrd	r2, r3, [r3]
    b282:	f7f4 ffc7 	bl	214 <__aeabi_uldivmod>
    b286:	6823      	ldr	r3, [r4, #0]
    b288:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    b28a:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    b28c:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    b28e:	db05      	blt.n	b29c <sched_after_mstr_free_offset_get+0x74>
		u32_t conn_interval_us = conn_interval * 1250;
    b290:	f240 40e2 	movw	r0, #1250	; 0x4e2
    b294:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    b296:	6823      	ldr	r3, [r4, #0]
    b298:	4298      	cmp	r0, r3
    b29a:	d301      	bcc.n	b2a0 <sched_after_mstr_free_offset_get+0x78>
}
    b29c:	b004      	add	sp, #16
    b29e:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    b2a0:	1a1b      	subs	r3, r3, r0
    b2a2:	6023      	str	r3, [r4, #0]
    b2a4:	e7f7      	b.n	b296 <sched_after_mstr_free_offset_get+0x6e>
    b2a6:	bf00      	nop
    b2a8:	3b9aca00 	.word	0x3b9aca00
    b2ac:	00000000 	.word	0x00000000
    b2b0:	0001496d 	.word	0x0001496d
    b2b4:	000156bc 	.word	0x000156bc
    b2b8:	00016d60 	.word	0x00016d60
    b2bc:	0001570b 	.word	0x0001570b
    b2c0:	00017a47 	.word	0x00017a47
    b2c4:	1afd498d 	.word	0x1afd498d

0000b2c8 <mayfly_sched_win_offset_use>:
{
    b2c8:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    b2ca:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    b2ce:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    b2d0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    b2d4:	68c1      	ldr	r1, [r0, #12]
    b2d6:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    b2d8:	f7ff ffa6 	bl	b228 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b2dc:	a902      	add	r1, sp, #8
    b2de:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b2e2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b2e6:	f240 42e2 	movw	r2, #1250	; 0x4e2
    b2ea:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b2ee:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b2f0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b2f4:	f7f6 fc82 	bl	1bfc <memcpy>
}
    b2f8:	b002      	add	sp, #8
    b2fa:	bd10      	pop	{r4, pc}

0000b2fc <mayfly_sched_after_mstr_free_offset_get>:
{
    b2fc:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    b2fe:	4c05      	ldr	r4, [pc, #20]	; (b314 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    b300:	4602      	mov	r2, r0
    b302:	f504 7382 	add.w	r3, r4, #260	; 0x104
    b306:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    b30a:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    b30e:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    b310:	f7ff bf8a 	b.w	b228 <sched_after_mstr_free_offset_get>
    b314:	200008c8 	.word	0x200008c8

0000b318 <terminate_ind_rx_enqueue>:
{
    b318:	b513      	push	{r0, r1, r4, lr}
    b31a:	4603      	mov	r3, r0
    b31c:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    b31e:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    b322:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    b326:	b970      	cbnz	r0, b346 <terminate_ind_rx_enqueue+0x2e>
    b328:	4b16      	ldr	r3, [pc, #88]	; (b384 <terminate_ind_rx_enqueue+0x6c>)
    b32a:	9301      	str	r3, [sp, #4]
    b32c:	9300      	str	r3, [sp, #0]
    b32e:	4a16      	ldr	r2, [pc, #88]	; (b388 <terminate_ind_rx_enqueue+0x70>)
    b330:	4b16      	ldr	r3, [pc, #88]	; (b38c <terminate_ind_rx_enqueue+0x74>)
    b332:	4917      	ldr	r1, [pc, #92]	; (b390 <terminate_ind_rx_enqueue+0x78>)
    b334:	4817      	ldr	r0, [pc, #92]	; (b394 <terminate_ind_rx_enqueue+0x7c>)
	LL_ASSERT(link);
    b336:	f7f5 fe29 	bl	f8c <printk>
    b33a:	4040      	eors	r0, r0
    b33c:	f380 8811 	msr	BASEPRI, r0
    b340:	f04f 0004 	mov.w	r0, #4
    b344:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    b346:	8c1c      	ldrh	r4, [r3, #32]
    b348:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    b34c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b350:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b352:	4a11      	ldr	r2, [pc, #68]	; (b398 <terminate_ind_rx_enqueue+0x80>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b354:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b358:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    b35c:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    b360:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    b364:	f7fb fe6f 	bl	7046 <memq_enqueue>
	LL_ASSERT(link);
    b368:	b938      	cbnz	r0, b37a <terminate_ind_rx_enqueue+0x62>
    b36a:	4b06      	ldr	r3, [pc, #24]	; (b384 <terminate_ind_rx_enqueue+0x6c>)
    b36c:	9301      	str	r3, [sp, #4]
    b36e:	9300      	str	r3, [sp, #0]
    b370:	4a05      	ldr	r2, [pc, #20]	; (b388 <terminate_ind_rx_enqueue+0x70>)
    b372:	4b06      	ldr	r3, [pc, #24]	; (b38c <terminate_ind_rx_enqueue+0x74>)
    b374:	4906      	ldr	r1, [pc, #24]	; (b390 <terminate_ind_rx_enqueue+0x78>)
    b376:	4809      	ldr	r0, [pc, #36]	; (b39c <terminate_ind_rx_enqueue+0x84>)
    b378:	e7dd      	b.n	b336 <terminate_ind_rx_enqueue+0x1e>
}
    b37a:	b002      	add	sp, #8
    b37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    b380:	f005 be60 	b.w	11044 <radio_event_callback>
    b384:	0001496d 	.word	0x0001496d
    b388:	000156bc 	.word	0x000156bc
    b38c:	00016f0b 	.word	0x00016f0b
    b390:	0001570b 	.word	0x0001570b
    b394:	00017acd 	.word	0x00017acd
    b398:	200008c8 	.word	0x200008c8
    b39c:	00016fbb 	.word	0x00016fbb

0000b3a0 <prepare_normal_set>:
{
    b3a0:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b3a2:	6804      	ldr	r4, [r0, #0]
    b3a4:	2c00      	cmp	r4, #0
{
    b3a6:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b3a8:	da26      	bge.n	b3f8 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
    b3aa:	6843      	ldr	r3, [r0, #4]
    b3ac:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    b3ae:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    b3b0:	429d      	cmp	r5, r3
    b3b2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    b3b6:	bf34      	ite	cc
    b3b8:	1ae4      	subcc	r4, r4, r3
    b3ba:	1b64      	subcs	r4, r4, r5
		ticker_status =
    b3bc:	4b0f      	ldr	r3, [pc, #60]	; (b3fc <prepare_normal_set+0x5c>)
    b3be:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b3c0:	b2a4      	uxth	r4, r4
		ticker_status =
    b3c2:	2300      	movs	r3, #0
    b3c4:	9304      	str	r3, [sp, #16]
    b3c6:	9303      	str	r3, [sp, #12]
    b3c8:	9302      	str	r3, [sp, #8]
    b3ca:	4618      	mov	r0, r3
    b3cc:	9401      	str	r4, [sp, #4]
    b3ce:	9400      	str	r4, [sp, #0]
    b3d0:	f7fc fcb8 	bl	7d44 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b3d4:	f030 0302 	bics.w	r3, r0, #2
    b3d8:	d00e      	beq.n	b3f8 <prepare_normal_set+0x58>
    b3da:	4b09      	ldr	r3, [pc, #36]	; (b400 <prepare_normal_set+0x60>)
    b3dc:	9301      	str	r3, [sp, #4]
    b3de:	9300      	str	r3, [sp, #0]
    b3e0:	4a08      	ldr	r2, [pc, #32]	; (b404 <prepare_normal_set+0x64>)
    b3e2:	4b09      	ldr	r3, [pc, #36]	; (b408 <prepare_normal_set+0x68>)
    b3e4:	4909      	ldr	r1, [pc, #36]	; (b40c <prepare_normal_set+0x6c>)
    b3e6:	480a      	ldr	r0, [pc, #40]	; (b410 <prepare_normal_set+0x70>)
    b3e8:	f7f5 fdd0 	bl	f8c <printk>
    b3ec:	4040      	eors	r0, r0
    b3ee:	f380 8811 	msr	BASEPRI, r0
    b3f2:	f04f 0004 	mov.w	r0, #4
    b3f6:	df02      	svc	2
}
    b3f8:	b009      	add	sp, #36	; 0x24
    b3fa:	bd30      	pop	{r4, r5, pc}
    b3fc:	00009b4d 	.word	0x00009b4d
    b400:	0001496d 	.word	0x0001496d
    b404:	000156bc 	.word	0x000156bc
    b408:	00016d18 	.word	0x00016d18
    b40c:	0001570b 	.word	0x0001570b
    b410:	00016fe1 	.word	0x00016fe1
    b414:	00000000 	.word	0x00000000

0000b418 <mayfly_xtal_stop_calc>:
{
    b418:	b570      	push	{r4, r5, r6, lr}
    b41a:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b41c:	2302      	movs	r3, #2
    b41e:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    b420:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    b422:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b424:	4e7e      	ldr	r6, [pc, #504]	; (b620 <mayfly_xtal_stop_calc+0x208>)
				    _radio.connection_count));
    b426:	4d7f      	ldr	r5, [pc, #508]	; (b624 <mayfly_xtal_stop_calc+0x20c>)
	struct connection *conn_curr = NULL;
    b428:	930a      	str	r3, [sp, #40]	; 0x28
{
    b42a:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    b42c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    b42e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    b432:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b434:	ab09      	add	r3, sp, #36	; 0x24
    b436:	9302      	str	r3, [sp, #8]
    b438:	ab0c      	add	r3, sp, #48	; 0x30
    b43a:	9300      	str	r3, [sp, #0]
    b43c:	9601      	str	r6, [sp, #4]
    b43e:	ab0d      	add	r3, sp, #52	; 0x34
    b440:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    b444:	2101      	movs	r1, #1
    b446:	2000      	movs	r0, #0
    b448:	f7fc fd06 	bl	7e58 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b44c:	2802      	cmp	r0, #2
    b44e:	d014      	beq.n	b47a <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b450:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b452:	b1b3      	cbz	r3, b482 <mayfly_xtal_stop_calc+0x6a>
    b454:	4b74      	ldr	r3, [pc, #464]	; (b628 <mayfly_xtal_stop_calc+0x210>)
    b456:	9301      	str	r3, [sp, #4]
    b458:	9300      	str	r3, [sp, #0]
    b45a:	4a74      	ldr	r2, [pc, #464]	; (b62c <mayfly_xtal_stop_calc+0x214>)
    b45c:	4b74      	ldr	r3, [pc, #464]	; (b630 <mayfly_xtal_stop_calc+0x218>)
    b45e:	4975      	ldr	r1, [pc, #468]	; (b634 <mayfly_xtal_stop_calc+0x21c>)
    b460:	4875      	ldr	r0, [pc, #468]	; (b638 <mayfly_xtal_stop_calc+0x220>)
	LL_ASSERT(hdr_curr);
    b462:	f7f5 fd93 	bl	f8c <printk>
    b466:	4040      	eors	r0, r0
    b468:	f380 8811 	msr	BASEPRI, r0
    b46c:	f04f 0004 	mov.w	r0, #4
    b470:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b472:	2101      	movs	r1, #1
    b474:	2000      	movs	r0, #0
    b476:	f7fc fd6d 	bl	7f54 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b47a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b47c:	2b02      	cmp	r3, #2
    b47e:	d0f8      	beq.n	b472 <mayfly_xtal_stop_calc+0x5a>
    b480:	e7e6      	b.n	b450 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    b482:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    b486:	2bff      	cmp	r3, #255	; 0xff
    b488:	d004      	beq.n	b494 <mayfly_xtal_stop_calc+0x7c>
    b48a:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b48e:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    b490:	4293      	cmp	r3, r2
    b492:	dacf      	bge.n	b434 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    b494:	1f5a      	subs	r2, r3, #5
    b496:	b2d2      	uxtb	r2, r2
    b498:	2af9      	cmp	r2, #249	; 0xf9
    b49a:	d805      	bhi.n	b4a8 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
    b49c:	4a61      	ldr	r2, [pc, #388]	; (b624 <mayfly_xtal_stop_calc+0x20c>)
    b49e:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b4a2:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    b4a4:	4293      	cmp	r3, r2
    b4a6:	db05      	blt.n	b4b4 <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b4a8:	2100      	movs	r1, #0
    b4aa:	2001      	movs	r0, #1
    b4ac:	f7fe fe92 	bl	a1d4 <mayfly_xtal_retain>
}
    b4b0:	b00e      	add	sp, #56	; 0x38
    b4b2:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    b4b4:	a90a      	add	r1, sp, #40	; 0x28
    b4b6:	b2e0      	uxtb	r0, r4
    b4b8:	f7ff fbf4 	bl	aca4 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    b4bc:	b938      	cbnz	r0, b4ce <mayfly_xtal_stop_calc+0xb6>
    b4be:	4b5a      	ldr	r3, [pc, #360]	; (b628 <mayfly_xtal_stop_calc+0x210>)
    b4c0:	9301      	str	r3, [sp, #4]
    b4c2:	9300      	str	r3, [sp, #0]
    b4c4:	4a59      	ldr	r2, [pc, #356]	; (b62c <mayfly_xtal_stop_calc+0x214>)
    b4c6:	4b5a      	ldr	r3, [pc, #360]	; (b630 <mayfly_xtal_stop_calc+0x218>)
    b4c8:	495a      	ldr	r1, [pc, #360]	; (b634 <mayfly_xtal_stop_calc+0x21c>)
    b4ca:	485c      	ldr	r0, [pc, #368]	; (b63c <mayfly_xtal_stop_calc+0x224>)
    b4cc:	e7c9      	b.n	b462 <mayfly_xtal_stop_calc+0x4a>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    b4ce:	6803      	ldr	r3, [r0, #0]
    b4d0:	6844      	ldr	r4, [r0, #4]
    b4d2:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b4d4:	bfb8      	it	lt
    b4d6:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b4d8:	429c      	cmp	r4, r3
    b4da:	bf38      	it	cc
    b4dc:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    b4de:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b4e0:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    b4e4:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    b4e6:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b4e8:	f7ff fbdc 	bl	aca4 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    b4ec:	4605      	mov	r5, r0
    b4ee:	b938      	cbnz	r0, b500 <mayfly_xtal_stop_calc+0xe8>
    b4f0:	4b4d      	ldr	r3, [pc, #308]	; (b628 <mayfly_xtal_stop_calc+0x210>)
    b4f2:	9301      	str	r3, [sp, #4]
    b4f4:	9300      	str	r3, [sp, #0]
    b4f6:	4a4d      	ldr	r2, [pc, #308]	; (b62c <mayfly_xtal_stop_calc+0x214>)
    b4f8:	4b4d      	ldr	r3, [pc, #308]	; (b630 <mayfly_xtal_stop_calc+0x218>)
    b4fa:	494e      	ldr	r1, [pc, #312]	; (b634 <mayfly_xtal_stop_calc+0x21c>)
    b4fc:	4850      	ldr	r0, [pc, #320]	; (b640 <mayfly_xtal_stop_calc+0x228>)
    b4fe:	e7b0      	b.n	b462 <mayfly_xtal_stop_calc+0x4a>
	ticks_prepare_to_start_next =
    b500:	6886      	ldr	r6, [r0, #8]
    b502:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b504:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    b506:	429e      	cmp	r6, r3
    b508:	bf38      	it	cc
    b50a:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b50c:	2a00      	cmp	r2, #0
    b50e:	da05      	bge.n	b51c <mayfly_xtal_stop_calc+0x104>
		ticks_to_expire -=
    b510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    b512:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    b516:	4433      	add	r3, r6
    b518:	1a9b      	subs	r3, r3, r2
    b51a:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    b51c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    b51e:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    b522:	4293      	cmp	r3, r2
    b524:	d20a      	bcs.n	b53c <mayfly_xtal_stop_calc+0x124>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b526:	2100      	movs	r1, #0
    b528:	2001      	movs	r0, #1
    b52a:	f7fe fe53 	bl	a1d4 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    b52e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b532:	2101      	movs	r1, #1
    b534:	4628      	mov	r0, r5
    b536:	f7ff ff33 	bl	b3a0 <prepare_normal_set>
    b53a:	e7b9      	b.n	b4b0 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    b53c:	2101      	movs	r1, #1
    b53e:	4608      	mov	r0, r1
    b540:	f7fe fe48 	bl	a1d4 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    b544:	682b      	ldr	r3, [r5, #0]
    b546:	2b00      	cmp	r3, #0
    b548:	db1c      	blt.n	b584 <mayfly_xtal_stop_calc+0x16c>
    b54a:	429e      	cmp	r6, r3
    b54c:	d21a      	bcs.n	b584 <mayfly_xtal_stop_calc+0x16c>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    b54e:	1b9b      	subs	r3, r3, r6
			ticker_status =
    b550:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b552:	b29b      	uxth	r3, r3
			ticker_status =
    b554:	493b      	ldr	r1, [pc, #236]	; (b644 <mayfly_xtal_stop_calc+0x22c>)
    b556:	9105      	str	r1, [sp, #20]
    b558:	9302      	str	r3, [sp, #8]
    b55a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b55e:	9506      	str	r5, [sp, #24]
    b560:	9004      	str	r0, [sp, #16]
    b562:	9003      	str	r0, [sp, #12]
    b564:	9001      	str	r0, [sp, #4]
    b566:	9000      	str	r0, [sp, #0]
    b568:	2101      	movs	r1, #1
    b56a:	f7fc fbeb 	bl	7d44 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b56e:	f030 0302 	bics.w	r3, r0, #2
    b572:	d007      	beq.n	b584 <mayfly_xtal_stop_calc+0x16c>
    b574:	4b2c      	ldr	r3, [pc, #176]	; (b628 <mayfly_xtal_stop_calc+0x210>)
    b576:	9301      	str	r3, [sp, #4]
    b578:	9300      	str	r3, [sp, #0]
    b57a:	4a2c      	ldr	r2, [pc, #176]	; (b62c <mayfly_xtal_stop_calc+0x214>)
    b57c:	4b2c      	ldr	r3, [pc, #176]	; (b630 <mayfly_xtal_stop_calc+0x218>)
    b57e:	492d      	ldr	r1, [pc, #180]	; (b634 <mayfly_xtal_stop_calc+0x21c>)
    b580:	4831      	ldr	r0, [pc, #196]	; (b648 <mayfly_xtal_stop_calc+0x230>)
    b582:	e76e      	b.n	b462 <mayfly_xtal_stop_calc+0x4a>
		if (!conn_curr || !conn_next) {
    b584:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b586:	2e00      	cmp	r6, #0
    b588:	d092      	beq.n	b4b0 <mayfly_xtal_stop_calc+0x98>
    b58a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b58c:	2d00      	cmp	r5, #0
    b58e:	d08f      	beq.n	b4b0 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    b590:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    b592:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    b594:	429a      	cmp	r2, r3
    b596:	d18b      	bne.n	b4b0 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    b598:	482c      	ldr	r0, [pc, #176]	; (b64c <mayfly_xtal_stop_calc+0x234>)
    b59a:	b292      	uxth	r2, r2
    b59c:	fba2 0100 	umull	r0, r1, r2, r0
    b5a0:	f240 1323 	movw	r3, #291	; 0x123
    b5a4:	fb03 1102 	mla	r1, r3, r2, r1
    b5a8:	a31b      	add	r3, pc, #108	; (adr r3, b618 <mayfly_xtal_stop_calc+0x200>)
    b5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    b5ae:	f7f4 fe31 	bl	214 <__aeabi_uldivmod>
    b5b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b5b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    b5b8:	2200      	movs	r2, #0
    b5ba:	4298      	cmp	r0, r3
    b5bc:	d318      	bcc.n	b5f0 <mayfly_xtal_stop_calc+0x1d8>
    b5be:	b102      	cbz	r2, b5c2 <mayfly_xtal_stop_calc+0x1aa>
    b5c0:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    b5c2:	f996 201d 	ldrsb.w	r2, [r6, #29]
    b5c6:	2a00      	cmp	r2, #0
    b5c8:	f995 201d 	ldrsb.w	r2, [r5, #29]
    b5cc:	da13      	bge.n	b5f6 <mayfly_xtal_stop_calc+0x1de>
    b5ce:	2a00      	cmp	r2, #0
    b5d0:	f6ff af6e 	blt.w	b4b0 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
    b5d4:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    b5d6:	429c      	cmp	r4, r3
    b5d8:	f67f af6a 	bls.w	b4b0 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
    b5dc:	4630      	mov	r0, r6
    b5de:	f7fe faff 	bl	9be0 <conn_update_req>
				if (status == 2) {
    b5e2:	2802      	cmp	r0, #2
    b5e4:	f47f af64 	bne.w	b4b0 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
    b5e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    b5ea:	f7fe faf9 	bl	9be0 <conn_update_req>
    b5ee:	e75f      	b.n	b4b0 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
    b5f0:	1a1b      	subs	r3, r3, r0
    b5f2:	2201      	movs	r2, #1
    b5f4:	e7e1      	b.n	b5ba <mayfly_xtal_stop_calc+0x1a2>
			} else if (!conn_curr->role && conn_next->role &&
    b5f6:	2a00      	cmp	r2, #0
    b5f8:	f6bf af5a 	bge.w	b4b0 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
    b5fc:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    b5fe:	429c      	cmp	r4, r3
    b600:	f67f af56 	bls.w	b4b0 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
    b604:	4628      	mov	r0, r5
    b606:	f7fe faeb 	bl	9be0 <conn_update_req>
				if (status == 2) {
    b60a:	2802      	cmp	r0, #2
    b60c:	f47f af50 	bne.w	b4b0 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
    b610:	980a      	ldr	r0, [sp, #40]	; 0x28
    b612:	e7ea      	b.n	b5ea <mayfly_xtal_stop_calc+0x1d2>
    b614:	f3af 8000 	nop.w
    b618:	1afd498d 	.word	0x1afd498d
    b61c:	00000007 	.word	0x00000007
    b620:	00009b3d 	.word	0x00009b3d
    b624:	200008c8 	.word	0x200008c8
    b628:	0001496d 	.word	0x0001496d
    b62c:	000156bc 	.word	0x000156bc
    b630:	00016d2b 	.word	0x00016d2b
    b634:	0001570b 	.word	0x0001570b
    b638:	00017aa0 	.word	0x00017aa0
    b63c:	00017744 	.word	0x00017744
    b640:	0001776e 	.word	0x0001776e
    b644:	00009b41 	.word	0x00009b41
    b648:	00016fe1 	.word	0x00016fe1
    b64c:	09ce5400 	.word	0x09ce5400

0000b650 <preempt_calc>:
{
    b650:	b570      	push	{r4, r5, r6, lr}
    b652:	4614      	mov	r4, r2
    b654:	460e      	mov	r6, r1
    b656:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    b658:	f7fc fc92 	bl	7f80 <ticker_ticks_now_get>
	u32_t diff =
    b65c:	4621      	mov	r1, r4
    b65e:	f7fc fc91 	bl	7f84 <ticker_ticks_diff_get>
	diff += 3;
    b662:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    b664:	2c09      	cmp	r4, #9
    b666:	d90f      	bls.n	b688 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    b668:	2100      	movs	r1, #0
    b66a:	4608      	mov	r0, r1
    b66c:	f7fe fdb2 	bl	a1d4 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    b670:	4632      	mov	r2, r6
    b672:	2100      	movs	r1, #0
    b674:	4628      	mov	r0, r5
    b676:	f7ff fe93 	bl	b3a0 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    b67a:	68ab      	ldr	r3, [r5, #8]
    b67c:	441c      	add	r4, r3
		if (diff <
    b67e:	2c26      	cmp	r4, #38	; 0x26
    b680:	d800      	bhi.n	b684 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    b682:	60ac      	str	r4, [r5, #8]
		return 1;
    b684:	2001      	movs	r0, #1
}
    b686:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    b688:	2000      	movs	r0, #0
    b68a:	bd70      	pop	{r4, r5, r6, pc}

0000b68c <adv_scan_configure.constprop.30>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    b68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    b68e:	ad02      	add	r5, sp, #8
    b690:	4b10      	ldr	r3, [pc, #64]	; (b6d4 <adv_scan_configure.constprop.30+0x48>)
    b692:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    b696:	4604      	mov	r4, r0
	radio_reset();
    b698:	f006 fdc0 	bl	1221c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    b69c:	2000      	movs	r0, #0
    b69e:	f006 fde7 	bl	12270 <radio_tx_power_set>
	radio_isr_set(isr);
    b6a2:	480d      	ldr	r0, [pc, #52]	; (b6d8 <adv_scan_configure.constprop.30+0x4c>)
    b6a4:	f006 fd84 	bl	121b0 <radio_isr_set>
	radio_phy_set(phy, flags);
    b6a8:	2101      	movs	r1, #1
    b6aa:	4620      	mov	r0, r4
    b6ac:	f006 fdd0 	bl	12250 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    b6b0:	4628      	mov	r0, r5
    b6b2:	f006 fdfb 	bl	122ac <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    b6b6:	0062      	lsls	r2, r4, #1
    b6b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b6bc:	2125      	movs	r1, #37	; 0x25
    b6be:	2008      	movs	r0, #8
    b6c0:	f006 fe0c 	bl	122dc <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    b6c4:	4905      	ldr	r1, [pc, #20]	; (b6dc <adv_scan_configure.constprop.30+0x50>)
    b6c6:	f240 605b 	movw	r0, #1627	; 0x65b
    b6ca:	f006 fe97 	bl	123fc <radio_crc_configure>
}
    b6ce:	b003      	add	sp, #12
    b6d0:	bd30      	pop	{r4, r5, pc}
    b6d2:	bf00      	nop
    b6d4:	8e89bed6 	.word	0x8e89bed6
    b6d8:	0000e639 	.word	0x0000e639
    b6dc:	00555555 	.word	0x00555555

0000b6e0 <event_scan>:
{
    b6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    b6e2:	4b62      	ldr	r3, [pc, #392]	; (b86c <event_scan+0x18c>)
    b6e4:	7cda      	ldrb	r2, [r3, #19]
{
    b6e6:	b08d      	sub	sp, #52	; 0x34
    b6e8:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    b6ea:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    b6ee:	461c      	mov	r4, r3
    b6f0:	b172      	cbz	r2, b710 <event_scan+0x30>
    b6f2:	4b5f      	ldr	r3, [pc, #380]	; (b870 <event_scan+0x190>)
    b6f4:	9301      	str	r3, [sp, #4]
    b6f6:	9300      	str	r3, [sp, #0]
    b6f8:	4a5e      	ldr	r2, [pc, #376]	; (b874 <event_scan+0x194>)
    b6fa:	4b5f      	ldr	r3, [pc, #380]	; (b878 <event_scan+0x198>)
    b6fc:	495f      	ldr	r1, [pc, #380]	; (b87c <event_scan+0x19c>)
    b6fe:	4860      	ldr	r0, [pc, #384]	; (b880 <event_scan+0x1a0>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    b700:	f7f5 fc44 	bl	f8c <printk>
    b704:	4040      	eors	r0, r0
    b706:	f380 8811 	msr	BASEPRI, r0
    b70a:	f04f 0004 	mov.w	r0, #4
    b70e:	df02      	svc	2
    b710:	7c1b      	ldrb	r3, [r3, #16]
    b712:	b2db      	uxtb	r3, r3
    b714:	2b06      	cmp	r3, #6
    b716:	d007      	beq.n	b728 <event_scan+0x48>
    b718:	4b55      	ldr	r3, [pc, #340]	; (b870 <event_scan+0x190>)
    b71a:	9301      	str	r3, [sp, #4]
    b71c:	9300      	str	r3, [sp, #0]
    b71e:	4a55      	ldr	r2, [pc, #340]	; (b874 <event_scan+0x194>)
    b720:	4b55      	ldr	r3, [pc, #340]	; (b878 <event_scan+0x198>)
    b722:	4956      	ldr	r1, [pc, #344]	; (b87c <event_scan+0x19c>)
    b724:	4857      	ldr	r0, [pc, #348]	; (b884 <event_scan+0x1a4>)
    b726:	e7eb      	b.n	b700 <event_scan+0x20>
	_radio.role = ROLE_SCAN;
    b728:	2202      	movs	r2, #2
    b72a:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    b72c:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    b72e:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b730:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    b734:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    b736:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    b73a:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    b73c:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b740:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    b744:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    b746:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b74a:	f7ff ff9f 	bl	b68c <adv_scan_configure.constprop.30>
	chan_set(37 + _radio.scanner.chan++);
    b74e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b752:	f3c3 0081 	ubfx	r0, r3, #2, #2
    b756:	1c42      	adds	r2, r0, #1
    b758:	f362 0383 	bfi	r3, r2, #2, #2
    b75c:	3025      	adds	r0, #37	; 0x25
    b75e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    b762:	f7ff fcc3 	bl	b0ec <chan_set>
	if (_radio.scanner.chan == 3) {
    b766:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b76a:	f003 020c 	and.w	r2, r3, #12
    b76e:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    b770:	bf08      	it	eq
    b772:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    b776:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    b77a:	bf08      	it	eq
    b77c:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    b780:	f006 fef6 	bl	12570 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    b784:	2300      	movs	r3, #0
    b786:	4619      	mov	r1, r3
    b788:	461a      	mov	r2, r3
    b78a:	4618      	mov	r0, r3
    b78c:	f006 fe60 	bl	12450 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    b790:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    b794:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    b798:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b79c:	3008      	adds	r0, #8
    b79e:	f006 fdcb 	bl	12338 <radio_pkt_rx_set>
	radio_rssi_measure();
    b7a2:	f006 fe6d 	bl	12480 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    b7a6:	f006 f909 	bl	119bc <ctrl_rl_enabled>
    b7aa:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    b7ae:	b340      	cbz	r0, b802 <event_scan+0x122>
		struct ll_filter *filter =
    b7b0:	f3c3 1000 	ubfx	r0, r3, #4, #1
    b7b4:	f005 ff22 	bl	115fc <ctrl_filter_get>
    b7b8:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    b7ba:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    b7be:	f005 fe4d 	bl	1145c <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    b7c2:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    b7c4:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    b7c6:	1cb2      	adds	r2, r6, #2
    b7c8:	7830      	ldrb	r0, [r6, #0]
    b7ca:	f006 fe7b 	bl	124c4 <radio_filter_configure>
		radio_ar_configure(count, irks);
    b7ce:	4639      	mov	r1, r7
    b7d0:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    b7d4:	f007 f850 	bl	12878 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    b7d8:	68e2      	ldr	r2, [r4, #12]
    b7da:	f105 0109 	add.w	r1, r5, #9
    b7de:	2000      	movs	r0, #0
    b7e0:	f006 fed2 	bl	12588 <radio_tmr_start>
	radio_tmr_end_capture();
    b7e4:	f006 ffa0 	bl	12728 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    b7e8:	2106      	movs	r1, #6
    b7ea:	462a      	mov	r2, r5
    b7ec:	4826      	ldr	r0, [pc, #152]	; (b888 <event_scan+0x1a8>)
    b7ee:	f7ff ff2f 	bl	b650 <preempt_calc>
    b7f2:	4601      	mov	r1, r0
    b7f4:	b188      	cbz	r0, b81a <event_scan+0x13a>
		_radio.state = STATE_STOP;
    b7f6:	2304      	movs	r3, #4
    b7f8:	7523      	strb	r3, [r4, #20]
		radio_disable();
    b7fa:	f006 fdc3 	bl	12384 <radio_disable>
}
    b7fe:	b00d      	add	sp, #52	; 0x34
    b800:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    b802:	f013 0f30 	tst.w	r3, #48	; 0x30
    b806:	d0e7      	beq.n	b7d8 <event_scan+0xf8>
		struct ll_filter *wl = ctrl_filter_get(true);
    b808:	2001      	movs	r0, #1
    b80a:	f005 fef7 	bl	115fc <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    b80e:	1c82      	adds	r2, r0, #2
    b810:	7841      	ldrb	r1, [r0, #1]
    b812:	7800      	ldrb	r0, [r0, #0]
    b814:	f006 fe56 	bl	124c4 <radio_filter_configure>
    b818:	e7de      	b.n	b7d8 <event_scan+0xf8>
		ret = ticker_start(
    b81a:	f641 1336 	movw	r3, #6454	; 0x1936
    b81e:	9308      	str	r3, [sp, #32]
    b820:	4b1a      	ldr	r3, [pc, #104]	; (b88c <event_scan+0x1ac>)
    b822:	9307      	str	r3, [sp, #28]
    b824:	2204      	movs	r2, #4
    b826:	4b1a      	ldr	r3, [pc, #104]	; (b890 <event_scan+0x1b0>)
    b828:	9206      	str	r2, [sp, #24]
    b82a:	9305      	str	r3, [sp, #20]
    b82c:	9004      	str	r0, [sp, #16]
    b82e:	9003      	str	r0, [sp, #12]
    b830:	9002      	str	r0, [sp, #8]
    b832:	9001      	str	r0, [sp, #4]
    b834:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    b838:	3309      	adds	r3, #9
    b83a:	9300      	str	r3, [sp, #0]
    b83c:	462b      	mov	r3, r5
    b83e:	f7fc fa31 	bl	7ca4 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b842:	f030 0302 	bics.w	r3, r0, #2
    b846:	d007      	beq.n	b858 <event_scan+0x178>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b848:	4b09      	ldr	r3, [pc, #36]	; (b870 <event_scan+0x190>)
    b84a:	9301      	str	r3, [sp, #4]
    b84c:	9300      	str	r3, [sp, #0]
    b84e:	4a09      	ldr	r2, [pc, #36]	; (b874 <event_scan+0x194>)
    b850:	4b09      	ldr	r3, [pc, #36]	; (b878 <event_scan+0x198>)
    b852:	490a      	ldr	r1, [pc, #40]	; (b87c <event_scan+0x19c>)
    b854:	480f      	ldr	r0, [pc, #60]	; (b894 <event_scan+0x1b4>)
    b856:	e753      	b.n	b700 <event_scan+0x20>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b858:	4619      	mov	r1, r3
    b85a:	4618      	mov	r0, r3
    b85c:	4a0e      	ldr	r2, [pc, #56]	; (b898 <event_scan+0x1b8>)
    b85e:	f7fc fb3d 	bl	7edc <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b862:	f030 0302 	bics.w	r3, r0, #2
    b866:	d1ef      	bne.n	b848 <event_scan+0x168>
    b868:	e7c9      	b.n	b7fe <event_scan+0x11e>
    b86a:	bf00      	nop
    b86c:	200008c8 	.word	0x200008c8
    b870:	0001496d 	.word	0x0001496d
    b874:	000156bc 	.word	0x000156bc
    b878:	00016dfa 	.word	0x00016dfa
    b87c:	0001570b 	.word	0x0001570b
    b880:	000170fd 	.word	0x000170fd
    b884:	00017137 	.word	0x00017137
    b888:	20000998 	.word	0x20000998
    b88c:	0000aaa5 	.word	0x0000aaa5
    b890:	0000ad15 	.word	0x0000ad15
    b894:	00017176 	.word	0x00017176
    b898:	0000ac8d 	.word	0x0000ac8d

0000b89c <event_stop.constprop.31>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    b89c:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    b89e:	4b05      	ldr	r3, [pc, #20]	; (b8b4 <event_stop.constprop.31+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b8a0:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    b8a2:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b8a4:	4611      	mov	r1, r2
    b8a6:	4610      	mov	r0, r2
    b8a8:	f7fb fc3e 	bl	7128 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b8ac:	b108      	cbz	r0, b8b2 <event_stop.constprop.31+0x16>
    b8ae:	f7ff fa17 	bl	ace0 <event_stop.part.10>
    b8b2:	bd08      	pop	{r3, pc}
    b8b4:	20003d70 	.word	0x20003d70

0000b8b8 <event_common_prepare>:
{
    b8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    b8bc:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    b8be:	681d      	ldr	r5, [r3, #0]
{
    b8c0:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b8c2:	2c00      	cmp	r4, #0
{
    b8c4:	4681      	mov	r9, r0
    b8c6:	910b      	str	r1, [sp, #44]	; 0x2c
    b8c8:	4690      	mov	r8, r2
    b8ca:	469b      	mov	fp, r3
    b8cc:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b8d0:	da03      	bge.n	b8da <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    b8d2:	9c16      	ldr	r4, [sp, #88]	; 0x58
    b8d4:	42ac      	cmp	r4, r5
    b8d6:	bf38      	it	cc
    b8d8:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    b8da:	42ac      	cmp	r4, r5
    b8dc:	4f56      	ldr	r7, [pc, #344]	; (ba38 <event_common_prepare+0x180>)
    b8de:	d924      	bls.n	b92a <event_common_prepare+0x72>
		ticker_status =
    b8e0:	f241 5374 	movw	r3, #5492	; 0x1574
    b8e4:	9308      	str	r3, [sp, #32]
    b8e6:	4b55      	ldr	r3, [pc, #340]	; (ba3c <event_common_prepare+0x184>)
    b8e8:	9305      	str	r3, [sp, #20]
    b8ea:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    b8ec:	1b63      	subs	r3, r4, r5
		ticker_status =
    b8ee:	9300      	str	r3, [sp, #0]
    b8f0:	9707      	str	r7, [sp, #28]
    b8f2:	464b      	mov	r3, r9
    b8f4:	9106      	str	r1, [sp, #24]
    b8f6:	9104      	str	r1, [sp, #16]
    b8f8:	9103      	str	r1, [sp, #12]
    b8fa:	9102      	str	r1, [sp, #8]
    b8fc:	9101      	str	r1, [sp, #4]
    b8fe:	2201      	movs	r2, #1
    b900:	4608      	mov	r0, r1
    b902:	f7fc f9cf 	bl	7ca4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b906:	f030 0302 	bics.w	r3, r0, #2
    b90a:	d034      	beq.n	b976 <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b90c:	4b4c      	ldr	r3, [pc, #304]	; (ba40 <event_common_prepare+0x188>)
    b90e:	9301      	str	r3, [sp, #4]
    b910:	9300      	str	r3, [sp, #0]
    b912:	4a4c      	ldr	r2, [pc, #304]	; (ba44 <event_common_prepare+0x18c>)
    b914:	4b4c      	ldr	r3, [pc, #304]	; (ba48 <event_common_prepare+0x190>)
    b916:	494d      	ldr	r1, [pc, #308]	; (ba4c <event_common_prepare+0x194>)
    b918:	484d      	ldr	r0, [pc, #308]	; (ba50 <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
    b91a:	f7f5 fb37 	bl	f8c <printk>
    b91e:	4040      	eors	r0, r0
    b920:	f380 8811 	msr	BASEPRI, r0
    b924:	f04f 0004 	mov.w	r0, #4
    b928:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    b92a:	d21d      	bcs.n	b968 <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
    b92c:	2300      	movs	r3, #0
    b92e:	461a      	mov	r2, r3
    b930:	4619      	mov	r1, r3
    b932:	4618      	mov	r0, r3
    b934:	f7ff f9fe 	bl	ad34 <event_active>
		ticker_status =
    b938:	f241 5389 	movw	r3, #5513	; 0x1589
    b93c:	2100      	movs	r1, #0
    b93e:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    b940:	1b2c      	subs	r4, r5, r4
		ticker_status =
    b942:	4b44      	ldr	r3, [pc, #272]	; (ba54 <event_common_prepare+0x19c>)
    b944:	9305      	str	r3, [sp, #20]
    b946:	9707      	str	r7, [sp, #28]
    b948:	464b      	mov	r3, r9
    b94a:	9106      	str	r1, [sp, #24]
    b94c:	9104      	str	r1, [sp, #16]
    b94e:	9103      	str	r1, [sp, #12]
    b950:	9102      	str	r1, [sp, #8]
    b952:	9101      	str	r1, [sp, #4]
    b954:	9400      	str	r4, [sp, #0]
    b956:	2201      	movs	r2, #1
    b958:	4608      	mov	r0, r1
    b95a:	f7fc f9a3 	bl	7ca4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b95e:	f030 0302 	bics.w	r3, r0, #2
    b962:	d1d3      	bne.n	b90c <event_common_prepare+0x54>
    b964:	462c      	mov	r4, r5
    b966:	e00b      	b.n	b980 <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
    b968:	2300      	movs	r3, #0
    b96a:	461a      	mov	r2, r3
    b96c:	4619      	mov	r1, r3
    b96e:	4618      	mov	r0, r3
    b970:	f7ff f9e0 	bl	ad34 <event_active>
		event_xtal(0, 0, 0, NULL);
    b974:	2300      	movs	r3, #0
    b976:	461a      	mov	r2, r3
    b978:	4619      	mov	r1, r3
    b97a:	4618      	mov	r0, r3
    b97c:	f7ff fa00 	bl	ad80 <event_xtal>
	_radio.remainder_anchor = remainder;
    b980:	4e35      	ldr	r6, [pc, #212]	; (ba58 <event_common_prepare+0x1a0>)
    b982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b984:	60f3      	str	r3, [r6, #12]
	ticker_status =
    b986:	f241 53a1 	movw	r3, #5537	; 0x15a1
    b98a:	9308      	str	r3, [sp, #32]
    b98c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b98e:	9306      	str	r3, [sp, #24]
    b990:	2200      	movs	r2, #0
    b992:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b994:	9305      	str	r3, [sp, #20]
    b996:	9707      	str	r7, [sp, #28]
    b998:	464b      	mov	r3, r9
    b99a:	9204      	str	r2, [sp, #16]
    b99c:	9203      	str	r2, [sp, #12]
    b99e:	9202      	str	r2, [sp, #8]
    b9a0:	9201      	str	r2, [sp, #4]
    b9a2:	9400      	str	r4, [sp, #0]
    b9a4:	4611      	mov	r1, r2
    b9a6:	4610      	mov	r0, r2
    b9a8:	f7fc f97c 	bl	7ca4 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b9ac:	f030 0302 	bics.w	r3, r0, #2
    b9b0:	d1ac      	bne.n	b90c <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    b9b2:	2005      	movs	r0, #5
    b9b4:	f7ff ff72 	bl	b89c <event_stop.constprop.31>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    b9b8:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    b9bc:	429d      	cmp	r5, r3
    b9be:	d023      	beq.n	ba08 <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    b9c0:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b9c4:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    b9c8:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b9ca:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    b9cc:	bfbc      	itt	lt
    b9ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    b9d2:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    b9d6:	f8d8 2000 	ldr.w	r2, [r8]
    b9da:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    b9de:	428a      	cmp	r2, r1
    b9e0:	bf38      	it	cc
    b9e2:	460a      	movcc	r2, r1
		ticker_status =
    b9e4:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b9e8:	b2a3      	uxth	r3, r4
    b9ea:	b292      	uxth	r2, r2
		ticker_status =
    b9ec:	9106      	str	r1, [sp, #24]
    b9ee:	2100      	movs	r1, #0
    b9f0:	9302      	str	r3, [sp, #8]
    b9f2:	9201      	str	r2, [sp, #4]
    b9f4:	9200      	str	r2, [sp, #0]
    b9f6:	9104      	str	r1, [sp, #16]
    b9f8:	9103      	str	r1, [sp, #12]
    b9fa:	4652      	mov	r2, sl
    b9fc:	4608      	mov	r0, r1
    b9fe:	f7fc f9a1 	bl	7d44 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ba02:	f030 0302 	bics.w	r3, r0, #2
    ba06:	d181      	bne.n	b90c <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    ba08:	20ff      	movs	r0, #255	; 0xff
    ba0a:	f7ff fa85 	bl	af18 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    ba0e:	4b13      	ldr	r3, [pc, #76]	; (ba5c <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ba10:	2201      	movs	r2, #1
    ba12:	4611      	mov	r1, r2
    ba14:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    ba16:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ba1a:	f7fb fb85 	bl	7128 <mayfly_enqueue>
		LL_ASSERT(!retval);
    ba1e:	b138      	cbz	r0, ba30 <event_common_prepare+0x178>
    ba20:	4b07      	ldr	r3, [pc, #28]	; (ba40 <event_common_prepare+0x188>)
    ba22:	9301      	str	r3, [sp, #4]
    ba24:	9300      	str	r3, [sp, #0]
    ba26:	4a07      	ldr	r2, [pc, #28]	; (ba44 <event_common_prepare+0x18c>)
    ba28:	4b07      	ldr	r3, [pc, #28]	; (ba48 <event_common_prepare+0x190>)
    ba2a:	4908      	ldr	r1, [pc, #32]	; (ba4c <event_common_prepare+0x194>)
    ba2c:	480c      	ldr	r0, [pc, #48]	; (ba60 <event_common_prepare+0x1a8>)
    ba2e:	e774      	b.n	b91a <event_common_prepare+0x62>
}
    ba30:	b00d      	add	sp, #52	; 0x34
    ba32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba36:	bf00      	nop
    ba38:	0000aaa5 	.word	0x0000aaa5
    ba3c:	0000ad35 	.word	0x0000ad35
    ba40:	0001496d 	.word	0x0001496d
    ba44:	000156bc 	.word	0x000156bc
    ba48:	00016db9 	.word	0x00016db9
    ba4c:	0001570b 	.word	0x0001570b
    ba50:	00016fe1 	.word	0x00016fe1
    ba54:	0000ad81 	.word	0x0000ad81
    ba58:	200008c8 	.word	0x200008c8
    ba5c:	20003e10 	.word	0x20003e10
    ba60:	0001771b 	.word	0x0001771b

0000ba64 <event_scan_prepare>:
{
    ba64:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    ba66:	4c25      	ldr	r4, [pc, #148]	; (bafc <event_scan_prepare+0x98>)
    ba68:	7c23      	ldrb	r3, [r4, #16]
{
    ba6a:	b085      	sub	sp, #20
    ba6c:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    ba6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    ba72:	b173      	cbz	r3, ba92 <event_scan_prepare+0x2e>
    ba74:	4b22      	ldr	r3, [pc, #136]	; (bb00 <event_scan_prepare+0x9c>)
    ba76:	9301      	str	r3, [sp, #4]
    ba78:	9300      	str	r3, [sp, #0]
    ba7a:	4a22      	ldr	r2, [pc, #136]	; (bb04 <event_scan_prepare+0xa0>)
    ba7c:	4b22      	ldr	r3, [pc, #136]	; (bb08 <event_scan_prepare+0xa4>)
    ba7e:	4923      	ldr	r1, [pc, #140]	; (bb0c <event_scan_prepare+0xa8>)
    ba80:	4823      	ldr	r0, [pc, #140]	; (bb10 <event_scan_prepare+0xac>)
		LL_ASSERT(!retval);
    ba82:	f7f5 fa83 	bl	f8c <printk>
    ba86:	4040      	eors	r0, r0
    ba88:	f380 8811 	msr	BASEPRI, r0
    ba8c:	f04f 0004 	mov.w	r0, #4
    ba90:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    ba92:	2306      	movs	r3, #6
    ba94:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    ba96:	9203      	str	r2, [sp, #12]
    ba98:	9301      	str	r3, [sp, #4]
    ba9a:	4a1e      	ldr	r2, [pc, #120]	; (bb14 <event_scan_prepare+0xb0>)
    ba9c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    baa0:	9202      	str	r2, [sp, #8]
    baa2:	9300      	str	r3, [sp, #0]
    baa4:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    baa8:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    baac:	f7ff ff04 	bl	b8b8 <event_common_prepare>
	if (_radio.scanner.conn) {
    bab0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    bab4:	b303      	cbz	r3, baf8 <event_scan_prepare+0x94>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    bab6:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    baba:	2b00      	cmp	r3, #0
    babc:	da0c      	bge.n	bad8 <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
    babe:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    bac2:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    bac6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    baca:	4291      	cmp	r1, r2
    bacc:	bf2c      	ite	cs
    bace:	ebc3 0301 	rsbcs	r3, r3, r1
    bad2:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    bad6:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    bad8:	4b0f      	ldr	r3, [pc, #60]	; (bb18 <event_scan_prepare+0xb4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bada:	2201      	movs	r2, #1
    badc:	4611      	mov	r1, r2
    bade:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    bae0:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bae2:	f7fb fb21 	bl	7128 <mayfly_enqueue>
		LL_ASSERT(!retval);
    bae6:	b138      	cbz	r0, baf8 <event_scan_prepare+0x94>
    bae8:	4b05      	ldr	r3, [pc, #20]	; (bb00 <event_scan_prepare+0x9c>)
    baea:	9301      	str	r3, [sp, #4]
    baec:	9300      	str	r3, [sp, #0]
    baee:	4a05      	ldr	r2, [pc, #20]	; (bb04 <event_scan_prepare+0xa0>)
    baf0:	4b05      	ldr	r3, [pc, #20]	; (bb08 <event_scan_prepare+0xa4>)
    baf2:	4906      	ldr	r1, [pc, #24]	; (bb0c <event_scan_prepare+0xa8>)
    baf4:	4809      	ldr	r0, [pc, #36]	; (bb1c <event_scan_prepare+0xb8>)
    baf6:	e7c4      	b.n	ba82 <event_scan_prepare+0x1e>
}
    baf8:	b005      	add	sp, #20
    bafa:	bd30      	pop	{r4, r5, pc}
    bafc:	200008c8 	.word	0x200008c8
    bb00:	0001496d 	.word	0x0001496d
    bb04:	000156bc 	.word	0x000156bc
    bb08:	00016de7 	.word	0x00016de7
    bb0c:	0001570b 	.word	0x0001570b
    bb10:	00017857 	.word	0x00017857
    bb14:	0000b6e1 	.word	0x0000b6e1
    bb18:	20003d90 	.word	0x20003d90
    bb1c:	0001771b 	.word	0x0001771b

0000bb20 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    bb20:	4b02      	ldr	r3, [pc, #8]	; (bb2c <mayfly_xtal_start+0xc>)
    bb22:	6818      	ldr	r0, [r3, #0]
    bb24:	6843      	ldr	r3, [r0, #4]
    bb26:	2100      	movs	r1, #0
    bb28:	681b      	ldr	r3, [r3, #0]
    bb2a:	4718      	bx	r3
    bb2c:	200008c8 	.word	0x200008c8

0000bb30 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    bb30:	4b02      	ldr	r3, [pc, #8]	; (bb3c <mayfly_xtal_stop+0xc>)
    bb32:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    bb34:	6843      	ldr	r3, [r0, #4]
    bb36:	2100      	movs	r1, #0
    bb38:	685b      	ldr	r3, [r3, #4]
    bb3a:	4718      	bx	r3
    bb3c:	200008c8 	.word	0x200008c8

0000bb40 <chan_sel_2>:
{
    bb40:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    bb42:	4048      	eors	r0, r1
    bb44:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    bb46:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    bb4a:	2608      	movs	r6, #8
	o = 0;
    bb4c:	2400      	movs	r4, #0
		o |= (i & 1);
    bb4e:	f00e 0501 	and.w	r5, lr, #1
    bb52:	3e01      	subs	r6, #1
    bb54:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    bb58:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    bb5c:	b2ec      	uxtb	r4, r5
		i >>= 1;
    bb5e:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    bb62:	d1f4      	bne.n	bb4e <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    bb64:	0225      	lsls	r5, r4, #8
    bb66:	b22d      	sxth	r5, r5
    bb68:	b2c0      	uxtb	r0, r0
    bb6a:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    bb6e:	4634      	mov	r4, r6
		o |= (i & 1);
    bb70:	f000 0601 	and.w	r6, r0, #1
    bb74:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    bb78:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    bb7c:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    bb80:	b2e4      	uxtb	r4, r4
		i >>= 1;
    bb82:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    bb86:	d1f3      	bne.n	bb70 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    bb88:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    bb8a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    bb8e:	3f01      	subs	r7, #1
    bb90:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    bb92:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    bb96:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    bb98:	d1d5      	bne.n	bb46 <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    bb9a:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    bb9c:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    bb9e:	fbb1 f0f4 	udiv	r0, r1, r4
    bba2:	fb04 1010 	mls	r0, r4, r0, r1
    bba6:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    bba8:	08c4      	lsrs	r4, r0, #3
    bbaa:	f000 0507 	and.w	r5, r0, #7
    bbae:	5d14      	ldrb	r4, [r2, r4]
    bbb0:	412c      	asrs	r4, r5
    bbb2:	07e4      	lsls	r4, r4, #31
    bbb4:	d407      	bmi.n	bbc6 <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    bbb6:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    bbb8:	f3c1 4107 	ubfx	r1, r1, #16, #8
    bbbc:	4610      	mov	r0, r2
}
    bbbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    bbc2:	f7fd bfc9 	b.w	9b58 <chan_sel_remap>
}
    bbc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bbc8 <ctrl_tx_enqueue>:
{
    bbc8:	b510      	push	{r4, lr}
	    !conn->empty &&
    bbca:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    bbce:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    bbd2:	f014 0f80 	tst.w	r4, #128	; 0x80
    bbd6:	d118      	bne.n	bc0a <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    bbd8:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    bbdc:	b1ab      	cbz	r3, bc0a <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    bbde:	0724      	lsls	r4, r4, #28
    bbe0:	d413      	bmi.n	bc0a <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    bbe2:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    bbe6:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    bbe8:	bf04      	itt	eq
    bbea:	681c      	ldreq	r4, [r3, #0]
    bbec:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    bbf0:	b992      	cbnz	r2, bc18 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    bbf2:	681a      	ldr	r2, [r3, #0]
    bbf4:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    bbf6:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    bbf8:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    bbfc:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    bc00:	680b      	ldr	r3, [r1, #0]
    bc02:	b90b      	cbnz	r3, bc08 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    bc04:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    bc08:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    bc0a:	b92a      	cbnz	r2, bc18 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    bc0c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    bc10:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    bc12:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    bc16:	e7ef      	b.n	bbf8 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    bc18:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    bc1c:	681a      	ldr	r2, [r3, #0]
    bc1e:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    bc20:	6019      	str	r1, [r3, #0]
    bc22:	e7eb      	b.n	bbfc <ctrl_tx_enqueue+0x34>

0000bc24 <ctrl_tx_sec_enqueue>:
{
    bc24:	b410      	push	{r4}
	if (conn->pause_tx) {
    bc26:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    bc2a:	0724      	lsls	r4, r4, #28
{
    bc2c:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    bc2e:	d50f      	bpl.n	bc50 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    bc30:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    bc34:	b931      	cbnz	r1, bc44 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    bc36:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    bc3a:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    bc3c:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    bc40:	bc10      	pop	{r4}
    bc42:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    bc44:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    bc48:	6819      	ldr	r1, [r3, #0]
    bc4a:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    bc4c:	601a      	str	r2, [r3, #0]
    bc4e:	e7f7      	b.n	bc40 <ctrl_tx_sec_enqueue+0x1c>
}
    bc50:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    bc52:	f7ff bfb9 	b.w	bbc8 <ctrl_tx_enqueue>
	...

0000bc58 <feature_rsp_send>:
{
    bc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bc5a:	4f21      	ldr	r7, [pc, #132]	; (bce0 <feature_rsp_send+0x88>)
{
    bc5c:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bc5e:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    bc62:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bc64:	f7fb f995 	bl	6f92 <mem_acquire>
	if (!node_tx) {
    bc68:	4604      	mov	r4, r0
    bc6a:	b3b0      	cbz	r0, bcda <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    bc6c:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    bc6e:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    bc70:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    bc74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    bc78:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    bc7c:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    bc80:	f043 0310 	orr.w	r3, r3, #16
    bc84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    bc88:	79b1      	ldrb	r1, [r6, #6]
    bc8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    bc8e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    bc92:	f3c1 0110 	ubfx	r1, r1, #0, #17
    bc96:	400b      	ands	r3, r1
    bc98:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    bc9c:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    bca0:	f043 0320 	orr.w	r3, r3, #32
    bca4:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bca8:	7903      	ldrb	r3, [r0, #4]
    bcaa:	f043 0303 	orr.w	r3, r3, #3
    bcae:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    bcb0:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    bcb2:	2309      	movs	r3, #9
    bcb4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    bcb6:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    bcb8:	2100      	movs	r1, #0
    bcba:	4410      	add	r0, r2
    bcbc:	f7f5 ffca 	bl	1c54 <memset>
		conn->llcp_features & 0xFF;
    bcc0:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    bcc4:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    bcc6:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    bcc8:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    bcca:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    bccc:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    bcce:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    bcd0:	4621      	mov	r1, r4
    bcd2:	f7ff ffa7 	bl	bc24 <ctrl_tx_sec_enqueue>
	return 0;
    bcd6:	2000      	movs	r0, #0
    bcd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    bcda:	2001      	movs	r0, #1
}
    bcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bcde:	bf00      	nop
    bce0:	200008c8 	.word	0x200008c8

0000bce4 <start_enc_rsp_send>:
{
    bce4:	b510      	push	{r4, lr}
    bce6:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    bce8:	b9c9      	cbnz	r1, bd1e <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bcea:	480f      	ldr	r0, [pc, #60]	; (bd28 <start_enc_rsp_send+0x44>)
    bcec:	f7fb f951 	bl	6f92 <mem_acquire>
		if (!node_tx) {
    bcf0:	b1b8      	cbz	r0, bd22 <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    bcf2:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    bcf4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bcf8:	f043 0320 	orr.w	r3, r3, #32
    bcfc:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bd00:	780b      	ldrb	r3, [r1, #0]
    bd02:	f043 0303 	orr.w	r3, r3, #3
    bd06:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    bd08:	2301      	movs	r3, #1
    bd0a:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    bd0c:	2306      	movs	r3, #6
    bd0e:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    bd10:	b140      	cbz	r0, bd24 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    bd12:	4601      	mov	r1, r0
    bd14:	4620      	mov	r0, r4
    bd16:	f7ff ff57 	bl	bbc8 <ctrl_tx_enqueue>
	return 0;
    bd1a:	2000      	movs	r0, #0
    bd1c:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    bd1e:	2000      	movs	r0, #0
    bd20:	e7e8      	b.n	bcf4 <start_enc_rsp_send+0x10>
			return 1;
    bd22:	2001      	movs	r0, #1
}
    bd24:	bd10      	pop	{r4, pc}
    bd26:	bf00      	nop
    bd28:	20000a24 	.word	0x20000a24

0000bd2c <reject_ext_ind_send>:
{
    bd2c:	b570      	push	{r4, r5, r6, lr}
    bd2e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bd30:	480b      	ldr	r0, [pc, #44]	; (bd60 <reject_ext_ind_send+0x34>)
{
    bd32:	460e      	mov	r6, r1
    bd34:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bd36:	f7fb f92c 	bl	6f92 <mem_acquire>
	if (!node_tx) {
    bd3a:	b178      	cbz	r0, bd5c <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bd3c:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    bd3e:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bd40:	f043 0303 	orr.w	r3, r3, #3
    bd44:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    bd46:	2303      	movs	r3, #3
    bd48:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    bd4a:	2311      	movs	r3, #17
    bd4c:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    bd4e:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    bd50:	4601      	mov	r1, r0
    bd52:	4620      	mov	r0, r4
    bd54:	f7ff ff38 	bl	bbc8 <ctrl_tx_enqueue>
	return 0;
    bd58:	2000      	movs	r0, #0
    bd5a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    bd5c:	2001      	movs	r0, #1
}
    bd5e:	bd70      	pop	{r4, r5, r6, pc}
    bd60:	20000a24 	.word	0x20000a24
    bd64:	00000000 	.word	0x00000000

0000bd68 <event_connection_prepare>:
{
    bd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    bd6c:	4db8      	ldr	r5, [pc, #736]	; (c050 <event_connection_prepare+0x2e8>)
{
    bd6e:	b08f      	sub	sp, #60	; 0x3c
    bd70:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    bd72:	7c2b      	ldrb	r3, [r5, #16]
{
    bd74:	910c      	str	r1, [sp, #48]	; 0x30
    bd76:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    bd78:	b173      	cbz	r3, bd98 <event_connection_prepare+0x30>
    bd7a:	4bb6      	ldr	r3, [pc, #728]	; (c054 <event_connection_prepare+0x2ec>)
    bd7c:	9301      	str	r3, [sp, #4]
    bd7e:	9300      	str	r3, [sp, #0]
    bd80:	4ab5      	ldr	r2, [pc, #724]	; (c058 <event_connection_prepare+0x2f0>)
    bd82:	4bb6      	ldr	r3, [pc, #728]	; (c05c <event_connection_prepare+0x2f4>)
    bd84:	49b6      	ldr	r1, [pc, #728]	; (c060 <event_connection_prepare+0x2f8>)
    bd86:	48b7      	ldr	r0, [pc, #732]	; (c064 <event_connection_prepare+0x2fc>)
		LL_ASSERT(!retval);
    bd88:	f7f5 f900 	bl	f8c <printk>
    bd8c:	4040      	eors	r0, r0
    bd8e:	f380 8811 	msr	BASEPRI, r0
    bd92:	f04f 0004 	mov.w	r0, #4
    bd96:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    bd98:	f894 3020 	ldrb.w	r3, [r4, #32]
    bd9c:	3307      	adds	r3, #7
    bd9e:	b2db      	uxtb	r3, r3
    bda0:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    bda2:	f994 301d 	ldrsb.w	r3, [r4, #29]
    bda6:	2b00      	cmp	r3, #0
    bda8:	da09      	bge.n	bdbe <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    bdaa:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    bdac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    bdae:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    bdb2:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    bdb4:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    bdb6:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    bdb8:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    bdba:	bf88      	it	hi
    bdbc:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    bdbe:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    bdc0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    bdc4:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    bdc6:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    bdc8:	b292      	uxth	r2, r2
    bdca:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    bdcc:	4432      	add	r2, r6
    bdce:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    bdd0:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    bdd4:	429a      	cmp	r2, r3
    bdd6:	f040 81ba 	bne.w	c14e <event_connection_prepare+0x3e6>
    bdda:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bdde:	075f      	lsls	r7, r3, #29
    bde0:	f100 84ab 	bmi.w	c73a <event_connection_prepare+0x9d2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    bde4:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    bde8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bdec:	429a      	cmp	r2, r3
    bdee:	f000 8096 	beq.w	bf1e <event_connection_prepare+0x1b6>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    bdf2:	2005      	movs	r0, #5
    bdf4:	f7ff fd52 	bl	b89c <event_stop.constprop.31>
	conn_upd = _radio.conn_upd;
    bdf8:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    bdfc:	b113      	cbz	r3, be04 <event_connection_prepare+0x9c>
    bdfe:	429c      	cmp	r4, r3
    be00:	f040 808d 	bne.w	bf1e <event_connection_prepare+0x1b6>
	switch (conn->llcp_conn_param.state) {
    be04:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    be08:	f003 0307 	and.w	r3, r3, #7
    be0c:	2b05      	cmp	r3, #5
    be0e:	f200 815d 	bhi.w	c0cc <event_connection_prepare+0x364>
    be12:	e8df f013 	tbh	[pc, r3, lsl #1]
    be16:	0006      	.short	0x0006
    be18:	01310065 	.word	0x01310065
    be1c:	00840084 	.word	0x00840084
    be20:	0084      	.short	0x0084
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    be22:	4891      	ldr	r0, [pc, #580]	; (c068 <event_connection_prepare+0x300>)
    be24:	f7fb f8b5 	bl	6f92 <mem_acquire>
	if (!node_tx) {
    be28:	4607      	mov	r7, r0
    be2a:	2800      	cmp	r0, #0
    be2c:	d077      	beq.n	bf1e <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    be2e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    be32:	2204      	movs	r2, #4
    be34:	f362 0302 	bfi	r3, r2, #0, #3
    be38:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    be3c:	7903      	ldrb	r3, [r0, #4]
    be3e:	f043 0303 	orr.w	r3, r3, #3
    be42:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    be44:	2318      	movs	r3, #24
    be46:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    be48:	230f      	movs	r3, #15
    be4a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    be4c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    be50:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    be52:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    be54:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    be58:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    be5a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    be5e:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    be60:	2300      	movs	r3, #0
    be62:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    be64:	74c3      	strb	r3, [r0, #19]
    be66:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    be68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    be6c:	7543      	strb	r3, [r0, #21]
    be6e:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    be70:	75c3      	strb	r3, [r0, #23]
    be72:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    be74:	7643      	strb	r3, [r0, #25]
    be76:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    be78:	76c3      	strb	r3, [r0, #27]
    be7a:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    be7c:	7743      	strb	r3, [r0, #29]
    be7e:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    be80:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    be84:	4601      	mov	r1, r0
    be86:	4620      	mov	r0, r4
    be88:	f7ff fe9e 	bl	bbc8 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    be8c:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    be8e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    be92:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    be96:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    be98:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    be9c:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bea0:	da0b      	bge.n	beba <event_connection_prepare+0x152>
			u32_t ticks_prepare_to_start =
    bea2:	68a3      	ldr	r3, [r4, #8]
    bea4:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    bea6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    beaa:	428b      	cmp	r3, r1
    beac:	bf2c      	ite	cs
    beae:	4443      	addcs	r3, r8
    beb0:	eb08 0301 	addcc.w	r3, r8, r1
    beb4:	1a9b      	subs	r3, r3, r2
    beb6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    beba:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    bebc:	4b6b      	ldr	r3, [pc, #428]	; (c06c <event_connection_prepare+0x304>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    bebe:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bec2:	2201      	movs	r2, #1
    bec4:	4611      	mov	r1, r2
    bec6:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    bec8:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    beca:	f7fb f92d 	bl	7128 <mayfly_enqueue>
		LL_ASSERT(!retval);
    bece:	b330      	cbz	r0, bf1e <event_connection_prepare+0x1b6>
    bed0:	4b60      	ldr	r3, [pc, #384]	; (c054 <event_connection_prepare+0x2ec>)
    bed2:	9301      	str	r3, [sp, #4]
    bed4:	9300      	str	r3, [sp, #0]
    bed6:	4b66      	ldr	r3, [pc, #408]	; (c070 <event_connection_prepare+0x308>)
    bed8:	4a5f      	ldr	r2, [pc, #380]	; (c058 <event_connection_prepare+0x2f0>)
    beda:	4961      	ldr	r1, [pc, #388]	; (c060 <event_connection_prepare+0x2f8>)
    bedc:	4865      	ldr	r0, [pc, #404]	; (c074 <event_connection_prepare+0x30c>)
    bede:	e753      	b.n	bd88 <event_connection_prepare+0x20>
	if (conn->llcp_conn_param.status) {
    bee0:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    bee4:	b397      	cbz	r7, bf4c <event_connection_prepare+0x1e4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bee6:	4860      	ldr	r0, [pc, #384]	; (c068 <event_connection_prepare+0x300>)
    bee8:	f7fb f853 	bl	6f92 <mem_acquire>
		if (!node_tx) {
    beec:	4601      	mov	r1, r0
    beee:	b1b0      	cbz	r0, bf1e <event_connection_prepare+0x1b6>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    bef0:	7903      	ldrb	r3, [r0, #4]
    bef2:	f043 0303 	orr.w	r3, r3, #3
    bef6:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    bef8:	2311      	movs	r3, #17
    befa:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    befc:	2303      	movs	r3, #3
    befe:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bf00:	230f      	movs	r3, #15
    bf02:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    bf04:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    bf08:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    bf0a:	4620      	mov	r0, r4
    bf0c:	f7ff fe5c 	bl	bbc8 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bf10:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bf14:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    bf18:	2300      	movs	r3, #0
    bf1a:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    bf1e:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    bf22:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    bf26:	429a      	cmp	r2, r3
    bf28:	f000 810a 	beq.w	c140 <event_connection_prepare+0x3d8>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    bf2c:	2005      	movs	r0, #5
    bf2e:	f7ff fcb5 	bl	b89c <event_stop.constprop.31>
	switch (conn->llcp_phy.state) {
    bf32:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    bf36:	f003 0203 	and.w	r2, r3, #3
    bf3a:	2a03      	cmp	r2, #3
    bf3c:	f200 8179 	bhi.w	c232 <event_connection_prepare+0x4ca>
    bf40:	e8df f012 	tbh	[pc, r2, lsl #1]
    bf44:	00fe00cc 	.word	0x00fe00cc
    bf48:	011800fe 	.word	0x011800fe
	if (!conn->role) {
    bf4c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    bf50:	2b00      	cmp	r3, #0
    bf52:	db3b      	blt.n	bfcc <event_connection_prepare+0x264>
		if (conn->llcp_req != conn->llcp_ack) {
    bf54:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    bf58:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    bf5c:	428b      	cmp	r3, r1
    bf5e:	d1de      	bne.n	bf1e <event_connection_prepare+0x1b6>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bf60:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    bf64:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bf68:	2205      	movs	r2, #5
    bf6a:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    bf6e:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bf72:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    bf76:	2301      	movs	r3, #1
    bf78:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    bf7c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    bf80:	b122      	cbz	r2, bf8c <event_connection_prepare+0x224>
				((conn->llcp_conn_param.interval /
    bf82:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    bf86:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    bf88:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    bf8c:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    bf90:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bf94:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    bf98:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bf9c:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    bfa0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bfa4:	2202      	movs	r2, #2
    bfa6:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    bfaa:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    bfae:	f082 0208 	eor.w	r2, r2, #8
    bfb2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    bfb6:	f362 0382 	bfi	r3, r2, #2, #1
    bfba:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    bfbe:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    bfc0:	2301      	movs	r3, #1
    bfc2:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    bfc6:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    bfca:	e7a8      	b.n	bf1e <event_connection_prepare+0x1b6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bfcc:	4826      	ldr	r0, [pc, #152]	; (c068 <event_connection_prepare+0x300>)
    bfce:	f7fa ffe0 	bl	6f92 <mem_acquire>
	if (!node_tx) {
    bfd2:	4601      	mov	r1, r0
    bfd4:	2800      	cmp	r0, #0
    bfd6:	d0a2      	beq.n	bf1e <event_connection_prepare+0x1b6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    bfd8:	7903      	ldrb	r3, [r0, #4]
    bfda:	f043 0303 	orr.w	r3, r3, #3
    bfde:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    bfe0:	2318      	movs	r3, #24
    bfe2:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    bfe4:	2310      	movs	r3, #16
    bfe6:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    bfe8:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    bfec:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    bfee:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    bff0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bff4:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    bff6:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bffa:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    bffc:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    c000:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    c002:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    c006:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    c00a:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    c00e:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    c012:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    c016:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    c01a:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    c01e:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    c022:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    c026:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    c02a:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    c02e:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    c032:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    c036:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    c03a:	4620      	mov	r0, r4
    c03c:	f7ff fdc4 	bl	bbc8 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c040:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    c044:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    c048:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    c04c:	e767      	b.n	bf1e <event_connection_prepare+0x1b6>
    c04e:	bf00      	nop
    c050:	200008c8 	.word	0x200008c8
    c054:	0001496d 	.word	0x0001496d
    c058:	000156bc 	.word	0x000156bc
    c05c:	00016ea0 	.word	0x00016ea0
    c060:	0001570b 	.word	0x0001570b
    c064:	00017857 	.word	0x00017857
    c068:	20000a24 	.word	0x20000a24
    c06c:	20003db0 	.word	0x20003db0
    c070:	00016e3c 	.word	0x00016e3c
    c074:	0001771b 	.word	0x0001771b
	if (conn->pause_tx) {
    c078:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c07c:	0718      	lsls	r0, r3, #28
    c07e:	f53f af4e 	bmi.w	bf1e <event_connection_prepare+0x1b6>
	node_rx = packet_rx_reserve_get(2);
    c082:	2002      	movs	r0, #2
    c084:	f7fd fd9a 	bl	9bbc <packet_rx_reserve_get>
	if (!node_rx) {
    c088:	2800      	cmp	r0, #0
    c08a:	f43f af48 	beq.w	bf1e <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    c08e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    c092:	2203      	movs	r2, #3
    c094:	f362 0302 	bfi	r3, r2, #0, #3
    c098:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    c09c:	8c23      	ldrh	r3, [r4, #32]
    c09e:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c0a0:	2301      	movs	r3, #1
    c0a2:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c0a4:	7a03      	ldrb	r3, [r0, #8]
    c0a6:	4313      	orrs	r3, r2
    c0a8:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    c0aa:	2318      	movs	r3, #24
    c0ac:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    c0ae:	230f      	movs	r3, #15
    c0b0:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    c0b2:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c0b6:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    c0b8:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    c0ba:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c0be:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    c0c0:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c0c4:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    c0c6:	f7fe fbe3 	bl	a890 <packet_rx_enqueue>
    c0ca:	e728      	b.n	bf1e <event_connection_prepare+0x1b6>
		LL_ASSERT(0);
    c0cc:	4bb9      	ldr	r3, [pc, #740]	; (c3b4 <event_connection_prepare+0x64c>)
    c0ce:	9301      	str	r3, [sp, #4]
    c0d0:	9300      	str	r3, [sp, #0]
    c0d2:	4bb9      	ldr	r3, [pc, #740]	; (c3b8 <event_connection_prepare+0x650>)
		LL_ASSERT(0);
    c0d4:	4ab9      	ldr	r2, [pc, #740]	; (c3bc <event_connection_prepare+0x654>)
    c0d6:	49ba      	ldr	r1, [pc, #744]	; (c3c0 <event_connection_prepare+0x658>)
    c0d8:	48ba      	ldr	r0, [pc, #744]	; (c3c4 <event_connection_prepare+0x65c>)
    c0da:	e655      	b.n	bd88 <event_connection_prepare+0x20>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c0dc:	48ba      	ldr	r0, [pc, #744]	; (c3c8 <event_connection_prepare+0x660>)
    c0de:	f7fa ff58 	bl	6f92 <mem_acquire>
		if (!node_tx) {
    c0e2:	4601      	mov	r1, r0
    c0e4:	b360      	cbz	r0, c140 <event_connection_prepare+0x3d8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    c0e6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c0ea:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    c0ee:	2201      	movs	r2, #1
    c0f0:	f362 0301 	bfi	r3, r2, #0, #2
    c0f4:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c0f8:	b2db      	uxtb	r3, r3
    c0fa:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c0fe:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c102:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c106:	f363 07c5 	bfi	r7, r3, #3, #3
    c10a:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    c10e:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c112:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    c116:	f367 1286 	bfi	r2, r7, #6, #1
    c11a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c11e:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    c120:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c122:	f042 0203 	orr.w	r2, r2, #3
    c126:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    c128:	2203      	movs	r2, #3
    c12a:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    c12c:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    c12e:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    c130:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    c132:	4620      	mov	r0, r4
    c134:	f7ff fd48 	bl	bbc8 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    c138:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c13c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    c140:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    c144:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c148:	429a      	cmp	r2, r3
    c14a:	f000 82f6 	beq.w	c73a <event_connection_prepare+0x9d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c14e:	2005      	movs	r0, #5
    c150:	f7ff fba4 	bl	b89c <event_stop.constprop.31>
		switch (conn->llcp_type) {
    c154:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    c158:	3b01      	subs	r3, #1
    c15a:	2b07      	cmp	r3, #7
    c15c:	f200 85a7 	bhi.w	ccae <event_connection_prepare+0xf46>
    c160:	e8df f013 	tbh	[pc, r3, lsl #1]
    c164:	02c4006c 	.word	0x02c4006c
    c168:	045e0343 	.word	0x045e0343
    c16c:	05a5048e 	.word	0x05a5048e
    c170:	04fa04e6 	.word	0x04fa04e6
		conn->llcp_phy.ack = conn->llcp_phy.req;
    c174:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    c178:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    c17c:	f3c3 0282 	ubfx	r2, r3, #2, #3
    c180:	0791      	lsls	r1, r2, #30
    c182:	d544      	bpl.n	c20e <event_connection_prepare+0x4a6>
			conn->llcp_phy.tx = BIT(1);
    c184:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    c186:	f362 0384 	bfi	r3, r2, #2, #3
    c18a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    c18e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    c192:	095a      	lsrs	r2, r3, #5
    c194:	0790      	lsls	r0, r2, #30
    c196:	d543      	bpl.n	c220 <event_connection_prepare+0x4b8>
			conn->llcp_phy.rx = BIT(1);
    c198:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    c19a:	f362 1347 	bfi	r3, r2, #5, #3
    c19e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    c1a2:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    c1a6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c1aa:	f3c2 0182 	ubfx	r1, r2, #2, #3
    c1ae:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c1b2:	428b      	cmp	r3, r1
    c1b4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    c1b8:	bf14      	ite	ne
    c1ba:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    c1be:	f36f 0384 	bfceq	r3, #2, #3
    c1c2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    c1c6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c1ca:	0952      	lsrs	r2, r2, #5
    c1cc:	f003 0307 	and.w	r3, r3, #7
    c1d0:	4293      	cmp	r3, r2
    c1d2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    c1d6:	bf14      	ite	ne
    c1d8:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    c1dc:	f36f 1347 	bfceq	r3, #5, #3
    c1e0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    c1e4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c1e8:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    c1ec:	f043 0301 	orr.w	r3, r3, #1
    c1f0:	f3c2 0240 	ubfx	r2, r2, #1, #1
    c1f4:	f362 0341 	bfi	r3, r2, #1, #1
    c1f8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    c1fc:	2308      	movs	r3, #8
    c1fe:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    c202:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    c206:	3b01      	subs	r3, #1
    c208:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    c20c:	e798      	b.n	c140 <event_connection_prepare+0x3d8>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    c20e:	07d7      	lsls	r7, r2, #31
    c210:	d501      	bpl.n	c216 <event_connection_prepare+0x4ae>
			conn->llcp_phy.tx = BIT(0);
    c212:	2201      	movs	r2, #1
    c214:	e7b7      	b.n	c186 <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    c216:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    c21a:	bf18      	it	ne
    c21c:	2204      	movne	r2, #4
    c21e:	e7b2      	b.n	c186 <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    c220:	07d1      	lsls	r1, r2, #31
    c222:	d501      	bpl.n	c228 <event_connection_prepare+0x4c0>
			conn->llcp_phy.rx = BIT(0);
    c224:	2201      	movs	r2, #1
    c226:	e7b8      	b.n	c19a <event_connection_prepare+0x432>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    c228:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    c22c:	bf18      	it	ne
    c22e:	2204      	movne	r2, #4
    c230:	e7b3      	b.n	c19a <event_connection_prepare+0x432>
		LL_ASSERT(0);
    c232:	4b60      	ldr	r3, [pc, #384]	; (c3b4 <event_connection_prepare+0x64c>)
    c234:	9301      	str	r3, [sp, #4]
    c236:	9300      	str	r3, [sp, #0]
    c238:	4b64      	ldr	r3, [pc, #400]	; (c3cc <event_connection_prepare+0x664>)
    c23a:	e74b      	b.n	c0d4 <event_connection_prepare+0x36c>
	if (!conn_upd) {
    c23c:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    c240:	b90b      	cbnz	r3, c246 <event_connection_prepare+0x4de>
		_radio.conn_upd = conn;
    c242:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    c246:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c24a:	f013 0303 	ands.w	r3, r3, #3
    c24e:	d068      	beq.n	c322 <event_connection_prepare+0x5ba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c250:	485d      	ldr	r0, [pc, #372]	; (c3c8 <event_connection_prepare+0x660>)
    c252:	f7fa fe9e 	bl	6f92 <mem_acquire>
		if (!node_tx) {
    c256:	4607      	mov	r7, r0
    c258:	2800      	cmp	r0, #0
    c25a:	f000 826e 	beq.w	c73a <event_connection_prepare+0x9d2>
		switch (conn->llcp.conn_upd.state) {
    c25e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c262:	f003 0303 	and.w	r3, r3, #3
    c266:	2b01      	cmp	r3, #1
    c268:	d059      	beq.n	c31e <event_connection_prepare+0x5b6>
    c26a:	2b02      	cmp	r3, #2
    c26c:	d152      	bne.n	c314 <event_connection_prepare+0x5ac>
			fp_mayfly_select_or_use =
    c26e:	4a58      	ldr	r2, [pc, #352]	; (c3d0 <event_connection_prepare+0x668>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    c270:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c274:	f36f 0301 	bfc	r3, #0, #2
    c278:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    c27c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c27e:	3306      	adds	r3, #6
    c280:	4433      	add	r3, r6
    c282:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    c284:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c288:	7939      	ldrb	r1, [r7, #4]
    c28a:	f041 0103 	orr.w	r1, r1, #3
    c28e:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    c290:	210c      	movs	r1, #12
    c292:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    c294:	2100      	movs	r1, #0
    c296:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    c298:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    c29c:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    c29e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    c2a2:	f240 40e2 	movw	r0, #1250	; 0x4e2
    c2a6:	fbb1 f1f0 	udiv	r1, r1, r0
    c2aa:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    c2ae:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    c2b2:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    c2b6:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c2ba:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    c2be:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    c2c2:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    c2c6:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c2ca:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    c2cc:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c2d0:	2900      	cmp	r1, #0
    c2d2:	da0b      	bge.n	c2ec <event_connection_prepare+0x584>
			u32_t ticks_prepare_to_start =
    c2d4:	68a3      	ldr	r3, [r4, #8]
    c2d6:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    c2d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    c2dc:	4283      	cmp	r3, r0
    c2de:	bf2c      	ite	cs
    c2e0:	4443      	addcs	r3, r8
    c2e2:	eb08 0300 	addcc.w	r3, r8, r0
    c2e6:	1a5b      	subs	r3, r3, r1
    c2e8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    c2ec:	f107 0309 	add.w	r3, r7, #9
    c2f0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    c2f4:	4b37      	ldr	r3, [pc, #220]	; (c3d4 <event_connection_prepare+0x66c>)
    c2f6:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c2f8:	2201      	movs	r2, #1
    c2fa:	4611      	mov	r1, r2
    c2fc:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    c2fe:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c300:	f7fa ff12 	bl	7128 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c304:	2800      	cmp	r0, #0
    c306:	f000 8214 	beq.w	c732 <event_connection_prepare+0x9ca>
    c30a:	4b2a      	ldr	r3, [pc, #168]	; (c3b4 <event_connection_prepare+0x64c>)
    c30c:	9301      	str	r3, [sp, #4]
    c30e:	9300      	str	r3, [sp, #0]
    c310:	4b31      	ldr	r3, [pc, #196]	; (c3d8 <event_connection_prepare+0x670>)
    c312:	e5e1      	b.n	bed8 <event_connection_prepare+0x170>
			LL_ASSERT(0);
    c314:	4b27      	ldr	r3, [pc, #156]	; (c3b4 <event_connection_prepare+0x64c>)
    c316:	9301      	str	r3, [sp, #4]
    c318:	9300      	str	r3, [sp, #0]
    c31a:	4b30      	ldr	r3, [pc, #192]	; (c3dc <event_connection_prepare+0x674>)
    c31c:	e6da      	b.n	c0d4 <event_connection_prepare+0x36c>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    c31e:	4a30      	ldr	r2, [pc, #192]	; (c3e0 <event_connection_prepare+0x678>)
    c320:	e7a6      	b.n	c270 <event_connection_prepare+0x508>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    c322:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    c326:	1bf7      	subs	r7, r6, r7
    c328:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    c32a:	043a      	lsls	r2, r7, #16
    c32c:	f100 8205 	bmi.w	c73a <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c330:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    c334:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c338:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    c33c:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    c340:	428a      	cmp	r2, r1
    c342:	d009      	beq.n	c358 <event_connection_prepare+0x5f0>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    c344:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c348:	f002 0207 	and.w	r2, r2, #7
    c34c:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c34e:	bf04      	itt	eq
    c350:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    c354:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    c358:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c35c:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    c35e:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    c360:	bf08      	it	eq
    c362:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c366:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    c368:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    c36a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c36e:	429a      	cmp	r2, r3
    c370:	d114      	bne.n	c39c <event_connection_prepare+0x634>
		     conn->conn_interval) ||
    c372:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c376:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c378:	4299      	cmp	r1, r3
    c37a:	d10f      	bne.n	c39c <event_connection_prepare+0x634>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    c37c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    c380:	435a      	muls	r2, r3
    c382:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c386:	f242 7110 	movw	r1, #10000	; 0x2710
    c38a:	fb01 2303 	mla	r3, r1, r3, r2
    c38e:	3b01      	subs	r3, #1
    c390:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    c394:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    c396:	b29b      	uxth	r3, r3
    c398:	429a      	cmp	r2, r3
    c39a:	d036      	beq.n	c40a <event_connection_prepare+0x6a2>
			node_rx = packet_rx_reserve_get(2);
    c39c:	2002      	movs	r0, #2
    c39e:	f7fd fc0d 	bl	9bbc <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    c3a2:	bb08      	cbnz	r0, c3e8 <event_connection_prepare+0x680>
    c3a4:	4b03      	ldr	r3, [pc, #12]	; (c3b4 <event_connection_prepare+0x64c>)
    c3a6:	9301      	str	r3, [sp, #4]
    c3a8:	9300      	str	r3, [sp, #0]
    c3aa:	4b0c      	ldr	r3, [pc, #48]	; (c3dc <event_connection_prepare+0x674>)
		LL_ASSERT(node_rx);
    c3ac:	4a03      	ldr	r2, [pc, #12]	; (c3bc <event_connection_prepare+0x654>)
    c3ae:	4904      	ldr	r1, [pc, #16]	; (c3c0 <event_connection_prepare+0x658>)
    c3b0:	480c      	ldr	r0, [pc, #48]	; (c3e4 <event_connection_prepare+0x67c>)
    c3b2:	e4e9      	b.n	bd88 <event_connection_prepare+0x20>
    c3b4:	0001496d 	.word	0x0001496d
    c3b8:	00016e51 	.word	0x00016e51
    c3bc:	000156bc 	.word	0x000156bc
    c3c0:	0001570b 	.word	0x0001570b
    c3c4:	0001565b 	.word	0x0001565b
    c3c8:	20000a24 	.word	0x20000a24
    c3cc:	00016e76 	.word	0x00016e76
    c3d0:	0000a5e1 	.word	0x0000a5e1
    c3d4:	20003da0 	.word	0x20003da0
    c3d8:	00016e05 	.word	0x00016e05
    c3dc:	00016e19 	.word	0x00016e19
    c3e0:	0000b2c9 	.word	0x0000b2c9
    c3e4:	00017647 	.word	0x00017647
			node_rx->hdr.handle = conn->handle;
    c3e8:	8c23      	ldrh	r3, [r4, #32]
    c3ea:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c3ec:	2308      	movs	r3, #8
    c3ee:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    c3f0:	2300      	movs	r3, #0
    c3f2:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    c3f4:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c3f8:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    c3fa:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    c3fe:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    c400:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c404:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    c406:	f7fe fa43 	bl	a890 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c40a:	6823      	ldr	r3, [r4, #0]
    c40c:	6866      	ldr	r6, [r4, #4]
    c40e:	2b00      	cmp	r3, #0
    c410:	da09      	bge.n	c426 <event_connection_prepare+0x6be>
			u32_t ticks_prepare_to_start =
    c412:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c418:	42b0      	cmp	r0, r6
    c41a:	bf2c      	ite	cs
    c41c:	4480      	addcs	r8, r0
    c41e:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c420:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c422:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    c426:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    c428:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    c42c:	49a0      	ldr	r1, [pc, #640]	; (c6b0 <event_connection_prepare+0x948>)
		conn_interval_old = instant_latency * conn->conn_interval;
    c42e:	fb13 f307 	smulbb	r3, r3, r7
    c432:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    c434:	fbb3 f2fa 	udiv	r2, r3, sl
    c438:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    c43c:	fb1a f009 	smulbb	r0, sl, r9
    c440:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    c442:	4283      	cmp	r3, r0
    c444:	f080 80bf 	bcs.w	c5c6 <event_connection_prepare+0x85e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    c448:	1ac0      	subs	r0, r0, r3
    c44a:	f240 1223 	movw	r2, #291	; 0x123
    c44e:	4342      	muls	r2, r0
    c450:	17c3      	asrs	r3, r0, #31
    c452:	fb01 2303 	mla	r3, r1, r3, r2
    c456:	fba0 0101 	umull	r0, r1, r0, r1
    c45a:	4419      	add	r1, r3
    c45c:	a392      	add	r3, pc, #584	; (adr r3, c6a8 <event_connection_prepare+0x940>)
    c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
    c462:	f7f3 fed7 	bl	214 <__aeabi_uldivmod>
    c466:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c46a:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c46e:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    c470:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    c472:	f8df b274 	ldr.w	fp, [pc, #628]	; c6e8 <event_connection_prepare+0x980>
    c476:	1bdb      	subs	r3, r3, r7
    c478:	444b      	add	r3, r9
    c47a:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    c47c:	6823      	ldr	r3, [r4, #0]
    c47e:	42b3      	cmp	r3, r6
    c480:	bf38      	it	cc
    c482:	4633      	movcc	r3, r6
    c484:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    c486:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c48a:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    c48e:	2b00      	cmp	r3, #0
    c490:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    c494:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c496:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    c49a:	f280 80a5 	bge.w	c5e8 <event_connection_prepare+0x880>
				conn->slave.window_widening_periodic_us *
    c49e:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    c4a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    c4a2:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    c4a6:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    c4aa:	4a82      	ldr	r2, [pc, #520]	; (c6b4 <event_connection_prepare+0x94c>)
    c4ac:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    c4b0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c4b4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c4b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    c4bc:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    c4c0:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    c4c2:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c4c4:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    c4c8:	4b7b      	ldr	r3, [pc, #492]	; (c6b8 <event_connection_prepare+0x950>)
				conn->llcp.conn_upd.win_size * 1250;
    c4ca:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c4ce:	f205 253f 	addw	r5, r5, #575	; 0x23f
    c4d2:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    c4d6:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    c4d8:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    c4dc:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    c4de:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    c4e0:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    c4e2:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    c4e4:	429f      	cmp	r7, r3
    c4e6:	bf94      	ite	ls
    c4e8:	65e7      	strls	r7, [r4, #92]	; 0x5c
    c4ea:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    c4ec:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    c4ee:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    c4f0:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c4f2:	fba0 010b 	umull	r0, r1, r0, fp
    c4f6:	a36c      	add	r3, pc, #432	; (adr r3, c6a8 <event_connection_prepare+0x940>)
    c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    c4fc:	f7f3 fe8a 	bl	214 <__aeabi_uldivmod>
    c500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c502:	1a1b      	subs	r3, r3, r0
    c504:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c508:	fbb3 f0f8 	udiv	r0, r3, r8
    c50c:	fb08 f000 	mul.w	r0, r8, r0
    c510:	a365      	add	r3, pc, #404	; (adr r3, c6a8 <event_connection_prepare+0x940>)
    c512:	e9d3 2300 	ldrd	r2, r3, [r3]
    c516:	fba0 010b 	umull	r0, r1, r0, fp
    c51a:	f7f3 fe7b 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    c51e:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c520:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c524:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    c528:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    c52c:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c52e:	f242 7110 	movw	r1, #10000	; 0x2710
    c532:	fb01 6303 	mla	r3, r1, r3, r6
    c536:	3b01      	subs	r3, #1
    c538:	fbb3 f3f6 	udiv	r3, r3, r6
    c53c:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c53e:	4b5f      	ldr	r3, [pc, #380]	; (c6bc <event_connection_prepare+0x954>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    c540:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c544:	4433      	add	r3, r6
    c546:	fbb3 f3f6 	udiv	r3, r3, r6
    c54a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c54e:	4b5c      	ldr	r3, [pc, #368]	; (c6c0 <event_connection_prepare+0x958>)
    c550:	4433      	add	r3, r6
    c552:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c556:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c558:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c55a:	4299      	cmp	r1, r3
    c55c:	bfc4      	itt	gt
    c55e:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    c562:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c564:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c568:	bfc8      	it	gt
    c56a:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    c56c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c570:	bfc8      	it	gt
    c572:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    c574:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    c578:	bf08      	it	eq
    c57a:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c57e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    c582:	2000      	movs	r0, #0
    c584:	2101      	movs	r1, #1
    c586:	f006 f9f7 	bl	12978 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c58a:	2200      	movs	r2, #0
    c58c:	2101      	movs	r1, #1
		mayfly_was_enabled =
    c58e:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c590:	4610      	mov	r0, r2
    c592:	f7fa fda1 	bl	70d8 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c596:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    c59a:	f641 2385 	movw	r3, #6789	; 0x1a85
    c59e:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c5a0:	3207      	adds	r2, #7
		ticker_status =
    c5a2:	9300      	str	r3, [sp, #0]
    c5a4:	b2d2      	uxtb	r2, r2
    c5a6:	4b47      	ldr	r3, [pc, #284]	; (c6c4 <event_connection_prepare+0x95c>)
    c5a8:	4608      	mov	r0, r1
    c5aa:	f7fb fc19 	bl	7de0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c5ae:	f030 0802 	bics.w	r8, r0, #2
    c5b2:	d026      	beq.n	c602 <event_connection_prepare+0x89a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c5b4:	4b44      	ldr	r3, [pc, #272]	; (c6c8 <event_connection_prepare+0x960>)
    c5b6:	9301      	str	r3, [sp, #4]
    c5b8:	9300      	str	r3, [sp, #0]
    c5ba:	4a44      	ldr	r2, [pc, #272]	; (c6cc <event_connection_prepare+0x964>)
    c5bc:	4b44      	ldr	r3, [pc, #272]	; (c6d0 <event_connection_prepare+0x968>)
    c5be:	4945      	ldr	r1, [pc, #276]	; (c6d4 <event_connection_prepare+0x96c>)
    c5c0:	4845      	ldr	r0, [pc, #276]	; (c6d8 <event_connection_prepare+0x970>)
    c5c2:	f7ff bbe1 	b.w	bd88 <event_connection_prepare+0x20>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c5c6:	fb0a 3212 	mls	r2, sl, r2, r3
    c5ca:	b292      	uxth	r2, r2
    c5cc:	fba2 0101 	umull	r0, r1, r2, r1
    c5d0:	f240 1323 	movw	r3, #291	; 0x123
    c5d4:	fb03 1102 	mla	r1, r3, r2, r1
    c5d8:	a333      	add	r3, pc, #204	; (adr r3, c6a8 <event_connection_prepare+0x940>)
    c5da:	e9d3 2300 	ldrd	r2, r3, [r3]
    c5de:	f7f3 fe19 	bl	214 <__aeabi_uldivmod>
    c5e2:	eba8 0300 	sub.w	r3, r8, r0
    c5e6:	e742      	b.n	c46e <event_connection_prepare+0x706>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c5e8:	990c      	ldr	r1, [sp, #48]	; 0x30
    c5ea:	a32f      	add	r3, pc, #188	; (adr r3, c6a8 <event_connection_prepare+0x940>)
    c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    c5f0:	fba1 010b 	umull	r0, r1, r1, fp
    c5f4:	f7f3 fe0e 	bl	214 <__aeabi_uldivmod>
    c5f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    c5fc:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    c5fe:	4635      	mov	r5, r6
    c600:	e790      	b.n	c524 <event_connection_prepare+0x7bc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    c602:	fba5 ab0b 	umull	sl, fp, r5, fp
    c606:	a328      	add	r3, pc, #160	; (adr r3, c6a8 <event_connection_prepare+0x940>)
    c608:	e9d3 2300 	ldrd	r2, r3, [r3]
    c60c:	4650      	mov	r0, sl
    c60e:	4659      	mov	r1, fp
    c610:	f7f3 fe00 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    c614:	4a31      	ldr	r2, [pc, #196]	; (c6dc <event_connection_prepare+0x974>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c616:	f894 6020 	ldrb.w	r6, [r4, #32]
    c61a:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    c61e:	2307      	movs	r3, #7
    c620:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c624:	2100      	movs	r1, #0
    c626:	4343      	muls	r3, r0
    c628:	fb02 3301 	mla	r3, r2, r1, r3
    c62c:	fba0 0102 	umull	r0, r1, r0, r2
    c630:	ebba 0000 	subs.w	r0, sl, r0
    c634:	4419      	add	r1, r3
    c636:	eb6b 0101 	sbc.w	r1, fp, r1
    c63a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c63e:	2300      	movs	r3, #0
    c640:	f7f3 fde8 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c644:	68e3      	ldr	r3, [r4, #12]
    c646:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c648:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    c64c:	4924      	ldr	r1, [pc, #144]	; (c6e0 <event_connection_prepare+0x978>)
		ticker_status =
    c64e:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c650:	441a      	add	r2, r3
    c652:	4613      	mov	r3, r2
    c654:	4a23      	ldr	r2, [pc, #140]	; (c6e4 <event_connection_prepare+0x97c>)
		ticker_status =
    c656:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c658:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    c65c:	bf38      	it	cc
    c65e:	460a      	movcc	r2, r1
    c660:	3607      	adds	r6, #7
		ticker_status =
    c662:	f641 2195 	movw	r1, #6805	; 0x1a95
    c666:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c668:	b2f6      	uxtb	r6, r6
		ticker_status =
    c66a:	4916      	ldr	r1, [pc, #88]	; (c6c4 <event_connection_prepare+0x95c>)
    c66c:	9107      	str	r1, [sp, #28]
    c66e:	9205      	str	r2, [sp, #20]
    c670:	9406      	str	r4, [sp, #24]
    c672:	f8cd 800c 	str.w	r8, [sp, #12]
    c676:	9501      	str	r5, [sp, #4]
    c678:	9700      	str	r7, [sp, #0]
    c67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c67c:	4632      	mov	r2, r6
    c67e:	4641      	mov	r1, r8
    c680:	4640      	mov	r0, r8
    c682:	f7fb fb0f 	bl	7ca4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c686:	f030 0002 	bics.w	r0, r0, #2
    c68a:	d193      	bne.n	c5b4 <event_connection_prepare+0x84c>
		if (mayfly_was_enabled) {
    c68c:	f1b9 0f00 	cmp.w	r9, #0
    c690:	f000 8383 	beq.w	cd9a <event_connection_prepare+0x1032>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c694:	2201      	movs	r2, #1
    c696:	4611      	mov	r1, r2
}
    c698:	b00f      	add	sp, #60	; 0x3c
    c69a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c69e:	f7fa bd1b 	b.w	70d8 <mayfly_enable>
    c6a2:	bf00      	nop
    c6a4:	f3af 8000 	nop.w
    c6a8:	1afd498d 	.word	0x1afd498d
    c6ac:	00000007 	.word	0x00000007
    c6b0:	09ce5400 	.word	0x09ce5400
    c6b4:	00017200 	.word	0x00017200
    c6b8:	000f4240 	.word	0x000f4240
    c6bc:	026259ff 	.word	0x026259ff
    c6c0:	01c9c37f 	.word	0x01c9c37f
    c6c4:	0000aaa5 	.word	0x0000aaa5
    c6c8:	0001496d 	.word	0x0001496d
    c6cc:	000156bc 	.word	0x000156bc
    c6d0:	00016e19 	.word	0x00016e19
    c6d4:	0001570b 	.word	0x0001570b
    c6d8:	00016fe1 	.word	0x00016fe1
    c6dc:	1afd498d 	.word	0x1afd498d
    c6e0:	0000cf49 	.word	0x0000cf49
    c6e4:	0000cf4d 	.word	0x0000cf4d
    c6e8:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
    c6ec:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c6f0:	2b00      	cmp	r3, #0
    c6f2:	d05e      	beq.n	c7b2 <event_connection_prepare+0xa4a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c6f4:	48c9      	ldr	r0, [pc, #804]	; (ca1c <event_connection_prepare+0xcb4>)
    c6f6:	f7fa fc4c 	bl	6f92 <mem_acquire>
		if (node_tx) {
    c6fa:	4607      	mov	r7, r0
    c6fc:	b1e8      	cbz	r0, c73a <event_connection_prepare+0x9d2>
			conn->llcp.chan_map.initiate = 0;
    c6fe:	2300      	movs	r3, #0
    c700:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    c704:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c706:	3306      	adds	r3, #6
    c708:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    c70a:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c70e:	7903      	ldrb	r3, [r0, #4]
    c710:	f043 0303 	orr.w	r3, r3, #3
    c714:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c716:	2308      	movs	r3, #8
    c718:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c71a:	2301      	movs	r3, #1
    c71c:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    c71e:	2205      	movs	r2, #5
    c720:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c724:	3008      	adds	r0, #8
    c726:	f7f5 fa69 	bl	1bfc <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    c72a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c72e:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    c732:	4639      	mov	r1, r7
    c734:	4620      	mov	r0, r4
    c736:	f7ff fa47 	bl	bbc8 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    c73a:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    c73e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c742:	429a      	cmp	r2, r3
    c744:	d01e      	beq.n	c784 <event_connection_prepare+0xa1c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c746:	2005      	movs	r0, #5
    c748:	f7ff f8a8 	bl	b89c <event_stop.constprop.31>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c74c:	48b3      	ldr	r0, [pc, #716]	; (ca1c <event_connection_prepare+0xcb4>)
    c74e:	f7fa fc20 	bl	6f92 <mem_acquire>
		if (node_tx) {
    c752:	4601      	mov	r1, r0
    c754:	b1b0      	cbz	r0, c784 <event_connection_prepare+0xa1c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    c756:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c75a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c75e:	7903      	ldrb	r3, [r0, #4]
    c760:	f043 0303 	orr.w	r3, r3, #3
    c764:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c766:	2302      	movs	r3, #2
    c768:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c76a:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    c76c:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    c770:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    c772:	4620      	mov	r0, r4
    c774:	f7ff fa28 	bl	bbc8 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    c778:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    c77a:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    c77c:	bf98      	it	ls
    c77e:	3301      	addls	r3, #1
    c780:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    c784:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    c788:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    c78c:	429a      	cmp	r2, r3
    c78e:	f000 82eb 	beq.w	cd68 <event_connection_prepare+0x1000>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c792:	2005      	movs	r0, #5
    c794:	f7ff f882 	bl	b89c <event_stop.constprop.31>
	switch (conn->llcp_length.state) {
    c798:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    c79c:	f003 0303 	and.w	r3, r3, #3
    c7a0:	2b03      	cmp	r3, #3
    c7a2:	f200 830c 	bhi.w	cdbe <event_connection_prepare+0x1056>
    c7a6:	e8df f013 	tbh	[pc, r3, lsl #1]
    c7aa:	0288      	.short	0x0288
    c7ac:	02df02df 	.word	0x02df02df
    c7b0:	02fb      	.short	0x02fb
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    c7b2:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c7b6:	1af3      	subs	r3, r6, r3
    c7b8:	041f      	lsls	r7, r3, #16
    c7ba:	d4be      	bmi.n	c73a <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c7bc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c7c0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    c7c4:	f104 0717 	add.w	r7, r4, #23
    c7c8:	2205      	movs	r2, #5
    c7ca:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c7ce:	4638      	mov	r0, r7
    c7d0:	f7f5 fa14 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    c7d4:	2105      	movs	r1, #5
    c7d6:	4638      	mov	r0, r7
    c7d8:	f7fa fd86 	bl	72e8 <util_ones_count_get>
		conn->data_chan_count =
    c7dc:	7f63      	ldrb	r3, [r4, #29]
    c7de:	f360 0305 	bfi	r3, r0, #0, #6
    c7e2:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    c7e4:	2301      	movs	r3, #1
    c7e6:	7723      	strb	r3, [r4, #28]
    c7e8:	e7a7      	b.n	c73a <event_connection_prepare+0x9d2>
	if (conn->llcp.encryption.initiate) {
    c7ea:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    c7ee:	f1b9 0f00 	cmp.w	r9, #0
    c7f2:	d1a2      	bne.n	c73a <event_connection_prepare+0x9d2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c7f4:	4889      	ldr	r0, [pc, #548]	; (ca1c <event_connection_prepare+0xcb4>)
    c7f6:	f7fa fbcc 	bl	6f92 <mem_acquire>
	if (!node_tx) {
    c7fa:	4607      	mov	r7, r0
    c7fc:	2800      	cmp	r0, #0
    c7fe:	d09c      	beq.n	c73a <event_connection_prepare+0x9d2>
	if (!conn->role) {
    c800:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c804:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    c806:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    c80a:	db4d      	blt.n	c8a8 <event_connection_prepare+0xb40>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c80c:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    c810:	465b      	mov	r3, fp
    c812:	464a      	mov	r2, r9
    c814:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c818:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c81c:	f005 fc22 	bl	12064 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    c820:	2210      	movs	r2, #16
    c822:	4659      	mov	r1, fp
    c824:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c828:	f7f5 f9e8 	bl	1bfc <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c82c:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c830:	2208      	movs	r2, #8
    c832:	f204 1033 	addw	r0, r4, #307	; 0x133
    c836:	f7f5 f9e1 	bl	1bfc <memcpy>
		conn->ccm_rx.direction = 0;
    c83a:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    c83e:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    c842:	f369 0300 	bfi	r3, r9, #0, #1
    c846:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    c84a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    c84e:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    c852:	f043 0301 	orr.w	r3, r3, #1
    c856:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    c85a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    c85e:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    c862:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    c866:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    c86a:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c86e:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c872:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c876:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    c87a:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c87e:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c882:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c886:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    c88a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    c88e:	4651      	mov	r1, sl
    c890:	4620      	mov	r0, r4
    c892:	f7ff fa27 	bl	bce4 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    c896:	4639      	mov	r1, r7
    c898:	4620      	mov	r0, r4
    c89a:	f7ff f995 	bl	bbc8 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    c89e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c8a2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    c8a6:	e748      	b.n	c73a <event_connection_prepare+0x9d2>
	else if (!conn->pause_tx || conn->refresh) {
    c8a8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c8ac:	f003 0348 	and.w	r3, r3, #72	; 0x48
    c8b0:	2b08      	cmp	r3, #8
    c8b2:	f000 80a2 	beq.w	c9fa <event_connection_prepare+0xc92>
		if (conn->llcp.encryption.error_code) {
    c8b6:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    c8ba:	f1b9 0f00 	cmp.w	r9, #0
    c8be:	d020      	beq.n	c902 <event_connection_prepare+0xb9a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c8c0:	7903      	ldrb	r3, [r0, #4]
    c8c2:	f043 0303 	orr.w	r3, r3, #3
    c8c6:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    c8c8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c8cc:	0698      	lsls	r0, r3, #26
    c8ce:	d512      	bpl.n	c8f6 <event_connection_prepare+0xb8e>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    c8d0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    c8d4:	0759      	lsls	r1, r3, #29
    c8d6:	d50e      	bpl.n	c8f6 <event_connection_prepare+0xb8e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c8d8:	2311      	movs	r3, #17
    c8da:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    c8dc:	2303      	movs	r3, #3
    c8de:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    c8e0:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    c8e4:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c8e6:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    c8e8:	797b      	ldrb	r3, [r7, #5]
    c8ea:	3301      	adds	r3, #1
    c8ec:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    c8ee:	2300      	movs	r3, #0
    c8f0:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    c8f4:	e7cf      	b.n	c896 <event_connection_prepare+0xb2e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    c8f6:	230d      	movs	r3, #13
    c8f8:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    c8fa:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c8fe:	2301      	movs	r3, #1
    c900:	e7f1      	b.n	c8e6 <event_connection_prepare+0xb7e>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c902:	4846      	ldr	r0, [pc, #280]	; (ca1c <event_connection_prepare+0xcb4>)
    c904:	f7fa fb45 	bl	6f92 <mem_acquire>
	if (!node_tx) {
    c908:	4682      	mov	sl, r0
    c90a:	2800      	cmp	r0, #0
    c90c:	f000 8300 	beq.w	cf10 <event_connection_prepare+0x11a8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c910:	7903      	ldrb	r3, [r0, #4]
    c912:	f043 0303 	orr.w	r3, r3, #3
    c916:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c918:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    c91c:	230d      	movs	r3, #13
    c91e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c920:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    c924:	f100 0308 	add.w	r3, r0, #8
    c928:	4619      	mov	r1, r3
    c92a:	2208      	movs	r2, #8
    c92c:	6868      	ldr	r0, [r5, #4]
    c92e:	930d      	str	r3, [sp, #52]	; 0x34
    c930:	f006 fd62 	bl	133f8 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    c934:	f10a 0310 	add.w	r3, sl, #16
    c938:	4619      	mov	r1, r3
    c93a:	465a      	mov	r2, fp
    c93c:	6868      	ldr	r0, [r5, #4]
    c93e:	930b      	str	r3, [sp, #44]	; 0x2c
    c940:	f006 fd5a 	bl	133f8 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    c944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c946:	2208      	movs	r2, #8
    c948:	4619      	mov	r1, r3
    c94a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    c94e:	f7f5 f955 	bl	1bfc <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    c952:	465a      	mov	r2, fp
    c954:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c956:	f504 708b 	add.w	r0, r4, #278	; 0x116
    c95a:	f7f5 f94f 	bl	1bfc <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    c95e:	4651      	mov	r1, sl
    c960:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c962:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    c966:	f7ff f92f 	bl	bbc8 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c96a:	4653      	mov	r3, sl
    c96c:	464a      	mov	r2, r9
    c96e:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c972:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c976:	f005 fb75 	bl	12064 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    c97a:	2210      	movs	r2, #16
    c97c:	4651      	mov	r1, sl
    c97e:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c982:	f7f5 f93b 	bl	1bfc <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c986:	2208      	movs	r2, #8
    c988:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c98c:	f204 1033 	addw	r0, r4, #307	; 0x133
    c990:	f7f5 f934 	bl	1bfc <memcpy>
			conn->ccm_rx.direction = 1;
    c994:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    c998:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    c99c:	f043 0301 	orr.w	r3, r3, #1
    c9a0:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    c9a4:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    c9a8:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    c9ac:	f369 0300 	bfi	r3, r9, #0, #1
    c9b0:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    c9b4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    c9b8:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    c9bc:	f043 0310 	orr.w	r3, r3, #16
    c9c0:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c9c4:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    c9c6:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c9ca:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    c9ce:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c9d2:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c9d6:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c9da:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    c9de:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c9e2:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c9e6:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c9ea:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c9ee:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c9f0:	2301      	movs	r3, #1
    c9f2:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c9f4:	2305      	movs	r3, #5
    c9f6:	71fb      	strb	r3, [r7, #7]
    c9f8:	e74d      	b.n	c896 <event_connection_prepare+0xb2e>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    c9fa:	4651      	mov	r1, sl
    c9fc:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    ca00:	f7ff f970 	bl	bce4 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    ca04:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    ca08:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    ca0c:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    ca10:	f369 03c3 	bfi	r3, r9, #3, #1
    ca14:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    ca18:	e73d      	b.n	c896 <event_connection_prepare+0xb2e>
    ca1a:	bf00      	nop
    ca1c:	20000a24 	.word	0x20000a24
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ca20:	48b0      	ldr	r0, [pc, #704]	; (cce4 <event_connection_prepare+0xf7c>)
    ca22:	f7fa fab6 	bl	6f92 <mem_acquire>
	if (node_tx) {
    ca26:	4607      	mov	r7, r0
    ca28:	2800      	cmp	r0, #0
    ca2a:	f43f ae86 	beq.w	c73a <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    ca2e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ca32:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    ca36:	4bac      	ldr	r3, [pc, #688]	; (cce8 <event_connection_prepare+0xf80>)
    ca38:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ca3c:	7903      	ldrb	r3, [r0, #4]
    ca3e:	f043 0303 	orr.w	r3, r3, #3
    ca42:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    ca44:	2309      	movs	r3, #9
    ca46:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    ca48:	f994 301d 	ldrsb.w	r3, [r4, #29]
    ca4c:	2b00      	cmp	r3, #0
    ca4e:	bfac      	ite	ge
    ca50:	2308      	movge	r3, #8
    ca52:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    ca54:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    ca56:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    ca58:	2100      	movs	r1, #0
    ca5a:	4410      	add	r0, r2
    ca5c:	f7f5 f8fa 	bl	1c54 <memset>
			conn->llcp_features & 0xFF;
    ca60:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    ca64:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    ca66:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    ca68:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    ca6a:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    ca6c:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    ca6e:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    ca70:	4620      	mov	r0, r4
    ca72:	f7ff f8a9 	bl	bbc8 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    ca76:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    ca7a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    ca7e:	e65c      	b.n	c73a <event_connection_prepare+0x9d2>
	if (conn->llcp_version.tx == 0) {
    ca80:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    ca84:	07da      	lsls	r2, r3, #31
    ca86:	d424      	bmi.n	cad2 <event_connection_prepare+0xd6a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ca88:	4896      	ldr	r0, [pc, #600]	; (cce4 <event_connection_prepare+0xf7c>)
    ca8a:	f7fa fa82 	bl	6f92 <mem_acquire>
		if (node_tx) {
    ca8e:	4601      	mov	r1, r0
    ca90:	2800      	cmp	r0, #0
    ca92:	f43f ae52 	beq.w	c73a <event_connection_prepare+0x9d2>
			conn->llcp_ack = conn->llcp_req;
    ca96:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ca9a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    ca9e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    caa2:	f043 0301 	orr.w	r3, r3, #1
    caa6:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    caaa:	7903      	ldrb	r3, [r0, #4]
    caac:	f043 0303 	orr.w	r3, r3, #3
    cab0:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    cab2:	2306      	movs	r3, #6
    cab4:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cab6:	230c      	movs	r3, #12
    cab8:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    caba:	2309      	movs	r3, #9
    cabc:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    cabe:	f06f 030e 	mvn.w	r3, #14
    cac2:	7243      	strb	r3, [r0, #9]
    cac4:	2305      	movs	r3, #5
    cac6:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    cac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cacc:	72c3      	strb	r3, [r0, #11]
    cace:	7303      	strb	r3, [r0, #12]
    cad0:	e7ce      	b.n	ca70 <event_connection_prepare+0xd08>
	} else if (conn->llcp_version.rx != 0) {
    cad2:	079b      	lsls	r3, r3, #30
    cad4:	d526      	bpl.n	cb24 <event_connection_prepare+0xdbc>
		conn->llcp_ack = conn->llcp_req;
    cad6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cada:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    cade:	2002      	movs	r0, #2
    cae0:	f7fd f86c 	bl	9bbc <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    cae4:	b920      	cbnz	r0, caf0 <event_connection_prepare+0xd88>
    cae6:	4b81      	ldr	r3, [pc, #516]	; (ccec <event_connection_prepare+0xf84>)
    cae8:	9301      	str	r3, [sp, #4]
    caea:	9300      	str	r3, [sp, #0]
    caec:	4b80      	ldr	r3, [pc, #512]	; (ccf0 <event_connection_prepare+0xf88>)
    caee:	e45d      	b.n	c3ac <event_connection_prepare+0x644>
		node_rx->hdr.handle = conn->handle;
    caf0:	8c23      	ldrh	r3, [r4, #32]
    caf2:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    caf4:	2301      	movs	r3, #1
    caf6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    caf8:	7a03      	ldrb	r3, [r0, #8]
    cafa:	f043 0303 	orr.w	r3, r3, #3
    cafe:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    cb00:	2306      	movs	r3, #6
    cb02:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    cb04:	230c      	movs	r3, #12
    cb06:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    cb08:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    cb0c:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    cb0e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    cb12:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    cb16:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    cb1a:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    cb1e:	f7fd feb7 	bl	a890 <packet_rx_enqueue>
    cb22:	e60a      	b.n	c73a <event_connection_prepare+0x9d2>
		LL_ASSERT(0);
    cb24:	4b71      	ldr	r3, [pc, #452]	; (ccec <event_connection_prepare+0xf84>)
    cb26:	9301      	str	r3, [sp, #4]
    cb28:	9300      	str	r3, [sp, #0]
    cb2a:	4b71      	ldr	r3, [pc, #452]	; (ccf0 <event_connection_prepare+0xf88>)
    cb2c:	f7ff bad2 	b.w	c0d4 <event_connection_prepare+0x36c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cb30:	486c      	ldr	r0, [pc, #432]	; (cce4 <event_connection_prepare+0xf7c>)
    cb32:	f7fa fa2e 	bl	6f92 <mem_acquire>
	if (node_tx) {
    cb36:	4601      	mov	r1, r0
    cb38:	2800      	cmp	r0, #0
    cb3a:	f43f adfe 	beq.w	c73a <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    cb3e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cb42:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cb46:	7903      	ldrb	r3, [r0, #4]
    cb48:	f043 0303 	orr.w	r3, r3, #3
    cb4c:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    cb4e:	2301      	movs	r3, #1
    cb50:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    cb52:	2312      	movs	r3, #18
    cb54:	71c3      	strb	r3, [r0, #7]
    cb56:	e78b      	b.n	ca70 <event_connection_prepare+0xd08>
	if (conn->llcp.phy_upd_ind.initiate) {
    cb58:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    cb5c:	07d7      	lsls	r7, r2, #31
    cb5e:	d551      	bpl.n	cc04 <event_connection_prepare+0xe9c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cb60:	4860      	ldr	r0, [pc, #384]	; (cce4 <event_connection_prepare+0xf7c>)
    cb62:	f7fa fa16 	bl	6f92 <mem_acquire>
		if (node_tx) {
    cb66:	4607      	mov	r7, r0
    cb68:	2800      	cmp	r0, #0
    cb6a:	f43f ade6 	beq.w	c73a <event_connection_prepare+0x9d2>
			conn->llcp.phy_upd_ind.initiate = 0;
    cb6e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cb72:	f36f 0300 	bfc	r3, #0, #1
    cb76:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    cb7a:	b2db      	uxtb	r3, r3
    cb7c:	f3c3 0982 	ubfx	r9, r3, #2, #3
    cb80:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    cb84:	d138      	bne.n	cbf8 <event_connection_prepare+0xe90>
				conn->llcp_ack = conn->llcp_req;
    cb86:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    cb8a:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    cb8e:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    cb90:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    cb94:	d51a      	bpl.n	cbcc <event_connection_prepare+0xe64>
					node_rx = packet_rx_reserve_get(2);
    cb96:	2002      	movs	r0, #2
    cb98:	f7fd f810 	bl	9bbc <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    cb9c:	b920      	cbnz	r0, cba8 <event_connection_prepare+0xe40>
		LL_ASSERT(node_rx);
    cb9e:	4b53      	ldr	r3, [pc, #332]	; (ccec <event_connection_prepare+0xf84>)
    cba0:	9301      	str	r3, [sp, #4]
    cba2:	9300      	str	r3, [sp, #0]
    cba4:	4b53      	ldr	r3, [pc, #332]	; (ccf4 <event_connection_prepare+0xf8c>)
    cba6:	e401      	b.n	c3ac <event_connection_prepare+0x644>
					node_rx->hdr.handle = conn->handle;
    cba8:	8c23      	ldrh	r3, [r4, #32]
    cbaa:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    cbac:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    cbb0:	230c      	movs	r3, #12
    cbb2:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    cbb4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    cbb8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    cbbc:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    cbbe:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    cbc2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cbc6:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    cbc8:	f7fd fe62 	bl	a890 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cbcc:	793b      	ldrb	r3, [r7, #4]
    cbce:	f043 0303 	orr.w	r3, r3, #3
    cbd2:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    cbd4:	2305      	movs	r3, #5
    cbd6:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cbd8:	2318      	movs	r3, #24
    cbda:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    cbdc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cbe0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    cbe4:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    cbe6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cbea:	f3c3 1342 	ubfx	r3, r3, #5, #3
    cbee:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    cbf0:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    cbf4:	817b      	strh	r3, [r7, #10]
    cbf6:	e59c      	b.n	c732 <event_connection_prepare+0x9ca>
								 conn->latency +
    cbf8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    cbfa:	3306      	adds	r3, #6
    cbfc:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    cbfe:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    cc02:	e7e3      	b.n	cbcc <event_connection_prepare+0xe64>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    cc04:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    cc08:	1af3      	subs	r3, r6, r3
    cc0a:	0419      	lsls	r1, r3, #16
    cc0c:	f53f ad95 	bmi.w	c73a <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    cc10:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cc14:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    cc18:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    cc1c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    cc20:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    cc24:	bf18      	it	ne
    cc26:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    cc2a:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    cc2e:	bf1c      	itt	ne
    cc30:	f367 03c5 	bfine	r3, r7, #3, #3
    cc34:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    cc38:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    cc3c:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    cc40:	d008      	beq.n	cc54 <event_connection_prepare+0xeec>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    cc42:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cc46:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    cc4a:	095b      	lsrs	r3, r3, #5
    cc4c:	f363 0702 	bfi	r7, r3, #0, #3
    cc50:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    cc54:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    cc58:	461f      	mov	r7, r3
    cc5a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cc5e:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    cc62:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    cc64:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    cc68:	d40b      	bmi.n	cc82 <event_connection_prepare+0xf1a>
    cc6a:	b2fb      	uxtb	r3, r7
    cc6c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    cc70:	4283      	cmp	r3, r0
    cc72:	d106      	bne.n	cc82 <event_connection_prepare+0xf1a>
		    (conn->phy_rx == old_rx)) {
    cc74:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    cc78:	f003 0307 	and.w	r3, r3, #7
    cc7c:	428b      	cmp	r3, r1
    cc7e:	f43f ad5c 	beq.w	c73a <event_connection_prepare+0x9d2>
		node_rx = packet_rx_reserve_get(2);
    cc82:	2002      	movs	r0, #2
    cc84:	f7fc ff9a 	bl	9bbc <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    cc88:	2800      	cmp	r0, #0
    cc8a:	d088      	beq.n	cb9e <event_connection_prepare+0xe36>
		node_rx->hdr.handle = conn->handle;
    cc8c:	8c23      	ldrh	r3, [r4, #32]
    cc8e:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    cc90:	230c      	movs	r3, #12
    cc92:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    cc94:	2300      	movs	r3, #0
    cc96:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    cc98:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    cc9c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    cca0:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    cca2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    cca6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ccaa:	7343      	strb	r3, [r0, #13]
    ccac:	e737      	b.n	cb1e <event_connection_prepare+0xdb6>
			LL_ASSERT(0);
    ccae:	4b0f      	ldr	r3, [pc, #60]	; (ccec <event_connection_prepare+0xf84>)
    ccb0:	9301      	str	r3, [sp, #4]
    ccb2:	9300      	str	r3, [sp, #0]
    ccb4:	4b10      	ldr	r3, [pc, #64]	; (ccf8 <event_connection_prepare+0xf90>)
    ccb6:	f7ff ba0d 	b.w	c0d4 <event_connection_prepare+0x36c>
		free_count_rx = packet_rx_acquired_count_get() +
    ccba:	f7fc ff69 	bl	9b90 <packet_rx_acquired_count_get>
    ccbe:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    ccc0:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    ccc4:	f7fa f994 	bl	6ff0 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    ccc8:	4438      	add	r0, r7
    ccca:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    cccc:	28ff      	cmp	r0, #255	; 0xff
    ccce:	d91d      	bls.n	cd0c <event_connection_prepare+0xfa4>
		LL_ASSERT(free_count_rx <= 0xFF);
    ccd0:	4b06      	ldr	r3, [pc, #24]	; (ccec <event_connection_prepare+0xf84>)
    ccd2:	9301      	str	r3, [sp, #4]
    ccd4:	9300      	str	r3, [sp, #0]
    ccd6:	4a09      	ldr	r2, [pc, #36]	; (ccfc <event_connection_prepare+0xf94>)
    ccd8:	4b09      	ldr	r3, [pc, #36]	; (cd00 <event_connection_prepare+0xf98>)
    ccda:	490a      	ldr	r1, [pc, #40]	; (cd04 <event_connection_prepare+0xf9c>)
    ccdc:	480a      	ldr	r0, [pc, #40]	; (cd08 <event_connection_prepare+0xfa0>)
    ccde:	f7ff b853 	b.w	bd88 <event_connection_prepare+0x20>
    cce2:	bf00      	nop
    cce4:	20000a24 	.word	0x20000a24
    cce8:	000141ff 	.word	0x000141ff
    ccec:	0001496d 	.word	0x0001496d
    ccf0:	00016e2d 	.word	0x00016e2d
    ccf4:	00016e89 	.word	0x00016e89
    ccf8:	00016ea0 	.word	0x00016ea0
    ccfc:	000156bc 	.word	0x000156bc
    cd00:	00016e67 	.word	0x00016e67
    cd04:	0001570b 	.word	0x0001570b
    cd08:	0001702f 	.word	0x0001702f
		if (_radio.packet_rx_data_count != free_count_rx) {
    cd0c:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    cd10:	4283      	cmp	r3, r0
    cd12:	d129      	bne.n	cd68 <event_connection_prepare+0x1000>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cd14:	4881      	ldr	r0, [pc, #516]	; (cf1c <event_connection_prepare+0x11b4>)
    cd16:	f7fa f93c 	bl	6f92 <mem_acquire>
		if (!node_tx) {
    cd1a:	4601      	mov	r1, r0
    cd1c:	b320      	cbz	r0, cd68 <event_connection_prepare+0x1000>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    cd1e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    cd22:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    cd26:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    cd2a:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    cd2c:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    cd2e:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    cd30:	f365 0301 	bfi	r3, r5, #0, #2
    cd34:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cd38:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    cd3a:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cd3c:	f043 0303 	orr.w	r3, r3, #3
    cd40:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    cd42:	2309      	movs	r3, #9
    cd44:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    cd46:	2314      	movs	r3, #20
    cd48:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    cd4a:	231b      	movs	r3, #27
    cd4c:	720b      	strb	r3, [r1, #8]
    cd4e:	2300      	movs	r3, #0
    cd50:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    cd52:	2348      	movs	r3, #72	; 0x48
    cd54:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    cd56:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    cd58:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    cd5a:	4620      	mov	r0, r4
    cd5c:	f7fe ff34 	bl	bbc8 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    cd60:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    cd64:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    cd68:	f894 3020 	ldrb.w	r3, [r4, #32]
    cd6c:	f994 501d 	ldrsb.w	r5, [r4, #29]
    cd70:	486b      	ldr	r0, [pc, #428]	; (cf20 <event_connection_prepare+0x11b8>)
    cd72:	496c      	ldr	r1, [pc, #432]	; (cf24 <event_connection_prepare+0x11bc>)
    cd74:	68a2      	ldr	r2, [r4, #8]
    cd76:	9403      	str	r4, [sp, #12]
    cd78:	3307      	adds	r3, #7
    cd7a:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    cd7e:	bf38      	it	cc
    cd80:	4601      	movcc	r1, r0
    cd82:	b2db      	uxtb	r3, r3
    cd84:	e88d 000c 	stmia.w	sp, {r2, r3}
    cd88:	9102      	str	r1, [sp, #8]
    cd8a:	1d23      	adds	r3, r4, #4
    cd8c:	4622      	mov	r2, r4
    cd8e:	990c      	ldr	r1, [sp, #48]	; 0x30
    cd90:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    cd92:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    cd94:	f7fe fd90 	bl	b8b8 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    cd98:	8466      	strh	r6, [r4, #34]	; 0x22
}
    cd9a:	b00f      	add	sp, #60	; 0x3c
    cd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    cda0:	f7fc fef6 	bl	9b90 <packet_rx_acquired_count_get>
    cda4:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    cda6:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    cdaa:	f7fa f921 	bl	6ff0 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    cdae:	4438      	add	r0, r7
    cdb0:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    cdb2:	28ff      	cmp	r0, #255	; 0xff
    cdb4:	d88c      	bhi.n	ccd0 <event_connection_prepare+0xf68>
		if (_radio.packet_rx_data_count != free_count_rx) {
    cdb6:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    cdba:	4283      	cmp	r3, r0
    cdbc:	d005      	beq.n	cdca <event_connection_prepare+0x1062>
		LL_ASSERT(0);
    cdbe:	4b5a      	ldr	r3, [pc, #360]	; (cf28 <event_connection_prepare+0x11c0>)
    cdc0:	9301      	str	r3, [sp, #4]
    cdc2:	9300      	str	r3, [sp, #0]
    cdc4:	4b59      	ldr	r3, [pc, #356]	; (cf2c <event_connection_prepare+0x11c4>)
    cdc6:	f7ff b985 	b.w	c0d4 <event_connection_prepare+0x36c>
		conn->llcp_length.ack = conn->llcp_length.req;
    cdca:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    cdce:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    cdd2:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    cdd6:	2100      	movs	r1, #0
    cdd8:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    cddc:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    cde0:	f361 02c3 	bfi	r2, r1, #3, #1
    cde4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    cde8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    cdec:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    cdee:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    cdf2:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    cdf4:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    cdf8:	f7fa f8fa 	bl	6ff0 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    cdfc:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    ce00:	b10b      	cbz	r3, ce06 <event_connection_prepare+0x109e>
			free_count_conn++;
    ce02:	3001      	adds	r0, #1
    ce04:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    ce06:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    ce0a:	b10b      	cbz	r3, ce10 <event_connection_prepare+0x10a8>
			free_count_conn++;
    ce0c:	3001      	adds	r0, #1
    ce0e:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    ce10:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    ce12:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    ce16:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    ce18:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    ce1a:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    ce1e:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    ce20:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    ce22:	d052      	beq.n	ceca <event_connection_prepare+0x1162>
    ce24:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    ce28:	42bb      	cmp	r3, r7
    ce2a:	d34e      	bcc.n	ceca <event_connection_prepare+0x1162>
		node_rx = packet_rx_reserve_get(2);
    ce2c:	2002      	movs	r0, #2
    ce2e:	f7fc fec5 	bl	9bbc <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    ce32:	2800      	cmp	r0, #0
    ce34:	d155      	bne.n	cee2 <event_connection_prepare+0x117a>
    ce36:	4b3c      	ldr	r3, [pc, #240]	; (cf28 <event_connection_prepare+0x11c0>)
    ce38:	9301      	str	r3, [sp, #4]
    ce3a:	9300      	str	r3, [sp, #0]
    ce3c:	4b3b      	ldr	r3, [pc, #236]	; (cf2c <event_connection_prepare+0x11c4>)
    ce3e:	f7ff bab5 	b.w	c3ac <event_connection_prepare+0x644>
				if (_radio.packet_rx_acquire == 0) {
    ce42:	b90b      	cbnz	r3, ce48 <event_connection_prepare+0x10e0>
						_radio.packet_rx_count - 1;
    ce44:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    ce48:	3b01      	subs	r3, #1
    ce4a:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    ce4e:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    ce52:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    ce56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ce5a:	4649      	mov	r1, r9
    ce5c:	6818      	ldr	r0, [r3, #0]
    ce5e:	f7fa f8b2 	bl	6fc6 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    ce62:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    ce66:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    ce6a:	3a01      	subs	r2, #1
    ce6c:	4293      	cmp	r3, r2
    ce6e:	db08      	blt.n	ce82 <event_connection_prepare+0x111a>
    ce70:	4b2d      	ldr	r3, [pc, #180]	; (cf28 <event_connection_prepare+0x11c0>)
    ce72:	9301      	str	r3, [sp, #4]
    ce74:	9300      	str	r3, [sp, #0]
    ce76:	4a2e      	ldr	r2, [pc, #184]	; (cf30 <event_connection_prepare+0x11c8>)
    ce78:	4b2c      	ldr	r3, [pc, #176]	; (cf2c <event_connection_prepare+0x11c4>)
    ce7a:	492e      	ldr	r1, [pc, #184]	; (cf34 <event_connection_prepare+0x11cc>)
    ce7c:	482e      	ldr	r0, [pc, #184]	; (cf38 <event_connection_prepare+0x11d0>)
    ce7e:	f7fe bf83 	b.w	bd88 <event_connection_prepare+0x20>
				_radio.link_rx_data_quota++;
    ce82:	3301      	adds	r3, #1
    ce84:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    ce88:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    ce8c:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    ce90:	4293      	cmp	r3, r2
    ce92:	d1d6      	bne.n	ce42 <event_connection_prepare+0x10da>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    ce94:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    ce96:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    ce9a:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    ce9c:	bf9a      	itte	ls
    ce9e:	2334      	movls	r3, #52	; 0x34
    cea0:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    cea4:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    cea8:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    ceac:	fbb2 f2f1 	udiv	r2, r2, r1
    ceb0:	b2d2      	uxtb	r2, r2
    ceb2:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    ceb6:	b95a      	cbnz	r2, ced0 <event_connection_prepare+0x1168>
    ceb8:	4b1b      	ldr	r3, [pc, #108]	; (cf28 <event_connection_prepare+0x11c0>)
    ceba:	9301      	str	r3, [sp, #4]
    cebc:	9300      	str	r3, [sp, #0]
    cebe:	4a1c      	ldr	r2, [pc, #112]	; (cf30 <event_connection_prepare+0x11c8>)
    cec0:	4b1a      	ldr	r3, [pc, #104]	; (cf2c <event_connection_prepare+0x11c4>)
    cec2:	491c      	ldr	r1, [pc, #112]	; (cf34 <event_connection_prepare+0x11cc>)
    cec4:	481d      	ldr	r0, [pc, #116]	; (cf3c <event_connection_prepare+0x11d4>)
    cec6:	f7fe bf5f 	b.w	bd88 <event_connection_prepare+0x20>
				mem_release(node_rx->hdr.onion.link,
    ceca:	f8df 9078 	ldr.w	r9, [pc, #120]	; cf44 <event_connection_prepare+0x11dc>
    cece:	e7db      	b.n	ce88 <event_connection_prepare+0x1120>
			mem_init(_radio.pkt_rx_data_pool,
    ced0:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    ced4:	4b1a      	ldr	r3, [pc, #104]	; (cf40 <event_connection_prepare+0x11d8>)
    ced6:	f7fa f835 	bl	6f44 <mem_init>
			packet_rx_allocate(4);
    ceda:	2004      	movs	r0, #4
    cedc:	f7fc fee6 	bl	9cac <packet_rx_allocate>
    cee0:	e7a4      	b.n	ce2c <event_connection_prepare+0x10c4>
		node_rx->hdr.handle = conn->handle;
    cee2:	8c23      	ldrh	r3, [r4, #32]
    cee4:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    cee6:	2301      	movs	r3, #1
    cee8:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    ceea:	7a03      	ldrb	r3, [r0, #8]
    ceec:	f043 0303 	orr.w	r3, r3, #3
    cef0:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    cef2:	2309      	movs	r3, #9
    cef4:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    cef6:	2315      	movs	r3, #21
    cef8:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    cefa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    cefc:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    cefe:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    cf00:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    cf02:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    cf04:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    cf06:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    cf08:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    cf0a:	f7fd fcc1 	bl	a890 <packet_rx_enqueue>
    cf0e:	e72b      	b.n	cd68 <event_connection_prepare+0x1000>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    cf10:	4902      	ldr	r1, [pc, #8]	; (cf1c <event_connection_prepare+0x11b4>)
    cf12:	4638      	mov	r0, r7
    cf14:	f7fa f857 	bl	6fc6 <mem_release>
    cf18:	e40f      	b.n	c73a <event_connection_prepare+0x9d2>
    cf1a:	bf00      	nop
    cf1c:	20000a24 	.word	0x20000a24
    cf20:	0000d275 	.word	0x0000d275
    cf24:	0000cf8d 	.word	0x0000cf8d
    cf28:	0001496d 	.word	0x0001496d
    cf2c:	00016e67 	.word	0x00016e67
    cf30:	000156bc 	.word	0x000156bc
    cf34:	0001570b 	.word	0x0001570b
    cf38:	00017066 	.word	0x00017066
    cf3c:	000170c0 	.word	0x000170c0
    cf40:	200009f8 	.word	0x200009f8
    cf44:	20000a10 	.word	0x20000a10

0000cf48 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    cf48:	f7fe bf0e 	b.w	bd68 <event_connection_prepare>

0000cf4c <event_slave_prepare>:
    cf4c:	f7fe bf0c 	b.w	bd68 <event_connection_prepare>

0000cf50 <connection_configure>:
{
    cf50:	b510      	push	{r4, lr}
    cf52:	4604      	mov	r4, r0
	radio_reset();
    cf54:	f005 f962 	bl	1221c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    cf58:	2000      	movs	r0, #0
    cf5a:	f005 f989 	bl	12270 <radio_tx_power_set>
	radio_isr_set(isr);
    cf5e:	480a      	ldr	r0, [pc, #40]	; (cf88 <connection_configure+0x38>)
    cf60:	f005 f926 	bl	121b0 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    cf64:	f104 0010 	add.w	r0, r4, #16
    cf68:	f005 f9a0 	bl	122ac <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    cf6c:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    cf6e:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    cf70:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    cf72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    cf76:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    cf78:	f240 605b 	movw	r0, #1627	; 0x65b
    cf7c:	4319      	orrs	r1, r3
}
    cf7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    cf82:	f005 ba3b 	b.w	123fc <radio_crc_configure>
    cf86:	bf00      	nop
    cf88:	0000e639 	.word	0x0000e639

0000cf8c <event_slave>:
{
    cf8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cf90:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    cf92:	4b71      	ldr	r3, [pc, #452]	; (d158 <event_slave+0x1cc>)
    cf94:	7cda      	ldrb	r2, [r3, #19]
{
    cf96:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    cf98:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    cf9c:	461d      	mov	r5, r3
    cf9e:	b172      	cbz	r2, cfbe <event_slave+0x32>
    cfa0:	4b6e      	ldr	r3, [pc, #440]	; (d15c <event_slave+0x1d0>)
    cfa2:	9301      	str	r3, [sp, #4]
    cfa4:	9300      	str	r3, [sp, #0]
    cfa6:	4a6e      	ldr	r2, [pc, #440]	; (d160 <event_slave+0x1d4>)
    cfa8:	4b6e      	ldr	r3, [pc, #440]	; (d164 <event_slave+0x1d8>)
    cfaa:	496f      	ldr	r1, [pc, #444]	; (d168 <event_slave+0x1dc>)
    cfac:	486f      	ldr	r0, [pc, #444]	; (d16c <event_slave+0x1e0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    cfae:	f7f3 ffed 	bl	f8c <printk>
    cfb2:	4040      	eors	r0, r0
    cfb4:	f380 8811 	msr	BASEPRI, r0
    cfb8:	f04f 0004 	mov.w	r0, #4
    cfbc:	df02      	svc	2
    cfbe:	7c1b      	ldrb	r3, [r3, #16]
    cfc0:	8c22      	ldrh	r2, [r4, #32]
    cfc2:	b2db      	uxtb	r3, r3
    cfc4:	3207      	adds	r2, #7
    cfc6:	4293      	cmp	r3, r2
    cfc8:	d007      	beq.n	cfda <event_slave+0x4e>
    cfca:	4b64      	ldr	r3, [pc, #400]	; (d15c <event_slave+0x1d0>)
    cfcc:	9301      	str	r3, [sp, #4]
    cfce:	9300      	str	r3, [sp, #0]
    cfd0:	4a63      	ldr	r2, [pc, #396]	; (d160 <event_slave+0x1d4>)
    cfd2:	4b64      	ldr	r3, [pc, #400]	; (d164 <event_slave+0x1d8>)
    cfd4:	4964      	ldr	r1, [pc, #400]	; (d168 <event_slave+0x1dc>)
    cfd6:	4866      	ldr	r0, [pc, #408]	; (d170 <event_slave+0x1e4>)
    cfd8:	e7e9      	b.n	cfae <event_slave+0x22>
	_radio.packet_counter = 0;
    cfda:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    cfde:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    cfe2:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    cfe4:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    cfe6:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    cfe8:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    cfea:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    cfec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    cfee:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    cff2:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    cff4:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    cff6:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    cff8:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    cffa:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    cffc:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    cffe:	f7ff ffa7 	bl	cf50 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    d002:	2096      	movs	r0, #150	; 0x96
    d004:	f005 fab4 	bl	12570 <radio_tmr_tifs_set>
				     conn->phy_flags);
    d008:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    d00c:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d010:	09d3      	lsrs	r3, r2, #7
    d012:	4631      	mov	r1, r6
    d014:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    d018:	f000 0007 	and.w	r0, r0, #7
    d01c:	f005 fa18 	bl	12450 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    d020:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    d024:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    d028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    d02c:	4620      	mov	r0, r4
    d02e:	3108      	adds	r1, #8
    d030:	f7fd f922 	bl	a278 <rx_packet_set>
	if (conn->data_chan_sel) {
    d034:	7f63      	ldrb	r3, [r4, #29]
    d036:	f013 0f40 	tst.w	r3, #64	; 0x40
    d03a:	f104 0217 	add.w	r2, r4, #23
    d03e:	d05a      	beq.n	d0f6 <event_slave+0x16a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d040:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    d042:	8be1      	ldrh	r1, [r4, #30]
    d044:	3801      	subs	r0, #1
    d046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d04a:	b280      	uxth	r0, r0
    d04c:	f7fe fd78 	bl	bb40 <chan_sel_2>
	chan_set(data_chan_use);
    d050:	f7fe f84c 	bl	b0ec <chan_set>
	conn->slave.window_widening_event_us +=
    d054:	6e23      	ldr	r3, [r4, #96]	; 0x60
    d056:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    d058:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    d05a:	2200      	movs	r2, #0
    d05c:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    d05e:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    d060:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    d062:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    d064:	bf88      	it	hi
    d066:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    d068:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d06a:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    d06c:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    d06e:	4413      	add	r3, r2
    d070:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    d072:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    d074:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    d076:	f107 0109 	add.w	r1, r7, #9
    d07a:	4630      	mov	r0, r6
    d07c:	f005 fa84 	bl	12588 <radio_tmr_start>
    d080:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    d082:	f005 fb1d 	bl	126c0 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    d086:	4630      	mov	r0, r6
    d088:	f005 fb3c 	bl	12704 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d08c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    d08e:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d090:	f103 0650 	add.w	r6, r3, #80	; 0x50
    d094:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    d098:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d09c:	2101      	movs	r1, #1
    d09e:	f000 0007 	and.w	r0, r0, #7
    d0a2:	f005 f95c 	bl	1235e <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d0a6:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    d0a8:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    d0aa:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d0ae:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    d0b2:	2802      	cmp	r0, #2
    d0b4:	d03f      	beq.n	d136 <event_slave+0x1aa>
		return 40;
    d0b6:	2804      	cmp	r0, #4
    d0b8:	bf0c      	ite	eq
    d0ba:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    d0be:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    d0c0:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    d0c2:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    d0c4:	f005 f94d 	bl	12362 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    d0c8:	4430      	add	r0, r6
    d0ca:	f005 fadb 	bl	12684 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d0ce:	f894 1020 	ldrb.w	r1, [r4, #32]
    d0d2:	3107      	adds	r1, #7
    d0d4:	463a      	mov	r2, r7
    d0d6:	b2c9      	uxtb	r1, r1
    d0d8:	4620      	mov	r0, r4
    d0da:	f7fe fab9 	bl	b650 <preempt_calc>
    d0de:	4603      	mov	r3, r0
    d0e0:	b358      	cbz	r0, d13a <event_slave+0x1ae>
		_radio.state = STATE_STOP;
    d0e2:	2304      	movs	r3, #4
    d0e4:	752b      	strb	r3, [r5, #20]
		radio_disable();
    d0e6:	f005 f94d 	bl	12384 <radio_disable>
	packet_tx_enqueue(2);
    d0ea:	2002      	movs	r0, #2
}
    d0ec:	b002      	add	sp, #8
    d0ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    d0f2:	f7fd bf11 	b.w	af18 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d0f6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    d0f8:	7fa6      	ldrb	r6, [r4, #30]
    d0fa:	fb01 6606 	mla	r6, r1, r6, r6
    d0fe:	7fe1      	ldrb	r1, [r4, #31]
    d100:	2025      	movs	r0, #37	; 0x25
    d102:	440e      	add	r6, r1
    d104:	fb96 f1f0 	sdiv	r1, r6, r0
    d108:	fb00 6611 	mls	r6, r0, r1, r6
    d10c:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d10e:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    d110:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d112:	5c51      	ldrb	r1, [r2, r1]
    d114:	f006 0607 	and.w	r6, r6, #7
    d118:	fa41 f606 	asr.w	r6, r1, r6
    d11c:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    d11e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d122:	d495      	bmi.n	d050 <event_slave+0xc4>
		chan_index = chan_next % chan_count;
    d124:	fbb0 f1f3 	udiv	r1, r0, r3
    d128:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    d12c:	b2c9      	uxtb	r1, r1
    d12e:	4610      	mov	r0, r2
    d130:	f7fc fd12 	bl	9b58 <chan_sel_remap>
    d134:	e78c      	b.n	d050 <event_slave+0xc4>
		return 24;
    d136:	2318      	movs	r3, #24
    d138:	e7c2      	b.n	d0c0 <event_slave+0x134>
		ticker_status =
    d13a:	4a0e      	ldr	r2, [pc, #56]	; (d174 <event_slave+0x1e8>)
    d13c:	4601      	mov	r1, r0
    d13e:	f7fa fecd 	bl	7edc <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d142:	f030 0302 	bics.w	r3, r0, #2
    d146:	d0d0      	beq.n	d0ea <event_slave+0x15e>
    d148:	4b04      	ldr	r3, [pc, #16]	; (d15c <event_slave+0x1d0>)
    d14a:	9301      	str	r3, [sp, #4]
    d14c:	9300      	str	r3, [sp, #0]
    d14e:	4a04      	ldr	r2, [pc, #16]	; (d160 <event_slave+0x1d4>)
    d150:	4b04      	ldr	r3, [pc, #16]	; (d164 <event_slave+0x1d8>)
    d152:	4905      	ldr	r1, [pc, #20]	; (d168 <event_slave+0x1dc>)
    d154:	4808      	ldr	r0, [pc, #32]	; (d178 <event_slave+0x1ec>)
    d156:	e72a      	b.n	cfae <event_slave+0x22>
    d158:	200008c8 	.word	0x200008c8
    d15c:	0001496d 	.word	0x0001496d
    d160:	000156bc 	.word	0x000156bc
    d164:	00016eb9 	.word	0x00016eb9
    d168:	0001570b 	.word	0x0001570b
    d16c:	000170fd 	.word	0x000170fd
    d170:	000171b0 	.word	0x000171b0
    d174:	0000ac8d 	.word	0x0000ac8d
    d178:	00016fe1 	.word	0x00016fe1

0000d17c <prepare_pdu_data_tx>:
	    conn->empty ||
    d17c:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    d180:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    d184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d186:	4604      	mov	r4, r0
    d188:	460e      	mov	r6, r1
	if (/* empty packet */
    d18a:	d109      	bne.n	d1a0 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    d18c:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    d190:	b131      	cbz	r1, d1a0 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    d192:	f01c 0f08 	tst.w	ip, #8
    d196:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    d19a:	d022      	beq.n	d1e2 <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    d19c:	4571      	cmp	r1, lr
    d19e:	d020      	beq.n	d1e2 <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    d1a0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d1a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d1a8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    d1ac:	f005 f93c 	bl	12428 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d1b0:	7803      	ldrb	r3, [r0, #0]
    d1b2:	2201      	movs	r2, #1
    d1b4:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    d1b8:	2200      	movs	r2, #0
    d1ba:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    d1bc:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d1c0:	7003      	strb	r3, [r0, #0]
    d1c2:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    d1c4:	b152      	cbz	r2, d1dc <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    d1c6:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    d1ca:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    d1cc:	7803      	ldrb	r3, [r0, #0]
    d1ce:	f36f 1347 	bfc	r3, #5, #3
    d1d2:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    d1d4:	2300      	movs	r3, #0
    d1d6:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    d1d8:	6030      	str	r0, [r6, #0]
    d1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    d1dc:	f362 1304 	bfi	r3, r2, #4, #1
    d1e0:	e7f3      	b.n	d1ca <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    d1e2:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    d1e6:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    d1ea:	1d0d      	adds	r5, r1, #4
    d1ec:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    d1ee:	b913      	cbnz	r3, d1f6 <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    d1f0:	7843      	ldrb	r3, [r0, #1]
    d1f2:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    d1f6:	b122      	cbz	r2, d202 <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d1f8:	5cab      	ldrb	r3, [r5, r2]
    d1fa:	2701      	movs	r7, #1
    d1fc:	f367 0301 	bfi	r3, r7, #0, #2
    d200:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    d202:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    d206:	1abf      	subs	r7, r7, r2
    d208:	b2ff      	uxtb	r7, r7
    d20a:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    d20c:	5cab      	ldrb	r3, [r5, r2]
    d20e:	f36f 1304 	bfc	r3, #4, #1
    d212:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    d214:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    d218:	f003 0307 	and.w	r3, r3, #7
    d21c:	2b02      	cmp	r3, #2
    d21e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    d220:	bf15      	itete	ne
    d222:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    d224:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    d226:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    d228:	3b0b      	subeq	r3, #11
    d22a:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    d22c:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    d230:	bf18      	it	ne
    d232:	3b04      	subne	r3, #4
    d234:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    d238:	bf18      	it	ne
    d23a:	b29b      	uxthne	r3, r3
    d23c:	4563      	cmp	r3, ip
    d23e:	bf28      	it	cs
    d240:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    d242:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    d244:	bf81      	itttt	hi
    d246:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    d248:	5cab      	ldrbhi	r3, [r5, r2]
    d24a:	f043 0310 	orrhi.w	r3, r3, #16
    d24e:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    d250:	680b      	ldr	r3, [r1, #0]
    d252:	b11b      	cbz	r3, d25c <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    d254:	5cab      	ldrb	r3, [r5, r2]
    d256:	f043 0310 	orr.w	r3, r3, #16
    d25a:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    d25c:	f1be 0f00 	cmp.w	lr, #0
    d260:	d1b4      	bne.n	d1cc <prepare_pdu_data_tx+0x50>
    d262:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    d266:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    d268:	bf1c      	itt	ne
    d26a:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    d26e:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    d272:	e7ab      	b.n	d1cc <prepare_pdu_data_tx+0x50>

0000d274 <event_master>:
{
    d274:	b5f0      	push	{r4, r5, r6, r7, lr}
    d276:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    d278:	4b56      	ldr	r3, [pc, #344]	; (d3d4 <event_master+0x160>)
    d27a:	7cd9      	ldrb	r1, [r3, #19]
{
    d27c:	b085      	sub	sp, #20
    d27e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    d280:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    d284:	461d      	mov	r5, r3
    d286:	b171      	cbz	r1, d2a6 <event_master+0x32>
    d288:	4b53      	ldr	r3, [pc, #332]	; (d3d8 <event_master+0x164>)
    d28a:	9301      	str	r3, [sp, #4]
    d28c:	9300      	str	r3, [sp, #0]
    d28e:	4a53      	ldr	r2, [pc, #332]	; (d3dc <event_master+0x168>)
    d290:	4b53      	ldr	r3, [pc, #332]	; (d3e0 <event_master+0x16c>)
    d292:	4954      	ldr	r1, [pc, #336]	; (d3e4 <event_master+0x170>)
    d294:	4854      	ldr	r0, [pc, #336]	; (d3e8 <event_master+0x174>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    d296:	f7f3 fe79 	bl	f8c <printk>
    d29a:	4040      	eors	r0, r0
    d29c:	f380 8811 	msr	BASEPRI, r0
    d2a0:	f04f 0004 	mov.w	r0, #4
    d2a4:	df02      	svc	2
    d2a6:	7c1b      	ldrb	r3, [r3, #16]
    d2a8:	8c21      	ldrh	r1, [r4, #32]
    d2aa:	b2db      	uxtb	r3, r3
    d2ac:	3107      	adds	r1, #7
    d2ae:	428b      	cmp	r3, r1
    d2b0:	d007      	beq.n	d2c2 <event_master+0x4e>
    d2b2:	4b49      	ldr	r3, [pc, #292]	; (d3d8 <event_master+0x164>)
    d2b4:	9301      	str	r3, [sp, #4]
    d2b6:	9300      	str	r3, [sp, #0]
    d2b8:	4a48      	ldr	r2, [pc, #288]	; (d3dc <event_master+0x168>)
    d2ba:	4b49      	ldr	r3, [pc, #292]	; (d3e0 <event_master+0x16c>)
    d2bc:	4949      	ldr	r1, [pc, #292]	; (d3e4 <event_master+0x170>)
    d2be:	484b      	ldr	r0, [pc, #300]	; (d3ec <event_master+0x178>)
    d2c0:	e7e9      	b.n	d296 <event_master+0x22>
	_radio.packet_counter = 0;
    d2c2:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    d2c6:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    d2ca:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    d2cc:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    d2ce:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    d2d0:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    d2d2:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    d2d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    d2d6:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    d2da:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    d2dc:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    d2de:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    d2e0:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    d2e2:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    d2e4:	f7fd fe18 	bl	af18 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    d2e8:	a903      	add	r1, sp, #12
    d2ea:	4620      	mov	r0, r4
    d2ec:	f7ff ff46 	bl	d17c <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    d2f0:	9903      	ldr	r1, [sp, #12]
    d2f2:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    d2f6:	780b      	ldrb	r3, [r1, #0]
    d2f8:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    d2fc:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d300:	f362 0382 	bfi	r3, r2, #2, #1
    d304:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    d306:	4620      	mov	r0, r4
    d308:	f7ff fe22 	bl	cf50 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    d30c:	2096      	movs	r0, #150	; 0x96
    d30e:	f005 f92f 	bl	12570 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    d312:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d316:	f000 0007 	and.w	r0, r0, #7
    d31a:	f005 f88d 	bl	12438 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    d31e:	9903      	ldr	r1, [sp, #12]
    d320:	4620      	mov	r0, r4
    d322:	f7fc ffd5 	bl	a2d0 <tx_packet_set>
	if (conn->data_chan_sel) {
    d326:	7f63      	ldrb	r3, [r4, #29]
    d328:	f013 0f40 	tst.w	r3, #64	; 0x40
    d32c:	f104 0217 	add.w	r2, r4, #23
    d330:	d021      	beq.n	d376 <event_master+0x102>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d332:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    d334:	8be1      	ldrh	r1, [r4, #30]
    d336:	3801      	subs	r0, #1
    d338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d33c:	b280      	uxth	r0, r0
    d33e:	f7fe fbff 	bl	bb40 <chan_sel_2>
	chan_set(data_chan_use);
    d342:	f7fd fed3 	bl	b0ec <chan_set>
		remainder_us = radio_tmr_start(1,
    d346:	68ea      	ldr	r2, [r5, #12]
    d348:	f107 0109 	add.w	r1, r7, #9
    d34c:	2001      	movs	r0, #1
    d34e:	f005 f91b 	bl	12588 <radio_tmr_start>
		radio_tmr_end_capture();
    d352:	f005 f9e9 	bl	12728 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d356:	f894 1020 	ldrb.w	r1, [r4, #32]
    d35a:	3107      	adds	r1, #7
    d35c:	463a      	mov	r2, r7
    d35e:	b2c9      	uxtb	r1, r1
    d360:	4620      	mov	r0, r4
    d362:	f7fe f975 	bl	b650 <preempt_calc>
	if (0 !=
    d366:	4603      	mov	r3, r0
    d368:	b328      	cbz	r0, d3b6 <event_master+0x142>
		_radio.state = STATE_STOP;
    d36a:	2304      	movs	r3, #4
    d36c:	752b      	strb	r3, [r5, #20]
		radio_disable();
    d36e:	f005 f809 	bl	12384 <radio_disable>
}
    d372:	b005      	add	sp, #20
    d374:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d376:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    d378:	7fa6      	ldrb	r6, [r4, #30]
    d37a:	fb01 6606 	mla	r6, r1, r6, r6
    d37e:	7fe1      	ldrb	r1, [r4, #31]
    d380:	2025      	movs	r0, #37	; 0x25
    d382:	440e      	add	r6, r1
    d384:	fb96 f1f0 	sdiv	r1, r6, r0
    d388:	fb00 6611 	mls	r6, r0, r1, r6
    d38c:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d38e:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    d390:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d392:	5c51      	ldrb	r1, [r2, r1]
    d394:	f006 0607 	and.w	r6, r6, #7
    d398:	fa41 f606 	asr.w	r6, r1, r6
    d39c:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    d39e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d3a2:	d4ce      	bmi.n	d342 <event_master+0xce>
		chan_index = chan_next % chan_count;
    d3a4:	fbb0 f1f3 	udiv	r1, r0, r3
    d3a8:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    d3ac:	b2c9      	uxtb	r1, r1
    d3ae:	4610      	mov	r0, r2
    d3b0:	f7fc fbd2 	bl	9b58 <chan_sel_remap>
    d3b4:	e7c5      	b.n	d342 <event_master+0xce>
		ticker_status =
    d3b6:	4a0e      	ldr	r2, [pc, #56]	; (d3f0 <event_master+0x17c>)
    d3b8:	4601      	mov	r1, r0
    d3ba:	f7fa fd8f 	bl	7edc <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d3be:	f030 0302 	bics.w	r3, r0, #2
    d3c2:	d0d6      	beq.n	d372 <event_master+0xfe>
    d3c4:	4b04      	ldr	r3, [pc, #16]	; (d3d8 <event_master+0x164>)
    d3c6:	9301      	str	r3, [sp, #4]
    d3c8:	9300      	str	r3, [sp, #0]
    d3ca:	4a04      	ldr	r2, [pc, #16]	; (d3dc <event_master+0x168>)
    d3cc:	4b04      	ldr	r3, [pc, #16]	; (d3e0 <event_master+0x16c>)
    d3ce:	4905      	ldr	r1, [pc, #20]	; (d3e4 <event_master+0x170>)
    d3d0:	4808      	ldr	r0, [pc, #32]	; (d3f4 <event_master+0x180>)
    d3d2:	e760      	b.n	d296 <event_master+0x22>
    d3d4:	200008c8 	.word	0x200008c8
    d3d8:	0001496d 	.word	0x0001496d
    d3dc:	000156bc 	.word	0x000156bc
    d3e0:	00016ec5 	.word	0x00016ec5
    d3e4:	0001570b 	.word	0x0001570b
    d3e8:	000170fd 	.word	0x000170fd
    d3ec:	000171b0 	.word	0x000171b0
    d3f0:	0000ac8d 	.word	0x0000ac8d
    d3f4:	00016fe1 	.word	0x00016fe1

0000d3f8 <isr_rx_conn_pkt_ctrl>:
{
    d3f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    d3fc:	7ac7      	ldrb	r7, [r0, #11]
{
    d3fe:	4604      	mov	r4, r0
    d400:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    d402:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    d406:	2f19      	cmp	r7, #25
    d408:	f201 80e0 	bhi.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
    d40c:	e8df f017 	tbh	[pc, r7, lsl #1]
    d410:	0081001a 	.word	0x0081001a
    d414:	00cc00bd 	.word	0x00cc00bd
    d418:	012200fa 	.word	0x012200fa
    d41c:	05850154 	.word	0x05850154
    d420:	01c40190 	.word	0x01c40190
    d424:	021c01f2 	.word	0x021c01f2
    d428:	02b6024d 	.word	0x02b6024d
    d42c:	02ce01a6 	.word	0x02ce01a6
    d430:	04a40421 	.word	0x04a40421
    d434:	057a0560 	.word	0x057a0560
    d438:	06480648 	.word	0x06480648
    d43c:	07ea071d 	.word	0x07ea071d
    d440:	08ab0821 	.word	0x08ab0821
		if (!_radio.conn_curr->role ||
    d444:	4ecb      	ldr	r6, [pc, #812]	; (d774 <isr_rx_conn_pkt_ctrl+0x37c>)
    d446:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d44a:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d44e:	2b00      	cmp	r3, #0
    d450:	f281 80bc 	bge.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    d454:	7a41      	ldrb	r1, [r0, #9]
    d456:	2000      	movs	r0, #0
    d458:	f7fc fb52 	bl	9b00 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d45c:	2800      	cmp	r0, #0
    d45e:	f001 80b5 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d462:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    d466:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    d468:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d46a:	041b      	lsls	r3, r3, #16
    d46c:	f101 80c4 	bmi.w	e5f8 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d470:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d474:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    d478:	429a      	cmp	r2, r3
    d47a:	d007      	beq.n	d48c <isr_rx_conn_pkt_ctrl+0x94>
    d47c:	4bbe      	ldr	r3, [pc, #760]	; (d778 <isr_rx_conn_pkt_ctrl+0x380>)
    d47e:	9301      	str	r3, [sp, #4]
    d480:	9300      	str	r3, [sp, #0]
    d482:	4bbe      	ldr	r3, [pc, #760]	; (d77c <isr_rx_conn_pkt_ctrl+0x384>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d484:	4abe      	ldr	r2, [pc, #760]	; (d780 <isr_rx_conn_pkt_ctrl+0x388>)
    d486:	49bf      	ldr	r1, [pc, #764]	; (d784 <isr_rx_conn_pkt_ctrl+0x38c>)
    d488:	48bf      	ldr	r0, [pc, #764]	; (d788 <isr_rx_conn_pkt_ctrl+0x390>)
    d48a:	e0f7      	b.n	d67c <isr_rx_conn_pkt_ctrl+0x284>
	if (_radio.conn_upd == 0) {
    d48c:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    d490:	b90a      	cbnz	r2, d496 <isr_rx_conn_pkt_ctrl+0x9e>
		_radio.conn_upd = conn;
    d492:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    d496:	7b22      	ldrb	r2, [r4, #12]
    d498:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    d49c:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    d4a0:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d4a4:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    d4a6:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    d4aa:	7c20      	ldrb	r0, [r4, #16]
    d4ac:	7be2      	ldrb	r2, [r4, #15]
    d4ae:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    d4b2:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    d4b6:	7ca0      	ldrb	r0, [r4, #18]
    d4b8:	7c62      	ldrb	r2, [r4, #17]
    d4ba:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    d4be:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d4c2:	7ce2      	ldrb	r2, [r4, #19]
    d4c4:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    d4c6:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d4ca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    d4ce:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    d4d2:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    d4d6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    d4da:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    d4de:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    d4e0:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    d4e4:	2201      	movs	r2, #1
    d4e6:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d4ea:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d4ee:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d4f2:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d4f6:	4293      	cmp	r3, r2
    d4f8:	d007      	beq.n	d50a <isr_rx_conn_pkt_ctrl+0x112>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    d4fa:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d4fe:	f003 0307 	and.w	r3, r3, #7
    d502:	2b04      	cmp	r3, #4
    d504:	d101      	bne.n	d50a <isr_rx_conn_pkt_ctrl+0x112>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d506:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    d50a:	2000      	movs	r0, #0
    d50c:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    d510:	e038      	b.n	d584 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    d512:	4b98      	ldr	r3, [pc, #608]	; (d774 <isr_rx_conn_pkt_ctrl+0x37c>)
    d514:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d518:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d51c:	2b00      	cmp	r3, #0
    d51e:	f281 8055 	bge.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    d522:	7a41      	ldrb	r1, [r0, #9]
    d524:	2001      	movs	r0, #1
    d526:	f7fc faeb 	bl	9b00 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d52a:	2800      	cmp	r0, #0
    d52c:	f001 804e 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d530:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    d534:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    d536:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d538:	041f      	lsls	r7, r3, #16
    d53a:	f101 805d 	bmi.w	e5f8 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d53e:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    d542:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    d546:	429a      	cmp	r2, r3
    d548:	d004      	beq.n	d554 <isr_rx_conn_pkt_ctrl+0x15c>
    d54a:	4b8b      	ldr	r3, [pc, #556]	; (d778 <isr_rx_conn_pkt_ctrl+0x380>)
    d54c:	9301      	str	r3, [sp, #4]
    d54e:	9300      	str	r3, [sp, #0]
    d550:	4b8e      	ldr	r3, [pc, #568]	; (d78c <isr_rx_conn_pkt_ctrl+0x394>)
    d552:	e797      	b.n	d484 <isr_rx_conn_pkt_ctrl+0x8c>
	memcpy(&conn->llcp.chan_map.chm[0],
    d554:	2205      	movs	r2, #5
    d556:	f104 010c 	add.w	r1, r4, #12
    d55a:	f105 0079 	add.w	r0, r5, #121	; 0x79
    d55e:	f7f4 fb4d 	bl	1bfc <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    d562:	7c63      	ldrb	r3, [r4, #17]
    d564:	7ca2      	ldrb	r2, [r4, #18]
    d566:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    d56a:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    d56e:	2302      	movs	r3, #2
    d570:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d574:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    d578:	2000      	movs	r0, #0
	conn->llcp_ack--;
    d57a:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    d57c:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    d580:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    d584:	b003      	add	sp, #12
    d586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    d58a:	7a41      	ldrb	r1, [r0, #9]
    d58c:	2002      	movs	r0, #2
    d58e:	f7fc fab7 	bl	9b00 <pdu_len_cmp>
    d592:	2800      	cmp	r0, #0
    d594:	f001 801a 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp_terminate.reason_peer =
    d598:	4b76      	ldr	r3, [pc, #472]	; (d774 <isr_rx_conn_pkt_ctrl+0x37c>)
    d59a:	7b22      	ldrb	r2, [r4, #12]
    d59c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d5a0:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    d5a4:	2000      	movs	r0, #0
	return nack;
    d5a6:	e7ed      	b.n	d584 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    d5a8:	4e72      	ldr	r6, [pc, #456]	; (d774 <isr_rx_conn_pkt_ctrl+0x37c>)
    d5aa:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    d5ae:	f998 301d 	ldrsb.w	r3, [r8, #29]
    d5b2:	2b00      	cmp	r3, #0
    d5b4:	f281 800a 	bge.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    d5b8:	7a41      	ldrb	r1, [r0, #9]
    d5ba:	2003      	movs	r0, #3
    d5bc:	f7fc faa0 	bl	9b00 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d5c0:	2800      	cmp	r0, #0
    d5c2:	f001 8003 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    d5c6:	2208      	movs	r2, #8
    d5c8:	f104 0116 	add.w	r1, r4, #22
    d5cc:	f108 0094 	add.w	r0, r8, #148	; 0x94
    d5d0:	f7f4 fb14 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    d5d4:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    d5d8:	2204      	movs	r2, #4
    d5da:	f104 011e 	add.w	r1, r4, #30
    d5de:	f500 7089 	add.w	r0, r0, #274	; 0x112
    d5e2:	f7f4 fb0b 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d5e6:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    d5ea:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d5ee:	f042 0204 	orr.w	r2, r2, #4
    d5f2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    d5f6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    d5fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    d5fe:	2301      	movs	r3, #1
    d600:	702b      	strb	r3, [r5, #0]
    d602:	e7cf      	b.n	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    d604:	4d5b      	ldr	r5, [pc, #364]	; (d774 <isr_rx_conn_pkt_ctrl+0x37c>)
    d606:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    d60a:	f996 301d 	ldrsb.w	r3, [r6, #29]
    d60e:	2b00      	cmp	r3, #0
    d610:	f2c0 87dc 	blt.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    d614:	7a41      	ldrb	r1, [r0, #9]
    d616:	2004      	movs	r0, #4
    d618:	f7fc fa72 	bl	9b00 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d61c:	2800      	cmp	r0, #0
    d61e:	f000 87d5 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    d622:	2208      	movs	r2, #8
    d624:	f104 010c 	add.w	r1, r4, #12
    d628:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    d62c:	f7f4 fae6 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    d630:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    d634:	2204      	movs	r2, #4
    d636:	f104 0114 	add.w	r1, r4, #20
    d63a:	f500 708b 	add.w	r0, r0, #278	; 0x116
    d63e:	f7f4 fadd 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d642:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    d646:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d64a:	f043 0304 	orr.w	r3, r3, #4
    d64e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d652:	e7a7      	b.n	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    d654:	4b47      	ldr	r3, [pc, #284]	; (d774 <isr_rx_conn_pkt_ctrl+0x37c>)
    d656:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d65a:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    d65e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d662:	42b3      	cmp	r3, r6
    d664:	d012      	beq.n	d68c <isr_rx_conn_pkt_ctrl+0x294>
    d666:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    d66a:	2b03      	cmp	r3, #3
    d66c:	d00e      	beq.n	d68c <isr_rx_conn_pkt_ctrl+0x294>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    d66e:	4b42      	ldr	r3, [pc, #264]	; (d778 <isr_rx_conn_pkt_ctrl+0x380>)
    d670:	9301      	str	r3, [sp, #4]
    d672:	9300      	str	r3, [sp, #0]
    d674:	4a42      	ldr	r2, [pc, #264]	; (d780 <isr_rx_conn_pkt_ctrl+0x388>)
    d676:	4b46      	ldr	r3, [pc, #280]	; (d790 <isr_rx_conn_pkt_ctrl+0x398>)
    d678:	4942      	ldr	r1, [pc, #264]	; (d784 <isr_rx_conn_pkt_ctrl+0x38c>)
    d67a:	4846      	ldr	r0, [pc, #280]	; (d794 <isr_rx_conn_pkt_ctrl+0x39c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d67c:	f7f3 fc86 	bl	f8c <printk>
    d680:	4040      	eors	r0, r0
    d682:	f380 8811 	msr	BASEPRI, r0
    d686:	f04f 0004 	mov.w	r0, #4
    d68a:	df02      	svc	2
		if (_radio.conn_curr->role ||
    d68c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d690:	2b00      	cmp	r3, #0
    d692:	f2c0 879b 	blt.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    d696:	7a61      	ldrb	r1, [r4, #9]
    d698:	2005      	movs	r0, #5
    d69a:	f7fc fa31 	bl	9b00 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d69e:	2800      	cmp	r0, #0
    d6a0:	f000 8794 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d6a4:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d6a6:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    d6a8:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d6aa:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d6ae:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    d6b2:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    d6b6:	e765      	b.n	d584 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    d6b8:	7a41      	ldrb	r1, [r0, #9]
    d6ba:	2006      	movs	r0, #6
    d6bc:	f7fc fa20 	bl	9b00 <pdu_len_cmp>
    d6c0:	2800      	cmp	r0, #0
    d6c2:	f000 8783 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_SLAVE) {
    d6c6:	4b2b      	ldr	r3, [pc, #172]	; (d774 <isr_rx_conn_pkt_ctrl+0x37c>)
    d6c8:	7cda      	ldrb	r2, [r3, #19]
    d6ca:	2a03      	cmp	r2, #3
    d6cc:	4619      	mov	r1, r3
    d6ce:	d124      	bne.n	d71a <isr_rx_conn_pkt_ctrl+0x322>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    d6d0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d6d4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    d6d8:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    d6dc:	4290      	cmp	r0, r2
    d6de:	d003      	beq.n	d6e8 <isr_rx_conn_pkt_ctrl+0x2f0>
    d6e0:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    d6e4:	2803      	cmp	r0, #3
    d6e6:	d1c2      	bne.n	d66e <isr_rx_conn_pkt_ctrl+0x276>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    d6e8:	2000      	movs	r0, #0
    d6ea:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    d6ee:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d6f0:	2003      	movs	r0, #3
    d6f2:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    d6f6:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    d6fa:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    d6fe:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d702:	065e      	lsls	r6, r3, #25
    d704:	d505      	bpl.n	d712 <isr_rx_conn_pkt_ctrl+0x31a>
			_radio.conn_curr->refresh = 0;
    d706:	f36f 1386 	bfc	r3, #6, #1
    d70a:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    d70e:	2309      	movs	r3, #9
    d710:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    d712:	2301      	movs	r3, #1
    d714:	702b      	strb	r3, [r5, #0]
				break;
    d716:	f000 bcbf 	b.w	e098 <isr_rx_conn_pkt_ctrl+0xca0>
			_radio.conn_curr->pause_rx = 0;
    d71a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d71e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    d722:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d726:	f36f 03c3 	bfc	r3, #3, #1
    d72a:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d72e:	e7e4      	b.n	d6fa <isr_rx_conn_pkt_ctrl+0x302>
		if (!_radio.conn_curr->role ||
    d730:	4b10      	ldr	r3, [pc, #64]	; (d774 <isr_rx_conn_pkt_ctrl+0x37c>)
    d732:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d736:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d73a:	2b00      	cmp	r3, #0
    d73c:	f280 8746 	bge.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    d740:	7a41      	ldrb	r1, [r0, #9]
    d742:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d744:	f7fc f9dc 	bl	9b00 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d748:	2800      	cmp	r0, #0
    d74a:	f000 873f 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d74e:	4631      	mov	r1, r6
    d750:	4628      	mov	r0, r5
}
    d752:	b003      	add	sp, #12
    d754:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d758:	f7fe ba7e 	b.w	bc58 <feature_rsp_send>
		if (_radio.conn_curr->role ||
    d75c:	4b05      	ldr	r3, [pc, #20]	; (d774 <isr_rx_conn_pkt_ctrl+0x37c>)
    d75e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d762:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d766:	2b00      	cmp	r3, #0
    d768:	f2c0 8730 	blt.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d76c:	7a41      	ldrb	r1, [r0, #9]
    d76e:	200e      	movs	r0, #14
    d770:	e7e8      	b.n	d744 <isr_rx_conn_pkt_ctrl+0x34c>
    d772:	bf00      	nop
    d774:	200008c8 	.word	0x200008c8
    d778:	0001496d 	.word	0x0001496d
    d77c:	00016f24 	.word	0x00016f24
    d780:	000156bc 	.word	0x000156bc
    d784:	0001570b 	.word	0x0001570b
    d788:	000173ac 	.word	0x000173ac
    d78c:	00016f30 	.word	0x00016f30
    d790:	00016bd6 	.word	0x00016bd6
    d794:	000173ee 	.word	0x000173ee
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    d798:	7a41      	ldrb	r1, [r0, #9]
    d79a:	2009      	movs	r0, #9
    d79c:	f7fc f9b0 	bl	9b00 <pdu_len_cmp>
    d7a0:	2800      	cmp	r0, #0
    d7a2:	f000 8713 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d7a6:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    d7a8:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d7aa:	48b2      	ldr	r0, [pc, #712]	; (da74 <isr_rx_conn_pkt_ctrl+0x67c>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d7ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    d7b0:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    d7b4:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    d7b8:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d7bc:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d7c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    d7c4:	7ba1      	ldrb	r1, [r4, #14]
    d7c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d7ca:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    d7ce:	f3c1 0110 	ubfx	r1, r1, #0, #17
    d7d2:	400b      	ands	r3, r1
    d7d4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    d7d8:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    d7dc:	f043 0320 	orr.w	r3, r3, #32
    d7e0:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    d7e4:	2301      	movs	r3, #1
    d7e6:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    d7e8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    d7ec:	2000      	movs	r0, #0
    d7ee:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    d7f2:	e6c7      	b.n	d584 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    d7f4:	4e9f      	ldr	r6, [pc, #636]	; (da74 <isr_rx_conn_pkt_ctrl+0x67c>)
    d7f6:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d7fa:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d7fe:	2b00      	cmp	r3, #0
    d800:	f280 86e4 	bge.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    d804:	7a41      	ldrb	r1, [r0, #9]
    d806:	200a      	movs	r0, #10
    d808:	f7fc f97a 	bl	9b00 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d80c:	2800      	cmp	r0, #0
    d80e:	f000 86dd 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d812:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    d816:	f7f9 fbbc 	bl	6f92 <mem_acquire>
		if (!node_tx) {
    d81a:	4601      	mov	r1, r0
    d81c:	b908      	cbnz	r0, d822 <isr_rx_conn_pkt_ctrl+0x42a>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d81e:	2001      	movs	r0, #1
    d820:	e6b0      	b.n	d584 <isr_rx_conn_pkt_ctrl+0x18c>
		conn->refresh = 1;
    d822:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    d826:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    d82a:	f36f 1304 	bfc	r3, #4, #1
    d82e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d832:	7903      	ldrb	r3, [r0, #4]
    d834:	f043 0303 	orr.w	r3, r3, #3
    d838:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d83a:	2301      	movs	r3, #1
    d83c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d83e:	230b      	movs	r3, #11
    d840:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d842:	4628      	mov	r0, r5
    d844:	f000 bcdc 	b.w	e200 <isr_rx_conn_pkt_ctrl+0xe08>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    d848:	7a41      	ldrb	r1, [r0, #9]
    d84a:	200b      	movs	r0, #11
    d84c:	f7fc f958 	bl	9b00 <pdu_len_cmp>
    d850:	2800      	cmp	r0, #0
    d852:	f000 86bb 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    d856:	4887      	ldr	r0, [pc, #540]	; (da74 <isr_rx_conn_pkt_ctrl+0x67c>)
    d858:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    d85c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d860:	2b00      	cmp	r3, #0
    d862:	db1b      	blt.n	d89c <isr_rx_conn_pkt_ctrl+0x4a4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d864:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d868:	f7f9 fb93 	bl	6f92 <mem_acquire>
		if (!node_tx) {
    d86c:	4601      	mov	r1, r0
    d86e:	2800      	cmp	r0, #0
    d870:	d0d5      	beq.n	d81e <isr_rx_conn_pkt_ctrl+0x426>
		conn->enc_tx = 0;
    d872:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    d876:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    d87a:	f043 0304 	orr.w	r3, r3, #4
    d87e:	f36f 1304 	bfc	r3, #4, #1
    d882:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d886:	7903      	ldrb	r3, [r0, #4]
    d888:	f043 0303 	orr.w	r3, r3, #3
    d88c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d88e:	2301      	movs	r3, #1
    d890:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d892:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    d894:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d896:	4620      	mov	r0, r4
    d898:	f000 bcb2 	b.w	e200 <isr_rx_conn_pkt_ctrl+0xe08>
		conn->enc_tx = 0;
    d89c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d8a0:	f36f 1345 	bfc	r3, #5, #1
    d8a4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    d8a8:	e67c      	b.n	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    d8aa:	7a41      	ldrb	r1, [r0, #9]
    d8ac:	200c      	movs	r0, #12
    d8ae:	f7fc f927 	bl	9b00 <pdu_len_cmp>
    d8b2:	2800      	cmp	r0, #0
    d8b4:	f000 868a 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    d8b8:	486e      	ldr	r0, [pc, #440]	; (da74 <isr_rx_conn_pkt_ctrl+0x67c>)
    d8ba:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    d8be:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d8c2:	f013 0701 	ands.w	r7, r3, #1
    d8c6:	d150      	bne.n	d96a <isr_rx_conn_pkt_ctrl+0x572>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d8c8:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d8cc:	f7f9 fb61 	bl	6f92 <mem_acquire>
		if (!node_tx) {
    d8d0:	4601      	mov	r1, r0
    d8d2:	2800      	cmp	r0, #0
    d8d4:	d0a3      	beq.n	d81e <isr_rx_conn_pkt_ctrl+0x426>
		conn->llcp_version.tx = 1;
    d8d6:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d8da:	f043 0301 	orr.w	r3, r3, #1
    d8de:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d8e2:	7903      	ldrb	r3, [r0, #4]
    d8e4:	f043 0303 	orr.w	r3, r3, #3
    d8e8:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    d8ea:	2306      	movs	r3, #6
    d8ec:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    d8ee:	230c      	movs	r3, #12
    d8f0:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    d8f2:	2309      	movs	r3, #9
    d8f4:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    d8f6:	f06f 030e 	mvn.w	r3, #14
    d8fa:	7243      	strb	r3, [r0, #9]
    d8fc:	2305      	movs	r3, #5
    d8fe:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    d900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d904:	72c3      	strb	r3, [r0, #11]
    d906:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    d908:	4630      	mov	r0, r6
    d90a:	f7fe f98b 	bl	bc24 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    d90e:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    d912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d916:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    d91a:	f004 fd85 	bl	12428 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d91e:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    d920:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d922:	2201      	movs	r2, #1
    d924:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    d928:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d92c:	7003      	strb	r3, [r0, #0]
    d92e:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    d930:	b1c2      	cbz	r2, d964 <isr_rx_conn_pkt_ctrl+0x56c>
		pdu_data_tx->md = 1;
    d932:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    d936:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    d938:	7b23      	ldrb	r3, [r4, #12]
    d93a:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    d93e:	7ba2      	ldrb	r2, [r4, #14]
    d940:	7b63      	ldrb	r3, [r4, #13]
    d942:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d946:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    d94a:	7be3      	ldrb	r3, [r4, #15]
    d94c:	7c22      	ldrb	r2, [r4, #16]
    d94e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d952:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    d956:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d95a:	f043 0302 	orr.w	r3, r3, #2
    d95e:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    d962:	e61f      	b.n	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		pdu_data_tx->md = 0;
    d964:	f362 1304 	bfi	r3, r2, #4, #1
    d968:	e7e5      	b.n	d936 <isr_rx_conn_pkt_ctrl+0x53e>
	} else if (!conn->llcp_version.rx) {
    d96a:	f013 0302 	ands.w	r3, r3, #2
    d96e:	f47f ae19 	bne.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->procedure_expire = 0;
    d972:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    d976:	2301      	movs	r3, #1
    d978:	702b      	strb	r3, [r5, #0]
    d97a:	e7dd      	b.n	d938 <isr_rx_conn_pkt_ctrl+0x540>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    d97c:	7a41      	ldrb	r1, [r0, #9]
    d97e:	200d      	movs	r0, #13
    d980:	f7fc f8be 	bl	9b00 <pdu_len_cmp>
    d984:	2800      	cmp	r0, #0
    d986:	f000 8621 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->pause_rx = 0;
    d98a:	4b3a      	ldr	r3, [pc, #232]	; (da74 <isr_rx_conn_pkt_ctrl+0x67c>)
    d98c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d990:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    d994:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d998:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    d99c:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    d99e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    d9a2:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    d9a6:	2301      	movs	r3, #1
    d9a8:	702b      	strb	r3, [r5, #0]
    d9aa:	e5eb      	b.n	d584 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    d9ac:	7a41      	ldrb	r1, [r0, #9]
    d9ae:	200f      	movs	r0, #15
    d9b0:	f7fc f8a6 	bl	9b00 <pdu_len_cmp>
    d9b4:	2800      	cmp	r0, #0
    d9b6:	f000 8609 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    d9ba:	4b2e      	ldr	r3, [pc, #184]	; (da74 <isr_rx_conn_pkt_ctrl+0x67c>)
    d9bc:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    d9c0:	461a      	mov	r2, r3
    d9c2:	b151      	cbz	r1, d9da <isr_rx_conn_pkt_ctrl+0x5e2>
    d9c4:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    d9c8:	4281      	cmp	r1, r0
    d9ca:	d006      	beq.n	d9da <isr_rx_conn_pkt_ctrl+0x5e2>
			nack = reject_ext_ind_send(_radio.conn_curr,
    d9cc:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    d9ce:	210f      	movs	r1, #15
}
    d9d0:	b003      	add	sp, #12
    d9d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    d9d6:	f7fe b9a9 	b.w	bd2c <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    d9da:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    d9de:	f990 301d 	ldrsb.w	r3, [r0, #29]
    d9e2:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    d9e6:	2b00      	cmp	r3, #0
    d9e8:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d9ec:	f2c0 80a7 	blt.w	db3e <isr_rx_conn_pkt_ctrl+0x746>
			if ((conn->llcp_conn_param.req !=
    d9f0:	4299      	cmp	r1, r3
    d9f2:	d009      	beq.n	da08 <isr_rx_conn_pkt_ctrl+0x610>
			    ((conn->llcp_conn_param.state ==
    d9f4:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    d9f8:	f013 0307 	ands.w	r3, r3, #7
    d9fc:	d002      	beq.n	da04 <isr_rx_conn_pkt_ctrl+0x60c>
			      LLCP_CPR_STATE_REQ) ||
    d9fe:	3b04      	subs	r3, #4
    da00:	2b01      	cmp	r3, #1
    da02:	d801      	bhi.n	da08 <isr_rx_conn_pkt_ctrl+0x610>
				nack = reject_ext_ind_send(_radio.conn_curr,
    da04:	2223      	movs	r2, #35	; 0x23
    da06:	e7e2      	b.n	d9ce <isr_rx_conn_pkt_ctrl+0x5d6>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    da08:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    da0c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    da10:	4299      	cmp	r1, r3
    da12:	d003      	beq.n	da1c <isr_rx_conn_pkt_ctrl+0x624>
    da14:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    da18:	2b03      	cmp	r3, #3
    da1a:	d105      	bne.n	da28 <isr_rx_conn_pkt_ctrl+0x630>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    da1c:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    da20:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    da24:	4299      	cmp	r1, r3
    da26:	d001      	beq.n	da2c <isr_rx_conn_pkt_ctrl+0x634>
				nack = reject_ext_ind_send(_radio.conn_curr,
    da28:	222a      	movs	r2, #42	; 0x2a
    da2a:	e7d0      	b.n	d9ce <isr_rx_conn_pkt_ctrl+0x5d6>
				if ((cpr->interval_min < 6) ||
    da2c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    da30:	4643      	mov	r3, r8
    da32:	2b05      	cmp	r3, #5
    da34:	d91b      	bls.n	da6e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    da36:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    da38:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    da3c:	d817      	bhi.n	da6e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    da3e:	45b8      	cmp	r8, r7
    da40:	d815      	bhi.n	da6e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->latency > 499) ||
    da42:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    da46:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    da4a:	d210      	bcs.n	da6e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->timeout < 10) ||
    da4c:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    da50:	f1ae 060a 	sub.w	r6, lr, #10
    da54:	b2b6      	uxth	r6, r6
    da56:	f640 4976 	movw	r9, #3190	; 0xc76
    da5a:	454e      	cmp	r6, r9
    da5c:	d807      	bhi.n	da6e <isr_rx_conn_pkt_ctrl+0x676>
				     ((cpr->latency + 1) *
    da5e:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    da62:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    da66:	da02      	bge.n	da6e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->preferred_periodicity >
    da68:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    da6a:	428f      	cmp	r7, r1
    da6c:	d204      	bcs.n	da78 <isr_rx_conn_pkt_ctrl+0x680>
				nack = reject_ext_ind_send(conn,
    da6e:	221e      	movs	r2, #30
    da70:	e7ad      	b.n	d9ce <isr_rx_conn_pkt_ctrl+0x5d6>
    da72:	bf00      	nop
    da74:	200008c8 	.word	0x200008c8
				conn->llcp_conn_param.interval = cpr->interval_min;
    da78:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    da7c:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    da80:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    da84:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    da88:	7da6      	ldrb	r6, [r4, #22]
    da8a:	7d61      	ldrb	r1, [r4, #21]
    da8c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    da90:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    da94:	7e26      	ldrb	r6, [r4, #24]
    da96:	7de1      	ldrb	r1, [r4, #23]
    da98:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    da9c:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    daa0:	7ea6      	ldrb	r6, [r4, #26]
    daa2:	7e61      	ldrb	r1, [r4, #25]
    daa4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    daa8:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    daac:	7f26      	ldrb	r6, [r4, #28]
    daae:	7ee1      	ldrb	r1, [r4, #27]
    dab0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dab4:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    dab8:	7fa6      	ldrb	r6, [r4, #30]
    daba:	7f61      	ldrb	r1, [r4, #29]
    dabc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dac0:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    dac4:	7fe1      	ldrb	r1, [r4, #31]
    dac6:	f894 6020 	ldrb.w	r6, [r4, #32]
    daca:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dace:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    dad2:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    dad6:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    dada:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    dade:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    dae2:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    dae6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    dae8:	428c      	cmp	r4, r1
    daea:	d10f      	bne.n	db0c <isr_rx_conn_pkt_ctrl+0x714>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    daec:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    daee:	f240 41e2 	movw	r1, #1250	; 0x4e2
    daf2:	4361      	muls	r1, r4
    daf4:	f242 7410 	movw	r4, #10000	; 0x2710
    daf8:	fb04 130e 	mla	r3, r4, lr, r1
    dafc:	3b01      	subs	r3, #1
    dafe:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    db02:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    db04:	b29b      	uxth	r3, r3
    db06:	4299      	cmp	r1, r3
    db08:	f000 8092 	beq.w	dc30 <isr_rx_conn_pkt_ctrl+0x838>
					if (conn->pause_tx) {
    db0c:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    db10:	071c      	lsls	r4, r3, #28
    db12:	f140 8087 	bpl.w	dc24 <isr_rx_conn_pkt_ctrl+0x82c>
						conn->llcp_conn_param.state =
    db16:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    db1a:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    db1c:	f361 0302 	bfi	r3, r1, #0, #3
    db20:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    db24:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    db28:	3b01      	subs	r3, #1
    db2a:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    db2e:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    db32:	2b00      	cmp	r3, #0
    db34:	f47f ad36 	bne.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
				_radio.conn_upd = conn;
    db38:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    db3c:	e532      	b.n	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    db3e:	4299      	cmp	r1, r3
    db40:	d003      	beq.n	db4a <isr_rx_conn_pkt_ctrl+0x752>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    db42:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    db46:	0799      	lsls	r1, r3, #30
    db48:	d17b      	bne.n	dc42 <isr_rx_conn_pkt_ctrl+0x84a>
			if ((cpr->interval_min < 6) ||
    db4a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    db4e:	4643      	mov	r3, r8
    db50:	2b05      	cmp	r3, #5
    db52:	d98c      	bls.n	da6e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    db54:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    db56:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    db5a:	d888      	bhi.n	da6e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    db5c:	45b8      	cmp	r8, r7
    db5e:	d886      	bhi.n	da6e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->latency > 499) ||
    db60:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    db64:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    db68:	d281      	bcs.n	da6e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    db6a:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    db6e:	f1ae 060a 	sub.w	r6, lr, #10
    db72:	b2b6      	uxth	r6, r6
    db74:	f640 4976 	movw	r9, #3190	; 0xc76
    db78:	454e      	cmp	r6, r9
    db7a:	f63f af78 	bhi.w	da6e <isr_rx_conn_pkt_ctrl+0x676>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    db7e:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    db82:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    db86:	f6bf af72 	bge.w	da6e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    db8a:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    db8c:	428f      	cmp	r7, r1
    db8e:	f4ff af6e 	bcc.w	da6e <isr_rx_conn_pkt_ctrl+0x676>
			conn->llcp_conn_param.interval = cpr->interval_min;
    db92:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    db96:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    db9a:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    db9e:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    dba2:	7da6      	ldrb	r6, [r4, #22]
    dba4:	7d61      	ldrb	r1, [r4, #21]
    dba6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    dbaa:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    dbae:	7e26      	ldrb	r6, [r4, #24]
    dbb0:	7de1      	ldrb	r1, [r4, #23]
    dbb2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dbb6:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    dbba:	7ea6      	ldrb	r6, [r4, #26]
    dbbc:	7e61      	ldrb	r1, [r4, #25]
    dbbe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dbc2:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    dbc6:	7f26      	ldrb	r6, [r4, #28]
    dbc8:	7ee1      	ldrb	r1, [r4, #27]
    dbca:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dbce:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    dbd2:	7fa6      	ldrb	r6, [r4, #30]
    dbd4:	7f61      	ldrb	r1, [r4, #29]
    dbd6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dbda:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    dbde:	7fe1      	ldrb	r1, [r4, #31]
    dbe0:	f894 6020 	ldrb.w	r6, [r4, #32]
    dbe4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dbe8:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    dbec:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    dbf0:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    dbf4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    dbf8:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    dbfc:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    dc00:	6a41      	ldr	r1, [r0, #36]	; 0x24
    dc02:	428c      	cmp	r4, r1
    dc04:	d10e      	bne.n	dc24 <isr_rx_conn_pkt_ctrl+0x82c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    dc06:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    dc08:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dc0c:	4361      	muls	r1, r4
    dc0e:	f242 7410 	movw	r4, #10000	; 0x2710
    dc12:	fb04 130e 	mla	r3, r4, lr, r1
    dc16:	3b01      	subs	r3, #1
    dc18:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    dc1c:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    dc1e:	b29b      	uxth	r3, r3
    dc20:	4299      	cmp	r1, r3
    dc22:	d005      	beq.n	dc30 <isr_rx_conn_pkt_ctrl+0x838>
				*rx_enqueue = 1;
    dc24:	2301      	movs	r3, #1
    dc26:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    dc28:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    dc2c:	2103      	movs	r1, #3
    dc2e:	e775      	b.n	db1c <isr_rx_conn_pkt_ctrl+0x724>
				conn->llcp_conn_param.status = 0;
    dc30:	2300      	movs	r3, #0
    dc32:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    dc36:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    dc3a:	2101      	movs	r1, #1
    dc3c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    dc40:	e76c      	b.n	db1c <isr_rx_conn_pkt_ctrl+0x724>
			LL_ASSERT(0);
    dc42:	4bc9      	ldr	r3, [pc, #804]	; (df68 <isr_rx_conn_pkt_ctrl+0xb70>)
    dc44:	9301      	str	r3, [sp, #4]
    dc46:	9300      	str	r3, [sp, #0]
    dc48:	4ac8      	ldr	r2, [pc, #800]	; (df6c <isr_rx_conn_pkt_ctrl+0xb74>)
    dc4a:	4bc9      	ldr	r3, [pc, #804]	; (df70 <isr_rx_conn_pkt_ctrl+0xb78>)
    dc4c:	49c9      	ldr	r1, [pc, #804]	; (df74 <isr_rx_conn_pkt_ctrl+0xb7c>)
    dc4e:	48ca      	ldr	r0, [pc, #808]	; (df78 <isr_rx_conn_pkt_ctrl+0xb80>)
    dc50:	e514      	b.n	d67c <isr_rx_conn_pkt_ctrl+0x284>
		if (_radio.conn_curr->role ||
    dc52:	4bca      	ldr	r3, [pc, #808]	; (df7c <isr_rx_conn_pkt_ctrl+0xb84>)
    dc54:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    dc58:	f995 301d 	ldrsb.w	r3, [r5, #29]
    dc5c:	2b00      	cmp	r3, #0
    dc5e:	f2c0 84b5 	blt.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    dc62:	7a41      	ldrb	r1, [r0, #9]
    dc64:	2010      	movs	r0, #16
    dc66:	f7fb ff4b 	bl	9b00 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    dc6a:	2800      	cmp	r0, #0
    dc6c:	f000 84ae 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		if (!_radio.conn_curr->role &&
    dc70:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    dc74:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    dc78:	429a      	cmp	r2, r3
    dc7a:	f43f ac93 	beq.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_conn_param.state ==
    dc7e:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    dc82:	f003 0307 	and.w	r3, r3, #7
    dc86:	2b04      	cmp	r3, #4
    dc88:	f47f ac8c 	bne.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
			if ((cpr->interval_min < 6) ||
    dc8c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    dc90:	fa1f f28e 	uxth.w	r2, lr
    dc94:	2a05      	cmp	r2, #5
    dc96:	d91b      	bls.n	dcd0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    dc98:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    dc9a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    dc9e:	d817      	bhi.n	dcd0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    dca0:	429a      	cmp	r2, r3
    dca2:	d815      	bhi.n	dcd0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->latency > 499) ||
    dca4:	8a27      	ldrh	r7, [r4, #16]
    dca6:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    dca8:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    dcac:	d210      	bcs.n	dcd0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    dcae:	8a66      	ldrh	r6, [r4, #18]
    dcb0:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    dcb2:	f1a0 010a 	sub.w	r1, r0, #10
    dcb6:	b289      	uxth	r1, r1
    dcb8:	f640 4c76 	movw	ip, #3190	; 0xc76
    dcbc:	4561      	cmp	r1, ip
    dcbe:	d807      	bhi.n	dcd0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    dcc0:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    dcc4:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    dcc8:	da02      	bge.n	dcd0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    dcca:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    dccc:	4293      	cmp	r3, r2
    dcce:	d203      	bcs.n	dcd8 <isr_rx_conn_pkt_ctrl+0x8e0>
				nack = reject_ext_ind_send(conn,
    dcd0:	221e      	movs	r2, #30
    dcd2:	2110      	movs	r1, #16
    dcd4:	4628      	mov	r0, r5
    dcd6:	e67b      	b.n	d9d0 <isr_rx_conn_pkt_ctrl+0x5d8>
			_radio.conn_curr->procedure_expire = 0;
    dcd8:	2000      	movs	r0, #0
    dcda:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    dcde:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    dce2:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    dce6:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    dcea:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    dcee:	7da2      	ldrb	r2, [r4, #22]
    dcf0:	7d63      	ldrb	r3, [r4, #21]
    dcf2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    dcf6:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    dcfa:	7e22      	ldrb	r2, [r4, #24]
    dcfc:	7de3      	ldrb	r3, [r4, #23]
    dcfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd02:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    dd06:	7ea2      	ldrb	r2, [r4, #26]
    dd08:	7e63      	ldrb	r3, [r4, #25]
    dd0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd0e:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    dd12:	7f22      	ldrb	r2, [r4, #28]
    dd14:	7ee3      	ldrb	r3, [r4, #27]
    dd16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd1a:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    dd1e:	7fa2      	ldrb	r2, [r4, #30]
    dd20:	7f63      	ldrb	r3, [r4, #29]
    dd22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd26:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    dd2a:	f894 2020 	ldrb.w	r2, [r4, #32]
    dd2e:	7fe3      	ldrb	r3, [r4, #31]
    dd30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd34:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    dd38:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    dd3c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    dd40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd44:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    dd48:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    dd4c:	2201      	movs	r2, #1
    dd4e:	f362 0302 	bfi	r3, r2, #0, #3
    dd52:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    dd56:	e415      	b.n	d584 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    dd58:	7a41      	ldrb	r1, [r0, #9]
    dd5a:	2011      	movs	r0, #17
    dd5c:	f7fb fed0 	bl	9b00 <pdu_len_cmp>
    dd60:	2800      	cmp	r0, #0
    dd62:	f000 8433 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    dd66:	4a85      	ldr	r2, [pc, #532]	; (df7c <isr_rx_conn_pkt_ctrl+0xb84>)
    dd68:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    dd6c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    dd70:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    dd74:	4281      	cmp	r1, r0
    dd76:	7b21      	ldrb	r1, [r4, #12]
    dd78:	d027      	beq.n	ddca <isr_rx_conn_pkt_ctrl+0x9d2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    dd7a:	2916      	cmp	r1, #22
    dd7c:	f47f ac12 	bne.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (rej_ext_ind->error_code != 0x23) {
    dd80:	7b61      	ldrb	r1, [r4, #13]
    dd82:	2923      	cmp	r1, #35	; 0x23
    dd84:	d00e      	beq.n	dda4 <isr_rx_conn_pkt_ctrl+0x9ac>
				_radio.conn_curr->phy_tx;
    dd86:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    dd8a:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    dd8e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    dd92:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    dd96:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    dd9a:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    dd9c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    dda0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    dda4:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    dda8:	0792      	lsls	r2, r2, #30
    ddaa:	f57f abfb 	bpl.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ddae:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    ddb0:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ddb2:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    ddb4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    ddb8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ddbc:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    ddbe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    ddc2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ddc6:	7363      	strb	r3, [r4, #13]
    ddc8:	e419      	b.n	d5fe <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_conn_param.req) {
    ddca:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    ddce:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    ddd2:	42b8      	cmp	r0, r7
    ddd4:	d048      	beq.n	de68 <isr_rx_conn_pkt_ctrl+0xa70>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    ddd6:	290f      	cmp	r1, #15
    ddd8:	f47f abe4 	bne.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
    dddc:	f993 001d 	ldrsb.w	r0, [r3, #29]
    dde0:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    dde2:	2800      	cmp	r0, #0
    dde4:	db0e      	blt.n	de04 <isr_rx_conn_pkt_ctrl+0xa0c>
    dde6:	291a      	cmp	r1, #26
    dde8:	d10c      	bne.n	de04 <isr_rx_conn_pkt_ctrl+0xa0c>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    ddea:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    ddee:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    ddf2:	4294      	cmp	r4, r2
    ddf4:	f000 80c8 	beq.w	df88 <isr_rx_conn_pkt_ctrl+0xb90>
    ddf8:	4b5b      	ldr	r3, [pc, #364]	; (df68 <isr_rx_conn_pkt_ctrl+0xb70>)
    ddfa:	9301      	str	r3, [sp, #4]
    ddfc:	9300      	str	r3, [sp, #0]
    ddfe:	4b60      	ldr	r3, [pc, #384]	; (df80 <isr_rx_conn_pkt_ctrl+0xb88>)
    de00:	f7ff bb40 	b.w	d484 <isr_rx_conn_pkt_ctrl+0x8c>
	else if (rej_ext_ind->error_code != 0x23) {
    de04:	2923      	cmp	r1, #35	; 0x23
    de06:	d018      	beq.n	de3a <isr_rx_conn_pkt_ctrl+0xa42>
		LL_ASSERT(_radio.conn_upd == conn);
    de08:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    de0c:	42b3      	cmp	r3, r6
    de0e:	d007      	beq.n	de20 <isr_rx_conn_pkt_ctrl+0xa28>
    de10:	4b55      	ldr	r3, [pc, #340]	; (df68 <isr_rx_conn_pkt_ctrl+0xb70>)
    de12:	9301      	str	r3, [sp, #4]
    de14:	9300      	str	r3, [sp, #0]
    de16:	4b5a      	ldr	r3, [pc, #360]	; (df80 <isr_rx_conn_pkt_ctrl+0xb88>)
			LL_ASSERT(_radio.conn_upd == conn);
    de18:	4a54      	ldr	r2, [pc, #336]	; (df6c <isr_rx_conn_pkt_ctrl+0xb74>)
    de1a:	4956      	ldr	r1, [pc, #344]	; (df74 <isr_rx_conn_pkt_ctrl+0xb7c>)
    de1c:	4859      	ldr	r0, [pc, #356]	; (df84 <isr_rx_conn_pkt_ctrl+0xb8c>)
    de1e:	e42d      	b.n	d67c <isr_rx_conn_pkt_ctrl+0x284>
		_radio.conn_upd = NULL;
    de20:	2600      	movs	r6, #0
		if (conn->role) {
    de22:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    de24:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    de28:	bfb8      	it	lt
    de2a:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    de2e:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    de32:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    de36:	bfb8      	it	lt
    de38:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    de3a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    de3e:	0717      	lsls	r7, r2, #28
    de40:	f57f abb0 	bpl.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
	cp->status = rej_ext_ind->error_code;
    de44:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    de46:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    de48:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    de4a:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    de4c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    de4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    de50:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    de52:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    de54:	237d      	movs	r3, #125	; 0x7d
    de56:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    de58:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    de5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    de5e:	fb93 f3f2 	sdiv	r3, r3, r2
    de62:	8223      	strh	r3, [r4, #16]
    de64:	f7ff bbcb 	b.w	d5fe <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_length.req) {
    de68:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    de6c:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    de70:	4290      	cmp	r0, r2
    de72:	d01a      	beq.n	deaa <isr_rx_conn_pkt_ctrl+0xab2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    de74:	2914      	cmp	r1, #20
    de76:	f47f ab95 	bne.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->llcp_length.ack = conn->llcp_length.req;
    de7a:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    de7e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    de82:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    de84:	f360 02c3 	bfi	r2, r0, #3, #1
    de88:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    de8c:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    de8e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    de92:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    de94:	2215      	movs	r2, #21
    de96:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    de98:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    de9a:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    de9c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    de9e:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    dea0:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    dea2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    dea4:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    dea6:	8263      	strh	r3, [r4, #18]
    dea8:	e57d      	b.n	d9a6 <isr_rx_conn_pkt_ctrl+0x5ae>
		switch (rej_ext_ind->reject_opcode) {
    deaa:	2903      	cmp	r1, #3
    deac:	f47f ab7a 	bne.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_rx = 0;
    deb0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    deb4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    deb8:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    debc:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    debe:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    dec2:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    dec6:	230d      	movs	r3, #13
    dec8:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    deca:	7b63      	ldrb	r3, [r4, #13]
    decc:	7323      	strb	r3, [r4, #12]
    dece:	e56a      	b.n	d9a6 <isr_rx_conn_pkt_ctrl+0x5ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    ded0:	7a41      	ldrb	r1, [r0, #9]
    ded2:	2012      	movs	r0, #18
    ded4:	f7fb fe14 	bl	9b00 <pdu_len_cmp>
    ded8:	2800      	cmp	r0, #0
    deda:	f000 8377 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = ping_resp_send(_radio.conn_curr);
    dede:	4827      	ldr	r0, [pc, #156]	; (df7c <isr_rx_conn_pkt_ctrl+0xb84>)
    dee0:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dee4:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    dee8:	f7f9 f853 	bl	6f92 <mem_acquire>
	if (!node_tx) {
    deec:	4601      	mov	r1, r0
    deee:	2800      	cmp	r0, #0
    def0:	f43f ac95 	beq.w	d81e <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    def4:	7903      	ldrb	r3, [r0, #4]
    def6:	f043 0303 	orr.w	r3, r3, #3
    defa:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    defc:	2301      	movs	r3, #1
    defe:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    df00:	2313      	movs	r3, #19
    df02:	e4c7      	b.n	d894 <isr_rx_conn_pkt_ctrl+0x49c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    df04:	7a41      	ldrb	r1, [r0, #9]
    df06:	2013      	movs	r0, #19
    df08:	f7fb fdfa 	bl	9b00 <pdu_len_cmp>
    df0c:	2800      	cmp	r0, #0
    df0e:	f000 835d 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->procedure_expire = 0;
    df12:	4b1a      	ldr	r3, [pc, #104]	; (df7c <isr_rx_conn_pkt_ctrl+0xb84>)
    df14:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    df18:	e468      	b.n	d7ec <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    df1a:	7a41      	ldrb	r1, [r0, #9]
    df1c:	2007      	movs	r0, #7
    df1e:	f7fb fdef 	bl	9b00 <pdu_len_cmp>
    df22:	2800      	cmp	r0, #0
    df24:	f000 8352 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    df28:	4a14      	ldr	r2, [pc, #80]	; (df7c <isr_rx_conn_pkt_ctrl+0xb84>)
    df2a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    df2e:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    df32:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    df36:	42b1      	cmp	r1, r6
    df38:	4611      	mov	r1, r2
    df3a:	d077      	beq.n	e02c <isr_rx_conn_pkt_ctrl+0xc34>
			conn->llcp_conn_param.disabled = 1;
    df3c:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    df40:	f040 0010 	orr.w	r0, r0, #16
    df44:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    df48:	f993 001d 	ldrsb.w	r0, [r3, #29]
    df4c:	2800      	cmp	r0, #0
    df4e:	db47      	blt.n	dfe0 <isr_rx_conn_pkt_ctrl+0xbe8>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    df50:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    df54:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    df58:	4294      	cmp	r4, r2
    df5a:	d015      	beq.n	df88 <isr_rx_conn_pkt_ctrl+0xb90>
    df5c:	4b02      	ldr	r3, [pc, #8]	; (df68 <isr_rx_conn_pkt_ctrl+0xb70>)
    df5e:	9301      	str	r3, [sp, #4]
    df60:	9300      	str	r3, [sp, #0]
    df62:	4b03      	ldr	r3, [pc, #12]	; (df70 <isr_rx_conn_pkt_ctrl+0xb78>)
    df64:	f7ff ba8e 	b.w	d484 <isr_rx_conn_pkt_ctrl+0x8c>
    df68:	0001496d 	.word	0x0001496d
    df6c:	000156bc 	.word	0x000156bc
    df70:	00016bd6 	.word	0x00016bd6
    df74:	0001570b 	.word	0x0001570b
    df78:	0001565b 	.word	0x0001565b
    df7c:	200008c8 	.word	0x200008c8
    df80:	00016b9b 	.word	0x00016b9b
    df84:	0001747e 	.word	0x0001747e
				conn->llcp_conn_param.state =
    df88:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    df8c:	2105      	movs	r1, #5
    df8e:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    df92:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    df96:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    df9a:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    df9e:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    dfa2:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    dfa6:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    dfaa:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    dfae:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    dfb2:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    dfb4:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    dfb8:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    dfbc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    dfc0:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    dfc2:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    dfc6:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    dfc8:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    dfcc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    dfd0:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    dfd4:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    dfd8:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    dfdc:	f7ff bad2 	b.w	d584 <isr_rx_conn_pkt_ctrl+0x18c>
			LL_ASSERT(_radio.conn_upd == conn);
    dfe0:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    dfe4:	4293      	cmp	r3, r2
    dfe6:	d004      	beq.n	dff2 <isr_rx_conn_pkt_ctrl+0xbfa>
    dfe8:	4bc9      	ldr	r3, [pc, #804]	; (e310 <isr_rx_conn_pkt_ctrl+0xf18>)
    dfea:	9301      	str	r3, [sp, #4]
    dfec:	9300      	str	r3, [sp, #0]
    dfee:	4bc9      	ldr	r3, [pc, #804]	; (e314 <isr_rx_conn_pkt_ctrl+0xf1c>)
    dff0:	e712      	b.n	de18 <isr_rx_conn_pkt_ctrl+0xa20>
			_radio.conn_upd = NULL;
    dff2:	2200      	movs	r2, #0
    dff4:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    dff8:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    dffc:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    e000:	0716      	lsls	r6, r2, #28
    e002:	f57f aacf 	bpl.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e006:	2208      	movs	r2, #8
    e008:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e00a:	221a      	movs	r2, #26
    e00c:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    e00e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    e010:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    e012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    e014:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    e016:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    e018:	237d      	movs	r3, #125	; 0x7d
    e01a:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    e01c:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    e01e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e022:	fb93 f3f2 	sdiv	r3, r3, r2
    e026:	8223      	strh	r3, [r4, #16]
    e028:	f7ff bb73 	b.w	d712 <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_length.req !=
    e02c:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    e030:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    e034:	4290      	cmp	r0, r2
    e036:	d009      	beq.n	e04c <isr_rx_conn_pkt_ctrl+0xc54>
			_radio.conn_curr->llcp_length.ack =
    e038:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    e03c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    e040:	f36f 02c3 	bfc	r2, #3, #1
    e044:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    e048:	f7ff bb63 	b.w	d712 <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_phy.req !=
    e04c:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    e050:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    e054:	4290      	cmp	r0, r2
    e056:	d01b      	beq.n	e090 <isr_rx_conn_pkt_ctrl+0xc98>
			_radio.conn_curr->llcp_phy.ack =
    e058:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    e05c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    e060:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    e064:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    e068:	f362 0002 	bfi	r0, r2, #0, #3
    e06c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    e070:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    e074:	0780      	lsls	r0, r0, #30
    e076:	d50f      	bpl.n	e098 <isr_rx_conn_pkt_ctrl+0xca0>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e078:	200c      	movs	r0, #12
    e07a:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    e07c:	2000      	movs	r0, #0
    e07e:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    e080:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    e082:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    e086:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e08a:	7363      	strb	r3, [r4, #13]
    e08c:	f7ff bb41 	b.w	d712 <isr_rx_conn_pkt_ctrl+0x31a>
			switch (llctrl->unknown_rsp.type) {
    e090:	7b23      	ldrb	r3, [r4, #12]
    e092:	2b12      	cmp	r3, #18
    e094:	f47f ab3d 	bne.w	d712 <isr_rx_conn_pkt_ctrl+0x31a>
		_radio.conn_curr->procedure_expire = 0;
    e098:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    e09c:	f7ff bba6 	b.w	d7ec <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    e0a0:	7a41      	ldrb	r1, [r0, #9]
    e0a2:	2014      	movs	r0, #20
    e0a4:	f7fb fd2c 	bl	9b00 <pdu_len_cmp>
    e0a8:	2800      	cmp	r0, #0
    e0aa:	f000 828f 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    e0ae:	2f14      	cmp	r7, #20
    e0b0:	d127      	bne.n	e102 <isr_rx_conn_pkt_ctrl+0xd0a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e0b2:	4899      	ldr	r0, [pc, #612]	; (e318 <isr_rx_conn_pkt_ctrl+0xf20>)
    e0b4:	f7f8 ff6d 	bl	6f92 <mem_acquire>
		if (!node_tx) {
    e0b8:	4606      	mov	r6, r0
    e0ba:	2800      	cmp	r0, #0
    e0bc:	f43f abaf 	beq.w	d81e <isr_rx_conn_pkt_ctrl+0x426>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e0c0:	4f96      	ldr	r7, [pc, #600]	; (e31c <isr_rx_conn_pkt_ctrl+0xf24>)
    e0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    e0c6:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    e0ca:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e0ce:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e0d0:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    e0d2:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e0d4:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    e0d8:	45e0      	cmp	r8, ip
    e0da:	46b9      	mov	r9, r7
    e0dc:	f894 800b 	ldrb.w	r8, [r4, #11]
    e0e0:	d111      	bne.n	e106 <isr_rx_conn_pkt_ctrl+0xd0e>
	      _radio.conn_curr->llcp_length.ack) &&
    e0e2:	f1b8 0f14 	cmp.w	r8, #20
    e0e6:	d01a      	beq.n	e11e <isr_rx_conn_pkt_ctrl+0xd26>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    e0e8:	f1b8 0f15 	cmp.w	r8, #21
    e0ec:	f000 8292 	beq.w	e614 <isr_rx_conn_pkt_ctrl+0x121c>
    e0f0:	4b87      	ldr	r3, [pc, #540]	; (e310 <isr_rx_conn_pkt_ctrl+0xf18>)
    e0f2:	9301      	str	r3, [sp, #4]
    e0f4:	9300      	str	r3, [sp, #0]
    e0f6:	4a8a      	ldr	r2, [pc, #552]	; (e320 <isr_rx_conn_pkt_ctrl+0xf28>)
    e0f8:	4b8a      	ldr	r3, [pc, #552]	; (e324 <isr_rx_conn_pkt_ctrl+0xf2c>)
    e0fa:	498b      	ldr	r1, [pc, #556]	; (e328 <isr_rx_conn_pkt_ctrl+0xf30>)
    e0fc:	488b      	ldr	r0, [pc, #556]	; (e32c <isr_rx_conn_pkt_ctrl+0xf34>)
    e0fe:	f7ff babd 	b.w	d67c <isr_rx_conn_pkt_ctrl+0x284>
	struct radio_pdu_node_tx *node_tx = NULL;
    e102:	2600      	movs	r6, #0
    e104:	e7dc      	b.n	e0c0 <isr_rx_conn_pkt_ctrl+0xcc8>
		 LLCP_LENGTH_STATE_REQ) ||
    e106:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    e10a:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    e10e:	2f01      	cmp	r7, #1
    e110:	d9e7      	bls.n	e0e2 <isr_rx_conn_pkt_ctrl+0xcea>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    e112:	2f02      	cmp	r7, #2
    e114:	d1e8      	bne.n	e0e8 <isr_rx_conn_pkt_ctrl+0xcf0>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    e116:	f1a8 0714 	sub.w	r7, r8, #20
    e11a:	2f01      	cmp	r7, #1
    e11c:	d8e4      	bhi.n	e0e8 <isr_rx_conn_pkt_ctrl+0xcf0>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    e11e:	89a7      	ldrh	r7, [r4, #12]
    e120:	2f1a      	cmp	r7, #26
    e122:	d934      	bls.n	e18e <isr_rx_conn_pkt_ctrl+0xd96>
			eff_tx_octets = min(lr->max_rx_octets,
    e124:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    e128:	4547      	cmp	r7, r8
    e12a:	bf28      	it	cs
    e12c:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    e12e:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    e132:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    e136:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    e13a:	bf34      	ite	cc
    e13c:	4693      	movcc	fp, r2
    e13e:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    e142:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    e146:	d324      	bcc.n	e192 <isr_rx_conn_pkt_ctrl+0xd9a>
			eff_tx_time = min(lr->max_rx_time,
    e148:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    e14c:	45d0      	cmp	r8, sl
    e14e:	bf28      	it	cs
    e150:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    e152:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    e156:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    e15a:	bf34      	ite	cc
    e15c:	4682      	movcc	sl, r0
    e15e:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    e162:	455a      	cmp	r2, fp
    e164:	d050      	beq.n	e208 <isr_rx_conn_pkt_ctrl+0xe10>
			free_count_rx = packet_rx_acquired_count_get() +
    e166:	f7fb fd13 	bl	9b90 <packet_rx_acquired_count_get>
    e16a:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    e16c:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    e170:	f7f8 ff3e 	bl	6ff0 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    e174:	4420      	add	r0, r4
    e176:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    e178:	28ff      	cmp	r0, #255	; 0xff
    e17a:	d90c      	bls.n	e196 <isr_rx_conn_pkt_ctrl+0xd9e>
    e17c:	4b64      	ldr	r3, [pc, #400]	; (e310 <isr_rx_conn_pkt_ctrl+0xf18>)
    e17e:	9301      	str	r3, [sp, #4]
    e180:	9300      	str	r3, [sp, #0]
    e182:	4a67      	ldr	r2, [pc, #412]	; (e320 <isr_rx_conn_pkt_ctrl+0xf28>)
    e184:	4b67      	ldr	r3, [pc, #412]	; (e324 <isr_rx_conn_pkt_ctrl+0xf2c>)
    e186:	4968      	ldr	r1, [pc, #416]	; (e328 <isr_rx_conn_pkt_ctrl+0xf30>)
    e188:	4869      	ldr	r0, [pc, #420]	; (e330 <isr_rx_conn_pkt_ctrl+0xf38>)
    e18a:	f7ff ba77 	b.w	d67c <isr_rx_conn_pkt_ctrl+0x284>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e18e:	460f      	mov	r7, r1
    e190:	e7cd      	b.n	e12e <isr_rx_conn_pkt_ctrl+0xd36>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e192:	46f0      	mov	r8, lr
    e194:	e7dd      	b.n	e152 <isr_rx_conn_pkt_ctrl+0xd5a>
			if (_radio.packet_rx_data_count == free_count_rx) {
    e196:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    e19a:	4283      	cmp	r3, r0
    e19c:	f040 8231 	bne.w	e602 <isr_rx_conn_pkt_ctrl+0x120a>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    e1a0:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    e1a4:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    e1a8:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    e1aa:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    e1ac:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    e1b0:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    e1b4:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    e1b8:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    e1bc:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    e1c0:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    e1c4:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    e1c8:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    e1cc:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    e1d0:	2303      	movs	r3, #3
    e1d2:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    e1d6:	2e00      	cmp	r6, #0
    e1d8:	f43f a9e4 	beq.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e1dc:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    e1de:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    e1e2:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e1e6:	f043 0303 	orr.w	r3, r3, #3
    e1ea:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    e1ec:	2309      	movs	r3, #9
    e1ee:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e1f0:	2315      	movs	r3, #21
    e1f2:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    e1f4:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    e1f6:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    e1fa:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    e1fe:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    e200:	f7fd fce2 	bl	bbc8 <ctrl_tx_enqueue>
    e204:	f7ff b9ce 	b.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_tx = 0;
    e208:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    e20c:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    e210:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    e214:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    e218:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    e21a:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    e21e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    e222:	d103      	bne.n	e22c <isr_rx_conn_pkt_ctrl+0xe34>
    e224:	45c6      	cmp	lr, r8
    e226:	d101      	bne.n	e22c <isr_rx_conn_pkt_ctrl+0xe34>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    e228:	4550      	cmp	r0, sl
    e22a:	d0d4      	beq.n	e1d6 <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    e22c:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    e22e:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    e232:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    e236:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    e238:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    e23c:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    e23e:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    e242:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    e246:	702b      	strb	r3, [r5, #0]
    e248:	e7c5      	b.n	e1d6 <isr_rx_conn_pkt_ctrl+0xdde>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    e24a:	7a41      	ldrb	r1, [r0, #9]
    e24c:	2016      	movs	r0, #22
    e24e:	f7fb fc57 	bl	9b00 <pdu_len_cmp>
    e252:	2800      	cmp	r0, #0
    e254:	f000 81ba 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_MASTER) {
    e258:	4830      	ldr	r0, [pc, #192]	; (e31c <isr_rx_conn_pkt_ctrl+0xf24>)
    e25a:	7cc3      	ldrb	r3, [r0, #19]
    e25c:	2b04      	cmp	r3, #4
    e25e:	d169      	bne.n	e334 <isr_rx_conn_pkt_ctrl+0xf3c>
			if ((_radio.conn_curr->llcp_phy.ack !=
    e260:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    e264:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    e268:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    e26c:	428b      	cmp	r3, r1
    e26e:	d00a      	beq.n	e286 <isr_rx_conn_pkt_ctrl+0xe8e>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    e270:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    e274:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    e278:	3a01      	subs	r2, #1
    e27a:	2a02      	cmp	r2, #2
    e27c:	d803      	bhi.n	e286 <isr_rx_conn_pkt_ctrl+0xe8e>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e27e:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    e280:	2116      	movs	r1, #22
    e282:	f7ff bba5 	b.w	d9d0 <isr_rx_conn_pkt_ctrl+0x5d8>
			} else if (((_radio.conn_curr->llcp_req !=
    e286:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    e28a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    e28e:	4295      	cmp	r5, r2
    e290:	d003      	beq.n	e29a <isr_rx_conn_pkt_ctrl+0xea2>
				     _radio.conn_curr->llcp_ack) &&
    e292:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    e296:	2a03      	cmp	r2, #3
    e298:	d105      	bne.n	e2a6 <isr_rx_conn_pkt_ctrl+0xeae>
				     LLCP_ENCRYPTION)) ||
    e29a:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    e29e:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    e2a2:	4295      	cmp	r5, r2
    e2a4:	d001      	beq.n	e2aa <isr_rx_conn_pkt_ctrl+0xeb2>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e2a6:	222a      	movs	r2, #42	; 0x2a
    e2a8:	e7ea      	b.n	e280 <isr_rx_conn_pkt_ctrl+0xe88>
				_radio.conn_curr->llcp_phy.state =
    e2aa:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    e2ae:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    e2b0:	f042 0203 	orr.w	r2, r2, #3
    e2b4:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    e2b8:	d116      	bne.n	e2e8 <isr_rx_conn_pkt_ctrl+0xef0>
					_radio.conn_curr->llcp_phy.ack--;
    e2ba:	3b01      	subs	r3, #1
    e2bc:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    e2c0:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    e2c4:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    e2c8:	f36f 0341 	bfc	r3, #1, #1
    e2cc:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    e2d0:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    e2d4:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    e2d8:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    e2dc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e2e0:	f362 1347 	bfi	r3, r2, #5, #3
    e2e4:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    e2e8:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    e2ec:	7b62      	ldrb	r2, [r4, #13]
    e2ee:	f3c3 0182 	ubfx	r1, r3, #2, #3
    e2f2:	400a      	ands	r2, r1
    e2f4:	f362 0384 	bfi	r3, r2, #2, #3
    e2f8:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    e2fc:	7b22      	ldrb	r2, [r4, #12]
    e2fe:	b2db      	uxtb	r3, r3
    e300:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e304:	f362 1347 	bfi	r3, r2, #5, #3
    e308:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    e30c:	f7ff b94a 	b.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
    e310:	0001496d 	.word	0x0001496d
    e314:	00016bd6 	.word	0x00016bd6
    e318:	20000a24 	.word	0x20000a24
    e31c:	200008c8 	.word	0x200008c8
    e320:	000156bc 	.word	0x000156bc
    e324:	00016bbd 	.word	0x00016bbd
    e328:	0001570b 	.word	0x0001570b
    e32c:	000174b7 	.word	0x000174b7
    e330:	0001702f 	.word	0x0001702f
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    e334:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e338:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e33c:	f7f8 fe29 	bl	6f92 <mem_acquire>
	if (!node_tx) {
    e340:	4601      	mov	r1, r0
    e342:	2800      	cmp	r0, #0
    e344:	f43f aa6b 	beq.w	d81e <isr_rx_conn_pkt_ctrl+0x426>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    e348:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e34c:	2202      	movs	r2, #2
    e34e:	f362 0301 	bfi	r3, r2, #0, #2
    e352:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    e356:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e35a:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e35e:	4293      	cmp	r3, r2
    e360:	d11a      	bne.n	e398 <isr_rx_conn_pkt_ctrl+0xfa0>
		conn->llcp_phy.ack--;
    e362:	3b01      	subs	r3, #1
    e364:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    e368:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    e36c:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    e370:	f36f 0341 	bfc	r3, #1, #1
    e374:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    e378:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e37c:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    e380:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    e384:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e388:	f362 1347 	bfi	r3, r2, #5, #3
    e38c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    e390:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    e394:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    e398:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e39c:	7b62      	ldrb	r2, [r4, #13]
    e39e:	f3c3 0082 	ubfx	r0, r3, #2, #3
    e3a2:	4002      	ands	r2, r0
    e3a4:	f362 0384 	bfi	r3, r2, #2, #3
    e3a8:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    e3ac:	7b22      	ldrb	r2, [r4, #12]
    e3ae:	b2db      	uxtb	r3, r3
    e3b0:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e3b4:	f362 1347 	bfi	r3, r2, #5, #3
    e3b8:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e3bc:	790b      	ldrb	r3, [r1, #4]
    e3be:	f043 0303 	orr.w	r3, r3, #3
    e3c2:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    e3c4:	2303      	movs	r3, #3
    e3c6:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    e3c8:	2317      	movs	r3, #23
    e3ca:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    e3cc:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    e3d0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e3d4:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    e3d6:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    e3da:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e3de:	724b      	strb	r3, [r1, #9]
    e3e0:	f7ff ba2f 	b.w	d842 <isr_rx_conn_pkt_ctrl+0x44a>
		if (_radio.conn_curr->role ||
    e3e4:	4e90      	ldr	r6, [pc, #576]	; (e628 <isr_rx_conn_pkt_ctrl+0x1230>)
    e3e6:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e3ea:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e3ee:	2b00      	cmp	r3, #0
    e3f0:	f2c0 80ec 	blt.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    e3f4:	7a41      	ldrb	r1, [r0, #9]
    e3f6:	2017      	movs	r0, #23
    e3f8:	f7fb fb82 	bl	9b00 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e3fc:	2800      	cmp	r0, #0
    e3fe:	f000 80e5 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		if ((_radio.role == ROLE_MASTER) &&
    e402:	7cf3      	ldrb	r3, [r6, #19]
    e404:	2b04      	cmp	r3, #4
    e406:	f47f a8cd 	bne.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
    e40a:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e40e:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e412:	429a      	cmp	r2, r3
    e414:	f43f a8c6 	beq.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_phy.state ==
    e418:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    e41c:	f003 0203 	and.w	r2, r3, #3
    e420:	2a02      	cmp	r2, #2
    e422:	f47f a8bf 	bne.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    e426:	f043 0303 	orr.w	r3, r3, #3
    e42a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    e42e:	7b62      	ldrb	r2, [r4, #13]
    e430:	f3c3 0182 	ubfx	r1, r3, #2, #3
    e434:	400a      	ands	r2, r1
    e436:	f362 0384 	bfi	r3, r2, #2, #3
    e43a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    e43e:	7b22      	ldrb	r2, [r4, #12]
    e440:	b2db      	uxtb	r3, r3
    e442:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e446:	f362 1347 	bfi	r3, r2, #5, #3
    e44a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    e44e:	f7ff b85c 	b.w	d50a <isr_rx_conn_pkt_ctrl+0x112>
		if (!_radio.conn_curr->role ||
    e452:	4b75      	ldr	r3, [pc, #468]	; (e628 <isr_rx_conn_pkt_ctrl+0x1230>)
    e454:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    e458:	f996 301d 	ldrsb.w	r3, [r6, #29]
    e45c:	2b00      	cmp	r3, #0
    e45e:	f280 80b5 	bge.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    e462:	7a41      	ldrb	r1, [r0, #9]
    e464:	2018      	movs	r0, #24
    e466:	f7fb fb4b 	bl	9b00 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e46a:	2800      	cmp	r0, #0
    e46c:	f000 80ae 	beq.w	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    e470:	7b27      	ldrb	r7, [r4, #12]
    e472:	7b62      	ldrb	r2, [r4, #13]
    e474:	ea47 0002 	orr.w	r0, r7, r2
    e478:	f010 0007 	ands.w	r0, r0, #7
    e47c:	d125      	bne.n	e4ca <isr_rx_conn_pkt_ctrl+0x10d2>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e47e:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    e482:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e486:	4293      	cmp	r3, r2
    e488:	f43f a88c 	beq.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    e48c:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e490:	f003 0303 	and.w	r3, r3, #3
    e494:	2b02      	cmp	r3, #2
    e496:	f47f a885 	bne.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!conn->llcp_phy.cmd) {
    e49a:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e49e:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    e4a2:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    e4a4:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    e4a8:	f57f a87c 	bpl.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e4ac:	230c      	movs	r3, #12
		upd->status = 0;
    e4ae:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e4b0:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    e4b2:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    e4b6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e4ba:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    e4bc:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    e4c0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e4c4:	7363      	strb	r3, [r4, #13]
    e4c6:	f7ff ba6e 	b.w	d9a6 <isr_rx_conn_pkt_ctrl+0x5ae>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    e4ca:	89e0      	ldrh	r0, [r4, #14]
    e4cc:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    e4ce:	1ac3      	subs	r3, r0, r3
    e4d0:	041b      	lsls	r3, r3, #16
    e4d2:	f100 80a4 	bmi.w	e61e <isr_rx_conn_pkt_ctrl+0x1226>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e4d6:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    e4da:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    e4de:	428b      	cmp	r3, r1
    e4e0:	d005      	beq.n	e4ee <isr_rx_conn_pkt_ctrl+0x10f6>
    e4e2:	4b52      	ldr	r3, [pc, #328]	; (e62c <isr_rx_conn_pkt_ctrl+0x1234>)
    e4e4:	9301      	str	r3, [sp, #4]
    e4e6:	9300      	str	r3, [sp, #0]
    e4e8:	4b51      	ldr	r3, [pc, #324]	; (e630 <isr_rx_conn_pkt_ctrl+0x1238>)
    e4ea:	f7fe bfcb 	b.w	d484 <isr_rx_conn_pkt_ctrl+0x8c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e4ee:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    e4f2:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e4f6:	42a3      	cmp	r3, r4
    e4f8:	d014      	beq.n	e524 <isr_rx_conn_pkt_ctrl+0x112c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    e4fa:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e4fe:	f003 0303 	and.w	r3, r3, #3
    e502:	2b02      	cmp	r3, #2
    e504:	d10e      	bne.n	e524 <isr_rx_conn_pkt_ctrl+0x112c>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e506:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e50a:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e50e:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    e512:	f3c3 0340 	ubfx	r3, r3, #1, #1
    e516:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    e51a:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e51c:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    e520:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e524:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    e528:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e52c:	f002 0207 	and.w	r2, r2, #7
    e530:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    e534:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    e538:	f36f 0300 	bfc	r3, #0, #1
    e53c:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    e540:	2008      	movs	r0, #8
	conn->llcp_ack--;
    e542:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    e544:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    e548:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    e54c:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    e550:	2b00      	cmp	r3, #0
    e552:	f43f a827 	beq.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    e556:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    e55a:	f362 0302 	bfi	r3, r2, #0, #3
    e55e:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    e562:	f7ff b81f 	b.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    e566:	4e30      	ldr	r6, [pc, #192]	; (e628 <isr_rx_conn_pkt_ctrl+0x1230>)
    e568:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e56c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e570:	2b00      	cmp	r3, #0
    e572:	db2b      	blt.n	e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    e574:	7a41      	ldrb	r1, [r0, #9]
    e576:	2019      	movs	r0, #25
    e578:	f7fb fac2 	bl	9b00 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e57c:	b330      	cbz	r0, e5cc <isr_rx_conn_pkt_ctrl+0x11d4>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    e57e:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    e582:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    e586:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    e58a:	7b22      	ldrb	r2, [r4, #12]
    e58c:	f003 0307 	and.w	r3, r3, #7
    e590:	4213      	tst	r3, r2
    e592:	f43f a807 	beq.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
			if (conn->llcp_req != conn->llcp_ack) {
    e596:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    e59a:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e59e:	429a      	cmp	r2, r3
    e5a0:	f47f a800 	bne.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
			memcpy(&conn->llcp.chan_map.chm[0],
    e5a4:	2205      	movs	r2, #5
    e5a6:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    e5aa:	f105 0079 	add.w	r0, r5, #121	; 0x79
    e5ae:	f7f3 fb25 	bl	1bfc <memcpy>
			conn->llcp.chan_map.initiate = 1;
    e5b2:	2301      	movs	r3, #1
    e5b4:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    e5b8:	2302      	movs	r3, #2
    e5ba:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    e5be:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e5c2:	3b01      	subs	r3, #1
    e5c4:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    e5c8:	f7fe bfec 	b.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
		nack = unknown_rsp_send(_radio.conn_curr,
    e5cc:	4816      	ldr	r0, [pc, #88]	; (e628 <isr_rx_conn_pkt_ctrl+0x1230>)
    e5ce:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e5d2:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e5d6:	f7f8 fcdc 	bl	6f92 <mem_acquire>
	if (!node_tx) {
    e5da:	4601      	mov	r1, r0
    e5dc:	2800      	cmp	r0, #0
    e5de:	f43f a91e 	beq.w	d81e <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e5e2:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    e5e4:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e5e6:	f043 0303 	orr.w	r3, r3, #3
    e5ea:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    e5ec:	2302      	movs	r3, #2
    e5ee:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    e5f0:	2307      	movs	r3, #7
    e5f2:	71c3      	strb	r3, [r0, #7]
    e5f4:	f7ff b94f 	b.w	d896 <isr_rx_conn_pkt_ctrl+0x49e>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e5f8:	2328      	movs	r3, #40	; 0x28
    e5fa:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    e5fe:	f7fe bfd1 	b.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
	if (node_tx) {
    e602:	2e00      	cmp	r6, #0
    e604:	f43f a90b 	beq.w	d81e <isr_rx_conn_pkt_ctrl+0x426>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    e608:	490a      	ldr	r1, [pc, #40]	; (e634 <isr_rx_conn_pkt_ctrl+0x123c>)
    e60a:	4630      	mov	r0, r6
    e60c:	f7f8 fcdb 	bl	6fc6 <mem_release>
    e610:	f7ff b905 	b.w	d81e <isr_rx_conn_pkt_ctrl+0x426>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e614:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    e616:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e618:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e61a:	4693      	mov	fp, r2
    e61c:	e5db      	b.n	e1d6 <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e61e:	2328      	movs	r3, #40	; 0x28
    e620:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    e624:	f7fe bfbe 	b.w	d5a4 <isr_rx_conn_pkt_ctrl+0x1ac>
    e628:	200008c8 	.word	0x200008c8
    e62c:	0001496d 	.word	0x0001496d
    e630:	00016f40 	.word	0x00016f40
    e634:	20000a24 	.word	0x20000a24

0000e638 <isr>:
{
    e638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e63c:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    e63e:	f003 fec9 	bl	123d4 <radio_is_done>
    e642:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    e644:	b366      	cbz	r6, e6a0 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    e646:	f003 fee5 	bl	12414 <radio_crc_is_valid>
    e64a:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    e64c:	f003 ff66 	bl	1251c <radio_filter_has_match>
    e650:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    e654:	f003 ff6c 	bl	12530 <radio_filter_match_get>
    e658:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    e65c:	f004 f950 	bl	12900 <radio_ar_has_match>
    e660:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    e664:	f004 f93a 	bl	128dc <radio_ar_match_get>
    e668:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    e66c:	f003 ff20 	bl	124b0 <radio_rssi_is_ready>
    e670:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    e672:	4cb4      	ldr	r4, [pc, #720]	; (e944 <isr+0x30c>)
	radio_status_reset();
    e674:	f003 fe98 	bl	123a8 <radio_status_reset>
	radio_tmr_status_reset();
    e678:	f003 ff6c 	bl	12554 <radio_tmr_status_reset>
	radio_filter_status_reset();
    e67c:	f003 ff46 	bl	1250c <radio_filter_status_reset>
	radio_ar_status_reset();
    e680:	f004 f932 	bl	128e8 <radio_ar_status_reset>
	radio_rssi_status_reset();
    e684:	f003 ff0c 	bl	124a0 <radio_rssi_status_reset>
	switch (_radio.state) {
    e688:	7d23      	ldrb	r3, [r4, #20]
    e68a:	2b05      	cmp	r3, #5
    e68c:	f201 846e 	bhi.w	ff6c <isr+0x1934>
    e690:	e8df f013 	tbh	[pc, r3, lsl #1]
    e694:	00cd007c 	.word	0x00cd007c
    e698:	0a1c000e 	.word	0x0a1c000e
    e69c:	0a1c0a1c 	.word	0x0a1c0a1c
		devmatch_id = irkmatch_id = 0xFF;
    e6a0:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    e6a4:	4635      	mov	r5, r6
    e6a6:	46b2      	mov	sl, r6
    e6a8:	46b1      	mov	r9, r6
    e6aa:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    e6ac:	46d8      	mov	r8, fp
    e6ae:	e7e0      	b.n	e672 <isr+0x3a>
	_radio.state = STATE_RX;
    e6b0:	2301      	movs	r3, #1
    e6b2:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    e6b4:	f004 f850 	bl	12758 <radio_tmr_tifs_base_get>
    e6b8:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    e6ba:	2096      	movs	r0, #150	; 0x96
    e6bc:	f003 ff58 	bl	12570 <radio_tmr_tifs_set>
	switch (_radio.role) {
    e6c0:	7ce3      	ldrb	r3, [r4, #19]
    e6c2:	3b01      	subs	r3, #1
    e6c4:	2b03      	cmp	r3, #3
    e6c6:	f200 80aa 	bhi.w	e81e <isr+0x1e6>
    e6ca:	e8df f003 	tbb	[pc, r3]
    e6ce:	3202      	.short	0x3202
    e6d0:	6262      	.short	0x6262
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e6d2:	2300      	movs	r3, #0
    e6d4:	461a      	mov	r2, r3
    e6d6:	4619      	mov	r1, r3
    e6d8:	4618      	mov	r0, r3
    e6da:	f003 feb9 	bl	12450 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    e6de:	f003 fea7 	bl	12430 <radio_pkt_scratch_get>
    e6e2:	f003 fe29 	bl	12338 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e6e6:	f003 fe6b 	bl	123c0 <radio_is_ready>
    e6ea:	b138      	cbz	r0, e6fc <isr+0xc4>
		LL_ASSERT(!radio_is_ready());
    e6ec:	4b96      	ldr	r3, [pc, #600]	; (e948 <isr+0x310>)
    e6ee:	9301      	str	r3, [sp, #4]
    e6f0:	9300      	str	r3, [sp, #0]
    e6f2:	4b96      	ldr	r3, [pc, #600]	; (e94c <isr+0x314>)
	LL_ASSERT(!radio_is_ready());
    e6f4:	4a96      	ldr	r2, [pc, #600]	; (e950 <isr+0x318>)
    e6f6:	4997      	ldr	r1, [pc, #604]	; (e954 <isr+0x31c>)
    e6f8:	4897      	ldr	r0, [pc, #604]	; (e958 <isr+0x320>)
    e6fa:	e34b      	b.n	ed94 <isr+0x75c>
		if (ctrl_rl_enabled()) {
    e6fc:	f003 f95e 	bl	119bc <ctrl_rl_enabled>
    e700:	b138      	cbz	r0, e712 <isr+0xda>
			u8_t count, *irks = ctrl_irks_get(&count);
    e702:	a810      	add	r0, sp, #64	; 0x40
    e704:	f002 feaa 	bl	1145c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e708:	4601      	mov	r1, r0
    e70a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e70e:	f004 f8b3 	bl	12878 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e712:	2100      	movs	r1, #0
    e714:	4608      	mov	r0, r1
    e716:	f003 fe24 	bl	12362 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e71a:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e71c:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e71e:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e720:	4608      	mov	r0, r1
    e722:	f003 fe1a 	bl	1235a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e726:	1a28      	subs	r0, r5, r0
    e728:	f003 ffac 	bl	12684 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    e72c:	f003 fffc 	bl	12728 <radio_tmr_end_capture>
    e730:	e02c      	b.n	e78c <isr+0x154>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e732:	2300      	movs	r3, #0
    e734:	461a      	mov	r2, r3
    e736:	4619      	mov	r1, r3
    e738:	4618      	mov	r0, r3
    e73a:	f003 fe89 	bl	12450 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    e73e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e742:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    e746:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e74a:	3008      	adds	r0, #8
    e74c:	f003 fdf4 	bl	12338 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e750:	f003 fe36 	bl	123c0 <radio_is_ready>
    e754:	2800      	cmp	r0, #0
    e756:	d1c9      	bne.n	e6ec <isr+0xb4>
		if (ctrl_rl_enabled()) {
    e758:	f003 f930 	bl	119bc <ctrl_rl_enabled>
    e75c:	b138      	cbz	r0, e76e <isr+0x136>
			u8_t count, *irks = ctrl_irks_get(&count);
    e75e:	a810      	add	r0, sp, #64	; 0x40
    e760:	f002 fe7c 	bl	1145c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e764:	4601      	mov	r1, r0
    e766:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e76a:	f004 f885 	bl	12878 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e76e:	2100      	movs	r1, #0
    e770:	4608      	mov	r0, r1
    e772:	f003 fdf6 	bl	12362 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e776:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e778:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e77a:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e77c:	4608      	mov	r0, r1
    e77e:	f003 fdec 	bl	1235a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e782:	1a28      	subs	r0, r5, r0
    e784:	f003 ff7e 	bl	12684 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    e788:	f003 fe7a 	bl	12480 <radio_rssi_measure>
}
    e78c:	b013      	add	sp, #76	; 0x4c
    e78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e792:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    e796:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e79a:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e79e:	2100      	movs	r1, #0
    e7a0:	09d3      	lsrs	r3, r2, #7
    e7a2:	f000 0007 	and.w	r0, r0, #7
    e7a6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e7aa:	f003 fe51 	bl	12450 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e7ae:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e7b2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    e7b6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e7ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    e7be:	3108      	adds	r1, #8
    e7c0:	f7fb fd5a 	bl	a278 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    e7c4:	f003 fdfc 	bl	123c0 <radio_is_ready>
    e7c8:	2800      	cmp	r0, #0
    e7ca:	d18f      	bne.n	e6ec <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e7cc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    e7d0:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e7d4:	2101      	movs	r1, #1
    e7d6:	f000 0007 	and.w	r0, r0, #7
    e7da:	f003 fdc2 	bl	12362 <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e7de:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    e7e2:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    e7e6:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    e7ea:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    e7ec:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e7ee:	4405      	add	r5, r0
	switch (phy) {
    e7f0:	d013      	beq.n	e81a <isr+0x1e2>
		return 40;
    e7f2:	2b04      	cmp	r3, #4
    e7f4:	bf0c      	ite	eq
    e7f6:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    e7fa:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e7fc:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    e7fe:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    e802:	09c1      	lsrs	r1, r0, #7
    e804:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e808:	f003 fda7 	bl	1235a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e80c:	1a28      	subs	r0, r5, r0
    e80e:	f003 ff39 	bl	12684 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    e812:	2001      	movs	r0, #1
    e814:	f7fc fb80 	bl	af18 <packet_tx_enqueue>
    e818:	e7b8      	b.n	e78c <isr+0x154>
		return 24;
    e81a:	2018      	movs	r0, #24
    e81c:	e7ee      	b.n	e7fc <isr+0x1c4>
		LL_ASSERT(0);
    e81e:	4b4a      	ldr	r3, [pc, #296]	; (e948 <isr+0x310>)
    e820:	9301      	str	r3, [sp, #4]
    e822:	9300      	str	r3, [sp, #0]
    e824:	4b49      	ldr	r3, [pc, #292]	; (e94c <isr+0x314>)
		LL_ASSERT(0);
    e826:	4a4a      	ldr	r2, [pc, #296]	; (e950 <isr+0x318>)
    e828:	494a      	ldr	r1, [pc, #296]	; (e954 <isr+0x31c>)
    e82a:	484c      	ldr	r0, [pc, #304]	; (e95c <isr+0x324>)
    e82c:	e2b2      	b.n	ed94 <isr+0x75c>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    e82e:	b926      	cbnz	r6, e83a <isr+0x202>
		_radio.state = STATE_CLOSE;
    e830:	2303      	movs	r3, #3
    e832:	7523      	strb	r3, [r4, #20]
		radio_disable();
    e834:	f003 fda6 	bl	12384 <radio_disable>
    e838:	e7a8      	b.n	e78c <isr+0x154>
	switch (_radio.role) {
    e83a:	7ce3      	ldrb	r3, [r4, #19]
    e83c:	3b01      	subs	r3, #1
    e83e:	2b03      	cmp	r3, #3
    e840:	f201 813e 	bhi.w	fac0 <isr+0x1488>
    e844:	e8df f013 	tbh	[pc, r3, lsl #1]
    e848:	02ae0004 	.word	0x02ae0004
    e84c:	05e305e3 	.word	0x05e305e3
		if (crc_ok) {
    e850:	2f00      	cmp	r7, #0
    e852:	d0ed      	beq.n	e830 <isr+0x1f8>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e854:	f1ba 0f00 	cmp.w	sl, #0
    e858:	d039      	beq.n	e8ce <isr+0x296>
    e85a:	4658      	mov	r0, fp
    e85c:	f002 fe5c 	bl	11518 <ctrl_rl_irk_idx>
    e860:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    e864:	f003 fde4 	bl	12430 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e868:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    e86c:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e86e:	232b      	movs	r3, #43	; 0x2b
    e870:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e872:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e874:	fb11 3302 	smlabb	r3, r1, r2, r3
    e878:	930a      	str	r3, [sp, #40]	; 0x28
    e87a:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e87c:	f000 030f 	and.w	r3, r0, #15
    e880:	2b03      	cmp	r3, #3
    e882:	d10a      	bne.n	e89a <isr+0x262>
    e884:	7873      	ldrb	r3, [r6, #1]
    e886:	2b0c      	cmp	r3, #12
    e888:	d107      	bne.n	e89a <isr+0x262>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e88a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e88e:	065f      	lsls	r7, r3, #25
    e890:	d51f      	bpl.n	e8d2 <isr+0x29a>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e892:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    e896:	0658      	lsls	r0, r3, #25
    e898:	d449      	bmi.n	e92e <isr+0x2f6>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    e89a:	7830      	ldrb	r0, [r6, #0]
    e89c:	f000 030f 	and.w	r3, r0, #15
    e8a0:	2b05      	cmp	r3, #5
    e8a2:	d1c5      	bne.n	e830 <isr+0x1f8>
    e8a4:	7873      	ldrb	r3, [r6, #1]
    e8a6:	2b22      	cmp	r3, #34	; 0x22
    e8a8:	d1c2      	bne.n	e830 <isr+0x1f8>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    e8aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e8ac:	5ce3      	ldrb	r3, [r4, r3]
    e8ae:	f003 030f 	and.w	r3, r3, #15
    e8b2:	2b01      	cmp	r3, #1
    e8b4:	f040 814f 	bne.w	eb56 <isr+0x51e>
					    ci->connect_ind.init_addr,
    e8b8:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    e8ba:	aa10      	add	r2, sp, #64	; 0x40
    e8bc:	4639      	mov	r1, r7
    e8be:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e8c2:	f003 f81f 	bl	11904 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    e8c6:	2800      	cmp	r0, #0
    e8c8:	d14c      	bne.n	e964 <isr+0x32c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e8ca:	2000      	movs	r0, #0
    e8cc:	e05a      	b.n	e984 <isr+0x34c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e8ce:	20ff      	movs	r0, #255	; 0xff
    e8d0:	e7c6      	b.n	e860 <isr+0x228>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    e8d2:	aa10      	add	r2, sp, #64	; 0x40
    e8d4:	1cb1      	adds	r1, r6, #2
    e8d6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e8da:	f003 f813 	bl	11904 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e8de:	2800      	cmp	r0, #0
    e8e0:	d0d7      	beq.n	e892 <isr+0x25a>
	return (adv->tx_addr == sr->rx_addr) &&
    e8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e8e4:	7832      	ldrb	r2, [r6, #0]
    e8e6:	5ce3      	ldrb	r3, [r4, r3]
    e8e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e8ec:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e8f0:	d1d3      	bne.n	e89a <isr+0x262>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    e8f2:	2206      	movs	r2, #6
    e8f4:	f106 0108 	add.w	r1, r6, #8
    e8f8:	1ca8      	adds	r0, r5, #2
    e8fa:	f7f3 f96a 	bl	1bd2 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    e8fe:	2800      	cmp	r0, #0
    e900:	d1cb      	bne.n	e89a <isr+0x262>
		_radio.state = STATE_CLOSE;
    e902:	2303      	movs	r3, #3
    e904:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    e906:	f003 fdad 	bl	12464 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    e90a:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    e90e:	2327      	movs	r3, #39	; 0x27
    e910:	fb03 4000 	mla	r0, r3, r0, r4
    e914:	307b      	adds	r0, #123	; 0x7b
    e916:	f003 fd15 	bl	12344 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    e91a:	f003 fd51 	bl	123c0 <radio_is_ready>
    e91e:	2800      	cmp	r0, #0
    e920:	f43f af34 	beq.w	e78c <isr+0x154>
    e924:	4b08      	ldr	r3, [pc, #32]	; (e948 <isr+0x310>)
    e926:	9301      	str	r3, [sp, #4]
    e928:	9300      	str	r3, [sp, #0]
    e92a:	4b0d      	ldr	r3, [pc, #52]	; (e960 <isr+0x328>)
    e92c:	e6e2      	b.n	e6f4 <isr+0xbc>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e92e:	f1b9 0f00 	cmp.w	r9, #0
    e932:	d1d6      	bne.n	e8e2 <isr+0x2aa>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e934:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e938:	f002 fe34 	bl	115a4 <ctrl_irk_whitelisted>
    e93c:	2800      	cmp	r0, #0
    e93e:	d1d0      	bne.n	e8e2 <isr+0x2aa>
    e940:	e7ab      	b.n	e89a <isr+0x262>
    e942:	bf00      	nop
    e944:	200008c8 	.word	0x200008c8
    e948:	0001496d 	.word	0x0001496d
    e94c:	00016b4a 	.word	0x00016b4a
    e950:	000156bc 	.word	0x000156bc
    e954:	0001570b 	.word	0x0001570b
    e958:	00017210 	.word	0x00017210
    e95c:	0001565b 	.word	0x0001565b
    e960:	00016b5d 	.word	0x00016b5d
		       isr_adv_ci_adva_check(adv, ci) &&
    e964:	4631      	mov	r1, r6
    e966:	4628      	mov	r0, r5
    e968:	f7fb ff6e 	bl	a848 <isr_adv_ci_adva_check>
					    rl_idx) &&
    e96c:	2800      	cmp	r0, #0
    e96e:	d0ac      	beq.n	e8ca <isr+0x292>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    e970:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    e974:	2bff      	cmp	r3, #255	; 0xff
    e976:	f000 80db 	beq.w	eb30 <isr+0x4f8>
		return rl_idx == _radio.advertiser.rl_idx;
    e97a:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    e97e:	1ac1      	subs	r1, r0, r3
    e980:	4248      	negs	r0, r1
    e982:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e984:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    e988:	2800      	cmp	r0, #0
    e98a:	f43f af51 	beq.w	e830 <isr+0x1f8>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    e98e:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    e992:	b133      	cbz	r3, e9a2 <isr+0x36a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    e994:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    e998:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    e99c:	429a      	cmp	r2, r3
    e99e:	f47f af47 	bne.w	e830 <isr+0x1f8>
    e9a2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    e9a6:	2b00      	cmp	r3, #0
    e9a8:	f43f af42 	beq.w	e830 <isr+0x1f8>
			node_rx = packet_rx_reserve_get(4);
    e9ac:	2004      	movs	r0, #4
    e9ae:	f7fb f905 	bl	9bbc <packet_rx_reserve_get>
		if (!node_rx) {
    e9b2:	4607      	mov	r7, r0
    e9b4:	2800      	cmp	r0, #0
    e9b6:	f43f af3b 	beq.w	e830 <isr+0x1f8>
		_radio.state = STATE_STOP;
    e9ba:	f04f 0904 	mov.w	r9, #4
    e9be:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    e9c2:	f003 fcdf 	bl	12384 <radio_disable>
		conn = _radio.advertiser.conn;
    e9c6:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e9ca:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    e9ce:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e9d0:	f44f 72aa 	mov.w	r2, #340	; 0x154
    e9d4:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    e9d6:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e9da:	f7f8 fb12 	bl	7002 <mem_index_get>
		memcpy(&conn->access_addr[0],
    e9de:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e9e2:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    e9e4:	2203      	movs	r2, #3
    e9e6:	f106 0112 	add.w	r1, r6, #18
    e9ea:	f105 0014 	add.w	r0, r5, #20
    e9ee:	f7f3 f905 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    e9f2:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    e9f6:	464a      	mov	r2, r9
    e9f8:	f106 010e 	add.w	r1, r6, #14
    e9fc:	4650      	mov	r0, sl
    e9fe:	f7f3 f8fd 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    ea02:	2205      	movs	r2, #5
    ea04:	f106 011e 	add.w	r1, r6, #30
    ea08:	4640      	mov	r0, r8
    ea0a:	f7f3 f8f7 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    ea0e:	2105      	movs	r1, #5
    ea10:	4640      	mov	r0, r8
    ea12:	f7f8 fc69 	bl	72e8 <util_ones_count_get>
		conn->data_chan_count =
    ea16:	7f6b      	ldrb	r3, [r5, #29]
    ea18:	f360 0305 	bfi	r3, r0, #0, #6
    ea1c:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    ea1e:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    ea22:	f3c3 0304 	ubfx	r3, r3, #0, #5
    ea26:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    ea28:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    ea2a:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    ea2c:	f240 48e2 	movw	r8, #1250	; 0x4e2
    ea30:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    ea34:	7ef2      	ldrb	r2, [r6, #27]
    ea36:	7eb3      	ldrb	r3, [r6, #26]
    ea38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    ea3c:	4651      	mov	r1, sl
    ea3e:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    ea40:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    ea42:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    ea46:	f7f3 f8d9 	bl	1bfc <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    ea4a:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ea4c:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    ea4e:	f242 7210 	movw	r2, #10000	; 0x2710
    ea52:	fb02 8303 	mla	r3, r2, r3, r8
    ea56:	3b01      	subs	r3, #1
    ea58:	fbb3 f3f8 	udiv	r3, r3, r8
    ea5c:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    ea5e:	4b54      	ldr	r3, [pc, #336]	; (ebb0 <isr+0x578>)
    ea60:	4443      	add	r3, r8
    ea62:	fbb3 f3f8 	udiv	r3, r3, r8
    ea66:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ea6a:	4b52      	ldr	r3, [pc, #328]	; (ebb4 <isr+0x57c>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ea6c:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ea6e:	4443      	add	r3, r8
    ea70:	fbb3 f3f8 	udiv	r3, r3, r8
    ea74:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ea76:	4282      	cmp	r2, r0
    ea78:	4613      	mov	r3, r2
    ea7a:	bfc4      	itt	gt
    ea7c:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    ea80:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ea82:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ea86:	bfc4      	itt	gt
    ea88:	18d2      	addgt	r2, r2, r3
    ea8a:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    ea8c:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ea8e:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    ea92:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    ea94:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    ea96:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    ea98:	2300      	movs	r3, #0
    ea9a:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    ea9c:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    ea9e:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    eaa2:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    eaa4:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    eaa8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    eaac:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    eaae:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    eab2:	464a      	mov	r2, r9
    eab4:	f107 001b 	add.w	r0, r7, #27
    eab8:	f7f3 f8a0 	bl	1bfc <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    eabc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    eac0:	f107 030e 	add.w	r3, r7, #14
    eac4:	28ff      	cmp	r0, #255	; 0xff
    eac6:	930b      	str	r3, [sp, #44]	; 0x2c
    eac8:	f106 0a02 	add.w	sl, r6, #2
    eacc:	f107 0b14 	add.w	fp, r7, #20
    ead0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ead2:	d05f      	beq.n	eb94 <isr+0x55c>
			ll_rl_id_addr_get(rl_idx,
    ead4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ead6:	f107 010d 	add.w	r1, r7, #13
    eada:	f002 fed5 	bl	11888 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    eade:	7b7b      	ldrb	r3, [r7, #13]
    eae0:	3302      	adds	r3, #2
    eae2:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    eae4:	464a      	mov	r2, r9
    eae6:	4651      	mov	r1, sl
    eae8:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    eaea:	f7f3 f887 	bl	1bfc <memcpy>
			pdu_adv->connect_ind.interval;
    eaee:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    eaf0:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    eaf4:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    eaf6:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    eafa:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    eafc:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    eb00:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    eb04:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    eb08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    eb0c:	8c28      	ldrh	r0, [r5, #32]
    eb0e:	f7fb ffaf 	bl	aa70 <rx_fc_lock>
		packet_rx_enqueue();
    eb12:	f7fb febd 	bl	a890 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    eb16:	2003      	movs	r0, #3
    eb18:	f7fb f850 	bl	9bbc <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    eb1c:	2800      	cmp	r0, #0
    eb1e:	d155      	bne.n	ebcc <isr+0x594>
    eb20:	4b25      	ldr	r3, [pc, #148]	; (ebb8 <isr+0x580>)
    eb22:	9301      	str	r3, [sp, #4]
    eb24:	9300      	str	r3, [sp, #0]
    eb26:	4b25      	ldr	r3, [pc, #148]	; (ebbc <isr+0x584>)
			LL_ASSERT(node_rx);
    eb28:	4a25      	ldr	r2, [pc, #148]	; (ebc0 <isr+0x588>)
    eb2a:	4926      	ldr	r1, [pc, #152]	; (ebc4 <isr+0x58c>)
    eb2c:	4826      	ldr	r0, [pc, #152]	; (ebc8 <isr+0x590>)
    eb2e:	e131      	b.n	ed94 <isr+0x75c>
	return (adv->rx_addr == ci->tx_addr) &&
    eb30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    eb32:	5ce2      	ldrb	r2, [r4, r3]
    eb34:	7833      	ldrb	r3, [r6, #0]
    eb36:	f3c3 1380 	ubfx	r3, r3, #6, #1
    eb3a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    eb3e:	f47f aec4 	bne.w	e8ca <isr+0x292>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    eb42:	2206      	movs	r2, #6
    eb44:	4639      	mov	r1, r7
    eb46:	f105 0008 	add.w	r0, r5, #8
    eb4a:	f7f3 f842 	bl	1bd2 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    eb4e:	fab0 f080 	clz	r0, r0
    eb52:	0940      	lsrs	r0, r0, #5
    eb54:	e716      	b.n	e984 <isr+0x34c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    eb56:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    eb5a:	09db      	lsrs	r3, r3, #7
    eb5c:	d00d      	beq.n	eb7a <isr+0x542>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    eb5e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    eb62:	09db      	lsrs	r3, r3, #7
    eb64:	f43f aeb1 	beq.w	e8ca <isr+0x292>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    eb68:	f1b9 0f00 	cmp.w	r9, #0
    eb6c:	d10d      	bne.n	eb8a <isr+0x552>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    eb6e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    eb72:	f002 fd17 	bl	115a4 <ctrl_irk_whitelisted>
    eb76:	b940      	cbnz	r0, eb8a <isr+0x552>
    eb78:	e6a7      	b.n	e8ca <isr+0x292>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    eb7a:	aa10      	add	r2, sp, #64	; 0x40
    eb7c:	1cb1      	adds	r1, r6, #2
    eb7e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    eb82:	f002 febf 	bl	11904 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    eb86:	2800      	cmp	r0, #0
    eb88:	d0e9      	beq.n	eb5e <isr+0x526>
	       isr_adv_ci_adva_check(adv, ci);
    eb8a:	4631      	mov	r1, r6
    eb8c:	4628      	mov	r0, r5
    eb8e:	f7fb fe5b 	bl	a848 <isr_adv_ci_adva_check>
    eb92:	e6f7      	b.n	e984 <isr+0x34c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    eb94:	4619      	mov	r1, r3
    eb96:	464a      	mov	r2, r9
    eb98:	4658      	mov	r0, fp
    eb9a:	f7f3 f85b 	bl	1c54 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    eb9e:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    eba0:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    eba2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    eba6:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    eba8:	464a      	mov	r2, r9
    ebaa:	4651      	mov	r1, sl
    ebac:	e79d      	b.n	eaea <isr+0x4b2>
    ebae:	bf00      	nop
    ebb0:	026259ff 	.word	0x026259ff
    ebb4:	01c9c37f 	.word	0x01c9c37f
    ebb8:	0001496d 	.word	0x0001496d
    ebbc:	00016b5d 	.word	0x00016b5d
    ebc0:	000156bc 	.word	0x000156bc
    ebc4:	0001570b 	.word	0x0001570b
    ebc8:	00017647 	.word	0x00017647
			node_rx->hdr.handle = conn->handle;
    ebcc:	8c2b      	ldrh	r3, [r5, #32]
    ebce:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    ebd0:	230b      	movs	r3, #11
    ebd2:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    ebd4:	7833      	ldrb	r3, [r6, #0]
    ebd6:	f013 0320 	ands.w	r3, r3, #32
    ebda:	d00e      	beq.n	ebfa <isr+0x5c2>
					((u16_t)conn->access_addr[1] << 8) |
    ebdc:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    ebde:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    ebe0:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    ebe2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    ebe6:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    ebe8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    ebec:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    ebee:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    ebf0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    ebf4:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    ebf6:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    ebf8:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    ebfa:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    ebfc:	f7fb fe48 	bl	a890 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    ec00:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    ec04:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    ec08:	497d      	ldr	r1, [pc, #500]	; (ee00 <isr+0x7c8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    ec0a:	0952      	lsrs	r2, r2, #5
    ec0c:	f362 0384 	bfi	r3, r2, #2, #3
    ec10:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    ec14:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    ec18:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    ec1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    ec20:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    ec22:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    ec26:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    ec2a:	4a76      	ldr	r2, [pc, #472]	; (ee04 <isr+0x7cc>)
    ec2c:	f203 233f 	addw	r3, r3, #575	; 0x23f
    ec30:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    ec34:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    ec36:	ea4f 0358 	mov.w	r3, r8, lsr #1
    ec3a:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    ec3c:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    ec3e:	7d73      	ldrb	r3, [r6, #21]
    ec40:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    ec44:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    ec46:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    ec4a:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    ec4c:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    ec4e:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    ec50:	4638      	mov	r0, r7
    ec52:	f003 fb84 	bl	1235e <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    ec56:	496c      	ldr	r1, [pc, #432]	; (ee08 <isr+0x7d0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    ec58:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    ec5a:	f200 4052 	addw	r0, r0, #1106	; 0x452
    ec5e:	a366      	add	r3, pc, #408	; (adr r3, edf8 <isr+0x7c0>)
    ec60:	e9d3 2300 	ldrd	r2, r3, [r3]
    ec64:	fba0 0101 	umull	r0, r1, r0, r1
    ec68:	f7f1 fad4 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    ec6c:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    ec70:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    ec72:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ec74:	4293      	cmp	r3, r2
    ec76:	bf38      	it	cc
    ec78:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    ec7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ec7e:	469a      	mov	sl, r3
		conn_interval_us -=
    ec80:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    ec82:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    ec84:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    ec86:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    ec88:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    ec8c:	f003 fd5e 	bl	1274c <radio_tmr_end_get>
    ec90:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    ec92:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    ec94:	4639      	mov	r1, r7
		conn_offset_us +=
    ec96:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    ec9a:	4638      	mov	r0, r7
    ec9c:	f003 fb5d 	bl	1235a <radio_tx_chain_delay_get>
    eca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eca2:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    eca6:	4499      	add	r9, r3
    eca8:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    ecac:	eba9 030b 	sub.w	r3, r9, fp
    ecb0:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ecb2:	f240 4383 	movw	r3, #1155	; 0x483
    ecb6:	9300      	str	r3, [sp, #0]
    ecb8:	2205      	movs	r2, #5
    ecba:	4b54      	ldr	r3, [pc, #336]	; (ee0c <isr+0x7d4>)
    ecbc:	f8df b148 	ldr.w	fp, [pc, #328]	; ee08 <isr+0x7d0>
    ecc0:	4639      	mov	r1, r7
    ecc2:	4638      	mov	r0, r7
    ecc4:	f7f9 f88c 	bl	7de0 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    ecc8:	f240 4184 	movw	r1, #1156	; 0x484
    eccc:	f7fb ff08 	bl	aae0 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    ecd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ecd2:	5ce3      	ldrb	r3, [r4, r3]
    ecd4:	f003 030f 	and.w	r3, r3, #15
    ecd8:	2b01      	cmp	r3, #1
    ecda:	d106      	bne.n	ecea <isr+0x6b2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ecdc:	9700      	str	r7, [sp, #0]
    ecde:	463b      	mov	r3, r7
    ece0:	2203      	movs	r2, #3
    ece2:	4639      	mov	r1, r7
    ece4:	4638      	mov	r0, r7
    ece6:	f7f9 f87b 	bl	7de0 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ecea:	fba8 890b 	umull	r8, r9, r8, fp
    ecee:	a342      	add	r3, pc, #264	; (adr r3, edf8 <isr+0x7c0>)
    ecf0:	e9d3 2300 	ldrd	r2, r3, [r3]
    ecf4:	4640      	mov	r0, r8
    ecf6:	4649      	mov	r1, r9
    ecf8:	f7f1 fa8c 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ecfc:	f895 3020 	ldrb.w	r3, [r5, #32]
    ed00:	68a4      	ldr	r4, [r4, #8]
    ed02:	9506      	str	r5, [sp, #24]
    ed04:	3307      	adds	r3, #7
    ed06:	b2db      	uxtb	r3, r3
    ed08:	930a      	str	r3, [sp, #40]	; 0x28
    ed0a:	f240 439b 	movw	r3, #1179	; 0x49b
    ed0e:	9308      	str	r3, [sp, #32]
    ed10:	4b3f      	ldr	r3, [pc, #252]	; (ee10 <isr+0x7d8>)
    ed12:	9307      	str	r3, [sp, #28]
    ed14:	4b3f      	ldr	r3, [pc, #252]	; (ee14 <isr+0x7dc>)
    ed16:	9305      	str	r3, [sp, #20]
    ed18:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    ed1a:	4a3f      	ldr	r2, [pc, #252]	; (ee18 <isr+0x7e0>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ed1c:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ed1e:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ed20:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    ed22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ed26:	2307      	movs	r3, #7
    ed28:	2100      	movs	r1, #0
    ed2a:	4343      	muls	r3, r0
    ed2c:	fb02 3301 	mla	r3, r2, r1, r3
    ed30:	fba0 1202 	umull	r1, r2, r0, r2
    ed34:	441a      	add	r2, r3
    ed36:	4608      	mov	r0, r1
    ed38:	ebb8 0000 	subs.w	r0, r8, r0
    ed3c:	4611      	mov	r1, r2
    ed3e:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ed42:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    ed44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ed48:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ed4a:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    ed4c:	f7f1 fa62 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ed50:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ed52:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ed54:	a328      	add	r3, pc, #160	; (adr r3, edf8 <isr+0x7c0>)
    ed56:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ed5a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ed5e:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ed62:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ed64:	f7f1 fa56 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ed68:	eba4 040a 	sub.w	r4, r4, sl
    ed6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ed70:	9000      	str	r0, [sp, #0]
    ed72:	4623      	mov	r3, r4
    ed74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ed76:	4629      	mov	r1, r5
    ed78:	4628      	mov	r0, r5
    ed7a:	f7f8 ff93 	bl	7ca4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ed7e:	f030 0302 	bics.w	r3, r0, #2
    ed82:	f43f ad03 	beq.w	e78c <isr+0x154>
    ed86:	4b25      	ldr	r3, [pc, #148]	; (ee1c <isr+0x7e4>)
    ed88:	9301      	str	r3, [sp, #4]
    ed8a:	9300      	str	r3, [sp, #0]
    ed8c:	4b24      	ldr	r3, [pc, #144]	; (ee20 <isr+0x7e8>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ed8e:	4a25      	ldr	r2, [pc, #148]	; (ee24 <isr+0x7ec>)
    ed90:	4925      	ldr	r1, [pc, #148]	; (ee28 <isr+0x7f0>)
    ed92:	4826      	ldr	r0, [pc, #152]	; (ee2c <isr+0x7f4>)
		LL_ASSERT(0);
    ed94:	f7f2 f8fa 	bl	f8c <printk>
    ed98:	4040      	eors	r0, r0
    ed9a:	f380 8811 	msr	BASEPRI, r0
    ed9e:	f04f 0004 	mov.w	r0, #4
    eda2:	df02      	svc	2
		rl_idx = devmatch_ok ?
    eda4:	f1b9 0f00 	cmp.w	r9, #0
    eda8:	d01c      	beq.n	ede4 <isr+0x7ac>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    edaa:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    edae:	4641      	mov	r1, r8
    edb0:	f3c0 1000 	ubfx	r0, r0, #4, #1
    edb4:	f002 fb5c 	bl	11470 <ctrl_rl_idx>
    edb8:	4680      	mov	r8, r0
		if (crc_ok &&
    edba:	b147      	cbz	r7, edce <isr+0x796>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    edbc:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    edc0:	06da      	lsls	r2, r3, #27
    edc2:	d535      	bpl.n	ee30 <isr+0x7f8>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    edc4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    edc8:	06db      	lsls	r3, r3, #27
    edca:	f100 811d 	bmi.w	f008 <isr+0x9d0>
			_radio.state = STATE_CLOSE;
    edce:	2303      	movs	r3, #3
    edd0:	7523      	strb	r3, [r4, #20]
			radio_disable();
    edd2:	f003 fad7 	bl	12384 <radio_disable>
			_radio.scanner.state = 0;
    edd6:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    edda:	f36f 0341 	bfc	r3, #1, #1
    edde:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    ede2:	e4d3      	b.n	e78c <isr+0x154>
		rl_idx = devmatch_ok ?
    ede4:	f1ba 0f00 	cmp.w	sl, #0
    ede8:	d003      	beq.n	edf2 <isr+0x7ba>
    edea:	4658      	mov	r0, fp
    edec:	f002 fb94 	bl	11518 <ctrl_rl_irk_idx>
    edf0:	e7e2      	b.n	edb8 <isr+0x780>
    edf2:	f04f 08ff 	mov.w	r8, #255	; 0xff
    edf6:	e7e0      	b.n	edba <isr+0x782>
    edf8:	1afd498d 	.word	0x1afd498d
    edfc:	00000007 	.word	0x00000007
    ee00:	00017200 	.word	0x00017200
    ee04:	000f4240 	.word	0x000f4240
    ee08:	3b9aca00 	.word	0x3b9aca00
    ee0c:	0000aae1 	.word	0x0000aae1
    ee10:	0000aaa5 	.word	0x0000aaa5
    ee14:	0000cf4d 	.word	0x0000cf4d
    ee18:	1afd498d 	.word	0x1afd498d
    ee1c:	0001496d 	.word	0x0001496d
    ee20:	00016b5d 	.word	0x00016b5d
    ee24:	000156bc 	.word	0x000156bc
    ee28:	0001570b 	.word	0x0001570b
    ee2c:	00016fe1 	.word	0x00016fe1
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    ee30:	f1b9 0f00 	cmp.w	r9, #0
    ee34:	d005      	beq.n	ee42 <isr+0x80a>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ee36:	4641      	mov	r1, r8
    ee38:	4650      	mov	r0, sl
    ee3a:	f002 fcf1 	bl	11820 <ctrl_rl_idx_allowed>
    ee3e:	2800      	cmp	r0, #0
    ee40:	d0c0      	beq.n	edc4 <isr+0x78c>
	bool dir_report = false;
    ee42:	2300      	movs	r3, #0
    ee44:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    ee48:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    ee4c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    ee50:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ee54:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    ee58:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ee5c:	2b00      	cmp	r3, #0
    ee5e:	f000 80ec 	beq.w	f03a <isr+0xa02>
    ee62:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    ee66:	b133      	cbz	r3, ee76 <isr+0x83e>
				      (_radio.fc_req == _radio.fc_ack)) &&
    ee68:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ee6c:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    ee70:	429a      	cmp	r2, r3
    ee72:	f040 80e2 	bne.w	f03a <isr+0xa02>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    ee76:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    ee7a:	f3c3 1000 	ubfx	r0, r3, #4, #1
    ee7e:	2800      	cmp	r0, #0
    ee80:	f000 80cd 	beq.w	f01e <isr+0x9e6>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    ee84:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    ee88:	f010 000f 	ands.w	r0, r0, #15
    ee8c:	f040 814c 	bne.w	f128 <isr+0xaf0>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    ee90:	f003 fc5c 	bl	1274c <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    ee94:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    ee98:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    ee9c:	48b8      	ldr	r0, [pc, #736]	; (f180 <isr+0xb48>)
    ee9e:	2207      	movs	r2, #7
    eea0:	fba3 0100 	umull	r0, r1, r3, r0
    eea4:	fb02 1103 	mla	r1, r2, r3, r1
    eea8:	a3b3      	add	r3, pc, #716	; (adr r3, f178 <isr+0xb40>)
    eeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    eeae:	f7f1 f9b1 	bl	214 <__aeabi_uldivmod>
    eeb2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    eeb6:	4287      	cmp	r7, r0
    eeb8:	f080 80bf 	bcs.w	f03a <isr+0xa02>
			node_rx = packet_rx_reserve_get(4);
    eebc:	2004      	movs	r0, #4
    eebe:	f7fa fe7d 	bl	9bbc <packet_rx_reserve_get>
		if (node_rx == 0) {
    eec2:	4607      	mov	r7, r0
    eec4:	2800      	cmp	r0, #0
    eec6:	d082      	beq.n	edce <isr+0x796>
		_radio.state = STATE_STOP;
    eec8:	2304      	movs	r3, #4
    eeca:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    eecc:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    eece:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    eed2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    eed6:	f003 faab 	bl	12430 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    eeda:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    eedc:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    eee0:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    eee4:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    eee6:	f899 3008 	ldrb.w	r3, [r9, #8]
    eeea:	7802      	ldrb	r2, [r0, #0]
    eeec:	f3c3 1380 	ubfx	r3, r3, #6, #1
    eef0:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    eef4:	2322      	movs	r3, #34	; 0x22
    eef6:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    eef8:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    eefa:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    eefc:	4640      	mov	r0, r8
    eefe:	f002 fa99 	bl	11434 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    ef02:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    ef06:	4601      	mov	r1, r0
    ef08:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    ef0a:	f013 0f01 	tst.w	r3, #1
    ef0e:	f810 3b02 	ldrb.w	r3, [r0], #2
    ef12:	f000 8114 	beq.w	f13e <isr+0xb06>
    ef16:	2900      	cmp	r1, #0
    ef18:	f000 8111 	beq.w	f13e <isr+0xb06>
			pdu_adv_tx->tx_addr = 1;
    ef1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ef20:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ef22:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ef24:	f7f2 fe6a 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    ef28:	f105 0308 	add.w	r3, r5, #8
    ef2c:	4618      	mov	r0, r3
    ef2e:	2206      	movs	r2, #6
    ef30:	f109 010a 	add.w	r1, r9, #10
    ef34:	930a      	str	r3, [sp, #40]	; 0x28
    ef36:	f7f2 fe61 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    ef3a:	2204      	movs	r2, #4
    ef3c:	f106 0110 	add.w	r1, r6, #16
    ef40:	f105 000e 	add.w	r0, r5, #14
    ef44:	f7f2 fe5a 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    ef48:	2203      	movs	r2, #3
    ef4a:	f106 0114 	add.w	r1, r6, #20
    ef4e:	f105 0012 	add.w	r0, r5, #18
    ef52:	f7f2 fe53 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    ef56:	2301      	movs	r3, #1
    ef58:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    ef5a:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    ef5e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ef62:	4353      	muls	r3, r2
    ef64:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ef66:	f003 fbf1 	bl	1274c <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    ef6a:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    ef6c:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    ef70:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ef72:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    ef76:	bfd8      	it	le
    ef78:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    ef7c:	f1bb 0f00 	cmp.w	fp, #0
    ef80:	f040 80e8 	bne.w	f154 <isr+0xb1c>
			pdu_adv_tx->connect_ind.win_offset = 0;
    ef84:	f885 b016 	strb.w	fp, [r5, #22]
    ef88:	f885 b017 	strb.w	fp, [r5, #23]
    ef8c:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ef8e:	2100      	movs	r1, #0
    ef90:	4608      	mov	r0, r1
    ef92:	f003 f9dd 	bl	12350 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ef96:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ef98:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ef9c:	4608      	mov	r0, r1
    ef9e:	f003 f9dc 	bl	1235a <radio_tx_chain_delay_get>
    efa2:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    efa6:	f100 031e 	add.w	r3, r0, #30
    efaa:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    efac:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    efb0:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    efb2:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    efb6:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    efb8:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    efbc:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    efbe:	f106 0117 	add.w	r1, r6, #23
    efc2:	2205      	movs	r2, #5
    efc4:	f105 001e 	add.w	r0, r5, #30
    efc8:	f7f2 fe18 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.hop =
    efcc:	7fb2      	ldrb	r2, [r6, #30]
    efce:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    efd2:	f362 0304 	bfi	r3, r2, #0, #5
    efd6:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    efda:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    efde:	f362 1347 	bfi	r3, r2, #5, #3
    efe2:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    efe6:	f003 fa3d 	bl	12464 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    efea:	4628      	mov	r0, r5
    efec:	f003 f9aa 	bl	12344 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    eff0:	f003 f9e6 	bl	123c0 <radio_is_ready>
    eff4:	4683      	mov	fp, r0
    eff6:	2800      	cmp	r0, #0
    eff8:	f000 80cc 	beq.w	f194 <isr+0xb5c>
		LL_ASSERT(!radio_is_ready());
    effc:	4b61      	ldr	r3, [pc, #388]	; (f184 <isr+0xb4c>)
    effe:	9301      	str	r3, [sp, #4]
    f000:	9300      	str	r3, [sp, #0]
    f002:	4b61      	ldr	r3, [pc, #388]	; (f188 <isr+0xb50>)
    f004:	f7ff bb76 	b.w	e6f4 <isr+0xbc>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f008:	f1b9 0f00 	cmp.w	r9, #0
    f00c:	f47f af19 	bne.w	ee42 <isr+0x80a>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    f010:	4640      	mov	r0, r8
    f012:	f002 fac7 	bl	115a4 <ctrl_irk_whitelisted>
		if (crc_ok &&
    f016:	2800      	cmp	r0, #0
    f018:	f43f aed9 	beq.w	edce <isr+0x796>
    f01c:	e711      	b.n	ee42 <isr+0x80a>
	if (rl_idx != FILTER_IDX_NONE) {
    f01e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    f022:	d06f      	beq.n	f104 <isr+0xacc>
		return (rl_idx == _radio.scanner.rl_idx);
    f024:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    f028:	eba0 0e08 	sub.w	lr, r0, r8
    f02c:	f1de 0000 	rsbs	r0, lr, #0
    f030:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    f034:	2800      	cmp	r0, #0
    f036:	f47f af25 	bne.w	ee84 <isr+0x84c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f03a:	f899 0008 	ldrb.w	r0, [r9, #8]
    f03e:	f010 000f 	ands.w	r0, r0, #15
    f042:	d002      	beq.n	f04a <isr+0xa12>
    f044:	2806      	cmp	r0, #6
    f046:	f040 81ac 	bne.w	f3a2 <isr+0xd6a>
		 (_radio.scanner.type != 0) &&
    f04a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    f04e:	071f      	lsls	r7, r3, #28
    f050:	f140 8191 	bpl.w	f376 <isr+0xd3e>
		 (_radio.scanner.type != 0) &&
    f054:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    f058:	2a00      	cmp	r2, #0
    f05a:	f040 818c 	bne.w	f376 <isr+0xd3e>
		err = isr_rx_scan_report(rssi_ready,
    f05e:	f1ba 0f00 	cmp.w	sl, #0
    f062:	bf14      	ite	ne
    f064:	4641      	movne	r1, r8
    f066:	21ff      	moveq	r1, #255	; 0xff
    f068:	4628      	mov	r0, r5
    f06a:	f7fb fca9 	bl	a9c0 <isr_rx_scan_report>
		if (err) {
    f06e:	2800      	cmp	r0, #0
    f070:	f47f aead 	bne.w	edce <isr+0x796>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f074:	f003 f9dc 	bl	12430 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    f078:	7803      	ldrb	r3, [r0, #0]
    f07a:	2203      	movs	r2, #3
    f07c:	f362 0303 	bfi	r3, r2, #0, #4
    f080:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f082:	f899 3008 	ldrb.w	r3, [r9, #8]
    f086:	7802      	ldrb	r2, [r0, #0]
    f088:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f08c:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    f090:	230c      	movs	r3, #12
    f092:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f094:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f096:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    f098:	4640      	mov	r0, r8
    f09a:	f002 f9cb 	bl	11434 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    f09e:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    f0a2:	4601      	mov	r1, r0
    f0a4:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    f0a6:	f013 0f01 	tst.w	r3, #1
    f0aa:	f810 3b02 	ldrb.w	r3, [r0], #2
    f0ae:	f000 8159 	beq.w	f364 <isr+0xd2c>
    f0b2:	2900      	cmp	r1, #0
    f0b4:	f000 8156 	beq.w	f364 <isr+0xd2c>
			pdu_adv_tx->tx_addr = 1;
    f0b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f0bc:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f0be:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f0c0:	f7f2 fd9c 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    f0c4:	2206      	movs	r2, #6
    f0c6:	f109 010a 	add.w	r1, r9, #10
    f0ca:	f105 0008 	add.w	r0, r5, #8
    f0ce:	f7f2 fd95 	bl	1bfc <memcpy>
		_radio.scanner.state = 1;
    f0d2:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    f0d6:	f043 0302 	orr.w	r3, r3, #2
    f0da:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    f0de:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    f0e0:	2302      	movs	r3, #2
    f0e2:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    f0e4:	f003 fa44 	bl	12570 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    f0e8:	2000      	movs	r0, #0
    f0ea:	f003 f9a5 	bl	12438 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    f0ee:	4628      	mov	r0, r5
    f0f0:	f003 f928 	bl	12344 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    f0f4:	f003 fb18 	bl	12728 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    f0f8:	f003 f962 	bl	123c0 <radio_is_ready>
    f0fc:	2800      	cmp	r0, #0
    f0fe:	f43f ab45 	beq.w	e78c <isr+0x154>
    f102:	e77b      	b.n	effc <isr+0x9c4>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    f104:	f899 2008 	ldrb.w	r2, [r9, #8]
    f108:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f10c:	f3c2 1280 	ubfx	r2, r2, #6, #1
    f110:	4293      	cmp	r3, r2
    f112:	d18f      	bne.n	f034 <isr+0x9fc>
		(memcmp(&_radio.scanner.adv_addr[0],
    f114:	2206      	movs	r2, #6
    f116:	f109 010a 	add.w	r1, r9, #10
    f11a:	481c      	ldr	r0, [pc, #112]	; (f18c <isr+0xb54>)
    f11c:	f7f2 fd59 	bl	1bd2 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    f120:	fab0 f080 	clz	r0, r0
    f124:	0940      	lsrs	r0, r0, #5
    f126:	e785      	b.n	f034 <isr+0x9fc>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    f128:	2801      	cmp	r0, #1
    f12a:	d18b      	bne.n	f044 <isr+0xa0c>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    f12c:	2300      	movs	r3, #0
    f12e:	4642      	mov	r2, r8
    f130:	4631      	mov	r1, r6
    f132:	f7fb fbf9 	bl	a928 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    f136:	2800      	cmp	r0, #0
    f138:	f43f af7f 	beq.w	f03a <isr+0xa02>
    f13c:	e6a8      	b.n	ee90 <isr+0x858>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f13e:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f142:	4913      	ldr	r1, [pc, #76]	; (f190 <isr+0xb58>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f144:	09d2      	lsrs	r2, r2, #7
    f146:	f362 1386 	bfi	r3, r2, #6, #1
    f14a:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f14c:	2206      	movs	r2, #6
    f14e:	e6e9      	b.n	ef24 <isr+0x8ec>
				conn_space_us += conn_interval_us;
    f150:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f152:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    f154:	f1bb 0f00 	cmp.w	fp, #0
    f158:	dbfa      	blt.n	f150 <isr+0xb18>
    f15a:	459b      	cmp	fp, r3
    f15c:	d3f8      	bcc.n	f150 <isr+0xb18>
				(conn_space_us - conn_offset_us) / 1250;
    f15e:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    f162:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f166:	fbb3 f3f2 	udiv	r3, r3, r2
    f16a:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    f16c:	7d6b      	ldrb	r3, [r5, #21]
    f16e:	3301      	adds	r3, #1
    f170:	756b      	strb	r3, [r5, #21]
    f172:	e70c      	b.n	ef8e <isr+0x956>
    f174:	f3af 8000 	nop.w
    f178:	3b9aca00 	.word	0x3b9aca00
    f17c:	00000000 	.word	0x00000000
    f180:	1afd498d 	.word	0x1afd498d
    f184:	0001496d 	.word	0x0001496d
    f188:	00016b7b 	.word	0x00016b7b
    f18c:	200009b2 	.word	0x200009b2
    f190:	200009ac 	.word	0x200009ac
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f194:	f44f 72aa 	mov.w	r2, #340	; 0x154
    f198:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    f19c:	4630      	mov	r0, r6
    f19e:	f7f7 ff30 	bl	7002 <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    f1a2:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f1a4:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f1a6:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    f1aa:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    f1ae:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f1b2:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    f1b4:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    f1b8:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    f1ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f1be:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    f1c0:	2206      	movs	r2, #6
    f1c2:	f107 001b 	add.w	r0, r7, #27
    f1c6:	f7f2 fd19 	bl	1bfc <memcpy>
    f1ca:	f107 0b0e 	add.w	fp, r7, #14
    f1ce:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    f1d2:	f1ba 0f00 	cmp.w	sl, #0
    f1d6:	d032      	beq.n	f23e <isr+0xc06>
    f1d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    f1dc:	d02f      	beq.n	f23e <isr+0xc06>
			ll_rl_id_addr_get(rl_idx,
    f1de:	465a      	mov	r2, fp
    f1e0:	f107 010d 	add.w	r1, r7, #13
    f1e4:	4640      	mov	r0, r8
    f1e6:	930d      	str	r3, [sp, #52]	; 0x34
    f1e8:	f002 fb4e 	bl	11888 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    f1ec:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    f1ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f1f0:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    f1f2:	3202      	adds	r2, #2
    f1f4:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    f1f6:	4618      	mov	r0, r3
    f1f8:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f1fa:	f7f2 fcff 	bl	1bfc <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    f1fe:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    f202:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    f206:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    f20a:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    f20e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    f212:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    f216:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    f21a:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    f21e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    f222:	8c30      	ldrh	r0, [r6, #32]
    f224:	f7fb fc24 	bl	aa70 <rx_fc_lock>
		packet_rx_enqueue();
    f228:	f7fb fb32 	bl	a890 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    f22c:	2003      	movs	r0, #3
    f22e:	f7fa fcc5 	bl	9bbc <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    f232:	b988      	cbnz	r0, f258 <isr+0xc20>
    f234:	4bba      	ldr	r3, [pc, #744]	; (f520 <isr+0xee8>)
    f236:	9301      	str	r3, [sp, #4]
    f238:	9300      	str	r3, [sp, #0]
    f23a:	4bba      	ldr	r3, [pc, #744]	; (f524 <isr+0xeec>)
    f23c:	e474      	b.n	eb28 <isr+0x4f0>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    f23e:	2206      	movs	r2, #6
    f240:	2100      	movs	r1, #0
    f242:	4618      	mov	r0, r3
    f244:	f7f2 fd06 	bl	1c54 <memset>
				pdu_adv_tx->rx_addr;
    f248:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f24a:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    f24c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    f250:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f252:	2206      	movs	r2, #6
    f254:	4658      	mov	r0, fp
    f256:	e7d0      	b.n	f1fa <isr+0xbc2>
			node_rx->hdr.handle = conn->handle;
    f258:	8c33      	ldrh	r3, [r6, #32]
    f25a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    f25c:	230b      	movs	r3, #11
    f25e:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    f260:	f899 3008 	ldrb.w	r3, [r9, #8]
    f264:	f013 0320 	ands.w	r3, r3, #32
    f268:	d00e      	beq.n	f288 <isr+0xc50>
					((u16_t)conn->access_addr[1] << 8) |
    f26a:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    f26c:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    f26e:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    f270:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    f274:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    f276:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    f27a:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    f27c:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    f27e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    f282:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    f284:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    f286:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    f288:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    f28a:	f7fb fb01 	bl	a890 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    f28e:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f290:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    f294:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    f296:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    f29a:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    f29c:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f29e:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f2a2:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f2a4:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f2a6:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    f2aa:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f2ac:	4629      	mov	r1, r5
    f2ae:	9300      	str	r3, [sp, #0]
    f2b0:	4628      	mov	r0, r5
    f2b2:	4b9d      	ldr	r3, [pc, #628]	; (f528 <isr+0xef0>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f2b4:	f8df a284 	ldr.w	sl, [pc, #644]	; f53c <isr+0xf04>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f2b8:	bf38      	it	cc
    f2ba:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f2bc:	f7f8 fd90 	bl	7de0 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    f2c0:	f240 6139 	movw	r1, #1593	; 0x639
    f2c4:	f7fb fc40 	bl	ab48 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f2c8:	462b      	mov	r3, r5
    f2ca:	2204      	movs	r2, #4
    f2cc:	4629      	mov	r1, r5
    f2ce:	9500      	str	r5, [sp, #0]
    f2d0:	4628      	mov	r0, r5
    f2d2:	f7f8 fd85 	bl	7de0 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f2d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f2d8:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f2dc:	68a3      	ldr	r3, [r4, #8]
    f2de:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    f2e2:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f2e4:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    f2e8:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    f2ec:	9308      	str	r3, [sp, #32]
    f2ee:	4b8f      	ldr	r3, [pc, #572]	; (f52c <isr+0xef4>)
    f2f0:	9307      	str	r3, [sp, #28]
    f2f2:	4b8f      	ldr	r3, [pc, #572]	; (f530 <isr+0xef8>)
    f2f4:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f2f6:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    f2f8:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f2fa:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    f2fc:	4640      	mov	r0, r8
    f2fe:	a386      	add	r3, pc, #536	; (adr r3, f518 <isr+0xee0>)
    f300:	e9d3 2300 	ldrd	r2, r3, [r3]
    f304:	4649      	mov	r1, r9
		ticker_status =
    f306:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    f308:	f7f0 ff84 	bl	214 <__aeabi_uldivmod>
    f30c:	4610      	mov	r0, r2
    f30e:	4619      	mov	r1, r3
    f310:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f314:	2300      	movs	r3, #0
    f316:	f7f0 ff7d 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f31a:	a37f      	add	r3, pc, #508	; (adr r3, f518 <isr+0xee0>)
    f31c:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f320:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f322:	4649      	mov	r1, r9
    f324:	4640      	mov	r0, r8
    f326:	f7f0 ff75 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    f32a:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f32c:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    f32e:	a37a      	add	r3, pc, #488	; (adr r3, f518 <isr+0xee0>)
    f330:	e9d3 2300 	ldrd	r2, r3, [r3]
    f334:	fba1 010a 	umull	r0, r1, r1, sl
    f338:	f7f0 ff6c 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f33c:	3407      	adds	r4, #7
    f33e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    f342:	b2e4      	uxtb	r4, r4
    f344:	9000      	str	r0, [sp, #0]
    f346:	465b      	mov	r3, fp
    f348:	4622      	mov	r2, r4
    f34a:	4629      	mov	r1, r5
    f34c:	4628      	mov	r0, r5
    f34e:	f7f8 fca9 	bl	7ca4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f352:	f030 0302 	bics.w	r3, r0, #2
    f356:	f43f aa19 	beq.w	e78c <isr+0x154>
    f35a:	4b71      	ldr	r3, [pc, #452]	; (f520 <isr+0xee8>)
    f35c:	9301      	str	r3, [sp, #4]
    f35e:	9300      	str	r3, [sp, #0]
    f360:	4b70      	ldr	r3, [pc, #448]	; (f524 <isr+0xeec>)
    f362:	e514      	b.n	ed8e <isr+0x756>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f364:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f368:	4972      	ldr	r1, [pc, #456]	; (f534 <isr+0xefc>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f36a:	09d2      	lsrs	r2, r2, #7
    f36c:	f362 1386 	bfi	r3, r2, #6, #1
    f370:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f372:	2206      	movs	r2, #6
    f374:	e6a4      	b.n	f0c0 <isr+0xa88>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f376:	b9a0      	cbnz	r0, f3a2 <isr+0xd6a>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    f378:	f899 3009 	ldrb.w	r3, [r9, #9]
    f37c:	2b00      	cmp	r3, #0
    f37e:	f43f ad26 	beq.w	edce <isr+0x796>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    f382:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f386:	2b00      	cmp	r3, #0
    f388:	f47f ad21 	bne.w	edce <isr+0x796>
		err = isr_rx_scan_report(rssi_ready,
    f38c:	f1ba 0f00 	cmp.w	sl, #0
    f390:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    f394:	bf14      	ite	ne
    f396:	4641      	movne	r1, r8
    f398:	21ff      	moveq	r1, #255	; 0xff
    f39a:	4628      	mov	r0, r5
    f39c:	f7fb fb10 	bl	a9c0 <isr_rx_scan_report>
    f3a0:	e515      	b.n	edce <isr+0x796>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f3a2:	2801      	cmp	r0, #1
    f3a4:	d00e      	beq.n	f3c4 <isr+0xd8c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f3a6:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
    f3aa:	f003 020b 	and.w	r2, r3, #11
    f3ae:	2a02      	cmp	r2, #2
    f3b0:	d0e2      	beq.n	f378 <isr+0xd40>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f3b2:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    f3b6:	2b07      	cmp	r3, #7
    f3b8:	d10d      	bne.n	f3d6 <isr+0xd9e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    f3ba:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f3be:	0758      	lsls	r0, r3, #29
    f3c0:	d1da      	bne.n	f378 <isr+0xd40>
    f3c2:	e504      	b.n	edce <isr+0x796>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    f3c4:	ab10      	add	r3, sp, #64	; 0x40
    f3c6:	4642      	mov	r2, r8
    f3c8:	4631      	mov	r1, r6
    f3ca:	2000      	movs	r0, #0
    f3cc:	f7fb faac 	bl	a928 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    f3d0:	2800      	cmp	r0, #0
    f3d2:	d1d1      	bne.n	f378 <isr+0xd40>
    f3d4:	e7e7      	b.n	f3a6 <isr+0xd6e>
		   (_radio.scanner.phy)) ||
    f3d6:	2b04      	cmp	r3, #4
    f3d8:	f47f acf9 	bne.w	edce <isr+0x796>
		   (_radio.scanner.state != 0) &&
    f3dc:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    f3e0:	0799      	lsls	r1, r3, #30
    f3e2:	f57f acf4 	bpl.w	edce <isr+0x796>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    f3e6:	f003 f823 	bl	12430 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    f3ea:	f899 3008 	ldrb.w	r3, [r9, #8]
    f3ee:	7802      	ldrb	r2, [r0, #0]
    f3f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f3f4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f3f8:	f47f ace9 	bne.w	edce <isr+0x796>
		(memcmp(&sreq->scan_req.adv_addr[0],
    f3fc:	2206      	movs	r2, #6
    f3fe:	f109 010a 	add.w	r1, r9, #10
    f402:	3008      	adds	r0, #8
    f404:	f7f2 fbe5 	bl	1bd2 <memcmp>
		   (_radio.scanner.state != 0) &&
    f408:	2800      	cmp	r0, #0
    f40a:	d0b5      	beq.n	f378 <isr+0xd40>
    f40c:	e4df      	b.n	edce <isr+0x796>
	_radio.packet_counter++;
    f40e:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f412:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
    f416:	3301      	adds	r3, #1
    f418:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
    f41c:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f41e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
    f422:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f426:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    f42a:	2301      	movs	r3, #1
    f42c:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    f430:	2f00      	cmp	r7, #0
    f432:	f000 82d2 	beq.w	f9da <isr+0x13a2>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    f436:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    f43a:	f898 1008 	ldrb.w	r1, [r8, #8]
    f43e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f442:	f3c1 0180 	ubfx	r1, r1, #2, #1
    f446:	f003 0201 	and.w	r2, r3, #1
    f44a:	4291      	cmp	r1, r2
    f44c:	f000 819e 	beq.w	f78c <isr+0x1154>
		_radio.conn_curr->sn++;
    f450:	f082 0201 	eor.w	r2, r2, #1
    f454:	f362 0300 	bfi	r3, r2, #0, #1
    f458:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    f45c:	7ce3      	ldrb	r3, [r4, #19]
    f45e:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    f460:	bf02      	ittt	eq
    f462:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    f466:	f043 0301 	orreq.w	r3, r3, #1
    f46a:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    f46e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f472:	061a      	lsls	r2, r3, #24
    f474:	f100 8185 	bmi.w	f782 <isr+0x114a>
			node_tx = _radio.conn_curr->pkt_tx_head;
    f478:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    f47c:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    f480:	1d30      	adds	r0, r6, #4
    f482:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    f486:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    f48a:	f1b9 0f00 	cmp.w	r9, #0
    f48e:	f000 80ab 	beq.w	f5e8 <isr+0xfb0>
				if (_radio.conn_curr->enc_tx) {
    f492:	069b      	lsls	r3, r3, #26
    f494:	d50b      	bpl.n	f4ae <isr+0xe76>
					_radio.conn_curr->ccm_tx.counter++;
    f496:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    f49a:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    f49e:	f11b 0201 	adds.w	r2, fp, #1
    f4a2:	f14c 0300 	adc.w	r3, ip, #0
    f4a6:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    f4aa:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    f4ae:	5c43      	ldrb	r3, [r0, r1]
    f4b0:	f003 0303 	and.w	r3, r3, #3
    f4b4:	2b03      	cmp	r3, #3
    f4b6:	f040 8097 	bne.w	f5e8 <isr+0xfb0>
	switch (pdu_data_tx->llctrl.opcode) {
    f4ba:	f89a 3003 	ldrb.w	r3, [sl, #3]
    f4be:	3b02      	subs	r3, #2
    f4c0:	2b16      	cmp	r3, #22
    f4c2:	f200 8091 	bhi.w	f5e8 <isr+0xfb0>
    f4c6:	e8df f013 	tbh	[pc, r3, lsl #1]
    f4ca:	0017      	.short	0x0017
    f4cc:	00c50073 	.word	0x00c50073
    f4d0:	008f008f 	.word	0x008f008f
    f4d4:	008f008f 	.word	0x008f008f
    f4d8:	0091008f 	.word	0x0091008f
    f4dc:	008f009c 	.word	0x008f009c
    f4e0:	008f00cc 	.word	0x008f00cc
    f4e4:	008f008f 	.word	0x008f008f
    f4e8:	008f008f 	.word	0x008f008f
    f4ec:	00d6008f 	.word	0x00d6008f
    f4f0:	00ee008f 	.word	0x00ee008f
    f4f4:	012000f5 	.word	0x012000f5
		_radio.state = STATE_CLOSE;
    f4f8:	2303      	movs	r3, #3
    f4fa:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f4fc:	f002 ff42 	bl	12384 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    f500:	f002 ff5e 	bl	123c0 <radio_is_ready>
    f504:	b1e0      	cbz	r0, f540 <isr+0xf08>
    f506:	4b06      	ldr	r3, [pc, #24]	; (f520 <isr+0xee8>)
    f508:	9301      	str	r3, [sp, #4]
    f50a:	9300      	str	r3, [sp, #0]
    f50c:	4b0a      	ldr	r3, [pc, #40]	; (f538 <isr+0xf00>)
    f50e:	f7ff b8f1 	b.w	e6f4 <isr+0xbc>
    f512:	bf00      	nop
    f514:	f3af 8000 	nop.w
    f518:	1afd498d 	.word	0x1afd498d
    f51c:	00000007 	.word	0x00000007
    f520:	0001496d 	.word	0x0001496d
    f524:	00016b7b 	.word	0x00016b7b
    f528:	0000ab49 	.word	0x0000ab49
    f52c:	0000aaa5 	.word	0x0000aaa5
    f530:	0000cf49 	.word	0x0000cf49
    f534:	200009ac 	.word	0x200009ac
    f538:	00016b87 	.word	0x00016b87
    f53c:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    f540:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    f544:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f548:	2913      	cmp	r1, #19
    f54a:	bf08      	it	eq
    f54c:	2116      	moveq	r1, #22
    f54e:	f7fb fee3 	bl	b318 <terminate_ind_rx_enqueue>
		terminate = 1;
    f552:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f554:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f558:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    f55c:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    f55e:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f562:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    f566:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f568:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    f56c:	d11e      	bne.n	f5ac <isr+0xf74>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f56e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    f572:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    f576:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f578:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    f57a:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    f57e:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f582:	f040 80c9 	bne.w	f718 <isr+0x10e0>
		if (node_tx) {
    f586:	b18e      	cbz	r6, f5ac <isr+0xf74>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f588:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    f58c:	f8d3 e000 	ldr.w	lr, [r3]
    f590:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f594:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    f596:	bf06      	itte	eq
    f598:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    f59c:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    f5a0:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    f5a4:	49cd      	ldr	r1, [pc, #820]	; (f8dc <isr+0x12a4>)
    f5a6:	4630      	mov	r0, r6
    f5a8:	f7f7 fd0d 	bl	6fc6 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    f5ac:	2600      	movs	r6, #0
    f5ae:	e0bc      	b.n	f72a <isr+0x10f2>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    f5b0:	2208      	movs	r2, #8
    f5b2:	f10a 010e 	add.w	r1, sl, #14
    f5b6:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f5ba:	f7f2 fb1f 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    f5be:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f5c2:	2204      	movs	r2, #4
    f5c4:	f10a 0116 	add.w	r1, sl, #22
    f5c8:	f500 7089 	add.w	r0, r0, #274	; 0x112
    f5cc:	f7f2 fb16 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_tx = 1;
    f5d0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f5d4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f5d8:	f042 0208 	orr.w	r2, r2, #8
    f5dc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f5e0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    f5e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    f5e8:	2500      	movs	r5, #0
    f5ea:	e7b3      	b.n	f554 <isr+0xf1c>
		_radio.conn_curr->pause_tx = 1;
    f5ec:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    f5f0:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    f5f4:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f5f8:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    f5fc:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    f600:	e7f2      	b.n	f5e8 <isr+0xfb0>
		if (_radio.role == ROLE_MASTER) {
    f602:	f894 a013 	ldrb.w	sl, [r4, #19]
    f606:	fa5f fa8a 	uxtb.w	sl, sl
    f60a:	f1ba 0f04 	cmp.w	sl, #4
    f60e:	d121      	bne.n	f654 <isr+0x101c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f610:	7933      	ldrb	r3, [r6, #4]
    f612:	f043 0303 	orr.w	r3, r3, #3
    f616:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    f618:	2317      	movs	r3, #23
    f61a:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    f61c:	2303      	movs	r3, #3
    f61e:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    f620:	2208      	movs	r2, #8
    f622:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    f626:	3004      	adds	r0, #4
    f628:	f7f2 fae8 	bl	1bfc <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    f62c:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    f630:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    f632:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    f636:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    f638:	f106 0112 	add.w	r1, r6, #18
    f63c:	2208      	movs	r2, #8
    f63e:	6860      	ldr	r0, [r4, #4]
    f640:	f003 feda 	bl	133f8 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    f644:	f106 011a 	add.w	r1, r6, #26
    f648:	4652      	mov	r2, sl
    f64a:	6860      	ldr	r0, [r4, #4]
    f64c:	f003 fed4 	bl	133f8 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
    f650:	2600      	movs	r6, #0
    f652:	e7c9      	b.n	f5e8 <isr+0xfb0>
			_radio.conn_curr->pause_tx = 1;
    f654:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f658:	f043 0308 	orr.w	r3, r3, #8
    f65c:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f660:	e7c2      	b.n	f5e8 <isr+0xfb0>
		_radio.conn_curr->pause_rx = 0;
    f662:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    f666:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    f66a:	f36f 03c3 	bfc	r3, #3, #1
    f66e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    f672:	2300      	movs	r3, #0
    f674:	e7c2      	b.n	f5fc <isr+0xfc4>
		if ((_radio.conn_curr->llcp_length.req !=
    f676:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    f67a:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    f67e:	429a      	cmp	r2, r3
    f680:	d0b2      	beq.n	f5e8 <isr+0xfb0>
		    (_radio.conn_curr->llcp_length.state ==
    f682:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    f686:	f003 0203 	and.w	r2, r3, #3
    f68a:	2a01      	cmp	r2, #1
    f68c:	d1ac      	bne.n	f5e8 <isr+0xfb0>
			_radio.conn_curr->pause_tx = 1;
    f68e:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    f692:	f042 0208 	orr.w	r2, r2, #8
    f696:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    f69a:	2202      	movs	r2, #2
    f69c:	f362 0301 	bfi	r3, r2, #0, #2
    f6a0:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    f6a4:	e7a0      	b.n	f5e8 <isr+0xfb0>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f6a6:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f6aa:	2202      	movs	r2, #2
    f6ac:	f362 0301 	bfi	r3, r2, #0, #2
    f6b0:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    f6b4:	7ce3      	ldrb	r3, [r4, #19]
    f6b6:	2b03      	cmp	r3, #3
    f6b8:	d196      	bne.n	f5e8 <isr+0xfb0>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    f6ba:	2301      	movs	r3, #1
    f6bc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    f6c0:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    f6c4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    f6c8:	2202      	movs	r2, #2
    f6ca:	2304      	movs	r3, #4
    f6cc:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    f6d0:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    f6d4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    f6d8:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    f6dc:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    f6e0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    f6e4:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
    f6e8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f6ec:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
    f6f0:	f003 0307 	and.w	r3, r3, #7
    f6f4:	aa12      	add	r2, sp, #72	; 0x48
    f6f6:	4413      	add	r3, r2
    f6f8:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f6fc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    f700:	f363 0202 	bfi	r2, r3, #0, #3
    f704:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    f708:	e76e      	b.n	f5e8 <isr+0xfb0>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    f70a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    f70e:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f712:	f3c3 0382 	ubfx	r3, r3, #2, #3
    f716:	e7f3      	b.n	f700 <isr+0x10c8>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    f718:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    f71c:	4293      	cmp	r3, r2
    f71e:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    f720:	bf08      	it	eq
    f722:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    f726:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
    f72a:	b37d      	cbz	r5, f78c <isr+0x1154>
		connection_release(_radio.conn_curr);
    f72c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f730:	f7fb fc40 	bl	afb4 <connection_release>
		_radio.conn_curr = NULL;
    f734:	2300      	movs	r3, #0
    f736:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    f73a:	f002 ffe9 	bl	12710 <radio_tmr_aa_restore>
    f73e:	b918      	cbnz	r0, f748 <isr+0x1110>
		radio_tmr_aa_save(radio_tmr_aa_get());
    f740:	f002 ffda 	bl	126f8 <radio_tmr_aa_get>
    f744:	f002 ffde 	bl	12704 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    f748:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f74c:	2b00      	cmp	r3, #0
    f74e:	f43f a81d 	beq.w	e78c <isr+0x154>
	if (tx_release) {
    f752:	b11e      	cbz	r6, f75c <isr+0x1124>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    f754:	4631      	mov	r1, r6
    f756:	8c18      	ldrh	r0, [r3, #32]
    f758:	f7fb fba2 	bl	aea0 <pdu_node_tx_release>
	if (rx_enqueue) {
    f75c:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    f760:	2b00      	cmp	r3, #0
    f762:	f43f a813 	beq.w	e78c <isr+0x154>
		rx_fc_lock(_radio.conn_curr->handle);
    f766:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f76a:	8c18      	ldrh	r0, [r3, #32]
    f76c:	f7fb f980 	bl	aa70 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    f770:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f774:	8c1b      	ldrh	r3, [r3, #32]
    f776:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
    f77a:	f7fb f889 	bl	a890 <packet_rx_enqueue>
    f77e:	f7ff b805 	b.w	e78c <isr+0x154>
			_radio.conn_curr->empty = 0;
    f782:	f36f 13c7 	bfc	r3, #7, #1
    f786:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f78a:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f78c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f790:	f898 2008 	ldrb.w	r2, [r8, #8]
    f794:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f798:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    f79c:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f7a0:	429a      	cmp	r2, r3
    f7a2:	f040 80e9 	bne.w	f978 <isr+0x1340>
	    (packet_rx_reserve_get(3) != 0) &&
    f7a6:	2003      	movs	r0, #3
    f7a8:	f7fa fa08 	bl	9bbc <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f7ac:	2800      	cmp	r0, #0
    f7ae:	f000 80e3 	beq.w	f978 <isr+0x1340>
	    (packet_rx_reserve_get(3) != 0) &&
    f7b2:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f7b6:	b393      	cbz	r3, f81e <isr+0x11e6>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f7b8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    f7bc:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
    f7c0:	4293      	cmp	r3, r2
    f7c2:	d105      	bne.n	f7d0 <isr+0x1198>
	      (_radio.fc_req == _radio.fc_ack)) ||
    f7c4:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f7c8:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
    f7cc:	4291      	cmp	r1, r2
    f7ce:	d026      	beq.n	f81e <isr+0x11e6>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f7d0:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
    f7d4:	4293      	cmp	r3, r2
    f7d6:	f000 80cf 	beq.w	f978 <isr+0x1340>
	      (_radio.fc_req != _radio.fc_ack) &&
    f7da:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f7de:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f7e2:	429a      	cmp	r2, r3
    f7e4:	f000 80c8 	beq.w	f978 <isr+0x1340>
		(((_radio.fc_req == 0) &&
    f7e8:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
    f7ec:	b933      	cbnz	r3, f7fc <isr+0x11c4>
		   _radio.conn_curr->handle)) ||
    f7ee:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
    f7f2:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
    f7f6:	8c1b      	ldrh	r3, [r3, #32]
    f7f8:	429a      	cmp	r2, r3
    f7fa:	d010      	beq.n	f81e <isr+0x11e6>
		 ((_radio.fc_req != 0) &&
    f7fc:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
    f800:	2b00      	cmp	r3, #0
    f802:	f000 80b9 	beq.w	f978 <isr+0x1340>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f806:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
    f80a:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f80e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    f812:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
    f816:	8c0b      	ldrh	r3, [r1, #32]
    f818:	429a      	cmp	r2, r3
    f81a:	f040 80ad 	bne.w	f978 <isr+0x1340>
		if (pdu_data_rx->len != 0) {
    f81e:	f898 5009 	ldrb.w	r5, [r8, #9]
    f822:	2d00      	cmp	r5, #0
    f824:	f000 80b1 	beq.w	f98a <isr+0x1352>
			if (_radio.conn_curr->enc_rx) {
    f828:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f82c:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
    f830:	f015 0510 	ands.w	r5, r5, #16
    f834:	d00c      	beq.n	f850 <isr+0x1218>
				done = radio_ccm_is_done();
    f836:	f002 fff7 	bl	12828 <radio_ccm_is_done>
				LL_ASSERT(done);
    f83a:	b940      	cbnz	r0, f84e <isr+0x1216>
    f83c:	4b28      	ldr	r3, [pc, #160]	; (f8e0 <isr+0x12a8>)
    f83e:	9301      	str	r3, [sp, #4]
    f840:	9300      	str	r3, [sp, #0]
    f842:	4a28      	ldr	r2, [pc, #160]	; (f8e4 <isr+0x12ac>)
    f844:	4b28      	ldr	r3, [pc, #160]	; (f8e8 <isr+0x12b0>)
    f846:	4929      	ldr	r1, [pc, #164]	; (f8ec <isr+0x12b4>)
    f848:	4829      	ldr	r0, [pc, #164]	; (f8f0 <isr+0x12b8>)
    f84a:	f7ff baa3 	b.w	ed94 <isr+0x75c>
				ccm_rx_increment = 1;
    f84e:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
    f850:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f854:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f858:	06d9      	lsls	r1, r3, #27
    f85a:	d42c      	bmi.n	f8b6 <isr+0x127e>
			    (_radio.conn_curr->pause_rx &&
    f85c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f860:	f898 3008 	ldrb.w	r3, [r8, #8]
    f864:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
    f868:	f012 0f04 	tst.w	r2, #4
    f86c:	d142      	bne.n	f8f4 <isr+0x12bc>
			_radio.conn_curr->appto_expire = 0;
    f86e:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    f870:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
    f874:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
    f878:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    f87c:	d004      	beq.n	f888 <isr+0x1250>
    f87e:	2b02      	cmp	r3, #2
    f880:	d873      	bhi.n	f96a <isr+0x1332>
				*rx_enqueue = 1;
    f882:	2301      	movs	r3, #1
    f884:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
    f888:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f88c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f890:	f082 0202 	eor.w	r2, r2, #2
    f894:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
    f898:	2d00      	cmp	r5, #0
    f89a:	d06d      	beq.n	f978 <isr+0x1340>
				_radio.conn_curr->ccm_rx.counter++;
    f89c:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
    f8a0:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
    f8a4:	f119 0001 	adds.w	r0, r9, #1
    f8a8:	f14a 0100 	adc.w	r1, sl, #0
    f8ac:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
    f8b0:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
    f8b4:	e060      	b.n	f978 <isr+0x1340>
			     !radio_ccm_mic_is_valid()) ||
    f8b6:	f002 ffd5 	bl	12864 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    f8ba:	2800      	cmp	r0, #0
    f8bc:	d1ce      	bne.n	f85c <isr+0x1224>
				_radio.state = STATE_CLOSE;
    f8be:	2303      	movs	r3, #3
    f8c0:	7523      	strb	r3, [r4, #20]
				radio_disable();
    f8c2:	f002 fd5f 	bl	12384 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    f8c6:	f002 fd7b 	bl	123c0 <radio_is_ready>
    f8ca:	4605      	mov	r5, r0
    f8cc:	2800      	cmp	r0, #0
    f8ce:	d040      	beq.n	f952 <isr+0x131a>
    f8d0:	4b03      	ldr	r3, [pc, #12]	; (f8e0 <isr+0x12a8>)
    f8d2:	9301      	str	r3, [sp, #4]
    f8d4:	9300      	str	r3, [sp, #0]
    f8d6:	4b04      	ldr	r3, [pc, #16]	; (f8e8 <isr+0x12b0>)
    f8d8:	f7fe bf0c 	b.w	e6f4 <isr+0xbc>
    f8dc:	20000a24 	.word	0x20000a24
    f8e0:	0001496d 	.word	0x0001496d
    f8e4:	000156bc 	.word	0x000156bc
    f8e8:	00016beb 	.word	0x00016beb
    f8ec:	0001570b 	.word	0x0001570b
    f8f0:	00017243 	.word	0x00017243
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    f8f4:	f003 0103 	and.w	r1, r3, #3
    f8f8:	2903      	cmp	r1, #3
    f8fa:	d1e0      	bne.n	f8be <isr+0x1286>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f8fc:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    f900:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f904:	f1be 0f00 	cmp.w	lr, #0
    f908:	f002 0240 	and.w	r2, r2, #64	; 0x40
    f90c:	db15      	blt.n	f93a <isr+0x1302>
	       (!conn->role &&
    f90e:	b922      	cbnz	r2, f91a <isr+0x12e2>
		((!conn->refresh &&
    f910:	2902      	cmp	r1, #2
    f912:	d0ac      	beq.n	f86e <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f914:	2911      	cmp	r1, #17
    f916:	d8d2      	bhi.n	f8be <isr+0x1286>
    f918:	e009      	b.n	f92e <isr+0x12f6>
		 (conn->refresh &&
    f91a:	1e8a      	subs	r2, r1, #2
    f91c:	b2d2      	uxtb	r2, r2
    f91e:	2a09      	cmp	r2, #9
    f920:	d8f8      	bhi.n	f914 <isr+0x12dc>
    f922:	f240 2e05 	movw	lr, #517	; 0x205
    f926:	fa2e f202 	lsr.w	r2, lr, r2
    f92a:	07d2      	lsls	r2, r2, #31
    f92c:	d49f      	bmi.n	f86e <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f92e:	4aac      	ldr	r2, [pc, #688]	; (fbe0 <isr+0x15a8>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f930:	fa22 f101 	lsr.w	r1, r2, r1
    f934:	07ca      	lsls	r2, r1, #31
    f936:	d5c2      	bpl.n	f8be <isr+0x1286>
    f938:	e799      	b.n	f86e <isr+0x1236>
	       (conn->role &&
    f93a:	b92a      	cbnz	r2, f948 <isr+0x1310>
		((!conn->refresh &&
    f93c:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    f93e:	d096      	beq.n	f86e <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f940:	2911      	cmp	r1, #17
    f942:	d8bc      	bhi.n	f8be <isr+0x1286>
    f944:	4aa7      	ldr	r2, [pc, #668]	; (fbe4 <isr+0x15ac>)
    f946:	e7f3      	b.n	f930 <isr+0x12f8>
		 (conn->refresh &&
    f948:	1e8a      	subs	r2, r1, #2
    f94a:	2a01      	cmp	r2, #1
    f94c:	d98f      	bls.n	f86e <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    f94e:	290b      	cmp	r1, #11
    f950:	e7f5      	b.n	f93e <isr+0x1306>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    f952:	213d      	movs	r1, #61	; 0x3d
    f954:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f958:	f7fb fcde 	bl	b318 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    f95c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f960:	f7fb fb28 	bl	afb4 <connection_release>
				_radio.conn_curr = NULL;
    f964:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    f968:	e6e7      	b.n	f73a <isr+0x1102>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    f96a:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    f96e:	4640      	mov	r0, r8
    f970:	f7fd fd42 	bl	d3f8 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    f974:	2800      	cmp	r0, #0
    f976:	d087      	beq.n	f888 <isr+0x1250>
		_radio.conn_curr->supervision_expire = 0;
    f978:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
    f97c:	2300      	movs	r3, #0
    f97e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
    f982:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
    f984:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    f988:	e03e      	b.n	fa08 <isr+0x13d0>
		} else if ((_radio.conn_curr->enc_rx) ||
    f98a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    f98e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    f992:	f013 0f14 	tst.w	r3, #20
    f996:	f43f af77 	beq.w	f888 <isr+0x1250>
					    (conn->latency + 6)) ?
    f99a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    f99c:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    f9a0:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    f9a2:	4299      	cmp	r1, r3
    f9a4:	bfc4      	itt	gt
    f9a6:	1f8b      	subgt	r3, r1, #6
    f9a8:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    f9aa:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    f9ae:	bfcc      	ite	gt
    f9b0:	b29b      	uxthgt	r3, r3
    f9b2:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    f9b4:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
    f9b6:	bf1e      	ittt	ne
    f9b8:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
    f9bc:	2300      	movne	r3, #0
    f9be:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    f9c2:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    f9c6:	2b00      	cmp	r3, #0
    f9c8:	f47f af5e 	bne.w	f888 <isr+0x1250>
				conn->appto_expire = conn->appto_reload;
    f9cc:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    f9d0:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    f9d4:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
    f9d8:	e756      	b.n	f888 <isr+0x1250>
		if (_radio.crc_expire == 0) {
    f9da:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    f9de:	b913      	cbnz	r3, f9e6 <isr+0x13ae>
			_radio.crc_expire = 2;
    f9e0:	2302      	movs	r3, #2
    f9e2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
    f9e6:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    f9ea:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
    f9ee:	3b01      	subs	r3, #1
    f9f0:	b2db      	uxtb	r3, r3
    f9f2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    f9f6:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    f9fa:	fab3 f583 	clz	r5, r3
    f9fe:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    fa00:	bb86      	cbnz	r6, fa64 <isr+0x142c>
			_radio.conn_curr->supervision_expire =
    fa02:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    fa04:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    fa08:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    fa0c:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    fa0e:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    fa12:	f7fd fbb3 	bl	d17c <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fa16:	7d23      	ldrb	r3, [r4, #20]
    fa18:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    fa1a:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fa1e:	d010      	beq.n	fa42 <isr+0x140a>
    fa20:	bb15      	cbnz	r5, fa68 <isr+0x1430>
    fa22:	b137      	cbz	r7, fa32 <isr+0x13fa>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    fa24:	f898 3008 	ldrb.w	r3, [r8, #8]
    fa28:	06d8      	lsls	r0, r3, #27
    fa2a:	d402      	bmi.n	fa32 <isr+0x13fa>
			 (pdu_data_tx->len == 0)) ||
    fa2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
    fa2e:	785b      	ldrb	r3, [r3, #1]
    fa30:	b1d3      	cbz	r3, fa68 <isr+0x1430>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    fa32:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    fa36:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fa3a:	2b00      	cmp	r3, #0
    fa3c:	bf0c      	ite	eq
    fa3e:	2302      	moveq	r3, #2
    fa40:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    fa42:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fa44:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
    fa46:	d12d      	bne.n	faa4 <isr+0x146c>
		if (_radio.role == ROLE_MASTER) {
    fa48:	7ce3      	ldrb	r3, [r4, #19]
    fa4a:	2b04      	cmp	r3, #4
    fa4c:	d10e      	bne.n	fa6c <isr+0x1434>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    fa4e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fa52:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    fa56:	f369 12c7 	bfi	r2, r9, #7, #1
    fa5a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
    fa5e:	f002 fc91 	bl	12384 <radio_disable>
    fa62:	e66a      	b.n	f73a <isr+0x1102>
	struct radio_pdu_node_tx *tx_release = NULL;
    fa64:	2600      	movs	r6, #0
    fa66:	e7cf      	b.n	fa08 <isr+0x13d0>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fa68:	2303      	movs	r3, #3
    fa6a:	e7ea      	b.n	fa42 <isr+0x140a>
			radio_switch_complete_and_disable();
    fa6c:	f002 fcfa 	bl	12464 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    fa70:	9910      	ldr	r1, [sp, #64]	; 0x40
    fa72:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fa76:	780b      	ldrb	r3, [r1, #0]
    fa78:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
    fa7c:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    fa80:	f3c2 0240 	ubfx	r2, r2, #1, #1
    fa84:	f362 0382 	bfi	r3, r2, #2, #1
    fa88:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    fa8a:	f7fa fc21 	bl	a2d0 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    fa8e:	f002 fc97 	bl	123c0 <radio_is_ready>
    fa92:	2800      	cmp	r0, #0
    fa94:	f43f ae51 	beq.w	f73a <isr+0x1102>
    fa98:	4b53      	ldr	r3, [pc, #332]	; (fbe8 <isr+0x15b0>)
    fa9a:	9301      	str	r3, [sp, #4]
    fa9c:	9300      	str	r3, [sp, #0]
    fa9e:	4b53      	ldr	r3, [pc, #332]	; (fbec <isr+0x15b4>)
    faa0:	f7fe be28 	b.w	e6f4 <isr+0xbc>
		radio_tmr_tifs_set(RADIO_TIFS);
    faa4:	2096      	movs	r0, #150	; 0x96
    faa6:	f002 fd63 	bl	12570 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    faaa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    faae:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    fab2:	f000 0007 	and.w	r0, r0, #7
    fab6:	f002 fcbf 	bl	12438 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    faba:	f002 fe35 	bl	12728 <radio_tmr_end_capture>
    fabe:	e7d7      	b.n	fa70 <isr+0x1438>
		LL_ASSERT(0);
    fac0:	4b49      	ldr	r3, [pc, #292]	; (fbe8 <isr+0x15b0>)
    fac2:	9301      	str	r3, [sp, #4]
    fac4:	9300      	str	r3, [sp, #0]
    fac6:	4b4a      	ldr	r3, [pc, #296]	; (fbf0 <isr+0x15b8>)
    fac8:	f7fe bead 	b.w	e826 <isr+0x1ee>
	switch (_radio.role) {
    facc:	7ce2      	ldrb	r2, [r4, #19]
    face:	2a04      	cmp	r2, #4
    fad0:	f200 823a 	bhi.w	ff48 <isr+0x1910>
    fad4:	e8df f012 	tbh	[pc, r2, lsl #1]
    fad8:	00050228 	.word	0x00050228
    fadc:	00bf0058 	.word	0x00bf0058
    fae0:	00bf      	.short	0x00bf
	if ((_radio.state == STATE_CLOSE) &&
    fae2:	2b03      	cmp	r3, #3
    fae4:	d109      	bne.n	fafa <isr+0x14c2>
	    (_radio.advertiser.chan_map_current != 0)) {
    fae6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    faea:	0759      	lsls	r1, r3, #29
    faec:	d005      	beq.n	fafa <isr+0x14c2>
		adv_setup();
    faee:	f7fb fb35 	bl	b15c <adv_setup>
		radio_tx_enable();
    faf2:	f002 fc41 	bl	12378 <radio_tx_enable>
    faf6:	f7fe be19 	b.w	e72c <isr+0xf4>
		radio_filter_disable();
    fafa:	f002 fcfd 	bl	124f8 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    fafe:	7d23      	ldrb	r3, [r4, #20]
    fb00:	2b03      	cmp	r3, #3
    fb02:	f040 808f 	bne.w	fc24 <isr+0x15ec>
		    (!_radio.advertiser.is_hdcd)) {
    fb06:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    fb0a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    fb0e:	f040 8089 	bne.w	fc24 <isr+0x15ec>
			entropy_nrf_get_entropy_isr(_radio.entropy,
    fb12:	2201      	movs	r2, #1
    fb14:	a910      	add	r1, sp, #64	; 0x40
    fb16:	6860      	ldr	r0, [r4, #4]
    fb18:	f003 fc6e 	bl	133f8 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
    fb1c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    fb20:	4834      	ldr	r0, [pc, #208]	; (fbf4 <isr+0x15bc>)
			random_delay %= 10;
    fb22:	230a      	movs	r3, #10
    fb24:	fbb1 f2f3 	udiv	r2, r1, r3
    fb28:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    fb2c:	3201      	adds	r2, #1
    fb2e:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    fb30:	b2d6      	uxtb	r6, r2
    fb32:	fba6 0100 	umull	r0, r1, r6, r0
    fb36:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    fb38:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    fb3c:	fb03 1106 	mla	r1, r3, r6, r1
    fb40:	a325      	add	r3, pc, #148	; (adr r3, fbd8 <isr+0x15a0>)
    fb42:	e9d3 2300 	ldrd	r2, r3, [r3]
    fb46:	f7f0 fb65 	bl	214 <__aeabi_uldivmod>
			ticker_status =
    fb4a:	f640 734b 	movw	r3, #3915	; 0xf4b
    fb4e:	9306      	str	r3, [sp, #24]
    fb50:	4b29      	ldr	r3, [pc, #164]	; (fbf8 <isr+0x15c0>)
    fb52:	9305      	str	r3, [sp, #20]
    fb54:	9504      	str	r5, [sp, #16]
    fb56:	b283      	uxth	r3, r0
    fb58:	9503      	str	r5, [sp, #12]
    fb5a:	9502      	str	r5, [sp, #8]
    fb5c:	9501      	str	r5, [sp, #4]
    fb5e:	9500      	str	r5, [sp, #0]
    fb60:	2205      	movs	r2, #5
    fb62:	4629      	mov	r1, r5
    fb64:	4628      	mov	r0, r5
    fb66:	f7f8 f8ed 	bl	7d44 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fb6a:	f030 0302 	bics.w	r3, r0, #2
    fb6e:	d059      	beq.n	fc24 <isr+0x15ec>
    fb70:	7ca3      	ldrb	r3, [r4, #18]
    fb72:	2b05      	cmp	r3, #5
    fb74:	d056      	beq.n	fc24 <isr+0x15ec>
    fb76:	4b1c      	ldr	r3, [pc, #112]	; (fbe8 <isr+0x15b0>)
    fb78:	9301      	str	r3, [sp, #4]
    fb7a:	9300      	str	r3, [sp, #0]
    fb7c:	4a1f      	ldr	r2, [pc, #124]	; (fbfc <isr+0x15c4>)
    fb7e:	4b20      	ldr	r3, [pc, #128]	; (fc00 <isr+0x15c8>)
    fb80:	4920      	ldr	r1, [pc, #128]	; (fc04 <isr+0x15cc>)
    fb82:	4821      	ldr	r0, [pc, #132]	; (fc08 <isr+0x15d0>)
    fb84:	f7ff b906 	b.w	ed94 <isr+0x75c>
	if (_radio.state == STATE_CLOSE) {
    fb88:	2b03      	cmp	r3, #3
    fb8a:	d13f      	bne.n	fc0c <isr+0x15d4>
		radio_tmr_tifs_set(RADIO_TIFS);
    fb8c:	2096      	movs	r0, #150	; 0x96
    fb8e:	f002 fcef 	bl	12570 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fb92:	2300      	movs	r3, #0
    fb94:	4619      	mov	r1, r3
    fb96:	461a      	mov	r2, r3
    fb98:	4618      	mov	r0, r3
    fb9a:	f002 fc59 	bl	12450 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    fb9e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    fba2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    fba6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    fbaa:	3008      	adds	r0, #8
    fbac:	f002 fbc4 	bl	12338 <radio_pkt_rx_set>
		radio_rssi_measure();
    fbb0:	f002 fc66 	bl	12480 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    fbb4:	f001 ff02 	bl	119bc <ctrl_rl_enabled>
    fbb8:	b138      	cbz	r0, fbca <isr+0x1592>
			u8_t count, *irks = ctrl_irks_get(&count);
    fbba:	a810      	add	r0, sp, #64	; 0x40
    fbbc:	f001 fc4e 	bl	1145c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    fbc0:	4601      	mov	r1, r0
    fbc2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    fbc6:	f002 fe57 	bl	12878 <radio_ar_configure>
		_radio.state = STATE_RX;
    fbca:	2301      	movs	r3, #1
    fbcc:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
    fbce:	f002 fbcd 	bl	1236c <radio_rx_enable>
    fbd2:	f7fe bdab 	b.w	e72c <isr+0xf4>
    fbd6:	bf00      	nop
    fbd8:	1afd498d 	.word	0x1afd498d
    fbdc:	00000007 	.word	0x00000007
    fbe0:	00022060 	.word	0x00022060
    fbe4:	00022040 	.word	0x00022040
    fbe8:	0001496d 	.word	0x0001496d
    fbec:	00016bfb 	.word	0x00016bfb
    fbf0:	00016c07 	.word	0x00016c07
    fbf4:	d4a51000 	.word	0xd4a51000
    fbf8:	0000abb1 	.word	0x0000abb1
    fbfc:	000156bc 	.word	0x000156bc
    fc00:	00016c1a 	.word	0x00016c1a
    fc04:	0001570b 	.word	0x0001570b
    fc08:	00017269 	.word	0x00017269
		radio_filter_disable();
    fc0c:	f002 fc74 	bl	124f8 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    fc10:	7d23      	ldrb	r3, [r4, #20]
    fc12:	2b05      	cmp	r3, #5
    fc14:	d106      	bne.n	fc24 <isr+0x15ec>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc16:	2300      	movs	r3, #0
    fc18:	9300      	str	r3, [sp, #0]
    fc1a:	2204      	movs	r2, #4
    fc1c:	4619      	mov	r1, r3
    fc1e:	4618      	mov	r0, r3
    fc20:	f7f8 f8de 	bl	7de0 <ticker_stop>
	_radio.role = ROLE_NONE;
    fc24:	2500      	movs	r5, #0
    fc26:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
    fc28:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
    fc2a:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    fc2c:	f002 fd1e 	bl	1266c <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fc30:	462a      	mov	r2, r5
    fc32:	4629      	mov	r1, r5
    fc34:	4628      	mov	r0, r5
    fc36:	4bb2      	ldr	r3, [pc, #712]	; (ff00 <isr+0x18c8>)
    fc38:	f7f7 fa76 	bl	7128 <mayfly_enqueue>
	LL_ASSERT(!retval);
    fc3c:	4605      	mov	r5, r0
    fc3e:	2800      	cmp	r0, #0
    fc40:	f000 8188 	beq.w	ff54 <isr+0x191c>
    fc44:	4baf      	ldr	r3, [pc, #700]	; (ff04 <isr+0x18cc>)
    fc46:	9301      	str	r3, [sp, #4]
    fc48:	9300      	str	r3, [sp, #0]
    fc4a:	4aaf      	ldr	r2, [pc, #700]	; (ff08 <isr+0x18d0>)
    fc4c:	4baf      	ldr	r3, [pc, #700]	; (ff0c <isr+0x18d4>)
    fc4e:	49b0      	ldr	r1, [pc, #704]	; (ff10 <isr+0x18d8>)
    fc50:	48b0      	ldr	r0, [pc, #704]	; (ff14 <isr+0x18dc>)
    fc52:	f7ff b89f 	b.w	ed94 <isr+0x75c>
	if (_radio.conn_curr == 0) {
    fc56:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fc5a:	2800      	cmp	r0, #0
    fc5c:	d0e2      	beq.n	fc24 <isr+0x15ec>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    fc5e:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    fc62:	b181      	cbz	r1, fc86 <isr+0x164e>
    fc64:	7ce3      	ldrb	r3, [r4, #19]
    fc66:	2b03      	cmp	r3, #3
    fc68:	d003      	beq.n	fc72 <isr+0x163a>
    fc6a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    fc6e:	07da      	lsls	r2, r3, #31
    fc70:	d509      	bpl.n	fc86 <isr+0x164e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    fc72:	f7fb fb51 	bl	b318 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    fc76:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fc7a:	f7fb f99b 	bl	afb4 <connection_release>
			_radio.conn_curr = NULL;
    fc7e:	2300      	movs	r3, #0
    fc80:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    fc84:	e7ce      	b.n	fc24 <isr+0x15ec>
	latency_event = _radio.conn_curr->latency_event;
    fc86:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    fc8a:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
    fc8e:	f10b 0601 	add.w	r6, fp, #1
    fc92:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    fc94:	2f00      	cmp	r7, #0
    fc96:	f000 8084 	beq.w	fda2 <isr+0x176a>
		if (_radio.role == ROLE_SLAVE) {
    fc9a:	7ce3      	ldrb	r3, [r4, #19]
    fc9c:	2b03      	cmp	r3, #3
    fc9e:	d173      	bne.n	fd88 <isr+0x1750>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    fca0:	f002 fd36 	bl	12710 <radio_tmr_aa_restore>
    fca4:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
    fca6:	f002 fd39 	bl	1271c <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    fcaa:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
    fcae:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
    fcb2:	f003 0307 	and.w	r3, r3, #7
    fcb6:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
    fcb8:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
    fcbc:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
    fcbe:	d052      	beq.n	fd66 <isr+0x172e>
		return 40;
    fcc0:	2b04      	cmp	r3, #4
    fcc2:	bf0c      	ite	eq
    fcc4:	f44f 78bc 	moveq.w	r8, #376	; 0x178
    fcc8:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    fccc:	f100 0330 	add.w	r3, r0, #48	; 0x30
    fcd0:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
    fcd2:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    fcd4:	930a      	str	r3, [sp, #40]	; 0x28
    fcd6:	f8df a24c 	ldr.w	sl, [pc, #588]	; ff24 <isr+0x18ec>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fcda:	a387      	add	r3, pc, #540	; (adr r3, fef8 <isr+0x18c0>)
    fcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    fce0:	d844      	bhi.n	fd6c <isr+0x1734>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fce2:	fba0 010a 	umull	r0, r1, r0, sl
    fce6:	f7f0 fa95 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fcea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fcec:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fcee:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fcf2:	a381      	add	r3, pc, #516	; (adr r3, fef8 <isr+0x18c0>)
    fcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
    fcf8:	fba0 010a 	umull	r0, r1, r0, sl
    fcfc:	f7f0 fa8a 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
    fd00:	2300      	movs	r3, #0
    fd02:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    fd04:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    fd06:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fd0a:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
    fd0e:	b3ab      	cbz	r3, fd7c <isr+0x1744>
				if (pdu_data_tx->len ||
    fd10:	795b      	ldrb	r3, [r3, #5]
    fd12:	b913      	cbnz	r3, fd1a <isr+0x16e2>
    fd14:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
    fd18:	b10b      	cbz	r3, fd1e <isr+0x16e6>
					_radio.conn_curr->latency_event = 0;
    fd1a:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    fd1c:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    fd1e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fd22:	2200      	movs	r2, #0
    fd24:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    fd26:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fd2a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    fd2e:	b1c3      	cbz	r3, fd62 <isr+0x172a>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    fd30:	429e      	cmp	r6, r3
    fd32:	f080 80b0 	bcs.w	fe96 <isr+0x185e>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    fd36:	1b9b      	subs	r3, r3, r6
    fd38:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    fd3a:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    fd3c:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    fd3e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    fd42:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    fd44:	f240 80a9 	bls.w	fe9a <isr+0x1862>
			else if (_radio.role == ROLE_SLAVE) {
    fd48:	7ce3      	ldrb	r3, [r4, #19]
    fd4a:	2b03      	cmp	r3, #3
    fd4c:	d109      	bne.n	fd62 <isr+0x172a>
				if (latency_event != 0) {
    fd4e:	f1bb 0f00 	cmp.w	fp, #0
    fd52:	f040 80a2 	bne.w	fe9a <isr+0x1862>
					force = _radio.conn_curr->slave.force & 0x01;
    fd56:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    fd58:	087b      	lsrs	r3, r7, #1
					if (force) {
    fd5a:	f017 0701 	ands.w	r7, r7, #1
    fd5e:	d13d      	bne.n	fddc <isr+0x17a4>
					_radio.conn_curr->slave.force >>= 1;
    fd60:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
    fd62:	2700      	movs	r7, #0
    fd64:	e03d      	b.n	fde2 <isr+0x17aa>
		return 24;
    fd66:	f04f 0818 	mov.w	r8, #24
    fd6a:	e7af      	b.n	fccc <isr+0x1694>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fd6c:	fba9 010a 	umull	r0, r1, r9, sl
    fd70:	f7f0 fa50 	bl	214 <__aeabi_uldivmod>
    fd74:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fd76:	f108 0030 	add.w	r0, r8, #48	; 0x30
    fd7a:	e7ba      	b.n	fcf2 <isr+0x16ba>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    fd7c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    fd80:	07db      	lsls	r3, r3, #31
    fd82:	d5cc      	bpl.n	fd1e <isr+0x16e6>
				_radio.conn_curr->latency_event =
    fd84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    fd86:	e7c9      	b.n	fd1c <isr+0x16e4>
		} else if (reason_peer) {
    fd88:	b149      	cbz	r1, fd9e <isr+0x1766>
			_radio.conn_curr->master.terminate_ack = 1;
    fd8a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    fd8e:	f043 0301 	orr.w	r3, r3, #1
    fd92:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    fd96:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
    fd9a:	4645      	mov	r5, r8
    fd9c:	e7bf      	b.n	fd1e <isr+0x16e6>
	ticks_drift_minus = 0;
    fd9e:	4688      	mov	r8, r1
    fda0:	e7fb      	b.n	fd9a <isr+0x1762>
	else if (_radio.conn_curr->connect_expire) {
    fda2:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    fda4:	b185      	cbz	r5, fdc8 <isr+0x1790>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    fda6:	42ae      	cmp	r6, r5
    fda8:	d204      	bcs.n	fdb4 <isr+0x177c>
			_radio.conn_curr->connect_expire -= elapsed_event;
    fdaa:	1bad      	subs	r5, r5, r6
    fdac:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    fdae:	463d      	mov	r5, r7
    fdb0:	46a8      	mov	r8, r5
    fdb2:	e7b8      	b.n	fd26 <isr+0x16ee>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    fdb4:	213e      	movs	r1, #62	; 0x3e
    fdb6:	f7fb faaf 	bl	b318 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    fdba:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fdbe:	f7fb f8f9 	bl	afb4 <connection_release>
			_radio.conn_curr = NULL;
    fdc2:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    fdc6:	e72d      	b.n	fc24 <isr+0x15ec>
		if (!_radio.conn_curr->supervision_expire) {
    fdc8:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
    fdcc:	f1b8 0f00 	cmp.w	r8, #0
    fdd0:	d1ee      	bne.n	fdb0 <isr+0x1778>
			_radio.conn_curr->supervision_expire =
    fdd2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    fdd4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    fdd8:	4645      	mov	r5, r8
    fdda:	e7a4      	b.n	fd26 <isr+0x16ee>
						_radio.conn_curr->slave.force |=
    fddc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fde0:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
    fde2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    fde6:	b123      	cbz	r3, fdf2 <isr+0x17ba>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    fde8:	429e      	cmp	r6, r3
    fdea:	d258      	bcs.n	fe9e <isr+0x1866>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    fdec:	1b9b      	subs	r3, r3, r6
    fdee:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    fdf2:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    fdf6:	b123      	cbz	r3, fe02 <isr+0x17ca>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    fdf8:	429e      	cmp	r6, r3
    fdfa:	d252      	bcs.n	fea2 <isr+0x186a>
			_radio.conn_curr->apto_expire -= elapsed_event;
    fdfc:	1b9b      	subs	r3, r3, r6
    fdfe:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    fe02:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    fe06:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    fe0a:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    fe0e:	b123      	cbz	r3, fe1a <isr+0x17e2>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    fe10:	429e      	cmp	r6, r3
    fe12:	d25c      	bcs.n	fece <isr+0x1896>
			_radio.conn_curr->appto_expire -= elapsed_event;
    fe14:	1b9e      	subs	r6, r3, r6
    fe16:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    fe1a:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    fe1e:	428b      	cmp	r3, r1
    fe20:	d006      	beq.n	fe30 <isr+0x17f8>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    fe22:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    fe26:	3b01      	subs	r3, #1
    fe28:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
    fe2a:	bf9c      	itt	ls
    fe2c:	2300      	movls	r3, #0
    fe2e:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    fe30:	b917      	cbnz	r7, fe38 <isr+0x1800>
    fe32:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    fe34:	455b      	cmp	r3, fp
    fe36:	d05c      	beq.n	fef2 <isr+0x18ba>
		lazy = _radio.conn_curr->latency_event + 1;
    fe38:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    fe3a:	3301      	adds	r3, #1
    fe3c:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    fe3e:	b935      	cbnz	r5, fe4e <isr+0x1816>
    fe40:	f1b8 0f00 	cmp.w	r8, #0
    fe44:	d103      	bne.n	fe4e <isr+0x1816>
    fe46:	b913      	cbnz	r3, fe4e <isr+0x1816>
	    (lazy != 0) || (force != 0)) {
    fe48:	2f00      	cmp	r7, #0
    fe4a:	f43f aeeb 	beq.w	fc24 <isr+0x15ec>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    fe4e:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
    fe52:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    fe54:	3207      	adds	r2, #7
		ticker_status =
    fe56:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    fe58:	b2d6      	uxtb	r6, r2
		ticker_status =
    fe5a:	4a2f      	ldr	r2, [pc, #188]	; (ff18 <isr+0x18e0>)
    fe5c:	9205      	str	r2, [sp, #20]
    fe5e:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
    fe60:	9606      	str	r6, [sp, #24]
		ticker_status =
    fe62:	9704      	str	r7, [sp, #16]
    fe64:	9102      	str	r1, [sp, #8]
    fe66:	9101      	str	r1, [sp, #4]
    fe68:	f8cd 8000 	str.w	r8, [sp]
    fe6c:	4632      	mov	r2, r6
    fe6e:	4608      	mov	r0, r1
    fe70:	f7f7 ff68 	bl	7d44 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fe74:	f030 0302 	bics.w	r3, r0, #2
    fe78:	f43f aed4 	beq.w	fc24 <isr+0x15ec>
    fe7c:	7ca3      	ldrb	r3, [r4, #18]
    fe7e:	429e      	cmp	r6, r3
    fe80:	f43f aed0 	beq.w	fc24 <isr+0x15ec>
    fe84:	4b1f      	ldr	r3, [pc, #124]	; (ff04 <isr+0x18cc>)
    fe86:	9301      	str	r3, [sp, #4]
    fe88:	9300      	str	r3, [sp, #0]
    fe8a:	4a1f      	ldr	r2, [pc, #124]	; (ff08 <isr+0x18d0>)
    fe8c:	4b23      	ldr	r3, [pc, #140]	; (ff1c <isr+0x18e4>)
    fe8e:	4920      	ldr	r1, [pc, #128]	; (ff10 <isr+0x18d8>)
    fe90:	4823      	ldr	r0, [pc, #140]	; (ff20 <isr+0x18e8>)
    fe92:	f7fe bf7f 	b.w	ed94 <isr+0x75c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    fe96:	2108      	movs	r1, #8
    fe98:	e6eb      	b.n	fc72 <isr+0x163a>
				force = 1;
    fe9a:	2701      	movs	r7, #1
    fe9c:	e7a1      	b.n	fde2 <isr+0x17aa>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    fe9e:	2122      	movs	r1, #34	; 0x22
    fea0:	e6e7      	b.n	fc72 <isr+0x163a>
			_radio.conn_curr->apto_expire = 0;
    fea2:	2300      	movs	r3, #0
    fea4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
    fea8:	2002      	movs	r0, #2
    feaa:	f7f9 fe87 	bl	9bbc <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    feae:	b928      	cbnz	r0, febc <isr+0x1884>
    feb0:	4b14      	ldr	r3, [pc, #80]	; (ff04 <isr+0x18cc>)
    feb2:	9301      	str	r3, [sp, #4]
    feb4:	9300      	str	r3, [sp, #0]
    feb6:	4b19      	ldr	r3, [pc, #100]	; (ff1c <isr+0x18e4>)
    feb8:	f7fe be36 	b.w	eb28 <isr+0x4f0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
    febc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fec0:	8c1b      	ldrh	r3, [r3, #32]
    fec2:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
    fec4:	230a      	movs	r3, #10
    fec6:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
    fec8:	f7fa fce2 	bl	a890 <packet_rx_enqueue>
    fecc:	e799      	b.n	fe02 <isr+0x17ca>
			_radio.conn_curr->appto_expire = 0;
    fece:	2300      	movs	r3, #0
    fed0:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    fed4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
    fed8:	2b00      	cmp	r3, #0
    feda:	d19e      	bne.n	fe1a <isr+0x17e2>
    fedc:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    fee0:	428b      	cmp	r3, r1
    fee2:	d19e      	bne.n	fe22 <isr+0x17ea>
				_radio.conn_curr->llcp_type = LLCP_PING;
    fee4:	2307      	movs	r3, #7
    fee6:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    feea:	1e4b      	subs	r3, r1, #1
    feec:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    fef0:	e793      	b.n	fe1a <isr+0x17e2>
	lazy = 0;
    fef2:	463b      	mov	r3, r7
    fef4:	e7a3      	b.n	fe3e <isr+0x1806>
    fef6:	bf00      	nop
    fef8:	1afd498d 	.word	0x1afd498d
    fefc:	00000007 	.word	0x00000007
    ff00:	20003d50 	.word	0x20003d50
    ff04:	0001496d 	.word	0x0001496d
    ff08:	000156bc 	.word	0x000156bc
    ff0c:	00016ceb 	.word	0x00016ceb
    ff10:	0001570b 	.word	0x0001570b
    ff14:	0001771b 	.word	0x0001771b
    ff18:	0000abf9 	.word	0x0000abf9
    ff1c:	00016c28 	.word	0x00016c28
    ff20:	000172d7 	.word	0x000172d7
    ff24:	3b9aca00 	.word	0x3b9aca00
		LL_ASSERT((_radio.state == STATE_STOP) ||
    ff28:	3b04      	subs	r3, #4
    ff2a:	2b01      	cmp	r3, #1
    ff2c:	d908      	bls.n	ff40 <isr+0x1908>
    ff2e:	4b12      	ldr	r3, [pc, #72]	; (ff78 <isr+0x1940>)
    ff30:	9301      	str	r3, [sp, #4]
    ff32:	9300      	str	r3, [sp, #0]
    ff34:	4a11      	ldr	r2, [pc, #68]	; (ff7c <isr+0x1944>)
    ff36:	4b12      	ldr	r3, [pc, #72]	; (ff80 <isr+0x1948>)
    ff38:	4912      	ldr	r1, [pc, #72]	; (ff84 <isr+0x194c>)
    ff3a:	4813      	ldr	r0, [pc, #76]	; (ff88 <isr+0x1950>)
    ff3c:	f7fe bf2a 	b.w	ed94 <isr+0x75c>
		_radio.state = STATE_NONE;
    ff40:	2300      	movs	r3, #0
    ff42:	7523      	strb	r3, [r4, #20]
    ff44:	f7fe bc22 	b.w	e78c <isr+0x154>
		LL_ASSERT(0);
    ff48:	4b0b      	ldr	r3, [pc, #44]	; (ff78 <isr+0x1940>)
    ff4a:	9301      	str	r3, [sp, #4]
    ff4c:	9300      	str	r3, [sp, #0]
    ff4e:	4b0c      	ldr	r3, [pc, #48]	; (ff80 <isr+0x1948>)
    ff50:	f7fe bc69 	b.w	e826 <isr+0x1ee>
	clock_control_off(_radio.hf_clock, NULL);
    ff54:	6820      	ldr	r0, [r4, #0]
    ff56:	6843      	ldr	r3, [r0, #4]
    ff58:	4629      	mov	r1, r5
    ff5a:	685b      	ldr	r3, [r3, #4]
    ff5c:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    ff5e:	2201      	movs	r2, #1
    ff60:	4611      	mov	r1, r2
    ff62:	4628      	mov	r0, r5
    ff64:	f7f7 f8b8 	bl	70d8 <mayfly_enable>
    ff68:	f7fe bc10 	b.w	e78c <isr+0x154>
		LL_ASSERT(0);
    ff6c:	4b02      	ldr	r3, [pc, #8]	; (ff78 <isr+0x1940>)
    ff6e:	9301      	str	r3, [sp, #4]
    ff70:	9300      	str	r3, [sp, #0]
    ff72:	4b06      	ldr	r3, [pc, #24]	; (ff8c <isr+0x1954>)
    ff74:	f7fe bc57 	b.w	e826 <isr+0x1ee>
    ff78:	0001496d 	.word	0x0001496d
    ff7c:	000156bc 	.word	0x000156bc
    ff80:	00016c37 	.word	0x00016c37
    ff84:	0001570b 	.word	0x0001570b
    ff88:	0001734d 	.word	0x0001734d
    ff8c:	00016c4d 	.word	0x00016c4d

0000ff90 <radio_init>:
{
    ff90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    ff94:	4e3d      	ldr	r6, [pc, #244]	; (1008c <__kernel_ram_size+0x8c>)
{
    ff96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ff98:	f89d c01c 	ldrb.w	ip, [sp, #28]
    ff9c:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    ffa0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    ffa4:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    ffa8:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    ffaa:	f44f 70aa 	mov.w	r0, #340	; 0x154
    ffae:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    ffb2:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    ffb6:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
    ffba:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    ffbc:	f10c 0401 	add.w	r4, ip, #1
    ffc0:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    ffc2:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    ffc4:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    ffc8:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    ffcc:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
    ffce:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    ffd0:	bf98      	it	ls
    ffd2:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
    ffd6:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    ffda:	bf88      	it	hi
    ffdc:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    ffe0:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
    ffe4:	bf8c      	ite	hi
    ffe6:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    ffea:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
    ffee:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    fff2:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    fff6:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    fffa:	bf8c      	ite	hi
    fffc:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   10000:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   10002:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   10006:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
   1000a:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
   1000e:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10012:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   10016:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1001a:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
   1001e:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10022:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10024:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
   10026:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   1002a:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1002c:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
   10030:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10034:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   10038:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   1003a:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   1003e:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   10042:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   10046:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   1004a:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1004e:	340a      	adds	r4, #10
   10050:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   10054:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   10056:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   10058:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   1005c:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   10060:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   10062:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
   10066:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1006a:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
   1006e:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
   10072:	d003      	beq.n	1007c <__kernel_ram_size+0x7c>
		return (retcode + mem_size);
   10074:	442c      	add	r4, r5
}
   10076:	4620      	mov	r0, r4
   10078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   1007c:	2301      	movs	r3, #1
   1007e:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
   10082:	f7f9 fe5f 	bl	9d44 <common_init>
	radio_setup();
   10086:	f002 f8a7 	bl	121d8 <radio_setup>
	return retcode;
   1008a:	e7f4      	b.n	10076 <__kernel_ram_size+0x76>
   1008c:	200008c8 	.word	0x200008c8

00010090 <ll_reset>:
{
   10090:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   10092:	2103      	movs	r1, #3
   10094:	2005      	movs	r0, #5
   10096:	f7f9 ff3f 	bl	9f18 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   1009a:	2104      	movs	r1, #4
   1009c:	2006      	movs	r0, #6
   1009e:	f7f9 ff3b 	bl	9f18 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   100a2:	4c22      	ldr	r4, [pc, #136]	; (1012c <ll_reset+0x9c>)
   100a4:	2500      	movs	r5, #0
   100a6:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   100aa:	b2ab      	uxth	r3, r5
   100ac:	429a      	cmp	r2, r3
   100ae:	f105 0501 	add.w	r5, r5, #1
   100b2:	d834      	bhi.n	1011e <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
   100b4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   100b8:	f36f 13c7 	bfc	r3, #7, #1
   100bc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   100c0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   100c4:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   100c6:	f360 0300 	bfi	r3, r0, #0, #1
   100ca:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   100ce:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   100d0:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   100d4:	fbb3 f3f2 	udiv	r3, r3, r2
   100d8:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   100dc:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
   100e0:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   100e4:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   100e6:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
   100ea:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   100ee:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
   100f2:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
   100f6:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   100fa:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   100fe:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
   10102:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
   10106:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
   1010a:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
   1010e:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
   10112:	f001 fee1 	bl	11ed8 <ll_filter_reset>
}
   10116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   1011a:	f7f9 be13 	b.w	9d44 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   1011e:	1da8      	adds	r0, r5, #6
   10120:	21ff      	movs	r1, #255	; 0xff
   10122:	b2c0      	uxtb	r0, r0
   10124:	f7f9 fef8 	bl	9f18 <role_disable>
   10128:	e7bd      	b.n	100a6 <ll_reset+0x16>
   1012a:	bf00      	nop
   1012c:	200008c8 	.word	0x200008c8

00010130 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   10130:	4b02      	ldr	r3, [pc, #8]	; (1013c <ll_adv_is_enabled+0xc>)
   10132:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   10136:	09c0      	lsrs	r0, r0, #7
   10138:	4770      	bx	lr
   1013a:	bf00      	nop
   1013c:	200008c8 	.word	0x200008c8

00010140 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   10140:	4b04      	ldr	r3, [pc, #16]	; (10154 <radio_adv_filter_pol_get+0x14>)
   10142:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   10146:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   10148:	bfba      	itte	lt
   1014a:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   1014e:	0980      	lsrlt	r0, r0, #6
   10150:	2000      	movge	r0, #0
}
   10152:	4770      	bx	lr
   10154:	200008c8 	.word	0x200008c8

00010158 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10158:	4a09      	ldr	r2, [pc, #36]	; (10180 <ll_scan_is_enabled+0x28>)
   1015a:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   1015e:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   10162:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10166:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   1016a:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   1016c:	f003 0301 	and.w	r3, r3, #1
   10170:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   10174:	bf14      	ite	ne
   10176:	2004      	movne	r0, #4
   10178:	2000      	moveq	r0, #0
}
   1017a:	4318      	orrs	r0, r3
   1017c:	4770      	bx	lr
   1017e:	bf00      	nop
   10180:	200008c8 	.word	0x200008c8

00010184 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   10184:	4b05      	ldr	r3, [pc, #20]	; (1019c <radio_scan_filter_pol_get+0x18>)
   10186:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   1018a:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   1018e:	bf1c      	itt	ne
   10190:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   10194:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   10198:	4770      	bx	lr
   1019a:	bf00      	nop
   1019c:	200008c8 	.word	0x200008c8

000101a0 <radio_connect_enable>:
{
   101a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   101a4:	f8df 8384 	ldr.w	r8, [pc, #900]	; 1052c <radio_connect_enable+0x38c>
{
   101a8:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
   101aa:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
   101ae:	9303      	str	r3, [sp, #12]
   101b0:	4683      	mov	fp, r0
   101b2:	468a      	mov	sl, r1
   101b4:	4691      	mov	r9, r2
   101b6:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   101b8:	2e00      	cmp	r6, #0
   101ba:	f040 819c 	bne.w	104f6 <radio_connect_enable+0x356>
	link = mem_acquire(&_radio.link_rx_free);
   101be:	f508 70a4 	add.w	r0, r8, #328	; 0x148
   101c2:	f7f6 fee6 	bl	6f92 <mem_acquire>
	if (!link) {
   101c6:	4607      	mov	r7, r0
   101c8:	b150      	cbz	r0, 101e0 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   101ca:	f508 7086 	add.w	r0, r8, #268	; 0x10c
   101ce:	f7f6 fee0 	bl	6f92 <mem_acquire>
	if (!conn) {
   101d2:	4604      	mov	r4, r0
   101d4:	b930      	cbnz	r0, 101e4 <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   101d6:	f508 71a4 	add.w	r1, r8, #328	; 0x148
   101da:	4638      	mov	r0, r7
   101dc:	f7f6 fef3 	bl	6fc6 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   101e0:	2007      	movs	r0, #7
   101e2:	e15c      	b.n	1049e <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   101e4:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
   101e8:	f36b 1386 	bfi	r3, fp, #6, #1
   101ec:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   101f0:	2206      	movs	r2, #6
   101f2:	4651      	mov	r1, sl
   101f4:	f108 00ea 	add.w	r0, r8, #234	; 0xea
   101f8:	f7f1 fd00 	bl	1bfc <memcpy>
	_radio.scanner.conn_latency = latency;
   101fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10200:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10204:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   10206:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
   1020a:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   1020e:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   10210:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10214:	f002 f89c 	bl	12350 <radio_tx_ready_delay_get>
   10218:	49bb      	ldr	r1, [pc, #748]	; (10508 <radio_connect_enable+0x368>)
   1021a:	f200 4052 	addw	r0, r0, #1106	; 0x452
   1021e:	a3b8      	add	r3, pc, #736	; (adr r3, 10500 <radio_connect_enable+0x360>)
   10220:	e9d3 2300 	ldrd	r2, r3, [r3]
   10224:	fba0 0101 	umull	r0, r1, r0, r1
   10228:	f7ef fff4 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   1022c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10230:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10234:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
   10238:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   1023a:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 10530 <radio_connect_enable+0x390>
	conn->llcp_features = RADIO_BLE_FEAT;
   1023e:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   10242:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   10246:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   10248:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   1024c:	2104      	movs	r1, #4
   1024e:	a805      	add	r0, sp, #20
   10250:	f7f7 fed6 	bl	8000 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   10254:	f8dd c014 	ldr.w	ip, [sp, #20]
   10258:	2000      	movs	r0, #0
   1025a:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   1025e:	231f      	movs	r3, #31
	transitions = 0;
   10260:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   10262:	2101      	movs	r1, #1
	while (bit_idx--) {
   10264:	3b01      	subs	r3, #1
   10266:	b2db      	uxtb	r3, r3
   10268:	2bff      	cmp	r3, #255	; 0xff
   1026a:	d103      	bne.n	10274 <radio_connect_enable+0xd4>
   1026c:	b3d0      	cbz	r0, 102e4 <radio_connect_enable+0x144>
   1026e:	f8cd c014 	str.w	ip, [sp, #20]
   10272:	e037      	b.n	102e4 <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   10274:	fa2c fe03 	lsr.w	lr, ip, r3
   10278:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   1027c:	45d6      	cmp	lr, sl
   1027e:	d11a      	bne.n	102b6 <radio_connect_enable+0x116>
			consecutive_cnt++;
   10280:	3101      	adds	r1, #1
   10282:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   10284:	2906      	cmp	r1, #6
   10286:	d807      	bhi.n	10298 <radio_connect_enable+0xf8>
   10288:	2b1b      	cmp	r3, #27
   1028a:	d81a      	bhi.n	102c2 <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   1028c:	b122      	cbz	r2, 10298 <radio_connect_enable+0xf8>
   1028e:	2b1b      	cmp	r3, #27
   10290:	d017      	beq.n	102c2 <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   10292:	2a01      	cmp	r2, #1
   10294:	d815      	bhi.n	102c2 <radio_connect_enable+0x122>
   10296:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   10298:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   1029c:	f1be 0f00 	cmp.w	lr, #0
   102a0:	f000 8100 	beq.w	104a4 <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   102a4:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   102a8:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   102ac:	3201      	adds	r2, #1
   102ae:	2001      	movs	r0, #1
   102b0:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   102b2:	4601      	mov	r1, r0
   102b4:	e005      	b.n	102c2 <radio_connect_enable+0x122>
			transitions++;
   102b6:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   102b8:	2b1b      	cmp	r3, #27
			transitions++;
   102ba:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   102bc:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   102c0:	d9e5      	bls.n	1028e <radio_connect_enable+0xee>
		if (transitions > 24) {
   102c2:	2a18      	cmp	r2, #24
   102c4:	f240 80f6 	bls.w	104b4 <radio_connect_enable+0x314>
   102c8:	b108      	cbz	r0, 102ce <radio_connect_enable+0x12e>
   102ca:	f8cd c014 	str.w	ip, [sp, #20]
   102ce:	3301      	adds	r3, #1
   102d0:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   102d2:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   102d6:	f1be 0f00 	cmp.w	lr, #0
   102da:	f000 80e8 	beq.w	104ae <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   102de:	425b      	negs	r3, r3
   102e0:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   102e2:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   102e4:	9b05      	ldr	r3, [sp, #20]
   102e6:	a806      	add	r0, sp, #24
   102e8:	ea83 0308 	eor.w	r3, r3, r8
   102ec:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   102f0:	2104      	movs	r1, #4
   102f2:	f7f6 fff9 	bl	72e8 <util_ones_count_get>
   102f6:	2801      	cmp	r0, #1
   102f8:	f240 80e3 	bls.w	104c2 <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   102fc:	9b05      	ldr	r3, [sp, #20]
   102fe:	b29a      	uxth	r2, r3
   10300:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   10304:	f000 80d8 	beq.w	104b8 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   10308:	2204      	movs	r2, #4
   1030a:	a905      	add	r1, sp, #20
   1030c:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   10310:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   10312:	f7f1 fc73 	bl	1bfc <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   10316:	2103      	movs	r1, #3
   10318:	f104 0014 	add.w	r0, r4, #20
   1031c:	f7f7 fe70 	bl	8000 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   10320:	2205      	movs	r2, #5
   10322:	497a      	ldr	r1, [pc, #488]	; (1050c <radio_connect_enable+0x36c>)
   10324:	f104 0017 	add.w	r0, r4, #23
   10328:	f7f1 fc68 	bl	1bfc <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   1032c:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
   10330:	7f63      	ldrb	r3, [r4, #29]
   10332:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   10336:	f36f 1386 	bfc	r3, #6, #1
   1033a:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   1033c:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   1033e:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   10340:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   10342:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   10344:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
   10348:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
   1034c:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
   10350:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   10352:	211b      	movs	r1, #27
   10354:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   10356:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   10358:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
   1035c:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1035e:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   10362:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10366:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10368:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   1036a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   1036e:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   10370:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   10374:	2601      	movs	r6, #1
   10376:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   1037a:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   1037e:	f363 11c7 	bfi	r1, r3, #7, #1
   10382:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   10386:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   1038a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   1038e:	f366 0102 	bfi	r1, r6, #0, #3
   10392:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   10396:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
   1039a:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   1039c:	b2c9      	uxtb	r1, r1
   1039e:	f36c 01c5 	bfi	r1, ip, #3, #3
   103a2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   103a6:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   103aa:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   103ac:	f366 0102 	bfi	r1, r6, #0, #3
   103b0:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   103b4:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   103b6:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   103b8:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   103bc:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   103be:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   103c0:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   103c4:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   103c8:	f363 0100 	bfi	r1, r3, #0, #1
   103cc:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   103d0:	f240 42e2 	movw	r2, #1250	; 0x4e2
   103d4:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   103d8:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
   103dc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   103e0:	1e56      	subs	r6, r2, #1
   103e2:	f242 7e10 	movw	lr, #10000	; 0x2710
   103e6:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   103ea:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   103ee:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   103f2:	4b47      	ldr	r3, [pc, #284]	; (10510 <radio_connect_enable+0x370>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   103f4:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   103f6:	4947      	ldr	r1, [pc, #284]	; (10514 <radio_connect_enable+0x374>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   103f8:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   103fa:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   103fc:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10400:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10404:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10406:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1040a:	1d81      	adds	r1, r0, #6
   1040c:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1040e:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10412:	dc6a      	bgt.n	104ea <radio_connect_enable+0x34a>
	conn->llcp_version.tx = 0;
   10414:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10418:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   1041c:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   1041e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   10422:	f360 0341 	bfi	r3, r0, #1, #1
   10426:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   1042a:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   1042e:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   10432:	f360 1304 	bfi	r3, r0, #4, #1
   10436:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   1043a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   1043e:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   10442:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10446:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   1044a:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   1044e:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   10452:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   10456:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   1045a:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   1045e:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   10462:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   10466:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   1046a:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   1046e:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   10472:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   10476:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   1047a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   1047e:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   10482:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   10486:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   1048a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   1048e:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   10492:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   10496:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   1049a:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
   1049e:	b007      	add	sp, #28
   104a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   104a4:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   104a8:	f04f 0e01 	mov.w	lr, #1
   104ac:	e6fe      	b.n	102ac <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   104ae:	3b01      	subs	r3, #1
   104b0:	4313      	orrs	r3, r2
   104b2:	e716      	b.n	102e2 <radio_connect_enable+0x142>
		if (transitions > 24) {
   104b4:	46f2      	mov	sl, lr
   104b6:	e6d5      	b.n	10264 <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   104b8:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   104ba:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   104be:	f47f af23 	bne.w	10308 <radio_connect_enable+0x168>
   104c2:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   104c4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   104c8:	f47f aec0 	bne.w	1024c <radio_connect_enable+0xac>
   104cc:	4b12      	ldr	r3, [pc, #72]	; (10518 <radio_connect_enable+0x378>)
   104ce:	9301      	str	r3, [sp, #4]
   104d0:	9300      	str	r3, [sp, #0]
   104d2:	4a12      	ldr	r2, [pc, #72]	; (1051c <radio_connect_enable+0x37c>)
   104d4:	4b12      	ldr	r3, [pc, #72]	; (10520 <radio_connect_enable+0x380>)
   104d6:	4913      	ldr	r1, [pc, #76]	; (10524 <radio_connect_enable+0x384>)
   104d8:	4813      	ldr	r0, [pc, #76]	; (10528 <radio_connect_enable+0x388>)
   104da:	f7f0 fd57 	bl	f8c <printk>
   104de:	4040      	eors	r0, r0
   104e0:	f380 8811 	msr	BASEPRI, r0
   104e4:	f04f 0004 	mov.w	r0, #4
   104e8:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   104ea:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   104ee:	33fa      	adds	r3, #250	; 0xfa
   104f0:	441a      	add	r2, r3
   104f2:	b292      	uxth	r2, r2
   104f4:	e78e      	b.n	10414 <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   104f6:	200c      	movs	r0, #12
   104f8:	e7d1      	b.n	1049e <radio_connect_enable+0x2fe>
   104fa:	bf00      	nop
   104fc:	f3af 8000 	nop.w
   10500:	1afd498d 	.word	0x1afd498d
   10504:	00000007 	.word	0x00000007
   10508:	3b9aca00 	.word	0x3b9aca00
   1050c:	200009e2 	.word	0x200009e2
   10510:	01c9c37f 	.word	0x01c9c37f
   10514:	026259ff 	.word	0x026259ff
   10518:	0001496d 	.word	0x0001496d
   1051c:	000156bc 	.word	0x000156bc
   10520:	00016dd7 	.word	0x00016dd7
   10524:	0001570b 	.word	0x0001570b
   10528:	00017830 	.word	0x00017830
   1052c:	200008c8 	.word	0x200008c8
   10530:	8e89bed6 	.word	0x8e89bed6

00010534 <ll_conn_update>:
{
   10534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10538:	460c      	mov	r4, r1
   1053a:	4690      	mov	r8, r2
   1053c:	461d      	mov	r5, r3
   1053e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   10542:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   10546:	f7f9 fcd1 	bl	9eec <connection_get>
	if (!conn) {
   1054a:	b330      	cbz	r0, 1059a <ll_conn_update+0x66>
	if (!cmd) {
   1054c:	2c00      	cmp	r4, #0
   1054e:	d14a      	bne.n	105e6 <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   10550:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   10554:	06d9      	lsls	r1, r3, #27
   10556:	d407      	bmi.n	10568 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   10558:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   1055c:	069a      	lsls	r2, r3, #26
   1055e:	d541      	bpl.n	105e4 <ll_conn_update+0xb0>
		     (conn->llcp_features &
   10560:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   10564:	079b      	lsls	r3, r3, #30
   10566:	d43d      	bmi.n	105e4 <ll_conn_update+0xb0>
		} else if (conn->role) {
   10568:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1056c:	2b00      	cmp	r3, #0
   1056e:	da17      	bge.n	105a0 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10570:	201a      	movs	r0, #26
   10572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   10576:	428b      	cmp	r3, r1
   10578:	d00f      	beq.n	1059a <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   1057a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   1057e:	f003 0207 	and.w	r2, r3, #7
   10582:	2a03      	cmp	r2, #3
   10584:	d109      	bne.n	1059a <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   10586:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   1058a:	b2db      	uxtb	r3, r3
   1058c:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   10590:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   10594:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   10598:	e021      	b.n	105de <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1059a:	200c      	movs	r0, #12
   1059c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   105a0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   105a4:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   105a8:	429a      	cmp	r2, r3
   105aa:	d1f6      	bne.n	1059a <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   105ac:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   105b0:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   105b4:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   105b6:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   105b8:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   105bc:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   105c0:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   105c2:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   105c6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   105ca:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   105ce:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   105d2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   105d6:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   105da:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   105de:	2000      	movs	r0, #0
   105e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   105e4:	2401      	movs	r4, #1
		cmd--;
   105e6:	3c01      	subs	r4, #1
		if (cmd) {
   105e8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   105ec:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   105f0:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   105f4:	d1bf      	bne.n	10576 <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   105f6:	4299      	cmp	r1, r3
   105f8:	d1cf      	bne.n	1059a <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   105fa:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   105fe:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   10602:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   10606:	b2db      	uxtb	r3, r3
   10608:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   1060c:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   1060e:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   10612:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   10616:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   1061a:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   1061e:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   10622:	e7dc      	b.n	105de <ll_conn_update+0xaa>

00010624 <ll_chm_update>:
{
   10624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   10628:	4c1e      	ldr	r4, [pc, #120]	; (106a4 <ll_chm_update+0x80>)
   1062a:	4601      	mov	r1, r0
   1062c:	2205      	movs	r2, #5
{
   1062e:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   10630:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   10634:	f7f1 fae2 	bl	1bfc <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   10638:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   1063c:	2105      	movs	r1, #5
   1063e:	f7f6 fe53 	bl	72e8 <util_ones_count_get>
	_radio.data_chan_count =
   10642:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   10646:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   1064a:	3c01      	subs	r4, #1
   1064c:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   1064e:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   10650:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   10654:	2cff      	cmp	r4, #255	; 0xff
   10656:	d102      	bne.n	1065e <ll_chm_update+0x3a>
	return 0;
   10658:	2000      	movs	r0, #0
   1065a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   1065e:	4620      	mov	r0, r4
   10660:	f7f9 fc44 	bl	9eec <connection_get>
		if (!conn || conn->role) {
   10664:	4606      	mov	r6, r0
   10666:	b1b8      	cbz	r0, 10698 <ll_chm_update+0x74>
   10668:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1066c:	2b00      	cmp	r3, #0
   1066e:	db13      	blt.n	10698 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   10670:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10674:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10678:	429a      	cmp	r2, r3
   1067a:	d110      	bne.n	1069e <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   1067c:	2205      	movs	r2, #5
   1067e:	4629      	mov	r1, r5
   10680:	3079      	adds	r0, #121	; 0x79
   10682:	f7f1 fabb 	bl	1bfc <memcpy>
		conn->llcp_req++;
   10686:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   1068a:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   1068e:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   10690:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   10694:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   10698:	3c01      	subs	r4, #1
   1069a:	b2e4      	uxtb	r4, r4
   1069c:	e7da      	b.n	10654 <ll_chm_update+0x30>
			return 1;
   1069e:	2001      	movs	r0, #1
}
   106a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   106a4:	200008c8 	.word	0x200008c8

000106a8 <ll_chm_get>:
{
   106a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   106aa:	460d      	mov	r5, r1
	conn = connection_get(handle);
   106ac:	f7f9 fc1e 	bl	9eec <connection_get>
	if (!conn) {
   106b0:	4604      	mov	r4, r0
   106b2:	b160      	cbz	r0, 106ce <ll_chm_get+0x26>
		conn->chm_update = 0;
   106b4:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   106b6:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   106ba:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   106bc:	2205      	movs	r2, #5
   106be:	4631      	mov	r1, r6
   106c0:	4628      	mov	r0, r5
   106c2:	f7f1 fa9b 	bl	1bfc <memcpy>
	} while (conn->chm_update);
   106c6:	7f20      	ldrb	r0, [r4, #28]
   106c8:	2800      	cmp	r0, #0
   106ca:	d1f6      	bne.n	106ba <ll_chm_get+0x12>
   106cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   106ce:	2001      	movs	r0, #1
}
   106d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000106d2 <ll_feature_req_send>:
{
   106d2:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   106d4:	f7f9 fc0a 	bl	9eec <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   106d8:	b168      	cbz	r0, 106f6 <ll_feature_req_send+0x24>
   106da:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   106de:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   106e2:	4293      	cmp	r3, r2
   106e4:	d107      	bne.n	106f6 <ll_feature_req_send+0x24>
	conn->llcp_req++;
   106e6:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   106e8:	2204      	movs	r2, #4
	conn->llcp_req++;
   106ea:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   106ee:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   106f2:	2000      	movs	r0, #0
   106f4:	bd08      	pop	{r3, pc}
		return 1;
   106f6:	2001      	movs	r0, #1
}
   106f8:	bd08      	pop	{r3, pc}

000106fa <ll_version_ind_send>:
{
   106fa:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   106fc:	f7f9 fbf6 	bl	9eec <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10700:	b168      	cbz	r0, 1071e <ll_version_ind_send+0x24>
   10702:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10706:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1070a:	4293      	cmp	r3, r2
   1070c:	d107      	bne.n	1071e <ll_version_ind_send+0x24>
	conn->llcp_req++;
   1070e:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   10710:	2205      	movs	r2, #5
	conn->llcp_req++;
   10712:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   10716:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   1071a:	2000      	movs	r0, #0
   1071c:	bd08      	pop	{r3, pc}
		return 1;
   1071e:	2001      	movs	r0, #1
}
   10720:	bd08      	pop	{r3, pc}

00010722 <ll_terminate_ind_send>:
{
   10722:	b510      	push	{r4, lr}
   10724:	460c      	mov	r4, r1
	conn = connection_get(handle);
   10726:	f7f9 fbe1 	bl	9eec <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   1072a:	b160      	cbz	r0, 10746 <ll_terminate_ind_send+0x24>
   1072c:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   10730:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   10734:	4293      	cmp	r3, r2
   10736:	d106      	bne.n	10746 <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   10738:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   1073a:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   1073e:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   10742:	2000      	movs	r0, #0
   10744:	bd10      	pop	{r4, pc}
		return 1;
   10746:	2001      	movs	r0, #1
}
   10748:	bd10      	pop	{r4, pc}

0001074a <ll_tx_pwr_lvl_get>:
{
   1074a:	b510      	push	{r4, lr}
   1074c:	4614      	mov	r4, r2
	conn = connection_get(handle);
   1074e:	f7f9 fbcd 	bl	9eec <connection_get>
	if (!conn) {
   10752:	b110      	cbz	r0, 1075a <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   10754:	2000      	movs	r0, #0
   10756:	7020      	strb	r0, [r4, #0]
	return 0;
   10758:	bd10      	pop	{r4, pc}
		return 1;
   1075a:	2001      	movs	r0, #1
}
   1075c:	bd10      	pop	{r4, pc}

0001075e <ll_apto_get>:
{
   1075e:	b510      	push	{r4, lr}
   10760:	460c      	mov	r4, r1
	conn = connection_get(handle);
   10762:	f7f9 fbc3 	bl	9eec <connection_get>
	if (!conn) {
   10766:	b160      	cbz	r0, 10782 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   10768:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   1076a:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   1076e:	435a      	muls	r2, r3
   10770:	237d      	movs	r3, #125	; 0x7d
   10772:	4353      	muls	r3, r2
	return 0;
   10774:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   10776:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1077a:	fb93 f3f2 	sdiv	r3, r3, r2
   1077e:	8023      	strh	r3, [r4, #0]
	return 0;
   10780:	bd10      	pop	{r4, pc}
		return 1;
   10782:	2001      	movs	r0, #1
}
   10784:	bd10      	pop	{r4, pc}

00010786 <ll_apto_set>:
{
   10786:	b510      	push	{r4, lr}
   10788:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1078a:	f7f9 fbaf 	bl	9eec <connection_get>
	if (!conn) {
   1078e:	b170      	cbz	r0, 107ae <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   10790:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   10792:	f240 43e2 	movw	r3, #1250	; 0x4e2
   10796:	4353      	muls	r3, r2
   10798:	f242 7110 	movw	r1, #10000	; 0x2710
   1079c:	fb01 3404 	mla	r4, r1, r4, r3
   107a0:	3c01      	subs	r4, #1
   107a2:	fb94 f4f3 	sdiv	r4, r4, r3
   107a6:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   107aa:	2000      	movs	r0, #0
   107ac:	bd10      	pop	{r4, pc}
		return 1;
   107ae:	2001      	movs	r0, #1
}
   107b0:	bd10      	pop	{r4, pc}

000107b2 <ll_length_req_send>:
{
   107b2:	b570      	push	{r4, r5, r6, lr}
   107b4:	460e      	mov	r6, r1
   107b6:	4615      	mov	r5, r2
	conn = connection_get(handle);
   107b8:	f7f9 fb98 	bl	9eec <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   107bc:	b1d0      	cbz	r0, 107f4 <ll_length_req_send+0x42>
   107be:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   107c2:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   107c6:	429a      	cmp	r2, r3
   107c8:	d114      	bne.n	107f4 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   107ca:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   107ce:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   107d2:	4293      	cmp	r3, r2
   107d4:	d10e      	bne.n	107f4 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   107d6:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   107da:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   107de:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   107e0:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   107e4:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   107e8:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   107ec:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   107f0:	2000      	movs	r0, #0
   107f2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   107f4:	2001      	movs	r0, #1
}
   107f6:	bd70      	pop	{r4, r5, r6, pc}

000107f8 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   107f8:	4b03      	ldr	r3, [pc, #12]	; (10808 <ll_length_default_get+0x10>)
   107fa:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   107fe:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   10800:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   10804:	800b      	strh	r3, [r1, #0]
   10806:	4770      	bx	lr
   10808:	200008c8 	.word	0x200008c8

0001080c <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   1080c:	4b03      	ldr	r3, [pc, #12]	; (1081c <ll_length_default_set+0x10>)
   1080e:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   10812:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   10816:	2000      	movs	r0, #0
   10818:	4770      	bx	lr
   1081a:	bf00      	nop
   1081c:	200008c8 	.word	0x200008c8

00010820 <ll_length_max_get>:
{
   10820:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10822:	241b      	movs	r4, #27
   10824:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   10826:	f44f 70a4 	mov.w	r0, #328	; 0x148
   1082a:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   1082c:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1082e:	8018      	strh	r0, [r3, #0]
   10830:	bd10      	pop	{r4, pc}

00010832 <ll_phy_get>:
{
   10832:	b538      	push	{r3, r4, r5, lr}
   10834:	460d      	mov	r5, r1
   10836:	4614      	mov	r4, r2
	conn = connection_get(handle);
   10838:	f7f9 fb58 	bl	9eec <connection_get>
	if (!conn) {
   1083c:	b158      	cbz	r0, 10856 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   1083e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   10842:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   10846:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   10848:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1084c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10850:	7023      	strb	r3, [r4, #0]
	return 0;
   10852:	2000      	movs	r0, #0
   10854:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   10856:	2001      	movs	r0, #1
}
   10858:	bd38      	pop	{r3, r4, r5, pc}
	...

0001085c <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   1085c:	4b03      	ldr	r3, [pc, #12]	; (1086c <ll_phy_default_set+0x10>)
   1085e:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   10862:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   10866:	2000      	movs	r0, #0
   10868:	4770      	bx	lr
   1086a:	bf00      	nop
   1086c:	200008c8 	.word	0x200008c8

00010870 <ll_phy_req_send>:
{
   10870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10874:	4689      	mov	r9, r1
   10876:	4690      	mov	r8, r2
   10878:	461f      	mov	r7, r3
	conn = connection_get(handle);
   1087a:	f7f9 fb37 	bl	9eec <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1087e:	b320      	cbz	r0, 108ca <ll_phy_req_send+0x5a>
   10880:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10884:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10888:	429a      	cmp	r2, r3
   1088a:	d11e      	bne.n	108ca <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   1088c:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10890:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   10894:	429d      	cmp	r5, r3
   10896:	d118      	bne.n	108ca <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10898:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   1089c:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   108a0:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   108a4:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   108a8:	f046 0102 	orr.w	r1, r6, #2
   108ac:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   108b0:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   108b2:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   108b4:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   108b8:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   108bc:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   108c0:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   108c4:	2000      	movs	r0, #0
   108c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   108ca:	2001      	movs	r0, #1
}
   108cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000108d0 <ll_rx_get>:
{
   108d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   108d4:	4605      	mov	r5, r0
   108d6:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   108d8:	4918      	ldr	r1, [pc, #96]	; (1093c <ll_rx_get+0x6c>)
   108da:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   108de:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   108e2:	4293      	cmp	r3, r2
   108e4:	460f      	mov	r7, r1
   108e6:	d01f      	beq.n	10928 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   108e8:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   108ec:	f201 1177 	addw	r1, r1, #375	; 0x177
   108f0:	f898 2000 	ldrb.w	r2, [r8]
   108f4:	f7f9 fab0 	bl	9e58 <tx_cmplt_get>
		if (!cmplt) {
   108f8:	4604      	mov	r4, r0
   108fa:	b9e0      	cbnz	r0, 10936 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   108fc:	ae02      	add	r6, sp, #8
   108fe:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   10902:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   10906:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   1090a:	4631      	mov	r1, r6
   1090c:	f10d 0006 	add.w	r0, sp, #6
   10910:	f7f9 faa2 	bl	9e58 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   10914:	b934      	cbnz	r4, 10924 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   10916:	b928      	cbnz	r0, 10924 <ll_rx_get+0x54>
			*node_rx = _node_rx;
   10918:	f8c5 8000 	str.w	r8, [r5]
}
   1091c:	4620      	mov	r0, r4
   1091e:	b002      	add	sp, #8
   10920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   10924:	4604      	mov	r4, r0
   10926:	e7ee      	b.n	10906 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   10928:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   1092c:	f201 1177 	addw	r1, r1, #375	; 0x177
   10930:	f7f9 fa92 	bl	9e58 <tx_cmplt_get>
   10934:	4604      	mov	r4, r0
		*node_rx = NULL;
   10936:	2300      	movs	r3, #0
   10938:	602b      	str	r3, [r5, #0]
   1093a:	e7ef      	b.n	1091c <ll_rx_get+0x4c>
   1093c:	200008c8 	.word	0x200008c8

00010940 <ll_rx_mem_release>:
{
   10940:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   10944:	4c1c      	ldr	r4, [pc, #112]	; (109b8 <ll_rx_mem_release+0x78>)
{
   10946:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   10948:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1094a:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   1094e:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   10952:	b930      	cbnz	r0, 10962 <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   10954:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   10956:	20ff      	movs	r0, #255	; 0xff
}
   10958:	b002      	add	sp, #8
   1095a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   1095e:	f7f9 b9a5 	b.w	9cac <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   10962:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   10964:	f8d0 8000 	ldr.w	r8, [r0]
   10968:	2a0c      	cmp	r2, #12
   1096a:	d807      	bhi.n	1097c <ll_rx_mem_release+0x3c>
   1096c:	2301      	movs	r3, #1
   1096e:	4093      	lsls	r3, r2
   10970:	f641 727e 	movw	r2, #8062	; 0x1f7e
   10974:	4213      	tst	r3, r2
   10976:	d110      	bne.n	1099a <ll_rx_mem_release+0x5a>
   10978:	061b      	lsls	r3, r3, #24
   1097a:	d413      	bmi.n	109a4 <ll_rx_mem_release+0x64>
			LL_ASSERT(0);
   1097c:	4b0f      	ldr	r3, [pc, #60]	; (109bc <ll_rx_mem_release+0x7c>)
   1097e:	9301      	str	r3, [sp, #4]
   10980:	9300      	str	r3, [sp, #0]
   10982:	4a0f      	ldr	r2, [pc, #60]	; (109c0 <ll_rx_mem_release+0x80>)
   10984:	4b0f      	ldr	r3, [pc, #60]	; (109c4 <ll_rx_mem_release+0x84>)
   10986:	4910      	ldr	r1, [pc, #64]	; (109c8 <ll_rx_mem_release+0x88>)
   10988:	4810      	ldr	r0, [pc, #64]	; (109cc <ll_rx_mem_release+0x8c>)
   1098a:	f7f0 faff 	bl	f8c <printk>
   1098e:	4040      	eors	r0, r0
   10990:	f380 8811 	msr	BASEPRI, r0
   10994:	f04f 0004 	mov.w	r0, #4
   10998:	df02      	svc	2
			mem_release(_node_rx_free,
   1099a:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   1099c:	f7f6 fb13 	bl	6fc6 <mem_release>
{
   109a0:	4640      	mov	r0, r8
   109a2:	e7d6      	b.n	10952 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   109a4:	88c2      	ldrh	r2, [r0, #6]
   109a6:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   109aa:	f44f 71aa 	mov.w	r1, #340	; 0x154
   109ae:	f7f6 fb25 	bl	6ffc <mem_get>
			mem_release(conn, &_radio.conn_free);
   109b2:	4639      	mov	r1, r7
   109b4:	e7f2      	b.n	1099c <ll_rx_mem_release+0x5c>
   109b6:	bf00      	nop
   109b8:	200009f8 	.word	0x200009f8
   109bc:	0001496d 	.word	0x0001496d
   109c0:	000156bc 	.word	0x000156bc
   109c4:	00016f7b 	.word	0x00016f7b
   109c8:	0001570b 	.word	0x0001570b
   109cc:	0001565b 	.word	0x0001565b

000109d0 <do_radio_rx_fc_set>:
	if (req == ack) {
   109d0:	4291      	cmp	r1, r2
{
   109d2:	b510      	push	{r4, lr}
   109d4:	4b14      	ldr	r3, [pc, #80]	; (10a28 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   109d6:	d119      	bne.n	10a0c <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   109d8:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   109dc:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   109e0:	4294      	cmp	r4, r2
   109e2:	d111      	bne.n	10a08 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   109e4:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   109e6:	bf14      	ite	ne
   109e8:	460a      	movne	r2, r1
   109ea:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   109ec:	3a01      	subs	r2, #1
   109ee:	b2d2      	uxtb	r2, r2
   109f0:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   109f4:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   109f8:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   109fc:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   10a00:	4291      	cmp	r1, r2
   10a02:	d00f      	beq.n	10a24 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   10a04:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   10a08:	2001      	movs	r0, #1
   10a0a:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   10a0c:	b929      	cbnz	r1, 10a1a <do_radio_rx_fc_set+0x4a>
   10a0e:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   10a12:	1a18      	subs	r0, r3, r0
   10a14:	bf18      	it	ne
   10a16:	2001      	movne	r0, #1
   10a18:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   10a1a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   10a1e:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   10a22:	e7f6      	b.n	10a12 <do_radio_rx_fc_set+0x42>
	return 0;
   10a24:	2000      	movs	r0, #0
}
   10a26:	bd10      	pop	{r4, pc}
   10a28:	200008c8 	.word	0x200008c8

00010a2c <radio_rx_fc_set>:
{
   10a2c:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   10a2e:	4b14      	ldr	r3, [pc, #80]	; (10a80 <radio_rx_fc_set+0x54>)
   10a30:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   10a34:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   10a36:	b302      	cbz	r2, 10a7a <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   10a38:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   10a3c:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   10a3e:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   10a42:	b135      	cbz	r5, 10a52 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   10a44:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10a48:	4298      	cmp	r0, r3
   10a4a:	d016      	beq.n	10a7a <radio_rx_fc_set+0x4e>
}
   10a4c:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   10a4e:	f7ff bfbf 	b.w	109d0 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   10a52:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   10a56:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   10a5a:	42a0      	cmp	r0, r4
   10a5c:	d10d      	bne.n	10a7a <radio_rx_fc_set+0x4e>
   10a5e:	4291      	cmp	r1, r2
   10a60:	d00b      	beq.n	10a7a <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10a62:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   10a66:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10a6a:	42a0      	cmp	r0, r4
   10a6c:	d005      	beq.n	10a7a <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   10a6e:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10a72:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   10a74:	bf08      	it	eq
   10a76:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   10a7a:	2000      	movs	r0, #0
   10a7c:	bc30      	pop	{r4, r5}
   10a7e:	4770      	bx	lr
   10a80:	200008c8 	.word	0x200008c8

00010a84 <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   10a84:	4801      	ldr	r0, [pc, #4]	; (10a8c <ll_tx_mem_acquire+0x8>)
   10a86:	f7f6 ba84 	b.w	6f92 <mem_acquire>
   10a8a:	bf00      	nop
   10a8c:	20000a2c 	.word	0x20000a2c

00010a90 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   10a90:	4901      	ldr	r1, [pc, #4]	; (10a98 <ll_tx_mem_release+0x8>)
   10a92:	f7f6 ba98 	b.w	6fc6 <mem_release>
   10a96:	bf00      	nop
   10a98:	20000a2c 	.word	0x20000a2c

00010a9c <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   10a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   10a9e:	4d33      	ldr	r5, [pc, #204]	; (10b6c <ll_tx_mem_enqueue+0xd0>)
   10aa0:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   10aa4:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   10aa8:	3401      	adds	r4, #1
{
   10aaa:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   10aac:	b2e4      	uxtb	r4, r4
{
   10aae:	4607      	mov	r7, r0
   10ab0:	460e      	mov	r6, r1
		last = 0;
   10ab2:	42a3      	cmp	r3, r4
   10ab4:	bf08      	it	eq
   10ab6:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   10ab8:	f7f9 fa18 	bl	9eec <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   10abc:	2800      	cmp	r0, #0
   10abe:	d052      	beq.n	10b66 <ll_tx_mem_enqueue+0xca>
   10ac0:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   10ac4:	429c      	cmp	r4, r3
   10ac6:	d04e      	beq.n	10b66 <ll_tx_mem_enqueue+0xca>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   10ac8:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   10acc:	7972      	ldrb	r2, [r6, #5]
   10ace:	3b07      	subs	r3, #7
   10ad0:	429a      	cmp	r2, r3
   10ad2:	d90e      	bls.n	10af2 <ll_tx_mem_enqueue+0x56>
   10ad4:	4b26      	ldr	r3, [pc, #152]	; (10b70 <ll_tx_mem_enqueue+0xd4>)
   10ad6:	9301      	str	r3, [sp, #4]
   10ad8:	9300      	str	r3, [sp, #0]
   10ada:	4a26      	ldr	r2, [pc, #152]	; (10b74 <ll_tx_mem_enqueue+0xd8>)
   10adc:	4b26      	ldr	r3, [pc, #152]	; (10b78 <ll_tx_mem_enqueue+0xdc>)
   10ade:	4927      	ldr	r1, [pc, #156]	; (10b7c <ll_tx_mem_enqueue+0xe0>)
   10ae0:	4827      	ldr	r0, [pc, #156]	; (10b80 <ll_tx_mem_enqueue+0xe4>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10ae2:	f7f0 fa53 	bl	f8c <printk>
   10ae6:	4040      	eors	r0, r0
   10ae8:	f380 8811 	msr	BASEPRI, r0
   10aec:	f04f 0004 	mov.w	r0, #4
   10af0:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   10af2:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   10af6:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   10afa:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   10afe:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   10b02:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   10b04:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   10b08:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10b0c:	2b00      	cmp	r3, #0
   10b0e:	db02      	blt.n	10b16 <ll_tx_mem_enqueue+0x7a>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   10b10:	2000      	movs	r0, #0
}
   10b12:	b009      	add	sp, #36	; 0x24
   10b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   10b16:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   10b18:	2b00      	cmp	r3, #0
   10b1a:	d0f9      	beq.n	10b10 <ll_tx_mem_enqueue+0x74>
   10b1c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   10b20:	f012 0302 	ands.w	r3, r2, #2
   10b24:	d1f4      	bne.n	10b10 <ll_tx_mem_enqueue+0x74>
		conn->slave.latency_cancel = 1;
   10b26:	f042 0202 	orr.w	r2, r2, #2
   10b2a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   10b2e:	f890 2020 	ldrb.w	r2, [r0, #32]
   10b32:	4914      	ldr	r1, [pc, #80]	; (10b84 <ll_tx_mem_enqueue+0xe8>)
   10b34:	9105      	str	r1, [sp, #20]
   10b36:	3207      	adds	r2, #7
   10b38:	2101      	movs	r1, #1
   10b3a:	9006      	str	r0, [sp, #24]
   10b3c:	9304      	str	r3, [sp, #16]
   10b3e:	9103      	str	r1, [sp, #12]
   10b40:	9302      	str	r3, [sp, #8]
   10b42:	9301      	str	r3, [sp, #4]
   10b44:	9300      	str	r3, [sp, #0]
   10b46:	4618      	mov	r0, r3
   10b48:	b2d2      	uxtb	r2, r2
   10b4a:	2103      	movs	r1, #3
   10b4c:	f7f7 f8fa 	bl	7d44 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10b50:	f030 0302 	bics.w	r3, r0, #2
   10b54:	d0dc      	beq.n	10b10 <ll_tx_mem_enqueue+0x74>
   10b56:	4b06      	ldr	r3, [pc, #24]	; (10b70 <ll_tx_mem_enqueue+0xd4>)
   10b58:	9301      	str	r3, [sp, #4]
   10b5a:	9300      	str	r3, [sp, #0]
   10b5c:	4a05      	ldr	r2, [pc, #20]	; (10b74 <ll_tx_mem_enqueue+0xd8>)
   10b5e:	4b06      	ldr	r3, [pc, #24]	; (10b78 <ll_tx_mem_enqueue+0xdc>)
   10b60:	4906      	ldr	r1, [pc, #24]	; (10b7c <ll_tx_mem_enqueue+0xe0>)
   10b62:	4809      	ldr	r0, [pc, #36]	; (10b88 <ll_tx_mem_enqueue+0xec>)
   10b64:	e7bd      	b.n	10ae2 <ll_tx_mem_enqueue+0x46>
		return 1;
   10b66:	2001      	movs	r0, #1
   10b68:	e7d3      	b.n	10b12 <ll_tx_mem_enqueue+0x76>
   10b6a:	bf00      	nop
   10b6c:	200008c8 	.word	0x200008c8
   10b70:	0001496d 	.word	0x0001496d
   10b74:	000156bc 	.word	0x000156bc
   10b78:	00016fa9 	.word	0x00016fa9
   10b7c:	0001570b 	.word	0x0001570b
   10b80:	0001758f 	.word	0x0001758f
   10b84:	0000ac45 	.word	0x0000ac45
   10b88:	00016fe1 	.word	0x00016fe1

00010b8c <ll_enc_req_send>:
{
   10b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10b90:	4607      	mov	r7, r0
   10b92:	4688      	mov	r8, r1
   10b94:	4616      	mov	r6, r2
   10b96:	4699      	mov	r9, r3
	conn = connection_get(handle);
   10b98:	f7f9 f9a8 	bl	9eec <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10b9c:	4605      	mov	r5, r0
   10b9e:	b910      	cbnz	r0, 10ba6 <ll_enc_req_send+0x1a>
			return 1;
   10ba0:	2001      	movs	r0, #1
   10ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10ba6:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10baa:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10bae:	429a      	cmp	r2, r3
   10bb0:	d1f6      	bne.n	10ba0 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   10bb2:	f7ff ff67 	bl	10a84 <ll_tx_mem_acquire>
	if (node_tx) {
   10bb6:	4604      	mov	r4, r0
   10bb8:	2800      	cmp	r0, #0
   10bba:	d0f1      	beq.n	10ba0 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   10bbc:	2210      	movs	r2, #16
   10bbe:	4649      	mov	r1, r9
   10bc0:	f105 0084 	add.w	r0, r5, #132	; 0x84
   10bc4:	f7f1 f81a 	bl	1bfc <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   10bc8:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   10bcc:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   10bd0:	d124      	bne.n	10c1c <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   10bd2:	7923      	ldrb	r3, [r4, #4]
   10bd4:	f043 0303 	orr.w	r3, r3, #3
   10bd8:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   10bda:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   10bdc:	2208      	movs	r2, #8
			pdu_data_tx->len =
   10bde:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   10be0:	2303      	movs	r3, #3
   10be2:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   10be4:	4641      	mov	r1, r8
   10be6:	18a0      	adds	r0, r4, r2
   10be8:	f7f1 f808 	bl	1bfc <memcpy>
			enc_req->ediv[0] = ediv[0];
   10bec:	7833      	ldrb	r3, [r6, #0]
   10bee:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   10bf0:	7873      	ldrb	r3, [r6, #1]
   10bf2:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   10bf4:	2108      	movs	r1, #8
   10bf6:	f104 0012 	add.w	r0, r4, #18
   10bfa:	f7f7 fa01 	bl	8000 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   10bfe:	2104      	movs	r1, #4
   10c00:	f104 001a 	add.w	r0, r4, #26
   10c04:	f7f7 f9fc 	bl	8000 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   10c08:	4621      	mov	r1, r4
   10c0a:	4638      	mov	r0, r7
   10c0c:	f7ff ff46 	bl	10a9c <ll_tx_mem_enqueue>
   10c10:	2601      	movs	r6, #1
   10c12:	b1d0      	cbz	r0, 10c4a <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   10c14:	4620      	mov	r0, r4
   10c16:	f7ff ff3b 	bl	10a90 <ll_tx_mem_release>
   10c1a:	e7c1      	b.n	10ba0 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   10c1c:	2b30      	cmp	r3, #48	; 0x30
   10c1e:	d1f9      	bne.n	10c14 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   10c20:	2208      	movs	r2, #8
   10c22:	4641      	mov	r1, r8
   10c24:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   10c28:	f7f0 ffe8 	bl	1bfc <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   10c2c:	7833      	ldrb	r3, [r6, #0]
   10c2e:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   10c32:	7873      	ldrb	r3, [r6, #1]
   10c34:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   10c38:	7923      	ldrb	r3, [r4, #4]
   10c3a:	f043 0303 	orr.w	r3, r3, #3
   10c3e:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   10c40:	2301      	movs	r3, #1
   10c42:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   10c44:	230a      	movs	r3, #10
   10c46:	71e3      	strb	r3, [r4, #7]
   10c48:	e7de      	b.n	10c08 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   10c4a:	2303      	movs	r3, #3
   10c4c:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   10c50:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   10c54:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   10c58:	3301      	adds	r3, #1
   10c5a:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   10c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10c62:	0000      	movs	r0, r0
   10c64:	0000      	movs	r0, r0
	...

00010c68 <radio_scan_enable>:
{
   10c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   10c6c:	4c68      	ldr	r4, [pc, #416]	; (10e10 <radio_scan_enable+0x1a8>)
   10c6e:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   10c72:	b08e      	sub	sp, #56	; 0x38
   10c74:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   10c76:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10c7a:	f04f 0302 	mov.w	r3, #2
{
   10c7e:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10c80:	930b      	str	r3, [sp, #44]	; 0x2c
{
   10c82:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   10c84:	d003      	beq.n	10c8e <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10c86:	200c      	movs	r0, #12
}
   10c88:	b00e      	add	sp, #56	; 0x38
   10c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   10c8e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   10c92:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   10c96:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   10c9a:	0840      	lsrs	r0, r0, #1
   10c9c:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   10ca0:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10ca4:	f360 0200 	bfi	r2, r0, #0, #1
   10ca8:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   10cac:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   10cb0:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   10cb4:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   10cb8:	2206      	movs	r2, #6
   10cba:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   10cbe:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10cc2:	4e54      	ldr	r6, [pc, #336]	; (10e14 <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   10cc4:	f7f0 ff9a 	bl	1bfc <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10cc8:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   10ccc:	f04f 0991 	mov.w	r9, #145	; 0x91
   10cd0:	fba2 0106 	umull	r0, r1, r2, r6
   10cd4:	fb09 1102 	mla	r1, r9, r2, r1
   10cd8:	a34b      	add	r3, pc, #300	; (adr r3, 10e08 <radio_scan_enable+0x1a0>)
   10cda:	e9d3 2300 	ldrd	r2, r3, [r3]
   10cde:	f7ef fa99 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   10ce2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   10ce6:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   10cea:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10cee:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   10cf2:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10cf6:	b2ba      	uxth	r2, r7
   10cf8:	fba2 6706 	umull	r6, r7, r2, r6
   10cfc:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   10d00:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   10d04:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   10d06:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   10d0a:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   10d0e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   10d12:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10d16:	a33c      	add	r3, pc, #240	; (adr r3, 10e08 <radio_scan_enable+0x1a0>)
   10d18:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d1c:	4630      	mov	r0, r6
   10d1e:	4639      	mov	r1, r7
   10d20:	f7ef fa78 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   10d24:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   10d28:	459a      	cmp	sl, r3
   10d2a:	bf94      	ite	ls
   10d2c:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   10d30:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   10d34:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10d38:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   10d3a:	bf38      	it	cc
   10d3c:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   10d40:	f7f7 f91e 	bl	7f80 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   10d44:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   10d48:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   10d4a:	2b00      	cmp	r3, #0
   10d4c:	d045      	beq.n	10dda <radio_scan_enable+0x172>
		us_offset = 0;
   10d4e:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   10d50:	980c      	ldr	r0, [sp, #48]	; 0x30
   10d52:	4931      	ldr	r1, [pc, #196]	; (10e18 <radio_scan_enable+0x1b0>)
   10d54:	a32c      	add	r3, pc, #176	; (adr r3, 10e08 <radio_scan_enable+0x1a0>)
   10d56:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d5a:	fba0 0101 	umull	r0, r1, r0, r1
   10d5e:	f7ef fa59 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10d62:	ab0b      	add	r3, sp, #44	; 0x2c
   10d64:	9308      	str	r3, [sp, #32]
   10d66:	4b2d      	ldr	r3, [pc, #180]	; (10e1c <radio_scan_enable+0x1b4>)
   10d68:	9307      	str	r3, [sp, #28]
   10d6a:	4b2d      	ldr	r3, [pc, #180]	; (10e20 <radio_scan_enable+0x1b8>)
   10d6c:	9305      	str	r3, [sp, #20]
   10d6e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   10d72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10d76:	4443      	add	r3, r8
   10d78:	2500      	movs	r5, #0
   10d7a:	4482      	add	sl, r0
   10d7c:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   10d7e:	4630      	mov	r0, r6
   10d80:	a321      	add	r3, pc, #132	; (adr r3, 10e08 <radio_scan_enable+0x1a0>)
   10d82:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d86:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10d88:	9506      	str	r5, [sp, #24]
   10d8a:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   10d8c:	f7ef fa42 	bl	214 <__aeabi_uldivmod>
   10d90:	4610      	mov	r0, r2
   10d92:	4619      	mov	r1, r3
   10d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10d98:	2300      	movs	r3, #0
   10d9a:	f7ef fa3b 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10d9e:	e88d 0220 	stmia.w	sp, {r5, r9}
   10da2:	9002      	str	r0, [sp, #8]
   10da4:	4653      	mov	r3, sl
   10da6:	2206      	movs	r2, #6
   10da8:	2103      	movs	r1, #3
   10daa:	4628      	mov	r0, r5
   10dac:	f7f6 ff7a 	bl	7ca4 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   10db0:	2802      	cmp	r0, #2
   10db2:	d023      	beq.n	10dfc <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   10db4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10db6:	2d00      	cmp	r5, #0
   10db8:	f47f af65 	bne.w	10c86 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   10dbc:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   10dc0:	f043 0301 	orr.w	r3, r3, #1
   10dc4:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   10dc8:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   10dcc:	2b00      	cmp	r3, #0
   10dce:	db02      	blt.n	10dd6 <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   10dd0:	2002      	movs	r0, #2
   10dd2:	f000 fea3 	bl	11b1c <ll_adv_scan_state_cb>
	return 0;
   10dd6:	4628      	mov	r0, r5
   10dd8:	e756      	b.n	10c88 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   10dda:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   10dde:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   10de0:	aa0d      	add	r2, sp, #52	; 0x34
   10de2:	ab0c      	add	r3, sp, #48	; 0x30
   10de4:	4441      	add	r1, r8
   10de6:	2003      	movs	r0, #3
   10de8:	f7f9 fc86 	bl	a6f8 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   10dec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10dee:	2b00      	cmp	r3, #0
   10df0:	d0ae      	beq.n	10d50 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   10df2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   10df6:	e7ab      	b.n	10d50 <radio_scan_enable+0xe8>
			cpu_sleep();
   10df8:	f7f8 fe7e 	bl	9af8 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   10dfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10dfe:	2b02      	cmp	r3, #2
   10e00:	d0fa      	beq.n	10df8 <radio_scan_enable+0x190>
   10e02:	e7d7      	b.n	10db4 <radio_scan_enable+0x14c>
   10e04:	f3af 8000 	nop.w
   10e08:	1afd498d 	.word	0x1afd498d
   10e0c:	00000007 	.word	0x00000007
   10e10:	200008c8 	.word	0x200008c8
   10e14:	84e72a00 	.word	0x84e72a00
   10e18:	3b9aca00 	.word	0x3b9aca00
   10e1c:	00009b3d 	.word	0x00009b3d
   10e20:	0000ba65 	.word	0x0000ba65

00010e24 <radio_scan_disable>:
{
   10e24:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   10e26:	2104      	movs	r1, #4
   10e28:	2006      	movs	r0, #6
   10e2a:	f7f9 f875 	bl	9f18 <role_disable>
	if (!status) {
   10e2e:	4605      	mov	r5, r0
   10e30:	b9e8      	cbnz	r0, 10e6e <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   10e32:	4c10      	ldr	r4, [pc, #64]	; (10e74 <radio_scan_disable+0x50>)
   10e34:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   10e38:	f360 0200 	bfi	r2, r0, #0, #1
   10e3c:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   10e40:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   10e44:	2a00      	cmp	r2, #0
   10e46:	db01      	blt.n	10e4c <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   10e48:	f000 fe68 	bl	11b1c <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   10e4c:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   10e50:	b15e      	cbz	r6, 10e6a <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   10e52:	2300      	movs	r3, #0
   10e54:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   10e58:	4907      	ldr	r1, [pc, #28]	; (10e78 <radio_scan_disable+0x54>)
   10e5a:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   10e5e:	f7f6 f8b2 	bl	6fc6 <mem_release>
			mem_release(conn, &_radio.conn_free);
   10e62:	4906      	ldr	r1, [pc, #24]	; (10e7c <radio_scan_disable+0x58>)
   10e64:	4630      	mov	r0, r6
   10e66:	f7f6 f8ae 	bl	6fc6 <mem_release>
}
   10e6a:	4628      	mov	r0, r5
   10e6c:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   10e6e:	250c      	movs	r5, #12
   10e70:	e7fb      	b.n	10e6a <radio_scan_disable+0x46>
   10e72:	bf00      	nop
   10e74:	200008c8 	.word	0x200008c8
   10e78:	20000a10 	.word	0x20000a10
   10e7c:	200009d4 	.word	0x200009d4

00010e80 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   10e80:	4b03      	ldr	r3, [pc, #12]	; (10e90 <ll_connect_disable+0x10>)
   10e82:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10e86:	b10b      	cbz	r3, 10e8c <ll_connect_disable+0xc>
	status = radio_scan_disable();
   10e88:	f7ff bfcc 	b.w	10e24 <radio_scan_disable>
}
   10e8c:	200c      	movs	r0, #12
   10e8e:	4770      	bx	lr
   10e90:	200008c8 	.word	0x200008c8

00010e94 <ll_rx_dequeue>:
{
   10e94:	b530      	push	{r4, r5, lr}
   10e96:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10e98:	4d47      	ldr	r5, [pc, #284]	; (10fb8 <ll_rx_dequeue+0x124>)
	struct radio_pdu_node_rx *node_rx = NULL;
   10e9a:	aa04      	add	r2, sp, #16
   10e9c:	2300      	movs	r3, #0
   10e9e:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10ea2:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   10ea6:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   10eaa:	f7f6 f8db 	bl	7064 <memq_dequeue>
   10eae:	462c      	mov	r4, r5
	LL_ASSERT(link);
   10eb0:	b970      	cbnz	r0, 10ed0 <ll_rx_dequeue+0x3c>
   10eb2:	4b42      	ldr	r3, [pc, #264]	; (10fbc <ll_rx_dequeue+0x128>)
   10eb4:	9301      	str	r3, [sp, #4]
   10eb6:	9300      	str	r3, [sp, #0]
   10eb8:	4a41      	ldr	r2, [pc, #260]	; (10fc0 <ll_rx_dequeue+0x12c>)
   10eba:	4b42      	ldr	r3, [pc, #264]	; (10fc4 <ll_rx_dequeue+0x130>)
   10ebc:	4942      	ldr	r1, [pc, #264]	; (10fc8 <ll_rx_dequeue+0x134>)
   10ebe:	4843      	ldr	r0, [pc, #268]	; (10fcc <ll_rx_dequeue+0x138>)
		LL_ASSERT(_radio.link_rx_data_quota <
   10ec0:	f7f0 f864 	bl	f8c <printk>
   10ec4:	4040      	eors	r0, r0
   10ec6:	f380 8811 	msr	BASEPRI, r0
   10eca:	f04f 0004 	mov.w	r0, #4
   10ece:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   10ed0:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   10ed4:	f7f6 f877 	bl	6fc6 <mem_release>
	switch (node_rx->hdr.type) {
   10ed8:	9a03      	ldr	r2, [sp, #12]
   10eda:	7911      	ldrb	r1, [r2, #4]
   10edc:	290c      	cmp	r1, #12
   10ede:	d807      	bhi.n	10ef0 <ll_rx_dequeue+0x5c>
   10ee0:	2301      	movs	r3, #1
   10ee2:	408b      	lsls	r3, r1
   10ee4:	f641 707e 	movw	r0, #8062	; 0x1f7e
   10ee8:	4203      	tst	r3, r0
   10eea:	d109      	bne.n	10f00 <ll_rx_dequeue+0x6c>
   10eec:	0618      	lsls	r0, r3, #24
   10eee:	d419      	bmi.n	10f24 <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
   10ef0:	4b32      	ldr	r3, [pc, #200]	; (10fbc <ll_rx_dequeue+0x128>)
   10ef2:	9301      	str	r3, [sp, #4]
   10ef4:	9300      	str	r3, [sp, #0]
   10ef6:	4a32      	ldr	r2, [pc, #200]	; (10fc0 <ll_rx_dequeue+0x12c>)
   10ef8:	4b32      	ldr	r3, [pc, #200]	; (10fc4 <ll_rx_dequeue+0x130>)
   10efa:	4933      	ldr	r1, [pc, #204]	; (10fc8 <ll_rx_dequeue+0x134>)
   10efc:	4834      	ldr	r0, [pc, #208]	; (10fd0 <ll_rx_dequeue+0x13c>)
   10efe:	e7df      	b.n	10ec0 <ll_rx_dequeue+0x2c>
		LL_ASSERT(_radio.link_rx_data_quota <
   10f00:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   10f04:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   10f08:	3801      	subs	r0, #1
   10f0a:	4283      	cmp	r3, r0
   10f0c:	db07      	blt.n	10f1e <ll_rx_dequeue+0x8a>
   10f0e:	4b2b      	ldr	r3, [pc, #172]	; (10fbc <ll_rx_dequeue+0x128>)
   10f10:	9301      	str	r3, [sp, #4]
   10f12:	9300      	str	r3, [sp, #0]
   10f14:	4a2a      	ldr	r2, [pc, #168]	; (10fc0 <ll_rx_dequeue+0x12c>)
   10f16:	4b2b      	ldr	r3, [pc, #172]	; (10fc4 <ll_rx_dequeue+0x130>)
   10f18:	492b      	ldr	r1, [pc, #172]	; (10fc8 <ll_rx_dequeue+0x134>)
   10f1a:	482e      	ldr	r0, [pc, #184]	; (10fd4 <ll_rx_dequeue+0x140>)
   10f1c:	e7d0      	b.n	10ec0 <ll_rx_dequeue+0x2c>
		_radio.link_rx_data_quota++;
   10f1e:	3301      	adds	r3, #1
   10f20:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   10f24:	2906      	cmp	r1, #6
   10f26:	d136      	bne.n	10f96 <ll_rx_dequeue+0x102>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   10f28:	7ad3      	ldrb	r3, [r2, #11]
   10f2a:	2b3c      	cmp	r3, #60	; 0x3c
   10f2c:	d00d      	beq.n	10f4a <ll_rx_dequeue+0xb6>
   10f2e:	7b12      	ldrb	r2, [r2, #12]
   10f30:	b9e2      	cbnz	r2, 10f6c <ll_rx_dequeue+0xd8>
			LL_ASSERT(_radio.scanner.is_enabled);
   10f32:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   10f36:	07d9      	lsls	r1, r3, #31
   10f38:	d42f      	bmi.n	10f9a <ll_rx_dequeue+0x106>
   10f3a:	4b20      	ldr	r3, [pc, #128]	; (10fbc <ll_rx_dequeue+0x128>)
   10f3c:	9301      	str	r3, [sp, #4]
   10f3e:	9300      	str	r3, [sp, #0]
   10f40:	4a1f      	ldr	r2, [pc, #124]	; (10fc0 <ll_rx_dequeue+0x12c>)
   10f42:	4b20      	ldr	r3, [pc, #128]	; (10fc4 <ll_rx_dequeue+0x130>)
   10f44:	4920      	ldr	r1, [pc, #128]	; (10fc8 <ll_rx_dequeue+0x134>)
   10f46:	4824      	ldr	r0, [pc, #144]	; (10fd8 <ll_rx_dequeue+0x144>)
   10f48:	e7ba      	b.n	10ec0 <ll_rx_dequeue+0x2c>
				_radio.advertiser.conn = NULL;
   10f4a:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   10f4c:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   10f50:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   10f54:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   10f58:	2b00      	cmp	r3, #0
   10f5a:	db09      	blt.n	10f70 <ll_rx_dequeue+0xdc>
   10f5c:	4b17      	ldr	r3, [pc, #92]	; (10fbc <ll_rx_dequeue+0x128>)
   10f5e:	9301      	str	r3, [sp, #4]
   10f60:	9300      	str	r3, [sp, #0]
   10f62:	4a17      	ldr	r2, [pc, #92]	; (10fc0 <ll_rx_dequeue+0x12c>)
   10f64:	4b17      	ldr	r3, [pc, #92]	; (10fc4 <ll_rx_dequeue+0x130>)
   10f66:	4918      	ldr	r1, [pc, #96]	; (10fc8 <ll_rx_dequeue+0x134>)
   10f68:	481c      	ldr	r0, [pc, #112]	; (10fdc <ll_rx_dequeue+0x148>)
   10f6a:	e7a9      	b.n	10ec0 <ll_rx_dequeue+0x2c>
		struct connection *conn = NULL;
   10f6c:	2500      	movs	r5, #0
   10f6e:	e7f1      	b.n	10f54 <ll_rx_dequeue+0xc0>
			_radio.advertiser.is_enabled = 0;
   10f70:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10f74:	f36f 13c7 	bfc	r3, #7, #1
   10f78:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   10f7c:	b995      	cbnz	r5, 10fa4 <ll_rx_dequeue+0x110>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   10f7e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   10f82:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   10f86:	f000 0001 	and.w	r0, r0, #1
   10f8a:	0040      	lsls	r0, r0, #1
		if (!bm) {
   10f8c:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   10f90:	d101      	bne.n	10f96 <ll_rx_dequeue+0x102>
			ll_adv_scan_state_cb(0);
   10f92:	f000 fdc3 	bl	11b1c <ll_adv_scan_state_cb>
}
   10f96:	b005      	add	sp, #20
   10f98:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   10f9a:	f362 0300 	bfi	r3, r2, #0, #1
   10f9e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   10fa2:	e7ec      	b.n	10f7e <ll_rx_dequeue+0xea>
			mem_release(node_rx->hdr.onion.link,
   10fa4:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   10fa8:	490d      	ldr	r1, [pc, #52]	; (10fe0 <ll_rx_dequeue+0x14c>)
   10faa:	f7f6 f80c 	bl	6fc6 <mem_release>
			mem_release(conn, &_radio.conn_free);
   10fae:	490d      	ldr	r1, [pc, #52]	; (10fe4 <ll_rx_dequeue+0x150>)
   10fb0:	4628      	mov	r0, r5
   10fb2:	f7f6 f808 	bl	6fc6 <mem_release>
   10fb6:	e7e2      	b.n	10f7e <ll_rx_dequeue+0xea>
   10fb8:	200008c8 	.word	0x200008c8
   10fbc:	0001496d 	.word	0x0001496d
   10fc0:	000156bc 	.word	0x000156bc
   10fc4:	00016f6d 	.word	0x00016f6d
   10fc8:	0001570b 	.word	0x0001570b
   10fcc:	00016fbb 	.word	0x00016fbb
   10fd0:	0001565b 	.word	0x0001565b
   10fd4:	00017066 	.word	0x00017066
   10fd8:	00017554 	.word	0x00017554
   10fdc:	00017516 	.word	0x00017516
   10fe0:	20000a10 	.word	0x20000a10
   10fe4:	200009d4 	.word	0x200009d4

00010fe8 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   10fe8:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   10fea:	4c0b      	ldr	r4, [pc, #44]	; (11018 <rtc0_nrf5_isr+0x30>)
   10fec:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   10ff0:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   10ff4:	b122      	cbz	r2, 11000 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   10ff6:	2000      	movs	r0, #0
   10ff8:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   10ffc:	f7f6 fe40 	bl	7c80 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   11000:	b12d      	cbz	r5, 1100e <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   11002:	2300      	movs	r3, #0
   11004:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   11008:	2001      	movs	r0, #1
   1100a:	f7f6 fe39 	bl	7c80 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   1100e:	2000      	movs	r0, #0
}
   11010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   11014:	f7f6 b8d6 	b.w	71c4 <mayfly_run>
   11018:	4000b000 	.word	0x4000b000

0001101c <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   1101c:	2001      	movs	r0, #1
   1101e:	f7f6 b8d1 	b.w	71c4 <mayfly_run>

00011022 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11022:	4668      	mov	r0, sp
   11024:	f020 0107 	bic.w	r1, r0, #7
   11028:	468d      	mov	sp, r1
   1102a:	b501      	push	{r0, lr}
	isr_radio();
   1102c:	f001 f8b8 	bl	121a0 <isr_radio>
	ISR_DIRECT_PM();
   11030:	f7f0 fc5e 	bl	18f0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   11034:	f7f0 fa48 	bl	14c8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11038:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1103c:	4685      	mov	sp, r0
   1103e:	4770      	bx	lr

00011040 <radio_active_callback>:
{
   11040:	4770      	bx	lr
	...

00011044 <radio_event_callback>:
	k_sem_give(sem_recv);
   11044:	4b01      	ldr	r3, [pc, #4]	; (1104c <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   11046:	6818      	ldr	r0, [r3, #0]
   11048:	f002 bed9 	b.w	13dfe <_impl_k_sem_give>
   1104c:	200011f8 	.word	0x200011f8

00011050 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   11050:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   11052:	4b41      	ldr	r3, [pc, #260]	; (11158 <ll_init+0x108>)
{
   11054:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   11056:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   11058:	4840      	ldr	r0, [pc, #256]	; (1115c <ll_init+0x10c>)
   1105a:	f002 f9e9 	bl	13430 <device_get_binding>
	if (!clk_k32) {
   1105e:	b918      	cbnz	r0, 11068 <ll_init+0x18>
		return -ENODEV;
   11060:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   11064:	b006      	add	sp, #24
   11066:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   11068:	6843      	ldr	r3, [r0, #4]
   1106a:	2101      	movs	r1, #1
   1106c:	681b      	ldr	r3, [r3, #0]
   1106e:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   11070:	483b      	ldr	r0, [pc, #236]	; (11160 <ll_init+0x110>)
   11072:	f002 f9dd 	bl	13430 <device_get_binding>
	if (!entropy) {
   11076:	4604      	mov	r4, r0
   11078:	2800      	cmp	r0, #0
   1107a:	d0f1      	beq.n	11060 <ll_init+0x10>
	cntr_init();
   1107c:	f000 ff74 	bl	11f68 <cntr_init>
	mayfly_init();
   11080:	f7f6 f800 	bl	7084 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11084:	4b37      	ldr	r3, [pc, #220]	; (11164 <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   11086:	2203      	movs	r2, #3
   11088:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1108a:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   1108c:	4a36      	ldr	r2, [pc, #216]	; (11168 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1108e:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   11090:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   11092:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   11094:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   11096:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   11098:	9205      	str	r2, [sp, #20]
   1109a:	4a34      	ldr	r2, [pc, #208]	; (1116c <ll_init+0x11c>)
   1109c:	9204      	str	r2, [sp, #16]
   1109e:	4a34      	ldr	r2, [pc, #208]	; (11170 <ll_init+0x120>)
   110a0:	9203      	str	r2, [sp, #12]
   110a2:	4a34      	ldr	r2, [pc, #208]	; (11174 <ll_init+0x124>)
   110a4:	9202      	str	r2, [sp, #8]
   110a6:	220d      	movs	r2, #13
   110a8:	9201      	str	r2, [sp, #4]
   110aa:	9300      	str	r3, [sp, #0]
   110ac:	4a32      	ldr	r2, [pc, #200]	; (11178 <ll_init+0x128>)
   110ae:	2304      	movs	r3, #4
   110b0:	f7f6 fdae 	bl	7c10 <ticker_init>
	LL_ASSERT(!err);
   110b4:	b170      	cbz	r0, 110d4 <ll_init+0x84>
   110b6:	4b31      	ldr	r3, [pc, #196]	; (1117c <ll_init+0x12c>)
   110b8:	9301      	str	r3, [sp, #4]
   110ba:	9300      	str	r3, [sp, #0]
   110bc:	4a30      	ldr	r2, [pc, #192]	; (11180 <ll_init+0x130>)
   110be:	4b31      	ldr	r3, [pc, #196]	; (11184 <ll_init+0x134>)
   110c0:	4931      	ldr	r1, [pc, #196]	; (11188 <ll_init+0x138>)
   110c2:	4832      	ldr	r0, [pc, #200]	; (1118c <ll_init+0x13c>)
   110c4:	f7ef ff62 	bl	f8c <printk>
   110c8:	4040      	eors	r0, r0
   110ca:	f380 8811 	msr	BASEPRI, r0
   110ce:	f04f 0004 	mov.w	r0, #4
   110d2:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   110d4:	482e      	ldr	r0, [pc, #184]	; (11190 <ll_init+0x140>)
   110d6:	f002 f9ab 	bl	13430 <device_get_binding>
	if (!clk_m16) {
   110da:	2800      	cmp	r0, #0
   110dc:	d0c0      	beq.n	11060 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   110de:	4b2d      	ldr	r3, [pc, #180]	; (11194 <ll_init+0x144>)
   110e0:	9304      	str	r3, [sp, #16]
   110e2:	9501      	str	r5, [sp, #4]
   110e4:	231b      	movs	r3, #27
   110e6:	2501      	movs	r5, #1
   110e8:	f44f 7657 	mov.w	r6, #860	; 0x35c
   110ec:	9303      	str	r3, [sp, #12]
   110ee:	9302      	str	r3, [sp, #8]
   110f0:	4622      	mov	r2, r4
   110f2:	9605      	str	r6, [sp, #20]
   110f4:	9500      	str	r5, [sp, #0]
   110f6:	462b      	mov	r3, r5
   110f8:	2107      	movs	r1, #7
   110fa:	f7fe ff49 	bl	ff90 <radio_init>
	if (err) {
   110fe:	4604      	mov	r4, r0
   11100:	b160      	cbz	r0, 1111c <ll_init+0xcc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   11102:	4b1e      	ldr	r3, [pc, #120]	; (1117c <ll_init+0x12c>)
   11104:	9303      	str	r3, [sp, #12]
   11106:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
   1110a:	4a1d      	ldr	r2, [pc, #116]	; (11180 <ll_init+0x130>)
   1110c:	4b1d      	ldr	r3, [pc, #116]	; (11184 <ll_init+0x134>)
   1110e:	491e      	ldr	r1, [pc, #120]	; (11188 <ll_init+0x138>)
   11110:	4821      	ldr	r0, [pc, #132]	; (11198 <ll_init+0x148>)
   11112:	f7ef ff3b 	bl	f8c <printk>
		return -ENOMEM;
   11116:	f06f 000b 	mvn.w	r0, #11
   1111a:	e7a3      	b.n	11064 <ll_init+0x14>
	ll_filter_reset(true);
   1111c:	4628      	mov	r0, r5
   1111e:	f000 fedb 	bl	11ed8 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   11122:	4622      	mov	r2, r4
   11124:	4621      	mov	r1, r4
   11126:	4628      	mov	r0, r5
   11128:	f7f0 fbc8 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1112c:	4622      	mov	r2, r4
   1112e:	4621      	mov	r1, r4
   11130:	200b      	movs	r0, #11
   11132:	f7f0 fbc3 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   11136:	4622      	mov	r2, r4
   11138:	4621      	mov	r1, r4
   1113a:	2018      	movs	r0, #24
   1113c:	f7f0 fbbe 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   11140:	4628      	mov	r0, r5
   11142:	f7f0 fb89 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   11146:	200b      	movs	r0, #11
   11148:	f7f0 fb86 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   1114c:	2018      	movs	r0, #24
   1114e:	f7f0 fb83 	bl	1858 <_arch_irq_enable>
	return 0;
   11152:	4620      	mov	r0, r4
   11154:	e786      	b.n	11064 <ll_init+0x14>
   11156:	bf00      	nop
   11158:	200011f8 	.word	0x200011f8
   1115c:	00014a40 	.word	0x00014a40
   11160:	00014a14 	.word	0x00014a14
   11164:	200011d8 	.word	0x200011d8
   11168:	00012b3d 	.word	0x00012b3d
   1116c:	00012a99 	.word	0x00012a99
   11170:	00012a3d 	.word	0x00012a3d
   11174:	20000f68 	.word	0x20000f68
   11178:	20000e28 	.word	0x20000e28
   1117c:	0001496d 	.word	0x0001496d
   11180:	000156bc 	.word	0x000156bc
   11184:	00017c8b 	.word	0x00017c8b
   11188:	0001570b 	.word	0x0001570b
   1118c:	00017c93 	.word	0x00017c93
   11190:	00014a4b 	.word	0x00014a4b
   11194:	20000acc 	.word	0x20000acc
   11198:	00017cb9 	.word	0x00017cb9

0001119c <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   1119c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   111a0:	4681      	mov	r9, r0
   111a2:	4688      	mov	r8, r1
   111a4:	4617      	mov	r7, r2
   111a6:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   111a8:	f7fe ffd6 	bl	10158 <ll_scan_is_enabled>
   111ac:	b988      	cbnz	r0, 111d2 <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   111ae:	4d0a      	ldr	r5, [pc, #40]	; (111d8 <ll_scan_params_set+0x3c>)
   111b0:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   111b2:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   111b6:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   111ba:	4622      	mov	r2, r4
   111bc:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   111c0:	4613      	mov	r3, r2
   111c2:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   111c6:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   111c8:	f362 1387 	bfi	r3, r2, #6, #2
   111cc:	712b      	strb	r3, [r5, #4]

	return 0;
   111ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   111d2:	200c      	movs	r0, #12
}
   111d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   111d8:	200011fc 	.word	0x200011fc

000111dc <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   111dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   111de:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   111e0:	b920      	cbnz	r0, 111ec <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   111e2:	b005      	add	sp, #20
   111e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   111e8:	f7ff be1c 	b.w	10e24 <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   111ec:	f7fe ffb4 	bl	10158 <ll_scan_is_enabled>
   111f0:	4606      	mov	r6, r0
   111f2:	bb40      	cbnz	r0, 11246 <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   111f4:	4c15      	ldr	r4, [pc, #84]	; (1124c <ll_scan_enable+0x70>)
   111f6:	7920      	ldrb	r0, [r4, #4]
   111f8:	0980      	lsrs	r0, r0, #6
   111fa:	f000 fa63 	bl	116c4 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   111fe:	7923      	ldrb	r3, [r4, #4]
   11200:	f013 0501 	ands.w	r5, r3, #1
   11204:	d006      	beq.n	11214 <ll_scan_enable+0x38>
   11206:	f013 0520 	ands.w	r5, r3, #32
   1120a:	d003      	beq.n	11214 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   1120c:	4630      	mov	r0, r6
   1120e:	f000 fbdd 	bl	119cc <ll_rl_rpa_update>
		rpa_gen = 1;
   11212:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   11214:	7926      	ldrb	r6, [r4, #4]
   11216:	f006 070f 	and.w	r7, r6, #15
   1121a:	f3c6 1600 	ubfx	r6, r6, #4, #1
   1121e:	2100      	movs	r1, #0
   11220:	4630      	mov	r0, r6
   11222:	f7f6 feb3 	bl	7f8c <ll_addr_get>
   11226:	22ff      	movs	r2, #255	; 0xff
   11228:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   1122a:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1122c:	8823      	ldrh	r3, [r4, #0]
   1122e:	9502      	str	r5, [sp, #8]
   11230:	0992      	lsrs	r2, r2, #6
   11232:	9201      	str	r2, [sp, #4]
   11234:	8862      	ldrh	r2, [r4, #2]
   11236:	9200      	str	r2, [sp, #0]
   11238:	4631      	mov	r1, r6
   1123a:	4602      	mov	r2, r0
   1123c:	4638      	mov	r0, r7
   1123e:	f7ff fd13 	bl	10c68 <radio_scan_enable>
}
   11242:	b005      	add	sp, #20
   11244:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   11246:	2000      	movs	r0, #0
   11248:	e7fb      	b.n	11242 <ll_scan_enable+0x66>
   1124a:	bf00      	nop
   1124c:	200011fc 	.word	0x200011fc

00011250 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   11250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11254:	b085      	sub	sp, #20
   11256:	461e      	mov	r6, r3
   11258:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1125c:	9303      	str	r3, [sp, #12]
   1125e:	4680      	mov	r8, r0
   11260:	4689      	mov	r9, r1
   11262:	4615      	mov	r5, r2
   11264:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   11266:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   1126a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   1126e:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   11272:	f7fe ff71 	bl	10158 <ll_scan_is_enabled>
   11276:	9b03      	ldr	r3, [sp, #12]
   11278:	bba0      	cbnz	r0, 112e4 <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1127a:	9300      	str	r3, [sp, #0]
   1127c:	4652      	mov	r2, sl
   1127e:	465b      	mov	r3, fp
   11280:	4639      	mov	r1, r7
   11282:	4630      	mov	r0, r6
   11284:	f7fe ff8c 	bl	101a0 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   11288:	bb68      	cbnz	r0, 112e6 <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   1128a:	4628      	mov	r0, r5
   1128c:	f000 fa1a 	bl	116c4 <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   11290:	b1dd      	cbz	r5, 112ca <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   11292:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   11294:	1ea3      	subs	r3, r4, #2
   11296:	2b01      	cmp	r3, #1
   11298:	d822      	bhi.n	112e0 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   1129a:	2000      	movs	r0, #0
   1129c:	f000 fb96 	bl	119cc <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   112a0:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   112a4:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   112a6:	2100      	movs	r1, #0
   112a8:	4620      	mov	r0, r4
   112aa:	f7f6 fe6f 	bl	7f8c <ll_addr_get>
   112ae:	4643      	mov	r3, r8
   112b0:	4602      	mov	r2, r0
   112b2:	4621      	mov	r1, r4
   112b4:	2000      	movs	r0, #0
   112b6:	9711      	str	r7, [sp, #68]	; 0x44
   112b8:	9610      	str	r6, [sp, #64]	; 0x40
   112ba:	950f      	str	r5, [sp, #60]	; 0x3c
   112bc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   112c0:	b005      	add	sp, #20
   112c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   112c6:	f7ff bccf 	b.w	10c68 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   112ca:	f000 fb77 	bl	119bc <ctrl_rl_enabled>
   112ce:	2800      	cmp	r0, #0
   112d0:	d0df      	beq.n	11292 <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   112d2:	4639      	mov	r1, r7
   112d4:	462a      	mov	r2, r5
   112d6:	4630      	mov	r0, r6
   112d8:	f000 fa16 	bl	11708 <ll_rl_find>
   112dc:	4607      	mov	r7, r0
   112de:	e7d9      	b.n	11294 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   112e0:	2600      	movs	r6, #0
   112e2:	e7e0      	b.n	112a6 <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   112e4:	200c      	movs	r0, #12
}
   112e6:	b005      	add	sp, #20
   112e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000112ec <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   112ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112f0:	4688      	mov	r8, r1
	int i;

	if (free) {
   112f2:	4615      	mov	r5, r2
   112f4:	b10a      	cbz	r2, 112fa <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   112f6:	23ff      	movs	r3, #255	; 0xff
   112f8:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   112fa:	4e14      	ldr	r6, [pc, #80]	; (1134c <wl_find+0x60>)
{
   112fc:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   112fe:	f000 0701 	and.w	r7, r0, #1
   11302:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11306:	07da      	lsls	r2, r3, #31
   11308:	d51d      	bpl.n	11346 <wl_find+0x5a>
   1130a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1130e:	42bb      	cmp	r3, r7
   11310:	d113      	bne.n	1133a <wl_find+0x4e>
   11312:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   11316:	2206      	movs	r2, #6
   11318:	4641      	mov	r1, r8
   1131a:	3002      	adds	r0, #2
   1131c:	f7f0 fc59 	bl	1bd2 <memcmp>
   11320:	b910      	cbnz	r0, 11328 <wl_find+0x3c>
			return i;
   11322:	b2e0      	uxtb	r0, r4
   11324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11328:	b13d      	cbz	r5, 1133a <wl_find+0x4e>
   1132a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1132e:	07db      	lsls	r3, r3, #31
   11330:	d403      	bmi.n	1133a <wl_find+0x4e>
   11332:	782b      	ldrb	r3, [r5, #0]
   11334:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   11336:	bf08      	it	eq
   11338:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   1133a:	3401      	adds	r4, #1
   1133c:	2c08      	cmp	r4, #8
   1133e:	d1e0      	bne.n	11302 <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   11340:	20ff      	movs	r0, #255	; 0xff
   11342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11346:	2d00      	cmp	r5, #0
   11348:	d1f3      	bne.n	11332 <wl_find+0x46>
   1134a:	e7f6      	b.n	1133a <wl_find+0x4e>
   1134c:	2000142f 	.word	0x2000142f

00011350 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   11350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11354:	4d1a      	ldr	r5, [pc, #104]	; (113c0 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11356:	f8df 8074 	ldr.w	r8, [pc, #116]	; 113cc <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   1135a:	1eae      	subs	r6, r5, #2
{
   1135c:	2400      	movs	r4, #0
   1135e:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   11360:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11364:	07d9      	lsls	r1, r3, #31
   11366:	d524      	bpl.n	113b2 <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11368:	f898 3000 	ldrb.w	r3, [r8]
   1136c:	b15b      	cbz	r3, 11386 <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   1136e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11372:	2a07      	cmp	r2, #7
   11374:	d807      	bhi.n	11386 <filter_wl_update+0x36>
   11376:	2328      	movs	r3, #40	; 0x28
   11378:	4353      	muls	r3, r2
   1137a:	4a12      	ldr	r2, [pc, #72]	; (113c4 <filter_wl_update+0x74>)
   1137c:	5cd3      	ldrb	r3, [r2, r3]
   1137e:	075a      	lsls	r2, r3, #29
   11380:	d501      	bpl.n	11386 <filter_wl_update+0x36>
   11382:	06db      	lsls	r3, r3, #27
   11384:	d515      	bpl.n	113b2 <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   11386:	4810      	ldr	r0, [pc, #64]	; (113c8 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11388:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1138c:	2201      	movs	r2, #1
   1138e:	fa02 f104 	lsl.w	r1, r2, r4
   11392:	7802      	ldrb	r2, [r0, #0]
   11394:	430a      	orrs	r2, r1
   11396:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11398:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1139c:	7842      	ldrb	r2, [r0, #1]
   1139e:	40a3      	lsls	r3, r4
   113a0:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   113a2:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   113a4:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   113a6:	fb02 0004 	mla	r0, r2, r4, r0
   113aa:	4629      	mov	r1, r5
   113ac:	3002      	adds	r0, #2
   113ae:	f7f0 fc25 	bl	1bfc <memcpy>
   113b2:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   113b4:	2c08      	cmp	r4, #8
   113b6:	f105 0508 	add.w	r5, r5, #8
   113ba:	d1d1      	bne.n	11360 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   113bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   113c0:	20001431 	.word	0x20001431
   113c4:	200012bc 	.word	0x200012bc
   113c8:	2000146f 	.word	0x2000146f
   113cc:	200013fc 	.word	0x200013fc

000113d0 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   113d0:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   113d2:	f7fe fead 	bl	10130 <ll_adv_is_enabled>
   113d6:	b928      	cbnz	r0, 113e4 <rl_access_check.constprop.1+0x14>
   113d8:	f7fe febe 	bl	10158 <ll_scan_is_enabled>
   113dc:	fab0 f080 	clz	r0, r0
   113e0:	0940      	lsrs	r0, r0, #5
   113e2:	bd08      	pop	{r3, pc}
   113e4:	2000      	movs	r0, #0
}
   113e6:	bd08      	pop	{r3, pc}

000113e8 <filter_rl_update>:
{
   113e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   113ea:	4e10      	ldr	r6, [pc, #64]	; (1142c <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   113ec:	4d10      	ldr	r5, [pc, #64]	; (11430 <filter_rl_update+0x48>)
{
   113ee:	2400      	movs	r4, #0
		if (rl[i].taken) {
   113f0:	2728      	movs	r7, #40	; 0x28
   113f2:	fb07 f104 	mul.w	r1, r7, r4
   113f6:	5c73      	ldrb	r3, [r6, r1]
   113f8:	07da      	lsls	r2, r3, #31
   113fa:	d513      	bpl.n	11424 <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   113fc:	2201      	movs	r2, #1
   113fe:	fa02 f004 	lsl.w	r0, r2, r4
   11402:	782a      	ldrb	r2, [r5, #0]
   11404:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   11406:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   1140a:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1140c:	786a      	ldrb	r2, [r5, #1]
   1140e:	40a3      	lsls	r3, r4
   11410:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11412:	2206      	movs	r2, #6
   11414:	3101      	adds	r1, #1
   11416:	fb02 5004 	mla	r0, r2, r4, r5
   1141a:	4431      	add	r1, r6
   1141c:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1141e:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11420:	f7f0 fbec 	bl	1bfc <memcpy>
   11424:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11426:	2c08      	cmp	r4, #8
   11428:	d1e3      	bne.n	113f2 <filter_rl_update+0xa>
}
   1142a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1142c:	200012bc 	.word	0x200012bc
   11430:	200013fd 	.word	0x200013fd

00011434 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   11434:	2807      	cmp	r0, #7
   11436:	d80c      	bhi.n	11452 <ctrl_lrpa_get+0x1e>
   11438:	2328      	movs	r3, #40	; 0x28
   1143a:	4358      	muls	r0, r3
   1143c:	4a06      	ldr	r2, [pc, #24]	; (11458 <ctrl_lrpa_get+0x24>)
   1143e:	5c13      	ldrb	r3, [r2, r0]
   11440:	1811      	adds	r1, r2, r0
   11442:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   11446:	b128      	cbz	r0, 11454 <ctrl_lrpa_get+0x20>
   11448:	f3c3 0040 	ubfx	r0, r3, #1, #1
   1144c:	b110      	cbz	r0, 11454 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   1144e:	6a48      	ldr	r0, [r1, #36]	; 0x24
   11450:	4770      	bx	lr
		return NULL;
   11452:	2000      	movs	r0, #0
}
   11454:	4770      	bx	lr
   11456:	bf00      	nop
   11458:	200012bc 	.word	0x200012bc

0001145c <ctrl_irks_get>:
	*count = peer_irk_count;
   1145c:	4b02      	ldr	r3, [pc, #8]	; (11468 <ctrl_irks_get+0xc>)
   1145e:	781b      	ldrb	r3, [r3, #0]
   11460:	7003      	strb	r3, [r0, #0]
}
   11462:	4802      	ldr	r0, [pc, #8]	; (1146c <ctrl_irks_get+0x10>)
   11464:	4770      	bx	lr
   11466:	bf00      	nop
   11468:	20001232 	.word	0x20001232
   1146c:	2000123b 	.word	0x2000123b

00011470 <ctrl_rl_idx>:
{
   11470:	b507      	push	{r0, r1, r2, lr}
	if (whitelist) {
   11472:	b320      	cbz	r0, 114be <ctrl_rl_idx+0x4e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   11474:	2907      	cmp	r1, #7
   11476:	d90e      	bls.n	11496 <ctrl_rl_idx+0x26>
		LL_ASSERT(wl[devmatch_id].taken);
   11478:	4b1d      	ldr	r3, [pc, #116]	; (114f0 <ctrl_rl_idx+0x80>)
   1147a:	9301      	str	r3, [sp, #4]
   1147c:	9300      	str	r3, [sp, #0]
   1147e:	4a1d      	ldr	r2, [pc, #116]	; (114f4 <ctrl_rl_idx+0x84>)
   11480:	4b1d      	ldr	r3, [pc, #116]	; (114f8 <ctrl_rl_idx+0x88>)
   11482:	491e      	ldr	r1, [pc, #120]	; (114fc <ctrl_rl_idx+0x8c>)
   11484:	481e      	ldr	r0, [pc, #120]	; (11500 <ctrl_rl_idx+0x90>)
   11486:	f7ef fd81 	bl	f8c <printk>
   1148a:	4040      	eors	r0, r0
   1148c:	f380 8811 	msr	BASEPRI, r0
   11490:	f04f 0004 	mov.w	r0, #4
   11494:	df02      	svc	2
   11496:	4b1b      	ldr	r3, [pc, #108]	; (11504 <ctrl_rl_idx+0x94>)
   11498:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   1149c:	07d2      	lsls	r2, r2, #31
   1149e:	d407      	bmi.n	114b0 <ctrl_rl_idx+0x40>
   114a0:	4b13      	ldr	r3, [pc, #76]	; (114f0 <ctrl_rl_idx+0x80>)
   114a2:	9301      	str	r3, [sp, #4]
   114a4:	9300      	str	r3, [sp, #0]
   114a6:	4a13      	ldr	r2, [pc, #76]	; (114f4 <ctrl_rl_idx+0x84>)
   114a8:	4b13      	ldr	r3, [pc, #76]	; (114f8 <ctrl_rl_idx+0x88>)
   114aa:	4914      	ldr	r1, [pc, #80]	; (114fc <ctrl_rl_idx+0x8c>)
   114ac:	4816      	ldr	r0, [pc, #88]	; (11508 <ctrl_rl_idx+0x98>)
   114ae:	e7ea      	b.n	11486 <ctrl_rl_idx+0x16>
		i = wl[devmatch_id].rl_idx;
   114b0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   114b4:	7849      	ldrb	r1, [r1, #1]
}
   114b6:	4608      	mov	r0, r1
   114b8:	b003      	add	sp, #12
   114ba:	f85d fb04 	ldr.w	pc, [sp], #4
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   114be:	2907      	cmp	r1, #7
   114c0:	d907      	bls.n	114d2 <ctrl_rl_idx+0x62>
   114c2:	4b0b      	ldr	r3, [pc, #44]	; (114f0 <ctrl_rl_idx+0x80>)
   114c4:	9301      	str	r3, [sp, #4]
   114c6:	9300      	str	r3, [sp, #0]
   114c8:	4a0a      	ldr	r2, [pc, #40]	; (114f4 <ctrl_rl_idx+0x84>)
   114ca:	4b0b      	ldr	r3, [pc, #44]	; (114f8 <ctrl_rl_idx+0x88>)
   114cc:	490b      	ldr	r1, [pc, #44]	; (114fc <ctrl_rl_idx+0x8c>)
   114ce:	480f      	ldr	r0, [pc, #60]	; (1150c <ctrl_rl_idx+0x9c>)
   114d0:	e7d9      	b.n	11486 <ctrl_rl_idx+0x16>
		LL_ASSERT(rl[i].taken);
   114d2:	2328      	movs	r3, #40	; 0x28
   114d4:	434b      	muls	r3, r1
   114d6:	4a0e      	ldr	r2, [pc, #56]	; (11510 <ctrl_rl_idx+0xa0>)
   114d8:	5cd3      	ldrb	r3, [r2, r3]
   114da:	07db      	lsls	r3, r3, #31
   114dc:	d4eb      	bmi.n	114b6 <ctrl_rl_idx+0x46>
   114de:	4b04      	ldr	r3, [pc, #16]	; (114f0 <ctrl_rl_idx+0x80>)
   114e0:	9301      	str	r3, [sp, #4]
   114e2:	9300      	str	r3, [sp, #0]
   114e4:	4a03      	ldr	r2, [pc, #12]	; (114f4 <ctrl_rl_idx+0x84>)
   114e6:	4b04      	ldr	r3, [pc, #16]	; (114f8 <ctrl_rl_idx+0x88>)
   114e8:	4904      	ldr	r1, [pc, #16]	; (114fc <ctrl_rl_idx+0x8c>)
   114ea:	480a      	ldr	r0, [pc, #40]	; (11514 <ctrl_rl_idx+0xa4>)
   114ec:	e7cb      	b.n	11486 <ctrl_rl_idx+0x16>
   114ee:	bf00      	nop
   114f0:	0001496d 	.word	0x0001496d
   114f4:	000156bc 	.word	0x000156bc
   114f8:	00017cee 	.word	0x00017cee
   114fc:	0001570b 	.word	0x0001570b
   11500:	00017d88 	.word	0x00017d88
   11504:	2000142f 	.word	0x2000142f
   11508:	00017e55 	.word	0x00017e55
   1150c:	00017e8c 	.word	0x00017e8c
   11510:	200012bc 	.word	0x200012bc
   11514:	00017f59 	.word	0x00017f59

00011518 <ctrl_rl_irk_idx>:
{
   11518:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1151a:	4b18      	ldr	r3, [pc, #96]	; (1157c <ctrl_rl_irk_idx+0x64>)
   1151c:	781b      	ldrb	r3, [r3, #0]
   1151e:	4283      	cmp	r3, r0
   11520:	d80e      	bhi.n	11540 <ctrl_rl_irk_idx+0x28>
   11522:	4b17      	ldr	r3, [pc, #92]	; (11580 <ctrl_rl_irk_idx+0x68>)
   11524:	9301      	str	r3, [sp, #4]
   11526:	9300      	str	r3, [sp, #0]
   11528:	4a16      	ldr	r2, [pc, #88]	; (11584 <ctrl_rl_irk_idx+0x6c>)
   1152a:	4b17      	ldr	r3, [pc, #92]	; (11588 <ctrl_rl_irk_idx+0x70>)
   1152c:	4917      	ldr	r1, [pc, #92]	; (1158c <ctrl_rl_irk_idx+0x74>)
   1152e:	4818      	ldr	r0, [pc, #96]	; (11590 <ctrl_rl_irk_idx+0x78>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11530:	f7ef fd2c 	bl	f8c <printk>
   11534:	4040      	eors	r0, r0
   11536:	f380 8811 	msr	BASEPRI, r0
   1153a:	f04f 0004 	mov.w	r0, #4
   1153e:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   11540:	4b14      	ldr	r3, [pc, #80]	; (11594 <ctrl_rl_irk_idx+0x7c>)
   11542:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11544:	2807      	cmp	r0, #7
   11546:	d907      	bls.n	11558 <ctrl_rl_irk_idx+0x40>
   11548:	4b0d      	ldr	r3, [pc, #52]	; (11580 <ctrl_rl_irk_idx+0x68>)
   1154a:	9301      	str	r3, [sp, #4]
   1154c:	9300      	str	r3, [sp, #0]
   1154e:	4a0d      	ldr	r2, [pc, #52]	; (11584 <ctrl_rl_irk_idx+0x6c>)
   11550:	4b0d      	ldr	r3, [pc, #52]	; (11588 <ctrl_rl_irk_idx+0x70>)
   11552:	490e      	ldr	r1, [pc, #56]	; (1158c <ctrl_rl_irk_idx+0x74>)
   11554:	4810      	ldr	r0, [pc, #64]	; (11598 <ctrl_rl_irk_idx+0x80>)
   11556:	e7eb      	b.n	11530 <ctrl_rl_irk_idx+0x18>
	LL_ASSERT(rl[i].taken);
   11558:	2328      	movs	r3, #40	; 0x28
   1155a:	4343      	muls	r3, r0
   1155c:	4a0f      	ldr	r2, [pc, #60]	; (1159c <ctrl_rl_irk_idx+0x84>)
   1155e:	5cd3      	ldrb	r3, [r2, r3]
   11560:	07db      	lsls	r3, r3, #31
   11562:	d407      	bmi.n	11574 <ctrl_rl_irk_idx+0x5c>
   11564:	4b06      	ldr	r3, [pc, #24]	; (11580 <ctrl_rl_irk_idx+0x68>)
   11566:	9301      	str	r3, [sp, #4]
   11568:	9300      	str	r3, [sp, #0]
   1156a:	4a06      	ldr	r2, [pc, #24]	; (11584 <ctrl_rl_irk_idx+0x6c>)
   1156c:	4b06      	ldr	r3, [pc, #24]	; (11588 <ctrl_rl_irk_idx+0x70>)
   1156e:	4907      	ldr	r1, [pc, #28]	; (1158c <ctrl_rl_irk_idx+0x74>)
   11570:	480b      	ldr	r0, [pc, #44]	; (115a0 <ctrl_rl_irk_idx+0x88>)
   11572:	e7dd      	b.n	11530 <ctrl_rl_irk_idx+0x18>
}
   11574:	b003      	add	sp, #12
   11576:	f85d fb04 	ldr.w	pc, [sp], #4
   1157a:	bf00      	nop
   1157c:	20001232 	.word	0x20001232
   11580:	0001496d 	.word	0x0001496d
   11584:	000156bc 	.word	0x000156bc
   11588:	00017cfa 	.word	0x00017cfa
   1158c:	0001570b 	.word	0x0001570b
   11590:	00017f86 	.word	0x00017f86
   11594:	20001233 	.word	0x20001233
   11598:	00017fc4 	.word	0x00017fc4
   1159c:	200012bc 	.word	0x200012bc
   115a0:	00017f59 	.word	0x00017f59

000115a4 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   115a4:	2807      	cmp	r0, #7
{
   115a6:	b507      	push	{r0, r1, r2, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   115a8:	d819      	bhi.n	115de <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   115aa:	2328      	movs	r3, #40	; 0x28
   115ac:	4358      	muls	r0, r3
   115ae:	4b0d      	ldr	r3, [pc, #52]	; (115e4 <ctrl_irk_whitelisted+0x40>)
   115b0:	5c18      	ldrb	r0, [r3, r0]
   115b2:	07c3      	lsls	r3, r0, #31
   115b4:	d40e      	bmi.n	115d4 <ctrl_irk_whitelisted+0x30>
   115b6:	4b0c      	ldr	r3, [pc, #48]	; (115e8 <ctrl_irk_whitelisted+0x44>)
   115b8:	9301      	str	r3, [sp, #4]
   115ba:	9300      	str	r3, [sp, #0]
   115bc:	4a0b      	ldr	r2, [pc, #44]	; (115ec <ctrl_irk_whitelisted+0x48>)
   115be:	4b0c      	ldr	r3, [pc, #48]	; (115f0 <ctrl_irk_whitelisted+0x4c>)
   115c0:	490c      	ldr	r1, [pc, #48]	; (115f4 <ctrl_irk_whitelisted+0x50>)
   115c2:	480d      	ldr	r0, [pc, #52]	; (115f8 <ctrl_irk_whitelisted+0x54>)
   115c4:	f7ef fce2 	bl	f8c <printk>
   115c8:	4040      	eors	r0, r0
   115ca:	f380 8811 	msr	BASEPRI, r0
   115ce:	f04f 0004 	mov.w	r0, #4
   115d2:	df02      	svc	2
	return rl[rl_idx].wl;
   115d4:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   115d8:	b003      	add	sp, #12
   115da:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   115de:	2000      	movs	r0, #0
   115e0:	e7fa      	b.n	115d8 <ctrl_irk_whitelisted+0x34>
   115e2:	bf00      	nop
   115e4:	200012bc 	.word	0x200012bc
   115e8:	0001496d 	.word	0x0001496d
   115ec:	000156bc 	.word	0x000156bc
   115f0:	00017d0a 	.word	0x00017d0a
   115f4:	0001570b 	.word	0x0001570b
   115f8:	00017d56 	.word	0x00017d56

000115fc <ctrl_filter_get>:
}
   115fc:	4b03      	ldr	r3, [pc, #12]	; (1160c <ctrl_filter_get+0x10>)
   115fe:	4a04      	ldr	r2, [pc, #16]	; (11610 <ctrl_filter_get+0x14>)
   11600:	2800      	cmp	r0, #0
   11602:	bf14      	ite	ne
   11604:	4610      	movne	r0, r2
   11606:	4618      	moveq	r0, r3
   11608:	4770      	bx	lr
   1160a:	bf00      	nop
   1160c:	200013fd 	.word	0x200013fd
   11610:	2000146f 	.word	0x2000146f

00011614 <ll_wl_size_get>:
   11614:	2008      	movs	r0, #8
   11616:	4770      	bx	lr

00011618 <ll_wl_clear>:
{
   11618:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1161a:	f7fe fd91 	bl	10140 <radio_adv_filter_pol_get>
   1161e:	4604      	mov	r4, r0
   11620:	b110      	cbz	r0, 11628 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11622:	240c      	movs	r4, #12
}
   11624:	4620      	mov	r0, r4
   11626:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11628:	f7fe fdac 	bl	10184 <radio_scan_filter_pol_get>
   1162c:	07c3      	lsls	r3, r0, #31
   1162e:	d4f8      	bmi.n	11622 <ll_wl_clear+0xa>
		wl[i].taken = 0;
   11630:	4a07      	ldr	r2, [pc, #28]	; (11650 <ll_wl_clear+0x38>)
   11632:	4623      	mov	r3, r4
   11634:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   11638:	f36f 0100 	bfc	r1, #0, #1
   1163c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   11640:	3301      	adds	r3, #1
   11642:	2b08      	cmp	r3, #8
   11644:	d1f6      	bne.n	11634 <ll_wl_clear+0x1c>
	wl_anon = 0;
   11646:	4b03      	ldr	r3, [pc, #12]	; (11654 <ll_wl_clear+0x3c>)
   11648:	2200      	movs	r2, #0
   1164a:	701a      	strb	r2, [r3, #0]
	return 0;
   1164c:	e7ea      	b.n	11624 <ll_wl_clear+0xc>
   1164e:	bf00      	nop
   11650:	2000142f 	.word	0x2000142f
   11654:	20001920 	.word	0x20001920

00011658 <ll_wl_remove>:
{
   11658:	b538      	push	{r3, r4, r5, lr}
   1165a:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1165c:	f7fe fd70 	bl	10140 <radio_adv_filter_pol_get>
   11660:	4604      	mov	r4, r0
   11662:	b110      	cbz	r0, 1166a <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11664:	240c      	movs	r4, #12
}
   11666:	4620      	mov	r0, r4
   11668:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1166a:	f7fe fd8b 	bl	10184 <radio_scan_filter_pol_get>
   1166e:	07c3      	lsls	r3, r0, #31
   11670:	d4f8      	bmi.n	11664 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   11672:	7828      	ldrb	r0, [r5, #0]
   11674:	28ff      	cmp	r0, #255	; 0xff
   11676:	d102      	bne.n	1167e <ll_wl_remove+0x26>
		wl_anon = 0;
   11678:	4b0f      	ldr	r3, [pc, #60]	; (116b8 <ll_wl_remove+0x60>)
   1167a:	701c      	strb	r4, [r3, #0]
		return 0;
   1167c:	e7f3      	b.n	11666 <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   1167e:	4622      	mov	r2, r4
   11680:	1c69      	adds	r1, r5, #1
   11682:	f7ff fe33 	bl	112ec <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   11686:	2807      	cmp	r0, #7
   11688:	d813      	bhi.n	116b2 <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   1168a:	4b0c      	ldr	r3, [pc, #48]	; (116bc <ll_wl_remove+0x64>)
   1168c:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   11690:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   11692:	2d07      	cmp	r5, #7
   11694:	d806      	bhi.n	116a4 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   11696:	2228      	movs	r2, #40	; 0x28
   11698:	4909      	ldr	r1, [pc, #36]	; (116c0 <ll_wl_remove+0x68>)
   1169a:	436a      	muls	r2, r5
   1169c:	5c8d      	ldrb	r5, [r1, r2]
   1169e:	f364 1545 	bfi	r5, r4, #5, #1
   116a2:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   116a4:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   116a8:	f36f 0200 	bfc	r2, #0, #1
   116ac:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   116b0:	e7d9      	b.n	11666 <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   116b2:	2402      	movs	r4, #2
   116b4:	e7d7      	b.n	11666 <ll_wl_remove+0xe>
   116b6:	bf00      	nop
   116b8:	20001920 	.word	0x20001920
   116bc:	2000142f 	.word	0x2000142f
   116c0:	200012bc 	.word	0x200012bc

000116c4 <ll_filters_scan_update>:
{
   116c4:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   116c6:	4b0d      	ldr	r3, [pc, #52]	; (116fc <ll_filters_scan_update+0x38>)
   116c8:	2200      	movs	r2, #0
   116ca:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   116cc:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   116ce:	07c3      	lsls	r3, r0, #31
   116d0:	d504      	bpl.n	116dc <ll_filters_scan_update+0x18>
   116d2:	f7fe fd35 	bl	10140 <radio_adv_filter_pol_get>
   116d6:	b908      	cbnz	r0, 116dc <ll_filters_scan_update+0x18>
		filter_wl_update();
   116d8:	f7ff fe3a 	bl	11350 <filter_wl_update>
	filter->enable_bitmask = 0;
   116dc:	4b08      	ldr	r3, [pc, #32]	; (11700 <ll_filters_scan_update+0x3c>)
   116de:	2200      	movs	r2, #0
   116e0:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   116e2:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   116e4:	4b07      	ldr	r3, [pc, #28]	; (11704 <ll_filters_scan_update+0x40>)
   116e6:	781b      	ldrb	r3, [r3, #0]
   116e8:	b133      	cbz	r3, 116f8 <ll_filters_scan_update+0x34>
   116ea:	f7fe fd21 	bl	10130 <ll_adv_is_enabled>
   116ee:	b918      	cbnz	r0, 116f8 <ll_filters_scan_update+0x34>
}
   116f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   116f4:	f7ff be78 	b.w	113e8 <filter_rl_update>
   116f8:	bd08      	pop	{r3, pc}
   116fa:	bf00      	nop
   116fc:	2000146f 	.word	0x2000146f
   11700:	200013fd 	.word	0x200013fd
   11704:	200013fc 	.word	0x200013fc

00011708 <ll_rl_find>:
{
   11708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1170c:	468a      	mov	sl, r1
	if (free) {
   1170e:	4614      	mov	r4, r2
   11710:	b10a      	cbz	r2, 11716 <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   11712:	23ff      	movs	r3, #255	; 0xff
   11714:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   11716:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1176c <ll_rl_find+0x64>
{
   1171a:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1171c:	f000 0901 	and.w	r9, r0, #1
   11720:	2628      	movs	r6, #40	; 0x28
   11722:	436e      	muls	r6, r5
   11724:	b2ef      	uxtb	r7, r5
   11726:	f818 3006 	ldrb.w	r3, [r8, r6]
   1172a:	07da      	lsls	r2, r3, #31
   1172c:	d51a      	bpl.n	11764 <ll_rl_find+0x5c>
   1172e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   11732:	454b      	cmp	r3, r9
   11734:	d10f      	bne.n	11756 <ll_rl_find+0x4e>
   11736:	1c70      	adds	r0, r6, #1
   11738:	2206      	movs	r2, #6
   1173a:	4651      	mov	r1, sl
   1173c:	4440      	add	r0, r8
   1173e:	f7f0 fa48 	bl	1bd2 <memcmp>
   11742:	b160      	cbz	r0, 1175e <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   11744:	b13c      	cbz	r4, 11756 <ll_rl_find+0x4e>
   11746:	f818 3006 	ldrb.w	r3, [r8, r6]
   1174a:	07db      	lsls	r3, r3, #31
   1174c:	d403      	bmi.n	11756 <ll_rl_find+0x4e>
   1174e:	7823      	ldrb	r3, [r4, #0]
   11750:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   11752:	bf08      	it	eq
   11754:	7027      	strbeq	r7, [r4, #0]
   11756:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11758:	2d08      	cmp	r5, #8
   1175a:	d1e1      	bne.n	11720 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   1175c:	27ff      	movs	r7, #255	; 0xff
}
   1175e:	4638      	mov	r0, r7
   11760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   11764:	2c00      	cmp	r4, #0
   11766:	d1f2      	bne.n	1174e <ll_rl_find+0x46>
   11768:	e7f5      	b.n	11756 <ll_rl_find+0x4e>
   1176a:	bf00      	nop
   1176c:	200012bc 	.word	0x200012bc

00011770 <ll_wl_add>:
{
   11770:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11774:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11776:	f7fe fce3 	bl	10140 <radio_adv_filter_pol_get>
   1177a:	4605      	mov	r5, r0
   1177c:	b120      	cbz	r0, 11788 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1177e:	250c      	movs	r5, #12
}
   11780:	4628      	mov	r0, r5
   11782:	b002      	add	sp, #8
   11784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11788:	f7fe fcfc 	bl	10184 <radio_scan_filter_pol_get>
   1178c:	07c3      	lsls	r3, r0, #31
   1178e:	d4f6      	bmi.n	1177e <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   11790:	7838      	ldrb	r0, [r7, #0]
   11792:	28ff      	cmp	r0, #255	; 0xff
   11794:	d103      	bne.n	1179e <ll_wl_add+0x2e>
		wl_anon = 1;
   11796:	4b1f      	ldr	r3, [pc, #124]	; (11814 <ll_wl_add+0xa4>)
   11798:	2201      	movs	r2, #1
   1179a:	701a      	strb	r2, [r3, #0]
		return 0;
   1179c:	e7f0      	b.n	11780 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1179e:	f107 0801 	add.w	r8, r7, #1
   117a2:	f10d 0207 	add.w	r2, sp, #7
   117a6:	4641      	mov	r1, r8
   117a8:	f7ff fda0 	bl	112ec <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   117ac:	2807      	cmp	r0, #7
   117ae:	d92d      	bls.n	1180c <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   117b0:	f89d 6007 	ldrb.w	r6, [sp, #7]
   117b4:	2e07      	cmp	r6, #7
   117b6:	d82b      	bhi.n	11810 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   117b8:	4c17      	ldr	r4, [pc, #92]	; (11818 <ll_wl_add+0xa8>)
   117ba:	783a      	ldrb	r2, [r7, #0]
   117bc:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   117c0:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   117c4:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   117c8:	4641      	mov	r1, r8
   117ca:	2206      	movs	r2, #6
   117cc:	3002      	adds	r0, #2
   117ce:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   117d2:	f7f0 fa13 	bl	1bfc <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   117d6:	462a      	mov	r2, r5
   117d8:	4641      	mov	r1, r8
   117da:	7838      	ldrb	r0, [r7, #0]
   117dc:	f7ff ff94 	bl	11708 <ll_rl_find>
   117e0:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   117e2:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   117e4:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   117e6:	d80e      	bhi.n	11806 <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   117e8:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   117ea:	2328      	movs	r3, #40	; 0x28
   117ec:	4a0b      	ldr	r2, [pc, #44]	; (1181c <ll_wl_add+0xac>)
   117ee:	4358      	muls	r0, r3
   117f0:	5c13      	ldrb	r3, [r2, r0]
   117f2:	f043 0320 	orr.w	r3, r3, #32
   117f6:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   117f8:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   117fc:	f043 0301 	orr.w	r3, r3, #1
   11800:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   11804:	e7bc      	b.n	11780 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   11806:	22ff      	movs	r2, #255	; 0xff
   11808:	705a      	strb	r2, [r3, #1]
   1180a:	e7f5      	b.n	117f8 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   1180c:	2512      	movs	r5, #18
   1180e:	e7b7      	b.n	11780 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11810:	2507      	movs	r5, #7
	return wl_add(addr);
   11812:	e7b5      	b.n	11780 <ll_wl_add+0x10>
   11814:	20001920 	.word	0x20001920
   11818:	2000142f 	.word	0x2000142f
   1181c:	200012bc 	.word	0x200012bc

00011820 <ctrl_rl_idx_allowed>:
{
   11820:	b507      	push	{r0, r1, r2, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   11822:	4b12      	ldr	r3, [pc, #72]	; (1186c <ctrl_rl_idx_allowed+0x4c>)
   11824:	781b      	ldrb	r3, [r3, #0]
   11826:	b1f3      	cbz	r3, 11866 <ctrl_rl_idx_allowed+0x46>
   11828:	2907      	cmp	r1, #7
   1182a:	d81c      	bhi.n	11866 <ctrl_rl_idx_allowed+0x46>
   1182c:	b9d8      	cbnz	r0, 11866 <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   1182e:	2328      	movs	r3, #40	; 0x28
   11830:	4359      	muls	r1, r3
   11832:	4b0f      	ldr	r3, [pc, #60]	; (11870 <ctrl_rl_idx_allowed+0x50>)
   11834:	5c58      	ldrb	r0, [r3, r1]
   11836:	07c2      	lsls	r2, r0, #31
   11838:	d40e      	bmi.n	11858 <ctrl_rl_idx_allowed+0x38>
   1183a:	4b0e      	ldr	r3, [pc, #56]	; (11874 <ctrl_rl_idx_allowed+0x54>)
   1183c:	9301      	str	r3, [sp, #4]
   1183e:	9300      	str	r3, [sp, #0]
   11840:	4a0d      	ldr	r2, [pc, #52]	; (11878 <ctrl_rl_idx_allowed+0x58>)
   11842:	4b0e      	ldr	r3, [pc, #56]	; (1187c <ctrl_rl_idx_allowed+0x5c>)
   11844:	490e      	ldr	r1, [pc, #56]	; (11880 <ctrl_rl_idx_allowed+0x60>)
   11846:	480f      	ldr	r0, [pc, #60]	; (11884 <ctrl_rl_idx_allowed+0x64>)
   11848:	f7ef fba0 	bl	f8c <printk>
   1184c:	4040      	eors	r0, r0
   1184e:	f380 8811 	msr	BASEPRI, r0
   11852:	f04f 0004 	mov.w	r0, #4
   11856:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   11858:	0743      	lsls	r3, r0, #29
   1185a:	d504      	bpl.n	11866 <ctrl_rl_idx_allowed+0x46>
   1185c:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   11860:	b003      	add	sp, #12
   11862:	f85d fb04 	ldr.w	pc, [sp], #4
		return true;
   11866:	2001      	movs	r0, #1
   11868:	e7fa      	b.n	11860 <ctrl_rl_idx_allowed+0x40>
   1186a:	bf00      	nop
   1186c:	200013fc 	.word	0x200013fc
   11870:	200012bc 	.word	0x200012bc
   11874:	0001496d 	.word	0x0001496d
   11878:	000156bc 	.word	0x000156bc
   1187c:	00017d1f 	.word	0x00017d1f
   11880:	0001570b 	.word	0x0001570b
   11884:	00017d56 	.word	0x00017d56

00011888 <ll_rl_id_addr_get>:
{
   11888:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1188a:	2b07      	cmp	r3, #7
{
   1188c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1188e:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   11890:	d90e      	bls.n	118b0 <ll_rl_id_addr_get+0x28>
   11892:	4b15      	ldr	r3, [pc, #84]	; (118e8 <ll_rl_id_addr_get+0x60>)
   11894:	9301      	str	r3, [sp, #4]
   11896:	9300      	str	r3, [sp, #0]
   11898:	4a14      	ldr	r2, [pc, #80]	; (118ec <ll_rl_id_addr_get+0x64>)
   1189a:	4b15      	ldr	r3, [pc, #84]	; (118f0 <ll_rl_id_addr_get+0x68>)
   1189c:	4915      	ldr	r1, [pc, #84]	; (118f4 <ll_rl_id_addr_get+0x6c>)
   1189e:	4816      	ldr	r0, [pc, #88]	; (118f8 <ll_rl_id_addr_get+0x70>)
	LL_ASSERT(rl[rl_idx].taken);
   118a0:	f7ef fb74 	bl	f8c <printk>
   118a4:	4040      	eors	r0, r0
   118a6:	f380 8811 	msr	BASEPRI, r0
   118aa:	f04f 0004 	mov.w	r0, #4
   118ae:	df02      	svc	2
   118b0:	2528      	movs	r5, #40	; 0x28
   118b2:	4c12      	ldr	r4, [pc, #72]	; (118fc <ll_rl_id_addr_get+0x74>)
   118b4:	fb05 f203 	mul.w	r2, r5, r3
   118b8:	5ca2      	ldrb	r2, [r4, r2]
   118ba:	f012 0f01 	tst.w	r2, #1
   118be:	d107      	bne.n	118d0 <ll_rl_id_addr_get+0x48>
   118c0:	4b09      	ldr	r3, [pc, #36]	; (118e8 <ll_rl_id_addr_get+0x60>)
   118c2:	9301      	str	r3, [sp, #4]
   118c4:	9300      	str	r3, [sp, #0]
   118c6:	4a09      	ldr	r2, [pc, #36]	; (118ec <ll_rl_id_addr_get+0x64>)
   118c8:	4b09      	ldr	r3, [pc, #36]	; (118f0 <ll_rl_id_addr_get+0x68>)
   118ca:	490a      	ldr	r1, [pc, #40]	; (118f4 <ll_rl_id_addr_get+0x6c>)
   118cc:	480c      	ldr	r0, [pc, #48]	; (11900 <ll_rl_id_addr_get+0x78>)
   118ce:	e7e7      	b.n	118a0 <ll_rl_id_addr_get+0x18>
	*id_addr_type = rl[rl_idx].id_addr_type;
   118d0:	f3c2 1280 	ubfx	r2, r2, #6, #1
   118d4:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   118d6:	fb05 4103 	mla	r1, r5, r3, r4
   118da:	2206      	movs	r2, #6
   118dc:	3101      	adds	r1, #1
}
   118de:	b003      	add	sp, #12
   118e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   118e4:	f7f0 b98a 	b.w	1bfc <memcpy>
   118e8:	0001496d 	.word	0x0001496d
   118ec:	000156bc 	.word	0x000156bc
   118f0:	00017d33 	.word	0x00017d33
   118f4:	0001570b 	.word	0x0001570b
   118f8:	00017feb 	.word	0x00017feb
   118fc:	200012bc 	.word	0x200012bc
   11900:	00017d56 	.word	0x00017d56

00011904 <ctrl_rl_addr_allowed>:
{
   11904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   11908:	4b1a      	ldr	r3, [pc, #104]	; (11974 <ctrl_rl_addr_allowed+0x70>)
   1190a:	781b      	ldrb	r3, [r3, #0]
   1190c:	b37b      	cbz	r3, 1196e <ctrl_rl_addr_allowed+0x6a>
   1190e:	7813      	ldrb	r3, [r2, #0]
   11910:	2bff      	cmp	r3, #255	; 0xff
   11912:	d12c      	bne.n	1196e <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   11914:	4e18      	ldr	r6, [pc, #96]	; (11978 <ctrl_rl_addr_allowed+0x74>)
   11916:	2400      	movs	r4, #0
   11918:	f04f 0828 	mov.w	r8, #40	; 0x28
   1191c:	46b6      	mov	lr, r6
   1191e:	fb08 f304 	mul.w	r3, r8, r4
   11922:	fa5f fc84 	uxtb.w	ip, r4
   11926:	5cf7      	ldrb	r7, [r6, r3]
   11928:	f017 0f01 	tst.w	r7, #1
   1192c:	eb06 0503 	add.w	r5, r6, r3
   11930:	d01a      	beq.n	11968 <ctrl_rl_addr_allowed+0x64>
   11932:	f3c7 1780 	ubfx	r7, r7, #6, #1
   11936:	4287      	cmp	r7, r0
   11938:	d116      	bne.n	11968 <ctrl_rl_addr_allowed+0x64>
   1193a:	3306      	adds	r3, #6
   1193c:	1e4f      	subs	r7, r1, #1
   1193e:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   11940:	f815 af01 	ldrb.w	sl, [r5, #1]!
   11944:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   11948:	45ca      	cmp	sl, r9
   1194a:	d10d      	bne.n	11968 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   1194c:	429d      	cmp	r5, r3
   1194e:	d1f7      	bne.n	11940 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   11950:	2328      	movs	r3, #40	; 0x28
   11952:	435c      	muls	r4, r3
				*rl_idx = i;
   11954:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   11958:	f81e 0004 	ldrb.w	r0, [lr, r4]
   1195c:	0743      	lsls	r3, r0, #29
   1195e:	d506      	bpl.n	1196e <ctrl_rl_addr_allowed+0x6a>
   11960:	f3c0 1000 	ubfx	r0, r0, #4, #1
   11964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11968:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1196a:	2c08      	cmp	r4, #8
   1196c:	d1d7      	bne.n	1191e <ctrl_rl_addr_allowed+0x1a>
   1196e:	2001      	movs	r0, #1
}
   11970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11974:	200013fc 	.word	0x200013fc
   11978:	200012bc 	.word	0x200012bc

0001197c <ctrl_rl_addr_resolve>:
{
   1197c:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1197e:	4c0d      	ldr	r4, [pc, #52]	; (119b4 <ctrl_rl_addr_resolve+0x38>)
   11980:	7824      	ldrb	r4, [r4, #0]
   11982:	b1a4      	cbz	r4, 119ae <ctrl_rl_addr_resolve+0x32>
   11984:	2a07      	cmp	r2, #7
   11986:	d812      	bhi.n	119ae <ctrl_rl_addr_resolve+0x32>
   11988:	2528      	movs	r5, #40	; 0x28
   1198a:	4c0b      	ldr	r4, [pc, #44]	; (119b8 <ctrl_rl_addr_resolve+0x3c>)
   1198c:	fb05 f602 	mul.w	r6, r5, r2
   11990:	5da6      	ldrb	r6, [r4, r6]
   11992:	0736      	lsls	r6, r6, #28
   11994:	d50b      	bpl.n	119ae <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   11996:	b150      	cbz	r0, 119ae <ctrl_rl_addr_resolve+0x32>
   11998:	794b      	ldrb	r3, [r1, #5]
   1199a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1199e:	2b40      	cmp	r3, #64	; 0x40
   119a0:	d105      	bne.n	119ae <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   119a2:	fb05 4202 	mla	r2, r5, r2, r4
   119a6:	1dd0      	adds	r0, r2, #7
}
   119a8:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   119aa:	f7f0 ba3c 	b.w	1e26 <bt_rpa_irk_matches>
}
   119ae:	2000      	movs	r0, #0
   119b0:	bc70      	pop	{r4, r5, r6}
   119b2:	4770      	bx	lr
   119b4:	200013fc 	.word	0x200013fc
   119b8:	200012bc 	.word	0x200012bc

000119bc <ctrl_rl_enabled>:
	return rl_enable;
   119bc:	4b02      	ldr	r3, [pc, #8]	; (119c8 <ctrl_rl_enabled+0xc>)
   119be:	7818      	ldrb	r0, [r3, #0]
}
   119c0:	3000      	adds	r0, #0
   119c2:	bf18      	it	ne
   119c4:	2001      	movne	r0, #1
   119c6:	4770      	bx	lr
   119c8:	200013fc 	.word	0x200013fc

000119cc <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   119cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119d0:	b089      	sub	sp, #36	; 0x24
   119d2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   119d4:	f002 fa70 	bl	13eb8 <_impl_k_uptime_get>
   119d8:	4680      	mov	r8, r0
   119da:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   119dc:	2c00      	cmp	r4, #0
   119de:	d148      	bne.n	11a72 <ll_rl_rpa_update+0xa6>
   119e0:	4b3b      	ldr	r3, [pc, #236]	; (11ad0 <ll_rl_rpa_update+0x104>)
   119e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   119e6:	1c5c      	adds	r4, r3, #1
   119e8:	bf08      	it	eq
   119ea:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   119ee:	d040      	beq.n	11a72 <ll_rl_rpa_update+0xa6>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   119f0:	1a82      	subs	r2, r0, r2
   119f2:	eb61 0303 	sbc.w	r3, r1, r3
   119f6:	4937      	ldr	r1, [pc, #220]	; (11ad4 <ll_rl_rpa_update+0x108>)
   119f8:	6808      	ldr	r0, [r1, #0]
   119fa:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   119fc:	4282      	cmp	r2, r0
   119fe:	418b      	sbcs	r3, r1
   11a00:	bfac      	ite	ge
   11a02:	2601      	movge	r6, #1
   11a04:	2600      	movlt	r6, #0
   11a06:	4d34      	ldr	r5, [pc, #208]	; (11ad8 <ll_rl_rpa_update+0x10c>)
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11a08:	f1a5 0b07 	sub.w	fp, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   11a0c:	2400      	movs	r4, #0
   11a0e:	465f      	mov	r7, fp
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11a10:	2328      	movs	r3, #40	; 0x28
   11a12:	4363      	muls	r3, r4
   11a14:	f81b 3003 	ldrb.w	r3, [fp, r3]
   11a18:	07d8      	lsls	r0, r3, #31
   11a1a:	d54d      	bpl.n	11ab8 <ll_rl_rpa_update+0xec>
   11a1c:	b90e      	cbnz	r6, 11a22 <ll_rl_rpa_update+0x56>
   11a1e:	0799      	lsls	r1, r3, #30
   11a20:	d44a      	bmi.n	11ab8 <ll_rl_rpa_update+0xec>

			if (rl[i].pirk) {
   11a22:	2328      	movs	r3, #40	; 0x28
   11a24:	4363      	muls	r3, r4
   11a26:	5cfb      	ldrb	r3, [r7, r3]
   11a28:	075a      	lsls	r2, r3, #29
   11a2a:	d524      	bpl.n	11a76 <ll_rl_rpa_update+0xaa>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   11a2c:	7c2a      	ldrb	r2, [r5, #16]
   11a2e:	4b2b      	ldr	r3, [pc, #172]	; (11adc <ll_rl_rpa_update+0x110>)
   11a30:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   11a34:	f103 0210 	add.w	r2, r3, #16
   11a38:	f10d 010f 	add.w	r1, sp, #15
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   11a3c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   11a40:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   11a44:	429a      	cmp	r2, r3
   11a46:	d1f9      	bne.n	11a3c <ll_rl_rpa_update+0x70>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   11a48:	f105 0117 	add.w	r1, r5, #23
   11a4c:	a804      	add	r0, sp, #16
   11a4e:	f7f0 f9fd 	bl	1e4c <bt_rpa_create>
				LL_ASSERT(!err);
   11a52:	b180      	cbz	r0, 11a76 <ll_rl_rpa_update+0xaa>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   11a54:	4b22      	ldr	r3, [pc, #136]	; (11ae0 <ll_rl_rpa_update+0x114>)
   11a56:	9301      	str	r3, [sp, #4]
   11a58:	9300      	str	r3, [sp, #0]
   11a5a:	4a22      	ldr	r2, [pc, #136]	; (11ae4 <ll_rl_rpa_update+0x118>)
   11a5c:	4b22      	ldr	r3, [pc, #136]	; (11ae8 <ll_rl_rpa_update+0x11c>)
   11a5e:	4923      	ldr	r1, [pc, #140]	; (11aec <ll_rl_rpa_update+0x120>)
   11a60:	4823      	ldr	r0, [pc, #140]	; (11af0 <ll_rl_rpa_update+0x124>)
   11a62:	f7ef fa93 	bl	f8c <printk>
   11a66:	4040      	eors	r0, r0
   11a68:	f380 8811 	msr	BASEPRI, r0
   11a6c:	f04f 0004 	mov.w	r0, #4
   11a70:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   11a72:	2601      	movs	r6, #1
   11a74:	e7c7      	b.n	11a06 <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
   11a76:	2328      	movs	r3, #40	; 0x28
   11a78:	4363      	muls	r3, r4
   11a7a:	5cfb      	ldrb	r3, [r7, r3]
   11a7c:	071b      	lsls	r3, r3, #28
   11a7e:	d515      	bpl.n	11aac <ll_rl_rpa_update+0xe0>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   11a80:	f10d 0a10 	add.w	sl, sp, #16
   11a84:	4651      	mov	r1, sl
   11a86:	4628      	mov	r0, r5
   11a88:	f7f0 f9e0 	bl	1e4c <bt_rpa_create>
				LL_ASSERT(!err);
   11a8c:	2800      	cmp	r0, #0
   11a8e:	d1e1      	bne.n	11a54 <ll_rl_rpa_update+0x88>
   11a90:	4b18      	ldr	r3, [pc, #96]	; (11af4 <ll_rl_rpa_update+0x128>)
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   11a92:	f8c5 a01d 	str.w	sl, [r5, #29]
   11a96:	2206      	movs	r2, #6
   11a98:	fb02 3304 	mla	r3, r2, r4, r3
   11a9c:	4618      	mov	r0, r3
   11a9e:	4651      	mov	r1, sl
   11aa0:	9303      	str	r3, [sp, #12]
   11aa2:	f7f0 f8ab 	bl	1bfc <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   11aa6:	9b03      	ldr	r3, [sp, #12]
   11aa8:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   11aac:	2328      	movs	r3, #40	; 0x28
   11aae:	4363      	muls	r3, r4
   11ab0:	5cfa      	ldrb	r2, [r7, r3]
   11ab2:	f042 0202 	orr.w	r2, r2, #2
   11ab6:	54fa      	strb	r2, [r7, r3]
   11ab8:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11aba:	2c08      	cmp	r4, #8
   11abc:	f105 0528 	add.w	r5, r5, #40	; 0x28
   11ac0:	d1a6      	bne.n	11a10 <ll_rl_rpa_update+0x44>
		}
	}

	if (all) {
   11ac2:	b116      	cbz	r6, 11aca <ll_rl_rpa_update+0xfe>
		rpa_last_ms = now;
   11ac4:	4b02      	ldr	r3, [pc, #8]	; (11ad0 <ll_rl_rpa_update+0x104>)
   11ac6:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   11aca:	b009      	add	sp, #36	; 0x24
   11acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ad0:	20001918 	.word	0x20001918
   11ad4:	2000194c 	.word	0x2000194c
   11ad8:	200012c3 	.word	0x200012c3
   11adc:	2000123b 	.word	0x2000123b
   11ae0:	0001496d 	.word	0x0001496d
   11ae4:	000156bc 	.word	0x000156bc
   11ae8:	00017d45 	.word	0x00017d45
   11aec:	0001570b 	.word	0x0001570b
   11af0:	00017c93 	.word	0x00017c93
   11af4:	20001202 	.word	0x20001202

00011af8 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   11af8:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   11afa:	2001      	movs	r0, #1
   11afc:	f7ff ff66 	bl	119cc <ll_rl_rpa_update>
   11b00:	4b03      	ldr	r3, [pc, #12]	; (11b10 <rpa_timeout+0x18>)
   11b02:	4904      	ldr	r1, [pc, #16]	; (11b14 <rpa_timeout+0x1c>)
   11b04:	681a      	ldr	r2, [r3, #0]
   11b06:	4804      	ldr	r0, [pc, #16]	; (11b18 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   11b08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11b0c:	f002 bcd2 	b.w	144b4 <k_delayed_work_submit_to_queue>
   11b10:	2000194c 	.word	0x2000194c
   11b14:	20001924 	.word	0x20001924
   11b18:	20001990 	.word	0x20001990

00011b1c <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   11b1c:	4b07      	ldr	r3, [pc, #28]	; (11b3c <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   11b1e:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   11b20:	b130      	cbz	r0, 11b30 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   11b22:	b14b      	cbz	r3, 11b38 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   11b24:	4b06      	ldr	r3, [pc, #24]	; (11b40 <ll_adv_scan_state_cb+0x24>)
   11b26:	4907      	ldr	r1, [pc, #28]	; (11b44 <ll_adv_scan_state_cb+0x28>)
   11b28:	681a      	ldr	r2, [r3, #0]
   11b2a:	4807      	ldr	r0, [pc, #28]	; (11b48 <ll_adv_scan_state_cb+0x2c>)
   11b2c:	f002 bcc2 	b.w	144b4 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   11b30:	b113      	cbz	r3, 11b38 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   11b32:	4804      	ldr	r0, [pc, #16]	; (11b44 <ll_adv_scan_state_cb+0x28>)
   11b34:	f002 bc5a 	b.w	143ec <k_delayed_work_cancel>
   11b38:	4770      	bx	lr
   11b3a:	bf00      	nop
   11b3c:	200013fc 	.word	0x200013fc
   11b40:	2000194c 	.word	0x2000194c
   11b44:	20001924 	.word	0x20001924
   11b48:	20001990 	.word	0x20001990

00011b4c <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   11b4c:	2008      	movs	r0, #8
   11b4e:	4770      	bx	lr

00011b50 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   11b50:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   11b52:	f7ff fc3d 	bl	113d0 <rl_access_check.constprop.1>
   11b56:	b178      	cbz	r0, 11b78 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   11b58:	4908      	ldr	r1, [pc, #32]	; (11b7c <ll_rl_clear+0x2c>)
   11b5a:	2300      	movs	r3, #0
   11b5c:	2428      	movs	r4, #40	; 0x28
   11b5e:	fb04 f203 	mul.w	r2, r4, r3
   11b62:	3301      	adds	r3, #1
   11b64:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11b66:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   11b68:	f36f 0000 	bfc	r0, #0, #1
   11b6c:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11b6e:	d1f6      	bne.n	11b5e <ll_rl_clear+0xe>
	peer_irk_count = 0;
   11b70:	4b03      	ldr	r3, [pc, #12]	; (11b80 <ll_rl_clear+0x30>)
   11b72:	2000      	movs	r0, #0
   11b74:	7018      	strb	r0, [r3, #0]
   11b76:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11b78:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   11b7a:	bd10      	pop	{r4, pc}
   11b7c:	200012bc 	.word	0x200012bc
   11b80:	20001232 	.word	0x20001232

00011b84 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   11b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b88:	b085      	sub	sp, #20
   11b8a:	4607      	mov	r7, r0
   11b8c:	4689      	mov	r9, r1
   11b8e:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   11b90:	f7ff fc1e 	bl	113d0 <rl_access_check.constprop.1>
   11b94:	2800      	cmp	r0, #0
   11b96:	f000 8086 	beq.w	11ca6 <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   11b9a:	f107 0801 	add.w	r8, r7, #1
   11b9e:	f10d 020f 	add.w	r2, sp, #15
   11ba2:	4641      	mov	r1, r8
   11ba4:	7838      	ldrb	r0, [r7, #0]
   11ba6:	f7ff fdaf 	bl	11708 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   11baa:	2807      	cmp	r0, #7
   11bac:	d97d      	bls.n	11caa <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   11bae:	f89d 500f 	ldrb.w	r5, [sp, #15]
   11bb2:	2d07      	cmp	r5, #7
   11bb4:	d87b      	bhi.n	11cae <ll_rl_add+0x12a>
   11bb6:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   11bba:	4c3e      	ldr	r4, [pc, #248]	; (11cb4 <ll_rl_add+0x130>)
   11bbc:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   11bc0:	2628      	movs	r6, #40	; 0x28
   11bc2:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   11bc4:	f10b 0001 	add.w	r0, fp, #1
   11bc8:	2206      	movs	r2, #6
   11bca:	4641      	mov	r1, r8
   11bcc:	4420      	add	r0, r4
   11bce:	f7f0 f815 	bl	1bfc <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   11bd2:	7839      	ldrb	r1, [r7, #0]
   11bd4:	5da3      	ldrb	r3, [r4, r6]
   11bd6:	19a2      	adds	r2, r4, r6
   11bd8:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11bdc:	4648      	mov	r0, r9
   11bde:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   11be0:	9201      	str	r2, [sp, #4]
   11be2:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11be4:	f7f5 fa21 	bl	702a <mem_nz>
   11be8:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11bea:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11bec:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11bf0:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11bf2:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11bf4:	f7f5 fa19 	bl	702a <mem_nz>
   11bf8:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   11bfa:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11bfc:	f000 0001 	and.w	r0, r0, #1
   11c00:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   11c04:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11c08:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   11c0a:	d138      	bne.n	11c7e <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   11c0c:	b158      	cbz	r0, 11c26 <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   11c0e:	f10b 0007 	add.w	r0, fp, #7
   11c12:	2210      	movs	r2, #16
   11c14:	4651      	mov	r1, sl
   11c16:	4420      	add	r0, r4
   11c18:	f7ef fff0 	bl	1bfc <memcpy>
		rl[i].local_rpa = NULL;
   11c1c:	2328      	movs	r3, #40	; 0x28
   11c1e:	fb03 4305 	mla	r3, r3, r5, r4
   11c22:	2200      	movs	r2, #0
   11c24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   11c26:	2628      	movs	r6, #40	; 0x28
   11c28:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   11c2a:	f10b 0018 	add.w	r0, fp, #24
   11c2e:	2206      	movs	r2, #6
   11c30:	2100      	movs	r1, #0
   11c32:	4420      	add	r0, r4
   11c34:	f7f0 f80e 	bl	1c54 <memset>
	rl[i].rpas_ready = 0;
   11c38:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   11c3a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   11c3e:	f36f 1304 	bfc	r3, #4, #1
   11c42:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   11c44:	2200      	movs	r2, #0
   11c46:	4641      	mov	r1, r8
   11c48:	7838      	ldrb	r0, [r7, #0]
   11c4a:	f7ff fb4f 	bl	112ec <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   11c4e:	2807      	cmp	r0, #7
   11c50:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   11c52:	bf9d      	ittte	ls
   11c54:	4a18      	ldrls	r2, [pc, #96]	; (11cb8 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   11c56:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   11c5a:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   11c5e:	f36f 1345 	bfchi	r3, #5, #1
   11c62:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   11c64:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   11c68:	bf98      	it	ls
   11c6a:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   11c6c:	435d      	muls	r5, r3

	return 0;
   11c6e:	2000      	movs	r0, #0
	rl[i].taken = 1;
   11c70:	5d63      	ldrb	r3, [r4, r5]
   11c72:	f043 0301 	orr.w	r3, r3, #1
   11c76:	5563      	strb	r3, [r4, r5]
}
   11c78:	b005      	add	sp, #20
   11c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   11c7e:	4b0f      	ldr	r3, [pc, #60]	; (11cbc <ll_rl_add+0x138>)
   11c80:	7819      	ldrb	r1, [r3, #0]
   11c82:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   11c84:	4a0e      	ldr	r2, [pc, #56]	; (11cc0 <ll_rl_add+0x13c>)
   11c86:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   11c88:	1c4a      	adds	r2, r1, #1
   11c8a:	701a      	strb	r2, [r3, #0]
   11c8c:	4b0d      	ldr	r3, [pc, #52]	; (11cc4 <ll_rl_add+0x140>)
   11c8e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   11c92:	f109 0210 	add.w	r2, r9, #16
   11c96:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   11c98:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   11c9c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   11ca0:	454a      	cmp	r2, r9
   11ca2:	d1f9      	bne.n	11c98 <ll_rl_add+0x114>
   11ca4:	e7b2      	b.n	11c0c <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11ca6:	200c      	movs	r0, #12
   11ca8:	e7e6      	b.n	11c78 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   11caa:	2012      	movs	r0, #18
   11cac:	e7e4      	b.n	11c78 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11cae:	2007      	movs	r0, #7
   11cb0:	e7e2      	b.n	11c78 <ll_rl_add+0xf4>
   11cb2:	bf00      	nop
   11cb4:	200012bc 	.word	0x200012bc
   11cb8:	2000142f 	.word	0x2000142f
   11cbc:	20001232 	.word	0x20001232
   11cc0:	20001233 	.word	0x20001233
   11cc4:	2000123b 	.word	0x2000123b

00011cc8 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   11cc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ccc:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   11cce:	f7ff fb7f 	bl	113d0 <rl_access_check.constprop.1>
   11cd2:	2800      	cmp	r0, #0
   11cd4:	d053      	beq.n	11d7e <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11cd6:	f109 0a01 	add.w	sl, r9, #1
   11cda:	2200      	movs	r2, #0
   11cdc:	4651      	mov	r1, sl
   11cde:	f899 0000 	ldrb.w	r0, [r9]
   11ce2:	f7ff fd11 	bl	11708 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11ce6:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11ce8:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   11cea:	d84b      	bhi.n	11d84 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   11cec:	f04f 0b28 	mov.w	fp, #40	; 0x28
   11cf0:	4c26      	ldr	r4, [pc, #152]	; (11d8c <ll_rl_remove+0xc4>)
   11cf2:	fb0b f300 	mul.w	r3, fp, r0
   11cf6:	18e2      	adds	r2, r4, r3
   11cf8:	5ce3      	ldrb	r3, [r4, r3]
   11cfa:	075b      	lsls	r3, r3, #29
   11cfc:	d524      	bpl.n	11d48 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   11cfe:	4e24      	ldr	r6, [pc, #144]	; (11d90 <ll_rl_remove+0xc8>)
   11d00:	7835      	ldrb	r5, [r6, #0]
   11d02:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   11d04:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   11d08:	d01b      	beq.n	11d42 <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   11d0a:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   11d0c:	42af      	cmp	r7, r5
   11d0e:	d018      	beq.n	11d42 <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   11d10:	4820      	ldr	r0, [pc, #128]	; (11d94 <ll_rl_remove+0xcc>)
   11d12:	2210      	movs	r2, #16
   11d14:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   11d18:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   11d1c:	f7ef ff6e 	bl	1bfc <memcpy>
   11d20:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   11d22:	fb0b f103 	mul.w	r1, fp, r3
   11d26:	1862      	adds	r2, r4, r1
   11d28:	5c61      	ldrb	r1, [r4, r1]
   11d2a:	f011 0f01 	tst.w	r1, #1
   11d2e:	b2d8      	uxtb	r0, r3
   11d30:	d021      	beq.n	11d76 <ll_rl_remove+0xae>
   11d32:	0749      	lsls	r1, r1, #29
   11d34:	d51f      	bpl.n	11d76 <ll_rl_remove+0xae>
   11d36:	7dd1      	ldrb	r1, [r2, #23]
   11d38:	42a9      	cmp	r1, r5
   11d3a:	d11c      	bne.n	11d76 <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   11d3c:	4b16      	ldr	r3, [pc, #88]	; (11d98 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   11d3e:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   11d40:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   11d42:	7833      	ldrb	r3, [r6, #0]
   11d44:	3b01      	subs	r3, #1
   11d46:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   11d48:	2200      	movs	r2, #0
   11d4a:	4651      	mov	r1, sl
   11d4c:	f899 0000 	ldrb.w	r0, [r9]
   11d50:	f7ff facc 	bl	112ec <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   11d54:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   11d56:	bf9f      	itttt	ls
   11d58:	4b10      	ldrls	r3, [pc, #64]	; (11d9c <ll_rl_remove+0xd4>)
   11d5a:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   11d5e:	23ff      	movls	r3, #255	; 0xff
   11d60:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   11d62:	2028      	movs	r0, #40	; 0x28
   11d64:	fb00 f008 	mul.w	r0, r0, r8
   11d68:	5c23      	ldrb	r3, [r4, r0]
   11d6a:	f36f 0300 	bfc	r3, #0, #1
   11d6e:	5423      	strb	r3, [r4, r0]
		return 0;
   11d70:	2000      	movs	r0, #0
   11d72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d76:	3301      	adds	r3, #1
				for (k = 0;
   11d78:	2b08      	cmp	r3, #8
   11d7a:	d1d2      	bne.n	11d22 <ll_rl_remove+0x5a>
   11d7c:	e7e1      	b.n	11d42 <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11d7e:	200c      	movs	r0, #12
   11d80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11d84:	2002      	movs	r0, #2
}
   11d86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d8a:	bf00      	nop
   11d8c:	200012bc 	.word	0x200012bc
   11d90:	20001232 	.word	0x20001232
   11d94:	2000123b 	.word	0x2000123b
   11d98:	20001233 	.word	0x20001233
   11d9c:	2000142f 	.word	0x2000142f

00011da0 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   11da0:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   11da2:	795c      	ldrb	r4, [r3, #5]
   11da4:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   11da8:	2c40      	cmp	r4, #64	; 0x40
{
   11daa:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   11dac:	d117      	bne.n	11dde <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   11dae:	b119      	cbz	r1, 11db8 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   11db0:	2200      	movs	r2, #0
   11db2:	f7ff fca9 	bl	11708 <ll_rl_find>
   11db6:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   11db8:	2a07      	cmp	r2, #7
   11dba:	d810      	bhi.n	11dde <ll_rl_crpa_set+0x3e>
   11dbc:	2128      	movs	r1, #40	; 0x28
   11dbe:	4c08      	ldr	r4, [pc, #32]	; (11de0 <ll_rl_crpa_set+0x40>)
   11dc0:	fb01 f302 	mul.w	r3, r1, r2
   11dc4:	5ce3      	ldrb	r3, [r4, r3]
   11dc6:	07db      	lsls	r3, r3, #31
   11dc8:	d509      	bpl.n	11dde <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   11dca:	2018      	movs	r0, #24
   11dcc:	fb11 0002 	smlabb	r0, r1, r2, r0
   11dd0:	4420      	add	r0, r4
   11dd2:	4629      	mov	r1, r5
   11dd4:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   11dd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   11dda:	f7ef bf0f 	b.w	1bfc <memcpy>
   11dde:	bd70      	pop	{r4, r5, r6, pc}
   11de0:	200012bc 	.word	0x200012bc

00011de4 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   11de4:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11de6:	2200      	movs	r2, #0
{
   11de8:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11dea:	1c41      	adds	r1, r0, #1
   11dec:	7800      	ldrb	r0, [r0, #0]
   11dee:	f7ff fc8b 	bl	11708 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   11df2:	2807      	cmp	r0, #7
   11df4:	d901      	bls.n	11dfa <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11df6:	2002      	movs	r0, #2
   11df8:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   11dfa:	2428      	movs	r4, #40	; 0x28
   11dfc:	2318      	movs	r3, #24
   11dfe:	fb14 3000 	smlabb	r0, r4, r0, r3
   11e02:	4c07      	ldr	r4, [pc, #28]	; (11e20 <ll_rl_crpa_get+0x3c>)
   11e04:	4404      	add	r4, r0
   11e06:	2106      	movs	r1, #6
   11e08:	4620      	mov	r0, r4
   11e0a:	f7f5 f90e 	bl	702a <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   11e0e:	2800      	cmp	r0, #0
   11e10:	d0f1      	beq.n	11df6 <ll_rl_crpa_get+0x12>
   11e12:	2206      	movs	r2, #6
   11e14:	4621      	mov	r1, r4
   11e16:	4628      	mov	r0, r5
   11e18:	f7ef fef0 	bl	1bfc <memcpy>
			return 0;
   11e1c:	2000      	movs	r0, #0
}
   11e1e:	bd38      	pop	{r3, r4, r5, pc}
   11e20:	200012bc 	.word	0x200012bc

00011e24 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   11e24:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11e26:	2200      	movs	r2, #0
{
   11e28:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11e2a:	1c41      	adds	r1, r0, #1
   11e2c:	7800      	ldrb	r0, [r0, #0]
   11e2e:	f7ff fc6b 	bl	11708 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11e32:	2807      	cmp	r0, #7
   11e34:	d80a      	bhi.n	11e4c <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   11e36:	4b06      	ldr	r3, [pc, #24]	; (11e50 <ll_rl_lrpa_get+0x2c>)
   11e38:	2228      	movs	r2, #40	; 0x28
   11e3a:	fb02 3000 	mla	r0, r2, r0, r3
   11e3e:	2206      	movs	r2, #6
   11e40:	6a41      	ldr	r1, [r0, #36]	; 0x24
   11e42:	4620      	mov	r0, r4
   11e44:	f7ef feda 	bl	1bfc <memcpy>
		return 0;
   11e48:	2000      	movs	r0, #0
   11e4a:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11e4c:	2002      	movs	r0, #2
}
   11e4e:	bd10      	pop	{r4, pc}
   11e50:	200012bc 	.word	0x200012bc

00011e54 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   11e54:	b510      	push	{r4, lr}
   11e56:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   11e58:	f7ff faba 	bl	113d0 <rl_access_check.constprop.1>
   11e5c:	b140      	cbz	r0, 11e70 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   11e5e:	b11c      	cbz	r4, 11e68 <ll_rl_enable+0x14>
   11e60:	2c01      	cmp	r4, #1
   11e62:	d001      	beq.n	11e68 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   11e64:	2012      	movs	r0, #18
	}

	return 0;
}
   11e66:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   11e68:	4b02      	ldr	r3, [pc, #8]	; (11e74 <ll_rl_enable+0x20>)
   11e6a:	701c      	strb	r4, [r3, #0]
	return 0;
   11e6c:	2000      	movs	r0, #0
		break;
   11e6e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11e70:	200c      	movs	r0, #12
   11e72:	bd10      	pop	{r4, pc}
   11e74:	200013fc 	.word	0x200013fc

00011e78 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   11e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11e7c:	4358      	muls	r0, r3
   11e7e:	4b01      	ldr	r3, [pc, #4]	; (11e84 <ll_rl_timeout_set+0xc>)
   11e80:	6018      	str	r0, [r3, #0]
   11e82:	4770      	bx	lr
   11e84:	2000194c 	.word	0x2000194c

00011e88 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   11e88:	b538      	push	{r3, r4, r5, lr}
   11e8a:	4605      	mov	r5, r0
   11e8c:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   11e8e:	f7ff fa9f 	bl	113d0 <rl_access_check.constprop.1>
   11e92:	b1d8      	cbz	r0, 11ecc <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11e94:	2200      	movs	r2, #0
   11e96:	1c69      	adds	r1, r5, #1
   11e98:	7828      	ldrb	r0, [r5, #0]
   11e9a:	f7ff fc35 	bl	11708 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11e9e:	2807      	cmp	r0, #7
   11ea0:	d816      	bhi.n	11ed0 <ll_priv_mode_set+0x48>
		switch (mode) {
   11ea2:	b11c      	cbz	r4, 11eac <ll_priv_mode_set+0x24>
   11ea4:	2c01      	cmp	r4, #1
   11ea6:	d00a      	beq.n	11ebe <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   11ea8:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   11eaa:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   11eac:	2328      	movs	r3, #40	; 0x28
   11eae:	4a09      	ldr	r2, [pc, #36]	; (11ed4 <ll_priv_mode_set+0x4c>)
   11eb0:	4358      	muls	r0, r3
   11eb2:	5c13      	ldrb	r3, [r2, r0]
   11eb4:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   11eb8:	5413      	strb	r3, [r2, r0]
	return 0;
   11eba:	2000      	movs	r0, #0
			break;
   11ebc:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   11ebe:	2328      	movs	r3, #40	; 0x28
   11ec0:	4a04      	ldr	r2, [pc, #16]	; (11ed4 <ll_priv_mode_set+0x4c>)
   11ec2:	4358      	muls	r0, r3
   11ec4:	5c13      	ldrb	r3, [r2, r0]
   11ec6:	f043 0310 	orr.w	r3, r3, #16
   11eca:	e7f5      	b.n	11eb8 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11ecc:	200c      	movs	r0, #12
   11ece:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11ed0:	2002      	movs	r0, #2
   11ed2:	bd38      	pop	{r3, r4, r5, pc}
   11ed4:	200012bc 	.word	0x200012bc

00011ed8 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   11ed8:	4a19      	ldr	r2, [pc, #100]	; (11f40 <ll_filter_reset+0x68>)
   11eda:	2300      	movs	r3, #0
{
   11edc:	b430      	push	{r4, r5}
	wl_anon = 0;
   11ede:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   11ee0:	4a18      	ldr	r2, [pc, #96]	; (11f44 <ll_filter_reset+0x6c>)
   11ee2:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   11ee6:	f36f 0100 	bfc	r1, #0, #1
   11eea:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   11eee:	3301      	adds	r3, #1
   11ef0:	2b08      	cmp	r3, #8
   11ef2:	d1f6      	bne.n	11ee2 <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   11ef4:	4a14      	ldr	r2, [pc, #80]	; (11f48 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11ef6:	4915      	ldr	r1, [pc, #84]	; (11f4c <ll_filter_reset+0x74>)
	rl_enable = 0;
   11ef8:	2300      	movs	r3, #0
   11efa:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11efc:	4a14      	ldr	r2, [pc, #80]	; (11f50 <ll_filter_reset+0x78>)
   11efe:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   11f00:	4a14      	ldr	r2, [pc, #80]	; (11f54 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   11f02:	4915      	ldr	r1, [pc, #84]	; (11f58 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   11f04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11f08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11f0c:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   11f10:	2528      	movs	r5, #40	; 0x28
   11f12:	fb05 f203 	mul.w	r2, r5, r3
   11f16:	3301      	adds	r3, #1
   11f18:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11f1a:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   11f1c:	f36f 0400 	bfc	r4, #0, #1
   11f20:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11f22:	d1f6      	bne.n	11f12 <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   11f24:	4b0d      	ldr	r3, [pc, #52]	; (11f5c <ll_filter_reset+0x84>)
   11f26:	2200      	movs	r2, #0
   11f28:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   11f2a:	b120      	cbz	r0, 11f36 <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   11f2c:	490c      	ldr	r1, [pc, #48]	; (11f60 <ll_filter_reset+0x88>)
   11f2e:	480d      	ldr	r0, [pc, #52]	; (11f64 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   11f30:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   11f32:	f002 ba4b 	b.w	143cc <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   11f36:	480b      	ldr	r0, [pc, #44]	; (11f64 <ll_filter_reset+0x8c>)
}
   11f38:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   11f3a:	f002 ba57 	b.w	143ec <k_delayed_work_cancel>
   11f3e:	bf00      	nop
   11f40:	20001920 	.word	0x20001920
   11f44:	2000142f 	.word	0x2000142f
   11f48:	200013fc 	.word	0x200013fc
   11f4c:	000dbba0 	.word	0x000dbba0
   11f50:	2000194c 	.word	0x2000194c
   11f54:	20001918 	.word	0x20001918
   11f58:	200012bc 	.word	0x200012bc
   11f5c:	20001232 	.word	0x20001232
   11f60:	00011af9 	.word	0x00011af9
   11f64:	20001924 	.word	0x20001924

00011f68 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   11f68:	4b05      	ldr	r3, [pc, #20]	; (11f80 <cntr_init+0x18>)
   11f6a:	2200      	movs	r2, #0
   11f6c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   11f70:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   11f74:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   11f78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   11f7c:	4770      	bx	lr
   11f7e:	bf00      	nop
   11f80:	4000b000 	.word	0x4000b000

00011f84 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   11f84:	4a04      	ldr	r2, [pc, #16]	; (11f98 <cntr_start+0x14>)
   11f86:	7813      	ldrb	r3, [r2, #0]
   11f88:	1c59      	adds	r1, r3, #1
   11f8a:	7011      	strb	r1, [r2, #0]
   11f8c:	2001      	movs	r0, #1
   11f8e:	b913      	cbnz	r3, 11f96 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   11f90:	4a02      	ldr	r2, [pc, #8]	; (11f9c <cntr_start+0x18>)
   11f92:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   11f94:	4618      	mov	r0, r3
}
   11f96:	4770      	bx	lr
   11f98:	200014a1 	.word	0x200014a1
   11f9c:	4000b000 	.word	0x4000b000

00011fa0 <cntr_stop>:

u32_t cntr_stop(void)
{
   11fa0:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
   11fa2:	4b0f      	ldr	r3, [pc, #60]	; (11fe0 <cntr_stop+0x40>)
   11fa4:	7818      	ldrb	r0, [r3, #0]
   11fa6:	b970      	cbnz	r0, 11fc6 <cntr_stop+0x26>
   11fa8:	4b0e      	ldr	r3, [pc, #56]	; (11fe4 <cntr_stop+0x44>)
   11faa:	9301      	str	r3, [sp, #4]
   11fac:	9300      	str	r3, [sp, #0]
   11fae:	4a0e      	ldr	r2, [pc, #56]	; (11fe8 <cntr_stop+0x48>)
   11fb0:	4b0e      	ldr	r3, [pc, #56]	; (11fec <cntr_stop+0x4c>)
   11fb2:	490f      	ldr	r1, [pc, #60]	; (11ff0 <cntr_stop+0x50>)
   11fb4:	480f      	ldr	r0, [pc, #60]	; (11ff4 <cntr_stop+0x54>)
   11fb6:	f7ee ffe9 	bl	f8c <printk>
   11fba:	4040      	eors	r0, r0
   11fbc:	f380 8811 	msr	BASEPRI, r0
   11fc0:	f04f 0004 	mov.w	r0, #4
   11fc4:	df02      	svc	2

	if (--_refcount) {
   11fc6:	3801      	subs	r0, #1
   11fc8:	b2c0      	uxtb	r0, r0
   11fca:	7018      	strb	r0, [r3, #0]
   11fcc:	2301      	movs	r3, #1
   11fce:	b920      	cbnz	r0, 11fda <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   11fd0:	4a09      	ldr	r2, [pc, #36]	; (11ff8 <cntr_stop+0x58>)
   11fd2:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   11fd4:	b003      	add	sp, #12
   11fd6:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
   11fda:	4618      	mov	r0, r3
   11fdc:	e7fa      	b.n	11fd4 <cntr_stop+0x34>
   11fde:	bf00      	nop
   11fe0:	200014a1 	.word	0x200014a1
   11fe4:	0001496d 	.word	0x0001496d
   11fe8:	000156bc 	.word	0x000156bc
   11fec:	00018017 	.word	0x00018017
   11ff0:	0001570b 	.word	0x0001570b
   11ff4:	00018021 	.word	0x00018021
   11ff8:	4000b000 	.word	0x4000b000

00011ffc <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   11ffc:	4b01      	ldr	r3, [pc, #4]	; (12004 <cntr_cnt_get+0x8>)
   11ffe:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   12002:	4770      	bx	lr
   12004:	4000b000 	.word	0x4000b000

00012008 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   12008:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1200c:	4b01      	ldr	r3, [pc, #4]	; (12014 <cntr_cmp_set+0xc>)
   1200e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   12012:	4770      	bx	lr
   12014:	4000b000 	.word	0x4000b000

00012018 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   12018:	4b11      	ldr	r3, [pc, #68]	; (12060 <do_ecb+0x48>)
{
   1201a:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   1201c:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1201e:	2500      	movs	r5, #0
   12020:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   12022:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   12024:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   12028:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1202c:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   12030:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   12032:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   12036:	b934      	cbnz	r4, 12046 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12038:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1203c:	b91c      	cbnz	r4, 12046 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1203e:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12042:	2c00      	cmp	r4, #0
   12044:	d1f5      	bne.n	12032 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   12046:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   12048:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   1204c:	2c00      	cmp	r4, #0
   1204e:	d1e8      	bne.n	12022 <do_ecb+0xa>
   12050:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   12054:	2e00      	cmp	r6, #0
   12056:	d0e4      	beq.n	12022 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   12058:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   1205c:	bd70      	pop	{r4, r5, r6, pc}
   1205e:	bf00      	nop
   12060:	4000e000 	.word	0x4000e000

00012064 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   12064:	b570      	push	{r4, r5, r6, lr}
   12066:	b08c      	sub	sp, #48	; 0x30
   12068:	460e      	mov	r6, r1
   1206a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1206c:	4601      	mov	r1, r0
   1206e:	2210      	movs	r2, #16
   12070:	4668      	mov	r0, sp
{
   12072:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12074:	f7f4 ffca 	bl	700c <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   12078:	2210      	movs	r2, #16
   1207a:	eb0d 0002 	add.w	r0, sp, r2
   1207e:	4631      	mov	r1, r6
   12080:	f7f4 ffc4 	bl	700c <mem_rcopy>

	do_ecb(&ecb);
   12084:	4668      	mov	r0, sp
   12086:	f7ff ffc7 	bl	12018 <do_ecb>

	if (cipher_text_le) {
   1208a:	b125      	cbz	r5, 12096 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1208c:	2210      	movs	r2, #16
   1208e:	a908      	add	r1, sp, #32
   12090:	4628      	mov	r0, r5
   12092:	f7f4 ffbb 	bl	700c <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   12096:	b124      	cbz	r4, 120a2 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   12098:	2210      	movs	r2, #16
   1209a:	a908      	add	r1, sp, #32
   1209c:	4620      	mov	r0, r4
   1209e:	f7ef fdad 	bl	1bfc <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   120a2:	b00c      	add	sp, #48	; 0x30
   120a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000120a8 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   120a8:	4b07      	ldr	r3, [pc, #28]	; (120c8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   120aa:	4a08      	ldr	r2, [pc, #32]	; (120cc <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   120ac:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   120b0:	4907      	ldr	r1, [pc, #28]	; (120d0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   120b2:	4a08      	ldr	r2, [pc, #32]	; (120d4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   120b4:	2800      	cmp	r0, #0
   120b6:	bf14      	ite	ne
   120b8:	4610      	movne	r0, r2
   120ba:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   120bc:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   120be:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   120c2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   120c6:	4770      	bx	lr
   120c8:	4001f000 	.word	0x4001f000
   120cc:	40008140 	.word	0x40008140
   120d0:	40001004 	.word	0x40001004
   120d4:	40001000 	.word	0x40001000

000120d8 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   120d8:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   120da:	4e2c      	ldr	r6, [pc, #176]	; (1218c <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   120dc:	4f2c      	ldr	r7, [pc, #176]	; (12190 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   120de:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   120e0:	4b2c      	ldr	r3, [pc, #176]	; (12194 <sw_switch.isra.9+0xbc>)
   120e2:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   120e6:	b22b      	sxth	r3, r5
   120e8:	00dc      	lsls	r4, r3, #3
   120ea:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   120ee:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   120f2:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   120f6:	f105 040b 	add.w	r4, r5, #11
   120fa:	b2e4      	uxtb	r4, r4
   120fc:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   120fe:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   12102:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   12106:	3fc0      	subs	r7, #192	; 0xc0
   12108:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1210c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   12110:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   12114:	2800      	cmp	r0, #0
   12116:	d034      	beq.n	12182 <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   12118:	f24a 075a 	movw	r7, #41050	; 0xa05a
   1211c:	f649 4040 	movw	r0, #40000	; 0x9c40
   12120:	2a02      	cmp	r2, #2
   12122:	bf0c      	ite	eq
   12124:	4602      	moveq	r2, r0
   12126:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   12128:	f242 47b8 	movw	r7, #9400	; 0x24b8
   1212c:	f241 504a 	movw	r0, #5450	; 0x154a
   12130:	2902      	cmp	r1, #2
   12132:	bf18      	it	ne
   12134:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   12136:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   1213a:	4401      	add	r1, r0
   1213c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12140:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   12144:	4a14      	ldr	r2, [pc, #80]	; (12198 <sw_switch.isra.9+0xc0>)
   12146:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   1214a:	009b      	lsls	r3, r3, #2
   1214c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12150:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   12154:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   12158:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   1215a:	bf8b      	itete	hi
   1215c:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   12160:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   12162:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   12164:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   12168:	bf88      	it	hi
   1216a:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   1216e:	4b08      	ldr	r3, [pc, #32]	; (12190 <sw_switch.isra.9+0xb8>)
   12170:	f44f 6290 	mov.w	r2, #1152	; 0x480
   12174:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   12178:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   1217a:	f003 0301 	and.w	r3, r3, #1
   1217e:	7033      	strb	r3, [r6, #0]
   12180:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   12182:	4a06      	ldr	r2, [pc, #24]	; (1219c <sw_switch.isra.9+0xc4>)
   12184:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   12188:	212d      	movs	r1, #45	; 0x2d
   1218a:	e7de      	b.n	1214a <sw_switch.isra.9+0x72>
   1218c:	200016c4 	.word	0x200016c4
   12190:	4001f000 	.word	0x4001f000
   12194:	4000110c 	.word	0x4000110c
   12198:	40001000 	.word	0x40001000
   1219c:	40001004 	.word	0x40001004

000121a0 <isr_radio>:
	if (sfp_radio_isr) {
   121a0:	4b02      	ldr	r3, [pc, #8]	; (121ac <isr_radio+0xc>)
   121a2:	681b      	ldr	r3, [r3, #0]
   121a4:	b103      	cbz	r3, 121a8 <isr_radio+0x8>
		sfp_radio_isr();
   121a6:	4718      	bx	r3
   121a8:	4770      	bx	lr
   121aa:	bf00      	nop
   121ac:	200016c0 	.word	0x200016c0

000121b0 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   121b0:	4b06      	ldr	r3, [pc, #24]	; (121cc <radio_isr_set+0x1c>)
   121b2:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   121b4:	4b06      	ldr	r3, [pc, #24]	; (121d0 <radio_isr_set+0x20>)
   121b6:	2210      	movs	r2, #16
   121b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   121bc:	4b05      	ldr	r3, [pc, #20]	; (121d4 <radio_isr_set+0x24>)
   121be:	2202      	movs	r2, #2
   121c0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   121c4:	2001      	movs	r0, #1
   121c6:	f7ef bb47 	b.w	1858 <_arch_irq_enable>
   121ca:	bf00      	nop
   121cc:	200016c0 	.word	0x200016c0
   121d0:	40001000 	.word	0x40001000
   121d4:	e000e100 	.word	0xe000e100

000121d8 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   121d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   121dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   121e0:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   121e2:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   121e6:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   121ea:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   121ee:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   121f2:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   121f6:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   121fa:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   121fe:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   12202:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   12206:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1220a:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1220e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   12212:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   12216:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   1221a:	4770      	bx	lr

0001221c <radio_reset>:
{
   1221c:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1221e:	2001      	movs	r0, #1
   12220:	f7ef fb2a 	bl	1878 <_arch_irq_disable>
	NRF_RADIO->POWER =
   12224:	4b08      	ldr	r3, [pc, #32]	; (12248 <radio_reset+0x2c>)
   12226:	2200      	movs	r2, #0
   12228:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   1222c:	2201      	movs	r2, #1
   1222e:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   12232:	4a06      	ldr	r2, [pc, #24]	; (1224c <radio_reset+0x30>)
   12234:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   12236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1223a:	f023 0301 	bic.w	r3, r3, #1
   1223e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   12242:	6013      	str	r3, [r2, #0]
   12244:	bd08      	pop	{r3, pc}
   12246:	bf00      	nop
   12248:	40001000 	.word	0x40001000
   1224c:	40001774 	.word	0x40001774

00012250 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   12250:	4b06      	ldr	r3, [pc, #24]	; (1226c <radio_phy_set+0x1c>)
	switch (phy) {
   12252:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   12254:	bf0c      	ite	eq
   12256:	2204      	moveq	r2, #4
   12258:	2203      	movne	r2, #3
   1225a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1225e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   12262:	f042 0201 	orr.w	r2, r2, #1
   12266:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   1226a:	4770      	bx	lr
   1226c:	40001000 	.word	0x40001000

00012270 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   12270:	4b01      	ldr	r3, [pc, #4]	; (12278 <radio_tx_power_set+0x8>)
   12272:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   12276:	4770      	bx	lr
   12278:	40001000 	.word	0x40001000

0001227c <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1227c:	4b01      	ldr	r3, [pc, #4]	; (12284 <radio_freq_chan_set+0x8>)
   1227e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   12282:	4770      	bx	lr
   12284:	40001000 	.word	0x40001000

00012288 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   12288:	4b07      	ldr	r3, [pc, #28]	; (122a8 <radio_whiten_iv_set+0x20>)
   1228a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1228e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12292:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   12296:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1229a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1229e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   122a2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   122a6:	4770      	bx	lr
   122a8:	40001000 	.word	0x40001000

000122ac <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   122ac:	4a0a      	ldr	r2, [pc, #40]	; (122d8 <radio_aa_set+0x2c>)
   122ae:	2300      	movs	r3, #0
   122b0:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   122b4:	2301      	movs	r3, #1
   122b6:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   122ba:	78c3      	ldrb	r3, [r0, #3]
   122bc:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   122c0:	7843      	ldrb	r3, [r0, #1]
   122c2:	7881      	ldrb	r1, [r0, #2]
   122c4:	041b      	lsls	r3, r3, #16
   122c6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   122ca:	7801      	ldrb	r1, [r0, #0]
   122cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   122d0:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   122d4:	4770      	bx	lr
   122d6:	bf00      	nop
   122d8:	40001000 	.word	0x40001000

000122dc <radio_pkt_configure>:
	switch (phy) {
   122dc:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   122e0:	2b02      	cmp	r3, #2
{
   122e2:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   122e4:	bf0c      	ite	eq
   122e6:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   122ea:	2400      	movne	r4, #0
	if (dc) {
   122ec:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   122ee:	f1c0 0308 	rsb	r3, r0, #8
   122f2:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   122f6:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   122fa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   122fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   12302:	4a0b      	ldr	r2, [pc, #44]	; (12330 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   12304:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   12308:	bf48      	it	mi
   1230a:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   1230e:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   12310:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   12314:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   12318:	4b06      	ldr	r3, [pc, #24]	; (12334 <radio_pkt_configure+0x58>)
   1231a:	4003      	ands	r3, r0
   1231c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   12320:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   12324:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   12328:	4319      	orrs	r1, r3
   1232a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   1232e:	bd10      	pop	{r4, pc}
   12330:	40001000 	.word	0x40001000
   12334:	fef80000 	.word	0xfef80000

00012338 <radio_pkt_rx_set>:
   12338:	4b01      	ldr	r3, [pc, #4]	; (12340 <radio_pkt_rx_set+0x8>)
   1233a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1233e:	4770      	bx	lr
   12340:	40001000 	.word	0x40001000

00012344 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   12344:	4b01      	ldr	r3, [pc, #4]	; (1234c <radio_pkt_tx_set+0x8>)
   12346:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1234a:	4770      	bx	lr
   1234c:	40001000 	.word	0x40001000

00012350 <radio_tx_ready_delay_get>:
	switch (phy) {
   12350:	2802      	cmp	r0, #2
}
   12352:	bf0c      	ite	eq
   12354:	2028      	moveq	r0, #40	; 0x28
   12356:	2029      	movne	r0, #41	; 0x29
   12358:	4770      	bx	lr

0001235a <radio_tx_chain_delay_get>:
}
   1235a:	2001      	movs	r0, #1
   1235c:	4770      	bx	lr

0001235e <radio_rx_ready_delay_get>:
}
   1235e:	2029      	movs	r0, #41	; 0x29
   12360:	4770      	bx	lr

00012362 <radio_rx_chain_delay_get>:
	switch (phy) {
   12362:	2802      	cmp	r0, #2
}
   12364:	bf0c      	ite	eq
   12366:	2006      	moveq	r0, #6
   12368:	200a      	movne	r0, #10
   1236a:	4770      	bx	lr

0001236c <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   1236c:	4b01      	ldr	r3, [pc, #4]	; (12374 <radio_rx_enable+0x8>)
   1236e:	2201      	movs	r2, #1
   12370:	605a      	str	r2, [r3, #4]
   12372:	4770      	bx	lr
   12374:	40001000 	.word	0x40001000

00012378 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   12378:	4b01      	ldr	r3, [pc, #4]	; (12380 <radio_tx_enable+0x8>)
   1237a:	2201      	movs	r2, #1
   1237c:	601a      	str	r2, [r3, #0]
   1237e:	4770      	bx	lr
   12380:	40001000 	.word	0x40001000

00012384 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12384:	4a07      	ldr	r2, [pc, #28]	; (123a4 <radio_disable+0x20>)
   12386:	f44f 6390 	mov.w	r3, #1152	; 0x480
   1238a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   1238e:	2301      	movs	r3, #1
   12390:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   12392:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   12394:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   12398:	2100      	movs	r1, #0
   1239a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   1239e:	6113      	str	r3, [r2, #16]
   123a0:	4770      	bx	lr
   123a2:	bf00      	nop
   123a4:	4001f000 	.word	0x4001f000

000123a8 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   123a8:	4b04      	ldr	r3, [pc, #16]	; (123bc <radio_status_reset+0x14>)
   123aa:	2200      	movs	r2, #0
   123ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   123b0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   123b4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   123b8:	4770      	bx	lr
   123ba:	bf00      	nop
   123bc:	40001000 	.word	0x40001000

000123c0 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   123c0:	4b03      	ldr	r3, [pc, #12]	; (123d0 <radio_is_ready+0x10>)
   123c2:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   123c6:	3000      	adds	r0, #0
   123c8:	bf18      	it	ne
   123ca:	2001      	movne	r0, #1
   123cc:	4770      	bx	lr
   123ce:	bf00      	nop
   123d0:	40001000 	.word	0x40001000

000123d4 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   123d4:	4b03      	ldr	r3, [pc, #12]	; (123e4 <radio_is_done+0x10>)
   123d6:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   123da:	3000      	adds	r0, #0
   123dc:	bf18      	it	ne
   123de:	2001      	movne	r0, #1
   123e0:	4770      	bx	lr
   123e2:	bf00      	nop
   123e4:	40001000 	.word	0x40001000

000123e8 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   123e8:	4b03      	ldr	r3, [pc, #12]	; (123f8 <radio_is_idle+0x10>)
   123ea:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   123ee:	fab0 f080 	clz	r0, r0
   123f2:	0940      	lsrs	r0, r0, #5
   123f4:	4770      	bx	lr
   123f6:	bf00      	nop
   123f8:	40001000 	.word	0x40001000

000123fc <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   123fc:	4b04      	ldr	r3, [pc, #16]	; (12410 <radio_crc_configure+0x14>)
   123fe:	f240 1203 	movw	r2, #259	; 0x103
   12402:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   12406:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1240a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   1240e:	4770      	bx	lr
   12410:	40001000 	.word	0x40001000

00012414 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   12414:	4b03      	ldr	r3, [pc, #12]	; (12424 <radio_crc_is_valid+0x10>)
   12416:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1241a:	3000      	adds	r0, #0
   1241c:	bf18      	it	ne
   1241e:	2001      	movne	r0, #1
   12420:	4770      	bx	lr
   12422:	bf00      	nop
   12424:	40001000 	.word	0x40001000

00012428 <radio_pkt_empty_get>:
}
   12428:	4800      	ldr	r0, [pc, #0]	; (1242c <radio_pkt_empty_get+0x4>)
   1242a:	4770      	bx	lr
   1242c:	200015b4 	.word	0x200015b4

00012430 <radio_pkt_scratch_get>:
}
   12430:	4800      	ldr	r0, [pc, #0]	; (12434 <radio_pkt_scratch_get+0x4>)
   12432:	4770      	bx	lr
   12434:	200015b8 	.word	0x200015b8

00012438 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12438:	4b04      	ldr	r3, [pc, #16]	; (1244c <radio_switch_complete_and_rx+0x14>)
   1243a:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1243c:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1243e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   12442:	4602      	mov	r2, r0
   12444:	4608      	mov	r0, r1
   12446:	f7ff be47 	b.w	120d8 <sw_switch.isra.9>
   1244a:	bf00      	nop
   1244c:	40001000 	.word	0x40001000

00012450 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12450:	4b03      	ldr	r3, [pc, #12]	; (12460 <radio_switch_complete_and_tx+0x10>)
   12452:	2103      	movs	r1, #3
   12454:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   12458:	4601      	mov	r1, r0
   1245a:	2001      	movs	r0, #1
   1245c:	f7ff be3c 	b.w	120d8 <sw_switch.isra.9>
   12460:	40001000 	.word	0x40001000

00012464 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   12464:	4b05      	ldr	r3, [pc, #20]	; (1247c <radio_switch_complete_and_disable+0x18>)
   12466:	2203      	movs	r2, #3
   12468:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   1246c:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   12470:	f44f 6290 	mov.w	r2, #1152	; 0x480
   12474:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12478:	4770      	bx	lr
   1247a:	bf00      	nop
   1247c:	40001000 	.word	0x40001000

00012480 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   12480:	4a03      	ldr	r2, [pc, #12]	; (12490 <radio_rssi_measure+0x10>)
   12482:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   12486:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1248a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   1248e:	4770      	bx	lr
   12490:	40001000 	.word	0x40001000

00012494 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   12494:	4b01      	ldr	r3, [pc, #4]	; (1249c <radio_rssi_get+0x8>)
   12496:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1249a:	4770      	bx	lr
   1249c:	40001000 	.word	0x40001000

000124a0 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   124a0:	4b02      	ldr	r3, [pc, #8]	; (124ac <radio_rssi_status_reset+0xc>)
   124a2:	2200      	movs	r2, #0
   124a4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   124a8:	4770      	bx	lr
   124aa:	bf00      	nop
   124ac:	40001000 	.word	0x40001000

000124b0 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   124b0:	4b03      	ldr	r3, [pc, #12]	; (124c0 <radio_rssi_is_ready+0x10>)
   124b2:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   124b6:	3000      	adds	r0, #0
   124b8:	bf18      	it	ne
   124ba:	2001      	movne	r0, #1
   124bc:	4770      	bx	lr
   124be:	bf00      	nop
   124c0:	40001000 	.word	0x40001000

000124c4 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   124c4:	b530      	push	{r4, r5, lr}
   124c6:	2400      	movs	r4, #0
   124c8:	00a3      	lsls	r3, r4, #2
   124ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   124ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   124d2:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   124d4:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   124d8:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   124da:	8895      	ldrh	r5, [r2, #4]
   124dc:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   124e0:	2c08      	cmp	r4, #8
		bdaddr += 6;
   124e2:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   124e6:	d1ef      	bne.n	124c8 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   124e8:	4b02      	ldr	r3, [pc, #8]	; (124f4 <radio_filter_configure+0x30>)
   124ea:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   124ee:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   124f2:	bd30      	pop	{r4, r5, pc}
   124f4:	40001000 	.word	0x40001000

000124f8 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   124f8:	4a03      	ldr	r2, [pc, #12]	; (12508 <radio_filter_disable+0x10>)
   124fa:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   124fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12502:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   12506:	4770      	bx	lr
   12508:	40001000 	.word	0x40001000

0001250c <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1250c:	4b02      	ldr	r3, [pc, #8]	; (12518 <radio_filter_status_reset+0xc>)
   1250e:	2200      	movs	r2, #0
   12510:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   12514:	4770      	bx	lr
   12516:	bf00      	nop
   12518:	40001000 	.word	0x40001000

0001251c <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1251c:	4b03      	ldr	r3, [pc, #12]	; (1252c <radio_filter_has_match+0x10>)
   1251e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   12522:	3000      	adds	r0, #0
   12524:	bf18      	it	ne
   12526:	2001      	movne	r0, #1
   12528:	4770      	bx	lr
   1252a:	bf00      	nop
   1252c:	40001000 	.word	0x40001000

00012530 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   12530:	4b01      	ldr	r3, [pc, #4]	; (12538 <radio_filter_match_get+0x8>)
   12532:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   12536:	4770      	bx	lr
   12538:	40001000 	.word	0x40001000

0001253c <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   1253c:	4b04      	ldr	r3, [pc, #16]	; (12550 <radio_bc_configure+0x14>)
   1253e:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   12542:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   12546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1254a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   1254e:	4770      	bx	lr
   12550:	40001000 	.word	0x40001000

00012554 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   12554:	4b05      	ldr	r3, [pc, #20]	; (1256c <radio_tmr_status_reset+0x18>)
   12556:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1255a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   1255e:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   12562:	227f      	movs	r2, #127	; 0x7f
   12564:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12568:	4770      	bx	lr
   1256a:	bf00      	nop
   1256c:	4000b000 	.word	0x4000b000

00012570 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   12570:	4b03      	ldr	r3, [pc, #12]	; (12580 <radio_tmr_tifs_set+0x10>)
   12572:	4a04      	ldr	r2, [pc, #16]	; (12584 <radio_tmr_tifs_set+0x14>)
   12574:	781b      	ldrb	r3, [r3, #0]
   12576:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1257a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   1257e:	4770      	bx	lr
   12580:	200016c4 	.word	0x200016c4
   12584:	40009000 	.word	0x40009000

00012588 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   12588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1258c:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   12590:	4c30      	ldr	r4, [pc, #192]	; (12654 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   12592:	4d31      	ldr	r5, [pc, #196]	; (12658 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12594:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   12598:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   1259a:	bf88      	it	hi
   1259c:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   125a0:	4b2e      	ldr	r3, [pc, #184]	; (1265c <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   125a2:	4c2f      	ldr	r4, [pc, #188]	; (12660 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   125a4:	bf82      	ittt	hi
   125a6:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   125aa:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   125ae:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   125b2:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   125b4:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   125b8:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   125ba:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   125bc:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   125c0:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   125c2:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   125c6:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   125ca:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   125ce:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   125d2:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   125d6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   125da:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   125de:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   125e2:	4920      	ldr	r1, [pc, #128]	; (12664 <radio_tmr_start+0xdc>)
   125e4:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   125e8:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   125ec:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   125f0:	f7ff fd5a 	bl	120a8 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   125f4:	4b1c      	ldr	r3, [pc, #112]	; (12668 <radio_tmr_start+0xe0>)
   125f6:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   125f8:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   125fc:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   12600:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   12604:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   12606:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1260a:	3b74      	subs	r3, #116	; 0x74
   1260c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   12610:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   12614:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   12618:	f503 739a 	add.w	r3, r3, #308	; 0x134
   1261c:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   12620:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   12624:	33c4      	adds	r3, #196	; 0xc4
   12626:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   1262a:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   1262e:	3bc0      	subs	r3, #192	; 0xc0
   12630:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   12634:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   12638:	33c8      	adds	r3, #200	; 0xc8
   1263a:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1263e:	f44f 6310 	mov.w	r3, #2304	; 0x900
   12642:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   12646:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   1264a:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   1264e:	4628      	mov	r0, r5
   12650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12654:	7ff0bdbf 	.word	0x7ff0bdbf
   12658:	000f4240 	.word	0x000f4240
   1265c:	40008000 	.word	0x40008000
   12660:	4000b000 	.word	0x4000b000
   12664:	4000b148 	.word	0x4000b148
   12668:	40009000 	.word	0x40009000

0001266c <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   1266c:	4a04      	ldr	r2, [pc, #16]	; (12680 <radio_tmr_stop+0x14>)
   1266e:	2301      	movs	r3, #1
   12670:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   12672:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   12674:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   12678:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   1267a:	6113      	str	r3, [r2, #16]
   1267c:	4770      	bx	lr
   1267e:	bf00      	nop
   12680:	40008000 	.word	0x40008000

00012684 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   12684:	4b0c      	ldr	r3, [pc, #48]	; (126b8 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   12686:	4a0d      	ldr	r2, [pc, #52]	; (126bc <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   12688:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1268c:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   12690:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   12694:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12698:	3240      	adds	r2, #64	; 0x40
   1269a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   1269e:	f502 7280 	add.w	r2, r2, #256	; 0x100
   126a2:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   126a6:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   126aa:	3a34      	subs	r2, #52	; 0x34
   126ac:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   126b0:	2218      	movs	r2, #24
   126b2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   126b6:	4770      	bx	lr
   126b8:	40008000 	.word	0x40008000
   126bc:	40001104 	.word	0x40001104

000126c0 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   126c0:	4b0b      	ldr	r3, [pc, #44]	; (126f0 <radio_tmr_aa_capture+0x30>)
   126c2:	4a0c      	ldr	r2, [pc, #48]	; (126f4 <radio_tmr_aa_capture+0x34>)
   126c4:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   126c8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   126cc:	3240      	adds	r2, #64	; 0x40
   126ce:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   126d2:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   126d6:	3a3c      	subs	r2, #60	; 0x3c
   126d8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   126dc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   126e0:	3240      	adds	r2, #64	; 0x40
   126e2:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   126e6:	220c      	movs	r2, #12
   126e8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   126ec:	4770      	bx	lr
   126ee:	bf00      	nop
   126f0:	4001f000 	.word	0x4001f000
   126f4:	40001100 	.word	0x40001100

000126f8 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   126f8:	4b01      	ldr	r3, [pc, #4]	; (12700 <radio_tmr_aa_get+0x8>)
   126fa:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   126fe:	4770      	bx	lr
   12700:	40008000 	.word	0x40008000

00012704 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   12704:	4b01      	ldr	r3, [pc, #4]	; (1270c <radio_tmr_aa_save+0x8>)
   12706:	6018      	str	r0, [r3, #0]
   12708:	4770      	bx	lr
   1270a:	bf00      	nop
   1270c:	200016bc 	.word	0x200016bc

00012710 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   12710:	4b01      	ldr	r3, [pc, #4]	; (12718 <radio_tmr_aa_restore+0x8>)
   12712:	6818      	ldr	r0, [r3, #0]
   12714:	4770      	bx	lr
   12716:	bf00      	nop
   12718:	200016bc 	.word	0x200016bc

0001271c <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1271c:	4b01      	ldr	r3, [pc, #4]	; (12724 <radio_tmr_ready_get+0x8>)
   1271e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   12722:	4770      	bx	lr
   12724:	40008000 	.word	0x40008000

00012728 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   12728:	4b06      	ldr	r3, [pc, #24]	; (12744 <radio_tmr_end_capture+0x1c>)
   1272a:	4a07      	ldr	r2, [pc, #28]	; (12748 <radio_tmr_end_capture+0x20>)
   1272c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   12730:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12734:	323c      	adds	r2, #60	; 0x3c
   12736:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   1273a:	2220      	movs	r2, #32
   1273c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12740:	4770      	bx	lr
   12742:	bf00      	nop
   12744:	4001f000 	.word	0x4001f000
   12748:	4000110c 	.word	0x4000110c

0001274c <radio_tmr_end_get>:
   1274c:	4b01      	ldr	r3, [pc, #4]	; (12754 <radio_tmr_end_get+0x8>)
   1274e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   12752:	4770      	bx	lr
   12754:	40008000 	.word	0x40008000

00012758 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   12758:	4b01      	ldr	r3, [pc, #4]	; (12760 <radio_tmr_tifs_base_get+0x8>)
   1275a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   1275e:	4770      	bx	lr
   12760:	40008000 	.word	0x40008000

00012764 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12764:	4b16      	ldr	r3, [pc, #88]	; (127c0 <radio_ccm_rx_pkt_set+0x5c>)
{
   12766:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12768:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1276a:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1276c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   12770:	4e14      	ldr	r6, [pc, #80]	; (127c4 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12772:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   12776:	4d14      	ldr	r5, [pc, #80]	; (127c8 <radio_ccm_rx_pkt_set+0x64>)
   12778:	2902      	cmp	r1, #2
   1277a:	bf0c      	ite	eq
   1277c:	4629      	moveq	r1, r5
   1277e:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   12780:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   12784:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   12788:	4810      	ldr	r0, [pc, #64]	; (127cc <radio_ccm_rx_pkt_set+0x68>)
   1278a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   1278e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12792:	4a0f      	ldr	r2, [pc, #60]	; (127d0 <radio_ccm_rx_pkt_set+0x6c>)
   12794:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   12798:	490e      	ldr	r1, [pc, #56]	; (127d4 <radio_ccm_rx_pkt_set+0x70>)
   1279a:	4a0f      	ldr	r2, [pc, #60]	; (127d8 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   1279c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   127a0:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   127a4:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   127a8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   127ac:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   127b0:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   127b4:	2140      	movs	r1, #64	; 0x40
   127b6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   127ba:	2201      	movs	r2, #1
   127bc:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   127be:	bd70      	pop	{r4, r5, r6, pc}
   127c0:	4000f000 	.word	0x4000f000
   127c4:	01000001 	.word	0x01000001
   127c8:	01010001 	.word	0x01010001
   127cc:	200015b8 	.word	0x200015b8
   127d0:	200014a8 	.word	0x200014a8
   127d4:	40001104 	.word	0x40001104
   127d8:	4001f000 	.word	0x4001f000

000127dc <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   127dc:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   127de:	4b0e      	ldr	r3, [pc, #56]	; (12818 <radio_ccm_tx_pkt_set+0x3c>)
   127e0:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   127e2:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   127e4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   127e8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   127ec:	4c0b      	ldr	r4, [pc, #44]	; (1281c <radio_ccm_tx_pkt_set+0x40>)
   127ee:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   127f2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   127f6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   127fa:	4809      	ldr	r0, [pc, #36]	; (12820 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   127fc:	4909      	ldr	r1, [pc, #36]	; (12824 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   127fe:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12802:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   12806:	2101      	movs	r1, #1
   12808:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1280c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12810:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   12814:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   12816:	bd10      	pop	{r4, pc}
   12818:	4000f000 	.word	0x4000f000
   1281c:	01010000 	.word	0x01010000
   12820:	200015b8 	.word	0x200015b8
   12824:	200014a8 	.word	0x200014a8

00012828 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   12828:	4b0c      	ldr	r3, [pc, #48]	; (1285c <radio_ccm_is_done+0x34>)
   1282a:	2202      	movs	r2, #2
   1282c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   12830:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   12834:	b16a      	cbz	r2, 12852 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   12836:	2202      	movs	r2, #2
   12838:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   1283c:	4a08      	ldr	r2, [pc, #32]	; (12860 <radio_ccm_is_done+0x38>)
   1283e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12842:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   12846:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1284a:	fab0 f080 	clz	r0, r0
   1284e:	0940      	lsrs	r0, r0, #5
   12850:	4770      	bx	lr
		__WFE();
   12852:	bf20      	wfe
		__SEV();
   12854:	bf40      	sev
		__WFE();
   12856:	bf20      	wfe
   12858:	e7ea      	b.n	12830 <radio_ccm_is_done+0x8>
   1285a:	bf00      	nop
   1285c:	4000f000 	.word	0x4000f000
   12860:	e000e100 	.word	0xe000e100

00012864 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   12864:	4b03      	ldr	r3, [pc, #12]	; (12874 <radio_ccm_mic_is_valid+0x10>)
   12866:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1286a:	3000      	adds	r0, #0
   1286c:	bf18      	it	ne
   1286e:	2001      	movne	r0, #1
   12870:	4770      	bx	lr
   12872:	bf00      	nop
   12874:	4000f000 	.word	0x4000f000

00012878 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   12878:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1287a:	4c13      	ldr	r4, [pc, #76]	; (128c8 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   1287c:	4d13      	ldr	r5, [pc, #76]	; (128cc <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1287e:	2303      	movs	r3, #3
   12880:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   12884:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   12888:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   1288c:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   12890:	3b01      	subs	r3, #1
   12892:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   12896:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   12898:	4b0d      	ldr	r3, [pc, #52]	; (128d0 <radio_ar_configure+0x58>)
   1289a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   1289e:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   128a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   128a4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   128a8:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   128ac:	f7ff fe46 	bl	1253c <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   128b0:	4b08      	ldr	r3, [pc, #32]	; (128d4 <radio_ar_configure+0x5c>)
   128b2:	4a09      	ldr	r2, [pc, #36]	; (128d8 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   128b4:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   128b8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   128bc:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   128be:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   128c2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   128c6:	bd38      	pop	{r3, r4, r5, pc}
   128c8:	4000f000 	.word	0x4000f000
   128cc:	40001000 	.word	0x40001000
   128d0:	200014a4 	.word	0x200014a4
   128d4:	4001f000 	.word	0x4001f000
   128d8:	40001128 	.word	0x40001128

000128dc <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   128dc:	4b01      	ldr	r3, [pc, #4]	; (128e4 <radio_ar_match_get+0x8>)
   128de:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   128e2:	4770      	bx	lr
   128e4:	4000f000 	.word	0x4000f000

000128e8 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   128e8:	4a04      	ldr	r2, [pc, #16]	; (128fc <radio_ar_status_reset+0x14>)
   128ea:	2300      	movs	r3, #0
   128ec:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   128f0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   128f4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   128f8:	4770      	bx	lr
   128fa:	bf00      	nop
   128fc:	40001000 	.word	0x40001000

00012900 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   12900:	4b08      	ldr	r3, [pc, #32]	; (12924 <radio_ar_has_match+0x24>)
   12902:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   12906:	b160      	cbz	r0, 12922 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   12908:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1290c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   12910:	b138      	cbz	r0, 12922 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   12912:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   12916:	b120      	cbz	r0, 12922 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   12918:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1291c:	fab0 f080 	clz	r0, r0
   12920:	0940      	lsrs	r0, r0, #5
}
   12922:	4770      	bx	lr
   12924:	40001000 	.word	0x40001000

00012928 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12928:	2901      	cmp	r1, #1
{
   1292a:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1292c:	d00e      	beq.n	1294c <mayfly_enable_cb+0x24>
   1292e:	4b0d      	ldr	r3, [pc, #52]	; (12964 <mayfly_enable_cb+0x3c>)
   12930:	9301      	str	r3, [sp, #4]
   12932:	9300      	str	r3, [sp, #0]
   12934:	4a0c      	ldr	r2, [pc, #48]	; (12968 <mayfly_enable_cb+0x40>)
   12936:	4b0d      	ldr	r3, [pc, #52]	; (1296c <mayfly_enable_cb+0x44>)
   12938:	490d      	ldr	r1, [pc, #52]	; (12970 <mayfly_enable_cb+0x48>)
   1293a:	480e      	ldr	r0, [pc, #56]	; (12974 <mayfly_enable_cb+0x4c>)
   1293c:	f7ee fb26 	bl	f8c <printk>
   12940:	4040      	eors	r0, r0
   12942:	f380 8811 	msr	BASEPRI, r0
   12946:	f04f 0004 	mov.w	r0, #4
   1294a:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   1294c:	2018      	movs	r0, #24
	if (enable) {
   1294e:	b122      	cbz	r2, 1295a <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   12950:	b003      	add	sp, #12
   12952:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(SWI4_IRQn);
   12956:	f7ee bf7f 	b.w	1858 <_arch_irq_enable>
}
   1295a:	b003      	add	sp, #12
   1295c:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_disable(SWI4_IRQn);
   12960:	f7ee bf8a 	b.w	1878 <_arch_irq_disable>
   12964:	0001496d 	.word	0x0001496d
   12968:	000156bc 	.word	0x000156bc
   1296c:	0001804c 	.word	0x0001804c
   12970:	0001570b 	.word	0x0001570b
   12974:	0001807b 	.word	0x0001807b

00012978 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   12978:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	switch (callee_id) {
   1297a:	b181      	cbz	r1, 1299e <mayfly_is_enabled+0x26>
   1297c:	2901      	cmp	r1, #1
   1297e:	d014      	beq.n	129aa <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   12980:	4b0b      	ldr	r3, [pc, #44]	; (129b0 <mayfly_is_enabled+0x38>)
   12982:	9301      	str	r3, [sp, #4]
   12984:	9300      	str	r3, [sp, #0]
   12986:	4a0b      	ldr	r2, [pc, #44]	; (129b4 <mayfly_is_enabled+0x3c>)
   12988:	4b0b      	ldr	r3, [pc, #44]	; (129b8 <mayfly_is_enabled+0x40>)
   1298a:	490c      	ldr	r1, [pc, #48]	; (129bc <mayfly_is_enabled+0x44>)
   1298c:	480c      	ldr	r0, [pc, #48]	; (129c0 <mayfly_is_enabled+0x48>)
   1298e:	f7ee fafd 	bl	f8c <printk>
   12992:	4040      	eors	r0, r0
   12994:	f380 8811 	msr	BASEPRI, r0
   12998:	f04f 0004 	mov.w	r0, #4
   1299c:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   1299e:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   129a0:	b003      	add	sp, #12
   129a2:	f85d eb04 	ldr.w	lr, [sp], #4
		return irq_is_enabled(SWI4_IRQn);
   129a6:	f7ee bf7b 	b.w	18a0 <_arch_irq_is_enabled>
   129aa:	2018      	movs	r0, #24
   129ac:	e7f8      	b.n	129a0 <mayfly_is_enabled+0x28>
   129ae:	bf00      	nop
   129b0:	0001496d 	.word	0x0001496d
   129b4:	000156bc 	.word	0x000156bc
   129b8:	0001805d 	.word	0x0001805d
   129bc:	0001570b 	.word	0x0001570b
   129c0:	0001565b 	.word	0x0001565b

000129c4 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   129c4:	4288      	cmp	r0, r1
   129c6:	d00a      	beq.n	129de <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   129c8:	b918      	cbnz	r0, 129d2 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   129ca:	1e4b      	subs	r3, r1, #1
   129cc:	4258      	negs	r0, r3
   129ce:	4158      	adcs	r0, r3
   129d0:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   129d2:	2801      	cmp	r0, #1
   129d4:	d105      	bne.n	129e2 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   129d6:	fab1 f081 	clz	r0, r1
   129da:	0940      	lsrs	r0, r0, #5
   129dc:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   129de:	2001      	movs	r0, #1
   129e0:	4770      	bx	lr
   129e2:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   129e4:	4770      	bx	lr
	...

000129e8 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   129e8:	b507      	push	{r0, r1, r2, lr}
   129ea:	4b0e      	ldr	r3, [pc, #56]	; (12a24 <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   129ec:	b181      	cbz	r1, 12a10 <mayfly_pend+0x28>
   129ee:	2901      	cmp	r1, #1
   129f0:	d015      	beq.n	12a1e <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   129f2:	4b0d      	ldr	r3, [pc, #52]	; (12a28 <mayfly_pend+0x40>)
   129f4:	9301      	str	r3, [sp, #4]
   129f6:	9300      	str	r3, [sp, #0]
   129f8:	4a0c      	ldr	r2, [pc, #48]	; (12a2c <mayfly_pend+0x44>)
   129fa:	4b0d      	ldr	r3, [pc, #52]	; (12a30 <mayfly_pend+0x48>)
   129fc:	490d      	ldr	r1, [pc, #52]	; (12a34 <mayfly_pend+0x4c>)
   129fe:	480e      	ldr	r0, [pc, #56]	; (12a38 <mayfly_pend+0x50>)
   12a00:	f7ee fac4 	bl	f8c <printk>
   12a04:	4040      	eors	r0, r0
   12a06:	f380 8811 	msr	BASEPRI, r0
   12a0a:	f04f 0004 	mov.w	r0, #4
   12a0e:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12a14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   12a18:	b003      	add	sp, #12
   12a1a:	f85d fb04 	ldr.w	pc, [sp], #4
   12a1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   12a22:	e7f7      	b.n	12a14 <mayfly_pend+0x2c>
   12a24:	e000e100 	.word	0xe000e100
   12a28:	0001496d 	.word	0x0001496d
   12a2c:	000156bc 	.word	0x000156bc
   12a30:	0001806f 	.word	0x0001806f
   12a34:	0001570b 	.word	0x0001570b
   12a38:	0001565b 	.word	0x0001565b

00012a3c <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12a3c:	2803      	cmp	r0, #3
{
   12a3e:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12a40:	d90e      	bls.n	12a60 <hal_ticker_instance0_caller_id_get+0x24>
   12a42:	4b0e      	ldr	r3, [pc, #56]	; (12a7c <hal_ticker_instance0_caller_id_get+0x40>)
   12a44:	9301      	str	r3, [sp, #4]
   12a46:	9300      	str	r3, [sp, #0]
   12a48:	4a0d      	ldr	r2, [pc, #52]	; (12a80 <hal_ticker_instance0_caller_id_get+0x44>)
   12a4a:	4b0e      	ldr	r3, [pc, #56]	; (12a84 <hal_ticker_instance0_caller_id_get+0x48>)
   12a4c:	490e      	ldr	r1, [pc, #56]	; (12a88 <hal_ticker_instance0_caller_id_get+0x4c>)
   12a4e:	480f      	ldr	r0, [pc, #60]	; (12a8c <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12a50:	f7ee fa9c 	bl	f8c <printk>
   12a54:	4040      	eors	r0, r0
   12a56:	f380 8811 	msr	BASEPRI, r0
   12a5a:	f04f 0004 	mov.w	r0, #4
   12a5e:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   12a60:	4b0b      	ldr	r3, [pc, #44]	; (12a90 <hal_ticker_instance0_caller_id_get+0x54>)
   12a62:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12a64:	b938      	cbnz	r0, 12a76 <hal_ticker_instance0_caller_id_get+0x3a>
   12a66:	4b05      	ldr	r3, [pc, #20]	; (12a7c <hal_ticker_instance0_caller_id_get+0x40>)
   12a68:	9301      	str	r3, [sp, #4]
   12a6a:	9300      	str	r3, [sp, #0]
   12a6c:	4a04      	ldr	r2, [pc, #16]	; (12a80 <hal_ticker_instance0_caller_id_get+0x44>)
   12a6e:	4b05      	ldr	r3, [pc, #20]	; (12a84 <hal_ticker_instance0_caller_id_get+0x48>)
   12a70:	4905      	ldr	r1, [pc, #20]	; (12a88 <hal_ticker_instance0_caller_id_get+0x4c>)
   12a72:	4808      	ldr	r0, [pc, #32]	; (12a94 <hal_ticker_instance0_caller_id_get+0x58>)
   12a74:	e7ec      	b.n	12a50 <hal_ticker_instance0_caller_id_get+0x14>

	return caller_id;
}
   12a76:	b003      	add	sp, #12
   12a78:	f85d fb04 	ldr.w	pc, [sp], #4
   12a7c:	0001496d 	.word	0x0001496d
   12a80:	000156bc 	.word	0x000156bc
   12a84:	000180ab 	.word	0x000180ab
   12a88:	0001570b 	.word	0x0001570b
   12a8c:	000180ed 	.word	0x000180ed
   12a90:	000180e9 	.word	0x000180e9
   12a94:	0001812e 	.word	0x0001812e

00012a98 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   12a98:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   12a9a:	3802      	subs	r0, #2
{
   12a9c:	461c      	mov	r4, r3
	switch (caller_id) {
   12a9e:	2803      	cmp	r0, #3
   12aa0:	d818      	bhi.n	12ad4 <hal_ticker_instance0_sched+0x3c>
   12aa2:	e8df f000 	tbb	[pc, r0]
   12aa6:	0d02      	.short	0x0d02
   12aa8:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   12aaa:	2903      	cmp	r1, #3
   12aac:	d112      	bne.n	12ad4 <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   12aae:	4b19      	ldr	r3, [pc, #100]	; (12b14 <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   12ab0:	2100      	movs	r1, #0
			m.param = instance;
   12ab2:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   12ab4:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   12ab6:	b002      	add	sp, #8
   12ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12abc:	f7f4 bb34 	b.w	7128 <mayfly_enqueue>
		switch (callee_id) {
   12ac0:	2904      	cmp	r1, #4
   12ac2:	d107      	bne.n	12ad4 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   12ac4:	4b14      	ldr	r3, [pc, #80]	; (12b18 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   12ac6:	2101      	movs	r1, #1
			m.param = instance;
   12ac8:	609c      	str	r4, [r3, #8]
   12aca:	e7f3      	b.n	12ab4 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   12acc:	2903      	cmp	r1, #3
   12ace:	d010      	beq.n	12af2 <hal_ticker_instance0_sched+0x5a>
   12ad0:	2904      	cmp	r1, #4
   12ad2:	d013      	beq.n	12afc <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
   12ad4:	4b11      	ldr	r3, [pc, #68]	; (12b1c <hal_ticker_instance0_sched+0x84>)
   12ad6:	9301      	str	r3, [sp, #4]
   12ad8:	9300      	str	r3, [sp, #0]
   12ada:	4a11      	ldr	r2, [pc, #68]	; (12b20 <hal_ticker_instance0_sched+0x88>)
   12adc:	4b11      	ldr	r3, [pc, #68]	; (12b24 <hal_ticker_instance0_sched+0x8c>)
   12ade:	4912      	ldr	r1, [pc, #72]	; (12b28 <hal_ticker_instance0_sched+0x90>)
   12ae0:	4812      	ldr	r0, [pc, #72]	; (12b2c <hal_ticker_instance0_sched+0x94>)
   12ae2:	f7ee fa53 	bl	f8c <printk>
   12ae6:	4040      	eors	r0, r0
   12ae8:	f380 8811 	msr	BASEPRI, r0
   12aec:	f04f 0004 	mov.w	r0, #4
   12af0:	df02      	svc	2
			m.param = instance;
   12af2:	4b0f      	ldr	r3, [pc, #60]	; (12b30 <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12af4:	2100      	movs	r1, #0
			m.param = instance;
   12af6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12af8:	2001      	movs	r0, #1
   12afa:	e7dc      	b.n	12ab6 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   12afc:	4b0d      	ldr	r3, [pc, #52]	; (12b34 <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12afe:	2101      	movs	r1, #1
			m.param = instance;
   12b00:	609c      	str	r4, [r3, #8]
   12b02:	e7f9      	b.n	12af8 <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
   12b04:	2904      	cmp	r1, #4
   12b06:	d1e5      	bne.n	12ad4 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   12b08:	4b0b      	ldr	r3, [pc, #44]	; (12b38 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12b0a:	2101      	movs	r1, #1
			m.param = instance;
   12b0c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12b0e:	2003      	movs	r0, #3
   12b10:	e7d1      	b.n	12ab6 <hal_ticker_instance0_sched+0x1e>
   12b12:	bf00      	nop
   12b14:	20003e20 	.word	0x20003e20
   12b18:	20003e30 	.word	0x20003e30
   12b1c:	0001496d 	.word	0x0001496d
   12b20:	000156bc 	.word	0x000156bc
   12b24:	000180ce 	.word	0x000180ce
   12b28:	0001570b 	.word	0x0001570b
   12b2c:	0001565b 	.word	0x0001565b
   12b30:	20003e40 	.word	0x20003e40
   12b34:	20003e50 	.word	0x20003e50
   12b38:	20003e60 	.word	0x20003e60

00012b3c <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   12b3c:	4601      	mov	r1, r0
   12b3e:	2000      	movs	r0, #0
   12b40:	f7ff ba62 	b.w	12008 <cntr_cmp_set>

00012b44 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   12b44:	4770      	bx	lr
	...

00012b48 <net_buf_pool_get>:
}
   12b48:	4b01      	ldr	r3, [pc, #4]	; (12b50 <net_buf_pool_get+0x8>)
   12b4a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   12b4e:	4770      	bx	lr
   12b50:	20003f34 	.word	0x20003f34

00012b54 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12b54:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   12b56:	4b04      	ldr	r3, [pc, #16]	; (12b68 <net_buf_id+0x14>)
   12b58:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   12b5c:	69db      	ldr	r3, [r3, #28]
   12b5e:	1ac0      	subs	r0, r0, r3
}
   12b60:	4b02      	ldr	r3, [pc, #8]	; (12b6c <net_buf_id+0x18>)
	return buf - pool->__bufs;
   12b62:	10c0      	asrs	r0, r0, #3
}
   12b64:	4358      	muls	r0, r3
   12b66:	4770      	bx	lr
   12b68:	20003f34 	.word	0x20003f34
   12b6c:	aaaaaaab 	.word	0xaaaaaaab

00012b70 <fixed_data_alloc>:
{
   12b70:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12b72:	4b09      	ldr	r3, [pc, #36]	; (12b98 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12b74:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12b76:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   12b7a:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12b7c:	699b      	ldr	r3, [r3, #24]
   12b7e:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   12b80:	6823      	ldr	r3, [r4, #0]
   12b82:	429a      	cmp	r2, r3
   12b84:	bf94      	ite	ls
   12b86:	600a      	strls	r2, [r1, #0]
   12b88:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   12b8a:	f7ff ffe3 	bl	12b54 <net_buf_id>
   12b8e:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   12b92:	fb02 3000 	mla	r0, r2, r0, r3
   12b96:	bd10      	pop	{r4, pc}
   12b98:	20003f34 	.word	0x20003f34

00012b9c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   12b9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12ba0:	4605      	mov	r5, r0
   12ba2:	9101      	str	r1, [sp, #4]
   12ba4:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   12ba6:	f001 f96f 	bl	13e88 <_impl_k_uptime_get_32>
   12baa:	4607      	mov	r7, r0
	__asm__ volatile(
   12bac:	f04f 0320 	mov.w	r3, #32
   12bb0:	f3ef 8811 	mrs	r8, BASEPRI
   12bb4:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   12bb8:	8a6b      	ldrh	r3, [r5, #18]
   12bba:	2b00      	cmp	r3, #0
   12bbc:	d03d      	beq.n	12c3a <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   12bbe:	8a2a      	ldrh	r2, [r5, #16]
   12bc0:	429a      	cmp	r2, r3
   12bc2:	d92a      	bls.n	12c1a <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   12bc4:	2100      	movs	r1, #0
   12bc6:	4628      	mov	r0, r5
   12bc8:	f000 fe78 	bl	138bc <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   12bcc:	b328      	cbz	r0, 12c1a <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12bce:	f388 8811 	msr	BASEPRI, r8
   12bd2:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   12bd4:	9b01      	ldr	r3, [sp, #4]
   12bd6:	2b00      	cmp	r3, #0
   12bd8:	d03c      	beq.n	12c54 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   12bda:	1c73      	adds	r3, r6, #1
   12bdc:	2b01      	cmp	r3, #1
   12bde:	d906      	bls.n	12bee <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   12be0:	f001 f952 	bl	13e88 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   12be4:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   12be6:	42b0      	cmp	r0, r6
   12be8:	bf94      	ite	ls
   12bea:	1a36      	subls	r6, r6, r0
   12bec:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12bee:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   12bf0:	4f1e      	ldr	r7, [pc, #120]	; (12c6c <net_buf_alloc_len+0xd0>)
   12bf2:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   12bf6:	4632      	mov	r2, r6
   12bf8:	699b      	ldr	r3, [r3, #24]
   12bfa:	681b      	ldr	r3, [r3, #0]
   12bfc:	a901      	add	r1, sp, #4
   12bfe:	681b      	ldr	r3, [r3, #0]
   12c00:	4620      	mov	r0, r4
   12c02:	4798      	blx	r3
   12c04:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   12c06:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   12c08:	bb28      	cbnz	r0, 12c56 <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   12c0a:	79a0      	ldrb	r0, [r4, #6]
   12c0c:	4621      	mov	r1, r4
   12c0e:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   12c12:	f000 fe34 	bl	1387e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   12c16:	462c      	mov	r4, r5
   12c18:	e018      	b.n	12c4c <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   12c1a:	8a68      	ldrh	r0, [r5, #18]
   12c1c:	1e43      	subs	r3, r0, #1
   12c1e:	826b      	strh	r3, [r5, #18]
   12c20:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   12c24:	8a2c      	ldrh	r4, [r5, #16]
   12c26:	1a24      	subs	r4, r4, r0
   12c28:	69e8      	ldr	r0, [r5, #28]
   12c2a:	2318      	movs	r3, #24
   12c2c:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   12c30:	4b0e      	ldr	r3, [pc, #56]	; (12c6c <net_buf_alloc_len+0xd0>)
   12c32:	1aed      	subs	r5, r5, r3
   12c34:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   12c36:	71a5      	strb	r5, [r4, #6]
		goto success;
   12c38:	e7cc      	b.n	12bd4 <net_buf_alloc_len+0x38>
   12c3a:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   12c3e:	4631      	mov	r1, r6
   12c40:	4628      	mov	r0, r5
   12c42:	f000 fe3b 	bl	138bc <_impl_k_queue_get>
		return NULL;
   12c46:	4604      	mov	r4, r0
	if (!buf) {
   12c48:	2800      	cmp	r0, #0
   12c4a:	d1c3      	bne.n	12bd4 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   12c4c:	4620      	mov	r0, r4
   12c4e:	b002      	add	sp, #8
   12c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   12c54:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   12c56:	2301      	movs	r3, #1
   12c58:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   12c5a:	2300      	movs	r3, #0
	buf->frags = NULL;
   12c5c:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   12c5e:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   12c60:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   12c62:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   12c64:	6923      	ldr	r3, [r4, #16]
   12c66:	81e2      	strh	r2, [r4, #14]
   12c68:	60a3      	str	r3, [r4, #8]
	return buf;
   12c6a:	e7ef      	b.n	12c4c <net_buf_alloc_len+0xb0>
   12c6c:	20003f34 	.word	0x20003f34

00012c70 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12c70:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   12c72:	685b      	ldr	r3, [r3, #4]
   12c74:	460a      	mov	r2, r1
   12c76:	6819      	ldr	r1, [r3, #0]
   12c78:	f7ff bf90 	b.w	12b9c <net_buf_alloc_len>

00012c7c <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   12c7c:	b570      	push	{r4, r5, r6, lr}
   12c7e:	4606      	mov	r6, r0
   12c80:	f000 fe1c 	bl	138bc <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   12c84:	4605      	mov	r5, r0
   12c86:	b128      	cbz	r0, 12c94 <net_buf_get+0x18>
   12c88:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12c8a:	7963      	ldrb	r3, [r4, #5]
   12c8c:	f013 0301 	ands.w	r3, r3, #1
   12c90:	d102      	bne.n	12c98 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   12c92:	6023      	str	r3, [r4, #0]

	return buf;
}
   12c94:	4628      	mov	r0, r5
   12c96:	bd70      	pop	{r4, r5, r6, pc}
   12c98:	2100      	movs	r1, #0
   12c9a:	4630      	mov	r0, r6
   12c9c:	f000 fe0e 	bl	138bc <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   12ca0:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   12ca2:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   12ca4:	f023 0301 	bic.w	r3, r3, #1
   12ca8:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12caa:	4604      	mov	r4, r0
   12cac:	e7ed      	b.n	12c8a <net_buf_get+0xe>

00012cae <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   12cae:	6883      	ldr	r3, [r0, #8]
   12cb0:	4419      	add	r1, r3
   12cb2:	6001      	str	r1, [r0, #0]
   12cb4:	4770      	bx	lr

00012cb6 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   12cb6:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   12cb8:	460a      	mov	r2, r1
   12cba:	6814      	ldr	r4, [r2, #0]
   12cbc:	b914      	cbnz	r4, 12cc4 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   12cbe:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   12cc0:	f000 bde2 	b.w	13888 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   12cc4:	7953      	ldrb	r3, [r2, #5]
   12cc6:	f043 0301 	orr.w	r3, r3, #1
   12cca:	7153      	strb	r3, [r2, #5]
   12ccc:	4622      	mov	r2, r4
   12cce:	e7f4      	b.n	12cba <net_buf_put+0x4>

00012cd0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   12cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12cd2:	4d15      	ldr	r5, [pc, #84]	; (12d28 <net_buf_unref+0x58>)
   12cd4:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   12cd6:	2600      	movs	r6, #0
	while (buf) {
   12cd8:	b904      	cbnz	r4, 12cdc <net_buf_unref+0xc>
   12cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   12cdc:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   12cde:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   12ce0:	3b01      	subs	r3, #1
   12ce2:	b2db      	uxtb	r3, r3
   12ce4:	7123      	strb	r3, [r4, #4]
   12ce6:	2b00      	cmp	r3, #0
   12ce8:	d1f7      	bne.n	12cda <net_buf_unref+0xa>
		if (buf->__buf) {
   12cea:	6921      	ldr	r1, [r4, #16]
   12cec:	b159      	cbz	r1, 12d06 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   12cee:	7963      	ldrb	r3, [r4, #5]
   12cf0:	079b      	lsls	r3, r3, #30
   12cf2:	d407      	bmi.n	12d04 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12cf4:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   12cf6:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   12cfa:	4620      	mov	r0, r4
   12cfc:	699b      	ldr	r3, [r3, #24]
   12cfe:	681b      	ldr	r3, [r3, #0]
   12d00:	689b      	ldr	r3, [r3, #8]
   12d02:	4798      	blx	r3
			buf->__buf = NULL;
   12d04:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   12d06:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   12d08:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   12d0a:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   12d0e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   12d10:	695b      	ldr	r3, [r3, #20]
   12d12:	b11b      	cbz	r3, 12d1c <net_buf_unref+0x4c>
			pool->destroy(buf);
   12d14:	4620      	mov	r0, r4
   12d16:	4798      	blx	r3
{
   12d18:	463c      	mov	r4, r7
   12d1a:	e7dd      	b.n	12cd8 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   12d1c:	4621      	mov	r1, r4
   12d1e:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   12d22:	f000 fdac 	bl	1387e <k_queue_prepend>
   12d26:	e7f7      	b.n	12d18 <net_buf_unref+0x48>
   12d28:	20003f34 	.word	0x20003f34

00012d2c <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   12d2c:	7903      	ldrb	r3, [r0, #4]
   12d2e:	3301      	adds	r3, #1
   12d30:	7103      	strb	r3, [r0, #4]
	return buf;
}
   12d32:	4770      	bx	lr

00012d34 <net_buf_simple_add>:
	return buf->data + buf->len;
   12d34:	8883      	ldrh	r3, [r0, #4]
   12d36:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   12d38:	4419      	add	r1, r3
   12d3a:	8081      	strh	r1, [r0, #4]
	return tail;
}
   12d3c:	18d0      	adds	r0, r2, r3
   12d3e:	4770      	bx	lr

00012d40 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   12d40:	b430      	push	{r4, r5}
   12d42:	8883      	ldrh	r3, [r0, #4]
   12d44:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   12d46:	189d      	adds	r5, r3, r2
   12d48:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   12d4a:	18e0      	adds	r0, r4, r3
}
   12d4c:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   12d4e:	f7ee bf55 	b.w	1bfc <memcpy>

00012d52 <net_buf_simple_add_u8>:
   12d52:	8883      	ldrh	r3, [r0, #4]
   12d54:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   12d56:	b510      	push	{r4, lr}
	buf->len += len;
   12d58:	1c5c      	adds	r4, r3, #1
   12d5a:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   12d5c:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   12d5e:	18d0      	adds	r0, r2, r3
   12d60:	bd10      	pop	{r4, pc}

00012d62 <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   12d62:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12d64:	ab02      	add	r3, sp, #8
   12d66:	8884      	ldrh	r4, [r0, #4]
   12d68:	f823 1d02 	strh.w	r1, [r3, #-2]!
   12d6c:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   12d6e:	1ca2      	adds	r2, r4, #2
   12d70:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   12d72:	4619      	mov	r1, r3
   12d74:	2202      	movs	r2, #2
   12d76:	1928      	adds	r0, r5, r4
   12d78:	f7ee ff40 	bl	1bfc <memcpy>
}
   12d7c:	b003      	add	sp, #12
   12d7e:	bd30      	pop	{r4, r5, pc}

00012d80 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   12d80:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   12d82:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   12d84:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   12d86:	4411      	add	r1, r2
	buf->data -= len;
   12d88:	6003      	str	r3, [r0, #0]
	buf->len += len;
   12d8a:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   12d8c:	4618      	mov	r0, r3
   12d8e:	4770      	bx	lr

00012d90 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   12d90:	8883      	ldrh	r3, [r0, #4]
   12d92:	1a5b      	subs	r3, r3, r1
   12d94:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   12d96:	6803      	ldr	r3, [r0, #0]
   12d98:	4419      	add	r1, r3
   12d9a:	6001      	str	r1, [r0, #0]
}
   12d9c:	4608      	mov	r0, r1
   12d9e:	4770      	bx	lr

00012da0 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   12da0:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   12da2:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   12da4:	2101      	movs	r1, #1
	val = buf->data[0];
   12da6:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   12da8:	f7ff fff2 	bl	12d90 <net_buf_simple_pull>

	return val;
}
   12dac:	4610      	mov	r0, r2
   12dae:	bd08      	pop	{r3, pc}

00012db0 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   12db0:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   12db2:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   12db4:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   12db6:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   12db8:	f7ff ffea 	bl	12d90 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   12dbc:	4610      	mov	r0, r2
   12dbe:	bd08      	pop	{r3, pc}

00012dc0 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   12dc0:	6802      	ldr	r2, [r0, #0]
   12dc2:	6880      	ldr	r0, [r0, #8]
}
   12dc4:	1a10      	subs	r0, r2, r0
   12dc6:	4770      	bx	lr

00012dc8 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   12dc8:	6802      	ldr	r2, [r0, #0]
   12dca:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   12dcc:	88c3      	ldrh	r3, [r0, #6]
   12dce:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   12dd0:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   12dd2:	1a9b      	subs	r3, r3, r2
}
   12dd4:	1a18      	subs	r0, r3, r0
   12dd6:	4770      	bx	lr

00012dd8 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12dd8:	6800      	ldr	r0, [r0, #0]
   12dda:	6880      	ldr	r0, [r0, #8]
   12ddc:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   12dde:	b941      	cbnz	r1, 12df2 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   12de0:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   12de4:	fa21 f202 	lsr.w	r2, r1, r2
   12de8:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   12dec:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   12dee:	2000      	movs	r0, #0
   12df0:	4770      	bx	lr
		*value = gpio->IN;
   12df2:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   12df6:	e7f9      	b.n	12dec <gpio_nrf5_read+0x14>

00012df8 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12df8:	6800      	ldr	r0, [r0, #0]
   12dfa:	6880      	ldr	r0, [r0, #8]
   12dfc:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   12dfe:	b949      	cbnz	r1, 12e14 <gpio_nrf5_write+0x1c>
   12e00:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   12e02:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   12e04:	b11b      	cbz	r3, 12e0e <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   12e06:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   12e0a:	2000      	movs	r0, #0
   12e0c:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   12e0e:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   12e12:	e7fa      	b.n	12e0a <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   12e14:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   12e18:	e7f7      	b.n	12e0a <gpio_nrf5_write+0x12>

00012e1a <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12e1a:	6883      	ldr	r3, [r0, #8]
   12e1c:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   12e1e:	b172      	cbz	r2, 12e3e <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   12e20:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   12e22:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12e24:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   12e26:	b902      	cbnz	r2, 12e2a <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   12e28:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   12e2a:	2000      	movs	r0, #0
   12e2c:	4770      	bx	lr
	parent->next = child;
   12e2e:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   12e30:	6858      	ldr	r0, [r3, #4]
   12e32:	4281      	cmp	r1, r0
	list->tail = node;
   12e34:	bf08      	it	eq
   12e36:	605a      	streq	r2, [r3, #4]
   12e38:	e00d      	b.n	12e56 <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   12e3a:	4602      	mov	r2, r0
   12e3c:	6800      	ldr	r0, [r0, #0]
   12e3e:	2800      	cmp	r0, #0
   12e40:	d0f3      	beq.n	12e2a <gpio_nrf5_manage_callback+0x10>
   12e42:	4281      	cmp	r1, r0
   12e44:	d1f9      	bne.n	12e3a <gpio_nrf5_manage_callback+0x20>
   12e46:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   12e48:	2a00      	cmp	r2, #0
   12e4a:	d1f0      	bne.n	12e2e <gpio_nrf5_manage_callback+0x14>
   12e4c:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12e4e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   12e50:	4291      	cmp	r1, r2
   12e52:	d100      	bne.n	12e56 <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   12e54:	6058      	str	r0, [r3, #4]
	parent->next = child;
   12e56:	2300      	movs	r3, #0
   12e58:	600b      	str	r3, [r1, #0]
   12e5a:	e7e6      	b.n	12e2a <gpio_nrf5_manage_callback+0x10>

00012e5c <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   12e5c:	4b0c      	ldr	r3, [pc, #48]	; (12e90 <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   12e5e:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12e60:	4d0c      	ldr	r5, [pc, #48]	; (12e94 <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   12e62:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12e64:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   12e66:	fa24 f203 	lsr.w	r2, r4, r3
   12e6a:	07d2      	lsls	r2, r2, #31
   12e6c:	d508      	bpl.n	12e80 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12e6e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   12e72:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   12e76:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   12e7a:	4282      	cmp	r2, r0
   12e7c:	d100      	bne.n	12e80 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12e7e:	b121      	cbz	r1, 12e8a <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12e80:	3301      	adds	r3, #1
   12e82:	2b08      	cmp	r3, #8
   12e84:	d1ef      	bne.n	12e66 <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   12e86:	f06f 0312 	mvn.w	r3, #18
}
   12e8a:	4618      	mov	r0, r3
   12e8c:	bd30      	pop	{r4, r5, pc}
   12e8e:	bf00      	nop
   12e90:	200016fc 	.word	0x200016fc
   12e94:	40006000 	.word	0x40006000

00012e98 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   12e98:	b570      	push	{r4, r5, r6, lr}
   12e9a:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12e9c:	460d      	mov	r5, r1
   12e9e:	b9c9      	cbnz	r1, 12ed4 <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   12ea0:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12ea2:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   12ea4:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   12ea6:	4610      	mov	r0, r2
   12ea8:	7919      	ldrb	r1, [r3, #4]
   12eaa:	f7ff ffd7 	bl	12e5c <gpiote_find_channel.isra.4>
		if (i < 0) {
   12eae:	2800      	cmp	r0, #0
   12eb0:	db12      	blt.n	12ed8 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   12eb2:	68b2      	ldr	r2, [r6, #8]
   12eb4:	2301      	movs	r3, #1
   12eb6:	fa03 f404 	lsl.w	r4, r3, r4
   12eba:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   12ebc:	f100 0140 	add.w	r1, r0, #64	; 0x40
   12ec0:	4a06      	ldr	r2, [pc, #24]	; (12edc <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   12ec2:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   12ec4:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   12ec8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   12ecc:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   12ed0:	4628      	mov	r0, r5
   12ed2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   12ed4:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   12ed8:	bd70      	pop	{r4, r5, r6, pc}
   12eda:	bf00      	nop
   12edc:	40006000 	.word	0x40006000

00012ee0 <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   12ee0:	b570      	push	{r4, r5, r6, lr}
   12ee2:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12ee4:	460d      	mov	r5, r1
   12ee6:	b9b1      	cbnz	r1, 12f16 <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   12ee8:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12eea:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   12eec:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   12eee:	4610      	mov	r0, r2
   12ef0:	7919      	ldrb	r1, [r3, #4]
   12ef2:	f7ff ffb3 	bl	12e5c <gpiote_find_channel.isra.4>
		if (i < 0) {
   12ef6:	2800      	cmp	r0, #0
   12ef8:	db0f      	blt.n	12f1a <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   12efa:	68b2      	ldr	r2, [r6, #8]
   12efc:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   12efe:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   12f02:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   12f06:	4b05      	ldr	r3, [pc, #20]	; (12f1c <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   12f08:	ea22 0404 	bic.w	r4, r2, r4
   12f0c:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   12f0e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   12f12:	4628      	mov	r0, r5
   12f14:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   12f16:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   12f1a:	bd70      	pop	{r4, r5, r6, pc}
   12f1c:	40006000 	.word	0x40006000

00012f20 <gpio_nrf5_config>:
{
   12f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12f24:	6806      	ldr	r6, [r0, #0]
{
   12f26:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12f28:	68b2      	ldr	r2, [r6, #8]
   12f2a:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12f2c:	b119      	cbz	r1, 12f36 <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   12f2e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   12f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   12f36:	f403 7240 	and.w	r2, r3, #768	; 0x300
   12f3a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   12f3e:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   12f42:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   12f46:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   12f4a:	d058      	beq.n	12ffe <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   12f4c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   12f50:	bf0c      	ite	eq
   12f52:	2204      	moveq	r2, #4
   12f54:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   12f56:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   12f5a:	bf08      	it	eq
   12f5c:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   12f5e:	f013 0f01 	tst.w	r3, #1
   12f62:	ea4f 0180 	mov.w	r1, r0, lsl #2
   12f66:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 13034 <gpio_nrf5_config+0x114>
   12f6a:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   12f6e:	d04f      	beq.n	13010 <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   12f70:	2a0c      	cmp	r2, #12
   12f72:	d146      	bne.n	13002 <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   12f74:	2701      	movs	r7, #1
   12f76:	40a7      	lsls	r7, r4
   12f78:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   12f7c:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   12f7e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   12f82:	f041 0103 	orr.w	r1, r1, #3
   12f86:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   12f88:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   12f8c:	f013 0002 	ands.w	r0, r3, #2
   12f90:	d049      	beq.n	13026 <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   12f92:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   12f94:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   12f96:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   12f9a:	d5c8      	bpl.n	12f2e <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   12f9c:	065a      	lsls	r2, r3, #25
   12f9e:	d43d      	bmi.n	1301c <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   12fa0:	f013 0f04 	tst.w	r3, #4
   12fa4:	bf14      	ite	ne
   12fa6:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   12faa:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   12fae:	4e1f      	ldr	r6, [pc, #124]	; (1302c <gpio_nrf5_config+0x10c>)
   12fb0:	6837      	ldr	r7, [r6, #0]
   12fb2:	4638      	mov	r0, r7
   12fb4:	f7ed f946 	bl	244 <__popcountsi2>
   12fb8:	2808      	cmp	r0, #8
   12fba:	d032      	beq.n	13022 <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   12fbc:	4641      	mov	r1, r8
   12fbe:	4620      	mov	r0, r4
   12fc0:	f7ff ff4c 	bl	12e5c <gpiote_find_channel.isra.4>
		if (i < 0) {
   12fc4:	2800      	cmp	r0, #0
   12fc6:	da08      	bge.n	12fda <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   12fc8:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   12fca:	fa93 f0a3 	rbit	r0, r3
   12fce:	2b00      	cmp	r3, #0
   12fd0:	fab0 f080 	clz	r0, r0
   12fd4:	bf08      	it	eq
   12fd6:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   12fda:	2301      	movs	r3, #1
   12fdc:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   12fde:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   12fe0:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   12fe2:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   12fe6:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   12fe8:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   12fec:	4b10      	ldr	r3, [pc, #64]	; (13030 <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   12fee:	f044 0401 	orr.w	r4, r4, #1
   12ff2:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   12ff4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   12ff8:	2000      	movs	r0, #0
   12ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   12ffe:	220c      	movs	r2, #12
   13000:	e7a9      	b.n	12f56 <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   13002:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   13004:	bf02      	ittt	eq
   13006:	2701      	moveq	r7, #1
   13008:	40a7      	lsleq	r7, r4
   1300a:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   1300e:	e7b5      	b.n	12f7c <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   13010:	4461      	add	r1, ip
   13012:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   13016:	430a      	orrs	r2, r1
   13018:	433a      	orrs	r2, r7
   1301a:	e7b5      	b.n	12f88 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   1301c:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   13020:	e7c5      	b.n	12fae <gpio_nrf5_config+0x8e>
			return -EIO;
   13022:	f06f 0004 	mvn.w	r0, #4
}
   13026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1302a:	bf00      	nop
   1302c:	200016fc 	.word	0x200016fc
   13030:	40006000 	.word	0x40006000
   13034:	0001816c 	.word	0x0001816c

00013038 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   13038:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   1303a:	2200      	movs	r2, #0
   1303c:	2105      	movs	r1, #5
   1303e:	2006      	movs	r0, #6
   13040:	f7ee fc3c 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   13044:	2006      	movs	r0, #6
   13046:	f7ee fc07 	bl	1858 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   1304a:	2000      	movs	r0, #0
   1304c:	bd08      	pop	{r3, pc}
	...

00013050 <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13050:	2100      	movs	r1, #0
{
   13052:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   13054:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   13056:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   13058:	2501      	movs	r5, #1
   1305a:	008b      	lsls	r3, r1, #2
   1305c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13060:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   13064:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   13068:	b140      	cbz	r0, 1307c <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   1306a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   1306e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   13072:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   13076:	fa05 f303 	lsl.w	r3, r5, r3
   1307a:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   1307c:	3101      	adds	r1, #1
   1307e:	2908      	cmp	r1, #8
   13080:	d1eb      	bne.n	1305a <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   13082:	4e08      	ldr	r6, [pc, #32]	; (130a4 <gpio_nrf5_port_isr+0x54>)
   13084:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   13086:	689d      	ldr	r5, [r3, #8]
   13088:	681c      	ldr	r4, [r3, #0]
   1308a:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   1308c:	b14c      	cbz	r4, 130a2 <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   1308e:	68a3      	ldr	r3, [r4, #8]
   13090:	421d      	tst	r5, r3
   13092:	d004      	beq.n	1309e <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   13094:	6863      	ldr	r3, [r4, #4]
   13096:	462a      	mov	r2, r5
   13098:	4621      	mov	r1, r4
   1309a:	4630      	mov	r0, r6
   1309c:	4798      	blx	r3
	return node->next;
   1309e:	6824      	ldr	r4, [r4, #0]
   130a0:	e7f4      	b.n	1308c <gpio_nrf5_port_isr+0x3c>
   130a2:	bd70      	pop	{r4, r5, r6, pc}
   130a4:	20003edc 	.word	0x20003edc

000130a8 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   130a8:	4b03      	ldr	r3, [pc, #12]	; (130b8 <uart_nrfx_err_check+0x10>)
   130aa:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   130ac:	b118      	cbz	r0, 130b6 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   130ae:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   130b2:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   130b6:	4770      	bx	lr
   130b8:	40002124 	.word	0x40002124

000130bc <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   130bc:	4b07      	ldr	r3, [pc, #28]	; (130dc <uart_nrfx_poll_out+0x20>)
   130be:	2200      	movs	r2, #0
   130c0:	601a      	str	r2, [r3, #0]
{
   130c2:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   130c4:	681a      	ldr	r2, [r3, #0]
   130c6:	9201      	str	r2, [sp, #4]
    (void)dummy;
   130c8:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   130ca:	4a05      	ldr	r2, [pc, #20]	; (130e0 <uart_nrfx_poll_out+0x24>)
   130cc:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   130d0:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   130d2:	2a00      	cmp	r2, #0
   130d4:	d0fc      	beq.n	130d0 <uart_nrfx_poll_out+0x14>
}
   130d6:	4608      	mov	r0, r1
   130d8:	b002      	add	sp, #8
   130da:	4770      	bx	lr
   130dc:	4000211c 	.word	0x4000211c
   130e0:	40002000 	.word	0x40002000

000130e4 <uart_nrfx_poll_in>:
   130e4:	4b08      	ldr	r3, [pc, #32]	; (13108 <uart_nrfx_poll_in+0x24>)
   130e6:	681a      	ldr	r2, [r3, #0]
{
   130e8:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   130ea:	b152      	cbz	r2, 13102 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   130ec:	2000      	movs	r0, #0
   130ee:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   130f0:	681b      	ldr	r3, [r3, #0]
   130f2:	9301      	str	r3, [sp, #4]
    (void)dummy;
   130f4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   130f6:	4b05      	ldr	r3, [pc, #20]	; (1310c <uart_nrfx_poll_in+0x28>)
   130f8:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   130fc:	700b      	strb	r3, [r1, #0]
}
   130fe:	b002      	add	sp, #8
   13100:	4770      	bx	lr
		return -1;
   13102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13106:	e7fa      	b.n	130fe <uart_nrfx_poll_in+0x1a>
   13108:	40002108 	.word	0x40002108
   1310c:	40002000 	.word	0x40002000

00013110 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   13110:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   13112:	4819      	ldr	r0, [pc, #100]	; (13178 <uart_nrfx_init+0x68>)
   13114:	f000 f98c 	bl	13430 <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   13118:	6843      	ldr	r3, [r0, #4]
   1311a:	4604      	mov	r4, r0
   1311c:	681d      	ldr	r5, [r3, #0]
   1311e:	2206      	movs	r2, #6
   13120:	f240 1301 	movw	r3, #257	; 0x101
   13124:	2100      	movs	r1, #0
   13126:	47a8      	blx	r5
   13128:	6863      	ldr	r3, [r4, #4]
   1312a:	681d      	ldr	r5, [r3, #0]
   1312c:	2300      	movs	r3, #0
   1312e:	4619      	mov	r1, r3
   13130:	2208      	movs	r2, #8
   13132:	4620      	mov	r0, r4
   13134:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   13136:	4b11      	ldr	r3, [pc, #68]	; (1317c <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13138:	4911      	ldr	r1, [pc, #68]	; (13180 <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   1313a:	2208      	movs	r2, #8
   1313c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   13140:	2206      	movs	r2, #6
   13142:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   13146:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   13148:	4a0e      	ldr	r2, [pc, #56]	; (13184 <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   1314a:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   1314e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   13152:	2204      	movs	r2, #4
   13154:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13158:	4a0b      	ldr	r2, [pc, #44]	; (13188 <uart_nrfx_init+0x78>)
   1315a:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1315c:	6812      	ldr	r2, [r2, #0]
   1315e:	9201      	str	r2, [sp, #4]
    (void)dummy;
   13160:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13162:	4a0a      	ldr	r2, [pc, #40]	; (1318c <uart_nrfx_init+0x7c>)
   13164:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13166:	6812      	ldr	r2, [r2, #0]
   13168:	9200      	str	r2, [sp, #0]
    (void)dummy;
   1316a:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1316c:	2201      	movs	r2, #1
   1316e:	600a      	str	r2, [r1, #0]
   13170:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   13172:	b003      	add	sp, #12
   13174:	bd30      	pop	{r4, r5, pc}
   13176:	bf00      	nop
   13178:	000181d0 	.word	0x000181d0
   1317c:	40002000 	.word	0x40002000
   13180:	40002008 	.word	0x40002008
   13184:	01d7e000 	.word	0x01d7e000
   13188:	4000211c 	.word	0x4000211c
   1318c:	40002108 	.word	0x40002108

00013190 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   13190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   13194:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   13196:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   13198:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   1319a:	42a3      	cmp	r3, r4
	d = &rand[octets];
   1319c:	440a      	add	r2, r1
	s = &rng->rand[first];
   1319e:	4406      	add	r6, r0
	if (first <= last) {
   131a0:	d81f      	bhi.n	131e2 <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   131a2:	1ae4      	subs	r4, r4, r3
   131a4:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   131a6:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   131a8:	bf3e      	ittt	cc
   131aa:	1a64      	subcc	r4, r4, r1
   131ac:	b2e7      	uxtbcc	r7, r4
   131ae:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   131b0:	4423      	add	r3, r4
		octets -= avail;
   131b2:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   131b6:	bf28      	it	cs
   131b8:	2700      	movcs	r7, #0
		first += avail;
   131ba:	b2db      	uxtb	r3, r3
		octets -= avail;
   131bc:	b2c9      	uxtb	r1, r1
   131be:	4434      	add	r4, r6

		while (avail--) {
   131c0:	42a6      	cmp	r6, r4
   131c2:	d109      	bne.n	131d8 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   131c4:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   131c6:	7843      	ldrb	r3, [r0, #1]
   131c8:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   131ca:	bf82      	ittt	hi
   131cc:	4b20      	ldrhi	r3, [pc, #128]	; (13250 <get+0xc0>)
   131ce:	2201      	movhi	r2, #1
   131d0:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   131d2:	4608      	mov	r0, r1
   131d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   131d8:	f816 5b01 	ldrb.w	r5, [r6], #1
   131dc:	f802 5d01 	strb.w	r5, [r2, #-1]!
   131e0:	e7ee      	b.n	131c0 <get+0x30>
		avail = rng->count - first;
   131e2:	7805      	ldrb	r5, [r0, #0]
   131e4:	1aed      	subs	r5, r5, r3
   131e6:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   131e8:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   131ea:	bf3f      	itttt	cc
   131ec:	1a67      	subcc	r7, r4, r1
   131ee:	19ed      	addcc	r5, r5, r7
   131f0:	b2ef      	uxtbcc	r7, r5
   131f2:	460d      	movcc	r5, r1
			first += avail;
   131f4:	bf38      	it	cc
   131f6:	185b      	addcc	r3, r3, r1
		octets -= avail;
   131f8:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   131fc:	bf32      	itee	cc
   131fe:	b2db      	uxtbcc	r3, r3
   13200:	4627      	movcs	r7, r4
			first = 0;
   13202:	2300      	movcs	r3, #0
		octets -= avail;
   13204:	b2c9      	uxtb	r1, r1
   13206:	4696      	mov	lr, r2
   13208:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   1320c:	4566      	cmp	r6, ip
   1320e:	d119      	bne.n	13244 <get+0xb4>
   13210:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   13212:	2900      	cmp	r1, #0
   13214:	d0d6      	beq.n	131c4 <get+0x34>
   13216:	2c00      	cmp	r4, #0
   13218:	d0d4      	beq.n	131c4 <get+0x34>
			if (octets < last) {
   1321a:	428c      	cmp	r4, r1
   1321c:	bf8a      	itet	hi
   1321e:	460b      	movhi	r3, r1
   13220:	4623      	movls	r3, r4
				remaining = last - octets;
   13222:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   13224:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   13228:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   1322c:	bf8c      	ite	hi
   1322e:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   13230:	2700      	movls	r7, #0
			octets -= last;
   13232:	b2c9      	uxtb	r1, r1
   13234:	18f4      	adds	r4, r6, r3
			while (last--) {
   13236:	42a6      	cmp	r6, r4
   13238:	d0c4      	beq.n	131c4 <get+0x34>
				*(--d) = *s++;
   1323a:	f816 5b01 	ldrb.w	r5, [r6], #1
   1323e:	f802 5d01 	strb.w	r5, [r2, #-1]!
   13242:	e7f8      	b.n	13236 <get+0xa6>
			*(--d) = *s++;
   13244:	f816 8b01 	ldrb.w	r8, [r6], #1
   13248:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   1324c:	e7de      	b.n	1320c <get+0x7c>
   1324e:	bf00      	nop
   13250:	4000d000 	.word	0x4000d000

00013254 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   13254:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   13256:	b1d0      	cbz	r0, 1328e <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   13258:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   1325a:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   1325c:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   1325e:	1c53      	adds	r3, r2, #1
   13260:	b2db      	uxtb	r3, r3
		last = 0;
   13262:	42ab      	cmp	r3, r5
   13264:	bf08      	it	eq
   13266:	2300      	moveq	r3, #0
	if (last == rng->first) {
   13268:	42a3      	cmp	r3, r4
   1326a:	d010      	beq.n	1328e <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   1326c:	b161      	cbz	r1, 13288 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   1326e:	490a      	ldr	r1, [pc, #40]	; (13298 <isr+0x44>)
   13270:	4402      	add	r2, r0
   13272:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   13276:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   13278:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   1327a:	3301      	adds	r3, #1
   1327c:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   1327e:	429d      	cmp	r5, r3
   13280:	bf08      	it	eq
   13282:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   13284:	42a3      	cmp	r3, r4
   13286:	d005      	beq.n	13294 <isr+0x40>
		return 0;
	}

	return -EBUSY;
   13288:	f06f 000f 	mvn.w	r0, #15
   1328c:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   1328e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13292:	bd30      	pop	{r4, r5, pc}
		return 0;
   13294:	2000      	movs	r0, #0
}
   13296:	bd30      	pop	{r4, r5, pc}
   13298:	4000d000 	.word	0x4000d000

0001329c <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   1329c:	07db      	lsls	r3, r3, #31
{
   1329e:	b570      	push	{r4, r5, r6, lr}
   132a0:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   132a2:	d507      	bpl.n	132b4 <entropy_nrf5_get_entropy_isr+0x18>
   132a4:	4613      	mov	r3, r2
   132a6:	4a0d      	ldr	r2, [pc, #52]	; (132dc <entropy_nrf5_get_entropy_isr+0x40>)
   132a8:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   132aa:	2500      	movs	r5, #0
	while (len) {
   132ac:	b94b      	cbnz	r3, 132c2 <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   132ae:	6050      	str	r0, [r2, #4]

	return cnt;
   132b0:	4620      	mov	r0, r4
}
   132b2:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   132b4:	6880      	ldr	r0, [r0, #8]
   132b6:	460a      	mov	r2, r1
   132b8:	303c      	adds	r0, #60	; 0x3c
   132ba:	b2e1      	uxtb	r1, r4
   132bc:	f7ff ff68 	bl	13190 <get>
   132c0:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   132c2:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   132c6:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   132c8:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   132cc:	2e00      	cmp	r6, #0
   132ce:	d0fb      	beq.n	132c8 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   132d0:	3b01      	subs	r3, #1
   132d2:	b29b      	uxth	r3, r3
   132d4:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   132d8:	54ce      	strb	r6, [r1, r3]
   132da:	e7e7      	b.n	132ac <entropy_nrf5_get_entropy_isr+0x10>
   132dc:	4000d000 	.word	0x4000d000

000132e0 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   132e0:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   132e2:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   132e4:	2201      	movs	r2, #1
   132e6:	4611      	mov	r1, r2
   132e8:	4620      	mov	r0, r4
   132ea:	f000 fd7f 	bl	13dec <_impl_k_sem_init>
   132ee:	f104 0018 	add.w	r0, r4, #24
   132f2:	2201      	movs	r2, #1
   132f4:	2100      	movs	r1, #0
   132f6:	f000 fd79 	bl	13dec <_impl_k_sem_init>
	rng->threshold = threshold;
   132fa:	2304      	movs	r3, #4
   132fc:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   13300:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   13302:	2500      	movs	r5, #0
	rng->threshold = threshold;
   13304:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   13308:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1330a:	4b11      	ldr	r3, [pc, #68]	; (13350 <entropy_nrf5_init+0x70>)
	rng->count = len;
   1330c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   13310:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   13312:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   13316:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   1331a:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   1331e:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   13322:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   13326:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1332a:	f042 0201 	orr.w	r2, r2, #1
   1332e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   13332:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   13334:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   13338:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   1333a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   1333e:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   13340:	462a      	mov	r2, r5
   13342:	f7ee fabb 	bl	18bc <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   13346:	4630      	mov	r0, r6
   13348:	f7ee fa86 	bl	1858 <_arch_irq_enable>

	return 0;
}
   1334c:	4628      	mov	r0, r5
   1334e:	bd70      	pop	{r4, r5, r6, pc}
   13350:	4000d000 	.word	0x4000d000

00013354 <isr_rand>:
{
   13354:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   13356:	4b12      	ldr	r3, [pc, #72]	; (133a0 <isr_rand+0x4c>)
   13358:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1335c:	b1fb      	cbz	r3, 1339e <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   1335e:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   13360:	2101      	movs	r1, #1
   13362:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   13366:	f7ff ff75 	bl	13254 <isr>
		if (ret != -EBUSY) {
   1336a:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   1336e:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   13370:	d00d      	beq.n	1338e <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   13372:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   13376:	bf14      	ite	ne
   13378:	2100      	movne	r1, #0
   1337a:	2101      	moveq	r1, #1
   1337c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   13380:	f7ff ff68 	bl	13254 <isr>
   13384:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   13386:	f105 0018 	add.w	r0, r5, #24
   1338a:	f000 fd38 	bl	13dfe <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   1338e:	4b04      	ldr	r3, [pc, #16]	; (133a0 <isr_rand+0x4c>)
   13390:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   13392:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   13394:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   13398:	bf1c      	itt	ne
   1339a:	2201      	movne	r2, #1
   1339c:	605a      	strne	r2, [r3, #4]
   1339e:	bd38      	pop	{r3, r4, r5, pc}
   133a0:	4000d000 	.word	0x4000d000

000133a4 <entropy_nrf5_get_entropy>:
{
   133a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   133a8:	6885      	ldr	r5, [r0, #8]
{
   133aa:	460f      	mov	r7, r1
   133ac:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   133ae:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   133b2:	b914      	cbnz	r4, 133ba <entropy_nrf5_get_entropy+0x16>
}
   133b4:	4620      	mov	r0, r4
   133b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   133ba:	2cff      	cmp	r4, #255	; 0xff
   133bc:	4623      	mov	r3, r4
   133be:	bf28      	it	cs
   133c0:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   133c2:	1ae4      	subs	r4, r4, r3
   133c4:	b2de      	uxtb	r6, r3
   133c6:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   133c8:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   133cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   133d0:	4628      	mov	r0, r5
   133d2:	f000 fd3c 	bl	13e4e <_impl_k_sem_take>
   133d6:	4631      	mov	r1, r6
   133d8:	463a      	mov	r2, r7
   133da:	4648      	mov	r0, r9
   133dc:	f7ff fed8 	bl	13190 <get>
   133e0:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   133e2:	4628      	mov	r0, r5
   133e4:	f000 fd0b 	bl	13dfe <_impl_k_sem_give>
			if (len8) {
   133e8:	2e00      	cmp	r6, #0
   133ea:	d0e2      	beq.n	133b2 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   133ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   133f0:	4640      	mov	r0, r8
   133f2:	f000 fd2c 	bl	13e4e <_impl_k_sem_take>
   133f6:	e7e9      	b.n	133cc <entropy_nrf5_get_entropy+0x28>

000133f8 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   133f8:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   133fa:	4802      	ldr	r0, [pc, #8]	; (13404 <entropy_nrf_get_entropy_isr+0xc>)
   133fc:	460a      	mov	r2, r1
   133fe:	4619      	mov	r1, r3
   13400:	f7ff bec6 	b.w	13190 <get>
   13404:	2000173c 	.word	0x2000173c

00013408 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   13408:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   1340a:	4b08      	ldr	r3, [pc, #32]	; (1342c <_sys_device_do_config_level+0x24>)
   1340c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   13410:	3001      	adds	r0, #1
   13412:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   13416:	4620      	mov	r0, r4
   13418:	42a8      	cmp	r0, r5
   1341a:	f104 040c 	add.w	r4, r4, #12
   1341e:	d300      	bcc.n	13422 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   13420:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   13422:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   13426:	685b      	ldr	r3, [r3, #4]
   13428:	4798      	blx	r3
   1342a:	e7f4      	b.n	13416 <_sys_device_do_config_level+0xe>
   1342c:	000181ec 	.word	0x000181ec

00013430 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   13430:	4b10      	ldr	r3, [pc, #64]	; (13474 <device_get_binding+0x44>)
{
   13432:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   13434:	4c10      	ldr	r4, [pc, #64]	; (13478 <device_get_binding+0x48>)
{
   13436:	4605      	mov	r5, r0
   13438:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1343a:	429c      	cmp	r4, r3
   1343c:	d104      	bne.n	13448 <device_get_binding+0x18>
   1343e:	4c0e      	ldr	r4, [pc, #56]	; (13478 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   13440:	42b4      	cmp	r4, r6
   13442:	d109      	bne.n	13458 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   13444:	2400      	movs	r4, #0
   13446:	e012      	b.n	1346e <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   13448:	6862      	ldr	r2, [r4, #4]
   1344a:	b11a      	cbz	r2, 13454 <device_get_binding+0x24>
   1344c:	6822      	ldr	r2, [r4, #0]
   1344e:	6812      	ldr	r2, [r2, #0]
   13450:	42aa      	cmp	r2, r5
   13452:	d00c      	beq.n	1346e <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   13454:	340c      	adds	r4, #12
   13456:	e7f0      	b.n	1343a <device_get_binding+0xa>
		if (!info->driver_api) {
   13458:	6863      	ldr	r3, [r4, #4]
   1345a:	b90b      	cbnz	r3, 13460 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1345c:	340c      	adds	r4, #12
   1345e:	e7ef      	b.n	13440 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   13460:	6823      	ldr	r3, [r4, #0]
   13462:	4628      	mov	r0, r5
   13464:	6819      	ldr	r1, [r3, #0]
   13466:	f7ee fba7 	bl	1bb8 <strcmp>
   1346a:	2800      	cmp	r0, #0
   1346c:	d1f6      	bne.n	1345c <device_get_binding+0x2c>
}
   1346e:	4620      	mov	r0, r4
   13470:	bd70      	pop	{r4, r5, r6, pc}
   13472:	bf00      	nop
   13474:	20003f0c 	.word	0x20003f0c
   13478:	20003e7c 	.word	0x20003e7c

0001347c <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   1347c:	1c43      	adds	r3, r0, #1
   1347e:	d003      	beq.n	13488 <_sys_power_save_idle_exit+0xc>
   13480:	4b03      	ldr	r3, [pc, #12]	; (13490 <_sys_power_save_idle_exit+0x14>)
   13482:	681b      	ldr	r3, [r3, #0]
   13484:	4298      	cmp	r0, r3
   13486:	db01      	blt.n	1348c <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   13488:	f7ed bfae 	b.w	13e8 <_timer_idle_exit>
   1348c:	4770      	bx	lr
   1348e:	bf00      	nop
   13490:	20003e70 	.word	0x20003e70

00013494 <idle>:
	return list->head == list;
   13494:	4d0f      	ldr	r5, [pc, #60]	; (134d4 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   13496:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   13498:	4f0f      	ldr	r7, [pc, #60]	; (134d8 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1349a:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   1349e:	f04f 0220 	mov.w	r2, #32
   134a2:	f3ef 8311 	mrs	r3, BASEPRI
   134a6:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   134aa:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   134ac:	42b3      	cmp	r3, r6
   134ae:	d00a      	beq.n	134c6 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   134b0:	b14b      	cbz	r3, 134c6 <idle+0x32>
   134b2:	691c      	ldr	r4, [r3, #16]
   134b4:	1c63      	adds	r3, r4, #1
   134b6:	d008      	beq.n	134ca <idle+0x36>
   134b8:	683b      	ldr	r3, [r7, #0]
   134ba:	42a3      	cmp	r3, r4
   134bc:	dd05      	ble.n	134ca <idle+0x36>
	_kernel.idle = ticks;
   134be:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   134c0:	f7ee fa52 	bl	1968 <k_cpu_idle>
   134c4:	e7eb      	b.n	1349e <idle+0xa>
   134c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   134ca:	4620      	mov	r0, r4
   134cc:	f7ed ff6e 	bl	13ac <_timer_idle_enter>
   134d0:	e7f5      	b.n	134be <idle+0x2a>
   134d2:	bf00      	nop
   134d4:	20001950 	.word	0x20001950
   134d8:	20003e70 	.word	0x20003e70

000134dc <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   134dc:	4802      	ldr	r0, [pc, #8]	; (134e8 <_bss_zero+0xc>)
   134de:	4a03      	ldr	r2, [pc, #12]	; (134ec <_bss_zero+0x10>)
   134e0:	2100      	movs	r1, #0
   134e2:	1a12      	subs	r2, r2, r0
   134e4:	f7ee bbb6 	b.w	1c54 <memset>
   134e8:	20000000 	.word	0x20000000
   134ec:	20001a10 	.word	0x20001a10

000134f0 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   134f0:	4802      	ldr	r0, [pc, #8]	; (134fc <_data_copy+0xc>)
   134f2:	4a03      	ldr	r2, [pc, #12]	; (13500 <_data_copy+0x10>)
   134f4:	4903      	ldr	r1, [pc, #12]	; (13504 <_data_copy+0x14>)
   134f6:	1a12      	subs	r2, r2, r0
   134f8:	f7ee bb80 	b.w	1bfc <memcpy>
   134fc:	20003a28 	.word	0x20003a28
   13500:	20003fb4 	.word	0x20003fb4
   13504:	0001823c 	.word	0x0001823c

00013508 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   13508:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1350a:	2002      	movs	r0, #2
   1350c:	f7ff ff7c 	bl	13408 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   13510:	4807      	ldr	r0, [pc, #28]	; (13530 <bg_thread_main+0x28>)
   13512:	f7ed fd3b 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   13516:	2003      	movs	r0, #3
   13518:	f7ff ff76 	bl	13408 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   1351c:	f000 feaa 	bl	14274 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   13520:	f7ed f8ce 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   13524:	4a03      	ldr	r2, [pc, #12]	; (13534 <bg_thread_main+0x2c>)
   13526:	7a13      	ldrb	r3, [r2, #8]
   13528:	f023 0301 	bic.w	r3, r3, #1
   1352c:	7213      	strb	r3, [r2, #8]
   1352e:	bd08      	pop	{r3, pc}
   13530:	00018208 	.word	0x00018208
   13534:	200017c0 	.word	0x200017c0

00013538 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   13538:	b580      	push	{r7, lr}
   1353a:	b086      	sub	sp, #24
   1353c:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   1353e:	f7ed ffd7 	bl	14f0 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   13542:	4b30      	ldr	r3, [pc, #192]	; (13604 <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   13544:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13548:	4b2f      	ldr	r3, [pc, #188]	; (13608 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   1354a:	4d30      	ldr	r5, [pc, #192]	; (1360c <_Cstart+0xd4>)
   1354c:	4e30      	ldr	r6, [pc, #192]	; (13610 <_Cstart+0xd8>)
   1354e:	2400      	movs	r4, #0
   13550:	22e0      	movs	r2, #224	; 0xe0
   13552:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   13556:	77dc      	strb	r4, [r3, #31]
   13558:	761c      	strb	r4, [r3, #24]
   1355a:	765c      	strb	r4, [r3, #25]
   1355c:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1355e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13560:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   13564:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   13566:	f7ee f96f 	bl	1848 <_FaultInit>
	_CpuIdleInit();
   1356a:	f7ee f9f7 	bl	195c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1356e:	4620      	mov	r0, r4
   13570:	f7ff ff4a 	bl	13408 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   13574:	2001      	movs	r0, #1
   13576:	f7ff ff47 	bl	13408 <_sys_device_do_config_level>
	_sched_init();
   1357a:	f000 fbf9 	bl	13d70 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   1357e:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   13580:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   13582:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13586:	9304      	str	r3, [sp, #16]
   13588:	9403      	str	r4, [sp, #12]
   1358a:	9402      	str	r4, [sp, #8]
   1358c:	9401      	str	r4, [sp, #4]
   1358e:	9400      	str	r4, [sp, #0]
   13590:	4b20      	ldr	r3, [pc, #128]	; (13614 <_Cstart+0xdc>)
   13592:	4921      	ldr	r1, [pc, #132]	; (13618 <_Cstart+0xe0>)
   13594:	4628      	mov	r0, r5
   13596:	f000 fe15 	bl	141c4 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1359a:	7a6b      	ldrb	r3, [r5, #9]
   1359c:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   135a0:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   135a4:	726a      	strb	r2, [r5, #9]
   135a6:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   135a8:	d102      	bne.n	135b0 <_Cstart+0x78>
   135aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   135ac:	3301      	adds	r3, #1
   135ae:	d024      	beq.n	135fa <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   135b0:	2301      	movs	r3, #1
   135b2:	4e1a      	ldr	r6, [pc, #104]	; (1361c <_Cstart+0xe4>)
   135b4:	9304      	str	r3, [sp, #16]
   135b6:	230f      	movs	r3, #15
   135b8:	9303      	str	r3, [sp, #12]
   135ba:	2300      	movs	r3, #0
   135bc:	9302      	str	r3, [sp, #8]
   135be:	9301      	str	r3, [sp, #4]
   135c0:	9300      	str	r3, [sp, #0]
   135c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   135c6:	4b16      	ldr	r3, [pc, #88]	; (13620 <_Cstart+0xe8>)
   135c8:	4916      	ldr	r1, [pc, #88]	; (13624 <_Cstart+0xec>)
   135ca:	4630      	mov	r0, r6
   135cc:	f000 fdfa 	bl	141c4 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   135d0:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   135d2:	60e6      	str	r6, [r4, #12]
   135d4:	f023 0304 	bic.w	r3, r3, #4
   135d8:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   135da:	4b13      	ldr	r3, [pc, #76]	; (13628 <_Cstart+0xf0>)
   135dc:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   135de:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   135e0:	4b12      	ldr	r3, [pc, #72]	; (1362c <_Cstart+0xf4>)

	_current = main_thread;
   135e2:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   135e4:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   135e8:	4c11      	ldr	r4, [pc, #68]	; (13630 <_Cstart+0xf8>)
   135ea:	4a0a      	ldr	r2, [pc, #40]	; (13614 <_Cstart+0xdc>)
   135ec:	f383 8809 	msr	PSP, r3
   135f0:	2100      	movs	r1, #0
   135f2:	f381 8811 	msr	BASEPRI, r1
   135f6:	4610      	mov	r0, r2
   135f8:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   135fa:	4628      	mov	r0, r5
   135fc:	f000 fab4 	bl	13b68 <_add_thread_to_ready_q>
   13600:	e7d6      	b.n	135b0 <_Cstart+0x78>
   13602:	bf00      	nop
   13604:	20003628 	.word	0x20003628
   13608:	e000ed00 	.word	0xe000ed00
   1360c:	200017c0 	.word	0x200017c0
   13610:	20001950 	.word	0x20001950
   13614:	00013509 	.word	0x00013509
   13618:	200028e8 	.word	0x200028e8
   1361c:	20001750 	.word	0x20001750
   13620:	00013495 	.word	0x00013495
   13624:	20002ce8 	.word	0x20002ce8
   13628:	20001964 	.word	0x20001964
   1362c:	20002ce8 	.word	0x20002ce8
   13630:	00000899 	.word	0x00000899

00013634 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   13634:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   13636:	4c07      	ldr	r4, [pc, #28]	; (13654 <init_static_pools+0x20>)
   13638:	4d07      	ldr	r5, [pc, #28]	; (13658 <init_static_pools+0x24>)
   1363a:	42ac      	cmp	r4, r5
   1363c:	d301      	bcc.n	13642 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1363e:	2000      	movs	r0, #0
   13640:	bd38      	pop	{r3, r4, r5, pc}
   13642:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   13646:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   13648:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   1364a:	4620      	mov	r0, r4
   1364c:	f7ed f95f 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   13650:	341c      	adds	r4, #28
   13652:	e7f2      	b.n	1363a <init_static_pools+0x6>
   13654:	20003f0c 	.word	0x20003f0c
   13658:	20003f0c 	.word	0x20003f0c

0001365c <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   1365c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   13660:	1e1d      	subs	r5, r3, #0
{
   13662:	b085      	sub	sp, #20
   13664:	4607      	mov	r7, r0
   13666:	460c      	mov	r4, r1
   13668:	4692      	mov	sl, r2
	if (timeout > 0) {
   1366a:	dd4c      	ble.n	13706 <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   1366c:	f000 fc16 	bl	13e9c <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   13670:	f105 0309 	add.w	r3, r5, #9
   13674:	220a      	movs	r2, #10
   13676:	fbb3 f3f2 	udiv	r3, r3, r2
   1367a:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   1367e:	4b23      	ldr	r3, [pc, #140]	; (1370c <k_mem_pool_alloc+0xb0>)
   13680:	4e23      	ldr	r6, [pc, #140]	; (13710 <k_mem_pool_alloc+0xb4>)
   13682:	1afb      	subs	r3, r7, r3
   13684:	109b      	asrs	r3, r3, #2
   13686:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   13688:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   1368a:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   1368e:	9400      	str	r4, [sp, #0]
   13690:	ab03      	add	r3, sp, #12
   13692:	aa02      	add	r2, sp, #8
   13694:	4651      	mov	r1, sl
   13696:	4638      	mov	r0, r7
   13698:	f7ed f984 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   1369c:	f110 0f0b 	cmn.w	r0, #11
   136a0:	d10b      	bne.n	136ba <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   136a2:	9400      	str	r4, [sp, #0]
   136a4:	ab03      	add	r3, sp, #12
   136a6:	aa02      	add	r2, sp, #8
   136a8:	4651      	mov	r1, sl
   136aa:	4638      	mov	r0, r7
   136ac:	f7ed f97a 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   136b0:	f110 0f0b 	cmn.w	r0, #11
   136b4:	bf08      	it	eq
   136b6:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   136ba:	7963      	ldrb	r3, [r4, #5]
   136bc:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   136be:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   136c0:	f362 0303 	bfi	r3, r2, #0, #4
   136c4:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   136c6:	6863      	ldr	r3, [r4, #4]
   136c8:	9a03      	ldr	r2, [sp, #12]
   136ca:	f362 331f 	bfi	r3, r2, #12, #20
   136ce:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   136d0:	b1b0      	cbz	r0, 13700 <k_mem_pool_alloc+0xa4>
   136d2:	b1ad      	cbz	r5, 13700 <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   136d4:	f110 0f0c 	cmn.w	r0, #12
   136d8:	d112      	bne.n	13700 <k_mem_pool_alloc+0xa4>
   136da:	f04f 0320 	mov.w	r3, #32
   136de:	f3ef 8011 	mrs	r0, BASEPRI
   136e2:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   136e6:	462a      	mov	r2, r5
   136e8:	4659      	mov	r1, fp
   136ea:	f000 faeb 	bl	13cc4 <_pend_current_thread>

		if (timeout != K_FOREVER) {
   136ee:	1c6b      	adds	r3, r5, #1
   136f0:	d0cd      	beq.n	1368e <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   136f2:	f000 fbd3 	bl	13e9c <_tick_get>

			if (timeout < 0) {
   136f6:	ebb8 0500 	subs.w	r5, r8, r0
   136fa:	d5c8      	bpl.n	1368e <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   136fc:	f06f 000a 	mvn.w	r0, #10
}
   13700:	b005      	add	sp, #20
   13702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   13706:	f04f 0800 	mov.w	r8, #0
   1370a:	e7b8      	b.n	1367e <k_mem_pool_alloc+0x22>
   1370c:	20003f0c 	.word	0x20003f0c
   13710:	b6db6db7 	.word	0xb6db6db7

00013714 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   13714:	b570      	push	{r4, r5, r6, lr}
   13716:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   13718:	6802      	ldr	r2, [r0, #0]
   1371a:	7841      	ldrb	r1, [r0, #1]
   1371c:	4e13      	ldr	r6, [pc, #76]	; (1376c <k_mem_pool_free_id+0x58>)
   1371e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13722:	00a4      	lsls	r4, r4, #2
   13724:	0b12      	lsrs	r2, r2, #12
   13726:	f001 010f 	and.w	r1, r1, #15
   1372a:	1930      	adds	r0, r6, r4
   1372c:	f7ed f9ec 	bl	b08 <_sys_mem_pool_block_free>
   13730:	f04f 0320 	mov.w	r3, #32
   13734:	f3ef 8511 	mrs	r5, BASEPRI
   13738:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   1373c:	f104 0014 	add.w	r0, r4, #20
   13740:	4430      	add	r0, r6
   13742:	f000 fb05 	bl	13d50 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   13746:	b140      	cbz	r0, 1375a <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13748:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   1374c:	2b0d      	cmp	r3, #13
   1374e:	d804      	bhi.n	1375a <k_mem_pool_free_id+0x46>
   13750:	b133      	cbz	r3, 13760 <k_mem_pool_free_id+0x4c>
   13752:	4b07      	ldr	r3, [pc, #28]	; (13770 <k_mem_pool_free_id+0x5c>)
   13754:	685b      	ldr	r3, [r3, #4]
   13756:	051b      	lsls	r3, r3, #20
   13758:	d402      	bmi.n	13760 <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1375a:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   1375e:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   13760:	4628      	mov	r0, r5
}
   13762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   13766:	f000 b9a7 	b.w	13ab8 <_reschedule>
   1376a:	bf00      	nop
   1376c:	20003f0c 	.word	0x20003f0c
   13770:	e000ed00 	.word	0xe000ed00

00013774 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   13774:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   13776:	1d0a      	adds	r2, r1, #4
   13778:	d204      	bcs.n	13784 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1377a:	2300      	movs	r3, #0
   1377c:	4669      	mov	r1, sp
   1377e:	f7ff ff6d 	bl	1365c <k_mem_pool_alloc>
   13782:	b118      	cbz	r0, 1378c <k_mem_pool_malloc+0x18>
		return NULL;
   13784:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   13786:	b003      	add	sp, #12
   13788:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1378c:	2204      	movs	r2, #4
   1378e:	eb0d 0102 	add.w	r1, sp, r2
   13792:	9800      	ldr	r0, [sp, #0]
   13794:	f7ee fa32 	bl	1bfc <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   13798:	9800      	ldr	r0, [sp, #0]
   1379a:	3004      	adds	r0, #4
   1379c:	e7f3      	b.n	13786 <k_mem_pool_malloc+0x12>

0001379e <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   1379e:	b110      	cbz	r0, 137a6 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   137a0:	3804      	subs	r0, #4
   137a2:	f7ff bfb7 	b.w	13714 <k_mem_pool_free_id>
   137a6:	4770      	bx	lr

000137a8 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   137a8:	4b03      	ldr	r3, [pc, #12]	; (137b8 <z_thread_malloc+0x10>)
   137aa:	689b      	ldr	r3, [r3, #8]
{
   137ac:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   137ae:	6e58      	ldr	r0, [r3, #100]	; 0x64
   137b0:	b108      	cbz	r0, 137b6 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   137b2:	f7ff bfdf 	b.w	13774 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   137b6:	4770      	bx	lr
   137b8:	20001950 	.word	0x20001950

000137bc <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   137bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   137be:	4605      	mov	r5, r0
   137c0:	460f      	mov	r7, r1
   137c2:	4614      	mov	r4, r2
	__asm__ volatile(
   137c4:	f04f 0220 	mov.w	r2, #32
   137c8:	f3ef 8611 	mrs	r6, BASEPRI
   137cc:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   137d0:	b1a3      	cbz	r3, 137fc <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   137d2:	2008      	movs	r0, #8
   137d4:	f7ff ffe8 	bl	137a8 <z_thread_malloc>
		if (!anode) {
   137d8:	2800      	cmp	r0, #0
   137da:	d034      	beq.n	13846 <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   137dc:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   137de:	6044      	str	r4, [r0, #4]
   137e0:	6003      	str	r3, [r0, #0]
   137e2:	4604      	mov	r4, r0
   137e4:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   137e6:	b95f      	cbnz	r7, 13800 <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   137e8:	682a      	ldr	r2, [r5, #0]
   137ea:	f003 0303 	and.w	r3, r3, #3
   137ee:	4313      	orrs	r3, r2
   137f0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   137f2:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   137f4:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   137f6:	b973      	cbnz	r3, 13816 <queue_insert+0x5a>
	list->tail = node;
   137f8:	606c      	str	r4, [r5, #4]
   137fa:	e00c      	b.n	13816 <queue_insert+0x5a>
	node->next_and_flags = flags;
   137fc:	6023      	str	r3, [r4, #0]
   137fe:	e7f1      	b.n	137e4 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13800:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   13802:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   13806:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   1380a:	d114      	bne.n	13836 <queue_insert+0x7a>
   1380c:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1380e:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   13810:	b95a      	cbnz	r2, 1382a <queue_insert+0x6e>
	list->tail = node;
   13812:	606c      	str	r4, [r5, #4]
	list->head = node;
   13814:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   13816:	2104      	movs	r1, #4
   13818:	f105 0008 	add.w	r0, r5, #8
   1381c:	f000 ffb4 	bl	14788 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   13820:	4630      	mov	r0, r6
   13822:	f000 f949 	bl	13ab8 <_reschedule>
	return 0;
   13826:	2000      	movs	r0, #0
   13828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1382a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1382c:	f003 0303 	and.w	r3, r3, #3
   13830:	4323      	orrs	r3, r4
   13832:	6013      	str	r3, [r2, #0]
   13834:	e7e0      	b.n	137f8 <queue_insert+0x3c>
   13836:	4313      	orrs	r3, r2
   13838:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1383a:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1383c:	f002 0203 	and.w	r2, r2, #3
   13840:	4314      	orrs	r4, r2
   13842:	603c      	str	r4, [r7, #0]
   13844:	e7e7      	b.n	13816 <queue_insert+0x5a>
			return -ENOMEM;
   13846:	f06f 000b 	mvn.w	r0, #11
}
   1384a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001384c <z_queue_node_peek>:
{
   1384c:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   1384e:	4604      	mov	r4, r0
   13850:	b130      	cbz	r0, 13860 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13852:	6802      	ldr	r2, [r0, #0]
   13854:	0793      	lsls	r3, r2, #30
   13856:	d003      	beq.n	13860 <z_queue_node_peek+0x14>
		ret = anode->data;
   13858:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1385a:	b109      	cbz	r1, 13860 <z_queue_node_peek+0x14>
			k_free(anode);
   1385c:	f7ff ff9f 	bl	1379e <k_free>
}
   13860:	4620      	mov	r0, r4
   13862:	bd10      	pop	{r4, pc}

00013864 <_impl_k_queue_init>:
	list->head = NULL;
   13864:	2300      	movs	r3, #0
   13866:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   13868:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   1386a:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   1386e:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   13870:	60c3      	str	r3, [r0, #12]
   13872:	4770      	bx	lr

00013874 <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   13874:	460a      	mov	r2, r1
   13876:	2300      	movs	r3, #0
   13878:	6841      	ldr	r1, [r0, #4]
   1387a:	f7ff bf9f 	b.w	137bc <queue_insert>

0001387e <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   1387e:	2300      	movs	r3, #0
   13880:	460a      	mov	r2, r1
   13882:	4619      	mov	r1, r3
   13884:	f7ff bf9a 	b.w	137bc <queue_insert>

00013888 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   13888:	b538      	push	{r3, r4, r5, lr}
   1388a:	f04f 0320 	mov.w	r3, #32
   1388e:	f3ef 8511 	mrs	r5, BASEPRI
   13892:	f383 8811 	msr	BASEPRI, r3
   13896:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   13898:	b953      	cbnz	r3, 138b0 <k_queue_append_list+0x28>
	list->head = node;
   1389a:	6001      	str	r1, [r0, #0]
	list->tail = node;
   1389c:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   1389e:	2104      	movs	r1, #4
   138a0:	3008      	adds	r0, #8
   138a2:	f000 ff71 	bl	14788 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   138a6:	4628      	mov	r0, r5
}
   138a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   138ac:	f000 b904 	b.w	13ab8 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   138b0:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   138b2:	f004 0403 	and.w	r4, r4, #3
   138b6:	4321      	orrs	r1, r4
   138b8:	6019      	str	r1, [r3, #0]
   138ba:	e7ef      	b.n	1389c <k_queue_append_list+0x14>

000138bc <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   138bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138c0:	4604      	mov	r4, r0
   138c2:	b086      	sub	sp, #24
   138c4:	460d      	mov	r5, r1
   138c6:	f04f 0320 	mov.w	r3, #32
   138ca:	f3ef 8711 	mrs	r7, BASEPRI
   138ce:	f383 8811 	msr	BASEPRI, r3
   138d2:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   138d4:	b182      	cbz	r2, 138f8 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   138d6:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   138d8:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   138da:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   138de:	428a      	cmp	r2, r1
	list->head = node;
   138e0:	6003      	str	r3, [r0, #0]
	list->tail = node;
   138e2:	bf08      	it	eq
   138e4:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   138e6:	2101      	movs	r1, #1
   138e8:	4610      	mov	r0, r2
   138ea:	f7ff ffaf 	bl	1384c <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   138ee:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   138f2:	b006      	add	sp, #24
   138f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   138f8:	b919      	cbnz	r1, 13902 <_impl_k_queue_get+0x46>
   138fa:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   138fe:	2000      	movs	r0, #0
   13900:	e7f7      	b.n	138f2 <_impl_k_queue_get+0x36>
   13902:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   13906:	2104      	movs	r1, #4
   13908:	4603      	mov	r3, r0
   1390a:	eb0d 0001 	add.w	r0, sp, r1
   1390e:	f000 fea4 	bl	1465a <k_poll_event_init>
	if (timeout != K_FOREVER) {
   13912:	1c6a      	adds	r2, r5, #1
   13914:	d002      	beq.n	1391c <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13916:	f000 fab7 	bl	13e88 <_impl_k_uptime_get_32>
   1391a:	4606      	mov	r6, r0
{
   1391c:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1391e:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   13922:	1bea      	subs	r2, r5, r7
   13924:	f36f 1307 	bfc	r3, #4, #4
   13928:	2101      	movs	r1, #1
   1392a:	a801      	add	r0, sp, #4
   1392c:	f88d 3011 	strb.w	r3, [sp, #17]
   13930:	f000 fea6 	bl	14680 <_impl_k_poll>
		if (err && err != -EAGAIN) {
   13934:	b108      	cbz	r0, 1393a <_impl_k_queue_get+0x7e>
   13936:	300b      	adds	r0, #11
   13938:	d1e1      	bne.n	138fe <_impl_k_queue_get+0x42>
	__asm__ volatile(
   1393a:	f04f 0320 	mov.w	r3, #32
   1393e:	f3ef 8811 	mrs	r8, BASEPRI
   13942:	f383 8811 	msr	BASEPRI, r3
   13946:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   13948:	b138      	cbz	r0, 1395a <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1394a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   1394c:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1394e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13952:	4290      	cmp	r0, r2
	list->head = node;
   13954:	6023      	str	r3, [r4, #0]
	list->tail = node;
   13956:	bf08      	it	eq
   13958:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1395a:	2101      	movs	r1, #1
   1395c:	f7ff ff76 	bl	1384c <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13960:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   13964:	2800      	cmp	r0, #0
   13966:	d1c4      	bne.n	138f2 <_impl_k_queue_get+0x36>
   13968:	1c6b      	adds	r3, r5, #1
   1396a:	d0d8      	beq.n	1391e <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   1396c:	f000 fa8c 	bl	13e88 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   13970:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   13972:	42bd      	cmp	r5, r7
   13974:	dad3      	bge.n	1391e <_impl_k_queue_get+0x62>
   13976:	e7c2      	b.n	138fe <_impl_k_queue_get+0x42>

00013978 <sys_dlist_remove>:
	node->prev->next = node->next;
   13978:	e890 000c 	ldmia.w	r0, {r2, r3}
   1397c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1397e:	6802      	ldr	r2, [r0, #0]
   13980:	6053      	str	r3, [r2, #4]
   13982:	4770      	bx	lr

00013984 <_abort_timeout>:
{
   13984:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13986:	6900      	ldr	r0, [r0, #16]
{
   13988:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1398a:	1c43      	adds	r3, r0, #1
   1398c:	d00e      	beq.n	139ac <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1398e:	4b08      	ldr	r3, [pc, #32]	; (139b0 <_abort_timeout+0x2c>)
   13990:	699b      	ldr	r3, [r3, #24]
   13992:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   13994:	bf1f      	itttt	ne
   13996:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13998:	6913      	ldrne	r3, [r2, #16]
   1399a:	18c0      	addne	r0, r0, r3
   1399c:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   1399e:	4608      	mov	r0, r1
   139a0:	f7ff ffea 	bl	13978 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   139a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   139a8:	610b      	str	r3, [r1, #16]
	return 0;
   139aa:	2000      	movs	r0, #0
}
   139ac:	bd08      	pop	{r3, pc}
   139ae:	bf00      	nop
   139b0:	20001950 	.word	0x20001950

000139b4 <k_spin_lock.isra.11>:
	__asm__ volatile(
   139b4:	f04f 0320 	mov.w	r3, #32
   139b8:	f3ef 8011 	mrs	r0, BASEPRI
   139bc:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   139c0:	4770      	bx	lr
	...

000139c4 <update_cache>:
	return list->head == list;
   139c4:	4b0d      	ldr	r3, [pc, #52]	; (139fc <update_cache+0x38>)
   139c6:	4619      	mov	r1, r3
   139c8:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   139cc:	428a      	cmp	r2, r1
   139ce:	d000      	beq.n	139d2 <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   139d0:	b902      	cbnz	r2, 139d4 <update_cache+0x10>
   139d2:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   139d4:	b970      	cbnz	r0, 139f4 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   139d6:	6899      	ldr	r1, [r3, #8]
   139d8:	b161      	cbz	r1, 139f4 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   139da:	7a48      	ldrb	r0, [r1, #9]
   139dc:	06c0      	lsls	r0, r0, #27
   139de:	d109      	bne.n	139f4 <update_cache+0x30>
   139e0:	6a48      	ldr	r0, [r1, #36]	; 0x24
   139e2:	3001      	adds	r0, #1
   139e4:	d106      	bne.n	139f4 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   139e6:	8948      	ldrh	r0, [r1, #10]
   139e8:	287f      	cmp	r0, #127	; 0x7f
   139ea:	d903      	bls.n	139f4 <update_cache+0x30>
	return thread == _idle_thread;
   139ec:	4804      	ldr	r0, [pc, #16]	; (13a00 <update_cache+0x3c>)
	if (_is_idle(_current)) {
   139ee:	6800      	ldr	r0, [r0, #0]
   139f0:	4281      	cmp	r1, r0
   139f2:	d101      	bne.n	139f8 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   139f4:	621a      	str	r2, [r3, #32]
   139f6:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   139f8:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   139fa:	4770      	bx	lr
   139fc:	20001950 	.word	0x20001950
   13a00:	00018204 	.word	0x00018204

00013a04 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   13a04:	f990 000a 	ldrsb.w	r0, [r0, #10]
   13a08:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   13a0c:	4298      	cmp	r0, r3
   13a0e:	bfac      	ite	ge
   13a10:	2000      	movge	r0, #0
   13a12:	2001      	movlt	r0, #1
   13a14:	4770      	bx	lr
	...

00013a18 <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   13a18:	b510      	push	{r4, lr}
   13a1a:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   13a1c:	f7ff ffca 	bl	139b4 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   13a20:	7a4b      	ldrb	r3, [r1, #9]
   13a22:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   13a24:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   13a26:	d50d      	bpl.n	13a44 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   13a28:	4608      	mov	r0, r1
   13a2a:	f7ff ffa5 	bl	13978 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   13a2e:	7a4b      	ldrb	r3, [r1, #9]
   13a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13a34:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   13a36:	4b05      	ldr	r3, [pc, #20]	; (13a4c <_remove_thread_from_ready_q+0x34>)
   13a38:	6898      	ldr	r0, [r3, #8]
   13a3a:	1a43      	subs	r3, r0, r1
   13a3c:	4258      	negs	r0, r3
   13a3e:	4158      	adcs	r0, r3
   13a40:	f7ff ffc0 	bl	139c4 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13a44:	f384 8811 	msr	BASEPRI, r4
   13a48:	bd10      	pop	{r4, pc}
   13a4a:	bf00      	nop
   13a4c:	20001950 	.word	0x20001950

00013a50 <_find_first_thread_to_unpend>:
{
   13a50:	b508      	push	{r3, lr}
   13a52:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   13a54:	f7ff ffae 	bl	139b4 <k_spin_lock.isra.11>
	return list->head == list;
   13a58:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13a5a:	429a      	cmp	r2, r3
   13a5c:	bf08      	it	eq
   13a5e:	2300      	moveq	r3, #0
   13a60:	f380 8811 	msr	BASEPRI, r0
}
   13a64:	4618      	mov	r0, r3
   13a66:	bd08      	pop	{r3, pc}

00013a68 <_unpend_thread_no_timeout>:
{
   13a68:	b510      	push	{r4, lr}
   13a6a:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   13a6c:	f7ff ffa2 	bl	139b4 <k_spin_lock.isra.11>
   13a70:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13a72:	4608      	mov	r0, r1
   13a74:	f7ff ff80 	bl	13978 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13a78:	7a4b      	ldrb	r3, [r1, #9]
   13a7a:	f023 0302 	bic.w	r3, r3, #2
   13a7e:	724b      	strb	r3, [r1, #9]
   13a80:	f384 8811 	msr	BASEPRI, r4
   13a84:	bd10      	pop	{r4, pc}

00013a86 <_unpend_first_thread>:
{
   13a86:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   13a88:	2100      	movs	r1, #0
   13a8a:	f7ff ffe1 	bl	13a50 <_find_first_thread_to_unpend>

	if (thread) {
   13a8e:	4604      	mov	r4, r0
   13a90:	b128      	cbz	r0, 13a9e <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   13a92:	f7ff ffe9 	bl	13a68 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   13a96:	f104 0014 	add.w	r0, r4, #20
   13a9a:	f7ff ff73 	bl	13984 <_abort_timeout>
}
   13a9e:	4620      	mov	r0, r4
   13aa0:	bd10      	pop	{r4, pc}

00013aa2 <_unpend_thread>:
{
   13aa2:	b510      	push	{r4, lr}
   13aa4:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   13aa6:	f7ff ffdf 	bl	13a68 <_unpend_thread_no_timeout>
   13aaa:	f104 0014 	add.w	r0, r4, #20
}
   13aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13ab2:	f7ff bf67 	b.w	13984 <_abort_timeout>
	...

00013ab8 <_reschedule>:
   13ab8:	f3ef 8305 	mrs	r3, IPSR
   13abc:	2b0d      	cmp	r3, #13
   13abe:	d809      	bhi.n	13ad4 <_reschedule+0x1c>
   13ac0:	b11b      	cbz	r3, 13aca <_reschedule+0x12>
   13ac2:	4b09      	ldr	r3, [pc, #36]	; (13ae8 <_reschedule+0x30>)
   13ac4:	685b      	ldr	r3, [r3, #4]
   13ac6:	051b      	lsls	r3, r3, #20
   13ac8:	d504      	bpl.n	13ad4 <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   13aca:	4b08      	ldr	r3, [pc, #32]	; (13aec <_reschedule+0x34>)
   13acc:	689a      	ldr	r2, [r3, #8]
   13ace:	6a1b      	ldr	r3, [r3, #32]
   13ad0:	429a      	cmp	r2, r3
   13ad2:	d103      	bne.n	13adc <_reschedule+0x24>
   13ad4:	f380 8811 	msr	BASEPRI, r0
}
   13ad8:	2000      	movs	r0, #0
   13ada:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   13adc:	4b04      	ldr	r3, [pc, #16]	; (13af0 <_reschedule+0x38>)
   13ade:	2200      	movs	r2, #0
   13ae0:	601a      	str	r2, [r3, #0]
   13ae2:	f7ed bd11 	b.w	1508 <__swap>
   13ae6:	bf00      	nop
   13ae8:	e000ed00 	.word	0xe000ed00
   13aec:	20001950 	.word	0x20001950
   13af0:	20001984 	.word	0x20001984

00013af4 <k_sched_unlock>:
{
   13af4:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   13af6:	f7ff ff5d 	bl	139b4 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   13afa:	4b0a      	ldr	r3, [pc, #40]	; (13b24 <k_sched_unlock+0x30>)
   13afc:	689a      	ldr	r2, [r3, #8]
   13afe:	7ad3      	ldrb	r3, [r2, #11]
   13b00:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   13b02:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   13b04:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   13b06:	2001      	movs	r0, #1
   13b08:	f7ff ff5c 	bl	139c4 <update_cache>
   13b0c:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   13b10:	f04f 0320 	mov.w	r3, #32
   13b14:	f3ef 8011 	mrs	r0, BASEPRI
   13b18:	f383 8811 	msr	BASEPRI, r3
}
   13b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   13b20:	f7ff bfca 	b.w	13ab8 <_reschedule>
   13b24:	20001950 	.word	0x20001950

00013b28 <_priq_dumb_add>:
{
   13b28:	b510      	push	{r4, lr}
	return list->head == list;
   13b2a:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13b2c:	4298      	cmp	r0, r3
   13b2e:	bf08      	it	eq
   13b30:	2300      	moveq	r3, #0
   13b32:	b193      	cbz	r3, 13b5a <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   13b34:	f991 400a 	ldrsb.w	r4, [r1, #10]
   13b38:	f993 200a 	ldrsb.w	r2, [r3, #10]
   13b3c:	4294      	cmp	r4, r2
   13b3e:	da06      	bge.n	13b4e <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   13b40:	685a      	ldr	r2, [r3, #4]
   13b42:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   13b44:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   13b46:	685a      	ldr	r2, [r3, #4]
   13b48:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   13b4a:	6059      	str	r1, [r3, #4]
   13b4c:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   13b4e:	6842      	ldr	r2, [r0, #4]
   13b50:	4293      	cmp	r3, r2
   13b52:	d002      	beq.n	13b5a <_priq_dumb_add+0x32>
   13b54:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13b56:	2b00      	cmp	r3, #0
   13b58:	d1eb      	bne.n	13b32 <_priq_dumb_add+0xa>
	node->next = list;
   13b5a:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   13b5c:	6843      	ldr	r3, [r0, #4]
   13b5e:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   13b60:	6843      	ldr	r3, [r0, #4]
   13b62:	6019      	str	r1, [r3, #0]
	list->tail = node;
   13b64:	6041      	str	r1, [r0, #4]
   13b66:	bd10      	pop	{r4, pc}

00013b68 <_add_thread_to_ready_q>:
{
   13b68:	b538      	push	{r3, r4, r5, lr}
   13b6a:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   13b6c:	f7ff ff22 	bl	139b4 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   13b70:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   13b72:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   13b74:	4806      	ldr	r0, [pc, #24]	; (13b90 <_add_thread_to_ready_q+0x28>)
   13b76:	f7ff ffd7 	bl	13b28 <_priq_dumb_add>
	thread->base.thread_state |= states;
   13b7a:	7a63      	ldrb	r3, [r4, #9]
   13b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13b80:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   13b82:	2000      	movs	r0, #0
   13b84:	f7ff ff1e 	bl	139c4 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13b88:	f385 8811 	msr	BASEPRI, r5
   13b8c:	bd38      	pop	{r3, r4, r5, pc}
   13b8e:	bf00      	nop
   13b90:	20001974 	.word	0x20001974

00013b94 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   13b94:	7a42      	ldrb	r2, [r0, #9]
   13b96:	06d2      	lsls	r2, r2, #27
   13b98:	d104      	bne.n	13ba4 <_ready_thread+0x10>
   13b9a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13b9c:	3301      	adds	r3, #1
   13b9e:	d101      	bne.n	13ba4 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   13ba0:	f7ff bfe2 	b.w	13b68 <_add_thread_to_ready_q>
   13ba4:	4770      	bx	lr
	...

00013ba8 <_add_timeout>:
{
   13ba8:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13baa:	610b      	str	r3, [r1, #16]
{
   13bac:	4604      	mov	r4, r0
   13bae:	461d      	mov	r5, r3
	timeout->thread = thread;
   13bb0:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13bb2:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   13bb4:	bb03      	cbnz	r3, 13bf8 <_add_timeout+0x50>
	__asm__ volatile(
   13bb6:	f04f 0320 	mov.w	r3, #32
   13bba:	f3ef 8611 	mrs	r6, BASEPRI
   13bbe:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   13bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bc6:	610b      	str	r3, [r1, #16]
	if (thread) {
   13bc8:	b170      	cbz	r0, 13be8 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   13bca:	68cb      	ldr	r3, [r1, #12]
   13bcc:	b113      	cbz	r3, 13bd4 <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   13bce:	f7ff ff4b 	bl	13a68 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   13bd2:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13bd4:	7a63      	ldrb	r3, [r4, #9]
   13bd6:	f023 0304 	bic.w	r3, r3, #4
   13bda:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   13bdc:	4620      	mov	r0, r4
   13bde:	f7ff ffd9 	bl	13b94 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13be2:	f386 8811 	msr	BASEPRI, r6
   13be6:	bd70      	pop	{r4, r5, r6, pc}
   13be8:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   13bec:	694b      	ldr	r3, [r1, #20]
   13bee:	b32b      	cbz	r3, 13c3c <_add_timeout+0x94>
			timeout->func(timeout);
   13bf0:	4608      	mov	r0, r1
}
   13bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   13bf6:	4718      	bx	r3
	return list->head == list;
   13bf8:	4a11      	ldr	r2, [pc, #68]	; (13c40 <_add_timeout+0x98>)
   13bfa:	4610      	mov	r0, r2
   13bfc:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13c00:	4283      	cmp	r3, r0
   13c02:	d10c      	bne.n	13c1e <_add_timeout+0x76>
	node->next = list;
   13c04:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   13c06:	6993      	ldr	r3, [r2, #24]
   13c08:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   13c0a:	6993      	ldr	r3, [r2, #24]
   13c0c:	6019      	str	r1, [r3, #0]
	list->tail = node;
   13c0e:	6191      	str	r1, [r2, #24]
   13c10:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   13c12:	1b64      	subs	r4, r4, r5
   13c14:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   13c16:	6994      	ldr	r4, [r2, #24]
   13c18:	42a3      	cmp	r3, r4
   13c1a:	d0f3      	beq.n	13c04 <_add_timeout+0x5c>
   13c1c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13c1e:	2b00      	cmp	r3, #0
   13c20:	d0f0      	beq.n	13c04 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   13c22:	690c      	ldr	r4, [r1, #16]
   13c24:	691d      	ldr	r5, [r3, #16]
   13c26:	42ac      	cmp	r4, r5
   13c28:	dcf3      	bgt.n	13c12 <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   13c2a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   13c2c:	1b2c      	subs	r4, r5, r4
   13c2e:	611c      	str	r4, [r3, #16]
   13c30:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   13c32:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   13c34:	685a      	ldr	r2, [r3, #4]
   13c36:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   13c38:	6059      	str	r1, [r3, #4]
   13c3a:	bd70      	pop	{r4, r5, r6, pc}
   13c3c:	bd70      	pop	{r4, r5, r6, pc}
   13c3e:	bf00      	nop
   13c40:	20001950 	.word	0x20001950

00013c44 <_move_thread_to_end_of_prio_q>:
{
   13c44:	b538      	push	{r3, r4, r5, lr}
   13c46:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   13c48:	f7ff feb4 	bl	139b4 <k_spin_lock.isra.11>
   13c4c:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13c4e:	4620      	mov	r0, r4
   13c50:	f7ff fe92 	bl	13978 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   13c54:	4621      	mov	r1, r4
   13c56:	4806      	ldr	r0, [pc, #24]	; (13c70 <_move_thread_to_end_of_prio_q+0x2c>)
   13c58:	f7ff ff66 	bl	13b28 <_priq_dumb_add>
	thread->base.thread_state |= states;
   13c5c:	7a63      	ldrb	r3, [r4, #9]
   13c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13c62:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   13c64:	2000      	movs	r0, #0
   13c66:	f7ff fead 	bl	139c4 <update_cache>
   13c6a:	f385 8811 	msr	BASEPRI, r5
   13c6e:	bd38      	pop	{r3, r4, r5, pc}
   13c70:	20001974 	.word	0x20001974

00013c74 <pend>:
{
   13c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13c76:	4605      	mov	r5, r0
   13c78:	4614      	mov	r4, r2
   13c7a:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   13c7c:	f7ff fecc 	bl	13a18 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   13c80:	7a6b      	ldrb	r3, [r5, #9]
   13c82:	f043 0302 	orr.w	r3, r3, #2
   13c86:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   13c88:	1c63      	adds	r3, r4, #1
   13c8a:	d012      	beq.n	13cb2 <pend+0x3e>
	__asm__ volatile(
   13c8c:	f04f 0320 	mov.w	r3, #32
   13c90:	f3ef 8711 	mrs	r7, BASEPRI
   13c94:	f383 8811 	msr	BASEPRI, r3
   13c98:	230a      	movs	r3, #10
   13c9a:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   13c9c:	4632      	mov	r2, r6
   13c9e:	fbb4 f3f3 	udiv	r3, r4, r3
   13ca2:	f105 0114 	add.w	r1, r5, #20
   13ca6:	3301      	adds	r3, #1
   13ca8:	4628      	mov	r0, r5
   13caa:	f7ff ff7d 	bl	13ba8 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13cae:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   13cb2:	b12e      	cbz	r6, 13cc0 <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   13cb4:	4629      	mov	r1, r5
   13cb6:	4630      	mov	r0, r6
}
   13cb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   13cbc:	f7ff bf34 	b.w	13b28 <_priq_dumb_add>
   13cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00013cc4 <_pend_current_thread>:
{
   13cc4:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   13cc6:	4b06      	ldr	r3, [pc, #24]	; (13ce0 <_pend_current_thread+0x1c>)
{
   13cc8:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   13cca:	6898      	ldr	r0, [r3, #8]
   13ccc:	f7ff ffd2 	bl	13c74 <pend>
	_time_slice_elapsed = 0;
   13cd0:	4b04      	ldr	r3, [pc, #16]	; (13ce4 <_pend_current_thread+0x20>)
   13cd2:	2200      	movs	r2, #0
   13cd4:	4620      	mov	r0, r4
}
   13cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   13cda:	601a      	str	r2, [r3, #0]
   13cdc:	f7ed bc14 	b.w	1508 <__swap>
   13ce0:	20001950 	.word	0x20001950
   13ce4:	20001984 	.word	0x20001984

00013ce8 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   13ce8:	4b13      	ldr	r3, [pc, #76]	; (13d38 <_is_thread_time_slicing+0x50>)
   13cea:	681b      	ldr	r3, [r3, #0]
   13cec:	2b00      	cmp	r3, #0
{
   13cee:	b510      	push	{r4, lr}
   13cf0:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   13cf2:	dd1f      	ble.n	13d34 <_is_thread_time_slicing+0x4c>
   13cf4:	8943      	ldrh	r3, [r0, #10]
   13cf6:	2b7f      	cmp	r3, #127	; 0x7f
   13cf8:	d81c      	bhi.n	13d34 <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   13cfa:	4b10      	ldr	r3, [pc, #64]	; (13d3c <_is_thread_time_slicing+0x54>)
   13cfc:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   13d00:	681b      	ldr	r3, [r3, #0]
   13d02:	4299      	cmp	r1, r3
   13d04:	db16      	blt.n	13d34 <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   13d06:	f7ff fe55 	bl	139b4 <k_spin_lock.isra.11>
	return list->head == list;
   13d0a:	490d      	ldr	r1, [pc, #52]	; (13d40 <_is_thread_time_slicing+0x58>)
   13d0c:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13d10:	428b      	cmp	r3, r1
   13d12:	4604      	mov	r4, r0
   13d14:	d00a      	beq.n	13d2c <_is_thread_time_slicing+0x44>
		if (next) {
   13d16:	b15b      	cbz	r3, 13d30 <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   13d18:	f992 000a 	ldrsb.w	r0, [r2, #10]
   13d1c:	f993 300a 	ldrsb.w	r3, [r3, #10]
   13d20:	1ac3      	subs	r3, r0, r3
   13d22:	4258      	negs	r0, r3
   13d24:	4158      	adcs	r0, r3
   13d26:	f384 8811 	msr	BASEPRI, r4
	return ret;
   13d2a:	bd10      	pop	{r4, pc}
   13d2c:	2000      	movs	r0, #0
   13d2e:	e7fa      	b.n	13d26 <_is_thread_time_slicing+0x3e>
   13d30:	4618      	mov	r0, r3
   13d32:	e7f8      	b.n	13d26 <_is_thread_time_slicing+0x3e>
		return 0;
   13d34:	2000      	movs	r0, #0
}
   13d36:	bd10      	pop	{r4, pc}
   13d38:	20001830 	.word	0x20001830
   13d3c:	20001834 	.word	0x20001834
   13d40:	20001950 	.word	0x20001950

00013d44 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   13d44:	4b01      	ldr	r3, [pc, #4]	; (13d4c <_update_time_slice_before_swap+0x8>)
   13d46:	2200      	movs	r2, #0
   13d48:	601a      	str	r2, [r3, #0]
   13d4a:	4770      	bx	lr
   13d4c:	20001984 	.word	0x20001984

00013d50 <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   13d50:	b538      	push	{r3, r4, r5, lr}
   13d52:	4605      	mov	r5, r0
	int need_sched = 0;
   13d54:	2000      	movs	r0, #0
	return list->head == list;
   13d56:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13d58:	42a5      	cmp	r5, r4
   13d5a:	d000      	beq.n	13d5e <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   13d5c:	b904      	cbnz	r4, 13d60 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   13d5e:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   13d60:	4620      	mov	r0, r4
   13d62:	f7ff fe9e 	bl	13aa2 <_unpend_thread>
		_ready_thread(th);
   13d66:	4620      	mov	r0, r4
   13d68:	f7ff ff14 	bl	13b94 <_ready_thread>
		need_sched = 1;
   13d6c:	2001      	movs	r0, #1
   13d6e:	e7f2      	b.n	13d56 <_unpend_all+0x6>

00013d70 <_sched_init>:
	list->head = (sys_dnode_t *)list;
   13d70:	4b02      	ldr	r3, [pc, #8]	; (13d7c <_sched_init+0xc>)
   13d72:	f103 0224 	add.w	r2, r3, #36	; 0x24
   13d76:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   13d78:	629a      	str	r2, [r3, #40]	; 0x28
   13d7a:	4770      	bx	lr
   13d7c:	20001950 	.word	0x20001950

00013d80 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   13d80:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   13d82:	4c14      	ldr	r4, [pc, #80]	; (13dd4 <_impl_k_yield+0x54>)
   13d84:	4b14      	ldr	r3, [pc, #80]	; (13dd8 <_impl_k_yield+0x58>)
   13d86:	68a2      	ldr	r2, [r4, #8]
   13d88:	681b      	ldr	r3, [r3, #0]
   13d8a:	429a      	cmp	r2, r3
   13d8c:	d00f      	beq.n	13dae <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   13d8e:	f7ff fe11 	bl	139b4 <k_spin_lock.isra.11>
   13d92:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13d94:	68a0      	ldr	r0, [r4, #8]
   13d96:	f7ff fdef 	bl	13978 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   13d9a:	68a1      	ldr	r1, [r4, #8]
   13d9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   13da0:	f7ff fec2 	bl	13b28 <_priq_dumb_add>
			update_cache(1);
   13da4:	2001      	movs	r0, #1
   13da6:	f7ff fe0d 	bl	139c4 <update_cache>
   13daa:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   13dae:	6a22      	ldr	r2, [r4, #32]
   13db0:	68a3      	ldr	r3, [r4, #8]
   13db2:	429a      	cmp	r2, r3
   13db4:	d00c      	beq.n	13dd0 <_impl_k_yield+0x50>
	__asm__ volatile(
   13db6:	f04f 0320 	mov.w	r3, #32
   13dba:	f3ef 8011 	mrs	r0, BASEPRI
   13dbe:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   13dc2:	4b06      	ldr	r3, [pc, #24]	; (13ddc <_impl_k_yield+0x5c>)
   13dc4:	2200      	movs	r2, #0
   13dc6:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   13dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13dcc:	f7ed bb9c 	b.w	1508 <__swap>
   13dd0:	bd38      	pop	{r3, r4, r5, pc}
   13dd2:	bf00      	nop
   13dd4:	20001950 	.word	0x20001950
   13dd8:	00018204 	.word	0x00018204
   13ddc:	20001984 	.word	0x20001984

00013de0 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   13de0:	4b01      	ldr	r3, [pc, #4]	; (13de8 <_impl_k_current_get+0x8>)
   13de2:	6898      	ldr	r0, [r3, #8]
   13de4:	4770      	bx	lr
   13de6:	bf00      	nop
   13de8:	20001950 	.word	0x20001950

00013dec <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   13dec:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   13df0:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   13df2:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   13df4:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   13df6:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   13df8:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   13dfa:	6143      	str	r3, [r0, #20]
   13dfc:	4770      	bx	lr

00013dfe <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   13dfe:	b570      	push	{r4, r5, r6, lr}
   13e00:	4604      	mov	r4, r0
   13e02:	f04f 0320 	mov.w	r3, #32
   13e06:	f3ef 8611 	mrs	r6, BASEPRI
   13e0a:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   13e0e:	f7ff fe3a 	bl	13a86 <_unpend_first_thread>
	if (thread) {
   13e12:	4605      	mov	r5, r0
   13e14:	b160      	cbz	r0, 13e30 <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   13e16:	7a43      	ldrb	r3, [r0, #9]
   13e18:	06db      	lsls	r3, r3, #27
   13e1a:	d102      	bne.n	13e22 <_impl_k_sem_give+0x24>
   13e1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13e1e:	3301      	adds	r3, #1
   13e20:	d012      	beq.n	13e48 <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   13e22:	2300      	movs	r3, #0
   13e24:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   13e26:	4630      	mov	r0, r6
}
   13e28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   13e2c:	f7ff be44 	b.w	13ab8 <_reschedule>
	sem->count += (sem->count != sem->limit);
   13e30:	68a3      	ldr	r3, [r4, #8]
   13e32:	68e2      	ldr	r2, [r4, #12]
   13e34:	429a      	cmp	r2, r3
   13e36:	bf18      	it	ne
   13e38:	3301      	addne	r3, #1
   13e3a:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   13e3c:	2102      	movs	r1, #2
   13e3e:	f104 0010 	add.w	r0, r4, #16
   13e42:	f000 fca1 	bl	14788 <_handle_obj_poll_events>
   13e46:	e7ee      	b.n	13e26 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   13e48:	f7ff fe8e 	bl	13b68 <_add_thread_to_ready_q>
   13e4c:	e7e9      	b.n	13e22 <_impl_k_sem_give+0x24>

00013e4e <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   13e4e:	b410      	push	{r4}
   13e50:	460a      	mov	r2, r1
   13e52:	4604      	mov	r4, r0
   13e54:	f04f 0320 	mov.w	r3, #32
   13e58:	f3ef 8011 	mrs	r0, BASEPRI
   13e5c:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   13e60:	68a3      	ldr	r3, [r4, #8]
   13e62:	b133      	cbz	r3, 13e72 <_impl_k_sem_take+0x24>
		sem->count--;
   13e64:	3b01      	subs	r3, #1
   13e66:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13e68:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   13e6c:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   13e6e:	bc10      	pop	{r4}
   13e70:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   13e72:	b921      	cbnz	r1, 13e7e <_impl_k_sem_take+0x30>
   13e74:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   13e78:	f06f 000f 	mvn.w	r0, #15
   13e7c:	e7f7      	b.n	13e6e <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   13e7e:	4621      	mov	r1, r4
}
   13e80:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   13e82:	f7ff bf1f 	b.w	13cc4 <_pend_current_thread>
	...

00013e88 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   13e88:	4b03      	ldr	r3, [pc, #12]	; (13e98 <_impl_k_uptime_get_32+0x10>)
   13e8a:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   13e8e:	230a      	movs	r3, #10
   13e90:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   13e94:	4770      	bx	lr
   13e96:	bf00      	nop
   13e98:	20001988 	.word	0x20001988

00013e9c <_tick_get>:
	__asm__ volatile(
   13e9c:	f04f 0220 	mov.w	r2, #32
   13ea0:	f3ef 8311 	mrs	r3, BASEPRI
   13ea4:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   13ea8:	4a02      	ldr	r2, [pc, #8]	; (13eb4 <_tick_get+0x18>)
   13eaa:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13eae:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   13eb2:	4770      	bx	lr
   13eb4:	20001988 	.word	0x20001988

00013eb8 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   13eb8:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   13eba:	f7ff ffef 	bl	13e9c <_tick_get>
   13ebe:	240a      	movs	r4, #10
   13ec0:	fba0 2304 	umull	r2, r3, r0, r4
   13ec4:	fb04 3301 	mla	r3, r4, r1, r3
}
   13ec8:	4610      	mov	r0, r2
   13eca:	4619      	mov	r1, r3
   13ecc:	bd10      	pop	{r4, pc}
	...

00013ed0 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   13ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ed4:	4607      	mov	r7, r0
   13ed6:	b085      	sub	sp, #20
	__asm__ volatile(
   13ed8:	f04f 0320 	mov.w	r3, #32
   13edc:	f3ef 8011 	mrs	r0, BASEPRI
   13ee0:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   13ee4:	4961      	ldr	r1, [pc, #388]	; (1406c <_nano_sys_clock_tick_announce+0x19c>)
   13ee6:	e9d1 4500 	ldrd	r4, r5, [r1]
   13eea:	19e2      	adds	r2, r4, r7
   13eec:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   13ef0:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13ef4:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   13ef8:	ae02      	add	r6, sp, #8
   13efa:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   13efc:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   13efe:	f04f 0320 	mov.w	r3, #32
   13f02:	f3ef 8011 	mrs	r0, BASEPRI
   13f06:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   13f0a:	4c59      	ldr	r4, [pc, #356]	; (14070 <_nano_sys_clock_tick_announce+0x1a0>)
   13f0c:	4621      	mov	r1, r4
   13f0e:	4602      	mov	r2, r0
   13f10:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13f14:	428b      	cmp	r3, r1
   13f16:	d000      	beq.n	13f1a <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   13f18:	b9fb      	cbnz	r3, 13f5a <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13f1a:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   13f1e:	68a0      	ldr	r0, [r4, #8]
   13f20:	f7ff fee2 	bl	13ce8 <_is_thread_time_slicing>
   13f24:	b1b0      	cbz	r0, 13f54 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   13f26:	4a53      	ldr	r2, [pc, #332]	; (14074 <_nano_sys_clock_tick_announce+0x1a4>)
   13f28:	6811      	ldr	r1, [r2, #0]
   13f2a:	230a      	movs	r3, #10
   13f2c:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   13f30:	4b51      	ldr	r3, [pc, #324]	; (14078 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   13f32:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   13f34:	681b      	ldr	r3, [r3, #0]
   13f36:	429f      	cmp	r7, r3
   13f38:	db0c      	blt.n	13f54 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   13f3a:	2300      	movs	r3, #0
   13f3c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   13f3e:	f04f 0320 	mov.w	r3, #32
   13f42:	f3ef 8511 	mrs	r5, BASEPRI
   13f46:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   13f4a:	68a0      	ldr	r0, [r4, #8]
   13f4c:	f7ff fe7a 	bl	13c44 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13f50:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   13f54:	b005      	add	sp, #20
   13f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   13f5a:	4d48      	ldr	r5, [pc, #288]	; (1407c <_nano_sys_clock_tick_announce+0x1ac>)
   13f5c:	9501      	str	r5, [sp, #4]
   13f5e:	2101      	movs	r1, #1
   13f60:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   13f62:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   13f66:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   13f68:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   13f6c:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   13f6e:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   13f70:	bfaa      	itet	ge
   13f72:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   13f76:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   13f7a:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   13f7e:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   13f80:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   13f82:	691d      	ldr	r5, [r3, #16]
   13f84:	4298      	cmp	r0, r3
   13f86:	bf14      	ite	ne
   13f88:	6818      	ldrne	r0, [r3, #0]
   13f8a:	2000      	moveq	r0, #0
   13f8c:	b9d5      	cbnz	r5, 13fc4 <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   13f8e:	e893 0220 	ldmia.w	r3, {r5, r9}
   13f92:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   13f96:	681d      	ldr	r5, [r3, #0]
   13f98:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   13f9c:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   13f9e:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   13fa2:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   13fa4:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   13fa6:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   13fa8:	f8c3 c010 	str.w	ip, [r3, #16]
   13fac:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   13fb0:	f04f 0320 	mov.w	r3, #32
   13fb4:	f3ef 8211 	mrs	r2, BASEPRI
   13fb8:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   13fbc:	4603      	mov	r3, r0
   13fbe:	2800      	cmp	r0, #0
   13fc0:	d1d4      	bne.n	13f6c <_nano_sys_clock_tick_announce+0x9c>
   13fc2:	e001      	b.n	13fc8 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   13fc4:	2900      	cmp	r1, #0
   13fc6:	dcf1      	bgt.n	13fac <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13fc8:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   13fcc:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13fce:	42b0      	cmp	r0, r6
   13fd0:	d103      	bne.n	13fda <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   13fd2:	9a01      	ldr	r2, [sp, #4]
   13fd4:	2300      	movs	r3, #0
   13fd6:	6013      	str	r3, [r2, #0]
   13fd8:	e7a1      	b.n	13f1e <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13fda:	2800      	cmp	r0, #0
   13fdc:	d0f9      	beq.n	13fd2 <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   13fde:	9b03      	ldr	r3, [sp, #12]
   13fe0:	4298      	cmp	r0, r3
   13fe2:	d102      	bne.n	13fea <_nano_sys_clock_tick_announce+0x11a>
   13fe4:	f04f 0b00 	mov.w	fp, #0
   13fe8:	e001      	b.n	13fee <_nano_sys_clock_tick_announce+0x11e>
   13fea:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   13fee:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   13ff2:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   13ff6:	e890 000c 	ldmia.w	r0, {r2, r3}
   13ffa:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13ffc:	6802      	ldr	r2, [r0, #0]
   13ffe:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   14000:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   14002:	f04f 0320 	mov.w	r3, #32
   14006:	f3ef 8811 	mrs	r8, BASEPRI
   1400a:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   1400e:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   14012:	b1d6      	cbz	r6, 1404a <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   14014:	68c3      	ldr	r3, [r0, #12]
   14016:	b123      	cbz	r3, 14022 <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   14018:	4630      	mov	r0, r6
   1401a:	f7ff fd25 	bl	13a68 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   1401e:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14022:	7a73      	ldrb	r3, [r6, #9]
   14024:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   14028:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1402c:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   1402e:	d102      	bne.n	14036 <_nano_sys_clock_tick_announce+0x166>
   14030:	6a73      	ldr	r3, [r6, #36]	; 0x24
   14032:	3301      	adds	r3, #1
   14034:	d015      	beq.n	14062 <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14036:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   1403a:	f1bb 0f00 	cmp.w	fp, #0
   1403e:	d0c8      	beq.n	13fd2 <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   14040:	9b03      	ldr	r3, [sp, #12]
   14042:	455b      	cmp	r3, fp
   14044:	d108      	bne.n	14058 <_nano_sys_clock_tick_announce+0x188>
   14046:	2300      	movs	r3, #0
   14048:	e008      	b.n	1405c <_nano_sys_clock_tick_announce+0x18c>
   1404a:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   1404e:	6943      	ldr	r3, [r0, #20]
   14050:	2b00      	cmp	r3, #0
   14052:	d0f2      	beq.n	1403a <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   14054:	4798      	blx	r3
   14056:	e7f0      	b.n	1403a <_nano_sys_clock_tick_announce+0x16a>
   14058:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   1405c:	4658      	mov	r0, fp
   1405e:	469b      	mov	fp, r3
   14060:	e7c9      	b.n	13ff6 <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   14062:	4630      	mov	r0, r6
   14064:	f7ff fd80 	bl	13b68 <_add_thread_to_ready_q>
   14068:	e7e5      	b.n	14036 <_nano_sys_clock_tick_announce+0x166>
   1406a:	bf00      	nop
   1406c:	20001988 	.word	0x20001988
   14070:	20001950 	.word	0x20001950
   14074:	20001984 	.word	0x20001984
   14078:	20001830 	.word	0x20001830
   1407c:	20001980 	.word	0x20001980

00014080 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   14080:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   14082:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1408a:	4903      	ldr	r1, [pc, #12]	; (14098 <k_sys_work_q_init+0x18>)
   1408c:	4803      	ldr	r0, [pc, #12]	; (1409c <k_sys_work_q_init+0x1c>)
   1408e:	f000 f983 	bl	14398 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   14092:	2000      	movs	r0, #0
   14094:	bd08      	pop	{r3, pc}
   14096:	bf00      	nop
   14098:	20003628 	.word	0x20003628
   1409c:	20001990 	.word	0x20001990

000140a0 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   140a0:	6903      	ldr	r3, [r0, #16]
   140a2:	1c5a      	adds	r2, r3, #1
   140a4:	d011      	beq.n	140ca <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   140a6:	4a0a      	ldr	r2, [pc, #40]	; (140d0 <_abort_timeout+0x30>)
   140a8:	6992      	ldr	r2, [r2, #24]
   140aa:	4290      	cmp	r0, r2
   140ac:	bf1f      	itttt	ne
   140ae:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   140b0:	690a      	ldrne	r2, [r1, #16]
   140b2:	189b      	addne	r3, r3, r2
   140b4:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   140b6:	e890 000c 	ldmia.w	r0, {r2, r3}
   140ba:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   140bc:	6802      	ldr	r2, [r0, #0]
   140be:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   140c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   140c4:	6103      	str	r3, [r0, #16]
	return 0;
   140c6:	2000      	movs	r0, #0
   140c8:	4770      	bx	lr
		return _INACTIVE;
   140ca:	4618      	mov	r0, r3
}
   140cc:	4770      	bx	lr
   140ce:	bf00      	nop
   140d0:	20001950 	.word	0x20001950

000140d4 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   140d4:	7a42      	ldrb	r2, [r0, #9]
   140d6:	06d2      	lsls	r2, r2, #27
   140d8:	d104      	bne.n	140e4 <_ready_thread+0x10>
   140da:	6a43      	ldr	r3, [r0, #36]	; 0x24
   140dc:	3301      	adds	r3, #1
   140de:	d101      	bne.n	140e4 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   140e0:	f7ff bd42 	b.w	13b68 <_add_thread_to_ready_q>
   140e4:	4770      	bx	lr
	...

000140e8 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   140e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   140ea:	f04f 0320 	mov.w	r3, #32
   140ee:	f3ef 8611 	mrs	r6, BASEPRI
   140f2:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   140f6:	4a19      	ldr	r2, [pc, #100]	; (1415c <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   140f8:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   140fa:	230a      	movs	r3, #10
   140fc:	3109      	adds	r1, #9
   140fe:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   14102:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14104:	6241      	str	r1, [r0, #36]	; 0x24
   14106:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14108:	2300      	movs	r3, #0
   1410a:	6203      	str	r3, [r0, #32]
   1410c:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14110:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   14112:	f100 0514 	add.w	r5, r0, #20
   14116:	d108      	bne.n	1412a <schedule_new_thread.part.11+0x42>
	node->next = list;
   14118:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   1411a:	6993      	ldr	r3, [r2, #24]
   1411c:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   1411e:	6993      	ldr	r3, [r2, #24]
   14120:	601d      	str	r5, [r3, #0]
	list->tail = node;
   14122:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14124:	f386 8811 	msr	BASEPRI, r6
   14128:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   1412a:	2b00      	cmp	r3, #0
   1412c:	d0f4      	beq.n	14118 <schedule_new_thread.part.11+0x30>
   1412e:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   14132:	6a44      	ldr	r4, [r0, #36]	; 0x24
   14134:	691f      	ldr	r7, [r3, #16]
   14136:	42bc      	cmp	r4, r7
   14138:	dc08      	bgt.n	1414c <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   1413a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   1413c:	1b3c      	subs	r4, r7, r4
   1413e:	611c      	str	r4, [r3, #16]
   14140:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   14142:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   14144:	685a      	ldr	r2, [r3, #4]
   14146:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   14148:	605d      	str	r5, [r3, #4]
   1414a:	e7eb      	b.n	14124 <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   1414c:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   1414e:	4573      	cmp	r3, lr
   14150:	6244      	str	r4, [r0, #36]	; 0x24
   14152:	d0e1      	beq.n	14118 <schedule_new_thread.part.11+0x30>
   14154:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14156:	2b00      	cmp	r3, #0
   14158:	d1eb      	bne.n	14132 <schedule_new_thread.part.11+0x4a>
   1415a:	e7dd      	b.n	14118 <schedule_new_thread.part.11+0x30>
   1415c:	20001950 	.word	0x20001950

00014160 <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   14160:	4770      	bx	lr
	...

00014164 <k_is_in_isr>:
   14164:	f3ef 8005 	mrs	r0, IPSR
   14168:	280d      	cmp	r0, #13
   1416a:	d807      	bhi.n	1417c <k_is_in_isr+0x18>
   1416c:	b138      	cbz	r0, 1417e <k_is_in_isr+0x1a>
   1416e:	4b04      	ldr	r3, [pc, #16]	; (14180 <k_is_in_isr+0x1c>)
   14170:	6858      	ldr	r0, [r3, #4]
   14172:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   14176:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   1417a:	4770      	bx	lr
   1417c:	2001      	movs	r0, #1
}
   1417e:	4770      	bx	lr
   14180:	e000ed00 	.word	0xe000ed00

00014184 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   14184:	4b02      	ldr	r3, [pc, #8]	; (14190 <_is_thread_essential+0xc>)
   14186:	689b      	ldr	r3, [r3, #8]
   14188:	7a18      	ldrb	r0, [r3, #8]
}
   1418a:	f000 0001 	and.w	r0, r0, #1
   1418e:	4770      	bx	lr
   14190:	20001950 	.word	0x20001950

00014194 <_impl_k_thread_start>:
{
   14194:	b510      	push	{r4, lr}
	__asm__ volatile(
   14196:	f04f 0320 	mov.w	r3, #32
   1419a:	f3ef 8411 	mrs	r4, BASEPRI
   1419e:	f383 8811 	msr	BASEPRI, r3
   141a2:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   141a4:	0759      	lsls	r1, r3, #29
   141a6:	d402      	bmi.n	141ae <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   141a8:	f384 8811 	msr	BASEPRI, r4
   141ac:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   141ae:	f023 0304 	bic.w	r3, r3, #4
   141b2:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   141b4:	f7ff ff8e 	bl	140d4 <_ready_thread>
	_reschedule(key);
   141b8:	4620      	mov	r0, r4
}
   141ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   141be:	f7ff bc7b 	b.w	13ab8 <_reschedule>
	...

000141c4 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   141c4:	b530      	push	{r4, r5, lr}
   141c6:	b087      	sub	sp, #28
   141c8:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   141ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   141cc:	9504      	str	r5, [sp, #16]
   141ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   141d0:	9503      	str	r5, [sp, #12]
   141d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   141d4:	9502      	str	r5, [sp, #8]
   141d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   141d8:	9501      	str	r5, [sp, #4]
   141da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   141dc:	9500      	str	r5, [sp, #0]
   141de:	f7ed fb95 	bl	190c <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   141e2:	4b04      	ldr	r3, [pc, #16]	; (141f4 <_setup_new_thread+0x30>)
   141e4:	689b      	ldr	r3, [r3, #8]
   141e6:	b913      	cbnz	r3, 141ee <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   141e8:	6663      	str	r3, [r4, #100]	; 0x64
}
   141ea:	b007      	add	sp, #28
   141ec:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   141ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   141f0:	e7fa      	b.n	141e8 <_setup_new_thread+0x24>
   141f2:	bf00      	nop
   141f4:	20001950 	.word	0x20001950

000141f8 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   141f8:	b570      	push	{r4, r5, r6, lr}
   141fa:	b086      	sub	sp, #24
   141fc:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   141fe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14200:	9604      	str	r6, [sp, #16]
   14202:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   14204:	9603      	str	r6, [sp, #12]
   14206:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14208:	9602      	str	r6, [sp, #8]
   1420a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   1420c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1420e:	9601      	str	r6, [sp, #4]
   14210:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   14212:	9600      	str	r6, [sp, #0]
   14214:	f7ff ffd6 	bl	141c4 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   14218:	1c6b      	adds	r3, r5, #1
   1421a:	d003      	beq.n	14224 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   1421c:	b92d      	cbnz	r5, 1422a <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   1421e:	4620      	mov	r0, r4
   14220:	f7ff ffb8 	bl	14194 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   14224:	4620      	mov	r0, r4
   14226:	b006      	add	sp, #24
   14228:	bd70      	pop	{r4, r5, r6, pc}
   1422a:	4629      	mov	r1, r5
   1422c:	4620      	mov	r0, r4
   1422e:	f7ff ff5b 	bl	140e8 <schedule_new_thread.part.11>
   14232:	e7f7      	b.n	14224 <_impl_k_thread_create+0x2c>

00014234 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   14234:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   14236:	b510      	push	{r4, lr}
   14238:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1423a:	b103      	cbz	r3, 1423e <_k_thread_single_abort+0xa>
		thread->fn_abort();
   1423c:	4798      	blx	r3
   1423e:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   14240:	06da      	lsls	r2, r3, #27
   14242:	d106      	bne.n	14252 <_k_thread_single_abort+0x1e>
   14244:	6a62      	ldr	r2, [r4, #36]	; 0x24
   14246:	3201      	adds	r2, #1
   14248:	d103      	bne.n	14252 <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   1424a:	4620      	mov	r0, r4
   1424c:	f7ff fbe4 	bl	13a18 <_remove_thread_from_ready_q>
   14250:	e00b      	b.n	1426a <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   14252:	079b      	lsls	r3, r3, #30
   14254:	d502      	bpl.n	1425c <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   14256:	4620      	mov	r0, r4
   14258:	f7ff fc06 	bl	13a68 <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   1425c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1425e:	3301      	adds	r3, #1
   14260:	d003      	beq.n	1426a <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   14262:	f104 0014 	add.w	r0, r4, #20
   14266:	f7ff ff1b 	bl	140a0 <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   1426a:	7a63      	ldrb	r3, [r4, #9]
   1426c:	f043 0308 	orr.w	r3, r3, #8
   14270:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   14272:	bd10      	pop	{r4, pc}

00014274 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   14274:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   14276:	4f21      	ldr	r7, [pc, #132]	; (142fc <_init_static_threads+0x88>)
   14278:	4d21      	ldr	r5, [pc, #132]	; (14300 <_init_static_threads+0x8c>)
{
   1427a:	b087      	sub	sp, #28
   1427c:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   1427e:	42bd      	cmp	r5, r7
   14280:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   14284:	d314      	bcc.n	142b0 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   14286:	4b1f      	ldr	r3, [pc, #124]	; (14304 <_init_static_threads+0x90>)
   14288:	689a      	ldr	r2, [r3, #8]
   1428a:	7ad3      	ldrb	r3, [r2, #11]
   1428c:	3b01      	subs	r3, #1
   1428e:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   14290:	f04f 0320 	mov.w	r3, #32
   14294:	f3ef 8511 	mrs	r5, BASEPRI
   14298:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   1429c:	4c18      	ldr	r4, [pc, #96]	; (14300 <_init_static_threads+0x8c>)
   1429e:	42b4      	cmp	r4, r6
   142a0:	d31f      	bcc.n	142e2 <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   142a2:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   142a6:	b007      	add	sp, #28
   142a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   142ac:	f7ff bc22 	b.w	13af4 <k_sched_unlock>
		_setup_new_thread(
   142b0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   142b4:	9304      	str	r3, [sp, #16]
   142b6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   142ba:	9303      	str	r3, [sp, #12]
   142bc:	f854 3c14 	ldr.w	r3, [r4, #-20]
   142c0:	9302      	str	r3, [sp, #8]
   142c2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   142c6:	9301      	str	r3, [sp, #4]
   142c8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   142cc:	9300      	str	r3, [sp, #0]
   142ce:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   142d2:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   142d4:	f7ff ff76 	bl	141c4 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   142d8:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   142dc:	651d      	str	r5, [r3, #80]	; 0x50
   142de:	4625      	mov	r5, r4
   142e0:	e7cd      	b.n	1427e <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   142e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   142e4:	1c4b      	adds	r3, r1, #1
   142e6:	d003      	beq.n	142f0 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   142e8:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   142ea:	b919      	cbnz	r1, 142f4 <_init_static_threads+0x80>
   142ec:	f7ff ff52 	bl	14194 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   142f0:	342c      	adds	r4, #44	; 0x2c
   142f2:	e7d4      	b.n	1429e <_init_static_threads+0x2a>
   142f4:	f7ff fef8 	bl	140e8 <schedule_new_thread.part.11>
   142f8:	e7fa      	b.n	142f0 <_init_static_threads+0x7c>
   142fa:	bf00      	nop
   142fc:	20003f0c 	.word	0x20003f0c
   14300:	20003f0c 	.word	0x20003f0c
   14304:	20001950 	.word	0x20001950

00014308 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   14308:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   1430a:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   1430c:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   1430e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   14312:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   14314:	72c3      	strb	r3, [r0, #11]
   14316:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   14318:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   1431a:	61c3      	str	r3, [r0, #28]
	t->func = func;
   1431c:	6283      	str	r3, [r0, #40]	; 0x28
   1431e:	4770      	bx	lr

00014320 <k_work_submit_to_queue>:
{
   14320:	b500      	push	{lr}
   14322:	f101 0308 	add.w	r3, r1, #8
   14326:	f3bf 8f5b 	dmb	ish
   1432a:	e853 2f00 	ldrex	r2, [r3]
   1432e:	f042 0e01 	orr.w	lr, r2, #1
   14332:	e843 ec00 	strex	ip, lr, [r3]
   14336:	f1bc 0f00 	cmp.w	ip, #0
   1433a:	d1f6      	bne.n	1432a <k_work_submit_to_queue+0xa>
   1433c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   14340:	07d3      	lsls	r3, r2, #31
   14342:	d403      	bmi.n	1434c <k_work_submit_to_queue+0x2c>
}
   14344:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   14348:	f7ff ba94 	b.w	13874 <k_queue_append>
   1434c:	f85d fb04 	ldr.w	pc, [sp], #4

00014350 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   14350:	f1a0 010c 	sub.w	r1, r0, #12
   14354:	6980      	ldr	r0, [r0, #24]
   14356:	f7ff bfe3 	b.w	14320 <k_work_submit_to_queue>

0001435a <work_q_main>:
{
   1435a:	b510      	push	{r4, lr}
   1435c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   1435e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14362:	4620      	mov	r0, r4
   14364:	f7ff faaa 	bl	138bc <_impl_k_queue_get>
		if (!work) {
   14368:	4603      	mov	r3, r0
   1436a:	2800      	cmp	r0, #0
   1436c:	d0f7      	beq.n	1435e <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1436e:	3308      	adds	r3, #8
		handler = work->handler;
   14370:	6842      	ldr	r2, [r0, #4]
   14372:	f3bf 8f5b 	dmb	ish
   14376:	e853 1f00 	ldrex	r1, [r3]
   1437a:	f021 0e01 	bic.w	lr, r1, #1
   1437e:	e843 ec00 	strex	ip, lr, [r3]
   14382:	f1bc 0f00 	cmp.w	ip, #0
   14386:	d1f6      	bne.n	14376 <work_q_main+0x1c>
   14388:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   1438c:	07cb      	lsls	r3, r1, #31
   1438e:	d500      	bpl.n	14392 <work_q_main+0x38>
			handler(work);
   14390:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   14392:	f7ff fcf5 	bl	13d80 <_impl_k_yield>
   14396:	e7e2      	b.n	1435e <work_q_main+0x4>

00014398 <k_work_q_start>:
{
   14398:	b5f0      	push	{r4, r5, r6, r7, lr}
   1439a:	b087      	sub	sp, #28
   1439c:	4604      	mov	r4, r0
   1439e:	461f      	mov	r7, r3
   143a0:	460d      	mov	r5, r1
   143a2:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   143a4:	f7ff fa5e 	bl	13864 <_impl_k_queue_init>

   143a8:	2000      	movs	r0, #0
   143aa:	9005      	str	r0, [sp, #20]
   143ac:	9004      	str	r0, [sp, #16]
   143ae:	9002      	str	r0, [sp, #8]
   143b0:	9001      	str	r0, [sp, #4]
   143b2:	9703      	str	r7, [sp, #12]
   143b4:	9400      	str	r4, [sp, #0]
   143b6:	4b04      	ldr	r3, [pc, #16]	; (143c8 <k_work_q_start+0x30>)
   143b8:	4632      	mov	r2, r6
   143ba:	4629      	mov	r1, r5
   143bc:	f104 0010 	add.w	r0, r4, #16
   143c0:	f7ff ff1a 	bl	141f8 <_impl_k_thread_create>
}
   143c4:	b007      	add	sp, #28
   143c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   143c8:	0001435b 	.word	0x0001435b

000143cc <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   143cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   143d0:	2300      	movs	r3, #0
   143d2:	61c2      	str	r2, [r0, #28]
	t->func = func;
   143d4:	4a04      	ldr	r2, [pc, #16]	; (143e8 <k_delayed_work_init+0x1c>)
   143d6:	6003      	str	r3, [r0, #0]
   143d8:	6041      	str	r1, [r0, #4]
   143da:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   143dc:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   143de:	6143      	str	r3, [r0, #20]
	t->func = func;
   143e0:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   143e2:	6243      	str	r3, [r0, #36]	; 0x24
   143e4:	4770      	bx	lr
   143e6:	bf00      	nop
   143e8:	00014351 	.word	0x00014351

000143ec <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   143ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   143ee:	f04f 0320 	mov.w	r3, #32
   143f2:	f3ef 8411 	mrs	r4, BASEPRI
   143f6:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   143fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
   143fc:	b923      	cbnz	r3, 14408 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   143fe:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   14402:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   14406:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14408:	f3bf 8f5b 	dmb	ish
   1440c:	6883      	ldr	r3, [r0, #8]
   1440e:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   14412:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   14414:	f100 0508 	add.w	r5, r0, #8
   14418:	d533      	bpl.n	14482 <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1441a:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1441c:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   1441e:	2100      	movs	r1, #0
   14420:	2b00      	cmp	r3, #0
   14422:	d0ec      	beq.n	143fe <k_delayed_work_cancel+0x12>
   14424:	4298      	cmp	r0, r3
   14426:	d127      	bne.n	14478 <k_delayed_work_cancel+0x8c>
   14428:	6803      	ldr	r3, [r0, #0]
   1442a:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1442c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   14430:	b9c9      	cbnz	r1, 14466 <k_delayed_work_cancel+0x7a>
   14432:	42b8      	cmp	r0, r7
	list->head = node;
   14434:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   14436:	d100      	bne.n	1443a <k_delayed_work_cancel+0x4e>
	list->tail = node;
   14438:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1443a:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1443c:	f003 0303 	and.w	r3, r3, #3
   14440:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   14442:	2300      	movs	r3, #0
   14444:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14446:	f3bf 8f5b 	dmb	ish
   1444a:	e855 2f00 	ldrex	r2, [r5]
   1444e:	f022 0201 	bic.w	r2, r2, #1
   14452:	e845 2100 	strex	r1, r2, [r5]
   14456:	2900      	cmp	r1, #0
   14458:	d1f7      	bne.n	1444a <k_delayed_work_cancel+0x5e>
   1445a:	f3bf 8f5b 	dmb	ish
   1445e:	f384 8811 	msr	BASEPRI, r4
	return 0;
   14462:	4618      	mov	r0, r3
   14464:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14466:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14468:	f006 0603 	and.w	r6, r6, #3
   1446c:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   1446e:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   14470:	600b      	str	r3, [r1, #0]
	list->tail = node;
   14472:	bf08      	it	eq
   14474:	6051      	streq	r1, [r2, #4]
   14476:	e7e0      	b.n	1443a <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14478:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   1447a:	4619      	mov	r1, r3
   1447c:	f026 0303 	bic.w	r3, r6, #3
   14480:	e7ce      	b.n	14420 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14482:	69c1      	ldr	r1, [r0, #28]
   14484:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   14486:	f100 020c 	add.w	r2, r0, #12
   1448a:	d0da      	beq.n	14442 <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1448c:	4b08      	ldr	r3, [pc, #32]	; (144b0 <k_delayed_work_cancel+0xc4>)
   1448e:	699b      	ldr	r3, [r3, #24]
   14490:	429a      	cmp	r2, r3
   14492:	bf1f      	itttt	ne
   14494:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14496:	6913      	ldrne	r3, [r2, #16]
   14498:	185b      	addne	r3, r3, r1
   1449a:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   1449c:	6903      	ldr	r3, [r0, #16]
   1449e:	68c2      	ldr	r2, [r0, #12]
   144a0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   144a2:	68c2      	ldr	r2, [r0, #12]
   144a4:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   144a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   144aa:	61c3      	str	r3, [r0, #28]
   144ac:	e7c9      	b.n	14442 <k_delayed_work_cancel+0x56>
   144ae:	bf00      	nop
   144b0:	20001950 	.word	0x20001950

000144b4 <k_delayed_work_submit_to_queue>:
{
   144b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   144b6:	4607      	mov	r7, r0
   144b8:	460c      	mov	r4, r1
   144ba:	4615      	mov	r5, r2
	__asm__ volatile(
   144bc:	f04f 0320 	mov.w	r3, #32
   144c0:	f3ef 8611 	mrs	r6, BASEPRI
   144c4:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   144c8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   144ca:	b123      	cbz	r3, 144d6 <k_delayed_work_submit_to_queue+0x22>
   144cc:	4283      	cmp	r3, r0
   144ce:	d00b      	beq.n	144e8 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   144d0:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   144d4:	e00d      	b.n	144f2 <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   144d6:	b138      	cbz	r0, 144e8 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   144d8:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   144da:	b96d      	cbnz	r5, 144f8 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   144dc:	4621      	mov	r1, r4
   144de:	4638      	mov	r0, r7
   144e0:	f7ff ff1e 	bl	14320 <k_work_submit_to_queue>
	err = 0;
   144e4:	2000      	movs	r0, #0
   144e6:	e004      	b.n	144f2 <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   144e8:	4620      	mov	r0, r4
   144ea:	f7ff ff7f 	bl	143ec <k_delayed_work_cancel>
		if (err < 0) {
   144ee:	2800      	cmp	r0, #0
   144f0:	daf2      	bge.n	144d8 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   144f2:	f386 8811 	msr	BASEPRI, r6
}
   144f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   144f8:	220a      	movs	r2, #10
   144fa:	3509      	adds	r5, #9
   144fc:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   14500:	4a16      	ldr	r2, [pc, #88]	; (1455c <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   14502:	2300      	movs	r3, #0
   14504:	4611      	mov	r1, r2
   14506:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14508:	61a3      	str	r3, [r4, #24]
   1450a:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   1450e:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14510:	428b      	cmp	r3, r1
   14512:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14516:	61e5      	str	r5, [r4, #28]
   14518:	d106      	bne.n	14528 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   1451a:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   1451c:	6993      	ldr	r3, [r2, #24]
   1451e:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   14520:	6993      	ldr	r3, [r2, #24]
   14522:	601f      	str	r7, [r3, #0]
	list->tail = node;
   14524:	6197      	str	r7, [r2, #24]
   14526:	e7dd      	b.n	144e4 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14528:	2b00      	cmp	r3, #0
   1452a:	d0f6      	beq.n	1451a <k_delayed_work_submit_to_queue+0x66>
   1452c:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   14530:	69e0      	ldr	r0, [r4, #28]
   14532:	691d      	ldr	r5, [r3, #16]
   14534:	42a8      	cmp	r0, r5
   14536:	dc08      	bgt.n	1454a <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   14538:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   1453a:	1a28      	subs	r0, r5, r0
   1453c:	6118      	str	r0, [r3, #16]
   1453e:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   14540:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   14542:	685a      	ldr	r2, [r3, #4]
   14544:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   14546:	605f      	str	r7, [r3, #4]
   14548:	e7cc      	b.n	144e4 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   1454a:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   1454c:	4573      	cmp	r3, lr
   1454e:	61e0      	str	r0, [r4, #28]
   14550:	d0e3      	beq.n	1451a <k_delayed_work_submit_to_queue+0x66>
   14552:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14554:	2b00      	cmp	r3, #0
   14556:	d1eb      	bne.n	14530 <k_delayed_work_submit_to_queue+0x7c>
   14558:	e7df      	b.n	1451a <k_delayed_work_submit_to_queue+0x66>
   1455a:	bf00      	nop
   1455c:	20001950 	.word	0x20001950

00014560 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   14560:	2314      	movs	r3, #20
   14562:	b530      	push	{r4, r5, lr}
   14564:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   14568:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   1456a:	2900      	cmp	r1, #0
   1456c:	da00      	bge.n	14570 <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   1456e:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   14570:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   14572:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   14574:	f003 030f 	and.w	r3, r3, #15
   14578:	2b02      	cmp	r3, #2
   1457a:	d003      	beq.n	14584 <clear_event_registrations+0x24>
   1457c:	2b04      	cmp	r3, #4
   1457e:	d001      	beq.n	14584 <clear_event_registrations+0x24>
   14580:	2b01      	cmp	r3, #1
   14582:	d104      	bne.n	1458e <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   14584:	6843      	ldr	r3, [r0, #4]
   14586:	6805      	ldr	r5, [r0, #0]
   14588:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   1458a:	6805      	ldr	r5, [r0, #0]
   1458c:	606b      	str	r3, [r5, #4]
   1458e:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   14592:	f04f 0320 	mov.w	r3, #32
   14596:	f3ef 8211 	mrs	r2, BASEPRI
   1459a:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   1459e:	3901      	subs	r1, #1
   145a0:	3814      	subs	r0, #20
   145a2:	e7e2      	b.n	1456a <clear_event_registrations+0xa>

000145a4 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   145a4:	6883      	ldr	r3, [r0, #8]
{
   145a6:	b570      	push	{r4, r5, r6, lr}
   145a8:	4605      	mov	r5, r0
   145aa:	460e      	mov	r6, r1
	if (!event->poller) {
   145ac:	b1d3      	cbz	r3, 145e4 <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   145ae:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   145b0:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   145b2:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   145b4:	7a63      	ldrb	r3, [r4, #9]
   145b6:	079a      	lsls	r2, r3, #30
   145b8:	d514      	bpl.n	145e4 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   145ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   145bc:	3302      	adds	r3, #2
   145be:	d01a      	beq.n	145f6 <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   145c0:	4620      	mov	r0, r4
   145c2:	f7ff fa6e 	bl	13aa2 <_unpend_thread>
	_set_thread_return_value(thread,
   145c6:	2e00      	cmp	r6, #0
   145c8:	bf0c      	ite	eq
   145ca:	f06f 0303 	mvneq.w	r3, #3
   145ce:	2300      	movne	r3, #0
   145d0:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   145d2:	7a63      	ldrb	r3, [r4, #9]
   145d4:	06db      	lsls	r3, r3, #27
   145d6:	d105      	bne.n	145e4 <signal_poll_event+0x40>
   145d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   145da:	3301      	adds	r3, #1
   145dc:	d102      	bne.n	145e4 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   145de:	4620      	mov	r0, r4
   145e0:	f7ff fac2 	bl	13b68 <_add_thread_to_ready_q>
	event->state |= state;
   145e4:	7b6b      	ldrb	r3, [r5, #13]
   145e6:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   145ea:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   145ee:	2000      	movs	r0, #0
	event->state |= state;
   145f0:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   145f2:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   145f4:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   145f6:	f06f 000a 	mvn.w	r0, #10
}
   145fa:	bd70      	pop	{r4, r5, r6, pc}

000145fc <add_event>:
{
   145fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   145fe:	6803      	ldr	r3, [r0, #0]
   14600:	4298      	cmp	r0, r3
   14602:	4604      	mov	r4, r0
   14604:	460e      	mov	r6, r1
   14606:	4617      	mov	r7, r2
   14608:	d106      	bne.n	14618 <add_event+0x1c>
	node->next = list;
   1460a:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   1460c:	6863      	ldr	r3, [r4, #4]
   1460e:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   14610:	6863      	ldr	r3, [r4, #4]
   14612:	601e      	str	r6, [r3, #0]
	list->tail = node;
   14614:	6066      	str	r6, [r4, #4]
   14616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   14618:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   1461a:	2b00      	cmp	r3, #0
   1461c:	d0f5      	beq.n	1460a <add_event+0xe>
   1461e:	689b      	ldr	r3, [r3, #8]
   14620:	6811      	ldr	r1, [r2, #0]
   14622:	6818      	ldr	r0, [r3, #0]
   14624:	f7ff f9ee 	bl	13a04 <_is_t1_higher_prio_than_t2>
   14628:	2800      	cmp	r0, #0
   1462a:	d1ee      	bne.n	1460a <add_event+0xe>
	return list->head == list;
   1462c:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1462e:	42ac      	cmp	r4, r5
   14630:	d0eb      	beq.n	1460a <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   14632:	2d00      	cmp	r5, #0
   14634:	d0e9      	beq.n	1460a <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   14636:	68ab      	ldr	r3, [r5, #8]
   14638:	6838      	ldr	r0, [r7, #0]
   1463a:	6819      	ldr	r1, [r3, #0]
   1463c:	f7ff f9e2 	bl	13a04 <_is_t1_higher_prio_than_t2>
   14640:	b130      	cbz	r0, 14650 <add_event+0x54>
		node->prev = insert_point->prev;
   14642:	686b      	ldr	r3, [r5, #4]
   14644:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   14646:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   14648:	686b      	ldr	r3, [r5, #4]
   1464a:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   1464c:	606e      	str	r6, [r5, #4]
   1464e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   14650:	6863      	ldr	r3, [r4, #4]
   14652:	429d      	cmp	r5, r3
   14654:	d0d9      	beq.n	1460a <add_event+0xe>
   14656:	682d      	ldr	r5, [r5, #0]
   14658:	e7eb      	b.n	14632 <add_event+0x36>

0001465a <k_poll_event_init>:
{
   1465a:	b530      	push	{r4, r5, lr}
	event->type = type;
   1465c:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   1465e:	6103      	str	r3, [r0, #16]
	event->type = type;
   14660:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   14664:	7b81      	ldrb	r1, [r0, #14]
   14666:	f362 0100 	bfi	r1, r2, #0, #1
   1466a:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   1466c:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   1466e:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   14670:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   14674:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   14678:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1467a:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   1467c:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   1467e:	bd30      	pop	{r4, r5, pc}

00014680 <_impl_k_poll>:
{
   14680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   14684:	4b3f      	ldr	r3, [pc, #252]	; (14784 <_impl_k_poll+0x104>)
{
   14686:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   14688:	689b      	ldr	r3, [r3, #8]
   1468a:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   1468c:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1468e:	2301      	movs	r3, #1
{
   14690:	4607      	mov	r7, r0
   14692:	468a      	mov	sl, r1
   14694:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   14696:	9301      	str	r3, [sp, #4]
   14698:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   1469a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   1469e:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   146a0:	4556      	cmp	r6, sl
   146a2:	db10      	blt.n	146c6 <_impl_k_poll+0x46>
   146a4:	f04f 0320 	mov.w	r3, #32
   146a8:	f3ef 8611 	mrs	r6, BASEPRI
   146ac:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   146b0:	9c01      	ldr	r4, [sp, #4]
   146b2:	2c00      	cmp	r4, #0
   146b4:	d13f      	bne.n	14736 <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   146b6:	4632      	mov	r2, r6
   146b8:	4629      	mov	r1, r5
   146ba:	4638      	mov	r0, r7
   146bc:	f7ff ff50 	bl	14560 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   146c0:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   146c4:	e040      	b.n	14748 <_impl_k_poll+0xc8>
	__asm__ volatile(
   146c6:	f04f 0320 	mov.w	r3, #32
   146ca:	f3ef 8b11 	mrs	fp, BASEPRI
   146ce:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   146d2:	7b62      	ldrb	r2, [r4, #13]
   146d4:	f002 030f 	and.w	r3, r2, #15
   146d8:	2b02      	cmp	r3, #2
   146da:	d003      	beq.n	146e4 <_impl_k_poll+0x64>
   146dc:	2b04      	cmp	r3, #4
   146de:	d004      	beq.n	146ea <_impl_k_poll+0x6a>
   146e0:	2b01      	cmp	r3, #1
   146e2:	d106      	bne.n	146f2 <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   146e4:	6921      	ldr	r1, [r4, #16]
   146e6:	6889      	ldr	r1, [r1, #8]
   146e8:	e001      	b.n	146ee <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   146ea:	6921      	ldr	r1, [r4, #16]
   146ec:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   146ee:	2900      	cmp	r1, #0
   146f0:	d13d      	bne.n	1476e <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   146f2:	f1b8 0f00 	cmp.w	r8, #0
   146f6:	d014      	beq.n	14722 <_impl_k_poll+0xa2>
   146f8:	9a01      	ldr	r2, [sp, #4]
   146fa:	b192      	cbz	r2, 14722 <_impl_k_poll+0xa2>
	switch (event->type) {
   146fc:	2b02      	cmp	r3, #2
   146fe:	d007      	beq.n	14710 <_impl_k_poll+0x90>
   14700:	2b04      	cmp	r3, #4
   14702:	d013      	beq.n	1472c <_impl_k_poll+0xac>
   14704:	2b01      	cmp	r3, #1
   14706:	d109      	bne.n	1471c <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   14708:	466a      	mov	r2, sp
   1470a:	4621      	mov	r1, r4
   1470c:	6920      	ldr	r0, [r4, #16]
   1470e:	e003      	b.n	14718 <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   14710:	6920      	ldr	r0, [r4, #16]
   14712:	466a      	mov	r2, sp
   14714:	4621      	mov	r1, r4
   14716:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   14718:	f7ff ff70 	bl	145fc <add_event>
	event->poller = poller;
   1471c:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   14720:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14722:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   14726:	3601      	adds	r6, #1
   14728:	3414      	adds	r4, #20
   1472a:	e7b9      	b.n	146a0 <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   1472c:	6920      	ldr	r0, [r4, #16]
   1472e:	466a      	mov	r2, sp
   14730:	4621      	mov	r1, r4
   14732:	3008      	adds	r0, #8
   14734:	e7f0      	b.n	14718 <_impl_k_poll+0x98>
	poller.is_polling = 0;
   14736:	2300      	movs	r3, #0
   14738:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   1473a:	f1b8 0f00 	cmp.w	r8, #0
   1473e:	d107      	bne.n	14750 <_impl_k_poll+0xd0>
   14740:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   14744:	f06f 040a 	mvn.w	r4, #10
}
   14748:	4620      	mov	r0, r4
   1474a:	b005      	add	sp, #20
   1474c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   14750:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   14752:	4642      	mov	r2, r8
   14754:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   14756:	9102      	str	r1, [sp, #8]
   14758:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   1475a:	f7ff fab3 	bl	13cc4 <_pend_current_thread>
   1475e:	4604      	mov	r4, r0
	__asm__ volatile(
   14760:	f04f 0320 	mov.w	r3, #32
   14764:	f3ef 8611 	mrs	r6, BASEPRI
   14768:	f383 8811 	msr	BASEPRI, r3
   1476c:	e7a3      	b.n	146b6 <_impl_k_poll+0x36>
	event->state |= state;
   1476e:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   14772:	f363 1207 	bfi	r2, r3, #4, #4
   14776:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   14778:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   1477c:	f8cd 9004 	str.w	r9, [sp, #4]
   14780:	e7cf      	b.n	14722 <_impl_k_poll+0xa2>
   14782:	bf00      	nop
   14784:	20001950 	.word	0x20001950

00014788 <_handle_obj_poll_events>:
	return list->head == list;
   14788:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   1478a:	4298      	cmp	r0, r3
   1478c:	d007      	beq.n	1479e <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   1478e:	e893 0005 	ldmia.w	r3, {r0, r2}
   14792:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   14794:	6818      	ldr	r0, [r3, #0]
   14796:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   14798:	4618      	mov	r0, r3
   1479a:	f7ff bf03 	b.w	145a4 <signal_poll_event>
   1479e:	4770      	bx	lr

000147a0 <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   147a0:	b538      	push	{r3, r4, r5, lr}
   147a2:	f04f 0320 	mov.w	r3, #32
   147a6:	f3ef 8511 	mrs	r5, BASEPRI
   147aa:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   147ae:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   147b0:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   147b2:	4298      	cmp	r0, r3
	signal->signaled = 1;
   147b4:	f04f 0101 	mov.w	r1, #1
   147b8:	6081      	str	r1, [r0, #8]
   147ba:	d00d      	beq.n	147d8 <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   147bc:	e893 0005 	ldmia.w	r3, {r0, r2}
   147c0:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   147c2:	6818      	ldr	r0, [r3, #0]
   147c4:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   147c6:	4618      	mov	r0, r3
   147c8:	f7ff feec 	bl	145a4 <signal_poll_event>
   147cc:	4604      	mov	r4, r0

	_reschedule(key);
   147ce:	4628      	mov	r0, r5
   147d0:	f7ff f972 	bl	13ab8 <_reschedule>
	return rc;
}
   147d4:	4620      	mov	r0, r4
   147d6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   147d8:	f385 8811 	msr	BASEPRI, r5
		return 0;
   147dc:	2400      	movs	r4, #0
   147de:	e7f9      	b.n	147d4 <_impl_k_poll_signal+0x34>

000147e0 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   147e0:	4770      	bx	lr
